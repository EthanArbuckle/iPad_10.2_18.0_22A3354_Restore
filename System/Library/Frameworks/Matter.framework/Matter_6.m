uint64_t sub_23416E10C(uint64_t *a1, _BYTE *a2, _DWORD *a3)
{
  int v3;
  __int16 v4;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;

  *a3 = 0;
  if (*((_DWORD *)a1 + 36))
  {
    v3 = 66;
    v4 = 469;
LABEL_3:
    sub_2341579B4(30, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/cipher.c", v4);
    return 0;
  }
  v7 = *a1;
  if ((*(_BYTE *)(*a1 + 21) & 4) != 0)
  {
    v9 = (*(uint64_t (**)(void))(v7 + 32))();
    if (v9 < 0)
      return 0;
    *a3 = v9;
  }
  else if ((*((_BYTE *)a1 + 33) & 8) != 0)
  {
    if (*((_DWORD *)a1 + 25))
    {
      v3 = 106;
      v4 = 486;
      goto LABEL_3;
    }
  }
  else
  {
    v8 = *(_DWORD *)(v7 + 4);
    if (v8 >= 2)
    {
      if (*((_DWORD *)a1 + 25) || !*((_DWORD *)a1 + 27))
      {
        v3 = 123;
        v4 = 495;
        goto LABEL_3;
      }
      v10 = v8 - 1;
      v11 = *((unsigned __int8 *)a1 + v10 + 112);
      if (*((_BYTE *)a1 + v10 + 112))
        v12 = (int)v8 < v11;
      else
        v12 = 1;
      if (v12)
      {
        v3 = 101;
        v4 = 504;
        goto LABEL_3;
      }
      v13 = *((unsigned __int8 *)a1 + v10 + 112);
      do
      {
        if (*((unsigned __int8 *)a1 + v10 + 112) != v11)
        {
          v3 = 101;
          v4 = 510;
          goto LABEL_3;
        }
        LODWORD(v10) = v10 - 1;
        --v13;
      }
      while (v13);
      v14 = v8 - v11;
      if ((int)v14 >= 1)
      {
        v15 = (char *)(a1 + 14);
        v16 = v14;
        do
        {
          v17 = *v15++;
          *a2++ = v17;
          --v16;
        }
        while (v16);
      }
      *a3 = v14;
    }
  }
  return 1;
}

uint64_t sub_23416E280(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_23416E28C(int *a1, uint64_t a2, int *a3, char *__src, size_t __n)
{
  if (a1[7])
    return sub_23416DC10(a1, a2, a3, __src, __n);
  else
    return sub_23416DF58(a1, (void *)a2, a3, __src, __n);
}

uint64_t sub_23416E29C(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  if (*((_DWORD *)a1 + 7))
    return sub_23416DE40(a1, a2, a3);
  else
    return sub_23416E10C(a1, (_BYTE *)a2, a3);
}

uint64_t sub_23416E2AC(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 4);
}

uint64_t sub_23416E2B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_23416E2C0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) & 0x3F;
}

uint64_t sub_23416E2CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_23416E2D4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFF7FF | ((a2 == 0) << 11);
  return 1;
}

uint64_t sub_23416E2F0(_DWORD *a1, int a2)
{
  if (a1[6] != a2)
  {
    if (!a2 || (*(_BYTE *)(*(_QWORD *)a1 + 20) & 0x40) == 0)
    {
      sub_2341579B4(30, 0, 110, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/cipher.c", 653);
      return 0;
    }
    a1[6] = a2;
  }
  return 1;
}

uint64_t sub_23416E348(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_23416E350(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) & 0xFFFFFFC0;
}

uint64_t sub_23416E35C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, int a5)
{
  if (a2)
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return sub_23416D918(a1, a2, a3, a3, a4, a5);
}

uint64_t sub_23416E38C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  return sub_23416E35C(a1, a2, a3, a4, 1);
}

uint64_t sub_23416E394(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  return sub_23416E35C(a1, a2, a3, a4, 0);
}

uint64_t *(*sub_23416E3A8(uint64_t a1, uint64_t a2, uint64_t *(**a3)(uint64_t a1, uint64_t a2, uint64_t a3), _OWORD *a4, int a5))(uint64_t *result, uint64_t a2, unint64_t a3, uint64_t a4, _OWORD *a5)
{
  sub_23415F4C0(a4, 8 * a5, a1);
  if (a2)
    sub_23416E414(a2, a1, (uint64_t (*)(unint64_t *, unint64_t *, uint64_t))sub_23415F318);
  if (a3)
    *a3 = sub_23415F318;
  return sub_2341600D0;
}

uint64_t sub_23416E414(uint64_t a1, uint64_t a2, uint64_t (*a3)(unint64_t *, unint64_t *, uint64_t))
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 272) = a3;
  v8 = 0;
  v9 = 0;
  result = a3(&v8, &v8, a2);
  v5 = bswap64(v8);
  *((_QWORD *)&v7 + 1) = v5;
  *(_QWORD *)&v7 = bswap64(v9);
  v6 = v7 >> 63;
  *((_QWORD *)&v7 + 1) = v7;
  *(_QWORD *)&v7 = v5;
  *(_QWORD *)a1 = (v5 >> 63) & 0xC200000000000000 ^ v6;
  *(_QWORD *)(a1 + 8) = v7 >> 63;
  *(_QWORD *)(a1 + 256) = sub_23417B074;
  *(_QWORD *)(a1 + 264) = sub_23417B0EC;
  *(_BYTE *)(a1 + 280) &= ~1u;
  return result;
}

__int128 *sub_23416E4EC()
{
  sub_234195C74(&stru_256157E80, (void (*)(void))sub_23416E518);
  return &xmmword_256159730;
}

double sub_23416E518()
{
  double result;

  qword_256159758 = 0;
  unk_256159760 = 0;
  xmmword_256159730 = xmmword_2342E1EF0;
  *(_QWORD *)&result = 0x200000108;
  qword_256159740 = 0x200000108;
  qword_256159748 = (uint64_t)sub_234185EAC;
  unk_256159750 = sub_234185F58;
  return result;
}

__int128 *sub_23416E554()
{
  sub_234195C74(&stru_256157E90, (void (*)(void))sub_23416E580);
  return &xmmword_256159770;
}

double sub_23416E580()
{
  double result;

  qword_256159798 = 0;
  unk_2561597A0 = 0;
  xmmword_256159770 = xmmword_2342E1F00;
  *(_QWORD *)&result = 0x500000108;
  qword_256159780 = 0x500000108;
  qword_256159788 = (uint64_t)sub_234185EAC;
  unk_256159790 = sub_234185FB8;
  return result;
}

__int128 *sub_23416E5BC()
{
  sub_234195C74(&stru_256157EA0, (void (*)(void))sub_23416E5E8);
  return &xmmword_2561597B0;
}

double sub_23416E5E8()
{
  double result;

  qword_2561597D8 = 0;
  unk_2561597E0 = 0;
  xmmword_2561597B0 = xmmword_2342E1F10;
  *(_QWORD *)&result = 0x400000108;
  qword_2561597C0 = 0x400000108;
  qword_2561597C8 = (uint64_t)sub_234185EAC;
  unk_2561597D0 = sub_234186008;
  return result;
}

__int128 *sub_23416E624()
{
  sub_234195C74(&stru_256157EB0, (void (*)(void))sub_23416E650);
  return &xmmword_2561597F0;
}

double sub_23416E650()
{
  double result;

  xmmword_2561597F0 = xmmword_2342E1F20;
  *(_QWORD *)&result = 0x1F86000002A8;
  qword_256159800 = 0x1F86000002A8;
  qword_256159808 = (uint64_t)sub_23418603C;
  unk_256159810 = sub_234186174;
  qword_256159818 = (uint64_t)sub_234186290;
  unk_256159820 = sub_2341862E0;
  return result;
}

__int128 *sub_23416E69C()
{
  sub_234195C74(&stru_256157EC0, (void (*)(void))sub_23416E6C8);
  return &xmmword_256159830;
}

double sub_23416E6C8()
{
  double result;

  qword_256159858 = 0;
  unk_256159860 = 0;
  xmmword_256159830 = xmmword_2342E1F30;
  *(_QWORD *)&result = 0x200000108;
  qword_256159840 = 0x200000108;
  qword_256159848 = (uint64_t)sub_234185EAC;
  unk_256159850 = sub_234185F58;
  return result;
}

__int128 *sub_23416E704()
{
  sub_234195C74(&stru_256157ED0, (void (*)(void))sub_23416E730);
  return &xmmword_256159870;
}

double sub_23416E730()
{
  double result;

  qword_256159898 = 0;
  unk_2561598A0 = 0;
  xmmword_256159870 = xmmword_2342E1F40;
  *(_QWORD *)&result = 0x500000108;
  qword_256159880 = 0x500000108;
  qword_256159888 = (uint64_t)sub_234185EAC;
  unk_256159890 = sub_234185FB8;
  return result;
}

__int128 *sub_23416E76C()
{
  sub_234195C74(&stru_256157EE0, (void (*)(void))sub_23416E798);
  return &xmmword_2561598B0;
}

double sub_23416E798()
{
  double result;

  qword_2561598D8 = 0;
  unk_2561598E0 = 0;
  xmmword_2561598B0 = xmmword_2342E1F50;
  *(_QWORD *)&result = 0x400000108;
  qword_2561598C0 = 0x400000108;
  qword_2561598C8 = (uint64_t)sub_234185EAC;
  unk_2561598D0 = sub_234186008;
  return result;
}

__int128 *sub_23416E7D4()
{
  sub_234195C74(&stru_256157EF0, (void (*)(void))sub_23416E800);
  return &xmmword_2561598F0;
}

double sub_23416E800()
{
  double result;

  xmmword_2561598F0 = xmmword_2342E1F60;
  *(_QWORD *)&result = 0x1F86000002A8;
  qword_256159900 = 0x1F86000002A8;
  qword_256159908 = (uint64_t)sub_23418603C;
  unk_256159910 = sub_234186174;
  qword_256159918 = (uint64_t)sub_234186290;
  unk_256159920 = sub_2341862E0;
  return result;
}

__int128 *sub_23416E84C()
{
  sub_234195C74(&stru_256157F00, (void (*)(void))sub_23416E878);
  return &xmmword_256159930;
}

double sub_23416E878()
{
  double result;

  qword_256159958 = 0;
  unk_256159960 = 0;
  xmmword_256159930 = xmmword_2342E1F70;
  *(_QWORD *)&result = 0x200000108;
  qword_256159940 = 0x200000108;
  qword_256159948 = (uint64_t)sub_234185EAC;
  unk_256159950 = sub_234185F58;
  return result;
}

__int128 *sub_23416E8B4()
{
  sub_234195C74(&stru_256157F10, (void (*)(void))sub_23416E8E0);
  return &xmmword_256159970;
}

double sub_23416E8E0()
{
  double result;

  qword_256159998 = 0;
  unk_2561599A0 = 0;
  xmmword_256159970 = xmmword_2342E1F80;
  *(_QWORD *)&result = 0x500000108;
  qword_256159980 = 0x500000108;
  qword_256159988 = (uint64_t)sub_234185EAC;
  unk_256159990 = sub_234185FB8;
  return result;
}

__int128 *sub_23416E91C()
{
  sub_234195C74(&stru_256157F20, (void (*)(void))sub_23416E948);
  return &xmmword_2561599B0;
}

double sub_23416E948()
{
  double result;

  qword_2561599D8 = 0;
  unk_2561599E0 = 0;
  xmmword_2561599B0 = xmmword_2342E1F90;
  *(_QWORD *)&result = 0x400000108;
  qword_2561599C0 = 0x400000108;
  qword_2561599C8 = (uint64_t)sub_234185EAC;
  unk_2561599D0 = sub_234186008;
  return result;
}

__int128 *sub_23416E984()
{
  sub_234195C74(&stru_256157F30, (void (*)(void))sub_23416E9B0);
  return &xmmword_2561599F0;
}

double sub_23416E9B0()
{
  double result;

  xmmword_2561599F0 = xmmword_2342E1FA0;
  *(_QWORD *)&result = 0x1F86000002A8;
  qword_256159A00 = 0x1F86000002A8;
  qword_256159A08 = (uint64_t)sub_23418603C;
  unk_256159A10 = sub_234186174;
  qword_256159A18 = (uint64_t)sub_234186290;
  unk_256159A20 = sub_2341862E0;
  return result;
}

uint64_t *sub_23416E9FC()
{
  sub_234195C74(&stru_256157F40, (void (*)(void))sub_2341865D8);
  return &qword_256159A28;
}

uint64_t *sub_23416EA28()
{
  sub_234195C74(&stru_256157F50, (void (*)(void))sub_234186694);
  return &qword_256159A60;
}

uint64_t *sub_23416EA54()
{
  sub_234195C74(&stru_256157F60, (void (*)(void))sub_2341866E4);
  return &qword_256159A98;
}

int *sub_23416EA80()
{
  sub_234195C74(&stru_256157F70, (void (*)(void))sub_23416EAAC);
  return &dword_256159AD0;
}

double sub_23416EAAC()
{
  double result;

  xmmword_256159AE0 = 0u;
  unk_256159AF0 = 0u;
  xmmword_256159B00 = 0u;
  qword_256159B10 = 0;
  *(_QWORD *)&result = 269487120;
  dword_256159AD0 = 269487120;
  dword_256159AD4 = 1;
  qword_256159AD8 = (uint64_t)sub_234186734;
  *((_QWORD *)&xmmword_256159AE0 + 1) = nullsub_758;
  qword_256159AF8 = (uint64_t)sub_234186788;
  *(_QWORD *)&xmmword_256159B00 = sub_2341867BC;
  return result;
}

int *sub_23416EB08()
{
  sub_234195C74(&stru_256157F80, (void (*)(void))sub_23416EB34);
  return &dword_256159B18;
}

double sub_23416EB34()
{
  double result;

  xmmword_256159B28 = 0u;
  unk_256159B38 = 0u;
  xmmword_256159B48 = 0u;
  qword_256159B58 = 0;
  *(_QWORD *)&result = 269487128;
  dword_256159B18 = 269487128;
  dword_256159B1C = 1;
  qword_256159B20 = (uint64_t)sub_234186734;
  *((_QWORD *)&xmmword_256159B28 + 1) = nullsub_758;
  qword_256159B40 = (uint64_t)sub_234186788;
  *(_QWORD *)&xmmword_256159B48 = sub_2341867BC;
  return result;
}

int *sub_23416EB90()
{
  sub_234195C74(&stru_256157F90, (void (*)(void))sub_23416EBBC);
  return &dword_256159B60;
}

double sub_23416EBBC()
{
  double result;

  xmmword_256159B70 = 0u;
  unk_256159B80 = 0u;
  xmmword_256159B90 = 0u;
  qword_256159BA0 = 0;
  *(_QWORD *)&result = 269487136;
  dword_256159B60 = 269487136;
  dword_256159B64 = 1;
  qword_256159B68 = (uint64_t)sub_234186734;
  *((_QWORD *)&xmmword_256159B70 + 1) = nullsub_758;
  qword_256159B88 = (uint64_t)sub_234186788;
  *(_QWORD *)&xmmword_256159B90 = sub_2341867BC;
  return result;
}

int *sub_23416EC18()
{
  sub_234195C74(&stru_256157FA0, (void (*)(void))sub_23416EC44);
  return &dword_256159BA8;
}

double sub_23416EC44()
{
  double result;

  xmmword_256159BB8 = 0u;
  unk_256159BC8 = 0u;
  xmmword_256159BD8 = 0u;
  qword_256159BE8 = 0;
  *(_QWORD *)&result = 471597072;
  dword_256159BA8 = 471597072;
  dword_256159BAC = 1;
  qword_256159BB0 = (uint64_t)sub_234186CB0;
  *((_QWORD *)&xmmword_256159BB8 + 1) = nullsub_758;
  qword_256159BD0 = (uint64_t)sub_234186D40;
  *(_QWORD *)&xmmword_256159BD8 = sub_234186E9C;
  return result;
}

int *sub_23416ECA0()
{
  sub_234195C74(&stru_256157FB0, (void (*)(void))sub_23416ECCC);
  return &dword_256159BF0;
}

double sub_23416ECCC()
{
  double result;

  xmmword_256159C00 = 0u;
  unk_256159C10 = 0u;
  xmmword_256159C20 = 0u;
  qword_256159C30 = 0;
  *(_QWORD *)&result = 471597088;
  dword_256159BF0 = 471597088;
  dword_256159BF4 = 1;
  qword_256159BF8 = (uint64_t)sub_234186CB0;
  *((_QWORD *)&xmmword_256159C00 + 1) = nullsub_758;
  qword_256159C18 = (uint64_t)sub_234186D40;
  *(_QWORD *)&xmmword_256159C20 = sub_234186E9C;
  return result;
}

int *sub_23416ED28()
{
  sub_234195C74(&stru_256157FC0, (void (*)(void))sub_23416ED54);
  return &dword_256159C38;
}

double sub_23416ED54()
{
  double result;

  xmmword_256159C48 = 0u;
  unk_256159C58 = 0u;
  xmmword_256159C68 = 0u;
  qword_256159C78 = 0;
  *(_QWORD *)&result = 269487120;
  dword_256159C38 = 269487120;
  dword_256159C3C = 1;
  qword_256159C40 = (uint64_t)sub_234186F2C;
  *((_QWORD *)&xmmword_256159C48 + 1) = nullsub_758;
  qword_256159C60 = (uint64_t)sub_234186F80;
  *(_QWORD *)&xmmword_256159C68 = sub_2341867BC;
  return result;
}

int *sub_23416EDB0()
{
  sub_234195C74(&stru_256157FD0, (void (*)(void))sub_23416EDDC);
  return &dword_256159C80;
}

double sub_23416EDDC()
{
  double result;

  xmmword_256159C90 = 0u;
  unk_256159CA0 = 0u;
  xmmword_256159CB0 = 0u;
  qword_256159CC0 = 0;
  *(_QWORD *)&result = 269487136;
  dword_256159C80 = 269487136;
  dword_256159C84 = 1;
  qword_256159C88 = (uint64_t)sub_234186F2C;
  *((_QWORD *)&xmmword_256159C90 + 1) = nullsub_758;
  qword_256159CA8 = (uint64_t)sub_234186F80;
  *(_QWORD *)&xmmword_256159CB0 = sub_2341867BC;
  return result;
}

int *sub_23416EE38()
{
  sub_234195C74(&stru_256157FE0, (void (*)(void))sub_23416EE64);
  return &dword_256159CC8;
}

double sub_23416EE64()
{
  double result;

  xmmword_256159CD8 = 0u;
  unk_256159CE8 = 0u;
  xmmword_256159CF8 = 0u;
  qword_256159D08 = 0;
  *(_QWORD *)&result = 269487120;
  dword_256159CC8 = 269487120;
  dword_256159CCC = 1;
  qword_256159CD0 = (uint64_t)sub_234187030;
  *((_QWORD *)&xmmword_256159CD8 + 1) = nullsub_758;
  qword_256159CF0 = (uint64_t)sub_23418708C;
  *(_QWORD *)&xmmword_256159CF8 = sub_2341867BC;
  return result;
}

int *sub_23416EEC0()
{
  sub_234195C74(&stru_256157FF0, (void (*)(void))sub_23416EEEC);
  return &dword_256159D10;
}

double sub_23416EEEC()
{
  double result;

  xmmword_256159D20 = 0u;
  unk_256159D30 = 0u;
  xmmword_256159D40 = 0u;
  qword_256159D50 = 0;
  *(_QWORD *)&result = 269487136;
  dword_256159D10 = 269487136;
  dword_256159D14 = 1;
  qword_256159D18 = (uint64_t)sub_234187030;
  *((_QWORD *)&xmmword_256159D20 + 1) = nullsub_758;
  qword_256159D38 = (uint64_t)sub_23418708C;
  *(_QWORD *)&xmmword_256159D40 = sub_2341867BC;
  return result;
}

__int128 *sub_23416EF48()
{
  sub_234195C74(&stru_256158000, (void (*)(void))sub_23416EF74);
  return &xmmword_256159D58;
}

double sub_23416EF74()
{
  double result;

  xmmword_256159D58 = 0u;
  *(_OWORD *)algn_256159D68 = 0u;
  xmmword_256159D78 = 0u;
  xmmword_256159D88 = 0u;
  qword_256159D98 = 0;
  *(_QWORD *)&result = 67374352;
  LODWORD(xmmword_256159D58) = 67374352;
  *((_QWORD *)&xmmword_256159D58 + 1) = sub_23418715C;
  qword_256159D70 = (uint64_t)nullsub_759;
  *((_QWORD *)&xmmword_256159D78 + 1) = sub_234187168;
  *(_QWORD *)&xmmword_256159D88 = sub_234187320;
  return result;
}

__int128 *sub_23416EFC8()
{
  sub_234195C74(&stru_256158010, (void (*)(void))sub_23416EFF4);
  return &xmmword_256159DA0;
}

double sub_23416EFF4()
{
  double result;

  xmmword_256159DA0 = 0u;
  unk_256159DB0 = 0u;
  xmmword_256159DC0 = 0u;
  xmmword_256159DD0 = 0u;
  qword_256159DE0 = 0;
  *(_QWORD *)&result = 134745360;
  LODWORD(xmmword_256159DA0) = 134745360;
  *((_QWORD *)&xmmword_256159DA0 + 1) = sub_234187ABC;
  qword_256159DB8 = (uint64_t)nullsub_759;
  *((_QWORD *)&xmmword_256159DC0 + 1) = sub_234187168;
  *(_QWORD *)&xmmword_256159DD0 = sub_234187320;
  return result;
}

__int128 *sub_23416F048()
{
  sub_234195C74(&stru_256158020, (void (*)(void))sub_23416F074);
  return &xmmword_256159DE8;
}

double sub_23416F074()
{
  double result;

  xmmword_256159DE8 = 0u;
  *(_OWORD *)algn_256159DF8 = 0u;
  xmmword_256159E08 = 0u;
  xmmword_256159E18 = 0u;
  qword_256159E28 = 0;
  *(_QWORD *)&result = 269487376;
  LODWORD(xmmword_256159DE8) = 269487376;
  *((_QWORD *)&xmmword_256159DE8 + 1) = sub_234187AC4;
  qword_256159E00 = (uint64_t)nullsub_759;
  *((_QWORD *)&xmmword_256159E08 + 1) = sub_234187168;
  *(_QWORD *)&xmmword_256159E18 = sub_234187320;
  return result;
}

BOOL sub_23416F0C8(_BYTE *a1, uint64_t a2, uint64_t a3, char *a4, size_t a5)
{
  __int128 *v10;
  _BOOL8 v11;
  uint64_t v13;
  _OWORD v14[13];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a3 == 32)
  {
    sub_234195C74(&stru_256157F00, (void (*)(void))sub_23416E878);
    v10 = &xmmword_256159930;
  }
  else
  {
    if (a3 != 16)
      return 0;
    sub_234195C74(&stru_256157E80, (void (*)(void))sub_23416E518);
    v10 = &xmmword_256159730;
  }
  memset(v14, 0, sizeof(v14));
  v11 = sub_23416F204((uint64_t)v14, a2, a3, (uint64_t)v10)
     && sub_23416F410((unsigned int *)v14, a4, a5)
     && sub_23416F534((unsigned int *)v14, a1, &v13) != 0;
  sub_23416F608((uint64_t)v14);
  return v11;
}

uint64_t sub_23416F204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  _BYTE v35[16];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a4 + 4);
  v5 = (_DWORD)v4 == 16 || (_DWORD)v4 == 8;
  if (!v5 || *(_DWORD *)(a4 + 8) != a3)
    return 0;
  result = sub_23416D918(a1, a4, a3, a2, &unk_2342E2278, 1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, _BYTE *, void *, uint64_t))(*(_QWORD *)a1 + 32))(a1, v35, &unk_2342E2278, v4);
    if ((_DWORD)result)
    {
      result = sub_23416D918(a1, 0, v8, 0, &unk_2342E2278, 1);
      if ((_DWORD)result)
      {
        v9 = a1 + 152;
        v10 = v35[0];
        if ((_DWORD)v4 == 16)
        {
          v11 = 0;
          v12 = v35[0];
          do
          {
            v13 = v35[v11 + 1];
            HIDWORD(v14) = v12;
            LODWORD(v14) = v13 << 24;
            *(_BYTE *)(v9 + v11) = v14 >> 31;
            v12 = v13;
            ++v11;
          }
          while (v11 != 15);
          v15 = 0;
          v16 = (v10 >> 7) & 0xFFFFFF87 ^ (2 * v35[15]);
          *(_BYTE *)(a1 + 167) = v16;
          v17 = *(char *)(a1 + 152);
          v18 = v17;
          do
          {
            v19 = a1 + v15;
            v20 = v15 + 1;
            v21 = *(unsigned __int8 *)(a1 + v15 + 153);
            HIDWORD(v22) = v18;
            LODWORD(v22) = v21 << 24;
            *(_BYTE *)(v19 + 168) = v22 >> 31;
            v18 = v21;
            v15 = v20;
          }
          while (v20 != 15);
          *(_BYTE *)(a1 + 183) = (v17 >> 7) & 0x87 ^ (2 * v16);
        }
        else
        {
          v23 = 0;
          v24 = v35[0];
          do
          {
            v25 = v35[v23 + 1];
            HIDWORD(v26) = v24;
            LODWORD(v26) = v25 << 24;
            *(_BYTE *)(v9 + v23) = v26 >> 31;
            v24 = v25;
            ++v23;
          }
          while (v23 != 7);
          v27 = 0;
          v28 = (v10 >> 7) & 0x1B ^ (2 * v35[7]);
          *(_BYTE *)(a1 + 159) = v28;
          v29 = *(char *)(a1 + 152);
          v30 = v29;
          do
          {
            v31 = a1 + v27;
            v32 = v27 + 1;
            v33 = *(unsigned __int8 *)(a1 + v27 + 153);
            HIDWORD(v34) = v30;
            LODWORD(v34) = v33 << 24;
            *(_BYTE *)(v31 + 168) = v34 >> 31;
            v30 = v33;
            v27 = v32;
          }
          while (v32 != 7);
          *(_BYTE *)(a1 + 175) = (v29 >> 7) & 0x1B ^ (2 * v28);
        }
        *(_DWORD *)(a1 + 200) = 0;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_23416F410(unsigned int *a1, char *__src, size_t __n)
{
  size_t v3;
  char *v4;
  size_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t result;
  _BYTE v10[16];
  uint64_t v11;

  v3 = __n;
  v4 = __src;
  v11 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(*(_QWORD *)a1 + 4);
  v7 = a1[50];
  if (!(_DWORD)v7)
  {
LABEL_12:
    while (v3 > v6)
    {
      result = (*(uint64_t (**)(unsigned int *, _BYTE *, char *, size_t))(*(_QWORD *)a1 + 32))(a1, v10, v4, v6);
      if (!(_DWORD)result)
        return result;
      v4 += v6;
      v3 -= v6;
    }
    if (v3)
      memcpy(a1 + 46, v4, v3);
    a1[50] = v3;
    return 1;
  }
  if (v6 - v7 >= __n)
    v8 = __n;
  else
    v8 = v6 - v7;
  if (v8)
  {
    memcpy((char *)a1 + v7 + 184, __src, v8);
    LODWORD(v7) = a1[50];
  }
  a1[50] = v7 + v8;
  v3 -= v8;
  if (!v3)
    return 1;
  result = (*(uint64_t (**)(unsigned int *, _BYTE *, unsigned int *, size_t))(*(_QWORD *)a1 + 32))(a1, v10, a1 + 46, v6);
  if ((_DWORD)result)
  {
    v4 += v8;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_23416F534(unsigned int *a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  char v14;
  char v15;

  v3 = *(unsigned int *)(*(_QWORD *)a1 + 4);
  *a3 = v3;
  if (!a2)
    return 1;
  v6 = a1[50];
  if ((_DWORD)v6 != (_DWORD)v3)
  {
    *((_BYTE *)a1 + v6 + 184) = 0x80;
    v9 = a1[50];
    if ((_DWORD)v3 != (_DWORD)v9 + 1)
      bzero((char *)a1 + v9 + 185, v3 - (v9 + 1));
    v7 = (char *)(a1 + 42);
    if (!(_DWORD)v3)
      return (*(uint64_t (**)(unsigned int *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a2, v3);
    goto LABEL_9;
  }
  v7 = (char *)(a1 + 38);
  if ((_DWORD)v3)
  {
LABEL_9:
    v10 = (char *)(a1 + 46);
    v11 = v3;
    v12 = a2;
    do
    {
      v14 = *v10++;
      v13 = v14;
      v15 = *v7++;
      *v12++ = v15 ^ v13;
      --v11;
    }
    while (v11);
  }
  return (*(uint64_t (**)(unsigned int *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a2, v3);
}

void sub_23416F608(uint64_t a1)
{
  sub_23416D754(a1);
  sub_23418E400((void *)(a1 + 152), 0x10uLL);
  sub_23418E400((void *)(a1 + 168), 0x10uLL);
  sub_23418E400((void *)(a1 + 184), 0x10uLL);
}

double sub_23416F648()
{
  _QWORD *v0;
  double result;

  v0 = sub_23418E2E4(0xD0uLL);
  if (v0)
  {
    v0[18] = 0;
    result = 0.0;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *(_OWORD *)v0 = 0u;
  }
  return result;
}

void sub_23416F680(_QWORD *a1)
{
  if (a1)
  {
    sub_23416F608((uint64_t)a1);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_23416F6AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23416D7DC(a1, (uint64_t *)a2);
  if ((_DWORD)result)
  {
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    return 1;
  }
  return result;
}

uint64_t sub_23416F6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 200) = 0;
  return sub_23416D918(a1, 0, a3, 0, &unk_2342E2278, 1);
}

uint64_t sub_23416F714(uint64_t *a1)
{
  uint64_t v2;
  __int16 v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = *a1;
  if (*(_DWORD *)(v2 + 16)
    || (v5 = *(unsigned int *)(v2 + 8), (int)v5 < 1)
    || (v6 = *(uint64_t **)v2, (**(_BYTE **)v2 & 1) == 0)
    || sub_2341621D4((uint64_t *)v2) > 0x2710)
  {
    v3 = 69;
LABEL_3:
    sub_2341579B4(5, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/dh/check.c", v3);
    return 0;
  }
  v7 = a1[2];
  if (v7 && (*(_DWORD *)(v7 + 16) || (int)sub_234162948(*(uint64_t **)v7, *(int *)(v7 + 8), v6, v5) > 0))
  {
    v3 = 75;
    goto LABEL_3;
  }
  v8 = a1[1];
  if (*(_DWORD *)(v8 + 16))
    goto LABEL_12;
  v9 = *(int *)(v8 + 8);
  if (!(_DWORD)v9)
    goto LABEL_12;
  v10 = 0;
  v11 = 0;
  v12 = *(uint64_t **)v8;
  do
    v11 |= v12[v10++];
  while (v9 != v10);
  if (!v11 || (sub_234162948(v12, v9, v6, (int)v5) & 0x80000000) == 0)
  {
LABEL_12:
    v3 = 82;
    goto LABEL_3;
  }
  return 1;
}

uint64_t sub_23416F818(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a3 = 0;
  if (!sub_23416F714(a1))
    return 0;
  v6 = sub_23418E2E4(0x30uLL);
  if (!v6)
    return 0;
  v7 = (uint64_t)v6;
  *(_OWORD *)((char *)v6 + 26) = 0u;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  sub_234162DC8(v6);
  sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
  if ((int)sub_234162A28(a2, (uint64_t)&qword_256159710) <= 0)
    *a3 |= 1u;
  v8 = sub_234162E68(v7);
  if (!v8)
    goto LABEL_16;
  v9 = (unsigned int *)v8;
  if (!sub_234162060((void **)v8, *a1) || !sub_234161AB0((uint64_t)v9, 1uLL))
    goto LABEL_16;
  if ((sub_234162A28(a2, (uint64_t)v9) & 0x80000000) == 0)
    *a3 |= 2u;
  v10 = a1[2];
  if (!v10)
    goto LABEL_14;
  if (!sub_2341652E0((uint64_t)v9, a2, v10, *a1, v7, 0))
  {
LABEL_16:
    v11 = 0;
    goto LABEL_17;
  }
  if (!sub_234162B4C(v9))
    *a3 |= 4u;
LABEL_14:
  v11 = 1;
LABEL_17:
  if (!*(_BYTE *)(v7 + 40))
  {
    v12 = *(_QWORD *)(v7 + 8);
    v13 = *(_QWORD *)(v7 + 16) - 1;
    *(_QWORD *)(v7 + 16) = v13;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v12 + 8 * v13);
  }
  sub_234162D80((unint64_t **)v7);
  return v11;
}

uint64_t sub_23416F970(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unsigned int *v7;
  unint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  int v35;
  int v36;

  *a2 = 0;
  if (!sub_23416F714((uint64_t *)a1))
    return 0;
  v4 = sub_23418E2E4(0x30uLL);
  if (!v4)
    return 0;
  v5 = (uint64_t)v4;
  *(_OWORD *)((char *)v4 + 26) = 0u;
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  sub_234162DC8(v4);
  v6 = sub_234162E68(v5);
  if (!v6)
    goto LABEL_45;
  v7 = (unsigned int *)v6;
  v8 = sub_234162E68(v5);
  if (!v8)
    goto LABEL_45;
  v9 = *(unsigned int **)(a1 + 8);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (sub_234162BA4(*(unsigned int **)(a1 + 8), 2))
    {
      v18 = *(unsigned int *)(*(_QWORD *)a1 + 8);
      if ((int)v18 >= 1)
      {
        v19 = v18 + 1;
        do
        {
          v20 = __umodti3();
          --v19;
        }
        while (v19 > 1);
        if (!(v20 ^ 0xB | v21))
          goto LABEL_34;
      }
    }
    else
    {
      if (!sub_234162BA4(v9, 5))
      {
        v16 = 4;
        goto LABEL_33;
      }
      v22 = *(unsigned int *)(*(_QWORD *)a1 + 8);
      if ((int)v22 >= 1)
      {
        v23 = v22 + 1;
        do
        {
          v24 = __umodti3();
          --v23;
        }
        while (v23 > 1);
        if ((v24 & 0xB) == 3)
          goto LABEL_34;
      }
    }
    v16 = 8;
    goto LABEL_33;
  }
  v10 = (unsigned int *)v8;
  sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
  if ((int)sub_234162A28((uint64_t)v9, (uint64_t)&qword_256159710) < 1)
    goto LABEL_8;
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  if ((sub_234162A28(v12, *(_QWORD *)a1) & 0x80000000) == 0)
    goto LABEL_8;
  if (!sub_2341652E0((uint64_t)v7, v12, *(_QWORD *)(a1 + 16), v11, v5, 0))
    goto LABEL_45;
  if (!sub_234162B4C(v7))
LABEL_8:
    *a2 |= 8u;
  v13 = *(_QWORD *)(a1 + 16);
  v34 = 0;
  v14 = sub_23416B34C(&v34, v13, 64, v5, 0, 0);
  v15 = v34;
  if (!v14)
    v15 = -1;
  if (v15 < 0)
    goto LABEL_45;
  if (!v15)
    *a2 |= 0x10u;
  if (!sub_234162F7C((unint64_t *)v7, (uint64_t)v10, *(_QWORD *)a1, *(_QWORD *)(a1 + 16), v5))
    goto LABEL_45;
  if (!sub_234162B4C(v10))
  {
    v16 = 32;
LABEL_33:
    *a2 |= v16;
  }
LABEL_34:
  v25 = *(_QWORD *)a1;
  v35 = 0;
  v26 = sub_23416B34C(&v35, v25, 64, v5, 0, 0);
  v27 = v35;
  if (!v26)
    v27 = -1;
  if ((v27 & 0x80000000) == 0)
  {
    if (!v27)
    {
      v30 = 1;
      goto LABEL_51;
    }
    if (*(_QWORD *)(a1 + 16))
    {
LABEL_52:
      v17 = 1;
      goto LABEL_46;
    }
    if (sub_234166C94((uint64_t)v7, *(uint64_t **)a1))
    {
      v36 = 0;
      v28 = sub_23416B34C(&v36, (uint64_t)v7, 64, v5, 0, 0);
      v29 = v36;
      if (!v28)
        v29 = -1;
      if ((v29 & 0x80000000) == 0)
      {
        if (!v29)
        {
          v30 = 2;
LABEL_51:
          *a2 |= v30;
          goto LABEL_52;
        }
        goto LABEL_52;
      }
    }
  }
LABEL_45:
  v17 = 0;
LABEL_46:
  if (!*(_BYTE *)(v5 + 40))
  {
    v31 = *(_QWORD *)(v5 + 8);
    v32 = *(_QWORD *)(v5 + 16) - 1;
    *(_QWORD *)(v5 + 16) = v32;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(v31 + 8 * v32);
  }
  sub_234162D80((unint64_t **)v5);
  return v17;
}

_QWORD *sub_23416FCA4()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_23418E344(0x108uLL);
  v1 = v0;
  if (v0)
  {
    sub_234195BFC((pthread_rwlock_t *)(v0 + 6));
    *((_DWORD *)v1 + 65) = 1;
  }
  return v1;
}

void sub_23416FCE0(uint64_t a1)
{
  if (a1)
  {
    if (sub_234193960((unsigned int *)(a1 + 260)))
    {
      sub_2341659A4(*(_QWORD ***)(a1 + 248));
      sub_234161FC4(*(_QWORD ***)a1);
      sub_234161FC4(*(_QWORD ***)(a1 + 8));
      sub_234161FC4(*(_QWORD ***)(a1 + 16));
      sub_234161FC4(*(_QWORD ***)(a1 + 24));
      sub_234161FC4(*(_QWORD ***)(a1 + 32));
      j__pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 48));
      sub_23418E3C4((_QWORD *)a1);
    }
  }
}

uint64_t sub_23416FD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 24));
    *(_QWORD *)(a1 + 24) = a2;
  }
  if (a3)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 32));
    *(_QWORD *)(a1 + 32) = a3;
  }
  return 1;
}

_QWORD *sub_23416FDA4(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  if (a2)
    *a2 = *result;
  if (a3)
    *a3 = result[2];
  if (a4)
    *a4 = result[1];
  return result;
}

uint64_t sub_23416FDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;

  v5 = *(_QWORD *)a1;
  if (!(a2 | v5) || !(a4 | *(_QWORD *)(a1 + 8)))
    return 0;
  if (a2)
  {
    sub_234161FC4((_QWORD **)v5);
    *(_QWORD *)a1 = a2;
  }
  if (a3)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = a3;
  }
  if (a4)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) = a4;
  }
  sub_2341659A4(*(_QWORD ***)(a1 + 248));
  *(_QWORD *)(a1 + 248) = 0;
  return 1;
}

uint64_t sub_23416FE58(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 40) = a2;
  return 1;
}

uint64_t sub_23416FE64(uint64_t a1)
{
  _OWORD *v2;
  unint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;

  if (!sub_23416F714((uint64_t *)a1))
    return 0;
  v2 = sub_23418E2E4(0x30uLL);
  v3 = (unint64_t **)v2;
  if (!v2)
  {
    v6 = 0;
    v5 = 0;
LABEL_14:
    v7 = 0;
    goto LABEL_15;
  }
  *(_OWORD *)((char *)v2 + 26) = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  v4 = *(_QWORD **)(a1 + 32);
  v5 = v4;
  if (!v4)
  {
    v5 = sub_234161F88();
    if (!v5)
    {
      v6 = 0;
      goto LABEL_14;
    }
  }
  v6 = *(_QWORD **)(a1 + 24);
  if (!v6)
  {
    v6 = sub_234161F88();
    if (!v6)
      goto LABEL_14;
  }
  if (!sub_234169A50((_QWORD *)(a1 + 248), (pthread_rwlock_t *)(a1 + 48), *(_QWORD *)a1, (uint64_t)v3))
    goto LABEL_14;
  if (v4)
  {
    v7 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v7 = 0;
      if (!sub_234167838((uint64_t)v5, 1uLL, v10))
        goto LABEL_15;
    }
    else
    {
      v7 = sub_234161F88();
      if (!v7)
        goto LABEL_15;
      v11 = *(_DWORD *)(a1 + 40);
      v12 = *(uint64_t **)a1;
      if (v11 && v11 < sub_2341621D4(*(uint64_t **)a1) - 1)
      {
        if (!sub_2341698DC((uint64_t)v7, v11))
          goto LABEL_15;
      }
      else if (!sub_234166C94((uint64_t)v7, v12))
      {
        goto LABEL_15;
      }
      if (!sub_234167838((uint64_t)v5, 1uLL, (uint64_t)v7))
        goto LABEL_15;
    }
  }
  if (!sub_234166004((uint64_t)v6, *(_QWORD *)(a1 + 8), (uint64_t)v5, *(_QWORD *)a1, (uint64_t)v3, *(_QWORD *)(a1 + 248)))
  {
LABEL_15:
    sub_2341579B4(5, 0, 3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/dh/dh.c", 282);
    if (!*(_QWORD *)(a1 + 24))
      sub_234161FC4((_QWORD **)v6);
    v8 = 0;
    goto LABEL_18;
  }
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  v8 = 1;
LABEL_18:
  if (!*(_QWORD *)(a1 + 32))
    sub_234161FC4((_QWORD **)v5);
  sub_234161FC4((_QWORD **)v7);
  sub_234162D80(v3);
  return v8;
}

uint64_t sub_234170028(char *a1, uint64_t a2, uint64_t **a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_23418E2E4(0x30uLL);
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = (uint64_t)v6;
  *(_OWORD *)((char *)v6 + 26) = 0u;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  sub_234162DC8(v6);
  v8 = sub_2341621D4(*a3);
  v9 = sub_234162E68(v7);
  if (v9 && (v10 = (uint64_t)v9, sub_234170128((uint64_t)a3, (uint64_t)v9, a2, v7)))
  {
    if (sub_234162840(a1, (v8 + 7) >> 3, v10))
      v11 = (v8 + 7) >> 3;
    else
      v11 = 0xFFFFFFFFLL;
  }
  else
  {
    v11 = 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(v7 + 40))
  {
    v12 = *(_QWORD *)(v7 + 8);
    v13 = *(_QWORD *)(v7 + 16) - 1;
    *(_QWORD *)(v7 + 16) = v13;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v12 + 8 * v13);
  }
  sub_234162D80((unint64_t **)v7);
  return v11;
}

uint64_t sub_234170108(uint64_t **a1)
{
  return (sub_2341621D4(*a1) + 7) >> 3;
}

uint64_t sub_234170128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  void **v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  uint64_t v18;

  result = sub_23416F714((uint64_t *)a1);
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v16 = 0;
      if (sub_23416F818((uint64_t *)a1, a3, &v16) && !v16)
      {
        sub_234162DC8((_QWORD *)a4);
        result = (uint64_t)sub_234162E68(a4);
        if (!result)
          goto LABEL_18;
        v9 = (void **)result;
        result = sub_234169A50((_QWORD *)(a1 + 248), (pthread_rwlock_t *)(a1 + 48), *(_QWORD *)a1, a4);
        if (!(_DWORD)result)
          goto LABEL_18;
        if (sub_234166004(a2, a3, *(_QWORD *)(a1 + 32), *(_QWORD *)a1, a4, *(_QWORD *)(a1 + 248))
          && sub_234162060(v9, *(_QWORD *)a1)
          && sub_234161AB0((uint64_t)v9, 1uLL))
        {
          v18 = 1;
          v17[2] = 0x200000000;
          v17[0] = &v18;
          v17[1] = 0x100000001;
          if ((int)sub_234162A28(a2, (uint64_t)v17) >= 1 && sub_234162A28(a2, (uint64_t)v9))
          {
            result = 1;
            goto LABEL_18;
          }
          v12 = 101;
          v13 = 334;
        }
        else
        {
          v12 = 3;
          v13 = 327;
        }
        sub_2341579B4(5, 0, v12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/dh/dh.c", v13);
        result = 0;
LABEL_18:
        if (!*(_BYTE *)(a4 + 40))
        {
          v14 = *(_QWORD *)(a4 + 8);
          v15 = *(_QWORD *)(a4 + 16) - 1;
          *(_QWORD *)(a4 + 16) = v15;
          *(_QWORD *)(a4 + 32) = *(_QWORD *)(v14 + 8 * v15);
        }
        return result;
      }
      v10 = 101;
      v11 = 309;
    }
    else
    {
      v10 = 103;
      v11 = 303;
    }
    sub_2341579B4(5, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/dh/dh.c", v11);
    return 0;
  }
  return result;
}

uint64_t sub_2341702F0(char *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23418E2E4(0x30uLL);
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = (uint64_t)v6;
  *(_OWORD *)((char *)v6 + 26) = 0u;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  sub_234162DC8(v6);
  v8 = sub_234162E68(v7);
  if (v8 && (v9 = v8, sub_234170128(a3, (uint64_t)v8, a2, v7)))
  {
    v10 = (sub_2341621D4((uint64_t *)v9) + 7) >> 3;
    sub_234162720(a1, v10, (char *)*v9, *((int *)v9 + 2));
  }
  else
  {
    v10 = 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(v7 + 40))
  {
    v11 = *(_QWORD *)(v7 + 8);
    v12 = *(_QWORD *)(v7 + 16) - 1;
    *(_QWORD *)(v7 + 16) = v12;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v11 + 8 * v12);
  }
  sub_234162D80((unint64_t **)v7);
  return v10;
}

uint64_t sub_2341703C8(uint64_t **a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  int v18;

  *a3 = -1;
  v6 = *(unsigned int *)(a6 + 4);
  if (v6 > a4)
    return 0;
  v13 = (sub_2341621D4(*a1) + 7) >> 3;
  v14 = (char *)sub_23418E2E4(v13);
  v15 = v14;
  v18 = 0;
  if (v14
    && sub_234170028(v14, a5, a1) == (_DWORD)v13
    && (sub_2341704B4((uint64_t)v15, v13, a2, &v18, a6) ? (v16 = (_DWORD)v6 == v18) : (v16 = 0), v16))
  {
    *a3 = v6;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  sub_23418E3C4(v15);
  return v7;
}

uint64_t sub_2341704B4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v9;
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  v9 = sub_2341708C0((uint64_t)v11, a5);
  if ((_DWORD)v9)
  {
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)&v11[0] + 24))(v11, a1, a2);
    sub_23417094C((void **)v11, a3, a4);
  }
  sub_234170680((uint64_t)v11);
  return v9;
}

uint64_t sub_234170544(uint64_t a1)
{
  sub_234193914((unsigned int *)(a1 + 260));
  return 1;
}

uint64_t sub_234170560()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v0 = sub_234161F88();
  v1 = sub_234161F88();
  v2 = sub_234161F88();
  v3 = sub_23416FCA4();
  v4 = (uint64_t)v3;
  if (!v0
    || !v1
    || !v2
    || !v3
    || (sub_234162308((uint64_t)v0, (uint64_t)&unk_2342E2288, 32), !sub_234166C94((uint64_t)v1, v0))
    || !sub_23416171C((_QWORD **)v2, 1uLL)
    || (*((_DWORD *)v2 + 4) = 0,
        *(_QWORD *)*v2 = 2,
        *((_DWORD *)v2 + 2) = 1,
        !sub_23416FDCC(v4, (uint64_t)v0, (uint64_t)v1, (uint64_t)v2)))
  {
    sub_234161FC4((_QWORD **)v0);
    sub_234161FC4((_QWORD **)v1);
    sub_234161FC4((_QWORD **)v2);
    sub_23416FCE0(v4);
    return 0;
  }
  return v4;
}

uint64_t sub_234170644(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

double sub_23417064C(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_234170658()
{
  _OWORD *v0;
  double result;

  v0 = sub_23418E2E4(0x20uLL);
  if (v0)
  {
    result = 0.0;
    *v0 = 0u;
    v0[1] = 0u;
  }
  return result;
}

uint64_t sub_234170680(uint64_t a1)
{
  void (**v2)(_QWORD);

  sub_23418E3C4(*(_QWORD **)(a1 + 8));
  v2 = *(void (***)(_QWORD))(a1 + 24);
  if (v2)
    (*v2)(*(_QWORD *)(a1 + 16));
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return 1;
}

uint64_t sub_2341706C4(void **a1)
{
  sub_23418E400(a1[1], *((unsigned int *)*a1 + 11));
  return sub_234170680((uint64_t)a1);
}

void sub_2341706F4(_QWORD *a1)
{
  if (a1)
  {
    sub_234170680((uint64_t)a1);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_234170720()
{
  sub_2341579B4(29, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/digest/digest.c", 126);
  return 0;
}

uint64_t sub_234170750(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  size_t v9;

  if (!a2)
    goto LABEL_11;
  if (!a2[2])
  {
    v6 = *a2;
    if (*a2)
    {
      v5 = 0;
LABEL_8:
      if (*a1 == v6)
      {
        v7 = (void *)a1[1];
        a1[1] = 0;
        goto LABEL_14;
      }
      v8 = sub_23418E2E4(*(unsigned int *)(v6 + 44));
      if (v8)
      {
        v7 = v8;
        goto LABEL_14;
      }
      if (v5)
        (*(void (**)(uint64_t))a2[3])(v5);
      return 0;
    }
LABEL_11:
    sub_2341579B4(29, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/digest/digest.c", 138);
    return 0;
  }
  result = (*(uint64_t (**)(void))(a2[3] + 8))();
  if (!result)
    return result;
  v5 = result;
  v6 = *a2;
  if (*a2)
    goto LABEL_8;
  v7 = 0;
LABEL_14:
  sub_234170680((uint64_t)a1);
  *a1 = *a2;
  a1[1] = v7;
  if (*a2)
  {
    v9 = *(unsigned int *)(*a2 + 44);
    if ((_DWORD)v9)
      memcpy(v7, (const void *)a2[1], v9);
  }
  a1[2] = v5;
  a1[3] = a2[3];
  return 1;
}

double sub_234170854(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  double result;

  sub_234170680((uint64_t)a1);
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t sub_234170888(_QWORD *a1, uint64_t *a2)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return sub_234170750(a1, a2);
}

uint64_t sub_234170894(_OWORD *a1)
{
  sub_234170680((uint64_t)a1);
  *a1 = 0u;
  a1[1] = 0u;
  return 1;
}

uint64_t sub_2341708C0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  if (*(_QWORD *)a1 != a2)
  {
    result = (uint64_t)sub_23418E2E4(*(unsigned int *)(a2 + 44));
    if (!result)
      return result;
    v5 = result;
    sub_23418E3C4(*(_QWORD **)(a1 + 8));
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = v5;
  }
  (*(void (**)(uint64_t))(a2 + 16))(a1);
  return 1;
}

uint64_t sub_234170920(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return sub_2341708C0(a1, a2);
}

uint64_t sub_23417092C(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return 1;
}

uint64_t sub_23417094C(void **a1, uint64_t a2, _DWORD *a3)
{
  (*((void (**)(void **))*a1 + 4))(a1);
  if (a3)
    *a3 = *((_DWORD *)*a1 + 1);
  sub_23418E400(a1[1], *((unsigned int *)*a1 + 11));
  return 1;
}

uint64_t sub_234170998(void **a1, uint64_t a2, _DWORD *a3)
{
  sub_23417094C(a1, a2, a3);
  sub_234170680((uint64_t)a1);
  return 1;
}

uint64_t sub_2341709C4(uint64_t result)
{
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_2341709D0(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 40);
}

uint64_t *sub_2341709DC()
{
  sub_234195C74(&stru_256158030, (void (*)(void))sub_234170A08);
  return &qword_256159E30;
}

double sub_234170A08()
{
  double result;

  qword_256159E30 = 0x1000000101;
  dword_256159E38 = 0;
  qword_256159E40 = (uint64_t)sub_234187ACC;
  unk_256159E48 = sub_234187AF0;
  qword_256159E50 = (uint64_t)sub_234187B18;
  *(_QWORD *)&result = 0x5C00000040;
  qword_256159E58 = 0x5C00000040;
  return result;
}

uint64_t *sub_234170A50()
{
  sub_234195C74(&stru_256158040, (void (*)(void))sub_234170A7C);
  return &qword_256159E60;
}

double sub_234170A7C()
{
  double result;

  qword_256159E60 = 0x1000000004;
  dword_256159E68 = 0;
  qword_256159E70 = (uint64_t)sub_234187B28;
  unk_256159E78 = sub_234187B4C;
  qword_256159E80 = (uint64_t)sub_234187B74;
  *(_QWORD *)&result = 0x5C00000040;
  qword_256159E88 = 0x5C00000040;
  return result;
}

uint64_t *sub_234170AC4()
{
  sub_234195C74(&stru_256158050, (void (*)(void))sub_234170AF0);
  return &qword_256159E90;
}

double sub_234170AF0()
{
  double result;

  qword_256159E90 = 0x1400000040;
  dword_256159E98 = 0;
  qword_256159EA0 = (uint64_t)sub_234187B84;
  unk_256159EA8 = sub_234187BB0;
  qword_256159EB0 = (uint64_t)sub_234187BD8;
  *(_QWORD *)&result = 0x6000000040;
  qword_256159EB8 = 0x6000000040;
  return result;
}

uint64_t *sub_234170B38()
{
  sub_234195C74(&stru_256158060, (void (*)(void))sub_234170B64);
  return &qword_256159EC0;
}

double sub_234170B64()
{
  double result;

  qword_256159EC0 = 0x1C000002A3;
  dword_256159EC8 = 0;
  qword_256159ED0 = (uint64_t)sub_234187BE8;
  unk_256159ED8 = sub_234187C1C;
  qword_256159EE0 = (uint64_t)sub_234187C44;
  *(_QWORD *)&result = 0x7000000040;
  qword_256159EE8 = 0x7000000040;
  return result;
}

uint64_t *sub_234170BAC()
{
  sub_234195C74(&stru_256158070, (void (*)(void))sub_234170BD8);
  return &qword_256159EF0;
}

double sub_234170BD8()
{
  double result;

  qword_256159EF0 = 0x20000002A0;
  dword_256159EF8 = 0;
  qword_256159F00 = (uint64_t)sub_234187C54;
  unk_256159F08 = sub_234187C88;
  qword_256159F10 = (uint64_t)sub_234187CB0;
  *(_QWORD *)&result = 0x7000000040;
  qword_256159F18 = 0x7000000040;
  return result;
}

uint64_t *sub_234170C20()
{
  sub_234195C74(&stru_256158080, (void (*)(void))sub_234170C4C);
  return &qword_256159F20;
}

double sub_234170C4C()
{
  double result;

  qword_256159F20 = 0x30000002A1;
  dword_256159F28 = 0;
  qword_256159F30 = (uint64_t)sub_234187CC4;
  unk_256159F38 = sub_234187D04;
  qword_256159F40 = (uint64_t)sub_234187D0C;
  *(_QWORD *)&result = 0xD800000080;
  qword_256159F48 = 0xD800000080;
  return result;
}

uint64_t *sub_234170C94()
{
  sub_234195C74(&stru_256158090, (void (*)(void))sub_234170CC0);
  return &qword_256159F50;
}

double sub_234170CC0()
{
  double result;

  qword_256159F50 = 0x40000002A2;
  dword_256159F58 = 0;
  qword_256159F60 = (uint64_t)sub_234187D1C;
  unk_256159F68 = sub_234187D5C;
  qword_256159F70 = (uint64_t)sub_234187D64;
  *(_QWORD *)&result = 0xD800000080;
  qword_256159F78 = 0xD800000080;
  return result;
}

uint64_t *sub_234170D08()
{
  sub_234195C74(&stru_2561580A0, (void (*)(void))sub_234170D34);
  return &qword_256159F80;
}

double sub_234170D34()
{
  double result;

  qword_256159F80 = 0x20000003C2;
  dword_256159F88 = 0;
  qword_256159F90 = (uint64_t)sub_234187D78;
  unk_256159F98 = sub_234187DB8;
  qword_256159FA0 = (uint64_t)sub_234187DC0;
  *(_QWORD *)&result = 0xD800000080;
  qword_256159FA8 = 0xD800000080;
  return result;
}

uint64_t *sub_234170D7C()
{
  sub_234195C74(&stru_2561580B0, (void (*)(void))sub_234170DA8);
  return &qword_256159FB0;
}

double sub_234170DA8()
{
  double result;

  qword_256159FB0 = 0x2400000072;
  dword_256159FB8 = 0;
  qword_256159FC0 = (uint64_t)sub_234187DD0;
  unk_256159FC8 = sub_234187E18;
  qword_256159FD0 = (uint64_t)sub_234187E90;
  *(_QWORD *)&result = 0xBC00000040;
  qword_256159FD8 = 0xBC00000040;
  return result;
}

uint64_t sub_234170DF0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_234170DF8(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_234170DF8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    result = (uint64_t)sub_234159464(a5, a4);
    *(_QWORD *)(a1 + 16) = result;
    if (!result)
      return result;
  }
  sub_234195C74(&stru_2561580C0, sub_234187EC4);
  *(_QWORD *)(a1 + 24) = &qword_256159FE0;
  v11 = *(uint64_t **)(a1 + 16);
  if (a6 == 1)
  {
    result = sub_2341598DC(v11);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    result = sub_23415980C(v11);
    if (!(_DWORD)result)
      return result;
  }
  if (!a3)
  {
    v13 = 56;
    if (!a6)
      v13 = 40;
    if (*(_QWORD *)(**(_QWORD **)(a1 + 16) + v13))
    {
      sub_2341579B4(6, 0, 119, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/digestsign/digestsign.c", 109);
      return 0;
    }
    goto LABEL_18;
  }
  result = sub_2341587EC(*(uint64_t **)(a1 + 16));
  if ((_DWORD)result)
  {
    v12 = 56;
    if (!a6)
      v12 = 40;
    if (!*(_QWORD *)(**(_QWORD **)(a1 + 16) + v12) || (result = sub_2341708C0(a1, a3), (_DWORD)result))
    {
LABEL_18:
      if (a2)
        *a2 = *(_QWORD *)(a1 + 16);
      return 1;
    }
  }
  return result;
}

uint64_t sub_234170F20(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_234170DF8(a1, a2, a3, a4, a5, 1);
}

uint64_t sub_234170F28(_QWORD **a1)
{
  if (*(_QWORD *)(*a1[2] + 40))
  {
    ((void (*)(_QWORD **))(*a1)[3])(a1);
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/digestsign/digestsign.c", 135);
    return 0;
  }
}

uint64_t sub_234170F7C(_QWORD **a1)
{
  if (*(_QWORD *)(*a1[2] + 56))
  {
    ((void (*)(_QWORD **))(*a1)[3])(a1);
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/digestsign/digestsign.c", 144);
    return 0;
  }
}

uint64_t sub_234170FD0(uint64_t *a1, uint64_t a2)
{
  _DWORD *v3;
  _BOOL8 v4;
  _OWORD v6[2];
  _BYTE v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = (_DWORD *)a1[2];
  if (*(_QWORD *)(*(_QWORD *)v3 + 40))
  {
    if (!a2)
      return sub_234159868(v3);
    memset(v6, 0, sizeof(v6));
    if (sub_234170750(v6, a1))
    {
      (*(void (**)(_OWORD *, _BYTE *))(*(_QWORD *)&v6[0] + 32))(v6, v7);
      sub_23418E400(*((void **)&v6[0] + 1), *(unsigned int *)(*(_QWORD *)&v6[0] + 44));
      v4 = sub_234159868((_DWORD *)a1[2]) != 0;
    }
    else
    {
      v4 = 0;
    }
    sub_234170680((uint64_t)v6);
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/digestsign/digestsign.c", 154);
    return 0;
  }
  return v4;
}

BOOL sub_234171118(uint64_t a1)
{
  _BOOL8 v2;
  _OWORD v4[2];
  _BYTE v5[64];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(**(_QWORD **)(a1 + 16) + 56))
  {
    memset(v4, 0, sizeof(v4));
    if (sub_234170750(v4, (uint64_t *)a1))
    {
      (*(void (**)(_OWORD *, _BYTE *))(*(_QWORD *)&v4[0] + 32))(v4, v5);
      sub_23418E400(*((void **)&v4[0] + 1), *(unsigned int *)(*(_QWORD *)&v4[0] + 44));
      v2 = sub_234159938(*(_DWORD **)(a1 + 16)) != 0;
    }
    else
    {
      v2 = 0;
    }
    sub_234170680((uint64_t)v4);
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/digestsign/digestsign.c", 186);
    return 0;
  }
  return v2;
}

uint64_t sub_23417121C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v6)(void);

  v4 = a1[2];
  if (*(_QWORD *)(*(_QWORD *)v4 + 40))
  {
    if (!a2 || sub_234170F28((_QWORD **)a1))
      return sub_234170FD0(a1, a2);
  }
  else
  {
    v6 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 48);
    if (v6)
      return v6();
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/digestsign/digestsign.c", 228);
  }
  return 0;
}

uint64_t sub_2341712CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v4)(void);

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(*(_QWORD *)v2 + 56))
  {
    if (sub_234170F7C((_QWORD **)a1))
      return sub_234171118(a1);
  }
  else
  {
    v4 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 64);
    if (v4)
      return v4();
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/digestsign/digestsign.c", 255);
  }
  return 0;
}

uint64_t sub_234171378(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v8;
  int v9;
  int v10;
  __int16 v11;
  __int128 v12;
  size_t __n;
  _OWORD v15[13];
  uint64_t v16;
  _WORD __src[37];

  *(_QWORD *)&__src[33] = *MEMORY[0x24BDAC8D0];
  v4 = a4[2];
  if (!v4)
  {
    v9 = 27;
    v10 = 101;
    v11 = 87;
    goto LABEL_10;
  }
  v8 = (uint64_t *)*a4;
  if (sub_23417154C(*a4, *a3))
  {
    v9 = 15;
    v10 = 106;
    v11 = 93;
LABEL_10:
    sub_2341579B4(v9, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ecdh/ecdh.c", v11);
    return 0;
  }
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  __n = 0;
  if (!sub_234171624((uint64_t)v8, (uint64_t)v15, (uint64_t)(a3 + 1), v4 + 24)
    || !sub_2341716AC(v8, (uint64_t)__src, &__n, 0x42uLL, (uint64_t)v15))
  {
    v9 = 27;
    v10 = 102;
    v11 = 103;
    goto LABEL_10;
  }
  *((_QWORD *)&v12 + 1) = a2;
  *(_QWORD *)&v12 = a2 - 28;
  switch((unint64_t)(v12 >> 2))
  {
    case 0uLL:
      sub_234171780((char *)__src, __n, a1);
      break;
    case 1uLL:
      sub_234171848((char *)__src, __n, a1);
      break;
    case 5uLL:
      sub_234171910((unint64_t *)__src, __n, a1);
      break;
    case 9uLL:
      sub_2341719DC((unint64_t *)__src, __n, a1);
      break;
    default:
      v9 = 27;
      v10 = 103;
      v11 = 122;
      goto LABEL_10;
  }
  return 1;
}

uint64_t sub_23417154C(uint64_t a1, uint64_t a2)
{
  int v4;

  if (a1 == a2)
    return 0;
  v4 = *(_DWORD *)(a1 + 512);
  if (v4 != *(_DWORD *)(a2 + 512))
    return 1;
  if (v4)
    return 0;
  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || !*(_DWORD *)(a1 + 532)
    || !*(_DWORD *)(a2 + 532)
    || sub_234162A28(a1 + 256, a2 + 256)
    || sub_234162A28(a1 + 320, a2 + 320)
    || sub_23418E484((char *)(a1 + 360), (char *)(a2 + 360), 8 * *(int *)(a1 + 328))
    || sub_23418E484((char *)(a1 + 432), (char *)(a2 + 432), 8 * *(int *)(a1 + 328)))
  {
    return 1;
  }
  else
  {
    return sub_234173360(a1, a1 + 16, a2 + 16) ^ 1;
  }
}

uint64_t sub_234171624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  __int16 v8;

  if (a3 && a4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    if (sub_234173B7C(a1, a2))
      return 1;
    v7 = 68;
    v8 = 846;
  }
  else
  {
    v7 = 67;
    v8 = 837;
  }
  sub_2341579B4(15, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", v8);
  return 0;
}

uint64_t sub_2341716AC(uint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t result;
  _OWORD v12[4];
  uint64_t v13;

  v10 = (sub_2341621D4(a1 + 40) + 7) >> 3;
  if (v10 <= a4)
  {
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    result = (*(uint64_t (**)(uint64_t *, uint64_t, _OWORD *, _QWORD))*a1)(a1, a5, v12, 0);
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t *, uint64_t, unint64_t *, _OWORD *))(*a1 + 104))(a1, a2, a3, v12);
      *a3 = v10;
      return 1;
    }
  }
  else
  {
    sub_2341579B4(15, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 996);
    return 0;
  }
  return result;
}

_DWORD *sub_234171780(char *__src, size_t __n, _DWORD *a3)
{
  _OWORD v5[2];
  _BYTE v6[76];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, sizeof(v6));
  v5[0] = xmmword_2342E1FB0;
  v5[1] = xmmword_2342E1FC0;
  v7 = 28;
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_234182B2C, (uint64_t)v5, &v6[8], &v6[72], &v6[4], v6, __src, __n);
  sub_234183748(a3, 0x1CuLL, (uint64_t)v5);
  sub_23418E400(v5, 0x70uLL);
  return a3;
}

_DWORD *sub_234171848(char *__src, size_t __n, _DWORD *a3)
{
  _OWORD v5[2];
  _BYTE v6[76];
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, sizeof(v6));
  v5[0] = xmmword_2342E1FD0;
  v5[1] = xmmword_2342E1FE0;
  v7 = 32;
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_234182B2C, (uint64_t)v5, &v6[8], &v6[72], &v6[4], v6, __src, __n);
  sub_234183748(a3, v7, (uint64_t)v5);
  sub_23418E400(v5, 0x70uLL);
  return a3;
}

_QWORD *sub_234171910(unint64_t *__src, size_t __n, _QWORD *a3)
{
  int8x16_t v5[4];
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5[0] = (int8x16_t)xmmword_2342E1FF0;
  v5[1] = (int8x16_t)xmmword_2342E2000;
  v5[2] = (int8x16_t)xmmword_2342E2010;
  v5[3] = (int8x16_t)xmmword_2342E2020;
  v6 = 0;
  v7 = 0;
  v16 = 0x3000000000;
  sub_2341725B4((unint64_t)v5, __src, __n);
  sub_2341839C0(a3, 0x30uLL, v5);
  sub_23418E400(v5, 0xD8uLL);
  return a3;
}

_QWORD *sub_2341719DC(unint64_t *__src, size_t __n, _QWORD *a3)
{
  int8x16_t v5[4];
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5[0] = (int8x16_t)xmmword_2342E2030;
  v5[1] = (int8x16_t)xmmword_2342E2040;
  v5[2] = (int8x16_t)xmmword_2342E2050;
  v5[3] = (int8x16_t)xmmword_2342E2060;
  v6 = 0;
  v7 = 0;
  v16 = 0x4000000000;
  sub_2341725B4((unint64_t)v5, __src, __n);
  sub_2341839C0(a3, HIDWORD(v16), v5);
  sub_23418E400(v5, 0xD8uLL);
  return a3;
}

_QWORD *sub_234171AA8()
{
  _QWORD *v0;
  _QWORD *v1;
  BOOL v2;

  v0 = sub_23418E2E4(0x10uLL);
  if (v0)
  {
    *v0 = sub_234161F88();
    v1 = sub_234161F88();
    v0[1] = v1;
    if (*v0)
      v2 = v1 == 0;
    else
      v2 = 1;
    if (v2)
    {
      sub_2341540D8(v0);
      return 0;
    }
  }
  return v0;
}

uint64_t sub_234171B00(unsigned __int8 *a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  int *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(int *, _OWORD *, _OWORD *, uint64_t, _OWORD *);
  int v22;
  __int16 v23;
  _OWORD v25[13];
  uint64_t v26;
  _OWORD v27[4];
  uint64_t v28;
  _OWORD v29[4];
  uint64_t v30;
  _OWORD v31[4];
  uint64_t v32;
  _OWORD v33[4];
  uint64_t v34;
  _OWORD v35[4];
  uint64_t v36;
  _OWORD __dst[4];
  uint64_t v38;

  if (!a3 || ((v4 = *(int **)a4, v5 = *(_QWORD *)(a4 + 8), *(_QWORD *)a4) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v22 = 101;
    v23 = 156;
  }
  else
  {
    v38 = 0;
    memset(__dst, 0, sizeof(__dst));
    v36 = 0;
    memset(v35, 0, sizeof(v35));
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    v8 = *a3;
    v9 = *(int *)(v8 + 8);
    if (!(_DWORD)v9)
      goto LABEL_20;
    v12 = 0;
    v13 = *(uint64_t **)v8;
    do
    {
      v14 = *v13++;
      v12 |= v14;
      --v9;
    }
    while (v9);
    if (!v12)
      goto LABEL_20;
    if (!sub_234171D90((uint64_t)v4, __dst, v8))
      goto LABEL_20;
    v15 = a3[1];
    v16 = *(int *)(v15 + 8);
    if (!(_DWORD)v16)
      goto LABEL_20;
    v17 = 0;
    v18 = *(uint64_t **)v15;
    do
    {
      v19 = *v18++;
      v17 |= v19;
      --v16;
    }
    while (v16);
    if (v17 && sub_234171D90((uint64_t)v4, v35, v15))
    {
      if ((*(unsigned int (**)(int *, _OWORD *, _OWORD *))(*(_QWORD *)v4 + 144))(v4, v29, v35))
      {
        sub_234171E10((uint64_t)v4, (unint64_t *)v27, a1, a2);
        sub_234165E1C((unint64_t *)v33, (unint64_t *)v27, (unint64_t *)v29, v4[66], (uint64_t)(v4 + 58));
        sub_234165E1C((unint64_t *)v31, (unint64_t *)__dst, (unint64_t *)v29, v4[66], (uint64_t)(v4 + 58));
        v26 = 0;
        memset(v25, 0, sizeof(v25));
        v20 = v5 + 8;
        v21 = *(void (**)(int *, _OWORD *, _OWORD *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 56);
        if (v21)
        {
          v21(v4, v25, v33, v20, v31);
        }
        else if (!(*(unsigned int (**)(int *, _OWORD *, _OWORD *, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v4 + 64))(v4, v25, v33, v20, v31, 1))
        {
          v22 = 15;
          v23 = 186;
          goto LABEL_21;
        }
        if ((*(unsigned int (**)(int *, _OWORD *, _OWORD *))(*(_QWORD *)v4 + 152))(v4, v25, __dst))
          return 1;
        v22 = 100;
        v23 = 191;
      }
      else
      {
        v22 = 68;
        v23 = 171;
      }
    }
    else
    {
LABEL_20:
      v22 = 100;
      v23 = 165;
    }
  }
LABEL_21:
  sub_2341579B4(26, 0, v22, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ecdsa/ecdsa.c", v23);
  return 0;
}

uint64_t sub_234171D90(uint64_t a1, void *__dst, uint64_t a3)
{
  if (sub_234162358(__dst, *(int *)(a1 + 264), a3)
    && (int)sub_234162948((uint64_t *)__dst, *(int *)(a1 + 264), *(uint64_t **)(a1 + 256), *(int *)(a1 + 264)) < 0)
  {
    return 1;
  }
  sub_2341579B4(15, 0, 133, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/scalar.c", 32);
  return 0;
}

uint64_t sub_234171E04(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
}

uint64_t sub_234171E10(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unint64_t a4)
{
  unsigned int v8;
  char v9;
  unint64_t v10;
  unint64_t v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341621D4((uint64_t *)(a1 + 256));
  v9 = v8;
  v10 = v8;
  if (((unint64_t)v8 + 7) >> 3 < a4)
    a4 = ((unint64_t)v8 + 7) >> 3;
  sub_234162544(a2, *(int *)(a1 + 264), a3, a4);
  if (v10 < 8 * a4)
    sub_23416C30C((char *)a2, (uint64_t)a2, 8 - (v9 & 7), *(int *)(a1 + 264));
  return sub_2341638CC(a2, 0, *(unint64_t **)(a1 + 256), v12, *(int *)(a1 + 264));
}

void sub_234171EEC(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  sub_234165E1C(a2, a3, a4, *(int *)(a1 + 264), a1 + 232);
}

uint64_t sub_234171F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v5)(void);

  if (a4 && a3 && a5)
  {
    v5 = *(void (**)(void))(*(_QWORD *)a1 + 56);
    if (v5)
    {
      v5();
      return 1;
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    }
  }
  else
  {
    sub_2341579B4(15, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 809);
    return 0;
  }
}

uint64_t sub_234171F6C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

uint64_t *sub_234171F7C(unsigned __int8 *a1, unint64_t a2, uint64_t *a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  _OWORD v14[4];
  uint64_t v15;

  v7 = a3[5];
  if (v7 && *(_QWORD *)(v7 + 40))
  {
    v8 = 103;
    v9 = 276;
LABEL_9:
    sub_2341579B4(26, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ecdsa/ecdsa.c", v9);
    return 0;
  }
  v10 = *a3;
  if (!*a3 || (v11 = a3[2]) == 0)
  {
    v8 = 67;
    v9 = 282;
    goto LABEL_9;
  }
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  if (sub_234172050(v10, (unint64_t *)v14, a4, a5))
    return sub_2341720F4(v10, &v13, (unint64_t *)(v11 + 24), (uint64_t)v14, a1, a2);
  return 0;
}

uint64_t sub_234172050(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unint64_t a4)
{
  __int16 v8;

  if ((sub_2341621D4((uint64_t *)(a1 + 256)) + 7) >> 3 != a4)
  {
    v8 = 68;
    goto LABEL_5;
  }
  sub_234162544(a2, *(int *)(a1 + 264), a3, a4);
  if ((sub_234162948((uint64_t *)a2, *(int *)(a1 + 264), *(uint64_t **)(a1 + 256), *(int *)(a1 + 264)) & 0x80000000) == 0)
  {
    v8 = 75;
LABEL_5:
    sub_2341579B4(15, 0, 133, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/scalar.c", v8);
    return 0;
  }
  return 1;
}

uint64_t *sub_2341720F4(uint64_t a1, _DWORD *a2, unint64_t *a3, uint64_t a4, unsigned __int8 *a5, unint64_t a6)
{
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t *v23;
  uint64_t *v24;
  _OWORD v26[4];
  uint64_t v27;
  _OWORD v28[4];
  uint64_t v29;
  _OWORD v30[4];
  uint64_t v31;
  _OWORD v32[13];
  uint64_t v33;

  *a2 = 0;
  if (sub_2341621D4((uint64_t *)(a1 + 256)) <= 0x9F)
  {
    sub_2341579B4(26, 0, 112, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ecdsa/ecdsa.c", 214);
    return 0;
  }
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  if (!sub_2341749E8(a1, (uint64_t)v32, a4)
    || !sub_234174DB0(a1, (unint64_t *)v30, (uint64_t)v32))
  {
    return 0;
  }
  v12 = *(_DWORD *)(a1 + 264);
  if (v12 < 1)
  {
    v17 = 1;
  }
  else
  {
    v13 = 0;
    v14 = (uint64_t *)v30;
    v15 = *(unsigned int *)(a1 + 264);
    do
    {
      v16 = *v14++;
      v13 |= v16;
      --v15;
    }
    while (v15);
    v17 = v13 == 0;
  }
  if (v17)
    goto LABEL_17;
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  sub_234165E1C((unint64_t *)v28, (unint64_t *)v30, *(unint64_t **)(a1 + 232), v12, a1 + 232);
  sub_234165E1C((unint64_t *)v28, a3, (unint64_t *)v28, *(int *)(a1 + 264), a1 + 232);
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  sub_234171E10(a1, (unint64_t *)v26, a5, a6);
  sub_234177A98(a1, (unint64_t *)v28, (uint64_t *)v28, (uint64_t *)v26);
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v26, a4);
  sub_234165D40((unint64_t *)v26, *(int *)(a1 + 264), (uint64_t)v26, *(int *)(a1 + 264), a1 + 232);
  sub_234165E1C((unint64_t *)v28, (unint64_t *)v28, (unint64_t *)v26, *(int *)(a1 + 264), a1 + 232);
  v18 = *(unsigned int *)(a1 + 264);
  if ((int)v18 < 1)
  {
    v22 = 1;
  }
  else
  {
    v19 = 0;
    v20 = (uint64_t *)v28;
    do
    {
      v21 = *v20++;
      v19 |= v21;
      --v18;
    }
    while (v18);
    v22 = v19 == 0;
  }
  if (v22)
  {
LABEL_17:
    v23 = 0;
    *a2 = 1;
  }
  else
  {
    v24 = sub_234171AA8();
    v23 = v24;
    if (!v24
      || !sub_2341622B0(*v24, v30, *(int *)(a1 + 264))
      || !sub_2341622B0(v23[1], v28, *(int *)(a1 + 264)))
    {
      sub_2341540D8(v23);
      return 0;
    }
  }
  return v23;
}

uint64_t *sub_234172360(unint64_t *a1, size_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  size_t v11;
  int v12;
  uint64_t *v13;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[8];
  int8x16_t v22[4];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v5 = a3[5];
  if (v5 && *(_QWORD *)(v5 + 40))
  {
    v6 = 103;
    v7 = 312;
LABEL_14:
    sub_2341579B4(26, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ecdsa/ecdsa.c", v7);
    return 0;
  }
  v8 = *a3;
  if (!*a3 || (v9 = a3[2]) == 0)
  {
    v6 = 67;
    v7 = 318;
    goto LABEL_14;
  }
  v10 = (unint64_t *)(v9 + 24);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v22[0] = (int8x16_t)xmmword_2342E2030;
  v22[1] = (int8x16_t)xmmword_2342E2040;
  v22[2] = (int8x16_t)xmmword_2342E2050;
  v22[3] = (int8x16_t)xmmword_2342E2060;
  v23 = 0;
  v24 = 0;
  v11 = 8 * *(int *)(v8 + 264);
  v33 = 0x4000000000;
  sub_2341725B4((unint64_t)v22, (unint64_t *)(v9 + 24), v11);
  sub_2341725B4((unint64_t)v22, a1, a2);
  sub_2341839C0(v21, HIDWORD(v33), v22);
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  if (!sub_23416BF24((char *)&v16, 1uLL, *(unint64_t **)(v8 + 256), *(int *)(v8 + 264), (uint64_t)v21))return 0;
  v12 = 33;
  while (1)
  {
    v15 = 0;
    v13 = sub_2341720F4(v8, &v15, v10, (uint64_t)&v16, (unsigned __int8 *)a1, a2);
    if (v13 || !v15)
      break;
    if (!--v12)
    {
      sub_2341579B4(26, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ecdsa/ecdsa.c", 364);
      return v13;
    }
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    if (!sub_23416BF24((char *)&v16, 1uLL, *(unint64_t **)(v8 + 256), *(int *)(v8 + 264), (uint64_t)v21))return 0;
  }
  return v13;
}

uint64_t sub_23417256C(uint64_t a1)
{
  return a1 + 256;
}

uint64_t sub_234172574(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_2342E2030;
  *(_OWORD *)(a1 + 16) = xmmword_2342E2040;
  *(_OWORD *)(a1 + 32) = xmmword_2342E2050;
  *(_OWORD *)(a1 + 48) = xmmword_2342E2060;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 208) = 0x4000000000;
  return 1;
}

uint64_t sub_2341725B4(unint64_t a1, unint64_t *__src, size_t __n)
{
  size_t v3;
  unint64_t *v4;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;

  if (__n)
  {
    v3 = __n;
    v4 = __src;
    v6 = (unint64_t *)(a1 + 80);
    *(_OWORD *)(a1 + 64) += __PAIR128__(__n >> 61, 8 * __n);
    v7 = *(unsigned int *)(a1 + 208);
    if ((_DWORD)v7)
    {
      v8 = 128 - v7;
      v9 = __n - (128 - v7);
      if (__n < 128 - v7)
      {
        memcpy((char *)v6 + v7, __src, __n);
        LODWORD(v3) = *(_DWORD *)(a1 + 208) + v3;
LABEL_12:
        *(_DWORD *)(a1 + 208) = v3;
        return 1;
      }
      if ((_DWORD)v7 != 128)
        memcpy((char *)v6 + v7, __src, 128 - v7);
      *(_DWORD *)(a1 + 208) = 0;
      v4 = (unint64_t *)((char *)v4 + v8);
      sub_234183AA8(a1, v6, 1);
      v3 = v9;
    }
    if (v3 >= 0x80)
    {
      sub_234183AA8(a1, v4, v3 >> 7);
      v10 = (char *)v4 + v3;
      v3 &= 0x7Fu;
      v4 = (unint64_t *)&v10[-v3];
    }
    if (v3)
    {
      memcpy(v6, v4, v3);
      goto LABEL_12;
    }
  }
  return 1;
}

uint64_t sub_2341726AC(_QWORD *a1, int8x16_t *a2)
{
  return sub_2341839C0(a1, a2[13].u32[1], a2);
}

uint64_t sub_2341726B8(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_23416BF24(a2, 1uLL, *(unint64_t **)(a1 + 256), *(int *)(a1 + 264), a3);
}

uint64_t *sub_2341726D0()
{
  sub_234195C74(&stru_2561580D0, (void (*)(void))sub_2341726FC);
  return &qword_256159FF0;
}

double sub_2341726FC()
{
  double result;

  qword_25615A1E8 = (uint64_t)"NIST P-224";
  unk_25615A1F0 = 0x4812B000002C9;
  byte_25615A1F8 = 33;
  byte_25615A1FD = 5;
  sub_234162308((uint64_t)&unk_25615A130, (uint64_t)&unk_2342E2EA8, 4);
  sub_234162308((uint64_t)&unk_25615A118, (uint64_t)&unk_2342E2EC8, 4);
  qword_25615A148 = -1;
  sub_234162308((uint64_t)&unk_25615A0F0, (uint64_t)&unk_2342E2EE8, 4);
  sub_234162308((uint64_t)&unk_25615A0D8, (uint64_t)&unk_2342E2F08, 4);
  qword_25615A108 = 0xD6E242706A1FC2EBLL;
  sub_234195C74(&stru_256158200, sub_234177888);
  xmmword_25615A000 = xmmword_2342E2F28;
  unk_25615A010 = unk_2342E2F38;
  unk_25615A048 = xmmword_2342E2F48;
  unk_25615A058 = unk_2342E2F58;
  qword_25615A090 = 1;
  xmmword_25615A1A0 = xmmword_2342E2F68;
  unk_25615A1B0 = unk_2342E2F78;
  qword_256159FF0 = (uint64_t)&qword_25615A910;
  *(_QWORD *)algn_256159FF8 = &qword_256159FF0;
  sub_234187EE4((uint64_t)&qword_256159FF0);
  *(_QWORD *)&result = 0x100000001;
  qword_25615A204 = 0x100000001;
  return result;
}

uint64_t *sub_234172820()
{
  sub_234195C74(&stru_2561580E0, (void (*)(void))sub_23417284C);
  return &qword_25615A210;
}

double sub_23417284C()
{
  double result;

  dword_25615A410 = 415;
  qword_25615A408 = (uint64_t)"NIST P-256";
  qword_25615A414 = 0x701033DCE48862ALL;
  byte_25615A41D = 8;
  sub_234162308((uint64_t)&unk_25615A350, (uint64_t)&unk_2342E2F88, 4);
  sub_234162308((uint64_t)&unk_25615A338, (uint64_t)&unk_2342E2FA8, 4);
  qword_25615A368 = 1;
  sub_234162308((uint64_t)&unk_25615A310, (uint64_t)&unk_2342E2FC8, 4);
  sub_234162308((uint64_t)&unk_25615A2F8, (uint64_t)&unk_2342E2FE8, 4);
  qword_25615A328 = 0xCCD1C8AAEE00BC4FLL;
  sub_234195C74(&stru_256158210, sub_234177948);
  qword_25615A210 = (uint64_t)&qword_25615A9B0;
  *(_QWORD *)algn_25615A218 = &qword_25615A210;
  xmmword_25615A220 = xmmword_2342E3008;
  unk_25615A230 = unk_2342E3018;
  unk_25615A268 = xmmword_2342E3028;
  unk_25615A278 = unk_2342E3038;
  xmmword_25615A2B0 = xmmword_2342E3048;
  unk_25615A2C0 = unk_2342E3058;
  xmmword_25615A3C0 = xmmword_2342E3068;
  unk_25615A3D0 = unk_2342E3078;
  sub_234187EE4((uint64_t)&qword_25615A210);
  *(_QWORD *)&result = 0x100000001;
  qword_25615A424 = 0x100000001;
  return result;
}

uint64_t *sub_234172984()
{
  sub_234195C74(&stru_2561580F0, (void (*)(void))sub_2341729B0);
  return &qword_25615A430;
}

double sub_2341729B0()
{
  double result;

  qword_25615A628 = (uint64_t)"NIST P-384";
  unk_25615A630 = 0x4812B000002CBLL;
  byte_25615A638 = 34;
  byte_25615A63D = 5;
  sub_234162308((uint64_t)&unk_25615A570, (uint64_t)&unk_2342E3090, 6);
  sub_234162308((uint64_t)&unk_25615A558, (uint64_t)&unk_2342E30C0, 6);
  qword_25615A588 = 0x100000001;
  sub_234162308((uint64_t)&unk_25615A530, (uint64_t)&unk_2342E30F0, 6);
  sub_234162308((uint64_t)&unk_25615A518, (uint64_t)&unk_2342E3120, 6);
  qword_25615A548 = 0x6ED46089E88FDC45;
  sub_234195C74(&stru_2561581F0, sub_234176F50);
  qword_25615A430 = (uint64_t)&qword_25615A870;
  *(_QWORD *)algn_25615A438 = &qword_25615A430;
  xmmword_25615A440 = xmmword_2342E3150;
  unk_25615A450 = unk_2342E3160;
  xmmword_25615A460 = xmmword_2342E3170;
  unk_25615A488 = xmmword_2342E3180;
  unk_25615A498 = unk_2342E3190;
  unk_25615A4A8 = xmmword_2342E31A0;
  xmmword_25615A4D0 = xmmword_2342E31B0;
  unk_25615A4E0 = unk_2342E31C0;
  xmmword_25615A4F0 = xmmword_2342E31D0;
  xmmword_25615A5E0 = xmmword_2342E31E0;
  unk_25615A5F0 = unk_2342E31F0;
  xmmword_25615A600 = xmmword_2342E3200;
  sub_234187EE4((uint64_t)&qword_25615A430);
  *(_QWORD *)&result = 0x100000001;
  qword_25615A644 = 0x100000001;
  return result;
}

uint64_t *sub_234172AFC()
{
  sub_234195C74(&stru_256158100, (void (*)(void))sub_234172B28);
  return &qword_25615A650;
}

double sub_234172B28()
{
  double result;

  qword_25615A848 = (uint64_t)"NIST P-521";
  unk_25615A850 = 0x4812B000002CCLL;
  byte_25615A858 = 35;
  byte_25615A85D = 5;
  sub_234162308((uint64_t)&unk_25615A790, (uint64_t)&unk_2342E3218, 9);
  sub_234162308((uint64_t)&unk_25615A778, (uint64_t)&unk_2342E3260, 9);
  qword_25615A7A8 = 1;
  sub_234162308((uint64_t)&unk_25615A750, (uint64_t)&unk_2342E32A8, 9);
  sub_234162308((uint64_t)&unk_25615A738, (uint64_t)&unk_2342E32F0, 9);
  qword_25615A768 = 0x1D2F5CCD79A995C7;
  sub_234195C74(&stru_2561581F0, sub_234176F50);
  qword_25615A650 = (uint64_t)&qword_25615A870;
  *(_QWORD *)algn_25615A658 = &qword_25615A650;
  qword_25615A6A0 = 116;
  xmmword_25615A660 = xmmword_2342E3338;
  unk_25615A670 = unk_2342E3348;
  xmmword_25615A680 = xmmword_2342E3358;
  unk_25615A690 = unk_2342E3368;
  qword_25615A6E8 = 480;
  unk_25615A6A8 = xmmword_2342E3380;
  unk_25615A6B8 = unk_2342E3390;
  unk_25615A6C8 = xmmword_2342E33A0;
  unk_25615A6D8 = unk_2342E33B0;
  qword_25615A730 = 0;
  xmmword_25615A6F0 = xmmword_2342E3410;
  unk_25615A700 = unk_2342E3420;
  xmmword_25615A710 = xmmword_2342E3430;
  unk_25615A720 = unk_2342E3440;
  qword_25615A840 = 77;
  xmmword_25615A800 = xmmword_2342E33C8;
  unk_25615A810 = unk_2342E33D8;
  xmmword_25615A820 = xmmword_2342E33E8;
  unk_25615A830 = unk_2342E33F8;
  sub_234187EE4((uint64_t)&qword_25615A650);
  *(_QWORD *)&result = 0x100000001;
  qword_25615A864 = 0x100000001;
  return result;
}

_QWORD *sub_234172C94(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t **v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (sub_2341621D4(a1) - 529 <= 0xFFFFFDE7)
  {
    sub_2341579B4(15, 0, 110, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 229);
    return 0;
  }
  if (a4)
  {
    v9 = 0;
  }
  else
  {
    v10 = sub_23418E2E4(0x30uLL);
    if (!v10)
      return 0;
    a4 = (uint64_t)v10;
    *(_OWORD *)((char *)v10 + 26) = 0u;
    *v10 = 0u;
    v10[1] = 0u;
    v9 = (unint64_t **)v10;
  }
  sub_234162DC8((_QWORD *)a4);
  v11 = sub_234162E68(a4);
  v12 = sub_234162E68(a4);
  v8 = 0;
  if (v11)
  {
    v13 = (uint64_t)v12;
    if (v12)
    {
      if (sub_2341637E4((uint64_t)v11, a2, (uint64_t)a1, a4)
        && sub_2341637E4(v13, a3, (uint64_t)a1, a4))
      {
        v14 = sub_23418E344(0x220uLL);
        v8 = v14;
        if (!v14)
          return v8;
        *((_DWORD *)v14 + 135) = 1;
        sub_234195C74(&stru_2561581F0, sub_234176F50);
        *v8 = &qword_25615A870;
        sub_234169594((uint64_t)(v8 + 37));
        sub_234169594((uint64_t)(v8 + 29));
        v8[1] = v8;
        if (sub_234172E58((uint64_t)v8, (uint64_t)a1, (uint64_t)v11, v13, a4))
          goto LABEL_16;
        sub_234172FBC((uint64_t)v8);
      }
      v8 = 0;
    }
  }
LABEL_16:
  if (!*(_BYTE *)(a4 + 40))
  {
    v15 = *(_QWORD *)(a4 + 8);
    v16 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v15 + 8 * v16);
  }
  sub_234162D80(v9);
  return v8;
}

uint64_t *sub_234172E2C()
{
  sub_234195C74(&stru_2561581F0, sub_234176F50);
  return &qword_25615A870;
}

uint64_t sub_234172E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  void **v11;
  uint64_t v12;
  uint64_t v13;

  if (sub_2341621D4((uint64_t *)a2) >= 3 && *(int *)(a2 + 8) >= 1 && (**(_BYTE **)a2 & 1) != 0)
  {
    sub_234162DC8((_QWORD *)a5);
    result = (uint64_t)sub_234162E68(a5);
    if (result)
    {
      v11 = (void **)result;
      result = sub_234169668((_DWORD *)(a1 + 296), a2, a5);
      if ((_DWORD)result)
      {
        result = sub_234174450((uint64_t *)a1, a1 + 360, a3);
        if ((_DWORD)result)
        {
          result = sub_234174450((uint64_t *)a1, a1 + 432, a4);
          if ((_DWORD)result)
          {
            sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
            result = sub_234174450((uint64_t *)a1, a1 + 160, (uint64_t)&qword_256159710);
            if ((_DWORD)result)
            {
              result = (uint64_t)sub_234162060(v11, a3);
              if (result)
              {
                result = sub_2341618E4((uint64_t)v11, 3uLL);
                if ((_DWORD)result)
                {
                  *(_DWORD *)(a1 + 528) = sub_234162A28((uint64_t)v11, a1 + 320) == 0;
                  result = 1;
                }
              }
            }
          }
        }
      }
    }
    if (!*(_BYTE *)(a5 + 40))
    {
      v12 = *(_QWORD *)(a5 + 8);
      v13 = *(_QWORD *)(a5 + 16) - 1;
      *(_QWORD *)(a5 + 16) = v13;
      *(_QWORD *)(a5 + 32) = *(_QWORD *)(v12 + 8 * v13);
    }
  }
  else
  {
    sub_2341579B4(15, 0, 110, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/simple.c", 96);
    return 0;
  }
  return result;
}

void sub_234172FBC(uint64_t a1)
{
  if (a1 && !*(_DWORD *)(a1 + 512) && sub_234193960((unsigned int *)(a1 + 540)))
  {
    sub_234161FC4((_QWORD **)(a1 + 232));
    sub_234161FC4((_QWORD **)(a1 + 256));
    sub_234161FC4((_QWORD **)(a1 + 296));
    sub_234161FC4((_QWORD **)(a1 + 320));
    sub_23418E3C4((_QWORD *)a1);
  }
}

uint64_t sub_234173020(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int *a4)
{
  int v6;
  __int16 v7;
  uint64_t v8;
  _QWORD *v12;
  _QWORD **v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[5];

  if (!*(_DWORD *)(a1 + 512) && !*(_DWORD *)(a1 + 532) && *a2 == a1)
  {
    if (sub_2341621D4(a3) - 529 <= 0xFFFFFDE7)
    {
      v6 = 112;
      v7 = 287;
      goto LABEL_5;
    }
    if (!sub_234162B4C(a4))
    {
      v6 = 131;
      v7 = 293;
      goto LABEL_5;
    }
    v12 = sub_234161F88();
    v13 = (_QWORD **)v12;
    if (v12 && sub_2341645A0((uint64_t)v12, a3))
    {
      if ((int)sub_234162A28((uint64_t)v13, a1 + 320) <= 0)
      {
        sub_2341579B4(15, 0, 112, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 309);
      }
      else
      {
        v22 = 0u;
        memset(v23, 0, sizeof(v23));
        v20 = 0u;
        v21 = 0u;
        v19 = 0u;
        if ((**(unsigned int (***)(uint64_t, uint64_t, __int128 *, char *))a1)(a1, (uint64_t)(a2 + 1), &v19, (char *)v23 + 8)&& sub_234169668((_DWORD *)(a1 + 232), (uint64_t)a3, 0))
        {
          v14 = sub_234162A28(a1 + 320, (uint64_t)a3);
          v15 = v22;
          *(_OWORD *)(a1 + 48) = v21;
          *(_OWORD *)(a1 + 64) = v15;
          v16 = v20;
          *(_OWORD *)(a1 + 16) = v19;
          *(_OWORD *)(a1 + 32) = v16;
          v17 = *(_OWORD *)((char *)v23 + 8);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)((char *)&v23[1] + 8);
          v18 = *(_OWORD *)((char *)&v23[3] + 8);
          *(_OWORD *)(a1 + 120) = *(_OWORD *)((char *)&v23[2] + 8);
          *(_OWORD *)(a1 + 136) = v18;
          *(_DWORD *)(a1 + 536) = v14 > 0;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)&v23[0];
          *(_QWORD *)(a1 + 152) = *((_QWORD *)&v23[4] + 1);
          *(_OWORD *)(a1 + 88) = v17;
          v8 = 1;
          *(_DWORD *)(a1 + 532) = 1;
LABEL_19:
          sub_234161FC4(v13);
          return v8;
        }
      }
    }
    v8 = 0;
    goto LABEL_19;
  }
  v6 = 66;
  v7 = 282;
LABEL_5:
  sub_2341579B4(15, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", v7);
  return 0;
}

uint64_t sub_234173208(uint64_t (***a1)(_QWORD, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (**a1)(a1, a3, a2, a2 + 72);
}

uint64_t *sub_234173224(int a1)
{
  if (a1 > 714)
  {
    if (a1 != 715)
    {
      if (a1 == 716)
      {
        sub_234195C74(&stru_256158100, (void (*)(void))sub_234172B28);
        return &qword_25615A650;
      }
      goto LABEL_8;
    }
    sub_234195C74(&stru_2561580F0, (void (*)(void))sub_2341729B0);
    return &qword_25615A430;
  }
  else
  {
    if (a1 != 415)
    {
      if (a1 == 713)
      {
        sub_234195C74(&stru_2561580D0, (void (*)(void))sub_2341726FC);
        return &qword_256159FF0;
      }
LABEL_8:
      sub_2341579B4(15, 0, 123, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 342);
      return 0;
    }
    sub_234195C74(&stru_2561580E0, (void (*)(void))sub_23417284C);
    return &qword_25615A210;
  }
}

uint64_t sub_2341732FC(uint64_t a1)
{
  if (a1 && !*(_DWORD *)(a1 + 512))
    sub_234193914((unsigned int *)(a1 + 540));
  return a1;
}

BOOL sub_234173330(uint64_t a1, char *a2, char *a3)
{
  return sub_23418E484(a2, a3, 8 * *(int *)(a1 + 328)) == 0;
}

uint64_t sub_234173360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v6)(uint64_t, _OWORD *, uint64_t, uint64_t *);
  void (*v7)(uint64_t, _OWORD *, uint64_t);
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  char v25;
  BOOL v26;
  _OWORD v29[4];
  uint64_t v30;
  _OWORD v31[4];
  uint64_t v32;
  _OWORD v33[4];
  uint64_t v34;
  _OWORD v35[4];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v6 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 88);
  v7 = *(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 96);
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  v30 = 0;
  v8 = (uint64_t *)(a3 + 144);
  memset(v29, 0, sizeof(v29));
  v7(a1, v29, a3 + 144);
  v6(a1, v35, a2, (uint64_t *)v29);
  v9 = (uint64_t *)(a2 + 144);
  v7(a1, v31, a2 + 144);
  v6(a1, v33, a3, (uint64_t *)v31);
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  sub_23416393C((unint64_t *)v35, (unint64_t *)v35, (unint64_t *)v33, *(uint64_t **)(a1 + 320), (uint64_t *)&v37, *(int *)(a1 + 328));
  v10 = *(unsigned int *)(a1 + 328);
  if ((int)v10 < 1)
  {
    v14 = -1;
  }
  else
  {
    v11 = 0;
    v12 = (uint64_t *)v35;
    do
    {
      v13 = *v12++;
      v11 |= v13;
      --v10;
    }
    while (v10);
    v14 = ~(v11 != 0);
  }
  v6(a1, v29, (uint64_t)v29, v8);
  v6(a1, v35, a2 + 72, (uint64_t *)v29);
  v6(a1, v31, (uint64_t)v31, (uint64_t *)(a2 + 144));
  v6(a1, v33, a3 + 72, (uint64_t *)v31);
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  sub_23416393C((unint64_t *)v35, (unint64_t *)v35, (unint64_t *)v33, *(uint64_t **)(a1 + 320), (uint64_t *)&v37, *(int *)(a1 + 328));
  v15 = *(unsigned int *)(a1 + 328);
  if ((int)v15 < 1)
    return 1;
  v16 = 0;
  v17 = (uint64_t *)v35;
  v18 = *(unsigned int *)(a1 + 328);
  do
  {
    v19 = *v17++;
    v16 |= v19;
    --v18;
  }
  while (v18);
  v20 = 0;
  v21 = *(unsigned int *)(a1 + 328);
  do
  {
    v22 = *v9++;
    v20 |= v22;
    --v21;
  }
  while (v21);
  do
  {
    v23 = *v8++;
    v21 |= v23;
    --v15;
  }
  while (v15);
  v24 = v21 != 0;
  if (v16)
    v25 = 0;
  else
    v25 = v14;
  v26 = v25 & v24;
  if (v20)
    return v26;
  else
    return ~v24;
}

uint64_t sub_234173584(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 532))
    return a1 + 8;
  else
    return 0;
}

BOOL sub_234173598(uint64_t a1, void **a2)
{
  return sub_234162060(a2, a1 + 256) != 0;
}

uint64_t sub_2341735C0(uint64_t a1)
{
  return sub_2341621D4((uint64_t *)(a1 + 256));
}

uint64_t sub_2341735C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 1;
  if (!sub_23416171C((_QWORD **)a2, 1uLL))
    return 0;
  *(_DWORD *)(a2 + 16) = 0;
  **(_QWORD **)a2 = 1;
  *(_DWORD *)(a2 + 8) = 1;
  return v3;
}

uint64_t sub_234173618(uint64_t a1, void **a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  unint64_t v8;
  unsigned __int8 v9[66];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!a2 || (result = (uint64_t)sub_234162060(a2, a1 + 320)) != 0)
  {
    if (!a3
      || (v8 = 0,
          (*(void (**)(uint64_t, unsigned __int8 *, unint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v9, &v8, a1 + 360), (result = (uint64_t)sub_2341625C8(v9, v8, a3)) != 0))
    {
      if (!a4)
        return 1;
      v8 = 0;
      (*(void (**)(uint64_t, unsigned __int8 *, unint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v9, &v8, a1 + 432);
      result = (uint64_t)sub_2341625C8(v9, v8, a4);
      if (result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_234173704(uint64_t a1)
{
  return *(unsigned int *)(a1 + 512);
}

uint64_t sub_23417370C(uint64_t a1)
{
  return sub_2341621D4((uint64_t *)(a1 + 320));
}

const char *sub_234173714(int a1)
{
  if (a1 > 714)
  {
    if (a1 != 715)
    {
      if (a1 == 716)
        return "P-521";
      return 0;
    }
    return "P-384";
  }
  else
  {
    if (a1 != 415)
    {
      if (a1 == 713)
        return "P-224";
      return 0;
    }
    return "P-256";
  }
}

uint64_t sub_234173774(const char *a1)
{
  if (!strcmp(a1, "P-224"))
    return 713;
  if (!strcmp(a1, "P-256"))
    return 415;
  if (!strcmp(a1, "P-384"))
    return 715;
  if (!strcmp(a1, "P-521"))
    return 716;
  return 0;
}

_QWORD *sub_2341737FC(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    v2 = sub_23418E2E4(0xE0uLL);
    if (v2)
    {
      if (!*(_DWORD *)(a1 + 512))
        sub_234193914((unsigned int *)(a1 + 540));
      *v2 = a1;
      sub_234173870((uint64_t)(v2 + 1));
    }
  }
  else
  {
    sub_2341579B4(15, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 469);
    return 0;
  }
  return v2;
}

double sub_234173870(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  return result;
}

void sub_2341738A4(uint64_t *a1)
{
  if (a1)
  {
    sub_234172FBC(*a1);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_2341738D8(uint64_t *a1, uint64_t *a2)
{
  if (sub_23417154C(*a1, *a2))
  {
    sub_2341579B4(15, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 501);
    return 0;
  }
  else
  {
    if (a1 != a2)
      sub_234173944((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
    return 1;
  }
}

__n128 sub_234173944(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v9 = *(_OWORD *)(a2 + 176);
  v8 = *(_OWORD *)(a2 + 192);
  v10 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 160) = v10;
  result = *(__n128 *)(a2 + 144);
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t *sub_2341739B0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  if (!a1)
    return 0;
  v3 = sub_2341737FC(a2);
  v4 = v3;
  if (!v3 || !sub_2341738D8(v3, a1))
  {
    sub_2341738A4(v4);
    return 0;
  }
  return v4;
}

uint64_t sub_234173A00(uint64_t a1, uint64_t *a2)
{
  if (sub_23417154C(a1, *a2))
  {
    sub_2341579B4(15, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 528);
    return 0;
  }
  else
  {
    sub_234173870((uint64_t)(a2 + 1));
    return 1;
  }
}

double sub_234173A58(uint64_t a1, uint64_t a2)
{
  return sub_234173870(a2);
}

BOOL sub_234173A60(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (sub_23417154C(a1, *a2))
  {
    sub_2341579B4(15, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 537);
    return 0;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 328);
    if ((int)v5 < 1)
    {
      return 1;
    }
    else
    {
      v6 = 0;
      v7 = a2 + 19;
      do
      {
        v8 = *v7++;
        v6 |= v8;
        --v5;
      }
      while (v5);
      return v6 == 0;
    }
  }
}

BOOL sub_234173AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 328);
  if ((int)v2 < 1)
    return 1;
  v3 = 0;
  v4 = (uint64_t *)(a2 + 144);
  do
  {
    v5 = *v4++;
    v3 |= v5;
    --v2;
  }
  while (v2);
  return v3 == 0;
}

BOOL sub_234173B1C(uint64_t a1, uint64_t *a2)
{
  if (!sub_23417154C(a1, *a2))
    return sub_234173B7C(a1, (uint64_t)(a2 + 1));
  sub_2341579B4(15, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 546);
  return 0;
}

BOOL sub_234173B7C(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, _OWORD *, uint64_t);
  void (*v5)(uint64_t, _OWORD *, _OWORD *, _OWORD *);
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v16[4];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  _OWORD v20[4];
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v5 = *(void (**)(uint64_t, _OWORD *, _OWORD *, _OWORD *))(*(_QWORD *)a1 + 88);
  v4 = *(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 96);
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v4(a1, v22, a2);
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  v6 = (uint64_t *)(a2 + 144);
  memset(v16, 0, sizeof(v16));
  v4(a1, v20, a2 + 144);
  v4(a1, v18, (uint64_t)v20);
  v5(a1, v16, v18, v20);
  if (*(_DWORD *)(a1 + 528))
  {
    sub_234174264(a1, (unint64_t *)v20, (uint64_t *)v18, (uint64_t *)v18);
    sub_234174264(a1, (unint64_t *)v20, (uint64_t *)v20, (uint64_t *)v18);
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    sub_23416393C((unint64_t *)v22, (unint64_t *)v22, (unint64_t *)v20, *(uint64_t **)(a1 + 320), (uint64_t *)&v24, *(int *)(a1 + 328));
  }
  else
  {
    v5(a1, v20, v18, (_OWORD *)(a1 + 360));
    sub_234174264(a1, (unint64_t *)v22, (uint64_t *)v22, (uint64_t *)v20);
  }
  v5(a1, v22, v22, (_OWORD *)a2);
  v5(a1, v20, (_OWORD *)(a1 + 432), v16);
  sub_234174264(a1, (unint64_t *)v22, (uint64_t *)v22, (uint64_t *)v20);
  v4(a1, v20, a2 + 72);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  sub_23416393C((unint64_t *)v20, (unint64_t *)v20, (unint64_t *)v22, *(uint64_t **)(a1 + 320), (uint64_t *)&v24, *(int *)(a1 + 328));
  v7 = *(unsigned int *)(a1 + 328);
  if ((int)v7 < 1)
    return 1;
  v8 = 0;
  v9 = (uint64_t *)v20;
  v10 = *(unsigned int *)(a1 + 328);
  do
  {
    v11 = *v9++;
    v8 |= v11;
    --v10;
  }
  while (v10);
  v12 = 0;
  do
  {
    v13 = *v6++;
    v12 |= v13;
    --v7;
  }
  while (v7);
  return !v12 || v8 == 0;
}

uint64_t sub_234173D88(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!sub_23417154C(a1, *a2) && !sub_23417154C(a1, *a3))
    return sub_234173360(a1, (uint64_t)(a2 + 1), (uint64_t)(a3 + 1)) ^ 1;
  sub_2341579B4(15, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 556);
  return 0xFFFFFFFFLL;
}

uint64_t sub_234173E08(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  __int16 v9;
  uint64_t result;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD v13[4];
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18[66];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!**(_QWORD **)a1)
  {
    v8 = 66;
    v9 = 568;
    goto LABEL_5;
  }
  if (sub_23417154C(a1, *a2))
  {
    v8 = 106;
    v9 = 572;
LABEL_5:
    sub_2341579B4(15, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", v9);
    return 0;
  }
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  if (a3)
    v11 = v15;
  else
    v11 = 0;
  if (a4)
    v12 = v13;
  else
    v12 = 0;
  result = (**(uint64_t (***)(uint64_t, uint64_t, _OWORD *, _OWORD *))a1)(a1, (uint64_t)(a2 + 1), v11, v12);
  if ((_DWORD)result)
  {
    if (!a3
      || (v17 = 0,
          (*(void (**)(uint64_t, unsigned __int8 *, unint64_t *, _OWORD *))(*(_QWORD *)a1 + 104))(a1, v18, &v17, v15), (result = (uint64_t)sub_2341625C8(v18, v17, a3)) != 0))
    {
      if (!a4)
        return 1;
      v17 = 0;
      (*(void (**)(uint64_t, unsigned __int8 *, unint64_t *, _OWORD *))(*(_QWORD *)a1 + 104))(a1, v18, &v17, v13);
      result = (uint64_t)sub_2341625C8(v18, v17, a4);
      if (result)
        return 1;
    }
  }
  return result;
}

BOOL sub_234173F8C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unsigned __int8 v6[66];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  (*(void (**)(uint64_t, unsigned __int8 *, unint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v6, &v5, a3);
  return sub_2341625C8(v6, v5, a2) != 0;
}

__n128 sub_234174014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v3 = *(_OWORD *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 16) = v3;
  v6 = *(_OWORD *)(a3 + 104);
  v7 = *(_OWORD *)(a3 + 120);
  v8 = *(_QWORD *)(a3 + 136);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 136) = v8;
  *(_OWORD *)(a2 + 120) = v7;
  *(_OWORD *)(a2 + 104) = v6;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  v10 = *(_OWORD *)(a1 + 192);
  v9 = *(_OWORD *)(a1 + 208);
  v11 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a2 + 208) = *(_QWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 176) = v10;
  *(_OWORD *)(a2 + 192) = v9;
  *(_OWORD *)(a2 + 160) = v11;
  result = *(__n128 *)(a1 + 160);
  *(__n128 *)(a2 + 144) = result;
  return result;
}

uint64_t sub_234174080(uint64_t a1)
{
  return a1 + 160;
}

uint64_t sub_234174088(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 8);
  if (v1)
    return v1();
  sub_2341579B4(15, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 607);
  return 0;
}

uint64_t sub_2341740CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(uint64_t, _OWORD *, _OWORD *, uint64_t);
  void (*v9)(uint64_t, _OWORD *, uint64_t);
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[4];
  uint64_t v24;
  _OWORD v25[4];
  uint64_t v26;

  v8 = *(void (**)(uint64_t, _OWORD *, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88);
  v9 = *(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 96);
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v9(a1, v25, a4);
  v9(a1, v23, a3);
  sub_234174264(a1, (unint64_t *)v23, (uint64_t *)v23, (uint64_t *)(a1 + 360));
  v8(a1, v23, v23, a3);
  sub_234174264(a1, (unint64_t *)v23, (uint64_t *)v23, (uint64_t *)(a1 + 432));
  if (sub_23418E484((char *)v25, (char *)v23, 8 * *(int *)(a1 + 328)))
  {
    sub_2341579B4(15, 0, 120, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 628);
    result = 0;
    if (*(_DWORD *)(a1 + 532))
    {
      *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
      v11 = *(_OWORD *)(a1 + 32);
      v12 = *(_OWORD *)(a1 + 48);
      v13 = *(_OWORD *)(a1 + 64);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 32) = v12;
      *(_OWORD *)(a2 + 48) = v13;
      *(_OWORD *)(a2 + 16) = v11;
      v14 = *(_OWORD *)(a1 + 120);
      v15 = *(_OWORD *)(a1 + 136);
      v16 = *(_OWORD *)(a1 + 104);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 152);
      *(_OWORD *)(a2 + 88) = v16;
      *(_OWORD *)(a2 + 120) = v15;
      *(_OWORD *)(a2 + 104) = v14;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 88);
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v17 = *(_OWORD *)(a3 + 16);
    v18 = *(_OWORD *)(a3 + 32);
    v19 = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 32) = v18;
    *(_OWORD *)(a2 + 48) = v19;
    *(_OWORD *)(a2 + 16) = v17;
    v21 = *(_OWORD *)(a4 + 32);
    v20 = *(_OWORD *)(a4 + 48);
    v22 = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a2 + 136) = v22;
    *(_OWORD *)(a2 + 120) = v20;
    *(_OWORD *)(a2 + 104) = v21;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)a4;
    return 1;
  }
  return result;
}

uint64_t sub_234174264(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD v9[4];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v5 = *(unint64_t **)(a1 + 320);
  v6 = *(int *)(a1 + 328);
  v7 = sub_2341617E0(a2, a3, a4, v6);
  return sub_2341638CC(a2, v7, v5, (unint64_t *)v9, v6);
}

uint64_t sub_2341742D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[5];
  _OWORD v24[4];
  uint64_t v25;
  _OWORD v26[4];
  uint64_t v27;

  if (sub_23417154C(a1, *(_QWORD *)a2))
  {
    v8 = 106;
    v9 = 649;
LABEL_10:
    sub_2341579B4(15, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", v9);
    return 0;
  }
  if (!a3 || !a4)
  {
    v8 = 67;
    v9 = 654;
    goto LABEL_10;
  }
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  if (sub_234174450((uint64_t *)a1, (uint64_t)v26, a3)
    && sub_234174450((uint64_t *)a1, (uint64_t)v24, a4)
    && sub_2341740CC(a1, (uint64_t)&v19, (uint64_t)v26, (uint64_t)v24))
  {
    v10 = v19;
    *(_OWORD *)(a2 + 24) = v20;
    v11 = v22;
    *(_OWORD *)(a2 + 40) = v21;
    *(_OWORD *)(a2 + 56) = v11;
    *(_QWORD *)(a2 + 72) = *(_QWORD *)&v23[0];
    *(_OWORD *)(a2 + 8) = v10;
    v12 = *(_OWORD *)((char *)v23 + 8);
    *(_QWORD *)(a2 + 144) = *((_QWORD *)&v23[4] + 1);
    v13 = *(_OWORD *)((char *)&v23[3] + 8);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)((char *)&v23[2] + 8);
    *(_OWORD *)(a2 + 128) = v13;
    v14 = *(_OWORD *)((char *)&v23[1] + 8);
    *(_OWORD *)(a2 + 80) = v12;
    *(_OWORD *)(a2 + 96) = v14;
    *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 160);
    v15 = *(_OWORD *)(a1 + 176);
    v16 = *(_OWORD *)(a1 + 192);
    v17 = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(a2 + 216) = *(_QWORD *)(a1 + 224);
    *(_OWORD *)(a2 + 200) = v17;
    *(_OWORD *)(a2 + 184) = v16;
    *(_OWORD *)(a2 + 168) = v15;
    return 1;
  }
  sub_23417453C(a1, a2 + 8);
  return 0;
}

uint64_t sub_234174450(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v10;
  char v11[66];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)(a1 + 40);
  v7 = sub_2341621D4(a1 + 40);
  if (!*(_DWORD *)(a3 + 16))
  {
    v8 = v7;
    if ((sub_234162A28(a3, v6) & 0x80000000) != 0)
    {
      v10 = (v8 + 7) >> 3;
      if (sub_234162840(v11, v10, a3))
        return (*(uint64_t (**)(uint64_t *, uint64_t, char *, unint64_t))(*a1 + 112))(a1, a2, v11, v10);
    }
  }
  sub_2341579B4(15, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/felem.c", 37);
  return 0;
}

double sub_23417453C(uint64_t a1, uint64_t a2)
{
  double result;

  if (!*(_DWORD *)(a1 + 532))
    return sub_234173870(a2);
  *(_QWORD *)&result = sub_234173944(a2, a1 + 16).n128_u64[0];
  return result;
}

uint64_t sub_234174560(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (sub_23417154C(a1, *a2)
    || sub_23417154C(a1, *a3)
    || sub_23417154C(a1, *a4))
  {
    sub_2341579B4(15, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 684);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a2 + 1, a3 + 1, a4 + 1);
    return 1;
  }
}

uint64_t sub_234174600(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (sub_23417154C(a1, *a2) || sub_23417154C(a1, *a3))
  {
    sub_2341579B4(15, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 695);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 24))(a1, a2 + 1, a3 + 1);
    return 1;
  }
}

uint64_t sub_234174688(uint64_t a1, uint64_t a2)
{
  if (sub_23417154C(a1, *(_QWORD *)a2))
  {
    sub_2341579B4(15, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 705);
    return 0;
  }
  else
  {
    sub_234177028(a1, (unint64_t *)(a2 + 80), (unint64_t *)(a2 + 80));
    return 1;
  }
}

unint64_t sub_2341746EC(uint64_t a1, uint64_t a2)
{
  return sub_234177028(a1, (unint64_t *)(a2 + 72), (unint64_t *)(a2 + 72));
}

uint64_t sub_2341746F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  int v7;
  __int16 v8;
  uint64_t v15;
  unint64_t **v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[4];
  uint64_t v40;

  if ((a4 != 0) != (a5 == 0) && (a3 | a5) != 0)
  {
    if (sub_23417154C(a1, *(_QWORD *)a2) || a4 && sub_23417154C(a1, *a4))
    {
      v7 = 106;
      v8 = 744;
      goto LABEL_8;
    }
    if (a6)
    {
      v17 = 0;
      if (!a3)
        goto LABEL_19;
    }
    else
    {
      v18 = sub_23418E2E4(0x30uLL);
      if (!v18)
      {
        v15 = 0;
        v17 = 0;
        goto LABEL_28;
      }
      a6 = (uint64_t)v18;
      *(_OWORD *)((char *)v18 + 26) = 0u;
      *v18 = 0u;
      v18[1] = 0u;
      v17 = (unint64_t **)v18;
      if (!a3)
        goto LABEL_19;
    }
    *(_QWORD *)&v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    if (!sub_234174944(a1, &v25, a3, a6) || !sub_2341749E8(a1, a2 + 8, (uint64_t)&v25))
    {
LABEL_24:
      v15 = 0;
LABEL_28:
      sub_234162D80(v17);
      return v15;
    }
LABEL_19:
    if (!a5)
    {
LABEL_27:
      v15 = 1;
      goto LABEL_28;
    }
    v40 = 0;
    memset(v39, 0, sizeof(v39));
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    if (sub_234174944(a1, v39, a5, a6)
      && sub_234171624(a1, (uint64_t)&v25, (uint64_t)(a4 + 1), (uint64_t)v39))
    {
      if (a3)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 16))(a1, a2 + 8, a2 + 8, &v25);
      }
      else
      {
        v19 = v36;
        *(_OWORD *)(a2 + 168) = v35;
        *(_OWORD *)(a2 + 184) = v19;
        *(_OWORD *)(a2 + 200) = v37;
        v20 = v32;
        *(_OWORD *)(a2 + 104) = v31;
        *(_OWORD *)(a2 + 120) = v20;
        v21 = v34;
        *(_OWORD *)(a2 + 136) = v33;
        *(_OWORD *)(a2 + 152) = v21;
        v22 = v28;
        *(_OWORD *)(a2 + 40) = v27;
        *(_OWORD *)(a2 + 56) = v22;
        v23 = v30;
        *(_OWORD *)(a2 + 72) = v29;
        *(_OWORD *)(a2 + 88) = v23;
        v24 = v26;
        *(_OWORD *)(a2 + 8) = v25;
        *(_QWORD *)(a2 + 216) = v38;
        *(_OWORD *)(a2 + 24) = v24;
      }
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  v7 = 67;
  v8 = 738;
LABEL_8:
  sub_2341579B4(15, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", v8);
  return 0;
}

uint64_t sub_234174944(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (sub_234171D90(a1, a2, a3))
    return 1;
  sub_234157348();
  sub_234162DC8((_QWORD *)a4);
  result = (uint64_t)sub_234162E68(a4);
  if (result)
  {
    v9 = result;
    result = sub_2341637E4(result, a3, a1 + 256, a4);
    if ((_DWORD)result)
      result = sub_234171D90(a1, a2, v9);
  }
  if (!*(_BYTE *)(a4 + 40))
  {
    v10 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v11;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v10 + 8 * v11);
  }
  return result;
}

uint64_t sub_2341749E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int16 v7;

  if (a3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (sub_234173B7C(a1, a2))
      return 1;
    v6 = 68;
    v7 = 867;
  }
  else
  {
    v6 = 67;
    v7 = 856;
  }
  sub_2341579B4(15, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", v7);
  return 0;
}

uint64_t sub_234174A70(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 64);
  if (v1)
    return v1();
  sub_2341579B4(15, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 826);
  return 0;
}

uint64_t sub_234174AB4(uint64_t a1, uint64_t a2)
{
  void (*v2)(void);
  int v6;
  __int16 v7;

  v2 = *(void (**)(void))(*(_QWORD *)a1 + 48);
  if (v2)
  {
    v2();
    if (sub_234173B7C(a1, a2))
      return 1;
    v6 = 68;
    v7 = 889;
  }
  else
  {
    v6 = 66;
    v7 = 880;
  }
  sub_2341579B4(15, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", v7);
  return 0;
}

uint64_t sub_234174B38(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 72);
  if (v1)
    return v1();
  sub_2341579B4(15, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", 899);
  return 0;
}

uint64_t sub_234174B7C(uint64_t a1, uint64_t a2)
{
  void (*v2)(void);
  int v6;
  __int16 v7;

  v2 = *(void (**)(void))(*(_QWORD *)a1 + 80);
  if (v2)
  {
    v2();
    if (sub_234173B7C(a1, a2))
      return 1;
    v6 = 68;
    v7 = 921;
  }
  else
  {
    v6 = 66;
    v7 = 912;
  }
  sub_2341579B4(15, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec.c", v7);
  return 0;
}

uint64_t sub_234174C00(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(int *)(result + 328);
  if ((_DWORD)v5)
  {
    v6 = ~a3;
    v7 = a4;
    v8 = a5;
    v9 = a2;
    do
    {
      v11 = *v7++;
      v10 = v11;
      v12 = *v8++;
      *v9++ = v12 & v6 | v10 & a3;
      --v5;
    }
    while (v5);
    v13 = *(int *)(result + 328);
    if ((_DWORD)v13)
    {
      v14 = a2 + 9;
      v15 = a4 + 9;
      v16 = a5 + 9;
      do
      {
        v18 = *v15++;
        v17 = v18;
        v19 = *v16++;
        *v14++ = v19 & v6 | v17 & a3;
        --v13;
      }
      while (v13);
      v20 = *(int *)(result + 328);
      if ((_DWORD)v20)
      {
        v21 = a2 + 18;
        v22 = a4 + 18;
        v23 = a5 + 18;
        do
        {
          v25 = *v22++;
          v24 = v25;
          v26 = *v23++;
          *v21++ = v26 & v6 | v24 & a3;
          --v20;
        }
        while (v20);
      }
    }
  }
  return result;
}

uint64_t sub_234174CA4(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(int *)(result + 328);
  if ((_DWORD)v5)
  {
    do
    {
      v7 = *a4++;
      v6 = v7;
      v8 = *a5++;
      *a2++ = v8 & ~a3 | v6 & a3;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_234174CD4(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(int *)(result + 328);
  if ((_DWORD)v5)
  {
    v6 = ~a3;
    v7 = a4;
    v8 = a5;
    v9 = a2;
    do
    {
      v11 = *v7++;
      v10 = v11;
      v12 = *v8++;
      *v9++ = v12 & v6 | v10 & a3;
      --v5;
    }
    while (v5);
    v13 = *(int *)(result + 328);
    if ((_DWORD)v13)
    {
      v14 = a2 + 9;
      v15 = a4 + 9;
      v16 = a5 + 9;
      do
      {
        v18 = *v15++;
        v17 = v18;
        v19 = *v16++;
        *v14++ = v19 & v6 | v17 & a3;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t sub_234174D44(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t result;

  v10 = 31;
  do
  {
    result = sub_234174CD4(a1, a2, a3, a4, a5);
    a5 += 18;
    a4 += 18;
    a2 += 18;
    --v10;
  }
  while (v10);
  return result;
}

uint64_t sub_234174DB0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  _OWORD v7[5];
  unsigned __int8 v8[66];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  result = sub_2341716AC((uint64_t *)a1, (uint64_t)v8, &v6, 0x42uLL, a3);
  if ((_DWORD)result)
  {
    memset(v7, 0, sizeof(v7));
    sub_234162544((unint64_t *)v7, *(int *)(a1 + 264) + 1, v8, v6);
    sub_234163860(a2, (unint64_t *)v7, *((_QWORD *)v7 + *(int *)(a1 + 264)), *(unint64_t **)(a1 + 256), *(int *)(a1 + 264));
    return 1;
  }
  return result;
}

uint64_t sub_234174E70(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t sub_234174E7C()
{
  return 305397760;
}

uint64_t sub_234174E84()
{
  return 406;
}

void sub_234174E8C(uint64_t a1, int a2)
{
  if (a2 != 4)
    abort();
}

_QWORD *sub_234174EA4()
{
  return sub_234174EAC(0);
}

_QWORD *sub_234174EAC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(_QWORD *);
  uint64_t v8;
  uint64_t v9;

  v2 = sub_23418E344(0x38uLL);
  v4 = v2;
  if (!v2)
    return v4;
  if (!a1)
  {
    v5 = v2[5];
    if (!v5)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = sub_2341414C0(a1);
  v4[5] = v5;
  if (v5)
LABEL_4:
    nullsub_13(v5, v3);
LABEL_5:
  *(_QWORD *)((char *)v4 + 28) = 0x100000004;
  sub_23415F254(v4 + 6);
  v6 = v4[5];
  if (v6)
  {
    v7 = *(unsigned int (**)(_QWORD *))(v6 + 16);
    if (v7)
    {
      if (!v7(v4))
      {
        sub_23415F25C((uint64_t)&unk_256158110, (uint64_t)v4, (unint64_t **)v4 + 6);
        v9 = v4[5];
        if (v9)
          nullsub_13(v9, v8);
        sub_23418E3C4(v4);
        return 0;
      }
    }
  }
  return v4;
}

_QWORD *sub_234174F60(int a1)
{
  _QWORD *v2;
  uint64_t *v3;

  v2 = sub_234174EAC(0);
  if (v2)
  {
    v3 = sub_234173224(a1);
    *v2 = v3;
    if (!v3)
    {
      sub_234174FAC((uint64_t)v2);
      return 0;
    }
  }
  return v2;
}

void sub_234174FAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  if (a1 && sub_234193960((unsigned int *)(a1 + 32)))
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      v4 = *(void (**)(uint64_t))(v3 + 24);
      if (v4)
      {
        v4(a1);
        v3 = *(_QWORD *)(a1 + 40);
      }
      nullsub_13(v3, v2);
    }
    sub_23415F25C((uint64_t)&unk_256158110, a1, (unint64_t **)(a1 + 48));
    sub_234172FBC(*(_QWORD *)a1);
    sub_2341738A4(*(uint64_t **)(a1 + 8));
    sub_23418E3C4(*(_QWORD **)(a1 + 16));
    sub_23418E3C4((_QWORD *)a1);
  }
}

uint64_t sub_234175034(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  if (!a1)
  {
    sub_2341579B4(15, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", 177);
    return 0;
  }
  v2 = sub_234174EAC(0);
  v3 = (uint64_t)v2;
  if (v2)
  {
    if (!*(_QWORD *)a1 || sub_2341750E4(v2, *(_QWORD *)a1))
    {
      v4 = *(uint64_t **)(a1 + 8);
      if (!v4 || sub_234175164(v3, v4))
      {
        v5 = *(_QWORD *)(a1 + 16);
        if (!v5 || sub_2341751FC((uint64_t *)v3, v5))
        {
          *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 28);
          return v3;
        }
      }
    }
    sub_234174FAC(v3);
    return 0;
  }
  return v3;
}

BOOL sub_2341750E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *a1;
  if (v4)
  {
    if (sub_23417154C(v4, a2))
    {
      sub_2341579B4(15, 0, 130, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", 216);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (a2 && !*(_DWORD *)(a2 + 512))
      sub_234193914((unsigned int *)(a2 + 540));
    *a1 = a2;
    return a2 != 0;
  }
}

BOOL sub_234175164(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v5;
  __int16 v6;
  uint64_t *v8;

  v3 = *(_QWORD *)a1;
  if (!v3)
  {
    v5 = 114;
    v6 = 264;
    goto LABEL_6;
  }
  if (a2 && sub_23417154C(v3, *a2))
  {
    v5 = 130;
    v6 = 269;
LABEL_6:
    sub_2341579B4(15, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", v6);
    return 0;
  }
  sub_2341738A4(*(uint64_t **)(a1 + 8));
  v8 = sub_2341739B0(a2, *(_QWORD *)a1);
  *(_QWORD *)(a1 + 8) = v8;
  return v8 != 0;
}

uint64_t sub_2341751FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;

  v2 = *a1;
  if (*a1)
  {
    result = (uint64_t)sub_23418E344(0x60uLL);
    if (!result)
      return result;
    v6 = (_QWORD *)result;
    v7 = (uint64_t *)(result + 24);
    *(_QWORD *)result = result + 24;
    *(_DWORD *)(result + 8) = *(_DWORD *)(v2 + 264);
    *(_DWORD *)(result + 12) = *(_DWORD *)(v2 + 264);
    *(_DWORD *)(result + 20) = 2;
    if (sub_234171D90(*a1, (void *)(result + 24), a2))
    {
      v8 = *(unsigned int *)(*a1 + 264);
      if ((int)v8 < 1)
      {
        v11 = 1;
      }
      else
      {
        v9 = 0;
        do
        {
          v10 = *v7++;
          v9 |= v10;
          --v8;
        }
        while (v8);
        v11 = v9 == 0;
      }
      if (!v11)
      {
        sub_23418E3C4((_QWORD *)a1[2]);
        a1[2] = (uint64_t)v6;
        return 1;
      }
    }
    sub_2341579B4(15, 0, 113, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", 249);
    sub_23418E3C4(v6);
  }
  else
  {
    sub_2341579B4(15, 0, 114, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", 236);
  }
  return 0;
}

uint64_t sub_23417530C(uint64_t a1)
{
  sub_234193914((unsigned int *)(a1 + 32));
  return 1;
}

uint64_t sub_234175328(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    return *(_DWORD *)(v1 + 48) & 1;
  else
    return 0;
}

BOOL sub_234175344(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 264);
  if ((int)v2 < 1)
    return 1;
  v3 = 0;
  do
  {
    v4 = *a2++;
    v3 |= v4;
    --v2;
  }
  while (v2);
  return v3 == 0;
}

uint64_t sub_234175378(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_234175380(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  __int16 v5;
  uint64_t v7;
  _OWORD v8[13];
  uint64_t v9;

  if (a1 && (v2 = *(_QWORD *)a1) != 0 && (v3 = *(uint64_t **)(a1 + 8)) != 0)
  {
    if (sub_234173A60(v2, v3))
    {
      v4 = 119;
      v5 = 299;
    }
    else
    {
      if (sub_234173B1C(*(_QWORD *)a1, *(uint64_t **)(a1 + 8)))
      {
        v7 = *(_QWORD *)(a1 + 16);
        if (v7)
        {
          v9 = 0;
          memset(v8, 0, sizeof(v8));
          if (!sub_2341749E8(*(_QWORD *)a1, (uint64_t)v8, v7 + 24))
          {
            v4 = 15;
            v5 = 317;
            goto LABEL_7;
          }
          if (!sub_234173360(*(_QWORD *)a1, (uint64_t)v8, *(_QWORD *)(a1 + 8) + 8))
          {
            v4 = 113;
            v5 = 324;
            goto LABEL_7;
          }
        }
        return 1;
      }
      v4 = 120;
      v5 = 305;
    }
  }
  else
  {
    v4 = 67;
    v5 = 294;
  }
LABEL_7:
  sub_2341579B4(15, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", v5);
  return 0;
}

uint64_t sub_2341754B8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  __int16 v7;
  unint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[5];
  if (v2 && (*(_BYTE *)(v2 + 48) & 1) != 0)
  {
    v7 = 338;
  }
  else
  {
    result = sub_234175380((uint64_t)a1);
    if (!(_DWORD)result)
      return result;
    if (!a1[2])
      return 1;
    v8[0] = 0;
    v8[1] = 0;
    v4 = sub_234172360(v8, 0x10uLL, a1);
    if (v4)
    {
      v5 = v4;
      v6 = sub_234171B00((unsigned __int8 *)v8, 0x10uLL, v4, (uint64_t)a1);
      sub_2341540D8(v5);
      if (v6)
        return 1;
    }
    else
    {
      sub_2341540D8(0);
    }
    v7 = 356;
  }
  sub_2341579B4(15, 0, 132, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", v7);
  return 0;
}

uint64_t sub_2341755B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (a1 && a3 && a2 && (v6 = *a1) != 0)
  {
    v7 = sub_2341737FC(v6);
    if (v7 && sub_2341742D4(*a1, (uint64_t)v7, a2, a3) && sub_234175164((uint64_t)a1, v7))
      v8 = sub_234175380((uint64_t)a1);
    else
      v8 = 0;
    sub_2341738A4(v7);
  }
  else
  {
    sub_2341579B4(15, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", 378);
    return 0;
  }
  return v8;
}

BOOL sub_23417566C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v9;
  _BOOL8 v10;

  v5 = *a1;
  if (v5)
  {
    v9 = sub_2341737FC(v5);
    v10 = v9 && sub_23417571C(*a1, (uint64_t)v9, a2, a3, a4) && sub_234175164((uint64_t)a1, v9);
    sub_2341738A4(v9);
  }
  else
  {
    sub_2341579B4(15, 0, 114, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", 399);
    return 0;
  }
  return v10;
}

uint64_t sub_23417571C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  __int16 v11;
  _BOOL8 v12;
  int v14;
  int v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t **v27;
  _OWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[5];

  if (sub_23417154C(a1, *(_QWORD *)a2))
  {
    v10 = 106;
    v11 = 205;
LABEL_3:
    sub_2341579B4(15, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/oct.c", v11);
    return 0;
  }
  if (!a4)
  {
    v10 = 100;
    v11 = 140;
    goto LABEL_3;
  }
  v14 = *a3;
  if (v14 == 4)
  {
    v36 = 0u;
    memset(v37, 0, sizeof(v37));
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    v15 = sub_23417726C((uint64_t *)a1, (uint64_t)&v33, a3, a4);
    v16 = (_OWORD *)(a2 + 8);
    if (v15)
    {
      v17 = v36;
      *(_OWORD *)(a2 + 40) = v35;
      *(_OWORD *)(a2 + 56) = v17;
      *(_QWORD *)(a2 + 72) = *(_QWORD *)&v37[0];
      v18 = v34;
      *v16 = v33;
      *(_OWORD *)(a2 + 24) = v18;
      v19 = *(_OWORD *)((char *)v37 + 8);
      *(_QWORD *)(a2 + 144) = *((_QWORD *)&v37[4] + 1);
      v20 = *(_OWORD *)((char *)&v37[3] + 8);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)((char *)&v37[2] + 8);
      *(_OWORD *)(a2 + 128) = v20;
      v21 = *(_OWORD *)((char *)&v37[1] + 8);
      *(_OWORD *)(a2 + 80) = v19;
      *(_OWORD *)(a2 + 96) = v21;
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 160);
      v22 = *(_OWORD *)(a1 + 176);
      v23 = *(_OWORD *)(a1 + 192);
      v24 = *(_OWORD *)(a1 + 208);
      *(_QWORD *)(a2 + 216) = *(_QWORD *)(a1 + 224);
      *(_OWORD *)(a2 + 200) = v24;
      *(_OWORD *)(a2 + 184) = v23;
      *(_OWORD *)(a2 + 168) = v22;
      return 1;
    }
    sub_23417453C(a1, (uint64_t)v16);
    return 0;
  }
  v25 = (sub_2341621D4((uint64_t *)(a1 + 320)) + 7) >> 3;
  if ((v14 & 0xFE) != 2 || v25 + 1 != a4)
  {
    v10 = 109;
    v11 = 162;
    goto LABEL_3;
  }
  if (a5)
  {
    v27 = 0;
  }
  else
  {
    v28 = sub_23418E2E4(0x30uLL);
    if (!v28)
      return 0;
    a5 = (uint64_t)v28;
    *(_OWORD *)((char *)v28 + 26) = 0u;
    *v28 = 0u;
    v28[1] = 0u;
    v27 = (unint64_t **)v28;
  }
  sub_234162DC8((_QWORD *)a5);
  v29 = sub_234162E68(a5);
  if (v29)
  {
    v30 = (uint64_t)v29;
    if (sub_2341625C8(a3 + 1, v25, v29))
    {
      if ((sub_234162948(*(uint64_t **)v30, *(int *)(v30 + 8), *(uint64_t **)(a1 + 320), *(int *)(a1 + 328)) & 0x80000000) != 0)
      {
        v12 = sub_2341774A0(a1, (uint64_t *)a2, v30, v14 & 1, a5) != 0;
        goto LABEL_26;
      }
      sub_2341579B4(15, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/oct.c", 186);
    }
  }
  v12 = 0;
LABEL_26:
  if (!*(_BYTE *)(a5 + 40))
  {
    v31 = *(_QWORD *)(a5 + 8);
    v32 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v32;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v31 + 8 * v32);
  }
  sub_234162D80(v27);
  return v12;
}

char *sub_234175984(uint64_t *a1, int a2, char **a3)
{
  uint64_t *v5;
  uint64_t v6;

  if (a1)
  {
    v5 = (uint64_t *)a1[1];
    if (v5)
    {
      v6 = *a1;
      if (v6)
        return sub_2341759DC(v6, v5, a2, a3);
    }
  }
  sub_2341579B4(15, 0, 114, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", 414);
  return 0;
}

char *sub_2341759DC(uint64_t a1, uint64_t *a2, int a3, char **a4)
{
  char *result;
  unint64_t v9;
  char *v10;

  *a4 = 0;
  result = (char *)sub_234177370(a1, a2, a3, 0, 0);
  if (result)
  {
    v9 = (unint64_t)result;
    result = (char *)sub_23418E2E4((unint64_t)result);
    if (result)
    {
      v10 = result;
      result = (char *)sub_234177370(a1, a2, a3, result, v9);
      if (result)
      {
        *a4 = v10;
      }
      else
      {
        sub_23418E3C4(v10);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_234175A68(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  __int16 v9;

  if (!*a1)
  {
    v8 = 114;
    v9 = 423;
LABEL_7:
    sub_2341579B4(15, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", v9);
    return 0;
  }
  if ((sub_2341621D4((uint64_t *)(*a1 + 256)) + 7) >> 3 != a3)
  {
    v8 = 128;
    v9 = 428;
    goto LABEL_7;
  }
  v6 = sub_2341625C8(a2, a3, 0);
  if (v6)
    v7 = sub_2341751FC(a1, (uint64_t)v6);
  else
    v7 = 0;
  sub_234161FC4((_QWORD **)v6);
  return v7;
}

unint64_t sub_234175B30(uint64_t *a1, char *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  unint64_t v8;
  int v9;
  __int16 v10;

  v3 = *a1;
  if (!*a1 || (v4 = a1[2]) == 0)
  {
    v9 = 114;
    v10 = 441;
LABEL_7:
    sub_2341579B4(15, 0, v9, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", v10);
    return 0;
  }
  v7 = sub_2341621D4((uint64_t *)(v3 + 256)) + 7;
  v8 = v7 >> 3;
  if (a2)
  {
    if (v8 <= a3)
    {
      sub_234162720(a2, v7 >> 3, (char *)(v4 + 24), *(int *)(v3 + 264));
      return v8;
    }
    v9 = 100;
    v10 = 451;
    goto LABEL_7;
  }
  return v8;
}

void sub_234175BE4(uint64_t a1, char *a2, unint64_t *a3, char *a4)
{
  unint64_t v8;

  v8 = (sub_2341621D4((uint64_t *)(a1 + 256)) + 7) >> 3;
  sub_234162720(a2, v8, a4, *(int *)(a1 + 264));
  *a3 = v8;
}

char *sub_234175C44(uint64_t *a1, char **a2)
{
  char *result;
  unint64_t v5;
  char *v6;

  *a2 = 0;
  result = (char *)sub_234175B30(a1, 0, 0);
  if (result)
  {
    v5 = (unint64_t)result;
    result = (char *)sub_23418E2E4((unint64_t)result);
    if (result)
    {
      v6 = result;
      result = (char *)sub_234175B30(a1, result, v5);
      if (result)
      {
        *a2 = v6;
      }
      else
      {
        sub_23418E3C4(v6);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_234175CB8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  char *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;

  if (!a1 || (v2 = *(_QWORD *)a1) == 0)
  {
    v3 = 67;
    v4 = 485;
    goto LABEL_6;
  }
  if ((int)sub_2341621D4((uint64_t *)(v2 + 256)) <= 159)
  {
    v3 = 112;
    v4 = 491;
LABEL_6:
    sub_2341579B4(15, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", v4);
    return 0;
  }
  v6 = (char *)sub_23418E344(0x60uLL);
  v7 = v6;
  if (v6)
  {
    *(_QWORD *)v6 = v6 + 24;
    *((_DWORD *)v6 + 2) = *(_DWORD *)(v2 + 264);
    *((_DWORD *)v6 + 3) = *(_DWORD *)(v2 + 264);
    *((_DWORD *)v6 + 5) = 2;
  }
  v8 = sub_2341737FC(*(_QWORD *)a1);
  v9 = v8;
  if (!v7
    || !v8
    || !sub_23416BF24(v7 + 24, 1uLL, *(unint64_t **)(*(_QWORD *)a1 + 256), *(int *)(*(_QWORD *)a1 + 264), (uint64_t)&unk_2342E2388)|| !sub_2341749E8(*(_QWORD *)a1, (uint64_t)(v9 + 1), (uint64_t)(v7 + 24)))
  {
    sub_2341738A4(v9);
    sub_23418E3C4(v7);
    return 0;
  }
  sub_23418E3C4(*(_QWORD **)(a1 + 16));
  *(_QWORD *)(a1 + 16) = v7;
  sub_2341738A4(*(uint64_t **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = v9;
  return 1;
}

uint64_t sub_234175DE8(uint64_t a1)
{
  uint64_t result;

  if (a1 && *(_QWORD *)a1)
  {
    if (sub_234175CB8(a1) && sub_2341754B8((uint64_t *)a1))
    {
      return 1;
    }
    else
    {
      sub_2341738A4(*(uint64_t **)(a1 + 8));
      sub_23418E3C4(*(_QWORD **)(a1 + 16));
      result = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  else
  {
    sub_2341579B4(15, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_key.c", 525);
    return 0;
  }
  return result;
}

uint64_t sub_234175E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23415F0A8((uint64_t)&unk_256158110, a1, a2, a5);
}

uint64_t sub_234175E84(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return sub_23415F178((unint64_t **)(a1 + 48), a2, a3);
}

unint64_t *sub_234175E8C(uint64_t a1, unsigned int a2)
{
  return sub_23415F204((unint64_t **)(a1 + 48), a2);
}

void sub_234175E94(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  sub_234165E1C(a2, a3, a4, *(int *)(a1 + 328), a1 + 296);
}

void sub_234175EB0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_234165E1C(a2, a3, a3, *(int *)(a1 + 328), a1 + 296);
}

void sub_234175EC4(uint64_t a1, char *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *v7;
  unint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = (uint64_t *)(a1 + 320);
  sub_234165D40((unint64_t *)v9, *(int *)(a1 + 328), a4, *(int *)(a1 + 328), a1 + 296);
  v8 = (sub_2341621D4(v7) + 7) >> 3;
  sub_234162720(a2, v8, (char *)v9, *(int *)(a1 + 328));
  *a3 = v8;
}

void sub_234175F4C(uint64_t a1, char *a2, unint64_t *a3, char *a4)
{
  unint64_t v8;

  v8 = (sub_2341621D4((uint64_t *)(a1 + 320)) + 7) >> 3;
  sub_234162720(a2, v8, a4, *(int *)(a1 + 328));
  *a3 = v8;
}

uint64_t sub_234175FAC(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t result;

  result = sub_234175FF0(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    sub_234165E1C(a2, a2, *(unint64_t **)(a1 + 296), *(int *)(a1 + 328), a1 + 296);
    return 1;
  }
  return result;
}

uint64_t sub_234175FF0(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unint64_t a4)
{
  __int16 v8;

  if ((sub_2341621D4((uint64_t *)(a1 + 320)) + 7) >> 3 != a4)
  {
    v8 = 324;
    goto LABEL_5;
  }
  sub_234162544(a2, *(int *)(a1 + 328), a3, a4);
  if ((sub_234162948((uint64_t *)a2, *(int *)(a1 + 328), *(uint64_t **)(a1 + 320), *(int *)(a1 + 328)) & 0x80000000) == 0)
  {
    v8 = 331;
LABEL_5:
    sub_2341579B4(15, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/simple.c", v8);
    return 0;
  }
  return 1;
}

void sub_234176094(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  v6 = a1 + 296;
  sub_234165D40(a2, *(int *)(a1 + 328), a3, a4, a1 + 296);
  sub_234165E1C(a2, a2, *(unint64_t **)(a1 + 296), *(int *)(a1 + 328), v6);
  sub_234165E1C(a2, a2, *(unint64_t **)(a1 + 296), *(int *)(a1 + 328), v6);
}

void sub_2341760FC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  sub_2341659D8(a2, a3, *(int *)(a1 + 328), a4, a5, a1 + 296);
}

uint64_t sub_234176114(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v4;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  _OWORD v67[4];
  uint64_t v68;
  _OWORD v69[4];
  uint64_t v70;
  _OWORD v71[4];
  uint64_t v72;
  _OWORD v73[4];
  uint64_t v74;
  _OWORD v75[4];
  uint64_t v76;
  _OWORD v77[4];
  uint64_t v78;
  _OWORD v79[4];
  uint64_t v80;
  _OWORD v81[4];
  uint64_t v82;
  _OWORD v83[4];
  uint64_t v84;
  _OWORD v85[4];
  uint64_t v86;
  _OWORD v87[4];
  uint64_t v88;
  _OWORD v89[4];
  uint64_t v90;
  _OWORD v91[4];
  uint64_t v92;
  _OWORD v93[4];
  uint64_t v94;
  _OWORD v95[4];
  uint64_t v96;
  _OWORD v97[4];
  uint64_t v98;
  _OWORD v99[4];
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v4 = a3;
  if (a3 == a4)
    return sub_23417684C(a1, a2, a3);
  v100 = 0;
  memset(v99, 0, sizeof(v99));
  v98 = 0;
  memset(v97, 0, sizeof(v97));
  v96 = 0;
  memset(v95, 0, sizeof(v95));
  v8 = (uint64_t *)(a3 + 18);
  v9 = *(_DWORD *)(a1 + 328);
  if (v9 <= 0)
  {
    v19 = 0;
    v20 = 0;
    v15 = a4 + 18;
  }
  else
  {
    v10 = 0;
    v11 = (uint64_t *)(a3 + 18);
    v12 = *(unsigned int *)(a1 + 328);
    do
    {
      v13 = *v11++;
      v10 |= v13;
      --v12;
    }
    while (v12);
    v14 = 0;
    v15 = a4 + 18;
    v16 = (uint64_t *)(a4 + 18);
    v17 = *(unsigned int *)(a1 + 328);
    do
    {
      v18 = *v16++;
      v14 |= v18;
      --v17;
    }
    while (v17);
    if (v10)
      v19 = -1;
    else
      v19 = 0;
    if (v14)
      v20 = -1;
    else
      v20 = 0;
  }
  v94 = 0;
  memset(v93, 0, sizeof(v93));
  sub_234165E1C((unint64_t *)v93, a3 + 18, a3 + 18, v9, a1 + 296);
  v92 = 0;
  memset(v91, 0, sizeof(v91));
  sub_234165E1C((unint64_t *)v91, v15, v15, *(int *)(a1 + 328), a1 + 296);
  v90 = 0;
  memset(v89, 0, sizeof(v89));
  sub_234165E1C((unint64_t *)v89, v4, (unint64_t *)v91, *(int *)(a1 + 328), a1 + 296);
  v88 = 0;
  memset(v87, 0, sizeof(v87));
  sub_234174264(a1, (unint64_t *)v87, (uint64_t *)v4 + 18, (uint64_t *)v15);
  sub_234165E1C((unint64_t *)v87, (unint64_t *)v87, (unint64_t *)v87, *(int *)(a1 + 328), a1 + 296);
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  sub_23416393C((unint64_t *)v87, (unint64_t *)v87, (unint64_t *)v93, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  sub_23416393C((unint64_t *)v87, (unint64_t *)v87, (unint64_t *)v91, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  v86 = 0;
  memset(v85, 0, sizeof(v85));
  sub_234165E1C((unint64_t *)v85, v15, (unint64_t *)v91, *(int *)(a1 + 328), a1 + 296);
  v22 = (uint64_t *)(v4 + 9);
  sub_234165E1C((unint64_t *)v85, (unint64_t *)v85, v4 + 9, *(int *)(a1 + 328), a1 + 296);
  v84 = 0;
  memset(v83, 0, sizeof(v83));
  sub_234165E1C((unint64_t *)v83, a4, (unint64_t *)v93, *(int *)(a1 + 328), a1 + 296);
  v82 = 0;
  memset(v81, 0, sizeof(v81));
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  sub_23416393C((unint64_t *)v81, (unint64_t *)v83, (unint64_t *)v89, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  v23 = *(_DWORD *)(a1 + 328);
  v66 = a2;
  if (v23 < 1)
  {
    v28 = 0;
  }
  else
  {
    v24 = 0;
    v25 = (uint64_t *)v81;
    v26 = *(unsigned int *)(a1 + 328);
    do
    {
      v27 = *v25++;
      v24 |= v27;
      --v26;
    }
    while (v26);
    if (v24)
      v28 = -1;
    else
      v28 = 0;
  }
  sub_234165E1C((unint64_t *)v95, (unint64_t *)v81, (unint64_t *)v87, v23, a1 + 296);
  v80 = 0;
  memset(v79, 0, sizeof(v79));
  sub_234165E1C((unint64_t *)v79, v4 + 18, (unint64_t *)v93, *(int *)(a1 + 328), a1 + 296);
  v78 = 0;
  memset(v77, 0, sizeof(v77));
  v29 = (uint64_t *)(a4 + 9);
  sub_234165E1C((unint64_t *)v77, a4 + 9, (unint64_t *)v79, *(int *)(a1 + 328), a1 + 296);
  v76 = 0;
  memset(v75, 0, sizeof(v75));
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  sub_23416393C((unint64_t *)v75, (unint64_t *)v77, (unint64_t *)v85, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  sub_234174264(a1, (unint64_t *)v75, (uint64_t *)v75, (uint64_t *)v75);
  v30 = *(unsigned int *)(a1 + 328);
  if ((int)v30 < 1)
  {
    v34 = 0;
  }
  else
  {
    v31 = 0;
    v32 = (uint64_t *)v75;
    do
    {
      v33 = *v32++;
      v31 |= v33;
      --v30;
    }
    while (v30);
    if (v31)
      v34 = -1;
    else
      v34 = 0;
  }
  if ((v19 & ~(v34 | v28) & v20) != 0)
    return sub_23417684C(a1, v66, v4);
  v74 = 0;
  memset(v73, 0, sizeof(v73));
  sub_234174264(a1, (unint64_t *)v73, (uint64_t *)v81, (uint64_t *)v81);
  sub_234165E1C((unint64_t *)v73, (unint64_t *)v73, (unint64_t *)v73, *(int *)(a1 + 328), a1 + 296);
  v72 = 0;
  memset(v71, 0, sizeof(v71));
  sub_234165E1C((unint64_t *)v71, (unint64_t *)v81, (unint64_t *)v73, *(int *)(a1 + 328), a1 + 296);
  v70 = 0;
  memset(v69, 0, sizeof(v69));
  sub_234165E1C((unint64_t *)v69, (unint64_t *)v89, (unint64_t *)v73, *(int *)(a1 + 328), a1 + 296);
  sub_234165E1C((unint64_t *)v99, (unint64_t *)v75, (unint64_t *)v75, *(int *)(a1 + 328), a1 + 296);
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  sub_23416393C((unint64_t *)v99, (unint64_t *)v99, (unint64_t *)v71, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  sub_23416393C((unint64_t *)v99, (unint64_t *)v99, (unint64_t *)v69, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  sub_23416393C((unint64_t *)v99, (unint64_t *)v99, (unint64_t *)v69, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  sub_23416393C((unint64_t *)v97, (unint64_t *)v69, (unint64_t *)v99, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  sub_234165E1C((unint64_t *)v97, (unint64_t *)v97, (unint64_t *)v75, *(int *)(a1 + 328), a1 + 296);
  v68 = 0;
  memset(v67, 0, sizeof(v67));
  sub_234165E1C((unint64_t *)v67, (unint64_t *)v85, (unint64_t *)v71, *(int *)(a1 + 328), a1 + 296);
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  sub_23416393C((unint64_t *)v97, (unint64_t *)v97, (unint64_t *)v67, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  result = sub_23416393C((unint64_t *)v97, (unint64_t *)v97, (unint64_t *)v67, *(uint64_t **)(a1 + 320), (uint64_t *)&v101, *(int *)(a1 + 328));
  v35 = *(int *)(a1 + 328);
  if ((_DWORD)v35)
  {
    v36 = ~v19;
    v37 = (uint64_t *)v99;
    v38 = a4;
    v39 = *(int *)(a1 + 328);
    do
    {
      v40 = *v38++;
      *v37 = v40 & v36 | *v37 & v19;
      ++v37;
      --v39;
    }
    while (v39);
    v41 = ~v20;
    v42 = (uint64_t *)v99;
    v43 = v66;
    do
    {
      v45 = *v42++;
      v44 = v45;
      v46 = *v4++;
      *v43++ = v46 & v41 | v44 & v20;
      --v35;
    }
    while (v35);
    v47 = *(int *)(a1 + 328);
    if ((_DWORD)v47)
    {
      v48 = (uint64_t *)v97;
      v49 = *(int *)(a1 + 328);
      do
      {
        v50 = *v29++;
        *v48 = v50 & v36 | *v48 & v19;
        ++v48;
        --v49;
      }
      while (v49);
      v51 = (uint64_t *)(v66 + 9);
      v52 = (uint64_t *)v97;
      do
      {
        v54 = *v52++;
        v53 = v54;
        v55 = *v22++;
        *v51++ = v55 & v41 | v53 & v20;
        --v47;
      }
      while (v47);
      v56 = *(int *)(a1 + 328);
      if ((_DWORD)v56)
      {
        v57 = (uint64_t *)(a4 + 18);
        v58 = (uint64_t *)v95;
        v59 = *(int *)(a1 + 328);
        do
        {
          v60 = *v57++;
          *v58 = v60 & v36 | *v58 & v19;
          ++v58;
          --v59;
        }
        while (v59);
        v61 = (uint64_t *)(v66 + 18);
        v62 = (uint64_t *)v95;
        do
        {
          v64 = *v62++;
          v63 = v64;
          v65 = *v8++;
          *v61++ = v65 & v41 | v63 & v20;
          --v56;
        }
        while (v56);
      }
    }
  }
  return result;
}

uint64_t sub_23417684C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  _OWORD v11[4];
  uint64_t v12;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  if (*(_DWORD *)(a1 + 528))
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    sub_234165E1C((unint64_t *)&v40, a3 + 18, a3 + 18, *(int *)(a1 + 328), a1 + 296);
    sub_234165E1C((unint64_t *)&v35, a3 + 9, a3 + 9, *(int *)(a1 + 328), a1 + 296);
    sub_234165E1C((unint64_t *)&v30, a3, (unint64_t *)&v35, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C((unint64_t *)&v25, a3, (unint64_t *)&v40, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    sub_234174264(a1, (unint64_t *)&v20, (uint64_t *)a3, (uint64_t *)&v40);
    sub_234174264(a1, (unint64_t *)&v15, (uint64_t *)&v20, (uint64_t *)&v20);
    sub_234174264(a1, (unint64_t *)&v20, (uint64_t *)&v20, (uint64_t *)&v15);
    sub_234165E1C((unint64_t *)v13, (unint64_t *)&v25, (unint64_t *)&v20, *(int *)(a1 + 328), a1 + 296);
    sub_234165E1C(a2, (unint64_t *)v13, (unint64_t *)v13, *(int *)(a1 + 328), a1 + 296);
    sub_234174264(a1, (unint64_t *)v11, (uint64_t *)&v30, (uint64_t *)&v30);
    sub_234174264(a1, (unint64_t *)v11, (uint64_t *)v11, (uint64_t *)v11);
    sub_234174264(a1, (unint64_t *)&v15, (uint64_t *)v11, (uint64_t *)v11);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C(a2, a2, (unint64_t *)&v15, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    sub_234174264(a1, (unint64_t *)&v40, (uint64_t *)&v35, (uint64_t *)&v40);
    sub_234174264(a1, (unint64_t *)&v25, (uint64_t *)a3 + 9, (uint64_t *)a3 + 18);
    sub_234165E1C(a2 + 18, (unint64_t *)&v25, (unint64_t *)&v25, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C(a2 + 18, a2 + 18, (unint64_t *)&v40, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    v6 = a2 + 9;
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C(a2 + 9, (unint64_t *)v11, a2, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    sub_234174264(a1, (unint64_t *)&v35, (uint64_t *)&v35, (uint64_t *)&v35);
    sub_234165E1C((unint64_t *)&v35, (unint64_t *)&v35, (unint64_t *)&v35, *(int *)(a1 + 328), a1 + 296);
    sub_234165E1C(a2 + 9, (unint64_t *)v13, a2 + 9, *(int *)(a1 + 328), a1 + 296);
    sub_234174264(a1, (unint64_t *)&v35, (uint64_t *)&v35, (uint64_t *)&v35);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v7 = *(uint64_t **)(a1 + 320);
    v8 = *(int *)(a1 + 328);
    v9 = (unint64_t *)&v35;
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    sub_234165E1C((unint64_t *)&v40, a3, a3, *(int *)(a1 + 328), a1 + 296);
    sub_234165E1C((unint64_t *)&v35, a3 + 9, a3 + 9, *(int *)(a1 + 328), a1 + 296);
    sub_234165E1C((unint64_t *)&v30, (unint64_t *)&v35, (unint64_t *)&v35, *(int *)(a1 + 328), a1 + 296);
    sub_234165E1C((unint64_t *)&v25, a3 + 18, a3 + 18, *(int *)(a1 + 328), a1 + 296);
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    sub_234174264(a1, (unint64_t *)&v20, (uint64_t *)a3, (uint64_t *)&v35);
    sub_234165E1C((unint64_t *)&v20, (unint64_t *)&v20, (unint64_t *)&v20, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C((unint64_t *)&v20, (unint64_t *)&v20, (unint64_t *)&v40, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C((unint64_t *)&v20, (unint64_t *)&v20, (unint64_t *)&v30, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    sub_234174264(a1, (unint64_t *)&v20, (uint64_t *)&v20, (uint64_t *)&v20);
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    sub_234165E1C((unint64_t *)&v15, (unint64_t *)&v25, (unint64_t *)&v25, *(int *)(a1 + 328), a1 + 296);
    sub_234165E1C((unint64_t *)&v15, (unint64_t *)(a1 + 360), (unint64_t *)&v15, *(int *)(a1 + 328), a1 + 296);
    sub_234174264(a1, (unint64_t *)&v15, (uint64_t *)&v15, (uint64_t *)&v40);
    sub_234174264(a1, (unint64_t *)&v15, (uint64_t *)&v15, (uint64_t *)&v40);
    sub_234174264(a1, (unint64_t *)&v15, (uint64_t *)&v15, (uint64_t *)&v40);
    sub_234165E1C(a2, (unint64_t *)&v15, (unint64_t *)&v15, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C(a2, a2, (unint64_t *)&v20, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C(a2, a2, (unint64_t *)&v20, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    sub_234174264(a1, a2 + 18, (uint64_t *)a3 + 9, (uint64_t *)a3 + 18);
    sub_234165E1C(a2 + 18, a2 + 18, a2 + 18, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C(a2 + 18, a2 + 18, (unint64_t *)&v35, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C(a2 + 18, a2 + 18, (unint64_t *)&v25, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    sub_234174264(a1, (unint64_t *)&v30, (uint64_t *)&v30, (uint64_t *)&v30);
    sub_234174264(a1, (unint64_t *)&v30, (uint64_t *)&v30, (uint64_t *)&v30);
    sub_234174264(a1, (unint64_t *)&v30, (uint64_t *)&v30, (uint64_t *)&v30);
    v6 = a2 + 9;
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    sub_23416393C(a2 + 9, (unint64_t *)&v20, a2, *(uint64_t **)(a1 + 320), (uint64_t *)&v45, *(int *)(a1 + 328));
    sub_234165E1C(a2 + 9, a2 + 9, (unint64_t *)&v15, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v7 = *(uint64_t **)(a1 + 320);
    v8 = *(int *)(a1 + 328);
    v9 = (unint64_t *)&v30;
  }
  return sub_23416393C(v6, v6, v9, v7, (uint64_t *)&v45, v8);
}

uint64_t sub_234176ED4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 328);
  if ((int)v2 < 1)
    return 0;
  v3 = 0;
  do
  {
    v4 = *a2++;
    v3 |= v4;
    --v2;
  }
  while (v2);
  if (v3)
    return -1;
  else
    return 0;
}

uint64_t sub_234176F08(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  _OWORD v5[4];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  return sub_23416393C(a2, a3, a4, *(uint64_t **)(a1 + 320), (uint64_t *)v5, *(int *)(a1 + 328));
}

void sub_234176F50()
{
  qword_25615A870 = (uint64_t)sub_234187F84;
  *(_QWORD *)algn_25615A878 = sub_2341880C4;
  qword_25615A880 = (uint64_t)sub_234176114;
  unk_25615A888 = sub_23417684C;
  qword_25615A890 = (uint64_t)sub_234177F54;
  unk_25615A898 = sub_234178218;
  qword_25615A8A0 = (uint64_t)sub_234178224;
  qword_25615A8B0 = (uint64_t)sub_234178CBC;
  unk_25615A8B8 = sub_2341786D0;
  qword_25615A8C0 = (uint64_t)sub_234178880;
  unk_25615A8C8 = sub_234175E94;
  qword_25615A8D0 = (uint64_t)sub_234175EB0;
  unk_25615A8D8 = sub_234175EC4;
  qword_25615A8E0 = (uint64_t)sub_234175FAC;
  unk_25615A8E8 = sub_234176094;
  qword_25615A8F0 = (uint64_t)sub_2341760FC;
  unk_25615A8F8 = sub_234177C60;
  qword_25615A900 = (uint64_t)sub_234177C78;
  unk_25615A908 = sub_2341882FC;
}

uint64_t sub_23417701C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

unint64_t sub_234177028(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  int v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;

  v5 = *(_DWORD *)(a1 + 328);
  if (v5 < 1)
  {
    v10 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a3;
    v8 = *(unsigned int *)(a1 + 328);
    do
    {
      v9 = *v7++;
      v6 |= v9;
      --v8;
    }
    while (v8);
    if (v6)
      v10 = -1;
    else
      v10 = 0;
  }
  result = sub_234161E5C(a2, *(unint64_t **)(a1 + 320), a3, v5);
  if (*(int *)(a1 + 328) >= 1)
  {
    v12 = 0;
    do
      a2[v12++] &= v10;
    while (v12 < *(int *)(a1 + 328));
  }
  return result;
}

uint64_t sub_2341770C4(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;

  if (a2 == 2 || a2 == 4)
  {
    v3 = sub_2341621D4((uint64_t *)(a1 + 320));
    if (a2 == 4)
      v4 = (v3 + 7) >> 3;
    else
      v4 = 0;
    return ((v3 + 7) >> 3) + v4 + 1;
  }
  else
  {
    sub_2341579B4(15, 0, 111, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/oct.c", 79);
    return 0;
  }
}

unint64_t sub_234177134(uint64_t a1, uint64_t a2, int a3, char *a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  _BYTE v15[66];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341770C4(a1, a3);
  if (v10 <= a5)
  {
    v11 = v10;
    v14 = 0;
    (*(void (**)(uint64_t, char *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a4 + 1, &v14, a2);
    if (a3 == 4)
    {
      (*(void (**)(uint64_t, char *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, &a4[v14 + 1], &v14, a2 + 72);
      v12 = 4;
    }
    else
    {
      (*(void (**)(uint64_t, _BYTE *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v15, &v14, a2 + 72);
      v12 = (v15[v14 - 1] & 1) + a3;
    }
    *a4 = v12;
  }
  else
  {
    sub_2341579B4(15, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/oct.c", 97);
    return 0;
  }
  return v11;
}

uint64_t sub_23417726C(uint64_t *a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  _OWORD v11[4];
  uint64_t v12;
  _OWORD v13[4];
  uint64_t v14;

  v8 = (sub_2341621D4(a1 + 40) + 7) >> 3;
  if (((2 * v8) | 1) == a4 && *a3 == 4)
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    v9 = a3 + 1;
    result = (*(uint64_t (**)(uint64_t *, _OWORD *, _BYTE *, uint64_t))(*a1 + 112))(a1, v13, v9, v8);
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t *, _OWORD *, _BYTE *, uint64_t))(*a1 + 112))(a1, v11, &v9[v8], v8);
      if ((_DWORD)result)
        return sub_2341740CC((uint64_t)a1, a2, (uint64_t)v13, (uint64_t)v11);
    }
  }
  else
  {
    sub_2341579B4(15, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/oct.c", 122);
    return 0;
  }
  return result;
}

unint64_t sub_234177370(uint64_t a1, uint64_t *a2, int a3, char *a4, unint64_t a5)
{
  int v10;
  __int16 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _OWORD v17[9];

  if (sub_23417154C(a1, *a2))
  {
    v10 = 106;
    v11 = 215;
  }
  else
  {
    if (a4)
    {
      memset(v17, 0, sizeof(v17));
      if ((**(unsigned int (***)(uint64_t, uint64_t, _OWORD *, char *))a1)(a1, (uint64_t)(a2 + 1), v17, (char *)&v17[4] + 8))
      {
        return sub_234177134(a1, (uint64_t)v17, a3, a4, a5);
      }
      return 0;
    }
    v13 = *(unsigned int *)(a1 + 328);
    if ((int)v13 >= 1)
    {
      v14 = 0;
      v15 = a2 + 19;
      do
      {
        v16 = *v15++;
        v14 |= v16;
        --v13;
      }
      while (v13);
      if (v14)
        return sub_2341770C4(a1, a3);
    }
    v10 = 119;
    v11 = 222;
  }
  sub_2341579B4(15, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/oct.c", v11);
  return 0;
}

uint64_t sub_2341774A0(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10;
  __int16 v11;
  uint64_t v12;
  _OWORD *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t **v32;

  if (sub_23417154C(a1, *a2))
  {
    v10 = 106;
    v11 = 259;
LABEL_6:
    sub_2341579B4(15, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/oct.c", v11);
    return 0;
  }
  if (*(_DWORD *)(a3 + 16) || (sub_234162A28(a3, a1 + 320) & 0x80000000) == 0)
  {
    v10 = 107;
    v11 = 265;
    goto LABEL_6;
  }
  sub_234157348();
  if (a5)
  {
    v32 = 0;
  }
  else
  {
    v14 = sub_23418E2E4(0x30uLL);
    if (!v14)
      return 0;
    a5 = (uint64_t)v14;
    *(_OWORD *)((char *)v14 + 26) = 0u;
    *v14 = 0u;
    v14[1] = 0u;
    v32 = (unint64_t **)v14;
  }
  v31 = a4 != 0;
  sub_234162DC8((_QWORD *)a5);
  v15 = sub_234162E68(a5);
  v16 = sub_234162E68(a5);
  v17 = sub_234162E68(a5);
  v18 = sub_234162E68(a5);
  v19 = sub_234162E68(a5);
  if (!v19)
    goto LABEL_47;
  v20 = (uint64_t)v19;
  if (!sub_234173618(a1, 0, v17, v18)
    || !sub_2341642D0((uint64_t)v16, a3, a1 + 320, a5)
    || !sub_234164140((uint64_t)v15, (uint64_t)v16, a3, a1 + 320, a5))
  {
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 528))
  {
    if (!sub_234163DA4((unint64_t **)v16, a3, a3, a1 + 320, a5)
      || !sub_234163DA4((unint64_t **)v16, (uint64_t)v16, a3, a1 + 320, a5)
      || !sub_234163FD0((uint64_t)v15, (uint64_t)v15, (uint64_t)v16, a1 + 320, a5))
    {
      goto LABEL_47;
    }
  }
  else if (!sub_234164140((uint64_t)v16, (uint64_t)v17, a3, a1 + 320, a5)
         || !sub_234163DA4((unint64_t **)v15, (uint64_t)v15, (uint64_t)v16, a1 + 320, a5))
  {
    goto LABEL_47;
  }
  if (!sub_234163DA4((unint64_t **)v15, (uint64_t)v15, (uint64_t)v18, a1 + 320, a5))
    goto LABEL_47;
  if (!sub_23416C544((_QWORD *)v20, (unsigned int *)v15, a1 + 320, a5))
  {
    if ((sub_2341572D4() & 0xFF000FFF) == 0x300006E)
    {
      sub_234157348();
      v23 = 107;
      v24 = 328;
    }
    else
    {
      v23 = 3;
      v24 = 330;
    }
    goto LABEL_46;
  }
  LODWORD(v21) = *(_DWORD *)(v20 + 8);
  if ((int)v21 < 1)
    v22 = 0;
  else
    v22 = **(_DWORD **)v20 & 1;
  if (v22 != v31)
  {
    if (!(_DWORD)v21)
      goto LABEL_41;
    v26 = 0;
    v21 = (int)v21;
    v27 = *(uint64_t **)v20;
    do
    {
      v28 = *v27++;
      v26 |= v28;
      --v21;
    }
    while (v21);
    if (!v26)
    {
LABEL_41:
      v23 = 108;
      v24 = 337;
LABEL_46:
      sub_2341579B4(15, 0, v23, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/oct.c", v24);
      goto LABEL_47;
    }
    if (sub_23416159C(v20, a1 + 320, v20))
    {
      LODWORD(v21) = *(_DWORD *)(v20 + 8);
      goto LABEL_32;
    }
LABEL_47:
    v12 = 0;
    goto LABEL_48;
  }
LABEL_32:
  if ((int)v21 < 1)
    v25 = 0;
  else
    v25 = **(_DWORD **)v20 & 1;
  if (v25 != v31)
  {
    v23 = 68;
    v24 = 345;
    goto LABEL_46;
  }
  v12 = sub_2341742D4(a1, (uint64_t)a2, a3, v20);
LABEL_48:
  if (!*(_BYTE *)(a5 + 40))
  {
    v29 = *(_QWORD *)(a5 + 8);
    v30 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v30;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v29 + 8 * v30);
  }
  sub_234162D80(v32);
  return v12;
}

uint64_t *sub_23417785C()
{
  sub_234195C74(&stru_256158200, sub_234177888);
  return &qword_25615A910;
}

void sub_234177888()
{
  qword_25615A910 = (uint64_t)sub_2341884BC;
  qword_25615A920 = (uint64_t)sub_234188A1C;
  unk_25615A928 = sub_234188BC8;
  qword_25615A930 = (uint64_t)sub_234188CDC;
  unk_25615A938 = sub_234188F88;
  qword_25615A948 = (uint64_t)sub_2341891E8;
  qword_25615A968 = (uint64_t)sub_2341895B0;
  unk_25615A970 = sub_234189694;
  qword_25615A978 = (uint64_t)sub_234175F4C;
  unk_25615A980 = sub_234175FF0;
  qword_25615A998 = (uint64_t)sub_234177C60;
  unk_25615A9A0 = sub_234177C78;
  qword_25615A9A8 = (uint64_t)sub_234177EA4;
}

uint64_t *sub_23417791C()
{
  sub_234195C74(&stru_256158210, sub_234177948);
  return &qword_25615A9B0;
}

void sub_234177948()
{
  qword_25615A9B0 = (uint64_t)sub_23418A90C;
  qword_25615A9C0 = (uint64_t)sub_23418AC78;
  unk_25615A9C8 = sub_23418AD4C;
  qword_25615A9D0 = (uint64_t)sub_23418ADF0;
  unk_25615A9D8 = sub_23418B2BC;
  qword_25615A9E8 = (uint64_t)sub_23418B4E4;
  qword_25615AA08 = (uint64_t)sub_234175E94;
  unk_25615AA10 = sub_234175EB0;
  qword_25615AA18 = (uint64_t)sub_234175EC4;
  unk_25615AA20 = sub_234175FAC;
  qword_25615AA28 = (uint64_t)sub_234176094;
  unk_25615AA30 = sub_2341760FC;
  qword_25615AA38 = (uint64_t)sub_234177C60;
  unk_25615AA40 = sub_234177C78;
  qword_25615AA48 = (uint64_t)sub_23418B8A4;
}

BOOL sub_2341779F0(uint64_t a1, void *__s1, void *__s2)
{
  uint64_t v3;

  v3 = *(int *)(a1 + 264);
  return !(_DWORD)v3 || memcmp(__s1, __s2, 8 * v3) == 0;
}

void sub_234177A2C(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  v6 = a1 + 232;
  sub_234165D40(a2, *(int *)(a1 + 264), a3, a4, a1 + 232);
  sub_234165E1C(a2, a2, *(unint64_t **)(a1 + 232), *(int *)(a1 + 264), v6);
}

void sub_234177A7C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_234165E1C(a2, a3, *(unint64_t **)(a1 + 232), *(int *)(a1 + 264), a1 + 232);
}

void sub_234177A98(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8[10];

  v8[9] = *MEMORY[0x24BDAC8D0];
  v5 = *(unint64_t **)(a1 + 256);
  v6 = *(int *)(a1 + 264);
  v7 = sub_2341617E0(a2, a3, a4, v6);
  sub_2341638CC(a2, v7, v5, v8, v6);
  sub_23418E400(v8, 0x48uLL);
}

void sub_234177B30(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4[10];

  v4[9] = *MEMORY[0x24BDAC8D0];
  sub_23416393C(a2, a3, a4, *(uint64_t **)(a1 + 256), v4, *(int *)(a1 + 264));
  sub_23418E400(v4, 0x48uLL);
}

void sub_234177BA0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  _OWORD v3[4];
  uint64_t v4;
  uint64_t v5[10];

  v5[9] = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  sub_23416393C(a2, (unint64_t *)v3, a3, *(uint64_t **)(a1 + 256), v5, *(int *)(a1 + 264));
  sub_23418E400(v5, 0x48uLL);
}

uint64_t sub_234177C1C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(int *)(result + 264);
  if ((_DWORD)v5)
  {
    do
    {
      v7 = *a4++;
      v6 = v7;
      v8 = *a5++;
      *a2++ = v8 & ~a3 | v6 & a3;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_234177C4C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  sub_234165D40(a2, *(int *)(a1 + 264), a3, *(int *)(a1 + 264), a1 + 232);
}

void sub_234177C60(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  sub_234165F10(a2, a3, *(int *)(a1 + 264), a1 + 232);
}

uint64_t sub_234177C78(unsigned int *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[66];
  if ((int)v3 < 1)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 8 * v3;
  do
  {
    v7 |= *(_QWORD *)(a3 + v6);
    v6 += 8;
  }
  while (v8 != v6);
  if (!v7)
    return 0;
  (*(void (**)(unsigned int *, unint64_t *))(*(_QWORD *)a1 + 136))(a1, a2);
  sub_234165D40(a2, (int)a1[66], (uint64_t)a2, (int)a1[66], (uint64_t)(a1 + 58));
  return 1;
}

uint64_t sub_234177D00(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t sub_234177D0C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  void (*v6)(uint64_t, _OWORD *, unint64_t *);
  void (*v7)(uint64_t, _OWORD *, uint64_t, uint64_t *);
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  _OWORD v23[4];
  uint64_t v24;
  _OWORD v25[4];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v7 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 88);
  v6 = *(void (**)(uint64_t, _OWORD *, unint64_t *))(*(_QWORD *)a1 + 96);
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v24 = 0;
  v8 = (uint64_t *)(a3 + 18);
  memset(v23, 0, sizeof(v23));
  v6(a1, v23, a3 + 18);
  v7(a1, v25, a2, (uint64_t *)v23);
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  sub_23416393C((unint64_t *)v25, (unint64_t *)v25, a3, *(uint64_t **)(a1 + 320), (uint64_t *)&v27, *(int *)(a1 + 328));
  v9 = *(unsigned int *)(a1 + 328);
  if ((int)v9 < 1)
  {
    v13 = 0;
  }
  else
  {
    v10 = 0;
    v11 = (uint64_t *)v25;
    do
    {
      v12 = *v11++;
      v10 |= v12;
      --v9;
    }
    while (v9);
    v13 = v10 != 0;
  }
  v7(a1, v25, a2 + 72, (uint64_t *)v23);
  v7(a1, v25, (uint64_t)v25, v8);
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  sub_23416393C((unint64_t *)v25, (unint64_t *)v25, a3 + 9, *(uint64_t **)(a1 + 320), (uint64_t *)&v27, *(int *)(a1 + 328));
  v14 = *(unsigned int *)(a1 + 328);
  if ((int)v14 < 1)
  {
    v21 = 0;
  }
  else
  {
    v15 = 0;
    v16 = (uint64_t *)v25;
    v17 = *(unsigned int *)(a1 + 328);
    do
    {
      v18 = *v16++;
      v15 |= v18;
      --v17;
    }
    while (v17);
    v19 = 0;
    do
    {
      v20 = *v8++;
      v19 |= v20;
      --v14;
    }
    while (v14);
    if (v15)
      v13 = -1;
    v21 = v19 != 0;
  }
  return v21 & ~v13;
}

uint64_t sub_234177EA4(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _OWORD v11[4];
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 328);
  if ((int)v3 < 1)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 8 * v3;
  do
  {
    v7 |= *(_QWORD *)(a2 + v6 + 144);
    v6 += 8;
  }
  while (v8 != v6);
  if (!v7)
    return 0;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  result = sub_234174DB0(a1, (unint64_t *)v11, a2);
  if ((_DWORD)result)
  {
    v10 = *(int *)(a1 + 264);
    return !(_DWORD)v10 || memcmp(v11, a3, 8 * v10) == 0;
  }
  return result;
}

double sub_234177F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t i;
  unsigned int v10;
  double result;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _OWORD v28[13];
  uint64_t v29;
  unint64_t v30[27];
  unint64_t v31[27];
  _QWORD v32[812];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v32[810] = *MEMORY[0x24BDAC8D0];
  sub_234173870((uint64_t)v30);
  sub_234173944((uint64_t)v31, v4);
  v8 = v32;
  for (i = 2; i != 32; ++i)
  {
    if ((i & 1) != 0)
      sub_234176114(v7, v8, v31, v8 - 27);
    else
      sub_23417684C(v7, v8, &v30[27 * (i >> 1)]);
    v8 += 27;
  }
  v10 = sub_2341621D4((uint64_t *)(v7 + 256));
  if (!v10)
    return sub_234173870((uint64_t)v6);
  v12 = v10;
  v13 = v10 - 1;
  v14 = 1;
  v15 = v10;
  do
  {
    v16 = v13;
    if (!v14)
      sub_23417684C(v7, v6, v6);
    if (-858993459 * v16 <= 0x33333333)
    {
      v17 = *(int *)(v7 + 264);
      if ((unint64_t)(v15 + 3) >> 6 >= v17)
        v18 = 0;
      else
        v18 = (*(_QWORD *)(v2 + 8 * ((unint64_t)(v15 + 3) >> 6)) >> (v15 + 3)) & 1;
      if ((unint64_t)(v15 + 2) >> 6 >= v17)
        v19 = 0;
      else
        v19 = (*(_QWORD *)(v2 + 8 * ((unint64_t)(v15 + 2) >> 6)) >> (v15 + 2)) & 1;
      if ((unint64_t)(v15 + 1) >> 6 >= v17)
        v20 = 0;
      else
        v20 = (*(_QWORD *)(v2 + 8 * ((unint64_t)(v15 + 1) >> 6)) >> (v15 + 1)) & 1;
      v21 = (unint64_t)v15 >> 6;
      if (v21 >= v17)
        v22 = 0;
      else
        v22 = (*(_QWORD *)(v2 + 8 * v21) >> v15) & 1;
      v23 = (unint64_t)v16 >> 6;
      if (v23 >= v17)
        v24 = 0;
      else
        v24 = (*(_QWORD *)(v2 + 8 * v23) >> v16) & 1;
      v25 = 0;
      v29 = 0;
      v26 = v24 | (2 * v22) | (16 * v18) | (8 * v19) | (4 * v20);
      v27 = (uint64_t *)v30;
      memset(v28, 0, sizeof(v28));
      do
      {
        sub_234174C00(v7, (uint64_t *)v28, ((v25++ ^ v26) - 1) >> 63, v27, (uint64_t *)v28);
        v27 += 27;
      }
      while (v25 != 32);
      if (v14)
        *(_QWORD *)&result = sub_234173944((uint64_t)v6, (uint64_t)v28).n128_u64[0];
      else
        sub_234176114(v7, v6, v6, (unint64_t *)v28);
      v14 = 0;
    }
    v13 = v16 - 1;
    v15 = v16;
  }
  while (v16 - 1 < v12);
  if (v14)
    return sub_234173870((uint64_t)v6);
  return result;
}

double sub_234178218()
{
  return sub_234177F54();
}

double sub_234178224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  double result;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[13];
  uint64_t v20;
  uint64_t v21[459];
  uint64_t v22[459];
  uint64_t v23[461];

  v0 = MEMORY[0x24BDAC7A8]();
  v17 = v2;
  v18 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v0;
  v23[459] = *MEMORY[0x24BDAC8D0];
  sub_234178434(v0, (uint64_t)v21, v12);
  sub_234178434(v11, (uint64_t)v22, v6);
  if (v4)
    sub_234178434(v11, (uint64_t)v23, v4);
  v13 = sub_2341621D4((uint64_t *)(v11 + 256));
  v15 = 0;
  v16 = v13;
  do
  {
    while (1)
    {
      if ((v15 & 1) != 0)
        sub_23417684C(v11, v10, v10);
      if (5 * (v16 / 5) != v16)
        break;
      v20 = 0;
      memset(v19, 0, sizeof(v19));
      sub_2341784CC(v11, (uint64_t)v19, v21, v8, v16);
      if ((v15 & 1) != 0)
        sub_234176114(v11, v10, v10, (unint64_t *)v19);
      else
        sub_234173944((uint64_t)v10, (uint64_t)v19);
      sub_2341784CC(v11, (uint64_t)v19, v22, v18, v16);
      sub_234176114(v11, v10, v10, (unint64_t *)v19);
      if (v4)
      {
        sub_2341784CC(v11, (uint64_t)v19, v23, v17, v16);
        sub_234176114(v11, v10, v10, (unint64_t *)v19);
      }
      --v16;
      v15 = 1;
      if (v16 > v13)
        return result;
    }
    --v16;
  }
  while (v16 <= v13);
  if ((v15 & 1) == 0)
    return sub_234173870((uint64_t)v10);
  return result;
}

uint64_t sub_234178434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v6;
  unint64_t i;
  uint64_t result;

  sub_234173870(a2);
  sub_234173944(a2 + 216, a3);
  v6 = (unint64_t *)(a2 + 432);
  for (i = 2; i != 17; ++i)
  {
    if ((i & 1) != 0)
      result = sub_234176114(a1, v6, (unint64_t *)(a2 + 216), v6 - 27);
    else
      result = sub_23417684C(a1, v6, (unint64_t *)(a2 + 216 * (i >> 1)));
    v6 += 27;
  }
  return result;
}

unint64_t sub_2341784CC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t result;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _OWORD v29[4];
  uint64_t v30;

  v8 = *(int *)(a1 + 264);
  if ((unint64_t)(a5 + 4) >> 6 >= v8)
    v9 = 0;
  else
    v9 = 32 * ((*(_QWORD *)(a4 + 8 * ((unint64_t)(a5 + 4) >> 6)) >> (a5 + 4)) & 1);
  if ((unint64_t)(a5 + 3) >> 6 >= v8)
    v10 = 0;
  else
    v10 = 16 * ((*(_QWORD *)(a4 + 8 * ((unint64_t)(a5 + 3) >> 6)) >> (a5 + 3)) & 1);
  v11 = v10 | v9;
  if ((unint64_t)(a5 + 2) >> 6 >= v8)
    v12 = 0;
  else
    v12 = 8 * ((*(_QWORD *)(a4 + 8 * ((unint64_t)(a5 + 2) >> 6)) >> (a5 + 2)) & 1);
  v13 = v11 | v12;
  if ((unint64_t)(a5 + 1) >> 6 >= v8)
    v14 = 0;
  else
    v14 = 4 * ((*(_QWORD *)(a4 + 8 * ((unint64_t)(a5 + 1) >> 6)) >> (a5 + 1)) & 1);
  v15 = v13 | v14;
  v16 = (unint64_t)a5 >> 6;
  if (v16 >= v8)
    v17 = 0;
  else
    v17 = 2 * ((*(_QWORD *)(a4 + 8 * v16) >> a5) & 1);
  v18 = v15 | v17;
  if (a5)
  {
    if ((unint64_t)(a5 - 1) >> 6 >= v8)
      LODWORD(v19) = 0;
    else
      v19 = (*(_QWORD *)(a4 + 8 * ((unint64_t)(a5 - 1) >> 6)) >> (a5 - 1)) & 1;
    v18 |= v19;
  }
  v20 = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  v21 = -(uint64_t)((unint64_t)v18 >> 5);
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  v22 = ((v18 >> 5) - 1) & v18 | (v18 ^ 0x3FLL) & v21;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  v23 = (v22 & 1) + (v22 >> 1);
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  do
  {
    sub_234174C00(a1, (uint64_t *)a2, (uint64_t)((v20++ ^ v23) - 1) >> 63, a3, (uint64_t *)a2);
    a3 += 27;
  }
  while (v20 != 17);
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  v24 = (unint64_t *)(a2 + 72);
  result = sub_234177028(a1, (unint64_t *)v29, v24);
  v26 = *(int *)(a1 + 328);
  if ((_DWORD)v26)
  {
    v27 = (uint64_t *)v29;
    do
    {
      v28 = *v27++;
      *v24 = *v24 & ~v21 | v28 & v21;
      ++v24;
      --v26;
    }
    while (v26);
  }
  return result;
}

uint64_t sub_2341786D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;
  __int128 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  _OWORD v21[13];
  uint64_t v22;
  uint64_t v23;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v23 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341621D4((uint64_t *)(v0 + 320)) + 4;
  v5 = *(_OWORD *)(v2 + 176);
  v6 = v4 / 5;
  v21[10] = *(_OWORD *)(v2 + 160);
  v21[11] = v5;
  v21[12] = *(_OWORD *)(v2 + 192);
  v22 = *(_QWORD *)(v2 + 208);
  v7 = *(_OWORD *)(v2 + 112);
  v21[6] = *(_OWORD *)(v2 + 96);
  v21[7] = v7;
  v8 = *(_OWORD *)(v2 + 144);
  v21[8] = *(_OWORD *)(v2 + 128);
  v21[9] = v8;
  v9 = *(_OWORD *)(v2 + 48);
  v21[2] = *(_OWORD *)(v2 + 32);
  v21[3] = v9;
  v10 = *(_OWORD *)(v2 + 80);
  v21[4] = *(_OWORD *)(v2 + 64);
  v21[5] = v10;
  if (v4 / 5 <= 2)
    v6 = 2;
  v11 = v6 - 1;
  v12 = *(_OWORD *)(v2 + 16);
  v13 = 1;
  v21[0] = *(_OWORD *)v2;
  v21[1] = v12;
  do
  {
    v14 = 1 << v13;
    sub_23417684C(v3, (unint64_t *)&v21[-13] + 27 * v14 - 1, (unint64_t *)&v21[-13] + 27 * (v14 >> 1) - 1);
    v15 = v11;
    if (v4 >= 0xA)
    {
      do
      {
        sub_23417684C(v3, (unint64_t *)&v21[-13] + 27 * v14 - 1, (unint64_t *)&v21[-13] + 27 * v14 - 1);
        --v15;
      }
      while (v15);
    }
    v16 = 0;
    if (v14 <= 2)
      v17 = 2;
    else
      v17 = 1 << v13;
    v18 = (char *)v21 + 216 * v14;
    v19 = 216 * v17 - 216;
    do
    {
      sub_234176114(v3, (unint64_t *)&v18[v16], (unint64_t *)v21 + 27 * ((1 << v13) - 1), (unint64_t *)((char *)v21 + v16));
      v16 += 216;
    }
    while (v19 != v16);
    ++v13;
  }
  while (v13 != 5);
  return sub_234174088(v3);
}

void sub_234178880(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  unsigned int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v16 = sub_2341621D4((uint64_t *)(a1 + 320)) + 4;
  if (v16 >= 5)
  {
    v17 = 0;
    v18 = v16 / 5;
    v19 = v16 / 5 - 1;
    while ((v17 & 1) == 0)
    {
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      sub_234178A54(a1, (uint64_t)&v20, a3, a4, v19);
      sub_234173944((uint64_t)a2, (uint64_t)&v20);
      if (a5)
        goto LABEL_8;
LABEL_9:
      if (a7)
      {
        sub_234178A54(a1, (uint64_t)&v20, a7, a8, v19);
        sub_234176114(a1, a2, a2, (unint64_t *)&v20);
      }
      --v19;
      v17 = 1;
      if (v19 >= v18)
        return;
    }
    sub_23417684C(a1, a2, a2);
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    sub_234178A54(a1, (uint64_t)&v20, a3, a4, v19);
    sub_234176114(a1, a2, a2, (unint64_t *)&v20);
    if (!a5)
      goto LABEL_9;
LABEL_8:
    sub_234178A54(a1, (uint64_t)&v20, a5, a6, v19);
    sub_234176114(a1, a2, a2, (unint64_t *)&v20);
    goto LABEL_9;
  }
  sub_234173870((uint64_t)a2);
}

uint64_t sub_234178A54(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v10 = *(int *)(a1 + 264);
  result = sub_2341621D4((uint64_t *)(a1 + 320));
  v12 = 0;
  LODWORD(v13) = 0;
  v14 = a5;
  do
  {
    if (v14 >> 6 >= v10)
      LODWORD(v15) = 0;
    else
      v15 = (*(_QWORD *)(a4 + 8 * (v14 >> 6)) >> v14) & 1;
    v13 = ((_DWORD)v15 << v12++) | v13;
    v14 += (result + 4) / 5uLL;
  }
  while (v12 != 5);
  v16 = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  do
  {
    ++v16;
    v17 = *(int *)(a1 + 328);
    if ((_DWORD)v17)
    {
      v18 = ((v13 ^ v16) - 1) >> 63;
      v19 = ~v18;
      v20 = a3;
      v21 = (uint64_t *)a2;
      do
      {
        v22 = *v20++;
        *v21 = *v21 & v19 | v22 & v18;
        ++v21;
        --v17;
      }
      while (v17);
      v23 = *(int *)(a1 + 328);
      if ((_DWORD)v23)
      {
        for (i = 0; i != v23; ++i)
          *(_QWORD *)(a2 + 72 + 8 * i) = *(_QWORD *)(a2 + 72 + 8 * i) & v19 | a3[i + 9] & v18;
      }
    }
    a3 += 18;
  }
  while (v16 != 31);
  v25 = *(int *)(a1 + 328);
  if ((_DWORD)v25)
  {
    v26 = (uint64_t *)(a2 + 144);
    v27 = (uint64_t *)(a1 + 160);
    v28 = (v13 - 1) >> 63;
    do
    {
      v29 = *v27++;
      *v26 = v29 & ~v28 | *v26 & v28;
      ++v26;
      --v25;
    }
    while (v25);
  }
  return result;
}

uint64_t *sub_234178BE0(uint64_t *result, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;

  v3 = ((a3 >> 5) - 1) & a3 | (63 - a3) & -(uint64_t)(a3 >> 5);
  *result = -(uint64_t)(a3 >> 5) & 1;
  *a2 = (v3 & 1) + (v3 >> 1);
  return result;
}

uint64_t sub_234178C18(uint64_t result, _BYTE *a2, _DWORD *a3, unint64_t a4, int a5)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;

  if (a4 != -1)
  {
    v5 = ((2 << a5) - 1) & *a3;
    v6 = a4 + 1;
    v7 = a5 + 1;
    do
    {
      v8 = v5 - (2 << a5);
      if (v7 >= a4)
        v8 = v5 & (((2 << a5) - 1) >> 1);
      if ((v5 & (1 << a5)) == 0)
        v8 = v5;
      if ((v5 & 1) != 0)
        v5 -= v8;
      else
        LOBYTE(v8) = 0;
      *a2 = v8;
      if (v7 >> 6 >= *(int *)(result + 264))
        LODWORD(v9) = 0;
      else
        v9 = (*(_QWORD *)&a3[2 * (v7 >> 6)] >> v7) & 1;
      v5 = ((_DWORD)v9 << a5) + (v5 >> 1);
      ++a2;
      ++v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_234178CBC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  unint64_t *v5;
  unint64_t *v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t i;
  _QWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  char *v29;
  _BYTE *v30;
  _OWORD v31[13];
  uint64_t v32;
  _BYTE v33[1735];
  _BYTE v34[529];
  char v35;
  _BYTE v36[1603];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v0;
  *(_QWORD *)&v36[1587] = *MEMORY[0x24BDAC8D0];
  LODWORD(v12) = sub_2341621D4((uint64_t *)(v0 + 256));
  if (v2 >= 4)
  {
    v13 = sub_23418E380(v2, 0x211uLL);
    v15 = sub_23418E380(v2, 0x6C0uLL);
    v14 = v15;
    v16 = 0;
    if (!v13)
      goto LABEL_29;
    v29 = (char *)v15;
    v30 = v13;
    if (!v15)
      goto LABEL_29;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v29 = &v35;
    v30 = v36;
  }
  v26 = v14;
  v27 = v13;
  v12 = (int)v12;
  if (v8)
  {
    sub_234178C18(v11, v34, v8, (int)v12, 4);
    sub_234178F74(v11, (uint64_t)v33, (unint64_t *)(v11 + 16));
  }
  v28 = v8;
  if (v2)
  {
    v17 = (uint64_t)v29;
    v18 = v30;
    v19 = v2;
    do
    {
      sub_234178C18(v11, v18, v4, (int)v12, 4);
      sub_234178F74(v11, v17, v6);
      v6 += 27;
      v17 += 1728;
      v4 += 18;
      v18 += 529;
      --v19;
    }
    while (v19);
  }
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  if ((_DWORD)v12 == -1)
    goto LABEL_27;
  v20 = (int)v12 + 1;
  v21 = 1;
  do
  {
    if (!v21)
      sub_23417684C(v11, v10, v10);
    if (v28 && v34[v12])
    {
      sub_23417900C(v11, (uint64_t)v31, (uint64_t)v33, (char)v34[v12]);
      if (v21)
      {
        sub_234173944((uint64_t)v10, (uint64_t)v31);
        v21 = 0;
      }
      else
      {
        sub_234176114(v11, v10, v10, (unint64_t *)v31);
      }
    }
    v23 = (uint64_t)v29;
    v22 = v30;
    for (i = v2; i; --i)
    {
      if (v22[v12])
      {
        sub_23417900C(v11, (uint64_t)v31, v23, (char)v22[v12]);
        if (v21)
        {
          sub_234173944((uint64_t)v10, (uint64_t)v31);
          v21 = 0;
        }
        else
        {
          sub_234176114(v11, v10, v10, (unint64_t *)v31);
        }
      }
      v22 += 529;
      v23 += 1728;
    }
    --v12;
  }
  while (v12 < v20);
  if (v21)
LABEL_27:
    sub_234173870((uint64_t)v10);
  v16 = 1;
  v14 = v26;
  v13 = v27;
LABEL_29:
  sub_23418E3C4(v13);
  sub_23418E3C4(v14);
  return v16;
}

uint64_t sub_234178F74(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t i;
  uint64_t result;
  _OWORD v8[13];
  uint64_t v9;

  sub_234173944(a2, (uint64_t)a3);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  sub_23417684C(a1, (unint64_t *)v8, a3);
  for (i = 0; i != 1512; i += 216)
    result = sub_234176114(a1, (unint64_t *)(a2 + i + 216), (unint64_t *)(a2 + i), (unint64_t *)v8);
  return result;
}

void sub_23417900C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if ((a4 & 0x80000000) != 0)
  {
    sub_234173944(a2, a3 + 216 * (-a4 >> 1));
    sub_234177028(a1, (unint64_t *)(a2 + 72), (unint64_t *)(a2 + 72));
  }
  else
  {
    sub_234173944(a2, a3 + 216 * (a4 >> 1));
  }
}

uint64_t sub_234179070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  unint64_t v14;
  _BYTE v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  result = sub_234179110((uint64_t)v15, &v14, a3, a4, a5, a6, a7);
  if ((_DWORD)result)
    return sub_23417918C(a1, a2, a3, (uint64_t)v15, v14, a8, a9) != 0;
  return result;
}

uint64_t sub_234179110(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unsigned int v9;

  v9 = 0;
  if (sub_234179384(a3, a6, a7, a4, a5, a1, &v9))
  {
    *a2 = v9;
    return 1;
  }
  else
  {
    sub_2341579B4(31, 0, 28, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/hkdf/hkdf.c", 51);
    return 0;
  }
}

uint64_t sub_23417918C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  uint64_t v18;
  unsigned int v19;
  size_t v20;
  int v23;
  __int16 v24;
  char v25;
  _OWORD v26[6];
  uint64_t v27;
  _BYTE __src[64];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a3 + 4);
  v8 = v7 + a2;
  if (__CFADD__(v7, a2) || (v9 = v8 - 1, v10 = (v8 - 1) / v7, v10 >= 0x100))
  {
    v23 = 100;
    v24 = 73;
  }
  else
  {
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    sub_23417945C((uint64_t)v26);
    if (sub_234179480((uint64_t)v26, a4, a5, a3))
    {
      if (v9 < v7)
      {
LABEL_16:
        sub_234179740(v26);
        return 1;
      }
      v18 = 0;
      v19 = 1;
      while (1)
      {
        v25 = v19;
        if (v19 != 1)
        {
          if (!sub_234179480((uint64_t)v26, 0, 0, 0))
            break;
          (*(void (**)(char *, _BYTE *, size_t))(*((_QWORD *)&v26[0] + 1) + 24))((char *)v26 + 8, __src, v7);
        }
        (*(void (**)(char *, uint64_t, uint64_t))(*((_QWORD *)&v26[0] + 1) + 24))((char *)v26 + 8, a6, a7);
        (*(void (**)(char *, char *, uint64_t))(*((_QWORD *)&v26[0] + 1) + 24))((char *)v26 + 8, &v25, 1);
        if (!sub_234179678((uint64_t)v26, (uint64_t)__src, 0))
          break;
        if (a2 - v18 >= v7)
          v20 = v7;
        else
          v20 = a2 - v18;
        if (v20)
          memcpy((void *)(a1 + v18), __src, v20);
        v18 += v20;
        if (v10 <= v19++)
          goto LABEL_16;
      }
    }
    sub_234179740(v26);
    v23 = 28;
    v24 = 109;
  }
  sub_2341579B4(31, 0, v23, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/hkdf/hkdf.c", v24);
  return 0;
}

uint64_t sub_234179384(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  int v14;
  _OWORD v16[6];
  uint64_t v17;

  v17 = 0;
  memset(v16, 0, sizeof(v16));
  sub_23417945C((uint64_t)v16);
  if (sub_234179480((uint64_t)v16, a2, a3, a1))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(*((_QWORD *)&v16[0] + 1) + 24))((char *)v16 + 8, a4, a5);
    v14 = sub_234179678((uint64_t)v16, a6, a7);
    sub_234179740(v16);
    if (v14)
      return a6;
    else
      return 0;
  }
  else
  {
    sub_234179740(v16);
    return 0;
  }
}

double sub_23417945C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t sub_234179480(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  char v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  char v17;
  _BYTE v19[128];
  _BYTE v20[128];
  uint64_t v21;

  v4 = a3;
  v21 = *MEMORY[0x24BDAC8D0];
  if (a4)
    v7 = a4;
  else
    v7 = *(_QWORD *)a1;
  if (!a2 && v7 == *(_QWORD *)a1)
    return sub_234170750((_QWORD *)(a1 + 8), (uint64_t *)(a1 + 40));
  v8 = *(unsigned int *)(v7 + 40);
  if (v8 >= a3)
  {
    if (a3)
      __memcpy_chk();
  }
  else
  {
    if (!sub_2341708C0(a1 + 8, v7))
      return 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(a1 + 8) + 24))(a1 + 8, a2, v4);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 8) + 32))(a1 + 8, v19);
    v9 = *(_QWORD *)(a1 + 8);
    LODWORD(v4) = *(_DWORD *)(v9 + 4);
    sub_23418E400(*(void **)(a1 + 16), *(unsigned int *)(v9 + 44));
  }
  if ((_DWORD)v8 != (_DWORD)v4)
    bzero(&v19[v4], v8 - v4);
  if ((_DWORD)v8)
  {
    v10 = v20;
    v11 = v19;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v10++ = v13 ^ 0x36;
      --v12;
    }
    while (v12);
  }
  if (sub_2341708C0(a1 + 40, v7))
  {
    (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)(a1 + 40) + 24))(a1 + 40, v20, v8);
    if ((_DWORD)v8)
    {
      v14 = v20;
      v15 = v19;
      v16 = v8;
      do
      {
        v17 = *v15++;
        *v14++ = v17 ^ 0x5C;
        --v16;
      }
      while (v16);
    }
    if (sub_2341708C0(a1 + 72, v7))
    {
      (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)(a1 + 72) + 24))(a1 + 72, v20, v8);
      *(_QWORD *)a1 = v7;
      return sub_234170750((_QWORD *)(a1 + 8), (uint64_t *)(a1 + 40));
    }
  }
  return 0;
}

uint64_t sub_234179658(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 24))(a1 + 8);
  return 1;
}

uint64_t sub_234179678(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  void **v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = (void **)(a1 + 8);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 8) + 32))(a1 + 8, v8);
  v6 = *((unsigned int *)*v5 + 1);
  sub_23418E400(v5[1], *((unsigned int *)*v5 + 11));
  result = sub_234170750(v5, (uint64_t *)v5 + 8);
  if ((_DWORD)result)
  {
    (*((void (**)(void **, _BYTE *, uint64_t))*v5 + 3))(v5, v8, v6);
    sub_23417094C(v5, a2, a3);
    return 1;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_234179740(void *a1)
{
  sub_234170680((uint64_t)a1 + 40);
  sub_234170680((uint64_t)a1 + 72);
  sub_234170680((uint64_t)a1 + 8);
  sub_23418E400(a1, 0x68uLL);
}

_QWORD *sub_23417977C()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_23418E2E4(0x68uLL);
  v1 = v0;
  if (v0)
    sub_23417945C((uint64_t)v0);
  return v1;
}

void sub_2341797B0(uint64_t a1)
{
  sub_23418E400(*(void **)(a1 + 48), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 44));
  sub_234170680(a1 + 40);
  sub_23418E400(*(void **)(a1 + 80), *(unsigned int *)(*(_QWORD *)(a1 + 72) + 44));
  sub_234170680(a1 + 72);
  sub_23418E400(*(void **)(a1 + 16), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 44));
  sub_234170680(a1 + 8);
  sub_23418E400((void *)a1, 0x68uLL);
}

void sub_234179828(_QWORD *a1)
{
  if (a1)
  {
    sub_234179740(a1);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_234179854(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_234170750(a1 + 5, a2 + 5);
  if ((_DWORD)result)
  {
    result = sub_234170750(a1 + 9, a2 + 9);
    if ((_DWORD)result)
    {
      result = sub_234170750(a1 + 1, a2 + 1);
      if ((_DWORD)result)
      {
        *a1 = *a2;
        return 1;
      }
    }
  }
  return result;
}

double sub_2341798B0(void *a1)
{
  sub_234179740(a1);
  return sub_23417945C((uint64_t)a1);
}

uint64_t sub_2341798D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a2 && a4)
    sub_23417945C(a1);
  return sub_234179480(a1, a2, a3, a4);
}

uint64_t sub_234179924(_QWORD *a1, _QWORD *a2)
{
  sub_23417945C((uint64_t)a1);
  return sub_234179854(a1, a2);
}

_DWORD *sub_234179950(char *__src, size_t __n, _DWORD *a3)
{
  __int128 v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, 76);
  v5 = xmmword_2342E2070;
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_234179B40, (uint64_t)&v5, (char *)v6 + 8, (_DWORD *)&v6[4] + 2, (_DWORD *)v6 + 1, v6, __src, __n);
  sub_234179A58(a3, (unint64_t)&v5);
  return a3;
}

uint64_t sub_2341799F8(_OWORD *a1)
{
  *(_OWORD *)((char *)a1 + 76) = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = xmmword_2342E2070;
  return 1;
}

uint64_t sub_234179A1C(uint64_t a1, char *__src, size_t __n)
{
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_234179B40, a1, (char *)(a1 + 24), (_DWORD *)(a1 + 88), (_DWORD *)(a1 + 20), (_DWORD *)(a1 + 16), __src, __n);
  return 1;
}

uint64_t sub_234179A58(_DWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2 + 24;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(unsigned int *)(a2 + 88);
  *(_BYTE *)(a2 + 24 + v6) = 0x80;
  v7 = v6 + 1;
  if (v6 >= 0x38)
  {
    if ((_DWORD)v6 != 63)
      bzero((void *)(v4 + v7), 63 - v6);
    sub_234179B40(a2, (_DWORD *)v4, 1);
    v7 = 0;
    goto LABEL_6;
  }
  if (v6 != 55)
LABEL_6:
    bzero((void *)(v4 + v7), 56 - v7);
  *(_QWORD *)(a2 + 80) = v5;
  sub_234179B40(a2, (_DWORD *)v4, 1);
  *(_DWORD *)(a2 + 88) = 0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *a1 = *(_DWORD *)a2;
  a1[1] = *(_DWORD *)(a2 + 4);
  a1[2] = *(_DWORD *)(a2 + 8);
  a1[3] = *(_DWORD *)(a2 + 12);
  return 1;
}

unint64_t sub_234179B38(unint64_t a1, _DWORD *a2)
{
  return sub_234179B40(a1, a2, 1);
}

unint64_t sub_234179B40(unint64_t result, _DWORD *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  int v69;
  unsigned int v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  unint64_t v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  int v88;
  int v89;
  unsigned int v90;
  unint64_t v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  unint64_t v97;
  int v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  unint64_t v107;
  int v108;
  int v109;
  unsigned int v110;
  unint64_t v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  unint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  unint64_t v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unint64_t v131;
  unsigned int v132;
  int v133;
  int v134;
  unint64_t v135;
  unsigned int v136;
  int v137;
  int v138;
  unint64_t v139;
  unsigned int v140;
  int v141;
  unint64_t v142;
  unsigned int v143;
  int v144;
  int v145;
  unint64_t v146;
  unsigned int v147;
  int v148;
  int v149;
  unint64_t v150;
  unsigned int v151;
  int v152;
  unint64_t v153;
  unsigned int v154;
  int v155;
  int v156;
  unint64_t v157;
  unsigned int v158;
  int v159;
  int v160;
  unint64_t v161;
  unsigned int v162;
  int v163;
  unint64_t v164;
  unsigned int v165;
  int v166;
  int v167;
  unint64_t v168;
  unsigned int v169;
  int v170;
  unint64_t v171;
  unsigned int v172;
  int v173;
  int v174;
  unint64_t v175;
  unsigned int v176;
  int v177;
  unint64_t v178;
  unsigned int v179;
  int v180;
  unint64_t v181;
  int v182;
  _DWORD *v183;
  uint64_t v184;

  v183 = (_DWORD *)result;
  if (a3)
  {
    v4 = *(_DWORD *)(result + 8);
    v3 = *(_DWORD *)(result + 12);
    v6 = *(_DWORD *)result;
    v5 = *(_DWORD *)(result + 4);
    do
    {
      v184 = a3;
      v7 = a2[1];
      v9 = __ROR4__((v4 & v5 | v3 & ~v5) + v6 + *a2, 29);
      v8 = v4 & ~v9;
      v10 = v5 & v9;
      HIDWORD(v12) = (v4 & v5 | v3 & ~v5) + v6 + *a2;
      LODWORD(v12) = HIDWORD(v12);
      v11 = v12 >> 29;
      v14 = a2[2];
      v13 = a2[3];
      HIDWORD(v12) = v7 + v3 + (v10 | v8);
      LODWORD(v12) = HIDWORD(v12);
      v15 = v12 >> 25;
      LODWORD(v12) = v14 + v4 + (v11 & __ROR4__(HIDWORD(v12), 25) | v5 & ~__ROR4__(HIDWORD(v12), 25));
      HIDWORD(v12) = v12;
      v16 = v12 >> 21;
      LODWORD(v12) = v13 + v5 + (v15 & __ROR4__(v12, 21) | v11 & ~__ROR4__(v12, 21));
      HIDWORD(v12) = v12;
      v17 = v12 >> 13;
      v19 = a2[4];
      v18 = a2[5];
      LODWORD(v12) = v19 + v11 + (v16 & __ROR4__(v12, 13) | v15 & ~__ROR4__(v12, 13));
      HIDWORD(v12) = v12;
      v20 = v12 >> 29;
      v21 = v15 + v18 + (v17 & __ROR4__(v12, 29) | v16 & ~__ROR4__(v12, 29));
      v22 = a2[6];
      v23 = a2[7];
      v25 = __PAIR64__(v21, __ROR4__(v21, 25));
      v24 = v20 & v25;
      LODWORD(v25) = v21;
      v26 = v25 >> 25;
      HIDWORD(v25) = v16 + v22 + (v24 | v17 & ~__ROR4__(v21, 25));
      LODWORD(v25) = HIDWORD(v25);
      v27 = v25 >> 21;
      LODWORD(v25) = v17 + v23 + (v26 & __ROR4__(HIDWORD(v25), 21) | v20 & ~__ROR4__(HIDWORD(v25), 21));
      HIDWORD(v25) = v25;
      v28 = v25 >> 13;
      v30 = a2[8];
      v29 = a2[9];
      v31 = v20 + v30 + (v27 & __ROR4__(v25, 13) | v26 & ~__ROR4__(v25, 13));
      v33 = __PAIR64__(v31, __ROR4__(v31, 29));
      v32 = v28 & v33;
      LODWORD(v33) = v31;
      v34 = v33 >> 29;
      v35 = v26 + v29 + (v32 | v27 & ~__ROR4__(v31, 29));
      v37 = a2[10];
      v36 = a2[11];
      HIDWORD(v33) = v35;
      LODWORD(v33) = v35;
      v38 = v33 >> 25;
      LODWORD(v33) = v27 + v37 + (v34 & __ROR4__(v35, 25) | v28 & ~__ROR4__(v35, 25));
      HIDWORD(v33) = v33;
      v39 = v33 >> 21;
      LODWORD(v33) = v28 + v36 + (v38 & __ROR4__(v33, 21) | v34 & ~__ROR4__(v33, 21));
      HIDWORD(v33) = v33;
      v40 = v33 >> 13;
      v42 = a2[12];
      v41 = a2[13];
      LODWORD(v33) = v34 + v42 + (v39 & __ROR4__(v33, 13) | v38 & ~__ROR4__(v33, 13));
      HIDWORD(v33) = v33;
      v43 = v33 >> 29;
      v44 = v38 + v41 + (v40 & __ROR4__(v33, 29) | v39 & ~__ROR4__(v33, 29));
      v46 = a2[14];
      v45 = a2[15];
      v47 = v39 + v46 + (v43 & __ROR4__(v44, 25) | v40 & ~__ROR4__(v44, 25));
      HIDWORD(v33) = v47;
      LODWORD(v33) = v47;
      v48 = v33 >> 21;
      v50 = __PAIR64__(v44, __ROR4__(v44, 25));
      v49 = v48 & v50;
      v51 = v40 + v45 + (v48 & v50 | v43 & ~__ROR4__(v47, 21));
      LODWORD(v50) = v44;
      v52 = v50 >> 25;
      v53 = __PAIR64__(v51, __ROR4__(v51, 13));
      v54 = (v48 | __ROR4__(v44, 25)) & v53 | v49;
      LODWORD(v53) = v51;
      v55 = v53 >> 13;
      v56 = *a2 + 1518500249 + v43 + v54;
      v57 = v19 + 1518500249 + v52;
      v58 = __PAIR64__(v56, __ROR4__(v56, 29));
      v59 = (v55 | __ROR4__(v47, 21)) & v58 | v55 & __ROR4__(v47, 21);
      LODWORD(v58) = v56;
      v60 = v58 >> 29;
      v61 = v57 + v59;
      v62 = __PAIR64__(v61, __ROR4__(v61, 27));
      v63 = (v60 | __ROR4__(v51, 13)) & v62 | v60 & __ROR4__(v51, 13);
      LODWORD(v62) = v61;
      v64 = v62 >> 27;
      v65 = v30 + 1518500249 + v48 + v63;
      v66 = v42 + 1518500249 + v55;
      v67 = __PAIR64__(v65, __ROR4__(v65, 23));
      v68 = (v64 | __ROR4__(v56, 29)) & v67 | v64 & __ROR4__(v56, 29);
      LODWORD(v67) = v65;
      v69 = v67 >> 23;
      v70 = v66 + v68;
      v71 = __PAIR64__(v70, __ROR4__(v70, 19));
      v72 = (v69 | __ROR4__(v61, 27)) & v71 | v69 & __ROR4__(v61, 27);
      v73 = v7 + 1518500249 + v60;
      LODWORD(v71) = v70;
      v74 = v71 >> 19;
      v75 = v73 + v72;
      v76 = v18 + 1518500249 + v64;
      v77 = __PAIR64__(v75, __ROR4__(v75, 29));
      v78 = (v74 | __ROR4__(v65, 23)) & v77 | v74 & __ROR4__(v65, 23);
      LODWORD(v77) = v75;
      v79 = v77 >> 29;
      v80 = v76 + v78;
      v81 = __PAIR64__(v80, __ROR4__(v80, 27));
      v82 = (v79 | __ROR4__(v70, 19)) & v81 | v79 & __ROR4__(v70, 19);
      v83 = v29 + 1518500249 + v69;
      LODWORD(v81) = v80;
      v84 = v81 >> 27;
      v85 = v83 + v82;
      v86 = v41 + 1518500249 + v74;
      v87 = __PAIR64__(v85, __ROR4__(v85, 23));
      v88 = (v84 | __ROR4__(v75, 29)) & v87 | v84 & __ROR4__(v75, 29);
      LODWORD(v87) = v85;
      v89 = v87 >> 23;
      v90 = v86 + v88;
      v91 = __PAIR64__(v90, __ROR4__(v90, 19));
      v92 = (v89 | __ROR4__(v80, 27)) & v91 | v89 & __ROR4__(v80, 27);
      v93 = v14 + 1518500249 + v79;
      LODWORD(v91) = v90;
      v94 = v91 >> 19;
      v95 = v93 + v92;
      v96 = v22 + 1518500249 + v84;
      v97 = __PAIR64__(v95, __ROR4__(v95, 29));
      v98 = (v94 | __ROR4__(v85, 23)) & v97 | v94 & __ROR4__(v85, 23);
      LODWORD(v97) = v95;
      v99 = v97 >> 29;
      v100 = v96 + v98;
      v101 = __PAIR64__(v100, __ROR4__(v100, 27));
      v102 = (v99 | __ROR4__(v90, 19)) & v101 | v99 & __ROR4__(v90, 19);
      v103 = v37 + 1518500249 + v89;
      LODWORD(v101) = v100;
      v104 = v101 >> 27;
      v105 = v103 + v102;
      v106 = v46 + 1518500249 + v94;
      v107 = __PAIR64__(v105, __ROR4__(v105, 23));
      v108 = (v104 | __ROR4__(v95, 29)) & v107 | v104 & __ROR4__(v95, 29);
      LODWORD(v107) = v105;
      v109 = v107 >> 23;
      v110 = v106 + v108;
      v111 = __PAIR64__(v110, __ROR4__(v110, 19));
      v112 = (v109 | __ROR4__(v100, 27)) & v111 | v109 & __ROR4__(v100, 27);
      v113 = v13 + 1518500249 + v99;
      LODWORD(v111) = v110;
      v114 = v111 >> 19;
      v115 = v113 + v112;
      v116 = v23 + 1518500249 + v104;
      v117 = __PAIR64__(v115, __ROR4__(v115, 29));
      v118 = (v114 | __ROR4__(v105, 23)) & v117 | v114 & __ROR4__(v105, 23);
      LODWORD(v117) = v115;
      v119 = v117 >> 29;
      v120 = v116 + v118;
      v121 = __PAIR64__(v120, __ROR4__(v120, 27));
      v122 = (v119 | __ROR4__(v110, 19)) & v121 | v119 & __ROR4__(v110, 19);
      v123 = v36 + 1518500249 + v109;
      LODWORD(v121) = v120;
      v124 = v121 >> 27;
      v125 = v123 + v122;
      v126 = v45 + 1518500249 + v114 + ((v124 | __ROR4__(v115, 29)) & __ROR4__(v125, 23) | v124 & __ROR4__(v115, 29));
      HIDWORD(v121) = v126;
      LODWORD(v121) = v126;
      v127 = v121 >> 19;
      v128 = *a2 + 1859775393 + v119;
      v129 = v127 ^ __ROR4__(v125, 23);
      v130 = v128 + (v129 ^ __ROR4__(v120, 27));
      v131 = __PAIR64__(v125, __ROR4__(v130, 29));
      v132 = v30 + 1859775393 + v124 + (v129 ^ v131);
      LODWORD(v131) = v125;
      v133 = v19 + 1859775393 + (v131 >> 23);
      HIDWORD(v131) = v130;
      LODWORD(v131) = v130;
      v134 = v131 >> 29;
      v135 = __PAIR64__(v132, __ROR4__(v132, 23));
      v136 = v133 + (v134 ^ __ROR4__(v126, 19) ^ v135);
      v137 = v14 + 1859775393 + v134;
      LODWORD(v135) = v132;
      v138 = v135 >> 23;
      v139 = __PAIR64__(v136, __ROR4__(v136, 21));
      v140 = v42 + 1859775393 + v127 + (v138 ^ __ROR4__(v130, 29) ^ v139);
      LODWORD(v139) = v136;
      v141 = v139 >> 21;
      v142 = __PAIR64__(v140, __ROR4__(v140, 17));
      v143 = v137 + (v141 ^ __ROR4__(v132, 23) ^ v142);
      v144 = v37 + 1859775393 + v138;
      LODWORD(v142) = v140;
      v145 = v142 >> 17;
      v146 = __PAIR64__(v143, __ROR4__(v143, 29));
      v147 = v144 + (v145 ^ __ROR4__(v136, 21) ^ v146);
      v148 = v22 + 1859775393 + v141;
      LODWORD(v146) = v143;
      v149 = v146 >> 29;
      v150 = __PAIR64__(v147, __ROR4__(v147, 23));
      v151 = v148 + (v149 ^ __ROR4__(v140, 17) ^ v150);
      LODWORD(v150) = v147;
      v152 = v150 >> 23;
      v153 = __PAIR64__(v151, __ROR4__(v151, 21));
      v154 = v46 + 1859775393 + v145 + (v152 ^ __ROR4__(v143, 29) ^ v153);
      v155 = v7 + 1859775393 + v149;
      LODWORD(v153) = v151;
      v156 = v153 >> 21;
      v157 = __PAIR64__(v154, __ROR4__(v154, 17));
      v158 = v155 + (v156 ^ __ROR4__(v147, 23) ^ v157);
      v159 = v18 + 1859775393 + v156;
      LODWORD(v157) = v154;
      v160 = v157 >> 17;
      v161 = __PAIR64__(v158, __ROR4__(v158, 29));
      v162 = v29 + 1859775393 + v152 + (v160 ^ __ROR4__(v151, 21) ^ v161);
      LODWORD(v161) = v158;
      v163 = v161 >> 29;
      v164 = __PAIR64__(v162, __ROR4__(v162, 23));
      v165 = v159 + (v163 ^ __ROR4__(v154, 17) ^ v164);
      v166 = v41 + 1859775393 + v160;
      LODWORD(v164) = v162;
      v167 = v164 >> 23;
      v168 = __PAIR64__(v165, __ROR4__(v165, 21));
      v169 = v166 + (v167 ^ __ROR4__(v158, 29) ^ v168);
      v170 = v13 + 1859775393 + v163;
      LODWORD(v168) = v165;
      result = (v168 >> 21);
      v171 = __PAIR64__(v169, __ROR4__(v169, 17));
      v172 = v170 + (result ^ __ROR4__(v162, 23) ^ v171);
      v173 = v36 + 1859775393 + v167;
      LODWORD(v171) = v169;
      v174 = v171 >> 17;
      v175 = __PAIR64__(v172, __ROR4__(v172, 29));
      v176 = v173 + (v174 ^ __ROR4__(v165, 21) ^ v175);
      LODWORD(v175) = v172;
      v177 = v175 >> 29;
      v178 = __PAIR64__(v176, __ROR4__(v176, 23));
      v179 = v23 + 1859775393 + result + (v177 ^ __ROR4__(v169, 17) ^ v178);
      LODWORD(v178) = v176;
      v180 = v178 >> 23;
      v181 = __PAIR64__(v179, __ROR4__(v179, 21));
      v182 = v45 + 1859775393 + v174 + (v180 ^ __ROR4__(v172, 29) ^ v181);
      LODWORD(v181) = v179;
      v6 += v177;
      v4 += v181 >> 21;
      v3 += v180;
      HIDWORD(v181) = v182;
      LODWORD(v181) = v182;
      v5 += v181 >> 17;
      *v183 = v6;
      v183[1] = v5;
      v183[2] = v4;
      v183[3] = v3;
      a2 += 16;
      a3 = v184 - 1;
    }
    while (v184 != 1);
  }
  return result;
}

uint64_t (*sub_23417A0E4(uint64_t (*result)(uint64_t, char *, uint64_t), uint64_t a2, char *__dst, _DWORD *a4, _DWORD *a5, _DWORD *a6, char *__src, size_t __n))(uint64_t, char *, uint64_t)
{
  size_t v8;
  char *v9;
  uint64_t (*v13)(uint64_t, char *, uint64_t);
  int v14;
  uint64_t v15;
  uint64_t v16;

  if (__n)
  {
    v8 = __n;
    v9 = __src;
    v13 = result;
    v14 = *a6 + 8 * __n;
    *a5 += __CFADD__(*a6, 8 * __n) + (__n >> 29);
    *a6 = v14;
    v15 = *a4;
    if ((_DWORD)v15)
    {
      if (__n <= 0x3F && v15 + __n < 0x40)
      {
        result = (uint64_t (*)(uint64_t, char *, uint64_t))memcpy(&__dst[v15], __src, __n);
        *a4 += v8;
        return result;
      }
      v16 = 64 - v15;
      if ((_DWORD)v15 != 64)
        memcpy(&__dst[v15], __src, 64 - v15);
      result = (uint64_t (*)(uint64_t, char *, uint64_t))v13(a2, __dst, 1);
      v9 += v16;
      v8 -= v16;
      *a4 = 0;
      *((_OWORD *)__dst + 2) = 0u;
      *((_OWORD *)__dst + 3) = 0u;
      *(_OWORD *)__dst = 0u;
      *((_OWORD *)__dst + 1) = 0u;
    }
    if (v8 >= 0x40)
    {
      result = (uint64_t (*)(uint64_t, char *, uint64_t))v13(a2, v9, v8 >> 6);
      v9 += v8 & 0xFFFFFFFFFFFFFFC0;
      v8 &= 0x3Fu;
    }
    if (v8)
    {
      *a4 = v8;
      return (uint64_t (*)(uint64_t, char *, uint64_t))memcpy(__dst, v9, v8);
    }
  }
  return result;
}

_DWORD *sub_23417A220(char *__src, size_t __n, _DWORD *a3)
{
  __int128 v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, 76);
  v5 = xmmword_2342E2070;
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_23417A3EC, (uint64_t)&v5, (char *)v6 + 8, (_DWORD *)&v6[4] + 2, (_DWORD *)v6 + 1, v6, __src, __n);
  sub_23417A304(a3, (unint64_t)&v5);
  return a3;
}

uint64_t sub_23417A2C8(uint64_t a1, char *__src, size_t __n)
{
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_23417A3EC, a1, (char *)(a1 + 24), (_DWORD *)(a1 + 88), (_DWORD *)(a1 + 20), (_DWORD *)(a1 + 16), __src, __n);
  return 1;
}

uint64_t sub_23417A304(_DWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2 + 24;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(unsigned int *)(a2 + 88);
  *(_BYTE *)(a2 + 24 + v6) = 0x80;
  v7 = v6 + 1;
  if (v6 >= 0x38)
  {
    if ((_DWORD)v6 != 63)
      bzero((void *)(v4 + v7), 63 - v6);
    sub_23417A3EC(a2, (_DWORD *)v4, 1);
    v7 = 0;
    goto LABEL_6;
  }
  if (v6 != 55)
LABEL_6:
    bzero((void *)(v4 + v7), 56 - v7);
  *(_QWORD *)(a2 + 80) = v5;
  sub_23417A3EC(a2, (_DWORD *)v4, 1);
  *(_DWORD *)(a2 + 88) = 0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *a1 = *(_DWORD *)a2;
  a1[1] = *(_DWORD *)(a2 + 4);
  a1[2] = *(_DWORD *)(a2 + 8);
  a1[3] = *(_DWORD *)(a2 + 12);
  return 1;
}

unint64_t sub_23417A3E4(unint64_t a1, _DWORD *a2)
{
  return sub_23417A3EC(a1, a2, 1);
}

unint64_t sub_23417A3EC(unint64_t result, _DWORD *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _DWORD *v85;

  v85 = (_DWORD *)result;
  if (a3)
  {
    v4 = *(_DWORD *)(result + 8);
    v3 = *(_DWORD *)(result + 12);
    v5 = *(_DWORD *)result;
    v6 = *(_DWORD *)(result + 4);
    do
    {
      v7 = a2[1];
      HIDWORD(v8) = v5 + (v4 & v6 | v3 & ~v6) - 680876936 + *a2;
      LODWORD(v8) = HIDWORD(v8);
      v9 = (v8 >> 25) + v6;
      HIDWORD(v8) = v3 + v7 - 389564586 + (v6 & v9 | v4 & ~v9);
      LODWORD(v8) = HIDWORD(v8);
      v10 = (v8 >> 20) + v9;
      result = a2[2];
      v11 = a2[3];
      HIDWORD(v8) = v4 + result + 606105819 + (v9 & v10 | v6 & ~v10);
      LODWORD(v8) = HIDWORD(v8);
      v12 = (v8 >> 15) + v10;
      HIDWORD(v8) = v6 + v11 - 1044525330 + (v10 & v12 | v9 & ~v12);
      LODWORD(v8) = HIDWORD(v8);
      v13 = (v8 >> 10) + v12;
      v14 = a2[4];
      v15 = a2[5];
      HIDWORD(v8) = v14 + v9 - 176418897 + (v12 & v13 | v10 & ~v13);
      LODWORD(v8) = HIDWORD(v8);
      v16 = (v8 >> 25) + v13;
      HIDWORD(v8) = v15 + v10 + 1200080426 + (v13 & v16 | v12 & ~v16);
      LODWORD(v8) = HIDWORD(v8);
      v17 = (v8 >> 20) + v16;
      v19 = a2[6];
      v18 = a2[7];
      HIDWORD(v8) = v19 + v12 - 1473231341 + (v16 & v17 | v13 & ~v17);
      LODWORD(v8) = HIDWORD(v8);
      v20 = (v8 >> 15) + v17;
      HIDWORD(v8) = v18 + v13 - 45705983 + (v17 & v20 | v16 & ~v20);
      LODWORD(v8) = HIDWORD(v8);
      v21 = (v8 >> 10) + v20;
      v23 = a2[8];
      v22 = a2[9];
      HIDWORD(v8) = v23 + v16 + 1770035416 + (v20 & v21 | v17 & ~v21);
      LODWORD(v8) = HIDWORD(v8);
      v24 = (v8 >> 25) + v21;
      HIDWORD(v8) = v22 + v17 - 1958414417 + (v21 & v24 | v20 & ~v24);
      LODWORD(v8) = HIDWORD(v8);
      v25 = (v8 >> 20) + v24;
      v26 = a2[10];
      v27 = a2[11];
      HIDWORD(v8) = v26 + v20 - 42063 + (v24 & v25 | v21 & ~v25);
      LODWORD(v8) = HIDWORD(v8);
      v28 = (v8 >> 15) + v25;
      HIDWORD(v8) = v27 + v21 - 1990404162 + (v25 & v28 | v24 & ~v28);
      LODWORD(v8) = HIDWORD(v8);
      v29 = (v8 >> 10) + v28;
      v31 = a2[12];
      v30 = a2[13];
      HIDWORD(v8) = v31 + v24 + 1804603682 + (v28 & v29 | v25 & ~v29);
      LODWORD(v8) = HIDWORD(v8);
      v32 = (v8 >> 25) + v29;
      HIDWORD(v8) = v30 + v25 - 40341101 + (v29 & v32 | v28 & ~v32);
      LODWORD(v8) = HIDWORD(v8);
      v33 = (v8 >> 20) + v32;
      v35 = a2[14];
      v34 = a2[15];
      HIDWORD(v8) = v35 + v28 - 1502002290 + (v32 & v33 | v29 & ~v33);
      LODWORD(v8) = HIDWORD(v8);
      v36 = (v8 >> 15) + v33;
      HIDWORD(v8) = v34 + v29 + 1236535329 + (v33 & v36 | v32 & ~v36);
      LODWORD(v8) = HIDWORD(v8);
      v37 = (v8 >> 10) + v36;
      HIDWORD(v8) = v7 + v32 - 165796510 + (v37 & v33 | v36 & ~v33);
      LODWORD(v8) = HIDWORD(v8);
      v38 = (v8 >> 27) + v37;
      HIDWORD(v8) = v19 + v33 - 1069501632 + (v38 & v36 | v37 & ~v36);
      LODWORD(v8) = HIDWORD(v8);
      v39 = (v8 >> 23) + v38;
      HIDWORD(v8) = v27 + v36 + 643717713 + (v39 & v37 | v38 & ~v37);
      LODWORD(v8) = HIDWORD(v8);
      v40 = (v8 >> 18) + v39;
      HIDWORD(v8) = *a2 + v37 - 373897302 + (v40 & v38 | v39 & ~v38);
      LODWORD(v8) = HIDWORD(v8);
      v41 = (v8 >> 12) + v40;
      HIDWORD(v8) = v15 + v38 - 701558691 + (v41 & v39 | v40 & ~v39);
      LODWORD(v8) = HIDWORD(v8);
      v42 = (v8 >> 27) + v41;
      HIDWORD(v8) = v26 + v39 + 38016083 + (v42 & v40 | v41 & ~v40);
      LODWORD(v8) = HIDWORD(v8);
      v43 = (v8 >> 23) + v42;
      HIDWORD(v8) = v34 + v40 - 660478335 + (v43 & v41 | v42 & ~v41);
      LODWORD(v8) = HIDWORD(v8);
      v44 = (v8 >> 18) + v43;
      HIDWORD(v8) = v14 + v41 - 405537848 + (v44 & v42 | v43 & ~v42);
      LODWORD(v8) = HIDWORD(v8);
      v45 = (v8 >> 12) + v44;
      HIDWORD(v8) = v22 + v42 + 568446438 + (v45 & v43 | v44 & ~v43);
      LODWORD(v8) = HIDWORD(v8);
      v46 = (v8 >> 27) + v45;
      HIDWORD(v8) = v35 + v43 - 1019803690 + (v46 & v44 | v45 & ~v44);
      LODWORD(v8) = HIDWORD(v8);
      v47 = (v8 >> 23) + v46;
      HIDWORD(v8) = v11 + v44 - 187363961 + (v47 & v45 | v46 & ~v45);
      LODWORD(v8) = HIDWORD(v8);
      v48 = (v8 >> 18) + v47;
      HIDWORD(v8) = v23 + v45 + 1163531501 + (v48 & v46 | v47 & ~v46);
      LODWORD(v8) = HIDWORD(v8);
      v49 = (v8 >> 12) + v48;
      HIDWORD(v8) = v30 + v46 - 1444681467 + (v49 & v47 | v48 & ~v47);
      LODWORD(v8) = HIDWORD(v8);
      v50 = (v8 >> 27) + v49;
      HIDWORD(v8) = result + v47 - 51403784 + (v50 & v48 | v49 & ~v48);
      LODWORD(v8) = HIDWORD(v8);
      v51 = (v8 >> 23) + v50;
      HIDWORD(v8) = v18 + v48 + 1735328473 + (v51 & v49 | v50 & ~v49);
      LODWORD(v8) = HIDWORD(v8);
      v52 = (v8 >> 18) + v51;
      HIDWORD(v8) = v31 + v49 - 1926607734 + ((v52 ^ v51) & v50 ^ v51);
      LODWORD(v8) = HIDWORD(v8);
      v53 = (v8 >> 12) + v52;
      HIDWORD(v8) = v15 + v50 - 378558 + (v52 ^ v51 ^ v53);
      LODWORD(v8) = HIDWORD(v8);
      v54 = (v8 >> 28) + v53;
      HIDWORD(v8) = v23 + v51 - 2022574463 + (v53 ^ v52 ^ v54);
      LODWORD(v8) = HIDWORD(v8);
      v55 = (v8 >> 21) + v54;
      HIDWORD(v8) = v27 + v52 + 1839030562 + (v54 ^ v53 ^ v55);
      LODWORD(v8) = HIDWORD(v8);
      v56 = (v8 >> 16) + v55;
      HIDWORD(v8) = v35 + v53 - 35309556 + (v55 ^ v54 ^ v56);
      LODWORD(v8) = HIDWORD(v8);
      v57 = (v8 >> 9) + v56;
      HIDWORD(v8) = v7 + v54 - 1530992060 + (v56 ^ v55 ^ v57);
      LODWORD(v8) = HIDWORD(v8);
      v58 = (v8 >> 28) + v57;
      HIDWORD(v8) = v14 + v55 + 1272893353 + (v57 ^ v56 ^ v58);
      LODWORD(v8) = HIDWORD(v8);
      v59 = (v8 >> 21) + v58;
      HIDWORD(v8) = v18 + v56 - 155497632 + (v58 ^ v57 ^ v59);
      LODWORD(v8) = HIDWORD(v8);
      v60 = (v8 >> 16) + v59;
      HIDWORD(v8) = v26 + v57 - 1094730640 + (v59 ^ v58 ^ v60);
      LODWORD(v8) = HIDWORD(v8);
      v61 = (v8 >> 9) + v60;
      HIDWORD(v8) = v30 + v58 + 681279174 + (v60 ^ v59 ^ v61);
      LODWORD(v8) = HIDWORD(v8);
      v62 = (v8 >> 28) + v61;
      HIDWORD(v8) = *a2 + v59 - 358537222 + (v61 ^ v60 ^ v62);
      LODWORD(v8) = HIDWORD(v8);
      v63 = (v8 >> 21) + v62;
      HIDWORD(v8) = v11 + v60 - 722521979 + (v62 ^ v61 ^ v63);
      LODWORD(v8) = HIDWORD(v8);
      v64 = (v8 >> 16) + v63;
      HIDWORD(v8) = v19 + v61 + 76029189 + (v63 ^ v62 ^ v64);
      LODWORD(v8) = HIDWORD(v8);
      v65 = (v8 >> 9) + v64;
      HIDWORD(v8) = v22 + v62 - 640364487 + (v64 ^ v63 ^ v65);
      LODWORD(v8) = HIDWORD(v8);
      v66 = (v8 >> 28) + v65;
      HIDWORD(v8) = v31 + v63 - 421815835 + (v65 ^ v64 ^ v66);
      LODWORD(v8) = HIDWORD(v8);
      v67 = (v8 >> 21) + v66;
      HIDWORD(v8) = v34 + v64 + 530742520 + (v66 ^ v65 ^ v67);
      LODWORD(v8) = HIDWORD(v8);
      v68 = (v8 >> 16) + v67;
      HIDWORD(v8) = result + v65 - 995338651 + (v67 ^ v66 ^ v68);
      LODWORD(v8) = HIDWORD(v8);
      v69 = (v8 >> 9) + v68;
      HIDWORD(v8) = *a2 + v66 - 198630844 + ((v69 | ~v67) ^ v68);
      LODWORD(v8) = HIDWORD(v8);
      v70 = (v8 >> 26) + v69;
      HIDWORD(v8) = v18 + v67 + 1126891415 + ((v70 | ~v68) ^ v69);
      LODWORD(v8) = HIDWORD(v8);
      v71 = (v8 >> 22) + v70;
      HIDWORD(v8) = v35 + v68 - 1416354905 + ((v71 | ~v69) ^ v70);
      LODWORD(v8) = HIDWORD(v8);
      v72 = (v8 >> 17) + v71;
      HIDWORD(v8) = v15 + v69 - 57434055 + ((v72 | ~v70) ^ v71);
      LODWORD(v8) = HIDWORD(v8);
      v73 = (v8 >> 11) + v72;
      HIDWORD(v8) = v31 + v70 + 1700485571 + ((v73 | ~v71) ^ v72);
      LODWORD(v8) = HIDWORD(v8);
      v74 = (v8 >> 26) + v73;
      HIDWORD(v8) = v11 + v71 - 1894986606 + ((v74 | ~v72) ^ v73);
      LODWORD(v8) = HIDWORD(v8);
      v75 = (v8 >> 22) + v74;
      HIDWORD(v8) = v26 + v72 - 1051523 + ((v75 | ~v73) ^ v74);
      LODWORD(v8) = HIDWORD(v8);
      v76 = (v8 >> 17) + v75;
      HIDWORD(v8) = v7 + v73 - 2054922799 + ((v76 | ~v74) ^ v75);
      LODWORD(v8) = HIDWORD(v8);
      v77 = (v8 >> 11) + v76;
      HIDWORD(v8) = v23 + v74 + 1873313359 + ((v77 | ~v75) ^ v76);
      LODWORD(v8) = HIDWORD(v8);
      v78 = (v8 >> 26) + v77;
      HIDWORD(v8) = v34 + v75 - 30611744 + ((v78 | ~v76) ^ v77);
      LODWORD(v8) = HIDWORD(v8);
      v79 = (v8 >> 22) + v78;
      HIDWORD(v8) = v19 + v76 - 1560198380 + ((v79 | ~v77) ^ v78);
      LODWORD(v8) = HIDWORD(v8);
      v80 = (v8 >> 17) + v79;
      HIDWORD(v8) = v30 + v77 + 1309151649 + ((v80 | ~v78) ^ v79);
      LODWORD(v8) = HIDWORD(v8);
      v81 = (v8 >> 11) + v80;
      HIDWORD(v8) = v14 + v78 - 145523070 + ((v81 | ~v79) ^ v80);
      LODWORD(v8) = HIDWORD(v8);
      v82 = (v8 >> 26) + v81;
      HIDWORD(v8) = v27 + v79 - 1120210379 + ((v82 | ~v80) ^ v81);
      LODWORD(v8) = HIDWORD(v8);
      v83 = (v8 >> 22) + v82;
      HIDWORD(v8) = result + v80 + 718787259 + ((v83 | ~v81) ^ v82);
      LODWORD(v8) = HIDWORD(v8);
      v84 = (v8 >> 17) + v83;
      v5 += v82;
      HIDWORD(v8) = v22 + v81 - 343485551 + ((v84 | ~v82) ^ v83);
      LODWORD(v8) = HIDWORD(v8);
      v6 += v84 + (v8 >> 11);
      v4 += v84;
      v3 += v83;
      *v85 = v5;
      v85[1] = v6;
      v85[2] = v4;
      v85[3] = v3;
      a2 += 16;
      --a3;
    }
    while (a3);
  }
  return result;
}

int8x16_t sub_23417ADFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void (*a8)(uint64_t, uint64_t, uint64_t))
{
  unint64_t i;
  const char *v16;
  int8x16_t v17;
  char v18;
  char v19;
  __int8 v20;
  uint8x16_t v21;
  int8x16_t v22;
  int8x16_t result;
  int8x16_t v24;
  int8x16_t v25;
  int v26;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v26 = 1 << (i & 7 ^ 7);
      v16 = (const char *)a5;
      v17 = vld1q_dup_s8(v16++);
      v25 = v17;
      v18 = (v26 & *(_BYTE *)(a1 + (i >> 3))) != 0;
      v17.i64[0] = *(_QWORD *)v16;
      v17.i32[2] = *(_DWORD *)(a5 + 9);
      v17.i16[6] = *(_WORD *)(a5 + 13);
      v17.i8[14] = *(_BYTE *)(a5 + 15);
      v24 = v17;
      a8(a5, a5, a4);
      v19 = *(_BYTE *)a5 ^ (v18 << 7);
      v20 = v18 << 7;
      if (a7)
        v20 = *(_BYTE *)a5 ^ (v18 << 7);
      v21 = (uint8x16_t)v24;
      v22 = vextq_s8(v25, v24, 0xFuLL);
      v21.i8[15] = v20;
      result = vorrq_s8(vaddq_s8(v22, v22), (int8x16_t)vshrq_n_u8(vshrq_n_u8(v21, 1uLL), 6uLL));
      *(int8x16_t *)a5 = result;
      *(_BYTE *)(a2 + (i >> 3)) = *(_BYTE *)(a2 + (i >> 3)) & ~(_BYTE)v26 | ((v19 & 0x80) >> (i & 7));
    }
  }
  return result;
}

uint64_t sub_23417AF30(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, int a7, uint64_t (*a8)(__int128 *, __int128 *, uint64_t))
{
  uint64_t v12;
  char *v14;
  char v15;
  char v16;
  char v17;
  __int128 v18;

  if (a3)
  {
    v12 = a3;
    v14 = (char *)result;
    do
    {
      v18 = *a5;
      result = a8(a5, a5, a4);
      v16 = *v14++;
      v15 = v16;
      v17 = *(_BYTE *)a5 ^ v16;
      if (a7)
        v15 = v17;
      *a2++ = v17;
      *(_QWORD *)a5 = *(_QWORD *)((char *)&v18 + 1);
      *(_QWORD *)((char *)a5 + 7) = *((_QWORD *)&v18 + 1);
      *((_BYTE *)a5 + 15) = v15;
      --v12;
    }
    while (v12);
  }
  return result;
}

int8x16_t (**sub_23417B008(int8x16_t (**result)(int8x16_t *a1, uint64_t *a2), int8x16_t (**a2)(int8x16_t *a1, uint64_t *a2, int8x16_t *a3, unint64_t a4), unint64_t *a3, _DWORD *a4, unint64_t *a5))(int8x16_t *a1, uint64_t *a2)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *a4 = 0;
  v5 = bswap64(*a5);
  *((_QWORD *)&v7 + 1) = v5;
  *(_QWORD *)&v7 = bswap64(a5[1]);
  v6 = v7 >> 63;
  *((_QWORD *)&v7 + 1) = v7;
  *(_QWORD *)&v7 = v5;
  *a3 = (v5 >> 63) & 0xC200000000000000 ^ v6;
  a3[1] = v7 >> 63;
  *result = sub_23417B074;
  *a2 = sub_23417B0EC;
  return result;
}

unint64_t *sub_23417B04C(unint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = a2[1];
  result[1] = v2;
  *((_QWORD *)&v4 + 1) = *a2;
  *(_QWORD *)&v4 = v2;
  v3 = v4 >> 63;
  *((_QWORD *)&v4 + 1) = v2;
  *(_QWORD *)&v4 = *a2;
  *result = ((uint64_t)*a2 >> 63) & 0xC200000000000000 ^ v3;
  result[1] = v4 >> 63;
  return result;
}

int8x16_t sub_23417B074(int8x16_t *a1, uint64_t *a2)
{
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t result;
  int8x16_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = vrev64q_s8(*a1);
  v6 = vextq_s8(v3, v3, 8uLL);
  sub_23417BDD0(v6.i64, a2);
  v4 = vrev64q_s8(v6);
  result = vextq_s8(v4, v4, 8uLL);
  *a1 = result;
  return result;
}

int8x16_t sub_23417B0EC(int8x16_t *a1, uint64_t *a2, int8x16_t *a3, unint64_t a4)
{
  int8x16_t v5;
  unint64_t i;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t result;
  int8x16_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = vrev64q_s8(*a1);
  v12 = vextq_s8(v5, v5, 8uLL);
  if (a4 >= 0x10)
  {
    for (i = a4; i > 0xF; i -= 16)
    {
      v9 = *a3++;
      v10 = vrev64q_s8(v9);
      v12 = veorq_s8(v12, vextq_s8(v10, v10, 8uLL));
      sub_23417BDD0(v12.i64, a2);
    }
    v5 = vextq_s8(v12, v12, 8uLL);
  }
  result = vrev64q_s8(v5);
  *a1 = result;
  return result;
}

uint64_t sub_23417B1A8(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  unsigned int v8;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = a3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (a4 != 12)
  {
    if (a4 < 0x10)
    {
      i = a4;
      if (!a4)
      {
LABEL_12:
        *(_QWORD *)(a1 + 8) ^= bswap64(8 * a4);
        sub_23417B074((int8x16_t *)a1, (uint64_t *)(a1 + 80));
        v8 = bswap32(*(_DWORD *)(a1 + 12)) + 1;
        goto LABEL_13;
      }
    }
    else
    {
      for (i = a4; i > 0xF; i -= 16)
      {
        v11 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)a1 ^= *v4;
        *(_QWORD *)(a1 + 8) = v4[1] ^ v11;
        sub_23417B074((int8x16_t *)a1, (uint64_t *)(a1 + 80));
        v4 += 2;
      }
      if (!i)
        goto LABEL_12;
    }
    v12 = 0;
    do
    {
      *(_BYTE *)(a1 + v12) ^= *((_BYTE *)v4 + v12);
      ++v12;
    }
    while (i != v12);
    sub_23417B074((int8x16_t *)a1, (uint64_t *)(a1 + 80));
    goto LABEL_12;
  }
  v7 = *a3;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 15) = 1;
  v8 = 2;
LABEL_13:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 352))(a1, a1 + 32, a2);
  *(_DWORD *)(a1 + 12) = bswap32(v8);
  return result;
}

uint64_t sub_23417B2E4(int8x16_t *a1, int8x16_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  char v8;
  unsigned int v10;
  __int8 v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  __int8 v15;

  if (a1[3].i64[1])
    return 0;
  result = 0;
  v5 = a1[3].i64[0];
  v6 = __CFADD__(v5, a3);
  v7 = v5 + a3;
  v8 = v6;
  if (v7 <= 0x2000000000000000 && (v8 & 1) == 0)
  {
    a1[3].i64[0] = v7;
    v10 = a1[23].u32[1];
    if (v10)
    {
      if (!a3)
        goto LABEL_22;
      do
      {
        v11 = a2->i8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        a1[4].i8[v10] ^= v11;
        v12 = a3 - 1;
        v10 = ((_BYTE)v10 + 1) & 0xF;
        if (!v10)
          break;
        --a3;
      }
      while (a3);
      if (v10)
        goto LABEL_22;
      sub_23417B074(a1 + 4, a1[5].i64);
    }
    else
    {
      v12 = a3;
    }
    if ((v12 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      sub_23417B0EC(a1 + 4, a1[5].i64, a2, v12 & 0xFFFFFFFFFFFFFFF0);
      a2 = (int8x16_t *)((char *)a2 + (v12 & 0xFFFFFFFFFFFFFFF0));
      v12 &= 0xFu;
    }
    if (v12)
    {
      v13 = a1 + 4;
      v14 = v12;
      do
      {
        v15 = a2->i8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        v13->i8[0] ^= v15;
        v13 = (int8x16_t *)((char *)v13 + 1);
        --v14;
      }
      while (v14);
      v10 = v12;
    }
    else
    {
      v10 = 0;
    }
LABEL_22:
    a1[23].i32[1] = v10;
    return 1;
  }
  return result;
}

uint64_t sub_23417B3F0(int8x16_t *a1, uint64_t a2, char *a3, int8x16_t *a4, unint64_t a5, int8x16_t a6)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t *i64;
  void (*v17)(int8x16_t *, int8x16_t *, uint64_t, __n128);
  uint64_t v18;
  char v19;
  __int8 *v20;
  __int8 v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int8x16_t *v25;
  unint64_t v26;
  __int8 *v27;
  __int8 v28;
  unint64_t v29;

  result = 0;
  v8 = a1[3].i64[1];
  v9 = __CFADD__(v8, a5);
  v10 = v8 + a5;
  v11 = v9;
  if (v10 <= 0xFFFFFFFE0 && (v11 & 1) == 0)
  {
    v12 = a5;
    i64 = a1[5].i64;
    v17 = (void (*)(int8x16_t *, int8x16_t *, uint64_t, __n128))a1[22].i64[0];
    a1[3].i64[1] = v10;
    if (a1[23].i32[1])
    {
      a6 = sub_23417B074(a1 + 4, a1[5].i64);
      a1[23].i32[1] = 0;
    }
    LODWORD(v18) = a1[23].i32[0];
    if ((_DWORD)v18)
    {
      if (!v12)
        goto LABEL_28;
      do
      {
        v19 = *a3++;
        v20 = &a1->i8[v18];
        v21 = v20[16] ^ v19;
        a4->i8[0] = v21;
        a4 = (int8x16_t *)((char *)a4 + 1);
        v20[64] ^= v21;
        v22 = v12 - 1;
        LODWORD(v18) = ((_BYTE)v18 + 1) & 0xF;
        if (!(_DWORD)v18)
          break;
        --v12;
      }
      while (v12);
      if ((_DWORD)v18)
      {
LABEL_28:
        a1[23].i32[0] = v18;
        return 1;
      }
      a6 = sub_23417B074(a1 + 4, a1[5].i64);
    }
    else
    {
      v22 = v12;
    }
    v23 = bswap32(a1->u32[3]);
    if (v22 >= 0xC00)
    {
      do
      {
        v29 = v22;
        v24 = -3072;
        do
        {
          v25 = &a4[(unint64_t)v24 / 0x10];
          v17(a1, a1 + 1, a2, (__n128)a6);
          a1->i32[3] = bswap32(++v23);
          v25[192].i64[0] = a1[1].i64[0] ^ *(_QWORD *)&a3[v24 + 3072];
          v25[192].i64[1] = a1[1].i64[1] ^ *(_QWORD *)&a3[v24 + 3080];
          v24 += 16;
        }
        while (v24);
        a6 = sub_23417B0EC(a1 + 4, a1[5].i64, a4, 0xC00uLL);
        v22 -= 3072;
        a4 += 192;
        a3 += 3072;
      }
      while (v29 - 3072 > 0xBFF);
      i64 = a1[5].i64;
    }
    v26 = v22 & 0xFF0;
    if ((v22 & 0xFF0) != 0)
    {
      do
      {
        v17(a1, a1 + 1, a2, (__n128)a6);
        a1->i32[3] = bswap32(++v23);
        a4->i64[0] = a1[1].i64[0] ^ *(_QWORD *)a3;
        a4->i64[1] = a1[1].i64[1] ^ *((_QWORD *)a3 + 1);
        ++a4;
        a3 += 16;
        v22 -= 16;
      }
      while (v22 > 0xF);
      a6 = sub_23417B0EC(a1 + 4, i64, (int8x16_t *)((char *)a4 - v26), v26);
    }
    if (v22)
    {
      v17(a1, a1 + 1, a2, (__n128)a6);
      v18 = 0;
      a1->i32[3] = bswap32(v23 + 1);
      do
      {
        v27 = &a1->i8[v18];
        v28 = v27[16] ^ a3[v18];
        a4->i8[v18] = v28;
        v27[64] ^= v28;
        ++v18;
      }
      while (v22 != v18);
    }
    else
    {
      LODWORD(v18) = 0;
    }
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_23417B65C(int8x16_t *a1, uint64_t a2, int8x16_t *a3, uint64_t *a4, unint64_t a5, int8x16_t a6)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t *i64;
  void (*v17)(int8x16_t *, int8x16_t *, uint64_t, __n128);
  uint64_t v18;
  __int8 v19;
  __int8 *v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t i;
  uint64_t *v24;
  unint64_t v25;
  __int8 v26;
  __int8 *v27;
  unint64_t v28;

  result = 0;
  v8 = a1[3].i64[1];
  v9 = __CFADD__(v8, a5);
  v10 = v8 + a5;
  v11 = v9;
  if (v10 <= 0xFFFFFFFE0 && (v11 & 1) == 0)
  {
    v12 = a5;
    i64 = a1[5].i64;
    v17 = (void (*)(int8x16_t *, int8x16_t *, uint64_t, __n128))a1[22].i64[0];
    a1[3].i64[1] = v10;
    if (a1[23].i32[1])
    {
      a6 = sub_23417B074(a1 + 4, a1[5].i64);
      a1[23].i32[1] = 0;
    }
    LODWORD(v18) = a1[23].i32[0];
    if ((_DWORD)v18)
    {
      if (!v12)
        goto LABEL_27;
      do
      {
        v19 = a3->i8[0];
        a3 = (int8x16_t *)((char *)a3 + 1);
        v20 = &a1->i8[v18];
        *(_BYTE *)a4 = v20[16] ^ v19;
        a4 = (uint64_t *)((char *)a4 + 1);
        v20[64] ^= v19;
        v21 = v12 - 1;
        LODWORD(v18) = ((_BYTE)v18 + 1) & 0xF;
        if (!(_DWORD)v18)
          break;
        --v12;
      }
      while (v12);
      if ((_DWORD)v18)
      {
LABEL_27:
        a1[23].i32[0] = v18;
        return 1;
      }
      a6 = sub_23417B074(a1 + 4, a1[5].i64);
    }
    else
    {
      v21 = v12;
    }
    v22 = bswap32(a1->u32[3]);
    if (v21 >= 0xC00)
    {
      do
      {
        v28 = v21;
        a6 = sub_23417B0EC(a1 + 4, i64, a3, 0xC00uLL);
        for (i = 0; i != 3072; i += 16)
        {
          v24 = &a4[i / 8];
          v17(a1, a1 + 1, a2, (__n128)a6);
          a1->i32[3] = bswap32(++v22);
          *v24 = a1[1].i64[0] ^ a3[i / 0x10].i64[0];
          v24[1] = a1[1].i64[1] ^ a3[i / 0x10].i64[1];
        }
        v21 = v28 - 3072;
        a3 += 192;
        a4 += 384;
        i64 = a1[5].i64;
      }
      while (v28 - 3072 > 0xBFF);
    }
    v25 = v21 & 0xFF0;
    if ((v21 & 0xFF0) != 0)
    {
      a6 = sub_23417B0EC(a1 + 4, i64, a3, v25);
      do
      {
        v17(a1, a1 + 1, a2, (__n128)a6);
        a1->i32[3] = bswap32(++v22);
        *a4 = a1[1].i64[0] ^ a3->i64[0];
        a4[1] = a1[1].i64[1] ^ a3->i64[1];
        a4 += 2;
        ++a3;
        v21 -= 16;
      }
      while (v21 > 0xF);
    }
    if (v21)
    {
      ((void (*)(int8x16_t *, int8x16_t *, uint64_t, unint64_t, __n128))v17)(a1, &a1[1], a2, v25, (__n128)a6);
      v18 = 0;
      a1->i32[3] = bswap32(v22 + 1);
      do
      {
        v26 = a3->i8[v18];
        v27 = &a1->i8[v18];
        v27[64] ^= v26;
        *((_BYTE *)a4 + v18++) = v27[16] ^ v26;
      }
      while (v21 != v18);
    }
    else
    {
      LODWORD(v18) = 0;
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_23417B8C4(uint64_t a1, uint64_t a2, char *a3, int8x16_t *a4, unint64_t a5, void (*a6)(char *, int8x16_t *, uint64_t, uint64_t, uint64_t, __n128), int8x16_t a7)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  unint64_t v14;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int8 v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  __int8 v26;

  result = 0;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = __CFADD__(v9, a5);
  v11 = v9 + a5;
  v12 = v10;
  if (v11 <= 0xFFFFFFFE0 && (v12 & 1) == 0)
  {
    v14 = a5;
    *(_QWORD *)(a1 + 56) = v11;
    if (*(_DWORD *)(a1 + 372))
    {
      a7 = sub_23417B074((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80));
      *(_DWORD *)(a1 + 372) = 0;
    }
    LODWORD(v18) = *(_DWORD *)(a1 + 368);
    if ((_DWORD)v18)
    {
      if (!v14)
        goto LABEL_24;
      do
      {
        v19 = *a3++;
        v20 = a1 + v18;
        v21 = *(_BYTE *)(v20 + 16) ^ v19;
        a4->i8[0] = v21;
        a4 = (int8x16_t *)((char *)a4 + 1);
        *(_BYTE *)(v20 + 64) ^= v21;
        v22 = v14 - 1;
        LODWORD(v18) = ((_BYTE)v18 + 1) & 0xF;
        if (!(_DWORD)v18)
          break;
        --v14;
      }
      while (v14);
      if ((_DWORD)v18)
      {
LABEL_24:
        *(_DWORD *)(a1 + 368) = v18;
        return 1;
      }
      a7 = sub_23417B074((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80));
    }
    else
    {
      v22 = v14;
    }
    v23 = bswap32(*(_DWORD *)(a1 + 12));
    if (v22 >= 0xC00)
    {
      do
      {
        a6(a3, a4, 192, a2, a1, (__n128)a7);
        v23 += 192;
        *(_DWORD *)(a1 + 12) = bswap32(v23);
        a7 = sub_23417B0EC((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80), a4, 0xC00uLL);
        a4 += 192;
        a3 += 3072;
        v22 -= 3072;
      }
      while (v22 > 0xBFF);
    }
    v24 = v22 & 0xFF0;
    if ((v22 & 0xFF0) != 0)
    {
      a6(a3, a4, v22 >> 4, a2, a1, (__n128)a7);
      v23 += v22 >> 4;
      *(_DWORD *)(a1 + 12) = bswap32(v23);
      a3 += v24;
      v22 &= 0xFu;
      a7 = sub_23417B0EC((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80), a4, v24);
      a4 = (int8x16_t *)((char *)a4 + v24);
    }
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, int8x16_t))(a1 + 352))(a1, a1 + 16, a2, a7);
      v18 = 0;
      *(_DWORD *)(a1 + 12) = bswap32(v23 + 1);
      do
      {
        v25 = a1 + v18;
        v26 = *(_BYTE *)(v25 + 16) ^ a3[v18];
        a4->i8[v18] = v26;
        *(_BYTE *)(v25 + 64) ^= v26;
        ++v18;
      }
      while (v22 != v18);
    }
    else
    {
      LODWORD(v18) = 0;
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_23417BAC8(uint64_t a1, uint64_t a2, int8x16_t *a3, _BYTE *a4, unint64_t a5, void (*a6)(int8x16_t *, _BYTE *, uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  unint64_t v13;
  uint64_t v17;
  __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  __n128 v22;
  unint64_t v23;
  __n128 v24;
  __int8 v25;
  uint64_t v26;

  result = 0;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = __CFADD__(v8, a5);
  v10 = v8 + a5;
  v11 = v9;
  if (v10 <= 0xFFFFFFFE0 && (v11 & 1) == 0)
  {
    v13 = a5;
    *(_QWORD *)(a1 + 56) = v10;
    if (*(_DWORD *)(a1 + 372))
    {
      sub_23417B074((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80));
      *(_DWORD *)(a1 + 372) = 0;
    }
    LODWORD(v17) = *(_DWORD *)(a1 + 368);
    if ((_DWORD)v17)
    {
      if (!v13)
        goto LABEL_24;
      do
      {
        v18 = a3->i8[0];
        a3 = (int8x16_t *)((char *)a3 + 1);
        v19 = a1 + v17;
        *a4++ = *(_BYTE *)(v19 + 16) ^ v18;
        *(_BYTE *)(v19 + 64) ^= v18;
        v20 = v13 - 1;
        LODWORD(v17) = ((_BYTE)v17 + 1) & 0xF;
        if (!(_DWORD)v17)
          break;
        --v13;
      }
      while (v13);
      if ((_DWORD)v17)
      {
LABEL_24:
        *(_DWORD *)(a1 + 368) = v17;
        return 1;
      }
      sub_23417B074((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80));
    }
    else
    {
      v20 = v13;
    }
    v21 = bswap32(*(_DWORD *)(a1 + 12));
    if (v20 >= 0xC00)
    {
      do
      {
        v22 = (__n128)sub_23417B0EC((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80), a3, 0xC00uLL);
        a6(a3, a4, 192, a2, a1, v22);
        v21 += 192;
        *(_DWORD *)(a1 + 12) = bswap32(v21);
        a4 += 3072;
        a3 += 192;
        v20 -= 3072;
      }
      while (v20 > 0xBFF);
    }
    v23 = v20 & 0xFF0;
    if ((v20 & 0xFF0) != 0)
    {
      v24 = (__n128)sub_23417B0EC((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80), a3, v20 & 0xFF0);
      a6(a3, a4, v20 >> 4, a2, a1, v24);
      v21 += v20 >> 4;
      *(_DWORD *)(a1 + 12) = bswap32(v21);
      a4 += v23;
      a3 = (int8x16_t *)((char *)a3 + v23);
      v20 &= 0xFu;
    }
    if (v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 352))(a1, a1 + 16, a2);
      v17 = 0;
      *(_DWORD *)(a1 + 12) = bswap32(v21 + 1);
      do
      {
        v25 = a3->i8[v17];
        v26 = a1 + v17;
        *(_BYTE *)(v26 + 64) ^= v25;
        a4[v17++] = *(_BYTE *)(v26 + 16) ^ v25;
      }
      while (v20 != v17);
    }
    else
    {
      LODWORD(v17) = 0;
    }
    goto LABEL_24;
  }
  return result;
}

BOOL sub_23417BCCC(int8x16_t *a1, char *a2, unint64_t a3)
{
  int8x16_t *v6;
  int8x16_t v7;
  _BOOL8 result;

  if (a1[23].i32[0] || a1[23].i32[1])
    sub_23417B074(a1 + 4, a1[5].i64);
  v7 = a1[4];
  v6 = a1 + 4;
  *v6 = veorq_s8(vrev64q_s8((int8x16_t)vshlq_n_s64((int64x2_t)v6[-1], 3uLL)), v7);
  sub_23417B074(v6, v6[1].i64);
  result = 0;
  *v6 = veorq_s8(v6[-2], *v6);
  if (a2)
  {
    if (a3 <= 0x10)
      return sub_23418E484(v6->i8, a2, a3) == 0;
  }
  return result;
}

void *sub_23417BD70(int8x16_t *a1, void *a2, unint64_t a3)
{
  void *result;
  size_t v7;

  result = (void *)sub_23417BCCC(a1, 0, 0);
  if (a3 >= 0x10)
    v7 = 16;
  else
    v7 = a3;
  if (v7)
    return memcpy(a2, &a1[4], v7);
  return result;
}

unint64_t *sub_23417BDD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *result;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v18 = 0;
  v19 = 0;
  v4 = *a1;
  v5 = a2[1];
  sub_23418D840(&v19, &v18, *a1, v5);
  v16 = 0;
  v17 = 0;
  v6 = a1[1];
  v7 = *a2;
  sub_23418D840(&v17, &v16, v6, v7);
  v14 = 0;
  v15 = 0;
  result = sub_23418D840(&v15, &v14, v6 ^ v4, v7 ^ v5);
  v9 = (v19 << 63) ^ (v19 << 62) ^ (v19 << 57) ^ v19 ^ v15 ^ v17 ^ v18;
  *((_QWORD *)&v10 + 1) = v9;
  *(_QWORD *)&v10 = v19;
  v11 = v14 ^ (v10 >> 1);
  *((_QWORD *)&v10 + 1) = v9;
  *(_QWORD *)&v10 = v19;
  v12 = v10 >> 2;
  *((_QWORD *)&v10 + 1) = v9;
  *(_QWORD *)&v10 = v19;
  v13 = (v9 >> 1) ^ (v9 >> 2) ^ (v9 >> 7) ^ v16 ^ v9;
  *a1 = v11 ^ v12 ^ (v10 >> 7) ^ v18 ^ v16 ^ v17 ^ v19;
  a1[1] = v13;
  return result;
}

_QWORD *sub_23417BEC8(_QWORD *result, __int128 *a2)
{
  int64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = 0xFF00000000000000 * (*(_QWORD *)a2 & 1);
  *((_QWORD *)&v4 + 1) = v2 & 0xE1FFFFFFFFFFFFFFLL ^ (*((_QWORD *)a2 + 1) >> 1);
  *(_QWORD *)&v4 = *a2 >> 1;
  v3 = v4 >> 63;
  *((_QWORD *)&v4 + 1) = v4;
  *(_QWORD *)&v4 = v2;
  result[2] = (v2 >> 63) & 0xC200000000000000 ^ v3;
  result[3] = v4 >> 63;
  result[34] = sub_23417B074;
  result[35] = sub_23417B0EC;
  *result = 0;
  result[1] = 0;
  return result;
}

uint64_t sub_23417BF18(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x16_t *v9;
  _BYTE v10[512];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v3 = a3;
    v5 = result;
    v6 = result + 16;
    do
    {
      if (v3 >= 0x200)
        v7 = 512;
      else
        v7 = v3;
      __memcpy_chk();
      if (v7 >= 0x10)
      {
        v8 = v7 >> 4;
        v9 = (int8x16_t *)v10;
        do
        {
          sub_23417C000(v9++);
          --v8;
        }
        while (v8);
      }
      a2 += v7;
      v3 -= v7;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, unint64_t))(v5 + 280))(v5, v6, v10, v7);
    }
    while (v3);
  }
  return result;
}

int8x16_t sub_23417C000(int8x16_t *a1)
{
  int8x16_t v1;
  int8x16_t result;

  v1 = vrev64q_s8(*a1);
  result = vextq_s8(v1, v1, 8uLL);
  *a1 = result;
  return result;
}

double sub_23417C014(int8x16_t *a1, int8x16_t *a2)
{
  double result;

  *a2 = *a1;
  *(_QWORD *)&result = sub_23417C000(a2).u64[0];
  return result;
}

_QWORD *sub_23417C024(_OWORD *a1, char *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = sub_23418E2E4(0x120uLL);
  v7 = v6;
  if (!v6 || !sub_23417C088((uint64_t)v6, a1, a2, a3))
  {
    sub_23418E3C4(v7);
    return 0;
  }
  return v7;
}

uint64_t sub_23417C088(uint64_t a1, _OWORD *a2, char *a3, unint64_t a4)
{
  uint64_t result;
  __int128 v6;
  _BYTE *v7;
  char v8;
  uint64_t i;
  _OWORD v10[2];
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a4 > 0x30)
    return 0;
  v6 = a2[1];
  v10[0] = *a2;
  v10[1] = v6;
  v11 = a2[2];
  if (a4)
  {
    v7 = v10;
    do
    {
      v8 = *a3++;
      *v7++ ^= v8;
      --a4;
    }
    while (a4);
  }
  for (i = 0; i != 3; ++i)
    v10[i] = veorq_s8((int8x16_t)v10[i], (int8x16_t)xmmword_2342E23A8[i]);
  sub_23415F4C0(v10, 256, a1);
  *(_QWORD *)(a1 + 248) = sub_23415F318;
  *(_QWORD *)(a1 + 256) = sub_2341600D0;
  *(_OWORD *)(a1 + 264) = v11;
  result = 1;
  *(_QWORD *)(a1 + 280) = 1;
  return result;
}

uint64_t sub_23417C17C(uint64_t a1, char *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[3];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    if (a4 > 0x30)
      return 0;
    v6 = 0;
    v7 = *((_OWORD *)a2 + 1);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v7;
    v8[2] = *((_OWORD *)a2 + 2);
    do
    {
      a2 = (char *)v8;
      *((_BYTE *)v8 + v6) ^= *(_BYTE *)(a3 + v6);
      ++v6;
    }
    while (a4 != v6);
  }
  result = sub_23417C22C(a1, a2, 0x30uLL);
  if ((_DWORD)result)
  {
    result = 1;
    *(_QWORD *)(a1 + 280) = 1;
  }
  return result;
}

uint64_t sub_23417C22C(uint64_t a1, char *a2, unint64_t a3)
{
  unint64_t v4;
  _OWORD *v7;
  unint64_t v8;
  _BYTE *v9;
  char v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a3 > 0x30)
    return 0;
  v4 = a3;
  v7 = (_OWORD *)(a1 + 264);
  v8 = 0xFFFFFFFFFFFFFFFLL;
  do
  {
    *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(a1 + 248))(v7, &v11[++v8], a1);
  }
  while (v8 < 2);
  if (v4)
  {
    v9 = v11;
    do
    {
      v10 = *a2++;
      *v9++ ^= v10;
      --v4;
    }
    while (v4);
  }
  sub_23415F4C0(v11, 256, a1);
  *(_QWORD *)(a1 + 248) = sub_23415F318;
  *(_QWORD *)(a1 + 256) = sub_2341600D0;
  *v7 = v11[2];
  return 1;
}

uint64_t sub_23417C334(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5)
{
  uint64_t result;
  size_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE __src[16];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a3 > 0x10000 || *(_QWORD *)(a1 + 280) > 0x1000000000000uLL)
    return 0;
  v9 = a3;
  if (!a5 || (result = sub_23417C22C(a1, a4, a5), (_DWORD)result))
  {
    if (v9 >= 0x10)
    {
      do
      {
        if (v9 >= 0x2000)
          v11 = 0x2000;
        else
          v11 = v9;
        v12 = v11 & 0x3FF0;
        if (*(_QWORD *)(a1 + 256))
        {
          if ((v11 & 0x3FF0) != 0)
            bzero(a2, v11 & 0x3FF0);
          v13 = v11 >> 4;
          *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
          (*(void (**)(char *, char *, unint64_t, uint64_t, uint64_t))(a1 + 256))(a2, a2, v13, a1, a1 + 264);
          *(_DWORD *)(a1 + 276) = bswap32(v13 + bswap32(*(_DWORD *)(a1 + 276)) - 1);
        }
        else if ((v11 & 0x3FF0) != 0)
        {
          v14 = 0;
          do
          {
            *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
            (*(void (**)(uint64_t, char *, uint64_t))(a1 + 248))(a1 + 264, &a2[v14], a1);
            v14 += 16;
          }
          while (v14 < v12);
        }
        a2 += v12;
        v9 -= v12;
      }
      while (v9 > 0xF);
    }
    if (v9)
    {
      *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(a1 + 248))(a1 + 264, __src, a1);
      memcpy(a2, __src, v9);
    }
    result = sub_23417C22C(a1, a4, a5);
    if ((_DWORD)result)
    {
      ++*(_QWORD *)(a1 + 280);
      return 1;
    }
  }
  return result;
}

void sub_23417C51C(void *a1)
{
  sub_23418E400(a1, 0x120uLL);
}

uint64_t sub_23417C524()
{
  sub_234195C74(&stru_256158220, (void (*)(void))sub_23417C550);
  return qword_25615AA50;
}

uint64_t sub_23417C550()
{
  uint64_t result;

  result = pthread_atfork(0, 0, sub_23418D9EC);
  if ((_DWORD)result)
    abort();
  qword_25615AA50 = 1;
  return result;
}

void sub_23417C588(_QWORD *a1)
{
  if (a1)
    sub_23418E3C4(a1);
}

uint64_t sub_23417C594(void *a1, size_t a2)
{
  if (a2 >= 0x101)
    abort();
  return sub_23419382C(a1, a2);
}

_QWORD *sub_23417C5AC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v0 = sub_23418E344(0x18uLL);
  if (v0)
  {
    v1 = sub_234161F88();
    *v0 = v1;
    if (v1 && (v2 = sub_234161F88(), (v0[1] = v2) != 0))
    {
      *((_DWORD *)v0 + 4) = 31;
    }
    else
    {
      sub_2341540D8(v0);
      return 0;
    }
  }
  return v0;
}

uint64_t sub_23417C608(uint64_t result)
{
  *(_DWORD *)(result + 16) = 31;
  return result;
}

uint64_t sub_23417C614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  int v12;

  v9 = *(_DWORD *)(a2 + 16) + 1;
  *(_DWORD *)(a2 + 16) = v9;
  if (v9 == 32)
  {
    if (sub_234167838(*(_QWORD *)a2, 1uLL, a4 + 24)
      && sub_23416591C(*(_QWORD *)(a2 + 8), *(_QWORD *)a2, a4, a5)
      && sub_234167724(*(void ***)(a2 + 8), &v12, *(_QWORD *)(a2 + 8), a4, a5)
      && sub_2341652E0(*(_QWORD *)a2, *(_QWORD *)a2, a3, a4 + 24, a5, a4)
      && sub_23416583C(*(_QWORD *)a2, *(_QWORD *)a2, a4, a4, a5))
    {
      *(_DWORD *)(a2 + 16) = 0;
      return sub_23416583C(a1, a1, *(_QWORD *)a2, a4, a5);
    }
    sub_2341579B4(4, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/blinding.c", 236);
  }
  else if (sub_23416583C(*(_QWORD *)a2, *(_QWORD *)a2, *(_QWORD *)a2, a4, a5)
         && sub_23416583C(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8), a4, a5))
  {
    return sub_23416583C(a1, a1, *(_QWORD *)a2, a4, a5);
  }
  *(_DWORD *)(a2 + 16) = 31;
  return 0;
}

uint64_t sub_23417C784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23416583C(a1, a1, *(_QWORD *)(a2 + 8), a3, a4);
}

uint64_t sub_23417C798(_WORD *a1, unint64_t a2, void *__src, size_t __n)
{
  int v4;
  __int16 v5;

  if (a2 <= 0xA)
  {
    v4 = 126;
    v5 = 78;
LABEL_5:
    sub_2341579B4(4, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/padding.c", v5);
    return 0;
  }
  if (a2 - 11 < __n)
  {
    v4 = 118;
    v5 = 83;
    goto LABEL_5;
  }
  *a1 = 256;
  if (a2 - 3 != __n)
    memset(a1 + 1, 255, a2 - 3 - __n);
  *((_BYTE *)a1 + ~__n + a2) = 0;
  if (__n)
    memcpy((char *)a1 + a2 - __n, __src, __n);
  return 1;
}

uint64_t sub_23417C864(void *a1, size_t *a2, size_t a3, _BYTE *a4, unint64_t a5)
{
  int v5;
  __int16 v6;
  uint64_t v8;
  unint64_t v9;
  size_t v11;

  if (a5 <= 1)
  {
    v5 = 116;
    v6 = 101;
LABEL_11:
    sub_2341579B4(4, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/padding.c", v6);
    return 0;
  }
  if (*a4 || a4[1] != 1)
  {
    v5 = 107;
    v6 = 107;
    goto LABEL_11;
  }
  if (a5 < 3)
    goto LABEL_14;
  v8 = 0;
  v9 = a5 - 2;
  while (a4[v8 + 2] == 255)
  {
    if (v9 == ++v8)
      goto LABEL_14;
  }
  if (a4[v8 + 2])
  {
    v5 = 102;
    v6 = 119;
    goto LABEL_11;
  }
  if (v9 == v8)
  {
LABEL_14:
    v5 = 131;
    v6 = 125;
    goto LABEL_11;
  }
  if ((unint64_t)(v8 + 2) <= 9)
  {
    v5 = 103;
    v6 = 130;
    goto LABEL_11;
  }
  v11 = a5 - v8 - 3;
  if (v11 > a3)
  {
    v5 = 113;
    v6 = 138;
    goto LABEL_11;
  }
  if (a5 - 3 != v8)
    memcpy(a1, &a4[v8 + 3], v11);
  *a2 = v11;
  return 1;
}

uint64_t sub_23417C9C4(void *a1, size_t a2, void *__src, size_t __n)
{
  int v4;
  __int16 v5;

  if (__n > a2)
  {
    v4 = 114;
    v5 = 150;
LABEL_5:
    sub_2341579B4(4, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/padding.c", v5);
    return 0;
  }
  if (__n < a2)
  {
    v4 = 116;
    v5 = 155;
    goto LABEL_5;
  }
  if (__n)
    memcpy(a1, __src, __n);
  return 1;
}

uint64_t sub_23417CA34(char *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v8;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v14;
  _OWORD v15[2];
  _BYTE __src[64];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  memset(v15, 0, sizeof(v15));
  if (a2)
  {
    v8 = a2;
    v10 = 0;
    v11 = *(unsigned int *)(a5 + 4);
    while (1)
    {
      v14 = bswap32(v10);
      if (!sub_2341708C0((uint64_t)v15, a5))
      {
        v12 = 0;
        goto LABEL_10;
      }
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)&v15[0] + 24))(v15, a3, a4);
      (*(void (**)(_OWORD *, unsigned int *, uint64_t))(*(_QWORD *)&v15[0] + 24))(v15, &v14, 4);
      if (v8 < v11)
        break;
      (*(void (**)(_OWORD *, char *))(*(_QWORD *)&v15[0] + 32))(v15, a1);
      sub_23418E400(*((void **)&v15[0] + 1), *(unsigned int *)(*(_QWORD *)&v15[0] + 44));
      a1 += v11;
      ++v10;
      v8 -= v11;
      if (!v8)
        goto LABEL_9;
    }
    (*(void (**)(_OWORD *, _BYTE *))(*(_QWORD *)&v15[0] + 32))(v15, __src);
    sub_23418E400(*((void **)&v15[0] + 1), *(unsigned int *)(*(_QWORD *)&v15[0] + 44));
    memcpy(a1, __src, v8);
  }
LABEL_9:
  v12 = 1;
LABEL_10:
  sub_234170680((uint64_t)v15);
  return v12;
}

uint64_t sub_23417CB8C(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  int v16;
  uint64_t (*v17)(uint64_t **);
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  __int16 v36;
  char *__s2;
  uint64_t v38;
  _OWORD v39[2];
  _BYTE __s1[64];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a4)
    v10 = a4;
  else
    v10 = a3;
  memset(v39, 0, sizeof(v39));
  v11 = *(unsigned int *)(a3 + 4);
  if (a6 == -2)
  {
    v12 = -2;
LABEL_9:
    v15 = sub_2341621D4(a1[1]) + 7;
    v16 = v15 & 7;
    v17 = (uint64_t (*)(uint64_t **))(*a1)[4];
    if (v17)
      v18 = v17(a1);
    else
      v18 = v15 >> 3;
    if (*a5 >> v16)
    {
      v13 = 122;
      v14 = 240;
      goto LABEL_24;
    }
    v19 = v18;
    if (v16)
      v20 = a5;
    else
      v20 = a5 + 1;
    if (v16)
      v21 = 0;
    else
      v21 = -1;
    v22 = v18 - (unint64_t)(v16 == 0);
    if (v22 < v11 + 2 || (v12 & 0x80000000) == 0 && v22 < v11 + 2 + v12)
    {
      v13 = 113;
      v14 = 250;
      goto LABEL_24;
    }
    if (v20[v22 - 1] != 188)
    {
      v13 = 127;
      v14 = 254;
      goto LABEL_24;
    }
    v38 = v21;
    v26 = v22 + ~v11;
    v27 = (char *)sub_23418E2E4(v26);
    v24 = v27;
    if (v27)
    {
      __s2 = &v20[v26];
      if (sub_23417CA34(v27, v26, (uint64_t)&v20[v26], v11, v10))
      {
        if (v26)
        {
          v28 = v24;
          v29 = v26;
          do
          {
            v30 = *v20++;
            *v28++ ^= v30;
            --v29;
          }
          while (v29);
        }
        if (v16)
          *v24 &= 0xFFu >> (8 - v16);
        v31 = 0;
        do
        {
          v32 = v24[v31];
          v33 = v31 + 1;
          if (v24[v31])
            v34 = 1;
          else
            v34 = v31 >= v26 - 1;
          ++v31;
        }
        while (!v34);
        if (v32 == 1)
        {
          if ((v12 & 0x80000000) != 0 || ~(unint64_t)v12 + v38 + v19 - v11 == v33)
          {
            if (!sub_2341708C0((uint64_t)v39, a3))
              goto LABEL_47;
            (*(void (**)(_OWORD *, void *, uint64_t))(*(_QWORD *)&v39[0] + 24))(v39, &unk_2342E23F8, 8);
            (*(void (**)(_OWORD *, uint64_t, size_t))(*(_QWORD *)&v39[0] + 24))(v39, a2, v11);
            (*(void (**)(_OWORD *, char *, unint64_t))(*(_QWORD *)&v39[0] + 24))(v39, &v24[v33], v26 - v33);
            (*(void (**)(_OWORD *, _BYTE *))(*(_QWORD *)&v39[0] + 32))(v39, __s1);
            sub_23418E400(*((void **)&v39[0] + 1), *(unsigned int *)(*(_QWORD *)&v39[0] + 44));
            if (!(_DWORD)v11 || !memcmp(__s1, __s2, v11))
            {
              v23 = 1;
              goto LABEL_25;
            }
            v35 = 105;
            v36 = 299;
          }
          else
          {
            v35 = 138;
            v36 = 287;
          }
        }
        else
        {
          v35 = 139;
          v36 = 281;
        }
        sub_2341579B4(4, 0, v35, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/padding.c", v36);
      }
    }
LABEL_47:
    v23 = 0;
    goto LABEL_25;
  }
  v12 = *(_DWORD *)(a3 + 4);
  if (a6 == -1)
    goto LABEL_9;
  v12 = a6;
  if (a6 > -3)
    goto LABEL_9;
  v13 = 138;
  v14 = 233;
LABEL_24:
  sub_2341579B4(4, 0, v13, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/padding.c", v14);
  v23 = 0;
  v24 = 0;
LABEL_25:
  sub_23418E3C4(v24);
  sub_234170680((uint64_t)v39);
  return v23;
}

uint64_t sub_23417CF10(uint64_t **a1)
{
  uint64_t (*v1)(void);

  v1 = (uint64_t (*)(void))(*a1)[4];
  if (v1)
    return v1();
  else
    return (sub_2341621D4(a1[1]) + 7) >> 3;
}

uint64_t sub_23417CF44(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t (*v20)(_QWORD *);
  unsigned int v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;
  _OWORD v36[2];

  if (a5)
    v7 = a5;
  else
    v7 = a4;
  v8 = a1[1];
  v9 = *(int *)(v8 + 8);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v14 = 0;
  v15 = *(unsigned int *)(a4 + 4);
  v16 = *(uint64_t **)v8;
  do
  {
    v17 = *v16++;
    v14 |= v17;
    --v9;
  }
  while (v9);
  if (!v14)
  {
LABEL_10:
    v22 = 120;
    v23 = 329;
LABEL_36:
    sub_2341579B4(4, 0, v22, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/padding.c", v23);
    v34 = 0;
    v28 = 0;
    goto LABEL_37;
  }
  v18 = sub_2341621D4((uint64_t *)v8) + 7;
  v19 = v18 & 7;
  v20 = *(uint64_t (**)(_QWORD *))(*a1 + 32);
  if (v20)
    v21 = v20(a1);
  else
    v21 = v18 >> 3;
  v24 = v21;
  if (!v19)
  {
    *a2++ = 0;
    v24 = v21 - 1;
  }
  if (v24 < v15 + 2)
  {
    v22 = 114;
    v23 = 342;
    goto LABEL_36;
  }
  v25 = v15;
  if (a6 != -1)
  {
    if (a6 == -2)
    {
      v25 = v24 - v15 - 2;
    }
    else
    {
      if ((a6 & 0x80000000) != 0)
      {
        v22 = 138;
        v23 = 356;
        goto LABEL_36;
      }
      v25 = a6;
    }
  }
  v26 = v24 - v15;
  if (v24 - v15 - 2 < v25)
  {
    v22 = 114;
    v23 = 363;
    goto LABEL_36;
  }
  if (v25)
  {
    v27 = (char *)sub_23418E2E4(v25);
    v28 = v27;
    if (!v27)
      goto LABEL_39;
    sub_23416C0A8(v27, v25, (uint64_t)&unk_2342E23D8);
  }
  else
  {
    v28 = 0;
  }
  memset(v36, 0, sizeof(v36));
  if (!sub_2341708C0((uint64_t)v36, a4))
  {
    sub_234170680((uint64_t)v36);
    goto LABEL_39;
  }
  v29 = v26 - 1;
  v30 = (uint64_t)&a2[v26 - 1];
  (*(void (**)(_OWORD *, void *, uint64_t))(*(_QWORD *)&v36[0] + 24))(v36, &unk_2342E23F8, 8);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)&v36[0] + 24))(v36, a3, v15);
  (*(void (**)(_OWORD *, char *, unint64_t))(*(_QWORD *)&v36[0] + 24))(v36, v28, v25);
  (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)&v36[0] + 32))(v36, v30);
  sub_23418E400(*((void **)&v36[0] + 1), *(unsigned int *)(*(_QWORD *)&v36[0] + 44));
  sub_234170680((uint64_t)v36);
  if (!sub_23417CA34(a2, v29, v30, v15, v7))
  {
LABEL_39:
    v34 = 0;
    goto LABEL_37;
  }
  a2[v24 - (v25 + v15) - 2] ^= 1u;
  if (v25)
  {
    v31 = &a2[v24 + ~(v25 + v15)];
    v32 = v28;
    do
    {
      v33 = *v32++;
      *v31++ ^= v33;
      --v25;
    }
    while (v25);
  }
  if (v19)
    *a2 &= 0xFFu >> (8 - v19);
  a2[v24 - 1] = -68;
  v34 = 1;
LABEL_37:
  sub_23418E3C4(v28);
  return v34;
}

uint64_t sub_23417D234(uint64_t a1, uint64_t a2)
{
  __int128 **v4;
  uint64_t v5;

  v4 = sub_23417DC6C(0);
  v5 = (uint64_t)v4;
  if (!v4
    || !sub_23417D2B0((void ***)v4 + 1, a1)
    || !sub_23417D2B0((void ***)(v5 + 16), a2)
    || !sub_23417D310((uint64_t *)v5))
  {
    sub_23417D814(v5);
    return 0;
  }
  return v5;
}

__int128 **sub_23417D2A8()
{
  return sub_23417DC6C(0);
}

BOOL sub_23417D2B0(void ***a1, uint64_t a2)
{
  void **v4;

  if (a2)
  {
    sub_234161FC4((_QWORD **)*a1);
    v4 = sub_234162014(a2);
    *a1 = v4;
    return v4 != 0;
  }
  else
  {
    sub_2341579B4(4, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", 88);
    return 0;
  }
}

uint64_t sub_23417D310(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32[3];
  _QWORD *v33[3];
  _QWORD *v34[3];
  _QWORD *v35[3];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  if (*a1 && (*(_BYTE *)(*a1 + 72) & 1) != 0)
    return 1;
  if (sub_23417EBDC((uint64_t)a1))
  {
    v2 = a1[4];
    if ((v2 == 0) == (a1[5] != 0))
    {
      v4 = 134;
      v5 = 799;
      goto LABEL_10;
    }
    v3 = a1[3];
    if (v3)
    {
      if (*(_DWORD *)(v3 + 16) || (sub_234162A28(v3, a1[1]) & 0x80000000) == 0)
      {
        v4 = 147;
        v5 = 807;
LABEL_10:
        sub_2341579B4(4, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", v5);
        return 0;
      }
      if (v2)
      {
        v7 = sub_23418E2E4(0x30uLL);
        if (!v7)
          return 0;
        v8 = (unint64_t **)v7;
        *(_OWORD *)((char *)v7 + 26) = 0u;
        *v7 = 0u;
        v7[1] = 0u;
        v40 = 0;
        v41 = 0;
        v39 = 0;
        v37 = 0;
        v38 = 0;
        v36 = 0;
        memset(v35, 0, sizeof(v35));
        memset(v34, 0, sizeof(v34));
        memset(v33, 0, sizeof(v33));
        memset(v32, 0, sizeof(v32));
        v9 = a1[4];
        if (*(_DWORD *)(v9 + 16)
          || (v10 = a1[1], (int)sub_234162A28(a1[4], v10) >= 0)
          || (v11 = a1[5], *(_DWORD *)(v11 + 16))
          || (int)sub_234162A28(a1[5], v10) >= 0)
        {
          v12 = 132;
          v13 = 839;
        }
        else if (sub_234167EE8((uint64_t)&v39, v9, v11, (uint64_t)v8))
        {
          if (sub_234162A28((uint64_t)&v39, a1[1]))
          {
            v12 = 132;
            v13 = 847;
          }
          else
          {
            v15 = a1[4];
            sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
            if (sub_234161CF8((uint64_t)v35, v15, (uint64_t)&qword_256159710)
              && (v16 = a1[5],
                  sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138),
                  sub_234161CF8((uint64_t)v34, v16, (uint64_t)&qword_256159710)))
            {
              v17 = sub_2341621D4((uint64_t *)v35);
              v18 = sub_2341621D4((uint64_t *)v34);
              if (sub_234167EE8((uint64_t)&v36, a1[3], a1[2], (uint64_t)v8)
                && sub_234163A0C(0, (void **)&v39, (uint64_t)&v36, (uint64_t)v35, v17, (uint64_t)v8)
                && sub_234163A0C(0, (void **)&v36, (uint64_t)&v36, (uint64_t)v34, v18, (uint64_t)v8))
              {
                if ((_DWORD)v41)
                {
                  v19 = 1;
                }
                else
                {
                  if ((_DWORD)v40)
                  {
                    v20 = *(_QWORD *)v39 ^ 1;
                    if ((int)v40 >= 2)
                    {
                      v21 = v40 - 1;
                      v22 = (uint64_t *)(v39 + 8);
                      do
                      {
                        v23 = *v22++;
                        v20 |= v23;
                        --v21;
                      }
                      while (v21);
                    }
                  }
                  else
                  {
                    v20 = 1;
                  }
                  v19 = v20 != 0;
                }
                if (v19)
                  goto LABEL_54;
                if ((_DWORD)v38)
                {
                  v24 = 1;
                }
                else
                {
                  if ((_DWORD)v37)
                  {
                    v25 = *(_QWORD *)v36 ^ 1;
                    if ((int)v37 >= 2)
                    {
                      v26 = v37 - 1;
                      v27 = (uint64_t *)(v36 + 8);
                      do
                      {
                        v28 = *v27++;
                        v25 |= v28;
                        --v26;
                      }
                      while (v26);
                    }
                  }
                  else
                  {
                    v25 = 1;
                  }
                  v24 = v25 != 0;
                }
                if (v24)
                {
LABEL_54:
                  v12 = 119;
                  v13 = 871;
                }
                else
                {
                  v29 = a1[6];
                  if ((v29 != 0) != (a1[7] == 0) && (v29 != 0) != (a1[8] == 0))
                  {
                    if (v29)
                    {
                      v31 = 0;
                      v30 = 0;
                      if (!sub_23417ED90((_DWORD *)&v31 + 1, a1[2], v29, (uint64_t)v35, v17, (uint64_t)v8)
                        || !sub_23417ED90(&v31, a1[2], a1[7], (uint64_t)v34, v18, (uint64_t)v8)
                        || !sub_23417ED90(&v30, a1[5], a1[8], a1[4], v17, (uint64_t)v8))
                      {
                        v12 = 3;
                        v13 = 890;
                        goto LABEL_19;
                      }
                      if (!HIDWORD(v31) || !(_DWORD)v31 || !v30)
                      {
                        v12 = 111;
                        v13 = 895;
                        goto LABEL_19;
                      }
                    }
                    v6 = 1;
                    goto LABEL_20;
                  }
                  v12 = 123;
                  v13 = 878;
                }
              }
              else
              {
                v12 = 3;
                v13 = 865;
              }
            }
            else
            {
              v12 = 3;
              v13 = 857;
            }
          }
        }
        else
        {
          v12 = 3;
          v13 = 843;
        }
LABEL_19:
        sub_2341579B4(4, 0, v12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", v13);
        v6 = 0;
LABEL_20:
        sub_234161FC4((_QWORD **)&v39);
        sub_234161FC4((_QWORD **)&v36);
        sub_234161FC4(v35);
        sub_234161FC4(v34);
        sub_234161FC4(v33);
        sub_234161FC4(v32);
        sub_234162D80(v8);
        return v6;
      }
    }
    return 1;
  }
  return 0;
}

void sub_23417D814(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  if (a1 && sub_234193960((unsigned int *)(a1 + 80)))
  {
    v3 = *(_QWORD *)a1;
    v4 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 24);
    if (v4)
    {
      v4(a1);
      v3 = *(_QWORD *)a1;
    }
    nullsub_13(v3, v2);
    sub_23415F25C((uint64_t)&unk_256158230, a1, (unint64_t **)(a1 + 72));
    sub_234161FC4(*(_QWORD ***)(a1 + 8));
    sub_234161FC4(*(_QWORD ***)(a1 + 16));
    sub_234161FC4(*(_QWORD ***)(a1 + 24));
    sub_234161FC4(*(_QWORD ***)(a1 + 32));
    sub_234161FC4(*(_QWORD ***)(a1 + 40));
    sub_234161FC4(*(_QWORD ***)(a1 + 48));
    sub_234161FC4(*(_QWORD ***)(a1 + 56));
    sub_234161FC4(*(_QWORD ***)(a1 + 64));
    sub_23417DDE0(a1);
    j__pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 88));
    sub_23418E3C4((_QWORD *)a1);
  }
}

uint64_t sub_23417D8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 **v16;
  uint64_t v17;

  v16 = sub_23417DC6C(0);
  v17 = (uint64_t)v16;
  if (!v16
    || !sub_23417D2B0((void ***)v16 + 1, a1)
    || !sub_23417D2B0((void ***)(v17 + 16), a2)
    || !sub_23417D2B0((void ***)(v17 + 24), a3)
    || !sub_23417D2B0((void ***)(v17 + 32), a4)
    || !sub_23417D2B0((void ***)(v17 + 40), a5)
    || !sub_23417D2B0((void ***)(v17 + 48), a6)
    || !sub_23417D2B0((void ***)(v17 + 56), a7)
    || !sub_23417D2B0((void ***)(v17 + 64), a8)
    || !sub_23417D310((uint64_t *)v17))
  {
    sub_23417D814(v17);
    return 0;
  }
  return v17;
}

uint64_t sub_23417D9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 **v6;
  uint64_t v7;

  v6 = sub_23417DC6C(0);
  v7 = (uint64_t)v6;
  if (!v6
    || !sub_23417D2B0((void ***)v6 + 1, a1)
    || !sub_23417D2B0((void ***)(v7 + 16), a2)
    || !sub_23417D2B0((void ***)(v7 + 24), a3)
    || !sub_23417D310((uint64_t *)v7))
  {
    sub_23417D814(v7);
    return 0;
  }
  return v7;
}

uint64_t sub_23417DA5C(uint64_t a1, uint64_t a2)
{
  __int128 **v4;
  uint64_t v5;

  v4 = sub_23417DC6C(0);
  v5 = (uint64_t)v4;
  if (v4)
  {
    *((_DWORD *)v4 + 21) |= 0x40u;
    if (!sub_23417D2B0((void ***)v4 + 1, a1)
      || !sub_23417D2B0((void ***)(v5 + 24), a2)
      || !sub_23417D310((uint64_t *)v5))
    {
      sub_23417D814(v5);
      return 0;
    }
  }
  return v5;
}

uint64_t sub_23417DADC(uint64_t a1, uint64_t a2)
{
  __int128 **v4;
  uint64_t v5;

  v4 = sub_23417DC6C(0);
  v5 = (uint64_t)v4;
  if (v4)
  {
    *((_DWORD *)v4 + 21) |= 0x80u;
    if (!sub_23417D2B0((void ***)v4 + 1, a1)
      || !sub_23417D2B0((void ***)(v5 + 16), a2)
      || !sub_23417D310((uint64_t *)v5))
    {
      sub_23417D814(v5);
      return 0;
    }
  }
  return v5;
}

uint64_t sub_23417DB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 **v16;
  uint64_t v17;

  v16 = sub_23417DC6C(0);
  v17 = (uint64_t)v16;
  if (v16)
  {
    *((_DWORD *)v16 + 21) |= 0x80u;
    if (!sub_23417D2B0((void ***)v16 + 1, a1)
      || !sub_23417D2B0((void ***)(v17 + 16), a2)
      || !sub_23417D2B0((void ***)(v17 + 24), a3)
      || !sub_23417D2B0((void ***)(v17 + 32), a4)
      || !sub_23417D2B0((void ***)(v17 + 40), a5)
      || !sub_23417D2B0((void ***)(v17 + 48), a6)
      || !sub_23417D2B0((void ***)(v17 + 56), a7)
      || !sub_23417D2B0((void ***)(v17 + 64), a8)
      || !sub_23417D310((uint64_t *)v17))
    {
      sub_23417D814(v17);
      return 0;
    }
  }
  return v17;
}

__int128 **sub_23417DC6C(uint64_t a1)
{
  __int128 **v2;
  uint64_t v3;
  __int128 **v4;
  __int128 *v5;
  unsigned int (*v6)(__int128 **);
  uint64_t v7;

  v2 = (__int128 **)sub_23418E344(0x180uLL);
  v4 = v2;
  if (!v2)
    return v4;
  if (!a1)
  {
    v5 = *v2;
    if (*v4)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = (__int128 *)sub_2341536FC(a1);
  *v4 = v5;
  if (!v5)
  {
LABEL_4:
    sub_234195C74(&stru_256158320, (void (*)(void))sub_234180434);
    v5 = &xmmword_25615AA70;
    *v4 = &xmmword_25615AA70;
  }
LABEL_5:
  nullsub_13(v5, v3);
  *((_DWORD *)v4 + 20) = 1;
  *((_DWORD *)v4 + 21) = *((_DWORD *)*v4 + 18);
  sub_234195BFC((pthread_rwlock_t *)(v4 + 11));
  sub_23415F254(v4 + 9);
  v6 = (unsigned int (*)(__int128 **))*((_QWORD *)*v4 + 2);
  if (v6 && !v6(v4))
  {
    sub_23415F25C((uint64_t)&unk_256158230, (uint64_t)v4, (unint64_t **)v4 + 9);
    j__pthread_rwlock_destroy((pthread_rwlock_t *)(v4 + 11));
    nullsub_13(*v4, v7);
    sub_23418E3C4(v4);
    return 0;
  }
  return v4;
}

__int128 *sub_23417DD5C()
{
  sub_234195C74(&stru_256158320, (void (*)(void))sub_234180434);
  return &xmmword_25615AA70;
}

uint64_t sub_23417DD88(uint64_t a1, uint64_t a2)
{
  __int128 **v3;
  uint64_t v4;

  v3 = sub_23417DC6C(a1);
  v4 = (uint64_t)v3;
  if (v3 && sub_23417D2B0((void ***)v3 + 1, a2))
  {
    *(_DWORD *)(v4 + 84) |= 0x40u;
  }
  else
  {
    sub_23417D814(v4);
    return 0;
  }
  return v4;
}

void sub_23417DDE0(uint64_t a1)
{
  unint64_t v2;

  *(_BYTE *)(a1 + 376) &= ~1u;
  sub_2341659A4(*(_QWORD ***)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  sub_2341659A4(*(_QWORD ***)(a1 + 296));
  *(_QWORD *)(a1 + 296) = 0;
  sub_2341659A4(*(_QWORD ***)(a1 + 304));
  *(_QWORD *)(a1 + 304) = 0;
  sub_234161FC4(*(_QWORD ***)(a1 + 312));
  *(_QWORD *)(a1 + 312) = 0;
  sub_234161FC4(*(_QWORD ***)(a1 + 320));
  *(_QWORD *)(a1 + 320) = 0;
  sub_234161FC4(*(_QWORD ***)(a1 + 328));
  *(_QWORD *)(a1 + 328) = 0;
  sub_234161FC4(*(_QWORD ***)(a1 + 336));
  *(_QWORD *)(a1 + 336) = 0;
  if (*(_QWORD *)(a1 + 344))
  {
    v2 = 0;
    do
      sub_2341540D8(*(_QWORD **)(*(_QWORD *)(a1 + 352) + 8 * v2++));
    while (v2 < *(_QWORD *)(a1 + 344));
  }
  sub_23418E3C4(*(_QWORD **)(a1 + 352));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  sub_23418E3C4(*(_QWORD **)(a1 + 360));
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
}

uint64_t sub_23417DEA8(uint64_t a1)
{
  sub_234193914((unsigned int *)(a1 + 80));
  return 1;
}

uint64_t sub_23417DEC4(uint64_t a1)
{
  return sub_2341621D4(*(uint64_t **)(a1 + 8));
}

uint64_t sub_23417DECC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_23417DED4(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  if (a2)
    *a2 = result[1];
  if (a3)
    *a3 = result[2];
  if (a4)
    *a4 = result[3];
  return result;
}

uint64_t sub_23417DEFC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)(result + 32);
  if (a3)
    *a3 = *(_QWORD *)(result + 40);
  return result;
}

_QWORD *sub_23417DF18(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  if (a2)
    *a2 = result[6];
  if (a3)
    *a3 = result[7];
  if (a4)
    *a4 = result[8];
  return result;
}

uint64_t sub_23417DF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (!(a2 | v5) || !(a3 | *(_QWORD *)(a1 + 16)))
    return 0;
  if (a2)
  {
    sub_234161FC4((_QWORD **)v5);
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (a3)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = a3;
  }
  if (a4)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 24));
    *(_QWORD *)(a1 + 24) = a4;
  }
  sub_23417DDE0(a1);
  return 1;
}

uint64_t sub_23417DFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!(a2 | v4) || !(a3 | *(_QWORD *)(a1 + 40)))
    return 0;
  if (a2)
  {
    sub_234161FC4((_QWORD **)v4);
    *(_QWORD *)(a1 + 32) = a2;
  }
  if (a3)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 40));
    *(_QWORD *)(a1 + 40) = a3;
  }
  sub_23417DDE0(a1);
  return 1;
}

uint64_t sub_23417E03C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;

  v5 = a1[6];
  if (!(a2 | v5) || !(a3 | a1[7]) || !(a4 | a1[8]))
    return 0;
  if (a2)
  {
    sub_234161FC4((_QWORD **)v5);
    a1[6] = a2;
  }
  if (a3)
  {
    sub_234161FC4((_QWORD **)a1[7]);
    a1[7] = a3;
  }
  if (a4)
  {
    sub_234161FC4((_QWORD **)a1[8]);
    a1[8] = a4;
  }
  sub_23417DDE0((uint64_t)a1);
  return 1;
}

uint64_t sub_23417E0D4(uint64_t **a1, size_t *a2, char *a3, unint64_t a4, void *a5, size_t a6, int a7)
{
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))(*a1)[6];
  if (v7)
    return v7();
  else
    return sub_23417F548(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_23417E0E8(uint64_t a1)
{
  return (sub_2341621D4(*(uint64_t **)(a1 + 8)) + 7) >> 3;
}

uint64_t sub_23417E108(uint64_t a1)
{
  if (*(_QWORD *)a1)
    return *(_DWORD *)(*(_QWORD *)a1 + 72) & 1;
  else
    return 0;
}

uint64_t sub_23417E124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23415F0A8((uint64_t)&unk_256158230, a1, a2, a5);
}

uint64_t sub_23417E13C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return sub_23415F178((unint64_t **)(a1 + 72), a2, a3);
}

unint64_t *sub_23417E144(uint64_t a1, unsigned int a2)
{
  return sub_23415F204((unint64_t **)(a1 + 72), a2);
}

uint64_t sub_23417E14C(uint64_t *a1, size_t *a2, _DWORD *a3, int a4, const void *a5, size_t a6)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  size_t v17;
  uint64_t v18;

  result = sub_23417E290(a4, a6);
  if ((_DWORD)result)
  {
    if (a4 == 114)
    {
      *a1 = (uint64_t)a5;
      *a2 = a6;
      result = 1;
      *a3 = 0;
    }
    else
    {
      v13 = 0;
      v14 = 4;
      while (v14 != a4)
      {
        v14 = *(_DWORD *)&byte_2342E2400[v13 + 28];
        v13 += 28;
        if (v13 == 168)
        {
          v15 = 142;
          v16 = 593;
LABEL_11:
          sub_2341579B4(4, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", v16);
          return 0;
        }
      }
      v17 = byte_2342E2400[v13 + 5];
      if (__CFADD__(v17, a6))
      {
        v15 = 140;
        v16 = 574;
        goto LABEL_11;
      }
      result = (uint64_t)sub_23418E2E4(v17 + a6);
      if (result)
      {
        v18 = result;
        memcpy((void *)result, &byte_2342E2400[v13 + 6], v17);
        if (a6)
          memcpy((void *)(v18 + v17), a5, a6);
        *a1 = v18;
        *a2 = v17 + a6;
        result = 1;
        *a3 = 1;
      }
    }
  }
  return result;
}

uint64_t sub_23417E290(int a1, uint64_t a2)
{
  int v2;
  __int16 v3;
  uint64_t v4;
  int v5;

  if (a1 != 114)
  {
    v4 = 0;
    v5 = 4;
    while (v5 != a1)
    {
      v5 = *(_DWORD *)&byte_2342E2400[v4 + 28];
      v4 += 28;
      if (v4 == 168)
      {
        v2 = 142;
        v3 = 541;
        goto LABEL_11;
      }
    }
    if (byte_2342E2400[v4 + 4] != a2)
    {
      v2 = 125;
      v3 = 534;
      goto LABEL_11;
    }
    return 1;
  }
  if (a2 == 36)
    return 1;
  v2 = 125;
  v3 = 524;
LABEL_11:
  sub_2341579B4(4, 0, v2, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", v3);
  return 0;
}

uint64_t sub_23417E34C(uint64_t a1, const void *a2, size_t a3, char *a4, _DWORD *a5, uint64_t **a6)
{
  uint64_t (*v13)(uint64_t **);
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  int v17;
  size_t v18;
  void *v19;

  if (!(*a6)[5])
  {
    v13 = (uint64_t (*)(uint64_t **))(*a6)[4];
    if (v13)
      v14 = v13(a6);
    else
      v14 = (sub_2341621D4(a6[1]) + 7) >> 3;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v16 = 0;
    if (sub_23417E14C((uint64_t *)&v19, &v18, &v17, a1, a2, a3)
      && sub_23417E0D4(a6, &v16, a4, v14, v19, v18, 1))
    {
      if (!HIDWORD(v16))
      {
        *a5 = v16;
        v15 = 1;
LABEL_14:
        if (v17)
          sub_23418E3C4(v19);
        return v15;
      }
      sub_2341579B4(4, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", 627);
    }
    v15 = 0;
    goto LABEL_14;
  }
  if (sub_23417E290(a1, a3))
    return ((uint64_t (*)(uint64_t, const void *, size_t, char *, _DWORD *, uint64_t **))(*a6)[5])(a1, a2, a3, a4, a5, a6);
  return 0;
}

BOOL sub_23417E4C0(uint64_t **a1, size_t *a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t (*v16)(uint64_t **);
  unsigned int v17;
  size_t v18;
  char *v19;
  char *v20;
  _BOOL8 v21;

  if (*(_DWORD *)(a7 + 4) != a6)
  {
    sub_2341579B4(4, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", 652);
    return 0;
  }
  v16 = (uint64_t (*)(uint64_t **))(*a1)[4];
  if (v16)
    v17 = v16(a1);
  else
    v17 = (sub_2341621D4(a1[1]) + 7) >> 3;
  v18 = v17;
  v19 = (char *)sub_23418E2E4(v17);
  if (!v19)
    return 0;
  v20 = v19;
  if (sub_23417CF44(a1, v19, a5, a7, a8, a9))
    v21 = sub_23417E0D4(a1, a2, a3, a4, v20, v18, 3) != 0;
  else
    v21 = 0;
  sub_23418E3C4(v20);
  return v21;
}

uint64_t sub_23417E5E0(int a1, const void *a2, size_t a3, unsigned __int8 *a4, unint64_t a5, _QWORD *a6)
{
  uint64_t *v7;
  uint64_t (*v13)(_QWORD *);
  unsigned int v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  size_t v23;
  size_t v24;
  void *__s2;

  v7 = (uint64_t *)a6[1];
  if (!v7 || !a6[2])
  {
    v15 = 144;
    v16 = 674;
LABEL_10:
    sub_2341579B4(4, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", v16);
    return 0;
  }
  v13 = *(uint64_t (**)(_QWORD *))(*a6 + 32);
  if (v13)
    v14 = v13(a6);
  else
    v14 = (sub_2341621D4(v7) + 7) >> 3;
  v24 = 0;
  __s2 = 0;
  v23 = 0;
  v22 = 0;
  if (a1 == 114 && a3 != 36)
  {
    v15 = 125;
    v16 = 686;
    goto LABEL_10;
  }
  v19 = v14;
  v20 = (char *)sub_23418E2E4(v14);
  if (!v20)
    return 0;
  v21 = v20;
  if (!sub_23417E77C((uint64_t)a6, &v23, v20, v19, a4, a5, 1)
    || !sub_23417E14C((uint64_t *)&__s2, &v24, &v22, a1, a2, a3))
  {
    goto LABEL_20;
  }
  if (v23 != v24 || v23 && memcmp(v21, __s2, v23))
  {
    sub_2341579B4(4, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", 706);
LABEL_20:
    v17 = 0;
    goto LABEL_21;
  }
  v17 = 1;
LABEL_21:
  sub_23418E3C4(v21);
  if (v22)
    sub_23418E3C4(__s2);
  return v17;
}

uint64_t sub_23417E77C(uint64_t a1, size_t *a2, char *a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6, int a7)
{
  uint64_t (*v14)(uint64_t);
  unsigned int v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  if (!*(_QWORD *)(a1 + 8) || !*(_QWORD *)(a1 + 16))
  {
    v16 = 144;
    v17 = 492;
LABEL_7:
    sub_2341579B4(4, 0, v16, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", v17);
    return 0;
  }
  if (!sub_23417EBDC(a1))
    return 0;
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32);
  if (v14)
    v15 = v14(a1);
  else
    v15 = (sub_2341621D4(*(uint64_t **)(a1 + 8)) + 7) >> 3;
  if (v15 > a4)
  {
    v16 = 135;
    v17 = 504;
    goto LABEL_7;
  }
  if (v15 != a6)
  {
    v16 = 112;
    v17 = 509;
    goto LABEL_7;
  }
  v20 = sub_23418E2E4(0x30uLL);
  if (!v20)
    return 0;
  v21 = (uint64_t)v20;
  *(_OWORD *)((char *)v20 + 26) = 0u;
  *(_OWORD *)v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  sub_234162DC8(v20);
  v22 = sub_234162E68(v21);
  v23 = sub_234162E68(v21);
  v31 = 0;
  v18 = 0;
  if (v22)
  {
    v24 = (uint64_t)v23;
    if (v23)
    {
      v25 = a3;
      if (a7 != 3)
      {
        v25 = (char *)sub_23418E2E4(a6);
        if (!v25)
        {
          v18 = 0;
          v31 = 0;
          goto LABEL_24;
        }
      }
      v31 = v25;
      if (!sub_2341625C8(a5, a6, v22))
        goto LABEL_23;
      v26 = *(_QWORD *)(a1 + 8);
      if ((sub_234162948((uint64_t *)*v22, *((int *)v22 + 2), *(uint64_t **)v26, *(int *)(v26 + 8)) & 0x80000000) == 0)
      {
        v27 = 115;
        v28 = 543;
LABEL_22:
        sub_2341579B4(4, 0, v27, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", v28);
LABEL_23:
        v18 = 0;
        goto LABEL_24;
      }
      if (!sub_234169A50((_QWORD *)(a1 + 288), (pthread_rwlock_t *)(a1 + 88), v26, v21)
        || !sub_2341652E0(v24, (uint64_t)v22, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 288) + 24, v21, *(_QWORD *)(a1 + 288)))
      {
        goto LABEL_23;
      }
      if (!sub_234162840(v31, a6, v24))
      {
        v27 = 68;
        v28 = 553;
        goto LABEL_22;
      }
      if (a7 == 3)
      {
        *a2 = a6;
      }
      else
      {
        if (a7 != 1)
        {
          v27 = 143;
          v28 = 567;
          goto LABEL_22;
        }
        if (!sub_23417C864(a3, a2, a6, v31, a6))
        {
          v27 = 136;
          v28 = 572;
          goto LABEL_22;
        }
      }
      v18 = 1;
    }
  }
LABEL_24:
  if (!*(_BYTE *)(v21 + 40))
  {
    v29 = *(_QWORD *)(v21 + 8);
    v30 = *(_QWORD *)(v21 + 16) - 1;
    *(_QWORD *)(v21 + 16) = v30;
    *(_QWORD *)(v21 + 32) = *(_QWORD *)(v29 + 8 * v30);
  }
  sub_234162D80((unint64_t **)v21);
  if (v31 != a3)
    sub_23418E3C4(v31);
  return v18;
}

uint64_t sub_23417EA60(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned __int8 *a7, unint64_t a8)
{
  uint64_t (*v15)(uint64_t **);
  unsigned int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  size_t v20;
  uint64_t (*v21)(uint64_t **);
  unsigned int v22;
  uint64_t v23;
  size_t v25;

  if (*(_DWORD *)(a4 + 4) == a3)
  {
    v15 = (uint64_t (*)(uint64_t **))(*a1)[4];
    if (v15)
      v16 = v15(a1);
    else
      v16 = (sub_2341621D4(a1[1]) + 7) >> 3;
    v17 = v16;
    v25 = v16;
    v18 = (char *)sub_23418E2E4(v16);
    if (v18)
    {
      v19 = v18;
      if (sub_23417E77C((uint64_t)a1, &v25, v18, v17, a7, a8, 3))
      {
        v20 = v25;
        v21 = (uint64_t (*)(uint64_t **))(*a1)[4];
        if (v21)
          v22 = v21(a1);
        else
          v22 = (sub_2341621D4(a1[1]) + 7) >> 3;
        if (v20 == v22)
        {
          v23 = sub_23417CB8C(a1, a2, a4, a5, v19, a6);
LABEL_16:
          sub_23418E3C4(v19);
          return v23;
        }
        sub_2341579B4(4, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", 747);
      }
      v23 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    sub_2341579B4(4, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", 731);
  }
  return 0;
}

uint64_t sub_23417EBDC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  __int16 v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
  {
    v4 = 144;
    v5 = 78;
    goto LABEL_11;
  }
  v3 = sub_2341621D4(*(uint64_t **)(a1 + 8));
  if (v3 > 0x4000)
  {
    v4 = 128;
    v5 = 86;
LABEL_11:
    sub_2341579B4(4, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", v5);
    return 0;
  }
  if (v3 <= 0x1FF)
  {
    v4 = 126;
    v5 = 93;
    goto LABEL_11;
  }
  v6 = *(unsigned int *)(v1 + 8);
  if ((int)v6 < 1 || (v7 = *(uint64_t **)v1, (**(_BYTE **)v1 & 1) == 0) || *(_DWORD *)(v1 + 16))
  {
    v4 = 104;
    v5 = 100;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = sub_2341621D4(*(uint64_t **)(a1 + 16));
    if (v10 < 2 || *(_DWORD *)(v9 + 16) || (v11 = *(unsigned int *)(v9 + 8), (int)v11 < 1) || (**(_BYTE **)v9 & 1) == 0)
    {
      v4 = 101;
      v5 = 110;
      goto LABEL_11;
    }
    if ((*(_BYTE *)(a1 + 84) & 0x80) != 0)
    {
      if ((int)sub_234162948(v7, v6, *(uint64_t **)v9, v11) <= 0)
      {
        v4 = 101;
        v5 = 117;
        goto LABEL_11;
      }
    }
    else if (v10 >= 0x22)
    {
      v4 = 101;
      v5 = 131;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 84) & 0x40) == 0)
  {
    v4 = 144;
    v5 = 140;
    goto LABEL_11;
  }
  return 1;
}

uint64_t sub_23417ED90(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t result;
  void **v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)(a3 + 16) || (int)sub_234162A28(a3, a4) >= 0)
  {
    *a1 = 0;
    return 1;
  }
  else
  {
    sub_234162DC8((_QWORD *)a6);
    result = (uint64_t)sub_234162E68(a6);
    if (result)
    {
      v13 = (void **)result;
      result = sub_234167EE8(result, a2, a3, a6);
      if ((_DWORD)result)
      {
        result = sub_234163A0C(0, v13, (uint64_t)v13, a4, a5, a6);
        if ((_DWORD)result)
        {
          *a1 = sub_234162B4C((unsigned int *)v13);
          result = 1;
        }
      }
    }
    if (!*(_BYTE *)(a6 + 40))
    {
      v14 = *(_QWORD *)(a6 + 8);
      v15 = *(_QWORD *)(a6 + 16) - 1;
      *(_QWORD *)(a6 + 16) = v15;
      *(_QWORD *)(a6 + 32) = *(_QWORD *)(v14 + 8 * v15);
    }
  }
  return result;
}

uint64_t sub_23417EE7C(uint64_t *a1)
{
  _OWORD *v2;
  unint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t (*v8)(uint64_t *);
  unsigned int v9;
  char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  __int16 v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*a1 && (*(_BYTE *)(*a1 + 72) & 1) != 0)
  {
    sub_2341579B4(4, 0, 146, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", 939);
    return 0;
  }
  if (!sub_23417D310(a1))
    return 0;
  v2 = sub_23418E2E4(0x30uLL);
  if (!v2)
    return 0;
  v3 = (unint64_t **)v2;
  *(_OWORD *)((char *)v2 + 26) = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v20 = 0;
  v4 = a1[2];
  if (sub_2341621D4((uint64_t *)v4) - 257 < 0xFFFFFF10)
    goto LABEL_10;
  v5 = a1[1];
  if (*(int *)(v5 + 8) < 1)
    goto LABEL_10;
  if ((**(_BYTE **)v5 & 1) == 0)
    goto LABEL_10;
  if (*(int *)(v4 + 8) < 1)
    goto LABEL_10;
  if ((**(_BYTE **)v4 & 1) == 0)
    goto LABEL_10;
  sub_234195C74(&stru_256158310, (void (*)(void))sub_23418DA0C);
  if (!sub_2341679F8((uint64_t *)&v21, v5, (uint64_t)&qword_25615AA58, (uint64_t)v3)
    || (_DWORD)v23
    || !(_DWORD)v22)
  {
    goto LABEL_10;
  }
  v13 = *v21 ^ 1;
  if ((int)v22 >= 2)
  {
    v14 = v22 - 1;
    v15 = v21 + 1;
    do
    {
      v16 = *v15++;
      v13 |= v16;
      --v14;
    }
    while (v14);
  }
  if (!v13 && (sub_23416B7D8(&v20, a1[1], 0, (uint64_t)v3, 0) ? (v17 = v20 == 2) : (v17 = 0), v17))
  {
    v7 = 0;
    v6 = 1;
  }
  else
  {
LABEL_10:
    sub_2341579B4(4, 0, 146, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", 974);
    v6 = 0;
    v7 = 1;
  }
  sub_234161FC4(&v21);
  sub_234162D80(v3);
  if ((v7 & 1) == 0 && a1[3] && a1[4])
  {
    memset(v24, 0, sizeof(v24));
    v8 = *(uint64_t (**)(uint64_t *))(*a1 + 32);
    if (v8)
      v9 = v8(a1);
    else
      v9 = (sub_2341621D4((uint64_t *)a1[1]) + 7) >> 3;
    v19 = v9;
    v11 = (char *)sub_23418E2E4(v9);
    if (v11)
    {
      v12 = (unsigned __int8 *)v11;
      if (sub_23417E34C(672, v24, 0x20uLL, v11, &v19, (uint64_t **)a1))
      {
        if (sub_23417E5E0(672, v24, 0x20uLL, v12, v19, a1))
        {
          v6 = 1;
LABEL_40:
          sub_23418E3C4(v12);
          return v6;
        }
        v18 = 1007;
      }
      else
      {
        v18 = 999;
      }
      sub_2341579B4(4, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa.c", v18);
      v6 = 0;
      goto LABEL_40;
    }
    return 0;
  }
  return v6;
}

uint64_t sub_23417F134(uint64_t a1, char *a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t (*v4)(void);

  v4 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 64);
  if (v4)
    return v4();
  else
    return sub_23417F148(a1, a2, a3, a4);
}

uint64_t sub_23417F148(uint64_t a1, char *a2, unsigned __int8 *a3, unint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  if (!*(_QWORD *)(a1 + 8) || !*(_QWORD *)(a1 + 24))
  {
    sub_2341579B4(4, 0, 144, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", 596);
    return 0;
  }
  v41 = 0;
  v8 = sub_23418E2E4(0x30uLL);
  if (!v8)
    return 0;
  v9 = (uint64_t)v8;
  *(_OWORD *)((char *)v8 + 26) = 0u;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  sub_234162DC8(v8);
  v10 = sub_234162E68(v9);
  v11 = sub_234162E68(v9);
  v12 = 0;
  v13 = 0;
  if (!v10)
    goto LABEL_11;
  v14 = v11;
  if (!v11)
    goto LABEL_11;
  if (!sub_2341625C8(a3, a4, v10))
    goto LABEL_10;
  if ((int)sub_234162948((uint64_t *)*v10, *((int *)v10 + 2), **(uint64_t ***)(a1 + 8), *(int *)(*(_QWORD *)(a1 + 8) + 8)) < 0)
  {
    if (!sub_23417F6B8(a1, v9))
    {
      v15 = 68;
      v16 = 633;
      goto LABEL_9;
    }
    v21 = *(_DWORD *)(a1 + 84) & 0x48;
    if (!*(_QWORD *)(a1 + 16) && !v21)
    {
      v15 = 130;
      v16 = 649;
      goto LABEL_9;
    }
    if (v21)
    {
      v12 = 0;
    }
    else
    {
      v12 = sub_23417F888(a1, &v41);
      if (!v12)
      {
        v33 = 656;
        goto LABEL_54;
      }
      if (!sub_23417C614((uint64_t)v10, (uint64_t)v12, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 288), v9))
        goto LABEL_55;
    }
    v22 = *(uint64_t **)(a1 + 32);
    if (!v22)
      goto LABEL_39;
    v23 = *(uint64_t **)(a1 + 40);
    if (!v23)
      goto LABEL_39;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_39;
    if (!*(_QWORD *)(a1 + 48))
      goto LABEL_39;
    if (!*(_QWORD *)(a1 + 56))
      goto LABEL_39;
    if (!*(_QWORD *)(a1 + 64))
      goto LABEL_39;
    if (*((_DWORD *)v23 + 4))
      goto LABEL_39;
    v24 = *(int *)(*(_QWORD *)(a1 + 296) + 32);
    v25 = *((int *)v23 + 2);
    if (v25 > v24)
    {
      v26 = 0;
      v27 = *v23;
      v28 = v25 - v24;
      v29 = (uint64_t *)(v27 + 8 * v24);
      do
      {
        v30 = *v29++;
        v26 |= v30;
        --v28;
      }
      while (v28);
      if (v26)
        goto LABEL_39;
    }
    if (*((_DWORD *)v22 + 4))
      goto LABEL_39;
    v34 = *(int *)(*(_QWORD *)(a1 + 304) + 32);
    v35 = *((int *)v22 + 2);
    if (v35 <= v34)
      goto LABEL_64;
    v36 = 0;
    v37 = *v22;
    v38 = v35 - v34;
    v39 = (uint64_t *)(v37 + 8 * v34);
    do
    {
      v40 = *v39++;
      v36 |= v40;
      --v38;
    }
    while (v38);
    if (!v36)
    {
LABEL_64:
      if (!sub_23417FA98((_QWORD **)v14, (uint64_t)v10, (_QWORD *)a1, v9))
        goto LABEL_55;
    }
    else
    {
LABEL_39:
      if (!sub_234166004((uint64_t)v14, (uint64_t)v10, *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 8), v9, *(_QWORD *)(a1 + 288)))
      {
LABEL_55:
        v13 = 0;
        goto LABEL_11;
      }
    }
    if (!*(_QWORD *)(a1 + 16)
      || (v31 = sub_234162E68(v9)) != 0
      && (v32 = (uint64_t)v31,
          sub_2341652E0((uint64_t)v31, (uint64_t)v14, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), v9, *(_QWORD *)(a1 + 288)))&& sub_234162CAC(v32, (uint64_t)v10))
    {
      if (!v21 && !sub_23416583C((uint64_t)v14, (uint64_t)v14, v12[1], *(_QWORD *)(a1 + 288), v9))
        goto LABEL_55;
      if (sub_234162840(a2, a4, (uint64_t)v14))
      {
        v13 = 1;
        goto LABEL_11;
      }
      v33 = 713;
    }
    else
    {
      v33 = 695;
    }
LABEL_54:
    sub_2341579B4(4, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", v33);
    goto LABEL_55;
  }
  v15 = 115;
  v16 = 628;
LABEL_9:
  sub_2341579B4(4, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", v16);
LABEL_10:
  v13 = 0;
  v12 = 0;
LABEL_11:
  if (!*(_BYTE *)(v9 + 40))
  {
    v17 = *(_QWORD *)(v9 + 8);
    v18 = *(_QWORD *)(v9 + 16) - 1;
    *(_QWORD *)(v9 + 16) = v18;
    *(_QWORD *)(v9 + 32) = *(_QWORD *)(v17 + 8 * v18);
  }
  sub_234162D80((unint64_t **)v9);
  if (v12)
  {
    v19 = v41;
    if (v41 == 1024)
    {
      sub_2341540D8(v12);
    }
    else
    {
      sub_234195C38((pthread_rwlock_t *)(a1 + 88));
      *(_BYTE *)(*(_QWORD *)(a1 + 360) + v19) = 0;
      sub_234195C54((pthread_rwlock_t *)(a1 + 88));
    }
  }
  return v13;
}

uint64_t sub_23417F534(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t sub_23417F53C(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 84) & a2;
}

uint64_t sub_23417F548(uint64_t **a1, size_t *a2, char *a3, unint64_t a4, void *a5, size_t a6, int a7)
{
  uint64_t (*v14)(uint64_t **);
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int (*v20)(uint64_t **, char *, unsigned __int8 *, size_t);

  v14 = (uint64_t (*)(uint64_t **))(*a1)[4];
  if (v14)
    v15 = v14(a1);
  else
    v15 = (sub_2341621D4(a1[1]) + 7) >> 3;
  v16 = v15;
  if (v15 <= a4)
  {
    v18 = (unsigned __int8 *)sub_23418E2E4(v15);
    v19 = v18;
    if (v18)
    {
      if (a7 == 3)
      {
        if (!sub_23417C9C4(v18, v16, a5, a6))
          goto LABEL_16;
      }
      else
      {
        if (a7 != 1)
        {
          sub_2341579B4(4, 0, 143, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", 463);
          goto LABEL_16;
        }
        if (!sub_23417C798(v18, v16, a5, a6))
          goto LABEL_16;
      }
      v20 = (unsigned int (*)(uint64_t **, char *, unsigned __int8 *, size_t))(*a1)[8];
      if (v20)
      {
        if (!v20(a1, a3, v19, v16))
          goto LABEL_16;
LABEL_20:
        *a2 = v16;
        v17 = 1;
        goto LABEL_17;
      }
      if (sub_23417F148((uint64_t)a1, a3, v19, v16))
        goto LABEL_20;
    }
LABEL_16:
    v17 = 0;
LABEL_17:
    sub_23418E3C4(v19);
    return v17;
  }
  sub_2341579B4(4, 0, 135, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", 446);
  return 0;
}

uint64_t sub_23417F6B8(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t *v4;
  char v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD **v16;
  _QWORD **v17;

  v4 = (pthread_rwlock_t *)(a1 + 88);
  sub_234195C1C((pthread_rwlock_t *)(a1 + 88));
  v5 = *(_BYTE *)(a1 + 376);
  sub_234195C54(v4);
  if ((v5 & 1) == 0)
  {
    sub_234195C38(v4);
    if ((*(_BYTE *)(a1 + 376) & 1) != 0)
    {
LABEL_25:
      v14 = 1;
LABEL_34:
      sub_234195C54(v4);
      return v14;
    }
    if (!sub_23417EBDC(a1))
      goto LABEL_33;
    v6 = *(_QWORD ***)(a1 + 288);
    if (!v6)
    {
      v6 = sub_2341668A4(*(_QWORD *)(a1 + 8), a2);
      *(_QWORD *)(a1 + 288) = v6;
      if (!v6)
        goto LABEL_33;
    }
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      if (!sub_23418DA30((void ***)(a1 + 312), v7, *((_DWORD *)v6 + 8)))
        goto LABEL_33;
    }
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_24;
    v8 = *(_QWORD *)(a1 + 32);
    if (!v8 || !*(_QWORD *)(a1 + 40))
      goto LABEL_24;
    if ((v9 = *(_QWORD ***)(a1 + 296)) == 0 && (v9 = sub_2341657CC(v8, a2), (*(_QWORD *)(a1 + 296) = v9) == 0)
      || (v10 = *(_QWORD ***)(a1 + 304)) == 0
      && (v10 = sub_2341657CC(*(_QWORD *)(a1 + 40), a2), (*(_QWORD *)(a1 + 304) = v10) == 0))
    {
LABEL_33:
      v14 = 0;
      goto LABEL_34;
    }
    v11 = *(_QWORD *)(a1 + 48);
    if (!v11 || !*(_QWORD *)(a1 + 56))
      goto LABEL_24;
    if (!*(_QWORD *)(a1 + 64))
    {
      v15 = sub_234161F88();
      v16 = (_QWORD **)v15;
      if (!v15
        || !sub_234167950((uint64_t)v15, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 296)))
      {
        v17 = v16;
LABEL_32:
        sub_234161FC4(v17);
        goto LABEL_33;
      }
      *(_QWORD *)(a1 + 64) = v16;
      v11 = *(_QWORD *)(a1 + 48);
    }
    if (!sub_23418DA30((void ***)(a1 + 320), v11, *((_DWORD *)v9 + 8))
      || !sub_23418DA30((void ***)(a1 + 328), *(_QWORD *)(a1 + 56), *((_DWORD *)v10 + 8)))
    {
      goto LABEL_33;
    }
    if (*(_QWORD *)(a1 + 336))
    {
LABEL_24:
      *(_BYTE *)(a1 + 376) |= 1u;
      goto LABEL_25;
    }
    v12 = sub_234161F88();
    v13 = (_QWORD **)v12;
    if (v12
      && sub_23416583C((uint64_t)v12, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 296), a2))
    {
      *(_QWORD *)(a1 + 336) = v13;
      goto LABEL_24;
    }
    v17 = v13;
    goto LABEL_32;
  }
  return 1;
}

_QWORD *sub_23417F888(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  pthread_rwlock_t *v5;
  size_t v6;
  size_t i;
  _BYTE *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  BOOL v16;
  size_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t j;

  sub_234195C74(&stru_256158220, (void (*)(void))sub_23417C550);
  v4 = qword_25615AA50;
  v5 = (pthread_rwlock_t *)(a1 + 88);
  sub_234195C38((pthread_rwlock_t *)(a1 + 88));
  v6 = *(_QWORD *)(a1 + 344);
  if (*(_QWORD *)(a1 + 368) != v4)
  {
    if (v6)
    {
      for (i = 0; i < v6; ++i)
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * i) + 16) = 31;
        v6 = *(_QWORD *)(a1 + 344);
      }
    }
    *(_QWORD *)(a1 + 368) = v4;
  }
  if (v6)
  {
    v8 = memchr(*(void **)(a1 + 360), 0, v6);
    if (v8)
    {
      *v8 = 1;
      v9 = &v8[-*(_QWORD *)(a1 + 360)];
      *a2 = v9;
      v10 = *(_QWORD **)(*(_QWORD *)(a1 + 352) + 8 * (_QWORD)v9);
      goto LABEL_32;
    }
    if (v6 >= 0x400)
    {
      *a2 = 1024;
      v10 = sub_23417C5AC();
      goto LABEL_32;
    }
  }
  v11 = 2 * v6;
  if (2 * v6 >= 0x400)
    v11 = 1024;
  if (v6)
    v12 = v11;
  else
    v12 = 1;
  v13 = sub_23418E380(v12, 8uLL);
  v14 = (char *)sub_23418E2E4(v12);
  v15 = v14;
  if (v13)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v17 = *(_QWORD *)(a1 + 344);
    if (8 * v17)
    {
      memcpy(v13, *(const void **)(a1 + 352), 8 * v17);
      v17 = *(_QWORD *)(a1 + 344);
    }
    if (v17)
    {
      memcpy(v15, *(const void **)(a1 + 360), v17);
      v18 = *(_QWORD *)(a1 + 344);
    }
    else
    {
      v18 = 0;
    }
    if (v18 >= v12)
    {
LABEL_31:
      bzero(&v15[v18], v12 - v18);
      v15[*(_QWORD *)(a1 + 344)] = 1;
      *a2 = *(_QWORD *)(a1 + 344);
      v10 = (_QWORD *)v13[*(_QWORD *)(a1 + 344)];
      sub_23418E3C4(*(_QWORD **)(a1 + 352));
      *(_QWORD *)(a1 + 352) = v13;
      sub_23418E3C4(*(_QWORD **)(a1 + 360));
      *(_QWORD *)(a1 + 360) = v15;
      *(_QWORD *)(a1 + 344) = v12;
      goto LABEL_32;
    }
    while (1)
    {
      v19 = sub_23417C5AC();
      v13[v18] = v19;
      if (!v19)
        break;
      if (v12 == ++v18)
      {
        v18 = *(_QWORD *)(a1 + 344);
        goto LABEL_31;
      }
    }
    for (j = *(_QWORD *)(a1 + 344); j < v18; ++j)
      sub_2341540D8((_QWORD *)v13[j]);
  }
  sub_23418E3C4(v15);
  sub_23418E3C4(v13);
  v10 = 0;
LABEL_32:
  sub_234195C54(v5);
  return v10;
}

uint64_t sub_23417FA98(_QWORD **a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_234162DC8((_QWORD *)a4);
  v8 = sub_234162E68(a4);
  v9 = sub_234162E68(a4);
  result = 0;
  if (v8)
  {
    if (v9)
    {
      result = sub_23417F6B8((uint64_t)a3, a4);
      if ((_DWORD)result)
      {
        v11 = a3[36];
        v12 = a3[37] + 24;
        v13 = a3[38];
        result = sub_23418DA98((uint64_t)v8, a2, v13, v12, a4);
        if ((_DWORD)result)
        {
          v14 = v13 + 24;
          result = sub_234166004((uint64_t)v9, (uint64_t)v8, a3[41], v14, a4, a3[38]);
          if ((_DWORD)result)
          {
            result = sub_23418DA98((uint64_t)v8, a2, a3[37], v14, a4);
            if ((_DWORD)result)
            {
              result = sub_234166004((uint64_t)a1, (uint64_t)v8, a3[40], v12, a4, a3[37]);
              if ((_DWORD)result)
              {
                result = sub_23418DA98((uint64_t)v8, (uint64_t)v9, a3[37], v14, a4);
                if ((_DWORD)result)
                {
                  result = sub_234163FD0((uint64_t)a1, (uint64_t)a1, (uint64_t)v8, v12, a4);
                  if ((_DWORD)result)
                  {
                    result = sub_23416583C((uint64_t)a1, (uint64_t)a1, a3[42], a3[37], a4);
                    if ((_DWORD)result)
                    {
                      result = sub_234167EE8((uint64_t)a1, (uint64_t)a1, v14, a4);
                      if ((_DWORD)result)
                      {
                        result = sub_234161674(a1, (uint64_t)a1, (uint64_t)v9);
                        if ((_DWORD)result)
                        {
                          sub_2341621D4((uint64_t *)(v11 + 24));
                          result = sub_234162474((uint64_t)a1, *(int *)(v11 + 32));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*(_BYTE *)(a4 + 40))
  {
    v15 = *(_QWORD *)(a4 + 8);
    v16 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v15 + 8 * v16);
  }
  return result;
}

uint64_t sub_23417FC54(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  return sub_23417FC5C(a1, a2, a3, a4, 0);
}

uint64_t sub_23417FC5C(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int a5)
{
  unsigned int v6;
  signed int v7;
  __int128 **v8;
  int v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v44;
  unsigned int v45;
  unint64_t *v47;
  unint64_t *v48;
  int v49;

  if (!a1)
  {
    sub_2341579B4(15, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", 1254);
    return 0;
  }
  v6 = 0;
  v7 = a2 & 0xFFFFFF80;
  v45 = ((a2 & 0xFFFFFF80) >> 1) - 100;
  v44 = (a2 & 0xFFFFFF80) >> 1;
  while (1)
  {
    sub_234157348();
    v8 = sub_23417DC6C(0);
    if (!v8)
      break;
    if (v7 <= 255)
    {
      v9 = 126;
      v10 = 1073;
LABEL_8:
      sub_2341579B4(4, 0, v9, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", v10);
      goto LABEL_73;
    }
    if (sub_2341621D4(a3) >= 0x21)
    {
      v9 = 101;
      v10 = 1084;
      goto LABEL_8;
    }
    v11 = sub_23418E2E4(0x30uLL);
    v12 = (uint64_t)v11;
    if (v11)
    {
      *(_OWORD *)((char *)v11 + 26) = 0u;
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      sub_234162DC8(v11);
      v13 = sub_234162E68(v12);
      v48 = sub_234162E68(v12);
      v47 = sub_234162E68(v12);
      v14 = (uint64_t *)sub_234162E68(v12);
      v15 = sub_234162E68(v12);
      v16 = sub_234162E68(v12);
      if (v13)
      {
        if (v48)
        {
          if (v47)
          {
            if (v14)
            {
              if (v15)
              {
                v17 = (uint64_t)v16;
                if (v16)
                {
                  if (sub_2341698DC((uint64_t)v15, v45))
                  {
                    if (sub_2341698DC(v17, v44))
                    {
                      if (v8[1] || (v18 = (__int128 *)sub_234161F88(), (v8[1] = v18) != 0))
                      {
                        if (v8[3] || (v19 = (__int128 *)sub_234161F88(), (v8[3] = v19) != 0))
                        {
                          if (v8[2] || (v20 = (__int128 *)sub_234161F88(), (v8[2] = v20) != 0))
                          {
                            if (v8[4] || (v21 = (__int128 *)sub_234161F88(), (v8[4] = v21) != 0))
                            {
                              if (v8[5] || (v22 = (__int128 *)sub_234161F88(), (v8[5] = v22) != 0))
                              {
                                if (v8[6] || (v23 = (__int128 *)sub_234161F88(), (v8[6] = v23) != 0))
                                {
                                  if (v8[7] || (v24 = (__int128 *)sub_234161F88(), (v8[7] = v24) != 0))
                                  {
                                    if (sub_234162060((void **)v8[2], (uint64_t)a3)
                                      && sub_2341622B0((uint64_t)v14, &unk_2342E24C8, 0x20uLL))
                                    {
                                      if (v7 > 0xFFF)
                                      {
                                        if (v7 == 4096
                                          || sub_2341618E4((uint64_t)v14, 1uLL)
                                          && sub_2341634F4((uint64_t)v14, v14, v44 - 2048))
                                        {
LABEL_40:
                                          while (sub_23418DB58((unsigned int *)v8[4], v44, (unsigned int *)v8[2], 0, (uint64_t)v14, (uint64_t)v15, v12, a4)&& (!a4|| (*(unsigned int (**)(uint64_t, _QWORD))(a4 + 8))(3, 0))&& sub_23418DB58((unsigned int *)v8[5], v44, (unsigned int *)v8[2], (uint64_t)v8[4], (uint64_t)v14, (uint64_t)v15, v12, a4)
                                               && (!a4
                                                || (*(unsigned int (**)(uint64_t, uint64_t))(a4 + 8))(3, 1)))
                                          {
                                            v39 = (uint64_t)v8[5];
                                            v40 = (uint64_t)v8[4];
                                            if ((sub_234162A28(v40, v39) & 0x80000000) != 0)
                                            {
                                              v8[4] = (__int128 *)v39;
                                              v8[5] = (__int128 *)v40;
                                              v40 = v39;
                                            }
                                            sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
                                            if (!sub_234161CF8((uint64_t)v48, v40, (uint64_t)&qword_256159710))break;
                                            v41 = (uint64_t)v8[5];
                                            sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
                                            if (!sub_234161CF8((uint64_t)v47, v41, (uint64_t)&qword_256159710)|| !sub_234167E08((void **)v13, (uint64_t)v48, (uint64_t)v47, v12)|| !sub_234166E98((uint64_t)v8[3], &v49, (uint64_t)v8[2], (uint64_t)v13, v12))
                                            {
                                              break;
                                            }
                                            if ((int)sub_234162A28((uint64_t)v8[3], v17) >= 1)
                                            {
                                              if (!sub_234167EE8((uint64_t)v8[1], (uint64_t)v8[4], (uint64_t)v8[5], v12)|| !sub_234163A0C(0, (void **)v8[6], (uint64_t)v8[3], (uint64_t)v48, v44, v12)|| !sub_234163A0C(0, (void **)v8[7], (uint64_t)v8[3], (uint64_t)v47, v44, v12))
                                              {
                                                break;
                                              }
                                              v25 = v8[1];
                                              v26 = *((unsigned int *)v25 + 2);
                                              v27 = 8 * v26 - 8;
                                              v28 = *((_DWORD *)v25 + 2);
                                              while (1)
                                              {
                                                v29 = __OFSUB__(v28--, 1);
                                                if (v28 < 0 != v29)
                                                  break;
                                                v30 = *(_QWORD *)(*(_QWORD *)v25 + v27);
                                                v27 -= 8;
                                                if (v30)
                                                {
                                                  *((_DWORD *)v25 + 2) = v28 + 1;
                                                  goto LABEL_62;
                                                }
                                              }
                                              *((_DWORD *)v25 + 2) = v26 & ((int)v26 >> 31);
                                              if ((v26 & 0x80000000) == 0)
                                                *((_DWORD *)v25 + 4) = 0;
LABEL_62:
                                              if (sub_2341621D4((uint64_t *)v8[1]) == v7)
                                              {
                                                if (!sub_23417F6B8((uint64_t)v8, v12))
                                                  break;
                                                if (sub_23417D310((uint64_t *)v8))
                                                {
                                                  v31 = 0;
                                                  goto LABEL_68;
                                                }
                                                v32 = 124;
                                                v33 = 1218;
                                              }
                                              else
                                              {
                                                v32 = 68;
                                                v33 = 1204;
                                              }
                                              goto LABEL_67;
                                            }
                                          }
                                        }
                                      }
                                      else if (sub_23416371C((uint64_t)v14, (uint64_t)v14, 2048 - v44))
                                      {
                                        goto LABEL_40;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v32 = 3;
    v33 = 1226;
LABEL_67:
    sub_2341579B4(4, 0, v32, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", v33);
    v31 = 1;
LABEL_68:
    if (v12)
    {
      if (!*(_BYTE *)(v12 + 40))
      {
        v34 = *(_QWORD *)(v12 + 8);
        v35 = *(_QWORD *)(v12 + 16) - 1;
        *(_QWORD *)(v12 + 16) = v35;
        *(_QWORD *)(v12 + 32) = *(_QWORD *)(v34 + 8 * v35);
      }
      sub_234162D80((unint64_t **)v12);
    }
    if (!v31)
    {
      if (!a5 || sub_23417EE7C((uint64_t *)v8))
      {
        sub_23417DDE0(a1);
        sub_234161FC4(*(_QWORD ***)(a1 + 8));
        *(_QWORD *)(a1 + 8) = v8[1];
        v8[1] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 16));
        *(_QWORD *)(a1 + 16) = v8[2];
        v8[2] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 24));
        *(_QWORD *)(a1 + 24) = v8[3];
        v8[3] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 32));
        *(_QWORD *)(a1 + 32) = v8[4];
        v8[4] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 40));
        *(_QWORD *)(a1 + 40) = v8[5];
        v8[5] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 48));
        *(_QWORD *)(a1 + 48) = v8[6];
        v8[6] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 56));
        *(_QWORD *)(a1 + 56) = v8[7];
        v8[7] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 64));
        *(_QWORD *)(a1 + 64) = v8[8];
        v8[8] = 0;
        sub_2341659A4(*(_QWORD ***)(a1 + 288));
        *(_QWORD *)(a1 + 288) = v8[36];
        v8[36] = 0;
        sub_2341659A4(*(_QWORD ***)(a1 + 296));
        *(_QWORD *)(a1 + 296) = v8[37];
        v8[37] = 0;
        sub_2341659A4(*(_QWORD ***)(a1 + 304));
        *(_QWORD *)(a1 + 304) = v8[38];
        v8[38] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 312));
        *(_QWORD *)(a1 + 312) = v8[39];
        v8[39] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 320));
        *(_QWORD *)(a1 + 320) = v8[40];
        v8[40] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 328));
        *(_QWORD *)(a1 + 328) = v8[41];
        v8[41] = 0;
        sub_234161FC4(*(_QWORD ***)(a1 + 336));
        *(_QWORD *)(a1 + 336) = v8[42];
        v8[42] = 0;
        *(_BYTE *)(a1 + 376) = *(_BYTE *)(a1 + 376) & 0xFE | (_BYTE)v8[47] & 1;
        v37 = 1;
        goto LABEL_84;
      }
      break;
    }
LABEL_73:
    v36 = sub_234157258();
    sub_23417D814((uint64_t)v8);
    v37 = 0;
    v8 = 0;
    if (v6 <= 2 && (v36 & 0xFF000000) == 0x4000000)
    {
      ++v6;
      if ((v36 & 0xFFF) == 0x8D)
        continue;
    }
    goto LABEL_84;
  }
  v37 = 0;
LABEL_84:
  sub_23417D814((uint64_t)v8);
  return v37;
}

uint64_t sub_23418035C(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a2 == 2048 || a2 == 3072 || a2 == 4096)
  {
    v6 = sub_234161F88();
    v7 = v6;
    if (v6 && sub_23416171C((_QWORD **)v6, 1uLL))
    {
      *((_DWORD *)v7 + 4) = 0;
      *(_QWORD *)*v7 = 65537;
      *((_DWORD *)v7 + 2) = 1;
      v8 = sub_23417FC5C(a1, a2, v7, a3, 1);
      sub_234161FC4((_QWORD **)v7);
      return v8;
    }
    sub_234161FC4((_QWORD **)v7);
  }
  else
  {
    sub_2341579B4(4, 0, 104, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", 1329);
  }
  return 0;
}

double sub_234180434()
{
  double result;

  result = 0.0;
  xmmword_25615AAA0 = 0u;
  unk_25615AAB0 = 0u;
  xmmword_25615AA80 = 0u;
  unk_25615AA90 = 0u;
  xmmword_25615AA70 = 0u;
  BYTE4(xmmword_25615AA70) = 1;
  return result;
}

const char *sub_234180458()
{
  return "BoringCrypto";
}

uint64_t sub_234180464()
{
  _DWORD __s1[8];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  sub_234171848(byte_2342E25D0, 0x10uLL, __s1);
  return sub_2341804D8(byte_2342E25E0, (unsigned __int8 *)__s1, 0x20uLL, "SHA-256 KAT");
}

uint64_t sub_2341804D8(unsigned __int8 *__s2, unsigned __int8 *__s1, size_t a3, const char *a4)
{
  size_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  FILE **v8;
  size_t v9;
  int v10;
  int v11;

  if (!a3)
    return 1;
  v5 = a3;
  v6 = __s1;
  v7 = __s2;
  if (!memcmp(__s1, __s2, a3))
    return 1;
  v8 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s failed.\nExpected:   ", a4);
  v9 = v5;
  do
  {
    v10 = *v7++;
    fprintf(*v8, "%02x", v10);
    --v9;
  }
  while (v9);
  fwrite("\nCalculated: ", 0xDuLL, 1uLL, *v8);
  do
  {
    v11 = *v6++;
    fprintf(*v8, "%02x", v11);
    --v5;
  }
  while (v5);
  fputc(10, *v8);
  fflush(*v8);
  return 0;
}

uint64_t sub_2341805D4()
{
  _QWORD __s1[9];

  __s1[8] = *MEMORY[0x24BDAC8D0];
  sub_2341719DC((unint64_t *)&unk_2342E2600, 0x10uLL, __s1);
  return sub_2341804D8(byte_2342E2610, (unsigned __int8 *)__s1, 0x40uLL, "SHA-512 KAT");
}

uint64_t sub_234180648()
{
  uint64_t result;
  int v1;
  unsigned __int8 __s1[64];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v1 = 0;
  sub_234195C74(&stru_256158070, (void (*)(void))sub_234170BD8);
  sub_234179384((uint64_t)&qword_256159EF0, (uint64_t)&unk_2342E2650, 0x10uLL, (uint64_t)&unk_2342E2650, 16, (uint64_t)__s1, &v1);
  result = 0;
  if (v1 == 32)
    return sub_2341804D8(byte_2342E2660, __s1, 0x20uLL, "HMAC-SHA-256 KAT");
  return result;
}

uint64_t sub_2341806F8()
{
  int v0;
  FILE **v1;
  FILE *v2;
  const char *v3;
  char v4;
  size_t v5;
  __int128 **v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD **v26;
  _QWORD *v27;
  _QWORD **v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  FILE *v35;
  const char *v36;
  size_t v37;
  FILE *v38;
  const char *v39;
  size_t v40;
  uint64_t v41;
  size_t v42;
  _OWORD v43[15];
  int v44;
  unsigned __int8 v45[32];
  unsigned __int8 v46[32];
  _BYTE v47[32];
  unsigned __int8 v48[32];
  unsigned __int8 v49[32];
  __int128 __s2;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[2];
  _OWORD v69[16];
  _QWORD v70[3];
  int8x16_t v71[16];
  int8x16_t v72;
  _QWORD __s1[74];

  __s1[73] = *MEMORY[0x24BDAC8D0];
  bzero(__s1, 0x248uLL);
  v44 = 0;
  memset(v43, 0, sizeof(v43));
  v72 = 0uLL;
  v0 = sub_23415F4C0(&xmmword_2342E4860, 128, (uint64_t)v43);
  v1 = (FILE **)MEMORY[0x24BDAC8D8];
  if (v0)
  {
    v2 = (FILE *)*MEMORY[0x24BDAC8D8];
    v3 = "AES_set_encrypt_key failed.\n";
LABEL_3:
    v4 = 1;
    v5 = 28;
LABEL_4:
    fwrite(v3, v5, 1uLL, v2);
    goto LABEL_5;
  }
  v4 = 1;
  sub_234160294(xmmword_2342E4870, v71, 0x20uLL, (uint64_t)v43, &v72, 1);
  if (sub_2341804D8(byte_2342E4890, (unsigned __int8 *)v71, 0x20uLL, "AES-CBC-encrypt KAT"))
  {
    v72 = 0uLL;
    if (sub_23415F4C0(&xmmword_2342E4860, 128, (uint64_t)v43))
    {
      v2 = *v1;
      v3 = "AES_set_decrypt_key failed.\n";
      goto LABEL_3;
    }
    sub_234160294(xmmword_2342E48B0, v71, 0x20uLL, (uint64_t)v43, &v72, 0);
    if (!sub_2341804D8(byte_2342E48D0, (unsigned __int8 *)v71, 0x20uLL, "AES-CBC-decrypt KAT"))
      goto LABEL_89;
    v42 = 0;
    memset(v70, 0, sizeof(v70));
    sub_234195C74(&stru_256157F70, (void (*)(void))sub_23416EAAC);
    if (sub_23416D0B8(__s1, (uint64_t)&dword_256159AD0, (uint64_t)&xmmword_2342E4860, 16, 0))
    {
      sub_234195C74(&stru_256157F70, (void (*)(void))sub_23416EAAC);
      if (sub_23416D21C((uint64_t)__s1, v71[0].i8, &v42, 0x100uLL, (uint64_t)v70, BYTE1(dword_256159AD0), byte_2342E48F0, 0x20uLL)&& sub_2341804D8(byte_2342E4910, (unsigned __int8 *)v71, 0x30uLL, "AES-GCM-encrypt KAT"))
      {
        sub_234195C74(&stru_256157F70, (void (*)(void))sub_23416EAAC);
        if (!sub_23416D470((unsigned __int8 *)__s1, v71[0].i8, &v42, 0x100uLL, (uint64_t)v70, BYTE1(dword_256159AD0), a5, 0x30uLL)|| !sub_2341804D8(byte_2342E4970, (unsigned __int8 *)v71, 0x20uLL, "AES-GCM-decrypt KAT"))
        {
          v2 = *v1;
          v3 = "AES-GCM-decrypt KAT failed because EVP_AEAD_CTX_open failed.\n";
          v4 = 1;
          v5 = 61;
          goto LABEL_4;
        }
        sub_2341814F8(byte_2342E4990, 0x10uLL, v71);
        if (sub_2341804D8(byte_2342E49A0, (unsigned __int8 *)v71, 0x14uLL, "SHA-1 KAT"))
        {
          sub_234171848(byte_2342E25D0, 0x10uLL, v68);
          if (sub_2341804D8(byte_2342E25E0, (unsigned __int8 *)v68, 0x20uLL, "SHA-256 KAT"))
          {
            sub_2341719DC((unint64_t *)&unk_2342E2600, 0x10uLL, v68);
            if (sub_2341804D8(byte_2342E2610, (unsigned __int8 *)v68, 0x40uLL, "SHA-512 KAT"))
            {
              if (sub_234180648())
              {
                memset(v69, 0, sizeof(v69));
                memset(v68, 0, sizeof(v68));
                if (!sub_23417C088((uint64_t)v68, xmmword_2342E49B4, aBcmpersonaliza, 0x12uLL)
                  || !sub_23417C334((uint64_t)v68, v71[0].i8, 0x40uLL, &aBcmpersonaliza[18], 0x10uLL)
                  || !sub_2341804D8(byte_2342E4A06, (unsigned __int8 *)v71, 0x40uLL, "DRBG Generate KAT")
                  || !sub_23417C17C((uint64_t)v68, byte_2342E4A46, (uint64_t)&aBcmpersonaliza[18], 0x10uLL)
                  || !sub_23417C334((uint64_t)v68, v71[0].i8, 0x40uLL, &aBcmpersonaliza[18], 0x10uLL)
                  || !sub_2341804D8(byte_2342E4A76, (unsigned __int8 *)v71, 0x40uLL, "DRBG-reseed KAT"))
                {
                  v4 = 1;
                  fwrite("CTR-DRBG failed.\n", 0x11uLL, 1uLL, *v1);
                  goto LABEL_5;
                }
                sub_23418E400(v68, 0x120uLL);
                v66 = 0u;
                v67 = 0u;
                v64 = 0u;
                v65 = 0u;
                v62 = 0u;
                v63 = 0u;
                v60 = 0u;
                v61 = 0u;
                v58 = 0u;
                v59 = 0u;
                v56 = 0u;
                v57 = 0u;
                v54 = 0u;
                v55 = 0u;
                v52 = 0u;
                v53 = 0u;
                __s2 = 0u;
                v51 = 0u;
                if (sub_2341804D8((unsigned __int8 *)&__s2, (unsigned __int8 *)v68, 0x120uLL, "DRBG Clear KAT"))
                {
                  sub_234195C74(&stru_2561580B0, (void (*)(void))sub_234170DA8);
                  if (!sub_2341849C4(&qword_256159FB0, v49, 0x20uLL, (uint64_t)&unk_2342E4AE5, 0x20uLL, (uint64_t)"FIPS self test", 15, (uint64_t)&unk_2342E4AC5, 16, (uint64_t)&unk_2342E4AD5, 16)|| !sub_2341804D8(byte_2342E4B05, v49, 0x20uLL, "TLS10-KDF KAT")|| (sub_234195C74(&stru_256158070, (void (*)(void))sub_234170BD8), !sub_2341849C4(&qword_256159EF0, v48, 0x20uLL, (uint64_t)&unk_2342E4B25, 0x20uLL,
                                         (uint64_t)"FIPS self test",
                                         15,
                                         (uint64_t)&unk_2342E4AC5,
                                         16,
                                         (uint64_t)&unk_2342E4AD5,
                                         16))
                    || !sub_2341804D8(byte_2342E4B45, v48, 0x20uLL, "TLS12-KDF KAT"))
                  {
                    v2 = *v1;
                    v3 = "TLS KDF failed.\n";
                    v4 = 1;
                    v5 = 16;
                    goto LABEL_4;
                  }
                  v41 = 0;
                  sub_234195C74(&stru_256158070, (void (*)(void))sub_234170BD8);
                  if (!sub_234179110((uint64_t)v47, &v41, (uint64_t)&qword_256159EF0, (uint64_t)&unk_2342E4B65, 32, (uint64_t)&unk_2342E4B85, 0x10uLL)|| v41 != 32|| (sub_234195C74(&stru_256158070, (void (*)(void))sub_234170BD8), !sub_234184DD0((uint64_t)v46, 32, (uint64_t)&qword_256159EF0, (uint64_t)v47, 0x20uLL, "c e traffic", 0xBuLL, &unk_2342E4BA1, 0x20uLL))
                    || !sub_2341804D8(byte_2342E4BC1, v46, 0x20uLL, "CRYPTO_tls13_hkdf_expand_label"))
                  {
                    v2 = *v1;
                    v3 = "TLS13-KDF failed.\n";
                    v4 = 1;
                    v5 = 18;
                    goto LABEL_4;
                  }
                  sub_234195C74(&stru_256158070, (void (*)(void))sub_234170BD8);
                  if (!sub_234179070((uint64_t)v45, 32, (uint64_t)&qword_256159EF0, (uint64_t)&unk_2342E4BE1, 32, (uint64_t)&unk_2342E4C01, 0x20uLL, (uint64_t)&unk_2342E4C21, 32)|| !sub_2341804D8(byte_2342E4C41, v45, 0x20uLL, "HKDF"))
                  {
                    v2 = *v1;
                    v3 = "HKDF failed.\n";
                    v4 = 1;
                    v5 = 13;
                    goto LABEL_4;
                  }
                  v4 = 0;
                  goto LABEL_5;
                }
              }
            }
          }
        }
LABEL_89:
        v4 = 1;
        goto LABEL_5;
      }
      v2 = *v1;
      v3 = "EVP_AEAD_CTX_seal for AES-128-GCM failed.\n";
    }
    else
    {
      v2 = *v1;
      v3 = "EVP_AEAD_CTX_init for AES-128-GCM failed.\n";
    }
    v4 = 1;
    v5 = 42;
    goto LABEL_4;
  }
LABEL_5:
  if (__s1[0])
    (*(void (**)(_QWORD *))(__s1[0] + 24))(__s1);
  if ((v4 & 1) != 0)
    return 0;
  v6 = sub_23417DC6C(0);
  if (!v6)
    goto LABEL_54;
  v7 = (__int128 *)sub_2341625C8(byte_2342E4EA1, 0x100uLL, 0);
  v6[1] = v7;
  if (!v7)
    goto LABEL_54;
  v8 = (__int128 *)sub_2341625C8(byte_2342E4FA1, 3uLL, 0);
  v6[2] = v8;
  if (!v8)
    goto LABEL_54;
  v9 = (__int128 *)sub_2341625C8(byte_2342E4FA4, 0x100uLL, 0);
  v6[3] = v9;
  if (!v9)
    goto LABEL_54;
  v10 = (__int128 *)sub_2341625C8(byte_2342E50A4, 0x80uLL, 0);
  v6[4] = v10;
  if (!v10)
    goto LABEL_54;
  v11 = (__int128 *)sub_2341625C8(byte_2342E5124, 0x80uLL, 0);
  v6[5] = v11;
  if (!v11)
    goto LABEL_54;
  v12 = (__int128 *)sub_2341625C8(byte_2342E51A4, 0x80uLL, 0);
  v6[6] = v12;
  if (v12
    && (v13 = (__int128 *)sub_2341625C8(byte_2342E5224, 0x80uLL, 0), (v6[7] = v13) != 0)
    && (v14 = (__int128 *)sub_2341625C8(byte_2342E52A4, 0x80uLL, 0), (v6[8] = v14) != 0))
  {
    *((_DWORD *)v6 + 21) |= 8u;
    LODWORD(v68[0]) = 0;
    if (sub_23417E34C(672, &unk_2342E4C61, 0x20uLL, (char *)__s1, v68, (uint64_t **)v6)
      && sub_2341804D8(byte_2342E4C81, (unsigned __int8 *)__s1, 0x100uLL, "RSA-sign KAT"))
    {
      if (sub_23417E5E0(672, &unk_2342E4D81, 0x20uLL, byte_2342E4DA1, 0x100uLL, v6))
      {
        sub_23417D814((uint64_t)v6);
        v15 = sub_234174EAC(0);
        v16 = sub_2341625C8(byte_2342E5486, 0x20uLL, 0);
        v17 = sub_2341625C8(byte_2342E54A6, 0x20uLL, 0);
        v18 = sub_2341625C8(byte_2342E54C6, 0x20uLL, 0);
        v19 = (_QWORD **)v18;
        if (!v15
          || !v16
          || !v17
          || !v18
          || (sub_234195C74(&stru_2561580E0, (void (*)(void))sub_23417284C),
              !sub_2341750E4(v15, (uint64_t)&qword_25615A210))
          || !sub_2341755B4(v15, (uint64_t)v16, (uint64_t)v17)
          || !sub_2341751FC(v15, (uint64_t)v19))
        {
          sub_234174FAC((uint64_t)v15);
          v15 = 0;
        }
        sub_234161FC4((_QWORD **)v16);
        sub_234161FC4((_QWORD **)v17);
        sub_234161FC4(v19);
        if (v15)
        {
          __s2 = 0uLL;
          *(_QWORD *)((char *)&v51 + 7) = 0;
          *(_QWORD *)&v51 = 0;
          HIBYTE(v51) = 42;
          v20 = sub_234171F7C(byte_2342E5324, 0x20uLL, v15, (unsigned __int8 *)&__s2, 0x20uLL);
          v21 = v20;
          if (v20
            && sub_234162840((char *)v68, 0x20uLL, *v20)
            && sub_234162840((char *)v69, 0x20uLL, v21[1])
            && sub_2341804D8(byte_2342E5344, (unsigned __int8 *)v68, 0x40uLL, "ECDSA-sign signature"))
          {
            sub_2341540D8(v21);
            v22 = sub_234171AA8();
            v21 = v22;
            if (v22
              && sub_2341625C8(byte_2342E53A4, 0x20uLL, (_QWORD *)*v22)
              && sub_2341625C8(byte_2342E53C4, 0x20uLL, (_QWORD *)v21[1]))
            {
              if (sub_234171B00(byte_2342E5384, 0x20uLL, v21, (uint64_t)v15))
              {
                sub_234195C74(&stru_2561580E0, (void (*)(void))sub_23417284C);
                v23 = sub_2341737FC((uint64_t)&qword_25615A210);
                v24 = sub_2341737FC((uint64_t)&qword_25615A210);
                v25 = sub_234161F88();
                v26 = (_QWORD **)v25;
                if (v23
                  && v24
                  && v25
                  && sub_23417571C((uint64_t)&qword_25615A210, (uint64_t)v23, byte_2342E53E4, 65, 0)
                  && sub_2341625C8(byte_2342E5425, 0x20uLL, v26)
                  && sub_2341746F8((uint64_t)&qword_25615A210, (uint64_t)v24, 0, v23, (uint64_t)v26, 0)
                  && sub_234177370((uint64_t)&qword_25615A210, v24, 4, (char *)__s1, 0x41uLL)
                  && sub_2341804D8(byte_2342E5445, (unsigned __int8 *)__s1, 0x41uLL, "Z Computation Result"))
                {
                  sub_234174FAC((uint64_t)v15);
                  sub_2341738A4(v23);
                  sub_2341738A4(v24);
                  sub_234161FC4(v26);
                  sub_2341540D8(v21);
                  v27 = sub_234161F88();
                  v28 = (_QWORD **)v27;
                  if (v27)
                    sub_234162308((uint64_t)v27, (uint64_t)&unk_2342E54E8, 32);
                  v29 = sub_234170560();
                  if (v29)
                  {
                    v30 = v29;
                    v31 = sub_234161F88();
                    if (v31)
                    {
                      v32 = v31;
                      sub_234162308((uint64_t)v31, (uint64_t)&unk_2342E56E8, 4);
                      sub_234161FC4(*(_QWORD ***)(v30 + 32));
                      *(_QWORD *)(v30 + 32) = v32;
                      if (v28
                        && ((sub_2341621D4(*(uint64_t **)v30) + 7) & 0xFFFFFFF8) == 0x800
                        && sub_234170028((char *)__s1, (uint64_t)v28, (uint64_t **)v30) == 256
                        && sub_2341804D8(byte_2342E55E8, (unsigned __int8 *)__s1, 0x100uLL, "FFC DH"))
                      {
                        v33 = 1;
LABEL_111:
                        sub_23416FCE0(v30);
                        sub_234161FC4(v28);
                        return v33;
                      }
LABEL_110:
                      fwrite("FFDH failed.\n", 0xDuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
                      v33 = 0;
                      goto LABEL_111;
                    }
                    sub_23416FCE0(v30);
                  }
                  v30 = 0;
                  goto LABEL_110;
                }
                fwrite("Z-computation KAT failed.\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
                goto LABEL_101;
              }
            }
            else
            {
              sub_2341540D8(v21);
              v21 = 0;
            }
            v38 = *v1;
            v39 = "ECDSA-verify KAT failed.\n";
            v40 = 25;
          }
          else
          {
            v38 = *v1;
            v39 = "ECDSA-sign KAT failed.\n";
            v40 = 23;
          }
          fwrite(v39, v40, 1uLL, v38);
          v23 = 0;
          v24 = 0;
          v26 = 0;
        }
        else
        {
          fwrite("ECDSA KeyGen failed\n", 0x14uLL, 1uLL, *v1);
          v23 = 0;
          v24 = 0;
          v26 = 0;
          v21 = 0;
        }
LABEL_101:
        sub_234174FAC((uint64_t)v15);
        sub_2341738A4(v23);
        sub_2341738A4(v24);
        sub_234161FC4(v26);
        sub_2341540D8(v21);
        return 0;
      }
      v35 = *v1;
      v36 = "RSA-verify KAT failed.\n";
      v37 = 23;
    }
    else
    {
      v35 = *v1;
      v36 = "RSA signing test failed.\n";
      v37 = 25;
    }
    fwrite(v36, v37, 1uLL, v35);
  }
  else
  {
LABEL_54:
    sub_23417D814((uint64_t)v6);
    fwrite("RSA key construction failed\n", 0x1CuLL, 1uLL, *v1);
    v6 = 0;
  }
  sub_23417D814((uint64_t)v6);
  return 0;
}

uint64_t sub_2341814CC(_OWORD *a1)
{
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = xmmword_2342E2070;
  a1[1] = 0u;
  *((_DWORD *)a1 + 4) = -1009589776;
  return 1;
}

_DWORD *sub_2341814F8(char *__src, size_t __n, _DWORD *a3)
{
  __int128 v5;
  int v6;
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  memset(v7, 0, 76);
  v5 = xmmword_2342E2070;
  v6 = -1009589776;
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_2341816D8, (uint64_t)&v5, (char *)v7 + 8, (_DWORD *)&v7[4] + 2, (_DWORD *)v7 + 1, v7, __src, __n);
  sub_2341815FC(a3, (uint64_t)&v5);
  sub_23418E400(&v5, 0x60uLL);
  return a3;
}

uint64_t sub_2341815C0(uint64_t a1, char *__src, size_t __n)
{
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_2341816D8, a1, (char *)(a1 + 28), (_DWORD *)(a1 + 92), (_DWORD *)(a1 + 24), (_DWORD *)(a1 + 20), __src, __n);
  return 1;
}

uint64_t sub_2341815FC(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int8x8_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2 + 28;
  v5 = *(int8x8_t *)(a2 + 20);
  v6 = *(unsigned int *)(a2 + 92);
  *(_BYTE *)(a2 + 28 + v6) = 0x80;
  v7 = v6 + 1;
  if (v6 >= 0x38)
  {
    if ((_DWORD)v6 != 63)
      bzero((void *)(v4 + v7), 63 - v6);
    sub_2341816D8((int *)a2, (unsigned int *)v4, 1);
    v7 = 0;
    goto LABEL_6;
  }
  if (v6 != 55)
LABEL_6:
    bzero((void *)(v4 + v7), 56 - v7);
  *(int32x2_t *)(a2 + 84) = vrev64_s32((int32x2_t)vrev32_s8(v5));
  sub_2341816D8((int *)a2, (unsigned int *)v4, 1);
  *(_DWORD *)(a2 + 92) = 0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  sub_2341828D4(a1, (unsigned int *)a2);
  return 1;
}

uint64_t sub_2341816D0(int *a1, unsigned int *a2)
{
  return sub_2341816D8(a1, a2, 1);
}

uint64_t sub_2341816D8(int *a1, unsigned int *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  unint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  unint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  unint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  unint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  int v143;
  unint64_t v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  unint64_t v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  unint64_t v156;
  int v157;
  unsigned int v158;
  int v159;
  int v160;
  unint64_t v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  unint64_t v167;
  int v168;
  unsigned int v169;
  int v170;
  int v171;
  unint64_t v172;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  unint64_t v177;
  int v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  int v184;
  unsigned int v185;
  int v186;
  int v187;
  unint64_t v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  int v193;
  unint64_t v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  int v199;
  unint64_t v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  unint64_t v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  unint64_t v212;
  int v213;
  unsigned int v214;
  int v215;
  int v216;
  unint64_t v217;
  int v218;
  unsigned int v219;
  int v220;
  int v221;
  int v222;
  unint64_t v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  unint64_t v229;
  int v230;
  unsigned int v231;
  int v232;
  unsigned int v233;
  int v234;
  unsigned int v235;
  int v236;
  unint64_t v237;
  int v238;
  int v239;
  int v240;
  int v241;
  unint64_t v242;
  unsigned int v243;
  int v244;
  int v245;
  unint64_t v246;
  int v247;
  unsigned int v248;
  int v249;
  unint64_t v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  unint64_t v257;
  int v258;
  unsigned int v259;
  int v260;
  unint64_t v261;
  int v262;
  int v263;
  int v264;
  unint64_t v265;
  unint64_t v266;
  int v267;
  unsigned int v268;
  unint64_t v269;
  int v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  unint64_t v275;
  int v276;
  int v277;
  int v278;
  int v279;
  unint64_t v280;
  unsigned int v281;
  int v282;
  int v283;
  unint64_t v284;
  int v285;
  unsigned int v286;
  int v287;
  unint64_t v288;
  int v289;
  int v290;
  int v291;
  int v292;
  unint64_t v293;
  int v294;
  unsigned int v295;
  int v296;
  unint64_t v297;
  int v298;
  int v299;
  int v300;
  unint64_t v301;
  unint64_t v302;
  int v303;
  unsigned int v304;
  unint64_t v305;
  int v306;
  int v307;
  int v308;
  unsigned int v309;
  int v310;
  unint64_t v311;
  int v312;
  int v313;
  int v314;
  int v315;
  unint64_t v316;
  unsigned int v317;
  int v318;
  int v319;
  unint64_t v320;
  int v321;
  unsigned int v322;
  int v323;
  unint64_t v324;
  int v325;
  int v326;
  int v327;
  int v328;
  unint64_t v329;
  int v330;
  unsigned int v331;
  int v332;
  unint64_t v333;
  int v334;
  int v335;
  int v336;
  unint64_t v337;
  unint64_t v338;
  int v339;
  int v340;
  int v341;
  unint64_t v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  unint64_t v348;
  int v349;
  int v350;
  unsigned int v351;
  int v352;
  int v353;
  unint64_t v354;
  unsigned int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  unint64_t v360;
  int v361;
  unsigned int v362;
  int v363;
  int v364;
  unint64_t v365;
  int v366;
  unsigned int v367;
  int v368;
  int v369;
  unint64_t v370;
  int v371;
  unsigned int v372;
  int v373;
  int v374;
  unint64_t v375;
  int v376;
  unsigned int v377;
  int v378;
  int v379;
  int v380;
  unint64_t v381;
  int v382;
  unsigned int v383;
  int v384;
  int v385;
  int v386;
  unint64_t v387;
  int v388;
  unsigned int v389;
  int v390;
  int v391;
  int v392;
  unint64_t v393;
  int v394;
  unsigned int v395;
  int v396;
  int v397;
  int v398;
  unint64_t v399;
  int v400;
  unsigned int v401;
  int v402;
  int v403;
  int v404;
  unint64_t v405;
  int v406;
  unsigned int v407;
  int v408;
  int v409;
  int v410;
  unint64_t v411;
  int v412;
  unsigned int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  unint64_t v418;
  unsigned int v419;
  int v420;
  int v421;
  int v422;
  unint64_t v423;
  int v424;
  unsigned int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  unint64_t v431;
  unsigned int v432;
  int v433;
  int v434;
  int v435;
  unint64_t v436;
  int v437;
  unsigned int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  unint64_t v443;
  unsigned int v444;
  int v445;
  int v446;
  int v447;
  unint64_t v448;
  int v449;
  unsigned int v450;
  int v451;
  uint64_t result;
  int v453;
  unint64_t v454;
  unsigned int v455;
  int v456;
  int v457;
  unint64_t v458;
  int v459;
  unsigned int v460;
  int v461;
  int v462;
  unint64_t v463;
  int v464;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  unsigned int v493;
  int v494;
  int v495;
  int v496;
  unsigned int v497;
  int v498;
  int v499;
  int v500;
  unsigned int v501;
  int v502;
  int v503;
  int v504;
  unsigned int v505;
  int v506;
  int v507;
  int v508;
  unsigned int v509;
  int v510;
  int v511;
  int v512;
  unsigned int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  unsigned int *v519;
  uint64_t v520;
  int v521;
  int v522;
  int v523;

  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[1];
  v6 = a1[2];
  v7 = *a1;
  do
  {
    v522 = v3;
    v523 = v5;
    v521 = v6;
    v517 = v7;
    v518 = v4;
    v519 = a2;
    v520 = a3;
    v8 = v7;
    HIDWORD(v10) = v7;
    LODWORD(v10) = v7;
    v9 = v10 >> 27;
    v11 = v3 & ~v5;
    v12 = bswap32(*a2);
    v13 = v6 & v523;
    HIDWORD(v10) = v523;
    LODWORD(v10) = v523;
    v14 = v10 >> 2;
    v501 = bswap32(a2[1]);
    v15 = v9 + v4 + 1518500249 + (v13 | v11) + v12;
    HIDWORD(v10) = v15;
    LODWORD(v10) = v15;
    v16 = v10 >> 27;
    HIDWORD(v10) = v8;
    LODWORD(v10) = v8;
    v17 = v10 >> 2;
    v18 = v522 + 1518500249 + (v8 & __ROR4__(v523, 2) | v521 & ~v8) + v501 + v16;
    HIDWORD(v10) = v18;
    LODWORD(v10) = v18;
    v19 = v10 >> 27;
    HIDWORD(v10) = v15;
    LODWORD(v10) = v15;
    v20 = v10 >> 2;
    v21 = bswap32(a2[2]);
    v505 = bswap32(a2[3]);
    v23 = __PAIR64__(v18, __ROR4__(v15, 2));
    v22 = v18 & v23;
    LODWORD(v23) = v18;
    v24 = v23 >> 2;
    v25 = v521 + 1518500249 + v21 + (v15 & __ROR4__(v8, 2) | v14 & ~v15) + v19;
    HIDWORD(v23) = v25;
    LODWORD(v23) = v25;
    v26 = v23 >> 27;
    v28 = __PAIR64__(v25, __ROR4__(v18, 2));
    v27 = v25 & v28;
    v29 = bswap32(a2[4]);
    LODWORD(v28) = v25;
    v30 = v28 >> 2;
    v31 = v14 + 1518500249 + v505 + (v22 | v17 & ~v18) + v26;
    HIDWORD(v28) = v31;
    LODWORD(v28) = v31;
    v32 = v17 + 1518500249 + v29 + (v27 | v20 & ~v25) + (v28 >> 27);
    HIDWORD(v28) = v32;
    LODWORD(v28) = v32;
    v33 = v28 >> 27;
    v35 = __PAIR64__(v31, __ROR4__(v25, 2));
    v34 = v31 & v35;
    LODWORD(v35) = v31;
    v36 = v35 >> 2;
    v38 = __PAIR64__(v32, __ROR4__(v31, 2));
    v37 = v32 & v38;
    v39 = bswap32(a2[5]);
    v40 = v34 | v24 & ~v31;
    LODWORD(v38) = v32;
    v41 = v38 >> 2;
    v42 = v20 + v39 + 1518500249 + v40 + v33;
    HIDWORD(v38) = v42;
    LODWORD(v38) = v42;
    v43 = v38 >> 27;
    v513 = bswap32(a2[6]);
    v44 = v37 | v30 & ~v32;
    HIDWORD(v38) = v42;
    LODWORD(v38) = v42;
    v45 = v38 >> 2;
    v46 = v24 + v513 + 1518500249 + v44 + v43;
    HIDWORD(v38) = v46;
    LODWORD(v38) = v46;
    v47 = v38 >> 27;
    v48 = __PAIR64__(v46, __ROR4__(v32, 2));
    v509 = bswap32(a2[7]);
    v49 = v42 & v48 | v36 & ~v42;
    LODWORD(v48) = v46;
    v50 = v48 >> 2;
    v51 = v509 + 1518500249 + v30 + v49 + v47;
    HIDWORD(v48) = v51;
    LODWORD(v48) = v51;
    v52 = v48 >> 27;
    v54 = __PAIR64__(v51, __ROR4__(v46, 2));
    v53 = v51 & v54;
    LODWORD(v54) = v51;
    v55 = v54 >> 2;
    v497 = bswap32(a2[8]);
    v56 = v497 + 1518500249 + v36 + (v46 & __ROR4__(v42, 2) | v41 & ~v46) + v52;
    v57 = bswap32(a2[13]);
    HIDWORD(v54) = v56;
    LODWORD(v54) = v56;
    v58 = v54 >> 27;
    HIDWORD(v54) = v21 ^ v12 ^ v497 ^ v57;
    LODWORD(v54) = HIDWORD(v54);
    v59 = v54 >> 31;
    v60 = HIDWORD(v54);
    v466 = HIDWORD(v54);
    v62 = __PAIR64__(v56, __ROR4__(v51, 2));
    v61 = v56 & v62;
    v63 = bswap32(a2[9]);
    LODWORD(v62) = v56;
    v64 = v62 >> 2;
    v65 = v63 + 1518500249 + v41 + (v53 | v45 & ~v51) + v58;
    HIDWORD(v62) = v65;
    LODWORD(v62) = v65;
    v66 = v62 >> 27;
    v67 = bswap32(a2[10]);
    HIDWORD(v62) = v65;
    LODWORD(v62) = v65;
    v68 = v62 >> 2;
    v69 = v67 + 1518500249 + v45 + (v61 | v50 & ~v56) + v66;
    HIDWORD(v62) = v69;
    LODWORD(v62) = v69;
    v70 = v62 >> 27;
    v71 = __PAIR64__(v69, __ROR4__(v56, 2));
    v72 = bswap32(a2[11]);
    v73 = v65 & v71 | v55 & ~v65;
    LODWORD(v71) = v69;
    v74 = v71 >> 2;
    v75 = v72 + 1518500249 + v50 + v73 + v70;
    HIDWORD(v71) = v75;
    LODWORD(v71) = v75;
    v76 = v71 >> 27;
    v77 = __PAIR64__(v75, __ROR4__(v65, 2));
    v78 = bswap32(a2[12]);
    v79 = v69 & v77 | v64 & ~v69;
    LODWORD(v77) = v75;
    v80 = v77 >> 2;
    v81 = v78 + 1518500249 + v55 + v79 + v76;
    HIDWORD(v77) = v81;
    LODWORD(v77) = v81;
    v82 = v77 >> 27;
    v83 = v75 & __ROR4__(v69, 2);
    v84 = bswap32(a2[14]);
    v85 = v68 & ~v75;
    v87 = __PAIR64__(v81, __ROR4__(v75, 2));
    v86 = v81 & v87;
    v493 = v57;
    LODWORD(v87) = v81;
    v88 = v87 >> 2;
    v89 = v57 + 1518500249 + v64 + (v83 | v85) + v82;
    v90 = v505 ^ v501 ^ v63 ^ v84;
    HIDWORD(v87) = v89;
    LODWORD(v87) = v89;
    v91 = v87 >> 27;
    HIDWORD(v87) = v90;
    LODWORD(v87) = v90;
    v92 = v87 >> 31;
    HIDWORD(v87) = v89;
    LODWORD(v87) = v89;
    v93 = v87 >> 2;
    v94 = v84 + 1518500249 + v68 + (v86 | v74 & ~v81) + v91;
    HIDWORD(v87) = v94;
    LODWORD(v87) = v94;
    v95 = v87 >> 27;
    v96 = bswap32(a2[15]);
    v97 = v29 ^ v21 ^ v67 ^ v96;
    v99 = __PAIR64__(v97, __ROR4__(v89, 2));
    v98 = v94 & v99;
    LODWORD(v99) = v97;
    v468 = v97;
    v471 = v99 >> 31;
    v100 = v89 & __ROR4__(v81, 2) | v80 & ~v89;
    HIDWORD(v99) = v94;
    LODWORD(v99) = v94;
    v101 = v99 >> 2;
    v102 = v96 + 1518500249 + v74 + v100 + v95;
    HIDWORD(v99) = v102;
    LODWORD(v99) = v102;
    v103 = v99 >> 27;
    v105 = __PAIR64__(v102, __ROR4__(v94, 2));
    v104 = v102 & v105;
    LODWORD(v105) = v102;
    v106 = v105 >> 2;
    v107 = v59 + 1518500249 + v80 + (v98 | v88 & ~v94) + v103;
    HIDWORD(v105) = v107;
    LODWORD(v105) = v107;
    v108 = v105 >> 27;
    LODWORD(v105) = v39 ^ v505 ^ v72 ^ __ROR4__(v60, 31);
    v109 = v105;
    HIDWORD(v105) = v105;
    v110 = v105 >> 31;
    v112 = __PAIR64__(v107, __ROR4__(v90, 31));
    v111 = v513 ^ v29 ^ v78 ^ v112;
    LODWORD(v112) = v107;
    v113 = v112 >> 2;
    v114 = v92 + 1518500249 + v88 + (v104 | v93 & ~v102) + v108;
    HIDWORD(v112) = v114;
    LODWORD(v112) = v114;
    v115 = v112 >> 27;
    HIDWORD(v112) = v111;
    LODWORD(v112) = v111;
    v480 = v112 >> 31;
    v116 = v509 ^ v39 ^ v57 ^ __ROR4__(v97, 31);
    v118 = __PAIR64__(v114, __ROR4__(v107, 2));
    v117 = v114 & v118;
    LODWORD(v118) = v114;
    v119 = v118 >> 2;
    HIDWORD(v118) = v116;
    LODWORD(v118) = v116;
    v477 = v118 >> 31;
    v120 = v471 + 1518500249 + v93 + (v107 & __ROR4__(v102, 2) | v101 & ~v107) + v115;
    HIDWORD(v118) = v120;
    LODWORD(v118) = v120;
    v121 = v118 >> 27;
    HIDWORD(v118) = v120;
    LODWORD(v118) = v120;
    v122 = v118 >> 2;
    v123 = v122 ^ __ROR4__(v114, 2);
    v124 = v110 + 1518500249 + v101 + (v117 | v106 & ~v114) + v121;
    HIDWORD(v118) = v124;
    LODWORD(v118) = v124;
    v125 = v118 >> 27;
    HIDWORD(v118) = v124;
    LODWORD(v118) = v124;
    v126 = v118 >> 2;
    LODWORD(v118) = v497 ^ v513 ^ v84 ^ __ROR4__(v109, 31);
    v127 = v118;
    HIDWORD(v118) = v118;
    v474 = v118 >> 31;
    v128 = v126 ^ __ROR4__(v120, 2);
    v129 = v480 + 1859775393 + v106 + (v119 ^ __ROR4__(v107, 2) ^ v120) + v125;
    HIDWORD(v118) = v129;
    LODWORD(v118) = v129;
    v130 = v118 >> 27;
    v132 = __PAIR64__(v129, __ROR4__(v111, 31));
    v131 = v63 ^ v509 ^ v96 ^ v132;
    v133 = v477 + 1859775393 + v113 + (v123 ^ v124);
    LODWORD(v132) = v129;
    v134 = v132 >> 2;
    v135 = v133 + v130;
    HIDWORD(v132) = v135;
    LODWORD(v132) = v135;
    v136 = v132 >> 27;
    v137 = v474 + 1859775393 + v119 + (v128 ^ v129);
    HIDWORD(v132) = v131;
    LODWORD(v132) = v131;
    v487 = v132 >> 31;
    v138 = v134 ^ __ROR4__(v124, 2);
    v139 = v67 ^ v497 ^ __ROR4__(v466, 31) ^ __ROR4__(v116, 31);
    v140 = v137 + v136;
    HIDWORD(v132) = v140;
    LODWORD(v132) = v140;
    v141 = v132 >> 27;
    HIDWORD(v132) = v139;
    LODWORD(v132) = v139;
    v510 = v132 >> 31;
    v142 = v487 + 1859775393 + v122 + (v138 ^ v135) + v141;
    HIDWORD(v132) = v135;
    LODWORD(v132) = v135;
    v143 = v132 >> 2;
    v144 = __PAIR64__(v142, __ROR4__(v129, 2));
    v145 = v510 + 1859775393 + v126 + (v143 ^ v144 ^ v140);
    LODWORD(v144) = v142;
    v147 = v145 + (v144 >> 27);
    LODWORD(v144) = v72 ^ v63 ^ __ROR4__(v90, 31) ^ __ROR4__(v127, 31);
    v146 = v144;
    HIDWORD(v144) = v144;
    v148 = v144 >> 31;
    HIDWORD(v144) = v140;
    LODWORD(v144) = v140;
    v149 = v144 >> 2;
    v150 = __PAIR64__(v147, __ROR4__(v135, 2));
    v151 = v148 + 1859775393 + v134 + (v149 ^ v150 ^ v142);
    LODWORD(v150) = v147;
    v152 = v151 + (v150 >> 27);
    LODWORD(v150) = v78 ^ v67 ^ __ROR4__(v468, 31) ^ __ROR4__(v131, 31);
    v153 = v150;
    HIDWORD(v150) = v150;
    v506 = v150 >> 31;
    v154 = v506 + 1859775393 + v143;
    HIDWORD(v150) = v142;
    LODWORD(v150) = v142;
    v155 = v150 >> 2;
    v156 = __PAIR64__(v152, __ROR4__(v140, 2));
    v157 = v154 + (v155 ^ v156 ^ v147);
    LODWORD(v156) = v152;
    v158 = v157 + (v156 >> 27);
    v159 = v493 ^ v72 ^ __ROR4__(v109, 31) ^ __ROR4__(v139, 31);
    HIDWORD(v156) = v159;
    LODWORD(v156) = v159;
    v502 = v156 >> 31;
    HIDWORD(v156) = v147;
    LODWORD(v156) = v147;
    v160 = v156 >> 2;
    v161 = __PAIR64__(v158, __ROR4__(v142, 2));
    v162 = v502 + 1859775393 + v149 + (v160 ^ v161 ^ v152);
    LODWORD(v161) = v158;
    v163 = v162 + (v161 >> 27);
    LODWORD(v161) = v84 ^ v78 ^ __ROR4__(v111, 31) ^ __ROR4__(v146, 31);
    v164 = v161;
    HIDWORD(v161) = v161;
    v498 = v161 >> 31;
    v165 = v498 + 1859775393 + v155;
    HIDWORD(v161) = v152;
    LODWORD(v161) = v152;
    v166 = v161 >> 2;
    v167 = __PAIR64__(v163, __ROR4__(v147, 2));
    v168 = v165 + (v166 ^ v167 ^ v158);
    LODWORD(v167) = v163;
    v169 = v168 + (v167 >> 27);
    LODWORD(v167) = v96 ^ v493 ^ __ROR4__(v116, 31) ^ __ROR4__(v153, 31);
    v170 = v167;
    HIDWORD(v167) = v167;
    v514 = v167 >> 31;
    HIDWORD(v167) = v158;
    LODWORD(v167) = v158;
    v171 = v167 >> 2;
    v172 = __PAIR64__(v169, __ROR4__(v152, 2));
    v173 = v514 + 1859775393 + v160 + (v171 ^ v172 ^ v163);
    LODWORD(v172) = v169;
    v174 = v173 + (v172 >> 27);
    LODWORD(v172) = v84 ^ __ROR4__(v466, 31) ^ __ROR4__(v127, 31) ^ __ROR4__(v159, 31);
    v175 = v172;
    HIDWORD(v172) = v172;
    v494 = v172 >> 31;
    HIDWORD(v172) = v163;
    LODWORD(v172) = v163;
    v176 = v172 >> 2;
    v177 = __PAIR64__(v174, __ROR4__(v158, 2));
    v178 = v494 + 1859775393 + v166 + (v176 ^ v177 ^ v169);
    LODWORD(v177) = v174;
    v179 = v178 + (v177 >> 27);
    LODWORD(v177) = v96 ^ __ROR4__(v90, 31) ^ __ROR4__(v131, 31) ^ __ROR4__(v164, 31);
    v180 = v177;
    HIDWORD(v177) = v177;
    v490 = v177 >> 31;
    v181 = v490 + 1859775393 + v171;
    HIDWORD(v177) = v169;
    LODWORD(v177) = v169;
    v182 = v177 >> 2;
    v183 = __PAIR64__(v179, __ROR4__(v163, 2));
    v184 = v181 + (v182 ^ v183 ^ v174);
    LODWORD(v183) = v179;
    v185 = v184 + (v183 >> 27);
    LODWORD(v183) = v471 ^ __ROR4__(v466, 31) ^ __ROR4__(v139, 31) ^ __ROR4__(v170, 31);
    v186 = v183;
    HIDWORD(v183) = v183;
    v472 = v183 >> 31;
    HIDWORD(v183) = v174;
    LODWORD(v183) = v174;
    v187 = v183 >> 2;
    v188 = __PAIR64__(v185, __ROR4__(v169, 2));
    v189 = v472 + 1859775393 + v176 + (v187 ^ v188 ^ v179);
    LODWORD(v188) = v185;
    v190 = v189 + (v188 >> 27);
    LODWORD(v188) = v110 ^ __ROR4__(v90, 31) ^ __ROR4__(v146, 31) ^ __ROR4__(v175, 31);
    v191 = v188;
    HIDWORD(v188) = v188;
    v484 = v188 >> 31;
    v192 = v484 + 1859775393 + v182;
    HIDWORD(v188) = v179;
    LODWORD(v188) = v179;
    v193 = v188 >> 2;
    v194 = __PAIR64__(v190, __ROR4__(v174, 2));
    v195 = v192 + (v193 ^ v194 ^ v185);
    LODWORD(v194) = v190;
    v196 = v195 + (v194 >> 27);
    LODWORD(v194) = v480 ^ __ROR4__(v468, 31) ^ __ROR4__(v153, 31) ^ __ROR4__(v180, 31);
    v197 = v194;
    HIDWORD(v194) = v194;
    v481 = v194 >> 31;
    v198 = v481 + 1859775393 + v187;
    HIDWORD(v194) = v185;
    LODWORD(v194) = v185;
    v199 = v194 >> 2;
    v200 = __PAIR64__(v196, __ROR4__(v179, 2));
    v201 = v198 + (v199 ^ v200 ^ v190);
    LODWORD(v200) = v196;
    v202 = v201 + (v200 >> 27);
    LODWORD(v200) = v477 ^ __ROR4__(v109, 31) ^ __ROR4__(v159, 31) ^ __ROR4__(v186, 31);
    HIDWORD(v200) = v200;
    v478 = v200 >> 31;
    v203 = v200;
    v204 = v478 + 1859775393 + v193;
    HIDWORD(v200) = v190;
    LODWORD(v200) = v190;
    v205 = v200 >> 2;
    v206 = __PAIR64__(v202, __ROR4__(v185, 2));
    v207 = v204 + (v205 ^ v206 ^ v196);
    LODWORD(v206) = v202;
    v208 = v207 + (v206 >> 27);
    LODWORD(v206) = v474 ^ __ROR4__(v111, 31) ^ __ROR4__(v164, 31) ^ __ROR4__(v191, 31);
    v209 = v206;
    HIDWORD(v206) = v206;
    v210 = v206 >> 31;
    HIDWORD(v206) = v196;
    LODWORD(v206) = v196;
    v211 = v206 >> 2;
    v212 = __PAIR64__(v208, __ROR4__(v190, 2));
    v213 = v210 + 1859775393 + v199 + (v211 ^ v212 ^ v202);
    LODWORD(v212) = v208;
    v214 = v213 + (v212 >> 27);
    LODWORD(v212) = v487 ^ __ROR4__(v116, 31) ^ __ROR4__(v170, 31) ^ __ROR4__(v197, 31);
    v215 = v212;
    HIDWORD(v212) = v212;
    v475 = v212 >> 31;
    HIDWORD(v212) = v202;
    LODWORD(v212) = v202;
    v216 = v212 >> 2;
    v217 = __PAIR64__(v214, __ROR4__(v196, 2));
    v218 = v475 + 1859775393 + v205 + (v216 ^ v217 ^ v208);
    LODWORD(v217) = v214;
    v219 = v218 + (v217 >> 27);
    v221 = v203;
    LODWORD(v217) = v510 ^ __ROR4__(v127, 31) ^ __ROR4__(v175, 31) ^ __ROR4__(v203, 31);
    v220 = v217;
    HIDWORD(v217) = v217;
    v488 = v217 >> 31;
    HIDWORD(v217) = v208;
    LODWORD(v217) = v208;
    v222 = v217 >> 2;
    v223 = __PAIR64__(v219, __ROR4__(v202, 2));
    v224 = v488 + 1859775393 + v211 + (v222 ^ v223 ^ v214);
    LODWORD(v223) = v219;
    v225 = v224 + (v223 >> 27);
    v226 = v209;
    LODWORD(v223) = v148 ^ __ROR4__(v131, 31) ^ __ROR4__(v180, 31) ^ __ROR4__(v209, 31);
    HIDWORD(v223) = v223;
    v511 = v223 >> 31;
    v227 = v223;
    HIDWORD(v223) = v214;
    LODWORD(v223) = v214;
    v228 = v223 >> 2;
    v229 = __PAIR64__(v225, __ROR4__(v208, 2));
    v230 = v511 + 1859775393 + v216 + (v228 ^ v229 ^ v219);
    LODWORD(v229) = v225;
    v231 = v230 + (v229 >> 27);
    LODWORD(v229) = v506 ^ __ROR4__(v139, 31) ^ __ROR4__(v186, 31) ^ __ROR4__(v215, 31);
    v232 = v229;
    HIDWORD(v229) = v229;
    v507 = v229 >> 31;
    HIDWORD(v229) = v231;
    LODWORD(v229) = v231;
    v233 = v507
         - 1894007588
         + v222
         + ((v225 | __ROR4__(v219, 2)) & __ROR4__(v214, 2) | v225 & __ROR4__(v219, 2))
         + (v229 >> 27);
    LODWORD(v229) = v502 ^ __ROR4__(v146, 31) ^ __ROR4__(v191, 31) ^ __ROR4__(v220, 31);
    HIDWORD(v229) = v229;
    v503 = v229 >> 31;
    v234 = v229;
    HIDWORD(v229) = v233;
    LODWORD(v229) = v233;
    v235 = v503
         - 1894007588
         + v228
         + ((v231 | __ROR4__(v225, 2)) & __ROR4__(v219, 2) | v231 & __ROR4__(v225, 2))
         + (v229 >> 27);
    v237 = __PAIR64__(v219, __ROR4__(v153, 31));
    v236 = v498 ^ v237;
    LODWORD(v237) = v219;
    v238 = v237 >> 2;
    v240 = v227;
    LODWORD(v237) = v236 ^ __ROR4__(v197, 31) ^ __ROR4__(v227, 31);
    v239 = v237;
    HIDWORD(v237) = v237;
    v499 = v237 >> 31;
    v242 = __PAIR64__(v235, __ROR4__(v159, 31));
    v241 = v514 ^ v242;
    LODWORD(v242) = v235;
    v243 = v499
         - 1894007588
         + v238
         + ((v233 | __ROR4__(v231, 2)) & __ROR4__(v225, 2) | v233 & __ROR4__(v231, 2))
         + (v242 >> 27);
    HIDWORD(v242) = v225;
    LODWORD(v242) = v225;
    v244 = v242 >> 2;
    LODWORD(v242) = v241 ^ __ROR4__(v221, 31) ^ __ROR4__(v232, 31);
    v245 = v242;
    HIDWORD(v242) = v242;
    v515 = v242 >> 31;
    v246 = __PAIR64__(v243, __ROR4__(v233, 2));
    v247 = v515 - 1894007588 + v244 + ((v235 | __ROR4__(v233, 2)) & __ROR4__(v231, 2) | v235 & v246);
    LODWORD(v246) = v243;
    v248 = v247 + (v246 >> 27);
    v250 = __PAIR64__(v231, __ROR4__(v226, 31));
    v249 = v494 ^ __ROR4__(v164, 31) ^ v250;
    v251 = v226;
    LODWORD(v250) = v231;
    v252 = v250 >> 2;
    v254 = v234;
    LODWORD(v250) = v249 ^ __ROR4__(v234, 31);
    v253 = v250;
    HIDWORD(v250) = v250;
    v495 = v250 >> 31;
    HIDWORD(v250) = v248;
    LODWORD(v250) = v248;
    v255 = v495
         - 1894007588
         + v252
         + ((v243 | __ROR4__(v235, 2)) & __ROR4__(v233, 2) | v243 & __ROR4__(v235, 2))
         + (v250 >> 27);
    v257 = __PAIR64__(v233, __ROR4__(v239, 31));
    v256 = v490 ^ __ROR4__(v170, 31) ^ __ROR4__(v215, 31) ^ v257;
    LODWORD(v257) = v233;
    v258 = v257 >> 2;
    HIDWORD(v257) = v256;
    LODWORD(v257) = v256;
    v491 = v257 >> 31;
    HIDWORD(v257) = v255;
    LODWORD(v257) = v255;
    v259 = v491
         - 1894007588
         + v258
         + ((v248 | __ROR4__(v243, 2)) & __ROR4__(v235, 2) | v248 & __ROR4__(v243, 2))
         + (v257 >> 27);
    v261 = __PAIR64__(v235, __ROR4__(v220, 31));
    v260 = v472 ^ __ROR4__(v175, 31) ^ v261;
    LODWORD(v261) = v235;
    v262 = v261 >> 2;
    v263 = v260 ^ __ROR4__(v245, 31);
    v265 = __PAIR64__(v263, __ROR4__(v243, 2));
    v264 = (v255 | __ROR4__(v248, 2)) & v265;
    LODWORD(v265) = v263;
    v469 = v265 >> 31;
    v266 = __PAIR64__(v259, __ROR4__(v248, 2));
    v267 = v469 - 1894007588 + v262 + (v264 | v255 & v266);
    LODWORD(v266) = v259;
    v268 = v267 + (v266 >> 27);
    v269 = __PAIR64__(v243, __ROR4__(v255, 2));
    v270 = (v259 | __ROR4__(v255, 2)) & __ROR4__(v248, 2) | v259 & v269;
    LODWORD(v269) = v243;
    v271 = v269 >> 2;
    LODWORD(v269) = v484 ^ __ROR4__(v180, 31) ^ __ROR4__(v240, 31) ^ __ROR4__(v253, 31);
    v272 = v269;
    HIDWORD(v269) = v269;
    v485 = v269 >> 31;
    HIDWORD(v269) = v268;
    LODWORD(v269) = v268;
    v273 = v485 - 1894007588 + v271 + v270 + (v269 >> 27);
    v275 = __PAIR64__(v248, __ROR4__(v186, 31));
    v274 = v481 ^ v275;
    LODWORD(v275) = v248;
    v276 = v275 >> 2;
    LODWORD(v275) = v274 ^ __ROR4__(v232, 31) ^ __ROR4__(v256, 31);
    v277 = v275;
    HIDWORD(v275) = v275;
    v482 = v275 >> 31;
    v278 = v482 - 1894007588 + v276 + ((v268 | __ROR4__(v259, 2)) & __ROR4__(v255, 2) | v268 & __ROR4__(v259, 2));
    v280 = __PAIR64__(v273, __ROR4__(v191, 31));
    v279 = v478 ^ v280;
    LODWORD(v280) = v273;
    v281 = v278 + (v280 >> 27);
    HIDWORD(v280) = v255;
    LODWORD(v280) = v255;
    v282 = v280 >> 2;
    LODWORD(v280) = v279 ^ __ROR4__(v234, 31) ^ __ROR4__(v263, 31);
    v283 = v280;
    HIDWORD(v280) = v280;
    v479 = v280 >> 31;
    v284 = __PAIR64__(v281, __ROR4__(v268, 2));
    v285 = v479 - 1894007588 + v282 + ((v273 | __ROR4__(v268, 2)) & __ROR4__(v259, 2) | v273 & v284);
    LODWORD(v284) = v281;
    v286 = v285 + (v284 >> 27);
    v288 = __PAIR64__(v259, __ROR4__(v239, 31));
    v287 = v210 ^ __ROR4__(v197, 31) ^ v288;
    LODWORD(v288) = v259;
    v289 = v288 >> 2;
    LODWORD(v288) = v287 ^ __ROR4__(v272, 31);
    v290 = v288;
    HIDWORD(v288) = v288;
    v473 = v288 >> 31;
    HIDWORD(v288) = v286;
    LODWORD(v288) = v286;
    v291 = v473
         - 1894007588
         + v289
         + ((v281 | __ROR4__(v273, 2)) & __ROR4__(v268, 2) | v281 & __ROR4__(v273, 2))
         + (v288 >> 27);
    v293 = __PAIR64__(v268, __ROR4__(v277, 31));
    v292 = v475 ^ __ROR4__(v221, 31) ^ __ROR4__(v245, 31) ^ v293;
    LODWORD(v293) = v268;
    v294 = v293 >> 2;
    HIDWORD(v293) = v292;
    LODWORD(v293) = v292;
    v476 = v293 >> 31;
    HIDWORD(v293) = v291;
    LODWORD(v293) = v291;
    v295 = v476
         - 1894007588
         + v294
         + ((v286 | __ROR4__(v281, 2)) & __ROR4__(v273, 2) | v286 & __ROR4__(v281, 2))
         + (v293 >> 27);
    v297 = __PAIR64__(v273, __ROR4__(v253, 31));
    v296 = v488 ^ __ROR4__(v251, 31) ^ v297;
    LODWORD(v297) = v273;
    v298 = v297 >> 2;
    v299 = v296 ^ __ROR4__(v283, 31);
    v301 = __PAIR64__(v299, __ROR4__(v281, 2));
    v300 = (v291 | __ROR4__(v286, 2)) & v301;
    LODWORD(v301) = v299;
    v489 = v301 >> 31;
    v302 = __PAIR64__(v295, __ROR4__(v286, 2));
    v303 = v489 - 1894007588 + v298 + (v300 | v291 & v302);
    LODWORD(v302) = v295;
    v304 = v303 + (v302 >> 27);
    v305 = __PAIR64__(v281, __ROR4__(v291, 2));
    v306 = (v295 | __ROR4__(v291, 2)) & __ROR4__(v286, 2) | v295 & v305;
    LODWORD(v305) = v281;
    v307 = v305 >> 2;
    LODWORD(v305) = v511 ^ __ROR4__(v215, 31) ^ __ROR4__(v256, 31) ^ __ROR4__(v290, 31);
    v308 = v305;
    HIDWORD(v305) = v305;
    v512 = v305 >> 31;
    HIDWORD(v305) = v304;
    LODWORD(v305) = v304;
    v309 = v512 - 1894007588 + v307 + v306 + (v305 >> 27);
    v311 = __PAIR64__(v286, __ROR4__(v220, 31));
    v310 = v507 ^ v311;
    LODWORD(v311) = v286;
    v312 = v311 >> 2;
    v313 = v263;
    LODWORD(v311) = v310 ^ __ROR4__(v263, 31) ^ __ROR4__(v292, 31);
    v314 = v311;
    HIDWORD(v311) = v311;
    v508 = v311 >> 31;
    v316 = __PAIR64__(v309, __ROR4__(v240, 31));
    v315 = v503 ^ v316;
    LODWORD(v316) = v309;
    v317 = v508
         - 1894007588
         + v312
         + ((v304 | __ROR4__(v295, 2)) & __ROR4__(v291, 2) | v304 & __ROR4__(v295, 2))
         + (v316 >> 27);
    HIDWORD(v316) = v291;
    LODWORD(v316) = v291;
    v318 = v316 >> 2;
    LODWORD(v316) = v315 ^ __ROR4__(v272, 31) ^ __ROR4__(v299, 31);
    v319 = v316;
    HIDWORD(v316) = v316;
    v504 = v316 >> 31;
    v320 = __PAIR64__(v317, __ROR4__(v304, 2));
    v321 = v504 - 1894007588 + v318 + ((v309 | __ROR4__(v304, 2)) & __ROR4__(v295, 2) | v309 & v320);
    LODWORD(v320) = v317;
    v322 = v321 + (v320 >> 27);
    v324 = __PAIR64__(v295, __ROR4__(v277, 31));
    v323 = v499 ^ __ROR4__(v232, 31) ^ v324;
    LODWORD(v324) = v295;
    v325 = v324 >> 2;
    LODWORD(v324) = v323 ^ __ROR4__(v308, 31);
    v326 = v324;
    HIDWORD(v324) = v324;
    v500 = v324 >> 31;
    HIDWORD(v324) = v322;
    LODWORD(v324) = v322;
    v327 = v500
         - 1894007588
         + v325
         + ((v317 | __ROR4__(v309, 2)) & __ROR4__(v304, 2) | v317 & __ROR4__(v309, 2))
         + (v324 >> 27);
    v329 = __PAIR64__(v304, __ROR4__(v314, 31));
    v328 = v515 ^ __ROR4__(v254, 31) ^ __ROR4__(v283, 31) ^ v329;
    LODWORD(v329) = v304;
    v330 = v329 >> 2;
    HIDWORD(v329) = v328;
    LODWORD(v329) = v328;
    v516 = v329 >> 31;
    HIDWORD(v329) = v327;
    LODWORD(v329) = v327;
    v331 = v516
         - 1894007588
         + v330
         + ((v322 | __ROR4__(v317, 2)) & __ROR4__(v309, 2) | v322 & __ROR4__(v317, 2))
         + (v329 >> 27);
    v333 = __PAIR64__(v309, __ROR4__(v290, 31));
    v332 = v495 ^ __ROR4__(v239, 31) ^ v333;
    LODWORD(v333) = v309;
    v334 = v333 >> 2;
    v335 = v332 ^ __ROR4__(v319, 31);
    v337 = __PAIR64__(v335, __ROR4__(v317, 2));
    v336 = (v327 | __ROR4__(v322, 2)) & v337;
    LODWORD(v337) = v335;
    v496 = v337 >> 31;
    v338 = __PAIR64__(v331, __ROR4__(v322, 2));
    v339 = v496 - 1894007588 + v334 + (v336 | v327 & v338);
    LODWORD(v338) = v331;
    v340 = v339 + (v338 >> 27);
    v341 = v491 ^ __ROR4__(v245, 31);
    v342 = __PAIR64__(v317, __ROR4__(v327, 2));
    v343 = (v331 | __ROR4__(v327, 2)) & __ROR4__(v322, 2) | v331 & v342;
    LODWORD(v342) = v317;
    v344 = v342 >> 2;
    LODWORD(v342) = v341 ^ __ROR4__(v292, 31) ^ __ROR4__(v326, 31);
    v345 = v342;
    HIDWORD(v342) = v342;
    v467 = v342 >> 31;
    v346 = v467 - 1894007588 + v344 + v343;
    v348 = __PAIR64__(v322, __ROR4__(v253, 31));
    v347 = v469 ^ v348;
    LODWORD(v348) = v322;
    v349 = v348 >> 2;
    v350 = v347 ^ __ROR4__(v299, 31) ^ __ROR4__(v328, 31);
    HIDWORD(v348) = v350;
    LODWORD(v348) = v350;
    v470 = v348 >> 31;
    HIDWORD(v348) = v340;
    LODWORD(v348) = v340;
    v351 = v346 + (v348 >> 27);
    HIDWORD(v348) = v331;
    LODWORD(v348) = v331;
    v352 = v348 >> 2;
    v354 = __PAIR64__(v351, __ROR4__(v256, 31));
    v353 = v485 ^ v354;
    LODWORD(v354) = v351;
    v355 = v470 - 899497514 + v349 + (v352 ^ __ROR4__(v327, 2) ^ v340) + (v354 >> 27);
    HIDWORD(v354) = v327;
    LODWORD(v354) = v327;
    v356 = v354 >> 2;
    v357 = v353 ^ __ROR4__(v308, 31) ^ __ROR4__(v335, 31);
    HIDWORD(v354) = v357;
    LODWORD(v354) = v357;
    v358 = v354 >> 31;
    HIDWORD(v354) = v340;
    LODWORD(v354) = v340;
    v359 = v354 >> 2;
    v360 = __PAIR64__(v355, __ROR4__(v331, 2));
    v361 = v358 - 899497514 + v356 + (v359 ^ v360 ^ v351);
    LODWORD(v360) = v355;
    v362 = v361 + (v360 >> 27);
    LODWORD(v360) = v482 ^ __ROR4__(v313, 31) ^ __ROR4__(v314, 31) ^ __ROR4__(v345, 31);
    v363 = v360;
    HIDWORD(v360) = v360;
    v492 = v360 >> 31;
    HIDWORD(v360) = v351;
    LODWORD(v360) = v351;
    v364 = v360 >> 2;
    v365 = __PAIR64__(v362, __ROR4__(v340, 2));
    v366 = v492 - 899497514 + v352 + (v364 ^ v365 ^ v355);
    LODWORD(v365) = v362;
    v367 = v366 + (v365 >> 27);
    LODWORD(v365) = v479 ^ __ROR4__(v272, 31) ^ __ROR4__(v319, 31) ^ __ROR4__(v350, 31);
    v368 = v365;
    HIDWORD(v365) = v365;
    v483 = v365 >> 31;
    HIDWORD(v365) = v355;
    LODWORD(v365) = v355;
    v369 = v365 >> 2;
    v370 = __PAIR64__(v367, __ROR4__(v351, 2));
    v371 = v483 - 899497514 + v359 + (v369 ^ v370 ^ v362);
    LODWORD(v370) = v367;
    v372 = v371 + (v370 >> 27);
    LODWORD(v370) = v473 ^ __ROR4__(v277, 31) ^ __ROR4__(v326, 31) ^ __ROR4__(v357, 31);
    v373 = v370;
    HIDWORD(v370) = v370;
    v486 = v370 >> 31;
    HIDWORD(v370) = v362;
    LODWORD(v370) = v362;
    v374 = v370 >> 2;
    v375 = __PAIR64__(v372, __ROR4__(v355, 2));
    v376 = v486 - 899497514 + v364 + (v374 ^ v375 ^ v367);
    LODWORD(v375) = v372;
    v377 = v376 + (v375 >> 27);
    LODWORD(v375) = v476 ^ __ROR4__(v283, 31) ^ __ROR4__(v328, 31) ^ __ROR4__(v363, 31);
    v378 = v375;
    HIDWORD(v375) = v375;
    v379 = v375 >> 31;
    HIDWORD(v375) = v367;
    LODWORD(v375) = v367;
    v380 = v375 >> 2;
    v381 = __PAIR64__(v377, __ROR4__(v362, 2));
    v382 = v379 - 899497514 + v369 + (v380 ^ v381 ^ v372);
    LODWORD(v381) = v377;
    v383 = v382 + (v381 >> 27);
    LODWORD(v381) = v489 ^ __ROR4__(v290, 31) ^ __ROR4__(v335, 31) ^ __ROR4__(v368, 31);
    v384 = v381;
    HIDWORD(v381) = v381;
    v385 = (v381 >> 31) - 899497514;
    HIDWORD(v381) = v372;
    LODWORD(v381) = v372;
    v386 = v381 >> 2;
    v387 = __PAIR64__(v383, __ROR4__(v367, 2));
    v388 = v385 + v374 + (v386 ^ v387 ^ v377);
    LODWORD(v387) = v383;
    v389 = v388 + (v387 >> 27);
    LODWORD(v387) = v512 ^ __ROR4__(v292, 31) ^ __ROR4__(v345, 31) ^ __ROR4__(v373, 31);
    v390 = v387;
    HIDWORD(v387) = v387;
    v391 = (v387 >> 31) - 899497514 + v380;
    HIDWORD(v387) = v377;
    LODWORD(v387) = v377;
    v392 = v387 >> 2;
    v393 = __PAIR64__(v389, __ROR4__(v372, 2));
    v394 = v391 + (v392 ^ v393 ^ v383);
    LODWORD(v393) = v389;
    v395 = v394 + (v393 >> 27);
    v396 = v508 ^ __ROR4__(v299, 31) ^ __ROR4__(v350, 31) ^ __ROR4__(v378, 31);
    HIDWORD(v393) = v396;
    LODWORD(v393) = v396;
    v397 = (v393 >> 31) - 899497514;
    HIDWORD(v393) = v383;
    LODWORD(v393) = v383;
    v398 = v393 >> 2;
    v399 = __PAIR64__(v395, __ROR4__(v377, 2));
    v400 = v397 + v386 + (v398 ^ v399 ^ v389);
    LODWORD(v399) = v395;
    v401 = v400 + (v399 >> 27);
    LODWORD(v399) = v504 ^ __ROR4__(v308, 31) ^ __ROR4__(v357, 31) ^ __ROR4__(v384, 31);
    v402 = v399;
    HIDWORD(v399) = v399;
    v403 = (v399 >> 31) - 899497514 + v392;
    HIDWORD(v399) = v389;
    LODWORD(v399) = v389;
    v404 = v399 >> 2;
    v405 = __PAIR64__(v401, __ROR4__(v383, 2));
    v406 = v403 + (v404 ^ v405 ^ v395);
    LODWORD(v405) = v401;
    v407 = v406 + (v405 >> 27);
    LODWORD(v405) = v500 ^ __ROR4__(v314, 31) ^ __ROR4__(v363, 31) ^ __ROR4__(v390, 31);
    v408 = v405;
    HIDWORD(v405) = v405;
    v409 = (v405 >> 31) - 899497514;
    HIDWORD(v405) = v395;
    LODWORD(v405) = v395;
    v410 = v405 >> 2;
    v411 = __PAIR64__(v407, __ROR4__(v389, 2));
    v412 = v409 + v398 + (v410 ^ v411 ^ v401);
    LODWORD(v411) = v407;
    v413 = v412 + (v411 >> 27);
    v414 = v516 ^ __ROR4__(v319, 31) ^ __ROR4__(v368, 31) ^ __ROR4__(v396, 31);
    HIDWORD(v411) = v414;
    LODWORD(v411) = v414;
    v415 = (v411 >> 31) - 899497514 + v404;
    HIDWORD(v411) = v401;
    LODWORD(v411) = v401;
    v416 = v411 >> 2;
    v418 = __PAIR64__(v413, __ROR4__(v326, 31));
    v417 = v496 ^ v418;
    LODWORD(v418) = v413;
    v419 = v415 + (v416 ^ __ROR4__(v395, 2) ^ v407) + (v418 >> 27);
    v420 = v417 ^ __ROR4__(v373, 31) ^ __ROR4__(v402, 31);
    HIDWORD(v418) = v420;
    LODWORD(v418) = v420;
    v421 = (v418 >> 31) - 899497514;
    HIDWORD(v418) = v407;
    LODWORD(v418) = v407;
    v422 = v418 >> 2;
    v423 = __PAIR64__(v419, __ROR4__(v401, 2));
    v424 = v421 + v410 + (v422 ^ v423 ^ v413);
    LODWORD(v423) = v419;
    v425 = v424 + (v423 >> 27);
    v426 = v467 ^ __ROR4__(v328, 31) ^ __ROR4__(v378, 31) ^ __ROR4__(v408, 31);
    HIDWORD(v423) = v426;
    LODWORD(v423) = v426;
    v427 = (v423 >> 31) - 899497514 + v416;
    HIDWORD(v423) = v413;
    LODWORD(v423) = v413;
    v428 = v423 >> 2;
    v429 = v427 + (v428 ^ __ROR4__(v407, 2) ^ v419);
    v431 = __PAIR64__(v425, __ROR4__(v335, 31));
    v430 = v470 ^ v431;
    LODWORD(v431) = v425;
    v432 = v429 + (v431 >> 27);
    v433 = v430 ^ __ROR4__(v384, 31) ^ __ROR4__(v414, 31);
    HIDWORD(v431) = v433;
    LODWORD(v431) = v433;
    v434 = (v431 >> 31) - 899497514;
    HIDWORD(v431) = v419;
    LODWORD(v431) = v419;
    v435 = v431 >> 2;
    v436 = __PAIR64__(v432, __ROR4__(v413, 2));
    v437 = v434 + v422 + (v435 ^ v436 ^ v425);
    LODWORD(v436) = v432;
    v438 = v437 + (v436 >> 27);
    v439 = v358 ^ __ROR4__(v345, 31) ^ __ROR4__(v390, 31) ^ __ROR4__(v420, 31);
    HIDWORD(v436) = v439;
    LODWORD(v436) = v439;
    v440 = (v436 >> 31) - 899497514 + v428;
    HIDWORD(v436) = v425;
    LODWORD(v436) = v425;
    v441 = v436 >> 2;
    v443 = __PAIR64__(v438, __ROR4__(v396, 31));
    v442 = v492 ^ __ROR4__(v350, 31) ^ v443;
    LODWORD(v443) = v438;
    v444 = v440 + (v441 ^ __ROR4__(v419, 2) ^ v432) + (v443 >> 27);
    v445 = v442 ^ __ROR4__(v426, 31);
    HIDWORD(v443) = v445;
    LODWORD(v443) = v445;
    v446 = (v443 >> 31) - 899497514;
    HIDWORD(v443) = v432;
    LODWORD(v443) = v432;
    v447 = v443 >> 2;
    v448 = __PAIR64__(v444, __ROR4__(v425, 2));
    v449 = v446 + v435 + (v447 ^ v448 ^ v438);
    LODWORD(v448) = v444;
    v450 = v449 + (v448 >> 27);
    LODWORD(v448) = v483 ^ __ROR4__(v357, 31) ^ __ROR4__(v402, 31) ^ __ROR4__(v433, 31);
    HIDWORD(v448) = v448;
    v451 = (v448 >> 31) - 899497514 + v441;
    HIDWORD(v448) = v438;
    LODWORD(v448) = v438;
    result = (v448 >> 2);
    v454 = __PAIR64__(v450, __ROR4__(v408, 31));
    v453 = v486 ^ __ROR4__(v363, 31) ^ v454;
    LODWORD(v454) = v450;
    v455 = v451 + (result ^ __ROR4__(v432, 2) ^ v444) + (v454 >> 27);
    LODWORD(v454) = v453 ^ __ROR4__(v439, 31);
    HIDWORD(v454) = v454;
    v456 = (v454 >> 31) - 899497514;
    HIDWORD(v454) = v444;
    LODWORD(v454) = v444;
    v457 = v454 >> 2;
    v458 = __PAIR64__(v455, __ROR4__(v438, 2));
    v459 = v456 + v447 + (v457 ^ v458 ^ v450);
    LODWORD(v458) = v455;
    v460 = v459 + (v458 >> 27);
    LODWORD(v458) = v379 ^ __ROR4__(v368, 31) ^ __ROR4__(v414, 31) ^ __ROR4__(v445, 31);
    HIDWORD(v458) = v458;
    v461 = v517 - 899497514 + (v458 >> 31) + result;
    HIDWORD(v458) = v450;
    LODWORD(v458) = v450;
    v462 = v458 >> 2;
    v463 = __PAIR64__(v460, __ROR4__(v444, 2));
    v464 = v461 + (v462 ^ v463 ^ v455);
    v5 = v460 + v523;
    LODWORD(v463) = v460;
    v7 = v464 + (v463 >> 27);
    HIDWORD(v463) = v455;
    LODWORD(v463) = v455;
    v6 = (v463 >> 2) + v521;
    v3 = v462 + v522;
    v4 = v457 + v518;
    *a1 = v7;
    a1[1] = v5;
    a1[2] = v6;
    a1[3] = v3;
    a1[4] = v457 + v518;
    a2 = v519 + 16;
    a3 = v520 - 1;
  }
  while (v520 != 1);
  return result;
}

_DWORD *sub_2341828D4(_DWORD *result, unsigned int *a2)
{
  *result = bswap32(*a2);
  result[1] = bswap32(a2[1]);
  result[2] = bswap32(a2[2]);
  result[3] = bswap32(a2[3]);
  result[4] = bswap32(a2[4]);
  return result;
}

_DWORD *sub_234182914(_DWORD *result, size_t a2, __int128 *a3)
{
  size_t v3;
  _DWORD *i;
  int v5;
  uint64_t j;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned int v12;
  _DWORD __src[5];
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[28];
  __int128 v20;
  int v21;
  __int128 v22;
  _BYTE v23[28];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  memset(v23, 0, sizeof(v23));
  v22 = 0u;
  v20 = *a3;
  v21 = *((_DWORD *)a3 + 4);
  if (a2)
  {
    v3 = a2;
    for (i = result; ; i += 5)
    {
      v18 = 0u;
      memset(v19, 0, sizeof(v19));
      v16 = 0u;
      v17 = 0u;
      v14 = xmmword_2342E2070;
      v15 = -1009589776;
      v5 = 1;
      sub_2341816D8((int *)&v14, (unsigned int *)&v20, 1);
      for (j = 16; j != -4; j -= 4)
      {
        v7 = bswap32(*(_DWORD *)((char *)&v20 + j));
        v8 = *(_DWORD *)((char *)&v14 + j);
        v9 = __CFADD__(v7, v8);
        v10 = v7 + v8;
        v11 = v9;
        v9 = __CFADD__(v10, v5);
        v12 = v10 + v5;
        if (v9)
          v5 = 1;
        else
          v5 = v11;
        *(_DWORD *)((char *)&v20 + j) = bswap32(v12);
      }
      if (v3 < 0x14)
        break;
      result = sub_2341828D4(i, (unsigned int *)&v14);
      v3 -= 20;
      if (!v3)
        return result;
    }
    sub_2341828D4(__src, (unsigned int *)&v14);
    return memcpy(i, __src, v3);
  }
  return result;
}

uint64_t sub_234182A68(uint64_t a1)
{
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = xmmword_2342E1FB0;
  *(_OWORD *)(a1 + 16) = xmmword_2342E1FC0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 108) = 28;
  return 1;
}

uint64_t sub_234182A9C(uint64_t a1)
{
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = xmmword_2342E1FD0;
  *(_OWORD *)(a1 + 16) = xmmword_2342E1FE0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 108) = 32;
  return 1;
}

uint64_t sub_234182AD0(uint64_t a1, char *__src, size_t __n)
{
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_234182B2C, a1, (char *)(a1 + 40), (_DWORD *)(a1 + 104), (_DWORD *)(a1 + 36), (_DWORD *)(a1 + 32), __src, __n);
  return 1;
}

uint64_t sub_234182B0C(_DWORD *a1, uint64_t a2)
{
  return sub_234183748(a1, 0x1CuLL, a2);
}

uint64_t sub_234182B18(_DWORD *a1, uint64_t a2)
{
  return sub_234183748(a1, *(unsigned int *)(a2 + 108), a2);
}

unint64_t sub_234182B24(unint64_t a1, unsigned int *a2)
{
  return sub_234182B2C(a1, a2, 1);
}

unint64_t sub_234182B2C(unint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  unint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unint64_t v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  int *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  unint64_t v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  int v136;
  unint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  unint64_t v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  int v161;
  int v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  unint64_t v171;
  int v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  unint64_t v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  unint64_t v191;
  uint64_t v192;
  unsigned int v193;
  int v194;
  int v195;
  unint64_t v196;
  int v197;
  int v198;
  unsigned int v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  unint64_t v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  unint64_t v214;
  int v215;
  int v216;
  _DWORD *v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  unsigned int v225;
  unsigned int *v226;
  uint64_t v227;
  _DWORD v228[16];
  uint64_t v229;

  v217 = (_DWORD *)result;
  v229 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v3 = *(_DWORD *)result;
    v4 = *(_DWORD *)(result + 4);
    v6 = *(_DWORD *)(result + 8);
    v5 = *(_DWORD *)(result + 12);
    v8 = *(_DWORD *)(result + 16);
    v7 = *(_DWORD *)(result + 20);
    v9 = *(_DWORD *)(result + 24);
    LODWORD(result) = *(_DWORD *)(result + 28);
    do
    {
      v227 = a3;
      v10 = bswap32(*a2);
      HIDWORD(v11) = v8;
      LODWORD(v11) = v8;
      v12 = (v11 >> 6) ^ __ROR4__(v8, 11);
      v13 = __PAIR64__(v3, __ROR4__(v8, 25));
      v218 = result;
      v14 = result + (v8 & v7) + (v9 & ~v8) + v10 + (v12 ^ v13) + 1116352408;
      LODWORD(v13) = v3;
      v222 = v5;
      v15 = v14 + v5;
      v16 = ((v13 >> 2) ^ __ROR4__(v3, 13) ^ __ROR4__(v3, 22)) + ((v4 ^ v6) & v3 ^ v4 & v6) + v14;
      v17 = bswap32(a2[1]);
      HIDWORD(v13) = v15;
      LODWORD(v13) = v15;
      v228[0] = v10;
      v228[1] = v17;
      v18 = (v13 >> 6) ^ __ROR4__(v15, 11);
      v19 = __PAIR64__(v16, __ROR4__(v15, 25));
      v219 = v9;
      v20 = v9 + v17 + (v7 & ~v15) + (v15 & v8) + 1899447441 + (v18 ^ v19);
      LODWORD(v19) = v16;
      v223 = v6;
      v21 = v20 + v6;
      v22 = ((v19 >> 2) ^ __ROR4__(v16, 13) ^ __ROR4__(v16, 22)) + (v16 & (v3 ^ v4) ^ v3 & v4) + v20;
      v23 = bswap32(a2[2]);
      HIDWORD(v19) = v21;
      LODWORD(v19) = v21;
      v24 = (v19 >> 6) ^ __ROR4__(v21, 11);
      v26 = __PAIR64__(v22, __ROR4__(v21, 25));
      v25 = v24 ^ v26;
      v220 = v7;
      LODWORD(v26) = v22;
      v27 = v7 + v23 + (v8 & ~v21) + (v21 & v15) - 1245643825 + v25;
      v224 = v4;
      v28 = v27 + v4;
      v29 = ((v26 >> 2) ^ __ROR4__(v22, 13) ^ __ROR4__(v22, 22)) + (v22 & (v16 ^ v3) ^ v16 & v3) + v27;
      v30 = bswap32(a2[3]);
      v228[2] = v23;
      v228[3] = v30;
      HIDWORD(v26) = v28;
      LODWORD(v26) = v28;
      v31 = (v26 >> 6) ^ __ROR4__(v28, 11);
      v32 = __PAIR64__(v29, __ROR4__(v28, 25));
      v221 = v8;
      v33 = v8 + v30 + (v15 & ~v28) + (v28 & v21) - 373957723 + (v31 ^ v32);
      LODWORD(v32) = v29;
      v225 = v3;
      v34 = v33 + v3;
      v35 = ((v32 >> 2) ^ __ROR4__(v29, 13) ^ __ROR4__(v29, 22)) + (v29 & (v22 ^ v16) ^ v22 & v16) + v33;
      v36 = bswap32(a2[4]);
      HIDWORD(v32) = v34;
      LODWORD(v32) = v34;
      v37 = (v32 >> 6) ^ __ROR4__(v34, 11);
      v38 = __PAIR64__(v35, __ROR4__(v34, 25));
      v39 = v15 + v36 + (v21 & ~v34) + (v34 & v28) + 961987163 + (v37 ^ v38);
      LODWORD(v38) = v35;
      v40 = v39 + v16;
      v41 = ((v38 >> 2) ^ __ROR4__(v35, 13) ^ __ROR4__(v35, 22)) + (v35 & (v29 ^ v22) ^ v29 & v22) + v39;
      v42 = bswap32(a2[5]);
      v228[4] = v36;
      v228[5] = v42;
      HIDWORD(v38) = v40;
      LODWORD(v38) = v40;
      v43 = (v38 >> 6) ^ __ROR4__(v40, 11);
      v44 = __PAIR64__(v41, __ROR4__(v40, 25));
      v45 = v21 + v42 + (v28 & ~v40) + (v40 & v34) + 1508970993 + (v43 ^ v44);
      LODWORD(v44) = v41;
      v46 = v45 + v22;
      v47 = ((v44 >> 2) ^ __ROR4__(v41, 13) ^ __ROR4__(v41, 22)) + (v41 & (v35 ^ v29) ^ v35 & v29) + v45;
      v48 = bswap32(a2[6]);
      v49 = v48 + v28 + (v34 & ~v46) + (v46 & v40);
      HIDWORD(v44) = v46;
      LODWORD(v44) = v46;
      v50 = (v44 >> 6) ^ __ROR4__(v46, 11);
      v51 = __PAIR64__(v47, __ROR4__(v46, 25));
      v52 = v49 - 1841331548 + (v50 ^ v51);
      LODWORD(v51) = v47;
      v53 = v52 + v29;
      v54 = ((v51 >> 2) ^ __ROR4__(v47, 13) ^ __ROR4__(v47, 22)) + (v47 & (v41 ^ v35) ^ v41 & v35) + v52;
      v55 = bswap32(a2[7]);
      HIDWORD(v51) = v53;
      LODWORD(v51) = v53;
      v228[6] = v48;
      v228[7] = v55;
      v56 = (v51 >> 6) ^ __ROR4__(v53, 11);
      v57 = __PAIR64__(v54, __ROR4__(v53, 25));
      v58 = v55 + v34 + (v40 & ~v53) + (v53 & v46) - 1424204075 + (v56 ^ v57);
      LODWORD(v57) = v54;
      v59 = v58 + v35;
      v60 = ((v57 >> 2) ^ __ROR4__(v54, 13) ^ __ROR4__(v54, 22)) + (v54 & (v47 ^ v41) ^ v47 & v41) + v58;
      HIDWORD(v57) = v59;
      LODWORD(v57) = v59;
      v61 = bswap32(a2[8]);
      v62 = (v57 >> 6) ^ __ROR4__(v59, 11);
      v63 = __PAIR64__(v60, __ROR4__(v59, 25));
      v64 = v61 + v40 + (v46 & ~v59) + (v59 & v53) - 670586216 + (v62 ^ v63);
      LODWORD(v63) = v60;
      v65 = v64 + v41;
      v66 = ((v63 >> 2) ^ __ROR4__(v60, 13) ^ __ROR4__(v60, 22)) + (v60 & (v54 ^ v47) ^ v54 & v47) + v64;
      v67 = bswap32(a2[9]);
      v228[8] = v61;
      v228[9] = v67;
      HIDWORD(v63) = v65;
      LODWORD(v63) = v65;
      v68 = (v63 >> 6) ^ __ROR4__(v65, 11);
      v69 = __PAIR64__(v66, __ROR4__(v65, 25));
      v70 = v67 + v46 + (v53 & ~v65) + (v65 & v59) + 310598401 + (v68 ^ v69);
      LODWORD(v69) = v66;
      v71 = v70 + v47;
      v72 = ((v69 >> 2) ^ __ROR4__(v66, 13) ^ __ROR4__(v66, 22)) + (v66 & (v60 ^ v54) ^ v60 & v54) + v70;
      v73 = bswap32(a2[10]);
      v74 = v73 + v53 + (v59 & ~v71) + (v71 & v65);
      HIDWORD(v69) = v71;
      LODWORD(v69) = v71;
      v75 = (v69 >> 6) ^ __ROR4__(v71, 11);
      v76 = __PAIR64__(v72, __ROR4__(v71, 25));
      v77 = v74 + 607225278 + (v75 ^ v76);
      LODWORD(v76) = v72;
      v78 = v77 + v54;
      v79 = ((v76 >> 2) ^ __ROR4__(v72, 13) ^ __ROR4__(v72, 22)) + (v72 & (v66 ^ v60) ^ v66 & v60) + v77;
      v80 = bswap32(a2[11]);
      v228[10] = v73;
      v228[11] = v80;
      HIDWORD(v76) = v78;
      LODWORD(v76) = v78;
      v81 = (v76 >> 6) ^ __ROR4__(v78, 11);
      v82 = __PAIR64__(v79, __ROR4__(v78, 25));
      v83 = v80 + v59 + (v65 & ~v78) + (v78 & v71) + 1426881987 + (v81 ^ v82);
      LODWORD(v82) = v79;
      v84 = v83 + v60;
      v85 = ((v82 >> 2) ^ __ROR4__(v79, 13) ^ __ROR4__(v79, 22)) + (v79 & (v72 ^ v66) ^ v72 & v66) + v83;
      v86 = bswap32(a2[12]);
      HIDWORD(v82) = v84;
      LODWORD(v82) = v84;
      v87 = (v82 >> 6) ^ __ROR4__(v84, 11);
      v88 = __PAIR64__(v85, __ROR4__(v84, 25));
      v89 = v86 + v65 + (v71 & ~v84) + (v84 & v78) + 1925078388 + (v87 ^ v88);
      LODWORD(v88) = v85;
      v90 = v89 + v66;
      v91 = ((v88 >> 2) ^ __ROR4__(v85, 13) ^ __ROR4__(v85, 22)) + (v85 & (v79 ^ v72) ^ v79 & v72) + v89;
      v92 = bswap32(a2[13]);
      HIDWORD(v88) = v90;
      LODWORD(v88) = v90;
      v228[12] = v86;
      v228[13] = v92;
      v93 = (v88 >> 6) ^ __ROR4__(v90, 11);
      v94 = __PAIR64__(v91, __ROR4__(v90, 25));
      v95 = v92 + v71 + (v78 & ~v90) + (v90 & v84) - 2132889090 + (v93 ^ v94);
      LODWORD(v94) = v91;
      v96 = v95 + v72;
      v97 = ((v94 >> 2) ^ __ROR4__(v91, 13) ^ __ROR4__(v91, 22)) + (v91 & (v85 ^ v79) ^ v85 & v79) + v95;
      HIDWORD(v94) = v96;
      LODWORD(v94) = v95 + v72;
      v226 = a2;
      v98 = bswap32(a2[14]);
      v99 = (v94 >> 6) ^ __ROR4__(v96, 11);
      v100 = __PAIR64__(v97, __ROR4__(v96, 25));
      v101 = v98 + v78 + (v84 & ~v96) + (v96 & v90) - 1680079193 + (v99 ^ v100);
      LODWORD(v100) = v97;
      v102 = v101 + v79;
      v103 = ((v100 >> 2) ^ __ROR4__(v97, 13) ^ __ROR4__(v97, 22)) + (v97 & (v91 ^ v85) ^ v91 & v85) + v101;
      v104 = bswap32(a2[15]);
      v228[14] = v98;
      v228[15] = v104;
      HIDWORD(v100) = v102;
      LODWORD(v100) = v102;
      v105 = (v100 >> 6) ^ __ROR4__(v102, 11);
      v106 = __PAIR64__(v103, __ROR4__(v102, 25));
      v107 = v104 + v84 + (v90 & ~v102) + (v102 & v96) - 1046744716 + (v105 ^ v106);
      LODWORD(v106) = v103;
      v108 = v107 + v85;
      v109 = ((v106 >> 2) ^ __ROR4__(v103, 13) ^ __ROR4__(v103, 22)) + (v103 & (v97 ^ v91) ^ v97 & v91) + v107;
      v110 = &dword_2342E5764;
      v111 = 31;
      do
      {
        v112 = v111 - 15;
        v113 = ((int)v111 - 14) & 9;
        v114 = v228[v113];
        v115 = v228[((_BYTE)v111 - 1) & 0xE];
        HIDWORD(v117) = v114;
        LODWORD(v117) = v114;
        v116 = v117 >> 7;
        v119 = __PAIR64__(v115, __ROR4__(v114, 18));
        v118 = v116 ^ v119;
        LODWORD(v119) = v115;
        v120 = v119 >> 17;
        v121 = __PAIR64__(v108, __ROR4__(v115, 19));
        v122 = (v111 - 15) & 8;
        v123 = v120 ^ v121 ^ (v115 >> 10);
        LODWORD(v121) = v108;
        v124 = (v111 - 15) & 8;
        v125 = (v118 ^ (v114 >> 3)) + v228[((int)v111 - 6) & 9] + v228[v122] + v123;
        v126 = (v121 >> 6) ^ __ROR4__(v108, 11);
        v128 = __PAIR64__(v109, __ROR4__(v108, 25));
        v127 = v126 ^ v128;
        LODWORD(v128) = v109;
        v129 = *(v110 - 6);
        v130 = (v108 & v102) + v90 + (v96 & ~v108) + *(v110 - 7) + v127;
        v228[v122] = v125;
        LODWORD(v122) = ((v128 >> 2) ^ __ROR4__(v109, 13) ^ __ROR4__(v109, 22)) + ((v103 ^ v97) & v109 ^ v103 & v97);
        v131 = v130 + v125;
        v132 = v131 + v91;
        HIDWORD(v128) = v228[v124 | 2];
        LODWORD(v128) = HIDWORD(v128);
        v133 = v122 + v131;
        v134 = v228[v111 & 0xF];
        v135 = (v128 >> 7) ^ __ROR4__(HIDWORD(v128), 18) ^ (HIDWORD(v128) >> 3);
        HIDWORD(v128) = v134;
        LODWORD(v128) = v134;
        v136 = v128 >> 17;
        v137 = __PAIR64__(v132, __ROR4__(v134, 19));
        v138 = v228[((int)v111 - 5) & 0xALL] + v114 + (v136 ^ v137 ^ (v134 >> 10));
        LODWORD(v137) = v132;
        v139 = v138 + v135;
        v140 = (v137 >> 6) ^ __ROR4__(v132, 11);
        v142 = __PAIR64__(v133, __ROR4__(v132, 25));
        v141 = v140 ^ v142;
        LODWORD(v142) = v133;
        v228[v113] = v139;
        LODWORD(v113) = (v142 >> 2) ^ __ROR4__(v133, 13);
        v143 = __PAIR64__(v125, __ROR4__(v133, 22));
        v144 = (v102 & ~v132) + v96 + (v132 & v108) + v129 + v139 + v141;
        v145 = (v113 ^ v143) + (v133 & (v109 ^ v103) ^ v109 & v103);
        v146 = v144 + v97;
        v147 = v228[v124 | 3];
        LODWORD(v143) = v125;
        v148 = v143 >> 17;
        HIDWORD(v143) = v147;
        LODWORD(v143) = v147;
        LODWORD(v122) = (v143 >> 7) ^ __ROR4__(v147, 18);
        v149 = __PAIR64__(v146, __ROR4__(v125, 19));
        v150 = v148 ^ v149 ^ (v125 >> 10);
        v151 = ((int)v111 - 13) & 0xALL;
        v152 = v145 + v144;
        v153 = v228[((int)v111 - 4) & 0xBLL] + v228[v151] + (v122 ^ (v147 >> 3)) + v150;
        LODWORD(v149) = v146;
        v154 = (v149 >> 6) ^ __ROR4__(v146, 11);
        v156 = __PAIR64__(v152, __ROR4__(v146, 25));
        v155 = v154 ^ v156;
        v228[v151] = v153;
        LODWORD(v151) = *(v110 - 4);
        v157 = *(v110 - 5) + v102 + v153;
        LODWORD(v156) = v152;
        v158 = ((v156 >> 2) ^ __ROR4__(v152, 13) ^ __ROR4__(v152, 22)) + (v152 & (v133 ^ v109) ^ v133 & v109);
        v159 = v228[v124 | 4];
        v160 = v157 + (v108 & ~v146) + (v146 & v132) + v155;
        HIDWORD(v156) = v159;
        LODWORD(v156) = v159;
        v161 = v156 >> 7;
        LODWORD(v122) = v228[v124 | 1];
        v163 = __PAIR64__(v122, __ROR4__(v159, 18));
        v162 = v161 ^ v163;
        LODWORD(v163) = v122;
        v164 = v162 ^ (v159 >> 3);
        v165 = ((int)v111 - 12) & 0xBLL;
        v166 = v160 + v103;
        v167 = v164
             + v228[((_BYTE)v111 - 3) & 0xC]
             + v228[v165]
             + ((v163 >> 17) ^ __ROR4__(v122, 19) ^ (v122 >> 10));
        v168 = v158 + v160;
        HIDWORD(v163) = v166;
        LODWORD(v163) = v166;
        v169 = (v163 >> 6) ^ __ROR4__(v166, 11);
        v171 = __PAIR64__(v168, __ROR4__(v166, 25));
        v170 = v169 ^ v171;
        v228[v165] = v167;
        LODWORD(v171) = v168;
        v172 = v151 + v108 + v167 + (v132 & ~v166) + (v166 & v146) + v170;
        v173 = ((v171 >> 2) ^ __ROR4__(v168, 13) ^ __ROR4__(v168, 22)) + (v168 & (v152 ^ v133) ^ v152 & v133);
        v174 = v172 + v109;
        v175 = v228[v124 | 5];
        HIDWORD(v171) = v175;
        LODWORD(v171) = v175;
        v176 = (v171 >> 7) ^ __ROR4__(v175, 18);
        v177 = v228[v124 | 2];
        HIDWORD(v171) = v177;
        LODWORD(v171) = v177;
        LODWORD(v165) = v171 >> 17;
        v178 = __PAIR64__(v174, __ROR4__(v177, 19));
        v179 = ((_BYTE)v111 - 11) & 0xC;
        v180 = (v176 ^ (v175 >> 3)) + v228[((int)v111 - 2) & 0xDLL] + v228[v179] + (v165 ^ v178 ^ (v177 >> 10));
        v181 = v173 + v172;
        LODWORD(v178) = v174;
        v182 = (v178 >> 6) ^ __ROR4__(v174, 11);
        v184 = __PAIR64__(v181, __ROR4__(v174, 25));
        v183 = v182 ^ v184;
        v228[v179] = v180;
        LODWORD(v165) = *(v110 - 2);
        LODWORD(v184) = v181;
        LODWORD(v151) = ((v184 >> 2) ^ __ROR4__(v181, 13) ^ __ROR4__(v181, 22)) + (v181 & (v168 ^ v152) ^ v168 & v152);
        v185 = *(v110 - 3) + v180 + v132 + (v146 & ~v174) + (v174 & v166) + v183;
        v90 = v185 + v133;
        v186 = v228[v124 | 6];
        HIDWORD(v184) = v186;
        LODWORD(v184) = v186;
        v187 = v184 >> 7;
        LODWORD(v113) = v228[v124 | 3];
        HIDWORD(v184) = v113;
        LODWORD(v184) = v113;
        v188 = v184 >> 17;
        v189 = v187 ^ __ROR4__(v186, 18) ^ (v186 >> 3);
        v191 = __PAIR64__(v90, __ROR4__(v113, 19));
        v190 = v188 ^ v191;
        v192 = ((int)v111 - 10) & 0xDLL;
        v91 = v151 + v185;
        v193 = v228[v192] + v115 + v189 + (v190 ^ (v113 >> 10));
        LODWORD(v191) = v90;
        v194 = (v191 >> 6) ^ __ROR4__(v90, 11);
        v196 = __PAIR64__(v91, __ROR4__(v90, 25));
        v195 = v194 ^ v196;
        v228[v192] = v193;
        LODWORD(v196) = v91;
        v197 = v165 + v193 + v146 + (v166 & ~v90) + (v90 & v174) + v195;
        v198 = ((v196 >> 2) ^ __ROR4__(v91, 13) ^ __ROR4__(v91, 22)) + (v91 & (v181 ^ v168) ^ v181 & v168);
        LODWORD(v179) = v228[v124 | 7];
        v96 = v197 + v152;
        HIDWORD(v196) = v179;
        LODWORD(v196) = v179;
        LODWORD(v113) = v196 >> 7;
        v199 = v228[v124 | 4];
        v200 = __PAIR64__(v199, __ROR4__(v179, 18));
        LODWORD(v179) = v113 ^ v200 ^ (v179 >> 3);
        LODWORD(v200) = v199;
        LODWORD(v113) = v200 >> 17;
        v201 = __PAIR64__(v96, __ROR4__(v199, 19));
        v202 = ((_BYTE)v111 - 9) & 0xE;
        LODWORD(v179) = v228[v202] + v134 + v179 + (v113 ^ v201 ^ (v199 >> 10));
        v97 = v198 + v197;
        LODWORD(v201) = v96;
        v203 = (v201 >> 6) ^ __ROR4__(v96, 11);
        v205 = __PAIR64__(v97, __ROR4__(v96, 25));
        v204 = v203 ^ v205;
        v228[v202] = v179;
        LODWORD(v205) = v97;
        v206 = *(v110 - 1) + v179 + v166 + (v174 & ~v96) + (v96 & v90) + v204;
        v102 = v206 + v168;
        v103 = ((v205 >> 2) ^ __ROR4__(v97, 13) ^ __ROR4__(v97, 22)) + (v97 & (v91 ^ v181) ^ v91 & v181) + v206;
        v207 = v228[v124 ^ 8];
        HIDWORD(v205) = v207;
        LODWORD(v205) = v207;
        LODWORD(v179) = v205 >> 7;
        v208 = v228[v124 | 5];
        HIDWORD(v205) = v208;
        LODWORD(v205) = v208;
        LODWORD(v113) = v205 >> 17;
        v209 = v179 ^ __ROR4__(v207, 18) ^ (v207 >> 3);
        v210 = __PAIR64__(v102, __ROR4__(v208, 19));
        v211 = ((_BYTE)v111 - 8) & 0xF;
        LODWORD(v179) = v113 ^ v210 ^ (v208 >> 10);
        LODWORD(v210) = v102;
        v212 = (v210 >> 6) ^ __ROR4__(v102, 11);
        v213 = v228[v211] + v209 + v125 + v179;
        v214 = __PAIR64__(v103, __ROR4__(v102, 25));
        LODWORD(v179) = v212 ^ v214;
        v215 = *v110;
        v110 += 8;
        v228[v211] = v213;
        LODWORD(v214) = v103;
        v216 = v215 + v213 + v174 + (v90 & ~v102) + (v102 & v96) + v179;
        v108 = v216 + v181;
        v109 = ((v214 >> 2) ^ __ROR4__(v103, 13) ^ __ROR4__(v103, 22)) + (v103 & (v97 ^ v91) ^ v97 & v91) + v216;
        v111 += 8;
      }
      while (v112 < 0x38);
      a2 = v226 + 16;
      v3 = v109 + v225;
      v4 = v103 + v224;
      *v217 = v109 + v225;
      v217[1] = v103 + v224;
      v6 = v97 + v223;
      v5 = v91 + v222;
      v217[2] = v97 + v223;
      v217[3] = v91 + v222;
      v8 = v108 + v221;
      v7 = v102 + v220;
      v217[4] = v108 + v221;
      v217[5] = v102 + v220;
      v9 = v96 + v219;
      result = v90 + v218;
      v217[6] = v96 + v219;
      v217[7] = result;
      a3 = v227 - 1;
    }
    while (v227 != 1);
  }
  return result;
}

uint64_t sub_234183748(_DWORD *a1, unint64_t a2, uint64_t a3)
{
  int32x2_t *v3;
  uint64_t v6;
  int8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unsigned int v12;

  v3 = (int32x2_t *)a3;
  v6 = a3 + 40;
  v7 = *(int8x8_t *)(a3 + 32);
  v8 = *(unsigned int *)(a3 + 104);
  *(_BYTE *)(a3 + 40 + v8) = 0x80;
  v9 = v8 + 1;
  if (v8 < 0x38)
  {
    if (v8 == 55)
      goto LABEL_7;
  }
  else
  {
    if ((_DWORD)v8 != 63)
      bzero((void *)(v6 + v9), 63 - v8);
    sub_234182B2C((unint64_t)v3, (unsigned int *)v6, 1);
    v9 = 0;
  }
  bzero((void *)(v6 + v9), 56 - v9);
LABEL_7:
  v3[12] = vrev64_s32((int32x2_t)vrev32_s8(v7));
  sub_234182B2C((unint64_t)v3, (unsigned int *)v6, 1);
  result = 0;
  v3[13].i32[0] = 0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  if (a2 <= 0x20)
  {
    if (a2 >= 4)
    {
      v11 = a2 >> 2;
      do
      {
        v12 = v3->i32[0];
        v3 = (int32x2_t *)((char *)v3 + 4);
        *a1++ = bswap32(v12);
        --v11;
      }
      while (v11);
    }
    return 1;
  }
  return result;
}

uint64_t sub_234183844(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_2342E1FF0;
  *(_OWORD *)(a1 + 16) = xmmword_2342E2000;
  *(_OWORD *)(a1 + 32) = xmmword_2342E2010;
  *(_OWORD *)(a1 + 48) = xmmword_2342E2020;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 208) = 0x3000000000;
  return 1;
}

uint64_t sub_234183884(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_2342E2080;
  *(_OWORD *)(a1 + 16) = xmmword_2342E2090;
  *(_OWORD *)(a1 + 32) = xmmword_2342E20A0;
  *(_OWORD *)(a1 + 48) = xmmword_2342E20B0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 208) = 0x2000000000;
  return 1;
}

uint64_t sub_2341838C4(unint64_t a1, unint64_t *a2, size_t a3)
{
  sub_2341725B4(a1, a2, a3);
  return 1;
}

uint64_t sub_2341838DC(_QWORD *a1, int8x16_t *a2)
{
  return sub_2341839C0(a1, 0x30uLL, a2);
}

_QWORD *sub_2341838E8(unint64_t *__src, size_t __n, _QWORD *a3)
{
  int8x16_t v5[4];
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5[0] = (int8x16_t)xmmword_2342E2080;
  v5[1] = (int8x16_t)xmmword_2342E2090;
  v5[2] = (int8x16_t)xmmword_2342E20A0;
  v5[3] = (int8x16_t)xmmword_2342E20B0;
  v6 = 0;
  v7 = 0;
  v16 = 0x2000000000;
  sub_2341725B4((unint64_t)v5, __src, __n);
  sub_2341839C0(a3, 0x20uLL, v5);
  sub_23418E400(v5, 0xD8uLL);
  return a3;
}

uint64_t sub_2341839B4(_QWORD *a1, int8x16_t *a2)
{
  return sub_2341839C0(a1, 0x20uLL, a2);
}

uint64_t sub_2341839C0(_QWORD *a1, unint64_t a2, int8x16_t *a3)
{
  int8x16_t *v3;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v6 = (unint64_t *)&a3[5];
  v7 = a3[13].u32[0];
  a3[5].i8[v7] = 0x80;
  v8 = v7 + 1;
  if (v7 < 0x70)
  {
    if (v7 == 111)
      goto LABEL_7;
  }
  else
  {
    if ((_DWORD)v7 != 127)
      bzero((char *)v6 + v8, 127 - v7);
    sub_234183AA8((unint64_t)v3, v6, 1);
    v8 = 0;
  }
  bzero((char *)v6 + v8, 112 - v8);
LABEL_7:
  v9 = vrev64q_s8(v3[4]);
  v3[12] = vextq_s8(v9, v9, 8uLL);
  sub_234183AA8((unint64_t)v3, v6, 1);
  if (!a1)
    return 0;
  if (a2 >= 8)
  {
    v10 = a2 >> 3;
    do
    {
      v11 = v3->i64[0];
      v3 = (int8x16_t *)((char *)v3 + 8);
      *a1++ = bswap64(v11);
      --v10;
    }
    while (v10);
  }
  return 1;
}

unint64_t sub_234183AA0(unint64_t a1, unint64_t *a2)
{
  return sub_234183AA8(a1, a2, 1);
}

unint64_t sub_234183AA8(unint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;

  v123 = (_QWORD *)result;
  if (a3)
  {
    v4 = *(_QWORD *)result;
    v3 = *(_QWORD *)(result + 8);
    v6 = *(_QWORD *)(result + 16);
    v5 = *(_QWORD *)(result + 24);
    v8 = *(_QWORD *)(result + 32);
    v7 = *(_QWORD *)(result + 40);
    v10 = *(_QWORD *)(result + 48);
    v9 = *(_QWORD *)(result + 56);
    do
    {
      v132 = a3;
      v138 = 0;
      v139 = bswap64(*a2);
      v124 = v9;
      v11 = v9
          + (v8 & v7)
          + (v10 & ~v8)
          + v139
          + (__ROR8__(v8, 14) ^ __ROR8__(v8, 18) ^ __ROR8__(v8, 41))
          + 0x428A2F98D728AE22;
      v128 = v5;
      v12 = v11 + v5;
      v13 = (__ROR8__(v4, 28) ^ __ROR8__(v4, 34) ^ __ROR8__(v4, 39)) + ((v3 ^ v6) & v4 ^ v3 & v6) + v11;
      v14 = bswap64(a2[1]);
      v125 = v10;
      v15 = v10
          + v14
          + (v7 & ~v12)
          + (v12 & v8)
          + 0x7137449123EF65CDLL
          + (__ROR8__(v12, 14) ^ __ROR8__(v12, 18) ^ __ROR8__(v12, 41));
      v129 = v6;
      v16 = v15 + v6;
      v17 = (__ROR8__(v13, 28) ^ __ROR8__(v13, 34) ^ __ROR8__(v13, 39)) + (v13 & (v4 ^ v3) ^ v4 & v3) + v15;
      v18 = bswap64(a2[2]);
      v126 = v7;
      v19 = v7
          + v18
          + (v8 & ~v16)
          + (v16 & v12)
          - 0x4A3F043013B2C4D1
          + (__ROR8__(v15 + v6, 14) ^ __ROR8__(v15 + v6, 18) ^ __ROR8__(v16, 41));
      v130 = v3;
      v20 = v19 + v3;
      v21 = (__ROR8__(v17, 28) ^ __ROR8__(v17, 34) ^ __ROR8__(v17, 39)) + (v17 & (v13 ^ v4) ^ v13 & v4) + v19;
      v22 = bswap64(a2[3]);
      v127 = v8;
      v23 = v8
          + v22
          + (v12 & ~v20)
          + (v20 & v16)
          - 0x164A245A7E762444
          + (__ROR8__(v20, 14) ^ __ROR8__(v20, 18) ^ __ROR8__(v20, 41));
      v131 = v4;
      v24 = v23 + v4;
      v25 = (__ROR8__(v21, 28) ^ __ROR8__(v21, 34) ^ __ROR8__(v21, 39)) + (v21 & (v17 ^ v13) ^ v17 & v13) + v23;
      v26 = bswap64(a2[4]);
      v27 = v12
          + v26
          + (v16 & ~v24)
          + (v24 & v20)
          + 0x3956C25BF348B538
          + (__ROR8__(v24, 14) ^ __ROR8__(v24, 18) ^ __ROR8__(v24, 41));
      v28 = v27 + v13;
      v29 = (__ROR8__(v25, 28) ^ __ROR8__(v25, 34) ^ __ROR8__(v25, 39)) + (v25 & (v21 ^ v17) ^ v21 & v17) + v27;
      v30 = bswap64(a2[5]);
      v31 = v30
          + v16
          + (v20 & ~v28)
          + (v28 & v24)
          + 0x59F111F1B605D019
          + (__ROR8__(v28, 14) ^ __ROR8__(v28, 18) ^ __ROR8__(v28, 41));
      v32 = v31 + v17;
      v33 = (__ROR8__(v29, 28) ^ __ROR8__(v29, 34) ^ __ROR8__(v29, 39)) + (v29 & (v25 ^ v21) ^ v25 & v21) + v31;
      v34 = bswap64(a2[6]);
      v35 = v34
          + v20
          + (v24 & ~v32)
          + (v32 & v28)
          - 0x6DC07D5B50E6B065
          + (__ROR8__(v32, 14) ^ __ROR8__(v32, 18) ^ __ROR8__(v32, 41));
      v36 = v35 + v21;
      v37 = (__ROR8__(v33, 28) ^ __ROR8__(v33, 34) ^ __ROR8__(v33, 39)) + (v33 & (v29 ^ v25) ^ v29 & v25) + v35;
      v137 = bswap64(a2[7]);
      v38 = v137
          + v24
          + (v28 & ~v36)
          + (v36 & v32)
          - 0x54E3A12A25927EE8
          + (__ROR8__(v36, 14) ^ __ROR8__(v36, 18) ^ __ROR8__(v36, 41));
      v39 = v38 + v25;
      v40 = (__ROR8__(v37, 28) ^ __ROR8__(v37, 34) ^ __ROR8__(v37, 39)) + (v37 & (v33 ^ v29) ^ v33 & v29) + v38;
      v136 = bswap64(a2[8]);
      v41 = v136
          + v28
          + (v32 & ~v39)
          + (v39 & v36)
          - 0x27F855675CFCFDBELL
          + (__ROR8__(v39, 14) ^ __ROR8__(v39, 18) ^ __ROR8__(v39, 41));
      v42 = v41 + v29;
      v43 = (__ROR8__(v40, 28) ^ __ROR8__(v40, 34) ^ __ROR8__(v40, 39)) + (v40 & (v37 ^ v33) ^ v37 & v33) + v41;
      v135 = bswap64(a2[9]);
      v44 = v135
          + v32
          + (v36 & ~v42)
          + (v42 & v39)
          + 0x12835B0145706FBELL
          + (__ROR8__(v42, 14) ^ __ROR8__(v42, 18) ^ __ROR8__(v42, 41));
      v45 = v44 + v33;
      v46 = (__ROR8__(v43, 28) ^ __ROR8__(v43, 34) ^ __ROR8__(v43, 39)) + (v43 & (v40 ^ v37) ^ v40 & v37) + v44;
      v134 = bswap64(a2[10]);
      v47 = v134
          + v36
          + (v39 & ~v45)
          + (v45 & v42)
          + 0x243185BE4EE4B28CLL
          + (__ROR8__(v45, 14) ^ __ROR8__(v45, 18) ^ __ROR8__(v45, 41));
      v48 = v47 + v37;
      v49 = (__ROR8__(v46, 28) ^ __ROR8__(v46, 34) ^ __ROR8__(v46, 39)) + (v46 & (v43 ^ v40) ^ v43 & v40) + v47;
      v50 = bswap64(a2[11]);
      v51 = v50
          + v39
          + (v42 & ~v48)
          + (v48 & v45)
          + 0x550C7DC3D5FFB4E2
          + (__ROR8__(v48, 14) ^ __ROR8__(v48, 18) ^ __ROR8__(v48, 41));
      v52 = v51 + v40;
      v53 = (__ROR8__(v49, 28) ^ __ROR8__(v49, 34) ^ __ROR8__(v49, 39)) + (v49 & (v46 ^ v43) ^ v46 & v43) + v51;
      v54 = bswap64(a2[12]);
      v55 = v54
          + v42
          + (v45 & ~v52)
          + (v52 & v48)
          + 0x72BE5D74F27B896FLL
          + (__ROR8__(v52, 14) ^ __ROR8__(v52, 18) ^ __ROR8__(v52, 41));
      v56 = v55 + v43;
      v57 = (__ROR8__(v53, 28) ^ __ROR8__(v53, 34) ^ __ROR8__(v53, 39)) + (v53 & (v49 ^ v46) ^ v49 & v46) + v55;
      v58 = bswap64(a2[13]);
      v59 = v58
          + v45
          + (v48 & ~v56)
          + (v56 & v52)
          - 0x7F214E01C4E9694FLL
          + (__ROR8__(v55 + v43, 14) ^ __ROR8__(v55 + v43, 18) ^ __ROR8__(v56, 41));
      v60 = v59 + v46;
      v61 = (__ROR8__(v57, 28) ^ __ROR8__(v57, 34) ^ __ROR8__(v57, 39)) + (v57 & (v53 ^ v49) ^ v53 & v49) + v59;
      v62 = bswap64(a2[14]);
      v63 = v62
          + v48
          + (v52 & ~v60)
          + (v60 & v56)
          - 0x6423F958DA38EDCBLL
          + (__ROR8__(v59 + v46, 14) ^ __ROR8__(v59 + v46, 18) ^ __ROR8__(v60, 41));
      result = v63 + v49;
      v64 = (__ROR8__(v61, 28) ^ __ROR8__(v61, 34) ^ __ROR8__(v61, 39)) + (v61 & (v57 ^ v53) ^ v57 & v53) + v63;
      v65 = bswap64(a2[15]);
      v66 = v65
          + v52
          + (v56 & ~result)
          + (result & v60)
          - 0x3E640E8B3096D96CLL
          + (__ROR8__(result, 14) ^ __ROR8__(result, 18) ^ __ROR8__(result, 41));
      v67 = v139;
      v68 = v66 + v53;
      v69 = (__ROR8__(v64, 28) ^ __ROR8__(v64, 34) ^ __ROR8__(v64, 39)) + (v64 & (v61 ^ v57) ^ v61 & v57) + v66;
      v70 = &qword_2342E5900;
      do
      {
        v133 = v50;
        v71 = (__ROR8__(v14, 1) ^ __ROR8__(v14, 8) ^ (v14 >> 7))
            + v67
            + v135
            + (__ROR8__(v62, 19) ^ __ROR8__(v62, 61) ^ (v62 >> 6));
        v72 = (v68 & result)
            + v56
            + (v60 & ~v68)
            + (__ROR8__(v68, 14) ^ __ROR8__(v68, 18) ^ __ROR8__(v68, 41))
            + *(v70 - 15)
            + v71;
        v73 = v72 + v57;
        v74 = (__ROR8__(v69, 28) ^ __ROR8__(v69, 34) ^ __ROR8__(v69, 39)) + ((v64 ^ v61) & v69 ^ v64 & v61) + v72;
        v75 = v54;
        v76 = (__ROR8__(v18, 1) ^ __ROR8__(v18, 8) ^ (v18 >> 7))
            + v14
            + v134
            + (__ROR8__(v65, 19) ^ __ROR8__(v65, 61) ^ (v65 >> 6));
        v77 = v76
            + v60
            + *(v70 - 14)
            + (result & ~v73)
            + (v73 & v68)
            + (__ROR8__(v73, 14) ^ __ROR8__(v73, 18) ^ __ROR8__(v73, 41));
        v78 = v77 + v61;
        v79 = (__ROR8__(v74, 28) ^ __ROR8__(v74, 34) ^ __ROR8__(v74, 39)) + (v74 & (v69 ^ v64) ^ v69 & v64) + v77;
        v140 = v71;
        v80 = (__ROR8__(v22, 1) ^ __ROR8__(v22, 8) ^ (v22 >> 7))
            + v18
            + v50
            + (__ROR8__(v71, 19) ^ __ROR8__(v71, 61) ^ (v71 >> 6));
        v81 = (char *)(v80
                     + result
                     + *(v70 - 13)
                     + (v68 & ~v78)
                     + (v78 & v73)
                     + (__ROR8__(v77 + v61, 14) ^ __ROR8__(v77 + v61, 18) ^ __ROR8__(v78, 41)));
        v82 = &v81[v64];
        v83 = &v81[(__ROR8__(v79, 28) ^ __ROR8__(v79, 34) ^ __ROR8__(v79, 39)) + (v79 & (v74 ^ v69) ^ v74 & v69)];
        v84 = (__ROR8__(v26, 1) ^ __ROR8__(v26, 8) ^ (v26 >> 7))
            + v22
            + v54
            + (__ROR8__(v76, 19) ^ __ROR8__(v76, 61) ^ (v76 >> 6));
        v85 = v84
            + v68
            + *(v70 - 12)
            + (v73 & ~(unint64_t)v82)
            + ((unint64_t)v82 & v78)
            + (__ROR8__(&v81[v64], 14) ^ __ROR8__(&v81[v64], 18) ^ __ROR8__(&v81[v64], 41));
        v86 = v85 + v69;
        v87 = (__ROR8__(v83, 28) ^ __ROR8__(v83, 34) ^ __ROR8__(v83, 39))
            + ((unint64_t)v83 & (v79 ^ v74) ^ v79 & v74)
            + v85;
        v26 += (__ROR8__(v30, 1) ^ __ROR8__(v30, 8) ^ (v30 >> 7))
             + v58
             + (__ROR8__(v80, 19) ^ __ROR8__(v80, 61) ^ (v80 >> 6));
        v88 = v73
            + *(v70 - 11)
            + v26
            + (v78 & ~v86)
            + (v86 & (unint64_t)v82)
            + (__ROR8__(v85 + v69, 14) ^ __ROR8__(v85 + v69, 18) ^ __ROR8__(v86, 41));
        v89 = v88 + v74;
        v90 = (__ROR8__(v87, 28) ^ __ROR8__(v87, 34) ^ __ROR8__(v87, 39))
            + (v87 & ((unint64_t)v83 ^ v79) ^ (unint64_t)v83 & v79)
            + v88;
        v30 += (__ROR8__(v34, 1) ^ __ROR8__(v34, 8) ^ (v34 >> 7))
             + v62
             + (__ROR8__(v84, 19) ^ __ROR8__(v84, 61) ^ (v84 >> 6));
        v91 = *(v70 - 10)
            + v78
            + v30
            + ((unint64_t)v82 & ~v89)
            + (v89 & v86)
            + (__ROR8__(v89, 14) ^ __ROR8__(v89, 18) ^ __ROR8__(v89, 41));
        v92 = v91 + v79;
        v93 = (__ROR8__(v90, 28) ^ __ROR8__(v90, 34) ^ __ROR8__(v90, 39))
            + (v90 & (v87 ^ (unint64_t)v83) ^ v87 & (unint64_t)v83)
            + v91;
        v34 += (__ROR8__(v137, 1) ^ __ROR8__(v137, 8) ^ (v137 >> 7))
             + v65
             + (__ROR8__(v26, 19) ^ __ROR8__(v26, 61) ^ (v26 >> 6));
        v94 = (unint64_t)&v82[*(v70 - 9)
                                   + v34
                                   + (v86 & ~v92)
                                   + (v92 & v89)
                                   + (__ROR8__(v92, 14) ^ __ROR8__(v92, 18) ^ __ROR8__(v92, 41))];
        v95 = &v83[v94];
        v96 = (__ROR8__(v93, 28) ^ __ROR8__(v93, 34) ^ __ROR8__(v93, 39)) + (v93 & (v90 ^ v87) ^ v90 & v87) + v94;
        v97 = (__ROR8__(v136, 1) ^ __ROR8__(v136, 8) ^ (v136 >> 7))
            + v137
            + v140
            + (__ROR8__(v30, 19) ^ __ROR8__(v30, 61) ^ (v30 >> 6));
        v98 = v97
            + *(v70 - 8)
            + v86
            + (v89 & ~(unint64_t)v95)
            + ((unint64_t)v95 & v92)
            + (__ROR8__(&v83[v94], 14) ^ __ROR8__(&v83[v94], 18) ^ __ROR8__(v95, 41));
        v99 = v98 + v87;
        v100 = (__ROR8__(v96, 28) ^ __ROR8__(v96, 34) ^ __ROR8__(v96, 39)) + (v96 & (v93 ^ v90) ^ v93 & v90) + v98;
        v101 = (__ROR8__(v135, 1) ^ __ROR8__(v135, 8) ^ (v135 >> 7))
             + v136
             + v76
             + (__ROR8__(v34, 19) ^ __ROR8__(v34, 61) ^ (v34 >> 6));
        v102 = v101
             + *(v70 - 7)
             + v89
             + (v92 & ~v99)
             + (v99 & (unint64_t)v95)
             + (__ROR8__(v99, 14) ^ __ROR8__(v99, 18) ^ __ROR8__(v99, 41));
        v103 = v102 + v90;
        v104 = (__ROR8__(v100, 28) ^ __ROR8__(v100, 34) ^ __ROR8__(v100, 39)) + (v100 & (v96 ^ v93) ^ v96 & v93) + v102;
        v105 = (__ROR8__(v134, 1) ^ __ROR8__(v134, 8) ^ (v134 >> 7))
             + v135
             + v80
             + (__ROR8__(v97, 19) ^ __ROR8__(v97, 61) ^ (v97 >> 6));
        v106 = v105
             + *(v70 - 6)
             + v92
             + ((unint64_t)v95 & ~v103)
             + (v103 & v99)
             + (__ROR8__(v103, 14) ^ __ROR8__(v103, 18) ^ __ROR8__(v103, 41));
        v107 = v106 + v93;
        v108 = (__ROR8__(v104, 28) ^ __ROR8__(v104, 34) ^ __ROR8__(v104, 39))
             + (v104 & (v100 ^ v96) ^ v100 & v96)
             + v106;
        v109 = (__ROR8__(v133, 1) ^ __ROR8__(v133, 8) ^ (v133 >> 7))
             + v134
             + v84
             + (__ROR8__(v101, 19) ^ __ROR8__(v101, 61) ^ (v101 >> 6));
        v110 = (uint64_t)&v95[v109
                           + *(v70 - 5)
                           + (v99 & ~v107)
                           + (v107 & v103)
                           + (__ROR8__(v107, 14) ^ __ROR8__(v107, 18) ^ __ROR8__(v107, 41))];
        v111 = v110 + v96;
        v112 = (__ROR8__(v108, 28) ^ __ROR8__(v108, 34) ^ __ROR8__(v108, 39))
             + (v108 & (v104 ^ v100) ^ v104 & v100)
             + v110;
        v135 = v105;
        v50 = (__ROR8__(v75, 1) ^ __ROR8__(v75, 8) ^ (v75 >> 7))
            + v133
            + v26
            + (__ROR8__(v105, 19) ^ __ROR8__(v105, 61) ^ (v105 >> 6));
        v113 = v50
             + *(v70 - 4)
             + v99
             + (v103 & ~v111)
             + (v111 & v107)
             + (__ROR8__(v110 + v96, 14) ^ __ROR8__(v110 + v96, 18) ^ __ROR8__(v111, 41));
        v114 = v113 + v100;
        v115 = (__ROR8__(v112, 28) ^ __ROR8__(v112, 34) ^ __ROR8__(v112, 39))
             + (v112 & (v108 ^ v104) ^ v108 & v104)
             + v113;
        v134 = v109;
        v54 = (__ROR8__(v58, 1) ^ __ROR8__(v58, 8) ^ (v58 >> 7))
            + v75
            + v30
            + (__ROR8__(v109, 19) ^ __ROR8__(v109, 61) ^ (v109 >> 6));
        v116 = v54
             + *(v70 - 3)
             + v103
             + (v107 & ~v114)
             + (v114 & v111)
             + (__ROR8__(v114, 14) ^ __ROR8__(v114, 18) ^ __ROR8__(v114, 41));
        v56 = v116 + v104;
        v57 = (__ROR8__(v115, 28) ^ __ROR8__(v115, 34) ^ __ROR8__(v115, 39))
            + (v115 & (v112 ^ v108) ^ v112 & v108)
            + v116;
        v58 += (__ROR8__(v62, 1) ^ __ROR8__(v62, 8) ^ (v62 >> 7))
             + v34
             + (__ROR8__(v50, 19) ^ __ROR8__(v50, 61) ^ (v50 >> 6));
        v117 = v58
             + *(v70 - 2)
             + v107
             + (v111 & ~v56)
             + (v56 & v114)
             + (__ROR8__(v116 + v104, 14) ^ __ROR8__(v116 + v104, 18) ^ __ROR8__(v56, 41));
        v60 = v117 + v108;
        v61 = (__ROR8__(v57, 28) ^ __ROR8__(v57, 34) ^ __ROR8__(v57, 39)) + (v57 & (v115 ^ v112) ^ v115 & v112) + v117;
        v137 = v97;
        v118 = (__ROR8__(v65, 1) ^ __ROR8__(v65, 8) ^ (v65 >> 7)) + v62 + v97;
        v18 = v80;
        v62 = v118 + (__ROR8__(v54, 19) ^ __ROR8__(v54, 61) ^ (v54 >> 6));
        v67 = v140;
        v119 = v62
             + *(v70 - 1)
             + v111
             + (v114 & ~v60)
             + (v60 & v56)
             + (__ROR8__(v60, 14) ^ __ROR8__(v60, 18) ^ __ROR8__(v60, 41));
        result = v119 + v112;
        v64 = (__ROR8__(v61, 28) ^ __ROR8__(v61, 34) ^ __ROR8__(v61, 39)) + (v61 & (v57 ^ v115) ^ v57 & v115) + v119;
        v136 = v101;
        v120 = (__ROR8__(v140, 1) ^ __ROR8__(v140, 8) ^ (v140 >> 7)) + v65 + v101;
        v22 = v84;
        v65 = v120 + (__ROR8__(v58, 19) ^ __ROR8__(v58, 61) ^ (v58 >> 6));
        v121 = *v70;
        v70 += 16;
        v122 = v65
             + v121
             + v114
             + (v56 & ~result)
             + (result & v60)
             + (__ROR8__(result, 14) ^ __ROR8__(result, 18) ^ __ROR8__(result, 41));
        v68 = v122 + v115;
        v69 = (__ROR8__(v64, 28) ^ __ROR8__(v64, 34) ^ __ROR8__(v64, 39)) + (v64 & (v61 ^ v57) ^ v61 & v57) + v122;
        v14 = v76;
        v138 += 16;
      }
      while (v138 < 0x40);
      v4 = v69 + v131;
      v3 = v64 + v130;
      *v123 = v69 + v131;
      v123[1] = v64 + v130;
      v6 = v61 + v129;
      v5 = v57 + v128;
      v123[2] = v61 + v129;
      v123[3] = v57 + v128;
      v8 = v68 + v127;
      v7 = result + v126;
      v123[4] = v68 + v127;
      v123[5] = result + v126;
      v10 = v60 + v125;
      v9 = v56 + v124;
      a2 += 16;
      v123[6] = v60 + v125;
      v123[7] = v56 + v124;
      a3 = v132 - 1;
    }
    while (v132 != 1);
  }
  return result;
}

uint64_t sub_2341849C4(uint64_t *a1, _BYTE *a2, size_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (!a3)
    return 1;
  bzero(a2, a3);
  sub_234195C74(&stru_2561580B0, (void (*)(void))sub_234170DA8);
  if (a1 == &qword_256159FB0)
  {
    sub_234195C74(&stru_256158040, (void (*)(void))sub_234170A7C);
    result = sub_234184B20(a2, a3, (uint64_t)&qword_256159E60, a4, a5 - (a5 >> 1), a6, a7, a8, a9, a10, a11);
    if (!(_DWORD)result)
      return result;
    a4 += a5 >> 1;
    sub_234195C74(&stru_256158050, (void (*)(void))sub_234170AF0);
    a5 -= a5 >> 1;
    a1 = &qword_256159E90;
  }
  return sub_234184B20(a2, a3, (uint64_t)a1, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_234184B20(_BYTE *a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _OWORD v29[6];
  uint64_t v30;
  _QWORD v31[12];
  uint64_t v32;
  _QWORD v33[13];
  _BYTE v34[64];
  _BYTE v35[64];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  memset(v33, 0, sizeof(v33));
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  v28 = 0;
  v26 = *(unsigned int *)(a3 + 4);
  sub_23417945C((uint64_t)v33);
  sub_23417945C((uint64_t)v31);
  sub_23417945C((uint64_t)v29);
  if (sub_234179480((uint64_t)v29, a4, a5, a3))
  {
    if (sub_234179854(v33, v29))
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v33[1] + 24))(&v33[1], a6, a7);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v33[1] + 24))(&v33[1], a8, a9);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v33[1] + 24))(&v33[1], a10, a11);
      if (sub_234179678((uint64_t)v33, (uint64_t)v35, &v28))
      {
        while (1)
        {
          v27 = 0;
          if (!sub_234179854(v33, v29))
            break;
          (*(void (**)(_QWORD *, _BYTE *, _QWORD))(v33[1] + 24))(&v33[1], v35, v28);
          if (a2 > v26 && !sub_234179854(v31, v33))
            break;
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v33[1] + 24))(&v33[1], a6, a7);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v33[1] + 24))(&v33[1], a8, a9);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v33[1] + 24))(&v33[1], a10, a11);
          if (!sub_234179678((uint64_t)v33, (uint64_t)v34, &v27))
            break;
          if (a2 >= v27)
            v19 = v27;
          else
            v19 = a2;
          if (v19)
          {
            v20 = v34;
            v21 = a1;
            v22 = v19;
            do
            {
              v23 = *v20++;
              *v21++ ^= v23;
              --v22;
            }
            while (v22);
          }
          a2 -= v19;
          if (!a2)
          {
            v24 = 1;
            goto LABEL_18;
          }
          if (!sub_234179678((uint64_t)v31, (uint64_t)v35, &v28))
            break;
          a1 += v19;
        }
      }
    }
  }
  v24 = 0;
LABEL_18:
  sub_23418E400(v35, 0x40uLL);
  sub_234179740(v33);
  sub_234179740(v31);
  sub_234179740(v29);
  return v24;
}

uint64_t sub_234184DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, const void *a6, size_t a7, const void *a8, size_t a9)
{
  uint64_t v17;
  uint64_t v19;
  void *v20;
  _OWORD v21[3];
  _OWORD v22[3];

  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  v19 = 0;
  v20 = 0;
  sub_234147B44(v22);
  if (sub_234147B54((uint64_t)v22, a7 + a9 + 10)
    && sub_23414847C((uint64_t)v22, (unsigned __int16)a2)
    && sub_234147EF4((uint64_t *)v22, (uint64_t)v21)
    && sub_23414817C((uint64_t)v21, "tls13 ", 6uLL)
    && sub_23414817C((uint64_t)v21, a6, a7)
    && sub_234147EF4((uint64_t *)v22, (uint64_t)v21)
    && sub_23414817C((uint64_t)v21, a8, a9)
    && sub_234147C00((uint64_t)v22, &v20, &v19))
  {
    v17 = sub_23417918C(a1, a2, a3, a4, a5, (uint64_t)v20, v19);
    sub_23418E3C4(v20);
  }
  else
  {
    sub_234147BE4((uint64_t)v22);
    return 0;
  }
  return v17;
}

uint64_t *sub_234184F24(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v8 = 0u;
  v10 = 0;
  v9 = 0u;
  v7 = 0u;
  v3 = a2[1];
  v6 = *a2;
  *((_QWORD *)&v8 + 1) = v3;
  sub_234184F8C(&v6);
  sub_234185030(&v6);
  result = sub_234184F8C(&v6);
  v5 = *((_QWORD *)&v8 + 1);
  *a1 = v6;
  a1[1] = v5;
  return result;
}

uint64_t *sub_234184F8C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = result[1];
  v2 = (v1 ^ ((unint64_t)*result >> 1)) & 0x5555555555555555;
  v3 = *result ^ (2 * v2);
  v4 = v2 ^ v1;
  v5 = result[2];
  v6 = result[3];
  v7 = (v6 ^ (v5 >> 1)) & 0x5555555555555555;
  v8 = v5 ^ (2 * v7);
  v9 = v7 ^ v6;
  v10 = result[4];
  v11 = result[5];
  v12 = (v11 ^ (v10 >> 1)) & 0x5555555555555555;
  v13 = v10 ^ (2 * v12);
  v14 = v12 ^ v11;
  v15 = result[6];
  v16 = result[7];
  v17 = (v16 ^ (v15 >> 1)) & 0x5555555555555555;
  v18 = v15 ^ (2 * v17);
  v19 = v17 ^ v16;
  v20 = (v8 ^ (v3 >> 2)) & 0x3333333333333333;
  v21 = v3 ^ (4 * v20);
  v22 = v20 ^ v8;
  v23 = (v9 ^ (v4 >> 2)) & 0x3333333333333333;
  *result = v21;
  result[1] = v4 ^ (4 * v23);
  result[2] = v22;
  result[3] = v23 ^ v9;
  v24 = (v18 ^ (v13 >> 2)) & 0x3333333333333333;
  v25 = (v19 ^ (v14 >> 2)) & 0x3333333333333333;
  result[4] = v13 ^ (4 * v24);
  result[5] = v14 ^ (4 * v25);
  result[6] = v24 ^ v18;
  result[7] = v25 ^ v19;
  return result;
}

uint64_t *sub_234185030(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = result[6];
  v2 = result[7];
  v3 = result[4];
  v4 = result[2];
  v5 = v4 ^ v3;
  v6 = result[1];
  v7 = v6 ^ v2;
  v8 = v3 ^ v2;
  v9 = v4 ^ v2;
  v10 = result[5] ^ v1;
  v11 = *result ^ v10;
  v12 = v11 ^ v3;
  v13 = v6 ^ v2 ^ v5;
  v63 = v11 ^ v2;
  v14 = v11 ^ v6;
  v15 = v14 ^ v4 ^ v2;
  v16 = v13 ^ result[3];
  v17 = v16 ^ v4;
  v18 = v16 ^ v1;
  v19 = v17 ^ v10;
  v20 = v18 ^ v8;
  v21 = v18 ^ v8 ^ *result;
  v22 = v18 ^ v8 ^ v17 ^ v10;
  v23 = v18 ^ v8 ^ v10;
  v24 = (v18 ^ v8) & v8;
  v25 = v22 & v5 ^ v24;
  v26 = v24 ^ v19 & v9;
  v27 = v18 ^ v17 & v13 ^ (v17 ^ *result) & v15 ^ v25;
  v28 = v12 & *result ^ v9 ^ v17 & v13 ^ v19 ^ v26;
  v29 = v14 & v11 ^ v7 ^ v23 & v7 ^ v25;
  v30 = v21 & (v11 ^ v2) ^ v2 ^ v23 & v7 ^ v26;
  v31 = v30 ^ v23;
  v32 = v28 ^ v27;
  v33 = (v29 ^ v23) & v27;
  v34 = v33 ^ v30 ^ v23;
  v35 = v34 & v32 ^ v28;
  v36 = (v33 ^ v28) & (v30 ^ v29);
  v37 = v36 ^ v31;
  v38 = (v36 ^ v33) & v31;
  v39 = v38 ^ v29 ^ v23;
  v40 = (v38 ^ v34) & v35 ^ v32;
  v41 = v40 ^ v39 ^ v37;
  v42 = v41 ^ v37 ^ v35;
  v43 = (v39 ^ v37) & (v17 ^ *result);
  v44 = v37 & *result;
  v45 = (v40 ^ v35) & v23;
  v46 = v40 & v11;
  v47 = v35 & v21;
  v48 = v42 & v22;
  v49 = (v39 ^ v37) & v15;
  v50 = (v40 ^ v35) & v7;
  v51 = v42 & v5;
  v52 = v51 ^ (v37 ^ v35) & v8;
  v53 = v49 ^ v37 & v12;
  v54 = v40 & v14 ^ v47;
  v55 = v49 ^ v39 & v13;
  v56 = v45 ^ v39 & v17;
  v57 = v50 ^ v44 ^ v56;
  v58 = v45 ^ (v37 ^ v35) & v20 ^ v48;
  v59 = v48 ^ v41 & v19 ^ v52 ^ v46;
  v60 = v55 ^ v52 ^ v46;
  v61 = v58 ^ v46;
  v62 = v57 ^ v35 & v63 ^ v59;
  *result = v54 ^ v52 ^ ~v57;
  result[1] = v54 ^ v50 ^ ~v59;
  result[2] = v53 ^ v62;
  result[3] = v47 ^ v44 ^ v60 ^ v43;
  result[4] = v60 ^ v43 ^ v56;
  result[5] = v61 ^ v41 & v9 ^ v51 ^ ~v62;
  result[6] = v61 ^ ~(v60 ^ v43 ^ v56);
  result[7] = v60 ^ v58;
  return result;
}

int8x16_t sub_23418525C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int8x16_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (*(_QWORD *)a1 >> 4) & 0xFFF0FFF0FFF0FFFLL | (*(_QWORD *)a1 << 12) & 0xF000F000F000F000;
  v5 = v4 ^ *(_QWORD *)a1;
  v6 = (v1 >> 4) & 0xFFF0FFF0FFF0FFFLL | (v1 << 12) & 0xF000F000F000F000;
  v7 = v6 ^ v1;
  v8 = (v2 >> 4) & 0xFFF0FFF0FFF0FFFLL | (v2 << 12) & 0xF000F000F000F000;
  v9 = v8 ^ v2;
  v10 = (v3 >> 4) & 0xFFF0FFF0FFF0FFFLL | (v3 << 12) & 0xF000F000F000F000;
  v11 = v10 ^ v3;
  v12 = *(int64x2_t *)(a1 + 16);
  v13 = *(int64x2_t *)(a1 + 32);
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  v15 = (int64x2_t)vbslq_s8(v14, (int8x16_t)vshrq_n_u64((uint64x2_t)v12, 4uLL), (int8x16_t)vshlq_n_s64(v12, 0xCuLL));
  v16 = (int64x2_t)veorq_s8((int8x16_t)v15, (int8x16_t)v12);
  v17 = vdupq_laneq_s64(v16, 1);
  v18 = (int64x2_t)vbslq_s8(v14, (int8x16_t)vshrq_n_u64((uint64x2_t)v13, 4uLL), (int8x16_t)vshlq_n_s64(v13, 0xCuLL));
  *(_QWORD *)a1 = __rev16(v5) ^ v4 ^ v11;
  *(_QWORD *)(a1 + 8) = v5 ^ v6 ^ __rev16(v7) ^ v11;
  v19 = veorq_s8(veorq_s8((int8x16_t)vzip1q_s64(vdupq_laneq_s64(v15, 1), v18), (int8x16_t)vdupq_n_s64(v11)), (int8x16_t)v16);
  *(_QWORD *)(a1 + 16) = __rev16(v16.u64[0]) ^ v15.i64[0] ^ v7;
  v20 = (int64x2_t)veorq_s8((int8x16_t)v18, (int8x16_t)v13);
  v21 = vzip1q_s64(v17, v20);
  v17.i64[0] = 0xFF00FF00FF00FFLL;
  v17.i64[1] = 0xFF00FF00FF00FFLL;
  *(int8x16_t *)(a1 + 24) = veorq_s8(vbslq_s8((int8x16_t)v17, (int8x16_t)vshrq_n_u64((uint64x2_t)v21, 8uLL), (int8x16_t)vshlq_n_s64(v21, 8uLL)), v19);
  v21.i64[0] = vdupq_laneq_s64(v20, 1).u64[0];
  v21.i64[1] = v9;
  v15.i64[0] = vdupq_laneq_s64(v18, 1).u64[0];
  v15.i64[1] = v8;
  result = veorq_s8(vbslq_s8((int8x16_t)v17, (int8x16_t)vshrq_n_u64((uint64x2_t)v21, 8uLL), (int8x16_t)vshlq_n_s64(v21, 8uLL)), veorq_s8((int8x16_t)v15, (int8x16_t)v20));
  *(int8x16_t *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 56) = v9 ^ v10 ^ __rev16(v11);
  return result;
}

uint64_t *sub_234185394(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result[1];
  v2 = result[2];
  v3 = result[3];
  v4 = result[4];
  v5 = result[5];
  v6 = result[6];
  v7 = result[7];
  v8 = v3 ^ *result;
  v9 = v5 ^ v2 ^ *result;
  v10 = v6 ^ v1 ^ v3;
  v11 = v4 ^ v1;
  *result = v5 ^ v2 ^ ~v7;
  result[1] = v8 ^ v6;
  result[2] = v11 ^ ~v7;
  result[3] = v9;
  result[4] = v10;
  result[5] = v7 ^ v2 ^ v4;
  result[6] = v8 ^ v5;
  result[7] = v11 ^ v6;
  return result;
}

uint64_t sub_2341853EC(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

void **sub_2341853F8(uint64_t a1, uint64_t *a2)
{
  void **result;

  result = sub_234162060((void **)a1, (uint64_t)a2);
  if (result)
  {
    *(_DWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 48) = sub_2341621D4(a2);
    *(_DWORD *)(a1 + 52) = 0;
    return (void **)1;
  }
  return result;
}

uint64_t sub_234185438(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  int v15;
  unsigned int v16;
  int v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_234162DC8((_QWORD *)a5);
  result = (uint64_t)sub_234162E68(a5);
  if (!result)
    goto LABEL_55;
  if (!a3)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v11 = result;
  if (a2 == a3)
  {
    result = sub_2341641F8(result, a3, a5);
    if (!(_DWORD)result)
      goto LABEL_55;
LABEL_8:
    sub_234162DC8((_QWORD *)a5);
    v12 = sub_234162E68(a5);
    v13 = sub_234162E68(a5);
    v14 = sub_234162E68(a5);
    if (!a1)
      a1 = sub_234162E68(a5);
    result = 0;
    if (v12 && v13 && v14 && a1)
    {
      if ((sub_234162948(*(uint64_t **)v11, *(int *)(v11 + 8), *(uint64_t **)a4, *(int *)(a4 + 8)) & 0x80000000) != 0)
      {
        *((_DWORD *)v14 + 4) = 0;
        *((_DWORD *)v14 + 2) = 0;
        result = (uint64_t)sub_234162060((void **)a1, v11);
        if (result)
        {
          if (*(_BYTE *)(a5 + 40))
          {
            result = 1;
            goto LABEL_55;
          }
          v26 = *(_QWORD *)(a5 + 16) - 1;
          *(_QWORD *)(a5 + 16) = v26;
          result = 1;
LABEL_54:
          *(_QWORD *)(a5 + 32) = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8 * v26);
          goto LABEL_55;
        }
      }
      else
      {
        v15 = sub_2341621D4((uint64_t *)v11);
        if (2 * *(_DWORD *)(a4 + 48) <= v15)
          v16 = v15;
        else
          v16 = 2 * *(_DWORD *)(a4 + 48);
        if (v16 == *(_DWORD *)(a4 + 52))
        {
          v17 = v16;
        }
        else
        {
          sub_234162DC8((_QWORD *)a5);
          v18 = sub_234162E68(a5);
          if (v18 && (v19 = (uint64_t)v18, sub_2341698DC((uint64_t)v18, v16)))
          {
            if (sub_234162F7C((unint64_t *)(a4 + 24), 0, v19, a4, a5))
              v17 = v16;
            else
              v17 = -1;
          }
          else
          {
            v17 = -1;
          }
          if (!*(_BYTE *)(a5 + 40))
          {
            v20 = *(_QWORD *)(a5 + 8);
            v21 = *(_QWORD *)(a5 + 16) - 1;
            *(_QWORD *)(a5 + 16) = v21;
            *(_QWORD *)(a5 + 32) = *(_QWORD *)(v20 + 8 * v21);
          }
          *(_DWORD *)(a4 + 52) = v17;
        }
        if (v17 == -1)
        {
LABEL_51:
          result = 0;
        }
        else
        {
          result = sub_23416371C((uint64_t)v12, v11, *(_DWORD *)(a4 + 48));
          if ((_DWORD)result)
          {
            result = sub_234164264((uint64_t)v13, (uint64_t)v12, a4 + 24, a5);
            if ((_DWORD)result)
            {
              result = sub_23416371C((uint64_t)v14, (uint64_t)v13, v16 - *(_DWORD *)(a4 + 48));
              if ((_DWORD)result)
              {
                *((_DWORD *)v14 + 4) = 0;
                result = sub_234164264((uint64_t)v13, a4, (uint64_t)v14, a5);
                if ((_DWORD)result)
                {
                  result = sub_23416159C((uint64_t)a1, v11, (uint64_t)v13);
                  if ((_DWORD)result)
                  {
                    *((_DWORD *)a1 + 4) = 0;
                    v22 = 4;
                    while (1)
                    {
                      v23 = (uint64_t *)*a1;
                      v24 = *((int *)a1 + 2);
                      if ((sub_234162948((uint64_t *)*a1, v24, *(uint64_t **)a4, *(int *)(a4 + 8)) & 0x80000000) != 0)
                        break;
                      if (!--v22)
                      {
                        sub_2341579B4(3, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/exponentiation.c", 367);
                        goto LABEL_51;
                      }
                      result = sub_23416159C((uint64_t)a1, (uint64_t)a1, a4);
                      if ((_DWORD)result)
                      {
                        v25 = sub_2341618E4((uint64_t)v14, 1uLL);
                        result = 0;
                        if (v25)
                          continue;
                      }
                      goto LABEL_52;
                    }
                    if ((_DWORD)v24)
                    {
                      v27 = 0;
                      do
                      {
                        v28 = *v23++;
                        v27 |= v28;
                        --v24;
                      }
                      while (v24);
                      if (v27)
                        LODWORD(v27) = *(_DWORD *)(v11 + 16);
                    }
                    else
                    {
                      LODWORD(v27) = 0;
                    }
                    *((_DWORD *)a1 + 4) = v27;
                    *((_DWORD *)v14 + 4) = *(_DWORD *)(a4 + 16) ^ *(_DWORD *)(v11 + 16);
                    result = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_52:
    if (*(_BYTE *)(a5 + 40))
      goto LABEL_55;
    v26 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v26;
    goto LABEL_54;
  }
  result = sub_234164264(result, a2, a3, a5);
  if ((_DWORD)result)
    goto LABEL_8;
LABEL_55:
  if (!*(_BYTE *)(a5 + 40))
  {
    v29 = *(_QWORD *)(a5 + 8);
    v30 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v30;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v29 + 8 * v30);
  }
  return result;
}

unint64_t sub_23418578C(unint64_t *a1, unint64_t *a2, unint64_t *a3, int a4, unsigned int a5)
{
  uint64_t v9;
  unint64_t result;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t v20;

  v9 = a4;
  result = sub_234161E5C(a1, a2, a3, a4);
  if (a5)
  {
    v11 = &a1[v9];
    if ((a5 & 0x80000000) != 0)
    {
      v16 = &a3[v9];
      if ((signed int)-a5 > 1)
        v17 = -a5;
      else
        v17 = 1;
      do
      {
        v18 = *v16++;
        v19 = v18 != 0;
        v20 = -v18 - result;
        result = -v18 < result || v19;
        *v11++ = v20;
        --v17;
      }
      while (v17);
    }
    else
    {
      v12 = &a2[v9];
      v13 = a5;
      do
      {
        v14 = *v12++;
        v15 = v14 - result;
        result = v14 < result;
        *v11++ = v15;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

void sub_234185834(uint64_t *a1, unint64_t *a2, unint64_t *a3, unsigned int a4, int a5, int a6, unint64_t *a7)
{
  unint64_t v13;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  v13 = 2 * (int)a4;
  if ((int)a4 > 7)
  {
    v48 = (int)a4;
    v15 = &a7[2 * (int)a4];
    v46 = &a2[a4];
    v47 = a4;
    v16 = sub_234169F38(a7, a2, v46, a5, a4 - a5, v15);
    v17 = &a7[a4];
    v18 = sub_234169F38(v17, &a3[a4], a3, a6, a6 - a4, v15) ^ v16;
    if (a4 == 8)
    {
      sub_2341682A0(v15, a7, v17);
      v19 = a1;
      sub_2341682A0(a1, a2, a3);
      sub_23416A248(&a1[v13], v46, a5, a3 + 8, a6);
      v20 = a6 + a5;
      v21 = v13 - (a6 + a5);
      v22 = v48;
      if ((_DWORD)v13 != v20)
        bzero(&a1[v20 + (int)v13], 8 * v21);
    }
    else
    {
      v45 = &a3[a4];
      sub_234185B9C((uint64_t *)v15, a7, &a7[a4], a4, 0, 0, &a7[4 * v48]);
      v19 = a1;
      v23 = a3;
      v24 = &a7[4 * v48];
      sub_234185B9C(a1, a2, v23, a4, 0, 0, v24);
      v25 = &a1[v13];
      bzero(v25, 8 * v13);
      if (a5 > 15 || a6 >= 16)
      {
        if (a5 <= a6)
          v26 = a6;
        else
          v26 = a5;
        LODWORD(v27) = a4;
        while (1)
        {
          v28 = (int)v27 >= 0 ? v27 : (int)v27 + 1;
          v27 = (v28 >> 1);
          if ((int)v27 < v26)
            break;
          if (a5 == (_DWORD)v27 || a6 == (_DWORD)v27)
          {
            sub_234185B9C(v25, v46, v45, v27, (a5 - v27), (a6 - v27), v24);
            goto LABEL_25;
          }
        }
        sub_234185834(v25, v46, v45, v27, (a5 - v27), (a6 - v27), v24);
LABEL_25:
        v22 = v48;
      }
      else
      {
        sub_23416A248(v25, v46, a5, v45, a6);
        v22 = v48;
      }
    }
    v30 = sub_2341617E0(a7, v19, &v19[v13], v13);
    v31 = 4 * v22;
    v32 = &a7[4 * v22];
    v33 = sub_234161E5C(v32, a7, v15, v13);
    v34 = sub_2341617E0(v15, (uint64_t *)a7, (uint64_t *)v15, v13);
    v35 = ~v18;
    v36 = v15;
    v37 = v13;
    do
    {
      v38 = *v32++;
      *v36 = *v36 & v35 | v38 & v18;
      ++v36;
      --v37;
    }
    while (v37);
    v39 = sub_2341617E0(&a1[v47], &a1[v47], (uint64_t *)v15, v13);
    v40 = 3 * a4;
    if ((int)(3 * a4) < (int)v31)
    {
      v41 = (v18 & (v30 - v33) | (v34 + v30) & v35) + v39;
      v42 = &a1[v40];
      v43 = v31 - v40;
      do
      {
        v44 = *v42 + v41;
        v41 = __CFADD__(*v42, v41);
        *v42++ = v44;
        --v43;
      }
      while (v43);
    }
  }
  else
  {
    sub_23416A248(a1, a2, (int)(a5 + a4), a3, (int)(a6 + a4));
    if ((_DWORD)v13 != a6 + a5)
      bzero(&a1[(int)v13 + a5 + a6], (int)v13 - (a6 + a5));
  }
}

void sub_234185B9C(uint64_t *a1, unint64_t *a2, unint64_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  signed int v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;

  v14 = a6 | a5;
  if (a4 != 8 || v14)
  {
    if ((int)a4 > 15)
    {
      v15 = a4 >> 1;
      v41 = a6 + (a4 >> 1);
      v36 = &a2[a4 >> 1];
      v38 = sub_234169F38(a7, a2, v36, a5 + (a4 >> 1), -(int)a5, &a7[a4]);
      v34 = &a7[v15];
      v35 = &a3[v15];
      v37 = &a7[a4];
      v16 = sub_234169F38(v34, v35, a3, v41, a6, v37) ^ v38;
      v40 = a4 >> 1;
      if (v15 != 8 || v14)
      {
        v19 = 2 * a4;
        v17 = &a7[a4];
        sub_234185B9C(v37, a7, v34, v40, 0, 0);
        sub_234185B9C(a1, a2, a3, v40, 0, 0);
        v18 = a4;
        sub_234185B9C(&a1[a4], v36, v35, v40, a5, a6);
      }
      else
      {
        v17 = &a7[a4];
        sub_2341682A0(v37, a7, v34);
        sub_2341682A0(a1, a2, a3);
        v18 = a4;
        sub_2341682A0(&a1[a4], v36, v35);
        v19 = 2 * a4;
      }
      v20 = sub_2341617E0(a7, a1, &a1[v18], v18);
      v21 = v19;
      v22 = &a7[v19];
      v39 = sub_234161E5C(v22, a7, v17, v18);
      v23 = sub_2341617E0(v17, (uint64_t *)a7, (uint64_t *)v17, v18);
      v24 = ~v16;
      v25 = v17;
      v26 = v18;
      do
      {
        v27 = *v22++;
        *v25 = *v25 & v24 | v27 & v16;
        ++v25;
        --v26;
      }
      while (v26);
      v28 = sub_2341617E0(&a1[v40], &a1[v40], (uint64_t *)v17, v18);
      v29 = v40 + a4;
      if ((int)(v40 + a4) < v21)
      {
        v30 = (v16 & (v20 - v39) | (v23 + v20) & v24) + v28;
        v31 = &a1[v29];
        v32 = v21 - (uint64_t)v29;
        do
        {
          v33 = *v31 + v30;
          v30 = __CFADD__(*v31, v30);
          *v31++ = v33;
          --v32;
        }
        while (v32);
      }
    }
    else
    {
      sub_23416A248(a1, a2, (int)(a5 + a4), a3, (int)(a6 + a4));
      if ((int)a6 + (int)a5 < 0)
        bzero(&a1[(int)(a5 + 2 * a4 + a6)], 8 * -(a6 + a5));
    }
  }
  else
  {
    sub_2341682A0(a1, a2, a3);
  }
}

uint64_t sub_234185EAC(uint64_t a1, _OWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t *(*v7)(uint64_t, uint64_t, uint64_t);
  double (*v8)(int8x16_t *, int8x16_t *, unint64_t, uint64_t, int8x16_t *, int);

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 20) & 0x3F;
  if (v5 == 5)
  {
    v6 = 0;
  }
  else
  {
    v6 = v5 == 2;
    if (!a4 && (v5 - 3) >= 0xFFFFFFFE)
    {
      sub_23415F4C0(a2, 8 * *(_DWORD *)(a1 + 24), v4);
      v7 = sub_23415F3DC;
      goto LABEL_7;
    }
  }
  sub_23415F4C0(a2, 8 * *(_DWORD *)(a1 + 24), v4);
  v7 = sub_23415F318;
LABEL_7:
  *(_QWORD *)(v4 + 248) = v7;
  v8 = sub_234160294;
  if (!v6)
    v8 = 0;
  *(_QWORD *)(v4 + 256) = v8;
  return 1;
}

uint64_t sub_234185F58(uint64_t a1, __n128 *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5;
  void (*v6)(unint64_t, __n128 *, unint64_t);
  __n128 *v7;
  void (*v8)(__n128 *, __n128 *, uint64_t);

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(void (**)(unint64_t, __n128 *, unint64_t))(v5 + 256);
  if (v6)
  {
    v6(a3, a2, a4);
  }
  else
  {
    v7 = (__n128 *)(a1 + 52);
    v8 = *(void (**)(__n128 *, __n128 *, uint64_t))(v5 + 248);
    if (*(_DWORD *)(a1 + 28))
      sub_234160DD0(a3, a2, a4, v5, v7, v8);
    else
      sub_234160F28(a3, (unint64_t)a2, a4, v5, (uint64_t)v7, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t))v8);
  }
  return 1;
}

uint64_t sub_234185FB8(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)(char *, _BYTE *, unint64_t, uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(uint64_t (**)(char *, _BYTE *, unint64_t, uint64_t, uint64_t))(v5 + 256);
  v7 = a1 + 52;
  v8 = (_QWORD *)(a1 + 68);
  v9 = (unsigned int *)(a1 + 104);
  if (v6)
    sub_234160AA0(a3, a2, a4, v5, v7, v8, v9, v6);
  else
    sub_234160C58(a3, a2, a4, v5, v7, v8, v9, *(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v5 + 248));
  return 1;
}

uint64_t sub_234186008(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  sub_234161150(a3, a2, a4, *(_QWORD *)(a1 + 16), (_QWORD *)(a1 + 52), (unsigned int *)(a1 + 104), *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(a1 + 16) + 248));
  return 1;
}

uint64_t sub_23418603C(uint64_t a1, unint64_t a2, void *__src)
{
  uint64_t *v3;
  uint64_t v4;
  size_t v5;

  if (a2 | (unint64_t)__src)
  {
    v3 = (uint64_t *)__src;
    v4 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) & 8);
    if (a2)
    {
      *(_OWORD *)(v4 + 352) = 0u;
      *(_OWORD *)(v4 + 368) = 0u;
      *(_OWORD *)(v4 + 320) = 0u;
      *(_OWORD *)(v4 + 336) = 0u;
      *(_OWORD *)(v4 + 288) = 0u;
      *(_OWORD *)(v4 + 304) = 0u;
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      sub_23415F4C0((_OWORD *)a2, 8 * *(_DWORD *)(a1 + 24), v4 + 384);
      sub_23416E414(v4 + 80, v4 + 384, (uint64_t (*)(unint64_t *, unint64_t *, uint64_t))sub_23415F318);
      *(_QWORD *)(v4 + 664) = sub_2341600D0;
      if (v3 || *(_DWORD *)(v4 + 636) && (v3 = *(uint64_t **)(v4 + 640)) != 0)
      {
        sub_23417B1A8(v4, v4 + 384, v3, *(int *)(v4 + 648));
        *(_DWORD *)(v4 + 636) = 1;
      }
      *(_DWORD *)(v4 + 632) = 1;
    }
    else
    {
      if (*(_DWORD *)(v4 + 632))
      {
        sub_23417B1A8(v4, v4 + 384, (uint64_t *)__src, *(int *)(v4 + 648));
      }
      else
      {
        v5 = *(int *)(v4 + 648);
        if ((_DWORD)v5)
          memcpy(*(void **)(v4 + 640), v3, v5);
      }
      *(_DWORD *)(v4 + 636) = 1;
      *(_DWORD *)(v4 + 656) = 0;
    }
  }
  return 1;
}

uint64_t sub_234186174(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t a4, int8x16_t a5)
{
  uint64_t v5;
  uint64_t result;
  void (*v10)(char *, int8x16_t *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) & 8);
  if (!*(_DWORD *)(v5 + 632))
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (!(a4 >> 31) && *(_DWORD *)(v5 + 636))
  {
    if (!a3)
    {
      if (*(_DWORD *)(a1 + 28))
      {
        sub_23417BCCC((int8x16_t *)v5, 0, 0);
        result = 0;
        *(_OWORD *)(a1 + 68) = *(_OWORD *)(v5 + 64);
        *(_DWORD *)(v5 + 652) = 16;
      }
      else
      {
        v12 = *(unsigned int *)(v5 + 652);
        if ((v12 & 0x80000000) != 0)
          return result;
        if (!sub_23417BCCC((int8x16_t *)v5, (char *)(a1 + 68), v12))
          return 0xFFFFFFFFLL;
        result = 0;
      }
      *(_DWORD *)(v5 + 636) = 0;
      return result;
    }
    if (a2)
    {
      v10 = *(void (**)(char *, int8x16_t *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 664);
      v11 = v5 + 384;
      if (*(_DWORD *)(a1 + 28))
      {
        if (v10)
        {
          if (!sub_23417B8C4(v5, v11, a3->i8, a2, a4, v10, a5))
            return 0xFFFFFFFFLL;
          return a4;
        }
        if (sub_23417B3F0((int8x16_t *)v5, v11, a3->i8, a2, a4, a5))
          return a4;
      }
      else
      {
        if (v10)
        {
          if (!sub_23417BAC8(v5, v11, a3, a2, a4, (void (*)(int8x16_t *, _BYTE *, uint64_t, uint64_t, uint64_t, __n128))v10))return 0xFFFFFFFFLL;
          return a4;
        }
        if (sub_23417B65C((int8x16_t *)v5, v11, a3, a2->i64, a4, a5))
          return a4;
      }
      return 0xFFFFFFFFLL;
    }
    if (!sub_23417B2E4((int8x16_t *)v5, a3, a4))
      return 0xFFFFFFFFLL;
    return a4;
  }
  return result;
}

void sub_234186290(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)(*(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) & 8));
  sub_23418E400(v2, 0x180uLL);
  v3 = (_QWORD *)v2[80];
  if (v3 != (_QWORD *)(a1 + 52))
    sub_23418E3C4(v3);
}

uint64_t sub_2341862E0(uint64_t a1, int a2, size_t __n, _QWORD *__src)
{
  uint64_t v5;
  uint64_t result;
  int v8;
  _QWORD *v9;
  const void *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  size_t v14;

  v5 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) & 8);
  result = 0xFFFFFFFFLL;
  v8 = __n;
  switch(a2)
  {
    case 8:
      v9 = (_QWORD *)(__src[2] + (__src[2] & 8));
      memcpy(v9, (const void *)v5, 0x2A0uLL);
      v10 = *(const void **)(v5 + 640);
      if (v10 == (const void *)(a1 + 52))
      {
        v9[80] = (char *)__src + 52;
        return 1;
      }
      result = (uint64_t)sub_23418E58C(v10, *(int *)(v5 + 648));
      v9[80] = result;
      if (result)
        return 1;
      return result;
    case 9:
      if ((int)__n < 1)
        return 0;
      if (__n < 0x11 || *(_DWORD *)(v5 + 648) >= (int)__n)
        goto LABEL_13;
      v11 = *(_QWORD **)(v5 + 640);
      if (v11 != (_QWORD *)(a1 + 52))
        sub_23418E3C4(v11);
      result = (uint64_t)sub_23418E2E4(v8);
      *(_QWORD *)(v5 + 640) = result;
      if (result)
      {
LABEL_13:
        *(_DWORD *)(v5 + 648) = v8;
        return 1;
      }
      return result;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
    case 23:
      return result;
    case 16:
      if ((__n - 17) < 0xFFFFFFF0 || !*(_DWORD *)(a1 + 28) || (*(_DWORD *)(v5 + 652) & 0x80000000) != 0)
        return 0;
      memcpy(__src, (const void *)(a1 + 68), __n);
      return 1;
    case 17:
      if ((__n - 17) < 0xFFFFFFF0 || *(_DWORD *)(a1 + 28))
        return 0;
      memcpy((void *)(a1 + 68), __src, __n);
      *(_DWORD *)(v5 + 652) = v8;
      return 1;
    case 18:
      if ((_DWORD)__n == -1)
      {
        v14 = *(int *)(v5 + 648);
        if ((_DWORD)v14)
          memcpy(*(void **)(v5 + 640), __src, v14);
      }
      else
      {
        if ((int)__n < 4 || *(_DWORD *)(v5 + 648) - (int)__n < 8)
          return 0;
        memcpy(*(void **)(v5 + 640), __src, __n);
        if (*(_DWORD *)(a1 + 28))
          sub_23416C0A8((char *)(*(_QWORD *)(v5 + 640) + v8), *(int *)(v5 + 648) - (uint64_t)v8, (uint64_t)&unk_2342E23D8);
      }
      result = 1;
      *(_DWORD *)(v5 + 656) = 1;
      return result;
    case 19:
      if (!*(_DWORD *)(v5 + 656) || !*(_DWORD *)(v5 + 632))
        return 0;
      sub_23417B1A8(v5, v5 + 384, *(uint64_t **)(v5 + 640), *(int *)(v5 + 648));
      v12 = *(_DWORD *)(v5 + 648);
      if (v8 >= 1 && v12 >= v8 || (v8 = *(_DWORD *)(v5 + 648), v12))
      {
        memcpy(__src, (const void *)(*(_QWORD *)(v5 + 640) + v12 - v8), v8);
        v13 = *(int *)(v5 + 648);
      }
      else
      {
        v13 = 0;
      }
      *(_QWORD *)(*(_QWORD *)(v5 + 640) + v13 - 8) = bswap64(bswap64(*(_QWORD *)(*(_QWORD *)(v5 + 640) + v13 - 8)) + 1);
      goto LABEL_48;
    case 24:
      if (!*(_DWORD *)(v5 + 656) || !*(_DWORD *)(v5 + 632) || *(_DWORD *)(a1 + 28))
        return 0;
      if ((_DWORD)__n)
        memcpy((void *)(*(_QWORD *)(v5 + 640) + *(int *)(v5 + 648) - (int)__n), __src, (int)__n);
      sub_23417B1A8(v5, v5 + 384, *(uint64_t **)(v5 + 640), *(int *)(v5 + 648));
LABEL_48:
      result = 1;
      *(_DWORD *)(v5 + 636) = 1;
      return result;
    case 25:
      *(_DWORD *)__src = *(_DWORD *)(v5 + 648);
      return 1;
    default:
      if (a2)
        return result;
      *(_QWORD *)(v5 + 632) = 0;
      *(_DWORD *)(v5 + 648) = *(_DWORD *)(*(_QWORD *)a1 + 12);
      *(_QWORD *)(v5 + 640) = a1 + 52;
      *(_QWORD *)(v5 + 652) = 0xFFFFFFFFLL;
      return 1;
  }
}

double sub_2341865D8()
{
  double result;

  *(_OWORD *)&dword_256159A30 = 0u;
  unk_256159A50 = 0u;
  qword_256159A28 = 0x10000001A2;
  dword_256159A30 = 16;
  *(_QWORD *)&result = 0x100000108;
  qword_256159A38 = 0x100000108;
  qword_256159A40 = (uint64_t)sub_234185EAC;
  unk_256159A48 = sub_234186628;
  return result;
}

uint64_t sub_234186628(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(*a1 + 4);
  v5 = a4 - v4;
  if (a4 >= v4)
  {
    v8 = 0;
    v9 = a1[2];
    do
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 248))(a3 + v8, a2 + v8, v9);
      v8 += v4;
    }
    while (v8 <= v5);
  }
  return 1;
}

double sub_234186694()
{
  double result;

  *(_OWORD *)&dword_256159A68 = 0u;
  unk_256159A88 = 0u;
  qword_256159A60 = 0x10000001A6;
  dword_256159A68 = 24;
  *(_QWORD *)&result = 0x100000108;
  qword_256159A70 = 0x100000108;
  qword_256159A78 = (uint64_t)sub_234185EAC;
  unk_256159A80 = sub_234186628;
  return result;
}

double sub_2341866E4()
{
  double result;

  *(_OWORD *)&dword_256159AA0 = 0u;
  unk_256159AC0 = 0u;
  qword_256159A98 = 0x10000001AALL;
  dword_256159AA0 = 32;
  *(_QWORD *)&result = 0x100000108;
  qword_256159AA8 = 0x100000108;
  qword_256159AB0 = (uint64_t)sub_234185EAC;
  unk_256159AB8 = sub_234186628;
  return result;
}

uint64_t sub_234186734(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  unint64_t v6;

  v6 = 0;
  result = sub_2341867EC(a1 + 8, &v6, a2, a3, a4);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 576) = v6;
    return 1;
  }
  return result;
}

uint64_t sub_234186788(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, unint64_t a5, uint64_t *a6, unint64_t a7, char *a8, unint64_t a9, char *a10, unint64_t a11, int8x16_t *a12, uint64_t a13)
{
  return sub_2341868C0(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(unsigned __int8 *)(a1 + 576));
}

uint64_t sub_2341867BC(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, char *a7, unint64_t a8, int8x16_t *a9, uint64_t a10)
{
  return sub_234186AD8(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, *(unsigned __int8 *)(a1 + 576));
}

uint64_t sub_2341867EC(uint64_t a1, unint64_t *a2, _OWORD *a3, uint64_t a4, unint64_t a5)
{
  int v7;
  __int16 v8;
  unint64_t v9;

  if ((a4 & 0x1FFFFFFFFFFFFFF7) != 0x10 && (a4 & 0x1FFFFFFFFFFFFFFFLL) != 0x20)
  {
    v7 = 102;
    v8 = 902;
LABEL_9:
    sub_2341579B4(30, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aes.c", v8);
    return 0;
  }
  if (a5)
    v9 = a5;
  else
    v9 = 16;
  if (v9 >= 0x11)
  {
    v7 = 116;
    v8 = 911;
    goto LABEL_9;
  }
  sub_23415F4C0(a3, 8 * a4, a1);
  sub_23416E414(a1 + 248, a1, (uint64_t (*)(unint64_t *, unint64_t *, uint64_t))sub_23415F318);
  *(_QWORD *)(a1 + 536) = sub_2341600D0;
  *a2 = v9;
  return 1;
}

uint64_t sub_2341868C0(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, unint64_t a5, uint64_t *a6, unint64_t a7, char *a8, unint64_t a9, char *a10, unint64_t a11, int8x16_t *a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14;
  int v15;
  __int16 v16;
  int8x16_t v24;
  uint64_t result;
  void (*v26)(char *, int8x16_t *, uint64_t, uint64_t, uint64_t, __n128);
  int8x16_t v27;
  void (*v28)(char *, int8x16_t *, uint64_t, uint64_t, uint64_t, __n128);
  int8x16_t v29[5];
  _OWORD v30[19];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v14 = a14 + a11;
  if (__CFADD__(a14, a11))
  {
    v15 = 117;
    v16 = 953;
LABEL_13:
    sub_2341579B4(30, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aes.c", v16);
    return 0;
  }
  if (v14 > a5)
  {
    v15 = 103;
    v16 = 957;
    goto LABEL_13;
  }
  if (!a7)
  {
    v15 = 111;
    v16 = 961;
    goto LABEL_13;
  }
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  memcpy(v30, (const void *)(a1 + 248), 0x120uLL);
  sub_23417B1A8((uint64_t)v29, a1, a6, a7);
  if (!a13 || (result = sub_23417B2E4(v29, a12, a13), (_DWORD)result))
  {
    v26 = *(void (**)(char *, int8x16_t *, uint64_t, uint64_t, uint64_t, __n128))(a1 + 536);
    if (v26)
    {
      result = sub_23417B8C4((uint64_t)v29, a1, a8, a2, a9, v26, v24);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      result = sub_23417B3F0(v29, a1, a8, a2, a9, v24);
      if (!(_DWORD)result)
        return result;
    }
    if (a11)
    {
      v28 = *(void (**)(char *, int8x16_t *, uint64_t, uint64_t, uint64_t, __n128))(a1 + 536);
      if (v28)
      {
        result = sub_23417B8C4((uint64_t)v29, a1, a10, a3, a11, v28, v27);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        result = sub_23417B3F0(v29, a1, a10, a3, a11, v27);
        if (!(_DWORD)result)
          return result;
      }
    }
    sub_23417BD70(v29, &a3->i8[a11], a14);
    *a4 = v14;
    return 1;
  }
  return result;
}

uint64_t sub_234186AD8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, char *a7, unint64_t a8, int8x16_t *a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;
  int8x16_t v20;
  void (*v21)(int8x16_t *, _BYTE *, uint64_t, uint64_t, uint64_t, __n128);
  int v22;
  __int16 v23;
  int8x16_t v24[5];
  _OWORD v25[19];
  char v26[16];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    v22 = 111;
    v23 = 1032;
LABEL_9:
    sub_2341579B4(30, 0, v22, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aes.c", v23);
    return 0;
  }
  if (a8 != a11)
  {
    v22 = 101;
    v23 = 1037;
    goto LABEL_9;
  }
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  memcpy(v25, (const void *)(a1 + 248), 0x120uLL);
  sub_23417B1A8((uint64_t)v24, a1, a3, a4);
  result = sub_23417B2E4(v24, a9, a10);
  if (!(_DWORD)result)
    return result;
  v21 = *(void (**)(int8x16_t *, _BYTE *, uint64_t, uint64_t, uint64_t, __n128))(a1 + 536);
  if (v21)
  {
    result = sub_23417BAC8((uint64_t)v24, a1, a5, a2, a6, v21);
    if (!(_DWORD)result)
      return result;
    goto LABEL_12;
  }
  result = sub_23417B65C(v24, a1, a5, a2, a6, v20);
  if ((_DWORD)result)
  {
LABEL_12:
    sub_23417BD70(v24, v26, a8);
    if (!sub_23418E484(v26, a7, a8))
      return 1;
    v22 = 101;
    v23 = 1065;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_234186CB0(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  if (a4)
  {
    if (a4 <= 0xB)
    {
      sub_2341579B4(30, 0, 103, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aes.c", 1138);
      return 0;
    }
    v6 = a4 - 12;
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
  result = sub_2341867EC(a1 + 8, &v7, a2, a3, v6);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 576) = v7 + 12;
    return 1;
  }
  return result;
}

uint64_t sub_234186D40(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, char *a8, unint64_t a9, char *a10, unint64_t a11, int8x16_t *a12, uint64_t a13)
{
  int v13;
  __int16 v14;
  uint64_t result;
  __int8 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a7)
  {
    v13 = 111;
    v14 = 1160;
LABEL_5:
    sub_2341579B4(30, 0, v13, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aes.c", v14);
    return 0;
  }
  if (a5 <= 0xB)
  {
    v13 = 103;
    v14 = 1166;
    goto LABEL_5;
  }
  sub_23416C0A8((char *)&v23, 0xCuLL, (uint64_t)&unk_2342E23D8);
  result = sub_2341868C0(a1 + 8, a2, a3, a4, a5 - 12, &v23, 0xCuLL, a8, a9, a10, a11, a12, a13, *(unsigned __int8 *)(a1 + 576) - 12);
  if ((_DWORD)result)
  {
    v22 = &a3->i8[*a4];
    *(_QWORD *)v22 = v23;
    *((_DWORD *)v22 + 2) = v24;
    *a4 += 12;
    return 1;
  }
  return result;
}

uint64_t sub_234186E9C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, unint64_t a6, char *a7, unint64_t a8, int8x16_t *a9, uint64_t a10)
{
  int v10;
  __int16 v11;

  if (a4)
  {
    v10 = 111;
    v11 = 1201;
LABEL_5:
    sub_2341579B4(30, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aes.c", v11);
    return 0;
  }
  if (a8 <= 0xB)
  {
    v10 = 101;
    v11 = 1206;
    goto LABEL_5;
  }
  return sub_234186AD8(a1 + 8, a2, (uint64_t *)&a7[a8 - 12], 0xCuLL, a5, a6, a7, a8 - 12, a9, a10, *(unsigned __int8 *)(a1 + 576) - 12);
}

uint64_t sub_234186F2C(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  unint64_t v6;

  *(_QWORD *)(a1 + 552) = 0;
  v6 = 0;
  result = sub_2341867EC(a1 + 8, &v6, a2, a3, a4);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 576) = v6;
    return 1;
  }
  return result;
}

uint64_t sub_234186F80(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, unint64_t a5, uint64_t *a6, uint64_t a7, char *a8, unint64_t a9, char *a10, unint64_t a11, int8x16_t *a12, uint64_t a13)
{
  unint64_t v13;
  unint64_t v14;
  int v15;
  __int16 v16;

  if (a7 == 12)
  {
    v13 = *(uint64_t *)((char *)a6 + 4);
    if (v13 != -1)
    {
      v14 = bswap64(v13);
      if (v14 >= *(_QWORD *)(a1 + 552))
      {
        *(_QWORD *)(a1 + 552) = v14 + 1;
        return sub_2341868C0(a1 + 8, a2, a3, a4, a5, a6, 0xCuLL, a8, a9, a10, a11, a12, a13, *(unsigned __int8 *)(a1 + 576));
      }
    }
    v15 = 125;
    v16 = 1300;
  }
  else
  {
    v15 = 121;
    v16 = 1292;
  }
  sub_2341579B4(30, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aes.c", v16);
  return 0;
}

uint64_t sub_234187030(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  unint64_t v6;

  *(_QWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 568) = 1;
  v6 = 0;
  result = sub_2341867EC(a1 + 8, &v6, a2, a3, a4);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 576) = v6;
    return 1;
  }
  return result;
}

uint64_t sub_23418708C(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, char *a8, unint64_t a9, char *a10, unint64_t a11, int8x16_t *a12, uint64_t a13)
{
  unint64_t v13;
  unint64_t v14;
  int v15;
  __int16 v16;
  unint64_t v17;

  if (a7 == 12)
  {
    v13 = bswap64(*(_QWORD *)(a6 + 4));
    if (*(_BYTE *)(a1 + 568))
    {
      *(_QWORD *)(a1 + 560) = v13;
      *(_BYTE *)(a1 + 568) = 0;
      v14 = v13;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 560);
    }
    v17 = v14 ^ v13;
    if (v17 != -1 && v17 >= *(_QWORD *)(a1 + 552))
    {
      *(_QWORD *)(a1 + 552) = v17 + 1;
      return sub_2341868C0(a1 + 8, a2, a3, a4, a5, (uint64_t *)a6, 0xCuLL, a8, a9, a10, a11, a12, a13, *(unsigned __int8 *)(a1 + 576));
    }
    v15 = 125;
    v16 = 1407;
  }
  else
  {
    v15 = 121;
    v16 = 1387;
  }
  sub_2341579B4(30, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aes.c", v16);
  return 0;
}

uint64_t sub_23418715C(unsigned __int8 **a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_2341874F0(a1, a2, a3, a4, 4);
}

uint64_t sub_234187168(uint64_t a1, _BYTE *a2, void *a3, _QWORD *a4, size_t a5, void *__src, size_t __n, char *a8, unint64_t a9, uint64_t a10, uint64_t a11, char *a12, unint64_t a13)
{
  unsigned int v13;
  size_t v16;
  int v17;
  __int16 v18;
  int8x16_t v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a1 + 276);
  if (v13 > 7 || a9 >> (8 * v13) == 0)
  {
    v16 = *(unsigned __int8 *)(a1 + 576);
    if (v16 <= a5)
    {
      if (*(unsigned __int8 *)(*(_QWORD *)a1 + 1) == __n)
      {
        memset(v24, 0, sizeof(v24));
        if (sub_2341875D0(a1 + 256, (uint64_t)v24, a1 + 8, __src, __n, a12, a13, a9)
          && sub_234187878(a1 + 256, v24, a1 + 8, a3, v16, a8, a9))
        {
          sub_2341879F0(a1 + 256, (uint64_t)v24, a1 + 8, a2, (uint64_t)a8, a9);
          *a4 = *(unsigned __int8 *)(a1 + 576);
          return 1;
        }
        v17 = 117;
        v18 = 341;
      }
      else
      {
        v17 = 111;
        v18 = 334;
      }
    }
    else
    {
      v17 = 103;
      v18 = 329;
    }
  }
  else
  {
    v17 = 117;
    v18 = 324;
  }
  sub_2341579B4(30, 0, v17, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aesccm.c", v18);
  return 0;
}

uint64_t sub_234187320(uint64_t a1, char *a2, void *__src, size_t __n, uint64_t a5, unint64_t a6, char *a7, size_t a8, char *a9, unint64_t a10)
{
  unsigned int v10;
  int v18;
  __int16 v19;
  char v21[16];
  int8x16_t v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(a1 + 276);
  if (v10 > 7 || a6 >> (8 * v10) == 0)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + 1) == __n)
    {
      if (*(unsigned __int8 *)(a1 + 576) == a8)
      {
        memset(v22, 0, sizeof(v22));
        if (sub_2341875D0(a1 + 256, (uint64_t)v22, a1 + 8, __src, __n, a9, a10, a6)
          && (sub_2341879F0(a1 + 256, (uint64_t)v22, a1 + 8, a2, a5, a6),
              sub_234187878(a1 + 256, v22, a1 + 8, v21, a8, a2, a6)))
        {
          if (!sub_23418E484(v21, a7, *(unsigned __int8 *)(a1 + 576)))
            return 1;
          v18 = 101;
          v19 = 383;
        }
        else
        {
          v18 = 117;
          v19 = 378;
        }
      }
      else
      {
        v18 = 101;
        v19 = 369;
      }
    }
    else
    {
      v18 = 111;
      v19 = 364;
    }
  }
  else
  {
    v18 = 117;
    v19 = 359;
  }
  sub_2341579B4(30, 0, v18, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aesccm.c", v19);
  return 0;
}

uint64_t sub_2341874F0(unsigned __int8 **a1, _OWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v7;
  __int16 v8;

  if (**a1 == a3)
  {
    if (!a4 || a5 == a4)
    {
      sub_23415F4C0(a2, 8 * a3, (uint64_t)(a1 + 1));
      *((_BYTE *)a1 + 576) = a5;
      if ((a5 & 1) == 0)
      {
        a1[32] = (unsigned __int8 *)sub_23415F318;
        a1[33] = (unsigned __int8 *)sub_2341600D0;
        *((_DWORD *)a1 + 68) = a5;
        *((_DWORD *)a1 + 69) = 2;
        return 1;
      }
      v7 = 68;
      v8 = 306;
    }
    else
    {
      v7 = 116;
      v8 = 296;
    }
  }
  else
  {
    v7 = 102;
    v8 = 287;
  }
  sub_2341579B4(30, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/e_aesccm.c", v8);
  return 0;
}

uint64_t sub_2341875D0(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, size_t __n, char *a6, unint64_t a7, unint64_t a8)
{
  unint64_t v8;
  _BOOL4 v10;
  unint64_t v13;
  void (*v17)(uint64_t, uint64_t, uint64_t, void *);
  int v18;
  char v19;
  uint64_t i;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64x2_t v25;
  int32x4_t v26;
  int16x8_t v27;
  char v28;
  unint64_t v29;
  uint64_t result;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;

  v8 = *(unsigned int *)(a1 + 20);
  v10 = v8 > 7 || a8 >> (8 * v8) == 0;
  if (15 - (_DWORD)v8 != __n || !v10)
    return 0;
  v13 = a7;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))a1;
  v18 = *(_DWORD *)(a1 + 16);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v19 = (((4 * v18) & 0xF8) - 8) | (v8 - 1);
  if (a7)
    v19 |= 0x40u;
  *(_BYTE *)a2 = v19;
  if (__n)
    memcpy((void *)(a2 + 1), __src, __n);
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
      *(_BYTE *)(a2 + (15 - i)) = a8 >> (8 * i);
  }
  v17(a2, a2 + 16, a3, __src);
  if (v13)
  {
    if (v13 >> 8 > 0xFE)
    {
      *(_BYTE *)(a2 + 16) = ~*(_BYTE *)(a2 + 16);
      v24 = *(_BYTE *)(a2 + 17);
      if (HIDWORD(v13))
      {
        *(_BYTE *)(a2 + 17) = ~v24;
        v25 = (uint64x2_t)vdupq_n_s64(v13);
        v26 = (int32x4_t)vshlq_u64(v25, (uint64x2_t)xmmword_2342E20C0);
        v27 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v25, (uint64x2_t)xmmword_2342E20D0), v26);
        v26.i32[0] = *(_DWORD *)(a2 + 18);
        *(int8x8_t *)v27.i8 = veor_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v26.i8), (int8x8_t)vmovn_s32((int32x4_t)v27));
        *(_DWORD *)(a2 + 18) = vmovn_s16(v27).u32[0];
        *(_BYTE *)(a2 + 22) ^= BYTE3(v13);
        *(_BYTE *)(a2 + 23) ^= BYTE2(v13);
        *(_BYTE *)(a2 + 24) ^= BYTE1(v13);
        v21 = (_BYTE *)(a2 + 25);
        v22 = 10;
      }
      else
      {
        *(_BYTE *)(a2 + 17) = v24 ^ 0xFE;
        *(_BYTE *)(a2 + 18) ^= BYTE3(v13);
        *(_BYTE *)(a2 + 19) ^= BYTE2(v13);
        *(_BYTE *)(a2 + 20) ^= BYTE1(v13);
        v21 = (_BYTE *)(a2 + 21);
        v22 = 6;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 16) ^= BYTE1(v13);
      v21 = (_BYTE *)(a2 + 17);
      v22 = 2;
    }
    *v21 ^= v13;
    v23 = 1;
    while (v13)
    {
      do
      {
        v28 = *a6++;
        v29 = v13;
        *(_BYTE *)(a2 + 16 + v22) ^= v28;
        --v13;
        if (v22 > 0xE)
          break;
        ++v22;
      }
      while (v29 != 1);
      ((void (*)(uint64_t, uint64_t, uint64_t))v17)(a2 + 16, a2 + 16, a3);
      v22 = 0;
      ++v23;
      if (v29 == 1)
        goto LABEL_32;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t))v17)(a2 + 16, a2 + 16, a3);
    ++v23;
  }
  else
  {
    v23 = 1;
  }
LABEL_32:
  if (a8 > 0xFFFFFFFFFFFFFFF0)
    return 0;
  result = 0;
  v31 = ((a8 + 15) >> 3) | 1;
  v32 = __CFADD__(v23, v31);
  v33 = v23 + v31;
  if (!v32 && v33 <= 0x2000000000000000)
  {
    *(_BYTE *)a2 &= 7u;
    return 1;
  }
  return result;
}

uint64_t sub_234187878(uint64_t a1, int8x16_t *a2, uint64_t a3, void *a4, size_t a5, char *a6, unint64_t a7)
{
  unint64_t v7;
  void (*v14)(int8x16_t *, int8x16_t *, uint64_t);
  uint64_t v15;
  int8x16_t *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 16) != a5)
    return 0;
  v7 = a7;
  v14 = *(void (**)(int8x16_t *, int8x16_t *, uint64_t))a1;
  if (a7 >= 0x10)
  {
    do
    {
      v15 = a2[1].i64[1];
      a2[1].i64[0] ^= *(_QWORD *)a6;
      a2[1].i64[1] = *((_QWORD *)a6 + 1) ^ v15;
      v14(a2 + 1, a2 + 1, a3);
      a6 += 16;
      v7 -= 16;
    }
    while (v7 > 0xF);
  }
  if (v7)
  {
    v16 = a2 + 1;
    do
    {
      v17 = *a6++;
      v16->i8[0] ^= v17;
      v16 = (int8x16_t *)((char *)v16 + 1);
      --v7;
    }
    while (v7);
    v14(a2 + 1, a2 + 1, a3);
  }
  if (*(_DWORD *)(a1 + 20))
  {
    v18 = 0;
    v19 = 15;
    do
    {
      a2->i8[v19] = 0;
      ++v18;
      --v19;
    }
    while (v18 < *(unsigned int *)(a1 + 20));
  }
  v14(a2, &v23, a3);
  v21 = a2[1];
  v20 = a2 + 1;
  *v20 = veorq_s8(v23, v21);
  if (a5)
    memcpy(a4, v20, a5);
  return 1;
}

uint64_t sub_2341879F0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, _BYTE *, unint64_t, uint64_t, uint64_t);
  unsigned int v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 20))
  {
    v6 = 0;
    v7 = 15;
    do
    {
      *(_BYTE *)(a2 + v7) = 0;
      ++v6;
      --v7;
    }
    while (v6 < *(unsigned int *)(a1 + 20));
  }
  *(_BYTE *)(a2 + 15) = 1;
  v10 = 0;
  v8 = *(uint64_t (**)(char *, _BYTE *, unint64_t, uint64_t, uint64_t))(a1 + 8);
  if (v8)
    return sub_234160AA0(a5, a4, a6, a3, a2, v11, &v10, v8);
  else
    return sub_234160C58(a5, a4, a6, a3, a2, v11, &v10, *(uint64_t (**)(uint64_t, _QWORD *, uint64_t))a1);
}

uint64_t sub_234187ABC(unsigned __int8 **a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_2341874F0(a1, a2, a3, a4, 8);
}

uint64_t sub_234187AC4(unsigned __int8 **a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_2341874F0(a1, a2, a3, a4, 16);
}

double sub_234187ACC(uint64_t a1)
{
  _OWORD *v1;
  double result;

  v1 = *(_OWORD **)(a1 + 8);
  result = 0.0;
  *(_OWORD *)((char *)v1 + 76) = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  *v1 = xmmword_2342E2070;
  return result;
}

uint64_t (*sub_234187AF0(uint64_t a1, char *__src, size_t __n))(uint64_t, char *, uint64_t)
{
  return sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_234179B40, *(_QWORD *)(a1 + 8), (char *)(*(_QWORD *)(a1 + 8) + 24), (_DWORD *)(*(_QWORD *)(a1 + 8) + 88), (_DWORD *)(*(_QWORD *)(a1 + 8) + 20), (_DWORD *)(*(_QWORD *)(a1 + 8) + 16), __src, __n);
}

uint64_t sub_234187B18(uint64_t a1, _DWORD *a2)
{
  return sub_234179A58(a2, *(_QWORD *)(a1 + 8));
}

double sub_234187B28(uint64_t a1)
{
  _OWORD *v1;
  double result;

  v1 = *(_OWORD **)(a1 + 8);
  result = 0.0;
  *(_OWORD *)((char *)v1 + 76) = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  *v1 = xmmword_2342E2070;
  return result;
}

uint64_t (*sub_234187B4C(uint64_t a1, char *__src, size_t __n))(uint64_t, char *, uint64_t)
{
  return sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_23417A3EC, *(_QWORD *)(a1 + 8), (char *)(*(_QWORD *)(a1 + 8) + 24), (_DWORD *)(*(_QWORD *)(a1 + 8) + 88), (_DWORD *)(*(_QWORD *)(a1 + 8) + 20), (_DWORD *)(*(_QWORD *)(a1 + 8) + 16), __src, __n);
}

uint64_t sub_234187B74(uint64_t a1, _DWORD *a2)
{
  return sub_23417A304(a2, *(_QWORD *)(a1 + 8));
}

double sub_234187B84(uint64_t a1)
{
  _OWORD *v1;
  double result;

  v1 = *(_OWORD **)(a1 + 8);
  result = 0.0;
  v1[4] = 0u;
  v1[5] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  *v1 = xmmword_2342E2070;
  v1[1] = 0u;
  *((_DWORD *)v1 + 4) = -1009589776;
  return result;
}

uint64_t (*sub_234187BB0(uint64_t a1, char *__src, size_t __n))(uint64_t, char *, uint64_t)
{
  return sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_2341816D8, *(_QWORD *)(a1 + 8), (char *)(*(_QWORD *)(a1 + 8) + 28), (_DWORD *)(*(_QWORD *)(a1 + 8) + 92), (_DWORD *)(*(_QWORD *)(a1 + 8) + 24), (_DWORD *)(*(_QWORD *)(a1 + 8) + 20), __src, __n);
}

uint64_t sub_234187BD8(uint64_t a1, _DWORD *a2)
{
  return sub_2341815FC(a2, *(_QWORD *)(a1 + 8));
}

double sub_234187BE8(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  result = 3.15644116e-46;
  *(_OWORD *)v1 = xmmword_2342E1FB0;
  *(_OWORD *)(v1 + 16) = xmmword_2342E1FC0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_DWORD *)(v1 + 108) = 28;
  return result;
}

uint64_t (*sub_234187C1C(uint64_t a1, char *__src, size_t __n))(uint64_t, char *, uint64_t)
{
  return sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_234182B2C, *(_QWORD *)(a1 + 8), (char *)(*(_QWORD *)(a1 + 8) + 40), (_DWORD *)(*(_QWORD *)(a1 + 8) + 104), (_DWORD *)(*(_QWORD *)(a1 + 8) + 36), (_DWORD *)(*(_QWORD *)(a1 + 8) + 32), __src, __n);
}

uint64_t sub_234187C44(uint64_t a1, _DWORD *a2)
{
  return sub_234183748(a2, 0x1CuLL, *(_QWORD *)(a1 + 8));
}

double sub_234187C54(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  result = -1.56712499e-22;
  *(_OWORD *)v1 = xmmword_2342E1FD0;
  *(_OWORD *)(v1 + 16) = xmmword_2342E1FE0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_DWORD *)(v1 + 108) = 32;
  return result;
}

uint64_t (*sub_234187C88(uint64_t a1, char *__src, size_t __n))(uint64_t, char *, uint64_t)
{
  return sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_234182B2C, *(_QWORD *)(a1 + 8), (char *)(*(_QWORD *)(a1 + 8) + 40), (_DWORD *)(*(_QWORD *)(a1 + 8) + 104), (_DWORD *)(*(_QWORD *)(a1 + 8) + 36), (_DWORD *)(*(_QWORD *)(a1 + 8) + 32), __src, __n);
}

uint64_t sub_234187CB0(uint64_t a1, _DWORD *a2)
{
  return sub_234183748(a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 108), *(_QWORD *)(a1 + 8));
}

double sub_234187CC4(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v1 = xmmword_2342E1FF0;
  *(_OWORD *)(v1 + 16) = xmmword_2342E2000;
  *(_OWORD *)(v1 + 32) = xmmword_2342E2010;
  *(_OWORD *)(v1 + 48) = xmmword_2342E2020;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)&result = 0x3000000000;
  *(_QWORD *)(v1 + 208) = 0x3000000000;
  return result;
}

uint64_t sub_234187D04(uint64_t a1, unint64_t *a2, size_t a3)
{
  return sub_2341725B4(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_234187D0C(uint64_t a1, _QWORD *a2)
{
  return sub_2341839C0(a2, 0x30uLL, *(int8x16_t **)(a1 + 8));
}

double sub_234187D1C(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v1 = xmmword_2342E2030;
  *(_OWORD *)(v1 + 16) = xmmword_2342E2040;
  *(_OWORD *)(v1 + 32) = xmmword_2342E2050;
  *(_OWORD *)(v1 + 48) = xmmword_2342E2060;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)&result = 0x4000000000;
  *(_QWORD *)(v1 + 208) = 0x4000000000;
  return result;
}

uint64_t sub_234187D5C(uint64_t a1, unint64_t *a2, size_t a3)
{
  return sub_2341725B4(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_234187D64(uint64_t a1, _QWORD *a2)
{
  return sub_2341839C0(a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 212), *(int8x16_t **)(a1 + 8));
}

double sub_234187D78(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v1 = xmmword_2342E2080;
  *(_OWORD *)(v1 + 16) = xmmword_2342E2090;
  *(_OWORD *)(v1 + 32) = xmmword_2342E20A0;
  *(_OWORD *)(v1 + 48) = xmmword_2342E20B0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)&result = 0x2000000000;
  *(_QWORD *)(v1 + 208) = 0x2000000000;
  return result;
}

uint64_t sub_234187DB8(uint64_t a1, unint64_t *a2, size_t a3)
{
  return sub_2341725B4(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_234187DC0(uint64_t a1, _QWORD *a2)
{
  return sub_2341839C0(a2, 0x20uLL, *(int8x16_t **)(a1 + 8));
}

double sub_234187DD0(uint64_t a1)
{
  _OWORD *v1;
  double result;

  v1 = *(_OWORD **)(a1 + 8);
  result = 0.0;
  *(_OWORD *)((char *)v1 + 76) = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  *v1 = xmmword_2342E2070;
  *(_OWORD *)((char *)v1 + 108) = 0u;
  *(_OWORD *)((char *)v1 + 124) = 0u;
  *(_OWORD *)((char *)v1 + 140) = 0u;
  *(_OWORD *)((char *)v1 + 156) = 0u;
  *(_OWORD *)((char *)v1 + 172) = 0u;
  *(_OWORD *)((char *)v1 + 92) = xmmword_2342E2070;
  *((_DWORD *)v1 + 27) = -1009589776;
  return result;
}

uint64_t (*sub_234187E18(uint64_t a1, char *__src, size_t __n))(uint64_t, char *, uint64_t)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_23417A3EC, v5, (char *)(v5 + 24), (_DWORD *)(v5 + 88), (_DWORD *)(v5 + 20), (_DWORD *)(v5 + 16), __src, __n);
  return sub_23417A0E4((uint64_t (*)(uint64_t, char *, uint64_t))sub_2341816D8, v5 + 92, (char *)(v5 + 120), (_DWORD *)(v5 + 184), (_DWORD *)(v5 + 116), (_DWORD *)(v5 + 112), __src, __n);
}

uint64_t sub_234187E90(uint64_t a1, _DWORD *a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  sub_23417A304(a2, v3);
  return sub_2341815FC(a2 + 4, v3 + 92);
}

void sub_234187EC4()
{
  qword_256159FE0 = (uint64_t)sub_23415961C;
  *(_QWORD *)algn_256159FE8 = sub_23415966C;
}

uint64_t sub_234187EE4(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v2 = (unint64_t *)(a1 + 160);
  *(_DWORD *)(a1 + 528) = 1;
  v3 = (unint64_t *)(a1 + 360);
  sub_234177028(a1, (unint64_t *)(a1 + 360), (unint64_t *)(a1 + 160));
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  sub_23416393C(v3, v3, v2, *(uint64_t **)(a1 + 320), (uint64_t *)&v5, *(int *)(a1 + 328));
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  return sub_23416393C(v3, v3, v2, *(uint64_t **)(a1 + 320), (uint64_t *)&v5, *(int *)(a1 + 328));
}

uint64_t sub_234187F84(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _OWORD v16[4];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v8 = (uint64_t)(a2 + 18);
  v9 = *(_DWORD *)(a1 + 328);
  if (v9 < 1)
  {
    v14 = 1;
  }
  else
  {
    v10 = 0;
    v11 = (uint64_t *)v8;
    v12 = *(unsigned int *)(a1 + 328);
    do
    {
      v13 = *v11++;
      v10 |= v13;
      --v12;
    }
    while (v12);
    v14 = v10 == 0;
  }
  if (v14)
  {
    sub_2341579B4(15, 0, 119, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_montgomery.c", 150);
    return 0;
  }
  else
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    sub_234165F10((unint64_t *)v16, v8, v9, a1 + 296);
    sub_234165E1C((unint64_t *)v18, (unint64_t *)v16, (unint64_t *)v16, *(int *)(a1 + 328), a1 + 296);
    if (a3)
      sub_234165E1C(a3, a2, (unint64_t *)v18, *(int *)(a1 + 328), a1 + 296);
    if (a4)
    {
      sub_234165E1C((unint64_t *)v18, (unint64_t *)v18, (unint64_t *)v16, *(int *)(a1 + 328), a1 + 296);
      sub_234165E1C(a4, a2 + 9, (unint64_t *)v18, *(int *)(a1 + 328), a1 + 296);
    }
    return 1;
  }
}

uint64_t sub_2341880C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  _OWORD v23[4];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  if (!a4)
    return 1;
  v6 = a2;
  *(_OWORD *)a2 = *(_OWORD *)(a3 + 144);
  v8 = *(_OWORD *)(a3 + 160);
  v9 = *(_OWORD *)(a3 + 176);
  v10 = *(_OWORD *)(a3 + 192);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 208);
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)(a2 + 16) = v8;
  v11 = a4 - 1;
  if (a4 != 1)
  {
    v12 = (unint64_t *)(a3 + 360);
    v13 = a4 - 1;
    do
    {
      v14 = a2 + 144;
      sub_234165E1C((unint64_t *)(a2 + 144), (unint64_t *)a2, v12, *(int *)(a1 + 328), a1 + 296);
      v12 += 27;
      a2 = v14;
      --v13;
    }
    while (v13);
  }
  v15 = *(_DWORD *)(a1 + 328);
  if (v15 < 1)
    goto LABEL_16;
  v16 = 0;
  v17 = (uint64_t *)(v6 + 144 * v11);
  v18 = *(unsigned int *)(a1 + 328);
  do
  {
    v19 = *v17++;
    v16 |= v19;
    --v18;
  }
  while (v18);
  if (v16)
  {
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    sub_234165F10((unint64_t *)&v30, v6 + 144 * v11, v15, a1 + 296);
    v20 = (unint64_t *)(a3 + 216 * a4 - 216);
    v21 = (unint64_t *)(v6 + 144 * a4 - 144);
    do
    {
      v29 = 0;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0;
      memset(v23, 0, sizeof(v23));
      if (v11)
      {
        sub_234165E1C((unint64_t *)&v25, (unint64_t *)&v30, v21 - 18, *(int *)(a1 + 328), a1 + 296);
        sub_234165E1C((unint64_t *)&v30, (unint64_t *)&v30, v20 + 18, *(int *)(a1 + 328), a1 + 296);
      }
      else
      {
        v27 = v32;
        v28 = v33;
        v29 = v34;
        v25 = v30;
        v26 = v31;
      }
      sub_234165E1C((unint64_t *)v23, (unint64_t *)&v25, (unint64_t *)&v25, *(int *)(a1 + 328), a1 + 296);
      sub_234165E1C(v21, v20, (unint64_t *)v23, *(int *)(a1 + 328), a1 + 296);
      sub_234165E1C(v21 + 9, v20 + 9, (unint64_t *)v23, *(int *)(a1 + 328), a1 + 296);
      sub_234165E1C(v21 + 9, v21 + 9, (unint64_t *)&v25, *(int *)(a1 + 328), a1 + 296);
      v20 -= 27;
      v21 -= 18;
      --v11;
    }
    while (v11 < a4);
    return 1;
  }
  else
  {
LABEL_16:
    sub_2341579B4(15, 0, 119, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/ec_montgomery.c", 189);
    return 0;
  }
}

uint64_t sub_2341882FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD v13[4];
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  if (!*(_DWORD *)(a1 + 536))
    return sub_234177EA4(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 328);
  if ((_DWORD)v6 != *(_DWORD *)(a1 + 264))
    return sub_234177EA4(a1, a2, a3);
  if ((int)v6 < 1)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = (unint64_t *)(a2 + 144);
  do
  {
    v8 |= *(_QWORD *)(a2 + v7 + 144);
    v7 += 8;
  }
  while (8 * v6 != v7);
  if (!v8)
    return 0;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_234165E1C((unint64_t *)v15, v9, (unint64_t *)(a2 + 144), (int)v6, a1 + 296);
  v10 = *(int *)(a1 + 328);
  if ((_DWORD)v10)
    __memcpy_chk();
  sub_234165E1C((unint64_t *)v17, (unint64_t *)v17, (unint64_t *)v15, v10, a1 + 296);
  sub_234165D40((unint64_t *)v13, *(int *)(a1 + 328), a2, *(int *)(a1 + 328), a1 + 296);
  if (sub_23418E484((char *)v17, (char *)v13, 8 * *(int *)(a1 + 328)))
  {
    if (sub_2341617E0(v17, (uint64_t *)a3, *(uint64_t **)(a1 + 256), *(int *)(a1 + 328)))
      return 0;
    v11 = *(int *)(a1 + 328);
    if ((sub_234162948((uint64_t *)v17, v11, *(uint64_t **)(a1 + 320), v11) & 0x80000000) == 0)
      return 0;
    sub_234165E1C((unint64_t *)v17, (unint64_t *)v17, (unint64_t *)v15, v11, a1 + 296);
    if (sub_23418E484((char *)v17, (char *)v13, 8 * *(int *)(a1 + 328)))
      return 0;
  }
  return 1;
}

uint64_t sub_2341884BC(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  _OWORD v32[7];
  int8x16_t v33[2];
  int8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int8x16_t v44[2];
  int8x16_t v45[2];
  int8x16_t v46[2];
  int8x16_t v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a1 + 328);
  if ((int)v7 < 1)
  {
    v11 = 1;
  }
  else
  {
    v8 = 0;
    v9 = a2 + 18;
    do
    {
      v10 = *v9++;
      v8 |= v10;
      --v7;
    }
    while (v7);
    v11 = v8 == 0;
  }
  if (v11)
  {
    sub_2341579B4(15, 0, 119, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/p224-64.c", 868);
    return 0;
  }
  else
  {
    v13 = a2[19];
    *((_QWORD *)&v14 + 1) = v13;
    *(_QWORD *)&v14 = a2[18];
    v34.i64[0] = v14 & 0xFFFFFFFFFFFFFFLL;
    v34.i64[1] = (v14 >> 56) & 0xFFFFFFFFFFFFFFLL;
    *((_QWORD *)&v14 + 1) = a2[20];
    *(_QWORD *)&v14 = v13;
    v15 = v14 >> 48;
    v16 = *((_OWORD *)a2 + 10);
    memset(v33, 0, sizeof(v33));
    memset(v32, 0, sizeof(v32));
    v35 = v15 & 0xFFFFFFFFFFFFFFLL;
    v36 = (v16 >> 40) & 0xFFFFFFFFFFFFFFLL;
    v47 = 0u;
    v48 = 0u;
    memset(v46, 0, sizeof(v46));
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    sub_234189748((uint64_t)&v37, (unint64_t *)&v34);
    sub_234189800(&v47, (unint64_t *)&v37);
    sub_234189934((uint64_t)&v37, (unint64_t *)&v34, (unint64_t *)&v47);
    sub_234189800(&v47, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)&v47);
    sub_234189800(&v47, (unint64_t *)&v37);
    sub_234189934((uint64_t)&v37, (unint64_t *)&v34, (unint64_t *)&v47);
    sub_234189800(&v47, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)&v47);
    sub_234189800(v46, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)v46);
    sub_234189800(v46, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)v46);
    sub_234189800(v46, (unint64_t *)&v37);
    sub_234189934((uint64_t)&v37, (unint64_t *)v46, (unint64_t *)&v47);
    sub_234189800(&v47, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)&v47);
    sub_234189800(v46, (unint64_t *)&v37);
    v17 = 5;
    do
    {
      sub_234189748((uint64_t)&v37, (unint64_t *)v46);
      sub_234189800(v46, (unint64_t *)&v37);
      --v17;
    }
    while (v17);
    memset(v45, 0, sizeof(v45));
    sub_234189934((uint64_t)&v37, (unint64_t *)v46, (unint64_t *)&v47);
    sub_234189800(v46, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)v46);
    sub_234189800(v45, (unint64_t *)&v37);
    v18 = 11;
    do
    {
      sub_234189748((uint64_t)&v37, (unint64_t *)v45);
      sub_234189800(v45, (unint64_t *)&v37);
      --v18;
    }
    while (v18);
    sub_234189934((uint64_t)&v37, (unint64_t *)v45, (unint64_t *)v46);
    sub_234189800(v46, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)v46);
    sub_234189800(v45, (unint64_t *)&v37);
    v19 = 23;
    do
    {
      sub_234189748((uint64_t)&v37, (unint64_t *)v45);
      sub_234189800(v45, (unint64_t *)&v37);
      --v19;
    }
    while (v19);
    memset(v44, 0, sizeof(v44));
    sub_234189934((uint64_t)&v37, (unint64_t *)v45, (unint64_t *)v46);
    sub_234189800(v45, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)v45);
    sub_234189800(v44, (unint64_t *)&v37);
    v20 = 47;
    do
    {
      sub_234189748((uint64_t)&v37, (unint64_t *)v44);
      sub_234189800(v44, (unint64_t *)&v37);
      --v20;
    }
    while (v20);
    sub_234189934((uint64_t)&v37, (unint64_t *)v45, (unint64_t *)v44);
    sub_234189800(v45, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)v45);
    sub_234189800(v44, (unint64_t *)&v37);
    v21 = 23;
    do
    {
      sub_234189748((uint64_t)&v37, (unint64_t *)v44);
      sub_234189800(v44, (unint64_t *)&v37);
      --v21;
    }
    while (v21);
    sub_234189934((uint64_t)&v37, (unint64_t *)v46, (unint64_t *)v44);
    sub_234189800(v46, (unint64_t *)&v37);
    v22 = 6;
    do
    {
      sub_234189748((uint64_t)&v37, (unint64_t *)v46);
      sub_234189800(v46, (unint64_t *)&v37);
      --v22;
    }
    while (v22);
    sub_234189934((uint64_t)&v37, (unint64_t *)v46, (unint64_t *)&v47);
    sub_234189800(&v47, (unint64_t *)&v37);
    sub_234189748((uint64_t)&v37, (unint64_t *)&v47);
    sub_234189800(&v47, (unint64_t *)&v37);
    sub_234189934((uint64_t)&v37, (unint64_t *)&v47, (unint64_t *)&v34);
    sub_234189800(&v47, (unint64_t *)&v37);
    v23 = 97;
    do
    {
      sub_234189748((uint64_t)&v37, (unint64_t *)&v47);
      sub_234189800(&v47, (unint64_t *)&v37);
      --v23;
    }
    while (v23);
    sub_234189934((uint64_t)&v37, (unint64_t *)&v47, (unint64_t *)v45);
    sub_234189800(v33, (unint64_t *)&v37);
    sub_234189748((uint64_t)v32, (unint64_t *)v33);
    sub_234189800(&v34, (unint64_t *)v32);
    if (a3)
    {
      v24 = a2[1];
      *((_QWORD *)&v25 + 1) = v24;
      *(_QWORD *)&v25 = *a2;
      *(_QWORD *)&v37 = *a2 & 0xFFFFFFFFFFFFFFLL;
      *((_QWORD *)&v37 + 1) = (v25 >> 56) & 0xFFFFFFFFFFFFFFLL;
      *((_QWORD *)&v25 + 1) = a2[2];
      *(_QWORD *)&v25 = v24;
      v26 = v25 >> 48;
      v27 = *((_OWORD *)a2 + 1);
      v47 = 0u;
      v48 = 0u;
      *(_QWORD *)&v38 = v26 & 0xFFFFFFFFFFFFFFLL;
      *((_QWORD *)&v38 + 1) = (v27 >> 40) & 0xFFFFFFFFFFFFFFLL;
      sub_234189934((uint64_t)v32, (unint64_t *)&v37, (unint64_t *)&v34);
      sub_234189800(&v47, (unint64_t *)v32);
      sub_234189A6C(a3, &v47);
    }
    if (a4)
    {
      v47 = 0u;
      v48 = 0u;
      v28 = a2[10];
      *((_QWORD *)&v29 + 1) = v28;
      *(_QWORD *)&v29 = a2[9];
      *(_QWORD *)&v37 = v29 & 0xFFFFFFFFFFFFFFLL;
      *((_QWORD *)&v37 + 1) = (v29 >> 56) & 0xFFFFFFFFFFFFFFLL;
      *((_QWORD *)&v29 + 1) = a2[11];
      *(_QWORD *)&v29 = v28;
      v30 = (v29 >> 48) & 0xFFFFFFFFFFFFFFLL;
      v31 = *(_OWORD *)(a2 + 11);
      *(_QWORD *)&v38 = v30;
      *((_QWORD *)&v38 + 1) = (v31 >> 40) & 0xFFFFFFFFFFFFFFLL;
      sub_234189934((uint64_t)v32, (unint64_t *)&v34, (unint64_t *)v33);
      sub_234189800(&v34, (unint64_t *)v32);
      sub_234189934((uint64_t)v32, (unint64_t *)&v37, (unint64_t *)&v34);
      sub_234189800(&v47, (unint64_t *)v32);
      sub_234189A6C(a4, &v47);
    }
    return 1;
  }
}

uint64_t *sub_234188A1C(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v25[4];
  unint64_t v26[4];
  unint64_t v27[4];
  _QWORD v28[4];
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  *((_QWORD *)&v6 + 1) = v5;
  *(_QWORD *)&v6 = *a3;
  v32[0] = *a3 & 0xFFFFFFFFFFFFFFLL;
  v32[1] = (v6 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v6 + 1) = a3[2];
  *(_QWORD *)&v6 = v5;
  v7 = (v6 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v8 = *((_OWORD *)a3 + 1);
  v32[2] = v7;
  v32[3] = (v8 >> 40) & 0xFFFFFFFFFFFFFFLL;
  v9 = a3[10];
  *((_QWORD *)&v8 + 1) = v9;
  *(_QWORD *)&v8 = a3[9];
  v29.i64[0] = v8 & 0xFFFFFFFFFFFFFFLL;
  v29.i64[1] = (v8 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v8 + 1) = a3[11];
  *(_QWORD *)&v8 = v9;
  v10 = (v8 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v11 = *(_OWORD *)(a3 + 11);
  v30 = v10;
  v31 = (v11 >> 40) & 0xFFFFFFFFFFFFFFLL;
  v12 = a3[19];
  *((_QWORD *)&v11 + 1) = v12;
  *(_QWORD *)&v11 = a3[18];
  v28[0] = v11 & 0xFFFFFFFFFFFFFFLL;
  v28[1] = (v11 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v11 + 1) = a3[20];
  *(_QWORD *)&v11 = v12;
  v13 = (v11 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v14 = *((_OWORD *)a3 + 10);
  v28[2] = v13;
  v28[3] = (v14 >> 40) & 0xFFFFFFFFFFFFFFLL;
  v15 = a4[1];
  *((_QWORD *)&v14 + 1) = v15;
  *(_QWORD *)&v14 = *a4;
  v27[0] = *a4 & 0xFFFFFFFFFFFFFFLL;
  v27[1] = (v14 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v14 + 1) = a4[2];
  *(_QWORD *)&v14 = v15;
  v16 = (v14 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v17 = *((_OWORD *)a4 + 1);
  v27[2] = v16;
  v27[3] = (v17 >> 40) & 0xFFFFFFFFFFFFFFLL;
  v18 = a4[10];
  *((_QWORD *)&v17 + 1) = v18;
  *(_QWORD *)&v17 = a4[9];
  v26[0] = v17 & 0xFFFFFFFFFFFFFFLL;
  v26[1] = (v17 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v17 + 1) = a4[11];
  *(_QWORD *)&v17 = v18;
  v19 = (v17 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v20 = *(_OWORD *)(a4 + 11);
  v26[2] = v19;
  v26[3] = (v20 >> 40) & 0xFFFFFFFFFFFFFFLL;
  v21 = a4[19];
  *((_QWORD *)&v20 + 1) = v21;
  *(_QWORD *)&v20 = a4[18];
  v25[0] = v20 & 0xFFFFFFFFFFFFFFLL;
  v25[1] = (v20 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v20 + 1) = a4[20];
  *(_QWORD *)&v20 = v21;
  v22 = (v20 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v23 = *((_OWORD *)a4 + 10);
  v25[2] = v22;
  v25[3] = (v23 >> 40) & 0xFFFFFFFFFFFFFFLL;
  sub_234189B04((uint64_t)v32, (uint64_t)&v29, (uint64_t)v28, (uint64_t)v32, &v29, (uint64_t)v28, 0, v27, v26, v25);
  sub_234189A6C(a2, v32);
  sub_234189A6C(a2 + 9, &v29);
  return sub_234189A6C(a2 + 18, v28);
}

uint64_t *sub_234188BC8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3[1];
  *((_QWORD *)&v5 + 1) = v4;
  *(_QWORD *)&v5 = *a3;
  v21.i64[0] = *a3 & 0xFFFFFFFFFFFFFFLL;
  v21.i64[1] = (v5 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v5 + 1) = a3[2];
  *(_QWORD *)&v5 = v4;
  v6 = (v5 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v7 = *((_OWORD *)a3 + 1);
  v22 = v6;
  v23 = (v7 >> 40) & 0xFFFFFFFFFFFFFFLL;
  v8 = a3[10];
  *((_QWORD *)&v7 + 1) = v8;
  *(_QWORD *)&v7 = a3[9];
  v18.i64[0] = v7 & 0xFFFFFFFFFFFFFFLL;
  v18.i64[1] = (v7 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v7 + 1) = a3[11];
  *(_QWORD *)&v7 = v8;
  v9 = (v7 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v10 = *(_OWORD *)(a3 + 11);
  v19 = v9;
  v20 = (v10 >> 40) & 0xFFFFFFFFFFFFFFLL;
  v11 = a3[19];
  *((_QWORD *)&v10 + 1) = v11;
  *(_QWORD *)&v10 = a3[18];
  v15.i64[0] = v10 & 0xFFFFFFFFFFFFFFLL;
  v15.i64[1] = (v10 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v10 + 1) = a3[20];
  *(_QWORD *)&v10 = v11;
  v12 = (v10 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v13 = *((_OWORD *)a3 + 10);
  v16 = v12;
  v17 = (v13 >> 40) & 0xFFFFFFFFFFFFFFLL;
  sub_23418A274(&v21, (int8x16_t *)&v18, (int8x16_t *)&v15, (unint64_t *)&v21, &v18, &v15);
  sub_234189A6C(a2, &v21);
  sub_234189A6C(a2 + 9, &v18);
  return sub_234189A6C(a2 + 18, &v15);
}

uint64_t *sub_234188CDC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t i;
  int8x16_t *v14;
  _OWORD v17[2];
  _OWORD v18[2];
  _OWORD v19[2];
  int8x16_t v20[2];
  int8x16_t v21;
  __int128 v22;
  int64x2_t v23;
  __int128 v24;
  int64x2_t v25;
  __int128 v26;
  _BYTE v27[1632];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_23418A68C((uint64_t)v27, a3);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v5 = 1;
  v25 = 0u;
  v26 = 0u;
  v6 = 220;
  do
  {
    if (!v5)
      sub_23418A274(&v21, (int8x16_t *)&v23, (int8x16_t *)&v25, (unint64_t *)&v21, &v23, &v25);
    if (-858993459 * v6 < 0x33333334)
    {
      if (v6 <= 0xDB)
        v8 = (*(_QWORD *)(a4 + (((v6 + 4) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 + 4)) & 1;
      else
        v8 = 0;
      v7 = v6 - 1;
      if (v6 - 1 <= 0xDF)
        v9 = (*(_QWORD *)(a4 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1;
      else
        v9 = 0;
      v10 = (2 * ((*(_QWORD *)(a4 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1)) | v9 | (4
                                                                                             * ((*(_QWORD *)(a4 + (((v6 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 + 1)) & 1)) & 0xFFFFFFFFFFFFFFF7 | (8 * ((*(_QWORD *)(a4 + (((v6 + 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 + 2)) & 1)) | (32 * v8) | (16 * ((*(_QWORD *)(a4 + (((v6 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 + 3)) & 1));
      v11 = -v8;
      v12 = (v10 ^ 0x3F) & -v8 | v10 & (v8 + 0x7FFFFFFFFFFFFFFFLL);
      sub_23418A804((v12 & 1) + (v12 >> 1), 17, (uint64_t)v27, v17);
      sub_23418A868(v20, v18);
      for (i = 0; i != 2; ++i)
      {
        v14 = &v20[i];
        if ((v11 & 1) == 0)
          v14 = (int8x16_t *)&v17[i + 2];
        v17[i + 2] = *v14;
      }
      if (v5)
      {
        v5 = 0;
        v23 = (int64x2_t)v18[0];
        v24 = v18[1];
        v25 = (int64x2_t)v19[0];
        v26 = v19[1];
        v21 = (int8x16_t)v17[0];
        v22 = v17[1];
      }
      else
      {
        sub_234189B04((uint64_t)&v21, (uint64_t)&v23, (uint64_t)&v25, (uint64_t)&v21, &v23, (uint64_t)&v25, 0, (unint64_t *)v17, (unint64_t *)v18, (unint64_t *)v19);
      }
    }
    else
    {
      v7 = v6 - 1;
    }
    v6 = v7;
  }
  while (v7 < 0xDD);
  sub_234189A6C(a2, &v21);
  sub_234189A6C(a2 + 9, &v23);
  return sub_234189A6C(a2 + 18, &v25);
}

uint64_t *sub_234188F88(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  unint64_t v7;
  _OWORD v9[2];
  _OWORD v10[2];
  _OWORD v11[2];
  int8x16_t v12;
  __int128 v13;
  int64x2_t v14;
  __int128 v15;
  int64x2_t v16;
  __int128 v17;
  uint64_t v18;

  v5 = 0;
  v18 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = 111;
  do
  {
    if ((v5 & 1) != 0)
      sub_23418A274(&v12, (int8x16_t *)&v14, (int8x16_t *)&v16, (unint64_t *)&v12, &v14, &v16);
    sub_23418A804((8 * ((*(_QWORD *)(a3 + (((v6 + 112) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 - 80)) & 1)) | (4 * ((*(_QWORD *)(a3 + (((v6 + 56) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 - 72)) & 1)) | (2 * ((*(_QWORD *)(a3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1)) | (*(_QWORD *)(a3 + (((v6 - 56) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 - 56)) & 1, 16, (uint64_t)&unk_2342E3A58, v9);
    if ((v5 & 1) != 0)
    {
      sub_234189B04((uint64_t)&v12, (uint64_t)&v14, (uint64_t)&v16, (uint64_t)&v12, &v14, (uint64_t)&v16, 1, (unint64_t *)v9, (unint64_t *)v10, (unint64_t *)v11);
    }
    else
    {
      v14 = (int64x2_t)v10[0];
      v15 = v10[1];
      v16 = (int64x2_t)v11[0];
      v17 = v11[1];
      v12 = (int8x16_t)v9[0];
      v13 = v9[1];
    }
    sub_23418A804((8 * ((*(_QWORD *)(a3 + (((v6 + 84) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 + 84)) & 1)) | (4 * ((*(_QWORD *)(a3 + (((v6 + 28) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 + 28)) & 1)) | (2 * ((*(_QWORD *)(a3 + (((v6 - 28) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 - 28)) & 1)) | (*(_QWORD *)(a3 + (((v6 - 84) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 - 84)) & 1, 16, (uint64_t)&unk_2342E3458, v9);
    v5 = 1;
    sub_234189B04((uint64_t)&v12, (uint64_t)&v14, (uint64_t)&v16, (uint64_t)&v12, &v14, (uint64_t)&v16, 1, (unint64_t *)v9, (unint64_t *)v10, (unint64_t *)v11);
    v7 = v6 - 85;
    --v6;
  }
  while (v7 < 0x1C);
  sub_234189A6C(a2, &v12);
  sub_234189A6C(a2 + 9, &v14);
  return sub_234189A6C(a2 + 18, &v16);
}

uint64_t *sub_2341891E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  _OWORD v35[102];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  sub_23418A68C((uint64_t)v35, a4);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v7 = 1;
  v8 = 220;
  do
  {
    if (!v7)
      sub_23418A274(&v29, (int8x16_t *)&v31, (int8x16_t *)&v33, (unint64_t *)&v29, &v31, &v33);
    if (v8 <= 0x1B)
    {
      v9 = (unint64_t *)((char *)&unk_2342E3458
                              + 96
                              * ((8
                                * ((*(_QWORD *)(a3 + (((v8 + 196) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 - 60)) & 1)) | (4 * ((*(_QWORD *)(a3 + (((v8 + 140) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 - 116)) & 1)) | (2 * ((*(_QWORD *)(a3 + (((v8 + 84) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 84)) & 1)) | (*(_QWORD *)(a3 + (((v8 + 28) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 28)) & 1));
      sub_234189B04((uint64_t)&v29, (uint64_t)&v31, (uint64_t)&v33, (uint64_t)&v29, &v31, (uint64_t)&v33, 1, v9 + 192, v9 + 196, v9 + 200);
      v10 = (unint64_t *)((char *)&unk_2342E3458
                               + 96
                               * ((8
                                 * ((*(_QWORD *)(a3 + (((v8 + 168) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 - 88)) & 1)) | (4 * ((*(_QWORD *)(a3 + (((v8 + 112) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 112)) & 1)) | (2 * ((*(_QWORD *)(a3 + (((v8 + 56) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 56)) & 1)) | (*(_QWORD *)(a3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1));
      sub_234189B04((uint64_t)&v29, (uint64_t)&v31, (uint64_t)&v33, (uint64_t)&v29, &v31, (uint64_t)&v33, 1, v10, v10 + 4, v10 + 8);
    }
    if (-858993459 * v8 < 0x33333334)
    {
      if (v8 <= 0xDB)
        v12 = (*(_QWORD *)(a5 + (((v8 + 4) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 4)) & 1;
      else
        v12 = 0;
      v11 = v8 - 1;
      if (v8 - 1 <= 0xDF)
        v13 = (*(_QWORD *)(a5 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1;
      else
        v13 = 0;
      v14 = (2 * ((*(_QWORD *)(a5 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1)) | v13 | (4
                                                                                              * ((*(_QWORD *)(a5 + (((v8 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 1)) & 1)) & 0xFFFFFFFFFFFFFFF7 | (8 * ((*(_QWORD *)(a5 + (((v8 + 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 2)) & 1)) | (32 * v12) | (16 * ((*(_QWORD *)(a5 + (((v8 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 3)) & 1));
      v15 = v12 + 0x7FFFFFFFFFFFFFFFLL;
      v16 = -v12;
      v17 = (int64x2_t *)&v35[6 * (((v14 ^ 0x3F) & v16 | v14 & v15) & 1) + 6 * (((v14 ^ 0x3F) & v16 | v14 & v15) >> 1)];
      v18 = v17[3];
      v25 = v17[2];
      v26 = v18;
      v19 = v17[5];
      v27 = v17[4];
      v28 = v19;
      v20 = v17[1];
      v23 = *(int8x16_t *)v17;
      v24 = v20;
      if ((v16 & 1) != 0)
        sub_23418A868((int8x16_t *)&v25, &v25);
      if (v7)
      {
        v7 = 0;
        v31 = v25;
        v32 = v26;
        v33 = v27;
        v34 = v28;
        v29 = v23;
        v30 = v24;
      }
      else
      {
        sub_234189B04((uint64_t)&v29, (uint64_t)&v31, (uint64_t)&v33, (uint64_t)&v29, &v31, (uint64_t)&v33, 0, (unint64_t *)&v23, (unint64_t *)&v25, (unint64_t *)&v27);
      }
    }
    else
    {
      v11 = v8 - 1;
    }
    v8 = v11;
  }
  while (v11 < 0xDD);
  sub_234189A6C(a2, &v29);
  sub_234189A6C(a2 + 9, &v31);
  return sub_234189A6C(a2 + 18, &v33);
}

uint64_t *sub_2341895B0(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  _OWORD v13[7];
  unint64_t v14[4];
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, sizeof(v13));
  v5 = a3[1];
  *((_QWORD *)&v6 + 1) = v5;
  *(_QWORD *)&v6 = *a3;
  v15.i64[0] = *a3 & 0xFFFFFFFFFFFFFFLL;
  v15.i64[1] = (v6 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v6 + 1) = a3[2];
  *(_QWORD *)&v6 = v5;
  v7 = (v6 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v8 = *((_OWORD *)a3 + 1);
  v16 = v7;
  v17 = (v8 >> 40) & 0xFFFFFFFFFFFFFFLL;
  v9 = a4[1];
  *((_QWORD *)&v8 + 1) = v9;
  *(_QWORD *)&v8 = *a4;
  v14[0] = *a4 & 0xFFFFFFFFFFFFFFLL;
  v14[1] = (v8 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v8 + 1) = a4[2];
  *(_QWORD *)&v8 = v9;
  v10 = (v8 >> 48) & 0xFFFFFFFFFFFFFFLL;
  v11 = *((_OWORD *)a4 + 1);
  v14[2] = v10;
  v14[3] = (v11 >> 40) & 0xFFFFFFFFFFFFFFLL;
  sub_234189934((uint64_t)v13, (unint64_t *)&v15, v14);
  sub_234189800(&v15, (unint64_t *)v13);
  return sub_234189A6C(a2, &v15);
}

uint64_t *sub_234189694(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[7];
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a3[1];
  *((_QWORD *)&v5 + 1) = v4;
  *(_QWORD *)&v5 = *a3;
  v10.i64[0] = *a3 & 0xFFFFFFFFFFFFFFLL;
  v10.i64[1] = (v5 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((_QWORD *)&v5 + 1) = a3[2];
  *(_QWORD *)&v5 = v4;
  v6 = v5 >> 48;
  v7 = *((_OWORD *)a3 + 1);
  v11 = v6 & 0xFFFFFFFFFFFFFFLL;
  v12 = (v7 >> 40) & 0xFFFFFFFFFFFFFFLL;
  memset(v9, 0, sizeof(v9));
  sub_234189748((uint64_t)v9, (unint64_t *)&v10);
  sub_234189800(&v10, (unint64_t *)v9);
  return sub_234189A6C(a2, &v10);
}

uint64_t sub_234189748(uint64_t result, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 2 * *a2;
  v3 = 2 * a2[1];
  v4 = 2 * a2[2];
  *(_OWORD *)result = *a2 * (unsigned __int128)*a2;
  v5 = (*a2 * (unsigned __int128)(unint64_t)v3) >> 64;
  *(_QWORD *)(result + 16) = *a2 * v3;
  *(_QWORD *)(result + 24) = v5;
  *(_OWORD *)(result + 32) = a2[1] * (unsigned __int128)a2[1] + *a2 * (unsigned __int128)(unint64_t)v4;
  *(_OWORD *)(result + 48) = a2[1] * (unsigned __int128)(unint64_t)v4
                           + a2[3] * (unsigned __int128)(unint64_t)v2;
  *(_OWORD *)(result + 64) = a2[2] * (unsigned __int128)a2[2] + a2[3] * (unsigned __int128)(unint64_t)v3;
  *(_OWORD *)(result + 80) = a2[3] * (unsigned __int128)(unint64_t)v4;
  *(_OWORD *)(result + 96) = a2[3] * (unsigned __int128)a2[3];
  return result;
}

int8x16_t sub_234189800(int8x16_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int128 v8;
  unsigned __int128 v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int128 v19;
  unsigned __int128 v20;
  unsigned __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  signed __int128 v31;
  signed __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t result;
  __int128 v39;

  v3 = *a2;
  v2 = a2[1];
  v5 = a2[2];
  v4 = a2[3];
  v7 = a2[6];
  v6 = a2[7];
  v8 = *((_OWORD *)a2 + 6);
  v9 = (v8 >> 16) + *((_OWORD *)a2 + 4);
  v10 = (unint64_t)(unsigned __int16)v8 << 40;
  v11 = __CFADD__(v10, v7);
  v12 = v10 + v7;
  if (v11)
    ++v6;
  v13 = (*((_OWORD *)a2 + 2) - *((_OWORD *)a2 + 6)) >> 64;
  v14 = a2[4] - a2[12];
  v16 = a2[10];
  v15 = a2[11];
  v17 = (unint64_t)(unsigned __int16)v16 << 40;
  v11 = __CFADD__(v14, v17);
  v18 = v14 + v17;
  if (v11)
    ++v13;
  *((_QWORD *)&v19 + 1) = v15;
  *(_QWORD *)&v19 = v16;
  v20 = __PAIR128__(v6, v12) + (v19 >> 16);
  v21 = __PAIR128__(v13, v18) + (v9 >> 16);
  v23 = v5 - v16;
  v22 = (__PAIR128__(v4, v5) - __PAIR128__(v15, v16)) >> 64;
  v24 = (unint64_t)(unsigned __int16)v9 << 40;
  v25 = v5 - v16 + v24;
  if (__CFADD__(v23, v24))
    ++v22;
  *((_QWORD *)&v26 + 1) = *((_QWORD *)&v21 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v26 = v21;
  v27 = v20 + (v26 >> 56);
  v28 = (v27 >> 16) & 0xFFFF0000000000;
  v11 = __CFADD__(v25, v28);
  v29 = v25 + v28;
  if (v11)
    ++v22;
  v30 = (v21 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v27 + 1) >> 8);
  v31 = __PAIR128__(v2, v3) - (v9 + ((unsigned __int128)v27 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000);
  v32 = __PAIR128__(HIBYTE(*((_QWORD *)&v31 + 1)) + (unint64_t)__CFADD__(v29, (unint64_t)(v31 >> 56)) + v22, v29 + (unint64_t)(v31 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v33 = (unint64_t)((__PAIR128__(HIBYTE(*((_QWORD *)&v31 + 1))+ (unint64_t)__CFADD__(v29, (unint64_t)(v31 >> 56))+ v22, v29 + (unint64_t)(v31 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
  v34 = v32 >> 56;
  v11 = __CFADD__(v30, v34);
  v35 = v30 + v34;
  if (v11)
    ++v33;
  v36.i64[0] = v31;
  v36.i64[1] = v32;
  v37.i64[0] = 0xFFFFFFFFFFFFFFLL;
  v37.i64[1] = 0xFFFFFFFFFFFFFFLL;
  result = vandq_s8(v36, v37);
  *a1 = result;
  *((_QWORD *)&v39 + 1) = v33;
  *(_QWORD *)&v39 = v35;
  a1[1].i64[0] = v35 & 0xFFFFFFFFFFFFFFLL;
  a1[1].i64[1] = (v39 >> 56) + (v27 & 0xFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_234189934(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v3;

  v3 = (*a3 * (unsigned __int128)*a2) >> 64;
  *(_QWORD *)result = *a3 * *a2;
  *(_QWORD *)(result + 8) = v3;
  *(_OWORD *)(result + 16) = *a3 * (unsigned __int128)a2[1] + a3[1] * (unsigned __int128)*a2;
  *(_OWORD *)(result + 32) = a3[1] * (unsigned __int128)a2[1]
                           + a3[2] * (unsigned __int128)*a2
                           + *a3 * (unsigned __int128)a2[2];
  *(_OWORD *)(result + 48) = a3[2] * (unsigned __int128)a2[1]
                           + a3[3] * (unsigned __int128)*a2
                           + a3[1] * (unsigned __int128)a2[2]
                           + *a3 * (unsigned __int128)a2[3];
  *(_OWORD *)(result + 64) = a3[2] * (unsigned __int128)a2[2]
                           + a3[3] * (unsigned __int128)a2[1]
                           + a3[1] * (unsigned __int128)a2[3];
  *(_OWORD *)(result + 80) = a3[2] * (unsigned __int128)a2[3] + a3[3] * (unsigned __int128)a2[2];
  *(_OWORD *)(result + 96) = a3[3] * (unsigned __int128)a2[3];
  return result;
}

uint64_t *sub_234189A6C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a2[1];
  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2 - HIBYTE(v4);
  v6 = v2 + (HIBYTE(v4) << 40);
  v7 = (((v3 & v4 & (v2 | 0xFFFFFFFFFFLL)) + 1) | ((*a2 + (v2 & 0xFFFFFFFFFFLL) - 1) >> 63)) & 0xFFFFFFFFFFFFFFLL;
  v8 = v7 != 0;
  v9 = v7 - 1;
  v10 = v8;
  v11 = v10 << 63 >> 63;
  v12 = v4 & v11;
  v13 = v3 & v11;
  v14 = 0xFFFFFFFFFFLL;
  if (v8)
    v14 = -1;
  v15 = v5 + (v9 >> 63);
  v16 = v14 & v6;
  v17 = v15 + ((unint64_t)v15 >> 63 << 56);
  v18 = v16 + (v15 >> 63);
  v19 = v13 + (v18 >> 56);
  *result = v17 | (v18 << 56);
  result[1] = ((unint64_t)v18 >> 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v19 << 48);
  result[2] = ((unint64_t)v19 >> 16) & 0xFFFFFFFFFFLL | ((unint64_t)(v12
                                                                                 + (v19 >> 56)) << 40);
  result[3] = ((v12 & 0xFFFFFFFFFFFFFFuLL) + (v19 >> 56)) >> 24;
  return result;
}

double sub_234189B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64x2_t *a5, uint64_t a6, int a7, unint64_t *a8, unint64_t *a9, unint64_t *a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double result;
  __int128 v29;
  int8x16_t v30;
  uint64_t v31;
  _BOOL8 v32;
  _BOOL8 v33;
  _BOOL8 v34;
  __int128 v35;
  _BOOL8 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  uint64_t v48;
  int8x16_t v49;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int8x16_t v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int128 v66;
  unsigned __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unsigned __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int8x16_t v80;
  __int128 v81;
  int8x16_t v82;
  __int128 v83;
  int8x16_t v84;
  __int128 v85;
  int8x16_t v86;
  __int128 v87;
  int8x16_t v88;
  __int128 v89;
  int8x16_t v90[2];
  int8x16_t v91;
  __int128 v92;
  int8x16_t v93;
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v91 = 0u;
  v92 = 0u;
  v88 = 0u;
  v89 = 0u;
  v82 = 0u;
  v83 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  if (a7)
  {
    v15 = a5->i64[0];
    v14 = a5->i64[1];
    v88.i64[0] = a5->i64[0];
    v88.i64[1] = v14;
    v17 = a5[1].i64[0];
    v16 = a5[1].i64[1];
    *(_QWORD *)&v89 = v17;
    *((_QWORD *)&v89 + 1) = v16;
    v61 = *(int8x16_t *)a4;
    v91.i64[0] = *(_QWORD *)a4;
    v91.i64[1] = v61.i64[1];
    v63 = *(_OWORD *)(a4 + 16);
    v92 = v63;
  }
  else
  {
    sub_234189748((uint64_t)&v73, a10);
    sub_234189800(&v91, (unint64_t *)&v73);
    sub_234189934((uint64_t)&v73, (unint64_t *)&v91, a10);
    sub_234189800(&v88, (unint64_t *)&v73);
    sub_234189934((uint64_t)&v66, (unint64_t *)&v88, (unint64_t *)a5);
    sub_234189800(&v88, (unint64_t *)&v66);
    sub_234189934((uint64_t)&v66, (unint64_t *)&v91, (unint64_t *)a4);
    sub_234189800(&v91, (unint64_t *)&v66);
    v14 = v88.i64[1];
    v15 = v88.i64[0];
    v16 = *((_QWORD *)&v89 + 1);
    v17 = v89;
    v61 = v91;
    v63 = v92;
  }
  v93 = 0u;
  v94 = 0u;
  memset(v90, 0, sizeof(v90));
  sub_234189748((uint64_t)&v73, (unint64_t *)a6);
  sub_234189800(&v93, (unint64_t *)&v73);
  sub_234189934((uint64_t)&v73, (unint64_t *)&v93, (unint64_t *)a6);
  sub_234189800(v90, (unint64_t *)&v73);
  sub_234189934((uint64_t)&v73, (unint64_t *)v90, a9);
  v73 = v73 - (unint64_t)v15 + __PAIR128__(1, 256);
  v18 = (v74 - (unsigned __int128)(unint64_t)v14) >> 64;
  if ((unint64_t)(v74 - v14) >= 0x1000000000100)
    ++v18;
  *(_QWORD *)&v74 = v74 - v14 - 0x1000000000100;
  *((_QWORD *)&v74 + 1) = v18;
  v19 = (v75 - (unsigned __int128)(unint64_t)v17) >> 64;
  if ((unint64_t)(v75 - v17) >= 0x100)
    ++v19;
  *(_QWORD *)&v75 = v75 - v17 - 256;
  *((_QWORD *)&v75 + 1) = v19;
  v20 = (v76 - (unsigned __int128)(unint64_t)v16) >> 64;
  if ((unint64_t)(v76 - v16) >= 0x100)
    ++v20;
  *(_QWORD *)&v76 = v76 - v16 - 256;
  *((_QWORD *)&v76 + 1) = v20;
  sub_234189800(v90, (unint64_t *)&v73);
  sub_234189934((uint64_t)&v73, (unint64_t *)&v93, a8);
  v73 = v73 - v61.u64[0] + __PAIR128__(1, 256);
  v21 = (v74 - (unsigned __int128)v61.u64[1]) >> 64;
  if ((uint64_t)v74 - v61.i64[1] >= 0x1000000000100uLL)
    ++v21;
  *(_QWORD *)&v74 = v74 - v61.i64[1] - 0x1000000000100;
  *((_QWORD *)&v74 + 1) = v21;
  v22 = (v75 - (unsigned __int128)(unint64_t)v63) >> 64;
  if ((_QWORD)v75 - (_QWORD)v63 >= 0x100uLL)
    ++v22;
  *(_QWORD *)&v75 = v75 - v63 - 256;
  *((_QWORD *)&v75 + 1) = v22;
  v23 = (v76 - (unsigned __int128)*((unint64_t *)&v63 + 1)) >> 64;
  if ((_QWORD)v76 - *((_QWORD *)&v63 + 1) >= 0x100uLL)
    ++v23;
  *(_QWORD *)&v76 = v76 - *((_QWORD *)&v63 + 1) - 256;
  *((_QWORD *)&v76 + 1) = v23;
  sub_234189800(&v93, (unint64_t *)&v73);
  v24 = sub_23418A210(&v93);
  v25 = sub_23418A210(v90);
  v26 = sub_23418A210((_QWORD *)a6);
  v27 = sub_23418A210(a10);
  if ((v25 & v24 & ~v26 & (v27 ^ 1)) != 0)
    return sub_23418A274((int8x16_t *)a1, (int8x16_t *)a2, (int8x16_t *)a3, (unint64_t *)a4, a5, (int64x2_t *)a6);
  v86 = 0u;
  v87 = 0u;
  v64 = v26;
  v65 = v27;
  if (a7)
  {
    v29 = *(_OWORD *)(a6 + 16);
    v86 = *(int8x16_t *)a6;
    v87 = v29;
  }
  else
  {
    sub_234189934((uint64_t)&v73, (unint64_t *)a6, a10);
    sub_234189800(&v86, (unint64_t *)&v73);
  }
  v84 = 0u;
  v85 = 0u;
  v80 = 0u;
  v81 = 0u;
  sub_234189934((uint64_t)&v73, (unint64_t *)&v93, (unint64_t *)&v86);
  sub_234189800(&v80, (unint64_t *)&v73);
  v86 = v93;
  v87 = v94;
  sub_234189748((uint64_t)&v73, (unint64_t *)&v93);
  sub_234189800(&v93, (unint64_t *)&v73);
  sub_234189934((uint64_t)&v73, (unint64_t *)&v93, (unint64_t *)&v86);
  sub_234189800(&v86, (unint64_t *)&v73);
  sub_234189934((uint64_t)&v73, (unint64_t *)&v91, (unint64_t *)&v93);
  sub_234189800(&v91, (unint64_t *)&v73);
  sub_234189934((uint64_t)&v73, (unint64_t *)&v88, (unint64_t *)&v86);
  sub_234189748((uint64_t)&v66, (unint64_t *)v90);
  v30 = v91;
  v31 = *((_QWORD *)&v92 + 1);
  v62 = v92;
  v32 = __CFADD__(v86.i64[0], 2 * v91.i64[0]);
  v66 = v66 - __PAIR128__(v32, v86.i64[0] + 2 * v91.i64[0]) + __PAIR128__(2, 512);
  v33 = __CFADD__(v86.i64[1], 2 * v91.i64[1]);
  v67 = v67 - __PAIR128__(v33, v86.i64[1] + 2 * v91.i64[1]) + __PAIR128__(1, 0xFFFDFFFFFFFFFE00);
  v34 = __CFADD__((_QWORD)v87, 2 * v92);
  v35 = v68 - __PAIR128__(v34, (uint64_t)v87 + 2 * (uint64_t)v92);
  *(_QWORD *)&v68 = v68 - (v87 + 2 * v92) - 512;
  *((_QWORD *)&v68 + 1) = ((unint64_t)v35 >= 0x200) + *((_QWORD *)&v35 + 1) + 1;
  v36 = __CFADD__(*((_QWORD *)&v87 + 1), 2 * *((_QWORD *)&v92 + 1));
  v38 = v69 - (*((_QWORD *)&v87 + 1) + 2 * *((_QWORD *)&v92 + 1));
  v37 = (v69 - __PAIR128__(v36, *((_QWORD *)&v87 + 1) + 2 * *((_QWORD *)&v92 + 1))) >> 64;
  *(_QWORD *)&v69 = v38 - 512;
  *((_QWORD *)&v69 + 1) = (v38 >= 0x200) + v37 + 1;
  sub_234189800(&v84, (unint64_t *)&v66);
  v91.i64[0] = v30.i64[0] - v84.i64[0] + 0x400000000000004;
  v91.i64[1] = v30.i64[1] - v84.i64[1] + 0x3FFFBFFFFFFFFFCLL;
  *(_QWORD *)&v92 = v62 - v85 + 0x3FFFFFFFFFFFFFCLL;
  *((_QWORD *)&v92 + 1) = v31 - *((_QWORD *)&v85 + 1) + 0x3FFFFFFFFFFFFFCLL;
  sub_234189934((uint64_t)&v66, (unint64_t *)v90, (unint64_t *)&v91);
  v39 = ((v66 - v73) >> 64) + 0x100000000000000;
  *(_QWORD *)&v66 = v66 - v73;
  *((_QWORD *)&v66 + 1) = v39;
  v40 = ((v67 - v74) >> 64) + 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v67 = v67 - v74;
  *((_QWORD *)&v67 + 1) = v40;
  v41 = ((unsigned __int128)(v68 - v75) >> 64) + 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v68 = v68 - v75;
  *((_QWORD *)&v68 + 1) = v41;
  v42 = ((unsigned __int128)(v69 - v76) >> 64) + 0x100000000000000;
  *(_QWORD *)&v69 = v69 - v76;
  *((_QWORD *)&v69 + 1) = v42;
  v43 = ((unsigned __int128)(v70 - v77) >> 64) + 0xFFFEFFFFFFFFFFLL;
  *(_QWORD *)&v70 = v70 - v77;
  *((_QWORD *)&v70 + 1) = v43;
  v44 = ((unsigned __int128)(v71 - v78) >> 64) + 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v71 = v71 - v78;
  *((_QWORD *)&v71 + 1) = v44;
  v45 = ((unsigned __int128)(v72 - v79) >> 64) + 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v72 = v72 - v79;
  *((_QWORD *)&v72 + 1) = v45;
  sub_234189800(&v82, (unint64_t *)&v66);
  v46 = 0;
  v47 = (int8x16_t)vdupq_n_s64(-(uint64_t)v64);
  do
  {
    *(int8x16_t *)((char *)&v84 + v46 * 8) = vbslq_s8(v47, *(int8x16_t *)&a8[v46], *(int8x16_t *)((char *)&v84 + v46 * 8));
    v46 += 2;
  }
  while (v46 != 4);
  v48 = 0;
  v49 = (int8x16_t)vdupq_n_s64(-(uint64_t)v65);
  do
  {
    *(int8x16_t *)((char *)&v84 + v48) = vbslq_s8(v49, *(int8x16_t *)(a4 + v48), *(int8x16_t *)((char *)&v84 + v48));
    v48 += 16;
  }
  while (v48 != 32);
  for (i = 0; i != 4; i += 2)
    *(int8x16_t *)((char *)&v82 + i * 8) = vbslq_s8(v47, *(int8x16_t *)&a9[i], *(int8x16_t *)((char *)&v82 + i * 8));
  for (j = 0; j != 2; ++j)
    *(int8x16_t *)((char *)&v82 + j * 16) = vbslq_s8(v49, (int8x16_t)a5[j], *(int8x16_t *)((char *)&v82 + j * 16));
  for (k = 0; k != 4; k += 2)
    *(int8x16_t *)((char *)&v80 + k * 8) = vbslq_s8(v47, *(int8x16_t *)&a10[k], *(int8x16_t *)((char *)&v80 + k * 8));
  for (m = 0; m != 32; m += 16)
    *(int8x16_t *)((char *)&v80 + m) = vbslq_s8(v49, *(int8x16_t *)(a6 + m), *(int8x16_t *)((char *)&v80 + m));
  v54 = v85;
  *(int8x16_t *)a1 = v84;
  *(_OWORD *)(a1 + 16) = v54;
  v55 = v83;
  *(int8x16_t *)a2 = v82;
  *(_OWORD *)(a2 + 16) = v55;
  result = *(double *)v80.i64;
  v56 = v81;
  *(int8x16_t *)a3 = v80;
  *(_OWORD *)(a3 + 16) = v56;
  return result;
}

unint64_t sub_23418A210(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  return (((v1 ^ 0xFFFF0000000000 | *a1 ^ 1 | a1[3] ^ 0xFFFFFFFFFFFFFFLL | a1[2] ^ 0xFFFFFFFFFFFFFFLL) - 1) | ((v1 | *a1 | a1[2] | a1[3]) - 1) | ((v1 ^ 0xFFFE0000000000 | *a1 ^ 2 | a1[3] ^ 0x1FFFFFFFFFFFFFFLL | a1[2] ^ 0xFFFFFFFFFFFFFFuLL) - 1)) >> 63;
}

double sub_23418A274(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, int64x2_t *a5, int64x2_t *a6)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int8x16_t v13;
  __int128 v14;
  int8x16_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  double result;
  unint64_t v45[4];
  int64x2_t v46;
  int64x2_t v47;
  int8x16_t v48[2];
  int8x16_t v49;
  __int128 v50;
  int8x16_t v51;
  __int128 v52;
  int8x16_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unsigned __int128 v62;
  __int128 v63;
  unsigned __int128 v64;
  unsigned __int128 v65;
  unsigned __int128 v66;
  unsigned __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  memset(v48, 0, sizeof(v48));
  v9 = *a4;
  v10 = a4[1];
  v12 = a4[2];
  v11 = a4[3];
  sub_234189748((uint64_t)&v62, (unint64_t *)a6);
  sub_234189800(&v53, (unint64_t *)&v62);
  sub_234189748((uint64_t)&v62, (unint64_t *)a5);
  sub_234189800(&v51, (unint64_t *)&v62);
  sub_234189934((uint64_t)&v62, a4, (unint64_t *)&v51);
  sub_234189800(&v49, (unint64_t *)&v62);
  v13 = v53;
  v46.i64[0] = v9 + 0x400000000000004 - v53.i64[0];
  v46.i64[1] = v10 + 0x3FFFBFFFFFFFFFCLL - v53.i64[1];
  v14 = v54;
  v47.i64[0] = v12 - v54 + 0x3FFFFFFFFFFFFFCLL;
  v47.i64[1] = v11 - *((_QWORD *)&v54 + 1) + 0x3FFFFFFFFFFFFFCLL;
  v45[0] = 3 * (v53.i64[0] + v9);
  v45[1] = 3 * (v53.i64[1] + v10);
  v45[2] = 3 * (v54 + v12);
  v45[3] = 3 * (*((_QWORD *)&v54 + 1) + v11);
  sub_234189934((uint64_t)&v62, (unint64_t *)&v46, v45);
  sub_234189800(v48, (unint64_t *)&v62);
  sub_234189748((uint64_t)&v62, (unint64_t *)v48);
  v15 = v49;
  v16 = v50;
  v62 = v62 - (unint64_t)(8 * v49.i64[0]) + __PAIR128__(1, 256);
  v18 = (v63 - (unsigned __int128)(unint64_t)(8 * v49.i64[1])) >> 64;
  v17 = v63 - 8 * v49.i64[1];
  v19 = __CFADD__(v17, 0xFFFEFFFFFFFFFF00);
  v20 = v17 - 0x1000000000100;
  if (v19)
    ++v18;
  *(_QWORD *)&v63 = v20;
  *((_QWORD *)&v63 + 1) = v18;
  v22 = (v64 - (unint64_t)(8 * v50)) >> 64;
  v21 = v64 - 8 * v50;
  v19 = v21 >= 0x100;
  v23 = v21 - 256;
  if (v19)
    ++v22;
  *(_QWORD *)&v64 = v23;
  *((_QWORD *)&v64 + 1) = v22;
  v25 = (v65 - (unint64_t)(8 * *((_QWORD *)&v50 + 1))) >> 64;
  v24 = v65 - 8 * *((_QWORD *)&v50 + 1);
  v19 = v24 >= 0x100;
  v26 = v24 - 256;
  if (v19)
    ++v25;
  *(_QWORD *)&v65 = v26;
  *((_QWORD *)&v65 + 1) = v25;
  sub_234189800(a1, (unint64_t *)&v62);
  v27 = vaddq_s64(*a6, *a5);
  v28 = vaddq_s64(a6[1], a5[1]);
  v29 = v51.i64[0] + v13.i64[0];
  v30 = v51.i64[1] + v13.i64[1];
  v31 = v52 + v14;
  v32 = *((_QWORD *)&v52 + 1) + *((_QWORD *)&v14 + 1);
  v46 = v27;
  v47 = v28;
  sub_234189748((uint64_t)&v62, (unint64_t *)&v46);
  v62 = v62 - (unint64_t)v29 + __PAIR128__(1, 256);
  v33 = (v63 - (unsigned __int128)(unint64_t)v30) >> 64;
  if ((unint64_t)(v63 - v30) >= 0x1000000000100)
    ++v33;
  *(_QWORD *)&v63 = v63 - v30 - 0x1000000000100;
  *((_QWORD *)&v63 + 1) = v33;
  v34 = (v64 - v31) >> 64;
  if ((unint64_t)v64 - v31 >= 0x100)
    ++v34;
  *(_QWORD *)&v64 = v64 - v31 - 256;
  *((_QWORD *)&v64 + 1) = v34;
  v35 = (v65 - v32) >> 64;
  if ((unint64_t)v65 - v32 >= 0x100)
    ++v35;
  *(_QWORD *)&v65 = v65 - v32 - 256;
  *((_QWORD *)&v65 + 1) = v35;
  sub_234189800(a3, (unint64_t *)&v62);
  v36 = a1->i64[1];
  v49.i64[0] = 4 * v15.i64[0] + 0x400000000000004 - a1->i64[0];
  v49.i64[1] = 4 * v15.i64[1] + 0x3FFFBFFFFFFFFFCLL - v36;
  v37 = 4 * *((_QWORD *)&v16 + 1) - a1[1].i64[1] + 0x3FFFFFFFFFFFFFCLL;
  *(_QWORD *)&v50 = 4 * v16 - a1[1].i64[0] + 0x3FFFFFFFFFFFFFCLL;
  *((_QWORD *)&v50 + 1) = v37;
  sub_234189934((uint64_t)&v62, (unint64_t *)v48, (unint64_t *)&v49);
  sub_234189748((uint64_t)&v55, (unint64_t *)&v51);
  v38 = ((v62 - v55 * 8) >> 64) + 0x100000000000000;
  *(_QWORD *)&v62 = v62 - 8 * v55;
  *((_QWORD *)&v62 + 1) = v38;
  v39 = v63 - v56 * 8;
  *(_QWORD *)&v63 = v63 - 8 * v56;
  *((_QWORD *)&v63 + 1) = *((_QWORD *)&v39 + 1) + 0xFFFFFFFFFFFFFFLL;
  v64 = v64 - v57 * 8 + __PAIR128__(0xFFFFFFFFFFFFFFLL, 0);
  v65 = v65 - v58 * 8 + __PAIR128__(0x100000000000000, 0);
  v66 = v66 - v59 * 8 + __PAIR128__(0xFFFEFFFFFFFFFFLL, 0);
  v67 = v67 - v60 * 8 + __PAIR128__(0xFFFFFFFFFFFFFFLL, 0);
  v40 = ((unsigned __int128)(v68 - v61 * 8) >> 64) + 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v68 = v68 - 8 * v61;
  *((_QWORD *)&v68 + 1) = v40;
  *(_QWORD *)&result = sub_234189800(a2, (unint64_t *)&v62).u64[0];
  return result;
}

void sub_23418A68C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int64x2_t *v5;
  uint64_t v6;
  unint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;

  v3 = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFLL;
  v4 = a1 + 96;
  *(_QWORD *)(a1 + 104) = (*(__int128 *)a2 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 112) = (*(__int128 *)(a2 + 8) >> 48) & 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 120) = (*(__int128 *)(a2 + 16) >> 40) & 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFLL;
  v5 = (int64x2_t *)(a1 + 128);
  *(_QWORD *)(a1 + 136) = (*(__int128 *)(a2 + 72) >> 56) & 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 144) = (*(__int128 *)(a2 + 80) >> 48) & 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 152) = (*(__int128 *)(a2 + 88) >> 40) & 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFLL;
  v6 = a1 + 160;
  *(_QWORD *)(a1 + 168) = (*(__int128 *)(a2 + 144) >> 56) & 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 176) = (*(__int128 *)(a2 + 152) >> 48) & 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 184) = (*(__int128 *)(a2 + 160) >> 40) & 0xFFFFFFFFFFFFFFLL;
  v7 = 2;
  do
  {
    v8 = (int8x16_t *)(a1 + v3 + 192);
    v9 = (int8x16_t *)(a1 + v3 + 224);
    v10 = (int8x16_t *)(a1 + v3 + 256);
    if ((v7 & 1) != 0)
      sub_234189B04((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, v4, v5, v6, 0, (unint64_t *)(a1 + v3 + 96), (unint64_t *)(a1 + v3 + 128), (unint64_t *)(a1 + v3 + 160));
    else
      sub_23418A274(v8, v9, v10, (unint64_t *)(a1 + 96 * (v7 >> 1)), (int64x2_t *)(a1 + 96 * (v7 >> 1) + 32), (int64x2_t *)(a1 + 96 * (v7 >> 1) + 64));
    ++v7;
    v3 += 96;
  }
  while (v3 != 1440);
}

uint64_t sub_23418A804(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t i;
  uint64_t j;

  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      for (j = 0; j != 96; j += 8)
        *(_QWORD *)((char *)a4 + j) |= *(_QWORD *)(a3 + j) & ((((i ^ result) - 1) & ~result) >> 63);
      a3 += 96;
    }
  }
  return result;
}

double sub_23418A868(int8x16_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  _BOOL8 v4;
  unint64_t v5;
  double result;
  unint64_t v7[2];
  unsigned __int128 v8;
  unsigned __int128 v9;
  unsigned __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  v3 = a2[1];
  v4 = *a2 <= 0x100uLL;
  v7[0] = 256 - *a2;
  v7[1] = v4;
  v8 = 0xFFFEFFFFFFFFFF00 - __PAIR128__(v4, v3);
  v5 = a2[3];
  v9 = 0xFFFFFFFFFFFFFF00 - __PAIR128__(v2, a2[2]);
  v10 = 0xFFFFFFFFFFFFFF00 - __PAIR128__(v9, v5);
  *(_QWORD *)&result = sub_234189800(a1, v7).u64[0];
  return result;
}

uint64_t sub_23418A90C(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _BOOL4 v11;
  __int128 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  _OWORD v27[2];
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a1 + 328);
  if ((int)v7 < 1)
  {
    v11 = 1;
  }
  else
  {
    v8 = 0;
    v9 = (uint64_t *)(a2 + 9);
    do
    {
      v10 = *v9++;
      v8 |= v10;
      --v7;
    }
    while (v7);
    v11 = v8 == 0;
  }
  if (v11)
  {
    sub_2341579B4(15, 0, 119, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/ec/p256.c", 421);
    return 0;
  }
  else
  {
    memset(v26, 0, sizeof(v26));
    v13 = a2[10];
    v27[0] = a2[9];
    v27[1] = v13;
    v35 = 0u;
    v36 = 0u;
    memset(v34, 0, sizeof(v34));
    memset(v33, 0, sizeof(v33));
    sub_23418BF80((uint64_t *)&v35, (unint64_t *)v27);
    sub_23418BBE4((uint64_t *)&v35, (unint64_t *)&v35, (unint64_t *)v27);
    sub_23418BF80((uint64_t *)v34, (unint64_t *)&v35);
    sub_23418BBE4((uint64_t *)v34, (unint64_t *)v34, (unint64_t *)v27);
    sub_23418BF80((uint64_t *)v33, (unint64_t *)v34);
    v14 = 2;
    do
    {
      sub_23418BF80((uint64_t *)v33, (unint64_t *)v33);
      --v14;
    }
    while (v14);
    memset(v32, 0, sizeof(v32));
    sub_23418BBE4((uint64_t *)v33, (unint64_t *)v33, (unint64_t *)v34);
    sub_23418BF80((uint64_t *)v32, (unint64_t *)v33);
    v15 = 5;
    do
    {
      sub_23418BF80((uint64_t *)v32, (unint64_t *)v32);
      --v15;
    }
    while (v15);
    memset(v31, 0, sizeof(v31));
    sub_23418BBE4((uint64_t *)v32, (unint64_t *)v32, (unint64_t *)v33);
    sub_23418BF80((uint64_t *)v31, (unint64_t *)v32);
    v16 = 2;
    do
    {
      sub_23418BF80((uint64_t *)v31, (unint64_t *)v31);
      --v16;
    }
    while (v16);
    memset(v30, 0, sizeof(v30));
    sub_23418BBE4((uint64_t *)v31, (unint64_t *)v31, (unint64_t *)v34);
    sub_23418BF80((uint64_t *)v30, (unint64_t *)v31);
    v17 = 14;
    do
    {
      sub_23418BF80((uint64_t *)v30, (unint64_t *)v30);
      --v17;
    }
    while (v17);
    memset(v29, 0, sizeof(v29));
    sub_23418BBE4((uint64_t *)v30, (unint64_t *)v30, (unint64_t *)v31);
    sub_23418BF80((uint64_t *)v29, (unint64_t *)v30);
    sub_23418BF80((uint64_t *)v29, (unint64_t *)v29);
    sub_23418BBE4((uint64_t *)v29, (unint64_t *)v29, (unint64_t *)&v35);
    memset(v28, 0, sizeof(v28));
    sub_23418BF80((uint64_t *)v28, (unint64_t *)v29);
    v18 = 31;
    do
    {
      sub_23418BF80((uint64_t *)v28, (unint64_t *)v28);
      --v18;
    }
    while (v18);
    sub_23418BBE4((uint64_t *)v28, (unint64_t *)v28, (unint64_t *)v27);
    v19 = 128;
    do
    {
      sub_23418BF80((uint64_t *)v28, (unint64_t *)v28);
      --v19;
    }
    while (v19);
    sub_23418BBE4((uint64_t *)v28, (unint64_t *)v28, (unint64_t *)v29);
    v20 = 32;
    do
    {
      sub_23418BF80((uint64_t *)v28, (unint64_t *)v28);
      --v20;
    }
    while (v20);
    sub_23418BBE4((uint64_t *)v28, (unint64_t *)v28, (unint64_t *)v29);
    v21 = 30;
    do
    {
      sub_23418BF80((uint64_t *)v28, (unint64_t *)v28);
      --v21;
    }
    while (v21);
    sub_23418BBE4((uint64_t *)v28, (unint64_t *)v28, (unint64_t *)v30);
    sub_23418BF80((uint64_t *)v28, (unint64_t *)v28);
    sub_23418BF80((uint64_t *)v26, (unint64_t *)v28);
    if (a3)
    {
      v22 = a2[1];
      v35 = *a2;
      v36 = v22;
      sub_23418BBE4((uint64_t *)&v35, (unint64_t *)&v35, (unint64_t *)v26);
      v23 = v36;
      *a3 = v35;
      a3[1] = v23;
    }
    if (a4)
    {
      v24 = *(_OWORD *)((char *)a2 + 88);
      v35 = *(_OWORD *)((char *)a2 + 72);
      v36 = v24;
      sub_23418BF80((uint64_t *)v26, (unint64_t *)v26);
      sub_23418BBE4((uint64_t *)&v35, (unint64_t *)&v35, (unint64_t *)v27);
      sub_23418BBE4((uint64_t *)&v35, (unint64_t *)&v35, (unint64_t *)v26);
      v25 = v36;
      *a4 = v35;
      a4[1] = v25;
    }
    return 1;
  }
}

double sub_23418AC78(uint64_t a1, _OWORD *a2, __int128 *a3, _OWORD *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  _OWORD v16[2];
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v22 = *a3;
  v23 = v5;
  v6 = *(__int128 *)((char *)a3 + 88);
  v20 = *(__int128 *)((char *)a3 + 72);
  v21 = v6;
  v7 = a3[10];
  v18 = a3[9];
  v19 = v7;
  v8 = a4[1];
  v17[0] = *a4;
  v17[1] = v8;
  v9 = *(_OWORD *)((char *)a4 + 88);
  v16[0] = *(_OWORD *)((char *)a4 + 72);
  v16[1] = v9;
  v10 = a4[10];
  v15[0] = a4[9];
  v15[1] = v10;
  sub_23418C2D8((uint64_t *)&v22, (uint64_t *)&v20, (uint64_t *)&v18, (uint64_t)&v22, (unint64_t *)&v20, (unint64_t *)&v18, 0, (unint64_t *)v17, (unint64_t *)v16, (unint64_t *)v15);
  v11 = v23;
  *a2 = v22;
  a2[1] = v11;
  v12 = v21;
  *(_OWORD *)((char *)a2 + 72) = v20;
  *(_OWORD *)((char *)a2 + 88) = v12;
  result = *(double *)&v18;
  v14 = v19;
  a2[9] = v18;
  a2[10] = v14;
  return result;
}

double sub_23418AD4C(uint64_t a1, _OWORD *a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3[1];
  v15 = *a3;
  v16 = v4;
  v5 = *(__int128 *)((char *)a3 + 88);
  v13 = *(__int128 *)((char *)a3 + 72);
  v14 = v5;
  v6 = a3[10];
  v11 = a3[9];
  v12 = v6;
  sub_23418CD8C((uint64_t *)&v15, (uint64_t *)&v13, (uint64_t *)&v11, (unint64_t *)&v15, (unint64_t *)&v13, (unint64_t *)&v11);
  v7 = v16;
  *a2 = v15;
  a2[1] = v7;
  v8 = v14;
  *(_OWORD *)((char *)a2 + 72) = v13;
  *(_OWORD *)((char *)a2 + 88) = v8;
  result = *(double *)&v11;
  v10 = v12;
  a2[9] = v11;
  a2[10] = v10;
  return result;
}

double sub_23418ADF0(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  unint64_t i;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  double result;
  __int128 v67;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[3];
  _BYTE v82[48];
  _OWORD v83[2];
  _OWORD v84[2];
  _OWORD v85[92];
  _QWORD v86[9];

  v86[0] = *MEMORY[0x24BDAC8D0];
  bzero(v81, 0x660uLL);
  v6 = a3[1];
  v83[0] = *a3;
  v83[1] = v6;
  v7 = *(_OWORD *)((char *)a3 + 88);
  v84[0] = *(_OWORD *)((char *)a3 + 72);
  v84[1] = v7;
  v8 = a3[9];
  v9 = a3[10];
  v10 = -1440;
  v11 = 2;
  v85[0] = v8;
  v85[1] = v9;
  do
  {
    v12 = &v86[v10 / 8];
    v13 = &v86[v10 / 8 + 4];
    v14 = &v86[v10 / 8 + 8];
    if ((v11 & 1) != 0)
      sub_23418C2D8(v12, v13, v14, (uint64_t)v83, (unint64_t *)v84, (unint64_t *)v85, 0, (unint64_t *)&v85[v10 / 0x10 + 86], (unint64_t *)&v85[v10 / 0x10 + 88], (unint64_t *)&v85[v10 / 0x10 + 90]);
    else
      sub_23418CD8C(v12, v13, v14, (unint64_t *)&v81[6 * (v11 >> 1)], (unint64_t *)&v81[6 * (v11 >> 1) + 2], (unint64_t *)&v82[96 * (v11 >> 1) + 16]);
    ++v11;
    v10 += 96;
  }
  while (v10);
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v15 = 1;
  for (i = 255; i < 0x100; --i)
  {
    if (!v15)
      sub_23418CD8C((uint64_t *)&v75, (uint64_t *)&v77, (uint64_t *)&v79, (unint64_t *)&v75, (unint64_t *)&v77, (unint64_t *)&v79);
    if (-858993459 * i <= 0x33333333)
    {
      if (i <= 0xFB)
      {
        v17 = 32 * ((*(_QWORD *)(a4 + 8 * ((i + 4) >> 6)) >> (i + 4)) & 1);
        v18 = i + 3;
      }
      else
      {
        if ((_DWORD)i != 252)
        {
          if (i > 0xFD)
          {
            v21 = 0;
            if ((_DWORD)i != 254)
            {
              v23 = 0;
LABEL_17:
              if ((i - 1) <= 0xFF)
                v24 = (*(_QWORD *)(a4 + 8 * ((i - 1) >> 6)) >> (i - 1)) & 1;
              else
                v24 = 0;
              v25 = 0;
              v26 = 0;
              v27 = 0;
              v28 = 0;
              v29 = 0;
              v30 = 0;
              v31 = 0;
              v32 = 0;
              v33 = 0;
              v34 = 0;
              v35 = 0;
              v36 = 0;
              v37 = 0;
              v38 = (4 * v23) | (2 * ((*(_QWORD *)(a4 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1)) | v24 | v21;
              v39 = (v21 >> 5) - 1;
              v40 = -(uint64_t)(v21 >> 5);
              v41 = (((v38 ^ 0x3F) & v40 | v38 & v39) & 1) + (((v38 ^ 0x3F) & v40 | v38 & (unint64_t)v39) >> 1);
              v42 = v82;
              do
              {
                if (v41 == v37)
                  v43 = -1;
                else
                  v43 = 0;
                if (v41 == v37)
                  v44 = 0;
                else
                  v44 = -1;
                v36 = v43 & *(v42 - 6) | v44 & v36;
                v33 = v33 & v44 | *(v42 - 5) & v43;
                v32 = v32 & v44 | *(v42 - 4) & v43;
                v31 = v31 & v44 | *(v42 - 3) & v43;
                v35 = v35 & v44 | *(v42 - 2) & v43;
                v30 = v30 & v44 | *(v42 - 1) & v43;
                v29 = v29 & v44 | *v42 & v43;
                v28 = v28 & v44 | v42[1] & v43;
                v34 = v34 & v44 | v42[2] & v43;
                v27 = v27 & v44 | v42[3] & v43;
                v26 = v26 & v44 | v42[4] & v43;
                v25 = v25 & v44 | v42[5] & v43;
                ++v37;
                v42 += 12;
              }
              while (v37 != 17);
              *(_QWORD *)&v70 = v32;
              *((_QWORD *)&v70 + 1) = v31;
              *(_QWORD *)&v74 = v26;
              *((_QWORD *)&v74 + 1) = v25;
              *(_QWORD *)&v69 = v36;
              *((_QWORD *)&v69 + 1) = v33;
              *(_QWORD *)&v73 = v34;
              *((_QWORD *)&v73 + 1) = v27;
              v45 = __CFADD__(v30, -(uint64_t)((unsigned __int128)-(__int128)__PAIR128__(v25, v35) >> 64));
              v46 = v30 + -(uint64_t)((unsigned __int128)-(__int128)__PAIR128__(v25, v35) >> 64);
              v47 = v45;
              v45 = v46 == 0;
              v48 = -v46;
              v50 = (v47 + !v45);
              v49 = v29 + v50;
              v51 = __CFADD__(v29, v50);
              v45 = v49 == 0;
              v52 = -v49;
              v54 = (v51 + !v45);
              v53 = v28 + v54;
              v55 = __CFADD__(v28, v54);
              v45 = v53 == 0;
              v56 = -v53;
              if (v55 + !v45)
                v57 = -1;
              else
                v57 = 0;
              v58 = v57 - v35;
              v45 = __CFADD__(__CFADD__(-v35, v57), v48);
              v59 = __CFADD__(-v35, v57) + v48;
              v45 |= __CFADD__(v57, v59);
              v59 += v57;
              v60 = v56 + __CFADD__(v45, v52) + (v57 & 0xFFFFFFFF00000001);
              v61 = v40;
              v62 = v40 & v58;
              v63 = ~v40;
              *(_QWORD *)&v71 = v63 & v35 | v62;
              *((_QWORD *)&v71 + 1) = v61 & v59 | v63 & v30;
              *(_QWORD *)&v72 = v61 & (v45 + v52) | v63 & v29;
              *((_QWORD *)&v72 + 1) = v60 & v61 | v63 & v28;
              if (v15)
              {
                v15 = 0;
                v75 = v69;
                v76 = v70;
                v77 = v71;
                v78 = v72;
                v79 = v73;
                v80 = v74;
              }
              else
              {
                sub_23418C2D8((uint64_t *)&v75, (uint64_t *)&v77, (uint64_t *)&v79, (uint64_t)&v75, (unint64_t *)&v77, (unint64_t *)&v79, 0, (unint64_t *)&v69, (unint64_t *)&v71, (unint64_t *)&v73);
              }
              continue;
            }
            v22 = 255;
LABEL_16:
            v23 = (*(_QWORD *)(a4 + 8 * (v22 >> 6)) >> v22) & 1;
            goto LABEL_17;
          }
          v19 = 0;
          v20 = 255;
LABEL_15:
          v21 = (8 * ((*(_QWORD *)(a4 + 8 * (v20 >> 6)) >> v20) & 1)) | v19;
          v22 = i + 1;
          goto LABEL_16;
        }
        v17 = 0;
        v18 = 255;
      }
      v19 = (16 * ((*(_QWORD *)(a4 + 8 * (v18 >> 6)) >> v18) & 1)) | v17;
      v20 = i + 2;
      goto LABEL_15;
    }
  }
  v64 = v76;
  *a2 = v75;
  a2[1] = v64;
  v65 = v78;
  *(_OWORD *)((char *)a2 + 72) = v77;
  *(_OWORD *)((char *)a2 + 88) = v65;
  result = *(double *)&v79;
  v67 = v80;
  a2[9] = v79;
  a2[10] = v67;
  return result;
}

double sub_23418B2BC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[2];
  _OWORD v13[2];
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v5 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v6 = 223;
  do
  {
    if ((v5 & 1) != 0)
      sub_23418CD8C((uint64_t *)&v15, (uint64_t *)&v17, (uint64_t *)&v19, (unint64_t *)&v15, (unint64_t *)&v17, (unint64_t *)&v19);
    sub_23418D794((8 * ((*(_QWORD *)(a3 + 8 * ((v6 + 32) >> 6)) >> (v6 + 96)) & 1)) | (4 * ((*(_QWORD *)(a3 + 8 * ((v6 - 32) >> 6)) >> (v6 + 96)) & 1)) | (2 * ((*(_QWORD *)(a3 + 8 * ((v6 - 96) >> 6)) >> (v6 + 96)) & 1)) | (*(_QWORD *)(a3 + 8 * ((v6 - 160) >> 6)) >> (v6 + 96)) & 1, (uint64_t)&unk_2342E4418, v12);
    if ((v5 & 1) != 0)
    {
      sub_23418C2D8((uint64_t *)&v15, (uint64_t *)&v17, (uint64_t *)&v19, (uint64_t)&v15, (unint64_t *)&v17, (unint64_t *)&v19, 1, (unint64_t *)v12, (unint64_t *)v13, (unint64_t *)v14);
    }
    else
    {
      v15 = v12[0];
      v16 = v12[1];
      v17 = v13[0];
      v18 = v13[1];
      v19 = v14[0];
      v20 = v14[1];
    }
    sub_23418D794((8 * ((*(_QWORD *)(a3 + 8 * (v6 >> 6)) >> v6) & 1)) | (4* ((*(_QWORD *)(a3+ 8* ((v6 - 64) >> 6)) >> (v6 + 64)) & 1)) | (2 * ((*(_QWORD *)(a3 + 8 * ((v6 - 128) >> 6)) >> (v6 + 64)) & 1)) | (*(_QWORD *)(a3 + 8 * ((v6 - 192) >> 6)) >> (v6 + 64)) & 1, (uint64_t)&unk_2342E4058, v12);
    v5 = 1;
    sub_23418C2D8((uint64_t *)&v15, (uint64_t *)&v17, (uint64_t *)&v19, (uint64_t)&v15, (unint64_t *)&v17, (unint64_t *)&v19, 1, (unint64_t *)v12, (unint64_t *)v13, (unint64_t *)v14);
    v7 = v6 - 193;
    --v6;
  }
  while (v7 < 0x20);
  v8 = v16;
  *a2 = v15;
  a2[1] = v8;
  v9 = v18;
  *(_OWORD *)((char *)a2 + 72) = v17;
  *(_OWORD *)((char *)a2 + 88) = v9;
  result = *(double *)&v19;
  v11 = v20;
  a2[9] = v19;
  a2[10] = v11;
  return result;
}

double sub_23418B4E4(uint64_t a1, _OWORD *a2, uint64_t a3, _OWORD *a4, _DWORD *a5)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t i;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  _OWORD *v20;
  unint64_t *v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  BOOL v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  double result;
  __int128 v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[257];
  unint64_t v60[4];
  uint64_t v61[4];
  uint64_t v62[4];
  _OWORD v63[2];
  _OWORD v64[2];
  _OWORD v65[44];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v8 = a4[1];
  v63[0] = *a4;
  v63[1] = v8;
  v9 = *(_OWORD *)((char *)a4 + 88);
  v64[0] = *(_OWORD *)((char *)a4 + 72);
  v64[1] = v9;
  v10 = a4[10];
  v65[0] = a4[9];
  v65[1] = v10;
  sub_23418CD8C((uint64_t *)v60, v61, v62, (unint64_t *)v63, (unint64_t *)v64, (unint64_t *)v65);
  for (i = 0; i != 42; i += 6)
    sub_23418C2D8((uint64_t *)&v65[i + 2], (uint64_t *)&v65[i + 4], (uint64_t *)&v65[i + 6], (uint64_t)&v63[i], (unint64_t *)&v63[i + 2], (unint64_t *)&v65[i], 0, v60, (unint64_t *)v61, (unint64_t *)v62);
  v12 = 256;
  sub_234178C18(a1, v59, a5, 0x100uLL, 4);
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v14 = 1;
  do
  {
    if (!v14)
      sub_23418CD8C((uint64_t *)&v53, (uint64_t *)&v55, (uint64_t *)&v57, (unint64_t *)&v53, (unint64_t *)&v55, (unint64_t *)&v57);
    if (v12 <= 0x1F)
    {
      v15 = (8 * ((*(_QWORD *)(a3 + 8 * ((v12 + 224) >> 6)) >> (v12 - 32)) & 1)) | (4 * ((*(_QWORD *)(a3 + 8 * ((v12 + 160) >> 6)) >> (v12 - 96)) & 1)) | (2 * ((*(_QWORD *)(a3 + 8 * ((v12 + 96) >> 6)) >> (v12 + 96)) & 1)) | (*(_QWORD *)(a3 + (((v12 + 32) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 + 32)) & 1;
      if (v15)
      {
        sub_23418C2D8((uint64_t *)&v53, (uint64_t *)&v55, (uint64_t *)&v57, (uint64_t)&v53, (unint64_t *)&v55, (unint64_t *)&v57, 1, &qword_2342E4058[8 * v15 + 112], &qword_2342E4058[8 * v15 + 116], (unint64_t *)&xmmword_2342E3048);
        v14 = 0;
      }
      v16 = (8 * ((*(_QWORD *)(a3 + (((v12 + 192) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1)) | (4
                                                                                                  * ((*(_QWORD *)(a3 + (((v12 + 128) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1)) | (2 * ((*(_QWORD *)(a3 + (((v12 + 64) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1)) | (*(_QWORD *)(a3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1;
      if (v16)
      {
        sub_23418C2D8((uint64_t *)&v53, (uint64_t *)&v55, (uint64_t *)&v57, (uint64_t)&v53, (unint64_t *)&v55, (unint64_t *)&v57, 1, &qword_2342E4058[8 * v16 - 8], &qword_2342E4058[8 * v16 - 4], (unint64_t *)&xmmword_2342E3048);
        v14 = 0;
      }
    }
    v17 = (char)v59[v12];
    if (v59[v12])
    {
      if (v17 >= 0)
        LOBYTE(v18) = v59[v12];
      else
        v18 = -v17;
      v19 = v18 >> 1;
      v20 = &v63[6 * v19];
      v21 = (unint64_t *)(v20 + 2);
      v51 = 0u;
      v52 = 0u;
      if (v17 < 0)
      {
        v26 = *((_QWORD *)v20 + 5);
        v27 = -(uint64_t)*v21;
        v28 = -(uint64_t)((unsigned __int128)-(__int128)__PAIR128__(v13, *v21) >> 64);
        v29 = __CFADD__(v26, v28);
        v30 = v26 + v28;
        v31 = v29;
        v29 = v30 == 0;
        v32 = -v30;
        v34 = *((_QWORD *)v20 + 6);
        v33 = *((_QWORD *)v20 + 7);
        v36 = (v31 + !v29);
        v35 = v34 + v36;
        v37 = __CFADD__(v34, v36);
        v29 = v35 == 0;
        v38 = -v35;
        v39 = v37 + !v29;
        v29 = __CFADD__(v33, v39);
        v40 = v33 + v39;
        v41 = v29;
        v29 = v40 == 0;
        v42 = -v40;
        if (v41 + !v29)
          v43 = -1;
        else
          v43 = 0;
        v29 = __CFADD__(__CFADD__(v27, v43), v32);
        v44 = __CFADD__(v27, v43) + v32;
        v45 = v29 | __CFADD__(v43, v44);
        v29 = __CFADD__(v45, v38);
        v13 = v45 + v38;
        *(_QWORD *)&v51 = v27 + v43;
        *((_QWORD *)&v51 + 1) = v43 + v44;
        *(_QWORD *)&v52 = v13;
        *((_QWORD *)&v52 + 1) = v42 + v29 + (v43 & 0xFFFFFFFF00000001);
        v21 = (unint64_t *)&v51;
        if (v14)
          goto LABEL_17;
      }
      else if (v14)
      {
LABEL_17:
        v22 = v20[1];
        v53 = *v20;
        v54 = v22;
        v23 = *((_OWORD *)v21 + 1);
        v55 = *(_OWORD *)v21;
        v56 = v23;
        v24 = &v63[6 * v19];
        v25 = v24[5];
        v57 = v24[4];
        v58 = v25;
LABEL_32:
        v14 = 0;
        goto LABEL_33;
      }
      sub_23418C2D8((uint64_t *)&v53, (uint64_t *)&v55, (uint64_t *)&v57, (uint64_t)&v53, (unint64_t *)&v55, (unint64_t *)&v57, 0, (unint64_t *)v20, v21, (unint64_t *)&v65[6 * v19]);
      goto LABEL_32;
    }
LABEL_33:
    --v12;
  }
  while (v12 != -1);
  v46 = v54;
  *a2 = v53;
  a2[1] = v46;
  v47 = v56;
  *(_OWORD *)((char *)a2 + 72) = v55;
  *(_OWORD *)((char *)a2 + 88) = v47;
  result = *(double *)&v57;
  v49 = v58;
  a2[9] = v57;
  a2[10] = v49;
  return result;
}

BOOL sub_23418B8A4(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  _BOOL8 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  unint64_t v41;
  _BOOL8 v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int128 v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  BOOL v75;
  BOOL v77;
  BOOL v78;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a1 + 328);
  if ((int)v3 < 1)
    return 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v8 |= *(_QWORD *)((char *)a2 + v7 + 144);
    v7 += 8;
  }
  while (8 * v3 != v7);
  if (!v8)
    return 0;
  v9 = a2[10];
  v90[0] = a2[9];
  v90[1] = v9;
  sub_23418BBE4((uint64_t *)v90, (unint64_t *)v90, (unint64_t *)v90);
  v10 = *((_OWORD *)a3 + 1);
  v88 = *(_OWORD *)a3;
  v89 = v10;
  sub_23418BBE4((uint64_t *)&v88, (unint64_t *)&v88, (unint64_t *)v90);
  v11 = a2[1];
  v86 = *a2;
  v12 = ((unint64_t)v86 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v13 = ((unint64_t)v86 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  v14 = 0xFFFFFFFFLL * v86 + __CFADD__(-(uint64_t)v86, (_QWORD)v86) + v13;
  v15 = __CFADD__(__CFADD__(-(uint64_t)v86, (_QWORD)v86), v13) | __CFADD__(0xFFFFFFFFLL * v86, __CFADD__(-(uint64_t)v86, (_QWORD)v86)+ v13)? (((unint64_t)v86 * (unsigned __int128)0xFFFFFFFFuLL) >> 64) + 1: ((unint64_t)v86 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v32 = __CFADD__(v14, *((_QWORD *)&v86 + 1));
  v16 = v14 + *((_QWORD *)&v86 + 1);
  v17 = v32;
  v18 = 0xFFFFFFFF00000001 * v16;
  v19 = (__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v16) >> 64;
  v20 = v17 + __CFADD__(-v16, v16) + v15;
  v32 = __CFADD__(v20, v19);
  v21 = v20 + v19;
  v22 = v32 - 0xFFFFFFFFLL * v86;
  v23 = __CFADD__(v32, 0xFFFFFFFF00000001 * v86);
  v32 = __CFADD__(v18, v12);
  v24 = v18 + v12;
  v25 = v32;
  v32 = __CFADD__(((unint64_t)v16 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFFLL * v16);
  v87 = v11;
  v26 = ((unint64_t)v16 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v27 = ((unint64_t)v16 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v29 = v32 + v22;
  v32 = __CFADD__(v32, v22) | __CFADD__(v27, v29);
  v28 = v27 + v29;
  v30 = v23 + v32 + v24;
  v31 = __CFADD__(v32, v24) | __CFADD__(v23, v32 + v24) ? v25 + 1 : v25;
  v32 = __CFADD__(v21, (_QWORD)v87);
  v33 = v21 + v87;
  v34 = v32;
  v35 = v32 + v28;
  v36 = (v33 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  v37 = __PAIR128__(v31, __CFADD__(v32, v28)) + __PAIR128__(v26, v30);
  v38 = 0xFFFFFFFF * v33;
  v39 = (__PAIR128__(0xFFFFFFFFLL, -1) * v33) >> 64;
  v40 = v34 + __CFADD__(-(uint64_t)v33, v33) + v28;
  v41 = (__CFADD__(__CFADD__(-(uint64_t)v33, v33), v35) | __CFADD__(v39, __CFADD__(-(uint64_t)v33, v33) + v35))+ (_QWORD)v37;
  v42 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v33, v33), v35) | __CFADD__(v39, __CFADD__(-(uint64_t)v33, v33) + v35), (_QWORD)v37);
  v43 = __CFADD__(0xFFFFFFFF00000001 * v33, *((_QWORD *)&v37 + 1));
  v44 = 0xFFFFFFFF * v33;
  v45 = (v33 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v46 = (v33 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v47 = v40 + v36 + v38;
  v32 = __CFADD__(__CFADD__(v36, v38), v41) | __CFADD__(v46, (__PAIR128__(v41, v36) + (unint64_t)v44) >> 64);
  v48 = v46 + ((__PAIR128__(v41, v36) + (unint64_t)v44) >> 64);
  v49 = v42 + v32 + *((_QWORD *)&v37 + 1);
  v50 = __CFADD__(v32, *((_QWORD *)&v37 + 1)) | __CFADD__(v42, v32 + *((_QWORD *)&v37 + 1))
      ? v43 + 1
      : v43;
  v51 = __CFADD__(v47, *((_QWORD *)&v87 + 1));
  v52 = v47 + *((_QWORD *)&v87 + 1);
  v53 = v51;
  v54 = v51 + v48;
  v55 = (v52 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v56 = __PAIR128__(v50, __CFADD__(v51, v48)) + __PAIR128__(v45, v49);
  v57 = 0xFFFFFFFF00000001 * v52;
  v58 = -(uint64_t)v52;
  v59 = (__PAIR128__(0xFFFFFFFFLL, -1) * v52) >> 64;
  v60 = __CFADD__((v52 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * v52)
      ? ((v52 * (unsigned __int128)0xFFFFFFFFuLL) >> 64) + 1
      : (v52 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v32 = __CFADD__(v58, v52);
  v61 = v53 + __CFADD__(v58, v52) + v48 + v59;
  v62 = v60 + (__CFADD__(v32, v54) | __CFADD__(v59, v32 + v54)) + (_QWORD)v56;
  v64 = __CFADD__(__CFADD__(v32, v54) | __CFADD__(v59, v32 + v54), (_QWORD)v56) | __CFADD__(v60, (__CFADD__(v32, v54) | __CFADD__(v59, v32 + v54)) + (_QWORD)v56);
  v63 = *((_QWORD *)&v56 + 1) + v64 + v57;
  v65 = __CFADD__(v64, v57) | __CFADD__(*((_QWORD *)&v56 + 1), v64 + v57) ? v55 + 1 : v55;
  v67 = v62 - (1 - __CFADD__(v61, 1));
  v66 = (v62 - __PAIR128__(v55, (1 - __CFADD__(v61, 1)))) >> 64;
  v68 = (unint64_t)v65
      - __PAIR128__(v59, -(uint64_t)((v63- __PAIR128__(v66, (1 - (__CFADD__(v67, 0xFFFFFFFF00000001) + v66)))) >> 64));
  v69 = __CFADD__((_QWORD)v68, 0xFFFFFFFFLL) + BYTE8(v68) == 1 ? -1 : 0;
  v70 = v69 & (v61 + 1) | *((_QWORD *)&v68 + 1) & v61;
  v71 = v69 & (v67 - 0xFFFFFFFF) | *((_QWORD *)&v68 + 1) & v62;
  v72 = v69 & (v63 - (1 - (__CFADD__(v67, 0xFFFFFFFF00000001) + v66))) | *((_QWORD *)&v68 + 1) & v63;
  v73 = v69 & (v68 + 0xFFFFFFFF) | v65 & *((_QWORD *)&v68 + 1);
  *(_QWORD *)&v86 = v70;
  *((_QWORD *)&v86 + 1) = v71;
  *(_QWORD *)&v87 = v72;
  *((_QWORD *)&v87 + 1) = v73;
  v74 = (_QWORD)v88 == v70 && *((_QWORD *)&v88 + 1) == v71;
  v75 = v74 && (_QWORD)v89 == v72;
  if (v75 && *((_QWORD *)&v89 + 1) == v73)
    return 1;
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  if (sub_2341617E0(&v81, a3, *(uint64_t **)(a1 + 256), (int)v3)
    || (sub_234162948((uint64_t *)&v81, *(int *)(a1 + 328), *(uint64_t **)(a1 + 320), *(int *)(a1 + 328)) & 0x80000000) == 0)
  {
    return 0;
  }
  v88 = v81;
  v89 = v82;
  sub_23418BBE4((uint64_t *)&v88, (unint64_t *)&v88, (unint64_t *)v90);
  v77 = (_QWORD)v88 == (_QWORD)v86 && *((_QWORD *)&v88 + 1) == *((_QWORD *)&v86 + 1);
  v78 = v77 && (_QWORD)v89 == (_QWORD)v87;
  return v78 && *((_QWORD *)&v89 + 1) == *((_QWORD *)&v87 + 1);
}

uint64_t *sub_23418BBE4(uint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t StatusReg;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int128 v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int128 v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BOOL8 v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BOOL8 v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unsigned __int128 v160;
  uint64_t v161;
  uint64_t v162;

  v4 = *a2;
  v3 = a2[1];
  v6 = a3[2];
  v5 = a3[3];
  v7 = v5 * *a2;
  v8 = v6 * *a2;
  v9 = (v6 * (unsigned __int128)*a2) >> 64;
  v11 = *a3;
  v10 = a3[1];
  v12 = (v10 * (unsigned __int128)*a2) >> 64;
  v13 = v10 * *a2;
  v14 = (v11 * (unsigned __int128)*a2) >> 64;
  v15 = v11 * *a2;
  v16 = (v15 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v17 = (__PAIR128__(0xFFFFFFFFLL, -1) * v15) >> 64;
  if (__CFADD__((v15 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * v15))
    ++v16;
  v18 = v14 + v13;
  v30 = __CFADD__(__CFADD__(v14, v13), v12) | __CFADD__(v8, __CFADD__(v14, v13) + v12);
  v19 = v8 + __CFADD__(v14, v13) + v12;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v21 = v9 + v7 + v30 - 0xFFFFFFFF * v15;
  v22 = v13 + __CFADD__(-(uint64_t)(v11 * v4), v15) + v14 + v17;
  v23 = v16
      + (__CFADD__(__CFADD__(-(uint64_t)(v11 * v4), v15), v18) | __CFADD__(v17, __CFADD__(-(uint64_t)(v11 * v4), v15)+ v18))+ v19;
  v24 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v25 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v26 = (v11 * (unsigned __int128)v3) >> 64;
  v27 = v6 * v3 + __CFADD__(v26, v10 * v3) + ((v10 * (unsigned __int128)v3) >> 64);
  v28 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v29 = __PAIR128__(v10 * v3, v22) + v11 * (unsigned __int128)v3;
  v30 = __CFADD__(__CFADD__(v22, v11 * v3), (__PAIR128__(v10, v11) * v3) >> 64) | __CFADD__(v23, __CFADD__(v22, v11 * v3)+ ((__PAIR128__(v10, v11) * v3) >> 64));
  v31 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  if (v30)
    v32 = v27 + 1;
  else
    v32 = v6 * v3 + __CFADD__(v26, v10 * v3) + ((v10 * (unsigned __int128)v3) >> 64);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v25);
  v33 = v21
      + (__CFADD__(__CFADD__(v22, v11 * v3), (__PAIR128__(v10, v11) * v3) >> 64) | __CFADD__(v23, __CFADD__(v22, v11 * v3) + ((__PAIR128__(v10, v11) * v3) >> 64)))
      + v32;
  v34 = (v5 * (unsigned __int128)v3) >> 64;
  v35 = v5 * v3;
  v36 = (v6 * (unsigned __int128)v3) >> 64;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v28);
  v39 = v30;
  v37 = __CFADD__(v30, v36) | __CFADD__(v35, v30 + v36);
  v38 = v35 + v39 + v36;
  if (v37)
    ++v34;
  v40 = (v5 * (unsigned __int128)v4) >> 64;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  v43 = v37;
  v41 = __CFADD__(v37, v9) | __CFADD__(v7, v37 + v9);
  v42 = v7 + v43 + v9;
  if (v41)
    v44 = v40 + 1;
  else
    v44 = v40;
  v45 = (v15 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v24);
  if (v41)
    v46 = v21 + 1;
  else
    v46 = v21;
  v48 = __CFADD__(v41, v42) | __CFADD__(0xFFFFFFFF00000001 * v15, v41 + v42);
  v47 = v44 + v48 + v45;
  v51 = __CFADD__(v48, v45) | __CFADD__(v44, v48 + v45);
  v49 = __CFADD__(v51, v34);
  v50 = v51 + v34;
  v52 = __CFADD__(v51, v34);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v31);
  v54 = __CFADD__(v49, v27) | __CFADD__(v46, v49 + v27);
  v53 = v47 + v54 + v38;
  v55 = (__CFADD__(v54, v38) | __CFADD__(v47, v54 + v38)) + v50;
  v56 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v57 = ((unint64_t)v29 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  v58 = (__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v29) >> 64;
  v59 = v23 + __CFADD__(-(uint64_t)v29, (_QWORD)v29) + *((_QWORD *)&v29 + 1);
  v30 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v29, (_QWORD)v29), *((_QWORD *)&v29 + 1) + v23) | __CFADD__(v58, __CFADD__(-(uint64_t)v29, (_QWORD)v29) + *((_QWORD *)&v29 + 1) + v23), v33);
  v60 = (__CFADD__(__CFADD__(-(uint64_t)v29, (_QWORD)v29), *((_QWORD *)&v29 + 1) + v23) | __CFADD__(v58, __CFADD__(-(uint64_t)v29, (_QWORD)v29) + *((_QWORD *)&v29 + 1) + v23))
      + v33;
  v61 = v30;
  v62 = ((unint64_t)v29 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v63 = ((unint64_t)v29 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v30 = __CFADD__(__CFADD__(v57, 0xFFFFFFFF * v29), v60) | __CFADD__(v63, (__PAIR128__(v60, v57)+ (unint64_t)(0xFFFFFFFF * v29)) >> 64);
  v64 = v63 + ((__PAIR128__(v60, v57) + (unint64_t)(0xFFFFFFFF * v29)) >> 64);
  v65 = v61 + v30 - 0xFFFFFFFF * v29;
  if (__CFADD__(v30, 0xFFFFFFFF00000001 * v29) | __CFADD__(v61, v30 - 0xFFFFFFFF * v29))
    v66 = 1;
  else
    v66 = 0;
  v30 = __CFADD__(v65, v53);
  v69 = (__PAIR128__(v62, v65) + v53) >> 64;
  v67 = v65 + v53;
  v30 = __CFADD__(v30, v62) | __CFADD__(v66, v69);
  v68 = v66 + v69;
  v70 = v30;
  v71 = __CFADD__(v68, v55);
  v72 = v68 + v55;
  if (v71)
    ++v70;
  v73 = v59 + ((__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v29) >> 64);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v56);
  v74 = v52 + v71 + v70;
  v76 = a2[2];
  v75 = a2[3];
  v77 = (v5 * (unsigned __int128)v76) >> 64;
  v78 = v5 * v76;
  v79 = (v6 * (unsigned __int128)v76) >> 64;
  v80 = v6 * v76;
  v81 = (v10 * (unsigned __int128)v76) >> 64;
  v82 = v10 * v76;
  v83 = v11 * v76;
  v84 = (v11 * (unsigned __int128)v76) >> 64;
  v85 = v84 + v82;
  v30 = __CFADD__(__CFADD__(v84, v82), v81) | __CFADD__(v80, __CFADD__(v84, v82) + v81);
  v86 = v80 + __CFADD__(v84, v82) + v81;
  v88 = v30 + v79;
  v30 = __CFADD__(v30, v79) | __CFADD__(v78, v88);
  v87 = v78 + v88;
  if (v30)
    ++v77;
  v89 = __PAIR128__(v84, v73) + __PAIR128__(v82, v83);
  v90 = ((__PAIR128__(v84, v73) + __PAIR128__(v82, v83)) >> 64) + v64;
  v92 = (__CFADD__(__CFADD__(v73, v83), v85) | __CFADD__(v64, __CFADD__(v73, v83) + v85)) + v86;
  v30 = __CFADD__(__CFADD__(__CFADD__(v73, v83), v85) | __CFADD__(v64, __CFADD__(v73, v83) + v85), v86) | __CFADD__(v67, v92);
  v91 = v67 + v92;
  v94 = v30 + v87;
  v30 = __CFADD__(v30, v87) | __CFADD__(v72, v94);
  v93 = v72 + v94;
  v95 = v77 + v30 + v74;
  v96 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v97 = 0xFFFFFFFF00000001 * (v73 + v83);
  v98 = v64 + __CFADD__(-(uint64_t)v89, (_QWORD)v89) + *((_QWORD *)&v89 + 1);
  v99 = (__CFADD__(__CFADD__(-(uint64_t)v89, (_QWORD)v89), v90) | __CFADD__((__PAIR128__(0xFFFFFFFFLL, -1)* (v73 + v83)) >> 64, __CFADD__(-(uint64_t)v89, (_QWORD)v89)+ v90))+ v91;
  v30 = __CFADD__(((v73 + v83) * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * (v73 + v83));
  v100 = (__PAIR128__(0xFFFFFFFFLL, -1) * (v73 + v83)) >> 64;
  v101 = ((v73 + v83) * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v102 = ((v73 + v83) * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v104 = v30;
  v30 = __CFADD__(v30, v99);
  v103 = v104 + v99;
  v30 |= __CFADD__(v102, v103);
  v103 += v102;
  v106 = v30 + v97;
  v105 = *((_QWORD *)&v89 + 1) + v106;
  if (__CFADD__(v30, v97) | __CFADD__(*((_QWORD *)&v89 + 1), v106))
    v107 = 1;
  else
    v107 = 0;
  v30 = __CFADD__(v105, v93);
  v108 = v105 + v93;
  v109 = v107 + v30 + v101;
  if (__CFADD__(v30, v101) | __CFADD__(v107, v30 + v101))
    v110 = 1;
  else
    v110 = 0;
  v111 = __CFADD__(v109, v95);
  v112 = v109 + v95;
  if (v111)
    v113 = v110 + 1;
  else
    v113 = v110;
  v114 = v98 + v100;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v96);
  if (v111)
    ++v113;
  v115 = (v5 * (unsigned __int128)v75) >> 64;
  v116 = v5 * v75;
  v117 = (v6 * (unsigned __int128)v75) >> 64;
  v118 = v6 * v75;
  v119 = (v10 * (unsigned __int128)v75) >> 64;
  v120 = v10 * v75;
  v121 = v11 * v75;
  v122 = (v11 * (unsigned __int128)v75) >> 64;
  v123 = v122 + v120;
  v30 = __CFADD__(__CFADD__(v122, v120), v119) | __CFADD__(v118, __CFADD__(v122, v120) + v119);
  v124 = v118 + __CFADD__(v122, v120) + v119;
  v126 = v30 + v117;
  v30 = __CFADD__(v30, v117) | __CFADD__(v116, v126);
  v125 = v116 + v126;
  if (v30)
    ++v115;
  v30 = __CFADD__(v114, v121);
  v127 = v114 + v121;
  v128 = v120 + v30 + v122;
  v129 = v128 + v103;
  v131 = __CFADD__(v30, v123) | __CFADD__(v103, v30 + v123);
  v30 = __CFADD__(v131, v124);
  v130 = v131 + v124;
  v30 |= __CFADD__(v108, v130);
  v130 += v108;
  v133 = v30;
  v30 = __CFADD__(v30, v125);
  v132 = v133 + v125;
  v30 |= __CFADD__(v112, v132);
  v132 += v112;
  v134 = (v127 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  v135 = v115 + v30 + v113;
  v136 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v137 = 0xFFFFFFFF00000001 * v127;
  v138 = 0xFFFFFFFF * v127;
  v139 = (__PAIR128__(0xFFFFFFFFLL, -1) * v127) >> 64;
  v140 = v103 + __CFADD__(-(uint64_t)v127, v127) + v128;
  v30 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v127, v127), v129) | __CFADD__(v139, __CFADD__(-(uint64_t)v127, v127) + v129), v130);
  v141 = (__CFADD__(__CFADD__(-(uint64_t)v127, v127), v129) | __CFADD__(v139, __CFADD__(-(uint64_t)v127, v127) + v129))+ v130;
  v142 = v30;
  v30 = __CFADD__(v134, v138);
  v143 = v134 + v138;
  v144 = (v127 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v145 = (v127 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v147 = v30;
  v30 = __CFADD__(v30, v141);
  v146 = v147 + v141;
  v30 |= __CFADD__(v145, v146);
  v146 += v145;
  v149 = v30 + v137;
  v30 = __CFADD__(v30, v137) | __CFADD__(v142, v149);
  v148 = v142 + v149;
  v150 = v30;
  v30 = __CFADD__(v148, v132);
  v151 = v148 + v132;
  v152 = v150 + v30 + v144;
  if (__CFADD__(v30, v144) | __CFADD__(v150, v30 + v144))
    v153 = 1;
  else
    v153 = 0;
  v154 = __CFADD__(v152, v135);
  v155 = v152 + v135;
  if (v154)
    ++v153;
  v156 = v140 + v143;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v136);
  if (v154)
    v157 = v153 + 1;
  else
    v157 = v153;
  v159 = v146 - (1 - __CFADD__(v156, 1));
  v158 = (v146 - __PAIR128__(v138, (1 - __CFADD__(v156, 1)))) >> 64;
  v160 = v155
       - __PAIR128__(v135, -(uint64_t)((v151- __PAIR128__(v158, (1 - (__CFADD__(v159, 0xFFFFFFFF00000001) + v158)))) >> 64));
  if (1
     - (__CFADD__((_QWORD)v160, 0xFFFFFFFFLL)
      + BYTE8(v160))
     + (v157 < (1 - (__CFADD__((_QWORD)v160, 0xFFFFFFFFLL) + BYTE8(v160)))))
  {
    v161 = 0;
  }
  else
  {
    v161 = -1;
  }
  if (1
     - (__CFADD__((_QWORD)v160, 0xFFFFFFFFLL)
      + BYTE8(v160))
     + (v157 < (1 - (__CFADD__((_QWORD)v160, 0xFFFFFFFFLL) + BYTE8(v160)))))
  {
    v162 = -1;
  }
  else
  {
    v162 = 0;
  }
  *result = v161 & (v156 + 1) | v162 & v156;
  result[1] = v161 & (v159 - 0xFFFFFFFF) | v162 & v146;
  result[2] = v161 & (v151 - (1 - (__CFADD__(v159, 0xFFFFFFFF00000001) + v158))) | v162 & v151;
  result[3] = v161 & (v160 + 0xFFFFFFFF) | v162 & v155;
  return result;
}

uint64_t *sub_23418BF80(uint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  unsigned __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  unint64_t StatusReg;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BOOL8 v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int128 v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL8 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _BOOL8 v117;
  unsigned __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _BOOL8 v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  BOOL v137;
  unint64_t v138;
  uint64_t v139;
  unsigned __int128 v140;
  unint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;

  v3 = a2[2];
  v2 = a2[3];
  v5 = *a2;
  v4 = a2[1];
  v6 = (*a2 * (unsigned __int128)v2) >> 64;
  v7 = *a2 * v2;
  v8 = (*a2 * (unsigned __int128)v3) >> 64;
  v9 = *a2 * v3;
  v10 = (v5 * (unsigned __int128)v4) >> 64;
  v11 = v5 * v4;
  v12 = v5 * v5;
  v13 = (v5 * (unsigned __int128)v5) >> 64;
  v14 = (__PAIR128__(v4, v5) * v5) >> 64;
  v15 = v10 + __CFADD__(v13, v5 * v4) + v9;
  v16 = v8
      + (__CFADD__(__CFADD__(v13, v5 * v4), v9) | __CFADD__(v10, __CFADD__(v13, v5 * v4) + v9))
      + v7;
  if (__CFADD__(__CFADD__(__CFADD__(v13, v5 * v4), v9) | __CFADD__(v10, __CFADD__(v13, v5 * v4) + v9), v7) | __CFADD__(v8, (__CFADD__(__CFADD__(v13, v5 * v4), v9) | __CFADD__(v10, __CFADD__(v13, v5 * v4) + v9))+ v7))v17 = v6 + 1;
  else
    v17 = v6;
  v18 = ((unint64_t)v12 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v19 = 0xFFFFFFFFLL * v12;
  v20 = ((unint64_t)v12 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  v21 = -(uint64_t)(v5 * v5);
  v22 = v11 + __CFADD__(v21, v12) + v13;
  v23 = (__CFADD__(__CFADD__(v21, v12), v14) | __CFADD__((__PAIR128__(0xFFFFFFFFLL, -1)* (unint64_t)v12) >> 64, __CFADD__(v21, v12) + v14))+ v15;
  v24 = __CFADD__(__CFADD__(__CFADD__(v21, v12), v14) | __CFADD__((__PAIR128__(0xFFFFFFFFLL, -1)* (unint64_t)v12) >> 64, __CFADD__(v21, v12) + v14), v15);
  v72 = __CFADD__(v16, 0xFFFFFFFF00000001 * v12);
  v25 = v16 - 0xFFFFFFFFLL * v12;
  v26 = v72;
  v72 = __CFADD__(v18, v17);
  v27 = v18 + v17;
  v28 = v72;
  v29 = (v2 * (unsigned __int128)v4) >> 64;
  v30 = v2 * v4;
  v31 = (v3 * (unsigned __int128)v4) >> 64;
  v32 = v3 * v4;
  v33 = v4 * v4;
  v34 = __PAIR128__(v3 * v4, v10) + v4 * (unsigned __int128)v4;
  v36 = __CFADD__(__CFADD__(v10, v4 * v4), v3 * v4) | __CFADD__((v4 * (unsigned __int128)v4) >> 64, __CFADD__(v10, v4 * v4) + v3 * v4);
  v35 = v31 + v36 + v2 * v4;
  if (__CFADD__(v36, v2 * v4) | __CFADD__(v31, v36 + v2 * v4))
    v37 = v29 + 1;
  else
    v37 = (v2 * (unsigned __int128)v4) >> 64;
  v72 = __CFADD__(v20, v19);
  v38 = ((unint64_t)v12 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  v39 = 0xFFFFFFFFLL * v12;
  v40 = ((unint64_t)v12 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v41 = v22 + v20 + v19;
  v72 = __CFADD__(v72, v23) | __CFADD__(v40, (__PAIR128__(v23, v38) + (unint64_t)v39) >> 64);
  v42 = v40 + ((__PAIR128__(v23, v38) + (unint64_t)v39) >> 64);
  v44 = v72;
  v72 = __CFADD__(v72, v25);
  v43 = v44 + v25;
  v72 |= __CFADD__(v24, v43);
  v43 += v24;
  v46 = v72;
  v72 = __CFADD__(v72, v27);
  v45 = v46 + v27;
  v72 |= __CFADD__(v26, v45);
  v45 += v26;
  v48 = v72;
  v72 = __CFADD__(v72, v37);
  v47 = v48 + v37;
  v72 |= __CFADD__(v28, v47);
  v47 += v28;
  v49 = v72;
  v50 = __PAIR128__(v10, v41) + __PAIR128__(v33, v11);
  v51 = ((__PAIR128__(v10, v41) + __PAIR128__(v33, v11)) >> 64) + v42;
  v53 = (__CFADD__(__CFADD__(v41, v11), (_QWORD)v34) | __CFADD__(v42, __CFADD__(v41, v11) + (_QWORD)v34))+ *((_QWORD *)&v34 + 1);
  v72 = __CFADD__(__CFADD__(__CFADD__(v41, v11), (_QWORD)v34) | __CFADD__(v42, __CFADD__(v41, v11) + (_QWORD)v34), *((_QWORD *)&v34 + 1)) | __CFADD__(v43, v53);
  v52 = v43 + v53;
  v55 = v72;
  v72 = __CFADD__(v72, v35);
  v54 = v55 + v35;
  v72 |= __CFADD__(v45, v54);
  v54 += v45;
  v56 = v72 + v47;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v58 = 0xFFFFFFFF00000001 * (v41 + v11);
  v59 = (__PAIR128__(0xFFFFFFFFLL, -1) * (v41 + v11)) >> 64;
  v60 = v42 + __CFADD__(-(uint64_t)v50, (_QWORD)v50) + *((_QWORD *)&v50 + 1);
  v61 = (__CFADD__(__CFADD__(-(uint64_t)v50, (_QWORD)v50), v51) | __CFADD__(v59, __CFADD__(-(uint64_t)v50, (_QWORD)v50)+ v51))+ v52;
  v62 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v50, (_QWORD)v50), v51) | __CFADD__(v59, __CFADD__(-(uint64_t)v50, (_QWORD)v50)+ v51), v52);
  v63 = ((unint64_t)v50 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  v64 = ((unint64_t)v50 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v65 = ((unint64_t)v50 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v72 = __CFADD__(__CFADD__(v63, 0xFFFFFFFF * v50), v61) | __CFADD__(v65, (__PAIR128__(v61, v63)+ (unint64_t)(0xFFFFFFFF * v50)) >> 64);
  v66 = v65 + ((__PAIR128__(v61, v63) + (unint64_t)(0xFFFFFFFF * v50)) >> 64);
  v67 = v62 + v72 + v58;
  if (__CFADD__(v72, v58) | __CFADD__(v62, v72 + v58))
    v68 = 1;
  else
    v68 = 0;
  v72 = __CFADD__(v67, v54);
  v69 = v67 + v54;
  v70 = v68 + v72 + v64;
  if (__CFADD__(v72, v64) | __CFADD__(v68, v72 + v64))
    v71 = 1;
  else
    v71 = 0;
  v72 = __CFADD__(v70, v56);
  v73 = v70 + v56;
  if (v72)
    v74 = v71 + 1;
  else
    v74 = v71;
  v75 = v60 + v63 + 0xFFFFFFFF * v50;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  v76 = v49 + v72 + v74;
  v77 = (v2 * (unsigned __int128)v3) >> 64;
  v78 = v2 * v3;
  v79 = (v3 * (unsigned __int128)v3) >> 64;
  v80 = v3 * v3;
  v81 = v8 + v32;
  v72 = __CFADD__(__CFADD__(v8, v32), v80);
  v82 = __CFADD__(v8, v32) + v80;
  v72 |= __CFADD__(v31, v82);
  v82 += v31;
  v83 = v79 + v72 + v78;
  if (__CFADD__(v72, v78) | __CFADD__(v79, v72 + v78))
    v84 = v77 + 1;
  else
    v84 = v77;
  v85 = __PAIR128__(v8, v75) + __PAIR128__(v32, v9);
  v86 = ((__PAIR128__(v8, v75) + __PAIR128__(v32, v9)) >> 64) + v66;
  v88 = (__CFADD__(__CFADD__(v75, v9), v81) | __CFADD__(v66, __CFADD__(v75, v9) + v81)) + v82;
  v72 = __CFADD__(__CFADD__(__CFADD__(v75, v9), v81) | __CFADD__(v66, __CFADD__(v75, v9) + v81), v82) | __CFADD__(v69, v88);
  v87 = v69 + v88;
  v90 = v72 + v83;
  v72 = __CFADD__(v72, v83) | __CFADD__(v73, v90);
  v89 = v73 + v90;
  v91 = ((unint64_t)v85 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  v92 = v84 + v72 + v76;
  v93 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v94 = 0xFFFFFFFF * v85;
  v95 = (__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v85) >> 64;
  v72 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v85, (_QWORD)v85), v86) | __CFADD__(v95, __CFADD__(-(uint64_t)v85, (_QWORD)v85)+ v86), v87);
  v96 = (__CFADD__(__CFADD__(-(uint64_t)v85, (_QWORD)v85), v86) | __CFADD__(v95, __CFADD__(-(uint64_t)v85, (_QWORD)v85)+ v86))+ v87;
  v97 = v72;
  v72 = __CFADD__(v91, v94);
  v98 = v91 + v94;
  v99 = ((unint64_t)v85 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v100 = ((unint64_t)v85 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v102 = v72;
  v72 = __CFADD__(v72, v96);
  v101 = v102 + v96;
  v72 |= __CFADD__(v100, v101);
  v101 += v100;
  v103 = v97 + v72 - 0xFFFFFFFF * v85;
  if (__CFADD__(v72, 0xFFFFFFFF00000001 * v85) | __CFADD__(v97, v72 - 0xFFFFFFFF * v85))
    v104 = 1;
  else
    v104 = 0;
  v72 = __CFADD__(v103, v89);
  v105 = v103 + v89;
  v106 = v104 + v72 + v99;
  if (__CFADD__(v72, v99) | __CFADD__(v104, v72 + v99))
    v107 = 1;
  else
    v107 = 0;
  v108 = __CFADD__(v106, v92);
  v109 = v106 + v92;
  if (v108)
    ++v107;
  v110 = v66 + __CFADD__(-(uint64_t)v85, (_QWORD)v85) + *((_QWORD *)&v85 + 1) + v98;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v93);
  if (v108)
    v111 = v107 + 1;
  else
    v111 = v107;
  v112 = (v2 * (unsigned __int128)v2) >> 64;
  v113 = v2 * v2;
  v114 = v6 + v30;
  v72 = __CFADD__(__CFADD__(v6, v30), v78) | __CFADD__(v29, __CFADD__(v6, v30) + v78);
  v115 = v29 + __CFADD__(v6, v30) + v78;
  v117 = v72;
  v72 = __CFADD__(v72, v113);
  v116 = v117 + v113;
  v72 |= __CFADD__(v77, v116);
  v116 += v77;
  if (v72)
    ++v112;
  v118 = __PAIR128__(v6, v110) + __PAIR128__(v30, v7);
  v119 = ((__PAIR128__(v6, v110) + __PAIR128__(v30, v7)) >> 64) + v101;
  v121 = (__CFADD__(__CFADD__(v110, v7), v114) | __CFADD__(v101, __CFADD__(v110, v7) + v114)) + v115;
  v72 = __CFADD__(__CFADD__(__CFADD__(v110, v7), v114) | __CFADD__(v101, __CFADD__(v110, v7) + v114), v115) | __CFADD__(v105, v121);
  v120 = v105 + v121;
  v123 = v72;
  v72 = __CFADD__(v72, v116);
  v122 = v123 + v116;
  v72 |= __CFADD__(v109, v122);
  v122 += v109;
  v124 = v112 + v72 + v111;
  v125 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  v126 = v101 + __CFADD__(-(uint64_t)v118, (_QWORD)v118) + *((_QWORD *)&v118 + 1);
  v127 = (__CFADD__(__CFADD__(-(uint64_t)v118, (_QWORD)v118), v119) | __CFADD__((__PAIR128__(0xFFFFFFFFLL, -1)* (unint64_t)v118) >> 64, __CFADD__(-(uint64_t)v118, (_QWORD)v118)+ v119))+ v120;
  v128 = ((unint64_t)v118 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  v129 = ((unint64_t)v118 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  v72 = __CFADD__(__CFADD__(((unint64_t)v118 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * v118), v127);
  v130 = __CFADD__(((unint64_t)v118 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * v118) + v127;
  v72 |= __CFADD__(v129, v130);
  v130 += v129;
  v132 = v72 - 0xFFFFFFFF * v118;
  v131 = *((_QWORD *)&v118 + 1) + v132;
  if (__CFADD__(v72, 0xFFFFFFFF00000001 * v118) | __CFADD__(*((_QWORD *)&v118 + 1), v132))
    v133 = 1;
  else
    v133 = 0;
  v135 = v131 + v122;
  v72 = __CFADD__(__CFADD__(v131, v122), v128) | __CFADD__(v133, (__PAIR128__(v128, v131) + v122) >> 64);
  v134 = v133 + ((__PAIR128__(v128, v131) + v122) >> 64);
  v136 = v72;
  v137 = __CFADD__(v134, v124);
  v138 = v134 + v124;
  if (v137)
    ++v136;
  v139 = v126 + ((__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v118) >> 64);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v125);
  if (v137)
    ++v136;
  v140 = v130 - __PAIR128__(0xFFFFFFFFLL * (uint64_t)v118, (1 - __CFADD__(v139, 1)));
  v141 = v138
       - -(uint64_t)((v135
                                    - __PAIR128__(v124, (1- (__CFADD__((_QWORD)v140, 0xFFFFFFFF00000001)+ BYTE8(v140))))) >> 64);
  v142 = -(uint64_t)(v136
                  + (v136 < (1
                                            - (__CFADD__(v141, 0xFFFFFFFFLL)
                                             + ((v138
                                               - __PAIR128__(v125, -(uint64_t)((v135- __PAIR128__(v124, (1- (__CFADD__((_QWORD)v140, 0xFFFFFFFF00000001)+ BYTE8(v140))))) >> 64))) >> 64)))));
  v143 = v142 == 0;
  if ((_BYTE)v142)
    v144 = 0;
  else
    v144 = -1;
  if (v143)
    v145 = 0;
  else
    v145 = -1;
  *result = v144 & (v139 + 1) | v145 & v139;
  result[1] = v144 & (v140 - 0xFFFFFFFF) | v145 & v130;
  result[2] = v144 & (v135 - (1 - (__CFADD__((_QWORD)v140, 0xFFFFFFFF00000001) + BYTE8(v140)))) | v145 & v135;
  result[3] = v144 & (v141 + 0xFFFFFFFF) | v145 & v138;
  return result;
}

double sub_23418C2D8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t *a5, unint64_t *a6, int a7, unint64_t *a8, unint64_t *a9, unint64_t *a10)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  int8x16_t *v31;
  __int128 v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int128 v40;
  unsigned __int128 v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int128 v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned __int128 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  signed __int128 v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  __int128 v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  double result;
  uint64_t v107;
  __int128 v108;
  unint64_t v109;
  unint64_t v110;
  unsigned __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned __int128 v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int128 v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned __int128 v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unsigned __int128 v137;
  char v138;
  uint64_t v139;
  unsigned __int128 v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unsigned __int128 v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BOOL8 v160;
  char v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int128 v170;
  int8x16_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  unint64_t v184;
  uint64_t v188;
  uint64_t v190;
  unint64_t v192;
  uint64_t v193;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201[4];
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  _OWORD v208[2];
  unint64_t v209[2];
  unsigned __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  unsigned __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  int8x16_t v221;
  int8x16_t v222;
  __int128 v223;
  unsigned __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;

  v227 = *MEMORY[0x24BDAC8D0];
  v223 = 0u;
  v224 = 0u;
  v12 = *a6;
  v13 = a6[1];
  v14 = a6[2];
  v15 = a6[3];
  v192 = v13 | *a6 | v14 | v15;
  v16 = *a10;
  v17 = a10[1];
  v19 = a10[2];
  v18 = a10[3];
  v193 = v17 | *a10 | v19 | v18;
  v219 = 0u;
  v220 = 0u;
  sub_23418BF80((uint64_t *)&v219, a6);
  v217 = 0u;
  v218 = 0u;
  v215 = 0u;
  v216 = 0u;
  v213 = 0u;
  v214 = 0u;
  if (a7)
  {
    v22 = *(_OWORD *)(a4 + 16);
    *((_QWORD *)&v24 + 1) = v13;
    *(_QWORD *)&v24 = v12;
    v23 = v24 >> 63;
    v217 = *(_OWORD *)a4;
    v218 = v22;
    *((_QWORD *)&v24 + 1) = v14;
    *(_QWORD *)&v24 = v13;
    v25 = v24 >> 63;
    *((_QWORD *)&v24 + 1) = v15;
    *(_QWORD *)&v24 = v14;
    v26 = v24 >> 63;
    v27 = v26
        - __PAIR128__(v21, -(uint64_t)((v25- __PAIR128__(v20, (1 - __CFADD__(v23, 0xFFFFFFFF00000000)))) >> 64));
    if ((v15 < 0)
       + ((unint64_t)v15 >> 63 < (1 - (__CFADD__((_QWORD)v27, 0xFFFFFFFFLL) + BYTE8(v27)))))
    {
      v28 = 0;
    }
    else
    {
      v28 = -1;
    }
    if ((v15 < 0)
       + ((unint64_t)v15 >> 63 < (1 - (__CFADD__((_QWORD)v27, 0xFFFFFFFFLL) + BYTE8(v27)))))
    {
      v29 = -1;
    }
    else
    {
      v29 = 0;
    }
    *(_QWORD *)&v213 = v28 & ((2 * v12) | 1) | v29 & (2 * v12);
    *((_QWORD *)&v213 + 1) = v28 & (v23 - 0x100000000) | v29 & v23;
    *(_QWORD *)&v214 = v28 & (v25 - (1 - __CFADD__(v23, 0xFFFFFFFF00000000))) | v29 & v25;
    *((_QWORD *)&v214 + 1) = v28 & (v27 + 0xFFFFFFFF) | v29 & v26;
    v31 = (int8x16_t *)a10;
    v30 = a5;
    v32 = *((_OWORD *)a5 + 1);
    v215 = *(_OWORD *)a5;
    v216 = v32;
  }
  else
  {
    v225 = 0uLL;
    v226 = 0uLL;
    sub_23418BF80((uint64_t *)&v225, a10);
    v33 = sub_23418BBE4((uint64_t *)&v217, (unint64_t *)a4, (unint64_t *)&v225);
    v35 = v16 + v12;
    v36 = v13 + __CFADD__(v16, v12) + v17;
    v37 = v14 + (__CFADD__(__CFADD__(v16, v12), v17) | __CFADD__(v13, __CFADD__(v16, v12) + v17)) + v19;
    v38 = v15
        + (__CFADD__(__CFADD__(__CFADD__(v16, v12), v17) | __CFADD__(v13, __CFADD__(v16, v12) + v17), v19) | __CFADD__(v14, (__CFADD__(__CFADD__(v16, v12), v17) | __CFADD__(v13, __CFADD__(v16, v12)+ v17))+ v19))+ v18;
    if (__CFADD__(__CFADD__(__CFADD__(__CFADD__(v16, v12), v17) | __CFADD__(v13, __CFADD__(v16, v12) + v17), v19) | __CFADD__(v14, (__CFADD__(__CFADD__(v16, v12), v17) | __CFADD__(v13, __CFADD__(v16, v12)+ v17))+ v19), v18) | __CFADD__(v15, (__CFADD__(__CFADD__(__CFADD__(v16, v12), v17) | __CFADD__(v13, __CFADD__(v16, v12) + v17), v19) | __CFADD__(v14, (__CFADD__(__CFADD__(v16, v12), v17) | __CFADD__(v13, __CFADD__(v16, v12) + v17))+ v19))+ v18))v39 = 1;
    else
      v39 = 0;
    v40 = v36 - __PAIR128__(v34, (1 - __CFADD__(v35, 1)));
    v41 = (unint64_t)v38
        - __PAIR128__((unint64_t)v33, -(uint64_t)((v37- __PAIR128__(0xFFFFFFFF00000001, (1- (__CFADD__((_QWORD)v40, 0xFFFFFFFF00000001)+ BYTE8(v40))))) >> 64));
    v42 = -(uint64_t)(v39 + (v39 < (1 - (__CFADD__((_QWORD)v41, 0xFFFFFFFFLL) + BYTE8(v41)))));
    v43 = v42 == 0;
    if ((_BYTE)v42)
      v44 = 0;
    else
      v44 = -1;
    if (v43)
      v45 = 0;
    else
      v45 = -1;
    *(_QWORD *)&v213 = v44 & (v35 + 1) | v45 & v35;
    *((_QWORD *)&v213 + 1) = v44 & (v40 - 0xFFFFFFFF) | v45 & v36;
    *(_QWORD *)&v214 = v44 & (v37 - (1 - (__CFADD__((_QWORD)v40, 0xFFFFFFFF00000001) + BYTE8(v40)))) | v45 & v37;
    *((_QWORD *)&v214 + 1) = v44 & (v41 + 0xFFFFFFFF) | v45 & v38;
    sub_23418BF80((uint64_t *)&v213, (unint64_t *)&v213);
    v46 = v213 - v219;
    v47 = *((_QWORD *)&v219 + 1) + -(uint64_t)(((unint64_t)v213 - __PAIR128__(v219, v219)) >> 64);
    v48 = *((_QWORD *)&v213 + 1) - v47;
    v55 = __CFADD__((_QWORD)v220, -(uint64_t)((*((unint64_t *)&v213 + 1) - __PAIR128__(v47, v47)) >> 64));
    v49 = v220 + -(uint64_t)((*((unint64_t *)&v213 + 1) - __PAIR128__(v47, v47)) >> 64);
    v50 = v55;
    v51 = v214 - v49;
    v55 = __CFADD__(*((_QWORD *)&v220 + 1), -(uint64_t)(((unint64_t)v214 - __PAIR128__(v50, v49)) >> 64));
    v52 = *((_QWORD *)&v220 + 1) + -(uint64_t)(((unint64_t)v214 - __PAIR128__(v50, v49)) >> 64);
    v53 = v55;
    v54 = *((unint64_t *)&v214 + 1) - __PAIR128__(v53, v52);
    v55 = __CFADD__(__CFADD__(v46, *((_QWORD *)&v54 + 1)), v48) | __CFADD__(DWORD2(v54), __CFADD__(v46, *((_QWORD *)&v54 + 1)) + v48);
    v56 = DWORD2(v54) + __CFADD__(v46, *((_QWORD *)&v54 + 1)) + v48;
    v57 = v54 + __CFADD__(v55, v51) + (*((_QWORD *)&v54 + 1) & 0xFFFFFFFF00000001);
    v59 = ((unint64_t)(v46 + *((_QWORD *)&v54 + 1)) - __PAIR128__(v225, v225)) >> 64;
    v58 = v46 + *((_QWORD *)&v54 + 1) - v225;
    v60 = (unint64_t)v56
        - __PAIR128__(*((_QWORD *)&v225 + 1) + (unint64_t)-v59, *((_QWORD *)&v225 + 1) + (unint64_t)-v59);
    v61 = ((unint64_t)v55
         + v51
         - __PAIR128__((unint64_t)v226 + -BYTE8(v60), (unint64_t)v226 + -BYTE8(v60))) >> 64;
    if (((v57
                          - __PAIR128__(*((_QWORD *)&v226 + 1) + (unint64_t)-v61, *((_QWORD *)&v226 + 1) + (unint64_t)-v61)) >> 64))v62 = -1;
    else
      v62 = 0;
    v63 = __CFADD__(v58, v62) + (_QWORD)v60;
    *(_QWORD *)&v213 = v58 + v62;
    *((_QWORD *)&v213 + 1) = v62 + v63;
    v214 = __PAIR128__(v62 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v58, v62), (_QWORD)v60) | __CFADD__(v62, v63))+ __PAIR128__(v57- (*((_QWORD *)&v226 + 1)+ -(uint64_t)(((unint64_t)v55+ v51- __PAIR128__((unint64_t)v226 + -BYTE8(v60), (unint64_t)v226 + -BYTE8(v60))) >> 64)), v55 + v51 - ((unint64_t)v226 + -BYTE8(v60)));
    sub_23418BBE4((uint64_t *)&v215, a10, (unint64_t *)&v225);
    v30 = a5;
    sub_23418BBE4((uint64_t *)&v215, (unint64_t *)&v215, a5);
    v31 = (int8x16_t *)a10;
  }
  v64 = a4;
  v221 = 0u;
  v222 = 0u;
  v211 = 0u;
  v212 = 0u;
  sub_23418BBE4((uint64_t *)&v211, a8, (unint64_t *)&v219);
  v65 = v211 - v217;
  v66 = *((_QWORD *)&v217 + 1) + -(uint64_t)(((unint64_t)v211 - __PAIR128__(v217, v217)) >> 64);
  v67 = *((_QWORD *)&v211 + 1) - v66;
  v55 = __CFADD__((_QWORD)v218, -(uint64_t)((*((unint64_t *)&v211 + 1) - __PAIR128__(v66, v66)) >> 64));
  v68 = v218 + -(uint64_t)((*((unint64_t *)&v211 + 1) - __PAIR128__(v66, v66)) >> 64);
  v69 = v55;
  v71 = v212 - v68;
  v70 = ((unint64_t)v212 - __PAIR128__(v69, v68)) >> 64;
  v55 = __CFADD__(*((_QWORD *)&v218 + 1), -v70);
  v72 = *((_QWORD *)&v218 + 1) + -v70;
  v73 = v55;
  v74 = *((_QWORD *)&v212 + 1) - v72;
  if (((*((unint64_t *)&v212 + 1) - __PAIR128__(v73, v72)) >> 64))
    v75 = -1;
  else
    v75 = 0;
  v76 = v65 + v75;
  v77 = v75 + __CFADD__(v65, v75) + v67;
  v209[0] = v65 + v75;
  v209[1] = v77;
  v78 = __PAIR128__(v75 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v65, v75), v67) | __CFADD__(v75, __CFADD__(v65, v75) + v67))+ __PAIR128__(v74, v71);
  v210 = __PAIR128__(v75 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v65, v75), v67) | __CFADD__(v75, __CFADD__(v65, v75) + v67))+ __PAIR128__(v74, v71);
  sub_23418BBE4(v221.i64, v209, (unint64_t *)&v213);
  memset(v208, 0, sizeof(v208));
  sub_23418BBE4((uint64_t *)v208, a6, (unint64_t *)&v219);
  v206 = 0u;
  v207 = 0u;
  v79 = sub_23418BBE4((uint64_t *)&v206, a9, (unint64_t *)v208);
  v81 = v206 - v215;
  v82 = *((_QWORD *)&v215 + 1) + -(uint64_t)(((unint64_t)v206 - __PAIR128__(v215, v215)) >> 64);
  v83 = *((_QWORD *)&v206 + 1) - v82;
  v55 = __CFADD__((_QWORD)v216, -(uint64_t)((*((unint64_t *)&v206 + 1) - __PAIR128__(v82, v82)) >> 64));
  v84 = v216 + -(uint64_t)((*((unint64_t *)&v206 + 1) - __PAIR128__(v82, v82)) >> 64);
  v85 = v55;
  v86 = v207 - v84;
  v55 = __CFADD__(*((_QWORD *)&v216 + 1), -(uint64_t)(((unint64_t)v207 - __PAIR128__(v85, v84)) >> 64));
  v87 = *((_QWORD *)&v216 + 1) + -(uint64_t)(((unint64_t)v207 - __PAIR128__(v85, v84)) >> 64);
  v88 = v55;
  v89 = *((_QWORD *)&v207 + 1) - v87;
  if (((*((unint64_t *)&v207 + 1) - __PAIR128__(v88, v87)) >> 64))
    v90 = -1;
  else
    v90 = 0;
  v55 = __CFADD__(v81, v90);
  v91 = v81 + v90;
  v93 = __CFADD__(v81, v90) + v83;
  v92 = v90 + v93;
  v94 = __CFADD__(v55, v83) | __CFADD__(v90, v93);
  v95 = v90 & 0xFFFFFFFF00000001;
  *((_QWORD *)&v97 + 1) = v92;
  *(_QWORD *)&v97 = v91;
  v96 = v97 >> 63;
  *((_QWORD *)&v97 + 1) = v94 + v86;
  *(_QWORD *)&v97 = v92;
  v98 = v97 >> 63;
  v99 = (__int128)(__PAIR128__(v95, v94) + __PAIR128__(v89, v86)) >> 63;
  v100 = v96 - 0x100000000;
  v101 = v98 - (1 - __CFADD__(v96, 0xFFFFFFFF00000000));
  v102 = v99
       - __PAIR128__(v80, -(uint64_t)((v98- __PAIR128__((unint64_t)v79, (1 - __CFADD__(v96, 0xFFFFFFFF00000000)))) >> 64));
  if (((((__PAIR128__(v95, v94) + __PAIR128__(v89, v86)) >> 64) & 0x8000000000000000) != 0)
     + ((unint64_t)((__PAIR128__(v95, v94) + __PAIR128__(v89, v86)) >> 64) >> 63 < (1 - (__CFADD__((_QWORD)v102, 0xFFFFFFFFLL) + BYTE8(v102)))))
  {
    v103 = 0;
  }
  else
  {
    v103 = -1;
  }
  v202 = v103 & ((2 * v91) | 1) | *((_QWORD *)&v102 + 1) & (2 * v91);
  v203 = v103 & v100 | *((_QWORD *)&v102 + 1) & v96;
  v204 = v103 & v101 | *((_QWORD *)&v102 + 1) & v98;
  v205 = v103 & (v102 + 0xFFFFFFFF) | *((_QWORD *)&v102 + 1) & v99;
  v104 = v77 | v76 | v78 | *((_QWORD *)&v78 + 1) | v203 | v202 | v204 | v205;
  v105 = (uint64_t)((v104 - 1) & ~v104) >> 63;
  if ((((v193 - 1) & ~v193 | (v192 - 1) & ~v192) & 0x8000000000000000) != 0)
    v105 = 0;
  if (v105)
  {
    sub_23418CD8C(a1, a2, a3, (unint64_t *)a4, v30, a6);
  }
  else
  {
    *((_QWORD *)&v108 + 1) = v77;
    *(_QWORD *)&v108 = v76;
    v107 = v108 >> 63;
    v225 = 0u;
    v226 = 0u;
    *((_QWORD *)&v108 + 1) = v78;
    *(_QWORD *)&v108 = v77;
    v109 = v108 >> 63;
    v110 = v78 >> 63;
    v111 = v110
         - __PAIR128__(v101, -(uint64_t)((v109- __PAIR128__(v100, (1 - __CFADD__(v107, 0xFFFFFFFF00000000)))) >> 64));
    if (1
       - (__CFADD__((_QWORD)v111, 0xFFFFFFFFLL)
        + BYTE8(v111))
       + (*((_QWORD *)&v78 + 1) >> 63 < (unint64_t)(1
                                                                          - (__CFADD__((_QWORD)v111, 0xFFFFFFFFLL)
                                                                           + BYTE8(v111)))))
    {
      v112 = 0;
    }
    else
    {
      v112 = -1;
    }
    if (1
       - (__CFADD__((_QWORD)v111, 0xFFFFFFFFLL)
        + BYTE8(v111))
       + (*((_QWORD *)&v78 + 1) >> 63 < (unint64_t)(1
                                                                          - (__CFADD__((_QWORD)v111, 0xFFFFFFFFLL)
                                                                           + BYTE8(v111)))))
    {
      v113 = -1;
    }
    else
    {
      v113 = 0;
    }
    v201[0] = v112 & ((2 * v76) | 1) | v113 & (2 * v76);
    v201[1] = v112 & (v107 - 0x100000000) | v113 & v107;
    v201[2] = v112 & (v109 - (1 - __CFADD__(v107, 0xFFFFFFFF00000000))) | v113 & v109;
    v201[3] = v112 & (v111 + 0xFFFFFFFF) | v113 & v110;
    sub_23418BF80(v201, (unint64_t *)v201);
    v199 = 0u;
    v200 = 0u;
    sub_23418BBE4((uint64_t *)&v199, v209, (unint64_t *)v201);
    v197 = 0u;
    v198 = 0u;
    sub_23418BBE4((uint64_t *)&v197, (unint64_t *)&v217, (unint64_t *)v201);
    sub_23418BF80((uint64_t *)&v225, (unint64_t *)&v202);
    v114 = v225 - v199;
    v115 = *((_QWORD *)&v199 + 1)
         + -(uint64_t)(((unint64_t)v225 - __PAIR128__(v199, v199)) >> 64);
    v116 = *((_QWORD *)&v225 + 1) - v115;
    v55 = __CFADD__((_QWORD)v200, -(uint64_t)((*((unint64_t *)&v225 + 1) - __PAIR128__(v115, v115)) >> 64));
    v117 = v200 + -(uint64_t)((*((unint64_t *)&v225 + 1) - __PAIR128__(v115, v115)) >> 64);
    v118 = v55;
    v120 = v226 - v117;
    v119 = ((unint64_t)v226 - __PAIR128__(v118, v117)) >> 64;
    v55 = __CFADD__(*((_QWORD *)&v200 + 1), -v119);
    v121 = *((_QWORD *)&v200 + 1) + -v119;
    v122 = v55;
    if (((*((unint64_t *)&v226 + 1) - __PAIR128__(v122, v121)) >> 64))
      v123 = -1;
    else
      v123 = 0;
    v124 = v123 + __CFADD__(v114, v123) + v116;
    v125 = v114 + v123 - v197;
    v126 = v124
         - __PAIR128__(v124, *((_QWORD *)&v197 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v114 + v123) - __PAIR128__(v120, v197)) >> 64));
    v128 = ((__CFADD__(__CFADD__(v114, v123), v116) | __CFADD__(v123, __CFADD__(v114, v123) + v116))+ v120- __PAIR128__((unint64_t)v198 + -BYTE8(v126), (unint64_t)v198 + -BYTE8(v126))) >> 64;
    v127 = (__CFADD__(__CFADD__(v114, v123), v116) | __CFADD__(v123, __CFADD__(v114, v123) + v116))+ v120- (v198+ -BYTE8(v126));
    v129 = ((__PAIR128__(v123 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v114, v123), v116) | __CFADD__(v123, __CFADD__(v114, v123) + v116))+ __PAIR128__(*((_QWORD *)&v226 + 1) - v121, v120)) >> 64)- __PAIR128__(*((_QWORD *)&v198 + 1) + (unint64_t)-(char)v128, *((_QWORD *)&v198 + 1) + (unint64_t)-(char)v128);
    v130 = DWORD2(v129) + __CFADD__(v125, *((_QWORD *)&v129 + 1)) + (_QWORD)v126;
    v131 = v129
         + __CFADD__(__CFADD__(__CFADD__(v125, *((_QWORD *)&v129 + 1)), (_QWORD)v126) | __CFADD__(DWORD2(v129), __CFADD__(v125, *((_QWORD *)&v129 + 1))+ (_QWORD)v126), v127)+ (*((_QWORD *)&v129 + 1) & 0xFFFFFFFF00000001);
    v132 = v125 + *((_QWORD *)&v129 + 1) - v197;
    v133 = v130
         - __PAIR128__(v130, *((_QWORD *)&v197 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v125 + *((_QWORD *)&v129 + 1))- __PAIR128__(*((_QWORD *)&v129 + 1) & 0xFFFFFFFF00000001, v197)) >> 64));
    LOBYTE(v130) = ((unint64_t)(__CFADD__(__CFADD__(v125, *((_QWORD *)&v129 + 1)), (_QWORD)v126) | __CFADD__(DWORD2(v129), __CFADD__(v125, *((_QWORD *)&v129 + 1)) + (_QWORD)v126))
                  + v127
                  - __PAIR128__((unint64_t)v198 + -BYTE8(v133), (unint64_t)v198 + -BYTE8(v133))) >> 64;
    v134 = (__CFADD__(__CFADD__(v125, *((_QWORD *)&v129 + 1)), (_QWORD)v126) | __CFADD__(DWORD2(v129), __CFADD__(v125, *((_QWORD *)&v129 + 1))+ (_QWORD)v126))+ v127- (v198+ -BYTE8(v133));
    v135 = v131 - (*((_QWORD *)&v198 + 1) + -(char)v130);
    if (((v131
                          - __PAIR128__(*((_QWORD *)&v198 + 1) + (unint64_t)-(char)v130, *((_QWORD *)&v198 + 1) + (unint64_t)-(char)v130)) >> 64))v136 = -1;
    else
      v136 = 0;
    v188 = v132 + v136;
    v190 = v136 + __CFADD__(v132, v136) + (_QWORD)v133;
    v184 = (__CFADD__(__CFADD__(v132, v136), (_QWORD)v133) | __CFADD__(v136, __CFADD__(v132, v136) + (_QWORD)v133))+ v134;
    v137 = __PAIR128__(v136 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v132, v136), (_QWORD)v133) | __CFADD__(v136, __CFADD__(v132, v136) + (_QWORD)v133))+ __PAIR128__(v135, v134);
    v139 = v197 - (v132 + v136);
    v138 = ((unint64_t)v197 - __PAIR128__(v135, v132 + v136)) >> 64;
    v140 = *((unint64_t *)&v197 + 1)
         - __PAIR128__(v190 + (unint64_t)-v138, v190 + (unint64_t)-v138);
    v141 = ((unint64_t)v198
          - __PAIR128__((unint64_t)v137 + -BYTE8(v140), (unint64_t)v137 + -BYTE8(v140))) >> 64;
    if (((*((unint64_t *)&v198 + 1)
                          - __PAIR128__(*((_QWORD *)&v137 + 1) + (unint64_t)-v141, *((_QWORD *)&v137 + 1) + (unint64_t)-v141)) >> 64))v142 = -1;
    else
      v142 = 0;
    v143 = __CFADD__(v139, v142) + (_QWORD)v140;
    *(_QWORD *)&v223 = v139 + v142;
    *((_QWORD *)&v223 + 1) = v142 + v143;
    v224 = __PAIR128__(v142 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v139, v142), (_QWORD)v140) | __CFADD__(v142, v143))+ __PAIR128__(*((_QWORD *)&v198 + 1)- (*((_QWORD *)&v137 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)v198- __PAIR128__((unint64_t)v137 + -BYTE8(v140), (unint64_t)v137 + -BYTE8(v140))) >> 64)), v198 - (v137 + -BYTE8(v140)));
    sub_23418BBE4((uint64_t *)&v223, (unint64_t *)&v223, (unint64_t *)&v202);
    v195 = 0u;
    v196 = 0u;
    sub_23418BBE4((uint64_t *)&v195, (unint64_t *)&v215, (unint64_t *)&v199);
    v145 = v223 - v195;
    v146 = *((_QWORD *)&v223 + 1)
         - (*((_QWORD *)&v195 + 1)
          + -(uint64_t)(((unint64_t)v223 - __PAIR128__(v144, v195)) >> 64));
    v55 = __CFADD__((_QWORD)v196, -(uint64_t)((*((unint64_t *)&v223 + 1)- __PAIR128__(*((_QWORD *)&v195 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)v223- __PAIR128__(v144, v195)) >> 64), *((_QWORD *)&v195 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)v223- __PAIR128__(v144, v195)) >> 64))) >> 64));
    v147 = v196
         + -(uint64_t)((*((unint64_t *)&v223 + 1)
                                      - __PAIR128__(*((_QWORD *)&v195 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)v223- __PAIR128__(v144, v195)) >> 64), *((_QWORD *)&v195 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)v223- __PAIR128__(v144, v195)) >> 64))) >> 64);
    v148 = v55;
    v149 = v224 - v147;
    v55 = __CFADD__(*((_QWORD *)&v196 + 1), -(uint64_t)(((unint64_t)v224 - __PAIR128__(v148, v147)) >> 64));
    v150 = *((_QWORD *)&v196 + 1)
         + -(uint64_t)(((unint64_t)v224 - __PAIR128__(v148, v147)) >> 64);
    v151 = v55;
    v152 = *((unint64_t *)&v224 + 1) - __PAIR128__(v151, v150);
    v153 = __CFADD__(v145, *((_QWORD *)&v152 + 1)) + v146;
    v155 = __CFADD__(__CFADD__(v145, *((_QWORD *)&v152 + 1)), v146) | __CFADD__(DWORD2(v152), v153);
    v154 = v155 + v149;
    v156 = v152 + __CFADD__(v155, v149) + (*((_QWORD *)&v152 + 1) & 0xFFFFFFFF00000001);
    v157 = v145 + *((_QWORD *)&v152 + 1) - v195;
    v158 = DWORD2(v152)
         + v153
         - (*((_QWORD *)&v195 + 1)
          + -(uint64_t)(((unint64_t)(v145 + *((_QWORD *)&v152 + 1)) - __PAIR128__(v195, v195)) >> 64));
    v159 = v196
         + -(uint64_t)(((unint64_t)DWORD2(v152)
                                      + v153
                                      - __PAIR128__(*((_QWORD *)&v195 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v145 + *((_QWORD *)&v152 + 1))- __PAIR128__(v195, v195)) >> 64), *((_QWORD *)&v195 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v145 + *((_QWORD *)&v152 + 1))- __PAIR128__(v195, v195)) >> 64))) >> 64);
    v160 = __CFADD__((_QWORD)v196, -(uint64_t)(((unint64_t)DWORD2(v152)+ v153- __PAIR128__(*((_QWORD *)&v195 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v145 + *((_QWORD *)&v152 + 1))- __PAIR128__(v195, v195)) >> 64), *((_QWORD *)&v195 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v145 + *((_QWORD *)&v152 + 1))- __PAIR128__(v195, v195)) >> 64))) >> 64));
    v162 = v154 - v159;
    v161 = (v154 - __PAIR128__(v160, v159)) >> 64;
    v55 = __CFADD__(*((_QWORD *)&v196 + 1), -v161);
    v163 = *((_QWORD *)&v196 + 1) + -v161;
    v164 = v55;
    if (((v156 - __PAIR128__(v164, v163)) >> 64))
      v165 = -1;
    else
      v165 = 0;
    v166 = (uint64_t)v30;
    v167 = v157 + v165;
    v168 = v64;
    v169 = v165 + __CFADD__(v157, v165) + v158;
    v170 = __PAIR128__(v165 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v157, v165), v158) | __CFADD__(v165, __CFADD__(v157, v165) + v158))+ __PAIR128__(v156 - v163, v162);
    v171 = v31;
    if (v192)
      v172 = 0;
    else
      v172 = -1;
    if (v192)
      v173 = -1;
    else
      v173 = 0;
    v174 = a8[1] & v172 | v173 & v190;
    v175 = a8[2] & v172 | v173 & v184;
    v176 = a8[3] & v172;
    *(_QWORD *)&v225 = v172 & *a8 | v173 & v188;
    *((_QWORD *)&v225 + 1) = v174;
    *(_QWORD *)&v226 = v175;
    *((_QWORD *)&v226 + 1) = v176 | v173 & *((_QWORD *)&v137 + 1);
    sub_23418D734((uint64_t)a1, v193, v168, (uint64_t)&v225);
    v177 = a9[1] & v172 | v173 & v169;
    v178 = a9[2] & v172 | v173 & v170;
    v179 = a9[3] & v172;
    *(_QWORD *)&v223 = *a9 & v172 | v173 & v167;
    *((_QWORD *)&v223 + 1) = v177;
    *(_QWORD *)&v224 = v178;
    *((_QWORD *)&v224 + 1) = v179 | *((_QWORD *)&v170 + 1) & v173;
    sub_23418D734((uint64_t)a2, v193, v166, (uint64_t)&v223);
    v180 = (int8x16_t)vdupq_n_s64(v173);
    v181 = (int8x16_t)vdupq_n_s64(v172);
    v182 = vorrq_s8(vandq_s8(v221, v180), vandq_s8(*v171, v181));
    v183 = vorrq_s8(vandq_s8(v222, v180), vandq_s8(v171[1], v181));
    v221 = v182;
    v222 = v183;
    *(_QWORD *)&result = sub_23418D734((uint64_t)a3, v193, (uint64_t)a6, (uint64_t)&v221).u64[0];
  }
  return result;
}

uint64_t *sub_23418CD8C(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL8 v37;
  unint64_t v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int128 v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  unint64_t v79;
  uint64_t v80;
  unsigned __int128 v81;
  unsigned __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int128 v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned __int8 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned __int128 v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _BOOL8 v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unsigned __int128 v170;
  unsigned __int128 v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned __int128 v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unsigned __int128 v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  __int128 v204;
  unint64_t v205;
  unint64_t v206;
  unsigned __int8 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *result;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unsigned __int8 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int128 v236;
  uint64_t v237;
  _BYTE v238[24];
  _OWORD v242[2];
  unint64_t v243[4];
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _OWORD v248[2];
  _OWORD v249[2];
  __int128 v250;
  __int128 v251;
  uint64_t v252;

  v252 = *MEMORY[0x24BDAC8D0];
  v250 = 0u;
  v251 = 0u;
  memset(v249, 0, sizeof(v249));
  memset(v248, 0, sizeof(v248));
  memset(v242, 0, sizeof(v242));
  sub_23418BF80((uint64_t *)&v250, a6);
  sub_23418BF80((uint64_t *)v249, a5);
  sub_23418BBE4((uint64_t *)v248, a4, (unint64_t *)v249);
  v12 = *a4;
  v13 = a4[1];
  v14 = v250;
  v16 = *a4 - v250;
  v17 = __CFADD__(*((_QWORD *)&v250 + 1), -(uint64_t)((*a4 - __PAIR128__(v15, v250)) >> 64));
  v18 = *((_QWORD *)&v250 + 1) + -(uint64_t)((*a4 - __PAIR128__(v15, v250)) >> 64);
  v19 = v17;
  v20 = v13 - v18;
  v21 = v251;
  v17 = __CFADD__((_QWORD)v251, -(uint64_t)((v13 - __PAIR128__(v19, v18)) >> 64));
  v22 = v251 + -(uint64_t)((v13 - __PAIR128__(v19, v18)) >> 64);
  v23 = v17;
  v24 = a4[2];
  v25 = a4[3];
  v26 = v24 - v22;
  v17 = __CFADD__(*((_QWORD *)&v251 + 1), -(uint64_t)((v24 - __PAIR128__(v23, v22)) >> 64));
  v27 = *((_QWORD *)&v251 + 1) + -(uint64_t)((v24 - __PAIR128__(v23, v22)) >> 64);
  v28 = v17;
  v29 = v25 - __PAIR128__(v28, v27);
  v30 = __CFADD__(v16, *((_QWORD *)&v29 + 1)) + v20;
  v31 = __CFADD__(__CFADD__(v16, *((_QWORD *)&v29 + 1)), v20) | __CFADD__(DWORD2(v29), v30);
  v244 = v16 + *((_QWORD *)&v29 + 1);
  v245 = DWORD2(v29) + v30;
  v246 = v31 + v26;
  v247 = v29 + __CFADD__(v31, v26) + (*((_QWORD *)&v29 + 1) & 0xFFFFFFFF00000001);
  v17 = __CFADD__((_QWORD)v250, v12);
  v32 = v250 + v12;
  v34 = v17;
  v17 = __CFADD__(v17, v13);
  v33 = v34 + v13;
  v35 = v17;
  v36 = v251 + v24;
  v37 = __CFADD__((_QWORD)v251, v24);
  v38 = *((_QWORD *)&v251 + 1) + v25;
  v39 = __CFADD__(*((_QWORD *)&v251 + 1), v25);
  v41 = v33 + *((_QWORD *)&v250 + 1);
  v17 = __CFADD__(__CFADD__(v33, *((_QWORD *)&v250 + 1)), v36) | __CFADD__(v35, (__PAIR128__(v36, v33)+ *((unint64_t *)&v250 + 1)) >> 64);
  v40 = v35 + ((__PAIR128__(v36, v33) + *((unint64_t *)&v250 + 1)) >> 64);
  v43 = v17 + v38;
  v17 = __CFADD__(v17, v38) | __CFADD__(v37, v43);
  v42 = v37 + v43;
  if (v17)
    v44 = v39 + 1;
  else
    v44 = v39;
  v45 = v41 - __PAIR128__(v25, (1 - __CFADD__(v32, 1)));
  v46 = v42
      - -(uint64_t)((v40
                                   - __PAIR128__(0xFFFFFFFF00000001, (1 - (__CFADD__((_QWORD)v45, 0xFFFFFFFF00000001) + BYTE8(v45))))) >> 64);
  v47 = -(uint64_t)(v44
                 + (v44 < (1
                                          - (__CFADD__(v46, 0xFFFFFFFFLL)
                                           + ((v42
                                             - __PAIR128__(DWORD2(v29), -(uint64_t)((v40- __PAIR128__(0xFFFFFFFF00000001, (1- (__CFADD__((_QWORD)v45, 0xFFFFFFFF00000001)+ BYTE8(v45))))) >> 64))) >> 64)))));
  if ((_BYTE)v47)
    v48 = 0;
  else
    v48 = -1;
  if ((_BYTE)v47)
    v49 = -1;
  else
    v49 = 0;
  v50 = v48 & (v32 + 1) | v49 & v32;
  v51 = v48 & (v45 - 0xFFFFFFFF) | v49 & v41;
  v52 = v48 & (v40 - (1 - (__CFADD__((_QWORD)v45, 0xFFFFFFFF00000001) + BYTE8(v45)))) | v49 & v40;
  v53 = v48 & (v46 + 0xFFFFFFFF) | v49 & v42;
  *((_QWORD *)&v55 + 1) = v51;
  *(_QWORD *)&v55 = v50;
  v54 = v55 >> 63;
  *((_QWORD *)&v55 + 1) = v52;
  *(_QWORD *)&v55 = v51;
  v56 = v55 >> 63;
  *((_QWORD *)&v55 + 1) = v53;
  *(_QWORD *)&v55 = v52;
  v57 = v55 >> 63;
  v58 = v56 - (1 - __CFADD__(v54, 0xFFFFFFFF00000000));
  v59 = v57
      - -(uint64_t)((v56 - __PAIR128__(v10, (1 - __CFADD__(v54, 0xFFFFFFFF00000000)))) >> 64);
  v60 = 1
      - (__CFADD__(v59, 0xFFFFFFFFLL)
       + ((v57
         - __PAIR128__(v11, -(uint64_t)((v56- __PAIR128__(v10, (1 - __CFADD__(v54, 0xFFFFFFFF00000000)))) >> 64))) >> 64));
  if ((v53 < 0) + ((unint64_t)v53 >> 63 < v60))
    v61 = 0;
  else
    v61 = -1;
  if ((v53 < 0) + ((unint64_t)v53 >> 63 < v60))
    v62 = -1;
  else
    v62 = 0;
  v63 = v61 & ((2 * v50) | 1) | v62 & (2 * v50);
  v64 = v61 & (v54 - 0x100000000) | v62 & v54;
  v65 = v61 & v58;
  v66 = v61 & v58 | v62 & v56;
  v67 = v61 & (v59 + 0xFFFFFFFF) | v62 & v57;
  v17 = __CFADD__(v63, v50);
  v68 = v63 + v50;
  v70 = v17;
  v17 = __CFADD__(v17, v51);
  v69 = v70 + v51;
  v71 = v17;
  v17 = __CFADD__(v69, v64);
  v72 = v69 + v64;
  v74 = v17;
  v17 = __CFADD__(v17, v52);
  v73 = v74 + v52;
  v17 |= __CFADD__(v71, v73);
  v73 += v71;
  v75 = v17;
  v17 = __CFADD__(v73, v66);
  v76 = v73 + v66;
  v78 = v17;
  v17 = __CFADD__(v17, v53);
  v77 = v78 + v53;
  v17 |= __CFADD__(v75, v77);
  v77 += v75;
  v79 = v17;
  v17 = __CFADD__(v77, v67);
  v80 = v77 + v67;
  if (v17)
    ++v79;
  v81 = (unint64_t)v72 - __PAIR128__(v71, (1 - __CFADD__(v68, 1)));
  v82 = (unint64_t)v80
      - __PAIR128__(v65, -(uint64_t)(((unint64_t)v76- __PAIR128__(v63, (1- (__CFADD__((_QWORD)v81, 0xFFFFFFFF00000001)+ BYTE8(v81))))) >> 64));
  if ((_BYTE)v79 + (v79 < (1 - (__CFADD__((_QWORD)v82, 0xFFFFFFFFLL) + BYTE8(v82)))))
    v83 = 0;
  else
    v83 = -1;
  v243[0] = v83 & (v68 + 1) | v68 & *((_QWORD *)&v82 + 1);
  v243[1] = v83 & (v81 - 0xFFFFFFFF) | *((_QWORD *)&v82 + 1) & v72;
  v243[2] = v83 & (v76 - (1 - (__CFADD__((_QWORD)v81, 0xFFFFFFFF00000001) + BYTE8(v81)))) | *((_QWORD *)&v82 + 1) & v76;
  v243[3] = v83 & (v82 + 0xFFFFFFFF) | *((_QWORD *)&v82 + 1) & v80;
  sub_23418BBE4((uint64_t *)v242, (unint64_t *)&v244, v243);
  sub_23418BF80(a1, (unint64_t *)v242);
  v84 = v248[0] >> 63;
  v85 = *(_OWORD *)((char *)v248 + 8) >> 63;
  v86 = v248[1] >> 63;
  v88 = v85 - (1 - __CFADD__(v84, 0xFFFFFFFF00000000));
  v91 = v86
      - -(uint64_t)((v85 - __PAIR128__(v87, (1 - __CFADD__(v84, 0xFFFFFFFF00000000)))) >> 64);
  v90 = (v86
       - __PAIR128__(v89, -(uint64_t)((v85- __PAIR128__(v87, (1 - __CFADD__(v84, 0xFFFFFFFF00000000)))) >> 64))) >> 64;
  v92 = v91 + 0xFFFFFFFF;
  v93 = 1 - (__CFADD__(v91, 0xFFFFFFFFLL) + v90);
  if ((v248[1] < 0) + (*((_QWORD *)&v248[1] + 1) >> 63 < (unint64_t)v93))
    v94 = 0;
  else
    v94 = -1;
  if ((v248[1] < 0) + (*((_QWORD *)&v248[1] + 1) >> 63 < (unint64_t)v93))
    v95 = -1;
  else
    v95 = 0;
  v96 = v94 & ((2 * *(_QWORD *)&v248[0]) | 1) | v95 & (2 * *(_QWORD *)&v248[0]);
  v97 = v94 & (v84 - 0x100000000) | v95 & v84;
  v98 = v94 & v88 | v95 & v85;
  v99 = v94 & v92 | v95 & v86;
  *((_QWORD *)&v101 + 1) = v97;
  *(_QWORD *)&v101 = v96;
  v100 = v101 >> 63;
  *((_QWORD *)&v101 + 1) = v98;
  *(_QWORD *)&v101 = v97;
  v102 = v101 >> 63;
  *((_QWORD *)&v101 + 1) = v99;
  *(_QWORD *)&v101 = v98;
  v103 = v101 >> 63;
  v104 = v102 - (1 - __CFADD__(v100, 0xFFFFFFFF00000000));
  v105 = v103
       - __PAIR128__(v95, -(uint64_t)((v102- __PAIR128__(v92, (1 - __CFADD__(v100, 0xFFFFFFFF00000000)))) >> 64));
  v106 = v105 + 0xFFFFFFFF;
  if ((v99 < 0)
     + ((unint64_t)v99 >> 63 < (1 - (__CFADD__((_QWORD)v105, 0xFFFFFFFFLL) + BYTE8(v105)))))
  {
    v107 = 0;
  }
  else
  {
    v107 = -1;
  }
  v108 = ((2 * v96) | 1) & v107 | *((_QWORD *)&v105 + 1) & (2 * v96);
  *(_QWORD *)&v238[8] = v107 & v104 | *((_QWORD *)&v105 + 1) & v102;
  *(_QWORD *)&v238[16] = v107 & v106 | *((_QWORD *)&v105 + 1) & v103;
  *(_QWORD *)v238 = v107 & (v100 - 0x100000000) | *((_QWORD *)&v105 + 1) & v100;
  *((_QWORD *)&v110 + 1) = *(_QWORD *)v238;
  *(_QWORD *)&v110 = v108;
  v109 = v110 >> 63;
  v111 = *(__int128 *)v238 >> 63;
  v112 = *(__int128 *)&v238[8] >> 63;
  v113 = v111 - (1 - __CFADD__(v109, 0xFFFFFFFF00000000));
  v115 = v112
       - -(uint64_t)((v111
                                    - __PAIR128__(v104, (1 - __CFADD__(v109, 0xFFFFFFFF00000000)))) >> 64);
  v114 = (v112
        - __PAIR128__(v106, -(uint64_t)((v111- __PAIR128__(v104, (1 - __CFADD__(v109, 0xFFFFFFFF00000000)))) >> 64))) >> 64;
  v116 = v115 + 0xFFFFFFFF;
  v117 = 1 - (__CFADD__(v115, 0xFFFFFFFFLL) + v114);
  if ((*(uint64_t *)&v238[16] < 0) + (*(_QWORD *)&v238[16] >> 63 < (unint64_t)v117))
    v118 = 0;
  else
    v118 = -1;
  if ((*(uint64_t *)&v238[16] < 0) + (*(_QWORD *)&v238[16] >> 63 < (unint64_t)v117))
    v119 = -1;
  else
    v119 = 0;
  v120 = v119 & (2 * v108);
  v121 = v118 & (v109 - 0x100000000) | v119 & v109;
  v122 = v118 & v113 | v119 & v111;
  v123 = v118 & v116 | v119 & v112;
  v125 = ((unint64_t)*a1
        - __PAIR128__(((2 * v108) | 1) & v118 | (unint64_t)v120, ((2 * v108) | 1) & v118 | (unint64_t)v120)) >> 64;
  v124 = *a1 - (((2 * v108) | 1) & v118 | v120);
  LODWORD(v125) = -(int)v125;
  v17 = __CFADD__(v121, v125);
  v126 = v121 + v125;
  v127 = v17;
  v128 = a1[1] - v126;
  v129 = -(int)(((unint64_t)a1[1] - __PAIR128__(v127, v126)) >> 64);
  v17 = __CFADD__(v122, v129);
  v130 = v122 + v129;
  v131 = v17;
  v132 = a1[2] - v130;
  v133 = -(int)(((unint64_t)a1[2] - __PAIR128__(v131, v130)) >> 64);
  v17 = __CFADD__(v123, v133);
  v134 = v123 + v133;
  v135 = v17;
  v136 = (unint64_t)a1[3] - __PAIR128__(v135, v134);
  *a1 = v124 + *((_QWORD *)&v136 + 1);
  a1[1] = DWORD2(v136) + __CFADD__(v124, *((_QWORD *)&v136 + 1)) + v128;
  a1[2] = (__CFADD__(__CFADD__(v124, *((_QWORD *)&v136 + 1)), v128) | __CFADD__(DWORD2(v136), __CFADD__(v124, *((_QWORD *)&v136 + 1))+ v128))+ v132;
  a1[3] = v136
        + __CFADD__(__CFADD__(__CFADD__(v124, *((_QWORD *)&v136 + 1)), v128) | __CFADD__(DWORD2(v136), __CFADD__(v124, *((_QWORD *)&v136 + 1))+ v128), v132)+ (*((_QWORD *)&v136 + 1) & 0xFFFFFFFF00000001);
  v137 = v249[0];
  v138 = v249[0] + v14;
  v139 = v249[1];
  v140 = v21
       + (__CFADD__(__CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14), *((_QWORD *)&v249[0] + 1)) | __CFADD__(*((_QWORD *)&v14 + 1), __CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14) + *((_QWORD *)&v249[0] + 1)))
       + *(_QWORD *)&v249[1];
  v141 = *((_QWORD *)&v21 + 1)
       + (__CFADD__(__CFADD__(__CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14), *((_QWORD *)&v249[0] + 1)) | __CFADD__(*((_QWORD *)&v14 + 1), __CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14) + *((_QWORD *)&v249[0] + 1)), (_QWORD)v139) | __CFADD__((_QWORD)v21, (__CFADD__(__CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14), *((_QWORD *)&v249[0] + 1)) | __CFADD__(*((_QWORD *)&v14 + 1), __CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14)+ *((_QWORD *)&v249[0]+ 1)))+ (_QWORD)v139))+ *((_QWORD *)&v249[1] + 1);
  if (__CFADD__(__CFADD__(__CFADD__(__CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14), *((_QWORD *)&v249[0] + 1)) | __CFADD__(*((_QWORD *)&v14 + 1), __CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14) + *((_QWORD *)&v249[0] + 1)), *(_QWORD *)&v249[1]) | __CFADD__((_QWORD)v21, (__CFADD__(__CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14), *((_QWORD *)&v249[0] + 1)) | __CFADD__(*((_QWORD *)&v14 + 1), __CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14) + *((_QWORD *)&v249[0] + 1)))+ *(_QWORD *)&v249[1]), *((_QWORD *)&v249[1] + 1)) | __CFADD__(*((_QWORD *)&v21 + 1), (__CFADD__(__CFADD__(__CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14), *((_QWORD *)&v249[0] + 1)) | __CFADD__(*((_QWORD *)&v14 + 1), __CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14)+ *((_QWORD *)&v249[0] + 1)),
                                           *(_QWORD *)&v249[1]) | __CFADD__((_QWORD)v21, (__CFADD__(__CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14), *((_QWORD *)&v249[0] + 1)) | __CFADD__(*((_QWORD *)&v14 + 1), __CFADD__(*(_QWORD *)&v249[0], (_QWORD)v14) + *((_QWORD *)&v249[0] + 1)))+ *(_QWORD *)&v249[1]))+ *((_QWORD *)&v249[1] + 1)))v142 = 1;
  else
    v142 = 0;
  v143 = *((unint64_t *)&v138 + 1) - __PAIR128__(v116, (1 - __CFADD__((_QWORD)v138, 1)));
  v145 = v141
       - -(uint64_t)((v140
                                    - __PAIR128__(v119, (1- (__CFADD__((_QWORD)v143, 0xFFFFFFFF00000001)+ BYTE8(v143))))) >> 64);
  v144 = (v141
        - __PAIR128__(v120, -(uint64_t)((v140- __PAIR128__(v119, (1- (__CFADD__((_QWORD)v143, 0xFFFFFFFF00000001)+ BYTE8(v143))))) >> 64))) >> 64;
  v146 = v145 + 0xFFFFFFFF;
  v147 = -(uint64_t)(v142 + (v142 < (1 - (__CFADD__(v145, 0xFFFFFFFFLL) + v144))));
  v148 = v147 == 0;
  if ((_BYTE)v147)
    v149 = 0;
  else
    v149 = -1;
  if (v148)
    v150 = 0;
  else
    v150 = -1;
  v151 = v149 & (v138 + 1) | v150 & v138;
  v152 = v149 & (v143 - 0xFFFFFFFF) | v150 & *((_QWORD *)&v138 + 1);
  v153 = v149 & (v140 - (1 - (__CFADD__((_QWORD)v143, 0xFFFFFFFF00000001) + BYTE8(v143)))) | v150 & v140;
  v237 = v149 & v146 | v150 & v141;
  v154 = a6[1];
  v156 = (*a6 + *(_OWORD *)a5) >> 64;
  v155 = *a6 + *a5;
  v157 = __CFADD__(__CFADD__(*a6, *a5), a5[1]);
  v158 = a5[2];
  v159 = a5[3];
  v160 = a6[2];
  v161 = a6[3];
  v17 = __CFADD__(v160, v158);
  v162 = v160 + v158;
  v163 = v17;
  v17 = __CFADD__(v161, v159);
  v164 = v161 + v159;
  v165 = v17;
  v167 = v156 + v154;
  v17 = __CFADD__(__CFADD__(v156, v154), v162) | __CFADD__(v157, (__PAIR128__(v162, v156) + v154) >> 64);
  v166 = v157 + ((__PAIR128__(v162, v156) + v154) >> 64);
  v168 = v163 + v17 + v164;
  if (__CFADD__(v17, v164) | __CFADD__(v163, v17 + v164))
    v169 = v165 + 1;
  else
    v169 = v165;
  v170 = v167 - __PAIR128__(v165, (1 - __CFADD__(v155, 1)));
  v171 = (unint64_t)v168
       - __PAIR128__(v150, -(uint64_t)((v166- __PAIR128__(v146, (1- (__CFADD__((_QWORD)v170, 0xFFFFFFFF00000001)+ BYTE8(v170))))) >> 64));
  if ((_BYTE)v169 + (v169 < (1 - (__CFADD__((_QWORD)v171, 0xFFFFFFFFLL) + BYTE8(v171)))))
    v172 = 0;
  else
    v172 = -1;
  v244 = v172 & (v155 + 1) | *((_QWORD *)&v171 + 1) & v155;
  v245 = v172 & (v170 - 0xFFFFFFFF) | *((_QWORD *)&v171 + 1) & v167;
  v246 = v172 & (v166 - (1 - (__CFADD__((_QWORD)v170, 0xFFFFFFFF00000001) + BYTE8(v170)))) | *((_QWORD *)&v171 + 1) & v166;
  v247 = v172 & (v171 + 0xFFFFFFFF) | *((_QWORD *)&v171 + 1) & v168;
  sub_23418BF80(a3, (unint64_t *)&v244);
  v176 = *a3 - v151;
  v177 = a3[1] - (v152 + -(uint64_t)(((unint64_t)*a3 - __PAIR128__(v175, v151)) >> 64));
  v17 = __CFADD__(v153, -(uint64_t)(((unint64_t)a3[1]- __PAIR128__(v152+ (unint64_t)-(uint64_t)(((unint64_t)*a3- __PAIR128__(v175, v151)) >> 64), v152+ (unint64_t)-(uint64_t)(((unint64_t)*a3- __PAIR128__(v175, v151)) >> 64))) >> 64));
  v178 = v153
       + -(uint64_t)(((unint64_t)a3[1]
                                    - __PAIR128__(v152+ (unint64_t)-(uint64_t)(((unint64_t)*a3- __PAIR128__(v175, v151)) >> 64), v152+ (unint64_t)-(uint64_t)(((unint64_t)*a3- __PAIR128__(v175, v151)) >> 64))) >> 64);
  v179 = v17;
  v180 = a3[2] - v178;
  v17 = __CFADD__(v237, -(uint64_t)(((unint64_t)a3[2] - __PAIR128__(v179, v178)) >> 64));
  v181 = v237 + -(uint64_t)(((unint64_t)a3[2] - __PAIR128__(v179, v178)) >> 64);
  v182 = v17;
  v183 = (unint64_t)a3[3] - __PAIR128__(v182, v181);
  v184 = __CFADD__(v176, *((_QWORD *)&v183 + 1)) + v177;
  v185 = __CFADD__(__CFADD__(v176, *((_QWORD *)&v183 + 1)), v177) | __CFADD__(DWORD2(v183), v184);
  *a3 = v176 + *((_QWORD *)&v183 + 1);
  a3[1] = DWORD2(v183) + v184;
  a3[2] = v185 + v180;
  a3[3] = v183 + __CFADD__(v185, v180) + (*((_QWORD *)&v183 + 1) & 0xFFFFFFFF00000001);
  v186 = a1[1];
  v187 = v108 - *a1;
  v17 = __CFADD__(v186, -(uint64_t)(((unint64_t)v108 - __PAIR128__(v185 + v180, *a1)) >> 64));
  v188 = v186 + -(uint64_t)(((unint64_t)v108 - __PAIR128__(v185 + v180, *a1)) >> 64);
  v189 = v17;
  v190 = *(_QWORD *)v238 - v188;
  v191 = a1[2];
  v192 = a1[3];
  v17 = __CFADD__(v191, -(uint64_t)((*(unint64_t *)v238 - __PAIR128__(v189, v188)) >> 64));
  v193 = v191 + -(uint64_t)((*(unint64_t *)v238 - __PAIR128__(v189, v188)) >> 64);
  v194 = v17;
  v196 = *(_QWORD *)&v238[8] - v193;
  v195 = (*(unint64_t *)&v238[8] - __PAIR128__(v194, v193)) >> 64;
  v17 = __CFADD__(v192, -v195);
  v197 = v192 + -v195;
  v198 = v17;
  v199 = *(unint64_t *)&v238[16] - __PAIR128__(v198, v197);
  v200 = __CFADD__(v187, *((_QWORD *)&v199 + 1)) + v190;
  v201 = __CFADD__(__CFADD__(v187, *((_QWORD *)&v199 + 1)), v190) | __CFADD__(DWORD2(v199), v200);
  *a2 = v187 + *((_QWORD *)&v199 + 1);
  a2[1] = DWORD2(v199) + v200;
  a2[2] = v201 + v196;
  a2[3] = v199 + __CFADD__(v201, v196) + (*((_QWORD *)&v199 + 1) & 0xFFFFFFFF00000001);
  v202 = v137 >> 63;
  *((_QWORD *)&v204 + 1) = v139;
  *(_QWORD *)&v204 = *((_QWORD *)&v137 + 1);
  v203 = v204 >> 63;
  v205 = v139 >> 63;
  v206 = v205
       - -(uint64_t)((v203
                                    - __PAIR128__(v173, (1 - __CFADD__(v202, 0xFFFFFFFF00000000)))) >> 64);
  v207 = 1
       - (__CFADD__(v206, 0xFFFFFFFFLL)
        + ((v205
          - __PAIR128__(v174, -(uint64_t)((v203- __PAIR128__(v173, (1 - __CFADD__(v202, 0xFFFFFFFF00000000)))) >> 64))) >> 64));
  if ((v139 < 0) + (*((_QWORD *)&v139 + 1) >> 63 < (unint64_t)v207))
    v208 = 0;
  else
    v208 = -1;
  if ((v139 < 0) + (*((_QWORD *)&v139 + 1) >> 63 < (unint64_t)v207))
    v209 = -1;
  else
    v209 = 0;
  *(_QWORD *)&v249[0] = v208 & ((2 * v137) | 1) | v209 & (2 * v137);
  *((_QWORD *)&v249[0] + 1) = v208 & (v202 - 0x100000000) | v209 & v202;
  *(_QWORD *)&v249[1] = v208 & (v203 - (1 - __CFADD__(v202, 0xFFFFFFFF00000000))) | v209 & v203;
  *((_QWORD *)&v249[1] + 1) = v208 & (v206 + 0xFFFFFFFF) | v209 & v205;
  sub_23418BF80((uint64_t *)v249, (unint64_t *)v249);
  result = sub_23418BBE4(a2, (unint64_t *)v242, (unint64_t *)a2);
  v211 = v249[0] >> 63;
  v212 = *(_OWORD *)((char *)v249 + 8) >> 63;
  v213 = v249[1] >> 63;
  v215 = v212 - (1 - __CFADD__(v211, 0xFFFFFFFF00000000));
  v217 = v213
       - -(uint64_t)((v212
                                    - __PAIR128__(v214, (1 - __CFADD__(v211, 0xFFFFFFFF00000000)))) >> 64);
  v218 = 1
       - (__CFADD__(v217, 0xFFFFFFFFLL)
        + ((v213
          - __PAIR128__(v216, -(uint64_t)((v212- __PAIR128__(v214, (1 - __CFADD__(v211, 0xFFFFFFFF00000000)))) >> 64))) >> 64));
  if ((v249[1] < 0) + (*((_QWORD *)&v249[1] + 1) >> 63 < (unint64_t)v218))
    v219 = 0;
  else
    v219 = -1;
  if ((v249[1] < 0) + (*((_QWORD *)&v249[1] + 1) >> 63 < (unint64_t)v218))
    v220 = -1;
  else
    v220 = 0;
  v221 = v219 & (v211 - 0x100000000) | v220 & v211;
  v222 = v219 & v215 | v220 & v212;
  v223 = v219 & (v217 + 0xFFFFFFFF) | v220 & v213;
  v224 = *a2 - (v219 & ((2 * *(_QWORD *)&v249[0]) | 1) | v220 & (2 * *(_QWORD *)&v249[0]));
  v225 = -(int)(((unint64_t)*a2
               - __PAIR128__(*a2, v219 & ((2 * *(_QWORD *)&v249[0]) | 1) | v220 & (unint64_t)(2 * *(_QWORD *)&v249[0]))) >> 64);
  v17 = __CFADD__(v221, v225);
  v226 = v221 + v225;
  v227 = v17;
  v228 = a2[1] - v226;
  v229 = -(int)(((unint64_t)a2[1] - __PAIR128__(v227, v226)) >> 64);
  v17 = __CFADD__(v222, v229);
  v230 = v222 + v229;
  v231 = v17;
  v232 = a2[2] - v230;
  v233 = -(int)(((unint64_t)a2[2] - __PAIR128__(v231, v230)) >> 64);
  v17 = __CFADD__(v223, v233);
  v234 = v223 + v233;
  v235 = v17;
  v236 = (unint64_t)a2[3] - __PAIR128__(v235, v234);
  *a2 = v224 + *((_QWORD *)&v236 + 1);
  a2[1] = DWORD2(v236) + __CFADD__(v224, *((_QWORD *)&v236 + 1)) + v228;
  a2[2] = (__CFADD__(__CFADD__(v224, *((_QWORD *)&v236 + 1)), v228) | __CFADD__(DWORD2(v236), __CFADD__(v224, *((_QWORD *)&v236 + 1))+ v228))+ v232;
  a2[3] = v236
        + __CFADD__(__CFADD__(__CFADD__(v224, *((_QWORD *)&v236 + 1)), v228) | __CFADD__(DWORD2(v236), __CFADD__(v224, *((_QWORD *)&v236 + 1))+ v228), v232)+ (*((_QWORD *)&v236 + 1) & 0xFFFFFFFF00000001);
  return result;
}

int8x16_t sub_23418D734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t result;

  if (a2)
    v4 = 0;
  else
    v4 = -1;
  if (a2)
    v5 = -1;
  else
    v5 = 0;
  v6 = *(_QWORD *)(a4 + 24) & v5 | *(_QWORD *)(a3 + 24) & v4;
  v7 = vandq_s8(*(int8x16_t *)(a4 + 8), (int8x16_t)vdupq_n_s64(v5));
  v8 = vandq_s8(*(int8x16_t *)(a3 + 8), (int8x16_t)vdupq_n_s64(v4));
  *(_QWORD *)a1 = v4 & *(_QWORD *)a3 | v5 & *(_QWORD *)a4;
  result = vorrq_s8(v7, v8);
  *(int8x16_t *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

double sub_23418D794(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v6 = 0;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  v7 = (uint64_t)(a3 + 2);
  v8 = a1 - 1;
  do
  {
    sub_23418D734((uint64_t)a3, v6 ^ v8, a2, (uint64_t)a3);
    sub_23418D734(v7, v6++ ^ v8, a2 + 32, v7);
    a2 += 64;
  }
  while (v6 != 15);
  *(_QWORD *)&result = sub_23418D734((uint64_t)(a3 + 4), a1, (uint64_t)(a3 + 4), (uint64_t)&xmmword_2342E3048).u64[0];
  return result;
}

unint64_t *sub_23418D840(unint64_t *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = a4 & (a3 << 62 >> 63);
  v5 = a4 & (a3 << 61 >> 63);
  v6 = a4 & (a3 << 60 >> 63);
  *result = ((((a4 & 0x1111111111111111) * (a3 & 0x1111111111111110)) ^ ((a4 & 0x8888888888888888)
                                                                           * (a3 & 0x2222222222222220)) ^ ((a4 & 0x4444444444444444) * (a3 & 0x4444444444444440)) ^ ((a4 & 0x2222222222222222) * (a3 & 0x8888888888888880))) & 0x1111111111111111 | (((a4 & 0x2222222222222222) * (a3 & 0x1111111111111110)) ^ ((a4 & 0x1111111111111111) * (a3 & 0x2222222222222220)) ^ ((a4 & 0x8888888888888888) * (a3 & 0x4444444444444440)) ^ ((a4 & 0x4444444444444444) * (a3 & 0x8888888888888880))) & 0x2222222222222222 | (((a4 & 0x4444444444444444) * (a3 & 0x1111111111111110)) ^ ((a4 & 0x2222222222222222) * (a3 & 0x2222222222222220)) ^ ((a4 & 0x1111111111111111) * (a3 & 0x4444444444444440)) ^ ((a4 & 0x8888888888888888) * (a3 & 0x8888888888888880))) & 0x4444444444444444 | (((a4 & 0x8888888888888888) * (a3 & 0x1111111111111110)) ^ ((a4 & 0x4444444444444444) * (a3 & 0x2222222222222220)) ^ ((a4 & 0x2222222222222222) * (a3 & 0x4444444444444440)) ^ ((a4 & 0x1111111111111111) * (a3 & 0x8888888888888880))) & 0x8888888888888888) ^ (a3 << 63 >> 63) & a4 ^ (2 * v4) ^ (4 * v5) ^ (8 * v6);
  *a2 = (((((a4 & 0x1111111111111111) * (unsigned __int128)(a3 & 0x1111111111111110)) >> 64) ^ (((a4 & 0x8888888888888888) * (unsigned __int128)(a3 & 0x2222222222222220)) >> 64) ^ (((a4 & 0x4444444444444444) * (unsigned __int128)(a3 & 0x4444444444444440)) >> 64) ^ (((a4 & 0x2222222222222222) * (unsigned __int128)(a3 & 0x8888888888888880)) >> 64)) & 0x1111111111111111 | ((((a4 & 0x2222222222222222) * (unsigned __int128)(a3 & 0x1111111111111110)) >> 64) ^ (((a4 & 0x1111111111111111) * (unsigned __int128)(a3 & 0x2222222222222220)) >> 64) ^ (((a4 & 0x8888888888888888) * (unsigned __int128)(a3 & 0x4444444444444440)) >> 64) ^ (((a4 & 0x4444444444444444) * (unsigned __int128)(a3 & 0x8888888888888880)) >> 64)) & 0x2222222222222222 | ((((a4 & 0x4444444444444444) * (unsigned __int128)(a3 & 0x1111111111111110)) >> 64) ^ (((a4 & 0x2222222222222222) * (unsigned __int128)(a3 & 0x2222222222222220)) >> 64) ^ (((a4 & 0x1111111111111111) * (unsigned __int128)(a3 & 0x4444444444444440)) >> 64) ^ (((a4 & 0x8888888888888888) * (unsigned __int128)(a3 & 0x8888888888888880)) >> 64)) & 0x4444444444444444 | ((((a4 & 0x8888888888888888) * (unsigned __int128)(a3 & 0x1111111111111110)) >> 64) ^ (((a4 & 0x4444444444444444) * (unsigned __int128)(a3 & 0x2222222222222220)) >> 64) ^ (((a4 & 0x2222222222222222) * (unsigned __int128)(a3 & 0x4444444444444440)) >> 64) ^ (((a4 & 0x1111111111111111) * (unsigned __int128)(a3 & 0x8888888888888880)) >> 64)) & 0x8888888888888888) ^ (v4 >> 63) ^ (v5 >> 62) ^ (v6 >> 61);
  return result;
}

void sub_23418D9EC()
{
  uint64_t v0;

  if ((unint64_t)(qword_25615AA50 + 1) > 1)
    v0 = qword_25615AA50 + 1;
  else
    v0 = 1;
  qword_25615AA50 = v0;
}

double sub_23418DA0C()
{
  double result;

  qword_25615AA58 = (uint64_t)&unk_2342E47D8;
  *(_QWORD *)&result = 0x1100000011;
  unk_25615AA60 = xmmword_2342E20E0;
  return result;
}

uint64_t sub_23418DA30(void ***a1, uint64_t a2, int a3)
{
  void **v5;
  void **v6;

  if (*a1)
    return 1;
  v5 = sub_234162014(a2);
  v6 = v5;
  if (v5 && sub_234162474((uint64_t)v5, a3))
  {
    *a1 = v6;
    return 1;
  }
  sub_234161FC4((_QWORD **)v6);
  return 0;
}

uint64_t sub_23418DA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (*(_DWORD *)(a4 + 16))
    goto LABEL_2;
  v9 = *(int *)(a3 + 32);
  v10 = *(int *)(a4 + 8);
  if (v10 > v9)
  {
    v11 = 0;
    v12 = v10 - v9;
    v13 = (uint64_t *)(*(_QWORD *)a4 + 8 * v9);
    do
    {
      v14 = *v13++;
      v11 |= v14;
      --v12;
    }
    while (v12);
    if (v11)
    {
LABEL_2:
      sub_2341579B4(4, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", 740);
      return 0;
    }
  }
  if (!sub_23416591C(a1, a2, a3, a5))
    return 0;
  return sub_23416583C(a1, a1, a3, a3, a5);
}

uint64_t sub_23418DB58(unsigned int *a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  __int16 v9;
  uint64_t result;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _BOOL4 v30;

  if ((a2 & 0x3F) != 0)
  {
    v8 = 68;
    v9 = 931;
LABEL_5:
    sub_2341579B4(4, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", v9);
    return 0;
  }
  if (a2 >= 0x3FFFFFF)
  {
    v8 = 128;
    v9 = 968;
    goto LABEL_5;
  }
  v19 = sub_234162BA4(a3, 3);
  sub_234162DC8((_QWORD *)a7);
  result = (uint64_t)sub_234162E68(a7);
  if (result)
  {
    v20 = result;
    v27 = (uint64_t)a3;
    v28 = 0;
    v21 = 0;
    v22 = 5 * a2;
    if (v19)
      v22 = 8 * a2;
    if (v22 <= 1)
      v22 = 1;
    v23 = v22 - 1;
    do
    {
      result = sub_23416BC9C((uint64_t)a1, a2, 0, 1u);
      if (!(_DWORD)result)
        break;
      while (1)
      {
        if (a8)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a8 + 8))(0, v21, a8);
          if (!(_DWORD)result)
            goto LABEL_36;
        }
        if (!a4)
          goto LABEL_19;
        result = sub_234169E60(v20, (uint64_t)a1, a4, a7);
        if (!(_DWORD)result)
          goto LABEL_36;
        if ((int)sub_234162A28(v20, a6) > 0)
        {
LABEL_19:
          if ((int)sub_234162A28((uint64_t)a1, a5) >= 1)
            break;
        }
        result = sub_23416BC9C((uint64_t)a1, a2, 0, 1u);
        v21 = (v21 + 1);
        if (!(_DWORD)result)
          goto LABEL_36;
      }
      if (!sub_23416AEB8(a1))
      {
        v30 = 0;
        sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
        if (!sub_234161CF8(v20, (uint64_t)a1, (uint64_t)&qword_256159710)
          || !sub_234167D24(&v30, v20, v27, a7))
        {
          goto LABEL_35;
        }
        if (v30)
        {
          v29 = 0;
          if (!sub_23416B34C(&v29, (uint64_t)a1, 0, a7, 0, a8))
            goto LABEL_35;
          if (v29)
          {
            result = 1;
            break;
          }
        }
      }
      if (v28 == v23)
      {
        sub_2341579B4(4, 0, 141, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/rsa/rsa_impl.c", 1042);
LABEL_35:
        result = 0;
        break;
      }
      ++v28;
      if (a8)
        v24 = (*(uint64_t (**)(uint64_t))(a8 + 8))(2);
      else
        v24 = 1;
      result = 0;
      v21 = (v21 + 1);
    }
    while (v24);
  }
LABEL_36:
  if (!*(_BYTE *)(a7 + 40))
  {
    v25 = *(_QWORD *)(a7 + 8);
    v26 = *(_QWORD *)(a7 + 16) - 1;
    *(_QWORD *)(a7 + 16) = v26;
    *(_QWORD *)(a7 + 32) = *(_QWORD *)(v25 + 8 * v26);
  }
  return result;
}

_QWORD *sub_23418DE08(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = sub_23418E344(0x30uLL);
  v5 = v4;
  if (v4)
  {
    v4[2] = 16;
    v6 = sub_23418E380(0x10uLL, 8uLL);
    v5[1] = v6;
    if (v6)
    {
      v5[4] = a2;
      v5[5] = a1;
    }
    else
    {
      sub_23418E3C4(v5);
      return 0;
    }
  }
  return v5;
}

void sub_23418DE74(_QWORD *a1)
{
  unint64_t v2;
  unint64_t i;
  _QWORD *v4;
  _QWORD *v5;

  if (a1)
  {
    v2 = a1[2];
    if (v2)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD **)(a1[1] + 8 * i);
        if (v4)
        {
          do
          {
            v5 = (_QWORD *)v4[1];
            sub_23418E3C4(v4);
            v4 = v5;
          }
          while (v5);
          v2 = a1[2];
        }
      }
    }
    sub_23418E3C4((_QWORD *)a1[1]);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_23418DEE4(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t), unsigned int (*a4)(_QWORD, _QWORD, uint64_t))
{
  _QWORD *v4;

  v4 = sub_23418DF1C(a1, 0, a2, a3, a4);
  if (*v4)
    return *(_QWORD *)*v4;
  else
    return 0;
}

_QWORD *sub_23418DF1C(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t), unsigned int (*a5)(_QWORD, _QWORD, uint64_t))
{
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v9 = a4(a1[5], a3);
  if (a2)
    *a2 = v9;
  v10 = (_QWORD *)(a1[1] + 8 * ((unint64_t)v9 % a1[2]));
  v11 = (_QWORD *)*v10;
  if (*v10 && a5(a1[4], *v11, a3))
  {
    do
    {
      v12 = v11;
      v11 = (_QWORD *)v11[1];
    }
    while (v11 && a5(a1[4], *v11, a3));
    return v12 + 1;
  }
  return v10;
}

uint64_t sub_23418DFC0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int (*a4)(uint64_t, _QWORD))
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v8;

  v4 = *(_QWORD *)(a1 + 8) + 8 * ((unint64_t)a3 % *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD **)v4;
  if (*(_QWORD *)v4)
  {
    if (a4(a2, *v5))
    {
      while (1)
      {
        v8 = v5;
        v5 = (_QWORD *)v5[1];
        if (!v5)
          break;
        if (!a4(a2, *v5))
        {
          v4 = (unint64_t)(v8 + 1);
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      if (*(_QWORD *)v4)
        return **(_QWORD **)v4;
    }
  }
  return 0;
}

uint64_t sub_23418E048(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t), unsigned int (*a5)(_QWORD, _QWORD, uint64_t))
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t result;
  unsigned int v11;

  v11 = 0;
  *a2 = 0;
  v8 = sub_23418DF1C(a1, &v11, a3, a4, a5);
  v9 = v8;
  if (*v8)
  {
    *a2 = *(_QWORD *)*v8;
    *(_QWORD *)*v8 = a3;
  }
  else
  {
    result = (uint64_t)sub_23418E2E4(0x18uLL);
    if (!result)
      return result;
    *(_DWORD *)(result + 16) = v11;
    *(_QWORD *)result = a3;
    *(_QWORD *)(result + 8) = 0;
    *v9 = result;
    ++*a1;
    sub_23418E0E0((uint64_t)a1);
  }
  return 1;
}

void sub_23418E0E0(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (!*(_DWORD *)(a1 + 24))
  {
    v1 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)a1 / v1 < 3)
    {
      if (v1 <= *(_QWORD *)a1 || v1 < 0x11)
        return;
      v3 = v1 >> 1;
      if (v3 <= 0x10)
        v2 = 16;
      else
        v2 = v3;
    }
    else
    {
      if ((uint64_t)v1 < 1)
        return;
      v2 = 2 * v1;
    }
    sub_23418E24C(a1, v2);
  }
}

uint64_t sub_23418E134(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t), unsigned int (*a4)(_QWORD, _QWORD, uint64_t))
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = (uint64_t **)sub_23418DF1C(a1, 0, a2, a3, a4);
  v6 = *v5;
  if (!*v5)
    return 0;
  *v5 = (uint64_t *)v6[1];
  v7 = *v6;
  sub_23418E3C4(v6);
  --*a1;
  sub_23418E0E0((uint64_t)a1);
  return v7;
}

void sub_23418E1A0(uint64_t a1, void (*a2)(_QWORD, uint64_t), uint64_t a3)
{
  int v6;
  int v7;
  unint64_t v8;
  unint64_t i;
  _QWORD *v10;
  _QWORD *v11;

  if (a1)
  {
    v6 = *(_DWORD *)(a1 + 24);
    if (v6 == -1)
    {
      v7 = -1;
    }
    else
    {
      v7 = v6 + 1;
      *(_DWORD *)(a1 + 24) = v6 + 1;
    }
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      for (i = 0; i < v8; ++i)
      {
        v10 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * i);
        if (v10)
        {
          do
          {
            v11 = (_QWORD *)v10[1];
            a2(*v10, a3);
            v10 = v11;
          }
          while (v11);
          v8 = *(_QWORD *)(a1 + 16);
        }
      }
      v7 = *(_DWORD *)(a1 + 24);
    }
    if (v7 != -1)
      *(_DWORD *)(a1 + 24) = v7 - 1;
    sub_23418E0E0(a1);
  }
}

void sub_23418E24C(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!(a2 >> 61))
  {
    v4 = sub_23418E344(8 * a2);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 16);
      if (v6)
      {
        for (i = 0; i < v6; ++i)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i);
          if (v8)
          {
            do
            {
              v9 = *(unsigned int *)(v8 + 16) % a2;
              v10 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v4[v9];
              v4[v9] = v8;
              v8 = v10;
            }
            while (v10);
            v6 = *(_QWORD *)(a1 + 16);
          }
        }
      }
      sub_23418E3C4(*(_QWORD **)(a1 + 8));
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = a2;
    }
  }
}

_QWORD *sub_23418E2E4(unint64_t a1)
{
  _QWORD *v2;

  if (a1 <= 0xFFFFFFFFFFFFFFF7 && (v2 = malloc_type_malloc(a1 + 8, 0x30772F57uLL)) != 0)
  {
    *v2 = a1;
    return v2 + 1;
  }
  else
  {
    sub_2341579B4(14, 0, 65, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/mem.c", 247);
    return 0;
  }
}

_QWORD *sub_23418E344(unint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = sub_23418E2E4(a1);
  v3 = v2;
  if (a1 && v2)
    bzero(v2, a1);
  return v3;
}

_QWORD *sub_23418E380(unint64_t a1, unint64_t a2)
{
  if (!a2 || is_mul_ok(a2, a1))
    return sub_23418E344(a2 * a1);
  sub_2341579B4(14, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/mem.c", 261);
  return 0;
}

void sub_23418E3C4(_QWORD *a1)
{
  uint64_t v1;
  char *v2;

  if (a1)
  {
    v2 = (char *)(a1 - 1);
    v1 = *(a1 - 1);
    if (v1 != -8)
      bzero(a1 - 1, v1 + 8);
    free(v2);
  }
}

void sub_23418E400(void *a1, size_t a2)
{
  if (a2)
    bzero(a1, a2);
}

_QWORD *sub_23418E40C(_QWORD *a1, unint64_t a2)
{
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;

  if (!a1)
    return sub_23418E2E4(a2);
  v4 = *(a1 - 1);
  v5 = sub_23418E2E4(a2);
  v6 = v5;
  if (v5)
  {
    if (v4 >= a2)
      v7 = a2;
    else
      v7 = v4;
    memcpy(v5, a1, v7);
    sub_23418E3C4(a1);
  }
  return v6;
}

uint64_t sub_23418E484(char *a1, char *a2, uint64_t a3)
{
  unsigned __int8 v3;
  char v4;
  char v5;
  char v6;

  if (!a3)
    return 0;
  v3 = 0;
  do
  {
    v5 = *a1++;
    v4 = v5;
    v6 = *a2++;
    v3 |= v6 ^ v4;
    --a3;
  }
  while (a3);
  return v3;
}

uint64_t sub_23418E4B4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;
  int v4;

  for (result = 2166136261; a2; --a2)
  {
    v4 = *a1++;
    result = 16777619 * (result ^ v4);
  }
  return result;
}

uint64_t sub_23418E4E4(const char *a1)
{
  const char *v1;
  uint64_t v2;
  size_t i;
  int v4;

  v1 = a1;
  v2 = 2166136261;
  for (i = strlen(a1); i; --i)
  {
    v4 = *(unsigned __int8 *)v1++;
    v2 = 16777619 * (v2 ^ v4);
  }
  return v2;
}

unint64_t sub_23418E530(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = 0;
  if (a2)
  {
    while (*(_BYTE *)(a1 + v2))
    {
      if (a2 == ++v2)
      {
        v2 = a2;
        break;
      }
    }
  }
  if (v2 >= a2)
    return a2;
  else
    return v2;
}

const char *sub_23418E55C(const char *result)
{
  const char *v1;
  unint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = strlen(result) + 1;
    return (const char *)sub_23418E58C(v1, v2);
  }
  return result;
}

_QWORD *sub_23418E58C(const void *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  if (!a2)
    return 0;
  v4 = sub_23418E2E4(a2);
  v5 = v4;
  if (v4)
    memcpy(v4, a1, a2);
  return v5;
}

BOOL sub_23418E5E4(int a1)
{
  return (a1 & 0xFFFFFFDF) - 65 < 0x1A;
}

BOOL sub_23418E5F8(int a1)
{
  return (a1 - 48) < 0xA;
}

BOOL sub_23418E608(int a1)
{
  return (a1 - 48) < 0xA || (a1 & 0xFFFFFFDF) - 65 < 6;
}

uint64_t sub_23418E624(_BYTE *a1, int a2)
{
  char v2;

  if ((a2 - 58) > 0xFFFFFFF5)
  {
    v2 = -48;
    goto LABEL_7;
  }
  if ((a2 - 97) < 6)
  {
    v2 = -87;
LABEL_7:
    *a1 = v2 + a2;
    return 1;
  }
  if ((a2 - 65) <= 5)
  {
    v2 = -55;
    goto LABEL_7;
  }
  return 0;
}

BOOL sub_23418E674(int a1)
{
  return (a1 - 48) < 0xA || (a1 & 0xFFFFFFDF) - 65 < 0x1A;
}

uint64_t sub_23418E690(uint64_t result)
{
  if ((result - 65) >= 0x1A)
    return result;
  else
    return (result + 32);
}

BOOL sub_23418E6A4(int a1)
{
  return a1 == 32 || (a1 - 9) < 5;
}

uint64_t sub_23418E6B8(char *a1, char *a2)
{
  int v2;
  int v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;

  v2 = *a1;
  if ((v2 - 65) < 0x1A)
    v2 += 32;
  v3 = *a2;
  v4 = v3 + 32;
  if ((v3 - 65) >= 0x1A)
    v4 = *a2;
  if (v2 < v4)
    return 0xFFFFFFFFLL;
  v5 = a1 + 1;
  v6 = a2 + 1;
  while (1)
  {
    if (v2 > v4)
      return 1;
    if (!v2)
      break;
    v7 = *v5++;
    v2 = v7;
    v8 = v7 + 32;
    v9 = (v7 - 65) >= 0x1A;
    v10 = *v6++;
    v4 = v10;
    if (!v9)
      v2 = v8;
    if ((v4 - 65) < 0x1A)
      v4 += 32;
    if (v2 < v4)
      return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t sub_23418E744(char *a1, char *a2, uint64_t a3)
{
  uint64_t i;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;

  if (!a3)
    return 0;
  for (i = a3 - 1; ; --i)
  {
    v5 = *a1++;
    v4 = v5;
    v6 = v5 + 32;
    v7 = (v5 - 65) >= 0x1A;
    v9 = *a2++;
    v8 = v9;
    if (!v7)
      v4 = v6;
    if ((v8 - 65) < 0x1A)
      v8 += 32;
    if (v4 < v8)
      break;
    if (v4 > v8)
      return 1;
    if (v4)
      v10 = i == 0;
    else
      v10 = 1;
    if (v10)
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_23418E7A8(char *a1, size_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return vsnprintf(a1, a2, a3, &a9);
}

uint64_t sub_23418E7D4(char **a1, const char *a2, va_list a3, int a4)
{
  _QWORD *(*v6)(unint64_t);
  void (*v7)(char *);
  _QWORD *(*v8)(char *, unint64_t);
  char *v9;
  char *v10;
  uint64_t result;
  size_t v12;
  char *v13;
  char *v14;

  v6 = (_QWORD *(*)(unint64_t))MEMORY[0x24BDAED08];
  if (a4)
  {
    v7 = (void (*)(char *))MEMORY[0x24BDAE450];
  }
  else
  {
    v6 = sub_23418E2E4;
    v7 = (void (*)(char *))sub_23418E3C4;
  }
  if (a4)
    v8 = (_QWORD *(*)(char *, unint64_t))MEMORY[0x24BDAFAB0];
  else
    v8 = (_QWORD *(*)(char *, unint64_t))sub_23418E40C;
  v9 = (char *)v6(64uLL);
  v10 = v9;
  if (!v9)
    goto LABEL_16;
  result = vsnprintf(v9, 0x40uLL, a2, a3);
  if ((result & 0x80000000) != 0)
    goto LABEL_16;
  if (result < 0x40)
  {
    v12 = 64;
  }
  else
  {
    v12 = result + 1;
    v13 = (char *)v8(v10, v12);
    if (!v13)
      goto LABEL_16;
    v14 = v13;
    result = vsnprintf(v13, v12, a2, a3);
    v10 = v14;
    if ((result & 0x80000000) != 0)
      goto LABEL_16;
  }
  if (v12 > result)
  {
    *a1 = v10;
    return result;
  }
LABEL_16:
  v7(v10);
  *a1 = 0;
  *__error() = 12;
  return 0xFFFFFFFFLL;
}

uint64_t sub_23418E8F4(char **a1, const char *a2, va_list a3)
{
  return sub_23418E7D4(a1, a2, a3, 0);
}

uint64_t sub_23418E8FC(char **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_23418E7D4(a1, a2, &a9, 0);
}

_QWORD *sub_23418E928(_BYTE *a1, size_t a2)
{
  size_t v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = 0;
  if (a2)
  {
    while (a1[v3])
    {
      if (a2 == ++v3)
      {
        v3 = a2;
        break;
      }
    }
  }
  if (v3 >= a2)
    v4 = a2;
  else
    v4 = v3;
  if (v4 == -1)
  {
    sub_2341579B4(14, 0, 65, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/mem.c", 551);
    return 0;
  }
  else
  {
    v5 = sub_23418E2E4(v4 + 1);
    v6 = v5;
    if (v5)
    {
      if (v4)
        memcpy(v5, a1, v4);
      *((_BYTE *)v6 + v4) = 0;
    }
  }
  return v6;
}

size_t sub_23418E9CC(_BYTE *a1, char *__s, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;

  if (a3 < 2)
  {
    v4 = 0;
    if (!a3)
      return strlen(__s) + v4;
  }
  else
  {
    v3 = 0;
    v4 = a3 - 1;
    while (__s[v3])
    {
      a1[v3] = __s[v3];
      if (v4 == ++v3)
      {
        __s += v3;
        a1 += v3;
        goto LABEL_9;
      }
    }
    __s += v3;
    a1 += v3;
    v4 = v3;
  }
LABEL_9:
  *a1 = 0;
  return strlen(__s) + v4;
}

size_t sub_23418EA40(_BYTE *a1, char *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t i;

  v3 = a3;
  if (a3)
  {
    for (i = 0; a1[i]; ++i)
    {
      if (!--a3)
      {
        a1 += v3;
        return sub_23418E9CC(a1, a2, a3) + v3;
      }
    }
    a1 += i;
    v3 = i;
  }
  return sub_23418E9CC(a1, a2, a3) + v3;
}

const char **sub_23418EA9C(uint64_t a1)
{
  const char **v2;
  const char **v3;
  const char *v4;
  int v5;
  char *v6;
  const char *v8;
  const char *v9;

  if (!a1)
    return 0;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    sub_23413F744();
    v2 = v3;
    if (!v3)
    {
      sub_2341579B4(8, 0, 12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/obj/obj.c", 113);
      return v2;
    }
    *v3 = 0;
    v3[1] = 0;
    v4 = (const char *)sub_23418E58C(*(const void **)(a1 + 24), *(int *)(a1 + 20));
    v2[3] = v4;
    v5 = *(_DWORD *)(a1 + 20);
    if (v5)
    {
      v6 = 0;
      if (!v4)
        goto LABEL_7;
    }
    *((_DWORD *)v2 + 5) = v5;
    *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
    v8 = *(const char **)(a1 + 8);
    if (v8)
    {
      v6 = (char *)sub_23418E55C(v8);
      if (!v6)
      {
LABEL_7:
        sub_23418E3C4(v6);
        sub_23418E3C4(0);
        sub_23418E3C4(0);
        sub_23418E3C4(v2);
        return 0;
      }
    }
    else
    {
      v6 = 0;
    }
    v9 = *(const char **)a1;
    if (!*(_QWORD *)a1 || (v9 = sub_23418E55C(v9)) != 0)
    {
      *v2 = v9;
      v2[1] = v6;
      *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32) | 0xD;
      return v2;
    }
    goto LABEL_7;
  }
  return (const char **)a1;
}

uint64_t sub_23418EB9C(uint64_t a1, uint64_t a2)
{
  size_t v2;
  int v3;

  v2 = *(int *)(a1 + 20);
  v3 = *(_DWORD *)(a2 + 20);
  if ((int)v2 < v3)
    return 0xFFFFFFFFLL;
  if ((int)v2 > v3)
    return 1;
  if ((_DWORD)v2)
    return memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), v2);
  return 0;
}

uint64_t sub_23418EBDC(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t sub_23418EBE8(uint64_t result)
{
  if (result)
    return *(_DWORD *)(result + 20) & ~(*(int *)(result + 20) >> 31);
  return result;
}

unsigned __int16 *sub_23418EBF8(unsigned __int16 *result)
{
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  unsigned int v5;

  if (result)
  {
    v1 = result;
    result = (unsigned __int16 *)*((unsigned int *)result + 4);
    if (!(_DWORD)result)
    {
      sub_234195C1C(&stru_256158330);
      if (qword_25615AAC0
        && (v2 = sub_23418DEE4((_QWORD *)qword_25615AAC0, (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t))sub_23418F5F0, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23418F5FC)) != 0)
      {
        v3 = v2;
        sub_234195C54(&stru_256158330);
        v4 = (char **)(v3 + 16);
      }
      else
      {
        sub_234195C54(&stru_256158330);
        result = (unsigned __int16 *)bsearch(v1, &unk_2342E5A88, 0x371uLL, 2uLL, (int (__cdecl *)(const void *, const void *))sub_23418ECC8);
        if (!result)
          return result;
        v5 = *result - 1;
        if (v5 >= 0x3C4)
          abort();
        v4 = &off_2505071C8[5 * v5 + 2];
      }
      return (unsigned __int16 *)*(unsigned int *)v4;
    }
  }
  return result;
}

uint64_t sub_23418ECC8(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 >= 0x3C4)
    abort();
  return sub_23418EB9C(a1, (uint64_t)&off_2505071C8[5 * v2]);
}

unsigned __int16 *sub_23418ECFC(_QWORD *a1)
{
  unint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v1 = a1[1];
  if (v1 >> 31)
    return 0;
  v3 = 0u;
  v4 = 0u;
  *((_QWORD *)&v4 + 1) = *a1;
  v5 = 0;
  DWORD1(v4) = v1;
  return sub_23418EBF8((unsigned __int16 *)&v3);
}

unsigned __int16 *sub_23418ED44(const void *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *result;
  unsigned int v5;
  const void *v6;
  __int128 v7;
  __int128 v8;

  sub_234195C1C(&stru_256158330);
  if (qword_25615AAC8
    && (v7 = 0u,
        v8 = 0u,
        v6 = a1,
        (v2 = sub_23418DEE4((_QWORD *)qword_25615AAC8, (uint64_t)&v6, (uint64_t (*)(_QWORD, uint64_t))sub_23418F5F0, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23418F5FC)) != 0))
  {
    v3 = v2;
    sub_234195C54(&stru_256158330);
    return (unsigned __int16 *)*(unsigned int *)(v3 + 16);
  }
  else
  {
    sub_234195C54(&stru_256158330);
    result = (unsigned __int16 *)bsearch(a1, &unk_2342E616A, 0x3B9uLL, 2uLL, (int (__cdecl *)(const void *, const void *))sub_23418EE18);
    if (result)
    {
      v5 = *result - 1;
      if (v5 >= 0x3C4)
        abort();
      return (unsigned __int16 *)LODWORD(off_2505071C8[5 * v5 + 2]);
    }
  }
  return result;
}

uint64_t sub_23418EE18(const char *a1, unsigned __int16 *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 >= 0x3C4)
    abort();
  return strcmp(a1, off_2505071C8[5 * v2]);
}

unsigned __int16 *sub_23418EE50(const void *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *result;
  unsigned int v5;
  _QWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_234195C1C(&stru_256158330);
  if (qword_25615AAD0
    && (v6[0] = 0,
        v7 = 0u,
        v8 = 0,
        v6[1] = a1,
        (v2 = sub_23418DEE4((_QWORD *)qword_25615AAD0, (uint64_t)v6, (uint64_t (*)(_QWORD, uint64_t))sub_23418F5F0, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23418F5FC)) != 0))
  {
    v3 = v2;
    sub_234195C54(&stru_256158330);
    return (unsigned __int16 *)*(unsigned int *)(v3 + 16);
  }
  else
  {
    sub_234195C54(&stru_256158330);
    result = (unsigned __int16 *)bsearch(a1, &unk_2342E68DC, 0x3B9uLL, 2uLL, (int (__cdecl *)(const void *, const void *))sub_23418EF28);
    if (result)
    {
      v5 = *result - 1;
      if (v5 >= 0x3C4)
        abort();
      return (unsigned __int16 *)LODWORD(off_2505071C8[5 * v5 + 2]);
    }
  }
  return result;
}

uint64_t sub_23418EF28(const char *a1, unsigned __int16 *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 >= 0x3C4)
    abort();
  return strcmp(a1, off_2505071C8[5 * v2 + 1]);
}

unsigned __int16 *sub_23418EF60(const char *a1)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;

  v1 = (unsigned __int16 *)sub_23418EF98(a1, 0);
  v2 = sub_23418EBF8(v1);
  sub_23413F6D0((_QWORD **)v1);
  return v2;
}

char **sub_23418EF98(const char *a1, int a2)
{
  unsigned int v4;

  if (!a2 && ((v4 = sub_23418ED44(a1)) != 0 || (v4 = sub_23418EE50(a1)) != 0))
    return sub_23418F064(v4);
  else
    return (char **)sub_23418F18C(0, a1, 0, 0);
}

uint64_t sub_23418EFEC(uint64_t *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  _OWORD v5[3];

  result = (uint64_t)sub_23418F064(a2);
  if (result)
  {
    v4 = result;
    memset(v5, 0, sizeof(v5));
    result = sub_234147F60(a1, (uint64_t)v5, 6u);
    if ((_DWORD)result)
    {
      result = sub_23414817C((uint64_t)v5, *(const void **)(v4 + 24), *(int *)(v4 + 20));
      if ((_DWORD)result)
        return sub_234147CB0(a1) != 0;
    }
  }
  return result;
}

char **sub_23418F064(unsigned int a1)
{
  char **v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  if (!a1)
    return off_2505071A0;
  if (a1 > 0x3C4)
  {
    sub_234195C1C(&stru_256158330);
    if (!qword_25615AAD8
      || (v7 = 0,
          v5 = 0u,
          v6 = 0u,
          LODWORD(v6) = a1,
          (v3 = sub_23418DEE4((_QWORD *)qword_25615AAD8, (uint64_t)&v5, (uint64_t (*)(_QWORD, uint64_t))sub_23418F5F0, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23418F5FC)) == 0))
    {
      sub_234195C54(&stru_256158330);
LABEL_10:
      sub_2341579B4(8, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/obj/obj.c", 373);
      return 0;
    }
    v2 = (char **)v3;
    sub_234195C54(&stru_256158330);
  }
  else
  {
    v2 = &off_2505071C8[5 * a1 - 5];
    if (!*((_DWORD *)v2 + 4))
      goto LABEL_10;
  }
  return v2;
}

char **sub_23418F148()
{
  return off_2505071A0;
}

char **sub_23418F154(unsigned int a1)
{
  char **result;

  result = sub_23418F064(a1);
  if (result)
    return (char **)*result;
  return result;
}

char **sub_23418F170(unsigned int a1)
{
  char **result;

  result = sub_23418F064(a1);
  if (result)
    return (char **)result[1];
  return result;
}

const char **sub_23418F18C(uint64_t (*a1)(void), const char *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  int v9;
  const char **v10;
  _OWORD v12[3];
  unint64_t v13;
  _QWORD *v14;

  v14 = 0;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  if (sub_234147B54((uint64_t)v12, 0x20uLL)
    && (v8 = strlen(a2), sub_234148870((uint64_t *)v12, (uint64_t)a2, v8))
    && sub_234147C00((uint64_t)v12, &v14, &v13))
  {
    if (a1)
      v9 = a1();
    else
      v9 = 0;
    v10 = sub_23413F670(v9, (uint64_t)v14, v13, a3, a4);
    sub_23418E3C4(v14);
  }
  else
  {
    sub_2341579B4(8, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/obj/obj.c", 405);
    sub_234147BE4((uint64_t)v12);
    return 0;
  }
  return v10;
}

size_t sub_23418F278(_BYTE *a1, int a2, uint64_t a3, int a4)
{
  unsigned __int8 *v7;
  char *v8;
  char *v9;
  size_t v10;
  char *v11;
  unsigned int v13;
  unsigned int v14;
  char **v15;
  char **v16;
  unsigned __int8 *v17[2];

  if (!a3 || !*(_DWORD *)(a3 + 20))
  {
    v11 = "";
    return sub_23418F368(a1, v11, a2);
  }
  if (!a4)
  {
    v13 = sub_23418EBF8((unsigned __int16 *)a3);
    if (v13)
    {
      v14 = v13;
      v15 = sub_23418F064(v13);
      if (v15)
      {
        v11 = v15[1];
        if (v11)
          return sub_23418F368(a1, v11, a2);
      }
      v16 = sub_23418F064(v14);
      if (v16)
      {
        v11 = *v16;
        if (*v16)
          return sub_23418F368(a1, v11, a2);
      }
    }
  }
  v7 = (unsigned __int8 *)*(int *)(a3 + 20);
  v17[0] = *(unsigned __int8 **)(a3 + 24);
  v17[1] = v7;
  v8 = (char *)sub_234149BBC(v17);
  if (v8)
  {
    v9 = v8;
    v10 = sub_23418F368(a1, v8, a2);
    sub_23418E3C4(v9);
  }
  else
  {
    if (a2 >= 1)
      *a1 = 0;
    return 0xFFFFFFFFLL;
  }
  return v10;
}

size_t sub_23418F368(_BYTE *a1, char *a2, int a3)
{
  size_t result;

  result = sub_23418E9CC(a1, a2, a3 & ~(a3 >> 31));
  if (result >> 31)
  {
    sub_2341579B4(8, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/obj/obj.c", 434);
    return 0xFFFFFFFFLL;
  }
  return result;
}

const char **sub_23418F3A8(const char *a1, uint64_t a2, uint64_t a3)
{
  const char **result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;

  result = sub_23418F18C(sub_23418F5AC, a1, a2, a3);
  if (result)
  {
    v4 = (uint64_t)result;
    *((_DWORD *)result + 8) &= 0xFFFFFFF2;
    sub_234195C38(&stru_256158330);
    if (!qword_25615AAD8)
      qword_25615AAD8 = (uint64_t)sub_23418DE08((uint64_t)sub_23418F60C, (uint64_t)sub_23418F614);
    if (!qword_25615AAC0)
      qword_25615AAC0 = (uint64_t)sub_23418DE08((uint64_t)sub_23418F624, (uint64_t)sub_23418EB9C);
    v5 = (_QWORD *)qword_25615AAC8;
    if (!qword_25615AAC8)
    {
      v5 = sub_23418DE08((uint64_t)sub_23418F634, (uint64_t)sub_23418F63C);
      qword_25615AAC8 = (uint64_t)v5;
    }
    v6 = (_QWORD *)qword_25615AAD0;
    if (!qword_25615AAD0)
    {
      v6 = sub_23418DE08((uint64_t)sub_23418F648, (uint64_t)sub_23418F650);
      qword_25615AAD0 = (uint64_t)v6;
      v5 = (_QWORD *)qword_25615AAC8;
    }
    if (qword_25615AAD8 && qword_25615AAC0 && v5 && v6)
    {
      v8 = 0;
      v7 = sub_23418E048((_QWORD *)qword_25615AAD8, &v8, v4, (uint64_t (*)(_QWORD, uint64_t))sub_23418F5F0, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23418F5FC);
      if (*(_DWORD *)(v4 + 20) && *(_QWORD *)(v4 + 24))
      {
        v8 = 0;
        v7 &= sub_23418E048((_QWORD *)qword_25615AAC0, &v8, v4, (uint64_t (*)(_QWORD, uint64_t))sub_23418F5F0, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23418F5FC);
      }
      if (*(_QWORD *)v4)
      {
        v8 = 0;
        v7 &= sub_23418E048((_QWORD *)qword_25615AAC8, &v8, v4, (uint64_t (*)(_QWORD, uint64_t))sub_23418F5F0, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23418F5FC);
      }
      if (*(_QWORD *)(v4 + 8))
      {
        v8 = 0;
        v7 &= sub_23418E048((_QWORD *)qword_25615AAD0, &v8, v4, (uint64_t (*)(_QWORD, uint64_t))sub_23418F5F0, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23418F5FC);
      }
      sub_234195C54(&stru_256158330);
      if (v7)
        return (const char **)*(unsigned int *)(v4 + 16);
    }
    else
    {
      sub_234195C54(&stru_256158330);
    }
    return 0;
  }
  return result;
}

uint64_t sub_23418F5AC()
{
  uint64_t v0;

  sub_234195C38(&stru_2561583F8);
  v0 = dword_2561584C0++;
  sub_234195C54(&stru_2561583F8);
  return v0;
}

uint64_t sub_23418F5F0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23418F5FC(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t sub_23418F60C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_23418F614(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a2 + 16));
}

uint64_t sub_23418F624(uint64_t a1)
{
  return sub_23418E4B4(*(unsigned __int8 **)(a1 + 24), *(int *)(a1 + 20));
}

uint64_t sub_23418F634(const char **a1)
{
  return sub_23418E4E4(*a1);
}

uint64_t sub_23418F63C(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_23418F648(uint64_t a1)
{
  return sub_23418E4E4(*(const char **)(a1 + 8));
}

uint64_t sub_23418F650(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8));
}

BOOL sub_23418F65C(int a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v3;
  _BOOL8 result;
  unint64_t v5;
  int *v6;
  int v7;

  if (a1 == 396)
  {
    v3 = 0;
    result = 1;
LABEL_7:
    if (a2)
      *a2 = *((_DWORD *)&unk_2342E8884 + 3 * v3 + 1);
    if (a3)
      *a3 = *((_DWORD *)&unk_2342E8884 + 3 * v3 + 2);
  }
  else
  {
    v5 = -1;
    v6 = &dword_2342E8890;
    while (v5 != 16)
    {
      v7 = *v6;
      v6 += 3;
      ++v5;
      if (v7 == a1)
      {
        result = v5 < 0x11;
        v3 = v5 + 1;
        goto LABEL_7;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_23418F6DC(_DWORD *a1, int a2, int a3)
{
  unint64_t v3;
  BOOL v4;
  int *i;

  v3 = 0;
  v4 = 1;
  for (i = &dword_2342E888C; *(i - 1) != a2 || *i != a3; i += 3)
  {
    v4 = v3 < 0x11;
    if (++v3 == 18)
      return 0;
  }
  if (a1)
    *a1 = *(i - 2);
  return v4;
}

uint64_t sub_23418F73C(uint64_t *a1, uint64_t a2, unsigned int *a3, unsigned int a4, uint64_t a5, unint64_t a6, const void *a7, size_t a8)
{
  int v16;
  int v17;
  unsigned int v18;
  uint64_t result;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  _OWORD v24[3];
  _OWORD v25[3];
  _OWORD v26[3];
  _OWORD v27[3];
  _OWORD v28[3];
  _OWORD v29[3];
  _OWORD v30[3];
  _OWORD v31[3];
  _OWORD v32[3];
  char v33[16];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v16 = sub_2341414B0(a3);
  if (v16)
  {
    v17 = v16;
    v18 = sub_23410ED68((uint64_t)a3);
    result = sub_23416BE78(v33, v18);
    if ((_DWORD)result)
    {
      memset(v32, 0, sizeof(v32));
      memset(v31, 0, sizeof(v31));
      memset(v30, 0, sizeof(v30));
      memset(v29, 0, sizeof(v29));
      memset(v28, 0, sizeof(v28));
      memset(v27, 0, sizeof(v27));
      memset(v26, 0, sizeof(v26));
      memset(v25, 0, sizeof(v25));
      memset(v24, 0, sizeof(v24));
      result = sub_234147F60(a1, (uint64_t)v32, 0x20000010u);
      if ((_DWORD)result)
      {
        result = sub_234147F60((uint64_t *)v32, (uint64_t)v31, 6u);
        if ((_DWORD)result)
        {
          result = sub_23414817C((uint64_t)v31, &unk_2342E895C, 9uLL);
          if ((_DWORD)result)
          {
            result = sub_234147F60((uint64_t *)v32, (uint64_t)v30, 0x20000010u);
            if ((_DWORD)result)
            {
              result = sub_234147F60((uint64_t *)v30, (uint64_t)v29, 0x20000010u);
              if ((_DWORD)result)
              {
                result = sub_234147F60((uint64_t *)v29, (uint64_t)v28, 6u);
                if ((_DWORD)result)
                {
                  result = sub_23414817C((uint64_t)v28, asc_2342E8965, 9uLL);
                  if ((_DWORD)result)
                  {
                    result = sub_234147F60((uint64_t *)v29, (uint64_t)v27, 0x20000010u);
                    if ((_DWORD)result)
                    {
                      result = sub_234147F60((uint64_t *)v27, (uint64_t)v26, 4u);
                      if ((_DWORD)result)
                      {
                        result = sub_23414817C((uint64_t)v26, a7, a8);
                        if ((_DWORD)result)
                        {
                          result = sub_2341484FC((uint64_t)v27, a4);
                          if ((_DWORD)result)
                          {
                            if (v17 != 37
                              || (v20 = sub_23416E348((uint64_t)a3),
                                  result = sub_2341484FC((uint64_t)v27, v20),
                                  (_DWORD)result))
                            {
                              result = sub_234147F60((uint64_t *)v30, (uint64_t)v25, 0x20000010u);
                              if ((_DWORD)result)
                              {
                                result = sub_23418FA0C((uint64_t *)v25, v17);
                                if ((_DWORD)result)
                                {
                                  result = sub_234147F60((uint64_t *)v25, (uint64_t)v24, 4u);
                                  if ((_DWORD)result)
                                  {
                                    v21 = sub_23410ED68((uint64_t)a3);
                                    result = sub_23414817C((uint64_t)v24, v33, v21);
                                    if ((_DWORD)result)
                                    {
                                      result = sub_234147CB0(a1);
                                      if ((_DWORD)result)
                                      {
                                        v22 = sub_234170AC4();
                                        v23 = sub_23410ED68((uint64_t)a3);
                                        return sub_23418FAC8(a2, (uint64_t)a3, (uint64_t)v22, a4, a5, a6, (uint64_t)a7, a8, v33, v23, 1);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    sub_2341579B4(19, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/p5_pbev2.c", 170);
    return 0;
  }
  return result;
}

uint64_t sub_23418FA0C(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  _OWORD v5[3];

  v3 = 0;
  while (*(_DWORD *)&byte_250510890[v3 + 12] != a2)
  {
    v3 += 24;
    if (v3 == 120)
    {
      sub_2341579B4(19, 0, 127, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/p5_pbev2.c", 142);
      return 0;
    }
  }
  memset(v5, 0, sizeof(v5));
  result = sub_234147F60(a1, (uint64_t)v5, 6u);
  if ((_DWORD)result)
  {
    result = sub_23414817C((uint64_t)v5, &byte_250510890[v3], byte_250510890[v3 + 9]);
    if ((_DWORD)result)
      return sub_234147CB0(a1) != 0;
  }
  return result;
}

BOOL sub_23418FAC8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, int a11)
{
  unsigned int v19;
  _BOOL8 v20;
  char v22[64];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (sub_23410ED68(a2) == a10)
  {
    v19 = sub_23416E348(a2);
    v20 = sub_23415E28C(a5, a6, a7, a8, a4, a3, v19, v22)
       && sub_23416D918(a1, a2, 0, (uint64_t)v22, a9, a11) != 0;
    sub_23418E400(v22, 0x40uLL);
  }
  else
  {
    sub_2341579B4(19, 0, 107, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/p5_pbev2.c", 152);
    return 0;
  }
  return v20;
}

BOOL sub_23418FBFC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int v9;
  __int16 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;

  v30 = 0uLL;
  v29 = 0uLL;
  v28[0] = 0;
  v28[1] = 0;
  v27 = 0uLL;
  v26[0] = 0;
  v26[1] = 0;
  if (sub_2341493F4((__int128 *)a5, &v30, 536870928)
    && !*(_QWORD *)(a5 + 8)
    && sub_2341493F4(&v30, &v29, 536870928)
    && sub_2341493F4(&v30, &v27, 536870928)
    && !*((_QWORD *)&v30 + 1)
    && sub_2341493F4(&v29, v28, 6)
    && sub_2341493F4(&v27, v26, 6))
  {
    if (sub_234148CF4((uint64_t)v28, asc_2342E8965, 9))
    {
      v12 = sub_23418FFC8((uint64_t)v26);
      if (v12)
      {
        v13 = v12;
        v25 = 0uLL;
        v23 = 0;
        v24 = 0;
        v22 = 0;
        if (sub_2341493F4(&v29, &v25, 536870928)
          && !*((_QWORD *)&v29 + 1)
          && sub_2341493F4(&v25, &v23, 4)
          && sub_2341495A8(&v25, (unint64_t *)&v22))
        {
          if (sub_234190E24(v22))
          {
            if (sub_2341494C0(&v25, 2))
            {
              *(_QWORD *)&v21 = 0;
              if (!sub_2341495A8(&v25, (unint64_t *)&v21))
              {
                v9 = 104;
                v10 = 261;
                goto LABEL_4;
              }
              v14 = v21;
              if (v14 != sub_23416E348(v13))
              {
                v9 = 125;
                v10 = 266;
                goto LABEL_4;
              }
            }
            v15 = sub_234170AC4();
            if (*((_QWORD *)&v25 + 1))
            {
              v21 = 0uLL;
              v20[0] = 0;
              v20[1] = 0;
              if (!sub_2341493F4(&v25, &v21, 536870928)
                || !sub_2341493F4(&v21, v20, 6)
                || *((_QWORD *)&v25 + 1))
              {
                v9 = 104;
                v10 = 277;
                goto LABEL_4;
              }
              if (sub_234148CF4((uint64_t)v20, asc_2342E896E, 8))
              {
                v16 = sub_234170AC4();
              }
              else
              {
                if (!sub_234148CF4((uint64_t)v20, asc_2342E8976, 8))
                {
                  v9 = 130;
                  v10 = 288;
                  goto LABEL_4;
                }
                v16 = sub_234170BAC();
              }
              v17 = (uint64_t)v16;
              v18 = 0;
              v19 = 0;
              if (!sub_2341493F4(&v21, &v18, 5) || v19 || *((_QWORD *)&v21 + 1))
              {
                v9 = 104;
                v10 = 297;
                goto LABEL_4;
              }
            }
            else
            {
              v17 = (uint64_t)v15;
            }
            v21 = 0uLL;
            if (sub_2341493F4(&v27, &v21, 4) && !*((_QWORD *)&v27 + 1))
              return sub_23418FAC8(a2, v13, v17, v22, a3, a4, v23, v24, (const void *)v21, *((uint64_t *)&v21 + 1), 0);
            v9 = 130;
            v10 = 309;
          }
          else
          {
            v9 = 129;
            v10 = 252;
          }
        }
        else
        {
          v9 = 104;
          v10 = 247;
        }
      }
      else
      {
        v9 = 127;
        v10 = 236;
      }
    }
    else
    {
      v9 = 128;
      v10 = 229;
    }
  }
  else
  {
    v9 = 104;
    v10 = 223;
  }
LABEL_4:
  sub_2341579B4(19, 0, v9, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/p5_pbev2.c", v10);
  return 0;
}

uint64_t sub_23418FFC8(uint64_t a1)
{
  uint64_t v2;

  v2 = 0;
  while (!sub_234148CF4(a1, &byte_250510890[v2], byte_250510890[v2 + 9]))
  {
    v2 += 24;
    if (v2 == 120)
      return 0;
  }
  return (*(uint64_t (**)(void))&byte_250510890[v2 + 16])();
}

uint64_t sub_234190034(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned int a6, unint64_t a7, char *a8, uint64_t a9)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  _OWORD v45[2];
  unsigned int v46;
  _OWORD v47[8];
  uint64_t __src;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    memset(v45, 0, sizeof(v45));
    sub_23417064C(v45);
    v43 = 0;
    v44 = 0;
    if (a1)
    {
      memset(v47, 0, 48);
      if (!sub_234147B54((uint64_t)v47, 2 * a2))
        goto LABEL_20;
      __src = a1;
      v49 = a2;
      if (a2)
      {
        while (1)
        {
          v46 = 0;
          if (!sub_23414A1AC(&__src, &v46) || !sub_23414A570((uint64_t)v47, v46))
            break;
          if (!v49)
            goto LABEL_8;
        }
        sub_2341579B4(19, 0, 131, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", 90);
        goto LABEL_19;
      }
LABEL_8:
      if (!sub_23414A570((uint64_t)v47, 0) || !sub_234147C00((uint64_t)v47, &v44, &v43))
      {
LABEL_19:
        sub_234147BE4((uint64_t)v47);
        goto LABEL_20;
      }
    }
    v16 = sub_234170644(a9);
    if (v16)
      __memset_chk();
    v17 = a4 + v16 - 1;
    if (v17 < a4 || (v18 = v16 - 1 + v43, __CFADD__(v16 - 1, v43)))
    {
      v19 = 151;
    }
    else
    {
      v41 = a8;
      v23 = v17 / v16 * v16;
      v24 = v18 / v16 * v16;
      if (!__CFADD__(v24, v23))
      {
        v42 = v24 + v23;
        v25 = sub_23418E2E4(v24 + v23);
        if (v42)
          v26 = v25 == 0;
        else
          v26 = 0;
        if (!v26)
        {
          v21 = v25;
          if (v17 != v17 % v16)
          {
            v27 = 0;
            if (v23 <= 1)
              v28 = 1;
            else
              v28 = v17 / v16 * v16;
            do
            {
              *((_BYTE *)v25 + v27) = *(_BYTE *)(a3 + v27 % a4);
              ++v27;
            }
            while (v28 != v27);
          }
          if (v18 != v18 % v16)
          {
            v29 = 0;
            if (v24 <= 1)
              v30 = 1;
            else
              v30 = v18 / v16 * v16;
            do
            {
              *((_BYTE *)v25 + v29 + v23) = *((_BYTE *)v44 + v29 % v43);
              ++v29;
            }
            while (v30 != v29);
          }
          if (a7)
          {
            v46 = 0;
            v31 = v41;
            if (sub_2341708C0((uint64_t)v45, a9))
            {
              while (sub_23417092C((uint64_t)v45)
                   && sub_23417092C((uint64_t)v45)
                   && sub_23417094C((void **)v45, (uint64_t)&__src, &v46))
              {
                v32 = a6 - 1;
                if (a6 >= 2)
                {
                  while (sub_2341708C0((uint64_t)v45, a9)
                       && sub_23417092C((uint64_t)v45)
                       && sub_23417094C((void **)v45, (uint64_t)&__src, &v46))
                  {
                    if (!--v32)
                      goto LABEL_50;
                  }
                  break;
                }
LABEL_50:
                v33 = v46;
                if (a7 >= v46)
                  v34 = v46;
                else
                  v34 = a7;
                if (v34)
                  memcpy(v31, &__src, v34);
                a7 -= v34;
                if (!a7)
                  goto LABEL_65;
                v35 = 0;
                do
                {
                  *((_BYTE *)v47 + v35) = *((_BYTE *)&__src + v35 % v33);
                  ++v35;
                }
                while (v16 != v35);
                if (v42)
                {
                  v36 = 0;
                  v37 = v21;
                  do
                  {
                    v38 = 1;
                    v39 = v16 - 1;
                    do
                    {
                      v40 = v38 + *((unsigned __int8 *)v37 + v39) + *((unsigned __int8 *)v47 + v39);
                      *((_BYTE *)v37 + v39) = v40;
                      v38 = v40 >> 8;
                      --v39;
                    }
                    while (v39 < v16);
                    v36 += v16;
                    v37 = (_QWORD *)((char *)v37 + v16);
                  }
                  while (v36 < v42);
                }
                v31 += v34;
                v46 = 0;
                if (!sub_2341708C0((uint64_t)v45, a9))
                  break;
              }
            }
            v20 = 0;
          }
          else
          {
LABEL_65:
            v20 = 1;
          }
          goto LABEL_21;
        }
LABEL_20:
        v20 = 0;
        v21 = 0;
LABEL_21:
        sub_23418E3C4(v21);
        sub_23418E3C4(v44);
        sub_234170680((uint64_t)v45);
        return v20;
      }
      v19 = 158;
    }
    sub_2341579B4(19, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", v19);
    goto LABEL_20;
  }
  sub_2341579B4(19, 0, 129, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", 115);
  return 0;
}

uint64_t sub_234190474(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, const void *a7, size_t a8)
{
  uint64_t v15;
  uint64_t result;
  _OWORD v17[3];
  _OWORD v18[3];
  _OWORD v19[3];
  _OWORD v20[3];

  v15 = 0;
  while (v15 == 30 || dword_250510908[v15] != a3)
  {
    v15 += 10;
    if (v15 == 40)
    {
      sub_2341579B4(19, 0, 119, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", 337);
      return 0;
    }
  }
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  result = sub_234147F60(a1, (uint64_t)v20, 0x20000010u);
  if ((_DWORD)result)
  {
    result = sub_234147F60((uint64_t *)v20, (uint64_t)v19, 6u);
    if ((_DWORD)result)
    {
      result = sub_23414817C((uint64_t)v19, &dword_250510908[v15 + 1], BYTE2(dword_250510908[v15 + 3]));
      if ((_DWORD)result)
      {
        result = sub_234147F60((uint64_t *)v20, (uint64_t)v18, 0x20000010u);
        if ((_DWORD)result)
        {
          result = sub_234147F60((uint64_t *)v18, (uint64_t)v17, 4u);
          if ((_DWORD)result)
          {
            result = sub_23414817C((uint64_t)v17, a7, a8);
            if ((_DWORD)result)
            {
              result = sub_2341484FC((uint64_t)v18, a4);
              if ((_DWORD)result)
              {
                result = sub_234147CB0(a1);
                if ((_DWORD)result)
                  return sub_234190604((uint64_t)&dword_250510908[v15], a2, a4, a5, a6, (uint64_t)a7, a8, 1);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_234190604(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v22[16];
  char v23[64];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v16 = (*(uint64_t (**)(void))(a1 + 16))();
  v17 = (*(uint64_t (**)(void))(a1 + 24))();
  v18 = sub_23416E348(v16);
  if (sub_234190034(a4, a5, a6, a7, 1, a3, v18, v23, v17)
    && (v19 = sub_23410ED68(v16), sub_234190034(a4, a5, a6, a7, 2, a3, v19, v22, v17)))
  {
    v20 = sub_23416D918(a2, v16, 0, (uint64_t)v23, v22, a8);
    sub_23418E400(v23, 0x40uLL);
    sub_23418E400(v22, 0x10uLL);
  }
  else
  {
    sub_2341579B4(19, 0, 110, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", 245);
    return 0;
  }
  return v20;
}

uint64_t sub_234190770(_QWORD *a1, _QWORD *a2, __int128 *a3, uint64_t a4, uint64_t a5, char *a6, unint64_t a7)
{
  uint64_t v14;
  int v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[2];
  _OWORD v22[9];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  sub_23416D6FC((uint64_t)v22);
  v21[0] = 0;
  v21[1] = 0;
  if (!sub_2341493F4(a3, v21, 6))
  {
    v15 = 104;
    v16 = 368;
LABEL_12:
    sub_2341579B4(19, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", v16);
    v18 = 0;
    goto LABEL_13;
  }
  v14 = 0;
  while (!sub_234148CF4((uint64_t)v21, (char *)&dword_250510908[v14 + 1], BYTE2(dword_250510908[v14 + 3])))
  {
    v14 += 10;
    if (v14 == 40)
    {
      v15 = 119;
      v16 = 380;
      goto LABEL_12;
    }
  }
  if (!(*(unsigned int (**)(int *, _OWORD *, uint64_t, uint64_t, __int128 *))&dword_250510908[v14 + 8])(&dword_250510908[v14], v22, a4, a5, a3))
  {
    v15 = 109;
    v16 = 385;
    goto LABEL_12;
  }
  v17 = sub_23418E2E4(a7);
  if (!v17)
  {
LABEL_18:
    v18 = 0;
    goto LABEL_14;
  }
  if (a7 >> 31)
  {
    sub_2341579B4(19, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", 395);
    goto LABEL_18;
  }
  v20 = 0;
  if (!sub_23416DF58((int *)v22, v17, (int *)&v20 + 1, a6, a7)
    || !sub_23416E10C((uint64_t *)v22, (_BYTE *)v17 + SHIDWORD(v20), &v20))
  {
    goto LABEL_18;
  }
  *a1 = v17;
  *a2 = (int)v20 + (uint64_t)SHIDWORD(v20);
  v18 = 1;
LABEL_13:
  v17 = 0;
LABEL_14:
  sub_23418E3C4(v17);
  sub_23416D754((uint64_t)v22);
  return v18;
}

uint64_t sub_234190988(__int128 *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v14 = 0uLL;
  v13 = 0uLL;
  v11 = 0;
  v12 = 0;
  if (!sub_2341493F4(a1, &v14, 536870928)
    || !sub_2341493F4(&v14, &v13, 536870928)
    || !sub_2341493F4(&v14, &v11, 4)
    || *((_QWORD *)&v14 + 1))
  {
    sub_2341579B4(19, 0, 104, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", 424);
    return 0;
  }
  v9 = 0;
  v10 = 0;
  if (!sub_234190770(&v10, &v9, &v13, a2, a3, v11, v12))
    return 0;
  v5 = v10;
  *(_QWORD *)&v8 = v10;
  *((_QWORD *)&v8 + 1) = v9;
  v6 = sub_234158ADC(&v8);
  sub_23418E3C4(v5);
  return v6;
}

BOOL sub_234190A6C(uint64_t *a1, int a2, unsigned int *a3, uint64_t a4, unint64_t a5, char *a6, unint64_t a7, signed int a8, uint64_t a9)
{
  char *v17;
  _BOOL8 v18;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[3];
  _OWORD v26[3];
  _OWORD v27[3];
  unint64_t v28;
  void *v29;
  _OWORD v30[9];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v28 = 0;
  v29 = 0;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  sub_23416D6FC((uint64_t)v30);
  if (a6)
  {
    v17 = 0;
  }
  else
  {
    if (!a7)
      a7 = 8;
    v20 = (char *)sub_23418E2E4(a7);
    v17 = v20;
    if (!v20 || !sub_23416BE78(v20, a7))
      goto LABEL_13;
    a6 = v17;
  }
  memset(&v27[1], 0, 32);
  if (a8 < 1)
    a8 = 2048;
  v27[0] = 0uLL;
  if (sub_234147B54((uint64_t)v27, 0x80uLL)
    && sub_234158C18((uint64_t)v27, a9)
    && sub_234147C00((uint64_t)v27, &v29, &v28))
  {
    memset(v26, 0, sizeof(v26));
    if (sub_234147F60(a1, (uint64_t)v26, 0x20000010u))
    {
      if (a2 == -1)
      {
        if (!sub_23418F73C((uint64_t *)v26, (uint64_t)v30, a3, a8, a4, a5, a6, a7))
          goto LABEL_13;
      }
      else if (!sub_234190474((uint64_t *)v26, (uint64_t)v30, a2, a8, a4, a5, a6, a7))
      {
        goto LABEL_13;
      }
      v21 = v28;
      v22 = v21 + sub_23416E2AC((uint64_t)v30);
      if (v22 >= v28)
      {
        memset(v25, 0, sizeof(v25));
        v23 = 0;
        v24 = 0;
        if (sub_234147F60((uint64_t *)v26, (uint64_t)v25, 4u)
          && sub_234148280((uint64_t)v25, &v24, v22)
          && sub_23416E28C((int *)v30, v24, (int *)&v23 + 1, (char *)v29, v28)
          && sub_23416E29C((uint64_t *)v30, v24 + SHIDWORD(v23), &v23)
          && sub_234148398((uint64_t)v25, (int)v23 + (uint64_t)SHIDWORD(v23)))
        {
          v18 = sub_234147CB0(a1) != 0;
          goto LABEL_14;
        }
      }
      else
      {
        sub_2341579B4(19, 0, 118, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", 504);
      }
    }
  }
  else
  {
    sub_234147BE4((uint64_t)v27);
  }
LABEL_13:
  v18 = 0;
LABEL_14:
  sub_23418E3C4(v29);
  sub_23418E3C4(v17);
  sub_23416D754((uint64_t)v30);
  return v18;
}

uint64_t sub_234190D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  __int16 v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;

  v16 = 0uLL;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  if (sub_2341493F4((__int128 *)a5, &v16, 536870928)
    && sub_2341493F4(&v16, &v14, 4)
    && sub_2341495A8(&v16, (unint64_t *)&v13)
    && !*((_QWORD *)&v16 + 1)
    && !*(_QWORD *)(a5 + 8))
  {
    if (sub_234190E24(v13))
      return sub_234190604(a1, a2, v13, a3, a4, v14, v15, 0);
    v10 = 129;
    v11 = 270;
  }
  else
  {
    v10 = 104;
    v11 = 265;
  }
  sub_2341579B4(19, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8.c", v11);
  return 0;
}

BOOL sub_234190E24(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x5F5E100;
}

uint64_t sub_234190E3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250510A28);
}

uint64_t sub_234190E48(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250510A28);
}

uint64_t sub_234190E54()
{
  return sub_234144240((uint64_t)&unk_250510A28);
}

void sub_234190E60(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250510A28);
}

uint64_t sub_234190E6C(int *a1)
{
  unsigned int v1;
  uint64_t v2;
  __int128 v4;
  void *v5;

  v5 = 0;
  v1 = sub_234143140(a1, &v5, (uint64_t)&unk_250510A28);
  if ((v1 & 0x80000000) != 0)
    return 0;
  *(_QWORD *)&v4 = v5;
  *((_QWORD *)&v4 + 1) = v1;
  v2 = sub_234158ADC(&v4);
  if (!v2 || *((_QWORD *)&v4 + 1))
  {
    sub_2341579B4(19, 0, 104, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 115);
    sub_234158078(v2);
    v2 = 0;
  }
  sub_23418E3C4(v5);
  return v2;
}

uint64_t sub_234190F04(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  __int16 v5;
  char *v7;
  uint64_t v8;
  void *v9;
  _OWORD v10[3];

  memset(v10, 0, sizeof(v10));
  v8 = 0;
  v9 = 0;
  if (!sub_234147B54((uint64_t)v10, 0)
    || !sub_234158C18((uint64_t)v10, a1)
    || !sub_234147C00((uint64_t)v10, &v9, &v8)
    || v8 < 0)
  {
    sub_234147BE4((uint64_t)v10);
    v4 = 105;
    v5 = 134;
    goto LABEL_9;
  }
  v7 = (char *)v9;
  v2 = sub_234141DAC(0, (uint64_t *)&v7, v8, (uint64_t)&unk_250510A28);
  if (!v2 || (v3 = v9, v7 != (char *)v9 + v8))
  {
    sub_234143E94(v2, (uint64_t)&unk_250510A28);
    v4 = 104;
    v5 = 142;
LABEL_9:
    sub_2341579B4(19, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", v5);
    v2 = 0;
    v3 = v9;
  }
  sub_23418E3C4(v3);
  return v2;
}

uint64_t sub_23419100C(int *a1, char *__s, int a3)
{
  size_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  void *v12;

  if (__s && a3 == -1)
    v5 = strlen(__s);
  else
    v5 = a3;
  v12 = 0;
  v6 = sub_2341AB9D8(a1, &v12);
  if ((v6 & 0x80000000) != 0)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)&v11 = v12;
    *((_QWORD *)&v11 + 1) = v6;
    v7 = sub_234190988(&v11, (uint64_t)__s, v5);
    v8 = v7;
    if (v7 && !*((_QWORD *)&v11 + 1))
      v9 = sub_234190F04(v7);
    else
      v9 = 0;
  }
  sub_23418E3C4(v12);
  sub_234158078(v8);
  return v9;
}

uint64_t sub_2341910D0(int a1, unsigned int *a2, char *__s, int a4, char *a5, unint64_t a6, signed int a7, int *a8)
{
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  _OWORD v21[3];
  uint64_t v22;
  void *v23;

  if (__s && a4 == -1)
    v15 = strlen(__s);
  else
    v15 = a4;
  v16 = sub_234190E6C(a8);
  if (!v16)
    return 0;
  v17 = v16;
  v22 = 0;
  v23 = 0;
  memset(v21, 0, sizeof(v21));
  if (sub_234147B54((uint64_t)v21, 0x80uLL)
    && sub_234190A6C((uint64_t *)v21, a1, a2, (uint64_t)__s, v15, a5, a6, a7, v17)
    && sub_234147C00((uint64_t)v21, &v23, &v22))
  {
    v20 = (char *)v23;
    v18 = sub_2341AB9CC(0, (uint64_t *)&v20, v22);
    if (v18 && v20 == (char *)v23 + v22)
      goto LABEL_14;
    sub_2341579B4(19, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 221);
    sub_2341AB9F0(v18);
  }
  else
  {
    sub_234147BE4((uint64_t)v21);
  }
  v18 = 0;
LABEL_14:
  sub_23418E3C4(v23);
  sub_234158078(v17);
  return v18;
}

uint64_t sub_234191234(uint64_t *a1, uint64_t *a2, uint64_t a3, const char *a4)
{
  unint64_t v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  const char *v18;
  int v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27[2];
  __int128 v28;
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;

  v34 = 0;
  v33 = 0uLL;
  v32 = 0uLL;
  v31 = 0uLL;
  v30 = 0uLL;
  v29[0] = 0;
  v29[1] = 0;
  v28 = 0uLL;
  v27[0] = 0;
  v27[1] = 0;
  v26 = 0;
  v8 = sub_2341709C4((uint64_t)a2);
  if (sub_234147678(a3, &v33, &v34))
  {
    *a1 = 0;
    v24 = 0u;
    v25 = 0u;
    if (sub_2341493F4(&v33, &v32, 536870928)
      && !*((_QWORD *)&v33 + 1)
      && sub_2341495A8(&v32, &v26))
    {
      if (v26 > 2)
      {
        if (sub_2341493F4(&v32, &v30, 536870928))
        {
          if (*((_QWORD *)&v32 + 1))
          {
            if (sub_2341493F4(&v32, &v31, 536870928))
            {
              if (sub_2341493F4(&v30, v29, 6) && sub_2341493F4(&v30, &v28, -1610612736))
              {
                if (sub_234148CF4((uint64_t)v29, asc_2342E897E, 9))
                {
                  if (sub_2341493F4(&v28, v27, 4))
                  {
                    *(_QWORD *)&v24 = a1;
                    *((_QWORD *)&v24 + 1) = a2;
                    *(_QWORD *)&v25 = a4;
                    if (a4)
                      v13 = strlen(a4);
                    else
                      v13 = 0;
                    *((_QWORD *)&v25 + 1) = v13;
                    v23 = 0uLL;
                    v22[0] = 0;
                    v22[1] = 0;
                    v21[0] = 0;
                    v21[1] = 0;
                    if (!sub_2341493F4(&v31, &v23, 536870928))
                    {
                      v9 = 100;
                      v10 = 665;
                      goto LABEL_8;
                    }
                    v14 = sub_23415335C(&v23);
                    if (!v14)
                      goto LABEL_9;
                    v15 = v14;
                    if (!sub_2341493F4(&v23, v21, 4) || !sub_2341493F4(&v31, v22, 4))
                    {
                      v9 = 100;
                      v10 = 676;
                      goto LABEL_8;
                    }
                    if (*((_QWORD *)&v31 + 1))
                    {
                      v20 = 0;
                      if (!sub_2341495A8(&v31, &v20)
                        || (v16 = v20, v20 - 100000001 < 0xFFFFFFFFFA0A1F00))
                      {
                        v9 = 100;
                        v10 = 686;
                        goto LABEL_8;
                      }
                    }
                    else
                    {
                      v16 = 1;
                    }
                    LODWORD(v20) = 0;
                    if (!sub_234191698(&v20, (uint64_t)a4, v13, v22, v16, v15, v27, (uint64_t)v21))
                      goto LABEL_9;
                    v17 = v20;
                    if (!(_DWORD)v20 && !v13)
                    {
                      if (a4)
                        v18 = 0;
                      else
                        v18 = "";
                      *(_QWORD *)&v25 = v18;
                      if (!sub_234191698(&v20, (uint64_t)v18, 0, v22, v16, v15, v27, (uint64_t)v21))
                        goto LABEL_9;
                      v17 = v20;
                    }
                    if (v17)
                    {
                      v19 = sub_2341917B4((uint64_t)v27, (uint64_t)&v24, (unsigned int (*)(_QWORD *, uint64_t))sub_2341918C4);
                      sub_23418E3C4(v34);
                      if (v19)
                        return 1;
                      goto LABEL_10;
                    }
                    v9 = 108;
                    v10 = 710;
                    goto LABEL_8;
                  }
                  v9 = 100;
                  v10 = 652;
                }
                else
                {
                  v9 = 114;
                  v10 = 647;
                }
              }
              else
              {
                v9 = 100;
                v10 = 640;
              }
            }
            else
            {
              v9 = 100;
              v10 = 631;
            }
          }
          else
          {
            v9 = 112;
            v10 = 626;
          }
        }
        else
        {
          v9 = 100;
          v10 = 621;
        }
      }
      else
      {
        v9 = 101;
        v10 = 616;
      }
    }
    else
    {
      v9 = 100;
      v10 = 611;
    }
LABEL_8:
    sub_2341579B4(19, 0, v9, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", v10);
LABEL_9:
    sub_23418E3C4(v34);
LABEL_10:
    sub_234158078(*a1);
    *a1 = 0;
    while (sub_2341709C4((uint64_t)a2) > v8)
    {
      v11 = sub_2341958F0(a2);
      sub_2341ABB70(v11);
    }
    return 0;
  }
  sub_2341579B4(19, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 599);
  return 0;
}

uint64_t sub_234191698(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  char v22[64];
  char v23[64];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v15 = *a4;
  v16 = a4[1];
  v17 = sub_2341414B8(a6);
  if (sub_234190034(a2, a3, v15, v16, 3, a5, v17, v23, a6)
    && (v21 = 0, v18 = sub_2341414B8(a6), sub_234179384(a6, (uint64_t)v23, v18, *a7, a7[1], (uint64_t)v22, &v21)))
  {
    *a1 = sub_234148CF4(a8, v22, v21);
    v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  sub_23418E400(v23, 0x40uLL);
  return v19;
}

uint64_t sub_2341917B4(uint64_t a1, uint64_t a2, unsigned int (*a3)(_QWORD *, uint64_t))
{
  uint64_t v5;
  __int16 v6;
  _QWORD v8[2];
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v11 = 0;
  v10 = 0uLL;
  if (sub_234147678(a1, &v10, &v11))
  {
    v9 = 0uLL;
    if (!sub_2341493F4(&v10, &v9, 536870928) || *((_QWORD *)&v10 + 1))
    {
      v6 = 260;
    }
    else
    {
      while (1)
      {
        if (!*((_QWORD *)&v9 + 1))
        {
          v5 = 1;
          goto LABEL_13;
        }
        v8[0] = 0;
        v8[1] = 0;
        if (!sub_2341493F4(&v9, v8, 536870928))
          break;
        if (!a3(v8, a2))
          goto LABEL_11;
      }
      v6 = 267;
    }
    sub_2341579B4(19, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", v6);
LABEL_11:
    v5 = 0;
LABEL_13:
    sub_23418E3C4(v11);
  }
  else
  {
    sub_2341579B4(19, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 253);
    return 0;
  }
  return v5;
}

uint64_t sub_2341918C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  __int16 v7;
  _QWORD v8[2];
  uint64_t v9;
  void *v10;
  char *v11;
  unint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0;
  v20 = 0uLL;
  v19 = 0uLL;
  v18 = 0;
  if (!sub_2341493F4((__int128 *)a1, v21, 6)
    || !sub_2341493F4((__int128 *)a1, &v20, -1610612736)
    || *(_QWORD *)(a1 + 8))
  {
    sub_2341579B4(19, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 490);
    v4 = 0;
    v5 = 0;
    goto LABEL_5;
  }
  if (sub_234148CF4((uint64_t)v21, asc_2342E899D, 9))
  {
    v16 = 0;
    v17 = 0;
    v15 = 0uLL;
    v14[0] = 0;
    v14[1] = 0;
    v13 = 0uLL;
    v11 = 0;
    v12 = 0;
    v9 = 0;
    v10 = 0;
    if (sub_2341493F4(&v20, &v19, 536870928)
      && sub_2341493F4(&v19, &v16, 2)
      && sub_2341493F4(&v19, &v15, 536870928)
      && sub_2341493F4(&v15, v14, 6)
      && sub_2341493F4(&v15, &v13, 536870928)
      && sub_234147A2C((uint64_t)&v15, &v11, &v18, 0x80000000, 4))
    {
      if (sub_234148CF4((uint64_t)v14, asc_2342E897E, 9))
      {
        if (sub_234190770(&v10, &v9, &v13, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v11, v12))
        {
          v8[0] = v10;
          v8[1] = v9;
          v5 = sub_2341917B4((uint64_t)v8, a2, (unsigned int (*)(_QWORD *, uint64_t))sub_234192C60);
          sub_23418E3C4(v10);
LABEL_19:
          v4 = v18;
          goto LABEL_5;
        }
LABEL_18:
        v5 = 0;
        goto LABEL_19;
      }
      v7 = 522;
    }
    else
    {
      v7 = 517;
    }
    sub_2341579B4(19, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", v7);
    goto LABEL_18;
  }
  if (sub_234148CF4((uint64_t)v21, asc_2342E897E, 9))
  {
    v16 = 0;
    v17 = 0;
    if (sub_2341493F4(&v20, &v16, 4))
    {
      v5 = sub_2341917B4((uint64_t)&v16, a2, (unsigned int (*)(_QWORD *, uint64_t))sub_234192C60);
    }
    else
    {
      sub_2341579B4(19, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 541);
      v5 = 0;
    }
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 1;
  }
LABEL_5:
  sub_23418E3C4(v4);
  return v5;
}

_QWORD *sub_234191B34(_QWORD **a1, const void **a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = sub_23418E2E4(0x10uLL);
  if (v6)
  {
    v7 = sub_23418E58C(*a2, a3);
    *v6 = v7;
    if (v7)
    {
      v6[1] = a3;
      *a2 = (char *)*a2 + a3;
      if (a1)
      {
        sub_234191BB8(*a1);
        *a1 = v6;
      }
    }
    else
    {
      sub_23418E3C4(v6);
      return 0;
    }
  }
  return v6;
}

void sub_234191BB8(_QWORD *a1)
{
  if (a1)
  {
    sub_23418E3C4((_QWORD *)*a1);
    sub_23418E3C4(a1);
  }
}

_QWORD *sub_234191BE8(uint64_t a1, _QWORD **a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  const void *v14;

  v4 = sub_234147410();
  if (!v4)
    return 0;
  v5 = (uint64_t)v4;
  if (!sub_2341474C8(v4, 0x2000uLL)
    || (*(_QWORD *)v5 >= 0x7FFFFFFFuLL ? (LODWORD(v6) = 0x7FFFFFFF) : (v6 = *(_QWORD *)v5),
        v7 = sub_234144D20(a1, *(_QWORD *)(v5 + 8), v6),
        (v7 & 0x80000000) != 0))
  {
LABEL_19:
    v12 = 0;
  }
  else
  {
    v8 = 0;
    while (v7)
    {
      v8 += v7;
      v9 = *(_QWORD *)v5;
      if (v8 >= *(_QWORD *)v5)
      {
        if (v9 > 0x40000 || !sub_2341474C8((unint64_t *)v5, 2 * v9))
          goto LABEL_19;
        v9 = *(_QWORD *)v5;
      }
      v10 = v9 - v8;
      if (v10 >= 0x7FFFFFFF)
        v11 = 0x7FFFFFFF;
      else
        v11 = v10;
      v7 = sub_234144D20(a1, *(_QWORD *)(v5 + 8) + v8, v11);
      if ((v7 & 0x80000000) != 0)
      {
        if (!v8)
          goto LABEL_19;
        break;
      }
    }
    v14 = *(const void **)(v5 + 8);
    v12 = sub_234191B34(a2, &v14, v8);
  }
  sub_234141344(v5);
  return v12;
}

_QWORD *sub_234191CE8(uint64_t a1, _QWORD **a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_234191BE8((uint64_t)result, a2);
    sub_234144C64(v4);
    return v5;
  }
  return result;
}

uint64_t sub_234191D2C(uint64_t a1, void **a2)
{
  size_t v2;
  char *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!(v2 >> 31))
  {
    if (!a2)
      return v2;
    v5 = (char *)*a2;
    if (*a2)
    {
      if (v2)
      {
        memcpy(v5, *(const void **)a1, v2);
        v6 = *(_QWORD *)(a1 + 8);
        v5 = (char *)*a2;
      }
      else
      {
        v6 = 0;
      }
      *a2 = &v5[v6];
    }
    else
    {
      v7 = sub_23418E58C(*(const void **)a1, v2);
      *a2 = v7;
      if (!v7)
        return 0xFFFFFFFFLL;
    }
    return *(unsigned int *)(a1 + 8);
  }
  sub_2341579B4(19, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 834);
  return 0xFFFFFFFFLL;
}

uint64_t sub_234191DCC(uint64_t a1, uint64_t a2)
{
  return sub_234144F0C(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

_QWORD *sub_234191DD8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_234144F0C((uint64_t)result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_234191E1C(_QWORD *a1, const char *a2, uint64_t *a3, unint64_t **a4, unint64_t **a5)
{
  unint64_t *v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD v18[2];

  if (a5 && (v10 = *a5) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = (uint64_t)sub_2341953A0();
    if (!result)
      return result;
    v10 = (unint64_t *)result;
    v11 = 1;
  }
  v13 = a1[1];
  v18[0] = *a1;
  v18[1] = v13;
  if (sub_234191234(a3, (uint64_t *)v10, (uint64_t)v18, a2))
  {
    *a4 = 0;
    v14 = sub_2341709C4((uint64_t)v10);
    if (*a3 && (v15 = v14) != 0)
    {
      v16 = v14 - 1;
      while (1)
      {
        v17 = sub_2341953E8(v10, v16);
        if (sub_2341A3460((uint64_t)v17, *a3))
          break;
        sub_234157348();
        if (--v16 >= v15)
          goto LABEL_12;
      }
      *a4 = v17;
      sub_23419560C((uint64_t *)v10, v16);
      if (!a5)
        goto LABEL_18;
    }
    else
    {
LABEL_12:
      if (!a5)
      {
LABEL_18:
        sub_234195434(v10, (void (*)(uint64_t))sub_234193160, (uint64_t)sub_2341ABB70);
        return 1;
      }
    }
    *a5 = v10;
    return 1;
  }
  if (v11)
    sub_234141344((uint64_t)v10);
  return 0;
}

uint64_t sub_234191F48(_QWORD *a1, char *__s, int a3)
{
  void *v5;
  uint64_t result;
  unint64_t *v7;
  uint64_t v8;

  if (!__s)
  {
    if (a3)
      return 0;
LABEL_8:
    v7 = 0;
    v8 = 0;
    if (sub_234191E1C(a1, __s, &v8, &v7, 0))
    {
      sub_234158078(v8);
      sub_2341ABB70((uint64_t)v7);
      return 1;
    }
    sub_234157348();
    return 0;
  }
  if (a3 == -1)
    goto LABEL_8;
  if (__s[a3])
    return 0;
  if (!a3)
    goto LABEL_8;
  v5 = memchr(__s, 0, a3);
  result = 0;
  if (!v5)
    goto LABEL_8;
  return result;
}

_QWORD *sub_234191FEC(char *__s, const char *a2, uint64_t a3, uint64_t a4, unint64_t *a5, int a6, int a7, unsigned int a8, unsigned int a9, int a10)
{
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  size_t v19;
  _QWORD *v20;
  uint64_t *v21;
  char *v22;
  size_t v23;
  size_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD v32[3];
  _OWORD v33[3];
  _OWORD v34[3];
  _OWORD v35[3];
  unsigned int v36;
  _OWORD v37[3];
  _OWORD v38[3];
  _OWORD v39[3];
  _OWORD v40[3];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[3];
  _OWORD v51[3];
  _OWORD v52[3];
  _OWORD v53[3];
  _OWORD v54[3];
  _OWORD v55[3];
  _OWORD v56[3];
  unsigned int v57;
  _BYTE v58[64];
  char v59[8];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[64];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (a6)
    v10 = a6;
  else
    v10 = 146;
  if (a7)
    v11 = a7;
  else
    v11 = 149;
  if (a8)
    v12 = a8;
  else
    v12 = 2048;
  if (a9 <= 1)
    v13 = 1;
  else
    v13 = a9;
  if (a10 || (v13 & 0x80000000) != 0 || !(a3 | a4) && !sub_2341709C4((uint64_t)a5))
  {
    sub_2341579B4(19, 0, 132, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 1143);
  }
  else
  {
    if (__s)
      v19 = strlen(__s);
    else
      v19 = 0;
    v57 = 0;
    if (!a3
      || !a4
      || sub_2341A3460(a4, a3)
      && (v21 = sub_234170AC4(), sub_2341A9C50((int **)a4, (uint64_t)v21, (uint64_t)v63, &v57)))
    {
      memset(v56, 0, sizeof(v56));
      memset(v55, 0, sizeof(v55));
      memset(v54, 0, sizeof(v54));
      memset(v53, 0, sizeof(v53));
      memset(v52, 0, sizeof(v52));
      memset(v51, 0, sizeof(v51));
      memset(v50, 0, sizeof(v50));
      if (!sub_234147B54((uint64_t)v56, 0)
        || !sub_234147F60((uint64_t *)v56, (uint64_t)v55, 0x20000010u)
        || !sub_2341484FC((uint64_t)v55, 3uLL)
        || !sub_234147F60((uint64_t *)v55, (uint64_t)v54, 0x20000010u)
        || !sub_234147F60((uint64_t *)v54, (uint64_t)v53, 6u)
        || !sub_23414817C((uint64_t)v53, asc_2342E897E, 9uLL)
        || !sub_234147F60((uint64_t *)v54, (uint64_t)v52, 0xA0000000)
        || !sub_234147F60((uint64_t *)v52, (uint64_t)v51, 4u)
        || !sub_234147F60((uint64_t *)v51, (uint64_t)v50, 0x20000010u))
      {
        goto LABEL_87;
      }
      if (a4 || sub_2341709C4((uint64_t)a5))
      {
        if (v11 < 0)
        {
          v61 = 0uLL;
          v62 = 0uLL;
          v60 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v46 = 0uLL;
          v47 = 0uLL;
          v44 = 0uLL;
          v45 = 0uLL;
          v42 = 0uLL;
          v43 = 0uLL;
          v41 = 0uLL;
          if (!sub_234147F60((uint64_t *)v50, (uint64_t)&v60, 0x20000010u)
            || !sub_234147F60((uint64_t *)&v60, (uint64_t)&v47, 6u)
            || !sub_23414817C((uint64_t)&v47, asc_2342E897E, 9uLL)
            || !sub_234147F60((uint64_t *)&v60, (uint64_t)&v44, 0xA0000000)
            || !sub_234147F60((uint64_t *)&v44, (uint64_t)&v41, 4u)
            || !sub_2341926DC((uint64_t *)&v41, (int **)a4, a5, a2, v63, v57)
            || !sub_234147CB0((uint64_t *)v50))
          {
            goto LABEL_87;
          }
        }
        else
        {
          v61 = 0uLL;
          v62 = 0uLL;
          v60 = 0uLL;
          if (!sub_234147B54((uint64_t)&v60, 0)
            || !sub_2341926DC((uint64_t *)&v60, (int **)a4, a5, a2, v63, v57))
          {
            sub_234147BE4((uint64_t)&v60);
            goto LABEL_87;
          }
          v22 = (char *)sub_234147EA4((uint64_t)&v60);
          v23 = sub_234147ECC((uint64_t)&v60);
          LODWORD(v22) = sub_2341927B8((uint64_t *)v50, v11, (uint64_t)__s, v19, v12, v22, v23);
          sub_234147BE4((uint64_t)&v60);
          if (!(_DWORD)v22)
          {
LABEL_87:
            v20 = 0;
LABEL_88:
            sub_23418E400(&v60, 0x40uLL);
            sub_234147BE4((uint64_t)v56);
            return v20;
          }
        }
      }
      if (a3)
      {
        v61 = 0u;
        v62 = 0u;
        v60 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        memset(v40, 0, sizeof(v40));
        memset(v39, 0, sizeof(v39));
        memset(v38, 0, sizeof(v38));
        memset(v37, 0, sizeof(v37));
        if (!sub_234147F60((uint64_t *)v50, (uint64_t)&v60, 0x20000010u)
          || !sub_234147F60((uint64_t *)&v60, (uint64_t)&v47, 6u)
          || !sub_23414817C((uint64_t)&v47, asc_2342E897E, 9uLL)
          || !sub_234147F60((uint64_t *)&v60, (uint64_t)&v44, 0xA0000000)
          || !sub_234147F60((uint64_t *)&v44, (uint64_t)&v41, 4u)
          || !sub_234147F60((uint64_t *)&v41, (uint64_t)v40, 0x20000010u)
          || !sub_234147F60((uint64_t *)v40, (uint64_t)v39, 0x20000010u)
          || !sub_234147F60((uint64_t *)v39, (uint64_t)v38, 6u))
        {
          goto LABEL_87;
        }
        if (v10 < 0)
        {
          if (!sub_23414817C((uint64_t)v38, asc_2342E8987, 0xBuLL)
            || !sub_234147F60((uint64_t *)v39, (uint64_t)v37, 0xA0000000)
            || !sub_234158C18((uint64_t)v37, a3))
          {
            goto LABEL_87;
          }
        }
        else if (!sub_23414817C((uint64_t)v38, asc_2342E8992, 0xBuLL)
               || !sub_234147F60((uint64_t *)v39, (uint64_t)v37, 0xA0000000)
               || !sub_234190A6C((uint64_t *)v37, v10, 0, (uint64_t)__s, v19, 0, 0, v12, a3))
        {
          goto LABEL_87;
        }
        if (a2)
          v24 = strlen(a2);
        else
          v24 = 0;
        if (!sub_234192A58((uint64_t *)v39, (uint64_t)a2, v24, v63, v57)
          || !sub_234147CB0((uint64_t *)v50))
        {
          goto LABEL_87;
        }
      }
      v25 = sub_234170AC4();
      v36 = 0;
      if (sub_234147CB0((uint64_t *)v51))
      {
        if (sub_23416BE78(v59, 8uLL))
        {
          v26 = sub_2341414B8((uint64_t)v25);
          if (sub_234190034((uint64_t)__s, v19, (uint64_t)v59, 8uLL, 3, v13, v26, (char *)&v60, (uint64_t)v25))
          {
            v27 = sub_2341414B8((uint64_t)v25);
            v28 = sub_234147EA4((uint64_t)v51);
            v29 = sub_234147ECC((uint64_t)v51);
            if (sub_234179384((uint64_t)v25, (uint64_t)&v60, v27, (uint64_t)v28, v29, (uint64_t)v58, &v36))
            {
              memset(v35, 0, sizeof(v35));
              memset(v34, 0, sizeof(v34));
              memset(v33, 0, sizeof(v33));
              memset(v32, 0, sizeof(v32));
              if (sub_234147F60((uint64_t *)v55, (uint64_t)v35, 0x20000010u))
              {
                if (sub_234147F60((uint64_t *)v35, (uint64_t)v34, 0x20000010u)
                  && sub_23415344C((uint64_t *)v34, (unsigned int *)v25)
                  && sub_234147F60((uint64_t *)v34, (uint64_t)v33, 4u)
                  && sub_23414817C((uint64_t)v33, v58, v36)
                  && sub_234147F60((uint64_t *)v35, (uint64_t)v32, 4u)
                  && sub_23414817C((uint64_t)v32, v59, 8uLL)
                  && sub_2341484FC((uint64_t)v35, v13))
                {
                  v30 = sub_23418E2E4(0x10uLL);
                  v20 = v30;
                  if (v30 && sub_234147C00((uint64_t)v56, v30, v30 + 1))
                    goto LABEL_88;
                  sub_23418E3C4(v20);
                }
              }
            }
          }
        }
      }
      goto LABEL_87;
    }
  }
  return 0;
}

uint64_t sub_2341926DC(uint64_t *a1, int **a2, unint64_t *a3, const char *a4, const void *a5, size_t a6)
{
  uint64_t result;
  unint64_t v13;
  unint64_t *v14;
  _OWORD v15[3];

  memset(v15, 0, sizeof(v15));
  result = sub_234147F60(a1, (uint64_t)v15, 0x20000010u);
  if ((_DWORD)result)
  {
    if (!a2 || (result = sub_23419316C((uint64_t *)v15, a2, a4, a5, a6), (_DWORD)result))
    {
      if (sub_2341709C4((uint64_t)a3))
      {
        v13 = 0;
        while (1)
        {
          v14 = sub_2341953E8(a3, v13);
          result = sub_23419316C((uint64_t *)v15, (int **)v14, 0, 0, 0);
          if (!(_DWORD)result)
            break;
          if (++v13 >= sub_2341709C4((uint64_t)a3))
            return sub_234147CB0(a1);
        }
      }
      else
      {
        return sub_234147CB0(a1);
      }
    }
  }
  return result;
}

BOOL sub_2341927B8(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, char *a6, size_t a7)
{
  unsigned int v14;
  _BOOL8 v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  _OWORD v21[3];
  _OWORD v22[3];
  _OWORD v23[3];
  _OWORD v24[3];
  _OWORD v25[3];
  _OWORD v26[3];
  _OWORD v27[9];
  uint64_t v28;
  char v29[8];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (sub_23416BE78(v29, 8uLL))
  {
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    sub_23416D6FC((uint64_t)v27);
    memset(v26, 0, sizeof(v26));
    memset(v25, 0, sizeof(v25));
    memset(v24, 0, sizeof(v24));
    memset(v23, 0, sizeof(v23));
    memset(v22, 0, sizeof(v22));
    memset(v21, 0, sizeof(v21));
    memset(v20, 0, sizeof(v20));
    if (sub_234147F60(a1, (uint64_t)v26, 0x20000010u)
      && sub_234147F60((uint64_t *)v26, (uint64_t)v25, 6u)
      && sub_23414817C((uint64_t)v25, asc_2342E899D, 9uLL)
      && sub_234147F60((uint64_t *)v26, (uint64_t)v24, 0xA0000000)
      && sub_234147F60((uint64_t *)v24, (uint64_t)v23, 0x20000010u)
      && sub_2341484FC((uint64_t)v23, 0)
      && sub_234147F60((uint64_t *)v23, (uint64_t)v22, 0x20000010u)
      && sub_234147F60((uint64_t *)v22, (uint64_t)v21, 6u)
      && sub_23414817C((uint64_t)v21, asc_2342E897E, 9uLL)
      && sub_234190474((uint64_t *)v22, (uint64_t)v27, a2, a5, a3, a4, v29, 8uLL)
      && sub_234147F60((uint64_t *)v22, (uint64_t)v20, 0x80000000))
    {
      v14 = sub_23416E2AC((uint64_t)v27);
      if (__CFADD__(a7, v14))
      {
        sub_2341579B4(19, 0, 118, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 1097);
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v16 = sub_234148280((uint64_t)v20, &v19, a7 + v14);
        if (v16
          && sub_23416E28C((int *)v27, v19, (int *)&v18 + 1, a6, a7)
          && sub_23416E29C((uint64_t *)v27, v19 + SHIDWORD(v18), &v18)
          && sub_234148398((uint64_t)v20, (int)v18 + (uint64_t)SHIDWORD(v18)))
        {
          v15 = sub_234147CB0(a1) != 0;
LABEL_23:
          sub_23416D754((uint64_t)v27);
          return v15;
        }
      }
    }
    v15 = 0;
    goto LABEL_23;
  }
  return 0;
}

uint64_t sub_234192A58(uint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[3];
  _OWORD v15[3];
  _OWORD v16[3];
  uint64_t v17[6];
  uint64_t v18[6];

  if (!a2 && !a5)
    return 1;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  result = sub_234147F60(a1, (uint64_t)v18, 0x20000011u);
  if ((_DWORD)result)
  {
    if (a3)
    {
      result = sub_234147F60(v18, (uint64_t)v17, 0x20000010u);
      if ((_DWORD)result)
      {
        result = sub_234147F60(v17, (uint64_t)v16, 6u);
        if ((_DWORD)result)
        {
          result = sub_23414817C((uint64_t)v16, asc_2342E89BB, 9uLL);
          if ((_DWORD)result)
          {
            result = sub_234147F60(v17, (uint64_t)v15, 0x20000011u);
            if ((_DWORD)result)
            {
              result = sub_234147F60((uint64_t *)v15, (uint64_t)v14, 0x1Eu);
              if ((_DWORD)result)
              {
                v12 = a2;
                v13 = a3;
                while (1)
                {
                  v11 = 0;
                  if (!sub_23414A1AC(&v12, &v11) || !sub_23414A570((uint64_t)v14, v11))
                    break;
                  if (!v13)
                    goto LABEL_15;
                }
                sub_2341579B4(19, 0, 131, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 973);
                return 0;
              }
            }
          }
        }
      }
    }
    else
    {
LABEL_15:
      if (!a5
        || (result = sub_234147F60(v18, (uint64_t)v17, 0x20000010u), (_DWORD)result)
        && (result = sub_234147F60(v17, (uint64_t)v16, 6u), (_DWORD)result)
        && (result = sub_23414817C((uint64_t)v16, &unk_2342E89C4, 9uLL), (_DWORD)result)
        && (result = sub_234147F60(v17, (uint64_t)v15, 0x20000011u), (_DWORD)result)
        && (result = sub_234147F60((uint64_t *)v15, (uint64_t)v14, 4u), (_DWORD)result)
        && (result = sub_23414817C((uint64_t)v14, a4, a5), (_DWORD)result))
      {
        result = sub_2341489B8((uint64_t)v18);
        if ((_DWORD)result)
          return sub_234147CB0(a1) != 0;
      }
    }
  }
  return result;
}

uint64_t sub_234192C60(uint64_t a1, uint64_t a2)
{
  int v4;
  __int16 v5;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v24[2];

  v24[0] = 0;
  v24[1] = 0;
  v23 = 0uLL;
  v21 = 0;
  v22 = 0;
  if (!sub_2341493F4((__int128 *)a1, v24, 6)
    || !sub_2341493F4((__int128 *)a1, &v23, -1610612736))
  {
    v4 = 100;
    v5 = 373;
    goto LABEL_8;
  }
  if (*(_QWORD *)(a1 + 8))
  {
    if (!sub_2341493F4((__int128 *)a1, &v21, 536870929) || *(_QWORD *)(a1 + 8))
    {
      v4 = 100;
      v5 = 380;
LABEL_8:
      sub_2341579B4(19, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", v5);
      return 0;
    }
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  v7 = sub_234148CF4((uint64_t)v24, asc_2342E8987, 11);
  if (!(v7 | sub_234148CF4((uint64_t)v24, asc_2342E8992, 11)))
  {
    if (!sub_234148CF4((uint64_t)v24, asc_2342E89A6, 11))
      return 1;
    v20 = 0uLL;
    v19[0] = 0;
    v19[1] = 0;
    v18 = 0uLL;
    v16 = 0;
    v17 = 0;
    if (!sub_2341493F4(&v23, &v20, 536870928)
      || !sub_2341493F4(&v20, v19, 6)
      || !sub_2341493F4(&v20, &v18, -1610612736)
      || !sub_2341493F4(&v18, &v16, 4))
    {
      v4 = 100;
      v5 = 420;
      goto LABEL_8;
    }
    if (!sub_234148CF4((uint64_t)v19, asc_2342E89B1, 10))
      return 1;
    if (v17 < 0)
    {
      v4 = 100;
      v5 = 431;
      goto LABEL_8;
    }
    v15 = v16;
    v8 = sub_2341ABC18(0, &v15, v17);
    if (!v8)
    {
      v4 = 100;
      v5 = 438;
      goto LABEL_8;
    }
    v9 = v8;
    if (v15 == v16 + v17)
    {
      v13 = 0;
      v14 = 0;
      if (sub_234192F8C((uint64_t)&v21, (_QWORD **)&v14, &v13))
      {
        if (v13)
        {
          v12 = sub_2341AC59C(v9, (char *)v14, v13);
          sub_23418E3C4(v14);
          if (!v12)
            goto LABEL_24;
        }
        else
        {
          sub_23418E3C4(v14);
        }
        if (sub_2341958E8(*(unint64_t **)(a2 + 8), v9))
          return 1;
      }
    }
    else
    {
      sub_2341579B4(19, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 443);
    }
LABEL_24:
    sub_2341ABB70(v9);
    return 0;
  }
  if (**(_QWORD **)a2)
  {
    v4 = 113;
    v5 = 390;
    goto LABEL_8;
  }
  if (v7)
    v10 = sub_234158ADC(&v23);
  else
    v10 = sub_234190988(&v23, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v11 = v10;
  if (!v10)
    return 0;
  if (*((_QWORD *)&v23 + 1))
  {
    sub_2341579B4(19, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 403);
    sub_234158078(v11);
    return 0;
  }
  **(_QWORD **)a2 = v10;
  return 1;
}

uint64_t sub_234192F8C(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  uint64_t result;
  __int16 v7;
  unsigned int v8;
  _OWORD v9[3];
  unsigned __int16 *v10;
  unint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  *a2 = 0;
  *a3 = 0;
  if (!*(_QWORD *)(a1 + 8))
    return 1;
  while (1)
  {
    v14 = 0uLL;
    v13[0] = 0;
    v13[1] = 0;
    v12 = 0uLL;
    if (!sub_2341493F4((__int128 *)a1, &v14, 536870928)
      || !sub_2341493F4(&v14, v13, 6)
      || !sub_2341493F4(&v14, &v12, 536870929)
      || *((_QWORD *)&v14 + 1))
    {
      v7 = 323;
LABEL_23:
      sub_2341579B4(19, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", v7);
      goto LABEL_24;
    }
    if (sub_234148CF4((uint64_t)v13, asc_2342E89BB, 9))
      break;
LABEL_17:
    if (!*(_QWORD *)(a1 + 8))
      return 1;
  }
  v10 = 0;
  v11 = 0;
  if (*a2 || !sub_2341493F4(&v12, &v10, 30) || *((_QWORD *)&v12 + 1) || !v11)
  {
    v7 = 333;
    goto LABEL_23;
  }
  memset(v9, 0, sizeof(v9));
  if (sub_234147B54((uint64_t)v9, v11))
  {
    while (v11)
    {
      v8 = 0;
      if (!sub_23414A310(&v10, &v8) || !sub_23414A3F8((uint64_t)v9, v8))
      {
        sub_2341579B4(19, 0, 131, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 345);
        goto LABEL_20;
      }
    }
    if (sub_234147C00((uint64_t)v9, a2, a3))
      goto LABEL_17;
LABEL_20:
    sub_234147BE4((uint64_t)v9);
  }
LABEL_24:
  sub_23418E3C4(*a2);
  result = 0;
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t sub_234193160(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419316C(uint64_t *a1, int **a2, const char *a3, const void *a4, size_t a5)
{
  uint64_t result;
  unsigned int v11;
  int *v12;
  size_t v13;
  int v14;
  void *v15;
  _OWORD v16[3];
  _OWORD v17[3];
  _OWORD v18[3];
  uint64_t v19[6];
  uint64_t v20[6];
  _BYTE v21[48];
  uint64_t v22[6];

  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  result = sub_234147F60(a1, (uint64_t)v22, 0x20000010u);
  if ((_DWORD)result)
  {
    result = sub_234147F60(v22, (uint64_t)v21, 6u);
    if ((_DWORD)result)
    {
      result = sub_23414817C((uint64_t)v21, asc_2342E89A6, 0xBuLL);
      if ((_DWORD)result)
      {
        result = sub_234147F60(v22, (uint64_t)v20, 0xA0000000);
        if ((_DWORD)result)
        {
          result = sub_234147F60(v20, (uint64_t)v19, 0x20000010u);
          if ((_DWORD)result)
          {
            result = sub_234147F60(v19, (uint64_t)v18, 6u);
            if ((_DWORD)result)
            {
              result = sub_23414817C((uint64_t)v18, asc_2342E89B1, 0xAuLL);
              if ((_DWORD)result)
              {
                result = sub_234147F60(v19, (uint64_t)v17, 0xA0000000);
                if ((_DWORD)result)
                {
                  result = sub_234147F60((uint64_t *)v17, (uint64_t)v16, 4u);
                  if ((_DWORD)result)
                  {
                    v15 = 0;
                    v11 = sub_2341ABF28(a2, 0);
                    v14 = 0;
                    v12 = sub_2341AC6F4((uint64_t)a2, &v14);
                    v13 = v14;
                    if (a3)
                    {
                      if (v14)
                      {
                        sub_2341579B4(19, 0, 133, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/pkcs8/pkcs8_x509.c", 1019);
                        return 0;
                      }
                      v13 = strlen(a3);
                    }
                    else
                    {
                      a3 = (const char *)v12;
                    }
                    if ((v11 & 0x80000000) != 0)
                      return 0;
                    result = sub_2341481CC((uint64_t)v16, &v15, v11);
                    if (!(_DWORD)result)
                      return result;
                    if ((sub_2341ABF28(a2, &v15) & 0x80000000) != 0)
                      return 0;
                    result = sub_234192A58(v22, (uint64_t)a3, v13, a4, a5);
                    if ((_DWORD)result)
                      return sub_234147CB0(a1) != 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_23419336C()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_23418E344(0xE0uLL);
  if (v0)
  {
    v1 = sub_23418DE08((uint64_t)sub_2341933D8, (uint64_t)sub_2341933FC);
    *v0 = v1;
    if (v1)
    {
      sub_234195BFC((pthread_rwlock_t *)(v0 + 1));
      sub_23416BE78((char *)v0 + 208, 0x10uLL);
    }
    else
    {
      sub_23418E3C4(v0);
      return 0;
    }
  }
  return v0;
}

uint64_t sub_2341933D8(uint64_t a1)
{
  return sub_234195100((_QWORD *)(*(_QWORD *)a1 + 208), *(uint64_t **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_2341933FC(uint64_t a1, uint64_t a2)
{
  size_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 1;
  if (v2)
    return memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), v2);
  return 0;
}

void sub_23419342C(_QWORD *a1)
{
  pthread_rwlock_t *v2;

  if (a1)
  {
    v2 = (pthread_rwlock_t *)(a1 + 1);
    sub_23418DE74((_QWORD *)*a1);
    j__pthread_rwlock_destroy(v2);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_234193468(const void *a1, unint64_t a2, _QWORD **a3)
{
  return sub_234193474(a1, a2, 0, a3);
}

uint64_t sub_234193474(const void *a1, unint64_t a2, int a3, _QWORD **a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  pthread_rwlock_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD v18[4];

  if (a4)
  {
    v18[2] = a2;
    v18[3] = 0;
    v18[0] = a4;
    v18[1] = a1;
    sub_234195C1C((pthread_rwlock_t *)(a4 + 1));
    v8 = sub_23418DEE4(*a4, (uint64_t)v18, (uint64_t (*)(_QWORD, uint64_t))sub_2341937BC, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_2341937C8);
    v9 = v8;
    if (a3 && v8)
    {
      if (*(_DWORD *)(v8 + 28))
      {
LABEL_5:
        sub_234193914((unsigned int *)(v8 + 24));
        sub_234195C54((pthread_rwlock_t *)(a4 + 1));
        return v9;
      }
    }
    else if (v8)
    {
      goto LABEL_5;
    }
    sub_234195C54((pthread_rwlock_t *)(a4 + 1));
  }
  v10 = sub_23418E344(0x20uLL);
  v9 = (uint64_t)v10;
  if (v10)
  {
    if (a3)
    {
      v10[1] = a1;
      *((_DWORD *)v10 + 7) = 1;
    }
    else
    {
      v14 = sub_23418E58C(a1, a2);
      *(_QWORD *)(v9 + 8) = v14;
      if (a2 && !v14)
      {
        sub_23418E3C4((_QWORD *)v9);
        return 0;
      }
    }
    *(_QWORD *)(v9 + 16) = a2;
    *(_DWORD *)(v9 + 24) = 1;
    if (a4)
    {
      *(_QWORD *)v9 = a4;
      v11 = (pthread_rwlock_t *)(a4 + 1);
      sub_234195C38((pthread_rwlock_t *)(a4 + 1));
      v12 = sub_23418DEE4(*a4, v9, (uint64_t (*)(_QWORD, uint64_t))sub_2341937BC, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_2341937C8);
      v13 = v12;
      if (a3 && v12)
      {
        if (*(_DWORD *)(v12 + 28))
        {
LABEL_15:
          sub_234193914((unsigned int *)(v12 + 24));
          sub_234195C54((pthread_rwlock_t *)(a4 + 1));
LABEL_16:
          sub_234193764((_QWORD **)v9);
          return v13;
        }
      }
      else if (v12)
      {
        goto LABEL_15;
      }
      v15 = *a4;
      v18[0] = 0;
      v16 = sub_23418E048(v15, v18, v9, (uint64_t (*)(_QWORD, uint64_t))sub_2341937BC, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_2341937C8);
      sub_234195C54(v11);
      if (v16)
        return v9;
      v13 = 0;
      goto LABEL_16;
    }
  }
  return v9;
}

_QWORD *sub_234193618(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = sub_23418E344(0x20uLL);
  if (v4)
  {
    v5 = sub_23418E2E4(a2);
    v4[1] = v5;
    if (!a2 || v5)
    {
      v4[2] = a2;
      *((_DWORD *)v4 + 6) = 1;
      *a1 = v5;
    }
    else
    {
      sub_23418E3C4(v4);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_234193688(uint64_t a1, _QWORD **a2)
{
  return sub_234193474(*(const void **)a1, *(_QWORD *)(a1 + 8), 0, a2);
}

uint64_t sub_23419369C(const void *a1, unint64_t a2, _QWORD **a3)
{
  return sub_234193474(a1, a2, 1, a3);
}

void sub_2341936A8(unsigned int *a1)
{
  _QWORD **v2;

  if (a1)
  {
    v2 = *(_QWORD ***)a1;
    if (*(_QWORD *)a1)
    {
      sub_234195C38((pthread_rwlock_t *)(v2 + 1));
      if (sub_234193960(a1 + 6))
      {
        if ((unsigned int *)sub_23418DEE4(*v2, (uint64_t)a1, (uint64_t (*)(_QWORD, uint64_t))sub_2341937BC, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_2341937C8) == a1)sub_23418E134(*v2, (uint64_t)a1, (uint64_t (*)(_QWORD, uint64_t))sub_2341937BC, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_2341937C8);
        sub_234195C54((pthread_rwlock_t *)(*(_QWORD *)a1 + 8));
        goto LABEL_8;
      }
      sub_234195C54((pthread_rwlock_t *)(*(_QWORD *)a1 + 8));
    }
    else if (sub_234193960(a1 + 6))
    {
LABEL_8:
      sub_234193764((_QWORD **)a1);
    }
  }
}

void sub_234193764(_QWORD **a1)
{
  if (!*((_DWORD *)a1 + 7))
    sub_23418E3C4(a1[1]);
  sub_23418E3C4(a1);
}

uint64_t sub_234193794(uint64_t a1)
{
  sub_234193914((unsigned int *)(a1 + 24));
  return 1;
}

uint64_t sub_2341937B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  return result;
}

uint64_t sub_2341937BC(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341937C8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t sub_2341937D8(uint64_t result)
{
  if ((_DWORD)result != -1)
    abort();
  atomic_store(1u, (unsigned int *)&unk_25615AAE0);
  return result;
}

void sub_234193804()
{
  atomic_store(0, (unsigned int *)&unk_25615AAE0);
}

BOOL sub_234193814()
{
  unsigned int v0;

  v0 = atomic_load((unsigned int *)&unk_25615AAE0);
  return v0 != 0;
}

uint64_t sub_23419382C(void *a1, size_t a2)
{
  uint64_t result;

  result = CCRandomGenerateBytes(a1, a2);
  if ((_DWORD)result)
    abort();
  return result;
}

int *sub_234193848(int *result, uint64_t a2, char *a3, _BYTE *a4)
{
  int v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  char v9;

  v4 = *result;
  v5 = result[1];
  if (a2)
  {
    v6 = result + 2;
    do
    {
      v4 = (v4 + 1);
      v7 = v6[v4];
      v5 = (v7 + v5);
      v8 = v6[v5];
      v6[v4] = v8;
      v6[v5] = v7;
      v9 = *a3++;
      *a4++ = v9 ^ v6[(v8 + v7)];
      --a2;
    }
    while (a2);
  }
  *result = v4;
  result[1] = v5;
  return result;
}

_QWORD *sub_23419389C(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  int32x4_t v5;
  int32x4_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  int v10;
  unsigned __int8 v11;

  v3 = 0;
  v4 = result + 1;
  *result = 0;
  v5 = (int32x4_t)xmmword_2342E89D0;
  v6.i64[0] = 0x400000004;
  v6.i64[1] = 0x400000004;
  do
  {
    *(int32x4_t *)&v4[v3] = v5;
    v5 = vaddq_s32(v5, v6);
    v3 += 2;
  }
  while (v3 != 128);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *(_DWORD *)((char *)v4 + v7);
    v11 = *(_BYTE *)(a3 + v9) + v10 + v8;
    v8 = v11;
    if (v9 + 1 == a2)
      v9 = 0;
    else
      ++v9;
    *(_DWORD *)((char *)v4 + v7) = *((_DWORD *)v4 + v11);
    *((_DWORD *)v4 + v11) = v10;
    v7 += 4;
  }
  while (v7 != 1024);
  return result;
}

unsigned int *sub_234193914(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;

  v1 = atomic_load(result);
  if (v1 != -1)
  {
    do
    {
      v2 = __ldaxr(result);
      if (v2 == v1)
      {
        if (!__stlxr(v1 + 1, result))
          return result;
      }
      else
      {
        __clrex();
      }
      v1 = v2;
    }
    while (v2 != -1);
  }
  return result;
}

BOOL sub_234193960(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;

  v1 = atomic_load(a1);
  while (v1 != -1)
  {
    if (!v1)
      abort();
    v2 = v1 - 1;
    v3 = __ldaxr(a1);
    if (v3 != v1)
    {
      __clrex();
LABEL_8:
      v4 = 0;
      goto LABEL_9;
    }
    if (__stlxr(v2, a1))
      goto LABEL_8;
    v4 = 1;
LABEL_9:
    v1 = v3;
    if (v4)
      return v2 == 0;
  }
  return 0;
}

uint64_t *sub_2341939C4(__int128 *a1)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  __int16 v6;
  __int128 v8;

  v2 = (uint64_t *)sub_23417D2A8();
  if (v2)
  {
    v8 = 0uLL;
    if (!sub_2341493F4(a1, &v8, 536870928)
      || (v3 = sub_234161F88(), (v2[1] = (uint64_t)v3) == 0)
      || !sub_234146860(&v8, v3)
      || (v4 = sub_234161F88(), (v2[2] = (uint64_t)v4) == 0)
      || !sub_234146860(&v8, v4)
      || *((_QWORD *)&v8 + 1))
    {
      v5 = 100;
      v6 = 100;
      goto LABEL_11;
    }
    if (!sub_23417D310(v2))
    {
      v5 = 104;
      v6 = 106;
LABEL_11:
      sub_2341579B4(4, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_asn1.c", v6);
      sub_23417D814((uint64_t)v2);
      return 0;
    }
  }
  return v2;
}

uint64_t *sub_234193AA4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  __int128 v4;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = a2;
  v2 = sub_2341939C4(&v4);
  if (!v2 || *((_QWORD *)&v4 + 1))
  {
    sub_2341579B4(4, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_asn1.c", 119);
    sub_23417D814((uint64_t)v2);
    return 0;
  }
  return v2;
}

uint64_t sub_234193B0C(uint64_t *a1, uint64_t a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v5, 0x20000010u)
    && sub_234193BA8((uint64_t *)v5, *(uint64_t **)(a2 + 8))
    && sub_234193BA8((uint64_t *)v5, *(uint64_t **)(a2 + 16))
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(4, 0, 121, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_asn1.c", 132);
  return 0;
}

uint64_t sub_234193BA8(uint64_t *a1, uint64_t *a2)
{
  if (a2)
    return sub_234146908(a1, a2);
  sub_2341579B4(4, 0, 144, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_asn1.c", 84);
  return 0;
}

uint64_t sub_234193BDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD v7[3];

  memset(v7, 0, sizeof(v7));
  sub_234147B44(v7);
  if (sub_234147B54((uint64_t)v7, 0)
    && sub_234193B0C((uint64_t *)v7, a3)
    && sub_234147C00((uint64_t)v7, a1, a2))
  {
    return 1;
  }
  sub_2341579B4(4, 0, 121, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_asn1.c", 145);
  sub_234147BE4((uint64_t)v7);
  return 0;
}

uint64_t *sub_234193C88(__int128 *a1)
{
  uint64_t *v2;
  int v3;
  __int16 v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  __int128 v11;

  v2 = (uint64_t *)sub_23417D2A8();
  if (v2)
  {
    v11 = 0uLL;
    v10 = 0;
    if (sub_2341493F4(a1, &v11, 536870928) && sub_2341495A8(&v11, &v10))
    {
      if (v10)
      {
        v3 = 106;
        v4 = 171;
      }
      else
      {
        v6 = sub_234161F88();
        v2[1] = (uint64_t)v6;
        if (!v6)
          goto LABEL_8;
        if (!sub_234146860(&v11, v6))
          goto LABEL_8;
        v7 = sub_234161F88();
        v2[2] = (uint64_t)v7;
        if (!v7)
          goto LABEL_8;
        if (!sub_234146860(&v11, v7))
          goto LABEL_8;
        v8 = sub_234161F88();
        v2[3] = (uint64_t)v8;
        if (!v8)
          goto LABEL_8;
        if (!sub_234146860(&v11, v8))
          goto LABEL_8;
        v9 = sub_234161F88();
        v2[4] = (uint64_t)v9;
        if (!v9
          || !sub_234146860(&v11, v9)
          || !sub_234154E18(&v11, v2 + 5)
          || !sub_234154E18(&v11, v2 + 6)
          || !sub_234154E18(&v11, v2 + 7)
          || !sub_234154E18(&v11, v2 + 8))
        {
          goto LABEL_8;
        }
        if (*((_QWORD *)&v11 + 1))
        {
          v3 = 100;
          v4 = 187;
        }
        else
        {
          if (sub_23417D310(v2))
            return v2;
          v3 = 104;
          v4 = 192;
        }
      }
    }
    else
    {
      v3 = 100;
      v4 = 166;
    }
    sub_2341579B4(4, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_asn1.c", v4);
LABEL_8:
    sub_23417D814((uint64_t)v2);
    return 0;
  }
  return v2;
}

uint64_t *sub_234193E34(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  __int128 v4;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = a2;
  v2 = sub_234193C88(&v4);
  if (!v2 || *((_QWORD *)&v4 + 1))
  {
    sub_2341579B4(4, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_asn1.c", 208);
    sub_23417D814((uint64_t)v2);
    return 0;
  }
  return v2;
}

uint64_t sub_234193E9C(uint64_t *a1, uint64_t **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v5, 0x20000010u)
    && sub_2341484FC((uint64_t)v5, 0)
    && sub_234193BA8((uint64_t *)v5, a2[1])
    && sub_234193BA8((uint64_t *)v5, a2[2])
    && sub_234193BA8((uint64_t *)v5, a2[3])
    && sub_234193BA8((uint64_t *)v5, a2[4])
    && sub_234193BA8((uint64_t *)v5, a2[5])
    && sub_234193BA8((uint64_t *)v5, a2[6])
    && sub_234193BA8((uint64_t *)v5, a2[7])
    && sub_234193BA8((uint64_t *)v5, a2[8])
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(4, 0, 121, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_asn1.c", 228);
  return 0;
}

uint64_t sub_234193FA8(_QWORD *a1, _QWORD *a2, uint64_t **a3)
{
  _OWORD v7[3];

  memset(v7, 0, sizeof(v7));
  sub_234147B44(v7);
  if (sub_234147B54((uint64_t)v7, 0)
    && sub_234193E9C((uint64_t *)v7, a3)
    && sub_234147C00((uint64_t)v7, a1, a2))
  {
    return 1;
  }
  sub_2341579B4(4, 0, 121, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_asn1.c", 241);
  sub_234147BE4((uint64_t)v7);
  return 0;
}

uint64_t *sub_234194054(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  __int128 v7;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_2341939C4(&v7);
  if (v5)
  {
    if (a1)
    {
      sub_23417D814(*a1);
      *a1 = (uint64_t)v5;
    }
    *a2 = v7;
  }
  return v5;
}

uint64_t sub_2341940C4(uint64_t a1, void **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147B54((uint64_t)v5, 0) && sub_234193B0C((uint64_t *)v5, a1))
    return sub_2341475C8((uint64_t)v5, a2);
  sub_234147BE4((uint64_t)v5);
  return 0xFFFFFFFFLL;
}

uint64_t *sub_234194134(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  __int128 v7;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_234193C88(&v7);
  if (v5)
  {
    if (a1)
    {
      sub_23417D814(*a1);
      *a1 = (uint64_t)v5;
    }
    *a2 = v7;
  }
  return v5;
}

uint64_t sub_2341941A4(uint64_t **a1, void **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147B54((uint64_t)v5, 0) && sub_234193E9C((uint64_t *)v5, a1))
    return sub_2341475C8((uint64_t)v5, a2);
  sub_234147BE4((uint64_t)v5);
  return 0xFFFFFFFFLL;
}

uint64_t *sub_234194214(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;

  v3 = 0;
  v4 = 0;
  if (!sub_234193BDC(&v4, &v3, a1))
    return 0;
  v1 = sub_234193AA4((uint64_t)v4, v3);
  sub_23418E3C4(v4);
  return v1;
}

uint64_t *sub_23419426C(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;

  v3 = 0;
  v4 = 0;
  if (!sub_234193FA8(&v4, &v3, a1))
    return 0;
  v1 = sub_234193E34((uint64_t)v4, v3);
  sub_23418E3C4(v4);
  return v1;
}

uint64_t sub_2341942C4(_BYTE *a1, unint64_t a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v9;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v25;
  _BYTE *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  uint64_t v39;
  char v40[64];
  uint64_t v41;

  v9 = a7;
  v41 = *MEMORY[0x24BDAC8D0];
  if (!a7)
    v9 = sub_234170AC4();
  if (a8)
    v16 = a8;
  else
    v16 = v9;
  v17 = sub_2341414B8((uint64_t)v9);
  v18 = 2 * v17;
  if (2 * v17 + 2 <= a2)
  {
    v39 = (uint64_t)v16;
    v21 = a2 - 1;
    v22 = ~v18;
    if (a2 - 1 + ~v18 < a4)
    {
      v19 = 114;
      v20 = 106;
      goto LABEL_12;
    }
    if (v21 < (v18 | 1uLL))
    {
      v19 = 126;
      v20 = 111;
      goto LABEL_12;
    }
    v25 = v17;
    v26 = &a1[v17];
    *a1 = 0;
    v27 = a1 + 1;
    v38 = v26;
    v28 = a5;
    v29 = (uint64_t)(v26 + 1);
    if (!sub_2341704B4(v28, a6, (uint64_t)(v26 + 1), 0, (uint64_t)v9))
      goto LABEL_33;
    if (v21 - a4 + v22)
      bzero((void *)(v29 + v25), v21 - a4 + v22);
    *(_BYTE *)(v29 + v21 - a4 + ~v25) = 1;
    if (a4)
      memcpy(&v38[a2 - a4 - v25], a3, a4);
    if (sub_23416BE78(v27, v25))
    {
      v30 = (char *)sub_23418E2E4(v21 - v25);
      v31 = v30;
      if (v30 && sub_23417CA34(v30, v21 - v25, (uint64_t)v27, v25, v39))
      {
        if (v21 != v25)
        {
          if (v21 - v25 <= 1)
            v32 = 1;
          else
            v32 = v21 - v25;
          v33 = v31;
          v34 = (_BYTE *)v29;
          do
          {
            v35 = *v33++;
            *v34++ ^= v35;
            --v32;
          }
          while (v32);
        }
        if (sub_23417CA34(v40, v25, v29, v21 - v25, v39))
        {
          if (v25)
          {
            v36 = v40;
            do
            {
              v37 = *v36++;
              *v27++ ^= v37;
              --v25;
            }
            while (v25);
          }
          v23 = 1;
          goto LABEL_35;
        }
      }
    }
    else
    {
LABEL_33:
      v31 = 0;
    }
    v23 = 0;
LABEL_35:
    sub_23418E3C4(v31);
    return v23;
  }
  v19 = 126;
  v20 = 100;
LABEL_12:
  sub_2341579B4(4, 0, v19, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", v20);
  return 0;
}

uint64_t sub_234194544(void *a1, unint64_t *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  __int16 v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  char *v25;
  size_t v26;
  char v27;
  char *v28;
  unint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v40;
  unint64_t v41;
  unint64_t *v42;
  void *v43;
  unint64_t v44;
  char v46[64];
  char v47[64];
  uint64_t v48;

  v9 = a8;
  v48 = *MEMORY[0x24BDAC8D0];
  if (!a8)
    v9 = sub_234170AC4();
  if (a9)
    v16 = a9;
  else
    v16 = (uint64_t)v9;
  v17 = sub_2341414B8((uint64_t)v9);
  if (2 * v17 + 2 > a5)
  {
    v18 = 0;
LABEL_8:
    v19 = 133;
    v20 = 253;
LABEL_9:
    sub_2341579B4(4, 0, v19, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", v20);
LABEL_27:
    sub_23418E3C4(v18);
    return 0;
  }
  v21 = v17;
  v44 = a3;
  v22 = ~v17 + a5;
  v18 = (char *)sub_23418E2E4(v22);
  if (!v18)
    goto LABEL_27;
  v42 = a2;
  v43 = a1;
  v23 = (char *)(a4 + 1);
  v24 = &a4[v21 + 1];
  if (!sub_23417CA34(v47, v21, (uint64_t)v24, v22, v16))
    goto LABEL_27;
  if (v21)
  {
    v25 = v47;
    v26 = v21;
    do
    {
      v27 = *v23++;
      *v25++ ^= v27;
      --v26;
    }
    while (v26);
  }
  if (!sub_23417CA34(v18, v22, (uint64_t)v47, v21, v16))
    goto LABEL_27;
  if (v22)
  {
    v28 = v18;
    v29 = v22;
    do
    {
      v30 = *v24++;
      *v28++ ^= v30;
      --v29;
    }
    while (v29);
  }
  if (!sub_2341704B4(a6, a7, (uint64_t)v46, 0, (uint64_t)v9))
    goto LABEL_27;
  v31 = sub_23418E484(v18, v46, v21);
  v32 = ~((v31 - 1) & ~(uint64_t)v31 & (*a4 - 1)) >> 63;
  v33 = -1;
  if (v21 >= v22)
  {
    v34 = 0;
    v36 = v42;
  }
  else
  {
    v34 = 0;
    v35 = ~(2 * v21) + a5;
    v36 = v42;
    do
    {
      v37 = ((v18[v21] ^ 1) - 1) >> 63;
      v34 = v33 & v37 & v21 | v34 & ~(v33 & v37);
      v33 &= ~v37;
      if (v18[v21])
        v38 = v33;
      else
        v38 = 0;
      v32 |= v38;
      ++v21;
      --v35;
    }
    while (v35);
  }
  if (v33 | v32)
    goto LABEL_8;
  v40 = v34 + 1;
  v41 = v22 - (v34 + 1);
  if (v41 > v44)
  {
    v19 = 113;
    v20 = 241;
    goto LABEL_9;
  }
  if (v22 != v40)
    memcpy(v43, &v18[v40], v22 - (v34 + 1));
  *v36 = v41;
  sub_23418E3C4(v18);
  return 1;
}

uint64_t sub_2341947F8(size_t a1, void *a2, char *a3, uint64_t **a4, int a5)
{
  unsigned int v10;
  uint64_t result;
  unint64_t v12;

  v12 = 0;
  v10 = sub_23417CF10(a4);
  if (sub_234194898((uint64_t)a4, &v12, a3, v10, a2, a1, a5))
  {
    result = v12;
    if (!(v12 >> 31))
      return result;
    sub_2341579B4(4, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", 358);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_234194898(uint64_t a1, unint64_t *a2, char *a3, unint64_t a4, void *a5, size_t a6, int a7)
{
  unint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  __int16 v26;
  unint64_t **v27;
  unsigned __int8 *v28;

  if (!*(_QWORD *)(a1 + 8) || !*(_QWORD *)(a1 + 16))
  {
    v15 = 144;
    v16 = 382;
    goto LABEL_7;
  }
  if (sub_23417EBDC(a1))
  {
    v14 = sub_23417CF10((uint64_t **)a1);
    if (v14 > a4)
    {
      v15 = 135;
      v16 = 397;
LABEL_7:
      sub_2341579B4(4, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", v16);
      return 0;
    }
    sub_234162D58();
    if (!v19)
    {
      v17 = 0;
LABEL_29:
      sub_23418E3C4(v19);
      return v17;
    }
    v20 = (uint64_t)v19;
    sub_234162DC8(v19);
    v21 = sub_234162E68(v20);
    v27 = (unint64_t **)v20;
    v22 = sub_234162E68(v20);
    v23 = (unsigned __int8 *)sub_23418E2E4(v14);
    v17 = 0;
    v28 = v23;
    if (!v21 || !v22 || !v23)
    {
LABEL_28:
      sub_234162F58((uint64_t)v27);
      sub_234162D80(v27);
      v19 = v28;
      goto LABEL_29;
    }
    switch(a7)
    {
      case 4:
        v24 = sub_2341942C4(v23, v14, a5, a6, 0, 0, 0, 0);
        break;
      case 3:
        v24 = sub_23417C9C4(v23, v14, a5, a6);
        break;
      case 1:
        v24 = sub_234194BBC((uint64_t)v23, v14, a5, a6);
        break;
      default:
        v25 = 143;
        v26 = 427;
        goto LABEL_26;
    }
    if (v24 < 1 || !sub_2341625C8(v28, v14, v21))
      goto LABEL_27;
    if ((sub_234161580((uint64_t)v21, *(_QWORD *)(a1 + 8)) & 0x80000000) != 0)
    {
      if (!sub_234169A50((_QWORD *)(a1 + 288), (pthread_rwlock_t *)(a1 + 88), *(_QWORD *)(a1 + 8), (uint64_t)v27)|| !sub_2341652E0((uint64_t)v22, (uint64_t)v21, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 288) + 24, (uint64_t)v27, *(_QWORD *)(a1 + 288)))
      {
        goto LABEL_27;
      }
      if (sub_234162840(a3, v14, (uint64_t)v22))
      {
        *a2 = v14;
        v17 = 1;
        goto LABEL_28;
      }
      v25 = 68;
      v26 = 453;
    }
    else
    {
      v25 = 115;
      v26 = 441;
    }
LABEL_26:
    sub_2341579B4(4, 0, v25, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", v26);
LABEL_27:
    v17 = 0;
    goto LABEL_28;
  }
  return 0;
}

uint64_t sub_234194B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t result;
  unint64_t v7;

  v7 = 0;
  sub_23417CF10(a4);
  if (sub_23417E0D0(a4, &v7, a3))
  {
    result = v7;
    if (!(v7 >> 31))
      return result;
    sub_2341579B4(4, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", 373);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_234194BBC(uint64_t a1, unint64_t a2, const void *a3, size_t a4)
{
  int v4;
  __int16 v5;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (a2 <= 0xA)
  {
    v4 = 126;
    v5 = 263;
LABEL_5:
    sub_2341579B4(4, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", v5);
    return 0;
  }
  if (a2 - 11 < a4)
  {
    v4 = 114;
    v5 = 268;
    goto LABEL_5;
  }
  *(_WORD *)a1 = 512;
  v11 = a1 + 2;
  v12 = a2 - 3;
  sub_23416BE78((char *)(a1 + 2), a2 - 3 - a4);
  v13 = v12 - a4;
  if (v12 != a4)
  {
    v14 = 0;
    do
    {
      while (!*(_BYTE *)(v11 + v14))
        sub_23416BE78((char *)(v11 + v14), 1uLL);
      ++v14;
    }
    while (v14 != v13);
  }
  *(_BYTE *)(v13 + a1 + 2) = 0;
  if (a4)
    memcpy((void *)(a1 + a2 - a4), a3, a4);
  return 1;
}

uint64_t sub_234194CD8(uint64_t **a1, unint64_t *a2, char *a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t (*v14)(uint64_t **, unint64_t *, char *, unint64_t, unsigned __int8 *, unint64_t, uint64_t);
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  size_t v31;

  v7 = a7;
  v14 = (uint64_t (*)(uint64_t **, unint64_t *, char *, unint64_t, unsigned __int8 *, unint64_t, uint64_t))(*a1)[7];
  if (v14)
    return v14(a1, a2, a3, a4, a5, a6, a7);
  v16 = sub_23417CF10(a1);
  v17 = v16;
  if (v16 <= a4)
  {
    v19 = a3;
    if (v7 == 3 || (v19 = (char *)sub_23418E2E4(v16)) != 0)
    {
      if (v17 != a6)
      {
        v22 = 112;
        v23 = 493;
LABEL_16:
        sub_2341579B4(4, 0, v22, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", v23);
        goto LABEL_17;
      }
      if (!sub_23417F134((uint64_t)a1, v19, a5, a6))
      {
LABEL_17:
        v18 = 0;
        goto LABEL_18;
      }
      switch(v7)
      {
        case 4:
          if (!sub_234194544(a3, a2, a6, (unsigned __int8 *)v19, a6, 0, 0, 0, 0))
          {
LABEL_37:
            v22 = 136;
            v23 = 522;
            goto LABEL_16;
          }
          v18 = 1;
LABEL_25:
          sub_23418E3C4(v19);
          return v18;
        case 3:
          *a2 = a6;
          return 1;
        case 1:
          if ((_DWORD)v17)
          {
            if (v17 > 0xA)
            {
              v24 = 0;
              v25 = -1;
              v26 = 2;
              do
              {
                v27 = (v19[v26] - 1) >> 63;
                v28 = v24 & ~(v25 & v27);
                v24 = v25 & v27 & v26 | v28;
                v25 &= ~v27;
                ++v26;
              }
              while (a6 != v26);
              if (((v24 - 10) & ~v28) < 0 != __OFSUB__(a6, v26)
                || (((v19[1] ^ 2) - 1) & (*v19 - 1) & 0x8000000000000000) == 0
                || v25 == -1)
              {
                v20 = 137;
                v21 = 332;
              }
              else
              {
                v29 = v24 + 1;
                v30 = a6 >= v29;
                v31 = a6 - v29;
                if (v30)
                {
                  if (v31)
                    memcpy(a3, &v19[v29], v31);
                  *a2 = v31;
                  v18 = 1;
LABEL_18:
                  if (v7 == 3)
                    return v18;
                  goto LABEL_25;
                }
                v20 = 137;
                v21 = 340;
              }
            }
            else
            {
              v20 = 126;
              v21 = 295;
            }
          }
          else
          {
            v20 = 120;
            v21 = 286;
          }
          sub_2341579B4(4, 0, v20, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", v21);
          goto LABEL_37;
      }
      sub_2341579B4(4, 0, 143, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", 516);
    }
    v18 = 0;
    goto LABEL_25;
  }
  sub_2341579B4(4, 0, 135, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", 478);
  return 0;
}

uint64_t sub_234194FC0(unint64_t a1, unsigned __int8 *a2, char *a3, uint64_t **a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t result;
  unint64_t v12;

  v12 = 0;
  v10 = sub_23417CF10(a4);
  if (sub_234194CD8(a4, &v12, a3, v10, a2, a1, a5))
  {
    result = v12;
    if (!(v12 >> 31))
      return result;
    sub_2341579B4(4, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", 552);
  }
  return 0xFFFFFFFFLL;
}

size_t sub_234195060(unint64_t a1, unsigned __int8 *a2, char *a3, uint64_t **a4, int a5)
{
  unsigned int v10;
  size_t result;
  size_t v12;

  v12 = 0;
  v10 = sub_23417CF10(a4);
  if (sub_23417EBD8((uint64_t)a4, &v12, a3, v10, a2, a1, a5))
  {
    result = v12;
    if (!(v12 >> 31))
      return result;
    sub_2341579B4(4, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/rsa_extra/rsa_crypt.c", 566);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_234195100(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;

  v3 = a3;
  v4 = a1[1];
  v5 = *a1 ^ 0x736F6D6570736575;
  v6 = v4 ^ 0x646F72616E646F6DLL;
  v7 = *a1 ^ 0x6C7967656E657261;
  v8 = v4 ^ 0x7465646279746573;
  if (a3 >= 8)
  {
    do
    {
      v9 = *a2++;
      v10 = (v5 + v6) ^ __ROR8__(v6, 51);
      v11 = (v9 ^ v8) + v7;
      v12 = v11 ^ __ROR8__(v9 ^ v8, 48);
      v13 = v11 + v10;
      v14 = v12 + __ROR8__(v5 + v6, 32);
      v15 = v13 ^ __ROR8__(v10, 47);
      v16 = v14 ^ __ROR8__(v12, 43);
      v17 = v14 + v15;
      v18 = v16 + __ROR8__(v13, 32);
      v19 = v17 ^ __ROR8__(v15, 51);
      v20 = v18 ^ __ROR8__(v16, 48);
      v21 = v18 + v19;
      v22 = v20 + __ROR8__(v17, 32);
      v6 = v21 ^ __ROR8__(v19, 47);
      v8 = v22 ^ __ROR8__(v20, 43);
      v7 = __ROR8__(v21, 32);
      v5 = v22 ^ v9;
      a3 -= 8;
    }
    while (a3 > 7);
  }
  v65 = 0;
  if (a3)
    __memcpy_chk();
  HIBYTE(v65) = v3;
  v23 = (v65 ^ v8) + v7;
  v24 = (v5 + v6) ^ __ROR8__(v6, 51);
  v25 = v23 ^ __ROR8__(v65 ^ v8, 48);
  v26 = v23 + v24;
  v27 = v25 + __ROR8__(v5 + v6, 32);
  v28 = v26 ^ __ROR8__(v24, 47);
  v29 = v27 ^ __ROR8__(v25, 43);
  v30 = v27 + v28;
  v31 = v29 + __ROR8__(v26, 32);
  v32 = v30 ^ __ROR8__(v28, 51);
  v33 = v31 ^ __ROR8__(v29, 48);
  v34 = v31 + v32;
  v35 = v33 + __ROR8__(v30, 32);
  v36 = v34 ^ __ROR8__(v32, 47);
  v37 = v35 ^ __ROR8__(v33, 43);
  v38 = (v35 ^ v65) + v36;
  v39 = (__ROR8__(v34, 32) ^ 0xFFLL) + v37;
  v40 = v38 ^ __ROR8__(v36, 51);
  v41 = v39 ^ __ROR8__(v37, 48);
  v42 = v40 + v39;
  v43 = v41 + __ROR8__(v38, 32);
  v44 = v42 ^ __ROR8__(v40, 47);
  v45 = v43 ^ __ROR8__(v41, 43);
  v46 = v44 + v43;
  v47 = __ROR8__(v42, 32) + v45;
  v48 = v46 ^ __ROR8__(v44, 51);
  v49 = v47 ^ __ROR8__(v45, 48);
  v50 = v48 + v47;
  v51 = v49 + __ROR8__(v46, 32);
  v52 = v50 ^ __ROR8__(v48, 47);
  v53 = v51 ^ __ROR8__(v49, 43);
  v54 = v52 + v51;
  v55 = __ROR8__(v50, 32) + v53;
  v56 = v54 ^ __ROR8__(v52, 51);
  v57 = v55 ^ __ROR8__(v53, 48);
  v58 = v56 + v55;
  v59 = v57 + __ROR8__(v54, 32);
  v60 = v58 ^ __ROR8__(v56, 47);
  v61 = v59 ^ __ROR8__(v57, 43);
  v62 = __ROR8__(v58, 32) + v61;
  v63 = (v60 + v59) ^ __ROR8__(v60, 51);
  return __ROR8__(v62 ^ __ROR8__(v61, 48), 43) ^ __ROR8__(v63, 47) ^ __ROR8__(v63 + v62, 32) ^ (v63 + v62);
}

_QWORD *sub_234195344(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = sub_23418E344(0x28uLL);
  if (v2)
  {
    v3 = sub_23418E380(4uLL, 8uLL);
    v2[1] = v3;
    if (v3)
    {
      v2[3] = 4;
      v2[4] = a1;
    }
    else
    {
      sub_23418E3C4(v2);
      return 0;
    }
  }
  return v2;
}

_QWORD *sub_2341953A0()
{
  return sub_234195344(0);
}

void sub_2341953A8(uint64_t *a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      if (8 * v2)
        bzero((void *)a1[1], 8 * v2);
      *a1 = 0;
      *((_DWORD *)a1 + 4) = 0;
    }
  }
}

unint64_t *sub_2341953E8(unint64_t *result, unint64_t a2)
{
  if (result)
  {
    if (*result <= a2)
      return 0;
    else
      return *(unint64_t **)(result[1] + 8 * a2);
  }
  return result;
}

uint64_t sub_23419540C(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  if (!a1 || *a1 <= a2)
    return 0;
  *(_QWORD *)(a1[1] + 8 * a2) = a3;
  return a3;
}

void sub_234195434(unint64_t *a1, void (*a2)(uint64_t), uint64_t a3)
{
  unint64_t v4;
  unint64_t v7;

  if (a1)
  {
    v4 = *a1;
    if (*a1)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)(a1[1] + 8 * v7))
        {
          a2(a3);
          v4 = *a1;
        }
        ++v7;
      }
      while (v7 < v4);
    }
    sub_23418E3C4((_QWORD *)a1[1]);
    sub_23418E3C4(a1);
  }
}

void sub_2341954A4(unint64_t *a1, void (*a2)(void))
{
  unint64_t v3;
  unint64_t v5;

  if (a1)
  {
    v3 = *a1;
    if (*a1)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)(a1[1] + 8 * v5))
        {
          a2();
          v3 = *a1;
        }
        ++v5;
      }
      while (v5 < v3);
    }
    sub_23418E3C4((_QWORD *)a1[1]);
    sub_23418E3C4(a1);
  }
}

unint64_t *sub_23419550C(unint64_t *result, uint64_t a2, unint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  if (!result)
    return result;
  v3 = result;
  v4 = *result;
  if (*result >= 0x7FFFFFFF)
  {
    sub_2341579B4(14, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/stack/stack.c", 179);
    return 0;
  }
  v7 = result[3];
  if (v7 > v4 + 1)
    goto LABEL_19;
  if (v7 < 0)
    v8 = v7 + 1;
  else
    v8 = 2 * v7;
  if (v7 >= 0)
    v9 = 16 * v7;
  else
    v9 = 8 * (v7 + 1);
  if (v8 < v7 || v9 >> 3 != v8)
    return 0;
  result = sub_23418E40C((_QWORD *)result[1], v9);
  if (result)
  {
    v3[1] = (unint64_t)result;
    v3[3] = v8;
    v4 = *v3;
LABEL_19:
    v11 = v4 - a3;
    if (v4 <= a3)
    {
      v13 = (_QWORD *)(v3[1] + 8 * v4);
    }
    else
    {
      v12 = v3[1];
      if (8 * v11)
      {
        memmove((void *)(v12 + 8 * a3 + 8), (const void *)(v12 + 8 * a3), 8 * v11);
        v12 = v3[1];
      }
      v13 = (_QWORD *)(v12 + 8 * a3);
    }
    *v13 = a2;
    result = (unint64_t *)(*v3 + 1);
    *v3 = (unint64_t)result;
    *((_DWORD *)v3 + 4) = 0;
  }
  return result;
}

uint64_t sub_23419560C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  if (!a1)
    return 0;
  v3 = *a1;
  if (*a1 <= a2)
    return 0;
  v4 = (uint64_t *)(a1[1] + 8 * a2);
  v5 = *v4;
  v6 = v3 - 1;
  v7 = 8 * (v3 + ~a2);
  if (v3 - 1 != a2 && v7 != 0)
  {
    memmove(v4, v4 + 1, v7);
    v6 = *a1 - 1;
  }
  *a1 = v6;
  return v5;
}

uint64_t sub_234195680(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;

  if (!a1 || !*a1)
    return 0;
  v2 = 0;
  while (*(_QWORD *)(a1[1] + 8 * v2) != a2)
  {
    if (*a1 == ++v2)
      return 0;
  }
  return sub_23419560C(a1, v2);
}

unint64_t *sub_2341956BC(unint64_t *result, uint64_t (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v8;
  unint64_t v9;

  if (result)
  {
    v4 = result;
    if (*result)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        result = (unint64_t *)a2(a3, *(_QWORD *)(v4[1] + 8 * v8), a4);
        if (!(_DWORD)result)
          *(_QWORD *)(v4[1] + 8 * v9++) = *(_QWORD *)(v4[1] + 8 * v8);
        ++v8;
      }
      while (v8 < *v4);
    }
    else
    {
      v9 = 0;
    }
    *v4 = v9;
  }
  return result;
}

uint64_t sub_23419574C(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, _QWORD))
{
  _QWORD *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;

  if (!result)
    return result;
  v6 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 32))
  {
    v10 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v11 = *(_QWORD **)(result + 8);
      if (*v11 == a3)
      {
        v9 = 0;
        goto LABEL_27;
      }
      v9 = 0;
      v12 = v11 + 1;
      while (v10 - 1 != v9)
      {
        v13 = v12[v9++];
        if (v13 == a3)
        {
          result = v9 < v10;
          goto LABEL_28;
        }
      }
    }
    return 0;
  }
  if (!a3)
    return 0;
  v8 = *(_QWORD *)result;
  if (*(_DWORD *)(result + 16) || v8 < 2)
  {
    if (v8)
    {
      v14 = 0;
      do
      {
        v9 = v14 + ((v8 - v14 - 1) >> 1);
        v15 = a4(v6[4], a3, *(_QWORD *)(v6[1] + 8 * v9));
        if (v15 < 1)
        {
          if (v15 < 0)
          {
            v8 = v14 + ((v8 - v14 - 1) >> 1);
          }
          else
          {
            if (v8 - v14 == 1)
              goto LABEL_27;
            v8 = v9 + 1;
          }
        }
        else
        {
          v14 = v9 + 1;
        }
      }
      while (v14 < v8);
    }
    return 0;
  }
  v9 = 0;
  while (a4(v6[4], a3, *(_QWORD *)(v6[1] + 8 * v9)))
  {
    if (++v9 >= *v6)
      return 0;
  }
LABEL_27:
  result = 1;
LABEL_28:
  if (a2)
    *a2 = v9;
  return result;
}

BOOL sub_234195898(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 16))
    return 1;
  if (*(_QWORD *)(a1 + 32))
    return *(_QWORD *)a1 < 2uLL;
  return 0;
}

uint64_t sub_2341958CC(uint64_t *a1)
{
  if (a1 && *a1)
    return sub_23419560C(a1, 0);
  else
    return 0;
}

unint64_t *sub_2341958E8(unint64_t *a1, uint64_t a2)
{
  return sub_23419550C(a1, a2, *a1);
}

uint64_t sub_2341958F0(uint64_t *a1)
{
  if (a1 && *a1)
    return sub_23419560C(a1, *a1 - 1);
  else
    return 0;
}

_QWORD *sub_23419590C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (!a1)
    return 0;
  v2 = sub_23418E344(0x28uLL);
  if (v2)
  {
    v3 = sub_23418E58C(*(const void **)(a1 + 8), 8 * *(_QWORD *)(a1 + 24));
    v2[1] = v3;
    if (v3)
    {
      *v2 = *(_QWORD *)a1;
      *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
      v2[3] = *(_QWORD *)(a1 + 24);
      v2[4] = *(_QWORD *)(a1 + 32);
      return v2;
    }
    sub_23418E3C4(0);
    sub_23418E3C4(v2);
    return 0;
  }
  return v2;
}

uint64_t sub_23419598C(uint64_t result, uint64_t (*a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  unint64_t v3;
  unint64_t i;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (result)
  {
    v2 = result;
    if (*(_QWORD *)(result + 32))
    {
      if (!*(_DWORD *)(result + 16))
      {
        v3 = *(_QWORD *)result;
        if (*(_QWORD *)result >= 2uLL)
        {
          for (i = (unint64_t)(*(_QWORD *)result - 2) >> 1; i < v3; --i)
          {
            result = sub_234195A40(v2, a2, i, v3);
            v3 = *(_QWORD *)v2;
          }
          v6 = v3 - 1;
          if (v3 != 1)
          {
            do
            {
              v7 = *(uint64_t **)(v2 + 8);
              v8 = *v7;
              *v7 = v7[v6];
              *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v6) = v8;
              result = sub_234195A40(v2, a2, 0, v6--);
            }
            while (v6);
          }
        }
        *(_DWORD *)(v2 + 16) = 1;
      }
    }
  }
  return result;
}

uint64_t sub_234195A40(uint64_t result, uint64_t (*a2)(_QWORD, _QWORD, _QWORD), unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (2 * a3) | 1;
  if (v4 < a4)
  {
    v6 = a3;
    v8 = result;
    v9 = 2 * a3;
    do
    {
      result = a2(*(_QWORD *)(v8 + 32), *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v6), *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v4));
      if ((int)result >= 0)
        v10 = v6;
      else
        v10 = v4;
      if (v9 + 2 < a4)
      {
        result = a2(*(_QWORD *)(v8 + 32), *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v10), *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * (v9 + 2)));
        if ((int)result < 0)
          v10 = v9 + 2;
      }
      if (v6 == v10)
        break;
      v11 = *(_QWORD *)(v8 + 8);
      v12 = *(_QWORD *)(v11 + 8 * v6);
      *(_QWORD *)(v11 + 8 * v6) = *(_QWORD *)(v11 + 8 * v10);
      *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v10) = v12;
      v9 = 2 * v10;
      v4 = (2 * v10) | 1;
      v6 = v10;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_234195B10(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result != a2)
    *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  return result;
}

unint64_t *sub_234195B2C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t i;

  v9 = sub_23419590C(a1);
  v10 = v9;
  if (!v9)
    return v10;
  v11 = *v9;
  if (!*v9)
    return v10;
  v12 = 0;
  v13 = (_QWORD *)v9[1];
  while (!v13[v12])
  {
LABEL_7:
    if (++v12 >= v11)
      return v10;
  }
  *(_QWORD *)(v10[1] + 8 * v12) = a2(a3);
  v13 = (_QWORD *)v10[1];
  if (v13[v12])
  {
    v11 = *v10;
    goto LABEL_7;
  }
  if (v12)
  {
    for (i = 0; i != v12; ++i)
    {
      if (*(_QWORD *)(v10[1] + 8 * i))
        a4(a5);
    }
    v13 = (_QWORD *)v10[1];
  }
  sub_23418E3C4(v13);
  sub_23418E3C4(v10);
  return 0;
}

uint64_t sub_234195BFC(pthread_rwlock_t *a1)
{
  uint64_t result;

  result = pthread_rwlock_init(a1, 0);
  if ((_DWORD)result)
    abort();
  return result;
}

uint64_t sub_234195C1C(pthread_rwlock_t *a1)
{
  uint64_t result;

  result = pthread_rwlock_rdlock(a1);
  if ((_DWORD)result)
    abort();
  return result;
}

uint64_t sub_234195C38(pthread_rwlock_t *a1)
{
  uint64_t result;

  result = pthread_rwlock_wrlock(a1);
  if ((_DWORD)result)
    abort();
  return result;
}

uint64_t sub_234195C54(pthread_rwlock_t *a1)
{
  uint64_t result;

  result = pthread_rwlock_unlock(a1);
  if ((_DWORD)result)
    abort();
  return result;
}

uint64_t sub_234195C74(pthread_once_t *a1, void (*a2)(void))
{
  uint64_t result;

  result = pthread_once(a1, a2);
  if ((_DWORD)result)
    abort();
  return result;
}

_QWORD *sub_234195C90(int a1)
{
  _QWORD *result;

  if (pthread_once(&stru_2561584C8, (void (*)(void))sub_234195CF0))
    abort();
  if (!dword_25615AAE8)
    return 0;
  result = pthread_getspecific(qword_25615AAF0);
  if (result)
    return (_QWORD *)result[a1];
  return result;
}

uint64_t sub_234195CF0()
{
  uint64_t result;

  result = pthread_key_create((pthread_key_t *)&qword_25615AAF0, (void (__cdecl *)(void *))sub_234195E18);
  dword_25615AAE8 = result == 0;
  return result;
}

uint64_t sub_234195D24(unsigned int a1, uint64_t a2, void (*a3)(uint64_t))
{
  void *v6;
  _OWORD *v8;

  if (pthread_once(&stru_2561584C8, (void (*)(void))sub_234195CF0))
    abort();
  if (!dword_25615AAE8)
    goto LABEL_9;
  v6 = pthread_getspecific(qword_25615AAF0);
  if (!v6)
  {
    v8 = malloc_type_malloc(0x28uLL, 0x80040B8603338uLL);
    if (!v8)
      goto LABEL_9;
    v6 = v8;
    *((_QWORD *)v8 + 4) = 0;
    *v8 = 0u;
    v8[1] = 0u;
    if (pthread_setspecific(qword_25615AAF0, v8))
    {
      free(v6);
      goto LABEL_9;
    }
  }
  if (!pthread_mutex_lock(&stru_2561584D8))
  {
    *((_QWORD *)&xmmword_25615AAF8 + a1) = a3;
    pthread_mutex_unlock(&stru_2561584D8);
    *((_QWORD *)v6 + a1) = a2;
    return 1;
  }
LABEL_9:
  a3(a2);
  return 0;
}

void sub_234195E18(char *a1)
{
  uint64_t i;
  void (*v3)(_QWORD);
  _OWORD v4[2];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (a1 && !pthread_mutex_lock(&stru_2561584D8))
  {
    v4[0] = xmmword_25615AAF8;
    v4[1] = unk_25615AB08;
    v5 = qword_25615AB18;
    pthread_mutex_unlock(&stru_2561584D8);
    for (i = 0; i != 40; i += 8)
    {
      v3 = *(void (**)(_QWORD))((char *)v4 + i);
      if (v3)
        v3(*(_QWORD *)&a1[i]);
    }
    free(a1);
  }
}

uint64_t sub_234195ED4(int (*a1)(uint64_t, _QWORD **), uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v15;

  v10 = a1(a3, 0);
  v11 = sub_23418E2E4(v10);
  if (!v11)
    return 0;
  v12 = v11;
  v15 = v11;
  a1(a3, &v15);
  v13 = sub_2341704B4((uint64_t)v12, v10, a4, a5, a2);
  sub_23418E3C4(v12);
  return v13;
}

uint64_t sub_234195F84(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, _DWORD *a5)
{
  int v8;
  uint64_t v9;
  void *v11;

  v11 = 0;
  v8 = sub_234143140(a3, &v11, a1);
  if (!v11)
    return 0;
  v9 = sub_2341704B4((uint64_t)v11, v8, a4, a5, a2);
  sub_23418E3C4(v11);
  return v9;
}

uint64_t sub_23419600C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  _OWORD v15[2];

  if (*(_DWORD *)(a4 + 4) == 3)
  {
    memset(v15, 0, sizeof(v15));
    sub_23417064C(v15);
    if (sub_234170DF0((uint64_t)v15, 0, a7, 0, a6))
      return sub_2341960E4(a1, a2, a3, a4, a5, (uint64_t *)v15);
    sub_234170680((uint64_t)v15);
  }
  else
  {
    sub_2341579B4(12, 0, 191, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/a_sign.c", 73);
  }
  return 0;
}

uint64_t sub_2341960E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  __int16 v17;
  unsigned int v19;
  void *v20;

  v20 = 0;
  if (*(_DWORD *)(a4 + 4) != 3)
  {
    v15 = 12;
    v16 = 191;
    v17 = 91;
LABEL_12:
    sub_2341579B4(v15, 0, v16, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/a_sign.c", v17);
LABEL_13:
    v13 = 0;
    goto LABEL_14;
  }
  if (a2 && !sub_2341963BC((uint64_t)a6, a2)
    || a3 && !sub_2341963BC((uint64_t)a6, a3)
    || (sub_234143140(a5, &v20, a1) & 0x80000000) != 0)
  {
    goto LABEL_13;
  }
  v11 = sub_234153704(a6[2]);
  v12 = (int)sub_234158378(v11);
  v19 = v12;
  if ((v12 & 0x80000000) != 0)
  {
    v15 = 11;
    v16 = 69;
    v17 = 111;
    goto LABEL_12;
  }
  v13 = sub_23418E2E4(v12);
  if (!v13)
  {
LABEL_14:
    v14 = 0;
    goto LABEL_15;
  }
  if (!sub_23417121C(a6, (uint64_t)v13))
  {
    sub_2341579B4(11, 0, 6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/a_sign.c", 121);
    goto LABEL_14;
  }
  sub_234141374(a4, (uint64_t)v13, v19);
  v13 = 0;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF0 | 8;
  v14 = v19;
LABEL_15:
  sub_234170680((uint64_t)a6);
  sub_23418E3C4(v20);
  sub_23418E3C4(v13);
  return v14;
}

uint64_t sub_234196260(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4, uint64_t a5)
{
  int v10;
  __int16 v11;
  uint64_t v12;
  void *v14;
  _OWORD v15[2];
  uint64_t v16;

  if (!a5)
  {
    v10 = 67;
    v11 = 75;
    goto LABEL_6;
  }
  v16 = 0;
  if (a3[1] != 3)
  {
    v16 = (int)sub_2341414B0(a3);
    goto LABEL_8;
  }
  if (sub_23413DAD0(a3, &v16))
  {
LABEL_8:
    memset(v15, 0, sizeof(v15));
    v14 = 0;
    sub_23417064C(v15);
    if (sub_23419652C((uint64_t)v15, a2, a5))
    {
      sub_234143140(a4, &v14, a1);
      if (v14)
      {
        sub_2341414C0((uint64_t)a3);
        if (sub_2341712CC((uint64_t)v15))
        {
          v12 = 1;
LABEL_14:
          sub_23418E3C4(v14);
          sub_234170680((uint64_t)v15);
          return v12;
        }
        sub_2341579B4(11, 0, 6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/a_verify.c", 106);
      }
    }
    v12 = 0;
    goto LABEL_14;
  }
  v10 = 109;
  v11 = 82;
LABEL_6:
  sub_2341579B4(11, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/a_verify.c", v11);
  return 0;
}

uint64_t sub_2341963BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char **v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  unsigned int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17[2];

  v4 = sub_234153704(*(_QWORD *)(a1 + 16));
  if (!v4)
  {
    v10 = 108;
    v11 = 80;
LABEL_18:
    sub_2341579B4(12, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/algorithm.c", v11);
    return 0;
  }
  v5 = v4;
  if (sub_2341414B8(v4) != 6
    || (v17[1] = 0, result = sub_23415D348(*(uint64_t **)(a1 + 16)), (_DWORD)result))
  {
    if (sub_2341414B8(v5) == 949)
    {
      v7 = sub_23418F064(0x3B5u);
      v8 = a2;
      v9 = -1;
      return sub_2341A8C6C(v8, (uint64_t)v7, v9, 0);
    }
    v12 = (unsigned int *)sub_2341709C4(a1);
    if (v12)
    {
      v13 = sub_2341414B0(v12);
      v17[0] = 0;
      if (v13 != 4)
      {
        v14 = v13;
        if (v13 != 257)
        {
          v15 = sub_2341414B8(v5);
          if (sub_23418F6DC(v17, v14, v15))
          {
            if (sub_2341414B8(v5) == 6)
              v16 = 5;
            else
              v16 = -1;
            v7 = sub_23418F064(v17[0]);
            v8 = a2;
            v9 = v16;
            return sub_2341A8C6C(v8, (uint64_t)v7, v9, 0);
          }
        }
      }
      v10 = 111;
      v11 = 111;
    }
    else
    {
      v10 = 108;
      v11 = 103;
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_23419652C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  __int16 v10;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_23418EBF8(*(unsigned __int16 **)a2);
  v16 = 0;
  if (!sub_23418F65C(v6, (_DWORD *)&v16 + 1, &v16))
  {
    v8 = 12;
    v9 = 184;
    v10 = 128;
    goto LABEL_9;
  }
  v7 = v16;
  if (v7 != sub_2341414B8(a3))
  {
    v8 = 12;
    v9 = 189;
    v10 = 134;
    goto LABEL_9;
  }
  if (HIDWORD(v16))
  {
    if (HIDWORD(v16) == 257 || HIDWORD(v16) == 4)
    {
      v8 = 12;
      v9 = 111;
      v10 = 140;
LABEL_9:
      sub_2341579B4(v8, 0, v9, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/algorithm.c", v10);
      return 0;
    }
    v12 = *(_DWORD **)(a2 + 8);
    if (v12 && *v12 != 5)
    {
      v8 = 11;
      v9 = 136;
      v10 = 166;
      goto LABEL_9;
    }
    v13 = sub_2341531E8(SHIDWORD(v16));
    if (!v13)
    {
      v8 = 12;
      v9 = 183;
      v10 = 173;
      goto LABEL_9;
    }
    v14 = v13;
    v15 = a1;
    return sub_234170F20(v15, 0, v14, 0, a3);
  }
  if (v6 == 949)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      v8 = 11;
      v9 = 136;
      v10 = 151;
      goto LABEL_9;
    }
    v15 = a1;
    v14 = 0;
    return sub_234170F20(v15, 0, v14, 0, a3);
  }
  if (v6 != 912)
  {
    v8 = 12;
    v9 = 184;
    v10 = 156;
    goto LABEL_9;
  }
  return sub_234198C2C(a1, a2, a3);
}

uint64_t sub_2341966F0(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _OWORD v8[3];

  memset(v8, 0, sizeof(v8));
  if (sub_234147B54((uint64_t)v8, 0) && sub_2341967C0((uint64_t *)v8, a1, a2, 1, 0))
  {
    if ((unint64_t)sub_234147ECC((uint64_t)v8) <= 0x10000)
    {
      v7 = sub_234147EA4((uint64_t)v8);
      v5 = sub_234147ECC((uint64_t)v8);
      v4 = sub_234144804(0, (uint64_t *)&v7, v5);
      sub_234147BE4((uint64_t)v8);
      return v4;
    }
    sub_2341579B4(12, 0, 177, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/asn1_gen.c", 115);
  }
  sub_234147BE4((uint64_t)v8);
  return 0;
}

uint64_t sub_2341967C0(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  __int16 v6;
  unsigned int v10;
  int v11;
  char *v12;
  int v13;
  char *v14;
  char *v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v24;
  BOOL v25;
  int v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  unint64_t v31;
  unsigned int *v32;
  _BOOL8 v33;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  void **v42;
  void **v43;
  int v44;
  int v45;
  size_t v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  void **v50;
  int v51;
  int v52;
  char **v53;
  char **v54;
  size_t v55;
  size_t v56;
  _QWORD *v57;
  _QWORD *v58;
  __int128 v61;
  __int128 v62[3];
  __int128 v63;

  if (a5 > 50)
  {
    v5 = 131;
    v6 = 194;
LABEL_66:
    sub_2341579B4(12, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/asn1_gen.c", v6);
    return 0;
  }
  v10 = 0;
  while (1)
  {
    while (1)
    {
      v11 = *a2;
      if (*a2)
      {
        v12 = a2;
        do
        {
          if (!sub_23418E6A4(v11))
            break;
          v13 = *++v12;
          v11 = v13;
        }
        while (v13);
      }
      else
      {
        v12 = a2;
      }
      v14 = strchr(v12, 44);
      if (!v14)
        goto LABEL_59;
      v15 = v14;
      *(_QWORD *)&v62[0] = v12;
      *((_QWORD *)&v62[0] + 1) = v14 - v12;
      LOBYTE(v61) = 0;
      v16 = v62[0];
      while (1)
      {
        v63 = v16;
        if (!sub_234148F30(&v63, &v61) || !sub_23418E6A4(v61))
          break;
        v16 = v63;
        v62[0] = v63;
        LOBYTE(v61) = 0;
      }
      v63 = 0uLL;
      if (sub_234149044((uint64_t)v62, &v63, 58))
      {
        sub_234148BF8(v62, 1uLL);
      }
      else
      {
        v63 = v62[0];
        v62[0] = 0uLL;
      }
      a2 = v15 + 1;
      if (!sub_2341971D4((uint64_t)&v63, "FORMAT") && !sub_2341971D4((uint64_t)&v63, "FORM"))
        break;
      if (sub_2341971D4((uint64_t)v62, "ASCII"))
      {
        a4 = 1;
      }
      else if (sub_2341971D4((uint64_t)v62, "UTF8"))
      {
        a4 = 2;
      }
      else if (sub_2341971D4((uint64_t)v62, "HEX"))
      {
        a4 = 3;
      }
      else
      {
        if (!sub_2341971D4((uint64_t)v62, "BITLIST"))
        {
          v5 = 182;
          v6 = 250;
          goto LABEL_66;
        }
        a4 = 4;
      }
    }
    if (!sub_2341971D4((uint64_t)&v63, "IMP") && !sub_2341971D4((uint64_t)&v63, "IMPLICIT"))
      break;
    if (v10)
    {
      v5 = 131;
      v6 = 256;
      goto LABEL_66;
    }
    v10 = sub_23419723C(v62);
    if (!v10)
      return 0;
  }
  if (sub_2341971D4((uint64_t)&v63, "EXP") || sub_2341971D4((uint64_t)&v63, "EXPLICIT"))
  {
    if (v10)
    {
      v5 = 131;
      v6 = 268;
      goto LABEL_66;
    }
    v17 = sub_23419723C(v62);
    if (v17)
    {
      v18 = v17 | 0x20000000;
LABEL_45:
      v20 = a3;
      v19 = a1;
      v21 = (uint64_t)a2;
      v22 = 0;
      return sub_23419738C(v19, v21, v20, v18, v22, a4, a5);
    }
    return 0;
  }
  if (sub_2341971D4((uint64_t)&v63, "OCTWRAP"))
  {
    if (v10)
      v18 = v10;
    else
      v18 = 4;
    goto LABEL_45;
  }
  if (sub_2341971D4((uint64_t)&v63, "BITWRAP"))
  {
    if (v10)
      v18 = v10;
    else
      v18 = 3;
    v20 = a3;
    v19 = a1;
    v21 = (uint64_t)a2;
    v22 = 1;
    return sub_23419738C(v19, v21, v20, v18, v22, a4, a5);
  }
  if (sub_2341971D4((uint64_t)&v63, "SEQWRAP"))
  {
    v24 = v10 | 0x20000000;
    v25 = v10 == 0;
    v26 = 536870928;
    goto LABEL_56;
  }
  if (sub_2341971D4((uint64_t)&v63, "SETWRAP"))
  {
    v24 = v10 | 0x20000000;
    v26 = 536870929;
    v25 = v10 == 0;
LABEL_56:
    if (v25)
      v18 = v26;
    else
      v18 = v24;
    goto LABEL_45;
  }
LABEL_59:
  v27 = strchr(v12, 58);
  v28 = v27;
  v63 = 0uLL;
  if (v27)
  {
    v29 = v27 - v12;
    v30 = v28 + 1;
  }
  else
  {
    v29 = strlen(v12);
    v30 = "";
  }
  *(_QWORD *)&v63 = v12;
  *((_QWORD *)&v63 + 1) = v29;
  v31 = -9;
  v32 = (unsigned int *)&dword_250510A60;
  while (!sub_2341971D4((uint64_t)&v63, *((char **)v32 - 1)))
  {
    ++v31;
    v32 += 4;
    if (v31 == 24)
    {
      v5 = 185;
      v6 = 356;
      goto LABEL_66;
    }
  }
  v35 = *v32;
  memset(&v62[1], 0, 32);
  if (v10)
    v36 = v35 & 0x20000000 | v10;
  else
    v36 = v35;
  v62[0] = 0uLL;
  if (!sub_234147F60(a1, (uint64_t)v62, v36))
    return 0;
  switch(v35)
  {
    case 1u:
      if ((_DWORD)a4 != 1)
      {
        v5 = 161;
        v6 = 377;
        goto LABEL_66;
      }
      LODWORD(v61) = 0;
      if (!sub_2341A0E50(v30, &v61))
      {
        v5 = 125;
        v6 = 382;
        goto LABEL_66;
      }
      if ((_DWORD)v61)
        v49 = 255;
      else
        v49 = 0;
      if (!sub_234148008((uint64_t)v62, v49))
        return 0;
      return sub_234147CB0(a1) != 0;
    case 2u:
    case 0xAu:
      if ((_DWORD)a4 != 1)
      {
        v5 = 139;
        v6 = 391;
        goto LABEL_66;
      }
      v42 = (void **)sub_2341A0C64(0, v30);
      if (!v42)
      {
        v5 = 130;
        v6 = 396;
        goto LABEL_66;
      }
      v43 = v42;
      v44 = sub_23413E46C(v42, 0);
      *(_QWORD *)&v61 = 0;
      if (v44 < 1
        || (v45 = v44, !sub_2341481CC((uint64_t)v62, &v61, v44))
        || sub_23413E46C(v43, (_BYTE **)&v61) != v45)
      {
        v33 = 0;
        goto LABEL_132;
      }
      goto LABEL_94;
    case 3u:
      if ((_DWORD)a4 == 4)
      {
        v50 = (void **)sub_23414468C();
        if (!v50)
          return 0;
        v43 = v50;
        if (!sub_23414BD44(v30, 44, 1, (uint64_t (*)(char *, uint64_t, uint64_t))sub_234197430, (uint64_t)v50))
        {
          sub_2341579B4(12, 0, 151, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/asn1_gen.c", 483);
          sub_234144630((uint64_t)v43);
          return 0;
        }
        v51 = sub_23413DB1C((uint64_t)v43, 0);
        *(_QWORD *)&v61 = 0;
        if (v51 >= 1
          && (v52 = v51, sub_2341481CC((uint64_t)v62, &v61, v51))
          && sub_23413DB1C((uint64_t)v43, (_BYTE **)&v61) == v52)
        {
LABEL_94:
          v33 = sub_234147CB0(a1) != 0;
        }
        else
        {
          v33 = 0;
        }
LABEL_132:
        sub_234144630((uint64_t)v43);
      }
      else
      {
        if (!sub_234148008((uint64_t)v62, 0))
          return 0;
LABEL_138:
        if ((_DWORD)a4 != 3)
        {
          if ((_DWORD)a4 == 1)
            goto LABEL_140;
          v5 = 124;
          v6 = 521;
          goto LABEL_66;
        }
        *(_QWORD *)&v61 = 0;
        v57 = sub_2341A1468(v30, &v61);
        if (!v57)
        {
          v5 = 128;
          v6 = 513;
          goto LABEL_66;
        }
        v58 = v57;
        if (sub_23414817C((uint64_t)v62, v57, v61))
          v33 = sub_234147CB0(a1) != 0;
        else
          v33 = 0;
        sub_23418E3C4(v58);
      }
      return v33;
    case 4u:
      goto LABEL_138;
    case 5u:
      if (!*v30)
        return sub_234147CB0(a1);
      v5 = 133;
      v6 = 370;
      goto LABEL_66;
    case 6u:
      if ((_DWORD)a4 != 1)
      {
        v5 = 165;
        v6 = 411;
        goto LABEL_66;
      }
      v53 = sub_23418EF98(v30, 0);
      if (!v53 || (v54 = v53, v55 = *((int *)v53 + 5), !(_DWORD)v55))
      {
        v5 = 134;
        v6 = 416;
        goto LABEL_66;
      }
      if (sub_23414817C((uint64_t)v62, v53[3], v55))
        v33 = sub_234147CB0(a1) != 0;
      else
        v33 = 0;
      sub_23413F6D0((_QWORD **)v54);
      return v33;
    case 7u:
    case 8u:
    case 9u:
    case 0xBu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x15u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Du:
      goto LABEL_103;
    case 0xCu:
    case 0x13u:
    case 0x14u:
    case 0x16u:
    case 0x1Cu:
    case 0x1Eu:
      if ((_DWORD)a4 == 1)
      {
        v37 = 4097;
      }
      else
      {
        if ((_DWORD)a4 != 2)
        {
          v5 = 127;
          v6 = 457;
          goto LABEL_66;
        }
        v37 = 4096;
      }
      *(_QWORD *)&v61 = 0;
      v48 = sub_234141D8C(v35);
      if ((int)sub_23413ED78(&v61, v30, 0xFFFFFFFFFFFFFFFFLL, v37, v48, 0, 0x10000) < 1)
        return 0;
      if (sub_23414817C((uint64_t)v62, *(const void **)(v61 + 8), *(int *)v61))
        v33 = sub_234147CB0(a1) != 0;
      else
        v33 = 0;
      sub_234141344(v61);
      return v33;
    case 0x17u:
    case 0x18u:
      if ((_DWORD)a4 != 1)
      {
        v5 = 176;
        v6 = 427;
        goto LABEL_66;
      }
      v46 = strlen(v30);
      *(_QWORD *)&v61 = v30;
      *((_QWORD *)&v61 + 1) = v46;
      if (v31 > 1)
        v47 = sub_234149E0C(&v61, 0, 0);
      else
        v47 = sub_23414A10C(&v61, 0, 0);
      if (!v47)
      {
        v5 = 138;
        v6 = 438;
        goto LABEL_66;
      }
LABEL_140:
      v56 = strlen(v30);
      if (sub_23414817C((uint64_t)v62, v30, v56))
        return sub_234147CB0(a1) != 0;
      return 0;
    default:
      if (v35 - 536870928 >= 2)
      {
LABEL_103:
        v5 = 68;
        v6 = 558;
        goto LABEL_66;
      }
      if (!v28)
        goto LABEL_86;
      if (!a3)
      {
        v5 = 170;
        v6 = 528;
        goto LABEL_66;
      }
      v38 = sub_23419BAE4(a3, (uint64_t)v30);
      v33 = v38;
      if (!v38)
      {
        sub_2341579B4(12, 0, 170, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/asn1_gen.c", 533);
        return v33;
      }
      if (!sub_2341709C4(v38))
        goto LABEL_86;
      v39 = 0;
      v40 = (a5 + 1);
      break;
  }
  do
  {
    v41 = sub_2341953E8((unint64_t *)v33, v39);
    if (!sub_2341967C0(v62, v41[2], a3, 1, v40))
      return 0;
    if ((unint64_t)sub_234147ECC((uint64_t)v62) > 0x10000)
    {
      v5 = 177;
      v6 = 546;
      goto LABEL_66;
    }
    ++v39;
  }
  while (v39 < sub_2341709C4(v33));
LABEL_86:
  if (v31 != 23)
    return sub_234147CB0(a1);
  if (!sub_2341489B8((uint64_t)v62))
    return 0;
  return sub_234147CB0(a1) != 0;
}

BOOL sub_2341971D4(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != strlen(__s))
    return 0;
  if (v4)
    return memcmp(*(const void **)a1, __s, v4) == 0;
  return 1;
}

uint64_t sub_23419723C(__int128 *a1)
{
  int v1;
  unsigned int v2;
  int v3;
  __int16 v4;
  int v5;
  unsigned __int8 v7;
  unint64_t v8;
  __int128 v9;

  v9 = *a1;
  v8 = 0;
  if (sub_2341490B0((unsigned __int8 **)&v9, &v8) && !(v8 >> 29))
  {
    v7 = 0;
    if (!sub_234148D28(&v9, &v7))
    {
      v2 = 0x80000000;
      v5 = v8;
      return v2 | v5;
    }
    if (v7 > 0x4Fu)
    {
      if (v7 == 80)
      {
        v1 = 0;
        v2 = -1073741824;
        goto LABEL_15;
      }
      if (v7 == 85)
      {
        v2 = 0;
        v1 = 1;
        goto LABEL_15;
      }
    }
    else
    {
      if (v7 == 65)
      {
        v1 = 0;
        v2 = 0x40000000;
        goto LABEL_15;
      }
      if (v7 == 67)
      {
        v1 = 0;
        v2 = 0x80000000;
LABEL_15:
        if (*((_QWORD *)&v9 + 1))
        {
          v3 = 144;
          v4 = 165;
          goto LABEL_23;
        }
        v5 = v8;
        if (v8)
          v1 = 0;
        if (v1 == 1)
        {
          v3 = 145;
          v4 = 173;
          goto LABEL_23;
        }
        return v2 | v5;
      }
    }
    v3 = 144;
    v4 = 160;
    goto LABEL_23;
  }
  v3 = 145;
  v4 = 138;
LABEL_23:
  sub_2341579B4(12, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/asn1_gen.c", v4);
  return 0;
}

uint64_t sub_23419738C(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, int a7)
{
  uint64_t result;
  _OWORD v14[3];

  memset(v14, 0, sizeof(v14));
  result = sub_234147F60(a1, (uint64_t)v14, a4);
  if ((_DWORD)result)
  {
    if (!a5 || (result = sub_234148008((uint64_t)v14, 0), (_DWORD)result))
    {
      result = sub_2341967C0(v14, a2, a3, a6, (a7 + 1));
      if ((_DWORD)result)
        return sub_234147CB0(a1) != 0;
    }
  }
  return result;
}

BOOL sub_234197430(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v6 = a1;
  v7 = a2;
  v5 = 0;
  if (sub_2341490B0(&v6, &v5) && !v7 && v5 < 0x101)
    return sub_23413DDA0(a3, v5, 1) != 0;
  sub_2341579B4(12, 0, 145, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/asn1_gen.c", 578);
  return 0;
}

uint64_t sub_2341974B8(uint64_t a1, void **a2)
{
  int v4;
  uint64_t **v5;
  uint64_t v7;
  uint64_t **v8;

  v4 = sub_2341414B8(a1);
  switch(v4)
  {
    case 408:
      v7 = sub_23415BAB4(a1);
      return sub_23415650C(v7, a2);
    case 116:
      v8 = (uint64_t **)sub_23415AE40(a1);
      return sub_2341556E4(v8, a2);
    case 6:
      v5 = (uint64_t **)sub_23415DA54(a1);
      return sub_2341941A4(v5, a2);
    default:
      sub_2341579B4(12, 0, 187, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/i2d_pr.c", 76);
      return 0xFFFFFFFFLL;
  }
}

uint64_t sub_23419755C(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v4;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  const char *v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unint64_t *v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char **v26;
  int v27;
  BOOL v28;
  __int16 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  _BYTE v40[80];
  uint64_t v41;

  v4 = a2;
  v41 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return sub_234199858(a1, a2);
  v6 = a4;
  v7 = a3 & ~(a3 >> 31);
  if (!sub_234197920(a1, a3 & ~(a3 >> 31)))
    return 0xFFFFFFFFLL;
  v8 = 3;
  v9 = 1;
  v35 = "\n";
  v36 = " + ";
  v10 = v7;
  switch(((*(_QWORD *)&v6 & 0xF0000uLL) - 0x10000) >> 16)
  {
    case 0uLL:
      v10 = 0;
      v36 = "+";
      v8 = 1;
      v11 = ",";
      goto LABEL_8;
    case 1uLL:
      v10 = 0;
      v9 = 2;
      v36 = " + ";
      v11 = ", ";
      goto LABEL_8;
    case 2uLL:
      v10 = 0;
      v9 = 2;
      v36 = " + ";
      v11 = "; ";
LABEL_8:
      v35 = v11;
      break;
    case 3uLL:
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  v13 = " = ";
  if ((*(_QWORD *)&v6 & 0x800000) == 0)
    v13 = "=";
  v37 = (uint64_t)v13;
  if ((*(_QWORD *)&v6 & 0x800000) != 0)
    v14 = 3;
  else
    v14 = 1;
  v39 = v14;
  v15 = sub_2341A84A8(v4);
  v16 = v15 - 1;
  if (v15 >= 1)
  {
    v33 = v8;
    v34 = v10;
    v17 = 0;
    v31 = v9;
    v32 = v9 + v10;
    v18 = -1;
    v38 = v4;
    do
    {
      if ((*(_QWORD *)&v6 & 0x100000) != 0)
        v19 = v16;
      else
        v19 = v17;
      v20 = sub_2341A8458((unint64_t **)v4, v19);
      v21 = (uint64_t)v20;
      if (v18 != -1)
      {
        if (v18 == sub_234145878((uint64_t)v20))
        {
          if (a1 && sub_234144E68(a1, (uint64_t)v36, v33) != v33)
            return 0xFFFFFFFFLL;
          LODWORD(v7) = v7 + v33;
        }
        else
        {
          if (a1 && sub_234144E68(a1, (uint64_t)v35, v31) != v31 || !sub_234197920(a1, v34))
            return 0xFFFFFFFFLL;
          LODWORD(v7) = v32 + v7;
        }
      }
      v18 = sub_234145878(v21);
      v22 = (unsigned __int16 *)sub_2341709C4(v21);
      v23 = sub_2340DE85C(v21);
      v24 = sub_23418EBF8(v22);
      v25 = v24;
      if (v24)
      {
        v26 = sub_23418F154(v24);
      }
      else
      {
        v26 = (char **)v40;
        sub_23418F278(v40, 80, (uint64_t)v22, 1);
      }
      v27 = strlen((const char *)v26);
      if (a1
        && (sub_234144E68(a1, (uint64_t)v26, v27) != v27 || sub_234144E68(a1, v37, v39) != v39))
      {
        return 0xFFFFFFFFLL;
      }
      v28 = v25 || (v6 & 0x1000000) == 0;
      v29 = 128;
      if (v28)
        v29 = 0;
      v30 = sub_23413F77C(a1, v23, v29 | (unsigned __int16)v6);
      if (v30 < 0)
        return 0xFFFFFFFFLL;
      v7 = (v7 + v39 + v27 + v30);
      ++v17;
      --v16;
      v4 = v38;
    }
    while (v16 != -1);
  }
  return v7;
}

uint64_t sub_2341978B0(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v9;

  if (a1)
  {
    v7 = sub_234145994();
    if (!v7)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0;
  }
  v9 = sub_23419755C((uint64_t)v7, a2, a3, a4);
  sub_234144C64((uint64_t)v7);
  return v9;
}

BOOL sub_234197920(uint64_t a1, int a2)
{
  BOOL v4;
  int i;

  if (a2 < 1)
  {
    return 1;
  }
  else
  {
    v4 = 0;
    for (i = 0; i != a2; v4 = i >= a2)
    {
      if (a1 && sub_234144E68(a1, (uint64_t)" ", 1) != 1)
        break;
      ++i;
    }
  }
  return v4;
}

uint64_t sub_2341979A4(unint64_t *a1, uint64_t a2, __int16 a3, unint64_t **a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  int v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t *v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int16 **v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  const char **v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t *v68;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int16 *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  uint64_t v90;
  unint64_t **v91;
  unint64_t *v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;

  *a4 = 0;
  v8 = sub_2341709C4((uint64_t)a1);
  v9 = v8 - 2;
  if (v8 < 2)
    return 0;
  v11 = v8;
  if ((a3 & 0x100) != 0)
    v12 = 0;
  else
    v12 = v8 + 1;
  if ((a3 & 0x200) != 0)
    v13 = 0;
  else
    v13 = v8 + 1;
  v96 = v13;
  v97 = v12;
  if ((a3 & 0x400) != 0)
    v14 = 0;
  else
    v14 = v8 + 1;
  v95 = v14;
  v15 = sub_2341953A0();
  v16 = v15;
  if (!v15)
  {
    v17 = 0;
LABEL_139:
    v68 = 0;
LABEL_140:
    v10 = 17;
    goto LABEL_146;
  }
  v90 = a2;
  v91 = a4;
  v17 = 0;
  v92 = v15;
  do
  {
    v18 = sub_2341953E8(a1, v9);
    if (!sub_23419FB1C((uint64_t)v18))
      goto LABEL_139;
    v19 = *((_DWORD *)v18 + 12);
    if (!v17)
    {
      v20 = sub_2341984BC();
      v17 = (uint64_t)v20;
      if (!v20)
        goto LABEL_139;
      *((_DWORD *)v20 + 2) = 1;
    }
    if (v96)
    {
      v21 = 1;
    }
    else if (v9)
    {
      v21 = (v19 & 0x20) != 0;
    }
    else
    {
      v21 = 0;
    }
    v98 = 0;
    v22 = sub_2341A3660((uint64_t)v18, 89, &v98, 0);
    v93 = v19;
    if (!v22)
    {
      if (v98 == -1)
      {
        *(_DWORD *)(v17 + 8) = 0;
        if (sub_2341709C4(*(_QWORD *)v17))
        {
          v34 = 0;
          do
          {
            v35 = sub_2341953E8(*(unint64_t **)v17, v34);
            sub_2341986A8(v35);
            ++v34;
          }
          while (v34 < sub_2341709C4(*(_QWORD *)v17));
        }
        sub_2341953A8(*(uint64_t **)v17);
        goto LABEL_56;
      }
      goto LABEL_145;
    }
    v23 = (unint64_t *)v22;
    if (!sub_2341709C4(v22))
    {
      sub_2341579B4(11, 0, 144, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/policy.c", 245);
      v30 = 0;
      goto LABEL_144;
    }
    sub_234195B10((uint64_t)v23, (uint64_t)sub_23419857C);
    sub_23419598C((uint64_t)v23, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_23419877C);
    if (!sub_2341709C4((uint64_t)v23))
    {
      v28 = *(_DWORD *)(v17 + 8);
LABEL_53:
      sub_2341956BC(*(unint64_t **)v17, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_2341987A8, (uint64_t)sub_234198590, (uint64_t)v23);
      *(_DWORD *)(v17 + 8) = 0;
      if (!v28)
        goto LABEL_54;
LABEL_37:
      v30 = sub_2341953A0();
      if (v30)
      {
        if (sub_2341709C4((uint64_t)v23))
        {
          v31 = 0;
          while (1)
          {
            v32 = (uint64_t *)sub_2341953E8(v23, v31);
            if (sub_23418EBF8((unsigned __int16 *)*v32) != 746
              && !sub_2341985EC((unint64_t **)v17, *v32))
            {
              v33 = sub_234198648(*v32);
              if (!v33 || !sub_2341958E8(v30, (uint64_t)v33))
                break;
            }
            if (++v31 >= sub_2341709C4((uint64_t)v23))
              goto LABEL_45;
          }
          sub_2341986A8(v33);
        }
        else
        {
LABEL_45:
          if (sub_2341986F0((unint64_t **)v17, v30))
            goto LABEL_55;
        }
      }
      goto LABEL_144;
    }
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = sub_2341953E8(v23, v24);
      if (sub_23418EBF8((unsigned __int16 *)*v26) == 746)
        v25 = 1;
      if (v24)
      {
        v27 = (uint64_t *)sub_2341953E8(v23, v24 - 1);
        if (!sub_23418EB9C(*v27, *v26))
        {
          sub_2341579B4(11, 0, 144, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/policy.c", 260);
          v30 = 0;
          v16 = v92;
LABEL_144:
          sub_234195434(v30, (void (*)(uint64_t))sub_2341987F0, (uint64_t)sub_2341986A8);
          sub_23419C62C((uint64_t)v23);
          goto LABEL_145;
        }
      }
      ++v24;
    }
    while (v24 < sub_2341709C4((uint64_t)v23));
    v28 = *(_DWORD *)(v17 + 8);
    if (v25)
      v29 = v21;
    else
      v29 = 0;
    v16 = v92;
    if (!v29)
      goto LABEL_53;
    if (v28)
      goto LABEL_37;
LABEL_54:
    v30 = 0;
LABEL_55:
    sub_234195434(v30, (void (*)(uint64_t))sub_2341987F0, (uint64_t)sub_2341986A8);
    sub_23419C62C((uint64_t)v23);
LABEL_56:
    if (!v97 && !*(_DWORD *)(v17 + 8) && !sub_2341709C4(*(_QWORD *)v17))
    {
      v68 = 0;
      goto LABEL_157;
    }
    if (!sub_2341958E8(v16, v17))
      goto LABEL_139;
    if (!v9)
    {
      v40 = 0;
      goto LABEL_118;
    }
    v36 = v95;
    v98 = 0;
    v37 = sub_2341A3660((uint64_t)v18, 747, &v98, 0);
    v38 = (unint64_t *)v37;
    if (!v37)
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
      if (v98 != -1)
        goto LABEL_115;
    }
    if (!v37)
      goto LABEL_89;
    if (!sub_2341709C4(v37))
    {
      sub_2341579B4(11, 0, 144, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/policy.c", 369);
      goto LABEL_86;
    }
    if (sub_2341709C4((uint64_t)v38))
    {
      v42 = 0;
      while (1)
      {
        v43 = (unsigned __int16 **)sub_2341953E8(v38, v42);
        if (sub_23418EBF8(*v43) == 746 || sub_23418EBF8(v43[1]) == 746)
          break;
        if (++v42 >= sub_2341709C4((uint64_t)v38))
          goto LABEL_70;
      }
LABEL_86:
      v39 = 0;
LABEL_87:
      v40 = 0;
      v41 = v38;
      goto LABEL_115;
    }
LABEL_70:
    sub_234195B10((uint64_t)v38, (uint64_t)sub_2341987FC);
    sub_23419598C((uint64_t)v38, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_234198878);
    if (!v36)
    {
      sub_2341956BC(*(unint64_t **)v17, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_2341987A8, (uint64_t)sub_234198810, (uint64_t)v38);
      sub_234195434(v38, (void (*)(uint64_t))sub_2341988A4, (uint64_t)sub_23419F478);
LABEL_89:
      v38 = sub_2341953A0();
      v39 = 0;
      v40 = 0;
      v41 = 0;
      if (!v38)
        goto LABEL_115;
      goto LABEL_90;
    }
    v44 = sub_2341953A0();
    if (!v44)
      goto LABEL_86;
    v88 = v44;
    if (sub_2341709C4((uint64_t)v38))
    {
      v45 = 0;
      v46 = 0;
      while (1)
      {
        v47 = (uint64_t *)sub_2341953E8(v38, v45);
        v48 = v47;
        if (v46 && !sub_23418EB9C(*v47, v46))
          goto LABEL_81;
        v46 = *v48;
        v49 = sub_2341985EC((unint64_t **)v17, *v48);
        if (v49)
          goto LABEL_80;
        if (*(_DWORD *)(v17 + 8))
          break;
LABEL_81:
        if (++v45 >= sub_2341709C4((uint64_t)v38))
          goto LABEL_82;
      }
      v49 = sub_234198648(*v48);
      v39 = v88;
      if (!v49 || !sub_2341958E8(v88, (uint64_t)v49))
      {
        sub_2341986A8(v49);
        goto LABEL_87;
      }
LABEL_80:
      *((_DWORD *)v49 + 4) = 1;
      goto LABEL_81;
    }
LABEL_82:
    v39 = v88;
    if (!sub_2341986F0((unint64_t **)v17, v88))
      goto LABEL_87;
LABEL_90:
    v89 = v39;
    if (sub_2341709C4(*(_QWORD *)v17))
    {
      v50 = 0;
      do
      {
        v51 = sub_2341953E8(*(unint64_t **)v17, v50);
        if (!*((_DWORD *)v51 + 4))
        {
          v52 = (uint64_t *)v51;
          v53 = (_QWORD *)sub_23419F46C();
          if (!v53)
            goto LABEL_112;
          v54 = v53;
          *v53 = sub_23418EA9C(*v52);
          v55 = sub_23418EA9C(*v52);
          v54[1] = v55;
          if (!*v54 || !v55 || !sub_2341958E8(v38, (uint64_t)v54))
          {
            sub_23419F478((uint64_t)v54);
LABEL_112:
            v40 = 0;
            goto LABEL_114;
          }
        }
        ++v50;
      }
      while (v50 < sub_2341709C4(*(_QWORD *)v17));
    }
    sub_234195B10((uint64_t)v38, (uint64_t)sub_234198864);
    sub_23419598C((uint64_t)v38, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_234198878);
    v56 = sub_2341984BC();
    v40 = v56;
    if (!v56)
      goto LABEL_114;
    *((_DWORD *)v56 + 2) = *(_DWORD *)(v17 + 8);
    if (!sub_2341709C4((uint64_t)v38))
    {
LABEL_110:
      sub_23419598C(*v40, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2341987B8);
      v39 = v89;
      goto LABEL_116;
    }
    v57 = 0;
    v58 = 0;
    while (2)
    {
      v59 = (uint64_t *)sub_2341953E8(v38, v57);
      v60 = v59;
      if (!*(_DWORD *)(v17 + 8) && !sub_2341985EC((unint64_t **)v17, *v59))
      {
LABEL_109:
        if (++v57 >= sub_2341709C4((uint64_t)v38))
          goto LABEL_110;
        continue;
      }
      break;
    }
    if (v58 && !sub_23418EB9C(*v58, v60[1])
      || (v58 = sub_234198648(v60[1])) != 0 && sub_2341958E8((unint64_t *)*v40, (uint64_t)v58))
    {
      if (!sub_2341958E8((unint64_t *)v58[1], *v60))
        goto LABEL_114;
      *v60 = 0;
      goto LABEL_109;
    }
    sub_2341986A8(v58);
LABEL_114:
    v41 = v38;
    v39 = v89;
LABEL_115:
    sub_234198528((unint64_t **)v40);
    v40 = 0;
    v38 = v41;
LABEL_116:
    sub_234195434(v38, (void (*)(uint64_t))sub_2341988A4, (uint64_t)sub_23419F478);
    sub_234195434(v39, (void (*)(uint64_t))sub_2341987F0, (uint64_t)sub_2341986A8);
    v16 = v92;
    if (!v40)
    {
      v17 = 0;
      goto LABEL_145;
    }
    v17 = (uint64_t)v40;
    if ((v93 & 0x20) == 0)
    {
LABEL_118:
      if (v97)
        --v97;
      if (v95)
        --v95;
      if (v96)
        --v96;
      v17 = (uint64_t)v40;
    }
    v98 = 0;
    v61 = (uint64_t *)sub_2341A3660((uint64_t)v18, 401, &v98, 0);
    v62 = v61;
    if (!v61 && v98 != -1)
      goto LABEL_145;
    if (!v61)
      goto LABEL_132;
    v63 = *v61;
    if (!*v62 && !v62[1])
    {
      sub_2341579B4(11, 0, 144, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/policy.c", 548);
LABEL_155:
      sub_23419F218((uint64_t)v62);
LABEL_145:
      v68 = 0;
      *v91 = v18;
      v10 = 42;
      goto LABEL_146;
    }
    if (!sub_2341988B0(v63, &v97))
      goto LABEL_155;
    v64 = sub_2341988B0(v62[1], &v95);
    sub_23419F218((uint64_t)v62);
    if (!v64)
      goto LABEL_145;
LABEL_132:
    v65 = sub_2341A3660((uint64_t)v18, 748, &v98, 0);
    v66 = v65;
    if (!v65 && v98 != -1)
      goto LABEL_145;
    v67 = sub_2341988B0(v65, &v96);
    sub_234144630(v66);
    if (!v67)
      goto LABEL_145;
    --v9;
  }
  while (v9 < v11);
  if (v97)
  {
    v10 = 0;
    v68 = 0;
    goto LABEL_146;
  }
  if (!v90)
  {
    v68 = 0;
    goto LABEL_159;
  }
  v70 = sub_23419590C(v90);
  v68 = v70;
  if (!v70)
    goto LABEL_140;
  sub_234195B10((uint64_t)v70, (uint64_t)sub_23419851C);
  sub_23419598C((uint64_t)v68, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_23419893C);
LABEL_159:
  v71 = sub_2341709C4((uint64_t)v16);
  v72 = v71 - 1;
  v73 = sub_2341953E8(v16, v71 - 1);
  v74 = v73;
  if (!*((_DWORD *)v73 + 2) && !sub_2341709C4(*v73))
    goto LABEL_157;
  v75 = sub_2341709C4((uint64_t)v68);
  if (sub_2341709C4((uint64_t)v68))
  {
    v76 = 0;
    while (1)
    {
      v77 = (unsigned __int16 *)sub_2341953E8(v68, v76);
      if (sub_23418EBF8(v77) == 746)
        break;
      if (++v76 >= sub_2341709C4((uint64_t)v68))
        goto LABEL_165;
    }
LABEL_167:
    v10 = 0;
    goto LABEL_146;
  }
LABEL_165:
  if (!v75 || *((_DWORD *)v74 + 2))
    goto LABEL_167;
  if (sub_2341709C4(*v74))
  {
    v78 = 0;
    do
      *((_DWORD *)sub_2341953E8((unint64_t *)*v74, v78++) + 5) = 1;
    while (v78 < sub_2341709C4(*v74));
  }
  if (!v71)
  {
LABEL_157:
    v10 = 43;
    goto LABEL_146;
  }
  v94 = v71;
  do
  {
    v79 = sub_2341953E8(v16, v72);
    if (sub_2341709C4(*v79))
    {
      v80 = 0;
      v81 = v72 - 1;
      while (1)
      {
        v82 = sub_2341953E8((unint64_t *)*v79, v80);
        if (*((_DWORD *)v82 + 5))
        {
          v83 = v82;
          if (sub_2341709C4(v82[1]))
          {
            if (v72)
            {
              v84 = sub_2341953E8(v92, v72 - 1);
              if (sub_2341709C4(v83[1]))
              {
                v85 = 0;
                do
                {
                  v86 = sub_2341953E8((unint64_t *)v83[1], v85);
                  v87 = sub_2341985EC((unint64_t **)v84, (uint64_t)v86);
                  if (v87)
                    *((_DWORD *)v87 + 5) = 1;
                  ++v85;
                }
                while (v85 < sub_2341709C4(v83[1]));
              }
            }
          }
          else if (sub_23419574C((uint64_t)v68, 0, *v83, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23419893C))
          {
            v10 = 0;
            v16 = v92;
            goto LABEL_146;
          }
        }
        if (++v80 >= sub_2341709C4(*v79))
        {
          v16 = v92;
          v71 = v94;
          goto LABEL_188;
        }
      }
    }
    v81 = v72 - 1;
LABEL_188:
    v10 = 43;
    v72 = v81;
  }
  while (v81 < v71);
LABEL_146:
  sub_234198528((unint64_t **)v17);
  sub_234141344((uint64_t)v68);
  sub_234195434(v16, (void (*)(uint64_t))sub_234198968, (uint64_t)sub_234198528);
  return v10;
}

_QWORD *sub_2341984BC()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_23418E344(0x10uLL);
  if (v0)
  {
    v1 = sub_234195344((uint64_t)sub_234198568);
    *v0 = v1;
    if (!v1)
    {
      sub_234195434(0, (void (*)(uint64_t))sub_2341987F0, (uint64_t)sub_2341986A8);
      sub_23418E3C4(v0);
      return 0;
    }
  }
  return v0;
}

uint64_t sub_23419851C(uint64_t *a1, uint64_t *a2)
{
  return sub_23418EB9C(*a1, *a2);
}

void sub_234198528(unint64_t **a1)
{
  if (a1)
  {
    sub_234195434(*a1, (void (*)(uint64_t))sub_2341987F0, (uint64_t)sub_2341986A8);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_234198568(uint64_t **a1, uint64_t **a2)
{
  return sub_23418EB9C(**a1, **a2);
}

uint64_t sub_23419857C(uint64_t **a1, uint64_t **a2)
{
  return sub_23418EB9C(**a1, **a2);
}

uint64_t sub_234198590(_QWORD *a1, uint64_t a2)
{
  _QWORD v4[2];

  v4[0] = *a1;
  v4[1] = 0;
  if (sub_23419574C(a2, 0, (uint64_t)v4, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23419877C))
    return 0;
  sub_2341986A8(a1);
  return 1;
}

unint64_t *sub_2341985EC(unint64_t **a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD v5[3];

  v5[1] = 0;
  v5[2] = 0;
  v4 = 0;
  v5[0] = a2;
  if (sub_23419574C((uint64_t)*a1, &v4, (uint64_t)v5, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_2341987B8))return sub_2341953E8(*a1, v4);
  else
    return 0;
}

_QWORD *sub_234198648(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;

  v2 = sub_23418E344(0x18uLL);
  if (v2)
  {
    *v2 = sub_23418EA9C(a1);
    v3 = sub_2341953A0();
    v2[1] = v3;
    if (*v2)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4)
    {
      sub_2341986A8(v2);
      return 0;
    }
  }
  return v2;
}

void sub_2341986A8(_QWORD *a1)
{
  if (a1)
  {
    sub_23413F6D0((_QWORD **)*a1);
    sub_234195434((unint64_t *)a1[1], (void (*)(uint64_t))sub_2341987E4, (uint64_t)sub_23413F6D0);
    sub_23418E3C4(a1);
  }
}

unint64_t *sub_2341986F0(unint64_t **a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t *result;

  if (sub_2341709C4((uint64_t)a2))
  {
    v4 = 0;
    while (1)
    {
      v5 = sub_2341953E8(a2, v4);
      result = sub_2341958E8(*a1, (uint64_t)v5);
      if (!result)
        break;
      sub_23419540C(a2, v4++, 0);
      if (v4 >= sub_2341709C4((uint64_t)a2))
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    sub_23419598C((uint64_t)*a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2341987B8);
    return (unint64_t *)1;
  }
  return result;
}

uint64_t sub_23419877C(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t sub_2341987A8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t sub_2341987B8(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t sub_2341987E4(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341987F0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341987FC(uint64_t **a1, uint64_t **a2)
{
  return sub_23418EB9C(**a1, **a2);
}

uint64_t sub_234198810(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v4[2];

  v4[0] = *a1;
  v4[1] = 0;
  result = sub_23419574C(a2, 0, (uint64_t)v4, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_234198878);
  if ((_DWORD)result)
  {
    sub_2341986A8(a1);
    return 1;
  }
  return result;
}

uint64_t sub_234198864(uint64_t a1, uint64_t a2)
{
  return sub_23418EB9C(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a2 + 8));
}

uint64_t sub_234198878(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t sub_2341988A4(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341988B0(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;

  if (!a1)
    return 1;
  if ((*(_BYTE *)(a1 + 5) & 1) != 0)
  {
    sub_2341579B4(11, 0, 144, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/policy.c", 517);
    return 0;
  }
  else
  {
    v4 = 0;
    if (sub_23413E994(&v4, a1))
    {
      if (v4 < *a2)
        *a2 = v4;
    }
    sub_234157348();
    return 1;
  }
}

uint64_t sub_23419893C(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t sub_234198968(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_234198974(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250510D08);
}

uint64_t sub_234198980(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250510D08);
}

uint64_t sub_23419898C()
{
  return sub_234144240((uint64_t)&unk_250510D08);
}

void sub_234198998(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250510D08);
}

uint64_t sub_2341989A4(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t *v7;
  _QWORD *v8;
  char **v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;

  v12 = 0;
  v13 = 0;
  v11 = 0;
  if (!sub_234158804(*(uint64_t **)(a1 + 16))
    || !sub_23415D408(*(uint64_t **)(a1 + 16))
    || !sub_23415D378(*(uint64_t **)(a1 + 16)))
  {
    return 0;
  }
  if (sub_2341414B0(v13) - 672 >= 3)
  {
    v4 = 208;
    goto LABEL_8;
  }
  if (v11 != sub_2341414B8((uint64_t)v13))
  {
    v4 = 215;
LABEL_8:
    sub_2341579B4(11, 0, 112, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/rsa_pss.c", v4);
    return 0;
  }
  v10 = 0;
  v7 = (uint64_t *)sub_234144240((uint64_t)&unk_250510D08);
  if (v7
    && (v8 = sub_23414464C(), (v7[2] = (uint64_t)v8) != 0)
    && sub_23413E838((uint64_t)v8, v11)
    && sub_234198B34(v7, v13)
    && sub_234198B84(v7 + 1, v12)
    && sub_2341414FC((int *)v7, (uint64_t)&unk_250510D08, &v10)
    && (v9 = sub_23418F064(0x390u), sub_2341A8C6C(a2, (uint64_t)v9, 16, v10)))
  {
    v10 = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  sub_234143E94((uint64_t)v7, (uint64_t)&unk_250510D08);
  sub_234141344(v10);
  return v5;
}

uint64_t sub_234198B34(uint64_t *a1, unsigned int *a2)
{
  uint64_t result;

  result = sub_2341A8C44();
  *a1 = result;
  if (result)
  {
    if (sub_2341A8D5C(result, a2))
    {
      return 1;
    }
    else
    {
      sub_2341A8C50(*a1);
      result = 0;
      *a1 = 0;
    }
  }
  return result;
}

BOOL sub_234198B84(uint64_t *a1, unsigned int *a2)
{
  int v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  uint64_t v9;
  int *v10;

  v9 = 0;
  v10 = 0;
  v3 = sub_234198B34((uint64_t *)&v10, a2);
  v4 = v10;
  if (v3)
  {
    if (sub_2341414FC(v10, (uint64_t)&unk_250512CD8, &v9))
    {
      v5 = sub_2341A8C44();
      *a1 = v5;
      if (v5)
      {
        v6 = v5;
        v7 = sub_23418F064(0x38Fu);
        if (sub_2341A8C6C(v6, (uint64_t)v7, 16, v9))
          v9 = 0;
      }
    }
  }
  sub_234141344(v9);
  sub_2341A8C50((uint64_t)v4);
  return *a1 != 0;
}

BOOL sub_234198C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  __int16 v11;
  __int16 v12;
  unsigned int *v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;

  v5 = sub_234198E14(a2);
  v6 = v5;
  if (!v5)
  {
    v11 = 264;
LABEL_23:
    sub_2341579B4(11, 0, 112, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/rsa_pss.c", v11);
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
  {
    v12 = 184;
LABEL_8:
    sub_2341579B4(11, 0, 112, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/rsa_pss.c", v12);
    v10 = 0;
    goto LABEL_9;
  }
  v8 = (uint64_t *)sub_23419917C(v7);
  if (!v8)
  {
    v12 = 190;
    goto LABEL_8;
  }
  v9 = (uint64_t)v8;
  v10 = sub_234198E6C(v8);
  sub_2341A8C50(v9);
LABEL_9:
  v13 = sub_234198E6C(*(uint64_t **)v6);
  v14 = 0;
  if (v10 && v13)
  {
    if (v10 != v13)
    {
      v11 = 276;
      goto LABEL_23;
    }
    v20 = 0;
    v15 = *(_QWORD *)(v6 + 16);
    if (!v15 || !sub_23413E994(&v20, v15) || (v16 = v20, v16 != sub_2341414B8((uint64_t)v10)))
    {
      v11 = 286;
      goto LABEL_23;
    }
    v17 = *(_QWORD *)(v6 + 24);
    if (v17 && sub_23413EAA0(v17) != 1)
    {
      v11 = 295;
      goto LABEL_23;
    }
    v19 = 0;
    if (!sub_234170F20(a1, &v19, (uint64_t)v10, 0, a3)
      || !sub_23415D330(v19)
      || !sub_23415D360(v19))
    {
      goto LABEL_24;
    }
    v14 = sub_23415D3F0(v19) != 0;
  }
LABEL_25:
  sub_234143E94(v6, (uint64_t)&unk_250510D08);
  return v14;
}

uint64_t sub_234198E14(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1 || *(_DWORD *)v1 != 16)
    return 0;
  v2 = *(int **)(v1 + 8);
  v4 = *((_QWORD *)v2 + 1);
  return sub_234141DAC(0, &v4, *v2, (uint64_t)&unk_250510D08);
}

unsigned int *sub_234198E6C(uint64_t *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  __int16 v3;

  if (!a1)
  {
    v3 = 170;
    goto LABEL_6;
  }
  v1 = (unsigned int *)sub_234153224(*a1);
  if (!v1 || (v2 = v1, sub_2341414B0(v1) - 672 >= 3))
  {
    v3 = 175;
LABEL_6:
    sub_2341579B4(11, 0, 112, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/rsa_pss.c", v3);
    return 0;
  }
  return v2;
}

BOOL sub_234198ED4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  _BOOL8 v8;
  uint64_t v9;
  int v10;
  int *v12;
  int v13;
  int *v14;
  int v15;

  v5 = sub_234198E14(a2);
  if (v5)
  {
    if ((int)sub_234144F70(a1, "\n") >= 1
      && sub_2341452E0(a1, a3, 0x80u)
      && (int)sub_234144F70(a1, "Hash Algorithm: ") >= 1)
    {
      v6 = *(_QWORD *)v5 ? sub_23413F374(a1, **(_QWORD **)v5) : sub_234144F70(a1, "sha1 (default)");
      if (v6 >= 1
        && (int)sub_234144F70(a1, "\n") >= 1
        && sub_2341452E0(a1, a3, 0x80u)
        && (int)sub_234144F70(a1, "Mask Algorithm: ") >= 1)
      {
        v9 = *(_QWORD *)(v5 + 8);
        if (v9)
        {
          v7 = (uint64_t *)sub_23419917C(v9);
          if (v7)
          {
            if ((int)sub_23413F374(a1, **(_QWORD **)(v5 + 8)) < 1 || (int)sub_234144F70(a1, " with ") < 1)
              goto LABEL_36;
            v10 = sub_23413F374(a1, *v7);
          }
          else
          {
            v10 = sub_234144F70(a1, "INVALID");
          }
        }
        else
        {
          v10 = sub_234144F70(a1, "mgf1 with sha1 (default)");
          v7 = 0;
        }
        if (v10 >= 1)
        {
          sub_234144F70(a1, "\n");
          if (sub_2341452E0(a1, a3, 0x80u))
          {
            if ((int)sub_234144F70(a1, "Salt Length: 0x") >= 1)
            {
              v12 = *(int **)(v5 + 16);
              v13 = v12 ? sub_234141658(a1, v12) : sub_234144F70(a1, "14 (default)");
              if (v13 >= 1)
              {
                sub_234144F70(a1, "\n");
                if (sub_2341452E0(a1, a3, 0x80u))
                {
                  if ((int)sub_234144F70(a1, "Trailer Field: 0x") >= 1)
                  {
                    v14 = *(int **)(v5 + 24);
                    v15 = v14 ? sub_234141658(a1, v14) : sub_234144F70(a1, "BC (default)");
                    if (v15 >= 1)
                    {
                      sub_234144F70(a1, "\n");
                      v8 = 1;
                      goto LABEL_19;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_36:
        v8 = 0;
        goto LABEL_19;
      }
    }
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = (int)sub_234144F70(a1, " (INVALID PSS PARAMETERS)\n") > 0;
  }
LABEL_19:
  sub_234143E94(v5, (uint64_t)&unk_250510D08);
  sub_2341A8C50((uint64_t)v7);
  return v8;
}

uint64_t sub_23419917C(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v5;

  if (sub_23418EBF8(*(unsigned __int16 **)a1) != 911)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || *(_DWORD *)v2 != 16)
    return 0;
  v3 = *(int **)(v2 + 8);
  v5 = *((_QWORD *)v3 + 1);
  return sub_2341A8C2C(0, &v5, *v3);
}

uint64_t sub_2341991E8(int a1, uint64_t a2)
{
  if (a1 == 2)
    sub_2341A8C50(*(_QWORD *)(*(_QWORD *)a2 + 32));
  return 1;
}

uint64_t sub_234199210(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = sub_234145994();
  if (v7)
  {
    v8 = (uint64_t)v7;
    v9 = sub_234199290((uint64_t)v7, a2, a3, a4);
    sub_234144C64(v8);
    return v9;
  }
  else
  {
    sub_2341579B4(11, 0, 7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/t_x509.c", 75);
    return 0;
  }
}

uint64_t sub_234199290(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  int *v13;
  uint64_t *v14;
  int *v15;
  uint64_t result;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if ((a3 & 0xF0000) == 0x40000)
    v8 = 12;
  else
    v8 = 0;
  if ((a3 & 0xF0000) == 0x40000)
    v9 = 10;
  else
    v9 = 32;
  if (a3)
    v10 = v8;
  else
    v10 = 16;
  v11 = *(uint64_t **)a2;
  if ((a4 & 1) == 0
    && ((int)sub_234144E68(a1, (uint64_t)"Certificate:\n", 13) < 1
     || (int)sub_234144E68(a1, (uint64_t)"    Data:\n", 10) < 1))
  {
    return 0;
  }
  if ((a4 & 2) == 0)
  {
    v12 = sub_2341A4DA8((uint64_t **)a2);
    if ((int)sub_234146138(a1, "%8sVersion: %ld (0x%lx)\n", "", v12 + 1, v12) < 1)
      return 0;
  }
  if ((a4 & 4) == 0)
  {
    if ((int)sub_234144E68(a1, (uint64_t)"        Serial Number:", 22) < 1)
      return 0;
    v13 = (int *)sub_2341A3248(a2);
    v24 = 0;
    if (sub_23413E994(&v24, (uint64_t)v13))
    {
      if ((int)sub_234146138(a1, " %llu (0x%llx)\n", v24, v24) < 1)
        return 0;
    }
    else
    {
      sub_234157348();
      if (v13[1] == 258)
        v20 = " (Negative)";
      else
        v20 = "";
      if ((int)sub_234146138(a1, "\n%12s%s", "", v20) < 1)
        return 0;
      v21 = 0;
      while (v21 < *v13)
      {
        v22 = *(unsigned __int8 *)(*((_QWORD *)v13 + 1) + v21++);
        if (v21 == *v13)
          v23 = 10;
        else
          v23 = 58;
        if ((int)sub_234146138(a1, "%02x%c", v22, v23) <= 0)
          return 0;
      }
    }
  }
  if ((a4 & 8) == 0 && sub_23419979C(a1, (uint64_t *)v11[2], 0) < 1)
    return 0;
  if ((a4 & 0x10) == 0)
  {
    if ((int)sub_234146138(a1, "        Issuer:%c", v9) < 1)
      return 0;
    v14 = (uint64_t *)sub_2341A3128(a2);
    if ((sub_23419755C(a1, v14, v10, a3) & 0x80000000) != 0 || (int)sub_234144E68(a1, (uint64_t)"\n", 1) < 1)
      return 0;
  }
  if ((a4 & 0x20) == 0)
  {
    if ((int)sub_234144E68(a1, (uint64_t)"        Validity\n", 17) < 1
      || (int)sub_234144E68(a1, (uint64_t)"            Not Before: ", 24) < 1)
    {
      return 0;
    }
    v15 = (int *)sub_2341A4F9C(a2);
    result = sub_23413FDBC(a1, v15);
    if (!(_DWORD)result)
      return result;
    if ((int)sub_234144E68(a1, (uint64_t)"\n            Not After : ", 25) < 1)
      return 0;
    v17 = (int *)sub_2341A5028(a2);
    result = sub_23413FDBC(a1, v17);
    if (!(_DWORD)result)
      return result;
    if ((int)sub_234144E68(a1, (uint64_t)"\n", 1) < 1)
      return 0;
  }
  if ((a4 & 0x40) == 0)
  {
    if ((int)sub_234146138(a1, "        Subject:%c", v9) < 1)
      return 0;
    v18 = (uint64_t *)sub_2341A323C(a2);
    if ((sub_23419755C(a1, v18, v10, a3) & 0x80000000) != 0 || (int)sub_234144E68(a1, (uint64_t)"\n", 1) < 1)
      return 0;
  }
  if ((a4 & 0x80) == 0)
  {
    if ((int)sub_234144E68(a1, (uint64_t)"        Subject Public Key Info:\n", 33) < 1
      || (int)sub_234146138(a1, "%12sPublic Key Algorithm: ", "") < 1
      || (int)sub_23413F374(a1, **(_QWORD **)v11[6]) < 1
      || (int)sub_234144F70(a1, "\n") < 1)
    {
      return 0;
    }
    v19 = sub_2341A3424(a2);
    if (v19)
    {
      sub_23415E500(a1, v19, 16);
    }
    else
    {
      sub_234146138(a1, "%12sUnable to load Public Key\n", "");
      sub_234145340(a1);
    }
  }
  if ((a4 & 0x1000) != 0)
    goto LABEL_63;
  if (v11[7])
  {
    if ((int)sub_234146138(a1, "%8sIssuer Unique ID: ", "") < 1)
      return 0;
    result = sub_2341A2AB0(a1, (unsigned int *)v11[7], 0xCu);
    if (!(_DWORD)result)
      return result;
  }
  if (!v11[8])
    goto LABEL_63;
  if ((int)sub_234146138(a1, "%8sSubject Unique ID: ", "") < 1)
    return 0;
  result = sub_2341A2AB0(a1, (unsigned int *)v11[8], 0xCu);
  if (!(_DWORD)result)
    return result;
LABEL_63:
  if ((a4 & 0x100) == 0)
    sub_23419F858(a1, "X509v3 extensions", (unint64_t *)v11[9], a4, 8);
  if ((a4 & 0x200) == 0 && sub_23419979C(a1, *(uint64_t **)(a2 + 8), *(unsigned int **)(a2 + 16)) < 1)
    return 0;
  if ((a4 & 0x400) != 0)
    return 1;
  result = sub_23419998C(a1, *(_QWORD *)(a2 + 136), 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_234199784(uint64_t a1, uint64_t a2)
{
  return sub_234199210(a1, a2, 0, 0);
}

uint64_t sub_234199790(uint64_t a1, uint64_t a2)
{
  return sub_234199290(a1, a2, 0, 0);
}

BOOL sub_23419979C(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  _BOOL8 result;

  if ((int)sub_234144F70(a1, "    Signature Algorithm: ") < 1 || (int)sub_23413F374(a1, *a2) < 1)
    return 0;
  if (sub_23418EBF8((unsigned __int16 *)*a2) != 912 || (result = sub_234198ED4(a1, (uint64_t)a2, 9u)))
  {
    if (a3)
      return sub_2341A2AB0(a1, a3, 9u);
    else
      return (int)sub_234144F70(a1, "\n") > 0;
  }
  return result;
}

uint64_t sub_234199858(uint64_t a1, uint64_t *a2)
{
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v3 = sub_2341A43FC(a2, 0, 0);
  if (!v3)
    return 0;
  v4 = v3;
  if (!*v3)
  {
LABEL_16:
    v10 = 1;
    goto LABEL_19;
  }
  v5 = (uint64_t)(v3 + 1);
  v6 = v3 + 2;
  v7 = (_DWORD)v3 + 1;
  while (1)
  {
    v8 = *(v6 - 1);
    if (!*(v6 - 1))
      break;
    if (v8 == 47)
    {
      if (*v6 - 65 > 0x19 || (v9 = v6[1], v9 != 61) && ((v9 - 65) > 0x19 || v6[2] != 61))
      {
        v8 = 47;
        goto LABEL_15;
      }
      break;
    }
LABEL_15:
    ++v6;
    ++v7;
    if (!v8)
      goto LABEL_16;
  }
  if (v7 - (_DWORD)v5 == sub_234144E68(a1, v5, v7 - (int)v5))
  {
    if (!*(v6 - 1))
      goto LABEL_16;
    if (sub_234144E68(a1, (uint64_t)", ", 2) == 2)
    {
      v8 = *(v6 - 1);
      v5 = (uint64_t)v6;
      goto LABEL_15;
    }
  }
  sub_2341579B4(11, 0, 7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/t_x509.c", 325);
  v10 = 0;
LABEL_19:
  sub_23418E3C4(v4);
  return v10;
}

uint64_t sub_23419998C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  char v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  const char *v17;
  char __s[80];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (*(_QWORD *)a2)
    {
      sub_234146138(a1, "%*sTrusted Uses:\n%*s", a3, "", a3 + 2, "");
      if (sub_2341709C4(*(_QWORD *)a2))
      {
        v6 = 0;
        v7 = 0;
        do
        {
          if ((v7 & 1) != 0)
            sub_234144F70(a1, ", ");
          v8 = sub_2341953E8(*(unint64_t **)a2, v6);
          sub_23418F278(__s, 80, (uint64_t)v8, 0);
          sub_234144F70(a1, __s);
          ++v6;
          v9 = sub_2341709C4(*(_QWORD *)a2);
          v7 = 1;
        }
        while (v6 < v9);
      }
      sub_234144F70(a1, "\n");
    }
    else
    {
      sub_234146138(a1, "%*sNo Trusted Uses.\n", a3, "");
    }
    if (*(_QWORD *)(a2 + 8))
    {
      sub_234146138(a1, "%*sRejected Uses:\n%*s", a3, "", a3 + 2, "");
      if (sub_2341709C4(*(_QWORD *)(a2 + 8)))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((v11 & 1) != 0)
            sub_234144F70(a1, ", ");
          v12 = sub_2341953E8(*(unint64_t **)(a2 + 8), v10);
          sub_23418F278(__s, 80, (uint64_t)v12, 0);
          sub_234144F70(a1, __s);
          ++v10;
          v13 = sub_2341709C4(*(_QWORD *)(a2 + 8));
          v11 = 1;
        }
        while (v10 < v13);
      }
      sub_234144F70(a1, "\n");
    }
    else
    {
      sub_234146138(a1, "%*sNo Rejected Uses.\n", a3, "");
    }
    v14 = *(_QWORD *)(a2 + 16);
    if (v14)
      sub_234146138(a1, "%*sAlias: %.*s\n", a3, "", *(_DWORD *)v14, *(const char **)(v14 + 8));
    if (*(_QWORD *)(a2 + 24))
    {
      sub_234146138(a1, "%*sKey Id: ", a3, "");
      v15 = *(int **)(a2 + 24);
      if (*v15 >= 1)
      {
        v16 = 0;
        do
        {
          if (v16)
            v17 = ":";
          else
            v17 = "";
          sub_234146138(a1, "%s%02X", v17, *(unsigned __int8 *)(*((_QWORD *)v15 + 1) + v16++));
          v15 = *(int **)(a2 + 24);
        }
        while (v16 < *v15);
      }
      sub_234144E68(a1, (uint64_t)"\n", 1);
    }
  }
  return 1;
}

unint64_t *sub_234199C3C(uint64_t a1, int **a2, unint64_t *a3)
{
  char *v5;
  char *v6;
  int v7;
  unint64_t *v8;
  unint64_t *v9;
  unsigned __int8 **v10;
  unint64_t *v12;

  v12 = a3;
  if (!*a2)
    goto LABEL_4;
  v5 = (char *)sub_2341A137C(*((_QWORD *)*a2 + 1), **a2);
  if (!v5)
  {
    sub_23418E3C4(0);
    goto LABEL_11;
  }
  v6 = v5;
  v7 = sub_2341A08E4("keyid", v5, &v12);
  sub_23418E3C4(v6);
  if (v7)
  {
LABEL_4:
    v8 = (unint64_t *)a2[1];
    if (v8)
    {
      v9 = sub_23419A398(0, v8, v12);
      if (!v9)
        goto LABEL_11;
      v12 = v9;
    }
    v10 = (unsigned __int8 **)a2[2];
    if (!v10 || sub_2341A0DE4("serial", v10, &v12))
      return v12;
  }
LABEL_11:
  if (!a3)
    sub_234195434(v12, (void (*)(uint64_t))sub_23419A014, (uint64_t)sub_2341A0A78);
  return 0;
}

uint64_t sub_234199D14(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  __int16 v24;
  _BOOL4 v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  if (sub_2341709C4((uint64_t)a3))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = sub_2341953E8(a3, v4);
      v8 = (const char *)v7[1];
      if (!strcmp(v8, "keyid"))
      {
        v10 = (const char *)v7[2];
        if (v10)
        {
          if (!strcmp(v10, "always"))
            v6 = 2;
          else
            v6 = 1;
        }
        else
        {
          v6 = 1;
        }
      }
      else
      {
        if (strcmp(v8, "issuer"))
        {
          sub_2341579B4(20, 0, 159, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_akey.c", 160);
          sub_234157A5C(2u, v15, v16, v17, v18, v19, v20, v21, (uint64_t)"name=");
          return 0;
        }
        v9 = (const char *)v7[2];
        if (v9)
        {
          if (!strcmp(v9, "always"))
            v5 = 2;
          else
            v5 = 1;
        }
        else
        {
          v5 = 1;
        }
      }
      if (++v4 >= sub_2341709C4((uint64_t)a3))
        goto LABEL_18;
    }
  }
  v6 = 0;
  v5 = 0;
LABEL_18:
  if (!a2)
  {
LABEL_27:
    v23 = 140;
    v24 = 170;
LABEL_28:
    sub_2341579B4(20, 0, v23, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_akey.c", v24);
    return 0;
  }
  v11 = *(_QWORD *)(a2 + 8);
  if (!v11)
  {
    if (*(_DWORD *)a2 == 1)
      return sub_23419A038();
    goto LABEL_27;
  }
  if (v6)
  {
    v12 = sub_2341A3600(*(_QWORD *)(a2 + 8), 0x52u, -1);
    if ((v12 & 0x80000000) != 0 || (v13 = sub_2341A3624(v11, v12)) == 0)
      v14 = 0;
    else
      v14 = sub_23419E1A4((uint64_t)v13);
    if (v6 == 2 && !v14)
    {
      v23 = 155;
      v24 = 183;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = 0;
  }
  v25 = v5 != 0;
  if (v14)
    v25 = 0;
  if (v5 == 2 || v25)
  {
    v30 = (int *)sub_2341A3128(v11);
    v29 = sub_2341AAC8C(v30);
    v31 = sub_2341A3248(v11);
    v32 = sub_23413E408(v31);
    v27 = v32;
    if (v29 && v32)
    {
      v33 = sub_23419A038();
      if (v33)
      {
        v26 = (_QWORD *)v33;
        v34 = sub_2341953A0();
        if (v34)
        {
          v28 = v34;
          v35 = sub_23419D854();
          if (v35)
          {
            v36 = v35;
            if (sub_2341958E8(v28, v35))
            {
              *(_DWORD *)v36 = 4;
              *(_QWORD *)(v36 + 8) = v29;
              goto LABEL_39;
            }
          }
        }
      }
    }
    else
    {
      sub_2341579B4(20, 0, 154, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_akey.c", 192);
    }
LABEL_48:
    sub_2341AAC80(v29);
    sub_234144630(v27);
    sub_234144630(v14);
    return 0;
  }
  v26 = (_QWORD *)sub_23419A038();
  v27 = 0;
  v28 = 0;
  v29 = 0;
  if (!v26)
    goto LABEL_48;
LABEL_39:
  v26[1] = v28;
  v26[2] = v27;
  *v26 = v14;
  return (uint64_t)v26;
}

uint64_t sub_23419A014(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419A020(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250510E00);
}

uint64_t sub_23419A02C(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250510E00);
}

uint64_t sub_23419A038()
{
  return sub_234144240((uint64_t)&unk_250510E00);
}

void sub_23419A044(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250510E00);
}

unint64_t *sub_23419A054(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  int v14;

  v5 = sub_2341953A0();
  if (!v5 || !sub_2341709C4((uint64_t)a3))
    return v5;
  v6 = 0;
  while (1)
  {
    v7 = sub_2341953E8(a3, v6);
    if (sub_2341A1598((const char *)v7[1], "email"))
    {
      v8 = (const char *)v7[2];
      if (v8)
      {
        if (!strcmp(v8, "copy"))
        {
          v12 = a2;
          v13 = v5;
          v14 = 0;
          goto LABEL_15;
        }
      }
    }
    if (!sub_2341A1598((const char *)v7[1], "email"))
      break;
    v10 = (const char *)v7[2];
    if (!v10 || strcmp(v10, "move"))
      break;
    v12 = a2;
    v13 = v5;
    v14 = 1;
LABEL_15:
    if (!sub_23419ACD8(v12, v13, v14))
      goto LABEL_19;
LABEL_16:
    if (++v6 >= sub_2341709C4((uint64_t)a3))
      return v5;
  }
  v11 = sub_23419A900(0, v9, a2, (uint64_t)v7, 0);
  if (v11 && sub_2341958E8(v5, v11))
    goto LABEL_16;
  sub_23419D860(v11);
LABEL_19:
  sub_234195434(v5, (void (*)(uint64_t))sub_23419AE0C, (uint64_t)sub_23419D860);
  return 0;
}

unint64_t *sub_23419A1AC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;

  v5 = sub_2341953A0();
  if (!v5 || !sub_2341709C4((uint64_t)a3))
    return v5;
  v6 = 0;
  while (1)
  {
    v7 = sub_2341953E8(a3, v6);
    if (!sub_2341A1598((const char *)v7[1], "issuer") || (v9 = (const char *)v7[2]) == 0 || strcmp(v9, "copy"))
    {
      v10 = sub_23419A900(0, v8, a2, (uint64_t)v7, 0);
      if (!v10 || !sub_2341958E8(v5, v10))
      {
        sub_23419D860(v10);
        goto LABEL_26;
      }
      goto LABEL_9;
    }
    if (!a2)
      goto LABEL_23;
    if (*(_DWORD *)a2 != 1)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if (!v11)
      {
LABEL_23:
        sub_2341579B4(20, 0, 141, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_alt.c", 305);
        goto LABEL_26;
      }
      v12 = sub_2341A3600(v11, 0x55u, -1);
      if ((v12 & 0x80000000) == 0)
        break;
    }
LABEL_9:
    if (++v6 >= sub_2341709C4((uint64_t)a3))
      return v5;
  }
  v13 = sub_2341A3624(*(_QWORD *)(a2 + 8), v12);
  if (!v13 || (v14 = sub_23419E1A4((uint64_t)v13)) == 0)
  {
    sub_2341579B4(20, 0, 136, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_alt.c", 318);
    v15 = 0;
    goto LABEL_25;
  }
  v15 = (unint64_t *)v14;
  if (!sub_2341709C4(v14))
  {
LABEL_21:
    sub_23419D890((uint64_t)v15);
    goto LABEL_9;
  }
  v16 = 0;
  while (1)
  {
    v17 = sub_2341953E8(v15, v16);
    if (!sub_2341958E8(v5, (uint64_t)v17))
      break;
    sub_23419540C(v15, v16++, 0);
    if (v16 >= sub_2341709C4((uint64_t)v15))
      goto LABEL_21;
  }
LABEL_25:
  sub_23419D890((uint64_t)v15);
LABEL_26:
  sub_234195434(v5, (void (*)(uint64_t))sub_23419AE0C, (uint64_t)sub_23419D860);
  return 0;
}

unint64_t *sub_23419A398(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;

  if (sub_2341709C4((uint64_t)a2))
  {
    v5 = 0;
    v6 = a3;
    while (1)
    {
      v7 = sub_2341953E8(a2, v5);
      v8 = sub_23419A44C((uint64_t)v7, (uint64_t)v7, v6);
      if (!((unint64_t)a3 | (unint64_t)v8))
        break;
      v6 = v8;
      if (v8)
      {
        if (++v5 < sub_2341709C4((uint64_t)a2))
          continue;
      }
      return v6;
    }
    sub_234195434(v6, (void (*)(uint64_t))sub_23419ACCC, (uint64_t)sub_2341A0A78);
    return 0;
  }
  else
  {
    v6 = a3;
    if (!a3)
      return sub_2341953A0();
  }
  return v6;
}

unint64_t *sub_23419A44C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  const char *v3;
  int *v4;
  const char *v5;
  unint64_t *result;
  char *v7;
  int *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  char v12[5];
  unint64_t *v13;
  char __str[256];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v13 = a3;
  switch(*(_DWORD *)a2)
  {
    case 0:
      v3 = "othername";
      goto LABEL_9;
    case 1:
      v4 = *(int **)(a2 + 8);
      v5 = "email";
      goto LABEL_11;
    case 2:
      v4 = *(int **)(a2 + 8);
      v5 = "DNS";
      goto LABEL_11;
    case 3:
      v3 = "X400Name";
      goto LABEL_9;
    case 4:
      result = (unint64_t *)sub_2341A43FC(*(uint64_t **)(a2 + 8), __str, 256);
      if (!result)
        return result;
      v3 = "DirName";
      goto LABEL_20;
    case 5:
      v3 = "EdiPartyName";
LABEL_9:
      v7 = "<unsupported>";
      goto LABEL_21;
    case 6:
      v4 = *(int **)(a2 + 8);
      v5 = "URI";
LABEL_11:
      if (!sub_2341A0A60(v5, v4, &v13))
        return 0;
      return v13;
    case 7:
      v8 = *(int **)(a2 + 8);
      v9 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
      v10 = *v8;
      if (v10 == 16)
      {
        __str[0] = 0;
        snprintf(v12, 5uLL, "%X", __rev16(*(unsigned __int16 *)v9));
        sub_23418EA40(__str, v12, 0x100uLL);
        v11 = 0;
        do
        {
          sub_23418EA40(__str, ":", 0x100uLL);
          snprintf(v12, 5uLL, "%X", __rev16(*(unsigned __int16 *)&v9[v11 + 2]));
          sub_23418EA40(__str, v12, 0x100uLL);
          v11 += 2;
        }
        while ((_DWORD)v11 != 14);
      }
      else
      {
        if (v10 != 4)
        {
          v3 = "IP Address";
          v7 = "<invalid>";
          goto LABEL_21;
        }
        snprintf(__str, 0x100uLL, "%d.%d.%d.%d", *v9, v9[1], v9[2], v9[3]);
      }
      v3 = "IP Address";
LABEL_20:
      v7 = __str;
LABEL_21:
      if (sub_2341A08E4(v3, v7, &v13))
        return v13;
      else
        return 0;
    case 8:
      sub_23413F36C(__str, 256, *(_QWORD *)(a2 + 8));
      v3 = "Registered ID";
      goto LABEL_20;
    default:
      return v13;
  }
}

uint64_t sub_23419A684(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  switch(*(_DWORD *)a2)
  {
    case 0:
      sub_234146138(a1, "othername:<unsupported>");
      return 1;
    case 1:
      sub_234146138(a1, "email:");
      goto LABEL_9;
    case 2:
      sub_234146138(a1, "DNS:");
      goto LABEL_9;
    case 3:
      sub_234146138(a1, "X400Name:<unsupported>");
      return 1;
    case 4:
      sub_234146138(a1, "DirName: ");
      sub_23419755C(a1, *(uint64_t **)(a2 + 8), 0, 8520479);
      return 1;
    case 5:
      sub_234146138(a1, "EdiPartyName:<unsupported>");
      return 1;
    case 6:
      sub_234146138(a1, "URI:");
LABEL_9:
      sub_23413FC94(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      v4 = *(int **)(a2 + 8);
      v5 = *((_QWORD *)v4 + 1);
      v6 = *v4;
      if (v6 == 16)
      {
        sub_234146138(a1, "IP Address");
        v7 = 0;
        do
        {
          sub_234146138(a1, ":%X", __rev16(*(unsigned __int16 *)(v5 + v7)));
          v7 += 2;
        }
        while ((_DWORD)v7 != 16);
        sub_234144F70(a1, "\n");
      }
      else if (v6 == 4)
      {
        sub_234146138(a1, "IP Address:%d.%d.%d.%d");
      }
      else
      {
        sub_234146138(a1, "IP Address:<invalid>");
      }
      break;
    case 8:
      sub_234146138(a1, "Registered ID");
      sub_23413F374(a1, *(_QWORD *)(a2 + 8));
      break;
    default:
      return 1;
  }
  return 1;
}

unint64_t *sub_23419A828(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_2341953A0();
  if (v5 && sub_2341709C4((uint64_t)a3))
  {
    v6 = 0;
    while (1)
    {
      v7 = sub_2341953E8(a3, v6);
      v9 = sub_23419A900(0, v8, a2, (uint64_t)v7, 0);
      if (!v9 || !sub_2341958E8(v5, v9))
        break;
      if (++v6 >= sub_2341709C4((uint64_t)a3))
        return v5;
    }
    sub_23419D860(v9);
    sub_234195434(v5, (void (*)(uint64_t))sub_23419AE0C, (uint64_t)sub_23419D860);
    return 0;
  }
  return v5;
}

uint64_t sub_23419A8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23419A900(0, a2, a2, a3, 0);
}

uint64_t sub_23419A900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char *v5;
  const char *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t *v23;
  uint64_t v24;
  char **v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = *(char **)(a4 + 16);
  if (!v5)
  {
    sub_2341579B4(20, 0, 137, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_alt.c", 542);
    return 0;
  }
  v9 = *(const char **)(a4 + 8);
  if (!sub_2341A1598(v9, "email"))
  {
    if (sub_2341A1598(v9, "URI"))
    {
      v10 = 6;
      goto LABEL_17;
    }
    if (sub_2341A1598(v9, "DNS"))
    {
      v10 = 2;
      goto LABEL_17;
    }
    if (sub_2341A1598(v9, "RID"))
    {
      v10 = 8;
      goto LABEL_17;
    }
    if (sub_2341A1598(v9, "IP"))
    {
      v10 = 7;
      goto LABEL_17;
    }
    if (sub_2341A1598(v9, "dirName"))
    {
      v10 = 4;
      goto LABEL_17;
    }
    if (sub_2341A1598(v9, "otherName"))
    {
      v10 = 0;
      goto LABEL_17;
    }
    sub_2341579B4(20, 0, 160, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_alt.c", 562);
    sub_234157A5C(2u, v43, v44, v45, v46, v47, v48, v49, (uint64_t)"name=");
    return 0;
  }
  v10 = 1;
LABEL_17:
  v11 = a1;
  if (a1 || (v11 = sub_23419D854()) != 0)
  {
    switch(v10)
    {
      case 0:
        v14 = strchr(v5, 59);
        if (v14)
        {
          v15 = v14;
          v16 = sub_23419D80C();
          if (v16)
          {
            v17 = v16;
            v18 = (char *)sub_23418E928(v5, v15 - v5);
            if (v18)
            {
              v19 = v18;
              sub_23413F6D0(*(_QWORD ***)v17);
              *(_QWORD *)v17 = sub_23418EF98(v19, 0);
              sub_23418E3C4(v19);
              if (*(_QWORD *)v17)
              {
                sub_234144828(*(_QWORD *)(v17 + 8));
                v20 = sub_2341966F0(v15 + 1, a3);
                *(_QWORD *)(v17 + 8) = v20;
                if (v20)
                {
                  *(_DWORD *)v11 = 0;
                  goto LABEL_35;
                }
              }
            }
            sub_23419D818(v17);
          }
        }
        v21 = 148;
        v22 = 517;
        goto LABEL_49;
      case 1:
      case 2:
      case 6:
        v12 = sub_23414470C();
        if (v12)
        {
          v13 = strlen(v5);
          if (sub_2341411A4((uint64_t)v12, v5, v13))
          {
            *(_DWORD *)v11 = v10;
            *(_QWORD *)(v11 + 8) = v12;
            return v11;
          }
        }
        sub_234141344((uint64_t)v12);
        goto LABEL_50;
      case 4:
        v17 = sub_2341AAC74();
        if (!v17)
          goto LABEL_48;
        v23 = (unint64_t *)sub_23419BAE4(a3, (uint64_t)v5);
        if (v23)
        {
          if (sub_2341A21FC(v17, v23, 4097))
          {
            *(_DWORD *)v11 = 4;
LABEL_35:
            *(_QWORD *)(v11 + 8) = v17;
            return v11;
          }
        }
        else
        {
          sub_2341579B4(20, 0, 153, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_alt.c", 617);
          sub_234157A5C(2u, v35, v36, v37, v38, v39, v40, v41, (uint64_t)"section=");
        }
LABEL_48:
        sub_2341AAC80(v17);
        v21 = 105;
        v22 = 510;
LABEL_49:
        sub_2341579B4(20, 0, v21, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_alt.c", v22);
        goto LABEL_50;
      case 7:
        *(_DWORD *)v11 = 7;
        if (a5)
          v24 = sub_2341A202C(v5);
        else
          v24 = sub_2341A1F9C(v5);
        *(_QWORD *)(v11 + 8) = v24;
        if (v24)
          return v11;
        v26 = 100;
        v27 = 502;
        goto LABEL_44;
      case 8:
        v25 = sub_23418EF98(v5, 0);
        if (v25)
        {
          *(_DWORD *)v11 = 8;
          *(_QWORD *)(v11 + 8) = v25;
          return v11;
        }
        v26 = 101;
        v27 = 485;
LABEL_44:
        sub_2341579B4(20, 0, v26, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_alt.c", v27);
        sub_234157A5C(2u, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"value=");
LABEL_50:
        if (!a1)
          sub_23419D860(v11);
        break;
      default:
        v21 = 161;
        v22 = 522;
        goto LABEL_49;
    }
    return 0;
  }
  return v11;
}

uint64_t sub_23419ACCC(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419ACD8(uint64_t a1, unint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t *v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    if (*(_DWORD *)a1 == 1)
      return 1;
    if (*(_QWORD *)(a1 + 16))
    {
      v6 = sub_2341A323C(*(_QWORD *)(a1 + 16));
      goto LABEL_8;
    }
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      v6 = sub_2341A47A8(v7);
LABEL_8:
      v8 = (uint64_t *)v6;
      v9 = -1;
      while (1)
      {
        v10 = sub_2341A84C4(v8, 0x30u, v9);
        if ((v10 & 0x80000000) != 0)
          return 1;
        v9 = v10;
        v11 = sub_2341A8458((unint64_t **)v8, v10);
        v12 = (int *)sub_2340DE85C((uint64_t)v11);
        v13 = sub_234141298(v12);
        if (a3)
        {
          sub_2341A850C((uint64_t)v8, v9);
          sub_2341AAC40((uint64_t)v11);
          --v9;
        }
        if (!v13)
          goto LABEL_17;
        v14 = sub_23419D854();
        v15 = v14;
        if (!v14)
          goto LABEL_18;
        *(_QWORD *)(v14 + 8) = v13;
        *(_DWORD *)v14 = 1;
        if (!sub_2341958E8(a2, v14))
        {
          v13 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  sub_2341579B4(20, 0, 145, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_alt.c", 383);
  v13 = 0;
LABEL_17:
  v15 = 0;
LABEL_18:
  sub_23419D860(v15);
  sub_234144630((uint64_t)v13);
  return 0;
}

uint64_t sub_23419AE0C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

unint64_t *sub_23419AE18(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t *v5;

  v5 = a3;
  sub_2341A0AB8("CA", *(_DWORD *)a2, &v5);
  sub_2341A0DE4("pathlen", *(unsigned __int8 ***)(a2 + 8), &v5);
  return v5;
}

uint64_t sub_23419AE6C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_234144240((uint64_t)&unk_250510F68);
  if (!v4 || !sub_2341709C4((uint64_t)a3))
    return v4;
  v5 = 0;
  while (1)
  {
    v6 = sub_2341953E8(a3, v5);
    v7 = (const char *)v6[1];
    if (strcmp(v7, "CA"))
      break;
    if (!sub_2341A0F94((uint64_t)v6, (_DWORD *)v4))
      goto LABEL_12;
LABEL_9:
    if (++v5 >= sub_2341709C4((uint64_t)a3))
      return v4;
  }
  if (!strcmp(v7, "pathlen"))
  {
    if (!sub_2341A1024((uint64_t)v6, (uint64_t *)(v4 + 8)))
      goto LABEL_12;
    goto LABEL_9;
  }
  sub_2341579B4(20, 0, 123, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_bcons.c", 126);
  sub_234157A5C(6u, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"section:");
LABEL_12:
  sub_234143E94(v4, (uint64_t)&unk_250510F68);
  return 0;
}

uint64_t sub_23419AFB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250510F68);
}

uint64_t sub_23419AFC4(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250510F68);
}

uint64_t sub_23419AFD0()
{
  return sub_234144240((uint64_t)&unk_250510F68);
}

void sub_23419AFDC(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250510F68);
}

unint64_t *sub_23419AFE8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t *v7;

  v7 = a3;
  v3 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(v3 + 8))
  {
    do
    {
      if (sub_23413DEB8(a2, *(_DWORD *)v3))
        sub_2341A08E4(*(const char **)(v3 + 8), 0, &v7);
      v5 = *(_QWORD *)(v3 + 32);
      v3 += 24;
    }
    while (v5);
    return v7;
  }
  return a3;
}

_QWORD *sub_23419B050(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = sub_23414468C();
  if (v5 && sub_2341709C4((uint64_t)a3))
  {
    v6 = 0;
    while (1)
    {
      v7 = sub_2341953E8(a3, v6);
      v8 = *(_QWORD *)(a1 + 96);
      v9 = *(const char **)(v8 + 8);
      if (!v9)
        break;
      v10 = (const char *)v7[1];
      v11 = (const char **)(v8 + 16);
      while (strcmp(*v11, v10) && strcmp(v9, v10))
      {
        v9 = v11[2];
        v11 += 3;
        if (!v9)
          goto LABEL_14;
      }
      if (!sub_23413DDA0((uint64_t)v5, *((_DWORD *)v11 - 4), 1))
        goto LABEL_15;
      if (!*(v11 - 1))
        break;
      if (++v6 >= sub_2341709C4((uint64_t)a3))
        return v5;
    }
LABEL_14:
    sub_2341579B4(20, 0, 156, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_bitst.c", 123);
    sub_234157A5C(6u, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"section:");
LABEL_15:
    sub_234144630((uint64_t)v5);
    return 0;
  }
  return v5;
}

uint64_t sub_23419B194(uint64_t a1, __int128 *a2, const char *a3, const char *a4)
{
  __int128 *v5;
  int v7;
  int v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;

  v5 = a2;
  v21 = (char *)a4;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  if (!a2)
  {
    v18 = 0uLL;
    v19 = 0uLL;
    v5 = &v18;
    *(_QWORD *)&v20 = 0;
    *((_QWORD *)&v20 + 1) = a1;
  }
  v7 = sub_23419B2A8((const char **)&v21);
  v8 = sub_23419B310((const char **)&v21);
  if (v8)
    return sub_23419B3BC(a3, v21, v7, v8, (uint64_t)v5);
  v10 = sub_23418ED44(a3);
  result = sub_23419B574(a1, (uint64_t)v5, v10, v7, v21);
  if (!result)
  {
    sub_2341579B4(20, 0, 110, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_conf.c", 102);
    sub_234157A5C(4u, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"name=");
    return 0;
  }
  return result;
}

double sub_23419B28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)a1 = a6;
  return result;
}

uint64_t sub_23419B2A8(const char **a1)
{
  const char *v2;
  const char *v4;
  int v5;

  v2 = *a1;
  if (strlen(*a1) < 9 || strncmp(v2, "critical,", 9uLL))
    return 0;
  v4 = v2 + 8;
  do
    v5 = *(unsigned __int8 *)++v4;
  while (sub_23418E6A4(v5));
  *a1 = v4;
  return 1;
}

uint64_t sub_23419B310(const char **a1)
{
  const char *v2;
  size_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *a1;
  v3 = strlen(*a1);
  if (v3 < 4)
    return 0;
  v4 = v3;
  v5 = 4;
  if (!strncmp(v2, "DER:", 4uLL))
  {
    v6 = 1;
  }
  else
  {
    if (v4 < 5)
      return 0;
    v5 = 5;
    if (strncmp(v2, "ASN1:", 5uLL))
      return 0;
    v6 = 2;
  }
  v7 = (uint64_t)&v2[v5 - 1];
  do
    v8 = *(unsigned __int8 *)++v7;
  while (sub_23418E6A4(v8));
  *a1 = (const char *)v7;
  return v6;
}

uint64_t sub_23419B3BC(const char *a1, char *a2, int a3, int a4, uint64_t a5)
{
  char **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int *v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  _QWORD *v27;

  v26 = 0;
  v9 = sub_23418EF98(a1, 0);
  if (!v9)
  {
    sub_2341579B4(20, 0, 113, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_conf.c", 275);
    v18 = "name=";
LABEL_15:
    sub_234157A5C(2u, v11, v12, v13, v14, v15, v16, v17, (uint64_t)v18);
    v10 = 0;
    goto LABEL_16;
  }
  if (a4 == 2)
  {
    v19 = (int *)sub_2341966F0(a2, a5);
    if (!v19)
      goto LABEL_14;
    v20 = (uint64_t)v19;
    v27 = 0;
    v21 = sub_234144810(v19, (void **)&v27);
    sub_234144828(v20);
    if ((v21 & 0x80000000) != 0)
      goto LABEL_14;
    v26 = v21;
    v10 = v27;
    if (!v27)
      goto LABEL_14;
  }
  else if (a4 != 1 || (v10 = sub_2341A1468(a2, &v26)) == 0)
  {
LABEL_14:
    sub_2341579B4(20, 0, 116, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_conf.c", 287);
    v18 = "value=";
    goto LABEL_15;
  }
  if (v26 >> 31)
  {
    sub_2341579B4(20, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_conf.c", 293);
LABEL_16:
    v23 = 0;
    goto LABEL_17;
  }
  v22 = sub_234144628();
  v23 = (uint64_t)v22;
  if (!v22)
  {
LABEL_17:
    v24 = 0;
    goto LABEL_18;
  }
  sub_234141374((uint64_t)v22, (uint64_t)v10, v26);
  v24 = sub_2341A5674(0, (uint64_t)v9, a3, v23);
  v10 = 0;
LABEL_18:
  sub_23413F6D0((_QWORD **)v9);
  sub_234144630(v23);
  sub_23418E3C4(v10);
  return v24;
}

uint64_t sub_23419B574(uint64_t a1, uint64_t a2, unsigned int a3, int a4, const char *a5)
{
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  int v14;
  __int16 v15;
  uint64_t (*v17)(unint64_t *, uint64_t, const char *);
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!a3)
  {
    v14 = 158;
    v15 = 137;
    goto LABEL_10;
  }
  v10 = sub_23419DFB4(a3);
  if (!v10)
  {
    v14 = 157;
    v15 = 141;
    goto LABEL_10;
  }
  v11 = (uint64_t)v10;
  if (v10[9])
  {
    if (*a5 != 64)
    {
      v12 = (uint64_t)sub_2341A10B0(a5);
      v13 = (unint64_t *)v12;
      if (!v12)
        goto LABEL_19;
      goto LABEL_16;
    }
    if (a1)
    {
      v12 = sub_23414B210(a1, (uint64_t)(a5 + 1));
      v13 = 0;
      if (!v12)
        goto LABEL_19;
LABEL_16:
      if (sub_2341709C4(v12))
      {
        v18 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 72))(v11, a2, v12);
        sub_234195434(v13, (void (*)(uint64_t))sub_23419BB24, (uint64_t)sub_2341A0A78);
        if (v18)
          goto LABEL_18;
        return 0;
      }
LABEL_19:
      sub_2341579B4(20, 0, 121, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_conf.c", 160);
      sub_23418F154(a3);
      sub_234157A5C(4u, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"name=");
      sub_234195434(v13, (void (*)(uint64_t))sub_23419BB24, (uint64_t)sub_2341A0A78);
      return 0;
    }
    v14 = 139;
    v15 = 151;
LABEL_10:
    sub_2341579B4(20, 0, v14, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_conf.c", v15);
    return 0;
  }
  v17 = (uint64_t (*)(unint64_t *, uint64_t, const char *))v10[7];
  if (!v17)
  {
    v17 = (uint64_t (*)(unint64_t *, uint64_t, const char *))v10[11];
    if (!v17)
    {
      sub_2341579B4(20, 0, 115, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_conf.c", 187);
      sub_23418F154(a3);
      sub_234157A5C(2u, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"name=");
      return 0;
    }
    if (!*(_QWORD *)(a2 + 40))
    {
      v14 = 139;
      v15 = 180;
      goto LABEL_10;
    }
  }
  v18 = (int *)v17(v10, a2, a5);
  if (!v18)
    return 0;
LABEL_18:
  v19 = sub_23419B8EC(v11, a3, a4, v18);
  sub_234143E94((uint64_t)v18, *(_QWORD *)(v11 + 8));
  return v19;
}

uint64_t sub_23419B7CC(uint64_t a1, __int128 *a2, unsigned int a3, const char *a4)
{
  __int128 *v5;
  int v7;
  int v8;
  int v9;
  char **v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;

  v5 = a2;
  v15 = (char *)a4;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  if (!a2)
  {
    v12 = 0uLL;
    v13 = 0uLL;
    v5 = &v12;
    *(_QWORD *)&v14 = 0;
    *((_QWORD *)&v14 + 1) = a1;
  }
  v7 = sub_23419B2A8((const char **)&v15);
  v8 = sub_23419B310((const char **)&v15);
  if (!v8)
    return sub_23419B574(a1, (uint64_t)v5, a3, v7, v15);
  v9 = v8;
  v10 = sub_23418F154(a3);
  return sub_23419B3BC((const char *)v10, v15, v7, v9, (uint64_t)v5);
}

uint64_t sub_23419B87C(unsigned int a1, int a2, int *a3)
{
  unint64_t *v6;

  v6 = sub_23419DFB4(a1);
  if (v6)
    return sub_23419B8EC((uint64_t)v6, a1, a2, a3);
  sub_2341579B4(20, 0, 157, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_conf.c", 224);
  return 0;
}

uint64_t sub_23419B8EC(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v12 = 0;
  v6 = sub_234143140(a4, &v12, *(_QWORD *)(a1 + 8));
  if (v6 < 0)
    return 0;
  v7 = v6;
  v8 = sub_234144628();
  if (!v8)
  {
    sub_23418E3C4(v12);
    return 0;
  }
  v9 = (uint64_t)v8;
  sub_234141374((uint64_t)v8, (uint64_t)v12, v7);
  v10 = sub_2341A5600(0, a2, a3, v9);
  sub_234144630(v9);
  return v10;
}

uint64_t sub_23419B984(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t **a4)
{
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  int *v11;
  uint64_t v12;
  unint64_t *v13;

  result = sub_23414B210(a1, a3);
  if (result)
  {
    v8 = (unint64_t *)result;
    if (sub_2341709C4(result))
    {
      v9 = 0;
      while (1)
      {
        v10 = sub_2341953E8(v8, v9);
        v11 = (int *)sub_23419B194(a1, a2, (const char *)v10[1], (const char *)v10[2]);
        if (!v11)
          break;
        v12 = (uint64_t)v11;
        if (a4)
        {
          v13 = sub_2341A5520(a4, v11, -1);
          sub_2341AAC00(v12);
          if (!v13)
            return 0;
        }
        else
        {
          sub_2341AAC00((uint64_t)v11);
        }
        if (++v9 >= sub_2341709C4((uint64_t)v8))
          return 1;
      }
      sub_2341AAC00(0);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_23419BA54(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t **a4)
{
  if (a4)
    a4 = (unint64_t **)(*a4 + 9);
  return sub_23419B984(a1, a2, a3, a4);
}

uint64_t sub_23419BA64(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t **a4)
{
  if (a4)
    a4 = (unint64_t **)(*a4 + 6);
  return sub_23419B984(a1, a2, a3, a4);
}

uint64_t sub_23419BA74(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;

  v9 = 0;
  if (a4)
    v5 = (unint64_t **)&v9;
  else
    v5 = 0;
  v6 = sub_23419B984(a1, a2, a3, v5);
  v7 = v6;
  if (a4 && (_DWORD)v6)
  {
    v7 = sub_2341A4AFC(a4, v9);
    sub_234195434((unint64_t *)v9, (void (*)(uint64_t))sub_23419BB30, (uint64_t)sub_2341AAC00);
  }
  return v7;
}

uint64_t sub_23419BAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return sub_23414B210(v2, a2);
  sub_2341579B4(20, 0, 147, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_conf.c", 398);
  return 0;
}

uint64_t sub_23419BB24(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419BB30(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419BB3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  unint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v22;
  unint64_t v24;

  v5 = (unint64_t *)a2;
  if (sub_2341709C4(a2))
  {
    v6 = 0;
    v7 = a4 + 4;
    v22 = (uint64_t)v5;
    do
    {
      v24 = v6;
      v8 = (uint64_t *)sub_2341953E8(v5, v6);
      sub_234146138(a3, "%*sPolicy: ", a4, "");
      sub_23413F374(a3, *v8);
      sub_234144F70(a3, "\n");
      v9 = (unint64_t *)v8[1];
      if (v9 && sub_2341709C4(v8[1]))
      {
        v10 = 0;
        do
        {
          v11 = sub_2341953E8(v9, v10);
          v12 = sub_23418EBF8((unsigned __int16 *)*v11);
          if (v12 == 165)
          {
            sub_234146138(a3, "%*sUser Notice:\n", a4 + 2, "");
            v13 = (uint64_t *)v11[1];
            v14 = *v13;
            if (*v13)
            {
              sub_234146138(a3, "%*sOrganization: %.*s\n", v7, "", **(_DWORD **)v14, *(const char **)(*(_QWORD *)v14 + 8));
              v15 = sub_2341709C4(*(_QWORD *)(v14 + 8));
              v16 = "s";
              if (v15 <= 1)
                v16 = "";
              sub_234146138(a3, "%*sNumber%s: ", v7, "", v16);
              if (sub_2341709C4(*(_QWORD *)(v14 + 8)))
              {
                v17 = 0;
                do
                {
                  v18 = sub_2341953E8(*(unint64_t **)(v14 + 8), v17);
                  if (v17)
                    sub_234144F70(a3, ", ");
                  if (v18)
                  {
                    v19 = (char *)sub_2341A0C0C(0, (unsigned __int8 **)v18);
                    if (!v19)
                      goto LABEL_26;
                    v20 = v19;
                    sub_234144F70(a3, v19);
                    sub_23418E3C4(v20);
                  }
                  else
                  {
                    sub_234144F70(a3, "(null)");
                  }
                  ++v17;
                }
                while (v17 < sub_2341709C4(*(_QWORD *)(v14 + 8)));
              }
              sub_234144F70(a3, "\n");
            }
            if (v13[1])
              sub_234146138(a3, "%*sExplicit Text: %.*s\n");
          }
          else if (v12 == 164)
          {
            sub_234146138(a3, "%*sCPS: %.*s\n");
          }
          else
          {
            sub_234146138(a3, "%*sUnknown Qualifier: ", v7, "");
            sub_23413F374(a3, *v11);
            sub_234144F70(a3, "\n");
          }
LABEL_26:
          ++v10;
        }
        while (v10 < sub_2341709C4((uint64_t)v9));
      }
      v6 = v24 + 1;
      v5 = (unint64_t *)v22;
    }
    while (v24 + 1 < sub_2341709C4(v22));
  }
  return 1;
}

unint64_t *sub_23419BE08(uint64_t a1, uint64_t a2, const char *a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  const char *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t *v17;
  const char *v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  _QWORD *v22;
  uint64_t v23;
  size_t v24;
  char **v25;
  _BYTE *v26;
  uint64_t v27;
  char **v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  _QWORD *v47;
  unint64_t *v48;
  char **v49;
  char **v50;
  _QWORD *v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  uint64_t *v95;

  v5 = sub_2341953A0();
  if (!v5)
    return v5;
  v6 = sub_2341A10B0(a3);
  v7 = v6;
  if (!v6)
  {
    sub_2341579B4(20, 0, 20, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_cpols.c", 165);
    goto LABEL_99;
  }
  if (!sub_2341709C4((uint64_t)v6))
  {
LABEL_75:
    sub_234195434(v7, (void (*)(uint64_t))sub_23419C698, (uint64_t)sub_2341A0A78);
    return v5;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = sub_2341953E8(v7, v8);
    if (v10[2] || (v11 = (const char *)v10[1]) == 0)
    {
      v52 = 131;
      v53 = 172;
      goto LABEL_78;
    }
    if (strcmp((const char *)v10[1], "ia5org"))
      break;
    v9 = 1;
LABEL_74:
    if (++v8 >= sub_2341709C4((uint64_t)v7))
      goto LABEL_75;
  }
  if (*v11 != 64)
  {
    v49 = sub_23418EF98(v11, 0);
    if (v49)
    {
      v50 = v49;
      v51 = (_QWORD *)sub_234144240((uint64_t)&unk_2505113D0);
      if (!v51)
      {
        sub_23413F6D0((_QWORD **)v50);
        goto LABEL_99;
      }
      v14 = (uint64_t)v51;
      *v51 = v50;
      goto LABEL_73;
    }
    v52 = 129;
    v53 = 196;
LABEL_78:
    sub_2341579B4(20, 0, v52, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_cpols.c", v53);
    sub_234157A5C(6u, v54, v55, v56, v57, v58, v59, v60, (uint64_t)"section:");
    goto LABEL_99;
  }
  v12 = sub_23419BAE4(a2, (uint64_t)(v11 + 1));
  if (!v12)
  {
    v52 = 134;
    v53 = 184;
    goto LABEL_78;
  }
  v13 = (unint64_t *)v12;
  v94 = v9;
  v14 = sub_234144240((uint64_t)&unk_2505113D0);
  if (!v14)
    goto LABEL_98;
  if (!sub_2341709C4((uint64_t)v13))
  {
LABEL_71:
    if (!*(_QWORD *)v14)
    {
      v61 = 142;
      v62 = 292;
LABEL_97:
      sub_2341579B4(20, 0, v61, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_cpols.c", v62);
      goto LABEL_98;
    }
    v9 = v94;
LABEL_73:
    if (!sub_2341958E8(v5, v14))
      goto LABEL_98;
    goto LABEL_74;
  }
  v15 = 0;
  if (v9)
    v16 = 22;
  else
    v16 = 26;
  v91 = v16;
  while (1)
  {
    v17 = sub_2341953E8(v13, v15);
    v18 = (const char *)v17[1];
    if (!strcmp(v18, "policyIdentifier"))
    {
      v25 = sub_23418EF98((const char *)v17[2], 0);
      if (v25)
      {
        *(_QWORD *)v14 = v25;
        goto LABEL_28;
      }
      v63 = 129;
      v64 = 233;
      goto LABEL_93;
    }
    if (!sub_2341A1598(v18, "CPS"))
      break;
    if (!*(_QWORD *)(v14 + 8))
      *(_QWORD *)(v14 + 8) = sub_2341953A0();
    v19 = sub_234144240((uint64_t)&unk_250511440);
    if (!v19)
      goto LABEL_98;
    v20 = (_QWORD *)v19;
    if (!sub_2341958E8(*(unint64_t **)(v14 + 8), v19))
      goto LABEL_98;
    v21 = sub_23418F064(0xA4u);
    *v20 = v21;
    if (!v21)
    {
      v61 = 68;
      v62 = 251;
      goto LABEL_97;
    }
    v22 = sub_23414470C();
    v20[1] = v22;
    if (!v22)
      goto LABEL_98;
    v23 = (uint64_t)v22;
    v24 = strlen((const char *)v17[2]);
    if (!sub_2341411A4(v23, (char *)v17[2], v24))
      goto LABEL_98;
LABEL_28:
    if (++v15 >= sub_2341709C4((uint64_t)v13))
      goto LABEL_71;
  }
  if (!sub_2341A1598((const char *)v17[1], "userNotice"))
  {
    v63 = 130;
    v64 = 285;
LABEL_93:
    sub_2341579B4(20, 0, v63, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_cpols.c", v64);
    sub_234157A5C(6u, v72, v73, v74, v75, v76, v77, v78, (uint64_t)"section:");
    goto LABEL_98;
  }
  v26 = (_BYTE *)v17[2];
  if (*v26 != 64)
  {
    v63 = 111;
    v64 = 263;
    goto LABEL_93;
  }
  v27 = sub_23419BAE4(a2, (uint64_t)(v26 + 1));
  if (!v27)
  {
    v63 = 134;
    v64 = 270;
    goto LABEL_93;
  }
  v92 = v27;
  v90 = a2;
  v93 = (_QWORD *)sub_234144240((uint64_t)&unk_250511440);
  if (!v93)
    goto LABEL_83;
  v28 = sub_23418F064(0xA5u);
  *v93 = v28;
  if (v28)
  {
    v95 = (uint64_t *)sub_234144240((uint64_t)&unk_2505114B0);
    if (!v95)
      goto LABEL_83;
    v29 = (unint64_t *)v92;
    v93[1] = v95;
    if (sub_2341709C4(v92))
    {
      v30 = 0;
      v89 = v7;
      while (1)
      {
        v31 = sub_2341953E8(v29, v30);
        v32 = (const char *)v31[1];
        if (!strcmp(v32, "explicitText"))
          break;
        if (!strcmp(v32, "organization"))
        {
          v44 = *v95;
          if (!*v95)
          {
            v44 = sub_234144240((uint64_t)&unk_250511520);
            if (!v44)
              goto LABEL_83;
            *v95 = v44;
          }
          *(_DWORD *)(*(_QWORD *)v44 + 4) = v91;
          v43 = *(_QWORD *)v44;
LABEL_58:
          v45 = (char *)v31[2];
          v46 = strlen(v45);
          if (!sub_2341411A4(v43, v45, v46))
            goto LABEL_83;
          goto LABEL_59;
        }
        if (strcmp(v32, "noticeNumbers"))
        {
          sub_2341579B4(20, 0, 130, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_cpols.c", 373);
          sub_234157A5C(6u, v81, v82, v83, v84, v85, v86, v87, (uint64_t)"section:");
          goto LABEL_83;
        }
        v33 = *v95;
        if (!*v95)
        {
          v34 = sub_234144240((uint64_t)&unk_250511520);
          if (!v34)
            goto LABEL_83;
          v33 = v34;
          *v95 = v34;
        }
        v35 = sub_2341A10B0((const char *)v31[2]);
        v36 = v35;
        if (!v35 || !sub_2341709C4((uint64_t)v35))
        {
          sub_2341579B4(20, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_cpols.c", 362);
          sub_234157A5C(6u, v65, v66, v67, v68, v69, v70, v71, (uint64_t)"section:");
LABEL_82:
          sub_234195434(v36, (void (*)(uint64_t))sub_23419C698, (uint64_t)sub_2341A0A78);
          goto LABEL_83;
        }
        v37 = *(unint64_t **)(v33 + 8);
        if (sub_2341709C4((uint64_t)v36))
        {
          v38 = 0;
          while (1)
          {
            v39 = sub_2341953E8(v36, v38);
            v40 = sub_2341A0C64(0, (_QWORD *)v39[1]);
            if (!v40)
            {
              sub_2341579B4(20, 0, 127, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_cpols.c", 398);
              goto LABEL_81;
            }
            v41 = (uint64_t)v40;
            if (!sub_2341958E8(v37, (uint64_t)v40))
              break;
            if (++v38 >= sub_2341709C4((uint64_t)v36))
              goto LABEL_51;
          }
          sub_234144630(v41);
LABEL_81:
          v7 = v89;
          goto LABEL_82;
        }
LABEL_51:
        sub_234195434(v36, (void (*)(uint64_t))sub_23419C698, (uint64_t)sub_2341A0A78);
        v7 = v89;
LABEL_59:
        ++v30;
        v29 = (unint64_t *)v92;
        if (v30 >= sub_2341709C4(v92))
          goto LABEL_60;
      }
      v42 = sub_23414478C();
      v95[1] = (uint64_t)v42;
      if (!v42)
        goto LABEL_83;
      v43 = (uint64_t)v42;
      goto LABEL_58;
    }
LABEL_60:
    v47 = (_QWORD *)*v95;
    if (!*v95 || v47[1] && *v47)
    {
      v48 = *(unint64_t **)(v14 + 8);
      if (!v48)
      {
        v48 = sub_2341953A0();
        *(_QWORD *)(v14 + 8) = v48;
      }
      a2 = v90;
      if (!sub_2341958E8(v48, (uint64_t)v93))
        goto LABEL_98;
      goto LABEL_28;
    }
    v79 = 138;
    v80 = 381;
  }
  else
  {
    v79 = 68;
    v80 = 313;
  }
  sub_2341579B4(20, 0, v79, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_cpols.c", v80);
LABEL_83:
  sub_234143E94((uint64_t)v93, (uint64_t)&unk_250511440);
LABEL_98:
  sub_234143E94(v14, (uint64_t)&unk_2505113D0);
LABEL_99:
  sub_234195434(v7, (void (*)(uint64_t))sub_23419C698, (uint64_t)sub_2341A0A78);
  sub_234195434(v5, (void (*)(uint64_t))sub_23419C6A4, (uint64_t)sub_23419C644);
  return 0;
}

uint64_t sub_23419C608(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505112D8);
}

uint64_t sub_23419C614(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505112D8);
}

uint64_t sub_23419C620()
{
  return sub_234144240((uint64_t)&unk_2505112D8);
}

void sub_23419C62C(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505112D8);
}

uint64_t sub_23419C638()
{
  return sub_234144240((uint64_t)&unk_2505113D0);
}

void sub_23419C644(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505113D0);
}

uint64_t sub_23419C650()
{
  return sub_234144240((uint64_t)&unk_250511440);
}

void sub_23419C65C(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250511440);
}

uint64_t sub_23419C668()
{
  return sub_234144240((uint64_t)&unk_2505114B0);
}

void sub_23419C674(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505114B0);
}

uint64_t sub_23419C680()
{
  return sub_234144240((uint64_t)&unk_250511520);
}

void sub_23419C68C(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250511520);
}

uint64_t sub_23419C698(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419C6A4(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

unint64_t *sub_23419C6B0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  const char *v19;
  unint64_t *v20;
  uint64_t v22;

  v6 = sub_2341953A0();
  if (v6)
  {
    if (sub_2341709C4((uint64_t)a3))
    {
      v7 = 0;
      v8 = &unk_2505117E8;
      v22 = a1;
      do
      {
        v9 = sub_2341953E8(a3, v7);
        if (v9[2])
        {
          v10 = (_QWORD *)sub_23419A8EC(a1, a2, (uint64_t)v9);
          if (!v10)
          {
            v12 = 0;
            goto LABEL_32;
          }
          v11 = (unint64_t *)sub_23419D884();
          v12 = v11;
          if (!v11)
            goto LABEL_32;
          if (!sub_2341958E8(v11, (uint64_t)v10))
            goto LABEL_32;
          v10 = (_QWORD *)sub_234144240((uint64_t)v8);
          if (!v10)
            goto LABEL_32;
          if (!sub_2341958E8(v6, (uint64_t)v10))
          {
            sub_234143E94((uint64_t)v10, (uint64_t)&unk_2505117E8);
            goto LABEL_31;
          }
          v13 = sub_234144240((uint64_t)&unk_250511758);
          *v10 = v13;
          if (!v13)
            goto LABEL_31;
          *(_QWORD *)(v13 + 8) = v12;
          *(_DWORD *)*v10 = 0;
        }
        else
        {
          v12 = (unint64_t *)sub_23419BAE4(a2, v9[1]);
          if (!v12)
            goto LABEL_31;
          v14 = v8;
          v15 = sub_234144240((uint64_t)v8);
          if (!v15)
            goto LABEL_29;
          if (sub_2341709C4((uint64_t)v12))
          {
            v16 = 0;
            do
            {
              v17 = sub_2341953E8(v12, v16);
              v18 = sub_23419CEEC(v15, a2, (uint64_t)v17);
              if (v18 <= 0)
              {
                if (v18 < 0)
                  goto LABEL_29;
                v19 = (const char *)v17[1];
                if (!strcmp(v19, "reasons"))
                {
                  if (!sub_23419D0F8((_QWORD *)(v15 + 8), (const char *)v17[2]))
                    goto LABEL_29;
                }
                else if (!strcmp(v19, "CRLissuer"))
                {
                  sub_23419D890(*(_QWORD *)(v15 + 16));
                  v20 = sub_23419D214(a2, (const char *)v17[2]);
                  *(_QWORD *)(v15 + 16) = v20;
                  if (!v20)
                    goto LABEL_29;
                }
              }
            }
            while (++v16 < sub_2341709C4((uint64_t)v12));
          }
          a1 = v22;
          v8 = v14;
          if (!sub_2341958E8(v6, v15))
          {
LABEL_29:
            sub_234143E94(v15, (uint64_t)&unk_2505117E8);
            goto LABEL_30;
          }
        }
        ++v7;
      }
      while (v7 < sub_2341709C4((uint64_t)a3));
    }
  }
  else
  {
LABEL_30:
    v12 = 0;
LABEL_31:
    v10 = 0;
LABEL_32:
    sub_23419D860((uint64_t)v10);
    sub_23419D890((uint64_t)v12);
    sub_234195434(v6, (void (*)(uint64_t))sub_23419D2DC, (uint64_t)sub_23419CA5C);
    return 0;
  }
  return v6;
}

uint64_t sub_23419C934(uint64_t a1, unint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;

  if (sub_2341709C4((uint64_t)a2))
  {
    v7 = 0;
    do
    {
      sub_234144F70(a3, "\n");
      v8 = sub_2341953E8(a2, v7);
      if (*v8)
        sub_23419D320(a3, *v8, a4);
      v9 = v8[1];
      if (v9)
        sub_23419D3F4(a3, "Reasons", v9, a4);
      if (v8[2])
      {
        sub_234146138(a3, "%*sCRL Issuer:\n", a4, "");
        sub_23419D4D8(a3, (unint64_t *)v8[2], a4);
      }
      ++v7;
    }
    while (v7 < sub_2341709C4((uint64_t)a2));
  }
  return 1;
}

uint64_t sub_23419CA38()
{
  return sub_234144240((uint64_t)&unk_250511758);
}

void sub_23419CA44(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250511758);
}

uint64_t sub_23419CA50()
{
  return sub_234144240((uint64_t)&unk_2505117E8);
}

void sub_23419CA5C(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505117E8);
}

uint64_t sub_23419CA68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505115F8);
}

uint64_t sub_23419CA74(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505115F8);
}

uint64_t sub_23419CA80()
{
  return sub_234144240((uint64_t)&unk_2505115F8);
}

void sub_23419CA8C(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505115F8);
}

uint64_t sub_23419CA98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505118F8);
}

uint64_t sub_23419CAA4(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505118F8);
}

uint64_t sub_23419CAB0()
{
  return sub_234144240((uint64_t)&unk_2505118F8);
}

void sub_23419CABC(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505118F8);
}

uint64_t sub_23419CAC8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  unint64_t i;
  unint64_t *v7;
  const char *v8;
  const char *v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = sub_234144240((uint64_t)&unk_2505118F8);
  if (v5)
  {
    if (sub_2341709C4((uint64_t)a3))
    {
      for (i = 0; i < sub_2341709C4((uint64_t)a3); ++i)
      {
        v7 = sub_2341953E8(a3, i);
        v9 = (const char *)v7[1];
        v8 = (const char *)v7[2];
        v10 = sub_23419CEEC(v5, a2, (uint64_t)v7);
        if (v10 <= 0)
        {
          if (v10 < 0)
            goto LABEL_21;
          if (!strcmp(v9, "onlyuser"))
          {
            v11 = (uint64_t)v7;
            v12 = (_DWORD *)(v5 + 8);
            goto LABEL_17;
          }
          if (!strcmp(v9, "onlyCA"))
          {
            v11 = (uint64_t)v7;
            v12 = (_DWORD *)(v5 + 12);
            goto LABEL_17;
          }
          if (!strcmp(v9, "onlyAA"))
          {
            v11 = (uint64_t)v7;
            v12 = (_DWORD *)(v5 + 28);
            goto LABEL_17;
          }
          if (!strcmp(v9, "indirectCRL"))
          {
            v11 = (uint64_t)v7;
            v12 = (_DWORD *)(v5 + 24);
LABEL_17:
            if (!sub_2341A0F94(v11, v12))
              goto LABEL_21;
            continue;
          }
          if (strcmp(v9, "onlysomereasons"))
          {
            sub_2341579B4(20, 0, 123, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_crld.c", 483);
            sub_234157A5C(6u, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"section:");
            goto LABEL_21;
          }
          if (!sub_23419D0F8((_QWORD *)(v5 + 16), v8))
            goto LABEL_21;
        }
      }
    }
  }
  else
  {
LABEL_21:
    sub_234143E94(v5, (uint64_t)&unk_2505118F8);
    return 0;
  }
  return v5;
}

uint64_t sub_23419CCB8(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)a2;
  if (v7)
    sub_23419D320(a3, v7, a4);
  if (*(int *)(a2 + 8) >= 1)
    sub_234146138(a3, "%*sOnly User Certificates\n", a4, "");
  if (*(int *)(a2 + 12) >= 1)
    sub_234146138(a3, "%*sOnly CA Certificates\n", a4, "");
  if (*(int *)(a2 + 24) >= 1)
    sub_234146138(a3, "%*sIndirect CRL\n", a4, "");
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
    sub_23419D3F4(a3, "Only Some Reasons", v8, a4);
  if (*(int *)(a2 + 28) >= 1)
    sub_234146138(a3, "%*sOnly Attribute Certificates\n", a4, "");
  if (!*(_QWORD *)a2
    && *(int *)(a2 + 8) <= 0
    && *(int *)(a2 + 12) <= 0
    && *(int *)(a2 + 24) <= 0
    && !*(_QWORD *)(a2 + 16)
    && *(int *)(a2 + 28) <= 0)
  {
    sub_234146138(a3, "%*s<EMPTY>\n", a4, "");
  }
  return 1;
}

uint64_t sub_23419CE28(uint64_t a1, int *a2)
{
  unint64_t *v3;
  uint64_t result;
  unint64_t v5;
  int *v6;

  if (!a1)
    return 1;
  if (*(_DWORD *)a1 != 1)
    return 1;
  v3 = *(unint64_t **)(a1 + 8);
  result = sub_2341AAC8C(a2);
  *(_QWORD *)(a1 + 16) = result;
  if (!result)
    return result;
  if (sub_2341709C4((uint64_t)v3))
  {
    v5 = 0;
    do
    {
      v6 = (int *)sub_2341953E8(v3, v5);
      if (!sub_2341A8708(*(_QWORD *)(a1 + 16), v6, -1, v5 == 0))
        goto LABEL_11;
    }
    while (++v5 < sub_2341709C4((uint64_t)v3));
  }
  if ((sub_2341AAC68(*(int **)(a1 + 16), 0) & 0x80000000) == 0)
    return 1;
LABEL_11:
  sub_2341AAC80(*(_QWORD *)(a1 + 16));
  result = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_23419CEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  uint64_t result;
  const char *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t **v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  _DWORD *v21;
  _DWORD *v22;

  v6 = *(const char **)(a3 + 8);
  if (!strncmp(v6, "fullname", 9uLL))
  {
    v8 = *(const char **)(a3 + 16);
    if (v8)
    {
      v9 = sub_23419D214(a2, v8);
      v10 = 0;
      v11 = 0;
      if (v9)
        goto LABEL_6;
LABEL_17:
      sub_234195434(v11, (void (*)(uint64_t))sub_23419D2B8, (uint64_t)sub_23419D860);
      sub_234195434(v10, (void (*)(uint64_t))sub_23419D2C4, (uint64_t)sub_2341AAC40);
      return 0xFFFFFFFFLL;
    }
    v19 = 137;
    v20 = 141;
LABEL_24:
    sub_2341579B4(20, 0, v19, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_crld.c", v20);
    return 0xFFFFFFFFLL;
  }
  if (strcmp(v6, "relativename"))
    return 0;
  v12 = *(_QWORD *)(a3 + 16);
  if (!v12)
  {
    v19 = 137;
    v20 = 152;
    goto LABEL_24;
  }
  v13 = sub_23419BAE4(a2, v12);
  if (!v13)
  {
    v19 = 153;
    v20 = 157;
    goto LABEL_24;
  }
  v14 = (unint64_t *)v13;
  v15 = sub_2341AAC74();
  if (!v15)
    return 0xFFFFFFFFLL;
  v16 = (unint64_t **)v15;
  v17 = sub_2341A21FC(v15, v14, 4097);
  v10 = *v16;
  *v16 = 0;
  sub_2341AAC80((uint64_t)v16);
  if (!v17)
    goto LABEL_16;
  v11 = (unint64_t *)sub_2341709C4((uint64_t)v10);
  if (!v11)
    goto LABEL_17;
  v18 = sub_2341709C4((uint64_t)v10);
  if (*((_DWORD *)sub_2341953E8(v10, v18 - 1) + 4))
  {
    sub_2341579B4(20, 0, 122, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_crld.c", 173);
LABEL_16:
    v11 = 0;
    goto LABEL_17;
  }
  v9 = 0;
LABEL_6:
  if (*(_QWORD *)a1)
  {
    sub_2341579B4(20, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_crld.c", 181);
LABEL_8:
    v11 = v9;
    goto LABEL_17;
  }
  v21 = (_DWORD *)sub_234144240((uint64_t)&unk_250511758);
  *(_QWORD *)a1 = v21;
  if (!v21)
    goto LABEL_8;
  v22 = v21;
  if (v9)
  {
    *v21 = 0;
    *(_QWORD *)(*(_QWORD *)a1 + 8) = v9;
    return 1;
  }
  else
  {
    result = 1;
    *v22 = 1;
    *(_QWORD *)(*(_QWORD *)a1 + 8) = v10;
  }
  return result;
}

uint64_t sub_23419D0F8(_QWORD *a1, const char *a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  const char *v7;
  _QWORD *v8;
  char **v9;
  char *v10;

  if (*a1)
  {
    sub_2341579B4(20, 0, 163, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_crld.c", 220);
    return 0;
  }
  v4 = sub_2341A10B0(a2);
  if (!v4)
    return 0;
  v5 = v4;
  if (sub_2341709C4((uint64_t)v4))
  {
    v6 = 0;
    while (1)
    {
      v7 = (const char *)sub_2341953E8(v5, v6)[1];
      v8 = (_QWORD *)*a1;
      if (!*a1)
      {
        v8 = sub_23414468C();
        *a1 = v8;
        if (!v8)
          break;
      }
      v9 = off_2505119B0;
      while (strcmp(*(v9 - 2), v7))
      {
        v10 = *v9;
        v9 += 3;
        if (!v10)
          goto LABEL_16;
      }
      if (!sub_23413DDA0((uint64_t)v8, *((_DWORD *)v9 - 8), 1))
        break;
      if (++v6 >= sub_2341709C4((uint64_t)v5))
        goto LABEL_15;
    }
LABEL_16:
    v2 = 0;
  }
  else
  {
LABEL_15:
    v2 = 1;
  }
  sub_234195434(v5, (void (*)(uint64_t))sub_23419D2D0, (uint64_t)sub_2341A0A78);
  return v2;
}

unint64_t *sub_23419D214(uint64_t a1, const char *a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;

  if (*a2 == 64)
  {
    v3 = (unint64_t *)sub_23419BAE4(a1, (uint64_t)(a2 + 1));
    v4 = 0;
    if (v3)
    {
LABEL_3:
      v5 = sub_23419A828(0, a1, v3);
      sub_234195434(v4, (void (*)(uint64_t))sub_23419D2D0, (uint64_t)sub_2341A0A78);
      return v5;
    }
  }
  else
  {
    v3 = sub_2341A10B0(a2);
    v4 = v3;
    if (v3)
      goto LABEL_3;
  }
  sub_2341579B4(20, 0, 153, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_crld.c", 121);
  return 0;
}

uint64_t sub_23419D2B8(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419D2C4(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419D2D0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419D2DC(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419D2E8(int a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (a1 == 3)
  {
    sub_2341AAC80(*(_QWORD *)(v2 + 16));
  }
  else if (a1 == 1)
  {
    *(_QWORD *)(v2 + 16) = 0;
  }
  return 1;
}

unint64_t sub_23419D320(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if (*(_DWORD *)a2)
  {
    v8 = 0u;
    v9 = 0u;
    v7 = *(_QWORD *)(a2 + 8);
    sub_234146138(a1, "%*sRelative Name:\n%*s", a3, "", a3 + 2, "");
    sub_23419755C(a1, &v7, 0, 8520479);
    return sub_234144F70(a1, "\n");
  }
  else
  {
    sub_234146138(a1, "%*sFull Name:\n", a3, "");
    return sub_23419D4D8(a1, *(unint64_t **)(a2 + 8), a3);
  }
}

uint64_t sub_23419D3F4(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  char v6;
  int *v7;
  char *v8;
  int i;
  int v10;
  char *v11;

  sub_234146138(a1, "%*s%s:\n%*s", a4, "", a2, a4 + 2, "");
  v6 = 0;
  v7 = &dword_250511990;
  v8 = "Unused";
LABEL_2:
  for (i = *v7; ; i = v10)
  {
    if (sub_23413DEB8(a3, i))
    {
      if ((v6 & 1) != 0)
        sub_234144F70(a1, ", ");
      sub_234144F70(a1, v8);
      v8 = (char *)*((_QWORD *)v7 + 4);
      v7 += 6;
      v6 = 1;
      if (!v8)
        goto LABEL_11;
      goto LABEL_2;
    }
    v8 = (char *)*((_QWORD *)v7 + 4);
    if (!v8)
      break;
    v10 = v7[6];
    v7 += 6;
  }
  if ((v6 & 1) != 0)
  {
LABEL_11:
    v11 = "\n";
    return sub_234144F70(a1, v11);
  }
  v11 = "<EMPTY>\n";
  return sub_234144F70(a1, v11);
}

unint64_t sub_23419D4D8(uint64_t a1, unint64_t *a2, int a3)
{
  unint64_t result;
  unint64_t i;
  unint64_t *v8;

  result = sub_2341709C4((uint64_t)a2);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      sub_234146138(a1, "%*s", a3 + 2, "");
      v8 = sub_2341953E8(a2, i);
      sub_23419A684(a1, (uint64_t)v8);
      sub_234144F70(a1, "\n");
      result = sub_2341709C4((uint64_t)a2);
    }
  }
  return result;
}

const char *sub_23419D590(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char **i;
  uint64_t v8;

  v4 = sub_23413EAEC((uint64_t)a2);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(const char **)(v5 + 8);
  if (v6)
  {
    if (v4 == *(_DWORD *)v5)
      return sub_23418E55C(v6);
    for (i = (const char **)(v5 + 32); ; i += 3)
    {
      v6 = *i;
      if (!*i)
        break;
      v8 = *((int *)i - 2);
      if (v4 == v8)
        return sub_23418E55C(v6);
    }
  }
  return (const char *)sub_2341A0AE8(a1, a2);
}

unint64_t *sub_23419D604(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v8;
  char __s[80];
  uint64_t v10;

  v3 = a3;
  v10 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (sub_2341709C4((uint64_t)a2))
  {
    v5 = 0;
    do
    {
      v6 = sub_2341953E8(a2, v5);
      sub_23413F36C(__s, 80, (uint64_t)v6);
      sub_2341A08E4(0, __s, &v8);
      ++v5;
    }
    while (v5 < sub_2341709C4((uint64_t)a2));
    return v8;
  }
  return v3;
}

unint64_t *sub_23419D6B4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  const char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_2341953A0();
  if (v4 && sub_2341709C4((uint64_t)a3))
  {
    v5 = 0;
    while (1)
    {
      v6 = sub_2341953E8(a3, v5);
      v7 = (const char *)v6[2];
      if (!v7)
        v7 = (const char *)v6[1];
      v8 = sub_23418EF98(v7, 0);
      if (!v8 || !sub_2341958E8(v4, (uint64_t)v8))
        break;
      if (++v5 >= sub_2341709C4((uint64_t)a3))
        return v4;
    }
    sub_23413F6D0((_QWORD **)v8);
    sub_234195434(v4, (void (*)(uint64_t))sub_23419D800, (uint64_t)sub_23413F6D0);
    sub_2341579B4(20, 0, 129, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_extku.c", 147);
    sub_234157A5C(6u, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"section:");
    return 0;
  }
  return v4;
}

uint64_t sub_23419D7D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250511BF0);
}

uint64_t sub_23419D7DC(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250511BF0);
}

uint64_t sub_23419D7E8()
{
  return sub_234144240((uint64_t)&unk_250511BF0);
}

void sub_23419D7F4(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250511BF0);
}

uint64_t sub_23419D800(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419D80C()
{
  return sub_234144240((uint64_t)&unk_250511D50);
}

void sub_23419D818(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250511D50);
}

uint64_t sub_23419D824()
{
  return sub_234144240((uint64_t)&unk_250511DC0);
}

void sub_23419D830(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250511DC0);
}

uint64_t sub_23419D83C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250511F10);
}

uint64_t sub_23419D848(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250511F10);
}

uint64_t sub_23419D854()
{
  return sub_234144240((uint64_t)&unk_250511F10);
}

void sub_23419D860(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250511F10);
}

uint64_t sub_23419D86C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250511F60);
}

uint64_t sub_23419D878(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250511F60);
}

uint64_t sub_23419D884()
{
  return sub_234144240((uint64_t)&unk_250511F60);
}

void sub_23419D890(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250511F60);
}

uint64_t sub_23419D89C(int *a1)
{
  return sub_23413E05C((uint64_t)&unk_250511F10, a1);
}

uint64_t sub_23419D8AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  result = 0xFFFFFFFFLL;
  if (!a1 || !a2 || *(_DWORD *)a1 != *(_DWORD *)a2)
    return result;
  switch(*(_DWORD *)a1)
  {
    case 0:
      v6 = *(_QWORD *)(a1 + 8);
      if (v6)
      {
        v7 = *(uint64_t **)(a2 + 8);
        if (v7)
        {
          result = sub_23418EB9C(*(_QWORD *)v6, *v7);
          if (!(_DWORD)result)
            return sub_234140B78(*(int **)(v6 + 8), v7[1]);
        }
      }
      return result;
    case 1:
    case 2:
    case 3:
    case 6:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 8);
      return sub_2341413E0(v4, v5);
    case 4:
      return sub_2341A2FF4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
    case 5:
      v8 = *(uint64_t **)(a1 + 8);
      v9 = *(uint64_t **)(a2 + 8);
      v10 = *v9;
      if (!*v8)
      {
        if (!v10)
          goto LABEL_15;
        return 0xFFFFFFFFLL;
      }
      if (!v10 || sub_2341413E0(*v8, v10))
        return 0xFFFFFFFFLL;
LABEL_15:
      v4 = v8[1];
      v5 = v9[1];
      return sub_2341413E0(v4, v5);
    case 7:
      return sub_23413F770(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
    case 8:
      return sub_23418EB9C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
    default:
      return result;
  }
}

uint64_t sub_23419D9BC(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2 <= 8)
    *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)result = a2;
  return result;
}

uint64_t sub_23419D9D0(uint64_t a1, _DWORD *a2)
{
  if (a2)
    *a2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 > 8u)
    return 0;
  else
    return *(_QWORD *)(a1 + 8);
}

uint64_t sub_23419D9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;

  result = sub_234144240((uint64_t)&unk_250511D50);
  if (result)
  {
    v7 = (_QWORD *)result;
    sub_234144828(*(_QWORD *)(result + 8));
    *v7 = a2;
    v7[1] = a3;
    *(_QWORD *)(a1 + 8) = v7;
    result = 1;
    *(_DWORD *)a1 = 0;
  }
  return result;
}

uint64_t sub_23419DA50(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*(_DWORD *)a1)
    return 0;
  if (a2)
    *a2 = **(_QWORD **)(a1 + 8);
  if (a3)
    *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  return 1;
}

_QWORD *sub_23419DA88(uint64_t a1, const void **a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;

  if (!a2)
    return 0;
  v3 = *(int *)a2;
  if (!(_DWORD)v3)
    return 0;
  v4 = sub_23418E2E4(v3 + 1);
  v5 = v4;
  if (v4)
  {
    v6 = *(int *)a2;
    if ((_DWORD)v6)
    {
      memcpy(v4, a2[1], v6);
      v7 = *(int *)a2;
    }
    else
    {
      v7 = 0;
    }
    *((_BYTE *)v5 + v7) = 0;
  }
  return v5;
}

_QWORD *sub_23419DAF0(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *v4;
  size_t v5;

  if (!a3)
  {
    sub_2341579B4(20, 0, 124, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_ia5.c", 90);
    return 0;
  }
  v4 = sub_23414470C();
  if (v4)
  {
    v5 = strlen(a3);
    if (!sub_2341411A4((uint64_t)v4, a3, v5))
    {
      sub_234144630((uint64_t)v4);
      return 0;
    }
  }
  return v4;
}

unint64_t *sub_23419DB68(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  int v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char __s[80];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (sub_2341709C4((uint64_t)a2))
  {
    v6 = 0;
    v7 = a3;
    while (1)
    {
      v8 = v7;
      v9 = (uint64_t *)sub_2341953E8(a2, v6);
      v10 = sub_23419A44C(a1, v9[1], v7);
      if (!v10)
        break;
      v7 = v10;
      v11 = sub_2341953E8(v10, v6);
      sub_23413F36C(__s, 80, *v9);
      v12 = strlen(__s);
      v13 = (int)(strlen((const char *)v11[1]) + v12 + 5);
      v14 = sub_23418E2E4(v13);
      if (!v14)
      {
        v8 = v7;
        break;
      }
      v15 = v14;
      sub_23418E9CC(v14, __s, v13);
      sub_23418EA40(v15, " - ", v13);
      sub_23418EA40(v15, (char *)v11[1], v13);
      sub_23418E3C4((_QWORD *)v11[1]);
      v11[1] = (unint64_t)v15;
      if (++v6 >= sub_2341709C4((uint64_t)a2))
        return v7;
    }
    v7 = 0;
    if (!a3)
    {
      if (v8)
      {
        sub_234195434(v8, (void (*)(uint64_t))sub_23419DF1C, (uint64_t)sub_2341A0A78);
        return 0;
      }
    }
  }
  else
  {
    v7 = a3;
    if (!a3)
      return sub_2341953A0();
  }
  return v7;
}

unint64_t *sub_23419DD34(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  const char *v13;
  char *v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  unint64_t v25;

  v6 = sub_2341953A0();
  if (v6 && sub_2341709C4((uint64_t)a3))
  {
    v7 = 0;
    while (1)
    {
      v8 = sub_2341953E8(a3, v7);
      v9 = sub_234144240((uint64_t)&unk_250512410);
      if (!v9)
        break;
      v10 = (_QWORD *)v9;
      if (!sub_2341958E8(v6, v9))
        break;
      v11 = strchr((char *)v8[1], 59);
      if (!v11)
      {
        sub_2341579B4(20, 0, 135, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_info.c", 185);
        break;
      }
      v12 = v11;
      v24[0] = 0;
      v24[1] = v11 + 1;
      v25 = 0;
      v25 = v8[2];
      if (!sub_23419A900(v10[1], a1, a2, (uint64_t)v24, 0))
        break;
      v13 = (const char *)sub_23418E928((_BYTE *)v8[1], (size_t)&v12[-v8[1]]);
      if (!v13)
        break;
      v14 = (char *)v13;
      v15 = sub_23418EF98(v13, 0);
      *v10 = v15;
      if (!v15)
      {
        sub_2341579B4(20, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_info.c", 200);
        sub_234157A5C(2u, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"value=");
        sub_23418E3C4(v14);
        break;
      }
      sub_23418E3C4(v14);
      if (++v7 >= sub_2341709C4((uint64_t)a3))
        return v6;
    }
    sub_234195434(v6, (void (*)(uint64_t))sub_23419DF28, (uint64_t)sub_23419DEE0);
    return 0;
  }
  return v6;
}

uint64_t sub_23419DED4()
{
  return sub_234144240((uint64_t)&unk_250512410);
}

void sub_23419DEE0(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250512410);
}

uint64_t sub_23419DEEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505122D0);
}

uint64_t sub_23419DEF8(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505122D0);
}

uint64_t sub_23419DF04()
{
  return sub_234144240((uint64_t)&unk_2505122D0);
}

void sub_23419DF10(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505122D0);
}

uint64_t sub_23419DF1C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419DF28(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

_QWORD *sub_23419DF38(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_2341A0C64(a1, a3);
}

uint64_t sub_23419DF40(uint64_t a1)
{
  uint64_t result;

  result = qword_25615AB20;
  if (qword_25615AB20 || (result = (uint64_t)sub_234195344((uint64_t)sub_23419DF9C), (qword_25615AB20 = result) != 0))
  {
    result = (uint64_t)sub_2341958E8((unint64_t *)result, a1);
    if (result)
    {
      sub_23419598C(qword_25615AB20, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_23419E4F8);
      return 1;
    }
  }
  return result;
}

uint64_t sub_23419DF9C(_DWORD **a1, _DWORD **a2)
{
  return (**a1 - **a2);
}

unint64_t *sub_23419DFB4(int a1)
{
  void *v1;
  unint64_t *result;
  unint64_t v3;
  _OWORD *__key;
  _OWORD v5[6];
  uint64_t v6;

  __key = v5;
  if (a1 < 0)
    return 0;
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v3 = 0;
  LODWORD(v5[0]) = a1;
  v1 = bsearch(&__key, &off_250512598, 0x1FuLL, 8uLL, (int (__cdecl *)(const void *, const void *))sub_23419E060);
  if (v1)
    return *(unint64_t **)v1;
  result = (unint64_t *)qword_25615AB20;
  if (qword_25615AB20)
  {
    if (sub_23419574C(qword_25615AB20, &v3, (uint64_t)v5, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23419E4F8))return sub_2341953E8((unint64_t *)qword_25615AB20, v3);
    return 0;
  }
  return result;
}

uint64_t sub_23419E060(_DWORD **a1, _DWORD **a2)
{
  return (**a1 - **a2);
}

unint64_t *sub_23419E078(unsigned __int16 **a1)
{
  int v1;

  v1 = sub_23418EBF8(*a1);
  if (v1)
    return sub_23419DFB4(v1);
  else
    return 0;
}

uint64_t sub_23419E0A0(int a1, uint64_t a2)
{
  unint64_t *v3;

  v3 = sub_23419DFB4(a1);
  if (v3)
  {
    sub_234143E94(a2, v3[1]);
    return 1;
  }
  else
  {
    sub_2341579B4(20, 0, 104, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_lib.c", 138);
    return 0;
  }
}

uint64_t sub_23419E0F8(int a1, int a2)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t result;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = sub_23419DFB4(a2);
  if (v3)
  {
    v4 = v3;
    result = (uint64_t)sub_23418E2E4(0x68uLL);
    if (!result)
      return result;
    v6 = (_QWORD *)result;
    v7 = *((_OWORD *)v4 + 2);
    v8 = *(_OWORD *)v4;
    *(_OWORD *)(result + 16) = *((_OWORD *)v4 + 1);
    *(_OWORD *)(result + 32) = v7;
    *(_OWORD *)result = v8;
    v9 = *((_OWORD *)v4 + 3);
    v10 = *((_OWORD *)v4 + 4);
    v11 = *((_OWORD *)v4 + 5);
    *(_QWORD *)(result + 96) = v4[12];
    *(_OWORD *)(result + 64) = v10;
    *(_OWORD *)(result + 80) = v11;
    *(_OWORD *)(result + 48) = v9;
    *(_DWORD *)result = a1;
    if (sub_23419DF40(result))
      return 1;
    sub_23418E3C4(v6);
  }
  else
  {
    sub_2341579B4(20, 0, 114, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_lib.c", 152);
  }
  return 0;
}

uint64_t sub_23419E1A4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  result = (uint64_t)sub_23419E078((unsigned __int16 **)a1);
  if (result)
  {
    v3 = result;
    v4 = *(int **)(a1 + 16);
    v5 = *((_QWORD *)v4 + 1);
    result = sub_234141DAC(0, &v5, *v4, *(_QWORD *)(result + 8));
    if (result)
    {
      if (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + **(int **)(a1 + 16))
      {
        sub_234143E94(result, *(_QWORD *)(v3 + 8));
        sub_2341579B4(20, 0, 164, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_lib.c", 192);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_23419E23C(unint64_t *a1, int a2, int *a3, _DWORD *a4)
{
  int v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  int v12;

  if (a1)
  {
    v8 = a4 ? *a4 + 1 : 0;
    v9 = v8 & ~(v8 >> 31);
    if (sub_2341709C4((uint64_t)a1) > v9)
    {
      v10 = 0;
      while (1)
      {
        v11 = sub_2341953E8(a1, v9);
        if (sub_23418EBF8((unsigned __int16 *)*v11) == a2)
        {
          if (a4)
          {
            *a4 = v9;
LABEL_21:
            if (a3)
              *a3 = sub_2341A5474((_BOOL8)v11);
            return sub_23419E1A4((uint64_t)v11);
          }
          if (v10)
          {
            if (!a3)
              return 0;
            v12 = -2;
LABEL_18:
            *a3 = v12;
            return 0;
          }
        }
        else
        {
          v11 = v10;
        }
        ++v9;
        v10 = v11;
        if (v9 >= sub_2341709C4((uint64_t)a1))
        {
          if (!v11)
            break;
          goto LABEL_21;
        }
      }
    }
  }
  if (a4)
    *a4 = -1;
  if (a3)
  {
    v12 = -1;
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_23419E350(unint64_t **a1, unsigned int a2, int *a3, int a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;

  v9 = a5 & 0xF;
  if (v9 == 1)
  {
LABEL_2:
    v10 = sub_23419B87C(a2, a4, a3);
    if (v10)
    {
      v11 = *a1;
      if (*a1 || (v11 = sub_2341953A0()) != 0)
      {
        if (sub_2341958E8(v11, v10))
        {
          *a1 = v11;
          return 1;
        }
      }
      if (v11 != *a1)
        sub_234141344((uint64_t)v11);
      sub_2341AAC00(v10);
      return 0xFFFFFFFFLL;
    }
LABEL_28:
    v17 = 109;
    v18 = 308;
    goto LABEL_29;
  }
  v13 = sub_2341A52F8(*a1, a2, -1);
  if ((v13 & 0x80000000) != 0)
  {
    v17 = 114;
    if (v9 != 3 && v9 != 5)
      goto LABEL_2;
    if ((a5 & 0x10) != 0)
      return 0;
LABEL_23:
    v18 = 341;
LABEL_29:
    sub_2341579B4(20, 0, v17, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_lib.c", v18);
    return 0;
  }
  if (!v9)
  {
    v17 = 112;
    if ((a5 & 0x10) != 0)
      return 0;
    goto LABEL_23;
  }
  if (v9 == 4)
    return 1;
  v14 = v13;
  if (v9 == 5)
  {
    v15 = sub_23419560C((uint64_t *)*a1, v13);
    if (v15)
    {
      sub_2341AAC00(v15);
      return 1;
    }
    return 0xFFFFFFFFLL;
  }
  v19 = sub_23419B87C(a2, a4, a3);
  if (!v19)
    goto LABEL_28;
  v20 = v19;
  v21 = sub_2341953E8(*a1, v14);
  sub_2341AAC00((uint64_t)v21);
  if (sub_23419540C(*a1, v14, v20))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_23419E4F8(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t sub_23419E524(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t i;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v6 = sub_234144240((uint64_t)&unk_250512690);
  if (!v6)
    goto LABEL_17;
  if (sub_2341709C4((uint64_t)a3))
  {
    for (i = 0; i < sub_2341709C4((uint64_t)a3); ++i)
    {
      v8 = sub_2341953E8(a3, i);
      v17 = 0;
      v18 = 0;
      v16 = 0;
      v9 = v8[1];
      if (!strncmp((const char *)v9, "permitted", 9uLL) && *(_BYTE *)(v9 + 9))
      {
        v10 = 10;
        v11 = (unint64_t **)v6;
      }
      else
      {
        if (strncmp((const char *)v9, "excluded", 8uLL) || !*(_BYTE *)(v9 + 8))
        {
          sub_2341579B4(20, 0, 135, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_ncons.c", 142);
LABEL_17:
          v13 = 0;
LABEL_18:
          sub_234143E94(v6, (uint64_t)&unk_250512690);
          sub_234143E94((uint64_t)v13, (uint64_t)&unk_250512788);
          return 0;
        }
        v10 = 9;
        v11 = (unint64_t **)(v6 + 8);
      }
      v12 = v8[2];
      v17 = v9 + v10;
      v18 = v12;
      v13 = (uint64_t *)sub_234144240((uint64_t)&unk_250512788);
      if (!sub_23419A900(*v13, a1, a2, (uint64_t)&v16, 1))
        goto LABEL_18;
      v14 = *v11;
      if (!*v11)
      {
        v14 = sub_2341953A0();
        *v11 = v14;
        if (!v14)
          goto LABEL_18;
      }
      if (!sub_2341958E8(v14, (uint64_t)v13))
        goto LABEL_18;
    }
  }
  return v6;
}

uint64_t sub_23419E6C4(uint64_t a1, unint64_t **a2, uint64_t a3, int a4)
{
  sub_23419EA18(*a2, a3, a4, "Permitted");
  sub_23419EA18(a2[1], a3, a4, "Excluded");
  return 1;
}

uint64_t sub_23419E724()
{
  return sub_234144240((uint64_t)&unk_250512788);
}

void sub_23419E730(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250512788);
}

uint64_t sub_23419E73C()
{
  return sub_234144240((uint64_t)&unk_250512690);
}

void sub_23419E748(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250512690);
}

uint64_t sub_23419E754(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  signed int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  int v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (uint64_t *)sub_2341A323C(a1);
  v5 = sub_2341A84A8(v4);
  v6 = sub_2341709C4(*(_QWORD *)(a1 + 88)) + v5;
  v7 = sub_2341709C4(*a2);
  v8 = sub_2341709C4(a2[1]) + v7;
  v9 = !is_mul_ok(v8, v6);
  if (v6 < (int)sub_2341A84A8(v4) || v8 < sub_2341709C4(*a2))
    return 1;
  if (v8)
  {
    v10 = v8 * v6 > 0x100000 || v9;
    if ((v10 & 1) != 0)
      return 1;
  }
  if ((int)sub_2341A84A8(v4) >= 1)
  {
    v19 = (uint64_t)v4;
    v18 = 4;
    result = sub_23419E8E0(&v18, (uint64_t)a2);
    if ((_DWORD)result)
      return result;
    LODWORD(v18) = 1;
    v12 = -1;
    while (1)
    {
      v13 = sub_2341A84C4(v4, 0x30u, v12);
      if (v13 == -1)
        break;
      v12 = v13;
      v14 = sub_2341A8458((unint64_t **)v4, v13);
      v19 = sub_2340DE85C((uint64_t)v14);
      if (*(_DWORD *)(v19 + 4) != 22)
        return 53;
      result = sub_23419E8E0(&v18, (uint64_t)a2);
      if ((_DWORD)result)
        return result;
    }
  }
  result = sub_2341709C4(*(_QWORD *)(a1 + 88));
  if (result)
  {
    v15 = 0;
    do
    {
      v16 = sub_2341953E8(*(unint64_t **)(a1 + 88), v15);
      result = sub_23419E8E0(v16, (uint64_t)a2);
      if ((_DWORD)result)
        break;
      ++v15;
      v17 = sub_2341709C4(*(_QWORD *)(a1 + 88));
      result = 0;
    }
    while (v15 < v17);
  }
  return result;
}

uint64_t sub_23419E8E0(_DWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t *v9;

  if (sub_2341709C4(*(_QWORD *)a2))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)sub_2341953E8(*(unint64_t **)a2, v4);
      if (*a1 == *(_DWORD *)*v6)
      {
        if (v6[1] || v6[2])
          return 49;
        if (v5 != 2)
        {
          result = sub_23419EBF0((uint64_t)a1, *v6);
          if ((_DWORD)result)
          {
            v5 = 1;
            if ((_DWORD)result != 47)
              return result;
          }
          else
          {
            v5 = 2;
          }
        }
      }
      ++v4;
    }
    while (v4 < sub_2341709C4(*(_QWORD *)a2));
    if (v5 != 1)
      goto LABEL_14;
    return 47;
  }
  else
  {
LABEL_14:
    result = sub_2341709C4(*(_QWORD *)(a2 + 8));
    if (result)
    {
      v8 = 0;
      while (1)
      {
        v9 = (uint64_t *)sub_2341953E8(*(unint64_t **)(a2 + 8), v8);
        if (*a1 == *(_DWORD *)*v9)
        {
          if (v9[1] || v9[2])
            return 49;
          result = sub_23419EBF0((uint64_t)a1, *v9);
          if ((_DWORD)result != 47)
            break;
        }
        if (++v8 >= sub_2341709C4(*(_QWORD *)(a2 + 8)))
          return 0;
      }
      if (!(_DWORD)result)
        return 48;
    }
  }
  return result;
}

unint64_t sub_23419EA18(unint64_t *a1, uint64_t a2, int a3, const char *a4)
{
  unint64_t result;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  _DWORD *v12;
  int *v13;
  unsigned __int8 *v14;
  int v15;
  int i;
  char *v17;

  if (sub_2341709C4((uint64_t)a1))
    sub_234146138(a2, "%*s%s:\n", a3, "", a4);
  result = sub_2341709C4((uint64_t)a1);
  if (result)
  {
    v9 = 0;
    v10 = a3 + 2;
    do
    {
      v11 = sub_2341953E8(a1, v9);
      sub_234146138(a2, "%*s", v10, "");
      v12 = (_DWORD *)*v11;
      if (*(_DWORD *)*v11 == 7)
      {
        v13 = (int *)*((_QWORD *)v12 + 1);
        v14 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
        v15 = *v13;
        sub_234144F70(a2, "IP:");
        if (v15 == 8)
        {
          sub_234146138(a2, "%d.%d.%d.%d/%d.%d.%d.%d", *v14);
        }
        else
        {
          if (v15 == 32)
          {
            for (i = 0; ; ++i)
            {
              sub_234146138(a2, "%X", __rev16(*(unsigned __int16 *)v14));
              v17 = "/";
              if (i != 7)
              {
                if (i == 15)
                  goto LABEL_16;
                v17 = ":";
              }
              sub_234144F70(a2, v17);
              v14 += 2;
            }
          }
          sub_234146138(a2, "IP Address:<invalid>");
        }
      }
      else
      {
        sub_23419A684(a2, (uint64_t)v12);
      }
LABEL_16:
      sub_234144F70(a2, "\n");
      ++v9;
      result = sub_2341709C4((uint64_t)a1);
    }
    while (v9 < result);
  }
  return result;
}

uint64_t sub_23419EBF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __int128 *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  __int128 v31;
  char v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  __int128 v37;

  result = 51;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v4 = *(int **)(a1 + 8);
      v5 = *(int **)(a2 + 8);
      v6 = *((_QWORD *)v4 + 1);
      v7 = *v4;
      *(_QWORD *)&v37 = v6;
      *((_QWORD *)&v37 + 1) = v7;
      v8 = (_BYTE *)*((_QWORD *)v5 + 1);
      v9 = *v5;
      v35 = v8;
      v36 = v9;
      v33 = 0;
      v34 = 0;
      v31 = 0uLL;
      if (!sub_234149044((uint64_t)&v37, &v33, 64))
        return 53;
      if (sub_234149044((uint64_t)&v35, &v31, 64))
      {
        if (!*((_QWORD *)&v31 + 1) || sub_234148CF4((uint64_t)&v31, v33, v34))
        {
          sub_234148BF8(&v35, 1uLL);
LABEL_42:
          sub_234148BF8(&v37, 1uLL);
          v29 = (uint64_t *)&v35;
          v30 = (uint64_t *)&v37;
          goto LABEL_43;
        }
        return 47;
      }
      else
      {
        if (!v36 || *v35 != 46)
          goto LABEL_42;
LABEL_9:
        v16 = &v37;
LABEL_10:
        v17 = sub_23419EEEC(v16, (uint64_t *)&v35);
LABEL_44:
        if (v17)
          return 0;
        else
          return 47;
      }
    case 2:
      v10 = *(int **)(a1 + 8);
      v11 = *(int **)(a2 + 8);
      v12 = *((_QWORD *)v10 + 1);
      v13 = *v10;
      *(_QWORD *)&v37 = v12;
      *((_QWORD *)&v37 + 1) = v13;
      v14 = (_BYTE *)*((_QWORD *)v11 + 1);
      v15 = *v11;
      v35 = v14;
      v36 = v15;
      if (!(_DWORD)v15)
        return 0;
      if (*v14 == 46)
        goto LABEL_9;
      if (v13 > v15)
      {
        LOBYTE(v33) = 0;
        if (!sub_234148BF8(&v37, ~v15 + v13)
          || !sub_234148D28(&v37, &v33)
          || v33 != 46)
        {
          return 47;
        }
      }
      v29 = (uint64_t *)&v37;
      v30 = (uint64_t *)&v35;
      goto LABEL_43;
    case 4:
      v18 = *(_QWORD *)(a1 + 8);
      v19 = *(_QWORD *)(a2 + 8);
      if (*(_DWORD *)(v18 + 8) && (sub_2341AAC68((int *)v18, 0) & 0x80000000) != 0
        || *(_DWORD *)(v19 + 8) && (sub_2341AAC68((int *)v19, 0) & 0x80000000) != 0)
      {
        return 17;
      }
      v20 = *(int *)(v19 + 32);
      if ((int)v20 <= *(_DWORD *)(v18 + 32)
        && (!(_DWORD)v20 || !memcmp(*(const void **)(v19 + 24), *(const void **)(v18 + 24), v20)))
      {
        return 0;
      }
      return 47;
    case 6:
      v21 = *(int **)(a1 + 8);
      v22 = *(int **)(a2 + 8);
      v23 = *((_QWORD *)v21 + 1);
      v24 = *v21;
      *(_QWORD *)&v37 = v23;
      *((_QWORD *)&v37 + 1) = v24;
      v25 = (_BYTE *)*((_QWORD *)v22 + 1);
      v26 = *v22;
      v35 = v25;
      v36 = v26;
      v33 = 0;
      v34 = 0;
      v32 = 0;
      if (!sub_234149044((uint64_t)&v37, &v33, 58) || !sub_234148BF8(&v37, 1uLL))
        return 53;
      v27 = sub_234148D28(&v37, &v32);
      result = 53;
      if (!v27)
        return result;
      if (v32 != 47)
        return result;
      v28 = sub_234148D28(&v37, &v32);
      result = 53;
      if (!v28 || v32 != 47)
        return result;
      v31 = 0uLL;
      if (!sub_234149044((uint64_t)&v37, &v31, 58)
        && !sub_234149044((uint64_t)&v37, &v31, 47))
      {
        v31 = v37;
      }
      if (!*((_QWORD *)&v31 + 1))
        return 53;
      if ((_DWORD)v26 && *v25 == 46)
      {
        v16 = &v31;
        goto LABEL_10;
      }
      v29 = (uint64_t *)&v35;
      v30 = (uint64_t *)&v31;
LABEL_43:
      v17 = sub_23419EF44(v29, v30);
      goto LABEL_44;
    default:
      return result;
  }
}

BOOL sub_23419EEEC(__int128 *a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 1);
  v4 = a2[1];
  if (v3 < v4)
    return 0;
  v6 = *a1;
  sub_234148BF8(&v6, v3 - v4);
  return sub_23419EF44((uint64_t *)&v6, a2);
}

BOOL sub_23419EF44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = a1[1];
  if (v2 != a2[1])
    return 0;
  if (!v2)
    return 1;
  v4 = 0;
  v5 = *a1;
  v6 = *a2;
  do
  {
    v7 = sub_23418E690(*(unsigned __int8 *)(v5 + v4));
    v8 = sub_23418E690(*(unsigned __int8 *)(v6 + v4));
    if (v7 != v8)
      break;
    ++v4;
  }
  while (v4 < a1[1]);
  return v7 == v8;
}

BOOL sub_23419EFD4(int a1, int *a2, uint64_t a3, int a4)
{
  return (int)sub_234146138(a3, "%*s", a4, "") >= 1 && sub_23413FEB0(a3, a2);
}

uint64_t sub_23419F040()
{
  return 1;
}

unint64_t *sub_23419F048(uint64_t a1, unsigned __int8 ***a2, unint64_t *a3)
{
  unint64_t *v5;

  v5 = a3;
  sub_2341A0DE4("Require Explicit Policy", *a2, &v5);
  sub_2341A0DE4("Inhibit Policy Mapping", a2[1], &v5);
  return v5;
}

uint64_t *sub_23419F09C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t *v4;
  unint64_t i;
  unint64_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (uint64_t *)sub_234144240((uint64_t)&unk_2505128C8);
  if (!v4)
    return v4;
  if (sub_2341709C4((uint64_t)a3))
  {
    for (i = 0; i < sub_2341709C4((uint64_t)a3); ++i)
    {
      v6 = sub_2341953E8(a3, i);
      v7 = (const char *)v6[1];
      if (!strcmp(v7, "requireExplicitPolicy"))
      {
        v8 = (uint64_t)v6;
        v9 = v4;
      }
      else
      {
        if (strcmp(v7, "inhibitPolicyMapping"))
        {
          sub_2341579B4(20, 0, 123, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_pcons.c", 128);
          sub_234157A5C(6u, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"section:");
LABEL_14:
          sub_234143E94((uint64_t)v4, (uint64_t)&unk_2505128C8);
          return 0;
        }
        v8 = (uint64_t)v6;
        v9 = v4 + 1;
      }
      if (!sub_2341A1024(v8, v9))
        goto LABEL_14;
    }
  }
  if (!v4[1] && !*v4)
  {
    sub_2341579B4(20, 0, 117, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_pcons.c", 134);
    goto LABEL_14;
  }
  return v4;
}

uint64_t sub_23419F20C()
{
  return sub_234144240((uint64_t)&unk_2505128C8);
}

void sub_23419F218(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505128C8);
}

unint64_t *sub_23419F224(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v8;
  char __s[80];
  char v10[80];
  uint64_t v11;

  v3 = a3;
  v11 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (sub_2341709C4((uint64_t)a2))
  {
    v5 = 0;
    do
    {
      v6 = (uint64_t *)sub_2341953E8(a2, v5);
      sub_23413F36C(v10, 80, *v6);
      sub_23413F36C(__s, 80, v6[1]);
      sub_2341A08E4(v10, __s, &v8);
      ++v5;
    }
    while (v5 < sub_2341709C4((uint64_t)a2));
    return v8;
  }
  return v3;
}

unint64_t *sub_23419F2F0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  _QWORD *v8;
  char **v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_2341953A0();
  if (v4 && sub_2341709C4((uint64_t)a3))
  {
    v5 = 0;
    while (1)
    {
      v6 = sub_2341953E8(a3, v5);
      v7 = v6;
      if (!v6[2] || !v6[1])
      {
        v10 = 126;
        goto LABEL_15;
      }
      v8 = (_QWORD *)sub_234144240((uint64_t)&unk_250512A78);
      if (!v8 || !sub_2341958E8(v4, (uint64_t)v8))
      {
        sub_234143E94((uint64_t)v8, (uint64_t)&unk_250512A78);
        goto LABEL_16;
      }
      *v8 = sub_23418EF98((const char *)v7[1], 0);
      v9 = sub_23418EF98((const char *)v7[2], 0);
      v8[1] = v9;
      if (!*v8 || !v9)
        break;
      if (++v5 >= sub_2341709C4((uint64_t)a3))
        return v4;
    }
    v10 = 140;
LABEL_15:
    sub_2341579B4(20, 0, 129, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_pmaps.c", v10);
    sub_234157A5C(6u, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"section:");
LABEL_16:
    sub_234195434(v4, (void (*)(uint64_t))sub_23419F484, (uint64_t)sub_23419F478);
    return 0;
  }
  return v4;
}

uint64_t sub_23419F46C()
{
  return sub_234144240((uint64_t)&unk_250512A78);
}

void sub_23419F478(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250512A78);
}

uint64_t sub_23419F484(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

BOOL sub_23419F490(uint64_t a1, unsigned __int16 **a2, unint64_t a3, uint64_t a4)
{
  unint64_t *v8;
  unint64_t *v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(unint64_t *, uint64_t);
  const char *v15;
  char *v16;
  unint64_t *v17;
  uint64_t v19;
  uint64_t (*v20)(unint64_t *, uint64_t, _QWORD);
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t *v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  unsigned int (*v28)(unint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;

  v8 = sub_23419E078(a2);
  if (!v8)
    return sub_23419F790(a1, (uint64_t)a2, a3, a4, 0);
  v9 = v8;
  v10 = (unsigned int *)sub_2341A5778((uint64_t)a2);
  v29 = sub_2341414C0((uint64_t)v10);
  v11 = sub_2341414B0(v10);
  v12 = sub_234141DAC(0, &v29, v11, v9[1]);
  if (v12)
  {
    v13 = v12;
    v14 = (uint64_t (*)(unint64_t *, uint64_t))v9[6];
    if (v14)
    {
      v15 = (const char *)v14(v9, v12);
      v16 = (char *)v15;
      if (v15)
      {
        sub_234146138(a1, "%*s%s", a4, "", v15);
        v17 = 0;
LABEL_33:
        v19 = 1;
LABEL_38:
        sub_234195434(v17, (void (*)(uint64_t))sub_23419FA4C, (uint64_t)sub_2341A0A78);
        sub_23418E3C4(v16);
        sub_234143E94(v13, v9[1]);
        return v19;
      }
      goto LABEL_36;
    }
    v20 = (uint64_t (*)(unint64_t *, uint64_t, _QWORD))v9[8];
    if (!v20)
    {
      v28 = (unsigned int (*)(unint64_t *, uint64_t, uint64_t, uint64_t))v9[10];
      if (v28)
      {
        v16 = 0;
        if (!v28(v9, v12, a1, a4))
        {
          v19 = 0;
          v17 = 0;
          goto LABEL_38;
        }
        v17 = 0;
        goto LABEL_33;
      }
      sub_2341579B4(20, 0, 147, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_prn.c", 138);
      v16 = 0;
LABEL_36:
      v17 = 0;
      goto LABEL_37;
    }
    v21 = v20(v9, v12, 0);
    v17 = (unint64_t *)v21;
    if (!v21)
    {
      v16 = 0;
LABEL_37:
      v19 = 0;
      goto LABEL_38;
    }
    v22 = *((_DWORD *)v9 + 1);
    if ((v22 & 4) == 0 || !sub_2341709C4(v21))
    {
      sub_234146138(a1, "%*s", a4, "");
      if (!sub_2341709C4((uint64_t)v17))
        sub_234144F70(a1, "<EMPTY>\n");
    }
    if (!sub_2341709C4((uint64_t)v17))
    {
LABEL_29:
      v16 = 0;
      goto LABEL_33;
    }
    v23 = 0;
    while (1)
    {
      if ((v22 & 4) != 0)
      {
        sub_234146138(a1, "%*s");
      }
      else if (v23)
      {
        sub_234146138(a1, ", ");
      }
      v24 = sub_2341953E8(v17, v23);
      v25 = (char *)v24[1];
      v26 = (const char *)v24[2];
      if (v25)
      {
        if (v26)
        {
          sub_234146138(a1, "%s:%s", (const char *)v24[1], v26);
          if ((v22 & 4) == 0)
            goto LABEL_28;
LABEL_27:
          sub_234144F70(a1, "\n");
          goto LABEL_28;
        }
        v27 = a1;
      }
      else
      {
        v27 = a1;
        v25 = (char *)v26;
      }
      sub_234144F70(v27, v25);
      if ((v22 & 4) != 0)
        goto LABEL_27;
LABEL_28:
      if (++v23 >= sub_2341709C4((uint64_t)v17))
        goto LABEL_29;
    }
  }
  return sub_23419F790(a1, (uint64_t)a2, a3, a4, 1);
}

BOOL sub_23419F790(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;

  v7 = (a3 >> 16) & 0xF;
  if ((unint64_t)(v7 - 2) < 2)
  {
    v8 = (unsigned int *)sub_2341A5778(a2);
    v9 = sub_2341414C0((uint64_t)v8);
    v10 = (int)sub_2341414B0(v8);
    return sub_234145E7C(a1, v9, v10, a4);
  }
  else if (v7)
  {
    if (v7 == 1)
    {
      if (a5)
        sub_234146138(a1, "%*s<Parse Error>");
      else
        sub_234146138(a1, "%*s<Not Supported>");
    }
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_23419F858(uint64_t a1, const char *a2, unint64_t *a3, unint64_t a4, int a5)
{
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  const char *v14;
  uint64_t v15;

  if (!sub_2341709C4((uint64_t)a3))
    return 1;
  if (a2)
  {
    sub_234146138(a1, "%*s%s:\n", a5, "", a2);
    a5 += 4;
  }
  if (!sub_2341709C4((uint64_t)a3))
    return 1;
  v10 = 0;
  while (1)
  {
    v11 = sub_2341953E8(a3, v10);
    if (a5)
    {
      if ((int)sub_234146138(a1, "%*s", a5, "") < 1)
        break;
    }
    v12 = sub_2341709C4((uint64_t)v11);
    sub_23413F374(a1, v12);
    v13 = sub_2341A5474((_BOOL8)v11);
    v14 = "critical";
    if (!v13)
      v14 = "";
    if ((int)sub_234146138(a1, ": %s\n", v14) < 1)
      break;
    if (!sub_23419F490(a1, (unsigned __int16 **)v11, a4, (a5 + 4)))
    {
      sub_234146138(a1, "%*s", a5 + 4, "");
      v15 = sub_2341A5778((uint64_t)v11);
      sub_23413FC94(a1, v15);
    }
    if ((int)sub_234144E68(a1, (uint64_t)"\n", 1) <= 0)
      break;
    if (++v10 >= sub_2341709C4((uint64_t)a3))
      return 1;
  }
  return 0;
}

_QWORD *sub_23419F9F0(uint64_t a1, unsigned __int16 **a2, int a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v8;
  _BOOL8 v9;

  result = sub_234145994();
  if (result)
  {
    v8 = (uint64_t)result;
    v9 = sub_23419F490((uint64_t)result, a2, a3, a4);
    sub_234144C64(v8);
    return (_QWORD *)v9;
  }
  return result;
}

uint64_t sub_23419FA4C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23419FA58(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;

  result = sub_23419FB1C(a1);
  if ((_DWORD)result)
  {
    if (a2 == -1)
    {
      return 1;
    }
    else
    {
      v7 = 0;
      while (dword_250512AC8[v7] != a2)
      {
        v7 += 6;
        if (v7 == 54)
          return 0;
      }
      if (a2 != 7 && (_DWORD)a3)
      {
        v8 = *(_DWORD *)(a1 + 48);
        if ((v8 & 2) != 0 && (*(_BYTE *)(a1 + 52) & 4) == 0)
          return 0;
        if ((~v8 & 0x2040) != 0 && (*(_DWORD *)(a1 + 48) & 0x11) != 0x11)
          return 0;
      }
      return (*(uint64_t (**)(int *, uint64_t, uint64_t))&dword_250512AC8[v7 + 2])(&dword_250512AC8[v7], a1, a3);
    }
  }
  return result;
}

BOOL sub_23419FB1C(uint64_t a1)
{
  pthread_rwlock_t *v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  int *v31;
  unint64_t *v32;
  int v33;
  unsigned int v35;
  int v36;

  v2 = (pthread_rwlock_t *)(a1 + 144);
  sub_234195C1C((pthread_rwlock_t *)(a1 + 144));
  v3 = *(_DWORD *)(a1 + 48);
  sub_234195C54(v2);
  if ((v3 & 0x100) == 0)
  {
    sub_234195C38(v2);
    if ((*(_BYTE *)(a1 + 49) & 1) != 0)
    {
LABEL_89:
      sub_234195C54(v2);
      return ((*(_DWORD *)(a1 + 48) >> 7) & 1) == 0;
    }
    v4 = sub_234170BAC();
    if (!sub_2341A9C50((int **)a1, (uint64_t)v4, a1 + 104, 0))
      *(_DWORD *)(a1 + 48) |= 0x80u;
    if (!sub_2341A4DA8((uint64_t **)a1))
      *(_DWORD *)(a1 + 48) |= 0x40u;
    v35 = 0;
    v5 = sub_2341A3660(a1, 87, (int *)&v35, 0);
    if (v5)
    {
      v6 = (_DWORD *)v5;
      if (*(_DWORD *)v5)
        *(_DWORD *)(a1 + 48) |= 0x10u;
      v7 = *(_QWORD *)(v5 + 8);
      if (v7)
      {
        if (*(_DWORD *)(v7 + 4) == 258 || !*v6)
        {
          v8 = 0;
          *(_DWORD *)(a1 + 48) |= 0x80u;
        }
        else
        {
          v8 = sub_23413EAA0(v7);
        }
      }
      else
      {
        v8 = -1;
      }
      *(_QWORD *)(a1 + 40) = v8;
      sub_23419AFDC((uint64_t)v6);
      v9 = 1;
    }
    else
    {
      if (v35 == -1)
        goto LABEL_20;
      v9 = 128;
    }
    *(_DWORD *)(a1 + 48) |= v9;
LABEL_20:
    v10 = sub_2341A3660(a1, 83, (int *)&v35, 0);
    if (v10)
    {
      if (*(int *)v10 < 1)
      {
        *(_DWORD *)(a1 + 52) = 0;
      }
      else
      {
        v11 = **(unsigned __int8 **)(v10 + 8);
        *(_DWORD *)(a1 + 52) = v11;
        if (*(int *)v10 >= 2)
          *(_DWORD *)(a1 + 52) = v11 | (*(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + 1) << 8);
      }
      *(_DWORD *)(a1 + 48) |= 2u;
      sub_234144630(v10);
    }
    else if (v35 != -1)
    {
      *(_DWORD *)(a1 + 48) |= 0x80u;
    }
    *(_DWORD *)(a1 + 56) = 0;
    v12 = sub_2341A3660(a1, 126, (int *)&v35, 0);
    if (v12)
    {
      v13 = (unint64_t *)v12;
      *(_DWORD *)(a1 + 48) |= 4u;
      if (sub_2341709C4(v12))
      {
        v14 = 0;
        while (1)
        {
          v15 = (unsigned __int16 *)sub_2341953E8(v13, v14);
          v16 = sub_23418EBF8(v15);
          if (v16 <= 179)
          {
            v17 = 1;
            switch(v16)
            {
              case 129:
                goto LABEL_44;
              case 130:
                v17 = 2;
                goto LABEL_44;
              case 131:
                v17 = 8;
                goto LABEL_44;
              case 132:
                v17 = 4;
                goto LABEL_44;
              case 133:
                v17 = 64;
                goto LABEL_44;
              case 137:
              case 139:
                v17 = 16;
                goto LABEL_44;
              default:
                goto LABEL_45;
            }
            goto LABEL_45;
          }
          if (v16 == 180)
            break;
          if (v16 == 297)
          {
            v17 = 128;
            goto LABEL_44;
          }
          if (v16 == 910)
          {
            v17 = 256;
LABEL_44:
            *(_DWORD *)(a1 + 56) |= v17;
          }
LABEL_45:
          if (++v14 >= sub_2341709C4((uint64_t)v13))
            goto LABEL_46;
        }
        v17 = 32;
        goto LABEL_44;
      }
LABEL_46:
      sub_234195434(v13, (void (*)(uint64_t))sub_2341A06C8, (uint64_t)sub_23413F6D0);
    }
    else if (v35 != -1)
    {
      *(_DWORD *)(a1 + 48) |= 0x80u;
    }
    v18 = sub_2341A3660(a1, 82, (int *)&v35, 0);
    *(_QWORD *)(a1 + 64) = v18;
    if (!v18 && v35 != -1)
      *(_DWORD *)(a1 + 48) |= 0x80u;
    v19 = sub_2341A3660(a1, 90, (int *)&v35, 0);
    *(_QWORD *)(a1 + 72) = v19;
    if (!v19 && v35 != -1)
      *(_DWORD *)(a1 + 48) |= 0x80u;
    v20 = sub_2341A323C(a1);
    v21 = sub_2341A3128(a1);
    if (!sub_2341A2FF4(v20, v21))
    {
      *(_DWORD *)(a1 + 48) |= 0x20u;
      if (!sub_2341A0188(a1, *(uint64_t **)(a1 + 72)))
      {
        v22 = *(_DWORD *)(a1 + 48);
        if ((v22 & 2) == 0 || (*(_BYTE *)(a1 + 52) & 4) != 0)
          *(_DWORD *)(a1 + 48) = v22 | 0x2000;
      }
    }
    v23 = sub_2341A3660(a1, 85, (int *)&v35, 0);
    *(_QWORD *)(a1 + 88) = v23;
    if (!v23 && v35 != -1)
      *(_DWORD *)(a1 + 48) |= 0x80u;
    v24 = sub_2341A3660(a1, 666, (int *)&v35, 0);
    *(_QWORD *)(a1 + 96) = v24;
    if (!v24 && v35 != -1)
      *(_DWORD *)(a1 + 48) |= 0x80u;
    v36 = 0;
    v25 = sub_2341A3660(a1, 103, &v36, 0);
    *(_QWORD *)(a1 + 80) = v25;
    if (v25 || v36 == -1)
    {
      if (!sub_2341709C4(v25))
        goto LABEL_82;
      v26 = 0;
      while (1)
      {
        v27 = sub_2341953E8(*(unint64_t **)(a1 + 80), v26);
        if (*v27 && *(_DWORD *)*v27 == 1)
        {
          v28 = v27;
          if (!sub_2341709C4(v27[2]))
            goto LABEL_79;
          v29 = 0;
          while (1)
          {
            v30 = sub_2341953E8((unint64_t *)v28[2], v29);
            if (*(_DWORD *)v30 == 4)
              break;
            if (++v29 >= sub_2341709C4(v28[2]))
              goto LABEL_79;
          }
          v31 = (int *)v30[1];
          if (!v31)
LABEL_79:
            v31 = (int *)sub_2341A3128(a1);
          if (!sub_23419CE28(*v28, v31))
            break;
        }
        if (++v26 >= sub_2341709C4(*(_QWORD *)(a1 + 80)))
          goto LABEL_82;
      }
    }
    *(_DWORD *)(a1 + 48) |= 0x80u;
LABEL_82:
    v35 = 0;
    if ((int)sub_2341A35F4(a1) >= 1)
    {
      while (1)
      {
        v32 = sub_2341A3624(a1, v35);
        if (sub_2341A5474((_BOOL8)v32) && !sub_2341A0118((uint64_t)v32))
          break;
        v33 = ++v35;
        if (v33 >= (int)sub_2341A35F4(a1))
          goto LABEL_88;
      }
      *(_DWORD *)(a1 + 48) |= 0x200u;
    }
LABEL_88:
    *(_DWORD *)(a1 + 48) |= 0x100u;
    goto LABEL_89;
  }
  return ((*(_DWORD *)(a1 + 48) >> 7) & 1) == 0;
}

int *sub_2341A0088(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (dword_250512AC8[v1] != a1)
  {
    v1 += 6;
    if (v1 == 54)
      return 0;
  }
  return &dword_250512AC8[v1];
}

uint64_t sub_2341A00BC(char *__s2)
{
  uint64_t v2;

  v2 = 0;
  while (strcmp(*(const char **)&dword_250512AC8[v2 + 4], __s2))
  {
    v2 += 6;
    if (v2 == 54)
      return 0xFFFFFFFFLL;
  }
  return dword_250512AC8[v2];
}

BOOL sub_2341A0118(uint64_t a1)
{
  unsigned __int16 *v1;
  int v2;
  _BOOL8 result;

  v1 = (unsigned __int16 *)sub_2341709C4(a1);
  v2 = sub_23418EBF8(v1);
  result = 1;
  if (v2 <= 400)
  {
    if ((v2 - 83) <= 0x2B && ((1 << (v2 - 83)) & 0x80000000055) != 0)
      return result;
    return v2 == 748;
  }
  if (v2 != 401 && v2 != 666 && v2 != 747)
    return v2 == 748;
  return result;
}

uint64_t sub_2341A0188(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (!a2)
    return 0;
  v4 = *a2;
  if (*a2)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
    {
      if (sub_23413F770(v4, v5))
        return 30;
    }
  }
  if (a2[2])
  {
    v7 = sub_2341A3248(a1);
    if (sub_23413E40C(v7, a2[2]))
      return 31;
  }
  v8 = (unint64_t *)a2[1];
  if (v8 && sub_2341709C4((uint64_t)v8))
  {
    v9 = 0;
    while (1)
    {
      v10 = sub_2341953E8(v8, v9);
      if (*(_DWORD *)v10 == 4)
        break;
      if (++v9 >= sub_2341709C4((uint64_t)v8))
        return 0;
    }
    v11 = v10[1];
    if (v11)
    {
      v12 = sub_2341A3128(a1);
      if (sub_2341A2FF4(v11, v12))
        return 31;
    }
  }
  return 0;
}

uint64_t sub_2341A026C(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  result = sub_23419FB1C(a1);
  if ((_DWORD)result)
  {
    v3 = *(_DWORD *)(a1 + 48);
    if ((v3 & 2) == 0 || (*(_BYTE *)(a1 + 52) & 4) != 0)
    {
      v4 = (~v3 & 0x2040) == 0;
      v5 = v3 & (v3 >> 4) & 1;
      if (v4)
        return 1;
      else
        return v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2341A02C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;

  v4 = sub_2341A323C(a1);
  v5 = sub_2341A3128(a2);
  if (sub_2341A2FF4(v4, v5))
    return 29;
  if (!sub_23419FB1C(a1) || !sub_23419FB1C(a2))
    return 1;
  v7 = *(uint64_t **)(a2 + 72);
  if (!v7 || (result = sub_2341A0188(a1, v7), !(_DWORD)result))
  {
    if ((*(_BYTE *)(a1 + 48) & 2) == 0 || (*(_BYTE *)(a1 + 52) & 4) != 0)
      return 0;
    else
      return 32;
  }
  return result;
}

uint64_t sub_2341A0360(uint64_t a1)
{
  sub_23419FB1C(a1);
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_2341A0384(uint64_t a1)
{
  uint64_t result;

  result = sub_23419FB1C(a1);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
      return *(unsigned int *)(a1 + 52);
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_2341A03BC(uint64_t a1)
{
  uint64_t result;

  result = sub_23419FB1C(a1);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a1 + 48) & 4) != 0)
      return *(unsigned int *)(a1 + 56);
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_2341A03F4(uint64_t a1)
{
  if (sub_23419FB1C(a1))
    return *(_QWORD *)(a1 + 64);
  else
    return 0;
}

uint64_t sub_2341A0424(uint64_t a1)
{
  uint64_t v2;

  if (sub_23419FB1C(a1) && (v2 = *(_QWORD *)(a1 + 72)) != 0)
    return *(_QWORD *)v2;
  else
    return 0;
}

uint64_t sub_2341A045C(uint64_t a1)
{
  uint64_t v2;

  if (sub_23419FB1C(a1) && (v2 = *(_QWORD *)(a1 + 72)) != 0)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t sub_2341A0494(uint64_t a1)
{
  uint64_t v2;

  if (sub_23419FB1C(a1) && (v2 = *(_QWORD *)(a1 + 72)) != 0)
    return *(_QWORD *)(v2 + 16);
  else
    return 0;
}

uint64_t sub_2341A04CC(uint64_t a1)
{
  if (sub_23419FB1C(a1) && (*(_BYTE *)(a1 + 48) & 1) != 0)
    return *(_QWORD *)(a1 + 40);
  else
    return -1;
}

BOOL sub_2341A0504(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  _BOOL8 result;

  v3 = *(_DWORD *)(a2 + 48);
  if ((v3 & 4) != 0 && (*(_BYTE *)(a2 + 56) & 2) == 0)
    return 0;
  result = 1;
  if (!a3 && (v3 & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 0x88) != 0;
  return result;
}

BOOL sub_2341A053C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  _BOOL8 result;

  v3 = *(_DWORD *)(a2 + 48);
  if ((v3 & 4) != 0 && (*(_BYTE *)(a2 + 56) & 1) == 0)
    return 0;
  result = 1;
  if (!a3 && (v3 & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 0xA8) != 0;
  return result;
}

uint64_t sub_2341A0574(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 48);
  if ((v3 & 4) != 0 && (*(_BYTE *)(a2 + 56) & 1) == 0)
    return 0;
  result = 1;
  if (!a3 && (v3 & 2) != 0)
    return (*(_DWORD *)(a2 + 52) >> 5) & 1;
  return result;
}

BOOL sub_2341A05A4(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  _BOOL8 result;

  v3 = *(_DWORD *)(a2 + 48);
  if ((v3 & 4) != 0 && (*(_BYTE *)(a2 + 56) & 4) == 0)
    return 0;
  result = 1;
  if (!a3 && (v3 & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 0xC0) != 0;
  return result;
}

uint64_t sub_2341A05D8(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 48);
  if ((v3 & 4) != 0 && (*(_BYTE *)(a2 + 56) & 4) == 0)
    return 0;
  result = 1;
  if (!a3 && (v3 & 2) != 0)
    return (*(_DWORD *)(a2 + 52) >> 5) & 1;
  return result;
}

uint64_t sub_2341A0608(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3 && (*(_BYTE *)(a2 + 48) & 2) != 0)
    return (*(_DWORD *)(a2 + 52) >> 1) & 1;
  else
    return 1;
}

uint64_t sub_2341A0628()
{
  return 1;
}

BOOL sub_2341A0630(uint64_t a1, _DWORD *a2, int a3)
{
  _BOOL8 result;
  int v5;
  unsigned int v7;
  unint64_t *v8;

  if (a3)
    return 1;
  v5 = a2[12];
  if ((v5 & 2) != 0)
  {
    result = 0;
    if ((v5 & 4) == 0)
      return result;
    if ((a2[13] & 0xFFFFFF3F) != 0 || (a2[13] & 0xC0) == 0)
      return result;
  }
  else if ((v5 & 4) == 0)
  {
    return 0;
  }
  if (a2[14] != 64)
    return 0;
  v7 = sub_2341A3600((uint64_t)a2, 0x7Eu, -1);
  if ((v7 & 0x80000000) != 0)
    return 1;
  v8 = sub_2341A3624((uint64_t)a2, v7);
  result = sub_2341A5474((_BOOL8)v8);
  if (result)
    return 1;
  return result;
}

uint64_t sub_2341A06C8(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A06D4(uint64_t a1, int *a2)
{
  return sub_2341A137C(*((_QWORD *)a2 + 1), *a2);
}

_QWORD *sub_2341A06E0(uint64_t a1, uint64_t a2, const char *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v8;

  v8 = 0;
  v3 = sub_2341A1468(a3, &v8);
  if (!v3)
    return 0;
  v4 = v3;
  if (v8 >> 31)
  {
    sub_2341579B4(20, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_skey.c", 84);
LABEL_6:
    sub_23418E3C4(v4);
    return 0;
  }
  v5 = sub_234144628();
  if (!v5)
    goto LABEL_6;
  v6 = v5;
  sub_234141374((uint64_t)v5, (uint64_t)v4, v8);
  return v6;
}

uint64_t sub_2341A0770(uint64_t a1, int *a2)
{
  return sub_2341A137C(*((_QWORD *)a2 + 1), *a2);
}

_QWORD *sub_2341A077C(int a1, uint64_t a2, char *__s1)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  __int16 v16;
  int v17;
  char v18[64];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = strcmp(__s1, "hash");
  if ((_DWORD)v5)
    return sub_2341A06E0(v5, v6, __s1);
  v8 = sub_234144628();
  if (v8)
  {
    v17 = 0;
    if (!a2)
      goto LABEL_14;
    if (*(_DWORD *)a2 != 1)
    {
      v9 = *(_QWORD **)(a2 + 24);
      if (v9)
      {
        v10 = *v9 + 40;
LABEL_10:
        v12 = *(int **)(*(_QWORD *)v10 + 8);
        if (v12)
        {
          v13 = *((_QWORD *)v12 + 1);
          v14 = *v12;
          v15 = sub_234170AC4();
          if (sub_2341704B4(v13, v14, (uint64_t)v18, &v17, (uint64_t)v15)
            && sub_23413F774((uint64_t)v8, v18, v17))
          {
            return v8;
          }
          goto LABEL_16;
        }
        v16 = 136;
LABEL_15:
        sub_2341579B4(20, 0, 144, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_skey.c", v16);
LABEL_16:
        sub_234144630((uint64_t)v8);
        return 0;
      }
      v11 = *(_QWORD **)(a2 + 16);
      if (v11)
      {
        v10 = *v11 + 48;
        goto LABEL_10;
      }
LABEL_14:
      v16 = 125;
      goto LABEL_15;
    }
  }
  return v8;
}

uint64_t sub_2341A08E4(const char *a1, char *__s, unint64_t **a3)
{
  size_t v6;

  if (__s)
    v6 = strlen(__s);
  else
    v6 = 0;
  return sub_2341A093C(a1, __s, v6, __s == 0, a3);
}

uint64_t sub_2341A093C(const char *a1, _BYTE *a2, size_t a3, int a4, unint64_t **a5)
{
  unint64_t *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t *v13;

  v9 = *a5;
  if (!a1)
  {
    v10 = 0;
    if (a4)
      goto LABEL_4;
    goto LABEL_11;
  }
  v10 = (char *)sub_23418E55C(a1);
  if (!v10)
    goto LABEL_14;
  if (!a4)
  {
LABEL_11:
    if (!a3 || !memchr(a2, 0, a3))
    {
      v11 = sub_23418E928(a2, a3);
      if (!v11)
      {
        v12 = 0;
        if (v9)
          goto LABEL_17;
        goto LABEL_16;
      }
      goto LABEL_5;
    }
    sub_2341579B4(20, 0, 163, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_utl.c", 104);
LABEL_14:
    v12 = 0;
    v11 = 0;
    goto LABEL_15;
  }
LABEL_4:
  v11 = 0;
LABEL_5:
  v12 = sub_234147410();
  if (v12)
  {
    if (*a5 || (v13 = sub_2341953A0(), (*a5 = v13) != 0))
    {
      *v12 = 0;
      v12[1] = v10;
      v12[2] = v11;
      if (sub_2341958E8(*a5, (uint64_t)v12))
        return 1;
    }
  }
LABEL_15:
  if (!v9)
  {
LABEL_16:
    sub_234141344((uint64_t)*a5);
    *a5 = 0;
  }
LABEL_17:
  sub_23418E3C4(v12);
  sub_23418E3C4(v10);
  sub_23418E3C4(v11);
  return 0;
}

uint64_t sub_2341A0A60(const char *a1, int *a2, unint64_t **a3)
{
  return sub_2341A093C(a1, *((_BYTE **)a2 + 1), *a2, 0, a3);
}

void sub_2341A0A78(_QWORD *a1)
{
  if (a1)
  {
    sub_23418E3C4((_QWORD *)a1[1]);
    sub_23418E3C4((_QWORD *)a1[2]);
    sub_23418E3C4((_QWORD *)*a1);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_2341A0AB8(const char *a1, int a2, unint64_t **a3)
{
  char *v4;
  size_t v5;

  if (a2)
  {
    v4 = "TRUE";
    v5 = 4;
  }
  else
  {
    v4 = "FALSE";
    v5 = 5;
  }
  return sub_2341A093C(a1, v4, v5, 0, a3);
}

uint64_t sub_2341A0AE8(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v2 = sub_23413EC84(a2, 0);
  v3 = v2;
  if (v2)
    v4 = sub_2341A0B40(v2);
  else
    v4 = 0;
  sub_234161FC4((_QWORD **)v3);
  return v4;
}

uint64_t sub_2341A0B40(uint64_t *a1)
{
  const char *v3;
  char *v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char *v8;

  if (sub_2341621D4(a1) <= 0x1F)
    return sub_234146D34((uint64_t)a1);
  v3 = (const char *)sub_234146A3C((uint64_t)a1);
  if (!v3)
    return 0;
  v4 = (char *)v3;
  v5 = strlen(v3) + 3;
  v6 = sub_23418E2E4(v5);
  v7 = v6;
  if (v6)
  {
    if (*v4 == 45)
    {
      sub_23418E9CC(v6, "-0x", v5);
      v8 = v4 + 1;
    }
    else
    {
      sub_23418E9CC(v6, "0x", v5);
      v8 = v4;
    }
    sub_23418EA40(v7, v8, v5);
  }
  sub_23418E3C4(v4);
  return (uint64_t)v7;
}

uint64_t sub_2341A0C0C(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v2 = sub_23413EBD8(a2, 0);
  v3 = v2;
  if (v2)
    v4 = sub_2341A0B40(v2);
  else
    v4 = 0;
  sub_234161FC4((_QWORD **)v3);
  return v4;
}

_QWORD *sub_2341A0C64(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  int v5;
  int v6;
  __int16 v7;
  int v8;
  __int16 v9;
  BOOL v11;
  void *v12;

  v2 = a2;
  if (!a2)
  {
    v8 = 126;
    v9 = 237;
LABEL_11:
    sub_2341579B4(20, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_utl.c", v9);
    return v2;
  }
  v3 = sub_234161F88();
  v12 = v3;
  v4 = *(unsigned __int8 *)v2;
  if (v4 == 45)
    v2 = (_QWORD *)((char *)v2 + 1);
  if (*(_BYTE *)v2 == 48 && (*((unsigned __int8 *)v2 + 1) | 0x20) == 0x78)
  {
    v2 = (_QWORD *)((char *)v2 + 2);
    v5 = sub_234146B28((uint64_t *)&v12, v2);
    if (!v5)
      goto LABEL_14;
  }
  else
  {
    if (strlen((const char *)v2) > 0x2000)
    {
      sub_234161FC4((_QWORD **)v3);
      v6 = 127;
      v7 = 265;
LABEL_15:
      sub_2341579B4(20, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_utl.c", v7);
      return 0;
    }
    v5 = sub_234146F14((uint64_t *)&v12, v2);
    if (!v5)
    {
LABEL_14:
      sub_234161FC4((_QWORD **)v12);
      v6 = 102;
      v7 = 273;
      goto LABEL_15;
    }
  }
  if (*((_BYTE *)v2 + v5))
    goto LABEL_14;
  v11 = v4 != 45 || sub_234161A24((uint64_t)v12);
  v2 = sub_23413EAF4((uint64_t *)v12, 0);
  sub_234161FC4((_QWORD **)v12);
  if (!v2)
  {
    v8 = 103;
    v9 = 284;
    goto LABEL_11;
  }
  if (!v11)
    *((_DWORD *)v2 + 1) |= 0x100u;
  return v2;
}

uint64_t sub_2341A0DE4(const char *a1, unsigned __int8 **a2, unint64_t **a3)
{
  uint64_t result;
  _BYTE *v6;
  size_t v7;
  uint64_t v8;

  if (!a2)
    return 1;
  result = sub_2341A0C0C((uint64_t)a1, a2);
  if (result)
  {
    v6 = (_BYTE *)result;
    v7 = strlen((const char *)result);
    v8 = sub_2341A093C(a1, v6, v7, 0, a3);
    sub_23418E3C4(v6);
    return v8;
  }
  return result;
}

uint64_t sub_2341A0E50(const char *a1, _DWORD *a2)
{
  if (!strcmp(a1, "TRUE")
    || !strcmp(a1, "true")
    || !strcmp(a1, "Y")
    || !strcmp(a1, "y")
    || !strcmp(a1, "YES")
    || !strcmp(a1, "yes"))
  {
    *a2 = 255;
  }
  else
  {
    if (strcmp(a1, "FALSE")
      && strcmp(a1, "false")
      && strcmp(a1, "N")
      && strcmp(a1, "n")
      && strcmp(a1, "NO")
      && strcmp(a1, "no"))
    {
      sub_2341579B4(20, 0, 120, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_utl.c", 319);
      return 0;
    }
    *a2 = 0;
  }
  return 1;
}

uint64_t sub_2341A0F94(uint64_t a1, _DWORD *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(const char **)(a1 + 16);
  if (v2)
  {
    if (sub_2341A0E50(v2, a2))
      return 1;
  }
  else
  {
    sub_2341579B4(20, 0, 120, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_utl.c", 326);
  }
  sub_234157A5C(6u, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"section:");
  return 0;
}

uint64_t sub_2341A1024(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = sub_2341A0C64(a1, *(_QWORD **)(a1 + 16));
  if (v3)
  {
    v11 = v3;
    sub_234144630(*a2);
    *a2 = (uint64_t)v11;
    return 1;
  }
  else
  {
    sub_234157A5C(6u, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"section:");
    return 0;
  }
}

unint64_t *sub_2341A10B0(const char *a1)
{
  const char *v1;
  char *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  int v6;
  unsigned int v7;
  const char *v9;
  const char *v10;
  char *v11;
  size_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  size_t v16;
  char *v17;
  int v18;
  int v20;
  __int16 v21;
  unint64_t *v22;

  v22 = 0;
  v1 = sub_23418E55C(a1);
  v2 = (char *)v1;
  if (!v1)
    goto LABEL_33;
  v3 = 0;
  v4 = v1 + 1;
  v5 = v1;
  v6 = 1;
  while (1)
  {
    v7 = *((unsigned __int8 *)v4 - 1);
    if (v7 <= 0xD && ((1 << v7) & 0x2401) != 0)
    {
      v14 = sub_2341A12F8(v1);
      v15 = v14;
      if (v6 == 2)
      {
        if (!v14)
        {
          v20 = 126;
          v21 = 421;
          goto LABEL_32;
        }
        v16 = strlen(v14);
        v14 = v3;
        v17 = (char *)v15;
        v18 = 0;
      }
      else
      {
        if (!v14)
        {
          v20 = 125;
          v21 = 431;
          goto LABEL_32;
        }
        v17 = 0;
        v16 = 0;
        v18 = 1;
      }
      sub_2341A093C(v14, v17, v16, v18, &v22);
      sub_23418E3C4(v2);
      return v22;
    }
    if (v6 == 2)
    {
      if (v7 == 44)
      {
        *((_BYTE *)v4 - 1) = 0;
        v10 = sub_2341A12F8(v1);
        if (!v10)
        {
          v20 = 126;
          v21 = 405;
          goto LABEL_32;
        }
        v11 = (char *)v10;
        v12 = strlen(v10);
        sub_2341A093C(v3, v11, v12, 0, &v22);
        v3 = 0;
        v1 = v5 + 1;
LABEL_16:
        v6 = 1;
        goto LABEL_20;
      }
      goto LABEL_17;
    }
    if (v7 != 44)
    {
      if (v7 != 58)
        goto LABEL_16;
      *((_BYTE *)v4 - 1) = 0;
      v9 = sub_2341A12F8(v1);
      if (!v9)
      {
        v20 = 125;
        v21 = 377;
        goto LABEL_32;
      }
      v3 = v9;
      v1 = v5 + 1;
LABEL_17:
      v6 = 2;
      goto LABEL_20;
    }
    *((_BYTE *)v4 - 1) = 0;
    v13 = sub_2341A12F8(v1);
    if (!v13)
      break;
    v3 = v13;
    v6 = 1;
    sub_2341A093C(v13, 0, 0, 1, &v22);
    v1 = v4;
LABEL_20:
    ++v5;
    ++v4;
  }
  v20 = 125;
  v21 = 389;
LABEL_32:
  sub_2341579B4(20, 0, v20, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_utl.c", v21);
LABEL_33:
  sub_23418E3C4(v2);
  sub_234195434(v22, (void (*)(uint64_t))sub_2341A22F0, (uint64_t)sub_2341A0A78);
  return 0;
}

const char *sub_2341A12F8(const char *a1)
{
  const char *v1;
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  _BOOL4 v6;

  v1 = a1;
  v2 = *(unsigned __int8 *)a1;
  if (!v2)
    return 0;
  while (sub_23418E6A4(v2))
  {
    v3 = *(unsigned __int8 *)++v1;
    v2 = v3;
    if (!v3)
      return 0;
  }
  if (!*v1)
    return 0;
  v4 = strlen(v1);
  while (1)
  {
    v5 = v4 - 1;
    if (v4 == 1)
      break;
    v6 = sub_23418E6A4(v1[v4 - 1]);
    v4 = v5;
    if (!v6)
    {
      v1[v5 + 1] = 0;
      break;
    }
  }
  if (*v1)
    return v1;
  else
    return 0;
}

uint64_t sub_2341A137C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[3];

  memset(v8, 0, sizeof(v8));
  if (sub_234147B54((uint64_t)v8, 3 * a2 + 1))
  {
    if (a2)
    {
      v4 = 0;
      while ((!v4 || sub_234148008((uint64_t)v8, 0x3Au))
           && sub_234148008((uint64_t)v8, a0123456789abcd_3[(unint64_t)*(unsigned __int8 *)(a1 + v4) >> 4])&& sub_234148008((uint64_t)v8, a0123456789abcd_3[*(_BYTE *)(a1 + v4) & 0xF]))
      {
        if (a2 == ++v4)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v6 = 0;
      v7 = 0;
      if (sub_234148008((uint64_t)v8, 0) && sub_234147C00((uint64_t)v8, &v7, &v6))
        return v7;
    }
  }
  sub_234147BE4((uint64_t)v8);
  return 0;
}

_QWORD *sub_2341A1468(const char *a1, _QWORD *a2)
{
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE *v7;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  __int16 v13;

  v13 = 0;
  if (a1)
  {
    v3 = a1;
    v4 = strlen(a1);
    v5 = sub_23418E2E4(v4 >> 1);
    v6 = v5;
    if (!v5)
    {
      sub_23418E3C4(0);
      return v6;
    }
    v7 = v5;
    while (2)
    {
      ++v3;
      do
      {
        v8 = *((unsigned __int8 *)v3 - 1);
        if (!*(v3 - 1))
        {
          if (a2)
            *a2 = v7 - (_BYTE *)v6;
          return v6;
        }
        ++v3;
      }
      while (v8 == 58);
      v9 = *((unsigned __int8 *)v3 - 1);
      if (!*(v3 - 1))
      {
        sub_2341579B4(20, 0, 146, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_utl.c", 515);
        sub_23418E3C4(v6);
        return 0;
      }
      if (sub_23418E624((_BYTE *)&v13 + 1, v8) && sub_23418E624(&v13, v9))
      {
        *v7++ = v13 | (16 * HIBYTE(v13));
        continue;
      }
      break;
    }
    sub_23418E3C4(v6);
    v10 = 118;
    v11 = 540;
  }
  else
  {
    v10 = 124;
    v11 = 502;
  }
  sub_2341579B4(20, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/v3_utl.c", v11);
  return 0;
}

BOOL sub_2341A1598(const char *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (strncmp(a1, __s, v4))
    return 0;
  return !a1[v4] || a1[v4] == 46;
}

uint64_t sub_2341A15FC(uint64_t a1)
{
  unint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (unint64_t *)sub_2341A3660(a1, 85, 0, 0);
  v3 = (uint64_t *)sub_2341A323C(a1);
  v4 = sub_2341A165C(v3, v2);
  sub_234195434(v2, (void (*)(uint64_t))sub_2341A22FC, (uint64_t)sub_23419D860);
  return v4;
}

uint64_t sub_2341A165C(uint64_t *a1, unint64_t *a2)
{
  int v4;
  unsigned int v5;
  unint64_t *v6;
  int *v7;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;

  v11 = 0;
  v4 = -1;
  while (1)
  {
    v5 = sub_2341A84C4(a1, 0x30u, v4);
    if ((v5 & 0x80000000) != 0)
      break;
    v4 = v5;
    v6 = sub_2341A8458((unint64_t **)a1, v5);
    v7 = (int *)sub_2340DE85C((uint64_t)v6);
    if (!sub_2341A17E0(&v11, v7))
      return 0;
  }
  if (sub_2341709C4((uint64_t)a2))
  {
    v9 = 0;
    while (1)
    {
      v10 = sub_2341953E8(a2, v9);
      if (*(_DWORD *)v10 == 1 && !sub_2341A17E0(&v11, (int *)v10[1]))
        break;
      if (++v9 >= sub_2341709C4((uint64_t)a2))
        return v11;
    }
    return 0;
  }
  return v11;
}

unint64_t sub_2341A1724(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v7;

  v7 = 0;
  v1 = sub_2341A3660(a1, 177, 0, 0);
  if (!v1)
    return 0;
  v2 = (unint64_t *)v1;
  v3 = 0;
  if (sub_2341709C4(v1))
  {
    do
    {
      v4 = sub_2341953E8(v2, v3);
      if (sub_23418EBF8((unsigned __int16 *)*v4) == 178)
      {
        v5 = v4[1];
        if (*(_DWORD *)v5 == 6 && !sub_2341A17E0((uint64_t *)&v7, *(int **)(v5 + 8)))
          break;
      }
      ++v3;
    }
    while (v3 < sub_2341709C4((uint64_t)v2));
    v3 = v7;
  }
  sub_23419DF10((uint64_t)v2);
  return v3;
}

uint64_t sub_2341A17E0(uint64_t *a1, int *a2)
{
  _BYTE *v3;
  size_t v4;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;

  if (a2[1] != 22)
    return 1;
  v3 = (_BYTE *)*((_QWORD *)a2 + 1);
  if (!v3)
    return 1;
  v4 = *a2;
  if (!(_DWORD)v4 || memchr(*((void **)a2 + 1), 0, *a2))
    return 1;
  if (!*a1)
  {
    v7 = sub_234195344((uint64_t)sub_2341A2314);
    *a1 = (uint64_t)v7;
    if (!v7)
    {
      v8 = 0;
      goto LABEL_15;
    }
    v3 = (_BYTE *)*((_QWORD *)a2 + 1);
    v4 = *a2;
  }
  v8 = sub_23418E928(v3, v4);
  if (v8)
  {
    sub_23419598C(*a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2341A2320);
    if (sub_23419574C(*a1, 0, (uint64_t)v8, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_2341A2320))
    {
      sub_23418E3C4(v8);
      return 1;
    }
    if (sub_2341958E8((unint64_t *)*a1, (uint64_t)v8))
      return 1;
  }
LABEL_15:
  sub_23418E3C4(v8);
  sub_234195434((unint64_t *)*a1, (void (*)(uint64_t))sub_2341A234C, (uint64_t)sub_2341A198C);
  result = 0;
  *a1 = 0;
  return result;
}

uint64_t sub_2341A18F0(_QWORD *a1)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = sub_2341A48C4(a1);
  v3 = (unint64_t *)sub_23419E23C(v2, 85, 0, 0);
  v4 = (uint64_t *)sub_2341A47A8((uint64_t)a1);
  v5 = sub_2341A165C(v4, v3);
  sub_234195434(v3, (void (*)(uint64_t))sub_2341A22FC, (uint64_t)sub_23419D860);
  sub_234195434(v2, (void (*)(uint64_t))sub_2341A2308, (uint64_t)sub_2341AAC00);
  return v5;
}

void sub_2341A1978(unint64_t *a1)
{
  sub_234195434(a1, (void (*)(uint64_t))sub_2341A234C, (uint64_t)sub_2341A198C);
}

BOOL sub_2341A1990(_BYTE *a1, unint64_t a2)
{
  _BYTE *v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  int v7;

  if (!a2)
    return 0;
  v2 = a1;
  if (a1[a2 - 1] == 46)
    v3 = a2 - 1;
  else
    v3 = a2;
  if (v3 >= 2)
  {
    if (*a1 != 42 || a1[1] != 46)
      goto LABEL_10;
    v2 = a1 + 2;
    v3 -= 2;
  }
  if (v3)
  {
LABEL_10:
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = v2[v5];
      if (!sub_23418E674(v7))
      {
        if (v7 > 57)
        {
          if (v7 != 58 && v7 != 95)
            return v4;
        }
        else if (v7 == 45)
        {
          if (v5 <= v6)
            return v4;
        }
        else
        {
          if (v7 != 46 || v5 <= v6 || v5 >= v3 - 1)
            return v4;
          v6 = v5 + 1;
        }
      }
      v4 = ++v5 >= v3;
      if (v3 == v5)
        return v4;
    }
  }
  return 0;
}

uint64_t sub_2341A1A94(uint64_t a1, void *__s, size_t __n, uint64_t a4, _QWORD *a5)
{
  if (!__s || __n && memchr(__s, 0, __n))
    return 4294967294;
  else
    return sub_2341A1B1C(a1, __s, __n, a4, 2, a5);
}

uint64_t sub_2341A1B1C(uint64_t a1, void *a2, size_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  BOOL (*v12)(const void *, size_t, void *, uint64_t);
  BOOL (*v13)(const void *, size_t, void *, uint64_t);
  int v14;
  int v15;
  int v16;
  uint64_t (*v17)(void);
  _BOOL4 v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unsigned int v28;
  unint64_t *v29;
  int *v30;
  uint64_t v31;
  _BOOL4 v33;

  v12 = sub_2341A2760;
  v13 = (BOOL (*)(const void *, size_t, void *, uint64_t))sub_2341A2428;
  if ((a4 & 2) == 0)
    v13 = (BOOL (*)(const void *, size_t, void *, uint64_t))sub_2341A24B8;
  if (a5 == 2)
    v14 = 22;
  else
    v14 = 4;
  if (a5 == 2)
  {
    v12 = v13;
    v15 = 13;
  }
  else
  {
    v15 = 0;
  }
  if (a5 == 1)
    v16 = 22;
  else
    v16 = v14;
  if (a5 == 1)
    v17 = (uint64_t (*)(void))sub_2341A2358;
  else
    v17 = (uint64_t (*)(void))v12;
  v18 = a5 == 1 || a5 == 2;
  v33 = v18;
  if (a5 == 1)
    v19 = 48;
  else
    v19 = v15;
  v20 = sub_2341A3660(a1, 85, 0, 0);
  if (v20)
  {
    v21 = (unint64_t *)v20;
    if (sub_2341709C4(v20))
    {
      v22 = 0;
      while (1)
      {
        v23 = sub_2341953E8(v21, v22);
        if (*(_DWORD *)v23 == a5)
        {
          v24 = sub_2341A27A4((int *)v23[1], v16, v17, a4, a5, a2, a3, a6);
          if ((_DWORD)v24)
            break;
        }
        if (++v22 >= sub_2341709C4((uint64_t)v21))
          goto LABEL_27;
      }
      v25 = v24;
    }
    else
    {
LABEL_27:
      v25 = 0;
    }
    sub_23419D890((uint64_t)v21);
  }
  else
  {
    if (((!v33 | ((a4 & 0x20) >> 5)) & 1) == 0)
    {
      v26 = (uint64_t *)sub_2341A323C(a1);
      v27 = -1;
      while (1)
      {
        v28 = sub_2341A84C4(v26, v19, v27);
        if ((v28 & 0x80000000) != 0)
          break;
        v27 = v28;
        v29 = sub_2341A8458((unint64_t **)v26, v28);
        v30 = (int *)sub_2340DE85C((uint64_t)v29);
        v31 = sub_2341A27A4(v30, -1, v17, a4, a5, a2, a3, a6);
        if ((_DWORD)v31)
          return v31;
      }
    }
    return 0;
  }
  return v25;
}

uint64_t sub_2341A1CF4(uint64_t a1, void *__s, size_t __n, uint64_t a4)
{
  if (!__s || __n && memchr(__s, 0, __n))
    return 4294967294;
  else
    return sub_2341A1B1C(a1, __s, __n, a4, 1, 0);
}

uint64_t sub_2341A1D6C(uint64_t a1, void *a2, size_t a3, uint64_t a4)
{
  if (a2)
    return sub_2341A1B1C(a1, a2, a3, a4, 7, 0);
  else
    return 4294967294;
}

uint64_t sub_2341A1D84(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v5;
  _BYTE v7[16];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2 && (v5 = sub_2341A1E0C(v7, a2)) != 0)
    return sub_2341A1B1C(a1, v7, v5, a3, 7, 0);
  else
    return 4294967294;
}

uint64_t sub_2341A1E0C(_BYTE *a1, char *__s)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  __int128 __src;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!strchr(__s, 58))
    return 4 * sub_2341A2138(a1, __s);
  __src = 0uLL;
  v10 = 0;
  v11 = 0xFFFFFFFFLL;
  if (!sub_23414BD44(__s, 58, 0, (uint64_t (*)(char *, uint64_t, uint64_t))sub_2341A29A4, (uint64_t)&__src))return 0;
  v4 = v11;
  v5 = v10;
  if ((_DWORD)v11 == -1)
  {
    if (v10 == 16)
      goto LABEL_12;
    return 0;
  }
  if (v10 > 15 || SHIDWORD(v11) > 3)
    return 0;
  if (HIDWORD(v11) == 2)
  {
    if ((_DWORD)v11 && v10 != (_DWORD)v11)
      return 0;
    goto LABEL_19;
  }
  if (HIDWORD(v11) != 3)
  {
    if (!(_DWORD)v11 || v10 == (_DWORD)v11)
      return 0;
LABEL_19:
    if ((v11 & 0x80000000) == 0)
    {
      if ((_DWORD)v11)
      {
        memcpy(a1, &__src, v11);
        v7 = v4;
      }
      else
      {
        v7 = 0;
      }
      v8 = &a1[v7];
      bzero(v8, (16 - v5));
      if ((_DWORD)v5 != (_DWORD)v4)
        memcpy(&v8[-v5 + 16], (char *)&__src + v7, (int)v5 - (int)v4);
      return 16;
    }
LABEL_12:
    *(_OWORD *)a1 = __src;
    return 16;
  }
  if (v10 <= 0)
    goto LABEL_19;
  return 0;
}

uint64_t sub_2341A1F9C(char *__s)
{
  int v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  char v6[16];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = sub_2341A1E0C(v6, __s);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_234144628();
  v4 = (uint64_t)v3;
  if (v3 && !sub_23413F774((uint64_t)v3, v6, v2))
  {
    sub_234144630(v4);
    return 0;
  }
  return v4;
}

uint64_t sub_2341A202C(char *a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  char v13[32];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = strchr(a1, 47);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = (char *)sub_23418E55C(a1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = &v4[v3 - a1];
  *v6 = 0;
  v7 = sub_2341A1E0C(v13, v4);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_10;
  }
  v8 = v7;
  v9 = sub_2341A1E0C(&v13[v7], v6 + 1);
  sub_23418E3C4(v5);
  v10 = 0;
  v5 = 0;
  if (!v9 || v8 != v9)
    goto LABEL_10;
  v11 = sub_234144628();
  v10 = (uint64_t)v11;
  if (!v11 || !sub_23413F774((uint64_t)v11, v13, 2 * v8))
  {
    v5 = 0;
LABEL_10:
    sub_23418E3C4(v5);
    sub_234144630(v10);
    return 0;
  }
  return v10;
}

BOOL sub_2341A2138(_BYTE *a1, _BYTE *a2)
{
  _BOOL8 result;
  _BYTE *v4;

  v4 = a2;
  result = sub_2341A291C(a1, &v4);
  if (result)
  {
    if (*v4 != 46)
      return 0;
    ++v4;
    result = sub_2341A291C(a1 + 1, &v4);
    if (!result)
      return result;
    if (*v4 != 46)
      return 0;
    ++v4;
    result = sub_2341A291C(a1 + 2, &v4);
    if (!result)
      return result;
    if (*v4 == 46)
    {
      ++v4;
      result = sub_2341A291C(a1 + 3, &v4);
      if (result)
        return *v4 == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_2341A21FC(_BOOL8 result, unint64_t *a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unsigned __int8 *v8;
  unsigned __int8 *i;
  unsigned int v10;
  int v11;
  const char *v12;
  int v13;
  unsigned int v14;

  if (result)
  {
    v5 = result;
    if (sub_2341709C4((uint64_t)a2))
    {
      v6 = 0;
      while (1)
      {
        v7 = sub_2341953E8(a2, v6);
        v8 = (unsigned __int8 *)v7[1];
        for (i = v8 + 1; ; ++i)
        {
          v10 = *(i - 1);
          if (v10 <= 0x2D)
            break;
          if (v10 == 58 || v10 == 46)
            goto LABEL_12;
LABEL_11:
          ;
        }
        if (!*(i - 1))
          goto LABEL_14;
        if (v10 != 44)
          goto LABEL_11;
LABEL_12:
        if (*i)
          v8 = i;
LABEL_14:
        v11 = *v8;
        if (v11 == 43)
          v12 = (const char *)(v8 + 1);
        else
          v12 = (const char *)v8;
        if (v11 == 43)
          v13 = -1;
        else
          v13 = 0;
        v14 = sub_2341A893C(v5, v12, a3, (char *)v7[2], 0xFFFFFFFFFFFFFFFFLL, -1, v13);
        if (v14)
        {
          if (++v6 < sub_2341709C4((uint64_t)a2))
            continue;
        }
        return v14 != 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_2341A22F0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A22FC(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A2308(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A2314(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_2341A2320(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t sub_2341A234C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A2358(char *__s1, size_t __n, char *__s2, uint64_t a4)
{
  size_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t result;

  if (__n != a4)
    return 0;
  v5 = __n;
  v7 = 0;
  v8 = __s2 - 1;
  v9 = __s1 - 1;
  while (__n != v7)
  {
    v10 = v7;
    v11 = v8;
    v12 = v9;
    if (v9[__n] != 64)
    {
      v13 = v8[__n];
      ++v7;
      --v8;
      --v9;
      if (v13 != 64)
        continue;
    }
    result = sub_2341A2428(&v12[__n], v10 + 1, (unsigned __int8 *)&v11[__n], v10 + 1);
    if (!(_DWORD)result)
      return result;
    if (v5 - 1 != v10)
    {
      v5 += ~v10;
      return memcmp(__s1, __s2, v5) == 0;
    }
    break;
  }
  if (!v5)
    return 1;
  return memcmp(__s1, __s2, v5) == 0;
}

uint64_t sub_2341A2428(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  int v9;

  if (a2 != a4)
    return 0;
  v4 = a2;
  if (!a2)
    return 1;
  while (1)
  {
    result = *a1;
    if (!*a1)
      break;
    v8 = *a3;
    if ((_DWORD)result != (_DWORD)v8)
    {
      v9 = sub_23418E690(result);
      if (v9 != sub_23418E690(v8))
        return 0;
    }
    ++a1;
    ++a3;
    if (!--v4)
      return 1;
  }
  return result;
}

uint64_t sub_2341A24B8(char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  int v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  char *v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int64_t v16;
  char *v17;
  uint64_t result;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;

  if (a4 < 2)
  {
    if (!a2)
      return sub_2341A2428(a1, a2, a3, a4);
  }
  else if (!a2 || *a3 == 46)
  {
    return sub_2341A2428(a1, a2, a3, a4);
  }
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v11 = a2;
  v12 = a1;
  do
  {
    v13 = *v12;
    if (v13 == 42)
    {
      if (v11 == 1)
      {
        v14 = 1;
        if (v9)
          return sub_2341A2428(a1, a2, a3, a4);
      }
      else
      {
        v14 = v12[1] == 46;
        if (v9)
          return sub_2341A2428(a1, a2, a3, a4);
      }
      if ((((v10 & 8 | v8) == 0) & v10 & v14) != 1)
        return sub_2341A2428(a1, a2, a3, a4);
      v8 = 0;
      v10 &= ~1u;
      v9 = (unsigned __int8 *)v12;
    }
    else if (sub_23418E674(v13))
    {
      if ((v10 & 1) != 0 && v11 >= 4 && !sub_23418E744(v12, "xn--", 4))
        v10 = 8;
      v10 &= 0xFFFFFFFA;
    }
    else
    {
      v15 = *v12;
      if (v15 == 45)
      {
        if ((v10 & 1) != 0)
          return sub_2341A2428(a1, a2, a3, a4);
        v10 |= 4u;
      }
      else
      {
        if (v15 != 46 || (v10 & 5) != 0)
          return sub_2341A2428(a1, a2, a3, a4);
        ++v8;
        v10 = 1;
      }
    }
    ++v12;
    --v11;
  }
  while (v11);
  if ((v10 & 5) != 0 || v8 < 2 || !v9)
    return sub_2341A2428(a1, a2, a3, a4);
  v16 = v9 - (unsigned __int8 *)a1;
  v17 = &a1[a2 + ~(unint64_t)v9];
  if ((unint64_t)&v9[~(unint64_t)v9 + a2] > a4)
    return 0;
  result = sub_2341A2428(a1, v9 - (unsigned __int8 *)a1, a3, v9 - (unsigned __int8 *)a1);
  if ((_DWORD)result)
  {
    v19 = a4 - (_QWORD)v17;
    v20 = &a3[a4 - (_QWORD)v17];
    result = sub_2341A2428(v20, (uint64_t)&a1[a2 + ~(unint64_t)v9], v9 + 1, (uint64_t)&a1[a2 + ~(unint64_t)v9]);
    if ((_DWORD)result)
    {
      if (v9 == (unsigned __int8 *)a1 && v9[1] == 46)
      {
        if ((char *)a4 == v17)
          return 0;
      }
      else if (a4 >= 4)
      {
        result = sub_23418E744((char *)a3, "xn--", 4);
        if (!(_DWORD)result)
          return result;
      }
      v21 = &a3[v16];
      if (v20 != v21 + 1)
      {
        if (v19 == v16)
          return 1;
LABEL_47:
        v22 = a4 - a2 + 1;
        while (sub_23418E674(*v21) || *v21 == 45)
        {
          ++v21;
          if (!--v22)
            return 1;
        }
        return 0;
      }
      result = 1;
      if (v19 != v16 && *v21 != 42)
        goto LABEL_47;
    }
  }
  return result;
}

BOOL sub_2341A2760(const void *a1, size_t __n, void *__s2, uint64_t a4)
{
  if (__n != a4)
    return 0;
  if (__n)
    return memcmp(a1, __s2, __n) == 0;
  return 1;
}

uint64_t sub_2341A27A4(int *a1, int a2, uint64_t (*a3)(void), uint64_t a4, int a5, void *__s2, size_t __n, _QWORD *a8)
{
  const void *v9;
  uint64_t v15;
  unsigned int v17;
  size_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;

  v9 = (const void *)*((_QWORD *)a1 + 1);
  if (!v9 || !*a1)
    return 0;
  if (a2 < 1)
  {
    v23 = 0;
    v17 = sub_23413FBF0(&v23, (char **)a1);
    if ((v17 & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    if (a5 == 2)
    {
      v18 = v17;
      if (!sub_2341A1990(v23, v17))
      {
        v15 = 0;
LABEL_21:
        sub_23418E3C4(v23);
        return v15;
      }
    }
    else
    {
      v18 = v17;
    }
    v20 = ((uint64_t (*)(void *, size_t, void *, size_t, uint64_t))a3)(v23, v18, __s2, __n, a4);
    v15 = v20;
    if (a8)
    {
      if ((int)v20 >= 1)
      {
        v21 = sub_23418E928(v23, v18);
        *a8 = v21;
        if (!v21)
          return 0xFFFFFFFFLL;
      }
    }
    goto LABEL_21;
  }
  if (a1[1] != a2)
    return 0;
  if (a2 != 22)
  {
    if (*a1 == (_DWORD)__n && (!__n || !memcmp(v9, __s2, __n)))
    {
      v15 = 1;
      if (!a8)
        return v15;
      goto LABEL_23;
    }
    return 0;
  }
  v15 = a3();
  if (!a8)
    return v15;
LABEL_23:
  if ((int)v15 >= 1)
  {
    v22 = sub_23418E928(*((_BYTE **)a1 + 1), *a1);
    *a8 = v22;
    if (!v22)
      return 0xFFFFFFFFLL;
  }
  return v15;
}

BOOL sub_2341A291C(_BYTE *a1, _BYTE **a2)
{
  unsigned int v4;
  int v5;
  _BOOL8 result;
  _BYTE *v7;

  v4 = 0;
  LOBYTE(v5) = **a2;
  while (1)
  {
    result = sub_23418E5F8((char)v5);
    if (!result)
      break;
    v7 = *a2;
    v4 = (char)**a2 + 10 * v4 - 48;
    if (v4 > 0xFF)
      return 0;
    *a2 = v7 + 1;
    v5 = v7[1];
    if (v5 == 46 || v5 == 0)
    {
      *a1 = v4;
      return 1;
    }
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t sub_2341A29A4(char *a1, unint64_t a2, _DWORD *a3)
{
  int v3;
  uint64_t result;
  unint64_t v6;
  char *v7;
  int v8;
  int v9;
  unsigned int v10;
  _WORD *v11;
  int v12;
  int v13;
  unsigned __int8 v14;

  v3 = a3[4];
  if (v3 == 16)
    return 0;
  v6 = a2;
  if (!a2)
  {
    v9 = a3[5];
    if (v9 == -1)
    {
      a3[5] = v3;
    }
    else if (v9 != v3)
    {
      return 0;
    }
    v13 = a3[6];
    if (v13 <= 2)
    {
      a3[6] = v13 + 1;
      return 1;
    }
    return 0;
  }
  v7 = a1;
  if (a2 < 5)
  {
    v10 = 0;
    v11 = (_WORD *)((char *)a3 + v3);
    while (v6)
    {
      --v6;
      v14 = 0;
      v12 = *v7++;
      result = sub_23418E624(&v14, v12);
      v10 = v14 | (16 * v10);
      if (!(_DWORD)result)
        return result;
    }
    *v11 = bswap32(v10) >> 16;
    v8 = a3[4] + 2;
    goto LABEL_18;
  }
  if (v3 > 12 || a1[a2])
    return 0;
  result = sub_2341A2138((_BYTE *)a3 + v3, a1);
  if ((_DWORD)result)
  {
    v8 = a3[4] + 4;
LABEL_18:
    a3[4] = v8;
    return 1;
  }
  return result;
}

BOOL sub_2341A2AB0(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;

  v5 = 0;
  v6 = 0;
  v7 = *a2;
  v8 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v9 = v7 & ~((int)v7 >> 31);
  v10 = v7 - 1;
  while (v9)
  {
    if (v6 + 18 * (v5 / 0x12) || (int)sub_234144E68(a1, (uint64_t)"\n", 1) >= 1 && (int)sub_2341452E0(a1, a3, a3) >= 1)
    {
      v12 = *v8++;
      v11 = v12;
      v13 = v10 ? ":" : "";
      --v9;
      --v6;
      ++v5;
      --v10;
      if ((int)sub_234146138(a1, "%02x%s", v11, v13) >= 1)
        continue;
    }
    return 0;
  }
  return sub_234144E68(a1, (uint64_t)"\n", 1) == 1;
}

const char ***sub_2341A2BD4(const char ****a1, unsigned int a2, int a3, char *a4, int a5)
{
  char **v9;

  v9 = sub_23418F064(a2);
  if (v9)
    return sub_2341A2C50(a1, (uint64_t)v9, a3, a4, a5);
  sub_2341579B4(11, 0, 129, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_att.c", 73);
  return 0;
}

const char ***sub_2341A2C50(const char ****a1, uint64_t a2, int a3, char *a4, int a5)
{
  const char ***v10;

  if (a1 && (v10 = *a1) != 0 || (v10 = (const char ***)sub_2341AA3F8()) != 0)
  {
    if (sub_2341A2D00(v10, a2) && sub_2341A2D48((uint64_t)v10, a3, a4, a5))
    {
      if (a1 && !*a1)
        *a1 = v10;
    }
    else
    {
      if (!a1 || v10 != *a1)
        sub_2341AA404((uint64_t)v10);
      return 0;
    }
  }
  return v10;
}

BOOL sub_2341A2D00(const char ***a1, uint64_t a2)
{
  _BOOL8 result;
  const char **v5;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      sub_23413F6D0((_QWORD **)*a1);
      v5 = sub_23418EA9C(a2);
      *a1 = v5;
      return v5 != 0;
    }
  }
  return result;
}

uint64_t sub_2341A2D48(uint64_t result, int a2, char *a3, int a4)
{
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;

  if (result)
  {
    if (!a2)
      return 1;
    v7 = result;
    result = sub_23414481C();
    if (!result)
      return result;
    v8 = (int *)result;
    if ((a2 & 0x1000) != 0)
    {
      v11 = sub_23418EBF8(*(unsigned __int16 **)v7);
      v10 = sub_2341401C0(0, a3, a4, a2, v11);
      if (!v10)
      {
        sub_2341579B4(11, 0, 12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_att.c", 163);
        goto LABEL_15;
      }
    }
    else
    {
      if (a4 == -1)
      {
        if (!sub_234140B00(result, a2, (int *)a3))
          goto LABEL_15;
        goto LABEL_12;
      }
      v9 = sub_2341413B0(a2);
      v10 = (uint64_t)v9;
      if (!v9 || !sub_2341411A4((uint64_t)v9, a3, a4))
      {
        sub_234141344(v10);
LABEL_15:
        sub_234144828((uint64_t)v8);
        return 0;
      }
    }
    sub_234140A14(v8, v10);
LABEL_12:
    if (!sub_2341958E8(*(unint64_t **)(v7 + 8), (uint64_t)v8))
      goto LABEL_15;
    return 1;
  }
  return result;
}

const char ***sub_2341A2E60(const char ****a1, const char *a2, int a3, char *a4, int a5)
{
  char **v9;
  char **v10;
  const char ***v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = sub_23418EF98(a2, 0);
  if (v9)
  {
    v10 = v9;
    v11 = sub_2341A2C50(a1, (uint64_t)v9, a3, a4, a5);
    sub_23413F6D0((_QWORD **)v10);
    return v11;
  }
  else
  {
    sub_2341579B4(11, 0, 111, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_att.c", 120);
    sub_234157A5C(2u, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"name=");
    return 0;
  }
}

uint64_t sub_2341A2F18(uint64_t a1)
{
  return sub_2341709C4(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2341A2F30(uint64_t a1, int a2, int a3)
{
  unint64_t *v4;
  int *v5;

  v4 = sub_2341A2F94(a1, a2);
  if (v4)
  {
    v5 = (int *)v4;
    if (sub_2341409AC((unsigned int *)v4) == a3)
      return sub_2341409D4(v5);
    sub_2341579B4(11, 0, 134, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_att.c", 213);
  }
  return 0;
}

unint64_t *sub_2341A2F94(uint64_t a1, int a2)
{
  if (a1 && (int)sub_2341709C4(*(_QWORD *)(a1 + 8)) > a2)
    return sub_2341953E8(*(unint64_t **)(a1 + 8), a2);
  else
    return 0;
}

uint64_t sub_2341A2FE0(uint64_t a1, uint64_t a2)
{
  return sub_2341A2FF4(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(*(_QWORD *)a2 + 24));
}

uint64_t sub_2341A2FF4(uint64_t a1, uint64_t a2)
{
  size_t v4;
  int v5;
  uint64_t result;

  if ((!*(_QWORD *)(a1 + 24) || *(_DWORD *)(a1 + 8)) && (sub_2341AAC68((int *)a1, 0) & 0x80000000) != 0
    || (!*(_QWORD *)(a2 + 24) || *(_DWORD *)(a2 + 8)) && (sub_2341AAC68((int *)a2, 0) & 0x80000000) != 0)
  {
    return 4294967294;
  }
  v4 = *(int *)(a1 + 32);
  v5 = *(_DWORD *)(a2 + 32);
  result = (v4 - v5);
  if ((_DWORD)v4 == v5)
  {
    if ((_DWORD)v4)
      return memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), v4);
    else
      return 0;
  }
  return result;
}

uint64_t sub_2341A3088(uint64_t a1, uint64_t a2)
{
  return sub_2341A2FF4(*(_QWORD *)(*(_QWORD *)a1 + 40), *(_QWORD *)(*(_QWORD *)a2 + 40));
}

uint64_t sub_2341A309C(uint64_t a1, uint64_t a2)
{
  return sub_2341A2FF4(*(_QWORD *)(*(_QWORD *)a1 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t sub_2341A30B0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = bswap64(*(_QWORD *)(a1 + 52));
  v3 = bswap64(*(_QWORD *)(a2 + 52));
  if (v2 == v3)
  {
    v2 = bswap64(*(_QWORD *)(a1 + 60));
    v3 = bswap64(*(_QWORD *)(a2 + 60));
    if (v2 == v3)
    {
      v2 = bswap64(*(_QWORD *)(a1 + 68));
      v3 = bswap64(*(_QWORD *)(a2 + 68));
      if (v2 == v3)
      {
        v2 = bswap64(*(_QWORD *)(a1 + 76));
        v3 = bswap64(*(_QWORD *)(a2 + 76));
        if (v2 == v3)
          return 0;
      }
    }
  }
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  return 1;
}

uint64_t sub_2341A3128(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 24);
}

uint64_t sub_2341A3134(uint64_t a1)
{
  return sub_2341A3140(*(_QWORD *)(*(_QWORD *)a1 + 24));
}

uint64_t sub_2341A3140(uint64_t a1)
{
  _DWORD v3[5];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if ((sub_2341AAC68((int *)a1, 0) & 0x80000000) != 0)
    return 0;
  sub_2341814F8(*(char **)(a1 + 24), *(int *)(a1 + 32), v3);
  return v3[0];
}

uint64_t sub_2341A31B8(uint64_t a1)
{
  return sub_2341A31C4(*(_QWORD *)(*(_QWORD *)a1 + 24));
}

uint64_t sub_2341A31C4(uint64_t a1)
{
  _DWORD v3[5];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if ((sub_2341AAC68((int *)a1, 0) & 0x80000000) != 0)
    return 0;
  sub_23417A220(*(char **)(*(_QWORD *)(a1 + 16) + 8), **(_QWORD **)(a1 + 16), v3);
  return v3[0];
}

uint64_t sub_2341A323C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 40);
}

uint64_t sub_2341A3248(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t sub_2341A3254(uint64_t a1)
{
  return sub_2341A3140(*(_QWORD *)(*(_QWORD *)a1 + 40));
}

uint64_t sub_2341A3260(uint64_t a1)
{
  return sub_2341A31C4(*(_QWORD *)(*(_QWORD *)a1 + 40));
}

uint64_t sub_2341A326C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;

  sub_23419FB1C((uint64_t)a1);
  sub_23419FB1C((uint64_t)a2);
  v4 = bswap64(a1[13]);
  v5 = bswap64(a2[13]);
  if (v4 == v5)
  {
    v4 = bswap64(a1[14]);
    v5 = bswap64(a2[14]);
    if (v4 == v5)
    {
      v4 = bswap64(a1[15]);
      v5 = bswap64(a2[15]);
      if (v4 == v5)
      {
        v4 = bswap64(a1[16]);
        v5 = bswap64(a2[16]);
        if (v4 == v5)
          return 0;
      }
    }
  }
  if (v4 < v5)
    return 0xFFFFFFFFLL;
  return 1;
}

unint64_t *sub_2341A330C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t *v7;

  if ((*(_DWORD *)(a3 + 4) | 0x100) != 0x102 || !sub_2341709C4((uint64_t)a1))
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = sub_2341953E8(a1, v6);
    if (!sub_23413E40C(*(_QWORD *)(*v7 + 8), a3)
      && !sub_2341A2FF4(*(_QWORD *)(*v7 + 24), a2))
    {
      break;
    }
    if (++v6 >= sub_2341709C4((uint64_t)a1))
      return 0;
  }
  return v7;
}

unint64_t *sub_2341A33B0(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t *v5;

  if (!sub_2341709C4((uint64_t)a1))
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = sub_2341953E8(a1, v4);
    if (!sub_2341A2FF4(*(_QWORD *)(*v5 + 40), a2))
      break;
    if (++v4 >= sub_2341709C4((uint64_t)a1))
      return 0;
  }
  return v5;
}

uint64_t sub_2341A3424(uint64_t result)
{
  if (result)
    return sub_2341AB6DC(*(_QWORD *)(*(_QWORD *)result + 48));
  return result;
}

uint64_t sub_2341A3438(uint64_t result)
{
  if (result)
    return sub_2341AB718(*(_QWORD *)(*(_QWORD *)result + 48));
  return result;
}

uint64_t sub_2341A344C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 48) + 8);
  return result;
}

uint64_t sub_2341A3460(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  __int16 v5;

  if (result)
  {
    result = sub_2341AB6DC(*(_QWORD *)(*(_QWORD *)result + 48));
    if (result)
    {
      v3 = sub_234158104(result, a2);
      if (v3 > 0)
        return 1;
      if (v3 == -2)
      {
        v4 = 128;
        v5 = 261;
      }
      else if (v3 == -1)
      {
        v4 = 115;
        v5 = 258;
      }
      else
      {
        if (v3)
          return 0;
        v4 = 116;
        v5 = 255;
      }
      sub_2341579B4(11, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_cmp.c", v5);
      return 0;
    }
  }
  return result;
}

unint64_t *sub_2341A3514(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;

  v1 = sub_23419590C(a1);
  v2 = v1;
  if (v1 && sub_2341709C4((uint64_t)v1))
  {
    v3 = 0;
    do
    {
      v4 = sub_2341953E8(v2, v3);
      sub_234193794((uint64_t)v4);
      ++v3;
    }
    while (v3 < sub_2341709C4((uint64_t)v2));
  }
  return v2;
}

uint64_t sub_2341A3570(uint64_t a1)
{
  return sub_2341A52E0(*(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t sub_2341A357C(uint64_t a1, unsigned int a2, int a3)
{
  return sub_2341A52F8(*(unint64_t **)(*(_QWORD *)a1 + 48), a2, a3);
}

uint64_t sub_2341A3588(uint64_t a1, uint64_t a2, int a3)
{
  return sub_2341A5340(*(unint64_t **)(*(_QWORD *)a1 + 48), a2, a3);
}

uint64_t sub_2341A3594(uint64_t a1, int a2, int a3)
{
  return sub_2341A53D0(*(unint64_t **)(*(_QWORD *)a1 + 48), a2, a3);
}

unint64_t *sub_2341A35A0(uint64_t a1, unsigned int a2)
{
  return sub_2341A5488(*(unint64_t **)(*(_QWORD *)a1 + 48), a2);
}

uint64_t sub_2341A35AC(uint64_t a1, unsigned int a2)
{
  return sub_2341A54D4(*(uint64_t **)(*(_QWORD *)a1 + 48), a2);
}

uint64_t sub_2341A35B8(uint64_t a1, int a2, int *a3, _DWORD *a4)
{
  return sub_23419E23C(*(unint64_t **)(*(_QWORD *)a1 + 48), a2, a3, a4);
}

uint64_t sub_2341A35C4(uint64_t a1, unsigned int a2, int *a3, int a4, char a5)
{
  return sub_23419E350((unint64_t **)(*(_QWORD *)a1 + 48), a2, a3, a4, a5);
}

BOOL sub_2341A35D0(uint64_t a1, int *a2, int a3)
{
  return sub_2341A5520((unint64_t **)(*(_QWORD *)a1 + 48), a2, a3) != 0;
}

uint64_t sub_2341A35F4(uint64_t a1)
{
  return sub_2341A52E0(*(_QWORD *)(*(_QWORD *)a1 + 72));
}

uint64_t sub_2341A3600(uint64_t a1, unsigned int a2, int a3)
{
  return sub_2341A52F8(*(unint64_t **)(*(_QWORD *)a1 + 72), a2, a3);
}

uint64_t sub_2341A360C(uint64_t a1, uint64_t a2, int a3)
{
  return sub_2341A5340(*(unint64_t **)(*(_QWORD *)a1 + 72), a2, a3);
}

uint64_t sub_2341A3618(uint64_t a1, int a2, int a3)
{
  return sub_2341A53D0(*(unint64_t **)(*(_QWORD *)a1 + 72), a2, a3);
}

unint64_t *sub_2341A3624(uint64_t a1, unsigned int a2)
{
  return sub_2341A5488(*(unint64_t **)(*(_QWORD *)a1 + 72), a2);
}

uint64_t sub_2341A3630(uint64_t a1, unsigned int a2)
{
  return sub_2341A54D4(*(uint64_t **)(*(_QWORD *)a1 + 72), a2);
}

BOOL sub_2341A363C(uint64_t a1, int *a2, int a3)
{
  return sub_2341A5520((unint64_t **)(*(_QWORD *)a1 + 72), a2, a3) != 0;
}

uint64_t sub_2341A3660(uint64_t a1, int a2, int *a3, _DWORD *a4)
{
  return sub_23419E23C(*(unint64_t **)(*(_QWORD *)a1 + 72), a2, a3, a4);
}

uint64_t sub_2341A366C(uint64_t a1, unsigned int a2, int *a3, int a4, char a5)
{
  return sub_23419E350((unint64_t **)(*(_QWORD *)a1 + 72), a2, a3, a4, a5);
}

uint64_t sub_2341A3678(uint64_t a1)
{
  return sub_2341A52E0(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2341A3680(uint64_t a1, unsigned int a2, int a3)
{
  return sub_2341A52F8(*(unint64_t **)(a1 + 16), a2, a3);
}

uint64_t sub_2341A3688(uint64_t a1, uint64_t a2, int a3)
{
  return sub_2341A5340(*(unint64_t **)(a1 + 16), a2, a3);
}

uint64_t sub_2341A3690(uint64_t a1, int a2, int a3)
{
  return sub_2341A53D0(*(unint64_t **)(a1 + 16), a2, a3);
}

unint64_t *sub_2341A3698(uint64_t a1, unsigned int a2)
{
  return sub_2341A5488(*(unint64_t **)(a1 + 16), a2);
}

uint64_t sub_2341A36A0(uint64_t a1, unsigned int a2)
{
  return sub_2341A54D4(*(uint64_t **)(a1 + 16), a2);
}

BOOL sub_2341A36A8(uint64_t a1, int *a2, int a3)
{
  return sub_2341A5520((unint64_t **)(a1 + 16), a2, a3) != 0;
}

uint64_t sub_2341A36C8(uint64_t a1, int a2, int *a3, _DWORD *a4)
{
  return sub_23419E23C(*(unint64_t **)(a1 + 16), a2, a3, a4);
}

uint64_t sub_2341A36D0(uint64_t a1, unsigned int a2, int *a3, int a4, char a5)
{
  return sub_23419E350((unint64_t **)(a1 + 16), a2, a3, a4, a5);
}

void sub_2341A36D8(_QWORD *a1)
{
  void (*v2)(_QWORD *);

  if (a1)
  {
    if (*a1)
    {
      v2 = *(void (**)(_QWORD *))(*a1 + 8);
      if (v2)
        v2(a1);
    }
    sub_23418E3C4(a1);
  }
}

uint64_t sub_2341A3718(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!*(_QWORD *)a1)
    return 0xFFFFFFFFLL;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 16);
  if (v1)
    return v1();
  else
    return 1;
}

_QWORD *sub_2341A373C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v0 = sub_23418E344(0xF0uLL);
  v1 = v0;
  if (v0)
  {
    *((_DWORD *)v0 + 58) = 1;
    sub_234195BFC((pthread_rwlock_t *)(v0 + 1));
    *v1 = sub_234195344((uint64_t)sub_2341A37B8);
    v1[26] = sub_2341953A0();
    v2 = sub_2341A768C();
    v1[27] = v2;
    if (!*v1 || !v1[26] || !v2)
    {
      sub_2341A37C4((uint64_t)v1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_2341A37B8(int **a1, uint64_t *a2)
{
  return sub_2341A434C(*a1, *a2);
}

void sub_2341A37C4(uint64_t a1)
{
  if (a1)
  {
    if (sub_234193960((unsigned int *)(a1 + 232)))
    {
      j__pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 8));
      sub_234195434(*(unint64_t **)(a1 + 208), (void (*)(uint64_t))sub_2341A4394, (uint64_t)sub_2341A36D8);
      sub_234195434(*(unint64_t **)a1, (void (*)(uint64_t))sub_2341A43A0, (uint64_t)sub_2341A385C);
      sub_2341A76B0(*(_QWORD *)(a1 + 216));
      sub_23418E3C4((_QWORD *)a1);
    }
  }
}

uint64_t sub_2341A3840(uint64_t a1)
{
  sub_234193914((unsigned int *)(a1 + 232));
  return 1;
}

void sub_2341A385C(_QWORD *a1)
{
  if (a1)
  {
    sub_2341A3C40((uint64_t)a1);
    sub_23418E3C4(a1);
  }
}

unint64_t *sub_2341A3888(uint64_t a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = *(unint64_t **)(a1 + 208);
  if (!sub_2341709C4((uint64_t)v4))
  {
LABEL_5:
    v7 = sub_23418E344(0x18uLL);
    v8 = v7;
    if (v7)
    {
      *v7 = a2;
      v7[2] = a1;
      if (*a2 && !((unsigned int (*)(_QWORD *))*a2)(v7))
      {
        sub_23418E3C4(v8);
        v8 = 0;
      }
      else if (sub_2341958E8(*(unint64_t **)(a1 + 208), (uint64_t)v8))
      {
        return v8;
      }
    }
    sub_2341A36D8(v8);
    return 0;
  }
  v5 = 0;
  while (1)
  {
    v6 = sub_2341953E8(v4, v5);
    if ((_QWORD *)*v6 == a2)
      return v6;
    if (++v5 >= sub_2341709C4((uint64_t)v4))
      goto LABEL_5;
  }
}

uint64_t sub_2341A395C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t *v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  int (*v13)(unint64_t *, uint64_t);
  _QWORD v15[2];

  v7 = *a1;
  v15[0] = 0;
  v15[1] = 0;
  sub_234195C38((pthread_rwlock_t *)(v7 + 8));
  v8 = *(unint64_t **)v7;
  v9 = sub_2341A3EBC(*(unint64_t **)v7, a2, a3, 0);
  if (v9 == -1)
    v10 = 0;
  else
    v10 = sub_2341953E8(v8, v9);
  sub_234195C54((pthread_rwlock_t *)(v7 + 8));
  if ((_DWORD)a2 == 2 || !v10)
  {
    if (sub_2341709C4(*(_QWORD *)(v7 + 208)))
    {
      v11 = 0;
      while (1)
      {
        v12 = sub_2341953E8(*(unint64_t **)(v7 + 208), v11);
        if (*v12)
        {
          v13 = *(int (**)(unint64_t *, uint64_t))(*v12 + 24);
          if (v13)
          {
            if (v13(v12, a2) > 0)
              break;
          }
        }
        if (++v11 >= sub_2341709C4(*(_QWORD *)(v7 + 208)))
          goto LABEL_12;
      }
      v10 = v15;
    }
    else
    {
LABEL_12:
      if (!v10)
        return 0;
    }
  }
  *(_DWORD *)a4 = *(_DWORD *)v10;
  *(_QWORD *)(a4 + 8) = v10[1];
  sub_2341A3A7C(a4);
  return 1;
}

uint64_t sub_2341A3A7C(uint64_t result)
{
  if (*(_DWORD *)result == 2 || *(_DWORD *)result == 1)
    return sub_234193794(*(_QWORD *)(result + 8));
  return result;
}

uint64_t sub_2341A3AA4(uint64_t a1, uint64_t a2)
{
  return sub_2341A3AAC(a1, a2, 0);
}

uint64_t sub_2341A3AAC(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  pthread_rwlock_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v15;

  if (a2)
  {
    v6 = sub_23418E344(0x10uLL);
    if (v6)
    {
      v7 = v6;
      if (a3)
        v8 = 2;
      else
        v8 = 1;
      *(_DWORD *)v6 = v8;
      v6[1] = a2;
      sub_2341A3A7C((uint64_t)v6);
      v9 = (pthread_rwlock_t *)(a1 + 8);
      sub_234195C38((pthread_rwlock_t *)(a1 + 8));
      v10 = *(unint64_t **)a1;
      sub_23419598C(*(_QWORD *)a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2341A43AC);
      v15 = 0;
      if (sub_23419574C((uint64_t)v10, &v15, (uint64_t)v7, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_2341A43AC))
      {
        v11 = v15;
        if ((*(_DWORD *)v7 - 1) >= 2)
        {
          v12 = sub_2341953E8(v10, v15);
LABEL_18:
          if (v12)
          {
LABEL_19:
            sub_234195C54((pthread_rwlock_t *)(a1 + 8));
            v13 = 1;
            goto LABEL_22;
          }
        }
        else
        {
          while (v11 < sub_2341709C4((uint64_t)v10))
          {
            v12 = sub_2341953E8(v10, v11);
            if (sub_2341A434C((int *)v12, (uint64_t)v7))
              break;
            if (*(_DWORD *)v7 == 2)
            {
              if (!sub_2341A30B0(v12[1], v7[1]))
                goto LABEL_19;
            }
            else
            {
              if (*(_DWORD *)v7 != 1)
                goto LABEL_18;
              if (!sub_2341A326C((unint64_t *)v12[1], (unint64_t *)v7[1]))
                goto LABEL_19;
            }
            ++v11;
          }
        }
      }
      v13 = (uint64_t)sub_2341958E8(*(unint64_t **)a1, (uint64_t)v7);
      sub_234195C54(v9);
      if (v13)
        return 1;
LABEL_22:
      sub_2341A3C40((uint64_t)v7);
      sub_23418E3C4(v7);
      return v13;
    }
  }
  return 0;
}

uint64_t sub_2341A3C38(uint64_t a1, uint64_t a2)
{
  return sub_2341A3AAC(a1, a2, 1);
}

void sub_2341A3C40(uint64_t a1)
{
  if (*(_DWORD *)a1 == 2)
  {
    sub_2341AA558(*(_QWORD *)(a1 + 8));
  }
  else if (*(_DWORD *)a1 == 1)
  {
    sub_2341ABB70(*(_QWORD *)(a1 + 8));
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t sub_2341A3C88(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return *(_QWORD *)(result + 8);
    else
      return 0;
  }
  return result;
}

unint64_t *sub_2341A3CA8(uint64_t a1)
{
  pthread_rwlock_t *v2;
  unint64_t *v3;

  v2 = (pthread_rwlock_t *)(a1 + 8);
  sub_234195C1C((pthread_rwlock_t *)(a1 + 8));
  v3 = sub_234195B2C(*(_QWORD *)a1, (uint64_t (*)(uint64_t))sub_2341A43D8, (uint64_t)sub_2341A3D08, (void (*)(uint64_t))sub_2341A43A0, (uint64_t)sub_2341A385C);
  sub_234195C54(v2);
  return v3;
}

_QWORD *sub_2341A3D08(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = sub_23418E344(0x10uLL);
  v3 = v2;
  if (v2)
  {
    *(_DWORD *)v2 = *(_DWORD *)a1;
    v2[1] = *(_QWORD *)(a1 + 8);
    sub_2341A3A7C((uint64_t)v2);
  }
  return v3;
}

unint64_t *sub_2341A3D50(unint64_t ***a1, uint64_t a2)
{
  unint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  v4 = sub_2341953A0();
  if (!v4)
    return v4;
  v11 = 0;
  sub_234195C38((pthread_rwlock_t *)(*a1 + 1));
  v5 = sub_2341A3EBC(**a1, 1u, a2, &v11);
  if ((v5 & 0x80000000) != 0)
  {
    v10[0] = 0;
    v10[1] = 0;
    sub_234195C54((pthread_rwlock_t *)(*a1 + 1));
    if (sub_2341A395C((uint64_t *)a1, 1, a2, (uint64_t)v10))
    {
      sub_2341A3C40((uint64_t)v10);
      sub_234195C38((pthread_rwlock_t *)(*a1 + 1));
      v5 = sub_2341A3EBC(**a1, 1u, a2, &v11);
      if ((v5 & 0x80000000) == 0)
        goto LABEL_3;
      sub_234195C54((pthread_rwlock_t *)(*a1 + 1));
    }
    sub_234141344((uint64_t)v4);
    return 0;
  }
LABEL_3:
  if (v11 >= 1)
  {
    v6 = 0;
    v7 = v5;
    while (1)
    {
      v8 = sub_2341953E8(**a1, v7 + v6)[1];
      if (!sub_2341958E8(v4, v8))
        break;
      sub_234193794(v8);
      if ((int)++v6 >= v11)
        goto LABEL_7;
    }
    sub_234195C54((pthread_rwlock_t *)(*a1 + 1));
    sub_234195434(v4, (void (*)(uint64_t))sub_2341A43E4, (uint64_t)sub_2341ABB70);
    return 0;
  }
LABEL_7:
  sub_234195C54((pthread_rwlock_t *)(*a1 + 1));
  return v4;
}

uint64_t sub_2341A3EBC(unint64_t *a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v6;
  unint64_t i;
  int *v8;
  unint64_t v10;
  __int128 v11;
  _OWORD v12[4];
  _OWORD v13[6];
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[12];
  _QWORD v18[44];

  v18[43] = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  memset(v18, 0, 344);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v17, 0, 88);
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v15 = a2;
  if (a2 == 2)
  {
    v16 = v17;
    v17[0] = &v11;
    v6 = v12;
  }
  else
  {
    if (a2 != 1)
      return 0xFFFFFFFFLL;
    v16 = v18;
    v18[0] = v13;
    v6 = (_QWORD *)&v13[2] + 1;
  }
  *v6 = a3;
  v10 = 0;
  sub_23419598C((uint64_t)a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2341A43AC);
  if (!sub_23419574C((uint64_t)a1, &v10, (uint64_t)&v15, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_2341A43AC))return 0xFFFFFFFFLL;
  if (a4)
  {
    *a4 = 1;
    for (i = v10 + 1; i < sub_2341709C4((uint64_t)a1); ++i)
    {
      v8 = (int *)sub_2341953E8(a1, i);
      if (sub_2341A434C(v8, (uint64_t)&v15))
        break;
      ++*a4;
    }
  }
  return v10;
}

unint64_t *sub_2341A4050(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  v4 = sub_2341953A0();
  if (!v4)
    return v4;
  v11 = 0;
  v10[0] = 0;
  v10[1] = 0;
  if (!sub_2341A395C(a1, 2, a2, (uint64_t)v10))
  {
LABEL_10:
    sub_234141344((uint64_t)v4);
    return 0;
  }
  sub_2341A3C40((uint64_t)v10);
  sub_234195C38((pthread_rwlock_t *)(*a1 + 8));
  v5 = sub_2341A3EBC(*(unint64_t **)*a1, 2u, a2, &v11);
  if ((v5 & 0x80000000) != 0)
  {
    sub_234195C54((pthread_rwlock_t *)(*a1 + 8));
    goto LABEL_10;
  }
  if (v11 >= 1)
  {
    v6 = 0;
    v7 = v5;
    while (1)
    {
      v8 = sub_2341953E8(*(unint64_t **)*a1, v7 + v6)[1];
      sub_234193794(v8);
      if (!sub_2341958E8(v4, v8))
        break;
      if ((int)++v6 >= v11)
        goto LABEL_8;
    }
    sub_234195C54((pthread_rwlock_t *)(*a1 + 8));
    sub_2341AA558(v8);
    sub_234195434(v4, (void (*)(uint64_t))sub_2341A43F0, (uint64_t)sub_2341AA558);
    return 0;
  }
LABEL_8:
  sub_234195C54((pthread_rwlock_t *)(*a1 + 8));
  return v4;
}

uint64_t sub_2341A4190(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t i;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v6 = sub_2341A3128(a3);
  if (!sub_2341A395C(a2, 1, v6, (uint64_t)&v15))
    return 0;
  v7 = v16;
  if (sub_2341A5F48((uint64_t)a2, a3, v16))
  {
    *a1 = v7;
    return 1;
  }
  else
  {
    sub_2341A3C40((uint64_t)&v15);
    sub_234195C38((pthread_rwlock_t *)(*a2 + 8));
    v9 = sub_2341A3EBC(*(unint64_t **)*a2, 1u, v6, 0);
    if (v9 != -1)
    {
      LODWORD(i) = v9;
      if (sub_2341709C4(*(_QWORD *)*a2) > (unint64_t)v9)
      {
        for (i = (int)i; i < sub_2341709C4(*(_QWORD *)*a2); ++i)
        {
          v11 = sub_2341953E8(*(unint64_t **)*a2, i);
          if (*(_DWORD *)v11 != 1)
            break;
          v12 = (uint64_t)v11;
          v13 = sub_2341A323C(v11[1]);
          if (sub_2341A2FF4(v6, v13))
            break;
          if (sub_2341A5F48((uint64_t)a2, a3, *(_QWORD *)(v12 + 8)))
          {
            *a1 = *(_QWORD *)(v12 + 8);
            sub_2341A3A7C(v12);
            v8 = 1;
            goto LABEL_13;
          }
        }
      }
    }
    v8 = 0;
LABEL_13:
    sub_234195C54((pthread_rwlock_t *)(*a2 + 8));
  }
  return v8;
}

uint64_t sub_2341A4300(uint64_t a1, uint64_t a2)
{
  return sub_2341A7904(*(_QWORD *)(a1 + 216), a2);
}

uint64_t sub_2341A4308(uint64_t a1, int a2)
{
  sub_234175378(*(_QWORD *)(a1 + 216), a2);
  return 1;
}

uint64_t sub_2341A4324(uint64_t a1, int a2)
{
  return sub_2341A792C(*(_QWORD *)(a1 + 216), a2);
}

uint64_t sub_2341A432C(uint64_t a1, int a2)
{
  return sub_2341A7984(*(_QWORD *)(a1 + 216), a2);
}

uint64_t sub_2341A4334(uint64_t a1, uint64_t a2)
{
  return sub_2341A78FC(*(_QWORD *)(a1 + 216), a2);
}

uint64_t sub_2341A433C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 216);
}

uint64_t sub_2341A4344(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 224) = a2;
  return result;
}

uint64_t sub_2341A434C(int *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *a1;
  v3 = (*a1 - *(_DWORD *)a2);
  if (*a1 != *(_DWORD *)a2)
    return v3;
  if (v2 == 2)
    return sub_2341A309C(*((_QWORD *)a1 + 1), *(_QWORD *)(a2 + 8));
  if (v2 != 1)
    return 0;
  return sub_2341A3088(*((_QWORD *)a1 + 1), *(_QWORD *)(a2 + 8));
}

uint64_t sub_2341A4394(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A43A0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A43AC(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t sub_2341A43D8(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A43E4(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A43F0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

_BYTE *sub_2341A43FC(uint64_t *a1, _BYTE *a2, int a3)
{
  _BYTE *v3;
  unsigned int v5;
  unint64_t *v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  char **v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t i;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int16 v33;
  signed int v35;
  unint64_t *v36;
  _BYTE v37[80];
  __int128 v38;
  uint64_t v39;

  v3 = a2;
  v39 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v6 = sub_234147410();
    if (!v6)
      goto LABEL_66;
    v7 = v6;
    if (!sub_2341474C8(v6, 0xC8uLL))
    {
      v6 = v7;
      goto LABEL_66;
    }
    *(_BYTE *)v7[1] = 0;
    if (a1)
    {
      v36 = v7;
      v5 = 200;
      goto LABEL_9;
    }
    v3 = (_BYTE *)v7[1];
    sub_23418E3C4(v7);
    v5 = 200;
LABEL_62:
    sub_23418E9CC(v3, "NO X509_NAME", v5);
    return v3;
  }
  v5 = a3;
  if (a3 < 1)
    return 0;
  if (!a1)
    goto LABEL_62;
  v36 = 0;
LABEL_9:
  if (!sub_2341709C4(*a1))
  {
    v9 = 0;
LABEL_54:
    if (v36)
    {
      v3 = (_BYTE *)v36[1];
      sub_23418E3C4(v36);
      if (v9)
        return v3;
    }
    else
    {
LABEL_58:
      if (v9)
        return v3;
    }
    *v3 = 0;
    return v3;
  }
  v35 = v5;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = sub_2341953E8((unint64_t *)*a1, v9);
    v11 = sub_23418EBF8((unsigned __int16 *)*v10);
    if (!v11 || (v12 = sub_23418F154(v11)) == 0)
    {
      v12 = (char **)v37;
      sub_23413F36C(v37, 80, *v10);
    }
    v13 = strlen((const char *)v12);
    v14 = (unsigned int *)v10[1];
    v15 = *v14;
    if ((int)v15 > 0x100000)
    {
      v33 = 121;
LABEL_64:
      sub_2341579B4(11, 0, 135, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_obj.c", v33);
      v6 = v36;
      goto LABEL_66;
    }
    v16 = v13;
    v17 = v14[1];
    v18 = *((_QWORD *)v14 + 1);
    if ((v15 & 3) != 0 || v17 != 27)
      goto LABEL_26;
    v38 = 0uLL;
    if ((int)v15 < 1)
      goto LABEL_27;
    for (i = 0; i != v15; ++i)
    {
      if (*(_BYTE *)(v18 + i))
        *(_DWORD *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))) = 1;
    }
    if (!(DWORD1(v38) | v38 | DWORD2(v38)))
    {
LABEL_27:
      v21 = xmmword_2342E8A40;
    }
    else
    {
LABEL_26:
      *(_QWORD *)&v21 = 0x100000001;
      *((_QWORD *)&v21 + 1) = 0x100000001;
    }
    v38 = v21;
    if ((int)v15 < 1)
    {
      v23 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      do
      {
        if (*(_DWORD *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3))))
        {
          if (*(unsigned __int8 *)(v18 + v22) - 127 >= 0xFFFFFFA1)
            ++v23;
          else
            v23 += 4;
        }
        ++v22;
      }
      while (v15 != v22);
    }
    v24 = v8 + v13 + v23 + 2;
    if (v24 > 0x100000)
    {
      v33 = 157;
      goto LABEL_64;
    }
    if (!v36)
    {
      v25 = v3;
      if (v24 >= v35)
        goto LABEL_58;
      goto LABEL_42;
    }
    if (!sub_2341474C8(v36, (int)(v8 + v13 + v23 + 3)))
      break;
    v25 = (_BYTE *)v36[1];
LABEL_42:
    v26 = &v25[v8];
    *v26 = 47;
    v27 = v26 + 1;
    if (v16)
      memcpy(v27, v12, v16);
    v28 = &v27[v16];
    *v28 = 61;
    v29 = v28 + 1;
    if ((int)v15 >= 1)
    {
      v30 = 0;
      v31 = *(_QWORD *)(v10[1] + 8);
      do
      {
        if (*(_DWORD *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v30 & 3))))
        {
          v32 = *(unsigned __int8 *)(v31 + v30);
          if ((v32 - 127) > 0xFFFFFFA0)
          {
            *v29++ = v32;
          }
          else
          {
            *(_WORD *)v29 = 30812;
            v29[2] = a0123456789abcd_4[v32 >> 4];
            v29[3] = a0123456789abcd_4[v32 & 0xF];
            v29 += 4;
          }
        }
        ++v30;
      }
      while (v15 != v30);
    }
    *v29 = 0;
    ++v9;
    v8 = v24;
    if (v9 >= sub_2341709C4(*a1))
      goto LABEL_54;
  }
  v6 = v36;
LABEL_66:
  sub_234141344((uint64_t)v6);
  return 0;
}

uint64_t sub_2341A479C(uint64_t a1)
{
  return sub_23413EAA0(*(_QWORD *)(*(_QWORD *)a1 + 24));
}

uint64_t sub_2341A47A8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 32);
}

uint64_t sub_2341A47B4(uint64_t result)
{
  if (result)
    return sub_2341AB718(*(_QWORD *)(*(_QWORD *)result + 40));
  return result;
}

uint64_t sub_2341A47C8(uint64_t result)
{
  if (result)
    return sub_2341AB6DC(*(_QWORD *)(*(_QWORD *)result + 40));
  return result;
}

uint64_t sub_2341A47DC(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  __int16 v5;

  if (result)
  {
    result = sub_2341AB6DC(*(_QWORD *)(*(_QWORD *)result + 40));
    if (result)
    {
      v3 = sub_234158104(result, a2);
      if (v3 > 0)
        return 1;
      if (v3 == -2)
      {
        if (sub_2341414B8(a2) == 408)
        {
          v4 = 15;
          v5 = 113;
        }
        else
        {
          v4 = 128;
          v5 = 115;
        }
      }
      else if (v3 == -1)
      {
        v4 = 115;
        v5 = 109;
      }
      else
      {
        if (v3)
          return 0;
        v4 = 116;
        v5 = 106;
      }
      sub_2341579B4(11, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_req.c", v5);
      return 0;
    }
  }
  return result;
}

BOOL sub_2341A48B4(int a1)
{
  return (a1 - 171) < 2;
}

_QWORD *sub_2341A48C4(_QWORD *result)
{
  uint64_t v1;
  char **v2;
  unsigned int v3;
  unint64_t *v4;
  int *v5;
  uint64_t v6;

  if (result)
  {
    v1 = (uint64_t)result;
    if (!*result)
      return 0;
    v2 = sub_23418F064(0xACu);
    if (!v2 || (v3 = sub_2341A4B20(v1, (uint64_t)v2, -1), v3 == -1))
    {
      result = sub_23418F064(0xABu);
      if (!result)
        return result;
      v3 = sub_2341A4B20(v1, (uint64_t)result, -1);
      if (v3 == -1)
        return 0;
    }
    v4 = sub_2341A49D8(v1, v3);
    result = sub_2341A2F94((uint64_t)v4, 0);
    if (!result)
      return result;
    if (*(_DWORD *)result == 16)
    {
      v5 = (int *)result[1];
      v6 = *((_QWORD *)v5 + 1);
      return (_QWORD *)sub_234141DAC(0, &v6, *v5, (uint64_t)&unk_250513098);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2341A4990(uint64_t a1, unsigned int a2, int a3)
{
  char **v5;

  v5 = sub_23418F064(a2);
  if (v5)
    return sub_2341A4B20(a1, (uint64_t)v5, a3);
  else
    return 0xFFFFFFFFLL;
}

unint64_t *sub_2341A49D8(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if (!v3 || sub_2341709C4(v3) <= (unint64_t)a2)
    return 0;
  else
    return sub_2341953E8(*(unint64_t **)(*(_QWORD *)a1 + 48), a2);
}

uint64_t sub_2341A4A30(uint64_t a1, int *a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  void *v8;

  v8 = 0;
  v5 = sub_234143140(a2, &v8, (uint64_t)&unk_250513098);
  if (v5 < 1)
    return 0;
  v6 = sub_2341A4AAC(a1, a3, 16, (char *)v8, v5);
  sub_23418E3C4(v8);
  return v6;
}

uint64_t sub_2341A4AAC(uint64_t a1, unsigned int a2, int a3, char *a4, int a5)
{
  const char ***v6;

  v6 = sub_2341A2BD4(0, a2, a3, a4, a5);
  if (v6 && sub_2341A4C5C(a1, (uint64_t)v6))
    return 1;
  sub_2341AA404((uint64_t)v6);
  return 0;
}

uint64_t sub_2341A4AFC(uint64_t a1, int *a2)
{
  return sub_2341A4A30(a1, a2, 0xACu);
}

uint64_t sub_2341A4B04(uint64_t a1)
{
  return sub_2341709C4(*(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t sub_2341A4B20(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if (v4)
  {
    v7 = sub_2341709C4(v4);
    if (a3 < 0)
      v8 = -1;
    else
      v8 = a3;
    v9 = v8;
    v10 = v7;
    v11 = 1;
    while (v9 + v11 < v10)
    {
      v12 = (uint64_t *)sub_2341953E8(*(unint64_t **)(*(_QWORD *)a1 + 48), v9 + v11++);
      if (!sub_23418EB9C(*v12, a2))
        return (v9 + v11 - 1);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_2341A4BB4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if (!v3 || sub_2341709C4(v3) <= (unint64_t)a2)
    return 0;
  else
    return sub_23419560C(*(uint64_t **)(*(_QWORD *)a1 + 48), a2);
}

uint64_t sub_2341A4C0C(uint64_t a1, int *a2)
{
  uint64_t v3;

  v3 = sub_2341AA410(a2);
  if (v3 && sub_2341A4C5C(a1, v3))
    return 1;
  sub_2341AA404(v3);
  return 0;
}

unint64_t *sub_2341A4C5C(uint64_t a1, uint64_t a2)
{
  unint64_t *result;

  result = *(unint64_t **)(*(_QWORD *)a1 + 48);
  if (result)
    return (unint64_t *)(sub_2341958E8(result, a2) != 0);
  *(_QWORD *)(*(_QWORD *)a1 + 48) = sub_2341953A0();
  result = *(unint64_t **)(*(_QWORD *)a1 + 48);
  if (result)
    return (unint64_t *)(sub_2341958E8(result, a2) != 0);
  return result;
}

uint64_t sub_2341A4CB0(uint64_t a1, uint64_t a2, int a3, char *a4, int a5)
{
  const char ***v6;

  v6 = sub_2341A2C50(0, a2, a3, a4, a5);
  if (v6 && sub_2341A4C5C(a1, (uint64_t)v6))
    return 1;
  sub_2341AA404((uint64_t)v6);
  return 0;
}

uint64_t sub_2341A4D00(uint64_t a1, const char *a2, int a3, char *a4, int a5)
{
  const char ***v6;

  v6 = sub_2341A2E60(0, a2, a3, a4, a5);
  if (v6 && sub_2341A4C5C(a1, (uint64_t)v6))
    return 1;
  sub_2341AA404((uint64_t)v6);
  return 0;
}

uint64_t sub_2341A4D50(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)(result + 16);
  if (a3)
    *a3 = *(_QWORD *)(result + 8);
  return result;
}

unsigned __int16 *sub_2341A4D6C(uint64_t a1)
{
  return sub_23418EBF8(**(unsigned __int16 ***)(a1 + 8));
}

uint64_t sub_2341A4D78(uint64_t *a1, void **a2)
{
  sub_2341449E0(*a1);
  return sub_2341AB8F0((int *)*a1, a2);
}

uint64_t sub_2341A4DA8(uint64_t **a1)
{
  uint64_t result;

  result = **a1;
  if (result)
    return sub_23413EAA0(result);
  return result;
}

uint64_t sub_2341A4DBC(uint64_t result, unint64_t a2)
{
  uint64_t **v3;

  if (result)
  {
    if (a2 < 3)
    {
      v3 = (uint64_t **)result;
      result = **(_QWORD **)result;
      if (a2)
      {
        if (result)
          return sub_23413E838(result, a2);
        **v3 = (uint64_t)sub_23414464C();
        result = **v3;
        if (result)
          return sub_23413E838(result, a2);
      }
      else
      {
        sub_234144630(result);
        **v3 = 0;
        return 1;
      }
    }
    else
    {
      sub_2341579B4(11, 0, 140, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_set.c", 80);
      return 0;
    }
  }
  return result;
}

BOOL sub_2341A4E54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(a2 + 4) | 0x100) != 0x102)
  {
    sub_2341579B4(12, 0, 191, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_set.c", 102);
    return 0;
  }
  if (!a1)
    return 0;
  v3 = a2;
  if (*(_QWORD *)(*(_QWORD *)a1 + 8) != a2)
  {
    v3 = sub_23413E408(a2);
    if (v3)
    {
      sub_234144630(*(_QWORD *)(*(_QWORD *)a1 + 8));
      *(_QWORD *)(*(_QWORD *)a1 + 8) = v3;
    }
  }
  return v3 != 0;
}

uint64_t sub_2341A4EE8(uint64_t a1, int *a2)
{
  if (a1 && *(_QWORD *)a1)
    return sub_2341AAC9C((uint64_t *)(*(_QWORD *)a1 + 24), a2);
  else
    return 0;
}

uint64_t sub_2341A4F04(uint64_t a1, int *a2)
{
  if (a1 && *(_QWORD *)a1)
    return sub_2341AAC9C((uint64_t *)(*(_QWORD *)a1 + 40), a2);
  else
    return 0;
}

BOOL sub_2341A4F20(_BOOL8 result, int *a2)
{
  uint64_t v2;
  int **v3;
  _QWORD *v4;

  if (result)
  {
    v2 = result;
    v3 = *(int ***)(*(_QWORD *)result + 32);
    if (v3)
    {
      v4 = a2;
      if (*v3 != a2)
      {
        v4 = sub_234141298(a2);
        if (v4)
        {
          sub_2341404FC(**(_QWORD **)(*(_QWORD *)v2 + 32));
          **(_QWORD **)(*(_QWORD *)v2 + 32) = v4;
        }
      }
      return v4 != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2341A4F9C(uint64_t a1)
{
  return **(_QWORD **)(*(_QWORD *)a1 + 32);
}

BOOL sub_2341A4FAC(_BOOL8 result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(*(_QWORD *)result + 32);
    if (v3)
    {
      v4 = a2;
      if (*(int **)(v3 + 8) != a2)
      {
        v4 = sub_234141298(a2);
        if (v4)
        {
          sub_2341404FC(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 32) + 8));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 32) + 8) = v4;
        }
      }
      return v4 != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2341A5028(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 8);
}

uint64_t sub_2341A5038(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)(*(_QWORD *)result + 56);
  if (a3)
    *a3 = *(_QWORD *)(*(_QWORD *)result + 64);
  return result;
}

uint64_t sub_2341A505C(_QWORD *a1, uint64_t a2)
{
  if (a1 && *a1)
    return sub_2341AB5A4(*a1 + 48, a2);
  else
    return 0;
}

uint64_t sub_2341A5078(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 72);
}

uint64_t sub_2341A5084(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16);
}

uint64_t sub_2341A5090(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 48);
}

uint64_t sub_2341A509C(uint64_t a1, int a2)
{
  uint64_t result;
  _BOOL4 v4;
  uint64_t v5;

  if (a2 == -1)
    return 1;
  if (a2)
  {
    v5 = 0;
    while (dword_250512C08[v5] != a2)
    {
      v5 += 6;
      if (v5 == 36)
        return sub_2341A5150(a2, a1);
    }
    return (*(uint64_t (**)(int *, uint64_t))&dword_250512C08[v5 + 2])(&dword_250512C08[v5], a1);
  }
  else
  {
    result = sub_2341A5150(910, a1);
    if ((_DWORD)result == 3)
    {
      v4 = sub_23419FB1C(a1);
      result = 3;
      if (v4)
      {
        if ((*(_BYTE *)(a1 + 49) & 0x20) != 0)
          return 1;
        else
          return 3;
      }
    }
  }
  return result;
}

uint64_t sub_2341A5150(int a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unsigned __int16 *v7;

  v2 = *(_QWORD *)(a2 + 136);
  if (!v2)
    return 3;
  if (!sub_2341709C4(*(_QWORD *)(v2 + 8)))
  {
LABEL_6:
    if (sub_2341709C4(*(_QWORD *)v2))
    {
      v6 = 0;
      while (1)
      {
        v7 = (unsigned __int16 *)sub_2341953E8(*(unint64_t **)v2, v6);
        if (sub_23418EBF8(v7) == a1)
          break;
        if (++v6 >= sub_2341709C4(*(_QWORD *)v2))
          return 3;
      }
      return 1;
    }
    return 3;
  }
  v4 = 0;
  while (1)
  {
    v5 = (unsigned __int16 *)sub_2341953E8(*(unint64_t **)(v2 + 8), v4);
    if (sub_23418EBF8(v5) == a1)
      return 2;
    if (++v4 >= sub_2341709C4(*(_QWORD *)(v2 + 8)))
      goto LABEL_6;
  }
}

uint64_t sub_2341A5208(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;
  uint64_t result;

  v3 = sub_23419FB1C(a2);
  result = 3;
  if (v3)
  {
    if ((*(_BYTE *)(a2 + 49) & 0x20) != 0)
      return 1;
    else
      return 3;
  }
  return result;
}

BOOL sub_2341A5244(int a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;

  v1 = 0;
  do
  {
    v2 = dword_250512C08[v1];
    if (v2 == a1)
      break;
    v3 = v1 == 30;
    v1 += 6;
  }
  while (!v3);
  return v2 == a1;
}

uint64_t sub_2341A5278(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  _BOOL4 v5;

  v3 = *(_QWORD **)(a2 + 136);
  if (v3 && (*v3 || v3[1]))
    return sub_2341A5150(*(_DWORD *)(a1 + 16), a2);
  v5 = sub_23419FB1C(a2);
  result = 3;
  if (v5)
  {
    if ((*(_BYTE *)(a2 + 49) & 0x20) != 0)
      return 1;
    else
      return 3;
  }
  return result;
}

uint64_t sub_2341A52E0(uint64_t result)
{
  if (result)
    return sub_2341709C4(result);
  return result;
}

uint64_t sub_2341A52F8(unint64_t *a1, unsigned int a2, int a3)
{
  char **v5;

  v5 = sub_23418F064(a2);
  if (v5)
    return sub_2341A5340(a1, (uint64_t)v5, a3);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_2341A5340(unint64_t *a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  if (!a1)
    return 0xFFFFFFFFLL;
  v6 = sub_2341709C4((uint64_t)a1);
  if (a3 < 0)
    v7 = -1;
  else
    v7 = a3;
  v8 = v7;
  v9 = v6;
  v10 = 1;
  while (v8 + v10 < v9)
  {
    v11 = (uint64_t *)sub_2341953E8(a1, v8 + v10++);
    if (!sub_23418EB9C(*v11, a2))
      return (v8 + v10 - 1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_2341A53D0(unint64_t *a1, int a2, int a3)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  int v12;

  if (!a1)
    return 0xFFFFFFFFLL;
  v5 = a2 != 0;
  v6 = sub_2341709C4((uint64_t)a1);
  if (a3 < 0)
    v7 = -1;
  else
    v7 = a3;
  v8 = v7;
  v9 = v6;
  v10 = 1;
  while (v8 + v10 < v9)
  {
    v11 = sub_2341953E8(a1, v8 + v10);
    if (v11)
      v12 = *((_DWORD *)v11 + 2) > 0;
    else
      v12 = 0;
    ++v10;
    if (v12 == v5)
      return (v8 + v10 - 1);
  }
  return 0xFFFFFFFFLL;
}

BOOL sub_2341A5474(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 8) > 0;
  return result;
}

unint64_t *sub_2341A5488(unint64_t *a1, unsigned int a2)
{
  if (!a1 || (a2 & 0x80000000) != 0 || sub_2341709C4((uint64_t)a1) <= (unint64_t)a2)
    return 0;
  else
    return sub_2341953E8(a1, a2);
}

uint64_t sub_2341A54D4(uint64_t *a1, unsigned int a2)
{
  if (!a1 || (a2 & 0x80000000) != 0 || sub_2341709C4((uint64_t)a1) <= (unint64_t)a2)
    return 0;
  else
    return sub_23419560C(a1, a2);
}

unint64_t *sub_2341A5520(unint64_t **a1, int *a2, int a3)
{
  unint64_t *v6;
  unint64_t *v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  int v11;

  if (!a1)
  {
    sub_2341579B4(11, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_v3.c", 149);
LABEL_15:
    sub_2341AAC00(0);
    return 0;
  }
  v6 = *a1;
  v7 = *a1;
  if (!*a1)
  {
    v7 = sub_2341953A0();
    if (!v7)
      goto LABEL_15;
  }
  v8 = sub_2341709C4((uint64_t)v7);
  v9 = sub_2341AAC24(a2);
  if (!v9 || (v8 >= a3 ? (v10 = a3 < 0) : (v10 = 1), !v10 ? (v11 = a3) : (v11 = v8), !sub_23419550C(v7, v9, v11)))
  {
    sub_2341AAC00(v9);
    if (!v6)
      sub_234141344((uint64_t)v7);
    return 0;
  }
  if (!*a1)
    *a1 = v7;
  return v7;
}

uint64_t sub_2341A5600(uint64_t *a1, unsigned int a2, int a3, uint64_t a4)
{
  char **v7;

  v7 = sub_23418F064(a2);
  if (v7)
    return sub_2341A5674(a1, (uint64_t)v7, a3, a4);
  sub_2341579B4(11, 0, 129, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_v3.c", 196);
  return 0;
}

uint64_t sub_2341A5674(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;

  if (a1 && (v8 = *a1) != 0 || (v8 = sub_2341AABF4()) != 0)
  {
    if (sub_2341A2D00((const char ***)v8, a2)
      && (!a3 ? (v9 = -1) : (v9 = 255),
          *(_DWORD *)(v8 + 8) = v9,
          sub_23413F774(*(_QWORD *)(v8 + 16), *(char **)(a4 + 8), *(_DWORD *)a4)))
    {
      if (a1 && !*a1)
        *a1 = v8;
    }
    else
    {
      if (!a1 || v8 != *a1)
        sub_2341AAC00(v8);
      return 0;
    }
  }
  return v8;
}

uint64_t sub_2341A572C(uint64_t result, int a2)
{
  int v2;

  if (result)
  {
    if (a2)
      v2 = 255;
    else
      v2 = -1;
    *(_DWORD *)(result + 8) = v2;
    return 1;
  }
  return result;
}

BOOL sub_2341A5748(_BOOL8 result, uint64_t a2)
{
  if (result)
    return sub_23413F774(*(_QWORD *)(result + 16), *(char **)(a2 + 8), *(_DWORD *)a2) != 0;
  return result;
}

uint64_t sub_2341A5778(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_2341A5784(uint64_t a1)
{
  int v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  int v22;
  int v23;
  unint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t i;
  unint64_t *v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unsigned int v41;
  unint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;

  if (!*(_QWORD *)(a1 + 8))
  {
    v2 = 122;
    v3 = 184;
    goto LABEL_7;
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v2 = 66;
    v3 = 192;
LABEL_7:
    sub_2341579B4(11, 0, v2, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_vfy.c", v3);
    v5 = 0;
    v6 = 65;
LABEL_8:
    *(_DWORD *)(a1 + 76) = v6;
    return v5;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v4 + 9) & 0x30) != 0)
  {
    v2 = 66;
    v3 = 202;
    goto LABEL_7;
  }
  v8 = sub_2341953A0();
  *(_QWORD *)(a1 + 64) = v8;
  if (!v8 || !sub_2341958E8(v8, *(_QWORD *)(a1 + 8)))
  {
    v11 = 0;
    v5 = 0;
    v10 = 0;
LABEL_16:
    v12 = 17;
    goto LABEL_17;
  }
  sub_234193794(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 56) = 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = sub_23419590C(v9);
    if (!v10)
    {
LABEL_14:
      v11 = 0;
LABEL_92:
      v5 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v10 = 0;
  }
  v14 = sub_2341709C4(*(_QWORD *)(a1 + 64));
  v15 = sub_2341953E8(*(unint64_t **)(a1 + 64), v14 - 1);
  v16 = *(_DWORD *)(v4 + 24);
  if (v16 <= 2147483644)
    v17 = v16 + 2;
  else
    v17 = 0x7FFFFFFF;
  if (v17 <= v14)
  {
LABEL_37:
    v19 = v14;
    goto LABEL_38;
  }
  v18 = (uint64_t)v15;
  v19 = v14;
  while (sub_23419FB1C(v18))
  {
    if ((*(_BYTE *)(v18 + 49) & 0x20) != 0)
      goto LABEL_38;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) & 0x80) != 0)
    {
      v20 = sub_2341A5E58((uint64_t *)a1, v18);
      if (v20)
      {
        sub_2341ABB70(v20);
LABEL_38:
        v49 = v17;
        v11 = 0;
        v13 = 0;
        v22 = v19;
        while (2)
        {
          v23 = sub_2341709C4(*(_QWORD *)(a1 + 64)) - 1;
          v24 = sub_2341953E8(*(unint64_t **)(a1 + 64), v23);
          if (!sub_23419FB1C((uint64_t)v24))
            goto LABEL_94;
          if ((*((_BYTE *)v24 + 49) & 0x20) == 0)
          {
            v25 = (uint64_t)v24;
            goto LABEL_49;
          }
          if (sub_2341709C4(*(_QWORD *)(a1 + 64)) == 1)
          {
            v25 = sub_2341A5E58((uint64_t *)a1, (uint64_t)v24);
            if (!v25 || sub_2341A326C(v24, (unint64_t *)v25))
            {
              sub_2341ABB70(v25);
              *(_QWORD *)(a1 + 80) = v24;
              *(_DWORD *)(a1 + 72) = v23;
              *(_DWORD *)(a1 + 76) = 18;
              v26 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
              if (v26 >= 2)
                goto LABEL_112;
              v13 = 1;
              v27 = v49;
              if (!v26)
                goto LABEL_110;
              v25 = (uint64_t)v24;
              goto LABEL_50;
            }
            sub_2341ABB70((uint64_t)v24);
            sub_23419540C(*(unint64_t **)(a1 + 64), v23, v25);
            *(_DWORD *)(a1 + 56) = 0;
          }
          else
          {
            v11 = sub_2341958F0(*(uint64_t **)(a1 + 64));
            --*(_DWORD *)(a1 + 56);
            --v19;
            v25 = (uint64_t)sub_2341953E8(*(unint64_t **)(a1 + 64), v22 - 2);
            --v22;
          }
LABEL_49:
          v27 = v49;
LABEL_50:
          if (v22 >= v27)
            goto LABEL_57;
          do
          {
            if (!sub_23419FB1C(v25))
              goto LABEL_94;
            if ((*(_BYTE *)(v25 + 49) & 0x20) != 0)
              goto LABEL_57;
            v28 = sub_2341A5E58((uint64_t *)a1, v25);
            if (!v28)
              goto LABEL_57;
            v29 = v28;
            if (!sub_2341958E8(*(unint64_t **)(a1 + 64), v28))
            {
              sub_2341ABB70(v29);
              goto LABEL_92;
            }
            ++v22;
            v25 = v29;
          }
          while (v27 != v22);
          v22 = v27;
          v25 = v29;
LABEL_57:
          for (i = *(int *)(a1 + 56); i < sub_2341709C4(*(_QWORD *)(a1 + 64)); ++i)
          {
            v31 = sub_2341953E8(*(unint64_t **)(a1 + 64), i);
            v32 = sub_2341A509C((uint64_t)v31, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 20));
            if (v32 == 2)
            {
              *(_QWORD *)(a1 + 80) = v31;
              *(_DWORD *)(a1 + 72) = i;
              *(_DWORD *)(a1 + 76) = 28;
              v33 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
              if (v33 >= 2)
                goto LABEL_112;
              if (!v33)
                goto LABEL_109;
            }
            else if (v32 == 1)
            {
              goto LABEL_101;
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 10) & 8) == 0)
            goto LABEL_76;
          v34 = *(_DWORD *)(a1 + 56);
          if (v34 < (int)sub_2341709C4(*(_QWORD *)(a1 + 64)))
          {
LABEL_101:
            if (sub_2341A5FB4(a1)
              && sub_2341A615C(a1)
              && sub_2341A62F4(a1)
              && sub_2341A6694(a1)
              && sub_2341A6924(a1)
              && (v13 || sub_2341A6B18(a1)))
            {
              v13 = 0;
              v5 = 1;
              goto LABEL_19;
            }
LABEL_109:
            v5 = 0;
            goto LABEL_18;
          }
          v35 = sub_2341953E8(*(unint64_t **)(a1 + 64), 0);
          v36 = sub_2341A323C((uint64_t)v35);
          v37 = sub_2341A3D50((unint64_t ***)a1, v36);
          if (v37)
          {
            v38 = v37;
            v48 = v11;
            v39 = 0;
            if (sub_2341709C4((uint64_t)v37))
            {
              do
              {
                v40 = sub_2341953E8(v38, v39);
                if (!sub_2341A326C(v40, v35))
                  break;
                ++v39;
              }
              while (v39 < sub_2341709C4((uint64_t)v38));
            }
            else
            {
              v40 = 0;
            }
            if (v39 >= sub_2341709C4((uint64_t)v38))
            {
              sub_234195434(v38, (void (*)(uint64_t))sub_2341A7680, (uint64_t)sub_2341ABB70);
              v11 = v48;
            }
            else
            {
              sub_234193794((uint64_t)v40);
              sub_234195434(v38, (void (*)(uint64_t))sub_2341A7680, (uint64_t)sub_2341ABB70);
              v11 = v48;
              if (v40)
              {
                sub_23419540C(*(unint64_t **)(a1 + 64), 0, (uint64_t)v40);
                sub_2341ABB70((uint64_t)v35);
                *(_DWORD *)(a1 + 56) = 0;
                goto LABEL_101;
              }
            }
          }
LABEL_76:
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) & 0x108000) != 0)
          {
LABEL_86:
            if (v13)
              goto LABEL_101;
            if (v11 && sub_2341A5F48(a1, v25, v11))
            {
              if (!sub_2341958E8(*(unint64_t **)(a1 + 64), v11))
                goto LABEL_92;
              *(_DWORD *)(a1 + 56) = ++v22;
              *(_QWORD *)(a1 + 80) = v11;
              *(_DWORD *)(a1 + 76) = 19;
              v11 = 0;
            }
            else
            {
              if (*(_DWORD *)(a1 + 56) >= v22)
                v46 = 20;
              else
                v46 = 2;
              *(_DWORD *)(a1 + 76) = v46;
              *(_QWORD *)(a1 + 80) = v25;
            }
            *(_DWORD *)(a1 + 72) = v22 - 1;
            v47 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
            if (v47 >= 2)
LABEL_112:
              abort();
            v13 = 1;
            if (v47)
              goto LABEL_101;
LABEL_110:
            v5 = 0;
            goto LABEL_19;
          }
          v41 = v19 - 2;
          do
          {
            if (v19 < 2)
              goto LABEL_86;
            --v19;
            v42 = sub_2341953E8(*(unint64_t **)(a1 + 64), v41);
            v43 = sub_2341A5E58((uint64_t *)a1, (uint64_t)v42);
            --v41;
          }
          while (!v43);
          sub_2341ABB70(v43);
          if (v22 >= v19 + 1)
          {
            v44 = v22 + 1;
            do
            {
              v45 = sub_2341958F0(*(uint64_t **)(a1 + 64));
              sub_2341ABB70(v45);
              --v44;
            }
            while (v44 > v19 + 1);
            v22 = v19;
          }
          *(_DWORD *)(a1 + 56) = sub_2341709C4(*(_QWORD *)(a1 + 64));
          continue;
        }
      }
    }
    if (!v10)
      goto LABEL_37;
    v21 = sub_2341A5EC4(a1, v10, v18);
    if (!v21)
      goto LABEL_38;
    v18 = (uint64_t)v21;
    if (!sub_2341958E8(*(unint64_t **)(a1 + 64), (uint64_t)v21))
      goto LABEL_14;
    sub_234193794(v18);
    sub_234195680((uint64_t *)v10, v18);
    ++*(_DWORD *)(a1 + 56);
    if (v17 == ++v19)
    {
      v19 = v17;
      goto LABEL_38;
    }
  }
  v11 = 0;
LABEL_94:
  v5 = 0;
  v12 = 41;
LABEL_17:
  *(_DWORD *)(a1 + 76) = v12;
LABEL_18:
  v13 = 1;
LABEL_19:
  sub_234141344((uint64_t)v10);
  sub_2341ABB70(v11);
  if (v13 && !*(_DWORD *)(a1 + 76))
  {
    v6 = 1;
    goto LABEL_8;
  }
  return v5;
}

uint64_t sub_2341A5E58(uint64_t *a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v7;

  v3 = (unint64_t *)a1[5];
  if (v3)
  {
    v4 = sub_2341A5EC4((uint64_t)a1, v3, a2);
    v5 = v4;
    if (v4)
      sub_234193794((uint64_t)v4);
  }
  else
  {
    v7 = 0;
    if (sub_2341A4190(&v7, a1, a2))
      return v7;
    else
      return 0;
  }
  return (uint64_t)v5;
}

unint64_t *sub_2341A5EC4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t *v7;

  if (!sub_2341709C4((uint64_t)a2))
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = sub_2341953E8(a2, v6);
    if (sub_2341A5F48(a1, a3, (uint64_t)v7))
      break;
    if (++v6 >= sub_2341709C4((uint64_t)a2))
      return 0;
  }
  return v7;
}

uint64_t sub_2341A5F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;

  v5 = sub_2341A02C0(a3, a2);
  if (!v5)
    return 1;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) & 1) == 0)
    return 0;
  *(_DWORD *)(a1 + 76) = v5;
  *(_QWORD *)(a1 + 80) = a2;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
  if (result >= 2)
    abort();
  return result;
}

uint64_t sub_2341A5FB4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (*(int *)(a1 + 56) < 1)
    return 1;
  v2 = 0;
  v3 = 0;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
  while (1)
  {
    v5 = sub_2341953E8(*(unint64_t **)(a1 + 64), v2);
    v6 = (uint64_t)v5;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) & 0x10) == 0 && (*((_BYTE *)v5 + 49) & 2) != 0)
    {
      *(_DWORD *)(a1 + 72) = v2;
      *(_DWORD *)(a1 + 76) = 34;
      *(_QWORD *)(a1 + 80) = v5;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
      if (result >= 2)
        goto LABEL_27;
      if (!(_DWORD)result)
        return result;
    }
    if (v2)
    {
      v8 = sub_2341A026C(v6);
      if (!(_DWORD)v8)
      {
        *(_DWORD *)(a1 + 72) = v2;
        *(_DWORD *)(a1 + 76) = 24;
        *(_QWORD *)(a1 + 80) = v6;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 48))(v8, a1);
        if (result >= 2)
          goto LABEL_27;
        if (!(_DWORD)result)
          return result;
      }
    }
    if (*(int *)(*(_QWORD *)(a1 + 32) + 16) >= 1 && sub_23419FA58(v6, v4, v2 != 0) != 1)
    {
      *(_DWORD *)(a1 + 72) = v2;
      *(_DWORD *)(a1 + 76) = 26;
      *(_QWORD *)(a1 + 80) = v6;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
      if (result >= 2)
        goto LABEL_27;
      if (!(_DWORD)result)
        return result;
    }
    if (v2 >= 2 && (*(_BYTE *)(v6 + 48) & 0x20) == 0)
    {
      v9 = *(_QWORD *)(v6 + 40);
      if (v9 != -1 && v9 + 1 < v3)
      {
        *(_DWORD *)(a1 + 72) = v2;
        *(_DWORD *)(a1 + 76) = 25;
        *(_QWORD *)(a1 + 80) = v6;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
        if (result >= 2)
LABEL_27:
          abort();
        if (!(_DWORD)result)
          return result;
      }
    }
    v3 += (*(_DWORD *)(v6 + 48) & 0x20) == 0;
    if ((uint64_t)++v2 >= *(int *)(a1 + 56))
      return 1;
  }
}

uint64_t sub_2341A615C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t *v9;
  size_t v10;
  void *v11;
  void *v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 88))
  {
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 72) = 0x4100000000;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
    if (result >= 2)
      goto LABEL_21;
    if (!(_DWORD)result)
      return result;
  }
  v5 = *(_QWORD *)(v2 + 40);
  if (v5)
  {
    v6 = sub_2341709C4(v5);
    if (v6)
    {
      v7 = v6;
      for (i = 0; i != v7; ++i)
      {
        v9 = sub_2341953E8(*(unint64_t **)(v2 + 40), i);
        v10 = strlen((const char *)v9);
        if ((int)sub_2341A1A94(v3, v9, v10, *(unsigned int *)(v2 + 48), 0) > 0)
          goto LABEL_11;
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 72) = 0x3E00000000;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
      if (result >= 2)
        goto LABEL_21;
      if (!(_DWORD)result)
        return result;
    }
  }
LABEL_11:
  v11 = *(void **)(v2 + 56);
  if (v11 && (int)sub_2341A1CF4(v3, v11, *(_QWORD *)(v2 + 64), 0) <= 0)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 72) = 0x3F00000000;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
    if (result >= 2)
      goto LABEL_21;
    if (!(_DWORD)result)
      return result;
  }
  v12 = *(void **)(v2 + 72);
  if (v12 && (int)sub_2341A1D6C(v3, v12, *(_QWORD *)(v2 + 80), 0) <= 0)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 72) = 0x4000000000;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
    if (result < 2)
    {
      if (!(_DWORD)result)
        return result;
      return 1;
    }
LABEL_21:
    abort();
  }
  return 1;
}

uint64_t sub_2341A62F4(uint64_t a1)
{
  uint64_t v1;
  unsigned int v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  int v20;
  unint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if ((v1 & 4) == 0)
    return 1;
  if ((v1 & 8) == 0)
  {
    v4 = 0;
LABEL_6:
    v6 = 0;
    v7 = 0;
    v8 = v4;
    v9 = v4 + 1;
    while (1)
    {
      *(_DWORD *)(a1 + 72) = v6;
      v10 = sub_2341953E8(*(unint64_t **)(a1 + 64), v6);
      *(_QWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 96) = 0;
      *(_DWORD *)(a1 + 104) = 0;
      v35 = 0;
      v34 = 0;
      v33 = 0;
      if (!sub_2341A70D0(a1, &v33, (unint64_t **)&v35, &v34, *(unint64_t **)(a1 + 24)))
      {
        v11 = sub_2341A3128((uint64_t)v10);
        v12 = sub_2341A4050((uint64_t *)a1, v11);
        v13 = v33;
        if (v12)
          v14 = 1;
        else
          v14 = v33 == 0;
        if (!v14)
          goto LABEL_15;
        v15 = v12;
        sub_2341A70D0(a1, &v33, (unint64_t **)&v35, &v34, v12);
        sub_234195434(v15, (void (*)(uint64_t))sub_2341A7674, (uint64_t)sub_2341AA558);
      }
      v13 = v33;
      if (!v33)
      {
        *(_DWORD *)(a1 + 76) = 3;
        v22 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
        if (v22 >= 2)
          goto LABEL_56;
        v23 = v22;
        sub_2341AA558(0);
        *(_QWORD *)(a1 + 88) = 0;
        if (!v23)
          return v7;
        goto LABEL_51;
      }
LABEL_15:
      v16 = v35;
      *(_DWORD *)(a1 + 104) = v34;
      *(_QWORD *)(a1 + 88) = v13;
      *(_QWORD *)(a1 + 96) = v16;
      v17 = *(int *)(a1 + 72);
      v18 = sub_2341709C4(*(_QWORD *)(a1 + 64));
      v19 = *(unint64_t **)(a1 + 96);
      if (v19)
        goto LABEL_59;
      v20 = v18 - 1;
      v21 = *(unint64_t **)(a1 + 64);
      if ((int)v17 >= v20)
      {
        v19 = sub_2341953E8(v21, v20);
        v24 = sub_2341A5F48(a1, (uint64_t)v19, (uint64_t)v19);
        if (!(_DWORD)v24)
        {
          *(_DWORD *)(a1 + 76) = 33;
          v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 48))(v24, a1);
          if (v25 >= 2)
            goto LABEL_56;
          if (!v25)
            goto LABEL_53;
        }
      }
      else
      {
        v19 = sub_2341953E8(v21, v17 + 1);
      }
      if (v19)
      {
LABEL_59:
        if ((v19[6] & 2) != 0 && (*((_BYTE *)v19 + 52) & 2) == 0)
        {
          *(_DWORD *)(a1 + 76) = 35;
          v26 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
          if (v26 >= 2)
            goto LABEL_56;
          if (!v26)
            goto LABEL_53;
        }
        if ((*(_BYTE *)(a1 + 104) & 0x80) == 0)
        {
          *(_DWORD *)(a1 + 76) = 44;
          v27 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
          if (v27 >= 2)
            goto LABEL_56;
          if (!v27)
            goto LABEL_53;
        }
        if ((*(_BYTE *)(v13 + 48) & 2) != 0)
        {
          *(_DWORD *)(a1 + 76) = 41;
          v28 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
          if (v28 >= 2)
            goto LABEL_56;
          if (!v28)
            goto LABEL_53;
        }
        if ((*(_BYTE *)(a1 + 104) & 0x40) == 0 && !sub_2341A7538(a1, v13, 1))
          goto LABEL_53;
        v29 = sub_2341A3424((uint64_t)v19);
        if (!v29)
        {
          *(_DWORD *)(a1 + 76) = 6;
          v30 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
LABEL_41:
          if (v30 >= 2)
            goto LABEL_56;
          if (!v30)
            goto LABEL_53;
          goto LABEL_43;
        }
        if ((int)sub_2341AA5DC(v13, v29) <= 0)
        {
          *(_DWORD *)(a1 + 76) = 8;
          v30 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
          goto LABEL_41;
        }
      }
LABEL_43:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) & 0x10) == 0 && (*(_BYTE *)(v13 + 29) & 2) != 0)
      {
        *(_DWORD *)(a1 + 76) = 36;
        v31 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
        if (v31 >= 2)
          goto LABEL_56;
        if (!v31)
          goto LABEL_53;
      }
      v35 = 0;
      if (sub_2341AA7BC(v13, &v35, (uint64_t)v10))
      {
        *(_DWORD *)(a1 + 76) = 23;
        v32 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
        if (v32 >= 2)
LABEL_56:
          abort();
        if (!v32)
        {
LABEL_53:
          sub_2341AA558(v13);
          *(_QWORD *)(a1 + 88) = 0;
          return v7;
        }
      }
      sub_2341AA558(v13);
      *(_QWORD *)(a1 + 88) = 0;
LABEL_51:
      v7 = v6++ >= v8;
      if (v9 == v6)
        return v7;
    }
  }
  v5 = sub_2341709C4(*(_QWORD *)(a1 + 64));
  v4 = v5 - 1;
  if (v5 >= 1)
    goto LABEL_6;
  return 1;
}

uint64_t sub_2341A6694(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t result;
  uint64_t v7;
  time_t *v8;
  time_t v9;
  time_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  BOOL v17;
  time_t v18;

  v2 = sub_2341709C4(*(_QWORD *)(a1 + 64));
  LODWORD(v3) = v2 - 1;
  *(_DWORD *)(a1 + 72) = v2 - 1;
  v4 = sub_2341953E8(*(unint64_t **)(a1 + 64), v2 - 1);
  if (sub_2341A5F48(a1, (uint64_t)v4, (uint64_t)v4))
  {
    v5 = v4;
    goto LABEL_9;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 10) & 8) != 0)
    goto LABEL_12;
  if (v2 > 1)
  {
    LODWORD(v3) = v2 - 2;
    *(_DWORD *)(a1 + 72) = v2 - 2;
    v5 = sub_2341953E8(*(unint64_t **)(a1 + 64), (v2 - 2));
    while (1)
    {
LABEL_9:
      if ((v3 & 0x80000000) != 0)
        return 1;
      *(_DWORD *)(a1 + 72) = v3;
      if (v5 == v4 && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) & 0x40) == 0)
      {
LABEL_12:
        v5 = v4;
        goto LABEL_19;
      }
      v7 = sub_2341A3424((uint64_t)v4);
      if (v7)
      {
        if ((int)sub_2341A8E04((uint64_t)v5, v7) > 0)
          goto LABEL_19;
        *(_DWORD *)(a1 + 76) = 7;
        *(_QWORD *)(a1 + 80) = v5;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
      }
      else
      {
        *(_DWORD *)(a1 + 76) = 6;
        *(_QWORD *)(a1 + 80) = v4;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
      }
      if (result >= 2)
        goto LABEL_8;
      if (!(_DWORD)result)
        return result;
LABEL_19:
      v8 = *(time_t **)(a1 + 32);
      v9 = v8[1];
      if ((v9 & 0x200000) != 0)
        goto LABEL_41;
      if ((v9 & 2) != 0)
        v10 = *v8;
      else
        v10 = time(0);
      v11 = (int *)sub_2341A4F9C((uint64_t)v5);
      v18 = 0;
      v12 = sub_234140958(v11, &v18);
      if ((_DWORD)v12)
      {
        if (v18 <= v10)
          goto LABEL_29;
        *(_DWORD *)(a1 + 76) = 9;
        *(_QWORD *)(a1 + 80) = v5;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
      }
      else
      {
        *(_DWORD *)(a1 + 76) = 13;
        *(_QWORD *)(a1 + 80) = v5;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 48))(v12, a1);
      }
      if (result >= 2)
        goto LABEL_8;
      if (!(_DWORD)result)
        return result;
LABEL_29:
      v13 = (int *)sub_2341A5028((uint64_t)v5);
      v18 = 0;
      v14 = sub_234140958(v13, &v18);
      if ((_DWORD)v14)
        v15 = v18 <= v10;
      else
        v15 = 0;
      v16 = v15;
      if (!(_DWORD)v14)
      {
        *(_DWORD *)(a1 + 76) = 14;
        *(_QWORD *)(a1 + 80) = v5;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 48))(v14, a1);
        if (result >= 2)
          goto LABEL_8;
        if (!(_DWORD)result)
          return result;
      }
      if (v16)
      {
        *(_DWORD *)(a1 + 76) = 10;
        *(_QWORD *)(a1 + 80) = v5;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
        if (result >= 2)
          goto LABEL_8;
        if (!(_DWORD)result)
          return result;
      }
LABEL_41:
      *(_QWORD *)(a1 + 80) = v5;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 48))(1, a1);
      if (result >= 2)
        goto LABEL_8;
      if (!(_DWORD)result)
        return result;
      v17 = __OFSUB__((_DWORD)v3, 1);
      v3 = (v3 - 1);
      if (((v3 & 0x80000000) != 0) == v17)
      {
        v4 = v5;
        v5 = sub_2341953E8(*(unint64_t **)(a1 + 64), v3);
      }
    }
  }
  *(_DWORD *)(a1 + 76) = 21;
  *(_QWORD *)(a1 + 80) = v4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
  if (result >= 2)
LABEL_8:
    abort();
  return result;
}

uint64_t sub_2341A6924(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int64_t v5;
  int v6;
  unint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t result;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *v20;
  char **v21;
  unsigned int v22;
  _BOOL4 v23;
  void *v24;

  v2 = sub_2341709C4(*(_QWORD *)(a1 + 64));
  v3 = v2;
  if (v2 <= 0)
  {
    sub_2341953E8(*(unint64_t **)(a1 + 64), 0);
    return 1;
  }
  v4 = 0;
  v5 = (v2 - 1);
  do
  {
    v6 = v3;
    v3 = v5;
    v7 = sub_2341953E8(*(unint64_t **)(a1 + 64), v5);
    v8 = (uint64_t)v7;
    if (!v5 || (v7[6] & 0x20) == 0)
    {
      v9 = sub_2341709C4(*(_QWORD *)(a1 + 64));
      if (v6 < v9)
      {
        LODWORD(v10) = v9;
        do
        {
          v10 = (v10 - 1);
          v11 = (uint64_t *)sub_2341953E8(*(unint64_t **)(a1 + 64), v10)[12];
          if (v11)
          {
            v12 = sub_23419E754(v8, v11);
            if (v12)
            {
              if (v12 == 17)
              {
LABEL_26:
                result = 0;
                *(_DWORD *)(a1 + 76) = 17;
                return result;
              }
              *(_DWORD *)(a1 + 72) = v5;
              *(_DWORD *)(a1 + 76) = v12;
              *(_QWORD *)(a1 + 80) = v8;
              result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
              if (result >= 2)
                goto LABEL_31;
              if (!(_DWORD)result)
                return result;
            }
            v4 = 1;
          }
        }
        while ((int)v10 > v6);
      }
    }
  }
  while (v5-- > 0);
  v15 = sub_2341953E8(*(unint64_t **)(a1 + 64), 0);
  if (!v4)
    return 1;
  v16 = v15;
  if (v15[11])
    return 1;
  v17 = (uint64_t *)sub_2341A323C((uint64_t)v15);
  v18 = sub_2341A84C4(v17, 0xDu, -1);
  if (v18 == -1)
    return 1;
  v19 = v18;
  while (1)
  {
    v20 = sub_2341A8458((unint64_t **)v17, v19);
    v21 = (char **)sub_2340DE85C((uint64_t)v20);
    v24 = 0;
    v22 = sub_23413FBF0(&v24, v21);
    if ((v22 & 0x80000000) != 0)
      goto LABEL_26;
    v23 = sub_2341A1990(v24, v22);
    sub_23418E3C4(v24);
    if (v23)
      break;
    v19 = sub_2341A84C4(v17, 0xDu, v19);
    if (v19 == -1)
      return 1;
  }
  *(_QWORD *)(a1 + 72) = 0x43FFFFFFFFLL;
  *(_QWORD *)(a1 + 80) = v16;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
  if (result >= 2)
LABEL_31:
    abort();
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_2341A6B18(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t *v4;

  v4 = 0;
  v2 = sub_2341979A4(*(unint64_t **)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v4);
  if (!v2)
    return 1;
  *(_QWORD *)(a1 + 80) = v4;
  *(_DWORD *)(a1 + 76) = v2;
  if (v2 == 17)
    return 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
  if (result >= 2)
    abort();
  return result;
}

uint64_t sub_2341A6B9C(int *a1)
{
  time_t v2;
  int v3;
  unsigned int v4;
  time_t v6;

  v2 = time(0);
  v6 = 0;
  v3 = sub_234140958(a1, &v6);
  if (v6 > v2)
    v4 = 1;
  else
    v4 = -1;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_2341A6BF4(int *a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v6;

  v6 = 0;
  v3 = sub_234140958(a1, &v6);
  if (v6 > a2)
    v4 = 1;
  else
    v4 = -1;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_2341A6C3C(int *a1, time_t *a2)
{
  time_t v3;
  int v4;
  unsigned int v5;
  time_t v7;

  if (a2)
    v3 = *a2;
  else
    v3 = time(0);
  v7 = 0;
  v4 = sub_234140958(a1, &v7);
  if (v7 > v3)
    v5 = 1;
  else
    v5 = -1;
  if (v4)
    return v5;
  else
    return 0;
}

_QWORD *sub_2341A6CA0(_QWORD *a1, uint64_t a2)
{
  time_t v4;

  v4 = time(0);
  return sub_234140514(a1, v4, 0, a2);
}

_QWORD *sub_2341A6CD8(_QWORD *a1, uint64_t a2, time_t *a3)
{
  return sub_2341A6CE8(a1, 0, a2, a3);
}

_QWORD *sub_2341A6CE8(_QWORD *a1, int a2, uint64_t a3, time_t *a4)
{
  time_t v7;

  if (a4)
    v7 = *a4;
  else
    v7 = time(0);
  return sub_234140514(a1, v7, a2, a3);
}

uint64_t sub_2341A6D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23415F0A8((uint64_t)&unk_256158518, a1, a2, a5);
}

uint64_t sub_2341A6D50(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return sub_23415F178((unint64_t **)(a1 + 112), a2, a3);
}

unint64_t *sub_2341A6D58(uint64_t a1, unsigned int a2)
{
  return sub_23415F204((unint64_t **)(a1 + 112), a2);
}

uint64_t sub_2341A6D60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_2341A6D68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t sub_2341A6D70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_2341A6D78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

unint64_t *sub_2341A6D80(uint64_t a1)
{
  unint64_t *result;

  result = *(unint64_t **)(a1 + 64);
  if (result)
    return sub_2341A3514((uint64_t)result);
  return result;
}

uint64_t sub_2341A6D90(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_2341A6D98(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_2341A6DA0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_2341A6DA8(uint64_t a1, int a2)
{
  int *v4;
  int v5;
  uint64_t result;
  uint64_t v7;

  if (!a2)
    return 1;
  v4 = sub_2341A0088(a2);
  if (v4)
  {
    v5 = sub_2341414B8((uint64_t)v4);
    result = sub_2341A6E2C(a1, v5);
    if ((_DWORD)result)
    {
      v7 = *(_QWORD *)(a1 + 32);
      if (!*(_DWORD *)(v7 + 16))
        *(_DWORD *)(v7 + 16) = a2;
      return 1;
    }
  }
  else
  {
    sub_2341579B4(11, 0, 130, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_vfy.c", 1485);
    return 0;
  }
  return result;
}

uint64_t sub_2341A6E2C(uint64_t a1, int a2)
{
  uint64_t v4;

  if (!a2)
    return 1;
  if (sub_2341A5244(a2))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (!*(_DWORD *)(v4 + 20))
      *(_DWORD *)(v4 + 20) = a2;
    return 1;
  }
  else
  {
    sub_2341579B4(11, 0, 131, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_vfy.c", 1507);
    return 0;
  }
}

_QWORD *sub_2341A6E9C()
{
  return sub_23418E344(0x78uLL);
}

void sub_2341A6EA4(_QWORD *a1)
{
  if (a1)
  {
    sub_2341A6ED0((uint64_t)a1);
    sub_23418E3C4(a1);
  }
}

double sub_2341A6ED0(uint64_t a1)
{
  double result;

  sub_23415F25C((uint64_t)&unk_256158518, a1, (unint64_t **)(a1 + 112));
  sub_2341A76B0(*(_QWORD *)(a1 + 32));
  sub_234195434(*(unint64_t **)(a1 + 64), (void (*)(uint64_t))sub_2341A7680, (uint64_t)sub_2341ABB70);
  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double sub_2341A6F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  double result;
  uint64_t (*v12)();
  uint64_t v13;

  sub_2341A6ED0(a1);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  sub_23415F254((_QWORD *)(a1 + 112));
  if (a2)
  {
    v8 = sub_2341A768C();
    *(_QWORD *)(a1 + 32) = v8;
    if (v8)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 224);
      if (sub_2341A771C((uint64_t)v8, *(_QWORD *)(a2 + 216)))
      {
        v9 = *(_QWORD *)(a1 + 32);
        v10 = sub_2341A7DEC("default");
        if (sub_2341A771C(v9, (uint64_t)v10))
        {
          v12 = *(uint64_t (**)())(a2 + 224);
          if (!v12)
            v12 = nullsub_760;
          *(_QWORD *)(a1 + 48) = v12;
          return result;
        }
      }
    }
  }
  else
  {
    sub_2341579B4(11, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_vfy.c", 1540);
  }
  sub_23415F25C((uint64_t)&unk_256158518, a1, (unint64_t **)(a1 + 112));
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    sub_2341A76B0(v13);
  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_2341A7040(uint64_t a1, int a2)
{
  return sub_234175378(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_2341A7048(uint64_t a1, uint64_t a2)
{
  return sub_2341A7904(*(_QWORD *)(a1 + 32), a2);
}

_QWORD *sub_2341A7050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2341A79DC(*(_QWORD **)(a1 + 32), a3);
}

uint64_t sub_2341A705C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

void *sub_2341A7064(uint64_t a1, const char *a2)
{
  void *result;

  result = sub_2341A7DEC(a2);
  if (result)
    return (void *)sub_2341A771C(*(_QWORD *)(a1 + 32), (uint64_t)result);
  return result;
}

void sub_2341A70A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    sub_2341A76B0(v4);
  *(_QWORD *)(a1 + 32) = a2;
}

BOOL sub_2341A70D0(uint64_t a1, uint64_t *a2, unint64_t **a3, int *a4, unint64_t *a5)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  int *v41;
  int *v42;
  uint64_t *v44;
  unint64_t **v45;
  int *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v10 = *a4;
  v53 = *(_QWORD *)(a1 + 80);
  if (!sub_2341709C4((uint64_t)a5))
    return v10 > 447;
  v44 = a2;
  v45 = a3;
  v46 = a4;
  v47 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v53;
  do
  {
    v14 = sub_2341953E8(a5, v11);
    if ((v14[6] & 0x62) != 0)
      goto LABEL_65;
    v15 = (uint64_t)v14;
    v16 = sub_2341A3128(v13);
    v17 = sub_2341A5084(v15);
    if (sub_2341A2FF4(v16, v17))
      goto LABEL_65;
    if ((*(_DWORD *)(v15 + 28) & 0x200) != 0)
      v18 = 32;
    else
      v18 = 288;
    if (sub_2341A7538(a1, v15, 0))
      v19 = v18 | 0x40;
    else
      v19 = v18;
    v20 = sub_2341A5084(v15);
    v21 = *(int *)(a1 + 72);
    if (sub_2341709C4(*(_QWORD *)(a1 + 64)) - 1 != v21)
      ++v21;
    v22 = sub_2341953E8(*(unint64_t **)(a1 + 64), v21);
    if (sub_2341A0188((uint64_t)v22, *(uint64_t **)(v15 + 32)))
    {
      LODWORD(v21) = v21 + 1;
      if ((int)v21 >= (int)sub_2341709C4(*(_QWORD *)(a1 + 64)))
        goto LABEL_64;
      v21 = (int)v21;
      while (1)
      {
        v22 = sub_2341953E8(*(unint64_t **)(a1 + 64), v21);
        v23 = sub_2341A323C((uint64_t)v22);
        if (!sub_2341A2FF4(v23, v20)
          && !sub_2341A0188((uint64_t)v22, *(uint64_t **)(v15 + 32)))
        {
          break;
        }
        if ((uint64_t)++v21 >= (int)sub_2341709C4(*(_QWORD *)(a1 + 64)))
        {
LABEL_64:
          v13 = v53;
          goto LABEL_65;
        }
      }
      v51 = v10;
      v24 = 12;
    }
    else
    {
      v51 = v10;
      v24 = 28;
    }
    v50 = v12;
    v52 = v24 | v19;
    v25 = *(_DWORD *)(v15 + 48);
    if ((v25 & 0x10) != 0)
      goto LABEL_62;
    v26 = v53;
    if ((*(_BYTE *)(v53 + 48) & 0x10) != 0)
    {
      if ((v25 & 4) != 0)
        goto LABEL_62;
    }
    else if ((v25 & 8) != 0)
    {
      goto LABEL_62;
    }
    if (!sub_2341709C4(*(_QWORD *)(v53 + 80)))
    {
LABEL_59:
      v40 = *(_QWORD **)(v15 + 40);
      if (!v40 || !*v40)
        goto LABEL_61;
      goto LABEL_62;
    }
    v27 = 0;
    while (1)
    {
      v28 = sub_2341953E8(*(unint64_t **)(v26 + 80), v27);
      if (!v28[1] || !v28[2])
        goto LABEL_58;
      v29 = *(unint64_t **)(v15 + 40);
      if (!v29)
        goto LABEL_61;
      v30 = *v28;
      v31 = *v29;
      if (!*v28 || v31 == 0)
        goto LABEL_61;
      if (*(_DWORD *)v30 != 1)
        break;
      v48 = *(_QWORD *)(v30 + 16);
      if (!v48)
        goto LABEL_58;
      if (*(_DWORD *)v31 == 1)
      {
        v33 = *(_QWORD *)(v31 + 16);
        if (v33 && !sub_2341A2FF4(v48, v33))
          goto LABEL_61;
        goto LABEL_58;
      }
      v30 = *v29;
LABEL_53:
      v37 = *(unint64_t **)(v30 + 8);
      if (sub_2341709C4((uint64_t)v37))
      {
        v38 = 0;
        do
        {
          v39 = sub_2341953E8(v37, v38);
          if (*(_DWORD *)v39 == 4 && !sub_2341A2FF4(v48, v39[1]))
            goto LABEL_61;
        }
        while (++v38 < sub_2341709C4((uint64_t)v37));
      }
LABEL_58:
      ++v27;
      v26 = v53;
      if (v27 >= sub_2341709C4(*(_QWORD *)(v53 + 80)))
        goto LABEL_59;
    }
    if (*(_DWORD *)v31 == 1)
    {
      v48 = *(_QWORD *)(v31 + 16);
      if (!v48)
        goto LABEL_58;
      goto LABEL_53;
    }
    if (!sub_2341709C4(*(_QWORD *)(v30 + 8)))
      goto LABEL_58;
    v49 = 0;
    while (1)
    {
      v34 = sub_2341953E8(*(unint64_t **)(v30 + 8), v49);
      if (sub_2341709C4(*(_QWORD *)(v31 + 8)))
        break;
LABEL_50:
      if (++v49 >= sub_2341709C4(*(_QWORD *)(v30 + 8)))
        goto LABEL_58;
    }
    v35 = 0;
    while (1)
    {
      v36 = sub_2341953E8(*(unint64_t **)(v31 + 8), v35);
      if (!sub_23419D8AC((uint64_t)v34, (uint64_t)v36))
        break;
      if (++v35 >= sub_2341709C4(*(_QWORD *)(v31 + 8)))
        goto LABEL_50;
    }
LABEL_61:
    v52 |= 0x80u;
LABEL_62:
    v10 = v51;
    if (v52 < v51)
    {
      v12 = v50;
      goto LABEL_64;
    }
    v12 = v50;
    if (v52 == v51 && v50)
    {
      v54 = 0;
      v41 = (int *)sub_2341A3128(v50);
      v42 = (int *)sub_2341A3128(v15);
      v13 = v53;
      if (sub_234140804((_DWORD *)&v54 + 1, &v54, v41, v42) && (SHIDWORD(v54) > 0 || (int)v54 >= 1))
      {
        v10 = v52;
        v12 = v15;
        v47 = v22;
      }
    }
    else
    {
      v10 = v52;
      v12 = v15;
      v47 = v22;
      v13 = v53;
    }
LABEL_65:
    ++v11;
  }
  while (v11 < sub_2341709C4((uint64_t)a5));
  if (v12)
  {
    if (*v44)
      sub_2341AA558(*v44);
    *v44 = v12;
    *v45 = v47;
    *v46 = v10;
    sub_234193794(v12);
  }
  return v10 > 447;
}

uint64_t sub_2341A7538(uint64_t a1, uint64_t a2, int a3)
{
  time_t *v3;
  time_t v4;
  time_t v8;
  int *v9;
  int v10;
  uint64_t result;
  int *v12;
  int v13;
  time_t v14;

  v3 = *(time_t **)(a1 + 32);
  v4 = v3[1];
  if ((v4 & 0x200000) != 0)
    return 1;
  if (a3)
  {
    *(_QWORD *)(a1 + 88) = a2;
    v4 = v3[1];
  }
  if ((v4 & 2) != 0)
    v8 = *v3;
  else
    v8 = time(0);
  v9 = (int *)sub_2341A3128(a2);
  v14 = 0;
  if (sub_234140958(v9, &v14))
  {
    if (v14 <= v8)
      goto LABEL_15;
    if (!a3)
      return 0;
    v10 = 11;
  }
  else
  {
    if (!a3)
      return 0;
    v10 = 15;
  }
  *(_DWORD *)(a1 + 76) = v10;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
  if (result >= 2)
    goto LABEL_30;
  if (!(_DWORD)result)
    return result;
LABEL_15:
  if (!sub_2341A47A8(a2))
    goto LABEL_18;
  v12 = (int *)sub_2341A47A8(a2);
  v14 = 0;
  if (!sub_234140958(v12, &v14))
  {
    if (a3)
    {
      v13 = 16;
      goto LABEL_24;
    }
    return 0;
  }
  if (v14 > v8)
  {
LABEL_18:
    if (!a3)
      return 1;
    goto LABEL_26;
  }
  if (!a3)
    return 0;
  v13 = 12;
LABEL_24:
  *(_DWORD *)(a1 + 76) = v13;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(0, a1);
  if (result >= 2)
LABEL_30:
    abort();
  if (!(_DWORD)result)
    return result;
LABEL_26:
  *(_QWORD *)(a1 + 88) = 0;
  return 1;
}

uint64_t sub_2341A7674(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A7680(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

_QWORD *sub_2341A768C()
{
  _QWORD *result;

  result = sub_23418E344(0x60uLL);
  if (result)
    *((_DWORD *)result + 6) = -1;
  return result;
}

void sub_2341A76B0(uint64_t a1)
{
  if (a1)
  {
    sub_234195434(*(unint64_t **)(a1 + 32), (void (*)(uint64_t))sub_2341A7E98, (uint64_t)sub_23413F6D0);
    sub_234195434(*(unint64_t **)(a1 + 40), (void (*)(uint64_t))sub_2341A7EA4, (uint64_t)sub_2341A7718);
    sub_23418E3C4(*(_QWORD **)(a1 + 56));
    sub_23418E3C4(*(_QWORD **)(a1 + 72));
    sub_23418E3C4((_QWORD *)a1);
  }
}

uint64_t sub_2341A771C(uint64_t a1, uint64_t a2)
{
  return sub_2341A7724(a1, a2, 0);
}

uint64_t sub_2341A7724(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t result;
  unint64_t *v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  void *v25;
  BOOL v26;
  _BOOL4 v27;
  const void *v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  char v32;

  if (!a2)
    return 1;
  v6 = *(_DWORD *)(a2 + 16);
  if (a3)
    v7 = 1;
  else
    v7 = *(_DWORD *)(a1 + 16) == 0;
  v8 = v7;
  if (v6)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
    *(_DWORD *)(a1 + 16) = v6;
  v10 = *(_DWORD *)(a2 + 20);
  if (a3)
    v11 = 1;
  else
    v11 = *(_DWORD *)(a1 + 20) == 0;
  v12 = v11;
  if (v10 && v12)
    *(_DWORD *)(a1 + 20) = v10;
  v13 = *(_DWORD *)(a2 + 24);
  if (a3)
    v14 = 1;
  else
    v14 = *(_DWORD *)(a1 + 24) == -1;
  v15 = v14;
  if (v13 != -1 && v15)
    *(_DWORD *)(a1 + 24) = v13;
  v16 = *(_QWORD *)(a1 + 8);
  if ((v16 & 2) == 0)
    *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8) | v16;
  v17 = *(_QWORD *)(a2 + 32);
  if (a3)
    v18 = 1;
  else
    v18 = *(_QWORD *)(a1 + 32) == 0;
  v19 = v18;
  if (!v17 || !v19 || (result = sub_2341A7A30(a1, v17), (_DWORD)result))
  {
    v21 = *(unint64_t **)(a1 + 40);
    if (a3)
      v22 = 1;
    else
      v22 = v21 == 0;
    v23 = v22;
    if (*(_QWORD *)(a2 + 40))
    {
      if (v23)
      {
        sub_234195434(v21, (void (*)(uint64_t))sub_2341A7EA4, (uint64_t)sub_2341A7718);
        *(_QWORD *)(a1 + 40) = 0;
        v24 = *(_QWORD *)(a2 + 40);
        if (v24)
        {
          result = (uint64_t)sub_234195B2C(v24, (uint64_t (*)(uint64_t))sub_2341A7EB0, (uint64_t)sub_23418E55C, (void (*)(uint64_t))sub_2341A7EA4, (uint64_t)sub_2341A7718);
          *(_QWORD *)(a1 + 40) = result;
          if (!result)
            return result;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
        }
      }
    }
    v25 = *(void **)(a2 + 56);
    v26 = a3 || *(_QWORD *)(a1 + 56) == 0;
    v27 = v26;
    if (!v25 || !v27 || (result = sub_2341A7C28(a1, v25, *(_QWORD *)(a2 + 64)), (_DWORD)result))
    {
      v28 = *(const void **)(a2 + 72);
      if (a3)
        v29 = 1;
      else
        v29 = *(_QWORD *)(a1 + 72) == 0;
      v30 = v29;
      if (!v28 || !v30)
        goto LABEL_73;
      v31 = *(_QWORD *)(a2 + 80);
      if (v31 == 16 || v31 == 4)
      {
        result = sub_2341A7C98((_QWORD **)(a1 + 72), (unint64_t *)(a1 + 80), v28, v31);
        if ((_DWORD)result)
        {
LABEL_73:
          v32 = *(_BYTE *)(a2 + 88);
          result = 1;
LABEL_77:
          *(_BYTE *)(a1 + 88) = v32;
          return result;
        }
      }
      else
      {
        result = 0;
      }
      v32 = 1;
      goto LABEL_77;
    }
  }
  return result;
}

uint64_t sub_2341A78FC(uint64_t a1, uint64_t a2)
{
  return sub_2341A7724(a1, a2, 1);
}

uint64_t sub_2341A7904(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) |= a2;
  return 1;
}

uint64_t sub_2341A7918(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) &= ~a2;
  return 1;
}

uint64_t sub_2341A792C(uint64_t a1, int a2)
{
  if (sub_2341A0088(a2))
  {
    *(_DWORD *)(a1 + 16) = a2;
    return 1;
  }
  else
  {
    sub_2341579B4(20, 0, 133, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_vpm.c", 273);
    return 0;
  }
}

uint64_t sub_2341A7984(uint64_t a1, int a2)
{
  if (sub_2341A5244(a2))
  {
    *(_DWORD *)(a1 + 20) = a2;
    return 1;
  }
  else
  {
    sub_2341579B4(11, 0, 131, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509_vpm.c", 282);
    return 0;
  }
}

_QWORD *sub_2341A79DC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[1] | 2;
  *result = a2;
  result[1] = v2;
  return result;
}

unint64_t *sub_2341A79EC(uint64_t a1, uint64_t a2)
{
  unint64_t *result;

  result = *(unint64_t **)(a1 + 32);
  if (result)
    return (unint64_t *)(sub_2341958E8(result, a2) != 0);
  result = sub_2341953A0();
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return (unint64_t *)(sub_2341958E8(result, a2) != 0);
  return result;
}

uint64_t sub_2341A7A30(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;

  if (result)
  {
    v3 = result;
    sub_234195434(*(unint64_t **)(result + 32), (void (*)(uint64_t))sub_2341A7E98, (uint64_t)sub_23413F6D0);
    if (a2)
    {
      v4 = sub_234195B2C(a2, (uint64_t (*)(uint64_t))sub_2341A7EBC, (uint64_t)sub_23418EA9C, (void (*)(uint64_t))sub_2341A7E98, (uint64_t)sub_23413F6D0);
      *(_QWORD *)(v3 + 32) = v4;
      return v4 != 0;
    }
    else
    {
      *(_QWORD *)(v3 + 32) = 0;
      return 1;
    }
  }
  return result;
}

uint64_t sub_2341A7AB0(uint64_t a1, _BYTE *__s, size_t __n)
{
  int v4;
  uint64_t result;

  v4 = sub_2341A7AF0(a1, 0, __s, __n);
  result = 1;
  if (!v4)
  {
    *(_BYTE *)(a1 + 88) = 1;
    return 0;
  }
  return result;
}

uint64_t sub_2341A7AF0(uint64_t a1, int a2, _BYTE *__s, size_t __n)
{
  uint64_t result;
  void *v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;

  result = 0;
  if (__s)
  {
    if (__n)
    {
      v9 = memchr(__s, 0, __n);
      result = 0;
      if (!v9)
      {
        if (!a2)
        {
          v10 = *(unint64_t **)(a1 + 40);
          if (v10)
          {
            sub_234195434(v10, (void (*)(uint64_t))sub_2341A7EA4, (uint64_t)sub_2341A7718);
            *(_QWORD *)(a1 + 40) = 0;
          }
        }
        result = (uint64_t)sub_23418E928(__s, __n);
        if (result)
        {
          v11 = (_QWORD *)result;
          v12 = *(unint64_t **)(a1 + 40);
          if (v12 || (v12 = sub_2341953A0(), (*(_QWORD *)(a1 + 40) = v12) != 0))
          {
            if (sub_2341958E8(v12, (uint64_t)v11))
              return 1;
            sub_23418E3C4(v11);
            if (!sub_2341709C4(*(_QWORD *)(a1 + 40)))
            {
              sub_234141344(*(_QWORD *)(a1 + 40));
              result = 0;
              *(_QWORD *)(a1 + 40) = 0;
              return result;
            }
          }
          else
          {
            sub_23418E3C4(v11);
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2341A7BE0(uint64_t a1, _BYTE *__s, size_t __n)
{
  uint64_t v4;

  v4 = 1;
  if (!sub_2341A7AF0(a1, 1, __s, __n))
  {
    *(_BYTE *)(a1 + 88) = 1;
    return 0;
  }
  return v4;
}

uint64_t sub_2341A7C20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t sub_2341A7C28(uint64_t a1, void *__s, size_t __n)
{
  uint64_t result;

  if ((!__n || !memchr(__s, 0, __n))
    && sub_2341A7C98((_QWORD **)(a1 + 56), (unint64_t *)(a1 + 64), __s, __n))
  {
    return 1;
  }
  result = 0;
  *(_BYTE *)(a1 + 88) = 1;
  return result;
}

uint64_t sub_2341A7C98(_QWORD **a1, unint64_t *a2, const void *a3, unint64_t a4)
{
  uint64_t result;
  _QWORD *v8;

  result = 0;
  if (a3)
  {
    if (a4)
    {
      result = (uint64_t)sub_23418E58C(a3, a4);
      if (result)
      {
        v8 = (_QWORD *)result;
        if (*a1)
          sub_23418E3C4(*a1);
        *a1 = v8;
        if (a2)
          *a2 = a4;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_2341A7D00(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t result;

  if ((a3 == 16 || a3 == 4) && sub_2341A7C98((_QWORD **)(a1 + 72), (unint64_t *)(a1 + 80), a2, a3))
    return 1;
  result = 0;
  *(_BYTE *)(a1 + 88) = 1;
  return result;
}

uint64_t sub_2341A7D58(uint64_t a1, char *a2)
{
  uint64_t result;
  BOOL v4;
  _BYTE v5[16];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  result = sub_2341A1E0C(v5, a2);
  if ((_DWORD)result)
  {
    v4 = (int)result == 16 || (int)result == 4;
    if (v4 && sub_2341A7C98((_QWORD **)(a1 + 72), (unint64_t *)(a1 + 80), v5, (int)result))
    {
      return 1;
    }
    else
    {
      result = 0;
      *(_BYTE *)(a1 + 88) = 1;
    }
  }
  return result;
}

void *sub_2341A7DEC(const char *a1)
{
  if (!strcmp(a1, "default"))
    return &unk_2342E8A70;
  if (!strcmp(a1, "pkcs7") || !strcmp(a1, "smime_sign"))
    return &unk_2342E8AD0;
  if (!strcmp(a1, "ssl_client"))
    return &unk_2342E8B30;
  if (!strcmp(a1, "ssl_server"))
    return &unk_2342E8B90;
  return 0;
}

uint64_t sub_2341A7E98(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A7EA4(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A7EB0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A7EBC(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341A7EC8(uint64_t result, unint64_t a2)
{
  uint64_t **v2;

  if (result)
  {
    if (a2 < 2)
    {
      v2 = (uint64_t **)result;
      result = **(_QWORD **)result;
      if (a2)
      {
        if (result)
          return sub_23413E838(result, 1uLL);
        **v2 = (uint64_t)sub_23414464C();
        result = **v2;
        if (result)
          return sub_23413E838(result, 1uLL);
      }
      else
      {
        sub_234144630(result);
        **v2 = 0;
        return 1;
      }
    }
    else
    {
      sub_2341579B4(11, 0, 140, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509cset.c", 72);
      return 0;
    }
  }
  return result;
}

uint64_t sub_2341A7F5C(uint64_t a1, int *a2)
{
  if (a1 && *(_QWORD *)a1)
    return sub_2341AAC9C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
  else
    return 0;
}

BOOL sub_2341A7F78(_BOOL8 result, int *a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (result)
  {
    v2 = a2;
    v3 = result;
    if (*(int **)(*(_QWORD *)result + 24) != a2)
    {
      v2 = sub_234141298(a2);
      if (v2)
      {
        sub_2341404FC(*(_QWORD *)(*(_QWORD *)v3 + 24));
        *(_QWORD *)(*(_QWORD *)v3 + 24) = v2;
      }
    }
    return v2 != 0;
  }
  return result;
}

BOOL sub_2341A7FD8(_BOOL8 result, int *a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (result)
  {
    v2 = a2;
    v3 = result;
    if (*(int **)(*(_QWORD *)result + 32) != a2)
    {
      v2 = sub_234141298(a2);
      if (v2)
      {
        sub_2341404FC(*(_QWORD *)(*(_QWORD *)v3 + 32));
        *(_QWORD *)(*(_QWORD *)v3 + 32) = v2;
      }
    }
    return v2 != 0;
  }
  return result;
}

uint64_t sub_2341A8038(uint64_t a1)
{
  sub_23419598C(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2341A826C);
  sub_2341449E0(*(_QWORD *)a1 + 56);
  return 1;
}

uint64_t sub_2341A8078(uint64_t **a1)
{
  return sub_23413EAA0(**a1);
}

BOOL sub_2341A8084(_BOOL8 result, int *a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (result)
  {
    v2 = a2;
    v3 = result;
    if (*(int **)(result + 8) != a2)
    {
      v2 = sub_234141298(a2);
      if (v2)
      {
        sub_2341404FC(*(_QWORD *)(v3 + 8));
        *(_QWORD *)(v3 + 8) = v2;
      }
    }
    return v2 != 0;
  }
  return result;
}

BOOL sub_2341A80D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(a2 + 4) | 0x100) != 0x102)
  {
    sub_2341579B4(12, 0, 191, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509cset.c", 221);
    return 0;
  }
  if (!a1)
    return 0;
  v3 = a2;
  if (*a1 != a2)
  {
    v3 = sub_23413E408(a2);
    if (v3)
    {
      sub_234144630(*a1);
      *a1 = v3;
    }
  }
  return v3 != 0;
}

uint64_t sub_2341A8160(int **a1, void **a2)
{
  sub_2341449E0((uint64_t)(*a1 + 14));
  return sub_2341AA510(*a1, a2);
}

uint64_t sub_2341A8194(int **a1, void **a2)
{
  return sub_2341AA510(*a1, a2);
}

uint64_t sub_2341A819C(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_2341A8C5C(a2);
  v5 = sub_2341A8C5C(a2);
  v6 = v5;
  if (v4 && v5)
  {
    sub_2341A8C50(a1[1]);
    a1[1] = v4;
    sub_2341A8C50(*(_QWORD *)(*a1 + 8));
    *(_QWORD *)(*a1 + 8) = v6;
    return 1;
  }
  else
  {
    sub_2341A8C50(v4);
    sub_2341A8C50(v6);
    return 0;
  }
}

uint64_t sub_2341A8220(uint64_t a1, char *a2, size_t a3)
{
  uint64_t result;

  result = sub_2341411A4(*(_QWORD *)(a1 + 16), a2, a3);
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) &= 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) |= 8uLL;
    return 1;
  }
  return result;
}

uint64_t sub_2341A826C(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t sub_2341A8298(uint64_t *a1, unsigned int a2, void *a3, int a4)
{
  char **v7;

  v7 = sub_23418F064(a2);
  if (v7)
    return sub_2341A82F4(a1, (uint64_t)v7, a3, a4);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_2341A82F4(uint64_t *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _QWORD v15[2];
  void *v16;

  v7 = 0xFFFFFFFFLL;
  v8 = sub_2341A83C4(a1, a2, -1);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = sub_2341A8458((unint64_t **)a1, v8);
    if (v9)
      v10 = (char **)v9[1];
    else
      v10 = 0;
    v16 = 0;
    v11 = sub_23413FBF0(&v16, v10);
    if ((v11 & 0x80000000) != 0)
      goto LABEL_13;
    v12 = v11;
    v13 = v11;
    v15[0] = v16;
    v15[1] = v11;
    if (sub_234148CC0((uint64_t)v15))
      goto LABEL_13;
    if (a3)
    {
      if (a4 < 1 || (int)v12 >= a4 || !sub_234148F90((uint64_t)v15, a3, v13))
        goto LABEL_13;
      *((_BYTE *)a3 + v13) = 0;
    }
    v7 = v12;
LABEL_13:
    sub_23418E3C4(v16);
  }
  return v7;
}

uint64_t sub_2341A83C4(uint64_t *a1, uint64_t a2, int a3)
{
  unint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  if (!a1)
    return 0xFFFFFFFFLL;
  v5 = (unint64_t *)*a1;
  v6 = sub_2341709C4(*a1);
  if (a3 < 0)
    v7 = -1;
  else
    v7 = a3;
  v8 = v7;
  v9 = v6;
  v10 = 1;
  while (v8 + v10 < v9)
  {
    v11 = (uint64_t *)sub_2341953E8(v5, v8 + v10++);
    if (!sub_23418EB9C(*v11, a2))
      return (v8 + v10 - 1);
  }
  return 0xFFFFFFFFLL;
}

unint64_t *sub_2341A8458(unint64_t **a1, unsigned int a2)
{
  if (!a1 || (a2 & 0x80000000) != 0 || sub_2341709C4((uint64_t)*a1) <= (unint64_t)a2)
    return 0;
  else
    return sub_2341953E8(*a1, a2);
}

uint64_t *sub_2341A84A8(uint64_t *result)
{
  if (result)
    return (uint64_t *)sub_2341709C4(*result);
  return result;
}

uint64_t sub_2341A84C4(uint64_t *a1, unsigned int a2, int a3)
{
  char **v5;

  v5 = sub_23418F064(a2);
  if (v5)
    return sub_2341A83C4(a1, (uint64_t)v5, a3);
  else
    return 4294967294;
}

uint64_t sub_2341A850C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v12;

  v2 = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (sub_2341709C4(*(_QWORD *)a1) <= (unint64_t)a2)
    {
      return 0;
    }
    else
    {
      v5 = a2;
      v6 = *(uint64_t **)a1;
      v2 = sub_23419560C(*(uint64_t **)a1, a2);
      v7 = sub_2341709C4((uint64_t)v6);
      *(_DWORD *)(a1 + 8) = 1;
      if (v7 != a2)
      {
        v8 = v7;
        if (a2)
          v9 = *((_DWORD *)sub_2341953E8((unint64_t *)v6, a2 - 1) + 4) + 1;
        else
          v9 = *(_DWORD *)(v2 + 16);
        if (v9 < *((_DWORD *)sub_2341953E8((unint64_t *)v6, v5) + 4) && v8 > v5)
        {
          do
          {
            v12 = sub_2341953E8((unint64_t *)v6, v5);
            --*((_DWORD *)v12 + 4);
            ++v5;
          }
          while (v8 != v5);
        }
      }
    }
  }
  return v2;
}

int *sub_2341A85F8(uint64_t a1, uint64_t a2, int a3, char *a4, size_t a5, int a6, int a7)
{
  int *result;
  uint64_t v11;
  uint64_t v12;

  result = (int *)sub_2341A8658(0, a2, a3, a4, a5);
  if (result)
  {
    v11 = (uint64_t)result;
    v12 = sub_2341A8708(a1, result, a6, a7);
    sub_2341AAC40(v11);
    return (int *)v12;
  }
  return result;
}

const char ***sub_2341A8658(const char ****a1, uint64_t a2, int a3, char *a4, size_t a5)
{
  const char ***v10;

  if (a1 && (v10 = *a1) != 0 || (v10 = (const char ***)sub_2341AAC34()) != 0)
  {
    if (sub_2341A8A54(v10, a2) && sub_2341A8ABC((uint64_t)v10, a3, a4, a5))
    {
      if (a1 && !*a1)
        *a1 = v10;
    }
    else
    {
      if (!a1 || v10 != *a1)
        sub_2341AAC40((uint64_t)v10);
      return 0;
    }
  }
  return v10;
}

uint64_t sub_2341A8708(uint64_t result, int *a2, int a3, int a4)
{
  uint64_t v7;
  unint64_t *v8;
  int v9;
  _BOOL4 v11;
  unint64_t *v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;

  if (!result)
    return result;
  v7 = result;
  v8 = *(unint64_t **)result;
  v9 = sub_2341709C4(*(_QWORD *)result);
  if (v9 < a3 || a3 < 0)
    a3 = v9;
  v11 = a4 == 0;
  *(_DWORD *)(v7 + 8) = 1;
  if (a4 == -1)
  {
    if (a3)
    {
      v12 = sub_2341953E8(v8, a3 - 1);
      v11 = 0;
      goto LABEL_12;
    }
    v13 = 0;
    v11 = 1;
  }
  else
  {
    if (a3 < v9)
    {
      v12 = sub_2341953E8(v8, a3);
LABEL_12:
      v13 = *((_DWORD *)v12 + 4);
      goto LABEL_17;
    }
    if (a3)
      v13 = *((_DWORD *)sub_2341953E8(v8, a3 - 1) + 4) + 1;
    else
      v13 = 0;
  }
LABEL_17:
  result = sub_2341AAC4C(a2);
  if (result)
  {
    v14 = result;
    *(_DWORD *)(result + 16) = v13;
    if (sub_23419550C(v8, result, a3))
    {
      if (v11)
      {
        v15 = sub_2341709C4((uint64_t)v8);
        if (a3 + 1 < v15)
        {
          v16 = a3 + 1;
          v17 = ~a3 + v15;
          do
          {
            v18 = sub_2341953E8(v8, v16);
            ++*((_DWORD *)v18 + 4);
            ++v16;
            --v17;
          }
          while (v17);
        }
      }
      return 1;
    }
    else
    {
      sub_2341AAC40(v14);
      return 0;
    }
  }
  return result;
}

int *sub_2341A8860(uint64_t a1, unsigned int a2, int a3, char *a4, size_t a5, int a6, int a7)
{
  int *result;
  uint64_t v11;
  uint64_t v12;

  result = (int *)sub_2341A88C0(0, a2, a3, a4, a5);
  if (result)
  {
    v11 = (uint64_t)result;
    v12 = sub_2341A8708(a1, result, a6, a7);
    sub_2341AAC40(v11);
    return (int *)v12;
  }
  return result;
}

const char ***sub_2341A88C0(const char ****a1, unsigned int a2, int a3, char *a4, size_t a5)
{
  char **v9;

  v9 = sub_23418F064(a2);
  if (v9)
    return sub_2341A8658(a1, (uint64_t)v9, a3, a4, a5);
  sub_2341579B4(11, 0, 129, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509name.c", 324);
  return 0;
}

int *sub_2341A893C(uint64_t a1, const char *a2, int a3, char *a4, size_t a5, int a6, int a7)
{
  int *result;
  uint64_t v11;
  uint64_t v12;

  result = (int *)sub_2341A899C(0, a2, a3, a4, a5);
  if (result)
  {
    v11 = (uint64_t)result;
    v12 = sub_2341A8708(a1, result, a6, a7);
    sub_2341AAC40(v11);
    return (int *)v12;
  }
  return result;
}

const char ***sub_2341A899C(const char ****a1, const char *a2, int a3, char *a4, size_t a5)
{
  char **v9;
  char **v10;
  const char ***v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = sub_23418EF98(a2, 0);
  if (v9)
  {
    v10 = v9;
    v11 = sub_2341A8658(a1, (uint64_t)v9, a3, a4, a5);
    sub_23413F6D0((_QWORD **)v10);
    return v11;
  }
  else
  {
    sub_2341579B4(11, 0, 111, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509name.c", 309);
    sub_234157A5C(2u, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"name=");
    return 0;
  }
}

BOOL sub_2341A8A54(const char ***a1, uint64_t a2)
{
  const char **v4;

  if (a1 && a2)
  {
    sub_23413F6D0((_QWORD **)*a1);
    v4 = sub_23418EA9C(a2);
    *a1 = v4;
    return v4 != 0;
  }
  else
  {
    sub_2341579B4(11, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509name.c", 364);
    return 0;
  }
}

uint64_t sub_2341A8ABC(uint64_t result, int a2, char *__s, size_t __n)
{
  size_t v4;
  uint64_t v7;
  int v8;

  if (result)
  {
    v4 = __n;
    v7 = result;
    if (__s || !__n)
    {
      if (a2 >= 1 && (a2 & 0x1000) != 0)
      {
        v8 = sub_23418EBF8(*(unsigned __int16 **)result);
        return sub_2341401C0((uint64_t *)(v7 + 8), __s, v4, a2, v8) != 0;
      }
      else
      {
        if ((__n & 0x8000000000000000) != 0)
          v4 = strlen(__s);
        result = sub_2341411A4(*(_QWORD *)(v7 + 8), __s, v4);
        if ((_DWORD)result)
        {
          if (a2 != -1)
            *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4) = a2;
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2341A8B70(uint64_t a1, uint64_t a2)
{
  if (!a1)
    return 0;
  if (a2)
  {
    sub_2341579B4(11, 0, 140, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x509rset.c", 70);
    return 0;
  }
  return sub_23413E838(*(_QWORD *)(*(_QWORD *)a1 + 24), 0);
}

uint64_t sub_2341A8BB8(uint64_t a1, int *a2)
{
  if (a1 && *(_QWORD *)a1)
    return sub_2341AAC9C((uint64_t *)(*(_QWORD *)a1 + 32), a2);
  else
    return 0;
}

uint64_t sub_2341A8BD4(_QWORD *a1, uint64_t a2)
{
  if (a1 && *a1)
    return sub_2341AB5A4(*a1 + 40, a2);
  else
    return 0;
}

uint64_t sub_2341A8BF0(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v4;

  result = sub_2341A8C5C(a2);
  if (result)
  {
    v4 = result;
    sub_2341A8C50(*(_QWORD *)(a1 + 8));
    *(_QWORD *)(a1 + 8) = v4;
    return 1;
  }
  return result;
}

uint64_t sub_2341A8C2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250512CD8);
}

uint64_t sub_2341A8C38(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250512CD8);
}

uint64_t sub_2341A8C44()
{
  return sub_234144240((uint64_t)&unk_250512CD8);
}

void sub_2341A8C50(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250512CD8);
}

uint64_t sub_2341A8C5C(int *a1)
{
  return sub_23413E05C((uint64_t)&unk_250512CD8, a1);
}

uint64_t sub_2341A8C6C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;

  if (result)
  {
    v6 = result;
    if (a3 == -1)
    {
      sub_23413F6D0(*(_QWORD ***)result);
      *(_QWORD *)v6 = a2;
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
      {
        sub_234144828(v8);
        *(_QWORD *)(v6 + 8) = 0;
      }
      return 1;
    }
    if (*(_QWORD *)(result + 8) || (result = sub_23414481C(), (*(_QWORD *)(v6 + 8) = result) != 0))
    {
      sub_23413F6D0(*(_QWORD ***)v6);
      *(_QWORD *)v6 = a2;
      if (a3)
        sub_234140A38(*(int **)(v6 + 8), a3, a4);
      return 1;
    }
  }
  return result;
}

int *sub_2341A8D00(int *result, int *a2, int **a3, _QWORD *a4)
{
  int v6;

  if (result)
    *(_QWORD *)result = *a4;
  if (a2)
  {
    result = (int *)a4[1];
    if (result)
    {
      v6 = *result;
      result = (int *)sub_2341409D4(result);
    }
    else
    {
      v6 = -1;
    }
    *a2 = v6;
    if (a3)
      *a3 = result;
  }
  return result;
}

uint64_t sub_2341A8D5C(uint64_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  char **v6;

  if ((sub_23416E348((uint64_t)a2) & 2) != 0)
    v4 = -1;
  else
    v4 = 5;
  v5 = sub_2341414B0(a2);
  v6 = sub_23418F064(v5);
  return sub_2341A8C6C(a1, (uint64_t)v6, v4, 0);
}

uint64_t sub_2341A8DB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = sub_23418EB9C(*a1, *a2);
  if (!(_DWORD)result)
  {
    v5 = a1[1];
    v6 = a2[1];
    if (v5 | v6)
      return sub_234140B78((int *)v5, v6);
    else
      return 0;
  }
  return result;
}

uint64_t sub_2341A8E04(uint64_t a1, uint64_t a2)
{
  if (!sub_2341A8DB4(*(uint64_t **)(a1 + 8), *(uint64_t **)(*(_QWORD *)a1 + 16)))
    return sub_234196260((uint64_t)&unk_250513738, *(_QWORD *)(a1 + 8), *(unsigned int **)(a1 + 16), *(int **)a1, a2);
  sub_2341579B4(11, 0, 137, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_all.c", 75);
  return 0;
}

uint64_t sub_2341A8E78(uint64_t a1, uint64_t a2)
{
  return sub_234196260((uint64_t)&unk_250513358, *(_QWORD *)(a1 + 8), *(unsigned int **)(a1 + 16), *(int **)a1, a2);
}

uint64_t sub_2341A8E94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_2341449E0(*a1 + 80);
  return sub_23419600C((uint64_t)&unk_250513738, *(_QWORD *)(*a1 + 16), a1[1], a1[2], (int *)*a1, a2, a3);
}

uint64_t sub_2341A8EE8(uint64_t *a1, uint64_t *a2)
{
  sub_2341449E0(*a1 + 80);
  return sub_2341960E4((uint64_t)&unk_250513738, *(_QWORD *)(*a1 + 16), a1[1], a1[2], (int *)*a1, a2);
}

uint64_t sub_2341A8F2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_2341449E0(*a1);
  return sub_23419600C((uint64_t)&unk_250513358, a1[1], 0, a1[2], (int *)*a1, a2, a3);
}

uint64_t sub_2341A8F7C(uint64_t *a1, uint64_t *a2)
{
  sub_2341449E0(*a1);
  return sub_2341960E4((uint64_t)&unk_250513358, a1[1], 0, a1[2], (int *)*a1, a2);
}

uint64_t sub_2341A8FBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_2341449E0(*a1 + 56);
  return sub_23419600C((uint64_t)&unk_250512F08, *(_QWORD *)(*a1 + 8), a1[1], a1[2], (int *)*a1, a2, a3);
}

uint64_t sub_2341A9010(uint64_t *a1, uint64_t *a2)
{
  sub_2341449E0(*a1 + 56);
  return sub_2341960E4((uint64_t)&unk_250512F08, *(_QWORD *)(*a1 + 8), a1[1], a1[2], (int *)*a1, a2);
}

uint64_t sub_2341A9054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23419600C((uint64_t)&unk_2505134C8, *(_QWORD *)(a1 + 8), 0, *(_QWORD *)(a1 + 16), *(int **)a1, a2, a3);
}

uint64_t sub_2341A9074(uint64_t a1, uint64_t a2)
{
  return sub_234196260((uint64_t)&unk_2505134C8, *(_QWORD *)(a1 + 8), *(unsigned int **)(a1 + 16), *(int **)a1, a2);
}

uint64_t sub_2341A9090(uint64_t a1, uint64_t *a2)
{
  return sub_23413DFDC((uint64_t)&unk_250512FB8, a1, a2);
}

uint64_t sub_2341A90A4(uint64_t a1, int *a2)
{
  return sub_23413E320((uint64_t)&unk_250512FB8, a1, a2);
}

uint64_t sub_2341A90B8(uint64_t a1, uint64_t *a2)
{
  return sub_23413DF64((uint64_t)&unk_250512FB8, a1, a2);
}

uint64_t sub_2341A90CC(uint64_t a1, int *a2)
{
  return sub_23413E3A0((uint64_t)&unk_250512FB8, a1, a2);
}

uint64_t sub_2341A90E0(uint64_t a1, uint64_t *a2)
{
  return sub_23413DFDC((uint64_t)&unk_2505133E8, a1, a2);
}

uint64_t sub_2341A90F4(uint64_t a1, int *a2)
{
  return sub_23413E320((uint64_t)&unk_2505133E8, a1, a2);
}

uint64_t sub_2341A9108(uint64_t a1, uint64_t *a2)
{
  return sub_23413DF64((uint64_t)&unk_2505133E8, a1, a2);
}

uint64_t sub_2341A911C(uint64_t a1, int *a2)
{
  return sub_23413E3A0((uint64_t)&unk_2505133E8, a1, a2);
}

_QWORD *sub_2341A9130(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9174((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9174(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_2341ABC18(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A91E0(uint64_t a1, int **a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9224((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9224(uint64_t a1, int **a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_2341ABF28(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

uint64_t *sub_2341A9288(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t *v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A92CC((uint64_t)result, a2);
    sub_234144C64(v4);
    return v5;
  }
  return result;
}

uint64_t *sub_2341A92CC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_234194134(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A9338(uint64_t a1, uint64_t **a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A937C((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A937C(uint64_t a1, uint64_t **a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_2341941A4(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

uint64_t *sub_2341A93E0(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t *v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9424((uint64_t)result, a2);
    sub_234144C64(v4);
    return v5;
  }
  return result;
}

uint64_t *sub_2341A9424(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_234194054(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A9490(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A94D4((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A94D4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_2341940C4(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

_QWORD *sub_2341A9538(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A957C((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A957C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_23415917C(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A95E8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A962C((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A962C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_234159200(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

uint64_t *sub_2341A9690(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t *v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A96D4((uint64_t)result, a2);
    sub_234144C64(v4);
    return v5;
  }
  return result;
}

uint64_t *sub_2341A96D4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_234155674(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A9740(uint64_t a1, uint64_t **a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9784((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9784(uint64_t a1, uint64_t **a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_2341556E4(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

_QWORD *sub_2341A97E8(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A982C((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A982C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_234159274(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A9898(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A98DC((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A98DC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_2341592F8(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

_QWORD *sub_2341A9940(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9984((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9984(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_234156460(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A99F0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9A34((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9A34(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_23415650C(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

_QWORD *sub_2341A9A98(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9ADC((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9ADC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_23415936C(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A9B48(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9B8C((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9B8C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_2341593F0(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

int *sub_2341A9BF0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int *result;

  result = (int *)sub_2341A344C(a1);
  if (result)
    return (int *)sub_2341704B4(*((_QWORD *)result + 1), *result, a3, a4, a2);
  return result;
}

uint64_t sub_2341A9C50(int **a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v7;
  uint64_t v8;
  void *v10;

  v10 = 0;
  v7 = sub_2341ABF28(a1, &v10);
  if ((v7 & 0x80000000) != 0)
    return 0;
  v8 = sub_2341704B4((uint64_t)v10, v7, a3, a4, a2);
  sub_23418E3C4(v10);
  return v8;
}

uint64_t sub_2341A9CCC(int *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return sub_234195F84((uint64_t)&unk_250512FB8, a2, a1, a3, a4);
}

uint64_t sub_2341A9CE8(int *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return sub_234195F84((uint64_t)&unk_2505133E8, a2, a1, a3, a4);
}

uint64_t sub_2341A9D04(int *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return sub_234195F84((uint64_t)&unk_2505131F8, a2, a1, a3, a4);
}

_QWORD *sub_2341A9D20(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9D64((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9D64(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_2341AB9CC(a2, (uint64_t *)&v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A9DD0(uint64_t a1, int *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9E14((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9E14(uint64_t a1, int *a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_2341AB9D8(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

_QWORD *sub_2341A9E78(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9EBC((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9EBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_234190E3C(a2, (uint64_t *)&v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341A9F28(uint64_t a1, int *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9F6C((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341A9F6C(uint64_t a1, int *a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_234190E48(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

int *sub_2341A9FD0(uint64_t a1, uint64_t a2)
{
  int *result;
  uint64_t v4;
  _QWORD *v5;

  result = (int *)sub_234190F04(a2);
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9F28(a1, result);
    sub_234190E60(v4);
    return (int *)v5;
  }
  return result;
}

_QWORD *sub_2341AA018(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341AA05C((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341AA05C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_234158E0C(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341AA0C8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341AA10C((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341AA10C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_2341974B8(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

_QWORD *sub_2341AA170(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341AA1B4((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341AA1B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_234159098(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

_QWORD *sub_2341AA220(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341AA264((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

uint64_t sub_2341AA264(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_234159108(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

int *sub_2341AA2C8(uint64_t a1, uint64_t a2)
{
  int *result;
  uint64_t v4;
  uint64_t v5;

  result = (int *)sub_234190F04(a2);
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341A9F6C(a1, result);
    sub_234190E60(v4);
    return (int *)v5;
  }
  return result;
}

_QWORD *sub_2341AA310(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  void *v5;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341453B4(a1, (uint64_t *)&v7, &v6, 0x19000uLL))
    return 0;
  v5 = v7;
  v3 = sub_234153108(a2, &v5, v6);
  sub_23418E3C4(v7);
  return v3;
}

uint64_t sub_2341AA37C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v6;

  v6 = 0;
  v3 = sub_234153178(a2, &v6);
  if ((v3 & 0x80000000) != 0)
    return 0;
  v4 = sub_234144F0C(a1, (uint64_t)v6, v3);
  sub_23418E3C4(v6);
  return v4;
}

uint64_t sub_2341AA3E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250512D48);
}

uint64_t sub_2341AA3EC(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250512D48);
}

uint64_t sub_2341AA3F8()
{
  return sub_234144240((uint64_t)&unk_250512D48);
}

void sub_2341AA404(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250512D48);
}

uint64_t sub_2341AA410(int *a1)
{
  return sub_23413E05C((uint64_t)&unk_250512D48, a1);
}

uint64_t sub_2341AA420(unsigned int a1, int a2, uint64_t a3)
{
  char **v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;

  v5 = sub_23418F064(a1);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sub_234144240((uint64_t)&unk_250512D48);
  v8 = sub_23414481C();
  v9 = (int *)v8;
  if (!v7 || !v8 || (*(_QWORD *)v7 = v6, !sub_2341958E8(*(unint64_t **)(v7 + 8), v8)))
  {
    sub_234143E94(v7, (uint64_t)&unk_250512D48);
    sub_234144828((uint64_t)v9);
    return 0;
  }
  sub_234140A38(v9, a2, a3);
  return v7;
}

uint64_t sub_2341AA4C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250512DD8);
}

uint64_t sub_2341AA4D0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250512DD8);
}

uint64_t sub_2341AA4DC()
{
  return sub_234144240((uint64_t)&unk_250512DD8);
}

void sub_2341AA4E8(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250512DD8);
}

uint64_t sub_2341AA4F4(int *a1)
{
  return sub_23413E05C((uint64_t)&unk_250512DD8, a1);
}

uint64_t sub_2341AA504(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250512F08);
}

uint64_t sub_2341AA510(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250512F08);
}

uint64_t sub_2341AA51C()
{
  return sub_234144240((uint64_t)&unk_250512F08);
}

void sub_2341AA528(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250512F08);
}

uint64_t sub_2341AA534(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250512FB8);
}

uint64_t sub_2341AA540(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250512FB8);
}

uint64_t sub_2341AA54C()
{
  return sub_234144240((uint64_t)&unk_250512FB8);
}

void sub_2341AA558(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250512FB8);
}

uint64_t sub_2341AA564(int *a1)
{
  return sub_23413E05C((uint64_t)&unk_250512FB8, a1);
}

unint64_t *sub_2341AA574(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *result;

  v3 = *a1;
  result = *(unint64_t **)(*a1 + 40);
  if (result || (result = sub_234195344((uint64_t)sub_2341AA5C8), (*(_QWORD *)(v3 + 40) = result) != 0))
  {
    result = sub_2341958E8(result, a2);
    if (result)
    {
      sub_2341449E0(v3 + 56);
      return (unint64_t *)1;
    }
  }
  return result;
}

uint64_t sub_2341AA5C8(uint64_t **a1, uint64_t **a2)
{
  return sub_2341413E0(**a1, **a2);
}

uint64_t sub_2341AA5DC(uint64_t a1, uint64_t a2)
{
  if (!sub_2341A8DB4(*(uint64_t **)(a1 + 8), *(uint64_t **)(*(_QWORD *)a1 + 8)))
    return sub_234196260((uint64_t)&unk_250512F08, *(_QWORD *)(a1 + 8), *(unsigned int **)(a1 + 16), *(int **)a1, a2);
  sub_2341579B4(11, 0, 137, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_crl.c", 319);
  return 0;
}

uint64_t sub_2341AA650(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  return sub_2341AA658(a1, a2, a3, 0);
}

uint64_t sub_2341AA658(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  uint64_t result;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[4];

  v14[0] = a3;
  sub_234195C1C(&stru_2561585F8);
  v8 = sub_234195898(*(_QWORD *)(*(_QWORD *)a1 + 40));
  sub_234195C54(&stru_2561585F8);
  if (!v8)
  {
    sub_234195C38(&stru_2561585F8);
    if (!sub_234195898(*(_QWORD *)(*(_QWORD *)a1 + 40)))
      sub_23419598C(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2341AABB0);
    sub_234195C54(&stru_2561585F8);
  }
  memset(&v14[1], 0, 24);
  v13 = 0;
  result = sub_23419574C(*(_QWORD *)(*(_QWORD *)a1 + 40), &v13, (uint64_t)v14, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_2341AABB0);
  if ((_DWORD)result)
  {
    for (i = v13; ; i = ++v13)
    {
      if (i >= sub_2341709C4(*(_QWORD *)(*(_QWORD *)a1 + 40)))
        return 0;
      v11 = (uint64_t *)sub_2341953E8(*(unint64_t **)(*(_QWORD *)a1 + 40), v13);
      if (sub_23413E40C(*v11, a3))
        return 0;
      if (!a4)
        break;
      v12 = sub_2341A5084(a1);
      if (!sub_2341A2FF4(a4, v12))
        break;
    }
    if (a2)
      *a2 = v11;
    return 1;
  }
  return result;
}

uint64_t sub_2341AA7BC(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_2341A3248(a3);
  v7 = sub_2341A3128(a3);
  return sub_2341AA658(a1, a2, v6, v7);
}

uint64_t sub_2341AA80C(int a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)a2)
  {
    if (a1 == 5)
    {
      v2 = *(_QWORD *)(*(_QWORD *)a2 + 40);
      if (v2)
        sub_234195B10(v2, (uint64_t)sub_2341AA5C8);
    }
  }
  return 1;
}

uint64_t sub_2341AA844(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  __int16 v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  int v32;

  v2 = *a2;
  if ((_DWORD)result != 5)
  {
    if ((_DWORD)result == 3)
    {
      sub_23419A044(*(_QWORD *)(v2 + 32));
      sub_23419CABC(*(_QWORD *)(v2 + 40));
    }
    else if ((_DWORD)result == 1)
    {
      *(_QWORD *)(v2 + 36) = 0;
      *(_QWORD *)(v2 + 28) = 0;
      *(_QWORD *)(v2 + 44) = 0;
      return result;
    }
    return 1;
  }
  v3 = *(uint64_t **)v2;
  v4 = **(_QWORD **)v2;
  if (!v4)
  {
LABEL_12:
    if (v3[6])
    {
      v6 = 139;
      v7 = 183;
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  v5 = sub_23413EAA0(v4);
  if (v5 >= 2)
  {
    v6 = 140;
    v7 = 176;
LABEL_14:
    sub_2341579B4(11, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_crl.c", v7);
    return 0;
  }
  if (!v5)
  {
    v3 = *(uint64_t **)v2;
    goto LABEL_12;
  }
LABEL_17:
  v8 = sub_234170BAC();
  result = sub_2341A9CCC((int *)v2, (uint64_t)v8, v2 + 52, 0);
  if ((_DWORD)result)
  {
    v31 = 0;
    v9 = sub_2341A35B8(v2, 770, &v31, 0);
    *(_QWORD *)(v2 + 40) = v9;
    if (!v9)
    {
      if (v31 != -1)
        return 0;
LABEL_38:
      v16 = sub_2341A35B8(v2, 90, &v31, 0);
      *(_QWORD *)(v2 + 32) = v16;
      if (v16 || v31 == -1)
      {
        v17 = *(unint64_t **)(*(_QWORD *)v2 + 48);
        if (sub_2341709C4((uint64_t)v17))
        {
          v18 = 0;
          while (1)
          {
            v19 = sub_2341953E8(v17, v18);
            v20 = (unsigned __int16 *)sub_2341709C4((uint64_t)v19);
            v21 = sub_23418EBF8(v20);
            if (sub_2341A5474((_BOOL8)v19) && v21 != 90 && v21 != 770)
              break;
            if (++v18 >= sub_2341709C4((uint64_t)v17))
              goto LABEL_48;
          }
          *(_DWORD *)(v2 + 28) |= 0x200u;
        }
LABEL_48:
        v22 = (unint64_t *)sub_2341A323C(v2);
        if (sub_2341709C4((uint64_t)v22))
        {
          v23 = 0;
          while (1)
          {
            v24 = sub_2341953E8(v22, v23);
            v32 = 0;
            v25 = sub_2341A36C8((uint64_t)v24, 141, &v32, 0);
            v26 = v25;
            if (!v25 && v32 != -1)
              break;
            if (v25)
            {
              *((_DWORD *)v24 + 6) = sub_23413EAEC(v25);
              sub_234144630(v26);
            }
            else
            {
              *((_DWORD *)v24 + 6) = -1;
            }
            v27 = (unint64_t *)v24[2];
            if (sub_2341709C4((uint64_t)v27))
            {
              v28 = 0;
              while (1)
              {
                v29 = sub_2341953E8(v27, v28);
                if (sub_2341A5474((_BOOL8)v29))
                  break;
                if (++v28 >= sub_2341709C4((uint64_t)v27))
                  goto LABEL_61;
              }
              *(_DWORD *)(v2 + 28) |= 0x200u;
            }
LABEL_61:
            ++v23;
            v30 = sub_2341709C4((uint64_t)v22);
            result = 1;
            if (v23 >= v30)
              return result;
          }
          *(_DWORD *)(v2 + 28) |= 0x80u;
        }
        return 1;
      }
      return 0;
    }
    v10 = *(_DWORD *)(v2 + 48);
    v11 = v10 | 1;
    *(_DWORD *)(v2 + 48) = v10 | 1;
    if (*(int *)(v9 + 8) < 1)
    {
      v12 = 0;
    }
    else
    {
      v11 = v10 | 5;
      *(_DWORD *)(v2 + 48) = v10 | 5;
      v12 = 1;
    }
    if (*(int *)(v9 + 12) >= 1)
    {
      ++v12;
      v11 |= 8u;
      *(_DWORD *)(v2 + 48) = v11;
    }
    v13 = *(_DWORD *)(v9 + 28);
    if (v13 > 0)
    {
      v11 |= 0x10u;
      ++v12;
    }
    if (v12 > 1)
      v11 |= 2u;
    if (v13 > 0 || v12 >= 2)
      *(_DWORD *)(v2 + 48) = v11;
    if (*(int *)(v9 + 24) >= 1)
    {
      v11 |= 0x20u;
      *(_DWORD *)(v2 + 48) = v11;
    }
    if (*(_QWORD *)(v9 + 16))
      *(_DWORD *)(v2 + 48) = v11 | 0x40;
    v14 = *(_QWORD *)v9;
    v15 = (int *)sub_2341A5084(v2);
    result = sub_23419CE28(v14, v15);
    if ((_DWORD)result)
      goto LABEL_38;
  }
  return result;
}

uint64_t sub_2341AABB0(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t sub_2341AABDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250513048);
}

uint64_t sub_2341AABE8(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250513048);
}

uint64_t sub_2341AABF4()
{
  return sub_234144240((uint64_t)&unk_250513048);
}

void sub_2341AAC00(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250513048);
}

uint64_t sub_2341AAC0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250513098);
}

uint64_t sub_2341AAC18(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250513098);
}

uint64_t sub_2341AAC24(int *a1)
{
  return sub_23413E05C((uint64_t)&unk_250513048, a1);
}

uint64_t sub_2341AAC34()
{
  return sub_234144240((uint64_t)&unk_250513108);
}

void sub_2341AAC40(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250513108);
}

uint64_t sub_2341AAC4C(int *a1)
{
  return sub_23413E05C((uint64_t)&unk_250513108, a1);
}

uint64_t sub_2341AAC5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505131F8);
}

uint64_t sub_2341AAC68(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505131F8);
}

uint64_t sub_2341AAC74()
{
  return sub_234144240((uint64_t)&unk_2505131F8);
}

void sub_2341AAC80(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505131F8);
}

uint64_t sub_2341AAC8C(int *a1)
{
  return sub_23413E05C((uint64_t)&unk_2505131F8, a1);
}

uint64_t sub_2341AAC9C(uint64_t *a1, int *a2)
{
  uint64_t result;
  uint64_t v4;

  result = sub_23413E05C((uint64_t)&unk_2505131F8, a2);
  if (result)
  {
    v4 = result;
    sub_234143E94(*a1, (uint64_t)&unk_2505131F8);
    *a1 = v4;
    return 1;
  }
  return result;
}

uint64_t sub_2341AACE4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if ((int)sub_234143140((int *)a1, 0, (uint64_t)&unk_2505131F8) < 1)
    return 0;
  if (a2)
    *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (a3)
    *a3 = **(_QWORD **)(a1 + 16);
  return 1;
}

uint64_t sub_2341AAD54(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  result = (uint64_t)sub_23418E2E4(0x28uLL);
  if (result)
  {
    v3 = result;
    v4 = sub_2341953A0();
    *(_QWORD *)v3 = v4;
    if (v4)
    {
      v5 = sub_234147410();
      *(_QWORD *)(v3 + 16) = v5;
      if (v5)
      {
        *(_QWORD *)(v3 + 24) = 0;
        *(_DWORD *)(v3 + 32) = 0;
        result = 1;
        *(_DWORD *)(v3 + 8) = 1;
        *a1 = v3;
        return result;
      }
      if (*(_QWORD *)v3)
        sub_234141344(*(_QWORD *)v3);
    }
    sub_23418E3C4((_QWORD *)v3);
    return 0;
  }
  return result;
}

void sub_2341AADC8(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;

  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      sub_234141344(*(_QWORD *)(v2 + 16));
      sub_234195434(*(unint64_t **)v2, (void (*)(uint64_t))sub_2341AB1D0, (uint64_t)sub_2341AAC40);
      v3 = *(_QWORD **)(v2 + 24);
      if (v3)
        sub_23418E3C4(v3);
      sub_23418E3C4((_QWORD *)v2);
      *a1 = 0;
    }
  }
}

uint64_t sub_2341AAE28(uint64_t *a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  _BYTE *v7;
  uint64_t result;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  _BYTE *v17;

  v7 = *a2;
  v16 = 0;
  v17 = v7;
  if (a3 >= 0x100000)
    a3 = 0x100000;
  result = sub_234142680((uint64_t)&v16, (uint64_t *)&v17, a3, (uint64_t)&unk_2505131A8, -1, 0, a5, 0);
  if ((int)result >= 1)
  {
    v9 = v16;
    if (*a1)
      sub_2341AADC8(a1);
    v15 = 0;
    if (sub_2341AAD54(&v15))
    {
      v10 = v15;
      if (sub_2341474C8(*(unint64_t **)(v15 + 16), v17 - v7))
      {
        if (v17 != v7)
          memcpy(*(void **)(*(_QWORD *)(v10 + 16) + 8), v7, v17 - v7);
        if (sub_2341709C4((uint64_t)v9))
        {
          v11 = 0;
          while (1)
          {
            v12 = sub_2341953E8(v9, v11);
            if (sub_2341709C4((uint64_t)v12))
              break;
LABEL_16:
            if (++v11 >= sub_2341709C4((uint64_t)v9))
              goto LABEL_17;
          }
          v13 = 0;
          while (1)
          {
            v14 = sub_2341953E8(v12, v13);
            *((_DWORD *)v14 + 4) = v11;
            if (!sub_2341958E8(*(unint64_t **)v10, (uint64_t)v14))
              break;
            sub_23419540C(v12, v13++, 0);
            if (v13 >= sub_2341709C4((uint64_t)v12))
              goto LABEL_16;
          }
        }
        else
        {
LABEL_17:
          if (sub_2341AB1DC(v10))
          {
            sub_234195434(v9, (void (*)(uint64_t))sub_2341AB568, (uint64_t)sub_2341AB4A4);
            *(_DWORD *)(v10 + 8) = 0;
            *a1 = v10;
            *a2 = v17;
            return 1;
          }
        }
      }
    }
    else
    {
      v10 = 0;
    }
    sub_234143E94(v10, (uint64_t)&unk_2505131F8);
    sub_234195434(v9, (void (*)(uint64_t))sub_2341AB568, (uint64_t)sub_2341AB4A8);
    sub_2341579B4(11, 0, 12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_name.c", 252);
    return 0;
  }
  return result;
}

uint64_t sub_2341AB00C(uint64_t *a1, void **a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v14;
  void *v15;

  v3 = *a1;
  if (*(_DWORD *)(*a1 + 8))
  {
    v15 = 0;
    v4 = sub_2341953A0();
    if (!v4)
      goto LABEL_20;
    if (sub_2341709C4(*(_QWORD *)v3))
    {
      v5 = 0;
      v6 = 0;
      v7 = -1;
      do
      {
        v8 = sub_2341953E8(*(unint64_t **)v3, v5);
        if (*((_DWORD *)v8 + 4) != v7)
        {
          v9 = sub_2341953A0();
          if (!v9)
            goto LABEL_20;
          v6 = v9;
          if (!sub_2341958E8(v4, (uint64_t)v9))
          {
            sub_234141344((uint64_t)v6);
            goto LABEL_20;
          }
          v7 = *((_DWORD *)v8 + 4);
        }
        if (!sub_2341958E8(v6, (uint64_t)v8))
          goto LABEL_20;
        ++v5;
      }
      while (v5 < sub_2341709C4(*(_QWORD *)v3));
    }
    v14 = v4;
    v10 = sub_234143228((int **)&v14, 0, (uint64_t)&unk_2505131A8, 0xFFFFFFFFLL, 0);
    if (v10 >= 1
      && sub_2341474C8(*(unint64_t **)(v3 + 16), v10)
      && (v15 = *(void **)(*(_QWORD *)(v3 + 16) + 8),
          (int)sub_234143228((int **)&v14, &v15, (uint64_t)&unk_2505131A8, 0xFFFFFFFFLL, 0) > 0))
    {
      sub_234195434(v4, (void (*)(uint64_t))sub_2341AB568, (uint64_t)sub_2341AB4A4);
      *(_DWORD *)(v3 + 8) = 0;
      if (sub_2341AB1DC(v3))
        goto LABEL_15;
    }
    else
    {
LABEL_20:
      sub_234195434(v4, (void (*)(uint64_t))sub_2341AB568, (uint64_t)sub_2341AB4A4);
    }
    return 0xFFFFFFFFLL;
  }
LABEL_15:
  v11 = *(uint64_t **)(v3 + 16);
  v12 = *v11;
  if (a2)
  {
    if (v12 << 32)
      memcpy(*a2, (const void *)v11[1], (int)v12);
    *a2 = (char *)*a2 + (int)v12;
  }
  return v12;
}

uint64_t sub_2341AB1D0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341AB1DC(uint64_t a1)
{
  _QWORD *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  BOOL v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  unint64_t *v33;
  int v34;
  unint64_t *v35;
  void *v36;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    sub_23418E3C4(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (sub_2341709C4(*(_QWORD *)a1))
  {
    v3 = sub_2341953A0();
    if (v3)
    {
      v4 = v3;
      v36 = 0;
      if (sub_2341709C4(*(_QWORD *)a1))
      {
        v5 = 0;
        v6 = 0;
        v7 = -1;
        v33 = v4;
        do
        {
          v8 = sub_2341953E8(*(unint64_t **)a1, v5);
          if (*((_DWORD *)v8 + 4) != v7)
          {
            v9 = sub_2341953A0();
            if (!v9)
              goto LABEL_44;
            v6 = v9;
            if (!sub_2341958E8(v4, (uint64_t)v9))
            {
              sub_234141344((uint64_t)v6);
              goto LABEL_44;
            }
            v7 = *((_DWORD *)v8 + 4);
          }
          v10 = (_QWORD *)sub_234144240((uint64_t)&unk_250513108);
          if (!v10)
            goto LABEL_44;
          v11 = (uint64_t)v10;
          *v10 = sub_23418EA9C(*v8);
          v12 = *(_QWORD *)(v11 + 8);
          v13 = v8[1];
          if ((sub_234141D8C(*(_DWORD *)(v13 + 4)) & 0x2956) != 0)
          {
            *(_DWORD *)(v12 + 4) = 12;
            v14 = (unsigned __int8 **)(v12 + 8);
            v15 = sub_23413FBF0((_QWORD *)(v12 + 8), (char **)v13);
            *(_DWORD *)v12 = v15;
            if (v15 == -1)
              goto LABEL_43;
            v34 = v7;
            v35 = v6;
            if (v15 < 1)
            {
LABEL_25:
              v24 = *v14;
              v25 = *v14;
              v6 = v35;
            }
            else
            {
              v16 = *v14;
              v17 = v15;
              v18 = v15 + 1;
              v19 = v15;
              v20 = *v14;
              while (sub_23418E6A4(*v20))
              {
                ++v20;
                --v19;
                if (--v18 <= 1)
                  goto LABEL_25;
              }
              v21 = &v16[v17 - 1];
              while (1)
              {
                v22 = *v21--;
                if (!sub_23418E6A4(v22))
                  break;
                v23 = __OFSUB__(v19--, 1);
                if ((v19 < 0) ^ v23 | (v19 == 0))
                  goto LABEL_25;
              }
              v26 = 0;
              v25 = *v14;
              v6 = v35;
              do
              {
                if (sub_23418E6A4(*v20))
                {
                  *v25 = 32;
                  do
                  {
                    v27 = *++v20;
                    ++v26;
                  }
                  while (sub_23418E6A4(v27));
                }
                else
                {
                  v28 = *v20++;
                  *v25 = sub_23418E690(v28);
                  ++v26;
                }
                ++v25;
              }
              while (v26 < v19);
              v24 = *v14;
            }
            *(_DWORD *)v12 = (_DWORD)v25 - (_DWORD)v24;
            v4 = v33;
            v7 = v34;
          }
          else if (!sub_234141154(v12, (char **)v13))
          {
            goto LABEL_43;
          }
          if (!sub_2341958E8(v6, v11))
          {
LABEL_43:
            sub_234143E94(v11, (uint64_t)&unk_250513108);
            goto LABEL_44;
          }
          ++v5;
        }
        while (v5 < sub_2341709C4(*(_QWORD *)a1));
      }
      v30 = sub_2341AB4BC(v4, 0);
      if ((v30 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 32) = v30, v31 = sub_23418E2E4(v30), (v36 = v31) == 0))
      {
LABEL_44:
        v29 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 24) = v31;
        sub_2341AB4BC(v4, &v36);
        v29 = 1;
      }
      sub_234195434(v4, (void (*)(uint64_t))sub_2341AB568, (uint64_t)sub_2341AB4A8);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 0;
    return 1;
  }
  return v29;
}

void sub_2341AB4A8(unint64_t *a1)
{
  sub_234195434(a1, (void (*)(uint64_t))sub_2341AB1D0, (uint64_t)sub_2341AAC40);
}

uint64_t sub_2341AB4BC(unint64_t *a1, void **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v8;

  v8 = 0;
  if (!sub_2341709C4((uint64_t)a1))
    return 0;
  v4 = 0;
  LODWORD(v5) = 0;
  while (1)
  {
    v8 = sub_2341953E8(a1, v4);
    v6 = sub_234143228((int **)&v8, a2, (uint64_t)&unk_250513158, 0xFFFFFFFFLL, 0);
    if ((v6 & 0x80000000) != 0)
      break;
    v5 = (v6 + v5);
    if (++v4 >= sub_2341709C4((uint64_t)a1))
      return v5;
  }
  return v6;
}

uint64_t sub_2341AB568(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341AB574(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250513288);
}

uint64_t sub_2341AB580(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250513288);
}

uint64_t sub_2341AB58C()
{
  return sub_234144240((uint64_t)&unk_250513288);
}

void sub_2341AB598(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250513288);
}

uint64_t sub_2341AB5A4(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD v6[3];
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  if (result)
  {
    v3 = (uint64_t *)result;
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    if (sub_234147B54((uint64_t)v6, 0)
      && sub_234158A94((uint64_t)v6, a2)
      && sub_234147C00((uint64_t)v6, &v8, &v7)
      && (v7 & 0x8000000000000000) == 0)
    {
      v5 = v8;
      v4 = sub_234141DAC(0, (uint64_t *)&v5, v7, (uint64_t)&unk_250513288);
      if (v4 && v5 == (_QWORD *)((char *)v8 + v7))
      {
        sub_23418E3C4(v8);
        sub_234143E94(*v3, (uint64_t)&unk_250513288);
        *v3 = v4;
        return 1;
      }
      sub_2341579B4(11, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_pubkey.c", 141);
    }
    else
    {
      sub_234147BE4((uint64_t)v6);
      sub_2341579B4(11, 0, 126, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_pubkey.c", 134);
      v4 = 0;
    }
    sub_234143E94(v4, (uint64_t)&unk_250513288);
    sub_23418E3C4(v8);
    return 0;
  }
  return result;
}

uint64_t sub_2341AB6DC(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (!result)
    {
      sub_2341579B4(11, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_pubkey.c", 162);
      return 0;
    }
  }
  return result;
}

uint64_t sub_2341AB718(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    sub_2341580D0(*(unsigned int **)(a1 + 16));
  else
    sub_2341579B4(11, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_pubkey.c", 162);
  return v1;
}

uint64_t sub_2341AB770(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;

  result = sub_2341A8C6C(*a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    sub_234141374(a1[1], a5, a6);
    *(_QWORD *)(a1[1] + 16) &= 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(a1[1] + 16) |= 8uLL;
    sub_2341AB7E4((uint64_t)a1);
    return 1;
  }
  return result;
}

void sub_2341AB7E4(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  __int128 v4;
  void *v5;

  sub_234158078(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  v5 = 0;
  v2 = sub_234143140((int *)a1, &v5, (uint64_t)&unk_250513288);
  if ((v2 & 0x80000000) == 0)
  {
    *(_QWORD *)&v4 = v5;
    *((_QWORD *)&v4 + 1) = v2;
    v3 = sub_2341588A4(&v4);
    if (!v3 || *((_QWORD *)&v4 + 1))
      sub_234158078(v3);
    else
      *(_QWORD *)(a1 + 16) = v3;
  }
  sub_23418E3C4(v5);
  sub_234157348();
}

uint64_t sub_2341AB868(_QWORD *a1, _QWORD *a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  if (a1)
    *a1 = **(_QWORD **)a5;
  if (a2)
  {
    *a2 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
    *a3 = **(_DWORD **)(a5 + 8);
  }
  if (a4)
    *a4 = *(_QWORD *)a5;
  return 1;
}

uint64_t sub_2341AB8A8(int a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (a1 == 5)
  {
    sub_2341AB7E4(v3);
  }
  else if (a1 == 3)
  {
    sub_234158078(*(_QWORD *)(v3 + 16));
  }
  return 1;
}

uint64_t sub_2341AB8E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250513358);
}

uint64_t sub_2341AB8F0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250513358);
}

uint64_t sub_2341AB8FC()
{
  return sub_234144240((uint64_t)&unk_250513358);
}

void sub_2341AB908(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250513358);
}

uint64_t sub_2341AB914(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505133E8);
}

uint64_t sub_2341AB920(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505133E8);
}

uint64_t sub_2341AB92C()
{
  return sub_234144240((uint64_t)&unk_2505133E8);
}

void sub_2341AB938(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505133E8);
}

uint64_t sub_2341AB944(int *a1)
{
  return sub_23413E05C((uint64_t)&unk_2505133E8, a1);
}

BOOL sub_2341AB954(int a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  if (a1 == 5)
  {
    if ((sub_23413EAA0(*(_QWORD *)(v2 + 24)) & 0xFFFFFFFFFFFFFFFDLL) != 0)
    {
      sub_2341579B4(11, 0, 140, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_req.c", 90);
      return 0;
    }
  }
  else if (a1 == 1)
  {
    v3 = sub_2341953A0();
    *(_QWORD *)(v2 + 48) = v3;
    return v3 != 0;
  }
  return 1;
}

uint64_t sub_2341AB9CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250513458);
}

uint64_t sub_2341AB9D8(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250513458);
}

uint64_t sub_2341AB9E4()
{
  return sub_234144240((uint64_t)&unk_250513458);
}

void sub_2341AB9F0(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250513458);
}

uint64_t sub_2341AB9FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505134C8);
}

uint64_t sub_2341ABA08(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505134C8);
}

uint64_t sub_2341ABA14()
{
  return sub_234144240((uint64_t)&unk_2505134C8);
}

void sub_2341ABA20(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505134C8);
}

uint64_t sub_2341ABA2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250513558);
}

uint64_t sub_2341ABA38(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250513558);
}

uint64_t sub_2341ABA44()
{
  return sub_234144240((uint64_t)&unk_250513558);
}

void sub_2341ABA50(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250513558);
}

uint64_t sub_2341ABA5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505135C8);
}

uint64_t sub_2341ABA68(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505135C8);
}

uint64_t sub_2341ABA74()
{
  return sub_234144240((uint64_t)&unk_2505135C8);
}

void sub_2341ABA80(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505135C8);
}

uint64_t sub_2341ABA8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250513738);
}

uint64_t sub_2341ABA98(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250513738);
}

uint64_t sub_2341ABAA4()
{
  return sub_234144240((uint64_t)&unk_250513738);
}

void sub_2341ABAB0(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250513738);
}

_QWORD *sub_2341ABABC()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_2341ABB24();
  if (v0)
  {
    *v0 = sub_234144240((uint64_t)&unk_250513738);
    v0[1] = sub_2341A8C44();
    v1 = sub_23414468C();
    v0[2] = v1;
    if (!*v0 || !v0[1] || !v1)
    {
      sub_2341ABB70((uint64_t)v0);
      return 0;
    }
  }
  return v0;
}

_QWORD *sub_2341ABB24()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_23418E344(0x158uLL);
  v1 = v0;
  if (v0)
  {
    *((_DWORD *)v0 + 6) = 1;
    v0[5] = -1;
    sub_23415F254(v0 + 4);
    sub_234195BFC((pthread_rwlock_t *)(v1 + 18));
  }
  return v1;
}

void sub_2341ABB70(uint64_t a1)
{
  if (a1)
  {
    if (sub_234193960((unsigned int *)(a1 + 24)))
    {
      sub_23415F25C((uint64_t)&unk_2561586C0, a1, (unint64_t **)(a1 + 32));
      sub_234143E94(*(_QWORD *)a1, (uint64_t)&unk_250513738);
      sub_2341A8C50(*(_QWORD *)(a1 + 8));
      sub_234144630(*(_QWORD *)(a1 + 16));
      sub_234144630(*(_QWORD *)(a1 + 64));
      sub_23419A044(*(_QWORD *)(a1 + 72));
      sub_23419CA8C(*(_QWORD *)(a1 + 80));
      sub_23419D890(*(_QWORD *)(a1 + 88));
      sub_23419E748(*(_QWORD *)(a1 + 96));
      sub_2341AC590(*(_QWORD *)(a1 + 136));
      j__pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 144));
      sub_23418E3C4((_QWORD *)a1);
    }
  }
}

uint64_t sub_2341ABC18(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v7;

  if (a3 < 0)
  {
    sub_2341579B4(12, 0, 107, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_x509.c", 238);
    v5 = 0;
    if (!a1)
      return v5;
    goto LABEL_5;
  }
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_2341ABCAC(&v7, 0);
  if (v5)
    *a2 = v7;
  if (a1)
  {
LABEL_5:
    sub_2341ABB70(*a1);
    *a1 = v5;
  }
  return v5;
}

uint64_t sub_2341ABCAC(__int128 *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  __int16 v13;
  unsigned __int8 *v14;
  int v15;
  unint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  __int128 v24;

  v24 = 0uLL;
  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  if (!sub_2341493F4(a1, &v24, 536870928)
    || *((_QWORD *)&v24 + 1) >> 30
    || !sub_2341494B8(&v24, &v22, 536870928)
    || !sub_2341494B8(&v24, &v20, 536870928))
  {
    v5 = 153;
LABEL_15:
    sub_2341579B4(12, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_x509.c", v5);
    return 0;
  }
  v17 = 0;
  v16 = 0;
  v15 = 0;
  if (!sub_2341493C8(&v24, &v18, &v17, &v16, 0, &v15)
    || v17 != 3
    || v15
    || !sub_234148BF8(&v18, v16)
    || *((_QWORD *)&v24 + 1))
  {
    v5 = 171;
    goto LABEL_15;
  }
  v3 = sub_2341ABB24();
  v4 = (uint64_t)v3;
  if (v3)
  {
    v14 = v22;
    if ((int)sub_234142680((uint64_t)v3, (uint64_t *)&v14, v23, (uint64_t)&unk_250513738, -1, 0, 0, a2) < 1)
      goto LABEL_13;
    if (v14 != &v22[v23])
      goto LABEL_13;
    v14 = v20;
    v7 = sub_2341A8C2C(0, (uint64_t *)&v14, v21);
    *(_QWORD *)(v4 + 8) = v7;
    if (!v7)
      goto LABEL_13;
    if (v14 != &v20[v21])
      goto LABEL_13;
    v14 = v18;
    v8 = sub_23413DBF4(0, &v14, v19);
    *(_QWORD *)(v4 + 16) = v8;
    if (!v8 || v14 != &v18[v19])
      goto LABEL_13;
    v9 = *(uint64_t **)v4;
    v10 = **(_QWORD **)v4;
    if (v10)
    {
      v11 = sub_23413EAA0(v10);
      if (v11 >= 3)
      {
        v12 = 140;
        v13 = 210;
LABEL_35:
        sub_2341579B4(11, 0, v12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_x509.c", v13);
LABEL_13:
        sub_2341ABB70(v4);
        return 0;
      }
      if (v11)
      {
        if (v11 == 2)
          return v4;
        v9 = *(uint64_t **)v4;
        goto LABEL_33;
      }
      v9 = *(uint64_t **)v4;
    }
    if (v9[7] || v9[8])
    {
      v12 = 139;
      v13 = 218;
      goto LABEL_35;
    }
LABEL_33:
    if (!v9[9])
      return v4;
    v12 = 139;
    v13 = 224;
    goto LABEL_35;
  }
  return v4;
}

uint64_t sub_2341ABF28(int **a1, void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  void *v11;
  _OWORD v12[3];
  _OWORD v13[3];

  if (a1)
  {
    memset(v13, 0, sizeof(v13));
    memset(v12, 0, sizeof(v12));
    if (sub_234147B54((uint64_t)v13, 0x40uLL))
    {
      if (sub_234147F60((uint64_t *)v13, (uint64_t)v12, 0x20000010u))
      {
        v11 = 0;
        v4 = sub_234143140(*a1, 0, (uint64_t)&unk_250513738);
        if ((v4 & 0x80000000) == 0)
        {
          v5 = v4;
          if (sub_2341481CC((uint64_t)v12, &v11, v4))
          {
            if (sub_234143140(*a1, &v11, (uint64_t)&unk_250513738) == v5)
            {
              v6 = sub_2341A8C38(a1[1], 0);
              if ((v6 & 0x80000000) == 0)
              {
                v7 = v6;
                if (sub_2341481CC((uint64_t)v12, &v11, v6))
                {
                  if (sub_2341A8C38(a1[1], &v11) == v7)
                  {
                    v8 = sub_234144680(a1[2], 0);
                    if ((v8 & 0x80000000) == 0)
                    {
                      v9 = v8;
                      if (sub_2341481CC((uint64_t)v12, &v11, v8))
                      {
                        if (sub_234144680(a1[2], &v11) == v9)
                          return sub_2341475C8((uint64_t)v13, a2);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    sub_234147BE4((uint64_t)v13);
  }
  else
  {
    sub_2341579B4(12, 0, 155, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_x509.c", 261);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_2341AC098(int **a1)
{
  unsigned int v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v5 = 0;
  v1 = sub_2341ABF28(a1, &v5);
  if ((v1 & 0x80000000) != 0)
    return 0;
  v4 = v5;
  v2 = sub_2341ABC18(0, &v4, v1);
  sub_23418E3C4(v5);
  return v2;
}

uint64_t sub_2341AC0F8(uint64_t a1)
{
  uint64_t result;
  __int128 v3;

  *(_QWORD *)&v3 = sub_2341414C0(a1);
  *((_QWORD *)&v3 + 1) = sub_234153704(a1);
  result = sub_2341ABCAC(&v3, a1);
  if (!result || *((_QWORD *)&v3 + 1))
  {
    sub_2341ABB70(result);
    return 0;
  }
  return result;
}

uint64_t sub_2341AC150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23415F0A8((uint64_t)&unk_2561586C0, a1, a2, a5);
}

uint64_t sub_2341AC168(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return sub_23415F178((unint64_t **)(a1 + 32), a2, a3);
}

unint64_t *sub_2341AC170(uint64_t a1, unsigned int a2)
{
  return sub_23415F204((unint64_t **)(a1 + 32), a2);
}

uint64_t sub_2341AC178(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = *a2;
  v6 = a1 && *a1;
  v7 = sub_2341ABC18(a1, &v12, a3);
  v8 = v7;
  if (v7)
  {
    v9 = v12;
    v10 = *a2 - v12 + a3;
    if (v10 < 1)
    {
LABEL_9:
      *a2 = v9;
      return v8;
    }
    if (sub_2341AC56C((uint64_t *)(v7 + 136), &v12, v10))
    {
      v9 = v12;
      goto LABEL_9;
    }
    if (v6)
      return 0;
    sub_2341ABB70(v8);
    if (!a1)
    {
      return 0;
    }
    else
    {
      v8 = 0;
      *a1 = 0;
    }
  }
  return v8;
}

uint64_t sub_2341AC244(int **a1, void **a2)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;

  if (!a2 || *a2)
    return sub_2341AC2F8(a1, a2);
  v5 = sub_2341AC2F8(a1, 0);
  v6 = v5;
  if ((int)v5 >= 1)
  {
    v7 = sub_23418E2E4(v5);
    v8 = v7;
    *a2 = v7;
    if (v7)
    {
      v6 = sub_2341AC2F8(a1, &v8);
      if ((int)v6 <= 0)
      {
        sub_23418E3C4(*a2);
        *a2 = 0;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v6;
}

uint64_t sub_2341AC2F8(int **a1, void **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;

  if (a2)
    v4 = *a2;
  else
    v4 = 0;
  v5 = sub_2341ABF28(a1, a2);
  v6 = v5;
  if (a1)
  {
    if ((int)v5 >= 1)
    {
      v7 = a1[17];
      if (v7)
      {
        v8 = sub_2341AC578(v7, a2);
        if ((v8 & 0x80000000) != 0)
        {
          if (v4)
            *a2 = v4;
          return v8;
        }
        else
        {
          return (v8 + v6);
        }
      }
    }
  }
  return v6;
}

uint64_t sub_2341AC378(int **a1, void **a2)
{
  sub_2341449E0((uint64_t)(*a1 + 20));
  return sub_234143140(*a1, a2, (uint64_t)&unk_250513738);
}

uint64_t sub_2341AC3B4(int **a1, void **a2)
{
  return sub_234143140(*a1, a2, (uint64_t)&unk_250513738);
}

uint64_t sub_2341AC3C4(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_2341A8C5C(a2);
  v5 = sub_2341A8C5C(a2);
  v6 = v5;
  if (v4 && v5)
  {
    sub_2341A8C50(a1[1]);
    a1[1] = v4;
    sub_2341A8C50(*(_QWORD *)(*a1 + 16));
    *(_QWORD *)(*a1 + 16) = v6;
    return 1;
  }
  else
  {
    sub_2341A8C50(v4);
    sub_2341A8C50(v6);
    return 0;
  }
}

_QWORD *sub_2341AC448(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  if (result)
    *result = *(_QWORD *)(a3 + 16);
  if (a2)
    *a2 = *(_QWORD *)(a3 + 8);
  return result;
}

BOOL sub_2341AC464(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_2341ABABC();
  *a1 = v2;
  return v2 != 0;
}

void sub_2341AC490(uint64_t *a1)
{
  sub_2341ABB70(*a1);
  *a1 = 0;
}

uint64_t sub_2341AC4B8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v8;
  __int128 v9;

  if (a3 < 0)
  {
    sub_2341579B4(12, 0, 107, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/x509/x_x509.c", 315);
    return 0;
  }
  else
  {
    *(_QWORD *)&v9 = *a2;
    *((_QWORD *)&v9 + 1) = a3;
    if (a5 && !sub_2341494C0(&v9, 536870928))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      result = sub_2341ABCAC(&v9, 0);
      if (result)
      {
        v8 = result;
        *a2 = v9;
        sub_2341ABB70(*a1);
        *a1 = v8;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_2341AC564(int ***a1, void **a2)
{
  return sub_2341ABF28(*a1, a2);
}

uint64_t sub_2341AC56C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250513838);
}

uint64_t sub_2341AC578(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250513838);
}

uint64_t sub_2341AC584()
{
  return sub_234144240((uint64_t)&unk_250513838);
}

void sub_2341AC590(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250513838);
}

uint64_t sub_2341AC59C(uint64_t a1, char *__s, size_t __n)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (__s)
  {
    if (a1)
    {
      v6 = *(_QWORD *)(a1 + 136);
      if (v6 || (result = sub_234144240((uint64_t)&unk_250513838), v6 = result, (*(_QWORD *)(a1 + 136) = result) != 0))
      {
        result = *(_QWORD *)(v6 + 16);
        if (result)
          return sub_2341411A4(result, __s, __n);
        result = (uint64_t)sub_2341446AC();
        *(_QWORD *)(v6 + 16) = result;
        if (result)
          return sub_2341411A4(result, __s, __n);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (a1)
    {
      v8 = *(_QWORD *)(a1 + 136);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 16);
        if (v9)
        {
          sub_234144630(v9);
          *(_QWORD *)(*(_QWORD *)(a1 + 136) + 16) = 0;
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_2341AC648(uint64_t a1, char *__s, size_t __n)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (__s)
  {
    if (a1)
    {
      v6 = *(_QWORD *)(a1 + 136);
      if (v6 || (result = sub_234144240((uint64_t)&unk_250513838), v6 = result, (*(_QWORD *)(a1 + 136) = result) != 0))
      {
        result = *(_QWORD *)(v6 + 24);
        if (result)
          return sub_2341411A4(result, __s, __n);
        result = (uint64_t)sub_234144628();
        *(_QWORD *)(v6 + 24) = result;
        if (result)
          return sub_2341411A4(result, __s, __n);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (a1)
    {
      v8 = *(_QWORD *)(a1 + 136);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          sub_234144630(v9);
          *(_QWORD *)(*(_QWORD *)(a1 + 136) + 24) = 0;
        }
      }
    }
    return 1;
  }
  return result;
}

int *sub_2341AC6F4(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  int *result;
  int v4;

  v2 = *(_QWORD *)(a1 + 136);
  if (!v2)
  {
    result = 0;
    if (!a2)
      return result;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  result = *(int **)(v2 + 16);
  if (!a2)
    goto LABEL_8;
  if (!result)
    goto LABEL_6;
  v4 = *result;
LABEL_7:
  *a2 = v4;
LABEL_8:
  if (result)
    return (int *)*((_QWORD *)result + 1);
  return result;
}

int *sub_2341AC72C(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  int *result;
  int v4;

  v2 = *(_QWORD *)(a1 + 136);
  if (!v2)
  {
    result = 0;
    if (!a2)
      return result;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  result = *(int **)(v2 + 24);
  if (!a2)
    goto LABEL_8;
  if (!result)
    goto LABEL_6;
  v4 = *result;
LABEL_7:
  *a2 = v4;
LABEL_8:
  if (result)
    return (int *)*((_QWORD *)result + 1);
  return result;
}

uint64_t sub_2341AC764(uint64_t a1, uint64_t a2)
{
  const char **v3;
  unint64_t **v4;
  unint64_t *v5;

  v3 = sub_23418EA9C(a2);
  if (v3)
  {
    v4 = *(unint64_t ***)(a1 + 136);
    if (!v4)
    {
      v4 = (unint64_t **)sub_234144240((uint64_t)&unk_250513838);
      *(_QWORD *)(a1 + 136) = v4;
    }
    v5 = *v4;
    if (*v4 || (v5 = sub_2341953A0(), (*v4 = v5) != 0))
    {
      if (sub_2341958E8(v5, (uint64_t)v3))
        return 1;
    }
  }
  sub_23413F6D0((_QWORD **)v3);
  return 0;
}

uint64_t sub_2341AC7E8(uint64_t a1, uint64_t a2)
{
  const char **v3;
  uint64_t v4;
  unint64_t *v5;

  v3 = sub_23418EA9C(a2);
  if (v3)
  {
    if (a1)
    {
      v4 = *(_QWORD *)(a1 + 136);
      if (!v4)
      {
        v4 = sub_234144240((uint64_t)&unk_250513838);
        *(_QWORD *)(a1 + 136) = v4;
      }
    }
    else
    {
      v4 = 0;
    }
    v5 = *(unint64_t **)(v4 + 8);
    if (v5 || (v5 = sub_2341953A0(), (*(_QWORD *)(v4 + 8) = v5) != 0))
    {
      if (sub_2341958E8(v5, (uint64_t)v3))
        return 1;
    }
  }
  sub_23413F6D0((_QWORD **)v3);
  return 0;
}

void sub_2341AC878(uint64_t a1)
{
  unint64_t **v1;

  v1 = *(unint64_t ***)(a1 + 136);
  if (v1)
  {
    if (*v1)
    {
      sub_234195434(*v1, (void (*)(uint64_t))sub_2341AC908, (uint64_t)sub_23413F6D0);
      **(_QWORD **)(a1 + 136) = 0;
    }
  }
}

void sub_2341AC8C0(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v3;

  v1 = *(_QWORD *)(a1 + 136);
  if (v1)
  {
    v3 = *(unint64_t **)(v1 + 8);
    if (v3)
    {
      sub_234195434(v3, (void (*)(uint64_t))sub_2341AC908, (uint64_t)sub_23413F6D0);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) = 0;
    }
  }
}

uint64_t sub_2341AC908(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341AC914(uint64_t result, __int16 a2, int a3, __int16 a4)
{
  *(_WORD *)result = a2;
  *(_DWORD *)(result + 2) = a3;
  *(_WORD *)(result + 6) = a4;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_2341AC928(uint64_t result, __int16 a2, int a3, __int16 a4, _QWORD *a5)
{
  *(_WORD *)result = a2;
  *(_DWORD *)(result + 2) = a3;
  *(_WORD *)(result + 6) = a4;
  *(_QWORD *)(result + 8) = *a5;
  *a5 = 0;
  return result;
}

void sub_2341AC944(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;

  v23 = 0;
  v4 = *a2;
  if (!*a2)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/StatusReport.cpp";
    v13 = 53;
LABEL_16:
    *(_DWORD *)(a3 + 16) = v13;
    return;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 24);
  v18 = v7;
  v19 = v7;
  v20 = v8;
  LODWORD(v21) = 0;
  *((_QWORD *)&v21 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v22) = 330;
  if (!v7)
    v20 = 0;
  v17 = 0;
  sub_234114EA0((uint64_t)&v18, &v23);
  sub_234114F0C((uint64_t)&v18, &v17);
  sub_234114EA0((uint64_t)&v18, (_WORD *)(a1 + 6));
  *(_OWORD *)a3 = v21;
  *(_QWORD *)(a3 + 16) = v22;
  if (!*(_DWORD *)a3)
  {
    HIDWORD(v9) = v17;
    LODWORD(v9) = v17;
    *(_DWORD *)(a1 + 2) = v9 >> 16;
    *(_WORD *)a1 = v23;
    v10 = *(_QWORD *)(*a2 + 24);
    if (v10 <= v19 - v18)
    {
      v15 = *(_QWORD *)(a1 + 8);
      if (v15)
        sub_23411814C(v15);
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      sub_2341188C4((const void *)(*(_QWORD *)(*a2 + 8) + v19 - v18), v10 - (v19 - v18), 0, 0, &v16);
      v11 = *(_QWORD *)(a1 + 8);
      if (v11)
        sub_23411814C(v11);
      v12 = v16;
      *(_QWORD *)(a1 + 8) = v16;
      if (!v12)
      {
        v13 = 71;
        v14 = 11;
LABEL_15:
        *(_DWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/StatusReport.cpp";
        goto LABEL_16;
      }
    }
    v14 = 0;
    v13 = 79;
    goto LABEL_15;
  }
}

_QWORD *sub_2341ACAAC(unsigned __int16 *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = sub_234115150(a2, *a1, 2);
  v5 = sub_234115150(v4, a1[2] | ((unint64_t)a1[1] << 16), 4);
  sub_234115150(v5, a1[3], 2);
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
    sub_2341150D8(a2, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 24));
  return a2;
}

uint64_t sub_2341ACB18(unsigned __int16 *a1)
{
  _QWORD v2[2];
  uint64_t v3;

  v2[0] = 0;
  v2[1] = 0;
  v3 = 0;
  sub_2341ACAAC(a1, v2);
  return v3;
}

void sub_2341ACB44(unsigned __int16 a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_234118674(2uLL, 0, &v24);
  if (v24)
  {
    v4 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)buf = v4 + *(_QWORD *)(v24 + 24);
    v21 = sub_23411828C(v24);
    v22 = 0;
    if (!v4)
      v21 = 0;
    v23 = v24;
    v24 = 0;
    sub_234115150(buf, a1, 2);
    sub_234118A50(buf, &v23, &v12);
    if (v24)
      sub_23411814C(v24);
    v5 = v12;
    v24 = v12;
    if (v12)
    {
      v24 = 0;
      v16 = 8;
      v17 = 0;
      v18 = 4;
      v19 = v12;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      sub_2341ACAAC(&v16, &v12);
      sub_234118674(v14, 0x26u, &v12);
      if (v24)
        sub_23411814C(v24);
      v24 = v12;
      if (v12)
      {
        v6 = *(_QWORD *)(v12 + 8);
        v7 = v6 + *(_QWORD *)(v12 + 24);
        v8 = sub_23411828C(v12);
        v12 = v7;
        v13 = v8;
        v14 = 0;
        if (!v6)
          v13 = 0;
        v15 = v24;
        v24 = 0;
        sub_2341ACAAC(&v16, &v12);
        sub_234118A50(&v12, &v15, a2);
        if (v15)
          sub_23411814C(v15);
      }
      else
      {
        v11 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v12) = 0;
          _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Failed to allocate status report message", (uint8_t *)&v12, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(0xBu, 1);
        *a2 = v24;
        v24 = 0;
      }
      sub_23411814C(v5);
    }
    else
    {
      v10 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed to finalize protocol data for busy status report", (uint8_t *)&v12, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0xBu, 1);
      *a2 = v24;
      v24 = 0;
    }
    if (v23)
      sub_23411814C(v23);
    if (v24)
      sub_23411814C(v24);
  }
  else
  {
    v9 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Failed to allocate protocol data for busy status report", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0xBu, 1);
    *a2 = v24;
  }
}

uint64_t sub_2341ACE30(uint64_t a1, int a2, unsigned int a3)
{
  unint64_t v3;

  v3 = (0xFFE0FFFFFFFFuLL >> a3) & 1;
  if (a3 > 0x33)
    LODWORD(v3) = 1;
  if (a2)
    return 1;
  else
    return v3;
}

BOOL sub_2341ACE58(_DWORD *a1)
{
  _DWORD v3[6];
  _DWORD v4[6];

  if (!*a1)
    return 1;
  sub_234117EFC(51, "src/messaging/ErrorCategory.cpp", 40, (uint64_t)v4);
  if (*a1 == v4[0])
    return 1;
  sub_234117EFC(49, "src/messaging/ErrorCategory.cpp", 40, (uint64_t)v3);
  return *a1 == v3[0];
}

__n128 sub_2341ACEDC@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __n128 result;
  _DWORD v6[6];
  _DWORD v7[6];

  if (a2)
  {
    sub_234117EFC(51, "src/messaging/ErrorCategory.cpp", 60, (uint64_t)v7);
    if (*(_DWORD *)a1 == v7[0]
      || (sub_234117EFC(49, "src/messaging/ErrorCategory.cpp", 60, (uint64_t)v6), *(_DWORD *)a1 == v6[0]))
    {
      *(_DWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = "src/messaging/ErrorCategory.cpp";
      *(_DWORD *)(a1 + 16) = 62;
    }
  }
  result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

BOOL sub_2341ACF84(unsigned int *a1)
{
  unsigned int v2;
  _BOOL8 result;
  BOOL v4;
  _DWORD v5[6];
  _DWORD v6[6];
  _DWORD v7[6];
  _DWORD v8[6];

  v2 = *a1;
  result = 1;
  v4 = v2 > 0x2D || ((1 << v2) & 0x200000000810) == 0;
  if (v4 && v2 != 195)
  {
    sub_234117EFC(65, "src/messaging/ErrorCategory.cpp", 81, (uint64_t)v8);
    if (*a1 == v8[0])
      return 1;
    sub_234117EFC(51, "src/messaging/ErrorCategory.cpp", 81, (uint64_t)v7);
    if (*a1 == v7[0])
      return 1;
    sub_234117EFC(49, "src/messaging/ErrorCategory.cpp", 81, (uint64_t)v6);
    if (*a1 == v6[0])
    {
      return 1;
    }
    else
    {
      sub_234117EFC(32, "src/messaging/ErrorCategory.cpp", 81, (uint64_t)v5);
      return *a1 == v5[0];
    }
  }
  return result;
}

uint64_t sub_2341AD080(uint64_t a1)
{
  return *(_WORD *)(a1 + 8) & 1;
}

uint64_t sub_2341AD08C(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_2341AD098(uint64_t result, int a2)
{
  __int16 v2;
  __int16 v3;

  if (a2)
    v2 = 2048;
  else
    v2 = 0;
  if (a2)
    v3 = 2;
  else
    v3 = 0;
  *(_WORD *)(result + 8) = *(_WORD *)(result + 8) & 0xF7FD | v3 | v2;
  return result;
}

uint64_t sub_2341AD0C8(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t result;

  v4 = (uint64_t *)sub_233C25EA4((_BYTE *)(a1 + 88));
  result = sub_2341CD548(*v4, a2);
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_2341AD100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

void sub_2341AD108(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, _WORD *a5@<X4>, uint64_t a6@<X8>)
{
  _BOOL8 v12;
  unsigned int v13;
  BOOL v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  NSObject *v24;
  __int16 v25;
  uint8_t buf[16];
  uint64_t v27;
  uint64_t v28;

  v12 = sub_2341B1F64("src/messaging/ExchangeContext.cpp", 93);
  v13 = a2;
  v14 = a3 == 16 && a2 == 0;
  if (!*(_QWORD *)(a1 + 48))
  {
    *(_DWORD *)a6 = 172;
    *(_QWORD *)(a6 + 8) = "src/messaging/ExchangeContext.cpp";
    v17 = 98;
LABEL_28:
    *(_DWORD *)(a6 + 16) = v17;
    return;
  }
  if (!*(_BYTE *)(a1 + 88))
  {
    *(_DWORD *)a6 = 2;
    *(_QWORD *)(a6 + 8) = "src/messaging/ExchangeContext.cpp";
    v17 = 99;
    goto LABEL_28;
  }
  v15 = (int *)(a1 + 28);
  if (!*(_DWORD *)(a1 + 28))
    sub_23425B7B0(v12);
  sub_23412A1A8((int *)(a1 + 28));
  sub_233CB4208(a1, buf);
  v16 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)buf + 72))(*(_QWORD *)buf)
     && (*a5 & 2) == 0
     && !sub_2340FAB58(a1);
  (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
  if ((*a5 & 1) == 0 || sub_2340FAB58(a1))
    goto LABEL_14;
  v23 = *(_WORD *)(a1 + 8);
  if ((v23 & 2) != 0)
  {
    *(_DWORD *)a6 = 3;
    *(_QWORD *)(a6 + 8) = "src/messaging/ExchangeContext.cpp";
    v19 = 122;
LABEL_43:
    *(_DWORD *)(a6 + 16) = v19;
    goto LABEL_44;
  }
  *(_WORD *)(a1 + 8) = v23 | 0x802;
  if (!*(_DWORD *)(a1 + 32))
  {
LABEL_14:
    v18 = 0;
LABEL_15:
    if (!sub_2340FAB58(a1) || (*(_WORD *)(a1 + 8) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 88))
      {
        sub_233CB4208(a1, &v28);
        v20 = (__int16 *)(a1 + 8);
        sub_2341AE278(*(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 88), &v28, *(unsigned __int16 *)(a1 + 112), *(_WORD *)(a1 + 8) & 1, a1 + 8, v16, v13, (uint64_t)buf, a3, a4);
        *(_OWORD *)a6 = *(_OWORD *)buf;
        *(_QWORD *)(a6 + 16) = v27;
        if (*(_DWORD *)a6)
        {
          if (v18)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 88) + 24);
            if (v21)
              (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v21 + 72))(v21, sub_2341ADAF4, a1);
            *v20 &= 0xF7FDu;
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28) == 2
            && *(_BYTE *)(sub_2341CD3C0(v28) + 57) == 2)
          {
            v22 = sub_2341CD3C0(v28);
            sub_2341CB7C4(v22);
          }
        }
        else if (!v14)
        {
          v25 = *v20;
          *v20 &= ~0x40u;
          if ((v25 & 0x82) == 0)
            sub_2341AD5A4(a1);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
        goto LABEL_44;
      }
      v24 = sub_234117B80(5u, "ExchangeManager");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_ERROR, "WARNING: We shouldn't be sending a message on an exchange that has no attached session...", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(5u, 1);
      *(_DWORD *)a6 = 119;
      *(_QWORD *)(a6 + 8) = "src/messaging/ExchangeContext.cpp";
      v19 = 158;
    }
    else
    {
      *(_DWORD *)a6 = 172;
      *(_QWORD *)(a6 + 8) = "src/messaging/ExchangeContext.cpp";
      v19 = 144;
    }
    goto LABEL_43;
  }
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  sub_2341AD464(a1, a6);
  if (!*(_DWORD *)a6)
  {
    v18 = 1;
    goto LABEL_15;
  }
  *(_WORD *)(a1 + 8) &= 0xF7FDu;
LABEL_44:
  sub_23412A174(v15);
}

uint64_t sub_2341AD464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 88) + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, void (*)(uint64_t, uint64_t)))(*(_QWORD *)result + 40))(result, *(unsigned int *)(a1 + 32), sub_2341ADAF4);
  *(_DWORD *)a2 = 172;
  *(_QWORD *)(a2 + 8) = "src/messaging/ExchangeContext.cpp";
  *(_DWORD *)(a2 + 16) = 435;
  return result;
}

uint64_t sub_2341AD4B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 88) + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)result + 72))(result, sub_2341ADAF4, a1);
  return result;
}

void sub_2341AD4DC(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 8) & 0xC2) == 0)
    sub_2341AD5A4(a1);
}

void sub_2341AD4F4(uint64_t a1, int a2)
{
  __int16 v2;
  _WORD *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v3 = (_WORD *)(a1 + 8);
  v2 = *(_WORD *)(a1 + 8);
  if ((v2 & 0x80) == 0)
  {
    *(_WORD *)(a1 + 8) = v2 | 0x80;
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a1);
    *(_QWORD *)(a1 + 40) = 0;
    sub_2341AFEC4((uint64_t)v3, (uint64_t)v8);
    if (a2)
      sub_2341B13C0(*(_QWORD *)(a1 + 48) + 96, (uint64_t)v3);
    if ((*v3 & 2) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 88) + 24);
      if (v7)
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v7 + 72))(v7, sub_2341ADAF4, a1);
    }
  }
}

void sub_2341AD5A4(uint64_t a1)
{
  int *v1;

  if (!*(_QWORD *)(a1 + 48) || (v1 = (int *)(a1 + 28), !*(_DWORD *)(a1 + 28)))
    sub_23425B844(a1);
  sub_2341AD4F4();
  sub_23412A174(v1);
}

void sub_2341AD5E0(uint64_t a1)
{
  int *v1;

  if (!*(_QWORD *)(a1 + 48) || (v1 = (int *)(a1 + 28), !*(_DWORD *)(a1 + 28)))
    sub_23425B8D8(a1);
  sub_2341AD4F4(a1, 1);
  sub_23412A174(v1);
}

void sub_2341AD61C(uint64_t a1)
{
  sub_2341AE124(*(_QWORD *)(a1 + 48) + 32, (void (***)(_QWORD))a1);
}

uint64_t sub_2341AD62C(uint64_t a1, uint64_t a2, __int16 a3, uint64_t *a4, int a5, uint64_t a6, int a7)
{
  _WORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  int *v22;
  char v23;

  v14 = (_WORD *)(a1 + 8);
  sub_2341AFE80(a1 + 8);
  *(_QWORD *)a1 = &off_2505138C8;
  *(_QWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  v15 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  v16 = sub_2341AD7A4(a7, a6);
  *(_QWORD *)(a1 + 64) = &unk_250513970;
  v17 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v16;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = a1;
  if (*(_QWORD *)(a1 + 48))
    sub_23425B96C((uint64_t)v17);
  *(_QWORD *)(a1 + 48) = a2;
  *(_WORD *)(a1 + 112) = a3;
  sub_2341CDA90(v17, a4);
  v18 = *(_WORD *)(a1 + 8);
  if (a5)
  {
    v19 = v18 | 1;
    if ((a7 & 1) == 0)
    {
      *v15 = a6;
      v20 = v19 & 0xFEBF | 0x40;
      goto LABEL_10;
    }
  }
  else
  {
    if ((a7 & 1) == 0)
    {
      v20 = v18 & 0xFEFE;
      goto LABEL_9;
    }
    v19 = v18 & 0xFFFE;
  }
  v20 = v19 | 0x100;
LABEL_9:
  *v15 = a6;
LABEL_10:
  *v14 = v20 & 0xFFEF;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a4 + 72))(*a4))
    v21 = 4;
  else
    v21 = 0;
  *v14 = *v14 & 0xFFFB | v21;
  v22 = sub_234118AFC();
  v23 = *((_BYTE *)v22 + 4) + 1;
  *((_BYTE *)v22 + 4) = v23;
  if (*((char *)sub_234118B08() + 4) < v23)
    *((_BYTE *)sub_234118B08() + 4) = v23;
  return a1;
}

uint64_t *sub_2341AD7A4(int a1, uint64_t a2)
{
  if (a1)
    return sub_2341ADF28();
  if (a2)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  return sub_233CB71F8();
}

uint64_t sub_2341AD7C8(uint64_t a1)
{
  int *v2;

  *(_QWORD *)a1 = &off_2505138C8;
  if (!*(_QWORD *)(a1 + 48) || *(_DWORD *)(a1 + 28))
    sub_23425BA00(a1);
  if ((*(_WORD *)(a1 + 8) & 0x80) == 0)
    sub_23425BA94(a1);
  sub_2341AD4F4(a1, 0);
  *(_QWORD *)(a1 + 48) = 0;
  v2 = sub_234118AFC();
  --*((_BYTE *)v2 + 4);
  sub_2341CD6AC(a1 + 64);
  return a1;
}

void sub_2341AD844(uint64_t a1)
{
  sub_2341AD7C8(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341AD868(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v5;
  __int16 v6;
  int v7;
  int v11;

  if (*(unsigned __int16 *)(a1 + 112) != *(unsigned __int16 *)(a4 + 2))
    goto LABEL_4;
  v7 = *(unsigned __int8 *)(a1 + 88);
  v5 = (_BYTE *)(a1 + 88);
  LOBYTE(v6) = v7;
  if (v7)
  {
    if (*(_QWORD *)sub_233C25EA4(v5) != *a2)
    {
LABEL_4:
      LOBYTE(v6) = 0;
      return v6 & 1;
    }
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
    if (*(_WORD *)(a3 + 44))
    {
      if ((v11 & 1) == 0)
        goto LABEL_4;
    }
    else if (((v11 ^ (*(_BYTE *)(a3 + 46) != 0)) & 1) != 0)
    {
      goto LABEL_4;
    }
    v6 = *(unsigned __int8 *)(a4 + 8) ^ *(_WORD *)(a1 + 8);
  }
  return v6 & 1;
}

void sub_2341AD910(uint64_t a1)
{
  __int16 v1;
  __int16 v3;
  uint64_t v4;

  v1 = *(_WORD *)(a1 + 8);
  if ((v1 & 0x200) == 0)
  {
    if ((v1 & 0x80) != 0)
    {
      sub_2341B13C0(*(_QWORD *)(a1 + 48) + 96, a1 + 8);
    }
    else
    {
      sub_23412A1A8((int *)(a1 + 28));
      v3 = *(_WORD *)(a1 + 8);
      if ((v3 & 0x40) != 0)
      {
        sub_2341AD4F4(a1, 1);
      }
      else
      {
        if ((v3 & 2) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 88) + 24);
          if (v4)
            (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v4 + 72))(v4, sub_2341ADAF4, a1);
          sub_2341AD9C4(a1, 0);
        }
        sub_2341AD5E0(a1);
      }
      sub_23412A174((int *)(a1 + 28));
    }
  }
}

void sub_2341AD9C4(uint64_t a1, int a2)
{
  int v4;
  int *v5;
  BOOL v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_WORD *)(a1 + 8) & 0x800;
  *(_WORD *)(a1 + 8) &= 0xF7FDu;
  v5 = (int *)(a1 + 28);
  sub_23412A1A8((int *)(a1 + 28));
  if (*(_BYTE *)(a1 + 88))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = sub_233C25EA4((_BYTE *)(a1 + 88));
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v7 + 16))(*(_QWORD *)v7) == 2)
    {
      v8 = (uint64_t *)sub_233C25EA4((_BYTE *)(a1 + 88));
      if (*(_BYTE *)(sub_2341CD3C0(*v8) + 57) == 2)
      {
        v9 = (uint64_t *)sub_233C25EA4((_BYTE *)(a1 + 88));
        v10 = sub_2341CD3C0(*v9);
        sub_2341CB7C4(v10);
      }
    }
    v11 = sub_233C25EA4((_BYTE *)(a1 + 88));
    v12 = *(_QWORD *)v11 + 8;
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
    if (v13 != v12)
    {
      do
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v13)
          v15 = v13 - 8;
        else
          v15 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
        v13 = v14;
      }
      while (v14 != v12);
    }
  }
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, a1);
  if (a2 && (*(_WORD *)(a1 + 8) & 0xC2) == 0)
    sub_2341AD5A4(a1);
  sub_23412A174(v5);
}

void sub_2341ADAF4(uint64_t a1, uint64_t a2)
{
  if (a2)
    sub_2341AD9C4(a2, 1);
}

void sub_2341ADB08(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v12;
  BOOL v13;
  int v14;
  _BYTE *v15;
  int *v16;
  int v17;
  _BYTE *v18;
  int v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  NSObject *v30;
  char v31;
  uint64_t buf;
  __int16 v33;
  int v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v12 = (int *)(a1 + 28);
  sub_23412A1A8((int *)(a1 + 28));
  if (*((unsigned __int16 *)a3 + 2) | *((unsigned __int16 *)a3 + 3))
    v13 = 0;
  else
    v13 = *a3 == 16;
  v14 = a4 & 1;
  v15 = sub_233C25EA4((_BYTE *)(a1 + 88));
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)v15 + 72))(*(_QWORD *)v15))
    goto LABEL_16;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56)))
  {
    if ((a4 & 1) == 0 && (a3[8] & 2) != 0 && a3[12])
    {
      v16 = (int *)sub_233C20E2C(a3 + 12);
      sub_2341B0380(a1 + 8, *v16);
    }
    if ((a3[8] & 4) != 0)
      sub_2341B04CC(a1 + 8, a2, a4, &buf);
  }
  if ((*(_WORD *)(a1 + 8) & 0x10) == 0
    || *(_QWORD *)(a1 + 40)
    || (*(_QWORD *)a6 = 0,
        *(_QWORD *)(a6 + 8) = 0,
        *(_QWORD *)(a6 + 16) = 0,
        sub_2341AFEC4(a1 + 8, a6),
        !*(_DWORD *)a6))
  {
    if (v13)
    {
      v17 = 560;
LABEL_18:
      *(_DWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = "src/messaging/ExchangeContext.cpp";
      *(_DWORD *)(a6 + 16) = v17;
      goto LABEL_19;
    }
LABEL_16:
    if ((a4 & 1) != 0)
    {
      v17 = 567;
      goto LABEL_18;
    }
    v18 = sub_233C25EA4((_BYTE *)(a1 + 88));
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v18 + 72))(*(_QWORD *)v18);
    v20 = *(_WORD *)(a1 + 8);
    if (!v19)
      goto LABEL_24;
    if ((*(_WORD *)(a1 + 8) & 0x100) != 0)
    {
      *(_DWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = "src/messaging/ExchangeContext.cpp";
      v29 = 575;
    }
    else
    {
      if ((v20 & 8) == 0)
      {
LABEL_24:
        *(_WORD *)(a1 + 8) = v20 | 0x400;
        if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), *((unsigned int *)a3 + 1), *a3))
        {
          v21 = *(_WORD *)(a1 + 8);
          if ((v21 & 2) != 0)
          {
            v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 88) + 24);
            if (v22)
            {
              (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v22 + 72))(v22, sub_2341ADAF4, a1);
              v21 = *(_WORD *)(a1 + 8);
            }
            *(_WORD *)(a1 + 8) = v21 & 0xF7FD;
          }
          v23 = *(_QWORD *)(a1 + 40);
          if (v23)
          {
            (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v23 + 16))(v23, a1, a3, a5);
            goto LABEL_48;
          }
        }
        v24 = *((_DWORD *)a3 + 1);
        v25 = *a3;
        v26 = sub_234117B80(5u, "ExchangeManager");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v27 = *(unsigned __int16 *)(a1 + 112);
          if ((*(_WORD *)(a1 + 8) & 1) != 0)
            v28 = 105;
          else
            v28 = 114;
          LODWORD(buf) = 67110400;
          HIDWORD(buf) = v25;
          v33 = 1024;
          v34 = (unsigned __int16)v24;
          v35 = 1024;
          v36 = HIWORD(v24);
          v37 = 1024;
          v38 = a2;
          v39 = 1024;
          v40 = v27;
          v41 = 1024;
          v42 = v28;
          _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_ERROR, "Dropping unexpected message of type 0x%x with protocolId (%u, %u) and MessageCounter:%u on exchange %u%c", (uint8_t *)&buf, 0x26u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(5u, 1);
        *(_DWORD *)a6 = 0;
        *(_QWORD *)(a6 + 8) = "src/messaging/ExchangeContext.cpp";
        v29 = 623;
        goto LABEL_47;
      }
      v30 = sub_234117B80(5u, "ExchangeManager");
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_233BF3000, v30, OS_LOG_TYPE_ERROR, "Dropping message without piggyback ack when we are waiting for an ack.", (uint8_t *)&buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(5u, 1);
      *(_DWORD *)a6 = 3;
      *(_QWORD *)(a6 + 8) = "src/messaging/ExchangeContext.cpp";
      v29 = 587;
    }
LABEL_47:
    *(_DWORD *)(a6 + 16) = v29;
  }
LABEL_48:
  if (v14)
    v31 = 1;
  else
    v31 = v13;
  if ((v31 & 1) != 0)
  {
LABEL_19:
    if (*(_QWORD *)(a1 + 40))
      goto LABEL_54;
  }
  if ((*(_WORD *)(a1 + 8) & 0xC2) == 0)
    sub_2341AD5A4(a1);
LABEL_54:
  sub_23412A174(v12);
}

uint64_t *sub_2341ADF28()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2561587A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2561587A8))
  {
    qword_2561587A0 = (uint64_t)&unk_2505139D8;
    __cxa_guard_release(&qword_2561587A8);
  }
  return &qword_2561587A0;
}

uint64_t sub_2341ADF88(uint64_t a1)
{
  char *v1;
  _BYTE *v3;
  char v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t *v7;
  uint64_t result;
  NSObject *v9;
  uint8_t v10[8];
  uint64_t v11;

  v1 = (char *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88)
    && (v3 = sub_233C25EA4((_BYTE *)(a1 + 88)),
        (*(unsigned int (**)(_QWORD))(**(_QWORD **)v3 + 16))(*(_QWORD *)v3) == 2))
  {
    v4 = *v1;
    if (*v1)
    {
      v11 = *(_QWORD *)sub_233C25EA4(v1);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v4 = 1;
    }
    v10[0] = v4;
    *(_WORD *)(a1 + 8) |= 0x200u;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 88);
    v6 = sub_233C25EA4(v1);
    sub_2341CF1EC(v5, *(unsigned __int8 *)(*(_QWORD *)v6 + 24));
    v7 = (uint64_t *)sub_233CB6588(v10);
    result = (uint64_t)sub_2341AE0E0((uint64_t)(v1 - 24), v7);
    *(_WORD *)(a1 + 8) &= ~0x200u;
    if (v10[0])
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  }
  else
  {
    v9 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "AbortAllOtherCommunicationOnFabric called when we don't have a PASE/CASE session", v10, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      return sub_2341147D0(5u, 1);
  }
  return result;
}

_QWORD *sub_2341AE0E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = sub_2341CD3C0(*a2);
  if (*(_BYTE *)(v4 + 56) != 4)
    sub_23425BB28(v4);
  return sub_2341CDA40(a1, a2);
}

void sub_2341AE124(uint64_t a1, void (***a2)(_QWORD))
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_23425BBBC(0);
    v5 = v4;
    *v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

void sub_2341AE1B8(uint64_t a1)
{
  sub_2341CD6AC(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341AE1DC(uint64_t a1)
{
  sub_2341CD6FC((_QWORD *)a1);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_2341AE208(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  if (!(_DWORD)result)
  {
    sub_2341CD6FC((_QWORD *)a1);
    return sub_2341CDA90((_QWORD *)a1, a2);
  }
  return result;
}

uint64_t sub_2341AE258(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

BOOL sub_2341AE268(uint64_t a1, int a2, int a3)
{
  return !a2 && a3 == 16;
}

void sub_2341AE278(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, unsigned int a8@<W7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t *a11)
{
  char v20;
  int v21;
  int v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 v34[2];
  __int16 v35;
  unsigned int v36;
  char v37;
  char v38;
  int v39;

  if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, a8, a10) & 1) == 0)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/messaging/ExchangeMessageDispatch.cpp";
    v22 = 41;
LABEL_11:
    *(_DWORD *)(a9 + 16) = v22;
    return;
  }
  v38 = 0;
  v35 = a4;
  v36 = a8;
  v34[0] = a10;
  v20 = a5 | (16 * ((unsigned __int16)a8 != 0));
  v37 = v20;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 72))(*a3))
    goto LABEL_9;
  if ((*(_WORD *)a6 & 0x20) != 0)
  {
    *(_WORD *)a6 &= ~0x10u;
    v21 = *(_DWORD *)(a6 + 16);
    v38 = 1;
    v39 = v21;
    v20 |= 2u;
    v37 = v20;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1)
    || (*(_WORD *)a6 & 4) == 0
    || !sub_2341AFE98(a6)
    || !a7)
  {
LABEL_9:
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    sub_2341AE510(a2, a3, v34, a11, (_QWORD *)a9);
    if (*(_DWORD *)a9)
      return;
    goto LABEL_10;
  }
  v23 = (uint64_t *)sub_2341AFE98(a6);
  v37 = v20 | 4;
  v33 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)a9 = 0;
  sub_2341B0AD8((uint64_t)v23, (_WORD *)a6, (uint64_t *)&v33, a9);
  if (!*(_DWORD *)a9)
  {
    v24 = v33;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)a9 = 0;
    sub_2341CDFF4(a2, a3, v34, a11, v24 + 1, a9);
    if (*(_DWORD *)a9)
      goto LABEL_18;
    v31 = 0uLL;
    v32 = 0;
    sub_2341CE998(a2, a3, v24 + 1, (uint64_t)&v31);
    v27 = v31;
    v28 = v32;
    sub_2341B121C((uint64_t)&v27, a4, a5, (uint64_t)&v29);
    v25 = v30;
    v32 = v30;
    v31 = v29;
    *(_OWORD *)a9 = v29;
    *(_QWORD *)(a9 + 16) = v25;
    if (*(_DWORD *)a9)
    {
LABEL_18:
      v26 = 1;
      if (v24)
        sub_2341B11F4(v23, v24);
    }
    else
    {
      sub_2341B0D00(v23, (uint64_t)v24);
      v26 = 0;
    }
    if (!v26)
    {
LABEL_10:
      *(_DWORD *)a9 = 0;
      *(_QWORD *)(a9 + 8) = "src/messaging/ExchangeMessageDispatch.cpp";
      v22 = 87;
      goto LABEL_11;
    }
  }
}

void sub_2341AE510(uint64_t a1@<X1>, uint64_t *a2@<X2>, unsigned __int8 *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v8;

  a3[8] &= ~4u;
  v8 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_2341CDFF4(a1, a2, a3, a4, &v8, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_2341CE998(a1, a2, &v8, (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      *(_DWORD *)a5 = 0;
      a5[1] = "src/messaging/ExchangeMessageDispatch.cpp";
      *((_DWORD *)a5 + 4) = 99;
    }
  }
  if (v8)
    sub_23411814C(v8);
}

uint64_t sub_2341AE5CC(uint64_t a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &off_250513A28;
  *(_QWORD *)(a1 + 8) = &unk_250513A58;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 56) = a1 + 48;
  *(_QWORD *)(a1 + 64) = a1 + 48;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_2341B0878(a1 + 96, a1 + 32);
  for (i = 176; i != 304; i += 16)
    *(_DWORD *)(a1 + i) = -1;
  *(_DWORD *)(a1 + 20) = 0;
  return a1;
}

double sub_2341AE648@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t i;
  double result;

  if (*(_DWORD *)(a1 + 20))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/messaging/ExchangeMgr.cpp";
    *(_DWORD *)(a3 + 16) = 63;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a2;
    *(_WORD *)(a1 + 16) = sub_234136B34();
    *(_WORD *)(a1 + 18) = 0;
    for (i = 184; i != 312; i += 16)
      *(_QWORD *)(a1 + i) = 0;
    a2[29] = a1;
    a2[30] = a1 + 8;
    sub_23416E2CC(a1 + 96, a2[3]);
    *(_DWORD *)(a1 + 20) = 1;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/messaging/ExchangeMgr.cpp";
    *(_QWORD *)&result = 61;
    *(_QWORD *)(a3 + 16) = 61;
  }
  return result;
}

uint64_t sub_2341AE6F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_DWORD *)(result + 20))
  {
    v1 = result;
    result = sub_2341B08C8(result + 96);
    v2 = *(_QWORD *)(v1 + 88);
    if (v2)
    {
      *(_QWORD *)(v2 + 232) = 0;
      *(_QWORD *)(v1 + 88) = 0;
    }
    *(_DWORD *)(v1 + 20) = 0;
  }
  return result;
}

void *sub_2341AE734(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned __int16 v6;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  NSObject *v11;
  int v12;
  unsigned __int16 v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint8_t buf[8];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v15 = a3;
  v14 = a4;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 40))(*a2) & 1) != 0)
  {
    *(_QWORD *)buf = a1;
    v6 = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v6 + 1;
    v13 = v6;
    return sub_2341AE8B8((unint64_t *)(a1 + 32), buf, &v13, (uint64_t)a2, &v14, &v15);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 48))(*a2);
    v10 = v9;
    v11 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = sub_2341CD5E0(*a2);
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v12;
      v17 = 1024;
      v18 = HIDWORD(v8);
      v19 = 1024;
      v20 = v8;
      v21 = 1024;
      v22 = v10;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "NewContext failed: session %u to <%08X%08X, %d> is inactive", buf, 0x1Au);
    }
    if (sub_234114844(1u))
    {
      sub_2341CD5E0(*a2);
      sub_2341147D0(5u, 1);
    }
    return 0;
  }
}

void *sub_2341AE8B8(unint64_t *a1, _QWORD *a2, unsigned __int16 *a3, uint64_t a4, unsigned __int8 *a5, _QWORD *a6)
{
  void *v12;
  void *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  v12 = sub_234114774(0x78uLL);
  v13 = v12;
  if (v12)
  {
    sub_2341AD7C4(v12, *a2, *a3, a4, *a5, *a6, 0);
    v14 = sub_234114774(0x18uLL);
    if (v14)
    {
      *v14 = v13;
      v14[1] = a1 + 2;
      v14[2] = 0;
      v14[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v14;
      a1[4] = (unint64_t)v14;
      v15 = a1[1];
      v16 = *a1 + 1;
      *a1 = v16;
      if (v16 > v15)
        a1[1] = v16;
    }
    else
    {
      return 0;
    }
  }
  return v13;
}

int *sub_2341AE980@<X0>(int *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2341AE990(a1, a2, 0xFFFFu, a3, a4);
}

int *sub_2341AE990@<X0>(int *result@<X0>, int a2@<W1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  char v9;
  int v10;
  int v11;

  v6 = 0;
  v7 = 0;
  do
  {
    if (*(_QWORD *)&result[v6 + 46])
    {
      if (LOWORD(result[v6 + 44]) == (unsigned __int16)a2
        && __PAIR64__(LOWORD(result[v6 + 45]), HIWORD(result[v6 + 44])) == __PAIR64__(a3, HIWORD(a2)))
      {
        v10 = 0;
        *(_QWORD *)&result[v6 + 46] = a4;
        v11 = 157;
        goto LABEL_15;
      }
    }
    else if (!v7)
    {
      v7 = (uint64_t)&result[v6 + 44];
    }
    v6 += 4;
  }
  while (v6 != 32);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = a4;
    *(_DWORD *)v7 = a2;
    *(_WORD *)(v7 + 4) = a3;
    v8 = sub_234118AFC();
    v9 = *((_BYTE *)v8 + 5) + 1;
    *((_BYTE *)v8 + 5) = v9;
    result = sub_234118B08();
    if (*((char *)result + 5) >= v9)
    {
      v10 = 0;
    }
    else
    {
      result = sub_234118B08();
      v10 = 0;
      *((_BYTE *)result + 5) = v9;
    }
    v11 = 170;
  }
  else
  {
    v11 = 162;
    v10 = 6;
  }
LABEL_15:
  *(_DWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = "src/messaging/ExchangeMgr.cpp";
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

int *sub_2341AEA90@<X0>(int *a1@<X0>, int a2@<W1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_2341AE990(a1, a2, a3, a4, a5);
}

int *sub_2341AEA98@<X0>(int *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return sub_2341AEAA4(a1, a2, 0xFFFFu, a3);
}

int *sub_2341AEAA4@<X0>(int *result@<X0>, int a2@<W1>, unsigned __int16 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t i;
  int v6;
  int v7;

  for (i = 0; i != 32; i += 4)
  {
    if (*(_QWORD *)&result[i + 46]
      && LOWORD(result[i + 44]) == (unsigned __int16)a2
      && __PAIR64__(LOWORD(result[i + 45]), HIWORD(result[i + 44])) == __PAIR64__(a3, HIWORD(a2)))
    {
      *(_QWORD *)&result[i + 46] = 0;
      result = sub_234118AFC();
      v6 = 0;
      --*((_BYTE *)result + 5);
      v7 = 181;
      goto LABEL_8;
    }
  }
  v7 = 185;
  v6 = 7;
LABEL_8:
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = "src/messaging/ExchangeMgr.cpp";
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

int *sub_2341AEB50@<X0>(int *a1@<X0>, int a2@<W1>, unsigned __int16 a3@<W2>, uint64_t a4@<X8>)
{
  return sub_2341AEAA4(a1, a2, a3, a4);
}

void sub_2341AEB58(unint64_t *a1, int *a2, unsigned __int8 *a3, uint64_t *a4, int a5, uint64_t a6)
{
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  char *v34;
  int v35;
  NSObject *v36;
  char *v37;
  uint64_t v38;
  int *v39;
  void *v40;
  uint64_t v41;
  int *v42;
  NSObject *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  NSObject *v49;
  char *v50;
  NSObject *v51;
  char *v52;
  NSObject *v53;
  char *v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  const char *v59;
  int v60;
  int v61;
  const char *v62;
  const char *v63;
  unsigned __int8 v66;
  unsigned __int16 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL4 v71;
  uint8_t buf[16];
  _BYTE v73[32];
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  char *v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  int v88;
  char v89[8];
  char __str[20];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v63 = sub_234216AC8(*((unsigned int *)a3 + 1));
  v62 = sub_234216B00(*((unsigned int *)a3 + 1), *a3);
  __str[0] = 0;
  if (a3[12])
  {
    v10 = sub_233C20E2C(a3 + 12);
    snprintf(__str, 0x14uLL, " (Ack:%u)", *(_DWORD *)v10);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a4 + 16))(*a4) == 2
    && (v11 = *(_QWORD *)(a1[11] + 32)) != 0
    && (v12 = sub_2341CD3C0(*a4), (v13 = sub_2341E2E70(v11, *(unsigned __int8 *)(v12 + 24))) != 0))
  {
    v14 = *(_QWORD *)(v13 + 16);
  }
  else
  {
    LOWORD(v14) = 0;
  }
  snprintf(v89, 8uLL, "%04X:%02X", *((unsigned __int16 *)a3 + 3), *a3);
  v15 = sub_234117B80(5u, "ExchangeManager");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v61 = *((unsigned __int16 *)a3 + 1);
    if ((a3[8] & 1) != 0)
      v16 = 114;
    else
      v16 = 105;
    v60 = v16;
    v56 = sub_2341CD5E0(*a4);
    v57 = *a2;
    v59 = sub_2341CD660(a4);
    v58 = *(unsigned __int8 *)(*a4 + 24);
    v55 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 48))(*a4) >> 32;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 48))(*a4);
    v18 = *(_DWORD *)(*(_QWORD *)a6 + 16);
    v19 = sub_2341F83C4(a2);
    *(_DWORD *)buf = 67112450;
    *(_DWORD *)&buf[4] = v61;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v60;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)v73 = v56;
    *(_WORD *)&v73[4] = 1024;
    *(_DWORD *)&v73[6] = v57;
    *(_WORD *)&v73[10] = 2080;
    *(_QWORD *)&v73[12] = __str;
    *(_WORD *)&v73[20] = 2080;
    *(_QWORD *)&v73[22] = v59;
    *(_WORD *)&v73[30] = 1024;
    v74 = v58;
    v75 = 1024;
    v76 = v55;
    v77 = 1024;
    v78 = v17;
    v79 = 1024;
    v80 = (unsigned __int16)v14;
    v81 = 2080;
    v82 = v89;
    v83 = 2080;
    v84 = v63;
    v85 = 2080;
    v86 = v62;
    v87 = 1024;
    v88 = v18 + v19 + sub_2341F83FC((uint64_t)a3);
    _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_DEFAULT, ">>> [E:%u%c S:%u M:%u%s] (%s) Msg RX from %u:%08X%08X [%04X] --- Type %s (%s:%s) (B:%u)", buf, 0x6Au);
  }
  if (sub_234114844(2u))
  {
    sub_2341CD5E0(*a4);
    sub_2341CD660(a4);
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 48))(*a4);
    (*(void (**)(uint64_t))(*(_QWORD *)*a4 + 48))(*a4);
    sub_2341F83C4(a2);
    sub_2341F83FC((uint64_t)a3);
    sub_2341147D0(5u, 2);
  }
  v71 = a5 == 0;
  if (*((_BYTE *)a2 + 46) == 1)
  {
    v20 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(unsigned __int16 *)sub_233C05D98((_BYTE *)a2 + 40);
      v22 = *(unsigned __int16 *)sub_233C05D98((_BYTE *)a2 + 40);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v21;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v22;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_DEFAULT, "Received Groupcast Message with GroupId 0x%04X (%d)", buf, 0xEu);
    }
    if (sub_234114844(2u))
    {
      sub_233C05D98((_BYTE *)a2 + 40);
      sub_233C05D98((_BYTE *)a2 + 40);
      sub_2341147D0(5u, 2);
    }
  }
  else
  {
    LOBYTE(v68) = 0;
    *(_QWORD *)buf = a4;
    *(_QWORD *)&buf[8] = a2;
    *(_QWORD *)v73 = a3;
    *(_QWORD *)&v73[8] = &v71;
    *(_QWORD *)&v73[16] = a6;
    *(_QWORD *)&v73[24] = &v68;
    sub_234115DFC(a1 + 6, (uint64_t)buf, (unsigned int (*)(uint64_t))sub_2341AFC4C);
    if ((_BYTE)v68)
      return;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 40))(*a4) & 1) == 0)
  {
    v31 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_DEFAULT, "Dropping message on inactive session that does not match an existing exchange", buf, 2u);
    }
    if (sub_234114844(2u))
    {
      v32 = 2;
LABEL_41:
      sub_2341147D0(5u, v32);
      return;
    }
    return;
  }
  v23 = v71;
  if (v71 || (a3[8] & 1) == 0)
  {
    if ((a3[8] & 4) != 0)
    {
LABEL_57:
      v38 = (uint64_t)a1;
      v39 = a2;
LABEL_58:
      sub_2341AF6D4(v38, v39, (uint64_t)a3, a4, v23, a6);
      return;
    }
    if (!*((_WORD *)a3 + 2) && !*((_WORD *)a3 + 3) && *a3 == 16)
      return;
    v33 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 112;
      *(_QWORD *)&buf[8] = "src/messaging/ExchangeMgr.cpp";
      *(_DWORD *)v73 = 319;
      v34 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v34;
      _os_log_impl(&dword_233BF3000, v33, OS_LOG_TYPE_ERROR, "OnMessageReceived failed, err = %s", buf, 0xCu);
    }
    if (!sub_234114844(1u))
      return;
    *(_DWORD *)buf = 112;
    *(_QWORD *)&buf[8] = "src/messaging/ExchangeMgr.cpp";
    v35 = 319;
LABEL_81:
    *(_DWORD *)v73 = v35;
    goto LABEL_82;
  }
  v24 = 0;
  v25 = 0;
  do
  {
    v26 = &a1[v24];
    if (a1[v24 + 23])
    {
      v28 = *((_DWORD *)v26 + 44);
      v27 = (uint64_t)(v26 + 22);
      v29 = HIWORD(v28);
      if (*((unsigned __int16 *)a3 + 2) == (unsigned __int16)v28 && *((unsigned __int16 *)a3 + 3) == v29)
      {
        if (WORD2(a1[v24 + 22]) == *a3)
        {
          v25 = (uint64_t)&a1[v24 + 22];
          goto LABEL_51;
        }
        if (WORD2(a1[v24 + 22]) == 0xFFFF)
          v25 = v27;
      }
    }
    v24 += 2;
  }
  while (v24 != 16);
  if (!v25)
    goto LABEL_57;
LABEL_51:
  v70 = 0;
  v69 = 0;
  v68 = 0uLL;
  (*(void (**)(__int128 *__return_ptr, _QWORD, unsigned __int8 *, uint64_t *, uint64_t *))(**(_QWORD **)(v25 + 8)
                                                                                                  + 16))(&v68, *(_QWORD *)(v25 + 8), a3, a4, &v70);
  if ((_DWORD)v68)
  {
    v36 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v68;
      *(_QWORD *)v73 = v69;
      v37 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v37;
      _os_log_impl(&dword_233BF3000, v36, OS_LOG_TYPE_ERROR, "OnMessageReceived failed, err = %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v68;
      *(_QWORD *)v73 = v69;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(5u, 1);
    }
    v23 = v71;
    goto LABEL_57;
  }
  *(_QWORD *)buf = a1;
  v67 = *((_WORD *)a3 + 1);
  v66 = 0;
  v40 = sub_2341AE8B8(a1 + 4, buf, &v67, (uint64_t)a4, &v66, &v70);
  if (!v40)
  {
    if (v70)
      (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 8) + 32))(*(_QWORD *)(v25 + 8));
    v51 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 11;
      *(_QWORD *)&buf[8] = "src/messaging/ExchangeMgr.cpp";
      *(_DWORD *)v73 = 349;
      v52 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v52;
      _os_log_impl(&dword_233BF3000, v51, OS_LOG_TYPE_ERROR, "OnMessageReceived failed, err = %s", buf, 0xCu);
    }
    if (!sub_234114844(1u))
      return;
    *(_DWORD *)buf = 11;
    *(_QWORD *)&buf[8] = "src/messaging/ExchangeMgr.cpp";
    v35 = 349;
    goto LABEL_81;
  }
  v41 = (uint64_t)v40;
  v42 = a2;
  v43 = sub_234117B80(5u, "ExchangeManager");
  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    v44 = *(unsigned __int16 *)(v41 + 112);
    v45 = sub_2341AD080(v41);
    v46 = *(_QWORD *)(v41 + 40);
    *(_DWORD *)buf = 67109632;
    if (v45)
      v47 = 105;
    else
      v47 = 114;
    *(_DWORD *)&buf[4] = v44;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v47;
    *(_WORD *)&buf[14] = 2048;
    *(_QWORD *)v73 = v46;
    _os_log_impl(&dword_233BF3000, v43, OS_LOG_TYPE_INFO, "Handling via exchange: %u%c, Delegate: %p", buf, 0x18u);
  }
  if (sub_234114844(3u))
  {
    sub_2341AD080(v41);
    sub_2341147D0(5u, 3);
  }
  v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v41 + 56) + 16))(*(_QWORD *)(v41 + 56));
  if (!*((_WORD *)v42 + 22))
  {
    if (v48 == (*((_BYTE *)v42 + 46) != 0))
      goto LABEL_70;
LABEL_84:
    v53 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 42;
      *(_QWORD *)&buf[8] = "src/messaging/ExchangeMgr.cpp";
      *(_DWORD *)v73 = 360;
      v54 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v54;
      _os_log_impl(&dword_233BF3000, v53, OS_LOG_TYPE_ERROR, "OnMessageReceived failed, err = %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_DWORD *)buf = 42;
      *(_QWORD *)&buf[8] = "src/messaging/ExchangeMgr.cpp";
      *(_DWORD *)v73 = 360;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(5u, 1);
    }
    sub_2341AD5A4(v41);
    v23 = v71;
    v38 = (uint64_t)a1;
    v39 = v42;
    goto LABEL_58;
  }
  if ((v48 & 1) == 0)
    goto LABEL_84;
LABEL_70:
  sub_2341ADB08(v41, *v42, a3, v71, a6, (uint64_t)buf);
  v68 = *(_OWORD *)buf;
  v69 = *(_QWORD *)v73;
  if (*(_DWORD *)buf)
  {
    v49 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v68;
      *(_QWORD *)v73 = v69;
      v50 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v50;
      _os_log_impl(&dword_233BF3000, v49, OS_LOG_TYPE_ERROR, "OnMessageReceived failed, err = %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v68;
      *(_QWORD *)v73 = v69;
LABEL_82:
      sub_2341083CC((const char **)buf, 1);
      v32 = 1;
      goto LABEL_41;
    }
  }
}

void sub_2341AF6D4(uint64_t a1, int *a2, uint64_t a3, _QWORD *a4, char a5, uint64_t a6)
{
  char v12;
  unsigned __int16 *v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  int v17;
  NSObject *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  unsigned __int8 v23;
  BOOL v24;
  unsigned __int16 v25;
  uint8_t buf[16];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a4 + 72))(*a4))
  {
    v12 = *(_BYTE *)(a3 + 8);
    if ((v12 & 4) != 0)
    {
      *(_QWORD *)buf = a1;
      v25 = *(_WORD *)(a3 + 2);
      v24 = (v12 & 1) == 0;
      *(_QWORD *)&v21 = 0;
      v23 = 1;
      v13 = (unsigned __int16 *)sub_2341AF9D8((unint64_t *)(a1 + 32), buf, &v25, (uint64_t)a4, (unsigned __int8 *)&v24, (uint64_t)&v21, &v23);
      v14 = sub_234117B80(5u, "ExchangeManager");
      v15 = v14;
      if (v13)
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v16 = v13[56];
          if (sub_2341AD080((uint64_t)v13))
            v17 = 105;
          else
            v17 = 114;
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v16;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v17;
          _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_INFO, "Generating StandaloneAck via exchange: %u%c", buf, 0xEu);
        }
        if (sub_234114844(3u))
        {
          sub_2341AD080((uint64_t)v13);
          sub_2341147D0(5u, 3);
        }
        v21 = 0uLL;
        v22 = 0;
        sub_2341ADB08((uint64_t)v13, *a2, (unsigned __int8 *)a3, a5, a6, (uint64_t)&v21);
        if ((_DWORD)v21)
        {
          v18 = sub_234117B80(5u, "ExchangeManager");
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = v21;
            v27 = v22;
            v19 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v19;
            _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_ERROR, "OnMessageReceived failed, err = %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = v21;
            v27 = v22;
LABEL_20:
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(5u, 1);
          }
        }
      }
      else
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 11;
          *(_QWORD *)&buf[8] = "src/messaging/ExchangeMgr.cpp";
          LODWORD(v27) = 397;
          v20 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v20;
          _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "OnMessageReceived failed, err = %s", buf, 0xCu);
        }
        if (sub_234114844(1u))
        {
          *(_DWORD *)buf = 11;
          *(_QWORD *)&buf[8] = "src/messaging/ExchangeMgr.cpp";
          LODWORD(v27) = 397;
          goto LABEL_20;
        }
      }
    }
  }
}

void *sub_2341AF9D8(unint64_t *a1, _QWORD *a2, unsigned __int16 *a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7)
{
  void *v13;
  void *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;

  v13 = sub_234114774(0x78uLL);
  v14 = v13;
  if (v13)
  {
    sub_2341AD7C4(v13, *a2, *a3, a4, *a5, 0, *a7);
    v15 = sub_234114774(0x18uLL);
    if (v15)
    {
      *v15 = v14;
      v15[1] = a1 + 2;
      v15[2] = 0;
      v15[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v15;
      a1[4] = (unint64_t)v15;
      v16 = a1[1];
      v17 = *a1 + 1;
      *a1 = v17;
      if (v17 > v16)
        a1[1] = v17;
    }
    else
    {
      return 0;
    }
  }
  return v14;
}

uint64_t sub_2341AFAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = a2;
  v4 = &v3;
  return sub_234115DFC((_QWORD *)(a1 + 48), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_2341AFDB8);
}

uint64_t sub_2341AFAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_234115DFC((_QWORD *)(a1 + 48), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_2341AFDEC);
}

uint64_t sub_2341AFB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_234115DFC((_QWORD *)(a1 + 40), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_2341AFDEC);
}

_QWORD *sub_2341AFB34(_QWORD *a1)
{
  *a1 = &off_250513A28;
  a1[1] = &unk_250513A58;
  sub_2341B08A0((uint64_t)(a1 + 12));
  sub_23411A8FC(a1 + 4);
  return a1;
}

void sub_2341AFB70(_QWORD *a1)
{
  *a1 = &off_250513A28;
  a1[1] = &unk_250513A58;
  sub_2341B08A0((uint64_t)(a1 + 12));
  sub_23411A8FC(a1 + 4);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_2341AFBBC(_QWORD *a1)
{
  *(a1 - 1) = &off_250513A28;
  *a1 = &unk_250513A58;
  sub_2341B08A0((uint64_t)(a1 + 11));
  return sub_23411A8FC(a1 + 3);
}

void sub_2341AFBF4(_QWORD *a1)
{
  *(a1 - 1) = &off_250513A28;
  *a1 = &unk_250513A58;
  sub_2341B08A0((uint64_t)(a1 + 11));
  sub_23411A8FC(a1 + 3);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341AFC4C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  result = sub_2341AD868(a2, *(_QWORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
  {
    v5 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(unsigned __int16 *)(a2 + 112);
      v7 = sub_2341AD080(a2);
      v8 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)buf = 67109632;
      if (v7)
        v9 = 105;
      else
        v9 = 114;
      v11 = v6;
      v12 = 1024;
      v13 = v9;
      v14 = 2048;
      v15 = v8;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_INFO, "Found matching exchange: %u%c, Delegate: %p", buf, 0x18u);
    }
    if (sub_234114844(3u))
    {
      sub_2341AD080(a2);
      sub_2341147D0(5u, 3);
    }
    sub_2341ADB08(a2, **(_DWORD **)(a1 + 8), *(unsigned __int8 **)(a1 + 16), **(_DWORD **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)buf);
    result = 1;
    **(_BYTE **)(a1 + 40) = 1;
  }
  return result;
}

uint64_t sub_2341AFDB8(_QWORD **a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 40) == **a1)
  {
    *(_QWORD *)(a2 + 40) = 0;
    sub_2341AD5A4(a2);
  }
  return 0;
}

uint64_t sub_2341AFDEC(uint64_t **a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;

  if (a2[88])
  {
    sub_233CB4208((uint64_t)a2, &v9);
    v4 = v9;
    v5 = **a1;
    (*(void (**)(_QWORD))(*(_QWORD *)v9 + 32))(v9);
    if (v4 == v5)
    {
      v6 = a1[1];
      v7 = v6[2];
      v9 = *(_OWORD *)v6;
      v10 = v7;
      (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)a2 + 40))(a2, &v9);
    }
  }
  return 0;
}

uint64_t sub_2341AFE80(uint64_t result)
{
  *(_WORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_2341AFE90(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_2341AFE98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) + 96;
}

_WORD *sub_2341AFEA4(_WORD *result, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *result = *result & 0xFFF7 | v2;
  return result;
}

void sub_2341AFEC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a2 = xmmword_250513AC8;
  *(_QWORD *)(a2 + 16) = 63;
  if ((*(_BYTE *)a1 & 0x10) != 0)
  {
    sub_2341B0020(a1, a2);
    if (!*(_DWORD *)a2)
    {
      v4 = sub_234117B80(5u, "ExchangeManager");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_DWORD *)(a1 + 16);
        v6 = *(unsigned __int16 *)(a1 + 104);
        *(_DWORD *)buf = 67109632;
        v9 = v5;
        if (sub_2341AD080(a1 - 8))
          v7 = 105;
        else
          v7 = 114;
        v10 = 1024;
        v11 = v6;
        v12 = 1024;
        v13 = v7;
        _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Flushed pending ack for MessageCounter:%u on exchange %u%c", buf, 0x14u);
      }
      if (sub_234114844(3u))
      {
        sub_2341AD080(a1 - 8);
        sub_2341147D0(5u, 3);
      }
    }
  }
}

void sub_2341B0020(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE buf[30];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_234118674(0x10uLL, 0x26u, &v19);
  if (v19)
  {
    v17 = 0uLL;
    v18 = 0;
    *(_WORD *)buf = 2;
    sub_2341AD108(a1 - 8, 0, 16, &v19, buf, (uint64_t)&v17);
    v15 = v17;
    v16 = v18;
    if (sub_2341ACF84((unsigned int *)&v15))
    {
      v4 = sub_234117B80(5u, "ExchangeManager");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v17;
        *(_QWORD *)&buf[16] = v18;
        v5 = sub_2341083CC((const char **)buf, 1);
        v6 = *(_DWORD *)(a1 + 16);
        v7 = *(unsigned __int16 *)(a1 + 104);
        v8 = sub_2341AD080(a1 - 8);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v5;
        if (v8)
          v9 = 105;
        else
          v9 = 114;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v6;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v7;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v9;
        _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Non-crit err %s sending solitary ack for MessageCounter:%u on exchange %u%c", buf, 0x1Eu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v17;
        *(_QWORD *)&buf[16] = v18;
        sub_2341083CC((const char **)buf, 1);
        sub_2341AD080(a1 - 8);
        sub_2341147D0(5u, 1);
      }
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = "src/messaging/ReliableMessageContext.cpp";
      *(_DWORD *)(a2 + 16) = 193;
    }
    else
    {
      if ((_DWORD)v17)
      {
        v10 = sub_234117B80(5u, "ExchangeManager");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v11 = *(_DWORD *)(a1 + 16);
          v12 = *(unsigned __int16 *)(a1 + 104);
          if (sub_2341AD080(a1 - 8))
            v13 = 105;
          else
            v13 = 114;
          *(_OWORD *)buf = v17;
          *(_QWORD *)&buf[16] = v18;
          v14 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v11;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v12;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v13;
          *(_WORD *)&buf[20] = 2080;
          *(_QWORD *)&buf[22] = v14;
          _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed to send Solitary ack for MessageCounter:%u on exchange %u%c:%s", buf, 0x1Eu);
        }
        if (sub_234114844(1u))
        {
          sub_2341AD080(a1 - 8);
          *(_OWORD *)buf = v17;
          *(_QWORD *)&buf[16] = v18;
          sub_2341083CC((const char **)buf, 1);
          sub_2341147D0(5u, 1);
        }
      }
      *(_OWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v18;
    }
    if (v19)
      sub_23411814C(v19);
  }
  else
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/messaging/ReliableMessageContext.cpp";
    *(_DWORD *)(a2 + 16) = 182;
  }
}

uint64_t sub_2341B0380(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v5;
  int v6;
  int v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  result = sub_2341B0DD4(*(_QWORD *)(a1 + 40) + 96, a1, a2);
  if ((_DWORD)result)
  {
    *(_WORD *)a1 &= ~0x800u;
  }
  else
  {
    v5 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(unsigned __int16 *)(a1 + 104);
      *(_DWORD *)buf = 67109632;
      v9 = a2;
      if (sub_2341AD080(a1 - 8))
        v7 = 105;
      else
        v7 = 114;
      v10 = 1024;
      v11 = v6;
      v12 = 1024;
      v13 = v7;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_INFO, "CHIP MessageCounter:%u not in RetransTable on exchange %u%c", buf, 0x14u);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
    {
      sub_2341AD080(a1 - 8);
      return sub_2341147D0(5u, 3);
    }
  }
  return result;
}

_QWORD *sub_2341B04CC@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341B0500(a1, a2, a3, a4);
  return sub_2341B09F0((uint64_t *)(*(_QWORD *)(a1 + 40) + 96));
}

void sub_2341B0500(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  __int16 v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) != 0)
  {
    v12 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = *(unsigned __int16 *)(a1 + 104);
      *(_DWORD *)buf = 67109632;
      v18 = a2;
      if (sub_2341AD080(a1 - 8))
        v14 = 105;
      else
        v14 = 114;
      v19 = 1024;
      v20 = v13;
      v21 = 1024;
      v22 = v14;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "Forcing tx of solitary ack for duplicate MessageCounter:%u on exchange %u%c", buf, 0x14u);
    }
    if (sub_234114844(3u))
    {
      sub_2341AD080(a1 - 8);
      sub_2341147D0(5u, 3);
    }
    v15 = *(_WORD *)a1;
    v16 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = a2;
    *(_WORD *)a1 = v15 | 0x30;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    sub_2341B0020(a1, (uint64_t)a4);
    if ((v15 & 0x10) == 0 || v16 == a2)
    {
      if ((v15 & 0x20) != 0)
        *(_DWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v16;
      *(_WORD *)a1 |= 0x30u;
    }
  }
  else
  {
    v7 = *(_WORD *)a1;
    if ((*(_WORD *)a1 & 0x10) == 0)
    {
LABEL_12:
      *(_DWORD *)(a1 + 16) = a2;
      *(_WORD *)a1 = v7 | 0x30;
      *(_QWORD *)(a1 + 8) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10)
                          + 200;
      *(_DWORD *)a4 = 0;
      a4[1] = "src/messaging/ReliableMessageContext.cpp";
      *((_DWORD *)a4 + 4) = 173;
      return;
    }
    v8 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(_DWORD *)(a1 + 16);
      v10 = *(unsigned __int16 *)(a1 + 104);
      *(_DWORD *)buf = 67109632;
      v18 = v9;
      if (sub_2341AD080(a1 - 8))
        v11 = 105;
      else
        v11 = 114;
      v19 = 1024;
      v20 = v10;
      v21 = 1024;
      v22 = v11;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Pending ack queue full; forcing tx of solitary ack for MessageCounter:%u on exchange %u%c",
        buf,
        0x14u);
    }
    if (sub_234114844(3u))
    {
      sub_2341AD080(a1 - 8);
      sub_2341147D0(5u, 3);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_2341B0020(a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      v7 = *(_WORD *)a1;
      goto LABEL_12;
    }
  }
}

uint64_t sub_2341B07C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  *(_WORD *)result |= 0x30u;
  return result;
}

uint64_t sub_2341B07D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_2341AFE90(a2);
  *(_QWORD *)a1 = v3;
  sub_23412A1A8((int *)(v3 + 28));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_2341AFEA4((_WORD *)(*(_QWORD *)a1 + 8), 1);
  return a1;
}

_QWORD *sub_2341B0828(_QWORD *a1)
{
  uint64_t v2;

  sub_2341AFEA4((_WORD *)(*a1 + 8), 0);
  v2 = a1[1];
  if (v2)
    sub_23411814C(v2);
  a1[1] = 0;
  sub_23412A174((int *)(*a1 + 28));
  return a1;
}

double sub_2341B0878(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = a1 + 32;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_2341B08A0(uint64_t a1)
{
  sub_2341B14B0((_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_2341B08C8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t *), uint64_t))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), sub_2341B09BC, a1);
  v3 = a1;
  result = sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)&v3, (unsigned int (*)(uint64_t))sub_2341B14DC);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_2341B0924(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t *), uint64_t))(**(_QWORD **)(a1 + 8)
                                                                                                + 72))(*(_QWORD *)(a1 + 8), sub_2341B09BC, a1);
}

uint64_t sub_2341B0940(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t *v5;
  _QWORD v6[2];

  v4 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  v5 = &v4;
  v2 = *a1;
  v6[0] = &v5;
  sub_234115DFC((_QWORD *)(v2 + 16), (uint64_t)v6, (unsigned int (*)(uint64_t))sub_2341B14FC);
  v6[0] = &v4;
  v6[1] = a1;
  return sub_234115DFC(a1 + 4, (uint64_t)v6, (unsigned int (*)(uint64_t))sub_2341B1548);
}

uint64_t sub_2341B09BC(uint64_t a1, uint64_t *a2)
{
  if (!a1 || !a2)
    sub_23425BC50(a1);
  sub_2341B0940(a2);
  return sub_2341B09F0(a2);
}

_QWORD *sub_2341B09F0(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *result;
  unint64_t v4;
  unsigned int v5;
  _QWORD v6[3];
  unint64_t v7;
  unint64_t *v8;

  v7 = -1;
  v8 = &v7;
  v2 = *a1;
  v6[0] = &v8;
  sub_234115DFC((_QWORD *)(v2 + 16), (uint64_t)v6, (unsigned int (*)(uint64_t))sub_2341B1ABC);
  v6[0] = &v7;
  sub_234115DFC(a1 + 4, (uint64_t)v6, (unsigned int (*)(uint64_t))sub_2341B1AE8);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t *), uint64_t *))(*(_QWORD *)a1[1] + 72))(a1[1], sub_2341B09BC, a1);
  if (v7 != -1)
  {
    v4 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    v5 = v7 - v4;
    if (v7 < v4)
      v5 = 0;
    result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t (*)(uint64_t, uint64_t *), uint64_t *))(*(_QWORD *)a1[1] + 40))(v6, a1[1], v5, sub_2341B09BC, a1);
    if (LODWORD(v6[0]))
      sub_23425BCE4((uint64_t)result);
  }
  return result;
}

uint64_t sub_2341B0AD8@<X0>(uint64_t result@<X0>, _WORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  int v7;
  NSObject *v8;
  uint8_t v9[8];
  _WORD *v10;

  v10 = a2;
  if ((*a2 & 8) != 0)
  {
    v7 = 204;
    v6 = 3;
  }
  else
  {
    result = (uint64_t)sub_2341B0BBC((unint64_t *)(result + 16), (uint64_t *)&v10);
    *a3 = result;
    if (result)
    {
      v6 = 0;
      v7 = 213;
    }
    else
    {
      v8 = sub_234117B80(5u, "ExchangeManager");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "mRetransTable Already Full", v9, 2u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        result = sub_2341147D0(5u, 1);
      v7 = 210;
      v6 = 100;
    }
  }
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = "src/messaging/ReliableMessageMgr.cpp";
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

void *sub_2341B0BBC(unint64_t *a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v4 = sub_234114774(0x20uLL);
  v5 = v4;
  if (v4)
  {
    sub_2341B07D8((uint64_t)v4, *a2);
    v6 = sub_234114774(0x18uLL);
    if (v6)
    {
      *v6 = v5;
      v6[1] = a1 + 2;
      v6[2] = 0;
      v6[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v6;
      a1[4] = (unint64_t)v6;
      v7 = a1[1];
      v8 = *a1 + 1;
      *a1 = v8;
      if (v8 > v7)
        a1[1] = v8;
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_2341B0C50(unsigned int a1, int a2, char a3)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a2 <= 1)
    v4 = 1;
  else
    v4 = a2;
  if (v4 >= 5)
    v4 = 5;
  if (v4 >= 2)
  {
    v5 = v4 - 1;
    LODWORD(v6) = 1;
    LODWORD(v7) = 1;
    do
    {
      v6 = (16 * v6);
      v7 = (10 * v7);
      --v5;
    }
    while (v5);
    if ((a3 & 1) != 0)
      goto LABEL_10;
LABEL_12:
    v8 = sub_234136B70() | 0x400;
    return dword_25615DDB8 + ((((1127 * (unint64_t)a1) >> 10) * v6 / v7 * v8) >> 10);
  }
  v7 = 1;
  v6 = 1;
  if ((a3 & 1) == 0)
    goto LABEL_12;
LABEL_10:
  v8 = 1279;
  return dword_25615DDB8 + ((((1127 * (unint64_t)a1) >> 10) * v6 / v7 * v8) >> 10);
}

_QWORD *sub_2341B0D00(uint64_t *a1, uint64_t a2)
{
  sub_2341B0D24((uint64_t)a1, a2);
  return sub_2341B09F0(a1);
}

unint64_t sub_2341B0D24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  if ((*(_WORD *)(*(_QWORD *)a2 + 8) & 0x400) != 0)
  {
    sub_233CB4208(v3, &v7);
    v4 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7) + 4);
  }
  else
  {
    sub_233CB4208(v3, &v7);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v5 = sub_2341B0C50(v4, *(unsigned __int8 *)(a2 + 24), 0);
  result = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  *(_QWORD *)(a2 + 16) = result + v5;
  return result;
}

uint64_t sub_2341B0DD4(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  _QWORD v7[4];

  v5 = a3;
  v4 = 0;
  v6 = a2;
  v7[0] = &v6;
  v7[1] = &v5;
  v7[2] = a1;
  v7[3] = &v4;
  sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)v7, (unsigned int (*)(uint64_t))sub_2341B18BC);
  return v4;
}

void sub_2341B0E28(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  _BYTE buf[24];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  if (*(_BYTE *)(*a2 + 88))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 88);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_233CB4208(v6, buf);
    sub_2341CE998(v7, (uint64_t *)buf, a2 + 1, (uint64_t)a3);
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
    v23 = *(_OWORD *)a3;
    v24 = a3[2];
    LODWORD(v7) = *(unsigned __int16 *)(*a2 + 112);
    v8 = sub_2341AD080(*a2);
    sub_2341B121C((uint64_t)&v23, v7, v8, (uint64_t)buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    a3[2] = *(_QWORD *)&buf[16];
    if (*(_DWORD *)a3)
    {
      v9 = sub_234117B80(5u, "ExchangeManager");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = *(_OWORD *)a3;
        *(_QWORD *)&buf[16] = a3[2];
        v10 = sub_2341083CC((const char **)buf, 1);
        v11 = sub_2341CDB6C((uint64_t)(a2 + 1));
        v12 = *(unsigned __int16 *)(*a2 + 112);
        v13 = sub_2341AD080(*a2);
        v14 = *((unsigned __int8 *)a2 + 24);
        *(_DWORD *)buf = 136316162;
        if (v13)
          v15 = 105;
        else
          v15 = 114;
        *(_QWORD *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v12;
        v26 = 1024;
        v27 = v15;
        v28 = 1024;
        v29 = v14;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Crit-err %s when sending CHIP MessageCounter:%u on exchange %u%c, send tries: %d", buf, 0x24u);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = *(_OWORD *)a3;
        *(_QWORD *)&buf[16] = a3[2];
        sub_2341083CC((const char **)buf, 1);
        sub_2341CDB6C((uint64_t)(a2 + 1));
        sub_2341AD080(*a2);
        sub_2341147D0(5u, 1);
      }
      sub_2341B13F8(a1 + 16, a2);
      sub_2341B09F0(a1);
    }
  }
  else
  {
    v16 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 3;
      *(_QWORD *)&buf[8] = "src/messaging/ReliableMessageMgr.cpp";
      *(_DWORD *)&buf[16] = 314;
      v17 = sub_2341083CC((const char **)buf, 1);
      v18 = sub_2341CDB6C((uint64_t)(a2 + 1));
      v19 = *(unsigned __int16 *)(*a2 + 112);
      v20 = sub_2341AD080(*a2);
      v21 = *((unsigned __int8 *)a2 + 24);
      *(_DWORD *)buf = 136316162;
      if (v20)
        v22 = 105;
      else
        v22 = 114;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v18;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v19;
      v26 = 1024;
      v27 = v22;
      v28 = 1024;
      v29 = v21;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Crit-err %s when sending CHIP MessageCounter:%u on exchange %u%c, send tries: %d", buf, 0x24u);
    }
    if (sub_234114844(1u))
    {
      *(_DWORD *)buf = 3;
      *(_QWORD *)&buf[8] = "src/messaging/ReliableMessageMgr.cpp";
      *(_DWORD *)&buf[16] = 314;
      sub_2341083CC((const char **)buf, 1);
      sub_2341CDB6C((uint64_t)(a2 + 1));
      sub_2341AD080(*a2);
      sub_2341147D0(5u, 1);
    }
    sub_2341B13F8(a1 + 16, a2);
    sub_2341B09F0(a1);
    *(_DWORD *)a3 = 3;
    a3[1] = "src/messaging/ReliableMessageMgr.cpp";
    *((_DWORD *)a3 + 4) = 316;
  }
}

_QWORD *sub_2341B11F4(uint64_t *a1, _QWORD *a2)
{
  sub_2341B13F8((uint64_t)(a1 + 2), a2);
  return sub_2341B09F0(a1);
}

__n128 sub_2341B121C@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  char *v9;
  int v10;
  __n128 result;
  _BYTE buf[24];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_234117EFC(55, "src/messaging/ReliableMessageMgr.cpp", 440, (uint64_t)buf);
  if (*(_DWORD *)a1 == *(_DWORD *)buf)
  {
    v8 = sub_234117B80(5u, "ExchangeManager");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a1;
      *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 16);
      v9 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v9;
      if (a3)
        v10 = 105;
      else
        v10 = 114;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v10;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Ignoring transient send error: %s on exchange %u%c", buf, 0x18u);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = *(_OWORD *)a1;
      *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 16);
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(5u, 1);
    }
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = "src/messaging/ReliableMessageMgr.cpp";
    *(_DWORD *)(a1 + 16) = 456;
  }
  result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_2341B13C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[2];

  v3 = a2;
  v4[0] = &v3;
  v4[1] = a1;
  return sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_2341B1A6C);
}

void sub_2341B13F8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_23425BBBC(0);
    v5 = v4;
    *v4 = 0;
    v6 = sub_2341B0828(a2);
    j__free(v6);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

uint64_t sub_2341B1480(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

unsigned __int8 *sub_2341B1488(unsigned __int8 *result)
{
  int v1;

  v1 = *result;
  if (*result)
  {
    result = sub_23412A1D8(result);
    v1 = *(_DWORD *)result;
  }
  dword_25615DDB8 = v1;
  return result;
}

_QWORD *sub_2341B14B0(_QWORD *result)
{
  if (!byte_25615DDA8)
  {
    if (*result)
      sub_23425BD78((uint64_t)result);
  }
  return result;
}

uint64_t sub_2341B14DC(_QWORD *a1, _QWORD *a2)
{
  sub_2341B13F8(*a1 + 16, a2);
  return 0;
}

uint64_t sub_2341B14FC(_QWORD ***a1, uint64_t a2)
{
  _QWORD v3[3];

  if ((*(_WORD *)(a2 + 8) & 0x10) != 0 && ***a1 >= *(_QWORD *)(a2 + 16))
    sub_2341B0020(v3, a2 + 8);
  return 0;
}

uint64_t sub_2341B1548(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int *v7;
  NSObject *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint8_t buf[8];
  const char *v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (**(_QWORD **)a1 >= *(_QWORD *)(a2 + 16))
  {
    if (!*(_QWORD *)(a2 + 8))
      sub_23425BE0C(a1);
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(unsigned __int8 *)(a2 + 24);
    v5 = sub_2341CDB6C(a2 + 8);
    if (v4 == 4)
    {
      v6 = *(_QWORD *)a2;
      v7 = (int *)(*(_QWORD *)a2 + 28);
      sub_23412A1A8(v7);
      v8 = sub_234117B80(5u, "ExchangeManager");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = *(unsigned __int16 *)(v6 + 112);
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)&buf[4] = v5;
        if (sub_2341AD080(v6))
          v10 = 105;
        else
          v10 = 114;
        LOWORD(v25) = 1024;
        *(_DWORD *)((char *)&v25 + 2) = v9;
        HIWORD(v25) = 1024;
        v26 = v10;
        v27 = 1024;
        v28 = 4;
        v29 = 1024;
        v30 = 4;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Failed to Send CHIP MessageCounter:%u on exchange %u%c sendCount: %u max retries: %d", buf, 0x20u);
      }
      if (sub_234114844(1u))
      {
        sub_2341AD080(v6);
        sub_2341147D0(5u, 1);
      }
      sub_233CB4208(v6, buf);
      if ((sub_2341AD08C(v6) & 1) == 0)
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)buf + 16))(*(_QWORD *)buf) == 2
          && *(_BYTE *)(sub_2341CD3C0(*(uint64_t *)buf) + 57) == 2)
        {
          v11 = sub_2341CD3C0(*(uint64_t *)buf);
          sub_2341CB7C4(v11);
        }
        v12 = *(_QWORD *)buf + 8;
        v13 = *(_QWORD *)(*(_QWORD *)buf + 16);
        if (v13 != *(_QWORD *)buf + 8)
        {
          do
          {
            v14 = *(_QWORD *)(v13 + 8);
            if (v13)
              v15 = v13 - 8;
            else
              v15 = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
            v13 = v14;
          }
          while (v14 != v12);
        }
      }
      sub_2341B13F8(v3 + 16, (_QWORD *)a2);
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
      sub_23412A174(v7);
    }
    else
    {
      ++*(_BYTE *)(a2 + 24);
      v16 = sub_234117B80(5u, "ExchangeManager");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(unsigned __int16 *)(*(_QWORD *)a2 + 112);
        v18 = sub_2341AD080(*(_QWORD *)a2);
        v19 = *(unsigned __int8 *)(a2 + 24);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v5;
        if (v18)
          v20 = 105;
        else
          v20 = 114;
        LOWORD(v25) = 1024;
        *(_DWORD *)((char *)&v25 + 2) = v17;
        HIWORD(v25) = 1024;
        v26 = v20;
        v27 = 1024;
        v28 = v19;
        _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Retransmitting MessageCounter:%u on exchange %u%c Send Cnt %d", buf, 0x1Au);
      }
      if (sub_234114844(2u))
      {
        sub_2341AD080(*(_QWORD *)a2);
        sub_2341147D0(5u, 2);
      }
      v21 = *(unsigned __int8 *)(a2 + 24);
      *(_DWORD *)buf = 2;
      v25 = "core_dev_rmp_retry_count";
      v26 = v21;
      LOBYTE(v27) = 2;
      v22 = sub_2341C4BEC((uint64_t)buf);
      sub_2341B0D24(v22, a2);
      sub_2341B0E28(v3, (uint64_t *)a2, buf);
    }
  }
  return 0;
}

uint64_t sub_2341B18BC(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*a2 + 8 != **(_QWORD **)a1)
    return 0;
  v4 = *(uint64_t **)(a1 + 16);
  if (sub_2341CDB6C((uint64_t)(a2 + 1)) != **(_DWORD **)(a1 + 8))
    return 0;
  sub_2341B13F8((uint64_t)(v4 + 2), a2);
  sub_2341B09F0(v4);
  v5 = sub_234117B80(5u, "ExchangeManager");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = **(_DWORD **)(a1 + 8);
    v7 = *(unsigned __int16 *)(sub_2341AFE90(**(_QWORD **)a1) + 112);
    v8 = sub_2341AFE90(**(_QWORD **)a1);
    *(_DWORD *)buf = 67109632;
    v13 = v6;
    if (sub_2341AD080(v8))
      v9 = 105;
    else
      v9 = 114;
    v14 = 1024;
    v15 = v7;
    v16 = 1024;
    v17 = v9;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_INFO, "Rxd Ack; Removing MessageCounter:%u from Retrans Table on exchange %u%c",
      buf,
      0x14u);
  }
  if (sub_234114844(3u))
  {
    sub_2341AFE90(**(_QWORD **)a1);
    v10 = sub_2341AFE90(**(_QWORD **)a1);
    sub_2341AD080(v10);
    sub_2341147D0(5u, 3);
  }
  result = 1;
  **(_BYTE **)(a1 + 24) = 1;
  return result;
}

uint64_t sub_2341B1A6C(_QWORD **a1, _QWORD *a2)
{
  uint64_t *v3;

  if (*a2 + 8 != **a1)
    return 0;
  v3 = a1[1];
  sub_2341B13F8((uint64_t)(v3 + 2), a2);
  sub_2341B09F0(v3);
  return 1;
}

uint64_t sub_2341B1ABC(unint64_t ***a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;

  if ((*(_WORD *)(a2 + 8) & 0x10) != 0)
  {
    v2 = **a1;
    v3 = *(_QWORD *)(a2 + 16);
    if (v3 < *v2)
      *v2 = v3;
  }
  return 0;
}

uint64_t sub_2341B1AE8(unint64_t **a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2 < **a1)
    **a1 = v2;
  return 0;
}

BOOL sub_2341B1B08(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[4];
  int v5;
  int v6;
  __int16 v7;
  _BYTE v8[4];
  int v9;
  int v10;
  __int16 v11;

  sub_2341B1BB8((uint64_t)v8);
  byte_25615AB28 = *(_BYTE *)a1;
  if (byte_25615AB28)
  {
    v2 = *(_QWORD *)(a1 + 4);
    dword_25615AB34 = *(_DWORD *)(a1 + 12);
    qword_25615AB2C = v2;
  }
  sub_2341B1BB8((uint64_t)v4);
  if (v8[0] != v4[0])
    return 1;
  if (v8[0])
  {
    if (v9 == v5 && v10 == v6)
      return v11 != v7;
    return 1;
  }
  return 0;
}

void sub_2341B1BB8(uint64_t a1@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  if (!byte_25615AB28)
    goto LABEL_5;
  v2 = sub_234122C20(&byte_25615AB28);
  v3 = *(_DWORD *)v2;
  v4 = *((_DWORD *)v2 + 1);
  v5 = *((unsigned __int16 *)v2 + 4);
  if (*(_DWORD *)v2 == 500 && v4 == 300)
  {
    if (v5 == 4000)
    {
LABEL_5:
      *(_BYTE *)a1 = 0;
      return;
    }
    v4 = 300;
  }
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 12) = v5;
}

uint64_t sub_2341B1C28()
{
  return 0x12C000001F4;
}

uint64_t sub_2341B1C38(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v7 = 0;
  v8 = 0;
  v9 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10)
     - a3;
  v10 = a4;
  do
  {
    if (v9 + v8 >= v10)
      v11 = a2;
    else
      v11 = a1;
    v12 = v7;
    v8 += sub_2341B0C50(v11, v7++, 1);
  }
  while (v12 < 4);
  return v8;
}

uint64_t sub_2341B1CD4()
{
  uint64_t result;

  result = qword_25615AB38;
  if (!qword_25615AB38)
    sub_23425BEA0();
  return result;
}

uint64_t sub_2341B1CF4(uint64_t result)
{
  if (result)
    qword_25615AB38 = result;
  return result;
}

uint64_t sub_2341B1D04()
{
  uint64_t result;

  result = qword_25615AB40;
  if (!qword_25615AB40)
    sub_23425BF64();
  return result;
}

uint64_t sub_2341B1D24(uint64_t result)
{
  if (result)
    qword_25615AB40 = result;
  return result;
}

void sub_2341B1D34(_QWORD *a1@<X8>)
{
  unsigned int v2;

  v2 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_234139DB0((char *)&v2, 4uLL, (uint64_t)a1);
  if (!*(_DWORD *)a1)
  {
    srand(v2);
    *(_DWORD *)a1 = 0;
    a1[1] = "src/platform/Entropy.cpp";
    *((_DWORD *)a1 + 4) = 34;
  }
}

_QWORD *sub_2341B1D98()
{
  return sub_234108530(&off_2561587B0);
}

BOOL sub_2341B1DA4(char *a1, size_t a2, int *a3)
{
  int v3;
  unsigned int v4;
  const char *v5;
  const char *v6;
  __int128 v8;
  uint64_t v9;

  v3 = *a3;
  v4 = *a3 & 0xFF000700;
  if (v4 == 512)
  {
    v5 = "Not service provisioned";
    if (v3 != 514)
      v5 = 0;
    if (v3 == 513)
      v6 = "Config not found";
    else
      v6 = v5;
    v8 = *(_OWORD *)a3;
    v9 = *((_QWORD *)a3 + 2);
    sub_2341084C8(a1, a2, "Device Layer", &v8, v6);
  }
  return v4 == 512;
}

const char *sub_2341B1E20(_DWORD *a1)
{
  if (sub_23410EF74(a1))
    return "IPv6 link-local address";
  if (sub_23410EF60(a1))
    return "IPv6 unique local address";
  if (sub_23410EF4C(a1))
    return "IPv6 global unicast address";
  return "IPv6 address";
}

uint64_t sub_2341B1E88(uint64_t result)
{
  qword_25615DDC0 = result;
  return result;
}

uint64_t *sub_2341B1E94()
{
  uint64_t *result;
  unsigned __int8 v1;
  uint64_t v2;

  result = (uint64_t *)qword_25615DDC0;
  if (!qword_25615DDC0)
  {
    v1 = atomic_load((unsigned __int8 *)&qword_25615B750);
    if ((v1 & 1) != 0)
    {
      return &qword_25615AB48;
    }
    else if (__cxa_guard_acquire(&qword_25615B750))
    {
      qword_25615AB48 = (uint64_t)&off_250504118;
      v2 = 0xCu;
      do
      {
        *((_BYTE *)&qword_25615AB48 + v2) = 0;
        v2 += 40;
      }
      while (v2 != 2572);
      xmmword_25615B570 = 0u;
      byte_25615B580 = 0;
      xmmword_25615B560 = 0u;
      xmmword_25615B550 = 0u;
      *(_QWORD *)&xmmword_25615B570 = &xmmword_25615B560;
      *((_QWORD *)&xmmword_25615B560 + 1) = &xmmword_25615B560;
      byte_25615B730 = 0;
      qword_25615B748 = 0;
      xmmword_25615B588 = 0u;
      __cxa_guard_release(&qword_25615B750);
      return &qword_25615AB48;
    }
    else
    {
      return &qword_25615AB48;
    }
  }
  return result;
}

BOOL sub_2341B1F64(const char *a1, int a2)
{
  _BOOL8 result;
  NSObject *v5;
  const char *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (qword_254253100 != -1)
    dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
  result = sub_2341BE8E8((unsigned int *)&byte_2542530C0);
  if (!result)
  {
    v5 = sub_234117B80(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (a1)
        v6 = a1;
      else
        v6 = "(null)";
      *(_DWORD *)buf = 136315394;
      v8 = v6;
      v9 = 1024;
      v10 = a2;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "Chip stack locking error at '%s:%d'. Code is unsafe/racy", buf, 0x12u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0x1Fu, 1);
    sub_233CB7AC0();
  }
  return result;
}

void sub_2341B2098(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v8[72];

  sub_234104468((uint64_t)v8);
  sub_234104498((uint64_t)v8, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341058CC((uint64_t)v8, a4);
  if (!*(_DWORD *)a4)
    sub_2341079F0(a2, a3, (uint64_t)v8, (uint64_t)a4);
}

_UNKNOWN **sub_2341B2114()
{
  _UNKNOWN **result;

  result = (_UNKNOWN **)qword_25615B758;
  if (!qword_25615B758)
    return sub_2341B2AEC();
  return result;
}

uint64_t sub_2341B2128(uint64_t result)
{
  if (result)
    qword_25615B758 = result;
  return result;
}

_QWORD *sub_2341B2138@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint8_t buf[4];
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v11 = "_Init";
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x1Fu, 3);
  v5 = (_QWORD *)operator new();
  *v5 = &unk_250514340;
  v6 = (_QWORD *)operator new();
  v6[2] = 0;
  *v6 = &unk_250514498;
  v6[1] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_250514540;
  a1[8] = v7;
  a1[9] = v5;
  a1[7] = v6;
  v8 = sub_2341B1F60(v7);
  result = sub_23410B9D4((uint64_t)a1, (uint64_t)v7, (uint64_t)v6, (uint64_t)v5, v8, (uint64_t)a2);
  if (*a2)
    return (_QWORD *)sub_2341B22DC(a1);
  return result;
}

uint64_t sub_2341B22DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1[9];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    a1[9] = 0;
  }
  v3 = a1[7];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    a1[7] = 0;
  }
  result = a1[8];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    a1[8] = 0;
  }
  return result;
}

void sub_2341B2340(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;

  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    sub_2341BF4D4(v5, a2, a3);
    v6 = 0;
    v7 = 94;
  }
  else
  {
    v7 = 92;
    v6 = 3;
  }
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a4 + 16) = v7;
}

void sub_2341B2390(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  if (*(_QWORD *)(a1 + 56))
  {
    sub_2341BF848();
    v3 = 0;
    v4 = 101;
  }
  else
  {
    v4 = 99;
    v3 = 3;
  }
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a2 + 16) = v4;
}

uint64_t sub_2341B23E0()
{
  NSObject *v0;
  uint8_t buf[4];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v0 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v3 = "_IsAdvertisingEnabled";
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x1Fu, 3);
  return 0;
}

uint64_t sub_2341B24B0@<X0>(uint64_t a1@<X8>)
{
  NSObject *v2;
  uint64_t result;
  uint8_t buf[4];
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v5 = "_SetAdvertisingEnabled";
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    result = sub_2341147D0(0x1Fu, 3);
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 113;
  return result;
}

uint64_t sub_2341B25A4@<X0>(uint64_t a1@<X8>)
{
  NSObject *v2;
  uint64_t result;
  uint8_t buf[4];
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v5 = "_SetAdvertisingMode";
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    result = sub_2341147D0(0x1Fu, 3);
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 119;
  return result;
}

uint64_t sub_2341B2698()
{
  NSObject *v0;
  uint8_t buf[4];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v0 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v3 = "_IsAdvertising";
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x1Fu, 3);
  return 0;
}

uint64_t sub_2341B2768@<X0>(uint64_t a1@<X8>)
{
  NSObject *v2;
  uint64_t result;
  uint8_t buf[4];
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v5 = "_GetDeviceName";
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    result = sub_2341147D0(0x1Fu, 3);
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 131;
  return result;
}

uint64_t sub_2341B285C@<X0>(uint64_t a1@<X8>)
{
  NSObject *v2;
  uint64_t result;
  uint8_t buf[4];
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v5 = "_SetDeviceName";
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    result = sub_2341147D0(0x1Fu, 3);
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/BLEManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 137;
  return result;
}

uint64_t sub_2341B2950()
{
  NSObject *v0;
  uint8_t buf[4];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v0 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v3 = "_NumConnections";
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x1Fu, 3);
  return 0;
}

uint64_t sub_2341B2A20()
{
  NSObject *v0;
  uint64_t result;
  uint8_t buf[4];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v0 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v3 = "_OnPlatformEvent";
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(0x1Fu, 3);
  return result;
}

_UNKNOWN **sub_2341B2AEC()
{
  return &off_2561587C0;
}

void sub_2341B2AF8(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 150;
}

void sub_2341B2B14(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 217;
}

uint64_t sub_2341B2B34()
{
  return 1;
}

uint64_t sub_2341B2B3C()
{
  NSObject *v0;
  uint64_t result;
  uint8_t v2[16];

  v0 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_ERROR, "InitiateFactoryReset not implemented", v2, 2u);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
    return sub_2341147D0(0x1Fu, 1);
  return result;
}

void sub_2341B2BC4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 235;
}

void sub_2341B2BE4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 244;
}

void sub_2341B2C04(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 253;
}

void sub_2341B2C24(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 262;
}

void sub_2341B2C44(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 271;
}

void sub_2341B2C64(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 280;
}

void sub_2341B2C84(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 289;
}

void sub_2341B2CA4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 298;
}

void sub_2341B2CC4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 307;
}

void sub_2341B2CE4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 326;
}

void sub_2341B2D04(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 345;
}

void sub_2341B2D24(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 361;
}

void sub_2341B2D44(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 371;
}

void sub_2341B2D64(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 380;
}

void sub_2341B2D84(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 389;
}

void sub_2341B2DA4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 398;
}

void sub_2341B2DC4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 407;
}

void sub_2341B2DE4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 416;
}

void sub_2341B2E04(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 425;
}

void sub_2341B2E24(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 434;
}

void sub_2341B2E44(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 443;
}

void sub_2341B2E64(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 452;
}

void sub_2341B2E84(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 461;
}

void sub_2341B2EA4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 470;
}

void sub_2341B2EC4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConfigurationManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 479;
}

void sub_2341B2EE8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _UNKNOWN **v5;
  int v6;
  int v7;
  NSObject *v8;
  uint8_t v9[32];
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  if (a2 == 6)
  {
    *(_WORD *)(a1 + 4) = 0;
    *(_DWORD *)a1 = 0;
    v5 = sub_2341B2114();
    (*((void (**)(uint8_t *__return_ptr, _UNKNOWN **, uint64_t))*v5 + 1))(v9, v5, a1);
    if (*(_DWORD *)v9)
    {
      v6 = 395;
      v7 = 216;
    }
    else
    {
      v8 = sub_234117B80(0x1Fu, "DeviceLayer");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Using WiFi MAC for hostname", v9, 2u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0x1Fu, 3);
      sub_233BF7588((uint64_t)v10, 6uLL);
      v7 = 0;
      v6 = 392;
    }
  }
  else
  {
    v6 = 375;
    v7 = 47;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_2341B2FEC(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 513;
  *(_QWORD *)(a1 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a1 + 16) = 404;
}

void sub_2341B300C(_DWORD *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  if (a2 >= 4)
  {
    v4 = 0;
    *a1 = 3157553;
    v3 = 356;
  }
  else
  {
    v3 = 354;
    v4 = 25;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v3;
}

void sub_2341B304C(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 1;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 278;
}

void sub_2341B3070(int *a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  int v5;

  if (byte_2542530B8)
  {
    v4 = *(_DWORD *)sub_2341B3D70(&byte_2542530B8);
    v5 = 294;
  }
  else
  {
    v5 = 299;
    v4 = 750561408;
  }
  *a1 = v4;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = v5;
}

void sub_2341B30D8(int a1@<W1>, uint64_t a2@<X8>)
{
  byte_2542530B8 = 1;
  dword_2542530BC = a1;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 327;
}

uint64_t sub_2341B3108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 384))(a1, "chip-config", "country-code", a2, a3, a4);
}

uint64_t sub_2341B312C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 432))(a1, "chip-factory", "serial-num", a2, a3);
}

uint64_t sub_2341B314C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 432))(a1, "chip-factory", "mfg-date", a2, a3);
}

void sub_2341B316C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a1 + 16) = 284;
}

uint64_t sub_2341B318C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a1 + 408))(a1, "chip-factory", "hardware-ver", a2);
}

uint64_t sub_2341B31A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a1 + 408))(a1, "chip-config", "regulatory-location", a2);
}

uint64_t sub_2341B31C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 432))(a1, "chip-config", "country-code", a2, a3);
}

_QWORD *sub_2341B31E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  int v8;
  int v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;

  v10 = 0;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, const char *, const char *, uint64_t, unint64_t, unint64_t *))(*(_QWORD *)a1 + 384))(&v11, a1, "chip-config", "unique-id", a2, a3, &v10);
  *(_OWORD *)a4 = v11;
  *(_QWORD *)(a4 + 16) = v12;
  if (!*(_DWORD *)a4)
  {
    if (v10 >= a3)
    {
      v8 = 519;
      v9 = 25;
    }
    else
    {
      if (!*(_BYTE *)(a2 + v10))
        return result;
      v8 = 520;
      v9 = 30;
    }
    *(_DWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
    *(_DWORD *)(a4 + 16) = v8;
  }
  return result;
}

uint64_t sub_2341B3298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 432))(a1, "chip-config", "unique-id", a2, a3);
}

char *sub_2341B32B8@<X0>(_BYTE *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7;

  v7 = sub_234136ABC();
  return sub_234115248((char *)&v7, 8, a1, a2, 3u, a3);
}

uint64_t sub_2341B3310(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a1 + 360))(a1, "chip-config", "fail-safe-armed", a2);
}

uint64_t sub_2341B332C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a1 + 400))(a1, "chip-config", "fail-safe-armed", a2);
}

_QWORD *sub_2341B3348@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  v11 = 0;
  *(_QWORD *)a1 = 0;
  v4 = sub_2341B1D04();
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 24))(v4, (char *)&v11 + 2);
  if (!*(_DWORD *)a2)
  {
    *(_WORD *)(a1 + 3) = HIWORD(v11);
    v6 = sub_2341B1D04();
    result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, char *))(*(_QWORD *)v6 + 40))(&v9, v6, (char *)&v11 + 2);
    *(_OWORD *)a2 = v9;
    *(_QWORD *)(a2 + 16) = v10;
    if (!*(_DWORD *)a2)
    {
      *(_WORD *)(a1 + 5) = HIWORD(v11);
      v7 = sub_2341B1CD4();
      result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, int *))(*(_QWORD *)v7 + 16))(&v9, v7, &v11);
      *(_OWORD *)a2 = v9;
      *(_QWORD *)(a2 + 16) = v10;
      if (!*(_DWORD *)a2)
      {
        v8 = BYTE1(v11) & 0xF;
        *(_WORD *)(a1 + 1) = v11 & 0xFFF | (((*(_BYTE *)(a1 + 2) >> 4) & 0xF) << 12);
        *(_BYTE *)(a1 + 2) = v8;
      }
    }
  }
  return result;
}

uint64_t sub_2341B3424(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  const char *p_buf;
  NSObject *v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  _BOOL4 v21;
  NSObject *v22;
  uint64_t result;
  __int16 v24;
  uint64_t buf;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int128 v30;
  int v31;
  uint8_t v32[4];
  __int128 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Device Configuration:", (uint8_t *)&buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Fu, 2);
  v3 = sub_2341B1D04();
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 72))(v32, v3, &buf, 33);
  v4 = *(_DWORD *)v32;
  v30 = v33;
  v31 = v34;
  v5 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
      p_buf = "(not set)";
    else
      p_buf = (const char *)&buf;
    *(_DWORD *)v32 = 136315138;
    *(_QWORD *)&v33 = p_buf;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "  Serial Number: %s", v32, 0xCu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Fu, 2);
  *(_WORD *)v32 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v3 + 24))(&buf, v3, v32);
  if ((_DWORD)buf)
    *(_WORD *)v32 = 0;
  v7 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109376;
    HIDWORD(buf) = *(unsigned __int16 *)v32;
    v26 = 1024;
    v27 = *(unsigned __int16 *)v32;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "  Vendor Id: %u (0x%X)", (uint8_t *)&buf, 0xEu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Fu, 2);
  *(_WORD *)v32 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v3 + 40))(&buf, v3, v32);
  if ((_DWORD)buf)
    *(_WORD *)v32 = 0;
  v8 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109376;
    HIDWORD(buf) = *(unsigned __int16 *)v32;
    v26 = 1024;
    v27 = *(unsigned __int16 *)v32;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "  Product Id: %u (0x%X)", (uint8_t *)&buf, 0xEu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Fu, 2);
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 32))(v32, v3, &buf, 33);
  v9 = *(_DWORD *)v32;
  v30 = v33;
  v31 = v34;
  v10 = sub_234117B80(0x1Fu, "DeviceLayer");
  v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v32 = v9;
      v33 = v30;
      v34 = v31;
      v12 = sub_2341083CC((const char **)v32, 1);
      *(_DWORD *)v32 = 136315138;
      *(_QWORD *)&v33 = v12;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "  Product Name: n/a (%s)", v32, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_DWORD *)v32 = v9;
      v33 = v30;
      v34 = v31;
      sub_2341083CC((const char **)v32, 1);
      v13 = 1;
LABEL_33:
      sub_2341147D0(0x1Fu, v13);
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v32 = 136315138;
      *(_QWORD *)&v33 = &buf;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "  Product Name: %s", v32, 0xCu);
    }
    if (sub_234114844(2u))
    {
      v13 = 2;
      goto LABEL_33;
    }
  }
  *(_WORD *)v32 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v3 + 88))(&buf, v3, v32);
  if ((_DWORD)buf)
    *(_WORD *)v32 = 0;
  v14 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    HIDWORD(buf) = *(unsigned __int16 *)v32;
    _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "  Hardware Version: %u", (uint8_t *)&buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Fu, 2);
  v15 = sub_2341B1CD4();
  v16 = v15;
  *(_DWORD *)v32 = 0;
  if (!v15
    || ((*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v15 + 56))(&buf, v15, v32),
        (_DWORD)buf))
  {
    *(_DWORD *)v32 = 0;
  }
  v17 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    HIDWORD(buf) = *(_DWORD *)v32;
    _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_DEFAULT, "  Setup Pin Code (0 for UNKNOWN/ERROR): %u", (uint8_t *)&buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Fu, 2);
  *(_WORD *)v32 = 0;
  if (!v16
    || ((*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(&buf, v16, v32),
        (_DWORD)buf))
  {
    *(_WORD *)v32 = -1;
  }
  v18 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109376;
    HIDWORD(buf) = *(unsigned __int16 *)v32;
    v26 = 1024;
    v27 = *(unsigned __int16 *)v32;
    _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_DEFAULT, "  Setup Discriminator (0xFFFF for UNKNOWN/ERROR): %u (0x%X)", (uint8_t *)&buf, 0xEu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Fu, 2);
  *(_WORD *)v32 = 0;
  v24 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *, char *, __int16 *))(*(_QWORD *)v3 + 80))(&buf, v3, v32, (char *)&v24 + 1, &v24);
  v19 = buf;
  v20 = sub_234117B80(0x1Fu, "DeviceLayer");
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if (v19)
  {
    if (v21)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_DEFAULT, "  Manufacturing Date: (not set)", (uint8_t *)&buf, 2u);
    }
    if (sub_234114844(2u))
LABEL_62:
      sub_2341147D0(0x1Fu, 2);
  }
  else
  {
    if (v21)
    {
      LODWORD(buf) = 67109632;
      HIDWORD(buf) = *(unsigned __int16 *)v32;
      v26 = 1024;
      v27 = HIBYTE(v24);
      v28 = 1024;
      v29 = v24;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_DEFAULT, "  Manufacturing Date: %04u-%02u-%02u", (uint8_t *)&buf, 0x14u);
    }
    if (sub_234114844(2u))
      goto LABEL_62;
  }
  *(_DWORD *)v32 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)a1 + 248))(&buf, a1, v32);
  if ((_DWORD)buf)
    *(_DWORD *)v32 = 0;
  v22 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109376;
    HIDWORD(buf) = *(_DWORD *)v32;
    v26 = 1024;
    v27 = *(_DWORD *)v32;
    _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_DEFAULT, "  Device Type: %u (0x%X)", (uint8_t *)&buf, 0xEu);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    return sub_2341147D0(0x1Fu, 2);
  return result;
}

void sub_2341B3C50(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 0xFFFF;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 334;
}

void sub_2341B3C74(char *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  if (a2 >= 0xD)
  {
    v4 = 0;
    strcpy(a1, "Test Kitchen");
    v3 = 651;
  }
  else
  {
    v3 = 649;
    v4 = 25;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v3;
}

void sub_2341B3CC0(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 33;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 341;
}

void sub_2341B3CE4(_BYTE *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  if (a2)
  {
    v3 = 0;
    *a1 = 0;
    v4 = 659;
  }
  else
  {
    v4 = 657;
    v3 = 25;
  }
  *(_DWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v4;
}

void sub_2341B3D18(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 36;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a2 + 16) = 348;
}

void sub_2341B3D3C(_BYTE *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  if (a2)
  {
    v3 = 0;
    *a1 = 0;
    v4 = 667;
  }
  else
  {
    v4 = 665;
    v3 = 25;
  }
  *(_DWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = "src/include/platform/internal/GenericConfigurationManagerImpl.ipp";
  *(_DWORD *)(a3 + 16) = v4;
}

_BYTE *sub_2341B3D70(_BYTE *a1)
{
  if (!*a1)
    sub_234259F50();
  return a1 + 4;
}

uint64_t *sub_2341B3D90()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256158818);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256158818))
  {
    byte_2561587D0 = 0;
    qword_2561587C8 = (uint64_t)&unk_250513D38;
    xmmword_256158800 = 0u;
    unk_2561587E0 = 0u;
    byte_256158810 = 0;
    xmmword_2561587F0 = 0u;
    *((_QWORD *)&xmmword_2561587F0 + 1) = &xmmword_2561587F0;
    *(_QWORD *)&xmmword_256158800 = &xmmword_2561587F0;
    __cxa_guard_release(&qword_256158818);
  }
  return &qword_2561587C8;
}

uint64_t *sub_2341B3E10()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256158870);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256158870))
  {
    byte_256158828 = 0;
    qword_256158820 = (uint64_t)&unk_250513DD0;
    xmmword_256158858 = 0u;
    unk_256158838 = 0u;
    byte_256158868 = 0;
    xmmword_256158848 = 0u;
    *((_QWORD *)&xmmword_256158848 + 1) = &xmmword_256158848;
    *(_QWORD *)&xmmword_256158858 = &xmmword_256158848;
    __cxa_guard_release(&qword_256158870);
  }
  return &qword_256158820;
}

uint64_t sub_2341B3E90(uint64_t a1, uint64_t a2)
{
  __int128 *v2;

  v2 = &xmmword_25615DD20;
  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v2 = (__int128 *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    *((_QWORD *)v2 + 7) = 0;
    *((_QWORD *)v2 + 8) = 0;
    *((_QWORD *)v2 + 9) = 0;
  }
  return nullsub_13(v2, a2);
}

uint64_t sub_2341B3ED4()
{
  _QWORD *v0;

  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v0 = (_QWORD *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    v0[7] = 0;
    v0[8] = 0;
    v0[9] = 0;
  }
  return sub_2341B23E0();
}

uint64_t sub_2341B3F18@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;

  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v2 = (_QWORD *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    v2[7] = 0;
    v2[8] = 0;
    v2[9] = 0;
  }
  return sub_2341B24B0(a1);
}

uint64_t sub_2341B3F74()
{
  _QWORD *v0;

  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v0 = (_QWORD *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    v0[7] = 0;
    v0[8] = 0;
    v0[9] = 0;
  }
  return sub_2341B2698();
}

uint64_t sub_2341B3FB8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;

  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v2 = (_QWORD *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    v2[7] = 0;
    v2[8] = 0;
    v2[9] = 0;
  }
  return sub_2341B25A4(a1);
}

uint64_t sub_2341B4014@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;

  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v2 = (_QWORD *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    v2[7] = 0;
    v2[8] = 0;
    v2[9] = 0;
  }
  return sub_2341B2768(a1);
}

uint64_t sub_2341B4080@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;

  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v2 = (_QWORD *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    v2[7] = 0;
    v2[8] = 0;
    v2[9] = 0;
  }
  return sub_2341B285C(a1);
}

uint64_t sub_2341B40DC()
{
  _QWORD *v0;

  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v0 = (_QWORD *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    v0[7] = 0;
    v0[8] = 0;
    v0[9] = 0;
  }
  return sub_2341B2950();
}

const char *sub_2341B4120(unsigned int a1)
{
  if (a1 > 2)
    return "(unknown)";
  else
    return off_250513E58[a1];
}

void sub_2341B4144(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/ConnectivityManagerImpl.cpp";
  *(_DWORD *)(a1 + 16) = 66;
}

double sub_2341B4160@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 45;
  *(_OWORD *)a1 = xmmword_250513CF8;
  *(_QWORD *)(a1 + 16) = 79;
  return result;
}

double sub_2341B417C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 45;
  *(_OWORD *)a1 = xmmword_250513D10;
  *(_QWORD *)(a1 + 16) = 123;
  return result;
}

uint64_t sub_2341B4198(_QWORD *a1)
{
  *a1 = &unk_250513D38;
  sub_2341B4298(a1 + 3);
  return sub_2341B425C((uint64_t)a1);
}

void sub_2341B41CC(_QWORD *a1)
{
  *a1 = &unk_250513D38;
  sub_2341B4298(a1 + 3);
  sub_2341B425C((uint64_t)a1);
  JUMPOUT(0x23493E704);
}

_DWORD *sub_2341B4214(uint64_t a1)
{
  return sub_2341B42C4((unint64_t *)(a1 + 24), a1);
}

void sub_2341B4220(uint64_t a1, void *a2)
{
  sub_2341B437C(a1 + 24, a2);
}

uint64_t sub_2341B4228(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = a2;
  v4 = &v3;
  return sub_234115DFC((_QWORD *)(a1 + 40), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_2341B4410);
}

uint64_t sub_2341B425C(uint64_t result)
{
  *(_QWORD *)result = &unk_250513D98;
  if ((*(unsigned __int8 *)(result + 8) | 4) != 4)
    sub_23425C0CC(result);
  *(_BYTE *)(result + 8) = 5;
  return result;
}

_QWORD *sub_2341B4298(_QWORD *result)
{
  if (!byte_25615DDA8)
  {
    if (*result)
      sub_23425C150((uint64_t)result);
  }
  return result;
}

_DWORD *sub_2341B42C4(unint64_t *a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v4 = sub_234114774(0x50uLL);
  v5 = v4;
  if (v4)
  {
    v4[2] = 1;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = a2;
    *((_BYTE *)v4 + 32) = 0;
    *((_QWORD *)v4 + 5) = 0;
    *((_QWORD *)v4 + 6) = 0;
    v4[14] = -1;
    *(_QWORD *)v4 = &unk_250503E40;
    v4[18] = 0;
    v6 = sub_234114774(0x18uLL);
    if (v6)
    {
      *v6 = v5;
      v6[1] = a1 + 2;
      v6[2] = 0;
      v6[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v6;
      a1[4] = (unint64_t)v6;
      v7 = a1[1];
      v8 = *a1 + 1;
      *a1 = v8;
      if (v8 > v7)
        a1[1] = v8;
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2341B437C(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_23425C1D4(0);
    v5 = v4;
    *v4 = 0;
    (*(void (**)(void *))(*(_QWORD *)a2 + 40))(a2);
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

uint64_t sub_2341B4410(uint64_t (***a1)(uint64_t), uint64_t a2)
{
  return (**a1)(a2);
}

uint64_t sub_2341B4420(_QWORD *a1)
{
  *a1 = &unk_250513DD0;
  sub_2341B4298(a1 + 3);
  return sub_2341B44E4((uint64_t)a1);
}

void sub_2341B4454(_QWORD *a1)
{
  *a1 = &unk_250513DD0;
  sub_2341B4298(a1 + 3);
  sub_2341B44E4((uint64_t)a1);
  JUMPOUT(0x23493E704);
}

char *sub_2341B449C(uint64_t a1)
{
  return sub_2341B4520((unint64_t *)(a1 + 24), a1);
}

void sub_2341B44A8(uint64_t a1, void *a2)
{
  sub_2341B45E4(a1 + 24, a2);
}

uint64_t sub_2341B44B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = a2;
  v4 = &v3;
  return sub_234115DFC((_QWORD *)(a1 + 40), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_2341B4678);
}

uint64_t sub_2341B44E4(uint64_t result)
{
  *(_QWORD *)result = &unk_250513E30;
  if ((*(unsigned __int8 *)(result + 8) | 4) != 4)
    sub_23425C0CC(result);
  *(_BYTE *)(result + 8) = 5;
  return result;
}

char *sub_2341B4520(unint64_t *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v4 = (char *)sub_234114774(0x88uLL);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = 1;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = a2;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *(_OWORD *)(v4 + 73) = 0u;
    v4[89] = 1;
    *((_QWORD *)v4 + 12) = 0;
    *((_QWORD *)v4 + 13) = 0;
    *(_QWORD *)(v4 + 116) = 0xFFFFFFFF00000000;
    *(_QWORD *)v4 = &unk_250503C78;
    v6 = sub_234114774(0x18uLL);
    if (v6)
    {
      *v6 = v5;
      v6[1] = a1 + 2;
      v6[2] = 0;
      v6[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v6;
      a1[4] = (unint64_t)v6;
      v7 = a1[1];
      v8 = *a1 + 1;
      *a1 = v8;
      if (v8 > v7)
        a1[1] = v8;
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2341B45E4(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_23425C1D4(0);
    v5 = v4;
    *v4 = 0;
    (*(void (**)(void *))(*(_QWORD *)a2 + 56))(a2);
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

uint64_t sub_2341B4678(uint64_t (***a1)(uint64_t), uint64_t a2)
{
  return (**a1)(a2);
}

__n128 sub_2341B4700@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  void **i;
  __n128 result;
  __n128 v9;
  unint64_t v10;

  if (byte_254253120)
  {
    for (i = (void **)qword_254253108; i != (void **)qword_254253110; ++i)
    {
      if (*i == a1)
      {
        if (a3->n128_u32[0])
        {
          v10 = a3[1].n128_u64[0];
          v9 = *a3;
          (*(void (**)(void *, uint64_t, __n128 *))(*(_QWORD *)a1 + 16))(a1, a2, &v9);
        }
        else
        {
          (*(void (**)(void *))(*(_QWORD *)a1 + 24))(a1);
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  if (a1)
  {
    (**(void (***)(void *))a1)(a1);
    j__free(a1);
  }
LABEL_12:
  result = *a3;
  *a4 = *a3;
  a4[1].n128_u64[0] = a3[1].n128_u64[0];
  return result;
}

_QWORD **sub_2341B47E4@<X0>(_QWORD **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *i;
  int v4;
  int v5;

  for (i = *result; ; ++i)
  {
    if (i == result[1])
    {
      v4 = 283;
      v5 = 16;
      goto LABEL_7;
    }
    if (*i == a2)
      break;
  }
  v5 = 0;
  v4 = 279;
LABEL_7:
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

double sub_2341B4830@<D0>(void *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  char *v6;
  double result;
  __n128 v8;
  unint64_t v9;
  __n128 v10;
  unint64_t v11;

  v10 = *a2;
  v11 = a2[1].n128_u64[0];
  v6 = sub_2341083CC((const char **)&v10, 1);
  v8 = *a2;
  v9 = a2[1].n128_u64[0];
  *(_QWORD *)&result = sub_2341B4700(a1, (uint64_t)v6, &v8, a3).n128_u64[0];
  return result;
}

double sub_2341B48A4@<D0>(void *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  const char *v6;
  double result;
  __n128 v8;

  v6 = sub_2341BD3BC(a2);
  sub_2341BD574(a2, (uint64_t)&v8);
  *(_QWORD *)&result = sub_2341B4700(a1, (uint64_t)v6, &v8, a3).n128_u64[0];
  return result;
}

void ***sub_2341B4904(void ***a1)
{
  void ***v1;
  void **v2;
  void **v3;
  int64_t v4;

  v1 = a1;
  v2 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      sub_2341B4984((uint64_t)a1, *v2);
      v3 = v1[1];
      v4 = (char *)v3 - (char *)(v2 + 1);
      if (v3 != v2 + 1)
        a1 = (void ***)memmove(v2, v2 + 1, (char *)v3 - (char *)(v2 + 1));
      v1[1] = (void **)((char *)v2 + v4);
    }
    while (v2 != (void **)((char *)v2 + v4));
    v2 = *v1;
  }
  if (v2)
  {
    v1[1] = v2;
    operator delete(v2);
  }
  return v1;
}

void sub_2341B4984(uint64_t a1, void *a2)
{
  _DNSServiceRef_t *v3;

  v3 = (_DNSServiceRef_t *)*((_QWORD *)a2 + 3);
  if (v3)
    DNSServiceRefDeallocate(v3);
  (**(void (***)(void *))a2)(a2);
  j__free(a2);
}

void sub_2341B49C4(DNSServiceRef service@<X2>, void **a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;

  if (a3 | (unint64_t)service)
  {
    if (a3)
    {
      if (service)
      {
        if (qword_254253100 != -1)
          dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
        v8 = DNSServiceSetDispatchQueue(service, (dispatch_queue_t)qword_2542530E8);
        if ((_DWORD)v8)
        {
          v9 = v8;
          DNSServiceRefDeallocate(service);
          (**(void (***)(unint64_t))a3)(a3);
          j__free((void *)a3);
          sub_2341BD574(v9, a4);
          return;
        }
        *(_QWORD *)(a3 + 24) = service;
        v11 = (unint64_t)a2[2];
        v12 = (unint64_t *)a2[1];
        if ((unint64_t)v12 >= v11)
        {
          v14 = ((char *)v12 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            abort();
          v15 = v11 - (_QWORD)*a2;
          v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)sub_2340FD57C((uint64_t)(a2 + 2), v17);
          else
            v18 = 0;
          v19 = (unint64_t *)&v18[8 * v14];
          v20 = &v18[8 * v17];
          *v19 = a3;
          v13 = v19 + 1;
          v22 = (char *)*a2;
          v21 = (char *)a2[1];
          if (v21 != *a2)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v19 = v23;
            }
            while (v21 != v22);
            v21 = (char *)*a2;
          }
          *a2 = v19;
          a2[1] = v13;
          a2[2] = v20;
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v12 = a3;
          v13 = v12 + 1;
        }
        a2[1] = v13;
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
        v10 = 200;
      }
      else
      {
        (**(void (***)(unint64_t))a3)(a3);
        j__free((void *)a3);
        *(_DWORD *)a4 = 47;
        *(_QWORD *)(a4 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
        v10 = 184;
      }
    }
    else
    {
      DNSServiceRefDeallocate(service);
      *(_DWORD *)a4 = 47;
      *(_QWORD *)(a4 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
      v10 = 178;
    }
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
    v10 = 173;
  }
  *(_DWORD *)(a4 + 16) = v10;
}

uint64_t sub_2341B4BC4(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  char *v7;
  char *v8;
  int64_t v9;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v5 = 0;
  while (*(_QWORD *)&v3[v5] != a2)
  {
    v5 += 8;
    if (&v3[v5] == v2)
      return 0;
  }
  v7 = &v3[v5];
  v8 = &v3[v5 + 8];
  v9 = v2 - v8;
  if (v2 != v8)
    memmove(&v3[v5], v8, v2 - v8);
  a1[1] = &v7[v9];
  return 1;
}

void sub_2341B4C44(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  int64_t v12;

  v5 = *a1;
  v4 = (_BYTE *)a1[1];
  if ((_BYTE *)*a1 == v4)
  {
LABEL_5:
    v9 = 16;
  }
  else
  {
    v7 = a1;
    v8 = 0;
    while (*(void **)(v5 + v8) != a2)
    {
      v8 += 8;
      if ((_BYTE *)(v5 + v8) == v4)
        goto LABEL_5;
    }
    v10 = v5 + v8;
    v11 = (_BYTE *)(v5 + v8 + 8);
    v12 = v4 - v11;
    if (v4 != v11)
      a1 = memmove((void *)(v5 + v8), v11, v4 - v11);
    v7[1] = v10 + v12;
    sub_2341B4984((uint64_t)a1, a2);
    v9 = 0;
  }
  *(_DWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  *(_DWORD *)(a3 + 16) = 228;
}

void sub_2341B4CF4(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v5 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
LABEL_12:
    v12 = 16;
  }
  else
  {
    v7 = a1;
    v8 = 0;
    do
    {
      v9 = *(void **)v5;
      if (*(_DWORD *)(*(_QWORD *)v5 + 8) == a2)
      {
        while (1)
        {
          sub_2341B4984((uint64_t)a1, v9);
          v10 = v7[1];
          v11 = v10 - (v5 + 8);
          if (v10 != v5 + 8)
            a1 = memmove((void *)v5, (const void *)(v5 + 8), v10 - (v5 + 8));
          v4 = v5 + v11;
          v7[1] = v5 + v11;
          if (v5 == v5 + v11)
            goto LABEL_11;
          v9 = *(void **)v5;
          if (*(_DWORD *)(*(_QWORD *)v5 + 8) != a2)
          {
            v8 = 1;
            break;
          }
        }
      }
      v5 += 8;
    }
    while (v5 != v4);
    if ((v8 & 1) == 0)
      goto LABEL_12;
LABEL_11:
    v12 = 0;
  }
  *(_DWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  *(_DWORD *)(a3 + 16) = 249;
}

uint64_t sub_2341B4DC0@<X0>(char *__s@<X1>, uint64_t result@<X0>, const char *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  int v12;

  v7 = *(_QWORD *)result;
  v6 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result != v6)
  {
    v11 = result;
    do
    {
      result = *(_QWORD *)v7;
      if (!*(_DWORD *)(*(_QWORD *)v7 + 8))
      {
        result = sub_2341B4E60(result, __s, a3);
        if ((result & 1) != 0)
        {
          v12 = 0;
          *a4 = *(_QWORD *)v7;
          goto LABEL_8;
        }
        v6 = *(_QWORD *)(v11 + 8);
      }
      v7 += 8;
    }
    while (v7 != v6);
  }
  v12 = 16;
LABEL_8:
  *(_DWORD *)a5 = v12;
  *(_QWORD *)(a5 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  *(_DWORD *)(a5 + 16) = 301;
  return result;
}

BOOL sub_2341B4E60(uint64_t a1, char *__s, const char *a3)
{
  _QWORD *v6;
  size_t v7;
  _QWORD *v9;
  size_t v10;

  v6 = (_QWORD *)(a1 + 40);
  v7 = strlen(__s);
  if (*(char *)(a1 + 63) < 0)
  {
    if (v7 == *(_QWORD *)(a1 + 48))
    {
      if (v7 == -1)
        goto LABEL_18;
      v6 = (_QWORD *)*v6;
      goto LABEL_8;
    }
    return 0;
  }
  if (v7 != *(unsigned __int8 *)(a1 + 63))
    return 0;
  if (v7 == -1)
    goto LABEL_18;
LABEL_8:
  if (memcmp(v6, __s, v7))
    return 0;
  v9 = (_QWORD *)(a1 + 64);
  v10 = strlen(a3);
  if (*(char *)(a1 + 87) < 0)
  {
    if (v10 != *(_QWORD *)(a1 + 72))
      return 0;
    if (v10 == -1)
      goto LABEL_18;
    v9 = (_QWORD *)*v9;
  }
  else
  {
    if (v10 != *(unsigned __int8 *)(a1 + 87))
      return 0;
    if (v10 == -1)
LABEL_18:
      abort();
  }
  return memcmp(v9, a3, v10) == 0;
}

uint64_t sub_2341B4F4C(uint64_t **a1, char *__s)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
    return 0;
  while (*(_DWORD *)(*v2 + 8) != 3 || !sub_2341B4FB0(*v2, __s))
  {
    if (++v2 == v3)
      return 0;
  }
  return *v2;
}

BOOL sub_2341B4FB0(uint64_t a1, char *__s)
{
  _QWORD *v4;
  size_t v5;

  v4 = (_QWORD *)(a1 + 72);
  v5 = strlen(__s);
  if (*(char *)(a1 + 95) < 0)
  {
    if (v5 == *(_QWORD *)(a1 + 80))
    {
      if (v5 == -1)
        goto LABEL_10;
      v4 = (_QWORD *)*v4;
      return memcmp(v4, __s, v5) == 0;
    }
  }
  else if (v5 == *(unsigned __int8 *)(a1 + 95))
  {
    if (v5 == -1)
LABEL_10:
      abort();
    return memcmp(v4, __s, v5) == 0;
  }
  return 0;
}

uint64_t sub_2341B5040(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  while (v2 != v3)
  {
    result = *v2;
    if (*(_DWORD *)(*v2 + 8) == 2 && *(_QWORD *)(result + 16) == a2)
      return result;
    ++v2;
  }
  return 0;
}

uint64_t sub_2341B5078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  *(_QWORD *)a1 = &off_250513E80;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v7 = a1 + 64;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 128) = -1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 32) = a4;
  MEMORY[0x23493E5F0](a1 + 40);
  MEMORY[0x23493E5F0](v7, a3);
  return a1;
}

void sub_2341B50F8(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  void (*v7)(uint64_t, _QWORD, _QWORD, __int128 *);
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v12 = a2;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Mdns: Register failure (%s)", buf, 0xCu);
  }
  if (sub_234114844(1u))
    sub_2341147D0(0x22u, 1);
  v7 = (void (*)(uint64_t, _QWORD, _QWORD, __int128 *))a1[4];
  v8 = a1[2];
  v9 = *a3;
  v10 = *((_QWORD *)a3 + 2);
  v7(v8, 0, 0, &v9);
  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  sub_2341B4C44(&qword_254253108, a1, (uint64_t)buf);
}

void sub_2341B522C(uint64_t a1)
{
  __n128 v2;
  void (*v3)(uint64_t, void **, _QWORD *, int *, __n128);
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  std::string __p;
  void *v12[2];
  char v13;

  if (*(char *)(a1 + 63) < 0)
    sub_233C0DAF8(&__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  v2 = sub_2341BCF84(&__p, (uint64_t)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v3 = *(void (**)(uint64_t, void **, _QWORD *, int *, __n128))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 16);
  if (v13 >= 0)
    v5 = v12;
  else
    v5 = (void **)v12[0];
  v6 = (_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v6 = (_QWORD *)*v6;
  v8 = 0;
  v9 = "src/platform/Darwin/DnssdContexts.cpp";
  v10 = 350;
  v3(v4, v5, v6, &v8, v2);
  sub_2341B8A30(a1 + 88, v7);
  if (v13 < 0)
    operator delete(v12[0]);
}

uint64_t sub_2341B5300(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)result = off_250513EB0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 32) = a4;
  return result;
}

void sub_2341B532C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  void (*v9)(uint64_t, _QWORD, _QWORD, uint64_t, __int128 *);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a3 == 116 && *(_BYTE *)(a1 + 72))
  {
    v6 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Mdns: Browse canceled", buf, 2u);
    }
    if (sub_234114844(2u))
    {
      v7 = 2;
LABEL_11:
      sub_2341147D0(0x22u, v7);
    }
  }
  else
  {
    v8 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v14 = a2;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Mdns: Browse failure (%s)", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      v7 = 1;
      goto LABEL_11;
    }
  }
  v9 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, __int128 *))(a1 + 40);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *a3;
  v12 = *((_QWORD *)a3 + 2);
  v9(v10, 0, 0, 1, &v11);
  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  sub_2341B4C44(&qword_254253108, (void *)a1, (uint64_t)buf);
}

void sub_2341B54E0()
{
  NSObject *v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  const char *v6;

  v0 = sub_234117B80(0x1Bu, "Support");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v2 = "src/platform/Darwin/DnssdContexts.cpp";
    v3 = 1024;
    v4 = 389;
    v5 = 2080;
    v6 = "false";
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
  }
  if (sub_234114844(1u))
    sub_2341147D0(0x1Bu, 1);
  abort();
}

void sub_2341B55A4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t *v37;
  void *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[26];
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  void *__p;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = &unk_25615D000;
  qword_25615DDD0 = a1;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v3 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(a1 + 48);
  if (v3 != v5)
  {
    v37 = (uint64_t *)(a1 + 48);
    do
    {
      sub_2341B7B2C((uint64_t)&v41, v3);
      v6 = v39;
      if (v39 >= v40)
      {
        v15 = 0x86BCA1AF286BCA1BLL * ((v39 - (_BYTE *)v38) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0x1AF286BCA1AF286)
          abort();
        if (0xD79435E50D79436 * ((v40 - (_BYTE *)v38) >> 3) > v16)
          v16 = 0xD79435E50D79436 * ((v40 - (_BYTE *)v38) >> 3);
        if (0x86BCA1AF286BCA1BLL * ((v40 - (_BYTE *)v38) >> 3) >= 0xD79435E50D7943)
          v17 = 0x1AF286BCA1AF286;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_2341B7E50((uint64_t)&v40, v17);
        else
          v18 = 0;
        v19 = &v18[8 * ((v39 - (_BYTE *)v38) >> 3)];
        v20 = v42;
        *(_OWORD *)v19 = v41;
        *((_OWORD *)v19 + 1) = v20;
        v21 = v43;
        v22 = v44;
        v23 = *(_OWORD *)v45;
        *(_OWORD *)(v19 + 74) = *(_OWORD *)&v45[10];
        *((_OWORD *)v19 + 3) = v22;
        *((_OWORD *)v19 + 4) = v23;
        *((_OWORD *)v19 + 2) = v21;
        *((_DWORD *)v19 + 23) = v46;
        v25 = v48;
        v24 = v49;
        v26 = v47;
        *((_QWORD *)v19 + 18) = v50;
        *((_OWORD *)v19 + 7) = v25;
        *((_OWORD *)v19 + 8) = v24;
        *((_OWORD *)v19 + 6) = v26;
        v28 = (char *)v38;
        v27 = v39;
        v29 = &v18[152 * v15];
        if (v39 != v38)
        {
          do
          {
            v30 = *(_OWORD *)(v27 - 152);
            *(_OWORD *)(v29 - 136) = *(_OWORD *)(v27 - 136);
            *(_OWORD *)(v29 - 152) = v30;
            v31 = *(_OWORD *)(v27 - 120);
            v32 = *(_OWORD *)(v27 - 104);
            v33 = *(_OWORD *)(v27 - 88);
            *(_OWORD *)(v29 - 78) = *(_OWORD *)(v27 - 78);
            *(_OWORD *)(v29 - 88) = v33;
            *(_OWORD *)(v29 - 104) = v32;
            *(_OWORD *)(v29 - 120) = v31;
            *((_DWORD *)v29 - 15) = *((_DWORD *)v27 - 15);
            v34 = *(_OWORD *)(v27 - 56);
            v35 = *(_OWORD *)(v27 - 40);
            v36 = *(_OWORD *)(v27 - 24);
            *((_QWORD *)v29 - 1) = *((_QWORD *)v27 - 1);
            *(_OWORD *)(v29 - 24) = v36;
            *(_OWORD *)(v29 - 40) = v35;
            *(_OWORD *)(v29 - 56) = v34;
            v29 -= 152;
            v27 -= 152;
          }
          while (v27 != v28);
          v27 = (char *)v38;
        }
        v14 = v19 + 152;
        v38 = v29;
        v39 = v19 + 152;
        v40 = &v18[152 * v17];
        if (v27)
          operator delete(v27);
      }
      else
      {
        v7 = v42;
        *(_OWORD *)v39 = v41;
        *((_OWORD *)v6 + 1) = v7;
        v8 = v43;
        v9 = v44;
        v10 = *(_OWORD *)v45;
        *(_OWORD *)(v6 + 74) = *(_OWORD *)&v45[10];
        *((_OWORD *)v6 + 3) = v9;
        *((_OWORD *)v6 + 4) = v10;
        *((_OWORD *)v6 + 2) = v8;
        *((_DWORD *)v6 + 23) = v46;
        v11 = v47;
        v12 = v48;
        v13 = v49;
        *((_QWORD *)v6 + 18) = v50;
        *((_OWORD *)v6 + 7) = v12;
        *((_OWORD *)v6 + 8) = v13;
        *((_OWORD *)v6 + 6) = v11;
        v14 = v6 + 152;
      }
      v39 = v14;
      if (v52 < 0)
        operator delete(__p);
      v3 += 176;
    }
    while (v3 != v5);
    v2 = (_QWORD *)&unk_25615D000;
    v4 = v37;
  }
  qword_25615DDD8 = (uint64_t)&v38;
  (*(void (**)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 16));
  qword_25615DDD8 = 0;
  v2[442] = 0;
  sub_2341B7D58(v4);
  *(_BYTE *)(a1 + 72) = 1;
  if (v38)
  {
    v39 = (char *)v38;
    operator delete(v38);
  }
}

void sub_2341B58C4(_QWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = 40;
  if ((a2 & 2) == 0)
    v8 = 48;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + v8))(a1, a3, a4, a5, a6);
  if ((a2 & 1) == 0)
    sub_2341B55A4((uint64_t)a1);
}

void sub_2341B5924(uint64_t a1, const char *a2, char *a3, char *a4, int a5)
{
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  int v14;
  unint64_t v15;
  void *v16;
  char v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *__p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[5];
  _BYTE v41[15];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  _BYTE buf[32];
  __int128 v48;
  __int128 v49;
  _BYTE v50[26];
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v10 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = "(null)";
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "OnBrowseAdd";
    if (a2)
      v12 = a2;
    else
      v12 = "(null)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v12;
    if (a3)
      v13 = a3;
    else
      v13 = "(null)";
    *(_WORD *)&buf[22] = 2080;
    if (a4)
      v11 = a4;
    *(_QWORD *)&buf[24] = v13;
    LOWORD(v48) = 2080;
    *(_QWORD *)((char *)&v48 + 2) = v11;
    WORD5(v48) = 1024;
    HIDWORD(v48) = a5;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s  name: %s, type: %s, domain: %s, interface: %u", buf, 0x30u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  sub_2341B5C88(a3, a2, *(_BYTE *)(a1 + 32), a5, (uint64_t)buf);
  sub_2341B7DA4(&__p, a4);
  v44 = v48;
  v45 = v49;
  v46[0] = *(_OWORD *)v50;
  *(_OWORD *)((char *)v46 + 10) = *(_OWORD *)&v50[10];
  v42 = *(_OWORD *)buf;
  v43 = *(_OWORD *)&buf[16];
  v14 = v51;
  v36 = v52;
  v37 = v53;
  v38 = v54;
  v15 = *(_QWORD *)(a1 + 64);
  v39 = v55;
  *(_QWORD *)&v41[7] = *(_QWORD *)((char *)&v35 + 7);
  v16 = __p;
  *(_QWORD *)v41 = v35;
  v17 = HIBYTE(v35);
  v35 = 0uLL;
  __p = 0;
  v18 = *(_QWORD *)(a1 + 56);
  if (v18 >= v15)
  {
    v20 = *(_QWORD *)(a1 + 48);
    v21 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v18 - v20) >> 4);
    if ((unint64_t)(v21 + 1) > 0x1745D1745D1745DLL)
      abort();
    v22 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v15 - v20) >> 4);
    v23 = 2 * v22;
    if (2 * v22 <= v21 + 1)
      v23 = v21 + 1;
    if (v22 >= 0xBA2E8BA2E8BA2ELL)
      v24 = 0x1745D1745D1745DLL;
    else
      v24 = v23;
    v40[4] = a1 + 64;
    v25 = (char *)sub_2341B7F5C(a1 + 64, v24);
    v26 = &v25[176 * v21];
    v40[0] = v25;
    v40[1] = v26;
    v40[3] = &v25[176 * v27];
    v28 = v45;
    *((_OWORD *)v26 + 2) = v44;
    *((_OWORD *)v26 + 3) = v28;
    *((_OWORD *)v26 + 4) = v46[0];
    *(_OWORD *)(v26 + 74) = *(_OWORD *)((char *)v46 + 10);
    v29 = v43;
    *(_OWORD *)v26 = v42;
    *((_OWORD *)v26 + 1) = v29;
    *((_DWORD *)v26 + 23) = v14;
    v30 = v37;
    *((_OWORD *)v26 + 6) = v36;
    *((_OWORD *)v26 + 7) = v30;
    v31 = v39;
    *((_OWORD *)v26 + 8) = v38;
    *((_QWORD *)v26 + 18) = v31;
    *((_QWORD *)v26 + 19) = v16;
    *((_QWORD *)v26 + 20) = *(_QWORD *)v41;
    *(_QWORD *)(v26 + 167) = *(_QWORD *)&v41[7];
    v26[175] = v17;
    v40[2] = v26 + 176;
    sub_2341B7E98((uint64_t *)(a1 + 48), v40);
    v32 = *(_QWORD *)(a1 + 56);
    sub_2341B7FA4((uint64_t)v40);
    v33 = SHIBYTE(v35);
    *(_QWORD *)(a1 + 56) = v32;
    if (v33 < 0)
      operator delete(__p);
  }
  else
  {
    memmove(*(void **)(a1 + 56), buf, 0x5AuLL);
    *(_DWORD *)(v18 + 92) = v14;
    v19 = v37;
    *(_OWORD *)(v18 + 96) = v36;
    *(_OWORD *)(v18 + 112) = v19;
    *(_OWORD *)(v18 + 128) = v38;
    *(_QWORD *)(v18 + 144) = v39;
    *(_QWORD *)(v18 + 152) = v16;
    *(_QWORD *)(v18 + 160) = *(_QWORD *)v41;
    *(_QWORD *)(v18 + 167) = *(_QWORD *)&v41[7];
    *(_BYTE *)(v18 + 175) = v17;
    *(_QWORD *)(a1 + 56) = v18 + 176;
  }
}

void sub_2341B5C88(char *__s@<X1>, const char *a2@<X0>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char *v7;
  int v8;
  void *v9;
  const char *v10;
  _QWORD v11[2];
  char v12;

  *(_WORD *)(a5 + 88) = 0;
  *(_BYTE *)(a5 + 144) = 0;
  v7 = (char *)(a5 + 75);
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_BYTE *)(a5 + 128) = 0;
  *(_QWORD *)(a5 + 79) = 0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_DWORD *)(a5 + 148) = 120;
  *(_DWORD *)(a5 + 92) = a4;
  *(_BYTE *)(a5 + 84) = a3;
  sub_2341BD038(__s, (uint64_t)v11);
  v8 = v12;
  v9 = (void *)v11[0];
  if (v12 >= 0)
    v10 = (const char *)v11;
  else
    v10 = (const char *)v11[0];
  strncpy(v7, v10, 9uLL);
  *(_BYTE *)(a5 + 83) = 0;
  strncpy((char *)a5, a2, 0x22uLL);
  *(_BYTE *)(a5 + 33) = 0;
  if (v8 < 0)
    operator delete(v9);
}

void sub_2341B5D44(uint64_t a1, const char *a2, const char *a3, char *a4, int a5)
{
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  _QWORD v17[2];
  int v18;
  _BYTE *v19;
  _BYTE buf[12];
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v10 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v11 = a2;
    else
      v11 = "(null)";
    *(_DWORD *)buf = 136316162;
    if (a3)
      v12 = a3;
    else
      v12 = "(null)";
    *(_QWORD *)&buf[4] = "OnBrowseRemove";
    v21 = 2080;
    if (a4)
      v13 = a4;
    else
      v13 = "(null)";
    v22 = v11;
    v23 = 2080;
    v24 = v12;
    v25 = 2080;
    v26 = v13;
    v27 = 1024;
    v28 = a5;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s  name: %s, type: %s, domain: %s, interface: %u", buf, 0x30u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  if (a2)
  {
    sub_2341B7DA4(buf, a4);
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(_QWORD *)(a1 + 56);
    v17[0] = a2;
    v17[1] = a3;
    v18 = a5;
    v19 = buf;
    if (v14 != v15)
    {
      while (!sub_2341B802C((uint64_t)v17, v14))
      {
        v14 += 176;
        if (v14 == v15)
        {
          v14 = v15;
          goto LABEL_25;
        }
      }
      if (v14 != v15)
      {
        for (i = v14 + 176; i != v15; i += 176)
        {
          if (!sub_2341B802C((uint64_t)v17, i))
          {
            sub_2341B8194(v14, i);
            v14 += 176;
          }
        }
      }
    }
LABEL_25:
    sub_2341B5F54(a1 + 48, v14, *(_QWORD *)(a1 + 56));
    if (SHIBYTE(v23) < 0)
      operator delete(*(void **)buf);
  }
}

uint64_t sub_2341B5F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != a3)
  {
    sub_2341B822C(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 176;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_2341B5FCC(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)result = &off_250513EF8;
  *(_DWORD *)(result + 8) = 2;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 32) = a3;
  return result;
}

void sub_2341B5FEC(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v11 = a2;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Mdns: Browse failure (%s)", buf, 0xCu);
  }
  if (sub_234114844(1u))
    sub_2341147D0(0x22u, 1);
  v7 = a1[2];
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 32))(v7, &v8);
  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  sub_2341B4C44(&qword_254253108, a1, (uint64_t)buf);
}

void sub_2341B611C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  const char *v5;
  int v6;

  v2 = a1[2];
  v4 = 0;
  v5 = "src/platform/Darwin/DnssdContexts.cpp";
  v6 = 465;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v2 + 32))(v2, &v4);
  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  sub_2341B4C44(&qword_254253108, a1, (uint64_t)&v3);
}

uint64_t sub_2341B61A0(_QWORD *a1, char a2)
{
  uint64_t v2;

  v2 = 40;
  if ((a2 & 2) == 0)
    v2 = 48;
  return (*(uint64_t (**)(void))(*a1 + v2))();
}

uint64_t sub_2341B61CC(uint64_t a1, const char *a2, char *a3, const char *a4, int a5)
{
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  _OWORD v16[4];
  _BYTE v17[26];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE buf[32];
  __int128 v24;
  __int128 v25;
  _BYTE v26[26];
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v10 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v11 = a2;
    else
      v11 = "(null)";
    *(_DWORD *)buf = 136316162;
    if (a3)
      v12 = a3;
    else
      v12 = "(null)";
    *(_QWORD *)&buf[4] = "OnBrowseAdd";
    *(_WORD *)&buf[12] = 2080;
    if (a4)
      v13 = a4;
    else
      v13 = "(null)";
    *(_QWORD *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = v12;
    LOWORD(v24) = 2080;
    *(_QWORD *)((char *)&v24 + 2) = v13;
    WORD5(v24) = 1024;
    HIDWORD(v24) = a5;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s  name: %s, type: %s, domain: %s, interface: %u", buf, 0x30u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  v14 = *(_QWORD *)(a1 + 16);
  sub_2341B5C88(a3, a2, *(_BYTE *)(a1 + 32), a5, (uint64_t)buf);
  v16[2] = v24;
  v16[3] = v25;
  *(_OWORD *)v17 = *(_OWORD *)v26;
  *(_OWORD *)&v17[10] = *(_OWORD *)&v26[10];
  v16[0] = *(_OWORD *)buf;
  v16[1] = *(_OWORD *)&buf[16];
  v18 = v27;
  v22 = v31;
  v20 = v29;
  v21 = v30;
  v19 = v28;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v16);
}

uint64_t sub_2341B63A8(uint64_t a1, const char *a2, char *a3, const char *a4, int a5)
{
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t result;
  uint64_t v15;
  _OWORD v16[4];
  _BYTE v17[26];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE buf[32];
  __int128 v24;
  __int128 v25;
  _BYTE v26[26];
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v10 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v11 = a2;
    else
      v11 = "(null)";
    *(_DWORD *)buf = 136316162;
    if (a3)
      v12 = a3;
    else
      v12 = "(null)";
    *(_QWORD *)&buf[4] = "OnBrowseRemove";
    *(_WORD *)&buf[12] = 2080;
    if (a4)
      v13 = a4;
    else
      v13 = "(null)";
    *(_QWORD *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = v12;
    LOWORD(v24) = 2080;
    *(_QWORD *)((char *)&v24 + 2) = v13;
    WORD5(v24) = 1024;
    HIDWORD(v24) = a5;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s  name: %s, type: %s, domain: %s, interface: %u", buf, 0x30u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    result = sub_2341147D0(0x22u, 2);
  if (a2)
  {
    v15 = *(_QWORD *)(a1 + 16);
    sub_2341B5C88(a3, a2, *(_BYTE *)(a1 + 32), a5, (uint64_t)buf);
    v16[2] = v24;
    v16[3] = v25;
    *(_OWORD *)v17 = *(_OWORD *)v26;
    *(_OWORD *)&v17[10] = *(_OWORD *)&v26[10];
    v16[0] = *(_OWORD *)buf;
    v16[1] = *(_OWORD *)&buf[16];
    v18 = v27;
    v22 = v31;
    v20 = v29;
    v21 = v30;
    v19 = v28;
    return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v15 + 24))(v15, v16);
  }
  return result;
}

uint64_t sub_2341B6588(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)a1 = &off_250513F40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v9 = a1 + 48;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 136) = 1;
  v10 = a1 + 96;
  *(_DWORD *)(a1 + 8) = 3;
  *(_OWORD *)(a1 + 72) = 0u;
  v11 = a1 + 72;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1;
  *(_QWORD *)(a1 + 144) = a1;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = v9;
  if (a4 == 2)
    v12 = 2;
  else
    v12 = 3;
  if (a4 == 1)
    v12 = 1;
  *(_DWORD *)(a1 + 64) = v12;
  MEMORY[0x23493E5F0](v11, a5);
  sub_23412A514(v10, a7);
  return a1;
}

uint64_t sub_2341B6638(uint64_t a1, uint64_t a2, int a3, uint64_t a4, __int128 *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = &off_250513F40;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = a1 + 48;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v8 = a1 + 96;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_DWORD *)(a1 + 8) = 3;
  *(_OWORD *)(a1 + 72) = 0u;
  v9 = a1 + 72;
  *(_QWORD *)(a1 + 128) = a1;
  *(_QWORD *)(a1 + 144) = a1;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  if (a3 == 2)
    v10 = 2;
  else
    v10 = 3;
  if (a3 == 1)
    v10 = 1;
  *(_DWORD *)(a1 + 64) = v10;
  MEMORY[0x23493E5F0](v9, a4);
  sub_23412A514(v8, a5);
  return a1;
}

uint64_t sub_2341B66E8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_250513F40;
  sub_2341B673C(a1);
  sub_233CF2D00(a1 + 96);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  sub_2341B8288(a1 + 40, *(_QWORD **)(a1 + 48));
  return a1;
}

uint64_t sub_2341B673C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  uint8_t buf[4];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 121))
  {
    v1 = result;
    v2 = sub_2341B1F60(result);
    (*(void (**)(uint64_t, double (*)(uint64_t, char *), uint64_t))(*(_QWORD *)v2 + 72))(v2, sub_2341B6F34, v1);
    v3 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(v1 + 72);
      if (*(char *)(v1 + 95) < 0)
        v4 = (_QWORD *)*v4;
      *(_DWORD *)buf = 136315138;
      v6 = v4;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "SRP resolve timer for %s cancelled; resolve timed out",
        buf,
        0xCu);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x22u, 2);
    *(_BYTE *)(v1 + 121) = 0;
  }
  return result;
}

void sub_2341B6850(uint64_t a1)
{
  sub_2341B66E8(a1);
  JUMPOUT(0x23493E704);
}

void sub_2341B6874(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _QWORD, uint8_t *, __int128 *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint8_t buf[24];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Mdns: Resolve failure (%s)", buf, 0xCu);
  }
  v7 = sub_234114844(1u);
  if ((_DWORD)v7)
    v7 = sub_2341147D0(0x22u, 1);
  if (byte_254253120)
  {
    if (qword_254253108 == qword_254253110)
    {
LABEL_10:
      v9 = 0;
    }
    else
    {
      v8 = 0;
      while (*(_QWORD **)(qword_254253108 + v8) != a1)
      {
        v8 += 8;
        if (qword_254253108 + v8 == qword_254253110)
          goto LABEL_10;
      }
      v10 = qword_254253108 + v8;
      v11 = (const void *)(qword_254253108 + v8 + 8);
      v12 = qword_254253110 - (_QWORD)v11;
      if ((const void *)qword_254253110 != v11)
        v7 = (uint64_t)memmove((void *)(qword_254253108 + v8), v11, qword_254253110 - (_QWORD)v11);
      qword_254253110 = v10 + v12;
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  v13 = (uint64_t (*)(uint64_t, _QWORD, uint8_t *, __int128 *))a1[4];
  if (v13)
  {
    v14 = a1[2];
    *(_OWORD *)buf = 0uLL;
    v15 = *a3;
    v16 = *((_QWORD *)a3 + 2);
    v7 = v13(v14, 0, buf, &v15);
  }
  if (v9)
  {
    if (!byte_254253120)
    {
      byte_254253120 = 1;
      qword_254253110 = 0;
      unk_254253118 = 0;
      qword_254253108 = 0;
    }
    sub_2341B4984(v7, a1);
  }
}

void sub_2341B6A2C(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  NSObject *v13;
  _QWORD *v14;
  uint8_t buf[4];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (byte_254253120)
  {
    if (qword_254253108 == qword_254253110)
    {
LABEL_6:
      v3 = 1;
    }
    else
    {
      v2 = 0;
      while (*(_QWORD *)(qword_254253108 + v2) != a1)
      {
        v2 += 8;
        if (qword_254253108 + v2 == qword_254253110)
          goto LABEL_6;
      }
      v4 = qword_254253108 + v2;
      v5 = (const void *)(qword_254253108 + v2 + 8);
      v6 = qword_254253110 - (_QWORD)v5;
      if ((const void *)qword_254253110 != v5)
        memmove((void *)(qword_254253108 + v2), v5, qword_254253110 - (_QWORD)v5);
      v3 = 0;
      qword_254253110 = v4 + v6;
    }
  }
  else
  {
    v3 = 1;
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25615B768);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25615B768))
  {
    dword_25615B760 = if_nametoindex("lo0");
    __cxa_guard_release(&qword_25615B768);
  }
  if (!dword_25615B760 || (v8 = sub_2341B6C80(a1, dword_25615B760), (v8 & 1) == 0))
  {
    v9 = *(_QWORD **)(a1 + 40);
    if (v9 == (_QWORD *)(a1 + 48))
    {
LABEL_22:
      v13 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = (_QWORD *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0)
          v14 = (_QWORD *)*v14;
        *(_DWORD *)buf = 136315138;
        v16 = v14;
        _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Successfully finalizing resolve for %s without finding any actual IP addresses.", buf, 0xCu);
      }
      v8 = sub_234114844(1u);
      if ((_DWORD)v8)
        v8 = sub_2341147D0(0x22u, 1);
    }
    else
    {
      while (1)
      {
        v8 = sub_2341B6D20(a1, *((_DWORD *)v9 + 8), (__int128 *)(v9 + 5), *((_BYTE *)v9 + 64));
        if ((v8 & 1) != 0)
          break;
        v10 = (_QWORD *)v9[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v9[2];
            v12 = *v11 == (_QWORD)v9;
            v9 = v11;
          }
          while (!v12);
        }
        v9 = v11;
        if (v11 == (_QWORD *)(a1 + 48))
          goto LABEL_22;
      }
    }
  }
  if ((v3 & 1) == 0)
  {
    if (!byte_254253120)
    {
      byte_254253120 = 1;
      qword_254253110 = 0;
      unk_254253118 = 0;
      qword_254253108 = 0;
    }
    sub_2341B4984(v8, (void *)a1);
  }
}

uint64_t sub_2341B6C80(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = (_QWORD *)(a1 + 48);
  if (v2 == (_QWORD *)(a1 + 48))
    return 0;
  while (*((_DWORD *)v2 + 8) != a2 || !sub_2341B6D20(a1, a2, (__int128 *)(v2 + 5), *((_BYTE *)v2 + 64)))
  {
    v6 = (_QWORD *)v2[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v2[2];
        v8 = *v7 == (_QWORD)v2;
        v2 = v7;
      }
      while (!v8);
    }
    v2 = v7;
    if (v7 == v3)
      return 0;
  }
  return 1;
}

BOOL sub_2341B6D20(uint64_t a1, int a2, __int128 *a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  NSObject *v11;
  void (*v12)(uint64_t, uint64_t *, uint64_t *, int *);
  uint64_t v13;
  int v15;
  const char *v16;
  int v17;
  uint64_t v18[2];
  int v19;
  __int128 __p;
  uint64_t v21;
  char v22;
  uint8_t buf[8];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_233C0DAF8(&__p, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    __p = *a3;
    v21 = *((_QWORD *)a3 + 2);
  }
  v22 = a4;
  *(_QWORD *)buf = &v19;
  v7 = sub_2341B830C((uint64_t **)(a1 + 40), (uint64_t)&v19, (uint64_t)&unk_2342A9433, (uint64_t *)buf);
  v9 = v7[28];
  v8 = v7[29];
  if (v8 != v9)
  {
    v10 = v7;
    v11 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Mdns: Resolve success on interface %u", buf, 8u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
    sub_2341B864C(v18, v10[28], (v10[29] - v10[28]) >> 4);
    v12 = *(void (**)(uint64_t, uint64_t *, uint64_t *, int *))(a1 + 32);
    v13 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v15 = 0;
      v16 = "src/platform/Darwin/DnssdContexts.cpp";
      v17 = 652;
      v12(v13, v10 + 9, v18, &v15);
    }
    else
    {
      *(_QWORD *)buf = -1;
      if (*(uint64_t *)((char *)v10 + 147) == 0x72657474616D5FLL)
        sub_2341F4AF0((uint64_t)(v10 + 9), buf);
      else
        sub_2341F4B54((uint64_t)(v10 + 9), v18, (uint64_t)buf);
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, buf);
    }
  }
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  return v8 != v9;
}

double sub_2341B6F34(uint64_t a1, char *a2)
{
  NSObject *v3;
  _QWORD *v4;
  __n128 buf;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    sub_23425C258(a1);
  a2[121] = 0;
  v3 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a2 + 72;
    if (a2[95] < 0)
      v4 = (_QWORD *)*v4;
    buf.n128_u32[0] = 136315138;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "SRP resolve timer for %s expired; completing resolve",
      (uint8_t *)&buf,
      0xCu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  return sub_2341B48A4(a2, 0, &buf);
}

void sub_2341B7038(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t **v9;
  NSObject *v10;
  _QWORD *v11;
  NSObject *v12;
  int v13;
  _QWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _BYTE buf[12];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  char *v35;
  char v36[46];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = (uint64_t **)(a1 + 40);
  if ((_QWORD *)(a1 + 48) == sub_2341B866C(a1 + 40, (uint64_t)a2))
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
    v13 = 706;
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_23410ED7C(a3, &v28, a4);
    if (*(_DWORD *)a4)
      return;
    sub_23410EA90(&v28, v36, 0x2Eu);
    v10 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (_QWORD *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "OnNewAddress";
      v30 = 2080;
      v31 = v11;
      v32 = 1024;
      v33 = v8;
      v34 = 2080;
      v35 = v36;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Mdns: %s instance: %s interface: %u ip: %s", buf, 0x26u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
    if (sub_23410EF74(&v28) && v8 == -1)
    {
      v12 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "Mdns: Ignoring link-local address with no usable interface", buf, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x22u, 2);
      v13 = 725;
    }
    else
    {
      *(_QWORD *)buf = a2;
      v14 = sub_2341B830C(v9, (uint64_t)a2, (uint64_t)&unk_2342A9433, (uint64_t *)buf);
      v15 = (_OWORD *)v14[29];
      v16 = v14[30];
      if ((unint64_t)v15 >= v16)
      {
        v18 = v14[28];
        v19 = ((uint64_t)v15 - v18) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          abort();
        v21 = v16 - v18;
        if (v21 >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
          v23 = (char *)sub_2341B86F8((uint64_t)(v14 + 30), v22);
        else
          v23 = 0;
        v24 = &v23[16 * v19];
        v25 = &v23[16 * v22];
        *(_OWORD *)v24 = v28;
        v17 = v24 + 16;
        v27 = (char *)v14[28];
        v26 = (char *)v14[29];
        if (v26 != v27)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v26 - 1);
            v24 -= 16;
            v26 -= 16;
          }
          while (v26 != v27);
          v26 = (char *)v14[28];
        }
        v14[28] = v24;
        v14[29] = v17;
        v14[30] = v25;
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v15 = v28;
        v17 = v15 + 1;
      }
      v14[29] = v17;
      v13 = 730;
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/platform/Darwin/DnssdContexts.cpp";
  }
  *(_DWORD *)(a4 + 16) = v13;
}

BOOL sub_2341B735C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v1 = *(_QWORD **)(a1 + 40);
  v2 = (_QWORD *)(a1 + 48);
  if (v1 == (_QWORD *)(a1 + 48))
    return 0;
  do
  {
    v4 = v1[28];
    v3 = v1[29];
    result = v3 != v4;
    if (v3 != v4)
      break;
    v6 = (_QWORD *)v1[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v1[2];
        v8 = *v7 == (_QWORD)v1;
        v1 = v7;
      }
      while (!v8);
    }
    v1 = v7;
  }
  while (v7 != v2);
  return result;
}

void sub_2341B73C0(uint64_t a1, int a2, const char *a3, char *a4, unsigned int a5, unsigned int a6, unsigned __int8 *a7, char a8)
{
  uint16_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type size;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  int v22;
  int v23;
  NSObject *v24;
  unsigned int v25;
  std::string *v26;
  int v27;
  char v28;
  std::string::size_type v29;
  int64_t v30;
  std::string *v31;
  _BYTE *v32;
  std::string *v33;
  _BYTE *v34;
  std::string *v35;
  unsigned int Count;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  char **v42;
  std::string v49;
  std::string v50;
  void *value;
  uint8_t valueLen;
  _BYTE buf[22];
  __int16 v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  std::string *v61;
  char key[8];
  void *v63;
  char v64;
  char v65;
  char __str[34];
  char v67[54];
  __int16 v68;
  int v69;
  char *v70;
  uint64_t v71;
  char v72;
  char v73;
  int v74;
  __int128 v75;
  _BYTE v76[40];
  uint64_t v77;

  v9 = a6;
  v77 = *MEMORY[0x24BDAC8D0];
  memset(&v50, 0, sizeof(v50));
  if (a6)
  {
    v10 = a6;
    v11 = MEMORY[0x24BDAC740];
    v12 = a7;
    while (1)
    {
      v15 = *v12;
      v14 = (uint64_t)(v12 + 1);
      v13 = v15;
      v16 = v10 - 1;
      if (v10 - 1 >= (unint64_t)v15)
        v17 = v13;
      else
        v17 = v10 - 1;
      sub_233BF7114(buf, v14, v17);
      size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v50.__r_.__value_.__l.__size_;
      if (size)
        std::string::push_back(&v50, 44);
      v19 = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8])
        break;
LABEL_25:
      v12 = (unsigned __int8 *)(v14 + v17);
      v10 = v16 - v17;
      if (v16 == v17)
        goto LABEL_26;
    }
    v20 = *(_BYTE **)buf;
    while (1)
    {
      v21 = (char)*v20;
      if (v21 < 0)
      {
        v22 = __maskrune(*v20, 0x500uLL);
        LOBYTE(v21) = *v20;
        if (v22)
          goto LABEL_20;
      }
      else if ((*(_DWORD *)(v11 + 4 * *v20 + 60) & 0x500) != 0)
      {
        goto LABEL_20;
      }
      if ((v21 & 0x80) != 0)
      {
        v23 = __maskrune(v21, 0x2000uLL);
        LOBYTE(v21) = *v20;
        if (!v23)
          goto LABEL_22;
      }
      else if ((*(_DWORD *)(v11 + 4 * v21 + 60) & 0x2000) == 0)
      {
        goto LABEL_22;
      }
LABEL_20:
      if (v21 != 44 && v21 != 92)
      {
        std::string::push_back(&v50, v21);
        goto LABEL_24;
      }
LABEL_22:
      snprintf(__str, 5uLL, "\\x%02x", v21);
      std::string::append(&v50, __str);
LABEL_24:
      ++v20;
      if (!--v19)
        goto LABEL_25;
    }
  }
LABEL_26:
  v24 = sub_234117B80(0x22u, "Discovery");
  v25 = __rev16(a5);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v26 = &v50;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)v50.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "OnNewInterface";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = a4;
    v54 = 2080;
    v55 = a3;
    v56 = 1024;
    v57 = a2;
    v58 = 1024;
    v59 = v25;
    v60 = 2080;
    v61 = v26;
    _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_DEFAULT, "Mdns : %s hostname:%s fullname:%s interface: %u port: %u TXT:\"%s\"", buf, 0x36u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  v72 = 0;
  v73 = 0;
  v74 = 120;
  v71 = 0;
  v70 = 0;
  v75 = 0u;
  memset(v76, 0, 33);
  v68 = v25;
  if (a2 == -1)
    v27 = 0;
  else
    v27 = a2;
  v69 = v27;
  sub_2341B7DA4(&v49, a4);
  v28 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  v29 = v49.__r_.__value_.__r.__words[0];
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v30 = v49.__r_.__value_.__l.__size_;
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v49;
  else
    v31 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if (v30 >= 1)
  {
    v32 = (char *)v31 + v30;
    v33 = v31;
    do
    {
      v34 = memchr(v33, 46, v30);
      if (!v34)
        break;
      if (*v34 == 46)
      {
        if (v34 != v32 && v34 - (_BYTE *)v31 != -1)
        {
          std::string::erase(&v49, v34 - (_BYTE *)v31, 0xFFFFFFFFFFFFFFFFLL);
          v28 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          v29 = v49.__r_.__value_.__r.__words[0];
        }
        break;
      }
      v33 = (std::string *)(v34 + 1);
      v30 = v32 - (_BYTE *)v33;
    }
    while (v32 - (_BYTE *)v33 >= 1);
  }
  if (v28 >= 0)
    v35 = &v49;
  else
    v35 = (std::string *)v29;
  strncpy(v67, (const char *)v35, 0x29uLL);
  v67[40] = 0;
  strncpy(__str, a3, 0x22uLL);
  __str[33] = 0;
  Count = TXTRecordGetCount(v9, a7);
  v37 = Count;
  v71 = Count;
  v70 = (char *)sub_234114780(0x14uLL, 0x18uLL);
  if (Count)
  {
    v38 = 0;
    v39 = 0;
    while (1)
    {
      valueLen = 0;
      value = 0;
      if (TXTRecordGetItemAtIndex(v9, a7, v39, 0x20u, key, &valueLen, (const void **)&value))
        break;
      v40 = valueLen;
      if (valueLen >= 0x40u)
      {
        v40 = 63;
        valueLen = 63;
      }
      v41 = (char *)v40;
      memcpy(buf, value, v40);
      buf[v40] = 0;
      v42 = (char **)&v70[v38];
      *v42 = strdup(key);
      v42[1] = strdup(buf);
      v42[2] = v41;
      ++v39;
      v38 += 24;
      if (v37 == v39)
        goto LABEL_61;
    }
    v71 = v39;
  }
LABEL_61:
  MEMORY[0x23493E5F0](&v76[8], a4);
  *(_DWORD *)key = a2;
  sub_2341B7DA4(&v63, a4);
  v65 = a8;
  sub_2341B7BBC((uint64_t)buf, (uint64_t)key, (__int128 *)__str);
  sub_2341B872C((uint64_t **)(a1 + 40), (uint64_t)buf, (uint64_t)buf);
  sub_2341B79CC((uint64_t)&v59);
  if (SHIBYTE(v55) < 0)
    operator delete(*(void **)&buf[8]);
  if (v64 < 0)
    operator delete(v63);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  sub_2341B79CC((uint64_t)__str);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
}

double sub_2341B78F0(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 59) = 0u;
  *(_OWORD *)(a1 + 50) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  *(_DWORD *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 148) = 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_BYTE *)(a1 + 200) = 0;
  return result;
}

BOOL sub_2341B7930(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) != 0;
}

__n128 sub_2341B7940(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __n128 result;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  result = *(__n128 *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(__n128 *)(a1 + 176) = result;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return result;
}

uint64_t sub_2341B79CC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 104);
    if (v3)
    {
      v4 = 0;
      do
      {
        v5 = (void **)(*(_QWORD *)(a1 + 96) + v4);
        free(*v5);
        free(v5[1]);
        v4 += 24;
        --v3;
      }
      while (v3);
      v2 = *(void **)(a1 + 96);
    }
    j__free(v2);
  }
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  v6 = *(void **)(a1 + 152);
  if (v6)
  {
    *(_QWORD *)(a1 + 160) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_2341B7A58(uint64_t a1)
{
  sub_2341B7CB8(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341B7A7C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_250513EB0;
  v3 = (void **)(a1 + 48);
  sub_2341B7D18(&v3);
  return a1;
}

uint64_t sub_2341B7AC0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_250513EB0;
  v3 = (void **)(a1 + 48);
  sub_2341B7D18(&v3);
  return MEMORY[0x23493E704](a1, 0x10A1C4036CF50ECLL);
}

void sub_2341B7B18()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341B7B2C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  v9 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v7;
  v10 = a1 + 152;
  if (*(char *)(a2 + 175) < 0)
  {
    sub_233C0DAF8((_BYTE *)v10, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)v10 = v11;
  }
  return a1;
}

uint64_t sub_2341B7BBC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_233C0DAF8((_BYTE *)v6, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v6 = v7;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *a3;
  *(_OWORD *)(a1 + 56) = a3[1];
  *(_OWORD *)(a1 + 40) = v8;
  v9 = a3[2];
  v10 = a3[3];
  v11 = a3[4];
  *(_OWORD *)(a1 + 114) = *(__int128 *)((char *)a3 + 74);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 132) = *((_DWORD *)a3 + 23);
  v12 = a3[6];
  v13 = a3[7];
  v14 = *((_QWORD *)a3 + 18);
  *(_OWORD *)(a1 + 168) = a3[8];
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  *(_QWORD *)(a1 + 184) = v14;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a3 + 19);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a3 + 20);
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a3 + 21);
  *((_QWORD *)a3 + 19) = 0;
  *((_QWORD *)a3 + 20) = 0;
  *((_QWORD *)a3 + 21) = 0;
  v15 = a3[11];
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a3 + 24);
  *(_OWORD *)(a1 + 216) = v15;
  *((_QWORD *)a3 + 23) = 0;
  *((_QWORD *)a3 + 24) = 0;
  *((_QWORD *)a3 + 22) = 0;
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a3 + 200);
  *((_QWORD *)a3 + 12) = 0;
  *((_QWORD *)a3 + 13) = 0;
  return a1;
}

uint64_t sub_2341B7CB8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_250513E80;
  v2 = a1 + 88;
  sub_2341B891C(a1 + 88);
  sub_2341B895C(v2);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_2341B7D18(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_2341B7D58((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_2341B7D58(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 176)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *sub_2341B7DA4(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void *sub_2341B7E50(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287)
    sub_233CB8554();
  return operator new(152 * a2);
}

uint64_t *sub_2341B7E98(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 176;
      v6 = *(_OWORD *)(v3 - 160);
      *(_OWORD *)(v4 - 176) = *(_OWORD *)(v3 - 176);
      *(_OWORD *)(v4 - 160) = v6;
      v7 = *(_OWORD *)(v3 - 144);
      v8 = *(_OWORD *)(v3 - 128);
      v9 = *(_OWORD *)(v3 - 112);
      *(_OWORD *)(v4 - 102) = *(_OWORD *)(v3 - 102);
      *(_OWORD *)(v4 - 128) = v8;
      *(_OWORD *)(v4 - 112) = v9;
      *(_OWORD *)(v4 - 144) = v7;
      *(_DWORD *)(v4 - 84) = *(_DWORD *)(v3 - 84);
      v10 = *(_OWORD *)(v3 - 80);
      v11 = *(_OWORD *)(v3 - 64);
      v12 = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = v11;
      *(_OWORD *)(v4 - 48) = v12;
      *(_OWORD *)(v4 - 80) = v10;
      v13 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v13;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v3 -= 176;
      v4 -= 176;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v14 = *result;
  *result = v5;
  a2[1] = v14;
  v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

void *sub_2341B7F5C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL)
    sub_233CB8554();
  return operator new(176 * a2);
}

uint64_t sub_2341B7FA4(uint64_t a1)
{
  sub_2341B7FD8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2341B7FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 176;
      *(_QWORD *)(a1 + 16) = v2 - 176;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

BOOL sub_2341B802C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  const char *v6;
  void *v7;
  size_t v8;
  unsigned __int8 v9;
  void **v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  void *__s1[2];
  unsigned __int8 v26;

  if (strcmp(*(const char **)a1, (const char *)a2))
    return 0;
  v6 = *(const char **)(a1 + 8);
  sub_2341BCBE8(a2);
  v7 = (void *)strlen(v6);
  v8 = (size_t)v7;
  v9 = v26;
  if (((char)v26 & 0x80000000) == 0)
  {
    if (v7 != (void *)v26)
      return 0;
    if (v7 != (void *)-1)
    {
      v10 = __s1;
      goto LABEL_11;
    }
LABEL_38:
    abort();
  }
  if (v7 != __s1[1])
  {
    v4 = 0;
LABEL_35:
    operator delete(__s1[0]);
    return v4;
  }
  if (v7 == (void *)-1)
    goto LABEL_38;
  v10 = (void **)__s1[0];
  if (memcmp(v10, v6, v8) || *(_DWORD *)(a2 + 92) != *(_DWORD *)(a1 + 16))
    goto LABEL_31;
LABEL_11:
  v11 = *(unsigned __int8 ***)(a1 + 24);
  v12 = *(unsigned __int8 *)(a2 + 175);
  if ((v12 & 0x80u) == 0)
    v13 = (unsigned __int8 *)*(unsigned __int8 *)(a2 + 175);
  else
    v13 = *(unsigned __int8 **)(a2 + 160);
  v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
  v15 = (char)v14;
  if ((char)v14 < 0)
    v14 = v11[1];
  if (v13 == v14)
  {
    v16 = (const void **)(a2 + 152);
    if (v15 >= 0)
      v17 = *(unsigned __int8 **)(a1 + 24);
    else
      v17 = *v11;
    if ((v12 & 0x80) != 0)
    {
      v4 = memcmp(*v16, v17, *(_QWORD *)(a2 + 160)) == 0;
    }
    else if (*(_BYTE *)(a2 + 175))
    {
      v18 = v12 - 1;
      do
      {
        v20 = *(unsigned __int8 *)v16;
        v16 = (const void **)((char *)v16 + 1);
        v19 = v20;
        v22 = *v17++;
        v21 = v22;
        v24 = v18-- != 0;
        v4 = v19 == v21;
      }
      while (v19 == v21 && v24);
    }
    else
    {
      v4 = 1;
    }
  }
  else
  {
LABEL_31:
    v4 = 0;
  }
  if ((v9 & 0x80) != 0)
    goto LABEL_35;
  return v4;
}

uint64_t sub_2341B8194(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  v11 = a1 + 152;
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)v11);
  v12 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)v11 = v12;
  *(_BYTE *)(a2 + 175) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  return a1;
}

uint64_t sub_2341B822C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_2341B8194(a3, v4);
      v4 += 176;
      a3 += 176;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_2341B8288(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_2341B8288(a1, *a2);
    sub_2341B8288(a1, a2[1]);
    sub_2341B82D0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_2341B82D0(uint64_t a1)
{
  sub_2341B79CC(a1 + 40);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

_QWORD *sub_2341B830C(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = sub_2341B83B8((uint64_t)a1, &v12, a2);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x118uLL);
    v10[1] = a1 + 1;
    sub_2341B8578((uint64_t)(v7 + 4), *a4);
    v11 = 1;
    sub_234100E58(a1, v12, v8, v7);
    v10[0] = 0;
    sub_2341B8608((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_2341B83B8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!sub_2341B8454(v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_2341B8454(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL sub_2341B8454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  const void *v12;
  size_t v13;
  unsigned __int8 *v14;
  size_t v15;
  int v16;
  BOOL v17;

  if (*(_DWORD *)a2 < *(_DWORD *)a3)
    return 1;
  if (*(_DWORD *)a2 != *(_DWORD *)a3)
    return 0;
  v7 = (unsigned __int8 *)(a2 + 8);
  v6 = *(const void **)(a2 + 8);
  v8 = *(char *)(a3 + 31);
  v9 = *(unsigned __int8 *)(a2 + 31);
  v10 = *(_QWORD *)(a2 + 16);
  if ((v9 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a2 + 31);
  else
    v11 = *(_QWORD *)(a2 + 16);
  if ((v9 & 0x80u) == 0)
    v12 = (const void *)(a2 + 8);
  else
    v12 = *(const void **)(a2 + 8);
  if (v8 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 31);
  else
    v13 = *(_QWORD *)(a3 + 16);
  if (v8 >= 0)
    v14 = (unsigned __int8 *)(a3 + 8);
  else
    v14 = *(unsigned __int8 **)(a3 + 8);
  if (v13 >= v11)
    v15 = v11;
  else
    v15 = v13;
  v16 = memcmp(v12, v14, v15);
  v17 = v11 < v13;
  if (v16)
    v17 = v16 < 0;
  if (v17)
    return 1;
  if (v11 != v13)
    return 0;
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(v6, v14, v10))
      return 0;
  }
  else if ((_DWORD)v9)
  {
    while (*v7 == *v14)
    {
      ++v7;
      ++v14;
      if (!--v9)
        return *(unsigned __int8 *)(a2 + 32) < *(unsigned __int8 *)(a3 + 32);
    }
    return 0;
  }
  return *(unsigned __int8 *)(a2 + 32) < *(unsigned __int8 *)(a3 + 32);
}

uint64_t sub_2341B8578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_233C0DAF8((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 74) = 0u;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_OWORD *)(a1 + 99) = 0u;
  *(_DWORD *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 120;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_BYTE *)(a1 + 240) = 0;
  return a1;
}

void sub_2341B8608(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_2341B82D0((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *sub_2341B864C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  if (!a2)
  {
    if (a3)
      sub_23425B0E0((uint64_t)result);
  }
  return result;
}

_QWORD *sub_2341B866C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_2341B8454(v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_2341B8454(v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

void *sub_2341B86F8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_233CB8554();
  return operator new(16 * a2);
}

_QWORD *sub_2341B872C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = sub_2341B83B8((uint64_t)a1, &v11, a2);
  v6 = (_QWORD *)*v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x118uLL);
    v9[1] = a1 + 1;
    sub_2341B87D8((uint64_t)(v6 + 4), a3);
    v10 = 1;
    sub_234100E58(a1, v11, v7, v6);
    v9[0] = 0;
    sub_2341B8608((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_2341B87D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_233C0DAF8((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 114) = *(_OWORD *)(a2 + 114);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  v12 = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_QWORD *)(a1 + 184) = v12;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v13 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v13;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  return a1;
}

uint64_t sub_2341B88D4(uint64_t a1)
{
  _BYTE *v2;

  sub_2341B891C(a1);
  v2 = *(_BYTE **)(a1 + 48);
  if (v2)
    *v2 = 0;
  sub_233CF2D00(a1 + 48);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_2341B891C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) != -1)
    sub_2341B97B0(a1);
  if (*(_QWORD *)a1)
  {
    DNSServiceRefDeallocate(*(DNSServiceRef *)a1);
    *(_QWORD *)a1 = 0;
  }
}

uint64_t sub_2341B8960(uint64_t a1, uint64_t a2, char a3, int a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;

  MEMORY[0x23493E5F0](a1 + 16);
  *(_DWORD *)(a1 + 40) = a4;
  *(_BYTE *)(a1 + 44) = a3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = operator new(0x20uLL);
  v7[2] = 0;
  *v7 = &unk_250514078;
  v7[1] = 0;
  *((_QWORD *)&v12 + 1) = v7;
  *((_BYTE *)v7 + 24) = 1;
  *(_QWORD *)&v12 = v7 + 3;
  sub_23412A514(a1 + 48, &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (*(_QWORD *)(a1 + 48))
    return 0;
  else
    return 4294901757;
}

void sub_2341B8A30(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  _QWORD v6[5];
  void *__p;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  if (*(_DWORD *)(a1 + 40) == -1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_2341B8B6C((DNSServiceRef *)a1, a2);
    if (!*(_DWORD *)a2)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      __p = 0;
      v8 = 0;
      v9 = 0;
      sub_2341B8CEC(0, *(unsigned __int8 *)(a1 + 44), &v10, &__p, 1);
      v4 = (char *)__p;
      v5 = v8;
      while (v4 != v5)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        sub_2341B95B4(*(_DWORD *)(a1 + 40), 0x1Cu, v4 + 4, 0x10u, a1, (uint64_t)a2);
        if (*(_DWORD *)a2)
          goto LABEL_9;
        v4 += 20;
      }
      *(_DWORD *)a2 = 0;
      a2[1] = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
      *((_DWORD *)a2 + 4) = 310;
LABEL_9:
      if (__p)
      {
        v8 = (char *)__p;
        operator delete(__p);
      }
      if (v10)
      {
        v11 = v10;
        operator delete(v10);
      }
    }
  }
  else
  {
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 0x40000000;
    v6[2] = sub_2341B9198;
    v6[3] = &unk_250513FE8;
    v6[4] = a1;
    sub_2341B8FF0(a1, (uint64_t)v6, (uint64_t)a2);
  }
}

DNSServiceRef *sub_2341B8B6C@<X0>(DNSServiceRef *a1@<X0>, _QWORD *a2@<X8>)
{
  _DNSServiceRef_t *v4;
  DNSServiceRef *result;
  NSObject *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (v4)
  {
    DNSServiceRefDeallocate(v4);
    *a1 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_2341BA084(a1, (uint64_t)a2);
  if (*(_DWORD *)a2)
  {
    v6 = sub_234117B80(0, "NotSpecified");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_OWORD *)a2;
      v11 = a2[2];
      v7 = sub_2341083CC((const char **)&v10, 1);
      *(_DWORD *)buf = 136315650;
      v13 = v7;
      v14 = 2080;
      v15 = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
      v16 = 1024;
      v17 = 434;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    result = (DNSServiceRef *)sub_234114844(1u);
    if ((_DWORD)result)
    {
      v8 = *(_OWORD *)a2;
      v9 = a2[2];
      sub_2341083CC((const char **)&v8, 1);
      return (DNSServiceRef *)sub_2341147D0(0, 1);
    }
  }
  else
  {
    *(_DWORD *)a2 = 0;
    a2[1] = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
    *((_DWORD *)a2 + 4) = 435;
  }
  return result;
}

uint64_t sub_2341B8CEC(int a1, int a2, void **a3, void **a4, char a5)
{
  uint64_t result;
  ifaddrs *v11;
  unsigned int v12;
  uint64_t v13;
  sockaddr *ifa_addr;
  unsigned int ifa_flags;
  char v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  ifaddrs *v46;
  ifaddrs *v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v47 = 0;
  result = getifaddrs(&v47);
  if ((result & 0x80000000) == 0)
  {
    v11 = v47;
    if (v47)
    {
      v12 = a2 & 0xFFFFFFFD;
      v13 = a2 & 0xFE;
      do
      {
        ifa_addr = v11->ifa_addr;
        if (ifa_addr)
        {
          ifa_flags = v11->ifa_flags;
          v16 = (ifa_flags & 8) != 0 ? 0 : a5;
          if ((~ifa_flags & 0x8040) == 0 && (v16 & 1) == 0)
          {
            v17 = if_nametoindex(v11->ifa_name);
            v18 = v17;
            if (!a1 || v17 == a1)
            {
              if (v12 == 1 && ifa_addr->sa_family == 2)
              {
                v19 = v13;
                v20 = *(unsigned int *)&ifa_addr->sa_data[2];
                v22 = (unint64_t *)a3[1];
                v21 = (unint64_t)a3[2];
                if ((unint64_t)v22 >= v21)
                {
                  v27 = ((char *)v22 - (_BYTE *)*a3) >> 3;
                  if ((unint64_t)(v27 + 1) >> 61)
                    goto LABEL_55;
                  v28 = v21 - (_QWORD)*a3;
                  v29 = v28 >> 2;
                  if (v28 >> 2 <= (unint64_t)(v27 + 1))
                    v29 = v27 + 1;
                  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                    v30 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v30 = v29;
                  if (v30)
                    v31 = (char *)sub_2340FD57C((uint64_t)(a3 + 2), v30);
                  else
                    v31 = 0;
                  v37 = &v31[8 * v27];
                  *(_QWORD *)v37 = v18 | (unint64_t)(v20 << 32);
                  v23 = v37 + 8;
                  v39 = (char *)*a3;
                  v38 = (char *)a3[1];
                  v13 = v19;
                  if (v38 != *a3)
                  {
                    do
                    {
                      v40 = *((_QWORD *)v38 - 1);
                      v38 -= 8;
                      *((_QWORD *)v37 - 1) = v40;
                      v37 -= 8;
                    }
                    while (v38 != v39);
                    v38 = (char *)*a3;
                  }
                  v12 = a2 & 0xFFFFFFFD;
                  *a3 = v37;
                  a3[1] = v23;
                  a3[2] = &v31[8 * v30];
                  if (v38)
                    operator delete(v38);
                }
                else
                {
                  *v22 = v17 | (unint64_t)(v20 << 32);
                  v23 = v22 + 1;
                  v13 = v19;
                  v12 = a2 & 0xFFFFFFFD;
                }
                a3[1] = v23;
              }
              else if ((_DWORD)v13 == 2 && ifa_addr->sa_family == 30)
              {
                v48 = *(_OWORD *)&ifa_addr->sa_data[6];
                v25 = (char *)a4[1];
                v24 = (char *)a4[2];
                if (v25 >= v24)
                {
                  v32 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (_BYTE *)*a4) >> 2);
                  v33 = v32 + 1;
                  if (v32 + 1 > 0xCCCCCCCCCCCCCCCLL)
LABEL_55:
                    abort();
                  v34 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - (_BYTE *)*a4) >> 2);
                  if (2 * v34 > v33)
                    v33 = 2 * v34;
                  if (v34 >= 0x666666666666666)
                    v35 = 0xCCCCCCCCCCCCCCCLL;
                  else
                    v35 = v33;
                  if (v35)
                    v36 = (char *)sub_2341BA160((uint64_t)(a4 + 2), v35);
                  else
                    v36 = 0;
                  v41 = &v36[20 * v32];
                  *(_DWORD *)v41 = v18;
                  *(_OWORD *)(v41 + 4) = v48;
                  v43 = (char *)*a4;
                  v42 = (char *)a4[1];
                  v44 = v41;
                  if (v42 != *a4)
                  {
                    do
                    {
                      v45 = *(_OWORD *)(v42 - 20);
                      *((_DWORD *)v44 - 1) = *((_DWORD *)v42 - 1);
                      *(_OWORD *)(v44 - 20) = v45;
                      v44 -= 20;
                      v42 -= 20;
                    }
                    while (v42 != v43);
                    v42 = (char *)*a4;
                  }
                  v26 = v41 + 20;
                  *a4 = v44;
                  a4[1] = v41 + 20;
                  a4[2] = &v36[20 * v35];
                  if (v42)
                    operator delete(v42);
                }
                else
                {
                  *(_DWORD *)v25 = v17;
                  *(_OWORD *)(v25 + 4) = v48;
                  v26 = v25 + 20;
                }
                a4[1] = v26;
              }
            }
          }
        }
        v11 = v11->ifa_next;
      }
      while (v11);
      v46 = v47;
    }
    else
    {
      v46 = 0;
    }
    return MEMORY[0x23493EAA0](v46);
  }
  return result;
}

void sub_2341B8FF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  nw_path_monitor_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[7];
  std::__shared_weak_count *v21;

  v6 = nw_path_monitor_create();
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = v6;
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    nw_path_monitor_set_queue(v7, (dispatch_queue_t)qword_2542530E8);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(std::__shared_weak_count **)(a1 + 56);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = *(NSObject **)(a1 + 8);
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 1174405120;
    v20[2] = sub_2341B9810;
    v20[3] = &unk_250514038;
    v20[5] = a1;
    v20[6] = v8;
    v21 = v9;
    if (v9)
    {
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v20[4] = a2;
    nw_path_monitor_set_update_handler(v12, v20);
    nw_path_monitor_start(*(nw_path_monitor_t *)(a1 + 8));
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
    *(_DWORD *)(a3 + 16) = 392;
    v15 = v21;
    if (v21)
    {
      v16 = (unint64_t *)&v21->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v9)
    {
      v18 = (unint64_t *)&v9->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
    *(_DWORD *)(a3 + 16) = 340;
  }
}

void sub_2341B9198(uint64_t a1, uint64_t **a2, __int128 **a3)
{
  DNSServiceRef *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  _QWORD v12[3];

  v5 = *(DNSServiceRef **)(a1 + 32);
  memset(v12, 0, sizeof(v12));
  sub_2341B8B6C(v5, v12);
  if (!LODWORD(v12[0]))
  {
    __p = 0;
    v10 = 0;
    v11 = 0;
    sub_2341BA478((char *)&__p, *a2, a2[1], a2[1] - *a2);
    sub_2341B926C((uint64_t)v5, (uint32_t **)&__p, 1u);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    v6 = 0;
    v7 = 0;
    v8 = 0;
    sub_2341BA508((char *)&v6, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 2));
    sub_2341B9410((uint64_t)v5, (uint32_t **)&v6, 0x1Cu);
    if (v6)
    {
      v7 = v6;
      operator delete(v6);
    }
  }
}

uint64_t sub_2341B926C(uint64_t result, uint32_t **a2, uint16_t rrtype)
{
  uint32_t *v3;
  uint32_t *v4;
  uint64_t v6;
  uint32_t *v7;
  uint32_t v8;
  NSObject *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    do
    {
      v8 = *v3;
      v7 = v3 + 1;
      v15 = 0uLL;
      v16 = 0;
      result = sub_2341B95B4(v8, rrtype, v7, 4u, v6, (uint64_t)&v15);
      if ((_DWORD)v15)
      {
        v9 = sub_234117B80(0, "NotSpecified");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          v13 = v15;
          v14 = v16;
          v10 = sub_2341083CC((const char **)&v13, 1);
          *(_DWORD *)buf = 136315650;
          v18 = v10;
          v19 = 2080;
          v20 = "src/platform/Darwin/DnssdHostNameRegistrar.h";
          v21 = 1024;
          v22 = 55;
          _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }
        result = sub_234114844(1u);
        if ((_DWORD)result)
        {
          v11 = v15;
          v12 = v16;
          sub_2341083CC((const char **)&v11, 1);
          result = sub_2341147D0(0, 1);
        }
      }
      v3 = v7 + 1;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_2341B9410(uint64_t result, uint32_t **a2, uint16_t rrtype)
{
  uint32_t *v3;
  uint32_t *v4;
  uint64_t v6;
  uint32_t *v7;
  uint32_t v8;
  NSObject *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    do
    {
      v8 = *v3;
      v7 = v3 + 1;
      v15 = 0uLL;
      v16 = 0;
      result = sub_2341B95B4(v8, rrtype, v7, 0x10u, v6, (uint64_t)&v15);
      if ((_DWORD)v15)
      {
        v9 = sub_234117B80(0, "NotSpecified");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          v13 = v15;
          v14 = v16;
          v10 = sub_2341083CC((const char **)&v13, 1);
          *(_DWORD *)buf = 136315650;
          v18 = v10;
          v19 = 2080;
          v20 = "src/platform/Darwin/DnssdHostNameRegistrar.h";
          v21 = 1024;
          v22 = 55;
          _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }
        result = sub_234114844(1u);
        if ((_DWORD)result)
        {
          v11 = v15;
          v12 = v16;
          sub_2341083CC((const char **)&v11, 1);
          result = sub_2341147D0(0, 1);
        }
      }
      v3 = v7 + 4;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_2341B95B4@<X0>(uint32_t interfaceIndex@<W1>, uint16_t rrtype@<W2>, void *rdata@<X3>, uint16_t rdlen@<W4>, uint64_t a5@<X0>, uint64_t a6@<X8>)
{
  _DNSServiceRef_t *v9;
  const char *v10;
  uint64_t v11;
  DNSRecordRef RecordRef;

  v9 = *(_DNSServiceRef_t **)a5;
  v10 = (const char *)(a5 + 16);
  if (*(char *)(a5 + 39) < 0)
    v10 = *(const char **)v10;
  RecordRef = 0;
  v11 = DNSServiceRegisterRecord(v9, &RecordRef, 0x10u, interfaceIndex, v10, rrtype, 1u, rdlen, rdata, 0, (DNSServiceRegisterRecordReply)sub_2341B9630, 0);
  return sub_2341BD574(v11, a6);
}

uint64_t sub_2341B9630(uint64_t a1, uint64_t a2, int a3, int a4)
{
  NSObject *v6;
  uint64_t result;
  NSObject *v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v11 = "OnRegisterRecord";
    v12 = 1024;
    LODWORD(v13) = a3;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Mdns: %s flags: %d", buf, 0x12u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    result = sub_2341147D0(0x22u, 2);
  if (a4)
  {
    v8 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = sub_2341BD3BC(a4);
      *(_DWORD *)buf = 136315394;
      v11 = "OnRegisterRecord";
      v12 = 2080;
      v13 = v9;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "%s (%s)", buf, 0x16u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      sub_2341BD3BC(a4);
      return sub_2341147D0(0x22u, 1);
    }
  }
  return result;
}

void sub_2341B97B0(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    nw_path_monitor_cancel(v2);
    nw_release(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_2341B97E4(_DNSServiceRef_t **a1)
{
  _DNSServiceRef_t *v2;

  v2 = *a1;
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *a1 = 0;
  }
}

void sub_2341B9810(uint64_t a1, nw_path_t path)
{
  uint64_t v3;
  nw_path_status_t status;
  NSObject *v5;
  const char *v6;
  uint64_t *v7;
  unsigned int *v8;
  __int128 *v9;
  unsigned int *v10;
  _QWORD **v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD **v15;
  BOOL v16;
  uint64_t v17;
  NSObject *v18;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD enumerate_block[7];
  void *v27;
  __int128 *v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *(*v36)(_QWORD *, _QWORD *);
  void (*v37)(uint64_t);
  void *v38;
  void *v39;
  uint64_t v40;
  void *__p;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD **v47;
  _QWORD *v48[2];
  __int128 buf;
  uint64_t v50;
  _QWORD *(*v51)(_QWORD *, _QWORD *);
  void (*v52)(uint64_t);
  void *v53;
  void *v54;
  uint64_t v55;
  uint8_t v56[4];
  char *v57;
  __int16 v58;
  int v59;
  char v60[8];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (**(_BYTE **)(a1 + 48))
  {
    v3 = *(_QWORD *)(a1 + 40);
    status = nw_path_get_status(path);
    v5 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (status > nw_path_status_satisfiable)
        v6 = "Unknown";
      else
        v6 = off_2505140B8[status];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Status: %s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
    v18 = path;
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v50 = 0x4002000000;
    v51 = sub_2341B9D30;
    v52 = sub_2341B9D5C;
    v54 = 0;
    v55 = 0;
    v53 = 0;
    v33 = 0;
    v34 = &v33;
    v35 = 0x4002000000;
    v36 = sub_2341B9D74;
    v37 = sub_2341B9DA0;
    v39 = 0;
    v40 = 0;
    v38 = 0;
    sub_2341B8CEC(*(_DWORD *)(v3 + 40), *(unsigned __int8 *)(v3 + 44), &v53, &v38, 1);
    v31 = 0;
    v32 = 0;
    v30 = 0;
    sub_2341BA478((char *)&v30, *(uint64_t **)(*((_QWORD *)&buf + 1) + 40), *(uint64_t **)(*((_QWORD *)&buf + 1) + 48), (uint64_t)(*(_QWORD *)(*((_QWORD *)&buf + 1) + 48) - *(_QWORD *)(*((_QWORD *)&buf + 1) + 40)) >> 3);
    v28 = 0;
    v29 = 0;
    v27 = 0;
    sub_2341BA508((char *)&v27, (__int128 *)v34[5], (__int128 *)v34[6], 0xCCCCCCCCCCCCCCCDLL * ((v34[6] - v34[5]) >> 2));
    v48[0] = 0;
    v48[1] = 0;
    v47 = v48;
    v8 = (unsigned int *)v30;
    v7 = v31;
    while (v8 != (unsigned int *)v7)
    {
      sub_2341BA3C0((uint64_t)&v47, v8, v8);
      v8 += 2;
    }
    v10 = (unsigned int *)v27;
    v9 = v28;
    while (v10 != (unsigned int *)v9)
    {
      sub_2341BA3C0((uint64_t)&v47, v10, v10);
      v10 += 5;
    }
    v11 = v47;
    if (v47 != v48)
    {
      do
      {
        v12 = *((unsigned int *)v11 + 7);
        *(_QWORD *)v60 = 0;
        v61 = 0;
        if_indextoname(v12, v60);
        v13 = sub_234117B80(0x22u, "Discovery");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v56 = 136315394;
          v57 = v60;
          v58 = 1024;
          v59 = v12;
          _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_DEFAULT, "\t%s (%u)", v56, 0x12u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(0x22u, 2);
        v44 = 0;
        v45 = 0;
        v46 = 0;
        sub_2341BA478((char *)&v44, (uint64_t *)v30, v31, ((char *)v31 - (_BYTE *)v30) >> 3);
        __p = 0;
        v42 = 0;
        v43 = 0;
        sub_2341BA508((char *)&__p, (__int128 *)v27, v28, 0xCCCCCCCCCCCCCCCDLL * (((char *)v28 - (_BYTE *)v27) >> 2));
        sub_2341BA1A4(v12, (uint64_t)&v44, (uint64_t)&__p);
        if (__p)
        {
          v42 = __p;
          operator delete(__p);
        }
        if (v44)
        {
          v45 = v44;
          operator delete(v44);
        }
        v14 = v11[1];
        if (v14)
        {
          do
          {
            v15 = (_QWORD **)v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD **)v11[2];
            v16 = *v15 == v11;
            v11 = v15;
          }
          while (!v16);
        }
        v11 = v15;
      }
      while (v15 != v48);
    }
    sub_233CAF1EC((uint64_t)&v47, v48[0]);
    if (v27)
    {
      v28 = (__int128 *)v27;
      operator delete(v27);
    }
    if (v30)
    {
      v31 = (uint64_t *)v30;
      operator delete(v30);
    }
    if (nw_path_get_status(v18) == nw_path_status_satisfied)
    {
      enumerate_block[0] = MEMORY[0x24BDAC760];
      enumerate_block[1] = 0x40000000;
      enumerate_block[2] = sub_2341B9DB8;
      enumerate_block[3] = &unk_250514010;
      enumerate_block[4] = &buf;
      enumerate_block[5] = &v33;
      enumerate_block[6] = v3;
      nw_path_enumerate_interfaces(v18, enumerate_block);
    }
    v17 = *(_QWORD *)(a1 + 32);
    v24 = 0;
    v25 = 0;
    v23 = 0;
    sub_2341BA478((char *)&v23, *(uint64_t **)(*((_QWORD *)&buf + 1) + 40), *(uint64_t **)(*((_QWORD *)&buf + 1) + 48), (uint64_t)(*(_QWORD *)(*((_QWORD *)&buf + 1) + 48) - *(_QWORD *)(*((_QWORD *)&buf + 1) + 40)) >> 3);
    v21 = 0;
    v22 = 0;
    v20 = 0;
    sub_2341BA508((char *)&v20, (__int128 *)v34[5], (__int128 *)v34[6], 0xCCCCCCCCCCCCCCCDLL * ((v34[6] - v34[5]) >> 2));
    (*(void (**)(uint64_t, void **, void **))(v17 + 16))(v17, &v23, &v20);
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    _Block_object_dispose(&v33, 8);
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    _Block_object_dispose(&buf, 8);
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
  }
}

_QWORD *sub_2341B9D30(_QWORD *result, _QWORD *a2)
{
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

void sub_2341B9D5C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

_QWORD *sub_2341B9D74(_QWORD *result, _QWORD *a2)
{
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

void sub_2341B9DA0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t sub_2341B9DB8(_QWORD *a1, nw_interface_t interface)
{
  uint64_t v4;
  nw_interface_type_t type;
  int v7;
  uint32_t index;
  uint32_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *name;
  nw_interface_type_t v15;
  NSObject *v16;
  const char *v17;
  void *v19;
  __int128 *v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  uint8_t buf[40];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a1[6];
  type = nw_interface_get_type(interface);
  if (type <= nw_interface_type_wired && type != nw_interface_type_cellular)
  {
    v7 = *(_DWORD *)(v4 + 40);
    index = nw_interface_get_index(interface);
    if (!v7 || index == v7)
    {
      v10 = nw_interface_get_index(interface);
      sub_2341B8CEC(v10, *(unsigned __int8 *)(v4 + 44), (void **)(*(_QWORD *)(a1[4] + 8) + 40), (void **)(*(_QWORD *)(a1[5] + 8) + 40), 0);
      v11 = *(_QWORD *)(a1[4] + 8);
      v23 = 0;
      v24 = 0;
      v22 = 0;
      sub_2341BA478((char *)&v22, *(uint64_t **)(v11 + 40), *(uint64_t **)(v11 + 48), (uint64_t)(*(_QWORD *)(v11 + 48) - *(_QWORD *)(v11 + 40)) >> 3);
      v12 = *(_QWORD *)(a1[5] + 8);
      v20 = 0;
      v21 = 0;
      v19 = 0;
      sub_2341BA508((char *)&v19, *(__int128 **)(v12 + 40), *(__int128 **)(v12 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v12 + 48) - *(_QWORD *)(v12 + 40)) >> 2));
      v13 = nw_interface_get_index(interface);
      name = nw_interface_get_name(interface);
      v15 = nw_interface_get_type(interface);
      v16 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (v15 > nw_interface_type_loopback)
          v17 = "Unknown";
        else
          v17 = off_2505140D8[v15];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = name;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v17;
        _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "\t%s (%u / %s)", buf, 0x1Cu);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x22u, 2);
      memset(buf, 0, 24);
      sub_2341BA478((char *)buf, (uint64_t *)v22, v23, ((char *)v23 - (_BYTE *)v22) >> 3);
      __p = 0;
      v26 = 0;
      v27 = 0;
      sub_2341BA508((char *)&__p, (__int128 *)v19, v20, 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (_BYTE *)v19) >> 2));
      sub_2341BA1A4(v13, (uint64_t)buf, (uint64_t)&__p);
      if (__p)
      {
        v26 = __p;
        operator delete(__p);
      }
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (v19)
      {
        v20 = (__int128 *)v19;
        operator delete(v19);
      }
      if (v22)
      {
        v23 = (uint64_t *)v22;
        operator delete(v22);
      }
    }
  }
  return 1;
}

uint64_t sub_2341BA050(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_2341BA07C(uint64_t a1)
{
  return sub_233CF2D00(a1 + 48);
}

DNSServiceRef *sub_2341BA084@<X0>(DNSServiceRef *result@<X0>, uint64_t a2@<X8>)
{
  DNSServiceRef *v3;
  uint64_t Connection;
  uint64_t v5;
  _DNSServiceRef_t *v6;
  uint64_t v7;
  _DNSServiceRef_t *v8;

  if (*result)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/platform/Darwin/DnssdHostNameRegistrar.cpp";
    *(_DWORD *)(a2 + 16) = 407;
  }
  else
  {
    v3 = result;
    Connection = DNSServiceCreateConnection(result);
    if ((_DWORD)Connection)
    {
      v5 = a2;
    }
    else
    {
      v6 = *v3;
      if (qword_254253100 != -1)
      {
        v8 = *v3;
        dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
        v6 = v8;
      }
      v7 = DNSServiceSetDispatchQueue(v6, (dispatch_queue_t)qword_2542530E8);
      if ((_DWORD)v7)
      {
        if (*v3)
        {
          DNSServiceRefDeallocate(*v3);
          *v3 = 0;
        }
      }
      v5 = a2;
      Connection = v7;
    }
    return (DNSServiceRef *)sub_2341BD574(Connection, v5);
  }
  return result;
}

void *sub_2341BA160(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    sub_233CB8554();
  return operator new(20 * a2);
}

uint64_t sub_2341BA1A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  NSObject *v7;
  _DWORD *v8;
  _DWORD *v9;
  NSObject *v10;
  char v11[16];
  _WORD v12[15];
  uint8_t buf[4];
  char *v14;
  uint64_t v15;

  v4 = result;
  v15 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD **)a2;
  v6 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v6)
  {
    do
    {
      if (*v5 == v4)
      {
        memset(v11, 0, sizeof(v11));
        inet_ntop(2, v5 + 1, v11, 0x10u);
        v7 = sub_234117B80(0x22u, "Discovery");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v14 = v11;
          _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "\t\t* ipv4: %s", buf, 0xCu);
        }
        result = sub_234114844(2u);
        if ((_DWORD)result)
          result = sub_2341147D0(0x22u, 2);
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  v8 = *(_DWORD **)a3;
  v9 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 != v9)
  {
    do
    {
      if (*v8 == v4)
      {
        *(_OWORD *)v11 = 0u;
        memset(v12, 0, sizeof(v12));
        inet_ntop(30, v8 + 1, v11, 0x2Eu);
        v10 = sub_234117B80(0x22u, "Discovery");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v14 = v11;
          _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "\t\t* ipv6: %s", buf, 0xCu);
        }
        result = sub_234114844(2u);
        if ((_DWORD)result)
          result = sub_2341147D0(0x22u, 2);
      }
      v8 += 5;
    }
    while (v8 != v9);
  }
  return result;
}

_DWORD *sub_2341BA3C0(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  _DWORD *v10;

  v6 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (_QWORD *)v5;
        v9 = *(_DWORD *)(v5 + 28);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
LABEL_10:
    v10 = operator new(0x20uLL);
    v10[7] = *a3;
    sub_234100E58((uint64_t **)a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return v8;
}

char *sub_2341BA478(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2341BA4CC(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *sub_2341BA4CC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)sub_2340FD57C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *sub_2341BA508(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_2341BA568(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)v7 = v8;
      v7 += 20;
      a2 = (__int128 *)((char *)a2 + 20);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *sub_2341BA568(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    abort();
  result = (char *)sub_2341BA160((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void sub_2341BA5B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_250514078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2341BA5C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_250514078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23493E704);
}

uint64_t (*sub_2341BA604@<X0>(uint64_t (*result)(uint64_t, int *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>))(uint64_t, int *)
{
  int v5;
  int v6;
  int v7;
  const char *v8;
  int v9;

  if (!result)
  {
    v6 = 458;
LABEL_6:
    v5 = 47;
    goto LABEL_7;
  }
  if (!a2)
  {
    v6 = 459;
    goto LABEL_6;
  }
  v7 = 0;
  v8 = "src/platform/Darwin/DnssdImpl.cpp";
  v9 = 461;
  result = (uint64_t (*)(uint64_t, int *))result(a3, &v7);
  v5 = 0;
  v6 = 462;
LABEL_7:
  *(_DWORD *)a4 = v5;
  *(_QWORD *)(a4 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

void sub_2341BA680()
{
  _QWORD v0[3];

  sub_2341BA6A0(v0);
}

void sub_2341BA6A0(_QWORD *a1@<X8>)
{
  sub_2341B1F64("src/platform/Darwin/DnssdImpl.cpp", 492);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  sub_2341B4CF4(&qword_254253108, 0, (uint64_t)a1);
  if (*(_DWORD *)a1 == 16)
  {
    *(_DWORD *)a1 = 0;
    a1[1] = "src/platform/Darwin/DnssdImpl.cpp";
    *((_DWORD *)a1 + 4) = 497;
  }
}

void sub_2341BA72C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  int Length;
  uint32_t v12;
  char *v13;
  unsigned int v14;
  std::string *p_p;
  NSObject *v16;
  const char *v17;
  const char *v18;
  void *v19;
  uint64_t updated;
  int v21;
  int v22;
  int v23;
  char v24;
  std::string __p;
  void *v26;
  char v27;
  int context[2];
  uint16_t rdlen;
  void *rdata;
  TXTRecordRef v31;
  uint64_t v32;
  _BYTE buf[12];
  __int16 v34;
  const char *v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  uint32_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v21 = 474;
LABEL_42:
    a4[1].n128_u32[0] = v21;
    return;
  }
  if (*(unsigned __int8 *)(a1 + 84) >= 2u)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v21 = 475;
    goto LABEL_42;
  }
  if (!a2)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v21 = 476;
    goto LABEL_42;
  }
  if (!*(_BYTE *)(a1 + 34))
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v21 = 477;
    goto LABEL_42;
  }
  rdlen = 0;
  rdata = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  v7 = *(_QWORD *)(a1 + 104);
  if (v7 <= 0x40)
  {
    v9 = *(_QWORD *)(a1 + 96);
    TXTRecordCreate(&v31, 0x40u, &v32);
    if (v7)
    {
      v10 = (_QWORD *)(v9 + 16);
      while (1)
      {
        if (*v10 > 0xFFuLL)
        {
          v22 = 109;
          goto LABEL_45;
        }
        if (TXTRecordSetValue(&v31, (const char *)*(v10 - 2), *v10, (const void *)*(v10 - 1)))
          break;
        v10 += 3;
        if (!--v7)
          goto LABEL_11;
      }
      v22 = 112;
      goto LABEL_45;
    }
LABEL_11:
    Length = TXTRecordGetLength(&v31);
    rdlen = Length;
    if (!Length)
      TXTRecordDeallocate(&v31);
    rdata = (void *)TXTRecordGetBytesPtr(&v31);
    a4->n128_u32[0] = 0;
    a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a4[1].n128_u32[0] = 122;
    sub_2341BCF70(a1);
    v12 = *(_DWORD *)(a1 + 92);
    sub_2341BABE8((char *)(a1 + 34), &__p);
    if (v27 >= 0)
      v13 = (char *)&v26;
    else
      v13 = (char *)v26;
    v14 = *(unsigned __int16 *)(a1 + 88);
    v24 = *(_BYTE *)(a1 + 85);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v16 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316162;
      if (p_p)
        v17 = (const char *)p_p;
      else
        v17 = "(null)";
      *(_QWORD *)&buf[4] = a1;
      if (v13)
        v18 = v13;
      else
        v18 = "(null)";
      v34 = 2080;
      v35 = v17;
      v36 = 1024;
      v37 = v14;
      v38 = 2080;
      v39 = v18;
      v40 = 1024;
      v41 = v12;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Registering service %s on host %s with port %u and type: %s on interface id: %u", buf, 0x2Cu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
    *(_QWORD *)context = 0;
    if (!byte_254253120)
    {
      byte_254253120 = 1;
      qword_254253110 = 0;
      unk_254253118 = 0;
      qword_254253108 = 0;
    }
    sub_2341B4DC0(v13, (uint64_t)&qword_254253108, (const char *)a1, context, (uint64_t)buf);
    if (*(_DWORD *)buf)
    {
      v19 = sub_234114774(0x98uLL);
      if (v19)
      {
        *(_QWORD *)context = sub_2341B5078((uint64_t)v19, (uint64_t)v13, a1, a2, a3);
        updated = sub_2341B8960(*(_QWORD *)context + 88, (uint64_t)p_p, v24, v12);
        if (!(_DWORD)updated)
        {
          *(_QWORD *)buf = 0;
          updated = DNSServiceRegister((DNSServiceRef *)buf, 8u, v12, (const char *)a1, v13, "local.", (const char *)p_p, __rev16(v14), rdlen, rdata, (DNSServiceRegisterReply)sub_2341BB940, *(void **)context);
          if (!(_DWORD)updated)
          {
            if (!byte_254253120)
            {
              byte_254253120 = 1;
              qword_254253110 = 0;
              unk_254253118 = 0;
              qword_254253108 = 0;
            }
            sub_2341B49C4(*(DNSServiceRef *)buf, (void **)&qword_254253108, *(unint64_t *)context, (uint64_t)a4);
            goto LABEL_53;
          }
        }
        goto LABEL_47;
      }
      a4->n128_u32[0] = 11;
      a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
      v23 = 186;
    }
    else
    {
      updated = DNSServiceUpdateRecord(*(DNSServiceRef *)(*(_QWORD *)context + 24), 0, 8u, rdlen, rdata, 0);
      if ((_DWORD)updated)
      {
LABEL_47:
        sub_2341B48A4(*(void **)context, updated, a4);
LABEL_53:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v27 < 0)
          operator delete(v26);
        goto LABEL_57;
      }
      a4->n128_u32[0] = 0;
      a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
      v23 = 182;
    }
    a4[1].n128_u32[0] = v23;
    goto LABEL_53;
  }
  v22 = 102;
LABEL_45:
  a4->n128_u32[0] = 47;
  a4->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
  a4[1].n128_u32[0] = v22;
LABEL_57:
  if (rdlen)
    TXTRecordDeallocate(&v31);
}

void sub_2341BABE8(char *__s@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;
  std::string v5;

  sub_2341B7DA4(&v4, __s);
  std::string::push_back(&v4, 46);
  v5 = v4;
  memset(&v4, 0, sizeof(v4));
  v3 = std::string::append(&v5, "local.");
  *a2 = *v3;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_2341BAC84(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
  *(_DWORD *)(a1 + 16) = 504;
}

void sub_2341BACA0(const char *a1@<X0>, unsigned int a2@<W1>, uint32_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X6>, __n128 *a7@<X8>)
{
  char v9;
  char *v13;
  uint32_t v14;
  int v15;
  char *v16;
  void *v17;
  void *v18;
  DNSServiceRef *v19;
  int v20;
  int v21;
  int v22;
  void *__p[2];
  char v24;

  if (!a1)
  {
    a7->n128_u32[0] = 47;
    a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v22 = 511;
LABEL_12:
    a7[1].n128_u32[0] = v22;
    return;
  }
  if (!a4)
  {
    a7->n128_u32[0] = 47;
    a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v22 = 512;
    goto LABEL_12;
  }
  v9 = a2;
  if (a2 >= 2)
  {
    a7->n128_u32[0] = 47;
    a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v22 = 513;
    goto LABEL_12;
  }
  v13 = (char *)__p;
  sub_2341BCBF8(a1, a2, (std::string::size_type *)__p);
  v14 = *a3;
  v15 = v24;
  v16 = (char *)__p[0];
  v17 = sub_234114774(0x50uLL);
  if (v17)
  {
    v18 = v17;
    if (v15 < 0)
      v13 = v16;
    v19 = (DNSServiceRef *)sub_2341B5300((uint64_t)v17, a5, a4, v9);
    a7->n128_u64[0] = 0;
    a7->n128_u64[1] = 0;
    a7[1].n128_u64[0] = 0;
    sub_2341BBABC(v19, v14, v13, a7);
    if (a7->n128_u32[0])
      goto LABEL_16;
    v20 = 0;
    *a6 = v18;
    v21 = 239;
  }
  else
  {
    v21 = 235;
    v20 = 11;
  }
  a7->n128_u32[0] = v20;
  a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
  a7[1].n128_u32[0] = v21;
LABEL_16:
  if (v24 < 0)
    operator delete(__p[0]);
}

void sub_2341BAE00(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void **v17;
  void *v18;
  __n128 v19;
  int v20;
  __n128 v21;
  __n128 v22;
  int v23;
  void *__p;
  char *v25;
  char *v26;

  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  sub_2341B47E4((_QWORD **)&qword_254253108, (uint64_t)a1, (uint64_t)&__p);
  if ((_DWORD)__p)
  {
    *(_DWORD *)a2 = 216;
    *(_QWORD *)(a2 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
    v4 = 525;
LABEL_33:
    *(_DWORD *)(a2 + 16) = v4;
    return;
  }
  if (a1[2] != 1)
  {
    *(_DWORD *)a2 = 216;
    *(_QWORD *)(a2 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
    v4 = 532;
    goto LABEL_33;
  }
  __p = 0;
  v25 = 0;
  v26 = 0;
  if (byte_254253120)
  {
    v5 = qword_254253108;
    v6 = qword_254253110;
    if (qword_254253108 != qword_254253110)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)v5;
        if (*(_DWORD *)(*(_QWORD *)v5 + 8) == 3 && *(_DWORD **)(v8 + 112) == a1)
        {
          if (v7 >= v26)
          {
            v9 = (v7 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v9 + 1) >> 61)
              abort();
            v10 = (v26 - (_BYTE *)__p) >> 2;
            if (v10 <= v9 + 1)
              v10 = v9 + 1;
            if ((unint64_t)(v26 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v11 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v11 = v10;
            if (v11)
            {
              v12 = (char *)sub_2340FD57C((uint64_t)&v26, v11);
              v8 = *(_QWORD *)v5;
            }
            else
            {
              v12 = 0;
            }
            v13 = &v12[8 * v9];
            *(_QWORD *)v13 = v8;
            v7 = v13 + 8;
            v15 = (char *)__p;
            v14 = v25;
            if (v25 != __p)
            {
              do
              {
                v16 = *((_QWORD *)v14 - 1);
                v14 -= 8;
                *((_QWORD *)v13 - 1) = v16;
                v13 -= 8;
              }
              while (v14 != v15);
              v14 = (char *)__p;
            }
            __p = v13;
            v25 = v7;
            v26 = &v12[8 * v11];
            if (v14)
              operator delete(v14);
          }
          else
          {
            *(_QWORD *)v7 = v8;
            v7 += 8;
          }
          v25 = v7;
        }
        v5 += 8;
      }
      while (v5 != v6);
      v17 = (void **)__p;
      if (__p != v7)
      {
        do
        {
          v18 = *v17++;
          v22.n128_u32[0] = 116;
          v22.n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
          v23 = 551;
          sub_2341B4830(v18, &v22, &v21);
        }
        while (v17 != (void **)v7);
      }
    }
  }
  else
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  v19.n128_u32[0] = 116;
  v19.n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
  v20 = 554;
  sub_2341B4830(a1, &v19, &v21);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
  *(_DWORD *)(a2 + 16) = 555;
  if (__p)
  {
    v25 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2341BB06C(const char *a1@<X0>, unsigned int a2@<W1>, uint32_t *a3@<X3>, uint64_t a4@<X4>, __n128 *a5@<X8>)
{
  char v7;
  char *v9;
  uint32_t v10;
  int v11;
  char *v12;
  void *v13;
  DNSServiceRef *v14;
  int v15;
  void *__p[2];
  char v17;

  if (!a1)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v15 = 561;
LABEL_11:
    a5[1].n128_u32[0] = v15;
    return;
  }
  if (!a4)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v15 = 562;
    goto LABEL_11;
  }
  v7 = a2;
  if (a2 >= 2)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v15 = 563;
    goto LABEL_11;
  }
  v9 = (char *)__p;
  sub_2341BCBF8(a1, a2, (std::string::size_type *)__p);
  v10 = *a3;
  v11 = v17;
  v12 = (char *)__p[0];
  v13 = sub_234114774(0x28uLL);
  if (v13)
  {
    if (v11 < 0)
      v9 = v12;
    v14 = (DNSServiceRef *)sub_2341B5FCC((uint64_t)v13, a4, v7);
    sub_2341BBABC(v14, v10, v9, a5);
  }
  else
  {
    a5->n128_u32[0] = 11;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a5[1].n128_u32[0] = 245;
  }
  if (v17 < 0)
    operator delete(__p[0]);
}

void sub_2341BB198(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  void *v3;

  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  v3 = (void *)sub_2341B5040((uint64_t **)&qword_254253108, a1);
  if (v3)
  {
    sub_2341B48A4(v3, 0, a2);
  }
  else
  {
    a2->n128_u32[0] = 216;
    a2->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a2[1].n128_u32[0] = 575;
  }
}

void sub_2341BB21C(uint64_t a1@<X0>, uint32_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint32_t v15;
  int v16;
  char *p_p;
  void *v18;
  unint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void *__p;
  char v26;
  __int128 v27;

  if (!a1)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v20 = 584;
LABEL_17:
    a5[1].n128_u32[0] = v20;
    return;
  }
  if (*(unsigned __int8 *)(a1 + 84) >= 2u)
  {
    a5->n128_u32[0] = 47;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v20 = 585;
    goto LABEL_17;
  }
  sub_2341BCBE8(a1);
  if (qword_25615DDD0 && (v10 = *(_QWORD *)(qword_25615DDD8 + 8) - *(_QWORD *)qword_25615DDD8) != 0)
  {
    v11 = 0;
    v12 = v10 / 152;
    if (v12 <= 1)
      v12 = 1;
    v13 = *(_QWORD *)qword_25615DDD8 - 152;
    while (1)
    {
      v13 += 152;
      if (v13 == a1)
        break;
      v11 += 176;
      if (!--v12)
        goto LABEL_10;
    }
    v24 = *(_QWORD *)(qword_25615DDD0 + 48) + v11;
    v14 = (char *)(v24 + 152);
    if (*(char *)(v24 + 175) < 0)
      v14 = *(char **)v14;
  }
  else
  {
LABEL_10:
    v14 = 0;
  }
  v15 = *a2;
  v16 = *(unsigned __int8 *)(a1 + 85);
  p_p = (char *)__p;
  sub_2341BBE20((char *)a1, &v27);
  v18 = sub_234114774(0xA0uLL);
  if (v18)
  {
    if (v26 >= 0)
      p_p = (char *)&__p;
    v19 = sub_2341B6634((uint64_t)v18, a4, a3, v16, a1, qword_25615DDD0, &v27);
    sub_2341BBEC0(v19, v15, p_p, (const char *)a1, v14, a5);
  }
  else
  {
    a5->n128_u32[0] = 11;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a5[1].n128_u32[0] = 439;
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v26 < 0)
    operator delete(__p);
}

void sub_2341BB424(uint64_t a1@<X0>, uint32_t *a2@<X1>, __n128 *a3@<X8>)
{
  char *p_p;
  uint32_t v7;
  int v8;
  char *v9;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  if (!a1)
  {
    a3->n128_u32[0] = 47;
    a3->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v11 = 608;
LABEL_9:
    a3[1].n128_u32[0] = v11;
    return;
  }
  if (*(unsigned __int8 *)(a1 + 84) >= 2u)
  {
    a3->n128_u32[0] = 47;
    a3->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    v11 = 609;
    goto LABEL_9;
  }
  p_p = (char *)&__p;
  sub_2341BCBE8(a1);
  v7 = *a2;
  v8 = v16;
  v9 = (char *)__p;
  sub_2341BBE20((char *)a1, &v17);
  if (sub_234114774(0xA0uLL))
  {
    if (v8 < 0)
      p_p = v9;
    v10 = sub_2341B66E4();
    sub_2341BBEC0(v10, v7, p_p, (const char *)a1, 0, a3);
  }
  else
  {
    a3->n128_u32[0] = 11;
    a3->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a3[1].n128_u32[0] = 449;
  }
  v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v16 < 0)
    operator delete(__p);
}

_QWORD *sub_2341BB58C(char *a1)
{
  NSObject *v2;
  _QWORD *result;
  _DWORD *v4;
  __n128 v5;
  int v6;
  __n128 buf;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf.n128_u32[0] = 136315138;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)a1;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "No longer need resolve for %s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  result = (_QWORD *)sub_2341B4F4C((uint64_t **)&qword_254253108, a1);
  if (result)
  {
    v4 = (_DWORD *)result[12];
    if (*v4)
    {
      --*v4;
      if (!*(_DWORD *)result[12])
      {
        do
        {
          v5.n128_u32[0] = 116;
          v5.n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
          v6 = 651;
          sub_2341B4830(result, &v5, &buf);
          if (!byte_254253120)
          {
            byte_254253120 = 1;
            qword_254253110 = 0;
            unk_254253118 = 0;
            qword_254253108 = 0;
          }
          result = (_QWORD *)sub_2341B4F4C((uint64_t **)&qword_254253108, a1);
        }
        while (result);
      }
    }
  }
  return result;
}

void sub_2341BB718(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint32_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint32_t v6;
  uint64_t v7;
  uint16_t v8;
  uint16_t v9;
  std::string *p_p;
  uint64_t v11;
  _QWORD rdata[2];
  std::string __p;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  if (!a1)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
    *(_DWORD *)(a5 + 16) = 659;
    return;
  }
  v6 = *a4;
  sub_2341BABE8(a1, &__p);
  if (sub_23410EED0((uint64_t)v14))
  {
    rdata[0] = sub_23410ED70((uint64_t)v14);
    rdata[1] = v7;
    v8 = 28;
    v9 = 16;
LABEL_7:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v11 = DNSServiceReconfirmRecord(0, v6, (const char *)p_p, v8, 1u, v9, rdata);
    sub_2341BB82C((uint64_t)"ChipDnssdReconfirmRecord", v11);
    sub_2341BD574(v11, a5);
    goto LABEL_12;
  }
  if (sub_23410EDDC(v14))
  {
    LODWORD(rdata[0]) = sub_23410ED68((uint64_t)v14);
    v8 = 1;
    v9 = 4;
    goto LABEL_7;
  }
  *(_DWORD *)a5 = 47;
  *(_QWORD *)(a5 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
  *(_DWORD *)(a5 + 16) = 692;
LABEL_12:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t sub_2341BB82C(uint64_t result, int a2)
{
  const char *v3;
  NSObject *v4;
  const char *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (const char *)result;
    v4 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if (v3)
        v5 = v3;
      else
        v5 = "(null)";
      *(_DWORD *)buf = 136315394;
      v7 = v5;
      v8 = 2080;
      v9 = sub_2341BD3BC(a2);
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "%s (%s)", buf, 0x16u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      sub_2341BD3BC(a2);
      return sub_2341147D0(0x22u, 1);
    }
  }
  return result;
}

double sub_2341BB940(uint64_t a1, int a2, uint64_t a3, const char *a4, const char *a5, const char *a6, void *a7)
{
  NSObject *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v13 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (a4)
      v14 = a4;
    else
      v14 = "(null)";
    *(_DWORD *)buf = 136316162;
    if (a5)
      v15 = a5;
    else
      v15 = "(null)";
    v19 = "OnRegister";
    v20 = 2080;
    if (a6)
      v16 = a6;
    else
      v16 = "(null)";
    v21 = v14;
    v22 = 2080;
    v23 = v15;
    v24 = 2080;
    v25 = v16;
    v26 = 1024;
    v27 = a2;
    _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_DEFAULT, "Mdns: %s name: %s, type: %s, domain: %s, flags: %d", buf, 0x30u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  return sub_2341B48A4(a7, a3, (__n128 *)buf);
}

void sub_2341BBABC(DNSServiceRef *a1@<X0>, uint32_t a2@<W1>, char *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t Connection;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Connection = DNSServiceCreateConnection(a1 + 3);
  if ((_DWORD)Connection)
  {
    sub_2341B48A4(a1, Connection, a4);
  }
  else
  {
    v9 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = "(null)";
      if (a3)
        v10 = a3;
      *(_DWORD *)buf = 136315138;
      v14 = v10;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "Browsing for: %s on local domain", buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    sub_2341BBD48(a1, a2, a3, "local.", a4);
    if (!a4->n128_u32[0])
    {
      v11 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = "(null)";
        if (a3)
          v12 = a3;
        *(_DWORD *)buf = 136315394;
        v14 = v12;
        v15 = 2080;
        v16 = "default.service.arpa.";
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Browsing for: %s on %s domain", buf, 0x16u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x22u, 2);
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      sub_2341BBD48(a1, a2, a3, "default.service.arpa.", a4);
      if (!a4->n128_u32[0])
      {
        if (!byte_254253120)
        {
          byte_254253120 = 1;
          qword_254253110 = 0;
          unk_254253118 = 0;
          qword_254253108 = 0;
        }
        sub_2341B49C4(a1[3], (void **)&qword_254253108, (unint64_t)a1, (uint64_t)a4);
      }
    }
  }
}

void sub_2341BBD48(void *context@<X0>, uint32_t interfaceIndex@<W1>, char *regtype@<X2>, char *domain@<X3>, __n128 *a5@<X8>)
{
  uint64_t v7;
  DNSServiceRef sdRef;

  sdRef = (DNSServiceRef)*((_QWORD *)context + 3);
  v7 = DNSServiceBrowse(&sdRef, 0x4000u, interfaceIndex, regtype, domain, (DNSServiceBrowseReply)sub_2341BBDCC, context);
  if ((_DWORD)v7)
  {
    sub_2341B48A4(context, v7, a5);
  }
  else
  {
    a5->n128_u32[0] = 0;
    a5->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a5[1].n128_u32[0] = 213;
  }
}

void sub_2341BBDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  __n128 v8;

  if ((_DWORD)a4)
    sub_2341B48A4(a8, a4, &v8);
  else
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 32))(a8, a2, a5, a6, a7, a3);
}

_QWORD *sub_2341BBE20@<X0>(char *__s@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;

  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  result = (_QWORD *)sub_2341B4F4C((uint64_t **)&qword_254253108, __s);
  if (result)
  {
    v4 = result[13];
    *a2 = result[12];
    a2[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    v7 = operator new(0x20uLL);
    v7[2] = 0;
    *v7 = &unk_250514110;
    v7[1] = 0;
    a2[1] = v7;
    *((_DWORD *)v7 + 6) = 0;
    result = v7 + 3;
    *a2 = result;
  }
  return result;
}

void sub_2341BBEC0(unint64_t a1@<X0>, uint32_t a2@<W1>, char *a3@<X2>, const char *a4@<X3>, char *a5@<X4>, __n128 *a6@<X8>)
{
  NSObject *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t Connection;
  unsigned __int32 v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint32_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v12 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (a3)
      v13 = a3;
    else
      v13 = "(null)";
    *(_DWORD *)buf = 136315906;
    if (a4)
      v14 = a4;
    else
      v14 = "(null)";
    v19 = v13;
    v20 = 2080;
    if (a5)
      v15 = a5;
    else
      v15 = "(null)";
    v21 = v14;
    v22 = 2080;
    v23 = v15;
    v24 = 1024;
    v25 = a2;
    _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "Resolve type=%s name=%s domain=%s interface=%u", buf, 0x26u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  Connection = DNSServiceCreateConnection((DNSServiceRef *)(a1 + 24));
  if ((_DWORD)Connection)
  {
    sub_2341B48A4((void *)a1, Connection, a6);
    return;
  }
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  if (a5)
  {
    sub_2341BC180(a2, a3, a5, (void *)(a1 + 144), (DNSServiceRef *)a1, a4, a6);
    v17 = a6->n128_u32[0];
    if (a6->n128_u32[0])
      return;
  }
  else
  {
    sub_2341BC180(a2, a3, "local.", (void *)(a1 + 144), (DNSServiceRef *)a1, a4, a6);
    if (a6->n128_u32[0])
      return;
    a6->n128_u64[0] = 0;
    a6->n128_u64[1] = 0;
    a6[1].n128_u64[0] = 0;
    sub_2341BC180(a2, a3, "default.service.arpa.", (void *)(a1 + 144), (DNSServiceRef *)a1, a4, a6);
    if (a6->n128_u32[0])
      return;
    LOBYTE(v17) = 1;
  }
  *(_BYTE *)(a1 + 120) = v17;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  a6->n128_u64[0] = 0;
  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  sub_2341B49C4(*(DNSServiceRef *)(a1 + 24), (void **)&qword_254253108, a1, (uint64_t)a6);
  if (!a6->n128_u32[0])
    ++**(_DWORD **)(a1 + 96);
}

void sub_2341BC130(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_250514110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2341BC144(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_250514110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23493E704);
}

void sub_2341BC180(uint32_t interfaceIndex@<W1>, char *regtype@<X2>, char *domain@<X4>, void *context@<X5>, DNSServiceRef *a5@<X0>, const char *a6@<X3>, __n128 *a7@<X8>)
{
  uint64_t v9;
  DNSServiceRef sdRef;

  sdRef = a5[3];
  v9 = DNSServiceResolve(&sdRef, 0x4000u, interfaceIndex, a6, regtype, domain, (DNSServiceResolveReply)sub_2341BC204, context);
  if ((_DWORD)v9)
  {
    sub_2341B48A4(a5, v9, a7);
  }
  else
  {
    a7->n128_u32[0] = 0;
    a7->n128_u64[1] = (unint64_t)"src/platform/Darwin/DnssdImpl.cpp";
    a7[1].n128_u32[0] = 373;
  }
}

double sub_2341BC204(uint64_t a1, int a2, int a3, int a4, const char *a5, char *a6, unsigned int a7, unsigned int a8, unsigned __int8 *a9, uint64_t a10)
{
  NSObject *v16;
  unsigned int v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  double result;
  _QWORD *v22;
  DNSServiceProtocol v23;
  const char *v24;
  uint32_t v25;
  void *v26;
  uint64_t AddrInfo;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  NSObject *v31;
  void *v32;
  uint64_t v33;
  DNSServiceRef sdRef;
  _BYTE buf[24];
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  unsigned int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v16 = sub_234117B80(0x22u, "Discovery");
  v17 = __rev16(a7);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (a5)
      v18 = a5;
    else
      v18 = "(null)";
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "OnResolve";
    *(_WORD *)&buf[12] = 1024;
    if (a6)
      v19 = a6;
    else
      v19 = "(null)";
    *(_DWORD *)&buf[14] = a2;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    v37 = 2080;
    v38 = v18;
    v39 = 2080;
    v40 = v19;
    v41 = 1024;
    v42 = v17;
    _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Mdns: %s flags: %d, interface: %u, fullname: %s, hostname: %s, port: %u", buf, 0x32u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  if (!a10)
  {
    v31 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_ERROR, "ResolveContextWithType is null", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0x22u, 1);
    return result;
  }
  v20 = *(_QWORD *)a10;
  memset(buf, 0, sizeof(buf));
  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  sub_2341B47E4((_QWORD **)&qword_254253108, v20, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    sub_2341BB82C((uint64_t)"OnResolve", a4);
    if (!a4)
      sub_2341B73C0(v20, a3, a5, a6, a7, a8, a9, *(_BYTE *)(a10 + 8));
    if ((a2 & 1) == 0)
    {
      if (!sub_2341B7930(v20))
      {
        v32 = (void *)v20;
        v33 = 4294901754;
        return sub_2341B48A4(v32, v33, (__n128 *)buf);
      }
      v22 = *(_QWORD **)(v20 + 40);
      if (v22 != (_QWORD *)(v20 + 48))
      {
        v23 = *(_DWORD *)(v20 + 64);
        do
        {
          if (!*((_BYTE *)v22 + 272))
          {
            v24 = (const char *)(v22 + 31);
            if (*((char *)v22 + 271) < 0)
              v24 = *(const char **)v24;
            v25 = *((_DWORD *)v22 + 8);
            sdRef = *(DNSServiceRef *)(v20 + 24);
            if (*((_BYTE *)v22 + 64))
              v26 = (void *)(v20 + 128);
            else
              v26 = (void *)(v20 + 144);
            AddrInfo = DNSServiceGetAddrInfo(&sdRef, 0x4000u, v25, v23, v24, (DNSServiceGetAddrInfoReply)sub_2341BC554, v26);
            if ((_DWORD)AddrInfo)
            {
              v33 = AddrInfo;
              v32 = (void *)v20;
              return sub_2341B48A4(v32, v33, (__n128 *)buf);
            }
            *((_BYTE *)v22 + 272) = 1;
          }
          v28 = (_QWORD *)v22[1];
          if (v28)
          {
            do
            {
              v29 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v22[2];
              v30 = *v29 == (_QWORD)v22;
              v22 = v29;
            }
            while (!v30);
          }
          v22 = v29;
        }
        while (v29 != (_QWORD *)(v20 + 48));
      }
    }
  }
  return result;
}

void sub_2341BC554(uint64_t a1, int a2, int a3, int a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v14;
  const char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  __n128 *v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD *v24;
  _QWORD v25[3];
  uint8_t buf[24];
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v14 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (a5)
      v15 = a5;
    else
      v15 = "(null)";
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "OnGetAddrInfo";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    v27 = 2080;
    v28 = v15;
    _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "Mdns: %s flags: %d, interface: %u, hostname: %s", buf, 0x22u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  if (!a8)
  {
    v20 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "ResolveContextWithType is null", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0x22u, 1);
    return;
  }
  v16 = *(char **)a8;
  memset(buf, 0, sizeof(buf));
  if (!byte_254253120)
  {
    byte_254253120 = 1;
    qword_254253110 = 0;
    unk_254253118 = 0;
    qword_254253108 = 0;
  }
  sub_2341B47E4((_QWORD **)&qword_254253108, (uint64_t)v16, (uint64_t)buf);
  if (*(_DWORD *)buf)
    return;
  sub_2341BB82C((uint64_t)"OnGetAddrInfo", a4);
  if (!a4)
  {
    *(_DWORD *)buf = a3;
    sub_2341B7DA4(&buf[8], a5);
    BYTE6(v28) = *(_BYTE *)(a8 + 8);
    memset(v25, 0, sizeof(v25));
    sub_2341B7038((uint64_t)v16, (int *)buf, a6, (uint64_t)v25);
    if (!LODWORD(v25[0]) && *(_BYTE *)(a8 + 8))
      v16[120] = 0;
    if (SBYTE5(v28) < 0)
    {
      operator delete(*(void **)&buf[8]);
      if ((a2 & 1) == 0)
        goto LABEL_18;
LABEL_29:
      if (!v16[120])
        sub_2341B673C((uint64_t)v16);
      return;
    }
  }
  if ((a2 & 1) != 0)
    goto LABEL_29;
LABEL_18:
  if (sub_2341B735C((uint64_t)v16))
  {
    if (v16[120])
    {
      if (v16[121])
        return;
      memset(buf, 0, sizeof(buf));
      sub_2341BC8E4((uint64_t)v16, v17, v18, (uint64_t)buf);
      if (!*(_DWORD *)buf)
      {
        v16[121] = 1;
        return;
      }
      v19 = (__n128 *)v25;
    }
    else
    {
      v23 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v24 = v16 + 72;
        if (v16[95] < 0)
          v24 = (_QWORD *)*v24;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v24;
        _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_INFO, "No need to start SRP resolve timer for %s; completing resolve",
          buf,
          0xCu);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0x22u, 3);
      v19 = (__n128 *)buf;
    }
    v21 = v16;
    v22 = 0;
  }
  else
  {
    v19 = (__n128 *)buf;
    v21 = v16;
    v22 = 4294901754;
  }
  sub_2341B48A4(v21, v22, v19);
}

uint64_t sub_2341BC8E4@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  unsigned __int16 v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  result = sub_2341BEE30(a1, a2, a3);
  if ((result & 0xFF0000) != 0)
    v7 = result;
  else
    v7 = 250;
  if (a1)
  {
    v8 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (_QWORD *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 67109378;
      v13 = v7;
      v14 = 2080;
      v15 = v9;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Starting timer to wait for %d milliseconds for possible SRP resolve results for %s", buf, 0x12u);
    }
    v10 = sub_234114844(2u);
    if ((_DWORD)v10)
      v10 = sub_2341147D0(0x22u, 2);
    v11 = sub_2341B1F60(v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, double (*)(uint64_t, char *), uint64_t))(*(_QWORD *)v11 + 40))(v11, v7, sub_2341B6F34, a1);
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/platform/Darwin/DnssdImpl.cpp";
    *(_DWORD *)(a4 + 16) = 80;
  }
  return result;
}

uint64_t sub_2341BCA44(const char *a1, int a2)
{
  size_t v4;
  const char *v5;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  sub_2341BCB30((uint64_t)v7);
  v4 = strlen(a1);
  sub_2341BD0E8(v7, (uint64_t)a1, v4);
  if (a2)
    v5 = "._tcp";
  else
    v5 = "._udp";
  sub_2341BD0E8(v7, (uint64_t)v5, 5);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v7[1] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x23493E6BC](&v9);
}

uint64_t sub_2341BCB30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v4;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t sub_2341BCBE8(uint64_t a1)
{
  return sub_2341BCA44((const char *)(a1 + 75), *(unsigned __int8 *)(a1 + 84));
}

void sub_2341BCBF8(const char *a1@<X0>, int a2@<W1>, std::string::size_type *a3@<X8>)
{
  char *v4;
  std::string::size_type v5;
  unsigned __int8 v6;
  void **v7;
  int64_t v8;
  char *v9;
  int v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *p_p;
  std::string::size_type size;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  char *v23;
  std::string __p;
  std::string v25;
  std::string v26;
  void *v27[2];
  unsigned __int8 v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2341BCA44(a1, a2);
  sub_2341B7DA4(v27, "._sub.");
  v4 = (char *)*((unsigned __int8 *)a3 + 23);
  if ((char)v4 >= 0)
    v5 = (std::string::size_type)a3;
  else
    v5 = *a3;
  v6 = v28;
  if ((v28 & 0x80u) == 0)
    v7 = v27;
  else
    v7 = (void **)v27[0];
  if ((v28 & 0x80u) == 0)
    v8 = v28;
  else
    v8 = (int64_t)v27[1];
  if (v8)
  {
    if ((char)v4 < 0)
      v4 = (char *)a3[1];
    if ((uint64_t)v4 >= v8)
    {
      v9 = &v4[v5];
      v10 = *(char *)v7;
      v11 = (void *)v5;
      do
      {
        v12 = &v4[-v8];
        if (v12 == (char *)-1)
          break;
        v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
        if (!v13)
          break;
        v14 = v13;
        if (!memcmp(v13, v7, v8))
        {
          if (v14 != v9)
          {
            v15 = (std::string::size_type)&v14[-v5];
            if (&v14[-v5] != (char *)-1)
              goto LABEL_21;
          }
          break;
        }
        v11 = v14 + 1;
        v4 = (char *)(v9 - (v14 + 1));
      }
      while ((uint64_t)v4 >= v8);
    }
  }
  else
  {
    v15 = 0;
LABEL_21:
    std::string::basic_string(&v25, (const std::string *)a3, v15 + v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
    v16 = std::string::append(&v25, ",");
    v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string(&__p, (const std::string *)a3, 0, v15, (std::allocator<char> *)v29);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v26, (const std::string::value_type *)p_p, size);
    v21 = v20->__r_.__value_.__r.__words[0];
    v29[0] = v20->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)a3 + 23) < 0)
      operator delete((void *)*a3);
    v23 = (char *)v29[0];
    *a3 = v21;
    a3[1] = (std::string::size_type)v23;
    *(std::string::size_type *)((char *)a3 + 15) = *(_QWORD *)((char *)v29 + 7);
    *((_BYTE *)a3 + 23) = v22;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v6 = v28;
  }
  if ((v6 & 0x80) != 0)
    operator delete(v27[0]);
}

uint64_t sub_2341BCE28(const char *a1, int a2, const char **a3, int a4)
{
  size_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  sub_2341BCB30((uint64_t)v14);
  v8 = strlen(a1);
  sub_2341BD0E8(v14, (uint64_t)a1, v8);
  if (a2)
    v9 = "._tcp";
  else
    v9 = "._udp";
  sub_2341BD0E8(v14, (uint64_t)v9, 5);
  if (a4 >= 1)
  {
    v10 = a4;
    do
    {
      sub_2341BD0E8(v14, (uint64_t)",", 1);
      v11 = *a3++;
      v12 = strlen(v11);
      sub_2341BD0E8(v14, (uint64_t)v11, v12);
      --v10;
    }
    while (v10);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v14[1] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x23493E6BC](&v16);
}

uint64_t sub_2341BCF70(uint64_t a1)
{
  return sub_2341BCE28((const char *)(a1 + 75), *(unsigned __int8 *)(a1 + 84), *(const char ***)(a1 + 112), *(_QWORD *)(a1 + 120));
}

__n128 sub_2341BCF84@<Q0>(std::string *__s@<X0>, uint64_t a2@<X8>)
{
  int64_t size;
  std::string *v5;
  _BYTE *v6;
  std::string *v7;
  _BYTE *v8;
  __n128 result;

  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    v5 = __s;
  }
  if (size >= 1)
  {
    v6 = (char *)v5 + size;
    v7 = v5;
    do
    {
      v8 = memchr(v7, 44, size);
      if (!v8)
        break;
      if (*v8 == 44)
      {
        if (v8 != v6 && v8 - (_BYTE *)v5 != -1)
          std::string::erase(__s, v8 - (_BYTE *)v5, 0xFFFFFFFFFFFFFFFFLL);
        break;
      }
      v7 = (std::string *)(v8 + 1);
      size = v6 - (_BYTE *)v7;
    }
    while (v6 - (_BYTE *)v7 >= 1);
  }
  result = *(__n128 *)&__s->__r_.__value_.__l.__data_;
  *(_OWORD *)a2 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&__s->__r_.__value_.__l + 2);
  __s->__r_.__value_.__l.__size_ = 0;
  __s->__r_.__value_.__r.__words[2] = 0;
  __s->__r_.__value_.__r.__words[0] = 0;
  return result;
}

std::string *sub_2341BD038@<X0>(char *__s@<X0>, uint64_t a2@<X8>)
{
  std::string *result;
  char v4;
  int64_t v5;
  std::string *v6;
  std::string *v7;

  result = (std::string *)sub_2341B7DA4((_QWORD *)a2, __s);
  v4 = *(_BYTE *)(a2 + 23);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0)
    v6 = (std::string *)a2;
  else
    v6 = *(std::string **)a2;
  if (v5 >= 1)
  {
    v7 = (std::string *)((char *)v6 + v5);
    result = v6;
    do
    {
      result = (std::string *)memchr(result, 46, v5);
      if (!result)
        break;
      if (result->__r_.__value_.__s.__data_[0] == 46)
      {
        if (result != v7 && (char *)result - (char *)v6 != -1)
          return std::string::erase((std::string *)a2, (char *)result - (char *)v6, 0xFFFFFFFFFFFFFFFFLL);
        return result;
      }
      result = (std::string *)((char *)result + 1);
      v5 = (char *)v7 - (char *)result;
    }
    while ((char *)v7 - (char *)result >= 1);
  }
  return result;
}

_QWORD *sub_2341BD0E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x23493E620](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!sub_2341BD1F8(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x23493E62C](v13);
  return a1;
}

uint64_t sub_2341BD1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_2341BD318(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

_QWORD *sub_2341BD318(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

const char *sub_2341BD3BC(int a1)
{
  const char *result;

  switch(a1)
  {
    case -65568:
      result = "kDNSServiceErr_Timeout";
      break;
    case -65567:
      result = "kDNSServiceErr_PollingMode";
      break;
    case -65566:
      result = "kDNSServiceErr_NoRouter";
      break;
    case -65565:
      result = "kDNSServiceErr_NATPortMappingDisabled";
      break;
    case -65564:
      result = "kDNSServiceErr_NATPortMappingUnsupported";
      break;
    case -65563:
      result = "kDNSServiceErr_ServiceNotRunning";
      break;
    case -65562:
      result = "kDNSServiceErr_Transient";
      break;
    case -65561:
      result = "kDNSServiceErr_BadKey";
      break;
    case -65560:
      result = "kDNSServiceErr_BadSig";
      break;
    case -65559:
      result = "kDNSServiceErr_BadTime";
      break;
    case -65558:
      result = "kDNSServiceErr_DoubleNAT";
      break;
    case -65557:
      result = "kDNSServiceErr_NATTraversal";
      break;
    case -65556:
      result = "kDNSServiceErr_NoSuchKey";
      break;
    case -65555:
      result = "kDNSServiceErr_NoAuth";
      break;
    case -65554:
      result = "kDNSServiceErr_NoSuchRecord";
      break;
    case -65553:
      result = "kDNSServiceErr_Refused";
      break;
    case -65552:
      result = "kDNSServiceErr_BadInterfaceIndex";
      break;
    case -65551:
      result = "kDNSServiceErr_Incompatible";
      break;
    case -65550:
      result = "kDNSServiceErr_Firewall";
      break;
    case -65549:
      result = "kDNSServiceErr_Invalid";
      break;
    case -65548:
      result = "kDNSServiceErr_NameConflict";
      break;
    case -65547:
      result = "kDNSServiceErr_AlreadyRegistered";
      break;
    case -65546:
      goto LABEL_5;
    case -65545:
      result = "kDNSServiceErr_NotInitialized";
      break;
    case -65544:
      result = "kDNSServiceErr_Unsupported";
      break;
    case -65543:
      result = "kDNSServiceErr_BadFlags";
      break;
    case -65542:
      result = "kDNSServiceErr_BadState";
      break;
    case -65541:
      result = "kDNSServiceErr_BadReference";
      break;
    case -65540:
      result = "kDNSServiceErr_BadParam";
      break;
    case -65539:
      result = "kDNSServiceErr_NoMemory";
      break;
    case -65538:
      result = "kDNSServiceErr_NoSuchName";
      break;
    case -65537:
      result = "kDNSServiceErr_Unknown";
      break;
    default:
      if (a1)
LABEL_5:
        result = "Unknown DNSService error code";
      else
        result = "kDNSServiceErr_NoError";
      break;
  }
  return result;
}

uint64_t sub_2341BD574@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if ((int)result > -65540)
  {
    if ((_DWORD)result == -65539)
    {
      v2 = 106;
      result = 11;
      goto LABEL_11;
    }
    if (!(_DWORD)result)
    {
      v2 = 102;
      goto LABEL_11;
    }
LABEL_8:
    v2 = 110;
    result = 172;
    goto LABEL_11;
  }
  if ((_DWORD)result == -65555)
  {
    v2 = 108;
    result = 179;
    goto LABEL_11;
  }
  if ((_DWORD)result != -65548)
    goto LABEL_8;
  v2 = 104;
  result = 180;
LABEL_11:
  *(_DWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = "src/platform/Darwin/MdnsError.cpp";
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

void sub_2341BD604(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSObject *v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  void (***v9)(uint8_t *__return_ptr);
  NSObject *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  __int128 *v20;
  NSObject *v21;
  char *v22;
  NSObject *v23;
  char *v24;
  uint8_t buf[16];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = 0;
  sub_234108344();
  sub_2341B1D98();
  sub_2341B1D34(a2);
  if (*(_DWORD *)a2)
  {
    v4 = sub_234117B80(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a2;
      v26 = a2[2];
      v5 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Entropy initialization failed: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
LABEL_37:
      *(_OWORD *)buf = *(_OWORD *)a2;
      v26 = a2[2];
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0x1Fu, 1);
    }
  }
  else
  {
    v6 = sub_2341B1F60(v3);
    (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v6 + 16))(buf);
    *(_OWORD *)a2 = *(_OWORD *)buf;
    a2[2] = v26;
    if (*(_DWORD *)a2)
    {
      v7 = sub_234117B80(0x1Fu, "DeviceLayer");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = *(_OWORD *)a2;
        v26 = a2[2];
        v8 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "SystemLayer initialization failed: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
        goto LABEL_37;
    }
    else
    {
      v9 = (void (***)(uint8_t *__return_ptr))sub_2341B2114();
      (*v9)[39](buf);
      *(_OWORD *)a2 = *(_OWORD *)buf;
      a2[2] = v26;
      if (*(_DWORD *)a2)
      {
        v10 = sub_234117B80(0x1Fu, "DeviceLayer");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)buf = *(_OWORD *)a2;
          v26 = a2[2];
          v11 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v11;
          _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Configuration Manager initialization failed: %s", buf, 0xCu);
        }
        if (sub_234114844(1u))
          goto LABEL_37;
      }
      else
      {
        v12 = sub_2341B3D90();
        v13 = sub_2341B1F60(v12);
        sub_2341BDC4C((uint64_t)v12, v13, (uint64_t)buf);
        *(_OWORD *)a2 = *(_OWORD *)buf;
        a2[2] = v26;
        if (*(_DWORD *)a2)
        {
          v14 = sub_234117B80(0x1Fu, "DeviceLayer");
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)a2;
            v26 = a2[2];
            v15 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v15;
            _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "UDP initialization failed: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
            goto LABEL_37;
        }
        else
        {
          v16 = sub_2341B3E10();
          v17 = sub_2341B1F60(v16);
          sub_2341BDC4C((uint64_t)v16, v17, (uint64_t)buf);
          *(_OWORD *)a2 = *(_OWORD *)buf;
          a2[2] = v26;
          if (*(_DWORD *)a2)
          {
            v18 = sub_234117B80(0x1Fu, "DeviceLayer");
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_OWORD *)buf = *(_OWORD *)a2;
              v26 = a2[2];
              v19 = sub_2341083CC((const char **)buf, 1);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v19;
              _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_ERROR, "TCP initialization failed: %s", buf, 0xCu);
            }
            if (sub_234114844(1u))
              goto LABEL_37;
          }
          else
          {
            v20 = &xmmword_25615DD20;
            if (!byte_25615DD70)
            {
              byte_25615DD70 = 1;
              xmmword_25615DD20 = 0u;
              *(_OWORD *)algn_25615DD30 = 0u;
              xmmword_25615DD40 = 0u;
              unk_25615DD50 = 0u;
              xmmword_25615DD60 = 0u;
              v20 = (__int128 *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
              *((_QWORD *)v20 + 7) = 0;
              *((_QWORD *)v20 + 8) = 0;
              *((_QWORD *)v20 + 9) = 0;
            }
            sub_2341B2138(v20, buf);
            *(_OWORD *)a2 = *(_OWORD *)buf;
            a2[2] = v26;
            if (*(_DWORD *)a2)
            {
              v21 = sub_234117B80(0x1Fu, "DeviceLayer");
              if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              {
                *(_OWORD *)buf = *(_OWORD *)a2;
                v26 = a2[2];
                v22 = sub_2341083CC((const char **)buf, 1);
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v22;
                _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_ERROR, "BLEManager initialization failed: %s", buf, 0xCu);
              }
              if (sub_234114844(1u))
                goto LABEL_37;
            }
            else
            {
              sub_2341B4144((uint64_t)buf);
              *(_OWORD *)a2 = *(_OWORD *)buf;
              a2[2] = v26;
              if (*(_DWORD *)a2)
              {
                v23 = sub_234117B80(0x1Fu, "DeviceLayer");
                if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                {
                  *(_OWORD *)buf = *(_OWORD *)a2;
                  v26 = a2[2];
                  v24 = sub_2341083CC((const char **)buf, 1);
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v24;
                  _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "Connectivity Manager initialization failed: %s", buf, 0xCu);
                }
                if (sub_234114844(1u))
                  goto LABEL_37;
              }
            }
          }
        }
      }
    }
  }
}

_QWORD *sub_2341BDC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  int v7;
  int v8;

  result = sub_23410F414();
  if (*(_BYTE *)(a1 + 8))
  {
    v7 = 64;
LABEL_7:
    v8 = 3;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 8) = 1;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (!(_DWORD)result)
  {
    v7 = 65;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 16) = a2;
  v8 = 0;
  if (*(_BYTE *)(a1 + 8) == 1)
    *(_BYTE *)(a1 + 8) = 2;
  v7 = 68;
LABEL_8:
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/inet/InetLayer.h";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_2341BDCF0()
{
  NSObject *v0;
  uint64_t *v1;
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v11[16];
  uint8_t v12[16];
  uint8_t buf[16];

  v0 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_DEFAULT, "Inet Layer shutdown", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Fu, 2);
  v1 = sub_2341B3D90();
  if (*((_BYTE *)v1 + 8) == 2)
    *((_BYTE *)v1 + 8) = 0;
  v1[2] = 0;
  v2 = sub_2341B3E10();
  if (*((_BYTE *)v2 + 8) == 2)
    *((_BYTE *)v2 + 8) = 0;
  v2[2] = 0;
  v3 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "BLE Layer shutdown", v12, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Fu, 2);
  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v5 = (_QWORD *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    v5[7] = 0;
    v5[8] = 0;
    v5[9] = 0;
  }
  v6 = (_DWORD *)nullsub_13(&xmmword_25615DD20, v4);
  sub_23410BA9C(v6);
  sub_2341B22DC(&xmmword_25615DD20);
  v7 = sub_234117B80(0x1Fu, "DeviceLayer");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "System Layer shutdown", v11, 2u);
  }
  v8 = sub_234114844(2u);
  if ((_DWORD)v8)
    v8 = sub_2341147D0(0x1Fu, 2);
  v9 = sub_2341B1F60(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
}

_QWORD *sub_2341BDED8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v8;

  v6 = result;
  *(_OWORD *)a4 = xmmword_250514150;
  *(_QWORD *)(a4 + 16) = 161;
  v8 = (_QWORD *)*result;
  if (*result)
  {
    while (v8[1] != a2 || v8[2] != a3)
    {
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = sub_234114774(0x18uLL);
    if (result)
    {
      *result = *v6;
      result[1] = a2;
      result[2] = a3;
      *v6 = result;
    }
    else
    {
      *(_DWORD *)a4 = 11;
      *(_QWORD *)(a4 + 8) = "src/include/platform/internal/GenericPlatformManagerImpl.ipp";
      *(_DWORD *)(a4 + 16) = 174;
    }
  }
  return result;
}

_QWORD *sub_2341BDF84(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = a1;
  result = *a1;
  if (result)
  {
    do
    {
      if (result[1] == a2 && result[2] == a3)
      {
        *v3 = *result;
        j__free(result);
      }
      else
      {
        v3 = result;
      }
      result = (_QWORD *)*v3;
    }
    while (*v3);
  }
  return result;
}

void sub_2341BDFEC()
{
  uint64_t v0;
  _UNKNOWN **v1;
  _QWORD v2[3];
  unsigned int v3;

  if (qword_254253100 != -1)
    dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
  v0 = qword_2542530C8;
  if (qword_2542530C8)
  {
    v3 = 0;
    v1 = sub_2341B2114();
    (*((void (**)(_QWORD *__return_ptr, _UNKNOWN **, unsigned int *))*v1 + 4))(v2, v1, &v3);
    if (!LODWORD(v2[0]))
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v0 + 16))(v0, v3);
  }
}

uint64_t sub_2341BE07C()
{
  uint64_t result;

  if (qword_254253100 != -1)
    dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
  result = qword_2542530C8;
  if (qword_2542530C8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_2542530C8 + 24))(qword_2542530C8);
  return result;
}

void sub_2341BE0D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  NSObject *v6;
  _QWORD block[5];
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v5 = a1 - 16;
  v8 = 2;
  v11 = a2;
  v12 = a3;
  v6 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_2341BE8D8;
  block[3] = &unk_250514188;
  block[4] = v5;
  dispatch_async(v6, block);
  *(_DWORD *)a4 = 0;
  a4[1] = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *((_DWORD *)a4 + 4) = 143;
}

uint64_t sub_2341BE19C(uint64_t a1)
{
  return a1 - 16;
}

void sub_2341BE1A4(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[5];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v8 = *a2;
  v9 = v4;
  v5 = a1 - 16;
  v10 = *((_QWORD *)a2 + 4);
  v6 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_2341BE8D8;
  block[3] = &unk_250514188;
  block[4] = v5;
  dispatch_async(v6, block);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *(_DWORD *)(a3 + 16) = 143;
}

void sub_2341BE25C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/include/platform/internal/GenericPlatformManagerImpl.ipp";
  *(_DWORD *)(a1 + 16) = 275;
}

void sub_2341BE278(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/include/platform/internal/GenericPlatformManagerImpl.ipp";
  *(_DWORD *)(a1 + 16) = 282;
}

uint64_t sub_2341BE294(uint64_t ***a1, unsigned __int16 *a2)
{
  int v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t result;
  int v9;
  NSObject *v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  v5 = *a2;
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      (*((void (**)(_QWORD))a2 + 1))(*((_QWORD *)a2 + 2));
    }
    else if (v5 == 3)
    {
      (*((void (**)(unsigned __int16 *))a2 + 1))(a2 + 8);
    }
    else
    {
      sub_2341BE41C((uint64_t)a1, (uint64_t)a2);
      if ((__int16)*a2 < 0)
      {
        v6 = *a1;
        if (*a1)
        {
          do
          {
            v7 = *v6;
            ((void (*)(unsigned __int16 *, uint64_t *))v6[1])(a2, v6[2]);
            v6 = (uint64_t **)v7;
          }
          while (v7);
        }
      }
    }
  }
  result = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  v9 = result - v4;
  if ((result - v4) >= 0x65)
  {
    v10 = sub_234117B80(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *a2;
      *(_DWORD *)buf = 67109376;
      v13 = v9;
      v14 = 1024;
      v15 = v11;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Long dispatch time: %u ms, for event type %d", buf, 0xEu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      return sub_2341147D0(0x1Fu, 1);
  }
  return result;
}

uint64_t sub_2341BE41C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v3 = (_QWORD *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    v3[7] = 0;
    v3[8] = 0;
    v3[9] = 0;
  }
  sub_2341B2A20();
  return nullsub_13(&unk_25615DDC8, a2);
}

uint64_t ***sub_2341BE480(uint64_t ***result, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v4;

  v2 = *result;
  if (*result)
  {
    do
    {
      v4 = *v2;
      result = (uint64_t ***)((uint64_t (*)(uint64_t, uint64_t *))v2[1])(a2, v2[2]);
      v2 = (uint64_t **)v4;
    }
    while (v4);
  }
  return result;
}

void sub_2341BE4BC(int a1)
{
  if (qword_254253100 != -1)
    dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
  if (byte_2542530D8 != a1)
    byte_2542530D8 = a1;
}

dispatch_object_t *sub_2341BE518(dispatch_object_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  *(_BYTE *)a1 = 0;
  a1[1] = 0;
  a1[4] = 0;
  v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, -15);
  v4 = dispatch_queue_create("org.csa-iot.matter.workqueue", v3);
  a1[5] = v4;
  *((_DWORD *)a1 + 12) = 0;
  dispatch_queue_set_specific(v4, a1, a1, 0);
  dispatch_suspend(a1[5]);
  return a1;
}

void sub_2341BE590(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2341B1F60(a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 200))(v4, *(_QWORD *)(a1 + 40));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_2341BD604(a1 + 16, a2);
  if (!*(_DWORD *)a2)
  {
    *(_QWORD *)(a1 + 32) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    *(_DWORD *)a2 = 0;
    a2[1] = "src/platform/Darwin/PlatformManagerImpl.cpp";
    *((_DWORD *)a2 + 4) = 83;
  }
}

void sub_2341BE614(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  int v5;
  int v6;

  v3 = (unsigned int *)(a1 + 48);
  while (!__ldaxr(v3))
  {
    if (!__stlxr(1u, v3))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 40));
      v5 = 0;
      v6 = 91;
      goto LABEL_6;
    }
  }
  __clrex();
  v6 = 89;
  v5 = 3;
LABEL_6:
  *(_DWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *(_DWORD *)(a2 + 16) = v6;
}

unsigned int *sub_2341BE67C@<X0>(unsigned int *key@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *specific;
  uint64_t (*v7)(uint64_t, _QWORD *);
  uint64_t v8;
  int v9;
  int v10;
  _QWORD v11[5];

  v2 = key;
  v4 = key + 12;
  do
  {
    v5 = __ldaxr(v4);
    if (v5 != 1)
    {
      __clrex();
      v10 = 98;
      v9 = 3;
      goto LABEL_8;
    }
  }
  while (__stlxr(2u, v4));
  specific = (unsigned int *)dispatch_get_specific(key);
  v7 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDADFE8];
  if (specific == v2)
    v7 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDADCC0];
  v8 = *((_QWORD *)v2 + 5);
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 0x40000000;
  v11[2] = sub_2341BE770;
  v11[3] = &unk_250514168;
  v11[4] = v2;
  key = (unsigned int *)v7(v8, v11);
  v9 = 0;
  v10 = 113;
LABEL_8:
  *(_DWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *(_DWORD *)(a2 + 16) = v10;
  return key;
}

BOOL sub_2341BE748(void *a1)
{
  return dispatch_get_specific(a1) == a1;
}

NSObject *sub_2341BE770(uint64_t a1)
{
  uint64_t v1;
  NSObject *result;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_suspend(*(dispatch_object_t *)(v1 + 40));
  atomic_store(0, (unsigned int *)(v1 + 48));
  result = *(NSObject **)(v1 + 56);
  if (result)
    return dispatch_semaphore_signal(result);
  return result;
}

void sub_2341BE7B0(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)(a1 + 56) = dispatch_semaphore_create(0);
  v2 = (unsigned int *)(a1 + 48);
  while (!__ldaxr(v2))
  {
    if (!__stlxr(1u, v2))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 40));
      goto LABEL_6;
    }
  }
  __clrex();
LABEL_6:
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
}

uint64_t sub_2341BE818()
{
  return sub_2341BDCF0();
}

void sub_2341BE820(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  NSObject *v5;
  _QWORD block[5];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v7 = *a2;
  v8 = v4;
  v9 = *((_QWORD *)a2 + 4);
  v5 = *(NSObject **)(a1 + 40);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_2341BE8D8;
  block[3] = &unk_250514188;
  block[4] = a1;
  dispatch_async(v5, block);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/platform/Darwin/PlatformManagerImpl.cpp";
  *(_DWORD *)(a3 + 16) = 143;
}

uint64_t sub_2341BE8D8(uint64_t a1)
{
  return sub_2341BE294((uint64_t ***)(*(_QWORD *)(a1 + 32) + 16), (unsigned __int16 *)(a1 + 40));
}

BOOL sub_2341BE8E8(unsigned int *a1)
{
  unsigned int v2;

  if (dispatch_get_specific(a1) == a1)
    return 1;
  v2 = atomic_load(a1 + 12);
  return v2 == 0;
}

void sub_2341BE928(uint64_t a1@<X1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  __int128 *v6;
  int v7;
  int v8;
  const char *v9;
  int v10;
  char v11;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = &xmmword_25615DD20;
  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v6 = (__int128 *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
  }
  sub_2341B2340((uint64_t)v6, a1, a2, (uint64_t)a3);
  v7 = *(_DWORD *)a3;
  if (*(_DWORD *)a3)
  {
    v8 = 2;
    v9 = "dwnpm_ble_scan";
    v10 = v7;
    v11 = 3;
    sub_2341C4BEC((uint64_t)&v8);
  }
  else
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/platform/Darwin/PlatformManagerImpl.cpp";
    *((_DWORD *)a3 + 4) = 163;
  }
}

void sub_2341BE9F4(_QWORD *a1@<X8>)
{
  __int128 *v2;
  int v3;
  int v4;
  const char *v5;
  int v6;
  char v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = &xmmword_25615DD20;
  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v2 = (__int128 *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    *((_QWORD *)v2 + 7) = 0;
    *((_QWORD *)v2 + 8) = 0;
    *((_QWORD *)v2 + 9) = 0;
  }
  sub_2341B2390((uint64_t)v2, (uint64_t)a1);
  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    v4 = 2;
    v5 = "dwnpm_ble_scan";
    v6 = v3;
    v7 = 3;
    sub_2341C4BEC((uint64_t)&v4);
  }
  else
  {
    *(_DWORD *)a1 = 0;
    a1[1] = "src/platform/Darwin/PlatformManagerImpl.cpp";
    *((_DWORD *)a1 + 4) = 173;
  }
}

std::chrono::steady_clock::time_point sub_2341BEAA8()
{
  return (std::chrono::steady_clock::time_point)((unint64_t)std::chrono::steady_clock::now().__d_.__rep_ / 0x3E8);
}

std::chrono::steady_clock::time_point sub_2341BEAD8()
{
  return (std::chrono::steady_clock::time_point)((unint64_t)std::chrono::steady_clock::now().__d_.__rep_ / 0xF4240);
}

uint64_t sub_2341BEB04@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  int *v5;
  int v6;
  timeval v7;

  result = gettimeofday(&v7, 0);
  if ((_DWORD)result)
  {
    v5 = __error();
    return sub_234117EFC(*v5, "src/platform/Darwin/SystemTimeSupport.cpp", 59, a2);
  }
  else
  {
    if (v7.tv_sec > 946684799)
    {
      if (v7.tv_usec < 0)
      {
        *(_DWORD *)a2 = 191;
        *(_QWORD *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
        v6 = 67;
      }
      else
      {
        *a1 = v7.tv_usec + 1000000 * v7.tv_sec;
        *(_DWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
        v6 = 71;
      }
    }
    else
    {
      *(_DWORD *)a2 = 191;
      *(_QWORD *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
      v6 = 63;
    }
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_2341BEBE0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unint64_t v5;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 40))(a1, &v5);
  *a2 = v5 / 0x3E8;
  return result;
}

uint64_t sub_2341BEC40@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  NSObject *v5;
  int *v6;
  tm v7;
  time_t tv_sec;
  timeval v9;
  uint8_t buf[4];
  __darwin_time_t v11;
  __int16 v12;
  int tm_year;
  __int16 v14;
  int tm_mon;
  __int16 v16;
  int tm_mday;
  __int16 v18;
  int tm_hour;
  __int16 v20;
  int tm_min;
  __int16 v22;
  int tm_sec;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v9.tv_sec = a1 / 0xF4240;
  v9.tv_usec = a1 % 0xF4240;
  if (!settimeofday(&v9, 0))
  {
    tv_sec = v9.tv_sec;
    localtime_r(&tv_sec, &v7);
    v5 = sub_234117B80(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134219520;
      v11 = v9.tv_sec;
      v12 = 1024;
      tm_year = v7.tm_year;
      v14 = 1024;
      tm_mon = v7.tm_mon;
      v16 = 1024;
      tm_mday = v7.tm_mday;
      v18 = 1024;
      tm_hour = v7.tm_hour;
      v20 = 1024;
      tm_min = v7.tm_min;
      v22 = 1024;
      tm_sec = v7.tm_sec;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Real time clock set to %ld (%04d/%02d/%02d %02d:%02d:%02d UTC)", buf, 0x30u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x1Fu, 2);
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
    v4 = 100;
    goto LABEL_9;
  }
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 1)
  {
    *(_DWORD *)a2 = 165;
    *(_QWORD *)(a2 + 8) = "src/platform/Darwin/SystemTimeSupport.cpp";
    v4 = 89;
LABEL_9:
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  v6 = __error();
  return sub_234117EFC(*v6, "src/platform/Darwin/SystemTimeSupport.cpp", 89, a2);
}

void sub_2341BEE1C()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341BEE30(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  unint64_t v5;
  NSObject *v6;
  unsigned int v7;
  int v8;
  int v9;
  uint8_t buf[4];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  objc_msgSend_standardUserDefaults(MEMORY[0x24BDBCF50], a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend_integerForKey_(v3, v4, (uint64_t)CFSTR("SRPTimeoutInMSecsOverride"));
  if (v5 >> 16)
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
  }
  else
  {
    sub_234117B80(0x22u, "Discovery");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v12 = v5;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Got a user default value for Dnssd SRP timeout - %d msecs", buf, 8u);
    }

    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
    v7 = v5 & 0xFF00;
    v8 = v5;
    v9 = 0x10000;
  }

  return v8 | v9 | v7;
}

void sub_2341BEF5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2341BEF80(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  dispatch_queue_t v12;
  void *v13;
  _QWORD v14[7];
  int v15;
  uint8_t buf[16];

  sub_2341B1F64("src/platform/Darwin/BleConnectionDelegateImpl.mm", 100);
  v8 = *a4;
  sub_234117B80(2u, "Ble");
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate NewConnection with discriminator", buf, 2u);
  }

  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);
  v10 = qword_25615DDE8;
  if (!qword_25615DDE8)
  {
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = dispatch_queue_create("org.csa-iot.matter.framework.ble.workqueue", v11);
    v13 = (void *)qword_25615DDE8;
    qword_25615DDE8 = (uint64_t)v12;

    v10 = qword_25615DDE8;
  }
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 3221225472;
  v14[2] = sub_2341BF0C4;
  v14[3] = &unk_250514388;
  v14[4] = a1;
  v14[5] = a2;
  v14[6] = a3;
  v15 = v8;
  dispatch_async(v10, v14);
}

void sub_2341BF0C4(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  char isConnecting;
  BleConnection *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  id v23;

  v4 = a1[4];
  v5 = (void *)qword_25615DDE0;
  if (qword_25615DDE0
    && (isConnecting = objc_msgSend_isConnecting((void *)qword_25615DDE0, a2, a3),
        v5 = (void *)qword_25615DDE0,
        (isConnecting & 1) == 0))
  {
    objc_msgSend_setBleLayer_((void *)qword_25615DDE0, a2, a1[5]);
    objc_msgSend_setAppState_((void *)qword_25615DDE0, v20, a1[6]);
    objc_msgSend_setOnConnectionComplete_((void *)qword_25615DDE0, v21, *(_QWORD *)(v4 + 8));
    objc_msgSend_setOnConnectionError_((void *)qword_25615DDE0, v22, *(_QWORD *)(v4 + 16));
    MEMORY[0x24BEDD108](qword_25615DDE0, sel_updateWithDiscriminator_, a1 + 7);
  }
  else
  {
    objc_msgSend_stop(v5, a2, a3);
    v7 = [BleConnection alloc];
    v9 = objc_msgSend_initWithDiscriminator_queue_(v7, v8, (uint64_t)(a1 + 7), qword_25615DDE8);
    v10 = (void *)qword_25615DDE0;
    qword_25615DDE0 = v9;

    objc_msgSend_setBleLayer_((void *)qword_25615DDE0, v11, a1[5]);
    objc_msgSend_setAppState_((void *)qword_25615DDE0, v12, a1[6]);
    objc_msgSend_setOnConnectionComplete_((void *)qword_25615DDE0, v13, *(_QWORD *)(v4 + 8));
    objc_msgSend_setOnConnectionError_((void *)qword_25615DDE0, v14, *(_QWORD *)(v4 + 16));
    objc_msgSend_centralManager((void *)qword_25615DDE0, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (id)objc_msgSend_initWithDelegate_queue_(v17, v18, qword_25615DDE0, qword_25615DDE8);
    objc_msgSend_setCentralManager_((void *)qword_25615DDE0, v19, (uint64_t)v23);

  }
}

void sub_2341BF1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2341BF1F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v8;
  NSObject *v9;
  dispatch_queue_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  id v14;
  _QWORD block[4];
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("src/platform/Darwin/BleConnectionDelegateImpl.mm", 134);
  sub_234117B80(2u, "Ble");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v21 = a4;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate NewConnection with conn obj: %p", buf, 0xCu);
  }

  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);
  if (!qword_25615DDE8)
  {
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = dispatch_queue_create("org.csa-iot.matter.framework.ble.workqueue", v9);
    v11 = (void *)qword_25615DDE8;
    qword_25615DDE8 = (uint64_t)v10;

  }
  v12 = a4;
  v13 = qword_25615DDE8;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_2341BF38C;
  block[3] = &unk_2505143B0;
  v18 = a3;
  v19 = a2;
  v16 = v12;
  v17 = a1;
  v14 = v12;
  dispatch_async(v13, block);

}

void sub_2341BF38C(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;
  _QWORD v10[6];

  v4 = a1[5];
  if (qword_25615DDE0 && !objc_msgSend_isConnecting((void *)qword_25615DDE0, a2, a3))
  {
    objc_msgSend_setBleLayer_((void *)qword_25615DDE0, v5, a1[7]);
    objc_msgSend_setAppState_((void *)qword_25615DDE0, v7, a1[6]);
    objc_msgSend_setOnConnectionComplete_((void *)qword_25615DDE0, v8, *(_QWORD *)(v4 + 8));
    objc_msgSend_setOnConnectionError_((void *)qword_25615DDE0, v9, *(_QWORD *)(v4 + 16));
    MEMORY[0x24BEDD108](qword_25615DDE0, sel_updateWithPeripheral_, a1[4]);
  }
  else if (*(_QWORD *)(v4 + 16))
  {
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = sub_2341BF490;
    v10[3] = &unk_250503F68;
    v6 = a1[6];
    v10[4] = v4;
    v10[5] = v6;
    dispatch_async((dispatch_queue_t)qword_2542530E8, v10);
  }
}

uint64_t sub_2341BF490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, int *);
  int v5;
  const char *v6;
  int v7;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v3 = *(uint64_t (**)(uint64_t, int *))(v2 + 16);
  v5 = 3;
  v6 = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  v7 = 150;
  return v3(v1, &v5);
}

void sub_2341BF4D4(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_queue_t v9;
  void *v10;
  _QWORD block[5];
  BOOL v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("src/platform/Darwin/BleConnectionDelegateImpl.mm", 166);
  sub_234117B80(2u, "Ble");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (a3 == 1)
      v6 = "pre-warm";
    else
      v6 = "default";
    *(_DWORD *)buf = 136315138;
    v14 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate StartScan (%s)", buf, 0xCu);
  }

  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);
  v7 = qword_25615DDE8;
  if (!qword_25615DDE8)
  {
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = dispatch_queue_create("org.csa-iot.matter.framework.ble.workqueue", v8);
    v10 = (void *)qword_25615DDE8;
    qword_25615DDE8 = (uint64_t)v9;

    v7 = qword_25615DDE8;
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_2341BF66C;
  block[3] = &unk_2505143D0;
  v12 = a3 == 1;
  block[4] = a2;
  dispatch_async(v7, block);
}

void sub_2341BF66C(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4;
  void *v5;
  BOOL v6;
  char isConnecting;
  BleConnection *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const char *v16;
  NSObject *v17;
  id v19;
  _QWORD block[5];
  uint8_t buf[16];

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = (void *)qword_25615DDE0;
  if (v4)
    v6 = qword_25615DDE0 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (qword_25615DDE0
      && (isConnecting = objc_msgSend_isConnecting((void *)qword_25615DDE0, a2, a3),
          v5 = (void *)qword_25615DDE0,
          (isConnecting & 1) == 0))
    {
      MEMORY[0x24BEDD108](qword_25615DDE0, sel_updateWithDelegate_prewarm_, *(_QWORD *)(a1 + 32));
    }
    else
    {
      objc_msgSend_stop(v5, a2, a3);
      v8 = [BleConnection alloc];
      v10 = objc_msgSend_initWithDelegate_prewarm_queue_(v8, v9, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), qword_25615DDE8);
      v11 = (void *)qword_25615DDE0;
      qword_25615DDE0 = v10;

      objc_msgSend_centralManager((void *)qword_25615DDE0, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (id)objc_msgSend_initWithDelegate_queue_(v14, v15, qword_25615DDE0, qword_25615DDE8);
      objc_msgSend_setCentralManager_((void *)qword_25615DDE0, v16, (uint64_t)v19);

    }
  }
  else
  {
    sub_234117B80(2u, "Ble");
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_DEFAULT, "Not starting pre-warm scan, an operation is already in progress", buf, 2u);
    }

    if (sub_234114844(2u))
      sub_2341147D0(2u, 2);
    if (*(_QWORD *)(a1 + 32))
    {
      if (qword_254253100 != -1)
        dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_2341BF838;
      block[3] = &unk_2505008C0;
      block[4] = *(_QWORD *)(a1 + 32);
      dispatch_async((dispatch_queue_t)qword_2542530E8, block);
    }
  }
}

void sub_2341BF824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

uint64_t sub_2341BF838(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

void sub_2341BF848()
{
  NSObject *v0;
  uint8_t v1[32];

  sub_234117B80(2u, "Ble");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate StopScan", v1, 2u);
  }

  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);
  sub_2341BF8E0((uint64_t)v1);
}

void sub_2341BF8E0(uint64_t a1@<X8>)
{
  void *v2;
  int v3;

  sub_2341B1F64("src/platform/Darwin/BleConnectionDelegateImpl.mm", 220);
  if (qword_25615DDE8)
  {
    dispatch_async((dispatch_queue_t)qword_25615DDE8, &unk_2505143F0);
    v2 = (void *)qword_25615DDE8;
    qword_25615DDE8 = 0;

    v3 = 231;
  }
  else
  {
    v3 = 222;
  }
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  *(_DWORD *)(a1 + 16) = v3;
}

void sub_2341BF954(uint64_t a1@<X8>)
{
  NSObject *v2;
  uint8_t v3[16];

  sub_234117B80(2u, "Ble");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate CancelConnection", v3, 2u);
  }

  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);
  sub_2341BF8E0(a1);
}

void sub_2341BF9F0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;

  objc_msgSend_stop((void *)qword_25615DDE0, a2, a3);
  v3 = (void *)qword_25615DDE0;
  qword_25615DDE0 = 0;

}

void sub_2341BFB40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2341BFBE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2341BFC74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_2341BFD60(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  int v8;
  const char *v9;
  int v10;
  uint8_t buf[16];

  sub_234117B80(2u, "Ble");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "ConnectionDelegate timeout", buf, 2u);
  }

  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);
  objc_msgSend_stop(*(void **)(a1 + 32), v3, v4);
  v5 = *(void **)(a1 + 32);
  v8 = 1037;
  v9 = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  v10 = 302;
  return objc_msgSend_dispatchConnectionError_(v5, v6, (uint64_t)&v8);
}

uint64_t sub_2341BFEC8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, __int128 *);
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  result = objc_msgSend_onConnectionError(*(void **)(a1 + 32), a2, a3);
  if (result)
  {
    v7 = (uint64_t (*)(uint64_t, __int128 *))objc_msgSend_onConnectionError(*(void **)(a1 + 32), v5, v6);
    v10 = objc_msgSend_appState(*(void **)(a1 + 32), v8, v9);
    v11 = *(_OWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 56);
    return v7(v10, &v11);
  }
  return result;
}

uint64_t sub_2341BFFA0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD);

  result = objc_msgSend_onConnectionComplete(*(void **)(a1 + 32), a2, a3);
  if (result)
  {
    v10 = (uint64_t (*)(uint64_t, _QWORD))objc_msgSend_onConnectionComplete(*(void **)(a1 + 32), v5, v6);
    v9 = objc_msgSend_appState(*(void **)(a1 + 32), v7, v8);
    return v10(v9, *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_2341C034C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2341C0A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2341C0B94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2341C0F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_2341C114C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2341C13B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL sub_2341C13FC(_QWORD *a1)
{
  return sub_23410C888(*(_QWORD *)(a1[4] + 112), a1[5], a1 + 6, a1 + 8);
}

uint64_t sub_2341C1414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  int v7;
  const char *v8;
  int v9;
  char v10;

  v7 = 2;
  v8 = "dwnpm_ble_write_chr_val_failed";
  v9 = 1031;
  v10 = 3;
  sub_2341C4BEC((uint64_t)&v7);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
  LODWORD(v5) = 1031;
  *((_QWORD *)&v5 + 1) = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  v6 = 509;
  return sub_23410D3D8(v3, v2, &v5);
}

void sub_2341C16C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL sub_2341C170C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
  v5 = (_QWORD *)(a1 + 49);
  v6 = (_QWORD *)(a1 + 65);
  if (v2)
    return sub_23410CE50(v4, v3, v5, v6);
  else
    return sub_23410D20C(v4, v3, v5, v6);
}

uint64_t sub_2341C1730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v6;
  const char *v7;
  int v8;
  int v9;
  const char *v10;
  int v11;
  int v12;
  const char *v13;
  int v14;
  char v15;

  if (*(_BYTE *)(a1 + 48))
  {
    v12 = 2;
    v13 = "dwnpm_ble_chr_nfy_state_failed";
    v14 = 1031;
    v15 = 3;
    sub_2341C4BEC((uint64_t)&v12);
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
    v9 = 1030;
    v10 = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
    v11 = 539;
    v4 = &v9;
  }
  else
  {
    v12 = 2;
    v13 = "dwnpm_ble_chr_nfy_state_failed";
    v14 = 1029;
    v15 = 3;
    sub_2341C4BEC((uint64_t)&v12);
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
    v6 = 1029;
    v7 = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
    v8 = 543;
    v4 = &v6;
  }
  return sub_23410D3D8(v3, v2, (__int128 *)v4);
}

void sub_2341C1A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_2341C1AA8(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const void *v5;
  const char *v6;
  uint64_t v7;
  size_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint8_t buf[8];
  const char *v16;
  int v17;
  char v18;
  uint64_t v19;

  v2 = objc_retainAutorelease(*(id *)(a1 + 32));
  v5 = (const void *)objc_msgSend_bytes(v2, v3, v4);
  v8 = objc_msgSend_length(*(void **)(a1 + 32), v6, v7);
  sub_2341188C4(v5, v8, 0, 0x26u, &v19);
  if (v19)
  {
    if (!sub_23410C560(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112), *(_QWORD *)(a1 + 48), (_QWORD *)(a1 + 56), (_QWORD *)(a1 + 72), &v19))
    {
      sub_234117B80(2u, "Ble");
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Failed at handling incoming BLE data", buf, 2u);
      }

      if (sub_234114844(1u))
        sub_2341147D0(2u, 1);
      *(_DWORD *)buf = 2;
      v16 = "dwnpm_ble_upd_chr_val_failed";
      v17 = 3;
      v18 = 3;
      sub_2341C4BEC((uint64_t)buf);
    }
  }
  else
  {
    sub_234117B80(2u, "Ble");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed at allocating buffer for incoming BLE data", buf, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
    *(_DWORD *)buf = 2;
    v16 = "dwnpm_ble_upd_chr_val_failed";
    v17 = 11;
    v18 = 3;
    sub_2341C4BEC((uint64_t)buf);
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112);
    LODWORD(v13) = 11;
    *((_QWORD *)&v13 + 1) = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
    v14 = 566;
    sub_23410D3D8(v12, v11, &v13);
  }
  if (v19)
    sub_23411814C(v19);
}

void sub_2341C1C8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  if (v3)
    sub_23411814C(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2341C1CB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  int v7;
  const char *v8;
  int v9;
  char v10;

  v7 = 2;
  v8 = "dwnpm_ble_upd_chr_val_failed";
  v9 = 1032;
  v10 = 3;
  sub_2341C4BEC((uint64_t)&v7);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
  LODWORD(v5) = 1032;
  *((_QWORD *)&v5 + 1) = "src/platform/Darwin/BleConnectionDelegateImpl.mm";
  v6 = 579;
  return sub_23410D3D8(v3, v2, &v5);
}

void sub_2341C1E1C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 48))
  {
    sub_23410BAA4();
    v1 = *(_QWORD *)(a1 + 32);
  }
  v3 = *(NSObject **)(v1 + 32);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_2341C1E94;
  block[3] = &unk_2504EE8C0;
  block[4] = v1;
  dispatch_async(v3, block);
}

void sub_2341C1E94(uint64_t a1, const char *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  objc_msgSend_setDelegate_(*(void **)(*(_QWORD *)(a1 + 32) + 40), a2, 0);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 48);
  *(_QWORD *)(v5 + 48) = 0;

  v7 = (void *)qword_25615DDE0;
  if (qword_25615DDE0 == *(_QWORD *)(a1 + 32))
  {
    qword_25615DDE0 = 0;

  }
}

void sub_2341C2044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_2341C2170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2341C21E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

void sub_2341C23C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t sub_2341C23F8(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v6;

  v2 = objc_retainAutorelease(*(id *)(a1 + 32));
  v6 = *(_QWORD *)objc_msgSend_bytes(v2, v3, v4);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), &v6);
}

void sub_2341C269C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2341C2810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2341C2E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_2341C2EEC(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v6;

  v2 = objc_retainAutorelease(*(id *)(a1 + 32));
  v6 = *(_QWORD *)objc_msgSend_bytes(v2, v3, v4);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), &v6);
}

uint64_t sub_2341C2F38(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const char *v4;
  int v6;
  const char *v7;
  int v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 20) + 1;
  *(_DWORD *)(v2 + 20) = v3;
  v6 = 2;
  v7 = "dwnpm_ble_peripheral_removed";
  v8 = v3;
  v9 = 1;
  sub_2341C4BEC((uint64_t)&v6);
  return objc_msgSend_removePeripheralFromCache_(*(void **)(a1 + 32), v4, *(_QWORD *)(a1 + 40));
}

void sub_2341C3120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_2341C3148(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_2341C3250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2341C3570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2341C37AC()
{
  JUMPOUT(0x23493E704);
}

void sub_2341C37C0(uint64_t a1)
{

}

void sub_2341C37E8(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  int isEqualToData;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  int v43;
  char *v44;
  id obj;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = xmmword_2505144E8;
  *(_QWORD *)(a4 + 16) = 44;
  if (a2 && a3)
  {
    objc_msgSend_GetShortestServiceUUID_(MTRUUIDHelper, a1, a2);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x24BDBB2A8];
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v7, a3, 16);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_UUIDWithData_(v6, v9, (uint64_t)v8);
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v44 = a1;
    objc_msgSend_services(v44, v10, v11);
    obj = (id)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v55, v60, 16);
    if (v13)
    {
      v47 = *(_QWORD *)v56;
      do
      {
        v49 = v13;
        for (i = 0; i != v49; ++i)
        {
          if (*(_QWORD *)v56 != v47)
            objc_enumerationMutation(obj);
          v17 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
          objc_msgSend_UUID(v17, v14, v15);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_data(v18, v19, v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_data(v48, v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToData = objc_msgSend_isEqualToData_(v21, v25, (uint64_t)v24);

          if (isEqualToData)
          {
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            objc_msgSend_characteristics(v17, v14, v15);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v51, v59, 16);
            if (v31)
            {
              v32 = *(_QWORD *)v52;
              while (2)
              {
                for (j = 0; j != v31; ++j)
                {
                  if (*(_QWORD *)v52 != v32)
                    objc_enumerationMutation(v27);
                  v34 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * j);
                  objc_msgSend_UUID(v34, v29, v30);
                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_data(v35, v36, v37);
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_data(v50, v39, v40);
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  v43 = objc_msgSend_isEqualToData_(v38, v42, (uint64_t)v41);

                  if (v43)
                  {
                    *(_DWORD *)a4 = 0;
                    *(_QWORD *)(a4 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
                    *(_DWORD *)(a4 + 16) = 58;
                    objc_msgSend_setNotifyValue_forCharacteristic_(v44, v29, 1, v34);
                    goto LABEL_19;
                  }
                }
                v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v29, (uint64_t)&v51, v59, 16);
                if (v31)
                  continue;
                break;
              }
            }
LABEL_19:

          }
        }
        v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v55, v60, 16);
      }
      while (v13);
    }

  }
}

void sub_2341C3AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_2341C3B8C(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  int isEqualToData;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  int v43;
  char *v44;
  id obj;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = xmmword_250514500;
  *(_QWORD *)(a4 + 16) = 72;
  if (a2 && a3)
  {
    objc_msgSend_GetShortestServiceUUID_(MTRUUIDHelper, a1, a2);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x24BDBB2A8];
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v7, a3, 16);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_UUIDWithData_(v6, v9, (uint64_t)v8);
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v44 = a1;
    objc_msgSend_services(v44, v10, v11);
    obj = (id)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v55, v60, 16);
    if (v13)
    {
      v47 = *(_QWORD *)v56;
      do
      {
        v49 = v13;
        for (i = 0; i != v49; ++i)
        {
          if (*(_QWORD *)v56 != v47)
            objc_enumerationMutation(obj);
          v17 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
          objc_msgSend_UUID(v17, v14, v15);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_data(v18, v19, v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_data(v48, v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToData = objc_msgSend_isEqualToData_(v21, v25, (uint64_t)v24);

          if (isEqualToData)
          {
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            objc_msgSend_characteristics(v17, v14, v15);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v51, v59, 16);
            if (v31)
            {
              v32 = *(_QWORD *)v52;
              while (2)
              {
                for (j = 0; j != v31; ++j)
                {
                  if (*(_QWORD *)v52 != v32)
                    objc_enumerationMutation(v27);
                  v34 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * j);
                  objc_msgSend_UUID(v34, v29, v30);
                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_data(v35, v36, v37);
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_data(v50, v39, v40);
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  v43 = objc_msgSend_isEqualToData_(v38, v42, (uint64_t)v41);

                  if (v43)
                  {
                    *(_DWORD *)a4 = 0;
                    *(_QWORD *)(a4 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
                    *(_DWORD *)(a4 + 16) = 86;
                    objc_msgSend_setNotifyValue_forCharacteristic_(v44, v29, 0, v34);
                    goto LABEL_19;
                  }
                }
                v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v29, (uint64_t)&v51, v59, 16);
                if (v31)
                  continue;
                break;
              }
            }
LABEL_19:

          }
        }
        v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v55, v60, 16);
      }
      while (v13);
    }

  }
}

void sub_2341C3E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_2341C3F30(void *a1@<X1>, uint64_t a2@<X8>)
{
  const char *v3;
  void *v4;
  const char *v5;
  void *v6;
  id v7;

  v7 = a1;
  objc_msgSend_valueForKey_(v7, v3, (uint64_t)CFSTR("manager"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v4;
  if (v4)
    objc_msgSend_cancelPeripheralConnection_(v4, v5, (uint64_t)v7);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
  *(_DWORD *)(a2 + 16) = 106;

}

void sub_2341C3FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_2341C3FC0(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  objc_msgSend_valueForKey_(v2, v3, (uint64_t)CFSTR("mtuLength"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_unsignedShortValue(v4, v5, v6);

  sub_234117B80(2u, "Ble");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v11 = v7;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "ATT MTU = %u", buf, 8u);
  }

  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);

  return v7;
}

void sub_2341C40C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2341C40F0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
  *(_DWORD *)(a1 + 16) = 123;
}

void sub_2341C4110(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  int isEqualToData;
  void *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  int v46;
  void *v47;
  char *v48;
  id obj;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a5 = xmmword_250514518;
  *(_QWORD *)(a5 + 16) = 129;
  if (a2 && a3 && *(_QWORD *)a4)
  {
    objc_msgSend_GetShortestServiceUUID_(MTRUUIDHelper, a1, a2);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x24BDBB2A8];
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v9, a3, 16);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_UUIDWithData_(v8, v11, (uint64_t)v10);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v12, *(_QWORD *)(*(_QWORD *)a4 + 8), *(_QWORD *)(*(_QWORD *)a4 + 24));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v48 = a1;
    objc_msgSend_services(v48, v13, v14);
    obj = (id)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v59, v64, 16);
    if (v16)
    {
      v51 = *(_QWORD *)v60;
      do
      {
        v53 = v16;
        for (i = 0; i != v53; ++i)
        {
          if (*(_QWORD *)v60 != v51)
            objc_enumerationMutation(obj);
          v20 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * i);
          objc_msgSend_UUID(v20, v17, v18, v47);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_data(v21, v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_data(v52, v25, v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToData = objc_msgSend_isEqualToData_(v24, v28, (uint64_t)v27);

          if (isEqualToData)
          {
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            objc_msgSend_characteristics(v20, v17, v18);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v55, v63, 16);
            if (v34)
            {
              v35 = *(_QWORD *)v56;
              while (2)
              {
                for (j = 0; j != v34; ++j)
                {
                  if (*(_QWORD *)v56 != v35)
                    objc_enumerationMutation(v30);
                  v37 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * j);
                  objc_msgSend_UUID(v37, v32, v33);
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_data(v38, v39, v40);
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_data(v54, v42, v43);
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  v46 = objc_msgSend_isEqualToData_(v41, v45, (uint64_t)v44);

                  if (v46)
                  {
                    *(_DWORD *)a5 = 0;
                    *(_QWORD *)(a5 + 8) = "src/platform/Darwin/BlePlatformDelegateImpl.mm";
                    *(_DWORD *)(a5 + 16) = 143;
                    objc_msgSend_writeValue_forCharacteristic_type_(v48, v32, (uint64_t)v47, v37, 0);
                    goto LABEL_20;
                  }
                }
                v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v32, (uint64_t)&v55, v63, 16);
                if (v34)
                  continue;
                break;
              }
            }
LABEL_20:

          }
        }
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v17, (uint64_t)&v59, v64, 16);
      }
      while (v16);
    }

  }
}

void sub_2341C4430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_2341C45F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2341C4608()
{
  if (qword_25615B770 != -1)
    dispatch_once(&qword_25615B770, &unk_2505145A8);
  return qword_25615B778;
}

os_log_t sub_2341C4648()
{
  os_log_t result;

  result = os_log_create("com.csa.matter.signposts", "com.csa.matter.sdk");
  qword_25615B778 = (uint64_t)result;
  return result;
}

_QWORD *sub_2341C4674(_QWORD *result)
{
  *result = &off_2505145D8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_2341C4688(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = *a2;
    return (*(uint64_t (**)(uint64_t, __int128 *))(result + 16))(result, &v3);
  }
  return result;
}

uint64_t sub_2341C46C4(uint64_t a1)
{
  sub_233CB66E0((_QWORD *)(a1 + 8));
  return a1;
}

void sub_2341C46EC(uint64_t a1)
{
  sub_233CB66E0((_QWORD *)(a1 + 8));
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341C4724(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(_QWORD *)a1 + 48))(a1, "MessageSent", "Messaging");
}

uint64_t sub_2341C4740(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(_QWORD *)a1 + 48))(a1, "MessageReceived", "Messaging");
}

uint64_t sub_2341C475C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(_QWORD *)a1 + 48))(a1, "Lookup", "DNSSD");
}

uint64_t sub_2341C4778(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(_QWORD *)a1 + 48))(a1, "Node Discovered", "DNSSD");
}

uint64_t sub_2341C4794(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, const char *, const char *))(*(_QWORD *)a1 + 48))(a1, "Discovery Failed", "DNSSD");
}

_QWORD *sub_2341C47B0(_QWORD *a1)
{
  _QWORD *result;
  BOOL v3;

  result = (_QWORD *)sub_2341B1F64("src/tracing/registry.cpp", 33);
  if (a1[1])
    v3 = a1[2] == 0;
  else
    v3 = 1;
  if (v3)
  {
    (*(void (**)(_QWORD *))(*a1 + 16))(a1);
    return sub_2341C4C4C(&off_256158948, a1 + 1);
  }
  return result;
}

_QWORD *sub_2341C4818(_QWORD *a1)
{
  _QWORD *result;
  BOOL v3;

  sub_2341B1F64("src/tracing/registry.cpp", 43);
  result = a1 + 1;
  if (a1[1])
    v3 = a1[2] == 0;
  else
    v3 = 1;
  if (!v3)
  {
    sub_2341C4C94(result);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  }
  return result;
}

uint64_t sub_2341C4874(uint64_t result, uint64_t a2)
{
  _UNKNOWN **v2;
  uint64_t v4;
  _UNKNOWN **v5;

  v2 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v4 = result;
    do
    {
      if (v2)
        v5 = v2 - 1;
      else
        v5 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t, uint64_t))*v5 + 4))(v5, v4, a2);
      v2 = (_UNKNOWN **)v2[1];
    }
    while (v2 != &off_256158948);
  }
  return result;
}

uint64_t sub_2341C48DC(uint64_t result, uint64_t a2)
{
  _UNKNOWN **v2;
  uint64_t v4;
  _UNKNOWN **v5;

  v2 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v4 = result;
    do
    {
      if (v2)
        v5 = v2 - 1;
      else
        v5 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t, uint64_t))*v5 + 5))(v5, v4, a2);
      v2 = (_UNKNOWN **)v2[1];
    }
    while (v2 != &off_256158948);
  }
  return result;
}

uint64_t sub_2341C4944(uint64_t result, uint64_t a2)
{
  _UNKNOWN **v2;
  uint64_t v4;
  _UNKNOWN **v5;

  v2 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v4 = result;
    do
    {
      if (v2)
        v5 = v2 - 1;
      else
        v5 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t, uint64_t))*v5 + 6))(v5, v4, a2);
      v2 = (_UNKNOWN **)v2[1];
    }
    while (v2 != &off_256158948);
  }
  return result;
}

uint64_t sub_2341C49AC(uint64_t result)
{
  _UNKNOWN **v1;
  uint64_t v2;
  _UNKNOWN **v3;

  v1 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v2 = result;
    do
    {
      if (v1)
        v3 = v1 - 1;
      else
        v3 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 7))(v3, v2);
      v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_256158948);
  }
  return result;
}

uint64_t sub_2341C4A0C(uint64_t result)
{
  _UNKNOWN **v1;
  uint64_t v2;
  _UNKNOWN **v3;

  v1 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v2 = result;
    do
    {
      if (v1)
        v3 = v1 - 1;
      else
        v3 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 8))(v3, v2);
      v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_256158948);
  }
  return result;
}

uint64_t sub_2341C4A6C(uint64_t result)
{
  _UNKNOWN **v1;
  uint64_t v2;
  _UNKNOWN **v3;

  v1 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v2 = result;
    do
    {
      if (v1)
        v3 = v1 - 1;
      else
        v3 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 9))(v3, v2);
      v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_256158948);
  }
  return result;
}

uint64_t sub_2341C4ACC(uint64_t result)
{
  _UNKNOWN **v1;
  uint64_t v2;
  _UNKNOWN **v3;

  v1 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v2 = result;
    do
    {
      if (v1)
        v3 = v1 - 1;
      else
        v3 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 10))(v3, v2);
      v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_256158948);
  }
  return result;
}

uint64_t sub_2341C4B2C(uint64_t result)
{
  _UNKNOWN **v1;
  uint64_t v2;
  _UNKNOWN **v3;

  v1 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v2 = result;
    do
    {
      if (v1)
        v3 = v1 - 1;
      else
        v3 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 11))(v3, v2);
      v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_256158948);
  }
  return result;
}

uint64_t sub_2341C4B8C(uint64_t result)
{
  _UNKNOWN **v1;
  uint64_t v2;
  _UNKNOWN **v3;

  v1 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v2 = result;
    do
    {
      if (v1)
        v3 = v1 - 1;
      else
        v3 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 12))(v3, v2);
      v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_256158948);
  }
  return result;
}

uint64_t sub_2341C4BEC(uint64_t result)
{
  _UNKNOWN **v1;
  uint64_t v2;
  _UNKNOWN **v3;

  v1 = off_256158950;
  if (off_256158950 != &off_256158948)
  {
    v2 = result;
    do
    {
      if (v1)
        v3 = v1 - 1;
      else
        v3 = 0;
      result = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v3 + 13))(v3, v2);
      v1 = (_UNKNOWN **)v1[1];
    }
    while (v1 != &off_256158948);
  }
  return result;
}

_QWORD *sub_2341C4C4C(_QWORD *result, _QWORD *a2)
{
  if (!*result || !result[1])
    sub_23425C3B8((uint64_t)result);
  if (*a2 && a2[1])
    sub_23425C454((uint64_t)result);
  *a2 = *result;
  a2[1] = result;
  *(_QWORD *)(*result + 8) = a2;
  *result = a2;
  return result;
}

_QWORD *sub_2341C4C94(_QWORD *result)
{
  uint64_t v1;

  if (!*result || (v1 = result[1]) == 0)
    sub_23425C4F0((uint64_t)result);
  *(_QWORD *)(*result + 8) = v1;
  *(_QWORD *)result[1] = *result;
  *result = 0;
  result[1] = 0;
  return result;
}

char *sub_2341C4CC8@<X0>(char *result@<X0>, size_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;

  if (a2 >= 0x22)
  {
    result = (char *)snprintf(result, a2, "%08X%08X-%08X%08X", HIDWORD(a3[1]), a3[1], HIDWORD(*a3), *a3);
    v6 = 0;
    v5 = 41;
  }
  else
  {
    v5 = 33;
    v6 = 25;
  }
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

const char *sub_2341C4D3C@<X0>(const char *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  if (!result)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
    v6 = 46;
    goto LABEL_20;
  }
  if (!a2)
  {
    v6 = 47;
    *(_DWORD *)a3 = 47;
LABEL_19:
    *(_QWORD *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
    goto LABEL_20;
  }
  v5 = (uint64_t)result;
  result = (const char *)strnlen(result, 0x21uLL);
  if ((unint64_t)result > 0x20)
  {
    if (*(_BYTE *)(v5 + 33) && *(_BYTE *)(v5 + 33) != 46)
    {
      *(_DWORD *)a3 = 92;
      *(_QWORD *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
      v6 = 61;
      goto LABEL_20;
    }
    if (*(_BYTE *)(v5 + 16) != 45)
    {
      *(_DWORD *)a3 = 92;
      *(_QWORD *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
      v6 = 64;
      goto LABEL_20;
    }
    result = (const char *)sub_234115404(v5, 0x10uLL, (uint64_t)v8, 8);
    if (result)
    {
      a2[1] = bswap64(v8[0]);
      result = (const char *)sub_234115404(v5 + 17, 0x10uLL, (uint64_t)v8, 8);
      if (result)
      {
        v7 = 0;
        *a2 = bswap64(v8[0]);
        v6 = 80;
LABEL_18:
        *(_DWORD *)a3 = v7;
        goto LABEL_19;
      }
      v6 = 75;
    }
    else
    {
      v6 = 69;
    }
    v7 = 92;
    goto LABEL_18;
  }
  *(_DWORD *)a3 = 47;
  *(_QWORD *)(a3 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
  v6 = 58;
LABEL_20:
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_2341C4EC4@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v5 = a3[1];
  if (((2 * v5) | 1uLL) <= a2)
  {
    if (v5)
    {
      v9 = result;
      v10 = 0;
      v11 = 0;
      do
      {
        result = snprintf((char *)(v9 + v11), 3uLL, "%02X", *(unsigned __int8 *)(*a3 + v10));
        v11 += result;
        ++v10;
      }
      while (v10 < a3[1]);
    }
    v7 = 0;
    v6 = 92;
  }
  else
  {
    v6 = 85;
    v7 = 25;
  }
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

char *sub_2341C4F80@<X0>(char *__str@<X0>, size_t __size@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v7;
  int v8;
  int v9;

  v7 = __str;
  switch(*(_BYTE *)a3)
  {
    case 0:
      __str = 0;
      *v7 = 0;
      goto LABEL_20;
    case 1:
      if (*(_QWORD *)(a3 + 8) >= 0x10uLL)
      {
        *(_DWORD *)a4 = 47;
        *(_QWORD *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        v8 = 104;
        goto LABEL_24;
      }
      __str = (char *)snprintf(__str, __size, "_S%u");
      goto LABEL_20;
    case 2:
      if (*(_QWORD *)(a3 + 8) >= 0x1000uLL)
      {
        *(_DWORD *)a4 = 47;
        *(_QWORD *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        v8 = 112;
        goto LABEL_24;
      }
      __str = (char *)snprintf(__str, __size, "_L%u");
      goto LABEL_20;
    case 3:
      if (*(_QWORD *)(a3 + 8) >= 0x10000uLL)
      {
        *(_DWORD *)a4 = 47;
        *(_QWORD *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        v8 = 119;
        goto LABEL_24;
      }
      __str = (char *)snprintf(__str, __size, "_V%u");
      goto LABEL_20;
    case 4:
      __str = (char *)snprintf(__str, __size, "_T%u");
      goto LABEL_20;
    case 5:
      __str = (char *)snprintf(__str, __size, "_CM");
      goto LABEL_20;
    case 6:
      __str = (char *)snprintf(__str, __size, "%s");
      goto LABEL_20;
    case 7:
      if (*(_QWORD *)(a3 + 8) < 2uLL)
      {
        __str = (char *)snprintf(__str, __size, "_D%u");
LABEL_20:
        if (__size - 1 >= (int)__str)
          *(_DWORD *)a4 = 0;
        else
          *(_DWORD *)a4 = 11;
        *(_QWORD *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        v8 = 149;
      }
      else
      {
        *(_DWORD *)a4 = 47;
        *(_QWORD *)(a4 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        v8 = 132;
      }
LABEL_24:
      *(_DWORD *)(a4 + 16) = v8;
      return __str;
    case 8:
      v9 = snprintf(__str, __size, "_I");
      return sub_234115324(*(_QWORD *)(a3 + 8), &v7[v9], __size - v9, 3u, a4);
    default:
      __str = 0;
      goto LABEL_20;
  }
}

uint64_t sub_2341C517C@<X0>(uint64_t __str@<X0>, size_t __size@<X1>, __int128 *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  size_t v6;
  const char *v7;
  uint64_t v9;
  const char *v10;
  const char *v11;
  int v12;
  const char *v13;
  const char *v14;
  __int128 v15;
  uint64_t v16;

  v6 = __size;
  v7 = (const char *)__str;
  if (!*(_BYTE *)a3)
  {
    switch(a4)
    {
      case 1:
        v11 = "_matter";
        break;
      case 3:
        v11 = "_matterd";
        break;
      case 2:
        v11 = "_matterc";
        break;
      default:
        *(_DWORD *)a5 = 45;
        *(_QWORD *)(a5 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
        v12 = 171;
        goto LABEL_22;
    }
LABEL_18:
    __str = snprintf((char *)__str, __size, v11, v13, v14);
    if (v6 - 1 >= (int)__str)
      *(_DWORD *)a5 = 0;
    else
      *(_DWORD *)a5 = 11;
    *(_QWORD *)(a5 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
    v12 = 199;
    goto LABEL_22;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v15 = *a3;
  v16 = *((_QWORD *)a3 + 2);
  __str = (uint64_t)sub_2341C4F80((char *)__str, __size, (uint64_t)&v15, a5);
  if (*(_DWORD *)a5)
    return __str;
  __str = strlen(v7);
  switch(a4)
  {
    case 1:
      v9 = (uint64_t)&v7[__str];
      __size = v6 - __str;
      v10 = "_matter";
      goto LABEL_17;
    case 3:
      v9 = (uint64_t)&v7[__str];
      __size = v6 - __str;
      v10 = "_matterd";
      goto LABEL_17;
    case 2:
      v9 = (uint64_t)&v7[__str];
      __size = v6 - __str;
      v10 = "_matterc";
LABEL_17:
      v13 = "_sub";
      v14 = v10;
      v11 = ".%s.%s";
      __str = v9;
      goto LABEL_18;
  }
  *(_DWORD *)a5 = 45;
  *(_QWORD *)(a5 + 8) = "src/lib/dnssd/ServiceNaming.cpp";
  v12 = 195;
LABEL_22:
  *(_DWORD *)(a5 + 16) = v12;
  return __str;
}

uint64_t sub_2341C5310@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  char v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;

  v6 = (_BYTE *)*a2;
  a2[1] = *a2;
  if (*((char *)a1 + 23) < 0)
    v7 = a1[1];
  else
    v7 = *((unsigned __int8 *)a1 + 23);
  v8 = 0;
  result = 1040388;
  while (1)
  {
    if (!v7)
    {
      v34 = 0;
      v33 = 158;
      goto LABEL_43;
    }
    if (v7 <= 4)
      break;
    v10 = 5;
    v11 = 3;
LABEL_12:
    v12 = 0;
    v13 = *((char *)a1 + 23);
    v14 = v10;
    do
    {
      *a3 = 0;
      a3[1] = 0;
      v15 = a1;
      a3[2] = 0;
      if (v13 < 0)
        v15 = (uint64_t *)*a1;
      v16 = *((unsigned __int8 *)v15 + v8 + v14 - 1);
      if ((v16 - 91) < 0xFFFFFFD2)
      {
        v33 = 83;
LABEL_42:
        v34 = 143;
        goto LABEL_43;
      }
      v17 = (v16 - 45);
      if (((0xFE004uLL >> v17) & 1) != 0)
      {
        v33 = 88;
        goto LABEL_42;
      }
      v18 = byte_2342EDAE0[v17];
      a3[1] = "src/setup_payload/Base38Decode.cpp";
      *((_DWORD *)a3 + 4) = 91;
      v12 = v18 + 38 * v12;
      --v14;
    }
    while (v14);
    v19 = 0;
    v35 = v10 + v8;
    v36 = v7 - v10;
    do
    {
      v20 = v12;
      v21 = a2[2];
      if ((unint64_t)v6 >= v21)
      {
        v22 = *a2;
        v23 = &v6[-*a2];
        v24 = (unint64_t)(v23 + 1);
        if ((uint64_t)(v23 + 1) < 0)
          abort();
        v25 = v21 - v22;
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x3FFFFFFFFFFFFFFFLL)
          v26 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
          v27 = (char *)operator new(v26);
        else
          v27 = 0;
        v28 = &v23[(_QWORD)v27];
        v29 = &v23[(_QWORD)v27];
        *v29 = v20;
        v30 = v29 + 1;
        if (v6 != (_BYTE *)v22)
        {
          v31 = &v6[~v22];
          do
          {
            v32 = *--v6;
            (v31--)[(_QWORD)v27] = v32;
          }
          while (v6 != (_BYTE *)v22);
          v6 = (_BYTE *)*a2;
          v28 = v27;
        }
        *a2 = (unint64_t)v28;
        a2[1] = (unint64_t)v30;
        a2[2] = (unint64_t)&v27[v26];
        if (v6)
          operator delete(v6);
        v6 = v30;
      }
      else
      {
        *v6++ = v20;
      }
      a2[1] = (unint64_t)v6;
      v12 = v20 >> 8;
      ++v19;
    }
    while (v19 != v11);
    v8 = v35;
    v7 = v36;
    result = 1040388;
    if (v20 >= 0x100)
    {
      v33 = 155;
      v34 = 47;
      goto LABEL_43;
    }
  }
  if (v7 == 4)
  {
    v10 = 4;
    v11 = 2;
    goto LABEL_12;
  }
  if (v7 == 2)
  {
    v10 = 2;
    v11 = 1;
    goto LABEL_12;
  }
  v33 = 126;
  v34 = 30;
LABEL_43:
  *(_DWORD *)a3 = v34;
  a3[1] = "src/setup_payload/Base38Decode.cpp";
  *((_DWORD *)a3 + 4) = v33;
  return result;
}

uint64_t sub_2341C5578@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;

  *(_OWORD *)a4 = xmmword_2505146B0;
  *(_QWORD *)(a4 + 16) = 46;
  if (a2)
  {
    v4 = a2;
    a2 = 0;
    while (1)
    {
      v5 = 0;
      v6 = 0;
      v7 = v4 >= 3 ? 3 : v4;
      v8 = (unsigned __int8 *)result;
      v9 = v7;
      do
      {
        v10 = *v8++;
        v6 += v10 << v5;
        v5 += 8;
        --v9;
      }
      while (v9);
      v11 = byte_2342EDB0E[v7 - 1];
      if (a2 + v11 >= a3[1])
        break;
      v4 -= v7;
      result += v7;
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = byte_2342EDB0E[v7 - 1];
      v13 = v12 + a2;
      do
      {
        *(_BYTE *)(*a3 + a2++) = byte_2342EDB11[v6 % 0x26];
        v6 /= 0x26u;
      }
      while (v13 != a2);
      if (!v4)
        goto LABEL_17;
    }
    *(_DWORD *)a4 = 25;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/Base38Encode.cpp";
    *(_DWORD *)(a4 + 16) = 70;
  }
LABEL_17:
  if (a2 >= a3[1])
  {
    *(_DWORD *)a4 = 25;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/Base38Encode.cpp";
    *(_DWORD *)(a4 + 16) = 90;
  }
  else
  {
    *(_BYTE *)(*a3 + a2) = 0;
    return sub_234138204((uint64_t)a3, a2);
  }
  return result;
}

unint64_t sub_2341C56A8(unint64_t a1)
{
  return 5 * (a1 / 3) + 2 * (a1 % 3) + 1;
}

uint64_t sub_2341C56D8@<X0>(uint64_t a1@<X0>, const char **a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t result;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  char *v14;
  size_t v15;
  int v16;
  int v17;
  char *v18;
  size_t v19;
  int v20;
  int v21;
  char *v22;
  size_t v23;
  int v24;
  int v25;
  char *v26;
  size_t v27;
  int v28;
  int v29;
  char *v30;
  size_t v31;
  int v32;
  int v33;
  unint64_t v34;
  unsigned __int8 v35;
  int v36;
  char *v37;
  size_t v38;
  int v39;
  int v40;
  int v41;
  uint8_t buf[16];
  uint8_t v43[16];

  if (!*(_BYTE *)(a1 + 20) && (sub_2341C868C(a1, 0) & 1) == 0)
  {
    v9 = sub_234117B80(0x20u, "SetupPayload");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Failed encoding invalid payload", v43, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x20u, 1);
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
    v8 = 113;
    goto LABEL_18;
  }
  if (!*(_BYTE *)(a1 + 6) || *(_BYTE *)(a1 + 21))
  {
    if ((unint64_t)a2[1] > 0xB)
    {
      v41 = 0;
      goto LABEL_20;
    }
LABEL_8:
    v6 = sub_234117B80(0x20u, "SetupPayload");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Failed encoding payload to buffer", buf, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x20u, 1);
    *(_DWORD *)a3 = 25;
    *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
    v8 = 123;
    goto LABEL_18;
  }
  if ((unint64_t)a2[1] < 0x16)
    goto LABEL_8;
  v41 = 1;
LABEL_20:
  v10 = *(unsigned __int8 *)(a1 + 6) != 0;
  if (*(_BYTE *)(a1 + 12))
    v11 = *(unsigned __int16 *)(a1 + 10);
  else
    v11 = HIBYTE(*(unsigned __int16 *)(a1 + 10));
  v12 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v13 = (v11 >> 2) & 3 | (4 * v10);
  *(_QWORD *)a3 = 0;
  v14 = (char *)sub_2341C5ADC(a2, 0, 2uLL);
  v16 = v15;
  result = snprintf(v14, v15, "%0*u", v15 - 1, v13);
  *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
  *(_DWORD *)(a3 + 16) = 93;
  if ((int)result >= v16)
    v17 = 25;
  else
    v17 = 0;
  *(_DWORD *)a3 = v17;
  if ((int)result < v16)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v18 = (char *)sub_2341C5ADC(a2, 1uLL, 6uLL);
    v20 = v19;
    result = snprintf(v18, v19, "%0*u", v19 - 1, v12 & 0x3FFF | ((v11 & 3) << 14));
    *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
    *(_DWORD *)(a3 + 16) = 93;
    v21 = (int)result >= v20 ? 25 : 0;
    *(_DWORD *)a3 = v21;
    if ((int)result < v20)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v22 = (char *)sub_2341C5ADC(a2, 6uLL, 5uLL);
      v24 = v23;
      result = snprintf(v22, v23, "%0*u", v23 - 1, (v12 >> 14) & 0x1FFF);
      *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
      *(_DWORD *)(a3 + 16) = 93;
      v25 = (int)result >= v24 ? 25 : 0;
      *(_DWORD *)a3 = v25;
      if ((int)result < v24)
      {
        if (v41)
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          v26 = (char *)sub_2341C5ADC(a2, 0xAuLL, 6uLL);
          v28 = v27;
          result = snprintf(v26, v27, "%0*u", v27 - 1, *(unsigned __int16 *)(a1 + 2));
          *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
          *(_DWORD *)(a3 + 16) = 93;
          if ((int)result >= v28)
            v29 = 25;
          else
            v29 = 0;
          *(_DWORD *)a3 = v29;
          if ((int)result >= v28)
            return result;
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          v30 = (char *)sub_2341C5ADC(a2, 0xFuLL, 6uLL);
          v32 = v31;
          result = snprintf(v30, v31, "%0*u", v31 - 1, *(unsigned __int16 *)(a1 + 4));
          *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
          *(_DWORD *)(a3 + 16) = 93;
          v33 = (int)result >= v32 ? 25 : 0;
          *(_DWORD *)a3 = v33;
          if ((int)result >= v32)
            return result;
          v34 = 20;
        }
        else
        {
          v34 = 10;
        }
        v35 = sub_234117990(*a2);
        v36 = sub_234117A78(v35);
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = 0;
        v37 = (char *)sub_2341C5ADC(a2, v34, 2uLL);
        v39 = v38;
        result = snprintf(v37, v38, "%0*u", v38 - 1, v36);
        *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
        *(_DWORD *)(a3 + 16) = 93;
        if ((int)result >= v39)
          v40 = 25;
        else
          v40 = 0;
        *(_DWORD *)a3 = v40;
        if ((int)result < v39)
        {
          result = sub_234138204((uint64_t)a2, v34 | 1);
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
          v8 = 157;
LABEL_18:
          *(_DWORD *)(a3 + 16) = v8;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2341C5ADC(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;

  v3 = a1[1];
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
    sub_23425B530((uint64_t)a1);
  if (v5 < a3)
    sub_23425B5CC((uint64_t)a1);
  sub_2341C5BCC(&v7, *a1 + a2, a3);
  return v7;
}

uint64_t sub_2341C5B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  const char *v6[2];
  uint64_t v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v8[0] = 0;
  *(_QWORD *)((char *)v8 + 6) = 0;
  v6[0] = (const char *)&v7;
  v6[1] = (const char *)22;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_2341C56D8(a1, v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    result = MEMORY[0x23493E5F0](a2, &v7);
    *(_DWORD *)a3 = 0;
    a3[1] = "src/setup_payload/ManualSetupPayloadGenerator.cpp";
    *((_DWORD *)a3 + 4) = 169;
  }
  return result;
}

_QWORD *sub_2341C5BCC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  if (!a2)
  {
    if (a3)
      sub_23425A9AC((uint64_t)result);
  }
  return result;
}

void sub_2341C5BEC(std::string *__str@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v4;
  std::string::size_type size;
  NSObject *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *p_stra;
  int v12;
  int v13;
  char v14;
  std::string __stra;
  uint64_t v16;

  v4 = __str;
  v16 = *MEMORY[0x24BDAC8D0];
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < 2)
      goto LABEL_3;
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size <= 1)
    {
LABEL_3:
      v7 = sub_234117B80(0x20u, "SetupPayload");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
          v8 = v4->__r_.__value_.__l.__size_;
        else
          LODWORD(v8) = HIBYTE(v4->__r_.__value_.__r.__words[2]);
        LODWORD(__stra.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__stra.__r_.__value_.__r.__words[0]) = v8;
        _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Failed decoding base10. Input was empty. %u", (uint8_t *)&__stra, 8u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0x20u, 1);
      *(_DWORD *)a3 = 30;
      *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
      *(_DWORD *)(a3 + 16) = 39;
      return;
    }
  }
  std::string::basic_string(&__stra, __str, 0, size - 1, (std::allocator<char> *)&v14);
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = v4;
    v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
    v9 = v10->__r_.__value_.__l.__size_;
  }
  else
  {
    v9 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  }
  if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_stra = &__stra;
  else
    p_stra = (std::string *)__stra.__r_.__value_.__r.__words[0];
  if (sub_234117AA0(v4->__r_.__value_.__s.__data_[v9 - 1], (char *)p_stra))
  {
    std::string::operator=(a2, &__stra);
    v12 = 0;
    v13 = 49;
  }
  else
  {
    v13 = 46;
    v12 = 19;
  }
  *(_DWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
  *(_DWORD *)(a3 + 16) = v13;
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

uint64_t sub_2341C5DC0@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v4 = 20;
  else
    v4 = 10;
  v5 = *(unsigned __int8 *)(result + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(result + 8);
  if (v5 == v4)
  {
    v6 = 0;
    v7 = 61;
  }
  else
  {
    v8 = result;
    v9 = sub_234117B80(0x20u, "SetupPayload");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v10) = *(unsigned __int8 *)(v8 + 23);
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(v8 + 8);
      *(_DWORD *)buf = 67109376;
      v12 = v10;
      v13 = 1024;
      v14 = v4;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Failed decoding base10. Input length %u was not expected length %u", buf, 0xEu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x20u, 1);
    v7 = 59;
    v6 = 30;
  }
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_2341C5F1C@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  int v12;
  uint8_t buf[4];
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *(char *)(result + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (char *)result;
  else
    v6 = *(char **)result;
  if (v5)
    v7 = *(_QWORD *)(result + 8);
  else
    v7 = *(unsigned __int8 *)(result + 23);
  if (v7)
  {
    v8 = 0;
    while (1)
    {
      v9 = *v6;
      if ((v9 & 0x80000000) != 0 || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v9 + 60) & 0x400) == 0)
        break;
      v8 = v9 + 10 * v8 - 48;
      ++v6;
      if (!--v7)
        goto LABEL_19;
    }
    v10 = sub_234117B80(0x20u, "SetupPayload");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v14 = v9;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed decoding base10. Character was invalid %c", buf, 8u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x20u, 1);
    v11 = 72;
    v12 = 143;
  }
  else
  {
    v8 = 0;
LABEL_19:
    v12 = 0;
    *a2 = v8;
    v11 = 78;
  }
  *(_DWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

void sub_2341C6074(std::string *__str@<X0>, std::string::size_type __n@<X3>, std::string::size_type *a3@<X1>, int *a4@<X2>, uint64_t a5@<X8>)
{
  std::string::size_type size;
  NSObject *v11;
  std::string::size_type v12;
  char v13;
  std::string buf;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    size = __str->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (size >= __n && *a3 + __n <= size)
  {
    std::string::basic_string(&buf, __str, *a3, __n, (std::allocator<char> *)&v13);
    *a3 += __n;
    sub_2341C5F1C((uint64_t)&buf, a4, a5);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = sub_234117B80(0x20u, "SetupPayload");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v12) = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v12 & 0x80u) != 0)
        v12 = __str->__r_.__value_.__l.__size_;
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v12;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Failed decoding base10. Input was too short. %u", (uint8_t *)&buf, 8u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0x20u, 1);
    *(_DWORD *)a5 = 30;
    *(_QWORD *)(a5 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
    *(_DWORD *)(a5 + 16) = 89;
  }
}

void sub_2341C6210(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  char v7;
  int v8;
  unsigned __int16 v9;
  int v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  std::string::size_type v16;
  std::string __p;
  uint8_t buf[4];
  __int128 v19;
  int v20;
  std::string __str;
  char v22;
  int v23;
  __int16 v24;
  __int16 v25;
  char v26;
  int v27;
  char **v28;
  char *v29[2];
  char **v30;
  char *v31[2];
  __int128 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v23 = 0;
  v24 = 0;
  v28 = v29;
  v29[0] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v29[1] = 0;
  v30 = v31;
  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a1 + 23) < 0)
    sub_233C0DAF8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2341C5BEC(&__p, &__str, (uint64_t)buf);
  v5 = *(_DWORD *)buf;
  v32 = v19;
  v33 = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
  {
    *(_DWORD *)a3 = v5;
LABEL_12:
    *(_OWORD *)(a3 + 4) = v32;
    *(_DWORD *)(a3 + 20) = v33;
    goto LABEL_13;
  }
  v15 = 0;
  v16 = 0;
  v14 = 0;
  sub_2341C6074(&__str, 1uLL, &v16, (int *)&v15 + 1, (uint64_t)buf);
  v6 = *(_DWORD *)buf;
  v32 = v19;
  v33 = v20;
  if (*(_DWORD *)buf)
    goto LABEL_11;
  sub_2341C6074(&__str, 5uLL, &v16, (int *)&v15, (uint64_t)buf);
  v6 = *(_DWORD *)buf;
  v32 = v19;
  v33 = v20;
  if (*(_DWORD *)buf
    || (sub_2341C6074(&__str, 4uLL, &v16, &v14, (uint64_t)buf), v6 = *(_DWORD *)buf, v32 = v19, v33 = v20, *(_DWORD *)buf))
  {
LABEL_11:
    *(_DWORD *)a3 = v6;
    goto LABEL_12;
  }
  v7 = BYTE4(v15);
  if ((HIDWORD(v15) & 0xFFFFFFFE) != 8)
  {
    sub_2341C5DC0((uint64_t)&__str, (HIDWORD(v15) >> 2) & 1, (uint64_t)buf);
    v6 = *(_DWORD *)buf;
    v32 = v19;
    v33 = v20;
    if (*(_DWORD *)buf)
      goto LABEL_11;
    v9 = v15;
    v10 = v15 & 0x3FFF | ((v14 & 0x1FFF) << 14);
    if (!v10)
    {
      v11 = sub_234117B80(0x20u, "SetupPayload");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Failed decoding base10. SetUpPINCode was 0.", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0x20u, 1);
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
      v8 = 159;
      goto LABEL_18;
    }
    if ((v7 & 4) != 0)
    {
      v13 = 0;
      sub_2341C6074(&__str, 5uLL, &v16, (int *)&v13, (uint64_t)buf);
      v6 = *(_DWORD *)buf;
      v32 = v19;
      v33 = v20;
      if (*(_DWORD *)buf)
        goto LABEL_11;
      v12 = 0;
      sub_2341C6074(&__str, 5uLL, &v16, (int *)&v12, (uint64_t)buf);
      v6 = *(_DWORD *)buf;
      v32 = v19;
      v33 = v20;
      if (*(_DWORD *)buf)
        goto LABEL_11;
      if (v13 >= 0x10000)
      {
        *(_DWORD *)a3 = 143;
        *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
        v8 = 183;
        goto LABEL_18;
      }
      *(_WORD *)(a2 + 2) = v13;
      if (v12 >= 0x10000)
      {
        *(_DWORD *)a3 = 143;
        *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
        v8 = 188;
        goto LABEL_18;
      }
      *(_WORD *)(a2 + 4) = v12;
    }
    *(_BYTE *)(a2 + 6) = (v7 & 4) >> 1;
    *(_DWORD *)(a2 + 16) = v10;
    sub_234044248(a2 + 10, (4 * (v7 & 3)) | (v9 >> 14));
    *(_DWORD *)a3 = 0;
    goto LABEL_12;
  }
  *(_DWORD *)a3 = 47;
  *(_QWORD *)(a3 + 8) = "src/setup_payload/ManualSetupPayloadParser.cpp";
  v8 = 133;
LABEL_18:
  *(_DWORD *)(a3 + 16) = v8;
LABEL_13:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_233CF19DC((uint64_t)&v30, v31[0]);
  sub_233CF19DC((uint64_t)&v28, v29[0]);
}

char *sub_2341C65D8@<X0>(char *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  char *v5;
  char *v6;
  char *v7;

  *(_OWORD *)a4 = xmmword_2505146C8;
  *(_QWORD *)(a4 + 16) = 79;
  v4 = *(_DWORD *)(a3 + 4);
  if (v4 == 2)
    return sub_234107314(result, a2, *(_DWORD *)(a3 + 32), a4);
  if (v4 == 1)
  {
    v7 = *(char **)(a3 + 8);
    v5 = (char *)(a3 + 8);
    v6 = v7;
    if (v5[23] < 0)
      v5 = v6;
    return (char *)sub_23410753C(v5, result, a2, a4);
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    *(_DWORD *)(a4 + 16) = 91;
  }
  return result;
}

char *sub_2341C6640@<X0>(char *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;

  *(_OWORD *)a4 = xmmword_2505146E0;
  *(_QWORD *)(a4 + 16) = 99;
  switch(*(_DWORD *)(a3 + 4))
  {
    case 1:
    case 2:
      result = sub_2341C65D8(result, a2, a3, a4);
      break;
    case 3:
      result = sub_23410731C(result, a2, *(_QWORD *)(a3 + 40), a4);
      break;
    case 4:
      v4 = *(_QWORD *)(a3 + 48);
      goto LABEL_6;
    case 5:
      v4 = *(_QWORD *)(a3 + 56);
LABEL_6:
      result = sub_2341071EC(result, a2, v4, a4);
      break;
    default:
      *(_DWORD *)a4 = 47;
      *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
      *(_DWORD *)(a4 + 16) = 119;
      break;
  }
  return result;
}

void sub_2341C66BC(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int a3@<W3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  uint64_t v26;
  __int128 __p;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  char v32[64];
  void **v33[5];
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_2341C88DC(a1, &v37);
  sub_2341C8F58(a1, &v35);
  if (v37 == v38 && v35 == v36)
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    v25 = 130;
    goto LABEL_26;
  }
  sub_234106C48((uint64_t)v33);
  sub_234106C70((uint64_t)v33, a2, a3);
  sub_234106C48((uint64_t)v32);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  sub_234107B78((char *)v33, 0x100uLL, 21, (uint64_t)v32, a5);
  if (*(_DWORD *)a5)
    goto LABEL_27;
  v10 = v38;
  if (v37 == v38)
  {
LABEL_13:
    v17 = v36;
    if (v35 != v36)
    {
      v18 = (__int128 *)(v35 + 8);
      do
      {
        v20 = (uint64_t)v18 - 8;
        v19 = *((_QWORD *)v18 - 1);
        v26 = v19;
        if (*((char *)v18 + 23) < 0)
        {
          sub_233C0DAF8(&__p, *(void **)v18, *((_QWORD *)v18 + 1));
          v21 = v26;
        }
        else
        {
          v21 = v19;
          v22 = *v18;
          v28 = *((_QWORD *)v18 + 2);
          __p = v22;
        }
        v29 = *((_DWORD *)v18 + 6);
        v23 = v18[2];
        v31 = *((_QWORD *)v18 + 6);
        v30 = v23;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)a5 = 0;
        sub_2341C6640(v32, v21, (uint64_t)&v26, a5);
        v24 = *(_DWORD *)a5;
        if (SHIBYTE(v28) < 0)
          operator delete((void *)__p);
        if (v24)
          goto LABEL_27;
        v18 += 4;
      }
      while (v20 + 64 != v17);
    }
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    sub_234107D2C((char *)v33, (uint64_t)v32, a5);
    if (*(_DWORD *)a5)
      goto LABEL_27;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    sub_234106D88((uint64_t)v33, a5);
    if (*(_DWORD *)a5)
      goto LABEL_27;
    *a4 = v34;
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    v25 = 155;
LABEL_26:
    *(_DWORD *)(a5 + 16) = v25;
    goto LABEL_27;
  }
  v11 = (__int128 *)(v37 + 8);
  while (1)
  {
    v13 = (uint64_t)v11 - 8;
    v12 = *((_QWORD *)v11 - 1);
    v26 = v12;
    if (*((char *)v11 + 23) < 0)
    {
      sub_233C0DAF8(&__p, *(void **)v11, *((_QWORD *)v11 + 1));
      v14 = v26;
    }
    else
    {
      v14 = v12;
      v15 = *v11;
      v28 = *((_QWORD *)v11 + 2);
      __p = v15;
    }
    v29 = *((_DWORD *)v11 + 6);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
    sub_2341C65D8(v32, v14, (uint64_t)&v26, a5);
    v16 = *(_DWORD *)a5;
    if (SHIBYTE(v28) < 0)
      operator delete((void *)__p);
    if (v16)
      break;
    v11 = (__int128 *)((char *)v11 + 40);
    if (v13 + 40 == v10)
      goto LABEL_13;
  }
LABEL_27:
  v33[0] = (void **)&v35;
  sub_2341C70FC(v33);
  v33[0] = (void **)&v37;
  sub_234045EC0(v33);
}

void sub_2341C6968(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_2341C6974(a1, a2, 0, 0, a3);
}

void sub_2341C6974(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18[2];
  void *v19[2];
  uint64_t v20;

  v20 = 0;
  if (!a1[72] && (sub_2341C85BC(a1, 0) & 1) == 0)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    *(_DWORD *)(a5 + 16) = 275;
    return;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  sub_2341C66BC((uint64_t)a1, (uint64_t)a3, a4, &v20, a5);
  if (!*(_DWORD *)a5)
  {
    v10 = v20;
    v11 = v20 + 11;
    if (v20 == -11)
    {
      v13 = 0;
      v12 = 0;
    }
    else
    {
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_20;
      v12 = (char *)operator new(v20 + 11);
      v13 = &v12[v11];
      bzero(v12, v11);
    }
    sub_233CAF22C(v19, (uint64_t)v12, v13 - v12);
    v14 = sub_2341C56A8(v13 - v12);
    v15 = v14 + 3;
    if (v14 == -3)
    {
      v16 = 0;
      v17 = 0;
      goto LABEL_13;
    }
    if ((v15 & 0x8000000000000000) == 0)
    {
      v16 = (char *)operator new(v14 + 3);
      v17 = &v16[v15];
      bzero(v16, v15);
LABEL_13:
      sub_2341C5BCC(v18, (uint64_t)v16, v17 - v16);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      sub_2341C6CA8(v19[0], a1, v18, (size_t)v19[1], a3, v10, (_QWORD *)a5);
      if (!*(_DWORD *)a5)
      {
        MEMORY[0x23493E5F0](a2, v18[0]);
        *(_DWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
        *(_DWORD *)(a5 + 16) = 286;
      }
      if (v16)
        operator delete(v16);
      if (v12)
        operator delete(v12);
      return;
    }
LABEL_20:
    abort();
  }
}

void sub_2341C6B28(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **i;
  void *v11;
  uint64_t v12;
  size_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  void **v17[3];
  uint64_t v18;
  uint64_t v19;
  void ***v20;

  sub_2341C88DC((uint64_t)a1, &v18);
  v6 = v18;
  if (v18 == v19)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      if (*(_DWORD *)(v6 + 4) == 1)
      {
        v8 = *(unsigned __int8 *)(v6 + 31);
        if ((v8 & 0x80u) != 0)
          v8 = *(_QWORD *)(v6 + 16);
        v9 = v8 + 10;
      }
      else
      {
        v9 = 10;
      }
      v7 += v9;
      v6 += 40;
    }
    while (v6 != v19);
  }
  sub_2341C8F58((uint64_t)a1, (uint64_t *)v17);
  for (i = v17[0]; i != v17[1]; i += 8)
  {
    if (*((_DWORD *)i + 1) == 1)
    {
      v11 = (void *)*((unsigned __int8 *)i + 31);
      if ((char)v11 < 0)
        v11 = i[2];
      v12 = (uint64_t)v11 + 10;
    }
    else
    {
      v12 = 10;
    }
    v7 += v12;
  }
  v13 = v7 + 6;
  if (HIDWORD(v13))
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    v16 = 262;
LABEL_24:
    *(_DWORD *)(a3 + 16) = v16;
    goto LABEL_25;
  }
  v14 = (unsigned __int8 *)sub_234114774(v13);
  if (!v14)
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    v16 = 265;
    goto LABEL_24;
  }
  v15 = v14;
  sub_2341C6974(a1, a2, v14, v13, a3);
  j__free(v15);
LABEL_25:
  v20 = v17;
  sub_2341C70FC((void ***)&v20);
  v17[0] = (void **)&v18;
  sub_234045EC0(v17);
}

void sub_2341C6CA8(void *a1@<X2>, unsigned __int8 *a2@<X0>, uint64_t *a3@<X1>, size_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;

  bzero(a1, a4);
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v23 = 0;
  v14 = 8 * a6 + 88;
  if (v14 > 8 * a4)
  {
    *(_DWORD *)a7 = 25;
    v15 = 163;
LABEL_3:
    a7[1] = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
LABEL_4:
    *((_DWORD *)a7 + 4) = v15;
    return;
  }
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  sub_2341C704C((uint64_t)a1, (unint64_t *)&v23, *a2, 3, 0x58uLL, (uint64_t)a7);
  if (!*(_DWORD *)a7)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    sub_2341C704C((uint64_t)a1, (unint64_t *)&v23, *((unsigned __int16 *)a2 + 1), 16, 0x58uLL, (uint64_t)a7);
    if (!*(_DWORD *)a7)
    {
      *a7 = 0;
      a7[1] = 0;
      a7[2] = 0;
      sub_2341C704C((uint64_t)a1, (unint64_t *)&v23, *((unsigned __int16 *)a2 + 2), 16, 0x58uLL, (uint64_t)a7);
      if (!*(_DWORD *)a7)
      {
        *a7 = 0;
        a7[1] = 0;
        a7[2] = 0;
        sub_2341C704C((uint64_t)a1, (unint64_t *)&v23, a2[6], 2, 0x58uLL, (uint64_t)a7);
        if (!*(_DWORD *)a7)
        {
          *a7 = 0;
          a7[1] = 0;
          a7[2] = 0;
          v16 = a2[7] ? *sub_2341C70DC(a2 + 7) : 0;
          sub_2341C704C((uint64_t)a1, (unint64_t *)&v23, v16, 8, 0x58uLL, (uint64_t)a7);
          if (!*(_DWORD *)a7)
          {
            v17 = 0;
            *a7 = 0;
            a7[1] = 0;
            a7[2] = 0;
            if (!a2[12])
              v17 = sub_2340441C0(a2 + 10);
            sub_2341C704C((uint64_t)a1, (unint64_t *)&v23, v17, 12, 0x58uLL, (uint64_t)a7);
            if (!*(_DWORD *)a7)
            {
              *a7 = 0;
              a7[1] = 0;
              a7[2] = 0;
              sub_2341C704C((uint64_t)a1, (unint64_t *)&v23, *((unsigned int *)a2 + 4), 27, 0x58uLL, (uint64_t)a7);
              if (!*(_DWORD *)a7)
              {
                *a7 = 0;
                a7[1] = 0;
                a7[2] = 0;
                if ((unint64_t)(v23 + 4) >= 0x59)
                {
                  *(_DWORD *)a7 = 47;
                  v15 = 48;
                  goto LABEL_3;
                }
                v23 += 4;
                if (a6)
                {
                  while (1)
                  {
                    v18 = *a5++;
                    a7[1] = 0;
                    a7[2] = 0;
                    *a7 = 0;
                    sub_2341C704C((uint64_t)a1, (unint64_t *)&v23, v18, 8, v14, (uint64_t)a7);
                    if (*(_DWORD *)a7)
                      break;
                    if (!--a6)
                      goto LABEL_23;
                  }
                }
                else
                {
LABEL_23:
                  *(_OWORD *)a7 = xmmword_2505146F8;
                  a7[2] = 198;
                  v19 = a3[1];
                  if (v19 <= 3)
                  {
                    *(_DWORD *)a7 = 25;
                    a7[1] = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
                    v15 = 203;
                    goto LABEL_4;
                  }
                  v23 = sub_2341C5ADC(a3, 3uLL, v19 - 3);
                  v24 = v20;
                  v21 = *a3;
                  *(_BYTE *)(v21 + 2) = 58;
                  *(_WORD *)v21 = 21581;
                  sub_233BF7114(v22, (uint64_t)a1, a4);
                  sub_2341C5578(v22[0], v22[1], &v23, (uint64_t)a7);
                  sub_234138204((uint64_t)a3, v24 + 3);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_2341C6FA0(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[11];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((sub_2341C85BC(a1, 0) & 1) != 0)
  {
    sub_2341C6CA8(v6, a1, a2, 0xBuLL, 0, 0, (_QWORD *)a3);
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
    *(_DWORD *)(a3 + 16) = 292;
  }
}

uint64_t sub_2341C704C@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  int v10;

  v6 = *a2;
  v7 = *a2 + a4;
  if (v7 > a5)
  {
    v8 = 48;
LABEL_10:
    v10 = 47;
    goto LABEL_11;
  }
  if ((1 << a4) <= a3)
  {
    v8 = 49;
    goto LABEL_10;
  }
  *a2 = v7;
  if (a3)
  {
    do
    {
      if ((a3 & 1) != 0)
        *(_BYTE *)(result + (v6 >> 3)) |= 1 << (v6 & 7);
      ++v6;
      v9 = a3 > 1;
      a3 >>= 1;
    }
    while (v9);
  }
  v10 = 0;
  v8 = 63;
LABEL_11:
  *(_DWORD *)a6 = v10;
  *(_QWORD *)(a6 + 8) = "src/setup_payload/QRCodeSetupPayloadGenerator.cpp";
  *(_DWORD *)(a6 + 16) = v8;
  return result;
}

_BYTE *sub_2341C70DC(_BYTE *a1)
{
  if (!*a1)
    sub_23425AE7C((uint64_t)a1);
  return a1 + 1;
}

void sub_2341C70FC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_2341C713C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_2341C713C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  a1[1] = v2;
}

void sub_2341C7188(std::string *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  while (1)
  {
    v6 = sub_23410462C(a2);
    if (v6 <= 0xC && ((1 << v6) & 0x1011) != 0)
      break;
LABEL_27:
    sub_2341058CC(a2, &v18);
    v12 = HIDWORD(v18);
    v14 = v20;
    v13 = HIDWORD(v20);
    if ((_DWORD)v18)
    {
      if ((_DWORD)v18 == 33)
        v15 = 0;
      else
        v15 = v18;
      if ((_DWORD)v18 == 33)
        v16 = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
      else
        v16 = (const char *)__p;
      if ((_DWORD)v18 == 33)
        v14 = 230;
      *(_DWORD *)a3 = v15;
      *(_DWORD *)(a3 + 4) = v12;
      *(_QWORD *)(a3 + 8) = v16;
      *(_DWORD *)(a3 + 16) = v14;
      *(_DWORD *)(a3 + 20) = v13;
      return;
    }
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 >= 0x100)
  {
    *(_DWORD *)a3 = 36;
    *(_QWORD *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v17 = 197;
    goto LABEL_38;
  }
  v8 = (char)v7;
  v9 = v6 == 12;
  if ((v6 & 0xFFFFFFFB) != 0)
  {
    if (((char)v7 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    __p = 0;
    v20 = 0;
    v22 = 0;
    v21 = 0;
    LOBYTE(v18) = v8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    sub_2341C74A0(a2, (uint64_t)&v18, v9, a3);
    if (*(_DWORD *)a3)
      goto LABEL_39;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_2341C87F8(a1, (char *)&v18, a3);
    goto LABEL_24;
  }
  v9 = sub_2341C8F38((uint64_t)a1, v7);
  if (v8 < 0)
    goto LABEL_9;
LABEL_6:
  __p = 0;
  v20 = 0;
  v22 = 0;
  v21 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  LOBYTE(v18) = v8;
  *(_OWORD *)a3 = xmmword_250514710;
  *(_QWORD *)(a3 + 16) = 158;
  if ((v9 - 1) <= 1)
  {
    sub_2341C74A0(a2, (uint64_t)&v18, v9, a3);
    goto LABEL_22;
  }
  if (v9 != 5)
  {
    if (v9 == 4)
    {
      LODWORD(v28) = 0;
      v27 = 0;
      v26 = 0uLL;
      sub_234104A50(a2, &v28, (uint64_t)&v26);
      if (!(_DWORD)v26)
      {
        HIDWORD(v18) = 4;
        v24 = v28;
        LODWORD(v26) = 0;
        *((_QWORD *)&v26 + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
        v10 = 120;
        goto LABEL_20;
      }
      goto LABEL_21;
    }
    if (v9 == 3)
    {
      v27 = 0;
      v28 = 0;
      v26 = 0uLL;
      sub_2341047B0(a2, &v28, (uint64_t)&v26);
      if (!(_DWORD)v26)
      {
        HIDWORD(v18) = 3;
        v23 = v28;
        LODWORD(v26) = 0;
        *((_QWORD *)&v26 + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
        v10 = 109;
LABEL_20:
        LODWORD(v27) = v10;
        goto LABEL_21;
      }
      goto LABEL_21;
    }
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v17 = 178;
LABEL_38:
    *(_DWORD *)(a3 + 16) = v17;
    return;
  }
  v27 = 0;
  v28 = 0;
  v26 = 0uLL;
  sub_23410499C(a2, &v28, (uint64_t)&v26);
  if (!(_DWORD)v26)
  {
    HIDWORD(v18) = 5;
    v25 = v28;
    LODWORD(v26) = 0;
    *((_QWORD *)&v26 + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v10 = 131;
    goto LABEL_20;
  }
LABEL_21:
  *(_OWORD *)a3 = v26;
  *(_QWORD *)(a3 + 16) = v27;
LABEL_22:
  if (!*(_DWORD *)a3)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_2341C8B6C(a1, (char *)&v18, a3);
LABEL_24:
    v11 = *(_DWORD *)a3;
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    if (v11)
      return;
    goto LABEL_27;
  }
LABEL_39:
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_2341C74A0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void **v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 __dst;
  uint64_t v11;
  __int128 v12;

  *(_OWORD *)a4 = xmmword_250514728;
  *(_QWORD *)(a4 + 16) = 137;
  if (a3 == 2)
  {
    LODWORD(v8) = 0;
    v11 = 0;
    __dst = 0uLL;
    sub_2341048B0(a1, &v8, (uint64_t)&__dst);
    if (!(_DWORD)__dst)
    {
      *(_DWORD *)(a2 + 4) = 2;
      *(_DWORD *)(a2 + 32) = v8;
      LODWORD(__dst) = 0;
      *((_QWORD *)&__dst + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
      LODWORD(v11) = 98;
    }
    *(_OWORD *)a4 = __dst;
    v7 = v11;
    goto LABEL_11;
  }
  if (a3 == 1)
  {
    v12 = 0uLL;
    v9 = 0;
    v8 = 0uLL;
    sub_2341065FC(a1, &v12, &v8);
    if (!(_DWORD)v8)
    {
      *(_DWORD *)(a2 + 4) = 1;
      sub_2341C8518(&__dst, (void *)v12, *((size_t *)&v12 + 1));
      v6 = (void **)(a2 + 8);
      if (*(char *)(a2 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = __dst;
      *(_QWORD *)(a2 + 24) = v11;
      LODWORD(v8) = 0;
      *((_QWORD *)&v8 + 1) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
      LODWORD(v9) = 87;
    }
    *(_OWORD *)a4 = v8;
    v7 = v9;
LABEL_11:
    *(_QWORD *)(a4 + 16) = v7;
    return;
  }
  *(_DWORD *)a4 = 47;
  *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
  *(_DWORD *)(a4 + 16) = 149;
}

void sub_2341C75F0(std::string *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v8;
  int v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  _DWORD v14[2];
  const char *v15;
  int v16;
  int v17;
  _BYTE v18[64];
  int v19;
  _BYTE v20[16];
  uint64_t v21;

  if (HIDWORD(a3))
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v8 = 241;
    goto LABEL_9;
  }
  sub_234104468((uint64_t)v20);
  sub_234104498((uint64_t)v20, a2, a3);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_2341058CC((uint64_t)v20, (_QWORD *)a4);
  if (*(_DWORD *)a4)
    return;
  if (sub_23410462C((uint64_t)v20) != 21)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v8 = 249;
    goto LABEL_9;
  }
  sub_234104468((uint64_t)v18);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (sub_23410462C((uint64_t)v20) != 21)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v8 = 69;
    goto LABEL_9;
  }
  if (v21 != 256)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v8 = 70;
    goto LABEL_9;
  }
  if (sub_2341046A4((uint64_t)v20))
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v8 = 71;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v8;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_2341065F8((uint64_t)v20, (uint64_t)v18, a4);
  if (!*(_DWORD *)a4)
  {
    if (v19 != 21)
    {
      *(_DWORD *)a4 = 47;
      *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
      v8 = 75;
      goto LABEL_9;
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_2341058CC((uint64_t)v18, (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      sub_2341C7188(a1, (uint64_t)v18, (uint64_t)v14);
      v9 = v14[0];
      v10 = v14[1];
      v11 = v15;
      v12 = v16;
      v13 = v17;
      if (v14[0] == 33)
      {
        v9 = 0;
        v11 = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
        v12 = 259;
      }
      *(_DWORD *)a4 = v9;
      *(_DWORD *)(a4 + 4) = v10;
      *(_QWORD *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 16) = v12;
      *(_DWORD *)(a4 + 20) = v13;
    }
  }
}

void sub_2341C77E4(std::string *a1@<X1>, const void **a2@<X2>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5;
  int v6;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  const void *v16;
  size_t v17;
  char *v18;
  std::string *v19;
  _BYTE v20[24];
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v5 = 8 * ((_BYTE *)a2[1] - (_BYTE *)*a2) - *a3 + 7;
  if (v5 == 7 || 8 * ((_BYTE *)a2[1] - (_BYTE *)*a2) - *a3 >= 0xFFFFFFFFFFFFFFF9)
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v6 = 270;
LABEL_14:
    *(_DWORD *)(a4 + 16) = v6;
    return;
  }
  v10 = v5 >> 3;
  v11 = sub_234114774(v5 >> 3);
  if (!v11)
  {
    *(_DWORD *)a4 = 11;
    *(_QWORD *)(a4 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v6 = 273;
    goto LABEL_14;
  }
  v12 = v11;
  v19 = a1;
  v13 = 0;
  if (v10 <= 1)
    v14 = 1;
  else
    v14 = v10;
  do
  {
    v23 = 0;
    v24 = 0;
    v21 = 0;
    v22 = 0;
    v16 = *a2;
    v15 = a2[1];
    v17 = v15 - (_BYTE *)*a2;
    if (v15 == *a2)
    {
      sub_2341C7978((uint64_t)&v21, a3, &v24, 8, (uint64_t)v20);
    }
    else
    {
      if (v15 - (_BYTE *)*a2 < 0)
        abort();
      v18 = (char *)operator new(v15 - (_BYTE *)*a2);
      v21 = v18;
      v23 = &v18[v17];
      memmove(v18, v16, v17);
      v22 = &v18[v17];
      sub_2341C7978((uint64_t)&v21, a3, &v24, 8, (uint64_t)v20);
      v22 = v18;
      operator delete(v18);
    }
    v12[v13++] = v24;
  }
  while (v14 != v13);
  sub_2341C75F0(v19, (uint64_t)v12, v10, a4);
  j__free(v12);
}

uint64_t sub_2341C7978@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  _DWORD *v7;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t i;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v5 = a4;
  v7 = (_DWORD *)result;
  v24 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v9 = *a2;
  v10 = *a2 + a4;
  if (v10 <= 8 * (*(_QWORD *)(result + 8) - *(_QWORD *)result))
  {
    if (a4)
    {
      v16 = 0;
      for (i = 0; i != a4; ++i)
      {
        if (((*(unsigned __int8 *)(*(_QWORD *)result + ((v9 + i) >> 3)) >> ((v9 + i) & 7)) & 1) != 0)
        {
          v16 |= (1 << i);
          *a3 = v16;
        }
      }
      v10 = *a2 + a4;
    }
    v15 = 0;
    *a2 = v10;
    v14 = 63;
  }
  else
  {
    v11 = sub_234117B80(0x20u, "SetupPayload");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *a2;
      v13 = v7[2] - *v7;
      *(_DWORD *)buf = 67109632;
      v19 = v12;
      v20 = 1024;
      v21 = v5;
      v22 = 1024;
      v23 = v13;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Error parsing QR code. startIndex %u numberOfBitsToLoad %u buf_len %u ", buf, 0x14u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x20u, 1);
    v14 = 50;
    v15 = 47;
  }
  *(_DWORD *)a5 = v15;
  *(_QWORD *)(a5 + 8) = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
  *(_DWORD *)(a5 + 16) = v14;
  return result;
}

void sub_2341C7B24(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t *v3;
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t size;
  const std::string *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string::size_type v28;
  int v29;
  void *v30;
  int64_t v31;
  std::string *v32;
  std::string *v33;
  int64_t v34;
  std::string *v35;
  std::string *v36;
  std::string::size_type v38;
  std::string v40;
  void *__p;
  char *v42;
  char *v43;
  std::string __str;
  char v45;

  memset(&__str, 0, sizeof(__str));
  __p = 0;
  v42 = 0;
  v43 = 0;
  v3 = (unint64_t *)sub_2340FD57C((uint64_t)&v43, 1uLL);
  v5 = (char *)&v3[v4];
  *v3 = 0;
  v6 = v3 + 1;
  v8 = (char *)__p;
  v7 = v42;
  if (v42 != __p)
  {
    do
    {
      v9 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *--v3 = v9;
    }
    while (v7 != v8);
    v7 = (char *)__p;
  }
  __p = v3;
  v42 = (char *)v6;
  v43 = v5;
  if (v7)
    operator delete(v7);
  v10 = 0;
  v42 = (char *)v6;
  while (1)
  {
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
      size = a1->__r_.__value_.__l.__size_;
    if (v10 >= size)
      break;
    v12 = a1;
    if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
      v12 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    v13 = v12->__r_.__value_.__s.__data_[v10++];
    if (v13 == 37)
    {
      if (v6 >= (unint64_t *)v43)
      {
        v14 = ((char *)v6 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          abort();
        v15 = (v43 - (_BYTE *)__p) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v43 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)sub_2340FD57C((uint64_t)&v43, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v14];
        *(_QWORD *)v18 = v10;
        v6 = (unint64_t *)(v18 + 8);
        v20 = (char *)__p;
        v19 = v42;
        if (v42 != __p)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = (char *)__p;
        }
        __p = v18;
        v42 = (char *)v6;
        v43 = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v6++ = v10;
      }
      v42 = (char *)v6;
    }
  }
  v22 = __p;
  v23 = (char *)v6 - (_BYTE *)__p;
  if (v6 != __p)
  {
    v24 = 0;
    v25 = v23 >> 3;
    do
    {
      v26 = v22[v24];
      if (v24 == v25 - 1 || (v27 = v22[v24 + 1]) == 0)
        v28 = -1;
      else
        v28 = v27 + ~v26;
      std::string::basic_string(&v40, a1, v26, v28, (std::allocator<char> *)&v45);
      v29 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
      v30 = (void *)v40.__r_.__value_.__r.__words[0];
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        v31 = v40.__r_.__value_.__l.__size_;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v40;
      else
        v32 = (std::string *)v40.__r_.__value_.__r.__words[0];
      if (v31 >= 3)
      {
        v33 = (std::string *)((char *)v32 + v31);
        v34 = v31;
        v35 = v32;
        do
        {
          v36 = (std::string *)memchr(v35, 77, v34 - 2);
          if (!v36)
            break;
          if (LOWORD(v36->__r_.__value_.__l.__data_) == 21581 && v36->__r_.__value_.__s.__data_[2] == 58)
          {
            if (v36 == v33 || v36 != v32 || (unint64_t)v31 < 4)
              break;
            std::string::operator=(&__str, &v40);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
            goto LABEL_57;
          }
          v35 = (std::string *)((char *)&v36->__r_.__value_.__l.__data_ + 1);
          v34 = (char *)v33 - (char *)v35;
        }
        while ((char *)v33 - (char *)v35 >= 3);
      }
      if (v29 < 0)
        operator delete(v30);
      ++v24;
      v22 = __p;
      v25 = (v42 - (_BYTE *)__p) >> 3;
    }
    while (v24 < v25);
  }
LABEL_57:
  v38 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v38 = __str.__r_.__value_.__l.__size_;
  if (v38)
  {
    std::string::basic_string(a2, &__str, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v40);
  }
  else
  {
    *a2 = __str;
    memset(&__str, 0, sizeof(__str));
  }
  if (__p)
  {
    v42 = (char *)__p;
    operator delete(__p);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_2341C7E48(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string::size_type size;
  const void *v6;
  size_t v7;
  char *v8;
  int v9;
  const void *v10;
  size_t v11;
  char *v12;
  const void *v13;
  size_t v14;
  char *v15;
  const void *v16;
  size_t v17;
  char *v18;
  const void *v19;
  size_t v20;
  char *v21;
  char v22;
  const void *v23;
  size_t v24;
  char *v25;
  const void *v26;
  size_t v27;
  char *v28;
  const void *v29;
  size_t v30;
  char *v31;
  int v32;
  NSObject *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  std::string __p;
  std::string __dst;
  std::string v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint8_t buf[4];
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v62 = 0;
  if (*(char *)(a1 + 23) < 0)
    sub_233C0DAF8(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  sub_2341C7B24(&__dst, &v60);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v60.__r_.__value_.__s + 23))
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      __p = v60;
      goto LABEL_11;
    }
LABEL_17:
    *(_DWORD *)a3 = 47;
    a3[1] = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v9 = 331;
LABEL_18:
    *((_DWORD *)a3 + 4) = v9;
    goto LABEL_56;
  }
  size = v60.__r_.__value_.__l.__size_;
  if (!v60.__r_.__value_.__l.__size_)
    goto LABEL_17;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_233C0DAF8(&__p, v60.__r_.__value_.__l.__data_, size);
LABEL_11:
  sub_2341C5310((uint64_t *)&__p, (unint64_t *)&v63, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_DWORD *)a3)
    goto LABEL_56;
  v61 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v6 = v63;
  v7 = v64 - v63;
  if (v64 == v63)
  {
    sub_2341C7978((uint64_t)&v55, &v62, &v61, 3, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0)
      goto LABEL_68;
    v8 = (char *)operator new(v64 - v63);
    v55 = v8;
    v57 = &v8[v7];
    memmove(v8, v6, v7);
    v56 = &v8[v7];
    sub_2341C7978((uint64_t)&v55, &v62, &v61, 3, (uint64_t)a3);
    v56 = v8;
    operator delete(v8);
  }
  if (*(_DWORD *)a3)
    goto LABEL_56;
  *(_BYTE *)a2 = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v10 = v63;
  v11 = v64 - v63;
  if (v64 == v63)
  {
    sub_2341C7978((uint64_t)&v52, &v62, &v61, 16, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0)
      goto LABEL_68;
    v12 = (char *)operator new(v64 - v63);
    v52 = v12;
    v54 = &v12[v11];
    memmove(v12, v10, v11);
    v53 = &v12[v11];
    sub_2341C7978((uint64_t)&v52, &v62, &v61, 16, (uint64_t)a3);
    v53 = v12;
    operator delete(v12);
  }
  if (*(_DWORD *)a3)
    goto LABEL_56;
  *(_WORD *)(a2 + 2) = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v13 = v63;
  v14 = v64 - v63;
  if (v64 == v63)
  {
    sub_2341C7978((uint64_t)&v49, &v62, &v61, 16, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0)
      goto LABEL_68;
    v15 = (char *)operator new(v64 - v63);
    v49 = v15;
    v51 = &v15[v14];
    memmove(v15, v13, v14);
    v50 = &v15[v14];
    sub_2341C7978((uint64_t)&v49, &v62, &v61, 16, (uint64_t)a3);
    operator delete(v15);
  }
  if (*(_DWORD *)a3)
    goto LABEL_56;
  *(_WORD *)(a2 + 4) = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v16 = v63;
  v17 = v64 - v63;
  if (v64 == v63)
  {
    sub_2341C7978((uint64_t)&v46, &v62, &v61, 2, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0)
      goto LABEL_68;
    v18 = (char *)operator new(v64 - v63);
    v46 = v18;
    v48 = &v18[v17];
    memmove(v18, v16, v17);
    v47 = &v18[v17];
    sub_2341C7978((uint64_t)&v46, &v62, &v61, 2, (uint64_t)a3);
    operator delete(v18);
  }
  if (*(_DWORD *)a3)
    goto LABEL_56;
  *(_BYTE *)(a2 + 6) = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v19 = v63;
  v20 = v64 - v63;
  if (v64 == v63)
  {
    sub_2341C7978((uint64_t)&v43, &v62, &v61, 8, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0)
      goto LABEL_68;
    v21 = (char *)operator new(v64 - v63);
    v43 = v21;
    v45 = &v21[v20];
    memmove(v21, v19, v20);
    v44 = &v21[v20];
    sub_2341C7978((uint64_t)&v43, &v62, &v61, 8, (uint64_t)a3);
    operator delete(v21);
  }
  if (*(_DWORD *)a3)
    goto LABEL_56;
  v22 = v61;
  *(_BYTE *)(a2 + 7) = 1;
  *(_BYTE *)(a2 + 8) = v22;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v23 = v63;
  v24 = v64 - v63;
  if (v64 == v63)
  {
    sub_2341C7978((uint64_t)&v40, &v62, &v61, 12, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0)
      goto LABEL_68;
    v25 = (char *)operator new(v64 - v63);
    v40 = v25;
    v42 = &v25[v24];
    memmove(v25, v23, v24);
    v41 = &v25[v24];
    sub_2341C7978((uint64_t)&v40, &v62, &v61, 12, (uint64_t)a3);
    operator delete(v25);
  }
  if (*(_DWORD *)a3)
    goto LABEL_56;
  sub_233D52960(a2 + 10, (unsigned __int16)v61);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v26 = v63;
  v27 = v64 - v63;
  if (v64 == v63)
  {
    sub_2341C7978((uint64_t)&v37, &v62, &v61, 27, (uint64_t)a3);
  }
  else
  {
    if (v64 - v63 < 0)
      goto LABEL_68;
    v28 = (char *)operator new(v64 - v63);
    v37 = v28;
    v39 = &v28[v27];
    memmove(v28, v26, v27);
    v38 = &v28[v27];
    sub_2341C7978((uint64_t)&v37, &v62, &v61, 27, (uint64_t)a3);
    operator delete(v28);
  }
  if (*(_DWORD *)a3)
    goto LABEL_56;
  *(_DWORD *)(a2 + 16) = v61;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v29 = v63;
  v30 = v64 - v63;
  if (v64 == v63)
  {
    sub_2341C7978((uint64_t)&v34, &v62, &v61, 4, (uint64_t)a3);
    goto LABEL_55;
  }
  if (v64 - v63 < 0)
LABEL_68:
    abort();
  v31 = (char *)operator new(v64 - v63);
  v34 = v31;
  v36 = &v31[v30];
  memmove(v31, v29, v30);
  v35 = &v31[v30];
  sub_2341C7978((uint64_t)&v34, &v62, &v61, 4, (uint64_t)a3);
  operator delete(v31);
LABEL_55:
  if (*(_DWORD *)a3)
    goto LABEL_56;
  v32 = v61;
  if (v61)
  {
    v33 = sub_234117B80(0x20u, "SetupPayload");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v67 = v32;
      _os_log_impl(&dword_233BF3000, v33, OS_LOG_TYPE_ERROR, "Payload padding bits are not all 0: 0x%x", buf, 8u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0x20u, 1);
    *(_DWORD *)a3 = 47;
    a3[1] = "src/setup_payload/QRCodeSetupPayloadParser.cpp";
    v9 = 370;
    goto LABEL_18;
  }
  sub_2341C77E4((std::string *)a2, (const void **)&v63, &v62, (uint64_t)a3);
LABEL_56:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
}

_QWORD *sub_2341C8518(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t sub_2341C85BC(unsigned __int8 *a1, int a2)
{
  _BYTE *v4;

  if (*a1 <= 7u && a1[6] <= 2u && !a1[12] && (v4 = a1 + 7, a1[7]) && (a2 || *sub_2341C70DC(v4) <= 7u))
    return sub_2341C862C((uint64_t)a1);
  else
    return 0;
}

uint64_t sub_2341C862C(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)a1)
    return 0;
  result = sub_2341C8690(*(_DWORD *)(a1 + 16));
  if ((_DWORD)result)
  {
    if (*(_WORD *)(a1 + 2))
    {
      if (*(unsigned __int16 *)(a1 + 2) > 0xFFF4u)
        return 0;
      return *(_WORD *)(a1 + 4) != 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL sub_2341C8690(unsigned int a1)
{
  int32x4_t v1;
  unsigned __int8 v2;
  BOOL v4;

  v1 = vdupq_n_s32(a1);
  v2 = vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v1, (int32x4_t)xmmword_2342EDB40), (int16x8_t)vceqq_s32(v1, (int32x4_t)xmmword_2342EDB50))));
  v4 = a1 == 87654321 || a1 - 99999999 < 0xFA0A1F02;
  return (v2 & 1 | (a1 == 12345678) | v4) == 0;
}

BOOL sub_2341C8700(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1)
      && *((unsigned __int16 *)a1 + 2) == *((unsigned __int16 *)a2 + 2)
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && (!a1[7] || a1[8] == a2[8])
      && a1[12] == a2[12]
      && *((unsigned __int16 *)a1 + 5) == *((unsigned __int16 *)a2 + 5)
      && *((_DWORD *)a1 + 4) == *((_DWORD *)a2 + 4);
}

void sub_2341C87A0(std::string *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v4[4];
  int v5;
  void *__p[2];
  uint64_t v7;
  int v8;

  v4[0] = a2;
  v5 = 1;
  v8 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v7 = *(_QWORD *)(a3 + 16);
  *(_BYTE *)(a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
  sub_2341C87F8(a1, v4, a4);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

std::string *sub_2341C87F8@<X0>(std::string *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  uint64_t **v7;
  char *v8;

  if (*a2 < 0)
  {
    v8 = a2;
    v7 = sub_2341C96B0((uint64_t **)&result[1], (unsigned __int8 *)a2, (uint64_t)&unk_2342A9433, &v8);
    v7[5] = *(uint64_t **)a2;
    result = std::string::operator=((std::string *)v7 + 2, (const std::string *)(a2 + 8));
    v5 = 0;
    *((_DWORD *)v7 + 18) = *((_DWORD *)a2 + 8);
    v4 = 215;
  }
  else
  {
    v4 = 212;
    v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void sub_2341C8894(std::string *a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v4[4];
  int v5;
  void *__p;
  uint64_t v7;
  uint64_t v8;
  int v9;

  __p = 0;
  v7 = 0;
  v8 = 0;
  v4[0] = a2;
  v5 = 2;
  v9 = a3;
  sub_2341C87F8(a1, v4, a4);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
}

uint64_t sub_2341C88DC@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(result + 24);
  v3 = (_QWORD *)(result + 32);
  if (v2 != (_QWORD *)(result + 32))
  {
    do
    {
      result = sub_2341C895C(a2, (uint64_t)(v2 + 5));
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t sub_2341C895C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    v18 = a1 + 2;
    if (v12)
      v13 = (char *)sub_2341C9540((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[40 * v9];
    v17 = &v13[40 * v12];
    sub_2341C9450(v5, (uint64_t)v15, a2);
    v16 = v15 + 40;
    sub_2341C94AC(a1, &v14);
    v8 = a1[1];
    result = sub_2341C9584((uint64_t)&v14);
  }
  else
  {
    result = (uint64_t)sub_2341C9450((uint64_t)(a1 + 2), v6, a2);
    v8 = v6 + 40;
  }
  a1[1] = v8;
  return result;
}

uint64_t sub_2341C8A70@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  int v11;
  unsigned __int8 v12;

  v12 = a2;
  v5 = result + 32;
  v4 = *(_QWORD *)(result + 32);
  if (!v4)
    goto LABEL_12;
  result += 24;
  v6 = v5;
  do
  {
    v7 = *(unsigned __int8 *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v5 && *(unsigned __int8 *)(v6 + 32) <= a2)
  {
    result = sub_2341C960C(result, &v12);
    v11 = 0;
    v10 = 157;
  }
  else
  {
LABEL_12:
    v10 = 154;
    v11 = 16;
  }
  *(_DWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

void sub_2341C8B0C(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3[4];
  int v4;
  void *__p[2];
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v3[0] = 0;
  v4 = 1;
  v7 = 0;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  sub_2341C8B6C(a1, v3, a3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

std::string *sub_2341C8B6C@<X0>(std::string *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v5;
  int v6;
  __int128 v7;
  int v8;
  char *v9;

  if (*a2 < 0)
  {
    v8 = 220;
    v6 = 47;
  }
  else
  {
    v9 = a2;
    v5 = sub_2341C977C((uint64_t **)&result[2], (unsigned __int8 *)a2, (uint64_t)&unk_2342A9433, &v9);
    v5[5] = *(uint64_t **)a2;
    result = std::string::operator=((std::string *)v5 + 2, (const std::string *)(a2 + 8));
    v6 = 0;
    *((_DWORD *)v5 + 18) = *((_DWORD *)a2 + 8);
    v7 = *(_OWORD *)(a2 + 40);
    v5[12] = (uint64_t *)*((_QWORD *)a2 + 7);
    *((_OWORD *)v5 + 5) = v7;
    v8 = 223;
  }
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void sub_2341C8C18(std::string *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v3[4];
  int v4;
  void *__p;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  __p = 0;
  v6 = 0;
  v8 = 0;
  v7 = 0;
  v3[0] = 0;
  v4 = 4;
  v9 = 0;
  v10 = a2;
  v11 = 0;
  sub_2341C8B6C(a1, v3, a3);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
}

void sub_2341C8C6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  std::string v7;
  _BYTE v8[4];
  int v9;
  std::string __p;
  int v11;
  uint64_t v12;
  unint64_t __val;
  uint64_t v14;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  __val = 0;
  v14 = 0;
  v12 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  sub_2341C8D5C(a1, 0, (uint64_t)v8, a3);
  if (*(_DWORD *)a3)
    goto LABEL_11;
  if (v9 == 4)
  {
    std::to_string(&v7, __val);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v5 = 0;
    *(std::string *)a2 = v7;
  }
  else
  {
    if (v9 != 1)
    {
      v6 = 195;
      v5 = 47;
      goto LABEL_10;
    }
    std::string::operator=((std::string *)a2, &__p);
    v5 = 0;
  }
  v6 = 182;
LABEL_10:
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 20) = 0;
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

std::string *sub_2341C8D5C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *result;
  std::string *v6;
  std::string *v7;
  std::string *v9;
  unsigned int v10;
  BOOL v11;
  std::string **p_size;
  int v13;
  int v14;
  __int128 v15;

  v7 = *(std::string **)(a1 + 56);
  result = (std::string *)(a1 + 56);
  v6 = v7;
  if (!v7)
    goto LABEL_12;
  v9 = result;
  do
  {
    v10 = v6[1].__r_.__value_.__s.__data_[8];
    v11 = v10 >= a2;
    if (v10 >= a2)
      p_size = (std::string **)v6;
    else
      p_size = (std::string **)&v6->__r_.__value_.__l.__size_;
    if (v11)
      v9 = v6;
    v6 = *p_size;
  }
  while (*p_size);
  if (v9 != result && v9[1].__r_.__value_.__s.__data_[8] <= a2)
  {
    *(_QWORD *)a3 = *((_QWORD *)&v9[1].__r_.__value_.__l + 2);
    result = std::string::operator=((std::string *)(a3 + 8), v9 + 2);
    v14 = 0;
    *(_DWORD *)(a3 + 32) = v9[3].__r_.__value_.__l.__data_;
    v15 = *(_OWORD *)&v9[3].__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 56) = v9[4].__r_.__value_.__l.__data_;
    *(_OWORD *)(a3 + 40) = v15;
    v13 = 240;
  }
  else
  {
LABEL_12:
    v13 = 238;
    v14 = 16;
  }
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_2341C8E14@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;

  v4 = result + 56;
  v3 = *(_QWORD **)(result + 56);
  if (!v3)
    goto LABEL_6;
  result += 48;
  do
  {
    v5 = v3;
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  if (v5 == (_QWORD *)v4 || *((_BYTE *)v5 + 32))
  {
LABEL_6:
    v6 = 204;
    v7 = 16;
  }
  else
  {
    result = sub_2341C960C(result, byte_2342EDB60);
    v7 = 0;
    v6 = 207;
  }
  *(_DWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

std::string *sub_2341C8E90@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *result;
  std::string *v6;
  std::string *v7;
  std::string *v9;
  unsigned int v10;
  BOOL v11;
  std::string **p_size;
  int v13;
  int v14;

  v7 = *(std::string **)(a1 + 32);
  result = (std::string *)(a1 + 32);
  v6 = v7;
  if (!v7)
    goto LABEL_12;
  v9 = result;
  do
  {
    v10 = v6[1].__r_.__value_.__s.__data_[8];
    v11 = v10 >= a2;
    if (v10 >= a2)
      p_size = (std::string **)v6;
    else
      p_size = (std::string **)&v6->__r_.__value_.__l.__size_;
    if (v11)
      v9 = v6;
    v6 = *p_size;
  }
  while (*p_size);
  if (v9 != result && v9[1].__r_.__value_.__s.__data_[8] <= a2)
  {
    *(_QWORD *)a3 = *((_QWORD *)&v9[1].__r_.__value_.__l + 2);
    result = std::string::operator=((std::string *)(a3 + 8), v9 + 2);
    v14 = 0;
    *(_DWORD *)(a3 + 32) = v9[3].__r_.__value_.__l.__data_;
    v13 = 232;
  }
  else
  {
LABEL_12:
    v13 = 229;
    v14 = 16;
  }
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = "src/setup_payload/SetupPayload.cpp";
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_2341C8F38(uint64_t a1, int a2)
{
  if ((a2 & 0x80u) == 0)
    return 4 * (a2 == 0);
  else
    return 2;
}

void sub_2341C8F58(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 48);
  v3 = (_QWORD *)(a1 + 56);
  if (v2 != (_QWORD *)(a1 + 56))
  {
    do
    {
      sub_2341C8FD8(a2, (uint64_t)(v2 + 5));
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
}

void sub_2341C8FD8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v8 = (uint64_t)(v6 - *a1) >> 6;
    if ((unint64_t)(v8 + 1) >> 58)
      abort();
    v9 = v4 - *a1;
    v10 = v9 >> 5;
    if (v9 >> 5 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v17 = a1 + 2;
    if (v11)
      v12 = (char *)sub_2341C995C((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v13 = v12;
    v14 = &v12[64 * v8];
    v16 = &v12[64 * v11];
    sub_2341C984C(v5, (uint64_t)v14, a2);
    v15 = v14 + 64;
    sub_2341C98B8(a1, &v13);
    v7 = a1[1];
    sub_2341C9990((uint64_t)&v13);
  }
  else
  {
    sub_2341C984C((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 64;
  }
  a1[1] = v7;
}

BOOL sub_2341C90CC(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  void *__p[2];
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v40 = 0uLL;
  v41 = 0;
  v38 = 0uLL;
  v39 = 0;
  if (!sub_2341C8700((unsigned __int8 *)a1, a2))
    goto LABEL_58;
  sub_2341C88DC((uint64_t)a2, (uint64_t *)__p);
  sub_2341C9A18((uint64_t *)&v40);
  v40 = *(_OWORD *)__p;
  v41 = v29;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  v35 = __p;
  sub_234045EC0(&v35);
  v4 = (unsigned __int8 *)*((_QWORD *)&v40 + 1);
  v5 = (unsigned __int8 *)v40;
  if (*(_QWORD *)(a1 + 40) != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 3))
    goto LABEL_58;
  if ((_QWORD)v40 != *((_QWORD *)&v40 + 1))
  {
    while (1)
    {
      __p[1] = 0;
      v29 = 0;
      v31 = 0;
      v30 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      sub_2341C8E90(a1, *v5, (uint64_t)__p, (uint64_t)&v35);
      if ((_DWORD)v35)
        break;
      v6 = HIBYTE(v30);
      v7 = SHIBYTE(v30);
      if (*((_DWORD *)v5 + 1) != HIDWORD(__p[0]))
        goto LABEL_56;
      v8 = v5[31];
      if ((v8 & 0x80u) == 0)
        v9 = v5[31];
      else
        v9 = *((_QWORD *)v5 + 2);
      if (v30 < 0)
        v6 = v29;
      if (v9 != v6)
        goto LABEL_56;
      v10 = __p[1];
      if (v30 >= 0)
        v11 = &__p[1];
      else
        v11 = (void **)__p[1];
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*((const void **)v5 + 1), v11, *((_QWORD *)v5 + 2)))
          goto LABEL_56;
      }
      else if (v5[31])
      {
        v12 = 0;
        while (v5[v12 + 8] == *((unsigned __int8 *)v11 + v12))
        {
          if (v8 == ++v12)
            goto LABEL_22;
        }
LABEL_56:
        if ((v7 & 0x80) != 0)
          goto LABEL_57;
        goto LABEL_58;
      }
LABEL_22:
      v13 = *((_DWORD *)v5 + 8);
      v14 = v31;
      if (v7 < 0)
        operator delete(v10);
      if (v13 != v14)
        goto LABEL_58;
      v5 += 40;
      if (v5 == v4)
        goto LABEL_26;
    }
    LOBYTE(v7) = HIBYTE(v30);
    goto LABEL_56;
  }
LABEL_26:
  sub_2341C8F58((uint64_t)a2, (uint64_t *)__p);
  sub_2341C9A50((uint64_t *)&v38);
  v38 = *(_OWORD *)__p;
  v39 = v29;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  v35 = __p;
  sub_2341C70FC(&v35);
  v15 = (unsigned __int8 *)*((_QWORD *)&v38 + 1);
  v16 = (unsigned __int8 *)v38;
  if (*(_QWORD *)(a1 + 64) != (uint64_t)(*((_QWORD *)&v38 + 1) - v38) >> 6)
    goto LABEL_58;
  if ((_QWORD)v38 == *((_QWORD *)&v38 + 1))
  {
    v26 = 1;
    goto LABEL_59;
  }
  while (1)
  {
    __p[1] = 0;
    v29 = 0;
    v31 = 0;
    v30 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    sub_2341C8D5C(a1, *v16, (uint64_t)__p, (uint64_t)&v35);
    if ((_DWORD)v35)
    {
      LOBYTE(v18) = HIBYTE(v30);
      goto LABEL_61;
    }
    v17 = HIBYTE(v30);
    v18 = SHIBYTE(v30);
    if (*((_DWORD *)v16 + 1) != HIDWORD(__p[0]))
      goto LABEL_61;
    v19 = v16[31];
    if ((v19 & 0x80u) == 0)
      v20 = v16[31];
    else
      v20 = *((_QWORD *)v16 + 2);
    if (v30 < 0)
      v17 = v29;
    if (v20 != v17)
      goto LABEL_61;
    v21 = __p[1];
    v22 = v30 >= 0 ? &__p[1] : (void **)__p[1];
    if ((v19 & 0x80) == 0)
      break;
    if (memcmp(*((const void **)v16 + 1), v22, *((_QWORD *)v16 + 2)))
      goto LABEL_61;
LABEL_46:
    if (*((_DWORD *)v16 + 8) != v31 || *((_QWORD *)v16 + 5) != v32 || *((_QWORD *)v16 + 6) != v33)
      goto LABEL_61;
    v24 = *((_QWORD *)v16 + 7);
    v25 = v34;
    v26 = v24 == v34;
    if (v18 < 0)
      operator delete(v21);
    if (v24 == v25)
    {
      v16 += 64;
      if (v16 != v15)
        continue;
    }
    goto LABEL_59;
  }
  if (!v16[31])
    goto LABEL_46;
  v23 = 0;
  while (v16[v23 + 8] == *((unsigned __int8 *)v22 + v23))
  {
    if (v19 == ++v23)
      goto LABEL_46;
  }
LABEL_61:
  if ((v18 & 0x80) != 0)
LABEL_57:
    operator delete(__p[1]);
LABEL_58:
  v26 = 0;
LABEL_59:
  __p[0] = &v38;
  sub_2341C70FC((void ***)__p);
  __p[0] = &v40;
  sub_234045EC0((void ***)__p);
  return v26;
}

_BYTE *sub_2341C9450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;
  __int128 v6;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  result = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    result = sub_233C0DAF8(result, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)result = v6;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  return result;
}

uint64_t *sub_2341C94AC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      v8 = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_OWORD *)(v6 - 32) = v8;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *sub_2341C9540(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_233CB8554();
  return operator new(40 * a2);
}

uint64_t sub_2341C9584(uint64_t a1)
{
  sub_2341C95B8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2341C95B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_2341C960C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(unsigned __int8 *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int8 *)(v4 + 32))
    return 0;
  sub_2341C9670((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_2341C9670(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_234100814(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t **sub_2341C96B0(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, char **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x50uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 9) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_233C0DA3C(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_2341C977C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, char **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x68uLL);
    v11[32] = **a4;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_233C0DA3C(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

__n128 sub_2341C984C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_233C0DAF8(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  result = *(__n128 *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t *sub_2341C98B8(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      v8 = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v8;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      v9 = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_OWORD *)(v6 - 24) = v9;
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *sub_2341C995C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_233CB8554();
  return operator new(a2 << 6);
}

uint64_t sub_2341C9990(uint64_t a1)
{
  sub_2341C99C4(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2341C99C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 64;
      *(_QWORD *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 33) < 0)
      {
        operator delete(*(void **)(v2 - 56));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_2341C9A18(uint64_t *a1)
{
  if (*a1)
  {
    sub_234045F00(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_2341C9A50(uint64_t *a1)
{
  if (*a1)
  {
    sub_2341C713C(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

double sub_2341C9A88(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 1) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_2341C9AA0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1 + 8);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), a1 + 24);
  }
  *v3 = 0;
  v3[1] = 0;
  sub_23413A7A4(a1 + 40, 16);
  sub_23413A7A4(a1 + 24, 16);
  sub_23413A7A4(a1 + 8, 16);
  return a1;
}

uint64_t sub_2341C9B1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  int v8;
  char v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  if (*(_BYTE *)(result + 1))
  {
    *(_DWORD *)a7 = 3;
    *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    v8 = 71;
LABEL_3:
    *(_DWORD *)(a7 + 16) = v8;
    return result;
  }
  v9 = a6;
  v11 = result;
  v12 = "SessionKeysg/gcc";
  if (a5 == 1)
    v12 = "SessionResumptionKeysSessionKeysg/gcc";
  v13 = 11;
  if (a5 == 1)
    v13 = 21;
  v16[0] = v12;
  v16[1] = v13;
  if (a6)
    v14 = result + 24;
  else
    v14 = result + 8;
  if (a6)
    v15 = result + 8;
  else
    v15 = result + 24;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a3, a4, v16, v14, v15, result + 40);
  if (!*(_DWORD *)a7)
  {
    *(_BYTE *)(v11 + 1) = 1;
    *(_BYTE *)v11 = v9;
    *(_QWORD *)(v11 + 56) = a2;
    *(_DWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    v8 = 90;
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_2341C9C18@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  int v8;
  char v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  if (*(_BYTE *)(result + 1))
  {
    *(_DWORD *)a7 = 3;
    *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    v8 = 96;
LABEL_3:
    *(_DWORD *)(a7 + 16) = v8;
    return result;
  }
  v9 = a6;
  v11 = result;
  v12 = "SessionKeysg/gcc";
  if (a5 == 1)
    v12 = "SessionResumptionKeysSessionKeysg/gcc";
  v13 = 11;
  if (a5 == 1)
    v13 = 21;
  v16[0] = v12;
  v16[1] = v13;
  if (a6)
    v14 = result + 24;
  else
    v14 = result + 8;
  if (a6)
    v15 = result + 8;
  else
    v15 = result + 24;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3, a4, v16, v14, v15, result + 40);
  if (!*(_DWORD *)a7)
  {
    *(_BYTE *)(v11 + 1) = 1;
    *(_BYTE *)v11 = v9;
    *(_QWORD *)(v11 + 56) = a2;
    *(_DWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    v8 = 115;
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_2341C9D14@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  _QWORD v14[2];
  _BYTE v15[32];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 1))
  {
    *(_DWORD *)a8 = 3;
    *(_QWORD *)(a8 + 8) = "src/transport/CryptoContext.cpp";
    *(_DWORD *)(a8 + 16) = 123;
  }
  else
  {
    v13 = result;
    v16 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    *(_QWORD *)a8 = 0;
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a3 + 32))(a3, a4, v15);
    if (!*(_DWORD *)a8)
    {
      v14[0] = v15;
      v14[1] = v16;
      sub_2341C9B1C(v13, a2, (uint64_t)v14, a5, a6, a7, a8);
    }
    return sub_23413A7A4(v15, 32);
  }
  return result;
}

_QWORD *sub_2341C9E24@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  int v9;
  uint64_t v10;
  __int128 v11;

  v10 = a1;
  v11 = xmmword_2342EDB70;
  if (!a1)
    *(_QWORD *)&v11 = 0;
  sub_23411512C(&v10, a2);
  sub_234115150(&v10, a3, 4);
  result = sub_234115150(&v10, a4, 8);
  if ((unint64_t)v11 >= *((_QWORD *)&v11 + 1))
    v9 = 0;
  else
    v9 = 11;
  *(_DWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = "src/transport/CryptoContext.cpp";
  *(_DWORD *)(a5 + 16) = 165;
  return result;
}

_QWORD *sub_2341C9EC0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void *v5;
  _QWORD *result;
  int v7;
  uint64_t v8;
  __int128 v9;

  v8 = a1;
  v9 = xmmword_2342EDB70;
  if (!a1)
    *(_QWORD *)&v9 = 0;
  v5 = (const void *)(a3 + 5);
  sub_2341151C0(&v8, a2, 2);
  result = sub_2341150D8(&v8, v5, 0xBuLL);
  if ((unint64_t)v9 >= *((_QWORD *)&v9 + 1))
    v7 = 0;
  else
    v7 = 11;
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = "src/transport/CryptoContext.cpp";
  *(_DWORD *)(a4 + 16) = 175;
  return result;
}

uint64_t sub_2341C9F50@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v8;
  uint64_t result;
  int v10;
  int v11;
  unsigned __int16 v12;

  v8 = *a3;
  result = sub_2341F83C4(a1);
  if (v8 >= result)
  {
    v12 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    result = (uint64_t)sub_2341F8ABC(a1, a2, *a3, &v12, (uint64_t)a4);
    if (*(_DWORD *)a4)
      return result;
    if (*a3 >= v12)
    {
      v11 = 0;
      *a3 = v12;
      v10 = 191;
    }
    else
    {
      v10 = 187;
      v11 = 47;
    }
    *(_DWORD *)a4 = v11;
    a4[1] = "src/transport/CryptoContext.cpp";
  }
  else
  {
    *(_DWORD *)a4 = 47;
    a4[1] = "src/transport/CryptoContext.cpp";
    v10 = 180;
  }
  *((_DWORD *)a4 + 4) = v10;
  return result;
}

void sub_2341CA024(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  BOOL v9;
  _BOOL4 v10;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  unsigned __int16 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v9 = (*(unsigned __int16 *)(a6 + 44) | *(unsigned __int8 *)(a6 + 46)) == 0;
  v10 = (*(unsigned __int16 *)(a6 + 44) | *(unsigned __int8 *)(a6 + 46)) != 0;
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        v26 = 128;
        *a8 = 0;
        a8[1] = 0;
        a8[2] = 0;
        sub_2341C9F50((_BYTE *)a6, (uint64_t)v28, &v26, a8);
        if (*(_DWORD *)a8)
          return;
        v17 = 16 * v10;
        if (*(_QWORD *)(a1 + 64))
        {
          sub_233BF7114(v25, (uint64_t)a2, a3);
          sub_233CAF22C(v24, (uint64_t)a4, a3);
          v23[0] = &v27;
          v23[1] = v17;
          a8[1] = 0;
          a8[2] = 0;
          *a8 = 0;
          v18 = *(_QWORD *)(a1 + 64);
          v22[0] = v28;
          v22[1] = v26;
          v21[0] = a5;
          v21[1] = 13;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v18 + 24))(v18, v25, v22, v21, v23, v24);
        }
        else
        {
          if (!*(_BYTE *)(a1 + 1))
          {
            v19 = 222;
            v20 = 59;
LABEL_17:
            *(_DWORD *)a8 = v20;
            a8[1] = "src/transport/CryptoContext.cpp";
            goto LABEL_18;
          }
          *a8 = 0;
          a8[1] = 0;
          a8[2] = 0;
          sub_234138F5C(a2, a3, a1 + 8, a5, 0xDuLL, a4, (uint64_t)a8, (char *)&v27, v17);
        }
        if (*(_DWORD *)a8)
          return;
        v20 = 0;
        if (!v9)
          *a7 = v27;
        v19 = 229;
        goto LABEL_17;
      }
      *(_DWORD *)a8 = 47;
      a8[1] = "src/transport/CryptoContext.cpp";
      v19 = 204;
    }
    else
    {
      *(_DWORD *)a8 = 47;
      a8[1] = "src/transport/CryptoContext.cpp";
      v19 = 203;
    }
  }
  else
  {
    *(_DWORD *)a8 = 47;
    a8[1] = "src/transport/CryptoContext.cpp";
    v19 = 202;
  }
LABEL_18:
  *((_DWORD *)a8 + 4) = v19;
}

void sub_2341CA24C(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _BOOL4 v9;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[2];
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  unsigned __int16 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v9 = (*(unsigned __int16 *)(a6 + 44) | *(unsigned __int8 *)(a6 + 46)) != 0;
  v27 = 128;
  if (!a2)
  {
    v18 = 240;
LABEL_10:
    v19 = 47;
LABEL_11:
    *(_DWORD *)a8 = v19;
    *(_QWORD *)(a8 + 8) = "src/transport/CryptoContext.cpp";
    *(_DWORD *)(a8 + 16) = v18;
    return;
  }
  if (!a3)
  {
    v18 = 241;
    goto LABEL_10;
  }
  if (!a4)
  {
    v18 = 242;
    goto LABEL_10;
  }
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  sub_2341C9F50((_BYTE *)a6, (uint64_t)v28, &v27, (_QWORD *)a8);
  if (*(_DWORD *)a8)
    return;
  v16 = 16 * v9;
  if (*(_QWORD *)(a1 + 64))
  {
    sub_233BF7114(v26, (uint64_t)a2, a3);
    sub_233CAF22C(v25, (uint64_t)a4, a3);
    sub_233BF7114(v24, a7, v16);
    v22 = 0uLL;
    v23 = 0;
    v17 = *(_QWORD *)(a1 + 64);
    v21[0] = v28;
    v21[1] = v27;
    v20[0] = a5;
    v20[1] = 13;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v17 + 32))(&v22, v17, v26, v21, v20, v24, v25);
    *(_OWORD *)a8 = v22;
    *(_QWORD *)(a8 + 16) = v23;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1))
    {
      v18 = 257;
      v19 = 59;
      goto LABEL_11;
    }
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    sub_2341391E0(a2, a3, a7, v16, a1 + 24, a5, a8, 13, a4);
  }
  if (!*(_DWORD *)a8)
  {
    v19 = 0;
    v18 = 261;
    goto LABEL_11;
  }
}

uint64_t sub_2341CA444@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v13;
  int v14;
  _QWORD v15[3];
  _QWORD v16[2];
  _QWORD v17[2];
  _BYTE v18[13];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        v10 = result;
        if (*(_QWORD *)(result + 64))
        {
          sub_233BF7114(v17, a2, a3);
          sub_233CAF22C(v16, a4, a3);
          sub_2341C9EC0((uint64_t)v18, *(unsigned __int16 *)(a5 + 44), a6, (uint64_t)v15);
          v13 = *(_QWORD *)(v10 + 64);
          v15[0] = v18;
          v15[1] = 13;
          return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v13 + 40))(v13, v17, v15, v16);
        }
        *(_DWORD *)a7 = 59;
        *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
        v14 = 272;
      }
      else
      {
        *(_DWORD *)a7 = 47;
        *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
        v14 = 269;
      }
    }
    else
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
      v14 = 268;
    }
  }
  else
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    v14 = 267;
  }
  *(_DWORD *)(a7 + 16) = v14;
  return result;
}

uint64_t sub_2341CA59C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v13;
  int v14;
  _QWORD v15[3];
  _QWORD v16[2];
  _QWORD v17[2];
  _BYTE v18[13];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        v10 = result;
        if (*(_QWORD *)(result + 64))
        {
          sub_233BF7114(v17, a2, a3);
          sub_233CAF22C(v16, a4, a3);
          sub_2341C9EC0((uint64_t)v18, *(unsigned __int16 *)(a5 + 44), a6, (uint64_t)v15);
          v13 = *(_QWORD *)(v10 + 64);
          v15[0] = v18;
          v15[1] = 13;
          return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v17, v15, v16);
        }
        *(_DWORD *)a7 = 59;
        *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
        v14 = 290;
      }
      else
      {
        *(_DWORD *)a7 = 47;
        *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
        v14 = 287;
      }
    }
    else
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
      v14 = 286;
    }
  }
  else
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/transport/CryptoContext.cpp";
    v14 = 285;
  }
  *(_DWORD *)(a7 + 16) = v14;
  return result;
}

uint64_t sub_2341CA6F4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = 36;
  LODWORD(v7) = 47;
  if (a2 && a3)
  {
    v8 = result + 496;
    v9 = 16;
    while (1)
    {
      if (!*(_BYTE *)(v8 - 496))
      {
        *(_BYTE *)(v8 - 496) = a2;
        LODWORD(v7) = 0;
        if (a4)
        {
          *(_QWORD *)(v8 - 8) = a3;
          *a5 = v8;
          v10 = (_BYTE *)(v8 - 495);
        }
        else
        {
          *(_QWORD *)(v8 - 488) = a3;
          *a5 = v8 - 480;
          v10 = (_BYTE *)(v8 - 494);
        }
        ++*v10;
        v6 = 58;
        goto LABEL_21;
      }
      if (*(unsigned __int8 *)(v8 - 496) == a2)
        break;
      v8 += 552;
      if (!--v9)
      {
        v6 = 111;
        LODWORD(v7) = 9;
        goto LABEL_21;
      }
    }
    v11 = 0;
    if (a4)
    {
      while (1)
      {
        v12 = v8 + v11;
        v7 = *(_QWORD *)(v8 + v11 - 8);
        if (!v7)
        {
          *(_QWORD *)(v12 - 8) = a3;
          *a5 = v12;
          ++*(_BYTE *)(v8 - 495);
          v6 = 74;
          goto LABEL_21;
        }
        if (v7 == a3)
          break;
        v11 += 32;
        v6 = 106;
        LODWORD(v7) = 9;
        if (v11 == 64)
          goto LABEL_21;
      }
      LODWORD(v7) = 0;
      *a5 = v8 + v11;
      v6 = 80;
    }
    else
    {
      while (1)
      {
        v13 = (uint64_t *)(v8 + v11 - 488);
        v7 = *v13;
        if (!*v13)
        {
          *v13 = a3;
          *a5 = v8 + v11 - 480;
          ++*(_BYTE *)(v8 - 494);
          v6 = 95;
          goto LABEL_21;
        }
        if (v7 == a3)
          break;
        v11 += 32;
        v6 = 106;
        LODWORD(v7) = 9;
        if (v11 == 480)
          goto LABEL_21;
      }
      LODWORD(v7) = 0;
      *a5 = v8 + v11 - 480;
      v6 = 101;
    }
  }
LABEL_21:
  *(_DWORD *)a6 = v7;
  *(_QWORD *)(a6 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
  *(_DWORD *)(a6 + 16) = v6;
  return result;
}

void sub_2341CA864(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;

  if (!a2 || !a3)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
    *(_DWORD *)(a5 + 16) = 122;
    return;
  }
  v7 = 0;
  v8 = (unsigned __int8 *)a1;
  while (*v8 != a2)
  {
    ++v7;
    v8 += 552;
    if (v7 == 16)
      goto LABEL_17;
  }
  if (a4)
  {
    if (sub_2341CA974(a1, (_QWORD *)v8 + 61, a3, 2u))
    {
      --v8[1];
      v9 = 135;
      goto LABEL_13;
    }
LABEL_17:
    v10 = 216;
    v9 = 117;
    goto LABEL_18;
  }
  if (!sub_2341CA974(a1, (_QWORD *)v8 + 1, a3, 0xFu))
    goto LABEL_17;
  --v8[2];
  v9 = 144;
LABEL_13:
  if (!v8[2] && !v8[1])
    sub_2341CA9FC(a1, v7);
  v10 = 0;
LABEL_18:
  *(_DWORD *)a5 = v10;
  *(_DWORD *)(a5 + 4) = 0;
  *(_QWORD *)(a5 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
  *(_DWORD *)(a5 + 16) = v9;
  *(_DWORD *)(a5 + 20) = 0;
}

BOOL sub_2341CA974(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  _BOOL8 v5;
  _QWORD *v6;
  uint64_t v7;

  if (!a4)
    return 0;
  if (*a2 != a3)
  {
    v4 = 0;
    v6 = a2;
    while (a4 - 1 != v4)
    {
      v7 = v6[4];
      v6 += 4;
      ++v4;
      if (v7 == a3)
      {
        v5 = v4 < a4;
        goto LABEL_8;
      }
    }
    return 0;
  }
  v4 = 0;
  v5 = 1;
  v6 = a2;
LABEL_8:
  *v6 = 0;
  LODWORD(a2[4 * v4 + 1]) = 0;
  sub_2341CABA0(a1, (uint64_t)a2, a4);
  return v5;
}

void sub_2341CA9FC(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  char *v6;
  unsigned int i;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 <= 0xF)
  {
    v4 = (char *)(a1 + 552 * a2);
    v5 = v4 + 8;
    v6 = v4 + 488;
    bzero(v4, 0x228uLL);
    do
    {
      *(_QWORD *)v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      v5 += 32;
    }
    while (v5 != v6);
    do
    {
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v6 + 2) = 0;
      v6 += 32;
    }
    while (v6 != v4 + 552);
    if (a2 <= 0xE)
    {
      for (i = 15; ; --i)
      {
        v8 = i;
        v9 = (_BYTE *)(a1 + 552 * i);
        if (*v9)
          break;
        if (v8 - 1 <= a2)
          return;
      }
      memcpy(v4, v9, 0x228uLL);
      v10 = a1 + 552 * v8;
      v11 = v10 + 8;
      v12 = v10 + 488;
      bzero(v9, 0x228uLL);
      do
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        v11 += 32;
      }
      while (v11 != v12);
      do
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        v12 += 32;
      }
      while ((_BYTE *)v12 != v9 + 552);
    }
  }
}

void sub_2341CAB04(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *i;
  int v6;

  if (a2)
  {
    v4 = 0;
    for (i = (unsigned __int8 *)a1; *i != a2; i += 552)
    {
      if (++v4 == 16)
      {
        *(_OWORD *)a3 = xmmword_250514740;
        *(_QWORD *)(a3 + 16) = 166;
        return;
      }
    }
    sub_2341CA9FC(a1, v4);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
    v6 = 178;
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
    v6 = 170;
  }
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_2341CABA0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t i;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;

  if (a2 && a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v4 = (_OWORD *)(a2 + 32 * i);
      if (!*(_QWORD *)v4)
      {
        v5 = a2 + 32 * a3;
        v6 = a3;
        while (--v6 > i)
        {
          v7 = (_OWORD *)(v5 - 32);
          v8 = *(_QWORD *)(v5 - 32);
          v5 -= 32;
          if (v8)
          {
            v9 = v7[1];
            *v4 = *v7;
            v4[1] = v9;
            *v7 = 0uLL;
            v7[1] = 0uLL;
            break;
          }
        }
      }
    }
  }
}

_QWORD *sub_2341CAC04(_QWORD *a1, uint64_t a2)
{
  _BYTE v4[24];

  *a1 = 0;
  a1[1] = 0;
  sub_2341CAC38(a1, a2, (uint64_t)v4);
  return a1;
}

_QWORD *sub_2341CAC38@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  unsigned __int16 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  __int128 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/transport/GroupPeerMessageCounter.cpp";
    *(_DWORD *)(a3 + 16) = 270;
    return result;
  }
  v4 = result;
  result[1] = a2;
  v15 = 4;
  v14 = 0;
  v16 = *(_OWORD *)"g/gcc";
  v17 = unk_2342EDBB0;
  v18 = 0;
  result = (*(_QWORD *(**)(int *__return_ptr, uint64_t, __int128 *, int *, unsigned __int16 *))(*(_QWORD *)a2 + 16))(&v11, a2, &v16, &v14, &v15);
  v5 = v11;
  v19 = v12;
  v20 = v13;
  if (v11)
  {
    if (v11 != 160)
      goto LABEL_10;
    v6 = (sub_234136AF8() & 0xFFFFFFF) + 1;
  }
  else
  {
    v6 = v14;
  }
  *((_DWORD *)v4 + 1) = v6;
  v7 = v4[1];
  v16 = *(_OWORD *)"g/gdc";
  v17 = unk_2342EDBD2;
  v18 = 0;
  result = (*(_QWORD *(**)(int *__return_ptr, uint64_t, __int128 *, int *, unsigned __int16 *))(*(_QWORD *)v7 + 16))(&v11, v7, &v16, &v14, &v15);
  v5 = v11;
  v19 = v12;
  v20 = v13;
  if (v11)
  {
    if (v11 == 160)
    {
      v8 = (sub_234136AF8() & 0xFFFFFFF) + 1;
      goto LABEL_12;
    }
LABEL_10:
    *(_DWORD *)a3 = v5;
    *(_OWORD *)(a3 + 4) = v19;
    *(_DWORD *)(a3 + 20) = v20;
    return result;
  }
  v8 = v14;
LABEL_12:
  *(_DWORD *)v4 = v8;
  v14 = *((_DWORD *)v4 + 1) + 1000;
  v15 = 4;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v9 = v4[1];
  v16 = *(_OWORD *)"g/gcc";
  v17 = unk_2342EDBB0;
  v18 = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *, int *, uint64_t))(*(_QWORD *)v9 + 24))(v9, &v16, &v14, 4);
  if (!*(_DWORD *)a3)
  {
    v14 = *(_DWORD *)v4 + 1000;
    v10 = v4[1];
    v16 = *(_OWORD *)"g/gdc";
    v17 = unk_2342EDBD2;
    v18 = 0;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *, int *, _QWORD))(*(_QWORD *)v10 + 24))(v10, &v16, &v14, v15);
  }
  return result;
}

uint64_t sub_2341CAE4C(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 4;
  if (!a2)
    v2 = 0;
  return *(unsigned int *)(a1 + v2);
}

uint64_t sub_2341CAE60@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  char *v6;
  __int128 v7;
  uint64_t result;
  int v9;
  __int16 v10;
  int v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v10 = 4;
  v12 = 0u;
  v13 = 0u;
  if (a2)
  {
    v5 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)(a1 + 4) = v5;
    v6 = "g/gcc";
  }
  else
  {
    v5 = *(_DWORD *)a1 + 1;
    *(_DWORD *)a1 = v5;
    v6 = "g/gdc";
  }
  v7 = *((_OWORD *)v6 + 1);
  v12 = *(_OWORD *)v6;
  v13 = v7;
  v14 = 0;
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = (*(uint64_t (**)(uint64_t, __int128 *, int *, __int16 *))(*(_QWORD *)result + 16))(result, &v12, &v11, &v10);
    if (*(_DWORD *)a3)
      return result;
    if (v11 == v5)
    {
      v11 = v5 + 1000;
      return (*(uint64_t (**)(_QWORD, __int128 *, int *, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), &v12, &v11, 4);
    }
    *(_DWORD *)a3 = 0;
    a3[1] = "src/transport/GroupPeerMessageCounter.cpp";
    v9 = 354;
  }
  else
  {
    *(_DWORD *)a3 = 160;
    a3[1] = "src/transport/GroupPeerMessageCounter.cpp";
    v9 = 345;
  }
  *((_DWORD *)a3 + 4) = v9;
  return result;
}

void sub_2341CAFAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  int v7;
  size_t v12;
  char *v13;
  unint64_t v14;
  unsigned __int16 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!*a5)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    v7 = 42;
    goto LABEL_5;
  }
  if (*(_QWORD *)*a5)
  {
    *(_DWORD *)a6 = 24;
    *(_QWORD *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    v7 = 43;
LABEL_5:
    *(_DWORD *)(a6 + 16) = v7;
    return;
  }
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  sub_2341F8EBC(a3, (_QWORD **)a5, (_QWORD *)a6);
  if (!*(_DWORD *)a6)
  {
    v13 = *(char **)(*a5 + 8);
    v12 = *(_QWORD *)(*a5 + 16);
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    sub_2341CA024(a1, v13, v12, v13, a2, a4, &v16, (_QWORD *)a6);
    if (!*(_DWORD *)a6)
    {
      v15 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      *(_QWORD *)a6 = 0;
      v14 = sub_23411828C(*a5);
      sub_2341F9018(&v16, a4, &v13[v12], v14, &v15, a6);
      if (!*(_DWORD *)a6)
      {
        sub_234118220(*a5, v12 + v15, 0);
        *(_DWORD *)a6 = 0;
        *(_QWORD *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
        v7 = 58;
        goto LABEL_5;
      }
    }
  }
}

void sub_2341CB130(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  unint64_t v9;
  _BOOL4 v10;
  int v11;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int v20;
  unsigned __int16 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = *a5;
  if (!*a5)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    v11 = 64;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v7 + 24);
  v10 = (*(unsigned __int16 *)(a4 + 44) | *(unsigned __int8 *)(a4 + 46)) != 0;
  if (v9 < 16 * (unint64_t)((*(unsigned __int16 *)(a4 + 44) | *(unsigned __int8 *)(a4 + 46)) != 0))
  {
    *(_DWORD *)a6 = 24;
    *(_QWORD *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    v11 = 80;
LABEL_5:
    *(_DWORD *)(a6 + 16) = v11;
    return;
  }
  v16 = *(char **)(v7 + 8);
  v17 = 16 * ((*(unsigned __int16 *)(a4 + 44) | *(unsigned __int8 *)(a4 + 46)) != 0);
  v21 = 0;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  v18 = v9 - v17;
  sub_2341F8FB0(&v22, a4, &v16[v9 - v17], 16 * v10, &v21, a6);
  if (!*(_DWORD *)a6)
  {
    if (v21 == (_DWORD)v17)
    {
      sub_234118220(*a5, v18, 0);
      v19 = *(char **)(*a5 + 8);
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      *(_QWORD *)a6 = 0;
      sub_2341CA24C(a1, v16, v18, v19, a2, a4, (uint64_t)&v22, a6);
      if (*(_DWORD *)a6)
        return;
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      sub_2341F8A44(a3, (_QWORD **)a5, (_QWORD *)a6);
      if (*(_DWORD *)a6)
        return;
      v20 = 0;
      v11 = 94;
    }
    else
    {
      v11 = 85;
      v20 = 172;
    }
    *(_DWORD *)a6 = v20;
    *(_QWORD *)(a6 + 8) = "src/transport/SecureMessageCodec.cpp";
    goto LABEL_5;
  }
}

void sub_2341CB2F4(uint64_t a1)
{
  sub_2341AE124(*(_QWORD *)(a1 + 48) + 8, (void (***)(_QWORD))a1);
}

uint64_t sub_2341CB304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, __int16 a6, uint64_t *a7)
{
  int v7;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  uint64_t result;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 56) != 1)
    sub_23425CA9C(a1);
  v7 = *(unsigned __int8 *)(a3 + 8);
  if (v7 != *(unsigned __int8 *)(a2 + 8))
    sub_23425CA08(a1);
  v9 = *(unsigned __int8 *)(a1 + 57);
  if (v9 == 2)
  {
    if (!*(_BYTE *)(a3 + 8))
      sub_23425C8E0(a1);
    if ((unint64_t)(*(_QWORD *)a3 - 1) > 0xFFFFFFEFFFFFFFFELL
      || (unint64_t)(*(_QWORD *)a2 - 1) >= 0xFFFFFFEFFFFFFFFFLL)
    {
      sub_23425C974(a1);
    }
  }
  else if (v9 == 1 && v7 != 0)
  {
    sub_23425C84C(a1);
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 80) = a4;
  *(_DWORD *)(a1 + 88) = a5;
  *(_WORD *)(a1 + 94) = a6;
  v11 = *a7;
  *(_WORD *)(a1 + 144) = *((_WORD *)a7 + 4);
  *(_QWORD *)(a1 + 136) = v11;
  LODWORD(v11) = *((unsigned __int8 *)a7 + 12);
  *(_BYTE *)(a1 + 148) = v11;
  if ((_DWORD)v11)
    *(_WORD *)(a1 + 150) = *((_WORD *)a7 + 7);
  v12 = *((unsigned __int8 *)a7 + 16);
  *(_BYTE *)(a1 + 152) = v12;
  if (v12)
    *(_WORD *)(a1 + 154) = *((_WORD *)a7 + 9);
  v13 = *((unsigned __int8 *)a7 + 20);
  *(_BYTE *)(a1 + 156) = v13;
  if (v13)
    *(_DWORD *)(a1 + 160) = *((_DWORD *)a7 + 6);
  *(_WORD *)(a1 + 164) = *((_WORD *)a7 + 14);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a3 + 8);
  sub_2341CB520(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  sub_2341CB58C(a1, 2);
  if (*(_BYTE *)(a1 + 57) == 2)
    sub_2341CB74C(*(_QWORD *)(a1 + 48), a1);
  v14 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v15 = *(unsigned __int8 *)(a1 + 57);
    v16 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)buf = 134218496;
    v19 = a1;
    v20 = 1024;
    v21 = v15;
    v22 = 1024;
    v23 = v16;
    _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_INFO, "SecureSession[%p]: Activated - Type:%d LSID:%d", buf, 0x18u);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(1u, 3);
  return result;
}

uint64_t sub_2341CB520(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 128) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  result = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  *(_QWORD *)(a1 + 120) = result;
  if (*(_BYTE *)(a1 + 56) == 3)
    return sub_2341CB58C(a1, 2);
  return result;
}

uint64_t sub_2341CB58C(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(result + 56) != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if ((*(_BYTE *)(v3 + 56) - 1) > 3u)
        v5 = "???";
      else
        v5 = off_2505148C0[(char)(*(_BYTE *)(v3 + 56) - 1)];
      v6 = *(unsigned __int16 *)(v3 + 92);
      if ((v2 - 1) > 3u)
        v7 = "???";
      else
        v7 = off_2505148C0[(char)(v2 - 1)];
      *(_DWORD *)buf = 134218754;
      v9 = v3;
      v10 = 1024;
      v11 = v6;
      v12 = 2080;
      v13 = v5;
      v14 = 2080;
      v15 = v7;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "SecureSession[%p, LSID:%d]: State change '%s' --> '%s'", buf, 0x26u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      result = sub_2341147D0(0xBu, 2);
    *(_BYTE *)(v3 + 56) = v2;
  }
  return result;
}

uint64_t sub_2341CB74C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = a2;
  if (*(_BYTE *)(a2 + 57) != 2)
    sub_23425CB30(a1);
  v4 = &v3;
  return sub_234115DFC((_QWORD *)(a1 + 24), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_2341CBDEC);
}

const char *sub_2341CB794(uint64_t a1, char a2)
{
  if ((a2 - 1) > 3u)
    return "???";
  else
    return off_2505148C0[(char)(a2 - 1)];
}

uint64_t sub_2341CB7C4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(unsigned __int8 *)(a1 + 57);
    v4 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)buf = 134218496;
    v9 = a1;
    v10 = 1024;
    v11 = v3;
    v12 = 1024;
    v13 = v4;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "SecureSession[%p]: MarkAsDefunct Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = *(unsigned __int8 *)(a1 + 56);
  if (v6 == 2)
  {
    sub_2341CB58C(a1, 3);
  }
  else if (v6 == 1)
  {
    sub_23425CBC4(v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_2341CB8F8(_QWORD *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  uint8_t buf[4];
  _QWORD *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *((unsigned __int8 *)a1 + 57);
    v4 = *((unsigned __int16 *)a1 + 46);
    *(_DWORD *)buf = 134218496;
    v8 = a1;
    v9 = 1024;
    v10 = v3;
    v11 = 1024;
    v12 = v4;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "SecureSession[%p]: MarkForEviction Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  v5 = *((unsigned __int8 *)a1 + 56);
  if ((v5 - 2) < 2)
  {
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
LABEL_8:
    sub_2341CB58C((uint64_t)a1, 4);
    sub_2341CBA48(a1);
    return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  }
  if (v5 == 1)
    goto LABEL_8;
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t sub_2341CBA48(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  while (1)
  {
    v2 = (_QWORD *)a1[2];
    if (v2 == a1 + 1)
      break;
    if (v2)
      v3 = v2 - 1;
    else
      v3 = 0;
    (*(void (**)(_QWORD *))(*v3 + 16))(v3);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t sub_2341CBAA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;

  *(_WORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v2 = *(_QWORD *)(result + 72);
  if (v2 - 1 <= 0xFFFFFFEFFFFFFFFELL)
  {
    *(_BYTE *)(a2 + 1) = 64;
    v3 = *(_QWORD *)(result + 80);
    *(_QWORD *)(a2 + 8) = v2;
    *(_QWORD *)(a2 + 16) = v3;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 88);
LABEL_7:
    *(_BYTE *)a2 = *(_BYTE *)(result + 24);
    return result;
  }
  if (HIDWORD(v2) != 4294967291)
    sub_23425CC58(result);
  if (*(_BYTE *)(result + 169) && *(_BYTE *)(result + 168) == 1)
  {
    *(_BYTE *)(a2 + 1) = 32;
    *(_QWORD *)(a2 + 8) = v2;
    goto LABEL_7;
  }
  return result;
}

_WORD *sub_2341CBB30(uint64_t a1)
{
  return sub_2341CBB38((_WORD *)(a1 + 40));
}

_WORD *sub_2341CBB38(_WORD *a1)
{
  int v1;

  v1 = (unsigned __int16)*a1;
  if (v1 == 0xFFFF)
    sub_23425A7EC((uint64_t)a1);
  *a1 = v1 + 1;
  return a1 - 20;
}

void sub_2341CBB64(uint64_t a1)
{
  sub_2341CBB6C(a1 + 40);
}

void sub_2341CBB6C(uint64_t a1)
{
  __int16 v1;

  if (!*(_WORD *)a1)
    sub_23425A6C4(a1);
  v1 = *(_WORD *)a1 - 1;
  *(_WORD *)a1 = v1;
  if (!v1)
    sub_2341AE124(*(_QWORD *)(a1 + 8) + 8, (void (***)(_QWORD))(a1 - 40));
}

uint64_t sub_2341CBBAC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = result + 8;
  v3 = *(_QWORD *)(result + 16);
  if (v3 != result + 8)
  {
    do
    {
      v5 = *(_QWORD *)(v3 + 8);
      if (v3)
        v6 = v3 - 8;
      else
        v6 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2);
      v3 = v5;
    }
    while (v5 != v2);
  }
  return result;
}

void sub_2341CBC10(uint64_t a1)
{
  sub_2341CBF20(a1);
  JUMPOUT(0x23493E704);
}

BOOL sub_2341CBC34(uint64_t a1)
{
  return *(_BYTE *)(a1 + 56) == 2;
}

uint64_t sub_2341CBC44(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2341CBC54(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

BOOL sub_2341CBC64(uint64_t a1)
{
  return *(_BYTE *)(a1 + 112) == 1;
}

BOOL sub_2341CBC74(uint64_t a1)
{
  return *(_BYTE *)(a1 + 112) == 3;
}

uint64_t sub_2341CBC84(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_2341CBC8C(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  v2 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10)
     - a1[16];
  v3 = *(unsigned __int16 *)((*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) + 8);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v5 = (unsigned int *)(v4 + 4);
  if (v2 >= v3)
    v5 = (unsigned int *)v4;
  return *v5;
}

uint64_t sub_2341CBD04(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 112);
  switch(v1)
  {
    case 3:
      return 30000;
    case 2:
      return 15000;
    case 1:
      return sub_2341B1C38(*(_DWORD *)(a1 + 140), *(_DWORD *)(a1 + 136), *(_DWORD *)(a1 + 128), *(unsigned __int16 *)(a1 + 144));
  }
  return 0;
}

uint64_t sub_2341CBD4C(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v4;
  unsigned __int16 v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v2 = *(unsigned __int8 *)(a1 + 112);
  if (v2 == 3)
    return 30000;
  if (v2 == 2)
    return 15000;
  if (v2 != 1)
    return 0;
  sub_2341B1BB8((uint64_t)v9);
  v4 = sub_2341B1C28();
  if (v9[0])
  {
    v7 = sub_233C0FDD4(v9);
    LODWORD(v4) = *(_DWORD *)v7;
    LODWORD(v6) = *((_DWORD *)v7 + 1);
    v5 = *((_WORD *)v7 + 4);
  }
  else
  {
    v6 = HIDWORD(v4);
  }
  return sub_2341B1C38(v6, v4, a2, v5);
}

uint64_t sub_2341CBDEC(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (**a1 != a2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if (*(_BYTE *)(a2 + 57) == 2)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      v6 = v5;
      if (v4 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 48))(**a1)
        && v6 == v7
        && sub_23400611C(a2 + 80, **a1 + 80))
      {
        v8 = **a1;
        v13 = v8;
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
        v9 = *(_QWORD *)(a2 + 16);
        if (v9 != a2 + 8)
        {
          do
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v9)
              v11 = v9 - 8;
            else
              v11 = 0;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 24))(v11, &v13);
            v9 = v10;
          }
          while (v10 != a2 + 8);
          v8 = v13;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  }
  return 0;
}

uint64_t sub_2341CBF20(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint8_t buf[4];
  uint64_t v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250514768;
  v2 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(unsigned __int8 *)(a1 + 57);
    v4 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)buf = 134218496;
    v7 = a1;
    v8 = 1024;
    v9 = v3;
    v10 = 1024;
    v11 = v4;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "SecureSession[%p]: Released - Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  *(_DWORD *)(a1 + 256) = 0;
  sub_2341C9B18(a1 + 168);
  *(_QWORD *)a1 = &unk_250514848;
  sub_2341CC044((_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_2341CC044(_QWORD *a1)
{
  if ((_QWORD *)a1[1] != a1)
    sub_23425CCEC((uint64_t)a1);
  sub_2341C4C94(a1);
  return sub_233CB66E0(a1);
}

unint64_t *sub_2341CC078@<X0>(unint64_t *result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, __int16 a8@<W7>, uint64_t a9@<X8>, char a10, uint64_t a11)
{
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  int v18;

  v17 = a6;
  v18 = a7;
  v16 = a2;
  v15 = a3;
  v13 = a5;
  v14 = a4;
  v12 = a8;
  if ((a2 != 2 || a5 && a4 && a10)
    && (result = (unint64_t *)sub_2341CC124(result + 1, (uint64_t)result, &v16, &v15, &v14, &v13, (uint64_t)&v17, &v12, &a10, a11)) != 0)
  {
    *(_BYTE *)a9 = 1;
    *(_QWORD *)(a9 + 8) = result;
    return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 24))(result);
  }
  else
  {
    *(_BYTE *)a9 = 0;
  }
  return result;
}

void *sub_2341CC124(unint64_t *a1, uint64_t a2, char *a3, __int16 *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, __int16 *a8, char *a9, uint64_t a10)
{
  void *v18;
  void *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;

  v18 = sub_234114774(0x118uLL);
  v19 = v18;
  if (v18)
  {
    sub_2341CCE08((uint64_t)v18, a2, *a3, *a4, *a5, *a6, *(_QWORD *)a7, *(_DWORD *)(a7 + 8), *a8, *a9, a10);
    v20 = sub_234114774(0x18uLL);
    if (v20)
    {
      *v20 = v19;
      v20[1] = a1 + 2;
      v20[2] = 0;
      v20[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v20;
      a1[4] = (unint64_t)v20;
      v21 = a1[1];
      v22 = *a1 + 1;
      *a1 = v22;
      if (v22 > v21)
        a1[1] = v22;
    }
    else
    {
      return 0;
    }
  }
  return v19;
}

uint64_t sub_2341CC220@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  unint64_t v8;
  __int16 *v9;
  uint64_t v10;
  __int16 v11;
  _BYTE v12[5];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a3;
  v15 = a4;
  v13 = a2;
  result = sub_2341CC354(a1, (uint64_t)v12);
  if (v12[0]
    && ((v8 = *(_QWORD *)(a1 + 8), v9 = (__int16 *)sub_233CBCEC0(v12), v8 > 0x3E7)
      ? (result = (uint64_t)sub_2341CC4F0())
      : (result = (uint64_t)sub_2341CC444((unint64_t *)(a1 + 8), a1, &v13, v9)),
        (v10 = result) != 0))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    if (*(__int16 *)sub_233CBCEC0(v12) == -1)
      v11 = 1;
    else
      v11 = *(_WORD *)sub_233CBCEC0(v12) + 1;
    *(_WORD *)(a1 + 64) = v11;
    *(_BYTE *)a5 = 1;
    *(_QWORD *)(a5 + 8) = v10;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  }
  else
  {
    *(_BYTE *)a5 = 0;
  }
  return result;
}

uint64_t sub_2341CC354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unsigned int v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  __int16 v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  _QWORD v16[2];

  v4 = (_QWORD *)(a1 + 24);
  v5 = -64;
  while (1)
  {
    v6 = v5 + *(_WORD *)(a1 + 64);
    v15 = v6 + 64;
    v7 = -64 - v6;
    v8 = (v7 & 0xFFC0) != 0 ? 0 : 1 << v7;
    v14 = v8;
    v16[0] = &v15;
    v16[1] = &v14;
    result = sub_234115DFC(v4, (uint64_t)v16, (unsigned int (*)(uint64_t))sub_2341CD370);
    v10 = v14;
    if (v14 != -1)
      break;
    v5 += 64;
    if (v5 >> 6 > 0x3FE)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  v11 = 0;
  if ((v14 & 1) != 0)
  {
    do
    {
      v12 = v10;
      v10 >>= 1;
      ++v11;
    }
    while ((v12 & 2) != 0);
  }
  v13 = v15 + v11;
  *(_BYTE *)a2 = 1;
  *(_WORD *)(a2 + 2) = v13;
  return result;
}

void *sub_2341CC444(unint64_t *a1, uint64_t a2, char *a3, __int16 *a4)
{
  void *v8;
  void *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v8 = sub_234114774(0x118uLL);
  v9 = v8;
  if (v8)
  {
    sub_2341CD070((uint64_t)v8, a2, *a3, *a4);
    v10 = sub_234114774(0x18uLL);
    if (v10)
    {
      *v10 = v9;
      v10[1] = a1 + 2;
      v10[2] = 0;
      v10[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      v11 = a1[1];
      v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11)
        a1[1] = v12;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void *sub_2341CC4F0()
{
  _BYTE *v0;
  int v1;
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v6;
  _BYTE *v7;
  NSObject *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  NSObject *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int8 v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  unint64_t *v28;
  int v29;
  const char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  unint64_t v38;
  NSObject *v39;
  void *result;
  _BYTE *v41;
  _QWORD v42[3];
  char v43;
  int v44;
  char v45;
  __int16 v46;
  _BYTE v47[24];
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  uint8_t buf[4];
  int v62;
  __int16 v63;
  _DWORD v64[3997];
  uint64_t v65;

  v0 = (_BYTE *)MEMORY[0x24BDAC7A8]();
  v65 = *MEMORY[0x24BDAC8D0];
  v46 = v1;
  v45 = v2;
  if (*v0)
    sub_23425CFB8();
  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = v0;
  *v0 = 1;
  v8 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v62 = v6;
    v63 = 1024;
    v64[0] = v5;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Evicting a slot for session with LSID: %d, type: %u", buf, 0xEu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xBu, 2);
  v9 = (unint64_t *)(v7 + 8);
  if (*((_QWORD *)v7 + 1) >= 0x3E9uLL)
    sub_23425CEB8();
  v44 = 0;
  *(_QWORD *)v47 = &v44;
  *(_QWORD *)&v47[8] = buf;
  *(_QWORD *)&v47[16] = v7;
  v10 = sub_234115DFC((_QWORD *)v7 + 3, (uint64_t)v47, (unsigned int (*)(uint64_t))sub_2341CD248);
  v11 = *((_QWORD *)v7 + 1);
  v12 = *v4;
  v13 = v4[1];
  v42[0] = buf;
  v42[1] = v11;
  v42[2] = v12;
  v43 = v13;
  sub_2341CCAA0(v10, v42);
  v14 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "Sorted sessions for eviction...", v47, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xBu, 2);
  v15 = *v9;
  v16 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "Sorted Eviction Candidates (ranked from best candidate to worst):", v47, 2u);
  }
  v41 = v7;
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  if (!v15)
LABEL_30:
    sub_23425CF5C();
  v17 = 0;
  v18 = 16 * v15;
  v19 = "SecureChannel";
  do
  {
    v20 = sub_234117B80(0xBu, v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = (uint64_t *)&buf[v17];
      v22 = *(_QWORD *)&buf[v17];
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
      v24 = v23;
      v25 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v21 + 48))(*v21) >> 32;
      v26 = v18;
      v27 = v19;
      v28 = v9;
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v21 + 48))(*v21);
      v30 = sub_2341CB794(*v21, *(_BYTE *)(*v21 + 56));
      v31 = *(unsigned __int16 *)((char *)&v63 + v17);
      v32 = LOWORD(v64[(unint64_t)v17 / 4]);
      v33 = *(_QWORD *)(*(_QWORD *)&buf[v17] + 120);
      *(_DWORD *)v47 = 134220034;
      *(_QWORD *)&v47[4] = v17 >> 4;
      *(_WORD *)&v47[12] = 2048;
      *(_QWORD *)&v47[14] = v22;
      *(_WORD *)&v47[22] = 1024;
      v48 = v24;
      v49 = 1024;
      v50 = v25;
      v51 = 1024;
      v52 = v29;
      v9 = v28;
      v19 = v27;
      v18 = v26;
      v53 = 2080;
      v54 = v30;
      v55 = 1024;
      v56 = v31;
      v57 = 1024;
      v58 = v32;
      v59 = 2048;
      v60 = v33;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_INFO, "\t%ld: [%p] -- Peer: [%u:%08X%08X] State: '%s', NumMatchingOnFabric: %d NumMatchingOnPeer: %d ActivityTime: %lu", v47, 0x48u);
    }
    if (sub_234114844(3u))
    {
      v34 = (uint64_t *)&buf[v17];
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[v17] + 48))(*(_QWORD *)&buf[v17]);
      (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v34 + 48))(*v34);
      (*(void (**)(uint64_t))(*(_QWORD *)*v34 + 48))(*v34);
      sub_2341CB794(*v34, *(_BYTE *)(*v34 + 56));
      sub_2341147D0(0xBu, 3);
    }
    v17 += 16;
  }
  while (v18 != v17);
  v35 = 0;
  while (1)
  {
    if (*(_BYTE *)(*(_QWORD *)&buf[v35] + 56) != 4)
    {
      v36 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = *(_QWORD *)&buf[v35];
        *(_DWORD *)v47 = 134217984;
        *(_QWORD *)&v47[4] = v37;
        _os_log_impl(&dword_233BF3000, v36, OS_LOG_TYPE_DEFAULT, "Candidate Session[%p] - Attempting to evict...", v47, 0xCu);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0xBu, 2);
      v38 = *v9;
      sub_2341CB8F8(*(_QWORD **)&buf[v35]);
      if (*v9 < v38)
        break;
    }
    v35 += 16;
    if (v18 == v35)
      goto LABEL_30;
  }
  v39 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_233BF3000, v39, OS_LOG_TYPE_DEFAULT, "Successfully evicted a session!", v47, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xBu, 2);
  result = sub_2341CC444(v9, (uint64_t)v41, &v45, &v46);
  *v41 = 0;
  return result;
}

void sub_2341CCAA0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  _OWORD *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  BOOL v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  _QWORD *v19;
  _BOOL4 v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  _WORD *v24;
  unsigned int v25;
  unsigned __int8 v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int16 *v42;

  v35 = a2[1];
  if (v35 < 2)
    return;
  v2 = a2;
  v3 = *a2;
  v4 = 2;
  for (i = 1; i != v35; ++i)
  {
    v6 = (uint64_t *)(v3 + 16 * i);
    v7 = *v6;
    v8 = *((unsigned __int16 *)v6 + 4);
    v39 = *((unsigned __int16 *)v6 + 5);
    v9 = *((_DWORD *)v6 + 3);
    v10 = i;
    if ((int)i < 1)
      goto LABEL_39;
    v36 = *((_DWORD *)v6 + 3);
    v11 = (_OWORD *)(v3 + 16 * i);
    v37 = i;
    v10 = i;
    v38 = v4;
    v40 = *v6;
    v41 = *((unsigned __int16 *)v6 + 4);
    while (1)
    {
      v12 = (v10 - 1);
      v13 = (unsigned __int16 *)(v3 + 16 * v12);
      v14 = v13[4];
      v15 = v8 > v14;
      if (v8 != v14)
        goto LABEL_33;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      v17 = v16;
      v18 = *((unsigned __int8 *)v2 + 24);
      v19 = v2;
      v20 = v18 == v16;
      v42 = (unsigned __int16 *)(v3 + 16 * v12);
      (*(void (**)(_QWORD))(**(_QWORD **)v13 + 48))(*(_QWORD *)v13);
      v22 = *((unsigned __int8 *)v19 + 24);
      if (v20 != (v22 == v21))
        break;
      v23 = v3 + 16 * v12;
      v25 = *(unsigned __int16 *)(v23 + 10);
      v24 = (_WORD *)(v23 + 10);
      v15 = v39 > v25;
      if (v39 != v25)
      {
        v2 = v19;
        v7 = v40;
        v8 = v41;
        v13 = (unsigned __int16 *)(v3 + 16 * v12);
        goto LABEL_33;
      }
      v7 = v40;
      v27 = 0;
      v2 = v19;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40) == v19[2])
      {
        v13 = v42;
        if (*((unsigned __int8 *)v19 + 24) == v26)
        {
          v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40) ^ 1;
          if (v39)
            v27 = 1;
          else
            v27 = v28;
        }
      }
      else
      {
        v13 = v42;
      }
      v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v13 + 48))(*(_QWORD *)v13);
      v31 = 0;
      if (v29 == v19[2] && *((unsigned __int8 *)v19 + 24) == v30)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v13 + 40))(*(_QWORD *)v13) ^ 1;
        if (*v24)
          v31 = 1;
      }
      v15 = v27 > v31;
      if (v27 != v31)
      {
        v8 = v41;
LABEL_33:
        if (!v15)
          goto LABEL_37;
        goto LABEL_35;
      }
      if (*(_BYTE *)(v40 + 56) == 3)
        v32 = 2;
      else
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
      if (*(_BYTE *)(*(_QWORD *)v13 + 56) == 3)
        v33 = 2;
      else
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v13 + 40))(*(_QWORD *)v13);
      v8 = v41;
      v15 = v32 > v33;
      if (v32 != v33)
        goto LABEL_33;
      if (*(_QWORD *)(v40 + 120) >= *(_QWORD *)(*(_QWORD *)v13 + 120))
        goto LABEL_37;
LABEL_35:
      *v11-- = *(_OWORD *)v13;
      --v4;
      --v10;
      if (v4 <= 1)
      {
        v10 = 0;
LABEL_37:
        v4 = v38;
        i = v37;
        goto LABEL_38;
      }
    }
    if (v18 == v17)
    {
      v2 = v19;
      v7 = v40;
      v8 = v41;
      v13 = (unsigned __int16 *)(v3 + 16 * v12);
      if (v22 == v21)
        goto LABEL_37;
      goto LABEL_35;
    }
    v2 = v19;
    v4 = v38;
    i = v37;
    v7 = v40;
    LOWORD(v8) = v41;
LABEL_38:
    v9 = v36;
LABEL_39:
    v34 = v3 + 16 * v10;
    *(_QWORD *)v34 = v7;
    *(_WORD *)(v34 + 8) = v8;
    *(_WORD *)(v34 + 10) = v39;
    *(_DWORD *)(v34 + 12) = v9;
    ++v4;
  }
}

uint64_t sub_2341CCD94@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  __int16 v7;
  _QWORD v8[2];

  v7 = a2;
  v6 = 0;
  v8[0] = &v7;
  v8[1] = &v6;
  sub_234115DFC((_QWORD *)(a1 + 24), (uint64_t)v8, (unsigned int (*)(uint64_t))sub_2341CD344);
  result = v6;
  if (v6)
  {
    *(_QWORD *)(a3 + 8) = v6;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *(_BYTE *)a3 = v5;
  return result;
}

uint64_t sub_2341CCE08(uint64_t a1, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, char a10, uint64_t a11)
{
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_250514768;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 48) = a2;
  *(_BYTE *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 57) = a3;
  *(_QWORD *)(a1 + 64) = a5;
  *(_QWORD *)(a1 + 72) = a6;
  *(_QWORD *)(a1 + 80) = a7;
  *(_DWORD *)(a1 + 88) = a8;
  *(_WORD *)(a1 + 92) = a4;
  *(_WORD *)(a1 + 94) = a9;
  *(_OWORD *)(a1 + 96) = xmmword_25615DD84;
  *(_BYTE *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 114) = 5540;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 120) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  *(_QWORD *)(a1 + 128) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  v12 = *(_DWORD *)(a11 + 8);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)a11;
  *(_DWORD *)(a1 + 144) = v12;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_WORD *)(a1 + 164) = 1;
  sub_2341C9A88(a1 + 168);
  *(_QWORD *)(a1 + 240) = &unk_2505148F0;
  *(_DWORD *)(a1 + 248) = sub_234136AF8() & 0xFFFFFFF;
  *(_DWORD *)(a1 + 256) = 0;
  sub_2341CB58C(a1, 2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *(_BYTE *)(a1 + 24) = a10;
  v13 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v14 = *(unsigned __int8 *)(a1 + 57);
    v15 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)buf = 134218496;
    v18 = a1;
    v19 = 1024;
    v20 = v14;
    v21 = 1024;
    v22 = v15;
    _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_INFO, "SecureSession[%p]: Allocated for Test Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  return a1;
}

void sub_2341CD018()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341CD02C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *(_DWORD *)(result + 8);
  if (v3 == -1)
  {
    v6 = 97;
    v4 = 125;
  }
  else
  {
    v4 = 0;
    v5 = v3 + 1;
    *(_DWORD *)(result + 8) = v5;
    *a2 = v5;
    v6 = 101;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/transport/MessageCounter.h";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_2341CD070(uint64_t a1, uint64_t a2, char a3, __int16 a4)
{
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_250514768;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 48) = a2;
  *(_BYTE *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 57) = a3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 92) = a4;
  *(_WORD *)(a1 + 94) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_25615DD84;
  *(_BYTE *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 114) = 5540;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 120) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  *(_QWORD *)(a1 + 128) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  *(_QWORD *)(a1 + 136) = sub_2341B1C28();
  *(_DWORD *)(a1 + 144) = v5;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_WORD *)(a1 + 164) = 1;
  sub_2341C9A88(a1 + 168);
  *(_QWORD *)(a1 + 240) = &unk_2505148F0;
  *(_DWORD *)(a1 + 248) = sub_234136AF8() & 0xFFFFFFF;
  *(_DWORD *)(a1 + 256) = 0;
  v6 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(unsigned __int8 *)(a1 + 57);
    v8 = *(unsigned __int16 *)(a1 + 92);
    *(_DWORD *)buf = 134218496;
    v11 = a1;
    v12 = 1024;
    v13 = v7;
    v14 = 1024;
    v15 = v8;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "SecureSession[%p]: Allocated Type:%d LSID:%d", buf, 0x18u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  return a1;
}

uint64_t sub_2341CD248(unsigned int **a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int v5;
  uint64_t v7;
  int v8;
  unsigned int *v9;

  v3 = a1[2];
  *(_QWORD *)&a1[1][4 * **a1] = a2;
  LOWORD(a1[1][4 * **a1 + 2]) = 0;
  HIWORD(a1[1][4 * **a1 + 2]) = 0;
  v4 = a1[1];
  v5 = **a1;
  v7 = a2;
  v8 = v5;
  v9 = v4;
  sub_234115DFC((_QWORD *)v3 + 3, (uint64_t)&v7, (unsigned int (*)(uint64_t))sub_2341CD2DC);
  ++**a1;
  return 0;
}

uint64_t sub_2341CD2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)a1 != a2 && *(unsigned __int8 *)(*(_QWORD *)a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a1 + 16) + 16 * *(unsigned int *)(a1 + 8);
    ++*(_WORD *)(v2 + 8);
    if (*(_QWORD *)(*(_QWORD *)a1 + 72) == *(_QWORD *)(a2 + 72))
    {
      v3 = *(_QWORD *)(a1 + 16) + 16 * *(unsigned int *)(a1 + 8);
      ++*(_WORD *)(v3 + 10);
    }
  }
  return 0;
}

uint64_t sub_2341CD344(unsigned __int16 **a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 92) != **a1)
    return 0;
  *(_QWORD *)a1[1] = a2;
  return 1;
}

BOOL sub_2341CD370(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v2;

  v2 = *(_WORD *)(a2 + 92) - **(_WORD **)a1;
  if (v2 <= 0x3Fu)
    **(_QWORD **)(a1 + 8) |= 1 << v2;
  return **(_QWORD **)(a1 + 8) == -1;
}

uint64_t sub_2341CD3B8(unsigned int a1)
{
  return sub_2341147D0(a1, 1);
}

uint64_t sub_2341CD3C0(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)v2 != 2)
    sub_23425D014(v2);
  return a1;
}

uint64_t sub_2341CD3F8(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)v2 != 2)
    sub_23425D0AC(v2);
  return a1;
}

uint64_t sub_2341CD430(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)v2 != 1)
    sub_23425D140(v2);
  return a1;
}

uint64_t sub_2341CD468(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)v2 != 3)
    sub_23425D1D4(v2);
  return a1;
}

uint64_t sub_2341CD4A0(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)v2 != 3)
    sub_23425D268(v2);
  return a1;
}

uint64_t sub_2341CD4D8(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)v2 != 4)
    sub_23425D2FC(v2);
  return a1;
}

uint64_t sub_2341CD510(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)v2 != 4)
    sub_23425D390(v2);
  return a1;
}

uint64_t sub_2341CD548(uint64_t a1, int a2)
{
  int v5;
  unint64_t v6;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 4)
  {
    return 0;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) + a2;
  v6 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  return v5 + (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 112))(a1, v6);
}

uint64_t sub_2341CD5E0(uint64_t a1)
{
  int v2;
  uint64_t result;
  unsigned __int16 *v4;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) - 1;
  result = 0;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      sub_2341CD3F8(a1);
      v4 = (unsigned __int16 *)(a1 + 92);
      return *v4;
    case 2:
      sub_2341CD4A0(a1);
      goto LABEL_5;
    case 3:
      sub_2341CD510(a1);
LABEL_5:
      v4 = (unsigned __int16 *)(a1 + 44);
      return *v4;
    default:
      sub_23425D424(0);
  }
}

const char *sub_2341CD660(_QWORD *a1)
{
  unsigned __int8 v1;

  v1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1) - 1;
  if (v1 > 3u)
    return "?";
  else
    return off_250514938[(char)v1];
}

uint64_t sub_2341CD6AC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_250514968;
  sub_2341CD6FC((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 24))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  sub_233CB66E0((_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_2341CD6FC(_QWORD *result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = result + 3;
  if (*((_BYTE *)result + 24))
  {
    v2 = (uint64_t)result;
    v3 = (uint64_t *)sub_2341CD838((_BYTE *)result + 24);
    result = sub_2341CDAE4(*v3, v2);
    if (*(_BYTE *)(v2 + 24))
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 32))(*(_QWORD *)(v2 + 32));
    *v1 = 0;
  }
  return result;
}

void sub_2341CD758(uint64_t a1)
{
  sub_2341CD6AC(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341CD77C(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_250514968;
  *(_BYTE *)(a1 + 24) = 0;
  v3 = (_BYTE *)(a1 + 24);
  sub_2341CD7DC(a1 + 24, (unsigned __int8 *)(a2 + 24));
  if (*v3)
  {
    v4 = (uint64_t *)sub_2341CD838(v3);
    sub_2341CD858(*v4, a1);
  }
  return a1;
}

uint64_t sub_2341CD7DC(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;

  if (*(_BYTE *)a1)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  v4 = *a2;
  *(_BYTE *)a1 = v4;
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  return a1;
}

_BYTE *sub_2341CD838(_BYTE *a1)
{
  if (!*a1)
    sub_234258260((uint64_t)a1);
  return a1 + 8;
}

_QWORD *sub_2341CD858(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;

  v4 = sub_2341B1F64("src/transport/Session.h", 223);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = (_QWORD *)(a2 + 8);
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8)
    sub_23425D4B8(v4);
  return sub_2341C4C4C((_QWORD *)(a1 + 8), v7);
}

uint64_t sub_2341CD8A8(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t *v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_250514968;
  *(_BYTE *)(a1 + 24) = 0;
  v4 = (_BYTE *)(a1 + 24);
  sub_2341CD7DC(a1 + 24, (unsigned __int8 *)(a2 + 24));
  if (*v4)
  {
    v5 = (uint64_t *)sub_2341CD838(v4);
    sub_2341CD858(*v5, a1);
  }
  sub_2341CD6FC((_QWORD *)a2);
  return a1;
}

uint64_t sub_2341CD920(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  sub_2341CD6FC((_QWORD *)a1);
  sub_2341CD7DC(a1 + 24, (unsigned __int8 *)(a2 + 24));
  if (*(_BYTE *)(a1 + 24))
  {
    v4 = (uint64_t *)sub_2341CD838((_BYTE *)(a1 + 24));
    sub_2341CD858(*v4, a1);
  }
  return a1;
}

uint64_t sub_2341CD974(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  sub_2341CD6FC((_QWORD *)a1);
  sub_2341CD7DC(a1 + 24, (unsigned __int8 *)(a2 + 24));
  if (*(_BYTE *)(a1 + 24))
  {
    v4 = (uint64_t *)sub_2341CD838((_BYTE *)(a1 + 24));
    sub_2341CD858(*v4, a1);
  }
  sub_2341CD6FC((_QWORD *)a2);
  return a1;
}

uint64_t sub_2341CD9D8(_QWORD *a1, uint64_t *a2)
{
  sub_2341CD6FC(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) != 2
    || *(_BYTE *)(sub_2341CD3C0(*a2) + 56) != 1)
  {
    return 0;
  }
  sub_2341CDA40((uint64_t)a1, a2);
  return 1;
}

_QWORD *sub_2341CDA40(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 24))
    sub_23425D54C(a1);
  *(_BYTE *)(a1 + 24) = 1;
  v4 = *a2;
  *(_QWORD *)(a1 + 32) = *a2;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return sub_2341CD858(*a2, a1);
}

uint64_t sub_2341CDA90(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  sub_2341CD6FC(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 40))(*a2);
  if ((_DWORD)v4)
    sub_2341CDA40((uint64_t)a1, a2);
  return v4;
}

_QWORD *sub_2341CDAE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  sub_2341B1F64("src/transport/Session.h", 230);
  v4 = (_QWORD *)(a1 + 8);
  v5 = (_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(a1 + 8);
  do
    v6 = (_QWORD *)v6[1];
  while (v6 != v5 && v6 != v4);
  if (v6 == v4)
    sub_23425D5E0((uint64_t)v5);
  return sub_2341C4C94(v5);
}

uint64_t sub_2341CDB40(_QWORD *a1, uint64_t *a2)
{
  sub_2341CD6FC(a1);
  return sub_2341CDA90(a1, a2);
}

uint64_t sub_2341CDB6C(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  __int16 v6;
  unsigned int v7;
  char v8;
  char v9;
  char v10;
  int v11;
  char v12;
  uint8_t buf[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v6 = 0;
  v5 = 0;
  v4 = 0uLL;
  sub_2341F8564((uint64_t)&v7, *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 24), &v6, (uint64_t)&v4);
  if (!(_DWORD)v4)
    return v7;
  v1 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = v4;
    v14 = v5;
    v2 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v2;
    _os_log_impl(&dword_233BF3000, v1, OS_LOG_TYPE_ERROR, "Failed to decode EncryptedPacketBufferHandle header with error: %s", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = v4;
    v14 = v5;
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(1u, 1);
    return 0;
  }
  return result;
}

double sub_2341CDCBC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_2505149C8;
  *(_QWORD *)(a1 + 8) = &unk_250514A10;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = a1 + 64;
  *(_QWORD *)(a1 + 80) = a1 + 64;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  *(_QWORD *)(a1 + 144) = a1 + 128;
  *(_WORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 264) = &unk_250514AB0;
  *(_DWORD *)(a1 + 272) = 0;
  return result;
}

_QWORD *sub_2341CDD40(_QWORD *a1)
{
  *a1 = &off_2505149C8;
  a1[1] = &unk_250514A10;
  sub_2341CDD9C((uint64_t)a1);
  sub_234115DFC(a1 + 16, (uint64_t)(a1 + 14), (unsigned int (*)(uint64_t))sub_2341D2628);
  sub_2341D2640(a1 + 14);
  sub_2341D2640(a1 + 6);
  return a1;
}

uint64_t sub_2341CDD9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    sub_2341E6924(v2, a1 + 8);
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_DWORD *)(a1 + 176) = 0;
  result = sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_2341D3298);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  return result;
}

_QWORD *sub_2341CDDFC(uint64_t a1)
{
  return sub_2341CDD40((_QWORD *)(a1 - 8));
}

void sub_2341CDE04(_QWORD *a1)
{
  sub_2341CDD40(a1);
  JUMPOUT(0x23493E704);
}

void sub_2341CDE28(uint64_t a1)
{
  sub_2341CDD40((_QWORD *)(a1 - 8));
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341CDE50@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v9;
  int v10;
  uint64_t v17;

  if (*(_DWORD *)(result + 176))
  {
    v9 = 129;
    v10 = 3;
LABEL_13:
    *(_DWORD *)a8 = v10;
    *(_QWORD *)(a8 + 8) = "src/transport/SessionManager.cpp";
    *(_DWORD *)(a8 + 16) = v9;
    return result;
  }
  if (!a3)
  {
    v9 = 130;
LABEL_12:
    v10 = 47;
    goto LABEL_13;
  }
  if (!a5)
  {
    v9 = 131;
    goto LABEL_12;
  }
  if (!a6)
  {
    v9 = 132;
    goto LABEL_12;
  }
  v17 = result;
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  result = sub_2341E68C4(a6, result + 8, a8);
  if (!*(_DWORD *)a8)
  {
    *(_DWORD *)(v17 + 176) = 1;
    *(_QWORD *)(v17 + 248) = a3;
    *(_QWORD *)(v17 + 256) = a4;
    *(_QWORD *)(v17 + 24) = a2;
    *(_QWORD *)(v17 + 32) = a6;
    *(_QWORD *)(v17 + 40) = a7;
    *(_WORD *)(v17 + 168) = sub_234136B34();
    *(_DWORD *)(v17 + 272) = sub_234136AF8() & 0xFFFFFFF;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    *(_QWORD *)a8 = 0;
    result = (uint64_t)sub_2341CAC38((_QWORD *)(v17 + 184), a5, a8);
    if (!*(_DWORD *)a8)
    {
      v10 = 0;
      *(_QWORD *)(*(_QWORD *)(v17 + 248) + 8) = v17;
      *(_QWORD *)(v17 + 208) = 0;
      *(_QWORD *)(v17 + 216) = 0;
      v9 = 155;
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t sub_2341CDF6C(uint64_t a1)
{
  char v2;

  return sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)&v2, (unsigned int (*)(uint64_t))sub_2341D3298);
}

void sub_2341CDF98(uint64_t a1, int a2)
{
  _BYTE v3[24];

  if (!byte_25615DA00)
  {
    *((_BYTE *)&unk_25615B780 + 8832) = 1;
    sub_2341D2F64((char *)&unk_25615B780);
  }
  sub_2341CAB04((uint64_t)&unk_25615B780, a2, (uint64_t)v3);
}

void sub_2341CDFF4(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  NSObject *v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  __int16 v22;
  char v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t (***v29)(_QWORD);
  uint64_t (***v30)(_QWORD);
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  NSObject *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  _BYTE *v48;
  uint64_t v49;
  NSObject *v50;
  int v51;
  const char *v52;
  int v53;
  int v54;
  unsigned int v55;
  const char *v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  unint64_t v60;
  const char *v61;
  char v63[7];
  __int128 v64;
  int v65;
  int v66;
  unsigned int v67;
  char v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  __int16 v73;
  int v74;
  char v75;
  _BYTE buf[24];
  _BYTE v77[20];
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  uint64_t v82;
  _BYTE v83[14];
  __int16 v84;
  char *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  int v91;
  char v92[8];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[28];
  unsigned int __str[5];
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v11 = sub_2341C4608();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "SessionManager";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "PrepareMessage";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v11, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v12 = 0;
  v67 = 0;
  v68 = 0;
  v70 = 0;
  v72 = 0;
  v74 = 0;
  v75 = 0;
  if (!*((_WORD *)a3 + 2))
  {
    v12 = 0;
    if (!*((_WORD *)a3 + 3) && *a3 <= 1u)
    {
      v75 = 64;
      v12 = 1;
    }
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 80))(*a2);
  v14 = *(_QWORD *)(*a4 + 16);
  if (v13)
  {
    if (v14 >= 0xF98F)
    {
      *(_DWORD *)a6 = 4;
      *(_QWORD *)(a6 + 8) = "src/transport/SessionManager.cpp";
      v15 = 211;
LABEL_22:
      *(_DWORD *)(a6 + 16) = v15;
      goto LABEL_37;
    }
  }
  else if (v14 >= 0x49B)
  {
    *(_DWORD *)a6 = 4;
    *(_QWORD *)(a6 + 8) = "src/transport/SessionManager.cpp";
    v15 = 215;
    goto LABEL_22;
  }
  v64 = xmmword_25615DD84;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  if (v16 == 1)
  {
    LODWORD(v93) = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)a6 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 264) + 24))(a1 + 264, &v93);
    if (*(_DWORD *)a6)
      goto LABEL_37;
    v67 = v93;
    v32 = sub_2341CD430(*a2);
    LODWORD(v33) = *(_DWORD *)(v32 + 56);
    if ((_DWORD)v33 == 1)
    {
      v41 = *(_QWORD *)(v32 + 48);
      v70 = 1;
      v71 = v41;
    }
    else
    {
      if ((_DWORD)v33)
      {
LABEL_43:
        v42 = sub_2341CD430(*a2);
        v64 = *(_OWORD *)(v42 + 60);
        v43 = *(_DWORD *)(v42 + 80);
        v65 = *(_DWORD *)(v42 + 76);
        v66 = v43;
        *(_DWORD *)buf = 2;
        *(_QWORD *)&buf[8] = a3;
        *(_QWORD *)&buf[16] = &v67;
        sub_233BF7114(v77, *(_QWORD *)(*a4 + 8), *(_QWORD *)(*a4 + 16));
        sub_2341C4A0C((uint64_t)buf);
        *(_QWORD *)a6 = 0;
        *(_QWORD *)(a6 + 8) = 0;
        *(_QWORD *)(a6 + 16) = 0;
        sub_2341F8EBC((uint64_t)a3, (_QWORD **)a4, (_QWORD *)a6);
        if (*(_DWORD *)a6)
          goto LABEL_37;
        v37 = 0;
        v31 = 0;
        goto LABEL_45;
      }
      v33 = *(_QWORD *)(v32 + 48);
      v68 = 1;
      v69 = v33;
      LOBYTE(v33) = 4;
    }
    HIBYTE(v74) |= v33;
    goto LABEL_43;
  }
  if (v16 != 2)
  {
    if (v16 == 4)
    {
      v17 = sub_2341CD4D8(*a2);
      v18 = sub_2341EF7E4();
      if (v18)
      {
        v19 = v18;
        v20 = sub_2341E2E70(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(v17 + 24));
        if (v20)
        {
          v21 = (unint64_t *)v20;
          v22 = *(_WORD *)(v17 + 44);
          v72 = 1;
          v73 = v22;
          HIBYTE(v74) |= 2u;
          v67 = sub_2341CAE4C(a1 + 184, v12);
          sub_2341CAE60(a1 + 184, v12, buf);
          BYTE2(v74) = 1;
          v23 = v75;
          v75 = v75 & 0xFC | 1;
          v24 = *v21;
          v68 = 1;
          v69 = v24;
          v25 = HIBYTE(v74);
          HIBYTE(v74) |= 4u;
          if ((v25 & 2) == 0 || (v23 & 0x40) != 0)
          {
            *(_DWORD *)a6 = 172;
            *(_QWORD *)(a6 + 8) = "src/transport/SessionManager.cpp";
            v40 = 244;
            goto LABEL_63;
          }
          v26 = v21[1];
          v27 = *(unsigned __int16 *)(v17 + 44);
          *(_QWORD *)buf = (v26 >> 8) | 0xFD00000000000000;
          *(_QWORD *)&v64 = sub_23410F1CC(5, 64, (uint64_t *)buf, v27 | ((_DWORD)v26 << 24));
          *((_QWORD *)&v64 + 1) = v28;
          LOBYTE(v65) = 1;
          HIWORD(v65) = 5540;
          v66 = 0;
          *(_DWORD *)buf = 0;
          *(_QWORD *)&buf[8] = a3;
          *(_QWORD *)&buf[16] = &v67;
          sub_233BF7114(v77, *(_QWORD *)(*a4 + 8), *(_QWORD *)(*a4 + 16));
          sub_2341C4A0C((uint64_t)buf);
          v29 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 224))(v19, *(unsigned __int8 *)(v17 + 24), *(unsigned __int16 *)(v17 + 44));
          if (!v29)
          {
            *(_DWORD *)a6 = 172;
            *(_QWORD *)(a6 + 8) = "src/transport/SessionManager.cpp";
            v40 = 257;
            goto LABEL_63;
          }
          v30 = v29;
          LOWORD(v74) = (**v29)(v29);
          sub_2341C9E24((uint64_t)__str, v75, v67, v24, (uint64_t)buf);
          v93 = 0uLL;
          *(_QWORD *)&v94 = 0;
          *(_OWORD *)&buf[8] = 0u;
          *(_OWORD *)v77 = 0u;
          v82 = 0;
          *(_QWORD *)v83 = v30;
          sub_2341CAFAC((uint64_t)buf, (uint64_t)__str, (uint64_t)a3, (uint64_t)&v67, a4, (uint64_t)&v93);
          sub_2341C9B18((uint64_t)buf);
          (*v30)[7](v30);
          *(_OWORD *)a6 = v93;
          *(_QWORD *)(a6 + 16) = v94;
          if (*(_DWORD *)a6)
            goto LABEL_37;
          v31 = *(unsigned __int16 *)(v17 + 44) | 0xFFFFFFFFFFFF0000;
          goto LABEL_31;
        }
        *(_DWORD *)a6 = 47;
        *(_QWORD *)(a6 + 8) = "src/transport/SessionManager.cpp";
        v38 = 233;
      }
      else
      {
        *(_DWORD *)a6 = 172;
        *(_QWORD *)(a6 + 8) = "src/transport/SessionManager.cpp";
        v38 = 230;
      }
    }
    else
    {
      *(_DWORD *)a6 = 172;
      *(_QWORD *)(a6 + 8) = "src/transport/SessionManager.cpp";
      v38 = 339;
    }
LABEL_36:
    *(_DWORD *)(a6 + 16) = v38;
    goto LABEL_37;
  }
  v34 = sub_2341CD3C0(*a2);
  if (!v34)
  {
    *(_DWORD *)a6 = 72;
    *(_QWORD *)(a6 + 8) = "src/transport/SessionManager.cpp";
    v38 = 276;
    goto LABEL_36;
  }
  v17 = v34;
  __str[0] = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)(v34 + 240) + 24))(v34 + 240, __str);
  if (*(_DWORD *)a6)
    goto LABEL_37;
  LOWORD(v74) = *(_WORD *)(v17 + 94);
  BYTE2(v74) = 0;
  v75 &= 0xFCu;
  v64 = *(_OWORD *)(v17 + 96);
  v35 = *(_DWORD *)(v17 + 116);
  v65 = *(_DWORD *)(v17 + 112);
  v66 = v35;
  v67 = __str[0];
  *(_DWORD *)buf = 1;
  *(_QWORD *)&buf[8] = a3;
  *(_QWORD *)&buf[16] = &v67;
  sub_233BF7114(v77, *(_QWORD *)(*a4 + 8), *(_QWORD *)(*a4 + 16));
  sub_2341C4A0C((uint64_t)buf);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
  sub_2341C9E24((uint64_t)&v93, v75, __str[0], v36, (uint64_t)buf);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  sub_2341CAFAC(v17 + 168, (uint64_t)&v93, (uint64_t)a3, (uint64_t)&v67, a4, a6);
  if (*(_DWORD *)a6)
    goto LABEL_37;
  v31 = *(_QWORD *)(v17 + 72);
LABEL_31:
  v37 = *(unsigned __int8 *)(v17 + 24);
LABEL_45:
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  sub_2341F8C80(&v67, (_QWORD **)a4, (_QWORD *)a6);
  if (*(_DWORD *)a6)
    goto LABEL_37;
  if (v37 && (v44 = *(_QWORD *)(a1 + 32)) != 0 && (v45 = sub_2341E2E70(v44, v37)) != 0)
    v46 = *(unsigned __int16 *)(v45 + 16);
  else
    v46 = 0;
  v47 = sub_234216AC8(*((unsigned int *)a3 + 1));
  v61 = sub_234216B00(*((unsigned int *)a3 + 1), *a3);
  LOBYTE(__str[0]) = 0;
  if (a3[12])
  {
    v48 = sub_233C20E2C(a3 + 12);
    snprintf((char *)__str, 0x14uLL, " (Ack:%u)", *(_DWORD *)v48);
  }
  v95 = 0u;
  memset(v96, 0, sizeof(v96));
  v93 = 0u;
  v94 = 0u;
  sub_23412A258((uint64_t)&v64, (char *)&v93, 0x4CuLL);
  snprintf(v92, 8uLL, "%04X:%02X", *((unsigned __int16 *)a3 + 3), *a3);
  v49 = 105;
  if ((a3[8] & 1) == 0)
    v49 = 114;
  snprintf(v63, 7uLL, "%u%c", *((unsigned __int16 *)a3 + 1), v49);
  v50 = sub_234117B80(5u, "ExchangeManager");
  v60 = HIDWORD(v31);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    v51 = sub_2341CD5E0(*a2);
    v59 = v37;
    v52 = v47;
    v53 = v31;
    v54 = v46;
    v55 = v67;
    v56 = sub_2341CD660(a2);
    v57 = *(_QWORD *)(*a4 + 16);
    *(_DWORD *)buf = 136318466;
    *(_QWORD *)&buf[4] = v63;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v51;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v55;
    *(_WORD *)v77 = 2080;
    *(_QWORD *)&v77[2] = __str;
    *(_WORD *)&v77[10] = 2080;
    *(_QWORD *)&v77[12] = v56;
    v78 = 1024;
    v79 = v59;
    v80 = 1024;
    v81 = v60;
    LOWORD(v82) = 1024;
    *(_DWORD *)((char *)&v82 + 2) = v53;
    HIWORD(v82) = 1024;
    *(_DWORD *)v83 = v54;
    *(_WORD *)&v83[4] = 2080;
    *(_QWORD *)&v83[6] = &v93;
    v84 = 2080;
    v85 = v92;
    v86 = 2080;
    v87 = v52;
    v88 = 2080;
    v89 = v61;
    v90 = 1024;
    v91 = v57;
    _os_log_impl(&dword_233BF3000, v50, OS_LOG_TYPE_DEFAULT, "<<< [E:%s S:%u M:%u%s] (%s) Msg TX to %u:%08X%08X [%04X] [%s] --- Type %s (%s:%s) (B:%u)", buf, 0x72u);
  }
  if (sub_234114844(2u))
  {
    sub_2341CD5E0(*a2);
    sub_2341CD660(a2);
    sub_2341147D0(5u, 2);
  }
  v58 = (_QWORD *)*a4;
  *a4 = 0;
  if (*a5)
    sub_23411814C(*a5);
  *a5 = (uint64_t)v58;
  *(_DWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = "src/transport/SessionManager.cpp";
  v40 = 399;
LABEL_63:
  *(_DWORD *)(a6 + 16) = v40;
LABEL_37:
  v39 = sub_2341C4608();
  if (os_signpost_enabled(v39))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "SessionManager";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "PrepareMessage";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v39, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341CE998(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  char v20;
  NSObject *v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  char *v32;
  NSObject *v33;
  _QWORD *v34;
  __n128 v35;
  int v36;
  uint64_t *v37;
  __int128 v38;
  char v39;
  __int16 v40;
  int v41;
  uint8_t v42[16];
  __int128 v43;
  __int128 v44;
  _BYTE v45[28];
  char v46[16];
  _BYTE buf[24];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 176) != 1)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
    v15 = 405;
    goto LABEL_55;
  }
  if (!*a3)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
    v15 = 406;
    goto LABEL_55;
  }
  v38 = xmmword_25615DD84;
  v39 = 0;
  v40 = 5540;
  v41 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  if (v8 == 1)
  {
    v16 = sub_2341CD430(*a2);
    *(_QWORD *)(v16 + 88) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    v14 = (__int128 *)(v16 + 60);
  }
  else
  {
    if (v8 != 2)
    {
      if (v8 == 4)
      {
        v9 = sub_2341CD4D8(*a2);
        v10 = sub_2341E2E70(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(v9 + 24));
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          v12 = *(unsigned __int16 *)(v9 + 44);
          *(_QWORD *)v42 = (v11 >> 8) | 0xFD00000000000000;
          *(_QWORD *)&v38 = sub_23410F1CC(5, 64, (uint64_t *)v42, v12 | ((_DWORD)v11 << 24));
          *((_QWORD *)&v38 + 1) = v13;
          v39 = 1;
          v40 = 5540;
          v14 = &v38;
          v41 = 0;
          goto LABEL_12;
        }
        *(_DWORD *)a4 = 47;
        *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
        v15 = 417;
      }
      else
      {
        *(_DWORD *)a4 = 172;
        *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
        v15 = 440;
      }
LABEL_55:
      *(_DWORD *)(a4 + 16) = v15;
      return;
    }
    v17 = sub_2341CD3C0(*a2);
    *(_QWORD *)(v17 + 120) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    v14 = (__int128 *)(v17 + 96);
  }
LABEL_12:
  sub_234118648(*a3);
  v18 = (uint64_t *)*a3;
  v37 = v18;
  if (!v18)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
    v19 = 444;
    goto LABEL_17;
  }
  if (*v18)
  {
    *(_DWORD *)a4 = 24;
    *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
    v19 = 445;
    goto LABEL_17;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) != 4)
  {
LABEL_65:
    v30 = *(_QWORD *)(a1 + 248);
    if (v30)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      sub_2341D3AB8(v30);
      if (*(_DWORD *)a4)
      {
        v44 = 0u;
        memset(v45, 0, sizeof(v45));
        *(_OWORD *)v42 = 0u;
        v43 = 0u;
        sub_23412A258((uint64_t)v14, (char *)v42, 0x4CuLL);
        v31 = sub_234117B80(1u, "Inet");
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)buf = *(_OWORD *)a4;
          *(_QWORD *)&buf[16] = *(_QWORD *)(a4 + 16);
          v32 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v42;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v32;
          _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_ERROR, "SendMessage() to %s failed: %s", buf, 0x16u);
        }
        if (sub_234114844(1u))
        {
          *(_OWORD *)buf = *(_OWORD *)a4;
          *(_QWORD *)&buf[16] = *(_QWORD *)(a4 + 16);
          sub_2341083CC((const char **)buf, 1);
          sub_2341147D0(1u, 1);
        }
      }
      goto LABEL_18;
    }
    v33 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_233BF3000, v33, OS_LOG_TYPE_ERROR, "The transport manager is not initialized. Unable to send the message", v42, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(1u, 1);
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
    v19 = 515;
LABEL_17:
    *(_DWORD *)(a4 + 16) = v19;
    goto LABEL_18;
  }
  sub_23410F798((uint64_t)v42);
  v36 = 0;
  if (!sub_23410F7F8((uint64_t)v42))
  {
LABEL_60:
    v29 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_ERROR, "No valid Interface found.. Sending to the default one.. ", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(1u, 1);
    sub_23410F7A4(v42);
    goto LABEL_65;
  }
  v20 = 0;
  do
  {
    sub_23410F8B0((uint64_t *)v42, v46, 0x10uLL, (uint64_t)buf);
    if (!sub_23410FA7C((uint64_t)v42))
      continue;
    if (!sub_23410F97C((uint64_t)v42))
      continue;
    sub_23410F860((if_nameindex *)v42, buf);
    v36 = *(_DWORD *)buf;
    sub_23410FF74((uint64_t)&v36, &v35, (uint64_t)buf);
    if (*(_DWORD *)buf)
      continue;
    v21 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v46;
      _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_INFO, "Interface %s has a link local address", buf, 0xCu);
    }
    if (sub_234114844(3u))
      sub_2341147D0(1u, 3);
    sub_234118944(&v37, &v34);
    if (!v34)
    {
      v22 = 0;
      *(_DWORD *)a4 = 47;
      *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
      v23 = 468;
      goto LABEL_34;
    }
    if (!*v34)
    {
      v41 = v36;
      v24 = *(_QWORD *)(a1 + 248);
      if (!v24)
        goto LABEL_53;
      sub_2341D3AB8(v24);
      v25 = *(_DWORD *)buf;
      v26 = sub_234117B80(1u, "Inet");
      v27 = v26;
      if (v25)
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v46;
          _os_log_impl(&dword_233BF3000, v27, OS_LOG_TYPE_ERROR, "Failed to send Multicast message on interface %s", buf, 0xCu);
        }
        v22 = 1;
        if (!sub_234114844(1u))
          goto LABEL_52;
        v28 = 1;
      }
      else
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v46;
          _os_log_impl(&dword_233BF3000, v27, OS_LOG_TYPE_INFO, "Successfully send Multicast message on interface %s", buf, 0xCu);
        }
        if (!sub_234114844(3u))
        {
LABEL_53:
          v14 = &v38;
          v22 = 1;
          goto LABEL_35;
        }
        v22 = 1;
        v28 = 3;
      }
      sub_2341147D0(1u, v28);
LABEL_52:
      v14 = &v38;
      goto LABEL_35;
    }
    v22 = 0;
    *(_DWORD *)a4 = 24;
    *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
    v23 = 469;
LABEL_34:
    *(_DWORD *)(a4 + 16) = v23;
LABEL_35:
    if (v34)
      sub_23411814C((uint64_t)v34);
    if ((v22 & 1) == 0)
      goto LABEL_59;
    v20 = 1;
  }
  while ((sub_23410F7F8((uint64_t)v42) & 1) != 0);
  if ((v20 & 1) == 0)
    goto LABEL_60;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
  *(_DWORD *)(a4 + 16) = 494;
LABEL_59:
  sub_23410F7A4(v42);
LABEL_18:
  if (v37)
    sub_23411814C((uint64_t)v37);
}

uint64_t sub_2341CF0CC(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v9;
  uint8_t buf[8];
  char *v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *a2;
    v6 = HIDWORD(*a2);
    v7 = *((unsigned __int8 *)a2 + 8);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v6;
    LOWORD(v11) = 1024;
    *(_DWORD *)((char *)&v11 + 2) = v5;
    HIWORD(v11) = 1024;
    v12 = v7;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Expiring all sessions for node <%08X%08X, %d>!!", buf, 0x14u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  *(_QWORD *)buf = a2;
  v11 = &v9;
  return sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_2341D2FDC);
}

uint64_t sub_2341CF1EC(uint64_t a1, int a2)
{
  NSObject *v4;
  char v6;
  char v7;
  uint8_t buf[8];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Expiring all sessions for fabric 0x%x!!", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  v7 = a2;
  *(_QWORD *)buf = &v7;
  v9 = &v6;
  return sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_2341D3034);
}

uint64_t sub_2341CF2E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  char v13;
  _QWORD v14[3];
  uint64_t v15;
  _QWORD v16[6];
  uint8_t buf[8];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *a2;
    v8 = HIDWORD(*a2);
    v9 = *((unsigned __int8 *)a2 + 8);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v8;
    v18 = 1024;
    v19 = v7;
    v20 = 1024;
    v21 = v9;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "Expiring all sessions to peer <%08X%08X, %d> that are on the same logical fabric!!", buf, 0x14u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  *(_QWORD *)buf = &off_250505A50;
  result = sub_2341E2E70(*(_QWORD *)(a1 + 32), *((unsigned __int8 *)a2 + 8));
  v15 = result;
  if (result)
  {
    memset(v14, 0, sizeof(v14));
    sub_2341E2710(result, (uint64_t)buf, (uint64_t)v14);
    if (LODWORD(v14[0]))
      sub_23425DA40(v11);
    v16[0] = a1;
    v16[1] = v14;
    v16[2] = buf;
    v16[3] = &v15;
    v16[4] = a2;
    v16[5] = &v13;
    result = sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)v16, (unsigned int (*)(uint64_t))sub_2341D3064);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/transport/SessionManager.h";
    v12 = 294;
  }
  else
  {
    *(_DWORD *)a3 = 113;
    *(_QWORD *)(a3 + 8) = "src/transport/SessionManager.h";
    v12 = 261;
  }
  *(_DWORD *)(a3 + 16) = v12;
  return result;
}

uint64_t sub_2341CF4A0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[5];
  uint8_t buf[8];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "Expiring all sessions on the same logical fabric as fabric 0x%x!!", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  *(_QWORD *)buf = &off_250505A50;
  result = sub_2341E2E70(*(_QWORD *)(a1 + 32), a2);
  v12 = result;
  if (result)
  {
    memset(v11, 0, sizeof(v11));
    sub_2341E2710(result, (uint64_t)buf, (uint64_t)v11);
    if (LODWORD(v11[0]))
      sub_23425DAD4(v8);
    v13[0] = a1;
    v13[1] = v11;
    v13[2] = buf;
    v13[3] = &v12;
    v13[4] = &v10;
    result = sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)v13, (unsigned int (*)(uint64_t))sub_2341D3174);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/transport/SessionManager.h";
    v9 = 345;
  }
  else
  {
    *(_DWORD *)a3 = 113;
    *(_QWORD *)(a3 + 8) = "src/transport/SessionManager.h";
    v9 = 313;
  }
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_2341CF624(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[15];
  char v5;

  v2 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "Expiring all PASE sessions", v4, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  return sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)&v5, (unsigned int (*)(uint64_t))sub_2341D3270);
}

uint64_t sub_2341CF6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_2341D32B4);
}

uint64_t sub_2341CF6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_2341D3360);
}

uint64_t sub_2341CF724@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  if (*(_DWORD *)(result + 176) == 1)
    return sub_2341CC220(result + 104, a2, *a3, a3[1], (uint64_t)a4);
  *a4 = 0;
  return result;
}

uint64_t sub_2341CF748@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, __int16 a5@<W4>, char a6@<W5>, __int128 *a7@<X6>, int a8@<W7>, _QWORD *a9@<X8>)
{
  unint64_t *v18;
  int v19;
  const char **v20;
  uint64_t result;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  const char *v27;
  uint64_t v28;
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v18 = (unint64_t *)(a1 + 104);
  sub_2341B1BB8((uint64_t)&v31);
  v27 = (const char *)sub_2341B1C28();
  LODWORD(v28) = v19;
  if ((_BYTE)v31)
    v20 = (const char **)sub_233C0FDD4(&v31);
  else
    v20 = &v27;
  result = (uint64_t)sub_2341CC078(v18, 1, a3, 0, a4, 0, 0, a5, (uint64_t)v29, a6, (uint64_t)v20);
  if (v29[0])
  {
    v22 = (uint64_t *)sub_233CB6588(v29);
    v23 = sub_2341CD3C0(*v22);
    v24 = *a7;
    *(_DWORD *)(v23 + 112) = *((_DWORD *)a7 + 4);
    *(_OWORD *)(v23 + 96) = v24;
    *(_DWORD *)(v23 + 116) = *((_DWORD *)a7 + 5);
    v27 = "Test secret for key derivation.";
    v28 = 32;
    a9[1] = 0;
    a9[2] = 0;
    *a9 = 0;
    v25 = *(_QWORD *)(a1 + 40);
    v31 = 0;
    v32 = 0;
    result = sub_2341C9B1C(v23 + 168, v25, (uint64_t)&v27, (uint64_t)&v31, 0, a8, (uint64_t)a9);
    if (!*(_DWORD *)a9)
    {
      *(_DWORD *)(v23 + 256) = 2;
      *(_QWORD *)(v23 + 264) = 0;
      *(_QWORD *)(v23 + 272) = 0;
      v31 = v23 + 272;
      LODWORD(v32) = 0;
      sub_2341313BC(&v31, 0x20uLL);
      v26 = (uint64_t *)sub_233CB6588(v29);
      result = sub_2341CDA90(a2, v26);
      *(_DWORD *)a9 = 0;
      a9[1] = "src/transport/SessionManager.cpp";
      *((_DWORD *)a9 + 4) = 617;
    }
    if (v29[0])
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
  }
  else
  {
    *(_DWORD *)a9 = 11;
    a9[1] = "src/transport/SessionManager.cpp";
    *((_DWORD *)a9 + 4) = 607;
  }
  return result;
}

uint64_t sub_2341CF90C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int16 a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, __int128 *a8@<X7>, _QWORD *a9@<X8>, unsigned __int8 a10, uint64_t a11)
{
  unint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  const char **v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  const char *v31;
  uint64_t v32;
  _BYTE v33[8];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v18 = (unint64_t *)(a1 + 104);
  v19 = *(_QWORD *)a11;
  v20 = *(_DWORD *)(a11 + 8);
  sub_2341B1BB8((uint64_t)&v35);
  v31 = (const char *)sub_2341B1C28();
  LODWORD(v32) = v21;
  if ((_BYTE)v35)
    v22 = (const char **)sub_233C0FDD4(&v35);
  else
    v22 = &v31;
  result = (uint64_t)sub_2341CC078(v18, 2, a3, a5, a6, v19, v20, a4, (uint64_t)v33, a7, (uint64_t)v22);
  if (v33[0])
  {
    v24 = (uint64_t *)sub_233CB6588(v33);
    v25 = sub_2341CD3C0(*v24);
    v26 = *a8;
    *(_DWORD *)(v25 + 112) = *((_DWORD *)a8 + 4);
    *(_OWORD *)(v25 + 96) = v26;
    *(_DWORD *)(v25 + 116) = *((_DWORD *)a8 + 5);
    v31 = "Test secret for key derivation.";
    v32 = 32;
    a9[1] = 0;
    a9[2] = 0;
    *a9 = 0;
    v27 = *(_QWORD *)(a1 + 40);
    v35 = 0;
    v36 = 0;
    result = sub_2341C9B1C(v25 + 168, v27, (uint64_t)&v31, (uint64_t)&v35, 0, a10, (uint64_t)a9);
    if (!*(_DWORD *)a9)
    {
      *(_DWORD *)(v25 + 256) = 2;
      *(_QWORD *)(v25 + 264) = 0;
      *(_QWORD *)(v25 + 272) = 0;
      v35 = v25 + 272;
      LODWORD(v36) = 0;
      sub_2341313BC(&v35, 0x20uLL);
      v28 = (uint64_t *)sub_233CB6588(v33);
      result = sub_2341CDA90(a2, v28);
      *(_DWORD *)a9 = 0;
      a9[1] = "src/transport/SessionManager.cpp";
      *((_DWORD *)a9 + 4) = 638;
    }
    if (v33[0])
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
  }
  else
  {
    *(_DWORD *)a9 = 11;
    a9[1] = "src/transport/SessionManager.cpp";
    *((_DWORD *)a9 + 4) = 628;
  }
  return result;
}

void sub_2341CFAE4(uint64_t a1, __int128 *a2, uint64_t **a3, const char **a4)
{
  NSObject *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  char v15;
  int v16;
  char v17;
  uint8_t buf[16];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v10 = 0uLL;
  v11 = 0;
  sub_2341F8510((uint64_t)&v12, (uint64_t)a3, (uint64_t)&v10);
  if ((_DWORD)v10)
  {
    v8 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v10;
      v19 = v11;
      v9 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Failed to decode packet header: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v10;
      v19 = v11;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(1u, 1);
    }
  }
  else if ((_WORD)v16 || BYTE2(v16))
  {
    if (BYTE2(v16) == 1)
      sub_2341CFC88(a1, (uint64_t)&v12, (uint64_t)a2, a3);
    else
      sub_2341D0634(a1, (uint64_t)&v12, a2, (uint64_t *)a3, a4);
  }
  else
  {
    sub_2341D0EF0(a1, (uint64_t)&v12, (uint64_t)a2, a3, (uint64_t *)a4);
  }
}

void sub_2341CFC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  NSObject *v23;
  NSObject *v24;
  int v25;
  uint64_t *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  int v31;
  NSObject *v32;
  char *v33;
  unsigned __int16 v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint8_t v39[8];
  _BYTE *v40;
  int *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  unsigned __int8 v48;
  char v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  _BYTE v53[36];
  int v54;
  unsigned __int8 v55;
  _BYTE v56[2];
  __int16 v57;
  int v58;
  char v59;
  char v60;
  uint8_t buf[24];
  __int128 v62;
  int v63;
  unsigned __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "SessionManager";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Group Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v56[0] = 0;
  v57 = 0;
  v60 = 0;
  v59 = 16;
  v58 = -1;
  v52 = 0;
  v53[0] = 0;
  v53[16] = 0;
  v53[32] = 0;
  v54 = 0;
  v55 = 0;
  v51 = 0;
  v9 = sub_2341EF7E4();
  if (!v9)
    goto LABEL_17;
  v69 = xmmword_250514A44;
  v70 = 0;
  v10 = *(unsigned __int8 *)(a2 + 47);
  if ((v10 & 2) == 0)
    goto LABEL_17;
  if (*(_BYTE *)(a2 + 46) != 1
    || ((~v10 & 5) != 0 || (*(_BYTE *)(a2 + 48) & 0x40) == 0) && ((~v10 & 6) != 0 || (*(_BYTE *)(a2 + 48) & 0x40) != 0))
  {
    v15 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Invalid condition found in packet header", buf, 2u);
    }
    if (sub_234114844(1u))
      goto LABEL_16;
    goto LABEL_17;
  }
  v47 = 0;
  v50 = 0;
  v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 216))(v9, *(unsigned __int16 *)(a2 + 44));
  if (!v11)
  {
    v17 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Failed to retrieve Groups iterator. Discarding everything", buf, 2u);
    }
    if (sub_234114844(1u))
      goto LABEL_16;
    goto LABEL_17;
  }
  v12 = v11;
  v13 = (*a4)[3];
  v14 = (*(unsigned __int16 *)(a2 + 44) | *(unsigned __int8 *)(a2 + 46)) != 0;
  if (v13 < 16 * (unint64_t)((*(unsigned __int16 *)(a2 + 44) | *(unsigned __int8 *)(a2 + 46)) != 0)
    || (v18 = (*a4)[1],
        v19 = 16 * ((*(unsigned __int16 *)(a2 + 44) | *(unsigned __int8 *)(a2 + 46)) != 0),
        v46 = 0,
        memset(buf, 0, sizeof(buf)),
        sub_2341F8FB0(&v68, a2, (_OWORD *)(v18 + v13 - v19), 16 * v14, &v46, (uint64_t)buf),
        *(_DWORD *)buf)
    || v46 != (_DWORD)v19)
  {
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    goto LABEL_17;
  }
  if (!(*(unsigned int (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v12 + 24))(v12, &v47))
  {
LABEL_40:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    v23 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "Failed to decrypt group message. Discarding everything", buf, 2u);
    }
    if (!sub_234114844(1u))
      goto LABEL_17;
    goto LABEL_16;
  }
  while (1)
  {
    *(_OWORD *)&buf[8] = 0u;
    v62 = 0u;
    v66 = 0;
    v67 = v50;
    sub_234118944(a4, v39);
    if (v51)
      sub_23411814C((uint64_t)v51);
    v51 = *(uint64_t **)v39;
    if (!*(_QWORD *)v39)
    {
      v24 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v39 = 0;
        _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_ERROR, "Failed to clone Groupcast message buffer. Discarding.", v39, 2u);
      }
      if (!sub_234114844(1u))
        goto LABEL_48;
LABEL_47:
      sub_2341147D0(1u, 1);
LABEL_48:
      sub_2341C9B18((uint64_t)buf);
      goto LABEL_12;
    }
    v20 = *(unsigned __int8 *)(a2 + 48);
    v21 = sub_2341D227C(a2, (uint64_t)&v52, (uint64_t)v56, v20 >> 7, (uint64_t *)&v51, (uint64_t)&v68, &v47);
    v22 = v21;
    if ((v20 & 0x80) != 0 && !v21)
    {
      sub_234118944(a4, v39);
      if (v51)
        sub_23411814C((uint64_t)v51);
      v51 = *(uint64_t **)v39;
      if (!*(_QWORD *)v39)
      {
        v28 = sub_234117B80(1u, "Inet");
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v39 = 0;
          _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "Failed to clone Groupcast message buffer. Discarding.", v39, 2u);
        }
        if (!sub_234114844(1u))
          goto LABEL_48;
        goto LABEL_47;
      }
      v22 = sub_2341D227C(a2, (uint64_t)&v52, (uint64_t)v56, 0, (uint64_t *)&v51, (uint64_t)&v68, &v47);
    }
    sub_2341C9B18((uint64_t)buf);
    if (v22)
      break;
    if (!(*(unsigned int (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v12 + 24))(v12, &v47))
      goto LABEL_40;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  if (*a4)
    sub_23411814C((uint64_t)*a4);
  *a4 = v51;
  v51 = 0;
  if (BYTE2(v54) == 1 && (~HIBYTE(v54) & 5) == 0 && (v55 & 0x40) != 0)
    goto LABEL_17;
  if ((v59 & 4) != 0)
  {
    v29 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_ERROR, "Unexpected ACK requested for group message", buf, 2u);
    }
    if (sub_234114844(1u))
      goto LABEL_16;
    goto LABEL_17;
  }
  v45 = 0;
  if (!byte_25615DA00)
  {
    *((_BYTE *)&unk_25615B780 + 8832) = 1;
    sub_2341D2F64((char *)&unk_25615B780);
  }
  v25 = v48;
  v26 = (uint64_t *)sub_233C25EA4(v53);
  sub_2341CA6F4((uint64_t)&unk_25615B780, v25, *v26, (v55 >> 6) & 1, &v45, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    if (v49)
    {
      v30 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v30, OS_LOG_TYPE_ERROR, "Received Group Msg with key policy Cache and Sync, but MCSP is not implemented", buf, 2u);
      }
      if (sub_234114844(1u))
        goto LABEL_16;
      goto LABEL_17;
    }
    sub_2341D2450(v45, v52, (uint64_t)buf);
    v69 = *(_OWORD *)&buf[4];
    v31 = *(_DWORD *)buf;
    v70 = *(_DWORD *)&buf[20];
    if (!*(_DWORD *)buf)
    {
      sub_2341D2718(v45, v52);
      if (*(_QWORD *)(a1 + 232))
      {
        v34 = v47;
        v35 = v48;
        v36 = *(_QWORD *)sub_233C25EA4(v53);
        *(_QWORD *)&buf[16] = &buf[8];
        *((_QWORD *)&v62 + 1) = 0;
        v63 = 0;
        *(_QWORD *)buf = &unk_250514AF8;
        *(_QWORD *)&buf[8] = &buf[8];
        v64 = v34;
        v65 = v36;
        LOBYTE(v62) = v35;
        *(_DWORD *)v39 = 0;
        v40 = v56;
        v41 = &v52;
        v42 = buf;
        v43 = a3;
        sub_233BF7114(&v44, (*a4)[1], (*a4)[2]);
        sub_2341C4A6C((uint64_t)v39);
        v37 = *(_QWORD *)(a1 + 232);
        *(_QWORD *)v39 = buf;
        (*(void (**)(uint8_t *))(*(_QWORD *)buf + 24))(buf);
        (*(void (**)(uint64_t, int *, _BYTE *, uint8_t *, uint64_t, uint64_t **))(*(_QWORD *)v37 + 16))(v37, &v52, v56, v39, 1, a4);
        (*(void (**)(_QWORD))(**(_QWORD **)v39 + 32))(*(_QWORD *)v39);
        sub_2341D2F0C((uint64_t)buf);
      }
      else
      {
        v38 = sub_234117B80(1u, "Inet");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v38, OS_LOG_TYPE_ERROR, "Received GROUP message was not processed.", buf, 2u);
        }
        if (sub_234114844(1u))
          goto LABEL_16;
      }
      goto LABEL_17;
    }
    v32 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)&buf[4] = v69;
      *(_DWORD *)buf = v31;
      *(_DWORD *)&buf[20] = v70;
      v33 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v33;
      _os_log_impl(&dword_233BF3000, v32, OS_LOG_TYPE_ERROR, "Message counter verify failed, err = %s", buf, 0xCu);
    }
    if (!sub_234114844(1u))
      goto LABEL_17;
    *(_OWORD *)&buf[4] = v69;
    *(_DWORD *)buf = v31;
    *(_DWORD *)&buf[20] = v70;
    sub_2341083CC((const char **)buf, 1);
LABEL_16:
    sub_2341147D0(1u, 1);
    goto LABEL_17;
  }
  v27 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v27, OS_LOG_TYPE_ERROR, "Group Counter Tables full or invalid NodeId/FabricIndex after decryption of message, dropping everything", buf, 2u);
  }
  if (sub_234114844(1u))
    goto LABEL_16;
LABEL_17:
  if (v51)
    sub_23411814C((uint64_t)v51);
  v16 = sub_2341C4608();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "SessionManager";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Group Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341D0634(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4, const char **a5)
{
  NSObject *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  const char *v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  unsigned int v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  NSObject *v39;
  char *v40;
  NSObject *v41;
  _BYTE v42[2];
  unsigned __int16 v43;
  int v44;
  char v45;
  char v46;
  __int128 v47;
  int v48;
  int v49;
  char v50[8];
  uint64_t v51;
  __int128 v52;
  uint8_t *v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56[3];
  uint8_t v57[13];
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  const char *v61;
  char v62;
  char v63;
  int v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    v59 = "SessionManager";
    v60 = 2080;
    v61 = "Secure Unicast Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*((_BYTE *)a3 + 16) != 3 || *a5)
  {
    sub_2341CCD94(a1 + 104, *(_WORD *)(a2 + 44), (uint64_t)v50);
    if (v50[0])
    {
      v11 = (uint64_t *)sub_233CB6588(v50);
      v12 = sub_2341CD3C0(*v11);
      v47 = *a3;
      v13 = *((_DWORD *)a3 + 5);
      v48 = *((_DWORD *)a3 + 4);
      v49 = v13;
      if (!sub_23410EF74(&v47))
        v49 = 0;
      if (!sub_2341D2CD4(v12 + 96, (uint64_t)&v47))
      {
        *(_OWORD *)(v12 + 96) = v47;
        v14 = v49;
        *(_DWORD *)(v12 + 112) = v48;
        *(_DWORD *)(v12 + 116) = v14;
      }
      if (*((_BYTE *)a3 + 16) == 3)
      {
        v15 = *(const char **)(v12 + 32);
        v16 = *a5;
        if (v15)
        {
          if (v15 != v16)
          {
            v17 = sub_234117B80(1u, "Inet");
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              v18 = *a5;
              *(_DWORD *)buf = 134217984;
              v59 = v18;
              _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Data received over wrong connection %p. Dropping it!", buf, 0xCu);
            }
            if (!sub_234114844(1u))
              goto LABEL_38;
            goto LABEL_37;
          }
        }
        else
        {
          *(_QWORD *)(v12 + 32) = v16;
        }
      }
      v42[0] = 0;
      v43 = 0;
      v46 = 0;
      v45 = 16;
      v44 = -1;
      if (*(char *)(a2 + 48) < 0)
      {
        v23 = sub_234117B80(1u, "Inet");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "Dropping secure unicast message with privacy flag set", buf, 2u);
        }
        if (!sub_234114844(1u))
          goto LABEL_38;
      }
      else
      {
        *(_DWORD *)buf = 0;
        BYTE4(v59) = 0;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v52 = 0uLL;
        v53 = 0;
        sub_2341F87E4((uint64_t)buf, (_QWORD **)a4, &v52);
        if ((_DWORD)v52)
          goto LABEL_38;
        if (*a4)
        {
          if (*(_BYTE *)(v12 + 56) == 3
            || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) & 1) != 0
            || *(_BYTE *)(v12 + 56) == 4)
          {
            if (*(_BYTE *)(v12 + 57) == 2)
              v22 = *(_QWORD *)(v12 + 72);
            else
              v22 = 0;
            sub_2341C9E24((uint64_t)v57, v65, *(unsigned int *)buf, v22, (uint64_t)&v52);
            sub_2341CB130(v12 + 168, (uint64_t)v57, (uint64_t)v42, (uint64_t)buf, a4, (uint64_t)&v52);
            if ((_DWORD)v52)
            {
              v26 = sub_234117B80(1u, "Inet");
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v52) = 0;
                _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_ERROR, "Secure transport received message, but failed to decode/authenticate it, discarding", (uint8_t *)&v52, 2u);
              }
              if (!sub_234114844(1u))
                goto LABEL_38;
              goto LABEL_37;
            }
            sub_2341D21F8((_DWORD *)(v12 + 256), *(unsigned int *)buf, (uint64_t)&v52);
            v27 = v52;
            if ((_DWORD)v52)
            {
              if ((_DWORD)v52 != 196)
              {
                v35 = DWORD1(v52);
                v36 = *((_QWORD *)&v52 + 1);
                v37 = v53;
                v38 = HIDWORD(v53);
                v39 = sub_234117B80(1u, "Inet");
                if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                {
                  *(_QWORD *)&v52 = __PAIR64__(v35, v27);
                  *((_QWORD *)&v52 + 1) = v36;
                  v53 = (uint8_t *)__PAIR64__(v38, v37);
                  v40 = sub_2341083CC((const char **)&v52, 1);
                  LODWORD(v52) = 136315138;
                  *(_QWORD *)((char *)&v52 + 4) = v40;
                  _os_log_impl(&dword_233BF3000, v39, OS_LOG_TYPE_ERROR, "Message counter verify failed, err = %s", (uint8_t *)&v52, 0xCu);
                }
                if (!sub_234114844(1u))
                  goto LABEL_38;
                *(_QWORD *)&v52 = __PAIR64__(v35, v27);
                *((_QWORD *)&v52 + 1) = v36;
                v53 = (uint8_t *)__PAIR64__(v38, v37);
                sub_2341083CC((const char **)&v52, 1);
                goto LABEL_37;
              }
              v28 = sub_234117B80(1u, "Inet");
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                if ((v45 & 1) != 0)
                  v29 = 114;
                else
                  v29 = 105;
                LODWORD(v52) = 67109632;
                DWORD1(v52) = *(_DWORD *)buf;
                WORD4(v52) = 1024;
                *(_DWORD *)((char *)&v52 + 10) = v43;
                HIWORD(v52) = 1024;
                LODWORD(v53) = v29;
                _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_INFO, "Received a duplicate message with MessageCounter:%u on exchange %u%c", (uint8_t *)&v52, 0x14u);
              }
              if (sub_234114844(3u))
                sub_2341147D0(1u, 3);
              sub_2341CB520(v12);
              if ((v45 & 4) == 0)
                goto LABEL_38;
              v30 = 0;
            }
            else
            {
              sub_2341CB520(v12);
              sub_2341D2250(v12 + 256, *(unsigned int *)buf);
              v30 = 1;
            }
            if (*(_QWORD *)(a1 + 232))
            {
              LODWORD(v52) = 1;
              *((_QWORD *)&v52 + 1) = v42;
              v53 = buf;
              v54 = v12;
              v55 = a3;
              sub_233BF7114(v56, *(_QWORD *)(*a4 + 8), *(_QWORD *)(*a4 + 16));
              sub_2341C4A6C((uint64_t)&v52);
              v33 = *(_QWORD *)(a1 + 232);
              v34 = sub_233CB6588(v50);
              (*(void (**)(uint64_t, uint8_t *, _BYTE *, _BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v33 + 16))(v33, buf, v42, v34, v30, a4);
LABEL_38:
              if (v50[0])
                (*(void (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51);
              goto LABEL_40;
            }
            v41 = sub_234117B80(1u, "Inet");
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              LOWORD(v52) = 0;
              _os_log_impl(&dword_233BF3000, v41, OS_LOG_TYPE_ERROR, "Received SECURED message was not processed.", (uint8_t *)&v52, 2u);
            }
            if (!sub_234114844(1u))
              goto LABEL_38;
          }
          else
          {
            v31 = sub_234117B80(1u, "Inet");
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              v32 = sub_2341CB794(v12, *(_BYTE *)(v12 + 56));
              LODWORD(v52) = 136315138;
              *(_QWORD *)((char *)&v52 + 4) = v32;
              _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_ERROR, "Secure transport received message on a session in an invalid state (state = '%s')", (uint8_t *)&v52, 0xCu);
            }
            if (!sub_234114844(1u))
              goto LABEL_38;
            sub_2341CB794(v12, *(_BYTE *)(v12 + 56));
          }
        }
        else
        {
          v25 = sub_234117B80(1u, "Inet");
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v52) = 0;
            _os_log_impl(&dword_233BF3000, v25, OS_LOG_TYPE_ERROR, "Secure transport received Unicast NULL packet, discarding", (uint8_t *)&v52, 2u);
          }
          if (!sub_234114844(1u))
            goto LABEL_38;
        }
      }
    }
    else
    {
      v19 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = *(unsigned __int16 *)(a2 + 44);
        *(_DWORD *)buf = 67109120;
        LODWORD(v59) = v20;
        _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "Data received on an unknown session (LSID=%d). Dropping it!", buf, 8u);
      }
      if (!sub_234114844(1u))
        goto LABEL_38;
    }
LABEL_37:
    sub_2341147D0(1u, 1);
    goto LABEL_38;
  }
  v21 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_ERROR, "Connection object is missing for received message.", buf, 2u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(1u, 1);
LABEL_40:
  v24 = sub_2341C4608();
  if (os_signpost_enabled(v24))
  {
    *(_DWORD *)buf = 136315394;
    v59 = "SessionManager";
    v60 = 2080;
    v61 = "Secure Unicast Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v24, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341D0EF0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4, uint64_t *a5)
{
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t *v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  NSObject *v29;
  int v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  _BYTE v45[2];
  unsigned __int16 v46;
  int v47;
  char v48;
  char v49;
  __int128 v50;
  int v51;
  int v52;
  _BYTE v53[8];
  uint64_t v54;
  _BYTE v55[8];
  uint64_t v56;
  _BYTE v57[8];
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[3];
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  _BYTE v66[10];
  char v67;
  uint64_t v68;
  char v69;
  int v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    v64 = "SessionManager";
    v65 = 2080;
    *(_QWORD *)v66 = "Unauthenticated Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*(_BYTE *)(a3 + 16) == 3 && !*a5)
  {
    v12 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Connection object is missing for received message.", buf, 2u);
    }
    if (!sub_234114844(1u))
      goto LABEL_19;
LABEL_17:
    v13 = 1;
LABEL_18:
    sub_2341147D0(1u, v13);
    goto LABEL_19;
  }
  if (*(char *)(a2 + 48) < 0)
  {
    v11 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Dropping unauthenticated message with privacy flag set", buf, 2u);
    }
    if (!sub_234114844(1u))
      goto LABEL_19;
    goto LABEL_17;
  }
  *(_DWORD *)buf = 0;
  BYTE4(v64) = 0;
  v67 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v59 = 0uLL;
  *(_QWORD *)&v60 = 0;
  sub_2341F87E4((uint64_t)buf, a4, &v59);
  if ((_DWORD)v59)
    goto LABEL_19;
  v57[0] = BYTE4(v64);
  if (BYTE4(v64))
  {
    v58 = *(_QWORD *)&v66[2];
    v55[0] = v67;
    if (v67)
    {
      v56 = v68;
      goto LABEL_29;
    }
    v53[0] = 0;
    v23 = *(_QWORD *)sub_233CB6588(v57);
    *(_QWORD *)&v50 = sub_2341B1C28();
    DWORD2(v50) = v24;
    sub_2341D1FE8((unint64_t *)(a1 + 48), v23, (uint64_t)&v50, (__int128 *)a3, (uint64_t)&v59);
    if (v53[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54);
    v53[0] = v59;
    if (!(_BYTE)v59
      || (v54 = *((_QWORD *)&v59 + 1),
          (*(void (**)(_QWORD))(**((_QWORD **)&v59 + 1) + 24))(*((_QWORD *)&v59 + 1)),
          (*(void (**)(_QWORD))(**((_QWORD **)&v59 + 1) + 32))(*((_QWORD *)&v59 + 1)),
          !v53[0]))
    {
      v29 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v59) = 0;
        _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_ERROR, "UnauthenticatedSession exhausted", (uint8_t *)&v59, 2u);
      }
      if (!sub_234114844(1u))
        goto LABEL_86;
LABEL_84:
      v19 = 1;
LABEL_85:
      sub_2341147D0(1u, v19);
LABEL_86:
      if (v53[0])
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54);
      goto LABEL_19;
    }
LABEL_37:
    v25 = (uint64_t *)sub_233CB6588(v53);
    v26 = sub_2341CD430(*v25);
    v50 = *(_OWORD *)a3;
    v27 = *(_DWORD *)(a3 + 20);
    v51 = *(_DWORD *)(a3 + 16);
    v52 = v27;
    if (sub_23410EF74(&v50))
    {
      v28 = v52;
    }
    else
    {
      v28 = 0;
      v52 = 0;
    }
    *(_OWORD *)(v26 + 60) = v50;
    *(_DWORD *)(v26 + 76) = v51;
    *(_DWORD *)(v26 + 80) = v28;
    if (*(_BYTE *)(a3 + 16) == 3)
    {
      v34 = *(_QWORD *)(v26 + 32);
      v35 = *a5;
      if (v34)
      {
        if (v34 != v35)
        {
          v36 = sub_234117B80(1u, "Inet");
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            v37 = *a5;
            LODWORD(v59) = 134217984;
            *(_QWORD *)((char *)&v59 + 4) = v37;
            _os_log_impl(&dword_233BF3000, v36, OS_LOG_TYPE_ERROR, "Data received over wrong connection %p. Dropping it!", (uint8_t *)&v59, 0xCu);
          }
          if (!sub_234114844(1u))
            goto LABEL_86;
          goto LABEL_84;
        }
      }
      else
      {
        *(_QWORD *)(v26 + 32) = v35;
      }
    }
    *(_QWORD *)(v26 + 96) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    *(_QWORD *)(v26 + 88) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    v45[0] = 0;
    v46 = 0;
    v49 = 0;
    v48 = 16;
    v47 = -1;
    v59 = 0uLL;
    *(_QWORD *)&v60 = 0;
    sub_2341F8A44((uint64_t)v45, a4, &v59);
    if ((_DWORD)v59)
      goto LABEL_86;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    sub_2341D2134(v26 + 136, *(int *)buf, (uint64_t)&v42);
    if ((_DWORD)v42 == 196)
    {
      v38 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        if ((v48 & 1) != 0)
          v39 = 114;
        else
          v39 = 105;
        LODWORD(v59) = 67109632;
        DWORD1(v59) = *(_DWORD *)buf;
        WORD4(v59) = 1024;
        *(_DWORD *)((char *)&v59 + 10) = v46;
        HIWORD(v59) = 1024;
        LODWORD(v60) = v39;
        _os_log_impl(&dword_233BF3000, v38, OS_LOG_TYPE_INFO, "Received a duplicate message with MessageCounter:%u on exchange %u%c", (uint8_t *)&v59, 0x14u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(1u, 3);
      v40 = 0;
      LODWORD(v42) = 0;
      v43 = "src/transport/SessionManager.cpp";
      LODWORD(v44) = 872;
    }
    else
    {
      sub_2341D2718(v26 + 136, *(int *)buf);
      v40 = 1;
    }
    if (*(_QWORD *)(a1 + 232))
    {
      LODWORD(v59) = 2;
      *((_QWORD *)&v59 + 1) = v45;
      *(_QWORD *)&v60 = buf;
      *((_QWORD *)&v60 + 1) = v26;
      v61 = a3;
      sub_233BF7114(v62, (*a4)[1], (*a4)[2]);
      sub_2341C4A6C((uint64_t)&v59);
      (*(void (**)(_QWORD, uint8_t *, _BYTE *, uint64_t *, uint64_t, _QWORD **))(**(_QWORD **)(a1 + 232) + 16))(*(_QWORD *)(a1 + 232), buf, v45, v25, v40, a4);
      goto LABEL_86;
    }
    v41 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v59) = 0;
      _os_log_impl(&dword_233BF3000, v41, OS_LOG_TYPE_ERROR, "Received UNSECURED message was not processed.", (uint8_t *)&v59, 2u);
    }
    if (!sub_234114844(1u))
      goto LABEL_86;
    goto LABEL_84;
  }
  v55[0] = v67;
  if (v67)
  {
    v56 = v68;
    v53[0] = 0;
    v15 = (uint64_t *)sub_233CB6588(v55);
    sub_2341D20B8(a1 + 48, *v15, a3, (uint64_t)&v59);
    v53[0] = v59;
    if (!(_BYTE)v59)
    {
      v16 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *((_DWORD *)sub_233CB6588(v55) + 1);
        v18 = *(_QWORD *)sub_233CB6588(v55);
        LODWORD(v59) = 67109376;
        DWORD1(v59) = v17;
        WORD4(v59) = 1024;
        *(_DWORD *)((char *)&v59 + 10) = v18;
        _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Received unknown unsecure packet for initiator 0x%08X%08X", (uint8_t *)&v59, 0xEu);
      }
      if (!sub_234114844(2u))
        goto LABEL_86;
      sub_233CB6588(v55);
      sub_233CB6588(v55);
      v19 = 2;
      goto LABEL_85;
    }
    v54 = *((_QWORD *)&v59 + 1);
    (*(void (**)(_QWORD))(**((_QWORD **)&v59 + 1) + 24))(*((_QWORD *)&v59 + 1));
    (*(void (**)(_QWORD))(**((_QWORD **)&v59 + 1) + 32))(*((_QWORD *)&v59 + 1));
    goto LABEL_37;
  }
LABEL_29:
  v20 = sub_234117B80(1u, "Inet");
  if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    goto LABEL_51;
  if (v57[0])
  {
    v21 = *((_DWORD *)sub_233C25EA4(v57) + 1);
    if (v57[0])
    {
      v22 = (uint64_t *)sub_233C25EA4(v57);
      goto LABEL_45;
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = &qword_2342EDCF8;
LABEL_45:
  v30 = *(_DWORD *)v22;
  if (!v55[0])
  {
    v31 = 0;
    goto LABEL_49;
  }
  v31 = *((_DWORD *)sub_233C25EA4(v55) + 1);
  if (!v55[0])
  {
LABEL_49:
    v32 = &qword_2342EDCF8;
    goto LABEL_50;
  }
  v32 = (uint64_t *)sub_233C25EA4(v55);
LABEL_50:
  v33 = *v32;
  *(_QWORD *)&v59 = __PAIR64__(v21, 67109888);
  WORD4(v59) = 1024;
  *(_DWORD *)((char *)&v59 + 10) = v30;
  HIWORD(v59) = 1024;
  LODWORD(v60) = v31;
  WORD2(v60) = 1024;
  *(_DWORD *)((char *)&v60 + 6) = v33;
  _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_DEFAULT, "Received malformed unsecure packet with source 0x%08X%08X destination 0x%08X%08X", (uint8_t *)&v59, 0x1Au);
LABEL_51:
  if (sub_234114844(2u))
  {
    if (v57[0])
    {
      sub_233C25EA4(v57);
      if (v57[0])
        sub_233C25EA4(v57);
    }
    if (v55[0])
    {
      sub_233C25EA4(v55);
      if (v55[0])
        sub_233C25EA4(v55);
    }
    v13 = 2;
    goto LABEL_18;
  }
LABEL_19:
  v14 = sub_2341C4608();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)buf = 136315394;
    v64 = "SessionManager";
    v65 = 2080;
    *(_QWORD *)v66 = "Unauthenticated Message Dispatch";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341D188C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint8_t buf[4];
  char *v7;
  char __str[76];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    sub_23412A258(a2 + 8, __str, 0x4CuLL);
    v3 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v7 = __str;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Received TCP connection request from %s.", buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(1u, 2);
    v4 = *(_QWORD *)(a2 + 48);
    if (v4)
    {
      v5 = *(void (**)(uint64_t))(v4 + 8);
      if (v5)
        v5(a2);
    }
  }
}

uint64_t sub_2341D1990(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __int128 *);
  NSObject *v7;
  __int128 v8;
  uint64_t v9;
  uint8_t buf[4];
  char *v11;
  char __str[76];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(a2 + 48);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, __int128 *))(v5 + 16);
      if (v6)
      {
        v8 = *a3;
        v9 = *((_QWORD *)a3 + 2);
        return v6(a2, &v8);
      }
      else
      {
        sub_23412A258(a2 + 8, __str, 0x4CuLL);
        v7 = sub_234117B80(1u, "Inet");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v11 = __str;
          _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "TCP Connection established with peer %s, but no registered handler. Disconnecting.", buf, 0xCu);
        }
        if (sub_234114844(2u))
          sub_2341147D0(1u, 2);
        return sub_2341D1AF8(v4, a2);
      }
    }
    else
    {
      return sub_2341D1AF8(result, a2);
    }
  }
  return result;
}

uint64_t sub_2341D1AF8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  NSObject *v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v8;
  char __str[76];
  __int128 buf;
  int *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v2 = result;
    if (*(_QWORD *)(result + 248))
    {
      sub_23412A258(a2 + 8, __str, 0x4CuLL);
      v4 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = __str;
        _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Disconnecting TCP connection from peer at %s.", (uint8_t *)&buf, 0xCu);
      }
      if (sub_234114844(2u))
        sub_2341147D0(1u, 2);
      sub_2341D3AE8(*(_QWORD *)(v2 + 248));
      v5 = 0;
      v6 = "src/transport/SessionManager.cpp";
      v7 = 769;
      v8 = a2;
      *(_QWORD *)&buf = &v8;
      *((_QWORD *)&buf + 1) = v2;
      v11 = &v5;
      return sub_234115DFC((_QWORD *)(v2 + 128), (uint64_t)&buf, (unsigned int (*)(uint64_t))sub_2341D3998);
    }
  }
  return result;
}

uint64_t sub_2341D1C4C(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __int128 *);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];

  if (a2)
  {
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 2);
    v11 = a2;
    v12[0] = &v11;
    v12[1] = result;
    v12[2] = &v9;
    result = sub_234115DFC((_QWORD *)(result + 128), (uint64_t)v12, (unsigned int (*)(uint64_t))sub_2341D3998);
    v5 = *(_QWORD *)(a2 + 48);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, __int128 *))(v5 + 24);
      if (v6)
      {
        v7 = *a3;
        v8 = *((_QWORD *)a3 + 2);
        return v6(a2, &v7);
      }
    }
  }
  return result;
}

uint64_t sub_2341D1CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v5[3];

  v4 = a2;
  v5[0] = &v4;
  v5[1] = a1;
  v5[2] = a3;
  return sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_2341D3998);
}

uint64_t sub_2341D1D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t result;
  uint8_t buf[4];
  char *v10;
  char __str[76];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_23412A258(a2, __str, 0x4CuLL);
  v5 = *(_QWORD *)(a1 + 248);
  v6 = sub_234117B80(1u, "Inet");
  v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v10 = __str;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Connecting over TCP with peer at %s.", buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(1u, 2);
    return sub_2341D3AC8(*(_QWORD *)(a1 + 248));
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v10 = __str;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "The transport manager is not initialized. Unable to connect to peer at %s.", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(1u, 1);
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/transport/SessionManager.cpp";
    *(_DWORD *)(a3 + 16) = 744;
  }
  return result;
}

uint64_t sub_2341D1EC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  uint8_t buf[4];
  char *v7;
  char __str[76];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 248))
  {
    v4 = result;
    sub_23412A258(a2, __str, 0x4CuLL);
    v5 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v7 = __str;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Disconnecting TCP connection from peer at %s.", buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(1u, 2);
    result = sub_2341D3AD8(*(_QWORD *)(v4 + 248));
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/transport/SessionManager.cpp";
  *(_DWORD *)(a3 + 16) = 757;
  return result;
}

_QWORD *sub_2341D1FE8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14[4];

  v13 = 1;
  v11 = 0;
  v12 = a2;
  v14[0] = (uint64_t)&v13;
  v14[1] = (uint64_t)&v12;
  v14[2] = (uint64_t)a4;
  v14[3] = (uint64_t)&v11;
  sub_234115DFC(a1 + 2, (uint64_t)v14, (unsigned int (*)(uint64_t))sub_2341D33D8);
  result = v11;
  if (v11)
  {
    *(_BYTE *)a5 = 1;
  }
  else
  {
    LODWORD(v12) = 1;
    v14[0] = a2;
    result = sub_2341D342C(a1, (int *)&v12, v14, a4, a3, (uint64_t)a1);
    if (!result)
    {
      *(_BYTE *)a5 = 0;
      return result;
    }
    *(_BYTE *)a5 = 1;
  }
  *(_QWORD *)(a5 + 8) = result;
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
}

uint64_t sub_2341D20B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v10[4];

  v9 = 0;
  v7 = 0;
  v8 = a2;
  v10[0] = &v9;
  v10[1] = &v8;
  v10[2] = a3;
  v10[3] = &v7;
  sub_234115DFC((_QWORD *)(a1 + 16), (uint64_t)v10, (unsigned int (*)(uint64_t))sub_2341D33D8);
  result = v7;
  if (v7)
  {
    *(_QWORD *)(a4 + 8) = v7;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  *(_BYTE *)a4 = v6;
  return result;
}

void sub_2341D2134(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  if (*(_DWORD *)a1 == 2)
  {
    v5 = *(_DWORD *)(a1 + 8);
    if (a2 == v5 || a2 - v5 < 0)
    {
      if (v5 == a2)
        v6 = 2;
      else
        v6 = (v5 - a2) < 0x21;
    }
    else
    {
      v6 = 3;
    }
    sub_2341D266C(a1, v6, a2, a3);
  }
  else
  {
    if (*(_DWORD *)a1)
      sub_23425DB68(a1);
    *(_DWORD *)a1 = 2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = a2;
    v7 = a1 + 16;
    v8 = 0;
    sub_2341313BC(&v7, 0x20uLL);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/transport/PeerMessageCounter.h";
    *(_DWORD *)(a3 + 16) = 165;
  }
}

_DWORD *sub_2341D21F8@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  int v7;

  if (*result == 2)
  {
    v4 = result[2];
    v5 = v4 >= a2;
    if (v4 == a2)
      v6 = 2;
    else
      v6 = v4 - a2 < 0x21;
    if (v5)
      v7 = v6;
    else
      v7 = 3;
    return (_DWORD *)sub_2341D2D34((uint64_t)result, v7, a2, a3);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/transport/PeerMessageCounter.h";
    *(_DWORD *)(a3 + 16) = 142;
  }
  return result;
}

void sub_2341D2250(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  int v6;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 >= a2;
  if (v3 == a2)
    v5 = 2;
  else
    v5 = v3 - a2 < 0x21;
  if (v4)
    v6 = v5;
  else
    v6 = 3;
  sub_2341D2750(a1, v6, a2);
}

BOOL sub_2341D227C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, unsigned __int16 *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  char v17;
  unsigned int v18;
  unint64_t *v19;
  _BOOL8 v20;
  uint8_t v22[35];
  _BYTE v23[13];
  _BYTE v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v11 = *((_QWORD *)a7 + 1);
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v28 = v11;
  if (a4)
  {
    v12 = 12;
    if ((*(_BYTE *)(a1 + 47) & 4) == 0)
      v12 = 4;
    v13 = v12 + 8;
    v14 = v12 | *(_BYTE *)(a1 + 47) & 2;
    v15 = (*(_BYTE *)(a1 + 47) & 1) != 0 ? v13 : v14;
    sub_2341CA59C((uint64_t)v24, *(_QWORD *)(*a5 + 8) + 4, v15, *(_QWORD *)(*a5 + 8) + 4, a1, a6, (uint64_t)v22);
    if (*(_DWORD *)v22)
      goto LABEL_15;
  }
  sub_2341F87E4(a2, (_QWORD **)a5, v22);
  if (*(_DWORD *)v22)
  {
    v16 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Failed to decode Groupcast packet header. Discarding.", v22, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(1u, 1);
    goto LABEL_15;
  }
  if (*(unsigned __int16 *)sub_233C05D98((_BYTE *)(a2 + 40)) != *a7)
  {
LABEL_15:
    v20 = 0;
    goto LABEL_16;
  }
  v17 = *(_BYTE *)(a2 + 48);
  v18 = *(_DWORD *)a2;
  v19 = (unint64_t *)sub_233C25EA4((_BYTE *)(a2 + 8));
  sub_2341C9E24((uint64_t)v23, v17, v18, *v19, (uint64_t)v22);
  sub_2341CB130((uint64_t)v24, (uint64_t)v23, a3, a2, a5, (uint64_t)v22);
  v20 = *(_DWORD *)v22 == 0;
LABEL_16:
  sub_2341C9B18((uint64_t)v24);
  return v20;
}

void sub_2341D2450(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;

  if (*(_DWORD *)a1 == 2)
  {
    sub_2341D2DE0((_DWORD *)a1, a2, a3);
  }
  else
  {
    if (*(_DWORD *)a1)
      sub_23425DBFC(a1);
    *(_DWORD *)a1 = 2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = a2;
    v4 = a1 + 16;
    v5 = 0;
    sub_2341313BC(&v4, 0x20uLL);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/transport/PeerMessageCounter.h";
    *(_DWORD *)(a3 + 16) = 118;
  }
}

uint64_t sub_2341D24E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  _QWORD v12[5];

  v11[0] = a2;
  v11[1] = a3;
  v10 = a5;
  v8 = 0;
  v9 = 0;
  v12[0] = v11;
  v12[1] = a4;
  v12[2] = &v9;
  v12[3] = &v8;
  v12[4] = &v10;
  sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)v12, (unsigned int (*)(uint64_t))sub_2341D38B8);
  if (v10 == 2)
  {
    result = v9;
    if (v9)
      goto LABEL_7;
  }
  else if (v10 != 1)
  {
    result = v9;
    if (!v9)
      goto LABEL_8;
LABEL_7:
    *(_BYTE *)a6 = 1;
    *(_QWORD *)(a6 + 8) = result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  result = v8;
  if (v8)
    goto LABEL_7;
LABEL_8:
  *(_BYTE *)a6 = 0;
  return result;
}

uint64_t sub_2341D2594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v6 = a3;
  v7 = a2;
  v8[0] = &v6;
  v8[1] = &v7;
  result = sub_234115DFC((_QWORD *)(a1 + 128), (uint64_t)v8, (unsigned int (*)(uint64_t))sub_2341D3A58);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = "src/transport/SessionManager.cpp";
  *(_DWORD *)(a4 + 16) = 1358;
  return result;
}

void sub_2341D25F4(uint64_t a1, uint64_t a2, int a3)
{
  sub_2341CDF98(a1, a3);
}

uint64_t sub_2341D25FC@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v3;
  *a2 = v3;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/transport/MessageCounter.h";
  *(_DWORD *)(a3 + 16) = 71;
  return result;
}

uint64_t sub_2341D2628(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341AE124(a1, a2);
  return 0;
}

_QWORD *sub_2341D2640(_QWORD *result)
{
  if (!byte_25615DDA8)
  {
    if (*result)
      sub_23425DD28((uint64_t)result);
  }
  return result;
}

uint64_t sub_2341D266C@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  unsigned int v5;

  if (a2 == 1)
  {
    v5 = *(_DWORD *)(result + 8) + ~a3;
    if (v5 >= 0x20)
      abort();
    if (((*(_QWORD *)(result + 16) >> v5) & 1) != 0)
    {
      *(_DWORD *)a4 = 196;
      *(_QWORD *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
      v4 = 308;
    }
    else
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
      v4 = 310;
    }
  }
  else if (a2 == 2)
  {
    *(_DWORD *)a4 = 196;
    *(_QWORD *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
    v4 = 303;
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
    v4 = 316;
  }
  *(_DWORD *)(a4 + 16) = v4;
  return result;
}

void sub_2341D2718(uint64_t a1, int a2)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(a1 + 8);
  if (a2 == v3 || a2 - v3 < 0)
  {
    if (v3 == a2)
      v4 = 2;
    else
      v4 = (v3 - a2) < 0x21;
  }
  else
  {
    v4 = 3;
  }
  sub_2341D2750(a1, v4, a2);
}

void sub_2341D2750(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;

  if (a2 != 2)
  {
    if (a2 == 1)
    {
      v3 = *(_DWORD *)(a1 + 8) + ~a3;
      if (v3 < 0x20)
      {
        *(_QWORD *)(a1 + 16) |= 1 << v3;
        return;
      }
LABEL_10:
      abort();
    }
    v4 = *(_DWORD *)(a1 + 8);
    v5 = a3 - v4;
    *(_DWORD *)(a1 + 8) = a3;
    if ((a3 - v4) < 0x21)
    {
      v6 = (_QWORD *)(a1 + 16);
      sub_2341D2810(a1 + 16, (a3 - v4));
      if ((v5 - 1) >= 0x20)
        goto LABEL_10;
      *v6 |= 1 << (v5 - 1);
    }
    else
    {
      v7 = a1 + 16;
      v8 = 0;
      sub_2341313BC(&v7, 0x20uLL);
    }
  }
}

uint64_t sub_2341D2810(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _BYTE v5[16];
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  if (a2 >= 0x20)
    v3 = 32;
  else
    v3 = a2;
  if ((_DWORD)v3)
  {
    v10 = a1;
    v11 = 0;
    v8 = a1;
    v9 = 32 - v3;
    v6 = a1;
    v7 = 32;
    sub_2341D2A24((uint64_t)&v10, (uint64_t)&v8, (uint64_t)&v6, (uint64_t)v5);
    v16 = a1;
    v17 = 0;
    sub_2341313BC(&v16, v3);
  }
  else
  {
    v16 = a1;
    v17 = 0;
    v14 = a1;
    v15 = 32;
    v12 = a1;
    v13 = 32;
    sub_2341D28C0((unsigned int *)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)v5);
  }
  return a1;
}

unsigned int *sub_2341D28C0@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  v6 = *(unsigned int *)(a2 + 8);
  v7 = v6 + 8 * (*(_QWORD *)a2 - *(_QWORD *)result);
  v8 = result[2];
  v9 = v7 - v8;
  if ((uint64_t)(v7 - v8) >= 1)
  {
    if ((_DWORD)v6)
    {
      if (v9 >= v6)
        v11 = *(unsigned int *)(a2 + 8);
      else
        v11 = v7 - v8;
      v9 -= v11;
      v12 = (-1 << (v6 - v11)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      v13 = **(_QWORD **)a2 & v12;
      **(_QWORD **)a3 &= ~v12;
      **(_QWORD **)a3 |= v13;
      *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) - (_BYTE)v11) & 0x3F;
    }
    if (v9 >= 0)
      v14 = v9;
    else
      v14 = v9 + 63;
    v15 = v14 >> 6;
    *(_QWORD *)a3 -= 8 * (v14 >> 6);
    v16 = (const void *)(*(_QWORD *)a2 - 8 * (v14 >> 6));
    *(_QWORD *)a2 = v16;
    if ((unint64_t)(v9 + 63) >= 0x7F)
      result = (unsigned int *)memmove(*(void **)a3, v16, 8 * v15);
    if (v9 - (v15 << 6) >= 1)
    {
      v17 = -1 << (((_BYTE)v15 << 6) - v9);
      v18 = (_QWORD *)(*(_QWORD *)a2 - 8);
      *(_QWORD *)a2 = v18;
      v19 = *v18 & v17;
      v20 = *(_QWORD **)a3;
      *(_QWORD *)a3 -= 8;
      *(v20 - 1) &= ~v17;
      **(_QWORD **)a3 |= v19;
      *(_DWORD *)(a3 + 8) = -(int)v9 & 0x3F;
    }
  }
  *(_QWORD *)a4 = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 8) = *(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_2341D2A24@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  char v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  int v31;

  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(result + 8);
  v6 = v4 + 8 * (*(_QWORD *)a2 - *(_QWORD *)result) - v5;
  if (v6 >= 1)
  {
    if ((_DWORD)v4)
    {
      if (v6 >= v4)
        v7 = *(unsigned int *)(a2 + 8);
      else
        v7 = v4 + 8 * (*(_QWORD *)a2 - *(_QWORD *)result) - v5;
      v6 -= v7;
      v8 = (-1 << (v4 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v4) & **(_QWORD **)a2;
      v9 = *(unsigned int *)(a3 + 8);
      if (v7 >= v9)
        v10 = *(unsigned int *)(a3 + 8);
      else
        v10 = v7;
      if (v10)
      {
        **(_QWORD **)a3 &= ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9));
        v11 = *(_DWORD *)(a3 + 8);
        v12 = *(_DWORD *)(a2 + 8);
        v13 = v8 >> (v12 - v11);
        v14 = v11 > v12;
        v15 = v8 << (v11 - v12);
        if (!v14)
          v15 = v13;
        **(_QWORD **)a3 |= v15;
        *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) - (_BYTE)v10) & 0x3F;
        v7 -= v10;
      }
      if (v7 >= 1)
      {
        v16 = *(_QWORD **)a3;
        *(_QWORD *)a3 -= 8;
        *(_DWORD *)(a3 + 8) = -(int)v7 & 0x3F;
        *(v16 - 1) &= ~(-1 << -(char)v7);
        v17 = *(_DWORD *)(a2 + 8) - v7 - v10;
        *(_DWORD *)(a2 + 8) = v17;
        **(_QWORD **)a3 |= v8 << (*(_DWORD *)(a3 + 8) - v17);
      }
    }
    if (v6 < 64)
    {
      v24 = v6;
    }
    else
    {
      v18 = *(_DWORD *)(a3 + 8);
      v19 = 64 - v18;
      v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
      do
      {
        v21 = (unint64_t *)(*(_QWORD *)a2 - 8);
        *(_QWORD *)a2 = v21;
        v22 = *v21;
        **(_QWORD **)a3 &= ~v20;
        **(_QWORD **)a3 |= v22 >> v19;
        v23 = *(_QWORD **)a3;
        *(_QWORD *)a3 -= 8;
        *(v23 - 1) &= v20;
        **(_QWORD **)a3 |= v22 << *(_DWORD *)(a3 + 8);
        v24 = v6 - 64;
        v14 = (unint64_t)v6 > 0x7F;
        v6 -= 64;
      }
      while (v14);
    }
    if (v24 >= 1)
    {
      v25 = (_QWORD *)(*(_QWORD *)a2 - 8);
      *(_QWORD *)a2 = v25;
      v26 = *v25 & (-1 << -(char)v24);
      v27 = *(unsigned int *)(a3 + 8);
      if (v24 >= v27)
        v28 = *(unsigned int *)(a3 + 8);
      else
        v28 = v24;
      **(_QWORD **)a3 &= ~((-1 << (v27 - v28)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v27));
      **(_QWORD **)a3 |= v26 >> -*(_BYTE *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) - (_BYTE)v28) & 0x3F;
      v29 = v24 - v28;
      if (v24 - v28 >= 1)
      {
        v30 = *(_QWORD **)a3;
        *(_QWORD *)a3 -= 8;
        v31 = -v29;
        *(_DWORD *)(a3 + 8) = v31 & 0x3F;
        *(v30 - 1) &= ~(-1 << v31);
        **(_QWORD **)a3 |= v26 << (v24 + *(_DWORD *)(a3 + 8));
      }
    }
  }
  *(_QWORD *)a4 = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 8) = *(_DWORD *)(a3 + 8);
  return result;
}

BOOL sub_2341D2CD4(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
    return 0;
  result = sub_23410ECAC((_DWORD *)a1, (_DWORD *)a2);
  if (!result)
    return result;
  return *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

uint64_t sub_2341D2D34@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  unsigned int v5;

  if (a2 == 1)
  {
    v5 = *(_DWORD *)(result + 8) + ~a3;
    if (v5 >= 0x20)
      abort();
    if (((*(_QWORD *)(result + 16) >> v5) & 1) != 0)
    {
      *(_DWORD *)a4 = 196;
      *(_QWORD *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
      v4 = 283;
    }
    else
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
      v4 = 285;
    }
  }
  else if (a2 == 3)
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
    v4 = 278;
  }
  else
  {
    *(_DWORD *)a4 = 196;
    *(_QWORD *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
    v4 = 289;
  }
  *(_DWORD *)(a4 + 16) = v4;
  return result;
}

_DWORD *sub_2341D2DE0@<X0>(_DWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;

  if (*result == 2)
  {
    v4 = result[2];
    if (a2 == v4 || a2 - v4 < 0)
    {
      if (v4 == a2)
        v5 = 2;
      else
        v5 = (v4 - a2) < 0x21;
    }
    else
    {
      v5 = 3;
    }
    return (_DWORD *)sub_2341D2D34((uint64_t)result, v5, a2, a3);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/transport/PeerMessageCounter.h";
    *(_DWORD *)(a3 + 16) = 104;
  }
  return result;
}

void sub_2341D2E44(uint64_t a1)
{
  sub_2341D2F0C(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341D2E68()
{
  return 3;
}

_DWORD *sub_2341D2E70(uint64_t a1)
{
  return sub_2341D2EC0((_DWORD *)(a1 + 40));
}

_DWORD *sub_2341D2E78(uint64_t a1)
{
  return sub_2341D2EE8((_DWORD *)(a1 + 40));
}

uint64_t sub_2341D2E80(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_2341D2E90()
{
  return 0;
}

uint64_t sub_2341D2E9C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 1) = 0x80;
  *(_QWORD *)(a2 + 8) = *(unsigned __int16 *)(result + 44) | 0xFFFFFFFFFFFF0000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = *(_BYTE *)(result + 24);
  return result;
}

_DWORD *sub_2341D2EC0(_DWORD *a1)
{
  if (*a1 == -1)
    sub_23425DDC0((uint64_t)a1);
  ++*a1;
  return a1 - 10;
}

_DWORD *sub_2341D2EE8(_DWORD *result)
{
  if (!*result)
    sub_23425AC10((uint64_t)result);
  --*result;
  return result;
}

uint64_t sub_2341D2F0C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_250514AF8;
  v2 = sub_2341CBA48((_QWORD *)a1);
  if (*(_DWORD *)(a1 + 40))
    sub_23425DE58(v2);
  *(_QWORD *)a1 = &unk_250514848;
  sub_2341CC044((_QWORD *)(a1 + 8));
  return a1;
}

void sub_2341D2F64(char *a1)
{
  uint64_t i;
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  bzero(a1, 0x2280uLL);
  for (i = 0; i != 16; ++i)
  {
    v3 = &a1[552 * i];
    *(_WORD *)v3 = 0;
    v3[2] = 0;
    v4 = v3 + 8;
    v5 = v3 + 488;
    do
    {
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      v4 += 32;
    }
    while (v4 != v5);
    v6 = v3 + 552;
    do
    {
      *(_QWORD *)v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      v5 += 32;
    }
    while (v5 != v6);
  }
}

uint64_t sub_2341D2FDC(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v4;

  if ((*(uint64_t (**)(_QWORD *))(*a2 + 48))(a2) == **(_QWORD **)a1
    && *(unsigned __int8 *)(*(_QWORD *)a1 + 8) == v4)
  {
    sub_2341CB8F8(a2);
  }
  return 0;
}

uint64_t sub_2341D3034(unsigned __int8 **a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 24) == **a1)
    sub_2341CB8F8((_QWORD *)a2);
  return 0;
}

uint64_t sub_2341D3064(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[11];

  v14[10] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v14[0] = &off_250505A50;
  if (*(_BYTE *)(a2 + 57) == 2)
  {
    v4 = *(unsigned __int8 *)(a2 + 24);
    if (v4)
    {
      v6 = sub_2341E2E70(*(_QWORD *)(v2 + 32), v4);
      if (!v6)
        sub_23425DF80(0);
      v7 = v6;
      sub_2341E2710(v6, (uint64_t)v14, (uint64_t)&v12);
      v9 = a1[1];
      v10 = v12;
      *(_QWORD *)(v9 + 16) = v13;
      *(_OWORD *)v9 = v10;
      if (*(_DWORD *)a1[1])
        sub_23425E014(v8);
      if (sub_233D50ED4((uint64_t)v14, a1[2])
        && *(_QWORD *)(*(_QWORD *)a1[3] + 8) == *(_QWORD *)(v7 + 8)
        && *(_QWORD *)(a2 + 72) == *(_QWORD *)a1[4])
      {
        sub_2341CB8F8((_QWORD *)a2);
      }
    }
  }
  return 0;
}

uint64_t sub_2341D3174(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[11];

  v14[10] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v14[0] = &off_250505A50;
  if (*(_BYTE *)(a2 + 57) == 2)
  {
    v4 = *(unsigned __int8 *)(a2 + 24);
    if (v4)
    {
      v6 = sub_2341E2E70(*(_QWORD *)(v2 + 32), v4);
      if (!v6)
        sub_23425E0A8(0);
      v7 = v6;
      sub_2341E2710(v6, (uint64_t)v14, (uint64_t)&v12);
      v9 = a1[1];
      v10 = v12;
      *(_QWORD *)(v9 + 16) = v13;
      *(_OWORD *)v9 = v10;
      if (*(_DWORD *)a1[1])
        sub_23425E13C(v8);
      if (sub_233D50ED4((uint64_t)v14, a1[2]) && *(_QWORD *)(*(_QWORD *)a1[3] + 8) == *(_QWORD *)(v7 + 8))
        sub_2341CB8F8((_QWORD *)a2);
    }
  }
  return 0;
}

uint64_t sub_2341D3270(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 57) == 1)
    sub_2341CB8F8((_QWORD *)a2);
  return 0;
}

uint64_t sub_2341D3298(uint64_t a1, _QWORD *a2)
{
  sub_2341CB8F8(a2);
  return 0;
}

uint64_t sub_2341D32B4(_QWORD *a1, _BYTE *a2)
{
  unsigned __int8 v4;
  _BYTE *v5;

  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a2 + 40))(a2))
  {
    if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 48))(a2) == *(_QWORD *)*a1
      && *(unsigned __int8 *)(*a1 + 8) == v4)
    {
      v5 = (_BYTE *)a1[1];
      if (!*v5 || *sub_2341D3340(v5) == a2[57])
        sub_2341CB7C4((uint64_t)a2);
    }
  }
  return 0;
}

_BYTE *sub_2341D3340(_BYTE *a1)
{
  if (!*a1)
    sub_2342581C8((uint64_t)a1);
  return a1 + 1;
}

uint64_t sub_2341D3360(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v4;
  __int128 *v5;
  __int128 v6;

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) == *(_QWORD *)*a1
    && *(unsigned __int8 *)(*a1 + 8) == v4
    && *(_BYTE *)(a2 + 57) == 2)
  {
    v5 = (__int128 *)a1[1];
    v6 = *v5;
    *(_DWORD *)(a2 + 112) = *((_DWORD *)v5 + 4);
    *(_OWORD *)(a2 + 96) = v6;
    *(_DWORD *)(a2 + 116) = *((_DWORD *)v5 + 5);
  }
  return 0;
}

uint64_t sub_2341D33D8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 56) != **(_DWORD **)a1
    || *(_QWORD *)(a2 + 48) != **(_QWORD **)(a1 + 8)
    || *(unsigned __int8 *)(a2 + 76) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 16))
  {
    return 0;
  }
  **(_QWORD **)(a1 + 24) = a2;
  return 1;
}

_QWORD *sub_2341D342C(unint64_t *a1, int *a2, uint64_t *a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  v12 = sub_234114774(0xA8uLL);
  v13 = v12;
  if (v12)
  {
    sub_2341D3500((uint64_t)v12, *a2, *a3, a4, a5);
    *v13 = &unk_250514BC8;
    v13[20] = a6;
    v14 = sub_234114774(0x18uLL);
    if (v14)
    {
      *v14 = v13;
      v14[1] = a1 + 2;
      v14[2] = 0;
      v14[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v14;
      a1[4] = (unint64_t)v14;
      v15 = a1[1];
      v16 = *a1 + 1;
      *a1 = v16;
      if (v16 > v15)
        a1[1] = v16;
    }
    else
    {
      return 0;
    }
  }
  return v13;
}

uint64_t sub_2341D3500(uint64_t a1, int a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 v7;
  int v8;

  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_250514CB8;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 56) = a2;
  v7 = *a4;
  *(_DWORD *)(a1 + 76) = *((_DWORD *)a4 + 4);
  *(_OWORD *)(a1 + 60) = v7;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a4 + 5);
  *(_QWORD *)(a1 + 88) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  *(_QWORD *)(a1 + 96) = 0;
  v8 = *(_DWORD *)(a5 + 8);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)a5;
  *(_DWORD *)(a1 + 112) = v8;
  *(_BYTE *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_WORD *)(a1 + 132) = 1;
  *(_DWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_2341D35B0(uint64_t a1)
{
  sub_2341D3798(a1);
  JUMPOUT(0x23493E704);
}

int *sub_2341D35D4(uint64_t a1)
{
  return sub_2341D37EC((int *)(a1 + 40));
}

uint64_t sub_2341D35DC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56))
    return *(_QWORD *)(a1 + 48);
  else
    return 0;
}

double sub_2341D35F8@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_2341D3604(uint64_t a1)
{
  return *(_BYTE *)(a1 + 76) == 1;
}

BOOL sub_2341D3614(uint64_t a1)
{
  return *(_BYTE *)(a1 + 76) == 3;
}

uint64_t sub_2341D3624(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_2341D362C(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  v2 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10)
     - a1[12];
  v3 = *(unsigned __int16 *)((*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) + 8);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v5 = (unsigned int *)(v4 + 4);
  if (v2 >= v3)
    v5 = (unsigned int *)v4;
  return *v5;
}

uint64_t sub_2341D36A4(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 76);
  switch(v1)
  {
    case 3:
      return 30000;
    case 2:
      return 15000;
    case 1:
      return sub_2341B1C38(*(_DWORD *)(a1 + 108), *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 96), *(unsigned __int16 *)(a1 + 112));
  }
  return 0;
}

uint64_t sub_2341D36EC(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v4;
  unsigned __int16 v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v2 = *(unsigned __int8 *)(a1 + 76);
  if (v2 == 3)
    return 30000;
  if (v2 == 2)
    return 15000;
  if (v2 != 1)
    return 0;
  sub_2341B1BB8((uint64_t)v9);
  v4 = sub_2341B1C28();
  if (v9[0])
  {
    v7 = sub_233C0FDD4(v9);
    LODWORD(v4) = *(_DWORD *)v7;
    LODWORD(v6) = *((_DWORD *)v7 + 1);
    v5 = *((_WORD *)v7 + 4);
  }
  else
  {
    v6 = HIDWORD(v4);
  }
  return sub_2341B1C38(v6, v4, a2, v5);
}

void sub_2341D378C(uint64_t a1)
{
  sub_2341D3824(*(_QWORD *)(a1 + 160), (void (***)(_QWORD))a1);
}

uint64_t sub_2341D3798(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_250514CB8;
  if (*(_DWORD *)(a1 + 40))
    sub_23425E1D0(a1);
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &unk_250514848;
  sub_2341CC044((_QWORD *)(a1 + 8));
  return a1;
}

int *sub_2341D37EC(int *result)
{
  int v1;

  if (!*result)
    sub_23425AC10((uint64_t)result);
  v1 = *result - 1;
  *result = v1;
  if (!v1)
    return (int *)(*(uint64_t (**)(int *))(*((_QWORD *)result - 5) + 120))(result - 10);
  return result;
}

void sub_2341D3824(uint64_t a1, void (***a2)(_QWORD))
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_23425DC90(0);
    v5 = v4;
    *v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

uint64_t sub_2341D38B8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) == **(_QWORD **)a1
      && *(unsigned __int8 *)(*(_QWORD *)a1 + 8) == v4)
    {
      v5 = *(_BYTE **)(a1 + 8);
      if (!*v5 || *sub_2341D3340(v5) == *(_BYTE *)(a2 + 57))
      {
        if (**(unsigned __int8 **)(a1 + 32) - 1 <= 1)
        {
          if (*(_QWORD *)(a2 + 32))
          {
            v6 = *(_QWORD *)(a1 + 24);
            if (!*(_QWORD *)v6 || *(_QWORD *)(*(_QWORD *)v6 + 120) < *(_QWORD *)(a2 + 120))
              *(_QWORD *)v6 = a2;
          }
        }
        v7 = *(_QWORD *)(a1 + 16);
        if (!*(_QWORD *)v7 || *(_QWORD *)(*(_QWORD *)v7 + 120) < *(_QWORD *)(a2 + 120))
          *(_QWORD *)v7 = a2;
      }
    }
  }
  return 0;
}

uint64_t sub_2341D3998(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 40))(a2) && a2[4] == **(_QWORD **)a1)
  {
    v11 = a2;
    (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    v5 = *(_QWORD *)(v4 + 240);
    if (v5)
    {
      v6 = *(__int128 **)(a1 + 16);
      v7 = *v6;
      v10 = *((_QWORD *)v6 + 2);
      v9 = v7;
      (*(void (**)(uint64_t, _QWORD **, __int128 *))(*(_QWORD *)v5 + 16))(v5, &v11, &v9);
    }
    a2[4] = 0;
    sub_2341CB8F8(a2);
    (*(void (**)(_QWORD *))(*v11 + 32))(v11);
  }
  return 0;
}

uint64_t sub_2341D3A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (**(void (***)(_QWORD, uint64_t *))a1)(**(_QWORD **)(a1 + 8), &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  return 0;
}

uint64_t sub_2341D3AB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2341D3AC8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2341D3AD8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2341D3AE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2341D3AF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  NSObject *v6;
  uint8_t v7[16];

  if (*(_QWORD *)(result + 16))
  {
    v4 = 53;
    v5 = 3;
  }
  else
  {
    *(_QWORD *)(result + 16) = a2;
    *(_QWORD *)(a2 + 8) = result;
    v6 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "TransportMgr initialized", v7, 2u);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
      result = sub_2341147D0(1u, 3);
    v5 = 0;
    v4 = 59;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/transport/TransportMgrBase.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_2341D3BBC(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_2341D3BC4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2341D3BD4(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t result;
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[4];
  char *v13;
  char __str[76];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("src/transport/TransportMgrBase.cpp", 78);
  if (**a3)
  {
    sub_23412A258(a2, __str, 0x4CuLL);
    v8 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v13 = __str;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "message from %s dropped due to lower layers not ensuring a single packet buffer.", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      return sub_2341147D0(1u, 1);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    if (v10)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD **, uint64_t))(*(_QWORD *)v10 + 16))(v10, a2, a3, a4);
    sub_23412A258(a2, __str, 0x4CuLL);
    v11 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v13 = __str;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "message from %s is dropped since no corresponding handler is set in TransportMgr.", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      return sub_2341147D0(1u, 1);
  }
  return result;
}

uint64_t sub_2341D3DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  result = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t sub_2341D3DE8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = *a3;
    v6 = *((_QWORD *)a3 + 2);
    return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v3 + 24))(v3, a2, &v5);
  }
  else
  {
    result = *(_QWORD *)(*(_QWORD *)a2 + 16);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  }
  return result;
}

uint64_t sub_2341D3E4C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = *a3;
    v6 = *((_QWORD *)a3 + 2);
    return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v3 + 32))(v3, a2, &v5);
  }
  else
  {
    result = *(_QWORD *)(*(_QWORD *)a2 + 16);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  }
  return result;
}

void sub_2341D3EB0()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341D3EC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  _QWORD *v8;
  NSObject *v9;
  uint8_t v10[16];

  if (*(_QWORD *)result)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/access/AccessControl.cpp";
    v5 = 183;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v5;
    return result;
  }
  v8 = (_QWORD *)result;
  v9 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "AccessControl: initializing", v10, 2u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    result = sub_2341147D0(0xDu, 2);
  if (!a2)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/access/AccessControl.cpp";
    v5 = 187;
    goto LABEL_3;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (!*(_DWORD *)a4)
  {
    *v8 = a2;
    v8[1] = a3;
  }
  return result;
}

_QWORD *sub_2341D3FDC(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  uint8_t v3[16];

  if (*result)
  {
    v1 = result;
    v2 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "AccessControl: finishing", v3, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0xDu, 2);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 32))(*v1);
    *v1 = 0;
  }
  return result;
}

uint64_t sub_2341D4084@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  v19 = a3;
  result = *a1;
  if (!result)
  {
    *(_DWORD *)a6 = 3;
    a6[1] = "src/access/AccessControl.cpp";
    v12 = 209;
    goto LABEL_7;
  }
  v17 = 0;
  v18 = 0;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)result
                                                                                                 + 72))(a6, result, a3, &v18);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)*a1 + 40))(*a1, &v17);
    if (!*(_DWORD *)a6)
    {
      if (v18 + 1 > v17)
      {
        *(_DWORD *)a6 = 25;
        a6[1] = "src/access/AccessControl.cpp";
        v12 = 216;
LABEL_7:
        *((_DWORD *)a6 + 4) = v12;
        return result;
      }
      result = sub_2341D422C(result, a5);
      if ((result & 1) == 0)
      {
        *(_DWORD *)a6 = 47;
        a6[1] = "src/access/AccessControl.cpp";
        v12 = 218;
        goto LABEL_7;
      }
      v16 = 0;
      a6[1] = 0;
      a6[2] = 0;
      *a6 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, unsigned __int8 *))(*(_QWORD *)*a1 + 96))(*a1, &v16, a5, &v19);
      if (!*(_DWORD *)a6)
      {
        v13 = v16;
        if (a4)
          *a4 = v16;
        v14 = (_QWORD *)a1[2];
        if (v14)
        {
          v15 = v19;
          do
          {
            result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(*v14 + 16))(v14, a2, v15, v13, a5, 1);
            v14 = (_QWORD *)v14[1];
          }
          while (v14);
        }
        *(_DWORD *)a6 = 0;
        a6[1] = "src/access/AccessControl.cpp";
        v12 = 229;
        goto LABEL_7;
      }
    }
  }
  return result;
}

BOOL sub_2341D422C(uint64_t a1, _QWORD *a2)
{
  int v3;
  const char *v4;
  NSObject *v5;
  char *v6;
  _BOOL8 result;
  uint64_t v8;
  __int16 v9;
  unint64_t v10;
  int v12;
  NSObject *v13;
  unint64_t v14;
  unsigned __int16 v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  __int16 v20;
  __int128 v21;
  int v22;
  uint8_t buf[4];
  _BYTE v24[20];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v19 = 0;
  v17 = 0;
  v18 = 0;
  (*(void (**)(uint8_t *__return_ptr, _QWORD, char *))(*(_QWORD *)*a2 + 24))(buf, *a2, (char *)&v20 + 1);
  v3 = *(_DWORD *)buf;
  v21 = *(_OWORD *)v24;
  v22 = *(_DWORD *)&v24[16];
  if (*(_DWORD *)buf)
    goto LABEL_6;
  (*(void (**)(uint8_t *__return_ptr, _QWORD, __int16 *))(*(_QWORD *)*a2 + 32))(buf, *a2, &v20);
  v3 = *(_DWORD *)buf;
  v21 = *(_OWORD *)v24;
  v22 = *(_DWORD *)&v24[16];
  if (*(_DWORD *)buf)
    goto LABEL_6;
  (*(void (**)(uint8_t *__return_ptr, _QWORD, char *))(*(_QWORD *)*a2 + 40))(buf, *a2, &v19);
  v3 = *(_DWORD *)buf;
  v21 = *(_OWORD *)v24;
  v22 = *(_DWORD *)&v24[16];
  if (*(_DWORD *)buf)
    goto LABEL_6;
  (*(void (**)(uint8_t *__return_ptr, _QWORD, unint64_t *))(*(_QWORD *)*a2 + 72))(buf, *a2, &v18);
  v3 = *(_DWORD *)buf;
  v21 = *(_OWORD *)v24;
  v22 = *(_DWORD *)&v24[16];
  if (*(_DWORD *)buf
    || ((*(void (**)(uint8_t *__return_ptr, _QWORD, unint64_t *))(*(_QWORD *)*a2 + 112))(buf, *a2, &v17), v3 = *(_DWORD *)buf, v21 = *(_OWORD *)v24, v22 = *(_DWORD *)&v24[16], *(_DWORD *)buf))
  {
LABEL_6:
    v4 = "unexpected error";
    goto LABEL_7;
  }
  if (!(_BYTE)v20)
  {
    v4 = "invalid fabric index";
    goto LABEL_53;
  }
  if (HIBYTE(v20) != 64)
  {
    if (HIBYTE(v20) != 128)
    {
      v4 = "invalid auth mode";
      goto LABEL_53;
    }
    if (v19 == 16)
    {
      v4 = "invalid privilege";
      goto LABEL_53;
    }
  }
  if (v18)
  {
    v8 = 0;
    v4 = "invalid subject";
    while (1)
    {
      v14 = 0;
      (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t, unint64_t *))(*(_QWORD *)*a2 + 80))(buf, *a2, v8, &v14);
      v3 = *(_DWORD *)buf;
      v21 = *(_OWORD *)v24;
      v22 = *(_DWORD *)&v24[16];
      if (*(_DWORD *)buf)
        goto LABEL_51;
      if (HIBYTE(v20) == 128)
        break;
      if (HIBYTE(v20) != 64)
        goto LABEL_52;
      v9 = v14;
      if (v14 - 1 >= 0xFFFFFFEFFFFFFFFFLL)
      {
        if (HIDWORD(v14) != 4294967293)
          goto LABEL_52;
        goto LABEL_28;
      }
LABEL_29:
      if (++v8 >= v18)
        goto LABEL_30;
    }
    v9 = v14;
    if (v14 < 0xFFFFFFFFFFFF0000)
      goto LABEL_52;
LABEL_28:
    if (!v9)
      goto LABEL_52;
    goto LABEL_29;
  }
LABEL_30:
  if (!v17)
    return 1;
  v10 = 0;
  v4 = "invalid target";
  while (1)
  {
    LODWORD(v14) = 0;
    (*(void (**)(uint8_t *__return_ptr, _QWORD, unint64_t, unint64_t *))(*(_QWORD *)*a2 + 120))(buf, *a2, v10, &v14);
    v3 = *(_DWORD *)buf;
    v21 = *(_OWORD *)v24;
    v22 = *(_DWORD *)&v24[16];
    if (*(_DWORD *)buf)
      break;
    if ((v14 & 7) == 0 || (v14 & 6) == 6)
      goto LABEL_52;
    if ((v14 & 1) != 0)
    {
      v12 = HIWORD(HIDWORD(v14));
      if (HIWORD(HIDWORD(v14)) > 0xFFF4u
        || ((v14 & 0x800000000000) != 0 || v12) && (!v12 || (unsigned __int16)(WORD2(v14) + 1024) > 0x3FEu))
      {
        goto LABEL_52;
      }
    }
    if ((v14 & 2) != 0 && v15 == 0xFFFF
      || (v14 & 4) != 0 && ((v16 & 0xFFFF0000) > 0xFFFE0000 || (v16 & 0xC000) == 0xC000))
    {
      goto LABEL_52;
    }
    ++v10;
    result = 1;
    if (v10 >= v17)
      return result;
  }
LABEL_51:
  v4 = "unexpected error";
LABEL_52:
  if (!v3)
  {
LABEL_53:
    v13 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v24 = v4;
      _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "AccessControl: %s", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if (result)
      goto LABEL_11;
    return result;
  }
LABEL_7:
  v5 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = v3;
    *(_OWORD *)v24 = v21;
    *(_DWORD *)&v24[16] = v22;
    v6 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v24 = v4;
    *(_WORD *)&v24[8] = 2080;
    *(_QWORD *)&v24[10] = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "AccessControl: %s %s", buf, 0x16u);
  }
  result = sub_234114844(1u);
  if (result)
  {
    *(_DWORD *)buf = v3;
    *(_OWORD *)v24 = v21;
    *(_DWORD *)&v24[16] = v22;
    sub_2341083CC((const char **)buf, 1);
LABEL_11:
    sub_2341147D0(0xDu, 1);
    return 0;
  }
  return result;
}

uint64_t sub_2341D46D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *i;

  for (i = *(_QWORD **)(result + 16); i; i = (_QWORD *)i[1])
    result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*i + 16))(i, a2, a3, a4, a5, a6);
  return result;
}

uint64_t sub_2341D4748@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 v15;

  v15 = a3;
  if (*(_QWORD *)result)
  {
    v10 = (_QWORD *)result;
    result = sub_2341D422C(result, a5);
    if ((_DWORD)result)
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, unsigned __int8 *))(*(_QWORD *)*v10 + 112))(*v10, a4, a5, &v15);
      if (*(_DWORD *)a6)
        return result;
      v11 = (_QWORD *)v10[2];
      if (v11)
      {
        v12 = v15;
        do
        {
          result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(*v11 + 16))(v11, a2, v12, a4, a5, 3);
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      v13 = 0;
      v14 = 239;
    }
    else
    {
      v14 = 236;
      v13 = 47;
    }
  }
  else
  {
    v14 = 235;
    v13 = 3;
  }
  *(_DWORD *)a6 = v13;
  a6[1] = "src/access/AccessControl.cpp";
  *((_DWORD *)a6 + 4) = v14;
  return result;
}

_QWORD *sub_2341D4840@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;

  v17 = a3;
  if (*result)
  {
    v8 = result;
    if (!byte_25615DDF8)
    {
      byte_25615DDF8 = 1;
      qword_25615DDF0 = (uint64_t)&unk_250514DB0;
    }
    v16 = &qword_25615DDF0;
    if (result[2] && (v18 = a3, v9 = *result, *v8))
    {
      v10 = &v16;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t **, unsigned __int8 *))(*(_QWORD *)v9 + 104))(v15, v9, a4, &v16, &v18);
      if (LODWORD(v15[0]))
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    (*(void (**)(_QWORD, uint64_t, unsigned __int8 *))(*(_QWORD *)*v8 + 120))(*v8, a4, &v17);
    if (!*(_DWORD *)a5)
    {
      if (v10)
      {
        v11 = *v10;
        if (!byte_25615DDF8)
        {
          byte_25615DDF8 = 1;
          qword_25615DDF0 = (uint64_t)&unk_250514DB0;
        }
        if (v11 == &qword_25615DDF0)
          v12 = 0;
        else
          v12 = v10;
      }
      else
      {
        v12 = 0;
      }
      v13 = (_QWORD *)v8[2];
      if (v13)
      {
        v14 = v17;
        do
        {
          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t))(*v13 + 16))(v13, a2, v14, a4, v12, 2);
          v13 = (_QWORD *)v13[1];
        }
        while (v13);
      }
      *(_DWORD *)a5 = 0;
      a5[1] = "src/access/AccessControl.cpp";
      *((_DWORD *)a5 + 4) = 261;
    }
    return (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v16 + 16))(v16);
  }
  else
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/access/AccessControl.cpp";
    *((_DWORD *)a5 + 4) = 244;
  }
  return result;
}

_QWORD *sub_2341D49F0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 16);
  result = (_QWORD *)(a1 + 16);
  v3 = v4;
  if (v4)
  {
    while (v3 != a2)
    {
      v5 = v3;
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
      {
        result = (_QWORD *)(v5 + 8);
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    *result = a2;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

_QWORD *sub_2341D4A1C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 16);
  result = (_QWORD *)(a1 + 16);
  v3 = v4;
  if (v4 == a2)
  {
LABEL_5:
    *result = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    while (v3)
    {
      v5 = v3;
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == a2)
      {
        result = (_QWORD *)(v5 + 8);
        goto LABEL_5;
      }
    }
  }
  return result;
}

uint64_t sub_2341D4A50@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v11;
  NSObject *v12;
  const char *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unsigned __int8 v27;
  uint64_t *v28;
  uint64_t *v29;
  _BYTE buf[12];
  unsigned int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  result = *a1;
  if (!result)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/access/AccessControl.cpp";
    v11 = 312;
    goto LABEL_7;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
  if (!*(_DWORD *)a5)
    return result;
  if (*(_DWORD *)a5 != 45)
  {
    v12 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_DWORD *)a5 == 165)
        v13 = "denied";
      else
        v13 = "error";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "AccessControl: %s (delegate)", buf, 0xCu);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      return sub_2341147D0(0xDu, 2);
    return result;
  }
  if (*(_BYTE *)(a2 + 1) == 32)
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/access/AccessControl.cpp";
    v11 = 355;
LABEL_7:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  if (!byte_25615DE08)
  {
    byte_25615DE08 = 1;
    qword_25615DE00 = (uint64_t)&unk_250514E68;
  }
  v29 = &qword_25615DE00;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  if (!*a1)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/access/AccessControl.h";
    *(_DWORD *)(a5 + 16) = 620;
    return (*(uint64_t (**)(uint64_t *))(*v29 + 16))(v29);
  }
  (*(void (**)(uint64_t, uint64_t **, uint64_t))(*(_QWORD *)*a1 + 128))(*a1, &v29, a2);
  if (*(_DWORD *)a5)
    return (*(uint64_t (**)(uint64_t *))(*v29 + 16))(v29);
  if (!byte_25615DDF8)
  {
    byte_25615DDF8 = 1;
    qword_25615DDF0 = (uint64_t)&unk_250514DB0;
  }
  v28 = &qword_25615DDF0;
  while (1)
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t *, uint64_t **))(*v29 + 24))(buf, v29, &v28);
    if (*(_DWORD *)buf)
      break;
    v27 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
    (*(void (**)(uint64_t *, unsigned __int8 *))(*v28 + 24))(v28, &v27);
    if (*(_DWORD *)a5)
      goto LABEL_91;
    if (v27 != 64 && v27 != 128)
    {
      *(_DWORD *)a5 = 3;
      *(_QWORD *)(a5 + 8) = "src/access/AccessControl.cpp";
      v23 = 367;
      goto LABEL_90;
    }
    if (v27 == *(unsigned __int8 *)(a2 + 1))
    {
      v14 = 1;
      v26 = 1;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)a5 = 0;
      (*(void (**)(uint64_t *, char *))(*v28 + 40))(v28, &v26);
      if (!*(_DWORD *)a5)
      {
        v14 = 10;
        switch(v26)
        {
          case 1:
            if (a4 == 1)
              goto LABEL_43;
            break;
          case 2:
            if ((a4 - 1) < 2u)
              goto LABEL_43;
            break;
          case 3:
          case 5:
          case 6:
          case 7:
            break;
          case 4:
            if (a4 == 1 || a4 == 4)
              goto LABEL_43;
            break;
          case 8:
            if (a4 <= 8)
            {
              v15 = 1 << a4;
              v16 = 274;
              goto LABEL_42;
            }
            break;
          default:
            if (v26 == 16 && a4 <= 0x10)
            {
              v15 = 1 << a4;
              v16 = 65814;
LABEL_42:
              if ((v15 & v16) != 0)
              {
LABEL_43:
                v25 = 0;
                *(_QWORD *)(a5 + 8) = 0;
                *(_QWORD *)(a5 + 16) = 0;
                *(_QWORD *)a5 = 0;
                (*(void (**)(uint64_t *, unint64_t *))(*v28 + 72))(v28, &v25);
                if (!*(_DWORD *)a5)
                {
                  if (v25)
                  {
                    v17 = 0;
                    while (1)
                    {
                      *(_QWORD *)buf = 0;
                      *(_QWORD *)(a5 + 8) = 0;
                      *(_QWORD *)(a5 + 16) = 0;
                      *(_QWORD *)a5 = 0;
                      (*(void (**)(uint64_t *, uint64_t, _BYTE *))(*v28 + 80))(v28, v17, buf);
                      if (*(_DWORD *)a5)
                        break;
                      if ((unint64_t)(*(_QWORD *)buf - 1) > 0xFFFFFFEFFFFFFFFELL)
                      {
                        if (*(unsigned int *)&buf[4] == 4294967293)
                        {
                          if (v27 != 64)
                          {
                            *(_DWORD *)a5 = 3;
                            *(_QWORD *)(a5 + 8) = "src/access/AccessControl.cpp";
                            v14 = 1;
                            v21 = 400;
                            goto LABEL_82;
                          }
                          v18 = 0;
                          while (1)
                          {
                            v19 = *(_DWORD *)(a2 + 16 + v18);
                            if (v19)
                            {
                              if ((unsigned __int16)(*(_WORD *)buf - 1) < (unsigned __int16)v19
                                && HIWORD(v19) == *(unsigned __int16 *)&buf[2])
                              {
                                goto LABEL_63;
                              }
                            }
                            v18 += 4;
                            if (v18 == 12)
                              goto LABEL_61;
                          }
                        }
                        if (*(_QWORD *)buf < 0xFFFFFFFFFFFF0000)
                        {
                          *(_DWORD *)a5 = 3;
                          *(_QWORD *)(a5 + 8) = "src/access/AccessControl.cpp";
                          v14 = 1;
                          v21 = 419;
                          goto LABEL_82;
                        }
                        if (v27 != 128)
                        {
                          *(_DWORD *)a5 = 3;
                          *(_QWORD *)(a5 + 8) = "src/access/AccessControl.cpp";
                          v14 = 1;
                          v21 = 409;
                          goto LABEL_82;
                        }
                      }
                      else if (v27 != 64)
                      {
                        *(_DWORD *)a5 = 3;
                        *(_QWORD *)(a5 + 8) = "src/access/AccessControl.cpp";
                        v14 = 1;
                        v21 = 391;
                        goto LABEL_82;
                      }
                      if (*(_QWORD *)buf == *(_QWORD *)(a2 + 8))
                        goto LABEL_63;
LABEL_61:
                      if (++v17 >= v25)
                        goto LABEL_75;
                    }
                  }
                  else
                  {
LABEL_63:
                    v24 = 0;
                    *(_QWORD *)(a5 + 8) = 0;
                    *(_QWORD *)(a5 + 16) = 0;
                    *(_QWORD *)a5 = 0;
                    (*(void (**)(uint64_t *, unint64_t *))(*v28 + 112))(v28, &v24);
                    if (!*(_DWORD *)a5)
                    {
                      if (!v24)
                      {
LABEL_78:
                        *(_DWORD *)a5 = 0;
                        *(_QWORD *)(a5 + 8) = "src/access/AccessControl.cpp";
                        v14 = 1;
                        v21 = 464;
LABEL_82:
                        *(_DWORD *)(a5 + 16) = v21;
                        break;
                      }
                      v20 = 0;
                      while (1)
                      {
                        *(_DWORD *)buf = 0;
                        *(_QWORD *)(a5 + 8) = 0;
                        *(_QWORD *)(a5 + 16) = 0;
                        *(_QWORD *)a5 = 0;
                        (*(void (**)(uint64_t *, uint64_t, _BYTE *))(*v28 + 120))(v28, v20, buf);
                        if (*(_DWORD *)a5)
                          break;
                        if (((buf[0] & 1) == 0 || *(_DWORD *)&buf[4] == *(_DWORD *)a3)
                          && ((buf[0] & 2) == 0 || *(unsigned __int16 *)&buf[8] == *(unsigned __int16 *)(a3 + 4))
                          && ((buf[0] & 4) == 0
                           || (*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 16))(a1[1], v31, *(unsigned __int16 *)(a3 + 4))))
                        {
                          goto LABEL_78;
                        }
                        if (++v20 >= v24)
                          goto LABEL_75;
                      }
                    }
                  }
                }
                v14 = 1;
              }
            }
            break;
        }
      }
    }
    else
    {
LABEL_75:
      v14 = 10;
    }
    if (v14 != 10)
      goto LABEL_91;
  }
  v22 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_DEFAULT, "AccessControl: denied", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xDu, 2);
  *(_DWORD *)a5 = 165;
  *(_QWORD *)(a5 + 8) = "src/access/AccessControl.cpp";
  v23 = 469;
LABEL_90:
  *(_DWORD *)(a5 + 16) = v23;
LABEL_91:
  (*(void (**)(uint64_t *))(*v28 + 16))(v28);
  return (*(uint64_t (**)(uint64_t *))(*v29 + 16))(v29);
}

uint64_t *sub_2341D512C()
{
  uint64_t *result;

  result = (uint64_t *)qword_25615DA08;
  if (!qword_25615DA08)
  {
    result = &qword_25615DA10;
    if (!byte_25615DA28)
    {
      byte_25615DA28 = 1;
      qword_25615DA18 = 0;
      unk_25615DA20 = 0;
      qword_25615DA10 = 0;
    }
  }
  return result;
}

uint64_t sub_2341D5160(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  v2 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "AccessControl: setting", v4, 2u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    result = sub_2341147D0(0xDu, 2);
  qword_25615DA08 = a1;
  return result;
}

void sub_2341D51F4()
{
  qword_25615DA08 = 0;
}

void sub_2341D5200(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 82;
}

void sub_2341D5220(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 83;
}

void sub_2341D5240(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 84;
}

void sub_2341D5260(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 87;
}

void sub_2341D5280(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 88;
}

void sub_2341D52A0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 89;
}

void sub_2341D52C0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 92;
}

void sub_2341D52E0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 93;
}

void sub_2341D5300(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 94;
}

void sub_2341D5320(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 95;
}

void sub_2341D5340(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 96;
}

void sub_2341D5360(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 99;
}

void sub_2341D5380(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 100;
}

void sub_2341D53A0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 101;
}

void sub_2341D53C0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 102;
}

void sub_2341D53E0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 103;
}

void sub_2341D5400(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 10;
  *(_QWORD *)(a1 + 8) = "src/access/AccessControl.h";
  *(_DWORD *)(a1 + 16) = 255;
}

uint64_t sub_2341D5420(uint64_t result)
{
  *(_DWORD *)(result + 7) = 0;
  *(_QWORD *)result = 0;
  return result;
}

uint64_t sub_2341D542C(uint64_t a1)
{
  sub_2341D5450(a1);
  return a1;
}

void sub_2341D5450(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 10))
  {
    if (*(_QWORD *)a1)
    {
      sub_2341D5538(a1);
      j__free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
  }
}

void sub_2341D5490(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v5;
  void *v6;
  int v7;
  int v8;

  *(_OWORD *)a3 = xmmword_250514E98;
  *(_QWORD *)(a3 + 16) = 68;
  if (a2)
  {
    v5 = a2;
    v6 = sub_234114774(424 * a2);
    *(_QWORD *)a1 = v6;
    if (v6)
    {
      *(_BYTE *)(a1 + 9) = v5;
      *(_BYTE *)(a1 + 10) = 1;
      sub_2341D5538(a1);
      return;
    }
    v7 = 72;
    v8 = 11;
  }
  else
  {
    v7 = 70;
    v8 = 47;
  }
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  sub_2341D5450(a1);
}

void sub_2341D5538(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  if (*(_BYTE *)(a1 + 9))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      sub_2341D55FC(*(_QWORD *)a1 + v2);
      ++v3;
      v2 += 424;
    }
    while (v3 < *(unsigned __int8 *)(a1 + 9));
  }
  *(_BYTE *)(a1 + 8) = 0;
}

void sub_2341D5590(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;

  *(_OWORD *)a4 = xmmword_250514EB0;
  *(_QWORD *)(a4 + 16) = 90;
  if (a2)
  {
    if (a3)
    {
      *(_QWORD *)a1 = a2;
      *(_BYTE *)(a1 + 9) = a3;
      *(_BYTE *)(a1 + 10) = 0;
      sub_2341D5538(a1);
      return;
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
    v4 = 93;
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
    v4 = 92;
  }
  *(_DWORD *)(a4 + 16) = v4;
}

double sub_2341D55FC(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t j;
  uint64_t v4;
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  for (i = 16; i != 176; i += 32)
  {
    v2 = a1 + i;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 23) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  for (j = 0; j != 160; j += 32)
  {
    v4 = a1 + 176 + j;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 23) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_QWORD *)(a1 + 336) = &unk_2342EDFA4;
  *(_QWORD *)(a1 + 344) = &unk_2342EDFA4;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = &unk_2342EDFA4;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = &unk_2342EDFA4;
  result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

void sub_2341D5670(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  _BYTE v10[72];

  sub_234104468((uint64_t)v10);
  sub_234104498((uint64_t)v10, a2, a3);
  sub_2341D56E0(a1, (uint64_t)v10, a4, a5);
}

void sub_2341D56E0(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  _WORD v13[212];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v13);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341DBA4C(a2, (uint64_t)v13, a3, a4);
  if (!*(_DWORD *)a4)
  {
    if ((~v13[187] & 0x18) != 0)
    {
      v12 = 144;
      v11 = 80;
    }
    else if (v13[186] == 513)
    {
      LODWORD(v8) = *(unsigned __int8 *)(a1 + 8);
      if (*(_BYTE *)(a1 + 8))
      {
        v9 = 0;
        v10 = 0;
        while (!sub_2341D584C((uint64_t)v13, *(_QWORD *)a1 + v9))
        {
          ++v10;
          v8 = *(unsigned __int8 *)(a1 + 8);
          v9 += 424;
          if (v10 >= v8)
            goto LABEL_8;
        }
        v11 = 0;
        v12 = 155;
      }
      else
      {
LABEL_8:
        if (v8 >= *(unsigned __int8 *)(a1 + 9))
        {
          v12 = 160;
          v11 = 11;
        }
        else
        {
          memcpy((void *)(*(_QWORD *)a1 + 424 * v8), v13, 0x1A8uLL);
          v11 = 0;
          ++*(_BYTE *)(a1 + 8);
          v12 = 165;
        }
      }
    }
    else
    {
      v12 = 147;
      v11 = 23;
    }
    *(_DWORD *)a4 = v11;
    a4[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a4 + 4) = v12;
  }
}

BOOL sub_2341D584C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;

  result = sub_2341D6674(a1 + 16, a2 + 16);
  if (result)
  {
    result = sub_2341D6674(a1 + 176, a2 + 176);
    if (result)
    {
      v5 = *(uint64_t **)(a2 + 336);
      v6 = *(uint64_t **)(a1 + 336);
      v7 = *v6;
      v8 = v6[1];
      v9 = *v5;
      v10 = v5[1];
      v11 = *((unsigned int *)v6 + 4);
      v12 = *((unsigned int *)v5 + 4);
      if (v7 != v9 || v8 != v10 || v11 != v12)
        return 0;
      v15 = *(uint64_t **)(a2 + 344);
      v16 = *(uint64_t **)(a1 + 344);
      v17 = *v16;
      v18 = v16[1];
      v19 = *v15;
      v20 = v15[1];
      v21 = *((unsigned int *)v16 + 4);
      v22 = *((unsigned int *)v15 + 4);
      v23 = v17 == v19 && v18 == v20;
      v24 = v23 && v21 == v22;
      return v24
          && *(_DWORD *)(a1 + 352) == *(_DWORD *)(a2 + 352)
          && *(_DWORD *)(a1 + 356) == *(_DWORD *)(a2 + 356)
          && !memcmp(*(const void **)(a1 + 360), *(const void **)(a2 + 360), 0x41uLL)
          && *(unsigned __int16 *)(a1 + 368) == *(unsigned __int16 *)(a2 + 368)
          && *(unsigned __int16 *)(a1 + 370) == *(unsigned __int16 *)(a2 + 370)
          && *(unsigned __int16 *)(a1 + 372) == *(unsigned __int16 *)(a2 + 372)
          && *(unsigned __int16 *)(a1 + 374) == *(unsigned __int16 *)(a2 + 374)
          && *(unsigned __int16 *)(a1 + 376) == *(unsigned __int16 *)(a2 + 376)
          && *(unsigned __int8 *)(a1 + 378) == *(unsigned __int8 *)(a2 + 378)
          && *(unsigned __int8 *)(a1 + 379) == *(unsigned __int8 *)(a2 + 379)
          && !memcmp(*(const void **)(a1 + 384), *(const void **)(a2 + 384), 0x40uLL)
          && *(_QWORD *)(a1 + 392) == *(_QWORD *)(a2 + 392)
          && *(_QWORD *)(a1 + 400) == *(_QWORD *)(a2 + 400)
          && *(_QWORD *)(a1 + 408) == *(_QWORD *)(a2 + 408)
          && *(_QWORD *)(a1 + 416) == *(_QWORD *)(a2 + 416);
    }
  }
  return result;
}

uint64_t sub_2341D59C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (*(_BYTE *)(result + 8) && *(_QWORD *)result)
  {
    v2 = 0;
    --*(_BYTE *)(result + 8);
    v3 = 176;
  }
  else
  {
    v3 = 171;
    v2 = 172;
  }
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_2341D5A04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *((unsigned __int8 *)a1 + 8);
  if (!*((_BYTE *)a1 + 8))
    return 0;
  result = *a1;
  v4 = *a2;
  while (1)
  {
    v5 = *(uint64_t **)(result + 336);
    v6 = *v5;
    v7 = v5[1];
    v8 = *((unsigned int *)v5 + 4);
    v9 = v6 == *(_QWORD *)v4 && v7 == *(_QWORD *)(v4 + 8);
    if (v9 && v8 == *(_DWORD *)(v4 + 16))
      break;
    result += 424;
    if (!--v2)
      return 0;
  }
  return result;
}

BOOL sub_2341D5A4C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 8))
    return 0;
  if (*(_QWORD *)a1 == a2)
    return 1;
  v3 = 0;
  v4 = *(_QWORD *)a1 + 424;
  do
  {
    v5 = v3 + 1;
    if (v2 - 1 == v3)
      break;
    ++v3;
    v6 = v4 == a2;
    v4 += 424;
  }
  while (!v6);
  return v5 < v2;
}

void sub_2341D5AA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 8))
    goto LABEL_9;
  if (*(_QWORD *)a1 == a2)
    goto LABEL_8;
  v5 = 0;
  v6 = *(_QWORD *)a1 + 424;
  do
  {
    v7 = v5 + 1;
    if (v4 - 1 == v5)
      break;
    ++v5;
    v8 = v6 == a2;
    v6 += 424;
  }
  while (!v8);
  if (v7 < v4)
  {
LABEL_8:
    *(_QWORD *)(a3 + 16) = 0;
    sub_2341D5B1C(a1, a2, a3, 0, a4);
  }
  else
  {
LABEL_9:
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a4 + 16) = 208;
  }
}

double sub_2341D5B1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  double result;
  __int16 v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  NSObject *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unsigned __int8 v36;
  uint64_t v37;
  uint8_t buf[16];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a5 = xmmword_250514EC8;
  *(_QWORD *)(a5 + 16) = 254;
  v37 = 0;
  v36 = 0;
  v10 = a2 + 16;
  sub_2341D63F8(a2 + 16, &v36, a5);
  if (!*(_DWORD *)a5)
  {
    v12 = *(_WORD *)(a2 + 374);
    if ((v12 & 0x20) != 0)
    {
      *(_DWORD *)a5 = 77;
      *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
      v13 = 262;
      goto LABEL_7;
    }
    if ((_DWORD)a4)
    {
      if ((v12 & 0x80) == 0)
      {
        *(_DWORD *)a5 = 77;
        *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        v13 = 268;
LABEL_7:
        *(_DWORD *)(a5 + 16) = v13;
        return result;
      }
      if ((v12 & 2) == 0 || (*(_WORD *)(a2 + 376) & 0x20) == 0)
      {
        *(_DWORD *)a5 = 77;
        *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        v13 = 272;
        goto LABEL_7;
      }
      if (v36 - 1 >= 2)
      {
        *(_DWORD *)a5 = 157;
        *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        v13 = 275;
        goto LABEL_7;
      }
      if ((v12 & 0x40) != 0 && (int)a4 - 1 > *(unsigned __int8 *)(a2 + 379))
      {
        *(_DWORD *)a5 = 75;
        *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        v13 = 286;
        goto LABEL_7;
      }
    }
    else
    {
      if (*(_WORD *)(a3 + 24)
        && ((v12 & 2) == 0 || (*(unsigned __int16 *)(a3 + 24) & ~*(unsigned __int16 *)(a2 + 376)) != 0))
      {
        *(_DWORD *)a5 = 77;
        *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        v13 = 299;
        goto LABEL_7;
      }
      if (*(_BYTE *)(a3 + 26)
        && ((v12 & 4) == 0 || (*(unsigned __int8 *)(a3 + 26) & ~*(unsigned __int8 *)(a2 + 378)) != 0))
      {
        *(_DWORD *)a5 = 77;
        *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        v13 = 308;
        goto LABEL_7;
      }
      if (*(_BYTE *)(a3 + 27) && v36 != *(unsigned __int8 *)(a3 + 27))
      {
        *(_DWORD *)a5 = 157;
        *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        v13 = 314;
        goto LABEL_7;
      }
    }
    if (*(_QWORD *)a3 == 1)
    {
      if (*(_DWORD *)(a2 + 356) && *(_DWORD *)sub_2341D660C((_QWORD *)a3) > *(_DWORD *)(a2 + 356))
      {
        v18 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          v19 = *(_DWORD *)(a2 + 356);
          v20 = *(_DWORD *)sub_2341D660C((_QWORD *)a3);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v19;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v20;
          _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_INFO, "Certificate's mNotAfterTime (%u) is before last known good time (%u)", buf, 0xEu);
        }
        if (sub_234114844(3u))
        {
          sub_2341D660C((_QWORD *)a3);
          sub_2341147D0(0xBu, 3);
        }
        v17 = 4;
      }
      else
      {
        v17 = 3;
      }
    }
    else if (*(_QWORD *)a3)
    {
      v17 = 5;
    }
    else if (*(_DWORD *)sub_2341D65EC((_QWORD *)a3) >= *(_DWORD *)(a2 + 352))
    {
      if (*(_DWORD *)(a2 + 356) && *(_DWORD *)sub_2341D65EC((_QWORD *)a3) > *(_DWORD *)(a2 + 356))
      {
        v21 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          v22 = *(_DWORD *)(a2 + 356);
          v23 = *(_DWORD *)sub_2341D65EC((_QWORD *)a3);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v22;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v23;
          _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_INFO, "Certificate's mNotAfterTime (%u) is before current time (%u)", buf, 0xEu);
        }
        if (sub_234114844(3u))
        {
          sub_2341D65EC((_QWORD *)a3);
          sub_2341147D0(0xBu, 3);
        }
        v17 = 2;
      }
      else
      {
        v17 = 0;
      }
    }
    else
    {
      v14 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = *(_DWORD *)(a2 + 352);
        v16 = *(_DWORD *)sub_2341D65EC((_QWORD *)a3);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v15;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v16;
        _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_INFO, "Certificate's mNotBeforeTime (%u) is after current time (%u)", buf, 0xEu);
      }
      if (sub_234114844(3u))
      {
        sub_2341D65EC((_QWORD *)a3);
        sub_2341147D0(0xBu, 3);
      }
      v17 = 1;
    }
    v24 = *(_QWORD *)(a3 + 32);
    if (!v24)
    {
      v13 = 1464;
      v25 = 79;
      switch((int)v17)
      {
        case 0:
        case 3:
        case 4:
        case 5:
          *(_DWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
          *(_DWORD *)(a5 + 16) = 1461;
          goto LABEL_58;
        case 1:
          break;
        case 2:
          v13 = 1467;
          v25 = 78;
          break;
        default:
          v13 = 1470;
          v25 = 172;
          break;
      }
      *(_DWORD *)a5 = v25;
      *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
      goto LABEL_7;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, a2, a4, v17);
    if (!*(_DWORD *)a5)
    {
LABEL_58:
      if ((*(_WORD *)(a2 + 374) & 0x100) != 0)
      {
        *(_QWORD *)(a3 + 16) = a2;
        *(_DWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
        v13 = 386;
      }
      else
      {
        if (!sub_2341D6674(a2 + 176, v10))
          goto LABEL_67;
        v26 = *(uint64_t **)(a2 + 336);
        v27 = *(uint64_t **)(a2 + 344);
        v28 = *v27;
        v29 = v27[1];
        v30 = *v26;
        v31 = v26[1];
        v32 = *((unsigned int *)v27 + 4);
        v33 = *((unsigned int *)v26 + 4);
        v34 = v28 == v30 && v29 == v31;
        if (v34 && v32 == v33)
        {
          *(_DWORD *)a5 = 87;
          *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
          v13 = 396;
        }
        else
        {
LABEL_67:
          if (*(unsigned __int8 *)(a1 + 8) <= a4)
          {
            *(_DWORD *)a5 = 76;
            *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
            v13 = 402;
          }
          else
          {
            sub_2341D6178(buf, a1, a2 + 176, a2 + 344, a3, (a4 + 1), &v37);
            result = *(double *)buf;
            *(_OWORD *)a5 = *(_OWORD *)buf;
            *(_QWORD *)(a5 + 16) = v39;
            if (!*(_DWORD *)a5)
            {
              sub_2341D62C0(a2, v37, (uint64_t)buf);
              result = *(double *)buf;
              *(_OWORD *)a5 = *(_OWORD *)buf;
              *(_QWORD *)(a5 + 16) = v39;
              return result;
            }
            *(_DWORD *)a5 = 74;
            *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
            v13 = 409;
          }
        }
      }
      goto LABEL_7;
    }
  }
  return result;
}

void sub_2341D6168(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  *(_QWORD *)(a4 + 16) = 0;
  sub_2341D6178(a1, a2, a3, a4, 0, a5, a6);
}

void sub_2341D6178(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  int v8;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;

  *a6 = 0;
  if ((_DWORD)a5)
    v8 = 74;
  else
    v8 = 83;
  *(_DWORD *)a7 = v8;
  *(_QWORD *)(a7 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a7 + 16) = 429;
  if (*(_BYTE *)(a1 + 8))
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)a1;
      v17 = *(_QWORD *)a1 + v14;
      if (sub_2341D6674(v17 + 16, a2))
      {
        v18 = *(uint64_t **)(v17 + 336);
        v19 = *v18;
        v20 = v18[1];
        v21 = *((unsigned int *)v18 + 4);
        v22 = v19 == **(_QWORD **)a3 && v20 == *(_QWORD *)(*(_QWORD *)a3 + 8);
        if (v22 && v21 == *(_DWORD *)(*(_QWORD *)a3 + 16))
        {
          sub_2341D5B1C(a1, v17, a4, a5, a7);
          if (!*(_DWORD *)a7)
            break;
        }
      }
      ++v15;
      v14 += 424;
      if (v15 >= *(unsigned __int8 *)(a1 + 8))
        return;
    }
    *a6 = v16 + v14;
  }
}

uint64_t sub_2341D6294@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result && a2)
    return sub_2341D62C0(result, a2, a3);
  *(_DWORD *)a3 = 47;
  *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = 225;
  return result;
}

uint64_t sub_2341D62C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _OWORD v13[4];
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(result + 374) & 0x200) == 0)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    v4 = 231;
LABEL_8:
    *(_DWORD *)(a3 + 16) = v4;
    return result;
  }
  if (*(_WORD *)(result + 372) != 513)
  {
    *(_DWORD *)a3 = 23;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    v4 = 232;
    goto LABEL_8;
  }
  v14 = 64;
  v15 = &off_250505A50;
  v5 = *(__int128 **)(result + 384);
  v6 = v5[3];
  v8 = *v5;
  v7 = v5[1];
  v13[2] = v5[2];
  v13[3] = v6;
  v13[0] = v8;
  v13[1] = v7;
  v9 = *(__int128 **)(a2 + 360);
  v16 = *v9;
  v11 = v9[2];
  v10 = v9[3];
  v12 = *((_BYTE *)v9 + 64);
  v17 = v9[1];
  v18 = v11;
  v20 = v12;
  v19 = v10;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23413A114((uint64_t)&v15, result + 392, 32, (uint64_t)v13, a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a3 + 16) = 249;
  }
  return sub_23413A7A4(v13, 64);
}

uint64_t sub_2341D63F8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  int v13;

  v4 = result;
  v6 = 0;
  v7 = 24;
  while (*(_WORD *)(result + v7))
  {
    ++v6;
    v7 += 32;
    if (v6 == 5)
      goto LABEL_13;
  }
  LOBYTE(v8) = v6;
  if (v6 == 1)
  {
    if (*(_WORD *)(result + 24) == 769 && !*(_BYTE *)(result + 26))
    {
      result = sub_2341D68A8(result, (uint64_t)&off_250514EE0);
      if ((result & 1) != 0)
      {
        v9 = 616;
        LOBYTE(v8) = 5;
        goto LABEL_38;
      }
    }
    v6 = 1;
LABEL_13:
    *a2 = 0;
    goto LABEL_14;
  }
  *a2 = 0;
  if (!(_BYTE)v6)
  {
LABEL_37:
    v9 = 673;
LABEL_38:
    v13 = 0;
    *a2 = v8;
    goto LABEL_49;
  }
LABEL_14:
  v10 = 0;
  v11 = 0;
  v8 = 0;
  v12 = v4 + 16;
  while (2)
  {
    switch(*(_WORD *)(v12 + 8))
    {
      case 0x311:
        if (v8)
        {
          v9 = 637;
          goto LABEL_48;
        }
        if ((unint64_t)(*(_QWORD *)v12 - 1) < 0xFFFFFFEFFFFFFFFFLL)
        {
          v8 = 3;
          goto LABEL_31;
        }
        v9 = 638;
        v13 = 92;
        break;
      case 0x312:
        if (!v8)
        {
          v8 = 4;
          goto LABEL_31;
        }
        v9 = 643;
        goto LABEL_48;
      case 0x313:
        if (v8)
        {
          v9 = 631;
          goto LABEL_48;
        }
        v8 = 2;
        goto LABEL_31;
      case 0x314:
        if (v8)
        {
          v9 = 625;
          goto LABEL_48;
        }
        v8 = 1;
        goto LABEL_31;
      case 0x315:
        if ((v11 & 1) != 0)
        {
          v9 = 650;
          goto LABEL_48;
        }
        if (!*(_QWORD *)v12)
        {
          v9 = 651;
          goto LABEL_48;
        }
        v11 = 1;
        goto LABEL_31;
      case 0x316:
        if (HIDWORD(*(_QWORD *)v12))
        {
          v9 = 656;
          goto LABEL_48;
        }
        if (!(unsigned __int16)*(_QWORD *)v12)
        {
          v9 = 657;
          goto LABEL_48;
        }
        v10 = 1;
LABEL_31:
        v12 += 32;
        if (--v6)
          continue;
        if (v8 != 3)
        {
          if ((v10 & 1) != 0)
          {
            v9 = 668;
            goto LABEL_48;
          }
          goto LABEL_37;
        }
        if ((v11 & 1) != 0)
        {
          v9 = 673;
          LOBYTE(v8) = 3;
          goto LABEL_38;
        }
        v9 = 664;
LABEL_48:
        v13 = 89;
        break;
      default:
        goto LABEL_31;
    }
    break;
  }
LABEL_49:
  *(_DWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

_QWORD *sub_2341D65EC(_QWORD *a1)
{
  if (*a1)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

_QWORD *sub_2341D660C(_QWORD *a1)
{
  if (*a1 != 1)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

void sub_2341D6630(signed int a1@<W2>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (a1 > 5)
  {
    v3 = 1470;
    v2 = 172;
  }
  else
  {
    v2 = dword_2342EDFE8[a1];
    v3 = dword_2342EE000[a1];
  }
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a2 + 16) = v3;
}

BOOL sub_2341D6674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  uint64_t v10;
  _BOOL8 result;
  BOOL v13;

  v2 = a2;
  v3 = a1;
  v4 = 0;
  v5 = (unsigned __int16 *)(a1 + 24);
  while (1)
  {
    v6 = *v5;
    v5 += 16;
    if (!v6)
      break;
    if (++v4 == 5)
      goto LABEL_6;
  }
  LODWORD(v4) = v4;
  if (!(_BYTE)v4)
    return 0;
LABEL_6:
  v7 = 0;
  v8 = (unsigned __int16 *)(a2 + 24);
  while (1)
  {
    v9 = *v8;
    v8 += 16;
    if (!v9)
      break;
    if (++v7 == 5)
      goto LABEL_11;
  }
  LODWORD(v7) = v7;
LABEL_11:
  if ((_DWORD)v4 != (_DWORD)v7)
    return 0;
  v10 = v4 - 1;
  do
  {
    result = sub_2341D684C(v3, v2);
    v13 = v10-- != 0;
    if (!result)
      break;
    v3 += 32;
    v2 += 32;
  }
  while (v13);
  return result;
}

uint64_t sub_2341D6730(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v8;

  v1 = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  do
  {
    v2 = result + v1;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_WORD *)(v2 + 40) = 0;
    v1 += 32;
  }
  while (v1 != 160);
  for (i = 16; i != 176; i += 32)
  {
    v4 = result + i;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 23) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  for (j = 0; j != 160; j += 32)
  {
    v6 = result + j;
    *(_QWORD *)(v6 + 176) = 0;
    *(_QWORD *)(v6 + 184) = 0;
    *(_WORD *)(v6 + 200) = 0;
  }
  for (k = 176; k != 336; k += 32)
  {
    v8 = result + k;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 23) = 0;
    *(_QWORD *)(v8 + 16) = 0;
  }
  *(_QWORD *)(result + 336) = &unk_2342EDFA4;
  *(_QWORD *)(result + 344) = &unk_2342EDFA4;
  *(_QWORD *)(result + 360) = &unk_2342EDFA4;
  *(_DWORD *)(result + 374) = 0;
  *(_BYTE *)(result + 378) = 0;
  *(_QWORD *)(result + 384) = &unk_2342EDFA4;
  return result;
}

uint64_t sub_2341D67D0(uint64_t result)
{
  uint64_t i;
  uint64_t v2;
  uint64_t j;
  uint64_t v4;

  for (i = 0; i != 160; i += 32)
  {
    v2 = result + i;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_WORD *)(v2 + 24) = 0;
  }
  for (j = 0; j != 160; j += 32)
  {
    v4 = result + j;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 23) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  return result;
}

uint64_t sub_2341D6810(uint64_t result)
{
  uint64_t i;
  uint64_t v2;

  for (i = 0; i != 160; i += 32)
  {
    v2 = result + i;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 23) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  return result;
}

uint64_t sub_2341D6834(uint64_t result)
{
  *(_QWORD *)result = -1;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

BOOL sub_2341D684C(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;

  v2 = *(unsigned __int16 *)(a1 + 24);
  if (*(_WORD *)(a1 + 24))
    v3 = v2 == 0xFFFF;
  else
    v3 = 1;
  if (v3 || v2 != *(unsigned __int16 *)(a2 + 24) || *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a2 + 26))
    return 0;
  if ((v2 - 785) > 5)
    return sub_2341D68A8(a1, a2);
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

BOOL sub_2341D68A8(uint64_t a1, uint64_t a2)
{
  size_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
    return 0;
  if (v2)
    return memcmp(*(const void **)a1, *(const void **)a2, v2) == 0;
  return 1;
}

uint64_t sub_2341D68F0(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  int v3;

  v1 = 0;
  v2 = (unsigned __int16 *)(a1 + 24);
  do
  {
    v3 = *v2;
    v2 += 16;
    if (!v3)
      break;
    ++v1;
  }
  while (v1 != 5);
  return v1;
}

uint64_t sub_2341D6914@<X0>(uint64_t result@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;

  v4 = 0;
  v5 = (_BYTE *)(result + 26);
  while (*((_WORD *)v5 - 1))
  {
    ++v4;
    v5 += 32;
    if (v4 == 5)
      goto LABEL_10;
  }
  if (v4 > 4u)
  {
LABEL_10:
    v6 = 560;
    v7 = 11;
    goto LABEL_14;
  }
  if ((a2 - 785) > 5)
  {
    v6 = 561;
  }
  else
  {
    if (a2 != 790 || !HIDWORD(a3))
    {
      v7 = 0;
      *((_WORD *)v5 - 1) = a2;
      *(_QWORD *)(v5 - 10) = a3;
      v6 = 572;
      *v5 = 0;
      goto LABEL_14;
    }
    v6 = 565;
  }
  v7 = 47;
LABEL_14:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t sub_2341D69AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;

  result = sub_2340061EC(a2);
  if ((_DWORD)result)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(unsigned int *)(a2 + v7);
      if ((_DWORD)v8)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        result = sub_2341D6914(a1, 790, v8, (uint64_t)a3);
        if (*(_DWORD *)a3)
          break;
      }
      v7 += 4;
      if (v7 == 12)
      {
        v9 = 0;
        v10 = 587;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v10 = 577;
    v9 = 47;
LABEL_8:
    *(_DWORD *)a3 = v9;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = v10;
  }
  return result;
}

uint64_t sub_2341D6A44@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v6 = 0;
  v7 = result + 24;
  while (*(_WORD *)v7)
  {
    ++v6;
    v7 += 32;
    if (v6 == 5)
      goto LABEL_8;
  }
  if (v6 > 4u)
  {
LABEL_8:
    v8 = 594;
    v9 = 11;
    goto LABEL_9;
  }
  if ((a2 - 785) < 6)
  {
    v8 = 595;
LABEL_13:
    v9 = 47;
    goto LABEL_9;
  }
  if (!a2)
  {
    v8 = 596;
    goto LABEL_13;
  }
  v9 = 0;
  *(_WORD *)v7 = a2;
  *(_QWORD *)(v7 - 24) = a3;
  *(_QWORD *)(v7 - 16) = a4;
  v8 = 602;
  *(_BYTE *)(v7 + 2) = a5;
LABEL_9:
  *(_DWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a6 + 16) = v8;
  return result;
}

uint64_t sub_2341D6AD0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int16 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;
  int v12;

  v3 = 0;
  v4 = (unsigned __int16 *)(result + 24);
  while (1)
  {
    v5 = *v4;
    v4 += 16;
    if (!v5)
      break;
    if (--v3 == -5)
    {
      *a2 = 0;
      v6 = 5;
      goto LABEL_7;
    }
  }
  *a2 = 0;
  if (!v3)
  {
LABEL_17:
    v12 = 701;
    goto LABEL_18;
  }
  v6 = -v3;
LABEL_7:
  v7 = 0;
  v8 = 0;
  v9 = -v6;
  while (2)
  {
    v10 = (unsigned __int16 *)(result + 24 + 32 * v7++);
    while (*v10 - 785 > 3)
    {
      ++v7;
      v10 += 16;
      if (v9 + v7 == 1)
      {
        if ((v8 & 1) == 0)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    if ((v8 & 1) == 0)
    {
      *a2 = *((_QWORD *)v10 - 1);
      v8 = 1;
      if (v9 + v7)
        continue;
LABEL_16:
      v11 = 0;
      v12 = 702;
      goto LABEL_19;
    }
    break;
  }
  v12 = 691;
LABEL_18:
  v11 = 89;
LABEL_19:
  *(_DWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v12;
  return result;
}

uint64_t sub_2341D6B98@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int16 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;

  v3 = 0;
  v4 = (unsigned __int16 *)(result + 24);
  while (1)
  {
    v5 = *v4;
    v4 += 16;
    if (!v5)
      break;
    if (--v3 == -5)
    {
      *a2 = 0;
      v6 = 5;
      goto LABEL_7;
    }
  }
  *a2 = 0;
  if (!v3)
  {
    v13 = 726;
LABEL_22:
    v12 = 89;
    goto LABEL_23;
  }
  v6 = -v3;
LABEL_7:
  v7 = 0;
  v8 = (unsigned __int16 *)(result + 24);
  v9 = (unsigned __int16 *)(result + 24);
  do
  {
    v10 = *v9;
    v9 += 16;
    if (v10 == 789)
    {
      if (v7)
      {
        v13 = 717;
        goto LABEL_22;
      }
      v7 = *((_QWORD *)v8 - 1);
      if (!v7)
      {
        v13 = 718;
        goto LABEL_22;
      }
      *a2 = v7;
    }
    v8 = v9;
    --v6;
  }
  while (v6);
  v11 = v7 == 0;
  if (v7)
    v12 = 0;
  else
    v12 = 89;
  if (v11)
    v13 = 726;
  else
    v13 = 727;
LABEL_23:
  *(_DWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v13;
  return result;
}

char *sub_2341D6C48@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  uint64_t v10;
  char *result;
  _BYTE *i;
  int v13;
  unsigned __int8 v14;
  int v15;

  v7 = 0;
  v8 = (unsigned __int16 *)(a1 + 24);
  while (1)
  {
    v9 = *v8;
    v8 += 16;
    if (!v9)
      break;
    if (++v7 == 5)
    {
      LODWORD(v10) = 5;
      goto LABEL_6;
    }
  }
  LODWORD(v10) = v7;
LABEL_6:
  v15 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 23, &v15, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    if ((_DWORD)v10)
    {
      v10 = v10;
      for (i = (_BYTE *)(a1 + 26); ; i += 32)
      {
        v13 = *((unsigned __int16 *)i - 1);
        v14 = *i ? v13 | 0x80 : *((_WORD *)i - 1);
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = (v13 - 785) > 5
               ? sub_234107684(a2, v14, *(char **)(i - 26), *(_QWORD *)(i - 18), (uint64_t)a4)
               : sub_2341071EC(a2, v14, *(_QWORD *)(i - 10), (uint64_t)a4);
        if (*(_DWORD *)a4)
          break;
        if (!--v10)
          return sub_234107FB0(a2, v15, (uint64_t)a4);
      }
    }
    else
    {
      return sub_234107FB0(a2, v15, (uint64_t)a4);
    }
  }
  return result;
}

double sub_2341D6D60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _BYTE v15[20];
  int v16;
  int v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (sub_23410462C(a2) != 23)
  {
    *(_DWORD *)a3 = 38;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    v13 = 768;
    goto LABEL_27;
  }
  v17 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  sub_23410570C(a2, &v17, a3);
  while (!*(_DWORD *)a3)
  {
    sub_2341058CC(a2, v15);
    result = *(double *)&v15[4];
    v18 = *(_OWORD *)&v15[4];
    v19 = v16;
    if (*(_DWORD *)v15)
    {
      if (*(_DWORD *)v15 != 33)
      {
        *(_DWORD *)a3 = *(_DWORD *)v15;
        result = *(double *)&v18;
        *(_OWORD *)(a3 + 4) = v18;
        *(_DWORD *)(a3 + 20) = v19;
        return result;
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_23410577C(a2, v17, a3);
      if (*(_DWORD *)a3)
        return result;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      v13 = 835;
LABEL_27:
      *(_DWORD *)(a3 + 16) = v13;
      return result;
    }
    v7 = *(_QWORD *)(a2 + 16);
    if (v7 >= 0x100)
    {
      *(_DWORD *)a3 = 36;
      *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      v13 = 778;
      goto LABEL_27;
    }
    v8 = v7 & 0x7F | 0x300;
    if ((v7 & 0x7F) - 17 > 4)
    {
      if (v8 != 790)
      {
        *(_QWORD *)v15 = 0;
        *(_QWORD *)&v15[8] = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = 0;
        sub_234104C8C(a2, v15, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return result;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_2341D6A44(a1, v7 & 0x7F | 0x300, *(uint64_t *)v15, *(uint64_t *)&v15[8], (v7 & 0x80) != 0, a3);
        continue;
      }
      *(_DWORD *)v15 = 0;
      if ((v7 & 0x80) != 0)
      {
        v13 = 816;
        goto LABEL_36;
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_234104A50(a2, v15, a3);
      if (*(_DWORD *)a3)
        return result;
      v9 = *(unsigned int *)v15;
      if (!*(_WORD *)v15)
      {
        v13 = 820;
LABEL_38:
        v14 = 47;
LABEL_39:
        *(_DWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
        goto LABEL_27;
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v10 = a3;
      v11 = a1;
      v12 = 790;
    }
    else
    {
      *(_QWORD *)v15 = 0;
      if ((v7 & 0x80) != 0)
      {
        v13 = 800;
LABEL_36:
        v14 = 36;
        goto LABEL_39;
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_23410499C(a2, v15, a3);
      if (*(_DWORD *)a3)
        return result;
      if (v8 == 785)
      {
        v9 = *(_QWORD *)v15;
        if ((unint64_t)(*(_QWORD *)v15 - 1) >= 0xFFFFFFEFFFFFFFFFLL)
        {
          v13 = 804;
          v14 = 92;
          goto LABEL_39;
        }
      }
      else if (v8 == 789)
      {
        v9 = *(_QWORD *)v15;
        if (!*(_QWORD *)v15)
        {
          v13 = 808;
          goto LABEL_38;
        }
      }
      else
      {
        v9 = *(_QWORD *)v15;
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v10 = a3;
      v11 = a1;
      v12 = v7 & 0x7F | 0x300;
    }
    sub_2341D6914(v11, v12, v9, v10);
  }
  return result;
}

_QWORD *sub_2341D704C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  unsigned int v9;
  _QWORD *result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  __int128 v19;
  int v20;
  _BYTE v21[16];
  __int128 v22;
  int v23;
  uint64_t v24;

  v6 = 0;
  v24 = *MEMORY[0x24BDAC8D0];
  v7 = (unsigned __int16 *)(a1 + 24);
  while (1)
  {
    v8 = *v7;
    v7 += 16;
    if (!v8)
      break;
    if (++v6 == 5)
    {
      v9 = 5;
      goto LABEL_6;
    }
  }
  v9 = v6;
LABEL_6:
  result = (_QWORD *)sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v18);
  v11 = v18;
  v22 = v19;
  v23 = v20;
  if (!v18)
  {
    if (v9)
    {
      v12 = v9;
      v13 = a1 + 16;
      while (1)
      {
        result = (_QWORD *)sub_234138CD8((uint64_t)a2, 0, 0x11u, (uint64_t)&v18);
        v11 = v18;
        v22 = v19;
        v23 = v20;
        if (v18)
          break;
        v14 = *(unsigned __int16 *)(v13 + 8);
        if ((v14 - 785) > 4)
        {
          if (v14 == 790)
          {
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            v15 = v21;
            result = sub_23411538C(*(_DWORD *)v13, v21, 0x10uLL, 1u, a3);
            if (*(_DWORD *)a3)
              return result;
            v16 = 12;
            v17 = 8;
          }
          else
          {
            v15 = *(_BYTE **)(v13 - 16);
            v17 = *(_QWORD *)(v13 - 8);
            if (v14 == 784)
              v16 = 22;
            else
              v16 = *(_BYTE *)(v13 + 10) ? 19 : 12;
          }
        }
        else
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          v15 = v21;
          result = sub_234115324(*(_QWORD *)v13, v21, 0x10uLL, 1u, a3);
          if (*(_DWORD *)a3)
            return result;
          v16 = 12;
          v17 = 16;
        }
        result = (_QWORD *)sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v18);
        v11 = v18;
        v22 = v19;
        v23 = v20;
        if (v18)
          break;
        result = sub_2341370A0(a2, v14, (uint64_t)&v18);
        v11 = v18;
        v22 = v19;
        v23 = v20;
        if (v18)
          break;
        if (v17 >= 0x10000)
        {
          *(_DWORD *)a3 = 80;
          *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
          *(_DWORD *)(a3 + 16) = 893;
          return result;
        }
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        result = sub_234138610(a2, v16, v15, (unsigned __int16)v17, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return result;
        result = sub_234138CE4(&v18, a2);
        v11 = v18;
        v22 = v19;
        v23 = v20;
        if (v18)
          break;
        result = sub_234138CE4(&v18, a2);
        v11 = v18;
        v22 = v19;
        v23 = v20;
        if (v18)
          break;
        v13 += 32;
        if (!--v12)
          goto LABEL_28;
      }
    }
    else
    {
LABEL_28:
      result = sub_234138CE4(&v18, a2);
      v11 = v18;
      v22 = v19;
      v23 = v20;
    }
  }
  *(_DWORD *)a3 = v11;
  *(_OWORD *)(a3 + 4) = v22;
  *(_DWORD *)(a3 + 20) = v23;
  return result;
}

_QWORD *sub_2341D7334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *result;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  const char *v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  int v20;
  unint64_t v21;
  char v22;
  int v23;
  const char *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28[2];
  unsigned __int16 v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;

  result = (_QWORD *)sub_23413712C(a2, (uint64_t)&v30);
  v14 = v30;
  if ((_DWORD)v30)
    goto LABEL_2;
  if (*(_BYTE *)a2 || *(_BYTE *)(a2 + 1) != 16)
  {
    LODWORD(v13) = 915;
    LODWORD(v14) = 773;
    goto LABEL_53;
  }
  result = (_QWORD *)sub_234137338(a2, (uint64_t)&v30);
  v14 = v30;
  if ((_DWORD)v30)
  {
LABEL_2:
    v15 = v31;
    v13 = v32;
    goto LABEL_54;
  }
  LODWORD(v4) = 920;
  LODWORD(v5) = 773;
  LODWORD(v7) = 773;
  LODWORD(v8) = 773;
  LODWORD(v6) = 923;
  LODWORD(v3) = 928;
  v16 = "src/credentials/CHIPCert.cpp";
  while (1)
  {
    result = (_QWORD *)sub_23413712C(a2, (uint64_t)&v30);
    if ((_DWORD)v30)
    {
      result = (_QWORD *)sub_23413712C(a2, (uint64_t)&v30);
      v14 = v30;
      v13 = v32;
      if ((_DWORD)v30)
      {
        if ((_DWORD)v30 == 768)
        {
          result = sub_234137434(&v30, a2);
          v14 = v30;
          goto LABEL_2;
        }
        goto LABEL_66;
      }
      LODWORD(v14) = 773;
      v23 = 998;
LABEL_75:
      LODWORD(v13) = v23;
LABEL_53:
      v15 = "src/credentials/CHIPCert.cpp";
      goto LABEL_54;
    }
    if (*(_BYTE *)a2)
      v17 = 0;
    else
      v17 = *(_BYTE *)(a2 + 1) == 17;
    if (!v17)
    {
      v15 = "src/credentials/CHIPCert.cpp";
      v14 = v8;
      v13 = v4;
      goto LABEL_54;
    }
    result = (_QWORD *)sub_234137338(a2, (uint64_t)&v30);
    v14 = v30;
    if ((_DWORD)v30)
      goto LABEL_2;
    result = (_QWORD *)sub_23413712C(a2, (uint64_t)&v30);
    v14 = v30;
    if ((_DWORD)v30)
      goto LABEL_2;
    if (*(_BYTE *)a2 || *(_BYTE *)(a2 + 1) != 16)
    {
      v15 = "src/credentials/CHIPCert.cpp";
      v14 = v5;
      v13 = v6;
      goto LABEL_54;
    }
    result = (_QWORD *)sub_234137338(a2, (uint64_t)&v30);
    v14 = v30;
    if ((_DWORD)v30)
      goto LABEL_2;
    v29 = 0;
    result = (_QWORD *)sub_23413712C(a2, (uint64_t)&v30);
    v14 = v30;
    if ((_DWORD)v30)
      break;
    if (*(_BYTE *)a2 || *(_BYTE *)(a2 + 1) != 6)
    {
      v14 = v7;
      goto LABEL_70;
    }
    result = sub_234136FF8(a2, &v29, (uint64_t)&v30);
    v14 = v30;
    if ((_DWORD)v30)
      break;
    result = (_QWORD *)sub_234136F70(v29);
    if ((_DWORD)result != 768)
    {
      *(_DWORD *)a3 = 773;
      *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      v26 = 929;
      goto LABEL_82;
    }
    result = (_QWORD *)sub_23413712C(a2, (uint64_t)&v30);
    v14 = v30;
    if ((_DWORD)v30)
      break;
    if (*(_BYTE *)a2 || (v18 = *(unsigned __int8 *)(a2 + 1), v18 > 0x16) || ((1 << v18) & 0x481000) == 0)
    {
      *(_DWORD *)a3 = 774;
      *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      v26 = 940;
      goto LABEL_82;
    }
    v19 = v29;
    if (v18 != 12 && (unsigned __int16)(v29 - 785) <= 5u)
    {
      *(_DWORD *)a3 = 773;
      *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      v26 = 945;
      goto LABEL_82;
    }
    if ((unsigned __int16)(v29 - 785) > 4u)
    {
      if (v29 != 790)
      {
        v22 = v18 == 19;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_233CAF22C(v28, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16));
        result = (_QWORD *)sub_2341D6A44(a1, v19, v28[0], v28[1], v22, a3);
        goto LABEL_45;
      }
      LODWORD(v30) = 0;
      result = (_QWORD *)sub_234115554(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16), &v30);
      if (result != (_QWORD *)4)
      {
        v26 = 974;
        goto LABEL_78;
      }
      v21 = v30;
      if (!(_WORD)v30)
      {
        v26 = 976;
        goto LABEL_80;
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v20 = v29;
    }
    else
    {
      v30 = 0;
      result = (_QWORD *)sub_2341154D0(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16), &v30);
      if (result != (_QWORD *)8)
      {
        v26 = 955;
LABEL_78:
        v27 = 773;
        goto LABEL_81;
      }
      v20 = v29;
      if (v29 == 785)
      {
        v21 = v30;
        if (v30 - 1 >= 0xFFFFFFEFFFFFFFFFLL)
        {
          v26 = 959;
          v27 = 92;
          goto LABEL_81;
        }
      }
      else if (v29 == 789)
      {
        v21 = v30;
        if (!v30)
        {
          v26 = 963;
LABEL_80:
          v27 = 89;
LABEL_81:
          *(_DWORD *)a3 = v27;
          *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
LABEL_82:
          *(_DWORD *)(a3 + 16) = v26;
          return result;
        }
      }
      else
      {
        v21 = v30;
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    result = (_QWORD *)sub_2341D6914(a1, v20, v21, a3);
LABEL_45:
    if (*(_DWORD *)a3)
      return result;
    result = (_QWORD *)sub_23413712C(a2, (uint64_t)&v30);
    v14 = v30;
    if ((_DWORD)v30 != 768)
    {
      v13 = v32;
      if (!(_DWORD)v30)
      {
        LODWORD(v14) = 773;
        v23 = 988;
        goto LABEL_75;
      }
      goto LABEL_66;
    }
    result = sub_234137434(&v30, a2);
    v14 = v30;
    if ((_DWORD)v30)
      goto LABEL_2;
    result = (_QWORD *)sub_23413712C(a2, (uint64_t)&v30);
    if ((_DWORD)v30 != 768)
    {
      if (!(_DWORD)v30)
      {
        *(_DWORD *)a3 = 774;
        *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
        v26 = 992;
        goto LABEL_82;
      }
      v24 = v31;
      v25 = v32;
      *(_QWORD *)a3 = v30;
      *(_QWORD *)(a3 + 8) = v24;
      *(_QWORD *)(a3 + 16) = v25;
      return result;
    }
    result = (_QWORD *)sub_23413712C(a2, (uint64_t)&v30);
    v14 = v30;
    if ((_DWORD)v30 != 768)
    {
      v13 = v32;
      if (!(_DWORD)v30)
      {
        LODWORD(v14) = 773;
        v23 = 995;
        goto LABEL_75;
      }
LABEL_66:
      v15 = v31;
      goto LABEL_54;
    }
    result = sub_234137434(&v30, a2);
    v14 = v30;
    v15 = v31;
    v13 = v32;
    if ((_DWORD)v30)
      goto LABEL_54;
  }
  v16 = v31;
  v3 = v32;
LABEL_70:
  v15 = v16;
  v13 = v3;
LABEL_54:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v15;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

uint64_t sub_2341D7874@<X0>(unsigned __int8 *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v14;

  *(_OWORD *)a3 = xmmword_250514EF0;
  *(_QWORD *)(a3 + 16) = 1023;
  result = *(unsigned __int16 *)a1;
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v14 = (_DWORD)result == 9999 && v7 == 12 && v8 == 31 && v9 == 23;
  if (v14 && v10 == 59 && v11 == 59)
  {
    *a2 = 0;
  }
  else
  {
    result = sub_23411747C(result, v7, v8, v9, v10, v11, a2);
    if ((result & 1) == 0)
    {
      *(_DWORD *)a3 = 774;
      *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
      *(_DWORD *)(a3 + 16) = 1054;
    }
  }
  return result;
}

BOOL sub_2341D791C@<W0>(_BOOL8 result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result)
  {
    result = sub_234117514(result, (_WORD *)a2, (_BYTE *)(a2 + 2), (_BYTE *)(a2 + 3), (_BYTE *)(a2 + 4), (_BYTE *)(a2 + 5), (_BYTE *)(a2 + 6));
  }
  else
  {
    *(_WORD *)a2 = 9999;
    *(_DWORD *)(a2 + 2) = 991371020;
    *(_BYTE *)(a2 + 6) = 59;
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = 1091;
  return result;
}

void sub_2341D798C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v6;
  _BYTE *v7;
  char v8;
  __int16 v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  unsigned __int8 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v10);
  v7 = v10;
  v9 = 1;
  sub_2341D55FC((uint64_t)v10);
  v8 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_2341D5670((uint64_t)&v7, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1, a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_2341D7B50((uint64_t)v10, 1, a2);
    if (!*(_DWORD *)a2)
    {
      if (sub_2341D6674((uint64_t)&v11, (uint64_t)&v12))
      {
        if (*(_QWORD *)v13 == *(_QWORD *)v14
          && *(_QWORD *)(v13 + 8) == *(_QWORD *)(v14 + 8)
          && *(_DWORD *)(v13 + 16) == (unint64_t)*(unsigned int *)(v14 + 16))
        {
          if ((v15 & 0x80) != 0)
          {
            if ((v15 & 0x40) != 0 && v17 >= 2u)
            {
              *(_DWORD *)a2 = 77;
              a2[1] = "src/credentials/CHIPCert.cpp";
              v6 = 1124;
            }
            else
            {
              if ((v16 & 0x20) != 0)
              {
                sub_2341D62C0((uint64_t)v10, (uint64_t)v10, (uint64_t)a2);
                goto LABEL_14;
              }
              *(_DWORD *)a2 = 77;
              a2[1] = "src/credentials/CHIPCert.cpp";
              v6 = 1127;
            }
          }
          else
          {
            *(_DWORD *)a2 = 77;
            a2[1] = "src/credentials/CHIPCert.cpp";
            v6 = 1121;
          }
        }
        else
        {
          *(_DWORD *)a2 = 157;
          a2[1] = "src/credentials/CHIPCert.cpp";
          v6 = 1119;
        }
      }
      else
      {
        *(_DWORD *)a2 = 157;
        a2[1] = "src/credentials/CHIPCert.cpp";
        v6 = 1117;
      }
      *((_DWORD *)a2 + 4) = v6;
    }
  }
LABEL_14:
  sub_2341D5450((uint64_t)&v7);
}

uint64_t sub_2341D7B50@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v6;
  int v7;
  unsigned __int8 v8;

  v8 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_2341D63F8(a1 + 16, &v8, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    if (v8 == a2)
      v6 = 0;
    else
      v6 = 157;
    if (v8 == a2)
      v7 = 1099;
    else
      v7 = 1098;
    *(_DWORD *)a3 = v6;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = v7;
  }
  return result;
}

_BYTE *sub_2341D7BC4@<X0>(char *a1@<X2>, _BYTE *result@<X0>, uint64_t a3@<X1>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  _BOOL8 v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  int v11;
  int v12;

  if (a3)
  {
    if (a1)
    {
      v7 = *result == 0;
      if (*result)
        v8 = result;
      else
        v8 = result + 1;
      v9 = a3 - v7;
      v10 = a4 - (a3 - v7);
      if (a4 >= (unint64_t)(a3 - v7))
      {
        if (!v9 || *v8)
        {
          bzero(a1, a4 - (a3 - v7));
          result = memcpy(&a1[v10], v8, v9);
          v12 = 0;
          v11 = 1157;
          goto LABEL_11;
        }
        v11 = 1151;
      }
      else
      {
        v11 = 1147;
      }
    }
    else
    {
      v11 = 1135;
    }
  }
  else
  {
    v11 = 1134;
  }
  v12 = 47;
LABEL_11:
  *(_DWORD *)a5 = v12;
  *(_QWORD *)(a5 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

uint64_t sub_2341D7C88@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _QWORD v9[14];

  v4 = a2[1];
  if (v4 <= 0x48)
  {
    *(_DWORD *)a3 = 25;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    v8 = 1162;
  }
  else
  {
    v6 = result;
    sub_23413824C((uint64_t)v9, *a2, v4);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = (uint64_t)sub_2341D7D3C(v6, v9, a3);
    if (*(_DWORD *)a3)
      return result;
    v7 = sub_234138270(v9);
    result = sub_233BF7588((uint64_t)a2, v7);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    v8 = 1169;
  }
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

_QWORD *sub_2341D7D3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  int v7;
  _BYTE v8[20];
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  int v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v13);
  v7 = v13;
  v16 = v14;
  v17 = v15;
  if (v13)
    goto LABEL_2;
  *(_QWORD *)v8 = &v13;
  *(_QWORD *)&v8[8] = 33;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  sub_2341359FC(&v10, a1);
  v11 = v10;
  v12 = 32;
  result = sub_234133F54(&v11, (uint64_t *)v8, a3);
  if (!*(_DWORD *)a3)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = sub_234138364(a2, 0, 2u, 0, *(const void **)v8, *(unsigned __int16 *)&v8[8], (_QWORD *)a3);
    if (!*(_DWORD *)a3)
    {
      *(_QWORD *)v8 = &v13;
      *(_QWORD *)&v8[8] = 33;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      sub_2341359FC(&v10, a1 + 32);
      v11 = v10;
      v12 = 32;
      result = sub_234133F54(&v11, (uint64_t *)v8, a3);
      if (!*(_DWORD *)a3)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        result = sub_234138364(a2, 0, 2u, 0, *(const void **)v8, *(unsigned __int16 *)&v8[8], (_QWORD *)a3);
        if (!*(_DWORD *)a3)
        {
          result = sub_234138CE4(v8, a2);
          v7 = *(_DWORD *)v8;
          v16 = *(_OWORD *)&v8[4];
          v17 = v9;
LABEL_2:
          *(_DWORD *)a3 = v7;
          *(_OWORD *)(a3 + 4) = v16;
          *(_DWORD *)(a3 + 20) = v17;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_2341D7EEC@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  int v10;
  _QWORD v11[14];
  const void *v12;
  const void *v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (result[13] == 97)
  {
    v5 = result;
    sub_233C01D28(&v13, (uint64_t)result);
    sub_2341359FC(&v12, (uint64_t)v5 + 65);
    sub_23413824C((uint64_t)v11, *a2, a2[1]);
    result = (_QWORD *)sub_234138CD8((uint64_t)v11, 0, 0x10u, (uint64_t)&v8);
    v6 = v8;
    v14 = v9;
    v15 = v10;
    if (v8)
      goto LABEL_9;
    result = sub_23413828C(v11, 1uLL, (uint64_t)&v8);
    v6 = v8;
    v14 = v9;
    v15 = v10;
    if (v8)
      goto LABEL_9;
    result = sub_234138628(v11, v12, 0x20u, &v8);
    v6 = v8;
    v14 = v9;
    v15 = v10;
    if (v8)
      goto LABEL_9;
    result = (_QWORD *)sub_234138CD8((uint64_t)v11, 128, 0, (uint64_t)&v8);
    v6 = v8;
    v14 = v9;
    v15 = v10;
    if (v8)
      goto LABEL_9;
    result = sub_2341370A0(v11, 1025, (uint64_t)&v8);
    v6 = v8;
    v14 = v9;
    v15 = v10;
    if (v8)
      goto LABEL_9;
    result = sub_234138CE4(&v8, v11);
    v6 = v8;
    v14 = v9;
    v15 = v10;
    if (v8 || (result = (_QWORD *)sub_234138CD8((uint64_t)v11, 128, 1u, (uint64_t)&v8), v6 = v8, v14 = v9, v15 = v10, v8))
    {
LABEL_9:
      *(_DWORD *)a3 = v6;
      *(_OWORD *)(a3 + 4) = v14;
      *(_DWORD *)(a3 + 20) = v15;
      return result;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = sub_23413891C(v11, 0, v13, 0x41u, (_QWORD *)a3);
    if (!*(_DWORD *)a3)
    {
      result = sub_234138CE4(&v8, v11);
      v6 = v8;
      v14 = v9;
      v15 = v10;
      if (!v8)
      {
        result = sub_234138CE4(&v8, v11);
        v6 = v8;
        v14 = v9;
        v15 = v10;
        if (!v8)
        {
          v7 = sub_234138270(v11);
          result = (_QWORD *)sub_233BF7588((uint64_t)a2, v7);
          v6 = 0;
        }
      }
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a3 + 16) = 1207;
  }
  return result;
}

uint64_t sub_2341D8164@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;

  v4 = 1248;
  v5 = 47;
  if (a2 && a3)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = result + 16;
    v12 = (unsigned __int16 *)(result + 40);
    while (1)
    {
      v13 = 0;
      v14 = v12;
      do
      {
        v15 = *v14;
        v14 += 16;
        result = v15;
        if (!v15)
          break;
        ++v13;
      }
      while (v13 != 5);
      if (v6 >= v13)
        break;
      v16 = v11 + 32 * v6;
      v17 = *(unsigned __int16 *)(v16 + 24);
      if (v17 == 789)
      {
        v9 = *(_QWORD *)(v16 + 16);
        v8 = 1;
      }
      else if (v17 == 785)
      {
        v10 = *(_QWORD *)(v11 + 32 * v6 + 16);
        v7 = 1;
      }
      ++v6;
    }
    if ((v7 & v8 & 1) != 0)
    {
      v5 = 0;
      *a2 = v10;
      *a3 = v9;
      v4 = 1276;
    }
    else
    {
      v4 = 1271;
      v5 = 216;
    }
  }
  *(_DWORD *)a4 = v5;
  *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a4 + 16) = v4;
  return result;
}

void sub_2341D8228(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, unint64_t *a6@<X5>, _QWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  void *__src;
  _QWORD v13[2];
  _QWORD v14[2];
  uint64_t (**v15)();
  _QWORD v16[10];

  v16[9] = *MEMORY[0x24BDAC8D0];
  v14[0] = a1;
  v14[1] = a2;
  v13[0] = a3;
  v13[1] = a4;
  v15 = &off_250505A50;
  __src = &unk_2342EDFA4;
  a8[1] = 0;
  a8[2] = 0;
  *a8 = 0;
  sub_2341D8344((uint64_t)v14, &__src, a8);
  if (!*(_DWORD *)a8)
  {
    memmove(v16, __src, 0x41uLL);
    a8[1] = 0;
    a8[2] = 0;
    *a8 = 0;
    sub_2341D83F0((uint64_t)v13, a7, a6, a8);
    if (!*(_DWORD *)a8)
    {
      *a8 = 0;
      a8[1] = 0;
      a8[2] = 0;
      sub_2341348A0((uint64_t)&v15, *a6, a5, a8);
      if (!*(_DWORD *)a8)
      {
        *(_DWORD *)a8 = 0;
        a8[1] = "src/credentials/CHIPCert.cpp";
        *((_DWORD *)a8 + 4) = 1288;
      }
    }
  }
}

void sub_2341D8344(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD v6[54];

  v6[53] = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341DB9DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v6, 0, a3);
  if (!*(_DWORD *)a3)
  {
    *a2 = v6[45];
    *(_DWORD *)a3 = 0;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = 1379;
  }
}

void sub_2341D83F0(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD v8[54];

  v8[53] = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v8);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341DB9DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v8, 0, a4);
  if (!*(_DWORD *)a4)
    sub_2341D8164((uint64_t)v8, a2, a3, (uint64_t)a4);
}

void sub_2341D849C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X8>)
{
  unint64_t v8;

  v8 = 0;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  sub_2341D8228(a1, a2, a3, a4, a5, &v8, a6, a7);
  if (!*(_DWORD *)a7)
  {
    *(_DWORD *)a7 = 0;
    a7[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a7 + 4) = 1296;
  }
}

uint64_t sub_2341D84F8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  v3 = 0;
  while (1)
  {
    v4 = 0;
    v5 = (unsigned __int16 *)(result + 40);
    do
    {
      v6 = *v5;
      v5 += 16;
      if (!v6)
        break;
      ++v4;
    }
    while (v4 != 5);
    if (v3 >= v4)
      break;
    v7 = result + 16 + 32 * v3++;
    if (*(_WORD *)(v7 + 24) == 789)
    {
      v8 = 0;
      *a2 = *(_QWORD *)(v7 + 16);
      v9 = 1308;
      goto LABEL_9;
    }
  }
  v9 = 1312;
  v8 = 216;
LABEL_9:
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

void sub_2341D8570(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE *v6;
  char v7;
  __int16 v8;
  _BYTE v9[424];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v9);
  v6 = v9;
  v8 = 1;
  sub_2341D55FC((uint64_t)v9);
  v7 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_2341D5670((uint64_t)&v6, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 0, a3);
  if (!*(_DWORD *)a3)
    sub_2341D8638((uint64_t)v9, a2, a3);
  sub_2341D5450((uint64_t)&v6);
}

uint64_t sub_2341D8638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v16 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v6 = a1 + 16;
  result = sub_2341D63F8(a1 + 16, &v16, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    if (v16 == 3)
    {
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = 0;
        v11 = (unsigned __int16 *)(a1 + 40);
        do
        {
          v12 = *v11;
          v11 += 16;
          if (!v12)
            break;
          ++v10;
        }
        while (v10 != 5);
        if (v8 >= v10)
          break;
        if (*(_WORD *)(v6 + 32 * v8 + 24) == 790)
        {
          if (v9 == 3)
          {
            *(_DWORD *)a3 = 25;
            a3[1] = "src/credentials/CHIPCert.cpp";
            v15 = 1344;
            goto LABEL_21;
          }
          v13 = *(_QWORD *)(v6 + 32 * v8 + 16);
          if (HIDWORD(v13))
          {
            *(_DWORD *)a3 = 47;
            a3[1] = "src/credentials/CHIPCert.cpp";
            v15 = 1345;
            goto LABEL_21;
          }
          v14 = v9++;
          *(_DWORD *)(a2 + 4 * v14) = v13;
        }
        ++v8;
      }
      if (v9 <= 2u)
        bzero((void *)(a2 + 4 * v9), 12 - 4 * v9);
      result = sub_2340061EC(a2);
      if ((result & 1) != 0)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/credentials/CHIPCert.cpp";
        v15 = 1357;
      }
      else
      {
        *(_DWORD *)a3 = 89;
        a3[1] = "src/credentials/CHIPCert.cpp";
        v15 = 1355;
      }
    }
    else
    {
      *(_DWORD *)a3 = 47;
      a3[1] = "src/credentials/CHIPCert.cpp";
      v15 = 1333;
    }
LABEL_21:
    *((_DWORD *)a3 + 4) = v15;
  }
  return result;
}

void sub_2341D87BC(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD v6[54];

  v6[53] = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341DB9DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v6, 0, a3);
  if (!*(_DWORD *)a3)
    sub_2341D84F8((uint64_t)v6, a2, (uint64_t)a3);
}

void sub_2341D8858(uint64_t a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD v6[106];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341DB9DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v6, 0, a3);
  if (!*(_DWORD *)a3)
  {
    *a2 = v6[88];
    *(_DWORD *)a3 = 0;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = 1387;
  }
}

void sub_2341D8904(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  _QWORD v8[46];
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341DB9DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v8, 0, a3);
  if (!*(_DWORD *)a3)
  {
    if ((v9 & 0x10) != 0)
    {
      v7 = 0;
      *a2 = v8[42];
      v6 = 1396;
    }
    else
    {
      v6 = 1394;
      v7 = 216;
    }
    *(_DWORD *)a3 = v7;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = v6;
  }
}

double sub_2341D89C8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341DB9DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v12, 0, a3);
  if (!*(_DWORD *)a3)
  {
    v7 = v20;
    a2[6] = v19;
    a2[7] = v7;
    v8 = v22;
    a2[8] = v21;
    a2[9] = v8;
    v9 = v16;
    a2[2] = v15;
    a2[3] = v9;
    v10 = v18;
    a2[4] = v17;
    a2[5] = v10;
    result = *(double *)&v13;
    v11 = v14;
    *a2 = v13;
    a2[1] = v11;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = 1404;
  }
  return result;
}

uint64_t *sub_2341D8A94@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _QWORD v9[3];
  unsigned __int8 v10;
  char v11;

  v4 = result[1];
  if (HIDWORD(v4))
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a3 + 16) = 1412;
    return result;
  }
  sub_2341370F4((uint64_t)&v10, *result, v4);
  result = (uint64_t *)sub_23413712C((uint64_t)&v10, (uint64_t)v9);
  v7 = v9[0];
  if (!LODWORD(v9[0]))
  {
    if (v10 || v11 != 16)
    {
      LODWORD(v6) = 1417;
      LODWORD(v7) = 773;
      v8 = "src/credentials/CHIPCert.cpp";
      goto LABEL_31;
    }
    result = (uint64_t *)sub_234137338((uint64_t)&v10, (uint64_t)v9);
    v7 = v9[0];
    if (!LODWORD(v9[0]))
    {
      result = (uint64_t *)sub_23413712C((uint64_t)&v10, (uint64_t)v9);
      v7 = v9[0];
      if (!LODWORD(v9[0]))
      {
        LODWORD(v6) = 1421;
        LODWORD(v7) = 773;
        v8 = "src/credentials/CHIPCert.cpp";
        if (v10 || v11 != 16)
          goto LABEL_31;
        result = (uint64_t *)sub_234137338((uint64_t)&v10, (uint64_t)v9);
        v7 = v9[0];
        if (!LODWORD(v9[0]))
        {
          result = (uint64_t *)sub_23413712C((uint64_t)&v10, (uint64_t)v9);
          v7 = v9[0];
          if (!LODWORD(v9[0]))
          {
            LODWORD(v6) = 1424;
            LODWORD(v7) = 773;
            v8 = "src/credentials/CHIPCert.cpp";
            if (v10 != 128 || v11)
              goto LABEL_31;
            result = (uint64_t *)sub_23413712C((uint64_t)&v10, (uint64_t)v9);
            v7 = v9[0];
            if (!LODWORD(v9[0]))
            {
              LODWORD(v6) = 1427;
              LODWORD(v7) = 773;
              v8 = "src/credentials/CHIPCert.cpp";
              if (v10 || v11 != 2)
                goto LABEL_31;
              result = (uint64_t *)sub_23413712C((uint64_t)&v10, (uint64_t)v9);
              v7 = v9[0];
              if (!LODWORD(v9[0]))
              {
                LODWORD(v6) = 1430;
                LODWORD(v7) = 773;
                v8 = "src/credentials/CHIPCert.cpp";
                if (v10 || v11 != 16)
                  goto LABEL_31;
                result = (uint64_t *)sub_23413712C((uint64_t)&v10, (uint64_t)v9);
                v7 = v9[0];
                if (!LODWORD(v9[0]))
                {
                  LODWORD(v6) = 1433;
                  LODWORD(v7) = 773;
                  v8 = "src/credentials/CHIPCert.cpp";
                  if (v10 || v11 != 16)
                    goto LABEL_31;
                  result = (uint64_t *)sub_23413712C((uint64_t)&v10, (uint64_t)v9);
                  v7 = v9[0];
                  if (!LODWORD(v9[0]))
                  {
                    LODWORD(v6) = 1436;
                    LODWORD(v7) = 773;
                    v8 = "src/credentials/CHIPCert.cpp";
                    if (v10 || v11 != 16)
                      goto LABEL_31;
                    *(_QWORD *)a3 = 0;
                    *(_QWORD *)(a3 + 8) = 0;
                    *(_QWORD *)(a3 + 16) = 0;
                    result = sub_2341D7334(a2, (uint64_t)&v10, a3);
                    if (*(_DWORD *)a3)
                      return result;
                    result = sub_234137434(v9, &v10);
                    v7 = v9[0];
                    if (!LODWORD(v9[0]))
                    {
                      result = sub_234137434(v9, &v10);
                      v7 = v9[0];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v8 = (const char *)v9[1];
  v6 = v9[2];
LABEL_31:
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_2341D8D6C(uint64_t result)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  for (i = 0; i != 160; i += 32)
  {
    v2 = result + i;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 23) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  v3 = 0;
  v4 = result + 24;
  while (*(_WORD *)v4)
  {
    ++v3;
    v4 += 32;
    if (v3 == 5)
      goto LABEL_6;
  }
  if (v3 >= 5u)
LABEL_6:
    sub_23425E2E8(result);
  *(_WORD *)v4 = 769;
  *(_QWORD *)(v4 - 24) = "*";
  *(_QWORD *)(v4 - 16) = 1;
  *(_BYTE *)(v4 + 2) = 0;
  return result;
}

void sub_2341D8DE8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD v4[54];

  v4[53] = *MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_2341DB9DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v4, 1, a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_2341D8EA4((uint64_t)v4, a2);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/credentials/CHIPCert.cpp";
      *((_DWORD *)a2 + 4) = 1518;
    }
  }
}

uint64_t sub_2341D8EA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  __int16 v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_2341D7B50(a1, 5, a2);
  if (!*(_DWORD *)a2)
  {
    result = sub_2341D68A8(a1, (uint64_t)&xmmword_250514F08);
    if (!(_DWORD)result)
    {
      v5 = 1494;
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 352) != 1)
    {
      v5 = 1495;
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 356))
    {
      v5 = 1496;
LABEL_8:
      v6 = 157;
LABEL_9:
      *(_DWORD *)a2 = v6;
      a2[1] = "src/credentials/CHIPCert.cpp";
      *((_DWORD *)a2 + 4) = v5;
      return result;
    }
    result = sub_2341D6674(a1 + 176, a1 + 16);
    if (!(_DWORD)result)
    {
      v5 = 1497;
      goto LABEL_8;
    }
    v7 = *(_WORD *)(a1 + 374);
    if ((v7 & 0x81) != 1)
    {
      v5 = 1501;
      goto LABEL_8;
    }
    v5 = 1504;
    v6 = 157;
    if ((v7 & 2) == 0)
      goto LABEL_9;
    if (*(_WORD *)(a1 + 376) != 1)
      goto LABEL_9;
    v5 = 1507;
    if ((v7 & 4) == 0 || *(_BYTE *)(a1 + 378) != 3)
      goto LABEL_9;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    result = sub_2341D62C0(a1, a1, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      v6 = 0;
      v5 = 1510;
      goto LABEL_9;
    }
  }
  return result;
}

void sub_2341D8FBC(uint64_t a1@<X0>, __n128 *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[360];
  char *v7[9];

  v7[8] = *(char **)MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341DB9DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v6, 1, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_2341D8EA4((uint64_t)v6, a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_2341D90A0(v7, a2, a3);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/credentials/CHIPCert.cpp";
        *((_DWORD *)a3 + 4) = 1527;
      }
    }
  }
}

__n128 sub_2341D90A0@<Q0>(char **a1@<X0>, __n128 *a2@<X1>, _QWORD *a3@<X8>)
{
  __n128 result;
  __n128 v6;
  unsigned __int32 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341393FC(*a1, 0x41uLL, &v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    result = v6;
    a2[1].n128_u32[0] = v7;
    *a2 = result;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/credentials/CHIPCert.cpp";
    *((_DWORD *)a3 + 4) = 1487;
  }
  return result;
}

void sub_2341D9140(uint64_t a1@<X0>, __n128 *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[360];
  char *v7[9];

  v7[8] = *(char **)MEMORY[0x24BDAC8D0];
  sub_2341D6730((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341DB9DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v6, 0, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_2341D7B50((uint64_t)v6, 5, a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_2341D90A0(v7, a2, a3);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/credentials/CHIPCert.cpp";
        *((_DWORD *)a3 + 4) = 1536;
      }
    }
  }
}

uint64_t sub_2341D9228@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  _QWORD v16[5];
  unsigned int v17;
  int v18;
  char v19[64];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    v14 = 1568;
LABEL_15:
    *(_DWORD *)(a3 + 16) = v14;
    return result;
  }
  if (HIDWORD(v4))
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    v14 = 1569;
    goto LABEL_15;
  }
  v6 = result;
  v20 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v7 = sub_234114774(0xF4uLL);
  if (v7)
  {
    v8 = v7;
    sub_23413824C((uint64_t)v16, (uint64_t)v7, 244);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    sub_2341E8348(v9, (unsigned __int8 *)v16, a3);
    if (!*(_DWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v10 = sub_234138270(v16);
      (*(void (**)(uint64_t, void *, uint64_t, char *))(*(_QWORD *)v6 + 24))(v6, v8, v10, v19);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
        *(_DWORD *)(a3 + 16) = 1552;
      }
    }
    j__free(v8);
    if (*(_DWORD *)a3)
      return sub_23413A7A4(v19, 64);
    sub_234106C48((uint64_t)v16);
    v11 = sub_234106C70((uint64_t)v16, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    v12 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v6 + 40))(v6, v11);
    sub_233C01D28(&v15, v12 + 8);
    v18 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    sub_234107E40((char *)v16, 0x100uLL, 21, &v18, a3);
    if (*(_DWORD *)a3)
      return sub_23413A7A4(v19, 64);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_2341073FC((char *)v16, 9uLL, v15, 0x41uLL, a3);
    if (*(_DWORD *)a3)
      return sub_23413A7A4(v19, 64);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_2341073FC((char *)v16, 0xBuLL, v19, 0x40uLL, a3);
    if (*(_DWORD *)a3)
      return sub_23413A7A4(v19, 64);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_234107FB0((char *)v16, v18, a3);
    if (*(_DWORD *)a3)
      return sub_23413A7A4(v19, 64);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    *(_DWORD *)(a3 + 16) = 1563;
    sub_233BF7588(a2, v17);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    v13 = 1582;
  }
  else
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCert.cpp";
    v13 = 1543;
  }
  *(_DWORD *)(a3 + 16) = v13;
  return sub_23413A7A4(v19, 64);
}

_BYTE *sub_2341D950C@<X0>(_BYTE *result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v7;
  const char *v10;
  double v11;
  int v12;
  const char *v13;
  double v14;
  int v15;
  _BYTE *v16[2];
  double v17;
  const char *v18;
  double v19;
  _BYTE *v20[2];
  _QWORD v21[4];
  char v22[32];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*result || (v7 = (uint64_t)result, result[1] != 3))
  {
    LODWORD(a6) = 402;
    LODWORD(a5) = 773;
LABEL_7:
    v10 = "src/credentials/CHIPCertFromX509.cpp";
    goto LABEL_8;
  }
  result = sub_2341374FC(result, (uint64_t)v21);
  a5 = *(double *)v21;
  if (LODWORD(v21[0]))
    goto LABEL_5;
  result = (_BYTE *)sub_23413712C(v7, (uint64_t)v21);
  a5 = *(double *)v21;
  if (LODWORD(v21[0]))
    goto LABEL_5;
  LODWORD(a6) = 405;
  LODWORD(a5) = 773;
  v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (*(_BYTE *)v7 || *(_BYTE *)(v7 + 1) != 16)
    goto LABEL_8;
  result = (_BYTE *)sub_234137338(v7, (uint64_t)v21);
  a5 = *(double *)v21;
  if (LODWORD(v21[0]) || (result = (_BYTE *)sub_23413712C(v7, (uint64_t)v21), a5 = *(double *)v21, LODWORD(v21[0])))
  {
LABEL_5:
    v10 = (const char *)v21[1];
    a6 = *(double *)&v21[2];
LABEL_8:
    *(double *)a4 = a5;
    *(_QWORD *)(a4 + 8) = v10;
    *(double *)(a4 + 16) = a6;
    return result;
  }
  LODWORD(a6) = 408;
  LODWORD(a5) = 773;
  v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (*(_BYTE *)v7 || *(_BYTE *)(v7 + 1) != 2)
    goto LABEL_8;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_233BF7114(v20, *(_QWORD *)(v7 + 8), *(unsigned int *)(v7 + 16));
  result = sub_2341D7BC4((char *)v21, v20[0], (uint64_t)v20[1], 0x20u, a4);
  if (!*(_DWORD *)a4)
  {
    result = (_BYTE *)sub_23413712C(v7, (uint64_t)&v17);
    a5 = v17;
    if (LODWORD(v17))
    {
LABEL_18:
      v10 = v18;
      a6 = v19;
      goto LABEL_8;
    }
    LODWORD(a6) = 413;
    LODWORD(a5) = 773;
    v10 = "src/credentials/CHIPCertFromX509.cpp";
    if (*(_BYTE *)v7 || *(_BYTE *)(v7 + 1) != 2)
      goto LABEL_8;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_233BF7114(v16, *(_QWORD *)(v7 + 8), *(unsigned int *)(v7 + 16));
    result = sub_2341D7BC4(v22, v16[0], (uint64_t)v16[1], 0x20u, a4);
    if (!*(_DWORD *)a4)
    {
      result = (_BYTE *)sub_23413712C(v7, (uint64_t)&v17);
      v11 = v19;
      a5 = v17;
      if (LODWORD(v17))
      {
        if (LODWORD(v17) != 768)
          goto LABEL_32;
        result = sub_234137434(&v17, v7);
        if (LODWORD(v17))
        {
          a5 = v17;
          goto LABEL_18;
        }
        result = (_BYTE *)sub_23413712C(v7, (uint64_t)&v17);
        v11 = v19;
        a5 = v17;
        if (LODWORD(v17))
        {
          if (LODWORD(v17) == 768)
          {
            result = sub_234137434(&v17, v7);
            a5 = v17;
            v13 = v18;
            a6 = v19;
            v14 = v19;
            v15 = HIDWORD(v17);
            if (LODWORD(v17))
            {
              v10 = v18;
              goto LABEL_8;
            }
            *(_QWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = 0;
            result = sub_234107438(a2, a3, (char *)v21, 0x40u, a4);
            if (!*(_DWORD *)a4)
            {
              a6 = v14;
              HIDWORD(a5) = v15;
              LODWORD(a5) = 0;
              v10 = v13;
              goto LABEL_8;
            }
            return result;
          }
LABEL_32:
          v10 = v18;
          a6 = v11;
          goto LABEL_8;
        }
        LODWORD(a5) = 773;
        v12 = 419;
      }
      else
      {
        LODWORD(a5) = 773;
        v12 = 417;
      }
      a6 = COERCE_DOUBLE(__PAIR64__(HIDWORD(v11), v12));
      goto LABEL_7;
    }
  }
  return result;
}

__n64 sub_2341D9834@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n64 result;
  double v9;
  const char *v10;
  int v11;
  unsigned __int32 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  int v17;
  int v18;
  unsigned int v19;
  char v20[44];
  unsigned int v21;
  _QWORD v22[2];
  unsigned int v23;
  __int16 v24;
  unint64_t v25;
  const char *v26;
  double v27;
  int v28;
  __int16 v29;
  uint64_t v30;

  result.n64_f64[0] = sub_234106C48((uint64_t)v20);
  if (!a2)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertFromX509.cpp";
    v11 = 559;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v11;
    return result;
  }
  if (HIDWORD(a2))
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertFromX509.cpp";
    v11 = 560;
    goto LABEL_9;
  }
  sub_2341370F4((uint64_t)v22, a1, a2);
  sub_234106C70((uint64_t)v20, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  sub_234107E40(v20, 0x100uLL, 21, &v28, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  v12 = 773;
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 16)
  {
    LODWORD(v9) = 438;
LABEL_77:
    result.n64_u32[0] = v12;
LABEL_78:
    v10 = "src/credentials/CHIPCertFromX509.cpp";
    goto LABEL_6;
  }
  sub_234137338((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  LODWORD(v9) = 442;
  result.n64_u32[0] = 773;
  v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 16)
    goto LABEL_6;
  sub_234137338((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  LODWORD(v9) = 445;
  result.n64_u32[0] = 773;
  v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) != 128 || BYTE1(v22[0]))
    goto LABEL_6;
  sub_234137338((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  LODWORD(v9) = 448;
  result.n64_u32[0] = 773;
  v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 2)
    goto LABEL_6;
  sub_234137574(v22, &v30, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  if (v30 != 2)
  {
    v18 = 451;
    goto LABEL_80;
  }
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  v14 = v25;
  v13 = HIDWORD(v25);
  v15 = HIDWORD(v27);
  if (!(_DWORD)v25)
  {
    result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
    result.n64_u32[1] = HIDWORD(v25);
    LODWORD(v9) = vdup_n_s32(0x1C5u).u32[0];
    HIDWORD(v9) = HIDWORD(v27);
    v10 = "src/credentials/CHIPCertFromX509.cpp";
    goto LABEL_6;
  }
  if ((_DWORD)v25 != 768)
    goto LABEL_95;
  sub_234137434(&v25, v22);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  LODWORD(v9) = 457;
  result.n64_u32[0] = 773;
  v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 2)
    goto LABEL_6;
  sub_234107438(v20, 1uLL, (char *)v22[1], v23, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  LODWORD(v9) = 463;
  result.n64_u32[0] = 773;
  v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 16)
    goto LABEL_6;
  sub_234137338((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  LODWORD(v9) = 466;
  result.n64_u32[0] = 773;
  v10 = "src/credentials/CHIPCertFromX509.cpp";
  if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 6)
    goto LABEL_6;
  sub_234136FF8((uint64_t)v22, &v29, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  if (v29 != 513)
  {
    v18 = 468;
    goto LABEL_80;
  }
  sub_2341071D8(v20, 2uLL, 1u, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  v14 = v25;
  v13 = HIDWORD(v25);
  v15 = HIDWORD(v27);
  if (!(_DWORD)v25)
  {
    result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
    result.n64_u32[1] = HIDWORD(v25);
    v19 = 473;
    goto LABEL_84;
  }
  if ((_DWORD)v25 != 768)
    goto LABEL_95;
  sub_234137434(&v25, v22);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_2341DA0CC((uint64_t)v22, v20, 3uLL, &v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_2341DA148(v22, v20, &v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_2341DA0CC((uint64_t)v22, v20, 6uLL, &v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_2341DA3E8((uint64_t)v22, v20, (uint64_t)&v25);
  result.n64_u64[0] = v25;
  if ((_DWORD)v25)
    goto LABEL_5;
  sub_23413712C((uint64_t)v22, (uint64_t)&v25);
  v14 = v25;
  if ((_DWORD)v25)
  {
LABEL_52:
    v13 = HIDWORD(v25);
    v16 = v26;
    v17 = LODWORD(v27);
    v15 = HIDWORD(v27);
    if (v14 != 768)
      goto LABEL_96;
    sub_23413712C((uint64_t)v22, (uint64_t)&v25);
    v14 = v25;
    v13 = HIDWORD(v25);
    v15 = HIDWORD(v27);
    if ((_DWORD)v25)
    {
      if ((_DWORD)v25 != 768)
        goto LABEL_95;
      sub_234137434(&v25, v22);
      result.n64_u64[0] = v25;
      if ((_DWORD)v25)
        goto LABEL_5;
      sub_23413712C((uint64_t)v22, (uint64_t)&v25);
      result.n64_u64[0] = v25;
      if ((_DWORD)v25)
        goto LABEL_5;
      LODWORD(v9) = 528;
      result.n64_u32[0] = 773;
      v10 = "src/credentials/CHIPCertFromX509.cpp";
      if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 16)
        goto LABEL_6;
      sub_234137338((uint64_t)v22, (uint64_t)&v25);
      result.n64_u64[0] = v25;
      if ((_DWORD)v25)
        goto LABEL_5;
      v24 = 0;
      sub_23413712C((uint64_t)v22, (uint64_t)&v25);
      result.n64_u64[0] = v25;
      if ((_DWORD)v25)
        goto LABEL_5;
      LODWORD(v9) = 533;
      result.n64_u32[0] = 773;
      v10 = "src/credentials/CHIPCertFromX509.cpp";
      if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 6)
        goto LABEL_6;
      sub_234136FF8((uint64_t)v22, &v24, (uint64_t)&v25);
      result.n64_u64[0] = v25;
      if ((_DWORD)v25)
        goto LABEL_5;
      if (v24 == v29)
      {
        sub_23413712C((uint64_t)v22, (uint64_t)&v25);
        v14 = v25;
        v13 = HIDWORD(v25);
        v15 = HIDWORD(v27);
        if ((_DWORD)v25)
        {
          if ((_DWORD)v25 != 768)
            goto LABEL_95;
          sub_234137434(&v25, v22);
          result.n64_u64[0] = v25;
          if ((_DWORD)v25)
            goto LABEL_5;
          sub_23413712C((uint64_t)v22, (uint64_t)&v25);
          result.n64_u64[0] = v25;
          if ((_DWORD)v25)
            goto LABEL_5;
          LODWORD(v9) = 541;
          result.n64_u32[0] = 773;
          v10 = "src/credentials/CHIPCertFromX509.cpp";
          if (LOBYTE(v22[0]) || BYTE1(v22[0]) != 3)
            goto LABEL_6;
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          sub_2341D950C(v22, v20, 0xBuLL, a4, result.n64_f64[0], v9);
          if (*(_DWORD *)a4)
            return result;
          sub_23413712C((uint64_t)v22, (uint64_t)&v25);
          v14 = v25;
          v13 = HIDWORD(v25);
          v15 = HIDWORD(v27);
          if ((_DWORD)v25)
          {
            if ((_DWORD)v25 == 768)
            {
              sub_234137434(&v25, v22);
              result.n64_u64[0] = v25;
              if (!(_DWORD)v25)
              {
                sub_234107FB0(v20, v28, (uint64_t)&v25);
                v14 = v25;
                v13 = HIDWORD(v25);
                v16 = v26;
                v17 = LODWORD(v27);
                v15 = HIDWORD(v27);
                goto LABEL_96;
              }
LABEL_5:
              v10 = v26;
              v9 = v27;
LABEL_6:
              *(double *)a4 = result.n64_f64[0];
              *(_QWORD *)(a4 + 8) = v10;
              *(double *)(a4 + 16) = v9;
              return result;
            }
LABEL_95:
            v16 = v26;
            v17 = LODWORD(v27);
LABEL_96:
            *(_DWORD *)a4 = v14;
            *(_DWORD *)(a4 + 4) = v13;
            *(_QWORD *)(a4 + 8) = v16;
            *(_DWORD *)(a4 + 16) = v17;
            *(_DWORD *)(a4 + 20) = v15;
            if (v14)
              return result;
            goto LABEL_97;
          }
          result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
          result.n64_u32[1] = HIDWORD(v25);
          v19 = 545;
        }
        else
        {
          result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
          result.n64_u32[1] = HIDWORD(v25);
          v19 = 538;
        }
        goto LABEL_84;
      }
      v18 = 536;
      goto LABEL_80;
    }
    result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
    result.n64_u32[1] = HIDWORD(v25);
    v19 = 524;
LABEL_84:
    LODWORD(v9) = vdup_n_s32(v19).u32[0];
    HIDWORD(v9) = v15;
    goto LABEL_78;
  }
  if (LOBYTE(v22[0]) == 128)
  {
    switch(BYTE1(v22[0]))
    {
      case 1u:
        v18 = 496;
        break;
      case 2u:
        v18 = 503;
        break;
      case 3u:
        sub_234137338((uint64_t)v22, (uint64_t)&v25);
        result.n64_u64[0] = v25;
        if ((_DWORD)v25)
          goto LABEL_5;
        sub_2341DA8A4((unsigned __int8 *)v22, v20, (uint64_t)&v25);
        result.n64_u64[0] = v25;
        if ((_DWORD)v25)
          goto LABEL_5;
        sub_23413712C((uint64_t)v22, (uint64_t)&v25);
        v14 = v25;
        v13 = HIDWORD(v25);
        v15 = HIDWORD(v27);
        if (!(_DWORD)v25)
        {
          result.n64_u32[0] = vdup_n_s32(0x305u).u32[0];
          result.n64_u32[1] = HIDWORD(v25);
          v19 = 514;
          goto LABEL_84;
        }
        if ((_DWORD)v25 != 768)
          goto LABEL_95;
        sub_234137434(&v25, v22);
        result.n64_u64[0] = v25;
        if ((_DWORD)v25)
          goto LABEL_5;
        sub_23413712C((uint64_t)v22, (uint64_t)&v25);
        v14 = v25;
        goto LABEL_52;
      default:
        goto LABEL_97;
    }
LABEL_80:
    LODWORD(v9) = v18;
    v12 = 774;
    goto LABEL_77;
  }
LABEL_97:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result.n64_f64[0] = sub_234106D88((uint64_t)v20, a4);
  if (!*(_DWORD *)a4)
  {
    sub_233BF7588(a3, v21);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertFromX509.cpp";
    v11 = 572;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_2341DA0CC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _BYTE v10[160];

  sub_2341D67D0((uint64_t)v10);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341D7334((uint64_t)v10, a1, (uint64_t)a4);
  if (!*(_DWORD *)a4)
    sub_2341D6C48((uint64_t)v10, a2, a3, a4);
  return nullsub_13(v10, v8);
}

_QWORD *sub_2341DA148@<X0>(_BYTE *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17[8];

  v16 = 0;
  result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v13);
  v7 = v13;
  if ((_DWORD)v13)
    goto LABEL_2;
  v9 = 0x3F0000003FLL;
  if (*a1 || a1[1] != 16)
    goto LABEL_8;
  result = (_QWORD *)sub_234137338((uint64_t)a1, (uint64_t)&v13);
  v7 = v13;
  if ((_DWORD)v13)
    goto LABEL_2;
  result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v13);
  v7 = v13;
  if ((_DWORD)v13)
    goto LABEL_2;
  v9 = 0x4100000041;
  if (*a1)
  {
LABEL_8:
    LODWORD(v7) = 773;
    goto LABEL_9;
  }
  v10 = a1[1];
  if (v10 == 24)
  {
    result = (_QWORD *)sub_234137828((uint64_t)a1, (uint64_t)v17, (uint64_t)&v13);
  }
  else
  {
    if (v10 != 23)
      goto LABEL_8;
    result = (_QWORD *)sub_234137738((uint64_t)a1, (uint64_t)v17, (uint64_t)&v13);
  }
  v7 = v13;
  v8 = v14;
  v9 = v15;
  if ((_DWORD)v13)
    goto LABEL_10;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = (_QWORD *)sub_2341D7874(v17, (_DWORD *)&v16 + 1, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v13);
    v7 = v13;
    if (!(_DWORD)v13)
    {
      v9 = 0x4400000044;
      if (*a1)
        goto LABEL_8;
      v11 = a1[1];
      if (v11 == 24)
      {
        result = (_QWORD *)sub_234137828((uint64_t)a1, (uint64_t)v17, (uint64_t)&v13);
      }
      else
      {
        if (v11 != 23)
        {
          LODWORD(v7) = 773;
          v8 = "src/credentials/CHIPCertFromX509.cpp";
          goto LABEL_10;
        }
        result = (_QWORD *)sub_234137738((uint64_t)a1, (uint64_t)v17, (uint64_t)&v13);
      }
      v7 = v13;
      v8 = v14;
      v9 = v15;
      if ((_DWORD)v13)
      {
LABEL_10:
        *a3 = v7;
        a3[1] = v8;
        a3[2] = v9;
        return result;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = (_QWORD *)sub_2341D7874(v17, &v16, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        v12 = HIDWORD(v16);
        if ((v16 - 1) < HIDWORD(v16))
        {
          *(_DWORD *)a3 = 773;
          a3[1] = "src/credentials/CHIPCertFromX509.cpp";
          *((_DWORD *)a3 + 4) = 74;
          return result;
        }
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        result = sub_23410726C(a2, 4uLL, v12, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          result = sub_23410726C(a2, 5uLL, v16, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v13);
            v7 = v13;
            v9 = v15;
            if ((_DWORD)v13)
            {
              if ((_DWORD)v13 != 768)
              {
                v8 = v14;
                goto LABEL_10;
              }
              result = sub_234137434(&v13, a1);
              v7 = v13;
              goto LABEL_2;
            }
            LODWORD(v7) = 773;
            LODWORD(v9) = 80;
LABEL_9:
            v8 = "src/credentials/CHIPCertFromX509.cpp";
            goto LABEL_10;
          }
        }
      }
      return result;
    }
LABEL_2:
    v8 = v14;
    v9 = v15;
    goto LABEL_10;
  }
  return result;
}

double sub_2341DA3E8@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  int v7;
  int v8;
  int v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v13 = 0;
  sub_23413712C(a1, (uint64_t)&v11);
  result = *(double *)&v11;
  *(_OWORD *)a3 = v11;
  *(_QWORD *)(a3 + 16) = v12;
  if (!*(_DWORD *)a3)
  {
    if (*(_BYTE *)a1 || *(_BYTE *)(a1 + 1) != 16)
    {
      *(_DWORD *)a3 = 773;
      *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
      v7 = 92;
      goto LABEL_19;
    }
    sub_234137338(a1, (uint64_t)&v11);
    result = *(double *)&v11;
    *(_OWORD *)a3 = v11;
    *(_QWORD *)(a3 + 16) = v12;
    if (!*(_DWORD *)a3)
    {
      sub_23413712C(a1, (uint64_t)&v11);
      result = *(double *)&v11;
      *(_OWORD *)a3 = v11;
      *(_QWORD *)(a3 + 16) = v12;
      if (!*(_DWORD *)a3)
      {
        if (*(_BYTE *)a1 || *(_BYTE *)(a1 + 1) != 16)
        {
          *(_DWORD *)a3 = 773;
          *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
          v7 = 96;
          goto LABEL_19;
        }
        sub_234137338(a1, (uint64_t)&v11);
        result = *(double *)&v11;
        *(_OWORD *)a3 = v11;
        *(_QWORD *)(a3 + 16) = v12;
        if (!*(_DWORD *)a3)
        {
          sub_23413712C(a1, (uint64_t)&v11);
          result = *(double *)&v11;
          *(_OWORD *)a3 = v11;
          *(_QWORD *)(a3 + 16) = v12;
          if (!*(_DWORD *)a3)
          {
            if (*(_BYTE *)a1 || *(_BYTE *)(a1 + 1) != 6)
            {
              *(_DWORD *)a3 = 773;
              *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
              v7 = 99;
              goto LABEL_19;
            }
            sub_234136FF8(a1, (_WORD *)&v13 + 1, (uint64_t)&v11);
            result = *(double *)&v11;
            *(_OWORD *)a3 = v11;
            *(_QWORD *)(a3 + 16) = v12;
            if (*(_DWORD *)a3)
              return result;
            if (HIWORD(v13) != 257)
            {
              *(_DWORD *)a3 = 774;
              *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
              v7 = 102;
              goto LABEL_19;
            }
            sub_2341071D8(a2, 7uLL, 1u, (uint64_t)&v11);
            result = *(double *)&v11;
            *(_OWORD *)a3 = v11;
            *(_QWORD *)(a3 + 16) = v12;
            if (!*(_DWORD *)a3)
            {
              sub_23413712C(a1, (uint64_t)&v11);
              result = *(double *)&v11;
              *(_OWORD *)a3 = v11;
              *(_QWORD *)(a3 + 16) = v12;
              if (!*(_DWORD *)a3)
              {
                if (*(_BYTE *)a1)
                {
LABEL_17:
                  *(_DWORD *)a3 = 773;
                  *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                  v7 = 123;
LABEL_19:
                  *(_DWORD *)(a3 + 16) = v7;
                  return result;
                }
                v8 = *(unsigned __int8 *)(a1 + 1);
                if (v8 == 5)
                {
                  *(_DWORD *)a3 = 774;
                  *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                  v7 = 120;
                  goto LABEL_19;
                }
                if (v8 != 6)
                {
                  if (v8 == 16)
                  {
                    *(_DWORD *)a3 = 774;
                    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                    v7 = 116;
                    goto LABEL_19;
                  }
                  goto LABEL_17;
                }
                sub_234136FF8(a1, &v13, (uint64_t)&v11);
                result = *(double *)&v11;
                *(_OWORD *)a3 = v11;
                *(_QWORD *)(a3 + 16) = v12;
                if (!*(_DWORD *)a3)
                {
                  if (sub_234136F70((unsigned __int16)v13) != 1024)
                  {
                    *(_DWORD *)a3 = 774;
                    *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                    v7 = 128;
                    goto LABEL_19;
                  }
                  sub_2341071D8(a2, 8uLL, v13, (uint64_t)&v11);
                  result = *(double *)&v11;
                  *(_OWORD *)a3 = v11;
                  *(_QWORD *)(a3 + 16) = v12;
                  if (!*(_DWORD *)a3)
                  {
                    sub_23413712C(a1, (uint64_t)&v11);
                    result = *(double *)&v11;
                    *(_OWORD *)a3 = v11;
                    *(_QWORD *)(a3 + 16) = v12;
                    if (*(_DWORD *)a3 == 768)
                    {
                      *(_DWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                      *(_DWORD *)(a3 + 16) = 133;
                      sub_234137434(&v11, a1);
                      result = *(double *)&v11;
                      *(_OWORD *)a3 = v11;
                      *(_QWORD *)(a3 + 16) = v12;
                      if (!*(_DWORD *)a3)
                      {
                        sub_23413712C(a1, (uint64_t)&v11);
                        result = *(double *)&v11;
                        *(_OWORD *)a3 = v11;
                        *(_QWORD *)(a3 + 16) = v12;
                        if (!*(_DWORD *)a3)
                        {
                          if (*(_BYTE *)a1 || *(_BYTE *)(a1 + 1) != 3)
                          {
                            *(_DWORD *)a3 = 773;
                            *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                            v7 = 136;
                            goto LABEL_19;
                          }
                          v9 = *(_DWORD *)(a1 + 16);
                          if (!v9)
                          {
                            *(_DWORD *)a3 = 773;
                            *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                            v7 = 139;
                            goto LABEL_19;
                          }
                          v10 = *(_BYTE **)(a1 + 8);
                          if (*v10)
                          {
                            *(_DWORD *)a3 = 773;
                            *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                            v7 = 142;
                            goto LABEL_19;
                          }
                          sub_234107438(a2, 9uLL, v10 + 1, v9 - 1, (uint64_t)&v11);
                          result = *(double *)&v11;
                          *(_OWORD *)a3 = v11;
                          *(_QWORD *)(a3 + 16) = v12;
                          if (!*(_DWORD *)a3)
                          {
                            sub_23413712C(a1, (uint64_t)&v11);
                            result = *(double *)&v11;
                            *(_OWORD *)a3 = v11;
                            *(_QWORD *)(a3 + 16) = v12;
                            if (*(_DWORD *)a3 == 768)
                            {
                              *(_DWORD *)a3 = 0;
                              *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                              *(_DWORD *)(a3 + 16) = 149;
                              sub_234137434(&v11, a1);
                              result = *(double *)&v11;
                              *(_OWORD *)a3 = v11;
                              *(_QWORD *)(a3 + 16) = v12;
                              return result;
                            }
                            if (!*(_DWORD *)a3)
                            {
                              *(_DWORD *)a3 = 773;
                              *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                              v7 = 149;
                              goto LABEL_19;
                            }
                          }
                        }
                      }
                    }
                    else if (!*(_DWORD *)a3)
                    {
                      *(_DWORD *)a3 = 773;
                      *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
                      v7 = 133;
                      goto LABEL_19;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2341DA8A4@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  const char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  BOOL v26;
  unsigned __int16 v27;
  int v28;

  v19 = 0;
  result = (uint64_t)sub_234107E40(a2, 0xAuLL, 23, &v19, a3);
  if (!*(_DWORD *)a3)
  {
    result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
    *(_OWORD *)a3 = v22;
    *(_QWORD *)(a3 + 16) = v23;
    if (!*(_DWORD *)a3)
    {
      if (*a1 || a1[1] != 16)
      {
        *(_DWORD *)a3 = 773;
        *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
        v18 = 374;
      }
      else
      {
        result = sub_234137338((uint64_t)a1, (uint64_t)&v22);
        *(_OWORD *)a3 = v22;
        *(_QWORD *)(a3 + 16) = v23;
        if (*(_DWORD *)a3)
          return result;
        v7 = "src/credentials/CHIPCertFromX509.cpp";
        while (1)
        {
          result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
          *(_OWORD *)a3 = v22;
          *(_QWORD *)(a3 + 16) = v23;
          if (*(_DWORD *)a3)
            break;
          v28 = 0;
          v27 = 0;
          v26 = 0;
          v25 = 0;
          v24 = 0;
          result = sub_2341374B0((uint64_t)a1, &v25, &v24, (uint64_t)&v22);
          v8 = v22;
          v9 = DWORD1(v22);
          v10 = HIDWORD(v23);
          if ((_DWORD)v22)
            goto LABEL_119;
          v11 = 168;
          v8 = 773;
          if (*a1 || a1[1] != 16)
            goto LABEL_148;
          result = sub_234137338((uint64_t)a1, (uint64_t)&v22);
          v8 = v22;
          if ((_DWORD)v22)
            goto LABEL_120;
          result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
          v8 = v22;
          v9 = DWORD1(v22);
          v10 = HIDWORD(v23);
          if ((_DWORD)v22)
            goto LABEL_119;
          v11 = 171;
          v8 = 773;
          if (*a1 || a1[1] != 6)
            goto LABEL_148;
          result = (uint64_t)sub_234136FF8((uint64_t)a1, &v27, (uint64_t)&v22);
          v8 = v22;
          v9 = DWORD1(v22);
          v10 = HIDWORD(v23);
          if ((_DWORD)v22)
            goto LABEL_119;
          if (v27 != 0xFFFF)
          {
            result = sub_234136F70(v27);
            if ((_DWORD)result != 1280)
            {
              v11 = 176;
              goto LABEL_147;
            }
          }
          result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
          v8 = v22;
          v9 = DWORD1(v22);
          v10 = HIDWORD(v23);
          if ((_DWORD)v22)
            goto LABEL_119;
          if (*a1)
            goto LABEL_125;
          v12 = a1[1];
          if (v12 == 1)
          {
            result = sub_2341376A4((uint64_t)a1, &v26, (uint64_t)&v22);
            v8 = v22;
            v9 = DWORD1(v22);
            v10 = HIDWORD(v23);
            if ((_DWORD)v22)
              goto LABEL_119;
            if (!v26)
            {
              v11 = 185;
LABEL_147:
              v8 = 773;
LABEL_148:
              *(_DWORD *)a3 = v8;
              *(_DWORD *)(a3 + 4) = v9;
              *(_QWORD *)(a3 + 8) = v7;
              *(_DWORD *)(a3 + 16) = v11;
              *(_DWORD *)(a3 + 20) = v10;
              return result;
            }
            result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
            v8 = v22;
            v9 = DWORD1(v22);
            v10 = HIDWORD(v23);
            if ((_DWORD)v22)
              goto LABEL_119;
            if (*a1)
            {
LABEL_125:
              v11 = 194;
              goto LABEL_147;
            }
            v12 = a1[1];
          }
          if (v12 != 4)
            goto LABEL_125;
          result = (uint64_t)sub_2341374FC(a1, (uint64_t)&v22);
          v8 = v22;
          v9 = DWORD1(v22);
          v10 = HIDWORD(v23);
          if ((_DWORD)v22)
            goto LABEL_119;
          switch(v27)
          {
            case 0x501u:
              if (!v26)
              {
                v11 = 264;
                goto LABEL_147;
              }
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v8 = v22;
              v9 = DWORD1(v22);
              v10 = HIDWORD(v23);
              if ((_DWORD)v22)
                goto LABEL_119;
              v11 = 267;
              v8 = 773;
              if (*a1 || a1[1] != 16)
                goto LABEL_148;
              result = sub_234137338((uint64_t)a1, (uint64_t)&v22);
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              v21 = 0;
              v20 = -1;
              sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              if (!(_DWORD)v22 && !*a1)
              {
                v13 = a1[1];
                if (v13 == 1)
                {
                  result = sub_2341376A4((uint64_t)a1, &v21, (uint64_t)&v22);
                  v8 = v22;
                  v9 = DWORD1(v22);
                  v10 = HIDWORD(v23);
                  if ((_DWORD)v22)
                    goto LABEL_119;
                  if (!v21)
                  {
                    v11 = 279;
                    goto LABEL_147;
                  }
                  sub_23413712C((uint64_t)a1, (uint64_t)&v22);
                  v13 = a1[1];
                  v14 = (v22 | *a1) == 0;
                }
                else
                {
                  v14 = 1;
                }
                if (v14 && v13 == 2)
                {
                  result = (uint64_t)sub_234137574(a1, &v20, (uint64_t)&v22);
                  v8 = v22;
                  v9 = DWORD1(v22);
                  v10 = HIDWORD(v23);
                  if ((_DWORD)v22)
                    goto LABEL_119;
                  if (v20 > 0xFF)
                  {
                    v11 = 290;
                    goto LABEL_147;
                  }
                  if (!v21)
                  {
                    v11 = 293;
                    goto LABEL_147;
                  }
                }
              }
              result = (uint64_t)sub_234107E40(a2, 1uLL, 21, &v28, (uint64_t)&v22);
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              result = (uint64_t)sub_234106F04(a2, 1uLL, v21, (uint64_t)&v22);
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              if (v20 != -1)
              {
                result = (uint64_t)sub_2341071D8(a2, 2uLL, v20, (uint64_t)&v22);
                v8 = v22;
                if ((_DWORD)v22)
                  goto LABEL_120;
              }
              result = (uint64_t)sub_234107FB0(a2, v28, (uint64_t)&v22);
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v15 = v22;
              if ((_DWORD)v22 == 768)
                goto LABEL_101;
              v9 = DWORD1(v22);
              v10 = HIDWORD(v23);
              if (!(_DWORD)v22)
              {
                v11 = 313;
                goto LABEL_147;
              }
              goto LABEL_109;
            case 0x502u:
              if (!v26)
              {
                v11 = 240;
                goto LABEL_147;
              }
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v8 = v22;
              v9 = DWORD1(v22);
              v10 = HIDWORD(v23);
              if ((_DWORD)v22)
                goto LABEL_119;
              v11 = 243;
              v8 = 773;
              if (*a1 || a1[1] != 3)
                goto LABEL_148;
              LODWORD(v20) = 0;
              result = sub_234137918((uint64_t)a1, (unsigned int *)&v20, (uint64_t)&v22);
              v8 = v22;
              v9 = DWORD1(v22);
              v10 = HIDWORD(v23);
              if ((_DWORD)v22)
                goto LABEL_119;
              if (WORD1(v20))
              {
                v11 = 248;
                goto LABEL_147;
              }
              if ((v20 & 0xFF00) != 0)
              {
                v11 = 256;
                goto LABEL_147;
              }
              result = (uint64_t)sub_23410726C(a2, 2uLL, v20, (uint64_t)&v22);
LABEL_102:
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v15 = v22;
              if ((_DWORD)v22 != 768)
              {
                v9 = DWORD1(v22);
                v10 = HIDWORD(v23);
                if (!(_DWORD)v22)
                {
                  v11 = 357;
                  goto LABEL_147;
                }
LABEL_109:
                v16 = *((_QWORD *)&v22 + 1);
                v17 = v23;
                goto LABEL_112;
              }
              result = (uint64_t)sub_234137434(&v22, a1);
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v15 = v22;
              if ((_DWORD)v22 != 768)
              {
                v9 = DWORD1(v22);
                v10 = HIDWORD(v23);
                if (!(_DWORD)v22)
                {
                  v11 = 359;
                  goto LABEL_147;
                }
                goto LABEL_109;
              }
              result = (uint64_t)sub_234137434(&v22, a1);
              v15 = v22;
LABEL_111:
              v9 = DWORD1(v22);
              v16 = *((_QWORD *)&v22 + 1);
              v17 = v23;
              v10 = HIDWORD(v23);
LABEL_112:
              *(_DWORD *)a3 = v15;
              *(_DWORD *)(a3 + 4) = v9;
              *(_QWORD *)(a3 + 8) = v16;
              *(_DWORD *)(a3 + 16) = v17;
              *(_DWORD *)(a3 + 20) = v10;
              if (v15)
                return result;
              break;
            case 0x503u:
              if (!v26)
              {
                v11 = 318;
                goto LABEL_147;
              }
              result = (uint64_t)sub_234107E40(a2, 3uLL, 22, &v28, (uint64_t)&v22);
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v8 = v22;
              v9 = DWORD1(v22);
              v10 = HIDWORD(v23);
              if ((_DWORD)v22)
                goto LABEL_119;
              v11 = 324;
              v8 = 773;
              if (*a1 || a1[1] != 16)
                goto LABEL_148;
              for (result = sub_234137338((uint64_t)a1, (uint64_t)&v22);
                    ;
                    result = (uint64_t)sub_2341071D8(a2, 0x100uLL, v20, (uint64_t)&v22))
              {
                v8 = v22;
                if ((_DWORD)v22)
                  goto LABEL_120;
                result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
                v15 = v22;
                if ((_DWORD)v22)
                  break;
                LOWORD(v20) = 0;
                result = (uint64_t)sub_234136FF8((uint64_t)a1, &v20, (uint64_t)&v22);
                v8 = v22;
                v9 = DWORD1(v22);
                v10 = HIDWORD(v23);
                if ((_DWORD)v22)
                  goto LABEL_119;
                result = (unsigned __int16)v20;
                if ((unsigned __int16)v20 == 0xFFFF)
                {
                  v11 = 332;
                  v8 = 774;
                  goto LABEL_148;
                }
                result = sub_234136F70((unsigned __int16)v20);
                if ((_DWORD)result != 1536)
                {
                  v11 = 333;
                  goto LABEL_147;
                }
              }
              if ((_DWORD)v22 != 768)
                goto LABEL_111;
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v15 = v22;
              if ((_DWORD)v22 != 768)
              {
                v9 = DWORD1(v22);
                v10 = HIDWORD(v23);
                if (!(_DWORD)v22)
                {
                  v11 = 343;
                  goto LABEL_147;
                }
                goto LABEL_109;
              }
              result = (uint64_t)sub_234137434(&v22, a1);
              v8 = v22;
              if ((_DWORD)v22)
              {
LABEL_120:
                v9 = DWORD1(v22);
                v7 = (const char *)*((_QWORD *)&v22 + 1);
                v11 = v23;
                v10 = HIDWORD(v23);
                goto LABEL_148;
              }
              result = (uint64_t)sub_234107FB0(a2, v28, (uint64_t)&v22);
              goto LABEL_102;
            case 0x504u:
              if (v26)
              {
                v11 = 226;
                goto LABEL_147;
              }
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v8 = v22;
              v9 = DWORD1(v22);
              v10 = HIDWORD(v23);
              if ((_DWORD)v22)
                goto LABEL_119;
              v11 = 230;
              v8 = 773;
              if (*a1 || a1[1] != 4)
                goto LABEL_148;
              if (*((_DWORD *)a1 + 4) != 20)
              {
                v11 = 232;
                goto LABEL_147;
              }
              result = (uint64_t)sub_234107438(a2, 4uLL, *((char **)a1 + 1), 0x14u, (uint64_t)&v22);
              goto LABEL_102;
            case 0x505u:
              if (v26)
              {
                v11 = 199;
                goto LABEL_147;
              }
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v8 = v22;
              v9 = DWORD1(v22);
              v10 = HIDWORD(v23);
              if ((_DWORD)v22)
                goto LABEL_119;
              v11 = 202;
              v8 = 773;
              if (*a1 || a1[1] != 16)
                goto LABEL_148;
              result = sub_234137338((uint64_t)a1, (uint64_t)&v22);
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v8 = v22;
              v9 = DWORD1(v22);
              v10 = HIDWORD(v23);
              if ((_DWORD)v22)
              {
LABEL_119:
                v7 = (const char *)*((_QWORD *)&v22 + 1);
                v11 = v23;
                goto LABEL_148;
              }
              v11 = 210;
              v8 = 773;
              if (*a1 != 128 || a1[1])
                goto LABEL_148;
              if (a1[20])
              {
                v11 = 212;
                goto LABEL_147;
              }
              if (*((_DWORD *)a1 + 4) != 20)
              {
                v11 = 213;
                goto LABEL_147;
              }
              result = (uint64_t)sub_234107438(a2, 5uLL, *((char **)a1 + 1), 0x14u, (uint64_t)&v22);
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              if ((_DWORD)v22 != 768)
              {
                v9 = DWORD1(v22);
                v10 = HIDWORD(v23);
                v11 = 219;
                goto LABEL_147;
              }
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              v15 = v22;
              if ((_DWORD)v22 == 768)
              {
LABEL_101:
                result = (uint64_t)sub_234137434(&v22, a1);
                goto LABEL_102;
              }
              v9 = DWORD1(v22);
              v10 = HIDWORD(v23);
              if (!(_DWORD)v22)
              {
                v11 = 221;
                goto LABEL_147;
              }
              goto LABEL_109;
            default:
              result = (uint64_t)sub_234107438(a2, 6uLL, v25, v24, (uint64_t)&v22);
              v8 = v22;
              if ((_DWORD)v22)
                goto LABEL_120;
              result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
              goto LABEL_102;
          }
        }
        if (*(_DWORD *)a3 != 768)
          return result;
        result = sub_23413712C((uint64_t)a1, (uint64_t)&v22);
        *(_OWORD *)a3 = v22;
        *(_QWORD *)(a3 + 16) = v23;
        if (*(_DWORD *)a3 == 768)
        {
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
          *(_DWORD *)(a3 + 16) = 387;
          result = (uint64_t)sub_234137434(&v22, a1);
          *(_OWORD *)a3 = v22;
          *(_QWORD *)(a3 + 16) = v23;
          if (!*(_DWORD *)a3)
          {
            result = (uint64_t)sub_234107FB0(a2, v19, (uint64_t)&v22);
            *(_OWORD *)a3 = v22;
            *(_QWORD *)(a3 + 16) = v23;
          }
          return result;
        }
        if (*(_DWORD *)a3)
          return result;
        *(_DWORD *)a3 = 773;
        *(_QWORD *)(a3 + 8) = "src/credentials/CHIPCertFromX509.cpp";
        v18 = 387;
      }
      *(_DWORD *)(a3 + 16) = v18;
    }
  }
  return result;
}

uint64_t sub_2341DB278@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[14];
  _BYTE v13[72];
  _BYTE v14[424];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_234104468((uint64_t)v13);
  sub_2341D5848(v14, v8);
  sub_234104498((uint64_t)v13, a1, a2);
  sub_23413824C((uint64_t)v12, *a3, a3[1]);
  sub_2341D55FC((uint64_t)v14);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341DB374((uint64_t)v13, v12, (unsigned __int8 *)v12, (uint64_t)v14, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    v10 = sub_234138270(v12);
    sub_233BF7588((uint64_t)a3, v10);
    *(_DWORD *)a4 = 0;
    a4[1] = "src/credentials/CHIPCertToX509.cpp";
    *((_DWORD *)a4 + 4) = 655;
  }
  return nullsub_13(v14, v9);
}

__n128 sub_2341DB374@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 result;
  _OWORD *v11;
  int v12;
  int v13;
  _OWORD **v14;
  __int16 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _BYTE v30[24];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (sub_23410462C(a1) != -1
    || (*(_QWORD *)a5 = 0,
        *(_QWORD *)(a5 + 8) = 0,
        *(_QWORD *)(a5 + 16) = 0,
        sub_2341058CC(a1, (_QWORD *)a5),
        !*(_DWORD *)a5))
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    sub_234105F5C(a1, 21, 256, a5);
    if (!*(_DWORD *)a5)
    {
      v24 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)a5 = 0;
      sub_23410570C(a1, &v24, a5);
      if (!*(_DWORD *)a5)
      {
        v11 = (_OWORD *)(a5 + 4);
        sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)v30);
        v12 = *(_DWORD *)v30;
        v28 = *(_OWORD *)&v30[4];
        v29 = *(_DWORD *)&v30[20];
        if (*(_DWORD *)v30)
        {
LABEL_5:
          *(_DWORD *)a5 = v12;
          result.n128_u64[0] = v28;
          *v11 = v28;
          v13 = v29;
LABEL_6:
          *(_DWORD *)(a5 + 20) = v13;
          return result;
        }
        sub_2341058CC(a1, v30);
        if (*(_QWORD *)(a1 + 16) == 9)
        {
          v26 = 0uLL;
          v27 = 0;
          sub_234105F5C(a1, 16, 9, (uint64_t)&v26);
          if (!(_DWORD)v26)
          {
            v26 = 0uLL;
            v14 = (_OWORD **)(a4 + 360);
            v27 = 0;
            sub_2341DBE10(a1, (_QWORD *)(a4 + 360), &v26);
            if (!(_DWORD)v26)
            {
              *(_OWORD *)a4 = xmmword_250514F08;
              *(_WORD *)(a4 + 372) = 513;
              sub_2341D8D6C(a4 + 176);
              *(_QWORD *)(a4 + 352) = 1;
              sub_2341D8D6C(a4 + 16);
              *(_DWORD *)(a4 + 368) = 16843777;
              v15 = *(_WORD *)(a4 + 374);
              *(_WORD *)(a4 + 376) = 1;
              *(_WORD *)(a4 + 374) = v15 | 7;
              *(_BYTE *)(a4 + 378) = 3;
              if (*(_QWORD *)a3)
              {
                v26 = 0uLL;
                v27 = 0;
                *(_QWORD *)v30 = &off_250505A50;
                v16 = *v14;
                *(_OWORD *)&v30[8] = **v14;
                v18 = v16[2];
                v17 = v16[3];
                v19 = *((_BYTE *)v16 + 64);
                v31 = v16[1];
                v32 = v18;
                v34 = v19;
                v33 = v17;
                sub_2341E8348((uint64_t)v30, a3, (uint64_t)&v26);
              }
            }
          }
        }
        else
        {
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_234138CD8((uint64_t)a3, 0, 0x10u, (uint64_t)v30);
          v20 = *(_DWORD *)v30;
          v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30)
            goto LABEL_26;
          sub_234138CD8((uint64_t)a3, 128, 0, (uint64_t)v30);
          v20 = *(_DWORD *)v30;
          v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30)
            goto LABEL_26;
          sub_23413828C(a3, 2uLL, (uint64_t)v30);
          v20 = *(_DWORD *)v30;
          v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30)
            goto LABEL_26;
          sub_234138CE4(v30, a3);
          v20 = *(_DWORD *)v30;
          v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30)
            goto LABEL_26;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_234105F5C(a1, 16, 1, a5);
          if (*(_DWORD *)a5)
            return result;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          result.n128_f64[0] = sub_234104B68(a1, (_OWORD *)a4, (_QWORD *)a5);
          if (*(_DWORD *)a5)
            return result;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_234138364(a3, 0, 2u, 0, *(const void **)a4, *(unsigned __int16 *)(a4 + 8), (_QWORD *)a5);
          if (*(_DWORD *)a5)
            return result;
          sub_234138CD8((uint64_t)a3, 0, 0x10u, (uint64_t)v30);
          v20 = *(_DWORD *)v30;
          v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30)
            goto LABEL_26;
          v25 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          *(_QWORD *)a5 = 0;
          sub_234105EE4(a1, 2, (_QWORD *)a5);
          if (*(_DWORD *)a5)
            return result;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_23410492C(a1, &v25, a5);
          if (*(_DWORD *)a5)
            return result;
          v21 = v25 | 0x200;
          *(_WORD *)(a4 + 372) = v25 | 0x200;
          sub_2341370A0(a3, v21, (uint64_t)v30);
          v20 = *(_DWORD *)v30;
          v26 = *(_OWORD *)&v30[4];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30
            || (sub_234138CE4(v30, a3),
                v20 = *(_DWORD *)v30,
                v26 = *(_OWORD *)&v30[4],
                LODWORD(v27) = *(_DWORD *)&v30[20],
                *(_DWORD *)v30))
          {
LABEL_26:
            *(_DWORD *)a5 = v20;
            result.n128_u64[0] = v26;
            *v11 = v26;
            v13 = v27;
            goto LABEL_6;
          }
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_234106010(a1, 23, 3, (_QWORD *)a5);
          if (*(_DWORD *)a5)
            return result;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_2341DBC28(a1, a3, a4 + 176, (_QWORD *)a5);
          if (*(_DWORD *)a5)
            return result;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_2341DBEAC(a1, a3, a4, a5);
          if (*(_DWORD *)a5)
            return result;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_234106010(a1, 23, 6, (_QWORD *)a5);
          if (*(_DWORD *)a5)
            return result;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_2341DBC28(a1, a3, a4 + 16, (_QWORD *)a5);
          if (*(_DWORD *)a5)
            return result;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_2341DC0CC(a1, a3, a4, a5);
          if (*(_DWORD *)a5)
            return result;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_2341DC38C(a1, a3, a4, a5);
          if (*(_DWORD *)a5)
            return result;
          sub_234138CE4(v30, a3);
          v22 = *(_DWORD *)v30;
          v23 = *(_DWORD *)&v30[20];
          LODWORD(v27) = *(_DWORD *)&v30[20];
          result = *(__n128 *)&v30[4];
          v26 = *(_OWORD *)&v30[4];
          *(_DWORD *)a5 = *(_DWORD *)v30;
          *v11 = result;
          *(_DWORD *)(a5 + 20) = v23;
          if (v22)
            return result;
        }
        sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)v30);
        v12 = *(_DWORD *)v30;
        v28 = *(_OWORD *)&v30[4];
        v29 = *(_DWORD *)&v30[20];
        if (*(_DWORD *)v30)
          goto LABEL_5;
        sub_2341370A0(a2, *(unsigned __int16 *)(a4 + 372), (uint64_t)v30);
        v12 = *(_DWORD *)v30;
        v28 = *(_OWORD *)&v30[4];
        v29 = *(_DWORD *)&v30[20];
        if (*(_DWORD *)v30)
          goto LABEL_5;
        sub_234138CE4(v30, a2);
        v12 = *(_DWORD *)v30;
        v28 = *(_OWORD *)&v30[4];
        v29 = *(_DWORD *)&v30[20];
        if (*(_DWORD *)v30)
          goto LABEL_5;
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        sub_2341DBCA8(a1, a2, a4, a5);
        if (!*(_DWORD *)a5)
        {
          sub_234138CE4(v30, a2);
          v12 = *(_DWORD *)v30;
          v28 = *(_OWORD *)&v30[4];
          v29 = *(_DWORD *)&v30[20];
          if (*(_DWORD *)v30)
            goto LABEL_5;
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          result.n128_f64[0] = sub_234105840(a1, a5);
          if (!*(_DWORD *)a5)
          {
            *(_QWORD *)a5 = 0;
            *(_QWORD *)(a5 + 8) = 0;
            *(_QWORD *)(a5 + 16) = 0;
            sub_23410577C(a1, v24, a5);
            v12 = *(_DWORD *)a5;
            if (!*(_DWORD *)a5)
              goto LABEL_5;
          }
        }
      }
    }
  }
  return result;
}

void sub_2341DB9DC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  _BYTE v10[72];

  sub_234104468((uint64_t)v10);
  sub_234104498((uint64_t)v10, a1, a2);
  sub_2341DBA4C((uint64_t)v10, a3, a4, a5);
}

void sub_2341DBA4C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  int v8;
  char *v9;
  char *v10;
  size_t v11;
  _QWORD v12[14];
  _QWORD v13[14];

  sub_234138260((uint64_t)v13);
  sub_2341D55FC(a2);
  if ((a3 & 1) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_2341DB374(a1, v13, (unsigned __int8 *)v13, a2, (uint64_t)a4);
    if (*(_DWORD *)a4)
      return;
    goto LABEL_3;
  }
  v9 = (char *)sub_234114774(0x20FuLL);
  if (!v9)
  {
    *(_DWORD *)a4 = 11;
    a4[1] = "src/credentials/CHIPCertToX509.cpp";
    v8 = 678;
LABEL_12:
    *((_DWORD *)a4 + 4) = v8;
    return;
  }
  v10 = v9;
  sub_23413824C((uint64_t)v12, (uint64_t)v9, 527);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341DB374(a1, v13, (unsigned __int8 *)v12, a2, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    if (*(_WORD *)(a2 + 372) == 513)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v11 = sub_234138270(v12);
      sub_2341393FC(v10, v11, (_DWORD *)(a2 + 392), (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *(_WORD *)(a2 + 374) |= 0x200u;
        j__free(v10);
LABEL_3:
        if ((a3 & 2) != 0)
          *(_WORD *)(a2 + 374) |= 0x100u;
        *(_DWORD *)a4 = 0;
        a4[1] = "src/credentials/CHIPCertToX509.cpp";
        v8 = 700;
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)a4 = 23;
      a4[1] = "src/credentials/CHIPCertToX509.cpp";
      *((_DWORD *)a4 + 4) = 685;
    }
  }
  j__free(v10);
}

void sub_2341DBBD0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD v6[14];

  sub_234138260((uint64_t)v6);
  sub_2341D6810(a2);
  sub_2341DBC28(a1, v6, a2, a3);
}

void sub_2341DBC28(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341D6D60(a3, a1, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_2341D704C(a3, a2, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/credentials/CHIPCertToX509.cpp";
      *((_DWORD *)a4 + 4) = 53;
    }
  }
}

void sub_2341DBCA8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  int v9;
  int v10;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234106010(a1, 16, 11, (_QWORD *)a4);
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v8 = (uint64_t *)(a3 + 384);
    *(_QWORD *)(a4 + 16) = 0;
    sub_2341DD320(a1, v8, (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
      *(_DWORD *)(a4 + 16) = 446;
      if (*a2)
      {
        sub_234138E44(a2, 0, 3u, 1, &v10);
        v9 = v10;
        v13 = v11;
        v14 = v12;
        if (v10)
        {
LABEL_5:
          *(_DWORD *)a4 = v9;
          *(_OWORD *)(a4 + 4) = v13;
          *(_DWORD *)(a4 + 20) = v14;
          return;
        }
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_2341D7D3C(*v8, a2, a4);
        if (!*(_DWORD *)a4)
        {
          sub_234138CE4(&v10, a2);
          v9 = v10;
          v13 = v11;
          v14 = v12;
          goto LABEL_5;
        }
      }
      else
      {
        *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
        *(_DWORD *)(a4 + 16) = 456;
      }
    }
  }
}

uint64_t sub_2341DBE10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234104C0C(a1, &v10, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    result = sub_2341046A4(a1);
    if ((_DWORD)result == 65)
    {
      result = (uint64_t)sub_233C01D28(&v9, v10);
      v7 = 0;
      *a2 = v9;
      v8 = 476;
    }
    else
    {
      v8 = 474;
      v7 = 43;
    }
    *(_DWORD *)a3 = v7;
    a3[1] = "src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = v8;
  }
  return result;
}

void sub_2341DBEAC(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  __int128 v12;
  int v13;
  unsigned __int8 v14[8];
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v11);
  v8 = v11;
  v15 = v12;
  v16 = v13;
  if (v11)
    goto LABEL_2;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234105EE4(a1, 4, (_QWORD *)a4);
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v9 = (_DWORD *)(a3 + 352);
    *(_QWORD *)(a4 + 16) = 0;
    sub_234104A50(a1, (_DWORD *)(a3 + 352), a4);
    if (!*(_DWORD *)a4)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      sub_2341D791C(*v9, (uint64_t)v14, a4);
      if (!*(_DWORD *)a4)
      {
        sub_234138AFC(a2, v14, &v11);
        v8 = v11;
        v15 = v12;
        v16 = v13;
        if (!v11)
        {
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          sub_234105EE4(a1, 5, (_QWORD *)a4);
          if (*(_DWORD *)a4)
            return;
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          v10 = (_DWORD *)(a3 + 356);
          *(_QWORD *)(a4 + 16) = 0;
          sub_234104A50(a1, v10, a4);
          if (*(_DWORD *)a4)
            return;
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          sub_2341D791C(*v10, (uint64_t)v14, a4);
          if (*(_DWORD *)a4)
            return;
          sub_234138AFC(a2, v14, &v11);
          v8 = v11;
          v15 = v12;
          v16 = v13;
          if (!v11)
          {
            if ((*v10 - 1) < *v9)
            {
              *(_DWORD *)a4 = 80;
              *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
              *(_DWORD *)(a4 + 16) = 76;
              return;
            }
            sub_234138CE4(&v11, a2);
            v8 = v11;
            v15 = v12;
            v16 = v13;
          }
        }
LABEL_2:
        *(_DWORD *)a4 = v8;
        *(_OWORD *)(a4 + 4) = v15;
        *(_DWORD *)(a4 + 20) = v16;
      }
    }
  }
}

void sub_2341DC0CC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const void **v12;
  int v13;
  __int128 v14;
  int v15;
  __int16 v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234105EE4(a1, 7, (_QWORD *)a4);
  if (*(_DWORD *)a4)
    return;
  v16 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_23410492C(a1, (_BYTE *)&v16 + 1, a4);
  if (*(_DWORD *)a4)
    return;
  v8 = HIBYTE(v16) | 0x100;
  *(_WORD *)(a3 + 370) = HIBYTE(v16) | 0x100;
  if (v8 != 257)
  {
    *(_DWORD *)a4 = 80;
    *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
    v11 = 94;
LABEL_14:
    *(_DWORD *)(a4 + 16) = v11;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234105EE4(a1, 8, (_QWORD *)a4);
  if (*(_DWORD *)a4)
    return;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_23410492C(a1, &v16, a4);
  if (*(_DWORD *)a4)
    return;
  v9 = v16 | 0x400;
  *(_WORD *)(a3 + 368) = v16 | 0x400;
  if (v9 != 1025)
  {
    *(_DWORD *)a4 = 81;
    *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
    v11 = 100;
    goto LABEL_14;
  }
  sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v13);
  v10 = v13;
  v17 = v14;
  v18 = v15;
  if (v13)
    goto LABEL_12;
  sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v13);
  v10 = v13;
  v17 = v14;
  v18 = v15;
  if (v13)
    goto LABEL_12;
  sub_2341370A0(a2, *(unsigned __int16 *)(a3 + 370), (uint64_t)&v13);
  v10 = v13;
  v17 = v14;
  v18 = v15;
  if (v13)
    goto LABEL_12;
  sub_2341370A0(a2, *(unsigned __int16 *)(a3 + 368), (uint64_t)&v13);
  v10 = v13;
  v17 = v14;
  v18 = v15;
  if (v13)
    goto LABEL_12;
  sub_234138CE4(&v13, a2);
  v10 = v13;
  v17 = v14;
  v18 = v15;
  if (v13)
    goto LABEL_12;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234106010(a1, 16, 9, (_QWORD *)a4);
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v12 = (const void **)(a3 + 360);
    *(_QWORD *)(a4 + 16) = 0;
    sub_2341DBE10(a1, v12, (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      sub_23413891C(a2, 0, *v12, 0x41u, (_QWORD *)a4);
      if (!*(_DWORD *)a4)
      {
        sub_234138CE4(&v13, a2);
        v10 = v13;
        v17 = v14;
        v18 = v15;
LABEL_12:
        *(_DWORD *)a4 = v10;
        *(_OWORD *)(a4 + 4) = v17;
        *(_DWORD *)(a4 + 20) = v18;
      }
    }
  }
}

void sub_2341DC38C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  int v21;
  unsigned int v22;
  const char *v23;
  unsigned __int16 v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  __int16 v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  __int128 v40;
  int v41;
  __int128 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234106010(a1, 23, 10, (_QWORD *)a4);
  if (*(_DWORD *)a4)
    return;
  v30 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_23410570C(a1, &v30, a4);
  if (*(_DWORD *)a4)
    return;
  v11 = (__int128 *)(a4 + 4);
  sub_234138CD8((uint64_t)a2, 128, 3u, (uint64_t)&v36);
  v12 = v36;
  v40 = v37;
  v41 = v38;
  if (v36)
    goto LABEL_5;
  sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v36);
  v12 = v36;
  HIDWORD(v13) = DWORD1(v37);
  v40 = v37;
  v41 = v38;
  if (v36)
    goto LABEL_5;
  LODWORD(v13) = 308;
  v28 = v13;
  v14 = "src/credentials/CHIPCertToX509.cpp";
  LODWORD(v5) = 773;
  LODWORD(v6) = 773;
  LODWORD(v4) = 313;
  while (1)
  {
    sub_2341058CC(a1, &v36);
    v12 = v36;
    v40 = v37;
    v41 = v38;
    if (v36)
      break;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v42 = xmmword_250514F1C;
    v43 = 0;
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 > 0xFF)
    {
      v25 = 349;
      v26 = 36;
LABEL_60:
      *(_DWORD *)a4 = v26;
      *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
LABEL_70:
      *(_DWORD *)(a4 + 16) = v25;
      return;
    }
    if ((_DWORD)v15 != 6)
    {
      sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v36);
      v17 = v36;
      v42 = v37;
      v43 = v38;
      if (!v36)
      {
        sub_2341370A0(a2, (unsigned __int16)v15 | 0x500, (uint64_t)&v36);
        v17 = v36;
        v42 = v37;
        v43 = v38;
        if (!v36)
        {
          v22 = v15 - 1;
          if (v22 > 2 || (sub_2341383F4(a2, 1, &v36), v17 = v36, v42 = v37, v43 = v38, !v36))
          {
            sub_234138E44(a2, 0, 4u, 0, &v36);
            v17 = v36;
            v42 = v37;
            v43 = v38;
            if (!v36)
            {
              switch(v22)
              {
                case 0u:
                  *(_QWORD *)a4 = 0;
                  *(_QWORD *)(a4 + 8) = 0;
                  *(_QWORD *)(a4 + 16) = 0;
                  sub_2341DCD9C(a1, a2, a3, a4);
                  break;
                case 1u:
                  *(_QWORD *)a4 = 0;
                  *(_QWORD *)(a4 + 8) = 0;
                  *(_QWORD *)(a4 + 16) = 0;
                  sub_2341DCC74(a1, a2, a3, a4);
                  break;
                case 2u:
                  *(_QWORD *)a4 = 0;
                  *(_QWORD *)(a4 + 8) = 0;
                  *(_QWORD *)(a4 + 16) = 0;
                  sub_2341DD054(a1, a2, a3, a4);
                  break;
                case 3u:
                  *(_QWORD *)a4 = 0;
                  *(_QWORD *)(a4 + 8) = 0;
                  *(_QWORD *)(a4 + 16) = 0;
                  sub_2341DCBB8(a1, a2, a3, (_QWORD *)a4);
                  break;
                case 4u:
                  *(_QWORD *)a4 = 0;
                  *(_QWORD *)(a4 + 8) = 0;
                  *(_QWORD *)(a4 + 16) = 0;
                  sub_2341DCA6C(a1, a2, a3, a4);
                  break;
                default:
                  v25 = 399;
                  v26 = 80;
                  goto LABEL_60;
              }
              if (*(_DWORD *)a4)
                return;
              sub_234138CE4(&v36, a2);
              v17 = v36;
              v42 = v37;
              v43 = v38;
              if (!v36)
              {
                sub_234138CE4(&v36, a2);
                v17 = v36;
                v42 = v37;
                v43 = v38;
              }
            }
          }
        }
      }
LABEL_43:
      *(_DWORD *)a4 = v17;
      *v11 = v42;
      *(_DWORD *)(a4 + 20) = v43;
      goto LABEL_44;
    }
    v39 = 0uLL;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_234105F5C(a1, 16, 6, a4);
    if (*(_DWORD *)a4)
      return;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_234104B68(a1, &v39, (_QWORD *)a4);
    if (*(_DWORD *)a4)
      return;
    sub_2341370F4((uint64_t)&v36, v39, *((uint64_t *)&v39 + 1));
    sub_23413712C((uint64_t)&v36, (uint64_t)&v33);
    v16 = v33;
    if ((_DWORD)v33)
    {
LABEL_61:
      v23 = v34;
LABEL_62:
      v27 = v35;
      goto LABEL_66;
    }
    if ((_BYTE)v36 || BYTE1(v36) != 16)
    {
      v23 = "src/credentials/CHIPCertToX509.cpp";
      v16 = v6;
      v27 = v28;
      goto LABEL_66;
    }
    sub_234137338((uint64_t)&v36, (uint64_t)&v33);
    v16 = v33;
    if ((_DWORD)v33)
      goto LABEL_61;
    v32 = 0;
    v31 = 0;
    sub_23413712C((uint64_t)&v36, (uint64_t)&v33);
    v16 = v33;
    if ((_DWORD)v33)
    {
LABEL_58:
      v14 = v34;
      v4 = v35;
      goto LABEL_65;
    }
    if ((_BYTE)v36 || BYTE1(v36) != 6)
    {
      v16 = v5;
LABEL_65:
      v23 = v14;
      v27 = v4;
LABEL_66:
      *(_QWORD *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v23;
      *(_QWORD *)(a4 + 16) = v27;
      return;
    }
    sub_234136FF8((uint64_t)&v36, &v32, (uint64_t)&v33);
    v16 = v33;
    if ((_DWORD)v33)
      goto LABEL_58;
    if (v32 != -1)
    {
      *(_DWORD *)a4 = 774;
      *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
      v25 = 315;
      goto LABEL_70;
    }
    sub_23413712C((uint64_t)&v36, (uint64_t)&v33);
    v16 = v33;
    if ((_DWORD)v33)
      goto LABEL_58;
    if (!(_BYTE)v36 && BYTE1(v36) == 1)
    {
      sub_2341376A4((uint64_t)&v36, &v31, (uint64_t)&v33);
      v16 = v33;
      if ((_DWORD)v33)
        goto LABEL_58;
      if (v31)
        *(_WORD *)(a3 + 374) |= 0x20u;
      sub_23413712C((uint64_t)&v36, (uint64_t)&v33);
      v16 = v33;
      if ((_DWORD)v33)
        goto LABEL_58;
    }
    sub_23413712C((uint64_t)&v36, (uint64_t)&v33);
    v17 = v33;
    if ((_DWORD)v33 == 768)
    {
      sub_234137434(&v33, &v36);
      v16 = v33;
      v23 = v34;
      if ((_DWORD)v33)
        goto LABEL_62;
      v24 = WORD4(v39);
      if (*((_QWORD *)&v39 + 1) >= 0x10000uLL)
      {
        *(_DWORD *)a4 = 773;
        *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
        v25 = 333;
        goto LABEL_70;
      }
      v29 = HIDWORD(v33);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      sub_234138C48(v24, a2, (const void *)v39, a4);
      v17 = *(_DWORD *)a4;
      if (*(_DWORD *)a4)
        return;
      *(_DWORD *)(a4 + 4) = v29;
      *(_QWORD *)(a4 + 8) = v23;
      goto LABEL_43;
    }
    v18 = HIDWORD(v33);
    v19 = HIDWORD(v35);
    if (!(_DWORD)v33)
    {
      LODWORD(v16) = vdup_n_s32(0x305u).u32[0];
      HIDWORD(v16) = HIDWORD(v33);
      LODWORD(v27) = vdup_n_s32(0x14Bu).u32[0];
      HIDWORD(v27) = HIDWORD(v35);
      v23 = "src/credentials/CHIPCertToX509.cpp";
      goto LABEL_66;
    }
    v20 = v34;
    v21 = v35;
    *(_DWORD *)a4 = v33;
    *(_DWORD *)(a4 + 4) = v18;
    *(_QWORD *)(a4 + 8) = v20;
    *(_DWORD *)(a4 + 16) = v21;
    *(_DWORD *)(a4 + 20) = v19;
LABEL_44:
    if (v17)
      return;
  }
  if (v36 == 33)
  {
    sub_234138CE4(&v36, a2);
    v12 = v36;
    v40 = v37;
    v41 = v38;
    if (!v36)
    {
      sub_234138CE4(&v36, a2);
      v12 = v36;
      v40 = v37;
      v41 = v38;
      if (!v36)
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_23410577C(a1, v30, a4);
        v12 = *(_DWORD *)a4;
        if (*(_DWORD *)a4)
          return;
      }
    }
  }
LABEL_5:
  *(_DWORD *)a4 = v12;
  *v11 = v40;
  *(_DWORD *)(a4 + 20) = v41;
}

_QWORD *sub_2341DCA6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  int v9;
  const void **v10;
  int v11;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)(a3 + 374) |= 0x10u;
  result = (_QWORD *)sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v11);
  v9 = v11;
  v14 = v12;
  v15 = v13;
  if (v11)
    goto LABEL_2;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = (_QWORD *)sub_234105F5C(a1, 16, 5, a4);
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v10 = (const void **)(a3 + 344);
    *(_QWORD *)(a4 + 16) = 0;
    result = (_QWORD *)sub_2341DD268(a1, v10, (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      result = sub_234138640(a2, 128, 0, *v10, 0x14u, (_QWORD *)a4);
      if (!*(_DWORD *)a4)
      {
        result = sub_234138CE4(&v11, a2);
        v9 = v11;
        v14 = v12;
        v15 = v13;
LABEL_2:
        *(_DWORD *)a4 = v9;
        *(_OWORD *)(a4 + 4) = v14;
        *(_DWORD *)(a4 + 20) = v15;
      }
    }
  }
  return result;
}

uint64_t sub_2341DCBB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  const void **v9;

  *(_WORD *)(a3 + 374) |= 8u;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234105F5C(a1, 16, 4, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    v9 = (const void **)(a3 + 336);
    a4[2] = 0;
    result = sub_2341DD268(a1, v9, a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = (uint64_t)sub_234138628(a2, *v9, 0x14u, a4);
      if (!*(_DWORD *)a4)
      {
        *(_DWORD *)a4 = 0;
        a4[1] = "src/credentials/CHIPCertToX509.cpp";
        *((_DWORD *)a4 + 4) = 182;
      }
    }
  }
  return result;
}

uint64_t sub_2341DCC74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  unsigned __int16 v9;
  int v10;
  int v11;
  __int128 v12;
  int v13;
  unsigned __int16 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)(a3 + 374) |= 2u;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  result = sub_234105E54(a1, 2, a4);
  if (!*(_DWORD *)a4)
  {
    v14 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    result = sub_2341049E0(a1, &v14, a4);
    if (!*(_DWORD *)a4)
    {
      v9 = v14;
      if (v14 > 0xFFu)
      {
        *(_DWORD *)a4 = 80;
        *(_QWORD *)(a4 + 8) = "src/credentials/CHIPCertToX509.cpp";
        *(_DWORD *)(a4 + 16) = 202;
      }
      else
      {
        result = (uint64_t)sub_23413874C(a2, v14, (uint64_t)&v11);
        v10 = v11;
        v15 = v12;
        v16 = v13;
        if (!v11)
          *(_WORD *)(a3 + 376) = v9;
        *(_DWORD *)a4 = v10;
        *(_OWORD *)(a4 + 4) = v15;
        *(_DWORD *)(a4 + 20) = v16;
      }
    }
  }
  return result;
}

double sub_2341DCD9C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  double result;
  int v10;
  char v11;
  int v12;
  __int128 v13;
  int v14;
  int v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  *(_WORD *)(a3 + 374) |= 1u;
  sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v12);
  v8 = v12;
  v16 = v13;
  v17 = v14;
  if (v12)
    goto LABEL_2;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234105F5C(a1, 21, 1, a4);
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_23410570C(a1, &v15, a4);
    if (!*(_DWORD *)a4)
    {
      v11 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = 0;
      sub_234105EE4(a1, 1, (_QWORD *)a4);
      if (!*(_DWORD *)a4)
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_2341046D0(a1, &v11, a4);
        if (!*(_DWORD *)a4)
        {
          if (v11)
          {
            sub_2341383F4(a2, 1, &v12);
            v8 = v12;
            v16 = v13;
            v17 = v14;
            if (v12)
              goto LABEL_2;
            *(_WORD *)(a3 + 374) |= 0x80u;
          }
          sub_2341058CC(a1, &v12);
          v10 = v12;
          v16 = v13;
          v17 = v14;
          if (!v12 || v12 == 33)
          {
            if (*(_QWORD *)(a1 + 16) != 2)
              goto LABEL_17;
            *(_QWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = 0;
            sub_23410492C(a1, (_BYTE *)(a3 + 379), a4);
            if (*(_DWORD *)a4)
              return result;
            sub_23413828C(a2, *(unsigned __int8 *)(a3 + 379), (uint64_t)&v12);
            v8 = v12;
            v16 = v13;
            v17 = v14;
            if (v12)
              goto LABEL_2;
            *(_WORD *)(a3 + 374) |= 0x40u;
            sub_2341058CC(a1, &v12);
            v10 = v12;
            v16 = v13;
            v17 = v14;
            if (v12 == 33)
            {
LABEL_17:
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              result = sub_234105840(a1, a4);
              if (*(_DWORD *)a4)
                return result;
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              sub_23410577C(a1, v15, a4);
              if (*(_DWORD *)a4)
                return result;
              sub_234138CE4(&v12, a2);
              v8 = v12;
              v16 = v13;
              v17 = v14;
LABEL_2:
              *(_DWORD *)a4 = v8;
              result = *(double *)&v16;
              *(_OWORD *)(a4 + 4) = v16;
              *(_DWORD *)(a4 + 20) = v17;
              return result;
            }
          }
          *(_DWORD *)a4 = v10;
          result = *(double *)&v16;
          *(_OWORD *)(a4 + 4) = v16;
          *(_DWORD *)(a4 + 20) = v17;
        }
      }
    }
  }
  return result;
}

double sub_2341DD054@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  double result;
  unsigned __int8 v10;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  *(_WORD *)(a3 + 374) |= 4u;
  sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v11);
  v8 = v11;
  v15 = v12;
  v16 = v13;
  if (v11)
    goto LABEL_2;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234105F5C(a1, 22, 3, a4);
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_23410570C(a1, &v14, a4);
    if (!*(_DWORD *)a4)
    {
      while (1)
      {
        sub_234105EE4(a1, 256, &v11);
        v15 = v12;
        v16 = v13;
        if (v11)
          break;
        v10 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)a4 = 0;
        sub_23410492C(a1, &v10, a4);
        if (*(_DWORD *)a4)
          return result;
        sub_2341370A0(a2, v10 | 0x600, (uint64_t)&v11);
        v8 = v11;
        v15 = v12;
        v16 = v13;
        if (v11)
          goto LABEL_2;
        *(_BYTE *)(a3 + 378) |= 1 << (v10 - 1);
      }
      if (v11 == 33)
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_23410577C(a1, v14, a4);
        if (!*(_DWORD *)a4)
        {
          sub_234138CE4(&v11, a2);
          v8 = v11;
          v15 = v12;
          v16 = v13;
LABEL_2:
          *(_DWORD *)a4 = v8;
          result = *(double *)&v15;
          *(_OWORD *)(a4 + 4) = v15;
          *(_DWORD *)(a4 + 20) = v16;
        }
      }
      else
      {
        *(_DWORD *)a4 = v11;
        result = *(double *)&v15;
        *(_OWORD *)(a4 + 4) = v15;
        *(_DWORD *)(a4 + 20) = v16;
      }
    }
  }
  return result;
}

uint64_t sub_2341DD268@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234104C0C(a1, &v10, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    result = sub_2341046A4(a1);
    if ((_DWORD)result == 20)
    {
      result = (uint64_t)sub_2341DD304(&v9, v10);
      v7 = 0;
      *a2 = v9;
      v8 = 476;
    }
    else
    {
      v8 = 474;
      v7 = 43;
    }
    *(_DWORD *)a3 = v7;
    a3[1] = "src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = v8;
  }
  return result;
}

_QWORD *sub_2341DD304(_QWORD *result, uint64_t a2)
{
  *result = a2;
  if (!a2)
    sub_23425E384((uint64_t)result);
  return result;
}

uint64_t sub_2341DD320@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234104C0C(a1, &v10, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    result = sub_2341046A4(a1);
    if ((_DWORD)result == 64)
    {
      result = (uint64_t)sub_2341DD304(&v9, v10);
      v7 = 0;
      *a2 = v9;
      v8 = 476;
    }
    else
    {
      v8 = 474;
      v7 = 43;
    }
    *(_DWORD *)a3 = v7;
    a3[1] = "src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = v8;
  }
  return result;
}

void sub_2341DD3BC(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12[44];
  unsigned int v13;

  sub_234106C48((uint64_t)v12);
  v11 = 0;
  sub_234106C70((uint64_t)v12, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234107E40(v12, 0x100uLL, 21, (_DWORD *)&v11 + 1, (uint64_t)a3);
  if (*(_DWORD *)a3)
    return;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234107224(v12, 0, *a1, (uint64_t)a3);
  if (*(_DWORD *)a3)
    return;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234107224(v12, 1uLL, a1[1], (uint64_t)a3);
  if (*(_DWORD *)a3)
    return;
  if (!*((_BYTE *)a1 + 204))
  {
    v10 = 78;
    goto LABEL_34;
  }
  if (*((unsigned __int8 *)a1 + 204) > 0x64u)
  {
    v10 = 79;
    goto LABEL_34;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234107E40(v12, 2uLL, 22, &v11, (uint64_t)a3);
  if (*(_DWORD *)a3)
    return;
  if (!*((_BYTE *)a1 + 204))
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234107FB0(v12, v11, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_23410726C(v12, 3uLL, *((_DWORD *)a1 + 52), (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_23410753C((char *)a1 + 212, v12, 4uLL, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_2341071D8(v12, 5uLL, *((unsigned __int8 *)a1 + 232), (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234107224(v12, 6uLL, a1[117], (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234107224(v12, 7uLL, a1[118], (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_2341071D8(v12, 8uLL, *((unsigned __int8 *)a1 + 238), (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    if (*((_BYTE *)a1 + 244))
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234107224(v12, 9uLL, a1[120], (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234107224(v12, 0xAuLL, a1[121], (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
    }
    if (!*((_BYTE *)a1 + 445))
    {
LABEL_29:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234107FB0(v12, SHIDWORD(v11), (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234106D88((uint64_t)v12, (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      sub_233BF7588(a2, v13);
      v9 = 0;
      v10 = 117;
LABEL_35:
      *(_DWORD *)a3 = v9;
      a3[1] = "src/credentials/CertificationDeclaration.cpp";
      *((_DWORD *)a3 + 4) = v10;
      return;
    }
    if (*((unsigned __int8 *)a1 + 445) <= 0xAu)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234107E40(v12, 0xBuLL, 22, &v11, (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      if (*((_BYTE *)a1 + 445))
      {
        v7 = 0;
        v8 = (char *)a1 + 245;
        do
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_2341073FC(v12, 0x100uLL, v8, 0x14uLL, (uint64_t)a3);
          if (*(_DWORD *)a3)
            return;
          ++v7;
          v8 += 20;
        }
        while (v7 < *((unsigned __int8 *)a1 + 445));
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234107FB0(v12, v11, (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      goto LABEL_29;
    }
    v10 = 101;
LABEL_34:
    v9 = 47;
    goto LABEL_35;
  }
  v6 = 0;
  while (1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234107224(v12, 0x100uLL, a1[v6 + 2], (uint64_t)a3);
    if (*(_DWORD *)a3)
      break;
    if (++v6 >= (unint64_t)*((unsigned __int8 *)a1 + 204))
      goto LABEL_11;
  }
}

double sub_2341DD768@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  result = sub_234104468((uint64_t)v16);
  v7 = a1[1];
  if (v7 >= 0x317)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    v10 = 126;
    goto LABEL_16;
  }
  v15 = 0;
  sub_234104498((uint64_t)v16, *a1, v7);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234106010((uint64_t)v16, 21, 256, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410570C((uint64_t)v16, (_DWORD *)&v15 + 1, a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v16, 0, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v16, (_WORD *)a2, a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v16, 1, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v16, (_WORD *)(a2 + 2), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234106010((uint64_t)v16, 22, 2, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410570C((uint64_t)v16, &v15, a3);
  if (*(_DWORD *)a3)
    return result;
  *(_BYTE *)(a2 + 204) = 0;
  while (1)
  {
    sub_234105EE4((uint64_t)v16, 256, &v12);
    v8 = v12;
    result = *(double *)&v13;
    v18 = v13;
    v19 = v14;
    if (v12)
      break;
    v9 = *(unsigned __int8 *)(a2 + 204);
    if (v9 >= 0x64)
    {
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
      v10 = 146;
      goto LABEL_16;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a2 + 204) = v9 + 1;
    sub_2341049E0((uint64_t)v16, (_WORD *)(a2 + 2 * v9 + 4), a3);
    if (*(_DWORD *)a3)
      return result;
  }
  if (v12 != 33)
    goto LABEL_64;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410577C((uint64_t)v16, v15, a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v16, 3, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234104A50((uint64_t)v16, (_DWORD *)(a2 + 208), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234106010((uint64_t)v16, 12, 4, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410515C((uint64_t)v16, (char *)(a2 + 212), 0x14uLL, a3);
  if (*(_DWORD *)a3)
    return result;
  if (strlen((const char *)(a2 + 212)) != 19)
  {
    *(_DWORD *)a3 = 35;
    *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    v10 = 157;
    goto LABEL_16;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v16, 5, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410492C((uint64_t)v16, (_BYTE *)(a2 + 232), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v16, 6, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v16, (_WORD *)(a2 + 234), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v16, 7, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v16, (_WORD *)(a2 + 236), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v16, 8, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410492C((uint64_t)v16, (_BYTE *)(a2 + 238), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_BYTE *)(a2 + 244) = 0;
  sub_234105EE4((uint64_t)v16, 9, &v12);
  v8 = v12;
  result = *(double *)&v13;
  v18 = v13;
  v19 = v14;
  if (v12)
    goto LABEL_34;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v16, (_WORD *)(a2 + 240), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v16, 10, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v16, (_WORD *)(a2 + 242), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_BYTE *)(a2 + 244) = 1;
  sub_2341058CC((uint64_t)v16, &v12);
  v8 = v12;
  result = *(double *)&v13;
  v18 = v13;
  v19 = v14;
  if (v12)
  {
LABEL_34:
    if (v8 == 33)
    {
      if (v17 != 10)
      {
LABEL_61:
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_23410577C((uint64_t)v16, SHIDWORD(v15), a3);
        if (*(_DWORD *)a3)
          return result;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        result = sub_234105840((uint64_t)v16, a3);
        if (*(_DWORD *)a3)
          return result;
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
        v10 = 214;
LABEL_16:
        *(_DWORD *)(a3 + 16) = v10;
        return result;
      }
LABEL_54:
      *(_DWORD *)a3 = 35;
      *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
      v10 = 186;
      goto LABEL_16;
    }
    if (v8 != 43)
      goto LABEL_64;
  }
  if (v17 == 10)
    goto LABEL_54;
  if (v17 != 11)
  {
LABEL_59:
    if (v8 <= 0x2B && ((1 << v8) & 0x80200000001) != 0)
      goto LABEL_61;
LABEL_64:
    *(_DWORD *)a3 = v8;
    result = *(double *)&v18;
    *(_OWORD *)(a3 + 4) = v18;
    *(_DWORD *)(a3 + 20) = v19;
    return result;
  }
  if (sub_23410462C((uint64_t)v16) != 22)
  {
    *(_DWORD *)a3 = 43;
    *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    v10 = 190;
    goto LABEL_16;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410570C((uint64_t)v16, &v15, a3);
  if (!*(_DWORD *)a3)
  {
    *(_BYTE *)(a2 + 445) = 0;
    while (1)
    {
      sub_234106010((uint64_t)v16, 16, 256, &v12);
      v8 = v12;
      v18 = v13;
      v19 = v14;
      if (v12)
        break;
      if (sub_2341046A4((uint64_t)v16) != 20)
      {
        *(_DWORD *)a3 = 43;
        *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
        v10 = 197;
        goto LABEL_16;
      }
      v11 = *(unsigned __int8 *)(a2 + 445);
      if (v11 >= 0xA)
      {
        *(_DWORD *)a3 = 47;
        *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
        v10 = 198;
        goto LABEL_16;
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_BYTE *)(a2 + 445) = v11 + 1;
      sub_234104F48((uint64_t)v16, (char *)(a2 + 20 * v11 + 245), 0x14uLL, a3);
      if (*(_DWORD *)a3)
        return result;
    }
    if (v12 != 33)
      goto LABEL_64;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23410577C((uint64_t)v16, v15, a3);
    if (!*(_DWORD *)a3)
    {
      sub_2341058CC((uint64_t)v16, &v12);
      v8 = v12;
      v18 = v13;
      v19 = v14;
      goto LABEL_59;
    }
  }
  return result;
}

double sub_2341DDE84@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  result = sub_234104468((uint64_t)v14);
  v7 = a1[1];
  if (v7 >= 0x317)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    v9 = 224;
LABEL_37:
    *(_DWORD *)(a3 + 16) = v9;
    return result;
  }
  v13 = 0;
  sub_234104498((uint64_t)v14, *a1, v7);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234106010((uint64_t)v14, 21, 256, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410570C((uint64_t)v14, (_DWORD *)&v13 + 1, a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v14, 0, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v14, (_WORD *)a2, a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v14, 1, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v14, (_WORD *)(a2 + 2), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234106010((uint64_t)v14, 22, 2, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410570C((uint64_t)v14, &v13, a3);
  if (*(_DWORD *)a3)
    return result;
  do
  {
    sub_234106010((uint64_t)v14, 4, 256, &v10);
    v8 = v10;
    v16 = v11;
    v17 = v12;
  }
  while (!v10);
  if (v10 != 33)
  {
LABEL_56:
    *(_DWORD *)a3 = v8;
    result = *(double *)&v16;
    *(_OWORD *)(a3 + 4) = v16;
    *(_DWORD *)(a3 + 20) = v17;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410577C((uint64_t)v14, v13, a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v14, 3, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234104A50((uint64_t)v14, (_DWORD *)(a2 + 4), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234106010((uint64_t)v14, 12, 4, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410515C((uint64_t)v14, (char *)(a2 + 22), 0x14uLL, a3);
  if (*(_DWORD *)a3)
    return result;
  if (strlen((const char *)(a2 + 22)) != 19)
  {
    *(_DWORD *)a3 = 35;
    *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    v9 = 254;
    goto LABEL_37;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v14, 5, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410492C((uint64_t)v14, (_BYTE *)(a2 + 8), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v14, 6, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v14, (_WORD *)(a2 + 10), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v14, 7, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v14, (_WORD *)(a2 + 12), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v14, 8, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410492C((uint64_t)v14, (_BYTE *)(a2 + 14), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_BYTE *)(a2 + 20) = 0;
  sub_234105EE4((uint64_t)v14, 9, &v10);
  v8 = v10;
  result = *(double *)&v11;
  v16 = v11;
  v17 = v12;
  if (v10)
    goto LABEL_27;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v14, (_WORD *)(a2 + 16), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105EE4((uint64_t)v14, 10, (_QWORD *)a3);
  if (*(_DWORD *)a3)
    return result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341049E0((uint64_t)v14, (_WORD *)(a2 + 18), a3);
  if (*(_DWORD *)a3)
    return result;
  *(_BYTE *)(a2 + 20) = 1;
  sub_2341058CC((uint64_t)v14, &v10);
  v8 = v10;
  result = *(double *)&v11;
  v16 = v11;
  v17 = v12;
  if (v10)
  {
LABEL_27:
    if (v8 == 33)
    {
      if (v15 != 10)
        goto LABEL_53;
      goto LABEL_46;
    }
    if (v8 != 43)
      goto LABEL_56;
  }
  if (v15 == 10)
  {
LABEL_46:
    *(_DWORD *)a3 = 35;
    *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    v9 = 283;
    goto LABEL_37;
  }
  if (v15 != 11)
    goto LABEL_51;
  if (sub_23410462C((uint64_t)v14) != 22)
  {
    *(_DWORD *)a3 = 43;
    *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
    v9 = 287;
    goto LABEL_37;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410570C((uint64_t)v14, &v13, a3);
  if (*(_DWORD *)a3)
    return result;
  while (1)
  {
    sub_234106010((uint64_t)v14, 16, 256, &v10);
    v8 = v10;
    v16 = v11;
    v17 = v12;
    if (v10)
      break;
    if (sub_2341046A4((uint64_t)v14) != 20)
    {
      *(_DWORD *)a3 = 43;
      *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
      v9 = 293;
      goto LABEL_37;
    }
  }
  if (v10 != 33)
    goto LABEL_56;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410577C((uint64_t)v14, v13, a3);
  if (*(_DWORD *)a3)
    return result;
  *(_BYTE *)(a2 + 21) = 1;
  sub_2341058CC((uint64_t)v14, &v10);
  v8 = v10;
  v16 = v11;
  v17 = v12;
LABEL_51:
  if (v8 > 0x2B || ((1 << v8) & 0x80200000001) == 0)
    goto LABEL_56;
LABEL_53:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23410577C((uint64_t)v14, SHIDWORD(v13), a3);
  if (!*(_DWORD *)a3)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = sub_234105840((uint64_t)v14, a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
      v9 = 311;
      goto LABEL_37;
    }
  }
  return result;
}

BOOL sub_2341DE4E4(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL8 result;
  BOOL v6;
  unsigned __int16 v7;
  _QWORD v8[3];

  sub_2341DE554(a1, a2, 2, v8);
  if (LODWORD(v8[0]))
    return 0;
  v7 = 0;
  do
  {
    sub_2341DE654(a1, &v7, v8);
    result = LODWORD(v8[0]) == 0;
    if (LODWORD(v8[0]))
      v6 = 1;
    else
      v6 = v7 == a3;
  }
  while (!v6);
  return result;
}

void sub_2341DE554(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD v7[6];
  uint64_t v8;

  sub_234104498(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_234106010(a1, 21, 256, a4);
  if (!*(_DWORD *)a4)
  {
    v8 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    sub_23410570C(a1, (_DWORD *)&v8 + 1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      while (1)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        sub_2341058CC(a1, a4);
        if (*(_DWORD *)a4)
          break;
        sub_234105F5C(a1, 22, a3, (uint64_t)v7);
        if (!v7[0])
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          sub_23410570C(a1, &v8, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            *(_DWORD *)a4 = 0;
            a4[1] = "src/credentials/CertificationDeclaration.cpp";
            *((_DWORD *)a4 + 4) = 346;
          }
          return;
        }
      }
    }
  }
}

void sub_2341DE654(uint64_t a1@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a1, 256, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_2341049E0(a1, a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/credentials/CertificationDeclaration.cpp";
      *((_DWORD *)a3 + 4) = 353;
    }
  }
}

uint64_t sub_2341DE6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  __int128 __s2;
  _QWORD v8[3];

  sub_2341DE554(a1, a2, 11, v8);
  if (!LODWORD(v8[0]))
  {
    __s2 = 0uLL;
    while (1)
    {
      sub_2341DE758(a1, &__s2, v8);
      if (LODWORD(v8[0]))
        break;
      v6 = *(_QWORD *)(a3 + 8);
      if (v6 == *((_QWORD *)&__s2 + 1) && (!v6 || !memcmp(*(const void **)a3, (const void *)__s2, v6)))
        return 1;
    }
  }
  return 0;
}

void sub_2341DE758(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a1, 256, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234104B68(a1, a2, a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/credentials/CertificationDeclaration.cpp";
      *((_DWORD *)a3 + 4) = 375;
    }
  }
}

_QWORD *sub_2341DE7D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  _QWORD *result;
  int v12;
  int v13;
  unint64_t v14;
  _QWORD v15[14];
  int v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)a4[1] >= 0xFFFFFFFF)
    v10 = 0xFFFFFFFFLL;
  else
    v10 = a4[1];
  sub_23413824C((uint64_t)v15, *a4, v10);
  result = (_QWORD *)sub_234138CD8((uint64_t)v15, 0, 0x10u, (uint64_t)&v16);
  v12 = v16;
  v20 = v17;
  v21 = v18;
  if (v16)
    goto LABEL_5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  result = sub_2341385F8(v15, &unk_2342EE022, 9u, (_QWORD *)a5);
  if (!*(_DWORD *)a5)
  {
    result = (_QWORD *)sub_234138CD8((uint64_t)v15, 128, 0, (uint64_t)&v16);
    v12 = v16;
    v20 = v17;
    v21 = v18;
    if (v16)
      goto LABEL_5;
    result = (_QWORD *)sub_234138CD8((uint64_t)v15, 0, 0x10u, (uint64_t)&v16);
    v12 = v16;
    v20 = v17;
    v21 = v18;
    if (v16)
      goto LABEL_5;
    result = sub_23413828C(v15, 3uLL, (uint64_t)&v16);
    v12 = v16;
    v20 = v17;
    v21 = v18;
    if (v16)
      goto LABEL_5;
    result = (_QWORD *)sub_234138CD8((uint64_t)v15, 0, 0x11u, (uint64_t)&v16);
    v12 = v16;
    v20 = v17;
    v21 = v18;
    if (v16)
      goto LABEL_5;
    result = (_QWORD *)sub_234138CD8((uint64_t)v15, 0, 0x10u, (uint64_t)&v16);
    v12 = v16;
    v20 = v17;
    v21 = v18;
    if (v16)
      goto LABEL_5;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    result = sub_2341385F8(v15, &unk_2342EE02B, 9u, (_QWORD *)a5);
    if (*(_DWORD *)a5)
      return result;
    result = sub_234138CE4(&v16, v15);
    v12 = v16;
    v20 = v17;
    v21 = v18;
    if (v16 || (result = sub_234138CE4(&v16, v15), v12 = v16, v20 = v17, v21 = v18, v16))
    {
LABEL_5:
      *(_DWORD *)a5 = v12;
      *(_OWORD *)(a5 + 4) = v20;
      *(_DWORD *)(a5 + 20) = v21;
      return result;
    }
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    result = sub_2341DEB34((uint64_t)a1, v15, a5);
    if (!*(_DWORD *)a5)
    {
      v19 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)a5 = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)a3 + 24))(a3, *a1, a1[1], &v16);
      if (*(_DWORD *)a5)
      {
        return (_QWORD *)sub_23413A7A4(&v16, 64);
      }
      else
      {
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        sub_2341DEC98(a2, (uint64_t)&v16, v15, a5);
        v13 = *(_DWORD *)a5;
        result = (_QWORD *)sub_23413A7A4(&v16, 64);
        if (!v13)
        {
          result = sub_234138CE4(&v16, v15);
          v12 = v16;
          v20 = v17;
          v21 = v18;
          if (!v16)
          {
            result = sub_234138CE4(&v16, v15);
            v12 = v16;
            v20 = v17;
            v21 = v18;
            if (!v16)
            {
              result = sub_234138CE4(&v16, v15);
              v12 = v16;
              v20 = v17;
              v21 = v18;
              if (!v16)
              {
                v14 = sub_234138270(v15);
                result = (_QWORD *)sub_233BF7588((uint64_t)a4, v14);
                v12 = 0;
              }
            }
          }
          goto LABEL_5;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_2341DEB34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  int v7;
  int v8;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = sub_2341385F8(a2, &unk_2342EE034, 9u, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    result = (_QWORD *)sub_234138CD8((uint64_t)a2, 128, 0, (uint64_t)&v8);
    v7 = v8;
    v11 = v9;
    v12 = v10;
    if (!v8)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      result = sub_234138628(a2, *(const void **)a1, *(unsigned __int16 *)(a1 + 8), (_QWORD *)a3);
      if (*(_DWORD *)a3)
        return result;
      result = sub_234138CE4(&v8, a2);
      v7 = v8;
      v11 = v9;
      v12 = v10;
      if (!v8)
      {
        result = sub_234138CE4(&v8, a2);
        v7 = v8;
        v11 = v9;
        v12 = v10;
      }
    }
LABEL_2:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a3 + 4) = v11;
    *(_DWORD *)(a3 + 20) = v12;
  }
  return result;
}

_QWORD *sub_2341DEC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)sub_234138CD8((uint64_t)a3, 0, 0x11u, (uint64_t)&v11);
  v9 = v11;
  v14 = v12;
  v15 = v13;
  if (v11)
    goto LABEL_4;
  result = (_QWORD *)sub_234138CD8((uint64_t)a3, 0, 0x10u, (uint64_t)&v11);
  v9 = v11;
  v14 = v12;
  v15 = v13;
  if (v11)
    goto LABEL_4;
  result = sub_23413828C(a3, 3uLL, (uint64_t)&v11);
  v9 = v11;
  v14 = v12;
  v15 = v13;
  if (v11)
    goto LABEL_4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = sub_234138640(a3, 128, 0, *(const void **)a1, *(unsigned __int16 *)(a1 + 8), (_QWORD *)a4);
  if (!*(_DWORD *)a4)
  {
    result = (_QWORD *)sub_234138CD8((uint64_t)a3, 0, 0x10u, (uint64_t)&v11);
    v9 = v11;
    v14 = v12;
    v15 = v13;
    if (v11)
      goto LABEL_4;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    result = sub_2341385F8(a3, &unk_2342EE02B, 9u, (_QWORD *)a4);
    if (*(_DWORD *)a4)
      return result;
    result = sub_234138CE4(&v11, a3);
    v9 = v11;
    v14 = v12;
    v15 = v13;
    if (v11)
      goto LABEL_4;
    result = (_QWORD *)sub_234138CD8((uint64_t)a3, 0, 0x10u, (uint64_t)&v11);
    v9 = v11;
    v14 = v12;
    v15 = v13;
    if (v11)
      goto LABEL_4;
    result = sub_2341370A0(a3, 513, (uint64_t)&v11);
    v9 = v11;
    v14 = v12;
    v15 = v13;
    if (v11)
      goto LABEL_4;
    result = sub_234138CE4(&v11, a3);
    v9 = v11;
    v14 = v12;
    v15 = v13;
    if (v11 || (result = sub_234138E44(a3, 0, 4u, 0, &v11), v9 = v11, v14 = v12, v15 = v13, v11))
    {
LABEL_4:
      *(_DWORD *)a4 = v9;
      *(_OWORD *)(a4 + 4) = v14;
      *(_DWORD *)(a4 + 20) = v15;
      return result;
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_2341DD304(&v10, a2);
    result = sub_2341D7D3C(v10, a3, a4);
    if (!*(_DWORD *)a4)
    {
      result = sub_234138CE4(&v11, a3);
      v9 = v11;
      v14 = v12;
      v15 = v13;
      if (!v11)
      {
        result = sub_234138CE4(&v11, a3);
        v9 = v11;
        v14 = v12;
        v15 = v13;
        if (!v11)
        {
          result = sub_234138CE4(&v11, a3);
          v9 = v11;
          v14 = v12;
          v15 = v13;
        }
      }
      goto LABEL_4;
    }
  }
  return result;
}

void sub_2341DEF74(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD v7[11];

  v7[10] = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_250505A50;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  sub_23413C364(a2, (uint64_t)v7, (uint64_t)a4);
  if (!a4->n128_u32[0])
    sub_2341DF01C(a1, (uint64_t)v7, a3, a4);
}

_QWORD *sub_2341DF01C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)a1[1] >= 0xFFFFFFFF)
    v7 = 0xFFFFFFFFLL;
  else
    v7 = a1[1];
  sub_2341370F4((uint64_t)&v18, *a1, v7);
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  if ((_BYTE)v18 || BYTE1(v18) != 16)
  {
    LODWORD(v9) = 635;
    LODWORD(v10) = 773;
    v11 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_20;
  }
  result = (_QWORD *)sub_234137338((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  LODWORD(v9) = 637;
  LODWORD(v10) = 773;
  v11 = "src/credentials/CertificationDeclaration.cpp";
  if ((_BYTE)v18 || BYTE1(v18) != 6)
    goto LABEL_20;
  result = sub_233BF7114(&v21, v19, v20);
  if (v22 != (const char *)9
    || (*(_QWORD *)v21 == 0x7010DF78648862ALL ? (v12 = *(_BYTE *)(v21 + 8) == 2) : (v12 = 0), !v12))
  {
    a4->n128_u32[0] = 774;
    a4->n128_u64[1] = (unint64_t)"src/credentials/CertificationDeclaration.cpp";
    v13 = 643;
LABEL_18:
    a4[1].n128_u32[0] = v13;
    return result;
  }
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  LODWORD(v9) = 646;
  LODWORD(v10) = 773;
  if (v18 != 128 || BYTE1(v18))
    goto LABEL_20;
  result = (_QWORD *)sub_234137338((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  LODWORD(v9) = 648;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 16)
    goto LABEL_20;
  result = (_QWORD *)sub_234137338((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  v17 = 0;
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  LODWORD(v9) = 652;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 2)
    goto LABEL_20;
  result = sub_234137574(&v18, &v17, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  if (v17 != 3)
  {
    LODWORD(v9) = 655;
    LODWORD(v10) = 774;
    goto LABEL_20;
  }
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  LODWORD(v9) = 658;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 17)
    goto LABEL_20;
  result = (_QWORD *)sub_234137338((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  LODWORD(v9) = 660;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 16)
    goto LABEL_20;
  result = (_QWORD *)sub_234137338((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  LODWORD(v9) = 662;
  LODWORD(v10) = 773;
  if ((_BYTE)v18 || BYTE1(v18) != 6)
    goto LABEL_20;
  result = sub_233BF7114(&v21, v19, v20);
  if (v22 != (const char *)9
    || (*(_QWORD *)v21 == 0x204036501488660 ? (v14 = *(_BYTE *)(v21 + 8) == 1) : (v14 = 0), !v14))
  {
    a4->n128_u32[0] = 774;
    a4->n128_u64[1] = (unint64_t)"src/credentials/CertificationDeclaration.cpp";
    v13 = 665;
    goto LABEL_18;
  }
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  v9 = v23;
  if (!(_DWORD)v21)
  {
    LODWORD(v10) = 773;
    v15 = 667;
    goto LABEL_64;
  }
  if ((_DWORD)v21 != 768)
    goto LABEL_75;
  result = sub_234137434(&v21, &v18);
  v10 = v21;
  if ((_DWORD)v21)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
  v10 = v21;
  v9 = v23;
  if (!(_DWORD)v21)
  {
    LODWORD(v10) = 773;
    v15 = 669;
    goto LABEL_64;
  }
  if ((_DWORD)v21 != 768)
    goto LABEL_75;
  result = sub_234137434(&v21, &v18);
  v10 = v21;
  if ((_DWORD)v21)
  {
LABEL_5:
    v11 = v22;
    v9 = v23;
LABEL_20:
    a4->n128_u64[0] = v10;
    a4->n128_u64[1] = (unint64_t)v11;
    a4[1].n128_u64[0] = v9;
    return result;
  }
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  result = sub_2341DF61C((unsigned __int8 *)&v18, (_OWORD *)a3, (uint64_t)a4);
  if (!a4->n128_u32[0])
  {
    v24 = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    sub_2341DF8A8((unsigned __int8 *)&v18, &v16, (uint64_t)&v21, a4);
    if (a4->n128_u32[0])
      return (_QWORD *)sub_23413A7A4(&v21, 64);
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    sub_23413A038(*(char **)a3, *(_QWORD *)(a3 + 8), a2, (uint64_t)&v21, a4);
    if (a4->n128_u32[0])
      return (_QWORD *)sub_23413A7A4(&v21, 64);
    sub_23413A7A4(&v21, 64);
    result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
    v10 = v21;
    v9 = v23;
    if (!(_DWORD)v21)
    {
      LODWORD(v10) = 773;
      v15 = 682;
      goto LABEL_64;
    }
    if ((_DWORD)v21 != 768)
      goto LABEL_75;
    result = sub_234137434(&v21, &v18);
    v10 = v21;
    if (!(_DWORD)v21)
    {
      result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
      v10 = v21;
      v9 = v23;
      if (!(_DWORD)v21)
      {
        LODWORD(v10) = 773;
        v15 = 684;
        goto LABEL_64;
      }
      if ((_DWORD)v21 != 768)
        goto LABEL_75;
      result = sub_234137434(&v21, &v18);
      v10 = v21;
      if (!(_DWORD)v21)
      {
        result = (_QWORD *)sub_23413712C((uint64_t)&v18, (uint64_t)&v21);
        v10 = v21;
        v9 = v23;
        if ((_DWORD)v21)
        {
          if ((_DWORD)v21 == 768)
          {
            result = sub_234137434(&v21, &v18);
            v10 = v21;
            goto LABEL_5;
          }
LABEL_75:
          v11 = v22;
          goto LABEL_20;
        }
        LODWORD(v10) = 773;
        v15 = 686;
LABEL_64:
        LODWORD(v9) = v15;
        goto LABEL_20;
      }
    }
    goto LABEL_5;
  }
  return result;
}

