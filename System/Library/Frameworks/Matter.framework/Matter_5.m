uint64_t sub_234103104(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  word_256157918 = -1;
  dword_256157920 = -1;
  qword_256159298 = 0;
  word_256157928 = -1;
  dword_256157930 = -1;
  v1 = qword_2561592A0;
  if (qword_2561592A0)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v1 == result)
      {
        v4 = (uint64_t *)(v2 + 16);
        if (!v2)
          v4 = &qword_2561592A0;
        *v4 = v3;
        *(_QWORD *)(v1 + 16) = 0;
      }
      else
      {
        v2 = v1;
      }
      v1 = v3;
    }
    while (v3);
  }
  return result;
}

_BYTE *sub_234103180(_BYTE *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;

  v1 = qword_2561592A0;
  if (qword_2561592A0)
  {
    v2 = 0;
    v3 = *(unsigned __int16 *)result;
    do
    {
      while (1)
      {
        v4 = v1;
        result = (_BYTE *)(v1 + 8);
        v5 = *(unsigned __int8 *)(v1 + 8);
        v1 = *(_QWORD *)(v1 + 16);
        if (v5)
        {
          result = sub_233C05D98(result);
          if (*(unsigned __int16 *)result == v3)
            break;
        }
        v2 = v4;
        if (!v1)
          return result;
      }
      v6 = (uint64_t *)(v2 + 16);
      if (!v2)
        v6 = &qword_2561592A0;
      *v6 = v1;
      *(_QWORD *)(v4 + 16) = 0;
    }
    while (v1);
  }
  return result;
}

BOOL sub_23410320C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  NSObject *v5;
  uint8_t v6[16];

  word_256157918 = -1;
  dword_256157920 = -1;
  qword_256159298 = 0;
  word_256157928 = -1;
  dword_256157930 = -1;
  v2 = qword_2561592A0;
  if (qword_2561592A0)
  {
    while (!sub_234103314(v2, a1))
    {
      v2 = *(_QWORD *)(v2 + 16);
      if (!v2)
      {
        v3 = qword_2561592A0;
        goto LABEL_6;
      }
    }
    v5 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "Duplicate attribute override registration failed", v6, 2u);
    }
    result = sub_234114844(1u);
    if (result)
    {
      sub_2341147D0(0x23u, 1);
      return 0;
    }
  }
  else
  {
    v3 = 0;
LABEL_6:
    *(_QWORD *)(a1 + 16) = v3;
    qword_2561592A0 = a1;
    return 1;
  }
  return result;
}

BOOL sub_234103314(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  int v3;
  _BYTE *v4;
  int v5;

  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v2 = (_BYTE *)(a1 + 8);
  if (!v3)
    return 1;
  v4 = (_BYTE *)(a2 + 8);
  if (!*(_BYTE *)(a2 + 8))
    return 1;
  v5 = *(unsigned __int16 *)sub_233C05D98(v2);
  return v5 == *(unsigned __int16 *)sub_233C05D98(v4);
}

uint64_t sub_23410337C(int a1, int a2)
{
  uint64_t v5;

  if ((unsigned __int16)word_256157928 == a1 && dword_256157930 == a2)
    return 0;
  v5 = qword_256159298;
  if ((unsigned __int16)word_256157918 != a1 || dword_256157920 != a2 || qword_256159298 == 0)
  {
    v5 = qword_2561592A0;
    if (qword_2561592A0)
    {
      while (*(_BYTE *)(v5 + 8) && *(unsigned __int16 *)sub_233C05D98((_BYTE *)(v5 + 8)) != a1
           || *(_DWORD *)(v5 + 12) != a2)
      {
        v5 = *(_QWORD *)(v5 + 16);
        if (!v5)
          goto LABEL_18;
      }
      word_256157918 = a1;
      dword_256157920 = a2;
      qword_256159298 = v5;
    }
    else
    {
LABEL_18:
      v5 = 0;
      word_256157928 = a1;
      dword_256157930 = a2;
    }
  }
  return v5;
}

__n128 sub_23410345C@<Q0>(__n128 *a1@<X1>, unsigned __int16 *a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __n128 result;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v8 = sub_23411BD24((uint64_t)a1);
  result = *a1;
  *(__n128 *)a4 = *a1;
  *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
  if (!*(_DWORD *)a4)
  {
    v10 = (__n128 *)v8;
    v11 = sub_23411BCD0(v8);
    result = *v10;
    *(__n128 *)a4 = *v10;
    *(_QWORD *)(a4 + 16) = v10[1].n128_u64[0];
    if (!*(_DWORD *)a4)
    {
      v12 = (__n128 *)v11;
      sub_23411AC84(v11, a3);
      v13 = sub_23411AC30((uint64_t)v12);
      result = *v12;
      *(__n128 *)a4 = *v12;
      *(_QWORD *)(a4 + 16) = v12[1].n128_u64[0];
      if (!*(_DWORD *)a4)
      {
        v14 = v13;
        v15 = sub_23411B488(v13, *a2);
        v16 = sub_23411B4DC(v15, *((_DWORD *)a2 + 1));
        sub_23411B530(v16, *((_DWORD *)a2 + 2));
        if (*((_BYTE *)a2 + 14) == 4)
        {
          v17 = 0;
          sub_23411B584(v14, (unsigned __int16 *)&v17);
        }
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        result.n128_u64[0] = sub_23411ACD8(v14, a4).n128_u64[0];
        if (!*(_DWORD *)a4)
        {
          result = *v12;
          *(__n128 *)a4 = *v12;
          *(_QWORD *)(a4 + 16) = v12[1].n128_u64[0];
        }
      }
    }
  }
  return result;
}

double sub_23410356C@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  double result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_QWORD *)&result = sub_23411ACD8(a1 + 200, (uint64_t)a2).n128_u64[0];
  if (!*(_DWORD *)a2)
    *(_QWORD *)&result = sub_23411ACD8(a1 + 40, (uint64_t)a2).n128_u64[0];
  return result;
}

void sub_2341035B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  char *v5;
  char *v6;
  int v7;

  if (*(__int16 *)(a1 + 72) != -1)
    sub_234258A30(a1);
  v4 = *(unsigned __int16 *)(a1 + 74) == 0xFFFF;
  *(_BYTE *)(a1 + 70) = v4;
  if (!v4)
  {
    *(_BYTE *)(a1 + 54) = 4;
LABEL_4:
    *(_WORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 76) = 1;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/app/AttributeValueEncoder.cpp";
    *(_DWORD *)(a2 + 16) = 77;
    return;
  }
  *(_BYTE *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 54) = 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_23410345C(*(__n128 **)a1, (unsigned __int16 *)(a1 + 40), *(_DWORD *)(a1 + 64), a2);
  if (!*(_DWORD *)a2)
  {
    v5 = *(char **)(*(_QWORD *)a1 + 224);
    v7 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v6 = sub_234107E40(v5, 2uLL, 22, &v7, a2);
    if (!*(_DWORD *)a2)
    {
      if (v7 != 21)
        sub_234258994((uint64_t)v6);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_234106E50(*(_QWORD *)(*(_QWORD *)a1 + 24), 3u, a2);
      if (!*(_DWORD *)a2)
      {
        *(_WORD *)(a1 + 74) = 0;
        goto LABEL_4;
      }
    }
  }
}

void sub_2341036D8(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_BYTE *)(a1 + 70))
  {
    v2 = *(_QWORD *)(*(_QWORD *)a1 + 224);
    if (*(_WORD *)(v2 + 60) != 21169 || (v3 = *(_DWORD *)(v2 + 52), v3 <= 2))
      sub_234258ACC(v2);
    *(_DWORD *)(v2 + 52) = v3 - 3;
    *(_DWORD *)(v2 + 40) += 3;
    v4 = sub_234107FB0((char *)v2, 21, (uint64_t)v6);
    if (LODWORD(v6[0]))
      sub_234258C04((uint64_t)v4);
    sub_23410356C(*(_QWORD *)a1, v6);
    if (LODWORD(v6[0]))
      sub_234258B68(v5);
    if (!*(_BYTE *)(a1 + 71))
      *(_BYTE *)(a1 + 76) = 0;
  }
}

BOOL sub_234103780(int a1)
{
  return (a1 - 65) < 2;
}

BOOL sub_234103790(int a1)
{
  return (a1 - 67) < 2;
}

uint64_t sub_2341037A0(unsigned __int8 *a1)
{
  if (*a1 == 255)
    return 0;
  else
    return *a1;
}

uint64_t sub_2341037B0(unsigned __int16 *a1)
{
  if (*a1 == 0xFFFF)
    return 0;
  else
    return *a1;
}

unsigned __int8 *sub_2341037C4(unsigned __int8 *result, unsigned __int8 *a2, unint64_t a3)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 v5;

  v3 = result;
  if (a2)
  {
    v4 = *a2;
    if (v4 == 255)
    {
      v5 = -1;
    }
    else
    {
      if (v4 <= a3)
        v5 = *a2;
      else
        v5 = a3;
      result = (unsigned __int8 *)memmove(result + 1, a2 + 1, v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *v3 = v5;
  return result;
}

unsigned __int16 *sub_23410381C(unsigned __int16 *result, unsigned __int16 *a2, unint64_t a3)
{
  unsigned __int16 *v3;
  const void *v4;
  unint64_t v5;
  int v6;
  unsigned __int16 v7;

  v3 = result;
  if (a2)
  {
    if (*(unsigned __int8 *)a2 == 255 && *((unsigned __int8 *)a2 + 1) == 255)
    {
      *result = -1;
    }
    else
    {
      v6 = *a2;
      v4 = a2 + 1;
      LODWORD(v5) = v6;
      if (v6 == 0xFFFF)
        v5 = 0;
      else
        v5 = v5;
      if (v5 <= a3)
        v7 = v5;
      else
        v7 = a3;
      result = (unsigned __int16 *)memmove(result + 1, v4, v7);
      *v3 = v7;
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

void *sub_234103890(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 1;
  return sub_234104068((void **)(a1 + 16), 0x10uLL);
}

void sub_2341038A8(uint64_t a1)
{
  void *v2;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    j__free(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void sub_2341038DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  BOOL v18;
  void *v19;

  *(_OWORD *)a4 = xmmword_250503120;
  *(_QWORD *)(a4 + 16) = 81;
  v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 1)
  {
    v9 = *(unsigned int *)(a1 + 8);
    v10 = *(_DWORD *)(a2 + 8);
    if (v10 >= 16 - (int)v9)
      v11 = (16 - v9);
    else
      v11 = v10;
    memcpy((void *)(*(_QWORD *)(a1 + 16) + v9), *(const void **)a2, v11);
    *(_DWORD *)(a1 + 8) += v11;
    *(_QWORD *)a2 = sub_234103FC8((_QWORD *)a2, v11);
    *(_QWORD *)(a2 + 8) = v12;
    sub_234103A7C(a1, a4);
    v8 = *(_DWORD *)a1;
  }
  if (v8 == 2)
  {
    v13 = *(unsigned int *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 4) - v13;
    v15 = *(_DWORD *)(a2 + 8);
    if (v15 >= v14)
      v16 = v14;
    else
      v16 = v15;
    memcpy((void *)(*(_QWORD *)(a1 + 16) + v13), *(const void **)a2, v16);
    *(_DWORD *)(a1 + 8) += v16;
    *(_QWORD *)a2 = sub_234103FC8((_QWORD *)a2, v16);
    *(_QWORD *)(a2 + 8) = v17;
    sub_234103BD4(a1, a3, a4);
  }
  if (*(_DWORD *)a4)
    v18 = *(_DWORD *)a4 == 25;
  else
    v18 = 1;
  if (!v18)
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = 0;
    v19 = *(void **)(a1 + 16);
    if (v19)
    {
      j__free(v19);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

uint64_t sub_234103A14(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5;
  size_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= a3)
    v6 = a3;
  else
    v6 = v5;
  memcpy((void *)(*(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 8)), *(const void **)a2, v6);
  *(_DWORD *)(a1 + 8) += v6;
  result = sub_234103FC8((_QWORD *)a2, v6);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v8;
  return result;
}

uint64_t sub_234103A7C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;
  void **v6;
  size_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(unsigned int *)(result + 8);
  if (v3 <= 0xF)
  {
    *(_DWORD *)a2 = 25;
    *(_QWORD *)(a2 + 8) = "src/lib/core/OTAImageHeader.cpp";
    v4 = 113;
LABEL_15:
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  v5 = (_DWORD *)result;
  v6 = (void **)(result + 16);
  v11[0] = *(_QWORD *)(result + 16);
  v11[1] = v11[0];
  v12 = v3;
  LODWORD(v13) = 0;
  *((_QWORD *)&v13 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v14) = 330;
  if (!v11[0])
    v12 = 0;
  v10 = 0;
  v9 = 0;
  sub_234114F0C((uint64_t)v11, &v10);
  sub_234114F78((uint64_t)v11, &v9);
  result = sub_234114F0C((uint64_t)v11, v5 + 1);
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v14;
  if (!*(_DWORD *)a2)
  {
    if (v10 == 468644126)
    {
      v7 = v5[1];
      if (v7 > 0x400)
      {
        v4 = 121;
LABEL_13:
        v8 = 11;
        goto LABEL_14;
      }
      result = (uint64_t)sub_234104068(v6, v7);
      if (!*v6)
      {
        v4 = 122;
        goto LABEL_13;
      }
      v8 = 0;
      *v5 = 2;
      v5[2] = 0;
      v4 = 127;
    }
    else
    {
      v4 = 119;
      v8 = 218;
    }
LABEL_14:
    *(_DWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = "src/lib/core/OTAImageHeader.cpp";
    goto LABEL_15;
  }
  return result;
}

void sub_234103BD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v7;
  uint64_t v8;
  int v9;
  _BYTE v10[16];
  uint64_t v11;

  if (*(_DWORD *)(a1 + 8) < *(_DWORD *)(a1 + 4))
  {
    *(_DWORD *)a3 = 25;
    *(_QWORD *)(a3 + 8) = "src/lib/core/OTAImageHeader.cpp";
    v4 = 132;
LABEL_3:
    *(_DWORD *)(a3 + 16) = v4;
    return;
  }
  sub_234104468((uint64_t)v10);
  sub_234104498((uint64_t)v10, *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 8));
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234106010((uint64_t)v10, 21, 256, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    v9 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    sub_23410570C((uint64_t)v10, &v9, a3);
    if (!*(_DWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_234105EE4((uint64_t)v10, 0, (_QWORD *)a3);
      if (!*(_DWORD *)a3)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_2341049E0((uint64_t)v10, (_WORD *)a2, a3);
        if (!*(_DWORD *)a3)
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          sub_234105EE4((uint64_t)v10, 1, (_QWORD *)a3);
          if (!*(_DWORD *)a3)
          {
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            sub_2341049E0((uint64_t)v10, (_WORD *)(a2 + 2), a3);
            if (!*(_DWORD *)a3)
            {
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              *(_QWORD *)(a3 + 16) = 0;
              sub_234105EE4((uint64_t)v10, 2, (_QWORD *)a3);
              if (!*(_DWORD *)a3)
              {
                *(_QWORD *)a3 = 0;
                *(_QWORD *)(a3 + 8) = 0;
                *(_QWORD *)(a3 + 16) = 0;
                sub_234104A50((uint64_t)v10, (_DWORD *)(a2 + 4), a3);
                if (!*(_DWORD *)a3)
                {
                  *(_QWORD *)a3 = 0;
                  *(_QWORD *)(a3 + 8) = 0;
                  *(_QWORD *)(a3 + 16) = 0;
                  sub_234105EE4((uint64_t)v10, 3, (_QWORD *)a3);
                  if (!*(_DWORD *)a3)
                  {
                    *(_QWORD *)a3 = 0;
                    *(_QWORD *)(a3 + 8) = 0;
                    *(_QWORD *)(a3 + 16) = 0;
                    sub_234104C8C((uint64_t)v10, (_OWORD *)(a2 + 8), (_QWORD *)a3);
                    if (!*(_DWORD *)a3)
                    {
                      if (*(_QWORD *)(a2 + 16) > 0x40uLL)
                      {
                        v4 = 149;
LABEL_17:
                        v7 = 30;
                        goto LABEL_18;
                      }
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      sub_234105EE4((uint64_t)v10, 4, (_QWORD *)a3);
                      if (*(_DWORD *)a3)
                        return;
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      sub_23410499C((uint64_t)v10, (_QWORD *)(a2 + 24), a3);
                      if (*(_DWORD *)a3)
                        return;
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      sub_2341058CC((uint64_t)v10, (_QWORD *)a3);
                      if (*(_DWORD *)a3)
                        return;
                      v8 = v11;
                      if (v11 == 5)
                      {
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        *(_DWORD *)(a2 + 36) = 0;
                        *(_BYTE *)(a2 + 32) = 1;
                        sub_234104A50((uint64_t)v10, (_DWORD *)(a2 + 36), a3);
                        if (*(_DWORD *)a3)
                          return;
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        sub_2341058CC((uint64_t)v10, (_QWORD *)a3);
                        if (*(_DWORD *)a3)
                          return;
                        v8 = v11;
                      }
                      if (v8 == 6)
                      {
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        *(_DWORD *)(a2 + 44) = 0;
                        *(_BYTE *)(a2 + 40) = 1;
                        sub_234104A50((uint64_t)v10, (_DWORD *)(a2 + 44), a3);
                        if (*(_DWORD *)a3)
                          return;
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        sub_2341058CC((uint64_t)v10, (_QWORD *)a3);
                        if (*(_DWORD *)a3)
                          return;
                        v8 = v11;
                      }
                      if (v8 == 7)
                      {
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        sub_234104C8C((uint64_t)v10, (_OWORD *)(a2 + 48), (_QWORD *)a3);
                        if (*(_DWORD *)a3)
                          return;
                        if (*(_QWORD *)(a2 + 56) > 0x100uLL)
                        {
                          v4 = 169;
                          goto LABEL_17;
                        }
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        sub_2341058CC((uint64_t)v10, (_QWORD *)a3);
                        if (*(_DWORD *)a3)
                          return;
                      }
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      sub_234105E54((uint64_t)v10, 8, a3);
                      if (*(_DWORD *)a3)
                        return;
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      sub_234104004((uint64_t)v10, (_BYTE *)(a2 + 64), (_QWORD *)a3);
                      if (*(_DWORD *)a3)
                        return;
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      sub_234105EE4((uint64_t)v10, 9, (_QWORD *)a3);
                      if (*(_DWORD *)a3)
                        return;
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      sub_234104B68((uint64_t)v10, (_OWORD *)(a2 + 72), (_QWORD *)a3);
                      if (*(_DWORD *)a3)
                        return;
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      sub_23410577C((uint64_t)v10, v9, a3);
                      if (*(_DWORD *)a3)
                        return;
                      v7 = 0;
                      v4 = 180;
LABEL_18:
                      *(_DWORD *)a3 = v7;
                      *(_QWORD *)(a3 + 8) = "src/lib/core/OTAImageHeader.cpp";
                      goto LABEL_3;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_234103FC8(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  if (v2 < a2)
    sub_234258CA0();
  sub_233BF7114(&v4, *a1 + a2, v2 - a2);
  return v4;
}

uint64_t sub_234104004@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  char v6;

  v6 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_23410492C(a1, &v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = 519;
  }
  return result;
}

void *sub_234104068(void **a1, size_t a2)
{
  void *v4;
  void *result;

  v4 = *a1;
  if (v4)
  {
    j__free(v4);
    *a1 = 0;
  }
  result = sub_234114774(a2);
  *a1 = result;
  return result;
}

uint64_t sub_2341040A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  *(_QWORD *)result = &off_250503148;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 48) = a4;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_2341040CC(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = &off_250503148;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 48) = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_2341040F4(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 48) = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void sub_234104110(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  double v7;
  _DWORD v8[10];
  uint64_t v9;
  int v10;
  _BYTE v11[24];

  sub_234104468((uint64_t)v8);
  sub_2341044F0((uint64_t)v8, a1, *(_DWORD *)(a1 + 56), (uint64_t)v11);
  v8[0] = *(_DWORD *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_2341058CC((uint64_t)v8, a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_2341059E0((uint64_t)v8, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      v4 = *(_DWORD *)(a1 + 56);
      v5 = v10;
      v6 = v9;
      if (!*(_QWORD *)(a1 + 24)
        || (v7 = sub_2341044F0((uint64_t)v8, a1, *(_DWORD *)(a1 + 56), (uint64_t)v11),
            v8[0] = *(_DWORD *)(a1 + 8),
            a2[1] = 0,
            a2[2] = 0,
            *a2 = 0,
            (*(void (**)(uint64_t, _QWORD, _DWORD *, double))(a1 + 24))(a1, *(_QWORD *)(a1 + 16), v8, v7),
            !*(_DWORD *)a2))
      {
        *(_DWORD *)(a1 + 56) = v4 - v5;
        *(_QWORD *)(a1 + 48) = v6;
        *(_DWORD *)a2 = 0;
        a2[1] = "src/lib/core/TLVCircularBuffer.cpp";
        *((_DWORD *)a2 + 4) = 162;
      }
    }
  }
}

uint64_t sub_23410421C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

void sub_234104228(uint64_t a1@<X0>, unint64_t *a2@<X2>, _DWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  v8 = *(_DWORD *)(a1 + 56);
  v9 = *(_DWORD *)(a1 + 40);
  if (v8 >= v9)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234104110(a1, a4);
    if (*(_DWORD *)a4)
      return;
    v8 = *(_DWORD *)(a1 + 56);
    v9 = *(_DWORD *)(a1 + 40);
  }
  v10 = *(_QWORD *)(a1 + 32) + (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 32) + (unint64_t)v8) % v9;
  *a2 = v10;
  v11 = *(_QWORD *)(a1 + 48);
  if (v10 >= v11)
    v12 = *(_DWORD *)(a1 + 40) + *(_DWORD *)(a1 + 32) - v10;
  else
    v12 = v11 - v10;
  *a3 = v12;
  *(_DWORD *)a4 = 0;
  a4[1] = "src/lib/core/TLVCircularBuffer.cpp";
  *((_DWORD *)a4 + 4) = 201;
}

uint64_t sub_2341042F0(uint64_t result, unint64_t *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;

  v3 = *(_QWORD *)(result + 32)
     + (*(_QWORD *)(result + 48) - *(_QWORD *)(result + 32) + (unint64_t)*(unsigned int *)(result + 56))
     % *(unsigned int *)(result + 40);
  *a2 = v3;
  v4 = *(_QWORD *)(result + 48);
  if (v3 >= v4)
    v5 = *(_DWORD *)(result + 40) + *(_DWORD *)(result + 32) - v3;
  else
    v5 = v4 - v3;
  *a3 = v5;
  return result;
}

uint64_t sub_234104344@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  int v6;

  *(_OWORD *)a4 = xmmword_250503188;
  *(_QWORD *)(a4 + 16) = 240;
  if (a3)
  {
    v4 = a2 + a3;
    v5 = *(_QWORD *)(result + 48);
    if (v4 <= v5)
      v6 = *(_DWORD *)(result + 40) + v4 - v5;
    else
      v6 = v4 - v5;
    *(_DWORD *)(result + 56) = v6;
  }
  return result;
}

uint64_t sub_23410438C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_234104398@<X0>(uint64_t result@<X0>, unint64_t *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;

  *(_OWORD *)a4 = xmmword_2505031A0;
  *(_QWORD *)(a4 + 16) = 288;
  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 48);
  v6 = *(unsigned int *)(result + 56);
  v7 = *(unsigned int *)(result + 40);
  v8 = *a2;
  if (*a2)
  {
    v9 = *(_QWORD *)(result + 32);
    if (v8 < v4 + v7)
    {
      v10 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    *a2 = v5;
    v9 = *(_QWORD *)(result + 32);
    if (v5 != v9 + *(unsigned int *)(result + 40))
      v9 = v5;
  }
  v11 = v4 + (v5 - v4 + v6) % v7;
  *a2 = v9;
  if (*(_DWORD *)(result + 56) && v11 <= v9)
  {
    v12 = *(_DWORD *)(result + 40) + *(_DWORD *)(result + 32) - v9;
    *a3 = v12;
    if (v11 != *a2 || v8 == 0)
      v10 = v12;
    else
      v10 = 0;
  }
  else
  {
    v10 = v11 - v9;
  }
LABEL_15:
  *a3 = v10;
  return result;
}

void sub_234104454()
{
  JUMPOUT(0x23493E704);
}

double sub_234104468(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_WORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 70) = 0;
  return result;
}

double sub_234104498(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  double result;

  if (a3 >= 0xFFFFFFFF)
    v3 = 0xFFFFFFFFLL;
  else
    v3 = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a2 + v3;
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = v3;
  *(_WORD *)(a1 + 68) = -1;
  *(_QWORD *)&result = 256;
  *(_OWORD *)(a1 + 16) = xmmword_2342D9210;
  *(_DWORD *)(a1 + 64) = -1;
  *(_BYTE *)(a1 + 70) = 0;
  *(_DWORD *)a1 = -1;
  return result;
}

double sub_2341044D8(uint64_t a1)
{
  double result;

  *(_WORD *)(a1 + 68) = -1;
  *(_QWORD *)&result = 256;
  *(_OWORD *)(a1 + 16) = xmmword_2342D9210;
  return result;
}

double sub_2341044F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;

  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = 0;
  v9 = 0;
  v8 = 0uLL;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a2 + 16))(&v8, a2, a1, a1 + 40, &v10);
  if ((_DWORD)v8)
  {
    result = *(double *)&v8;
    *(_OWORD *)a4 = v8;
    *(_QWORD *)(a4 + 16) = v9;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40) + v10;
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 60) = a3;
    *(_WORD *)(a1 + 68) = -1;
    *(_QWORD *)&result = 256;
    *(_OWORD *)(a1 + 16) = xmmword_2342D9210;
    *(_DWORD *)(a1 + 64) = -1;
    *(_BYTE *)(a1 + 70) = 0;
    *(_DWORD *)a1 = -1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a4 + 16) = 92;
  }
  return result;
}

uint64_t sub_2341045C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_WORD *)(result + 68) = *(_WORD *)(a2 + 68);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(result + 70) = *(_BYTE *)(a2 + 70);
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t sub_23410462C(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t result;

  v1 = *(unsigned __int16 *)(a1 + 68);
  v2 = v1 & 0x1F;
  if (v1 == 0xFFFF)
    v2 = -1;
  if (v2 == 24)
    return 0xFFFFFFFFLL;
  if ((v2 & 0xFE) == 0xA)
    return 10;
  result = (char)v2;
  if (v1 != 0xFFFF && (int)result < 20)
    return v2 & 0xFC;
  return result;
}

uint64_t sub_234104684(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int16 *)(a1 + 68);
  if (v1 == 0xFFFF)
    return -1;
  else
    return v1 & 0x1F;
}

uint64_t sub_2341046A4(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int16 *)(a1 + 68);
  if (v1 == 0xFFFF || (v1 & 0x1Cu) - 12 > 7)
    return 0;
  else
    return *(unsigned int *)(a1 + 24);
}

uint64_t sub_2341046D0@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  char v5;
  int v6;
  int v7;

  v3 = *(unsigned __int16 *)(result + 68);
  if (v3 == 0xFFFF)
    v4 = 255;
  else
    v4 = v3 & 0x1F;
  if (v4 == 8)
  {
    v5 = 0;
  }
  else
  {
    if (v4 != 9)
    {
      v7 = 143;
      v6 = 38;
      goto LABEL_10;
    }
    v5 = 1;
  }
  v6 = 0;
  *a2 = v5;
  v7 = 144;
LABEL_10:
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_234104734@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0uLL;
  result = sub_2341047B0(a1, &v8, (uint64_t)&v6);
  if (v8 == (char)v8)
  {
    *a2 = v8;
    *(_OWORD *)a3 = v6;
    *(_QWORD *)(a3 + 16) = v7;
  }
  else
  {
    *(_DWORD *)a3 = 143;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 153;
  }
  return result;
}

uint64_t sub_2341047B0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = *(unsigned __int16 *)(result + 68);
  if (v3 == 0xFFFF)
    v4 = 255;
  else
    v4 = v3 & 0x1F;
  switch(v4)
  {
    case 0:
      v5 = *(char *)(result + 24);
      goto LABEL_10;
    case 1:
      v5 = *(__int16 *)(result + 24);
      goto LABEL_10;
    case 2:
      v5 = *(int *)(result + 24);
      goto LABEL_10;
    case 3:
      v5 = *(_QWORD *)(result + 24);
LABEL_10:
      v7 = 0;
      *a2 = v5;
      v6 = 204;
      break;
    default:
      v6 = 201;
      v7 = 38;
      break;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_234104834@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0uLL;
  result = sub_2341047B0(a1, &v8, (uint64_t)&v6);
  if (v8 == (__int16)v8)
  {
    *a2 = v8;
    *(_OWORD *)a3 = v6;
    *(_QWORD *)(a3 + 16) = v7;
  }
  else
  {
    *(_DWORD *)a3 = 143;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 165;
  }
  return result;
}

uint64_t sub_2341048B0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0uLL;
  result = sub_2341047B0(a1, &v8, (uint64_t)&v6);
  if (v8 == (int)v8)
  {
    *a2 = v8;
    *(_OWORD *)a3 = v6;
    *(_QWORD *)(a3 + 16) = v7;
  }
  else
  {
    *(_DWORD *)a3 = 143;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 177;
  }
  return result;
}

uint64_t sub_23410492C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  if ((*(_WORD *)(result + 68) & 0x1C) != 4)
  {
    LOBYTE(v3) = 0;
    v4 = 38;
    v5 = 255;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(result + 24);
  if (v3 < 0x100)
  {
    v4 = 0;
    v5 = 257;
LABEL_5:
    *a2 = v3;
    *(_DWORD *)a3 = v4;
    *(_DWORD *)(a3 + 4) = 0;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 20) = 0;
    return result;
  }
  *(_DWORD *)a3 = 143;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = 213;
  return result;
}

uint64_t sub_23410499C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  if ((*(_WORD *)(result + 68) & 0x1C) == 4)
  {
    v3 = 0;
    *a2 = *(_QWORD *)(result + 24);
    v4 = 257;
  }
  else
  {
    v4 = 255;
    v3 = 38;
  }
  *(_DWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_2341049E0@<X0>(uint64_t result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  if ((*(_WORD *)(result + 68) & 0x1C) != 4)
  {
    LOWORD(v3) = 0;
    v4 = 38;
    v5 = 255;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(result + 24);
  if (v3 < 0x10000)
  {
    v4 = 0;
    v5 = 257;
LABEL_5:
    *a2 = v3;
    *(_DWORD *)a3 = v4;
    *(_DWORD *)(a3 + 4) = 0;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 20) = 0;
    return result;
  }
  *(_DWORD *)a3 = 143;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = 225;
  return result;
}

uint64_t sub_234104A50@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  int v5;

  if ((*(_WORD *)(result + 68) & 0x1C) != 4)
  {
    LODWORD(v3) = 0;
    LODWORD(v4) = 38;
    v5 = 255;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(result + 24);
  v4 = HIDWORD(v3);
  if (!HIDWORD(v3))
  {
    v5 = 257;
LABEL_5:
    *a2 = v3;
    *(_DWORD *)a3 = v4;
    *(_DWORD *)(a3 + 4) = 0;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 20) = 0;
    return result;
  }
  *(_DWORD *)a3 = 143;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = 237;
  return result;
}

uint64_t sub_234104ABC@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  if ((*(_WORD *)(result + 68) & 0x1F) == 0xA)
  {
    v3 = 0;
    *a2 = *(_QWORD *)(result + 24);
    v4 = 285;
  }
  else
  {
    v4 = 283;
    v3 = 38;
  }
  *(_DWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_234104B00@<X0>(uint64_t result@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  double v5;
  int v6;
  int v7;

  v3 = *(unsigned __int16 *)(result + 68);
  if (v3 == 0xFFFF)
    v4 = 255;
  else
    v4 = v3 & 0x1F;
  if (v4 == 11)
  {
    v5 = *(double *)(result + 24);
  }
  else
  {
    if (v4 != 10)
    {
      v7 = 303;
      v6 = 38;
      goto LABEL_10;
    }
    v5 = *(float *)(result + 24);
  }
  v6 = 0;
  *a2 = v5;
  v7 = 305;
LABEL_10:
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

double sub_234104B68@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  double result;
  int v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v11 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_234104C0C(a1, &v11, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    v7 = *(unsigned __int16 *)(a1 + 68);
    if (v7 == 0xFFFF || (v7 & 0x1Cu) - 12 > 7)
      v9 = 0;
    else
      v9 = *(unsigned int *)(a1 + 24);
    sub_233BF7114(&v10, v11, v9);
    result = *(double *)&v10;
    *a2 = v10;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVReader.cpp";
    *((_DWORD *)a3 + 4) = 314;
  }
  return result;
}

uint64_t sub_234104C0C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v5;
  int v6;
  uint64_t v7;

  v3 = *(unsigned __int16 *)(result + 68);
  if (v3 != 0xFFFF && (v3 & 0x1Cu) - 12 <= 7)
  {
    if (*(_DWORD *)(result + 24))
    {
      v7 = *(_QWORD *)(result + 40);
      if ((*(_DWORD *)(result + 48) - v7) < *(_DWORD *)(result + 24))
      {
        v5 = 511;
        v6 = 34;
        goto LABEL_13;
      }
      v5 = 513;
    }
    else
    {
      v7 = 0;
      v5 = 504;
    }
    v6 = 0;
    *a2 = v7;
    goto LABEL_13;
  }
  v5 = 499;
  v6 = 38;
LABEL_13:
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_234104C8C@<X0>(uint64_t result@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  int v10;
  __int128 v11;
  void *__s;

  if ((*(_WORD *)(result + 68) & 0x1C) == 0xC)
  {
    v5 = result;
    __s = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = sub_234104C0C(result, &__s, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return result;
    v6 = __s;
    if (__s)
    {
      v7 = *(_QWORD *)(v5 + 24);
      v8 = memchr(__s, 31, v7);
      v9 = (_DWORD)v8 - (_DWORD)v6;
      if (!v8)
        v9 = v7;
      result = (uint64_t)sub_233CAF22C(&v11, (uint64_t)v6, v9);
      *a2 = v11;
      v10 = 367;
    }
    else
    {
      v10 = 334;
    }
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVReader.cpp";
  }
  else
  {
    *(_DWORD *)a3 = 38;
    a3[1] = "src/lib/core/TLVReader.cpp";
    v10 = 326;
  }
  *((_DWORD *)a3 + 4) = v10;
  return result;
}

uint64_t sub_234104D6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  _BYTE *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  void *__s;

  *(_BYTE *)a2 = 0;
  if ((*(_WORD *)(result + 68) & 0x1C) == 0xC)
  {
    v5 = result;
    __s = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = sub_234104C0C(result, &__s, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return result;
    v6 = (int)__s;
    if (__s)
    {
      v7 = *(_DWORD *)(v5 + 24);
      result = (uint64_t)memchr(__s, 31, v7);
      if (result)
      {
        v8 = (_BYTE *)(result + 1);
        v9 = v7 + v6 - ((_DWORD)result + 1);
        result = (uint64_t)memchr((void *)(result + 1), 31, v9);
        if (result)
          v10 = (result - (_DWORD)v8);
        else
          v10 = v9;
        if ((_DWORD)v10)
        {
          if (v10 >= 5)
          {
            *(_DWORD *)a3 = 35;
            a3[1] = "src/lib/core/TLVReader.cpp";
            v11 = 403;
          }
          else if (*v8 == 48)
          {
            *(_DWORD *)a3 = 35;
            a3[1] = "src/lib/core/TLVReader.cpp";
            v11 = 405;
          }
          else
          {
            v14 = 808464432;
            memcpy((char *)&v14 - v10 + 4, v8, v10);
            v13 = 0;
            result = sub_2341155A8((uint64_t)&v14, 4uLL, &v13);
            if (result == 2)
            {
              v12 = 0;
              *(_BYTE *)a2 = 1;
              *(_WORD *)(a2 + 2) = v13;
              v11 = 415;
            }
            else
            {
              v11 = 412;
              v12 = 35;
            }
            *(_DWORD *)a3 = v12;
            a3[1] = "src/lib/core/TLVReader.cpp";
          }
        }
        else
        {
          *(_DWORD *)a3 = 0;
          a3[1] = "src/lib/core/TLVReader.cpp";
          v11 = 401;
        }
      }
      else
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/lib/core/TLVReader.cpp";
        v11 = 388;
      }
    }
    else
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/lib/core/TLVReader.cpp";
      v11 = 380;
    }
  }
  else
  {
    *(_DWORD *)a3 = 38;
    a3[1] = "src/lib/core/TLVReader.cpp";
    v11 = 373;
  }
  *((_DWORD *)a3 + 4) = v11;
  return result;
}

void sub_234104F48(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v7;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;

  v5 = *(unsigned __int16 *)(a1 + 68);
  if (v5 == 0xFFFF || (v5 & 0x1Cu) - 12 >= 8)
  {
    *(_DWORD *)a4 = 38;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    v7 = 421;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10 <= a3)
    {
      v11 = 0uLL;
      v12 = 0;
      sub_234105020(a1, a2, v10, (uint64_t)&v11);
      if ((_DWORD)v11)
      {
        *(_OWORD *)a4 = v11;
        *(_QWORD *)(a4 + 16) = v12;
        return;
      }
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      v7 = 432;
    }
    else
    {
      *(_DWORD *)a4 = 25;
      *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      v7 = 424;
    }
  }
  *(_DWORD *)(a4 + 16) = v7;
}

double sub_234105020@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  double result;
  char *v9;
  unsigned int v10;
  size_t v11;
  __n128 v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = a3;
    while (1)
    {
      v12.n128_u32[0] = 34;
      v12.n128_u64[1] = (unint64_t)"src/lib/core/TLVReader.cpp";
      v13 = 936;
      sub_234105D30(a1, &v12, (uint64_t)&v14);
      result = *(double *)&v15;
      v17 = v15;
      v18 = v16;
      if (v14)
        break;
      v9 = *(char **)(a1 + 40);
      v10 = *(_DWORD *)(a1 + 48) - (_DWORD)v9;
      if (v5 >= v10)
        v11 = v10;
      else
        v11 = v5;
      if (a2)
      {
        memcpy(a2, v9, v11);
        a2 += v11;
        v9 = *(char **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = &v9[v11];
      *(_DWORD *)(a1 + 56) += v11;
      v5 -= v11;
      if (!v5)
        goto LABEL_10;
    }
    *(_DWORD *)a4 = v14;
    result = *(double *)&v17;
    *(_OWORD *)(a4 + 4) = v17;
    *(_DWORD *)(a4 + 20) = v18;
  }
  else
  {
LABEL_10:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a4 + 16) = 956;
  }
  return result;
}

void sub_23410515C(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v6;
  uint64_t v7;

  v4 = *(unsigned __int16 *)(a1 + 68);
  if (v4 == 0xFFFF || (v4 & 0x1Cu) - 12 >= 8)
  {
    *(_DWORD *)a4 = 38;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    v6 = 438;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v6;
    return;
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 + 1 > a3)
  {
    *(_DWORD *)a4 = 25;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    v6 = 441;
    goto LABEL_9;
  }
  a2[v7] = 0;
  sub_234104F48(a1, a2, a3 - 1, a4);
}

void sub_2341051D0(uint64_t a1@<X0>, void **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v7;
  char *v11;
  __int128 v12;
  uint64_t v13;

  v5 = *(unsigned __int16 *)(a1 + 68);
  if (v5 == 0xFFFF || (v5 & 0x1Cu) - 12 >= 8)
  {
    *(_DWORD *)a4 = 38;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    v7 = 451;
  }
  else
  {
    v11 = (char *)sub_234114774(*(unsigned int *)(a1 + 24));
    *a2 = v11;
    if (v11)
    {
      v12 = 0uLL;
      v13 = 0;
      sub_234105020(a1, v11, *(_DWORD *)(a1 + 24), (uint64_t)&v12);
      if ((_DWORD)v12)
      {
        j__free(*a2);
        *a2 = 0;
        *(_OWORD *)a4 = v12;
        *(_QWORD *)(a4 + 16) = v13;
        return;
      }
      *a3 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      v7 = 468;
    }
    else
    {
      *(_DWORD *)a4 = 11;
      *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      v7 = 455;
    }
  }
  *(_DWORD *)(a4 + 16) = v7;
}

void sub_2341052D4(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v6;
  unint64_t v8;
  char *v10;
  char *v11;

  v4 = *(unsigned __int16 *)(a1 + 68);
  if (v4 == 0xFFFF || (v4 & 0x1Cu) - 12 >= 8)
  {
    *(_DWORD *)a3 = 38;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    v6 = 474;
LABEL_13:
    *(_DWORD *)(a3 + 16) = v6;
    return;
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (v8 >= 0xFFFFFFFF)
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    v6 = 477;
    goto LABEL_13;
  }
  v10 = (char *)sub_234114774(v8 + 1);
  *a2 = v10;
  if (!v10)
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    v6 = 481;
    goto LABEL_13;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234105020(a1, v10, *(_DWORD *)(a1 + 24), a3);
  v11 = *a2;
  if (*(_DWORD *)a3)
  {
    j__free(v11);
    *a2 = 0;
  }
  else
  {
    v11[*(_QWORD *)(a1 + 24)] = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t sub_2341053D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v3 = *(_WORD *)(result + 68);
  v4 = v3 & 0x1F;
  if (v3 == -1)
    v4 = -1;
  if ((v4 - 21) > 2)
  {
    v7 = 520;
    v5 = 3;
  }
  else
  {
    v5 = 0;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(result + 48);
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(result + 56);
    v6 = *(_DWORD *)(result + 60);
    *(_WORD *)(a2 + 68) = -1;
    *(_OWORD *)(a2 + 16) = xmmword_2342D9210;
    *(_DWORD *)(a2 + 60) = v6;
    *(_DWORD *)(a2 + 64) = v4;
    *(_BYTE *)(a2 + 70) = 0;
    *(_DWORD *)a2 = *(_DWORD *)result;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 8);
    *(_BYTE *)(result + 70) = 1;
    v7 = 535;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_234105478(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 70))
  {
    v6 = *(_WORD *)(a1 + 68);
    if (v6 == -1)
      v7 = -1;
    else
      v7 = v6 & 0x1F;
    if (*(unsigned __int8 *)(a2 + 64) == v7)
    {
      sub_2341055C8(a2, (uint64_t)&v9);
      v12 = v10;
      v13 = v11;
      if (v9)
      {
        *(_DWORD *)a3 = v9;
        *(_OWORD *)(a3 + 4) = v12;
        *(_DWORD *)(a3 + 20) = v13;
        return;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
      *(_WORD *)(a1 + 68) = -1;
      *(_OWORD *)(a1 + 16) = xmmword_2342D9210;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
      v8 = 559;
    }
    else
    {
      *(_DWORD *)a3 = 3;
      *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
      v8 = 546;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    v8 = 543;
  }
  *(_DWORD *)(a3 + 16) = v8;
}

void sub_2341055C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  __int16 v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v4 = 0;
  v14 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a1 + 64);
  *(_BYTE *)(a1 + 70) = 0;
  while (1)
  {
    v6 = *(_WORD *)(a1 + 68);
    v7 = v6 == -1 ? -1 : v6 & 0x1F;
    if (v7 == 24)
      break;
    if ((v7 - 21) > 2u)
      goto LABEL_13;
    ++v4;
    v7 = v7;
LABEL_12:
    *(_DWORD *)(a1 + 64) = v7;
LABEL_13:
    sub_234106090(a1, (uint64_t)&v9);
    v8 = v9;
    v12 = v10;
    v13 = v11;
    if (!v9)
    {
      sub_234105AEC(a1, (uint64_t)&v9);
      v8 = v9;
      v12 = v10;
      v13 = v11;
      if (!v9)
        continue;
    }
    *(_DWORD *)a2 = v8;
    *(_OWORD *)(a2 + 4) = v12;
    *(_DWORD *)(a2 + 20) = v13;
    return;
  }
  if (v4)
  {
    if (--v4)
      v7 = -2;
    else
      v7 = v5;
    goto LABEL_12;
  }
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a2 + 16) = 734;
}

uint64_t sub_23410570C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3;
  int v4;
  int v5;
  int v6;

  v3 = *(_WORD *)(result + 68);
  v4 = v3 & 0x1F;
  if (v3 == -1)
    v4 = -1;
  if ((v4 - 21) > 2)
  {
    v6 = 566;
    v5 = 3;
  }
  else
  {
    v5 = 0;
    *a2 = *(_DWORD *)(result + 64);
    *(_DWORD *)(result + 64) = v4;
    *(_WORD *)(result + 68) = -1;
    *(_OWORD *)(result + 16) = xmmword_2342D9210;
    *(_BYTE *)(result + 70) = 0;
    v6 = 574;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

void sub_23410577C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_2341055C8(a1, (uint64_t)&v7);
  v6 = v7;
  v10 = v8;
  v11 = v9;
  if (v7)
  {
    *(_OWORD *)(a3 + 4) = v10;
    *(_DWORD *)(a3 + 20) = v11;
  }
  else
  {
    *(_DWORD *)(a1 + 64) = a2;
    *(_WORD *)(a1 + 68) = -1;
    *(_OWORD *)(a1 + 16) = xmmword_2342D9210;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 588;
  }
  *(_DWORD *)a3 = v6;
}

double sub_234105840@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  int v4;
  __int128 v5;
  uint64_t v6;

  v5 = 0uLL;
  v6 = 0;
  sub_2341058CC(a1, &v5);
  if (!(_DWORD)v5)
  {
    *(_DWORD *)a2 = 43;
    *(_QWORD *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
    v4 = 597;
    goto LABEL_5;
  }
  if ((_DWORD)v5 == 33)
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
    v4 = 595;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

void sub_2341058CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  __n128 v8;
  int v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_2341059E0(a1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_234105AEC(a1, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      v4 = *(unsigned __int16 *)(a1 + 68);
      v5 = v4 & 0x1F;
      if (v4 == 0xFFFF)
        v5 = -1;
      if (v5 == 24)
      {
        v6 = 608;
        v7 = 33;
LABEL_13:
        *(_DWORD *)a2 = v7;
        a2[1] = "src/lib/core/TLVReader.cpp";
        *((_DWORD *)a2 + 4) = v6;
        return;
      }
      if ((v5 - 12) > 7u)
        goto LABEL_12;
      v7 = 0;
      v6 = 617;
      if (v4 == 0xFFFF || (v4 & 0x1Cu) - 12 > 7)
        goto LABEL_13;
      if (!*(_DWORD *)(a1 + 24)
        || (*a2 = 0,
            a2[1] = 0,
            a2[2] = 0,
            v8.n128_u32[0] = 34,
            v8.n128_u64[1] = (unint64_t)"src/lib/core/TLVReader.cpp",
            v9 = 614,
            sub_234105D30(a1, &v8, (uint64_t)a2),
            !*(_DWORD *)a2))
      {
LABEL_12:
        v7 = 0;
        v6 = 617;
        goto LABEL_13;
      }
    }
  }
}

void sub_2341059E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3;
  int v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];

  v3 = *(_WORD *)(a1 + 68);
  if (v3 == -1)
    v4 = -1;
  else
    v4 = v3 & 0x1F;
  if (v4 != 24)
  {
    if ((v4 - 21) > 2u)
    {
      sub_234106090(a1, (uint64_t)v11);
      v8 = v11[0];
      if (!LODWORD(v11[0]))
      {
        *(_WORD *)(a1 + 68) = -1;
        *(_OWORD *)(a1 + 16) = xmmword_2342D9210;
LABEL_12:
        *(_DWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
        v5 = 676;
        goto LABEL_13;
      }
    }
    else
    {
      v7 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v4;
      *(_WORD *)(a1 + 68) = -1;
      *(_OWORD *)(a1 + 16) = xmmword_2342D9210;
      *(_BYTE *)(a1 + 70) = 0;
      sub_23410577C(a1, v7, (uint64_t)v11);
      v8 = v11[0];
      if (!LODWORD(v11[0]))
        goto LABEL_12;
    }
    v9 = v11[1];
    v10 = v11[2];
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = v10;
    return;
  }
  *(_DWORD *)a2 = 33;
  *(_QWORD *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
  v5 = 654;
LABEL_13:
  *(_DWORD *)(a2 + 16) = v5;
}

void sub_234105AEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  unsigned int v9;
  _BOOL4 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  int v19;
  _BYTE v20[20];
  int v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v18.n128_u32[0] = 33;
  v18.n128_u64[1] = (unint64_t)"src/lib/core/TLVReader.cpp";
  v19 = 764;
  sub_234105D30(a1, &v18, (uint64_t)v20);
  v4 = *(_DWORD *)v20;
  v24 = *(_OWORD *)&v20[4];
  v25 = v21;
  if (*(_DWORD *)v20)
    goto LABEL_2;
  v5 = *(unsigned __int8 **)(a1 + 40);
  if (v5)
  {
    v6 = *v5;
    *(_WORD *)(a1 + 68) = v6;
    v7 = v6 & 0x1F;
    if (v7 < 0x19)
    {
      v8 = v7 > 7;
      v9 = v7 - 20;
      v10 = v7 - 20 < 0xFFFFFFF6;
      if (v8 && v10)
        v11 = -1;
      else
        v11 = v6 & 3;
      if (v8 && v10)
        LOBYTE(v12) = 1;
      else
        v12 = (1 << v11) + 1;
      v13 = (v12 + byte_2342D9231[v6 >> 5]);
      if (*(_QWORD *)(a1 + 48) - (_QWORD)v5 >= v13)
      {
        v14 = (uint64_t *)(v5 + 1);
        *(_QWORD *)(a1 + 40) = &v5[v13];
        *(_DWORD *)(a1 + 56) += v13;
      }
      else
      {
        sub_234105020(a1, &v22, v13, (uint64_t)v20);
        v4 = *(_DWORD *)v20;
        v24 = *(_OWORD *)&v20[4];
        v25 = v21;
        if (*(_DWORD *)v20)
        {
LABEL_2:
          *(_DWORD *)a2 = v4;
          *(_OWORD *)(a2 + 4) = v24;
          *(_DWORD *)(a2 + 20) = v25;
          return;
        }
        v14 = &v23;
      }
      *(_QWORD *)v20 = v14;
      *(_QWORD *)(a1 + 16) = sub_2341060D4((int *)a1, v6 & 0xE0, (uint64_t *)v20);
      v16 = 0;
      switch(v11)
      {
        case -1:
          goto LABEL_25;
        case 0:
          v16 = **(_BYTE **)v20;
          goto LABEL_25;
        case 1:
          v16 = (unsigned __int16)**(_WORD **)v20;
          goto LABEL_25;
        case 2:
          v16 = **(_DWORD **)v20;
LABEL_25:
          *(_QWORD *)(a1 + 24) = v16;
          goto LABEL_26;
        case 3:
          v17 = **(_QWORD **)v20;
          *(_QWORD *)(a1 + 24) = **(_QWORD **)v20;
          if (v9 < 0xFFFFFFF8 || !HIDWORD(v17))
            goto LABEL_26;
          *(_DWORD *)a2 = 45;
          *(_QWORD *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
          v15 = 835;
          goto LABEL_16;
        default:
LABEL_26:
          sub_2341061E8(a1, a2);
          return;
      }
    }
    *(_DWORD *)a2 = 35;
    *(_QWORD *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
    v15 = 778;
  }
  else
  {
    *(_DWORD *)a2 = 35;
    *(_QWORD *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
    v15 = 770;
  }
LABEL_16:
  *(_DWORD *)(a2 + 16) = v15;
}

__n128 sub_234105D30@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  __n128 result;
  unsigned int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  unsigned int v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 40;
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 48))
  {
LABEL_2:
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    *(_DWORD *)(a3 + 16) = 987;
    return result;
  }
  if (*(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 60))
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      v14 = 0;
      (*(void (**)(int *__return_ptr, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v7 + 24))(&v11, v7, a1, v4, &v14);
      result.n128_u64[0] = v12;
      v15 = v12;
      v16 = v13;
      if (v11)
      {
        *(_DWORD *)a3 = v11;
        result.n128_u64[0] = v15;
        *(_OWORD *)(a3 + 4) = v15;
        *(_DWORD *)(a3 + 20) = v16;
        return result;
      }
      if (v14)
      {
        v9 = *(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 56);
        if (v9 >= v14)
          v10 = v14;
        else
          v10 = v9;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40) + v10;
        goto LABEL_2;
      }
    }
  }
  result = *a2;
  *(__n128 *)a3 = *a2;
  *(_QWORD *)(a3 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_234105E54@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  BOOL v5;
  int v6;

  v3 = *(unsigned __int16 *)(result + 68);
  v4 = v3 & 0x1F;
  if (v3 == 0xFFFF)
    v4 = -1;
  if (v4 != 24 && (v3 == 0xFFFF ? (v5 = (v4 & 0xFE) == 10) : (v5 = 1), v5))
  {
    if (*(_QWORD *)(result + 16) == a2)
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
      v6 = 624;
    }
    else
    {
      *(_DWORD *)a3 = 43;
      *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
      v6 = 623;
    }
  }
  else
  {
    *(_DWORD *)a3 = 38;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    v6 = 622;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

void sub_234105EE4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341058CC(a1, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234105E54(a1, a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/lib/core/TLVReader.cpp";
      *((_DWORD *)a3 + 4) = 631;
    }
  }
}

uint64_t sub_234105F5C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;

  v4 = *(unsigned __int16 *)(result + 68);
  if (v4 == 0xFFFF)
    v5 = -1;
  else
    v5 = v4 & 0x1F;
  if (v5 == 24)
  {
    v6 = -1;
  }
  else
  {
    v6 = v5 & 0xFE;
    if (v6 != 10)
    {
      v6 = (char)v5;
      if (v4 != 0xFFFF && (char)v5 < 20)
        v6 = v5 & 0xFC;
    }
  }
  if (v6 == a2)
  {
    if (*(_QWORD *)(result + 16) == a3)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      v7 = 638;
    }
    else
    {
      *(_DWORD *)a4 = 43;
      *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
      v7 = 637;
    }
  }
  else
  {
    *(_DWORD *)a4 = 38;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVReader.cpp";
    v7 = 636;
  }
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

void sub_234106010(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341058CC(a1, a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234105F5C(a1, a2, a3, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/lib/core/TLVReader.cpp";
      *((_DWORD *)a4 + 4) = 645;
    }
  }
}

double sub_234106090@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  int v3;

  result = 0.0;
  *(_OWORD *)a2 = xmmword_2505031E0;
  *(_QWORD *)(a2 + 16) = 702;
  v3 = *(unsigned __int16 *)(a1 + 68);
  if (v3 != 0xFFFF && (v3 & 0x1Cu) - 12 <= 7)
    return sub_234105020(a1, 0, *(_DWORD *)(a1 + 24), a2);
  return result;
}

unint64_t sub_2341060D4(int *a1, unsigned int a2, uint64_t *a3)
{
  unint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  result = 256;
  switch(((a2 >> 5) | (8 * a2)) ^ 4)
  {
    case 0:
      v5 = *a1;
      if (v5 == -1)
        return 257;
      v6 = *a3 + 2;
      v7 = *(unsigned __int16 *)*a3;
      goto LABEL_6;
    case 1:
      v5 = *a1;
      if (v5 == -1)
        return 257;
      v6 = *a3 + 4;
      v7 = *(unsigned int *)*a3;
LABEL_6:
      *a3 = v6;
      return v7 | ((unint64_t)~v5 << 32);
    case 2:
      v8 = *a3;
      v9 = *(unsigned __int16 *)*a3;
      *a3 += 2;
      v10 = *(unsigned __int16 *)(v8 + 2);
      *a3 = v8 + 4;
      v11 = *(unsigned __int16 *)(v8 + 4);
      v12 = (_DWORD *)(v8 + 6);
      goto LABEL_9;
    case 3:
      v13 = *a3;
      v9 = *(unsigned __int16 *)*a3;
      *a3 += 2;
      v10 = *(unsigned __int16 *)(v13 + 2);
      *a3 = v13 + 4;
      v11 = *(unsigned int *)(v13 + 4);
      v12 = (_DWORD *)(v13 + 8);
LABEL_9:
      *a3 = (uint64_t)v12;
      return ((v9 << 48) | (v10 << 32) | v11) ^ 0xFFFFFFFF00000000;
    case 5:
      return *(unsigned __int8 *)(*a3)++;
    case 6:
      v14 = *a3 + 2;
      v15 = *(unsigned __int16 *)*a3;
      goto LABEL_13;
    case 7:
      v14 = *a3 + 4;
      v15 = *(_DWORD *)*a3;
LABEL_13:
      *a3 = v14;
      result = *(_QWORD *)&v15 | 0xFFFFFFFF00000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2341061E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int16 v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;

  v2 = *(_WORD *)(result + 68);
  if (v2 == -1)
    v3 = -1;
  else
    v3 = v2 & 0x1F;
  if (v3 != 24)
  {
    v6 = *(_QWORD *)(result + 16);
    if (v6 == 257)
    {
      v4 = 854;
      v5 = 37;
      goto LABEL_28;
    }
    v7 = *(_DWORD *)(result + 64);
    v4 = 873;
    v5 = 3;
    if (v7 <= 20)
    {
      if (v7 != -2)
      {
        if (v7 != -1)
          goto LABEL_28;
        if (v6 < 0x100)
        {
          v4 = 859;
          goto LABEL_8;
        }
      }
    }
    else
    {
      switch(v7)
      {
        case 21:
          if (v6 == 256)
          {
            v4 = 863;
            goto LABEL_8;
          }
          break;
        case 22:
          if (v6 != 256)
          {
            v4 = 867;
            goto LABEL_8;
          }
          break;
        case 23:
          break;
        default:
          goto LABEL_28;
      }
    }
    if ((v3 - 12) <= 7u
      && (*(_DWORD *)(result + 60) - *(_DWORD *)(result + 56)) < *(_DWORD *)(result + 24))
    {
      v4 = 889;
      v5 = 34;
      goto LABEL_28;
    }
LABEL_27:
    v5 = 0;
    v4 = 892;
    goto LABEL_28;
  }
  if (*(_DWORD *)(result + 64) == -1)
  {
    v4 = 847;
    v5 = 35;
    goto LABEL_28;
  }
  if (*(_QWORD *)(result + 16) == 256)
    goto LABEL_27;
  v4 = 849;
LABEL_8:
  v5 = 36;
LABEL_28:
  *(_DWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_23410630C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;

  v3 = *(unsigned __int16 *)(result + 68);
  v4 = v3 & 0x1F;
  if (v3 == 0xFFFF)
    v4 = -1;
  if (v4 > 24)
  {
    v11 = 1002;
    v10 = 35;
  }
  else
  {
    v5 = byte_2342D9231[v3 >> 5];
    v6 = (v4 - 20) >= 0xF6u || (char)v4 <= 7;
    v7 = 1 << (v4 & 3);
    if (v6)
      v8 = v7 + 1;
    else
      v8 = 1;
    v9 = v8 + v5;
    if (v9 > 0xFF)
    {
      v11 = 1020;
      v10 = 172;
    }
    else
    {
      v10 = 0;
      *a2 = v9;
      v11 = 1023;
    }
  }
  *(_DWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

void sub_2341063A4(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int16 v21;
  char v22;

  *(_OWORD *)a4 = xmmword_2505031F8;
  a4[2] = 1038;
  v7 = *((_OWORD *)a1 + 2);
  v16 = *((_OWORD *)a1 + 1);
  v17 = v7;
  v18 = *((_QWORD *)a1 + 6);
  v19 = *((_QWORD *)a1 + 7);
  v21 = *((_WORD *)a1 + 34);
  v20 = a1[16];
  v22 = *((_BYTE *)a1 + 70);
  v14 = *a1;
  v15 = *((_QWORD *)a1 + 1);
  while (1)
  {
    sub_2341058CC((uint64_t)&v14, a4);
    if (*(_DWORD *)a4)
      break;
    v8 = v21;
    v9 = v21 & 0x1F;
    if (v21 == 0xFFFF)
      v9 = -1;
    if (v9 == 24 || ((v10 = v9 & 0xFE, v21 == 0xFFFF) ? (v11 = v10 == 10) : (v11 = 1), !v11))
    {
      *(_DWORD *)a4 = 35;
      a4[1] = "src/lib/core/TLVReader.cpp";
      *((_DWORD *)a4 + 4) = 1045;
      return;
    }
    if ((_QWORD)v16 == a2)
    {
      v12 = *((_QWORD *)&v16 + 1);
      v13 = v15;
      *(_QWORD *)(a3 + 16) = a2;
      *(_QWORD *)(a3 + 24) = v12;
      *(_QWORD *)(a3 + 48) = v18;
      *(_WORD *)(a3 + 68) = v8;
      *(_DWORD *)(a3 + 64) = v20;
      *(_BYTE *)(a3 + 70) = v22;
      *(_DWORD *)a3 = v14;
      *(_OWORD *)(a3 + 32) = v17;
      *(_QWORD *)(a3 + 56) = v19;
      *(_QWORD *)(a3 + 8) = v13;
      return;
    }
  }
}

double sub_2341064E8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  double result;
  int v9;
  int v10;
  __int128 v11;
  int v12;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 64) == -1)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    v9 = 1064;
    goto LABEL_8;
  }
  v5 = 0;
  v6 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v6;
  v14 = *(_QWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v7;
  while (1)
  {
    sub_2341058CC((uint64_t)v13, &v10);
    result = *(double *)&v11;
    v15 = v11;
    v16 = v12;
    if (v10)
      break;
    ++v5;
  }
  if (v10 == 33)
  {
    *a2 = v5;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVReader.cpp";
    v9 = 1077;
LABEL_8:
    *(_DWORD *)(a3 + 16) = v9;
    return result;
  }
  *(_DWORD *)a3 = v10;
  result = *(double *)&v15;
  *(_OWORD *)(a3 + 4) = v15;
  *(_DWORD *)(a3 + 20) = v16;
  return result;
}

void sub_234106600(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if ((*(_WORD *)(a1 + 68) & 0x1C) == 0x10)
  {
    sub_234104B68(a1, a2, a3);
  }
  else
  {
    *(_DWORD *)a3 = 38;
    a3[1] = "src/lib/core/TLVReader.cpp";
    *((_DWORD *)a3 + 4) = 1102;
  }
}

void sub_234106634(uint64_t a1@<X0>, void (*a2)(uint64_t, unint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_23410663C(a1, a2, a3, 1, a4);
}

void sub_23410663C(uint64_t a1@<X0>, void (*a2)(uint64_t, unint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v10[72];

  if (a2)
  {
    sub_234104468((uint64_t)v10);
    sub_2341045C8((uint64_t)v10, a1);
    sub_2341066D4((uint64_t)v10, 0, a2, a3, a4, a5);
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVUtilities.cpp";
    *(_DWORD *)(a5 + 16) = 166;
  }
}

void sub_2341066D4(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0xA)
  {
    if (sub_23410462C(a1) != -1
      || (*(_QWORD *)a6 = 0,
          *(_QWORD *)(a6 + 8) = 0,
          *(_QWORD *)(a6 + 16) = 0,
          sub_2341058CC(a1, (_QWORD *)a6),
          !*(_DWORD *)a6))
    {
      while (1)
      {
        v12 = sub_23410462C(a1);
        *(_QWORD *)(a6 + 8) = 0;
        *(_QWORD *)(a6 + 16) = 0;
        *(_QWORD *)a6 = 0;
        a3(a1, a2, a4);
        if (*(_DWORD *)a6)
          break;
        if (a5 && (v12 - 21) <= 2)
        {
          v17 = 0;
          *(_QWORD *)(a6 + 8) = 0;
          *(_QWORD *)(a6 + 16) = 0;
          *(_QWORD *)a6 = 0;
          sub_23410570C(a1, &v17, a6);
          if (*(_DWORD *)a6)
            return;
          sub_2341066D4(&v14, a1, a2 + 1, a3, a4, 1);
          v13 = v14;
          v18 = v15;
          v19 = v16;
          if (v14 && v14 != 33)
          {
LABEL_12:
            *(_DWORD *)a6 = v13;
            *(_OWORD *)(a6 + 4) = v18;
            *(_DWORD *)(a6 + 20) = v19;
            return;
          }
          *(_QWORD *)a6 = 0;
          *(_QWORD *)(a6 + 8) = 0;
          *(_QWORD *)(a6 + 16) = 0;
          sub_23410577C(a1, v17, a6);
          if (*(_DWORD *)a6)
            return;
        }
        sub_2341058CC(a1, &v14);
        v13 = v14;
        v18 = v15;
        v19 = v16;
        if (v14)
          goto LABEL_12;
      }
    }
  }
  else
  {
    *(_DWORD *)a6 = 5;
    *(_QWORD *)(a6 + 8) = "src/lib/core/TLVUtilities.cpp";
    *(_DWORD *)(a6 + 16) = 80;
  }
}

void sub_2341068B0(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  *a2 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_23410663C(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_234106970, (uint64_t)a2, 1, (uint64_t)a3);
  if (*(_DWORD *)a3 == 33)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVUtilities.cpp";
    *((_DWORD *)a3 + 4) = 242;
  }
}

void sub_234106910(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  *a2 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_23410663C(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_234106970, (uint64_t)a2, a3, (uint64_t)a4);
  if (*(_DWORD *)a4 == 33)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/lib/core/TLVUtilities.cpp";
    *((_DWORD *)a4 + 4) = 242;
  }
}

void sub_234106970(_QWORD *a1@<X2>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (a1)
  {
    v2 = 0;
    ++*a1;
    v3 = 195;
  }
  else
  {
    v3 = 191;
    v2 = 47;
  }
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "src/lib/core/TLVUtilities.cpp";
  *(_DWORD *)(a2 + 16) = v3;
}

void sub_2341069AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  int v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_23410663C(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_234106A90, (uint64_t)v7, 1, (uint64_t)a4);
  if (*(_DWORD *)a4 == 10)
    v5 = 0;
  else
    v5 = 118;
  if (*(_DWORD *)a4 == 10)
    v6 = 323;
  else
    v6 = 325;
  *(_DWORD *)a4 = v5;
  a4[1] = "src/lib/core/TLVUtilities.cpp";
  *((_DWORD *)a4 + 4) = v6;
}

void sub_234106A20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int v6;
  int v7;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_23410663C(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_234106A90, (uint64_t)v8, a4, (uint64_t)a5);
  if (*(_DWORD *)a5 == 10)
    v6 = 0;
  else
    v6 = 118;
  if (*(_DWORD *)a5 == 10)
    v7 = 323;
  else
    v7 = 325;
  *(_DWORD *)a5 = v6;
  a5[1] = "src/lib/core/TLVUtilities.cpp";
  *((_DWORD *)a5 + 4) = v7;
}

uint64_t sub_234106A90@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v4;
  int v5;

  if (a2)
  {
    if (**(_QWORD **)a2 == *(_QWORD *)(result + 16))
    {
      result = sub_2341045C8(*(_QWORD *)(a2 + 8), result);
      v4 = 271;
      v5 = 10;
    }
    else
    {
      v5 = 0;
      v4 = 274;
    }
  }
  else
  {
    v4 = 264;
    v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVUtilities.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

_QWORD *sub_234106B04(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void sub_234106B10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  int v7;
  _QWORD v8[3];

  v8[0] = a4;
  v8[1] = a2;
  v8[2] = a3;
  sub_23410663C(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_234106BF0, (uint64_t)v8, 1, a5);
  if (*(_DWORD *)a5 == 10)
    v6 = 0;
  else
    v6 = 118;
  if (*(_DWORD *)a5 == 10)
    v7 = 426;
  else
    v7 = 428;
  *(_DWORD *)a5 = v6;
  *(_QWORD *)(a5 + 8) = "src/lib/core/TLVUtilities.cpp";
  *(_DWORD *)(a5 + 16) = v7;
}

void sub_234106B80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v7;
  int v8;
  _QWORD v9[3];

  v9[0] = a4;
  v9[1] = a2;
  v9[2] = a3;
  sub_23410663C(a1, (void (*)(uint64_t, unint64_t, uint64_t))sub_234106BF0, (uint64_t)v9, a5, a6);
  if (*(_DWORD *)a6 == 10)
    v7 = 0;
  else
    v7 = 118;
  if (*(_DWORD *)a6 == 10)
    v8 = 426;
  else
    v8 = 428;
  *(_DWORD *)a6 = v7;
  *(_QWORD *)(a6 + 8) = "src/lib/core/TLVUtilities.cpp";
  *(_DWORD *)(a6 + 16) = v8;
}

uint64_t sub_234106BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a3 + 8))(a1, a2, *(_QWORD *)(a3 + 16));
  if (*a4 == 10)
    return sub_2341045C8(*(_QWORD *)a3, a1);
  return result;
}

double sub_234106C48(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = -1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0x1000000FFFFFFFFLL;
  return result;
}

double sub_234106C70(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  double result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a2;
  if (a3 >= 0xFFFFFFFF)
    v3 = -1;
  else
    v3 = a3;
  *(_DWORD *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = v3;
  result = NAN;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  *(_DWORD *)a1 = -1;
  *(_DWORD *)(a1 + 60) = 16798385;
  return result;
}

_QWORD *sub_234106CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  double v7;
  _QWORD *v8;
  _QWORD *result;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = sub_234106C70(a1, 0, a3);
  *(_WORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v8 = (_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v11 = 0uLL;
  v12 = 0;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a2 + 32))(&v11, a2, a1, a1 + 24, a1 + 40, v7);
  if ((_DWORD)v11)
  {
    *(_OWORD *)a4 = v11;
    *(_QWORD *)(a4 + 16) = v12;
  }
  else
  {
    if (*v8)
    {
      *(_QWORD *)(a1 + 32) = *v8;
      *(_WORD *)(a1 + 60) = 21169;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
      v10 = 108;
    }
    else
    {
      *(_DWORD *)a4 = 172;
      *(_QWORD *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
      v10 = 105;
    }
    *(_DWORD *)(a4 + 16) = v10;
  }
  return result;
}

double sub_234106D88@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if (*(_WORD *)(a1 + 60) != 21169)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/lib/core/TLVWriter.cpp";
    v5 = 115;
    goto LABEL_5;
  }
  result = 0.0;
  v7 = xmmword_250503210;
  v8 = 117;
  if (*(_BYTE *)(a1 + 62))
  {
    *(_DWORD *)a2 = 39;
    *(_QWORD *)(a2 + 8) = "src/lib/core/TLVWriter.cpp";
    v5 = 119;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v5;
    return result;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 48))(&v7, v6, a1, *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

uint64_t sub_234106E50@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;

  if (*(_WORD *)(result + 60) != 21169)
  {
    v7 = 135;
    goto LABEL_5;
  }
  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if (v6 >= a2)
  {
    result = *(_QWORD *)(result + 16);
    if (!result)
    {
LABEL_9:
      v8 = 0;
      *(_DWORD *)(v5 + 52) += a2;
      *(_DWORD *)(v5 + 40) = v6 - a2;
      v7 = 144;
      goto LABEL_10;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
    if ((_DWORD)result)
    {
      v6 = *(_DWORD *)(v5 + 40);
      goto LABEL_9;
    }
    v7 = 140;
LABEL_5:
    v8 = 3;
    goto LABEL_10;
  }
  v7 = 136;
  v8 = 11;
LABEL_10:
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

char *sub_234106F04@<X0>(char *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v5;

  if (a3)
    v5 = 9;
  else
    v5 = 8;
  return sub_234106F20(a1, v5, a2, 0, a4);
}

char *sub_234106F20@<X0>(char *result@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  char v10;
  unsigned int v11;
  int v12;
  char v14;
  BOOL v15;
  int v16;
  char __src;
  int v18;
  int v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  if (*((_WORD *)result + 30) != 21169)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v5 = 661;
    goto LABEL_5;
  }
  if (result[62])
  {
    *(_DWORD *)a5 = 39;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v5 = 663;
LABEL_5:
    *(_DWORD *)(a5 + 16) = v5;
    return result;
  }
  if (HIDWORD(a3))
  {
    v7 = *((_DWORD *)result + 14) + 1;
    v15 = v7 > 0x18;
    v8 = (1 << v7) & 0x1400001;
    if (v15 || v8 == 0)
    {
      *(_DWORD *)a5 = 36;
      *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
      v5 = 693;
      goto LABEL_5;
    }
    if (HIDWORD(a3) == -1)
    {
      if (!WORD1(a3))
      {
        v10 = a2 | 0x40;
        goto LABEL_26;
      }
      v14 = a2 | 0x60;
    }
    else
    {
      if (*(_DWORD *)result != ~HIDWORD(a3))
      {
        if (WORD1(a3))
        {
          __src = a2 | 0xE0;
          LOWORD(v18) = ~HIDWORD(a3) >> 16;
          HIWORD(v18) = ~WORD2(a3);
          v19 = a3;
          v6 = (char *)v20;
        }
        else
        {
          __src = a2 | 0xC0;
          LOWORD(v18) = ~HIDWORD(a3) >> 16;
          HIWORD(v18) = ~WORD2(a3);
          LOWORD(v19) = a3;
          v6 = (char *)&v19 + 2;
        }
        goto LABEL_35;
      }
      if (!WORD1(a3))
      {
        v10 = a2 | 0x80;
LABEL_26:
        __src = v10;
        LOWORD(v18) = a3;
        v6 = (char *)&v18 + 2;
        goto LABEL_35;
      }
      v14 = a2 | 0xA0;
    }
    __src = v14;
    v18 = a3;
    v6 = (char *)&v19;
    goto LABEL_35;
  }
  if (a3 > 0xFF)
  {
    if (a2 != 24)
    {
      v11 = *((_DWORD *)result + 14) + 1;
      v15 = v11 > 0x18;
      v12 = (1 << v11) & 0x1800001;
      if (v15 || v12 == 0)
      {
        *(_DWORD *)a5 = 36;
        *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
        v5 = 683;
        goto LABEL_5;
      }
    }
    v6 = (char *)&v18;
    __src = a2;
  }
  else
  {
    if ((*((_DWORD *)result + 14) | 2) != 0x17)
    {
      *(_DWORD *)a5 = 36;
      *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
      v5 = 674;
      goto LABEL_5;
    }
    __src = a2 | 0x20;
    v6 = (char *)&v18 + 1;
    LOBYTE(v18) = a3;
  }
LABEL_35:
  v15 = a2 - 10 < 0xA || a2 < 8;
  v16 = a2 & 3;
  if (!v15)
    v16 = -1;
  switch(v16)
  {
    case 0:
      *v6++ = a4;
      break;
    case 1:
      *(_WORD *)v6 = a4;
      v6 += 2;
      break;
    case 2:
      *(_DWORD *)v6 = a4;
      v6 += 4;
      break;
    case 3:
      *(_QWORD *)v6 = a4;
      v6 += 8;
      break;
    default:
      break;
  }
  if (((v6 - &__src) & 0xFFFFFFFEuLL) >= 0x12)
    sub_234258E74();
  return sub_234107838(&__src, result, v6 - &__src, (_QWORD *)a5);
}

char *sub_2341071D8@<X0>(char *a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_234106F20(a1, 4, a2, a3, a4);
}

char *sub_2341071EC@<X0>(char *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  char v5;
  char v6;

  if (HIDWORD(a3))
    v4 = 7;
  else
    v4 = 6;
  if (a3 >= 0x10000)
    v5 = v4;
  else
    v5 = 5;
  if (a3 >= 0x100)
    v6 = v5;
  else
    v6 = 4;
  return sub_234106F20(a1, v6, a2, a3, a4);
}

char *sub_234107224@<X0>(char *a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  char v5;

  if (a3 < 0x100)
    v5 = 4;
  else
    v5 = 5;
  return sub_234106F20(a1, v5, a2, a3, a4);
}

char *sub_234107240@<X0>(char *a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v6;
  char v7;

  if (a3 < 0x100)
    v6 = 4;
  else
    v6 = 5;
  if (a4)
    v7 = 5;
  else
    v7 = v6;
  return sub_234106F20(a1, v7, a2, a3, a5);
}

char *sub_23410726C@<X0>(char *a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  char v5;
  char v6;

  if (a3 < 0x10000)
    v5 = 5;
  else
    v5 = 6;
  if (a3 >= 0x100)
    v6 = v5;
  else
    v6 = 4;
  return sub_234106F20(a1, v6, a2, a3, a4);
}

char *sub_234107294@<X0>(char *a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v6;
  char v7;

  if (a3 < 0x10000)
    v6 = 5;
  else
    v6 = 6;
  if (a3 < 0x100)
    v6 = 4;
  if (a4)
    v7 = 6;
  else
    v7 = v6;
  return sub_234106F20(a1, v7, a2, a3, a5);
}

char *sub_2341072CC@<X0>(char *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v5;
  char v6;
  char v7;
  char v8;

  if (HIDWORD(a3))
    v5 = 7;
  else
    v5 = 6;
  if (a3 >= 0x10000)
    v6 = v5;
  else
    v6 = 5;
  if (a3 >= 0x100)
    v7 = v6;
  else
    v7 = 4;
  if ((a4 & 1) != 0)
    v8 = 7;
  else
    v8 = v7;
  return sub_234106F20(a1, v8, a2, a3, a5);
}

char *sub_234107314@<X0>(char *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_23410731C(a1, a2, a3, a4);
}

char *sub_23410731C@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  char v5;

  if (a3 == (int)a3)
    v4 = 2;
  else
    v4 = 3;
  if (a3 == (__int16)a3)
    v5 = 1;
  else
    v5 = v4;
  if (a3 == (char)a3)
    v5 = 0;
  return sub_234106F20(a1, v5, a2, a3, a4);
}

char *sub_23410734C@<X0>(char *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a4)
    return sub_234106F20(a1, 0, a2, a3, a5);
  else
    return sub_23410731C(a1, a2, a3, a5);
}

char *sub_234107370@<X0>(char *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a4)
    return sub_234106F20(a1, 1, a2, (unsigned __int16)a3, a5);
  else
    return sub_23410731C(a1, a2, a3, a5);
}

char *sub_234107394@<X0>(char *a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a4)
    return sub_234106F20(a1, 2, a2, a3, a5);
  else
    return sub_23410731C(a1, a2, (int)a3, a5);
}

char *sub_2341073B8@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a4)
    return sub_234106F20(a1, 3, a2, a3, a5);
  else
    return sub_23410731C(a1, a2, a3, a5);
}

char *sub_2341073DC@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, unsigned int a4@<S0>)
{
  return sub_234106F20(a1, 10, a2, a4, a3);
}

char *sub_2341073EC@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4@<D0>)
{
  return sub_234106F20(a1, 11, a2, a4, a3);
}

char *sub_2341073FC@<X0>(char *result@<X0>, unint64_t a2@<X1>, char *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!HIDWORD(a4))
    return sub_23410744C(result, 16, a2, a3, a4, a5);
  *(_DWORD *)a5 = 4;
  *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
  *(_DWORD *)(a5 + 16) = 282;
  return result;
}

char *sub_234107438@<X0>(char *a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  return sub_23410744C(a1, 16, a2, a3, a4, a5);
}

char *sub_23410744C@<X0>(char *result@<X0>, char a2@<W1>, unint64_t a3@<X2>, char *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v7;
  char *v10;
  char v11;
  __int128 v12;
  uint64_t v13;

  if (*((_WORD *)result + 30) != 21169)
  {
    *(_DWORD *)a6 = 3;
    *(_QWORD *)(a6 + 8) = "src/lib/core/TLVWriter.cpp";
    v7 = 770;
    goto LABEL_5;
  }
  if ((a2 & 3) != 0)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/lib/core/TLVWriter.cpp";
    v7 = 774;
LABEL_5:
    *(_DWORD *)(a6 + 16) = v7;
    return result;
  }
  v10 = result;
  if (a5 < 0x10000)
    v11 = 1;
  else
    v11 = 2;
  if (a5 < 0x100)
    v11 = 0;
  v12 = 0uLL;
  v13 = 0;
  result = sub_234106F20(result, v11 | a2, a3, a5, (uint64_t)&v12);
  if (!(_DWORD)v12)
    return sub_234107838(a4, v10, a5, (_QWORD *)a6);
  *(_OWORD *)a6 = v12;
  *(_QWORD *)(a6 + 16) = v13;
  return result;
}

size_t sub_23410753C@<X0>(char *__s@<X2>, char *a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  size_t result;

  result = strlen(__s);
  if (!HIDWORD(result))
    return sub_2341075BC(a2, a3, __s, result, a4);
  *(_DWORD *)a4 = 47;
  *(_QWORD *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
  *(_DWORD *)(a4 + 16) = 296;
  return result;
}

uint64_t sub_2341075BC@<X0>(char *a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v11;
  uint64_t v12[2];

  sub_233CAF22C(v12, (uint64_t)a3, a4);
  result = sub_2341177A8(v12[0], v12[1]);
  if ((result & 1) != 0)
  {
    if (!a4 || a3[a4 - 1])
      return (uint64_t)sub_23410744C(a1, 12, a2, a3, a4, a5);
    *(_DWORD *)a5 = 21;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v11 = 319;
  }
  else
  {
    *(_DWORD *)a5 = 18;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v11 = 314;
  }
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

char *sub_234107684@<X0>(char *a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!HIDWORD(a4))
    return (char *)sub_2341075BC(a1, a2, a3, a4, a5);
  *(_DWORD *)a5 = 47;
  *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
  *(_DWORD *)(a5 + 16) = 330;
  return a1;
}

void sub_2341076B0(uint64_t a1@<X0>, unint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>, char a5)
{
  sub_2341076D8(a1, a2, a3, &a5, a4);
}

void sub_2341076D8(uint64_t a1@<X0>, unint64_t a2@<X1>, const char *a3@<X2>, va_list a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  va_list v22;
  va_list v23;

  v22 = a4;
  v23 = a4;
  v10 = vsnprintf(0, 0, a3, a4);
  if (v10 < 0)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    *(_DWORD *)(a5 + 16) = 379;
    return;
  }
  v11 = v10;
  if (v10 < 0x10000)
    v12 = 13;
  else
    v12 = 14;
  if (v10 >= 0x100)
    v13 = v12;
  else
    v13 = 12;
  sub_234106F20((char *)a1, v13, a2, v10, (uint64_t)&v19);
  v14 = v19;
  if (!(_DWORD)v19)
  {
    if ((unint64_t)*(unsigned int *)(a1 + 44) + v11 <= *(unsigned int *)(a1 + 48))
    {
      v16 = (char *)sub_234114774(v11 + 1);
      if (v16)
      {
        v17 = v16;
        v22 = v23;
        vsnprintf(v16, v11 + 1, a3, v23);
        sub_234107838(v17, (char *)a1, v11, &v19);
        v18 = v19;
        v15 = v20;
        v5 = v21;
        j__free(v17);
        v14 = v18;
        goto LABEL_17;
      }
      LODWORD(v5) = 407;
      v14 = 0xB0000000BLL;
    }
    else
    {
      LODWORD(v5) = 394;
      v14 = 0x1900000019;
    }
    v15 = "src/lib/core/TLVWriter.cpp";
    goto LABEL_17;
  }
  v15 = v20;
  v5 = v21;
LABEL_17:
  *(_QWORD *)a5 = v14;
  *(_QWORD *)(a5 + 8) = v15;
  *(_QWORD *)(a5 + 16) = v5;
}

char *sub_234107838@<X0>(char *__src@<X1>, char *result@<X0>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  unsigned int v5;
  char *v6;
  int v7;
  int v8;
  unsigned int v10;
  unsigned int *v11;
  void *v12;
  unsigned int v13;
  size_t v14;
  int v15;

  if (*((_WORD *)result + 30) != 21169)
  {
    v7 = 798;
LABEL_5:
    v8 = 3;
    goto LABEL_26;
  }
  v5 = a3;
  v6 = result;
  if (*((_DWORD *)result + 11) + a3 > *((_DWORD *)result + 12))
  {
    v7 = 799;
    v8 = 25;
    goto LABEL_26;
  }
  if (!a3)
  {
LABEL_21:
    v8 = 0;
    v7 = 831;
    goto LABEL_26;
  }
  v11 = (unsigned int *)(result + 40);
  v10 = *((_DWORD *)result + 10);
  while (v10)
  {
    v12 = (void *)*((_QWORD *)v6 + 4);
LABEL_17:
    if (v5 >= v10)
      v14 = v10;
    else
      v14 = v5;
    result = (char *)memmove(v12, __src, v14);
    *((_QWORD *)v6 + 4) += v14;
    v10 = *((_DWORD *)v6 + 10) - v14;
    v15 = *((_DWORD *)v6 + 11) + v14;
    *((_DWORD *)v6 + 10) = v10;
    *((_DWORD *)v6 + 11) = v15;
    __src += v14;
    v5 -= v14;
    if (!v5)
      goto LABEL_21;
  }
  result = (char *)*((_QWORD *)v6 + 2);
  if (!result)
  {
    v7 = 805;
    goto LABEL_25;
  }
  if ((*((_QWORD *)v6 + 4) - *((_QWORD *)v6 + 3)) >> 32)
  {
    v7 = 807;
    goto LABEL_5;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = (char *)(*(uint64_t (**)(char *, char *))(*(_QWORD *)result + 48))(result, v6);
  if (*(_DWORD *)a4)
    return result;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = (char *)(*(uint64_t (**)(_QWORD, char *, _QWORD *, _QWORD *))(**((_QWORD **)v6 + 2) + 40))(*((_QWORD *)v6 + 2), v6, (_QWORD *)v6 + 3, (_QWORD *)v6 + 5);
  if (*(_DWORD *)a4)
    return result;
  v10 = *v11;
  if (*v11)
  {
    v12 = (void *)*((_QWORD *)v6 + 3);
    *((_QWORD *)v6 + 4) = v12;
    v13 = *((_DWORD *)v6 + 12) - *((_DWORD *)v6 + 11);
    if (v10 > v13)
    {
      *v11 = v13;
      v10 = v13;
    }
    goto LABEL_17;
  }
  v7 = 811;
LABEL_25:
  v8 = 11;
LABEL_26:
  *(_DWORD *)a4 = v8;
  a4[1] = "src/lib/core/TLVWriter.cpp";
  *((_DWORD *)a4 + 4) = v7;
  return result;
}

char *sub_2341079D4@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_234106F20(a1, 20, a2, 0, a3);
}

void sub_2341079E4(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_2341079F0(a1, *(_QWORD *)(a2 + 16), a2, a3);
}

void sub_2341079F0(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD v16[18];
  char __src[16];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v8 = sub_234104684(a3);
  v9 = *(_QWORD *)(a3 + 24);
  sub_234104468((uint64_t)v16);
  v10 = 446;
  v11 = 3;
  if (v8 == 24 || v8 == 255)
  {
LABEL_3:
    *(_DWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
    *(_DWORD *)(a4 + 16) = v10;
    return;
  }
  sub_2341045C8((uint64_t)v16, a3);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_2341059E0(a3, a4);
  if (!*(_DWORD *)a4)
  {
    v12 = *(_DWORD *)(a3 + 56);
    v13 = v16[14];
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    sub_234106F20(a1, v8, a2, v9, a4);
    if (!*(_DWORD *)a4)
    {
      v14 = v12 - v13;
      while (v14)
      {
        if (v14 >= 0x10)
          v15 = 16;
        else
          v15 = v14;
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_234105020((uint64_t)v16, __src, v15, a4);
        if (!*(_DWORD *)a4)
        {
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          sub_234107838(__src, a1, v15, (_QWORD *)a4);
          v14 -= v15;
          if (!*(_DWORD *)a4)
            continue;
        }
        return;
      }
      v11 = 0;
      v10 = 471;
      goto LABEL_3;
    }
  }
}

char *sub_234107B78@<X0>(char *result@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_WORD *)result + 30) != 21169)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v11 = 478;
LABEL_14:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  if ((a3 - 21) >= 3)
  {
    *(_DWORD *)a5 = 38;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v11 = 481;
    goto LABEL_14;
  }
  v8 = result;
  if (result[63])
  {
    v9 = *((_DWORD *)result + 12);
    if (!v9)
    {
      *(_DWORD *)a5 = 25;
      *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
      v11 = 485;
      goto LABEL_14;
    }
    *((_DWORD *)result + 12) = v9 - 1;
  }
  result = sub_234106F20(result, a3, a2, 0, (uint64_t)&v12);
  v10 = v12;
  v15 = v13;
  v16 = v14;
  if (!v12)
  {
    *(_QWORD *)(a4 + 16) = *((_QWORD *)v8 + 2);
    *(_QWORD *)(a4 + 24) = *((_QWORD *)v8 + 3);
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v8 + 4);
    *(_DWORD *)(a4 + 40) = *((_DWORD *)v8 + 10);
    *(_DWORD *)(a4 + 44) = 0;
    *(_DWORD *)(a4 + 48) = *((_DWORD *)v8 + 12) - *((_DWORD *)v8 + 11);
    *(_DWORD *)(a4 + 56) = a3;
    *(_BYTE *)(a4 + 62) = 0;
    *(_BYTE *)(a4 + 63) = v8[63];
    *(_DWORD *)a4 = *(_DWORD *)v8;
    *(_WORD *)(a4 + 60) = 21169;
    v8[62] = 1;
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v11 = 514;
    goto LABEL_14;
  }
  if (v8[63])
    ++*((_DWORD *)v8 + 12);
  *(_DWORD *)a5 = v10;
  *(_OWORD *)(a5 + 4) = v15;
  *(_DWORD *)(a5 + 20) = v16;
  return result;
}

char *sub_234107D2C@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  char *v5;

  if (*((_WORD *)result + 30) != 21169)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
    v4 = 521;
    goto LABEL_7;
  }
  if ((*(_DWORD *)(a2 + 56) - 21) >= 3)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
    v4 = 524;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a2 + 62))
  {
    *(_DWORD *)a3 = 39;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
    v4 = 527;
LABEL_7:
    *(_DWORD *)(a3 + 16) = v4;
    return result;
  }
  v5 = result;
  *((_QWORD *)result + 2) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)result + 3) = *(_QWORD *)(a2 + 24);
  *((_QWORD *)result + 4) = *(_QWORD *)(a2 + 32);
  *((_DWORD *)result + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)result + 11) += *(_DWORD *)(a2 + 44);
  if (result[63])
    ++*((_DWORD *)result + 12);
  result[62] = 0;
  sub_234106C70(a2, 0, 0);
  return sub_234106F20(v5, 24, 0x100uLL, 0, a3);
}

char *sub_234107E40@<X0>(char *result@<X0>, unint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_WORD *)result + 30) != 21169)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v11 = 550;
LABEL_14:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  if ((a3 - 21) >= 3)
  {
    *(_DWORD *)a5 = 38;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v11 = 553;
    goto LABEL_14;
  }
  v8 = result;
  if (result[63])
  {
    v9 = *((_DWORD *)result + 12);
    if (!v9)
    {
      *(_DWORD *)a5 = 25;
      *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
      v11 = 557;
      goto LABEL_14;
    }
    *((_DWORD *)result + 12) = v9 - 1;
  }
  result = sub_234106F20(result, a3, a2, 0, (uint64_t)&v12);
  v10 = v12;
  v15 = v13;
  v16 = v14;
  if (!v12)
  {
    *a4 = *((_DWORD *)v8 + 14);
    *((_DWORD *)v8 + 14) = a3;
    v8[62] = 0;
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/lib/core/TLVWriter.cpp";
    v11 = 575;
    goto LABEL_14;
  }
  if (v8[63])
    ++*((_DWORD *)v8 + 12);
  *(_DWORD *)a5 = v10;
  *(_OWORD *)(a5 + 4) = v15;
  *(_DWORD *)(a5 + 20) = v16;
  return result;
}

char *sub_234107FB0@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;

  if (*((_WORD *)result + 30) != 21169)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
    v3 = 582;
LABEL_8:
    *(_DWORD *)(a3 + 16) = v3;
    return result;
  }
  if ((*((_DWORD *)result + 14) - 21) >= 3)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.cpp";
    v3 = 585;
    goto LABEL_8;
  }
  *((_DWORD *)result + 14) = a2;
  if (result[63])
    ++*((_DWORD *)result + 12);
  return sub_234106F20(result, 24, 0x100uLL, 0, a3);
}

char *sub_234108034@<X0>(char *result@<X0>, unint64_t a2@<X1>, int a3@<W2>, char *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  char *v9;
  __int128 v10;
  uint64_t v11;

  if ((a3 - 21) >= 3)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/lib/core/TLVWriter.cpp";
    *(_DWORD *)(a6 + 16) = 598;
  }
  else
  {
    v9 = result;
    v10 = 0uLL;
    v11 = 0;
    result = sub_234106F20(result, a3, a2, 0, (uint64_t)&v10);
    if ((_DWORD)v10)
    {
      *(_OWORD *)a6 = v10;
      *(_QWORD *)(a6 + 16) = v11;
    }
    else
    {
      return sub_234107838(a4, v9, a5, (_QWORD *)a6);
    }
  }
  return result;
}

void sub_2341080E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_2341080F4(a1, *(_QWORD *)(a2 + 16), a2, a3);
}

void sub_2341080F4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  int v9;
  int v10;
  char *v11;
  int v12;
  __int128 v13;
  int v14;
  int v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(a1 + 60) != 21169)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
    v6 = 616;
    goto LABEL_5;
  }
  if (*(_QWORD *)(a3 + 32))
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/lib/core/TLVWriter.cpp";
    v6 = 620;
LABEL_5:
    *(_DWORD *)(a4 + 16) = v6;
    return;
  }
  v15 = 0;
  v9 = sub_23410462C(a3);
  sub_23410570C(a3, &v15, (uint64_t)&v12);
  v10 = v12;
  v16 = v13;
  v17 = v14;
  if (v12 || (v11 = *(char **)(a3 + 40), sub_23410577C(a3, v15, (uint64_t)&v12), v10 = v12, v16 = v13, v17 = v14, v12))
  {
    *(_DWORD *)a4 = v10;
    *(_OWORD *)(a4 + 4) = v16;
    *(_DWORD *)(a4 + 20) = v17;
  }
  else
  {
    sub_234108034((char *)a1, a2, v9, v11, *(_DWORD *)(a3 + 40) - (_DWORD)v11, a4);
  }
}

void sub_234108250(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  int v10;
  int v11;
  _BYTE v12[40];
  char *v13;
  int v14;
  int v15;

  if (*(_WORD *)(a1 + 60) != 21169)
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/lib/core/TLVWriter.cpp";
    v11 = 644;
    goto LABEL_6;
  }
  sub_234104468((uint64_t)v12);
  sub_234104498((uint64_t)v12, a3, a4);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_2341058CC((uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v10 = sub_23410462C((uint64_t)v12);
    sub_234108034((char *)a1, a2, v10, v13, v15 - v14, (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      *(_DWORD *)a5 = 0;
      a5[1] = "src/lib/core/TLVWriter.cpp";
      v11 = 654;
LABEL_6:
      *((_DWORD *)a5 + 4) = v11;
    }
  }
}

_QWORD *sub_234108344()
{
  return sub_234108530(off_256157938);
}

BOOL sub_234108350(char *a1, size_t a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  const char *v5;
  __int128 v7;
  uint64_t v8;

  v3 = *(_DWORD *)a3 & 0xFF000700;
  if (!v3)
  {
    v4 = *(_DWORD *)a3 - 1;
    if (v4 > 0xE0)
      v5 = 0;
    else
      v5 = off_250503228[v4];
    v7 = *a3;
    v8 = *((_QWORD *)a3 + 2);
    sub_2341084C8(a1, a2, "CHIP", &v7, v5);
  }
  return v3 == 0;
}

char *sub_2341083CC(const char **a1, int a2)
{
  unsigned __int16 v3;
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t (*v8)(char *, _QWORD, __int128 *);
  __int128 v10;
  const char *v11;

  v3 = 256;
  v4 = byte_2561592A8;
  if (a2 && a1[1])
  {
    v5 = snprintf(byte_2561592A8, 0x100uLL, "%s:%u: ", a1[1], *((_DWORD *)a1 + 4));
    if (v5 >= 256)
      v6 = 256;
    else
      v6 = v5;
    v4 = &byte_2561592A8[v6];
    v3 = 256 - v6;
  }
  if (*(_DWORD *)a1)
  {
    v7 = qword_2561593A8;
    if (qword_2561593A8)
    {
      while (1)
      {
        v8 = *(uint64_t (**)(char *, _QWORD, __int128 *))v7;
        v10 = *(_OWORD *)a1;
        v11 = a1[2];
        if ((v8(v4, v3, &v10) & 1) != 0)
          break;
        v7 = *(_QWORD *)(v7 + 8);
        if (!v7)
          goto LABEL_11;
      }
    }
    else
    {
LABEL_11:
      snprintf(v4, v3, "%s%sError 0x%08X%s%s");
    }
  }
  else
  {
    snprintf(v4, v3, "Success");
  }
  return byte_2561592A8;
}

uint64_t sub_2341084C8(char *a1, size_t __size, const char *a3, _DWORD *a4, const char *a5)
{
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  v5 = "";
  if (a3)
    v6 = a3;
  else
    v6 = "";
  v7 = " ";
  if (!a3)
    v7 = "";
  if (a5)
    v8 = a5;
  else
    v8 = "";
  if (a5)
    v5 = ": ";
  return snprintf(a1, __size, "%s%sError 0x%08X%s%s", v6, v7, *a4, v5, v8);
}

_QWORD *sub_234108530(_QWORD *result)
{
  _QWORD *v1;

  if (qword_2561593A8)
  {
    v1 = (_QWORD *)qword_2561593A8;
    while (*v1 != *result)
    {
      v1 = (_QWORD *)v1[1];
      if (!v1)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result[1] = qword_2561593A8;
    qword_2561593A8 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_234108564(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = qword_2561593A8;
  if (qword_2561593A8)
  {
    v2 = &qword_2561593A8;
    do
    {
      if (v1 == result)
      {
        v1 = *(_QWORD *)(result + 8);
        *v2 = v1;
      }
      v2 = (uint64_t *)(v1 + 8);
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

void sub_23410859C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a2 = xmmword_250503930;
  *(_QWORD *)(a2 + 16) = 97;
  v12 = 0;
  if (*(_DWORD *)a1)
  {
    v4 = 105;
    v5 = 3;
LABEL_3:
    *(_DWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = v4;
LABEL_4:
    (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                                 + 48)
                                                                                   + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B228, a1);
    *(_BYTE *)(a1 + 149) &= ~1u;
    v7 = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
    sub_2341089CC((_QWORD *)a1, 2, (uint64_t)&v7);
    goto LABEL_5;
  }
  *(_DWORD *)a1 = 1;
  sub_234118674(0x609uLL, 0x26u, &v10);
  v12 = v10;
  if (!(_QWORD)v10)
  {
    v4 = 110;
    v5 = 11;
    goto LABEL_3;
  }
  v13 = 0x6000000000000;
  WORD2(v13) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 56));
  sub_23410B72C((uint64_t)&v13, 0, 4);
  sub_23410B760((uint64_t)&v13, &v12, a2);
  if (*(_DWORD *)a2)
    goto LABEL_4;
  sub_234108760(a1, (uint64_t)&v10);
  *(_OWORD *)a2 = v10;
  *(_QWORD *)(a2 + 16) = v11;
  if (*(_DWORD *)a2)
    goto LABEL_4;
  sub_234118648(v12);
  v9 = v12;
  sub_2341087F4(a1, &v9, &v10);
  *(_OWORD *)a2 = v10;
  *(_QWORD *)(a2 + 16) = v11;
  if (v9)
    sub_23411814C(v9);
  if (*(_DWORD *)a2)
    goto LABEL_4;
  v6 = *(_QWORD **)(a1 + 64);
  if (!v6)
  {
    *(_QWORD *)(a1 + 64) = v12;
    return;
  }
  sub_2341182AC(v6, &v12);
LABEL_5:
  if (v12)
    sub_23411814C(v12);
}

_QWORD *sub_234108760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  __int128 v5;
  uint64_t v6;

  v5 = 0uLL;
  v6 = 0;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48) + 40))(&v5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), 15000, sub_23410B228, a1);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  if (!*(_DWORD *)a2)
  {
    *(_BYTE *)(a1 + 149) |= 1u;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 1327;
  }
  return result;
}

void sub_2341087F4(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  uint64_t v8;
  uint8_t buf[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 148) |= 0x20u;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v8 = *a2;
  *a2 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, void *, void *, uint64_t *))(*(_QWORD *)v4 + 56))(a3, v4, v5, &unk_2342D923D, &unk_2342D925D, &v8);
  if (v8)
    sub_23411814C(v8);
  v8 = 0;
  if (*(_DWORD *)a3)
  {
    v6 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v10 = a3[2];
      v7 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Send write request failed: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v10 = a3[2];
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(2u, 1);
    }
  }
}

_QWORD *sub_234108964(_QWORD *result, uint64_t *a2)
{
  if (result[8])
    return sub_2341182AC((_QWORD *)result[8], a2);
  result[8] = *a2;
  *a2 = 0;
  return result;
}

uint64_t sub_234108984(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48)
                                                                                             + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B228, a1);
  *(_BYTE *)(a1 + 149) &= ~1u;
  return result;
}

_QWORD *sub_2341089CC(_QWORD *result, char a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  char v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;

  v5 = (uint64_t)result;
  v6 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 0xFFFFFFFE) != 4 || (a2 & 2) != 0 && v6 == 4)
  {
    v7 = *((_DWORD *)result + 36);
    v8 = *(_QWORD *)(result[4] + 48);
    if (v7)
      v9 = sub_23410B330;
    else
      v9 = (void (*)(uint64_t, uint64_t))sub_23410B228;
    if (v7)
      v10 = -3;
    else
      v10 = -2;
    (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v8 + 72))(v8, v9, v5);
    *(_BYTE *)(v5 + 149) &= v10;
    if (!*(_DWORD *)(v5 + 112) || (a2 & 2) != 0)
    {
      v15 = *(_OWORD *)a3;
      v16 = *(_QWORD *)(a3 + 16);
      return sub_234109518(v5, v6, a2, &v15);
    }
    else
    {
      *(_DWORD *)v5 = 4;
      if ((a2 & 1) != 0)
      {
        result = *(_QWORD **)(v5 + 40);
        if (result)
        {
          v13 = *(_OWORD *)a3;
          v14 = *(_QWORD *)(a3 + 16);
          return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, __int128 *))(*result + 48))(result, v5, &v13);
        }
      }
      else
      {
        result = *(_QWORD **)(v5 + 40);
        if (result)
        {
          v11 = 48;
          if (v6 == 1)
          {
            v11 = 32;
            v12 = &v18;
          }
          else
          {
            v12 = &v17;
          }
          *(_OWORD *)v12 = *(_OWORD *)a3;
          *((_QWORD *)v12 + 2) = *(_QWORD *)(a3 + 16);
          result = (_QWORD *)(*(uint64_t (**)(void))(*result + v11))();
        }
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 24) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_234108B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  const char *v6;
  int v7;

  *(_OWORD *)a2 = xmmword_250503948;
  *(_QWORD *)(a2 + 16) = 156;
  *(_DWORD *)a1 = 3;
  (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B228, a1);
  *(_BYTE *)(a1 + 149) &= ~1u;
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    v5 = 0;
    v6 = "src/ble/BLEEndPoint.cpp";
    v7 = 167;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)result + 32))(result, a1, &v5);
  }
  else
  {
    *(_DWORD *)a2 = 1050;
    *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 172;
  }
  return result;
}

uint64_t sub_234108BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  *(_OWORD *)a2 = xmmword_250503960;
  *(_QWORD *)(a2 + 16) = 180;
  *(_DWORD *)a1 = 3;
  (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B330, a1);
  *(_BYTE *)(a1 + 149) &= ~2u;
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, a1);
  *(_DWORD *)a2 = 1027;
  *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
  *(_DWORD *)(a2 + 16) = 196;
  return result;
}

uint64_t sub_234108CA0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48)
                                                                                             + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B330, a1);
  *(_BYTE *)(a1 + 149) &= ~2u;
  return result;
}

_QWORD *sub_234108CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint8_t buf[8];
  const char *v14;
  uint64_t v15;

  v2 = 0x300000003;
  if ((*(_DWORD *)a1 - 1) > 1)
  {
    v6 = 0xCE000000CELL;
LABEL_15:
    v5 = "src/ble/BLEEndPoint.cpp";
LABEL_16:
    v11[0] = v2;
    v11[1] = v5;
    v11[2] = v6;
    return sub_2341089CC((_QWORD *)a1, 3, (uint64_t)v11);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
  {
    v6 = 0xCF000000CFLL;
    goto LABEL_15;
  }
  sub_234118648(v3);
  v12 = *(_QWORD *)(a1 + 64);
  sub_234108E84(a1, &v12, buf);
  v4 = *(_DWORD *)buf;
  v5 = v14;
  v6 = v15;
  v10 = *(_QWORD *)buf;
  if (v12)
  {
    sub_23411814C(v12);
    v4 = v10;
  }
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 64);
    if (v7)
      sub_23411814C(v7);
    *(_QWORD *)(a1 + 64) = 0;
    v8 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "cap resp ind failed", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
    v2 = v10;
    goto LABEL_16;
  }
  --*(_BYTE *)(a1 + 151);
  result = sub_234108FF4((_QWORD *)a1, (uint64_t)buf);
  v2 = *(_QWORD *)buf;
  if (*(_DWORD *)buf
    || *(_DWORD *)a1 != 2 && (result = (_QWORD *)sub_234108BF4(a1, (uint64_t)buf), v2 = *(_QWORD *)buf, *(_DWORD *)buf))
  {
    v5 = v14;
    v6 = v15;
    goto LABEL_16;
  }
  return result;
}

void sub_234108E84(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  uint64_t v8;
  uint8_t buf[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 148) |= 0x20u;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v8 = *a2;
  *a2 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, void *, void *, uint64_t *))(*(_QWORD *)v4 + 48))(a3, v4, v5, &unk_2342D923D, &unk_2342D924D, &v8);
  if (v8)
    sub_23411814C(v8);
  v8 = 0;
  if (*(_DWORD *)a3)
  {
    v6 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v10 = a3[2];
      v7 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Send indication failed: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v10 = a3[2];
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(2u, 1);
    }
  }
}

_QWORD *sub_234108FF4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;

  if ((*((_BYTE *)result + 149) & 4) == 0)
  {
    v3 = result;
    v4 = 0uLL;
    v5 = 0;
    result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, void (*)(uint64_t, uint64_t), _QWORD *))(**(_QWORD **)(result[4] + 48) + 40))(&v4, *(_QWORD *)(result[4] + 48), 15000, sub_23410B438, result);
    *(_OWORD *)a2 = v4;
    *(_QWORD *)(a2 + 16) = v5;
    if (*(_DWORD *)a2)
      return result;
    *((_BYTE *)v3 + 149) |= 4u;
  }
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
  *(_DWORD *)(a2 + 16) = 1351;
  return result;
}

void sub_234109090(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  int v5;
  __int128 buf;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "subscribe complete, ep = %p", (uint8_t *)&buf, 0xCu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);
  *(_BYTE *)(a1 + 148) &= ~0x20u;
  buf = 0uLL;
  v7 = 0;
  sub_2341091A8(a1, (uint64_t)&buf);
  if ((_DWORD)buf)
  {
    v3 = 0;
    v4 = "src/ble/BLEEndPoint.cpp";
    v5 = 264;
    sub_2341089CC((_QWORD *)a1, 2, (uint64_t)&v3);
  }
}

void sub_2341091A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  int v10;
  uint64_t v11;

  if (*(unsigned __int8 *)(a1 + 151) <= 1u)
  {
    if ((*(_BYTE *)(a1 + 149) & 8) != 0)
    {
      if (!*(_BYTE *)(a1 + 151))
      {
LABEL_15:
        v5 = 921;
LABEL_34:
        *(_DWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
        *(_DWORD *)(a2 + 16) = v5;
        return;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 151))
        v4 = *(_QWORD *)(a1 + 72) == 0;
      else
        v4 = 1;
      if (v4)
        goto LABEL_15;
    }
  }
  if ((*(_BYTE *)(a1 + 148) & 0x20) != 0)
    goto LABEL_15;
  if (*(_QWORD *)(a1 + 72))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_23410A4CC(a1, (_QWORD *)a2);
    goto LABEL_13;
  }
  v6 = *(_DWORD *)(a1 + 112);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_23410A064(a1, (_QWORD *)a2);
LABEL_13:
      if (*(_DWORD *)a2)
        return;
      goto LABEL_33;
    }
    if (!v6 && *(_QWORD *)(a1 + 64))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_234109F70(a1, (_QWORD *)a2);
      goto LABEL_13;
    }
LABEL_33:
    v5 = 971;
    goto LABEL_34;
  }
  sub_23410EA70(a1 + 80, &v11);
  if (*(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234109F70(a1, (_QWORD *)a2);
    if (*(_DWORD *)a2)
    {
      v7 = 0;
      goto LABEL_30;
    }
  }
  else if (*(_DWORD *)a1 == 4 && !*(_BYTE *)(a1 + 131))
  {
    v8 = 0;
    v9 = "src/ble/BLEEndPoint.cpp";
    v10 = 962;
    sub_234109518(a1, 4, 1, &v8);
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 40) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  }
  v7 = 1;
LABEL_30:
  if (v11)
    sub_23411814C(v11);
  if (v7)
    goto LABEL_33;
}

uint64_t sub_234109344(uint64_t a1)
{
  uint64_t v2;

  sub_234109974((_QWORD *)a1);
  sub_234109B3C(a1 + 80);
  sub_234109B68(a1 + 80);
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
    sub_23411814C(v2);
  *(_QWORD *)(a1 + 72) = 0;
  (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B228, a1);
  *(_BYTE *)(a1 + 149) &= ~1u;
  (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B330, a1);
  *(_BYTE *)(a1 + 149) &= ~2u;
  (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B438, a1);
  *(_BYTE *)(a1 + 149) &= ~4u;
  (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B548, a1);
  *(_BYTE *)(a1 + 149) &= ~8u;
  (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B5C0, a1);
  *(_BYTE *)(a1 + 149) &= ~0x10u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return sub_234109B10(a1);
}

BOOL sub_234109474(uint64_t a1, int a2)
{
  return (a2 - 3) < 2;
}

uint64_t sub_234109484(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 149) >> 4) & 1;
}

_QWORD *sub_234109490(_QWORD *a1)
{
  int v2;
  const char *v3;
  int v4;

  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v2 = 0;
  v3 = "src/ble/BLEEndPoint.cpp";
  v4 = 291;
  return sub_2341089CC(a1, 3, (uint64_t)&v2);
}

_QWORD *sub_2341094D4(_QWORD *a1)
{
  int v2;
  const char *v3;
  int v4;

  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v2 = 0;
  v3 = "src/ble/BLEEndPoint.cpp";
  v4 = 301;
  return sub_2341089CC(a1, 1, (uint64_t)&v2);
}

_QWORD *sub_234109518(uint64_t a1, int a2, char a3, __int128 *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD *result;
  NSObject *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint8_t buf[16];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 5;
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
    sub_23411814C(v8);
  *(_QWORD *)(a1 + 64) = 0;
  if (a2 == 4 || (a3 & 1) != 0)
  {
    if ((a3 & 1) != 0)
    {
      v12 = *(_QWORD *)(a1 + 40);
      if (v12)
      {
        v16 = *a4;
        v17 = *((_QWORD *)a4 + 2);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v12 + 48))(v12, a1, &v16);
      }
    }
  }
  else
  {
    v9 = *(_QWORD **)(a1 + 40);
    if (v9)
    {
      v10 = 48;
      if (a2 == 1)
      {
        v10 = 32;
        v11 = buf;
      }
      else
      {
        v11 = (uint8_t *)&v18;
      }
      *(_OWORD *)v11 = *a4;
      *((_QWORD *)v11 + 2) = *((_QWORD *)a4 + 2);
      (*(void (**)(void))(*v9 + v10))();
    }
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  if ((*(_DWORD *)a4 & 0xFFFFFFFE) == 0x40C)
  {
    *(_QWORD *)(a1 + 56) = 0;
    return (_QWORD *)sub_234109344(a1);
  }
  if (*(_DWORD *)(a1 + 144) || (*(_BYTE *)(a1 + 148) & 8) == 0)
    return (_QWORD *)sub_234109344(a1);
  (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B438, a1);
  *(_BYTE *)(a1 + 149) &= ~4u;
  (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                               + 48)
                                                                                 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B548, a1);
  *(_BYTE *)(a1 + 149) &= ~8u;
  result = (*(_QWORD *(**)(uint8_t *__return_ptr, _QWORD, _QWORD, void *, void *))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32)
                                                                                            + 24))(buf, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 56), &unk_2342D923D, &unk_2342D924D);
  *a4 = *(_OWORD *)buf;
  *((_QWORD *)a4 + 2) = v20;
  if (*(_DWORD *)a4)
  {
    v14 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *a4;
      v20 = *((_QWORD *)a4 + 2);
      v15 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "BtpEngine unsubscribe failed %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = *a4;
      v20 = *((_QWORD *)a4 + 2);
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(2u, 1);
    }
    return (_QWORD *)sub_234109344(a1);
  }
  if (*(_QWORD *)(a1 + 56))
  {
    result = sub_2341098E0(a1, (uint64_t)buf);
    *a4 = *(_OWORD *)buf;
    *((_QWORD *)a4 + 2) = v20;
    if (*(_DWORD *)a4)
      result = (_QWORD *)sub_234109344(a1);
    *(_BYTE *)(a1 + 148) |= 0x20u;
  }
  return result;
}

_QWORD *sub_2341097E0(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  result = (_QWORD *)a1[5];
  if (result)
  {
    v6 = 48;
    if (a2 == 1)
    {
      v6 = 32;
      v7 = (uint64_t *)&v9;
    }
    else
    {
      v7 = &v8;
    }
    *(_OWORD *)v7 = *(_OWORD *)a4;
    v7[2] = *(_QWORD *)(a4 + 16);
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + v6))();
  }
  a1[1] = 0;
  a1[3] = 0;
  return result;
}

uint64_t sub_234109850(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48)
                                                                                             + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B438, a1);
  *(_BYTE *)(a1 + 149) &= ~4u;
  return result;
}

uint64_t sub_234109898(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48)
                                                                                             + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B548, a1);
  *(_BYTE *)(a1 + 149) &= ~8u;
  return result;
}

_QWORD *sub_2341098E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  __int128 v5;
  uint64_t v6;

  v5 = 0uLL;
  v6 = 0;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48) + 40))(&v5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), 5000, sub_23410B5C0, a1);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  if (!*(_DWORD *)a2)
  {
    *(_BYTE *)(a1 + 149) |= 0x10u;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 1387;
  }
  return result;
}

_QWORD *sub_234109974(_QWORD *result)
{
  _QWORD *v1;
  char v2;
  NSObject *v3;
  _BOOL4 v4;
  uint8_t v5[32];

  if (result[7])
  {
    v1 = result;
    v2 = *((_BYTE *)result + 148);
    v3 = sub_234117B80(2u, "Ble");
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if ((v2 & 1) != 0)
    {
      if (v4)
      {
        *(_WORD *)v5 = 0;
        _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Auto-closing end point's BLE connection.", v5, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(2u, 2);
      result = (*(_QWORD *(**)(uint8_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v1[4] + 32) + 32))(v5, *(_QWORD *)(v1[4] + 32), v1[7]);
    }
    else
    {
      if (v4)
      {
        *(_WORD *)v5 = 0;
        _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Releasing end point's BLE connection back to application.", v5, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(2u, 2);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1[4] + 40) + 16))(*(_QWORD *)(v1[4] + 40), v1[7]);
    }
    v1[7] = 0;
  }
  return result;
}

void sub_234109AA0(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 80;
  sub_234109B3C(a1 + 80);
  sub_234109B68(v1);
}

uint64_t sub_234109AC8(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48)
                                                                                             + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B5C0, a1);
  *(_BYTE *)(a1 + 149) &= ~0x10u;
  return result;
}

uint64_t sub_234109B10(uint64_t result)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(result + 48);
  if (!v1)
    sub_234258F18();
  v2 = v1 - 1;
  *(_DWORD *)(result + 48) = v2;
  if (!v2)
    *(_QWORD *)(result + 32) = 0;
  return result;
}

void sub_234109B3C(uint64_t a1)
{
  uint64_t v1;

  sub_23410EA70(a1, &v1);
  if (v1)
    sub_23411814C(v1);
}

void sub_234109B68(uint64_t a1)
{
  uint64_t v1;

  sub_23410E728(a1, &v1);
  if (v1)
    sub_23411814C(v1);
}

double sub_234109B94@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int v7;
  double result;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17[8];
  __int128 v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 32))
  {
    *(_DWORD *)a6 = 3;
    *(_QWORD *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    v7 = 505;
LABEL_3:
    *(_DWORD *)(a6 + 16) = v7;
    return result;
  }
  if (!a2)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    v7 = 508;
    goto LABEL_3;
  }
  if (!a3)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    v7 = 509;
    goto LABEL_3;
  }
  if (a4 >= 2)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    v7 = 510;
    goto LABEL_3;
  }
  v18 = 0uLL;
  v19 = 0;
  sub_23410D594(a1 + 80, a1, a4 == 1, (uint64_t)&v18);
  if (!(_DWORD)v18)
  {
    *(_QWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 48) = 1;
    *(_QWORD *)(a1 + 56) = a3;
    *(_DWORD *)(a1 + 144) = a4;
    *(_BYTE *)(a1 + 148) = a5;
    *(_DWORD *)(a1 + 149) = 0;
    v15 = *(_QWORD *)(a1 + 64);
    if (v15)
      sub_23411814C(v15);
    *(_QWORD *)(a1 + 64) = 0;
    v16 = *(_QWORD *)(a1 + 72);
    if (v16)
      sub_23411814C(v16);
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)a1 = 0;
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = "src/ble/BLEEndPoint.cpp";
    v7 = 542;
    goto LABEL_3;
  }
  v14 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "BtpEngine init failed", v17, 2u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  result = *(double *)&v18;
  *(_OWORD *)a6 = v18;
  *(_QWORD *)(a6 + 16) = v19;
  return result;
}

uint64_t sub_234109D60(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 48);
  if (v1 == -1)
    sub_234258FBC();
  *(_DWORD *)(result + 48) = v1 + 1;
  return result;
}

void sub_234109D88(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_250503978;
  a3[2] = 565;
  if (*(_DWORD *)(a1 + 144))
    sub_234108E84(a1, a2, a3);
  else
    sub_2341087F4(a1, a2, a3);
  if (!*(_DWORD *)a3)
    --*(_BYTE *)(a1 + 151);
}

void sub_234109DF8(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  int v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  *(_OWORD *)a3 = xmmword_250503990;
  *(_QWORD *)(a3 + 16) = 609;
  v5 = (uint64_t *)*a2;
  if (!*a2)
  {
    v7 = 611;
    v8 = 47;
    goto LABEL_8;
  }
  if (*a1 - 3 > 1)
  {
    v7 = 612;
    v8 = 3;
    goto LABEL_8;
  }
  if (*v5)
  {
    sub_2341182EC(v5);
    v5 = (uint64_t *)*a2;
    if (*(_QWORD *)*a2)
    {
      v7 = 622;
      v8 = 195;
LABEL_8:
      *(_DWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = "src/ble/BLEEndPoint.cpp";
      *(_DWORD *)(a3 + 16) = v7;
LABEL_9:
      v9 = *(_OWORD *)a3;
      v10 = *(_QWORD *)(a3 + 16);
      sub_2341089CC(a1, 2, (uint64_t)&v9);
      return;
    }
  }
  if (*((_QWORD *)a1 + 8))
  {
    sub_2341182AC(*((_QWORD **)a1 + 8), a2);
  }
  else
  {
    *((_QWORD *)a1 + 8) = v5;
    *a2 = 0;
  }
  sub_2341091A8((uint64_t)a1, a3);
  if (*(_DWORD *)a3)
    goto LABEL_9;
}

BOOL sub_234109F00(_BYTE *a1, uint64_t *a2, char *a3)
{
  char v3;
  _BOOL8 v4;
  uint64_t v6;

  if ((a1[149] & 8) != 0)
  {
    a1[150] = a1[152];
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  *a3 = v3;
  v6 = *a2;
  *a2 = 0;
  v4 = sub_23410E748((uint64_t)(a1 + 80), &v6, *a3);
  if (v6)
    sub_23411814C(v6);
  return v4;
}

void sub_234109F70(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  sub_234118924((_QWORD **)(a1 + 64), &v6);
  v5 = 0;
  if (sub_234109F00((_BYTE *)a1, &v6, &v5))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_234118648(*(_QWORD *)(a1 + 120));
    v4 = *(_QWORD *)(a1 + 120);
    sub_234109D88(a1, &v4, a2);
    if (v4)
      sub_23411814C(v4);
    if (!*(_DWORD *)a2)
    {
      if (v5)
      {
        (*(void (**)(_QWORD, uint64_t (*)(), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48)
                                                                          + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B548, a1);
        *(_BYTE *)(a1 + 149) &= ~8u;
      }
      sub_234108FF4((_QWORD *)a1, (uint64_t)a2);
    }
  }
  else
  {
    *(_DWORD *)a2 = 1035;
    a2[1] = "src/ble/BLEEndPoint.cpp";
    *((_DWORD *)a2 + 4) = 672;
  }
  if (v6)
    sub_23411814C(v6);
}

void sub_23410A064(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  BOOL v4;
  NSObject *v5;
  uint64_t v6;
  char v7;

  v7 = 0;
  v6 = 0;
  v4 = sub_234109F00((_BYTE *)a1, &v6, &v7);
  if (v6)
    sub_23411814C(v6);
  if (v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_234118648(*(_QWORD *)(a1 + 120));
    v6 = *(_QWORD *)(a1 + 120);
    sub_234109D88(a1, &v6, a2);
    if (v6)
      sub_23411814C(v6);
    if (!*(_DWORD *)a2)
    {
      if (v7)
      {
        (*(void (**)(_QWORD, uint64_t (*)(), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48)
                                                                          + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B548, a1);
        *(_BYTE *)(a1 + 149) &= ~8u;
      }
      sub_234108FF4((_QWORD *)a1, (uint64_t)a2);
    }
  }
  else
  {
    v5 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v6) = 0;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "btp fragmenter error on send!", (uint8_t *)&v6, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
    sub_23410DE6C((int *)(a1 + 80));
    *(_DWORD *)a2 = 1035;
    a2[1] = "src/ble/BLEEndPoint.cpp";
    *((_DWORD *)a2 + 4) = 711;
  }
}

void sub_23410A1D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;

  *(_OWORD *)a2 = xmmword_2505039A8;
  *(_QWORD *)(a2 + 16) = 730;
  v4 = sub_2341183D0(*(uint64_t **)(a1 + 64));
  *(_QWORD *)(a1 + 64) = v4;
  if (!*(_DWORD *)(a1 + 144))
  {
    (*(void (**)(_QWORD, _QWORD, void *, void *))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 56), &unk_2342D923D, &unk_2342D924D);
    if (*(_DWORD *)a2)
    {
LABEL_12:
      v5 = 2;
      goto LABEL_13;
    }
    *(_BYTE *)(a1 + 148) |= 0x28u;
LABEL_11:
    if (!*(_DWORD *)a2)
      return;
    goto LABEL_12;
  }
  if (*(_DWORD *)a1 != 2)
  {
    if (*(_DWORD *)a1 == 3)
    {
      if (*(unsigned __int8 *)(a1 + 150) > 1u || v4)
        sub_2341091A8(a1, a2);
      else
        sub_23410A2FC(a1, a2);
    }
    goto LABEL_11;
  }
  *(_DWORD *)a2 = 1040;
  *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
  *(_DWORD *)(a2 + 16) = 773;
  v5 = 3;
LABEL_13:
  v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  sub_2341089CC((_QWORD *)a1, v5, (uint64_t)&v6);
}

void sub_23410A2FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(_QWORD, uint64_t (*)(), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), sub_23410B548, a1);
  *(_BYTE *)(a1 + 149) &= ~8u;
  if (*(_QWORD *)(a1 + 72))
    goto LABEL_5;
  sub_234118674(3uLL, 0x26u, &v6);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    sub_23411814C(v4);
  v5 = v6;
  *(_QWORD *)(a1 + 72) = v6;
  if (v5)
  {
LABEL_5:
    sub_2341091A8(a1, a2);
  }
  else
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 867;
  }
}

void sub_23410A3AC(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  *(_OWORD *)a2 = xmmword_2505039C0;
  *(_QWORD *)(a2 + 16) = 791;
  if ((a1[149] & 0x10) != 0)
    goto LABEL_11;
  if (*a1 - 3 < 2)
  {
    v4 = a1[148];
    if ((v4 & 0x10) != 0)
    {
      v5 = *((_QWORD *)a1 + 9);
      if (v5)
      {
        sub_23411814C(v5);
        v4 = a1[148];
      }
      *((_QWORD *)a1 + 9) = 0;
      a1[148] = v4 & 0xEF;
    }
    if (a1[150] > 1u || *((_QWORD *)a1 + 8) || *((_DWORD *)a1 + 28) == 1)
      sub_2341091A8((uint64_t)a1, a2);
    else
      sub_23410A2FC((uint64_t)a1, a2);
LABEL_11:
    if (!*(_DWORD *)a2)
      return;
    goto LABEL_14;
  }
  *(_DWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
  *(_DWORD *)(a2 + 16) = 803;
LABEL_14:
  v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  sub_2341089CC(a1, 2, (uint64_t)&v6);
}

void sub_23410A4AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(a1 + 148);
  *(_BYTE *)(a1 + 148) = v2 & 0xDF;
  if ((v2 & 2) != 0)
  {
    sub_23410A3AC((unsigned __int8 *)a1, a2);
  }
  else
  {
    *(_BYTE *)(a1 + 148) = v2 & 0xDD | 2;
    sub_23410A1D4(a1, a2);
  }
}

void sub_23410A4CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4[3];

  sub_23410D73C((_BYTE *)(a1 + 80), (uint64_t *)(a1 + 72), (uint64_t)v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_234118648(*(_QWORD *)(a1 + 72));
  v4[0] = *(_QWORD *)(a1 + 72);
  sub_234109D88(a1, v4, a2);
  if (v4[0])
    sub_23411814C(v4[0]);
  if (!*(_DWORD *)a2)
  {
    *(_BYTE *)(a1 + 150) = *(_BYTE *)(a1 + 152);
    *(_BYTE *)(a1 + 148) |= 0x10u;
    sub_234108FF4((_QWORD *)a1, (uint64_t)a2);
  }
}

void sub_23410A560(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  __int16 v6;
  int v7;
  NSObject *v8;
  unsigned __int8 v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  int v14;
  _QWORD *v15;
  NSObject *v16;
  uint64_t v17;
  _BYTE v18[2];
  __int16 v19;
  char v20;
  _BYTE v21[4];
  __int16 v22;
  unsigned __int8 v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    *(_DWORD *)a1 = 1;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_23410B810((uint64_t)a2, (uint64_t)v21, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      sub_234118674(6uLL, 0x26u, &v17);
      if (v17)
      {
        LOWORD(v5) = v22;
        if (v22
          || (v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 56))) != 0)
        {
          if ((unsigned __int16)(v5 - 3) <= 0xF4u)
            v6 = v5 - 3;
          else
            v6 = 244;
        }
        else
        {
          v16 = sub_234117B80(2u, "Ble");
          v6 = 20;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            v25 = 20;
            _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "cannot determine ATT MTU; selecting default fragment size = %u",
              buf,
              8u);
          }
          if (sub_234114844(2u))
            sub_2341147D0(2u, 2);
        }
        v19 = v6;
        if (v23 >= 6u)
          v7 = 6;
        else
          v7 = v23;
        *(_BYTE *)(a1 + 152) = v7;
        *(_BYTE *)(a1 + 150) = v7;
        *(_BYTE *)(a1 + 151) = v7;
        v20 = v7;
        v8 = sub_234117B80(2u, "Ble");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v25 = v7;
          _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "local and remote recv window sizes = %u", buf, 8u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(2u, 2);
        v9 = sub_23410D4E0((uint64_t)v21);
        v18[0] = v9;
        v10 = sub_234117B80(2u, "Ble");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v25 = v9;
          _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "selected BTP version %d", buf, 8u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(2u, 2);
        if (v9)
        {
          *(_WORD *)(a1 + 108) = v6;
          *(_WORD *)(a1 + 132) = v6;
        }
        else
        {
          v11 = sub_234117B80(2u, "Ble");
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109376;
            v25 = 4;
            v26 = 1024;
            v27 = 4;
            _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "incompatible BTP versions; peripheral expected between %d and %d",
              buf,
              0xEu);
          }
          if (sub_234114844(1u))
            sub_2341147D0(2u, 1);
          *(_DWORD *)a1 = 2;
        }
        v12 = sub_234117B80(2u, "Ble");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *(unsigned __int16 *)(a1 + 108);
          v14 = *(unsigned __int16 *)(a1 + 132);
          *(_DWORD *)buf = 67109376;
          v25 = v13;
          v26 = 1024;
          v27 = v14;
          _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "using BTP fragment sizes rx %d / tx %d.", buf, 0xEu);
        }
        if (sub_234114844(2u))
          sub_2341147D0(2u, 2);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_23410B8AC((uint64_t)v18, &v17, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          v15 = *(_QWORD **)(a1 + 64);
          if (v15)
          {
            sub_2341182AC(v15, &v17);
          }
          else
          {
            *(_QWORD *)(a1 + 64) = v17;
            v17 = 0;
          }
          sub_23410A9D0(a1, (uint64_t)a3);
        }
      }
      else
      {
        *(_DWORD *)a3 = 11;
        a3[1] = "src/ble/BLEEndPoint.cpp";
        *((_DWORD *)a3 + 4) = 988;
      }
      if (v17)
        sub_23411814C(v17);
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/ble/BLEEndPoint.cpp";
    *((_DWORD *)a3 + 4) = 980;
  }
}

_QWORD *sub_23410A9D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  __int128 v5;
  uint64_t v6;

  v5 = 0uLL;
  v6 = 0;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48) + 40))(&v5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), 15000, sub_23410B330, a1);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  if (!*(_DWORD *)a2)
  {
    *(_BYTE *)(a1 + 149) |= 2u;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 1337;
  }
  return result;
}

uint64_t sub_23410AA64@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  __int16 v6;
  NSObject *v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  NSObject *v11;
  int v12;
  _BYTE v13[2];
  unsigned __int16 v14;
  unsigned __int8 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!*a2)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/ble/BLEEndPoint.cpp";
    v12 = 1054;
LABEL_23:
    *(_DWORD *)(a3 + 16) = v12;
    return result;
  }
  v4 = result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = sub_23410B944((uint64_t)a2, (uint64_t)v13, a3);
  if (*(_DWORD *)a3)
    return result;
  if (!v14)
  {
    *(_DWORD *)a3 = 1043;
    *(_QWORD *)(a3 + 8) = "src/ble/BLEEndPoint.cpp";
    v12 = 1059;
    goto LABEL_23;
  }
  v5 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    v17 = v13[0];
    v18 = 1024;
    v19 = 4;
    v20 = 1024;
    v21 = 4;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "peripheral chose BTP version %d; central expected between %d and %d",
      buf,
      0x14u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    result = sub_2341147D0(2u, 2);
  if (v13[0] != 4)
  {
    *(_DWORD *)a3 = 1040;
    *(_QWORD *)(a3 + 8) = "src/ble/BLEEndPoint.cpp";
    v12 = 1067;
    goto LABEL_23;
  }
  if (v14 <= 0xF4u)
    v6 = v14;
  else
    v6 = 244;
  v14 = v6;
  *(_WORD *)(v4 + 108) = v6;
  *(_WORD *)(v4 + 132) = v6;
  v7 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int16 *)(v4 + 108);
    v9 = *(unsigned __int16 *)(v4 + 132);
    *(_DWORD *)buf = 67109376;
    v17 = v8;
    v18 = 1024;
    v19 = v9;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "using BTP fragment sizes rx %d / tx %d.", buf, 0xEu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);
  v10 = v15;
  *(_BYTE *)(v4 + 152) = v15;
  *(_BYTE *)(v4 + 150) = v10;
  *(_BYTE *)(v4 + 151) = v10;
  v11 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v17 = v15;
    _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "local and remote recv window size = %u", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(2u, 2);
  --*(_BYTE *)(v4 + 150);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  result = (uint64_t)sub_23410AD74((_QWORD *)v4, a3);
  if (!*(_DWORD *)a3)
    return sub_234108B2C(v4, a3);
  return result;
}

_QWORD *sub_23410AD74@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;

  if ((*((_BYTE *)result + 149) & 8) == 0)
  {
    v3 = result;
    v4 = 0uLL;
    v5 = 0;
    result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, void (*)(uint64_t, uint64_t), _QWORD *))(**(_QWORD **)(result[4] + 48) + 40))(&v4, *(_QWORD *)(result[4] + 48), 2500, sub_23410B548, result);
    *(_OWORD *)a2 = v4;
    *(_QWORD *)(a2 + 16) = v5;
    if (*(_DWORD *)a2)
      return result;
    *((_BYTE *)v3 + 149) |= 8u;
  }
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
  *(_DWORD *)(a2 + 16) = 1377;
  return result;
}

uint64_t sub_23410AE10(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  if (a4 < a2 && a3 + a2 > 0xFF)
    return (a3 + a2 - a4 + 1);
  else
    return (a3 + a2 - a4);
}

void sub_23410AE30(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v6;
  int v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint8_t buf[16];
  uint64_t v22;
  __int128 v23;
  int v24;
  __int16 v25;

  *(_OWORD *)a3 = xmmword_2505039D8;
  a3[2] = 1126;
  v25 = 0;
  if ((a1[149] & 0x10) != 0)
    return;
  v6 = a1[148];
  if ((v6 & 4) == 0)
  {
    v7 = *(_DWORD *)a1;
    if (*((_DWORD *)a1 + 36))
    {
      if (v7)
      {
        v8 = 1154;
LABEL_25:
        *(_DWORD *)a3 = 3;
        a3[1] = "src/ble/BLEEndPoint.cpp";
        *((_DWORD *)a3 + 4) = v8;
        goto LABEL_26;
      }
      a1[148] = v6 | 4;
      sub_23410A560((uint64_t)a1, a2, a3);
      v12 = *(_DWORD *)a3;
      if (*(_DWORD *)a3)
        v13 = 3;
      else
        v13 = 2;
    }
    else
    {
      if (v7 != 1)
      {
        v8 = 1145;
        goto LABEL_25;
      }
      a1[148] = v6 | 4;
      sub_23410AA64((uint64_t)a1, a2, (uint64_t)a3);
      v12 = *(_DWORD *)a3;
      v13 = 2;
    }
    if (!v12)
      return;
    goto LABEL_27;
  }
  if (*a1 - 3 >= 2)
  {
    v11 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "ep rx'd packet in bad state", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
    v8 = 1181;
    goto LABEL_25;
  }
  v9 = a1 + 80;
  nullsub_13(a1 + 80, a2);
  sub_23410D814((uint64_t)(a1 + 80), a2, (_BYTE *)&v25 + 1, (BOOL *)&v25, (uint64_t)a3);
  nullsub_13(a1 + 80, v10);
  if (*(_DWORD *)a3)
    goto LABEL_26;
  --a1[150];
  if ((_BYTE)v25)
  {
    if (!a1[131])
    {
      (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), unsigned __int8 *))(**(_QWORD **)(*((_QWORD *)a1 + 4) + 48)
                                                                                               + 72))(*(_QWORD *)(*((_QWORD *)a1 + 4) + 48), sub_23410B438, a1);
      a1[149] &= ~4u;
      if (*(_DWORD *)a1 == 4 && !*((_QWORD *)a1 + 8) && !*((_DWORD *)a1 + 28))
      {
        LODWORD(v23) = 0;
        *((_QWORD *)&v23 + 1) = "src/ble/BLEEndPoint.cpp";
        v24 = 1215;
        sub_234109518((uint64_t)a1, 4, 1, &v23);
        return;
      }
LABEL_32:
      v14 = a1[129];
      v15 = a1[152] + HIBYTE(v25);
      if (v14 < HIBYTE(v25) && v15 > 0xFF)
        v17 = v15 - v14 + 1;
      else
        v17 = v15 - v14;
      a1[151] = v17;
      sub_2341091A8((uint64_t)a1, (uint64_t)buf);
      *(_OWORD *)a3 = *(_OWORD *)buf;
      a3[2] = v22;
      if (*(_DWORD *)a3)
        goto LABEL_26;
      goto LABEL_39;
    }
    sub_23410B1A4(a1, (uint64_t)buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    a3[2] = v22;
    if (!*(_DWORD *)a3)
      goto LABEL_32;
LABEL_26:
    v13 = 2;
LABEL_27:
    v19 = *(_OWORD *)a3;
    v20 = a3[2];
    sub_2341089CC(a1, v13, (uint64_t)&v19);
    return;
  }
LABEL_39:
  if (sub_23410D670((uint64_t)(a1 + 80)))
  {
    if (a1[150] > 1u || (a1[148] & 0x20) != 0)
      sub_23410AD74(a1, (uint64_t)buf);
    else
      sub_23410A2FC((uint64_t)a1, (uint64_t)buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    a3[2] = v22;
    if (*(_DWORD *)a3)
      goto LABEL_26;
  }
  if (*v9 == 2)
  {
    sub_23410E728((uint64_t)(a1 + 80), buf);
    v18 = *((_QWORD *)a1 + 5);
    if (v18 && *(_DWORD *)a1 != 4)
      (*(void (**)(uint64_t, unsigned __int8 *, uint8_t *))(*(_QWORD *)v18 + 40))(v18, a1, buf);
    if (*(_QWORD *)buf)
      sub_23411814C(*(uint64_t *)buf);
  }
}

_QWORD *sub_23410B1A4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;

  if ((*((_BYTE *)result + 149) & 4) != 0)
  {
    v3 = result;
    (*(void (**)(_QWORD, void (*)(uint64_t, uint64_t), _QWORD *))(**(_QWORD **)(result[4] + 48)
                                                                                    + 72))(*(_QWORD *)(result[4] + 48), sub_23410B438, result);
    *((_BYTE *)v3 + 149) &= ~4u;
    return sub_234108FF4(v3, a2);
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/ble/BLEEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 1356;
  }
  return result;
}

void sub_23410B228(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  int v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 149) & 1) != 0)
  {
    v3 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v8 = a2;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "connect handshake timed out, closing ep %p", buf, 0xCu);
    }
    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
    *(_BYTE *)(a2 + 149) &= ~1u;
    v4 = 1045;
    v5 = "src/ble/BLEEndPoint.cpp";
    v6 = 1434;
    sub_2341089CC((_QWORD *)a2, 2, (uint64_t)&v4);
  }
}

void sub_23410B330(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  int v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 149) & 2) != 0)
  {
    v3 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v8 = a2;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "receive handshake timed out, closing ep %p", buf, 0xCu);
    }
    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
    *(_BYTE *)(a2 + 149) &= ~2u;
    v4 = 1046;
    v5 = "src/ble/BLEEndPoint.cpp";
    v6 = 1447;
    sub_2341089CC(a2, 3, &v4);
  }
}

void sub_23410B438(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 149) & 4) != 0)
  {
    v3 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v9 = a2;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "ack recv timeout, closing ep %p", buf, 0xCu);
    }
    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
    nullsub_13(a2 + 80, v4);
    *(_BYTE *)(a2 + 149) &= ~4u;
    v5 = 1048;
    v6 = "src/ble/BLEEndPoint.cpp";
    v7 = 1461;
    sub_2341089CC(a2, 2, &v5);
  }
}

void sub_23410B548(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  if ((*(_BYTE *)(a2 + 149) & 8) != 0)
  {
    *(_BYTE *)(a2 + 149) &= ~8u;
    if ((*(_BYTE *)(a2 + 148) & 0x10) == 0)
    {
      v5 = 0uLL;
      v6 = 0;
      sub_23410A2FC(a2, (uint64_t)&v5);
      if ((_DWORD)v5)
      {
        v3 = v5;
        v4 = v6;
        sub_2341089CC(a2, 2, &v3);
      }
    }
  }
}

void sub_23410B5C0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint8_t buf[4];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 149) & 0x10) != 0)
  {
    v3 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v5 = a2;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "unsubscribe timed out, ble ep %p", buf, 0xCu);
    }
    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
    *(_BYTE *)(a2 + 149) &= ~0x10u;
    sub_234109344(a2);
  }
}

_QWORD *sub_23410B6A4()
{
  return sub_234108530(off_256157948);
}

BOOL sub_23410B6B0(char *a1, size_t a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  const char *v5;
  __int128 v7;
  uint64_t v8;

  v3 = *(_DWORD *)a3 & 0xFF000700;
  if (v3 == 1024)
  {
    v4 = *(_DWORD *)a3 - 1025;
    if (v4 > 0x1E)
      v5 = 0;
    else
      v5 = (&off_2505039F0)[v4];
    v7 = *a3;
    v8 = *((_QWORD *)a3 + 2);
    sub_2341084C8(a1, a2, "Ble", &v7, v5);
  }
  return v3 == 1024;
}

uint64_t sub_23410B72C(uint64_t result, unsigned int a2, char a3)
{
  char v3;
  char v4;

  v3 = 16 * a3;
  if ((a2 & 1) != 0)
    v4 = -16;
  else
    v4 = 15;
  if ((a2 & 1) == 0)
    v3 = a3;
  *(_BYTE *)(result + ((unint64_t)a2 >> 1)) = *(_BYTE *)(result + ((unint64_t)a2 >> 1)) & ~v4 | v3 & v4;
  return result;
}

unint64_t sub_23410B760@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  int v9;
  int v10;

  v6 = *(_QWORD *)(*a2 + 8);
  result = sub_234118208(*a2);
  if (result < 9)
  {
    v10 = 170;
    v9 = 11;
  }
  else
  {
    v8 = 0;
    *(_WORD *)v6 = 27749;
    do
    {
      *(_BYTE *)(v6 + v8 + 2) = *(_BYTE *)(a1 + v8);
      ++v8;
    }
    while (v8 != 4);
    *(_WORD *)(v6 + 6) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v6 + 8) = *(_BYTE *)(a1 + 6);
    result = sub_234118220(*a2, 9uLL, 0);
    v9 = 0;
    v10 = 185;
  }
  *(_DWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_23410B810@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t i;
  int v5;
  _BYTE *v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)result + 24) < 9uLL)
  {
    v7 = 194;
    v5 = 13;
    goto LABEL_11;
  }
  v3 = *(_BYTE **)(*(_QWORD *)result + 8);
  if (*v3 != 101)
  {
    v7 = 196;
LABEL_10:
    v5 = 1047;
    goto LABEL_11;
  }
  if (v3[1] != 108)
  {
    v7 = 197;
    goto LABEL_10;
  }
  for (i = 0; i != 4; ++i)
    *(_BYTE *)(a2 + i) = v3[i + 2];
  v5 = 0;
  v6 = v3 + 4;
  *(_WORD *)(a2 + 4) = *((_WORD *)v6 + 1);
  *(_BYTE *)(a2 + 6) = v6[4];
  v7 = 209;
LABEL_11:
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

unint64_t sub_23410B8AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t result;
  int v8;
  int v9;

  v6 = *(_QWORD *)(*a2 + 8);
  result = sub_234118208(*a2);
  if (result < 6)
  {
    v9 = 219;
    v8 = 11;
  }
  else
  {
    *(_WORD *)v6 = 27749;
    *(_BYTE *)(v6 + 2) = *(_BYTE *)a1;
    *(_WORD *)(v6 + 3) = *(_WORD *)(a1 + 2);
    *(_BYTE *)(v6 + 5) = *(_BYTE *)(a1 + 4);
    result = sub_234118220(*a2, 6uLL, 0);
    v8 = 0;
    v9 = 230;
  }
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_23410B944@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;

  if (*(_QWORD *)(*(_QWORD *)result + 24) < 6uLL)
  {
    v5 = 239;
    v4 = 13;
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  if (*(_BYTE *)v3 != 101)
  {
    v5 = 241;
LABEL_8:
    v4 = 1047;
    goto LABEL_9;
  }
  if (*(_BYTE *)(v3 + 1) != 108)
  {
    v5 = 242;
    goto LABEL_8;
  }
  v4 = 0;
  *(_BYTE *)a2 = *(_BYTE *)(v3 + 2);
  *(_WORD *)(a2 + 2) = *(_WORD *)(v3 + 3);
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(v3 + 5);
  v5 = 248;
LABEL_9:
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_23410B9C8(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

_QWORD *sub_23410B9D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *result;
  int v13;
  int v14;

  result = sub_23410B6A4();
  if (!a2)
  {
    v13 = 265;
LABEL_9:
    v14 = 47;
    goto LABEL_10;
  }
  if (!a4)
  {
    v13 = 266;
    goto LABEL_9;
  }
  if (!a5)
  {
    v13 = 267;
    goto LABEL_9;
  }
  if (*(_DWORD *)a1)
  {
    v13 = 271;
    v14 = 3;
  }
  else
  {
    v14 = 0;
    *(_QWORD *)(a1 + 24) = a3;
    *(_QWORD *)(a1 + 32) = a2;
    *(_QWORD *)(a1 + 40) = a4;
    *(_QWORD *)(a1 + 48) = a5;
    v13 = 283;
    *(_DWORD *)a1 = 1;
  }
LABEL_10:
  *(_DWORD *)a6 = v14;
  *(_QWORD *)(a6 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a6 + 16) = v13;
  return result;
}

_QWORD *sub_23410BA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_23410B9D4(a1, a2, 0, a3, a4, a5);
}

_DWORD *sub_23410BA90(_DWORD *result)
{
  *result = 2;
  return result;
}

void sub_23410BA9C(_DWORD *a1)
{
  *a1 = 0;
  sub_23410BAA4();
}

void sub_23410BAA4()
{
  if (qword_256157978)
  {
    if (dword_256157958 != 5)
      sub_234109490(&dword_256157958);
    if (sub_234109484((uint64_t)&dword_256157958))
      sub_234109344((uint64_t)&dword_256157958);
  }
}

void sub_23410BAFC(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (qword_256157978)
    v2 = qword_256157990 == a2;
  else
    v2 = 0;
  if (v2)
  {
    if (dword_256157958 != 5)
      sub_234109490(&dword_256157958);
    if (sub_234109484((uint64_t)&dword_256157958))
      sub_234109344((uint64_t)&dword_256157958);
  }
}

uint64_t sub_23410BB60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  NSObject *v3;
  int v4;
  uint8_t v5[16];

  if (*(_DWORD *)result != 1)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/ble/BleLayer.cpp";
    v4 = 359;
LABEL_10:
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  result = *(_QWORD *)(result + 24);
  if (!result)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/ble/BleLayer.cpp";
    v4 = 360;
    goto LABEL_10;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (*(_DWORD *)a2 == 45)
  {
    v3 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "BleConnectionDelegate::CancelConnection is not implemented.", v5, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      return sub_2341147D0(2u, 1);
  }
  return result;
}

uint64_t sub_23410BC60@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  if (*(_DWORD *)result != 1)
  {
    v12 = 374;
LABEL_10:
    v11 = 3;
    goto LABEL_11;
  }
  v8 = result;
  v9 = *(_QWORD *)(result + 24);
  if (!v9)
  {
    v12 = 375;
    goto LABEL_10;
  }
  if (!*(_QWORD *)(result + 16))
  {
    v12 = 376;
    goto LABEL_10;
  }
  *(_QWORD *)(v9 + 8) = a4;
  *(_QWORD *)(*(_QWORD *)(result + 24) + 16) = a5;
  v10 = *(_QWORD *)(result + 24);
  if (!a3)
    a3 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8, a3, a2);
  v11 = 0;
  v12 = 383;
LABEL_11:
  *(_DWORD *)a6 = v11;
  *(_QWORD *)(a6 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a6 + 16) = v12;
  return result;
}

uint64_t sub_23410BD00@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  if (*(_DWORD *)result != 1)
  {
    v12 = 390;
LABEL_10:
    v11 = 3;
    goto LABEL_11;
  }
  v8 = result;
  v9 = *(_QWORD *)(result + 24);
  if (!v9)
  {
    v12 = 391;
    goto LABEL_10;
  }
  if (!*(_QWORD *)(result + 16))
  {
    v12 = 392;
    goto LABEL_10;
  }
  *(_QWORD *)(v9 + 8) = a4;
  *(_QWORD *)(*(_QWORD *)(result + 24) + 16) = a5;
  v10 = *(_QWORD *)(result + 24);
  if (!a3)
    a3 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, v8, a3, a2);
  v11 = 0;
  v12 = 399;
LABEL_11:
  *(_DWORD *)a6 = v11;
  *(_QWORD *)(a6 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a6 + 16) = v12;
  return result;
}

uint64_t sub_23410BDA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;

  if (*(_DWORD *)result != 1)
  {
    v5 = 404;
LABEL_6:
    v4 = 3;
    goto LABEL_7;
  }
  if (!*(_QWORD *)(result + 16))
  {
    v5 = 405;
    goto LABEL_6;
  }
  result = sub_23410BE04(result, a2);
  v4 = 0;
  v5 = 409;
LABEL_7:
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_23410BE04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  int v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  sub_23410BEE8(a1, (uint64_t)&v4, a2, 0, 1, (uint64_t)&v5);
  v8 = v6;
  v9 = v7;
  if (!v5)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v4);
  v6 = v8;
  v7 = v9;
  return (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), &v5);
}

void sub_23410BEE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  uint8_t buf[4];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  if (*(_DWORD *)a1 == 1)
  {
    if (a3)
    {
      v8 = &dword_256157958;
      v9 = qword_256157978;
      if (qword_256157978)
        v8 = 0;
      *(_QWORD *)a2 = v8;
      if (v9)
      {
        v10 = sub_234117B80(2u, "Ble");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          v15 = "Ble";
          _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "%s endpoint pool FULL", buf, 0xCu);
        }
        if (sub_234114844(1u))
          sub_2341147D0(2u, 1);
        v11 = 430;
        v12 = 193;
      }
      else
      {
        sub_234109B94((uint64_t)&dword_256157958, a1, a3, a4, a5, (uint64_t)buf);
        v12 = 0;
        *(_QWORD *)(*(_QWORD *)a2 + 40) = *(_QWORD *)(a1 + 16);
        v11 = 436;
      }
    }
    else
    {
      v11 = 423;
      v12 = 47;
    }
  }
  else
  {
    v11 = 418;
    v12 = 3;
  }
  *(_DWORD *)a6 = v12;
  *(_QWORD *)(a6 + 8) = "src/ble/BleLayer.cpp";
  *(_DWORD *)(a6 + 16) = v11;
}

void sub_23410C054(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  NSObject *v9;
  char *v10;
  uint64_t v11;
  uint8_t buf[16];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = xmmword_250503AE8;
  a4[2] = 442;
  v11 = 0;
  sub_23410BEE8(a1, (uint64_t)&v11, a2, 1u, 0, (uint64_t)a4);
  v8 = (unsigned __int8 *)v11;
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)(v11 + 40) = *(_QWORD *)(a1 + 16);
    sub_23410AE30(v8, a3, a4);
LABEL_5:
    if (!*(_DWORD *)a4)
      return;
    goto LABEL_6;
  }
  if (!v11)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2);
    goto LABEL_5;
  }
LABEL_6:
  v9 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    v13 = a4[2];
    v10 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "HandleChipConnectionReceived failed, err = %s", buf, 0xCu);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    v13 = a4[2];
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(2u, 1);
  }
}

BOOL sub_23410C1E0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  BOOL v9;
  NSObject *v10;
  char *v11;
  NSObject *v12;
  _BOOL8 result;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint8_t buf[16];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (sub_23410D56C((uint64_t *)&unk_2342D923D, a3))
  {
    if (sub_23410D56C((uint64_t *)&unk_2342D925D, a4))
    {
      if (*a5)
      {
        if (a2 && (qword_256157978 ? (v9 = qword_256157990 == a2) : (v9 = 0), v9))
        {
          v18 = 0uLL;
          v19 = 0;
          sub_23410AE30((unsigned __int8 *)&dword_256157958, a5, &v18);
          if ((_DWORD)v18)
          {
            v16 = sub_234117B80(2u, "Ble");
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_OWORD *)buf = v18;
              v21 = v19;
              v17 = sub_2341083CC((const char **)buf, 1);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v17;
              _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Receive failed, err = %s", buf, 0xCu);
            }
            if (!sub_234114844(1u))
              return 0;
LABEL_30:
            *(_OWORD *)buf = v18;
            v21 = v19;
            sub_2341083CC((const char **)buf, 1);
LABEL_31:
            sub_2341147D0(2u, 1);
            return 0;
          }
        }
        else
        {
          v18 = 0uLL;
          v19 = 0;
          sub_23410C054(a1, a2, a5, &v18);
          if ((_DWORD)v18)
          {
            v10 = sub_234117B80(2u, "Ble");
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_OWORD *)buf = v18;
              v21 = v19;
              v11 = sub_2341083CC((const char **)buf, 1);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v11;
              _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Handle new BLE connection failed, err = %s", buf, 0xCu);
            }
            if (!sub_234114844(1u))
              return 0;
            goto LABEL_30;
          }
        }
        return 1;
      }
      v15 = sub_234117B80(2u, "Ble");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Write received null buffer", buf, 2u);
      }
      result = sub_234114844(1u);
      if (result)
        goto LABEL_31;
    }
    else
    {
      v14 = sub_234117B80(2u, "Ble");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "Write received on unknown char", buf, 2u);
      }
      result = sub_234114844(1u);
      if (result)
        goto LABEL_31;
    }
  }
  else
  {
    v12 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Write received on unknown svc", buf, 2u);
    }
    result = sub_234114844(1u);
    if (result)
      goto LABEL_31;
  }
  return result;
}

BOOL sub_23410C560(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  BOOL v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  _BOOL8 v14;
  NSObject *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint8_t buf[16];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!sub_23410D56C((uint64_t *)&unk_2342D923D, a3))
  {
    v11 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Indication received on unknown svc", buf, 2u);
    }
    if (!sub_234114844(1u))
      return 0;
LABEL_24:
    v10 = 1;
    goto LABEL_25;
  }
  if (!sub_23410D56C((uint64_t *)&unk_2342D924D, a4))
  {
    v12 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Indication received on unknown char", buf, 2u);
    }
    if (!sub_234114844(1u))
      return 0;
    goto LABEL_24;
  }
  if (!*a5)
  {
    v13 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Indication received null buffer", buf, 2u);
    }
    if (!sub_234114844(1u))
      return 0;
    goto LABEL_24;
  }
  if (!a2 || (qword_256157978 ? (v8 = qword_256157990 == a2) : (v8 = 0), !v8))
  {
    v9 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "No endpoint for received indication", buf, 2u);
    }
    if (!sub_234114844(3u))
      return 0;
    v10 = 3;
LABEL_25:
    sub_2341147D0(2u, v10);
    return 0;
  }
  v18 = 0uLL;
  v19 = 0;
  sub_23410AE30((unsigned __int8 *)&dword_256157958, a5, &v18);
  v14 = (_DWORD)v18 == 0;
  if ((_DWORD)v18)
  {
    v16 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v18;
      v21 = v19;
      v17 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Receive failed, err = %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v18;
      v21 = v19;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(2u, 1);
    }
  }
  return v14;
}

BOOL sub_23410C888(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL8 v6;
  _BOOL8 result;
  NSObject *v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  if (sub_23410D56C((uint64_t *)&unk_2342D923D, a3))
  {
    v6 = sub_23410D56C((uint64_t *)&unk_2342D925D, a4);
    if (v6)
    {
      sub_23410C9B4(v6, a2);
      return 1;
    }
    v9 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Write confirmation on unknown char", v10, 2u);
    }
    result = sub_234114844(1u);
    if (result)
      goto LABEL_11;
  }
  else
  {
    v8 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Write confirmation on unknown svc", buf, 2u);
    }
    result = sub_234114844(1u);
    if (result)
    {
LABEL_11:
      sub_2341147D0(2u, 1);
      return 0;
    }
  }
  return result;
}

void sub_23410C9B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint8_t buf[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a2 && (qword_256157978 ? (v2 = qword_256157990 == a2) : (v2 = 0), v2))
  {
    v7 = 0uLL;
    v8 = 0;
    sub_23410A4AC((uint64_t)&dword_256157958, (uint64_t)&v7);
    if ((_DWORD)v7)
    {
      v5 = sub_234117B80(2u, "Ble");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v7;
        v10 = v8;
        v6 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "Send ack confirmation failed, err = %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v7;
        v10 = v8;
        sub_2341083CC((const char **)buf, 1);
        v4 = 1;
        goto LABEL_15;
      }
    }
  }
  else
  {
    v3 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "No endpoint for received ack", buf, 2u);
    }
    if (sub_234114844(3u))
    {
      v4 = 3;
LABEL_15:
      sub_2341147D0(2u, v4);
    }
  }
}

BOOL sub_23410CB58(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL8 v6;
  _BOOL8 result;
  NSObject *v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  if (sub_23410D56C((uint64_t *)&unk_2342D923D, a3))
  {
    v6 = sub_23410D56C((uint64_t *)&unk_2342D924D, a4);
    if (v6)
    {
      sub_23410C9B4(v6, a2);
      return 1;
    }
    v9 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Indication confirmation on unknown char", v10, 2u);
    }
    result = sub_234114844(1u);
    if (result)
      goto LABEL_11;
  }
  else
  {
    v8 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Indication confirmation on unknown svc", buf, 2u);
    }
    result = sub_234114844(1u);
    if (result)
    {
LABEL_11:
      sub_2341147D0(2u, 1);
      return 0;
    }
  }
  return result;
}

BOOL sub_23410CC84(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  BOOL v6;
  NSObject *v7;
  _BOOL8 result;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t v13[16];
  uint8_t buf[16];

  if (!sub_23410D56C((uint64_t *)&unk_2342D923D, a3))
  {
    v10 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Subscribe received on unknown svc", buf, 2u);
    }
    result = sub_234114844(1u);
    if (!result)
      return result;
LABEL_20:
    v9 = 1;
    goto LABEL_21;
  }
  if (!sub_23410D56C((uint64_t *)&unk_2342D924D, a4) && !sub_23410D56C((uint64_t *)&unk_2342D926D, a4))
  {
    v11 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Subscribe received on unknown char", v13, 2u);
    }
    result = sub_234114844(1u);
    if (!result)
      return result;
    goto LABEL_20;
  }
  if (a2 && (qword_256157978 ? (v6 = qword_256157990 == a2) : (v6 = 0), v6))
  {
    sub_234108CE8((uint64_t)&dword_256157958);
    return 1;
  }
  else
  {
    v7 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "No endpoint for received subscribe", v12, 2u);
    }
    result = sub_234114844(3u);
    if (result)
    {
      v9 = 3;
LABEL_21:
      sub_2341147D0(2u, v9);
      return 0;
    }
  }
  return result;
}

BOOL sub_23410CE50(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  BOOL v6;
  NSObject *v7;
  _BOOL8 result;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t v13[16];
  uint8_t buf[16];

  if (!sub_23410D56C((uint64_t *)&unk_2342D923D, a3))
  {
    v10 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Subscribe complete on unknown svc", buf, 2u);
    }
    result = sub_234114844(1u);
    if (!result)
      return result;
LABEL_20:
    v9 = 1;
    goto LABEL_21;
  }
  if (!sub_23410D56C((uint64_t *)&unk_2342D924D, a4) && !sub_23410D56C((uint64_t *)&unk_2342D926D, a4))
  {
    v11 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Subscribe complete on unknown char", v13, 2u);
    }
    result = sub_234114844(1u);
    if (!result)
      return result;
    goto LABEL_20;
  }
  if (a2 && (qword_256157978 ? (v6 = qword_256157990 == a2) : (v6 = 0), v6))
  {
    sub_234109090((uint64_t)&dword_256157958);
    return 1;
  }
  else
  {
    v7 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "No endpoint for subscribe complete", v12, 2u);
    }
    result = sub_234114844(3u);
    if (result)
    {
      v9 = 3;
LABEL_21:
      sub_2341147D0(2u, v9);
      return 0;
    }
  }
  return result;
}

BOOL sub_23410D01C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  BOOL v6;
  NSObject *v7;
  _BOOL8 result;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  const char *v13;
  int v14;
  uint8_t buf[16];

  if (!sub_23410D56C((uint64_t *)&unk_2342D923D, a3))
  {
    v10 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Unsubscribe received on unknown svc", buf, 2u);
    }
    result = sub_234114844(1u);
    if (!result)
      return result;
LABEL_20:
    v9 = 1;
    goto LABEL_21;
  }
  if (!sub_23410D56C((uint64_t *)&unk_2342D924D, a4) && !sub_23410D56C((uint64_t *)&unk_2342D926D, a4))
  {
    v11 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Unsubscribe received on unknown char", buf, 2u);
    }
    result = sub_234114844(1u);
    if (!result)
      return result;
    goto LABEL_20;
  }
  if (a2 && (qword_256157978 ? (v6 = qword_256157990 == a2) : (v6 = 0), v6))
  {
    v12 = 1028;
    v13 = "src/ble/BleLayer.cpp";
    v14 = 581;
    sub_2341089CC(&dword_256157958, 2, (uint64_t)&v12);
    return 1;
  }
  else
  {
    v7 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "No endpoint for unsubscribe received", buf, 2u);
    }
    result = sub_234114844(3u);
    if (result)
    {
      v9 = 3;
LABEL_21:
      sub_2341147D0(2u, v9);
      return 0;
    }
  }
  return result;
}

BOOL sub_23410D20C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  BOOL v6;
  NSObject *v7;
  _BOOL8 result;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t v13[16];
  uint8_t buf[16];

  if (!sub_23410D56C((uint64_t *)&unk_2342D923D, a3))
  {
    v10 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Unsubscribe complete on unknown svc", buf, 2u);
    }
    result = sub_234114844(1u);
    if (!result)
      return result;
LABEL_20:
    v9 = 1;
    goto LABEL_21;
  }
  if (!sub_23410D56C((uint64_t *)&unk_2342D924D, a4) && !sub_23410D56C((uint64_t *)&unk_2342D926D, a4))
  {
    v11 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Unsubscribe complete on unknown char", v13, 2u);
    }
    result = sub_234114844(1u);
    if (!result)
      return result;
    goto LABEL_20;
  }
  if (a2 && (qword_256157978 ? (v6 = qword_256157990 == a2) : (v6 = 0), v6))
  {
    sub_234109340(&dword_256157958);
    return 1;
  }
  else
  {
    v7 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "No endpoint for unsubscribe complete", v12, 2u);
    }
    result = sub_234114844(3u);
    if (result)
    {
      v9 = 3;
LABEL_21:
      sub_2341147D0(2u, v9);
      return 0;
    }
  }
  return result;
}

uint64_t sub_23410D3D8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  BOOL v3;
  NSObject *v4;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  uint8_t buf[16];

  if (a2 && (qword_256157978 ? (v3 = qword_256157990 == a2) : (v3 = 0), v3))
  {
    if (*(_DWORD *)a3 == 1030 && sub_234109484((uint64_t)&dword_256157958))
    {
      return sub_234109344((uint64_t)&dword_256157958);
    }
    else
    {
      v7 = *a3;
      v8 = *((_QWORD *)a3 + 2);
      return (uint64_t)sub_2341089CC(&dword_256157958, 2, (uint64_t)&v7);
    }
  }
  else
  {
    v4 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "No endpoint for connection error", buf, 2u);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
      return sub_2341147D0(2u, 3);
  }
  return result;
}

uint64_t sub_23410D4E0(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  int v4;
  int v5;

  v2 = 0;
  result = 0;
  v4 = 4;
  do
  {
    v4 ^= 4u;
    v5 = (*(unsigned __int8 *)(a1 + ((unint64_t)v2 >> 1)) >> v4) & 0xF;
    if (v5 == 4 && (int)result < 4)
    {
      result = 4;
    }
    else if (!v5)
    {
      return result;
    }
    ++v2;
  }
  while (v2 != 8);
  return result;
}

uint64_t sub_23410D530(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v2 + 24))(v2, &v4);
}

BOOL sub_23410D56C(uint64_t *a1, _QWORD *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;

  result = 0;
  if (a1 && a2)
  {
    v5 = *a1;
    v4 = a1[1];
    return v5 == *a2 && v4 == a2[1];
  }
  return result;
}

void sub_23410D594(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)a1 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    sub_23411814C(v7);
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 25) = 0;
  *(_WORD *)(a1 + 28) = 20;
  *(_DWORD *)(a1 + 32) = 0;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    sub_23411814C(v8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 52) = 20;
  *(_WORD *)(a1 + 49) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 51) = a3;
  *(_BYTE *)(a1 + 24) = a3 ^ 1;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = "src/ble/BtpEngine.cpp";
  *(_DWORD *)(a4 + 16) = 103;
}

uint64_t sub_23410D62C(unsigned __int8 *a1)
{
  uint64_t result;

  result = a1[48];
  if (!a1[51])
  {
    a1[51] = 1;
    a1[50] = result;
  }
  a1[49] = result;
  a1[48] = result + 1;
  return result;
}

uint64_t sub_23410D658(_BYTE *a1)
{
  uint64_t v1;
  char v2;

  v1 = a1[25];
  v2 = a1[24];
  a1[25] = v2;
  a1[26] = v2;
  return v1;
}

BOOL sub_23410D670(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_23410D684(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;

  if (!a1[51])
    return 0;
  v2 = a1[49];
  v3 = a1[50];
  if (v2 < a2)
  {
    v4 = v3 >= a2;
    v5 = v3 == a2;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = v5 || !v4;
  if (v2 >= a2)
  {
    v7 = v3 >= a2;
    v8 = v3 == a2;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  v9 = v8 || !v7;
  if (v2 >= v3)
    return v9;
  else
    return v6;
}

unsigned __int8 *sub_23410D6C0@<X0>(unsigned __int8 *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  int v6;
  int v8;

  if (!result[51])
    goto LABEL_14;
  v3 = result[49];
  v4 = result[50];
  if (v3 >= v4)
  {
    if (v3 >= a2 && v4 <= a2)
      goto LABEL_7;
LABEL_14:
    v8 = 168;
    v6 = 1051;
    goto LABEL_17;
  }
  if (v3 < a2 && v4 > a2)
    goto LABEL_14;
LABEL_7:
  v6 = 0;
  if (v3 == a2)
  {
    result[50] = a2;
    result[51] = 0;
  }
  else
  {
    result[50] = a2 + 1;
  }
  v8 = 184;
LABEL_17:
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = "src/ble/BtpEngine.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_23410D73C@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  _BYTE *v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;

  result = sub_23411853C((_QWORD *)*a2, 0);
  if (!(_DWORD)result)
  {
    v12 = 192;
LABEL_8:
    v11 = 11;
    goto LABEL_9;
  }
  result = sub_234118208(*a2);
  if (result < 3)
  {
    v12 = 195;
    goto LABEL_8;
  }
  v7 = *(_BYTE **)(*a2 + 8);
  *v7 = 8;
  v8 = a1[25];
  v9 = a1[24];
  a1[25] = v9;
  a1[26] = v9;
  v7[1] = v8;
  v10 = a1[48];
  if (!a1[51])
  {
    a1[51] = 1;
    a1[50] = v10;
  }
  a1[49] = v10;
  a1[48] = v10 + 1;
  v7[2] = v10;
  result = sub_234118220(*a2, 3uLL, 0);
  v11 = 0;
  v12 = 211;
LABEL_9:
  *(_DWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = "src/ble/BtpEngine.cpp";
  *(_DWORD *)(a3 + 16) = v12;
  return result;
}

_QWORD *sub_23410D814@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, BOOL *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *result;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  NSObject *v19;
  char *v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 v32;
  _BYTE buf[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a5 = xmmword_250503B00;
  *(_QWORD *)(a5 + 16) = 230;
  v32 = 0;
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)buf = v11;
    *(_QWORD *)&buf[8] = v11;
    *(_QWORD *)&buf[16] = v12;
    LODWORD(v34) = 0;
    *((_QWORD *)&v34 + 1) = "src/lib/support/BufferReader.h";
    LODWORD(v35) = 330;
    if (!v11)
      *(_QWORD *)&buf[16] = 0;
    ++*(_WORD *)(a1 + 54);
    sub_234114DD8((uint64_t)buf, &v32);
    *(_OWORD *)a5 = v34;
    *(_QWORD *)(a5 + 16) = v35;
    if (*(_DWORD *)a5)
      goto LABEL_13;
    v13 = v32;
    *a4 = (v32 & 8) != 0;
    if ((v13 & 8) != 0)
    {
      sub_234114DD8((uint64_t)buf, a3);
      *(_OWORD *)a5 = v34;
      *(_QWORD *)(a5 + 16) = v35;
      if (*(_DWORD *)a5)
        goto LABEL_13;
      sub_23410D6C0((unsigned __int8 *)a1, *a3, a5);
      if (*(_DWORD *)a5)
        goto LABEL_13;
    }
    result = (_QWORD *)sub_234114DD8((uint64_t)buf, (_BYTE *)(a1 + 25));
    *(_OWORD *)a5 = v34;
    *(_QWORD *)(a5 + 16) = v35;
    if (*(_DWORD *)a5)
      goto LABEL_13;
    v15 = *(unsigned __int8 *)(a1 + 25);
    if (v15 == *(unsigned __int8 *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = v15 + 1;
      if ((v32 & 7) == 0)
        return result;
      v16 = *(unsigned __int16 *)(a1 + 28);
      if (*(_QWORD *)&buf[8] - *(_QWORD *)buf <= v16)
      {
        if (*(_QWORD *)(*a2 + 24) >= v16)
          v25 = *(unsigned __int16 *)(a1 + 28);
        else
          v25 = *(_QWORD *)(*a2 + 24);
        sub_234118220(*a2, v25, 0);
        sub_2341183F8((_QWORD *)*a2, (unsigned __int16)(*(_WORD *)&buf[8] - *(_WORD *)buf));
        if (*(_DWORD *)a1 == 1)
        {
          if ((v32 & 1) != 0)
          {
            *(_DWORD *)a5 = 1053;
            *(_QWORD *)(a5 + 8) = "src/ble/BtpEngine.cpp";
            v17 = 318;
            goto LABEL_12;
          }
          if ((v32 & 6) == 0)
          {
            *(_DWORD *)a5 = 1053;
            *(_QWORD *)(a5 + 8) = "src/ble/BtpEngine.cpp";
            v17 = 322;
            goto LABEL_12;
          }
          sub_2341182AC(*(_QWORD **)(a1 + 16), a2);
          sub_2341182EC(*(uint64_t **)(a1 + 16));
          result = *(_QWORD **)(a1 + 16);
          if (*result)
          {
            *(_DWORD *)a5 = 194;
            *(_QWORD *)(a5 + 8) = "src/ble/BtpEngine.cpp";
            v17 = 330;
            goto LABEL_12;
          }
        }
        else
        {
          if (*(_DWORD *)a1)
          {
            *(_DWORD *)a5 = 1055;
            *(_QWORD *)(a5 + 8) = "src/ble/BtpEngine.cpp";
            v17 = 334;
            goto LABEL_12;
          }
          v26 = *(_QWORD *)(*a2 + 24);
          *(_QWORD *)buf = *(_QWORD *)(*a2 + 8);
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          *(_QWORD *)&buf[16] = v26;
          LODWORD(v34) = 0;
          *((_QWORD *)&v34 + 1) = "src/lib/support/BufferReader.h";
          LODWORD(v35) = 330;
          if (!*(_QWORD *)buf)
            *(_QWORD *)&buf[16] = 0;
          if ((v32 & 1) == 0)
          {
            v17 = 294;
            v18 = 1053;
            goto LABEL_36;
          }
          sub_234114EA0((uint64_t)buf, (_WORD *)(a1 + 4));
          *(_OWORD *)a5 = v34;
          *(_QWORD *)(a5 + 16) = v35;
          if (*(_DWORD *)a5)
            goto LABEL_13;
          *(_DWORD *)a1 = 1;
          sub_2341183F8((_QWORD *)*a2, (unsigned __int16)(*(_WORD *)&buf[8] - *(_WORD *)buf));
          sub_234118674(0x609uLL, 0x26u, &v31);
          v27 = *(_QWORD *)(a1 + 16);
          if (v27)
            sub_23411814C(v27);
          v28 = v31;
          *(_QWORD *)(a1 + 16) = v31;
          if (!v28)
          {
            v17 = 306;
            v18 = 11;
            goto LABEL_36;
          }
          sub_2341182AC(v28, a2);
          sub_2341182EC(*(uint64_t **)(a1 + 16));
          result = *(_QWORD **)(a1 + 16);
          if (*result)
          {
            v17 = 313;
            v18 = 194;
            goto LABEL_36;
          }
        }
        if ((v32 & 4) == 0)
          return result;
        v29 = result[3];
        if (v29 >= 0x10000)
        {
          *(_DWORD *)a5 = 4;
          *(_QWORD *)(a5 + 8) = "src/ble/BtpEngine.cpp";
          v17 = 341;
        }
        else
        {
          v30 = *(unsigned __int16 *)(a1 + 4);
          if (v29 > v30)
          {
            result = (_QWORD *)sub_234118220((uint64_t)result, v30, 0);
            v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
            LODWORD(v30) = *(unsigned __int16 *)(a1 + 4);
          }
          if (v29 == v30)
          {
            *(_DWORD *)a1 = 2;
            ++*(_WORD *)(a1 + 56);
            return result;
          }
          *(_DWORD *)a5 = 1052;
          *(_QWORD *)(a5 + 8) = "src/ble/BtpEngine.cpp";
          v17 = 350;
        }
        goto LABEL_12;
      }
      v17 = 276;
      v18 = 1055;
    }
    else
    {
      v17 = 262;
      v18 = 1054;
    }
LABEL_36:
    *(_DWORD *)a5 = v18;
    *(_QWORD *)(a5 + 8) = "src/ble/BtpEngine.cpp";
    goto LABEL_12;
  }
  *(_DWORD *)a5 = 47;
  *(_QWORD *)(a5 + 8) = "src/ble/BtpEngine.cpp";
  v17 = 233;
LABEL_12:
  *(_DWORD *)(a5 + 16) = v17;
LABEL_13:
  *(_DWORD *)a1 = 3;
  v19 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a5;
    *(_QWORD *)&buf[16] = *(_QWORD *)(a5 + 16);
    v20 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v20;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v32;
    _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "HandleCharacteristicReceived failed, err = %s, rx_flags = %u", buf, 0x12u);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *(_OWORD *)a5;
    *(_QWORD *)&buf[16] = *(_QWORD *)(a5 + 16);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(2u, 1);
  }
  if (*a4)
  {
    v21 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = *a3;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v22;
      _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_ERROR, "With rx'd ack = %u", buf, 8u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v23 = sub_234117B80(2u, "Ble");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v24;
      _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "With rx buf data length = %u", buf, 8u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(2u, 1);
  }
  result = (_QWORD *)sub_23410DE6C((int *)a1);
  if (*a2)
  {
    result = *(_QWORD **)(a1 + 16);
    if (result)
    {
      return sub_2341182AC(result, a2);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *a2;
      *a2 = 0;
    }
  }
  return result;
}

uint64_t sub_23410DE6C(int *a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  _BOOL4 v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  int v29;
  NSObject *v30;
  int v31;
  NSObject *v32;
  int v33;
  NSObject *v34;
  int v35;
  uint64_t result;
  uint8_t buf[4];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = *((_QWORD *)a1 + 1);
    *(_DWORD *)buf = 134217984;
    v38 = v3;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_ERROR, "mAppState: %p", buf, 0xCu);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v4 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *((unsigned __int16 *)a1 + 14);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "mRxFragmentSize: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v6 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = *a1;
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "mRxState: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v8 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v9 = *((_QWORD *)a1 + 2) != 0;
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v9;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "mRxBuf: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v10 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v11 = *((unsigned __int8 *)a1 + 24);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v11;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "mRxNextSeqNum: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v12 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = *((unsigned __int8 *)a1 + 25);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v13;
    _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "mRxNewestUnackedSeqNum: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v14 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v15 = *((unsigned __int8 *)a1 + 26);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v15;
    _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "mRxOldestUnackedSeqNum: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v16 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = *((unsigned __int16 *)a1 + 27);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v17;
    _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "mRxCharCount: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v18 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v19 = *((unsigned __int16 *)a1 + 28);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v19;
    _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_ERROR, "mRxPacketCount: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v20 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v21 = *((unsigned __int16 *)a1 + 26);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v21;
    _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "mTxFragmentSize: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v22 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    v23 = a1[8];
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v23;
    _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_ERROR, "mTxState: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v24 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    v25 = *((_QWORD *)a1 + 5) != 0;
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v25;
    _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_ERROR, "mTxBuf: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v26 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    v27 = *((unsigned __int8 *)a1 + 48);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v27;
    _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_ERROR, "mTxNextSeqNum: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v28 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    v29 = *((unsigned __int8 *)a1 + 49);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v29;
    _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "mTxNewestUnackedSeqNum: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v30 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    v31 = *((unsigned __int8 *)a1 + 50);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v31;
    _os_log_impl(&dword_233BF3000, v30, OS_LOG_TYPE_ERROR, "mTxOldestUnackedSeqNum: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v32 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    v33 = *((unsigned __int16 *)a1 + 29);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v33;
    _os_log_impl(&dword_233BF3000, v32, OS_LOG_TYPE_ERROR, "mTxCharCount: %d", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(2u, 1);
  v34 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    v35 = *((unsigned __int16 *)a1 + 30);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v35;
    _os_log_impl(&dword_233BF3000, v34, OS_LOG_TYPE_ERROR, "mTxPacketCount: %d", buf, 8u);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
    return sub_2341147D0(2u, 1);
  return result;
}

uint64_t sub_23410E728@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (*(_DWORD *)result == 2)
    *(_DWORD *)result = 0;
  *a2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  return result;
}

BOOL sub_23410E748(uint64_t a1, uint64_t *a2, int a3)
{
  NSObject *v6;
  _BOOL8 result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  char *v15;
  char v16;
  char v17;
  unsigned int v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  NSObject *v27;
  uint64_t v28;
  char v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  __int16 v33;
  __int16 v34[8];
  uint8_t buf[16];

  ++*(_WORD *)(a1 + 58);
  if (!a3 || *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a1 + 24))
  {
    v8 = *(_DWORD *)(a1 + 32);
    if (v8 == 1)
    {
      if (*a2)
        return 0;
      v20 = *(_QWORD **)(a1 + 40);
      v21 = -3;
      if (!a3)
        v21 = -2;
      v15 = (char *)(v20[1] + *(unsigned __int16 *)(a1 + 52) + v21);
      sub_2341181B4(v20, (unint64_t)v15);
      if (a3)
      {
        v22 = *(_BYTE *)(a1 + 25);
        v23 = *(_BYTE *)(a1 + 24);
        *(_BYTE *)(a1 + 25) = v23;
        *(_BYTE *)(a1 + 26) = v23;
        v15[1] = v22;
        v24 = 2;
        v19 = 10;
      }
      else
      {
        v24 = 1;
        v19 = 2;
      }
      v25 = *(_BYTE *)(a1 + 48);
      if (!*(_BYTE *)(a1 + 51))
      {
        *(_BYTE *)(a1 + 51) = 1;
        *(_BYTE *)(a1 + 50) = v25;
      }
      *(_BYTE *)(a1 + 49) = v25;
      *(_BYTE *)(a1 + 48) = v25 + 1;
      v15[v24] = v25;
      v26 = v24 + 1;
    }
    else
    {
      if (v8)
        return 0;
      v9 = *a2;
      if (!*a2)
        return 0;
      v10 = *(_QWORD *)(a1 + 40);
      if (v10)
      {
        sub_23411814C(v10);
        v9 = *a2;
      }
      *(_QWORD *)(a1 + 40) = v9;
      *a2 = 0;
      *(_DWORD *)(a1 + 32) = 1;
      v11 = *(_QWORD **)(a1 + 40);
      v12 = v11[3];
      if (v12 >> 16)
        return 0;
      *(_WORD *)(a1 + 36) = v12;
      if (a3)
        v13 = 5;
      else
        v13 = 4;
      if ((sub_23411853C(v11, v13) & 1) == 0)
      {
        v27 = sub_234117B80(2u, "Ble");
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v34[0] = 0;
          _os_log_impl(&dword_233BF3000, v27, OS_LOG_TYPE_ERROR, "HandleCharacteristicSend: not enough headroom", (uint8_t *)v34, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(2u, 1);
        *(_DWORD *)(a1 + 32) = 3;
        v28 = *(_QWORD *)(a1 + 40);
        if (v28)
          sub_23411814C(v28);
        result = 0;
        *(_QWORD *)(a1 + 40) = 0;
        return result;
      }
      v14 = *(_QWORD **)(a1 + 40);
      v15 = (char *)(v14[1] - v13);
      sub_2341181B4(v14, (unint64_t)v15);
      if (a3)
      {
        v16 = *(_BYTE *)(a1 + 25);
        v17 = *(_BYTE *)(a1 + 24);
        *(_BYTE *)(a1 + 25) = v17;
        *(_BYTE *)(a1 + 26) = v17;
        v15[1] = v16;
        v18 = 2;
        v19 = 9;
      }
      else
      {
        v19 = 1;
        v18 = 1;
      }
      v29 = *(_BYTE *)(a1 + 48);
      if (!*(_BYTE *)(a1 + 51))
      {
        *(_BYTE *)(a1 + 51) = 1;
        *(_BYTE *)(a1 + 50) = v29;
      }
      *(_BYTE *)(a1 + 49) = v29;
      *(_BYTE *)(a1 + 48) = v29 + 1;
      v30 = &v15[v18];
      *v30 = v29;
      v30[1] = *(_BYTE *)(a1 + 36);
      v26 = v18 + 3;
      v30[2] = *(_BYTE *)(a1 + 37);
    }
    v31 = *(unsigned __int16 *)(a1 + 52);
    v32 = *(_QWORD *)(a1 + 40);
    if (*(unsigned __int16 *)(a1 + 36) + v26 <= v31)
    {
      sub_234118220(v32, (unsigned __int16)(*(_WORD *)(a1 + 36) + v26), 0);
      v33 = 0;
      v19 |= 4u;
      *(_DWORD *)(a1 + 32) = 2;
      ++*(_WORD *)(a1 + 60);
    }
    else
    {
      sub_234118220(v32, v31, 0);
      v33 = *(_WORD *)(a1 + 36) + v26 - *(_WORD *)(a1 + 52);
    }
    *(_WORD *)(a1 + 36) = v33;
    *v15 = v19;
    return 1;
  }
  v6 = sub_234117B80(2u, "Ble");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "HandleCharacteristicSend: send_ack true, but nothing to acknowledge.", buf, 2u);
  }
  result = sub_234114844(1u);
  if (result)
  {
    sub_2341147D0(2u, 1);
    return 0;
  }
  return result;
}

uint64_t sub_23410EA70@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (*(_DWORD *)(result + 32) == 2)
    *(_DWORD *)(result + 32) = 0;
  *a2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = 0;
  return result;
}

const char *sub_23410EA90(_DWORD *a1, char *a2, socklen_t a3)
{
  const void *v6;
  int v7;

  if (sub_23410EDDC(a1))
  {
    v6 = a1 + 3;
    v7 = 2;
  }
  else
  {
    v7 = 30;
    v6 = a1;
  }
  return inet_ntop(v7, v6, a2, a3);
}

uint64_t sub_23410EAE0(char *a1, __n128 *a2)
{
  __n128 v4;
  __n128 v6;
  __n128 v7;

  if (strchr(a1, 58))
  {
    if (inet_pton(30, a1, &v7) >= 1)
    {
      sub_23410ED5C(&v6, &v7);
      v4 = v6;
LABEL_6:
      *a2 = v4;
      return 1;
    }
  }
  else if (inet_pton(2, a1, &v6) >= 1)
  {
    sub_23410ED44((uint64_t)&v7, &v6);
    v4 = v7;
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_23410EB78(void *__src, size_t __n, __n128 *a3)
{
  char __dst[46];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (__n > 0x2D)
    return 0;
  memcpy(__dst, __src, __n);
  __dst[__n] = 0;
  return sub_23410EAE0(__dst, a3);
}

uint64_t sub_23410EC08(char *a1, __n128 *a2, _DWORD *a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v10;
  char *v11[3];
  char *__lasts;

  __lasts = 0;
  v6 = strtok_r(a1, "%", &__lasts);
  if (v6 && (v7 = v6, (v8 = strtok_r(0, "%", &__lasts)) != 0))
  {
    memset(v11, 0, sizeof(v11));
    sub_23410F5CC(v8, a3, (uint64_t)v11);
    if (LODWORD(v11[0]))
      return 0;
    v10 = v7;
  }
  else
  {
    *a3 = 0;
    v10 = a1;
  }
  return sub_23410EAE0(v10, a2);
}

BOOL sub_23410ECAC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL sub_23410ECF8(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2] || a1[3] != a2[3];
}

uint64_t sub_23410ED44(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = -65536;
  *(_DWORD *)(result + 12) = *a2;
  return result;
}

__n128 sub_23410ED5C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_23410ED68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_23410ED70(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_23410ED7C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;

  v3 = *(unsigned __int8 *)(result + 1);
  if (v3 == 30)
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = *(_QWORD *)(result + 16);
    v6 = 248;
  }
  else
  {
    if (v3 != 2)
    {
      v6 = 250;
      v7 = 257;
      goto LABEL_7;
    }
    v4 = 0;
    v5 = ((unint64_t)*(unsigned int *)(result + 4) << 32) | 0xFFFF0000;
    v6 = 242;
  }
  v7 = 0;
  *a2 = v4;
  a2[1] = v5;
LABEL_7:
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/inet/IPAddress.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

BOOL sub_23410EDDC(_DWORD *a1)
{
  return !*a1 && !a1[1] && a1[2] == -65536;
}

BOOL sub_23410EE04(_DWORD *a1)
{
  return !*a1 && !a1[1] && a1[2] == -65536 && (a1[3] & 0xF0) == 224;
}

BOOL sub_23410EE3C(_DWORD *a1)
{
  return !*a1 && !a1[1] && a1[2] == -65536 && a1[3] == -1;
}

BOOL sub_23410EE70(uint64_t a1)
{
  if (*(_BYTE *)a1 == 0xFF)
    return 1;
  if (*(_DWORD *)a1 || *(_DWORD *)(a1 + 4) || *(_DWORD *)(a1 + 8) != -65536)
    return 0;
  return (*(_DWORD *)(a1 + 12) & 0xF0) == 224;
}

BOOL sub_23410EEBC(unsigned __int8 *a1)
{
  return *a1 == 0xFF;
}

BOOL sub_23410EED0(uint64_t a1)
{
  if (*(_DWORD *)a1 == (_DWORD)xmmword_25615DD84
    && *(_QWORD *)(a1 + 4) == *(_QWORD *)((char *)&xmmword_25615DD84 + 4)
    && *(_DWORD *)(a1 + 12) == HIDWORD(xmmword_25615DD84))
  {
    return 0;
  }
  if (*(_DWORD *)a1 || *(_DWORD *)(a1 + 4))
    return 1;
  return *(_DWORD *)(a1 + 8) != -65536;
}

BOOL sub_23410EF4C(_DWORD *a1)
{
  return (*a1 & 0xE0) == 32;
}

BOOL sub_23410EF60(_DWORD *a1)
{
  return (*a1 & 0xFE) == 252;
}

BOOL sub_23410EF74(_DWORD *a1)
{
  return *a1 == 33022 && a1[1] == 0;
}

unint64_t sub_23410EF9C(uint64_t a1)
{
  if ((*(_DWORD *)a1 & 0xFE) == 0xFC)
    return bswap64(*(_QWORD *)(a1 + 8));
  else
    return 0;
}

uint64_t sub_23410EFC0(_DWORD *a1)
{
  if ((*a1 & 0xFE) == 0xFC)
    return (unsigned __int16)bswap32(a1[1]);
  else
    return 0;
}

unint64_t sub_23410EFE8(_DWORD *a1)
{
  if ((*a1 & 0xFE) == 0xFC)
    return (bswap32(a1[1]) >> 16) | ((unint64_t)bswap32(*a1 & 0xFFFFFF00) << 16);
  else
    return 0;
}

uint64_t sub_23410F01C(_DWORD *a1)
{
  if (*a1 || a1[1])
    return 2;
  if (a1[2] || a1[3])
  {
    if (a1[2] == -65536)
      return 1;
    return 2;
  }
  return 3;
}

__n128 sub_23410F060(__n128 *a1, _OWORD **a2)
{
  __n128 result;

  result = *a1;
  *(*a2)++ = *a1;
  return result;
}

__n128 sub_23410F07C(__n128 **a1, __n128 *a2)
{
  __n128 result;

  result = **a1;
  *a2 = result;
  ++*a1;
  return result;
}

unint64_t sub_23410F098(unint64_t a1, unsigned __int16 a2)
{
  return bswap64(a2 | (unint64_t)((unsigned __int16)a1 << 16) | (((a1 >> 16) & 0xFFFFFF) << 32) | 0xFD00000000000000);
}

uint64_t sub_23410F0BC()
{
  return 33022;
}

unint64_t sub_23410F0C8(int a1, char a2, unsigned __int16 *a3)
{
  return bswap64(bswap32(*(_DWORD *)(a3 + 1)) | ((unint64_t)((a1 << 20) | ((a2 & 0xF) << 16) | (bswap32(*a3) >> 16)) << 32) | 0xFF00000000000000);
}

unint64_t sub_23410F0F8(unsigned __int8 a1, char a2, unsigned int a3)
{
  uint64_t v4;
  __int16 v5;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v4 = 0;
  v6 = bswap32(a3);
  return sub_23410F0C8(a1, a2, (unsigned __int16 *)&v4);
}

unint64_t sub_23410F158(char a1, unsigned int a2)
{
  uint64_t v3;
  __int16 v4;
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  v3 = 0;
  v5 = bswap32(a2);
  return sub_23410F0C8(0, a1, (unsigned __int16 *)&v3);
}

unint64_t sub_23410F1C0(char a1, char a2, unsigned __int16 *a3)
{
  return sub_23410F0C8(a1 & 0xFE | 1u, a2, a3);
}

unint64_t sub_23410F1CC(char a1, char a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  unsigned __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v6) = 0;
  HIBYTE(v6) = a2;
  v4 = *a3;
  v7 = HIBYTE(*a3);
  v8 = BYTE6(v4);
  v9 = BYTE5(v4);
  v10 = BYTE4(v4);
  v11 = BYTE3(v4);
  v12 = BYTE2(v4);
  v13 = BYTE1(v4);
  v14 = v4;
  v15 = HIBYTE(a4);
  v16 = BYTE2(a4);
  v17 = BYTE1(a4);
  v18 = a4;
  return sub_23410F0C8(3, a1, &v6);
}

uint64_t sub_23410F288()
{
  return 0;
}

uint64_t sub_23410F294()
{
  return 0;
}

double sub_23410F2B0(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = xmmword_25615DD84;
  result = *(double *)&xmmword_25615DD84;
  *(_OWORD *)(a1 + 16) = xmmword_25615DD84;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

BOOL sub_23410F2D0(uint64_t a1)
{
  return !*(_DWORD *)a1
      && !*(_DWORD *)(a1 + 4)
      && !*(_DWORD *)(a1 + 8)
      && !*(_DWORD *)(a1 + 12)
      && *(_BYTE *)(a1 + 16) == 0;
}

BOOL sub_23410F308(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_23410ECAC((_DWORD *)a1, (_DWORD *)a2);
  if (result)
    return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return result;
}

BOOL sub_23410F340(uint64_t a1, uint64_t a2)
{
  return sub_23410ECF8((_DWORD *)a1, (_DWORD *)a2) || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16);
}

BOOL sub_23410F380(uint64_t a1, int *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 >= 0x80)
    v2 = 128;
  if (v2 < 0x20)
  {
    v3 = 0;
    return !(_BYTE)v2 || ((a2[v3] ^ *(_DWORD *)(a1 + 4 * v3)) & bswap32(-1 << (32 - v2))) == 0;
  }
  else
  {
    v3 = ((v2 - 32) >> 5) + 1;
    v4 = v3;
    v5 = (int *)a1;
    v6 = a2;
    while (1)
    {
      v8 = *v5++;
      v7 = v8;
      v9 = *v6++;
      if (v7 != v9)
        return 0;
      LOBYTE(v2) = v2 - 32;
      if (!--v4)
        return !(_BYTE)v2 || ((a2[v3] ^ *(_DWORD *)(a1 + 4 * v3)) & bswap32(-1 << (32 - v2))) == 0;
    }
  }
}

_QWORD *sub_23410F414()
{
  return sub_234108530(off_2561579F8);
}

BOOL sub_23410F420(char *a1, size_t a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  const char *v5;
  __int128 v7;
  uint64_t v8;

  v3 = *(_DWORD *)a3 & 0xFF000700;
  if (v3 == 256)
  {
    v4 = *(_DWORD *)a3 - 257;
    if (v4 > 0x1A)
      v5 = 0;
    else
      v5 = off_250503B18[v4];
    v7 = *a3;
    v8 = *((_QWORD *)a3 + 2);
    sub_2341084C8(a1, a2, "Inet", &v7, v5);
  }
  return v3 == 256;
}

unint64_t sub_23410F49C@<X0>(unsigned int *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  int v8;
  int *v9;
  char __s[16];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  result = *a1;
  if ((_DWORD)result)
  {
    if (!if_indextoname(result, __s))
    {
      v9 = __error();
      return sub_234117EFC(*v9, "src/inet/InetInterface.cpp", 446, a4);
    }
    result = strlen(__s);
    if (result >= a3)
    {
      *(_DWORD *)a4 = 25;
      *(_QWORD *)(a4 + 8) = "src/inet/InetInterface.cpp";
      v8 = 451;
    }
    else
    {
      if (a2)
      {
        result = (unint64_t)strncpy(a2, __s, a3);
        a2[a3 - 1] = 0;
      }
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/inet/InetInterface.cpp";
      v8 = 454;
    }
  }
  else if (a3)
  {
    *a2 = 0;
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/inet/InetInterface.cpp";
    v8 = 461;
  }
  else
  {
    *(_DWORD *)a4 = 25;
    *(_QWORD *)(a4 + 8) = "src/inet/InetInterface.cpp";
    v8 = 458;
  }
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

uint64_t sub_23410F5CC@<X0>(const char *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  int *v8;
  char *__endptr;

  __endptr = 0;
  result = strtoul(a1, &__endptr, 10);
  if (!*__endptr)
  {
    if ((unint64_t)(result - 1) > 0xFD)
    {
      *(_DWORD *)a3 = 270;
      *(_QWORD *)(a3 + 8) = "src/inet/InetInterface.cpp";
      v7 = 477;
    }
    else
    {
      *a2 = result;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/inet/InetInterface.cpp";
      v7 = 474;
    }
    goto LABEL_9;
  }
  result = if_nametoindex(a1);
  *a2 = result;
  if ((_DWORD)result)
  {
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/inet/InetInterface.cpp";
    v7 = 487;
LABEL_9:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 6)
  {
    *(_DWORD *)a3 = 270;
    *(_QWORD *)(a3 + 8) = "src/inet/InetInterface.cpp";
    v7 = 485;
    goto LABEL_9;
  }
  v8 = __error();
  return sub_234117EFC(*v8, "src/inet/InetInterface.cpp", 485, a3);
}

uint64_t sub_23410F6E0()
{
  int v0;
  unsigned int v1;

  if (dword_256157A08 == -1)
  {
    v0 = socket(2, 1, 0);
    fcntl(v0, 2, 0x1000000);
    while (1)
    {
      v1 = __ldaxr((unsigned int *)&dword_256157A08);
      if (v1 != -1)
        break;
      if (!__stlxr(v0, (unsigned int *)&dword_256157A08))
        return dword_256157A08;
    }
    __clrex();
    close(v0);
  }
  return dword_256157A08;
}

uint64_t sub_23410F764()
{
  uint64_t result;

  result = dword_256157A08;
  if (dword_256157A08 != -1)
  {
    result = close(dword_256157A08);
    dword_256157A08 = -1;
  }
  return result;
}

uint64_t sub_23410F798(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 15) = 0;
  return result;
}

_QWORD *sub_23410F7A4(_QWORD *result)
{
  if (*result)
    sub_2341146DC();
  return result;
}

if_nameindex *sub_23410F7D4(_QWORD *a1)
{
  if (*a1)
    return (if_nameindex *)(*(_DWORD *)(*a1 + 16 * a1[1]) != 0);
  else
    return sub_23410F7F8((uint64_t)a1);
}

if_nameindex *sub_23410F7F8(uint64_t a1)
{
  if_nameindex *result;
  uint64_t v3;

  result = *(if_nameindex **)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (result[v3].if_index)
    {
      *(_QWORD *)(a1 + 8) = v3 + 1;
      *(_WORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 18) = 0;
    }
  }
  else
  {
    result = j__if_nameindex();
    *(_QWORD *)a1 = result;
    if (!result)
      return result;
  }
  return (if_nameindex *)(result[*(_QWORD *)(a1 + 8)].if_index != 0);
}

if_nameindex *sub_23410F860@<X0>(if_nameindex *result@<X0>, _DWORD *a2@<X8>)
{
  if_nameindex *v2;
  uint64_t v4;
  int v5;

  v2 = result;
  v4 = *(_QWORD *)&result->if_index;
  if (!*(_QWORD *)&result->if_index)
  {
    result = sub_23410F7F8((uint64_t)result);
    if (!(_DWORD)result)
    {
      v5 = 0;
      goto LABEL_6;
    }
    v4 = *(_QWORD *)&v2->if_index;
  }
  v5 = *(_DWORD *)(v4 + 16 * (uint64_t)v2->if_name);
LABEL_6:
  *a2 = v5;
  return result;
}

uint64_t *sub_23410F8B0@<X0>(uint64_t *result@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  int v12;

  v6 = result;
  v8 = *result;
  if (*result)
  {
    v9 = result[1];
    if (!*(_DWORD *)(v8 + 16 * v9))
      goto LABEL_9;
  }
  else
  {
    result = (uint64_t *)sub_23410F7F8((uint64_t)result);
    if (!(_DWORD)result)
    {
LABEL_9:
      v12 = 581;
      v11 = 3;
      goto LABEL_13;
    }
    v8 = *v6;
    v9 = v6[1];
  }
  v10 = *(const char **)(v8 + 16 * v9 + 8);
  result = (uint64_t *)strlen(v10);
  if ((unint64_t)result >= a3)
  {
    v12 = 582;
    v11 = 25;
  }
  else
  {
    if (a2)
    {
      result = (uint64_t *)strncpy(a2, v10, a3);
      v11 = 0;
      a2[a3 - 1] = 0;
    }
    else
    {
      v11 = 0;
    }
    v12 = 584;
  }
LABEL_13:
  *(_DWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = "src/inet/InetInterface.cpp";
  *(_DWORD *)(a4 + 16) = v12;
  return result;
}

uint64_t sub_23410F97C(uint64_t a1)
{
  return sub_23410F994(a1) & 1;
}

uint64_t sub_23410F994(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char __dst[16];
  __int16 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 18))
  {
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v4 = *(_QWORD *)(a1 + 8);
      if (!*(_DWORD *)(v3 + 16 * v4))
        return *(__int16 *)(a1 + 16);
    }
    else
    {
      if (!sub_23410F7F8(a1))
        return *(__int16 *)(a1 + 16);
      v3 = *(_QWORD *)a1;
      v4 = *(_QWORD *)(a1 + 8);
    }
    strncpy(__dst, *(const char **)(v3 + 16 * v4 + 8), 0x10uLL);
    __dst[15] = 0;
    v5 = sub_23410F6E0();
    if (!ioctl(v5, 0xC0206911uLL, __dst))
    {
      *(_WORD *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 18) = 1;
    }
  }
  return *(__int16 *)(a1 + 16);
}

uint64_t sub_23410FA64(uint64_t a1)
{
  return (sub_23410F994(a1) >> 3) & 1;
}

uint64_t sub_23410FA7C(uint64_t a1)
{
  return (sub_23410F994(a1) >> 15) & 1;
}

uint64_t sub_23410FA94(uint64_t a1)
{
  return (sub_23410F994(a1) >> 1) & 1;
}

void sub_23410FAAC(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/inet/InetInterface.cpp";
  *(_DWORD *)(a1 + 16) = 631;
}

void sub_23410FACC(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/inet/InetInterface.cpp";
  *(_DWORD *)(a1 + 16) = 636;
}

_QWORD *sub_23410FAEC(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

_QWORD *sub_23410FAF4(_QWORD *a1)
{
  if (*a1)
  {
    MEMORY[0x23493EAA0]();
    *a1 = 0;
    a1[1] = 0;
  }
  return a1;
}

uint64_t sub_23410FB24(uint64_t a1)
{
  if (*(_QWORD *)a1)
    return *(_QWORD *)(a1 + 8) != 0;
  else
    return sub_23410FB40((ifaddrs **)a1);
}

uint64_t sub_23410FB40(ifaddrs **a1)
{
  ifaddrs *v2;
  ifaddrs *v3;
  ifaddrs *ifa_next;
  sockaddr *ifa_addr;
  int sa_family;

  v2 = *a1;
  while (1)
  {
    if (v2)
    {
      v3 = a1[1];
      if (!v3)
        return 0;
      ifa_next = v3->ifa_next;
    }
    else
    {
      if (getifaddrs(a1) < 0)
        return 0;
      ifa_next = *a1;
      v2 = *a1;
    }
    a1[1] = ifa_next;
    if (!ifa_next)
      break;
    ifa_addr = ifa_next->ifa_addr;
    if (ifa_addr)
    {
      sa_family = ifa_addr->sa_family;
      if (sa_family == 30 || sa_family == 2)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_23410FBB4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  v4 = result;
  if (*(_QWORD *)result)
  {
    v6 = *(_QWORD *)(result + 8);
    if (!v6)
      goto LABEL_7;
    return sub_23410ED7C(*(_QWORD *)(v6 + 24), a2, a3);
  }
  result = sub_23410FB40((ifaddrs **)result);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    return sub_23410ED7C(*(_QWORD *)(v6 + 24), a2, a3);
  }
LABEL_7:
  *(_DWORD *)a3 = 10;
  *(_QWORD *)(a3 + 8) = "src/inet/InetInterface.cpp";
  *(_DWORD *)(a3 + 16) = 696;
  return result;
}

uint64_t sub_23410FC3C(ifaddrs **a1)
{
  ifaddrs *v2;
  int sa_family;
  unsigned __int8 *v4;
  unsigned int v5;

  if (*a1)
  {
    v2 = a1[1];
    if (!v2)
      return 0;
  }
  else
  {
    if (!sub_23410FB40(a1))
      return 0;
    v2 = a1[1];
  }
  sa_family = v2->ifa_addr->sa_family;
  if (sa_family == 2)
  {
    v4 = (unsigned __int8 *)&v2->ifa_netmask->sa_data[2];
    v5 = 4;
    return sub_23410FCC0(v4, v5);
  }
  if (sa_family != 30)
    return 0;
  v4 = (unsigned __int8 *)&v2->ifa_netmask->sa_data[6];
  v5 = 16;
  return sub_23410FCC0(v4, v5);
}

uint64_t sub_23410FCC0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  if (a2)
  {
    v2 = 0;
    LOBYTE(v3) = 8 * a2;
    v4 = a2;
    while (1)
    {
      v6 = *a1++;
      v5 = v6;
      if (v6 != 255)
        break;
      v2 += 8;
      if (!--v4)
        return v3;
    }
    v7 = v2 | 4;
    if (v5 > 0xEF)
    {
      v8 = v5;
    }
    else
    {
      v7 = v2;
      v8 = v5 >> 4;
    }
    if ((~v8 & 0xC) != 0)
      v8 >>= 2;
    else
      v7 |= 2u;
    return ((v8 >> 1) & 1 | v7);
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3;
}

uint64_t sub_23410FD30@<X0>(ifaddrs **a1@<X0>, _DWORD *a2@<X8>)
{
  ifaddrs *v4;
  uint64_t result;

  if (!*a1)
  {
    result = sub_23410FB40(a1);
    if (!(_DWORD)result)
      goto LABEL_7;
    v4 = a1[1];
LABEL_6:
    result = if_nametoindex(v4->ifa_name);
    goto LABEL_7;
  }
  v4 = a1[1];
  if (v4)
    goto LABEL_6;
  result = 0;
LABEL_7:
  *a2 = result;
  return result;
}

unint64_t sub_23410FD84@<X0>(unint64_t result@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  int v10;
  int v11;

  v6 = result;
  if (*(_QWORD *)result)
  {
    v8 = *(_QWORD *)(result + 8);
    if (!v8)
      goto LABEL_9;
  }
  else
  {
    result = sub_23410FB40((ifaddrs **)result);
    if (!(_DWORD)result)
    {
LABEL_9:
      v11 = 730;
      v10 = 3;
      goto LABEL_13;
    }
    v8 = *(_QWORD *)(v6 + 8);
  }
  v9 = *(const char **)(v8 + 8);
  result = strlen(v9);
  if (result >= a3)
  {
    v11 = 731;
    v10 = 25;
  }
  else
  {
    if (a2)
    {
      result = (unint64_t)strncpy(a2, v9, a3);
      v10 = 0;
      a2[a3 - 1] = 0;
    }
    else
    {
      v10 = 0;
    }
    v11 = 733;
  }
LABEL_13:
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = "src/inet/InetInterface.cpp";
  *(_DWORD *)(a4 + 16) = v11;
  return result;
}

uint64_t sub_23410FE44(ifaddrs **a1)
{
  ifaddrs *v2;
  uint64_t result;

  if (*a1)
  {
    v2 = a1[1];
    if (!v2)
      return 0;
  }
  else
  {
    result = sub_23410FB40(a1);
    if (!(_DWORD)result)
      return result;
    v2 = a1[1];
  }
  return v2->ifa_flags & 1;
}

uint64_t sub_23410FE90(ifaddrs **a1)
{
  ifaddrs *v2;
  uint64_t result;

  if (*a1)
  {
    v2 = a1[1];
    if (!v2)
      return 0;
  }
  else
  {
    result = sub_23410FB40(a1);
    if (!(_DWORD)result)
      return result;
    v2 = a1[1];
  }
  return (LOBYTE(v2->ifa_flags) >> 3) & 1;
}

uint64_t sub_23410FEDC(ifaddrs **a1)
{
  ifaddrs *v2;
  uint64_t result;

  if (*a1)
  {
    v2 = a1[1];
    if (!v2)
      return 0;
  }
  else
  {
    result = sub_23410FB40(a1);
    if (!(_DWORD)result)
      return result;
    v2 = a1[1];
  }
  return BYTE1(v2->ifa_flags) >> 7;
}

uint64_t sub_23410FF28(ifaddrs **a1)
{
  ifaddrs *v2;
  uint64_t result;

  if (*a1)
  {
    v2 = a1[1];
    if (!v2)
      return 0;
  }
  else
  {
    result = sub_23410FB40(a1);
    if (!(_DWORD)result)
      return result;
    v2 = a1[1];
  }
  return (LOBYTE(v2->ifa_flags) >> 1) & 1;
}

uint64_t sub_23410FF74@<X0>(uint64_t result@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  ifaddrs *v6;
  sockaddr *ifa_addr;
  int v8;
  int v9;
  ifaddrs *v10;
  int v11;
  __n128 v12;
  ifaddrs *v13;

  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/inet/InetInterface.cpp";
    v11 = 758;
    goto LABEL_19;
  }
  v5 = (int *)result;
  v13 = 0;
  result = getifaddrs(&v13);
  if ((_DWORD)result == -1)
  {
    v11 = 766;
    v9 = 272;
    goto LABEL_18;
  }
  v6 = v13;
  if (!v13)
  {
    v10 = 0;
    v9 = 272;
    goto LABEL_17;
  }
  while (1)
  {
    ifa_addr = v6->ifa_addr;
    if (!ifa_addr || ifa_addr->sa_family != 30)
      goto LABEL_11;
    if (!*v5)
      break;
    v8 = *v5;
    if (v8 == if_nametoindex(v6->ifa_name))
    {
      ifa_addr = v6->ifa_addr;
      break;
    }
LABEL_11:
    v6 = v6->ifa_next;
    if (!v6)
    {
      v9 = 272;
      goto LABEL_13;
    }
  }
  if (ifa_addr->sa_data[6] != 254 || (ifa_addr->sa_data[7] & 0xC0) != 0x80)
    goto LABEL_11;
  sub_23410ED5C(&v12, (__n128 *)&ifa_addr->sa_data[6]);
  v9 = 0;
  *a2 = v12;
LABEL_13:
  v10 = v13;
LABEL_17:
  result = MEMORY[0x23493EAA0](v10);
  v11 = 788;
LABEL_18:
  *(_DWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = "src/inet/InetInterface.cpp";
LABEL_19:
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

ifaddrs *sub_234110098@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  ifaddrs *result;
  _DWORD v5[6];
  ifaddrs *v6[2];
  ifaddrs *v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
LABEL_4:
  if (sub_23410FB40(&v7))
  {
    while (1)
    {
      sub_23410FBB4((uint64_t)&v7, v6, (uint64_t)v5);
      if (!v5[0] && sub_23410ECAC(a1, v6))
        break;
      sub_23410FB40(&v7);
      if (!v7)
        goto LABEL_4;
      if (!v8)
        goto LABEL_9;
    }
    sub_23410FD30(&v7, a2);
  }
  else
  {
LABEL_9:
    *a2 = 0;
  }
  result = v7;
  if (v7)
    return (ifaddrs *)MEMORY[0x23493EAA0]();
  return result;
}

uint64_t sub_234110140(int *a1)
{
  uint64_t v2;
  _DWORD v4[7];
  _QWORD v5[2];
  char v6;
  ifaddrs *v7;
  uint64_t v8;

  if (sub_23410EF74(a1))
    return 1;
  v7 = 0;
  v8 = 0;
LABEL_6:
  if (sub_23410FB40(&v7))
  {
    while (1)
    {
      sub_23410FBB4((uint64_t)&v7, v5, (uint64_t)v4);
      if (!v4[0] && !sub_23410EDDC(v5) && !sub_23410EF74(v5))
      {
        v6 = sub_23410FC3C(&v7);
        if (sub_23410F380((uint64_t)v5, a1))
          break;
      }
      sub_23410FB40(&v7);
      if (!v7)
        goto LABEL_6;
      if (!v8)
        goto LABEL_13;
    }
    v2 = 1;
  }
  else
  {
LABEL_13:
    v2 = 0;
  }
  if (v7)
    MEMORY[0x23493EAA0]();
  return v2;
}

double sub_234110214@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v7;
  double result;
  int v14;
  int v15;
  __int128 v16;
  int v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a1[88])
  {
    *(_DWORD *)a6 = 3;
    *(_QWORD *)(a6 + 8) = "src/inet/TCPEndPoint.cpp";
    v7 = 48;
LABEL_3:
    *(_DWORD *)(a6 + 16) = v7;
    return result;
  }
  if (sub_23410ECF8(a3, &xmmword_25615DD84)
    && sub_23410F01C(a3) != 3
    && sub_23410F01C(a3) != (_DWORD)a2)
  {
    *(_DWORD *)a6 = 257;
    *(_QWORD *)(a6 + 8) = "src/inet/TCPEndPoint.cpp";
    v7 = 53;
    goto LABEL_3;
  }
  (*(void (**)(int *__return_ptr, _BYTE *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(&v15, a1, a2, a3, a4, a5);
  v14 = v15;
  v18 = v16;
  v19 = v17;
  if (!v15)
    a1[88] = 1;
  *(_DWORD *)a6 = v14;
  result = *(double *)&v18;
  *(_OWORD *)(a6 + 4) = v18;
  *(_DWORD *)(a6 + 20) = v19;
  return result;
}

int *sub_234110358@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v3;

  if (*((_BYTE *)result + 88) == 1)
  {
    v3 = result;
    *(_OWORD *)a2 = xmmword_250503BF0;
    *(_QWORD *)(a2 + 16) = 69;
    result = (int *)(*(uint64_t (**)(int *))(*(_QWORD *)result + 80))(result);
    if (!*(_DWORD *)a2)
    {
      result = sub_2341103E4(v3 + 2);
      *((_BYTE *)v3 + 88) = 2;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/inet/TCPEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 68;
  }
  return result;
}

int *sub_2341103E4(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 == -1)
    sub_2342590FC((uint64_t)a1);
  if (!v1)
    sub_234259060((uint64_t)a1);
  *a1 = v1 + 1;
  return a1 - 2;
}

unsigned __int8 *sub_234110414@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  _QWORD v9[3];

  if (result[88] >= 2u)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/inet/TCPEndPoint.cpp";
    *(_DWORD *)(a5 + 16) = 85;
  }
  else
  {
    v6 = result;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    v8 = *a4;
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, int *))(*(_QWORD *)result + 88))(result, a2, a3, &v8);
    if (!*(_DWORD *)a5)
    {
      v7 = *((unsigned int *)v6 + 29);
      if ((_DWORD)v7)
        result = (unsigned __int8 *)(*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t), unsigned __int8 *))(**(_QWORD **)(*((_QWORD *)v6 + 3) + 16) + 40))(v9, *(_QWORD *)(*((_QWORD *)v6 + 3) + 16), v7, sub_234110BE0, v6);
      *(_OWORD *)a5 = xmmword_250503C08;
      *(_QWORD *)(a5 + 16) = 86;
    }
  }
  return result;
}

_QWORD *sub_2341104D8(_QWORD *result)
{
  uint64_t v1;
  _QWORD v2[3];

  v1 = *((unsigned int *)result + 29);
  if ((_DWORD)v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t), _QWORD *))(**(_QWORD **)(result[3] + 16) + 40))(v2, *(_QWORD *)(result[3] + 16), v1, sub_234110BE0, result);
  return result;
}

double sub_23411051C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;

  if ((*(unsigned __int8 *)(a1 + 88) | 2) == 6)
  {
    v9 = xmmword_250503C20;
    v10 = 98;
    v7 = *(_QWORD *)(a1 + 104);
    if (v7)
    {
      sub_2341182AC(*(_QWORD **)(a1 + 104), a2);
    }
    else
    {
      *(_QWORD *)(a1 + 104) = *a2;
      *a2 = 0;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 96))(a1, v7 == 0);
    if (!*(_DWORD *)a4)
    {
      if (a3)
        sub_234110604(a1, &v9);
      result = *(double *)&v9;
      *(_OWORD *)a4 = v9;
      a4[2] = v10;
    }
  }
  else
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "src/inet/TCPEndPoint.cpp";
    *((_DWORD *)a4 + 4) = 97;
  }
  return result;
}

void sub_234110604(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 112))(a2);
  if (*(_DWORD *)a2)
  {
    v4 = *(_OWORD *)a2;
    v5 = a2[2];
    sub_234110788(a1, &v4, 0);
  }
}

void sub_23411066C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 88) & 0xFC) == 4)
  {
    v6 = *(_QWORD *)(a1 + 96);
    if (v6)
      sub_23411814C(v6);
    v7 = 0;
    *(_QWORD *)(a1 + 96) = *a2;
    *a2 = 0;
    v8 = 126;
  }
  else
  {
    v8 = 122;
    v7 = 3;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/inet/TCPEndPoint.cpp";
  *(_DWORD *)(a3 + 16) = v8;
}

uint64_t sub_2341106E8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 104);
  if (v1)
    return *(_QWORD *)(v1 + 16);
  else
    return 0;
}

uint64_t sub_234110700(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 96);
  if (v1)
    return *(_QWORD *)(v1 + 16);
  else
    return 0;
}

void sub_234110718(uint64_t a1)
{
  int v1;
  __int128 v2;
  int v3;
  _QWORD v4[3];

  v1 = *(unsigned __int8 *)(a1 + 88);
  if ((v1 & 0xFC) == 4)
  {
    if (v1 == 6)
    {
      LODWORD(v2) = 0;
      *((_QWORD *)&v2 + 1) = "src/inet/TCPEndPoint.cpp";
      v3 = 161;
      sub_234110788(a1, &v2, 0);
    }
    else if (v1 == 4)
    {
      *(_BYTE *)(a1 + 88) = 5;
      sub_234110604(a1, v4);
    }
  }
}

void sub_234110788(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, __int128 *);
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v6 = *(unsigned __int8 *)(a1 + 88);
  if ((v6 & 0xFC) == 4)
  {
    if (!*(_DWORD *)a2 && (*(_QWORD *)(a1 + 104) || *(_QWORD *)(a1 + 96)))
      v7 = 7;
    else
      v7 = 8;
    *(_BYTE *)(a1 + 88) = v7;
  }
  else
  {
    v8 = 8;
    *(_BYTE *)(a1 + 88) = 8;
    if ((_DWORD)v6 == 8)
      goto LABEL_11;
  }
  (*(void (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24)
                                                                                                  + 16)
                                                                                    + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), sub_234110BE0, a1);
  v8 = *(unsigned __int8 *)(a1 + 88);
LABEL_11:
  if (v8 != (_DWORD)v6)
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 128))(a1, &v17, v6);
    if (*(_BYTE *)(a1 + 88) == 8)
    {
      v9 = *(_QWORD *)(a1 + 104);
      if (v9)
        sub_23411814C(v9);
      *(_QWORD *)(a1 + 104) = 0;
      v10 = *(_QWORD *)(a1 + 96);
      if (v10)
        sub_23411814C(v10);
      *(_QWORD *)(a1 + 96) = 0;
      if ((a3 & 1) != 0)
      {
LABEL_18:
        if (v6 < 2)
          return;
LABEL_27:
        sub_2341109D8(a1 + 8);
        return;
      }
      if ((v6 - 4) >= 4)
      {
        if ((_DWORD)v6 != 3)
          goto LABEL_18;
        v11 = *(void (**)(uint64_t, __int128 *))(a1 + 32);
        if (!v11)
          goto LABEL_27;
        v15 = *a2;
        v16 = *((_QWORD *)a2 + 2);
        v12 = &v15;
      }
      else
      {
        v11 = *(void (**)(uint64_t, __int128 *))(a1 + 56);
        if (!v11)
          goto LABEL_27;
        v13 = *a2;
        v14 = *((_QWORD *)a2 + 2);
        v12 = &v13;
      }
      v11(a1, v12);
      goto LABEL_27;
    }
  }
}

void sub_2341108F8(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  int v4;

  v2 = a1[12];
  if (v2)
    sub_23411814C(v2);
  a1[12] = 0;
  a1[4] = 0;
  a1[7] = 0;
  a1[8] = 0;
  LODWORD(v3) = 0;
  *((_QWORD *)&v3 + 1) = "src/inet/TCPEndPoint.cpp";
  v4 = 176;
  sub_234110788((uint64_t)a1, &v3, 1);
}

void sub_23411095C(_QWORD *a1)
{
  __int128 v1;
  int v2;

  a1[4] = 0;
  a1[7] = 0;
  a1[8] = 0;
  LODWORD(v1) = 2;
  *((_QWORD *)&v1 + 1) = "src/inet/TCPEndPoint.cpp";
  v2 = 186;
  sub_234110788((uint64_t)a1, &v1, 1);
}

uint64_t sub_2341109A4(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_2341108F8((_QWORD *)a1);
  return sub_2341109D8(a1 + 8);
}

uint64_t sub_2341109D8(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;

  if (!*(_DWORD *)result)
    sub_234259198(result);
  v1 = *(_DWORD *)result - 1;
  *(_DWORD *)result = v1;
  if (!v1)
  {
    v2 = result - 8;
    v3 = *(_QWORD *)(result + 16);
    v4 = sub_234118AFC();
    --*((_BYTE *)v4 + 2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v2);
  }
  return result;
}

_QWORD *sub_234110A3C(uint64_t a1, int a2)
{
  unsigned int v3;
  _QWORD *result;
  int v5;
  BOOL v6;
  _QWORD v7[3];

  v3 = (a2 + 99) / 0x64u;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), sub_234110E68);
  if (v3 >= 0xFFFF)
    v5 = 0xFFFF;
  else
    v5 = v3;
  *(_WORD *)(a1 + 114) = v5;
  *(_WORD *)(a1 + 112) = v5;
  if (v5)
    v6 = (_DWORD)result == 1;
  else
    v6 = 1;
  if (!v6)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, uint64_t, _QWORD *(*)(uint64_t, uint64_t)))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 40))(v7, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), 100, sub_234110AFC);
  return result;
}

BOOL sub_234110AD0(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t, BOOL (*)(uint64_t)))(*(_QWORD *)a1 + 32))(a1, sub_234110E68) == 1;
}

_QWORD *sub_234110AFC(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *result;
  _QWORD v6[3];

  v4 = (*(uint64_t (**)(uint64_t, BOOL (*)(uint64_t)))(*(_QWORD *)a2 + 32))(a2, sub_234110E68);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t)))(*(_QWORD *)a2 + 32))(a2, sub_234110DF8);
  if (v4 == 1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t (*)(), uint64_t))(*(_QWORD *)a1 + 40))(v6, a1, 100, sub_234110AFC, a2);
  return result;
}

_BYTE *sub_234110B8C@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  if ((result[88] & 0xFC) == 4)
  {
    *(_OWORD *)a2 = xmmword_250503C38;
    *(_QWORD *)(a2 + 16) = 270;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 104))(result);
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/inet/TCPEndPoint.cpp";
    *(_DWORD *)(a2 + 16) = 269;
  }
  return result;
}

uint64_t sub_234110BE0(uint64_t a1, uint64_t a2)
{
  int v3;
  const char *v4;
  int v5;

  if (!a1 || !a2)
    sub_234259234(a1);
  v3 = 282;
  v4 = "src/inet/TCPEndPoint.cpp";
  v5 = 305;
  return sub_234110788(a2, &v3, 0);
}

uint64_t sub_234110C34(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16)
                                                                                              + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), sub_234110BE0, a1);
}

BOOL sub_234110C54(char a1)
{
  return (a1 & 0xFC) == 4;
}

void sub_234110C64(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v5;
  __int128 *v6;
  int v7;
  const char *v8;
  int v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v3 = (_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 89))
    {
      v4 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a1 + 40);
      if (v4)
      {
        v5 = *(_QWORD *)(v2 + 16);
        v13 = 0uLL;
        v14 = 0;
        v4(&v13, a1, a1 + 96);
        if ((_DWORD)v13)
        {
          v11 = v13;
          v12 = v14;
          v6 = &v11;
LABEL_10:
          sub_234110788(a1, v6, 0);
          return;
        }
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(v10, a1, v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 88) == 7 && !*v3)
  {
    v7 = 0;
    v8 = "src/inet/TCPEndPoint.cpp";
    v9 = 350;
    v6 = (__int128 *)&v7;
    goto LABEL_10;
  }
}

void sub_234110D3C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t, int *);
  __int128 v4;
  uint64_t v5;
  int v6;
  const char *v7;
  int v8;

  if (*(_DWORD *)a2)
  {
    v4 = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    sub_234110788(a1, &v4, 0);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16)
                                                                                      + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), sub_234110BE0, a1);
    *(_WORD *)(a1 + 114) = *(_WORD *)(a1 + 112);
    *(_BYTE *)(a1 + 88) = 4;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v3 = *(void (**)(uint64_t, int *))(a1 + 32);
    if (v3)
    {
      v6 = 0;
      v7 = "src/inet/TCPEndPoint.cpp";
      v8 = 371;
      v3(a1, &v6);
    }
  }
}

uint64_t sub_234110DF8(uint64_t a1)
{
  __int128 v2;
  int v3;

  if ((*(_BYTE *)(a1 + 88) & 0xFC) == 4 && *(_WORD *)(a1 + 112))
  {
    if (*(_WORD *)(a1 + 114))
    {
      --*(_WORD *)(a1 + 114);
    }
    else
    {
      LODWORD(v2) = 277;
      *((_QWORD *)&v2 + 1) = "src/inet/TCPEndPoint.cpp";
      v3 = 240;
      sub_234110788(a1, &v2, 0);
    }
  }
  return 0;
}

BOOL sub_234110E68(uint64_t a1)
{
  return *(_WORD *)(a1 + 112) != 0;
}

uint64_t sub_234110E78@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t result;
  int v13;
  BOOL v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  socklen_t v18;
  int *v19;
  __int128 v20;
  uint64_t v21;
  uint8_t buf[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  result = sub_2341110AC(a1, a2, (uint64_t)a6);
  v13 = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
    v14 = 1;
  else
    v14 = a5 == 0;
  if (!v14)
  {
    LODWORD(v20) = 1;
    setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 4, &v20, 4u);
    result = setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 512, &v20, 4u);
    if ((_DWORD)result)
    {
      v15 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = *__error();
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v16;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "SO_REUSEPORT: %d", buf, 8u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
      {
        __error();
        result = sub_2341147D0(1u, 1);
      }
    }
    v13 = *(_DWORD *)a6;
  }
  if (!v13)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    *(_OWORD *)buf = 0u;
    v23 = 0u;
    if (a2 == 1)
    {
      buf[1] = 2;
      *(_WORD *)&buf[2] = __rev16(a4);
      result = sub_23410ED68(a3);
      *(_DWORD *)&buf[4] = result;
      v18 = 16;
    }
    else
    {
      if (a2 != 2)
      {
        *(_DWORD *)a6 = 257;
        a6[1] = "src/inet/TCPEndPointImplSockets.cpp";
        *((_DWORD *)a6 + 4) = 125;
        return result;
      }
      buf[1] = 30;
      *(_WORD *)&buf[2] = __rev16(a4);
      result = sub_23410ED70(a3);
      *(_QWORD *)&buf[8] = result;
      *(_QWORD *)&v23 = v17;
      DWORD2(v23) = 0;
      v18 = 28;
    }
    if (!*(_DWORD *)a6)
    {
      result = bind(*(_DWORD *)(a1 + 120), (const sockaddr *)buf, v18);
      if ((_DWORD)result)
      {
        v19 = __error();
        result = sub_234117EFC(*v19, "src/inet/TCPEndPointImplSockets.cpp", 132, (uint64_t)&v20);
        *(_OWORD *)a6 = v20;
        a6[2] = v21;
      }
    }
  }
  return result;
}

uint64_t sub_2341110AC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v4 = result;
  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(result + 120) == -1)
  {
    if (a2 == 2)
    {
      v7 = 30;
    }
    else
    {
      if (a2 != 1)
      {
        *(_DWORD *)a3 = 257;
        *(_QWORD *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
        v6 = 731;
        goto LABEL_20;
      }
      v7 = 2;
    }
    v8 = socket(v7, 1, 0);
    *(_DWORD *)(v4 + 120) = v8;
    if ((_DWORD)v8 == -1)
    {
      v11 = *__error();
      return sub_234117EFC(v11, "src/inet/TCPEndPointImplSockets.cpp", 736, a3);
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 24) + 16) + 88))(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16), v8, v4 + 128);
    if (*(_DWORD *)a3)
      return result;
    *(_BYTE *)(v4 + 124) = a2;
    if (a2 == 2)
    {
      *(_DWORD *)buf = 1;
      setsockopt(*(_DWORD *)(v4 + 120), 41, 27, buf, 4u);
    }
    v12 = 1;
    result = setsockopt(*(_DWORD *)(v4 + 120), 0xFFFF, 4130, &v12, 4u);
    if ((_DWORD)result)
    {
      v9 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *__error();
        *(_DWORD *)buf = 67109120;
        v14 = v10;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "SO_NOSIGPIPE: %d", buf, 8u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
      {
        __error();
        result = sub_2341147D0(1u, 1);
      }
    }
  }
  else if (*(unsigned __int8 *)(result + 124) != a2)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v6 = 766;
    goto LABEL_20;
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
  v6 = 769;
LABEL_20:
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

double sub_2341112F8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int *v5;
  double result;
  int v7;
  __int128 v8;
  uint64_t v9;

  if (listen(*(_DWORD *)(a1 + 120), a2))
  {
    v5 = __error();
    sub_234117EFC(*v5, "src/inet/TCPEndPointImplSockets.cpp", 144, (uint64_t)a3);
  }
  else
  {
    v7 = fcntl(*(_DWORD *)(a1 + 120), 3, 0);
    fcntl(*(_DWORD *)(a1 + 120), 4, v7 | 4u);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    (*(void (**)(_QWORD, _QWORD, uint64_t (*)(char, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16)
                                                                                           + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(a1 + 128), sub_2341113E0, a1);
    if (!*(_DWORD *)a3)
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 104))(&v8, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(a1 + 128));
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      a3[2] = v9;
    }
  }
  return result;
}

uint64_t sub_2341113E0(char a1, uint64_t a2)
{
  return sub_2341123E8(a2, a1);
}

void sub_2341113F0(uint64_t a1@<X0>, _DWORD *a2@<X1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  socklen_t v16;
  int v17;
  int *v18;
  void (*v19)(uint64_t, int *);
  int *v20;
  int v21;
  const char *v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  sockaddr v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v10 = sub_23410F01C(a2);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_2341110AC(a1, v10, (uint64_t)a5);
  if (*(_DWORD *)a5)
    return;
  v11 = *a4;
  v12 = sub_23410EF74(a2);
  if (v11)
  {
    if (!v12)
    {
      v28 = (sockaddr)0;
      v29 = 0u;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      sub_23410F49C(a4, (char *)&v28, 0x10uLL, (uint64_t)a5);
      if (*(_DWORD *)a5)
        return;
      if (setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 4404, &v28, 0x20u) < 0)
      {
        if (*__error() != 13)
        {
          v20 = __error();
          sub_234117EFC(*v20, "src/inet/TCPEndPointImplSockets.cpp", 199, (uint64_t)a5);
          return;
        }
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
        v27 = *a4;
        sub_2341117B0((_QWORD *)a1, v10, &v27, (uint64_t)a5);
        if (*(_DWORD *)a5)
          return;
      }
    }
  }
  else if (v12)
  {
    *(_DWORD *)a5 = 257;
    a5[1] = "src/inet/TCPEndPointImplSockets.cpp";
    v13 = 174;
LABEL_22:
    *((_DWORD *)a5 + 4) = v13;
    return;
  }
  v26 = 1;
  setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 4130, &v26, 4u);
  v14 = fcntl(*(_DWORD *)(a1 + 120), 3, 0);
  fcntl(*(_DWORD *)(a1 + 120), 4, v14 | 4u);
  v34 = 0u;
  v35 = 0u;
  v33 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = (sockaddr)0;
  if (v10 == 1)
  {
    v28.sa_family = 2;
    *(_WORD *)v28.sa_data = __rev16(a3);
    *(_DWORD *)&v28.sa_data[2] = sub_23410ED68((uint64_t)a2);
    v16 = 16;
    goto LABEL_15;
  }
  if (v10 != 2)
  {
    *(_DWORD *)a5 = 257;
    a5[1] = "src/inet/TCPEndPointImplSockets.cpp";
    v13 = 248;
    goto LABEL_22;
  }
  v28.sa_family = 30;
  *(_WORD *)v28.sa_data = __rev16(a3);
  *(_QWORD *)&v28.sa_data[6] = sub_23410ED70((uint64_t)a2);
  *(_QWORD *)&v29 = v15;
  DWORD2(v29) = *a4;
  v16 = 28;
LABEL_15:
  v17 = connect(*(_DWORD *)(a1 + 120), &v28, v16);
  if (v17 == -1 && *__error() != 36)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v18 = __error();
    sub_234117EFC(*v18, "src/inet/TCPEndPointImplSockets.cpp", 255, (uint64_t)a5);
    v24 = *(_OWORD *)a5;
    v25 = a5[2];
    sub_234110788(a1, &v24, 1);
    return;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t (*)(char, uint64_t), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16)
                                                                                         + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(a1 + 128), sub_2341113E0, a1);
  if (!*(_DWORD *)a5)
  {
    sub_2341103E4((int *)(a1 + 8));
    if (v17)
    {
      *(_BYTE *)(a1 + 88) = 3;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(a1 + 128));
      if (*(_DWORD *)a5)
        return;
      goto LABEL_28;
    }
    *(_BYTE *)(a1 + 88) = 4;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(a1 + 128));
    if (!*(_DWORD *)a5)
    {
      v19 = *(void (**)(uint64_t, int *))(a1 + 32);
      if (v19)
      {
        v21 = 0;
        v22 = "src/inet/TCPEndPointImplSockets.cpp";
        v23 = 273;
        v19(a1, &v21);
      }
LABEL_28:
      *(_DWORD *)a5 = 0;
      a5[1] = "src/inet/TCPEndPointImplSockets.cpp";
      v13 = 283;
      goto LABEL_22;
    }
  }
}

_QWORD *sub_2341117B0@<X0>(_QWORD *result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _DWORD v12[7];
  int v13;
  ifaddrs *v14[2];
  ifaddrs *v15[2];

  if (*((_BYTE *)result + 88) == 1)
  {
    *(_DWORD *)a4 = 108;
    *(_QWORD *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v5 = 669;
    goto LABEL_17;
  }
  v8 = result;
  sub_23410FAEC(v15);
  if (!sub_23410FB24((uint64_t)v15))
  {
LABEL_16:
    result = sub_23410FAF4(v15);
    *(_DWORD *)a4 = 108;
    *(_QWORD *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v5 = 709;
    goto LABEL_17;
  }
  while (1)
  {
    sub_23410FD30(v15, &v13);
    if (v13 != *a3)
      goto LABEL_6;
    sub_23410FBB4((uint64_t)v15, v14, (uint64_t)v12);
    if (v12[0])
      goto LABEL_6;
    if (a2 == 2)
      break;
    if (a2 == 1 && sub_23410EDDC(v14))
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v9 = a4;
      v10 = v8;
      v11 = 1;
      goto LABEL_19;
    }
LABEL_6:
    sub_23410FB40(v15);
    if ((sub_23410FB24((uint64_t)v15) & 1) == 0)
      goto LABEL_16;
  }
  if (sub_23410EDDC(v14) || sub_23410EF74(v14) || sub_23410EE70((uint64_t)v14))
    goto LABEL_6;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v9 = a4;
  v10 = v8;
  v11 = 2;
LABEL_19:
  sub_234110214(v10, v11, v14, 0, 1, v9);
  if (*(_DWORD *)a4)
    return sub_23410FAF4(v15);
  result = sub_23410FAF4(v15);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
  v5 = 711;
LABEL_17:
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

void sub_23411194C(uint64_t a1@<X0>, __n128 *a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  sub_234111960(a1, (unsigned int (*)(_QWORD, __n128 *, int *))MEMORY[0x24BDAE6C0], a2, a3, a4);
}

void sub_234111960(uint64_t a1@<X0>, unsigned int (*a2)(_QWORD, __n128 *, int *)@<X1>, __n128 *a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  int *v10;
  int v11;
  __n128 v12;
  int v13;
  __n128 v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (sub_234110C54(*(_BYTE *)(a1 + 88)))
  {
    memset(v14, 0, sizeof(v14));
    v13 = 128;
    if (a2(*(unsigned int *)(a1 + 120), v14, &v13))
    {
      v10 = __error();
      sub_234117EFC(*v10, "src/inet/TCPEndPointImplSockets.cpp", 307, a5);
      return;
    }
    if (v14[0].n128_u8[1] == 2)
    {
      sub_23410ED44((uint64_t)&v12, &v14[0].n128_u32[1]);
      *a3 = v12;
      *a4 = bswap32(v14[0].n128_u16[1]) >> 16;
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      v11 = 322;
    }
    else if (v14[0].n128_u8[1] == 30)
    {
      sub_23410ED5C(&v12, (__n128 *)&v14[0].n128_i8[8]);
      *a3 = v12;
      *a4 = bswap32(v14[0].n128_u16[1]) >> 16;
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      v11 = 314;
    }
    else
    {
      *(_DWORD *)a5 = 3;
      *(_QWORD *)(a5 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      v11 = 326;
    }
  }
  else
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v11 = 299;
  }
  *(_DWORD *)(a5 + 16) = v11;
}

void sub_234111B00(uint64_t a1@<X0>, __n128 *a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  sub_234111960(a1, (unsigned int (*)(_QWORD, __n128 *, int *))MEMORY[0x24BDAE770], a2, a3, a4);
}

uint64_t sub_234111B14@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int *v7;
  int v8;
  int v9;
  __n128 v10;
  socklen_t v11;
  sockaddr v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  result = sub_234110C54(*(_BYTE *)(a1 + 88));
  if ((result & 1) != 0)
  {
    v19 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = (sockaddr)0;
    v11 = 128;
    result = getpeername(*(_DWORD *)(a1 + 120), &v12, &v11);
    if ((_DWORD)result)
    {
      v7 = __error();
      return sub_234117EFC(*v7, "src/inet/TCPEndPointImplSockets.cpp", 339, a3);
    }
    if (v12.sa_family == 2)
    {
      *a2 = 0;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      v8 = 361;
    }
    else if (v12.sa_family == 30)
    {
      sub_23410ED5C(&v10, (__n128 *)&v12.sa_data[6]);
      result = sub_23410EF74(&v10);
      v9 = DWORD2(v13);
      if (!(_DWORD)result)
        v9 = 0;
      *a2 = v9;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      v8 = 353;
    }
    else
    {
      *a2 = 0;
      *(_DWORD *)a3 = 257;
      *(_QWORD *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      v8 = 366;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v8 = 331;
  }
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_234111C84@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(result + 24) + 16) + 112))(*(_QWORD *)(*(_QWORD *)(result + 24) + 16), *(_QWORD *)(result + 128));
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
  *(_DWORD *)(a3 + 16) = 376;
  return result;
}

uint64_t sub_234111CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int *v5;
  int v6;
  int v7;

  result = sub_234110C54(*(_BYTE *)(a1 + 88));
  if ((result & 1) != 0)
  {
    v7 = 1;
    result = setsockopt(*(_DWORD *)(a1 + 120), 6, 1, &v7, 4u);
    if ((_DWORD)result)
    {
      v5 = __error();
      return sub_234117EFC(*v5, "src/inet/TCPEndPointImplSockets.cpp", 388, a2);
    }
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v6 = 392;
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v6 = 381;
  }
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_234111D6C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  result = sub_234110C54(*(_BYTE *)(a1 + 88));
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v12 = 397;
    goto LABEL_5;
  }
  v13 = a2;
  if (!setsockopt(*(_DWORD *)(a1 + 120), 6, 16, &v13, 4u))
  {
    v13 = a2;
    if (setsockopt(*(_DWORD *)(a1 + 120), 6, 257, &v13, 4u))
    {
      v9 = *__error();
      v10 = a4;
      v11 = 410;
      return sub_234117EFC(v9, "src/inet/TCPEndPointImplSockets.cpp", v11, v10);
    }
    v13 = a3;
    if (setsockopt(*(_DWORD *)(a1 + 120), 6, 258, &v13, 4u))
    {
      v9 = *__error();
      v10 = a4;
      v11 = 417;
      return sub_234117EFC(v9, "src/inet/TCPEndPointImplSockets.cpp", v11, v10);
    }
    v13 = 1;
    result = setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 8, &v13, 4u);
    if ((_DWORD)result)
    {
      v9 = *__error();
      v10 = a4;
      v11 = 424;
      return sub_234117EFC(v9, "src/inet/TCPEndPointImplSockets.cpp", v11, v10);
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v12 = 427;
LABEL_5:
    *(_DWORD *)(a4 + 16) = v12;
    return result;
  }
  v9 = *__error();
  v10 = a4;
  v11 = 403;
  return sub_234117EFC(v9, "src/inet/TCPEndPointImplSockets.cpp", v11, v10);
}

uint64_t sub_234111EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int *v5;
  int v6;
  int v7;

  result = sub_234110C54(*(_BYTE *)(a1 + 88));
  if ((result & 1) != 0)
  {
    v7 = 0;
    result = setsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 8, &v7, 4u);
    if ((_DWORD)result)
    {
      v5 = __error();
      return sub_234117EFC(*v5, "src/inet/TCPEndPointImplSockets.cpp", 438, a2);
    }
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v6 = 441;
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
    v6 = 432;
  }
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

BOOL sub_234111F84@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;
  int v4;
  int v5;

  result = sub_234110C54(*(_BYTE *)(a1 + 88));
  if (result)
    v4 = 0;
  else
    v4 = 3;
  if (result)
    v5 = 449;
  else
    v5 = 446;
  *(_DWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

void sub_234111FD4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
  *(_DWORD *)(a1 + 16) = 463;
}

double sub_234111FF4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, unint64_t);
  int *v12;
  int *v13;
  __int128 v14;
  uint64_t v15;

  result = 0.0;
  *(_OWORD *)a2 = xmmword_250503C50;
  *(_QWORD *)(a2 + 16) = 469;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 104);
    if (!v5)
      goto LABEL_21;
    v6 = *(_QWORD *)(v5 + 24);
    v7 = send(*(_DWORD *)(a1 + 120), *(const void **)(v5 + 8), v6, 0x80000);
    if (v7 == -1)
      break;
    v8 = v7;
    if ((v7 & 0x8000000000000000) != 0 || v6 < v7)
    {
      *(_DWORD *)a2 = 3;
      *(_QWORD *)(a2 + 8) = "src/inet/TCPEndPointImplSockets.cpp";
      *(_DWORD *)(a2 + 16) = 501;
      return result;
    }
    *(_WORD *)(a1 + 114) = *(_WORD *)(a1 + 112);
    v9 = *(uint64_t **)(a1 + 104);
    if (v8 >= v6)
    {
      v10 = sub_2341183D0(v9);
      *(_QWORD *)(a1 + 104) = v10;
      if (!v10)
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 128))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(a1 + 128));
        if (*(_DWORD *)a2)
          return result;
      }
    }
    else
    {
      sub_2341183F8(v9, v8);
    }
    v11 = *(void (**)(uint64_t, unint64_t))(a1 + 48);
    if (v11)
      v11(a1, v8);
    if (v8 < v6)
      goto LABEL_21;
  }
  if (*__error() == 35 || *__error() == 35)
    goto LABEL_21;
  if (*__error() == 32)
  {
    LODWORD(v14) = 258;
    *((_QWORD *)&v14 + 1) = "src/inet/TCPEndPointImplSockets.cpp";
    LODWORD(v15) = 494;
  }
  else
  {
    v12 = __error();
    sub_234117EFC(*v12, "src/inet/TCPEndPointImplSockets.cpp", 494, (uint64_t)&v14);
  }
  result = *(double *)&v14;
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v15;
  if (!*(_DWORD *)a2)
  {
LABEL_21:
    if (*(_BYTE *)(a1 + 88) == 5 && !*(_QWORD *)(a1 + 104))
    {
      if (shutdown(*(_DWORD *)(a1 + 120), 1))
      {
        v13 = __error();
        sub_234117EFC(*v13, "src/inet/TCPEndPointImplSockets.cpp", 573, (uint64_t)&v14);
        result = *(double *)&v14;
        *(_OWORD *)a2 = v14;
        *(_QWORD *)(a2 + 16) = v15;
      }
    }
  }
  return result;
}

void sub_2341121D8(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v7 = 0;
  v6 = 0uLL;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 104))(&v6, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(a1 + 128));
  if ((_DWORD)v6
    || ((*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16)
                                                                       + 112))(&v4, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(a1 + 128)), v6 = v4, v7 = v5, (_DWORD)v4))
  {
    v2 = v6;
    v3 = v7;
    sub_234110788(a1, &v2, 0);
  }
}

uint64_t sub_23411227C(uint64_t result, _DWORD *a2, char a3)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[24];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(result + 120) != -1)
  {
    v4 = result;
    v5 = *(unsigned __int8 *)(result + 88);
    if (v5 == 8 || v5 == 7 && !*(_QWORD *)(result + 104))
    {
      if (sub_234110C54(a3))
      {
        if (*a2)
        {
          v8 = 1;
          if (setsockopt(*(_DWORD *)(v4 + 120), 0xFFFF, 128, &v8, 8u))
          {
            v6 = sub_234117B80(1u, "Inet");
            if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            {
              v7 = *__error();
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v7;
              _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "SO_LINGER: %d", buf, 8u);
            }
            if (sub_234114844(1u))
            {
              __error();
              sub_2341147D0(1u, 1);
            }
          }
        }
      }
      (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 24) + 16) + 136))(buf, *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16), v4 + 128);
      result = close(*(_DWORD *)(v4 + 120));
      *(_DWORD *)(v4 + 120) = -1;
    }
  }
  return result;
}

uint64_t sub_2341123E8(uint64_t a1, char a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 8;
  sub_2341103E4((int *)(a1 + 8));
  v5 = *(unsigned __int8 *)(a1 + 88);
  if (v5 == 3)
  {
    if ((a2 & 2) != 0)
    {
      v12 = 4;
      if (getsockopt(*(_DWORD *)(a1 + 120), 0xFFFF, 4103, (char *)&v12 + 4, (socklen_t *)&v12))
      {
        v6 = *__error();
        HIDWORD(v12) = v6;
      }
      else
      {
        v6 = HIDWORD(v12);
      }
      v10 = 0uLL;
      v11 = 0;
      sub_234117EFC(v6, "src/inet/TCPEndPointImplSockets.cpp", 812, (uint64_t)&v10);
      v8 = v10;
      v9 = v11;
      sub_234110D3C(a1, (uint64_t)&v8);
    }
  }
  else if (v5 == 2)
  {
    if (*(_QWORD *)(a1 + 72) && (a2 & 1) != 0)
      sub_23411251C(a1);
  }
  else
  {
    if (sub_234110C54(v5) && *(_QWORD *)(a1 + 104) && (a2 & 2) != 0)
      sub_234110604(a1, &v10);
    if ((*(_BYTE *)(a1 + 88) & 0xFE) == 4 && *(_BYTE *)(a1 + 89) && *(_QWORD *)(a1 + 40) && (a2 & 1) != 0)
      sub_2341127D0(a1);
  }
  return sub_2341109D8(v4);
}

uint64_t sub_23411251C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  const char *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _DWORD *);
  _DWORD v15[2];
  const char *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  int v23;
  socklen_t v24;
  __n128 v25;
  sockaddr v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = (sockaddr)0;
  v27 = 0u;
  v24 = 128;
  result = accept(*(_DWORD *)(a1 + 120), &v26, &v24);
  v3 = result;
  if ((_DWORD)result != -1)
  {
    v4 = 0;
    v5 = 0;
    goto LABEL_3;
  }
  result = (uint64_t)__error();
  if (*(_DWORD *)result != 35)
  {
    result = (uint64_t)__error();
    if (*(_DWORD *)result != 35)
    {
      v6 = __error();
      result = sub_234117EFC(*v6, "src/inet/TCPEndPointImplSockets.cpp", 994, (uint64_t)&v20);
      v7 = v20;
      v5 = HIDWORD(v20);
      v4 = v23;
      if ((_DWORD)v20)
      {
        v8 = v21;
        v9 = v22;
LABEL_29:
        v14 = *(uint64_t (**)(uint64_t, _DWORD *))(a1 + 80);
        if (v14)
        {
          v15[0] = v7;
          v15[1] = v5;
          v16 = v8;
          v17 = v9;
          v18 = v4;
          return v14(a1, v15);
        }
        return result;
      }
LABEL_3:
      if (*(_QWORD *)(a1 + 72))
      {
        if (v26.sa_family == 2)
        {
          sub_23410ED44((uint64_t)&v25, &v26.sa_data[2]);
          goto LABEL_13;
        }
        if (v26.sa_family == 30)
        {
          sub_23410ED5C(&v25, (__n128 *)&v26.sa_data[6]);
LABEL_13:
          v11 = *(unsigned __int16 *)v26.sa_data;
          v19 = 0;
          result = sub_234112A44(*(_BYTE **)(a1 + 24), &v19, (uint64_t)&v20);
          v7 = v20;
          v10 = v19;
          if (!(_DWORD)v20)
          {
            *(_DWORD *)(v19 + 120) = v3;
            result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 88))(&v20, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), v3, v10 + 128);
            v7 = v20;
            if (!(_DWORD)v20)
            {
              *(_BYTE *)(v10 + 88) = 4;
              v12 = v26.sa_family == 30 ? 2 : 1;
              *(_BYTE *)(v10 + 124) = v12;
              sub_2341103E4((int *)(v10 + 8));
              v13 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16);
              result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t (*)(), uint64_t))(*(_QWORD *)v13 + 96))(&v20, v13, *(_QWORD *)(v10 + 128), sub_2341113E0, v10);
              v7 = v20;
              if (!(_DWORD)v20)
              {
                result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 104))(&v20, v13, *(_QWORD *)(v10 + 128));
                v7 = v20;
                if (!(_DWORD)v20)
                  return (*(uint64_t (**)(uint64_t, uint64_t, __n128 *, _QWORD))(a1 + 72))(a1, v10, &v25, bswap32(v11) >> 16);
              }
            }
          }
          v5 = HIDWORD(v20);
          v8 = v21;
          v9 = v22;
          v4 = v23;
          goto LABEL_23;
        }
        v10 = 0;
        v9 = 1020;
        v7 = 3;
      }
      else
      {
        v10 = 0;
        v9 = 1000;
        v7 = 8;
      }
      v8 = "src/inet/TCPEndPointImplSockets.cpp";
LABEL_23:
      if ((_DWORD)v3 != -1)
        result = close(v3);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 88) == 4)
          sub_2341109D8(v10 + 8);
        result = sub_2341109D8(v10 + 8);
      }
      goto LABEL_29;
    }
  }
  return result;
}

void sub_2341127D0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  int v5;
  void *v6;
  size_t v7;
  ssize_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  char v13;
  void (*v14)(uint64_t);
  uint8_t v15[24];
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t *v19;

  v2 = *(uint64_t **)(a1 + 96);
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
    sub_234118648((uint64_t)v3);
    v19 = v3;
    if (sub_23411828C((uint64_t)v3))
    {
      sub_2341182EC(v3);
      v4 = 0;
      goto LABEL_9;
    }
    sub_234118674(0xFA00uLL, 0, v15);
    sub_23411814C((uint64_t)v3);
  }
  else
  {
    sub_234118674(0xFA00uLL, 0, v15);
  }
  v3 = *(uint64_t **)v15;
  v19 = *(uint64_t **)v15;
  if (!*(_QWORD *)v15)
  {
    LODWORD(v17) = 11;
    *((_QWORD *)&v17 + 1) = "src/inet/TCPEndPointImplSockets.cpp";
    v18 = 865;
    sub_234110788(a1, &v17, 0);
    goto LABEL_30;
  }
  v4 = 1;
LABEL_9:
  v5 = *(_DWORD *)(a1 + 120);
  v6 = (void *)(v3[1] + v3[3]);
  v7 = sub_23411828C((uint64_t)v3);
  v8 = recv(v5, v6, v7, 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    *(_WORD *)(a1 + 114) = *(_WORD *)(a1 + 112);
    if (v8)
    {
      v9 = v19[3] + v8;
      if (v4)
      {
        sub_234118220((uint64_t)v19, v9, 0);
        sub_23411800C((uint64_t *)&v19);
        v10 = *(_QWORD **)(a1 + 96);
        if (v10)
        {
          sub_2341182AC(v10, (uint64_t *)&v19);
        }
        else
        {
          *(_QWORD *)(a1 + 96) = v19;
          v19 = 0;
        }
      }
      else
      {
        sub_234118220((uint64_t)v19, v9, *(_QWORD **)(a1 + 96));
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 88) == 4 && *(_QWORD *)(a1 + 64))
        v13 = 6;
      else
        v13 = 7;
      *(_BYTE *)(a1 + 88) = v13;
      (*(void (**)(uint8_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 120))(v15, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(a1 + 128));
      v14 = *(void (**)(uint64_t))(a1 + 64);
      if (v14)
        v14(a1);
    }
    goto LABEL_29;
  }
  v11 = *__error();
  if ((_DWORD)v11 != 35)
  {
    sub_234117EFC(v11, "src/inet/TCPEndPointImplSockets.cpp", 912, (uint64_t)&v16);
    sub_234110788(a1, &v16, 0);
LABEL_29:
    sub_234110C64(a1);
    goto LABEL_30;
  }
  v12 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "recv: EAGAIN, will retry", v15, 2u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(1u, 1);
LABEL_30:
  if (v19)
    sub_23411814C((uint64_t)v19);
}

uint64_t sub_234112A44@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int *v8;
  char v9;
  int v10;
  int v11;
  NSObject *v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = sub_2341B1F64("src/inet/InetLayer.h", 82);
  if (a1[8] == 2)
  {
    v7 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1);
    *a2 = v7;
    if (v7)
    {
      v8 = sub_234118AFC();
      v9 = *((_BYTE *)v8 + 2) + 1;
      *((_BYTE *)v8 + 2) = v9;
      result = (uint64_t)sub_234118B08();
      if (*(char *)(result + 2) >= v9)
      {
        v10 = 0;
      }
      else
      {
        result = (uint64_t)sub_234118B08();
        v10 = 0;
        *(_BYTE *)(result + 2) = v9;
      }
      v11 = 93;
    }
    else
    {
      v12 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v14 = "TCP";
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "%s endpoint pool FULL", buf, 0xCu);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        result = sub_2341147D0(1u, 1);
      v11 = 89;
      v10 = 193;
    }
  }
  else
  {
    v11 = 83;
    v10 = 3;
  }
  *(_DWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = "src/inet/InetLayer.h";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

void sub_234112BC0(_QWORD *a1)
{
  sub_234112BE4(a1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234112BE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_250503DA8;
  v2 = a1[13];
  if (v2)
    sub_23411814C(v2);
  a1[13] = 0;
  v3 = a1[12];
  if (v3)
    sub_23411814C(v3);
  a1[12] = 0;
  return a1;
}

uint64_t sub_234112C34@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, _QWORD *a6@<X8>)
{
  _BYTE *v11;
  int v12;
  int v13;
  int v14;

  if (*(unsigned __int8 *)(result + 32) > 1u)
  {
    v13 = 50;
    v12 = 3;
  }
  else
  {
    v11 = (_BYTE *)result;
    if (!sub_23410ECF8(a3, &xmmword_25615DD84)
      || sub_23410F01C(a3) == 3
      || (result = sub_23410F01C(a3), (_DWORD)result == (_DWORD)a2))
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      v14 = *a5;
      result = (*(uint64_t (**)(_BYTE *, uint64_t, _DWORD *, uint64_t, int *))(*(_QWORD *)v11 + 72))(v11, a2, a3, a4, &v14);
      if (*(_DWORD *)a6)
        return result;
      v12 = 0;
      v11[32] = 1;
      v13 = 62;
    }
    else
    {
      v13 = 55;
      v12 = 257;
    }
  }
  *(_DWORD *)a6 = v12;
  a6[1] = "src/inet/UDPEndPoint.cpp";
  *((_DWORD *)a6 + 4) = v13;
  return result;
}

unsigned __int8 *sub_234112D34@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;

  if (result[32] > 1u)
  {
    v7 = 69;
    v6 = 3;
  }
  else
  {
    v5 = result;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v8 = *a3;
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, int *))(*(_QWORD *)result + 80))(result, a2, &v8);
    if (*(_DWORD *)a4)
      return result;
    v6 = 0;
    v5[32] = 1;
    v7 = 76;
  }
  *(_DWORD *)a4 = v6;
  a4[1] = "src/inet/UDPEndPoint.cpp";
  *((_DWORD *)a4 + 4) = v7;
  return result;
}

uint64_t sub_234112DC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v6;
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;

  v6 = *(unsigned __int8 *)(result + 32);
  if (v6 != 1)
  {
    v7 = v6 == 2;
    if (v6 == 2)
      v8 = 0;
    else
      v8 = 3;
    if (v7)
      v9 = 83;
    else
      v9 = 88;
    goto LABEL_8;
  }
  v10 = result;
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 48) = a3;
  *(_QWORD *)(result + 16) = a4;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  v8 = *(_DWORD *)a5;
  if (!*(_DWORD *)a5)
  {
    *(_BYTE *)(v10 + 32) = 2;
    v9 = 99;
LABEL_8:
    *(_DWORD *)a5 = v8;
    a5[1] = "src/inet/UDPEndPoint.cpp";
    *((_DWORD *)a5 + 4) = v9;
  }
  return result;
}

uint64_t sub_234112E58@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t result;
  _BYTE v13[16];
  __int128 v14;
  int v15;
  __int16 v16;

  v15 = 0;
  sub_23410F2B0((uint64_t)v13);
  v14 = *a2;
  v16 = a3;
  v15 = *a5;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  result = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 96))(a1, v13, a4);
  if (!*(_DWORD *)a6)
  {
    *(_DWORD *)a6 = 0;
    a6[1] = "src/inet/UDPEndPoint.cpp";
    *((_DWORD *)a6 + 4) = 121;
  }
  return result;
}

_QWORD *sub_234112F04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 96))(a2);
  if (!*(_DWORD *)a2)
  {
    *(_DWORD *)a2 = 0;
    a2[1] = "src/inet/UDPEndPoint.cpp";
    *((_DWORD *)a2 + 4) = 121;
  }
  return result;
}

_BYTE *sub_234112F58(_BYTE *result)
{
  if (result[32] != 3)
  {
    result[32] = 3;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 104))(result);
  }
  return result;
}

uint64_t sub_234112F7C@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;

  result = sub_23410EE70((uint64_t)a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 257;
    *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPoint.cpp";
    v9 = 135;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  result = sub_23410F01C(a3);
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      v11 = *a2;
      return (*(uint64_t (**)(uint64_t, int *, _DWORD *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v11, a3, 1);
    }
    *(_DWORD *)a4 = 257;
    *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPoint.cpp";
    v9 = 149;
    goto LABEL_9;
  }
  v10 = *a2;
  return (*(uint64_t (**)(uint64_t, int *, _DWORD *, uint64_t))(*(_QWORD *)a1 + 64))(a1, &v10, a3, 1);
}

uint64_t sub_234113054@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;

  result = sub_23410EE70((uint64_t)a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 257;
    *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPoint.cpp";
    v9 = 155;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  result = sub_23410F01C(a3);
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      v11 = *a2;
      return (*(uint64_t (**)(uint64_t, int *, _DWORD *, _QWORD))(*(_QWORD *)a1 + 56))(a1, &v11, a3, 0);
    }
    *(_DWORD *)a4 = 257;
    *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPoint.cpp";
    v9 = 169;
    goto LABEL_9;
  }
  v10 = *a2;
  return (*(uint64_t (**)(uint64_t, int *, _DWORD *, _QWORD))(*(_QWORD *)a1 + 64))(a1, &v10, a3, 0);
}

uint64_t sub_23411312C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, socklen_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t result;
  int v13;
  socklen_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  socklen_t *v21;
  int v22;
  int v23;
  int v24;
  socklen_t v25;
  sockaddr v26;
  uint64_t v27;
  socklen_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  result = sub_2341133D0(a1, a2, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    if (a2 == 1)
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      v17 = *(_DWORD *)(a1 + 56);
      *(_WORD *)&v26.sa_len = 512;
      *(_DWORD *)&v26.sa_data[10] = 0;
      *(_WORD *)v26.sa_data = __rev16(a4);
      *(_QWORD *)&v26.sa_data[2] = sub_23410ED68(a3);
      *(_OWORD *)a6 = xmmword_250503F50;
      a6[2] = 141;
      if (bind(v17, &v26, 0x10u))
      {
        v18 = __error();
        sub_234117EFC(*v18, "src/inet/UDPEndPointImplSockets.cpp", 144, (uint64_t)a6);
      }
      else
      {
        v25 = 1;
        setsockopt(v17, 0xFFFF, 32, &v25, 4u);
        setsockopt(v17, 0, 9, &v26, 0x10u);
      }
      v25 = 64;
      v21 = &v25;
      v22 = v17;
      v23 = 0;
    }
    else
    {
      if (a2 != 2)
      {
        v19 = 193;
        v20 = 257;
LABEL_20:
        *(_DWORD *)a6 = v20;
        a6[1] = "src/inet/UDPEndPointImplSockets.cpp";
        *((_DWORD *)a6 + 4) = v19;
        return result;
      }
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      v13 = *(_DWORD *)(a1 + 56);
      v14 = *a5;
      *(_QWORD *)&v26.sa_len = 7680;
      *(_WORD *)v26.sa_data = __rev16(a4);
      *(_QWORD *)&v26.sa_data[6] = sub_23410ED70(a3);
      v27 = v15;
      v25 = v14;
      v28 = v14;
      *(_OWORD *)a6 = xmmword_250503F38;
      a6[2] = 108;
      if (bind(v13, &v26, 0x1Cu))
      {
        v16 = __error();
        sub_234117EFC(*v16, "src/inet/UDPEndPointImplSockets.cpp", 111, (uint64_t)a6);
      }
      else
      {
        setsockopt(v13, 41, 9, &v25, 4u);
      }
      v24 = 64;
      v21 = (socklen_t *)&v24;
      v22 = v13;
      v23 = 41;
    }
    result = setsockopt(v22, v23, 10, v21, 4u);
    if (*(_DWORD *)a6)
      return result;
    *(_WORD *)(a1 + 76) = a4;
    *(_DWORD *)(a1 + 72) = *a5;
    if (!a4)
    {
      v25 = 128;
      result = getsockname(*(_DWORD *)(a1 + 56), &v26, &v25);
      if (!(_DWORD)result && (v26.sa_family == 30 || v26.sa_family == 2))
        *(_WORD *)(a1 + 76) = bswap32(*(unsigned __int16 *)v26.sa_data) >> 16;
    }
    v20 = 0;
    v19 = 218;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_2341133D0@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  int v20;
  int v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v4 = result;
  v24 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(result + 56) == -1)
  {
    if (a2 == 2)
    {
      v7 = 30;
    }
    else
    {
      if (a2 != 1)
      {
        *(_DWORD *)a3 = 257;
        *(_QWORD *)(a3 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
        v6 = 466;
        goto LABEL_13;
      }
      v7 = 2;
    }
    v8 = socket(v7, 2, 0);
    *(_DWORD *)(v4 + 56) = v8;
    if ((_DWORD)v8 == -1)
    {
      v9 = *__error();
      return sub_234117EFC(v9, "src/inet/UDPEndPointImplSockets.cpp", 472, a3);
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 24) + 16) + 88))(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16), v8, v4 + 64);
    if (*(_DWORD *)a3)
    {
      result = close(*(_DWORD *)(v4 + 56));
      *(_DWORD *)(v4 + 56) = -1;
      return result;
    }
    *(_BYTE *)(v4 + 60) = a2;
    v21 = 1;
    setsockopt(*(_DWORD *)(v4 + 56), 0xFFFF, 4, &v21, 4u);
    if (setsockopt(*(_DWORD *)(v4 + 56), 0xFFFF, 512, &v21, 4u))
    {
      v10 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = *__error();
        *(_DWORD *)buf = 67109120;
        v23 = v11;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "SO_REUSEPORT failed: %d", buf, 8u);
      }
      if (sub_234114844(1u))
      {
        __error();
        sub_2341147D0(1u, 1);
      }
    }
    v12 = *(_DWORD *)(v4 + 56);
    if (a2 == 2)
    {
      if (setsockopt(v12, 41, 27, &v21, 4u))
      {
        v13 = sub_234117B80(1u, "Inet");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v14 = *__error();
          *(_DWORD *)buf = 67109120;
          v23 = v14;
          _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "IPV6_V6ONLY failed: %d", buf, 8u);
        }
        if (sub_234114844(1u))
        {
          __error();
          sub_2341147D0(1u, 1);
        }
      }
      if (!setsockopt(*(_DWORD *)(v4 + 56), 41, 61, &v21, 4u))
        goto LABEL_37;
      v15 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = *__error();
        *(_DWORD *)buf = 67109120;
        v23 = v16;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "IPV6_PKTINFO failed: %d", buf, 8u);
      }
      if (!sub_234114844(1u))
        goto LABEL_37;
    }
    else
    {
      if (!setsockopt(v12, 0, 26, &v21, 4u))
        goto LABEL_37;
      v17 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = *__error();
        *(_DWORD *)buf = 67109120;
        v23 = v18;
        _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "IP_PKTINFO failed: %d", buf, 8u);
      }
      if (!sub_234114844(1u))
        goto LABEL_37;
    }
    __error();
    sub_2341147D0(1u, 1);
LABEL_37:
    result = setsockopt(*(_DWORD *)(v4 + 56), 0xFFFF, 4130, &v21, 4u);
    if ((_DWORD)result)
    {
      v19 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = *__error();
        *(_DWORD *)buf = 67109120;
        v23 = v20;
        _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "SO_NOSIGPIPE failed: %d", buf, 8u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
      {
        __error();
        result = sub_2341147D0(1u, 1);
      }
    }
    goto LABEL_3;
  }
  if (*(unsigned __int8 *)(result + 60) != a2)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    v6 = 561;
    goto LABEL_13;
  }
LABEL_3:
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
  v6 = 564;
LABEL_13:
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_2341138A0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_2341133D0(a1, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 45;
    a3[1] = "src/inet/UDPEndPointImplSockets.cpp";
    *((_DWORD *)a3 + 4) = 258;
  }
  return result;
}

uint64_t sub_2341138EC@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 72);
  return result;
}

uint64_t sub_2341138F8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 76);
}

_QWORD *sub_234113900@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _QWORD, void (*)(char, uint64_t), uint64_t))(*(_QWORD *)v4 + 96))(a2, v4, *(_QWORD *)(a1 + 64), sub_234113988, a1);
  if (!*(_DWORD *)a2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 104))(v4, *(_QWORD *)(a1 + 64));
  return result;
}

void sub_234113988(char a1, uint64_t a2)
{
  sub_234113D8C(a2, a1);
}

uint64_t sub_234113998@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  socklen_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  msghdr v21;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[16];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!*a3)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    v12 = 283;
    goto LABEL_8;
  }
  v7 = result;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v8 = (_DWORD *)(a2 + 16);
  *(_QWORD *)(a4 + 16) = 0;
  v9 = sub_23410F01C((_DWORD *)(a2 + 16));
  result = sub_2341133D0(v7, v9, a4);
  if (*(_DWORD *)a4)
    return result;
  v10 = *(unsigned __int8 *)(v7 + 60);
  result = sub_23410F01C(v8);
  if (v10 != (_DWORD)result)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    v12 = 290;
    goto LABEL_8;
  }
  v11 = *a3;
  if (!*(_QWORD *)*a3)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 24);
    v22[0] = v13;
    v22[1] = v14;
    memset(v31, 0, sizeof(v31));
    *(_QWORD *)&v21.msg_namelen = 0;
    memset(&v21.msg_iovlen, 0, 24);
    v21.msg_iov = (iovec *)v22;
    v21.msg_iovlen = 1;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21.msg_name = &v23;
    if (*(_BYTE *)(v7 + 60) == 2)
    {
      BYTE1(v23) = 30;
      WORD1(v23) = bswap32(*(unsigned __int16 *)(a2 + 38)) >> 16;
      *((_QWORD *)&v23 + 1) = sub_23410ED70((uint64_t)v8);
      *(_QWORD *)&v24 = v15;
      v16 = *(_DWORD *)(a2 + 32);
      DWORD2(v24) = v16;
      v17 = 28;
    }
    else
    {
      BYTE1(v23) = 2;
      WORD1(v23) = bswap32(*(unsigned __int16 *)(a2 + 38)) >> 16;
      DWORD1(v23) = sub_23410ED68((uint64_t)v8);
      v16 = *(_DWORD *)(a2 + 32);
      v17 = 16;
    }
    v21.msg_namelen = v17;
    if (!v16)
    {
      v16 = *(_DWORD *)(v7 + 72);
      if (!v16)
      {
        if (sub_23410F01C((_DWORD *)a2) == 3)
        {
LABEL_21:
          result = sendmsg(*(_DWORD *)(v7 + 56), &v21, 0);
          if (result == -1)
          {
            v20 = __error();
            return sub_234117EFC(*v20, "src/inet/UDPEndPointImplSockets.cpp", 416, a4);
          }
          if (result == *(_QWORD *)(*a3 + 24))
          {
            *(_DWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
            v12 = 425;
          }
          else
          {
            *(_DWORD *)a4 = 195;
            *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
            v12 = 423;
          }
          goto LABEL_8;
        }
        v16 = 0;
      }
    }
    v21.msg_control = v31;
    v21.msg_controllen = 256;
    v18 = *(unsigned __int8 *)(v7 + 60);
    if (v18 == 1)
    {
      *(_QWORD *)&v31[0] = 24;
      DWORD2(v31[0]) = 26;
      HIDWORD(v31[0]) = v16;
      LODWORD(v31[1]) = sub_23410ED68(a2);
      v21.msg_controllen = 24;
      v18 = *(unsigned __int8 *)(v7 + 60);
    }
    if (v18 == 2)
    {
      *(_QWORD *)&v31[0] = 0x2900000020;
      DWORD2(v31[0]) = 46;
      HIDWORD(v31[1]) = v16;
      *(_QWORD *)((char *)v31 + 12) = sub_23410ED70(a2);
      *(_QWORD *)((char *)&v31[1] + 4) = v19;
      v21.msg_controllen = 32;
    }
    goto LABEL_21;
  }
  *(_DWORD *)a4 = 4;
  *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
  v12 = 293;
LABEL_8:
  *(_DWORD *)(a4 + 16) = v12;
  return result;
}

uint64_t sub_234113CA8(uint64_t result)
{
  uint64_t v1;
  _QWORD v2[3];

  if (*(_DWORD *)(result + 56) != -1)
  {
    v1 = result;
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(result + 24) + 16)
                                                                  + 136))(v2, *(_QWORD *)(*(_QWORD *)(result + 24) + 16), result + 64);
    result = close(*(_DWORD *)(v1 + 56));
    *(_DWORD *)(v1 + 56) = -1;
  }
  return result;
}

uint64_t sub_234113D04(_BYTE *a1)
{
  sub_234112F58(a1);
  return sub_234113D28((uint64_t)(a1 + 8));
}

uint64_t sub_234113D28(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;

  if (!*(_DWORD *)result)
    sub_2342592D0();
  v1 = *(_DWORD *)result - 1;
  *(_DWORD *)result = v1;
  if (!v1)
  {
    v2 = result - 8;
    v3 = *(_QWORD *)(result + 16);
    v4 = sub_234118AFC();
    --*((_BYTE *)v4 + 3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v2);
  }
  return result;
}

void sub_234113D8C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  unint64_t v8;
  const char *v9;
  void (*v10)(uint64_t, _QWORD *, _QWORD);
  int *v11;
  unsigned int *msg_control;
  unsigned int v13;
  unint64_t v14;
  _QWORD v15[3];
  __n128 v16;
  uint64_t v17;
  msghdr v18;
  _QWORD v19[2];
  uint64_t v20;
  __n128 v21[2];
  unsigned int v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25[32];
  _QWORD v26[18];

  v26[17] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 32) != 2)
    return;
  if (!*(_QWORD *)(a1 + 40) || (a2 & 1) == 0)
    return;
  v22 = 0;
  sub_23410F2B0((uint64_t)v21);
  v24 = *(_WORD *)(a1 + 76);
  v22 = *(_DWORD *)(a1 + 72);
  sub_234118674(0x62FuLL, 0, v25);
  v5 = v25[0];
  v20 = v25[0];
  if (!v25[0])
  {
    LODWORD(v2) = 684;
    v8 = 0xB0000000BLL;
    goto LABEL_11;
  }
  v19[0] = *(_QWORD *)(v25[0] + 8);
  v19[1] = sub_23411828C(v25[0]);
  memset(v26, 0, 128);
  *(&v18.msg_namelen + 1) = 0;
  *(&v18.msg_iovlen + 1) = 0;
  v18.msg_name = v26;
  v18.msg_namelen = 128;
  v18.msg_iov = (iovec *)v19;
  v18.msg_iovlen = 1;
  v18.msg_control = v25;
  v18.msg_flags = 0;
  v18.msg_controllen = 256;
  v6 = recvmsg(*(_DWORD *)(a1 + 56), &v18, 128);
  if (v6 == -1)
  {
    v11 = __error();
    sub_234117EFC(*v11, "src/inet/UDPEndPointImplSockets.cpp", 615, (uint64_t)&v16);
    v8 = v16.n128_u64[0];
    if (v16.n128_u32[0])
    {
      v9 = (const char *)v16.n128_u64[1];
      v2 = v17;
LABEL_12:
      if (*(_QWORD *)(a1 + 48))
      {
        v14 = v8;
        sub_234117EFC(35, "src/inet/UDPEndPointImplSockets.cpp", 694, (uint64_t)v25);
        if ((_DWORD)v14 != LODWORD(v25[0]))
        {
          v10 = *(void (**)(uint64_t, _QWORD *, _QWORD))(a1 + 48);
          v15[0] = v14;
          v15[1] = v9;
          v15[2] = v2;
          v10(a1, v15, 0);
        }
      }
      if (v5)
        goto LABEL_16;
      return;
    }
  }
  else
  {
    v7 = v6;
    if (sub_23411828C(v5) < v6)
    {
      LODWORD(v2) = 619;
      v8 = 0xC2000000C2;
LABEL_11:
      v9 = "src/inet/UDPEndPointImplSockets.cpp";
      goto LABEL_12;
    }
    sub_234118220(v5, v7, 0);
    if (BYTE1(v26[0]) == 2)
    {
      sub_23410ED44((uint64_t)&v16, (_DWORD *)v26 + 1);
    }
    else
    {
      if (BYTE1(v26[0]) != 30)
      {
        LODWORD(v2) = 639;
        v8 = 0x300000003;
        goto LABEL_11;
      }
      sub_23410ED5C(&v16, (__n128 *)&v26[1]);
    }
    v21[0] = v16;
    v23 = bswap32(WORD1(v26[0])) >> 16;
  }
  if (v18.msg_controllen >= 0xC)
  {
    msg_control = (unsigned int *)v18.msg_control;
    if (v18.msg_control)
    {
      while (1)
      {
        v13 = msg_control[1];
        if (v13 != 41)
          break;
        if (msg_control[2] == 46)
        {
          v22 = msg_control[7];
          sub_23410ED5C(&v16, (__n128 *)(msg_control + 3));
LABEL_33:
          v21[1] = v16;
        }
LABEL_34:
        msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
        if ((char *)(msg_control + 3) > (char *)v18.msg_control + v18.msg_controllen)
          goto LABEL_35;
      }
      if (v13 || msg_control[2] != 26)
        goto LABEL_34;
      v22 = msg_control[3];
      sub_23410ED44((uint64_t)&v16, msg_control + 5);
      goto LABEL_33;
    }
  }
LABEL_35:
  sub_23411800C(&v20);
  (*(void (**)(uint64_t, uint64_t *, __n128 *))(a1 + 40))(a1, &v20, v21);
  v5 = v20;
  if (v20)
LABEL_16:
    sub_23411814C(v5);
}

double sub_2341140CC@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  int v7;
  double result;
  __int128 v9;
  uint64_t v10;

  v5 = *(_DWORD *)(a1 + 56);
  if (a2 == 4)
  {
    v6 = a3;
    v7 = 0;
  }
  else
  {
    if (a2 != 6)
    {
      LODWORD(v9) = 257;
      *((_QWORD *)&v9 + 1) = "src/inet/UDPEndPointImplSockets.cpp";
      LODWORD(v10) = 733;
      goto LABEL_7;
    }
    v6 = a3;
    v7 = 41;
  }
  sub_234114660(v5, v6, v7, (uint64_t)&v9);
LABEL_7:
  result = *(double *)&v9;
  *(_OWORD *)a4 = v9;
  *(_QWORD *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_234114154@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int *v14;
  _DWORD v15[7];
  int v16;
  __int128 v17;
  ifaddrs *v18[2];
  __int128 v19;

  if (*a2)
  {
    sub_23410FAEC(v18);
    if (!sub_23410FB24((uint64_t)v18))
    {
LABEL_7:
      result = (uint64_t)sub_23410FAF4(v18);
      *(_DWORD *)a5 = 272;
      *(_QWORD *)(a5 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
      v11 = 779;
      goto LABEL_15;
    }
    while (1)
    {
      sub_23410FD30(v18, &v16);
      if (v16 == *a2)
      {
        sub_23410FBB4((uint64_t)v18, &v17, (uint64_t)v15);
        if (!v15[0] && sub_23410EDDC(&v17))
          break;
      }
      sub_23410FB40(v18);
      if ((sub_23410FB24((uint64_t)v18) & 1) == 0)
        goto LABEL_7;
    }
    v19 = v17;
    sub_23410FAF4(v18);
    v12 = sub_23410ED68((uint64_t)&v19);
  }
  else
  {
    v12 = 0;
  }
  v15[1] = v12;
  v15[0] = sub_23410ED68(a3);
  if (a4)
    v13 = 12;
  else
    v13 = 13;
  result = setsockopt(*(_DWORD *)(a1 + 56), 0, v13, v15, 8u);
  if ((_DWORD)result)
  {
    v14 = __error();
    return sub_234117EFC(*v14, "src/inet/UDPEndPointImplSockets.cpp", 807, a5);
  }
  *(_DWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
  v11 = 809;
LABEL_15:
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

uint64_t sub_2341142B8@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  char v11;
  const char *v12;
  const char *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t result;
  NSObject *v19;
  char *v20;
  int v21;
  int *v22;
  int v23;
  uint8_t v24[8];
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  int v28;
  if_nameindex v29;
  int v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  char v35[16];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  if (*a2)
    goto LABEL_33;
  sub_23410F798((uint64_t)&v29);
  if (!sub_23410F7F8((uint64_t)&v29))
    goto LABEL_28;
  v11 = 0;
  if ((_DWORD)a4)
    v12 = "join";
  else
    v12 = "leave";
  if ((_DWORD)a4)
    v13 = "Joined";
  else
    v13 = "Left";
  do
  {
    if (sub_23410FA7C((uint64_t)&v29))
    {
      if ((sub_23410F97C((uint64_t)&v29) & 1) != 0)
      {
        sub_23410F860(&v29, &v28);
        sub_23410FF74((uint64_t)&v28, &v27, (uint64_t)v24);
        if (!*(_DWORD *)v24 && sub_23410F01C(&v27) == 2)
        {
          sub_23410F8B0((uint64_t *)&v29, v35, 0x10uLL, (uint64_t)v24);
          *(_QWORD *)v24 = 0;
          v25 = 0;
          v26 = 0;
          v23 = v28;
          (*(void (**)(uint8_t *__return_ptr, int *, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(v24, a1, &v23, a3, a4);
          v14 = *(_DWORD *)v24;
          v15 = sub_234117B80(1u, "Inet");
          v16 = v15;
          if (v14)
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v32 = v12;
              v33 = 2080;
              v34 = v35;
              _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "  Failed to %s multicast group on interface %s", buf, 0x16u);
            }
            if (!sub_234114844(1u))
              goto LABEL_25;
            v17 = 1;
          }
          else
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              v32 = v13;
              v33 = 2080;
              v34 = v35;
              _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "  %s multicast group on interface %s", buf, 0x16u);
            }
            if (!sub_234114844(3u))
              goto LABEL_25;
            v17 = 3;
          }
          sub_2341147D0(1u, v17);
LABEL_25:
          v11 = 1;
        }
      }
    }
  }
  while ((sub_23410F7F8((uint64_t)&v29) & 1) != 0);
  if ((v11 & 1) != 0)
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    *(_DWORD *)(a5 + 16) = 873;
    return (uint64_t)sub_23410F7A4(&v29);
  }
LABEL_28:
  v19 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "No valid IPv6 multicast interface found", v24, 2u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(1u, 1);
  sub_23410F7A4(&v29);
  v9 = *a2;
LABEL_33:
  v30 = v9;
  *(_QWORD *)&v29.if_index = sub_23410ED70(a3);
  v29.if_name = v20;
  if ((_DWORD)a4)
    v21 = 12;
  else
    v21 = 13;
  result = setsockopt(a1[14], 41, v21, &v29, 0x14u);
  if ((_DWORD)result)
  {
    v22 = __error();
    return sub_234117EFC(*v22, "src/inet/UDPEndPointImplSockets.cpp", 892, a5);
  }
  else
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    *(_DWORD *)(a5 + 16) = 894;
  }
  return result;
}

void sub_23411464C()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_234114660@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int *v6;
  int v7;

  v7 = a2;
  result = setsockopt(a1, a3, 11, &v7, 4u);
  if ((_DWORD)result)
  {
    v6 = __error();
    return sub_234117EFC(*v6, "src/inet/UDPEndPointImplSockets.cpp", 707, a4);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/inet/UDPEndPointImplSockets.cpp";
    *(_DWORD *)(a4 + 16) = 710;
  }
  return result;
}

void sub_2341146E0(_QWORD *a1@<X8>)
{
  int v1;

  do
    v1 = __ldaxr((unsigned int *)&unk_2561593B0);
  while (__stlxr(v1 + 1, (unsigned int *)&unk_2561593B0));
  if (v1 < 1)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    sub_234114758((uint64_t)a1);
  }
  else
  {
    *(_DWORD *)a1 = 0;
    a1[1] = "src/lib/support/CHIPMem.cpp";
    *((_DWORD *)a1 + 4) = 45;
  }
}

uint64_t sub_234114728(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = atomic_load((unsigned int *)&unk_2561593B0);
  if (v2 >= 1)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)&unk_2561593B0);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)&unk_2561593B0));
    if (!v4)
      return nullsub_13(result, a2);
  }
  return result;
}

void sub_234114758(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/lib/support/CHIPMem-Malloc.cpp";
  *(_DWORD *)(a1 + 16) = 78;
}

void *sub_234114774(size_t a1)
{
  return malloc_type_malloc(a1, 0xC8FB3BCAuLL);
}

void *sub_234114780(size_t a1, size_t a2)
{
  return malloc_type_calloc(a1, a2, 0xFC646414uLL);
}

void *sub_23411478C(void *a1, size_t a2)
{
  return malloc_type_realloc(a1, a2, 0xB5CE4D8FuLL);
}

BOOL sub_23411479C(uint64_t a1)
{
  return a1 != 0;
}

char *sub_2341147A8(int a1)
{
  int v1;

  if (a1 >= 42)
    v1 = 0;
  else
    v1 = a1;
  return &asc_2342D9441[4 * v1];
}

unint64_t sub_2341147C0(unint64_t result)
{
  atomic_store(result, &qword_2561593B8);
  return result;
}

uint64_t sub_2341147D0(unsigned int a1, uint64_t a2)
{
  return sub_2341147F8(a1, a2);
}

uint64_t sub_2341147F8(unsigned int a1, uint64_t a2)
{
  unsigned int v2;
  char *v3;
  uint64_t (*v4)(char *);

  if (a1 >= 0x2A)
    v2 = 0;
  else
    v2 = a1;
  v3 = &asc_2342D9441[4 * v2];
  v4 = (uint64_t (*)(char *))atomic_load(&qword_2561593B8);
  if (v4)
    return v4(v3);
  else
    return nullsub_13(v3, a2);
}

uint64_t sub_234114824()
{
  return atomic_load(byte_256157A0C);
}

uint64_t sub_234114834(uint64_t result)
{
  atomic_store(result, byte_256157A0C);
  return result;
}

BOOL sub_234114844(unsigned int a1)
{
  unsigned int v1;

  v1 = atomic_load(byte_256157A0C);
  return v1 >= a1;
}

uint64_t sub_23411485C(unsigned __int8 *a1, int a2, _BYTE *a3, uint64_t (*a4)(uint64_t))
{
  __int16 v4;
  __int16 v5;
  __int16 v7;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  char v16;

  v4 = (__int16)a3;
  v5 = (__int16)a3;
  if (a2)
  {
    v7 = a2;
    v9 = a3;
    do
    {
      v10 = *a1;
      v11 = 16 * (v10 & 3);
      if (v7 == 1)
      {
        v7 = 0;
        v12 = 255;
        ++a1;
      }
      else
      {
        v13 = a1[1];
        v11 = v11 | (v13 >> 4);
        v12 = 4 * (v13 & 0xF);
        if (v7 != 2)
        {
          v15 = a1[2];
          v12 = v12 | (v15 >> 6);
          v14 = v15 & 0x3F;
          a1 += 3;
          v7 -= 3;
          goto LABEL_9;
        }
        v7 = 0;
        a1 += 2;
      }
      v14 = 255;
LABEL_9:
      *v9 = a4(v10 >> 2);
      v9[1] = a4(v11);
      v9[2] = a4(v12);
      v16 = a4(v14);
      v5 = (_WORD)v9 + 4;
      v9[3] = v16;
      v9 += 4;
    }
    while (v7);
  }
  return (unsigned __int16)(v5 - v4);
}

uint64_t sub_234114950(unsigned __int8 *a1, int a2, _BYTE *a3)
{
  return sub_23411485C(a1, a2, a3, (uint64_t (*)(uint64_t))sub_23411495C);
}

uint64_t sub_23411495C(unsigned int a1)
{
  int v1;
  char v2;
  char v3;
  char v4;
  char v5;

  v1 = (a1 - 52);
  if (v1 == 11)
    v2 = 47;
  else
    v2 = 61;
  if (v1 == 10)
    v3 = 43;
  else
    v3 = v2;
  if (a1 - 52 <= 9)
    v4 = a1 - 4;
  else
    v4 = v3;
  if (a1 - 26 <= 0x19)
    v5 = a1 + 71;
  else
    v5 = v4;
  if (a1 <= 0x19)
    return (char)(a1 + 65);
  return v5;
}

uint64_t sub_2341149B0(unsigned __int8 *a1, int a2, _BYTE *a3)
{
  return sub_23411485C(a1, a2, a3, (uint64_t (*)(uint64_t))sub_2341149BC);
}

uint64_t sub_2341149BC(unsigned int a1)
{
  int v1;
  char v2;
  char v3;
  char v4;
  char v5;

  v1 = (a1 - 52);
  if (v1 == 11)
    v2 = 95;
  else
    v2 = 61;
  if (v1 == 10)
    v3 = 45;
  else
    v3 = v2;
  if (a1 - 52 <= 9)
    v4 = a1 - 4;
  else
    v4 = v3;
  if (a1 - 26 <= 0x19)
    v5 = a1 + 71;
  else
    v5 = v4;
  if (a1 <= 0x19)
    return (char)(a1 + 65);
  return v5;
}

uint64_t sub_234114A10(unsigned __int8 *a1, unsigned int a2, _BYTE *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  LODWORD(v8) = 0;
  do
  {
    if (a2 >= 0xBFFD)
      v9 = 49149;
    else
      v9 = a2;
    v10 = sub_23411485C(a1, v9, a3, a4);
    v8 = v8 + v10;
    a1 += v9;
    a3 += v10;
    a2 -= v9;
  }
  while (a2);
  return v8;
}

uint64_t sub_234114A8C(unsigned __int8 *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  LODWORD(v6) = 0;
  do
  {
    if (a2 >= 0xBFFD)
      v7 = 49149;
    else
      v7 = a2;
    v8 = sub_23411485C(a1, v7, a3, (uint64_t (*)(uint64_t))sub_23411495C);
    v6 = v6 + v8;
    a1 += v7;
    a3 += v8;
    a2 -= v7;
  }
  while (a2);
  return v6;
}

uint64_t sub_234114B0C(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t (*a4)(void))
{
  __int16 v4;
  _BYTE *v5;
  __int16 v7;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned __int16 v14;
  char v15;
  unsigned int v16;
  char v17;
  int v18;

  v4 = a3;
  LOWORD(v5) = a3;
  if (a2)
  {
    v7 = a2;
    v5 = (_BYTE *)(a3 + 2);
    v9 = MEMORY[0x24BDAC740];
    v10 = a3;
    while (1)
    {
      v11 = (char)*a1;
      if ((v11 & 0x80000000) != 0)
      {
        if (!__maskrune(v11, 0x800uLL))
          goto LABEL_17;
      }
      else if ((*(_DWORD *)(v9 + 4 * v11 + 60) & 0x800) == 0)
      {
        goto LABEL_17;
      }
      if (v7 == 1)
        return (unsigned __int16)-1;
      v12 = ((uint64_t (*)(_QWORD))a4)(*a1);
      v13 = ((uint64_t (*)(_QWORD))a4)(a1[1]);
      v14 = -1;
      if (v12 == 255)
        return v14;
      v15 = v13;
      if (v13 == 255)
        return v14;
      *(v5 - 2) = (v13 >> 4) | (4 * v12);
      if (v7 == 2)
      {
        LOWORD(v5) = v10 + 1;
        return (unsigned __int16)((_WORD)v5 - v4);
      }
      if (a1[2] == 61)
      {
        LOWORD(v5) = (_WORD)v5 - 1;
        return (unsigned __int16)((_WORD)v5 - v4);
      }
      v16 = a4();
      if (v16 == 255)
        return (unsigned __int16)-1;
      v17 = v16;
      *(v5 - 1) = (v16 >> 2) | (16 * v15);
      if (v7 == 3)
        return (unsigned __int16)((_WORD)v5 - v4);
      if (a1[3] == 61)
        break;
      v18 = a4();
      if (v18 == 255)
        return (unsigned __int16)-1;
      v7 -= 4;
      v10 += 3;
      *v5 = v18 | (v17 << 6);
      v5 += 3;
      a1 += 4;
      if (!v7)
      {
LABEL_17:
        LOWORD(v5) = (_WORD)v5 - 2;
        return (unsigned __int16)((_WORD)v5 - v4);
      }
    }
    LOWORD(v5) = v10 + 2;
  }
  return (unsigned __int16)((_WORD)v5 - v4);
}

uint64_t sub_234114C78(unsigned __int8 *a1, int a2, uint64_t a3)
{
  return sub_234114B0C(a1, a2, a3, (uint64_t (*)(void))sub_234114C84);
}

uint64_t sub_234114C84(int a1)
{
  unsigned int v1;
  char v2;
  unsigned __int8 v3;

  v1 = a1 - 65;
  if ((a1 - 97) >= 0x1A)
    v2 = -1;
  else
    v2 = a1 - 71;
  if (v1 >= 0x1A)
    LOBYTE(v1) = v2;
  if ((a1 - 48) <= 9)
    v3 = a1 + 4;
  else
    v3 = v1;
  if (a1 == 47)
    v3 = 63;
  if (a1 == 43)
    return 62;
  else
    return v3;
}

uint64_t sub_234114CD0(unsigned __int8 *a1, int a2, uint64_t a3)
{
  return sub_234114B0C(a1, a2, a3, (uint64_t (*)(void))sub_234114CDC);
}

uint64_t sub_234114CDC(int a1)
{
  unsigned int v1;
  char v2;
  unsigned __int8 v3;

  v1 = a1 - 65;
  if ((a1 - 97) >= 0x1A)
    v2 = -1;
  else
    v2 = a1 - 71;
  if (v1 >= 0x1A)
    LOBYTE(v1) = v2;
  if ((a1 - 48) <= 9)
    v3 = a1 + 4;
  else
    v3 = v1;
  if (a1 == 95)
    v3 = 63;
  if (a1 == 45)
    return 62;
  else
    return v3;
}

uint64_t sub_234114D28(unsigned __int8 *a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  if (a2 >= 0xFFFC)
    v8 = 65532;
  else
    v8 = a2;
  v9 = sub_234114B0C(a1, v8, a3, a4);
  if (v9 == 0xFFFF)
    return 0xFFFFFFFFLL;
  LODWORD(v10) = 0;
  while (1)
  {
    v10 = v10 + v9;
    v6 -= v8;
    if (!v6)
      break;
    v7 += v8;
    v5 += v9;
    if (v6 >= 0xFFFC)
      v8 = 65532;
    else
      v8 = v6;
    v9 = sub_234114B0C(v7, v8, v5, a4);
    if (v9 == 0xFFFF)
      return 0xFFFFFFFFLL;
  }
  return v10;
}

uint64_t sub_234114DCC(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  return sub_234114D28(a1, a2, a3, (uint64_t (*)(void))sub_234114C84);
}

uint64_t sub_234114DD8(uint64_t result, _BYTE *a2)
{
  uint64_t v2;

  if (!*(_DWORD *)(result + 24))
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      *a2 = *(_BYTE *)(*(_QWORD *)(result + 8))++;
      v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 1);
    }
    else
    {
      *(_DWORD *)(result + 24) = 25;
      *(_QWORD *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(_QWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_234114E38(uint64_t result, BOOL *a2)
{
  uint64_t v2;

  if (!*(_DWORD *)(result + 24))
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      *a2 = *(_BYTE *)(*(_QWORD *)(result + 8))++ != 0;
      v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 1);
    }
    else
    {
      *(_DWORD *)(result + 24) = 25;
      *(_QWORD *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(_QWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_234114EA0(uint64_t result, _WORD *a2)
{
  uint64_t v2;

  if (!*(_DWORD *)(result + 24))
  {
    if (*(_QWORD *)(result + 16) > 1uLL)
    {
      *a2 = **(_WORD **)(result + 8);
      *(_QWORD *)(result + 8) += 2;
      v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 2);
    }
    else
    {
      v2 = 0;
      *(_DWORD *)(result + 24) = 25;
      *(_QWORD *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(_QWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_234114F0C(uint64_t result, _DWORD *a2)
{
  uint64_t v2;

  if (!*(_DWORD *)(result + 24))
  {
    if (*(_QWORD *)(result + 16) > 3uLL)
    {
      *a2 = **(_DWORD **)(result + 8);
      *(_QWORD *)(result + 8) += 4;
      v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 4);
    }
    else
    {
      v2 = 0;
      *(_DWORD *)(result + 24) = 25;
      *(_QWORD *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(_QWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_234114F78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  if (!*(_DWORD *)(result + 24))
  {
    if (*(_QWORD *)(result + 16) > 7uLL)
    {
      *a2 = **(_QWORD **)(result + 8);
      *(_QWORD *)(result + 8) += 8;
      v2 = (unsigned __int16)(*(_DWORD *)(result + 16) - 8);
    }
    else
    {
      v2 = 0;
      *(_DWORD *)(result + 24) = 25;
      *(_QWORD *)(result + 32) = "src/lib/support/BufferReader.cpp";
      *(_DWORD *)(result + 40) = 63;
    }
    *(_QWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_234114FE4(uint64_t a1, void *__dst, size_t __n)
{
  uint64_t v5;

  if (__n >> 16 || *(_QWORD *)(a1 + 16) < __n)
  {
    *(_DWORD *)(a1 + 24) = 25;
    *(_QWORD *)(a1 + 32) = "src/lib/support/BufferReader.cpp";
    *(_DWORD *)(a1 + 40) = 81;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    memcpy(__dst, *(const void **)(a1 + 8), __n);
    v5 = (unsigned __int16)(*(_DWORD *)(a1 + 16) - __n);
    *(_QWORD *)(a1 + 8) += __n;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

_QWORD *sub_23411506C(_QWORD *a1, char *__s)
{
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  size_t v9;
  size_t v10;

  v4 = strlen(__s);
  v6 = a1[1];
  v5 = a1[2];
  v7 = v6 >= v5;
  v8 = v6 > v5;
  v9 = v6 - v5;
  if (v8)
  {
    if (!v7)
      v9 = 0;
    if (v9 >= v4)
      v10 = v4;
    else
      v10 = v9;
    memmove((void *)(*a1 + v5), __s, v10);
    v5 = a1[2];
  }
  a1[2] = v5 + v4;
  return a1;
}

_QWORD *sub_2341150D8(_QWORD *a1, const void *a2, size_t a3)
{
  size_t v3;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  size_t v9;
  void *v10;

  v3 = a3;
  v6 = a1[1];
  v5 = a1[2];
  v7 = v6 >= v5;
  v8 = v6 > v5;
  v9 = v6 - v5;
  if (v8)
  {
    if (!v7)
      v9 = 0;
    v10 = (void *)(*a1 + v5);
    if (v9 < a3)
      a3 = v9;
    memmove(v10, a2, a3);
    v5 = a1[2];
  }
  a1[2] = v5 + v3;
  return a1;
}

_QWORD *sub_23411512C(_QWORD *result, char a2)
{
  unint64_t v2;

  v2 = result[2];
  if (v2 < result[1])
  {
    *(_BYTE *)(*result + v2) = a2;
    v2 = result[2];
  }
  result[2] = v2 + 1;
  return result;
}

_QWORD *sub_234115150(_QWORD *result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a3)
  {
    v3 = result[2];
    do
    {
      if (v3 < result[1])
      {
        *(_BYTE *)(*result + v3) = a2;
        v3 = result[2];
      }
      result[2] = ++v3;
      a2 >>= 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

_QWORD *sub_234115188(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a3)
  {
    v3 = result[2];
    do
    {
      if (v3 < result[1])
      {
        *(_BYTE *)(*result + v3) = a2;
        v3 = result[2];
      }
      result[2] = ++v3;
      a2 >>= 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

_QWORD *sub_2341151C0(_QWORD *result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  char v4;

  if (a3)
  {
    v3 = result[2];
    v4 = 8 * a3 - 8;
    do
    {
      if (v3 < result[1])
      {
        *(_BYTE *)(*result + v3) = a2 >> v4;
        v3 = result[2];
      }
      result[2] = ++v3;
      v4 -= 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

_QWORD *sub_234115204(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  char v4;

  if (a3)
  {
    v3 = result[2];
    v4 = 8 * a3 - 8;
    do
    {
      if (v3 < result[1])
      {
        *(_BYTE *)(*result + v3) = a2 >> v4;
        v3 = result[2];
      }
      result[2] = ++v3;
      v4 -= 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

char *sub_234115248@<X0>(char *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, unint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  _BYTE *v14;

  if (!result && a2)
  {
    v6 = 103;
LABEL_11:
    v7 = 47;
    goto LABEL_12;
  }
  if (!a3 && a4)
  {
    v6 = 108;
    goto LABEL_11;
  }
  if (a2 < 0)
  {
    v6 = 116;
    goto LABEL_11;
  }
  if (((a5 >> 1) & 1 | (unint64_t)(2 * a2)) <= a4)
  {
    if (a2)
    {
      if ((a5 & 1) != 0)
        v8 = 55;
      else
        v8 = 87;
      do
      {
        if (*result <= 0x9Fu)
          v9 = (*result >> 4) | 0x30;
        else
          v9 = v8 + (*result >> 4);
        *a3 = v9;
        v10 = *result++;
        v11 = v8 + (v10 & 0xF);
        v12 = v10 & 0xF | 0x30;
        if ((v10 & 0xFu) <= 9)
          v13 = v12;
        else
          v13 = v11;
        v14 = a3 + 2;
        a3[1] = v13;
        a3 += 2;
        --a2;
      }
      while (a2);
      a3 = v14;
    }
    v7 = 0;
    if ((a5 & 2) != 0)
      *a3 = 0;
    v6 = 139;
  }
  else
  {
    v6 = 123;
    v7 = 25;
  }
LABEL_12:
  *(_DWORD *)a6 = v7;
  *(_QWORD *)(a6 + 8) = "src/lib/support/BytesToHex.cpp";
  *(_DWORD *)(a6 + 16) = v6;
  return result;
}

char *sub_234115324@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v6[0] = bswap64(a1);
  return sub_234115248((char *)v6, 8, a2, a3, a4, a5);
}

char *sub_23411538C@<X0>(unsigned int a1@<W0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v6;

  v6 = bswap32(a1);
  return sub_234115248((char *)&v6, 4, a2, a3, a4, a5);
}

char *sub_2341153C8@<X0>(unsigned int a1@<W0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  __int16 v6;

  v6 = __rev16(a1);
  return sub_234115248((char *)&v6, 2, a2, a3, a4, a5);
}

uint64_t sub_234115404(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23411540C(a1, a2, a3, a4, 0);
}

uint64_t sub_23411540C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  int v12;
  char v13;

  v5 = 0;
  if (a1)
  {
    if (a3)
    {
      v5 = 0;
      if ((a2 & 1) == 0 && a2 - 1 < 2 * a4)
      {
        v6 = 0;
        v7 = 0;
        do
        {
          v8 = 0;
          v9 = 0;
          v10 = 1;
          do
          {
            v11 = v10;
            v12 = *(unsigned __int8 *)(a1 + v6 + v8);
            if ((v12 - 48) >= 0xA)
            {
              if ((v12 - 65) >= 6)
              {
                v5 = 0;
                if ((a5 & 1) != 0 || (v12 - 103) < 0xFAu)
                  return v5;
                v13 = -87;
              }
              else
              {
                v13 = -55;
              }
            }
            else
            {
              v13 = -48;
            }
            v10 = 0;
            v9 = v12 + 16 * v9 + v13;
            v8 = 1;
          }
          while ((v11 & 1) != 0);
          *(_BYTE *)(a3 + (v6 >> 1)) = v9;
          ++v7;
          v6 += 2;
          v5 = v7;
        }
        while (v6 < a2);
      }
    }
  }
  return v5;
}

uint64_t sub_2341154D0(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v6[0] = 0;
  v4 = sub_23411540C(a1, a2, (uint64_t)v6, 8, 1);
  result = 0;
  if (v4 == 8)
  {
    *a3 = bswap64(v6[0]);
    return 8;
  }
  return result;
}

uint64_t sub_234115554(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v5;

  v5 = 0;
  result = sub_23411540C(a1, a2, (uint64_t)&v5, 4, 1);
  if (result != 4)
    return 0;
  *a3 = bswap32(v5);
  return result;
}

uint64_t sub_2341155A8(uint64_t a1, unint64_t a2, _WORD *a3)
{
  uint64_t result;
  unsigned __int16 v5;

  v5 = 0;
  result = sub_23411540C(a1, a2, (uint64_t)&v5, 2, 1);
  if (result != 2)
    return 0;
  *a3 = bswap32(v5) >> 16;
  return result;
}

uint64_t sub_234115600(const char *a1, uint64_t a2)
{
  unint64_t v3;
  char *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t result;
  NSObject *v11;
  const char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint8_t v16[4];
  const char *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(char **)a2;
    if (a1)
      v5 = a1;
    else
      v5 = "";
    while (1)
    {
      v6 = v3 >= 0x20 ? 32 : v3;
      v14 = 0uLL;
      v15 = 0;
      sub_234115248(v4, v6, v16, 0x41uLL, 3u, (uint64_t)&v14);
      v7 = v14;
      v8 = sub_234117B80(0x1Bu, "Support");
      v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v7)
        break;
      if (v9)
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v5;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v16;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "%s>>>%s", buf, 0x16u);
      }
      result = sub_234114844(2u);
      if ((_DWORD)result)
        result = sub_2341147D0(0x1Bu, 2);
      v4 += v6;
      v3 -= v6;
      if (!v3)
        return result;
    }
    if (v9)
    {
      *(_OWORD *)buf = v14;
      *(_QWORD *)&buf[16] = v15;
      v13 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Failed to dump hex %s", buf, 0xCu);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = v14;
      *(_QWORD *)&buf[16] = v15;
      sub_2341083CC((const char **)buf, 1);
      return sub_2341147D0(0x1Bu, 2);
    }
  }
  else
  {
    v11 = sub_234117B80(0x1Bu, "Support");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = "";
      if (a1)
        v12 = a1;
      *(_DWORD *)v16 = 136315138;
      v17 = v12;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "%s>>>", v16, 0xCu);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      return sub_2341147D0(0x1Bu, 2);
  }
  return result;
}

uint64_t sub_234115890(unsigned int a1)
{
  uint64_t result;
  int v2;
  int v3;
  int v4;
  int v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v6[0] = 0x100000000;
  if (a1 < 2)
    return *((unsigned int *)v6 + a1);
  v2 = 0;
  if (a1 + 1 > 3)
    v3 = a1 + 1;
  else
    v3 = 3;
  v4 = v3 - 2;
  v5 = 1;
  do
  {
    result = (v5 + v2);
    v2 = v5;
    v5 = result;
    --v4;
  }
  while (v4);
  return result;
}

void sub_234115924()
{
  int v0;
  int v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (!byte_25615DDA9)
  {
    v0 = atexit(sub_234115A18);
    if (v0)
    {
      v1 = v0;
      v2 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v4 = v1;
        _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_ERROR, "IgnoreLeaksOnExit: atexit failed: %d\n", buf, 8u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
    }
    byte_25615DDA9 = 1;
  }
}

void sub_234115A18()
{
  byte_25615DDA8 = 1;
}

_QWORD *sub_234115A28(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;

  *result = 0;
  result[1] = 0;
  result[2] = a4;
  result[3] = a2;
  result[4] = a5;
  result[5] = a3;
  if (a4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      atomic_store(0, (unint64_t *)(result[5] + v6));
      v6 += 8;
      v5 += 64;
    }
    while (v5 < result[2]);
  }
  return result;
}

_QWORD *sub_234115A64(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;

  *result = 0;
  result[1] = 0;
  result[2] = a4;
  result[3] = a2;
  result[4] = a5;
  result[5] = a3;
  if (a4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      atomic_store(0, (unint64_t *)(result[5] + v5));
      v6 += 64;
      v5 += 8;
    }
    while (v6 < result[2]);
  }
  return result;
}

unint64_t sub_234115AA0(unint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = a1[2];
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    while (2)
    {
      v4 = 0;
      v5 = (unint64_t *)(a1[5] + 8 * v3);
      v6 = *v5;
      while (1)
      {
        v7 = v4 + v2;
        v8 = a1[2];
        if (v4 + v2 >= v8)
          break;
        if (((1 << v4) & v6) == 0)
        {
          do
          {
            v9 = __ldaxr(v5);
            if (v9 != v6)
            {
              __clrex();
              v6 = *v5;
              goto LABEL_10;
            }
          }
          while (__stlxr((1 << v4) | v6, v5));
          v10 = a1[1];
          v11 = *a1 + 1;
          *a1 = v11;
          if (v11 > v10)
            a1[1] = v11;
          return a1[3] + a1[4] * v7;
        }
LABEL_10:
        if (++v4 == 64)
        {
          v8 = a1[2];
          break;
        }
      }
      v1 = 0;
      v2 = ++v3 << 6;
      if (v3 << 6 < v8)
        continue;
      break;
    }
  }
  return v1;
}

unint64_t sub_234115B54(_QWORD *a1, uint64_t a2)
{
  unint64_t result;
  unint64_t *v4;
  unint64_t v5;

  result = sub_234115BC4(a1, a2);
  if (result >= a1[2])
    sub_234259428(result);
  v4 = (unint64_t *)(a1[5] + 8 * (result >> 6));
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 & ~(1 << result), v4));
  if ((v5 & (1 << result)) == 0)
    sub_234259394(result);
  --*a1;
  return result;
}

unint64_t sub_234115BC4(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a2 - a1[3];
  if ((v2 & 0x8000000000000000) != 0)
    sub_2342595E4((uint64_t)a1);
  v3 = a1[4];
  if (v2 % v3)
    sub_234259550((uint64_t)a1);
  if (v2 / v3 >= a1[2])
    sub_2342594BC((uint64_t)a1);
  return v2 / v3;
}

uint64_t sub_234115C0C(_QWORD *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  if (a1[2])
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1[5] + 8 * v7);
      while (1)
      {
        v10 = a1[2];
        if (v6 + v8 >= v10)
          break;
        if (((v9 >> v8) & 1) != 0)
        {
          result = a3(a2, a1[3] + a1[4] * (v6 + v8));
          if ((_DWORD)result == 1)
            return result;
        }
        if (++v8 == 64)
        {
          v10 = a1[2];
          break;
        }
      }
      ++v7;
      v6 += 64;
    }
    while (v10 > v7 << 6);
  }
  return 2;
}

unint64_t sub_234115CB8(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 40);
    while (2)
    {
      v7 = 0;
      do
      {
        if (((*(_QWORD *)(v6 + 8 * v4) >> v7) & 1) != 0)
          return v5 + v7;
        v8 = v7 + 1;
        if (v7 > 0x3E)
          break;
        ++v7;
      }
      while (v8 + v3 < result);
      ++v4;
      v3 += 64;
      v5 += v8;
      if (result > v4 << 6)
        continue;
      break;
    }
  }
  else
  {
    v5 = 0;
  }
  if (v5 != result)
    sub_234259678(result);
  return result;
}

unint64_t sub_234115D40(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 40);
    while (2)
    {
      v8 = 0;
      do
      {
        if (((*(_QWORD *)(v7 + 8 * v5) >> v8) & 1) != 0 && v6 + v8 > a2)
          return v6 + v8;
        v9 = v8 + 1;
        if (v8 > 0x3E)
          break;
        ++v8;
      }
      while (v9 + v4 < result);
      ++v5;
      v4 += 64;
      v6 += v9;
      if (result > v5 << 6)
        continue;
      break;
    }
  }
  else
  {
    v6 = 0;
  }
  if (v6 != result)
    sub_23425970C(result);
  return result;
}

_QWORD *sub_234115DD4(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  v2 = result;
  while (1)
  {
    result = (_QWORD *)result[1];
    if (result == v2)
      break;
    if (*result == a2)
      return result;
  }
  return 0;
}

uint64_t sub_234115DFC(_QWORD *a1, uint64_t a2, unsigned int (*a3)(uint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;

  v4 = a1[3];
  a1[3] = v4 + 1;
  v5 = (_QWORD *)a1[1];
  if (v5 == a1)
  {
    v8 = 2;
  }
  else
  {
    while (!*v5 || a3(a2) != 1)
    {
      v5 = (_QWORD *)v5[1];
      if (v5 == a1)
      {
        v8 = 2;
        goto LABEL_8;
      }
    }
    v8 = 1;
LABEL_8:
    v4 = a1[3] - 1;
  }
  a1[3] = v4;
  sub_234115E90(a1);
  return v8;
}

_QWORD *sub_234115E90(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!result[3])
  {
    v1 = result;
    if (*((_BYTE *)result + 32))
    {
      result = (_QWORD *)result[1];
      if (result != v1)
      {
        do
        {
          v2 = (_QWORD *)result[1];
          if (!*result)
          {
            v2[2] = result[2];
            *(_QWORD *)(result[2] + 8) = result[1];
            j__free(result);
          }
          result = v2;
        }
        while (v2 != v1);
      }
      *((_BYTE *)v1 + 32) = 0;
    }
  }
  return result;
}

BOOL sub_234115EF4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + a2;
  if (a2 >= 3)
  {
    do
    {
      v3 = *(unsigned __int8 *)(a1 + 1);
      if (v3 == 255)
        break;
      v4 = a1 + v3;
      a1 = v4 + 2;
    }
    while (v4 + 4 < v2);
  }
  return a1 == v2;
}

_BYTE *sub_234115F2C@<X0>(_BYTE *__dst@<X0>, size_t __n@<X2>, unsigned __int8 *a3@<X1>, uint64_t a4@<X8>)
{
  int v5;
  char v6;
  _BYTE *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;

  if (__n <= 0xFE)
  {
    v6 = __n;
    v7 = __dst;
    if (__n)
    {
      v8 = (unint64_t)&a3[__n];
      v9 = a3;
      if (__n >= 3)
      {
        v9 = a3;
        do
        {
          v10 = v9[1];
          if (v10 == 255)
            break;
          v11 = &v9[v10];
          v9 = v11 + 2;
        }
        while ((unint64_t)(v11 + 4) < v8);
      }
      if (v9 != (unsigned __int8 *)v8)
      {
        v5 = 185;
        goto LABEL_10;
      }
      __dst = memcpy(__dst, a3, __n);
    }
    v12 = 0;
    v7[254] = v6;
    v5 = 192;
    goto LABEL_13;
  }
  v5 = 178;
LABEL_10:
  v12 = 47;
LABEL_13:
  *(_DWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a4 + 16) = v5;
  return __dst;
}

unint64_t sub_234115FE0@<X0>(unint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(_BYTE *)(result + 254))
  {
    do
    {
      if (*(_BYTE *)result == 14)
        break;
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v5 = 198;
    v4 = 118;
  }
  else if (*(_BYTE *)(result + 1) == 8)
  {
    v4 = 0;
    *a2 = bswap64(*(_QWORD *)(result + 2));
    v5 = 201;
  }
  else
  {
    v5 = 199;
    v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_234116064(unsigned __int8 *result, int a2)
{
  unsigned __int8 *v2;

  v2 = &result[result[254]];
  if (result[254])
  {
    do
    {
      if (*result == a2)
        break;
      result += result[1] + 2;
    }
    while (result < v2);
  }
  if (result == v2)
    return 0;
  return result;
}

unsigned __int8 *sub_23411609C@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  int v7;
  int v8;

  result = sub_23411611C(a1, 14, 0xAuLL);
  if (result)
  {
    v7 = 0;
    result[1] = 8;
    *(_QWORD *)(result + 2) = bswap64(a2);
    a1[254] += 10;
    v8 = 213;
  }
  else
  {
    v8 = 207;
    v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unsigned __int8 *sub_23411611C(unsigned __int8 *a1, int a2, unint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;

  v5 = a1[254];
  v6 = &a1[v5];
  v7 = a1;
  if (a1[254])
  {
    v7 = a1;
    do
    {
      if (*v7 == a2)
        break;
      v7 += v7[1] + 2;
    }
    while (v7 < v6);
  }
  v8 = 254 - v5;
  if (v7 == v6)
  {
    if (v8 >= a3)
      goto LABEL_10;
    return 0;
  }
  if (v8 + (v7[1] + 2) < a3)
    return 0;
  sub_234116DC8(a1, v7);
  v5 = a1[254];
LABEL_10:
  a1[v5] = a2;
  return &a1[a1[254]];
}

unint64_t sub_2341161C0@<X0>(unint64_t result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(_BYTE *)(result + 254))
  {
    do
    {
      if (!*(_BYTE *)result)
        break;
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v5 = 219;
    v4 = 118;
  }
  else if (*(_BYTE *)(result + 1) == 3)
  {
    v4 = 0;
    *a2 = bswap32(*(unsigned __int16 *)(result + 3)) >> 16;
    v5 = 224;
  }
  else
  {
    v5 = 220;
    v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_234116244@<X0>(unsigned __int8 *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  int v7;
  int v8;

  result = sub_23411611C(a1, 0, 5uLL);
  if (result)
  {
    v7 = 0;
    *(_WORD *)(result + 1) = 3;
    result[3] = HIBYTE(a2);
    result[4] = a2;
    a1[254] += 5;
    v8 = 237;
  }
  else
  {
    v8 = 231;
    v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_2341162C8@<X0>(unint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(_BYTE *)(result + 254))
  {
    do
    {
      if (*(_BYTE *)result == 2)
        break;
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v4 = 260;
    v5 = 118;
LABEL_9:
    *(_DWORD *)a3 = v5;
    a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 1) != 8)
  {
    v4 = 261;
    v5 = 35;
    goto LABEL_9;
  }
  a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
  *((_DWORD *)a3 + 4) = 263;
  *a2 = *(_QWORD *)(result + 2);
  *(_DWORD *)a3 = 0;
  a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
  v4 = 245;
LABEL_10:
  *((_DWORD *)a3 + 4) = v4;
  return result;
}

_BYTE *sub_234116368@<X0>(_BYTE *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  int v4;
  int v5;

  v3 = &result[result[254]];
  if (result[254])
  {
    do
    {
      if (*result == 2)
        break;
      result += result[1] + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v5 = 260;
    v4 = 118;
  }
  else if (result[1] == 8)
  {
    v4 = 0;
    *a2 = result + 2;
    a2[1] = 8;
    v5 = 263;
  }
  else
  {
    v5 = 261;
    v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unint64_t sub_2341163EC@<X0>(unint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(_BYTE *)(result + 254))
  {
    do
    {
      if (*(_BYTE *)result == 2)
        break;
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v4 = 260;
    v5 = 118;
LABEL_9:
    *(_DWORD *)a3 = v5;
    a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 1) != 8)
  {
    v4 = 261;
    v5 = 35;
    goto LABEL_9;
  }
  a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
  *((_DWORD *)a3 + 4) = 263;
  *a2 = bswap64(*(_QWORD *)(result + 2));
  *(_DWORD *)a3 = 0;
  a3[1] = "src/lib/support/ThreadOperationalDataset.cpp";
  v4 = 254;
LABEL_10:
  *((_DWORD *)a3 + 4) = v4;
  return result;
}

unsigned __int8 *sub_234116490@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  int v7;
  int v8;

  result = sub_23411611C(a1, 2, 0xAuLL);
  if (result)
  {
    v7 = 0;
    result[1] = 8;
    *(_QWORD *)(result + 2) = *a2;
    a1[254] += 10;
    v8 = 277;
  }
  else
  {
    v8 = 269;
    v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_234116510@<X0>(unint64_t result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(_BYTE *)(result + 254))
  {
    do
    {
      if (*(_BYTE *)result == 5)
        break;
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v5 = 283;
    v4 = 118;
  }
  else if (*(_BYTE *)(result + 1) == 16)
  {
    v4 = 0;
    *a2 = *(_OWORD *)(result + 2);
    v5 = 286;
  }
  else
  {
    v5 = 284;
    v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_234116590@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  int v7;
  int v8;

  result = sub_23411611C(a1, 5, 0x12uLL);
  if (result)
  {
    v7 = 0;
    result[1] = 16;
    *(_OWORD *)(result + 2) = *a2;
    a1[254] += 18;
    v8 = 300;
  }
  else
  {
    v8 = 292;
    v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_234116610@<X0>(unint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(_BYTE *)(result + 254))
  {
    do
    {
      if (*(_BYTE *)result == 7)
        break;
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v5 = 306;
    v4 = 118;
  }
  else if (*(_BYTE *)(result + 1) == 8)
  {
    v4 = 0;
    *a2 = *(_QWORD *)(result + 2);
    v5 = 309;
  }
  else
  {
    v5 = 307;
    v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_234116690@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  int v7;
  int v8;

  result = sub_23411611C(a1, 7, 0xAuLL);
  if (result)
  {
    v7 = 0;
    result[1] = 8;
    *(_QWORD *)(result + 2) = *a2;
    a1[254] += 10;
    v8 = 321;
  }
  else
  {
    v8 = 315;
    v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

_BYTE *sub_234116710@<X0>(void *__dst@<X1>, _BYTE *result@<X0>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  _BYTE *v6;
  size_t v7;
  int v8;
  int v9;

  v4 = result;
  v6 = &result[result[254]];
  if (result[254])
  {
    do
    {
      if (*v4 == 3)
        break;
      v4 += v4[1] + 2;
    }
    while (v4 < v6);
  }
  if (v4 == v6)
  {
    v9 = 327;
    v8 = 118;
  }
  else
  {
    v7 = v4[1];
    if (v7 > 0x10)
    {
      v9 = 328;
      v8 = 35;
    }
    else
    {
      result = memcpy(__dst, v4 + 2, v7);
      v8 = 0;
      *((_BYTE *)__dst + v4[1]) = 0;
      v9 = 331;
    }
  }
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

unsigned __int8 *sub_2341167C4@<X0>(char *__s@<X1>, unsigned __int8 *result@<X0>, uint64_t a3@<X8>)
{
  unsigned __int8 *v5;
  size_t v6;
  int v7;
  int v8;

  if (__s)
  {
    v5 = result;
    result = (unsigned __int8 *)strlen(__s);
    if ((unint64_t)(result - 1) > 0xF)
    {
      v8 = 338;
      v7 = 30;
    }
    else
    {
      v6 = (size_t)result;
      result = sub_23411611C(v5, 3, (unint64_t)(result + 2));
      if (result)
      {
        result[1] = v6;
        result = (unsigned __int8 *)memcpy(result + 2, __s, v6);
        v7 = 0;
        v5[254] += v6 + 2;
        v8 = 347;
      }
      else
      {
        v8 = 341;
        v7 = 11;
      }
    }
  }
  else
  {
    v8 = 336;
    v7 = 47;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_234116884@<X0>(unint64_t result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(_BYTE *)(result + 254))
  {
    do
    {
      if (*(_BYTE *)result == 1)
        break;
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v5 = 353;
    v4 = 118;
  }
  else if (*(_BYTE *)(result + 1) == 2)
  {
    v4 = 0;
    *a2 = bswap32(*(unsigned __int16 *)(result + 2)) >> 16;
    v5 = 356;
  }
  else
  {
    v5 = 354;
    v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_23411690C@<X0>(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  int v7;
  int v8;

  result = sub_23411611C(a1, 1, 4uLL);
  if (result)
  {
    v7 = 0;
    result[1] = 2;
    *((_WORD *)result + 1) = __rev16(a2);
    a1[254] += 4;
    v8 = 368;
  }
  else
  {
    v8 = 362;
    v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_23411698C@<X0>(unint64_t result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(_BYTE *)(result + 254))
  {
    do
    {
      if (*(_BYTE *)result == 4)
        break;
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v5 = 374;
    v4 = 118;
  }
  else if (*(_BYTE *)(result + 1) == 16)
  {
    v4 = 0;
    *a2 = *(_OWORD *)(result + 2);
    v5 = 377;
  }
  else
  {
    v5 = 375;
    v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_234116A0C@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  int v7;
  int v8;

  result = sub_23411611C(a1, 4, 0x12uLL);
  if (result)
  {
    v7 = 0;
    result[1] = 16;
    *(_OWORD *)(result + 2) = *a2;
    a1[254] += 18;
    v8 = 389;
  }
  else
  {
    v8 = 383;
    v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

_BYTE *sub_234116A8C@<X0>(_BYTE *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v4;
  int v5;
  int v6;

  v3 = &result[result[254]];
  if (result[254])
  {
    do
    {
      if (*result == 53)
        break;
      result += result[1] + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v6 = 395;
    v5 = 118;
  }
  else
  {
    v4 = result[1];
    if (result[1])
    {
      v5 = 0;
      *a2 = result + 2;
      a2[1] = v4;
      v6 = 398;
    }
    else
    {
      v6 = 396;
      v5 = 35;
    }
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

unsigned __int8 *sub_234116B08@<X0>(unsigned __int8 *result@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v7;
  int v8;
  int v9;

  if (a3 - 1 > 0xFC)
  {
    v9 = 403;
    v8 = 47;
  }
  else
  {
    v7 = result;
    result = sub_23411611C(result, 53, a3 + 2);
    if (result)
    {
      result[1] = a3;
      result = (unsigned __int8 *)memcpy(result + 2, a2, a3);
      v8 = 0;
      v7[254] += a3 + 2;
      v9 = 408;
    }
    else
    {
      v9 = 405;
      v8 = 11;
    }
  }
  *(_DWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

unint64_t sub_234116BAC@<X0>(unint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  int v5;

  v3 = result + *(unsigned __int8 *)(result + 254);
  if (*(_BYTE *)(result + 254))
  {
    do
    {
      if (*(_BYTE *)result == 12)
        break;
      result += *(unsigned __int8 *)(result + 1) + 2;
    }
    while (result < v3);
  }
  if (result == v3)
  {
    v5 = 414;
    v4 = 118;
  }
  else if (*(_BYTE *)(result + 1) == 4)
  {
    v4 = 0;
    *a2 = bswap32(*(_DWORD *)(result + 2));
    v5 = 417;
  }
  else
  {
    v5 = 415;
    v4 = 35;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unsigned __int8 *sub_234116C30@<X0>(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  int v7;
  int v8;

  result = sub_23411611C(a1, 12, 6uLL);
  if (result)
  {
    v7 = 0;
    result[1] = 4;
    *(_DWORD *)(result + 2) = bswap32(a2);
    a1[254] += 6;
    v8 = 426;
  }
  else
  {
    v8 = 423;
    v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/support/ThreadOperationalDataset.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unsigned __int8 *sub_234116CB0(unsigned __int8 *a1)
{
  return sub_234116CB8(a1, 5);
}

unsigned __int8 *sub_234116CB8(unsigned __int8 *result, int a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v3 = &result[result[254]];
  v4 = result;
  if (result[254])
  {
    v4 = result;
    do
    {
      if (*v4 == a2)
        break;
      v4 += v4[1] + 2;
    }
    while (v4 < v3);
  }
  if (v4 != v3)
    return sub_234116DC8(result, v4);
  return result;
}

unsigned __int8 *sub_234116D00(unsigned __int8 *a1)
{
  return sub_234116CB8(a1, 4);
}

BOOL sub_234116D08(_BYTE *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;

  if (!a1[254])
    return 0;
  v1 = &a1[a1[254]];
  v2 = a1;
  do
  {
    if (*v2 == 1)
      break;
    v2 += v2[1] + 2;
  }
  while (v2 < v1);
  if (v2 == v1)
    return 0;
  v3 = a1;
  do
  {
    if (*v3 == 5)
      break;
    v3 += v3[1] + 2;
  }
  while (v3 < v1);
  if (v3 == v1)
    return 0;
  v4 = a1;
  do
  {
    if (*v4 == 2)
      break;
    v4 += v4[1] + 2;
  }
  while (v4 < v1);
  if (v4 == v1)
    return 0;
  do
  {
    if (!*a1)
      break;
    a1 += a1[1] + 2;
  }
  while (a1 < v1);
  return a1 != v1;
}

_BYTE *sub_234116DC8(_BYTE *result, _BYTE *__dst)
{
  unsigned int v2;
  unsigned int v3;
  unsigned __int8 v4;

  v2 = ((_BYTE)__dst - (_BYTE)result);
  v3 = result[254];
  if (v2 < v3 && v2 + (__dst[1] + 2) <= v3)
  {
    v4 = v3 - (__dst[1] + 2);
    result[254] = v4;
    return memmove(__dst, &__dst[__dst[1] + 2], (int)(v4 - v2));
  }
  return result;
}

BOOL sub_234116E20(int a1)
{
  unint64_t v2;
  unint64_t v3;

  if ((a1 & 3) != 0)
    return 0;
  HIDWORD(v2) = -1030792151 * a1;
  LODWORD(v2) = -1030792151 * a1;
  if ((v2 >> 2) > 0x28F5C28)
    return 1;
  HIDWORD(v3) = -1030792151 * a1;
  LODWORD(v3) = -1030792151 * a1;
  return (v3 >> 4) < 0xA3D70B;
}

uint64_t sub_234116E70(unsigned int a1, int a2)
{
  unint64_t v2;

  if (a2 == 2)
  {
    if ((a1 & 3) == 0)
    {
      HIDWORD(v2) = -1030792151 * a1;
      LODWORD(v2) = -1030792151 * a1;
      if ((v2 >> 2) > 0x28F5C28 || a1 == 400 * ((10737419 * (unint64_t)a1) >> 32))
        return 29;
    }
    return byte_2342D94F8[a2 - 1];
  }
  if ((a2 - 1) <= 0xB)
    return byte_2342D94F8[a2 - 1];
  return 0;
}

uint64_t sub_234116EF0(int a1)
{
  int v1;

  if (1 - a1 >= 0)
    v1 = -((1 - a1) & 3);
  else
    v1 = (a1 - 1) & 3;
  return ((5 * v1 + 4 * ((a1 - 1) % 100) + 6 * ((a1 - 1) % 400) + 1) % 7);
}

uint64_t sub_234116F70(uint64_t result, __int16 a2, _BYTE *a3, _BYTE *a4)
{
  unsigned __int8 v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned int v11;
  char v12;

  v4 = 59;
  if ((result & 3) == 0)
  {
    HIDWORD(v6) = -1030792151 * result;
    LODWORD(v6) = -1030792151 * result;
    v5 = v6 >> 2;
    HIDWORD(v6) = -1030792151 * result;
    LODWORD(v6) = -1030792151 * result;
    if ((v6 >> 4) < 0xA3D70B || v5 > 0x28F5C28)
      v4 = 60;
    else
      v4 = 59;
  }
  v8 = v4;
  v9 = a2 - 1 - v4;
  if (v8 > (unsigned __int16)(a2 - 1))
    v9 = a2 + 305;
  v10 = 28071682 * (5 * v9 + 2);
  *a3 = BYTE4(v10);
  *a4 = v9 - (unsigned __int16)(153 * BYTE4(v10) + 2) / 5u + 1;
  v11 = *a3;
  if (v11 >= 0xA)
    v12 = -9;
  else
    v12 = 3;
  *a3 = v12 + v11;
  return result;
}

uint64_t sub_234117030(uint64_t result, unsigned int a2, __int16 a3, _WORD *a4)
{
  char v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  __int16 v9;

  if (a2 <= 2)
    v4 = 9;
  else
    v4 = -3;
  v5 = (v4 + a2);
  HIDWORD(v7) = -1030792151 * result;
  LODWORD(v7) = -1030792151 * result;
  v6 = v7 >> 2;
  HIDWORD(v7) = -1030792151 * result;
  LODWORD(v7) = -1030792151 * result;
  if ((v7 >> 4) < 0xA3D70B || v6 > 0x28F5C28)
    LOBYTE(v9) = 60;
  else
    LOBYTE(v9) = 59;
  if ((result & 3) != 0)
    LOBYTE(v9) = 59;
  v9 = v9;
  if (v5 > 9)
    v9 = -306;
  *a4 = v9 + (unsigned __int16)(153 * v5 + 2) / 5u + a3;
  return result;
}

BOOL sub_2341170C0(__int16 a1, unsigned int a2, __int16 a3, unsigned int *a4)
{
  __int16 v4;
  char v5;
  unsigned int v6;
  _BOOL8 result;

  if ((unsigned __int16)(a1 - 1970) > 0x66C2u)
  {
    v6 = -1;
  }
  else
  {
    if (a2 >= 3)
      v5 = -3;
    else
      v5 = 9;
    v4 = a2 < 3;
    v6 = 365 * ((unsigned __int16)(a1 - v4) % 0x190u)
       + 146097 * ((unsigned __int16)(a1 - v4) / 0x190u)
       - (unsigned __int16)(a1 - v4) % 0x190u / 0x64
       + (((unsigned __int16)(a1 - v4) % 0x190u) >> 2)
       + (unsigned __int16)(a3 + (unsigned __int16)(153 * (v5 + a2) + 2) / 5u - 1)
       - 719468;
  }
  result = (unsigned __int16)(a1 - 1970) < 0x66C3u;
  *a4 = v6;
  return result;
}

BOOL sub_234117180(unsigned int a1, _WORD *a2, _BYTE *a3, _BYTE *a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unsigned int v9;

  if (a1 <= 0x16CFE92)
  {
    v4 = (a1 + 719468) % 0x23AB1;
    v5 = v4 / 0x8EAC + v4 - (v4 / 0x23AB0 + v4 / 0x5B4);
    LOWORD(v4) = v4
               - 365 * (v5 / 0x16D)
               - ((v5 / 0x5B4) & 0x3FFF)
               + ((unsigned __int16)((5243 * ((v5 / 0x5B4) & 0x3FFF)) >> 16) >> 1);
    v6 = 28071682 * (5 * (unsigned __int16)v4 + 2);
    *a3 = BYTE4(v6);
    *a4 = v4 - (unsigned __int16)(153 * BYTE4(v6) + 2) / 5u + 1;
    v7 = *a3;
    if (v7 >= 0xA)
      v8 = -9;
    else
      v8 = 3;
    *a3 = v8 + v7;
    v9 = 400 * ((a1 + 719468) / 0x23AB1) + v5 / 0x16D;
    *a2 = v9;
    if (*a3 <= 2u)
      *a2 = v9 + 1;
  }
  return a1 < 0x16CFE93;
}

BOOL sub_2341172D0(__int16 *a1, _BYTE *a2, _BYTE *a3, int a4)
{
  unint64_t v8;
  unsigned int v10;

  v10 = 0;
  if (!sub_2341170C0(*a1, *a2, *a3, &v10))
    return 0;
  v8 = v10 + (uint64_t)a4;
  return !HIDWORD(v8) && sub_234117180(v8, a1, a2, a3);
}

BOOL sub_234117358(int a1, unsigned int a2, __int16 a3, int a4, int a5, int a6, unsigned int *a7)
{
  unsigned __int16 v8;
  unsigned int v12;
  _BOOL8 result;
  unsigned int v14;

  v8 = a1 - 1970;
  if ((a1 - 1970) > 0x87)
  {
    v12 = -1;
  }
  else
  {
    v14 = 0;
    sub_2341170C0(a1, a2, a3, &v14);
    v12 = 3600 * a4 + 60 * a5 + a6 + 86400 * v14;
  }
  result = v8 < 0x88u;
  *a7 = v12;
  return result;
}

BOOL sub_2341173EC(unsigned int a1, _WORD *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, _BYTE *a7)
{
  unsigned int v10;
  _BOOL8 result;
  unsigned int v12;

  v10 = a1 % 0x15180;
  result = sub_234117180(a1 / 0x15180, a2, a3, a4);
  *a5 = v10 / 0xE10;
  v12 = v10 - 3600 * (v10 / 0xE10);
  *a6 = v12 / 0x3C;
  *a7 = v12 % 0x3C;
  return result;
}

BOOL sub_23411747C(int a1, unsigned int a2, __int16 a3, int a4, int a5, int a6, _DWORD *a7)
{
  unsigned __int16 v7;
  unsigned int v13;

  v7 = a1 - 2000;
  if ((a1 - 2000) <= 0x87)
  {
    v13 = 0;
    sub_2341170C0(a1, a2, a3, &v13);
    *a7 = 60 * a5 + 3600 * a4 + a6 + 86400 * v13 - 946684800;
  }
  return v7 < 0x88u;
}

BOOL sub_234117514(unsigned int a1, _WORD *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, _BYTE *a7)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 result;
  unsigned int v14;

  v10 = a1 + 946684800;
  v11 = ((unint64_t)v10 * (unsigned __int128)0xC22E4506728AuLL) >> 64;
  v12 = v10 - 86400 * v11;
  result = sub_234117180(v11, a2, a3, a4);
  *a5 = v12 / 0xE10;
  v14 = v12 - 3600 * (v12 / 0xE10);
  *a6 = v14 / 0x3C;
  *a7 = v14 % 0x3C;
  return result;
}

BOOL sub_2341175AC(unint64_t a1, _QWORD *a2)
{
  if (a1 <= 0xFFFCA2FEC4C81FFFLL)
    *a2 = a1 + 946684800000000;
  return a1 < 0xFFFCA2FEC4C82000;
}

BOOL sub_2341175F0(unint64_t a1, _QWORD *a2)
{
  if (a1 >= 0x35D013B37E000)
    *a2 = a1 - 946684800000000;
  return a1 > 0x35D013B37DFFFLL;
}

BOOL sub_234117638(unsigned int a1, _DWORD *a2)
{
  if (a1 >= 0x386D4380)
    *a2 = a1 - 946684800;
  return a1 > 0x386D437F;
}

uint64_t sub_23411766C(uint64_t result, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  char v12[50];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a3[1])
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = 1;
    do
    {
      if (v7)
      {
        if ((((_BYTE)v8 - 1) & 7) == 0)
        {
          sub_2341147D0(v5, a2);
          v7 = 0;
        }
      }
      result = snprintf(&v12[v7], 50 - v7, "0x%02x, ", *(unsigned __int8 *)(*a3 + v6));
      if ((int)result <= 0)
      {
        v10 = v5;
        v11 = 1;
        return sub_2341147D0(v10, v11);
      }
      v7 += result;
      v6 = v8;
    }
    while (a3[1] > (unint64_t)v8++);
    if (!v7)
      return result;
    v10 = v5;
    v11 = a2;
    return sub_2341147D0(v10, v11);
  }
  return result;
}

uint64_t sub_2341177A8(uint64_t a1, unint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  int v4;
  int v5;

  if (a2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    while (2)
    {
      v5 = *(char *)(a1 + v3);
      switch(v4)
      {
        case 0:
          if ((v5 & 0x80000000) == 0)
            goto LABEL_17;
          if ((v5 + 62) < 0x1E)
            goto LABEL_19;
          if (v5 == -32)
          {
            v4 = 1;
            goto LABEL_22;
          }
          if ((v5 + 31) < 0xC)
            goto LABEL_21;
          if (v5 == -19)
          {
            v4 = 2;
            goto LABEL_22;
          }
          if ((v5 & 0xFFFFFFFE) == 0xFFFFFFEE)
            goto LABEL_21;
          if (v5 == -16)
          {
            v4 = 3;
            goto LABEL_22;
          }
          if ((v5 + 15) < 3)
          {
            v4 = 7;
            goto LABEL_22;
          }
          if (v5 != -12)
            goto LABEL_35;
          v4 = 4;
          goto LABEL_22;
        case 1:
          if ((v5 & 0xFFFFFFE0) != 0xFFFFFFA0)
            goto LABEL_35;
          goto LABEL_19;
        case 2:
          if (v5 >= -96)
            goto LABEL_35;
          goto LABEL_19;
        case 3:
          if ((v5 + 112) >= 0x30)
            goto LABEL_35;
          goto LABEL_21;
        case 4:
          if (v5 >= -112)
            goto LABEL_35;
          goto LABEL_21;
        case 5:
          if (v5 >= -64)
            goto LABEL_35;
LABEL_17:
          v4 = 0;
          goto LABEL_22;
        case 6:
          if (v5 >= -64)
            goto LABEL_35;
LABEL_19:
          v4 = 5;
          goto LABEL_22;
        case 7:
          if (v5 > -65)
            goto LABEL_35;
LABEL_21:
          v4 = 6;
LABEL_22:
          v2 = ++v3 >= a2;
          if (a2 == v3)
            return v2 & (v4 == 0);
          continue;
        default:
LABEL_35:
          v4 = 8;
          return v2 & (v4 == 0);
      }
    }
  }
  v4 = 0;
  v2 = 1;
  return v2 & (v4 == 0);
}

uint64_t sub_2341178F8(int a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = a1 % (2 * a3);
  v4 = a2 % (2 * a3);
  if (v3 >= a3)
  {
    if (v4 >= a3)
    {
      v5 = v3 + a3 - v4;
      return (v5 % a3);
    }
    v6 = v3 - v4;
    return (v6 % a3 + a3);
  }
  if (v4 >= a3)
  {
    v6 = v3 - a3 + v4;
    return (v6 % a3 + a3);
  }
  v5 = v4 + v3;
  return (v5 % a3);
}

uint64_t sub_23411795C(uint64_t result, int a2)
{
  if (a2 <= (int)result || (int)result <= 0)
    return result;
  else
    return (a2 - result);
}

uint64_t sub_23411796C(int a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  for (result = (a1 % a3); a4; --a4)
    result = (*(unsigned __int8 *)(a2 + (int)result) % a3);
  return result;
}

uint64_t sub_234117990(const char *a1)
{
  size_t v2;

  v2 = strlen(a1);
  return sub_2341179B8((uint64_t)a1, v2);
}

uint64_t sub_2341179B8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  char v10;

  if (a2)
  {
    LODWORD(v3) = 0;
    v4 = (unsigned __int8 *)(a2 + a1 - 1);
    v5 = 1;
    while (1)
    {
      v6 = *v4--;
      v7 = v6 - 48;
      v8 = (v6 - 48) >= 0xA ? -1 : v7;
      if (v8 < 0)
        break;
      v3 = byte_2342D950C[(int)(sub_23411796C(v8, (uint64_t)&unk_2342D9570, 10, v5++) + 10 * v3)];
      if (v5 > a2)
        goto LABEL_10;
    }
    return 0;
  }
  else
  {
    v3 = 0;
LABEL_10:
    v9 = sub_23411795C(v3, 5);
    v10 = v9 + 48;
    if (v9 >= 0xB)
      return 0;
  }
  return v10;
}

uint64_t sub_234117A78(unsigned __int8 a1)
{
  unsigned int v1;

  v1 = a1 - 48;
  if (v1 >= 0xA)
    return 0xFFFFFFFFLL;
  else
    return v1;
}

uint64_t sub_234117A8C(unsigned int a1)
{
  char v1;

  v1 = a1 + 48;
  if (a1 >= 0xB)
    return 0;
  return v1;
}

BOOL sub_234117AA0(int a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_2341179B8((uint64_t)__s, v4) == a1;
}

BOOL sub_234117ADC(int a1, uint64_t a2, unint64_t a3)
{
  return sub_2341179B8(a2, a3) == a1;
}

size_t sub_234117B0C(const char *a1)
{
  size_t result;
  int v3;

  result = strlen(a1);
  if (result)
  {
    v3 = a1[result - 1];
    return v3 == sub_2341179B8((uint64_t)a1, result - 1);
  }
  return result;
}

BOOL sub_234117B48(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;

  if (!a2)
    return 0;
  v2 = a2 - 1;
  v3 = *(unsigned __int8 *)(a1 + v2);
  return v3 == sub_2341179B8(a1, v2);
}

id sub_234117B80(unsigned int a1, const char *a2)
{
  const char *v2;
  uint64_t v3;
  unsigned __int8 v4;
  dispatch_once_t *v5;
  int v7;
  uint64_t v8;
  const char *v9;
  _QWORD block[6];

  if (a1 - 42 >= 0xFFFFFFD7)
    v2 = a2;
  else
    v2 = "Default";
  if (a1 - 42 >= 0xFFFFFFD7)
    v3 = a1;
  else
    v3 = 0;
  v4 = atomic_load((unsigned __int8 *)&qword_256159660);
  if ((v4 & 1) == 0)
  {
    v9 = v2;
    v7 = __cxa_guard_acquire(&qword_256159660);
    v2 = v9;
    if (v7)
    {
      v8 = 8u;
      do
      {
        *(_QWORD *)((char *)&unk_2561593C0 + v8) = 0;
        v8 += 16;
      }
      while (v8 != 680);
      __cxa_atexit((void (*)(void *))sub_234117E08, 0, &dword_233BF3000);
      __cxa_guard_release(&qword_256159660);
      v2 = v9;
    }
  }
  v5 = (dispatch_once_t *)((char *)&unk_2561593C0 + 16 * v3);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_234117C7C;
  block[3] = &unk_250503F68;
  block[4] = v5;
  block[5] = v2;
  if (*v5 != -1)
    dispatch_once(v5, block);
  return *((id *)&unk_2561593C0 + 2 * v3 + 1);
}

void sub_234117C7C(uint64_t a1)
{
  os_log_t v2;
  uint64_t v3;
  void *v4;

  v2 = os_log_create("com.csa.matter", *(const char **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_234117CB4(unsigned int a1, const char *a2, os_log_type_t a3, uint64_t *a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  const char *v10;
  const char *v11;
  void *v12;
  uint64_t i;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_234117B80(a1, a2);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, a3))
  {
    v8 = *a4;
    v7 = a4[1];
    v9 = objc_alloc(MEMORY[0x24BDD16A8]);
    v12 = (void *)objc_msgSend_initWithCapacity_(v9, v10, 6 * v7);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
      {
        if ((~(_BYTE)i & 7) != 0)
          objc_msgSend_appendFormat_(v12, v11, (uint64_t)CFSTR("0x%02x, "), *(unsigned __int8 *)(v8 + i));
        else
          objc_msgSend_appendFormat_(v12, v11, (uint64_t)CFSTR("0x%02x,\n"), *(unsigned __int8 *)(v8 + i));
      }
    }
    if (os_log_type_enabled(v6, a3))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v12;
      _os_log_impl(&dword_233BF3000, v6, a3, "%@", buf, 0xCu);
    }

  }
}

void sub_234117DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_234117E08()
{
  uint64_t i;

  for (i = 0x298u; i != -8; i -= 16)

}

unint64_t sub_234117E40(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t result;

  v1 = a1 + 1;
  v2 = atomic_load(a1 + 1);
  result = (*(uint64_t (**)(unint64_t *))(*a1 + 32))(a1);
  if (result < v2)
    sub_2342597A0();
  atomic_store(result, v1);
  return result;
}

uint64_t sub_234117E7C(uint64_t a1)
{
  return *(int *)(a1 + 8) + 1000000 * *(_QWORD *)a1;
}

unint64_t sub_234117E94(unint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = (result / 0xF4240);
  *(_DWORD *)(a2 + 8) = result % 0xF4240;
  return result;
}

uint64_t sub_234117EC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  const char *v3;
  int v4;

  v2 = result & 0xFFFFFF | 0x2000000;
  if (!(_DWORD)result)
    v2 = 0;
  v3 = "src/system/SystemError.cpp";
  if ((_DWORD)result)
    v3 = 0;
  *(_DWORD *)a2 = v2;
  if ((_DWORD)result)
    v4 = 0;
  else
    v4 = 59;
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_234117EFC@<X0>(uint64_t result@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  const char *v5;
  int v6;

  v4 = result & 0xFFFFFF | 0x2000000;
  if (!(_DWORD)result)
    v4 = 0;
  v5 = "src/system/SystemError.cpp";
  if ((_DWORD)result)
    v5 = a2;
  *(_DWORD *)a4 = v4;
  if ((_DWORD)result)
    v6 = a3;
  else
    v6 = 64;
  *(_QWORD *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

char *sub_234117F30(_DWORD *a1)
{
  return strerror(*a1 & 0xFFFFFF);
}

_QWORD *sub_234117F3C()
{
  return sub_234108530(off_256157A18);
}

BOOL sub_234117F48(char *a1, size_t a2, __int128 *a3)
{
  unsigned int v3;
  char *v7;
  __int128 v9;
  uint64_t v10;

  v3 = *(_DWORD *)a3 & 0xFF000000;
  if (v3 == 0x2000000)
  {
    v7 = strerror(*(_DWORD *)a3 & 0xFFFFFF);
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 2);
    sub_2341084C8(a1, a2, "OS", &v9, v7);
  }
  return v3 == 0x2000000;
}

uint64_t sub_234117FD4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  const char *v3;
  int v4;

  if ((_DWORD)result)
    v2 = -(int)result & 0xFFFFFF | 0x2000000;
  else
    v2 = 0;
  v3 = "src/system/SystemError.cpp";
  if ((_DWORD)result)
    v3 = 0;
  *(_DWORD *)a2 = v2;
  if ((_DWORD)result)
    v4 = 0;
  else
    v4 = 59;
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

void sub_23411800C(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  size_t v4;
  char *v6;
  char *v7;
  char *v8;
  NSObject *v9;
  __int16 v10[8];

  v1 = *a1;
  if (*a1)
  {
    if (!*(_QWORD *)v1 && *(_WORD *)(v1 + 32) == 1)
    {
      v2 = (const void *)(v1 + 48);
      v3 = *(_QWORD *)(v1 + 8) - (v1 + 48);
      v4 = v3 + *(_QWORD *)(v1 + 24);
      if (v4 + 16 <= *(_QWORD *)(v1 + 40))
      {
        v6 = (char *)sub_234114774(v4 + 48);
        if (v6)
        {
          v7 = v6;
          v8 = v6 + 48;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = &v8[v3];
          *((_QWORD *)v7 + 2) = *(_QWORD *)(*a1 + 16);
          *((_QWORD *)v7 + 3) = *(_QWORD *)(*a1 + 24);
          *((_WORD *)v7 + 16) = 1;
          *((_QWORD *)v7 + 5) = v4;
          memcpy(v8, v2, v4);
          sub_23411814C(*a1);
          *a1 = (uint64_t)v7;
        }
        else
        {
          v9 = sub_234117B80(0x19u, "chipSystemLayer");
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            v10[0] = 0;
            _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "PacketBuffer: pool EMPTY.", (uint8_t *)v10, 2u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(0x19u, 1);
        }
      }
    }
  }
}

uint64_t sub_234118144(uint64_t a1)
{
  return a1 + 48;
}

void sub_23411814C(uint64_t a1)
{
  _WORD *v1;
  _WORD *v2;
  __int16 v3;
  int *v4;

  if (a1)
  {
    v1 = (_WORD *)a1;
    do
    {
      if (!v1[16])
        sub_234259864(a1);
      v2 = *(_WORD **)v1;
      v3 = v1[16] - 1;
      v1[16] = v3;
      if (v3)
        break;
      v4 = sub_234118AFC();
      --*(_BYTE *)v4;
      *((_QWORD *)v1 + 5) = 0;
      *((_QWORD *)v1 + 2) = 0;
      *((_QWORD *)v1 + 3) = 0;
      j__free(v1);
      v1 = v2;
    }
    while (v2);
  }
}

_QWORD *sub_2341181B4(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = result + 6;
  v3 = result[1];
  v4 = (_QWORD *)(v3 + result[5] - (unsigned __int16)(v3 - ((_WORD)result + 48)));
  if ((unint64_t)v4 >= a2)
    v4 = (_QWORD *)a2;
  if ((unint64_t)v2 <= a2)
    v2 = v4;
  v5 = (uint64_t)v2 - v3;
  v6 = result[3];
  if (v6 >= v5)
    v7 = v5;
  else
    v7 = result[3];
  if (v5 > 0)
    v5 = v7;
  result[2] -= v5;
  result[3] = v6 - v5;
  result[1] = v2;
  return result;
}

uint64_t sub_234118208(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) - (unsigned __int16)(*(_WORD *)(a1 + 8) - a1 - 48);
}

uint64_t sub_234118220(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;

  if (*(_QWORD *)(result + 40) - (unint64_t)(unsigned __int16)(*(_WORD *)(result + 8) - result - 48) >= a2)
    v3 = a2;
  else
    v3 = *(_QWORD *)(result + 40) - (unsigned __int16)(*(_WORD *)(result + 8) - result - 48);
  v4 = v3 - *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 16) += v4;
  *(_QWORD *)(result + 24) = v3;
  if (a3 && a3 != (_QWORD *)result)
  {
    do
    {
      a3[2] += v4;
      a3 = (_QWORD *)*a3;
      if (a3)
        v5 = a3 == (_QWORD *)result;
      else
        v5 = 1;
    }
    while (!v5);
  }
  return result;
}

uint64_t sub_234118278(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 8) - a1 - 48);
}

uint64_t sub_23411828C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) - (*(_QWORD *)(a1 + 24) + (unsigned __int16)(*(_DWORD *)(a1 + 8) - a1 - 48));
}

_QWORD *sub_2341182AC(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *a2;
  *a2 = 0;
  do
  {
    v3 = result[2];
    v4 = *(_QWORD *)(v2 + 16);
    result[2] = v4 + v3;
    if (__CFADD__(v4, v3))
      sub_2342598B8((uint64_t)result);
    v5 = result;
    result = (_QWORD *)*result;
  }
  while (result);
  *v5 = v2;
  return result;
}

void sub_2341182EC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  size_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;

  v2 = a1 + 6;
  v3 = (uint64_t *)a1[1];
  v4 = a1[3];
  if (v3 != a1 + 6)
  {
    memmove(a1 + 6, v3, v4);
    a1[1] = (uint64_t)v2;
  }
  v5 = a1[5];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    do
    {
      v7 = *a1;
      if (!*a1)
        break;
      if (*(_WORD *)(v7 + 32) != 1)
        sub_23425990C(*a1);
      v8 = *(_QWORD *)(v7 + 24) >= v6 ? v6 : *(_QWORD *)(v7 + 24);
      memcpy((void *)(a1[1] + a1[3]), *(const void **)(v7 + 8), v8);
      *(_QWORD *)(v7 + 8) += v8;
      a1[3] += v8;
      v9 = *(_QWORD *)(v7 + 24) - v8;
      *(_QWORD *)(v7 + 16) -= v8;
      *(_QWORD *)(v7 + 24) = v9;
      if (!v9)
      {
        v10 = *(_QWORD *)v7;
        *(_QWORD *)v7 = 0;
        sub_23411814C(v7);
        *a1 = v10;
      }
      v6 -= v8;
    }
    while (v6);
  }
}

uint64_t sub_2341183D0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  sub_23411814C((uint64_t)a1);
  return v1;
}

_QWORD *sub_2341183F8(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = result[2];
  v2 = result[3];
  if (v2 >= a2)
    v4 = a2;
  else
    v4 = result[3];
  v5 = result[1] + v4;
  result[3] = v2 - v4;
  result[1] = v5;
  result[2] = v3 - v4;
  return result;
}

_QWORD *sub_234118420(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;

  if (a1 && a2)
  {
    while (1)
    {
      v2 = a1[3];
      v3 = a2 - v2;
      if (a2 < v2)
        break;
      v4 = (_QWORD *)*a1;
      *a1 = 0;
      sub_23411814C((uint64_t)a1);
      if (v4)
        v5 = v3 == 0;
      else
        v5 = 1;
      a1 = v4;
      a2 = v3;
      if (v5)
        return v4;
    }
    v6 = a1[2];
    v7 = a1[1] + a2;
    a1[3] = v2 - a2;
    a1[1] = v7;
    a1[2] = v6 - a2;
  }
  return a1;
}

_QWORD *sub_234118490@<X0>(char *__dst@<X1>, _QWORD *result@<X0>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  size_t v7;
  uint64_t v9;
  size_t v10;

  if (result[2] >= a3)
  {
    v7 = a3;
    if (a3)
    {
      v9 = (uint64_t)result;
      while (v9)
      {
        if (v7 >= *(_QWORD *)(v9 + 24))
          v10 = *(_QWORD *)(v9 + 24);
        else
          v10 = v7;
        result = memcpy(__dst, *(const void **)(v9 + 8), v10);
        __dst += v10;
        v9 = *(_QWORD *)v9;
        v7 -= v10;
        if (!v7)
          goto LABEL_10;
      }
      v5 = 435;
      v6 = 172;
    }
    else
    {
LABEL_10:
      v6 = 0;
      v5 = 447;
    }
  }
  else
  {
    v5 = 428;
    v6 = 25;
  }
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = "src/system/SystemPacketBuffer.cpp";
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

uint64_t sub_23411853C(_QWORD *a1, unsigned int a2)
{
  char *v4;
  unsigned __int16 v5;
  size_t v6;
  unsigned __int16 v8;

  v4 = (char *)a1[1];
  v5 = (_WORD)v4 - (_WORD)a1 - 48;
  if (a2 > v5)
  {
    v6 = a1[3];
    if (v6 + a2 > a1[5])
      return 0;
    v8 = a2 - v5;
    memmove(&v4[(unsigned __int16)(a2 - v5)], v4, v6);
    a1[1] += v8;
  }
  return 1;
}

uint64_t sub_2341185A8(_QWORD *a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  size_t v8;

  if (!a2)
    return 0;
  v4 = a1[1];
  v5 = v4 % a2;
  if (v5)
  {
    v6 = a2 - v5;
    v7 = v4 - (_WORD)a1 - 48;
    if ((v7 + v6) >> 16)
      return 0;
    if ((unsigned __int16)(v6 + v7) > v7)
    {
      v8 = a1[3];
      if (v8 + (unsigned __int16)(v6 + v7) > a1[5])
        return 0;
      memmove((void *)(v4 + v6), (const void *)v4, v8);
      a1[1] += v6;
    }
  }
  return 1;
}

uint64_t sub_234118648(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int16 *)(result + 32);
  if (v1 == 0xFFFF)
    sub_23425998C(result);
  *(_WORD *)(result + 32) = v1 + 1;
  return result;
}

uint64_t sub_234118674@<X0>(unint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  int v3;
  unint64_t v5;
  NSObject *v6;
  uint64_t result;
  unint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  int *v12;
  char v13;
  NSObject *v14;
  uint8_t buf[4];
  _BYTE v16[10];
  uint64_t v17;
  uint64_t v18;

  v3 = a1;
  v18 = *MEMORY[0x24BDAC8D0];
  v5 = HIDWORD(a1);
  if (HIDWORD(a1))
  {
    v6 = sub_234117B80(0x19u, "chipSystemLayer");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v16 = v5;
      *(_WORD *)&v16[4] = 1024;
      *(_DWORD *)&v16[6] = v3;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "PacketBuffer: AvailableSize of a buffer cannot exceed UINT32_MAX. aAvailableSize = 0x%08X%08X", buf, 0xEu);
    }
    result = sub_234114844(1u);
    if (!(_DWORD)result)
      goto LABEL_19;
    goto LABEL_18;
  }
  v9 = a1 + a2;
  if (v9 >= 0xFA01)
  {
    v10 = sub_234117B80(0x19u, "chipSystemLayer");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v16 = v9;
      *(_WORD *)&v16[8] = 2048;
      v17 = 64000;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "PacketBuffer: allocation exceeding buffer capacity limits: %lu > %lu", buf, 0x16u);
    }
    result = sub_234114844(1u);
    if (!(_DWORD)result)
      goto LABEL_19;
    goto LABEL_18;
  }
  v11 = sub_234114774(v9 + 48);
  v12 = sub_234118AFC();
  v13 = *(_BYTE *)v12 + 1;
  *(_BYTE *)v12 = v13;
  result = (uint64_t)sub_234118B08();
  if (*(char *)result < v13)
  {
    result = (uint64_t)sub_234118B08();
    *(_BYTE *)result = v13;
  }
  if (!v11)
  {
    v14 = sub_234117B80(0x19u, "chipSystemLayer");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "PacketBuffer: pool EMPTY.", buf, 2u);
    }
    result = sub_234114844(1u);
    if (!(_DWORD)result)
      goto LABEL_19;
LABEL_18:
    result = sub_2341147D0(0x19u, 1);
LABEL_19:
    v11 = 0;
    goto LABEL_20;
  }
  *v11 = 0;
  v11[1] = (char *)v11 + a2 + 48;
  v11[2] = 0;
  v11[3] = 0;
  *((_WORD *)v11 + 16) = 1;
  v11[5] = v9;
LABEL_20:
  *a3 = v11;
  return result;
}

uint64_t sub_2341188C4@<X0>(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = sub_234118674(a3 + a2, a4, a5);
  v9 = *a5;
  if (v9)
  {
    result = (uint64_t)memcpy(*(void **)(v9 + 8), a1, a2);
    *(_QWORD *)(v9 + 16) = a2;
    *(_QWORD *)(v9 + 24) = a2;
  }
  return result;
}

_QWORD *sub_234118918(_QWORD *result)
{
  result[5] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD **sub_234118924@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *result;
  *result = (_QWORD *)**result;
  *v2 = 0;
  v2[2] = v2[3];
  *a2 = v2;
  return result;
}

void sub_234118944(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[5];
      v6 = (unsigned __int16)(*((_WORD *)v3 + 4) - ((_WORD)v3 + 48));
      if (v5 >= 0xFA01)
      {
        if ((unint64_t)(v3[3] + v6) >= 0xFA01)
          break;
        v5 = 64000;
      }
      sub_234118674(v5 - v6, (unsigned __int16)(*((_WORD *)v3 + 4) - ((_WORD)v3 + 48)), &v9);
      v7 = v9;
      if (!v9)
        break;
      v8 = v3[3];
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v7 + 24) = v8;
      memcpy((void *)(v7 + 48), v3 + 6, v5);
      if (v4)
      {
        sub_2341182AC(v4, &v9);
        if (v9)
          sub_23411814C(v9);
      }
      else
      {
        v4 = (_QWORD *)v7;
      }
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_14;
    }
    *a2 = 0;
    if (v4)
      sub_23411814C((uint64_t)v4);
  }
  else
  {
    v4 = 0;
LABEL_14:
    *a2 = v4;
  }
}

void sub_234118A50(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;

  v6 = *a2;
  if (!*a2)
    goto LABEL_4;
  v7 = a1[2];
  if (a1[1] < v7)
  {
    sub_23411814C(v6);
LABEL_4:
    *a2 = 0;
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 40) - (unint64_t)(unsigned __int16)(*(_WORD *)(v6 + 8) - v6 - 48) < v7)
    v7 = *(_QWORD *)(v6 + 40) - (unsigned __int16)(*(_WORD *)(v6 + 8) - v6 - 48);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 24) + v7;
  *(_QWORD *)(v6 + 24) = v7;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a3 = *a2;
  *a2 = 0;
}

uint64_t sub_234118ADC()
{
  return sub_2341147D0(0x19u, 1);
}

id sub_234118AE8(uint64_t a1, const char *a2)
{
  return sub_234117B80(0x19u, a2);
}

char **sub_234118AF0()
{
  return off_250503FE8;
}

int *sub_234118AFC()
{
  return &dword_25615DDAA;
}

int *sub_234118B08()
{
  return &dword_25615DDB1;
}

_DWORD *sub_234118B14(_DWORD *result)
{
  *result = dword_25615DDAA;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)&dword_25615DDAA + 3);
  *(_DWORD *)((char *)result + 7) = dword_25615DDB1;
  *(_DWORD *)((char *)result + 10) = *(int *)((char *)&dword_25615DDB1 + 3);
  return result;
}

uint64_t sub_234118B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  char v5;
  _BYTE *v6;

  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *(_BYTE *)(a2 + v3) - *(_BYTE *)(a3 + v3);
    v6 = (_BYTE *)(a1 + v3);
    *v6 = v5;
    v6[7] = *(_BYTE *)(a2 + v3 + 7) - *(_BYTE *)(a3 + v3 + 7);
    v4 |= v5 > 0;
    ++v3;
  }
  while (v3 != 7);
  return v4 & 1;
}

_QWORD *sub_234118BA0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 == a2)
    sub_2342599E0();
  if (v2 && *a2 >= *v2)
  {
    do
    {
      v3 = v2;
      v2 = (_QWORD *)v2[5];
      if (!v2)
        break;
      if (v2 == a2)
        sub_234259A84();
    }
    while (*a2 >= *v2);
    a2[5] = v2;
    v3[5] = a2;
    return *(_QWORD **)a1;
  }
  else
  {
    a2[5] = v2;
    *(_QWORD *)a1 = a2;
  }
  return a2;
}

uint64_t sub_234118C14(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  if (a2 && v2)
  {
    v3 = a1;
    if (v2 == a2)
    {
LABEL_7:
      *v3 = *(_QWORD *)(a2 + 40);
    }
    else
    {
      while (1)
      {
        v4 = v2;
        v2 = *(_QWORD *)(v2 + 40);
        if (!v2)
          break;
        if (v2 == a2)
        {
          v3 = (_QWORD *)(v4 + 40);
          goto LABEL_7;
        }
      }
    }
    *(_QWORD *)(a2 + 40) = 0;
    return *a1;
  }
  return v2;
}

_QWORD *sub_234118C5C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v3 = (_QWORD *)*a1;
  if (!*a1)
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = v3;
    if (v3[2] == a2 && v3[3] == a3)
      break;
    v3 = (_QWORD *)v3[5];
    v4 = v5;
    if (!v3)
      return 0;
  }
  if (v4)
    v7 = v4 + 5;
  else
    v7 = a1;
  *v7 = v3[5];
  v3[5] = 0;
  return v5;
}

uint64_t sub_234118CB8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    *a1 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

unint64_t *sub_234118CD4(unint64_t **a1, unint64_t a2)
{
  unint64_t *result;

  result = *a1;
  if (result)
  {
    if (*result >= a2)
    {
      return 0;
    }
    else
    {
      *a1 = (unint64_t *)result[5];
      result[5] = 0;
    }
  }
  return result;
}

unint64_t *sub_234118D04(unint64_t **a1, unint64_t a2)
{
  unint64_t *result;
  unint64_t *v4;
  unint64_t *v5;

  result = *a1;
  if (result)
  {
    if (*result >= a2)
    {
      return 0;
    }
    else
    {
      v4 = result;
      do
      {
        v5 = v4;
        v4 = (unint64_t *)v4[5];
      }
      while (v4 && *v4 < a2);
      *a1 = v4;
      v5[5] = 0;
    }
  }
  return result;
}

uint64_t sub_234118D4C(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;

  v3 = *a1;
  if (!*a1)
    return 0;
  while (v3[2] != a2 || v3[3] != a3)
  {
    v3 = (unint64_t *)v3[5];
    if (!v3)
      return 0;
  }
  v5 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  if (*v3 > v5)
    return *v3 - v5;
  else
    return 0;
}

uint64_t sub_234118DBC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  int v6;

  *a2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  v5 = HIDWORD(v4);
  if (HIDWORD(v4))
  {
    v6 = 34;
    LODWORD(v5) = 47;
  }
  else
  {
    *a3 = v4;
    v6 = 36;
  }
  *(_DWORD *)a4 = v5;
  *(_QWORD *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

void sub_234118E04(uint64_t a1@<X0>, _QWORD *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  unint64_t v8;
  int v9;
  int v10;

  v7 = (uint64_t *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 24))
  {
    if (*v7)
      sub_23411814C(*v7);
    *v7 = 0;
    goto LABEL_8;
  }
  sub_233CF1DD4((uint64_t **)(a1 + 16));
  if (!*v7)
  {
LABEL_8:
    LODWORD(v8) = 0;
    *a2 = 0;
    goto LABEL_9;
  }
  *a2 = *(_QWORD *)(*v7 + 8);
  v8 = *(_QWORD *)(*v7 + 24);
  if (!HIDWORD(v8))
  {
LABEL_9:
    v10 = 0;
    *a3 = v8;
    v9 = 62;
    goto LABEL_10;
  }
  v9 = 58;
  v10 = 47;
LABEL_10:
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v9;
}

unint64_t sub_234118EA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t result;
  int v8;
  int v9;

  *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  result = sub_23411828C(*(_QWORD *)(a1 + 8));
  if (HIDWORD(result))
  {
    v9 = 68;
    v8 = 47;
  }
  else
  {
    result = sub_23411828C(*(_QWORD *)(a1 + 8));
    v8 = 0;
    *a3 = result;
    v9 = 70;
  }
  *(_DWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

uint64_t sub_234118F2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  unint64_t v5;
  int v6;
  int v7;

  v5 = a2 + a3 - *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  if (HIDWORD(v5))
  {
    v7 = 80;
    v6 = 47;
  }
  else
  {
    result = sub_234118220(*(_QWORD *)(result + 16), v5, *(_QWORD **)(result + 8));
    v6 = 0;
    v7 = 84;
  }
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

unint64_t sub_234118F94@<X0>(unint64_t result@<X0>, _QWORD *a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;

  if (!*(_BYTE *)(result + 24))
  {
    v11 = 91;
LABEL_7:
    v10 = 11;
    goto LABEL_9;
  }
  v7 = result;
  v8 = (uint64_t *)(result + 16);
  sub_233CF1DD4((uint64_t **)(result + 16));
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
LABEL_3:
    *a2 = *(_QWORD *)(v9 + 8);
    result = sub_234118208(*v8);
    if (HIDWORD(result))
    {
      v11 = 113;
      v10 = 47;
      goto LABEL_9;
    }
    result = sub_234118208(*v8);
    goto LABEL_5;
  }
  sub_234118674(0x62FuLL, 0, &v13);
  if (*v8)
    sub_23411814C(*v8);
  result = v13;
  *v8 = v13;
  if (!result)
  {
    v11 = 100;
    goto LABEL_7;
  }
  v12 = *(_QWORD **)(v7 + 8);
  sub_234118648(result);
  v13 = *(_QWORD *)(v7 + 16);
  sub_2341182AC(v12, (uint64_t *)&v13);
  if (v13)
    sub_23411814C(v13);
  v9 = *v8;
  if (*v8)
    goto LABEL_3;
  result = 0;
  *a2 = 0;
LABEL_5:
  v10 = 0;
  *a3 = result;
  v11 = 117;
LABEL_9:
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = "src/system/TLVPacketBufferBackingStore.cpp";
  *(_DWORD *)(a4 + 16) = v11;
  return result;
}

void sub_2341190B8(_QWORD *a1)
{
  sub_2340F6E6C(a1);
  JUMPOUT(0x23493E704);
}

BOOL sub_2341190DC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 24) == 0;
}

uint64_t sub_2341190EC@<X0>(int32x2_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (pipe(v15) < 0)
  {
    v12 = *__error();
    v13 = (uint64_t)a3;
    v14 = 71;
    return sub_234117EFC(v12, "src/system/WakeEvent.cpp", v14, v13);
  }
  v6 = v15[0];
  v7 = fcntl(v15[0], 3, 0);
  if (fcntl(v6, 4, v7 | 4u) < 0)
  {
    v12 = *__error();
    v13 = (uint64_t)a3;
    v14 = 74;
    return sub_234117EFC(v12, "src/system/WakeEvent.cpp", v14, v13);
  }
  v8 = v15[1];
  v9 = fcntl(v15[1], 3, 0);
  if (fcntl(v8, 4, v9 | 4u) < 0)
  {
    v12 = *__error();
    v13 = (uint64_t)a3;
    v14 = 77;
    return sub_234117EFC(v12, "src/system/WakeEvent.cpp", v14, v13);
  }
  v10 = v15[0];
  *a1 = vrev64_s32(*(int32x2_t *)v15);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD, int32x2_t *))(*(_QWORD *)a2 + 88))(a2, v10, a1 + 1);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(uint64_t, uint64_t), int32x2_t *))(*(_QWORD *)a2 + 96))(a2, *(_QWORD *)&a1[1], sub_2341192B8, a1);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, *(_QWORD *)&a1[1]);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/system/WakeEvent.cpp";
        *((_DWORD *)a3 + 4) = 86;
      }
    }
  }
  return result;
}

uint64_t sub_2341192B8(uint64_t a1, uint64_t a2)
{
  return sub_234119328(a2);
}

double sub_2341192C0(int *a1, uint64_t a2)
{
  double result;
  _QWORD v4[3];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, int *))(*(_QWORD *)a2 + 136))(v4, a2, a1 + 2);
  if (close(a1[1]))
    sub_234259BCC();
  if (close(*a1))
    sub_234259B28();
  result = NAN;
  *(_QWORD *)a1 = -1;
  return result;
}

uint64_t sub_234119328(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  int *v4;
  char *v5;
  int *v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[128];
  __int128 buf;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    result = read(*(_DWORD *)(a1 + 4), v9, 0x80uLL);
    if (result < 0)
      break;
    if (result != 128)
      return result;
  }
  result = (uint64_t)__error();
  if (*(_DWORD *)result != 35)
  {
    result = (uint64_t)__error();
    if (*(_DWORD *)result != 35)
    {
      v3 = sub_234117B80(0x19u, "chipSystemLayer");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v4 = __error();
        sub_234117EFC(*v4, "src/system/WakeEvent.cpp", 109, (uint64_t)&v7);
        buf = v7;
        v11 = v8;
        v5 = sub_2341083CC((const char **)&buf, 1);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v5;
        _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "System wake event confirm failed: %s", (uint8_t *)&buf, 0xCu);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
      {
        v6 = __error();
        sub_234117EFC(*v6, "src/system/WakeEvent.cpp", 109, (uint64_t)&v7);
        buf = v7;
        v11 = v8;
        sub_2341083CC((const char **)&buf, 1);
        return sub_2341147D0(0x19u, 1);
      }
    }
  }
  return result;
}

uint64_t sub_2341194A4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int *v4;
  char __buf;

  __buf = 1;
  result = write(*a1, &__buf, 1uLL);
  if ((result & 0x8000000000000000) == 0
    || (result = (uint64_t)__error(), *(_DWORD *)result == 35)
    || (result = (uint64_t)__error(), *(_DWORD *)result == 35))
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/system/WakeEvent.cpp";
    *(_DWORD *)(a2 + 16) = 124;
  }
  else
  {
    v4 = __error();
    return sub_234117EFC(*v4, "src/system/WakeEvent.cpp", 121, a2);
  }
  return result;
}

uint64_t sub_23411953C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  int v4;
  int32x2_t *v5;
  uint64_t v6;
  int32x2_t *v7;

  if (*(_BYTE *)(result + 3048))
  {
    v3 = 56;
    goto LABEL_3;
  }
  v5 = (int32x2_t *)result;
  *(_BYTE *)(result + 3048) = 1;
  sub_234117F3C();
  v6 = 1;
  do
  {
    v7 = &v5[v6];
    v7->i32[0] = -1;
    v7->i8[4] = 0;
    *(_OWORD *)v7[1].i8 = 0uLL;
    *(_OWORD *)v7[3].i8 = 0uLL;
    v6 += 5;
  }
  while (&v7[5] != &v5[321]);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_2341190EC(v5 + 382, (uint64_t)v5, a2);
  if (!*(_DWORD *)a2)
  {
    if (v5[381].i8[0] == 1)
    {
      v4 = 0;
      v5[381].i8[0] = 2;
      v3 = 75;
      goto LABEL_4;
    }
    v3 = 74;
LABEL_3:
    v4 = 3;
LABEL_4:
    *(_DWORD *)a2 = v4;
    a2[1] = "src/system/SystemLayerImplSelect.cpp";
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

double sub_23411960C(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = -1;
  *(_BYTE *)(a1 + 4) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_234119628(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t i;

  if (*(_BYTE *)(a1 + 3048) == 2)
  {
    *(_BYTE *)(a1 + 3048) = 3;
    v2 = (uint64_t *)(a1 + 2624);
    v3 = sub_234118CB8((uint64_t *)(a1 + 2624));
    if (v3)
    {
      v4 = v3;
      do
      {
        v5 = *(NSObject **)(v4 + 32);
        if (v5)
        {
          dispatch_source_cancel(v5);
          dispatch_release(*(dispatch_object_t *)(v4 + 32));
        }
        v4 = sub_234118CB8(v2);
      }
      while (v4);
    }
    *((_BYTE *)sub_234118AFC() + 1) = 0;
    sub_234115DFC((_QWORD *)(a1 + 2584), a1 + 2568, (unsigned int (*)(uint64_t))sub_23411A928);
    for (i = 8; i != 2568; i += 40)
      sub_2341196EC(a1 + i);
    sub_2341192C0((int *)(a1 + 3056), a1);
    if (*(_BYTE *)(a1 + 3048) == 3)
      *(_BYTE *)(a1 + 3048) = 0;
  }
}

double sub_2341196EC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  double result;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
  }
  v3 = *(NSObject **)(a1 + 24);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 24));
  }
  *(_DWORD *)a1 = -1;
  *(_BYTE *)(a1 + 4) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t sub_234119748(uint64_t a1)
{
  uint64_t result;
  NSObject *v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  uint8_t buf[16];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = 0uLL;
  v5 = 0;
  result = sub_2341194A4((int *)(a1 + 3056), (uint64_t)&v4);
  if ((_DWORD)v4)
  {
    v2 = sub_234117B80(0x19u, "chipSystemLayer");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v4;
      v7 = v5;
      v3 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_ERROR, "System wake event notify failed: %s", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = v4;
      v7 = v5;
      sub_2341083CC((const char **)buf, 1);
      return sub_2341147D0(0x19u, 1);
    }
  }
  return result;
}

void sub_234119860(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  dispatch_source_t v15;
  NSObject *v16;
  dispatch_time_t v17;
  int v18;
  int v19;
  _QWORD handler[7];

  sub_2341B1F64("src/system/SystemLayerImplSelect.cpp", 158);
  if (*(_BYTE *)(a1 + 3048) == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a3, a4);
    v10 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    v11 = sub_234119A34((unint64_t *)(a1 + 2568), a1, v10 + a2, a3, a4);
    if (v11)
    {
      v12 = v11;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
      v14 = sub_234118BA0(a1 + 2624, v12);
      if (v13)
      {
        v15 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 1uLL, v13);
        if (!v15)
          sub_234259C70(0);
        v16 = v15;
        v12[4] = v15;
        v17 = dispatch_walltime(0, 1000000 * a2);
        dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, 0x1E8480uLL);
        handler[0] = MEMORY[0x24BDAC760];
        handler[1] = 0x40000000;
        handler[2] = sub_234119AA0;
        handler[3] = &unk_250504088;
        handler[4] = a1;
        handler[5] = v16;
        handler[6] = v12;
        dispatch_source_set_event_handler(v16, handler);
        dispatch_resume(v16);
        v18 = 0;
        v19 = 188;
      }
      else
      {
        if (v14 == v12)
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
        v18 = 0;
        v19 = 214;
      }
    }
    else
    {
      v19 = 167;
      v18 = 11;
    }
  }
  else
  {
    v19 = 160;
    v18 = 3;
  }
  *(_DWORD *)a5 = v18;
  *(_QWORD *)(a5 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a5 + 16) = v19;
}

_QWORD *sub_234119A34(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  int *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a4;
  v11 = a3;
  v9 = a5;
  v5 = sub_23411A9C4(a1, a2, &v11, &v10, &v9);
  v6 = sub_234118AFC();
  v7 = *((_BYTE *)v6 + 1) + 1;
  *((_BYTE *)v6 + 1) = v7;
  if (*((char *)sub_234118B08() + 1) < v7)
    *((_BYTE *)sub_234118B08() + 1) = v7;
  return v5;
}

uint64_t sub_234119AA0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a1 + 32);
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  v3 = *(_QWORD **)(a1 + 48);
  sub_234118C14((_QWORD *)(v2 + 2624), (uint64_t)v3);
  return sub_23411A7F8(v2 + 2568, v3);
}

uint64_t sub_234119AE4(uint64_t a1, _QWORD *a2)
{
  sub_234118C14((_QWORD *)(a1 + 2624), (uint64_t)a2);
  return sub_23411A7F8(a1 + 2568, a2);
}

uint64_t sub_234119B14@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  int v10;

  if (!a2)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/system/SystemLayerImplSelect.cpp";
    v10 = 220;
LABEL_8:
    *(_DWORD *)(a5 + 16) = v10;
    return result;
  }
  v9 = result;
  sub_2341B1F64("src/system/SystemLayerImplSelect.cpp", 222);
  result = sub_234118D4C((unint64_t **)(v9 + 2624), a3, a4);
  if (result >= a2)
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/system/SystemLayerImplSelect.cpp";
    v10 = 236;
    goto LABEL_8;
  }
  if (!(_DWORD)result)
    sub_234118C5C((_QWORD *)(v9 + 2632), a3, a4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, a2, a3, a4);
}

uint64_t sub_234119BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v7;

  if (sub_234118D4C((unint64_t **)(a1 + 2624), a2, a3))
    return 1;
  v7 = *(_QWORD **)(a1 + 2632);
  if (v7)
  {
    while (v7[2] != a2 || v7[3] != a3)
    {
      v7 = (_QWORD *)v7[5];
      if (!v7)
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_234119C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_234118D4C((unint64_t **)(a1 + 2624), a2, a3);
}

uint64_t sub_234119C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  dispatch_object_t *v7;
  NSObject *v8;
  int *v9;

  result = sub_2341B1F64("src/system/SystemLayerImplSelect.cpp", 265);
  if (*(_BYTE *)(a1 + 3048) == 2)
  {
    v7 = (dispatch_object_t *)sub_234118C5C((_QWORD *)(a1 + 2624), a2, a3);
    if (v7
      || (result = (uint64_t)sub_234118C5C((_QWORD *)(a1 + 2632), a2, a3), (v7 = (dispatch_object_t *)result) != 0))
    {
      v8 = v7[4];
      if (v8)
      {
        dispatch_source_cancel(v8);
        dispatch_release(v7[4]);
      }
      v9 = sub_234118AFC();
      --*((_BYTE *)v9 + 1);
      sub_23411A940(a1 + 2568, v7);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    }
  }
  return result;
}

void sub_234119D2C(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD block[7];

  sub_2341B1F64("src/system/SystemLayerImplSelect.cpp", 300);
  if (*((_BYTE *)a1 + 3048) == 2)
  {
    v8 = (*(uint64_t (**)(unint64_t *))(*a1 + 208))(a1);
    if (v8)
    {
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 0x40000000;
      block[2] = sub_234119E74;
      block[3] = &unk_2505040A8;
      block[4] = a1;
      block[5] = a2;
      block[6] = a3;
      dispatch_async(v8, block);
      v9 = 0;
      v10 = 311;
    }
    else
    {
      v11 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
      v12 = sub_234119A34(a1 + 321, (uint64_t)a1, v11, a2, a3);
      if (v12)
      {
        if (sub_234118BA0((uint64_t)(a1 + 328), v12) == v12)
          (*(void (**)(unint64_t *))(*a1 + 152))(a1);
        v9 = 0;
        v10 = 361;
      }
      else
      {
        v10 = 354;
        v9 = 11;
      }
    }
  }
  else
  {
    v10 = 302;
    v9 = 3;
  }
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a4 + 16) = v10;
}

uint64_t sub_234119E74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
}

uint64_t sub_234119E84@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v4;
  uint64_t i;
  int v6;
  BOOL v7;
  int v8;
  int v9;

  v4 = 0;
  for (i = 8; i != 2568; i += 40)
  {
    v6 = *(_DWORD *)(result + i);
    if (v6 == a2)
    {
      v9 = 374;
      v8 = 47;
      goto LABEL_13;
    }
    if (v4)
      v7 = 0;
    else
      v7 = v6 == -1;
    if (v7)
      v4 = (_DWORD *)(result + i);
  }
  if (v4)
  {
    v8 = 0;
    *v4 = a2;
    *a3 = v4;
    v9 = 391;
  }
  else
  {
    v9 = 381;
    v8 = 193;
  }
LABEL_13:
  *(_DWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

void sub_234119EFC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v4;
  int v5;

  if (a1)
  {
    v4 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 32) = a3;
    v5 = 401;
  }
  else
  {
    v5 = 397;
    v4 = 47;
  }
  *(_DWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a4 + 16) = v5;
}

void sub_234119F34(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD handler[5];
  uint8_t buf[16];

  if (a2)
  {
    *((_BYTE *)a2 + 4) |= 1u;
    if (!*((_QWORD *)a2 + 2))
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
      if (v7)
      {
        v8 = dispatch_source_create(MEMORY[0x24BDACA00], *a2, 0, v7);
        *((_QWORD *)a2 + 2) = v8;
        if (!v8)
        {
          v6 = 428;
          v5 = 11;
          goto LABEL_5;
        }
        handler[0] = MEMORY[0x24BDAC760];
        handler[1] = 0x40000000;
        handler[2] = sub_23411A088;
        handler[3] = &unk_2505040C8;
        handler[4] = a2;
        dispatch_source_set_event_handler(v8, handler);
        dispatch_activate(*((dispatch_object_t *)a2 + 2));
      }
      else
      {
        v9 = sub_234117B80(0x1Fu, "DeviceLayer");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "RequestCallbackOnPendingRead with no dispatch queue: callback may not work (might be ok in tests)", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(0x1Fu, 1);
      }
    }
    v5 = 0;
    v6 = 461;
  }
  else
  {
    v6 = 407;
    v5 = 47;
  }
LABEL_5:
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a3 + 16) = v6;
}

uint64_t sub_23411A088(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD);

  v1 = *(_QWORD *)(result + 32);
  if ((*(_BYTE *)(v1 + 4) & 1) != 0)
  {
    v2 = *(uint64_t (**)(uint64_t, _QWORD))(v1 + 8);
    if (v2)
      return v2(1, *(_QWORD *)(v1 + 32));
  }
  return result;
}

void sub_23411A0AC(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD handler[5];
  uint8_t buf[16];

  if (a2)
  {
    *((_BYTE *)a2 + 4) |= 2u;
    if (!*((_QWORD *)a2 + 3))
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
      if (v7)
      {
        v8 = dispatch_source_create(MEMORY[0x24BDACA30], *a2, 0, v7);
        *((_QWORD *)a2 + 3) = v8;
        if (!v8)
        {
          v6 = 488;
          v5 = 11;
          goto LABEL_5;
        }
        handler[0] = MEMORY[0x24BDAC760];
        handler[1] = 0x40000000;
        handler[2] = sub_23411A200;
        handler[3] = &unk_2505040E8;
        handler[4] = a2;
        dispatch_source_set_event_handler(v8, handler);
        dispatch_activate(*((dispatch_object_t *)a2 + 3));
      }
      else
      {
        v9 = sub_234117B80(0x1Fu, "DeviceLayer");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "RequestCallbackOnPendingWrite with no dispatch queue: callback may not work (might be ok in tests)", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(0x1Fu, 1);
      }
    }
    v5 = 0;
    v6 = 521;
  }
  else
  {
    v6 = 467;
    v5 = 47;
  }
LABEL_5:
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a3 + 16) = v6;
}

uint64_t sub_23411A200(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD);

  v1 = *(_QWORD *)(result + 32);
  if ((*(_BYTE *)(v1 + 4) & 2) != 0)
  {
    v2 = *(uint64_t (**)(uint64_t, _QWORD))(v1 + 8);
    if (v2)
      return v2(2, *(_QWORD *)(v1 + 32));
  }
  return result;
}

void sub_23411A224(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (a1)
  {
    v2 = 0;
    *(_BYTE *)(a1 + 4) &= ~1u;
    v3 = 539;
  }
  else
  {
    v3 = 527;
    v2 = 47;
  }
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a2 + 16) = v3;
}

void sub_23411A260(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (a1)
  {
    v2 = 0;
    *(_BYTE *)(a1 + 4) &= ~2u;
    v3 = 557;
  }
  else
  {
    v3 = 545;
    v2 = 47;
  }
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a2 + 16) = v3;
}

void sub_23411A29C(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  int v5;
  int v6;

  v4 = *a2;
  *a2 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  if (v4)
  {
    if ((*v4 & 0x80000000) != 0)
    {
      v6 = 566;
      v5 = 3;
    }
    else
    {
      sub_2341196EC((uint64_t)v4);
      v5 = 0;
      v6 = 577;
    }
  }
  else
  {
    v6 = 565;
    v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/system/SystemLayerImplSelect.cpp";
  *(_DWORD *)(a3 + 16) = v6;
}

uint64_t sub_23411A320(unsigned int a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;

  if ((a1 & 0x80000000) != 0)
    return 0;
  v8 = a1 >> 5;
  if (__darwin_check_fd_set_overflow(a1, a2, 0))
    v9 = (a2[v8] >> a1) & 1;
  else
    v9 = 0;
  if (__darwin_check_fd_set_overflow(a1, a3, 0))
  {
    if (((a3[v8] >> a1) & 1) != 0)
      v9 = v9 | 2;
    else
      v9 = v9;
  }
  if (__darwin_check_fd_set_overflow(a1, a4, 0))
  {
    if (((a4[v8] >> a1) & 1) != 0)
      return v9 | 4;
    else
      return v9;
  }
  return v9;
}

unint64_t sub_23411A3DC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  sub_2341B1F64("src/system/SystemLayerImplSelect.cpp", 613);
  v2 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  v3 = v2 + 2592000000u;
  v4 = *(unint64_t **)(a1 + 2624);
  if (v4)
  {
    v5 = *v4;
    if (v5 < v3)
      v3 = v5;
  }
  v6 = v3 >= v2;
  v7 = v3 - v2;
  if (!v6)
    v7 = 0;
  result = sub_234117E94(1000 * v7, a1 + 2640);
  v9 = 0;
  *(_DWORD *)(a1 + 3040) = -1;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(_OWORD *)(a1 + 2784) = 0u;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_OWORD *)(a1 + 2880) = 0u;
  *(_OWORD *)(a1 + 2896) = 0u;
  *(_OWORD *)(a1 + 2912) = 0u;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_OWORD *)(a1 + 2944) = 0u;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_OWORD *)(a1 + 3024) = 0u;
  do
  {
    v10 = a1 + v9;
    v11 = *(_DWORD *)(a1 + v9 + 8);
    if (v11 != -1)
    {
      if (*(_DWORD *)(a1 + 3040) < v11)
        *(_DWORD *)(a1 + 3040) = v11;
      if ((*(_BYTE *)(a1 + v9 + 12) & 1) != 0)
      {
        v12 = *(_DWORD *)(v10 + 8);
        result = __darwin_check_fd_set_overflow(v12, (const void *)(a1 + 2656), 0);
        if ((_DWORD)result)
          *(_DWORD *)(a1 + 2656 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v12;
      }
      if ((*(_BYTE *)(a1 + v9 + 12) & 2) != 0)
      {
        v13 = *(_DWORD *)(v10 + 8);
        result = __darwin_check_fd_set_overflow(v13, (const void *)(a1 + 2784), 0);
        if ((_DWORD)result)
          *(_DWORD *)(a1 + 2784 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v13;
      }
    }
    v9 += 40;
  }
  while (v9 != 2560);
  return result;
}

uint64_t sub_23411A594(uint64_t a1)
{
  uint64_t result;

  result = select(*(_DWORD *)(a1 + 3040) + 1, (fd_set *)(a1 + 2656), (fd_set *)(a1 + 2784), (fd_set *)(a1 + 2912), (timeval *)(a1 + 2640));
  *(_DWORD *)(a1 + 3044) = result;
  return result;
}

uint64_t sub_23411A5D0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t result;
  uint64_t (*v7)(_QWORD, _QWORD);
  NSObject *v8;
  int *v9;
  char *v10;
  int *v11;
  __int128 v12;
  uint64_t v13;
  uint8_t buf[16];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("src/system/SystemLayerImplSelect.cpp", 664);
  if ((*(_DWORD *)(a1 + 3044) & 0x80000000) != 0)
  {
    v8 = sub_234117B80(0x1Fu, "DeviceLayer");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = __error();
      sub_234117EFC(*v9, "src/system/SystemLayerImplSelect.cpp", 668, (uint64_t)&v12);
      *(_OWORD *)buf = v12;
      v15 = v13;
      v10 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Select failed: %s", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      v11 = __error();
      sub_234117EFC(*v11, "src/system/SystemLayerImplSelect.cpp", 668, (uint64_t)&v12);
      *(_OWORD *)buf = v12;
      v15 = v13;
      sub_2341083CC((const char **)buf, 1);
      return sub_2341147D0(0x1Fu, 1);
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 2632))
      sub_234259D0C();
    v2 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    *(_QWORD *)(a1 + 2632) = sub_234118D04((unint64_t **)(a1 + 2624), v2 + 1);
    v3 = sub_234118CB8((uint64_t *)(a1 + 2632));
    if (v3)
    {
      v4 = (_QWORD *)v3;
      do
      {
        sub_23411A7F8(a1 + 2568, v4);
        v4 = (_QWORD *)sub_234118CB8((uint64_t *)(a1 + 2632));
      }
      while (v4);
    }
    for (i = 0; i != 2560; i += 40)
    {
      result = *(unsigned int *)(a1 + i + 8);
      if ((_DWORD)result != -1)
      {
        result = sub_23411A320(result, (_DWORD *)(a1 + 2656), (_DWORD *)(a1 + 2784), (_DWORD *)(a1 + 2912));
        if ((_BYTE)result)
        {
          v7 = *(uint64_t (**)(_QWORD, _QWORD))(a1 + i + 16);
          if (v7)
            result = v7(result, *(_QWORD *)(a1 + i + 40));
        }
      }
    }
  }
  return result;
}

uint64_t sub_23411A7F8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v4 = a2[1];
  v8 = (uint64_t (*)(uint64_t, uint64_t))a2[2];
  v5 = a2[3];
  v6 = sub_234118AFC();
  --*((_BYTE *)v6 + 1);
  sub_23411A940(a1, a2);
  return v8(v4, v5);
}

void sub_23411A860(uint64_t a1)
{
  sub_23411A8AC(a1);
  JUMPOUT(0x23493E704);
}

BOOL sub_23411A884(uint64_t a1)
{
  return *(_BYTE *)(a1 + 3048) == 2;
}

uint64_t sub_23411A894()
{
  return 0;
}

uint64_t sub_23411A89C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 3072) = a2;
  return result;
}

uint64_t sub_23411A8A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 3072);
}

uint64_t sub_23411A8AC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_250504118;
  if ((*(unsigned __int8 *)(a1 + 3048) | 4) != 4)
    sub_234259D7C(a1);
  *(_BYTE *)(a1 + 3048) = 5;
  sub_23411A8FC((_QWORD *)(a1 + 2568));
  return a1;
}

_QWORD *sub_23411A8FC(_QWORD *result)
{
  if (!byte_25615DDA8)
  {
    if (*result)
      sub_234259E18((uint64_t)result);
  }
  return result;
}

uint64_t sub_23411A928(uint64_t a1, void *a2)
{
  sub_23411A940(a1, a2);
  return 0;
}

void sub_23411A940(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_234259EB4(0);
    v5 = v4;
    *v4 = 0;
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

_QWORD *sub_23411A9C4(unint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  v10 = sub_234114774(0x30uLL);
  v11 = v10;
  if (v10)
  {
    v12 = *a4;
    v13 = *a5;
    *v10 = *a3;
    v10[1] = a2;
    v10[2] = v12;
    v10[3] = v13;
    v10[4] = 0;
    v10[5] = 0;
    v14 = sub_234114774(0x18uLL);
    if (v14)
    {
      *v14 = v11;
      v14[1] = a1 + 2;
      v14[2] = 0;
      v14[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v14;
      a1[4] = (unint64_t)v14;
      v15 = a1[1];
      v16 = *a1 + 1;
      *a1 = v16;
      if (v16 > v15)
        a1[1] = v16;
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

__n128 sub_23411AA78@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 24) = a2;
  sub_234107E40(a2, a3, 22, (_DWORD *)(a1 + 32), (uint64_t)&v8);
  *(_OWORD *)a1 = v8;
  v6 = v9;
  *(_QWORD *)(a1 + 16) = v9;
  result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = v6;
  return result;
}

__n128 sub_23411AADC@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 24) = a2;
  sub_234107E40(a2, 0x100uLL, 22, (_DWORD *)(a1 + 32), (uint64_t)&v7);
  *(_OWORD *)a1 = v7;
  v5 = v8;
  *(_QWORD *)(a1 + 16) = v8;
  result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_23411AB3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  sub_2341045C8(a1, a2);
  result = sub_23410462C(a1);
  if ((_DWORD)result == 22)
    return sub_23410570C(a1, (_DWORD *)(a1 + 72), a3);
  *(_DWORD *)a3 = 38;
  *(_QWORD *)(a3 + 8) = "src/app/MessageDef/ArrayParser.cpp";
  *(_DWORD *)(a3 + 16) = 26;
  return result;
}

void sub_23411ABA4(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 1, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411DF0C(a2, (uint64_t)v6, (uint64_t)a3);
}

void sub_23411AC14(int *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AD0C(a1, 0, 4, a2, a3);
}

void sub_23411AC24(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_2341063A4(a1, 2, a2, a3);
}

uint64_t sub_23411AC30(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411DE48(a1 + 40, *(char **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_23411AC84(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 0, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

__n128 sub_23411ACD8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  sub_23411C060((char *)a1);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

void sub_23411AD0C(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _DWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  _BYTE v12[72];

  *(_OWORD *)a5 = xmmword_250504248;
  a5[2] = 115;
  sub_234104468((uint64_t)v12);
  sub_2341063A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_23410462C((uint64_t)v12) == a3)
    {
      sub_234104A50((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

uint64_t sub_23411ADE0(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  if (*(_DWORD *)a1)
  {
    v5 = *(__n128 *)a1;
    v6 = *(_QWORD *)(a1 + 16);
    sub_23411C04C((__n128 *)(a1 + 40), &v5);
  }
  else
  {
    sub_23411E904(a1 + 40, *(char **)(a1 + 24), (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_23411AE50(uint64_t a1)
{
  return a1 + 40;
}

void sub_23411AE58(int *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AE68(a1, 0, 8, a2, a3);
}

void sub_23411AE68(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, char *a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  _BYTE v12[72];

  *(_OWORD *)a5 = xmmword_250504278;
  a5[2] = 115;
  sub_234104468((uint64_t)v12);
  sub_2341063A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_23410462C((uint64_t)v12) == a3)
    {
      sub_2341046D0((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

void sub_23411AF3C(int *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B888(a1, 1u, 4, a2, a3);
}

void sub_23411AF4C(int *a1@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B95C(a1, 2u, 4, a2, a3);
}

void sub_23411AF5C(int *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AD0C(a1, 3u, 4, a2, a3);
}

void sub_23411AF6C(int *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AD0C(a1, 4u, 4, a2, a3);
}

void sub_23411AF7C(int *a1@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B95C(a1, 5u, 4, a2, a3);
}

void sub_23411AF8C(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411BA30(a1, 5u, 4, a2, a3);
}

void sub_23411AF9C(int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[2];
  char v17;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (int *)(a2 + 4);
  sub_23411AD0C(a1, 3u, 4, (_DWORD *)(a2 + 4), a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_23411AD0C(a1, 4u, 4, (_DWORD *)(a2 + 8), a4);
    if (!*(_DWORD *)a4)
    {
      if (a3)
        goto LABEL_4;
      v10 = *v8;
      v11 = HIWORD(*v8);
      if (v11 > 0xFFF4 || ((v10 & 0x8000) != 0 || v11) && (!v11 || (unsigned __int16)(v10 + 1024) >= 0x3FFu))
      {
        *(_DWORD *)a4 = 1408;
        a4[1] = "src/app/MessageDef/AttributePathIB.cpp";
        v9 = 182;
      }
      else
      {
        v12 = *(_DWORD *)(a2 + 8);
        v13 = HIWORD(v12);
        if ((unsigned __int16)((unsigned __int16)v12 >> 12) <= 4u && v13 < 0xFFF5
          || !v13 && (unsigned __int16)(v12 + 4096) < 0xFFFu)
        {
LABEL_4:
          *(_OWORD *)a4 = xmmword_250504260;
          a4[2] = 186;
          v16[0] = 0;
          v17 = 0;
          sub_23411BA30(a1, 5u, 4, (uint64_t)v16, &v14);
          *(_OWORD *)a4 = v14;
          a4[2] = v15;
          if (*(_DWORD *)a4 == 33)
          {
            *(_BYTE *)(a2 + 14) = 0;
            *(_DWORD *)a4 = 0;
            a4[1] = "src/app/MessageDef/AttributePathIB.cpp";
            v9 = 206;
          }
          else
          {
            if (*(_DWORD *)a4)
              return;
            if (!v17)
            {
              *(_BYTE *)(a2 + 14) = 4;
              return;
            }
            *(_DWORD *)a4 = 181;
            a4[1] = "src/app/MessageDef/AttributePathIB.cpp";
            v9 = 198;
          }
          goto LABEL_20;
        }
        *(_DWORD *)a4 = 1408;
        a4[1] = "src/app/MessageDef/AttributePathIB.cpp";
        v9 = 183;
      }
LABEL_20:
      *((_DWORD *)a4 + 4) = v9;
    }
  }
}

void sub_23411B170(int *a1@<X0>, _WORD *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_23411AF9C(a1, (uint64_t)a2, a3, a4);
  if (!*(_DWORD *)a4)
    sub_23411B95C(a1, 2u, 4, a2, a4);
}

void sub_23411B1D4(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 *v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  _WORD *v13;
  unsigned int v14;
  _QWORD v15[3];

  v6 = (__int16 *)(a2 + 2);
  sub_23411B95C(a1, 2u, 4, (_WORD *)a2 + 4, v15);
  if (LODWORD(v15[0]) != 33)
  {
    if (LODWORD(v15[0]))
    {
      v9 = 233;
      goto LABEL_33;
    }
    if (*v6 == -1)
    {
      v9 = 227;
      goto LABEL_33;
    }
  }
  sub_23411AD0C(a1, 3u, 4, a2, v15);
  if (LODWORD(v15[0]) == 33)
    goto LABEL_16;
  if (LODWORD(v15[0]))
  {
    v9 = 244;
    goto LABEL_33;
  }
  v7 = *a2;
  v8 = HIWORD(*a2);
  if (v8 > 0xFFF4)
  {
    v9 = 238;
    goto LABEL_33;
  }
  if ((v7 & 0x8000) == 0 && !v8 || (v9 = 238, v10 = 1408, v8) && (unsigned __int16)(v7 + 1024) <= 0x3FEu)
  {
LABEL_16:
    v11 = (unsigned int *)(a2 + 1);
    sub_23411AD0C(a1, 4u, 4, a2 + 1, v15);
    if (LODWORD(v15[0]) == 33)
      goto LABEL_30;
    if (LODWORD(v15[0]))
    {
      v9 = 255;
      goto LABEL_33;
    }
    if ((v12 = HIWORD(*v11), (unsigned __int16)((unsigned __int16)*v11 >> 12) <= 4u) && v12 < 0xFFF5
      || (v9 = 249, v10 = 1408, !v12) && (unsigned __int16)(*v11 + 4096) <= 0xFFEu)
    {
LABEL_30:
      if (*a2 == -1)
      {
        v14 = *v11;
        if (*v11 != -1)
        {
          v9 = 261;
          v10 = 1408;
          if (HIWORD(v14) || (unsigned __int16)(v14 + 4096) > 0xFFEu)
            goto LABEL_34;
        }
      }
      v13 = (_WORD *)a2 + 5;
      sub_23411B95C(a1, 5u, 4, v13, v15);
      if (LODWORD(v15[0]) == 33)
      {
LABEL_22:
        v10 = 0;
        v9 = 274;
        goto LABEL_34;
      }
      if (!LODWORD(v15[0]))
      {
        v9 = 267;
        v10 = 1408;
        if (*v11 == -1 || (unsigned __int16)*v13 == 0xFFFF)
          goto LABEL_34;
        goto LABEL_22;
      }
      v9 = 273;
LABEL_33:
      v10 = 1408;
    }
  }
LABEL_34:
  *(_DWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = "src/app/MessageDef/AttributePathIB.cpp";
  *(_DWORD *)(a3 + 16) = v9;
}

uint64_t sub_23411B3E0(uint64_t a1, int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234106F04(*(char **)(a1 + 24), 0, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411B434(uint64_t a1, unint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_2341071EC(*(char **)(a1 + 24), 1uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411B488(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234107224(*(char **)(a1 + 24), 2uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411B4DC(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 3uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411B530(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 4uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411B584(uint64_t a1, unsigned __int16 *a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_233CFDCB0(*(char **)(a1 + 24), 5uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411B5D8(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234107224(*(char **)(a1 + 24), 5uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

__n128 sub_23411B62C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;

  v6 = *(unsigned __int16 *)(a2 + 8);
  if (v6 != 0xFFFF && !*(_DWORD *)a1)
  {
    sub_234107224(*(char **)(a1 + 24), 2uLL, v6, (uint64_t)&v10);
    *(_OWORD *)a1 = v10;
    *(_QWORD *)(a1 + 16) = v11;
  }
  if (*(_DWORD *)a2 != -1 && !*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 3uLL, *(_DWORD *)a2, (uint64_t)&v10);
    *(_OWORD *)a1 = v10;
    *(_QWORD *)(a1 + 16) = v11;
  }
  v7 = *(_DWORD *)(a2 + 4);
  if (v7 != -1 && !*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 4uLL, v7, (uint64_t)&v10);
    *(_OWORD *)a1 = v10;
    *(_QWORD *)(a1 + 16) = v11;
  }
  v8 = *(unsigned __int16 *)(a2 + 10);
  if (v8 != 0xFFFF && !*(_DWORD *)a1)
  {
    sub_234107224(*(char **)(a1 + 24), 5uLL, v8, (uint64_t)&v10);
    *(_OWORD *)a1 = v10;
    *(_QWORD *)(a1 + 16) = v11;
  }
  sub_23411C060((char *)a1);
  result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

char *sub_23411B750@<X0>(char *result@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  unsigned int v6;
  unsigned __int16 v7;
  char v8;
  __int128 v9;
  uint64_t v10;

  v4 = result;
  if (!*(_DWORD *)result)
  {
    result = sub_234107224(*((char **)result + 3), 2uLL, *a2, (uint64_t)&v9);
    *(_OWORD *)v4 = v9;
    *((_QWORD *)v4 + 2) = v10;
    if (!*(_DWORD *)v4)
    {
      result = sub_23410726C(*((char **)v4 + 3), 3uLL, *((_DWORD *)a2 + 1), (uint64_t)&v9);
      *(_OWORD *)v4 = v9;
      *((_QWORD *)v4 + 2) = v10;
      if (!*(_DWORD *)v4)
      {
        result = sub_23410726C(*((char **)v4 + 3), 4uLL, *((_DWORD *)a2 + 2), (uint64_t)&v9);
        *(_OWORD *)v4 = v9;
        *((_QWORD *)v4 + 2) = v10;
      }
    }
  }
  v6 = *((unsigned __int8 *)a2 + 14);
  if (v6 < 2)
    goto LABEL_9;
  if (v6 == 4)
  {
    LOBYTE(v7) = 0;
    v8 = 0;
    if (!*(_DWORD *)v4)
    {
      sub_233CFDCB0(*((char **)v4 + 3), 5uLL, &v7, (uint64_t)&v9);
      *(_OWORD *)v4 = v9;
      *((_QWORD *)v4 + 2) = v10;
    }
LABEL_9:
    result = sub_23411C060(v4);
    *(_OWORD *)a3 = *(_OWORD *)v4;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
    return result;
  }
  *(_DWORD *)a3 = 47;
  *(_QWORD *)(a3 + 8) = "src/app/MessageDef/AttributePathIB.cpp";
  *(_DWORD *)(a3 + 16) = 395;
  return result;
}

void sub_23411B888(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  _BYTE v12[72];

  *(_OWORD *)a5 = xmmword_250504278;
  a5[2] = 115;
  sub_234104468((uint64_t)v12);
  sub_2341063A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_23410462C((uint64_t)v12) == a3)
    {
      sub_23410499C((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

void sub_23411B95C(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _WORD *a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  _BYTE v12[72];

  *(_OWORD *)a5 = xmmword_250504278;
  a5[2] = 115;
  sub_234104468((uint64_t)v12);
  sub_2341063A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_23410462C((uint64_t)v12) == a3)
    {
      sub_2341049E0((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

void sub_23411BA30(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  _BYTE v13[72];

  *(_OWORD *)a5 = xmmword_250504290;
  a5[2] = 145;
  sub_234104468((uint64_t)v13);
  sub_2341063A4(a1, a2, (uint64_t)v13, a5);
  if (!*(_DWORD *)a5)
  {
    if (*(_BYTE *)(a4 + 2))
      *(_BYTE *)(a4 + 2) = 0;
    if (sub_23410462C((uint64_t)v13) == a3 || sub_23410462C((uint64_t)v13) == 20)
    {
      if (sub_23410462C((uint64_t)v13) == a3)
      {
        v12 = 0;
        sub_2341049E0((uint64_t)v13, &v12, (uint64_t)&v10);
        *(_OWORD *)a5 = v10;
        a5[2] = v11;
        if (!*(_DWORD *)a5)
        {
          *(_WORD *)a4 = v12;
          *(_BYTE *)(a4 + 2) = 1;
        }
      }
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 154;
    }
  }
}

uint64_t sub_23411BB4C(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411DEAC(a1 + 40, *(char **)(a1 + 24), (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

void sub_23411BB9C(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 0, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411E964(a2, (uint64_t)v6, a3);
}

void sub_23411BC0C(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 1, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411E964(a2, (uint64_t)v6, a3);
}

uint64_t sub_23411BC7C(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411E8A0(a1 + 40, *(char **)(a1 + 24), 0, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_23411BCD0(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411E8A0(a1 + 160, *(char **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 160;
}

uint64_t sub_23411BD24(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411E904(a1 + 40, *(char **)(a1 + 24), (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

double sub_23411BD74@<D0>(char **a1@<X0>, unsigned __int16 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  char *v21;

  if (!*(_DWORD *)a1)
  {
    sub_23411E904((uint64_t)(a1 + 5), a1[3], (uint64_t)&v20);
    *(_OWORD *)a1 = v20;
    a1[2] = v21;
  }
  v8 = *(_OWORD *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = a1[2];
  if (!*(_DWORD *)a4)
  {
    v9 = (uint64_t)(a1 + 5);
    v10 = sub_23411BC7C(v9);
    v8 = *(_OWORD *)v9;
    *(_OWORD *)a4 = *(_OWORD *)v9;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v9 + 16);
    if (!*(_DWORD *)a4)
    {
      v11 = v10;
      v12 = sub_23411BF50(v10);
      v8 = *(_OWORD *)v11;
      *(_OWORD *)a4 = *(_OWORD *)v11;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(v11 + 16);
      if (!*(_DWORD *)a4)
      {
        v13 = v12;
        v14 = sub_23411B488(v12, *a2);
        v15 = sub_23411B4DC(v14, *((_DWORD *)a2 + 1));
        v16 = sub_23411B530(v15, *((_DWORD *)a2 + 2));
        sub_23411ACD8(v16, (uint64_t)&v20);
        v8 = *(_OWORD *)v13;
        *(_OWORD *)a4 = *(_OWORD *)v13;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(v13 + 16);
        if (!*(_DWORD *)a4)
        {
          v17 = sub_23411BFA4(v11);
          v8 = *(_OWORD *)v11;
          *(_OWORD *)a4 = *(_OWORD *)v11;
          *(_QWORD *)(a4 + 16) = *(_QWORD *)(v11 + 16);
          if (!*(_DWORD *)a4)
          {
            v18 = v17;
            sub_23411E524(v17, a3);
            v8 = *(_OWORD *)v18;
            *(_OWORD *)a4 = *(_OWORD *)v18;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)(v18 + 16);
            if (!*(_DWORD *)a4)
            {
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              *(_QWORD *)&v8 = sub_23411ACD8(v11, a4).n128_u64[0];
              if (!*(_DWORD *)a4)
                *(_QWORD *)&v8 = sub_23411ACD8(v9, a4).n128_u64[0];
            }
          }
        }
      }
    }
  }
  return *(double *)&v8;
}

void sub_23411BEE0(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 0, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411DF0C(a2, (uint64_t)v6, (uint64_t)a3);
}

uint64_t sub_23411BF50(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411DE48(a1 + 40, *(char **)(a1 + 24), 0, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_23411BFA4(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411E8A0(a1 + 80, *(char **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 80;
}

uint64_t sub_23411BFF8(uint64_t result)
{
  *(_DWORD *)result = 3;
  *(_QWORD *)(result + 8) = "src/app/MessageDef/Builder.cpp";
  *(_DWORD *)(result + 16) = 35;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  return result;
}

uint64_t sub_23411C024(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = a3;
  return result;
}

uint64_t sub_23411C030(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = "src/app/MessageDef/Builder.cpp";
  *(_DWORD *)(result + 16) = 45;
  return result;
}

__n128 sub_23411C04C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

char *sub_23411C060(char *result)
{
  char *v1;
  __int128 v2;
  uint64_t v3;

  if (!*(_DWORD *)result)
  {
    v1 = result;
    result = sub_234107FB0(*((char **)result + 3), *((_DWORD *)result + 8), (uint64_t)&v2);
    *(_OWORD *)v1 = v2;
    *((_QWORD *)v1 + 2) = v3;
    if (!*(_DWORD *)v1)
      *((_DWORD *)v1 + 8) = -1;
  }
  return result;
}

void sub_23411C0BC(int *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B888(a1, 0, 4, a2, a3);
}

void sub_23411C0CC(int *a1@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B95C(a1, 1u, 4, a2, a3);
}

void sub_23411C0DC(int *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AD0C(a1, 2u, 4, a2, a3);
}

uint64_t sub_23411C0EC(uint64_t a1, unint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_2341071EC(*(char **)(a1 + 24), 0, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411C140(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234107224(*(char **)(a1 + 24), 1uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411C194(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 2uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

void sub_23411C1E8(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/MessageDef/CommandDataIB.cpp";
    *((_DWORD *)a3 + 4) = 104;
  }
}

uint64_t sub_23411C238(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = a1 + 40;
  sub_23411DE48(a1 + 40, *(char **)(a1 + 24), 0, (uint64_t)&v4);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v5;
  return v2;
}

char *sub_23411C288@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  return sub_234107224(*(char **)(a1 + 24), 2uLL, a2, a3);
}

void sub_23411C298(int *a1@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B95C(a1, 0, 4, a2, a3);
}

void sub_23411C2A8(int *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AD0C(a1, 1u, 4, a2, a3);
}

void sub_23411C2B8(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23411C324(a1, (int *)(a2 + 4), (_DWORD *)(a2 + 8), a3);
  if (!*(_DWORD *)a3)
    sub_23411B95C(a1, 0, 4, (_WORD *)a2, a3);
}

void sub_23411C324(int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  int v8;
  unsigned int v9;
  int v10;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_23411AD0C(a1, 1u, 4, a2, a4);
  if (!*(_DWORD *)a4)
  {
    v8 = *a2;
    v9 = HIWORD(*a2);
    if (v9 > 0xFFF4 || ((v8 & 0x8000) != 0 || v9) && (!v9 || (unsigned __int16)(v8 + 1024) >= 0x3FFu))
    {
      *(_DWORD *)a4 = 1408;
      a4[1] = "src/app/MessageDef/CommandPathIB.cpp";
      v10 = 129;
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_23411AD0C(a1, 2u, 4, a3, a4);
      if (*(_DWORD *)a4)
        return;
      if ((*a3 & 0xFF00) != 0 || HIWORD(*a3) >= 0xFFF5u)
      {
        *(_DWORD *)a4 = 1408;
        a4[1] = "src/app/MessageDef/CommandPathIB.cpp";
        v10 = 132;
      }
      else
      {
        *(_DWORD *)a4 = 0;
        a4[1] = "src/app/MessageDef/CommandPathIB.cpp";
        v10 = 134;
      }
    }
    *((_DWORD *)a4 + 4) = v10;
  }
}

uint64_t sub_23411C438(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234107224(*(char **)(a1 + 24), 0, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411C48C(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 1uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

__n128 sub_23411C4E0@<Q0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v7;
  uint64_t v8;

  if ((a2[6] & 1) != 0)
  {
    if (*(_DWORD *)a1)
      goto LABEL_7;
    sub_234107224(*(char **)(a1 + 24), 0, *a2, (uint64_t)&v7);
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v8;
  }
  if (!*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 1uLL, *((_DWORD *)a2 + 1), (uint64_t)&v7);
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v8;
    if (!*(_DWORD *)a1)
    {
      sub_23410726C(*(char **)(a1 + 24), 2uLL, *((_DWORD *)a2 + 2), (uint64_t)&v7);
      *(_OWORD *)a1 = v7;
      *(_QWORD *)(a1 + 16) = v8;
    }
  }
LABEL_7:
  sub_23411C060((char *)a1);
  result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

__n128 sub_23411C5B8@<Q0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v7;
  uint64_t v8;

  if (!*(_DWORD *)a1)
  {
    sub_234107224(*(char **)(a1 + 24), 0, *a2, (uint64_t)&v7);
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v8;
    if (!*(_DWORD *)a1)
    {
      sub_23410726C(*(char **)(a1 + 24), 1uLL, *((_DWORD *)a2 + 1), (uint64_t)&v7);
      *(_OWORD *)a1 = v7;
      *(_QWORD *)(a1 + 16) = v8;
      if (!*(_DWORD *)a1)
      {
        sub_23410726C(*(char **)(a1 + 24), 2uLL, *((_DWORD *)a2 + 2), (uint64_t)&v7);
        *(_OWORD *)a1 = v7;
        *(_QWORD *)(a1 + 16) = v8;
      }
    }
  }
  sub_23411C060((char *)a1);
  result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_23411C688(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = a1 + 40;
  sub_23411E904(a1 + 40, *(char **)(a1 + 24), (uint64_t)&v4);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v5;
  return v2;
}

void sub_23411C6D4(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 0, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_23411DF0C(a2, (uint64_t)v6, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/MessageDef/EventDataIB.cpp";
      *((_DWORD *)a3 + 4) = 161;
    }
  }
}

void sub_23411C76C(int *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411CDA8(a1, 2u, 4, a2, a3);
}

void sub_23411C77C(int *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B888(a1, 3u, 4, a2, a3);
}

void sub_23411C78C(int *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B888(a1, 4u, 4, a2, a3);
}

void sub_23411C79C(int *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B888(a1, 5u, 4, a2, a3);
}

void sub_23411C7AC(int *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411B888(a1, 6u, 4, a2, a3);
}

void sub_23411C7BC(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_2341063A4(a1, 7, a2, a3);
}

void sub_23411C7C8(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v9 = 0uLL;
  v10 = 0;
  sub_23411C0CC(a1, (_WORD *)a2, &v9);
  if ((_DWORD)v9)
  {
    *(_DWORD *)a3 = 182;
    *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
    v6 = 203;
  }
  else
  {
    sub_23411C0DC(a1, (_DWORD *)(a2 + 4), &v7);
    v9 = v7;
    v10 = v8;
    if ((_DWORD)v7)
    {
      *(_DWORD *)a3 = 182;
      *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
      v6 = 206;
    }
    else
    {
      sub_23411AF5C(a1, (_DWORD *)(a2 + 8), &v7);
      v9 = v7;
      v10 = v8;
      if ((_DWORD)v7)
      {
        *(_DWORD *)a3 = 182;
        *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        v6 = 209;
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        v6 = 211;
      }
    }
  }
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_23411C8D8(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = 0;
  sub_23411B888(a1, 6u, 4, &v21, &v18);
  v7 = v18;
  v6 = HIDWORD(v18);
  v8 = HIDWORD(v20);
  if ((_DWORD)v18 == 33)
  {
    v10 = 0;
LABEL_7:
    *(_DWORD *)(a3 + 4) = v6;
    *(_DWORD *)(a3 + 20) = v8;
    sub_23411B888(a1, 5u, 4, &v21, &v18);
    if ((_DWORD)v18 == 33)
    {
      v11 = 0;
    }
    else
    {
      if ((_DWORD)v18)
      {
        v15 = v19;
        v16 = v20;
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v15;
        *(_QWORD *)(a3 + 16) = v16;
        return;
      }
      if (*(_BYTE *)(a2 + 32) != 1)
      {
        *(_DWORD *)a3 = 186;
        *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        v9 = 243;
        goto LABEL_25;
      }
      *(_QWORD *)(a2 + 40) += v21;
      v11 = 1;
    }
    sub_23411B888(a1, 4u, 4, &v21, &v18);
    v7 = v18;
    v6 = HIDWORD(v18);
    v8 = HIDWORD(v20);
    if ((_DWORD)v18 == 33)
    {
      v12 = 0;
      goto LABEL_19;
    }
    if (!(_DWORD)v18)
    {
      *(_BYTE *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = v21;
      v12 = 1;
LABEL_19:
      *(_DWORD *)(a3 + 4) = v6;
      *(_DWORD *)(a3 + 20) = v8;
      sub_23411B888(a1, 3u, 4, &v21, &v18);
      if ((_DWORD)v18)
      {
        v17 = 0;
      }
      else
      {
        v17 = 1;
        *(_BYTE *)(a2 + 32) = 1;
        *(_QWORD *)(a2 + 40) = v21;
      }
      if (v11 + v10 + v12 + v17 == 1)
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        v9 = 276;
      }
      else
      {
        *(_DWORD *)a3 = 186;
        *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
        v9 = 278;
      }
      goto LABEL_25;
    }
LABEL_15:
    v13 = v19;
    v14 = v20;
    *(_DWORD *)a3 = v7;
    *(_DWORD *)(a3 + 4) = v6;
    *(_QWORD *)(a3 + 8) = v13;
    *(_DWORD *)(a3 + 16) = v14;
    *(_DWORD *)(a3 + 20) = v8;
    return;
  }
  if ((_DWORD)v18)
    goto LABEL_15;
  if (!*(_BYTE *)(a2 + 32))
  {
    *(_QWORD *)(a2 + 40) += v21;
    v10 = 1;
    goto LABEL_7;
  }
  *(_DWORD *)a3 = 186;
  *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventDataIB.cpp";
  v9 = 230;
LABEL_25:
  *(_DWORD *)(a3 + 16) = v9;
}

void sub_23411CAF4(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6[21];
  char v7;

  v7 = 0;
  sub_23411E074((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23411C6D4(a1, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_23411C7C8(v6, a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_23411B888(a1, 1u, 4, (_QWORD *)(a2 + 16), a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_23411CDA8(a1, 2u, 4, &v7, a3);
        if (!*(_DWORD *)a3)
        {
          *(_BYTE *)(a2 + 24) = v7;
          a3[1] = 0;
          a3[2] = 0;
          *a3 = 0;
          sub_23411C8D8(a1, a2, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *(_DWORD *)a3 = 0;
            a3[1] = "src/app/MessageDef/EventDataIB.cpp";
            *((_DWORD *)a3 + 4) = 291;
          }
        }
      }
    }
  }
}

uint64_t sub_23411CC04(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_2341071D8(*(char **)(a1 + 24), 2uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411CC58(uint64_t a1, unint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_2341071EC(*(char **)(a1 + 24), 3uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411CCAC(uint64_t a1, unint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_2341071EC(*(char **)(a1 + 24), 4uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411CD00(uint64_t a1, unint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_2341071EC(*(char **)(a1 + 24), 5uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411CD54(uint64_t a1, unint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_2341071EC(*(char **)(a1 + 24), 6uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

void sub_23411CDA8(int *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _BYTE *a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  _BYTE v12[72];

  *(_OWORD *)a5 = xmmword_250504320;
  a5[2] = 115;
  sub_234104468((uint64_t)v12);
  sub_2341063A4(a1, a2, (uint64_t)v12, a5);
  if (!*(_DWORD *)a5)
  {
    *a4 = 0;
    if (sub_23410462C((uint64_t)v12) == a3)
    {
      sub_23410492C((uint64_t)v12, a4, (uint64_t)&v10);
      *(_OWORD *)a5 = v10;
      a5[2] = v11;
    }
    else
    {
      *(_DWORD *)a5 = 38;
      a5[1] = "src/app/MessageDef/Parser.h";
      *((_DWORD *)a5 + 4) = 123;
    }
  }
}

void sub_23411CE7C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v6 = a1 + 40;
  sub_23411E904(a1 + 40, *(char **)(a1 + 24), (uint64_t)&v9);
  *(_OWORD *)a1 = v9;
  v7 = v10;
  *(_QWORD *)(a1 + 16) = v10;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = v7;
  if (!*(_DWORD *)a3)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v8 = sub_23411B434(v6, a2);
    sub_23411ACD8(v8, a3);
    if (!*(_DWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_23411C060((char *)a1);
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventFilterIBs.cpp";
        *(_DWORD *)(a3 + 16) = 84;
      }
    }
  }
}

void sub_23411CF4C(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  _QWORD v7[3];

  sub_23411B95C(a1, 1u, 4, (_WORD *)a2, v7);
  if (LODWORD(v7[0]))
  {
    *(_DWORD *)a3 = 182;
    *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
    v6 = 149;
  }
  else
  {
    sub_23411AD0C(a1, 2u, 4, (_DWORD *)(a2 + 4), v7);
    if (LODWORD(v7[0]))
    {
      *(_DWORD *)a3 = 182;
      *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
      v6 = 150;
    }
    else
    {
      sub_23411AD0C(a1, 3u, 4, (_DWORD *)(a2 + 8), v7);
      if (LODWORD(v7[0]))
      {
        *(_DWORD *)a3 = 182;
        *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
        v6 = 151;
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
        v6 = 152;
      }
    }
  }
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_23411D048(int *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AE68(a1, 4u, 8, a2, a3);
}

void sub_23411D058(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 *v6;
  int v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v11 = 0uLL;
  v12 = 0;
  v6 = (__int16 *)(a2 + 8);
  sub_23411B95C(a1, 1u, 4, (_WORD *)(a2 + 8), &v11);
  if ((_DWORD)v11 == 33)
  {
    LODWORD(v11) = 0;
    *((_QWORD *)&v11 + 1) = "src/app/MessageDef/EventPathIB.cpp";
    LODWORD(v12) = 169;
  }
  else
  {
    if ((_DWORD)v11)
    {
      v7 = 171;
      goto LABEL_23;
    }
    if (*v6 == -1)
    {
      v7 = 165;
LABEL_23:
      v8 = 1408;
      goto LABEL_24;
    }
  }
  sub_23411AD0C(a1, 2u, 4, (_DWORD *)a2, &v9);
  v11 = v9;
  v12 = v10;
  if ((_DWORD)v9 == 33)
  {
    LODWORD(v11) = 0;
    *((_QWORD *)&v11 + 1) = "src/app/MessageDef/EventPathIB.cpp";
    LODWORD(v12) = 180;
  }
  else
  {
    if ((_DWORD)v9)
    {
      v7 = 182;
      goto LABEL_23;
    }
    if (*(_DWORD *)a2 == -1)
    {
      v7 = 176;
      goto LABEL_23;
    }
  }
  sub_23411AD0C(a1, 3u, 4, (_DWORD *)(a2 + 4), &v9);
  v11 = v9;
  v12 = v10;
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 != 33)
    {
      v7 = 193;
      goto LABEL_23;
    }
    LODWORD(v11) = 0;
    *((_QWORD *)&v11 + 1) = "src/app/MessageDef/EventPathIB.cpp";
    LODWORD(v12) = 187;
  }
  else if (*(_DWORD *)(a2 + 4) == -1)
  {
    v7 = 191;
    goto LABEL_23;
  }
  sub_23411AE68(a1, 4u, 8, (char *)(a2 + 10), &v9);
  v11 = v9;
  v12 = v10;
  if ((_DWORD)v9 != 33 && (_DWORD)v9)
  {
    v7 = 200;
    goto LABEL_23;
  }
  v8 = 0;
  v7 = 201;
LABEL_24:
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/app/MessageDef/EventPathIB.cpp";
  *(_DWORD *)(a3 + 16) = v7;
}

uint64_t sub_23411D220(uint64_t a1, int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234106F04(*(char **)(a1 + 24), 4uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

__n128 sub_23411D274@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  v6 = *(unsigned __int16 *)(a2 + 8);
  if (v6 != 0xFFFF && !*(_DWORD *)a1)
  {
    sub_234107224(*(char **)(a1 + 24), 1uLL, v6, (uint64_t)&v9);
    *(_OWORD *)a1 = v9;
    *(_QWORD *)(a1 + 16) = v10;
  }
  if (*(_DWORD *)a2 != -1 && !*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 2uLL, *(_DWORD *)a2, (uint64_t)&v9);
    *(_OWORD *)a1 = v9;
    *(_QWORD *)(a1 + 16) = v10;
  }
  v7 = *(_DWORD *)(a2 + 4);
  if (v7 != -1 && !*(_DWORD *)a1)
  {
    sub_23410726C(*(char **)(a1 + 24), 3uLL, v7, (uint64_t)&v9);
    *(_OWORD *)a1 = v9;
    *(_QWORD *)(a1 + 16) = v10;
  }
  if (*(_BYTE *)(a2 + 10) && !*(_DWORD *)a1)
  {
    sub_234106F04(*(char **)(a1 + 24), 4uLL, 1, (uint64_t)&v9);
    *(_OWORD *)a1 = v9;
    *(_QWORD *)(a1 + 16) = v10;
  }
  sub_23411C060((char *)a1);
  result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

void sub_23411D394(char *a1@<X0>, unsigned __int16 *a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  sub_23411BFF8((uint64_t)&v14);
  sub_23411BFF8((uint64_t)&v17);
  sub_23411BFF8((uint64_t)&v19);
  sub_23411BFF8((uint64_t)&v20);
  sub_23411BFF8((uint64_t)&v21);
  sub_23411BFF8((uint64_t)&v22);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_23411E904((uint64_t)&v14, a1, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    if (!(_DWORD)v14)
    {
      sub_23411E8A0((uint64_t)&v17, v16, 0, (uint64_t)&v23);
      v14 = v23;
      v15 = v24;
    }
    *(_OWORD *)a4 = v14;
    a4[2] = v15;
    if (!*(_DWORD *)a4)
    {
      v8 = sub_23411BF50((uint64_t)&v17);
      *(_OWORD *)a4 = v17;
      a4[2] = v18;
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v9 = sub_23411C140(v8, *a2);
        v10 = sub_23411C194(v9, *((_DWORD *)a2 + 1));
        v11 = sub_23411B4DC(v10, *((_DWORD *)a2 + 2));
        sub_23411ACD8(v11, (uint64_t)a4);
        if (!*(_DWORD *)a4)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v12 = sub_23411BFA4((uint64_t)&v17);
          v13 = sub_23411E524(v12, a3);
          *(_OWORD *)a4 = *(_OWORD *)v13;
          a4[2] = *(_QWORD *)(v13 + 16);
          if (!*(_DWORD *)a4)
          {
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
            sub_23411ACD8((uint64_t)&v17, (uint64_t)a4);
            if (!*(_DWORD *)a4)
            {
              *a4 = 0;
              a4[1] = 0;
              a4[2] = 0;
              sub_23411C060((char *)&v14);
              *(_OWORD *)a4 = v14;
              a4[2] = v15;
              if (!*(_DWORD *)a4)
              {
                *a4 = 0;
                a4[1] = 0;
                a4[2] = 0;
                sub_234106D88((uint64_t)a1, (uint64_t)a4);
                if (!*(_DWORD *)a4)
                {
                  *(_DWORD *)a4 = 0;
                  a4[1] = "src/app/MessageDef/EventReportIB.cpp";
                  *((_DWORD *)a4 + 4) = 143;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_23411D570(int *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AE68(a1, 1u, 8, a2, a3);
}

void sub_23411D580(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 2, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411AB3C(a2, (uint64_t)v6, (uint64_t)a3);
}

void sub_23411D5F0(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23411E904(a1, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234106E50(*(_QWORD *)(a1 + 24), 4u, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(_BYTE *)(a1 + 168) = 1;
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/MessageDef/InvokeRequestMessage.cpp";
      *((_DWORD *)a3 + 4) = 121;
    }
  }
}

uint64_t sub_23411D664(uint64_t a1, int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234106F04(*(char **)(a1 + 24), 1uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411D6B8(uint64_t a1, int a2)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  if (!*(_DWORD *)a1)
  {
    v3 = a1 + 40;
    if (a2)
      sub_23411D81C(v3, *(char **)(a1 + 24), 2u, &v5);
    else
      sub_23411AA78(v3, *(char **)(a1 + 24), 2u, (uint64_t)&v5);
    *(_OWORD *)a1 = v5;
    *(_QWORD *)(a1 + 16) = v6;
  }
  return a1 + 40;
}

__n128 sub_23411D724@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  if (!*(_DWORD *)a2)
  {
    if (*(_BYTE *)(a1 + 168))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_WORD *)(v5 + 60) != 21169)
      {
        v7 = 175;
        v8 = 3;
        goto LABEL_7;
      }
      v6 = *(_DWORD *)(v5 + 52);
      if (v6 <= 3)
      {
        v7 = 176;
        v8 = 11;
LABEL_7:
        *(_DWORD *)a2 = v8;
        *(_QWORD *)(a2 + 8) = "src/lib/core/TLVWriter.h";
        *(_DWORD *)(a2 + 16) = v7;
        return result;
      }
      *(_DWORD *)(v5 + 52) = v6 - 4;
      *(_DWORD *)(v5 + 40) += 4;
      *(_BYTE *)(a1 + 168) = 0;
    }
    if (!*(_DWORD *)a1)
    {
      sub_23411DF74(a1, (uint64_t)&v9);
      *(_OWORD *)a1 = v9;
      *(_QWORD *)(a1 + 16) = v10;
      if (!*(_DWORD *)a1)
        sub_23411C060((char *)a1);
    }
    result = *(__n128 *)a1;
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  return result;
}

void sub_23411D81C(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_23411AA78(a1, a2, a3, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234106E50(*(_QWORD *)(a1 + 24), 1u, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *(_BYTE *)(a1 + 120) = 1;
      *(_DWORD *)a4 = 0;
      a4[1] = "src/app/MessageDef/InvokeRequests.cpp";
      *((_DWORD *)a4 + 4) = 78;
    }
  }
}

char *sub_23411D898@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = result;
  if (!result[120])
    goto LABEL_5;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *((_QWORD *)result + 3);
  if (*(_WORD *)(v4 + 60) == 21169)
  {
    v5 = *(_DWORD *)(v4 + 52);
    if (v5)
    {
      *(_DWORD *)(v4 + 52) = v5 - 1;
      ++*(_DWORD *)(v4 + 40);
      result[120] = 0;
LABEL_5:
      result = sub_23411C060(result);
      *(_OWORD *)a2 = *(_OWORD *)v2;
      a2[2] = *((_QWORD *)v2 + 2);
      return result;
    }
    v6 = 176;
    v7 = 11;
  }
  else
  {
    v6 = 175;
    v7 = 3;
  }
  *(_DWORD *)a2 = v7;
  a2[1] = "src/lib/core/TLVWriter.h";
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

uint64_t sub_23411D940(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411E8A0(a1 + 120, *(char **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 120;
}

void sub_23411D994(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_23411AA78(a1, a2, a3, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234106E50(*(_QWORD *)(a1 + 24), 1u, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *(_BYTE *)(a1 + 280) = 1;
      *(_DWORD *)a4 = 0;
      a4[1] = "src/app/MessageDef/InvokeResponseIBs.cpp";
      *((_DWORD *)a4 + 4) = 78;
    }
  }
}

char *sub_23411DA10@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = result;
  if (!result[280])
    goto LABEL_5;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *((_QWORD *)result + 3);
  if (*(_WORD *)(v4 + 60) == 21169)
  {
    v5 = *(_DWORD *)(v4 + 52);
    if (v5)
    {
      *(_DWORD *)(v4 + 52) = v5 - 1;
      ++*(_DWORD *)(v4 + 40);
      result[280] = 0;
LABEL_5:
      result = sub_23411C060(result);
      *(_OWORD *)a2 = *(_OWORD *)v2;
      a2[2] = *((_QWORD *)v2 + 2);
      return result;
    }
    v6 = 176;
    v7 = 11;
  }
  else
  {
    v6 = 175;
    v7 = 3;
  }
  *(_DWORD *)a2 = v7;
  a2[1] = "src/lib/core/TLVWriter.h";
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

void sub_23411DAB8(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 1, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411AB3C(a2, (uint64_t)v6, (uint64_t)a3);
}

void sub_23411DB28(int *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AE68(a1, 2u, 8, a2, a3);
}

void sub_23411DB38(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23411E904(a1, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234106E50(*(_QWORD *)(a1 + 24), 4u, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *(_BYTE *)(a1 + 328) = 1;
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/MessageDef/InvokeResponseMessage.cpp";
      *((_DWORD *)a3 + 4) = 120;
    }
  }
}

uint64_t sub_23411DBAC(uint64_t a1, int a2)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  if (!*(_DWORD *)a1)
  {
    v3 = a1 + 40;
    if (a2)
      sub_23411D994(v3, *(char **)(a1 + 24), 1u, &v5);
    else
      sub_23411AA78(v3, *(char **)(a1 + 24), 1u, (uint64_t)&v5);
    *(_OWORD *)a1 = v5;
    *(_QWORD *)(a1 + 16) = v6;
  }
  return a1 + 40;
}

uint64_t sub_23411DC18(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  int v8;
  __int128 v10;
  uint64_t v11;

  if (!*(_DWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 329))
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (*(_WORD *)(v3 + 60) != 21169)
      {
        v7 = 175;
        v8 = 3;
        goto LABEL_7;
      }
      v4 = *(_DWORD *)(v3 + 52);
      v5 = v4 >= 2;
      v6 = v4 - 2;
      if (!v5)
      {
        v7 = 176;
        v8 = 11;
LABEL_7:
        *(_DWORD *)a1 = v8;
        *(_QWORD *)(a1 + 8) = "src/lib/core/TLVWriter.h";
        *(_DWORD *)(a1 + 16) = v7;
        return a1;
      }
      *(_DWORD *)(v3 + 52) = v6;
      *(_DWORD *)(v3 + 40) += 2;
      *(_DWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = "src/lib/core/TLVWriter.h";
      *(_DWORD *)(a1 + 16) = 179;
      *(_BYTE *)(a1 + 329) = 0;
    }
    sub_234106F04(*(char **)(a1 + 24), 2uLL, a2, (uint64_t)&v10);
    *(_OWORD *)a1 = v10;
    *(_QWORD *)(a1 + 16) = v11;
  }
  return a1;
}

uint64_t sub_23411DCEC()
{
  return 2;
}

uint64_t sub_23411DCF4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_234106E50(*(_QWORD *)(a1 + 24), 2u, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *(_BYTE *)(a1 + 329) = 1;
    *(_DWORD *)a2 = 0;
    a2[1] = "src/app/MessageDef/InvokeResponseMessage.cpp";
    *((_DWORD *)a2 + 4) = 173;
  }
  return result;
}

__n128 sub_23411DD50@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  if (!*(_DWORD *)a2)
  {
    if (*(_BYTE *)(a1 + 328))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_WORD *)(v5 + 60) != 21169)
      {
        v7 = 175;
        v8 = 3;
        goto LABEL_7;
      }
      v6 = *(_DWORD *)(v5 + 52);
      if (v6 <= 3)
      {
        v7 = 176;
        v8 = 11;
LABEL_7:
        *(_DWORD *)a2 = v8;
        *(_QWORD *)(a2 + 8) = "src/lib/core/TLVWriter.h";
        *(_DWORD *)(a2 + 16) = v7;
        return result;
      }
      *(_DWORD *)(v5 + 52) = v6 - 4;
      *(_DWORD *)(v5 + 40) += 4;
      *(_BYTE *)(a1 + 328) = 0;
    }
    if (!*(_DWORD *)a1)
    {
      sub_23411DF74(a1, (uint64_t)&v9);
      *(_OWORD *)a1 = v9;
      *(_QWORD *)(a1 + 16) = v10;
      if (!*(_DWORD *)a1)
        sub_23411C060((char *)a1);
    }
    result = *(__n128 *)a1;
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  return result;
}

__n128 sub_23411DE48@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 24) = a2;
  sub_234107E40(a2, a3, 23, (_DWORD *)(a1 + 32), (uint64_t)&v8);
  *(_OWORD *)a1 = v8;
  v6 = v9;
  *(_QWORD *)(a1 + 16) = v9;
  result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = v6;
  return result;
}

__n128 sub_23411DEAC@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 24) = a2;
  sub_234107E40(a2, 0x100uLL, 23, (_DWORD *)(a1 + 32), (uint64_t)&v7);
  *(_OWORD *)a1 = v7;
  v5 = v8;
  *(_QWORD *)(a1 + 16) = v8;
  result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_23411DF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  sub_2341045C8(a1, a2);
  result = sub_23410462C(a1);
  if ((_DWORD)result == 23)
    return sub_23410570C(a1, (_DWORD *)(a1 + 72), a3);
  *(_DWORD *)a3 = 38;
  *(_QWORD *)(a3 + 8) = "src/app/MessageDef/ListParser.cpp";
  *(_DWORD *)(a3 + 16) = 26;
  return result;
}

char *sub_23411DF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2341071D8(*(char **)(a1 + 24), 0xFFuLL, 0xBu, a2);
}

void sub_23411DF84(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234106010(a2, 21, 256, a3);
  if (!*(_DWORD *)a3)
    sub_23411E964(a1, a2, a3);
}

void sub_23411DFEC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  _QWORD v6[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_23410577C(a1, *(_DWORD *)(a1 + 72), (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    sub_2341058CC(a1, v6);
    if (LODWORD(v6[0]) == 33)
      v4 = 0;
    else
      v4 = 36;
    if (LODWORD(v6[0]) == 33)
      v5 = 36;
    else
      v5 = 35;
    *(_DWORD *)a2 = v4;
    a2[1] = "src/app/MessageDef/MessageParser.cpp";
    *((_DWORD *)a2 + 4) = v5;
  }
}

void sub_23411E064(int *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411CDA8(a1, 0xFFu, 4, a2, a3);
}

void sub_23411E074(uint64_t a1)
{
  uint64_t v1;

  sub_234104468(a1);
  *(_DWORD *)(v1 + 72) = -1;
}

uint64_t sub_23411E090(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = sub_2341045C8(a1, a2);
  *(_DWORD *)(a1 + 72) = a3;
  return result;
}

uint64_t sub_23411E0BC(uint64_t a1, uint64_t a2)
{
  return sub_2341045C8(a2, a1);
}

void sub_23411E0CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_2341058CC(a1, a2);
}

void sub_23411E0D8(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 0, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411AB3C(a2, (uint64_t)v6, (uint64_t)a3);
}

void sub_23411E148(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 4, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411AB3C(a2, (uint64_t)v6, (uint64_t)a3);
}

void sub_23411E1B8(int *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AE68(a1, 3u, 8, a2, a3);
}

uint64_t sub_23411E1C8(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 40, *(char **)(a1 + 24), 0, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_23411E21C(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 120, *(char **)(a1 + 24), 4u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 120;
}

uint64_t sub_23411E270(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 240, *(char **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 240;
}

uint64_t sub_23411E2C4(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 320, *(char **)(a1 + 24), 2u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 320;
}

uint64_t sub_23411E318(uint64_t a1, int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234106F04(*(char **)(a1 + 24), 3uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

__n128 sub_23411E36C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v5;
  uint64_t v6;

  if (!*(_DWORD *)a1)
  {
    sub_23411DF74(a1, (uint64_t)&v5);
    *(_OWORD *)a1 = v5;
    *(_QWORD *)(a1 + 16) = v6;
    if (!*(_DWORD *)a1)
      sub_23411C060((char *)a1);
  }
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_23411E3D8(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 40, *(char **)(a1 + 24), 1u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

void sub_23411E42C(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD v6[3];
  _BYTE v7[16];
  unint64_t v8;

  sub_234104468((uint64_t)v7);
  sub_2341045C8((uint64_t)v7, a1);
  sub_2341058CC((uint64_t)v7, v6);
  while (!LODWORD(v6[0]))
  {
    if (v8 <= 0xFF)
    {
      if ((_DWORD)v8 == 1)
      {
        LOBYTE(v6[0]) = 0;
        a3[1] = 0;
        a3[2] = 0;
        *a3 = 0;
        sub_23410492C((uint64_t)v7, v6, (uint64_t)a3);
        if (*(_DWORD *)a3)
          return;
        a2[1] = 1;
        a2[2] = v6[0];
      }
      else if (!(_DWORD)v8)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_234104004((uint64_t)v7, a2, a3);
        if (*(_DWORD *)a3)
          return;
      }
    }
    sub_2341058CC((uint64_t)v7, v6);
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "src/app/MessageDef/StatusIB.cpp";
  *((_DWORD *)a3 + 4) = 63;
}

uint64_t sub_23411E524(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *v4;
  int v5;
  char *v6;
  _BYTE *v7;
  __int128 v9;
  uint64_t v10;

  sub_2341071D8(*(char **)(a1 + 24), 0, *a2, (uint64_t)&v9);
  *(_OWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v10;
  if (!*(_DWORD *)a1)
  {
    v5 = a2[1];
    v4 = a2 + 1;
    if (!v5
      || (v6 = *(char **)(a1 + 24),
          v7 = sub_233C27DCC(v4),
          sub_2341071D8(v6, 1uLL, *v7, (uint64_t)&v9),
          *(_OWORD *)a1 = v9,
          *(_QWORD *)(a1 + 16) = v10,
          !*(_DWORD *)a1))
    {
      sub_23411C060((char *)a1);
    }
  }
  return a1;
}

unsigned __int8 *sub_23411E5CC@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  int v5;
  const char *v6;

  v3 = *result;
  if (*result)
  {
    v5 = *++result;
    v4 = v5;
    if (v5)
    {
      result = sub_233C27DCC(result);
      v6 = 0;
      v4 = 0;
      v3 = *result | 0x600;
    }
    else
    {
      v6 = 0;
      v3 |= 0x500u;
    }
  }
  else
  {
    v4 = 141;
    v6 = "src/app/MessageDef/StatusIB.cpp";
  }
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

_BYTE *sub_23411E638(_BYTE *result, int *a2)
{
  int v2;
  int v3;

  if ((*a2 & 0xFF000700) == 0x600)
  {
    *result = 1;
    v2 = *a2;
    result[1] = 1;
    result[2] = v2;
  }
  else
  {
    result[1] = 0;
    v3 = *a2;
    if (*a2)
    {
      if ((v3 & 0xFF000700) == 0x500)
        *result = v3;
      else
        *result = 1;
    }
    else
    {
      *result = 0;
    }
  }
  return result;
}

_QWORD *sub_23411E69C()
{
  return sub_234108530(off_256157A28);
}

BOOL sub_23411E6A8(char *a1, size_t a2, int *a3)
{
  int v6;
  unsigned int v7;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  char __str[52];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v7 = *a3 & 0xFF000700;
  if (v7 == 1536 || v7 == 1280)
  {
    if (v7 == 1536)
    {
      v12 = 257;
      v13 = v6;
      sub_233CB65A8((_BYTE *)&v12 + 1);
      snprintf(__str, 0x34uLL, "Cluster-specific error: 0x%02x");
    }
    else
    {
      v12 = v6;
      sub_23411EEB4(v6);
      snprintf(__str, 0x34uLL, "General error: 0x%02x (%s)");
    }
    v10 = *(_OWORD *)a3;
    v11 = *((_QWORD *)a3 + 2);
    sub_2341084C8(a1, a2, "IM", &v10, __str);
  }
  return v7 == 1280 || v7 == 1536;
}

void sub_23411E7D0(int *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  __int16 v4;

  v4 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_23411B95C(a1, 0, 4, &v4, a3);
  *a2 = v4;
}

uint64_t sub_23411E818(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_2341071D8(*(char **)(a1 + 24), 0, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
    if (!*(_DWORD *)a1)
    {
      sub_23411DF74(a1, (uint64_t)&v4);
      *(_OWORD *)a1 = v4;
      *(_QWORD *)(a1 + 16) = v5;
      if (!*(_DWORD *)a1)
        sub_23411C060((char *)a1);
    }
  }
  return a1;
}

__n128 sub_23411E8A0@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 24) = a2;
  sub_234107E40(a2, a3, 21, (_DWORD *)(a1 + 32), (uint64_t)&v8);
  *(_OWORD *)a1 = v8;
  v6 = v9;
  *(_QWORD *)(a1 + 16) = v9;
  result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = v6;
  return result;
}

__n128 sub_23411E904@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 24) = a2;
  sub_234107E40(a2, 0x100uLL, 21, (_DWORD *)(a1 + 32), (uint64_t)&v7);
  *(_OWORD *)a1 = v7;
  v5 = v8;
  *(_QWORD *)(a1 + 16) = v8;
  result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = v5;
  return result;
}

void sub_23411E964(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_2341045C8(a1, a2);
  if (sub_23410462C(a1) == 21)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_23410570C(a1, (_DWORD *)(a1 + 72), (uint64_t)a3);
    if (!*(_DWORD *)a3)
      sub_23411E9E8(a1, (uint64_t)a3);
  }
  else
  {
    *(_DWORD *)a3 = 38;
    a3[1] = "src/app/MessageDef/StructParser.cpp";
    *((_DWORD *)a3 + 4) = 24;
  }
}

void sub_23411E9E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  char v5;
  int v6;
  char v7;
  int v8;
  const char *v9;
  int v10;
  int v11;
  BOOL v12;
  _QWORD v13[2];
  int v14;
  int v15;
  _BYTE v16[16];
  unint64_t v17;

  sub_234104468((uint64_t)v16);
  sub_2341045C8((uint64_t)v16, a1);
  v4 = 0;
  v5 = 1;
  while (1)
  {
    sub_2341058CC((uint64_t)v16, v13);
    v6 = v13[0];
    if (LODWORD(v13[0]))
      break;
    if (v17 <= 0xFF)
    {
      v7 = v5 | (v4 < v17);
      v4 = v17;
      v5 = 0;
      if ((v7 & 1) == 0)
      {
        *(_DWORD *)a2 = 36;
        *(_QWORD *)(a2 + 8) = "src/app/MessageDef/StructParser.cpp";
        *(_DWORD *)(a2 + 16) = 50;
        return;
      }
    }
  }
  v8 = HIDWORD(v13[0]);
  v9 = (const char *)v13[1];
  v10 = v14;
  v11 = v15;
  v12 = LODWORD(v13[0]) == 33;
  if (LODWORD(v13[0]) == 33)
  {
    v6 = 0;
    v9 = "src/app/MessageDef/StructParser.cpp";
    v10 = 56;
  }
  *(_DWORD *)a2 = v6;
  *(_DWORD *)(a2 + 4) = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 20) = v11;
  if (v12)
    sub_23410577C((uint64_t)v16, *(_DWORD *)(a1 + 72), a2);
}

void sub_23411EAD4(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 3, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411AB3C(a2, (uint64_t)v6, (uint64_t)a3);
}

void sub_23411EB44(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 8, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411AB3C(a2, (uint64_t)v6, (uint64_t)a3);
}

void sub_23411EBB4(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v6[72];

  sub_234104468((uint64_t)v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341063A4(a1, 5, (uint64_t)v6, a3);
  if (!*(_DWORD *)a3)
    sub_23411AB3C(a2, (uint64_t)v6, (uint64_t)a3);
}

void sub_23411EC24(int *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23411AE68(a1, 7u, 8, a2, a3);
}

uint64_t sub_23411EC34(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 40, *(char **)(a1 + 24), 3u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

uint64_t sub_23411EC88(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 120, *(char **)(a1 + 24), 8u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 120;
}

uint64_t sub_23411ECDC(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 240, *(char **)(a1 + 24), 4u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 240;
}

uint64_t sub_23411ED30(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 320, *(char **)(a1 + 24), 5u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 320;
}

uint64_t sub_23411ED84(uint64_t a1, int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234106F04(*(char **)(a1 + 24), 7uLL, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_23411EDD8(uint64_t a1, unsigned int a2)
{
  __int128 v4;
  uint64_t v5;

  if (!*(_DWORD *)a1)
  {
    sub_234107224(*(char **)(a1 + 24), 0, a2, (uint64_t)&v4);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
    if (!*(_DWORD *)a1)
    {
      sub_23411DF74(a1, (uint64_t)&v4);
      *(_OWORD *)a1 = v4;
      *(_QWORD *)(a1 + 16) = v5;
      if (!*(_DWORD *)a1)
        sub_23411C060((char *)a1);
    }
  }
  return a1;
}

uint64_t sub_23411EE60(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  if (!*(_DWORD *)a1)
  {
    sub_23411AA78(a1 + 40, *(char **)(a1 + 24), 2u, (uint64_t)&v3);
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1 + 40;
}

const char *sub_23411EEB4(int a1)
{
  const char *result;

  if (a1 <= 124)
  {
    if (a1)
    {
      if (a1 == 1)
        return "FAILURE";
      else
        return "Unallocated";
    }
    else
    {
      return "SUCCESS";
    }
  }
  else
  {
    switch(a1)
    {
      case 125:
        result = "INVALID_SUBSCRIPTION";
        break;
      case 126:
        result = "UNSUPPORTED_ACCESS";
        break;
      case 127:
        result = "UNSUPPORTED_ENDPOINT";
        break;
      case 128:
        result = "INVALID_ACTION";
        break;
      case 129:
        result = "UNSUPPORTED_COMMAND";
        break;
      case 130:
        result = "Deprecated82";
        break;
      case 131:
        result = "Deprecated83";
        break;
      case 132:
        result = "Deprecated84";
        break;
      case 133:
        result = "INVALID_COMMAND";
        break;
      case 134:
        result = "UNSUPPORTED_ATTRIBUTE";
        break;
      case 135:
        result = "CONSTRAINT_ERROR";
        break;
      case 136:
        result = "UNSUPPORTED_WRITE";
        break;
      case 137:
        result = "RESOURCE_EXHAUSTED";
        break;
      case 138:
        result = "Deprecated8a";
        break;
      case 139:
        result = "NOT_FOUND";
        break;
      case 140:
        result = "UNREPORTABLE_ATTRIBUTE";
        break;
      case 141:
        result = "INVALID_DATA_TYPE";
        break;
      case 142:
        result = "Deprecated8e";
        break;
      case 143:
        result = "UNSUPPORTED_READ";
        break;
      case 144:
        result = "Deprecated90";
        break;
      case 145:
        result = "Deprecated91";
        break;
      case 146:
        result = "DATA_VERSION_MISMATCH";
        break;
      case 147:
        result = "Deprecated93";
        break;
      case 148:
        result = "TIMEOUT";
        break;
      case 149:
        result = "Reserved95";
        break;
      case 150:
        result = "Reserved96";
        break;
      case 151:
        result = "Reserved97";
        break;
      case 152:
        result = "Reserved98";
        break;
      case 153:
        result = "Reserved99";
        break;
      case 154:
        result = "Reserved9a";
        break;
      case 155:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
        return "Unallocated";
      case 156:
        result = "BUSY";
        break;
      case 192:
        result = "Deprecatedc0";
        break;
      case 193:
        result = "Deprecatedc1";
        break;
      case 194:
        result = "Deprecatedc2";
        break;
      case 195:
        result = "UNSUPPORTED_CLUSTER";
        break;
      case 196:
        result = "Deprecatedc4";
        break;
      case 197:
        result = "NO_UPSTREAM_SUBSCRIPTION";
        break;
      case 198:
        result = "NEEDS_TIMED_INTERACTION";
        break;
      case 199:
        result = "UNSUPPORTED_EVENT";
        break;
      case 200:
        result = "PATHS_EXHAUSTED";
        break;
      case 201:
        result = "TIMED_REQUEST_MISMATCH";
        break;
      case 202:
        result = "FAILSAFE_REQUIRED";
        break;
      case 203:
        result = "INVALID_IN_STATE";
        break;
      case 204:
        result = "NO_COMMAND_RESPONSE";
        break;
      default:
        if (a1 != 240)
          return "Unallocated";
        result = "WRITE_IGNORED";
        break;
    }
  }
  return result;
}

void sub_23411F134(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  int v14;
  char *v15;
  __int128 v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 8) != 16)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    v14 = 35;
    goto LABEL_11;
  }
  if (*(_QWORD *)(a2 + 8) != 32)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    v14 = 36;
    goto LABEL_11;
  }
  if (*(_QWORD *)(a3 + 8) != 65)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    v14 = 37;
    goto LABEL_11;
  }
  if (*(_QWORD *)(a6 + 8) <= 0x1FuLL)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    v14 = 38;
    goto LABEL_11;
  }
  v15 = &v17;
  v16 = xmmword_2342D96D0;
  sub_2341150D8(&v15, *(const void **)a2, 0x20uLL);
  sub_2341150D8(&v15, *(const void **)a3, *(_QWORD *)(a3 + 8));
  sub_234115150(&v15, a4, 8);
  sub_234115150(&v15, a5, 8);
  v13 = *((_QWORD *)&v16 + 1);
  if ((unint64_t)v16 < *((_QWORD *)&v16 + 1))
  {
    *(_DWORD *)a7 = 25;
    *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASEDestinationId.cpp";
    v14 = 51;
LABEL_11:
    *(_DWORD *)(a7 + 16) = v14;
    return;
  }
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  sub_234139894(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v15, v13, *(_QWORD *)a6, *(_QWORD *)(a6 + 8), a7);
  if (!*(_DWORD *)a7)
    sub_233BF7588(a6, 0x20uLL);
}

_QWORD *sub_23411F308@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;

  if (!a2)
  {
    v12 = 39;
LABEL_12:
    v11 = 47;
    goto LABEL_13;
  }
  if (!a3)
  {
    v12 = 40;
    goto LABEL_12;
  }
  if (!a7)
  {
    v12 = 41;
    goto LABEL_12;
  }
  v9 = (uint64_t)result;
  result[100] = a3;
  result[4] = a5;
  result[5] = a6;
  result[101] = a4;
  result[3] = a2;
  result[102] = a7;
  result[72] = a7;
  v10 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "CASE Server enabling CASE session setups", (uint8_t *)&v13, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(1u, 2);
  sub_2341AEA90(*(int **)(v9 + 24), 0, 0x30u, v9 + 8, (uint64_t)&v13);
  v13 = 0;
  v14 = 0;
  result = (_QWORD *)sub_23411F428(v9, &v13);
  v11 = 0;
  v12 = 58;
LABEL_13:
  *(_DWORD *)a8 = v11;
  *(_QWORD *)(a8 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
  *(_DWORD *)(a8 + 16) = v12;
  return result;
}

uint64_t sub_23411F428(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  v4 = a1 + 64;
  sub_2341205EC(a1 + 64);
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
  *(_BYTE *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 800);
  v6 = *(_QWORD *)(a1 + 808);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  sub_2341B1BB8((uint64_t)v11);
  sub_234121100(v4, v5, v6, v7, v8, a1, a2, v11, &v12);
  if ((_DWORD)v12)
    sub_23425A088(v9);
  sub_23411FDB4(a1 + 96, (uint64_t)&v12);
  result = sub_23411FE34(a1 + 48, (unsigned __int8 *)&v12);
  if ((_BYTE)v12)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  if (!*(_BYTE *)(a1 + 48))
    sub_234259FF4(result);
  return result;
}

void sub_23411F518(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    v10 = 136315394;
    v11 = "CASEServer";
    v12 = 2080;
    v13 = "InitCASEHandshake";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
  if (a2)
  {
    v7 = 0;
    *(_QWORD *)(a2 + 40) = a1 + 72;
    v8 = 69;
  }
  else
  {
    v8 = 64;
    v7 = 47;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  v9 = sub_2341C4608();
  if (os_signpost_enabled(v9))
  {
    v10 = 136315394;
    v11 = "CASEServer";
    v12 = 2080;
    v13 = "InitCASEHandshake";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
}

uint64_t sub_23411F690@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 16;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
  *(_DWORD *)(a3 + 16) = 76;
  return result;
}

uint64_t sub_23411F6B4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
  *(_DWORD *)(a3 + 16) = 76;
  return result;
}

void sub_23411F6D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  NSObject *v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  unsigned int v14;
  unsigned __int16 v15;
  NSObject *v16;
  char *v17;
  NSObject *v18;
  _BYTE buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*(_BYTE *)(a1 + 792) && (sub_234129F5C(a1 + 64) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 792) == 2)
    {
      v14 = sub_234129F50(a1 + 208);
      if (v14 >= 0xFFFF)
        v15 = -1;
      else
        v15 = v14;
    }
    else
    {
      v15 = 5000;
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_23411FAE4(a2, v15, (uint64_t)a5);
    if (*(_DWORD *)a5)
    {
      v16 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = *(_OWORD *)a5;
        *(_QWORD *)&buf[16] = a5[2];
        v17 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Failed to send the busy status report, err:%s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = *(_OWORD *)a5;
        *(_QWORD *)&buf[16] = a5[2];
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(1u, 1);
      }
    }
  }
  else
  {
    sub_233CB4208(a2, buf);
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 16))(*(_QWORD *)buf);
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
    v12 = sub_234117B80(1u, "Inet");
    v13 = v12;
    if (v11 == 1)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = ". Starting handshake.";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a2;
        _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_DEFAULT, "CASE Server received Sigma1 message %s EC %p", buf, 0x16u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(1u, 2);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_23411F518(a1, a2, (uint64_t)a5);
      if (!*(_DWORD *)a5)
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 64) + 80))(a1 + 64, a2, a3, a4);
    }
    else
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "over encrypted session. Ignoring.";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a2;
        _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "CASE Server received Sigma1 message %s EC %p", buf, 0x16u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(1u, 1);
      *(_DWORD *)a5 = 3;
      a5[1] = "src/protocols/secure_channel/CASEServer.cpp";
      *((_DWORD *)a5 + 4) = 133;
    }
  }
  v18 = sub_2341C4608();
  if (os_signpost_enabled(v18))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v18, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23411FAE4(uint64_t a1@<X1>, unsigned __int16 a2@<W2>, uint64_t a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t buf[4];
  _BYTE v14[10];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v14 = "CASEServer";
    *(_WORD *)&v14[8] = 2080;
    v15 = "SendBusyStatusReport";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v7 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Already in the middle of CASE handshake, sending busy status report", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(1u, 2);
  sub_2341ACB44(a2, &v12);
  if (v12)
  {
    v8 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(unsigned __int16 *)(a1 + 112);
      if (sub_2341AD080(a1))
        v10 = 105;
      else
        v10 = 114;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v14 = v9;
      *(_WORD *)&v14[4] = 1024;
      *(_DWORD *)&v14[6] = v10;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Sending status report, exchange %u%c", buf, 0xEu);
    }
    if (sub_234114844(2u))
    {
      sub_2341AD080(a1);
      sub_2341147D0(1u, 2);
    }
    *(_WORD *)buf = 0;
    sub_2341AD108(a1, 0, 64, &v12, buf, a3);
    if (v12)
      sub_23411814C(v12);
  }
  else
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASEServer.cpp";
    *(_DWORD *)(a3 + 16) = 230;
  }
  v11 = sub_2341C4608();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v14 = "CASEServer";
    *(_WORD *)&v14[8] = 2080;
    v15 = "SendBusyStatusReport";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23411FDAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  sub_23411F6D8(a1 - 16, a2, a3, a4, a5);
}

uint64_t sub_23411FDB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = (_BYTE *)(result + 40);
  if (*(_BYTE *)(result + 40))
  {
    v4 = sub_233C25EA4((_BYTE *)(result + 40));
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4);
    if ((_DWORD)v5 != 2)
      sub_23425A11C(v5);
    v6 = (uint64_t *)sub_233C25EA4(v3);
    v7 = sub_2341CD3C0(*v6);
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v7;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return result;
}

uint64_t sub_23411FE34(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;

  if (*(_BYTE *)a1)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  v4 = *a2;
  *(_BYTE *)a1 = v4;
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    (*(void (**)(_QWORD))(**((_QWORD **)a2 + 1) + 32))(*((_QWORD *)a2 + 1));
    *a2 = 0;
  }
  return a1;
}

void sub_23411FEA4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _BYTE buf[24];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnSessionEstablishmentError";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_QWORD *)&buf[16] = *(_QWORD *)(a2 + 16);
    v6 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "CASE Session establishment failed: %s", buf, 0xCu);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_QWORD *)&buf[16] = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(1u, 1);
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "CASEFail";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_QWORD *)buf = 0;
  buf[8] = 0;
  sub_23411F428(a1, (uint64_t *)buf);
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "CASEFail";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v9 = sub_2341C4608();
  if (os_signpost_enabled(v9))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnSessionEstablishmentError";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234120178(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  unint64_t v6;
  int v7;
  unsigned __int8 v8;
  uint64_t v9;
  NSObject *v10;
  _BYTE buf[22];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnSessionEstablished";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (unint64_t)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2) >> 32;
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v7;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v8;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "CASE Session established to peer: <%08X%08X, %d>", buf, 0x14u);
  }
  if (sub_234114844(2u))
  {
    (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
    sub_2341147D0(1u, 2);
  }
  *(_QWORD *)buf = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  *(_QWORD *)&buf[8] = v9;
  sub_23411F428(a1, (uint64_t *)buf);
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASEServer";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnSessionEstablished";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_2341203E0(uint64_t (***a1)(_QWORD, __int128 *), __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (**a1)(a1, &v3);
}

void sub_23412041C(uint64_t a1)
{
  sub_2341204B8(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_234120440(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 96))(a1 + 64);
}

uint64_t sub_23412044C(uint64_t a1)
{
  return sub_2341204B8(a1 - 8);
}

void sub_234120454(uint64_t a1)
{
  sub_2341204B8(a1 - 8);
  JUMPOUT(0x23493E704);
}

uint64_t sub_23412047C(uint64_t a1)
{
  return sub_2341204B8(a1 - 16);
}

void sub_234120484(uint64_t a1)
{
  sub_2341204B8(a1 - 16);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341204AC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 96))(a1 + 48);
}

uint64_t sub_2341204B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_250504468;
  *(_QWORD *)(a1 + 8) = &unk_2505044D0;
  *(_QWORD *)(a1 + 16) = &unk_250504508;
  sub_234120514(a1);
  sub_234120820(a1 + 64);
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
  return a1;
}

void sub_234120514(uint64_t a1)
{
  int *v2;
  _BYTE v3[24];

  v2 = *(int **)(a1 + 24);
  if (v2)
  {
    sub_2341AEB50(v2, 0, 0x30u, (uint64_t)v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  sub_2341205EC(a1 + 64);
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
  *(_BYTE *)(a1 + 48) = 0;
}

_QWORD *sub_234120578(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2505045B0;
  a1[1] = &unk_250504650;
  a1[2] = &unk_250504690;
  a1[4] = &unk_2505046D0;
  v2 = (uint64_t)(a1 + 4);
  sub_2341205EC((uint64_t)a1);
  sub_233CF2D00((uint64_t)(a1 + 89));
  sub_233CF2D00((uint64_t)(a1 + 87));
  sub_23413A7A4(a1 + 54, 32);
  sub_2341394AC(a1 + 28);
  sub_2341207D0(v2);
  return a1;
}

void sub_2341205EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = sub_2341C4608();
  if (os_signpost_enabled(v2))
  {
    v8 = 136315394;
    v9 = "CASESession";
    v10 = 2080;
    v11 = "Clear";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v8, 0x16u);
  }
  v3 = *(_QWORD *)(a1 + 696);
  if (v3)
  {
    atomic_store(0, (unint64_t *)(v3 + 32));
    sub_234120924((_QWORD *)(a1 + 696));
  }
  v4 = *(_QWORD *)(a1 + 712);
  if (v4)
  {
    atomic_store(0, (unint64_t *)(v4 + 32));
    sub_234120924((_QWORD *)(a1 + 712));
  }
  sub_2341394D4((void *)(a1 + 224));
  sub_2341312B4(a1 + 32);
  *(_BYTE *)(a1 + 728) = 0;
  sub_23413A7A4(a1 + 552, 16);
  v5 = *(_QWORD *)(a1 + 584);
  if (v5)
  {
    sub_2341E6924(v5, a1 + 16);
    sub_2341E6DFC(*(_QWORD *)(a1 + 584), *(void (****)(_QWORD))(a1 + 424));
    *(_QWORD *)(a1 + 424) = 0;
  }
  *(_QWORD *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  v6 = *(_QWORD *)(a1 + 216);
  if (v6 && *(_DWORD *)(v6 + 40) != 4)
  {
    sub_2341D1AF8(*(_QWORD *)(a1 + 576), v6);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    v8 = 136315394;
    v9 = "CASESession";
    v10 = 2080;
    v11 = "Clear";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v8, 0x16u);
  }
}

uint64_t sub_2341207D0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_250504C30;
  sub_2341312B4(a1);
  if (*(_BYTE *)(a1 + 72))
    sub_23412A174((int *)(*(_QWORD *)(a1 + 80) + 28));
  sub_2341CD6AC(a1 + 16);
  return a1;
}

_QWORD *sub_234120824(uint64_t a1)
{
  return sub_234120578((_QWORD *)(a1 - 8));
}

_QWORD *sub_23412082C(uint64_t a1)
{
  return sub_234120578((_QWORD *)(a1 - 16));
}

_QWORD *sub_234120834(uint64_t a1)
{
  return sub_234120578((_QWORD *)(a1 - 32));
}

void sub_23412083C(_QWORD *a1)
{
  sub_234120578(a1);
  JUMPOUT(0x23493E704);
}

void sub_234120860(uint64_t a1)
{
  sub_234120578((_QWORD *)(a1 - 8));
  JUMPOUT(0x23493E704);
}

void sub_234120888(uint64_t a1)
{
  sub_234120578((_QWORD *)(a1 - 16));
  JUMPOUT(0x23493E704);
}

void sub_2341208B0(uint64_t a1)
{
  sub_234120578((_QWORD *)(a1 - 32));
  JUMPOUT(0x23493E704);
}

void sub_2341208D8(uint64_t a1)
{
  sub_234131314((_QWORD *)(a1 + 32));
  sub_2341205EC(a1);
}

void sub_234120900(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)(a1 - 4);
  sub_234131314(a1);
  sub_2341205EC(v1);
}

void sub_234120924(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_234120980(uint64_t a1, int a2)
{
  int v3;
  const char *v4;
  int v5;

  if (*(unsigned __int8 *)(a1 + 592) == a2 && sub_23413127C(a1 + 32))
  {
    v3 = 116;
    v4 = "src/protocols/secure_channel/CASESession.cpp";
    v5 = 451;
    sub_2341209E4(a1, (uint64_t)&v3);
  }
}

void sub_2341209E4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  uint64_t v7;
  uint8_t buf[4];
  _BYTE v9[18];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)buf = 1;
  *(_QWORD *)&v9[4] = "core_dev_case_session";
  *(_DWORD *)&v9[12] = *(_DWORD *)a2;
  v9[16] = 3;
  sub_2341C4BEC((uint64_t)buf);
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v9 = "CASESession";
    *(_WORD *)&v9[8] = 2080;
    *(_QWORD *)&v9[10] = "AbortPendingEstablish";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_2341205EC(a1);
  v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  sub_234130CB0(a1 + 32, &v6);
  v5 = sub_2341C4608();
  if (os_signpost_enabled(v5))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v9 = "CASESession";
    *(_WORD *)&v9[8] = 2080;
    *(_QWORD *)&v9[10] = "AbortPendingEstablish";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v5, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234120B90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  NSObject *v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    v16 = 136315394;
    v17 = "CASESession";
    v18 = 2080;
    v19 = "Init";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v16, 0x16u);
  }
  if (!a4)
  {
    v14 = 458;
LABEL_12:
    v13 = 47;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 512))
  {
    v14 = 459;
    goto LABEL_12;
  }
  if (!*(_QWORD *)(a2 + 40))
  {
    v14 = 460;
    goto LABEL_12;
  }
  sub_2341205EC(a1);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  sub_2341394DC(a1 + 224, (uint64_t)a6);
  if (*(_DWORD *)a6)
    goto LABEL_14;
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 576) = a2;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  sub_234130604((_QWORD *)(a1 + 32), a2, a5, (uint64_t)a6);
  if (*(_DWORD *)a6)
    goto LABEL_14;
  sub_2341D6834(a1 + 472);
  v13 = 0;
  *(_WORD *)(a1 + 496) |= 1u;
  *(_BYTE *)(a1 + 498) |= 1u;
  *(_QWORD *)(a1 + 504) = a3;
  *(_QWORD *)(a1 + 184) = a1;
  *(_QWORD *)(a1 + 200) = sub_234120DC0;
  *(_QWORD *)(a1 + 208) = sub_23412105C;
  v14 = 481;
LABEL_13:
  *(_DWORD *)a6 = v13;
  a6[1] = "src/protocols/secure_channel/CASESession.cpp";
  *((_DWORD *)a6 + 4) = v14;
LABEL_14:
  v15 = sub_2341C4608();
  if (os_signpost_enabled(v15))
  {
    v16 = 136315394;
    v17 = "CASESession";
    v18 = 2080;
    v19 = "Init";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v15, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v16, 0x16u);
  }
}

void sub_234120DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t *v6;
  char v7;
  uint64_t *v8;
  NSObject *v9;
  char *v10;
  char __str[76];
  _BYTE buf[24];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (!*(_QWORD *)(a1 + 48))
      sub_23425A1B0(a1);
    sub_23412A258(a1 + 8, __str, 0x4CuLL);
    v4 = **(_QWORD **)(a1 + 48);
    if (v4)
    {
      if (*(_DWORD *)a2)
        goto LABEL_14;
      v5 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = __str;
        _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_INFO, "TCP Connection established with %s before session establishment", buf, 0xCu);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0xBu, 3);
      v6 = (uint64_t *)sub_234121AD0((_BYTE *)(v4 + 104));
      sub_233CB4208(*v6, buf);
      *(_QWORD *)(sub_2341CD430(*(uint64_t *)buf) + 32) = a1;
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
      v7 = *(_BYTE *)(v4 + 72);
      if (v7)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)sub_233C25EA4((_BYTE *)(v4 + 72));
        (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 24))(*(_QWORD *)&buf[8]);
        v7 = 1;
      }
      buf[0] = v7;
      v8 = (uint64_t *)sub_233C25EA4(buf);
      *(_QWORD *)(sub_2341CD3C0(*v8) + 32) = a1;
      if (buf[0])
        (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 32))(*(_QWORD *)&buf[8]);
      sub_234121AF0((_QWORD **)v4, (uint64_t)buf);
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
      if (*(_DWORD *)a2)
      {
LABEL_14:
        v9 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)buf = *(_OWORD *)a2;
          *(_QWORD *)&buf[16] = *(_QWORD *)(a2 + 16);
          v10 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = __str;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v10;
          _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Connection establishment failed with peer at %s: %s", buf, 0x16u);
        }
        if (sub_234114844(1u))
        {
          *(_OWORD *)buf = *(_OWORD *)a2;
          *(_QWORD *)&buf[16] = *(_QWORD *)(a2 + 16);
          sub_2341083CC((const char **)buf, 1);
          sub_2341147D0(0xBu, 1);
        }
        sub_2341D1AF8(*(_QWORD *)(v4 + 576), a1);
        *(_QWORD *)(v4 + 216) = 0;
        sub_2341205EC(v4);
      }
    }
  }
}

uint64_t sub_23412105C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (result)
  {
    v1 = *(uint64_t **)(result + 48);
    if (!v1)
      sub_23425A244(result);
    v2 = *v1;
    if (v2)
    {
      *(_QWORD *)(v2 + 216) = 0;
      v3 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v4 = 0;
        _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "TCP Connection for this session has closed", v4, 2u);
      }
      result = sub_234114844(3u);
      if ((_DWORD)result)
        return sub_2341147D0(0xBu, 3);
    }
  }
  return result;
}

void sub_234121100(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, _BYTE *a8@<X7>, _QWORD *a9@<X8>)
{
  NSObject *v18;
  int v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  NSObject *v29;
  uint8_t v30[4];
  uint64_t v31;
  _BYTE buf[24];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v18 = sub_2341C4608();
  if (os_signpost_enabled(v18))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "PrepareForSessionEstablishment";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v18, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (a3)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    sub_234120B90(a1, a2, a5, a6, a7, a9);
    if (!*(_DWORD *)a9)
    {
      *(_OWORD *)a9 = xmmword_250504738;
      a9[2] = 497;
      sub_2341E68C4(a3, a1 + 16, (uint64_t)buf);
      *(_OWORD *)a9 = *(_OWORD *)buf;
      a9[2] = *(_QWORD *)&buf[16];
      if (*(_DWORD *)a9)
        goto LABEL_21;
      *(_QWORD *)(a1 + 584) = a3;
      *(_BYTE *)(a1 + 40) = 1;
      *(_QWORD *)(a1 + 568) = a4;
      *(_QWORD *)buf = sub_2341B1C28();
      *(_DWORD *)&buf[8] = v19;
      if (*a8)
        v20 = sub_233C0FDD4(a8);
      else
        v20 = buf;
      v21 = *((_DWORD *)v20 + 2);
      v22 = *(_QWORD *)v20;
      *(_BYTE *)(a1 + 128) = 1;
      *(_QWORD *)(a1 + 132) = v22;
      *(_DWORD *)(a1 + 140) = v21;
      v23 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v24 = *(_BYTE *)(a1 + 72);
        if (v24)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)sub_233C25EA4((_BYTE *)(a1 + 72));
          (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 24))(*(_QWORD *)&buf[8]);
          v24 = 1;
        }
        buf[0] = v24;
        v25 = (uint64_t *)sub_233C25EA4(buf);
        v26 = sub_2341CD3C0(*v25);
        *(_DWORD *)v30 = 134217984;
        v31 = v26;
        _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_INFO, "Allocated SecureSession (%p) - waiting for Sigma1 msg", v30, 0xCu);
        if (buf[0])
          (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 32))(*(_QWORD *)&buf[8]);
      }
      if (sub_234114844(3u))
      {
        v27 = *(_BYTE *)(a1 + 72);
        if (v27)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)sub_233C25EA4((_BYTE *)(a1 + 72));
          (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 24))(*(_QWORD *)&buf[8]);
          v27 = 1;
        }
        buf[0] = v27;
        v28 = (uint64_t *)sub_233C25EA4(buf);
        sub_2341CD3C0(*v28);
        sub_2341147D0(0xBu, 3);
        if (buf[0])
          (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 32))(*(_QWORD *)&buf[8]);
      }
      if (*(_DWORD *)a9)
LABEL_21:
        sub_2341205EC(a1);
    }
  }
  else
  {
    *(_DWORD *)a9 = 47;
    a9[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a9 + 4) = 494;
  }
  v29 = sub_2341C4608();
  if (os_signpost_enabled(v29))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "PrepareForSessionEstablishment";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v29, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234121480(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, _BYTE *a11)
{
  unsigned __int8 v14;
  NSObject *v19;
  __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  NSObject *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  int v46;
  uint64_t v47[2];
  _BYTE buf[26];
  __int16 v49;
  int v50;
  __int128 v51;
  int v52;
  uint64_t v53;

  v14 = a5;
  v53 = *MEMORY[0x24BDAC8D0];
  v47[0] = a4;
  v47[1] = a5;
  v19 = sub_2341C4608();
  v20 = &word_2342A9000;
  if (os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "EstablishSession";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v19, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!a6)
  {
    *(_DWORD *)buf = 2;
    *(_QWORD *)&buf[8] = "core_dev_case_session";
    *(_DWORD *)&buf[16] = 47;
    buf[20] = 3;
    sub_2341C4BEC((uint64_t)buf);
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v27 = 526;
LABEL_13:
    *(_DWORD *)(a9 + 16) = v27;
    goto LABEL_14;
  }
  if (!a3)
  {
    *(_DWORD *)buf = 2;
    *(_QWORD *)&buf[8] = "core_dev_case_session";
    *(_DWORD *)&buf[16] = 47;
    buf[20] = 3;
    sub_2341C4BEC((uint64_t)buf);
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v27 = 527;
    goto LABEL_13;
  }
  if (!v14)
  {
    *(_DWORD *)buf = 2;
    *(_QWORD *)&buf[8] = "core_dev_case_session";
    *(_DWORD *)&buf[16] = 47;
    buf[20] = 3;
    sub_2341C4BEC((uint64_t)buf);
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v27 = 532;
    goto LABEL_13;
  }
  v21 = sub_2341E2E70(a3, v14);
  if (!v21)
  {
    *(_DWORD *)buf = 2;
    *(_QWORD *)&buf[8] = "core_dev_case_session";
    *(_DWORD *)&buf[16] = 47;
    buf[20] = 3;
    sub_2341C4BEC((uint64_t)buf);
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v27 = 534;
    goto LABEL_13;
  }
  v22 = v21;
  sub_234120B90(a1, a2, a8, a10, v47, buf);
  v23 = *(_DWORD *)buf;
  v51 = *(_OWORD *)&buf[4];
  v52 = *(_DWORD *)&buf[20];
  *(_BYTE *)(a1 + 40) = 0;
  sub_234121A84(a1 + 104, a6);
  v24 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 104));
  sub_233CB4208(*v24, buf);
  v25 = sub_2341CD430(*(uint64_t *)buf);
  v44 = *(_OWORD *)(v25 + 60);
  v26 = *(_DWORD *)(v25 + 80);
  v45 = *(_DWORD *)(v25 + 76);
  v46 = v26;
  (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
  if (v23)
  {
    *(_DWORD *)buf = 2;
    *(_QWORD *)&buf[8] = "core_dev_case_session";
    *(_DWORD *)&buf[16] = v23;
    buf[20] = 3;
    sub_2341C4BEC((uint64_t)buf);
  }
  else
  {
    sub_2341E68C4(a3, a1 + 16, (uint64_t)&v41);
    v23 = v41;
    v51 = v42;
    v52 = v43;
    if (!v41)
    {
      *(_DWORD *)buf = 0;
      *(_QWORD *)&buf[8] = "core_dev_case_session";
      buf[20] = 0;
      sub_2341C4BEC((uint64_t)buf);
      v29 = (uint64_t *)sub_233C25EA4((_BYTE *)(a1 + 72));
      v30 = sub_2341CD3C0(*v29);
      v31 = v45;
      *(_OWORD *)(v30 + 96) = v44;
      *(_DWORD *)(v30 + 112) = v31;
      *(_DWORD *)(v30 + 116) = v26;
      *(_QWORD *)(a1 + 584) = a3;
      *(_BYTE *)(a1 + 592) = *(_BYTE *)(v22 + 137);
      *(_QWORD *)(a1 + 568) = a7;
      *(_QWORD *)buf = sub_2341B1C28();
      *(_DWORD *)&buf[8] = v32;
      v20 = &word_2342A9000;
      if (*a11)
        v33 = sub_233C0FDD4(a11);
      else
        v33 = buf;
      v34 = *((_DWORD *)v33 + 2);
      v35 = *(_QWORD *)v33;
      *(_BYTE *)(a1 + 128) = 1;
      *(_QWORD *)(a1 + 132) = v35;
      *(_DWORD *)(a1 + 140) = v34;
      v36 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 104));
      sub_2341AD0C8(*v36, 2000);
      *(_QWORD *)(a1 + 600) = v47[0];
      *(_QWORD *)(a1 + 608) = *(_QWORD *)v22;
      v37 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = *(unsigned __int8 *)(a1 + 592);
        v39 = *(_QWORD *)(a1 + 608);
        v40 = *(_QWORD *)(a1 + 600);
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)&buf[4] = v38;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = HIDWORD(v39);
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v39;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&buf[22] = HIDWORD(v40);
        v49 = 1024;
        v50 = v40;
        _os_log_impl(&dword_233BF3000, v37, OS_LOG_TYPE_DEFAULT, "Initiating session on local FabricIndex %u from 0x%08X%08X -> 0x%08X%08X", buf, 0x20u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0xBu, 2);
      if (v45 == 3)
      {
        sub_2341D1D10(a2, (uint64_t)&v44, (uint64_t)buf);
      }
      else
      {
        *(_DWORD *)buf = 0;
        *(_QWORD *)&buf[8] = "core_dev_case_session_sigma1";
        buf[20] = 0;
        sub_2341C4BEC((uint64_t)buf);
        sub_234121AF0((_QWORD **)a1, (uint64_t)buf);
      }
      v23 = *(_DWORD *)buf;
      v51 = *(_OWORD *)&buf[4];
      v52 = *(_DWORD *)&buf[20];
      if (!*(_DWORD *)buf)
        goto LABEL_21;
      goto LABEL_20;
    }
    *(_DWORD *)buf = 2;
    *(_QWORD *)&buf[8] = "core_dev_case_session";
    *(_DWORD *)&buf[16] = v41;
    buf[20] = 3;
    sub_2341C4BEC((uint64_t)buf);
  }
  v20 = &word_2342A9000;
LABEL_20:
  *(_DWORD *)buf = 1;
  *(_QWORD *)&buf[8] = "core_dev_case_session_sigma1";
  *(_DWORD *)&buf[16] = v23;
  buf[20] = 3;
  sub_2341C4BEC((uint64_t)buf);
  *(_DWORD *)buf = 1;
  *(_QWORD *)&buf[8] = "core_dev_case_session";
  *(_DWORD *)&buf[16] = v23;
  buf[20] = 3;
  sub_2341C4BEC((uint64_t)buf);
  sub_2341205EC(a1);
LABEL_21:
  *(_DWORD *)a9 = v23;
  *(_OWORD *)(a9 + 4) = v51;
  *(_DWORD *)(a9 + 20) = v52;
LABEL_14:
  v28 = sub_2341C4608();
  if (os_signpost_enabled(v28))
  {
    *(_DWORD *)buf = *((_QWORD *)v20 + 125);
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "EstablishSession";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v28, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_234121A84(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1)
    sub_23412A174((int *)(*(_QWORD *)(a1 + 8) + 28));
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2;
  sub_23412A1A8((int *)(a2 + 28));
  return a1 + 8;
}

_BYTE *sub_234121AD0(_BYTE *a1)
{
  if (!*a1)
    sub_2342576F0((uint64_t)a1);
  return a1 + 8;
}

void sub_234121AF0(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  unint64_t v19;
  int v20;
  unsigned __int8 v21;
  char *v22[2];
  char *v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  const char **v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint8_t v36[8];
  const char *v37;
  uint64_t v38;
  _OWORD v39[2];
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  const char *v43;
  _QWORD v44[3];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v41 = "CASESession";
    v42 = 2080;
    v43 = "SendSigma1";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_234106C48((uint64_t)buf);
  v44[1] = 0;
  v44[2] = 0;
  v44[0] = &unk_250504030;
  v45 = 0;
  v33 = 0;
  v32 = -1;
  memset(v39, 0, sizeof(v39));
  v5 = sub_2341E2E70((uint64_t)a1[73], *((unsigned __int8 *)a1 + 592));
  if (!v5)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v15 = 787;
LABEL_30:
    *(_DWORD *)(a2 + 16) = v15;
    goto LABEL_31;
  }
  v6 = v5;
  sub_234122B6C((uint64_t)(a1 + 4), (uint64_t)v36);
  if (!v36[0])
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v15 = 790;
    goto LABEL_30;
  }
  v7 = sub_2341E6D8C((uint64_t)a1[73]);
  a1[53] = (_QWORD *)v7;
  if (!v7)
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v15 = 794;
    goto LABEL_30;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 48))(v7, 0);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234139DB0((char *)a1 + 660, 0x20uLL, a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  sub_234118674(0xF3uLL, 0x26u, v36);
  if (v33)
    sub_23411814C(v33);
  v33 = *(_QWORD *)v36;
  if (!*(_QWORD *)v36)
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v15 = 802;
    goto LABEL_30;
  }
  sub_233CAF098((uint64_t)v44, &v33, 0);
  sub_234106CA8((uint64_t)buf, (uint64_t)v44, 0xFFFFFFFF, (uint64_t)v36);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234107E40((char *)buf, 0x100uLL, 21, &v32, a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_2341073FC((char *)buf, 1uLL, (char *)a1 + 660, 0x20uLL, a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234122B6C((uint64_t)(a1 + 4), (uint64_t)v36);
  v8 = sub_233C05D98(v36);
  sub_234107224((char *)buf, 2uLL, *(unsigned __int16 *)v8, a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234122950((uint64_t)a1, a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  v9 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)v36 = &off_250505A50;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_2341E34CC((uint64_t)a1[73], *((unsigned __int8 *)a1 + 592), (uint64_t)v36, a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  v34 = v39;
  v35 = 32;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v30 = a1 + 69;
  v31 = 16;
  v28 = (char *)a1 + 660;
  v29 = 32;
  v26 = &v37;
  v27 = 65;
  sub_23411F134((uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v9, (unint64_t)a1[75], (uint64_t)&v34, a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234107438((char *)buf, 3uLL, (char *)v39, 0x20u, a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = (char *)((*(uint64_t (**)(_QWORD *))(*a1[53] + 40))(a1[53]) + 8);
  (*(void (**)(_QWORD *))(*a1[53] + 40))(a1[53]);
  sub_234107438((char *)buf, 4uLL, v10, 0x41u, a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  if (!*((_BYTE *)a1 + 128))
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v15 = 830;
    goto LABEL_30;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = sub_234122C20((_BYTE *)a1 + 128);
  sub_234130CF8(5uLL, (uint64_t)v11, (char *)buf, (_QWORD *)a2);
  if (*(_DWORD *)a2)
    goto LABEL_31;
  v12 = a1[71];
  if (v12)
  {
    *(_QWORD *)v36 = 0;
    v37 = 0;
    v38 = 0;
    v13 = *(unsigned __int8 *)(v6 + 137);
    v34 = a1[75];
    v35 = v13;
    (*(void (**)(uint8_t *__return_ptr, _QWORD *, _OWORD **, uint64_t, _QWORD **, _QWORD **))(*v12 + 16))(v36, v12, &v34, (uint64_t)a1 + 628, a1 + 54, a1 + 77);
    v14 = *(_DWORD *)v36 == 0;
    if (!*(_DWORD *)v36)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_2341073FC((char *)buf, 6uLL, (char *)a1 + 628, 0x10uLL, a2);
      if (*(_DWORD *)a2)
        goto LABEL_31;
      v30 = &v34;
      v31 = 16;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      v28 = (char *)a1 + 660;
      v29 = 32;
      v26 = (const char **)((char *)a1 + 628);
      v27 = 16;
      v25[0] = "Sigma1_ResumeNCASE_SigmaS1Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
      v25[1] = 13;
      v24[0] = "NCASE_SigmaS1Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
      v24[1] = 13;
      sub_234122C40((uint64_t)a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)v25, (uint64_t)v24, (uint64_t)&v30, a2);
      if (*(_DWORD *)a2)
        goto LABEL_31;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_233BF7114(v23, (uint64_t)v30, v31);
      sub_2341073FC((char *)buf, 7uLL, v23[0], (unint64_t)v23[1], a2);
      if (*(_DWORD *)a2)
        goto LABEL_31;
    }
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234107FB0((char *)buf, v32, a2);
  if (!*(_DWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_233C115F0((uint64_t)buf, &v33, (_QWORD *)a2);
    if (!*(_DWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_233BF7114(v22, *(_QWORD *)(v33 + 8), *(_QWORD *)(v33 + 24));
      sub_234139528((uint64_t)(a1 + 28), v22[0], (size_t)v22[1], a2);
      if (!*(_DWORD *)a2)
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v17 = *(_QWORD *)sub_234121AD0((_BYTE *)a1 + 104);
        *(_WORD *)v36 = 1;
        sub_2341AD108(v17, 0, 48, &v33, v36, a2);
        if (!*(_DWORD *)a2)
        {
          if (v14)
          {
            *((_BYTE *)a1 + 728) = 4;
            *(_DWORD *)v36 = 2;
            v37 = "core_dev_case_session_sigma1_resume";
            BYTE4(v38) = 0;
            sub_2341C4BEC((uint64_t)v36);
          }
          else
          {
            *((_BYTE *)a1 + 728) = 1;
          }
          v18 = sub_234117B80(0xBu, "SecureChannel");
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            v19 = (unint64_t)((uint64_t (*)(_QWORD **))(*a1)[6])(a1) >> 32;
            v20 = ((uint64_t (*)(_QWORD **))(*a1)[6])(a1);
            ((void (*)(_QWORD **))(*a1)[6])(a1);
            *(_DWORD *)v36 = 67109632;
            *(_DWORD *)&v36[4] = v19;
            LOWORD(v37) = 1024;
            *(_DWORD *)((char *)&v37 + 2) = v20;
            HIWORD(v37) = 1024;
            LODWORD(v38) = v21;
            _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_DEFAULT, "Sent Sigma1 msg to <%08X%08X, %d>", v36, 0x14u);
          }
          if (sub_234114844(2u))
          {
            ((uint64_t (*)(_QWORD **))(*a1)[6])(a1);
            ((void (*)(_QWORD **))(*a1)[6])(a1);
            ((void (*)(_QWORD **))(*a1)[6])(a1);
            sub_2341147D0(0xBu, 2);
          }
          (*(void (**)(_QWORD *))(*a1[15] + 16))(a1[15]);
          *(_DWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
          v15 = 879;
          goto LABEL_30;
        }
      }
    }
  }
LABEL_31:
  if (v33)
    sub_23411814C(v33);
  sub_2340F6E6C(v44);
  v16 = sub_2341C4608();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)buf = 136315394;
    v41 = "CASESession";
    v42 = 2080;
    v43 = "SendSigma1";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412230C(_BYTE *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  const char *v15;
  int v16;
  uint8_t buf[4];
  _BYTE v18[10];
  const char *v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v18 = "CASESession";
    *(_WORD *)&v18[8] = 2080;
    v19 = "OnResponseTimeout";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (a2)
  {
    if (a1[104] && *(_QWORD *)sub_234121AD0(a1 + 104) == a2)
    {
      v7 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (unint64_t)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1) >> 32;
        v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
        (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
        v10 = a1[728];
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)v18 = v8;
        *(_WORD *)&v18[4] = 1024;
        *(_DWORD *)&v18[6] = v9;
        LOWORD(v19) = 1024;
        *(_DWORD *)((char *)&v19 + 2) = v11;
        HIWORD(v19) = 1024;
        v20 = v10;
        _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "CASESession timed out while waiting for a response from peer <%08X%08X, %d>. Current state was %u", buf, 0x1Au);
      }
      if (sub_234114844(1u))
      {
        (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
        (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
        (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
        sub_2341147D0(0xBu, 1);
      }
      v12 = sub_2341C4608();
      if (os_signpost_enabled(v12))
      {
        ++dword_256159668;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v18 = dword_256159668;
        _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CASETimeout", "%u", buf, 8u);
      }
      sub_234130C60((uint64_t)(a1 + 32));
      v14 = 50;
      v15 = "src/protocols/secure_channel/CASESession.cpp";
      v16 = 607;
      sub_2341209E4((uint64_t)a1, (uint64_t)&v14);
    }
    else
    {
      v5 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "CASESession::OnResponseTimeout exchange doesn't match", buf, 2u);
      }
      if (sub_234114844(1u))
LABEL_13:
        sub_2341147D0(0xBu, 1);
    }
  }
  else
  {
    v6 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "CASESession::OnResponseTimeout was called by null exchange", buf, 2u);
    }
    if (sub_234114844(1u))
      goto LABEL_13;
  }
  v13 = sub_2341C4608();
  if (os_signpost_enabled(v13))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v18 = "CASESession";
    *(_WORD *)&v18[8] = 2080;
    v19 = "OnResponseTimeout";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341226EC(uint64_t a1, uint64_t a2)
{
  sub_23412230C((_BYTE *)(a1 - 8), a2);
}

uint64_t sub_2341226F4(uint64_t a1, unsigned int a2)
{
  if (a2 > 9)
    return 0;
  else
    return byte_2342D9A81[(char)a2];
}

unsigned __int8 *sub_234122718@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD v12[3];
  _BYTE v13[48];
  uint64_t v14;

  v4 = result;
  v14 = *MEMORY[0x24BDAC8D0];
  v6 = result[728];
  if (v6 == 7)
  {
    v12[0] = v13;
    *(_OWORD *)&v12[1] = xmmword_2342D9730;
    sub_2341150D8(v12, result + 660, 0x20uLL);
    result = (unsigned __int8 *)sub_2341150D8(v12, v4 + 628, 0x10uLL);
    if (v12[1] < v12[2])
    {
      *(_DWORD *)a3 = 25;
      *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v7 = 650;
      goto LABEL_8;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v9 = *(_QWORD *)(*((_QWORD *)v4 + 72) + 40);
    sub_233BF7114(v12, (uint64_t)(v4 + 432), *((_QWORD *)v4 + 58));
    v10 = v13;
    v11 = 48;
    result = (unsigned __int8 *)sub_2341C9B1C(a2, v9, (uint64_t)v12, (uint64_t)&v10, 1, v4[40], a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v7 = 656;
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 != 6)
    {
      *(_DWORD *)a3 = 3;
      *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v7 = 659;
      goto LABEL_8;
    }
    v12[0] = v13;
    *(_OWORD *)&v12[1] = xmmword_2342D9730;
    sub_2341150D8(v12, result + 552, 0x10uLL);
    result = (unsigned __int8 *)sub_2341150D8(v12, v4 + 520, 0x20uLL);
    if (v12[1] < v12[2])
    {
      *(_DWORD *)a3 = 25;
      *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v7 = 633;
LABEL_8:
      *(_DWORD *)(a3 + 16) = v7;
      return result;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v8 = *(_QWORD *)(*((_QWORD *)v4 + 72) + 40);
    sub_233BF7114(v12, (uint64_t)(v4 + 432), *((_QWORD *)v4 + 58));
    v10 = v13;
    v11 = 48;
    result = (unsigned __int8 *)sub_2341C9B1C(a2, v8, (uint64_t)v12, (uint64_t)&v10, 0, v4[40], a3);
    if (!*(_DWORD *)a3)
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v7 = 640;
      goto LABEL_8;
    }
  }
  return result;
}

unsigned __int8 *sub_234122948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_234122718((unsigned __int8 *)(a1 - 32), a2, a3);
}

uint64_t sub_234122950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[9];
  int v13;
  uint8_t buf[16];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = 0x10000;
  v10 = 0uLL;
  v11 = 0;
  result = (uint64_t)(*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD *))(**(_QWORD **)(a1 + 512)
                                                                                                + 192))(&v10, *(_QWORD *)(a1 + 512), *(unsigned __int8 *)(a1 + 592), v12);
  if ((_DWORD)v10)
  {
    v5 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v10;
      v15 = v11;
      v6 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "Failed to obtain IPK for initiating: %s", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = v10;
      v15 = v11;
      sub_2341083CC((const char **)buf, 1);
      result = sub_2341147D0(0xBu, 1);
    }
    *(_OWORD *)a2 = v10;
    *(_QWORD *)(a2 + 16) = v11;
  }
  else
  {
    if (HIBYTE(v13) - 4 > 0xFFFFFFFC)
    {
      if (HIBYTE(v13) <= 1u)
        v9 = 0;
      else
        v9 = HIBYTE(v13) - 2;
      *(_OWORD *)(a1 + 552) = *(_OWORD *)&v12[3 * v9 + 1];
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v8 = 695;
    }
    else
    {
      v7 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Found invalid IPK keyset for initiator.", buf, 2u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        result = sub_2341147D0(0xBu, 1);
      *(_DWORD *)a2 = 172;
      *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v8 = 677;
    }
    *(_DWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_234122B6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t *v5;
  __int16 v6;

  v3 = (_BYTE *)(result + 40);
  if (*(_BYTE *)(result + 40)
    && (v4 = sub_233C25EA4((_BYTE *)(result + 40)),
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4),
        (_DWORD)result == 2))
  {
    v5 = (uint64_t *)sub_233C25EA4(v3);
    result = sub_2341CD3C0(*v5);
    v6 = *(_WORD *)(result + 92);
    *(_BYTE *)a2 = 1;
    *(_WORD *)(a2 + 2) = v6;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return result;
}

_QWORD *sub_234122BDC(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v4;
  _BYTE v6[24];

  v4 = a1 + 64;
  sub_233CAF098(a1 + 64, a2, a3);
  return sub_234106CA8(a1, v4, 0xFFFFFFFF, (uint64_t)v6);
}

_BYTE *sub_234122C20(_BYTE *a1)
{
  if (!*a1)
    sub_2342576F0((uint64_t)a1);
  return a1 + 4;
}

uint64_t sub_234122C40@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a6 + 8) <= 0xFuLL)
  {
    *(_DWORD *)a7 = 25;
    *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a7 + 16) = 2018;
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(result + 576) + 40);
    v12[0] = 0;
    v12[1] = 0;
    v11 = v10;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    *(_QWORD *)a7 = 0;
    sub_2341291EC(result, a2, a3, a4, (uint64_t)&v11, a7);
    if (!*(_DWORD *)a7)
    {
      *(_QWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
      sub_234138F5C(0, 0, (uint64_t)v12, *(_QWORD *)a5, *(_QWORD *)(a5 + 8), 0, a7, *(char **)a6, 16);
      if (!*(_DWORD *)a7)
      {
        sub_233BF7588(a6, 0x10uLL);
        *(_DWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
        *(_DWORD *)(a7 + 16) = 2026;
      }
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 40))(v11, v12);
    return sub_23413A7A4(v12, 16);
  }
  return result;
}

void sub_234122D84(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    v8 = 136315394;
    v9 = "CASESession";
    v10 = 2080;
    v11 = "HandleSigma1_and_SendSigma2";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v8, 0x16u);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234122F00(a1, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a3 + 4) = 887;
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    v8 = 136315394;
    v9 = "CASESession";
    v10 = 2080;
    v11 = "HandleSigma1_and_SendSigma2";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v8, 0x16u);
  }
}

void sub_234122F00(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  NSObject *v16;
  unsigned __int16 v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  const char *v27;
  uint64_t v28;
  char *v29[2];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  char v35;
  __int128 __src;
  uint64_t v37[2];
  unsigned __int16 v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)buf = 136315394;
    v43 = "CASESession";
    v44 = 2080;
    v45 = "HandleSigma1";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_234104468((uint64_t)buf);
  v46 = 0;
  v38 = 0;
  v37[0] = 0;
  v37[1] = 0;
  __src = 0uLL;
  v9 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v39) = 0;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "Received Sigma1 msg", (uint8_t *)&v39, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xBu, 2);
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    ++dword_25615966C;
    LODWORD(v39) = 67109120;
    HIDWORD(v39) = dword_25615966C;
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Sigma1", "%u", (uint8_t *)&v39, 8u);
  }
  v35 = 0;
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v30[0] = 0;
  v30[1] = 0;
  sub_233BF7114(v29, *(_QWORD *)(*a2 + 8), *(_QWORD *)(*a2 + 24));
  sub_234139528(a1 + 224, v29[0], (size_t)v29[1], (uint64_t)&v39);
  v11 = v39;
  if ((_DWORD)v39
    || (sub_233C11670((uint64_t)buf, a2),
        sub_234123D1C(a1, (uint64_t)buf, (uint64_t)&__src, &v38, (uint64_t)v37, (uint64_t)v30, &v35, (uint64_t)&v33, &v39, (uint64_t)&v31), (v11 = v39) != 0))
  {
    v3 = HIDWORD(v39);
    v12 = v40;
    v4 = v41;
    goto LABEL_12;
  }
  v16 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    LODWORD(v39) = 67109120;
    HIDWORD(v39) = v38;
    _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "Peer assigned session key ID %d", (uint8_t *)&v39, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  v17 = v38;
  *(_BYTE *)(a1 + 176) = 1;
  *(_WORD *)(a1 + 178) = v17;
  v12 = "src/protocols/secure_channel/CASESession.cpp";
  if (!*(_QWORD *)(a1 + 584))
  {
    LODWORD(v4) = 996;
    v11 = 3;
    goto LABEL_30;
  }
  if (!v35
    || v34 != 16
    || (sub_23412A400(&v28, (uint64_t)v33),
        sub_23412396C(a1, v28, v31, v32, __src, *((uint64_t *)&__src + 1), (uint64_t)&v39),
        (_DWORD)v39))
  {
    sub_234123574(a1, (uint64_t)v37, &__src, (uint64_t)&v39);
    v11 = v39;
    v3 = HIDWORD(v39);
    v12 = v40;
    v4 = v41;
    v18 = sub_234117B80(0xBu, "SecureChannel");
    v19 = v18;
    if (v11)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v39) = 0;
        _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "CASE failed to match destination ID with local fabrics", (uint8_t *)&v39, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0xBu, 1);
      sub_234117CB4(0xBu, "SecureChannel", OS_LOG_TYPE_INFO, v37);
      if (sub_234114844(3u))
        sub_23411766C(11, 3, v37);
LABEL_12:
      if (v11 == 16)
      {
        v13 = a1 + 32;
        v14 = (_BYTE *)(a1 + 104);
        v15 = 1;
LABEL_31:
        sub_234125154(v13, v14, v15);
        *(_BYTE *)(a1 + 728) = 0;
LABEL_32:
        *(_DWORD *)a3 = v11;
        *(_DWORD *)(a3 + 4) = v3;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = v4;
        goto LABEL_33;
      }
LABEL_30:
      v13 = a1 + 32;
      v14 = (_BYTE *)(a1 + 104);
      v15 = 2;
      goto LABEL_31;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(unsigned __int8 *)(a1 + 592);
      v22 = *(_QWORD *)(a1 + 608);
      LODWORD(v39) = 67109632;
      HIDWORD(v39) = v21;
      LOWORD(v40) = 1024;
      *(_DWORD *)((char *)&v40 + 2) = HIDWORD(v22);
      HIWORD(v40) = 1024;
      LODWORD(v41) = v22;
      _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_DEFAULT, "CASE matched destination ID: fabricIndex %u, NodeID 0x%08X%08X", (uint8_t *)&v39, 0x14u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0xBu, 2);
    v23 = v30[0];
    *(_OWORD *)(a1 + 352) = *(_OWORD *)v30[0];
    v25 = *(_OWORD *)(v23 + 32);
    v24 = *(_OWORD *)(v23 + 48);
    v26 = *(_OWORD *)(v23 + 16);
    *(_BYTE *)(a1 + 416) = *(_BYTE *)(v23 + 64);
    *(_OWORD *)(a1 + 384) = v25;
    *(_OWORD *)(a1 + 400) = v24;
    *(_OWORD *)(a1 + 368) = v26;
    LODWORD(v39) = 0;
    v27 = "core_dev_case_session_sigma2";
    v40 = "core_dev_case_session_sigma2";
    BYTE4(v41) = 0;
    sub_2341C4BEC((uint64_t)&v39);
    sub_234124628((__n128 *)a1, (uint64_t)&v39);
    v11 = v39;
    v3 = HIDWORD(v39);
    v12 = v40;
    v4 = v41;
    if (!(_DWORD)v39)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
      goto LABEL_32;
    }
LABEL_50:
    LODWORD(v39) = 1;
    v40 = v27;
    LODWORD(v41) = v11;
    BYTE4(v41) = 3;
    sub_2341C4BEC((uint64_t)&v39);
    goto LABEL_12;
  }
  if (*((_QWORD *)&__src + 1))
    memmove((void *)(a1 + 660), (const void *)__src, *((size_t *)&__src + 1));
  if (v34)
    memmove((void *)(a1 + 628), v33, v34);
  LODWORD(v39) = 0;
  v27 = "core_dev_case_session_sigma2_resume";
  v40 = "core_dev_case_session_sigma2_resume";
  BYTE4(v41) = 0;
  sub_2341C4BEC((uint64_t)&v39);
  sub_23412417C((_BYTE *)a1, (uint64_t)&v39);
  v11 = v39;
  if ((_DWORD)v39)
  {
    v3 = HIDWORD(v39);
    v12 = v40;
    v4 = v41;
    goto LABEL_50;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
  *(_DWORD *)(a3 + 16) = 1017;
LABEL_33:
  if (v46)
    sub_23411814C(v46);
  v20 = sub_2341C4608();
  if (os_signpost_enabled(v20))
  {
    *(_DWORD *)buf = 136315394;
    v43 = "CASESession";
    v44 = 2080;
    v45 = "HandleSigma1";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v20, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234123574(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v6;
  __int16 *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD v19[2];
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;
  void *__s1;
  size_t __n;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t v29;
  int v30;
  uint64_t v31[2];
  uint64_t v32;
  unint64_t v33;
  char v34;
  _BYTE buf[12];
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  v7 = &word_2342A9000;
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    v36 = 2080;
    v37 = "FindLocalNodeFromDestinationId";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v8 = *(_QWORD *)(a1 + 584);
  if (!v8)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v9 = 893;
    goto LABEL_10;
  }
  sub_233C0BD8C(*(_QWORD **)(a1 + 584), (uint64_t)v31);
  if (v32 == v33 || v33 == 16 && v32 == 16 && v31[0] == v8)
  {
LABEL_8:
    *(_DWORD *)a4 = 16;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v9 = 941;
LABEL_10:
    *(_DWORD *)(a4 + 16) = v9;
    goto LABEL_11;
  }
LABEL_14:
  v11 = sub_233C06A04(v31);
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)buf = &off_250505A50;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_2341E34CC(*(_QWORD *)(a1 + 584), *(unsigned __int8 *)(v11 + 137), (uint64_t)buf, a4);
  if (!*(_DWORD *)a4)
  {
    v30 = 0x10000;
    v26 = 0uLL;
    v27 = 0;
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 512) + 192))(&v26, *(_QWORD *)(a1 + 512), *(unsigned __int8 *)(v11 + 137), v28);
    if ((_DWORD)v26 || HIBYTE(v30) - 1 > 2)
    {
LABEL_23:
      v16 = v32;
      v7 = &word_2342A9000;
      while (1)
      {
        if (v16 < v33)
          v32 = ++v16;
        if (v16 == v33)
          goto LABEL_8;
        if (*(_BYTE *)(v31[0] + 152 * v16 + 137)
          && (unint64_t)(*(_QWORD *)(v31[0] + 152 * v16) - 1) < 0xFFFFFFEFFFFFFFFFLL)
        {
          if (v33 != 16 || v16 != 16 || v31[0] != v8)
            goto LABEL_14;
          goto LABEL_8;
        }
      }
    }
    v14 = 0;
    v15 = &v29;
    while (1)
    {
      __s1 = &v34;
      __n = 32;
      v21[0] = v15;
      v21[1] = 16;
      v20 = *a3;
      v19[0] = &buf[8];
      v19[1] = 65;
      sub_23411F134((uint64_t)v21, (uint64_t)&v20, (uint64_t)v19, v13, v12, (uint64_t)&__s1, (uint64_t)&v22);
      v26 = v22;
      v27 = v23;
      if (!(_DWORD)v22 && __n == *(_QWORD *)(a2 + 8) && (!__n || !memcmp(__s1, *(const void **)a2, __n)))
        break;
      ++v14;
      v15 += 3;
      if (v14 >= HIBYTE(v30))
        goto LABEL_23;
    }
    *(_QWORD *)&v22 = a1 + 552;
    *((_QWORD *)&v22 + 1) = 16;
    *(_OWORD *)(a1 + 552) = *(_OWORD *)v15;
    sub_233BF7588((uint64_t)&v22, 0x10uLL);
    *(_BYTE *)(a1 + 592) = *(_BYTE *)(v11 + 137);
    *(_QWORD *)(a1 + 608) = v12;
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a4 + 16) = 941;
  }
  v7 = &word_2342A9000;
LABEL_11:
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = *((_QWORD *)v7 + 125);
    *(_QWORD *)&buf[4] = "CASESession";
    v36 = 2080;
    v37 = "FindLocalNodeFromDestinationId";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412396C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  uint64_t v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21[2];
  _BYTE buf[12];
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v21[0] = a3;
  v21[1] = a4;
  v20[0] = a5;
  v20[1] = a6;
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    v23 = 2080;
    v24 = "TryResumeSession";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v11 = *(_QWORD *)(a1 + 568);
  if (!v11)
  {
    *(_DWORD *)a7 = 3;
    *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v15 = 948;
LABEL_11:
    *(_DWORD *)(a7 + 16) = v15;
    goto LABEL_12;
  }
  if (!*(_QWORD *)(a1 + 584))
  {
    *(_DWORD *)a7 = 3;
    *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v15 = 949;
    goto LABEL_11;
  }
  *(_QWORD *)buf = 0;
  buf[8] = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, a2, buf, a1 + 432, a1 + 616);
  if (!*(_DWORD *)a7)
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    v19[0] = a2;
    v19[1] = 16;
    v18[0] = "Sigma1_ResumeNCASE_SigmaS1Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
    v18[1] = 13;
    v17[0] = (uint64_t)"NCASE_SigmaS1Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
    v17[1] = 13;
    sub_234123BE0(a1, v21, (uint64_t)v20, (uint64_t)v19, (uint64_t)v18, v17, (_QWORD *)a7);
    if (!*(_DWORD *)a7)
    {
      v12 = (_QWORD *)sub_2341E2E70(*(_QWORD *)(a1 + 584), buf[8]);
      if (v12)
      {
        v13 = 0;
        *(_BYTE *)(a1 + 592) = buf[8];
        *(_QWORD *)(a1 + 600) = *(_QWORD *)buf;
        *(_QWORD *)(a1 + 608) = *v12;
        v14 = 966;
      }
      else
      {
        v14 = 960;
        v13 = 3;
      }
      *(_DWORD *)a7 = v13;
      *(_QWORD *)(a7 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      *(_DWORD *)(a7 + 16) = v14;
    }
  }
LABEL_12:
  v16 = sub_2341C4608();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    v23 = 2080;
    v24 = "TryResumeSession";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_234123BE0@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] == 16)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(result + 576) + 40);
    v12[0] = 0;
    v12[1] = 0;
    v11 = v10;
    a7[1] = 0;
    a7[2] = 0;
    *a7 = 0;
    sub_2341291EC(result, a3, a4, a5, (uint64_t)&v11, (uint64_t)a7);
    if (!*(_DWORD *)a7)
    {
      *a7 = 0;
      a7[1] = 0;
      a7[2] = 0;
      sub_2341391E0(0, 0, *a2, a2[1], (uint64_t)v12, *a6, (uint64_t)a7, a6[1], 0);
      if (!*(_DWORD *)a7)
      {
        *(_DWORD *)a7 = 0;
        a7[1] = "src/protocols/secure_channel/CASESession.cpp";
        *((_DWORD *)a7 + 4) = 2039;
      }
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 40))(v11, v12);
    return sub_23413A7A4(v12, 16);
  }
  else
  {
    *(_DWORD *)a7 = 25;
    a7[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a7 + 4) = 2032;
  }
  return result;
}

void sub_234123D1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int v19;
  _BOOL4 v20;
  int v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;

  v32 = 21;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  sub_234106010(a2, 21, 256, a9);
  if (*(_DWORD *)a9)
    return;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_23410570C(a2, &v32, (uint64_t)a9);
  if (*(_DWORD *)a9)
    return;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_234105EE4(a2, 1, a9);
  if (*(_DWORD *)a9)
    return;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_234106600(a2, (_OWORD *)a3, a9);
  if (*(_DWORD *)a9)
    return;
  if (*(_QWORD *)(a3 + 8) != 32)
  {
    *(_DWORD *)a9 = 84;
    a9[1] = "src/protocols/secure_channel/CASESession.cpp";
    v23 = 2181;
LABEL_23:
    *((_DWORD *)a9 + 4) = v23;
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_234105EE4(a2, 2, a9);
  if (*(_DWORD *)a9)
    return;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_2341049E0(a2, a4, (uint64_t)a9);
  if (*(_DWORD *)a9)
    return;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_234105EE4(a2, 3, a9);
  if (*(_DWORD *)a9)
    return;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_234106600(a2, (_OWORD *)a5, a9);
  if (*(_DWORD *)a9)
    return;
  if (*(_QWORD *)(a5 + 8) != 32)
  {
    *(_DWORD *)a9 = 84;
    a9[1] = "src/protocols/secure_channel/CASESession.cpp";
    v23 = 2188;
    goto LABEL_23;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_234105EE4(a2, 4, a9);
  if (*(_DWORD *)a9)
    return;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_234106600(a2, (_OWORD *)a6, a9);
  if (*(_DWORD *)a9)
    return;
  if (*(_QWORD *)(a6 + 8) != 65)
  {
    *(_DWORD *)a9 = 84;
    a9[1] = "src/protocols/secure_channel/CASESession.cpp";
    v23 = 2192;
    goto LABEL_23;
  }
  v30 = 0uLL;
  v31 = 0;
  sub_2341058CC(a2, &v30);
  v19 = v30;
  if ((_DWORD)v30)
  {
LABEL_15:
    v20 = 0;
    v21 = 0;
    goto LABEL_16;
  }
  v24 = *(_QWORD *)(a2 + 16);
  if (v24 == 5)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    sub_234130E60(a1 + 32, 5, a2, (uint64_t)a9);
    if (*(_DWORD *)a9)
      return;
    v25 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 104));
    sub_233CB4208(*v25, &v28);
    v26 = sub_2341CD430(v28);
    sub_234125EDC(v26, (uint64_t *)(a1 + 144));
    (*(void (**)(_QWORD))(*(_QWORD *)v28 + 32))(v28);
    sub_2341058CC(a2, &v28);
    v30 = v28;
    v31 = v29;
    v19 = v28;
    if ((_DWORD)v28)
      goto LABEL_15;
    v24 = *(_QWORD *)(a2 + 16);
  }
  v20 = v24 == 6;
  if (v24 == 6)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    sub_234106600(a2, (_OWORD *)a8, a9);
    if (*(_DWORD *)a9)
      return;
    if (*(_QWORD *)(a8 + 8) != 16)
    {
      v23 = 2211;
LABEL_47:
      v27 = 84;
      goto LABEL_48;
    }
    sub_2341058CC(a2, &v28);
    v30 = v28;
    v31 = v29;
    v19 = v28;
    if ((_DWORD)v28)
    {
      v21 = 0;
      v20 = 1;
      goto LABEL_16;
    }
  }
  if (*(_QWORD *)(a2 + 16) != 7)
  {
    v21 = 0;
    goto LABEL_18;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  sub_234106600(a2, (_OWORD *)a10, a9);
  if (*(_DWORD *)a9)
    return;
  if (*(_QWORD *)(a10 + 8) != 16)
  {
    v23 = 2219;
    goto LABEL_47;
  }
  sub_2341058CC(a2, &v28);
  v30 = v28;
  v31 = v29;
  v21 = 1;
  v19 = v28;
LABEL_16:
  if (v19 == 33)
  {
    LODWORD(v30) = 0;
    *((_QWORD *)&v30 + 1) = "src/protocols/secure_channel/CASESession.cpp";
    LODWORD(v31) = 2226;
  }
LABEL_18:
  *(_OWORD *)a9 = v30;
  a9[2] = v31;
  if (!*(_DWORD *)a9)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    sub_23410577C(a2, v32, (uint64_t)a9);
    if (!*(_DWORD *)a9)
    {
      if ((v20 & v21 & 1) != 0)
      {
        v22 = 1;
      }
      else
      {
        if (((v20 | v21) & 1) != 0)
        {
          v23 = 2242;
          v27 = 43;
LABEL_48:
          *(_DWORD *)a9 = v27;
          a9[1] = "src/protocols/secure_channel/CASESession.cpp";
          goto LABEL_23;
        }
        v22 = 0;
      }
      v27 = 0;
      *a7 = v22;
      v23 = 2245;
      goto LABEL_48;
    }
  }
}

void sub_23412417C(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  char *v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  uint8_t v16[8];
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  _QWORD v26[3];
  char v27;
  _QWORD v28[4];

  v28[3] = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v23 = "CASESession";
    v24 = 2080;
    v25 = "SendSigma2Resume";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_234106C48((uint64_t)buf);
  v26[1] = 0;
  v26[2] = 0;
  v26[0] = &unk_250504030;
  v27 = 0;
  v21 = 0;
  v20 = -1;
  sub_234122B6C((uint64_t)(a1 + 32), (uint64_t)v28);
  if (!LOBYTE(v28[0]))
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v10 = 1078;
LABEL_23:
    *(_DWORD *)(a2 + 16) = v10;
    goto LABEL_24;
  }
  sub_234118674(0x66uLL, 0x26u, v28);
  v21 = v28[0];
  if (!v28[0])
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v10 = 1081;
    goto LABEL_23;
  }
  sub_233CAF098((uint64_t)v26, &v21, 0);
  sub_234106CA8((uint64_t)buf, (uint64_t)v26, 0xFFFFFFFF, (uint64_t)v28);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234139DB0(a1 + 644, 0x10uLL, a2);
  if (!*(_DWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234107E40((char *)buf, 0x100uLL, 21, &v20, a2);
    if (!*(_DWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_2341073FC((char *)buf, 1uLL, a1 + 644, 0x10uLL, a2);
      if (!*(_DWORD *)a2)
      {
        v18 = v28;
        v19 = 16;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)v16 = a1 + 660;
        v17 = 32;
        v15[0] = a1 + 644;
        v15[1] = 16;
        v14[0] = "Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
        v14[1] = 13;
        v13[0] = "NCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
        v13[1] = 13;
        sub_234122C40((uint64_t)a1, (uint64_t)v16, (uint64_t)v15, (uint64_t)v14, (uint64_t)v13, (uint64_t)&v18, a2);
        if (!*(_DWORD *)a2)
        {
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          sub_233BF7114(v12, (uint64_t)v18, v19);
          sub_2341073FC((char *)buf, 2uLL, v12[0], (unint64_t)v12[1], a2);
          if (!*(_DWORD *)a2)
          {
            *(_QWORD *)a2 = 0;
            *(_QWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 16) = 0;
            sub_234122B6C((uint64_t)(a1 + 32), (uint64_t)v16);
            v5 = sub_233C05D98(v16);
            sub_234107224((char *)buf, 3uLL, *(unsigned __int16 *)v5, a2);
            if (!*(_DWORD *)a2)
            {
              if (!a1[128])
              {
                v10 = 1100;
                v9 = 3;
LABEL_30:
                *(_DWORD *)a2 = v9;
                *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
                goto LABEL_23;
              }
              *(_QWORD *)a2 = 0;
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = 0;
              v6 = sub_234122C20(a1 + 128);
              sub_234130CF8(4uLL, (uint64_t)v6, (char *)buf, (_QWORD *)a2);
              if (!*(_DWORD *)a2)
              {
                *(_QWORD *)a2 = 0;
                *(_QWORD *)(a2 + 8) = 0;
                *(_QWORD *)(a2 + 16) = 0;
                sub_234107FB0((char *)buf, v20, a2);
                if (!*(_DWORD *)a2)
                {
                  *(_QWORD *)a2 = 0;
                  *(_QWORD *)(a2 + 8) = 0;
                  *(_QWORD *)(a2 + 16) = 0;
                  sub_233C115F0((uint64_t)buf, &v21, (_QWORD *)a2);
                  if (!*(_DWORD *)a2)
                  {
                    *(_QWORD *)a2 = 0;
                    *(_QWORD *)(a2 + 8) = 0;
                    *(_QWORD *)(a2 + 16) = 0;
                    v7 = *(_QWORD *)sub_234121AD0(a1 + 104);
                    *(_WORD *)v16 = 1;
                    sub_2341AD108(v7, 0, 51, &v21, v16, a2);
                    if (!*(_DWORD *)a2)
                    {
                      a1[728] = 5;
                      v8 = sub_234117B80(0xBu, "SecureChannel");
                      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
                      {
                        *(_WORD *)v16 = 0;
                        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Sent Sigma2Resume msg", v16, 2u);
                      }
                      if (sub_234114844(3u))
                        sub_2341147D0(0xBu, 3);
                      v9 = 0;
                      v10 = 1115;
                      goto LABEL_30;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_24:
  if (v21)
    sub_23411814C(v21);
  sub_2340F6E6C(v26);
  v11 = sub_2341C4608();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)buf = 136315394;
    v23 = "CASESession";
    v24 = 2080;
    v25 = "SendSigma2Resume";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234124628(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  size_t v23;
  _BYTE *v24;
  char *v25;
  _BYTE *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  int v30;
  int v31;
  char *v32[2];
  const void *v33[8];
  _QWORD v34[3];
  char v35;
  char *v36[2];
  char *v37[2];
  int v38;
  _QWORD v39[5];
  unsigned int v40;
  uint64_t v41[2];
  uint64_t v42[2];
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t v50[4];
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  const char *v60;
  char v61[32];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v58 = "CASESession";
    v59 = 2080;
    v60 = "SendSigma2";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_234122B6C((uint64_t)&a1[2], (uint64_t)buf);
  if (!buf[0])
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v9 = 1122;
LABEL_16:
    *(_DWORD *)(a2 + 16) = v9;
    goto LABEL_17;
  }
  if (!a1[36].n128_u64[1])
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v9 = 1123;
    goto LABEL_16;
  }
  v5 = sub_234114774(0x190uLL);
  if (!v5)
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v9 = 1126;
    goto LABEL_16;
  }
  v6 = v5;
  v7 = sub_234114774(0x190uLL);
  if (!v7)
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a2 + 16) = 1129;
    goto LABEL_21;
  }
  v8 = v7;
  sub_233CAF22C(&v48, (uint64_t)v6, 400);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_2341E3150(a1[36].n128_i64[1], a1[37].n128_u8[0], (uint64_t)&v48, a2);
  if (*(_DWORD *)a2)
    goto LABEL_10;
  sub_233CAF22C(&v46, (uint64_t)v8, 400);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_2341E3340(a1[36].n128_i64[1], a1[37].n128_u8[0], (uint64_t)&v46, a2);
  if (*(_DWORD *)a2)
    goto LABEL_10;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234139DB0(v61, 0x20uLL, a2);
  if (*(_DWORD *)a2)
    goto LABEL_10;
  v11 = sub_2341E6D8C(a1[36].n128_i64[1]);
  a1[26].n128_u64[1] = v11;
  if (!v11)
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a2 + 16) = 1143;
LABEL_10:
    j__free(v8);
    goto LABEL_11;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 48))(v11, 0);
  if (*(_DWORD *)a2)
    goto LABEL_10;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(unint64_t, uint64_t *, __n128 *))(*(_QWORD *)a1[26].n128_u64[1] + 32))(a1[26].n128_u64[1], &a1[21].n128_i64[1], a1 + 27);
  if (*(_DWORD *)a2)
    goto LABEL_10;
  v44 = buf;
  v45 = 145;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v33[0] = v61;
  v33[1] = (const void *)32;
  v12 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]);
  v52 = &a1[34].n128_i8[8];
  v53 = 16;
  sub_2341254C8(a1, v33, v12, (uint64_t)&v52, (uint64_t)&v44, (_QWORD *)a2);
  if (*(_DWORD *)a2)
    goto LABEL_10;
  v13 = *(_QWORD *)(a1[36].n128_u64[0] + 40);
  v56[0] = 0;
  v56[1] = 0;
  v55 = v13;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_233BF7114(v33, (uint64_t)v44, v45);
  v52 = "Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
  v53 = 6;
  (*(void (**)(_QWORD, __n128 *, const void **, char **, _QWORD *))(**(_QWORD **)(a1[36].n128_u64[0] + 40)
                                                                             + 56))(*(_QWORD *)(a1[36].n128_u64[0] + 40), a1 + 27, v33, &v52, v56);
  if (!*(_DWORD *)a2)
  {
    v43 = 948;
    v14 = sub_234114774(0x3B4uLL);
    if (!v14)
    {
      *(_DWORD *)a2 = 11;
      *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      *(_DWORD *)(a2 + 16) = 1162;
      goto LABEL_34;
    }
    v15 = v14;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_233BF7114(v33, v46, v47);
    sub_233BF7114(&v52, v48, v49);
    v16 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]) + 8;
    (*(void (**)(unint64_t))(*(_QWORD *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]);
    sub_233BF7114(v39, v16, 65);
    sub_233BF7114(v42, (uint64_t)&a1[22], 65);
    sub_23412562C((uint64_t)v33, (uint64_t)&v52, (uint64_t)v39, (uint64_t)v42, (uint64_t)v15, (unint64_t *)&v43, (_QWORD *)a2);
    if (*(_DWORD *)a2)
    {
LABEL_31:
      j__free(v15);
      goto LABEL_34;
    }
    v54 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v17 = a1[36].n128_i64[1];
    v18 = a1[37].n128_u8[0];
    sub_233BF7114(v41, (uint64_t)v15, v43);
    sub_2341E708C(v17, v18, v41[0], v41[1], (uint64_t)&v52, a2);
    if (*(_DWORD *)a2)
    {
      sub_23413A7A4(&v52, 64);
      goto LABEL_31;
    }
    j__free(v15);
    v19 = v47 + v49 + v54;
    v20 = sub_234114774(v19 + 50);
    if (!v20)
    {
      *(_DWORD *)a2 = 11;
      *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      *(_DWORD *)(a2 + 16) = 1178;
      goto LABEL_41;
    }
    v21 = v20;
    sub_234106C48((uint64_t)v39);
    v38 = -1;
    sub_234106C70((uint64_t)v39, (uint64_t)v21, v19 + 34);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234107E40((char *)v39, 0x100uLL, 21, &v38, a2);
    if (*(_DWORD *)a2)
      goto LABEL_39;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_233BF7114(v37, v46, v47);
    sub_2341073FC((char *)v39, 1uLL, v37[0], (unint64_t)v37[1], a2);
    if (*(_DWORD *)a2)
      goto LABEL_39;
    v22 = v49;
    if (v49)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_233BF7114(v36, v48, v22);
      sub_2341073FC((char *)v39, 2uLL, v36[0], (unint64_t)v36[1], a2);
      if (*(_DWORD *)a2)
        goto LABEL_39;
    }
    j__free(v6);
    v48 = 0;
    v49 = 0;
    j__free(v8);
    v46 = 0;
    v47 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    sub_234107438((char *)v39, 3uLL, (char *)&v52, v54, a2);
    v8 = 0;
    v6 = 0;
    if (*(_DWORD *)a2)
      goto LABEL_39;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234139DB0(&a1[40].n128_i8[4], 0x10uLL, a2);
    v8 = 0;
    v6 = 0;
    if (*(_DWORD *)a2)
      goto LABEL_39;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_2341073FC((char *)v39, 4uLL, &a1[40].n128_i8[4], 0x10uLL, a2);
    v8 = 0;
    v6 = 0;
    if (*(_DWORD *)a2)
      goto LABEL_39;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234107FB0((char *)v39, v38, a2);
    v8 = 0;
    v6 = 0;
    if (*(_DWORD *)a2)
      goto LABEL_39;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234106D88((uint64_t)v39, a2);
    v8 = 0;
    v6 = 0;
    if (*(_DWORD *)a2
      || (v23 = v40,
          *(_QWORD *)(a2 + 8) = 0,
          *(_QWORD *)(a2 + 16) = 0,
          *(_QWORD *)a2 = 0,
          sub_234138F5C((char *)v21, v23, (uint64_t)v56, (uint64_t)"NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE", 0xDuLL, (char *)v21, a2, (char *)v21 + v23, 16), v8 = 0, v6 = 0, *(_DWORD *)a2))
    {
LABEL_39:
      j__free(v21);
LABEL_41:
      sub_23413A7A4(&v52, 64);
      goto LABEL_34;
    }
    sub_234118674(v23 + 191, 0x26u, v42);
    if (!v42[0])
    {
      *(_DWORD *)a2 = 11;
      *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      *(_DWORD *)(a2 + 16) = 1223;
LABEL_59:
      v8 = 0;
      v6 = 0;
      goto LABEL_39;
    }
    sub_234106C48((uint64_t)v33);
    v34[1] = 0;
    v34[2] = 0;
    v34[0] = &unk_250504030;
    v35 = 0;
    v38 = -1;
    sub_234122BDC((uint64_t)v33, v42, 0);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234107E40((char *)v33, 0x100uLL, 21, &v38, a2);
    if (*(_DWORD *)a2)
      goto LABEL_56;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234107438((char *)v33, 1uLL, v61, 0x20u, a2);
    if (*(_DWORD *)a2)
      goto LABEL_56;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234122B6C((uint64_t)&a1[2], (uint64_t)v50);
    v24 = sub_233C05D98(v50);
    sub_234107224((char *)v33, 2uLL, *(unsigned __int16 *)v24, a2);
    if (*(_DWORD *)a2)
      goto LABEL_56;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v25 = (char *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1])
                 + 8);
    (*(void (**)(unint64_t))(*(_QWORD *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]);
    sub_234107438((char *)v33, 3uLL, v25, 0x41u, a2);
    if (*(_DWORD *)a2
      || (*(_QWORD *)a2 = 0,
          *(_QWORD *)(a2 + 8) = 0,
          *(_QWORD *)(a2 + 16) = 0,
          sub_234107438((char *)v33, 4uLL, (char *)v21, v23 + 16, a2),
          *(_DWORD *)a2))
    {
LABEL_56:
      sub_2340F6E6C(v34);
      if (v42[0])
        sub_23411814C(v42[0]);
      goto LABEL_59;
    }
    if (a1[8].n128_u8[0])
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v26 = sub_234122C20(&a1[8]);
      sub_234130CF8(5uLL, (uint64_t)v26, (char *)v33, (_QWORD *)a2);
      if (*(_DWORD *)a2)
        goto LABEL_56;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_234107FB0((char *)v33, v38, a2);
      if (*(_DWORD *)a2)
        goto LABEL_56;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_233C115F0((uint64_t)v33, v42, (_QWORD *)a2);
      if (*(_DWORD *)a2)
        goto LABEL_56;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_233BF7114(v32, *(_QWORD *)(v42[0] + 8), *(_QWORD *)(v42[0] + 24));
      sub_234139528((uint64_t)&a1[14], v32[0], (size_t)v32[1], a2);
      if (*(_DWORD *)a2)
        goto LABEL_56;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v27 = *(_QWORD *)sub_234121AD0(&a1[6].n128_u8[8]);
      *(_WORD *)v50 = 1;
      sub_2341AD108(v27, 0, 49, v42, v50, a2);
      if (*(_DWORD *)a2)
        goto LABEL_56;
      a1[45].n128_u8[8] = 2;
      v28 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v50 = 0;
        _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_DEFAULT, "Sent Sigma2 msg", v50, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0xBu, 2);
      v29 = sub_2341C4608();
      if (os_signpost_enabled(v29))
      {
        ++dword_256159670;
        *(_DWORD *)v50 = 67109120;
        v51 = dword_256159670;
        _os_signpost_emit_with_name_impl(&dword_233BF3000, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Sigma2", "%u", v50, 8u);
      }
      v30 = 0;
      v31 = 1254;
    }
    else
    {
      v31 = 1237;
      v30 = 3;
    }
    *(_DWORD *)a2 = v30;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a2 + 16) = v31;
    goto LABEL_56;
  }
LABEL_34:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v55 + 40))(v55, v56);
  sub_23413A7A4(v56, 16);
  if (v8)
    goto LABEL_10;
LABEL_11:
  if (v6)
LABEL_21:
    j__free(v6);
LABEL_17:
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    v58 = "CASESession";
    v59 = 2080;
    v60 = "SendSigma2";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234125154(uint64_t a1, _BYTE *a2, int a3)
{
  __int16 v5;
  NSObject *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  NSObject *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint8_t buf[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27[16];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = a3 != 0;
  v6 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(unsigned __int16 *)(*(_QWORD *)sub_234121AD0(a2) + 112);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a3;
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "Sending status report. Protocol code %d, exchange %d", buf, 0xEu);
  }
  if (sub_234114844(3u))
  {
    sub_234121AD0(a2);
    sub_2341147D0(0xBu, 3);
  }
  sub_2341AC914((uint64_t)&v21, v5, 0, a3);
  v8 = sub_2341ACB18(&v21);
  sub_234118674(v8, 0x26u, &v20);
  if (v20)
  {
    v9 = *(_QWORD *)(v20 + 8);
    v10 = v9 + *(_QWORD *)(v20 + 24);
    v11 = sub_23411828C(v20);
    *(_QWORD *)buf = v10;
    v24 = v11;
    v25 = 0;
    if (!v9)
      v24 = 0;
    v26 = v20;
    v20 = 0;
    sub_2341ACAAC(&v21, buf);
    sub_234118A50(buf, &v26, &v19);
    if (v19)
    {
      v17 = 0uLL;
      v18 = 0;
      v12 = *(_QWORD *)sub_234121AD0(a2);
      *(_WORD *)v27 = 0;
      sub_2341AD108(v12, 0, 64, &v19, v27, (uint64_t)&v17);
      if (!(_DWORD)v17)
        goto LABEL_22;
      v13 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)v27 = v17;
        v28 = v18;
        v14 = sub_2341083CC((const char **)v27, 1);
        *(_DWORD *)v27 = 136315138;
        *(_QWORD *)&v27[4] = v14;
        _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Failed to send status report message: %s", v27, 0xCu);
      }
      if (!sub_234114844(1u))
        goto LABEL_22;
      *(_OWORD *)v27 = v17;
      v28 = v18;
      sub_2341083CC((const char **)v27, 1);
    }
    else
    {
      v16 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Failed to allocate status report message", v27, 2u);
      }
      if (!sub_234114844(1u))
        goto LABEL_22;
    }
    sub_2341147D0(0xBu, 1);
LABEL_22:
    if (v19)
      sub_23411814C(v19);
    if (v26)
      sub_23411814C(v26);
    goto LABEL_26;
  }
  v15 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Failed to allocate status report message", buf, 2u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(0xBu, 1);
LABEL_26:
  if (v20)
    sub_23411814C(v20);
  if (v22)
    sub_23411814C(v22);
}

void sub_2341254C8(__n128 *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  bzero(*(void **)a5, *(_QWORD *)(a5 + 8));
  v12 = *(_QWORD *)(a5 + 8);
  v19 = *(void **)a5;
  v20 = v12;
  v21 = 0;
  if (!v19)
    v20 = 0;
  sub_2341150D8(&v19, *(const void **)a4, *(_QWORD *)(a4 + 8));
  sub_2341150D8(&v19, *a2, 0x20uLL);
  sub_2341150D8(&v19, (const void *)(a3 + 8), 0x41uLL);
  v17 = &v22;
  v18 = 32;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  sub_234139574(a1 + 14, (uint64_t *)&v17, a6);
  if (!*(_DWORD *)a6)
  {
    sub_2341150D8(&v19, v17, v18);
    if (v20 >= v21)
    {
      v15 = sub_2341291A4((_QWORD *)a5, 0, v21);
      v14 = 0;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v16;
      v13 = 1976;
    }
    else
    {
      v13 = 1973;
      v14 = 25;
    }
    *(_DWORD *)a6 = v14;
    a6[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a6 + 4) = v13;
  }
}

uint64_t sub_234125600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 576)
                                                                                             + 40)
                                                                               + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 40), a1 + 432, a2, a3, a4 + 8);
}

void sub_23412562C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X6>, _QWORD *a7@<X8>)
{
  unint64_t v14;
  int v15;
  char v16[44];
  unsigned int v17;

  sub_234106C48((uint64_t)v16);
  v15 = -1;
  sub_234106C70((uint64_t)v16, a5, *a6);
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  sub_234107E40(v16, 0x100uLL, 21, &v15, (uint64_t)a7);
  if (!*(_DWORD *)a7)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    sub_2341073FC(v16, 1uLL, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)a7);
    if (!*(_DWORD *)a7)
    {
      v14 = *(_QWORD *)(a2 + 8);
      if (!v14
        || (*a7 = 0, a7[1] = 0,
                       a7[2] = 0,
                       sub_2341073FC(v16, 2uLL, *(char **)a2, v14, (uint64_t)a7),
                       !*(_DWORD *)a7))
      {
        *a7 = 0;
        a7[1] = 0;
        a7[2] = 0;
        sub_2341073FC(v16, 3uLL, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)a7);
        if (!*(_DWORD *)a7)
        {
          *a7 = 0;
          a7[1] = 0;
          a7[2] = 0;
          sub_2341073FC(v16, 4uLL, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)a7);
          if (!*(_DWORD *)a7)
          {
            *a7 = 0;
            a7[1] = 0;
            a7[2] = 0;
            sub_234107FB0(v16, v15, (uint64_t)a7);
            if (!*(_DWORD *)a7)
            {
              *a7 = 0;
              a7[1] = 0;
              a7[2] = 0;
              sub_234106D88((uint64_t)v16, (uint64_t)a7);
              if (!*(_DWORD *)a7)
              {
                *a6 = v17;
                *(_DWORD *)a7 = 0;
                a7[1] = "src/protocols/secure_channel/CASESession.cpp";
                *((_DWORD *)a7 + 4) = 2061;
              }
            }
          }
        }
      }
    }
  }
}

void sub_2341257C0(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  NSObject *v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  int v17;
  int v18;
  NSObject *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  unsigned __int16 v26;
  int v27;
  char v28[16];
  char v29[16];
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;
  uint8_t v35[16];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    v31 = "CASESession";
    v32 = 2080;
    v33 = "HandleSigma2Resume";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_250504750;
  a3[2] = 1260;
  sub_234104468((uint64_t)buf);
  v34 = 0;
  v27 = 21;
  v26 = 0;
  v7 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v35 = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "Received Sigma2Resume msg", v35, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    ++dword_256159674;
    *(_DWORD *)v35 = 67109120;
    *(_DWORD *)&v35[4] = dword_256159674;
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Sigma2Resume", "%u", v35, 8u);
  }
  *(_DWORD *)v35 = 1;
  *(_QWORD *)&v35[8] = "core_dev_case_session_sigma1";
  LODWORD(v36) = 0;
  BYTE4(v36) = 3;
  sub_2341C4BEC((uint64_t)v35);
  sub_233C11670((uint64_t)buf, a2);
  sub_234106010((uint64_t)buf, v27, 256, a3);
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_23410570C((uint64_t)buf, &v27, (uint64_t)v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_2341058CC((uint64_t)buf, v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  if (*(_DWORD *)((char *)&v33 + 2) != 1)
  {
    v17 = 1279;
LABEL_38:
    v18 = 36;
LABEL_41:
    *(_DWORD *)a3 = v18;
    a3[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a3 + 4) = v17;
    goto LABEL_42;
  }
  if (sub_2341046A4((uint64_t)buf) != 16)
  {
    v17 = 1281;
LABEL_40:
    v18 = 35;
    goto LABEL_41;
  }
  sub_234104F48((uint64_t)buf, v28, 0x10uLL, (uint64_t)v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_2341058CC((uint64_t)buf, v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  if (*(_DWORD *)((char *)&v33 + 2) != 2)
  {
    v17 = 1285;
    goto LABEL_38;
  }
  if (sub_2341046A4((uint64_t)buf) != 16)
  {
    v17 = 1286;
    goto LABEL_40;
  }
  sub_234104F48((uint64_t)buf, v29, 0x10uLL, (uint64_t)v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  *(_QWORD *)&v20 = v29;
  *((_QWORD *)&v20 + 1) = 16;
  v25[0] = a1 + 660;
  v25[1] = 32;
  v24[0] = v28;
  v24[1] = 16;
  v23[0] = "Sigma2_ResumeNCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
  v23[1] = 13;
  v22[0] = (uint64_t)"NCASE_SigmaS2Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE";
  v22[1] = 13;
  sub_234123BE0(a1, (uint64_t *)&v20, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23, v22, v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_2341058CC((uint64_t)buf, v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  if (*(_DWORD *)((char *)&v33 + 2) != 3)
  {
    v17 = 1293;
    goto LABEL_38;
  }
  sub_2341049E0((uint64_t)buf, &v26, (uint64_t)v35);
  *(_OWORD *)a3 = *(_OWORD *)v35;
  a3[2] = v36;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_2341058CC((uint64_t)buf, v35);
  if (*(_DWORD *)v35 != 33)
  {
    sub_234130E60(a1 + 32, 4, (uint64_t)buf, (uint64_t)v35);
    *(_OWORD *)a3 = *(_OWORD *)v35;
    a3[2] = v36;
    if (!*(_DWORD *)a3)
    {
      v9 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 104));
      sub_233CB4208(*v9, v35);
      v10 = sub_2341CD430(*(uint64_t *)v35);
      sub_234125EDC(v10, (uint64_t *)(a1 + 144));
      (*(void (**)(_QWORD))(**(_QWORD **)v35 + 32))(*(_QWORD *)v35);
      goto LABEL_26;
    }
LABEL_42:
    sub_234125154(a1 + 32, (_BYTE *)(a1 + 104), 2);
    goto LABEL_43;
  }
LABEL_26:
  v11 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v35 = 67109120;
    *(_DWORD *)&v35[4] = v26;
    _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "Peer assigned session session ID %d", v35, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  v12 = v26;
  *(_BYTE *)(a1 + 176) = 1;
  *(_WORD *)(a1 + 178) = v12;
  v13 = *(_QWORD *)(a1 + 568);
  if (v13)
  {
    v20 = 0uLL;
    v21 = 0;
    *(_QWORD *)v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    *(_QWORD *)&v35[8] = v14;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint8_t *, char *, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(&v20, v13, v35, v28, a1 + 432, a1 + 616);
    if ((_DWORD)v20)
    {
      v15 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)v35 = v20;
        v36 = v21;
        v16 = sub_2341083CC((const char **)v35, 1);
        *(_DWORD *)v35 = 136315138;
        *(_QWORD *)&v35[4] = v16;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Unable to save session resumption state: %s", v35, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)v35 = v20;
        v36 = v21;
        sub_2341083CC((const char **)v35, 1);
        sub_2341147D0(0xBu, 1);
      }
    }
  }
  *(_DWORD *)v35 = 2;
  *(_QWORD *)&v35[8] = "core_dev_case_session_sigma_finished";
  BYTE4(v36) = 0;
  sub_2341C4BEC((uint64_t)v35);
  sub_234125154(a1 + 32, (_BYTE *)(a1 + 104), 0);
  *(_BYTE *)(a1 + 728) = 7;
  sub_234130984(a1 + 32);
LABEL_43:
  if (v34)
    sub_23411814C(v34);
  v19 = sub_2341C4608();
  if (os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 136315394;
    v31 = "CASESession";
    v32 = 2080;
    v33 = "HandleSigma2Resume";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_234125EDC(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  int v4;

  v2 = *a2;
  *(_WORD *)(result + 112) = *((_WORD *)a2 + 4);
  *(_QWORD *)(result + 104) = v2;
  LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
  *(_BYTE *)(result + 116) = v2;
  if ((_DWORD)v2)
    *(_WORD *)(result + 118) = *((_WORD *)a2 + 7);
  v3 = *((unsigned __int8 *)a2 + 16);
  *(_BYTE *)(result + 120) = v3;
  if (v3)
    *(_WORD *)(result + 122) = *((_WORD *)a2 + 9);
  v4 = *((unsigned __int8 *)a2 + 20);
  *(_BYTE *)(result + 124) = v4;
  if (v4)
    *(_DWORD *)(result + 128) = *((_DWORD *)a2 + 6);
  *(_WORD *)(result + 132) = *((_WORD *)a2 + 14);
  return result;
}

void sub_234125F34(__n128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  int v10;
  char v11;
  uint8_t buf[24];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "HandleSigma2_and_SendSigma3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  memset(buf, 0, sizeof(buf));
  sub_234126134(a1, a2, (uint64_t)buf);
  v8 = 1;
  v9 = "core_dev_case_session_sigma1";
  v10 = *(_DWORD *)buf;
  v11 = 3;
  sub_2341C4BEC((uint64_t)&v8);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (!*(_DWORD *)a3)
  {
    v8 = 0;
    v9 = "core_dev_case_session_sigma3";
    v11 = 0;
    sub_2341C4BEC((uint64_t)&v8);
    sub_234126D3C((uint64_t)a1, (uint64_t)buf);
    if (*(_DWORD *)buf)
    {
      v8 = 1;
      v9 = "core_dev_case_session_sigma3";
      v10 = *(_DWORD *)buf;
      v11 = 3;
      sub_2341C4BEC((uint64_t)&v8);
    }
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "HandleSigma2_and_SendSigma3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234126134(__n128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  NSObject *v14;
  unsigned __int16 v15;
  char *v16;
  int v17;
  int v18;
  NSObject *v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29[2];
  char *v30;
  uint64_t v31;
  const void *v32[2];
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned __int16 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  size_t __n;
  int v42;
  _BYTE v43[16];
  int v44;
  _BYTE v45[72];
  uint64_t v46;
  char v47[32];
  _QWORD v48[10];
  char v49[64];
  unint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  _BYTE buf[144];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "HandleSigma2";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_250504768;
  *(_QWORD *)(a3 + 16) = 1346;
  sub_234104468((uint64_t)v45);
  v46 = 0;
  sub_234104468((uint64_t)v43);
  v42 = 21;
  v7 = *(char **)(*a2 + 8);
  v8 = *(_QWORD *)(*a2 + 24);
  v40 = 0;
  __n = 0;
  v9 = *(_QWORD *)(a1[36].n128_u64[0] + 40);
  v52[1] = 0;
  v51 = v9;
  v52[0] = 0;
  v50 = 0;
  v48[0] = &off_250505A50;
  v39 = 0uLL;
  v38 = 0uLL;
  v37 = 0;
  v10 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Received Sigma2 msg", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xBu, 2);
  v11 = a1[36].n128_i64[1];
  if (!v11)
  {
    v7 = 0;
    v16 = 0;
    v17 = 1382;
LABEL_26:
    v18 = 3;
LABEL_27:
    *(_DWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a3 + 16) = v17;
    goto LABEL_28;
  }
  v12 = sub_2341E2E70(v11, a1[37].n128_u8[0]);
  if (!v12)
  {
    v7 = 0;
    v16 = 0;
    v17 = 1384;
    goto LABEL_26;
  }
  if (!a1[26].n128_u64[1])
  {
    v7 = 0;
    v16 = 0;
    v17 = 1388;
    v18 = 172;
    goto LABEL_27;
  }
  if (!v7)
  {
    v16 = 0;
    v17 = 1389;
    v18 = 13;
    goto LABEL_27;
  }
  v13 = *(const void **)(v12 + 8);
  sub_233C11670((uint64_t)v45, a2);
  sub_234106010((uint64_t)v45, v42, 256, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_23;
  sub_23410570C((uint64_t)v45, &v42, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_23;
  sub_234106010((uint64_t)v45, 16, 1, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_23;
  sub_234104F48((uint64_t)v45, v47, 0x20uLL, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_23;
  sub_234106010((uint64_t)v45, 4, 2, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_23;
  sub_2341049E0((uint64_t)v45, &v37, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_23;
  v14 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v37;
    _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_INFO, "Peer assigned session session ID %d", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  v15 = v37;
  a1[11].n128_u8[0] = 1;
  a1[11].n128_u16[1] = v15;
  sub_234106010((uint64_t)v45, 16, 3, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3
    || (sub_234104F48((uint64_t)v45, (char *)&a1[22], 0x41uLL, (uint64_t)buf),
        *(_OWORD *)a3 = *(_OWORD *)buf,
        *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16],
        *(_DWORD *)a3))
  {
LABEL_23:
    v7 = 0;
    v16 = 0;
LABEL_28:
    sub_234125154((uint64_t)&a1[2], &a1[6].n128_u8[8], 2);
    goto LABEL_29;
  }
  (*(void (**)(_BYTE *__return_ptr, unint64_t, uint64_t *, __n128 *))(*(_QWORD *)a1[26].n128_u64[1]
                                                                                     + 32))(buf, a1[26].n128_u64[1], &a1[21].n128_i64[1], a1 + 27);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_41;
  v35 = buf;
  v36 = 145;
  v32[0] = v47;
  v32[1] = (const void *)32;
  v30 = &a1[34].n128_i8[8];
  v31 = 16;
  sub_2341254C8(a1, v32, (uint64_t)&a1[21].n128_i64[1], (uint64_t)&v30, (uint64_t)&v35, &v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3
    || (sub_233BF7114(v32, (uint64_t)v35, v36),
        v30 = "Sigma2NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE",
        v31 = 6,
        (*(void (**)(__int128 *__return_ptr, _QWORD, __n128 *, const void **, char **, _QWORD *))(**(_QWORD **)(a1[36].n128_u64[0] + 40) + 56))(&v33, *(_QWORD *)(a1[36].n128_u64[0] + 40), a1 + 27, v32, &v30, v52), *(_OWORD *)a3 = v33, *(_QWORD *)(a3 + 16) = v34, *(_DWORD *)a3))
  {
    v16 = 0;
    v7 = 0;
    goto LABEL_47;
  }
  sub_233BF7114(v29, (uint64_t)v7, v8);
  sub_234139528((uint64_t)&a1[14], v29[0], (size_t)v29[1], (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3
    || (sub_234106010((uint64_t)v45, 16, 4, &v33), *(_OWORD *)a3 = v33, *(_QWORD *)(a3 + 16) = v34, *(_DWORD *)a3))
  {
LABEL_41:
    v7 = 0;
LABEL_42:
    v16 = 0;
    goto LABEL_28;
  }
  v20 = v50 + 966;
  v21 = sub_2341046A4((uint64_t)v45);
  if (v20 < v21)
  {
    v7 = 0;
    v16 = 0;
    v17 = 1431;
LABEL_76:
    v18 = 35;
    goto LABEL_27;
  }
  v22 = v21;
  if (v21 < 0x11)
  {
    v7 = 0;
    v16 = 0;
    v17 = 1432;
    goto LABEL_76;
  }
  v7 = (char *)sub_234114774(v21);
  if (!v7)
  {
    v16 = 0;
    v17 = 1433;
LABEL_79:
    v18 = 11;
    goto LABEL_27;
  }
  sub_234104F48((uint64_t)v45, v7, v22, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_2341391E0(v7, v22 - 16, (uint64_t)&v7[v22 - 16], 16, (uint64_t)v52, (uint64_t)"NCASE_Sigma2NSigma3NCASE_Sigma3NN4chip11CASESessionE", (uint64_t)&v33, 13, v7);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_234104498((uint64_t)v43, (uint64_t)v7, v22 - 16);
  v42 = 21;
  sub_234106010((uint64_t)v43, 21, 256, &v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_23410570C((uint64_t)v43, &v42, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_234106010((uint64_t)v43, 16, 1, &v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_234104B68((uint64_t)v43, &v39, &v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  sub_2341058CC((uint64_t)v43, &v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_42;
  if (v44 == 2)
  {
    if (sub_23410462C((uint64_t)v43) != 16)
    {
      v16 = 0;
      v17 = 1453;
      v18 = 38;
      goto LABEL_27;
    }
    sub_234104B68((uint64_t)v43, &v38, &v33);
    *(_OWORD *)a3 = v33;
    *(_QWORD *)(a3 + 16) = v34;
    if (*(_DWORD *)a3)
      goto LABEL_42;
    sub_234106010((uint64_t)v43, 16, 3, &v33);
    *(_OWORD *)a3 = v33;
    *(_QWORD *)(a3 + 16) = v34;
    if (*(_DWORD *)a3)
      goto LABEL_42;
  }
  v35 = 0;
  v32[0] = 0;
  sub_234127210((uint64_t)a1, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3
    || (sub_2341E28C0(a1[36].n128_i64[1], a1[37].n128_u8[0], (uint64_t)&v39, (uint64_t *)&v38, (uint64_t)&a1[29].n128_i64[1], &v35, (unint64_t *)v32, &v40, &v33, (uint64_t)v48, 0), *(_OWORD *)a3 = v33, *(_QWORD *)(a3 + 16) = v34, *(_DWORD *)a3))
  {
LABEL_84:
    v16 = 0;
    goto LABEL_47;
  }
  if (v13 != v32[0])
  {
    v24 = 1466;
LABEL_83:
    *(_DWORD *)a3 = 84;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a3 + 16) = v24;
    goto LABEL_84;
  }
  if (a1[37].n128_u64[1] != v40)
  {
    v24 = 1469;
    goto LABEL_83;
  }
  __n = *((_QWORD *)&v39 + 1) + *((_QWORD *)&v38 + 1) + 154;
  v16 = (char *)sub_234114774(__n);
  if (!v16)
  {
    v17 = 1476;
    goto LABEL_79;
  }
  sub_233BF7114(&v35, (uint64_t)&a1[22], 65);
  v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]) + 8;
  (*(void (**)(unint64_t))(*(_QWORD *)a1[26].n128_u64[1] + 40))(a1[26].n128_u64[1]);
  sub_233BF7114(v32, v23, 65);
  sub_23412562C((uint64_t)&v39, (uint64_t)&v38, (uint64_t)&v35, (uint64_t)v32, (uint64_t)v16, &__n, &v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  if (v44 != 3)
  {
    v17 = 1482;
    v18 = 36;
    goto LABEL_27;
  }
  if (sub_2341046A4((uint64_t)v43) > 0x40)
  {
    v17 = 1483;
    goto LABEL_76;
  }
  v25 = sub_2341046A4((uint64_t)v43);
  if (v25 >= 0x41)
  {
    v26 = v50;
  }
  else
  {
    v26 = v25;
    v50 = v25;
  }
  sub_234104F48((uint64_t)v43, v49, v26, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_23413A038(v16, __n, (uint64_t)v48, (uint64_t)v49, &v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_234106010((uint64_t)v43, 16, 4, &v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_234104F48((uint64_t)v43, &a1[40].n128_i8[4], 0x10uLL, (uint64_t)&v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_2341D8570((uint64_t)&v39, (uint64_t)&a1[38].n128_i64[1], &v33);
  *(_OWORD *)a3 = v33;
  *(_QWORD *)(a3 + 16) = v34;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_2341058CC((uint64_t)v45, &v33);
  if ((_DWORD)v33 != 33)
  {
    sub_234130E60((uint64_t)&a1[2], 5, (uint64_t)v45, (uint64_t)&v33);
    *(_OWORD *)a3 = v33;
    *(_QWORD *)(a3 + 16) = v34;
    if (*(_DWORD *)a3)
      goto LABEL_28;
    v27 = (uint64_t *)sub_234121AD0(&a1[6].n128_u8[8]);
    sub_233CB4208(*v27, &v33);
    v28 = sub_2341CD430(v33);
    sub_234125EDC(v28, (uint64_t *)&a1[9]);
    (*(void (**)(_QWORD))(*(_QWORD *)v33 + 32))(v33);
  }
LABEL_47:
  if (*(_DWORD *)a3)
    goto LABEL_28;
LABEL_29:
  sub_23413A7A4(v49, 64);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v51 + 40))(v51, v52);
  sub_23413A7A4(v52, 16);
  if (v16)
    j__free(v16);
  if (v7)
    j__free(v7);
  if (v46)
    sub_23411814C(v46);
  v19 = sub_2341C4608();
  if (os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "HandleSigma2";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234126D3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  NSObject *v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD *v27;
  std::__shared_weak_count *v28;
  _BYTE buf[24];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendSigma3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a2 = xmmword_250504780;
  *(_QWORD *)(a2 + 16) = 1516;
  v5 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_INFO, "Sending Sigma3", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  sub_234127494(a1, (uint64_t)sub_234127568, (uint64_t)sub_2341277CC, 0, &v27);
  v6 = v27;
  if (!v27)
  {
    v11 = 1521;
LABEL_15:
    v12 = 11;
LABEL_31:
    *(_DWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a2 + 16) = v11;
    goto LABEL_32;
  }
  if (!*(_QWORD *)(a1 + 584))
  {
    v11 = 1525;
    v12 = 3;
    goto LABEL_31;
  }
  v7 = *(_BYTE *)(a1 + 592);
  v27[13] = 0;
  *((_BYTE *)v6 + 96) = v7;
  v6[14] = 0;
  v8 = sub_2341E2E70(*(_QWORD *)(a1 + 584), *(unsigned __int8 *)(a1 + 592));
  if (!v8)
  {
    v11 = 1532;
    v12 = 16;
    goto LABEL_31;
  }
  v9 = *(_QWORD *)(a1 + 584);
  if (!*(_QWORD *)(v8 + 144))
  {
    v10 = *(_QWORD *)(v9 + 2592);
    if (v10)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10) & 1) != 0)
      {
        v6[14] = v10;
        goto LABEL_20;
      }
      v9 = *(_QWORD *)(a1 + 584);
    }
  }
  v6[13] = v9;
LABEL_20:
  if (!*(_QWORD *)(a1 + 424))
  {
    v11 = 1546;
    v12 = 172;
    goto LABEL_31;
  }
  sub_234104068((void **)v6 + 19, 0x190uLL);
  v13 = v6[19];
  if (!v13)
  {
    v11 = 1548;
    goto LABEL_15;
  }
  sub_233CAF22C(buf, v13, 400);
  *((_OWORD *)v6 + 10) = *(_OWORD *)buf;
  sub_234104068((void **)v6 + 22, 0x190uLL);
  v14 = v6[22];
  if (!v14)
  {
    v11 = 1551;
    goto LABEL_15;
  }
  sub_233CAF22C(buf, v14, 400);
  *(_OWORD *)(v6 + 23) = *(_OWORD *)buf;
  sub_2341E3150(*(_QWORD *)(a1 + 584), *(unsigned __int8 *)(a1 + 592), (uint64_t)(v6 + 20), a2);
  if (*(_DWORD *)a2)
    goto LABEL_32;
  sub_2341E3340(*(_QWORD *)(a1 + 584), *(unsigned __int8 *)(a1 + 592), (uint64_t)(v6 + 23), (uint64_t)buf);
  *(_OWORD *)a2 = *(_OWORD *)buf;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a2)
    goto LABEL_32;
  v15 = v6[21] + v6[24] + 148;
  v6[16] = v15;
  sub_234104068((void **)v6 + 15, v15);
  if (!v6[15])
  {
    v11 = 1561;
    goto LABEL_15;
  }
  sub_233BF7114(v26, v6[23], v6[24]);
  sub_233BF7114(v25, v6[20], v6[21]);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 40))(*(_QWORD *)(a1 + 424)) + 8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 40))(*(_QWORD *)(a1 + 424));
  sub_233BF7114(v24, v16, 65);
  sub_233BF7114(v23, a1 + 352, 65);
  sub_23412562C((uint64_t)v26, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23, v6[15], v6 + 16, buf);
  *(_OWORD *)a2 = *(_OWORD *)buf;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a2)
    goto LABEL_32;
  if (!v6[14])
  {
    sub_234127E14((uint64_t)v27, (uint64_t)buf);
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
    if (!*(_DWORD *)a2)
      goto LABEL_34;
    goto LABEL_32;
  }
  sub_234127C64(v27, buf);
  *(_OWORD *)a2 = *(_OWORD *)buf;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a2)
  {
LABEL_32:
    sub_234125154(a1 + 32, (_BYTE *)(a1 + 104), 2);
    v18 = 0;
    goto LABEL_33;
  }
  sub_234127D9C((_QWORD *)(a1 + 696), (uint64_t *)&v27);
  v17 = sub_234121AD0((_BYTE *)(a1 + 104));
  *(_WORD *)(*(_QWORD *)v17 + 8) |= 0x40u;
  v18 = 8;
LABEL_33:
  *(_BYTE *)(a1 + 728) = v18;
LABEL_34:
  v19 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = sub_2341C4608();
  if (os_signpost_enabled(v22))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendSigma3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_234127210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;
  NSObject *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint8_t buf[16];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v11 = 0uLL;
  v12 = 0;
  (*((void (**)(uint64_t@<X0>, unint64_t *@<X1>, _QWORD *@<X8>))*off_256157A10 + 6))((uint64_t)off_256157A10, &v13, &v11);
  if ((_DWORD)v11)
  {
    v4 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v11;
      v15 = v12;
      v5 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "The device does not support GetClock_RealTimeMS() API: %s.  Falling back to Last Known Good UTC Time", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = v11;
      v15 = v12;
      sub_2341083CC((const char **)buf, 1);
      result = sub_2341147D0(0xBu, 1);
    }
    v7 = *(_QWORD *)(a1 + 584);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 2632))
      {
        result = (uint64_t)sub_23412A1D8((_BYTE *)(v7 + 2632));
        *(_DWORD *)(a1 + 480) = *(_DWORD *)result;
        *(_QWORD *)(a1 + 472) = 1;
      }
      else
      {
        LODWORD(v11) = 3;
        *((_QWORD *)&v11 + 1) = "src/credentials/LastKnownGoodTime.h";
        LODWORD(v12) = 54;
        v10 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed to retrieve Last Known Good UTC Time", buf, 2u);
        }
        result = sub_234114844(1u);
        if ((_DWORD)result)
          result = sub_2341147D0(0xBu, 1);
      }
      goto LABEL_17;
    }
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v9 = 2086;
  }
  else
  {
    v8 = v13 >> 3;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)buf = 0;
    result = sub_234117638((unint64_t)((v8 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4, buf);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 480) = *(_DWORD *)buf;
      *(_QWORD *)(a1 + 472) = 0;
LABEL_17:
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v9 = 2099;
      goto LABEL_18;
    }
    *(_DWORD *)a2 = 134;
    *(_QWORD *)(a2 + 8) = "src/credentials/CHIPCertificateSet.h";
    v9 = 90;
  }
LABEL_18:
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

void sub_234127494(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  v10 = (char *)sub_234114774(0x110uLL);
  v11 = v10;
  if (v10)
  {
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    *((_QWORD *)v10 + 4) = a1;
    *((_QWORD *)v10 + 5) = a2;
    *((_QWORD *)v10 + 6) = a3;
    *((_QWORD *)v10 + 7) = a4;
    v10[88] = 0;
    *((_QWORD *)v10 + 15) = 0;
    *((_QWORD *)v10 + 17) = 0;
    *((_QWORD *)v10 + 33) = 0;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
  }
  v12 = (_QWORD *)operator new();
  v13 = v12;
  *v12 = &unk_250504870;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v11;
  if (v11)
  {
    v14 = v12 + 2;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = (std::__shared_weak_count *)v11[1];
    *v11 = v11;
    v11[1] = v13;
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
  }
  *a5 = v11;
  a5[1] = v13;
}

void sub_234127568(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  char *v14[2];
  char *v15[2];
  int v16;
  _QWORD v17[5];
  unsigned int v18;
  uint64_t v19[2];

  v4 = *((_QWORD *)a1 + 2);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    v5 = *a1;
    sub_233BF7114(v17, *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
    (*(void (**)(uint64_t, uint64_t, _QWORD *, unsigned __int8 *))(*(_QWORD *)v4 + 96))(v4, v5, v17, a1 + 104);
  }
  else
  {
    v6 = *((_QWORD *)a1 + 1);
    v7 = *a1;
    sub_233BF7114(v19, *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
    sub_2341E708C(v6, v7, v19[0], v19[1], (uint64_t)(a1 + 104), (uint64_t)a2);
  }
  if (*(_DWORD *)a2)
    return;
  v8 = *((_QWORD *)a1 + 12) + *((_QWORD *)a1 + 9) + *((_QWORD *)a1 + 21);
  *((_QWORD *)a1 + 6) = v8 + 14;
  sub_234104068((void **)a1 + 5, v8 + 30);
  if (!*((_QWORD *)a1 + 5))
  {
    *(_DWORD *)a2 = 11;
    a2[1] = "src/protocols/secure_channel/CASESession.cpp";
    v13 = 1611;
    goto LABEL_20;
  }
  sub_234106C48((uint64_t)v17);
  v16 = -1;
  sub_234106C70((uint64_t)v17, *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_234107E40((char *)v17, 0x100uLL, 21, &v16, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_233BF7114(v15, *((_QWORD *)a1 + 11), *((_QWORD *)a1 + 12));
    sub_2341073FC((char *)v17, 1uLL, v15[0], (unint64_t)v15[1], (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      v9 = (uint64_t *)(a1 + 64);
      v10 = *((_QWORD *)a1 + 9);
      if (!v10
        || (*a2 = 0,
            a2[1] = 0,
            a2[2] = 0,
            sub_233BF7114(v14, *v9, v10),
            sub_2341073FC((char *)v17, 2uLL, v14[0], (unint64_t)v14[1], (uint64_t)a2),
            !*(_DWORD *)a2))
      {
        v11 = (void *)*((_QWORD *)a1 + 7);
        if (v11)
        {
          j__free(v11);
          *((_QWORD *)a1 + 7) = 0;
        }
        *v9 = 0;
        *((_QWORD *)a1 + 9) = 0;
        v12 = (void *)*((_QWORD *)a1 + 10);
        if (v12)
        {
          j__free(v12);
          *((_QWORD *)a1 + 10) = 0;
        }
        *((_QWORD *)a1 + 11) = 0;
        *((_QWORD *)a1 + 12) = 0;
        a2[1] = 0;
        a2[2] = 0;
        *a2 = 0;
        sub_234107438((char *)v17, 3uLL, (char *)a1 + 104, *((_DWORD *)a1 + 42), (uint64_t)a2);
        if (!*(_DWORD *)a2)
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          sub_234107FB0((char *)v17, v16, (uint64_t)a2);
          if (!*(_DWORD *)a2)
          {
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            sub_234106D88((uint64_t)v17, (uint64_t)a2);
            if (!*(_DWORD *)a2)
            {
              *((_QWORD *)a1 + 6) = v18;
              *(_DWORD *)a2 = 0;
              a2[1] = "src/protocols/secure_channel/CASESession.cpp";
              v13 = 1641;
LABEL_20:
              *((_DWORD *)a2 + 4) = v13;
            }
          }
        }
      }
    }
  }
}

void sub_2341277CC(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  __int128 v11;
  uint64_t v12;
  char *v13[2];
  uint8_t buf[16];
  uint64_t v15;
  _QWORD v16[3];
  char v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v7 = *(_QWORD *)(a1[36].n128_u64[0] + 40);
  v24[0] = 0;
  v24[1] = 0;
  v23 = v7;
  if (*(_QWORD *)(a2 + 16) && a1[45].n128_u8[8] != 8)
    sub_23425A36C();
  *(_OWORD *)a4 = *(_OWORD *)a3;
  a4[2] = *(_QWORD *)(a3 + 16);
  v8 = *(_DWORD *)a4;
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)&v21 = &v25;
    *((_QWORD *)&v21 + 1) = 48;
    *(_QWORD *)buf = (char *)a1 + 552;
    *(_QWORD *)&buf[8] = 16;
    sub_234127F24(a1, (uint64_t)buf, (uint64_t)&v21, a4);
    v8 = *(_DWORD *)a4;
    if (!*(_DWORD *)a4)
    {
      sub_233BF7114(v19, v21, *((uint64_t *)&v21 + 1));
      v18[0] = "Sigma3NCASE_Sigma3NN4chip11CASESessionE";
      v18[1] = 6;
      (*(void (**)(uint8_t *__return_ptr, _QWORD, __n128 *, _QWORD *, _QWORD *, _QWORD *))(**(_QWORD **)(a1[36].n128_u64[0] + 40) + 56))(buf, *(_QWORD *)(a1[36].n128_u64[0] + 40), a1 + 27, v19, v18, v24);
      *(_OWORD *)a4 = *(_OWORD *)buf;
      a4[2] = v15;
      v8 = *(_DWORD *)a4;
      if (!*(_DWORD *)a4)
      {
        sub_234138F5C(*(char **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)v24, (uint64_t)"NCASE_Sigma3NN4chip11CASESessionE", 0xDuLL, *(char **)(a2 + 40), (uint64_t)buf, (char *)(*(_QWORD *)(a2 + 40) + *(_QWORD *)(a2 + 48)), 16);
        *(_OWORD *)a4 = *(_OWORD *)buf;
        a4[2] = v15;
        v8 = *(_DWORD *)a4;
        if (!*(_DWORD *)a4)
        {
          sub_234118674(*(_QWORD *)(a2 + 48) + 26, 0x26u, buf);
          v20 = *(_QWORD *)buf;
          if (*(_QWORD *)buf)
          {
            sub_234106C48((uint64_t)buf);
            v16[1] = 0;
            v16[2] = 0;
            v16[0] = &unk_250504030;
            v17 = 0;
            LODWORD(v19[0]) = -1;
            sub_233CAF098((uint64_t)v16, &v20, 0);
            sub_234106CA8((uint64_t)buf, (uint64_t)v16, 0xFFFFFFFF, (uint64_t)&v21);
            sub_234107E40((char *)buf, 0x100uLL, 21, v19, (uint64_t)&v21);
            *(_OWORD *)a4 = v21;
            a4[2] = v22;
            v8 = *(_DWORD *)a4;
            if (*(_DWORD *)a4)
              goto LABEL_12;
            sub_234107438((char *)buf, 1uLL, *(char **)(a2 + 40), *(_DWORD *)(a2 + 48) + 16, (uint64_t)&v21);
            *(_OWORD *)a4 = v21;
            a4[2] = v22;
            v8 = *(_DWORD *)a4;
            if (*(_DWORD *)a4)
              goto LABEL_12;
            sub_234107FB0((char *)buf, v19[0], (uint64_t)&v21);
            *(_OWORD *)a4 = v21;
            a4[2] = v22;
            v8 = *(_DWORD *)a4;
            if (*(_DWORD *)a4
              || (sub_233C115F0((uint64_t)buf, &v20, &v21), *(_OWORD *)a4 = v21, a4[2] = v22, (v8 = *(_DWORD *)a4) != 0))
            {
LABEL_12:
              sub_2340F6E6C(v16);
            }
            else
            {
              sub_2340F6E6C(v16);
              sub_233BF7114(v13, *(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 24));
              sub_234139528((uint64_t)&a1[14], v13[0], (size_t)v13[1], (uint64_t)buf);
              *(_OWORD *)a4 = *(_OWORD *)buf;
              a4[2] = v15;
              v8 = *(_DWORD *)a4;
              if (!*(_DWORD *)a4)
              {
                v9 = *(_QWORD *)sub_234121AD0(&a1[6].n128_u8[8]);
                LOWORD(v21) = 1;
                sub_2341AD108(v9, 0, 50, &v20, &v21, (uint64_t)buf);
                *(_OWORD *)a4 = *(_OWORD *)buf;
                a4[2] = v15;
                v8 = *(_DWORD *)a4;
                if (!*(_DWORD *)a4)
                {
                  v10 = sub_234117B80(0xBu, "SecureChannel");
                  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Sent Sigma3 msg", buf, 2u);
                  }
                  if (sub_234114844(2u))
                    sub_2341147D0(0xBu, 2);
                  *(_QWORD *)&v21 = (char *)a1 + 520;
                  *((_QWORD *)&v21 + 1) = 32;
                  sub_234139610((uint64_t)&a1[14], (uint64_t *)&v21, (uint64_t)buf);
                  *(_OWORD *)a4 = *(_OWORD *)buf;
                  a4[2] = v15;
                  v8 = *(_DWORD *)a4;
                  if (!*(_DWORD *)a4)
                    a1[45].n128_u8[8] = 3;
                }
              }
            }
          }
          else
          {
            v8 = 11;
            *(_DWORD *)a4 = 11;
            a4[1] = "src/protocols/secure_channel/CASESession.cpp";
            *((_DWORD *)a4 + 4) = 1676;
          }
        }
      }
    }
  }
  sub_234120924(&a1[43].n128_u64[1]);
  if (*(_QWORD *)(a2 + 16) && v8)
  {
    sub_234125154((uint64_t)&a1[2], &a1[6].n128_u8[8], 2);
    sub_234130C60((uint64_t)&a1[2]);
    v11 = *(_OWORD *)a4;
    v12 = a4[2];
    sub_2341209E4((uint64_t)a1, (uint64_t)&v11);
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 40))(v23, v24);
  sub_23413A7A4(v24, 16);
  if (v20)
    sub_23411814C(v20);
}

void sub_234127C64(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v3 = atomic_load(a1 + 4);
  if (v3 && a1[5] && a1[7] & 1 | a1[6])
  {
    v9 = 0uLL;
    v5 = (std::__shared_weak_count *)a1[1];
    if (v5)
    {
      *((_QWORD *)&v9 + 1) = std::__shared_weak_count::lock(v5);
      if (*((_QWORD *)&v9 + 1))
        *(_QWORD *)&v9 = *a1;
    }
    sub_23412A514((uint64_t)(a1 + 2), &v9);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    sub_2341BE0D4((uint64_t)&qword_2542530D0, (uint64_t)sub_23412A578, (uint64_t)a1, a2);
    if (*(_DWORD *)a2)
      sub_234120924(a1 + 2);
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a2 + 4) = 203;
  }
}

_QWORD *sub_234127D9C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *sub_234127E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  _QWORD *(*v6)(__int128 *__return_ptr, uint64_t, char *);
  __int128 *v7;
  unint64_t v8;
  _QWORD *(*v9)(__int128 *__return_ptr, _QWORD *, uint64_t, __int128 *);
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  result = (_QWORD *)sub_2341B1F64("src/protocols/secure_channel/CASESession.cpp", 186);
  v5 = atomic_load((unint64_t *)(a1 + 32));
  if (v5
    && (v6 = *(_QWORD *(**)(__int128 *__return_ptr, uint64_t, char *))(a1 + 40)) != 0
    && *(_QWORD *)(a1 + 56) & 1 | *(_QWORD *)(a1 + 48))
  {
    v16 = 0;
    result = v6(&v14, a1 + 96, &v16);
    v7 = (__int128 *)(a1 + 64);
    *(_OWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    if (!v16)
    {
      v8 = atomic_load((unint64_t *)(a1 + 32));
      v9 = *(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, uint64_t, __int128 *))(a1 + 48);
      v10 = *(_QWORD *)(a1 + 56);
      v11 = (_QWORD *)(v8 + (v10 >> 1));
      if ((v10 & 1) != 0)
        v9 = *(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, uint64_t, __int128 *))(*v11 + v9);
      v12 = *v7;
      v13 = *(_QWORD *)(a1 + 80);
      result = v9(&v14, v11, a1 + 96, &v12);
      *v7 = v14;
      *(_QWORD *)(a1 + 80) = v15;
    }
    *(_OWORD *)a2 = *v7;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 80);
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a2 + 16) = 188;
  }
  return result;
}

void sub_234127F24(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  bzero(*(void **)a3, *(_QWORD *)(a3 + 8));
  v8 = *(_QWORD *)(a3 + 8);
  v15 = *(void **)a3;
  v16 = v8;
  v17 = 0;
  if (!v15)
    v16 = 0;
  sub_2341150D8(&v15, *(const void **)a2, *(_QWORD *)(a2 + 8));
  v13 = &v18;
  v14 = 32;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_234139574(a1 + 14, (uint64_t *)&v13, a4);
  if (!*(_DWORD *)a4)
  {
    sub_2341150D8(&v15, v13, v14);
    if (v16 >= v17)
    {
      v11 = sub_2341291A4((_QWORD *)a3, 0, v17);
      v10 = 0;
      *(_QWORD *)a3 = v11;
      *(_QWORD *)(a3 + 8) = v12;
      v9 = 1994;
    }
    else
    {
      v9 = 1991;
      v10 = 25;
    }
    *(_DWORD *)a4 = v10;
    a4[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a4 + 4) = v9;
  }
}

void sub_23412802C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  NSObject *v21;
  unsigned int v22;
  unint64_t v23;
  _OWORD *v24;
  uint64_t *v25;
  size_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  __int128 v31;
  _BYTE *v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  char *v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD *v39;
  std::__shared_weak_count *v40;
  int v41;
  _BYTE v42[16];
  int v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _QWORD v48[2];
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    v50 = "CASESession";
    v51 = 2080;
    v52 = "HandleSigma3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_250504798;
  *(_QWORD *)(a3 + 16) = 1730;
  sub_234104468((uint64_t)buf);
  v53 = 0;
  sub_234104468((uint64_t)v42);
  v41 = 21;
  v7 = *(_QWORD *)(*a2 + 8);
  v8 = *(_QWORD *)(*a2 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 40);
  v48[0] = 0;
  v48[1] = 0;
  v47 = v9;
  v10 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v44) = 0;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Received Sigma3 msg", (uint8_t *)&v44, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xBu, 2);
  v11 = sub_2341C4608();
  if (os_signpost_enabled(v11))
  {
    ++dword_256159678;
    LODWORD(v44) = 67109120;
    DWORD1(v44) = dword_256159678;
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Sigma3", "%u", (uint8_t *)&v44, 8u);
  }
  LODWORD(v44) = 1;
  *((_QWORD *)&v44 + 1) = "core_dev_case_session_sigma2";
  LODWORD(v45) = *(_DWORD *)a3;
  BYTE4(v45) = 3;
  sub_2341C4BEC((uint64_t)&v44);
  sub_234128BE8(a1, (uint64_t)sub_234128CCC, (uint64_t)sub_234128DCC, 0, &v39);
  v12 = v39;
  if (!v39)
  {
    v16 = 0;
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v17 = 1754;
LABEL_21:
    *(_DWORD *)(a3 + 16) = v17;
    goto LABEL_22;
  }
  v13 = *(_QWORD *)(a1 + 584);
  if (!v13)
  {
    v16 = 0;
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v17 = 1759;
    goto LABEL_21;
  }
  v14 = sub_2341E2E70(v13, *(unsigned __int8 *)(a1 + 592));
  if (!v14)
  {
    v16 = 0;
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v17 = 1761;
    goto LABEL_21;
  }
  v12[79] = *(_QWORD *)(v14 + 8);
  if (!*(_QWORD *)(a1 + 424))
  {
    v16 = 0;
    *(_DWORD *)a3 = 172;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v17 = 1765;
    goto LABEL_21;
  }
  sub_233C11670((uint64_t)buf, a2);
  sub_234106010((uint64_t)buf, v41, 256, &v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3
    || (sub_23410570C((uint64_t)buf, &v41, (uint64_t)&v44), *(_OWORD *)a3 = v44, *(_QWORD *)(a3 + 16) = v45, *(_DWORD *)a3)
    || (v15 = v12[78],
        sub_234106010((uint64_t)buf, 16, 1, &v44),
        *(_OWORD *)a3 = v44,
        *(_QWORD *)(a3 + 16) = v45,
        *(_DWORD *)a3))
  {
    v16 = 0;
LABEL_22:
    sub_234125154(a1 + 32, (_BYTE *)(a1 + 104), 2);
    goto LABEL_23;
  }
  v22 = sub_2341046A4((uint64_t)buf);
  if (v15 + 946 < (unint64_t)v22)
  {
    v16 = 0;
    *(_DWORD *)a3 = 35;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v17 = 1780;
    goto LABEL_21;
  }
  v23 = v22;
  if (v22 <= 0x10)
  {
    v16 = 0;
    *(_DWORD *)a3 = 35;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v17 = 1781;
    goto LABEL_21;
  }
  v16 = (char *)sub_234114774(v22);
  if (!v16)
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v17 = 1783;
    goto LABEL_21;
  }
  sub_234104F48((uint64_t)buf, v16, v23, (uint64_t)&v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  *(_QWORD *)&v34 = &v46;
  *((_QWORD *)&v34 + 1) = 48;
  v38[0] = a1 + 552;
  v38[1] = 16;
  sub_234127F24((__n128 *)a1, (uint64_t)v38, (uint64_t)&v34, &v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  v33 = v12;
  sub_233BF7114(v38, v34, *((uint64_t *)&v34 + 1));
  v37[0] = "Sigma3NCASE_Sigma3NN4chip11CASESessionE";
  v37[1] = 6;
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, _QWORD *, _QWORD *, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 40)
                                                                                                + 56))(&v44, *(_QWORD *)(*(_QWORD *)(a1 + 576) + 40), a1 + 432, v38, v37, v48);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_233BF7114(v36, v7, v8);
  sub_234139528(a1 + 224, v36[0], (size_t)v36[1], (uint64_t)&v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_2341391E0(v16, v23 - 16, (uint64_t)&v16[v23 - 16], 16, (uint64_t)v48, (uint64_t)"NCASE_Sigma3NN4chip11CASESessionE", (uint64_t)&v44, 13, v16);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_234104498((uint64_t)v42, (uint64_t)v16, v23 - 16);
  v41 = 21;
  sub_234106010((uint64_t)v42, 21, 256, &v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_23410570C((uint64_t)v42, &v41, (uint64_t)&v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_234106010((uint64_t)v42, 16, 1, &v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  v24 = v12 + 14;
  sub_234104B68((uint64_t)v42, (_OWORD *)v12 + 7, &v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_2341058CC((uint64_t)v42, &v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  if (v43 == 2)
  {
    if (sub_23410462C((uint64_t)v42) != 16)
    {
      *(_DWORD *)a3 = 38;
      *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v28 = 1812;
      goto LABEL_63;
    }
    sub_234104B68((uint64_t)v42, (_OWORD *)v12 + 8, &v44);
    *(_OWORD *)a3 = v44;
    *(_QWORD *)(a3 + 16) = v45;
    if (*(_DWORD *)a3)
      goto LABEL_22;
    sub_234106010((uint64_t)v42, 16, 3, &v44);
    *(_OWORD *)a3 = v44;
    *(_QWORD *)(a3 + 16) = v45;
    if (*(_DWORD *)a3)
      goto LABEL_22;
  }
  v25 = v12 + 12;
  v26 = v33[15] + v33[17] + 154;
  v33[13] = v26;
  sub_234104068((void **)v33 + 12, v26);
  if (!v33[12])
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v28 = 1821;
    goto LABEL_63;
  }
  sub_233BF7114(&v34, a1 + 352, 65);
  v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 40))(*(_QWORD *)(a1 + 424)) + 8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 40))(*(_QWORD *)(a1 + 424));
  sub_233BF7114(v38, v27, 65);
  sub_23412562C((uint64_t)v24, (uint64_t)(v33 + 16), (uint64_t)&v34, (uint64_t)v38, *v25, v33 + 13, &v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  if (v43 != 3)
  {
    *(_DWORD *)a3 = 36;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v28 = 1828;
    goto LABEL_63;
  }
  if (sub_2341046A4((uint64_t)v42) >= 0x41)
  {
    *(_DWORD *)a3 = 35;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v28 = 1829;
LABEL_63:
    *(_DWORD *)(a3 + 16) = v28;
    goto LABEL_22;
  }
  v29 = sub_2341046A4((uint64_t)v42);
  if (v29 >= 0x41)
  {
    v30 = v33[78];
  }
  else
  {
    v30 = v29;
    v33[78] = v29;
  }
  sub_234104F48((uint64_t)v42, (char *)v33 + 560, v30, (uint64_t)&v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  *(_QWORD *)&v34 = v33 + 18;
  *((_QWORD *)&v34 + 1) = 400;
  sub_2341E2AB4(*(_QWORD *)(a1 + 584), *(unsigned __int8 *)(a1 + 592), (uint64_t)&v34, (uint64_t)&v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_233BF7114(&v44, v34, *((uint64_t *)&v34 + 1));
  *((_OWORD *)v33 + 34) = v44;
  sub_234127210(a1, (uint64_t)&v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  v33[81] = *(_QWORD *)(a1 + 472);
  if (*(_QWORD *)(a1 + 472) <= 1uLL)
    *((_DWORD *)v33 + 164) = *(_DWORD *)(a1 + 480);
  v31 = *(_OWORD *)(a1 + 488);
  v33[85] = *(_QWORD *)(a1 + 504);
  *(_OWORD *)(v33 + 83) = v31;
  sub_234104468((uint64_t)&v44);
  sub_234104498((uint64_t)&v44, v33[12], v33[13]);
  sub_234106010((uint64_t)&v44, 21, 256, &v34);
  *(_OWORD *)a3 = v34;
  *(_QWORD *)(a3 + 16) = v35;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_23410570C((uint64_t)&v44, &v41, (uint64_t)&v34);
  *(_OWORD *)a3 = v34;
  *(_QWORD *)(a3 + 16) = v35;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_234106010((uint64_t)&v44, 16, 1, &v34);
  *(_OWORD *)a3 = v34;
  *(_QWORD *)(a3 + 16) = v35;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_234104B68((uint64_t)&v44, v24, &v34);
  *(_OWORD *)a3 = v34;
  *(_QWORD *)(a3 + 16) = v35;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  if (v33[17])
  {
    sub_234106010((uint64_t)&v44, 16, 2, &v34);
    *(_OWORD *)a3 = v34;
    *(_QWORD *)(a3 + 16) = v35;
    if (*(_DWORD *)a3)
      goto LABEL_22;
    sub_234104B68((uint64_t)&v44, (_OWORD *)v33 + 8, &v34);
    *(_OWORD *)a3 = v34;
    *(_QWORD *)(a3 + 16) = v35;
    if (*(_DWORD *)a3)
      goto LABEL_22;
  }
  sub_23412906C(v39, &v44);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  if (*(_DWORD *)a3)
    goto LABEL_22;
  sub_234127D9C((_QWORD *)(a1 + 712), (uint64_t *)&v39);
  v32 = sub_234121AD0((_BYTE *)(a1 + 104));
  *(_WORD *)(*(_QWORD *)v32 + 8) |= 0x40u;
  *(_BYTE *)(a1 + 728) = 9;
  if (*(_DWORD *)a3)
    goto LABEL_22;
LABEL_23:
  v18 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v47 + 40))(v47, v48);
  sub_23413A7A4(v48, 16);
  if (v16)
    j__free(v16);
  if (v53)
    sub_23411814C(v53);
  v21 = sub_2341C4608();
  if (os_signpost_enabled(v21))
  {
    *(_DWORD *)buf = 136315394;
    v50 = "CASESession";
    v51 = 2080;
    v52 = "HandleSigma3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v21, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234128BE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  v10 = sub_234114774(0x2B0uLL);
  v11 = v10;
  if (v10)
  {
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    v10[4] = a1;
    v10[5] = a2;
    v10[6] = a3;
    v10[7] = a4;
    *((_BYTE *)v10 + 88) = 0;
    v10[12] = 0;
    v10[69] = 0;
    v10[68] = 0;
    v10[78] = 0;
    *((_OWORD *)v10 + 7) = 0u;
    *((_OWORD *)v10 + 8) = 0u;
    v10[81] = -1;
    *((_WORD *)v10 + 336) = 0;
    *((_BYTE *)v10 + 674) = 0;
    v10[85] = 0;
  }
  v12 = (_QWORD *)operator new();
  v13 = v12;
  *v12 = &unk_2505048D0;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v11;
  if (v11)
  {
    v14 = v12 + 2;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = (std::__shared_weak_count *)v11[1];
    *v11 = v11;
    v11[1] = v13;
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
  }
  *a5 = v11;
  a5[1] = v13;
}

void sub_234128CCC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[11];

  v8[10] = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v7 = 0;
  v8[0] = &off_250505A50;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_2341E21D8(a1 + 16, (uint64_t *)(a1 + 32), a1 + 448, a1 + 552, &v7, &v6, (_QWORD *)(a1 + 544), (uint64_t)v8, (uint64_t)a2, 0);
  if (!*(_DWORD *)a2)
  {
    if (*(_QWORD *)(a1 + 536) == v6)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_23413A038(*(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)v8, a1 + 464, a2);
      if (*(_DWORD *)a2)
        return;
      v4 = 0;
      v5 = 1900;
    }
    else
    {
      v5 = 1889;
      v4 = 84;
    }
    *(_DWORD *)a2 = v4;
    a2[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a2 + 4) = v5;
  }
}

void sub_234128DCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint8_t buf[16];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = xmmword_2505047B0;
  *(_QWORD *)(a4 + 16) = 1905;
  if (*(_BYTE *)(a1 + 728) != 9)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a4 + 16) = 1907;
LABEL_13:
    sub_234120924((_QWORD *)(a1 + 712));
    sub_234125154(a1 + 32, (_BYTE *)(a1 + 104), 2);
    sub_234130C60(a1 + 32);
    v11 = *(_OWORD *)a4;
    v12 = *(_QWORD *)(a4 + 16);
    sub_2341209E4(a1, (uint64_t)&v11);
    return;
  }
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 16);
  if (*(_DWORD *)a4)
    goto LABEL_13;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)buf = a1 + 520;
  *(_QWORD *)&buf[8] = 32;
  sub_234139610(a1 + 224, (uint64_t *)buf, a4);
  if (*(_DWORD *)a4)
    goto LABEL_13;
  sub_2341D8570(a2 + 16, a1 + 616, buf);
  *(_OWORD *)a4 = *(_OWORD *)buf;
  *(_QWORD *)(a4 + 16) = v16;
  if (*(_DWORD *)a4)
    goto LABEL_13;
  v7 = *(_QWORD *)(a1 + 568);
  if (v7)
  {
    v13 = 0uLL;
    v14 = 0;
    *(_QWORD *)buf = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    *(_QWORD *)&buf[8] = v8;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(&v13, v7, buf, a1 + 644, a1 + 432, a1 + 616);
    if ((_DWORD)v13)
    {
      v9 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v13;
        v16 = v14;
        v10 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Unable to save session resumption state: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v13;
        v16 = v14;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0xBu, 1);
      }
    }
  }
  *(_DWORD *)buf = 2;
  *(_QWORD *)&buf[8] = "core_dev_case_session_sigma_finished";
  BYTE4(v16) = 0;
  sub_2341C4BEC((uint64_t)buf);
  sub_234125154(a1 + 32, (_BYTE *)(a1 + 104), 0);
  *(_BYTE *)(a1 + 728) = 6;
  sub_234130984(a1 + 32);
  sub_234120924((_QWORD *)(a1 + 712));
}

void sub_23412906C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v3 = atomic_load(a1 + 4);
  if (v3 && a1[5] && a1[7] & 1 | a1[6])
  {
    v9 = 0uLL;
    v5 = (std::__shared_weak_count *)a1[1];
    if (v5)
    {
      *((_QWORD *)&v9 + 1) = std::__shared_weak_count::lock(v5);
      if (*((_QWORD *)&v9 + 1))
        *(_QWORD *)&v9 = *a1;
    }
    sub_23412A514((uint64_t)(a1 + 2), &v9);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    sub_2341BE0D4((uint64_t)&qword_2542530D0, (uint64_t)sub_23412A94C, (uint64_t)a1, a2);
    if (*(_DWORD *)a2)
      sub_234120924(a1 + 2);
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a2 + 4) = 203;
  }
}

uint64_t sub_2341291A4(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;

  v3 = a1[1];
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
    sub_23425A3DC((uint64_t)a1);
  if (v5 < a3)
    sub_23425A470((uint64_t)a1);
  sub_233CAF22C(&v7, *a1 + a2, a3);
  return v7;
}

_QWORD *sub_2341291EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  _QWORD *result;
  _QWORD v12[2];
  _OWORD *v13;
  __int128 v14;
  _OWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = xmmword_2342D9730;
  memset(v15, 0, sizeof(v15));
  sub_2341150D8(&v13, *(const void **)a2, *(_QWORD *)(a2 + 8));
  result = sub_2341150D8(&v13, *(const void **)a3, *(_QWORD *)(a3 + 8));
  if ((unint64_t)v14 >= *((_QWORD *)&v14 + 1))
  {
    v12[0] = v15;
    v12[1] = *((_QWORD *)&v14 + 1);
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 40)
                                                                                            + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 40), a1 + 432, v12, a4, a5 + 8);
  }
  else
  {
    *(_DWORD *)a6 = 25;
    *(_QWORD *)(a6 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    *(_DWORD *)(a6 + 16) = 2010;
  }
  return result;
}

uint64_t sub_2341292EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  int v8;
  char v9;
  __int128 v11;
  uint64_t v12;
  uint8_t buf[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Success status report received. Session was established", buf, 2u);
  }
  v3 = sub_234114844(2u);
  if ((_DWORD)v3)
    v3 = sub_2341147D0(0xBu, 2);
  v4 = *(_QWORD *)(a1 + 568);
  if (v4)
  {
    v11 = 0uLL;
    v12 = 0;
    *(_QWORD *)buf = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    *(_QWORD *)&buf[8] = v5;
    v3 = (uint64_t)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(&v11, v4, buf, a1 + 644, a1 + 432, a1 + 616);
    if ((_DWORD)v11)
    {
      v6 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v11;
        v14 = v12;
        v7 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Unable to save session resumption state: %s", buf, 0xCu);
      }
      v3 = sub_234114844(1u);
      if ((_DWORD)v3)
      {
        *(_OWORD *)buf = v11;
        v14 = v12;
        sub_2341083CC((const char **)buf, 1);
        v3 = sub_2341147D0(0xBu, 1);
      }
    }
  }
  v8 = *(unsigned __int8 *)(a1 + 728);
  if (v8 == 3)
  {
    v9 = 6;
  }
  else
  {
    if (v8 != 5)
      sub_23425A598(v3);
    v9 = 7;
  }
  *(_BYTE *)(a1 + 728) = v9;
  return sub_234130984(a1 + 32);
}

uint64_t sub_2341294D4(uint64_t a1)
{
  return sub_2341292EC(a1 - 32);
}

uint64_t sub_2341294DC@<X0>(uint64_t a1@<X0>, int a2@<W2>, _BYTE *a3@<X3>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  _BYTE *v9;
  NSObject *v10;
  char *v11;
  uint64_t result;
  _BYTE buf[24];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = xmmword_2505047C8;
  *(_QWORD *)(a4 + 16) = 2132;
  if (a2 == 1)
  {
    *(_DWORD *)a4 = 201;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v7 = 2140;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v7;
    goto LABEL_10;
  }
  if (a2 != 4)
  {
    if (a2 == 2)
    {
      *(_DWORD *)a4 = 84;
      *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v7 = 2136;
    }
    else
    {
      *(_DWORD *)a4 = 172;
      *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v7 = 2152;
    }
    goto LABEL_9;
  }
  *(_DWORD *)a4 = 219;
  *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
  *(_DWORD *)(a4 + 16) = 2144;
  if (*a3)
  {
    v8 = *(_QWORD *)(a1 + 120);
    v9 = sub_234121AD0(a3);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, *(unsigned __int16 *)v9);
  }
LABEL_10:
  *(_BYTE *)(a1 + 728) = 0;
  v10 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    *(_QWORD *)&buf[16] = *(_QWORD *)(a4 + 16);
    v11 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v11;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Received error (protocol code %d) during pairing process: %s", buf, 0x12u);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    *(_QWORD *)&buf[16] = *(_QWORD *)(a4 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(0xBu, 1);
  }
  return result;
}

uint64_t sub_2341296C8@<X0>(uint64_t a1@<X0>, int a2@<W2>, _BYTE *a3@<X3>, uint64_t a4@<X8>)
{
  return sub_2341294DC(a1 - 32, a2, a3, a4);
}

uint64_t sub_2341296D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  _BYTE *v7;
  int v8;
  uint64_t *v9;

  if (a2)
  {
    v7 = (_BYTE *)(result + 104);
    if (*(_BYTE *)(result + 104))
    {
      result = (uint64_t)sub_234121AD0((_BYTE *)(result + 104));
      if (*(_QWORD *)result != a2)
      {
        *(_OWORD *)a4 = xmmword_2505047E0;
        *(_QWORD *)(a4 + 16) = 2260;
        return result;
      }
    }
    else
    {
      sub_234121A84(result + 104, a2);
    }
    v9 = (uint64_t *)sub_234121AD0(v7);
    result = sub_2341AD0C8(*v9, 30000);
    if (*a3)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v8 = 2270;
    }
    else
    {
      *(_DWORD *)a4 = 47;
      *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
      v8 = 2269;
    }
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/CASESession.cpp";
    v8 = 2251;
  }
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

void sub_2341297B8(__n128 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  __int128 v18;
  uint64_t v19;
  uint8_t buf[4];
  _BYTE v21[18];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v21 = "CASESession";
    *(_WORD *)&v21[8] = 2080;
    *(_QWORD *)&v21[10] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_2341296D4((uint64_t)a1, a2, a4, (uint64_t)a5);
  v11 = *a3;
  v12 = *(_DWORD *)a5;
  if (!*(_DWORD *)a5)
  {
    *(_DWORD *)a5 = 42;
    a5[1] = "src/protocols/secure_channel/CASESession.cpp";
    *((_DWORD *)a5 + 4) = 2314;
    switch(a1[45].n128_u8[8])
    {
      case 0u:
        if (v11 == 48)
          sub_234122D84((uint64_t)a1, a4, a5);
        break;
      case 1u:
        if (v11 != 64)
          goto LABEL_19;
        goto LABEL_21;
      case 2u:
        if (v11 == 64)
        {
          sub_234129B68((uint64_t)&a1[2], a4, 0, a5);
          v14 = "core_dev_case_session_sigma2";
          goto LABEL_23;
        }
        if (v11 == 50)
          sub_23412802C((uint64_t)a1, a4, (uint64_t)a5);
        break;
      case 3u:
      case 5u:
        if (v11 != 64)
          break;
        if (a1[45].n128_u8[8] == 3)
          v13 = "core_dev_case_session_sigma3";
        else
          v13 = "core_dev_case_session_sigma2_resume";
        sub_234129B68((uint64_t)&a1[2], a4, 1, a5);
        *(_DWORD *)buf = 1;
        *(_QWORD *)&v21[4] = v13;
        goto LABEL_24;
      case 4u:
        if (v11 == 64)
        {
LABEL_21:
          sub_234129B68((uint64_t)&a1[2], a4, 0, a5);
          v14 = "core_dev_case_session_sigma1";
LABEL_23:
          *(_DWORD *)buf = 1;
          *(_QWORD *)&v21[4] = v14;
LABEL_24:
          *(_DWORD *)&v21[12] = *(_DWORD *)a5;
          v21[16] = 3;
          sub_2341C4BEC((uint64_t)buf);
        }
        else if (v11 == 51)
        {
          sub_2341257C0((uint64_t)a1, a4, a5);
        }
        else
        {
LABEL_19:
          if (v11 == 49)
            sub_234125F34(a1, a4, (uint64_t)a5);
        }
        break;
      default:
        break;
    }
    v12 = *(_DWORD *)a5;
  }
  if (v12)
  {
    if (v12 == 42)
    {
      v15 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = a1[45].n128_u8[8];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v21 = v11;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v16;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Received message (type %d) cannot be handled in %d state.", buf, 0xEu);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0xBu, 1);
    }
    sub_234130C60((uint64_t)&a1[2]);
    v18 = *(_OWORD *)a5;
    v19 = a5[2];
    sub_2341209E4((uint64_t)a1, (uint64_t)&v18);
  }
  v17 = sub_2341C4608();
  if (os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v21 = "CASESession";
    *(_WORD *)&v21[8] = 2080;
    *(_QWORD *)&v21[10] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234129B68(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  char v16[8];
  uint64_t v17;
  unsigned __int16 v18;
  _QWORD v19[2];
  uint64_t v20;
  int v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint8_t buf[4];
  __int128 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  sub_23410FAEC(&v25);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v24 = *a2;
  *a2 = 0;
  sub_2341AC944((uint64_t)&v25, &v24, (uint64_t)a4);
  if (v24)
    sub_23411814C(v24);
  v24 = 0;
  if (!*(_DWORD *)a4)
  {
    if (*(_DWORD *)((char *)&v25 + 2))
    {
      *(_DWORD *)a4 = 47;
      a4[1] = "src/protocols/secure_channel/PairingSession.h";
      v8 = 173;
LABEL_6:
      *((_DWORD *)a4 + 4) = v8;
      goto LABEL_22;
    }
    v9 = (unsigned __int16)v25;
    if (!(_WORD)v25)
    {
      v10 = HIWORD(v25);
      if (!HIWORD(v25) && a3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
        *(_DWORD *)a4 = 0;
        a4[1] = "src/protocols/secure_channel/PairingSession.h";
        v8 = 179;
        goto LABEL_6;
      }
      goto LABEL_20;
    }
    if ((unsigned __int16)v25 == 8)
    {
      v10 = HIWORD(v25);
      if (HIWORD(v25) != 4)
      {
LABEL_20:
        v16[0] = 0;
LABEL_21:
        (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 96))(a1, v9, v10, v16);
        goto LABEL_22;
      }
      if (!v26)
      {
        v10 = 4;
        goto LABEL_20;
      }
      v11 = *(_QWORD *)(v26 + 24);
      v19[0] = *(_QWORD *)(v26 + 8);
      v19[1] = v19[0];
      v20 = v11;
      v21 = 0;
      *(_QWORD *)((char *)&v22 + 4) = "src/lib/support/BufferReader.h";
      HIDWORD(v22) = 330;
      if (!v19[0])
        v20 = 0;
      v18 = 0;
      sub_234114EA0((uint64_t)v19, &v18);
      v12 = v21;
      v27 = v22;
      v28 = v23;
      v13 = sub_234117B80(0xBu, "SecureChannel");
      v14 = v13;
      if (!v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v30) = v18;
          _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "Received busy status report with minimum wait time: %u ms", buf, 8u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(0xBu, 2);
        v9 = (unsigned __int16)v25;
        v10 = HIWORD(v25);
        v16[0] = 1;
        v17 = v18;
        goto LABEL_21;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v30 = v27;
        *(_DWORD *)buf = v12;
        v31 = v28;
        v15 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&v30 = v15;
        _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "Failed to read the minimum wait time: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        v30 = v27;
        *(_DWORD *)buf = v12;
        v31 = v28;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0xBu, 1);
      }
      v9 = (unsigned __int16)v25;
    }
    v10 = HIWORD(v25);
    goto LABEL_20;
  }
LABEL_22:
  if (v26)
    sub_23411814C(v26);
}

void sub_234129E74(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  sub_2341297B8((__n128 *)(a1 - 8), a2, a3, a4, a5);
}

uint64_t sub_234129E7C(uint64_t a1)
{
  return sub_234129E88(2000, a1);
}

uint64_t sub_234129E88(int a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned int *v6;
  unsigned __int16 *v7;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int16 v14;
  int v15;
  int v16;
  _BYTE v17[16];

  sub_2341B1BB8((uint64_t)v17);
  v4 = sub_2341B1C28();
  v15 = HIDWORD(v4);
  v16 = v4;
  v14 = v5;
  if (v17[0])
  {
    v6 = (unsigned int *)sub_233C0FDD4(v17);
    v7 = (unsigned __int16 *)(v6 + 2);
    v8 = v6 + 1;
  }
  else
  {
    v7 = (unsigned __int16 *)&v14;
    v8 = (unsigned int *)&v15;
    v6 = (unsigned int *)&v16;
  }
  v9 = sub_2341B1C38(*(_DWORD *)(a2 + 4), *(_DWORD *)a2, 0, *(unsigned __int16 *)(a2 + 8)) + a1;
  v10 = *v8;
  v11 = *v6;
  v12 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  return v9 + sub_2341B1C38(v10, v11, v12, *v7);
}

uint64_t sub_234129F50(uint64_t a1)
{
  return sub_234129E88(30000, a1);
}

uint64_t sub_234129F5C(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  unsigned __int8 v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 696);
  if (v2 && (v3 = atomic_load((unsigned __int8 *)(v2 + 88)), (v3 & 1) != 0))
  {
    v5 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "SendSigma3Helper was unable to schedule the AfterWorkCallback", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0xBu, 1);
    sub_23412A098(*(_QWORD *)(a1 + 696));
    result = 1;
  }
  else
  {
    result = 0;
  }
  v6 = *(_QWORD *)(a1 + 712);
  if (v6)
  {
    v7 = atomic_load((unsigned __int8 *)(v6 + 88));
    if ((v7 & 1) != 0)
    {
      v8 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "HandleSigma3Helper was unable to schedule the AfterWorkCallback", v9, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0xBu, 1);
      sub_23412A0B8(*(_QWORD *)(a1 + 712));
      return 1;
    }
  }
  return result;
}

void sub_23412A098(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 88));
  if ((v1 & 1) == 0)
    sub_23425A62C(a1);
  sub_23412A798(a1);
}

void sub_23412A0B8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 88));
  if ((v1 & 1) == 0)
    sub_23425A62C(a1);
  sub_23412AB6C(a1);
}

uint64_t sub_23412A0D8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/CASESession.h";
  *(_DWORD *)(a3 + 16) = 155;
  return result;
}

uint64_t sub_23412A0FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 600);
}

uint64_t sub_23412A10C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 608);
}

uint64_t sub_23412A11C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 616);
}

void sub_23412A130(uint64_t a1, uint64_t a2, int a3)
{
  sub_234120980(a1, a3);
}

void sub_23412A138(uint64_t a1, uint64_t a2, int a3)
{
  sub_234120980(a1 - 16, a3);
}

uint64_t sub_23412A144(uint64_t a1)
{
  return *(_QWORD *)(a1 + 568);
}

uint64_t sub_23412A154(uint64_t a1)
{
  return *(_QWORD *)(a1 + 576);
}

uint64_t sub_23412A164(uint64_t a1)
{
  return *(_QWORD *)(a1 + 584);
}

void sub_23412A174(int *a1)
{
  int v1;

  if (!*a1)
    sub_23425A6C4((uint64_t)a1);
  v1 = *a1 - 1;
  *a1 = v1;
  if (!v1)
    sub_2341AD61C((uint64_t)(a1 - 7));
}

int *sub_23412A1A8(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 == -1)
    sub_23425A7EC((uint64_t)a1);
  if (!v1)
    sub_23425A758((uint64_t)a1);
  *a1 = v1 + 1;
  return a1 - 7;
}

_BYTE *sub_23412A1D8(_BYTE *a1)
{
  if (!*a1)
    sub_2342581C8((uint64_t)a1);
  return a1 + 4;
}

uint64_t *sub_23412A1F8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256157A40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256157A40))
  {
    qword_256157A38 = (uint64_t)&unk_250504CD0;
    __cxa_guard_release(&qword_256157A40);
  }
  return &qword_256157A38;
}

uint64_t sub_23412A258(uint64_t a1, char *__str, size_t __size)
{
  unsigned int *v6;
  int v7;
  uint64_t result;
  __int128 v9;
  char v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = 0uLL;
  v10 = 0;
  v7 = *(_DWORD *)(a1 + 20);
  v6 = (unsigned int *)(a1 + 20);
  if (v7)
  {
    memset(v11, 0, 24);
    sub_23410F49C(v6, (char *)&v9 + 1, 0x10uLL, (uint64_t)v11);
    if (LODWORD(v11[0]))
    {
      v9 = *(_OWORD *)"%(err)";
      v10 = 0;
    }
  }
  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      result = snprintf(__str, __size, "UNDEFINED");
      break;
    case 1:
      sub_23410EA90((_DWORD *)a1, (char *)v11, 0x2Eu);
      if (sub_23410EDDC((_DWORD *)a1))
        result = snprintf(__str, __size, "UDP:%s%s:%d");
      else
        result = snprintf(__str, __size, "UDP:[%s%s]:%d");
      break;
    case 2:
      result = snprintf(__str, __size, "BLE");
      break;
    case 3:
      sub_23410EA90((_DWORD *)a1, (char *)v11, 0x2Eu);
      if (sub_23410EDDC((_DWORD *)a1))
        result = snprintf(__str, __size, "TCP:%s%s:%d");
      else
        result = snprintf(__str, __size, "TCP:[%s%s]:%d");
      break;
    default:
      result = snprintf(__str, __size, "ERROR");
      break;
  }
  return result;
}

_QWORD *sub_23412A400(_QWORD *result, uint64_t a2)
{
  *result = a2;
  if (!a2)
    sub_23425A918((uint64_t)result);
  return result;
}

void sub_23412A420(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23493E704);
}

void sub_23412A444(uint64_t a1)
{
  sub_23412A48C(*(_QWORD **)(a1 + 24));
}

uint64_t sub_23412A44C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505048B0))
    return a1 + 24;
  else
    return 0;
}

void sub_23412A48C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  if (a1)
  {
    sub_23413A7A4(a1 + 25, 64);
    v2 = (void *)a1[22];
    if (v2)
    {
      j__free(v2);
      a1[22] = 0;
    }
    v3 = (void *)a1[19];
    if (v3)
    {
      j__free(v3);
      a1[19] = 0;
    }
    v4 = (void *)a1[17];
    if (v4)
    {
      j__free(v4);
      a1[17] = 0;
    }
    v5 = (void *)a1[15];
    if (v5)
    {
      j__free(v5);
      a1[15] = 0;
    }
    sub_233CF2D00((uint64_t)(a1 + 2));
    v6 = (std::__shared_weak_count *)a1[1];
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    j__free(a1);
  }
}

uint64_t sub_23412A514(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_23412A578(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint8_t buf[16];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (atomic_load((unint64_t *)(a1 + 32)))
  {
    v15 = 0;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, char *))(a1 + 40))(buf, a1 + 96, &v15);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)buf;
    *(_QWORD *)(a1 + 80) = v17;
    if (!v15)
    {
      if (atomic_load((unint64_t *)(a1 + 32)))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v6 = *(std::__shared_weak_count **)(a1 + 24);
        *(_QWORD *)(a1 + 16) = v2;
        *(_QWORD *)(a1 + 24) = v1;
        v13 = 0uLL;
        v14 = 0;
        if (qword_254253100 != -1)
          dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
        sub_2341BE0D4((uint64_t)&qword_2542530D0, (uint64_t)sub_23412A798, a1, &v13);
        if ((_DWORD)v13)
        {
          v8 = sub_234117B80(0xBu, "SecureChannel");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = v13;
            v17 = v14;
            v9 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v9;
            _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Failed to Schedule the AfterWorkCallback on foreground thread: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = v13;
            v17 = v14;
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(0xBu, 1);
          }
          *(_OWORD *)(a1 + 64) = v13;
          *(_QWORD *)(a1 + 80) = v14;
          v10 = *(std::__shared_weak_count **)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v7;
          *(_QWORD *)(a1 + 24) = v6;
          atomic_store(1u, (unsigned __int8 *)(a1 + 88));
          v6 = v10;
        }
        v1 = v6;
      }
    }
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_23412A798(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t v5;
  void (*v6)(_QWORD *__return_ptr, _QWORD *, uint64_t, __int128 *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;

  sub_2341B1F64("src/protocols/secure_channel/CASESession.cpp", 282);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v4 = v3;
    goto LABEL_3;
  }
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (v11)
  {
    v4 = std::__shared_weak_count::lock(v11);
    if (!v3)
      goto LABEL_3;
  }
  else
  {
    v4 = 0;
    if (!v3)
      goto LABEL_3;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_3:
  v5 = atomic_load((unint64_t *)(a1 + 32));
  if (v5)
  {
    v6 = *(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, __int128 *))(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = (_QWORD *)(v5 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, __int128 *))(*v8 + v6);
    v15 = *(_OWORD *)(a1 + 64);
    v16 = *(_QWORD *)(a1 + 80);
    v6(v14, v8, a1 + 96, &v15);
  }
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_23412A8AC(uint64_t a1)
{
  sub_23412A8F4(a1 + 24, *(_QWORD **)(a1 + 24));
}

uint64_t sub_23412A8B4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250504910))
    return a1 + 24;
  else
    return 0;
}

void sub_23412A8F4(uint64_t a1, _QWORD *a2)
{
  void *v3;
  std::__shared_weak_count *v4;

  if (a2)
  {
    sub_23413A7A4(a2 + 70, 64);
    v3 = (void *)a2[12];
    if (v3)
    {
      j__free(v3);
      a2[12] = 0;
    }
    sub_233CF2D00((uint64_t)(a2 + 2));
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    j__free(a2);
  }
}

void sub_23412A94C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint8_t buf[16];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (atomic_load((unint64_t *)(a1 + 32)))
  {
    v15 = 0;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, char *))(a1 + 40))(buf, a1 + 96, &v15);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)buf;
    *(_QWORD *)(a1 + 80) = v17;
    if (!v15)
    {
      if (atomic_load((unint64_t *)(a1 + 32)))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v6 = *(std::__shared_weak_count **)(a1 + 24);
        *(_QWORD *)(a1 + 16) = v2;
        *(_QWORD *)(a1 + 24) = v1;
        v13 = 0uLL;
        v14 = 0;
        if (qword_254253100 != -1)
          dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
        sub_2341BE0D4((uint64_t)&qword_2542530D0, (uint64_t)sub_23412AB6C, a1, &v13);
        if ((_DWORD)v13)
        {
          v8 = sub_234117B80(0xBu, "SecureChannel");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = v13;
            v17 = v14;
            v9 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v9;
            _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Failed to Schedule the AfterWorkCallback on foreground thread: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = v13;
            v17 = v14;
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(0xBu, 1);
          }
          *(_OWORD *)(a1 + 64) = v13;
          *(_QWORD *)(a1 + 80) = v14;
          v10 = *(std::__shared_weak_count **)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v7;
          *(_QWORD *)(a1 + 24) = v6;
          atomic_store(1u, (unsigned __int8 *)(a1 + 88));
          v6 = v10;
        }
        v1 = v6;
      }
    }
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_23412AB6C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t v5;
  void (*v6)(_QWORD *__return_ptr, _QWORD *, uint64_t, __int128 *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;

  sub_2341B1F64("src/protocols/secure_channel/CASESession.cpp", 282);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v4 = v3;
    goto LABEL_3;
  }
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (v11)
  {
    v4 = std::__shared_weak_count::lock(v11);
    if (!v3)
      goto LABEL_3;
  }
  else
  {
    v4 = 0;
    if (!v3)
      goto LABEL_3;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_3:
  v5 = atomic_load((unint64_t *)(a1 + 32));
  if (v5)
  {
    v6 = *(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, __int128 *))(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = (_QWORD *)(v5 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, __int128 *))(*v8 + v6);
    v15 = *(_OWORD *)(a1 + 64);
    v16 = *(_QWORD *)(a1 + 80);
    v6(v14, v8, a1 + 96, &v15);
  }
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

_QWORD *sub_23412AC80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 96))(a2);
  if (!*(_DWORD *)a2)
  {
    *(_DWORD *)a2 = 0;
    a2[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
    *((_DWORD *)a2 + 4) = 29;
  }
  return result;
}

_QWORD *sub_23412ACD4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *result;
  int v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 72))(a6);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3, &v14, a4, a5);
    if (!*(_DWORD *)a6)
    {
      if (v14 == *a2)
        v13 = 40;
      else
        v13 = 39;
      *(_DWORD *)a6 = 16 * (v14 != *a2);
      a6[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
      *((_DWORD *)a6 + 4) = v13;
    }
  }
  return result;
}

_QWORD *sub_23412ADE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 72))(a2);
  if (!*(_DWORD *)a2)
  {
    *(_DWORD *)a2 = 0;
    a2[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
    *((_DWORD *)a2 + 4) = 46;
  }
  return result;
}

uint64_t sub_23412AE38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t result;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  NSObject *v20;
  unint64_t v21;
  char *v22;
  NSObject *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[32];
  uint64_t v34;
  _BYTE v35[16];
  __int128 v36;
  int v37;
  uint8_t buf[4];
  _BYTE v39[20];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v12 = 8;
  do
  {
    v13 = (char *)&v30 + v12;
    *(_QWORD *)v13 = 0;
    v13[8] = 0;
    v12 += 16;
  }
  while (v13 + 16 != v33);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, &v30);
  if (*(_DWORD *)a6)
    return result;
  if (!v30)
    goto LABEL_13;
  v15 = (unsigned __int8 *)&v32;
  v16 = v30;
  do
  {
    if (*((_QWORD *)v15 - 1) == *a2 && *v15 == *((unsigned __int8 *)a2 + 8))
    {
      v34 = 0;
      v28 = 0;
      v29 = 0;
      (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *, _BYTE *, _BYTE *, int *))(*(_QWORD *)a1 + 96))(buf, a1, a2, v35, v33, &v28);
      v36 = *(_OWORD *)v39;
      v19 = *(_DWORD *)buf;
      v37 = *(_DWORD *)&v39[16];
      if (*(_DWORD *)buf)
      {
        v20 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v21 = *a2;
          v26 = HIDWORD(*a2);
          *(_OWORD *)v39 = v36;
          *(_DWORD *)buf = v19;
          *(_DWORD *)&v39[16] = v37;
          v22 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v39 = v26;
          *(_WORD *)&v39[4] = 1024;
          *(_DWORD *)&v39[6] = v21;
          *(_WORD *)&v39[10] = 2080;
          *(_QWORD *)&v39[12] = v22;
          _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "LoadState failed; unable to fully delete session resumption record for node %08X%08X: %s",
            buf,
            0x18u);
        }
        if (!sub_234114844(1u))
          goto LABEL_27;
      }
      else
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(buf, a1, v35);
        v36 = *(_OWORD *)v39;
        v19 = *(_DWORD *)buf;
        v37 = *(_DWORD *)&v39[16];
        if (!*(_DWORD *)buf)
          goto LABEL_27;
        v23 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          v24 = *a2;
          v27 = HIDWORD(*a2);
          *(_OWORD *)v39 = v36;
          *(_DWORD *)buf = v19;
          *(_DWORD *)&v39[16] = v37;
          v25 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v39 = v27;
          *(_WORD *)&v39[4] = 1024;
          *(_DWORD *)&v39[6] = v24;
          *(_WORD *)&v39[10] = 2080;
          *(_QWORD *)&v39[12] = v25;
          _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "DeleteLink failed; unable to fully delete session resumption record for node %08X%08X: %s",
            buf,
            0x18u);
        }
        if (!sub_234114844(1u))
          goto LABEL_27;
      }
      *(_OWORD *)v39 = v36;
      *(_DWORD *)buf = v19;
      *(_DWORD *)&v39[16] = v37;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0xBu, 1);
LABEL_27:
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a3, a4, a5);
      if (!*(_DWORD *)a6)
      {
        *a6 = 0;
        a6[1] = 0;
        a6[2] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 64))(a1, a3, a2);
        if (!*(_DWORD *)a6)
        {
          *(_DWORD *)a6 = 0;
          a6[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
          *((_DWORD *)a6 + 4) = 89;
        }
      }
      return sub_23413A7A4(v33, 32);
    }
    v15 += 16;
    --v16;
  }
  while (v16);
  if (v30 == 48)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    result = sub_23412B33C(a1, &v31, a6);
    if (*(_DWORD *)a6)
      return result;
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, &v30);
    if (*(_DWORD *)a6)
      return result;
  }
LABEL_13:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a3, a4, a5);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 64))(a1, a3, a2);
    if (!*(_DWORD *)a6)
    {
      v17 = v30++;
      v18 = &v30 + 2 * v17;
      v18[1] = *a2;
      *((_BYTE *)v18 + 16) = *((_BYTE *)a2 + 8);
      a6[1] = 0;
      a6[2] = 0;
      *a6 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v30);
      if (!*(_DWORD *)a6)
      {
        *(_DWORD *)a6 = 0;
        a6[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
        *((_DWORD *)a6 + 4) = 106;
      }
    }
  }
  return result;
}

uint64_t sub_23412B33C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  unint64_t v26;
  NSObject *v28;
  char *v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  char *v35;
  int v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  _BYTE v40[32];
  uint64_t v41;
  uint8_t v42[16];
  uint8_t buf[16];
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = 1;
  do
  {
    v7 = &v38[v6];
    *v7 = 0;
    *((_BYTE *)v7 + 8) = 0;
    v6 += 2;
  }
  while (v7 + 2 != (_QWORD *)v40);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v38);
  if (!*(_DWORD *)a3)
  {
    v41 = 0;
    v36 = 0;
    v37 = 0;
    v34 = 0uLL;
    v35 = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *, uint8_t *, _BYTE *, int *))(*(_QWORD *)a1 + 96))(&v34, a1, a2, v42, v40, &v36);
    if ((_DWORD)v34 != 160)
    {
      if ((_DWORD)v34)
      {
        v13 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v14 = *a2;
          v15 = HIDWORD(*a2);
          *(_OWORD *)buf = v34;
          v44 = v35;
          v16 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v15;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v14;
          *(_WORD *)&buf[14] = 2080;
          v44 = v16;
          _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Unable to load session resumption state during session deletion for node %08X%08X: %s", buf, 0x18u);
        }
        if (sub_234114844(1u))
          goto LABEL_15;
      }
      else
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)a1 + 80))(buf, a1, v42);
        v34 = *(_OWORD *)buf;
        v35 = v44;
        if (*(_DWORD *)buf && *(_DWORD *)buf != 160)
        {
          v9 = sub_234117B80(0xBu, "SecureChannel");
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            v10 = *a2;
            v11 = HIDWORD(*a2);
            *(_OWORD *)buf = v34;
            v44 = v35;
            v12 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)&buf[4] = v11;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v10;
            *(_WORD *)&buf[14] = 2080;
            v44 = v12;
            _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Unable to delete session resumption link for node %08X%08X: %s", buf, 0x18u);
          }
          if (sub_234114844(1u))
          {
LABEL_15:
            *(_OWORD *)buf = v34;
            v44 = v35;
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(0xBu, 1);
          }
        }
      }
    }
    (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(buf, a1, a2);
    v34 = *(_OWORD *)buf;
    v35 = v44;
    if (*(_DWORD *)buf && *(_DWORD *)buf != 160)
    {
      v17 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = *a2;
        v19 = HIDWORD(*a2);
        *(_OWORD *)buf = v34;
        v44 = v35;
        v20 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v19;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v18;
        *(_WORD *)&buf[14] = 2080;
        v44 = v20;
        _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Unable to delete session resumption state for node %08X%08X: %s", buf, 0x18u);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v34;
        v44 = v35;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0xBu, 1);
      }
    }
    v21 = v38[0];
    if (!v38[0])
      goto LABEL_40;
    v22 = 0;
    v23 = *a2;
    v24 = *((unsigned __int8 *)a2 + 8);
    v25 = &v39;
    v26 = 1;
    do
    {
      if ((v22 & 1) != 0)
      {
        *(v25 - 2) = *v25;
        *((_BYTE *)v25 - 8) = *((_BYTE *)v25 + 8);
        v22 = 1;
        v21 = v38[0];
      }
      else if (*(v25 - 2) == v23 && *((unsigned __int8 *)v25 - 8) == v24)
      {
        if (v26 < v21)
        {
          *(v25 - 2) = *v25;
          *((_BYTE *)v25 - 8) = *((_BYTE *)v25 + 8);
          v21 = v38[0];
        }
        v38[0] = --v21;
        v22 = 1;
      }
      else
      {
        v22 = 0;
      }
      v25 += 2;
    }
    while (v26++ < v21);
    if ((v22 & 1) != 0)
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)a1 + 48))(buf, a1, v38);
      v34 = *(_OWORD *)buf;
      v35 = v44;
      if (!*(_DWORD *)buf)
        goto LABEL_44;
      v28 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v34;
        v44 = v35;
        v29 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v29;
        _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "Unable to save session resumption index: %s", buf, 0xCu);
      }
      if (!sub_234114844(1u))
        goto LABEL_44;
    }
    else
    {
LABEL_40:
      v30 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        v31 = *a2;
        v32 = HIDWORD(*a2);
        *(_OWORD *)buf = v34;
        v44 = v35;
        v33 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v32;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v31;
        *(_WORD *)&buf[14] = 2080;
        v44 = v33;
        _os_log_impl(&dword_233BF3000, v30, OS_LOG_TYPE_ERROR, "Unable to find session resumption state for node in index%08X%08X: %s", buf, 0x18u);
      }
      if (!sub_234114844(1u))
        goto LABEL_44;
    }
    *(_OWORD *)buf = v34;
    v44 = v35;
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(0xBu, 1);
LABEL_44:
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/DefaultSessionResumptionStorage.cpp";
    *((_DWORD *)a3 + 4) = 181;
    return sub_23413A7A4(v40, 32);
  }
  return result;
}

__n128 sub_23412B9C0@<Q0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  __int128 *v13;
  __int128 v14;
  NSObject *v15;
  char *v16;
  __int128 *v17;
  __int128 v18;
  NSObject *v19;
  char *v20;
  __int128 *v21;
  __int128 v22;
  NSObject *v23;
  char *v24;
  uint8_t *v25;
  __int128 v26;
  NSObject *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[97];
  __int128 v37;
  uint64_t v38;
  uint8_t v39[32];
  uint64_t v40;
  _BYTE v41[16];
  uint8_t buf[24];
  uint64_t v43;

  v4 = a3;
  v43 = *MEMORY[0x24BDAC8D0];
  v37 = xmmword_250504920;
  v38 = 186;
  v5 = 1;
  do
  {
    v6 = &v36[v5];
    *v6 = 0;
    *((_BYTE *)v6 + 8) = 0;
    v5 += 2;
  }
  while (v6 + 2 != (_QWORD *)&v37);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v36);
  if (*(_DWORD *)v4)
    return result;
  v8 = v36[0];
  if (!v36[0])
    goto LABEL_43;
  v30 = a1;
  v29 = v4;
  v9 = 0;
  v10 = 0;
  v11 = 16 * v36[0] - 16;
  do
  {
    v34 = xmmword_250504938;
    v35 = 193;
    v40 = 0;
    v32 = 0;
    v33 = 0;
    v12 = &v36[-2 * v10];
    if (LOBYTE(v12[v9 + 2]) != a2)
      goto LABEL_31;
    (*(void (**)(__int128 *__return_ptr, uint64_t, char *, _BYTE *, uint8_t *, int *))(*(_QWORD *)v30 + 96))(&v34, v30, (char *)&v36[1] + v9 * 8 - 16 * v10, v41, v39, &v32);
    if ((_DWORD)v37)
      v13 = &v37;
    else
      v13 = &v34;
    v14 = *v13;
    v38 = *((_QWORD *)v13 + 2);
    v37 = v14;
    if ((_DWORD)v34)
    {
      v15 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v34;
        *(_QWORD *)&buf[16] = v35;
        v16 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = a2;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v16;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Session resumption cache deletion partially failed for fabric index %u, unable to load node state: %s", buf, 0x12u);
      }
      if (sub_234114844(1u))
        goto LABEL_30;
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v30 + 80))(buf, v30, v41);
      v34 = *(_OWORD *)buf;
      v35 = *(_QWORD *)&buf[16];
      if ((_DWORD)v37)
        v17 = &v37;
      else
        v17 = &v34;
      v18 = *v17;
      v38 = *((_QWORD *)v17 + 2);
      v37 = v18;
      if ((_DWORD)v34)
      {
        v19 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)buf = v34;
          *(_QWORD *)&buf[16] = v35;
          v20 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = a2;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v20;
          _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "Session resumption cache deletion partially failed for fabric index %u, unable to delete node link: %s", buf, 0x12u);
        }
        if (sub_234114844(1u))
          goto LABEL_30;
      }
      else
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t, char *))(*(_QWORD *)v30 + 104))(buf, v30, (char *)&v36[1] + v9 * 8 - 16 * v10);
        v34 = *(_OWORD *)buf;
        v35 = *(_QWORD *)&buf[16];
        if ((_DWORD)v37)
          v21 = &v37;
        else
          v21 = &v34;
        v22 = *v21;
        v38 = *((_QWORD *)v21 + 2);
        v37 = v22;
        if ((_DWORD)v34)
        {
          v23 = sub_234117B80(0xBu, "SecureChannel");
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = v34;
            *(_QWORD *)&buf[16] = v35;
            v24 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = a2;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = v24;
            _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "Session resumption cache is in an inconsistent state!  Unable to delete node state during attempted deletion of fabric index %u: %s", buf, 0x12u);
          }
          if (sub_234114844(1u))
          {
LABEL_30:
            *(_OWORD *)buf = v34;
            *(_QWORD *)&buf[16] = v35;
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(0xBu, 1);
          }
        }
        else
        {
          ++v10;
          if (v8 != 1)
            memmove(&v12[v9 + 1], &v12[v9 + 3], v11);
        }
      }
    }
LABEL_31:
    sub_23413A7A4(v39, 32);
    v11 -= 16;
    v9 += 2;
    --v8;
  }
  while (v8);
  v4 = v29;
  if (v10)
  {
    v36[0] -= v10;
    memset(buf, 0, sizeof(buf));
    (*(void (**)(uint8_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v30 + 48))(buf, v30, v36);
    v25 = (uint8_t *)&v37;
    if (!(_DWORD)v37)
      v25 = buf;
    v26 = *(_OWORD *)v25;
    v38 = *((_QWORD *)v25 + 2);
    v37 = v26;
    if (*(_DWORD *)buf)
    {
      v27 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)v39 = *(_OWORD *)buf;
        *(_QWORD *)&v39[16] = *(_QWORD *)&buf[16];
        v28 = sub_2341083CC((const char **)v39, 1);
        *(_DWORD *)v39 = 67109378;
        *(_DWORD *)&v39[4] = a2;
        *(_WORD *)&v39[8] = 2080;
        *(_QWORD *)&v39[10] = v28;
        _os_log_impl(&dword_233BF3000, v27, OS_LOG_TYPE_ERROR, "Session resumption cache is in an inconsistent state!  Unable to save session resumption index during attempted deletion of fabric index %u: %s", v39, 0x12u);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)v39 = *(_OWORD *)buf;
        *(_QWORD *)&v39[16] = *(_QWORD *)&buf[16];
        sub_2341083CC((const char **)v39, 1);
        sub_2341147D0(0xBu, 1);
      }
    }
  }
LABEL_43:
  result = (__n128)v37;
  *(_OWORD *)v4 = v37;
  v4[2] = v38;
  return result;
}

_QWORD *sub_23412C000(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2505049F8;
  a1[1] = &unk_250504A88;
  a1[2] = &unk_250504AC8;
  v2 = (uint64_t)(a1 + 2);
  sub_23412C070((uint64_t)a1);
  sub_2341394AC(a1 + 212);
  a1[21] = &off_250505898;
  sub_23413B638((uint64_t)(a1 + 21));
  sub_2341394AC(a1 + 51);
  sub_2341207D0(v2);
  return a1;
}

void sub_23412C070(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = sub_2341C4608();
  if (os_signpost_enabled(v2))
  {
    v5 = 136315394;
    v6 = "PASESession";
    v7 = 2080;
    v8 = "Clear";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v5, 0x16u);
  }
  *(_BYTE *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_BYTE *)(a1 + 164) = 0;
  sub_23413B638(a1 + 168);
  sub_2341394D4((void *)(a1 + 1696));
  *(_DWORD *)(a1 + 1816) = 0;
  *(_WORD *)(a1 + 1820) = 0;
  v3 = *(void **)(a1 + 1824);
  if (v3)
  {
    j__free(v3);
    *(_QWORD *)(a1 + 1824) = 0;
  }
  *(_BYTE *)(a1 + 1872) = 0;
  sub_2341312B4(a1 + 16);
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    v5 = 136315394;
    v6 = "PASESession";
    v7 = 2080;
    v8 = "Clear";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v5, 0x16u);
  }
}

_QWORD *sub_23412C200(uint64_t a1)
{
  return sub_23412C000((_QWORD *)(a1 - 8));
}

_QWORD *sub_23412C208(uint64_t a1)
{
  return sub_23412C000((_QWORD *)(a1 - 16));
}

void sub_23412C210(_QWORD *a1)
{
  sub_23412C000(a1);
  JUMPOUT(0x23493E704);
}

void sub_23412C234(uint64_t a1)
{
  sub_23412C000((_QWORD *)(a1 - 8));
  JUMPOUT(0x23493E704);
}

void sub_23412C25C(uint64_t a1)
{
  sub_23412C000((_QWORD *)(a1 - 16));
  JUMPOUT(0x23493E704);
}

void sub_23412C284(uint64_t a1)
{
  sub_234131314((_QWORD *)(a1 + 16));
  sub_23412C070(a1);
}

void sub_23412C2AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)(a1 - 2);
  sub_234131314(a1);
  sub_23412C070(v1);
}

uint64_t sub_23412C2D0(uint64_t a1)
{
  *(_BYTE *)(a1 + 1872) = 1;
  return sub_234130984(a1 + 16);
}

void sub_23412C2E0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  uint8_t v16[4];
  _BYTE buf[12];
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    v18 = 2080;
    v19 = "Init";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*(_QWORD *)(a2 + 40))
  {
    if (a4)
    {
      sub_23412C070(a1);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_2341394DC(a1 + 1696, (uint64_t)a5);
      if (*(_DWORD *)a5)
        goto LABEL_19;
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_234139528(a1 + 1696, "CHIP PAKE V1 Commissioning", 0x1AuLL, (uint64_t)a5);
      if (*(_DWORD *)a5)
        goto LABEL_19;
      *(_QWORD *)(a1 + 104) = a4;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      *(_QWORD *)buf = 0;
      buf[8] = 0;
      sub_234130604((_QWORD *)(a1 + 16), a2, (uint64_t *)buf, (uint64_t)a5);
      if (*(_DWORD *)a5)
        goto LABEL_19;
      sub_234122B6C(a1 + 16, (uint64_t)buf);
      if (!buf[0])
      {
        v13 = 126;
        v14 = 3;
        goto LABEL_18;
      }
      v11 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        sub_234122B6C(a1 + 16, (uint64_t)v16);
        v12 = *(unsigned __int16 *)sub_233C05D98(v16);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v12;
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "Assigned local session key ID %u", buf, 8u);
      }
      if (sub_234114844(3u))
      {
        sub_234122B6C(a1 + 16, (uint64_t)buf);
        sub_233C05D98(buf);
        sub_2341147D0(0xBu, 3);
      }
      if (!(a3 >> 27))
      {
        v14 = 0;
        *(_DWORD *)(a1 + 1652) = a3;
        v13 = 132;
        goto LABEL_18;
      }
      v13 = 129;
    }
    else
    {
      v13 = 116;
    }
  }
  else
  {
    v13 = 115;
  }
  v14 = 47;
LABEL_18:
  *(_DWORD *)a5 = v14;
  a5[1] = "src/protocols/secure_channel/PASESession.cpp";
  *((_DWORD *)a5 + 4) = v13;
LABEL_19:
  v15 = sub_2341C4608();
  if (os_signpost_enabled(v15))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    v18 = 2080;
    v19 = "Init";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v15, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412C5D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, char *a5@<X4>, _QWORD *a6@<X8>)
{
  NSObject *v12;
  int v13;
  NSObject *v14;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    v15 = 136315394;
    v16 = "PASESession";
    v17 = 2080;
    v18 = "GeneratePASEVerifier";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v15, 0x16u);
  }
  if ((a4 & 1) != 0)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    sub_234139DB0(a5, 4uLL, (uint64_t)a6);
    if (*(_DWORD *)a6)
      goto LABEL_8;
    v13 = *(_DWORD *)a5 % 0x5F5E0FEu + 1;
    *(_DWORD *)a5 = v13;
  }
  else
  {
    v13 = *(_DWORD *)a5;
  }
  sub_234133AF4(a1, a2, a3, v13, a6);
LABEL_8:
  v14 = sub_2341C4608();
  if (os_signpost_enabled(v14))
  {
    v15 = 136315394;
    v16 = "PASESession";
    v17 = 2080;
    v18 = "GeneratePASEVerifier";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v15, 0x16u);
  }
}

void sub_23412C794(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint8_t buf[40];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SetupSpake2p";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  memset(buf, 0, 32);
  v6 = buf;
  v7 = 32;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_234139610(a1 + 1696, (uint64_t *)&v6, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_234132898(a1 + 168, (uint64_t)v6, v7, a2);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/protocols/secure_channel/PASESession.cpp";
      *((_DWORD *)a2 + 4) = 160;
    }
  }
  v5 = sub_2341C4608();
  if (os_signpost_enabled(v5))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SetupSpake2p";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v5, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412C938(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  int v11;
  unint64_t v16;
  void *v17;
  void *v18;
  int v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  int v27;

  v9 = *(_QWORD *)(a5 + 8);
  if (!v9)
  {
    *(_DWORD *)a8 = 47;
    *(_QWORD *)(a8 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    v11 = 168;
    goto LABEL_7;
  }
  if (!*(_QWORD *)a5)
  {
    *(_DWORD *)a8 = 47;
    *(_QWORD *)(a8 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    v11 = 169;
    goto LABEL_7;
  }
  if ((unint64_t)(v9 - 33) <= 0xFFFFFFFFFFFFFFEELL)
  {
    *(_DWORD *)a8 = 47;
    *(_QWORD *)(a8 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    v11 = 171;
LABEL_7:
    *(_DWORD *)(a8 + 16) = v11;
    return;
  }
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  sub_23412C2E0(a1, a2, 0, a7, (_QWORD *)a8);
  if (*(_DWORD *)a8)
  {
LABEL_25:
    sub_23412C070(a1);
    return;
  }
  *(_BYTE *)(a1 + 24) = 1;
  v16 = *(_QWORD *)(a5 + 8);
  if (v16 >> 16)
  {
    v21 = 180;
    v22 = 47;
LABEL_18:
    *(_DWORD *)a8 = v22;
    *(_QWORD *)(a8 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    *(_DWORD *)(a8 + 16) = v21;
    goto LABEL_25;
  }
  *(_WORD *)(a1 + 1820) = v16;
  v17 = *(void **)(a1 + 1824);
  if (v17)
  {
    j__free(v17);
    *(_QWORD *)(a1 + 1824) = 0;
    LOWORD(v16) = *(_WORD *)(a1 + 1820);
  }
  v18 = sub_234114774((unsigned __int16)v16);
  *(_QWORD *)(a1 + 1824) = v18;
  if (!v18)
  {
    v21 = 190;
    v22 = 11;
    goto LABEL_18;
  }
  memmove(v18, *(const void **)a5, *(unsigned __int16 *)(a1 + 1820));
  memmove((void *)(a1 + 1552), a3, 0x61uLL);
  *(_DWORD *)(a1 + 1816) = a4;
  *(_WORD *)(a1 + 164) = 8193;
  *(_BYTE *)(a1 + 1872) = 0;
  v26 = sub_2341B1C28();
  v27 = v19;
  if (*a6)
    v20 = (uint64_t *)sub_233C0FDD4(a6);
  else
    v20 = &v26;
  v23 = *((_DWORD *)v20 + 2);
  v24 = *v20;
  *(_BYTE *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 116) = v24;
  *(_DWORD *)(a1 + 124) = v23;
  v25 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    LOWORD(v26) = 0;
    _os_log_impl(&dword_233BF3000, v25, OS_LOG_TYPE_INFO, "Waiting for PBKDF param request", (uint8_t *)&v26, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  if (*(_DWORD *)a8)
    goto LABEL_25;
}

void sub_23412CB5C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  _BYTE buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v14 = sub_2341C4608();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Pair";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v14, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (a5)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    sub_23412C2E0(a1, a2, a3, a6, a7);
    if (*(_DWORD *)a7)
      goto LABEL_11;
    *(_BYTE *)(a1 + 24) = 0;
    sub_234121A84(a1 + 88, a5);
    v15 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 88));
    sub_233CB4208(*v15, buf);
    v16 = sub_2341CD430(*(uint64_t *)buf);
    *(_QWORD *)(v16 + 96) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    *(_QWORD *)(v16 + 88) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
    v17 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 88));
    sub_2341AD0C8(*v17, 2000);
    *(_QWORD *)buf = sub_2341B1C28();
    *(_DWORD *)&buf[8] = v18;
    v19 = *a4 ? sub_233C0FDD4(a4) : buf;
    v20 = *((_DWORD *)v19 + 2);
    v21 = *(_QWORD *)v19;
    *(_BYTE *)(a1 + 112) = 1;
    *(_QWORD *)(a1 + 116) = v21;
    *(_DWORD *)(a1 + 124) = v20;
    sub_23412CE14(a1, (uint64_t)buf);
    *(_OWORD *)a7 = *(_OWORD *)buf;
    a7[2] = *(_QWORD *)&buf[16];
    if (*(_DWORD *)a7
      || ((*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104)), *(_DWORD *)a7))
    {
LABEL_11:
      sub_23412C070(a1);
    }
  }
  else
  {
    *(_DWORD *)a7 = 47;
    a7[1] = "src/protocols/secure_channel/PASESession.cpp";
    *((_DWORD *)a7 + 4) = 215;
  }
  v22 = sub_2341C4608();
  if (os_signpost_enabled(v22))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Pair";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412CE14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  _BYTE *v5;
  int v6;
  NSObject *v7;
  _BYTE *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  char *v13[2];
  uint8_t v14[16];
  uint64_t v15;
  int v16[6];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  _QWORD v21[3];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "PASESession";
    v19 = 2080;
    v20 = "SendPBKDFParamRequest";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_234122B6C(a1 + 16, (uint64_t)buf);
  if (!buf[0])
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    v6 = 279;
LABEL_14:
    *(_DWORD *)(a2 + 16) = v6;
    goto LABEL_15;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234139DB0((char *)(a1 + 1657), 0x20uLL, a2);
  if (*(_DWORD *)a2)
    goto LABEL_15;
  sub_234118674(0x6DuLL, 0x26u, &v15);
  if (!v15)
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    v6 = 291;
    goto LABEL_14;
  }
  sub_234106C48((uint64_t)buf);
  v21[1] = 0;
  v21[2] = 0;
  v21[0] = &unk_250504030;
  v22 = 0;
  sub_233CAF098((uint64_t)v21, &v15, 0);
  sub_234106CA8((uint64_t)buf, (uint64_t)v21, 0xFFFFFFFF, (uint64_t)v16);
  v16[0] = -1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_234107E40((char *)buf, 0x100uLL, 21, v16, a2);
  if (!*(_DWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_234107438((char *)buf, 1uLL, (char *)(a1 + 1657), 0x20u, a2);
    if (!*(_DWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_234122B6C(a1 + 16, (uint64_t)v14);
      v5 = sub_233C05D98(v14);
      sub_234107224((char *)buf, 2uLL, *(unsigned __int16 *)v5, a2);
      if (!*(_DWORD *)a2)
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        sub_234107224((char *)buf, 3uLL, 0, a2);
        if (!*(_DWORD *)a2)
        {
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          sub_234106F04((char *)buf, 4uLL, *(unsigned __int8 *)(a1 + 1656), a2);
          if (!*(_DWORD *)a2)
          {
            if (*(_BYTE *)(a1 + 112))
            {
              *(_QWORD *)a2 = 0;
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = 0;
              v8 = sub_234122C20((_BYTE *)(a1 + 112));
              sub_234130CF8(5uLL, (uint64_t)v8, (char *)buf, (_QWORD *)a2);
              if (*(_DWORD *)a2)
                goto LABEL_11;
              *(_QWORD *)a2 = 0;
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = 0;
              sub_234107FB0((char *)buf, v16[0], a2);
              if (*(_DWORD *)a2)
                goto LABEL_11;
              *(_QWORD *)a2 = 0;
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = 0;
              sub_233C115F0((uint64_t)buf, &v15, (_QWORD *)a2);
              if (*(_DWORD *)a2)
                goto LABEL_11;
              *(_QWORD *)a2 = 0;
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = 0;
              sub_233BF7114(v13, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 24));
              sub_234139528(a1 + 1696, v13[0], (size_t)v13[1], a2);
              if (*(_DWORD *)a2)
                goto LABEL_11;
              *(_QWORD *)a2 = 0;
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = 0;
              v9 = *(_QWORD *)sub_234121AD0((_BYTE *)(a1 + 88));
              *(_WORD *)v14 = 1;
              sub_2341AD108(v9, 0, 32, &v15, v14, a2);
              if (*(_DWORD *)a2)
                goto LABEL_11;
              *(_WORD *)(a1 + 164) = 8449;
              v10 = sub_234117B80(0xBu, "SecureChannel");
              if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v14 = 0;
                _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "Sent PBKDF param request", v14, 2u);
              }
              if (sub_234114844(3u))
                sub_2341147D0(0xBu, 3);
              v11 = 0;
              v12 = 319;
            }
            else
            {
              v12 = 303;
              v11 = 3;
            }
            *(_DWORD *)a2 = v11;
            *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
            *(_DWORD *)(a2 + 16) = v12;
          }
        }
      }
    }
  }
LABEL_11:
  sub_2340F6E6C(v21);
  if (v15)
    sub_23411814C(v15);
LABEL_15:
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "PASESession";
    v19 = 2080;
    v20 = "SendPBKDFParamRequest";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412D2A8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  __int128 v12;
  int v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v15 = "PASESession";
    v16 = 2080;
    v17 = "OnResponseTimeout";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (a2)
  {
    if (!*(_BYTE *)(a1 + 88) || *(_QWORD *)sub_234121AD0((_BYTE *)(a1 + 88)) == a2)
    {
      v6 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = *sub_23412D60C((_BYTE *)(a1 + 164));
        *(_DWORD *)buf = 67109120;
        LODWORD(v15) = v7;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "PASESession timed out while waiting for a response from the peer. Expected message type was %u", buf, 8u);
      }
      v8 = a1 + 16;
      if (sub_234114844(1u))
      {
        sub_23412D60C((_BYTE *)(a1 + 164));
        sub_2341147D0(0xBu, 1);
      }
      v9 = sub_2341C4608();
      if (os_signpost_enabled(v9))
      {
        ++dword_25615967C;
        *(_DWORD *)buf = 67109120;
        LODWORD(v15) = dword_25615967C;
        _os_signpost_emit_with_name_impl(&dword_233BF3000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PASETimeout", "%u", buf, 8u);
      }
      sub_234130C60(v8);
      sub_23412C070(a1);
      LODWORD(v12) = 50;
      *((_QWORD *)&v12 + 1) = "src/protocols/secure_channel/PASESession.cpp";
      v13 = 258;
      sub_234130CB0(v8, &v12);
    }
    else
    {
      v5 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "PASESession::OnResponseTimeout exchange doesn't match", buf, 2u);
      }
      if (sub_234114844(1u))
LABEL_20:
        sub_2341147D0(0xBu, 1);
    }
  }
  else
  {
    v10 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "PASESession::OnResponseTimeout was called by null exchange", buf, 2u);
    }
    if (sub_234114844(1u))
      goto LABEL_20;
  }
  v11 = sub_2341C4608();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)buf = 136315394;
    v15 = "PASESession";
    v16 = 2080;
    v17 = "OnResponseTimeout";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

_BYTE *sub_23412D60C(_BYTE *a1)
{
  if (!*a1)
    sub_2342584DC((uint64_t)a1);
  return a1 + 1;
}

void sub_23412D62C(uint64_t a1, uint64_t a2)
{
  sub_23412D2A8(a1 - 8, a2);
}

uint64_t sub_23412D634@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 1872))
  {
    v5 = result;
    v8 = *(_QWORD *)(*(_QWORD *)(result + 80) + 40);
    v6 = v8;
    memset(v9, 0, sizeof(v9));
    v10 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_23413373C(result + 168, v6, (uint64_t)v9, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7[0] = 0;
      v7[1] = 0;
      sub_2341C9C18(a2, v6, (uint64_t)v9, (uint64_t)v7, 0, *(unsigned __int8 *)(v5 + 24), (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *(_DWORD *)a3 = 0;
        a3[1] = "src/protocols/secure_channel/PASESession.cpp";
        *((_DWORD *)a3 + 4) = 272;
      }
    }
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 48))(v8, v9);
    return sub_23413A7A4(v9, 33);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    *((_DWORD *)a3 + 4) = 263;
  }
  return result;
}

uint64_t sub_23412D774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_23412D634(a1 - 16, a2, a3);
}

void sub_23412D77C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  __int16 v9;
  int v10;
  int v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15[2];
  char v16;
  int v17;
  int v18;
  uint8_t v19[16];
  uint64_t v20;
  uint8_t v21[16];
  uint64_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    v24 = "PASESession";
    v25 = 2080;
    v26 = "HandlePBKDFParamRequest";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_250504B30;
  *(_QWORD *)(a3 + 16) = 325;
  sub_234104468((uint64_t)buf);
  v27 = 0;
  v17 = 0;
  v18 = 21;
  v16 = 0;
  v7 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "Received PBKDF param request", v21, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  sub_233BF7114(v15, *(_QWORD *)(*a2 + 8), *(_QWORD *)(*a2 + 24));
  sub_234139528(a1 + 1696, v15[0], (size_t)v15[1], a3);
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_233C11670((uint64_t)buf, a2);
  sub_234106010((uint64_t)buf, v18, 256, v21);
  *(_OWORD *)a3 = *(_OWORD *)v21;
  *(_QWORD *)(a3 + 16) = v22;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_23410570C((uint64_t)buf, &v18, (uint64_t)v21);
  *(_OWORD *)a3 = *(_OWORD *)v21;
  *(_QWORD *)(a3 + 16) = v22;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_2341058CC((uint64_t)buf, v21);
  *(_OWORD *)a3 = *(_OWORD *)v21;
  *(_QWORD *)(a3 + 16) = v22;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  if (*(_DWORD *)((char *)&v26 + 2) != 1)
  {
    v10 = 346;
LABEL_26:
    v11 = 36;
    goto LABEL_27;
  }
  sub_234104F48((uint64_t)buf, (char *)v21, 0x20uLL, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_QWORD *)(a3 + 16) = v20;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_2341058CC((uint64_t)buf, v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_QWORD *)(a3 + 16) = v20;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  if (*(_DWORD *)((char *)&v26 + 2) != 2)
  {
    v10 = 350;
    goto LABEL_26;
  }
  sub_2341049E0((uint64_t)buf, (_WORD *)&v17 + 1, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_QWORD *)(a3 + 16) = v20;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  v8 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v19 = 67109120;
    *(_DWORD *)&v19[4] = HIWORD(v17);
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Peer assigned session ID %d", v19, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  v9 = HIWORD(v17);
  *(_BYTE *)(a1 + 160) = 1;
  *(_WORD *)(a1 + 162) = v9;
  sub_2341058CC((uint64_t)buf, v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_QWORD *)(a3 + 16) = v20;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  if (*(_DWORD *)((char *)&v26 + 2) != 3)
  {
    v10 = 357;
    goto LABEL_26;
  }
  sub_2341049E0((uint64_t)buf, &v17, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_QWORD *)(a3 + 16) = v20;
  if (*(_DWORD *)a3)
  {
LABEL_28:
    sub_234125154(a1 + 16, (_BYTE *)(a1 + 88), 2);
    goto LABEL_29;
  }
  if ((_WORD)v17)
  {
    v10 = 359;
    v11 = 56;
LABEL_27:
    *(_DWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    *(_DWORD *)(a3 + 16) = v10;
    goto LABEL_28;
  }
  sub_2341058CC((uint64_t)buf, v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_QWORD *)(a3 + 16) = v20;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  if (*(_DWORD *)((char *)&v26 + 2) != 4)
  {
    v10 = 362;
    goto LABEL_26;
  }
  sub_2341046D0((uint64_t)buf, &v16, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_QWORD *)(a3 + 16) = v20;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  sub_2341058CC((uint64_t)buf, v19);
  if (*(_DWORD *)v19 != 33)
  {
    sub_234130E60(a1 + 16, 5, (uint64_t)buf, (uint64_t)v19);
    *(_OWORD *)a3 = *(_OWORD *)v19;
    *(_QWORD *)(a3 + 16) = v20;
    if (*(_DWORD *)a3)
      goto LABEL_28;
    v13 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 88));
    sub_233CB4208(*v13, v19);
    v14 = sub_2341CD430(*(uint64_t *)v19);
    sub_234125EDC(v14, (uint64_t *)(a1 + 128));
    (*(void (**)(_QWORD))(**(_QWORD **)v19 + 32))(*(_QWORD *)v19);
  }
  sub_23412DD08(a1, (char *)v21, 0x20uLL, v16, (uint64_t)v19);
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_QWORD *)(a3 + 16) = v20;
  if (*(_DWORD *)a3)
    goto LABEL_28;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104));
LABEL_29:
  if (v27)
    sub_23411814C(v27);
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)buf = 136315394;
    v24 = "PASESession";
    v25 = 2080;
    v26 = "HandlePBKDFParamRequest";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412DD08(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  _BYTE *v11;
  int v12;
  NSObject *v13;
  _BYTE *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  char *v18[2];
  uint8_t v19[4];
  uint64_t v20;
  int v21[6];
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  _QWORD v26[3];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    v23 = "PASESession";
    v24 = 2080;
    v25 = "SendPBKDFParamResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_234122B6C(a1 + 16, (uint64_t)buf);
  if (!buf[0])
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    v12 = 390;
LABEL_13:
    *(_DWORD *)(a5 + 16) = v12;
    goto LABEL_14;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  sub_234139DB0((char *)(a1 + 1657), 0x20uLL, a5);
  if (*(_DWORD *)a5)
    goto LABEL_14;
  sub_234118674(*(unsigned __int16 *)(a1 + 1820) + 152, 0x26u, &v20);
  if (!v20)
  {
    *(_DWORD *)a5 = 11;
    *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    v12 = 403;
    goto LABEL_13;
  }
  sub_234106C48((uint64_t)buf);
  v26[1] = 0;
  v26[2] = 0;
  v26[0] = &unk_250504030;
  v27 = 0;
  sub_233CAF098((uint64_t)v26, &v20, 0);
  sub_234106CA8((uint64_t)buf, (uint64_t)v26, 0xFFFFFFFF, (uint64_t)v21);
  v21[0] = -1;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  sub_234107E40((char *)buf, 0x100uLL, 21, v21, a5);
  if (!*(_DWORD *)a5)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    sub_2341073FC((char *)buf, 1uLL, a2, a3, a5);
    if (!*(_DWORD *)a5)
    {
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      sub_234107438((char *)buf, 2uLL, (char *)(a1 + 1657), 0x20u, a5);
      if (!*(_DWORD *)a5)
      {
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        sub_234122B6C(a1 + 16, (uint64_t)v19);
        v11 = sub_233C05D98(v19);
        sub_234107224((char *)buf, 3uLL, *(unsigned __int16 *)v11, a5);
        if (!*(_DWORD *)a5)
        {
          if ((a4 & 1) != 0)
            goto LABEL_19;
          *(_DWORD *)v19 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          *(_QWORD *)a5 = 0;
          sub_234107E40((char *)buf, 4uLL, 21, v19, a5);
          if (!*(_DWORD *)a5)
          {
            *(_QWORD *)a5 = 0;
            *(_QWORD *)(a5 + 8) = 0;
            *(_QWORD *)(a5 + 16) = 0;
            sub_23410726C((char *)buf, 1uLL, *(_DWORD *)(a1 + 1816), a5);
            if (!*(_DWORD *)a5)
            {
              *(_QWORD *)a5 = 0;
              *(_QWORD *)(a5 + 8) = 0;
              *(_QWORD *)(a5 + 16) = 0;
              sub_234107438((char *)buf, 2uLL, *(char **)(a1 + 1824), *(unsigned __int16 *)(a1 + 1820), a5);
              if (!*(_DWORD *)a5)
              {
                *(_QWORD *)a5 = 0;
                *(_QWORD *)(a5 + 8) = 0;
                *(_QWORD *)(a5 + 16) = 0;
                sub_234107FB0((char *)buf, *(int *)v19, a5);
                if (!*(_DWORD *)a5)
                {
LABEL_19:
                  if (!*(_BYTE *)(a1 + 112))
                  {
                    *(_DWORD *)a5 = 3;
                    *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
                    v17 = 424;
LABEL_37:
                    *(_DWORD *)(a5 + 16) = v17;
                    goto LABEL_10;
                  }
                  *(_QWORD *)a5 = 0;
                  *(_QWORD *)(a5 + 8) = 0;
                  *(_QWORD *)(a5 + 16) = 0;
                  v14 = sub_234122C20((_BYTE *)(a1 + 112));
                  sub_234130CF8(5uLL, (uint64_t)v14, (char *)buf, (_QWORD *)a5);
                  if (!*(_DWORD *)a5)
                  {
                    *(_QWORD *)a5 = 0;
                    *(_QWORD *)(a5 + 8) = 0;
                    *(_QWORD *)(a5 + 16) = 0;
                    sub_234107FB0((char *)buf, v21[0], a5);
                    if (!*(_DWORD *)a5)
                    {
                      *(_QWORD *)a5 = 0;
                      *(_QWORD *)(a5 + 8) = 0;
                      *(_QWORD *)(a5 + 16) = 0;
                      sub_233C115F0((uint64_t)buf, &v20, (_QWORD *)a5);
                      if (!*(_DWORD *)a5)
                      {
                        *(_QWORD *)a5 = 0;
                        *(_QWORD *)(a5 + 8) = 0;
                        *(_QWORD *)(a5 + 16) = 0;
                        sub_233BF7114(v18, *(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 24));
                        sub_234139528(a1 + 1696, v18[0], (size_t)v18[1], a5);
                        if (!*(_DWORD *)a5)
                        {
                          *(_QWORD *)a5 = 0;
                          *(_QWORD *)(a5 + 8) = 0;
                          *(_QWORD *)(a5 + 16) = 0;
                          sub_23412C794(a1, (_QWORD *)a5);
                          if (!*(_DWORD *)a5)
                          {
                            *(_QWORD *)a5 = 0;
                            *(_QWORD *)(a5 + 8) = 0;
                            *(_QWORD *)(a5 + 16) = 0;
                            v15 = *(_QWORD *)sub_234121AD0((_BYTE *)(a1 + 88));
                            *(_WORD *)v19 = 1;
                            sub_2341AD108(v15, 0, 33, &v20, v19, a5);
                            if (!*(_DWORD *)a5)
                            {
                              v16 = sub_234117B80(0xBu, "SecureChannel");
                              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
                              {
                                *(_WORD *)v19 = 0;
                                _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "Sent PBKDF param response", v19, 2u);
                              }
                              if (sub_234114844(3u))
                                sub_2341147D0(0xBu, 3);
                              *(_WORD *)(a1 + 164) = 8705;
                              *(_DWORD *)a5 = 0;
                              *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
                              v17 = 440;
                              goto LABEL_37;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_10:
  sub_2340F6E6C(v26);
  if (v20)
    sub_23411814C(v20);
LABEL_14:
  v13 = sub_2341C4608();
  if (os_signpost_enabled(v13))
  {
    *(_DWORD *)buf = 136315394;
    v23 = "PASESession";
    v24 = 2080;
    v25 = "SendPBKDFParamResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412E268(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  int v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  unsigned __int16 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20[2];
  __int128 v21;
  unsigned __int16 v22;
  int v23;
  uint8_t v24[16];
  uint64_t v25;
  _OWORD v26[5];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    v31 = "PASESession";
    v32 = 2080;
    v33 = "HandlePBKDFParamResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_250504B48;
  *(_QWORD *)(a3 + 16) = 446;
  sub_234104468((uint64_t)buf);
  v34 = 0;
  v23 = 21;
  v22 = 0;
  v21 = 0uLL;
  memset(v26, 0, sizeof(v26));
  v7 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LOWORD(v27) = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "Received PBKDF param response", (uint8_t *)&v27, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  sub_233BF7114(v20, *(_QWORD *)(*a2 + 8), *(_QWORD *)(*a2 + 24));
  sub_234139528(a1 + 1696, v20[0], (size_t)v20[1], a3);
  if (*(_DWORD *)a3)
    goto LABEL_27;
  sub_233C11670((uint64_t)buf, a2);
  sub_234106010((uint64_t)buf, v23, 256, &v27);
  *(_OWORD *)a3 = v27;
  *(_QWORD *)(a3 + 16) = v28;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  sub_23410570C((uint64_t)buf, &v23, (uint64_t)&v27);
  *(_OWORD *)a3 = v27;
  *(_QWORD *)(a3 + 16) = v28;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  sub_2341058CC((uint64_t)buf, &v27);
  *(_OWORD *)a3 = v27;
  *(_QWORD *)(a3 + 16) = v28;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  if (*(_DWORD *)((char *)&v33 + 2) != 1)
  {
    v11 = 467;
    goto LABEL_25;
  }
  sub_234104F48((uint64_t)buf, (char *)&v27, 0x20uLL, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
  {
LABEL_27:
    sub_234125154(a1 + 16, (_BYTE *)(a1 + 88), 2);
    goto LABEL_28;
  }
  if ((_QWORD)v27 != *(_QWORD *)(a1 + 1657)
    || *((_QWORD *)&v27 + 1) != *(_QWORD *)(a1 + 1665)
    || v28 != *(_QWORD *)(a1 + 1673)
    || v29 != *(_QWORD *)(a1 + 1681))
  {
    v11 = 470;
    v12 = 56;
LABEL_26:
    *(_DWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    *(_DWORD *)(a3 + 16) = v11;
    goto LABEL_27;
  }
  sub_2341058CC((uint64_t)buf, v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  if (*(_DWORD *)((char *)&v33 + 2) != 2)
  {
    v11 = 473;
    goto LABEL_25;
  }
  sub_234104F48((uint64_t)buf, (char *)&v27, 0x20uLL, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  sub_2341058CC((uint64_t)buf, v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  if (*(_DWORD *)((char *)&v33 + 2) != 3)
  {
    v11 = 478;
    goto LABEL_25;
  }
  sub_2341049E0((uint64_t)buf, &v22, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  v14 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v24 = 67109120;
    *(_DWORD *)&v24[4] = v22;
    _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_INFO, "Peer assigned session ID %d", v24, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  v15 = v22;
  *(_BYTE *)(a1 + 160) = 1;
  *(_WORD *)(a1 + 162) = v15;
  if (!*(_BYTE *)(a1 + 1656))
  {
    sub_2341058CC((uint64_t)buf, v24);
    *(_OWORD *)a3 = *(_OWORD *)v24;
    *(_QWORD *)(a3 + 16) = v25;
    if (*(_DWORD *)a3)
      goto LABEL_27;
    sub_23410570C((uint64_t)buf, &v23, (uint64_t)v24);
    *(_OWORD *)a3 = *(_OWORD *)v24;
    *(_QWORD *)(a3 + 16) = v25;
    if (*(_DWORD *)a3)
      goto LABEL_27;
    sub_2341058CC((uint64_t)buf, v24);
    *(_OWORD *)a3 = *(_OWORD *)v24;
    *(_QWORD *)(a3 + 16) = v25;
    if (*(_DWORD *)a3)
      goto LABEL_27;
    if (*(_DWORD *)((char *)&v33 + 2) == 1)
    {
      sub_234104A50((uint64_t)buf, (_DWORD *)(a1 + 1816), (uint64_t)v24);
      *(_OWORD *)a3 = *(_OWORD *)v24;
      *(_QWORD *)(a3 + 16) = v25;
      if (*(_DWORD *)a3)
        goto LABEL_27;
      sub_2341058CC((uint64_t)buf, v24);
      *(_OWORD *)a3 = *(_OWORD *)v24;
      *(_QWORD *)(a3 + 16) = v25;
      if (*(_DWORD *)a3)
        goto LABEL_27;
      if (*(_DWORD *)((char *)&v33 + 2) == 2)
      {
        sub_234104B68((uint64_t)buf, &v21, v24);
        *(_OWORD *)a3 = *(_OWORD *)v24;
        *(_QWORD *)(a3 + 16) = v25;
        if (*(_DWORD *)a3)
          goto LABEL_27;
        sub_23410577C((uint64_t)buf, v23, (uint64_t)v24);
        *(_OWORD *)a3 = *(_OWORD *)v24;
        *(_QWORD *)(a3 + 16) = v25;
        if (*(_DWORD *)a3)
          goto LABEL_27;
        sub_2341058CC((uint64_t)buf, v24);
        if (*(_DWORD *)v24 != 33)
        {
          sub_234130E60(a1 + 16, 5, (uint64_t)buf, (uint64_t)v24);
          *(_OWORD *)a3 = *(_OWORD *)v24;
          *(_QWORD *)(a3 + 16) = v25;
          if (*(_DWORD *)a3)
            goto LABEL_27;
          v18 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 88));
          sub_233CB4208(*v18, v24);
          v19 = sub_2341CD430(*(uint64_t *)v24);
          sub_234125EDC(v19, (uint64_t *)(a1 + 128));
          (*(void (**)(_QWORD))(**(_QWORD **)v24 + 32))(*(_QWORD *)v24);
        }
        goto LABEL_48;
      }
      v11 = 507;
    }
    else
    {
      v11 = 503;
    }
LABEL_25:
    v12 = 36;
    goto LABEL_26;
  }
  sub_2341058CC((uint64_t)buf, v24);
  if (*(_DWORD *)v24 != 33)
  {
    sub_234130E60(a1 + 16, 5, (uint64_t)buf, (uint64_t)v24);
    *(_OWORD *)a3 = *(_OWORD *)v24;
    *(_QWORD *)(a3 + 16) = v25;
    if (*(_DWORD *)a3)
      goto LABEL_27;
    v16 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 88));
    sub_233CB4208(*v16, v24);
    v17 = sub_2341CD430(*(uint64_t *)v24);
    sub_234125EDC(v17, (uint64_t *)(a1 + 128));
    (*(void (**)(_QWORD))(**(_QWORD **)v24 + 32))(*(_QWORD *)v24);
  }
  sub_233BF7114(&v21, *(_QWORD *)(a1 + 1824), *(unsigned __int16 *)(a1 + 1820));
LABEL_48:
  sub_23412C794(a1, v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  sub_234133D20(*(unsigned int *)(a1 + 1816), (uint64_t *)&v21, *(_DWORD *)(a1 + 1652), (char *)v26, 0x50u, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  sub_234132B74((_QWORD *)(a1 + 168), 0, 0, 0, 0, (uint64_t)v26, 40, (uint64_t)&v26[2] + 8, v24, 40);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
    goto LABEL_27;
  sub_23412EA20(a1, (uint64_t)v24);
  *(_OWORD *)a3 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 16) = v25;
  if (*(_DWORD *)a3)
    goto LABEL_27;
LABEL_28:
  if (v34)
    sub_23411814C(v34);
  v13 = sub_2341C4608();
  if (os_signpost_enabled(v13))
  {
    *(_DWORD *)buf = 136315394;
    v31 = "PASESession";
    v32 = 2080;
    v33 = "HandlePBKDFParamResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412EA20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  uint8_t v12[16];
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16[72];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  _QWORD v21[3];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "PASESession";
    v19 = 2080;
    v20 = "SendMsg1";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_234118674(0x47uLL, 0x26u, &v15);
  if (!v15)
  {
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    *(_DWORD *)(a2 + 16) = 546;
    goto LABEL_21;
  }
  sub_234106C48((uint64_t)buf);
  v21[1] = 0;
  v21[2] = 0;
  v21[0] = &unk_250504030;
  v22 = 0;
  sub_233CAF098((uint64_t)v21, &v15, 0);
  sub_234106CA8((uint64_t)buf, (uint64_t)v21, 0xFFFFFFFF, (uint64_t)v16);
  v14 = -1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_234107E40((char *)buf, 0x100uLL, 21, &v14, a2);
  if (!*(_DWORD *)a2)
  {
    v13 = 65;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    sub_234132CB4((_QWORD *)(a1 + 168), (uint64_t)v16, &v13, (_QWORD *)a2, v5, v6);
    if (!*(_DWORD *)a2)
    {
      if (v13 != 65)
      {
        v10 = 560;
        v9 = 172;
LABEL_18:
        *(_DWORD *)a2 = v9;
        *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
        *(_DWORD *)(a2 + 16) = v10;
        goto LABEL_19;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_2341073FC((char *)buf, 1uLL, v16, 0x41uLL, a2);
      if (!*(_DWORD *)a2)
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        sub_234107FB0((char *)buf, v14, a2);
        if (!*(_DWORD *)a2)
        {
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          sub_233C115F0((uint64_t)buf, &v15, (_QWORD *)a2);
          if (!*(_DWORD *)a2)
          {
            *(_QWORD *)a2 = 0;
            *(_QWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 16) = 0;
            v7 = *(_QWORD *)sub_234121AD0((_BYTE *)(a1 + 88));
            *(_WORD *)v12 = 1;
            sub_2341AD108(v7, 0, 34, &v15, v12, a2);
            if (!*(_DWORD *)a2)
            {
              v8 = sub_234117B80(0xBu, "SecureChannel");
              if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v12 = 0;
                _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Sent spake2p msg1", v12, 2u);
              }
              if (sub_234114844(3u))
                sub_2341147D0(0xBu, 3);
              v9 = 0;
              *(_WORD *)(a1 + 164) = 8961;
              v10 = 571;
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
LABEL_19:
  sub_2340F6E6C(v21);
  if (v15)
    sub_23411814C(v15);
LABEL_21:
  v11 = sub_2341C4608();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "PASESession";
    v19 = 2080;
    v20 = "SendMsg1";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412EDA4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  __n128 v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  unsigned int v14;
  __n128 v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE v32[16];
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE buf[48];
  _QWORD v38[3];
  char v39;
  char v40[32];
  char v41[65];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "HandleMsg1_and_SendMsg2";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v35 = 32;
  v36 = 65;
  v8 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Received spake2p msg1", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  v9 = sub_2341C4608();
  if (os_signpost_enabled(v9))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Pake1";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v9, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_234104468((uint64_t)v32);
  v34 = 0;
  v31 = 21;
  v30 = 0;
  sub_233C11670((uint64_t)v32, a2);
  sub_234106010((uint64_t)v32, 21, 256, buf);
  v10.n128_u64[0] = *(_QWORD *)buf;
  if (*(_DWORD *)buf)
    goto LABEL_12;
  sub_23410570C((uint64_t)v32, &v31, (uint64_t)buf);
  v10.n128_u64[0] = *(_QWORD *)buf;
  if (*(_DWORD *)buf)
    goto LABEL_12;
  sub_2341058CC((uint64_t)v32, buf);
  v10.n128_u64[0] = *(_QWORD *)buf;
  if (*(_DWORD *)buf)
    goto LABEL_12;
  v11 = "src/protocols/secure_channel/PASESession.cpp";
  if (v33 != 1)
  {
    LODWORD(v3) = 599;
    v16 = 0x2400000024;
    goto LABEL_34;
  }
  v14 = sub_2341046A4((uint64_t)v32);
  sub_234104C0C((uint64_t)v32, &v30, (uint64_t)buf);
  v10.n128_u64[0] = *(_QWORD *)buf;
  if (*(_DWORD *)buf
    || (sub_234132A2C((_QWORD *)(a1 + 168), 0, 0, 0, 0, a1 + 1552, 32, a1 + 1584, buf, 65),
        v10.n128_u64[0] = *(_QWORD *)buf,
        *(_DWORD *)buf)
    || (sub_234132CB4((_QWORD *)(a1 + 168), (uint64_t)v41, &v36, buf, v10, v15),
        v10.n128_u64[0] = *(_QWORD *)buf,
        *(_DWORD *)buf))
  {
LABEL_12:
    v23 = v10.n128_u64[0];
    v11 = *(const char **)&buf[8];
    v3 = *(_QWORD *)&buf[16];
    goto LABEL_13;
  }
  if (v36 == 65)
  {
    sub_234132E48((_QWORD *)(a1 + 168), v30, v14, (uint64_t)v40, (uint64_t *)&v35, buf);
    v10.n128_u64[0] = *(_QWORD *)buf;
    if (!*(_DWORD *)buf)
    {
      if (*a2)
        sub_23411814C(*a2);
      *a2 = 0;
      sub_234118674(v36 + v35 + 10, 0x26u, &v29);
      if (v29)
      {
        sub_234106C48((uint64_t)buf);
        v38[1] = 0;
        v38[2] = 0;
        v38[0] = &unk_250504030;
        v39 = 0;
        sub_234122BDC((uint64_t)buf, &v29, 0);
        v28 = -1;
        sub_234107E40(buf, 0x100uLL, 21, &v28, (uint64_t)&v25);
        if ((_DWORD)v25)
        {
          v23 = v25;
        }
        else
        {
          sub_2341073FC(buf, 1uLL, v41, 0x41uLL, (uint64_t)&v25);
          v23 = v25;
          if (!(_DWORD)v25)
          {
            sub_2341073FC(buf, 2uLL, v40, v35, (uint64_t)&v25);
            v23 = v25;
            if (!(_DWORD)v25)
            {
              sub_234107FB0(buf, v28, (uint64_t)&v25);
              v23 = v25;
              if (!(_DWORD)v25)
              {
                sub_233C115F0((uint64_t)buf, &v29, &v25);
                v23 = v25;
                if (!(_DWORD)v25)
                {
                  v21 = *(_QWORD *)sub_234121AD0((_BYTE *)(a1 + 88));
                  v24 = 1;
                  sub_2341AD108(v21, 0, 35, &v29, &v24, (uint64_t)&v25);
                  HIDWORD(v22) = HIDWORD(v25);
                  v11 = v26;
                  v3 = v27;
                  v23 = v25;
                  if (!(_DWORD)v25)
                  {
                    v17 = 0;
                    *(_WORD *)(a1 + 164) = 9217;
                    LODWORD(v22) = 0;
                    v23 = v22;
LABEL_43:
                    sub_2340F6E6C(v38);
                    if (v29)
                      sub_23411814C(v29);
                    if (v17 != 10)
                    {
                      v18 = sub_234117B80(0xBu, "SecureChannel");
                      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_INFO, "Sent spake2p msg2", buf, 2u);
                      }
                      if (sub_234114844(3u))
                        sub_2341147D0(0xBu, 3);
                      v19 = sub_2341C4608();
                      if (os_signpost_enabled(v19))
                      {
                        ++dword_256159680;
                        *(_DWORD *)buf = 67109120;
                        *(_DWORD *)&buf[4] = dword_256159680;
                        _os_signpost_emit_with_name_impl(&dword_233BF3000, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Pake2", "%u", buf, 8u);
                      }
                    }
                    HIDWORD(v20) = HIDWORD(v23);
                    if (!(_DWORD)v23)
                    {
                      LODWORD(v20) = 0;
                      v23 = v20;
                      goto LABEL_14;
                    }
LABEL_13:
                    sub_234125154(a1 + 16, (_BYTE *)(a1 + 88), 2);
LABEL_14:
                    *a3 = v23;
                    a3[1] = (uint64_t)v11;
                    a3[2] = v3;
                    goto LABEL_15;
                  }
LABEL_42:
                  v17 = 10;
                  goto LABEL_43;
                }
              }
            }
          }
        }
        v11 = v26;
        v3 = v27;
        goto LABEL_42;
      }
      LODWORD(v3) = 616;
      v16 = 0xB0000000BLL;
LABEL_34:
      v23 = v16;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *(_DWORD *)a3 = 172;
  a3[1] = (uint64_t)"src/protocols/secure_channel/PASESession.cpp";
  *((_DWORD *)a3 + 4) = 606;
LABEL_15:
  if (v34)
    sub_23411814C(v34);
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Pake1";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v13 = sub_2341C4608();
  if (os_signpost_enabled(v13))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "HandleMsg1_and_SendMsg2";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412F4CC(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE v24[16];
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint8_t buf[64];
  _QWORD v29[3];
  char v30;
  char v31[32];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "HandleMsg2_and_SendMsg3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_250504B60;
  a3[2] = 650;
  v27 = 32;
  v7 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "Received spake2p msg2", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  sub_234104468((uint64_t)v24);
  v26 = 0;
  v23 = 21;
  v21 = 0;
  v22 = 0;
  sub_233C11670((uint64_t)v24, a2);
  sub_234106010((uint64_t)v24, 21, 256, a3);
  if (*(_DWORD *)a3)
    goto LABEL_37;
  sub_23410570C((uint64_t)v24, &v23, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_37;
  sub_2341058CC((uint64_t)v24, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_37;
  if (v25 != 1)
  {
    *(_DWORD *)a3 = 36;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    v14 = 675;
LABEL_36:
    *((_DWORD *)a3 + 4) = v14;
LABEL_37:
    sub_234125154(a1 + 16, (_BYTE *)(a1 + 88), 2);
    goto LABEL_38;
  }
  v8 = sub_2341046A4((uint64_t)v24);
  sub_234104C0C((uint64_t)v24, &v22, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_37;
  sub_2341058CC((uint64_t)v24, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_37;
  if (v25 != 2)
  {
    *(_DWORD *)a3 = 36;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    v14 = 680;
    goto LABEL_36;
  }
  v9 = sub_2341046A4((uint64_t)v24);
  sub_234104C0C((uint64_t)v24, &v21, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_37;
  sub_234132E48((_QWORD *)(a1 + 168), v22, v8, (uint64_t)v31, (uint64_t *)&v27, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_37;
  sub_234133530(a1 + 168, v21, v9, (uint64_t)buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  a3[2] = *(_QWORD *)&buf[16];
  if (*(_DWORD *)a3)
    goto LABEL_37;
  if (*a2)
    sub_23411814C(*a2);
  *a2 = 0;
  sub_234118674(v27 + 6, 0x26u, &v20);
  if (!v20)
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    v14 = 694;
    goto LABEL_36;
  }
  sub_234106C48((uint64_t)buf);
  v29[1] = 0;
  v29[2] = 0;
  v29[0] = &unk_250504030;
  v30 = 0;
  sub_234122BDC((uint64_t)buf, &v20, 0);
  v19 = -1;
  sub_234107E40((char *)buf, 0x100uLL, 21, &v19, (uint64_t)&v17);
  *(_OWORD *)a3 = v17;
  a3[2] = v18;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a3)
    goto LABEL_25;
  sub_2341073FC((char *)buf, 1uLL, v31, v27, (uint64_t)&v17);
  *(_OWORD *)a3 = v17;
  a3[2] = v18;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a3)
    goto LABEL_25;
  sub_234107FB0((char *)buf, v19, (uint64_t)&v17);
  *(_OWORD *)a3 = v17;
  a3[2] = v18;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a3)
    goto LABEL_25;
  sub_233C115F0((uint64_t)buf, &v20, &v17);
  *(_OWORD *)a3 = v17;
  a3[2] = v18;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a3
    || (v11 = *(_QWORD *)sub_234121AD0((_BYTE *)(a1 + 88)),
        v16 = 1,
        sub_2341AD108(v11, 0, 36, &v20, &v16, (uint64_t)&v17),
        *(_OWORD *)a3 = v17,
        a3[2] = v18,
        (v10 = *(_DWORD *)a3) != 0))
  {
LABEL_25:
    v12 = 10;
  }
  else
  {
    v12 = 0;
    *(_WORD *)(a1 + 164) = 16385;
  }
  sub_2340F6E6C(v29);
  if (v20)
    sub_23411814C(v20);
  if (v12 != 10)
  {
    v13 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_INFO, "Sent spake2p msg3", buf, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0xBu, 3);
  }
  if (v10)
    goto LABEL_37;
LABEL_38:
  if (v26)
    sub_23411814C(v26);
  v15 = sub_2341C4608();
  if (os_signpost_enabled(v15))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "HandleMsg2_and_SendMsg3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v15, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23412FAB8(_BYTE *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "PASESession";
    v19 = 2080;
    v20 = "HandleMsg3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_OWORD *)a3 = xmmword_250504B78;
  a3[2] = 725;
  v7 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "Received spake2p msg3", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    ++dword_256159684;
    *(_DWORD *)buf = 67109120;
    LODWORD(v18) = dword_256159684;
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Pake3", "%u", buf, 8u);
  }
  a1[164] = 0;
  sub_234104468((uint64_t)buf);
  v21 = 0;
  v16 = 21;
  v15 = 0;
  sub_233C11670((uint64_t)buf, a2);
  sub_234106010((uint64_t)buf, 21, 256, a3);
  if (*(_DWORD *)a3)
    goto LABEL_19;
  sub_23410570C((uint64_t)buf, &v16, (uint64_t)&v13);
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (*(_DWORD *)a3)
    goto LABEL_19;
  sub_2341058CC((uint64_t)buf, &v13);
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (*(_DWORD *)a3)
    goto LABEL_19;
  if (*(_DWORD *)((char *)&v20 + 2) != 1)
  {
    v10 = 743;
    v11 = 36;
LABEL_18:
    *(_DWORD *)a3 = v11;
    a3[1] = "src/protocols/secure_channel/PASESession.cpp";
    *((_DWORD *)a3 + 4) = v10;
    goto LABEL_19;
  }
  v9 = sub_2341046A4((uint64_t)buf);
  sub_234104C0C((uint64_t)buf, &v15, (uint64_t)&v13);
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (*(_DWORD *)a3)
    goto LABEL_19;
  if (v9 != 32)
  {
    v10 = 747;
    v11 = 24;
    goto LABEL_18;
  }
  sub_234133530((uint64_t)(a1 + 168), v15, 32, (uint64_t)&v13);
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (!*(_DWORD *)a3)
  {
    sub_234125154((uint64_t)(a1 + 16), a1 + 88, 0);
    a1[1872] = 1;
    sub_234130984((uint64_t)(a1 + 16));
    goto LABEL_20;
  }
LABEL_19:
  sub_234125154((uint64_t)(a1 + 16), a1 + 88, 2);
LABEL_20:
  if (v21)
    sub_23411814C(v21);
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "PASESession";
    v19 = 2080;
    v20 = "HandleMsg3";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_23412FE54(uint64_t a1)
{
  *(_BYTE *)(a1 + 1872) = 1;
  return sub_234130984(a1 + 16);
}

uint64_t sub_23412FE64(uint64_t a1)
{
  *(_BYTE *)(a1 + 1856) = 1;
  return sub_234130984(a1);
}

uint64_t sub_23412FE70@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  NSObject *v6;
  char *v7;
  uint64_t result;
  _BYTE buf[24];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1 == 2)
    v4 = 56;
  else
    v4 = 172;
  if (a1 == 2)
    v5 = 776;
  else
    v5 = 780;
  *(_OWORD *)a2 = xmmword_250504B90;
  *(_DWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = "src/protocols/secure_channel/PASESession.cpp";
  *(_QWORD *)(a2 + 16) = 772;
  *(_DWORD *)(a2 + 16) = v5;
  v6 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_QWORD *)&buf[16] = *(_QWORD *)(a2 + 16);
    v7 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a1;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Received error (protocol code %d) during PASE process: %s", buf, 0x12u);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_QWORD *)&buf[16] = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(0xBu, 1);
  }
  return result;
}

uint64_t sub_23412FFCC@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  return sub_23412FE70(a1, a2);
}

uint64_t sub_23412FFD4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  uint8_t v21[8];
  uint64_t v22;

  if (a2)
  {
    v9 = result;
    v10 = (_BYTE *)(result + 88);
    if (*(_BYTE *)(result + 88))
    {
      result = (uint64_t)sub_234121AD0((_BYTE *)(result + 88));
      if (*(_QWORD *)result != a2)
      {
        *(_OWORD *)a5 = xmmword_250504BA8;
        *(_QWORD *)(a5 + 16) = 800;
        return result;
      }
    }
    else
    {
      sub_234121A84(result + 88, a2);
    }
    v12 = (uint64_t *)sub_234121AD0(v10);
    sub_233CB4208(*v12, &v22);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    if (v13 != 1)
    {
      v20 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "PASESession received PBKDFParamRequest over encrypted session.  Ignoring.", v21, 2u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        result = sub_2341147D0(0xBu, 1);
      *(_DWORD *)a5 = 3;
      *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
      v11 = 811;
      goto LABEL_26;
    }
    v14 = (uint64_t *)sub_234121AD0(v10);
    result = sub_2341AD0C8(*v14, 30000);
    if (*a4)
    {
      v16 = *(unsigned __int8 *)(v9 + 164);
      v15 = (_BYTE *)(v9 + 164);
      if (v16)
      {
        result = (uint64_t)sub_23412D60C(v15);
        v17 = *((unsigned __int16 *)a3 + 2);
        v18 = *((unsigned __int16 *)a3 + 3);
        v19 = *a3;
        if (!*((_WORD *)a3 + 2) && !*((_WORD *)a3 + 3) && v19 == *(unsigned __int8 *)result)
        {
LABEL_24:
          *(_DWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
          v11 = 821;
          goto LABEL_26;
        }
      }
      else
      {
        v17 = *((unsigned __int16 *)a3 + 2);
        v18 = *((unsigned __int16 *)a3 + 3);
        v19 = *a3;
      }
      if (v17 || v18 || v19 != 64)
      {
        *(_DWORD *)a5 = 42;
        *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
        v11 = 819;
        goto LABEL_26;
      }
      goto LABEL_24;
    }
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    v11 = 816;
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/PASESession.cpp";
    v11 = 791;
  }
LABEL_26:
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

uint64_t sub_234130200@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/PASESession.cpp";
  *(_DWORD *)(a3 + 16) = 828;
  return result;
}

void sub_234130224(_BYTE *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  NSObject *v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_23412FFD4((uint64_t)a1, a2, a3, a4, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    switch(*a3)
    {
      case ' ':
        sub_23412D77C((uint64_t)a1, a4, (uint64_t)a5);
        goto LABEL_16;
      case '!':
        sub_23412E268((uint64_t)a1, a4, (uint64_t)a5);
        goto LABEL_16;
      case '"':
        sub_23412EDA4((uint64_t)a1, a4, a5);
        goto LABEL_16;
      case '#':
        sub_23412F4CC((uint64_t)a1, a4, a5);
        goto LABEL_16;
      case '$':
        sub_23412FAB8(a1, a4, a5);
        goto LABEL_16;
      default:
        if (*a3 != 64)
        {
          *(_DWORD *)a5 = 42;
          a5[1] = (uint64_t)"src/protocols/secure_channel/PASESession.cpp";
          *((_DWORD *)a5 + 4) = 875;
          break;
        }
        if (a1[164])
          v11 = *sub_23412D60C(a1 + 164) == 64;
        else
          v11 = 0;
        sub_234129B68((uint64_t)(a1 + 16), a4, v11, a5);
LABEL_16:
        if (*(_DWORD *)a5)
          break;
        goto LABEL_24;
    }
  }
  v12 = (uint64_t)(a1 + 16);
  sub_234130C60((uint64_t)(a1 + 16));
  sub_23412C070((uint64_t)a1);
  v13 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a5;
    *(_QWORD *)&buf[16] = a5[2];
    v14 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v14;
    _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Failed during PASE session setup: %s", buf, 0xCu);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *(_OWORD *)a5;
    *(_QWORD *)&buf[16] = a5[2];
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(0xBu, 1);
  }
  v15 = sub_2341C4608();
  if (os_signpost_enabled(v15))
  {
    ++dword_256159688;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = dword_256159688;
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PASEFail", "%u", buf, 8u);
  }
  v17 = *(_OWORD *)a5;
  v18 = a5[2];
  sub_234130CB0(v12, &v17);
LABEL_24:
  v16 = sub_2341C4608();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PASESession";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnMessageReceived";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341305E0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  sub_234130224((_BYTE *)(a1 - 8), a2, a3, a4, a5);
}

unint64_t sub_2341305E8()
{
  return 0xFFFFFFFB00000000;
}

uint64_t sub_2341305F8()
{
  return 0;
}

uint64_t sub_234130604@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v8;
  uint64_t result;
  uint64_t *v10;
  int v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  result = sub_2341CF724(a2, v8, a3, v13);
  if (v13[0])
  {
    v10 = (uint64_t *)sub_233CB6588(v13);
    result = sub_2341CD9D8(a1 + 2, v10);
    if ((_DWORD)result)
    {
      v11 = 0;
      a1[8] = a2;
      v12 = 38;
    }
    else
    {
      v12 = 36;
      v11 = 172;
    }
  }
  else
  {
    v12 = 35;
    v11 = 11;
  }
  *(_DWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/PairingSession.cpp";
  *(_DWORD *)(a4 + 16) = v12;
  if (v13[0])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  return result;
}

uint64_t sub_2341306D0@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  _QWORD v20[2];
  uint8_t buf[8];
  uint64_t v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)sub_233C25EA4((_BYTE *)a1 + 40);
  v7 = sub_2341CD3C0(*v6);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, v7 + 168);
  if (!*(_DWORD *)a3)
  {
    v9 = sub_234130960((uint64_t)a1);
    v10 = *a2;
    *(_DWORD *)(v7 + 112) = *((_DWORD *)a2 + 4);
    *(_OWORD *)(v7 + 96) = v10;
    *(_DWORD *)(v7 + 116) = *((_DWORD *)a2 + 5);
    *(_DWORD *)(v7 + 256) = 2;
    *(_QWORD *)(v7 + 264) = 0;
    *(_QWORD *)(v7 + 272) = 0;
    *(_QWORD *)buf = v7 + 272;
    LODWORD(v22) = 0;
    sub_2341313BC(buf, 0x20uLL);
    *(_QWORD *)buf = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
    v22 = v11;
    v20[0] = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    v20[1] = v12;
    v13 = (*(uint64_t (**)(uint64_t *))(*a1 + 72))(a1);
    sub_2341CB304(v7, (uint64_t)buf, (uint64_t)v20, v13, v14, v9, a1 + 14);
    v15 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1) >> 32;
      v17 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
      (*(void (**)(uint64_t *))(*a1 + 56))(a1);
      v18 = *(unsigned __int16 *)(v7 + 92);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v16;
      LOWORD(v22) = 1024;
      *(_DWORD *)((char *)&v22 + 2) = v17;
      HIWORD(v22) = 1024;
      v23 = v19;
      v24 = 1024;
      v25 = v18;
      v26 = 1024;
      v27 = v9;
      _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_INFO, "New secure session activated for device <%08X%08X, %d>, LSID:%d PSID:%d!", buf, 0x20u);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
    {
      (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
      (*(void (**)(uint64_t *))(*a1 + 56))(a1);
      (*(void (**)(uint64_t *))(*a1 + 56))(a1);
      result = sub_2341147D0(1u, 3);
    }
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/PairingSession.cpp";
    *((_DWORD *)a3 + 4) = 58;
  }
  return result;
}

uint64_t sub_234130960(uint64_t a1)
{
  _BYTE *v1;
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 144);
  v1 = (_BYTE *)(a1 + 144);
  if (!v2)
    sub_23425AA48((uint64_t)v1);
  return *(unsigned __int16 *)sub_233C05D98(v1);
}

uint64_t sub_234130984(uint64_t a1)
{
  _BYTE *v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t *v13;
  _BYTE *v14;
  _BYTE *v15;
  char v16;
  NSObject *v17;
  uint64_t v18;
  char v19;
  _BYTE *v20;
  uint8_t v21[8];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)(a1 + 72);
  v3 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 72));
  sub_233CB4208(*v3, &v28);
  v4 = sub_2341CD430(v28);
  v25 = *(_OWORD *)(v4 + 60);
  v5 = *(_DWORD *)(v4 + 80);
  v26 = *(_DWORD *)(v4 + 76);
  v27 = v5;
  (*(void (**)(_QWORD))(*(_QWORD *)v28 + 32))(v28);
  v6 = v26;
  if (v26 == 3)
  {
    v7 = (uint64_t *)sub_234121AD0(v2);
    sub_233CB4208(*v7, &v28);
    v8 = *(_QWORD *)(sub_2341CD430(v28) + 32);
    (*(void (**)(_QWORD))(*(_QWORD *)v28 + 32))(v28);
    v9 = (uint64_t *)sub_233C25EA4((_BYTE *)(a1 + 40));
    *(_QWORD *)(sub_2341CD3C0(*v9) + 32) = v8;
  }
  sub_234130C60(a1);
  v23 = 0uLL;
  v24 = 0;
  v10 = sub_2341306D0((uint64_t *)a1, &v25, &v23);
  if ((_DWORD)v23)
  {
    result = *(_QWORD *)(a1 + 88);
    if (result)
    {
      *(_QWORD *)(a1 + 88) = 0;
      v28 = v23;
      v29 = v24;
      return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)result + 8))(result, &v28, 1);
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 40))
      sub_23425AAE0(v10);
    LOWORD(v28) = -32744;
    BYTE2(v29) = v6;
    v12 = (uint64_t *)sub_233C25EA4((_BYTE *)(a1 + 40));
    BYTE1(v29) = *(_BYTE *)(sub_2341CD3C0(*v12) + 57);
    v13 = (uint64_t *)sub_233C25EA4((_BYTE *)(a1 + 40));
    WORD2(v29) = *(_WORD *)(sub_2341CD3C0(*v13) + 92);
    v14 = sub_233C25EA4((_BYTE *)(a1 + 40));
    *((_QWORD *)&v28 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v14 + 48))(*(_QWORD *)v14);
    v15 = sub_233C25EA4((_BYTE *)(a1 + 40));
    (*(void (**)(_QWORD))(**(_QWORD **)v15 + 48))(*(_QWORD *)v15);
    LOBYTE(v29) = v16;
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    sub_2341BE820((uint64_t)&byte_2542530C0, &v28, (uint64_t)v21);
    if (*(_DWORD *)v21)
    {
      v17 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Failed to post Secure Session established event", v21, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0xBu, 1);
    }
    v18 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    v19 = *(_BYTE *)(a1 + 40);
    if (v19)
    {
      v22 = *(_QWORD *)sub_233C25EA4((_BYTE *)(a1 + 40));
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      v19 = 1;
    }
    v21[0] = v19;
    v20 = sub_233C25EA4(v21);
    result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 24))(v18, v20);
    if (v21[0])
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  }
  return result;
}

void sub_234130C60(uint64_t a1)
{
  _BYTE *v1;

  v1 = (_BYTE *)(a1 + 72);
  if (*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)(*(_QWORD *)sub_234121AD0((_BYTE *)(a1 + 72)) + 40) = 0;
    if (*v1)
      sub_23412A174((int *)(*(_QWORD *)(a1 + 80) + 28));
    *v1 = 0;
  }
}

uint64_t sub_234130CB0(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  result = *(_QWORD *)(a1 + 88);
  if (result)
  {
    *(_QWORD *)(a1 + 88) = 0;
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
    return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)result + 8))(result, &v4);
  }
  return result;
}

char *sub_234130CF8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a3, a1, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_23410726C(a3, 1uLL, *(_DWORD *)a2, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_23410726C(a3, 2uLL, *(_DWORD *)(a2 + 4), (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_234107224(a3, 3uLL, *(unsigned __int16 *)(a2 + 8), (uint64_t)a4);
        if (!*(_DWORD *)a4)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          result = sub_234107224(a3, 4uLL, 0x12u, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
            result = sub_234107224(a3, 5uLL, 0xBu, (uint64_t)a4);
            if (!*(_DWORD *)a4)
            {
              *a4 = 0;
              a4[1] = 0;
              a4[2] = 0;
              result = sub_23410726C(a3, 6uLL, 0x1040000u, (uint64_t)a4);
              if (!*(_DWORD *)a4)
              {
                *a4 = 0;
                a4[1] = 0;
                a4[2] = 0;
                result = sub_234107224(a3, 7uLL, 1u, (uint64_t)a4);
                if (!*(_DWORD *)a4)
                  return sub_234107FB0(a3, v8, (uint64_t)a4);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_234130E60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  NSObject *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  __int16 v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  int v18;
  __int128 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  result = 4.35480532e-57;
  v19 = xmmword_250504C0C;
  v20 = 0;
  if (*(_QWORD *)(a3 + 16) == a2)
  {
    v18 = 21;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    sub_23410570C(a3, &v18, a4);
    if (!*(_DWORD *)a4)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      sub_2341058CC(a3, (_QWORD *)a4);
      if (!*(_DWORD *)a4)
      {
        v8 = sub_234117B80(0xBu, "SecureChannel");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Found MRP parameters in the message", (uint8_t *)&v14, 2u);
        }
        if (sub_234114844(3u))
          sub_2341147D0(0xBu, 3);
        v9 = *(unsigned int *)(a3 + 16);
        if (v9 == 1)
        {
          v17 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)a4 = 0;
          sub_234104A50(a3, &v17, a4);
          if (*(_DWORD *)a4)
            return result;
          *(_DWORD *)(a1 + 112) = v17;
          sub_2341058CC(a3, &v14);
          v10 = v14;
          v19 = v15;
          v20 = v16;
          if (v14)
            goto LABEL_35;
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if ((_DWORD)v9 == 2)
        {
          v17 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)a4 = 0;
          sub_234104A50(a3, &v17, a4);
          if (*(_DWORD *)a4)
            return result;
          *(_DWORD *)(a1 + 116) = v17;
          sub_2341058CC(a3, &v14);
          v10 = v14;
          v19 = v15;
          v20 = v16;
          if (v14)
            goto LABEL_35;
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if ((_DWORD)v9 == 3)
        {
          LOWORD(v17) = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)a4 = 0;
          sub_2341049E0(a3, &v17, a4);
          if (*(_DWORD *)a4)
            return result;
          *(_WORD *)(a1 + 120) = v17;
          sub_2341058CC(a3, &v14);
          v10 = v14;
          v19 = v15;
          v20 = v16;
          if (v14)
            goto LABEL_35;
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if ((_DWORD)v9 == 4)
        {
          LOWORD(v17) = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)a4 = 0;
          sub_2341049E0(a3, &v17, a4);
          if (*(_DWORD *)a4)
            return result;
          v11 = v17;
          *(_BYTE *)(a1 + 124) = 1;
          *(_WORD *)(a1 + 126) = v11;
          sub_2341058CC(a3, &v14);
          v10 = v14;
          v19 = v15;
          v20 = v16;
          if (v14)
            goto LABEL_35;
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if ((_DWORD)v9 == 5)
        {
          LOWORD(v17) = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)a4 = 0;
          sub_2341049E0(a3, &v17, a4);
          if (*(_DWORD *)a4)
            return result;
          v12 = v17;
          *(_BYTE *)(a1 + 128) = 1;
          *(_WORD *)(a1 + 130) = v12;
          sub_2341058CC(a3, &v14);
          v10 = v14;
          v19 = v15;
          v20 = v16;
          if (v14)
            goto LABEL_35;
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if ((_DWORD)v9 == 6)
        {
          v17 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)a4 = 0;
          sub_234104A50(a3, &v17, a4);
          if (*(_DWORD *)a4)
            return result;
          v13 = v17;
          *(_BYTE *)(a1 + 132) = 1;
          *(_DWORD *)(a1 + 136) = v13;
          sub_2341058CC(a3, &v14);
          v10 = v14;
          v19 = v15;
          v20 = v16;
          if (v14)
            goto LABEL_35;
          LODWORD(v9) = *(_DWORD *)(a3 + 16);
        }
        if ((_DWORD)v9 != 7)
        {
          v10 = 0;
LABEL_40:
          *(_DWORD *)a4 = v10;
          result = *(double *)&v19;
          *(_OWORD *)(a4 + 4) = v19;
          *(_DWORD *)(a4 + 20) = v20;
          return result;
        }
        LOWORD(v17) = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)a4 = 0;
        sub_2341049E0(a3, &v17, a4);
        if (!*(_DWORD *)a4)
        {
          *(_WORD *)(a1 + 140) = v17;
          sub_2341058CC(a3, &v14);
          v10 = v14;
          v19 = v15;
          v20 = v16;
LABEL_35:
          if (v10 == 33)
          {
            sub_23410577C(a3, v18, a4);
            return result;
          }
          goto LABEL_40;
        }
      }
    }
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/PairingSession.cpp";
    *(_DWORD *)(a4 + 16) = 155;
  }
  return result;
}

BOOL sub_23413127C(uint64_t a1)
{
  _BYTE *v1;
  int v2;
  uint64_t *v3;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v1 = (_BYTE *)(a1 + 40);
  if (!v2)
    return 0;
  v3 = (uint64_t *)sub_233C25EA4(v1);
  return *(_BYTE *)(sub_2341CD3C0(*v3) + 56) == 1;
}

_QWORD *sub_2341312B4(uint64_t a1)
{
  _BYTE *v2;
  uint64_t *v3;
  _QWORD *result;

  v2 = (_BYTE *)(a1 + 72);
  if (*(_BYTE *)(a1 + 72))
  {
    v3 = (uint64_t *)sub_234121AD0((_BYTE *)(a1 + 72));
    sub_2341AD5E0(*v3);
    if (*v2)
      sub_23412A174((int *)(*(_QWORD *)(a1 + 80) + 28));
    *v2 = 0;
  }
  result = sub_2341CD6FC((_QWORD *)(a1 + 16));
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

_QWORD *sub_234131314(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v3[2];
  int v4;

  v1 = result;
  if (*((_BYTE *)result + 8))
  {
    v2 = result[8];
    if (v2)
      return (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, uint64_t (*)(uint64_t, uint64_t), _QWORD *))(**(_QWORD **)(v2 + 24) + 80))(v3, *(_QWORD *)(v2 + 24), sub_234131470, result);
  }
  else
  {
    result = (_QWORD *)result[11];
    if (result)
    {
      v1[11] = 0;
      LODWORD(v3[0]) = 2;
      v3[1] = "src/protocols/secure_channel/PairingSession.cpp";
      v4 = 293;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*result + 8))(result, v3, 1);
    }
  }
  return result;
}

void sub_23413139C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 172;
  *(_QWORD *)(a1 + 8) = "src/protocols/secure_channel/PairingSession.h";
  *(_DWORD *)(a1 + 16) = 139;
}

void sub_2341313BC(_DWORD *a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = a2;
  v4 = a1[2];
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    v5 = (_QWORD *)(*(_QWORD *)a1 + 8);
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = *(_QWORD *)a1;
    *(_QWORD *)a1 += 8 * v7;
    *(_QWORD *)(v8 + 8 * v7) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_234131470(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t result;
  int v5;
  const char *v6;
  int v7;

  v3 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v5) = 0;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "ASYNC CASE Session establishment failed", (uint8_t *)&v5, 2u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(1u, 1);
  result = *(_QWORD *)(a2 + 88);
  if (result)
  {
    *(_QWORD *)(a2 + 88) = 0;
    v5 = 2;
    v6 = "src/protocols/secure_channel/PairingSession.cpp";
    v7 = 309;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)result + 8))(result, &v5, 1);
  }
  return result;
}

uint64_t sub_234131538(uint64_t a1, int a2, int a3)
{
  unint64_t v3;

  v3 = (0x1000F001F0001uLL >> (a3 - 16)) & 1;
  if ((a3 - 16) > 0x30)
    LODWORD(v3) = 0;
  if (a2)
    return 0;
  else
    return v3;
}

uint64_t sub_234131564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2340F4B80("f/%x/s/%08X%08X", a2, *(unsigned __int8 *)(a1 + 8), HIDWORD(*(_QWORD *)a1), *(_QWORD *)a1);
}

uint64_t sub_23413159C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[25];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[sub_234114950(a1, 16, v4)] = 0;
  return sub_2340F4B80("g/s/%s", a2, v4);
}

char *sub_234131614@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int16 v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13[44];
  unsigned int v14;
  _OWORD v15[2];
  char v16;
  _BYTE v17[966];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_234106C48((uint64_t)v13);
  sub_234106C70((uint64_t)v13, (uint64_t)v17, 0x3C6uLL);
  v12 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(v13, 0x100uLL, 22, &v12, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    if (!*a2)
    {
LABEL_10:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234107FB0(v13, v12, (uint64_t)a3);
      if (*(_DWORD *)a3)
        return result;
      v9 = v14;
      if (v14 >= 0x10000)
      {
        *(_DWORD *)a3 = 25;
        a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
        v11 = 72;
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v10 = *(_QWORD *)(a1 + 8);
        v15[0] = *(_OWORD *)"g/sri";
        v15[1] = unk_2342D9C10;
        v16 = 0;
        result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *, _BYTE *, _QWORD))(*(_QWORD *)v10 + 24))(v10, v15, v17, v9);
        if (*(_DWORD *)a3)
          return result;
        *(_DWORD *)a3 = 0;
        a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
        v11 = 77;
      }
      *((_DWORD *)a3 + 4) = v11;
      return result;
    }
    v7 = 0;
    v8 = (unsigned __int8 *)(a2 + 2);
    while (1)
    {
      LODWORD(v15[0]) = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      result = sub_234107E40(v13, 0x100uLL, 21, v15, (uint64_t)a3);
      if (*(_DWORD *)a3)
        break;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_2341071D8(v13, 1uLL, *v8, (uint64_t)a3);
      if (*(_DWORD *)a3)
        break;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_2341071EC(v13, 2uLL, *((_QWORD *)v8 - 1), (uint64_t)a3);
      if (*(_DWORD *)a3)
        break;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234107FB0(v13, v15[0], (uint64_t)a3);
      if (*(_DWORD *)a3)
        break;
      ++v7;
      v8 += 16;
      if (v7 >= *a2)
        goto LABEL_10;
    }
  }
  return result;
}

double sub_234131820@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double result;
  int v7;
  uint64_t v8;
  _BYTE *i;
  char v10;
  char v11;
  int v12;
  int v13;
  _BYTE v14[20];
  int v15;
  unsigned __int16 v16;
  __int128 v17;
  int v18;
  _OWORD v19[2];
  char v20;
  _BYTE v21[966];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v16 = 966;
  v5 = *(_QWORD *)(a1 + 8);
  v19[0] = *(_OWORD *)"g/sri";
  v19[1] = unk_2342D9C10;
  v20 = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, _OWORD *, _BYTE *, unsigned __int16 *))(*(_QWORD *)v5 + 16))(v14, v5, v19, v21, &v16);
  if (*(_DWORD *)v14)
  {
    *a2 = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
    v7 = 88;
LABEL_3:
    *(_DWORD *)(a3 + 16) = v7;
  }
  else
  {
    sub_234104468((uint64_t)v19);
    sub_234104498((uint64_t)v19, (uint64_t)v21, v16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_234106010((uint64_t)v19, 22, 256, (_QWORD *)a3);
    if (!*(_DWORD *)a3)
    {
      v13 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      sub_23410570C((uint64_t)v19, &v13, a3);
      if (!*(_DWORD *)a3)
      {
        v8 = 0;
        for (i = a2 + 2; ; i += 16)
        {
          sub_234106010((uint64_t)v19, 21, 256, v14);
          result = *(double *)&v14[4];
          v17 = *(_OWORD *)&v14[4];
          v18 = v15;
          if (*(_DWORD *)v14)
            break;
          if (v8 == 48)
          {
            *(_DWORD *)a3 = 11;
            *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
            v7 = 104;
            goto LABEL_3;
          }
          v12 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)a3 = 0;
          sub_23410570C((uint64_t)v19, &v12, a3);
          if (*(_DWORD *)a3)
            return result;
          v11 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)a3 = 0;
          sub_234105EE4((uint64_t)v19, 1, (_QWORD *)a3);
          if (*(_DWORD *)a3)
            return result;
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          sub_23410492C((uint64_t)v19, &v11, a3);
          if (*(_DWORD *)a3)
            return result;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)a3 = 0;
          sub_234105EE4((uint64_t)v19, 2, (_QWORD *)a3);
          if (*(_DWORD *)a3)
            return result;
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          sub_23410499C((uint64_t)v19, v14, a3);
          if (*(_DWORD *)a3)
            return result;
          v10 = v11;
          *((_QWORD *)i - 1) = *(_QWORD *)v14;
          *i = v10;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)a3 = 0;
          sub_23410577C((uint64_t)v19, v12, a3);
          if (*(_DWORD *)a3)
            return result;
          ++v8;
        }
        if (*(_DWORD *)v14 == 33)
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          sub_23410577C((uint64_t)v19, v13, a3);
          if (!*(_DWORD *)a3)
          {
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            result = sub_234105840((uint64_t)v19, a3);
            if (!*(_DWORD *)a3)
            {
              *a2 = v8;
              *(_DWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
              v7 = 133;
              goto LABEL_3;
            }
          }
        }
        else
        {
          *(_DWORD *)a3 = *(_DWORD *)v14;
          result = *(double *)&v17;
          *(_OWORD *)(a3 + 4) = v17;
          *(_DWORD *)(a3 + 20) = v18;
        }
      }
    }
  }
  return result;
}

char *sub_234131B14@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned __int16 v9;
  uint64_t v10;
  int v11;
  char v12[44];
  unsigned int v13;
  _BYTE v14[33];
  _BYTE v15[19];
  _BYTE v16[25];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_234106C48((uint64_t)v12);
  sub_234106C70((uint64_t)v12, (uint64_t)v15, 0x13uLL);
  v11 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(v12, 0x100uLL, 21, &v11, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_2341071D8(v12, 1uLL, *(unsigned __int8 *)(a3 + 8), (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_2341071EC(v12, 2uLL, *(_QWORD *)a3, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_234107FB0(v12, v11, (uint64_t)a4);
        if (!*(_DWORD *)a4)
        {
          v9 = v13;
          if (v13 >= 0x10000)
            sub_23425ACA8((uint64_t)result);
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v10 = *(_QWORD *)(a1 + 8);
          v16[sub_234114950(a2, 16, v16)] = 0;
          sub_2340F4B80("g/s/%s", (uint64_t)v14, v16);
          result = (char *)(*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)v10 + 24))(v10, v14, v15, v9);
          if (!*(_DWORD *)a4)
          {
            *(_DWORD *)a4 = 0;
            a4[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
            *((_DWORD *)a4 + 4) = 153;
          }
        }
      }
    }
  }
  return result;
}

void sub_234131CB4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned __int16 v11;
  _BYTE v12[79];
  _BYTE v13[25];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 19;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v13[sub_234114950(a2, 16, v13)] = 0;
  sub_2340F4B80("g/s/%s", (uint64_t)v12, v13);
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, unsigned __int16 *))(*(_QWORD *)v6 + 16))(v6, v12, v13, &v11);
  if (!*(_DWORD *)a4)
  {
    sub_234104468((uint64_t)v12);
    sub_234104498((uint64_t)v12, (uint64_t)v13, v11);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234106010((uint64_t)v12, 21, 256, a4);
    if (!*(_DWORD *)a4)
    {
      v10 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      sub_23410570C((uint64_t)v12, &v10, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        v9 = 0;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        sub_234105EE4((uint64_t)v12, 1, a4);
        if (!*(_DWORD *)a4)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          sub_23410492C((uint64_t)v12, &v9, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            v8 = 0;
            a4[1] = 0;
            a4[2] = 0;
            *a4 = 0;
            sub_234105EE4((uint64_t)v12, 2, a4);
            if (!*(_DWORD *)a4)
            {
              *a4 = 0;
              a4[1] = 0;
              a4[2] = 0;
              sub_23410499C((uint64_t)v12, &v8, (uint64_t)a4);
              if (!*(_DWORD *)a4)
              {
                *a4 = 0;
                a4[1] = 0;
                a4[2] = 0;
                sub_23410577C((uint64_t)v12, v10, (uint64_t)a4);
                if (!*(_DWORD *)a4)
                {
                  *a4 = 0;
                  a4[1] = 0;
                  a4[2] = 0;
                  sub_234105840((uint64_t)v12, (uint64_t)a4);
                  if (!*(_DWORD *)a4)
                  {
                    v7 = v9;
                    *(_QWORD *)a3 = v8;
                    *(_BYTE *)(a3 + 8) = v7;
                    *(_DWORD *)a4 = 0;
                    a4[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
                    *((_DWORD *)a4 + 4) = 183;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_234131EC4@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v6[33];
  _BYTE v7[25];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v7[sub_234114950(a2, 16, v7)] = 0;
  sub_2340F4B80("g/s/%s", (uint64_t)v6, v7);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 32))(v4, v6);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
    *((_DWORD *)a3 + 4) = 189;
  }
  return result;
}

char *sub_234131F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  char *result;
  unsigned __int16 v13;
  uint64_t v14;
  char *v15[2];
  int v16;
  char v17[44];
  unsigned int v18;
  _BYTE v19[33];
  uint64_t v20;
  int v21;
  _BYTE v22[74];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_234106C48((uint64_t)v17);
  sub_234106C70((uint64_t)v17, (uint64_t)v22, 0x4AuLL);
  v16 = 0;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  result = sub_234107E40(v17, 0x100uLL, 21, &v16, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    result = sub_2341073FC(v17, 3uLL, a3, 0x10uLL, (uint64_t)a6);
    if (!*(_DWORD *)a6)
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      sub_233BF7114(v15, a4, *(_QWORD *)(a4 + 32));
      result = sub_2341073FC(v17, 4uLL, v15[0], (unint64_t)v15[1], (uint64_t)a6);
      if (!*(_DWORD *)a6)
      {
        v20 = *a5;
        v21 = *((_DWORD *)a5 + 2);
        a6[1] = 0;
        a6[2] = 0;
        *a6 = 0;
        result = sub_2341073FC(v17, 5uLL, (char *)&v20, 0xCuLL, (uint64_t)a6);
        if (!*(_DWORD *)a6)
        {
          *a6 = 0;
          a6[1] = 0;
          a6[2] = 0;
          result = sub_234107FB0(v17, v16, (uint64_t)a6);
          if (!*(_DWORD *)a6)
          {
            v13 = v18;
            if (v18 >= 0x10000)
              sub_23425AD44((uint64_t)result);
            *a6 = 0;
            a6[1] = 0;
            a6[2] = 0;
            v14 = *(_QWORD *)(a1 + 8);
            sub_2340F4B80("f/%x/s/%08X%08X", (uint64_t)v19, *(unsigned __int8 *)(a2 + 8), HIDWORD(*(_QWORD *)a2), *(_QWORD *)a2);
            result = (char *)(*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)v14 + 24))(v14, v19, v22, v13);
            if (!*(_DWORD *)a6)
            {
              *(_DWORD *)a6 = 0;
              a6[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
              *((_DWORD *)a6 + 4) = 217;
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_234132180@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  double result;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 __src;
  __int128 v18;
  int v19;
  unsigned __int16 v20;
  _BYTE v21[78];
  _BYTE v22[74];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v20 = 74;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  v10 = *(_QWORD *)(a1 + 8);
  sub_2340F4B80("f/%x/s/%08X%08X", (uint64_t)v21, *(unsigned __int8 *)(a2 + 8), HIDWORD(*(_QWORD *)a2), *(_QWORD *)a2);
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, unsigned __int16 *))(*(_QWORD *)v10 + 16))(v10, v21, v22, &v20);
  if (!*(_DWORD *)a6)
  {
    sub_234104468((uint64_t)v21);
    sub_234104498((uint64_t)v21, (uint64_t)v22, v20);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    sub_234106010((uint64_t)v21, 21, 256, a6);
    if (!*(_DWORD *)a6)
    {
      v19 = 0;
      a6[1] = 0;
      a6[2] = 0;
      *a6 = 0;
      sub_23410570C((uint64_t)v21, &v19, (uint64_t)a6);
      if (!*(_DWORD *)a6)
      {
        v18 = 0uLL;
        a6[1] = 0;
        a6[2] = 0;
        *a6 = 0;
        sub_234105EE4((uint64_t)v21, 3, a6);
        if (!*(_DWORD *)a6)
        {
          *a6 = 0;
          a6[1] = 0;
          a6[2] = 0;
          result = sub_234104B68((uint64_t)v21, &v18, a6);
          if (!*(_DWORD *)a6)
          {
            if (*((_QWORD *)&v18 + 1) != 16)
            {
              *(_DWORD *)a6 = 16;
              a6[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
              v13 = 238;
              goto LABEL_12;
            }
            *a3 = *(_OWORD *)v18;
            __src = 0uLL;
            a6[1] = 0;
            a6[2] = 0;
            *a6 = 0;
            sub_234105EE4((uint64_t)v21, 4, a6);
            if (!*(_DWORD *)a6)
            {
              *a6 = 0;
              a6[1] = 0;
              a6[2] = 0;
              result = sub_234104B68((uint64_t)v21, &__src, a6);
              if (!*(_DWORD *)a6)
              {
                v12 = *((_QWORD *)&__src + 1);
                if (*((_QWORD *)&__src + 1) >= 0x21uLL)
                {
                  *(_DWORD *)a6 = 25;
                  a6[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
                  v13 = 244;
LABEL_12:
                  *((_DWORD *)a6 + 4) = v13;
                  return result;
                }
                memcpy(a4, (const void *)__src, *((size_t *)&__src + 1));
                a4[4] = v12;
                v16 = 0uLL;
                a6[1] = 0;
                a6[2] = 0;
                *a6 = 0;
                sub_234105EE4((uint64_t)v21, 5, a6);
                if (!*(_DWORD *)a6)
                {
                  *a6 = 0;
                  a6[1] = 0;
                  a6[2] = 0;
                  result = sub_234104B68((uint64_t)v21, &v16, a6);
                  if (!*(_DWORD *)a6)
                  {
                    if (*((_QWORD *)&v16 + 1) != 12)
                    {
                      v13 = 252;
                      v15 = 35;
                      goto LABEL_21;
                    }
                    v14 = *(_DWORD *)(v16 + 8);
                    *(_QWORD *)a5 = *(_QWORD *)v16;
                    *(_DWORD *)(a5 + 8) = v14;
                    a6[1] = 0;
                    a6[2] = 0;
                    *a6 = 0;
                    sub_23410577C((uint64_t)v21, v19, (uint64_t)a6);
                    if (!*(_DWORD *)a6)
                    {
                      *a6 = 0;
                      a6[1] = 0;
                      a6[2] = 0;
                      result = sub_234105840((uint64_t)v21, (uint64_t)a6);
                      if (!*(_DWORD *)a6)
                      {
                        v15 = 0;
                        v13 = 259;
LABEL_21:
                        *(_DWORD *)a6 = v15;
                        a6[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
                        goto LABEL_12;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_23413246C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v6[33];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  sub_2340F4B80("f/%x/s/%08X%08X", (uint64_t)v6, *(unsigned __int8 *)(a2 + 8), HIDWORD(*(_QWORD *)a2), *(_QWORD *)a2);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 32))(v4, v6);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.cpp";
    *((_DWORD *)a3 + 4) = 265;
  }
  return result;
}

void sub_234132524()
{
  JUMPOUT(0x23493E704);
}

int *sub_234132538@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2341AEA90(a2, 0, 0x40u, a1 + 8, a3);
}

void sub_23413254C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  BOOL v5;
  int v7;
  NSObject *v8;
  _QWORD *v9;
  uint8_t v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_WORD *)(a2 + 4))
    v5 = 0;
  else
    v5 = *(unsigned __int16 *)(a2 + 6) == 0;
  if (v5 && *(_BYTE *)a2 == 64)
  {
    sub_233CB4208(a1, &v14);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14) == 2)
    {
      sub_23410FAEC(&v12);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v11 = *a3;
      *a3 = 0;
      sub_2341AC944((uint64_t)&v12, &v11, (uint64_t)a4);
      if (v11)
        sub_23411814C(v11);
      v11 = 0;
      if (!*(_DWORD *)a4)
      {
        v7 = 60;
        if (!(_WORD)v12 && HIWORD(v12) == 3)
        {
          v8 = sub_234117B80(5u, "ExchangeManager");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v10 = 0;
            _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Received CloseSession status message, closing session", v10, 2u);
          }
          if (sub_234114844(2u))
            sub_2341147D0(5u, 2);
          v9 = (_QWORD *)sub_2341CD3C0(v14);
          sub_2341CB8F8(v9);
          v7 = 56;
        }
        *(_DWORD *)a4 = 0;
        a4[1] = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
        *((_DWORD *)a4 + 4) = v7;
      }
      if (v13)
        sub_23411814C(v13);
    }
    else
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
      *((_DWORD *)a4 + 4) = 46;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  }
  else
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
    *((_DWORD *)a4 + 4) = 38;
  }
}

uint64_t sub_2341326FC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
  *(_DWORD *)(a3 + 16) = 72;
  return result;
}

uint64_t sub_23413271C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result - 8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/UnsolicitedStatusHandler.cpp";
  *(_DWORD *)(a3 + 16) = 72;
  return result;
}

void sub_234132740()
{
  JUMPOUT(0x23493E704);
}

void sub_234132754()
{
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23413276C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v9[0] = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a4, a1, v9, 8);
  if (!*(_DWORD *)a4)
  {
    if (!a2
      || (*a4 = 0,
          a4[1] = 0,
          a4[2] = 0,
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, a3),
          !*(_DWORD *)a4))
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a4 + 4) = 261;
    }
  }
  return result;
}

double sub_234132844(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  double result;

  *(_QWORD *)a1 = off_250504E80;
  *(_BYTE *)(a1 + 113) = 0;
  *(_QWORD *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = a3;
  *(_QWORD *)(a1 + 120) = a2;
  *(_QWORD *)(a1 + 208) = a1 + 144;
  *(_QWORD *)(a1 + 216) = a1 + 144 + (a4 >> 1);
  *(_QWORD *)(a1 + 224) = a1 + 176;
  *(_QWORD *)(a1 + 232) = a1 + 176 + (a4 >> 1);
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

_QWORD *sub_234132898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;

  if (*(_BYTE *)(a1 + 113))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, &unk_2342D9C5D, 65, *(_QWORD *)(a1 + 8));
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, &unk_2342D9C9E, 65, *(_QWORD *)(a1 + 16));
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_23413276C(a1, a2, a3, a4);
        if (!*(_DWORD *)a4)
        {
          *(_BYTE *)(a1 + 113) = 1;
          *(_DWORD *)a4 = 0;
          a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
          *((_DWORD *)a4 + 4) = 304;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_2341329AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_23413276C(a1, (uint64_t)&unk_2342D9C5D, 65, a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    result = sub_23413276C(a1, (uint64_t)&unk_2342D9C9E, 65, a2);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a2 + 4) = 312;
    }
  }
  return result;
}

_QWORD *sub_234132A2C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  int v17;
  int v18;

  if (*((_BYTE *)result + 113) != 1)
  {
    v18 = 319;
    v17 = 172;
    goto LABEL_9;
  }
  v16 = (uint64_t)result;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  result = sub_23413276C((uint64_t)result, a4, a5, a9);
  if (!*(_DWORD *)a9)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    result = sub_23413276C(v16, a2, a3, a9);
    if (!*(_DWORD *)a9)
    {
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      result = sub_2341329AC(v16, a9);
      if (!*(_DWORD *)a9)
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 72))(v16, a6, a7, *(_QWORD *)(v16 + 72));
        if (!*(_DWORD *)a9)
        {
          *a9 = 0;
          a9[1] = 0;
          a9[2] = 0;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 104))(v16, a8, a10, *(_QWORD *)(v16 + 48));
          if (!*(_DWORD *)a9)
          {
            v17 = 0;
            *(_WORD *)(v16 + 112) = 512;
            v18 = 329;
LABEL_9:
            *(_DWORD *)a9 = v17;
            a9[1] = "src/crypto/CHIPCryptoPAL.cpp";
            *((_DWORD *)a9 + 4) = v18;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_234132B74@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  int v17;
  int v18;

  if (*((_BYTE *)result + 113) != 1)
  {
    v18 = 336;
    v17 = 172;
    goto LABEL_9;
  }
  v16 = (uint64_t)result;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  result = sub_23413276C((uint64_t)result, a2, a3, a9);
  if (!*(_DWORD *)a9)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    result = sub_23413276C(v16, a4, a5, a9);
    if (!*(_DWORD *)a9)
    {
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      result = sub_2341329AC(v16, a9);
      if (!*(_DWORD *)a9)
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 72))(v16, a6, a7, *(_QWORD *)(v16 + 72));
        if (!*(_DWORD *)a9)
        {
          *a9 = 0;
          a9[1] = 0;
          a9[2] = 0;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 72))(v16, a8, a10, *(_QWORD *)(v16 + 80));
          if (!*(_DWORD *)a9)
          {
            v17 = 0;
            *(_WORD *)(v16 + 112) = 513;
            v18 = 346;
LABEL_9:
            *(_DWORD *)a9 = v17;
            a9[1] = "src/crypto/CHIPCryptoPAL.cpp";
            *((_DWORD *)a9 + 4) = v18;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_234132CB4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _QWORD *a4@<X8>, __n128 a5@<Q0>, __n128 a6@<Q1>)
{
  _QWORD *v7;
  unsigned __int32 v9;
  const char *v10;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[3];

  v7 = result;
  a6.n128_u64[0] = 0xAC000000ACLL;
  if (*((_BYTE *)result + 113) != 2)
  {
    v9 = 355;
    goto LABEL_5;
  }
  if (*a3 < result[17])
  {
    v9 = 356;
    goto LABEL_5;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, __n128, __n128))(*result + 88))(result, result[11], a5, a6);
  if (!*(_DWORD *)a4)
  {
    if (*((_BYTE *)v7 + 112))
    {
      if (*((_BYTE *)v7 + 112) != 1)
      {
        a5.n128_u32[0] = 370;
        v10 = "src/crypto/CHIPCryptoPAL.cpp";
        a6.n128_u64[0] = 0xAC000000ACLL;
        goto LABEL_7;
      }
      v12 = v7 + 1;
      v13 = v7 + 4;
    }
    else
    {
      v12 = v7 + 2;
      v13 = v7 + 5;
    }
    a6.n128_u64[0] = 0xAC000000ACLL;
    if (*v12)
    {
      v14 = *v13;
      if (*v13)
      {
        result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, uint64_t, _QWORD, _QWORD))(*v7 + 128))(v15, v7, v14, v7[3], v7[11]);
        a6.n128_u64[0] = v15[0];
        if (LODWORD(v15[0])
          || (result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))(*v7 + 112))(v15, v7, v14, a2, *a3), a6.n128_u64[0] = v15[0], LODWORD(v15[0])))
        {
          v10 = (const char *)v15[1];
          a5.n128_u64[0] = v15[2];
          goto LABEL_7;
        }
        *((_BYTE *)v7 + 113) = 3;
        a5.n128_u32[0] = 377;
        a6.n128_u16[0] = 0;
        a6.n128_u8[2] = 0;
        a6.n128_u8[3] = 0;
        a6.n128_u8[4] = 0;
        a6.n128_u8[5] = 0;
        a6.n128_u8[6] = 0;
        a6.n128_u8[7] = 0;
LABEL_6:
        v10 = "src/crypto/CHIPCryptoPAL.cpp";
LABEL_7:
        *a3 = v7[17];
        *a4 = a6.n128_u64[0];
        a4[1] = v10;
        a4[2] = a5.n128_u64[0];
        return result;
      }
      v9 = 371;
    }
    else
    {
      v9 = 370;
    }
LABEL_5:
    a5.n128_u32[0] = v9;
    goto LABEL_6;
  }
  return result;
}

_QWORD *sub_234132E48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *result;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[2];
  _BYTE v23[65];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a6 = xmmword_250504F60;
  a6[2] = 385;
  result = sub_233CAF22C(v22, a4, *a5);
  if ((unint64_t)*a5 < a1[16])
  {
    v12 = 392;
    goto LABEL_30;
  }
  if (*((_BYTE *)a1 + 113) != 3)
  {
    v12 = 393;
    goto LABEL_30;
  }
  if (a1[17] != a3)
  {
    v12 = 394;
    goto LABEL_30;
  }
  if (*((_BYTE *)a1 + 112))
  {
    if (*((_BYTE *)a1 + 112) != 1)
    {
LABEL_29:
      v12 = 416;
      goto LABEL_30;
    }
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _BYTE *, uint64_t))(*a1 + 112))(a1, a1[4], v23, a3);
    if (*(_DWORD *)a6)
      goto LABEL_32;
    result = sub_23413276C((uint64_t)a1, (uint64_t)v23, a1[17], &v20);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6)
      goto LABEL_32;
    result = sub_23413276C((uint64_t)a1, a2, a3, &v20);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6)
      goto LABEL_32;
    v13 = a1 + 2;
    v14 = a1 + 5;
    v15 = a1 + 26;
  }
  else
  {
    result = sub_23413276C((uint64_t)a1, a2, a3, a6);
    if (*(_DWORD *)a6)
      goto LABEL_32;
    result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD, _BYTE *, _QWORD))(*a1 + 112))(&v20, a1, a1[5], v23, a1[17]);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6)
      goto LABEL_32;
    result = sub_23413276C((uint64_t)a1, (uint64_t)v23, a1[17], &v20);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6)
      goto LABEL_32;
    v13 = a1 + 1;
    v14 = a1 + 4;
    v15 = a1 + 27;
  }
  v16 = *v13;
  if (!*v13)
    goto LABEL_29;
  v17 = *v14;
  if (!*v14)
  {
    v12 = 417;
    goto LABEL_30;
  }
  v18 = *v15;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t))(*a1 + 104))(&v20, a1, a2, a3, v17);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6)
    goto LABEL_32;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*a1 + 152))(&v20, a1, v17);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6)
    goto LABEL_32;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD, _QWORD, _QWORD))(*a1 + 96))(&v20, a1, a1[13], a1[11], a1[9]);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6)
    goto LABEL_32;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*a1 + 136))(&v20, a1, v16);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6)
    goto LABEL_32;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*a1 + 128))(&v20, a1, a1[7], v17, a1[11], v16, a1[13]);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6)
    goto LABEL_32;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD))(*a1 + 144))(&v20, a1, a1[7]);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6)
    goto LABEL_32;
  if (*((_BYTE *)a1 + 112))
  {
    if (*((_BYTE *)a1 + 112) != 1)
      goto LABEL_36;
    result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD, _QWORD, _QWORD))(*a1 + 96))(&v20, a1, a1[13], a1[10], a1[9]);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (*(_DWORD *)a6)
      goto LABEL_32;
    result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*a1 + 128))(&v20, a1, a1[8], v17, a1[10], v16, a1[13]);
  }
  else
  {
    result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD, _QWORD, _QWORD))(*a1 + 120))(&v20, a1, a1[8], a1[6], a1[11]);
  }
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (*(_DWORD *)a6)
    goto LABEL_32;
LABEL_36:
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD))(*a1 + 144))(&v20, a1, a1[8]);
  *(_OWORD *)a6 = v20;
  a6[2] = v21;
  if (!*(_DWORD *)a6)
  {
    result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD, _BYTE *, _QWORD))(*a1 + 112))(&v20, a1, a1[7], v23, a1[17]);
    *(_OWORD *)a6 = v20;
    a6[2] = v21;
    if (!*(_DWORD *)a6)
    {
      result = sub_23413276C((uint64_t)a1, (uint64_t)v23, a1[17], &v20);
      *(_OWORD *)a6 = v20;
      a6[2] = v21;
      if (!*(_DWORD *)a6)
      {
        result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD, _BYTE *, _QWORD))(*a1 + 112))(&v20, a1, a1[8], v23, a1[17]);
        *(_OWORD *)a6 = v20;
        a6[2] = v21;
        if (!*(_DWORD *)a6)
        {
          result = sub_23413276C((uint64_t)a1, (uint64_t)v23, a1[17], &v20);
          *(_OWORD *)a6 = v20;
          a6[2] = v21;
          if (!*(_DWORD *)a6)
          {
            result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, _QWORD, _BYTE *, _QWORD))(*a1 + 80))(&v20, a1, a1[9], v23, a1[15]);
            *(_OWORD *)a6 = v20;
            a6[2] = v21;
            if (!*(_DWORD *)a6)
            {
              result = sub_23413276C((uint64_t)a1, (uint64_t)v23, a1[15], &v20);
              *(_OWORD *)a6 = v20;
              a6[2] = v21;
              if (!*(_DWORD *)a6)
              {
                result = (_QWORD *)sub_23413346C(a1, &v20);
                *(_OWORD *)a6 = v20;
                a6[2] = v21;
                if (!*(_DWORD *)a6)
                {
                  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD *))(*a1 + 200))(&v20, a1, v18, a1[16] >> 1, a2, a3, v22);
                  *(_OWORD *)a6 = v20;
                  a6[2] = v21;
                  if (!*(_DWORD *)a6)
                  {
                    if (v22[1] == a1[16])
                    {
                      v19 = 0;
                      *((_BYTE *)a1 + 113) = 4;
                      v12 = 452;
                      goto LABEL_31;
                    }
                    v12 = 449;
LABEL_30:
                    v19 = 172;
LABEL_31:
                    *(_DWORD *)a6 = v19;
                    a6[1] = "src/crypto/CHIPCryptoPAL.cpp";
                    *((_DWORD *)a6 + 4) = v12;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_32:
  *a5 = a1[16];
  return result;
}

uint64_t sub_23413346C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _QWORD v5[2];

  sub_233CAF22C(v5, (uint64_t)(a1 + 22), 32);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 192))(a1, v5);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, const char *, uint64_t, _QWORD *, _QWORD))(*a1 + 216))(a1, a1[28], a1[16] >> 1, 0, 0, "ConfirmationKeysGroupKey v1.0", 16, a1 + 18, a1[16]);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a2 + 4) = 467;
    }
  }
  return result;
}

uint64_t sub_234133530@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t v13[8];
  __int128 v14;
  uint64_t v15;
  _BYTE v16[65];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 113) != 4)
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v10 = 476;
LABEL_19:
    *(_DWORD *)(a4 + 16) = v10;
    return result;
  }
  v7 = result;
  if (*(_BYTE *)(result + 112))
  {
    if (*(_BYTE *)(result + 112) != 1)
    {
LABEL_17:
      *(_DWORD *)a4 = 172;
      *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      v10 = 488;
      goto LABEL_19;
    }
    v8 = (_QWORD *)(result + 32);
    v9 = (uint64_t *)(result + 216);
  }
  else
  {
    v8 = (_QWORD *)(result + 40);
    v9 = (uint64_t *)(result + 208);
  }
  if (!*v8)
    goto LABEL_17;
  v11 = *v9;
  if (!*v9)
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v10 = 489;
    goto LABEL_19;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  if (!*(_DWORD *)a4)
  {
    v14 = 0uLL;
    v15 = 0;
    result = (uint64_t)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v7 + 208))(&v14, v7, v11, *(_QWORD *)(v7 + 128) >> 1, a2, a3, v16, *(_QWORD *)(v7 + 136));
    if ((_DWORD)v14 == 172)
    {
      v12 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Failed to verify peer's MAC. This can happen when setup code is incorrect.", v13, 2u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        result = sub_2341147D0(0xBu, 1);
    }
    *(_OWORD *)a4 = v14;
    *(_QWORD *)(a4 + 16) = v15;
    if (!*(_DWORD *)a4)
    {
      *(_BYTE *)(v7 + 113) = 5;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      v10 = 501;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_23413373C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v6[2];

  if (*(_BYTE *)(result + 113) == 5)
  {
    sub_233BF7114(v6, *(_QWORD *)(result + 232), *(_QWORD *)(result + 128) >> 1);
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 32))(a2, v6, a3);
  }
  else
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    *(_DWORD *)(a4 + 16) = 506;
  }
  return result;
}

void sub_2341337CC(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_2341394DC((uint64_t)(a1 + 30), (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_23413B328(a1, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      a2[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a2 + 4) = 515;
    }
  }
}

uint64_t sub_234133838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;
  char *v7[2];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = a1 + 240;
  sub_233BF7114(v7, a2, a3);
  result = sub_234139528(v5, v7[0], (size_t)v7[1], (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
    *((_DWORD *)a4 + 4) = 521;
  }
  return result;
}

uint64_t sub_2341338A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_234139610(a1 + 240, a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/crypto/CHIPCryptoPAL.cpp";
    *((_DWORD *)a3 + 4) = 527;
  }
  return result;
}

void sub_2341338EC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t a9)
{
  a8[1] = 0;
  a8[2] = 0;
  *a8 = 0;
  sub_234139698(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9);
  if (!*(_DWORD *)a8)
  {
    *(_DWORD *)a8 = 0;
    a8[1] = "src/crypto/CHIPCryptoPAL.cpp";
    *((_DWORD *)a8 + 4) = 538;
  }
}

_QWORD *sub_234133958@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *result;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))(*a1 + 72))(a6, a1, a4, a5, a1[9]);
  if (!*(_DWORD *)a6)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD))(*a1 + 80))(a1, a1[9], a2, *a3);
    if (!*(_DWORD *)a6)
    {
      *(_DWORD *)a6 = 0;
      a6[1] = "src/crypto/CHIPCryptoPAL.cpp";
      *((_DWORD *)a6 + 4) = 546;
    }
  }
  return result;
}

uint64_t sub_234133A00@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;

  if (a2[1] < 0x61uLL)
  {
    v11 = 551;
    v10 = 47;
  }
  else
  {
    v4 = (_OWORD *)*a2;
    v5 = *(_OWORD *)(result + 16);
    *v4 = *(_OWORD *)result;
    v4[1] = v5;
    v6 = (_OWORD *)*a2;
    v6[2] = *(_OWORD *)(result + 32);
    v7 = *(_OWORD *)(result + 48);
    v8 = *(_OWORD *)(result + 64);
    v9 = *(_OWORD *)(result + 80);
    *((_BYTE *)v6 + 96) = *(_BYTE *)(result + 96);
    v6[4] = v8;
    v6[5] = v9;
    v6[3] = v7;
    result = sub_233BF7588((uint64_t)a2, 0x61uLL);
    v10 = 0;
    v11 = 558;
  }
  *(_DWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_234133A8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;

  if (*(_QWORD *)(a2 + 8) < 0x61uLL)
  {
    v9 = 563;
    v3 = 47;
  }
  else
  {
    v3 = 0;
    v4 = *(_OWORD *)(*(_QWORD *)a2 + 16);
    *(_OWORD *)result = *(_OWORD *)*(_QWORD *)a2;
    *(_OWORD *)(result + 16) = v4;
    v5 = *(_OWORD **)a2;
    *(_OWORD *)(result + 32) = *(_OWORD *)(*(_QWORD *)a2 + 32);
    v6 = v5[3];
    v7 = v5[4];
    v8 = v5[5];
    *(_BYTE *)(result + 96) = *((_BYTE *)v5 + 96);
    *(_OWORD *)(result + 64) = v7;
    *(_OWORD *)(result + 80) = v8;
    *(_OWORD *)(result + 48) = v6;
    v9 = 568;
  }
  *(_DWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

void *sub_234133AF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  void *result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD v12[2];
  uint64_t (**v13)();
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[6];
  _BYTE v28[120];
  uint64_t v29;
  _OWORD v30[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  memset(v30, 0, sizeof(v30));
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  result = (void *)sub_234133D20(a2, a3, a4, (char *)v30, 0x50u, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    *(_OWORD *)a5 = xmmword_250504F78;
    a5[2] = 576;
    v11 = 0;
    v21 = 0;
    v22 = vdupq_n_s64(0x20uLL);
    v23 = 65;
    v27[2] = &v24;
    v27[3] = &v25;
    v27[4] = &v26;
    v27[5] = v27;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0;
    v13 = &off_250505898;
    nullsub_13(v28, v8);
    bzero(&v29, 0x400uLL);
    memset(v12, 0, sizeof(v12));
    sub_234132898((uint64_t)&v13, (uint64_t)v12, 32, &v9);
    *(_OWORD *)a5 = v9;
    a5[2] = v10;
    if (!*(_DWORD *)a5)
    {
      v11 = 32;
      sub_234133958(&v13, a1, &v11, (uint64_t)v30, 40, &v9);
      *(_OWORD *)a5 = v9;
      a5[2] = v10;
      if (!*(_DWORD *)a5)
      {
        v11 = 65;
        sub_23413BD68((uint64_t *)&v13, (char *)(a1 + 32), &v11, (unsigned __int8 *)&v30[2] + 8, 0x28uLL, (uint64_t)&v9);
        *(_OWORD *)a5 = v9;
        a5[2] = v10;
        if (!*(_DWORD *)a5 && v11 != 65)
        {
          *(_DWORD *)a5 = 172;
          a5[1] = "src/crypto/CHIPCryptoPAL.cpp";
          *((_DWORD *)a5 + 4) = 592;
        }
      }
    }
    sub_23413B638((uint64_t)&v13);
    v13 = &off_250505898;
    sub_23413B638((uint64_t)&v13);
    return sub_2341394AC(v28);
  }
  return result;
}

uint64_t sub_234133D20@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, char *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v7;
  int v8;
  int v9;
  void *v10;

  v10 = &unk_250505A18;
  v9 = a3;
  v7 = a2[1];
  if (v7 - 33 <= 0xFFFFFFFFFFFFFFEELL)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v8 = 607;
LABEL_5:
    *(_DWORD *)(a6 + 16) = v8;
    return result;
  }
  if ((result - 100001) < 0xFFFE7D47)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v8 = 609;
    goto LABEL_5;
  }
  return sub_234139AE0((uint64_t)&v9, 4uLL, *a2, v7, result, a5, a4, a6);
}

uint64_t sub_234133DD0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  *a2 = 0;
  v11 = 0;
  result = sub_234114DD8(a1, &v11);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 40);
  if (!*(_DWORD *)a3)
  {
    if ((char)v11 < 0)
    {
      v8 = v11 & 0x7F;
      if ((v11 & 0x7Fu) - 1 >= 8)
      {
        *(_DWORD *)a3 = 47;
        *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        v7 = 633;
      }
      else if (*(_QWORD *)(a1 + 16) >= v8)
      {
        v9 = 0;
        do
        {
          v10 = 0;
          result = sub_234114DD8(a1, &v10);
          if (*(_DWORD *)(a1 + 24))
            break;
          if (!v9 && !v10)
          {
            *(_DWORD *)a3 = 47;
            *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
            v7 = 647;
            goto LABEL_8;
          }
          *a2 = v10 | (*a2 << 8);
          ++v9;
        }
        while (v9 < v8);
        if ((_DWORD)v8 == 1 && *a2 <= 0x7FuLL)
        {
          *(_DWORD *)a3 = 47;
          *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          v7 = 658;
        }
        else
        {
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          v7 = 661;
        }
      }
      else
      {
        *(_DWORD *)a3 = 25;
        *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        v7 = 634;
      }
    }
    else
    {
      *a2 = v11;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      v7 = 626;
    }
LABEL_8:
    *(_DWORD *)(a3 + 16) = v7;
  }
  return result;
}

_QWORD *sub_234133F54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_234133F5C(a1, a2, 0, a3);
}

_QWORD *sub_234133F5C@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  const char *v23;
  int v24;

  v5 = result[1];
  v6 = a2[1];
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v8 = 102;
  }
  else
  {
    v20[0] = *result;
    v20[1] = v20[0];
    v21 = v5;
    v22 = 0;
    v23 = "src/lib/support/BufferReader.h";
    v24 = 330;
    if (!v20[0])
      v21 = 0;
    v17 = *a2;
    v18 = v6;
    v19 = 0;
    if (!v17)
      v18 = 0;
    v16 = 0;
    while (v21)
    {
      result = (_QWORD *)sub_234114DD8((uint64_t)v20, &v16);
      v11 = v16;
      if (v22 | v16)
        goto LABEL_16;
    }
    v11 = 0;
LABEL_16:
    v12 = v21 + (v11 >> 7);
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) <= 0x7F)
    {
      if (a3)
      {
        sub_23411512C(&v17, 2);
        sub_23411512C(&v17, v13);
      }
      if ((v11 & 0x80) != 0)
        sub_23411512C(&v17, 0);
      do
      {
        sub_23411512C(&v17, v16);
        result = (_QWORD *)sub_234114DD8((uint64_t)v20, &v16);
      }
      while (!v22);
      if (v18 >= v19)
      {
        result = (_QWORD *)sub_2341291A4(a2, 0, v19);
        v14 = 0;
        *a2 = (uint64_t)result;
        a2[1] = v15;
        v8 = 165;
      }
      else
      {
        v8 = 160;
        v14 = 25;
      }
    }
    else
    {
      v8 = 129;
      v14 = 47;
    }
    *(_DWORD *)a4 = v14;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
  }
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

_QWORD *sub_2341340EC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_234133F5C(a1, a2, 1, a3);
}

uint64_t sub_2341340F4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!result)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v10 = 676;
    goto LABEL_7;
  }
  v6 = result;
  v7 = a2[1];
  if (v7 != 2 * result)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v10 = 677;
    goto LABEL_7;
  }
  v9 = a3[1];
  if (v9 < v7 + 9)
  {
    *(_DWORD *)a4 = 25;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v10 = 678;
LABEL_7:
    *(_DWORD *)(a4 + 16) = v10;
    return result;
  }
  v11 = *a3 + 3;
  v12 = v9 - 3;
  sub_233CAF22C(&v22, v11, v9 - 3);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v25 = sub_23413435C(a2, 0, v6);
  v26 = v13;
  result = (uint64_t)sub_234133F5C(&v25, &v22, 1, a4);
  if (!*(_DWORD *)a4)
  {
    v14 = v23;
    v15 = v12 >= v23;
    v16 = v12 - v23;
    if (!v15)
    {
      *(_DWORD *)a4 = 172;
      *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      v10 = 690;
      goto LABEL_7;
    }
    sub_233CAF22C(&v22, v11 + v23, v16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v25 = sub_23413435C(a2, v6, v6);
    v26 = v17;
    result = (uint64_t)sub_234133F5C(&v25, &v22, 1, a4);
    if (!*(_DWORD *)a4)
    {
      if (v23 <= v16)
      {
        v18 = v23 + v14;
        if (v23 + v14 >= 0x100)
        {
          *(_DWORD *)a4 = 47;
          *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          v10 = 706;
        }
        else
        {
          v19 = a3[1];
          v22 = *a3;
          v23 = v19;
          v24 = 0;
          if (!v22)
            v23 = 0;
          sub_23411512C(&v22, 48);
          if (v18 >= 0x80)
            sub_23411512C(&v22, 129);
          sub_23411512C(&v22, v18);
          result = (uint64_t)sub_2341150D8(&v22, (const void *)(*a3 + 3), v18);
          if (v23 >= v24)
          {
            result = sub_2341291A4(a3, 0, v24);
            v20 = 0;
            *a3 = result;
            a3[1] = v21;
            v10 = 737;
          }
          else
          {
            v10 = 734;
            v20 = 25;
          }
          *(_DWORD *)a4 = v20;
          *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        }
      }
      else
      {
        *(_DWORD *)a4 = 172;
        *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        v10 = 701;
      }
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_23413435C(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;

  v3 = a1[1];
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
    sub_23425AFB0((uint64_t)a1);
  if (v5 < a3)
    sub_23425B048((uint64_t)a1);
  sub_233BF7114(&v7, *a1 + a2, a3);
  return v7;
}

double sub_2341343A4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v5;
  int v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14[2];
  char *v15[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  unint64_t v19;
  __n128 v20;
  unint64_t v21;

  if (!a1)
  {
    a4->n128_u32[0] = 47;
    a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
    v8 = 742;
    goto LABEL_7;
  }
  v5 = a2[1];
  if (v5 <= 3)
  {
    a4->n128_u32[0] = 25;
    a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
    v8 = 743;
    goto LABEL_7;
  }
  if (a3[1] < (unint64_t)(2 * a1))
  {
    a4->n128_u32[0] = 25;
    a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
    v8 = 746;
LABEL_7:
    a4[1].n128_u32[0] = v8;
    return result;
  }
  v18[0] = *a2;
  v18[1] = v18[0];
  v19 = v5;
  v20.n128_u32[0] = 0;
  v20.n128_u64[1] = (unint64_t)"src/lib/support/BufferReader.h";
  LODWORD(v21) = 330;
  if (!v18[0])
    v19 = 0;
  v17 = 0;
  sub_234114DD8((uint64_t)v18, &v17);
  result = v20.n128_f64[0];
  *a4 = v20;
  a4[1].n128_u64[0] = v21;
  if (!a4->n128_u32[0])
  {
    if (v17 != 48)
    {
      a4->n128_u32[0] = 47;
      a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
      v8 = 753;
      goto LABEL_7;
    }
    v16 = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    sub_234133DD0((uint64_t)v18, &v16, (uint64_t)a4);
    if (!a4->n128_u32[0])
    {
      if (v16 != v19)
      {
        v8 = 760;
        v12 = 47;
        goto LABEL_20;
      }
      v10 = *a3;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      sub_233CAF22C(v15, v10, a1);
      *(_QWORD *)&result = sub_2341345A0((uint64_t)v18, v15[0], (size_t)v15[1], a4).n128_u64[0];
      if (!a4->n128_u32[0])
      {
        a4->n128_u64[0] = 0;
        a4->n128_u64[1] = 0;
        a4[1].n128_u64[0] = 0;
        sub_233CAF22C(v14, v10 + a1, a1);
        *(_QWORD *)&result = sub_2341345A0((uint64_t)v18, v14[0], (size_t)v14[1], a4).n128_u64[0];
        if (!a4->n128_u32[0])
        {
          v11 = sub_2341291A4(a3, 0, 2 * a1);
          v12 = 0;
          *a3 = v11;
          a3[1] = v13;
          v8 = 775;
LABEL_20:
          a4->n128_u32[0] = v12;
          a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

__n128 sub_2341345A0@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;
  size_t v9;
  int v10;
  uint64_t v11;
  size_t __n;
  char v13;

  v13 = 0;
  sub_234114DD8(a1, &v13);
  result = *(__n128 *)(a1 + 24);
  *a4 = result;
  a4[1].n128_u64[0] = *(_QWORD *)(a1 + 40);
  if (!a4->n128_u32[0])
  {
    if (v13 != 2)
    {
      a4->n128_u32[0] = 47;
      a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
      v10 = 67;
      goto LABEL_7;
    }
    __n = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    sub_234133DD0(a1, &__n, (uint64_t)a4);
    if (a4->n128_u32[0])
      return result;
    bzero(a2, a3);
    v9 = __n;
    if (__n > a3 + 1)
    {
      a4->n128_u32[0] = 47;
      a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
      v10 = 78;
LABEL_7:
      a4[1].n128_u32[0] = v10;
      return result;
    }
    if (__n != a3 + 1)
    {
LABEL_14:
      v11 = sub_234114FE4(a1, &a2[a3 - v9], v9);
      result = *(__n128 *)(v11 + 24);
      *a4 = result;
      a4[1].n128_u64[0] = *(_QWORD *)(v11 + 40);
      return result;
    }
    sub_234114DD8(a1, &v13);
    result = *(__n128 *)(a1 + 24);
    *a4 = result;
    a4[1].n128_u64[0] = *(_QWORD *)(a1 + 40);
    if (!a4->n128_u32[0])
    {
      if (v13)
      {
        a4->n128_u32[0] = 47;
        a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.cpp";
        v10 = 86;
        goto LABEL_7;
      }
      --v9;
      goto LABEL_14;
    }
  }
  return result;
}

void sub_234134704(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  char v7[16];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_234138F5C(a1, a2, a3, a4, a5, a6, a7, v7, 16);
}

void sub_234134770(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8[3];
  __int128 v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 8) != 4)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v7 = 791;
LABEL_7:
    *(_DWORD *)(a4 + 16) = v7;
    return;
  }
  if ((unint64_t)a3[1] <= 7)
  {
    *(_DWORD *)a4 = 25;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v7 = 792;
    goto LABEL_7;
  }
  v10[0] = bswap64(a2);
  v9 = *(_OWORD *)"CompressedFabricN4chip36PersistentStorageOperationalKeystoreE";
  v8[2] = (uint64_t)&unk_2505059A0;
  sub_233BF7114(v8, a1 + 9, 64);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234139698(v8[0], v8[1], (uint64_t)v10, 8, (uint64_t)&v9, 16, *a3, a4, 8);
  if (!*(_DWORD *)a4)
  {
    *a3 = sub_2341291A4(a3, 0, 8uLL);
    a3[1] = v6;
  }
}

void sub_2341348A0(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6[2];
  unint64_t v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v6[0] = (uint64_t)v7;
  v6[1] = 8;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_234134770(a1, a2, v6, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a3 = bswap64(v7[0]);
    *(_DWORD *)a4 = 0;
    a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
    *((_DWORD *)a4 + 4) = 836;
  }
}

void sub_234134940(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  if (a1[1] == 16)
  {
    if ((unint64_t)a3[1] > 0xF)
    {
      sub_234139698(*a1, 16, *a2, a2[1], (uint64_t)"GroupKey v1.0", 13, *a3, a4, 16);
      return;
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v4 = 859;
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v4 = 858;
  }
  *(_DWORD *)(a4 + 16) = v4;
}

void sub_2341349E8(uint64_t *a1@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  unsigned __int16 v6;
  void *v7;

  if (a1[1] == 16)
  {
    v7 = &unk_2505059A0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234139698(*a1, 16, (uint64_t)"", 0, (uint64_t)"GroupKeyHashPrivacyKeyMvid:", 12, (uint64_t)&v6, (uint64_t)a3, 2);
    if (*(_DWORD *)a3)
      return;
    *a2 = bswap32(v6) >> 16;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/crypto/CHIPCryptoPAL.cpp";
    v5 = 884;
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/crypto/CHIPCryptoPAL.cpp";
    v5 = 876;
  }
  *((_DWORD *)a3 + 4) = v5;
}

void sub_234134AB8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  if (a1[1] == 16)
  {
    if ((unint64_t)a2[1] > 0xF)
    {
      sub_234139698(*a1, 16, 0, 0, (uint64_t)"PrivacyKeyMvid:", 10, *a2, a3, 16);
      return;
    }
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v3 = 903;
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v3 = 902;
  }
  *(_DWORD *)(a3 + 16) = v3;
}

void sub_234134B64(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8[2];
  uint64_t v9[2];

  v6 = a3 + 10;
  v9[0] = a3 + 10;
  v9[1] = 16;
  v8[0] = a3 + 26;
  v8[1] = 16;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_234134940(a1, a2, v9, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_233BF7114(v7, v6, 16);
    sub_2341349E8(v7, (_WORD *)(a3 + 8), a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_233BF7114(v7, v6, 16);
      sub_234134AB8(v7, v8, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *(_DWORD *)a4 = 0;
        a4[1] = "src/crypto/CHIPCryptoPAL.cpp";
        *((_DWORD *)a4 + 4) = 922;
      }
    }
  }
}

uint64_t sub_234134C3C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v7;
  int v9;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int128 v15;

  if ((_DWORD)result)
  {
    v6 = a2[1];
    if (v6)
    {
      v7 = result;
      if ((result & 0xFFFFFFFE) == 2)
      {
        LOWORD(v15) = 0;
        if (v6 != 4)
        {
          v9 = 934;
          goto LABEL_25;
        }
        result = sub_2341155A8(*a2, 4uLL, &v15);
        if (result != 2)
        {
          v9 = 937;
          goto LABEL_25;
        }
        if (v7 == 2)
        {
          if (*(_BYTE *)a3)
          {
            v9 = 942;
LABEL_25:
            *(_DWORD *)a5 = 89;
            *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
            goto LABEL_26;
          }
          v12 = v15;
          *(_BYTE *)a3 = 1;
          *(_WORD *)(a3 + 2) = v12;
        }
        else
        {
          if (*(_BYTE *)(a3 + 4))
          {
            v9 = 948;
            goto LABEL_25;
          }
          *(_BYTE *)(a3 + 4) = 1;
          *(_WORD *)(a3 + 6) = v15;
        }
      }
      else if (!(*a4 | a4[4]))
      {
        v15 = *(_OWORD *)a2;
        if (*((_QWORD *)&v15 + 1) >= 0x41uLL)
          sub_234134E24((uint64_t)&v15, 0x40uLL);
        v14 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)a5 = 0;
        result = sub_234134E48("Mvid:", (uint64_t *)&v15, &v14, a5);
        if (*(_DWORD *)a5 != 216)
        {
          if (*(_DWORD *)a5)
            return result;
          v11 = v14;
          *a4 = 1;
          *((_WORD *)a4 + 1) = v11;
        }
        v13 = 0;
        result = sub_234134E48("Mpid:", (uint64_t *)&v15, &v13, a5);
        if (*(_DWORD *)a5 != 216)
        {
          if (*(_DWORD *)a5)
            return result;
          a4[4] = 1;
          *((_WORD *)a4 + 3) = v13;
        }
      }
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      v9 = 988;
    }
    else
    {
      *(_DWORD *)a5 = 47;
      *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      v9 = 929;
    }
  }
  else
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v9 = 928;
  }
LABEL_26:
  *(_DWORD *)(a5 + 16) = v9;
  return result;
}

uint64_t sub_234134E24(uint64_t result, unint64_t a2)
{
  if (*(_QWORD *)(result + 8) < a2)
    sub_23425AF18(result);
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_234134E48@<X0>(char *__s@<X1>, uint64_t *a2@<X0>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v8;
  uint64_t result;
  unint64_t v10;
  char v11;
  unint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t v19;
  const void *v20;
  size_t v21;

  v8 = strlen(__s);
  result = (uint64_t)sub_233CAF22C(&v20, (uint64_t)__s, v8);
  v10 = a2[1];
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = v20;
    v14 = v21;
    v19 = -(uint64_t)v21;
    while (2)
    {
      v15 = *a2;
      v16 = v10 - v12;
      while (1)
      {
        if (v16 < v14)
        {
LABEL_12:
          if ((v11 & 1) == 0)
            goto LABEL_14;
          goto LABEL_13;
        }
        result = memcmp((const void *)(v15 + v12), v13, v14);
        if (!(_DWORD)result)
          break;
        ++v12;
        --v16;
        if (v12 >= v10)
          goto LABEL_12;
      }
      if (v19 + v10 - v12 < 4)
      {
LABEL_13:
        v17 = 89;
        goto LABEL_15;
      }
      LODWORD(v20) = *(_DWORD *)(v15 + v14 + v12);
      result = sub_2341155A8((uint64_t)&v20, 4uLL, a3);
      if (!result)
      {
        v10 = a2[1];
        ++v12;
        v11 = 1;
        if (v12 < v10)
          continue;
        goto LABEL_13;
      }
      break;
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v18 = 228;
  }
  else
  {
LABEL_14:
    v17 = 216;
LABEL_15:
    *(_DWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v18 = 234;
  }
  *(_DWORD *)(a4 + 16) = v18;
  return result;
}

uint64_t sub_234134F90@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _QWORD v17[14];
  _OWORD v18[3];
  __int128 v19;
  int v20;
  _BYTE v21[32];
  _QWORD v22[6];

  v22[5] = *MEMORY[0x24BDAC8D0];
  if (!result)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v8 = 1066;
LABEL_8:
    *(_DWORD *)(a3 + 16) = v8;
    return result;
  }
  v5 = a2[1];
  if (v5 <= 0xFE)
  {
    *(_DWORD *)a3 = 25;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v8 = 1067;
    goto LABEL_8;
  }
  v6 = result;
  v22[4] = 0;
  sub_23413824C((uint64_t)v17, *a2, v5);
  memset(v18, 0, 24);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  sub_2341353D8(v17, v7, (uint64_t)v18);
  *(_OWORD *)a3 = v18[0];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&v18[1];
  if (!*(_DWORD *)a3)
  {
    if ((unsigned __int16)sub_234138270(v17) <= (unint64_t)a2[1])
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v16, v6, *a2);
      v9 = *(_QWORD *)&v16[16];
      *(_QWORD *)&v18[1] = *(_QWORD *)&v16[16];
      v18[0] = *(_OWORD *)v16;
      *(_OWORD *)a3 = *(_OWORD *)v16;
      *(_QWORD *)(a3 + 16) = v9;
      if (!*(_DWORD *)a3)
      {
        sub_23413824C((uint64_t)v17, *a2, a2[1]);
        sub_234138CD8((uint64_t)v17, 0, 0x10u, (uint64_t)v18);
        v19 = *(_OWORD *)((char *)v18 + 4);
        v10 = v18[0];
        v20 = DWORD1(v18[1]);
        if (!LODWORD(v18[0]))
        {
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
          sub_2341353D8(v17, v11, (uint64_t)v18);
          sub_234138CD8((uint64_t)v17, 0, 0x10u, (uint64_t)v18);
          v19 = *(_OWORD *)((char *)v18 + 4);
          v10 = v18[0];
          v20 = DWORD1(v18[1]);
          if (!LODWORD(v18[0]))
          {
            sub_2341370A0(v17, 513, (uint64_t)v18);
            v19 = *(_OWORD *)((char *)v18 + 4);
            v10 = v18[0];
            v20 = DWORD1(v18[1]);
            if (!LODWORD(v18[0]))
            {
              sub_234138CE4(v18, v17);
              v19 = *(_OWORD *)((char *)v18 + 4);
              v10 = v18[0];
              v20 = DWORD1(v18[1]);
              if (!LODWORD(v18[0]))
              {
                sub_234138E44(v17, 0, 3u, 1, v18);
                v19 = *(_OWORD *)((char *)v18 + 4);
                v10 = v18[0];
                v20 = DWORD1(v18[1]);
                if (!LODWORD(v18[0]))
                {
                  sub_234138CD8((uint64_t)v17, 0, 0x10u, (uint64_t)v16);
                  v10 = *(_DWORD *)v16;
                  v19 = *(_OWORD *)&v16[4];
                  v20 = *(_DWORD *)&v16[20];
                  if (!*(_DWORD *)v16)
                  {
                    *(_QWORD *)v16 = v18;
                    *(_QWORD *)&v16[8] = 33;
                    *(_QWORD *)(a3 + 8) = 0;
                    *(_QWORD *)(a3 + 16) = 0;
                    *(_QWORD *)a3 = 0;
                    sub_2341359FC(&v13, (uint64_t)v21);
                    v14 = v13;
                    v15 = 32;
                    sub_234133F5C(&v14, (uint64_t *)v16, 0, a3);
                    if (*(_DWORD *)a3)
                      return sub_23413A7A4(v21, 64);
                    *(_QWORD *)a3 = 0;
                    *(_QWORD *)(a3 + 8) = 0;
                    *(_QWORD *)(a3 + 16) = 0;
                    sub_234138364(v17, 0, 2u, 0, *(const void **)v16, *(unsigned __int16 *)&v16[8], (_QWORD *)a3);
                    if (*(_DWORD *)a3)
                      return sub_23413A7A4(v21, 64);
                    *(_QWORD *)v16 = v18;
                    *(_QWORD *)&v16[8] = 33;
                    *(_QWORD *)(a3 + 8) = 0;
                    *(_QWORD *)(a3 + 16) = 0;
                    *(_QWORD *)a3 = 0;
                    sub_2341359FC(&v13, (uint64_t)v22);
                    v14 = v13;
                    v15 = 32;
                    sub_234133F5C(&v14, (uint64_t *)v16, 0, a3);
                    if (*(_DWORD *)a3)
                      return sub_23413A7A4(v21, 64);
                    *(_QWORD *)a3 = 0;
                    *(_QWORD *)(a3 + 8) = 0;
                    *(_QWORD *)(a3 + 16) = 0;
                    sub_234138364(v17, 0, 2u, 0, *(const void **)v16, *(unsigned __int16 *)&v16[8], (_QWORD *)a3);
                    if (*(_DWORD *)a3)
                      return sub_23413A7A4(v21, 64);
                    sub_234138CE4(v16, v17);
                    v10 = *(_DWORD *)v16;
                    v19 = *(_OWORD *)&v16[4];
                    v20 = *(_DWORD *)&v16[20];
                    if (!*(_DWORD *)v16)
                    {
                      sub_234138CE4(v18, v17);
                      v19 = *(_OWORD *)((char *)v18 + 4);
                      v10 = v18[0];
                      v20 = DWORD1(v18[1]);
                      if (!LODWORD(v18[0]))
                      {
                        sub_234138CE4(v18, v17);
                        v19 = *(_OWORD *)((char *)v18 + 4);
                        v10 = v18[0];
                        v20 = DWORD1(v18[1]);
                        if (!LODWORD(v18[0]))
                        {
                          v12 = sub_234138270(v17);
                          sub_233BF7588((uint64_t)a2, v12);
                          v10 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        *(_DWORD *)a3 = v10;
        *(_OWORD *)(a3 + 4) = v19;
        *(_DWORD *)(a3 + 20) = v20;
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      *(_DWORD *)(a3 + 16) = 1089;
    }
  }
  return sub_23413A7A4(v21, 64);
}

_QWORD *sub_2341353D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  int v7;
  int v8;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)sub_234138CD8((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = sub_23413828C(a1, 0, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = (_QWORD *)sub_234138CD8((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = (_QWORD *)sub_234138CD8((uint64_t)a1, 0, 0x11u, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = (_QWORD *)sub_234138CD8((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = sub_2341370A0(a1, 776, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = sub_234138610(a1, 0xCu, "CSA", 3u, &v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = sub_234138CE4(&v8, a1);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = sub_234138CE4(&v8, a1);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = sub_234138CE4(&v8, a1);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = (_QWORD *)sub_234138CD8((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = (_QWORD *)sub_234138CD8((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = sub_2341370A0(a1, 257, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_16;
  result = sub_2341370A0(a1, 1025, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8 || (result = sub_234138CE4(&v8, a1), v7 = v8, v11 = v9, v12 = v10, v8))
  {
LABEL_16:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a3 + 4) = v11;
    *(_DWORD *)(a3 + 20) = v12;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = sub_23413891C(a1, 0, (const void *)(a2 + 8), 0x41u, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    result = sub_234138CE4(&v8, a1);
    v7 = v8;
    v11 = v9;
    v12 = v10;
    if (!v8)
    {
      result = (_QWORD *)sub_234138CD8((uint64_t)a1, 128, 0, (uint64_t)&v8);
      v7 = v8;
      v11 = v9;
      v12 = v10;
      if (!v8)
      {
        result = (_QWORD *)sub_234138CD8((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
        v7 = v8;
        v11 = v9;
        v12 = v10;
        if (!v8)
        {
          result = sub_2341370A0(a1, 1286, (uint64_t)&v8);
          v7 = v8;
          v11 = v9;
          v12 = v10;
          if (!v8)
          {
            result = (_QWORD *)sub_234138CD8((uint64_t)a1, 0, 0x11u, (uint64_t)&v8);
            v7 = v8;
            v11 = v9;
            v12 = v10;
            if (!v8)
            {
              result = (_QWORD *)sub_234138CD8((uint64_t)a1, 0, 0x10u, (uint64_t)&v8);
              v7 = v8;
              v11 = v9;
              v12 = v10;
              if (!v8)
              {
                result = sub_234138CE4(&v8, a1);
                v7 = v8;
                v11 = v9;
                v12 = v10;
                if (!v8)
                {
                  result = sub_234138CE4(&v8, a1);
                  v7 = v8;
                  v11 = v9;
                  v12 = v10;
                  if (!v8)
                  {
                    result = sub_234138CE4(&v8, a1);
                    v7 = v8;
                    v11 = v9;
                    v12 = v10;
                    if (!v8)
                    {
                      result = sub_234138CE4(&v8, a1);
                      v7 = v8;
                      v11 = v9;
                      v12 = v10;
                      if (!v8)
                      {
                        result = sub_234138CE4(&v8, a1);
                        v7 = v8;
                        v11 = v9;
                        v12 = v10;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_23413588C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  _DWORD v7[6];
  unint64_t v8;
  char v9;
  _QWORD v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if ((unint64_t)(a2 - 16) >> 4 >= 0xFFF)
  {
    *(_DWORD *)a3 = 80;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
    v5 = 1177;
LABEL_9:
    *(_DWORD *)(a3 + 16) = v5;
    return result;
  }
  v10[0] = result;
  v10[1] = result;
  v11 = a2;
  LODWORD(v12) = 0;
  *((_QWORD *)&v12 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v13) = 330;
  if (!result)
    v11 = 0;
  v9 = 0;
  result = sub_234114DD8((uint64_t)v10, &v9);
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  if (!*(_DWORD *)a3)
  {
    if (v9 == 48)
    {
      v8 = 0;
      result = sub_234133DD0((uint64_t)v10, &v8, (uint64_t)v7);
      if (v7[0])
      {
        *(_DWORD *)a3 = 80;
        *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
        v5 = 1187;
      }
      else
      {
        v6 = 3;
        if (v8 >= 0x100)
          v6 = 4;
        if (v8 < 0x80)
          v6 = 2;
        if (v6 + v8 == a2)
        {
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          v5 = 1193;
        }
        else
        {
          *(_DWORD *)a3 = 80;
          *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
          v5 = 1191;
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 80;
      *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPAL.cpp";
      v5 = 1184;
    }
    goto LABEL_9;
  }
  return result;
}

_QWORD *sub_2341359FC(_QWORD *result, uint64_t a2)
{
  *result = a2;
  if (!a2)
    sub_23425B164((uint64_t)result);
  return result;
}

uint64_t sub_234135A18(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _BOOL8 v4;
  _QWORD v6[3];
  __int16 v7;
  _BYTE v8[33];
  _BYTE v9[112];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (a2 - 1 > 0xFD || v2 == 0)
    return 0;
  if (*(_BYTE *)(a1 + 32) && *(unsigned __int8 *)(a1 + 16) == a2 && *(_QWORD *)(a1 + 24))
    return 1;
  v10 = 0;
  v7 = 109;
  memset(v6, 0, sizeof(v6));
  sub_2340F4B80("f/%x/o", (uint64_t)v8, a2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, _BYTE *, __int16 *))(*(_QWORD *)v2 + 16))(v6, v2, v8, v9, &v7);
  v4 = LODWORD(v6[0]) == 0;
  sub_23413A7A4(v9, 109);
  return v4;
}

void sub_234135B0C(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v5;
  BOOL v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 8))
  {
    v5 = a2;
    if ((a2 - 1) >= 0xFE)
    {
      *(_DWORD *)a4 = 113;
      *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
      v12 = 201;
    }
    else
    {
      if (*(_BYTE *)(a1 + 16))
        v7 = *(unsigned __int8 *)(a1 + 16) == a2;
      else
        v7 = 1;
      if (v7)
      {
        if ((unint64_t)a3[1] <= 0xFE)
        {
          *(_DWORD *)a4 = 25;
          *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          v12 = 207;
        }
        else
        {
          sub_233C0BBA8(a1);
          v9 = sub_234114774(0x260uLL);
          if (v9)
          {
            v10 = v9;
            bzero(v9 + 2, 0x250uLL);
            *v10 = &off_2505057E0;
            v10[1] = &off_250505A50;
            *(_QWORD *)(a1 + 24) = v10;
            (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v10 + 48))(&v14, v10, 1);
            v11 = *a3;
            v13 = a3[1];
            v14 = 0uLL;
            v15 = 0;
            (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, unint64_t *))(**(_QWORD **)(a1 + 24)
                                                                                                + 16))(&v14, *(_QWORD *)(a1 + 24), v11, &v13);
            if ((_DWORD)v14)
            {
              sub_233C0BBA8(a1);
              *(_OWORD *)a4 = v14;
              *(_QWORD *)(a4 + 16) = v15;
              return;
            }
            sub_233BF7588((uint64_t)a3, v13);
            *(_BYTE *)(a1 + 16) = v5;
            *(_DWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
            v12 = 227;
          }
          else
          {
            *(_QWORD *)(a1 + 24) = 0;
            *(_DWORD *)a4 = 11;
            *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
            v12 = 213;
          }
        }
      }
      else
      {
        *(_DWORD *)a4 = 113;
        *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
        v12 = 205;
      }
    }
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v12 = 200;
  }
  *(_DWORD *)(a4 + 16) = v12;
}

_QWORD *sub_234135CD8@<X0>(_QWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v7;
  int v8;
  int v9;

  if (!result[1])
  {
    v9 = 233;
    v8 = 3;
    goto LABEL_11;
  }
  v5 = result;
  result = (_QWORD *)result[3];
  if (!result)
  {
    v9 = 234;
    goto LABEL_10;
  }
  if ((a2 - 1) > 0xFD || *((unsigned __int8 *)v5 + 16) != a2)
  {
    v9 = 235;
LABEL_10:
    v8 = 113;
    goto LABEL_11;
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*result + 40))(result);
  result = (_QWORD *)sub_233D50ED4(v7, a3);
  if ((_DWORD)result)
  {
    v8 = 0;
    *((_BYTE *)v5 + 32) = 1;
    v9 = 242;
  }
  else
  {
    v9 = 238;
    v8 = 197;
  }
LABEL_11:
  *(_DWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

void sub_234135D94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
    {
      if ((a2 - 1) <= 0xFDu && *(unsigned __int8 *)(a1 + 16) == (_DWORD)a2)
      {
        if (*(_BYTE *)(a1 + 32))
        {
          v8 = 0uLL;
          v9 = 0;
          sub_234135EB0(a2, v4, v6, (uint64_t)&v8);
          *(_OWORD *)a3 = v8;
          *(_QWORD *)(a3 + 16) = v9;
          if (*(_DWORD *)a3)
            return;
          sub_233C0BBA8(a1);
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          v7 = 258;
        }
        else
        {
          *(_DWORD *)a3 = 3;
          *(_QWORD *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          v7 = 250;
        }
      }
      else
      {
        *(_DWORD *)a3 = 113;
        *(_QWORD *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
        v7 = 249;
      }
    }
    else
    {
      *(_DWORD *)a3 = 113;
      *(_QWORD *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
      v7 = 248;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v7 = 247;
  }
  *(_DWORD *)(a3 + 16) = v7;
}

uint64_t sub_234135EB0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v9;
  int v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  char v14[44];
  unsigned int v15;
  char v16[104];
  unint64_t v17;
  _BYTE v18[112];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((result - 1) > 0xFD || a2 == 0 || a3 == 0)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    *(_DWORD *)(a4 + 16) = 58;
    return result;
  }
  v9 = result;
  v19 = 0;
  sub_234106C48((uint64_t)v14);
  sub_234106C70((uint64_t)v14, (uint64_t)v18, 0x6DuLL);
  v13 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_234107E40(v14, 0x100uLL, 21, &v13, a4);
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_234107224(v14, 0, 1u, a4);
    if (!*(_DWORD *)a4)
    {
      v17 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a3 + 56))(a3, v16);
      if (!*(_DWORD *)a4)
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_2341073FC(v14, 1uLL, v16, v17, a4);
        v10 = *(_DWORD *)a4;
        sub_23413A7A4(v16, 97);
        if (v10)
          return sub_23413A7A4(v18, 109);
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_234107FB0(v14, v13, a4);
        if (*(_DWORD *)a4)
          return sub_23413A7A4(v18, 109);
        v11 = v15;
        if (v15 >= 0x10000)
        {
          *(_DWORD *)a4 = 25;
          *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          v12 = 82;
        }
        else
        {
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          sub_2340F4B80("f/%x/o", (uint64_t)v16, v9);
          (*(void (**)(uint64_t, char *, _BYTE *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v16, v18, v11);
          if (*(_DWORD *)a4)
            return sub_23413A7A4(v18, 109);
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
          v12 = 86;
        }
        *(_DWORD *)(a4 + 16) = v12;
        return sub_23413A7A4(v18, 109);
      }
      sub_23413A7A4(v16, 97);
    }
  }
  return sub_23413A7A4(v18, 109);
}

uint64_t sub_2341360E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(result + 8);
  if (v4)
    return sub_234136118(a2, v4, a3, a4);
  *(_DWORD *)a4 = 3;
  *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
  *(_DWORD *)(a4 + 16) = 264;
  return result;
}

uint64_t sub_234136118@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  unint64_t v8;
  __int128 v9;
  __int16 v10;
  int v11;
  unsigned __int16 v12;
  _BYTE v13[72];
  _BYTE v14[112];
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((result - 1) >= 0xFE)
  {
    *(_DWORD *)a4 = 113;
    *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    *(_DWORD *)(a4 + 16) = 93;
    return result;
  }
  v15 = 0;
  v12 = 109;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_2340F4B80("f/%x/o", (uint64_t)v13, result);
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2, v13, v14, &v12);
  if (!*(_DWORD *)a4)
  {
    if (v12 <= 0x6DuLL)
      v15 = v12;
    sub_234104468((uint64_t)v13);
    sub_234104498((uint64_t)v13, (uint64_t)v14, v15);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_234106010((uint64_t)v13, 21, 256, (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      v11 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = 0;
      sub_23410570C((uint64_t)v13, &v11, a4);
      if (!*(_DWORD *)a4)
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_234105EE4((uint64_t)v13, 0, (_QWORD *)a4);
        if (!*(_DWORD *)a4)
        {
          v10 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)a4 = 0;
          sub_2341049E0((uint64_t)v13, &v10, a4);
          if (!*(_DWORD *)a4)
          {
            if (v10 == 1)
            {
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              sub_234105EE4((uint64_t)v13, 1, (_QWORD *)a4);
              if (*(_DWORD *)a4)
                return sub_23413A7A4(v14, 109);
              v9 = 0uLL;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              *(_QWORD *)a4 = 0;
              sub_234106600((uint64_t)v13, &v9, (_QWORD *)a4);
              if (*(_DWORD *)a4)
                return sub_23413A7A4(v14, 109);
              if (*((_QWORD *)&v9 + 1) < 0x62uLL)
              {
                *(_QWORD *)a4 = 0;
                *(_QWORD *)(a4 + 8) = 0;
                *(_QWORD *)(a4 + 16) = 0;
                sub_23410577C((uint64_t)v13, v11, a4);
                if (*(_DWORD *)a4)
                  return sub_23413A7A4(v14, 109);
                v8 = *((_QWORD *)&v9 + 1);
                memcpy(a3, (const void *)v9, *((size_t *)&v9 + 1));
                if (v8 <= 0x61)
                  a3[13] = v8;
                *(_DWORD *)a4 = 0;
                *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
                v7 = 132;
              }
              else
              {
                *(_DWORD *)a4 = 25;
                *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
                v7 = 124;
              }
            }
            else
            {
              *(_DWORD *)a4 = 167;
              *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
              v7 = 116;
            }
            *(_DWORD *)(a4 + 16) = v7;
          }
        }
      }
    }
  }
  return sub_23413A7A4(v14, 109);
}

uint64_t sub_2341363A0@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  _BYTE v8[33];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v7 = 270;
    goto LABEL_10;
  }
  if (a2 - 1 >= 0xFE)
  {
    *(_DWORD *)a3 = 113;
    *(_QWORD *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v7 = 271;
    goto LABEL_10;
  }
  v6 = result;
  if (*(_QWORD *)(result + 24))
  {
    if (*(unsigned __int8 *)(result + 16) == a2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 80))(result);
      v4 = *(_QWORD *)(v6 + 8);
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2340F4B80("f/%x/o", (uint64_t)v8, a2);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 32))(v4, v8);
  if (*(_DWORD *)a3 == 160)
  {
    *(_DWORD *)a3 = 113;
    *(_QWORD *)(a3 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v7 = 282;
LABEL_10:
    *(_DWORD *)(a3 + 16) = v7;
  }
  return result;
}

void sub_2341364D4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    sub_233C0BBA8(a1);
}

void sub_2341364E4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD v15[15];

  v15[14] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v11 = 299;
LABEL_17:
    *(_DWORD *)(a5 + 16) = v11;
    return;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a5 = 113;
    *(_QWORD *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v11 = 300;
    goto LABEL_17;
  }
  if (*(_BYTE *)(a1 + 32) && *(unsigned __int8 *)(a1 + 16) == (_DWORD)a2)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v10 + 24))(v10, *a3, a3[1], a4);
      return;
    }
    *(_DWORD *)a5 = 172;
    *(_QWORD *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v11 = 304;
    goto LABEL_17;
  }
  v12 = sub_234114774(0x260uLL);
  if (!v12)
  {
    *(_DWORD *)a5 = 11;
    *(_QWORD *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v11 = 151;
    goto LABEL_17;
  }
  v13 = v12;
  bzero(v12 + 2, 0x250uLL);
  *v13 = &off_2505057E0;
  v13[1] = &off_250505A50;
  v15[13] = 0;
  memset(v14, 0, sizeof(v14));
  sub_234136118(a2, v6, v15, (uint64_t)v14);
  if (LODWORD(v14[0]) == 160)
  {
    *(_DWORD *)a5 = 113;
    *(_QWORD *)(a5 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    *(_DWORD *)(a5 + 16) = 159;
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 64))(v13, v15);
    if (!*(_DWORD *)a5)
      (*(void (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*v13 + 24))(v13, *a3, a3[1], a4);
  }
  sub_23413A7A4(v15, 97);
  (*(void (**)(_QWORD *))*v13)(v13);
  j__free(v13);
}

_QWORD *sub_234136728()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_234114774(0x260uLL);
  v1 = v0;
  if (v0)
  {
    bzero(v0 + 2, 0x250uLL);
    *v1 = &off_2505057E0;
    v1[1] = &off_250505A50;
  }
  return v1;
}

void sub_23413677C(uint64_t a1, void (***a2)(_QWORD))
{
  if (a2)
  {
    (**a2)(a2);
    j__free(a2);
  }
}

_QWORD *sub_2341367B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _BYTE v13[104];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!result[1])
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v9 = 330;
LABEL_10:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a4 = 113;
    *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
    v9 = 331;
    goto LABEL_10;
  }
  v7 = result;
  v14 = 0;
  if (((*(uint64_t (**)(_QWORD *, uint64_t))(*result + 24))(result, a2) & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, a2))
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, a2);
      if (*(_DWORD *)a4)
        return (_QWORD *)sub_23413A7A4(v13, 97);
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a3 + 56))(a3, a2, v13);
    if (*(_DWORD *)a4)
      return (_QWORD *)sub_23413A7A4(v13, 97);
    v10 = sub_234114774(0x260uLL);
    if (!v10)
    {
      *(_DWORD *)a4 = 11;
      *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
      v8 = 343;
      goto LABEL_7;
    }
    v11 = v10;
    bzero(v10 + 2, 0x250uLL);
    *v11 = &off_2505057E0;
    v11[1] = &off_250505A50;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    (*(void (**)(_QWORD *, _BYTE *))(*v11 + 64))(v11, v13);
    if (*(_DWORD *)a4
      || (*(_QWORD *)a4 = 0,
          *(_QWORD *)(a4 + 8) = 0,
          *(_QWORD *)(a4 + 16) = 0,
          sub_234135EB0(a2, v7[1], (uint64_t)v11, a4),
          *(_DWORD *)a4))
    {
      (*(void (**)(_QWORD *))*v11)(v11);
      j__free(v11);
      return (_QWORD *)sub_23413A7A4(v13, 97);
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, a2);
    v12 = *(_DWORD *)a4;
    (*(void (**)(_QWORD *))*v11)(v11);
    j__free(v11);
    if (v12)
      return (_QWORD *)sub_23413A7A4(v13, 97);
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = "src/crypto/PersistentStorageOperationalKeystore.cpp";
  v8 = 356;
LABEL_7:
  *(_DWORD *)(a4 + 16) = v8;
  return (_QWORD *)sub_23413A7A4(v13, 97);
}

_QWORD *sub_234136A1C(_QWORD *a1)
{
  *a1 = &off_250504FB0;
  if (a1[1])
  {
    sub_233C0BBA8((uint64_t)a1);
    a1[1] = 0;
  }
  return a1;
}

void sub_234136A5C(_QWORD *a1)
{
  *a1 = &off_250504FB0;
  if (a1[1])
  {
    sub_233C0BBA8((uint64_t)a1);
    a1[1] = 0;
  }
  JUMPOUT(0x23493E704);
}

BOOL sub_234136AAC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) != 0;
}

uint64_t sub_234136ABC()
{
  char *v0;
  _DWORD v2[6];
  uint64_t v3;

  v3 = 0;
  v0 = sub_234139DB0((char *)&v3, 8uLL, (uint64_t)v2);
  if (v2[0])
    sub_23425B1FC((uint64_t)v0);
  return v3;
}

uint64_t sub_234136AF8()
{
  char *v0;
  _DWORD v2[7];
  unsigned int v3;

  v3 = 0;
  v0 = sub_234139DB0((char *)&v3, 4uLL, (uint64_t)v2);
  if (v2[0])
    sub_23425B298((uint64_t)v0);
  return v3;
}

uint64_t sub_234136B34()
{
  char *v0;
  _DWORD v2[7];
  unsigned __int16 v3;

  v3 = 0;
  v0 = sub_234139DB0((char *)&v3, 2uLL, (uint64_t)v2);
  if (v2[0])
    sub_23425B334((uint64_t)v0);
  return v3;
}

uint64_t sub_234136B70()
{
  char *v0;
  _DWORD v2[7];
  unsigned __int8 v3;

  v3 = 0;
  v0 = sub_234139DB0((char *)&v3, 1uLL, (uint64_t)v2);
  if (v2[0])
    sub_23425B3D0((uint64_t)v0);
  return v3;
}

__n128 sub_234136BAC@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X2>, uint64_t a3@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/crypto/RawKeySessionKeystore.cpp";
  *(_DWORD *)(a3 + 16) = 42;
  return result;
}

__n128 sub_234136BD0@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X2>, uint64_t a3@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/crypto/RawKeySessionKeystore.cpp";
  *(_DWORD *)(a3 + 16) = 48;
  return result;
}

void *sub_234136BF4@<X0>(void *__dst@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  void *result;
  int v8;
  int v9;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5 > 0x20)
  {
    v9 = 55;
    v8 = 25;
  }
  else
  {
    result = memcpy(__dst, *(const void **)a2, v5);
    v8 = 0;
    *((_BYTE *)__dst + 32) = *(_QWORD *)(a2 + 8);
    v9 = 59;
  }
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/crypto/RawKeySessionKeystore.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

void sub_234136C68(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  sub_234139698(a1, *(_QWORD *)(a1 + 32), *a2, a2[1], *a3, a3[1], a4, a5, 16);
}

__n128 sub_234136CB8@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X4>, void *a5@<X5>, void *a6@<X6>, __n128 *a7@<X8>)
{
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  int v16;
  const char *v17;
  int v18;
  void *v19;
  _BYTE v20[48];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = &unk_2505059A0;
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a7[1].n128_u64[0] = 0;
  sub_234139698(*a1, a1[1], *a2, a2[1], *a3, a3[1], (uint64_t)v20, (uint64_t)a7, 48);
  if (!a7->n128_u32[0])
  {
    v15[0] = v20;
    v15[1] = v20;
    v15[2] = 48;
    v16 = 0;
    v17 = "src/lib/support/BufferReader.h";
    v18 = 330;
    v12 = sub_234114FE4((uint64_t)v15, a4, 0x10uLL);
    v13 = sub_234114FE4(v12, a5, 0x10uLL);
    v14 = sub_234114FE4(v13, a6, 0x10uLL);
    result = *(__n128 *)(v14 + 24);
    *a7 = result;
    a7[1].n128_u64[0] = *(_QWORD *)(v14 + 40);
  }
  return result;
}

uint64_t sub_234136DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v14;

  sub_233BF7114(&v14, a2, *(unsigned __int8 *)(a2 + 32));
  return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, &v14, a3, a4, a5, a6, a7);
}

uint64_t sub_234136E68(uint64_t a1, uint64_t a2)
{
  return sub_23413A7A4(a2, 16);
}

uint64_t sub_234136E74(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23413A7A4(a2, 32);
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

uint64_t sub_234136EA0(void *__s1, size_t __n)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;

  result = 0;
  if (__s1)
  {
    v4 = __n;
    if ((_DWORD)__n)
    {
      v5 = 0;
      while ((unsigned __int16)word_2505050D8[v5 + 8] != v4
           || memcmp(__s1, *(const void **)&word_2505050D8[v5 + 4], v4))
      {
        v5 += 12;
        if (v5 == 456)
          return 0xFFFFLL;
      }
      return (unsigned __int16)word_2505050D8[v5];
    }
  }
  return result;
}

BOOL sub_234136F28(int a1, _QWORD *a2, _WORD *a3)
{
  uint64_t v3;
  int v4;
  __int16 *v5;

  v3 = 0;
  while (1)
  {
    v4 = (unsigned __int16)word_2505050D8[v3];
    if (v4 == a1)
      break;
    v3 += 12;
    if (v3 == 456)
      return v4 == a1;
  }
  v5 = &word_2505050D8[v3];
  *a2 = *((_QWORD *)v5 + 1);
  *a3 = v5[8];
  return v4 == a1;
}

uint64_t sub_234136F70(int a1)
{
  unsigned int v1;

  v1 = a1 & 0xF00;
  if (!a1)
    v1 = 0;
  if (a1 == 0xFFFF)
    return 3840;
  else
    return v1;
}

const char *sub_234136F90(int a1)
{
  const char *result;
  uint64_t v3;

  if (!a1)
    return "NotSpecified";
  if (a1 == 0xFFFF)
    return "Unknown";
  v3 = 0;
  result = "Unknown";
  while ((unsigned __int16)word_250505468[v3] != a1)
  {
    v3 += 8;
    if (v3 == 304)
      return result;
  }
  return *(const char **)&word_250505468[v3 + 4];
}

void *sub_234136FF8@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  void *result;
  uint64_t v6;
  int v7;
  int v8;

  result = *(void **)(a1 + 8);
  if (!result)
  {
    v7 = 110;
    v8 = 771;
    goto LABEL_11;
  }
  v6 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v6)
  {
    v7 = 111;
    goto LABEL_10;
  }
  if (*(_QWORD *)(a1 + 40) + (unint64_t)*(unsigned int *)(a1 + 56) + v6 <= *(_QWORD *)(a1 + 48))
  {
    if (!WORD1(v6))
    {
      result = (void *)sub_234136EA0(result, (unsigned __int16)v6);
      v8 = 0;
      *a2 = (_WORD)result;
      v7 = 115;
      goto LABEL_11;
    }
    v7 = 113;
LABEL_10:
    v8 = 773;
    goto LABEL_11;
  }
  v7 = 112;
  v8 = 769;
LABEL_11:
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1OID.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

_QWORD *sub_2341370A0@<X0>(_QWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = 0;
  while ((unsigned __int16)word_2505050D8[v3] != a2)
  {
    v3 += 12;
    if (v3 == 456)
    {
      *(_DWORD *)a3 = 778;
      *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1OID.cpp";
      *(_DWORD *)(a3 + 16) = 123;
      return result;
    }
  }
  return sub_2341385F8(result, *(const void **)&word_2505050D8[v3 + 4], (unsigned __int16)word_2505050D8[v3 + 8], (_QWORD *)a3);
}

uint64_t sub_2341370F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)result = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 15) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a2 + a3;
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 48) = a2 + a3;
  *(_DWORD *)(result + 384) = 0;
  return result;
}

uint64_t sub_234137118(uint64_t result)
{
  *(_WORD *)result = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 15) = 0;
  return result;
}

uint64_t sub_23413712C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 22))
  {
    *(_DWORD *)a2 = 768;
    *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    v2 = 53;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v2;
    return result;
  }
  if (*(_BYTE *)(result + 21))
  {
    *(_DWORD *)a2 = 774;
    *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    v2 = 54;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(result + 48);
  v4 = *(_QWORD *)(result + 40) + *(unsigned int *)(result + 56) + *(unsigned int *)(result + 16);
  *(_QWORD *)(result + 40) = v4;
  *(_WORD *)result = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 15) = 0;
  if (v4 == v3)
  {
    *(_DWORD *)a2 = 768;
    *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    v2 = 62;
    goto LABEL_5;
  }
  return sub_2341371C8(result, a2);
}

uint64_t sub_2341371C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(result + 32);
  v2 = *(_BYTE **)(result + 40);
  if ((unint64_t)v2 >= v3)
  {
    v7 = 247;
LABEL_9:
    LODWORD(v8) = 769;
    goto LABEL_10;
  }
  v4 = *v2 & 0xC0;
  *(_BYTE *)result = v4;
  v5 = (*v2 >> 5) & 1;
  *(_BYTE *)(result + 20) = (*v2 & 0x20) != 0;
  v6 = *v2 & 0x1F;
  *(_BYTE *)(result + 1) = v6;
  if (v6 == 31)
  {
    v7 = 254;
    LODWORD(v8) = 774;
    goto LABEL_10;
  }
  v9 = v2 + 1;
  if ((unint64_t)(v2 + 1) >= v3)
  {
    v7 = 257;
    goto LABEL_9;
  }
  v10 = *v9;
  if (((char)*v9 & 0x80000000) == 0)
  {
    *(_DWORD *)(result + 16) = v10;
    *(_BYTE *)(result + 21) = 0;
    v11 = v2 + 2;
    goto LABEL_21;
  }
  *(_DWORD *)(result + 16) = 0;
  v11 = v2 + 2;
  if (v10 == 128)
  {
    v10 = 0;
    *(_BYTE *)(result + 21) = 1;
    goto LABEL_21;
  }
  v12 = *v9 & 0x7F;
  if (!v12)
  {
    v10 = 0;
LABEL_20:
    *(_BYTE *)(result + 21) = 0;
LABEL_21:
    v14 = v3 - (_QWORD)v11;
    if (HIDWORD(v14))
    {
      v7 = 285;
    }
    else if (v10 <= v14)
    {
      v15 = v11 - v2;
      v8 = HIDWORD(v15);
      if (!HIDWORD(v15))
      {
        *(_DWORD *)(result + 56) = v15;
        *(_BYTE *)(result + 22) = (v6 | v4 | v5 | v10) == 0;
        *(_QWORD *)(result + 8) = v11;
        v7 = 294;
        goto LABEL_10;
      }
      v7 = 287;
    }
    else
    {
      v7 = 286;
    }
    LODWORD(v8) = 777;
    goto LABEL_10;
  }
  v10 = 0;
  while (1)
  {
    if ((unint64_t)v11 >= v3)
    {
      v7 = 278;
      goto LABEL_9;
    }
    if (HIBYTE(v10))
      break;
    v13 = *v11++;
    v10 = v13 | (v10 << 8);
    *(_DWORD *)(result + 16) = v10;
    if (!(_BYTE)--v12)
      goto LABEL_20;
  }
  v7 = 279;
  LODWORD(v8) = 776;
LABEL_10:
  *(_DWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a2 + 16) = v7;
  return result;
}

uint64_t sub_234137338@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(result + 20))
    return sub_234137368(result, 0, a2);
  *(_DWORD *)a2 = 771;
  *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a2 + 16) = 69;
  return result;
}

uint64_t sub_234137368@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v3 = *(unsigned int *)(result + 384);
  if ((_DWORD)v3 != 10)
  {
    v6 = *(_QWORD *)(result + 8);
    v7 = *(_QWORD *)(result + 48);
    *(_QWORD *)(result + 64 + 32 * v3) = *(_QWORD *)(result + 40);
    v8 = *(unsigned int *)(result + 384);
    v9 = result + 64 + 32 * v8;
    v10 = *(unsigned int *)(result + 16);
    *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + 56);
    *(_DWORD *)(v9 + 12) = v10;
    v11 = *(unsigned __int8 *)(result + 21);
    *(_BYTE *)(v9 + 16) = v11;
    *(_QWORD *)(v9 + 24) = v7;
    *(_DWORD *)(result + 384) = v8 + 1;
    *(_QWORD *)(result + 40) = v6 + a2;
    if (v11)
    {
LABEL_4:
      v5 = 0;
      *(_WORD *)result = 0;
      *(_DWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 8) = 0;
      v4 = 125;
      *(_QWORD *)(result + 15) = 0;
      goto LABEL_10;
    }
    v12 = *(_QWORD *)(result + 32) - v6;
    if (HIDWORD(v12))
    {
      v4 = 118;
    }
    else
    {
      if (v10 <= v12)
      {
        *(_QWORD *)(result + 48) = v6 + v10;
        goto LABEL_4;
      }
      v4 = 119;
    }
    v5 = 777;
    goto LABEL_10;
  }
  v4 = 106;
  v5 = 772;
LABEL_10:
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_234137438@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(result + 384);
  if (v2)
  {
    v3 = (v2 - 1);
    *(_DWORD *)(result + 384) = v3;
    v4 = result + 32 * v3;
    v5 = *(unsigned __int8 *)(v4 + 80);
    if (*(_BYTE *)(v4 + 80))
    {
      v6 = 134;
      v5 = 774;
    }
    else
    {
      v7 = *(_QWORD *)(v4 + 64) + *(unsigned int *)(v4 + 72) + *(unsigned int *)(v4 + 76);
      v8 = *(_QWORD *)(v4 + 88);
      *(_QWORD *)(result + 40) = v7;
      *(_QWORD *)(result + 48) = v8;
      *(_WORD *)result = 0;
      *(_DWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 15) = 0;
      v6 = 142;
    }
  }
  else
  {
    v6 = 130;
    v5 = 771;
  }
  *(_DWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_2341374B0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;

  if (*(_BYTE *)(result + 20))
  {
    v4 = 0;
    *a2 = *(_QWORD *)(result + 40);
    *a3 = *(_DWORD *)(result + 16) + *(_DWORD *)(result + 56);
    v5 = 86;
  }
  else
  {
    v5 = 81;
    v4 = 771;
  }
  *(_DWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

_BYTE *sub_2341374FC@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (*result || (v2 = result[1], (v2 - 3) >= 2))
  {
    *(_DWORD *)a2 = 771;
    *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    v3 = 92;
    goto LABEL_6;
  }
  if (result[20])
  {
    *(_DWORD *)a2 = 774;
    *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    v3 = 94;
LABEL_6:
    *(_DWORD *)(a2 + 16) = v3;
    return result;
  }
  return (_BYTE *)sub_234137368((uint64_t)result, v2 == 3, a2);
}

BOOL sub_234137564(uint64_t a1)
{
  return *(_DWORD *)(a1 + 384) != 0;
}

_QWORD *sub_234137574@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  size_t v5;
  int v6;
  int v7;
  unint64_t v9;
  size_t v10;
  unint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v11[0] = 0;
  v4 = (char *)result[1];
  if (v4)
  {
    v5 = *((unsigned int *)result + 4);
    if ((_DWORD)v5)
    {
      if (v5 <= 8)
      {
        if (result[5] + *((unsigned int *)result + 14) + v5 <= result[6])
        {
          v9 = 8 - v5;
          if (*v4 < 0 && (_DWORD)v5 != 8)
          {
            if (v9 <= 1)
              v10 = 1;
            else
              v10 = 8 - v5;
            memset(v11, 255, v10);
          }
          result = memcpy((char *)v11 + v9, v4, v5);
          v7 = 0;
          *a2 = bswap64(v11[0]);
          v6 = 171;
        }
        else
        {
          v6 = 158;
          v7 = 769;
        }
      }
      else
      {
        v6 = 157;
        v7 = 777;
      }
    }
    else
    {
      v6 = 156;
      v7 = 773;
    }
  }
  else
  {
    v6 = 155;
    v7 = 771;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_2341376A4@<X0>(uint64_t result@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;

  v3 = *(unsigned __int8 **)(result + 8);
  if (!v3)
  {
    v4 = 176;
    v5 = 771;
    goto LABEL_14;
  }
  if (*(_DWORD *)(result + 16) != 1)
  {
    v4 = 177;
LABEL_7:
    v5 = 773;
    goto LABEL_14;
  }
  if (*(_QWORD *)(result + 40) + (unint64_t)*(unsigned int *)(result + 56) + 1 <= *(_QWORD *)(result + 48))
  {
    v6 = *v3;
    if (v6 == 255 || v6 == 0)
    {
      v5 = 0;
      *a2 = v6 != 0;
      v4 = 183;
      goto LABEL_14;
    }
    v4 = 179;
    goto LABEL_7;
  }
  v4 = 178;
  v5 = 769;
LABEL_14:
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_234137738@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v8[2];

  v5 = *(_QWORD *)(result + 8);
  if (v5)
  {
    v6 = *(unsigned int *)(result + 16);
    if ((_DWORD)v6)
    {
      if (*(_QWORD *)(result + 40) + (unint64_t)*(unsigned int *)(result + 56) + v6 <= *(_QWORD *)(result + 48))
      {
        if ((_DWORD)v6 == 13 && *(_BYTE *)(v5 + 12) == 90)
        {
          sub_233CAF22C(v8, v5, v6);
          return sub_234137D5C(a2, (uint64_t)v8, a3);
        }
        *(_DWORD *)a3 = 774;
        *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
        v7 = 192;
      }
      else
      {
        *(_DWORD *)a3 = 769;
        *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
        v7 = 191;
      }
    }
    else
    {
      *(_DWORD *)a3 = 773;
      *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
      v7 = 190;
    }
  }
  else
  {
    *(_DWORD *)a3 = 771;
    *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    v7 = 189;
  }
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_234137828@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v8[2];

  v5 = *(_QWORD *)(result + 8);
  if (v5)
  {
    v6 = *(unsigned int *)(result + 16);
    if ((_DWORD)v6)
    {
      if (*(_QWORD *)(result + 40) + (unint64_t)*(unsigned int *)(result + 56) + v6 <= *(_QWORD *)(result + 48))
      {
        if ((_DWORD)v6 == 15 && *(_BYTE *)(v5 + 14) == 90)
        {
          sub_233CAF22C(v8, v5, v6);
          return sub_234137D5C(a2, (uint64_t)v8, a3);
        }
        *(_DWORD *)a3 = 774;
        *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
        v7 = 203;
      }
      else
      {
        *(_DWORD *)a3 = 769;
        *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
        v7 = 202;
      }
    }
    else
    {
      *(_DWORD *)a3 = 773;
      *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
      v7 = 201;
    }
  }
  else
  {
    *(_DWORD *)a3 = 771;
    *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
    v7 = 200;
  }
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_234137918@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;

  v3 = *(_QWORD *)(result + 8);
  if (!v3)
  {
    v5 = 222;
    v6 = 771;
    goto LABEL_17;
  }
  v4 = *(unsigned int *)(result + 16);
  if (!(_DWORD)v4)
  {
    v5 = 223;
    v6 = 773;
    goto LABEL_17;
  }
  if (v4 > 5)
  {
    v5 = 224;
    v6 = 774;
    goto LABEL_17;
  }
  if (*(_QWORD *)(result + 40) + (unint64_t)*(unsigned int *)(result + 56) + v4 > *(_QWORD *)(result + 48))
  {
    v5 = 225;
    v6 = 769;
    goto LABEL_17;
  }
  if ((_DWORD)v4 == 1)
  {
    v6 = 0;
    *a2 = 0;
LABEL_16:
    v5 = 241;
    goto LABEL_17;
  }
  v7 = __rbit32(*(unsigned __int8 *)(v3 + 1)) >> 24;
  *a2 = v7;
  if (*(_DWORD *)(result + 16) < 3u)
  {
    v6 = 0;
    goto LABEL_16;
  }
  v8 = 8;
  v9 = 2;
  do
  {
    v6 = 0;
    v7 |= __rbit32(*(unsigned __int8 *)(*(_QWORD *)(result + 8) + v9)) >> 24 << v8;
    *a2 = v7;
    ++v9;
    v8 += 8;
    v5 = 241;
  }
  while (v9 < *(unsigned int *)(result + 16));
LABEL_17:
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Reader.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_234137A0C@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  const char *v8;
  uint64_t result;
  int i;
  int v11;
  __int128 v12;
  uint64_t v13;

  v7 = 0;
  *(_OWORD *)a4 = xmmword_2505056C8;
  *(_QWORD *)(a4 + 16) = 311;
  if (a3)
    v8 = a3;
  else
    v8 = "  ";
  do
  {
    while (1)
    {
      result = sub_23413712C(a1, a4);
      if (!*(_DWORD *)a4)
        break;
      if (*(_DWORD *)a4 != 768)
      {
        v12 = *(_OWORD *)a4;
        v13 = *(_QWORD *)(a4 + 16);
        sub_2341083CC((const char **)&v12, 1);
        return printf("ASN1Reader::Next() failed: %s\n");
      }
      if (!*(_DWORD *)(a1 + 384))
        return result;
      sub_234137438(a1, a4);
      if (*(_DWORD *)a4)
      {
        v12 = *(_OWORD *)a4;
        v13 = *(_QWORD *)(a4 + 16);
        sub_2341083CC((const char **)&v12, 1);
        return printf("ASN1Reader::ExitConstructedType() failed: %s\n");
      }
      v11 = -1;
LABEL_29:
      v7 += v11;
    }
    if (a2)
      printf("%s", a2);
    for (i = v7; i; --i)
      printf("%s", v8);
    if (*(_BYTE *)(a1 + 22))
    {
      printf("END-OF-CONTENTS ");
    }
    else
    {
      switch(((*(_BYTE *)a1 >> 6) | (4 * *(_BYTE *)a1)) ^ 2)
      {
        case 0:
          printf("[%lu] ");
          break;
        case 1:
          printf("[PRIVATE %lu] ");
          break;
        case 2:
          switch(*(_BYTE *)(a1 + 1))
          {
            case 1:
              printf("BOOLEAN ");
              break;
            case 2:
              printf("INTEGER ");
              break;
            case 3:
              printf("BIT STRING ");
              break;
            case 4:
              printf("OCTET STRING ");
              break;
            case 5:
              printf("NULL ");
              break;
            case 6:
              printf("OBJECT IDENTIFIER ");
              break;
            case 7:
              printf("OBJECT DESCRIPTOR ");
              break;
            case 8:
              printf("EXTERNAL ");
              break;
            case 9:
              printf("REAL ");
              break;
            case 0xA:
              printf("ENUMERATED ");
              break;
            case 0xC:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x19:
            case 0x1A:
            case 0x1B:
            case 0x1C:
              printf("STRING ");
              break;
            case 0x10:
              printf("SEQUENCE ");
              break;
            case 0x11:
              printf("SET ");
              break;
            case 0x17:
            case 0x18:
              printf("TIME ");
              break;
            default:
              printf("[UNIVERSAL %lu] ");
              break;
          }
          break;
        case 3:
          printf("[APPLICATION %lu] ");
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(a1 + 20))
      printf("(constructed) ");
    if (*(_BYTE *)(a1 + 21))
      puts("Length = indefinite");
    else
      printf("Length = %ld\n", *(unsigned int *)(a1 + 16));
  }
  while (!*(_BYTE *)(a1 + 20));
  sub_234137368(a1, 0, a4);
  if (!*(_DWORD *)a4)
  {
    v11 = 1;
    goto LABEL_29;
  }
  v12 = *(_OWORD *)a4;
  v13 = *(_QWORD *)(a4 + 16);
  sub_2341083CC((const char **)&v12, 1);
  return printf("ASN1Reader::EnterConstructedType() failed: %s\n");
}

uint64_t sub_234137D5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  char v7;
  __int16 v8;
  int v9;
  __int16 v10;
  char v11;
  char v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;

  v3 = *(_BYTE **)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if ((v4 | 2) == 0xF)
    {
      if (v3[v4 - 1] == 90)
      {
        v5 = 0;
        do
        {
          if ((char)v3[v5] < 0 || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v3[v5] + 60) & 0x400) == 0)
          {
            *(_DWORD *)a3 = 773;
            *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
            v9 = 80;
            goto LABEL_14;
          }
          ++v5;
        }
        while (v4 - 1 != v5);
        v6 = v3[1] + 10 * *v3 - 16;
        if (v4 == 15)
        {
          v7 = v3[2];
          v3 += 2;
          v8 = 100 * v6 + (v3[1] + 10 * v7 - 16);
        }
        else
        {
          if ((v3[1] + 10 * *v3 - 16) <= 0x31u)
            v10 = 2000;
          else
            v10 = 1900;
          v8 = v10 + v6;
        }
        *(_WORD *)result = v8;
        v11 = v3[3] + 10 * v3[2];
        *(_BYTE *)(result + 2) = v11 - 16;
        v12 = v3[5] + 10 * v3[4] - 16;
        *(_BYTE *)(result + 3) = v12;
        v13 = v3[7] + 10 * v3[6] - 16;
        *(_BYTE *)(result + 4) = v13;
        v14 = v3[9] + 10 * v3[8] - 16;
        *(_BYTE *)(result + 5) = v14;
        v15 = v3[11] + 10 * v3[10] - 16;
        *(_BYTE *)(result + 6) = v15;
        if ((v11 - 17) >= 0xCu)
        {
          *(_DWORD *)a3 = 773;
          *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          v9 = 99;
        }
        else if ((v12 - 1) >= 0x1Fu)
        {
          *(_DWORD *)a3 = 773;
          *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          v9 = 100;
        }
        else if (v13 >= 0x18u)
        {
          *(_DWORD *)a3 = 773;
          *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          v9 = 101;
        }
        else if (v14 >= 0x3Cu)
        {
          *(_DWORD *)a3 = 773;
          *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          v9 = 102;
        }
        else if (v15 >= 0x3Cu)
        {
          *(_DWORD *)a3 = 773;
          *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          v9 = 103;
        }
        else
        {
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
          v9 = 105;
        }
      }
      else
      {
        *(_DWORD *)a3 = 774;
        *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
        v9 = 77;
      }
    }
    else
    {
      *(_DWORD *)a3 = 774;
      *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
      v9 = 76;
    }
  }
  else
  {
    *(_DWORD *)a3 = 771;
    *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
    v9 = 74;
  }
LABEL_14:
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

unsigned __int8 *sub_234137FD4@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  unsigned int v14;
  _BYTE *v15;

  v4 = (_BYTE *)*a2;
  if (*a2)
  {
    v5 = *(unsigned __int16 *)result;
    v6 = a2[1];
    if ((unsigned __int16)(v5 - 2050) > 0xFF9Bu)
    {
      if (v6 >= 0xD)
        goto LABEL_7;
      v7 = 125;
    }
    else
    {
      if (v6 >= 0xF)
      {
        v4[1] = (((5243 * (v5 >> 2)) >> 17) - 10 * ((6554 * ((5243 * (v5 >> 2)) >> 17)) >> 16)) | 0x30;
        *v4 = (((8389 * (v5 >> 3)) >> 20) - 10 * ((103 * ((8389 * (v5 >> 3)) >> 20)) >> 10)) | 0x30;
        v4 += 2;
        v5 = *(unsigned __int16 *)result;
LABEL_7:
        v9 = (52429 * v5) >> 19;
        v4[1] = (v5 - 10 * v9) | 0x30;
        *v4 = (v9 - 10 * ((6554 * v9) >> 16)) | 0x30;
        LOWORD(v9) = result[2] / 0xAu;
        v4[3] = (result[2] % 0xAu) | 0x30;
        v4[2] = (v9 - 10 * ((unsigned __int16)(26 * v9) >> 8)) | 0x30;
        v10 = result[3] / 0xAu;
        v4[5] = (result[3] % 0xAu) | 0x30;
        v4[4] = (v10 - 10 * ((unsigned __int16)(26 * v10) >> 8)) | 0x30;
        v11 = result[4] / 0xAu;
        v4[7] = (result[4] % 0xAu) | 0x30;
        v4[6] = (v11 - 10 * ((unsigned __int16)(26 * v11) >> 8)) | 0x30;
        v12 = result[5] / 0xAu;
        v4[9] = (result[5] % 0xAu) | 0x30;
        v4[8] = (v12 - 10 * ((unsigned __int16)(26 * v12) >> 8)) | 0x30;
        v13 = result[6] / 0xAu;
        v14 = (result[6] % 0xAu) | 0x30;
        v4[12] = 90;
        v15 = v4 + 12;
        *(v15 - 1) = v14;
        *(v15 - 2) = (v13 - 10 * ((unsigned __int16)(26 * v13) >> 8)) | 0x30;
        result = (unsigned __int8 *)sub_234138204((uint64_t)a2, (unint64_t)&v15[-*a2 + 1]);
        v8 = 0;
        v7 = 138;
        goto LABEL_11;
      }
      v7 = 120;
    }
    v8 = 769;
    goto LABEL_11;
  }
  v7 = 112;
  v8 = 771;
LABEL_11:
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Time.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_234138204(uint64_t result, unint64_t a2)
{
  if (*(_QWORD *)(result + 8) < a2)
    sub_234257E00();
  *(_QWORD *)(result + 8) = a2;
  return result;
}

BOOL sub_234138228(unsigned __int8 *a1, unsigned int *a2)
{
  return sub_234117358(*(unsigned __int16 *)a1, a1[2], a1[3], a1[4], a1[5], a1[6], a2);
}

uint64_t sub_23413824C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a2 + a3;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 104) = 0;
  return result;
}

uint64_t sub_234138260(uint64_t result)
{
  *(_BYTE *)(result + 104) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  return result;
}

uint64_t sub_234138270(_QWORD *a1)
{
  if (*a1)
    return a1[2] - *a1;
  else
    return 0;
}

_QWORD *sub_23413828C@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  if (*result)
  {
    v3 = 0;
    v5[0] = bswap64(a2);
    while (1)
    {
      if (*((unsigned __int8 *)v5 + v3) == 255)
      {
        v4 = v3 + 1;
        if ((*((char *)v5 + v3 + 1) & 0x80000000) == 0)
          return sub_234138364(result, 0, 2u, 0, (char *)v5 + v3, (8 - v3), (_QWORD *)a3);
      }
      else
      {
        if (*((_BYTE *)v5 + v3))
          return sub_234138364(result, 0, 2u, 0, (char *)v5 + v3, (8 - v3), (_QWORD *)a3);
        v4 = v3 + 1;
        if (*((char *)v5 + v3 + 1) < 0)
          return sub_234138364(result, 0, 2u, 0, (char *)v5 + v3, (8 - v3), (_QWORD *)a3);
      }
      v3 = v4;
      if (v4 == 7)
        return sub_234138364(result, 0, 2u, 0, (char *)v5 + v3, (8 - v3), (_QWORD *)a3);
    }
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a3 + 16) = 75;
  return result;
}

_QWORD *sub_234138364@<X0>(_QWORD *result@<X0>, char a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, const void *a5@<X4>, unsigned int a6@<W5>, _QWORD *a7@<X8>)
{
  _QWORD *v10;
  int v11;

  if (*result)
  {
    v10 = result;
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    result = (_QWORD *)sub_234138490((uint64_t)result, a2, a3, a4, a6, (uint64_t)a7);
    if (*(_DWORD *)a7)
      return result;
    result = memcpy((void *)v10[2], a5, a6);
    v10[2] += a6;
    v11 = 330;
  }
  else
  {
    v11 = 324;
  }
  *(_DWORD *)a7 = 0;
  a7[1] = "src/lib/asn1/ASN1Writer.cpp";
  *((_DWORD *)a7 + 4) = v11;
  return result;
}

_QWORD *sub_2341383F4@<X0>(_QWORD *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _BYTE *v3;
  int v4;
  uint64_t v5;

  if (*result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v3 = (_BYTE *)result[2];
    if ((unint64_t)(v3 + 3) <= result[1])
    {
      result[2] = v3 + 1;
      *v3 = 1;
      *(_BYTE *)result[2] = 1;
      v5 = result[2];
      result[2] = v5 + 2;
      *(_BYTE *)(v5 + 1) = a2 << 31 >> 31;
      *(_DWORD *)a3 = 0;
      a3[1] = "src/lib/asn1/ASN1Writer.cpp";
      v4 = 103;
    }
    else
    {
      *(_DWORD *)a3 = 770;
      a3[1] = "src/lib/asn1/ASN1Writer.cpp";
      v4 = 369;
    }
  }
  else
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/asn1/ASN1Writer.cpp";
    v4 = 97;
  }
  *((_DWORD *)a3 + 4) = v4;
  return result;
}

uint64_t sub_234138490@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  char v6;
  char v7;
  char v8;
  unsigned __int8 v9;
  int v10;
  _BYTE *v11;
  int v12;
  int v13;
  char v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*(_QWORD *)result)
  {
    v13 = 0;
    v12 = 351;
    goto LABEL_25;
  }
  if (a3 > 0x1E)
  {
    v12 = 357;
LABEL_24:
    v13 = 774;
    goto LABEL_25;
  }
  if (a5 < -1)
  {
    v12 = 360;
    goto LABEL_24;
  }
  if (HIBYTE(a5))
    v6 = 5;
  else
    v6 = 4;
  if (a5 >= 0x10000)
    v7 = v6;
  else
    v7 = 3;
  if (a5 >= 0x100)
    v8 = v7;
  else
    v8 = 2;
  if (a5 >= 128)
    v9 = v8;
  else
    v9 = 1;
  if (a5 == -1)
    v10 = 0;
  else
    v10 = a5;
  v11 = *(_BYTE **)(result + 16);
  if ((unint64_t)&v11[v10 + (v9 + 1)] <= *(_QWORD *)(result + 8))
  {
    if (a4)
      v14 = 32;
    else
      v14 = 0;
    *(_QWORD *)(result + 16) = v11 + 1;
    *v11 = v14 | a2 | a3;
    if (a5 == -1)
    {
      if (*(unsigned __int8 *)(result + 104) > 9u)
      {
        v12 = 389;
        v13 = 771;
        goto LABEL_25;
      }
      **(_BYTE **)(result + 16) = -1;
      v16 = *(_QWORD *)(result + 16);
      v17 = *(unsigned __int8 *)(result + 104);
      *(_BYTE *)(result + 104) = v17 + 1;
      *(_QWORD *)(result + 8 * v17 + 24) = v16;
    }
    else
    {
      v15 = *(_BYTE **)(result + 16);
      if (v9 == 1)
      {
        *v15 = a5;
      }
      else
      {
        *v15 = (v9 - 1) | 0x80;
        v18 = (v9 - 1);
        do
        {
          v15[v18] = a5;
          a5 >>= 8;
          --v18;
        }
        while ((_BYTE)v18);
      }
    }
    v13 = 0;
    *(_QWORD *)(result + 16) += v9;
    v12 = 397;
  }
  else
  {
    v12 = 369;
    v13 = 770;
  }
LABEL_25:
  *(_DWORD *)a6 = v13;
  *(_QWORD *)(a6 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a6 + 16) = v12;
  return result;
}

_QWORD *sub_2341385F8@<X0>(_QWORD *a1@<X0>, const void *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  return sub_234138364(a1, 0, 6u, 0, a2, a3, a4);
}

_QWORD *sub_234138610@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, const void *a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  return sub_234138364(a1, 0, a2, 0, a3, a4, a5);
}

_QWORD *sub_234138628@<X0>(_QWORD *a1@<X0>, const void *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  return sub_234138364(a1, 0, 4u, 0, a2, a3, a4);
}

_QWORD *sub_234138640@<X0>(_QWORD *a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, const void *a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  return sub_234138364(a1, a2, a3, 0, a4, a5, a6);
}

void sub_234138650(uint64_t a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  sub_23413865C(a1, a2, a3, 0, a4, a5);
}

void sub_23413865C(uint64_t a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;

  v15 = 0uLL;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  sub_234104B68(a5, &v15, a6);
  if (!*(_DWORD *)a6)
  {
    v11 = DWORD2(v15);
    if (*((_QWORD *)&v15 + 1) >> 31)
    {
      v14 = 338;
      v13 = 776;
    }
    else if (*(_QWORD *)a1)
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      sub_234138490(a1, a2, a3, a4, v11, (uint64_t)a6);
      if (*(_DWORD *)a6)
        return;
      v12 = *((_QWORD *)&v15 + 1);
      memcpy(*(void **)(a1 + 16), (const void *)v15, *((size_t *)&v15 + 1));
      v13 = 0;
      *(_QWORD *)(a1 + 16) += v12;
      v14 = 346;
    }
    else
    {
      v13 = 0;
      v14 = 340;
    }
    *(_DWORD *)a6 = v13;
    a6[1] = "src/lib/asn1/ASN1Writer.cpp";
    *((_DWORD *)a6 + 4) = v14;
  }
}

_QWORD *sub_23413874C@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  unsigned int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v11;
  int v12;
  int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  char v19;
  BOOL v20;
  char v21;

  if (!*result)
  {
    v18 = 173;
LABEL_45:
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/lib/asn1/ASN1Writer.cpp";
    *(_DWORD *)(a3 + 16) = v18;
    return result;
  }
  v5 = result;
  v6 = HIBYTE(a2);
  v7 = HIBYTE(a2) != 0;
  if (HIBYTE(a2))
    v8 = 5;
  else
    v8 = 4;
  v9 = 1;
  if (a2 >= 0x10000)
  {
    v10 = v8;
  }
  else
  {
    v7 = 0;
    v10 = 3;
  }
  if (a2 >= 0x100)
  {
    v11 = a2 >= 0x10000;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  if (a2 >= 0x100)
  {
    v12 = v10;
  }
  else
  {
    v7 = 0;
    v12 = 2;
  }
  if (a2)
    v13 = v9;
  else
    v13 = 0;
  if (a2)
    v14 = v11;
  else
    v14 = 0;
  if (a2)
    v15 = v7;
  else
    v15 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a2)
    v16 = v12;
  else
    v16 = 1;
  result = (_QWORD *)sub_234138490((uint64_t)result, 0, 3u, 0, v16, a3);
  if (!*(_DWORD *)a3)
  {
    if (a2)
    {
      *(_BYTE *)(v5[2] + 1) = __rbit32(a2) >> 24;
      if (v13)
      {
        v17 = a2 >> 8;
        *(_BYTE *)(v5[2] + 2) = __rbit32(a2 >> 8) >> 24;
        if (v14)
        {
          v17 = HIWORD(a2);
          *(_BYTE *)(v5[2] + 3) = __rbit32(HIWORD(a2)) >> 24;
          if (v15)
          {
            *(_BYTE *)(v5[2] + 4) = __rbit32(v6) >> 24;
            v17 = v6;
          }
        }
      }
      else
      {
        v17 = a2;
      }
      v20 = HIWORD(v17) != 0;
      if (HIWORD(v17))
        v17 >>= 16;
      v21 = 16 * v20;
      if (v17 > 0xFF)
      {
        v17 >>= 8;
        v21 = (16 * v20) | 8;
      }
      if (v17 > 0xF)
      {
        v17 >>= 4;
        v21 |= 4u;
      }
      if (v17 > 3)
      {
        v17 >>= 2;
        v21 |= 2u;
      }
      v19 = 7 - (v21 | (v17 >> 1));
    }
    else
    {
      v19 = 0;
    }
    *(_BYTE *)v5[2] = v19;
    v5[2] += v16;
    v18 = 216;
    goto LABEL_45;
  }
  return result;
}

_QWORD *sub_23413891C@<X0>(_QWORD *result@<X0>, char a2@<W1>, const void *a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  _BYTE *v10;
  int v11;

  if (*result)
  {
    v9 = result;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    result = (_QWORD *)sub_234138490((uint64_t)result, 0, 3u, 0, a4 + 1, (uint64_t)a5);
    if (*(_DWORD *)a5)
      return result;
    v10 = (_BYTE *)v9[2];
    v9[2] = v10 + 1;
    *v10 = a2;
    result = memcpy((void *)v9[2], a3, a4);
    v9[2] += a4;
    v11 = 229;
  }
  else
  {
    v11 = 221;
  }
  *(_DWORD *)a5 = 0;
  a5[1] = "src/lib/asn1/ASN1Writer.cpp";
  *((_DWORD *)a5 + 4) = v11;
  return result;
}

void *sub_2341389D4(uint64_t a1, const void *a2, size_t a3)
{
  void *result;

  result = memcpy(*(void **)(a1 + 16), a2, a3);
  *(_QWORD *)(a1 + 16) += a3;
  return result;
}

void sub_234138A08(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  __int128 v12;

  v12 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_234104B68(a3, &v12, a4);
  if (!*(_DWORD *)a4)
  {
    v7 = DWORD2(v12);
    if ((unint64_t)(*((_QWORD *)&v12 + 1) + 1) >> 31)
    {
      v11 = 237;
      LODWORD(v8) = 776;
    }
    else
    {
      v8 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        sub_234138490(a1, 0, 3u, 0, v7 + 1, (uint64_t)a4);
        if (*(_DWORD *)a4)
          return;
        v9 = *(_BYTE **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v9 + 1;
        *v9 = a2;
        v10 = *((_QWORD *)&v12 + 1);
        memcpy(*(void **)(a1 + 16), (const void *)v12, *((size_t *)&v12 + 1));
        LODWORD(v8) = 0;
        *(_QWORD *)(a1 + 16) += v10;
        v11 = 248;
      }
      else
      {
        v11 = 239;
      }
    }
    *(_DWORD *)a4 = v8;
    a4[1] = "src/lib/asn1/ASN1Writer.cpp";
    *((_DWORD *)a4 + 4) = v11;
  }
}

unsigned __int8 *sub_234138AFC@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v9[15];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)result)
  {
    v5 = result;
    v7 = v9;
    v8 = 15;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = sub_234137FD4(a2, &v7, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      if (*(unsigned __int16 *)a2 <= 0x801u)
        v6 = 23;
      else
        v6 = 24;
      return (unsigned __int8 *)sub_234138364(v5, 0, v6, 0, v9, (unsigned __int16)v8, a3);
    }
  }
  else
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/asn1/ASN1Writer.cpp";
    *((_DWORD *)a3 + 4) = 253;
  }
  return result;
}

uint64_t *sub_234138BD8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;

  v2 = *result;
  if (*result)
  {
    v3 = (_BYTE *)result[2];
    if ((unint64_t)(v3 + 2) <= result[1])
    {
      LODWORD(v2) = 0;
      result[2] = (uint64_t)(v3 + 1);
      *v3 = 5;
      *(_BYTE *)result[2]++ = 0;
      v4 = 397;
    }
    else
    {
      v4 = 369;
      LODWORD(v2) = 770;
    }
  }
  else
  {
    v4 = 351;
  }
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

_QWORD *sub_234138C48@<X0>(size_t __n@<X2>, _QWORD *result@<X0>, const void *a3@<X1>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;

  if (*result)
  {
    v5 = result;
    result = (_QWORD *)result[2];
    if ((unint64_t)result + __n <= v5[1])
    {
      v8 = __n;
      result = memcpy(result, a3, __n);
      v7 = 0;
      v5[2] += v8;
      v6 = 286;
    }
    else
    {
      v6 = 282;
      v7 = 770;
    }
  }
  else
  {
    v7 = 0;
    v6 = 279;
  }
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t sub_234138CD8@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_234138490(a1, a2, a3, 1, -1, a4);
}

_BYTE *sub_234138CE8@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  size_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;

  if (*(_QWORD *)result)
  {
    v3 = result;
    if (!result[104])
    {
      v5 = 404;
      goto LABEL_7;
    }
    v4 = *(_QWORD *)&result[8 * result[104] + 16];
    if (*(unsigned __int8 *)v4 != 255)
    {
      v5 = 408;
LABEL_7:
      v6 = 771;
      goto LABEL_8;
    }
    v7 = *((_QWORD *)result + 2);
    v8 = v7 + ~v4;
    if (!(v8 >> 31))
    {
      if (v8 >= 0x80)
      {
        if (v8 >= 0x100)
        {
          if (v8 >= 0x10000)
          {
            if (BYTE3(v8))
              v9 = 5;
            else
              v9 = 4;
          }
          else
          {
            v9 = 3;
          }
        }
        else
        {
          v9 = 2;
        }
        v10 = v7 + v9 - 1;
        *((_QWORD *)result + 2) = v10;
        if (v10 > *((_QWORD *)result + 1))
        {
          v5 = 423;
          v6 = 770;
          goto LABEL_8;
        }
        v11 = v9;
        result = memmove((void *)(v4 + v9), (const void *)(v4 + 1), v8);
        *(_BYTE *)v4 = (v11 - 1) | 0x80;
        v12 = (v11 - 1);
        do
        {
          *(_BYTE *)(v4 + v12) = v8;
          LODWORD(v8) = (int)v8 >> 8;
          --v12;
        }
        while ((_BYTE)v12);
      }
      else
      {
        *(_BYTE *)v4 = v8;
      }
      v6 = 0;
      --v3[104];
      v5 = 434;
      goto LABEL_8;
    }
    v5 = 413;
    v6 = 776;
  }
  else
  {
    v6 = 0;
    v5 = 402;
  }
LABEL_8:
  *(_DWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = "src/lib/asn1/ASN1Writer.cpp";
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

_QWORD *sub_234138E44@<X0>(_QWORD *result@<X0>, char a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  _QWORD *v8;
  _BYTE *v9;
  int v10;

  v6 = *result;
  if (*result)
  {
    v8 = result;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    result = (_QWORD *)sub_234138490((uint64_t)result, a2, a3, 0, -1, (uint64_t)a5);
    if (*(_DWORD *)a5)
      return result;
    if (a4)
    {
      v9 = (_BYTE *)v8[2];
      if ((unint64_t)v9 >= v8[1])
      {
        v10 = 310;
        LODWORD(v6) = 770;
        goto LABEL_10;
      }
      LODWORD(v6) = 0;
      v8[2] = v9 + 1;
      *v9 = 0;
    }
    else
    {
      LODWORD(v6) = 0;
    }
    v10 = 314;
  }
  else
  {
    v10 = 301;
  }
LABEL_10:
  *(_DWORD *)a5 = v6;
  a5[1] = "src/lib/asn1/ASN1Writer.cpp";
  *((_DWORD *)a5 + 4) = v10;
  return result;
}

uint64_t sub_234138EEC(unsigned int a1)
{
  char v1;
  char v2;
  unsigned __int8 v3;

  if (HIBYTE(a1))
    v1 = 5;
  else
    v1 = 4;
  if (a1 >= 0x10000)
    v2 = v1;
  else
    v2 = 3;
  if (a1 >= 0x100)
    v3 = v2;
  else
    v3 = 2;
  if ((int)a1 >= 128)
    return v3;
  else
    return 1;
}

_BYTE *sub_234138F28(_BYTE *result, int a2, int a3)
{
  uint64_t v3;

  if (a2 == 1)
  {
    *result = a3;
  }
  else
  {
    *result = (a2 - 1) | 0x80;
    v3 = (a2 - 1);
    do
    {
      result[v3] = a3;
      a3 >>= 8;
      --v3;
    }
    while ((_BYTE)v3);
  }
  return result;
}

void sub_234138F5C(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, unint64_t a5@<X6>, char *a6@<X7>, uint64_t a7@<X8>, char *a8, uint64_t a9)
{
  char *v14;
  char *v15;
  int v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  *(_OWORD *)a7 = xmmword_2505056E0;
  *(_QWORD *)(a7 + 16) = 163;
  v21 = 0;
  if (a2 | (unint64_t)a6)
    v14 = a6;
  else
    v14 = &v23;
  if ((unint64_t)a1 | a2)
    v15 = a1;
  else
    v15 = &v21;
  if (!a6 || a2)
  {
    if (!v15)
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v16 = 191;
      goto LABEL_29;
    }
    if (!v14)
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v16 = 192;
      goto LABEL_29;
    }
    if (!a4)
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v16 = 193;
      goto LABEL_29;
    }
    if (!a5)
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v16 = 194;
      goto LABEL_29;
    }
    if (a5 >> 31)
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v16 = 195;
      goto LABEL_29;
    }
    if (!a8)
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v16 = 196;
      goto LABEL_29;
    }
    if (a9 != 16)
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v16 = 198;
      goto LABEL_29;
    }
    v17 = sub_23416F048();
    v18 = sub_23416D024((uint64_t)v17, a3, 16, 16);
    if (!v18)
    {
      *(_DWORD *)a7 = 11;
      *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v16 = 208;
      goto LABEL_29;
    }
    v19 = v18;
    if (sub_23416D340(v18, v14, a8, &v22, 0x10uLL, a4, a5, v15, a2, 0, 0) == 1)
    {
      if (v22 == 16)
      {
LABEL_33:
        sub_23416D114(v19);
        return;
      }
      v20 = 213;
    }
    else
    {
      v20 = 212;
    }
    *(_DWORD *)a7 = 172;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a7 + 16) = v20;
    goto LABEL_33;
  }
  *(_DWORD *)a7 = 47;
  *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  v16 = 190;
LABEL_29:
  *(_DWORD *)(a7 + 16) = v16;
}

void sub_2341391E0(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, char *a9)
{
  char *v10;
  char *v11;
  __int128 *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a7 = xmmword_2505056F8;
  *(_QWORD *)(a7 + 16) = 297;
  v19 = 0;
  if ((unint64_t)a1 | a2)
    v10 = a1;
  else
    v10 = &v19;
  if (a2 | (unint64_t)a9)
    v11 = a9;
  else
    v11 = &v20;
  if (!v10)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v18 = 324;
LABEL_24:
    *(_DWORD *)(a7 + 16) = v18;
    return;
  }
  if (!v11)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v18 = 325;
    goto LABEL_24;
  }
  if (!a3)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v18 = 326;
    goto LABEL_24;
  }
  if (a4 != 16)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v18 = 328;
    goto LABEL_24;
  }
  if (!a6)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v18 = 333;
    goto LABEL_24;
  }
  if (!a8)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v18 = 334;
    goto LABEL_24;
  }
  v15 = sub_23416F048();
  v16 = sub_23416D024((uint64_t)v15, a5, 16, 16);
  if (!v16)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v18 = 340;
    goto LABEL_24;
  }
  v17 = v16;
  if (sub_23416D5AC((uint64_t)v16, v11, a6, a8, v10, a2) != 1)
  {
    *(_DWORD *)a7 = 172;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a7 + 16) = 344;
  }
  sub_23416D114(v17);
}

char *sub_2341393FC@<X0>(char *result@<X0>, size_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;

  if (!result)
  {
    v6 = 417;
LABEL_6:
    v5 = 47;
    goto LABEL_7;
  }
  if (!a3)
  {
    v6 = 418;
    goto LABEL_6;
  }
  result = (char *)sub_234171848(result, a2, a3);
  v5 = 0;
  v6 = 422;
LABEL_7:
  *(_DWORD *)a4 = v5;
  *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

char *sub_234139454@<X0>(char *result@<X0>, size_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;

  if (!result)
  {
    v6 = 428;
LABEL_6:
    v5 = 47;
    goto LABEL_7;
  }
  if (!a3)
  {
    v6 = 429;
    goto LABEL_6;
  }
  result = (char *)sub_2341814F8(result, a2, a3);
  v5 = 0;
  v6 = 433;
LABEL_7:
  *(_DWORD *)a4 = v5;
  *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a4 + 16) = v6;
  return result;
}

void *sub_2341394AC(void *a1)
{
  sub_23418E400(a1, 0x78uLL);
  return a1;
}

void sub_2341394D4(void *a1)
{
  sub_23418E400(a1, 0x78uLL);
}

uint64_t sub_2341394DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;

  result = sub_234182A9C(a1);
  if ((_DWORD)result == 1)
    v4 = 0;
  else
    v4 = 172;
  if ((_DWORD)result == 1)
    v5 = 458;
  else
    v5 = 456;
  *(_DWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t sub_234139528@<X0>(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v6;
  int v7;

  result = sub_234182AD0(a1, a2, a3);
  if ((_DWORD)result == 1)
    v6 = 0;
  else
    v6 = 172;
  if ((_DWORD)result == 1)
    v7 = 468;
  else
    v7 = 466;
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

__n128 sub_234139574@<Q0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  __n128 result;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;

  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_234139610((uint64_t)a1, a2, (uint64_t)a3);
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  *a1 = v5;
  a1[1] = v6;
  result = v8;
  a1[2] = v7;
  a1[3] = v8;
  return result;
}

uint64_t sub_234139610@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  _DWORD *v6;
  int v7;

  if ((unint64_t)a2[1] < 0x20)
  {
    v7 = 489;
    v5 = 25;
  }
  else
  {
    result = sub_234182B18((_DWORD *)*a2, result);
    if ((_DWORD)result == 1)
    {
      result = sub_2341291A4(a2, 0, 0x20uLL);
      v5 = 0;
      *a2 = result;
      a2[1] = (uint64_t)v6;
      v7 = 496;
    }
    else
    {
      v7 = 493;
      v5 = 172;
    }
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_234139698(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  int v20;

  *(_OWORD *)a8 = xmmword_250505710;
  *(_QWORD *)(a8 + 16) = 507;
  v17 = sub_23415958C(963, 0);
  if (!v17)
  {
    *(_DWORD *)a8 = 172;
    *(_QWORD *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a8 + 16) = 511;
    return;
  }
  v18 = v17;
  if (!a1)
  {
    v19 = 513;
    goto LABEL_28;
  }
  if (!a2)
  {
    v19 = 514;
    goto LABEL_28;
  }
  if (!a3 && a4)
  {
    v19 = 519;
LABEL_28:
    v20 = 47;
LABEL_29:
    *(_DWORD *)a8 = v20;
    *(_QWORD *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a8 + 16) = v19;
    goto LABEL_30;
  }
  if (!a6)
  {
    v19 = 522;
    goto LABEL_28;
  }
  if (!a5)
  {
    v19 = 523;
    goto LABEL_28;
  }
  if (!a9)
  {
    v19 = 524;
    goto LABEL_28;
  }
  if (!a7)
  {
    v19 = 525;
    goto LABEL_28;
  }
  if (sub_234159C04(v17) != 1)
  {
    v19 = 528;
    goto LABEL_37;
  }
  sub_234170BAC();
  if (sub_23415C6E4(v18) != 1)
  {
    v19 = 531;
    goto LABEL_37;
  }
  if (sub_23415C6FC(v18) != 1)
  {
    v19 = 536;
    goto LABEL_37;
  }
  if (a3 && a4 && sub_23415C730(v18) != 1)
  {
    v19 = 543;
    goto LABEL_37;
  }
  if (sub_23415C764(v18) != 1)
  {
    v19 = 549;
    goto LABEL_37;
  }
  if (sub_23415C6CC(v18) != 1)
  {
    v19 = 552;
    goto LABEL_37;
  }
  if (sub_234159DF8(v18) != 1)
  {
    v19 = 556;
LABEL_37:
    v20 = 172;
    goto LABEL_29;
  }
LABEL_30:
  sub_23415961C(v18);
}

void sub_234139894(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  _QWORD *v11;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;

  if (!a1)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v14 = 569;
LABEL_18:
    *(_DWORD *)(a7 + 16) = v14;
    return;
  }
  if (!a2)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v14 = 570;
    goto LABEL_18;
  }
  if (!a3)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v14 = 571;
    goto LABEL_18;
  }
  if (!a4)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v14 = 572;
    goto LABEL_18;
  }
  if (a6 <= 0x1F)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v14 = 573;
    goto LABEL_18;
  }
  if (!a5)
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v14 = 574;
    goto LABEL_18;
  }
  *(_OWORD *)a7 = xmmword_250505728;
  *(_QWORD *)(a7 + 16) = 576;
  v15 = 0;
  v11 = sub_23417977C();
  if (v11)
  {
    v12 = sub_234170BAC();
    if (sub_234179480((uint64_t)v11, a1, a2, (uint64_t)v12) == 1)
    {
      if (sub_234179658((uint64_t)v11) == 1)
      {
        v15 = 32;
        if (sub_234179678((uint64_t)v11, a5, &v15) == 1)
        {
          *(_DWORD *)a7 = 0;
          *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          v13 = 595;
        }
        else
        {
          *(_DWORD *)a7 = 172;
          *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          v13 = 593;
        }
      }
      else
      {
        *(_DWORD *)a7 = 172;
        *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v13 = 589;
      }
    }
    else
    {
      *(_DWORD *)a7 = 172;
      *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v13 = 586;
    }
  }
  else
  {
    *(_DWORD *)a7 = 172;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v13 = 581;
  }
  *(_DWORD *)(a7 + 16) = v13;
  sub_234179828(v11);
}

uint64_t sub_234139AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, 16, a3, a4, a5, a6);
}

uint64_t sub_234139AE0@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, unsigned int a5@<W5>, unsigned int a6@<W6>, char *a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v16;
  uint64_t result;
  int v18;
  int v19;

  *(_OWORD *)a8 = xmmword_250505740;
  *(_QWORD *)(a8 + 16) = 611;
  if (!a1)
  {
    v18 = 615;
LABEL_18:
    v19 = 47;
LABEL_19:
    *(_DWORD *)a8 = v19;
    *(_QWORD *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a8 + 16) = v18;
    return sub_234139C18();
  }
  if (!a2)
  {
    v18 = 616;
    goto LABEL_18;
  }
  if (!a3)
  {
    v18 = 617;
    goto LABEL_18;
  }
  if (a4 < 0x10)
  {
    v18 = 618;
    goto LABEL_18;
  }
  if (a4 > 0x20)
  {
    v18 = 619;
    goto LABEL_18;
  }
  if (!a6)
  {
    v18 = 620;
    goto LABEL_18;
  }
  if (!a7)
  {
    v18 = 621;
    goto LABEL_18;
  }
  v16 = sub_234170BAC();
  if (!v16)
  {
    v18 = 624;
LABEL_22:
    v19 = 172;
    goto LABEL_19;
  }
  result = sub_23415E28C(a1, a2, a3, a4, a5, (uint64_t)v16, a6, a7);
  if ((_DWORD)result != 1)
  {
    v18 = 635;
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_234139C18()
{
  uint64_t result;
  unsigned int v1;
  const char *v2;
  const char *v3;
  char *v4;
  char *v5;
  NSObject *v6;
  const char *v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = sub_2341570BC();
  if ((_DWORD)result)
  {
    v1 = result;
    do
    {
      v2 = sub_2341574B4(v1);
      v3 = sub_234157524();
      v4 = sub_234157530(v1);
      if (v2)
      {
        v5 = v4;
        v6 = sub_234117B80(8u, "Crypto");
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          if (v3)
            v7 = v3;
          else
            v7 = "(null)";
          *(_DWORD *)buf = 136315650;
          v10 = v2;
          if (v5)
            v8 = v5;
          else
            v8 = "(null)";
          v11 = 2080;
          v12 = v7;
          v13 = 2080;
          v14 = v8;
          _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, " ssl err  %s %s %s\n", buf, 0x20u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(8u, 1);
      }
      result = sub_2341570BC();
      v1 = result;
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_234139D94(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a1 + 16) = 648;
}

char *sub_234139DB0@<X0>(char *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;

  if (result)
  {
    if (a2)
    {
      result = (char *)sub_23416BE78(result, a2);
      if ((_DWORD)result == 1)
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v4 = 660;
      }
      else
      {
        *(_DWORD *)a3 = 172;
        *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v4 = 658;
      }
    }
    else
    {
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v4 = 654;
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v4 = 653;
  }
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

BOOL sub_234139E4C(int a1)
{
  return a1 == 0;
}

void sub_234139E58(char *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v14 = 0;
  if (!__src || !__n)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a5 + 16) = 698;
    return;
  }
  memset(v15, 0, sizeof(v15));
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  sub_234171848(__src, __n, v15);
  sub_234157348();
  if (!*(_BYTE *)(a3 + 600))
  {
    v11 = 708;
    v12 = 28;
LABEL_22:
    sub_234139C18();
    goto LABEL_23;
  }
  if (!sub_234173774("P-256"))
  {
    v11 = 710;
    v12 = 47;
    goto LABEL_22;
  }
  v8 = *(uint64_t **)(a3 + 88);
  if (!v8)
  {
    v11 = 713;
LABEL_21:
    v12 = 172;
    goto LABEL_22;
  }
  v9 = sub_234172360((unint64_t *)v15, 0x20uLL, v8);
  if (!v9)
  {
    v11 = 716;
    goto LABEL_21;
  }
  v10 = v9;
  sub_234154110(v9, &v14, &v13);
  v11 = 718;
  if (!v14 || !v13)
    goto LABEL_20;
  sub_234162240(v14);
  sub_234162240(v13);
  if (sub_234162240(v14) > 0x20 || sub_234162240(v13) > 0x20)
  {
    v11 = 722;
LABEL_20:
    sub_2341540D8(v10);
    goto LABEL_21;
  }
  *(_QWORD *)(a4 + 64) = 64;
  if (sub_234147388((uint64_t)v14, (char *)a4, 0x20u) != 32)
  {
    v11 = 726;
    goto LABEL_20;
  }
  if (sub_234147388((uint64_t)v13, (char *)(a4 + 32), 0x20u) != 32)
  {
    v11 = 728;
    goto LABEL_20;
  }
  sub_2341540D8(v10);
  v12 = 0;
  v11 = 691;
LABEL_23:
  *(_DWORD *)a5 = v12;
  *(_DWORD *)(a5 + 4) = 0;
  *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v11;
  *(_DWORD *)(a5 + 20) = 0;
}

void sub_23413A038(char *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (__src && __n)
  {
    memset(v8, 0, sizeof(v8));
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    sub_234171848(__src, __n, v8);
    *(_DWORD *)a5 = 0;
    a5[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *((_DWORD *)a5 + 4) = 422;
    sub_23413A114(a3, (uint64_t)v8, 32, a4, (uint64_t)a5);
  }
  else
  {
    *(_DWORD *)a5 = 47;
    a5[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *((_DWORD *)a5 + 4) = 748;
  }
}

void sub_23413A114(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;

  sub_234157348();
  *(_OWORD *)a5 = xmmword_250505758;
  *(_QWORD *)(a5 + 16) = 761;
  if (!a2)
  {
    v27 = 771;
LABEL_25:
    v28 = 47;
LABEL_26:
    *(_DWORD *)a5 = v28;
    *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a5 + 16) = v27;
    sub_234139C18();
    return;
  }
  if (a3 != 32)
  {
    v27 = 772;
    goto LABEL_25;
  }
  if (*(_QWORD *)(a4 + 64) != 64)
  {
    v27 = 773;
    goto LABEL_25;
  }
  v10 = sub_234173774("P-256");
  if (!v10)
  {
    v27 = 776;
    goto LABEL_25;
  }
  v11 = v10;
  v12 = sub_234173224(v10);
  if (!v12)
  {
    v27 = 779;
    v28 = 11;
    goto LABEL_26;
  }
  v13 = (uint64_t)v12;
  v14 = sub_2341737FC((uint64_t)v12);
  if (v14)
  {
    v15 = v14;
    if (sub_23417571C(v13, (uint64_t)v14, (unsigned __int8 *)(a1 + 8), 65, 0) == 1)
    {
      v16 = sub_234174F60(v11);
      if (v16)
      {
        v17 = (uint64_t)v16;
        if (sub_234175164((uint64_t)v16, v15))
        {
          if (sub_234175380(v17) == 1)
          {
            v18 = sub_2341625C8((unsigned __int8 *)a4, 0x20uLL, 0);
            if (v18)
            {
              v19 = (_QWORD **)v18;
              v20 = sub_2341625C8((unsigned __int8 *)(a4 + 32), 0x20uLL, 0);
              if (v20)
              {
                v21 = (_QWORD **)v20;
                v22 = sub_234171AA8();
                if (v22)
                {
                  v23 = v22;
                  if (sub_23415412C((_QWORD ***)v22, v19, v21) == 1)
                  {
                    v24 = sub_234171F78(a2, 32, v23, v17);
                    if (v24 == 1)
                      v25 = 0;
                    else
                      v25 = 20;
                    if (v24 == 1)
                      v26 = 811;
                    else
                      v26 = 810;
                  }
                  else
                  {
                    v26 = 807;
                    v25 = 172;
                  }
                  *(_DWORD *)a5 = v25;
                  *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                  *(_DWORD *)(a5 + 16) = v26;
                  sub_234139C18();
                  sub_2341540D8(v23);
                  goto LABEL_36;
                }
                *(_DWORD *)a5 = 11;
                *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                *(_DWORD *)(a5 + 16) = 804;
                sub_234139C18();
                sub_234162010(v21);
              }
              else
              {
                *(_DWORD *)a5 = 11;
                *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                *(_DWORD *)(a5 + 16) = 801;
                sub_234139C18();
              }
              sub_234162010(v19);
LABEL_36:
              sub_234174FAC(v17);
              goto LABEL_37;
            }
            v31 = 798;
            v32 = 11;
LABEL_35:
            *(_DWORD *)a5 = v32;
            *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            *(_DWORD *)(a5 + 16) = v31;
            sub_234139C18();
            goto LABEL_36;
          }
          v31 = 794;
        }
        else
        {
          v31 = 791;
        }
        v32 = 172;
        goto LABEL_35;
      }
      v29 = 788;
      v30 = 11;
    }
    else
    {
      v29 = 785;
      v30 = 172;
    }
    *(_DWORD *)a5 = v30;
    *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a5 + 16) = v29;
    sub_234139C18();
LABEL_37:
    sub_2341738D4(v15);
    goto LABEL_38;
  }
  *(_DWORD *)a5 = 11;
  *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = 782;
  sub_234139C18();
LABEL_38:
  sub_234172FBC(v13);
}

uint64_t sub_23413A3FC(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_23413A404()
{
  return 65;
}

uint64_t sub_23413A40C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  int v29;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;

  sub_234157348();
  *(_OWORD *)a4 = xmmword_250505770;
  *(_QWORD *)(a4 + 16) = 916;
  v8 = sub_234175034(*(_QWORD *)(a1 + 88));
  if (!v8)
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = 925;
    return sub_234139C18();
  }
  v9 = v8;
  if (!*(_BYTE *)(a1 + 600))
  {
    v25 = 927;
    v26 = 28;
LABEL_17:
    *(_DWORD *)a4 = v26;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = v25;
    sub_234174FAC(v9);
    return sub_234139C18();
  }
  sub_234158050();
  if (!v10)
  {
    v25 = 930;
    v26 = 172;
    goto LABEL_17;
  }
  v11 = v10;
  if (sub_23415BA34(v10, v9) == 1)
  {
    v12 = sub_234173774("P-256");
    if (v12)
    {
      v13 = v12;
      v14 = sub_234174F60(v12);
      if (v14)
      {
        v15 = (uint64_t)v14;
        v16 = sub_234173224(v13);
        if (v16)
        {
          v17 = (uint64_t)v16;
          v18 = sub_2341737FC((uint64_t)v16);
          if (!v18)
          {
            sub_234174FAC(v15);
            v21 = 0;
            v23 = 172;
            v24 = 870;
LABEL_36:
            sub_234172FBC(v17);
            *(_DWORD *)a4 = v23;
            *(_DWORD *)(a4 + 4) = 0;
            *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            *(_DWORD *)(a4 + 16) = v24;
            *(_DWORD *)(a4 + 20) = 0;
            if (v23)
            {
              v27 = 0;
              goto LABEL_24;
            }
            v31 = sub_234159464(v11, 0);
            v27 = v31;
            if (v31)
            {
              if (sub_234159C04(v31) == 1)
              {
                if (sub_234159C58((uint64_t)v27, v21) == 1)
                {
                  v32 = *(_QWORD *)(a3 + 32);
                  if (!v32)
                    v32 = 32;
                  v34 = v32;
                  if (sub_234159DF8(v27) == 1)
                  {
                    if (v34 > 0x20)
                    {
                      v28 = 289;
                      v33 = 47;
                    }
                    else
                    {
                      v33 = 0;
                      *(_QWORD *)(a3 + 32) = v34;
                      v28 = 291;
                    }
                    *(_DWORD *)a4 = v33;
                    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPAL.h";
                  }
                  else
                  {
                    *(_DWORD *)a4 = 172;
                    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                    v28 = 949;
                  }
                }
                else
                {
                  *(_DWORD *)a4 = 172;
                  *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                  v28 = 945;
                }
              }
              else
              {
                *(_DWORD *)a4 = 172;
                *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                v28 = 942;
              }
            }
            else
            {
              *(_DWORD *)a4 = 172;
              *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
              v28 = 939;
            }
            goto LABEL_19;
          }
          v19 = v18;
          if (sub_23417571C(v17, (uint64_t)v18, (unsigned __int8 *)(a2 + 8), 65, 0) == 1)
          {
            if (sub_234175164(v15, v19))
            {
              sub_234158050();
              if (v20)
              {
                v21 = (unsigned int *)v20;
                v22 = sub_23415BA34(v20, v15);
                sub_234174FAC(v15);
                if (v22 == 1)
                {
                  v23 = 0;
                  v24 = 851;
LABEL_35:
                  sub_2341738A4(v19);
                  goto LABEL_36;
                }
                sub_234158078((uint64_t)v21);
                v24 = 883;
LABEL_34:
                v23 = 172;
                goto LABEL_35;
              }
              v24 = 880;
            }
            else
            {
              v24 = 877;
            }
          }
          else
          {
            v24 = 873;
          }
          sub_234174FAC(v15);
          v21 = 0;
          goto LABEL_34;
        }
        sub_234174FAC(v15);
        v29 = 867;
      }
      else
      {
        v29 = 864;
      }
    }
    else
    {
      v29 = 861;
    }
    v21 = 0;
    v27 = 0;
    *(_QWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = v29;
    *(_DWORD *)(a4 + 20) = 0;
    goto LABEL_24;
  }
  v21 = 0;
  v27 = 0;
  *(_DWORD *)a4 = 172;
  *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  v28 = 933;
LABEL_19:
  *(_DWORD *)(a4 + 16) = v28;
LABEL_24:
  sub_234174FAC(v9);
  sub_234158078(v11);
  if (v21)
    sub_234158078((uint64_t)v21);
  if (v27)
    sub_23415961C(v27);
  return sub_234139C18();
}

BOOL sub_23413A7A8(char *a1, char *a2, uint64_t a3)
{
  return sub_23418E484(a1, a2, a3) == 0;
}

uint64_t sub_23413A7C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;

  sub_234157348();
  if (*(_BYTE *)(a1 + 600))
  {
    sub_234174FAC(*(_QWORD *)(a1 + 88));
    *(_BYTE *)(a1 + 600) = 0;
  }
  *(_OWORD *)a2 = xmmword_250505788;
  *(_QWORD *)(a2 + 16) = 1033;
  v4 = sub_234173774("P-256");
  if (!v4)
  {
    *(_DWORD *)a2 = 47;
    *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v7 = 1039;
LABEL_10:
    *(_DWORD *)(a2 + 16) = v7;
    return sub_234139C18();
  }
  v5 = sub_234174F60(v4);
  if (!v5)
  {
    *(_DWORD *)a2 = 172;
    *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v7 = 1042;
    goto LABEL_10;
  }
  v6 = (uint64_t)v5;
  if (sub_234175CB8((uint64_t)v5) != 1)
  {
    *(_DWORD *)a2 = 172;
    *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a2 + 16) = 1045;
    goto LABEL_12;
  }
  sub_23413A8FC(v6, a1 + 8, a2);
  if (*(_DWORD *)a2)
  {
LABEL_12:
    sub_234174FAC(v6);
    return sub_234139C18();
  }
  *(_QWORD *)(a1 + 88) = v6;
  *(_BYTE *)(a1 + 600) = 1;
  return sub_234139C18();
}

void sub_23413A8CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 600))
  {
    sub_234174FAC(*(_QWORD *)(a1 + 88));
    *(_BYTE *)(a1 + 600) = 0;
  }
}

uint64_t sub_23413A8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  sub_234157348();
  *(_OWORD *)a3 = xmmword_250505B18;
  *(_QWORD *)(a3 + 16) = 994;
  v6 = sub_2341414C0(a1);
  if (!v6)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v11 = 1002;
LABEL_10:
    *(_DWORD *)(a3 + 16) = v11;
    return sub_234139C18();
  }
  v7 = (uint64_t *)v6;
  v8 = sub_234173774("P-256");
  if (!v8)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v11 = 1005;
    goto LABEL_10;
  }
  v9 = sub_234173224(v8);
  if (!v9)
  {
    *(_DWORD *)a3 = 172;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v11 = 1008;
    goto LABEL_10;
  }
  v10 = (uint64_t)v9;
  if (sub_234177370((uint64_t)v9, v7, 4, (char *)(a2 + 8), 0x41uLL) != 65)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1014;
  }
  sub_234172FBC(v10);
  return sub_234139C18();
}

uint64_t sub_23413AA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = xmmword_2505057A0;
  *(_QWORD *)(a3 + 16) = 1067;
  v6 = sub_234153704(*(_QWORD *)(a1 + 88));
  if (!v6)
  {
    *(_DWORD *)a3 = 172;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v9 = 1074;
    goto LABEL_11;
  }
  v7 = sub_234147388(v6, v14, 0x20u);
  if (v7 <= 0)
  {
    *(_DWORD *)a3 = 172;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v9 = 1079;
    goto LABEL_11;
  }
  if (v7 != 32)
  {
    *(_DWORD *)a3 = 172;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v9 = 1080;
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(a2 + 104);
  if (!v8)
    v8 = 97;
  v11 = a2;
  v12 = v8;
  v13 = 0;
  sub_2341150D8(&v11, (const void *)(a1 + 16), 0x41uLL);
  sub_2341150D8(&v11, v14, 0x20uLL);
  if (v12 < v13)
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v9 = 1087;
LABEL_11:
    *(_DWORD *)(a3 + 16) = v9;
    goto LABEL_12;
  }
  if (v13 <= 0x61)
    *(_QWORD *)(a2 + 104) = v13;
LABEL_12:
  sub_23418E400(v14, 0x20uLL);
  return sub_234139C18();
}

uint64_t sub_23413AB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  int v7;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;

  v6 = (unsigned __int8 *)(a1 + 16);
  v20 = a1 + 16;
  v21 = xmmword_2342D9F00;
  if (*(_BYTE *)(a1 + 600))
  {
    sub_234174FAC(*(_QWORD *)(a1 + 88));
    *(_BYTE *)(a1 + 600) = 0;
  }
  sub_234157348();
  *(_OWORD *)a3 = xmmword_2505057B8;
  *(_QWORD *)(a3 + 16) = 1111;
  if (*(_QWORD *)(a2 + 104) != 97)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v7 = 1117;
    goto LABEL_7;
  }
  sub_2341150D8(&v20, (const void *)a2, 0x41uLL);
  if ((unint64_t)v21 >= *((_QWORD *)&v21 + 1))
  {
    v9 = sub_234173774("P-256");
    if (!v9)
    {
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v7 = 1122;
      goto LABEL_7;
    }
    v10 = v9;
    v11 = sub_234173224(v9);
    if (!v11)
    {
      *(_DWORD *)a3 = 172;
      *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v7 = 1125;
      goto LABEL_7;
    }
    v12 = (uint64_t)v11;
    v13 = sub_2341737FC((uint64_t)v11);
    if (!v13)
    {
      *(_DWORD *)a3 = 172;
      *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      *(_DWORD *)(a3 + 16) = 1128;
      sub_234172FBC(v12);
      return sub_234139C18();
    }
    v14 = v13;
    if (sub_23417571C(v12, (uint64_t)v13, v6, 65, 0) == 1)
    {
      v15 = sub_234174F60(v10);
      if (v15)
      {
        v16 = v15;
        if (sub_234175164((uint64_t)v15, v14))
        {
          v17 = sub_2341625C8((unsigned __int8 *)(a2 + 65), 0x20uLL, 0);
          if (v17)
          {
            if (sub_2341751FC(v16, (uint64_t)v17) == 1)
            {
              *(_QWORD *)(a1 + 88) = v16;
              *(_BYTE *)(a1 + 600) = 1;
              sub_234172FBC(v12);
LABEL_28:
              sub_234161FC4((_QWORD **)v17);
              goto LABEL_29;
            }
            v19 = 1143;
          }
          else
          {
            v19 = 1140;
          }
        }
        else
        {
          v17 = 0;
          v19 = 1137;
        }
        *(_DWORD *)a3 = 172;
        *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        *(_DWORD *)(a3 + 16) = v19;
        sub_234174FAC((uint64_t)v16);
        sub_234172FBC(v12);
        if (v17)
          goto LABEL_28;
LABEL_29:
        sub_2341738A4(v14);
        return sub_234139C18();
      }
      v18 = 1134;
    }
    else
    {
      v18 = 1131;
    }
    *(_DWORD *)a3 = 172;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = v18;
    sub_234172FBC(v12);
    goto LABEL_29;
  }
  *(_DWORD *)a3 = 11;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  v7 = 1119;
LABEL_7:
  *(_DWORD *)(a3 + 16) = v7;
  return sub_234139C18();
}

uint64_t sub_23413AE04(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2505057E0;
  if (*(_BYTE *)(a1 + 600))
  {
    sub_234174FAC(*(_QWORD *)(a1 + 88));
    *(_BYTE *)(a1 + 600) = 0;
  }
  return a1;
}

uint64_t sub_23413AE44(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2505057E0;
  if (*(_BYTE *)(a1 + 600))
  {
    sub_234174FAC(*(_QWORD *)(a1 + 88));
    *(_BYTE *)(a1 + 600) = 0;
  }
  return a1;
}

void sub_23413AE84(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2505057E0;
  if (*(_BYTE *)(a1 + 600))
  {
    sub_234174FAC(*(_QWORD *)(a1 + 88));
    *(_BYTE *)(a1 + 600) = 0;
  }
  JUMPOUT(0x23493E704);
}

uint64_t sub_23413AED4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  int v14;
  int v15;
  void *v17;

  v17 = a2;
  sub_234157348();
  *(_OWORD *)a4 = xmmword_250505828;
  *(_QWORD *)(a4 + 16) = 1195;
  v7 = (int *)sub_2341AB92C();
  v8 = *(_QWORD *)(a1 + 88);
  v9 = (int *)sub_2341AAC74();
  if (v9)
  {
    if (*(_BYTE *)(a1 + 600))
    {
      if (sub_2341A8B70((uint64_t)v7, 0) == 1)
      {
        if (sub_234175380(v8) == 1)
        {
          sub_234158050();
          if (v10)
          {
            v11 = v10;
            if (sub_23415BA34(v10, v8) == 1)
            {
              if (sub_2341A8BD4(v7, v11) == 1)
              {
                if (sub_2341A893C((uint64_t)v9, "O", 4097, "CSR", 0xFFFFFFFFFFFFFFFFLL, -1, 0) == 1)
                {
                  if (sub_2341A8BB8((uint64_t)v7, v9) == 1)
                  {
                    v12 = sub_234170BAC();
                    if ((int)sub_2341A8F2C((uint64_t *)v7, v11, (uint64_t)v12) <= 0)
                    {
                      *(_DWORD *)a4 = 172;
                      *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                      v14 = 1234;
                    }
                    else
                    {
                      v13 = sub_2341AB920(v7, 0);
                      if ((v13 & 0x80000000) != 0)
                      {
                        *(_DWORD *)a4 = 172;
                        *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                        v14 = 1237;
                      }
                      else
                      {
                        if (*a3 >= (unint64_t)v13)
                        {
                          *a3 = (int)sub_2341AB920(v7, &v17);
                          goto LABEL_28;
                        }
                        *(_DWORD *)a4 = 25;
                        *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                        v14 = 1239;
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)a4 = 172;
                    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                    v14 = 1231;
                  }
                }
                else
                {
                  *(_DWORD *)a4 = 172;
                  *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                  v14 = 1228;
                }
              }
              else
              {
                *(_DWORD *)a4 = 172;
                *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                v14 = 1222;
              }
            }
            else
            {
              *(_DWORD *)a4 = 172;
              *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
              v14 = 1219;
            }
            *(_DWORD *)(a4 + 16) = v14;
LABEL_28:
            sub_234158078(v11);
            goto LABEL_20;
          }
          *(_DWORD *)a4 = 172;
          *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          v15 = 1216;
        }
        else
        {
          *(_DWORD *)a4 = 172;
          *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          v15 = 1213;
        }
      }
      else
      {
        *(_DWORD *)a4 = 172;
        *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v15 = 1210;
      }
    }
    else
    {
      *(_DWORD *)a4 = 28;
      *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v15 = 1207;
    }
  }
  else
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v15 = 1205;
  }
  *(_DWORD *)(a4 + 16) = v15;
LABEL_20:
  sub_2341AAC80((uint64_t)v9);
  sub_2341AB938((uint64_t)v7);
  return sub_234139C18();
}

uint64_t sub_23413B1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a2;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_23413588C(a1, a2, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    sub_234157348();
    *(_OWORD *)a4 = xmmword_250505840;
    a4[2] = 1265;
    v19 = a1;
    v9 = sub_2341AB914(0, &v19, v5);
    if (!v9)
    {
      *(_DWORD *)a4 = 47;
      a4[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      *((_DWORD *)a4 + 4) = 1273;
      return sub_234139C18();
    }
    v10 = v9;
    if (sub_2341A479C(v9))
    {
      v11 = 1275;
LABEL_5:
      *(_DWORD *)a4 = 47;
      a4[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      *((_DWORD *)a4 + 4) = v11;
      sub_2341AB938(v10);
      return sub_234139C18();
    }
    v12 = sub_2341A47B4(v10);
    if (!v12)
    {
      v11 = 1278;
      goto LABEL_5;
    }
    v13 = v12;
    if (sub_2341A8E78(v10, v12) == 1)
    {
      v14 = sub_23415BAF8(v13);
      if (v14)
      {
        v15 = v14;
        sub_23413A8FC(v14, a3, (uint64_t)&v17);
        *(_OWORD *)a4 = v17;
        a4[2] = v18;
        sub_2341AB938(v10);
        sub_234174FAC(v15);
LABEL_15:
        sub_234158078(v13);
        return sub_234139C18();
      }
      v16 = 1284;
    }
    else
    {
      v16 = 1281;
    }
    *(_DWORD *)a4 = 47;
    a4[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *((_DWORD *)a4 + 4) = v16;
    sub_2341AB938(v10);
    goto LABEL_15;
  }
  return result;
}

void sub_23413B328(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  int v20;

  a1[45] = 0;
  a1[46] = 0;
  a1[47] = 0;
  v4 = sub_234173224(415);
  a1[45] = v4;
  if (v4)
  {
    v5 = sub_234173584((uint64_t)v4);
    a1[3] = v5;
    if (v5)
    {
      sub_234162D58();
      a1[46] = v6;
      if (v6)
      {
        v7 = sub_234170BAC();
        a1[47] = v7;
        if (v7)
        {
          v8 = sub_2341737FC(a1[45]);
          a1[1] = v8;
          if (v8)
          {
            v9 = sub_2341737FC(a1[45]);
            a1[2] = v9;
            if (v9)
            {
              v10 = sub_2341737FC(a1[45]);
              a1[4] = v10;
              if (v10)
              {
                v11 = sub_2341737FC(a1[45]);
                a1[5] = v11;
                if (v11)
                {
                  v12 = sub_2341737FC(a1[45]);
                  a1[6] = v12;
                  if (v12)
                  {
                    v13 = sub_2341737FC(a1[45]);
                    a1[8] = v13;
                    if (v13)
                    {
                      v14 = sub_2341737FC(a1[45]);
                      a1[7] = v14;
                      if (v14)
                      {
                        v15 = sub_234161F88();
                        a1[9] = v15;
                        if (v15)
                        {
                          v16 = sub_234161F88();
                          a1[10] = v16;
                          if (v16)
                          {
                            v17 = sub_234161F88();
                            a1[11] = v17;
                            if (v17)
                            {
                              v18 = sub_234161F88();
                              a1[13] = v18;
                              if (v18)
                              {
                                v19 = (void **)sub_234161F88();
                                a1[12] = v19;
                                if (v19)
                                {
                                  if (sub_234173598(a1[45], v19))
                                  {
                                    *(_DWORD *)a2 = 0;
                                    *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                                    v20 = 1389;
                                  }
                                  else
                                  {
                                    *(_DWORD *)a2 = 172;
                                    *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                                    v20 = 1387;
                                  }
                                }
                                else
                                {
                                  *(_DWORD *)a2 = 172;
                                  *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                                  v20 = 1384;
                                }
                              }
                              else
                              {
                                *(_DWORD *)a2 = 172;
                                *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                                v20 = 1383;
                              }
                            }
                            else
                            {
                              *(_DWORD *)a2 = 172;
                              *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                              v20 = 1382;
                            }
                          }
                          else
                          {
                            *(_DWORD *)a2 = 172;
                            *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                            v20 = 1381;
                          }
                        }
                        else
                        {
                          *(_DWORD *)a2 = 172;
                          *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                          v20 = 1380;
                        }
                      }
                      else
                      {
                        *(_DWORD *)a2 = 172;
                        *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                        v20 = 1379;
                      }
                    }
                    else
                    {
                      *(_DWORD *)a2 = 172;
                      *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                      v20 = 1378;
                    }
                  }
                  else
                  {
                    *(_DWORD *)a2 = 172;
                    *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                    v20 = 1377;
                  }
                }
                else
                {
                  *(_DWORD *)a2 = 172;
                  *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                  v20 = 1376;
                }
              }
              else
              {
                *(_DWORD *)a2 = 172;
                *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
                v20 = 1375;
              }
            }
            else
            {
              *(_DWORD *)a2 = 172;
              *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
              v20 = 1374;
            }
          }
          else
          {
            *(_DWORD *)a2 = 172;
            *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            v20 = 1373;
          }
        }
        else
        {
          *(_DWORD *)a2 = 172;
          *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          v20 = 1371;
        }
      }
      else
      {
        *(_DWORD *)a2 = 172;
        *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v20 = 1368;
      }
    }
    else
    {
      *(_DWORD *)a2 = 172;
      *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v20 = 1365;
    }
  }
  else
  {
    *(_DWORD *)a2 = 172;
    *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v20 = 1362;
  }
  *(_DWORD *)(a2 + 16) = v20;
}

uint64_t sub_23413B638(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (*(_BYTE *)(result + 113))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 360);
    if (v2)
      sub_234172FBC(v2);
    v3 = *(unint64_t ***)(v1 + 368);
    if (v3)
      sub_234162D80(v3);
    v4 = *(uint64_t **)(v1 + 8);
    if (v4)
      sub_2341738D4(v4);
    v5 = *(uint64_t **)(v1 + 16);
    if (v5)
      sub_2341738D4(v5);
    v6 = *(uint64_t **)(v1 + 32);
    if (v6)
      sub_2341738D4(v6);
    v7 = *(uint64_t **)(v1 + 40);
    if (v7)
      sub_2341738D4(v7);
    v8 = *(uint64_t **)(v1 + 48);
    if (v8)
      sub_2341738D4(v8);
    v9 = *(uint64_t **)(v1 + 64);
    if (v9)
      sub_2341738D4(v9);
    v10 = *(uint64_t **)(v1 + 56);
    if (v10)
      sub_2341738D4(v10);
    v11 = *(void **)(v1 + 72);
    if (v11)
      sub_234162010(v11);
    v12 = *(void **)(v1 + 80);
    if (v12)
      sub_234162010(v12);
    v13 = *(void **)(v1 + 88);
    if (v13)
      sub_234162010(v13);
    v14 = *(void **)(v1 + 104);
    if (v14)
      sub_234162010(v14);
    result = *(_QWORD *)(v1 + 96);
    if (result)
      result = sub_234162010((void *)result);
    *(_BYTE *)(v1 + 113) = 0;
  }
  return result;
}

void sub_23413B708(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((unint64_t)a5[1] < 0x20)
  {
    v11 = 1428;
    v9 = 25;
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    sub_234139894(a1, a2, a3, a4, *a5, 0x20uLL, (uint64_t)a6);
    if (*(_DWORD *)a6)
      return;
    v8 = sub_2341291A4(a5, 0, 0x20uLL);
    v9 = 0;
    *a5 = v8;
    a5[1] = v10;
    v11 = 1431;
  }
  *(_DWORD *)a6 = v9;
  a6[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *((_DWORD *)a6 + 4) = v11;
}

uint64_t sub_23413B790@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a5 == 32)
  {
    v11 = &v13;
    v12 = 32;
    a8[1] = 0;
    a8[2] = 0;
    *a8 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char **))(*(_QWORD *)result + 200))(result, a2, a3, a6, a7, &v11);
    if (*(_DWORD *)a8)
      return result;
    if (v12 == 32)
    {
      result = sub_23418E484(a4, v11, 32);
      if ((_DWORD)result)
      {
        *(_DWORD *)a8 = 172;
        a8[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v10 = 1444;
      }
      else
      {
        *(_DWORD *)a8 = 0;
        a8[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v10 = 1446;
      }
    }
    else
    {
      *(_DWORD *)a8 = 172;
      a8[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v10 = 1442;
    }
  }
  else
  {
    *(_DWORD *)a8 = 47;
    a8[1] = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v10 = 1437;
  }
  *((_DWORD *)a8 + 4) = v10;
  return result;
}

uint64_t sub_23413B8B4@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v9;
  int v10;

  sub_2341625C8(a2, a3, a4);
  result = sub_234162F7C(0, (uint64_t)a4, (uint64_t)a4, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 368));
  if ((_DWORD)result == 1)
    v9 = 0;
  else
    v9 = 172;
  if ((_DWORD)result == 1)
    v10 = 1460;
  else
    v10 = 1458;
  *(_DWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v10;
  return result;
}

void sub_23413B934(uint64_t a1@<X1>, char *a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v5;

  if (a3 >> 31)
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v5 = 1465;
  }
  else if (sub_234147388(a1, a2, a3) == (_DWORD)a3)
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v5 = 1469;
  }
  else
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v5 = 1467;
  }
  *(_DWORD *)(a4 + 16) = v5;
}

uint64_t sub_23413B9C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;
  int v6;

  result = sub_23416C300(a2, *(_QWORD *)(a1 + 96));
  if ((_DWORD)result == 1)
    v5 = 0;
  else
    v5 = 172;
  if ((_DWORD)result == 1)
    v6 = 1477;
  else
    v6 = 1475;
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_23413BA1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v7;
  int v8;

  result = sub_234164140(a2, a3, a4, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 368));
  if ((_DWORD)result == 1)
    v7 = 0;
  else
    v7 = 172;
  if ((_DWORD)result == 1)
    v8 = 1488;
  else
    v8 = 1486;
  *(_DWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

uint64_t sub_23413BA80@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v7;
  int v8;

  result = sub_23417571C(*(_QWORD *)(a1 + 360), a4, a2, a3, *(_QWORD *)(a1 + 368));
  if ((_DWORD)result == 1)
    v7 = 0;
  else
    v7 = 172;
  if ((_DWORD)result == 1)
    v8 = 1499;
  else
    v8 = 1497;
  *(_DWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

unint64_t sub_23413BAE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t result;
  int v8;
  int v9;

  result = sub_234177370(*(_QWORD *)(a1 + 360), a2, 4, a3, a4);
  if (result == a4)
    v8 = 0;
  else
    v8 = 172;
  if (result == a4)
    v9 = 1510;
  else
    v9 = 1508;
  *(_DWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v9;
  return result;
}

uint64_t sub_23413BB48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v7;
  int v8;

  result = sub_234174A6C(*(_QWORD *)(a1 + 360), a2, 0, a3, a4, *(_QWORD *)(a1 + 368));
  if ((_DWORD)result == 1)
    v7 = 0;
  else
    v7 = 172;
  if ((_DWORD)result == 1)
    v8 = 1521;
  else
    v8 = 1519;
  *(_DWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

void sub_23413BBA8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v14;
  int v15;
  __int128 v16;
  uint64_t v17;

  *(_OWORD *)a7 = xmmword_250505858;
  *(_QWORD *)(a7 + 16) = 1527;
  v14 = sub_2341737FC(a1[45]);
  if (!v14)
  {
    *(_DWORD *)a7 = 172;
    *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v15 = 1534;
LABEL_7:
    *(_DWORD *)(a7 + 16) = v15;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, v14, a3, a4);
  if (!*(_DWORD *)a7)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(*a1 + 120))(&v16, a1, a2, a5, a6);
    *(_OWORD *)a7 = v16;
    *(_QWORD *)(a7 + 16) = v17;
    if (!*(_DWORD *)a7)
    {
      if (sub_234174560(a1[45], a2, a2, v14) == 1)
      {
        *(_DWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v15 = 1543;
      }
      else
      {
        *(_DWORD *)a7 = 172;
        *(_QWORD *)(a7 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v15 = 1541;
      }
      goto LABEL_7;
    }
  }
LABEL_8:
  sub_2341738D4(v14);
}

uint64_t sub_23413BCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;
  int v6;

  result = sub_234174688(*(_QWORD *)(a1 + 360), a2);
  if ((_DWORD)result == 1)
    v5 = 0;
  else
    v5 = 172;
  if ((_DWORD)result == 1)
    v6 = 1556;
  else
    v6 = 1554;
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

void sub_23413BD4C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a1 + 16) = 1562;
}

void sub_23413BD68(uint64_t *a1@<X0>, char *a2@<X1>, unint64_t *a3@<X2>, unsigned __int8 *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v12;
  uint64_t *v13;
  unint64_t v14;
  int v15;

  *(_OWORD *)a6 = xmmword_250505870;
  *(_QWORD *)(a6 + 16) = 1567;
  v12 = sub_234161F88();
  if (v12)
  {
    v13 = sub_2341737FC(a1[45]);
    if (v13)
    {
      sub_2341625C8(a4, a5, v12);
      if (sub_234162F7C(0, (uint64_t)v12, (uint64_t)v12, a1[12], a1[46]) == 1)
      {
        if (sub_234174A6C(a1[45], v13, v12, 0, 0, a1[46]) == 1)
        {
          v14 = sub_234177370(a1[45], v13, 4, a2, *a3);
          *a3 = v14;
          if (v14)
          {
            *(_DWORD *)a6 = 0;
            *(_QWORD *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            v15 = 1592;
          }
          else
          {
            *(_DWORD *)a6 = 172;
            *(_QWORD *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            v15 = 1590;
          }
        }
        else
        {
          *(_DWORD *)a6 = 172;
          *(_QWORD *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
          v15 = 1586;
        }
      }
      else
      {
        *(_DWORD *)a6 = 172;
        *(_QWORD *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v15 = 1583;
      }
    }
    else
    {
      *(_DWORD *)a6 = 172;
      *(_QWORD *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v15 = 1578;
    }
  }
  else
  {
    v13 = 0;
    *(_DWORD *)a6 = 172;
    *(_QWORD *)(a6 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v15 = 1575;
  }
  *(_DWORD *)(a6 + 16) = v15;
  sub_234162010(v12);
  sub_2341738D4(v13);
}

BOOL sub_23413BF08@<W0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 result;
  int v5;
  int v6;

  result = sub_234173B1C(*(_QWORD *)(a1 + 360), a2);
  if (result)
    v5 = 0;
  else
    v5 = 172;
  if (result)
    v6 = 1607;
  else
    v6 = 1605;
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

void sub_23413BF5C(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v6;
  uint64_t **v9;
  uint64_t v10;
  int v11;
  const char *v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t *v16;
  unsigned __int16 *v17;
  _BOOL4 v18;
  int v19;
  char v20;
  uint64_t v21;
  const char *v22;
  int v23;
  int v24;
  uint64_t v25;
  _DWORD v26[2];
  const char *v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD v31[11];

  v31[10] = *MEMORY[0x24BDAC8D0];
  v6 = a1[1];
  v30 = *a1;
  if (v6 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1620;
    return;
  }
  v9 = (uint64_t **)sub_2341ABC18(0, &v30, v6);
  v10 = (uint64_t)v9;
  if (!v9)
  {
    v13 = 1623;
LABEL_65:
    v12 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v11 = 172;
    goto LABEL_66;
  }
  if (sub_2341A4DA8(v9) != 2)
  {
    v13 = 1625;
    goto LABEL_65;
  }
  if (!sub_2341A3248(v10))
  {
    v13 = 1626;
    goto LABEL_65;
  }
  if (sub_2341A4D6C(v10) != 794)
  {
    v13 = 1627;
    goto LABEL_65;
  }
  if (!sub_2341A3128(v10))
  {
    v13 = 1628;
    goto LABEL_65;
  }
  if (!sub_2341A4F9C(v10))
  {
    v13 = 1629;
    goto LABEL_65;
  }
  if (!sub_2341A5028(v10))
  {
    v13 = 1630;
    goto LABEL_65;
  }
  if (!sub_2341A323C(v10))
  {
    v13 = 1631;
    goto LABEL_65;
  }
  v31[0] = &off_250505A50;
  sub_23413C364(a1, (uint64_t)v31, (uint64_t)v26);
  v11 = v26[0];
  v3 = v26[1];
  v12 = v27;
  v13 = v28;
  v4 = v29;
  if (v26[0])
    goto LABEL_66;
  if ((int)sub_2341A35F4(v10) < 1)
    goto LABEL_64;
  v22 = v12;
  v23 = v13;
  v24 = 0;
  v14 = 0;
  v25 = 0;
  v15 = 0;
  v12 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  while (2)
  {
    v16 = sub_2341A3624(v10, v15);
    v17 = (unsigned __int16 *)sub_2341709C4((uint64_t)v16);
    v18 = sub_2341A5474((_BOOL8)v16);
    switch(sub_23418EBF8(v17))
    {
      case 'R':
        if (v18 | BYTE4(v25) & 1)
        {
          v13 = 1689;
        }
        else
        {
          if (*(_DWORD *)sub_2341A03F4(v10) == 20)
          {
            HIDWORD(v25) = 1;
            goto LABEL_35;
          }
          v13 = 1690;
        }
        goto LABEL_74;
      case 'S':
        if (!v18 | v25 & 1)
        {
          v13 = 1669;
        }
        else
        {
          v19 = sub_2341A0384(v10);
          if (a2 == 2)
          {
            if (v19 != 128)
            {
              v13 = 1676;
              goto LABEL_74;
            }
            goto LABEL_31;
          }
          if ((v19 & 0xFFFFFF7F) == 6)
          {
LABEL_31:
            LODWORD(v25) = 1;
            goto LABEL_35;
          }
          v13 = 1684;
        }
        goto LABEL_74;
      case 'W':
        if (!v18 | v14 & 1)
        {
          v13 = 1648;
LABEL_74:
          v11 = 172;
          goto LABEL_66;
        }
        v20 = sub_2341A0360(v10);
        v21 = sub_2341A04CC(v10);
        if (a2 == 1)
        {
          v13 = 1659;
          v11 = 172;
          if ((v20 & 0x10) == 0 || v21)
            goto LABEL_66;
          goto LABEL_34;
        }
        if (a2 == 2)
        {
          v13 = 1655;
          v11 = 172;
          if ((v20 & 0x10) != 0 || v21 != -1)
            goto LABEL_66;
LABEL_34:
          v14 = 1;
          goto LABEL_35;
        }
        if ((v20 & 0x10) == 0 || (v14 = 1, v21 != -1) && v21 != 1)
        {
          v13 = 1664;
          goto LABEL_74;
        }
LABEL_35:
        if ((int)++v15 < (int)sub_2341A35F4(v10))
          continue;
        if ((v14 & v25 & HIDWORD(v25) & 1) == 0)
        {
LABEL_64:
          v13 = 1703;
          goto LABEL_65;
        }
        if (((a2 - 3) < 0xFFFFFFFE) | v24 & 1)
          v11 = 0;
        else
          v11 = 172;
        if (!(((a2 - 3) < 0xFFFFFFFE) | v24 & 1))
          v3 = ((a2 - 3) < 0xFFFFFFFE) | v24;
        if (((a2 - 3) < 0xFFFFFFFE) | v24 & 1)
          v12 = v22;
        else
          v12 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        if (((a2 - 3) < 0xFFFFFFFE) | v24 & 1)
          v13 = v23;
        else
          v13 = 1708;
        if (!(((a2 - 3) < 0xFFFFFFFE) | v24 & 1))
          v4 = v23;
LABEL_66:
        sub_2341ABB70(v10);
        *(_DWORD *)a3 = v11;
        *(_DWORD *)(a3 + 4) = v3;
        *(_QWORD *)(a3 + 8) = v12;
        *(_DWORD *)(a3 + 16) = v13;
        *(_DWORD *)(a3 + 20) = v4;
        return;
      case 'Z':
        if (v18 | v24 & 1)
        {
          v13 = 1694;
        }
        else
        {
          if (*(_DWORD *)sub_2341A0424(v10) == 20)
          {
            v24 = 1;
            goto LABEL_35;
          }
          v13 = 1695;
        }
        goto LABEL_74;
      default:
        goto LABEL_35;
    }
  }
}

void sub_23413C364(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;

  v5 = *a1;
  v4 = a1[1];
  v16 = (void *)(a2 + 8);
  v17 = v5;
  if (v4 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1911;
    return;
  }
  v6 = sub_2341ABC18(0, &v17, v4);
  v7 = v6;
  if (!v6)
  {
    v11 = 0;
    v9 = 0;
    v15 = 1914;
    goto LABEL_17;
  }
  v8 = sub_2341A3438(v6);
  v9 = v8;
  if (!v8)
  {
    v11 = 0;
    v15 = 1917;
LABEL_23:
    v13 = 172;
    goto LABEL_24;
  }
  if (sub_2341414B8(v8) != 408)
  {
    v11 = 0;
    v15 = 1918;
    goto LABEL_23;
  }
  if (sub_234158398(v9) != 256)
  {
    v11 = 0;
    v15 = 1919;
    goto LABEL_23;
  }
  v10 = sub_23415BAF8(v9);
  v11 = v10;
  if (v10)
  {
    v12 = sub_2341536FC(v10);
    if (sub_234173704(v12) == 415)
    {
      v13 = 172;
      if (sub_234158F30(v9, 0) == 65)
      {
        v14 = sub_234158F30(v9, &v16);
        if (v14 == 65)
          v13 = 0;
        else
          v13 = 172;
        if (v14 == 65)
          v15 = 1901;
        else
          v15 = 1928;
      }
      else
      {
        v15 = 1926;
      }
      goto LABEL_24;
    }
    v15 = 1923;
    goto LABEL_23;
  }
  v15 = 1922;
LABEL_17:
  v13 = 11;
LABEL_24:
  sub_234174FAC(v11);
  sub_234158078(v9);
  sub_2341ABB70(v7);
  *(_DWORD *)a3 = v13;
  *(_DWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v15;
  *(_DWORD *)(a3 + 20) = 0;
}

void sub_23413C4EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int *a7@<X6>, uint64_t a8@<X8>)
{
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  const char *v22;
  size_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _QWORD v28[2];
  _DWORD v29[7];
  unsigned int v30;
  unsigned __int8 v31[8];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a3;
  v34 = a1;
  v32 = a5;
  *a7 = 600;
  if (!a1 || a2 <= 0)
  {
    *a7 = 101;
    *(_DWORD *)a8 = 47;
    *(_QWORD *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v25 = 1733;
LABEL_22:
    *(_DWORD *)(a8 + 16) = v25;
    return;
  }
  if (!a5 || a6 <= 0)
  {
    *a7 = 301;
    *(_DWORD *)a8 = 47;
    *(_QWORD *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v25 = 1735;
    goto LABEL_22;
  }
  v14 = sub_2341A373C();
  if (!v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    *a7 = 500;
    v24 = 1738;
LABEL_26:
    v26 = 11;
    goto LABEL_30;
  }
  v15 = sub_2341A6E9C();
  if (!v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    *a7 = 500;
    v24 = 1741;
    goto LABEL_26;
  }
  v16 = sub_2341953A0();
  if (!v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    *a7 = 500;
    v24 = 1744;
    goto LABEL_26;
  }
  v17 = sub_2341ABC18(0, &v34, a2);
  if (!v17)
  {
    v18 = 0;
    v19 = 0;
    *a7 = 100;
    v24 = 1750;
LABEL_29:
    v26 = 172;
    goto LABEL_30;
  }
  if (sub_2341A3AA4((uint64_t)v14, v17) != 1)
  {
    v18 = 0;
    v19 = 0;
    *a7 = 600;
    v24 = 1753;
    goto LABEL_29;
  }
  v18 = 0;
  if (a4 && a3)
  {
    if (a4 < 0)
    {
      v18 = 0;
      v19 = 0;
      *a7 = 201;
      v24 = 1758;
      v26 = 47;
      goto LABEL_30;
    }
    v18 = sub_2341ABC18(0, &v33, a4);
    if (!v18)
    {
      v19 = 0;
      *a7 = 200;
      v24 = 1761;
      goto LABEL_29;
    }
    if (sub_2341958E8(v16, v18) != 1)
    {
      v19 = 0;
      *a7 = 600;
      v24 = 1764;
      goto LABEL_29;
    }
  }
  v19 = sub_2341ABC18(0, &v32, a6);
  if (!v19)
  {
    *a7 = 300;
    v24 = 1771;
    goto LABEL_29;
  }
  sub_2341A6F38((uint64_t)v15, (uint64_t)v14, v19, (uint64_t)v16);
  if (v20 != 1)
  {
    *a7 = 600;
    v24 = 1774;
    goto LABEL_29;
  }
  v21 = (_QWORD *)sub_2341536F4((uint64_t)v15);
  v22 = *(const char **)(sub_2341A4F9C(v19) + 8);
  v30 = 0;
  if (v21)
  {
    v23 = strlen(v22);
    sub_233CAF22C(v28, (uint64_t)v22, v23);
    sub_234137D5C((uint64_t)v31, (uint64_t)v28, (uint64_t)v29);
    if (v29[0])
    {
      v24 = 1788;
    }
    else
    {
      if (sub_234138228(v31, &v30))
      {
        sub_2341A79DC(v21, v30);
        sub_2341A7904((uint64_t)v21, 0);
        if (sub_2341A5784((uint64_t)v15) == 1)
        {
          v26 = 0;
          *a7 = 0;
          v24 = 1802;
        }
        else
        {
          *a7 = 400;
          v24 = 1800;
          v26 = 87;
        }
        goto LABEL_30;
      }
      v24 = 1791;
    }
    v26 = 172;
    v27 = 300;
  }
  else
  {
    v24 = 1785;
    v26 = 11;
    v27 = 500;
  }
  *a7 = v27;
LABEL_30:
  sub_2341ABB70(v19);
  sub_2341ABB70(v18);
  sub_2341ABB70(v17);
  sub_234141344((uint64_t)v16);
  sub_2341A6EA4(v15);
  sub_2341A37C4((uint64_t)v14);
  *(_DWORD *)a8 = v26;
  *(_DWORD *)(a8 + 4) = 0;
  *(_QWORD *)(a8 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a8 + 16) = v24;
  *(_DWORD *)(a8 + 20) = 0;
}

void sub_23413C88C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int *v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *a1;
  v4 = a1[1];
  v18 = *a2;
  v19 = v5;
  v17 = 0;
  if (v4 < 1 || a2[1] <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1832;
    return;
  }
  v7 = sub_2341ABC18(0, &v19, v4);
  if (!v7)
  {
    v8 = 0;
    v12 = 1835;
LABEL_16:
    v13 = 11;
    goto LABEL_17;
  }
  v8 = sub_2341ABC18(0, &v18, a2[1]);
  if (!v8)
  {
    v12 = 1838;
    goto LABEL_16;
  }
  v9 = (int *)sub_2341A4F9C(v7);
  v10 = (int *)sub_2341A4F9C(v8);
  v11 = sub_2341A5028(v8);
  v12 = 1843;
  v13 = 172;
  if (v9)
  {
    if (v10)
    {
      v14 = (int *)v11;
      if (v11)
      {
        if (sub_234140804((_DWORD *)&v17 + 1, &v17, v10, v9) == 1)
        {
          if (SHIDWORD(v17) > 0 || (int)v17 > 0 || ((v17 | HIDWORD(v17)) & 0x80000000) == 0)
          {
            v13 = 78;
            if (sub_234140804((_DWORD *)&v17 + 1, &v17, v14, v9) == 1)
            {
              v15 = SHIDWORD(v17) < 1;
              v16 = (int)v17 < 1;
              if (v15 && v16)
                v13 = 0;
              else
                v13 = 78;
              if (v15 && v16)
                v12 = 1818;
              else
                v12 = 1857;
            }
            else
            {
              v12 = 1853;
            }
            goto LABEL_17;
          }
          v12 = 1850;
        }
        else
        {
          v12 = 1846;
        }
        v13 = 78;
      }
    }
  }
LABEL_17:
  sub_2341ABB70(v7);
  sub_2341ABB70(v8);
  *(_DWORD *)a3 = v13;
  *(_DWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = 0;
}

void sub_23413CA50(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int *v9;
  int v10;
  uint64_t v11;

  v3 = a1[1];
  v11 = *a1;
  if (v3 <= 0)
  {
    *(_DWORD *)a2 = 47;
    *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a2 + 16) = 1874;
    return;
  }
  v4 = sub_2341ABC18(0, &v11, v3);
  v5 = v4;
  if (!v4)
  {
    v7 = 1877;
    v8 = 11;
    goto LABEL_18;
  }
  v6 = (int *)sub_2341A4F9C(v4);
  if (!v6)
  {
    v7 = 1880;
LABEL_17:
    v8 = 172;
    goto LABEL_18;
  }
  if (sub_2341A6B9C(v6) == -1)
  {
    v9 = (int *)sub_2341A5028(v5);
    if (v9)
    {
      v10 = sub_2341A6B9C(v9);
      if (v10 == 1)
        v8 = 0;
      else
        v8 = 78;
      if (v10 == 1)
        v7 = 1868;
      else
        v7 = 1891;
      goto LABEL_18;
    }
    v7 = 1887;
    goto LABEL_17;
  }
  v7 = 1884;
  v8 = 78;
LABEL_18:
  sub_2341ABB70(v5);
  *(_DWORD *)a2 = v8;
  *(_DWORD *)(a2 + 4) = 0;
  *(_QWORD *)(a2 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = 0;
}

void sub_23413CB48(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_23413CB58(1, a1, a2, a3);
}

void sub_23413CB58(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  int v14;
  int v15;
  uint64_t v16;

  v6 = a2[1];
  v16 = *a2;
  if (v6 <= 0)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = 1948;
    return;
  }
  v8 = sub_2341ABC18(0, &v16, v6);
  v9 = v8;
  if (v8)
  {
    if (a1)
    {
      v10 = (int *)sub_2341A03F4(v8);
      if (v10)
        goto LABEL_5;
    }
    else
    {
      v10 = (int *)sub_2341A0424(v8);
      if (v10)
      {
LABEL_5:
        if (*v10 < 0)
        {
          v15 = 1955;
          v14 = 47;
        }
        else if (*v10 == 20)
        {
          if ((unint64_t)a3[1] < 0x14)
          {
            v15 = 1957;
            v14 = 25;
          }
          else
          {
            v11 = *a3;
            v12 = (__int128 *)*((_QWORD *)v10 + 1);
            v13 = *v12;
            *(_DWORD *)(v11 + 16) = *((_DWORD *)v12 + 4);
            *(_OWORD *)v11 = v13;
            sub_233BF7588((uint64_t)a3, *v10);
            v14 = 0;
            v15 = 1942;
          }
        }
        else
        {
          v15 = 1956;
          v14 = 157;
        }
        goto LABEL_16;
      }
    }
    v15 = 1954;
    v14 = 216;
  }
  else
  {
    v15 = 1951;
    v14 = 11;
  }
LABEL_16:
  sub_2341ABB70(v9);
  *(_DWORD *)a4 = v14;
  *(_DWORD *)(a4 + 4) = 0;
  *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a4 + 16) = v15;
  *(_DWORD *)(a4 + 20) = 0;
}

void sub_23413CC88(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_23413CB58(0, a1, a2, a3);
}

void sub_23413CC98(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  int v13;
  const char *v14;
  unint64_t *v15;
  unint64_t *v16;
  unsigned int *v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  size_t v21;
  void *__src;
  size_t __n;
  uint64_t v24;

  v4 = a1[1];
  v24 = *a1;
  if (v4 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 1995;
    return;
  }
  v6 = sub_2341ABC18(0, &v24, v4);
  v7 = v6;
  if (!v6)
  {
    v9 = 0;
    v12 = 1998;
    v13 = 11;
LABEL_12:
    v14 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    goto LABEL_16;
  }
  v8 = sub_2341A3660(v6, 103, 0, 0);
  v9 = (unint64_t *)v8;
  if (!v8)
  {
    v12 = 2006;
    v13 = 216;
    goto LABEL_12;
  }
  if (sub_2341709C4(v8) == 1)
  {
    v10 = sub_2341953E8(v9, 0);
    if (v10)
    {
      v11 = *v10;
      if (*v10 && !*(_DWORD *)v11)
      {
        v15 = *(unint64_t **)(v11 + 8);
        if (sub_2341709C4((uint64_t)v15) == 1)
        {
          v16 = sub_2341953E8(v15, 0);
          if (*(_DWORD *)v16 == 6)
          {
            v17 = (unsigned int *)sub_23419D9D0((uint64_t)v16, 0);
            v18 = (const char *)sub_2341414C0((uint64_t)v17);
            if ((sub_2341414B0(v17) & 0x80000000) != 0)
            {
              v12 = 2046;
            }
            else
            {
              v19 = sub_2341414B0(v17);
              if (v19 >= 8)
              {
                v20 = (int)v19;
                if (!strncmp(v18, "http://", 7uLL) || v20 >= 9 && !strncmp(v18, "https://", 8uLL))
                {
                  sub_233CAF22C(&__src, (uint64_t)v18, v20);
                  v21 = __n;
                  if (*(_QWORD *)(a2 + 8) >= __n)
                  {
                    memcpy(*(void **)a2, __src, __n);
                    sub_234138204(a2, v21);
                    v13 = 0;
                    v12 = 390;
                    v14 = "src/lib/support/Span.h";
                  }
                  else
                  {
                    v12 = 385;
                    v14 = "src/lib/support/Span.h";
                    v13 = 25;
                  }
                  goto LABEL_16;
                }
              }
              v12 = 2052;
            }
          }
          else
          {
            v12 = 2042;
          }
        }
        else
        {
          v12 = 2028;
        }
      }
      else
      {
        v12 = 2011;
      }
    }
    else
    {
      v12 = 2010;
    }
  }
  else
  {
    v12 = 2007;
  }
  v14 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  v13 = 216;
LABEL_16:
  sub_234195434(v9, (void (*)(uint64_t))sub_23413DA2C, (uint64_t)sub_23419CA5C);
  sub_2341ABB70(v7);
  *(_DWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 16) = v12;
}

void sub_23413CEEC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  size_t v15;
  int v16;
  const char *v17;
  int v18;
  void *__src;
  size_t __n;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *a1;
  v4 = a1[1];
  v22 = 0;
  v23 = v5;
  v21 = 0;
  if (v4 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 2077;
    return;
  }
  v7 = sub_2341ABC18(0, &v23, v4);
  v8 = v7;
  if (!v7)
  {
    v10 = 0;
    v16 = 2080;
    v18 = 11;
LABEL_15:
    v17 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    goto LABEL_22;
  }
  v9 = sub_2341A3660(v7, 103, 0, 0);
  v10 = (unint64_t *)v9;
  if (!v9)
  {
    v16 = 2088;
    v18 = 216;
    goto LABEL_15;
  }
  if (sub_2341709C4(v9) == 1)
  {
    v11 = sub_2341953E8(v10, 0);
    if (v11)
    {
      v12 = (unint64_t *)v11[2];
      if (sub_2341709C4((uint64_t)v12) == 1)
      {
        v13 = sub_2341953E8(v12, 0);
        if (*(_DWORD *)v13 == 4)
        {
          v14 = sub_23419D9D0((uint64_t)v13, 0);
          if (v14)
          {
            if (sub_2341AACE4(v14, &v22, &v21) == 1)
            {
              sub_233BF7114(&__src, v22, v21);
              v15 = __n;
              if (*(_QWORD *)(a2 + 8) >= __n)
              {
                memcpy(*(void **)a2, __src, __n);
                sub_233BF7588(a2, v15);
                v18 = 0;
                v16 = 380;
                v17 = "src/lib/support/Span.h";
              }
              else
              {
                v16 = 375;
                v17 = "src/lib/support/Span.h";
                v18 = 25;
              }
            }
            else
            {
              v16 = 2125;
              v17 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
              v18 = 172;
            }
            goto LABEL_22;
          }
          v16 = 2121;
        }
        else
        {
          v16 = 2118;
        }
      }
      else
      {
        v16 = 2104;
      }
    }
    else
    {
      v16 = 2092;
    }
  }
  else
  {
    v16 = 2089;
  }
  v17 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  v18 = 216;
LABEL_22:
  sub_234195434(v10, (void (*)(uint64_t))sub_23413DA2C, (uint64_t)sub_23419CA5C);
  sub_2341ABB70(v8);
  *(_DWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v17;
  *(_DWORD *)(a3 + 16) = v16;
}

void sub_23413D0E8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  const void *v9;
  size_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v4 = a1[1];
  v13 = *a1;
  if (v4 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 2144;
    return;
  }
  v6 = sub_2341ABC18(0, &v13, v4);
  v7 = v6;
  if (v6)
  {
    v8 = (unsigned int *)sub_2341A3248(v6);
    if (v8)
    {
      v9 = (const void *)*((_QWORD *)v8 + 1);
      if (v9)
      {
        v10 = *v8;
        if ((v10 & 0x80000000) == 0)
        {
          if (*(_QWORD *)(a2 + 8) >= v10)
          {
            memcpy(*(void **)a2, v9, v10);
            sub_233BF7588(a2, v10);
            v12 = 0;
            v11 = 2137;
          }
          else
          {
            v11 = 2155;
            v12 = 25;
          }
          goto LABEL_14;
        }
        v11 = 2152;
      }
      else
      {
        v11 = 2151;
      }
    }
    else
    {
      v11 = 2150;
    }
    v12 = 172;
  }
  else
  {
    v11 = 2147;
    v12 = 11;
  }
LABEL_14:
  sub_2341ABB70(v7);
  *(_DWORD *)a3 = v12;
  *(_DWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = 0;
}

void sub_23413D1F4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_23413D204(1, a1, a2, a3);
}

void sub_23413D204(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  int v13;
  const char *v14;
  int v15;
  void *__src;
  size_t __n;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *a2;
  v6 = a2[1];
  v19 = 0;
  v20 = v7;
  v18 = 0;
  if (v6 <= 0)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a4 + 16) = 2178;
    return;
  }
  v9 = sub_2341ABC18(0, &v20, v6);
  v10 = v9;
  if (v9)
  {
    if (a1)
    {
      v11 = sub_2341A323C(v9);
      if (v11)
      {
LABEL_5:
        if (sub_2341AACE4(v11, &v19, &v18) == 1)
        {
          sub_233BF7114(&__src, v19, v18);
          v12 = __n;
          if (*(_QWORD *)(a3 + 8) >= __n)
          {
            memcpy(*(void **)a3, __src, __n);
            sub_233BF7588(a3, v12);
            v15 = 0;
            v13 = 380;
            v14 = "src/lib/support/Span.h";
          }
          else
          {
            v13 = 375;
            v14 = "src/lib/support/Span.h";
            v15 = 25;
          }
          goto LABEL_14;
        }
        v13 = 2194;
        goto LABEL_13;
      }
    }
    else
    {
      v11 = sub_2341A3128(v9);
      if (v11)
        goto LABEL_5;
    }
    v13 = 2191;
LABEL_13:
    v14 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v15 = 172;
    goto LABEL_14;
  }
  v13 = 2181;
  v14 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  v15 = 11;
LABEL_14:
  sub_2341ABB70(v10);
  *(_DWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v14;
  *(_DWORD *)(a4 + 16) = v13;
}

void sub_23413D354(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_23413D204(0, a1, a2, a3);
}

void sub_23413D364(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char **v11;
  char **v12;
  char **v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t **v19;
  unsigned int v20;
  const char *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  _DWORD v38[2];
  const char *v39;
  uint64_t v40;
  unsigned __int8 v41[2];
  __int16 v42;
  unsigned __int8 v43;
  __int16 v44;
  uint64_t v45;

  v11 = sub_23418EF98("2.5.4.3", 1);
  v12 = sub_23418EF98("1.3.6.1.4.1.37244.2.1", 1);
  v13 = sub_23418EF98("1.3.6.1.4.1.37244.2.2", 1);
  v14 = *(_QWORD *)(a1 + 8);
  v45 = *(_QWORD *)a1;
  v41[0] = 0;
  v43 = 0;
  if (v14 <= 0)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    *(_DWORD *)(a3 + 16) = 2227;
    return;
  }
  v15 = (_QWORD **)v13;
  v16 = sub_2341ABC18(0, &v45, v14);
  v17 = v16;
  if (!v16)
  {
    LODWORD(v3) = 2230;
    v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v32 = 11;
    goto LABEL_38;
  }
  v36 = (uint64_t)v15;
  v18 = (uint64_t *)sub_2341A323C(v16);
  if (!v18)
  {
    LODWORD(v3) = 2233;
    v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v32 = 172;
    goto LABEL_38;
  }
  v19 = (unint64_t **)v18;
  v35 = (uint64_t)v12;
  if ((int)sub_2341A84A8(v18) < 1)
  {
    LODWORD(a1) = 0;
    v22 = 2220;
    v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
LABEL_24:
    v12 = (char **)v35;
    v15 = (_QWORD **)v36;
    if (*a2 | a2[4])
      goto LABEL_29;
    v33 = v41[0];
    *a2 = v41[0];
    if (v33)
      *((_WORD *)a2 + 1) = v42;
    v34 = v43;
    a2[4] = v43;
    if (!v34)
    {
LABEL_29:
      v32 = 0;
    }
    else
    {
      v32 = 0;
      *((_WORD *)a2 + 3) = v44;
    }
    v3 = v22;
    goto LABEL_38;
  }
  v20 = 0;
  LODWORD(a1) = 0;
  v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
  v22 = 2220;
  LODWORD(v3) = 2238;
  LODWORD(v4) = 2240;
  LODWORD(v5) = 2259;
  LODWORD(v6) = 2261;
  LODWORD(v7) = 2263;
  while (1)
  {
    v23 = sub_2341A8458(v19, v20);
    if (!v23)
    {
      v32 = 172;
      v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      goto LABEL_37;
    }
    v24 = (uint64_t)v23;
    v25 = sub_2341709C4((uint64_t)v23);
    if (!v25)
    {
      v32 = 172;
      v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v3 = v4;
      goto LABEL_37;
    }
    v26 = v25;
    if (sub_23418EB9C(v25, (uint64_t)v11))
    {
      if (sub_23418EB9C(v26, v35))
      {
        if (sub_23418EB9C(v26, v36))
          goto LABEL_18;
        v27 = 3;
      }
      else
      {
        v27 = 2;
      }
    }
    else
    {
      v27 = 1;
    }
    v28 = sub_2340DE85C(v24);
    if (!v28)
    {
      v32 = 172;
      v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v3 = v5;
      goto LABEL_37;
    }
    a1 = v28;
    v29 = sub_2341414C0(v28);
    if (!v29)
    {
      v32 = 172;
      v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v3 = v6;
      goto LABEL_37;
    }
    v30 = v29;
    v31 = sub_2341414B0((unsigned int *)a1);
    if ((v31 & 0x80000000) != 0)
    {
      v32 = 172;
      v21 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v3 = v7;
      goto LABEL_37;
    }
    sub_233BF7114(v37, v30, v31);
    sub_234134C3C(v27, v37, (uint64_t)a2, v41, (uint64_t)v38);
    v32 = v38[0];
    LODWORD(a1) = v38[1];
    v21 = v39;
    v22 = v40;
    if (v38[0])
      break;
LABEL_18:
    if ((int)++v20 >= (int)sub_2341A84A8((uint64_t *)v19))
      goto LABEL_24;
  }
  v3 = v40;
LABEL_37:
  v12 = (char **)v35;
  v15 = (_QWORD **)v36;
LABEL_38:
  sub_23413F6D0((_QWORD **)v11);
  sub_23413F6D0((_QWORD **)v12);
  sub_23413F6D0(v15);
  sub_2341ABB70(v17);
  *(_DWORD *)a3 = v32;
  *(_DWORD *)(a3 + 4) = a1;
  *(_QWORD *)(a3 + 8) = v21;
  *(_QWORD *)(a3 + 16) = v3;
}

void sub_23413D6B4(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *__s2;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  void *__s1;
  size_t __n;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v12 = *a1;
  v11 = a1[1];
  v34 = 20;
  __s1 = &v39;
  __n = 20;
  v37 = v12;
  v33 = &v38;
  if (!v11)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v27 = 2300;
LABEL_20:
    *(_DWORD *)(a5 + 16) = v27;
    return;
  }
  v14 = a2;
  *a4 = *(_OWORD *)a1;
  if (!a2 || (v16 = a3) == 0)
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
    v27 = 2304;
    goto LABEL_20;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  sub_23413CB58(1, a1, (uint64_t *)&__s1, a5);
  if (!*(_DWORD *)a5)
  {
    v17 = sub_2341ABC18(0, &v37, a1[1]);
    v18 = v17;
    if (v17)
    {
      v19 = sub_2341A323C(v17);
      if (v19)
      {
        v20 = v19;
        LODWORD(v7) = 2319;
        LODWORD(v8) = 2324;
        LODWORD(v9) = 2327;
        while (1)
        {
          v32 = *v14;
          v21 = *((_QWORD *)&v32 + 1);
          v31 = v32;
          if (!*((_QWORD *)&v32 + 1))
          {
            v22 = 47;
            v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            goto LABEL_30;
          }
          sub_23413CB58(1, (uint64_t *)&v32, (uint64_t *)&v33, (uint64_t)&__s2);
          v22 = (int)__s2;
          v5 = HIDWORD(__s2);
          v23 = v29;
          v6 = v30;
          if ((_DWORD)__s2)
          {
            v21 = 0;
            goto LABEL_29;
          }
          v24 = sub_2341ABC18(0, &v31, v21);
          v21 = v24;
          if (!v24)
          {
            v22 = 11;
            v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            v7 = v8;
            goto LABEL_30;
          }
          v25 = sub_2341A323C(v24);
          if (!v25)
          {
            v22 = 172;
            v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
            v7 = v9;
            goto LABEL_30;
          }
          v26 = v25;
          sub_233BF7114(&__s2, (uint64_t)v33, v34);
          if ((const char *)__n == v29 && (!__n || !memcmp(__s1, __s2, __n)) && !sub_2341A2FF4(v20, v26))
            break;
          sub_2341ABB70(v21);
          ++v14;
          if (!--v16)
          {
            v22 = 0;
            v21 = 0;
            goto LABEL_31;
          }
        }
        v22 = 0;
        *a4 = v32;
LABEL_29:
        v7 = v6;
LABEL_30:
        v6 = v7;
      }
      else
      {
        v21 = 0;
        LODWORD(v6) = 2312;
        v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
        v22 = 172;
      }
    }
    else
    {
      v21 = 0;
      LODWORD(v6) = 2309;
      v23 = "src/crypto/CHIPCryptoPALOpenSSL.cpp";
      v22 = 11;
    }
LABEL_31:
    sub_2341ABB70(v18);
    sub_2341ABB70(v21);
    *(_DWORD *)a5 = v22;
    *(_DWORD *)(a5 + 4) = v5;
    *(_QWORD *)(a5 + 8) = v23;
    *(_QWORD *)(a5 + 16) = v6;
  }
}

_QWORD *sub_23413D978(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250505898;
  v2 = a1 + 30;
  sub_23413B638((uint64_t)a1);
  sub_23418E400(v2, 0x78uLL);
  return a1;
}

void sub_23413D9B8(_QWORD *a1)
{
  void *v1;

  *a1 = &off_250505898;
  v1 = a1 + 30;
  sub_23413B638((uint64_t)a1);
  sub_23418E400(v1, 0x78uLL);
  JUMPOUT(0x23493E704);
}

void sub_23413DA08()
{
  JUMPOUT(0x23493E704);
}

BOOL sub_23413DA1C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) == 4;
}

uint64_t sub_23413DA2C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23413DA64(unsigned int *a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int i;

  result = *a1;
  v4 = *((_QWORD *)a1 + 2);
  if ((v4 & 8) != 0)
  {
    LOBYTE(i) = v4 & 7;
    if (!(_DWORD)result)
      LOBYTE(i) = 0;
  }
  else
  {
    do
    {
      v5 = result;
      if ((int)result < 1)
      {
        LOBYTE(i) = 0;
        goto LABEL_12;
      }
      --result;
      v6 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v5 - 1);
    }
    while (!*(_BYTE *)(*((_QWORD *)a1 + 1) + v5 - 1));
    for (i = 0; i != 7; ++i)
    {
      if (((v6 >> i) & 1) != 0)
        break;
    }
LABEL_12:
    result = v5;
  }
  *a2 = i;
  return result;
}

uint64_t sub_23413DAD0(unsigned int *a1, _QWORD *a2)
{
  int v3;
  uint64_t result;
  char v5;

  v5 = 0;
  v3 = sub_23413DA64(a1, &v5);
  result = 0;
  if (!v5)
  {
    *a2 = v3;
    return 1;
  }
  return result;
}

uint64_t sub_23413DB1C(uint64_t a1, _BYTE **a2)
{
  int v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  char v8;
  char *v9;
  char v11;

  if (!a1)
    return 0;
  v11 = 0;
  v4 = sub_23413DA64((unsigned int *)a1, &v11);
  if (v4 == 0x7FFFFFFF)
  {
    sub_2341579B4(12, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_bitstr.c", 120);
    return 0;
  }
  v6 = v4;
  v5 = (v4 + 1);
  if (a2)
  {
    v7 = *a2;
    v8 = v11;
    *v7 = v11;
    v9 = v7 + 1;
    if (v4)
    {
      memcpy(v9, *(const void **)(a1 + 8), v4);
      if (v6 >= 1)
        v9[v6 - 1] &= -1 << v8;
    }
    *a2 = &v9[v6];
  }
  return v5;
}

_QWORD *sub_23413DBF4(_QWORD *a1, unsigned __int8 **a2, unint64_t a3)
{
  int v4;
  __int16 v5;
  _QWORD *v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  int v13;
  __int16 v14;
  _QWORD *v15;
  _QWORD *v16;

  if ((uint64_t)a3 <= 0)
  {
    v4 = 174;
    v5 = 147;
    goto LABEL_5;
  }
  if (a3 >> 31)
  {
    v4 = 173;
    v5 = 152;
LABEL_5:
    sub_2341579B4(12, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_bitstr.c", v5);
    return 0;
  }
  if (a1 && (v6 = (_QWORD *)*a1) != 0 || (v6 = sub_23414468C()) != 0)
  {
    v10 = *a2;
    v12 = (char *)(*a2 + 1);
    v11 = **a2;
    if (v11 >= 8)
    {
      v13 = 141;
      v14 = 168;
LABEL_17:
      sub_2341579B4(12, 0, v13, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_bitstr.c", v14);
LABEL_18:
      if (!a1 || (_QWORD *)*a1 != v6)
        sub_234144630((uint64_t)v6);
      return 0;
    }
    if (**a2)
    {
      if (a3 < 2 || (v12[a3 - 2] & ~(-1 << v11)) != 0)
      {
        v13 = 194;
        v14 = 175;
        goto LABEL_17;
      }
      v6[2] = v11 | v6[2] & 0xFFFFFFFFFFFFFFF0 | 8;
    }
    else
    {
      v6[2] = v11 | v6[2] & 0xFFFFFFFFFFFFFFF0 | 8;
      if (a3 < 2)
      {
        v15 = 0;
LABEL_26:
        *(_DWORD *)v6 = a3 - 1;
        sub_23418E3C4((_QWORD *)v6[1]);
        v6[1] = v15;
        *((_DWORD *)v6 + 1) = 3;
        if (a1)
          *a1 = v6;
        *a2 = (unsigned __int8 *)v12;
        return v6;
      }
    }
    v16 = sub_23418E58C(v12, a3 - 1);
    if (!v16)
      goto LABEL_18;
    v15 = v16;
    v12 = &v10[a3];
    goto LABEL_26;
  }
  return v6;
}

uint64_t sub_23413DDA0(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;
  char v5;
  int *v6;
  int v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a2 + 7;
  if (a2 >= 0)
    v3 = a2;
  v4 = 1 << (~(_BYTE)a2 & 7);
  if (a3)
    v5 = 1 << (~(_BYTE)a2 & 7);
  else
    v5 = 0;
  if (result)
  {
    v6 = (int *)result;
    v7 = v3 >> 3;
    *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFF0;
    if (*(_DWORD *)result <= v3 >> 3 || (v8 = *(_QWORD **)(result + 8)) == 0)
    {
      if (!a3)
        return 1;
      v9 = v7 + 1;
      v10 = *(_QWORD **)(result + 8);
      if (v10)
        v11 = sub_23418E40C(v10, v7 + 1);
      else
        v11 = sub_23418E2E4(v9);
      v8 = v11;
      if (!v11)
        return 0;
      v12 = *v6;
      v13 = (v9 - v12);
      if ((int)v13 >= 1)
        bzero((char *)v11 + v12, v13);
      *((_QWORD *)v6 + 1) = v8;
      *v6 = v9;
    }
    *((_BYTE *)v8 + v7) = *((_BYTE *)v8 + v7) & ~(_BYTE)v4 | v5;
    v14 = *v6;
    if ((int)v14 >= 1)
    {
      v15 = *((_QWORD *)v6 + 1);
      do
      {
        v16 = v14 - 1;
        if (*(_BYTE *)(v15 + (v14 - 1)))
          break;
        *v6 = --v14;
      }
      while ((unint64_t)(v16 + 1) > 1);
    }
    return 1;
  }
  return result;
}

uint64_t sub_23413DEB8(uint64_t result, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  v2 = a2 + 7;
  if (a2 >= 0)
    v2 = a2;
  if (result)
  {
    v3 = v2 >> 3;
    if (*(_DWORD *)result > v3 && (v4 = *(_QWORD *)(result + 8)) != 0)
      return (*(unsigned __int8 *)(v4 + v3) >> (~(_BYTE)a2 & 7)) & 1;
    else
      return 0;
  }
  return result;
}

BOOL sub_23413DF00(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  int v7;

  if (!a1)
    return 1;
  v3 = *((_QWORD *)a1 + 1);
  if (!v3)
    return 1;
  v4 = *a1;
  if ((int)v4 < 1)
    return 1;
  v5 = 0;
  do
  {
    if ((uint64_t)v5 >= a3)
      v6 = -1;
    else
      v6 = ~*(_BYTE *)(a2 + v5);
    v7 = (*(_BYTE *)(v3 + v5++) & v6);
  }
  while (v5 < v4 && !v7);
  return v7 == 0;
}

uint64_t sub_23413DF64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v7;
  uint64_t v8;
  void *v9;

  v8 = 0;
  v9 = 0;
  if (!sub_2341453B4(a2, (uint64_t *)&v9, &v8, 0x7FFFFFFFuLL))
    return 0;
  v7 = v9;
  v5 = sub_234141DAC(a3, (uint64_t *)&v7, v8, a1);
  sub_23418E3C4(v9);
  return v5;
}

uint64_t sub_23413DFDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = sub_234145994();
  if (v5)
  {
    v6 = (uint64_t)v5;
    v7 = sub_23413DF64(a1, (uint64_t)v5, a3);
    sub_234144C64(v6);
    return v7;
  }
  else
  {
    sub_2341579B4(12, 0, 7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_d2i_fp.c", 83);
    return 0;
  }
}

uint64_t sub_23413E05C(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  void *v6;
  void *v7;

  v7 = 0;
  if (!a2)
    return 0;
  v3 = sub_234143140(a2, &v7, a1);
  if (!v7)
    return 0;
  v6 = v7;
  v4 = sub_234141DAC(0, (uint64_t *)&v6, v3, a1);
  sub_23418E3C4(v7);
  return v4;
}

BOOL sub_23413E0D4(int *a1, int *a2)
{
  uint64_t v2;
  __int128 v4;

  if (a2[1] != 24)
    return 0;
  v2 = *a2;
  *(_QWORD *)&v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)&v4 + 1) = v2;
  return sub_234149E0C(&v4, a1, 0) != 0;
}

BOOL sub_23413E128(int *a1)
{
  return sub_23413E0D4(0, a1);
}

uint64_t sub_23413E134(uint64_t a1, char *__s)
{
  size_t v4;
  uint64_t result;
  __int128 v6;

  v4 = strlen(__s);
  *(_QWORD *)&v6 = __s;
  *((_QWORD *)&v6 + 1) = v4;
  result = sub_234149E0C(&v6, 0, 0);
  if ((_DWORD)result)
  {
    if (a1)
    {
      result = sub_2341411A4(a1, __s, v4);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 4) = 24;
    }
    return 1;
  }
  return result;
}

_QWORD *sub_23413E1AC(_QWORD *a1, uint64_t a2)
{
  return sub_23413E1B8(a1, a2, 0, 0);
}

_QWORD *sub_23413E1B8(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  size_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char __str[16];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  if (!sub_2341419C0(a2, (uint64_t)&v10)
    || (a3 || a4) && !sub_234141C5C((int *)&v10, a3, a4))
  {
    return 0;
  }
  if ((DWORD1(v11) - 8100) <= 0xFFFFD8EF)
  {
    sub_2341579B4(12, 0, 138, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_gentm.c", 122);
    return 0;
  }
  if (snprintf(__str, 0x10uLL, "%04d%02d%02d%02d%02d%02dZ", DWORD1(v11) + 1900, (_DWORD)v11 + 1, HIDWORD(v10), DWORD2(v10), DWORD1(v10), (_DWORD)v10) != 15)abort();
  v7 = a1;
  if (a1 || (v7 = sub_23414474C()) != 0)
  {
    v9 = strlen(__str);
    if (sub_2341411A4((uint64_t)v7, __str, v9))
    {
      *((_DWORD *)v7 + 1) = 24;
      return v7;
    }
    if (!a1)
      sub_234144630((uint64_t)v7);
    return 0;
  }
  return v7;
}

uint64_t sub_23413E320(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = sub_234145994();
  if (v5)
  {
    v6 = (uint64_t)v5;
    v7 = sub_23413E3A0(a1, (uint64_t)v5, a3);
    sub_234144C64(v6);
    return v7;
  }
  else
  {
    sub_2341579B4(12, 0, 7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_i2d_fp.c", 67);
    return 0;
  }
}

uint64_t sub_23413E3A0(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  uint64_t v5;
  void *v7;

  v7 = 0;
  v4 = sub_234143140(a3, &v7, a1);
  if (!v7)
    return 0;
  v5 = sub_234144F0C(a2, (uint64_t)v7, v4);
  sub_23418E3C4(v7);
  return v5;
}

uint64_t sub_23413E40C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  int v4;
  unsigned int v5;

  v2 = *(_DWORD *)(a1 + 4) & 0x100;
  if (v2 == (*(_DWORD *)(a2 + 4) & 0x100))
  {
    LODWORD(result) = sub_2341413E0(a1, a2);
    if ((_DWORD)result)
      v4 = -1;
    else
      v4 = 0;
    if ((int)result >= 0)
      v5 = v4;
    else
      v5 = 1;
    if (v2)
      return v5;
    else
      return result;
  }
  else if (v2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

void **sub_23413E46C(void **a1, _BYTE **a2)
{
  void **v2;
  void *v4;
  int v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  void *__src[2];

  v2 = a1;
  if (!a1)
    return v2;
  v4 = (void *)*(int *)a1;
  __src[0] = a1[1];
  __src[1] = v4;
  if ((_DWORD)v4)
  {
    do
    {
      if (*(_BYTE *)__src[0])
        break;
      sub_234148BF8(__src, 1uLL);
    }
    while (__src[1]);
  }
  v5 = *((_DWORD *)v2 + 1);
  v20 = *(_OWORD *)__src;
  v19 = 0;
  if (!sub_234148D28(&v20, &v19))
  {
    v9 = 0;
    goto LABEL_12;
  }
  if ((v5 & 0x100) != 0)
  {
    if (v19 <= 0x80u)
    {
      if (v19 == 128)
      {
        v6 = *((_QWORD *)&v20 + 1);
        if (*((_QWORD *)&v20 + 1))
        {
          if (*(_BYTE *)v20)
          {
            v6 = 1;
            v7 = (char *)__src[1];
            v9 = 1;
          }
          else
          {
            v17 = 1;
            do
            {
              v18 = v17;
              if (*((_QWORD *)&v20 + 1) == v17)
                break;
              ++v17;
            }
            while (!*(_BYTE *)(v20 + v18));
            v6 = v18 < *((_QWORD *)&v20 + 1);
            v9 = 1;
            v7 = (char *)__src[1];
            if (v18 >= *((_QWORD *)&v20 + 1))
            {
              v8 = 0;
              goto LABEL_21;
            }
          }
LABEL_13:
          v8 = 1;
          v10 = 2147483646;
          goto LABEL_22;
        }
      }
      else
      {
        v6 = 0;
      }
      v8 = 0;
      v9 = 1;
      v7 = (char *)__src[1];
      goto LABEL_21;
    }
    v9 = 1;
LABEL_12:
    v7 = (char *)__src[1];
    v6 = 1;
    goto LABEL_13;
  }
  v6 = (v19 >> 7) & 1;
  v7 = (char *)__src[1];
  if ((v19 & 0x80) != 0)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v8 = 0;
  v9 = 0;
LABEL_21:
  v10 = 0x7FFFFFFFLL;
LABEL_22:
  if ((unint64_t)v7 <= v10)
  {
    v2 = (void **)&v7[v6];
    if (a2)
    {
      if (v8)
      {
        **a2 = 0;
        v7 = (char *)__src[1];
      }
      if (v7)
        memcpy(&(*a2)[v6], __src[0], (size_t)v7);
      v11 = *a2;
      v12 = (int)v2;
      if (v9)
      {
        if ((_QWORD)v2 << 32)
        {
          v13 = 0;
          v14 = (int)v2 - 1;
          do
          {
            v15 = v11[v14];
            v11[v14] = -(char)v13 - v15;
            v13 |= v15 != 0;
            --v14;
          }
          while (v14 < (int)v2);
          v11 = *a2;
        }
        else
        {
          v12 = 0;
        }
      }
      *a2 = &v11[v12];
    }
  }
  else
  {
    sub_2341579B4(12, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 153);
    return 0;
  }
  return v2;
}

_QWORD *sub_23413E674(_QWORD *a1, char **a2, size_t a3)
{
  int v3;
  __int16 v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  char *v18;
  size_t v19;

  if (a3 >> 30)
  {
    v3 = 177;
    v4 = 182;
LABEL_18:
    sub_2341579B4(12, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", v4);
    return 0;
  }
  v18 = *a2;
  v19 = a3;
  v17 = 0;
  if (!sub_2341497C0((unsigned __int8 **)&v18, &v17))
  {
    v3 = 196;
    v4 = 190;
    goto LABEL_18;
  }
  if (a1 && (v8 = (_QWORD *)*a1) != 0 || (v8 = sub_23414464C()) != 0)
  {
    if (v17)
    {
      if (!v19 || *v18 != 255 || v19 == 1)
        goto LABEL_24;
      if (!v18[1])
      {
        v9 = 2;
        do
        {
          v10 = v9;
          if (v19 == v9)
            break;
          ++v9;
        }
        while (!v18[v10]);
        if (v10 - 1 >= v19 - 1)
          goto LABEL_24;
      }
    }
    else if (!v19 || *v18)
    {
      goto LABEL_24;
    }
    sub_234148BF8(&v18, 1uLL);
LABEL_24:
    if (!sub_2341411A4((uint64_t)v8, v18, v19))
    {
      if (!a1 || (_QWORD *)*a1 != v8)
        sub_234144630((uint64_t)v8);
      return 0;
    }
    if (v17)
    {
      *((_DWORD *)v8 + 1) = 258;
      v12 = *(int *)v8;
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = v8[1];
        v15 = v12 - 1;
        do
        {
          v16 = *(unsigned __int8 *)(v14 + v15);
          *(_BYTE *)(v14 + v15) = -(char)v13 - v16;
          v13 |= v16 != 0;
          --v15;
        }
        while (v15 < v12);
      }
    }
    else
    {
      *((_DWORD *)v8 + 1) = 2;
    }
    *a2 += a3;
    if (a1)
      *a1 = v8;
  }
  return v8;
}

uint64_t sub_23413E838(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0)
    return sub_23413E8F8(a1, a2, 2);
  result = sub_23413E8F8(a1, -(uint64_t)a2, 2);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 4) = 258;
    return 1;
  }
  return result;
}

uint64_t sub_23413E88C(uint64_t a1, unint64_t a2)
{
  return sub_23413E8F8(a1, a2, 2);
}

uint64_t sub_23413E894(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0)
    return sub_23413E8F8(a1, a2, 10);
  result = sub_23413E8F8(a1, -(uint64_t)a2, 10);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 4) = 266;
    return 1;
  }
  return result;
}

uint64_t sub_23413E8E8(uint64_t a1, unint64_t a2)
{
  return sub_23413E8F8(a1, a2, 10);
}

uint64_t sub_23413E8F8(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v5 = 0;
  v7[1] = *MEMORY[0x24BDAC8D0];
  v7[0] = bswap64(a2);
  do
  {
    if (*((_BYTE *)v7 + v5))
      break;
    ++v5;
  }
  while (v5 != 8);
  result = sub_2341411A4(a1, (char *)v7 + v5, 8 - v5);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 4) = a3;
    return 1;
  }
  return result;
}

uint64_t sub_23413E994(_QWORD *a1, uint64_t a2)
{
  return sub_23413E99C(a1, a2, 2);
}

uint64_t sub_23413E99C(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = sub_23413EC8C(a1, (const void **)a2, a3);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 5) & 1) != 0)
    {
      sub_2341579B4(12, 0, 196, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 334);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_23413E9F0(_QWORD *a1, uint64_t a2)
{
  return sub_23413E99C(a1, a2, 10);
}

uint64_t sub_23413E9F8(uint64_t *a1, uint64_t a2)
{
  return sub_23413EA00(a1, a2, 2);
}

uint64_t sub_23413EA00(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v8 = 0;
  result = sub_23413EC8C(&v8, (const void **)a2, a3);
  if ((_DWORD)result)
  {
    v6 = v8;
    v7 = v8 > 0;
    if ((*(_BYTE *)(a2 + 5) & (v8 != 0)) == 0)
      v7 = v8 >= 0;
    if (v7)
    {
      if ((*(_BYTE *)(a2 + 5) & (v8 != 0)) != 0)
        v6 = -v8;
      *a1 = v6;
      return 1;
    }
    else
    {
      sub_2341579B4(12, 0, 196, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 364);
      return 0;
    }
  }
  return result;
}

uint64_t sub_23413EA98(uint64_t *a1, uint64_t a2)
{
  return sub_23413EA00(a1, a2, 10);
}

uint64_t sub_23413EAA0(uint64_t a1)
{
  return sub_23413EAA8(a1, 2);
}

uint64_t sub_23413EAA8(uint64_t result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = 0;
    if (sub_23413EA00(&v2, result, a2))
    {
      return v2;
    }
    else
    {
      sub_234157348();
      return -1;
    }
  }
  return result;
}

uint64_t sub_23413EAEC(uint64_t a1)
{
  return sub_23413EAA8(a1, 10);
}

_QWORD *sub_23413EAF4(uint64_t *a1, _QWORD *a2)
{
  return sub_23413EAFC(a1, a2, 2);
}

_QWORD *sub_23413EAFC(uint64_t *a1, _QWORD *a2, int a3)
{
  int v3;
  _QWORD *v6;
  size_t v7;

  v3 = a3;
  v6 = a2;
  if (!a2)
  {
    v6 = sub_2341413B0(a3);
    if (!v6)
    {
      sub_2341579B4(12, 0, 158, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 412);
LABEL_10:
      if (v6 != a2)
        sub_234141344((uint64_t)v6);
      return 0;
    }
  }
  if (sub_234162420((uint64_t)a1) && !sub_234161A24((uint64_t)a1))
    v3 |= 0x100u;
  *((_DWORD *)v6 + 1) = v3;
  v7 = (int)sub_234162240(a1);
  if (!sub_2341411A4((uint64_t)v6, 0, v7)
    || !sub_234162840((char *)v6[1], v7, (uint64_t)a1))
  {
    goto LABEL_10;
  }
  return v6;
}

_QWORD *sub_23413EBD0(uint64_t *a1, _QWORD *a2)
{
  return sub_23413EAFC(a1, a2, 10);
}

_QWORD *sub_23413EBD8(unsigned __int8 **a1, _QWORD *a2)
{
  return sub_23413EBE0(a1, a2, 2);
}

_QWORD *sub_23413EBE0(unsigned __int8 **a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  _QWORD *v5;

  if ((*((_DWORD *)a1 + 1) & 0xFFFFFEFF) == a3)
  {
    v4 = sub_2341625C8(a1[1], *(int *)a1, a2);
    v5 = v4;
    if (v4)
    {
      if ((*((_BYTE *)a1 + 5) & 1) != 0)
        sub_234161F18((uint64_t)v4, 1);
    }
    else
    {
      sub_2341579B4(12, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 452);
    }
  }
  else
  {
    sub_2341579B4(12, 0, 195, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", 446);
    return 0;
  }
  return v5;
}

_QWORD *sub_23413EC84(unsigned __int8 **a1, _QWORD *a2)
{
  return sub_23413EBE0(a1, a2, 10);
}

uint64_t sub_23413EC8C(_QWORD *a1, const void **a2, int a3)
{
  size_t v3;
  int v4;
  __int16 v5;
  unint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  if ((*((_DWORD *)a2 + 1) & 0xFFFFFEFF) != a3)
  {
    v4 = 195;
    v5 = 315;
    goto LABEL_5;
  }
  v9[0] = 0;
  v3 = *(int *)a2;
  if ((int)v3 >= 9)
  {
    v4 = 196;
    v5 = 320;
LABEL_5:
    sub_2341579B4(12, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_int.c", v5);
    return 0;
  }
  if ((_DWORD)v3)
  {
    memcpy((char *)&v9[1] - v3, a2[1], v3);
    v8 = v9[0];
  }
  else
  {
    v8 = 0;
  }
  *a1 = bswap64(v8);
  return 1;
}

uint64_t sub_23413ED6C(_QWORD *a1, char *a2, size_t a3, int a4, unint64_t a5)
{
  return sub_23413ED78(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t sub_23413ED78(_QWORD *a1, char *__s, size_t a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v11;
  int v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t (*v19)();
  int v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v24;
  _BOOL4 v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int (*v44)(uint64_t, unsigned int);
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  int v48;
  _QWORD *v49;
  _BOOL4 v50;
  unint64_t v51;
  void *v52;
  unsigned int v53;
  _OWORD v54[3];
  char *v55;
  size_t v56;

  v11 = a3;
  if (a3 == -1)
    v11 = strlen(__s);
  if (!a5)
    a5 = 10246;
  v14 = a4 - 4096;
  if ((a4 - 4096) >= 5 || ((0x17u >> a4) & 1) == 0)
  {
    v15 = 182;
    v16 = 120;
LABEL_8:
    sub_2341579B4(12, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", v16);
    return 0xFFFFFFFFLL;
  }
  v19 = off_250505B30[v14];
  v20 = dword_2342DA098[v14];
  v55 = __s;
  v56 = v11;
  v49 = a1;
  if (v11)
  {
    v48 = v20;
    v21 = 0;
    v22 = 0;
    v24 = a4 == 4098 || a4 == 4100;
    v50 = v24;
    while (1)
    {
      LODWORD(v54[0]) = 0;
      if (!((unsigned int (*)(char **, _OWORD *))v19)(&v55, v54))
      {
        v15 = v48;
        v16 = 131;
        goto LABEL_8;
      }
      if (!v21)
      {
        v25 = v50;
        if (LODWORD(v54[0]) != 65279)
          v25 = 0;
        if (v25)
          break;
      }
      if ((a5 & 2) != 0)
      {
        v26 = v54[0];
        if (LODWORD(v54[0]) > 0x7F
          || !sub_23418E674(v54[0]) && (v26 > 0x3F || ((1 << v26) & 0xA400FB8100000000) == 0))
        {
          a5 &= ~2uLL;
        }
      }
      if (((LODWORD(v54[0]) > 0x7F) & (a5 >> 4)) != 0)
        v27 = a5 & 0xFFFFFFFFFFFFFFEFLL;
      else
        v27 = a5;
      if (((LODWORD(v54[0]) > 0xFF) & (v27 >> 2)) != 0)
        v27 &= ~4uLL;
      if ((((v54[0] & 0xFFFF0000) != 0) & (v27 >> 11)) != 0)
        a5 = v27 & 0xFFFFFFFFFFFFF7FFLL;
      else
        a5 = v27;
      if (!a5)
      {
        v15 = 126;
        v16 = 160;
        goto LABEL_8;
      }
      ++v21;
      v28 = sub_23414A3D0(v54[0]);
      if (a7 >= 1 && v21 > a7)
      {
        sub_2341579B4(12, 0, 173, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", 167);
        sub_234157B2C("maxsize=%zu", v36, v37, v38, v39, v40, v41, v42, a7);
        return 0xFFFFFFFFLL;
      }
      v22 += v28;
      if (!v56)
        goto LABEL_44;
    }
    v15 = 126;
    v16 = 142;
    goto LABEL_8;
  }
  v22 = 0;
  v21 = 0;
LABEL_44:
  if (a6 >= 1 && v21 < a6)
  {
    sub_2341579B4(12, 0, 174, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", 174);
    sub_234157B2C("minsize=%zu", v29, v30, v31, v32, v33, v34, v35, a6);
    return 0xFFFFFFFFLL;
  }
  if ((a5 & 2) != 0)
  {
    v43 = 4097;
    v44 = (unsigned int (*)(uint64_t, unsigned int))sub_23414A540;
    v17 = 19;
  }
  else if ((a5 & 0x10) != 0)
  {
    v43 = 4097;
    v44 = (unsigned int (*)(uint64_t, unsigned int))sub_23414A540;
    v17 = 22;
  }
  else if ((a5 & 4) != 0)
  {
    v43 = 4097;
    v44 = (unsigned int (*)(uint64_t, unsigned int))sub_23414A540;
    v17 = 20;
  }
  else if ((a5 & 0x800) != 0)
  {
    v21 *= 2;
    v43 = 4098;
    v44 = (unsigned int (*)(uint64_t, unsigned int))sub_23414A570;
    v17 = 30;
  }
  else if ((a5 & 0x100) != 0)
  {
    v21 *= 4;
    v43 = 4100;
    v44 = (unsigned int (*)(uint64_t, unsigned int))sub_23414A5D8;
    v17 = 28;
  }
  else
  {
    if ((a5 & 0x2000) == 0)
    {
      v15 = 126;
      v16 = 206;
      goto LABEL_8;
    }
    v43 = 4096;
    v44 = (unsigned int (*)(uint64_t, unsigned int))sub_23414A3F8;
    v17 = 12;
    v21 = v22;
  }
  if (!v49)
    return v17;
  v45 = (_QWORD *)*v49;
  v46 = (_QWORD *)*v49;
  if (*v49 || (v46 = sub_2341413B0(v17)) != 0)
  {
    memset(v54, 0, sizeof(v54));
    sub_234147B44(v54);
    if (v43 == a4)
    {
      if (sub_2341411A4((uint64_t)v46, __s, v11))
      {
        *((_DWORD *)v46 + 1) = v17;
LABEL_70:
        *v49 = v46;
        return v17;
      }
    }
    else if (sub_234147B54((uint64_t)v54, v21 + 1))
    {
      v55 = __s;
      v56 = v11;
      if (v11)
      {
        while (1)
        {
          v53 = 0;
          if (!((unsigned int (*)(char **, unsigned int *))v19)(&v55, &v53) || !v44((uint64_t)v54, v53))
            break;
          if (!v56)
            goto LABEL_76;
        }
        sub_2341579B4(12, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", 244);
      }
      else
      {
LABEL_76:
        v51 = 0;
        v52 = 0;
        if (sub_234148008((uint64_t)v54, 0))
        {
          if (sub_234147C00((uint64_t)v54, &v52, &v51))
          {
            v47 = v51;
            if (v51)
            {
              if (!(v51 >> 31))
              {
                *((_DWORD *)v46 + 1) = v17;
                sub_234141374((uint64_t)v46, (uint64_t)v52, v47 - 1);
                goto LABEL_70;
              }
            }
          }
        }
        sub_2341579B4(12, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_mbstr.c", 254);
        sub_23418E3C4(v52);
      }
    }
    if (!v45)
      sub_234141344((uint64_t)v46);
    sub_234147BE4((uint64_t)v54);
  }
  return 0xFFFFFFFFLL;
}

BOOL sub_23413F22C(unsigned int a1)
{
  if (a1 > 0x7F)
    return 0;
  if (sub_23418E674(a1) || a1 <= 0x3D && ((1 << a1) & 0x2400FB8100000000) != 0)
    return 1;
  return a1 == 63;
}

uint64_t sub_23413F294(uint64_t a1, void **a2)
{
  uint64_t v3;
  int v6;
  __int16 v7;
  _OWORD v8[3];
  _OWORD v9[3];

  if (!a1)
  {
    v6 = 67;
    v7 = 74;
LABEL_10:
    sub_2341579B4(12, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", v7);
    return 0xFFFFFFFFLL;
  }
  v3 = *(unsigned int *)(a1 + 20);
  if ((int)v3 <= 0)
  {
    v6 = 134;
    v7 = 79;
    goto LABEL_10;
  }
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  if (sub_234147B54((uint64_t)v9, v3 + 2)
    && sub_234147F60((uint64_t *)v9, (uint64_t)v8, 6u)
    && sub_23414817C((uint64_t)v8, *(const void **)(a1 + 24), *(int *)(a1 + 20)))
  {
    return sub_2341475C8((uint64_t)v9, a2);
  }
  sub_234147BE4((uint64_t)v9);
  return 0xFFFFFFFFLL;
}

size_t sub_23413F36C(_BYTE *a1, int a2, uint64_t a3)
{
  return sub_23418F278(a1, a2, a3, 0);
}

uint64_t sub_23413F374(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  char *v7;
  char *v8;
  char *v10;
  uint64_t v11;
  _BYTE v12[80];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a2 || !*(_QWORD *)(a2 + 24))
    return sub_23413F494(a1, "NULL");
  v4 = v12;
  v5 = sub_23418F278(v12, 80, a2, 0);
  if (v5 < 80)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v6 = v5 + 1;
  v7 = (char *)sub_23418E2E4((v5 + 1));
  if (v7)
  {
    v8 = v7;
    v5 = sub_23418F278(v7, v6, a2, 0);
    v4 = v8;
LABEL_8:
    if (v5 >= 1)
      v10 = v4;
    else
      v10 = "<INVALID>";
    v11 = sub_23413F494(a1, v10);
    sub_23418E3C4(v8);
    return v11;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_23413F494(uint64_t a1, char *__s)
{
  size_t v4;
  unsigned int v6;

  v4 = strlen(__s);
  if (v4 >> 31)
  {
    sub_2341579B4(12, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", 101);
    return 0xFFFFFFFFLL;
  }
  else
  {
    v6 = v4;
    if (sub_234144E68(a1, (uint64_t)__s, v4) == (_DWORD)v4)
      return v6;
    else
      return 0xFFFFFFFFLL;
  }
}

const char **sub_23413F50C(const char ***a1, _QWORD *a2, uint64_t a3)
{
  const char **result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;

  if (a3 < 0)
    return 0;
  v7 = 0;
  v8 = 0;
  *(_QWORD *)&v9 = *a2;
  *((_QWORD *)&v9 + 1) = a3;
  if (sub_2341493F4(&v9, &v7, 6))
  {
    v6 = v7;
    result = sub_23413F5A4(a1, &v6, v8);
    if (result)
      *a2 = v9;
  }
  else
  {
    sub_2341579B4(12, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", 142);
    return 0;
  }
  return result;
}

const char **sub_23413F5A4(const char ***a1, uint64_t *a2, unint64_t a3)
{
  const char **v6;
  __int16 v7;
  unsigned __int8 *v9[2];

  if ((a3 & 0x8000000000000000) != 0)
  {
    v7 = 159;
LABEL_9:
    sub_2341579B4(12, 0, 146, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", v7);
    return 0;
  }
  v9[0] = (unsigned __int8 *)*a2;
  v9[1] = (unsigned __int8 *)a3;
  if (!sub_234149B7C(v9))
  {
    v7 = 166;
    goto LABEL_9;
  }
  v6 = sub_23413F670(0, *a2, a3, 0, 0);
  if (v6)
  {
    if (a1)
    {
      sub_23413F6D0((_QWORD **)*a1);
      *a1 = v6;
    }
    *a2 += a3;
  }
  return v6;
}

const char **sub_23413F670(int a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[2];
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 >> 31)
  {
    sub_2341579B4(12, 0, 173, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_object.c", 222);
    return 0;
  }
  else
  {
    v6[0] = a4;
    v6[1] = a5;
    v9 = a2;
    v7 = a1;
    v8 = a3;
    v10 = 13;
    return sub_23418EA9C((uint64_t)v6);
  }
}

void sub_23413F6D0(_QWORD **a1)
{
  int v2;

  if (a1)
  {
    v2 = *((_DWORD *)a1 + 8);
    if ((v2 & 4) != 0)
    {
      sub_23418E3C4(*a1);
      sub_23418E3C4(a1[1]);
      *a1 = 0;
      a1[1] = 0;
      v2 = *((_DWORD *)a1 + 8);
      if ((v2 & 8) == 0)
      {
LABEL_4:
        if ((v2 & 1) == 0)
          return;
LABEL_8:
        sub_23418E3C4(a1);
        return;
      }
    }
    else if ((v2 & 8) == 0)
    {
      goto LABEL_4;
    }
    sub_23418E3C4(a1[3]);
    a1[3] = 0;
    *((_DWORD *)a1 + 5) = 0;
    if (((_DWORD)a1[4] & 1) != 0)
      goto LABEL_8;
  }
}

double sub_23413F744()
{
  _QWORD *v0;
  double result;

  v0 = sub_23418E2E4(0x28uLL);
  if (v0)
  {
    result = 0.0;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_DWORD *)v0 + 8) = 1;
  }
  return result;
}

uint64_t sub_23413F774(uint64_t a1, char *a2, int a3)
{
  return sub_2341411A4(a1, a2, a3);
}

uint64_t sub_23413F77C(uint64_t a1, uint64_t a2, __int16 a3)
{
  int v6;
  int v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void *v20;
  _QWORD v21[2];

  v6 = *(_DWORD *)(a2 + 4);
  if ((a3 & 0x40) != 0)
  {
    v8 = sub_2341414C8(*(_DWORD *)(a2 + 4));
    v9 = strlen(v8);
    v10 = v9;
    if (a1)
    {
      if (sub_234144E68(a1, (uint64_t)v8, v9) != v9)
        return 0xFFFFFFFFLL;
      v11 = sub_234144E68(a1, (uint64_t)":", 1);
      v7 = v11 == 1 ? v10 + 1 : v10;
      if (v11 != 1)
        return 0xFFFFFFFFLL;
      if ((a3 & 0x80) != 0)
        goto LABEL_27;
    }
    else
    {
      v7 = v9 + 1;
      if ((a3 & 0x80) != 0)
        goto LABEL_27;
    }
  }
  else
  {
    v7 = 0;
    if ((a3 & 0x80) != 0)
      goto LABEL_27;
  }
  if ((a3 & 0x20) != 0)
  {
LABEL_14:
    v12 = 4097;
    goto LABEL_15;
  }
  v12 = sub_23413F98C(v6);
  if (v12 == -1)
  {
    if ((a3 & 0x100) == 0)
      goto LABEL_14;
LABEL_27:
    if (a1 && sub_234144E68(a1, (uint64_t)"#", 1) != 1)
      return 0xFFFFFFFFLL;
    if ((a3 & 0x200) != 0)
    {
      v21[0] = 0;
      v21[1] = 0;
      sub_234140A14((int *)v21, a2);
      v20 = 0;
      v17 = sub_234144810((int *)v21, &v20);
      v16 = -1;
      if ((v17 & 0x80000000) == 0)
      {
        v18 = sub_23413FF60(a1, (unsigned __int8 *)v20, v17);
        sub_23418E3C4(v20);
        if (v18 >= 0)
          v16 = v18 + 1;
        else
          v16 = -1;
      }
    }
    else
    {
      v15 = sub_23413FF60(a1, *(unsigned __int8 **)(a2 + 8), *(_DWORD *)a2);
      if (v15 < 0)
        return 0xFFFFFFFFLL;
      v16 = v15 + 1;
    }
    if ((v16 & 0x80000000) == 0)
      return (v16 + v7);
    return 0xFFFFFFFFLL;
  }
LABEL_15:
  LOBYTE(v21[0]) = 0;
  v13 = sub_23413F9B0(*(_QWORD *)(a2 + 8), *(_DWORD *)a2, v12, a3, v21, 0);
  if (v13 < 0)
    return 0xFFFFFFFFLL;
  v14 = LOBYTE(v21[0]) ? (v13 + v7 + 2) : (v13 + v7);
  if (a1
    && (LOBYTE(v21[0]) && sub_234144E68(a1, (uint64_t)"\"", 1) != 1
     || (sub_23413F9B0(*(_QWORD *)(a2 + 8), *(_DWORD *)a2, v12, a3, 0, a1) & 0x80000000) != 0
     || LOBYTE(v21[0]) && sub_234144E68(a1, (uint64_t)"\"", 1) != 1))
  {
    return 0xFFFFFFFFLL;
  }
  return v14;
}

uint64_t sub_23413F98C(int a1)
{
  if ((a1 - 12) > 0x12)
    return 0xFFFFFFFFLL;
  else
    return dword_2342DA0AC[a1 - 12];
}

uint64_t sub_23413F9B0(uint64_t a1, int a2, int a3, char a4, _BYTE *a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t (*v10)();
  int v11;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  uint64_t (*v29)();
  _OWORD v30[3];
  _BYTE v31[6];
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  v6 = a3 - 4096;
  if ((a3 - 4096) > 4 || ((0x17u >> a3) & 1) == 0)
    return 0xFFFFFFFFLL;
  v10 = off_250505BB8[v6];
  v11 = dword_2342DA0F8[v6];
  v33 = a1;
  v34 = a2;
  if (!a2)
    return 0;
  v28 = v11;
  v7 = 0;
  v29 = v10;
  while (1)
  {
    v15 = v33;
    v16 = v33 == a1;
    v32 = 0;
    if (!((unsigned int (*)(uint64_t *, unsigned int *))v10)(&v33, &v32))
    {
      sub_2341579B4(12, 0, v28, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strex.c", 168);
      return 0xFFFFFFFFLL;
    }
    v17 = v34;
    if ((a4 & 0x10) == 0)
    {
      v18 = sub_23413FFFC(v32, a4, a5, a6, v16, v34 == 0);
      if (v18 < 0)
        return 0xFFFFFFFFLL;
      v7 = (v18 + v7);
      goto LABEL_29;
    }
    memset(v30, 0, sizeof(v30));
    sub_234147BB4((uint64_t)v30, (uint64_t)v31, 6);
    if (!sub_23414A3F8((uint64_t)v30, v32))
    {
      sub_2341579B4(12, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strex.c", 177);
      return 1;
    }
    v19 = sub_234147ECC((uint64_t)v30);
    if (v19)
      break;
LABEL_28:
    v10 = v29;
LABEL_29:
    if (!v34)
      return v7;
  }
  v20 = v19;
  v21 = 0;
  v22 = v19 - 1;
  while (1)
  {
    v23 = v15 == a1 && v21 == 0;
    v24 = v23;
    v25 = !v17 && v22 == v21;
    v26 = v25;
    v27 = sub_23413FFFC(v31[v21], a4, a5, a6, v24, v26);
    if (v27 < 0)
      return 0xFFFFFFFFLL;
    v7 = (v27 + v7);
    if (v20 == ++v21)
      goto LABEL_28;
  }
}

uint64_t sub_23413FB88(uint64_t a1, uint64_t a2, __int16 a3)
{
  _QWORD *v5;
  uint64_t v7;

  if (a1)
  {
    v5 = sub_234145994();
    if (!v5)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v5 = 0;
  }
  v7 = sub_23413F77C((uint64_t)v5, a2, a3);
  sub_234144C64((uint64_t)v5);
  return v7;
}

uint64_t sub_23413FBF0(_QWORD *a1, char **a2)
{
  int v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = sub_23413F98C(*((_DWORD *)a2 + 1));
  if (v4 == -1)
  {
    sub_2341579B4(12, 0, 185, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strex.c", 369);
    return 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v6 = &v7;
    v9 = 0;
    result = sub_23413ED6C(&v6, a2[1], *(int *)a2, v4, 0x2000uLL);
    if ((result & 0x80000000) == 0)
    {
      *a1 = v8;
      return v7;
    }
  }
  return result;
}

BOOL sub_23413FC94(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  _BYTE v11[80];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v3 = *(_DWORD *)a2;
  if (*(int *)a2 < 1)
    return 1;
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  do
  {
    v8 = *(_BYTE *)(v7 + v5);
    if (v8 == 127)
    {
      v8 = 46;
    }
    else
    {
      if (v8 == 10)
        v9 = 10;
      else
        v9 = 46;
      if (v8 == 13)
        v9 = 13;
      if (v8 <= 31)
        v8 = v9;
    }
    v11[v6] = v8;
    if (v6 < 79)
    {
      ++v6;
    }
    else
    {
      if ((int)sub_234144E68(a1, (uint64_t)v11, v6 + 1) < 1)
        return 0;
      v6 = 0;
      v3 = *(_DWORD *)a2;
    }
    ++v5;
  }
  while (v5 < v3);
  return v6 < 1 || (int)sub_234144E68(a1, (uint64_t)v11, v6) >= 1;
}

BOOL sub_23413FDBC(uint64_t a1, int *a2)
{
  int v2;

  v2 = a2[1];
  if (v2 == 24)
    return sub_23413FEB0(a1, a2);
  if (v2 == 23)
    return sub_23413FE00(a1, a2);
  sub_234144F70(a1, "Bad time value");
  return 0;
}

BOOL sub_23413FE00(uint64_t a1, int *a2)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v3 = *a2;
  *(_QWORD *)&v9 = *((_QWORD *)a2 + 1);
  *((_QWORD *)&v9 + 1) = v3;
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  if (sub_23414A10C(&v9, (int *)&v5, 0))
    return (int)sub_234146138(a1, "%s %2d %02d:%02d:%02d %d GMT", off_250505B58[(int)v6], HIDWORD(v5), DWORD2(v5), DWORD1(v5), (_DWORD)v5, DWORD1(v6) + 1900) > 0;
  sub_234144F70(a1, "Bad time value");
  return 0;
}

BOOL sub_23413FEB0(uint64_t a1, int *a2)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v3 = *a2;
  *(_QWORD *)&v9 = *((_QWORD *)a2 + 1);
  *((_QWORD *)&v9 + 1) = v3;
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  if (sub_234149E0C(&v9, (int *)&v5, 0))
    return (int)sub_234146138(a1, "%s %2d %02d:%02d:%02d %d GMT", off_250505B58[(int)v6], HIDWORD(v5), DWORD2(v5), DWORD1(v5), (_DWORD)v5, DWORD1(v6) + 1900) > 0;
  sub_234144F70(a1, "Bad time value");
  return 0;
}

uint64_t sub_23413FF60(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[2];

  if (!a1 || !a3)
    return (2 * a3);
  v6 = a3;
  while (1)
  {
    v7 = *a2;
    v9[0] = a0123456789abcd_0[v7 >> 4];
    v9[1] = a0123456789abcd_0[v7 & 0xF];
    if (sub_234144E68(a1, (uint64_t)v9, 2) != 2)
      break;
    ++a2;
    if (!--v6)
      return (2 * a3);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_23413FFFC(unsigned int a1, char a2, _BYTE *a3, uint64_t a4, int a5, int a6)
{
  char v7;
  size_t v8;
  char v10;
  char __str[16];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = a1;
  if (a1 >= 0x10000)
  {
    snprintf(__str, 0x10uLL, "\\W%08X");
    goto LABEL_27;
  }
  if (a1 >= 0x100)
  {
    snprintf(__str, 0x10uLL, "\\U%04X");
    goto LABEL_27;
  }
  if (a1 >= 0x80 && (a2 & 4) != 0 || (a2 & 2) != 0 && (a1 < 0x20u || a1 == 127))
  {
    snprintf(__str, 0x10uLL, "\\%02X");
    goto LABEL_27;
  }
  if ((a2 & 1) == 0)
  {
    if (a1 == 92 && (a2 & 0xF) != 0)
      goto LABEL_26;
LABEL_20:
    if (!a4)
      return 1;
    if (sub_234144E68(a4, (uint64_t)&v10, 1) == 1)
      return 1;
    return 0xFFFFFFFFLL;
  }
  v7 = a1 - 34;
  if (a1 - 34 > 0x3A)
  {
LABEL_32:
    if ((!a5 || a1 != 32 && a1 != 35) && (a1 != 32 || !a6))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (((1 << v7) & 0x16000600) == 0)
  {
    if (((1 << v7) & 0x400000000000001) != 0)
      goto LABEL_26;
    goto LABEL_32;
  }
LABEL_17:
  if ((a2 & 8) != 0)
  {
    if (a3)
      *a3 = 1;
    goto LABEL_20;
  }
LABEL_26:
  snprintf(__str, 0x10uLL, "\\%c");
LABEL_27:
  v8 = strlen(__str);
  if (a4)
  {
    if (sub_234144E68(a4, (uint64_t)__str, v8) == (_DWORD)v8)
      return v8;
    else
      return 0xFFFFFFFFLL;
  }
  return v8;
}

uint64_t sub_2341401B8()
{
  return 0x2000;
}

uint64_t sub_2341401C0(uint64_t *a1, char *a2, size_t a3, int a4, int a5)
{
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v13;

  v13 = 0;
  if (a1)
    v8 = a1;
  else
    v8 = &v13;
  v9 = (uint64_t *)sub_234140268(a5);
  if (v9)
  {
    if ((v9[4] & 2) != 0)
      v10 = v9[3];
    else
      v10 = v9[3] & 0x2000;
    v11 = sub_23413ED78(v8, a2, a3, a4, v10, v9[1], v9[2]);
  }
  else
  {
    v11 = sub_23413ED6C(v8, a2, a3, a4, 0x2000uLL);
  }
  if (v11 < 1)
    return 0;
  else
    return *v8;
}

uint64_t sub_234140268(int a1)
{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  LODWORD(v3[0]) = a1;
  v1 = (uint64_t)bsearch(v3, &unk_2342DA110, 0x13uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))sub_2341404A4);
  if (!v1)
  {
    sub_234195C1C(&stru_256157A48);
    if (qword_256159690)
      v1 = sub_23418DEE4((_QWORD *)qword_256159690, (uint64_t)v3, (uint64_t (*)(_QWORD, uint64_t))sub_2341404BC, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_2341404C8);
    else
      v1 = 0;
    sub_234195C54(&stru_256157A48);
  }
  return v1;
}

uint64_t sub_23414030C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD v14[2];
  uint64_t v15;

  if (!sub_234140268(a1))
  {
    sub_234195C38(&stru_256157A48);
    if (qword_256159690)
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      LODWORD(v14[0]) = a1;
      if (sub_23418DEE4((_QWORD *)qword_256159690, (uint64_t)v14, (uint64_t (*)(_QWORD, uint64_t))sub_2341404BC, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_2341404C8))
      {
        sub_2341579B4(12, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strnid.c", 212);
        goto LABEL_11;
      }
    }
    else
    {
      qword_256159690 = (uint64_t)sub_23418DE08((uint64_t)sub_23414046C, (uint64_t)sub_234140474);
      if (!qword_256159690)
        goto LABEL_11;
    }
    v11 = sub_23418E2E4(0x28uLL);
    if (v11)
    {
      v12 = v11;
      *(_DWORD *)v11 = a1;
      v11[1] = a2;
      v11[2] = a3;
      v11[3] = a4;
      v11[4] = a5;
      *(_QWORD *)&v14[0] = 0;
      if (sub_23418E048((_QWORD *)qword_256159690, v14, (uint64_t)v11, (uint64_t (*)(_QWORD, uint64_t))sub_2341404BC, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_2341404C8))
      {
        v10 = 1;
LABEL_12:
        sub_234195C54(&stru_256157A48);
        return v10;
      }
      sub_23418E3C4(v12);
    }
LABEL_11:
    v10 = 0;
    goto LABEL_12;
  }
  sub_2341579B4(12, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_strnid.c", 194);
  return 0;
}

uint64_t sub_23414046C(unsigned __int8 *a1)
{
  return sub_23418E4B4(a1, 4);
}

uint64_t sub_234140474(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

_QWORD *sub_23414048C(_QWORD *result, _QWORD *a2)
{
  *result = &unk_2342DA110;
  *a2 = 19;
  return result;
}

uint64_t sub_2341404A4(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

uint64_t sub_2341404BC(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_2341404C8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t sub_2341404D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505BE0);
}

uint64_t sub_2341404E4(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505BE0);
}

uint64_t sub_2341404F0()
{
  return sub_234144240((uint64_t)&unk_250505BE0);
}

void sub_2341404FC(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250505BE0);
}

_QWORD *sub_234140508(_QWORD *a1, uint64_t a2)
{
  return sub_234140514(a1, a2, 0, 0);
}

_QWORD *sub_234140514(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  if (!sub_2341419C0(a2, (uint64_t)&v9))
  {
    sub_2341579B4(12, 0, 113, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/a_time.c", 95);
    return 0;
  }
  if ((a3 || a4) && !sub_234141C5C((int *)&v9, a3, a4))
    return 0;
  if ((DWORD1(v10) - 150) >= 0xFFFFFF9C)
    return sub_234140CCC(a1, a2, a3, a4);
  else
    return sub_23413E1B8(a1, a2, a3, a4);
}

BOOL sub_2341405D8(int *a1)
{
  int v1;

  v1 = a1[1];
  if (v1 == 23)
    return sub_234140C38(a1);
  if (v1 == 24)
    return sub_23413E128(a1);
  return 0;
}

_QWORD *sub_2341405FC(int *a1, _QWORD **a2)
{
  _QWORD *v4;
  unint64_t v5;
  _BYTE *v6;
  char *v7;

  if (!sub_2341405D8(a1))
    return 0;
  if (!a2 || (v4 = *a2) == 0)
  {
    v4 = sub_23414476C();
    if (!v4)
      goto LABEL_16;
  }
  if (a1[1] == 24)
  {
    if (sub_2341411A4((uint64_t)v4, *((char **)a1 + 1), *a1))
    {
      if (!a2)
        return v4;
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if (!sub_2341411A4((uint64_t)v4, 0, *a1 + 2))
  {
LABEL_16:
    if (!a2 || *a2 != v4)
      sub_234144630((uint64_t)v4);
    return 0;
  }
  v5 = *a1 + 3;
  v6 = (_BYTE *)v4[1];
  if (**((unsigned __int8 **)a1 + 1) <= 0x34u)
    v7 = "20";
  else
    v7 = "19";
  sub_23418E9CC((_BYTE *)v4[1], v7, *a1 + 3);
  sub_23418EA40(v6, *((char **)a1 + 1), v5);
  if (a2)
  {
LABEL_14:
    if (!*a2)
      *a2 = v4;
  }
  return v4;
}

BOOL sub_234140708(uint64_t a1, char *a2)
{
  return sub_234140C48(a1, a2) || sub_23413E134(a1, a2) != 0;
}

uint64_t sub_23414074C(uint64_t a1, char *__s)
{
  int v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)&v9 = __s;
  *((_QWORD *)&v9 + 1) = strlen(__s);
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  if (sub_23414A10C(&v9, 0, 0))
    goto LABEL_2;
  result = sub_234149E0C(&v9, (int *)&v5, 0);
  if ((_DWORD)result)
  {
    if ((DWORD1(v6) - 150) < 0xFFFFFF9C)
    {
      v3 = 24;
      if (a1)
        goto LABEL_3;
      return 1;
    }
    sub_234148BF8(&v9, 2uLL);
LABEL_2:
    v3 = 23;
    if (a1)
    {
LABEL_3:
      result = sub_2341411A4(a1, (char *)v9, *((size_t *)&v9 + 1));
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 4) = v3;
    }
    return 1;
  }
  return result;
}

uint64_t sub_234140804(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t result;
  _OWORD v8[3];
  uint64_t v9;
  _OWORD v10[3];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  result = sub_234140890((int *)v10, a3, 1);
  if ((_DWORD)result)
  {
    result = sub_234140890((int *)v8, a4, 1);
    if ((_DWORD)result)
      return sub_234141CF4(a1, a2, (int *)v10, (int *)v8);
  }
  return result;
}

BOOL sub_234140890(int *a1, int *a2, int a3)
{
  int v4;
  time_t v6;

  if (a2)
  {
    v4 = a2[1];
    if (v4 == 24)
      return sub_23413E0D4(a1, a2);
    else
      return v4 == 23 && sub_234140BE8(a1, a2, a3);
  }
  else
  {
    v6 = time(0);
    return sub_2341419C0(v6, (uint64_t)a1) != 0;
  }
}

uint64_t sub_234140904(int *a1, _QWORD *a2)
{
  uint64_t result;
  _OWORD v4[3];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  result = sub_234140890((int *)v4, a1, 0);
  if ((_DWORD)result)
    return sub_234141BF0((int *)v4, a2);
  return result;
}

uint64_t sub_234140958(int *a1, _QWORD *a2)
{
  uint64_t result;
  _OWORD v4[3];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  result = sub_234140890((int *)v4, a1, 0);
  if ((_DWORD)result)
    return sub_2341417C8((int *)v4, a2);
  return result;
}

uint64_t sub_2341409AC(unsigned int *a1)
{
  uint64_t result;

  result = *a1;
  if ((result | 4) != 5)
  {
    if (*((_QWORD *)a1 + 1))
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t sub_2341409D4(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 == 6)
    return *((_QWORD *)a1 + 1);
  if (v1 == 5)
    return 0;
  if (v1 != 1)
    return *((_QWORD *)a1 + 1);
  if (a1[2])
    return 255;
  else
    return 0;
}

void sub_234140A14(int *a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;

  v3 = *(_DWORD *)(a2 + 4);
  if (v3 == 266)
    v4 = 10;
  else
    v4 = *(_DWORD *)(a2 + 4);
  if (v3 == 258)
    v5 = 2;
  else
    v5 = v4;
  sub_234140A38(a1, v5, a2);
}

void sub_234140A38(int *a1, int a2, uint64_t a3)
{
  int v6;

  sub_234140AA4(a1);
  *a1 = a2;
  if (a2 == 1)
  {
    if (a3)
      v6 = 255;
    else
      v6 = 0;
    a1[2] = v6;
  }
  else if (a2 == 5)
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = a3;
  }
}

void sub_234140AA4(int *a1)
{
  int v2;

  v2 = *a1;
  if (*a1 == 1)
  {
    a1[2] = -1;
  }
  else
  {
    if (v2 == 6)
    {
      sub_23413F6D0(*((_QWORD ***)a1 + 1));
    }
    else if (v2 != 5)
    {
      sub_234141344(*((_QWORD *)a1 + 1));
    }
    *((_QWORD *)a1 + 1) = 0;
  }
}

uint64_t sub_234140B00(uint64_t a1, int a2, int *a3)
{
  uint64_t result;
  uint64_t v6;

  if (a2 != 1 && a3)
  {
    if (a2 == 6)
    {
      result = (uint64_t)sub_23418EA9C((uint64_t)a3);
      if (!result)
        return result;
      v6 = result;
      sub_234140AA4((int *)a1);
      *(_DWORD *)a1 = 6;
      *(_QWORD *)(a1 + 8) = v6;
      return 1;
    }
    result = (uint64_t)sub_234141298(a3);
    if (!result)
      return result;
    a3 = (int *)result;
  }
  sub_234140A38((int *)a1, a2, (uint64_t)a3);
  return 1;
}

uint64_t sub_234140B78(int *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = 0xFFFFFFFFLL;
  if (!a1 || !a2)
    return v2;
  v3 = *a1;
  if (*a1 != *(_DWORD *)a2)
    return 0xFFFFFFFFLL;
  switch(v3)
  {
    case 1:
      return (a1[2] - *(_DWORD *)(a2 + 8));
    case 5:
      return 0;
    case 6:
      return sub_23418EB9C(*((_QWORD *)a1 + 1), *(_QWORD *)(a2 + 8));
    default:
      return sub_2341413E0(*((_QWORD *)a1 + 1), *(_QWORD *)(a2 + 8));
  }
}

BOOL sub_234140BE8(int *a1, int *a2, int a3)
{
  uint64_t v3;
  __int128 v5;

  if (a2[1] != 23)
    return 0;
  v3 = *a2;
  *(_QWORD *)&v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)&v5 + 1) = v3;
  return sub_23414A10C(&v5, a1, a3) != 0;
}

BOOL sub_234140C38(int *a1)
{
  return sub_234140BE8(0, a1, 1);
}

uint64_t sub_234140C48(uint64_t a1, char *__s)
{
  size_t v4;
  uint64_t result;
  __int128 v6;

  v4 = strlen(__s);
  *(_QWORD *)&v6 = __s;
  *((_QWORD *)&v6 + 1) = v4;
  result = sub_23414A10C(&v6, 0, 0);
  if ((_DWORD)result)
  {
    if (a1)
    {
      result = sub_2341411A4(a1, __s, v4);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 4) = 23;
    }
    return 1;
  }
  return result;
}

_QWORD *sub_234140CC0(_QWORD *a1, uint64_t a2)
{
  return sub_234140CCC(a1, a2, 0, 0);
}

_QWORD *sub_234140CCC(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  int v9;
  size_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char __str[14];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  if (!sub_2341419C0(a2, (uint64_t)&v11)
    || (a3 || a4) && !sub_234141C5C((int *)&v11, a3, a4)
    || (DWORD1(v12) - 150) < 0xFFFFFF9C)
  {
    return 0;
  }
  if (DWORD1(v12) >= 0x64)
    v9 = DWORD1(v12) - 100;
  else
    v9 = DWORD1(v12);
  if (snprintf(__str, 0xEuLL, "%02d%02d%02d%02d%02d%02dZ", v9, (_DWORD)v12 + 1, HIDWORD(v11), DWORD2(v11), DWORD1(v11), (_DWORD)v11) != 13)abort();
  v7 = a1;
  if (a1 || (v7 = sub_23414474C()) != 0)
  {
    v10 = strlen(__str);
    if (sub_2341411A4((uint64_t)v7, __str, v10))
    {
      *((_DWORD *)v7 + 1) = 23;
      return v7;
    }
    if (!a1)
      sub_234144630((uint64_t)v7);
    return 0;
  }
  return v7;
}

uint64_t sub_234140E14(int *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _OWORD v6[3];
  uint64_t v7;
  _OWORD v8[3];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v5 = 0;
  if (!sub_234140BE8((int *)v8, a1, 1)
    || !sub_2341419C0(a2, (uint64_t)v6)
    || !sub_234141CF4((_DWORD *)&v5 + 1, &v5, (int *)v6, (int *)v8))
  {
    return 4294967294;
  }
  if (v5 > 0)
    return 1;
  if (v5 < 0)
    return 0xFFFFFFFFLL;
  if ((_DWORD)v5)
    v4 = -1;
  else
    v4 = 0;
  if ((int)v5 <= 0)
    return v4;
  else
    return 1;
}

uint64_t sub_234140ED0(_QWORD *a1, unint64_t *a2, int *a3, int *a4, uint64_t a5)
{
  unint64_t v9;
  __int16 v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  unsigned int v18;

  if (a5 < 0)
  {
    v10 = 119;
  }
  else
  {
    v18 = 0;
    v15 = 0;
    v16 = 0;
    *(_QWORD *)&v17 = *a1;
    *((_QWORD *)&v17 + 1) = a5;
    if (sub_234149194(&v17, &v15, &v18) && (v9 = v16, !(v16 >> 30)))
    {
      v11 = HIBYTE(v18) & 0xC0;
      v12 = v18 & 0x1FFFFFFF;
      if ((v18 & 0x1FFFFFFF) < 0x100 || v11 != 0)
      {
        result = HIBYTE(v18) & 0x20;
        *a1 = v15;
        *a2 = v9;
        *a3 = v12;
        *a4 = v11;
        return result;
      }
      v10 = 141;
    }
    else
    {
      v10 = 130;
    }
  }
  sub_2341579B4(12, 0, 123, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/asn1_lib.c", v10);
  return 128;
}

_BYTE **sub_234140FCC(_BYTE **result, int a2, int a3, int a4, char a5)
{
  _BYTE *v5;
  char v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;

  v5 = *result;
  v6 = a5 & 0xC0 | (32 * (a2 != 0));
  if (a4 > 30)
  {
    v8 = 0;
    *v5 = v6 | 0x1F;
    v9 = a4;
    do
    {
      ++v8;
      v10 = v9 >= 0x80;
      v9 >>= 7;
    }
    while (v10);
    v11 = 0;
    do
    {
      v5[v11 + v8] = a4 & 0x7F | (((_DWORD)v11 != 0) << 7);
      a4 = a4 >> 7;
      --v11;
    }
    while (v11 + v8 > 0);
    v7 = &v5[v8 + 1];
  }
  else
  {
    *v5 = v6 | a4 & 0x1F;
    v7 = v5 + 1;
  }
  if (a2 == 2)
  {
    *v7 = 0x80;
    v12 = v7 + 1;
  }
  else if (a3 >= 128)
  {
    v13 = 1;
    v14 = a3;
    do
    {
      ++v13;
      v15 = v14 > 0xFF;
      v14 >>= 8;
    }
    while (v15);
    *v7 = (v13 - 1) | 0x80;
    v16 = v13;
    do
    {
      v7[(v16 - 2) + 1] = a3;
      a3 = a3 >> 8;
      --v16;
    }
    while (v16 > 1);
    v12 = &v7[v13];
  }
  else
  {
    *v7 = a3;
    v12 = v7 + 1;
  }
  *result = v12;
  return result;
}

uint64_t sub_2341410CC(_WORD **a1)
{
  _WORD *v1;

  v1 = *a1;
  *v1 = 0;
  *a1 = v1 + 1;
  return 2;
}

uint64_t sub_2341410E0(int a1, int a2, int a3)
{
  int v3;
  BOOL v4;
  int v5;
  unsigned int v7;

  if (a2 < 0)
    return 0xFFFFFFFFLL;
  v3 = 1;
  if (a3 >= 31)
  {
    do
    {
      ++v3;
      v4 = a3 > 0x7F;
      a3 = a3 >> 7;
    }
    while (v4);
  }
  if (a1 == 2)
  {
    v5 = v3 + 3;
  }
  else
  {
    v5 = v3 + 1;
    if (a2 >= 128)
    {
      v7 = a2;
      do
      {
        ++v5;
        v4 = v7 > 0xFF;
        v7 >>= 8;
      }
      while (v4);
    }
  }
  if (v5 >= (a2 ^ 0x7FFFFFFF))
    return 0xFFFFFFFFLL;
  else
    return (v5 + a2);
}

uint64_t sub_234141154(uint64_t a1, char **a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  result = sub_2341411A4(a1, a2[1], *(int *)a2);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = a2[2];
    return 1;
  }
  return result;
}

uint64_t sub_2341411A4(uint64_t a1, char *__s, size_t __n)
{
  size_t v3;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = __n;
  if ((__n & 0x8000000000000000) != 0)
  {
    if (!__s)
      return 0;
    v3 = strlen(__s);
  }
  if (v3 >= 0x4000001)
  {
    sub_2341579B4(12, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/asn1_lib.c", 287);
    return 0;
  }
  v7 = *(_QWORD **)(a1 + 8);
  if (*(_DWORD *)a1 <= (int)v3)
  {
    if (v7)
    {
      v8 = sub_23418E40C(*(_QWORD **)(a1 + 8), v3 + 1);
      v9 = v7;
      v7 = v8;
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    goto LABEL_14;
  }
  v7 = sub_23418E2E4(v3 + 1);
  v9 = 0;
LABEL_13:
  *(_QWORD *)(a1 + 8) = v7;
  if (!v7)
  {
    result = 0;
    *(_QWORD *)(a1 + 8) = v9;
    return result;
  }
LABEL_14:
  *(_DWORD *)a1 = v3;
  if (__s)
  {
    if (v3)
    {
      memcpy(v7, __s, v3);
      v7 = *(_QWORD **)(a1 + 8);
    }
    *((_BYTE *)v7 + v3) = 0;
  }
  return 1;
}

_QWORD *sub_234141298(int *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (!a1)
    return 0;
  v2 = sub_23418E2E4(0x18uLL);
  v3 = v2;
  if (v2)
  {
    *v2 = 0x400000000;
    v2[1] = 0;
    v2[2] = 0;
    if (sub_2341411A4((uint64_t)v2, *((char **)a1 + 1), *a1))
    {
      *((_DWORD *)v3 + 1) = a1[1];
      v3[2] = *((_QWORD *)a1 + 2);
      return v3;
    }
    sub_23418E3C4((_QWORD *)v3[1]);
    sub_23418E3C4(v3);
    return 0;
  }
  return v3;
}

double sub_234141318()
{
  _QWORD *v0;
  double result;

  v0 = sub_23418E2E4(0x18uLL);
  if (v0)
  {
    *(_QWORD *)&result = 0x400000000;
    *v0 = 0x400000000;
    v0[1] = 0;
    v0[2] = 0;
  }
  return result;
}

void sub_234141344(uint64_t a1)
{
  if (a1)
  {
    sub_23418E3C4(*(_QWORD **)(a1 + 8));
    sub_23418E3C4((_QWORD *)a1);
  }
}

void sub_234141374(uint64_t a1, uint64_t a2, int a3)
{
  sub_23418E3C4(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)a1 = a3;
}

_QWORD *sub_2341413B0(int a1)
{
  _QWORD *result;

  result = sub_23418E2E4(0x18uLL);
  if (result)
  {
    *(_DWORD *)result = 0;
    *((_DWORD *)result + 1) = a1;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

uint64_t sub_2341413E0(uint64_t a1, uint64_t a2)
{
  signed int v4;
  signed int v5;
  uint64_t result;
  int v7;
  int v8;
  BOOL v9;
  BOOL v10;
  _BOOL4 v11;
  __int16 v12;

  v4 = *(_DWORD *)a2;
  v12 = 0;
  v5 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) == 3)
    v5 = sub_23413DA64((unsigned int *)a1, (_BYTE *)&v12 + 1);
  if (*(_DWORD *)(a2 + 4) == 3)
    v4 = sub_23413DA64((unsigned int *)a2, &v12);
  if (v5 < v4)
    return 0xFFFFFFFFLL;
  if (v5 > v4)
    return 1;
  if (HIBYTE(v12) > v12)
    return 0xFFFFFFFFLL;
  if (HIBYTE(v12) < v12)
    return 1;
  if (!v5 || (result = memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), v5), !(_DWORD)result))
  {
    v7 = *(_DWORD *)(a1 + 4);
    v8 = *(_DWORD *)(a2 + 4);
    v10 = __OFSUB__(v7, v8);
    v9 = v7 - v8 < 0;
    v11 = v7 > v8;
    if (v9 != v10)
      return 0xFFFFFFFFLL;
    else
      return v11;
  }
  return result;
}

uint64_t sub_2341414B0(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_2341414B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_2341414C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

const char *sub_2341414C8(unsigned int a1)
{
  unsigned int v1;

  if ((a1 & 0xFFFFFFF7) == 0x102)
    v1 = a1 & 0xFFFFFEFF;
  else
    v1 = a1;
  if (v1 <= 0x1E)
    return off_250505C10[v1];
  else
    return "(unknown)";
}

uint64_t sub_2341414FC(int *a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;

  v9 = 0;
  v4 = sub_234143140(a1, &v9, a2);
  if (v4 <= 0)
  {
    sub_2341579B4(12, 0, 112, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/asn_pack.c", 67);
    return 0;
  }
  else
  {
    v5 = v4;
    if (a3)
    {
      v6 = *a3;
      if (*a3)
      {
        sub_234141374(*a3, (uint64_t)v9, v4);
LABEL_8:
        *a3 = v6;
        return v6;
      }
    }
    sub_234141318();
    v6 = v7;
    if (!v7)
    {
      sub_23418E3C4(v9);
      return v6;
    }
    sub_234141374(v7, (uint64_t)v9, v5);
    if (a3)
      goto LABEL_8;
  }
  return v6;
}

uint64_t sub_2341415BC(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v6 = *((_QWORD *)a1 + 1);
  v4 = sub_234141DAC(0, &v6, *a1, a2);
  if (!v4 || v6 != *((_QWORD *)a1 + 1) + *a1)
  {
    sub_2341579B4(12, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/asn_pack.c", 93);
    sub_234143E94(v4, a2);
    return 0;
  }
  return v4;
}

uint64_t sub_234141658(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[2];

  if (!a2)
    return 0;
  if ((*((_BYTE *)a2 + 5) & 1) != 0)
  {
    v4 = 1;
    if (sub_234144E68(a1, (uint64_t)"-", 1) != 1)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v4 = 0;
  }
  if (*a2)
  {
    if (*a2 >= 1)
    {
      v5 = 0;
      while (1)
      {
        if (v5 && !(v5 % 0x23))
        {
          if (sub_234144E68(a1, (uint64_t)"\\\n", 2) != 2)
            return 0xFFFFFFFFLL;
          LODWORD(v4) = v4 + 2;
        }
        v6 = *((_QWORD *)a2 + 1);
        v8[0] = a0123456789abcd_1[(unint64_t)*(unsigned __int8 *)(v6 + v5) >> 4];
        v8[1] = a0123456789abcd_1[*(_BYTE *)(v6 + v5) & 0xF];
        if (sub_234144E68(a1, (uint64_t)v8, 2) != 2)
          break;
        v4 = (v4 + 2);
        if (++v5 >= *a2)
          return v4;
      }
      return 0xFFFFFFFFLL;
    }
  }
  else if (sub_234144E68(a1, (uint64_t)"00", 2) == 2)
  {
    return v4 | 2;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t sub_2341417C8(int *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  signed int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  _BOOL4 v22;
  unint64_t v23;

  result = 0;
  v4 = a1[5];
  if ((unint64_t)(v4 + 1900) >> 4 > 0x270)
    return result;
  v5 = a1[4];
  if (v5 < 0)
    return result;
  v6 = a1[3];
  if (v6 < 1)
    return result;
  v7 = v5;
  if ((unint64_t)v5 > 0xB)
    return 0;
  v8 = v6;
  v10 = a1[1];
  v9 = a1[2];
  v11 = *a1;
  if (((1 << v7) & 0xAD5) == 0)
  {
    if (((1 << v7) & 0x528) != 0)
    {
      if (v8 < 0x1F)
        goto LABEL_7;
    }
    else
    {
      HIDWORD(v20) = -1030792151 * (unsigned __int16)(v4 + 1900);
      LODWORD(v20) = HIDWORD(v20);
      v19 = v20 >> 2;
      v22 = (v4 & 3) == 0 && v19 > 0x28F5C28;
      HIDWORD(v23) = -1030792151 * (unsigned __int16)(v4 + 1900);
      LODWORD(v23) = HIDWORD(v23);
      if ((v23 >> 4) >= 0xA3D70B && !v22)
      {
        if (v8 < 0x1D)
          goto LABEL_7;
      }
      else if (v8 < 0x1E)
      {
        goto LABEL_7;
      }
    }
    return 0;
  }
  if (v8 > 0x1F)
    return 0;
LABEL_7:
  result = 0;
  if ((int)v11 <= 59 && (int)v10 <= 59 && (int)v9 <= 23 && ((v10 | v9 | v11) & 0x8000000000000000) == 0)
  {
    v12 = v7 + 1;
    v13 = (__PAIR128__(v4 + 1900, v12) - 3) >> 64;
    v14 = v13 - 399;
    if (v13 >= 0)
      v14 = v13;
    v15 = ((5243 * v14) >> 21) + ((5243 * v14) >> 31);
    v16 = v13 - 400 * v15;
    if (v12 <= 2)
      v17 = 9;
    else
      v17 = -3;
    v18 = 26215 * (__int16)(153 * (v17 + v12) + 2);
    *a2 = 60 * (int)v10
        + 3600 * (int)v9
        + v11
        + 86400
        * (v8
         + (int)((v18 >> 17) + (v18 >> 31))
         + 146097 * v15
         + 365 * v16
         + ((int)(((_DWORD)v16 + (((__int16)v16 >> 29) & 3)) << 16) >> 18)
         + (int)(((-5243 * (__int16)v16) >> 19) + ((-5243 * (__int16)v16) >> 31))
         - 1)
        - 0xE79256200;
    return 1;
  }
  return result;
}

uint64_t sub_2341419C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned __int16 v16;
  int v17;
  int v18;

  if ((unint64_t)(a1 - 0x3AFFF44180) < 0xFFFFFFB686974280)
    return 0;
  v3 = a1 % 86400 + 86400;
  if (a1 % 86400 >= 0)
    v3 = a1 % 86400;
  v4 = a1 / 86400 + ((a1 % 86400) >> 63);
  v5 = v4 + 719468;
  if (v4 <= -719468)
    v6 = v4 + 573372;
  else
    v6 = v4 + 719468;
  v7 = v6 / 146097;
  v8 = v5 - 146097 * v7;
  v9 = ((int)(((unint64_t)(1282606671 * (int)v8) >> 32) - v8) >> 10)
     + ((((unint64_t)(1282606671 * (int)v8) >> 32) - v8) >> 31)
     + v8
     + (int)v8 / 36524
     + ((int)(((unint64_t)(441679365 * (int)v8) >> 32) - v8) >> 17)
     + ((((unint64_t)(441679365 * (int)v8) >> 32) - v8) >> 31);
  v10 = v9 / 365;
  v11 = v8
      + (int)(((int)(((unint64_t)(1282606671 * v9) >> 32) - v9) >> 10)
            + ((((unint64_t)(1282606671 * v9) >> 32) - v9) >> 31))
      + v9 / 36500
      - 365 * (v9 / 365);
  v12 = (5 * (int)v11 + 2) / 153;
  if (v11 >= 306)
    v13 = -9;
  else
    v13 = 3;
  v14 = v12 + v13;
  v15 = v3 / 0xE10;
  v16 = v3 % 0xE10;
  v17 = v11 + (153 * v12 + 2) / -5 + 1;
  *(_DWORD *)a2 = v16 % 0x3Cu;
  *(_DWORD *)(a2 + 4) = v16 / 0x3Cu;
  v18 = v10 + 400 * v7;
  if (v14 < 3)
    ++v18;
  *(_DWORD *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 12) = v17;
  *(_DWORD *)(a2 + 16) = v14 - 1;
  *(_DWORD *)(a2 + 20) = v18 - 1900;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return 1;
}

uint64_t sub_234141BF0(int *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = sub_2341417C8(a1, &v4);
  if ((_DWORD)result)
  {
    *a2 = v4;
    return 1;
  }
  return result;
}

uint64_t sub_234141C30(uint64_t *a1, uint64_t a2)
{
  if (sub_2341419C0(*a1, a2))
    return a2;
  else
    return 0;
}

uint64_t sub_234141C5C(int *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v9;

  v9 = 0;
  if (!sub_2341417C8(a1, &v9))
    return 0;
  v6 = v9 + 86400 * a2;
  v7 = v6 >= 1 && (v6 ^ 0x7FFFFFFFFFFFFFFFLL) < a3;
  if (v7 || v6 < 0 && (uint64_t)(0x8000000000000000 - v6) > a3)
    return 0;
  else
    return sub_2341419C0(v6 + a3, (uint64_t)a1);
}

uint64_t sub_234141CF4(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  result = sub_2341417C8(a4, &v10);
  if ((_DWORD)result)
  {
    v9 = 0;
    result = sub_2341417C8(a3, &v9);
    if ((_DWORD)result)
    {
      v8 = (v10 - v9) / 86400;
      *a2 = (v10 - v9) % 86400;
      *a1 = v8;
      return 1;
    }
  }
  return result;
}

uint64_t sub_234141D8C(unsigned int a1)
{
  if (a1 <= 0x1E)
    return qword_2342DA428[a1];
  else
    return 0;
}

uint64_t sub_234141DAC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if ((int)sub_234141E2C((uint64_t)&v7, a2, a3, a4, -1, 0, 0, 0, 0) <= 0)
  {
    sub_234143EB8(&v7, a4);
    if (a1)
      goto LABEL_3;
  }
  else if (a1)
  {
LABEL_3:
    sub_234143EB8(a1, a4);
    result = v7;
    *a1 = v7;
    return result;
  }
  return v7;
}

uint64_t sub_234141E2C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9)
{
  int v10;
  uint64_t v12;
  uint64_t *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t *, uint64_t, _QWORD);
  char v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t *, uint64_t, _QWORD);
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t j;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t *v60;
  char v61;
  unsigned int (*v62)(uint64_t, uint64_t *, uint64_t, _QWORD);
  unsigned int v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;

  v65 = 0;
  v66 = a3;
  if (!result)
    return result;
  v10 = a7;
  v12 = a3;
  v14 = (uint64_t *)result;
  if (a3 >= 0x40000000)
  {
    v12 = 0x3FFFFFFFLL;
    v66 = 0x3FFFFFFFLL;
  }
  v64 = 0;
  v63 = 0;
  if (a9 >= 30)
  {
    v15 = 192;
    v16 = 222;
    goto LABEL_6;
  }
  result = 0;
  v24 = a9 + 1;
  switch(*(_BYTE *)a4)
  {
    case 0:
      v25 = *(int **)(a4 + 8);
      if (!v25)
        return sub_234142834(v14, a2, v12, a4, a5, a6, a7);
      if (a5 != -1 || (_DWORD)a7)
      {
        v15 = 136;
        v16 = 234;
        goto LABEL_6;
      }
      return sub_2341426A0((uint64_t)v14, a2, v12, v25, 0, a8, a9 + 1);
    case 1:
      v65 = *a2;
      if (a5 == -1)
        v26 = 0;
      else
        v26 = a6;
      if (a5 == -1)
        v27 = 16;
      else
        v27 = a5;
      result = sub_234142DBC(&v66, 0, 0, &v64, &v65, v12, v27, v26, v10);
      if ((_DWORD)result == -1)
        return result;
      if (!(_DWORD)result)
      {
        v15 = 158;
        v16 = 367;
        goto LABEL_6;
      }
      if (!(_BYTE)v64)
      {
        v15 = 169;
        v16 = 373;
        goto LABEL_6;
      }
      if (!*v14 && !sub_234144274(v14, a4))
      {
        v15 = 158;
        v16 = 378;
        goto LABEL_6;
      }
      v31 = *(_QWORD *)(a4 + 24);
      if (v31 && (v32 = *(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(v31 + 16)) != 0)
      {
        v62 = v32;
        if (!v32(4, v14, a4, 0))
          goto LABEL_118;
        v61 = 0;
      }
      else
      {
        v62 = 0;
        v61 = 1;
      }
      v42 = *(_QWORD *)(a4 + 8);
      v41 = *(_QWORD *)(a4 + 16);
      if (v41 < 1)
        goto LABEL_84;
      for (i = 0; i < v41; ++i)
      {
        if ((*(_BYTE *)(v42 + 1) & 3) != 0)
        {
          v44 = sub_234144B54(v14, v42, 0);
          if (v44)
          {
            v45 = v44;
            v46 = (uint64_t *)sub_234144B44(v14, v44);
            sub_234144104(v46, v45);
          }
        }
        v42 += 32;
        v41 = *(_QWORD *)(a4 + 16);
      }
      v42 = *(_QWORD *)(a4 + 8);
      if (v41 < 1)
      {
LABEL_84:
        LODWORD(j) = 0;
      }
      else
      {
        for (j = 0; j < v41; ++j)
        {
          v48 = sub_234144B54(v14, v42, 1);
          if (!v48)
            goto LABEL_7;
          v49 = (int *)v48;
          v50 = sub_234144B44(v14, v48);
          if (!v66)
          {
            v41 = *(_QWORD *)(a4 + 16);
            goto LABEL_109;
          }
          v51 = (uint64_t *)v50;
          if (j == *(_QWORD *)(a4 + 16) - 1)
            v52 = 0;
          else
            v52 = *(_BYTE *)v49 & 1;
          v53 = v65;
          v54 = sub_2341426A0(v50, &v65, v66, v49, v52, a8, v24);
          if (v54 == -1)
          {
            sub_234144104(v51, (uint64_t)v49);
          }
          else
          {
            if (!v54)
              goto LABEL_121;
            v66 += v53 - v65;
          }
          v42 += 32;
          v41 = *(_QWORD *)(a4 + 16);
        }
      }
      if (v66)
      {
        v15 = 168;
        v16 = 442;
        goto LABEL_6;
      }
LABEL_109:
      if (v41 > j)
      {
        v57 = j;
        while (1)
        {
          v58 = (_BYTE *)sub_234144B54(v14, v42, 1);
          if (!v58)
            goto LABEL_7;
          v59 = (uint64_t)v58;
          if ((*v58 & 1) == 0)
            break;
          v60 = (uint64_t *)sub_234144B44(v14, (uint64_t)v58);
          sub_234144104(v60, v59);
          v42 += 32;
          if (*(_QWORD *)(a4 + 16) <= ++v57)
            goto LABEL_114;
        }
        sub_2341579B4(12, 0, 121, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", 461);
LABEL_121:
        sub_234143EB8(v14, a4);
        goto LABEL_122;
      }
LABEL_114:
      if (sub_234144A1C(v14, (const void *)*a2, v65 - *a2, a4, a8)
        && ((v61 & 1) != 0 || v62(5, v14, a4, 0)))
      {
        goto LABEL_117;
      }
      goto LABEL_118;
    case 2:
      if (a5 != -1)
      {
        v15 = 193;
        v16 = 293;
        goto LABEL_6;
      }
      v28 = *(_QWORD *)(a4 + 24);
      if (!v28)
      {
        v29 = 0;
        goto LABEL_50;
      }
      v29 = *(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(v28 + 16);
      if (!v29)
      {
LABEL_50:
        v30 = 1;
        goto LABEL_51;
      }
      if (!v29(4, v14, a4, 0))
        goto LABEL_118;
      v30 = 0;
LABEL_51:
      if (*v14)
      {
        v33 = sub_2341448F4(v14, a4);
        if ((v33 & 0x80000000) == 0 && *(_QWORD *)(a4 + 16) > (uint64_t)v33)
        {
          v34 = *(_QWORD *)(a4 + 8) + 32 * v33;
          v35 = (uint64_t *)sub_234144B44(v14, v34);
          sub_234144104(v35, v34);
          sub_234144904(v14, -1, a4);
        }
      }
      else if (!sub_234144274(v14, a4))
      {
        v15 = 158;
        v16 = 313;
        goto LABEL_6;
      }
      v65 = *a2;
      v36 = *(_QWORD *)(a4 + 16);
      if (v36 >= 1)
      {
        v37 = 0;
        v38 = *(int **)(a4 + 8);
        while (1)
        {
          v39 = sub_234144B44(v14, (uint64_t)v38);
          v40 = sub_2341426A0(v39, &v65, v66, v38, 1, a8, v24);
          if (v40 != -1)
            break;
          ++v37;
          v38 += 8;
          v36 = *(_QWORD *)(a4 + 16);
          if (v36 <= v37)
            goto LABEL_91;
        }
        if (v40 >= 1)
        {
          v36 = *(_QWORD *)(a4 + 16);
LABEL_91:
          v55 = v37;
          goto LABEL_92;
        }
        sub_2341579B4(12, 0, 158, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", 332);
        sub_234143EB8(v14, a4);
        if (v38)
        {
LABEL_122:
          sub_234157A5C(4u, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"Field=");
          return 0;
        }
LABEL_8:
        sub_234157A5C(2u, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"Type=");
        return 0;
      }
      v55 = 0;
      v37 = 0;
LABEL_92:
      if (v36 != v37)
      {
        sub_234144904(v14, v55, a4);
        if ((v30 & 1) != 0 || v29(5, v14, a4, 0))
        {
LABEL_117:
          *a2 = v65;
          return 1;
        }
LABEL_118:
        v15 = 101;
        v16 = 480;
        goto LABEL_6;
      }
      if (!v10)
      {
        v15 = 163;
        v16 = 344;
LABEL_6:
        sub_2341579B4(12, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v16);
LABEL_7:
        sub_234143EB8(v14, a4);
        goto LABEL_8;
      }
      sub_234143EB8(v14, a4);
      return 0xFFFFFFFFLL;
    case 4:
      if (a5 != -1)
      {
        v15 = 193;
        v16 = 282;
        goto LABEL_6;
      }
      return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a4 + 24)
                                                                                                + 16))(v14, a2, v12, a4, a7, 0);
    case 5:
      if (a5 != -1)
      {
        v15 = 193;
        v16 = 247;
        goto LABEL_6;
      }
      v65 = *a2;
      if (!sub_234142DBC(0, &v63, (_BYTE *)&v64 + 1, 0, &v65, v12, -1, 0, 1))
      {
        v15 = 158;
        v16 = 255;
        goto LABEL_6;
      }
      if (HIBYTE(v64))
      {
        if (v10)
          return 0xFFFFFFFFLL;
        v15 = 156;
        v16 = 265;
        goto LABEL_6;
      }
      if (v63 <= 0x1E)
        v56 = qword_2342DA428[v63];
      else
        v56 = 0;
      if ((v56 & *(int *)(a4 + 4)) != 0)
        return sub_234142834(v14, a2, v66, a4, v63, 0, 0);
      if (!v10)
      {
        v15 = 157;
        v16 = 274;
        goto LABEL_6;
      }
      return 0xFFFFFFFFLL;
    default:
      return result;
  }
}

uint64_t sub_234142680(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  return sub_234141E2C(a1, a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t sub_2341426A0(uint64_t result, uint64_t *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t *v11;
  int v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  if (result)
  {
    v11 = (uint64_t *)result;
    v12 = *a4;
    v17 = *a2;
    if ((v12 & 0x10) == 0)
      return sub_234142ED8((unint64_t **)result, a2, a3, (uint64_t)a4, a5, a6, a7);
    v18 = 0;
    v16 = 0;
    result = sub_234142DBC(&v18, 0, 0, &v16, &v17, a3, a4[1], v12 & 0xC0, a5);
    if ((_DWORD)result != -1)
    {
      if ((_DWORD)result)
      {
        if (v16)
        {
          v15 = v17;
          if (sub_234142ED8((unint64_t **)v11, &v17, v18, (uint64_t)a4, 0, a6, a7))
          {
            v18 += v15 - v17;
            if (!v18)
            {
              *a2 = v17;
              return 1;
            }
            sub_2341579B4(12, 0, 119, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", 544);
            sub_234144104(v11, (uint64_t)a4);
            return 0;
          }
          v13 = 158;
          v14 = 537;
        }
        else
        {
          v13 = 120;
          v14 = 531;
        }
      }
      else
      {
        v13 = 158;
        v14 = 525;
      }
      sub_2341579B4(12, 0, v13, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v14);
      return 0;
    }
  }
  return result;
}

uint64_t sub_234142834(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  char v7;
  int v9;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  int v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  char v33;
  size_t v34;
  int v35;
  int v36;
  __int128 v37;
  char *__s;

  v7 = a7;
  v9 = a5;
  v34 = 0;
  v33 = 0;
  if (*(_BYTE *)a4 == 5)
  {
    v35 = a5;
    if (a5 == -4)
    {
      LOBYTE(v37) = 0;
      v9 = -1;
LABEL_7:
      if (a7)
      {
        v15 = 135;
        v16 = 688;
        goto LABEL_33;
      }
      v32 = (char *)*a2;
      if (!sub_234142DBC(0, &v35, &v37, 0, (uint64_t *)&v32, a3, -1, 0, 0))
      {
        v15 = 158;
        v16 = 694;
        goto LABEL_33;
      }
      if (!(_BYTE)v37 && (v17 = v35 - 1, (v35 - 1) < 0x1E) && ((0x2FFF8A3Fu >> v17) & 1) != 0)
      {
        v14 = dword_2342DA520[v17];
      }
      else
      {
        v14 = -3;
        v35 = -3;
      }
      goto LABEL_15;
    }
    v14 = a5;
    v9 = -1;
  }
  else
  {
    v14 = *(_DWORD *)(a4 + 4);
    v35 = v14;
    if (v14 == -4)
    {
      LOBYTE(v37) = 0;
      if ((a5 & 0x80000000) == 0)
      {
        v15 = 137;
        v16 = 684;
LABEL_33:
        sub_2341579B4(12, 0, v15, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v16);
        return 0;
      }
      goto LABEL_7;
    }
  }
LABEL_15:
  if (v9 == -1)
    v18 = v14;
  else
    v18 = v9;
  if (v9 == -1)
    v19 = 0;
  else
    v19 = a6;
  v32 = (char *)*a2;
  result = sub_234142DBC(&v34, 0, 0, &v33, (uint64_t *)&v32, a3, v18, v19, v7);
  if ((_DWORD)result == -1)
    return result;
  if (!(_DWORD)result)
  {
    v15 = 158;
    v16 = 709;
    goto LABEL_33;
  }
  v21 = v35;
  if ((v35 + 3) <= 0x14 && ((1 << (v35 + 3)) & 0x180001) != 0)
  {
    if (v35 != -3 && !v33)
    {
      v15 = 178;
      v16 = 720;
      goto LABEL_33;
    }
    v22 = (char *)*a2;
    v23 = (size_t)&v32[v34 - *a2];
    v24 = (uint64_t)&v32[v34];
  }
  else
  {
    if (v33)
    {
      v15 = 179;
      v16 = 731;
      goto LABEL_33;
    }
    v22 = v32;
    v23 = v34;
    v24 = (uint64_t)&v32[v34];
  }
  v32 = (char *)v24;
  __s = v22;
  if (*(_DWORD *)(a4 + 4) == -4)
  {
    v25 = *a1;
    if (!*a1)
    {
      v26 = sub_23414481C();
      if (!v26)
      {
        sub_234144828(0);
        return 0;
      }
      v25 = v26;
      *a1 = v26;
    }
    if (*(_DWORD *)v25 != v21)
      sub_234140A38((int *)v25, v21, 0);
    v27 = (uint64_t *)(v25 + 8);
  }
  else
  {
    v25 = 0;
    v27 = a1;
    a1 = 0;
  }
  switch(v21)
  {
    case 1:
      if (v23 == 1)
      {
        *(_DWORD *)v27 = *v22;
        goto LABEL_88;
      }
      v28 = 106;
      v29 = 799;
      goto LABEL_62;
    case 2:
    case 10:
      if (!sub_23413E674(v27, &__s, v23))
        goto LABEL_63;
      *(_DWORD *)(*v27 + 4) = *(_DWORD *)(*v27 + 4) & 0x100 | v21;
      goto LABEL_85;
    case 3:
      if (!sub_23413DBF4(v27, (unsigned __int8 **)&__s, v23))
        goto LABEL_63;
      goto LABEL_88;
    case 5:
      if (v23)
      {
        v28 = 164;
        v29 = 791;
        goto LABEL_62;
      }
      *v27 = 1;
      goto LABEL_85;
    case 6:
      if (!sub_23413F5A4((const char ***)v27, (uint64_t *)&__s, v23))
        goto LABEL_63;
      goto LABEL_88;
    default:
      *(_QWORD *)&v37 = v22;
      *((_QWORD *)&v37 + 1) = v23;
      switch(v21)
      {
        case 23:
          if (sub_23414A10C(&v37, 0, 1))
            goto LABEL_80;
          v28 = 148;
          v29 = 879;
          goto LABEL_62;
        case 24:
          if (sub_234149E0C(&v37, 0, 0))
            goto LABEL_80;
          v28 = 148;
          v29 = 886;
          goto LABEL_62;
        case 25:
        case 26:
        case 27:
        case 29:
          goto LABEL_80;
        case 28:
          if (!v23)
            goto LABEL_80;
          while (1)
          {
            v36 = 0;
            if (!sub_23414A380((uint64_t *)&v37, &v36))
              break;
            if (!*((_QWORD *)&v37 + 1))
              goto LABEL_80;
          }
          v28 = 149;
          v29 = 863;
          goto LABEL_62;
        case 30:
          if (!v23)
            goto LABEL_80;
          while (1)
          {
            v36 = 0;
            if (!sub_23414A310((unsigned __int16 **)&v37, &v36))
              break;
            if (!*((_QWORD *)&v37 + 1))
              goto LABEL_80;
          }
          v28 = 142;
          v29 = 854;
          goto LABEL_62;
        default:
          if (v21 != 12 || !v23)
            goto LABEL_80;
          break;
      }
      break;
  }
  do
  {
    v36 = 0;
    if (!sub_23414A1AC(&v37, (unsigned int *)&v36))
    {
      v28 = 150;
      v29 = 872;
LABEL_62:
      sub_2341579B4(12, 0, v28, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v29);
      goto LABEL_63;
    }
  }
  while (*((_QWORD *)&v37 + 1));
LABEL_80:
  v30 = *v27;
  if (*v27)
  {
    *(_DWORD *)(v30 + 4) = v21;
    goto LABEL_84;
  }
  v31 = sub_2341413B0(v21);
  if (!v31)
  {
LABEL_63:
    sub_234144828(v25);
    if (a1)
      *a1 = 0;
    return 0;
  }
  v30 = (uint64_t)v31;
  *v27 = (uint64_t)v31;
LABEL_84:
  if (!sub_2341411A4(v30, __s, v23))
  {
    sub_234141344(v30);
    *v27 = 0;
    goto LABEL_63;
  }
LABEL_85:
  if (v21 == 5 && v25)
    *(_QWORD *)(v25 + 8) = 0;
LABEL_88:
  *a2 = (uint64_t)v32;
  return 1;
}

uint64_t sub_234142DBC(_QWORD *a1, _DWORD *a2, _BYTE *a3, _BYTE *a4, uint64_t *a5, uint64_t a6, int a7, int a8, char a9)
{
  char v16;
  int v19;
  __int16 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v21 = *a5;
  v16 = sub_234140ED0(&v21, &v22, (int *)&v23 + 1, (int *)&v23, a6);
  if (v16 < 0)
  {
    v19 = 103;
    v20 = 941;
LABEL_10:
    sub_2341579B4(12, 0, v19, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v20);
    return 0;
  }
  if ((a7 & 0x80000000) == 0 && (HIDWORD(v23) != a7 || (_DWORD)v23 != a8))
  {
    if (a9)
      return 0xFFFFFFFFLL;
    v19 = 190;
    v20 = 950;
    goto LABEL_10;
  }
  if (a4)
    *a4 = v16 & 0x20;
  if (a1)
    *a1 = v22;
  if (a3)
    *a3 = v23;
  if (a2)
    *a2 = HIDWORD(v23);
  *a5 = v21;
  return 1;
}

uint64_t sub_234142ED8(unint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  __int16 v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12 = *(_DWORD *)a4;
  v13 = *(_DWORD *)a4 & 0xC0;
  v23 = *a2;
  v24 = a3;
  if ((v12 & 6) == 0)
  {
    v15 = *(_QWORD *)(a4 + 24);
    if ((v12 & 8) != 0)
    {
      result = sub_234141E2C(a1, &v23, a3, v15, *(unsigned int *)(a4 + 4), v12 & 0xC0, a5, a6, a7);
      if ((_DWORD)result == -1)
        return result;
      if ((_DWORD)result)
        goto LABEL_28;
      v17 = 634;
    }
    else
    {
      result = sub_234141E2C(a1, &v23, a3, v15, 0xFFFFFFFFLL, 0, a5, a6, a7);
      if ((_DWORD)result == -1)
        return result;
      if ((_DWORD)result)
        goto LABEL_28;
      v17 = 644;
    }
LABEL_30:
    sub_2341579B4(12, 0, 158, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", v17);
    goto LABEL_31;
  }
  if ((v12 & 8) != 0)
  {
    v14 = *(_DWORD *)(a4 + 4);
  }
  else
  {
    v13 = 0;
    if ((v12 & 2) != 0)
      v14 = 17;
    else
      v14 = 16;
  }
  result = sub_234142DBC(&v24, 0, 0, 0, &v23, a3, v14, v13, a5);
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result)
    {
      sub_2341579B4(12, 0, 158, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_dec.c", 592);
      return 0;
    }
    v18 = *a1;
    if (*a1)
    {
      v22 = 0;
      while (sub_2341709C4((uint64_t)v18))
      {
        v22 = sub_2341958F0((uint64_t *)v18);
        sub_234143EB8(&v22, *(_QWORD *)(a4 + 24));
      }
      if (!*a1)
        goto LABEL_31;
      goto LABEL_24;
    }
    v19 = sub_2341953A0();
    *a1 = v19;
    if (v19)
    {
LABEL_24:
      v20 = v24;
      if (v24 >= 1)
      {
        while (1)
        {
          v21 = v23;
          v22 = 0;
          if (!sub_234141E2C(&v22, &v23, v20, *(_QWORD *)(a4 + 24), 0xFFFFFFFFLL, 0, 0, a6, a7))
          {
            v17 = 620;
            goto LABEL_30;
          }
          v24 += v21 - v23;
          if (!sub_2341958E8(*a1, v22))
            break;
          v20 = v24;
          if (v24 <= 0)
            goto LABEL_28;
        }
        sub_234143EB8(&v22, *(_QWORD *)(a4 + 24));
        goto LABEL_31;
      }
LABEL_28:
      *a2 = v23;
      return 1;
    }
LABEL_31:
    sub_234144104((uint64_t *)a1, a4);
    return 0;
  }
  return result;
}

uint64_t sub_234143140(int *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int *v13;

  v13 = a1;
  if (!a2 || *a2)
    return sub_234143230(&v13, a2, a3, 0xFFFFFFFFLL, 0, 0);
  v7 = sub_234143230(&v13, 0, a3, 0xFFFFFFFFLL, 0, 0);
  v5 = v7;
  if ((int)v7 >= 1)
  {
    v8 = sub_23418E2E4(v7);
    if (v8)
    {
      v9 = v8;
      v12 = v8;
      v10 = sub_234143230(&v13, &v12, a3, 0xFFFFFFFFLL, 0, 0);
      if ((int)v10 <= 0)
      {
        v11 = v10;
        sub_23418E3C4(v9);
        return v11;
      }
      else
      {
        *a2 = v9;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t sub_234143228(int **a1, void **a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_234143230(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_234143230(int **a1, void **a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  char v6;
  int v7;
  uint64_t v8;
  void **v9;
  int **v10;
  int *v11;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  unsigned int v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t **v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int *v31;
  unint64_t **v32;
  unsigned int v33;

  v6 = a5;
  v7 = a4;
  v8 = a3;
  v9 = a2;
  v10 = a1;
  v33 = 0;
  if (!*(_BYTE *)a3)
  {
LABEL_4:
    v11 = *(int **)(a3 + 8);
    if (!v11)
    {
      a3 = v8;
      return sub_234143AD8(a1, a2, a3, a4, a5, a6);
    }
    if ((*(_BYTE *)v11 & 1) == 0)
      return sub_234143648((unint64_t **)a1, a2, v11, a4, a5, a6);
    v14 = 193;
    v15 = 150;
    goto LABEL_31;
  }
  if (*a1)
  {
    switch(*(_BYTE *)a3)
    {
      case 0:
        goto LABEL_4;
      case 1:
        v16 = sub_234144AB0(&v33, a2, a1, a3);
        if (v16 < 0)
          return 0xFFFFFFFFLL;
        if (v16)
          return v33;
        v33 = 0;
        if (v7 == -1)
        {
          v6 = 0;
          v19 = 16;
        }
        else
        {
          v19 = v7;
        }
        if (*(uint64_t *)(v8 + 16) < 1)
        {
          v26 = 0;
        }
        else
        {
          v20 = 0;
          v21 = *(_QWORD *)(v8 + 8);
          v13 = 0xFFFFFFFFLL;
          do
          {
            v22 = sub_234144B54(v10, v21, 1);
            if (!v22)
              return 0xFFFFFFFFLL;
            v23 = (int *)v22;
            v24 = (unint64_t **)sub_234144B44(v10, v22);
            v25 = sub_234143648(v24, 0, v23, 0xFFFFFFFFLL, 0, 0);
            if (v25 == -1)
              return v13;
            if (v25 > (int)(v33 ^ 0x7FFFFFFF))
              return 0xFFFFFFFFLL;
            v26 = v33 + v25;
            v33 += v25;
            v21 += 32;
            ++v20;
          }
          while (*(_QWORD *)(v8 + 16) > v20);
        }
        v27 = sub_2341410E0(1, v26, v19);
        v13 = v27;
        if (!v9)
          return v13;
        if ((_DWORD)v27 == -1)
          return v13;
        sub_234140FCC((_BYTE **)v9, 1, v33, v19, v6);
        if (*(uint64_t *)(v8 + 16) < 1)
          return v13;
        v28 = 0;
        for (i = *(_QWORD *)(v8 + 8); ; i += 32)
        {
          v30 = sub_234144B54(v10, i, 1);
          if (!v30)
            break;
          v31 = (int *)v30;
          v32 = (unint64_t **)sub_234144B44(v10, v30);
          if ((sub_234143648(v32, v9, v31, 0xFFFFFFFFLL, 0, 0) & 0x80000000) != 0)
            break;
          if (*(_QWORD *)(v8 + 16) <= ++v28)
            return v13;
        }
        return 0xFFFFFFFFLL;
      case 2:
        if ((_DWORD)a4 != -1)
        {
          v14 = 193;
          v15 = 171;
          goto LABEL_31;
        }
        v17 = sub_2341448F4(a1, a3);
        if ((v17 & 0x80000000) != 0 || *(_QWORD *)(v8 + 16) <= (uint64_t)v17)
        {
          v14 = 163;
          v15 = 176;
        }
        else
        {
          v18 = (int *)(*(_QWORD *)(v8 + 8) + 32 * v17);
          if ((*(_BYTE *)v18 & 1) == 0)
          {
            a1 = (int **)sub_234144B44(v10, (uint64_t)v18);
            a2 = v9;
            v11 = v18;
            a4 = 0xFFFFFFFFLL;
            a5 = 0;
            a6 = 0;
            return sub_234143648((unint64_t **)a1, a2, v11, a4, a5, a6);
          }
          v14 = 193;
          v15 = 181;
        }
        goto LABEL_31;
      case 4:
        if ((_DWORD)a4 != -1)
        {
          v14 = 193;
          v15 = 191;
          goto LABEL_31;
        }
        v13 = (*(uint64_t (**)(int **, void **, uint64_t))(*(_QWORD *)(a3 + 24) + 24))(a1, a2, a3);
        if ((_DWORD)v13)
          return v13;
        v14 = 68;
        v15 = 200;
        goto LABEL_31;
      case 5:
        if ((_DWORD)a4 != -1)
        {
          v14 = 193;
          v15 = 162;
          goto LABEL_31;
        }
        LODWORD(a4) = -1;
        a5 = 0;
        break;
      default:
        v14 = 193;
        v15 = 264;
        goto LABEL_31;
    }
    return sub_234143AD8(a1, a2, a3, a4, a5, a6);
  }
  if (!a6)
  {
    v14 = 155;
    v15 = 141;
LABEL_31:
    sub_2341579B4(12, 0, v14, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_enc.c", v15);
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t sub_234143648(unint64_t **a1, void **a2, int *a3, uint64_t a4, unsigned __int8 a5, int a6)
{
  uint64_t v6;
  int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  _BOOL8 v17;
  unint64_t *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  int v22;
  char v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL4 v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _DWORD *v42;
  int v43;
  size_t v44;
  unint64_t v45;
  const void **v46;
  size_t v47;
  int v48;
  char v49;
  unint64_t *v50;
  void *__dst;
  unint64_t *v52;

  v6 = a4;
  v10 = *a3;
  if ((*a3 & 0x18) != 0)
  {
    if ((_DWORD)a4 != -1)
    {
      v11 = 193;
      v12 = 291;
LABEL_4:
      sub_2341579B4(12, 0, v11, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_enc.c", v12);
      return 0xFFFFFFFFLL;
    }
    v6 = a3[1];
    v15 = v10 & 0xC0;
  }
  else if ((_DWORD)a4 == -1)
  {
    v15 = 0;
  }
  else
  {
    v15 = a5 & 0xC0;
  }
  v16 = *a3 & 1 | a6;
  v17 = v16 != 0;
  if ((v10 & 6) != 0)
  {
    v18 = *a1;
    v50 = 0;
    if (v18)
    {
      v19 = v6 != -1;
      v20 = (v10 & 0x10) == 0;
      if ((v10 & 2) != 0)
        v21 = 17;
      else
        v21 = 16;
      if (v20 && v19)
        v22 = v6;
      else
        v22 = v21;
      if (v20 && v19)
        v23 = v15;
      else
        v23 = 0;
      v49 = v23;
      v24 = 0;
      if (sub_2341709C4((uint64_t)v18))
      {
        v25 = 0;
        v13 = 0xFFFFFFFFLL;
        do
        {
          v50 = sub_2341953E8(v18, v25);
          v26 = sub_234143230(&v50, 0, *((_QWORD *)a3 + 3), 0xFFFFFFFFLL, 0, 0);
          if (v26 == -1 || v24 > (v26 ^ 0x7FFFFFFF))
            return v13;
          v24 += v26;
        }
        while (++v25 < sub_2341709C4((uint64_t)v18));
      }
      v13 = sub_2341410E0(1, v24, v22);
      if ((_DWORD)v13 != -1)
      {
        if ((v10 & 0x10) != 0)
        {
          v32 = sub_2341410E0(1, v13, v6);
          v33 = v32;
          if (!a2 || (_DWORD)v32 == -1)
            return v32;
          sub_234140FCC((_BYTE **)a2, 1, v13, v6, v15);
          v13 = v33;
        }
        else if (!a2)
        {
          return v13;
        }
        sub_234140FCC((_BYTE **)a2, 1, v24, v22, v49);
        v34 = *((_QWORD *)a3 + 3);
        if ((v10 & 2) != 0 && (unint64_t)sub_2341709C4((uint64_t)v18) > 1)
        {
          v38 = sub_23418E2E4(v24);
          v39 = sub_2341709C4((uint64_t)v18);
          v40 = sub_23418E380(v39, 0x10uLL);
          v37 = 0;
          if (v40 && v38)
          {
            __dst = v38;
            if (sub_2341709C4((uint64_t)v18))
            {
              v41 = 0;
              v42 = v40 + 1;
              while (1)
              {
                v52 = 0;
                v52 = sub_2341953E8(v18, v41);
                *((_QWORD *)v42 - 1) = __dst;
                v43 = sub_234143230(&v52, &__dst, v34, 0xFFFFFFFFLL, 0, 0);
                *v42 = v43;
                if (v43 < 0)
                  break;
                ++v41;
                v42 += 4;
                if (v41 >= sub_2341709C4((uint64_t)v18))
                  goto LABEL_62;
              }
              v37 = 0;
            }
            else
            {
LABEL_62:
              v44 = sub_2341709C4((uint64_t)v18);
              qsort(v40, v44, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_234143C3C);
              __dst = *a2;
              if (sub_2341709C4((uint64_t)v18))
              {
                v45 = 0;
                v46 = (const void **)(v40 + 1);
                do
                {
                  v47 = *(int *)v46;
                  if ((_DWORD)v47)
                  {
                    memcpy(__dst, *(v46 - 1), v47);
                    v48 = *(_DWORD *)v46;
                  }
                  else
                  {
                    v48 = 0;
                  }
                  __dst = (char *)__dst + v48;
                  ++v45;
                  v46 += 2;
                }
                while (v45 < sub_2341709C4((uint64_t)v18));
              }
              *a2 = __dst;
              v37 = 1;
            }
          }
          sub_23418E3C4(v40);
          sub_23418E3C4(v38);
        }
        else
        {
          if (!sub_2341709C4((uint64_t)v18))
            return v13;
          v35 = 0;
          do
          {
            v52 = 0;
            v52 = sub_2341953E8(v18, v35);
            v36 = sub_234143230(&v52, a2, v34, 0xFFFFFFFFLL, 0, 0);
            if (v36 < 0)
              break;
            ++v35;
          }
          while (v35 < sub_2341709C4((uint64_t)v18));
          v37 = v36 >= 0;
        }
        if (v37)
          return v13;
        else
          return 0xFFFFFFFFLL;
      }
      return v13;
    }
    if (v16)
      return 0;
    v11 = 155;
    v12 = 327;
    goto LABEL_4;
  }
  v28 = *((_QWORD *)a3 + 3);
  if ((v10 & 0x10) != 0)
  {
    v29 = sub_234143230(a1, 0, v28, 0xFFFFFFFFLL, 0, v17);
    v30 = v29;
    if ((int)v29 < 1)
      return v29;
    v31 = sub_2341410E0(1, v29, v6);
    v13 = v31;
    if (!a2)
      return v13;
    if ((_DWORD)v31 == -1)
      return v13;
    sub_234140FCC((_BYTE **)a2, 1, v30, v6, v15);
    if ((sub_234143230(a1, a2, *((_QWORD *)a3 + 3), 0xFFFFFFFFLL, 0, 0) & 0x80000000) == 0)
      return v13;
    return 0xFFFFFFFFLL;
  }
  return sub_234143230(a1, a2, v28, v6, v15, v17);
}

uint64_t sub_234143AD8(int **a1, void **a2, uint64_t a3, int a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v18;
  int v19;

  v18 = *(_DWORD *)(a3 + 4);
  v19 = 0;
  v12 = sub_234143C80(a1, 0, &v19, &v18, a3);
  if ((v12 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if (v19)
  {
    if (a6)
      return 0;
    sub_2341579B4(12, 0, 155, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_enc.c", 508);
    return 0xFFFFFFFFLL;
  }
  v13 = v12;
  v14 = v18;
  if (a4 == -1)
    a4 = v18;
  if (a2)
  {
    if ((v18 + 3) > 0x14 || ((1 << (v18 + 3)) & 0x180001) == 0)
      sub_234140FCC((_BYTE **)a2, 0, v12, a4, a5);
    if ((sub_234143C80(a1, *a2, &v19, &v18, a3) & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    *a2 = (char *)*a2 + v13;
  }
  if ((v14 + 3) > 0x14 || ((1 << (v14 + 3)) & 0x180001) == 0)
    return sub_2341410E0(0, v13, a4);
  return v13;
}

uint64_t sub_234143C3C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a2 + 8);
  v4 = (v2 - v3);
  if (v2 >= v3)
    v2 = *(_DWORD *)(a2 + 8);
  if (!v2)
    return v4;
  result = memcmp(*(const void **)a1, *(const void **)a2, v2);
  if (!(_DWORD)result)
    return v4;
  return result;
}

uint64_t sub_234143C80(int **a1, void *__dst, _DWORD *a3, int *a4, uint64_t a5)
{
  int v5;
  int v6;
  __int16 v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  void **v13;
  void **v14;
  int v15;
  int v16;
  char v17;
  char *p_src;
  int *v19;
  void **v20;
  uint64_t v21;
  char __src;
  void *v24;

  v24 = __dst;
  *a3 = 0;
  if (*(_BYTE *)a5)
  {
    if (*a1)
    {
      if (*(_BYTE *)a5 == 5)
      {
        v5 = (*a1)[1];
        if (v5 < 0 && v5 != -3)
        {
          v6 = 191;
          v7 = 589;
LABEL_50:
          sub_2341579B4(12, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_enc.c", v7);
          return 0xFFFFFFFFLL;
        }
        if (v5 == 266)
          v11 = 10;
        else
          v11 = (*a1)[1];
        if (v5 == 258)
          v10 = 2;
        else
          v10 = v11;
        *a4 = v10;
        goto LABEL_24;
      }
      v8 = *(_DWORD *)(a5 + 4);
      goto LABEL_11;
    }
LABEL_55:
    v12 = 0;
    *a3 = 1;
    return v12;
  }
  v8 = *(_DWORD *)(a5 + 4);
  if (v8 == 1)
  {
LABEL_15:
    v10 = *a4;
    goto LABEL_24;
  }
  if (!*a1)
    goto LABEL_55;
LABEL_11:
  if (v8 != -4)
    goto LABEL_15;
  v9 = *a1;
  v10 = **a1;
  if (v10 < 0 && v10 != -3)
  {
    v6 = 191;
    v7 = 614;
    goto LABEL_50;
  }
  *a4 = v10;
  a1 = (int **)(v9 + 2);
LABEL_24:
  __src = 0;
  v12 = 0;
  switch(v10)
  {
    case 1:
      v16 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 == -1)
        goto LABEL_55;
      if (*(_DWORD *)(a5 + 4) != -4)
      {
        v21 = *(_QWORD *)(a5 + 32);
        if (v16)
        {
          if (v21 > 0)
            goto LABEL_55;
        }
        else if (!v21)
        {
          goto LABEL_55;
        }
      }
      if (v16)
        v17 = -1;
      else
        v17 = 0;
      __src = v17;
      v12 = 1;
      p_src = &__src;
      if (__dst)
        goto LABEL_47;
      return v12;
    case 2:
    case 10:
      v13 = (void **)*a1;
      if (__dst)
        v14 = &v24;
      else
        v14 = 0;
      v15 = sub_23413E46C(v13, (_BYTE **)v14);
      goto LABEL_40;
    case 3:
      v19 = *a1;
      if (__dst)
        v20 = &v24;
      else
        v20 = 0;
      v15 = sub_23413DB1C((uint64_t)v19, (_BYTE **)v20);
LABEL_40:
      if (v15 < 1)
        return 0xFFFFFFFFLL;
      else
        return v15;
    case 5:
      return v12;
    case 6:
      v12 = (*a1)[5];
      if (!(_DWORD)v12)
      {
        v6 = 134;
        v7 = 630;
        goto LABEL_50;
      }
      p_src = (char *)*((_QWORD *)*a1 + 3);
      if (__dst)
      {
LABEL_47:
        if ((_DWORD)v12)
          memcpy(__dst, p_src, (int)v12);
      }
      break;
    default:
      p_src = (char *)*((_QWORD *)*a1 + 1);
      v12 = **a1;
      if (!__dst)
        return v12;
      goto LABEL_47;
  }
  return v12;
}

void sub_234143E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1;
  sub_234143EB8(&v2, a2);
}

void sub_234143EB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t *, uint64_t, _QWORD);
  char v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t *, uint64_t, _QWORD);
  char v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t);
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  if (a1)
  {
    if (*(_BYTE *)a2)
    {
      switch(*(_BYTE *)a2)
      {
        case 0:
          break;
        case 1:
          if (!sub_23414494C(a1, a2))
            return;
          v5 = *(_QWORD *)(a2 + 24);
          if (v5)
          {
            v6 = *(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(v5 + 16);
            if (v6)
            {
              if (v6(2, a1, a2, 0) == 2)
                return;
              v7 = 0;
LABEL_28:
              sub_2341449B4(a1, a2);
              v16 = *(_QWORD *)(a2 + 16);
              if (v16 >= 1)
              {
                v17 = 0;
                v18 = *(_QWORD *)(a2 + 8) + 32 * v16 - 32;
                do
                {
                  v19 = sub_234144B54(a1, v18, 0);
                  if (v19)
                  {
                    v20 = v19;
                    v21 = (uint64_t *)sub_234144B44(a1, v19);
                    sub_234144104(v21, v20);
                  }
                  ++v17;
                  v18 -= 32;
                }
                while (*(_QWORD *)(a2 + 16) > v17);
              }
              if ((v7 & 1) == 0)
                v6(3, a1, a2, 0);
LABEL_35:
              sub_23418E3C4((_QWORD *)*a1);
              *a1 = 0;
              return;
            }
          }
          else
          {
            v6 = 0;
          }
          v7 = 1;
          goto LABEL_28;
        case 2:
          v8 = *(_QWORD *)(a2 + 24);
          if (v8)
          {
            v9 = *(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(v8 + 16);
            if (v9)
            {
              if (v9(2, a1, a2, 0) == 2)
                return;
              v10 = 0;
LABEL_21:
              v13 = sub_2341448F4(a1, a2);
              if ((v13 & 0x80000000) == 0 && *(_QWORD *)(a2 + 16) > (uint64_t)v13)
              {
                v14 = *(_QWORD *)(a2 + 8) + 32 * v13;
                v15 = (uint64_t *)sub_234144B44(a1, v14);
                sub_234144104(v15, v14);
              }
              if ((v10 & 1) == 0)
                v9(3, a1, a2, 0);
              goto LABEL_35;
            }
          }
          else
          {
            v9 = 0;
          }
          v10 = 1;
          goto LABEL_21;
        case 4:
          v11 = *(_QWORD *)(a2 + 24);
          if (v11)
          {
            v12 = *(void (**)(uint64_t *, uint64_t))(v11 + 8);
            if (v12)
              v12(a1, a2);
          }
          return;
        case 5:
          goto LABEL_6;
        default:
          return;
      }
    }
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
      sub_234144104(a1, v4);
    else
LABEL_6:
      sub_2341441B0(a1, a2);
  }
}

void sub_234144104(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;

  if ((*(_BYTE *)a2 & 6) != 0)
  {
    v4 = (unint64_t *)*a1;
    if (sub_2341709C4(*a1))
    {
      v5 = 0;
      do
      {
        v6 = 0;
        v6 = sub_2341953E8(v4, v5);
        sub_234143EB8(&v6, *(_QWORD *)(a2 + 24));
        ++v5;
      }
      while (v5 < sub_2341709C4((uint64_t)v4));
    }
    sub_234141344((uint64_t)v4);
    *a1 = 0;
  }
  else
  {
    sub_234143EB8(a1, *(_QWORD *)(a2 + 24));
  }
}

void sub_2341441B0(uint64_t *a1, uint64_t a2)
{
  int v3;
  int *v4;

  if (*(_BYTE *)a2 == 5)
    goto LABEL_2;
  v3 = *(_DWORD *)(a2 + 4);
  if (v3 > 4)
  {
    if (v3 == 5)
      goto LABEL_3;
    if (v3 == 6)
    {
      sub_23413F6D0((_QWORD **)*a1);
      goto LABEL_3;
    }
LABEL_2:
    sub_234141344(*a1);
LABEL_3:
    *a1 = 0;
    return;
  }
  if (v3 == -4)
  {
    v4 = (int *)*a1;
    if (*a1)
    {
      sub_234140AA4(v4);
      sub_23418E3C4((_QWORD *)*a1);
    }
    goto LABEL_3;
  }
  if (v3 != 1)
    goto LABEL_2;
  *(_DWORD *)a1 = *(_QWORD *)(a2 + 32);
}

uint64_t sub_234144240(uint64_t a1)
{
  uint64_t v2;

  v2 = 0;
  if (sub_234144274(&v2, a1))
    return v2;
  else
    return 0;
}

uint64_t sub_234144274(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t *, uint64_t, _QWORD);
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  unsigned int (**v12)(uint64_t *, uint64_t);
  unsigned int (*v13)(uint64_t *, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  int *v16;
  _DWORD *v17;
  _QWORD *v18;

  v2 = 1;
  switch(*(_BYTE *)a2)
  {
    case 0:
      v5 = *(int **)(a2 + 8);
      if (!v5)
        goto LABEL_5;
      if (!sub_23414448C(a1, v5))
        return 0;
      return v2;
    case 1:
      v6 = *(_QWORD *)(a2 + 24);
      if (!v6)
      {
        v7 = 0;
        goto LABEL_22;
      }
      v7 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(v6 + 16);
      if (!v7)
      {
LABEL_22:
        v9 = 1;
LABEL_23:
        v14 = sub_23418E344(*(_QWORD *)(a2 + 32));
        *a1 = (uint64_t)v14;
        if (!v14)
          return 0;
        sub_234144918(a1, a2);
        sub_234144984(a1, a2);
        if (*(uint64_t *)(a2 + 16) >= 1)
        {
          v15 = 0;
          v16 = *(int **)(a2 + 8);
          do
          {
            v17 = (_DWORD *)sub_234144B44(a1, (uint64_t)v16);
            if (!sub_23414448C(v17, v16))
            {
              sub_234143EB8(a1, a2);
              return 0;
            }
            v16 += 8;
            ++v15;
          }
          while (*(_QWORD *)(a2 + 16) > v15);
        }
        if ((v9 & 1) != 0)
          return 1;
        goto LABEL_29;
      }
      v8 = v7(0, a1, a2, 0);
      if (!v8)
        goto LABEL_31;
      v9 = 0;
      if (v8 != 2)
        goto LABEL_23;
      return v2;
    case 2:
      v10 = *(_QWORD *)(a2 + 24);
      if (v10)
      {
        v7 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(v10 + 16);
        if (v7)
        {
          v11 = v7(0, a1, a2, 0);
          if (!v11)
            goto LABEL_31;
          LOBYTE(v2) = 0;
          if (v11 == 2)
            return 1;
        }
      }
      else
      {
        v7 = 0;
      }
      v18 = sub_23418E344(*(_QWORD *)(a2 + 32));
      *a1 = (uint64_t)v18;
      if (!v18)
        return 0;
      sub_234144904(a1, -1, a2);
      if ((v2 & 1) != 0)
        return 1;
LABEL_29:
      v2 = 1;
      if (v7(1, a1, a2, 0))
        return v2;
      sub_234143EB8(a1, a2);
LABEL_31:
      sub_2341579B4(12, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_new.c", 181);
      return 0;
    case 4:
      v12 = *(unsigned int (***)(uint64_t *, uint64_t))(a2 + 24);
      if (v12)
      {
        v13 = *v12;
        if (v13)
        {
          if (!v13(a1, a2))
            return 0;
        }
      }
      return v2;
    case 5:
LABEL_5:
      if (!sub_234144558(a1, a2))
        return 0;
      return v2;
    default:
      return v2;
  }
}

uint64_t sub_23414448C(_DWORD *a1, int *a2)
{
  int v3;
  uint64_t result;
  char *v5;
  int v6;

  v3 = *a2;
  if ((*a2 & 1) != 0)
  {
    while ((*(_WORD *)a2 & 0x306) == 0)
    {
      v5 = (char *)*((_QWORD *)a2 + 3);
      v6 = *v5;
      if (*v5)
      {
        if ((v6 - 1) < 2)
          goto LABEL_17;
        if (v6 != 5)
        {
          if (v6 == 4)
            goto LABEL_17;
          return 1;
        }
LABEL_14:
        if (*v5 != 5 && *((_DWORD *)v5 + 1) == 1)
        {
          *a1 = *((_QWORD *)v5 + 4);
          return 1;
        }
        goto LABEL_17;
      }
      a2 = (int *)*((_QWORD *)v5 + 1);
      if (!a2)
        goto LABEL_14;
    }
    goto LABEL_17;
  }
  if ((v3 & 0x300) != 0)
  {
LABEL_17:
    *(_QWORD *)a1 = 0;
    return 1;
  }
  if ((v3 & 6) == 0)
    return sub_234144274(a1, *((_QWORD *)a2 + 3));
  result = (uint64_t)sub_2341953A0();
  if (result)
  {
    *(_QWORD *)a1 = result;
    return 1;
  }
  return result;
}

uint64_t sub_234144558(_QWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t result;

  if (!a2)
    return 0;
  if (*(_BYTE *)a2 == 5)
  {
    v3 = -1;
LABEL_4:
    result = (uint64_t)sub_2341413B0(v3);
LABEL_5:
    *a1 = result;
    return result != 0;
  }
  v3 = *(_DWORD *)(a2 + 4);
  if (v3 > 4)
  {
    if (v3 != 5)
    {
      if (v3 != 6)
        goto LABEL_4;
      *a1 = sub_23418F148();
      return 1;
    }
    result = 1;
    *a1 = 1;
  }
  else
  {
    if (v3 != -4)
    {
      if (v3 != 1)
        goto LABEL_4;
      *(_DWORD *)a1 = *(_QWORD *)(a2 + 32);
      return 1;
    }
    result = (uint64_t)sub_23418E2E4(0x10uLL);
    if (result)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)result = -1;
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_234144610(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505D08);
}

uint64_t sub_23414461C(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505D08);
}

_QWORD *sub_234144628()
{
  return sub_2341413B0(4);
}

uint64_t sub_234144634(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505D38);
}

uint64_t sub_234144640(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505D38);
}

_QWORD *sub_23414464C()
{
  return sub_2341413B0(2);
}

uint64_t sub_234144654(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505D68);
}

uint64_t sub_234144660(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505D68);
}

_QWORD *sub_23414466C()
{
  return sub_2341413B0(10);
}

uint64_t sub_234144674(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505D98);
}

uint64_t sub_234144680(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505D98);
}

_QWORD *sub_23414468C()
{
  return sub_2341413B0(3);
}

uint64_t sub_234144694(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505DC8);
}

uint64_t sub_2341446A0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505DC8);
}

_QWORD *sub_2341446AC()
{
  return sub_2341413B0(12);
}

uint64_t sub_2341446B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505DF8);
}

uint64_t sub_2341446C0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505DF8);
}

_QWORD *sub_2341446CC()
{
  return sub_2341413B0(19);
}

uint64_t sub_2341446D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505E28);
}

uint64_t sub_2341446E0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505E28);
}

_QWORD *sub_2341446EC()
{
  return sub_2341413B0(20);
}

uint64_t sub_2341446F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505E58);
}

uint64_t sub_234144700(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505E58);
}

_QWORD *sub_23414470C()
{
  return sub_2341413B0(22);
}

uint64_t sub_234144714(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505E88);
}

uint64_t sub_234144720(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505E88);
}

_QWORD *sub_23414472C()
{
  return sub_2341413B0(27);
}

uint64_t sub_234144734(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505EB8);
}

uint64_t sub_234144740(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505EB8);
}

_QWORD *sub_23414474C()
{
  return sub_2341413B0(23);
}

uint64_t sub_234144754(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505EE8);
}

uint64_t sub_234144760(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505EE8);
}

_QWORD *sub_23414476C()
{
  return sub_2341413B0(24);
}

uint64_t sub_234144774(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505F18);
}

uint64_t sub_234144780(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505F18);
}

_QWORD *sub_23414478C()
{
  return sub_2341413B0(26);
}

uint64_t sub_234144794(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505F48);
}

uint64_t sub_2341447A0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505F48);
}

_QWORD *sub_2341447AC()
{
  return sub_2341413B0(28);
}

uint64_t sub_2341447B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505F78);
}

uint64_t sub_2341447C0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505F78);
}

_QWORD *sub_2341447CC()
{
  return sub_2341413B0(30);
}

uint64_t sub_2341447D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250505FA8);
}

uint64_t sub_2341447E0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250505FA8);
}

uint64_t sub_2341447EC()
{
  return sub_234144240((uint64_t)&unk_250505FA8);
}

void sub_2341447F8(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250505FA8);
}

uint64_t sub_234144804(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250506008);
}

uint64_t sub_234144810(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250506008);
}

uint64_t sub_23414481C()
{
  return sub_234144240((uint64_t)&unk_250506008);
}

void sub_234144828(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250506008);
}

uint64_t sub_234144834(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250506068);
}

uint64_t sub_234144840(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250506068);
}

uint64_t sub_23414484C()
{
  return sub_234144240((uint64_t)&unk_250506068);
}

void sub_234144858(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250506068);
}

uint64_t sub_234144864(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_250506098);
}

uint64_t sub_234144870(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_250506098);
}

uint64_t sub_23414487C()
{
  return sub_234144240((uint64_t)&unk_250506098);
}

void sub_234144888(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_250506098);
}

uint64_t sub_234144894(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505060C8);
}

uint64_t sub_2341448A0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505060C8);
}

uint64_t sub_2341448AC()
{
  return sub_234144240((uint64_t)&unk_2505060C8);
}

void sub_2341448B8(uint64_t a1)
{
  sub_234143E94(a1, (uint64_t)&unk_2505060C8);
}

uint64_t sub_2341448C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505061A8);
}

uint64_t sub_2341448D0(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505061A8);
}

uint64_t sub_2341448DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_234141DAC(a1, a2, a3, (uint64_t)&unk_2505061F8);
}

uint64_t sub_2341448E8(int *a1, void **a2)
{
  return sub_234143140(a1, a2, (uint64_t)&unk_2505061F8);
}

uint64_t sub_2341448F4(_QWORD *a1, uint64_t a2)
{
  return *(unsigned int *)(*a1 + *(int *)(a2 + 4));
}

uint64_t sub_234144904(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(a3 + 4);
  result = *(unsigned int *)(*a1 + v4);
  *(_DWORD *)(v3 + v4) = a2;
  return result;
}

_QWORD *sub_234144918(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)a2 == 1)
  {
    v2 = *(_QWORD *)(a2 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 8) & 1) != 0)
      {
        if (*result)
          *(_DWORD *)(*result + *(int *)(v2 + 12)) = 1;
      }
    }
  }
  return result;
}

BOOL sub_23414494C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return *(_BYTE *)a2 != 1
      || (v2 = *(_QWORD *)(a2 + 24)) == 0
      || (*(_BYTE *)(v2 + 8) & 1) == 0
      || !*a1
      || sub_234193960((unsigned int *)(*a1 + *(int *)(v2 + 12)));
}

_QWORD *sub_234144984(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (result)
  {
    if (*result)
    {
      v2 = *(_QWORD *)(a2 + 24);
      if (v2)
      {
        if ((*(_BYTE *)(v2 + 8) & 2) != 0)
        {
          v3 = (_QWORD *)(*result + *(int *)(v2 + 24));
          *v3 = 0;
          v3[1] = 0;
          v3[2] = 0;
        }
      }
    }
  }
  return result;
}

void sub_2341449B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    if (*a1)
    {
      v2 = *(_QWORD *)(a2 + 24);
      if (v2)
      {
        if ((*(_BYTE *)(v2 + 8) & 2) != 0)
          sub_2341449E0(*a1 + *(int *)(v2 + 24));
      }
    }
  }
}

void sub_2341449E0(uint64_t a1)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a1 + 16);
  if (v2)
    sub_2341936A8(v2);
  else
    sub_23418E3C4(*(_QWORD **)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t sub_234144A1C(_QWORD *a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v9;
  uint64_t result;

  if (!a1)
    return 1;
  if (*a1)
  {
    v5 = *(_QWORD *)(a4 + 24);
    if (v5)
    {
      if ((*(_BYTE *)(v5 + 8) & 2) != 0)
      {
        v9 = (uint64_t *)(*a1 + *(int *)(v5 + 24));
        sub_2341449E0((uint64_t)v9);
        if (a5)
        {
          sub_234193794(a5);
          v9[2] = a5;
          *v9 = (uint64_t)a2;
        }
        else
        {
          result = (uint64_t)sub_23418E58C(a2, a3);
          *v9 = result;
          if (!result)
            return result;
        }
        v9[1] = a3;
      }
    }
  }
  return 1;
}

uint64_t sub_234144AB0(_DWORD *a1, void **a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  if (!a3)
    return 0;
  if (!*a3)
    return 0;
  v4 = *(_QWORD *)(a4 + 24);
  if (!v4)
    return 0;
  if ((*(_BYTE *)(v4 + 8) & 2) == 0)
    return 0;
  v5 = *a3 + *(int *)(v4 + 24);
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  if (a2)
  {
    memcpy(*a2, *(const void **)v5, v6);
    *a2 = (char *)*a2 + *(_QWORD *)(v5 + 8);
  }
  if (a1)
    *a1 = *(_QWORD *)(v5 + 8);
  return 1;
}

uint64_t sub_234144B44(_QWORD *a1, uint64_t a2)
{
  return *a1 + *(_QWORD *)(a2 + 8);
}

uint64_t sub_234144B54(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  unsigned __int16 *v5;
  unsigned int v6;
  uint64_t v7;

  if ((*(_BYTE *)(a2 + 1) & 3) == 0)
    return a2;
  v4 = *(_QWORD **)(a2 + 24);
  v5 = *(unsigned __int16 **)(*a1 + v4[1]);
  if (!v5)
  {
    a2 = v4[6];
    if (a2)
      return a2;
LABEL_10:
    if (a3)
      sub_2341579B4(12, 0, 186, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/asn1/tasn_utl.c", 265);
    return 0;
  }
  v6 = sub_23418EBF8(v5);
  v7 = v4[4];
  if (v7 < 1)
  {
LABEL_7:
    a2 = v4[5];
    if (a2)
      return a2;
    goto LABEL_10;
  }
  a2 = v4[3] + 8;
  while (*(_DWORD *)(a2 - 8) != v6)
  {
    a2 += 40;
    if (!--v7)
      goto LABEL_7;
  }
  return a2;
}

_QWORD *sub_234144BFC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int (*v4)(_QWORD *);

  v2 = sub_23418E344(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *v2 = a1;
    *((_DWORD *)v2 + 5) = 1;
    *((_DWORD *)v2 + 9) = 1;
    sub_23415F254(v2 + 1);
    v4 = *(unsigned int (**)(_QWORD *))(a1 + 56);
    if (v4)
    {
      if (!v4(v3))
      {
        sub_23418E3C4(v3);
        return 0;
      }
    }
  }
  return v3;
}

BOOL sub_234144C64(uint64_t a1)
{
  uint64_t v1;
  unint64_t **v2;
  _BOOL8 result;
  void (*v4)(unint64_t **);

  if (!a1)
    return 1;
  v1 = a1;
  while (1)
  {
    v2 = (unint64_t **)v1;
    result = sub_234193960((unsigned int *)(v1 + 36));
    if (!result)
      break;
    v1 = *(_QWORD *)(v1 + 48);
    v2[6] = 0;
    if (*v2)
    {
      v4 = (void (*)(unint64_t **))(*v2)[8];
      if (v4)
        v4(v2);
    }
    sub_23415F25C((uint64_t)&unk_256157B10, (uint64_t)v2, v2 + 1);
    sub_23418E3C4(v2);
    if (!v1)
      return 1;
  }
  return result;
}

uint64_t sub_234144CEC(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = *(_QWORD *)(result + 48);
    *(_QWORD *)(v1 + 48) = 0;
  }
  return result;
}

uint64_t sub_234144D00(uint64_t a1)
{
  sub_234193914((unsigned int *)(a1 + 36));
  return 1;
}

uint64_t sub_234144D20(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  int v6;
  __int16 v7;

  if (!a1 || !*(_QWORD *)a1 || (v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24)) == 0)
  {
    v6 = 115;
    v7 = 129;
LABEL_9:
    sub_2341579B4(17, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", v7);
    return 4294967294;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    v6 = 114;
    v7 = 133;
    goto LABEL_9;
  }
  if (a3 < 1)
    return 0;
  result = v4(a1);
  if ((int)result >= 1)
    *(_QWORD *)(a1 + 56) += result;
  return result;
}

uint64_t sub_234144DC4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  int v6;
  __int16 v7;

  if (!a1 || !*(_QWORD *)a1 || (v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40)) == 0)
  {
    v6 = 115;
    v7 = 148;
LABEL_9:
    sub_2341579B4(17, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", v7);
    return 4294967294;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    v6 = 114;
    v7 = 152;
    goto LABEL_9;
  }
  if (a3 < 1)
    return 0;
  result = v4(a1);
  if ((int)result >= 1)
    *(_QWORD *)(a1 + 56) += result;
  return result;
}

uint64_t sub_234144E68(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  int v6;
  __int16 v7;

  if (!a1 || !*(_QWORD *)a1 || (v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16)) == 0)
  {
    v6 = 115;
    v7 = 167;
LABEL_9:
    sub_2341579B4(17, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", v7);
    return 4294967294;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    v6 = 114;
    v7 = 171;
    goto LABEL_9;
  }
  if (a3 < 1)
    return 0;
  result = v4(a1);
  if ((int)result >= 1)
    *(_QWORD *)(a1 + 64) += result;
  return result;
}

uint64_t sub_234144F0C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v6;
  int v7;

  while (a3)
  {
    if (a3 >= 0x7FFFFFFF)
      v6 = 0x7FFFFFFF;
    else
      v6 = a3;
    v7 = sub_234144E68(a1, a2, v6);
    a2 += v7;
    a3 -= v7;
    if (v7 <= 0)
      return 0;
  }
  return 1;
}

uint64_t sub_234144F70(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (!(v4 >> 31))
    return sub_234144E68(a1, (uint64_t)__s, v4);
  sub_2341579B4(17, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", 201);
  return 0xFFFFFFFFLL;
}

uint64_t sub_234144FD8(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_234144FF8(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    if (*(_QWORD *)result && (v1 = *(uint64_t (**)(void))(*(_QWORD *)result + 48)) != 0)
    {
      return v1();
    }
    else
    {
      sub_2341579B4(17, 0, 115, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", 217);
      return -2;
    }
  }
  return result;
}

uint64_t sub_234145044(uint64_t a1)
{
  if (sub_234144FF8(a1) >= 1)
    return 0;
  else
    return 0;
}

uint64_t sub_234145074(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_234145098(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_2341450B8(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_2341450D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) |= a2;
  return result;
}

uint64_t sub_2341450E8(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 24) & a2;
}

uint64_t sub_2341450F4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 1;
}

uint64_t sub_234145100(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 2;
}

uint64_t sub_23414510C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 8;
}

uint64_t sub_234145118(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 4;
}

uint64_t sub_234145124(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_23414512C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t sub_234145134(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) &= ~a2;
  return result;
}

uint64_t sub_234145144(uint64_t result)
{
  *(_DWORD *)(result + 24) |= 9u;
  return result;
}

uint64_t sub_234145158(uint64_t result)
{
  *(_DWORD *)(result + 24) |= 0xAu;
  return result;
}

uint64_t sub_23414516C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 0xF;
}

uint64_t sub_234145178(uint64_t result)
{
  *(_QWORD *)(result + 24) = *(_DWORD *)(result + 24) & 0xFFFFFFF0;
  return result;
}

uint64_t sub_234145188(unsigned int **a1)
{
  return **a1;
}

uint64_t sub_234145194(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v1 & 0xFFFFFFF0;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_QWORD *)(result + 48);
  *(_DWORD *)(result + 24) = v1 & 0xFFFFFFF0 | *(_DWORD *)(v2 + 24) & 0xF;
  *(_DWORD *)(result + 28) = *(_DWORD *)(v2 + 28);
  return result;
}

uint64_t sub_2341451BC(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1)
  {
    if (*(_QWORD *)a1)
    {
      v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 72);
      if (v1)
        return v1();
    }
    sub_2341579B4(17, 0, 115, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", 313);
  }
  return 0;
}

uint64_t sub_234145208(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_234144FF8(a1);
  return v1 & ~(v1 >> 63);
}

uint64_t sub_23414522C(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_234144FF8(a1);
  return v1 & ~(v1 >> 63);
}

uint64_t sub_234145250(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_234145270(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_234145278(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_234145280(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v2 = result;
    do
    {
      v3 = v2;
      v2 = *(_QWORD *)(v2 + 48);
    }
    while (v2);
    *(_QWORD *)(v3 + 48) = a2;
  }
  return result;
}

uint64_t sub_23414529C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

int *sub_2341452A8(int *result, int a2)
{
  int v2;

  for (; result; result = (int *)*((_QWORD *)result + 6))
  {
    if (*(_QWORD *)result)
    {
      v2 = **(_DWORD **)result;
      if ((_BYTE)a2)
      {
        if (v2 == a2)
          return result;
      }
      else if ((v2 & a2) != 0)
      {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_2341452E0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;

  if (a2 >= a3)
    v4 = a3;
  else
    v4 = a2;
  v5 = v4 + 1;
  while (--v5)
  {
    if (sub_234144F70(a1, " ") != 1)
      return 0;
  }
  return 1;
}

uint64_t sub_234145340(uint64_t a1)
{
  return sub_234157878((uint64_t (*)(char *, size_t, uint64_t))sub_234145350, a1);
}

uint64_t sub_234145350(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  int v7;

  while (a2)
  {
    if (a2 >= 0x7FFFFFFF)
      v6 = 0x7FFFFFFF;
    else
      v6 = a2;
    v7 = sub_234144E68(a3, a1, v6);
    a1 += v7;
    a2 -= v7;
    if (v7 <= 0)
      return 0;
  }
  return 1;
}

uint64_t sub_2341453B4(uint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t a4)
{
  int v8;
  int v9;
  __int16 *p_src;
  unint64_t v11;
  int v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  _BYTE *v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  __int16 __src;
  _BYTE v40[4];

  v8 = sub_234144D20(a1, (uint64_t)&__src, 2);
  v9 = v8;
  if (v8 < 1)
  {
LABEL_8:
    if (v9 > 0 || v8)
    {
      v13 = 162;
      v14 = 542;
    }
    else
    {
      v13 = 123;
      v14 = 540;
    }
    goto LABEL_73;
  }
  p_src = &__src;
  v11 = 2;
  while (1)
  {
    v11 -= v8;
    if (!v11)
      break;
    p_src = (__int16 *)((char *)p_src + v8);
    if (v11 >> 31)
      v12 = 0x7FFFFFFF;
    else
      v12 = v11;
    v8 = sub_234144D20(a1, (uint64_t)p_src, v12);
    if (v8 < 1)
      goto LABEL_8;
  }
  if ((~__src & 0x1F) == 0)
  {
    v13 = 109;
    v14 = 552;
LABEL_73:
    sub_2341579B4(12, 0, v13, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", v14);
    return 0;
  }
  v15 = HIBYTE(__src);
  if (__src < 0)
  {
    v19 = HIBYTE(__src) & 0x7F;
    if ((__src & 0x20) != 0 && (__src & 0x7F00) == 0)
    {
      if (a4 >= 0x1002)
        v20 = 4098;
      else
        v20 = a4;
      if (v20 >= 2)
      {
        v21 = sub_23418E2E4(v20);
        *a2 = (uint64_t)v21;
        if (v21)
        {
          *(_WORD *)v21 = __src;
          if (v20 != 2)
          {
            v22 = 2;
            do
            {
              v23 = v20 - v22 >= 0x7FFFFFFF ? 0x7FFFFFFF : v20 - v22;
              v24 = sub_234144D20(a1, *a2 + v22, v23);
              if (v24 == -1)
                break;
              if (!v24)
              {
                *a3 = v22;
                return 1;
              }
              v22 += v24;
              if (v20 < a4 && v20 - v22 <= 0x7FF)
              {
                if (v20 + 4096 > a4 || v20 > 0xFFFFFFFFFFFFEFFFLL)
                  v20 = a4;
                else
                  v20 += 4096;
                v26 = sub_23418E40C((_QWORD *)*a2, v20);
                if (!v26)
                  break;
                *a2 = (uint64_t)v26;
              }
            }
            while (v22 != v20);
          }
          sub_23418E3C4((_QWORD *)*a2);
        }
      }
      v13 = 162;
      v14 = 568;
      goto LABEL_73;
    }
    if ((v19 - 5) <= 0xFFFFFFFB)
    {
      v13 = 109;
      v14 = 575;
      goto LABEL_73;
    }
    v32 = v40;
    v33 = HIBYTE(__src) & 0x7F;
    do
    {
      if (v33 >> 31)
        v34 = 0x7FFFFFFF;
      else
        v34 = v33;
      v35 = sub_234144D20(a1, (uint64_t)v32, v34);
      if (v35 < 1)
      {
        v13 = 162;
        v14 = 580;
        goto LABEL_73;
      }
      v32 += v35;
      v33 -= v35;
    }
    while (v33);
    if (!(_DWORD)v19)
      goto LABEL_70;
    LODWORD(v15) = 0;
    v16 = v19 + 2;
    v36 = v40;
    v37 = v19;
    do
    {
      v38 = *v36++;
      v15 = v38 | ((_DWORD)v15 << 8);
      --v37;
    }
    while (v37);
    if (v15 < 0x80)
    {
LABEL_70:
      v13 = 109;
      v14 = 593;
      goto LABEL_73;
    }
    if (!(v15 >> (8 * v19 - 8)))
    {
      v13 = 109;
      v14 = 599;
      goto LABEL_73;
    }
  }
  else
  {
    v16 = 2;
  }
  v17 = v16 + v15;
  if (v15 >> 31)
    v18 = 1;
  else
    v18 = v17 > a4;
  if (v18)
  {
    v13 = 177;
    v14 = 609;
    goto LABEL_73;
  }
  *a3 = v17;
  result = (uint64_t)sub_23418E2E4(v17);
  *a2 = result;
  if (result)
  {
    memcpy((void *)result, &__src, v16);
    if (!v15)
      return 1;
    v28 = *a2 + v16;
    while (1)
    {
      v29 = v15 >> 31 ? 0x7FFFFFFF : v15;
      v30 = sub_234144D20(a1, v28, v29);
      if (v30 < 1)
        break;
      v31 = v30;
      v28 += v30;
      result = 1;
      v15 -= v31;
      if (!v15)
        return result;
    }
    sub_2341579B4(12, 0, 162, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/bio.c", 621);
    sub_23418E3C4((_QWORD *)*a2);
    return 0;
  }
  return result;
}

uint64_t sub_234145778(uint64_t result)
{
  *(_DWORD *)(result + 24) |= 5u;
  return result;
}

uint64_t sub_23414578C()
{
  uint64_t v0;

  sub_234195C38(&stru_256157BF0);
  v0 = dword_256157CB8;
  if (dword_256157CB8 <= 255)
    ++dword_256157CB8;
  else
    v0 = 0xFFFFFFFFLL;
  sub_234195C54(&stru_256157BF0);
  return v0;
}

_QWORD *sub_2341457E0(int a1, uint64_t a2)
{
  _QWORD *result;

  result = sub_23418E344(0x50uLL);
  if (result)
  {
    *(_DWORD *)result = a1;
    result[1] = a2;
  }
  return result;
}

uint64_t sub_234145818(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 56) = a2;
  return 1;
}

uint64_t sub_234145824(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 64) = a2;
  return 1;
}

uint64_t sub_234145830(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  return 1;
}

uint64_t sub_23414583C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 24) = a2;
  return 1;
}

uint64_t sub_234145848(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 40) = a2;
  return 1;
}

uint64_t sub_234145854(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 48) = a2;
  return 1;
}

uint64_t sub_234145860(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_234145868(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_234145870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_234145878(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_234145880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t sub_234145888(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_234145890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23415F0A8((uint64_t)&unk_256157B10, a1, a2, a5);
}

uint64_t sub_2341458A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return sub_23415F178((unint64_t **)(a1 + 8), a2, a3);
}

unint64_t *sub_2341458B0(uint64_t a1, unsigned int a2)
{
  return sub_23415F204((unint64_t **)(a1 + 8), a2);
}

_QWORD *sub_2341458B8(const char *a1, const char *a2)
{
  FILE *v2;
  FILE *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;

  v2 = fopen(a1, a2);
  if (v2)
  {
    v3 = v2;
    result = sub_234145994();
    if (result)
      return result;
    fclose(v3);
  }
  else
  {
    sub_2341579B4(2, 0, 0, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", 110);
    sub_234157A5C(5u, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"fopen('");
    if (*__error() == 2)
    {
      v12 = 110;
      v13 = 114;
    }
    else
    {
      v12 = 112;
      v13 = 116;
    }
    sub_2341579B4(17, 0, v12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", v13);
  }
  return 0;
}

_QWORD *sub_234145994()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_234144BFC((uint64_t)&unk_250506228);
  v1 = v0;
  if (v0)
    sub_234144FF8((uint64_t)v0);
  return v1;
}

void *sub_2341459E8()
{
  return &unk_250506228;
}

uint64_t sub_2341459F4(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_234145A14(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_234145A34(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_234145A54(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_234145A74(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_234145A94(uint64_t a1)
{
  return sub_234144FF8(a1);
}

uint64_t sub_234145AB4(uint64_t result)
{
  return sub_234144FF8(result);
}

uint64_t sub_234145AC4(uint64_t result)
{
  return sub_234144FF8(result);
}

uint64_t sub_234145AD4(uint64_t a1, void *__ptr, unsigned int a3)
{
  uint64_t result;

  if (!*(_DWORD *)(a1 + 16))
    return 0;
  LODWORD(result) = fwrite(__ptr, (int)a3, 1uLL, *(FILE **)(a1 + 40));
  if ((int)result <= 0)
    return result;
  else
    return a3;
}

size_t sub_234145B20(uint64_t a1, void *__ptr, int a3)
{
  size_t v4;

  if (!*(_DWORD *)(a1 + 16))
    return 0;
  v4 = fread(__ptr, 1uLL, a3, *(FILE **)(a1 + 40));
  if (!v4 && ferror(*(FILE **)(a1 + 40)))
  {
    sub_2341579B4(2, 0, 0, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", 161);
    sub_2341579B4(17, 0, 2, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", 162);
    return 0xFFFFFFFFLL;
  }
  return v4;
}

char *sub_234145BB4(uint64_t a1, char *a2, int a3)
{
  char *result;

  if (!a3)
    return 0;
  result = fgets(a2, a3, *(FILE **)(a1 + 40));
  if (result)
    return (char *)strlen(a2);
  *a2 = 0;
  return result;
}

uint64_t sub_234145C04(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  const char *v9;
  FILE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;

  v4 = a3;
  result = 0;
  if (a2 <= 105)
  {
    switch(a2)
    {
      case 1:
        v4 = 0;
        goto LABEL_12;
      case 2:
        LODWORD(result) = feof(*(FILE **)(a1 + 40));
        return (int)result;
      case 3:
        goto LABEL_36;
      case 8:
        return *(int *)(a1 + 20);
      case 9:
        *(_DWORD *)(a1 + 20) = a3;
        return 1;
      case 11:
        return fflush(*(FILE **)(a1 + 40)) == 0;
      default:
        return result;
    }
  }
  if (a2 > 107)
  {
    if (a2 != 108)
    {
      if (a2 == 128)
      {
LABEL_12:
        LODWORD(result) = fseek(*(FILE **)(a1 + 40), v4, 0);
        return (int)result;
      }
      else if (a2 == 133)
      {
LABEL_36:
        JUMPOUT(0x23493EAB8);
      }
      return result;
    }
    sub_234145E38(a1);
    *(_DWORD *)(a1 + 20) = v4 & 1;
    if ((v4 & 8) != 0)
    {
      if ((v4 & 2) != 0)
        v9 = "ab+";
      else
        v9 = "ab";
    }
    else
    {
      v8 = v4 & 6;
      if (v8 == 6)
      {
        v9 = "rb+";
      }
      else
      {
        if ((v4 & 4) != 0)
          v9 = "wb";
        else
          v9 = "rb";
        if (!v8)
        {
          v18 = 100;
          v19 = 235;
LABEL_34:
          sub_2341579B4(17, 0, v18, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", v19);
          return 0;
        }
      }
    }
    v10 = fopen(a4, v9);
    if (v10)
    {
      *(_QWORD *)(a1 + 40) = v10;
      result = 1;
      *(_DWORD *)(a1 + 16) = 1;
      return result;
    }
    sub_2341579B4(2, 0, 0, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bio/file.c", 241);
    sub_234157A5C(5u, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"fopen('");
    v18 = 2;
    v19 = 243;
    goto LABEL_34;
  }
  if (a2 == 106)
  {
    sub_234145E38(a1);
    *(_QWORD *)(a1 + 40) = a4;
    result = 1;
    *(_DWORD *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + 20) = v4 & 1;
  }
  else
  {
    if (a4)
      *(_QWORD *)a4 = *(_QWORD *)(a1 + 40);
    return 1;
  }
  return result;
}

uint64_t sub_234145E38(uint64_t a1)
{
  FILE *v2;

  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_DWORD *)(a1 + 16))
    {
      v2 = *(FILE **)(a1 + 40);
      if (v2)
      {
        fclose(v2);
        *(_QWORD *)(a1 + 40) = 0;
      }
    }
    *(_DWORD *)(a1 + 16) = 0;
  }
  return 1;
}

BOOL sub_234145E7C(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v6;
  BOOL v7;
  unint64_t i;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int j;
  int v14;
  int v15;
  int v17[2];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[5];
  char v22;
  char v23;
  char v24;
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v18 = 0u;
  v19 = 0u;
  *(_QWORD *)v17 = a1;
  v20 = a4;
  if (!a3)
    return 1;
  v6 = 0;
  v7 = 0;
  for (i = 0; i != a3; v7 = i >= a3)
  {
    if (!v6)
    {
      sub_2341452E0(*(uint64_t *)v17, v20, 0xFFFFFFFF);
      v21[0] = a0123456789abcd_2[DWORD2(v19) >> 28];
      v21[1] = a0123456789abcd_2[(*((_QWORD *)&v19 + 1) >> 24) & 0xFLL];
      v21[2] = a0123456789abcd_2[(*((_QWORD *)&v19 + 1) >> 20) & 0xFLL];
      v21[3] = a0123456789abcd_2[(*((_QWORD *)&v19 + 1) >> 16) & 0xFLL];
      v21[4] = a0123456789abcd_2[WORD4(v19) >> 12];
      v22 = a0123456789abcd_2[(*((_QWORD *)&v19 + 1) >> 8) & 0xFLL];
      v23 = a0123456789abcd_2[BYTE8(v19) >> 4];
      v24 = a0123456789abcd_2[BYTE8(v19) & 0xF];
      v25 = 8224;
      if ((sub_234144E68(*(uint64_t *)v17, (uint64_t)v21, 10) & 0x80000000) != 0)
        break;
      v6 = DWORD1(v19);
    }
    v9 = *(unsigned __int8 *)(a2 + i);
    v21[0] = a0123456789abcd_2[v9 >> 4];
    v21[1] = a0123456789abcd_2[v9 & 0xF];
    v21[2] = 32;
    if (v6 == 15)
    {
      *(_WORD *)&v21[3] = 31776;
      v10 = 5;
    }
    else if (v6 == 7)
    {
      v21[3] = 32;
      v10 = 4;
    }
    else
    {
      v10 = 3;
    }
    if ((sub_234144E68(*(uint64_t *)v17, (uint64_t)v21, v10) & 0x80000000) != 0)
      break;
    v11 = *(unsigned __int8 *)(a2 + i);
    if ((v11 - 127) < 0xFFFFFFA1)
      LOBYTE(v11) = 46;
    *((_BYTE *)&v17[2] + DWORD1(v19)) = v11;
    v6 = DWORD1(v19) + 1;
    DWORD1(v19) = v6;
    ++*((_QWORD *)&v19 + 1);
    if (v6 == 16)
    {
      LOWORD(v19) = 2684;
      if ((sub_234144E68(*(uint64_t *)v17, (uint64_t)&v18, 18) & 0x80000000) != 0)
        break;
      v6 = 0;
      DWORD1(v19) = 0;
    }
    ++i;
  }
  if (!v7)
    return 0;
  v12 = DWORD1(v19);
  if (!DWORD1(v19))
    return 1;
  qmemcpy(v21, "    |", sizeof(v21));
  if (DWORD1(v19) <= 0xF)
  {
    for (j = DWORD1(v19); j < 0x10; DWORD1(v19) = j)
    {
      v14 = j == 15 ? 5 : 3;
      v15 = j == 7 ? 4 : v14;
      if ((sub_234144E68(*(uint64_t *)v17, (uint64_t)v21, v15) & 0x80000000) != 0)
        return 0;
      j = DWORD1(v19) + 1;
    }
  }
  *((_BYTE *)&v18 + v12) = 124;
  *((_BYTE *)&v18 + (v12 + 1)) = 10;
  return (sub_234144E68(*(uint64_t *)v17, (uint64_t)&v18, (int)v12 + 2) & 0x80000000) == 0;
}

uint64_t sub_234146138(uint64_t a1, char *__format, ...)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  int v9;
  char __str[256];
  uint64_t v12;
  va_list va;

  va_start(va, __format);
  v12 = *MEMORY[0x24BDAC8D0];
  v4 = vsnprintf(__str, 0x100uLL, __format, va);
  if ((v4 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if (v4 > 0xFF)
  {
    v6 = v4 + 1;
    v7 = (char *)sub_23418E2E4(v6);
    if (v7)
    {
      v8 = v7;
      v9 = vsnprintf(v7, v6, __format, va);
      v5 = sub_234144E68(a1, (uint64_t)v8, v9);
      sub_23418E3C4(v8);
      return v5;
    }
    return 0xFFFFFFFFLL;
  }
  return sub_234144E68(a1, (uint64_t)__str, v4);
}

double sub_234146234(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  result = 2.87627503e82;
  *(_OWORD *)(a1 + 32) = xmmword_2342DA5E0;
  *(_OWORD *)(a1 + 48) = unk_2342DA5F0;
  *(_OWORD *)a1 = xmmword_2342DA5C0;
  *(_OWORD *)(a1 + 16) = unk_2342DA5D0;
  *(_QWORD *)a1 ^= 0x1010020uLL;
  return result;
}

_QWORD *sub_234146288(_QWORD *result, char *__src, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  char *v9;

  if (a3)
  {
    v5 = (uint64_t)result;
    v6 = result[26];
    if (128 - v6 >= a3)
      v7 = a3;
    else
      v7 = 128 - v6;
    if (v7)
    {
      result = memcpy((char *)result + v6 + 80, __src, v7);
      v6 = *(_QWORD *)(v5 + 208);
    }
    *(_QWORD *)(v5 + 208) = v6 + v7;
    v8 = a3 - v7;
    if (v8)
    {
      v9 = &__src[v7];
      sub_234146360((__int128 *)v5, v5 + 80, 128, 0);
      *(_QWORD *)(v5 + 208) = 0;
      if (v8 >= 0x81)
      {
        do
        {
          sub_234146360((__int128 *)v5, (uint64_t)v9, 128, 0);
          v9 += 128;
          v8 -= 128;
        }
        while (v8 > 0x80);
      }
      result = memcpy((void *)(v5 + 80), v9, v8);
      *(_QWORD *)(v5 + 208) = v8;
    }
  }
  return result;
}

int8x16_t sub_234146360(__int128 *a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int8x16_t result;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD v85[10];

  v85[9] = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v81 = *a1;
  v82 = v4;
  v5 = a1[3];
  v83 = a1[2];
  v84 = v5;
  v6 = *((_QWORD *)a1 + 8);
  v7 = *((_QWORD *)a1 + 9);
  v8 = v6 + a3;
  *((_QWORD *)a1 + 8) = v6 + a3;
  if (__CFADD__(v6, a3))
    *((_QWORD *)a1 + 9) = ++v7;
  v9 = 0;
  v10 = 0;
  v11 = v8 ^ 0x510E527FADE682D1;
  v12 = v7 ^ 0x9B05688C2B3E6C1FLL;
  v14 = *((_QWORD *)&v81 + 1);
  v13 = v81;
  v15 = *((_QWORD *)&v83 + 1);
  v16 = v83;
  if (a4)
    v17 = 0xE07C265404BE4294;
  else
    v17 = 0x1F83D9ABFB41BD6BLL;
  v18 = 0xA54FF53A5F1D36F1;
  v19 = 0x5BE0CD19137E2179;
  v21 = *((_QWORD *)&v82 + 1);
  v20 = v82;
  v22 = 0x3C6EF372FE94F82BLL;
  v23 = 0xBB67AE8584CAA73BLL;
  v24 = 0x6A09E667F3BCC908;
  v25 = *((_QWORD *)&v84 + 1);
  v26 = v84;
  do
  {
    LODWORD(v27) = v9 - 160;
    if (v10 >= 0xA)
      v27 = v27;
    else
      v27 = v9;
    v28 = (unsigned __int8 *)&unk_2342DA600 + v27;
    v29 = v13 + v16 + *(_QWORD *)(a2 + 8 * *v28);
    v30 = v11 ^ v29;
    v31 = v14 + v15 + *(_QWORD *)(a2 + 8 * v28[2]);
    v32 = v12 ^ v31;
    v33 = v24 + __ROR8__(v30, 32);
    v34 = v33 ^ v16;
    v35 = v23 + __ROR8__(v32, 32);
    v36 = v35 ^ v15;
    v37 = v29 + *(_QWORD *)(a2 + 8 * v28[1]) + __ROR8__(v34, 24);
    v38 = v37 ^ __ROR8__(v30, 32);
    v39 = v31 + *(_QWORD *)(a2 + 8 * v28[3]) + __ROR8__(v35 ^ v15, 24);
    v40 = v39 ^ __ROR8__(v32, 32);
    v41 = v20 + v26 + *(_QWORD *)(a2 + 8 * v28[4]);
    v42 = v17 ^ v41;
    v43 = __ROR8__(v38, 16) + v33;
    v44 = v22 + __ROR8__(v17 ^ v41, 32);
    v45 = v44 ^ v26;
    v46 = __ROR8__(v40, 16) + v35;
    v47 = v41 + *(_QWORD *)(a2 + 8 * v28[5]) + __ROR8__(v44 ^ v26, 24);
    v48 = v47 ^ __ROR8__(v42, 32);
    v49 = v43 ^ __ROR8__(v34, 24);
    v50 = __ROR8__(v48, 16) + v44;
    v51 = v46 ^ __ROR8__(v36, 24);
    v52 = v21 + v25 + *(_QWORD *)(a2 + 8 * v28[6]);
    v53 = v19 ^ v52;
    v54 = v50 ^ __ROR8__(v45, 24);
    v55 = v18 + __ROR8__(v53, 32);
    v56 = v55 ^ v25;
    v57 = v52 + *(_QWORD *)(a2 + 8 * v28[7]) + __ROR8__(v55 ^ v25, 24);
    v58 = v57 ^ __ROR8__(v53, 32);
    v59 = __ROR8__(v58, 16) + v55;
    v60 = v59 ^ __ROR8__(v56, 24);
    v61 = __ROR8__(v51, 63) + v37 + *(_QWORD *)(a2 + 8 * v28[8]);
    v62 = v61 ^ __ROR8__(v58, 16);
    v63 = __ROR8__(v62, 32) + v50;
    v64 = v63 ^ __ROR8__(v51, 63);
    v65 = __ROR8__(v54, 63) + v39 + *(_QWORD *)(a2 + 8 * v28[10]);
    v66 = __ROR8__(v65 ^ __ROR8__(v38, 16), 32);
    v13 = v61 + *(_QWORD *)(a2 + 8 * v28[9]) + __ROR8__(v64, 24);
    v67 = v66 + v59;
    v68 = (v66 + v59) ^ __ROR8__(v54, 63);
    v14 = v65 + *(_QWORD *)(a2 + 8 * v28[11]) + __ROR8__(v68, 24);
    v69 = v14 ^ v66;
    v19 = __ROR8__(v13 ^ __ROR8__(v62, 32), 16);
    v70 = __ROR8__(v60, 63) + v47 + *(_QWORD *)(a2 + 8 * v28[12]);
    v71 = v70 ^ __ROR8__(v40, 16);
    v11 = __ROR8__(v69, 16);
    v22 = v19 + v63;
    v72 = __ROR8__(v71, 32) + v43;
    v73 = v72 ^ __ROR8__(v60, 63);
    v18 = v11 + v67;
    v20 = v70 + *(_QWORD *)(a2 + 8 * v28[13]) + __ROR8__(v73, 24);
    v12 = __ROR8__(v20 ^ __ROR8__(v71, 32), 16);
    v24 = v12 + v72;
    v74 = v57 + *(_QWORD *)(a2 + 8 * v28[14]) + __ROR8__(v49, 63);
    v75 = v74 ^ __ROR8__(v48, 16);
    v76 = (v12 + v72) ^ __ROR8__(v73, 24);
    v77 = __ROR8__(v75, 32) + v46;
    v78 = v77 ^ __ROR8__(v49, 63);
    v15 = __ROR8__(v22 ^ __ROR8__(v64, 24), 63);
    v21 = v74 + *(_QWORD *)(a2 + 8 * v28[15]) + __ROR8__(v78, 24);
    v26 = __ROR8__(v18 ^ __ROR8__(v68, 24), 63);
    v17 = __ROR8__(v21 ^ __ROR8__(v75, 32), 16);
    v23 = v17 + v77;
    v25 = __ROR8__(v76, 63);
    ++v10;
    v9 += 16;
    v16 = __ROR8__((v17 + v77) ^ __ROR8__(v78, 24), 63);
  }
  while (v10 != 12);
  v79 = 0;
  *(_QWORD *)&v81 = v13;
  *((_QWORD *)&v81 + 1) = v14;
  *(_QWORD *)&v83 = v16;
  *((_QWORD *)&v83 + 1) = v15;
  v85[4] = v11;
  v85[5] = v12;
  v85[0] = v24;
  v85[1] = v17 + v77;
  *(_QWORD *)&v82 = v20;
  *((_QWORD *)&v82 + 1) = v21;
  *(_QWORD *)&v84 = v26;
  *((_QWORD *)&v84 + 1) = v25;
  v85[6] = v17;
  v85[7] = v19;
  v85[2] = v22;
  v85[3] = v18;
  do
  {
    result = veorq_s8(*(int8x16_t *)&v85[v79 / 8], veorq_s8((int8x16_t)a1[v79 / 0x10], *(int8x16_t *)((char *)&v81 + v79)));
    a1[v79 / 0x10] = (__int128)result;
    v79 += 16;
  }
  while (v79 != 64);
  return result;
}

__n128 sub_234146754(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 208);
  if (v4 == 128)
  {
    v5 = 128;
  }
  else
  {
    bzero((void *)(a2 + v4 + 80), 128 - v4);
    v5 = *(_QWORD *)(a2 + 208);
  }
  sub_234146360((__int128 *)a2, a2 + 80, v5, 1);
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v7;
  return result;
}

double sub_2341467B8(char *a1, unint64_t a2, _OWORD *a3)
{
  double result;
  _OWORD v7[13];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  sub_234146234((uint64_t)v7);
  sub_234146288(v7, a1, a2);
  *(_QWORD *)&result = sub_234146754(a3, (uint64_t)v7).n128_u64[0];
  return result;
}

BOOL sub_234146860(__int128 *a1, _QWORD *a2)
{
  int v3;
  __int16 v4;
  unsigned int v6;
  unsigned __int8 *v7;
  unint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0;
  if (sub_2341493F4(a1, &v7, 2) && sub_2341497C0(&v7, &v6))
  {
    if (!v6)
      return sub_2341625C8(v7, v8, a2) != 0;
    v3 = 109;
    v4 = 31;
  }
  else
  {
    v3 = 117;
    v4 = 26;
  }
  sub_2341579B4(3, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bn_extra/bn_asn1.c", v4);
  return 0;
}

uint64_t sub_234146908(uint64_t *a1, uint64_t *a2)
{
  int v4;
  __int16 v5;
  unsigned int v6;
  _OWORD v8[3];

  if (sub_234162420((uint64_t)a2))
  {
    v4 = 109;
    v5 = 41;
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    if (sub_234147F60(a1, (uint64_t)v8, 2u)
      && ((sub_2341621D4(a2) & 7) != 0 || sub_234148008((uint64_t)v8, 0)))
    {
      v6 = sub_234162240(a2);
      if (sub_2341469E8((uint64_t)v8, v6, (uint64_t)a2))
      {
        if (sub_234147CB0(a1))
          return 1;
      }
    }
    v4 = 118;
    v5 = 52;
  }
  sub_2341579B4(3, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bn_extra/bn_asn1.c", v5);
  return 0;
}

uint64_t sub_2341469E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  char *v6;

  v6 = 0;
  result = sub_2341481CC(a1, &v6, a2);
  if ((_DWORD)result)
    return sub_234162840(v6, a2, a3) != 0;
  return result;
}

_QWORD *sub_234146A3C(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;

  v2 = sub_234161F54(a1);
  v3 = sub_23418E2E4((16 * v2) | 3);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    if (*(_DWORD *)(a1 + 16))
    {
      *(_BYTE *)v3 = 45;
      v5 = (char *)v3 + 1;
    }
    if (sub_234161A24(a1))
      *v5++ = 48;
    if (v2 >= 1)
    {
      v6 = 0;
      v7 = v2;
      do
      {
        v8 = v7--;
        for (i = 56; i != -8; i -= 8)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) >> i;
          v6 |= v10;
          if (v6)
          {
            *v5 = a0123456789abcd_5[(unint64_t)v10 >> 4];
            v5[1] = a0123456789abcd_5[v10 & 0xF];
            v5 += 2;
            v6 = 1;
          }
        }
      }
      while (v8 >= 2);
    }
    *v5 = 0;
  }
  return v4;
}

uint64_t sub_234146B28(uint64_t *a1, _BYTE *a2)
{
  return sub_234146B3C(a1, a2, (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_234146C34, (uint64_t (*)(_QWORD))sub_23418E608);
}

uint64_t sub_234146B3C(uint64_t *a1, _BYTE *a2, unsigned int (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v4 = *a2;
  if (*a2)
  {
    v8 = 0;
    v9 = (uint64_t)((_DWORD)v4 == 45 ? a2 + 1 : a2);
    v10 = (_DWORD)v4 == 45;
    do
    {
      v11 = a4(*(unsigned __int8 *)(v9 + v8));
      v12 = ((_DWORD)v4 == 45) - 0x7FFFFFFFLL + v8++;
      if (v11)
        v13 = v12 == 0;
      else
        v13 = 1;
    }
    while (!v13);
    v14 = v8 - 1;
    v4 = v14 + v10;
    if (a1)
    {
      v15 = *a1;
      if (*a1)
      {
        sub_23416225C(*a1);
      }
      else
      {
        v15 = (uint64_t)sub_234161F88();
        if (!v15)
          return 0;
      }
      if (a3(v15, v9, v14))
      {
        sub_23416189C(v15);
        if (!sub_234161A24(v15))
          *(_DWORD *)(v15 + 16) = v10;
        *a1 = v15;
        return v4;
      }
      if (!*a1)
        sub_234161FC4((_QWORD **)v15);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_234146C34(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  int v13;
  unsigned __int8 v14;

  if (a3 < 0x20000000)
  {
    v4 = a3;
    result = sub_234162430((_QWORD **)a1, 4 * a3);
    if ((_DWORD)result)
    {
      if (v4 < 1)
      {
        v13 = 0;
      }
      else
      {
        v7 = 0;
        do
        {
          v8 = 0;
          if (v4 >= 0x10)
            v9 = 16;
          else
            v9 = v4;
          v10 = v9 + 1;
          v11 = (char *)(a2 - v9 + v4);
          do
          {
            v14 = 0;
            v12 = *v11++;
            sub_23418E624(&v14, v12);
            v8 = v14 | (16 * v8);
            --v10;
          }
          while (v10 > 1);
          v13 = v7 + 1;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) = v8;
          if (v4 >= 0x10)
            v4 -= 16;
          else
            v4 = 0;
          ++v7;
        }
        while (v4 > 0);
      }
      *(_DWORD *)(a1 + 8) = v13;
      return 1;
    }
  }
  else
  {
    sub_2341579B4(3, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bn_extra/convert.c", 116);
    return 0;
  }
  return result;
}

uint64_t sub_234146D34(uint64_t a1)
{
  void **v2;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  unsigned int v12;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD v17[3];

  memset(v17, 0, sizeof(v17));
  if (!sub_234147B54((uint64_t)v17, 0x10uLL) || !sub_234148008((uint64_t)v17, 0))
  {
    v2 = 0;
    goto LABEL_7;
  }
  if (!sub_234161A24(a1))
  {
    v4 = sub_234162014(a1);
    v2 = v4;
    if (v4)
    {
      if (!sub_234161A24((uint64_t)v4))
      {
        while (1)
        {
          v9 = sub_2341646E8((uint64_t)v2, 0x8AC7230489E80000);
          if (v9 == -1)
            goto LABEL_7;
          v10 = v9;
          v11 = sub_234161A24((uint64_t)v2);
          if (!v11 || v10)
          {
            v12 = 0;
            while (sub_234148008((uint64_t)v17, (v10 % 0xA) | 0x30))
            {
              v14 = !v11 || v10 > 9;
              if (v12 <= 0x11)
              {
                ++v12;
                v10 /= 0xAuLL;
                if ((v14 & 1) != 0)
                  continue;
              }
              goto LABEL_30;
            }
            goto LABEL_7;
          }
LABEL_30:
          if (sub_234161A24((uint64_t)v2))
            goto LABEL_10;
        }
      }
      goto LABEL_10;
    }
LABEL_7:
    sub_234161FC4((_QWORD **)v2);
    sub_234147BE4((uint64_t)v17);
    return 0;
  }
  v2 = 0;
  if (!sub_234148008((uint64_t)v17, 0x30u))
    goto LABEL_7;
LABEL_10:
  if (sub_234162420(a1) && !sub_234148008((uint64_t)v17, 0x2Du))
    goto LABEL_7;
  v15 = 0;
  v16 = 0;
  if (!sub_234147C00((uint64_t)v17, &v16, &v15))
    goto LABEL_7;
  v5 = v15;
  if (v15 >= 2)
  {
    v6 = 0;
    v7 = -1;
    do
    {
      v8 = *(_BYTE *)(v16 + v6);
      *(_BYTE *)(v16 + v6) = *(_BYTE *)(v16 + v5 + v7);
      *(_BYTE *)(v16 + v15 + v7) = v8;
      ++v6;
      v5 = v15;
      --v7;
    }
    while (v6 < v15 >> 1);
  }
  sub_234161FC4((_QWORD **)v2);
  return v16;
}

uint64_t sub_234146F14(uint64_t *a1, _BYTE *a2)
{
  return sub_234146B3C(a1, a2, (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_234146F28, (uint64_t (*)(_QWORD))sub_23418E5F8);
}

uint64_t sub_234146F28(uint64_t a1, char *a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((int)a3 < 1)
    return 1;
  v5 = 0;
  if (a3 % 0x13)
    LODWORD(result) = 19 - a3 % 0x13;
  else
    LODWORD(result) = 0;
  v7 = a3;
  do
  {
    v8 = *a2++;
    v5 = v8 + 10 * v5 - 48;
    LODWORD(result) = result + 1;
    if ((_DWORD)result == 19)
    {
      result = sub_23416A3A0(a1, 0x8AC7230489E80000);
      if (!(_DWORD)result)
        return result;
      v9 = sub_2341618E4(a1, v5);
      result = 0;
      if (!v9)
        return result;
      v5 = 0;
    }
    --v7;
  }
  while (v7);
  return 1;
}

uint64_t sub_234146FFC(uint64_t *a1, _BYTE *a2)
{
  _BYTE *v2;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  BOOL (*v5)(int);
  uint64_t result;
  _BOOL4 v7;

  v2 = a2;
  if (*a2 == 45)
    ++a2;
  if (*a2 == 48 && (a2[1] | 0x20) == 0x78)
  {
    a2 += 2;
    v4 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_234146C34;
    v5 = sub_23418E608;
  }
  else
  {
    v4 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_234146F28;
    v5 = sub_23418E5F8;
  }
  result = sub_234146B3C(a1, a2, v4, (uint64_t (*)(_QWORD))v5);
  if ((_DWORD)result)
  {
    if (*v2 == 45)
    {
      v7 = sub_234161A24(*a1);
      result = 1;
      if (!v7)
        *(_DWORD *)(*a1 + 16) = 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_2341470AC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;

  if (*(_DWORD *)(a2 + 16) && sub_234144E68(a1, (uint64_t)"-", 1) != 1
    || sub_234161A24(a2) && sub_234144E68(a1, (uint64_t)"0", 1) != 1)
  {
    return 0;
  }
  v4 = sub_234161F54(a2);
  if (v4 < 1)
    return 1;
  v5 = 0;
  v6 = v4;
  do
  {
    v7 = v6--;
    for (i = 60; i != -4; i -= 4)
    {
      v9 = (*(_QWORD *)(*(_QWORD *)a2 + 8 * v6) >> i) & 0xFLL;
      if (v5 || v9)
      {
        v5 = 1;
        if (sub_234144E68(a1, (uint64_t)&a0123456789abcd_5[v9], 1) != 1)
          return 0;
      }
      else
      {
        v5 = 0;
      }
    }
    result = 1;
  }
  while (v7 >= 2);
  return result;
}

_QWORD *sub_2341471C4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_234145994();
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = sub_2341470AC((uint64_t)result, a2);
    sub_234144C64(v4);
    return (_QWORD *)v5;
  }
  return result;
}

unint64_t sub_234147208(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;

  v4 = sub_2341621D4((uint64_t *)a1);
  v5 = (v4 & 7) != 0 || v4 == 0;
  v6 = !v5;
  if (v5)
    v7 = ((unint64_t)v4 + 7) >> 3;
  else
    v7 = (((unint64_t)v4 + 7) >> 3) + 1;
  if (a2)
  {
    *(_DWORD *)a2 = bswap32(v7);
    if (v6)
      *(_BYTE *)(a2 + 4) = 0;
    v8 = (_BYTE *)(a2 + 4);
    sub_234162760(a1, &v8[v6]);
    if (*(_DWORD *)(a1 + 16) && v7)
      *v8 |= 0x80u;
  }
  return v7 + 4;
}

_QWORD *sub_234147290(unsigned int *a1, unint64_t a2, _QWORD *a3)
{
  __int16 v3;
  unint64_t v5;
  _QWORD *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;

  if (a2 <= 3)
  {
    v3 = 411;
LABEL_11:
    sub_2341579B4(3, 0, 117, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bn_extra/convert.c", v3);
    return 0;
  }
  v5 = bswap32(*a1);
  if (v5 != a2 - 4)
  {
    v3 = 419;
    goto LABEL_11;
  }
  v7 = a3;
  if (a3 || (v7 = sub_234161F88()) != 0)
  {
    if (!v5)
    {
      sub_23416225C((uint64_t)v7);
      return v7;
    }
    v8 = (unsigned __int8 *)(a1 + 1);
    if (!sub_2341625C8(v8, v5, v7))
    {
      if (!a3)
        sub_234161FC4((_QWORD **)v7);
      return 0;
    }
    v9 = (char)*v8;
    *((_DWORD *)v7 + 4) = (v9 >> 7) & 1;
    if ((v9 & 0x80000000) != 0)
    {
      v10 = sub_2341621D4(v7);
      sub_23416C42C((uint64_t)v7, v10 - 1);
    }
  }
  return v7;
}

uint64_t sub_234147388(uint64_t a1, char *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if (sub_234162840(a2, a3, a1))
    return a3;
  return 0xFFFFFFFFLL;
}

uint64_t sub_2341473CC(char **a1, char *__dst, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if (sub_2341627AC(__dst, a3, a1))
    return a3;
  return 0xFFFFFFFFLL;
}

_QWORD *sub_234147410()
{
  return sub_23418E344(0x18uLL);
}

uint64_t sub_234147418(uint64_t a1, unint64_t a2)
{
  __int16 v2;
  unint64_t v4;
  uint64_t result;

  if (*(_QWORD *)(a1 + 16) >= a2)
    return 1;
  if (a2 < 0xFFFFFFFFFFFFFFFDLL)
  {
    if (a2 >= 0xBFFFFFFFFFFFFFFDLL)
    {
      v2 = 91;
      goto LABEL_9;
    }
    v4 = (2 * (((a2 + 3) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
    result = (uint64_t)sub_23418E40C(*(_QWORD **)(a1 + 8), v4);
    if (!result)
      return result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = v4;
    return 1;
  }
  v2 = 85;
LABEL_9:
  sub_2341579B4(7, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/buf/buf.c", v2);
  return 0;
}

unint64_t sub_2341474C8(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a2;
  if (!sub_234147418((uint64_t)a1, a2))
    return 0;
  if (v2 > *a1)
    bzero((void *)(a1[1] + *a1), v2 - *a1);
  *a1 = v2;
  return v2;
}

uint64_t sub_23414751C(_QWORD *a1, const void *a2, size_t a3)
{
  size_t v5;
  uint64_t result;

  if (!a3)
    return 1;
  v5 = *a1 + a3;
  if (__CFADD__(*a1, a3))
  {
    sub_2341579B4(7, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/buf/buf.c", 127);
    return 0;
  }
  else
  {
    result = sub_234147418((uint64_t)a1, *a1 + a3);
    if ((_DWORD)result)
    {
      memcpy((void *)(a1[1] + *a1), a2, a3);
      *a1 = v5;
      return 1;
    }
  }
  return result;
}

uint64_t sub_2341475C8(uint64_t a1, void **a2)
{
  char *v5;
  size_t v6;
  size_t __n;
  void *__src;

  __n = 0;
  __src = 0;
  if (!sub_234147C00(a1, &__src, &__n))
  {
    sub_234147BE4(a1);
    return 0xFFFFFFFFLL;
  }
  if (__n >> 31)
  {
    sub_23418E3C4(__src);
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    v5 = (char *)*a2;
    if (*a2)
    {
      if (__n)
      {
        memcpy(v5, __src, __n);
        v6 = __n;
        v5 = (char *)*a2;
      }
      else
      {
        v6 = 0;
      }
      *a2 = &v5[v6];
    }
    else
    {
      *a2 = __src;
      __src = 0;
    }
  }
  sub_23418E3C4(__src);
  return __n;
}

uint64_t sub_234147678(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _OWORD v10[3];

  memset(v10, 0, sizeof(v10));
  v9 = 0;
  result = sub_234147758((__int128 *)a1, (char *)&v9, 0);
  if ((_DWORD)result)
  {
    if (v9)
    {
      v8 = 0;
      if (!sub_234147B54((uint64_t)v10, *(_QWORD *)(a1 + 8))
        || !sub_234147858((__int128 *)a1, (uint64_t *)v10, 0, 0, 0)
        || !sub_234147C00((uint64_t)v10, a3, &v8))
      {
        sub_234147BE4((uint64_t)v10);
        return 0;
      }
      v7 = v8;
      *a2 = *a3;
      a2[1] = v7;
    }
    else
    {
      result = sub_2341491FC((__int128 *)a1, a2, 0, 0);
      if (!(_DWORD)result)
        return result;
      *a3 = 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_234147758(__int128 *a1, char *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v5;
  int v8;
  unint64_t v9;
  int v10;
  _QWORD v11[2];
  __int128 v12;

  if (a3 <= 0x80)
  {
    v12 = *a1;
    *(_DWORD *)a2 = 0;
    v3 = 1;
    if (!*((_QWORD *)&v12 + 1))
      return v3;
    v5 = a3 + 1;
    while (1)
    {
      v11[0] = 0;
      v11[1] = 0;
      v10 = 0;
      v9 = 0;
      v8 = 0;
      if (!sub_2341493C8(&v12, v11, &v10, &v9, a2, &v8))
        break;
      if (*(_DWORD *)a2)
        return 1;
      if ((v10 & 0x20000000) != 0)
      {
        if ((v10 & 0xDFFFFFFF) <= 0x1E && ((1 << v10) & 0x5E7C1010) != 0)
        {
          v3 = 1;
          *(_DWORD *)a2 = 1;
          return v3;
        }
        if (!sub_234148BF8(v11, v9) || !sub_234147758(v11, a2, v5))
          return 0;
        if (*(_DWORD *)a2)
          return 1;
      }
      if (!*((_QWORD *)&v12 + 1))
        return 1;
    }
  }
  return 0;
}

uint64_t sub_234147858(__int128 *a1, uint64_t *a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  signed int v17;
  const void **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[3];
  int v23;
  unint64_t v24;
  unsigned int v25;
  const void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a5 > 0x80)
    return 0;
  v28 = v5;
  v29 = v6;
  v12 = a5 + 1;
  while (1)
  {
    v13 = *((_QWORD *)a1 + 1);
    if (!v13)
      return a4 == 0;
    if (a4 && v13 != 1 && !**(_BYTE **)a1 && !*(_BYTE *)(*(_QWORD *)a1 + 1) && sub_234148BF8(a1, 2uLL))
      return 1;
    v26 = 0;
    v27 = 0;
    v25 = 0;
    v24 = 0;
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    if (!sub_2341493C8(a1, &v26, &v25, &v24, 0, &v23))
      return 0;
    v14 = v25;
    if ((_DWORD)a3)
    {
      v15 = a3;
      v16 = a2;
      if ((v25 & 0xDFFFFFFF) != (_DWORD)a3)
        return 0;
    }
    else
    {
      if ((v25 & 0x20000000) != 0
        && (v17 = (v25 & 0xDFFFFFFF) - 4, v17 <= 0x1A)
        && ((0x5E7C101u >> (v25 - 4)) & 1) != 0)
      {
        v15 = dword_2342DA6B4[v17];
        v14 = dword_2342DA6B4[v17];
      }
      else
      {
        v15 = 0;
      }
      v16 = (uint64_t *)v22;
      if (!sub_234147F60(a2, (uint64_t)v22, v14))
        return 0;
    }
    if (v23)
    {
      v18 = (const void **)a1;
      v19 = v16;
      v20 = v15;
      v21 = 1;
    }
    else
    {
      if (!sub_234148BF8(&v26, v24))
        return 0;
      if ((v25 & 0x20000000) == 0)
      {
        if (!sub_23414817C((uint64_t)v16, v26, v27))
          return 0;
        goto LABEL_27;
      }
      v18 = &v26;
      v19 = v16;
      v20 = v15;
      v21 = 0;
    }
    if (!sub_234147858(v18, v19, v20, v21, v12))
      return 0;
LABEL_27:
    result = sub_234147CB0(a2);
    if (!(_DWORD)result)
      return result;
  }
}

uint64_t sub_234147A2C(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, int a5)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  __int128 v17;
  _OWORD v18[3];

  if (sub_2341494C0((__int128 *)a1, a4))
  {
    *a3 = 0;
    return sub_2341493F4((__int128 *)a1, a2, a4);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
    v17 = 0uLL;
    if (!sub_234147B54((uint64_t)v18, *(_QWORD *)(a1 + 8))
      || !sub_2341493F4((__int128 *)a1, &v17, a4 | 0x20000000u))
    {
      goto LABEL_11;
    }
    while (*((_QWORD *)&v17 + 1))
    {
      v15 = 0;
      v16 = 0;
      if (!sub_2341493F4(&v17, &v15, a5) || !sub_23414817C((uint64_t)v18, v15, v16))
        goto LABEL_11;
    }
    v13 = 0;
    v14 = 0;
    if (sub_234147C00((uint64_t)v18, &v14, &v13))
    {
      v12 = v13;
      v11 = v14;
      *a2 = v14;
      a2[1] = v12;
      *a3 = v11;
      return 1;
    }
    else
    {
LABEL_11:
      sub_234147BE4((uint64_t)v18);
      return 0;
    }
  }
}

double sub_234147B44(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_234147B54(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  result = (uint64_t)sub_23418E2E4(a2);
  if (!a2 || result)
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 16) = result;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = a2;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 40) & 0xFC | 1;
    return 1;
  }
  return result;
}

uint64_t sub_234147BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) &= 0xFCu;
  return 1;
}

void sub_234147BE4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 8) && (*(_BYTE *)(a1 + 40) & 1) != 0)
    sub_23418E3C4(*(_QWORD **)(a1 + 16));
}

uint64_t sub_234147C00(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 8))
  {
    sub_2341579B4(14, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bytestring/cbb.c", 127);
    return 0;
  }
  result = sub_234147CB0((uint64_t *)a1);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      result = 0;
      if (!a2 || !a3)
        return result;
    }
    else if (!a2)
    {
      goto LABEL_10;
    }
    *a2 = *(_QWORD *)(a1 + 16);
LABEL_10:
    if (a3)
      *a3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    if (!*(_BYTE *)(a1 + 8) && (*(_BYTE *)(a1 + 40) & 1) != 0)
      sub_23418E3C4(0);
    return 1;
  }
  return result;
}

uint64_t sub_234147CB0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned __int8 v11;
  uint64_t result;
  __int16 v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v2 = (uint64_t)(a1 + 2);
  v3 = (uint64_t)(a1 + 2);
  if (*((_BYTE *)a1 + 8))
  {
    v3 = *(_QWORD *)v2;
    if (!*(_QWORD *)v2)
      return 0;
  }
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return 0;
  v4 = *a1;
  if (!*a1)
    return 1;
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(unsigned __int8 *)(v4 + 32);
  if (!sub_234147CB0(*a1))
    goto LABEL_31;
  v7 = v5 + v6;
  v8 = *(_QWORD *)(v4 + 24);
  if (v5 + v6 < v8)
    goto LABEL_31;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = v9 - v7;
  if (v9 < v7)
    goto LABEL_31;
  if ((*(_BYTE *)(v4 + 33) & 1) == 0)
  {
    v11 = *(_BYTE *)(v4 + 32);
    goto LABEL_25;
  }
  if (v10 > 0xFFFFFFFE)
  {
    v13 = 221;
LABEL_30:
    sub_2341579B4(14, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bytestring/cbb.c", v13);
    goto LABEL_31;
  }
  if (v10 >> 24)
  {
    v14 = -124;
    v15 = 5;
LABEL_22:
    v16 = (v15 - 1);
    if (!sub_2341482D8(v3, 0, v16))
    {
LABEL_31:
      if (*((_BYTE *)a1 + 8))
        v2 = *(_QWORD *)v2;
      result = 0;
      *(_BYTE *)(v2 + 24) |= 2u;
      goto LABEL_34;
    }
    v17 = *(_QWORD *)v3;
    *(_QWORD *)(v3 + 8) += v16;
    memmove((void *)(v17 + v7 + v16), (const void *)(v17 + v7), v10);
    v8 = *(_QWORD *)(v4 + 24);
    goto LABEL_24;
  }
  if (v10 >> 16)
  {
    v14 = -125;
    v15 = 4;
    goto LABEL_22;
  }
  if (v10 > 0xFF)
  {
    v14 = -126;
    v15 = 3;
    goto LABEL_22;
  }
  if (v10 > 0x7F)
  {
    v14 = -127;
    v15 = 2;
    goto LABEL_22;
  }
  LOBYTE(v15) = 1;
  v14 = v9 - v7;
  v10 = 0;
LABEL_24:
  v18 = *(_QWORD *)v3;
  *(_QWORD *)(v4 + 24) = v8 + 1;
  *(_BYTE *)(v18 + v8) = v14;
  v11 = v15 - 1;
  *(_BYTE *)(v4 + 32) = v15 - 1;
LABEL_25:
  if (v11)
  {
    v19 = v11 - 1;
    do
    {
      *(_BYTE *)(*(_QWORD *)v3 + *(_QWORD *)(v4 + 24) + v19) = v10;
      v10 >>= 8;
      --v19;
    }
    while (v19 < *(unsigned __int8 *)(v4 + 32));
  }
  if (v10)
  {
    v13 = 260;
    goto LABEL_30;
  }
  *(_QWORD *)(v4 + 16) = 0;
  result = 1;
LABEL_34:
  *a1 = 0;
  return result;
}

_QWORD *sub_234147EA4(uint64_t a1)
{
  int v2;
  _QWORD *result;

  v2 = *(unsigned __int8 *)(a1 + 8);
  result = *(_QWORD **)(a1 + 16);
  if (v2)
    return (_QWORD *)(*result + *(_QWORD *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32));
  return result;
}

uint64_t sub_234147ECC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - (*(_QWORD *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32));
  else
    return *(_QWORD *)(a1 + 24);
}

uint64_t sub_234147EF4(uint64_t *a1, uint64_t a2)
{
  return sub_234147EFC(a1, a2, 1u);
}

uint64_t sub_234147EFC(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  result = sub_234147CB0(a1);
  if ((_DWORD)result)
    return sub_2341480BC((uint64_t)a1, a2, a3, 0);
  return result;
}

uint64_t sub_234147F50(uint64_t *a1, uint64_t a2)
{
  return sub_234147EFC(a1, a2, 2u);
}

uint64_t sub_234147F58(uint64_t *a1, uint64_t a2)
{
  return sub_234147EFC(a1, a2, 3u);
}

uint64_t sub_234147F60(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (!sub_234147CB0(a1))
    return 0;
  if ((a3 & 0x1FFFFFFF) < 0x1F)
  {
    if (!sub_2341483E8((uint64_t)a1, HIBYTE(a3) & 0xE0 | a3, 1uLL))
      return 0;
  }
  else if (!sub_2341483E8((uint64_t)a1, HIBYTE(a3) | 0x1F, 1uLL)
         || !sub_234148014((uint64_t)a1, a3 & 0x1FFFFFFF))
  {
    return 0;
  }
  return sub_2341480BC((uint64_t)a1, a2, 1u, 1);
}

uint64_t sub_234148008(uint64_t a1, unsigned int a2)
{
  return sub_2341483E8(a1, a2, 1uLL);
}

BOOL sub_234148014(uint64_t a1, unint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v4 = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      ++v4;
      v6 = v5 > 0x7F;
      v5 >>= 7;
    }
    while (v6);
  }
  if (v4 <= 1)
    v7 = 1;
  else
    v7 = v4;
  v8 = v7 - 1;
  v9 = 7 * v7 - 7;
  do
  {
    v10 = v8;
    if (v8 >= v7)
      break;
    v11 = sub_2341483E8(a1, (a2 >> v9) & 0x7F | ((unint64_t)(v8 != 0) << 7), 1uLL);
    v8 = v10 - 1;
    v9 -= 7;
  }
  while (v11);
  return v10 >= v7;
}

uint64_t sub_2341480BC(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  void *v11;

  v8 = (_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
    v8 = (_QWORD *)*v8;
  v9 = v8[1];
  v11 = 0;
  result = sub_2341482D8((uint64_t)v8, &v11, a3);
  if ((_DWORD)result)
  {
    v8[1] += a3;
    if (a3)
      bzero(v11, a3);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    result = 1;
    *(_BYTE *)(a2 + 8) = 1;
    *(_QWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v9;
    *(_BYTE *)(a2 + 32) = a3;
    *(_BYTE *)(a2 + 33) = *(_BYTE *)(a2 + 33) & 0xFE | a4 & 1;
    *(_QWORD *)a1 = a2;
  }
  return result;
}

uint64_t sub_23414817C(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  void *__dst;

  __dst = 0;
  result = sub_2341481CC(a1, &__dst, a3);
  if ((_DWORD)result)
  {
    if (a3)
      memcpy(__dst, a2, a3);
    return 1;
  }
  return result;
}

uint64_t sub_2341481CC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  _QWORD *v8;

  result = sub_234147CB0((uint64_t *)a1);
  if ((_DWORD)result)
  {
    v7 = *(unsigned __int8 *)(a1 + 8);
    v8 = (_QWORD *)(a1 + 16);
    if (v7)
      v8 = (_QWORD *)*v8;
    result = sub_2341482D8((uint64_t)v8, a2, a3);
    if ((_DWORD)result)
    {
      v8[1] += a3;
      return 1;
    }
  }
  return result;
}

uint64_t sub_234148234(uint64_t a1, size_t a2)
{
  uint64_t result;
  void *v4;

  v4 = 0;
  result = sub_2341481CC(a1, &v4, a2);
  if ((_DWORD)result)
  {
    if (a2)
      bzero(v4, a2);
    return 1;
  }
  return result;
}

uint64_t sub_234148280(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;

  result = sub_234147CB0((uint64_t *)a1);
  if ((_DWORD)result)
  {
    v7 = (_QWORD *)(a1 + 16);
    if (*(_BYTE *)(a1 + 8))
      v7 = (_QWORD *)*v7;
    return sub_2341482D8((uint64_t)v7, a2, a3) != 0;
  }
  return result;
}

uint64_t sub_2341482D8(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  __int16 v7;
  uint64_t v9;
  unint64_t v11;
  _QWORD *v12;

  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 8);
    v5 = __CFADD__(v4, a3);
    v6 = v4 + a3;
    if (v5)
    {
      v7 = 81;
LABEL_5:
      sub_2341579B4(14, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bytestring/cbb.c", v7);
LABEL_6:
      result = 0;
      *(_BYTE *)(v3 + 24) |= 2u;
      return result;
    }
    v9 = *(_QWORD *)(result + 16);
    if (v6 > v9)
    {
      if ((*(_BYTE *)(result + 24) & 1) == 0)
      {
        v7 = 87;
        goto LABEL_5;
      }
      if (2 * v9 < v6 || v9 < 0)
        v11 = v6;
      else
        v11 = 2 * v9;
      v12 = sub_23418E40C(*(_QWORD **)result, v11);
      if (!v12)
        goto LABEL_6;
      *(_QWORD *)v3 = v12;
      *(_QWORD *)(v3 + 16) = v11;
    }
    if (a2)
      *a2 = *(_QWORD *)v3 + *(_QWORD *)(v3 + 8);
    return 1;
  }
  return result;
}

uint64_t sub_234148398(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  char v8;

  v3 = (_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
    v3 = (_QWORD *)*v3;
  result = 0;
  v5 = v3[1];
  v6 = __CFADD__(v5, a2);
  v7 = v5 + a2;
  v8 = v6;
  if (!*(_QWORD *)a1 && (v8 & 1) == 0)
  {
    if (v7 <= v3[2])
    {
      v3[1] = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2341483E8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  result = sub_2341481CC(a1, &v9, a3);
  if ((_DWORD)result)
  {
    if (a3)
    {
      v7 = a3 - 1;
      do
      {
        *(_BYTE *)(v9 + v7) = a2;
        a2 >>= 8;
        --v7;
      }
      while (v7 < a3);
    }
    if (a2)
    {
      v8 = a1 + 16;
      if (*(_BYTE *)(a1 + 8))
        v8 = *(_QWORD *)v8;
      result = 0;
      *(_BYTE *)(v8 + 24) |= 2u;
      *(_QWORD *)a1 = 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_23414847C(uint64_t a1, unsigned int a2)
{
  return sub_2341483E8(a1, a2, 2uLL);
}

uint64_t sub_234148488(uint64_t a1, unsigned int a2)
{
  return sub_2341483E8(a1, __rev16(a2), 2uLL);
}

uint64_t sub_234148494(uint64_t a1, unsigned int a2)
{
  return sub_2341483E8(a1, a2, 3uLL);
}

uint64_t sub_2341484A0(uint64_t a1, unsigned int a2)
{
  return sub_2341483E8(a1, a2, 4uLL);
}

uint64_t sub_2341484AC(uint64_t a1, unsigned int a2)
{
  return sub_2341483E8(a1, bswap32(a2), 4uLL);
}

uint64_t sub_2341484B8(uint64_t a1, unint64_t a2)
{
  return sub_2341483E8(a1, a2, 8uLL);
}

uint64_t sub_2341484C0(uint64_t a1, unint64_t a2)
{
  return sub_2341483E8(a1, bswap64(a2), 8uLL);
}

_BYTE *sub_2341484CC(_BYTE *result)
{
  _QWORD *v1;

  if (*(_QWORD *)result)
  {
    v1 = result + 16;
    if (result[8])
      v1 = (_QWORD *)*v1;
    v1[1] = *(_QWORD *)(*(_QWORD *)result + 24);
    *(_QWORD *)(*(_QWORD *)result + 16) = 0;
    *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t sub_2341484FC(uint64_t a1, unint64_t a2)
{
  return sub_234148504(a1, a2, 2u);
}

uint64_t sub_234148504(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t *v8;
  _OWORD v9[3];

  memset(v9, 0, sizeof(v9));
  if (!sub_234147F60((uint64_t *)a1, (uint64_t)v9, a3))
  {
LABEL_13:
    v8 = (uint64_t *)(a1 + 16);
    if (*(_BYTE *)(a1 + 8))
      v8 = (uint64_t *)*v8;
    result = 0;
    *((_BYTE *)v8 + 24) |= 2u;
    *(_QWORD *)a1 = 0;
    return result;
  }
  v5 = 0;
  v6 = 1;
  do
  {
    while ((v6 & 1) == 0)
    {
LABEL_7:
      if (!sub_2341483E8((uint64_t)v9, (a2 >> (56 - 8 * v5)), 1uLL))
        goto LABEL_13;
      v6 = 0;
      if (++v5 == 8)
        return sub_234147CB0((uint64_t *)a1);
    }
    if ((a2 >> (56 - 8 * v5)))
    {
      if (((a2 >> (56 - 8 * v5)) & 0x80) != 0 && !sub_2341483E8((uint64_t)v9, 0, 1uLL))
        goto LABEL_13;
      goto LABEL_7;
    }
    ++v5;
    v6 = 1;
  }
  while (v5 != 8);
  if (!sub_2341483E8((uint64_t)v9, 0, 1uLL))
    goto LABEL_13;
  return sub_234147CB0((uint64_t *)a1);
}

uint64_t sub_234148608(uint64_t a1, unint64_t a2)
{
  return sub_234148610(a1, a2, 2u);
}

uint64_t sub_234148610(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  _OWORD v9[3];
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x8000000000000000) == 0)
    return sub_234148504(a1, a2, a3);
  v10[0] = a2;
  v5 = 7;
  do
  {
    LODWORD(v6) = v5;
    if (!v5)
      break;
    if (*((unsigned __int8 *)v10 + v5) != 255)
      break;
    --v5;
  }
  while (*((char *)v10 + v5) < 0);
  memset(v9, 0, sizeof(v9));
  if (sub_234147F60((uint64_t *)a1, (uint64_t)v9, a3))
  {
    if ((v6 & 0x80000000) != 0)
      return sub_234147CB0((uint64_t *)a1);
    v6 = v6;
    while (sub_2341483E8((uint64_t)v9, *((unsigned __int8 *)v10 + v6), 1uLL))
    {
      if (v6-- < 1)
        return sub_234147CB0((uint64_t *)a1);
    }
  }
  v8 = a1 + 16;
  if (*(_BYTE *)(a1 + 8))
    v8 = *(_QWORD *)v8;
  result = 0;
  *(_BYTE *)(v8 + 24) |= 2u;
  *(_QWORD *)a1 = 0;
  return result;
}

uint64_t sub_23414873C(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  uint64_t *v7;
  _OWORD v8[3];

  memset(v8, 0, sizeof(v8));
  if (sub_234147F60((uint64_t *)a1, (uint64_t)v8, 4u)
    && sub_23414817C((uint64_t)v8, a2, a3)
    && sub_234147CB0((uint64_t *)a1))
  {
    return 1;
  }
  v7 = (uint64_t *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
    v7 = (uint64_t *)*v7;
  result = 0;
  *((_BYTE *)v7 + 24) |= 2u;
  *(_QWORD *)a1 = 0;
  return result;
}

uint64_t sub_2341487D8(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t *v6;
  _OWORD v7[3];

  memset(v7, 0, sizeof(v7));
  if (sub_234147F60((uint64_t *)a1, (uint64_t)v7, 1u))
  {
    v4 = a2 ? 255 : 0;
    if (sub_2341483E8((uint64_t)v7, v4, 1uLL) && sub_234147CB0((uint64_t *)a1))
      return 1;
  }
  v6 = (uint64_t *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
    v6 = (uint64_t *)*v6;
  result = 0;
  *((_BYTE *)v6 + 24) |= 2u;
  *(_QWORD *)a1 = 0;
  return result;
}

uint64_t sub_234148870(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BOOL4 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_234147CB0(a1);
  if ((_DWORD)result)
  {
    v11 = a2;
    v12 = a3;
    v9 = 0;
    v10 = 0;
    result = sub_234148950((uint64_t)&v11, &v10);
    if ((_DWORD)result)
    {
      result = sub_234148950((uint64_t)&v11, &v9);
      if ((_DWORD)result)
      {
        if (v10 <= 2)
        {
          result = 0;
          if ((v9 <= 0x27 || v10 == 2) && v9 <= 0xFFFFFFFFFFFFFFAFLL)
          {
            result = sub_234148014((uint64_t)a1, v9 + 40 * v10);
            if ((_DWORD)result)
            {
              while (v12)
              {
                result = sub_234148950((uint64_t)&v11, &v10);
                if ((_DWORD)result)
                {
                  v8 = sub_234148014((uint64_t)a1, v10);
                  result = 0;
                  if (v8)
                    continue;
                }
                return result;
              }
              return 1;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_234148950(uint64_t a1, unint64_t *a2)
{
  _BOOL8 result;
  char v4;

  result = sub_2341490B0((unsigned __int8 **)a1, a2);
  if (result)
  {
    v4 = 0;
    if (sub_234148D28((_QWORD *)a1, &v4))
      return v4 == 46 && *(_QWORD *)(a1 + 8) != 0;
    else
      return 1;
  }
  return result;
}

uint64_t sub_2341489B8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  const void *v11;
  _QWORD *v12;
  size_t *v13;
  size_t *v14;
  BOOL v15;
  size_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  size_t *v20;
  size_t v21;
  __int128 v22;

  if (!sub_234147CB0((uint64_t *)a1))
    return 0;
  v2 = *(_QWORD **)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(_QWORD *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32);
    v4 = (_QWORD *)(v3 + *v2);
    v5 = v2[1] - v3;
    v2 = v4;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)&v22 = v2;
  *((_QWORD *)&v22 + 1) = v5;
  if (!v5)
    return 1;
  v6 = 0;
  do
  {
    if (!sub_2341491FC(&v22, 0, 0, 0))
    {
      sub_2341579B4(14, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/bytestring/cbb.c", 676);
      return 0;
    }
    ++v6;
  }
  while (*((_QWORD *)&v22 + 1));
  if (v6 < 2)
    return 1;
  if (*(_BYTE *)(a1 + 8))
  {
    v9 = *(_QWORD *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - v9;
    v11 = (const void *)(v9 + **(_QWORD **)(a1 + 16));
  }
  else
  {
    v11 = *(const void **)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
  }
  v12 = sub_23418E58C(v11, v10);
  v13 = sub_23418E380(v6, 0x10uLL);
  v14 = v13;
  if (v12)
    v15 = v13 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    *(_QWORD *)&v22 = v12;
    *((_QWORD *)&v22 + 1) = v10;
    v16 = v13;
    v17 = v6;
    while (sub_2341491FC(&v22, v16, 0, 0))
    {
      v16 += 2;
      if (!--v17)
      {
        qsort(v14, v6, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_234148B98);
        v18 = *(_QWORD **)(a1 + 16);
        if (*(_BYTE *)(a1 + 8))
          v18 = (_QWORD *)(*v18 + *(_QWORD *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32));
        v19 = 0;
        v20 = v14 + 1;
        do
        {
          if (*v20)
          {
            memcpy((char *)v18 + v19, (const void *)*(v20 - 1), *v20);
            v21 = *v20;
          }
          else
          {
            v21 = 0;
          }
          v19 += v21;
          v20 += 2;
          --v6;
        }
        while (v6);
        v7 = 1;
        goto LABEL_33;
      }
    }
  }
  v7 = 0;
LABEL_33:
  sub_23418E3C4(v12);
  sub_23418E3C4(v14);
  return v7;
}

uint64_t sub_234148B98(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 >= v3)
    v4 = *(_QWORD *)(a2 + 8);
  else
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    result = memcmp(*(const void **)a1, *(const void **)a2, v4);
    if (v2 < v3)
      LODWORD(v6) = -1;
    else
      LODWORD(v6) = 1;
    if (v2 == v3)
      v6 = 0;
    else
      v6 = v6;
    if (!(_DWORD)result)
      return v6;
  }
  else
  {
    if (v2 < v3)
      v7 = -1;
    else
      v7 = 1;
    if (v2 == v3)
      return 0;
    else
      return v7;
  }
  return result;
}

uint64_t sub_234148BF8(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = a1[1];
  v3 = v2 >= a2;
  v4 = v2 - a2;
  if (!v3)
    return 0;
  *a1 += a2;
  a1[1] = v4;
  return 1;
}

uint64_t sub_234148C20(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t result;

  sub_23418E3C4((_QWORD *)*a2);
  *a2 = 0;
  *a3 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    result = (uint64_t)sub_23418E58C(*(const void **)a1, v6);
    *a2 = result;
    if (!result)
      return result;
    *a3 = *(_QWORD *)(a1 + 8);
  }
  return 1;
}

BOOL sub_234148C80(uint64_t a1, _QWORD **a2)
{
  _QWORD *v4;

  if (*a2)
    sub_23418E3C4(*a2);
  v4 = sub_23418E928(*(_BYTE **)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return v4 != 0;
}

BOOL sub_234148CC0(uint64_t a1)
{
  size_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return v1 && memchr(*(void **)a1, 0, v1) != 0;
}

BOOL sub_234148CF4(uint64_t a1, char *a2, uint64_t a3)
{
  return *(_QWORD *)(a1 + 8) == a3 && sub_23418E484(*(char **)a1, a2, a3) == 0;
}

uint64_t sub_234148D28(_QWORD *a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (_BYTE *)(*a1)++;
  a1[1] = v2 - 1;
  *a2 = *v3;
  return 1;
}

uint64_t sub_234148D58(unsigned __int16 **a1, _WORD *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  unsigned __int16 *v6;

  v2 = (unint64_t)a1[1];
  v3 = v2 >= 2;
  v4 = v2 - 2;
  if (!v3)
    return 0;
  v6 = (*a1)++;
  a1[1] = (unsigned __int16 *)v4;
  *a2 = bswap32(*v6) >> 16;
  return 1;
}

uint64_t sub_234148D90(uint64_t a1, _WORD *a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _WORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = v2 >= 2;
  v4 = v2 - 2;
  if (!v3)
    return 0;
  v6 = *(_WORD **)a1;
  *(_QWORD *)a1 += 2;
  *(_QWORD *)(a1 + 8) = v4;
  *a2 = *v6;
  return 1;
}

uint64_t sub_234148DC0(uint64_t *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = v2 - 3;
  if (v2 < 3)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = *a1;
  *a1 += 3;
  a1[1] = v3;
  do
    v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 3);
  *a2 = v6;
  return 1;
}

uint64_t sub_234148E08(uint64_t *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = v2 - 4;
  if (v2 < 4)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = *a1;
  *a1 += 4;
  a1[1] = v3;
  do
    v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 4);
  *a2 = v6;
  return 1;
}

uint64_t sub_234148E50(uint64_t *a1, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = v2 - 4;
  if (v2 < 4)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = *a1;
  *a1 += 4;
  a1[1] = v3;
  do
    v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 4);
  *a2 = bswap32(v6);
  return 1;
}

uint64_t sub_234148E9C(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = v2 - 8;
  if (v2 < 8)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = *a1;
  *a1 += 8;
  a1[1] = v3;
  do
    v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 8);
  *a2 = v6;
  return 1;
}

uint64_t sub_234148EE4(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = v2 - 8;
  if (v2 < 8)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = *a1;
  *a1 += 8;
  a1[1] = v3;
  do
    v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 8);
  *a2 = bswap64(v6);
  return 1;
}

uint64_t sub_234148F30(_QWORD *a1, _BYTE *a2)
{
  uint64_t v2;

  v2 = a1[1];
  if (!v2)
    return 0;
  *a2 = *(_BYTE *)(v2 + *a1 - 1);
  --a1[1];
  return 1;
}

uint64_t sub_234148F64(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;

  v3 = a1[1];
  v4 = v3 >= a3;
  v5 = v3 - a3;
  if (!v4)
    return 0;
  v7 = *a1;
  *a1 += a3;
  a1[1] = v5;
  *a2 = v7;
  a2[1] = a3;
  return 1;
}

uint64_t sub_234148F90(uint64_t a1, void *__dst, size_t a3)
{
  unint64_t v3;
  size_t v4;
  const void *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = v3 - a3;
  if (v3 < a3)
    return 0;
  v6 = *(const void **)a1;
  *(_QWORD *)a1 += a3;
  *(_QWORD *)(a1 + 8) = v4;
  if (a3)
    memcpy(__dst, v6, a3);
  return 1;
}

uint64_t sub_234148FD4(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_234148FDC(a1, a2, 1uLL);
}

uint64_t sub_234148FDC(unsigned __int8 **a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;

  v3 = (unint64_t)a1[1];
  v4 = v3 >= a3;
  v5 = v3 - a3;
  if (!v4)
    return 0;
  v6 = *a1;
  v7 = (unint64_t)&(*a1)[a3];
  *a1 = (unsigned __int8 *)v7;
  a1[1] = (unsigned __int8 *)v5;
  v8 = 0;
  if (a3)
  {
    do
    {
      v9 = *v6++;
      v8 = v9 | (v8 << 8);
      --a3;
    }
    while (a3);
    if (v5 < v8)
      return 0;
  }
  *a1 = (unsigned __int8 *)(v7 + v8);
  a1[1] = (unsigned __int8 *)(v5 - v8);
  *a2 = v7;
  a2[1] = v8;
  return 1;
}

uint64_t sub_234149034(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_234148FDC(a1, a2, 2uLL);
}

uint64_t sub_23414903C(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_234148FDC(a1, a2, 3uLL);
}

uint64_t sub_234149044(uint64_t a1, _QWORD *a2, int __c)
{
  size_t v3;
  void *v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  v6 = *(void **)a1;
  result = (uint64_t)memchr(*(void **)a1, __c, v3);
  if (!result)
    return result;
  if (v3 < result - (uint64_t)v6)
    return 0;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3 - (result - (_QWORD)v6);
  *a2 = v6;
  a2[1] = result - (_QWORD)v6;
  return 1;
}

BOOL sub_2341490B0(unsigned __int8 **a1, unint64_t *a2)
{
  int v4;
  _BOOL8 result;
  unint64_t v6;
  char v7;
  unsigned __int8 *v8;
  _BOOL4 v9;

  if (!a1[1])
  {
    v6 = 0;
    result = 0;
    goto LABEL_13;
  }
  v4 = **a1;
  result = sub_23418E5F8(v4);
  v6 = 0;
  if (!result)
  {
LABEL_13:
    *a2 = v6;
    return result;
  }
  v7 = 0;
  while (1)
  {
    v8 = a1[1];
    if (v8)
    {
      --v8;
      ++*a1;
      a1[1] = v8;
    }
    result = 0;
    if (v6 > 0x1999999999999999 || ((v6 == 0) & v7) != 0)
      return result;
    if (__CFADD__(10 * v6, v4 - 48))
      return 0;
    v6 = 10 * v6 + v4 - 48;
    if (v8)
    {
      v4 = **a1;
      v9 = sub_23418E5F8(v4);
      v7 = 1;
      if (v9)
        continue;
    }
    result = 1;
    goto LABEL_13;
  }
}

uint64_t sub_234149194(__int128 *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;

  v8 = 0;
  result = sub_23414920C(a1, a2, a3, &v8, 0, 0, 0);
  if ((_DWORD)result)
  {
    v5 = a2[1];
    v6 = v5 >= v8;
    v7 = v5 - v8;
    if (v6)
    {
      *a2 += v8;
      a2[1] = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2341491FC(__int128 *a1, _QWORD *a2, _DWORD *a3, unint64_t *a4)
{
  return sub_23414920C(a1, a2, a3, a4, 0, 0, 0);
}

uint64_t sub_23414920C(__int128 *a1, _QWORD *a2, _DWORD *a3, unint64_t *a4, _DWORD *a5, _DWORD *a6, int a7)
{
  uint64_t result;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  __int128 v31;

  v31 = *a1;
  if (a7)
  {
    *a5 = 0;
    *a6 = 0;
  }
  v30 = 0;
  result = sub_23414950C(&v31, &v30);
  if ((_DWORD)result)
  {
    if (a3)
      *a3 = v30;
    if (!*((_QWORD *)&v31 + 1))
      return 0;
    v15 = (unsigned __int8 *)(v31 + 1);
    v16 = *(unsigned __int8 *)v31;
    v17 = *((_QWORD *)a1 + 1) - (*((_QWORD *)&v31 + 1) - 1);
    if ((*(char *)v31 & 0x80000000) == 0)
    {
      v18 = v17 + v16;
      if (!a4)
        goto LABEL_10;
      goto LABEL_9;
    }
    v22 = v16 & 0x7F;
    if (a7)
    {
      if (!(_DWORD)v22 && (v30 & 0x20000000) != 0)
      {
        if (a4)
          *a4 = v17;
        *a5 = 1;
        *a6 = 1;
        v28 = *((_QWORD *)a1 + 1);
        v24 = v28 >= v17;
        v29 = v28 - v17;
        if (!v24)
          return 0;
        v21 = *(_QWORD *)a1;
        *(_QWORD *)a1 += v17;
        *((_QWORD *)a1 + 1) = v29;
        if (a2)
        {
LABEL_13:
          *a2 = v21;
          a2[1] = v17;
        }
        return 1;
      }
    }
    v24 = (v22 - 5) >= 0xFFFFFFFC && *((_QWORD *)&v31 + 1) - 1 >= v22;
    if (!v24)
      return 0;
    v25 = 0;
    v26 = v22;
    do
    {
      v27 = *v15++;
      v25 = v27 | (v25 << 8);
      --v26;
    }
    while (v26);
    if (v25 > 0x7F)
    {
      if (v25 >> (8 * v22 - 8))
        goto LABEL_41;
      if (!a7)
        return 0;
    }
    else
    {
      if (!a7)
        return 0;
      *a5 = 1;
      if (v25 >> (8 * v22 - 8))
      {
LABEL_41:
        v17 += v22;
        if (!__CFADD__(v25, v17))
        {
          v18 = v25 + v17;
          if (!a4)
          {
LABEL_10:
            v19 = *((_QWORD *)a1 + 1);
            v24 = v19 >= v18;
            v20 = v19 - v18;
            if (!v24)
              return 0;
            v21 = *(_QWORD *)a1;
            *(_QWORD *)a1 += v18;
            *((_QWORD *)a1 + 1) = v20;
            v17 = v18;
            if (a2)
              goto LABEL_13;
            return 1;
          }
LABEL_9:
          *a4 = v17;
          goto LABEL_10;
        }
        return 0;
      }
    }
    *a5 = 1;
    goto LABEL_41;
  }
  return result;
}

uint64_t sub_2341493C8(__int128 *a1, _QWORD *a2, _DWORD *a3, unint64_t *a4, char *a5, _DWORD *a6)
{
  char v7;

  if (!a5)
    a5 = &v7;
  return sub_23414920C(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t sub_2341493F4(__int128 *a1, _QWORD *a2, int a3)
{
  return sub_2341493FC(a1, a2, a3, 1);
}

uint64_t sub_2341493FC(__int128 *a1, _QWORD *a2, int a3, int a4)
{
  _QWORD *v7;
  int v8;
  uint64_t result;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  unint64_t v17;

  v17 = 0;
  v16 = 0;
  v15[0] = 0;
  v15[1] = 0;
  if (a2)
    v7 = a2;
  else
    v7 = v15;
  v8 = sub_23414920C(a1, v7, &v16, &v17, 0, 0, 0);
  result = 0;
  if (v8)
    v10 = v16 == a3;
  else
    v10 = 0;
  if (v10)
  {
    if (a4)
    {
      v11 = v15;
      if (a2)
        v11 = a2;
      v12 = v11[1];
      v13 = v12 >= v17;
      v14 = v12 - v17;
      if (!v13)
        return 0;
      *v7 += v17;
      v11[1] = v14;
    }
    return 1;
  }
  return result;
}

uint64_t sub_2341494B8(__int128 *a1, _QWORD *a2, int a3)
{
  return sub_2341493FC(a1, a2, a3, 0);
}

BOOL sub_2341494C0(__int128 *a1, int a2)
{
  unsigned int v5;
  __int128 v6;

  v6 = *a1;
  v5 = 0;
  return sub_23414950C(&v6, &v5) && v5 == a2;
}

uint64_t sub_23414950C(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  unint64_t v10;

  v2 = a1[1];
  if (!v2)
    return 0;
  v4 = (unsigned __int8 *)(*a1)++;
  a1[1] = v2 - 1;
  v5 = *v4;
  v6 = v5 & 0x1F;
  if (v6 != 31
    || (v10 = 0, v7 = sub_234149D2C(a1, &v10), result = 0, v7) && (v6 = v10, !(v10 >> 29)) && v10 >= 0x1F)
  {
    v9 = v6 | (v5 << 24) & 0xE0000000;
    if ((v9 & 0xDFFFFFFF) != 0)
    {
      *a2 = v9;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_2341495A8(__int128 *a1, unint64_t *a2)
{
  uint64_t result;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0;
  result = sub_2341493FC(a1, &v15, 2, 1);
  if (!(_DWORD)result)
    return result;
  v4 = v16;
  if (!v16)
    return 0;
  v5 = v15;
  v6 = *v15;
  v7 = v16 - 1;
  if (v16 == 1)
  {
    v8 = 0;
    goto LABEL_14;
  }
  v9 = (char)v15[1];
  if (!*v15 && (v9 & 0x80000000) == 0)
    return 0;
  v8 = v6 == 255 && v9 < 0;
LABEL_14:
  result = 0;
  if (!v8 && ((char)v6 & 0x80000000) == 0)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    do
    {
      *a2 = v12 << 8;
      v13 = v5[v11] | (v12 << 8);
      *a2 = v13;
      v14 = v11 + 1;
      if (v7 == v11)
        break;
      ++v11;
      v12 = v13;
    }
    while (!HIBYTE(v13));
    return v14 >= v4;
  }
  return result;
}

BOOL sub_234149678(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  int v5;

  v1 = a1[1];
  if (!v1)
    goto LABEL_6;
  v2 = **a1;
  v3 = v2 >> 7;
  if (v1 == (unsigned __int8 *)1)
  {
    v4 = 1;
    return !v3 && v4;
  }
  v5 = (char)(*a1)[1];
  if (**a1 || v5 < 0)
  {
    v4 = v2 != 255 || v5 >= 0;
  }
  else
  {
LABEL_6:
    v3 = 0;
    v4 = 0;
  }
  return !v3 && v4;
}

uint64_t sub_2341496CC(__int128 *a1, _QWORD *a2)
{
  uint64_t result;
  unint64_t v4;
  int v5;
  BOOL v6;
  _BOOL4 v7;
  BOOL v8;
  unsigned __int8 *v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  result = sub_2341493FC(a1, &v11, 2, 1);
  if ((_DWORD)result)
  {
    v4 = v12;
    if (v12)
    {
      v5 = *v11;
      if (v12 == 1
        || ((result = 0, v6 = v5 == 0, (v11[1] & 0x80u) == 0) ? (v7 = 1) : (v6 = 0, v7 = v5 != 255),
            !v6 && (v7 ? (v8 = v12 > 8) : (v8 = 1), !v8)))
      {
        v13[0] = 0x101010101010101 * ((unint64_t)(char)v5 >> 7);
        v9 = v11 - 1;
        v10 = v13;
        do
          *v10++ = v9[v4--];
        while (v4);
        *a2 = v13[0];
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_2341497C0(unsigned __int8 **a1, unsigned int *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned int v4;
  int v6;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint64_t)*a1;
  v4 = **a1;
  if (a2)
    *a2 = v4 >> 7;
  if (v2 == (unsigned __int8 *)1)
    return 1;
  v6 = *(char *)(v3 + 1);
  if (!v4 && (v6 & 0x80000000) == 0)
    return 0;
  return v4 != 255 || v6 >= 0;
}

uint64_t sub_234149810(__int128 *a1, _DWORD *a2)
{
  int v3;
  uint64_t result;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  v3 = sub_2341493FC(a1, &v6, 1, 1);
  result = 0;
  if (v3 && v7 == 1)
  {
    v5 = *v6;
    if ((v5 - 1) >= 0xFE)
    {
      *a2 = v5 != 0;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_23414988C(__int128 *a1, _QWORD *a2, int *a3, int a4)
{
  int v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;

  v11 = *a1;
  v10 = 0;
  v8 = 0;
  if (!sub_23414950C(&v11, &v10)
    || v10 != a4
    || (v8 = 1, result = sub_2341493FC(a1, a2, a4, 1), (_DWORD)result))
  {
    if (a3)
      *a3 = v8;
    return 1;
  }
  return result;
}

uint64_t sub_234149920(__int128 *a1, _QWORD *a2, _DWORD *a3, int a4)
{
  uint64_t result;
  int v7;
  int v8;
  __int128 v9;

  v9 = 0uLL;
  v8 = 0;
  result = sub_23414988C(a1, &v9, &v8, a4);
  if ((_DWORD)result)
  {
    if (!v8)
    {
      *a2 = 0;
      a2[1] = 0;
      if (!a3)
        return 1;
      goto LABEL_6;
    }
    v7 = sub_2341493FC(&v9, a2, 4, 1);
    result = 0;
    if (v7 && !*((_QWORD *)&v9 + 1))
    {
      if (!a3)
        return 1;
LABEL_6:
      *a3 = v8;
      return 1;
    }
  }
  return result;
}

uint64_t sub_2341499AC(__int128 *a1, unint64_t *a2, int a3, unint64_t a4)
{
  uint64_t result;
  int v7;
  int v8;
  __int128 v9;

  v9 = 0uLL;
  v8 = 0;
  result = sub_23414988C(a1, &v9, &v8, a3);
  if ((_DWORD)result)
  {
    if (v8)
    {
      v7 = sub_2341495A8(&v9, a2);
      result = 0;
      if (!v7 || *((_QWORD *)&v9 + 1))
        return result;
    }
    else
    {
      *a2 = a4;
    }
    return 1;
  }
  return result;
}

uint64_t sub_234149A24(__int128 *a1, int *a2, int a3, int a4)
{
  uint64_t result;
  int v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  __int128 v11;

  v11 = 0uLL;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  result = sub_23414988C(a1, &v11, &v8, a3);
  if ((_DWORD)result)
  {
    if (!v8)
    {
LABEL_9:
      *a2 = a4;
      return 1;
    }
    v7 = sub_2341493FC(&v11, &v9, 1, 1);
    result = 0;
    if (v7 && v10 == 1 && !*((_QWORD *)&v11 + 1))
    {
      a4 = *v9;
      if (*v9)
      {
        if (a4 != 255)
          return 0;
        a4 = 1;
      }
      goto LABEL_9;
    }
  }
  return result;
}

BOOL sub_234149AD0(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned int v2;

  v1 = a1[1];
  if (!v1)
    return 0;
  v2 = **a1;
  if (v2 > 7)
    return 0;
  if (!**a1)
    return 1;
  if (v1 == (unsigned __int8 *)1)
    return 0;
  return ((*a1)[(_QWORD)v1 - 1] & ~(-1 << v2)) == 0;
}

BOOL sub_234149B20(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  unint64_t v5;

  result = sub_234149AD0((unsigned __int8 **)a1);
  if (result)
  {
    v5 = (a2 >> 3) + 1;
    if (*(_QWORD *)(a1 + 8) <= v5)
      return 0;
    else
      return (*(unsigned __int8 *)(*(_QWORD *)a1 + v5) >> (~(_BYTE)a2 & 7)) & 1;
  }
  return result;
}

BOOL sub_234149B7C(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  int v2;
  unsigned __int8 *v3;
  char v4;
  int v5;

  v1 = a1[1];
  if (!v1)
    return 0;
  LOBYTE(v2) = 0;
  v3 = *a1;
  while (1)
  {
    v4 = v2;
    if (!v1)
      break;
    v5 = *v3++;
    v2 = v5;
    --v1;
    if ((v4 & 0x80) == 0 && v2 == 128)
      return 0;
  }
  return (v2 & 0x80) == 0;
}

uint64_t sub_234149BBC(unsigned __int8 **a1)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[3];

  memset(v15, 0, sizeof(v15));
  if (sub_234147B54((uint64_t)v15, 0x20uLL))
  {
    v2 = 0;
    v3 = *a1;
    v4 = a1[1];
    while (v4)
    {
      if (v2 >> 57)
        break;
      v6 = *v3++;
      v5 = v6;
      if (!v2 && v5 == 128)
        break;
      v7 = v5 & 0x7F | (v2 << 7);
      --v4;
      v2 = v7;
      if ((v5 & 0x80) == 0)
      {
        v8 = v7 - 80;
        if (v7 < 0x50)
        {
          if (!sub_234149D8C((uint64_t)v15, v7 > 0x27)
            || !sub_234148008((uint64_t)v15, 0x2Eu))
          {
            break;
          }
          if (v7 >= 0x28)
            v9 = v7 - 40;
          else
            v9 = v7;
        }
        else
        {
          if (!sub_23414817C((uint64_t)v15, "2.", 2uLL))
            break;
LABEL_16:
          v9 = v8;
        }
        if (!sub_234149D8C((uint64_t)v15, v9))
          break;
        if (v4)
        {
          v8 = 0;
          while (v4)
          {
            if (v8 >> 57)
              break;
            v11 = *v3++;
            v10 = v11;
            if (!v8 && v10 == 128)
              break;
            v8 = v10 & 0x7F | (v8 << 7);
            --v4;
            if ((v10 & 0x80) == 0)
            {
              if (sub_234148008((uint64_t)v15, 0x2Eu))
                goto LABEL_16;
              goto LABEL_30;
            }
          }
        }
        else
        {
          v13 = 0;
          v14 = 0;
          if (sub_234148008((uint64_t)v15, 0) && sub_234147C00((uint64_t)v15, &v14, &v13))
            return v14;
        }
        break;
      }
    }
  }
LABEL_30:
  sub_234147BE4((uint64_t)v15);
  return 0;
}

uint64_t sub_234149D2C(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t i;
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;

  v2 = 0;
  for (i = a1[1] - 1; i != -1; --i)
  {
    v4 = (unsigned __int8 *)(*a1)++;
    a1[1] = i;
    if (v2 >> 57)
      break;
    v5 = *v4;
    if (!v2 && v5 == 128)
      break;
    v6 = v5 & 0x7F | (v2 << 7);
    v2 = v6;
    if ((v5 & 0x80) == 0)
    {
      *a2 = v6;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_234149D8C(uint64_t a1, uint64_t a2)
{
  size_t v3;
  char __str[24];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x18uLL, "%llu", a2);
  v3 = strlen(__str);
  return sub_23414817C(a1, __str, v3);
}

uint64_t sub_234149E0C(__int128 *a1, int *a2, int a3)
{
  return sub_234149E18(a1, 1, a3, a2);
}

uint64_t sub_234149E18(__int128 *a1, int a2, int a3, int *a4)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  _BOOL4 v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  _BOOL4 v15;
  int v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  BOOL v26;
  _BOOL4 v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;

  v32 = 0;
  v31 = *a1;
  result = sub_23414A118(&v31, &v32);
  if (a2)
  {
    if (!(_DWORD)result)
      return result;
    v8 = v32;
    result = sub_23414A118(&v31, &v32);
    if (!(_DWORD)result)
      return result;
    v9 = v32 + 100 * v8;
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    if (v32 >= 50)
      v10 = 1900;
    else
      v10 = 2000;
    v9 = v10 + v32;
    if (v10 + v32 > 2049)
      return 0;
  }
  v37 = 0;
  v11 = sub_23414A118(&v31, &v37);
  result = 0;
  if (!v11)
    return result;
  v12 = v37;
  v13 = v37 - 1;
  if (v37 < 1)
    return result;
  if (v37 > 12)
    return result;
  v36 = 0;
  result = sub_23414A118(&v31, &v36);
  if (!(_DWORD)result)
    return result;
  v14 = v36;
  if ((int)v36 < 1)
    return 0;
  result = 0;
  if (v12 > 0xC)
    return result;
  if (((1 << v12) & 0x15AA) != 0)
  {
    if (v36 > 0x1F)
      return 0;
  }
  else if (((1 << v12) & 0xA50) != 0)
  {
    if (v36 >= 0x1F)
      return 0;
  }
  else
  {
    if (v12 != 2)
      return result;
    HIDWORD(v25) = -1030792151 * v9 + 85899344;
    LODWORD(v25) = HIDWORD(v25);
    v24 = v25 >> 2;
    v26 = (v9 & 3) == 0 && v24 > 0x28F5C28;
    v27 = v26;
    HIDWORD(v28) = -1030792151 * v9 + 85899344;
    LODWORD(v28) = HIDWORD(v28);
    if ((v28 >> 4) < 0xA3D70B || v27)
    {
      if (v36 >= 0x1E)
        return 0;
    }
    else if (v36 >= 0x1D)
    {
      return 0;
    }
  }
  v35 = 0;
  v15 = sub_23414A118(&v31, &v35);
  result = 0;
  if (!v15)
    return result;
  v16 = v35;
  if (v35 > 23)
    return result;
  v34 = 0;
  v17 = sub_23414A118(&v31, &v34);
  result = 0;
  if (!v17)
    return result;
  v18 = v34;
  if (v34 > 59)
    return result;
  v33 = 0;
  v19 = sub_23414A118(&v31, &v33);
  result = 0;
  if (!v19)
    return result;
  v20 = v33;
  if (v33 > 59)
    return result;
  if (!*((_QWORD *)&v31 + 1))
    return 0;
  v21 = *(unsigned __int8 *)v31;
  v22 = *((_QWORD *)&v31 + 1) - 1;
  *(_QWORD *)&v31 = v31 + 1;
  --*((_QWORD *)&v31 + 1);
  if (v21 == 43)
  {
    v23 = 1;
LABEL_46:
    if (!a3)
      return 0;
    v30 = 0;
    if (!sub_23414A118(&v31, (_DWORD *)&v30 + 1))
      return 0;
    v29 = HIDWORD(v30);
    if (SHIDWORD(v30) > 23 || !sub_23414A118(&v31, &v30) || (int)v30 >= 60)
      return 0;
    LODWORD(result) = (3600 * v29 + 60 * v30) * v23;
    v22 = *((_QWORD *)&v31 + 1);
    goto LABEL_52;
  }
  result = 0;
  if (v21 != 90)
  {
    if (v21 != 45)
      return result;
    v23 = -1;
    goto LABEL_46;
  }
LABEL_52:
  if (v22)
    return 0;
  if (!a4)
    return 1;
  a4[4] = v13;
  a4[5] = v9 - 1900;
  a4[2] = v16;
  a4[3] = v14;
  *a4 = v20;
  a4[1] = v18;
  if (!(_DWORD)result)
    return 1;
  result = sub_234141C5C(a4, 0, (int)result);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_23414A10C(__int128 *a1, int *a2, int a3)
{
  return sub_234149E18(a1, 0, a3, a2);
}

BOOL sub_23414A118(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v5;
  int v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;

  v2 = a1[1];
  if (!v2)
    return 0;
  v5 = (unsigned __int8 *)(*a1)++;
  a1[1] = v2 - 1;
  v6 = *v5;
  result = sub_23418E5F8(v6);
  if (!result)
    return result;
  v8 = a1[1];
  if (!v8)
    return 0;
  v9 = (unsigned __int8 *)(*a1)++;
  a1[1] = v8 - 1;
  v10 = *v9;
  result = sub_23418E5F8(v10);
  if (result)
  {
    *a2 = v10 + 10 * v6 - 528;
    return 1;
  }
  return result;
}

uint64_t sub_23414A1AC(_QWORD *a1, unsigned int *a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  unsigned __int8 v13;

  v13 = 0;
  result = sub_234148D28(a1, &v13);
  if ((_DWORD)result)
  {
    v5 = v13;
    if ((char)v13 < 0)
    {
      if ((v13 & 0xE0) == 0xC0)
      {
        v6 = 128;
        v7 = 31;
        v8 = 1;
      }
      else if ((v13 & 0xF0) == 0xE0)
      {
        v6 = 2048;
        v7 = 15;
        v8 = 2;
      }
      else
      {
        if ((v13 & 0xF8) != 0xF0)
          return 0;
        v6 = 0x10000;
        v7 = 7;
        v8 = 3;
      }
      v5 = (v7 & v13);
      while (1)
      {
        v9 = v5;
        result = sub_234148D28(a1, &v13);
        if (!(_DWORD)result)
          break;
        if ((v13 & 0xC0) != 0x80)
          return 0;
        v5 = v13 & 0x3F | (v9 << 6);
        if (!--v8)
        {
          result = 0;
          if ((v9 & 0x3FFFFE0) != 0x360)
          {
            v10 = v5 - 64976 < 0x20 || HIWORD(v5) > 0x10u;
            v11 = v10 || (v13 & 0x3E | (v9 << 6) & 0xFFFE) == 65534;
            if (!v11 && v5 >= v6)
              goto LABEL_3;
          }
          return result;
        }
      }
    }
    else
    {
LABEL_3:
      *a2 = v5;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23414A2D0(_QWORD *a1, _DWORD *a2)
{
  uint64_t result;
  unsigned __int8 v4;

  v4 = 0;
  result = sub_234148D28(a1, &v4);
  if ((_DWORD)result)
  {
    *a2 = v4;
    return 1;
  }
  return result;
}

uint64_t sub_23414A310(unsigned __int16 **a1, _DWORD *a2)
{
  uint64_t result;
  unsigned __int16 v5;

  v5 = 0;
  result = sub_234148D58(a1, &v5);
  if ((_DWORD)result)
  {
    result = 0;
    if ((v5 & 0xF800) != 0xD800 && v5 - 64976 >= 0x20 && (v5 & 0xFFFE) != 65534)
    {
      *a2 = v5;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23414A380(uint64_t *a1, int *a2)
{
  uint64_t result;
  unsigned int v4;
  BOOL v6;
  unsigned int v7;

  result = sub_234148E08(a1, a2);
  if ((_DWORD)result)
  {
    v4 = *a2;
    v6 = (~*a2 & 0xFFFE) != 0 && v4 < 0x110000 && v4 - 64976 > 0x1F;
    v7 = v4 >> 11;
    return v6 && v7 != 27;
  }
  return result;
}

uint64_t sub_23414A3D0(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 2;
  v2 = 3;
  if (a1 >= 0x10000)
    v2 = 4;
  if (a1 >= 0x800)
    v1 = v2;
  if (a1 >= 0x80)
    return v1;
  else
    return 1;
}

uint64_t sub_23414A3F8(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  result = 0;
  if (a2 >> 11 != 27 && a2 - 64976 >= 0x20 && HIWORD(a2) <= 0x10u && (a2 & 0xFFFE) != 0xFFFE)
  {
    if (a2 <= 0x7F)
      return sub_234148008(a1, a2);
    if (a2 <= 0x7FF)
    {
      v5 = (a2 >> 6) | 0xC0;
LABEL_9:
      result = sub_234148008(a1, v5);
      if (!(_DWORD)result)
        return result;
      v6 = a2 & 0x3F | 0x80;
      return sub_234148008(a1, v6) != 0;
    }
    if (HIWORD(a2))
    {
      result = sub_234148008(a1, (a2 >> 18) | 0xF0u);
      if ((_DWORD)result)
      {
        result = sub_234148008(a1, (a2 >> 12) & 0x3F | 0x80);
        if ((_DWORD)result)
        {
          v5 = (a2 >> 6) & 0x3F | 0x80;
          goto LABEL_9;
        }
      }
    }
    else
    {
      result = sub_234148008(a1, (a2 >> 12) | 0xE0u);
      if ((_DWORD)result)
      {
        result = sub_234148008(a1, (a2 >> 6) & 0x3F | 0x80);
        if ((_DWORD)result)
        {
          v6 = a2 & 0x3F | 0x80;
          return sub_234148008(a1, v6) != 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_23414A540(uint64_t a1, unsigned int a2)
{
  return a2 <= 0xFF && sub_234148008(a1, a2) != 0;
}

BOOL sub_23414A570(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  if (HIWORD(a2))
    return 0;
  result = 0;
  if (a2 >> 11 != 27 && a2 - 64976 >= 0x20 && (a2 & 0xFFFE) != 0xFFFE)
    return sub_23414847C(a1, (unsigned __int16)a2) != 0;
  return result;
}

BOOL sub_23414A5D8(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  result = 0;
  if (a2 >> 11 != 27 && a2 - 64976 >= 0x20 && HIWORD(a2) <= 0x10u && (a2 & 0xFFFE) != 0xFFFE)
    return sub_2341484A0(a1, a2) != 0;
  return result;
}

void *sub_23414A638()
{
  return &unk_250506278;
}

void *sub_23414A644()
{
  return &unk_2505062B0;
}

void *sub_23414A650()
{
  return &unk_2505062E8;
}

void *sub_23414A65C()
{
  return &unk_250506320;
}

void *sub_23414A668()
{
  return &unk_250506358;
}

void *sub_23414A674()
{
  return &unk_250506390;
}

uint64_t sub_23414A680(uint64_t a1, _DWORD *a2)
{
  sub_2341506C0(a2, *(_QWORD *)(a1 + 16));
  return 1;
}

uint64_t sub_23414A6A4(uint64_t a1, unsigned int *a2, int *a3, unint64_t a4)
{
  sub_23415280C(a3, a2, a4, *(int **)(a1 + 16), a1 + 52, *(_DWORD *)(a1 + 28));
  return 1;
}

uint64_t sub_23414A6D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v9;
  int *v10;

  v4 = *(unsigned int *)(*(_QWORD *)a1 + 4);
  v5 = a4 - v4;
  if (a4 >= v4)
  {
    v9 = 0;
    v10 = *(int **)(a1 + 16);
    do
    {
      sub_2341518B8((_QWORD *)(a3 + v9), (_QWORD *)(a2 + v9), v10, *(_DWORD *)(a1 + 28));
      v9 += *(unsigned int *)(*(_QWORD *)a1 + 4);
    }
    while (v9 <= v5);
  }
  return 1;
}

uint64_t sub_23414A74C(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  sub_2341506C0(a2, v3);
  sub_2341506C0(a2 + 2, v3 + 128);
  sub_2341506C0(a2 + 4, v3 + 256);
  return 1;
}

uint64_t sub_23414A794(uint64_t a1, uint64_t a2, int *a3, unint64_t a4)
{
  sub_234152B9C(a3, a2, a4, *(int **)(a1 + 16), (int *)(*(_QWORD *)(a1 + 16) + 128), (int *)(*(_QWORD *)(a1 + 16) + 256), (_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 28));
  return 1;
}

uint64_t sub_23414A7CC(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  sub_2341506C0(a2, v3);
  sub_2341506C0(a2 + 2, v3 + 128);
  sub_2341506C0(a2, v3 + 256);
  return 1;
}

uint64_t sub_23414A814(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v9;
  int *v10;

  v4 = *(unsigned int *)(*(_QWORD *)a1 + 4);
  v5 = a4 - v4;
  if (a4 >= v4)
  {
    v9 = 0;
    v10 = *(int **)(a1 + 16);
    do
    {
      sub_234152B18((_QWORD *)(a3 + v9), (_QWORD *)(a2 + v9), v10, v10 + 32, v10 + 64, *(_DWORD *)(a1 + 28));
      v9 += *(unsigned int *)(*(_QWORD *)a1 + 4);
    }
    while (v9 <= v5);
  }
  return 1;
}

void *sub_23414A8A4()
{
  return &unk_2505063C8;
}

void *sub_23414A8B0()
{
  return &unk_250506400;
}

uint64_t sub_23414A8BC(uint64_t a1, char *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_23416E2B8(a1);
  *(_BYTE *)(v3 + 4) = 0;
  v5 = v3 + 4;
  v6 = *(_DWORD *)v3;
  if (v4 >= 128)
    v7 = 128;
  else
    v7 = v4;
  if (v6 >= 1024)
    v8 = 1024;
  else
    v8 = *(_DWORD *)v3;
  if (v6 >= 1)
    v9 = v8;
  else
    v9 = 1024;
  if (v4 < 1)
    goto LABEL_17;
  v10 = v7 <= 1 ? 1 : v7;
  v11 = (_BYTE *)(v3 + 4);
  do
  {
    v12 = *a2++;
    *v11++ = v12;
    --v10;
  }
  while (v10);
  if (v4 <= 127)
  {
LABEL_17:
    v13 = *(_BYTE *)(v5 + v7 - 1);
    v14 = (128 - v7);
    v15 = (_BYTE *)(v3 + 4);
    do
    {
      v13 = byte_2342DA72E[(*v15 + v13)];
      v15[v4] = v13;
      ++v15;
      --v14;
    }
    while (v14);
  }
  v16 = (v9 + 7) >> 3;
  v17 = (128 - v16);
  v18 = byte_2342DA72E[(0xFFu >> (-(char)v9 & 7)) & (unint64_t)*(unsigned __int8 *)(v5 + v17)];
  *(_BYTE *)(v5 + v17) = v18;
  if (v16 != 128)
  {
    do
    {
      v18 = byte_2342DA72E[(*(_BYTE *)(v3 + v16 + v17 + 3) ^ v18)];
      *(_BYTE *)(v3 + v17-- + 3) = v18;
    }
    while (v17);
  }
  v19 = 0;
  do
  {
    v20 = v19 + 127;
    v19 -= 2;
  }
  while (v20 > 1);
  return 1;
}

uint64_t sub_23414A9EC(uint64_t a1, unsigned int *a2, int *a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v8;

  v4 = a4;
  v8 = *(_QWORD *)(a1 + 16);
  if (a4 >= 0x10000)
  {
    do
    {
      sub_23414AAD4(a3, a2, 0x10000, (unsigned __int16 *)(v8 + 4), (_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 28));
      v4 -= 0x10000;
      a3 += 0x4000;
      a2 += 0x4000;
    }
    while (v4 >> 16);
  }
  if (v4)
    sub_23414AAD4(a3, a2, v4, (unsigned __int16 *)(v8 + 4), (_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 28));
  return 1;
}

uint64_t sub_23414AA94(uint64_t a1, int a2, int a3)
{
  _DWORD *v3;

  v3 = *(_DWORD **)(a1 + 16);
  if (a2 == 3)
    goto LABEL_4;
  if (!a2)
  {
    a3 = 8 * sub_23416E2B8(a1);
LABEL_4:
    *v3 = a3;
    return 1;
  }
  return 0xFFFFFFFFLL;
}

int *sub_23414AAD4(int *result, unsigned int *a2, uint64_t a3, unsigned __int16 *a4, _DWORD *a5, int a6)
{
  _BYTE *v6;
  unint64_t v8;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  int *v36;
  __int16 v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  char *v43;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;

  v6 = a5;
  v8 = a3;
  v10 = result;
  v47 = *MEMORY[0x24BDAC8D0];
  v11 = *a5;
  v12 = a5[1];
  if (a6)
  {
    if (a3 >= 8)
    {
      do
      {
        v13 = a2;
        v14 = v8;
        v8 -= 8;
        v15 = *v10;
        v16 = v10[1];
        v10 += 2;
        v45 = v15 ^ v11;
        v46 = v16 ^ v12;
        result = sub_23414ADDC((int *)&v45, a4);
        v11 = v45;
        v12 = v46;
        a2 += 2;
        *v13 = v45;
        v13[1] = v12;
      }
      while (v14 > 0xF);
    }
    if (v8)
    {
      v17 = 0;
      v18 = (char *)v10 + v8;
      v19 = 0;
      switch(v8)
      {
        case 1uLL:
          goto LABEL_12;
        case 2uLL:
          goto LABEL_11;
        case 3uLL:
          goto LABEL_10;
        case 4uLL:
          goto LABEL_9;
        case 5uLL:
          goto LABEL_8;
        case 6uLL:
          goto LABEL_7;
        case 7uLL:
          v20 = *--v18;
          v17 = v20 << 16;
LABEL_7:
          v21 = *--v18;
          v17 |= v21 << 8;
LABEL_8:
          v22 = *--v18;
          v17 |= v22;
LABEL_9:
          v19 = v17;
          v23 = *--v18;
          v17 = v23 << 24;
LABEL_10:
          v24 = *--v18;
          v17 |= v24 << 16;
LABEL_11:
          v25 = *--v18;
          v17 |= v25 << 8;
LABEL_12:
          v17 |= *(v18 - 1);
          break;
        default:
          v19 = 0;
          break;
      }
      v45 = v17 ^ v11;
      v46 = v19 ^ v12;
      result = sub_23414ADDC((int *)&v45, a4);
      LOBYTE(v11) = v45;
      v12 = v46;
      v26 = v45 >> 8;
      v27 = HIWORD(v45);
      v28 = HIBYTE(v45);
      v29 = v46 >> 8;
      v30 = HIWORD(v46);
      v31 = HIBYTE(v46);
      *a2 = v45;
      a2[1] = v12;
    }
    else
    {
      v26 = v11 >> 8;
      v27 = HIWORD(v11);
      v28 = HIBYTE(v11);
      v29 = v12 >> 8;
      v30 = HIWORD(v12);
      v31 = HIBYTE(v12);
    }
    *v6 = v11;
    v6[1] = v26;
    v6[2] = v27;
    v6[3] = v28;
    v6[4] = v12;
    v6[5] = v29;
    v6[6] = v30;
  }
  else
  {
    if (a3 >= 8)
    {
      do
      {
        v32 = a2;
        v33 = v11;
        v34 = v12;
        v11 = *v10;
        v12 = v10[1];
        v35 = v8;
        v8 -= 8;
        v36 = v10 + 2;
        v45 = *v10;
        v46 = v12;
        result = sub_23414AEEC((int *)&v45, (uint64_t)a4);
        v37 = HIWORD(v45) ^ HIWORD(v33);
        v38 = v46 ^ v34;
        *(_WORD *)v32 = v45 ^ v33;
        *((_WORD *)v32 + 1) = v37;
        v32[1] = v38;
        a2 = v32 + 2;
        v10 += 2;
      }
      while (v35 > 0xF);
      v10 = v36;
      v6 = a5;
    }
    if (v8)
    {
      v40 = *v10;
      v39 = v10[1];
      v45 = v40;
      v46 = v39;
      result = sub_23414AEEC((int *)&v45, (uint64_t)a4);
      v41 = v45 ^ v11;
      v42 = v46 ^ v12;
      v43 = (char *)a2 + v8;
      switch(v8)
      {
        case 1uLL:
          goto LABEL_25;
        case 2uLL:
          goto LABEL_24;
        case 3uLL:
          goto LABEL_23;
        case 4uLL:
          goto LABEL_22;
        case 5uLL:
          goto LABEL_21;
        case 6uLL:
          goto LABEL_20;
        case 7uLL:
          *--v43 = BYTE2(v42);
LABEL_20:
          *--v43 = BYTE1(v42);
LABEL_21:
          *--v43 = v42;
LABEL_22:
          *--v43 = HIBYTE(v41);
LABEL_23:
          *--v43 = BYTE2(v41);
LABEL_24:
          *--v43 = BYTE1(v41);
LABEL_25:
          *(v43 - 1) = v41;
          break;
        default:
          break;
      }
    }
    else
    {
      v40 = v11;
      v39 = v12;
    }
    *(_DWORD *)v6 = v40;
    *((_WORD *)v6 + 2) = v39;
    v31 = HIBYTE(v39);
    v6[6] = BYTE2(v39);
  }
  v6[7] = v31;
  return result;
}

int *sub_23414ADDC(int *result, unsigned __int16 *a2)
{
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  unsigned __int16 *v7;
  int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;

  v2 = *result;
  v3 = result[1];
  v4 = HIWORD(*result);
  v5 = HIWORD(v3);
  v6 = 3;
  v7 = a2;
  v8 = 5;
  while (1)
  {
    do
    {
      v9 = *v7 + (v4 & ~v5) + v2 + (v5 & v3);
      v2 = (v9 >> 15) & 1 | (2 * (unsigned __int16)v9);
      LOWORD(v9) = v7[1] + (v2 & v5) + (v3 & ~(_WORD)v2) + v4;
      v4 = ((unsigned __int16)v9 >> 14) & 0xFFFC0003 | (4 * (unsigned __int16)v9);
      LOWORD(v9) = v7[2] + (v4 & v2) + (v5 & ~(_WORD)v4) + v3;
      v3 = ((unsigned __int16)v9 >> 13) & 0xFFF80007 | (8 * (unsigned __int16)v9);
      v10 = v7 + 4;
      v11 = v7[3] + (v3 & v4) + (v2 & ~(_WORD)v3) + v5;
      v5 = (v11 >> 11) & 0xFFE0001F | (32 * v11);
      v7 = v10;
      --v8;
    }
    while (v8);
    if (!--v6)
      break;
    if (v6 == 2)
      v8 = 6;
    else
      v8 = 5;
    v2 = (unsigned __int16)v2 + a2[v5 & 0x3F];
    v4 = (unsigned __int16)v4 + a2[v2 & 0x3F];
    v3 = (unsigned __int16)v3 + a2[v4 & 0x3F];
    v5 = a2[v3 & 0x3F] + (unsigned __int16)v5;
    v7 = v10;
  }
  *result = (unsigned __int16)v2 | ((unsigned __int16)v4 << 16);
  result[1] = (unsigned __int16)v3 | (v5 << 16);
  return result;
}

int *sub_23414AEEC(int *result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  _WORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  __int16 v12;
  char v13;
  __int16 v14;

  v3 = *result;
  v2 = result[1];
  v4 = HIWORD(*result);
  v5 = HIWORD(v2);
  v6 = (_WORD *)(a2 + 126);
  v7 = 3;
  v8 = 5;
  while (1)
  {
    v9 = ((v5 << 11) | (v5 >> 5)) - (v3 & ~(unsigned __int16)v2 | v2 & v4) - (unsigned __int16)*v6;
    v5 = (unsigned __int16)((((_WORD)v5 << 11) | (v5 >> 5)) - (v3 & ~(_WORD)v2 | v2 & v4) - *v6);
    v10 = (((unsigned __int16)v2 << 13) | ((unsigned __int16)v2 >> 3))
        - ((v4 & v3)
         + (unsigned __int16)*(v6 - 1))
        - (v9 & ~v4);
    v2 = (unsigned __int16)((((_WORD)v2 << 13) | ((unsigned __int16)v2 >> 3))
                          - ((v4 & v3)
                           + *(v6 - 1))
                          - (v9 & ~(_WORD)v4));
    v11 = ((v4 << 14) | (v4 >> 2)) - (unsigned __int16)*(v6 - 2) - (v10 & ~(unsigned __int16)v3 | v9 & v3);
    v4 = (unsigned __int16)((((_WORD)v4 << 14) | (v4 >> 2)) - *(v6 - 2) - (v10 & ~(_WORD)v3 | v9 & v3));
    LOWORD(v3) = (((unsigned __int16)v3 >> 1) | ((_WORD)v3 << 15)) - *(v6 - 3) - (v11 & ~(_WORD)v5 | v10 & v9);
    if (--v8)
      goto LABEL_8;
    if (!--v7)
      break;
    v12 = *(_WORD *)(a2 + 2 * (v10 & 0x3F));
    if (v7 == 2)
      v8 = 6;
    else
      v8 = 5;
    v13 = v9 - v12;
    v5 = (unsigned __int16)(v9 - v12);
    v14 = *(_WORD *)(a2 + 2 * (v3 & 0x3F));
    LOWORD(v3) = v3 - *(_WORD *)(a2 + 2 * (v13 & 0x3F));
    v4 = (unsigned __int16)(v11 - v14);
    v2 = (unsigned __int16)(v10 - *(_WORD *)(a2 + 2 * (v11 & 0x3F)));
LABEL_8:
    v3 = (unsigned __int16)v3;
    v6 -= 4;
  }
  *result = (unsigned __int16)v3 | ((unsigned __int16)v4 << 16);
  result[1] = v2 | (v5 << 16);
  return result;
}

void *sub_23414B010()
{
  return &unk_250506438;
}

uint64_t sub_23414B01C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = sub_23416E2B8(a1);
  sub_23419389C(v3, v4, a2);
  return 1;
}

uint64_t sub_23414B054(uint64_t a1, _BYTE *a2, char *a3, uint64_t a4)
{
  sub_234193848(*(int **)(a1 + 16), a4, a3, a2);
  return 1;
}

uint64_t *sub_23414B07C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;

  if (a1)
    return 0;
  v1 = sub_23418E2E4(0x10uLL);
  if (v1)
  {
    v1[1] = (uint64_t)sub_23418DE08((uint64_t)sub_23414B0FC, (uint64_t)sub_23414B104);
    v3 = sub_23418DE08((uint64_t)sub_23414B110, (uint64_t)sub_23414B144);
    *v1 = (uint64_t)v3;
    if (!v1[1] || v3 == 0)
    {
      sub_23414B188(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_23414B0FC(const char **a1)
{
  return sub_23418E4E4(*a1);
}

uint64_t sub_23414B104(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_23414B110(const char **a1)
{
  int v2;

  v2 = sub_23418E4E4(*a1);
  return sub_23418E4E4(a1[1]) ^ (4 * v2);
}

uint64_t sub_23414B144(const char **a1, const char **a2)
{
  uint64_t result;

  result = strcmp(*a1, *a2);
  if (!(_DWORD)result)
    return strcmp(a1[1], a2[1]);
  return result;
}

void sub_23414B188(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  if (a1)
  {
    v2 = a1[1];
    v4 = sub_23414B208;
    v5 = 0;
    sub_23418E1A0(v2, (void (*)(_QWORD, uint64_t))sub_23414BE54, (uint64_t)&v4);
    sub_23418DE74((_QWORD *)a1[1]);
    v3 = *a1;
    v4 = sub_23414B20C;
    v5 = 0;
    sub_23418E1A0(v3, (void (*)(_QWORD, uint64_t))sub_23414BE94, (uint64_t)&v4);
    sub_23418DE74((_QWORD *)*a1);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_23414B210(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = 0;
  result = sub_23418DEE4(*(_QWORD **)(a1 + 8), (uint64_t)v3, (uint64_t (*)(_QWORD, uint64_t))sub_23414BE9C, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23414BEA8);
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_23414B250(_QWORD **a1, const char *a2, uint64_t a3)
{
  const char *v3;
  uint64_t result;
  _QWORD v5[3];

  v3 = "default";
  if (a2)
    v3 = a2;
  v5[1] = a3;
  v5[2] = 0;
  v5[0] = v3;
  result = sub_23418DEE4(*a1, (uint64_t)v5, (uint64_t (*)(_QWORD, uint64_t))sub_23414BEB8, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23414BEC4);
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_23414B2A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  char v21;
  _BYTE *v22;
  char *v23;
  char *i;
  int v25;
  unsigned __int8 *v27;
  int v28;
  _BOOL4 v29;
  BOOL v30;
  unsigned __int8 *v31;
  int v32;
  BOOL v33;
  const char *j;
  unsigned int v36;
  char *v37;
  char *v38;
  char *v39;
  const char *v40;
  char *m;
  uint64_t v42;
  uint64_t n;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  char *v50;
  unsigned int v51;
  _BOOL4 v52;
  uint64_t v53;
  BOOL v54;
  _BOOL4 v55;
  _QWORD *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  _QWORD *v60;
  unsigned int v61;
  uint64_t v62;
  char *v64;
  char *v65;
  char *k;
  unsigned int v67;
  char *v68;
  uint64_t v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  char *__s2;
  char __str[8];
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  __s2 = 0;
  v6 = sub_234147410();
  if (!v6)
  {
    v70 = 7;
    v71 = 424;
LABEL_137:
    sub_2341579B4(13, 0, v70, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/conf/conf.c", v71);
    goto LABEL_138;
  }
  v7 = (char *)sub_23418E55C("default");
  __s2 = v7;
  if (!v7)
  {
LABEL_138:
    v10 = 0;
    goto LABEL_144;
  }
  v8 = sub_23414B99C(a1, v7);
  if (!v8)
  {
    v70 = 104;
    v71 = 435;
    goto LABEL_137;
  }
  v9 = v8;
  if (!sub_2341474C8(v6, 0x200uLL))
  {
    v10 = 0;
    goto LABEL_140;
  }
  v82 = (uint64_t)v9;
  v10 = 0;
  while (2)
  {
    v11 = 0;
    v12 = 0;
    LODWORD(v13) = 0;
LABEL_7:
    v14 = v6[1] + v11;
    *(_BYTE *)v14 = 0;
    sub_234144DC4(a2, v14, 511);
    *(_BYTE *)(v14 + 511) = 0;
    v15 = strlen((const char *)v14);
    if ((v12 & 1) == 0 && !v15)
    {
      sub_234141344((uint64_t)v6);
      sub_23418E3C4(__s2);
      return 1;
    }
    v16 = v15;
    if (v15 >= 1)
    {
      v17 = v15 + 1;
      v16 = v15;
      while (1)
      {
        v18 = *(unsigned __int8 *)(v14 + (v17 - 2));
        v19 = v18 == 13 || v18 == 10;
        if (!v19)
          break;
        --v16;
        if ((unint64_t)--v17 <= 1)
        {
          v16 = 0;
          break;
        }
      }
    }
    if (v15)
      v20 = v16 == v15;
    else
      v20 = 0;
    v21 = v20;
    if (!v20)
    {
      *(_BYTE *)(v14 + v16) = 0;
      ++v10;
    }
    LODWORD(v13) = v16 + (_DWORD)v13;
    if ((int)v13 >= 1 && (v22 = (_BYTE *)(v6[1] + ((_DWORD)v13 - 1)), *v22 == 92))
    {
      if ((int)v13 < 2)
      {
        v12 = 1;
        LODWORD(v13) = (_DWORD)v13 - 1;
        goto LABEL_112;
      }
      if (*(v22 - 1) != 92)
      {
        v21 = 1;
        LODWORD(v13) = (_DWORD)v13 - 1;
      }
      if ((v21 & 1) != 0)
      {
LABEL_31:
        v12 = 1;
        goto LABEL_112;
      }
    }
    else if ((v21 & 1) != 0)
    {
      goto LABEL_31;
    }
    v23 = (char *)v6[1];
    for (i = v23; ; ++i)
    {
      v25 = *i;
      if (v25 > 0x20 || ((1 << v25) & 0x100002600) == 0)
        break;
    }
    while (v25 > 38)
    {
      if (v25 != 39)
      {
        if (v25 == 92)
        {
          if (*++i)
            ++i;
          goto LABEL_62;
        }
        if (v25 != 96)
          goto LABEL_59;
      }
LABEL_44:
      v27 = (unsigned __int8 *)(i + 1);
      v28 = i[1];
      v29 = v28 == v25;
      if (i[1])
        v30 = v28 == v25;
      else
        v30 = 1;
      if (v30)
      {
LABEL_56:
        i += 2;
        if (!v29)
          i = (char *)v27;
      }
      else
      {
        while (1)
        {
          v31 = v27;
          if (v28 == 92)
          {
            v32 = i[2];
            i += 2;
            v31 = (unsigned __int8 *)i;
            if (!v32)
              break;
          }
          v27 = v31 + 1;
          v28 = v31[1];
          v29 = v28 == v25;
          if (v31[1])
            v33 = v28 == v25;
          else
            v33 = 1;
          i = (char *)v31;
          if (v33)
          {
            i = (char *)v31;
            goto LABEL_56;
          }
        }
      }
LABEL_62:
      v25 = *i;
    }
    if (v25 == 34)
      goto LABEL_44;
    if (!v25)
      goto LABEL_68;
    if (v25 != 35)
    {
LABEL_59:
      ++i;
      goto LABEL_62;
    }
    *i = 0;
LABEL_68:
    for (j = v23 + 1; ; ++j)
    {
      v36 = *v23;
      if (v36 > 0x20)
        goto LABEL_73;
      if (((1 << v36) & 0x100002600) == 0)
        break;
      ++v23;
    }
    if (!*v23)
    {
LABEL_111:
      v12 = 0;
      LODWORD(v13) = 0;
      goto LABEL_112;
    }
LABEL_73:
    if (v36 == 91)
    {
      while (1)
      {
        v61 = *(unsigned __int8 *)j;
        v45 = v61 > 0x20;
        v62 = (1 << v61) & 0x100002600;
        if (v45 || v62 == 0)
          break;
        ++j;
      }
      v64 = (char *)j;
      while (2)
      {
        v65 = sub_23414BA44(v64);
        for (k = v65; ; ++k)
        {
          v67 = *k;
          if (v67 > 0x20)
            goto LABEL_126;
          if (((1 << v67) & 0x100002600) == 0)
            break;
        }
        if (!*k)
        {
LABEL_141:
          v72 = 101;
          v73 = 512;
          goto LABEL_143;
        }
LABEL_126:
        if (v67 != 93)
        {
          v19 = k == v64;
          v64 = k;
          if (!v19)
            continue;
          goto LABEL_141;
        }
        break;
      }
      *v65 = 0;
      if (!sub_23414BAD8((_QWORD **)&__s2, j))
        goto LABEL_144;
      v68 = __s2;
      *(_QWORD *)__str = __s2;
      v85 = 0;
      v69 = sub_23418DEE4(*(_QWORD **)(a1 + 8), (uint64_t)__str, (uint64_t (*)(_QWORD, uint64_t))sub_23414BE9C, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23414BEA8);
      if (v69 || (v69 = (uint64_t)sub_23414B99C(a1, v68)) != 0)
      {
        v82 = v69;
        if (sub_2341474C8(v6, 0x200uLL))
          continue;
        goto LABEL_140;
      }
      v72 = 104;
      v73 = 523;
LABEL_143:
      sub_2341579B4(13, 0, v72, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/conf/conf.c", v73);
LABEL_144:
      v56 = 0;
      goto LABEL_145;
    }
    break;
  }
  v37 = sub_23414BA44(v23);
  if (*v37 == 58 && v37[1] == 58)
  {
    *v37 = 0;
    v38 = v37 + 2;
    v37 = sub_23414BA44(v37 + 2);
    v39 = v23;
    v23 = v38;
  }
  else
  {
    v39 = 0;
  }
  v40 = v37 + 1;
  for (m = v37; ; ++m)
  {
    v42 = *((unsigned __int8 *)v40 - 1);
    if (v42 > 0x3D)
      goto LABEL_142;
    if (((1 << v42) & 0x100002600) == 0)
      break;
    ++v40;
  }
  if (v42 != 61)
  {
LABEL_142:
    v72 = 102;
    v73 = 540;
    goto LABEL_143;
  }
  *v37 = 0;
  for (n = 1; ; ++n)
  {
    v44 = *(unsigned __int8 *)v40;
    v45 = v44 > 0x20;
    v46 = (1 << v44) & 0x100002600;
    if (v45 || v46 == 0)
      break;
    ++v40;
  }
  do
  {
    v48 = n;
    v49 = *++m;
    --n;
  }
  while (v49);
  do
  {
    v50 = m;
    if (!v48)
      break;
    --m;
    v51 = *(v50 - 1);
    v52 = v51 == 10;
    v45 = v51 > 0x20;
    v53 = (1 << v51) & 0x100002200;
    v54 = v45 || v53 == 0;
    v55 = !v54 || v52;
    ++v48;
  }
  while (v55);
  *v50 = 0;
  v56 = sub_23418E344(0x18uLL);
  if (!v56)
    goto LABEL_145;
  if (!v39)
    v39 = __s2;
  v57 = sub_23418E55C(v23);
  v56[1] = v57;
  if (!v57 || !sub_23414BAD8((_QWORD **)v56 + 2, v40))
    goto LABEL_145;
  v58 = v82;
  if (!strcmp(v39, __s2)
    || (*(_QWORD *)__str = v39,
        v85 = 0,
        (v58 = sub_23418DEE4(*(_QWORD **)(a1 + 8), (uint64_t)__str, (uint64_t (*)(_QWORD, uint64_t))sub_23414BE9C, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23414BEA8)) != 0)|| (v58 = (uint64_t)sub_23414B99C(a1, v39)) != 0)
  {
    v59 = sub_23418E55C(*(const char **)v58);
    *v56 = v59;
    if (!v59 || !sub_2341958E8(*(unint64_t **)(v58 + 8), (uint64_t)v56))
      goto LABEL_145;
    v60 = *(_QWORD **)a1;
    *(_QWORD *)__str = 0;
    if (!sub_23418E048(v60, __str, (uint64_t)v56, (uint64_t (*)(_QWORD, uint64_t))sub_23414BEB8, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23414BEC4))
    {
      sub_2341958F0(*(uint64_t **)(v58 + 8));
      goto LABEL_145;
    }
    v13 = *(_QWORD **)__str;
    if (*(_QWORD *)__str)
    {
      sub_234195680(*(uint64_t **)(v58 + 8), *(uint64_t *)__str);
      sub_23414BC7C(v13);
      goto LABEL_111;
    }
    v12 = 0;
LABEL_112:
    v11 = (int)v13;
    if (!sub_2341474C8(v6, (int)v13 + 512))
    {
LABEL_140:
      v72 = 7;
      v73 = 443;
      goto LABEL_143;
    }
    goto LABEL_7;
  }
  sub_2341579B4(13, 0, 104, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/conf/conf.c", 576);
LABEL_145:
  sub_234141344((uint64_t)v6);
  sub_23418E3C4(__s2);
  if (a3)
    *a3 = v10;
  snprintf(__str, 0x18uLL, "%ld", v10);
  sub_234157A5C(2u, v74, v75, v76, v77, v78, v79, v80, (uint64_t)"line ");
  sub_23414BC7C(v56);
  return 0;
}

_QWORD *sub_23414B99C(uint64_t a1, const char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v9;

  v4 = sub_23418E2E4(0x10uLL);
  if (v4)
  {
    *v4 = sub_23418E55C(a2);
    v5 = sub_2341953A0();
    v4[1] = v5;
    if (*v4)
      v6 = v5 == 0;
    else
      v6 = 1;
    if (v6
      || (v7 = *(_QWORD **)(a1 + 8),
          v9 = 0,
          !sub_23418E048(v7, &v9, (uint64_t)v4, (uint64_t (*)(_QWORD, uint64_t))sub_23414BE9C, (unsigned int (*)(_QWORD, _QWORD, uint64_t))sub_23414BEA8)))
    {
      sub_23414BE5C(v4);
      return 0;
    }
    else
    {
      sub_23414BE5C(v9);
    }
  }
  return v4;
}

char *sub_23414BA44(char *a1)
{
  int v2;
  BOOL v4;

  while (1)
  {
    while (1)
    {
      v2 = *a1;
      if (v2 != 92)
        break;
      if (*++a1)
        ++a1;
    }
    if (!sub_23418E674(*a1))
    {
      v4 = v2 - 33 > 0x3E
        || ((1 << (v2 - 33)) & 0x60000000C4007E31) == 0;
      if (v4 && v2 != 124 && v2 != 126)
        break;
    }
    ++a1;
  }
  return a1;
}

uint64_t sub_23414BAD8(_QWORD **a1, const char *a2)
{
  uint64_t result;
  unint64_t *v5;
  int v6;
  int i;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  int v13;

  result = (uint64_t)sub_234147410();
  if (result)
  {
    v5 = (unint64_t *)result;
    v6 = strlen(a2);
    if (!sub_2341474C8(v5, v6 + 1))
    {
LABEL_40:
      sub_234141344((uint64_t)v5);
      return 0;
    }
    for (i = 0; ; ++i)
    {
      while (1)
      {
        v8 = *(unsigned __int8 *)a2;
        if (v8 > 0x26)
          break;
        if (v8 != 34)
        {
          if (!*a2)
            goto LABEL_41;
          if (v8 == 36)
          {
            sub_2341579B4(13, 0, 107, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/conf/conf.c", 259);
            goto LABEL_40;
          }
LABEL_27:
          ++a2;
          goto LABEL_39;
        }
LABEL_12:
        v9 = (unsigned __int8 *)(a2 + 1);
        v10 = *((unsigned __int8 *)a2 + 1);
        if (a2[1])
          v11 = v10 == v8;
        else
          v11 = 1;
        if (!v11)
        {
          v12 = i;
          do
          {
            if (v10 == 92)
            {
              v10 = *((unsigned __int8 *)a2 + 2);
              v9 = (unsigned __int8 *)(a2 + 2);
              if (!a2[2])
                break;
            }
            a2 = (const char *)v9;
            *(_BYTE *)(v5[1] + v12++) = v10;
            ++i;
            v13 = *++v9;
            v10 = v13;
          }
          while (v13 && v10 != v8);
        }
        if (v10 == v8)
          a2 = (const char *)(v9 + 1);
        else
          a2 = (const char *)v9;
      }
      if (v8 == 96)
        goto LABEL_12;
      if (v8 != 92)
      {
        if (v8 != 39)
          goto LABEL_27;
        goto LABEL_12;
      }
      v8 = *((unsigned __int8 *)a2 + 1);
      if (v8 <= 0x6D)
      {
        if (v8 != 98)
        {
          if (!a2[1])
          {
LABEL_41:
            *(_BYTE *)(v5[1] + i) = 0;
            sub_23418E3C4(*a1);
            *a1 = (_QWORD *)v5[1];
            sub_23418E3C4(v5);
            return 1;
          }
LABEL_36:
          if (v8 == 116)
            LOBYTE(v8) = 9;
          goto LABEL_38;
        }
        LOBYTE(v8) = 8;
      }
      else if (v8 == 114)
      {
        LOBYTE(v8) = 13;
      }
      else
      {
        if (v8 != 110)
          goto LABEL_36;
        LOBYTE(v8) = 10;
      }
LABEL_38:
      a2 += 2;
LABEL_39:
      *(_BYTE *)(v5[1] + i) = v8;
    }
  }
  return result;
}

void sub_23414BC7C(_QWORD *a1)
{
  if (a1)
  {
    sub_23418E3C4((_QWORD *)*a1);
    sub_23418E3C4((_QWORD *)a1[1]);
    sub_23418E3C4((_QWORD *)a1[2]);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_23414BCBC(uint64_t a1, const char *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = sub_2341458B8(a2, "rb");
  if (v5)
  {
    v6 = (uint64_t)v5;
    v7 = sub_23414B2A4(a1, (uint64_t)v5, a3);
    sub_234144C64(v6);
    return v7;
  }
  else
  {
    sub_2341579B4(13, 0, 2, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/conf/conf.c", 609);
    return 0;
  }
}

uint64_t sub_23414BD44(char *__s, int __c, int a3, uint64_t (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  char *v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t result;

  if (__s)
  {
    v9 = __s;
    while (1)
    {
      if (a3)
      {
        v10 = *v9;
        if (*v9)
        {
          do
          {
            if (!sub_23418E6A4(v10))
              break;
            v11 = *++v9;
            v10 = v11;
          }
          while (v11);
        }
      }
      v12 = strchr(v9, __c);
      v13 = v12;
      if (v12 != v9)
      {
        if (*v9)
          break;
      }
      v15 = 0;
      v16 = 0;
LABEL_18:
      result = a4(v15, v16, a5);
      if ((int)result < 1)
        return result;
      v9 = v13 + 1;
      if (!v13)
        return 1;
    }
    v14 = v12;
    if (v12)
    {
      if (!a3)
        goto LABEL_16;
    }
    else
    {
      v14 = &v9[strlen(v9)];
      if (!a3)
      {
LABEL_16:
        --v14;
LABEL_17:
        v16 = v14 - v9 + 1;
        v15 = v9;
        goto LABEL_18;
      }
    }
    do
      v17 = *--v14;
    while (sub_23418E6A4(v17));
    goto LABEL_17;
  }
  sub_2341579B4(13, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/conf/conf.c", 626);
  return 0;
}

uint64_t sub_23414BE54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))a2)(a1, *(_QWORD *)(a2 + 8));
}

void sub_23414BE5C(_QWORD *a1)
{
  if (a1)
  {
    sub_23418E3C4((_QWORD *)*a1);
    sub_234141344(a1[1]);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_23414BE94(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))a2)(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_23414BE9C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23414BEA8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t sub_23414BEB8(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t sub_23414BEC4(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

_BYTE *sub_23414BED4(_BYTE *a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v4 = *(_OWORD *)(a2 + 96);
  v12[0] = *(_OWORD *)(a2 + 80);
  v12[1] = v4;
  v13 = *(_QWORD *)(a2 + 112);
  sub_234150170((uint64_t)v10, (unint64_t *)v12);
  sub_2341503BC((uint64_t)v8, (unint64_t *)a2, (unint64_t *)v10);
  sub_2341503BC((uint64_t)v6, (unint64_t *)(a2 + 40), (unint64_t *)v10);
  sub_23414BFA8(a1, v6);
  result = sub_23414BFA8(v12, v8);
  a1[31] ^= LOBYTE(v12[0]) << 7;
  return result;
}

_BYTE *sub_23414BFA8(_BYTE *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *a2 - 0x7FFFFFFFFFFEDLL;
  v3 = a2[1] - -(uint64_t)(v2 >> 51) - 0x7FFFFFFFFFFFFLL;
  v4 = a2[2] - -(uint64_t)(v3 >> 51) - 0x7FFFFFFFFFFFFLL;
  v5 = a2[3] - -(uint64_t)(v4 >> 51) - 0x7FFFFFFFFFFFFLL;
  v6 = v2 & 0x7FFFFFFFFFFFFLL;
  v7 = v3 & 0x7FFFFFFFFFFFFLL;
  v8 = v4 & 0x7FFFFFFFFFFFFLL;
  v9 = v5 & 0x7FFFFFFFFFFFFLL;
  v10 = a2[4] - -(uint64_t)(v5 >> 51) - 0x7FFFFFFFFFFFFLL;
  if ((v10 & 0x7F8000000000000) != 0)
    v11 = -1;
  else
    v11 = 0;
  v12 = (v11 & 0x7FFFFFFFFFFEDLL) + v6;
  result[1] = BYTE1(v12);
  result[2] = BYTE2(v12);
  result[3] = (unint64_t)((v11 & 0xFFFFFFED) + v6) >> 24;
  result[4] = BYTE4(v12);
  result[5] = BYTE5(v12);
  v13 = (v11 & 0x7FFFFFFFFFFFFLL) + v7 + (v12 >> 51);
  *result = v12;
  result[6] = BYTE6(v12) & 7 | (8 * (v11 + v7 + (v12 >> 51)));
  result[7] = v13 >> 5;
  result[8] = v13 >> 13;
  result[9] = v13 >> 21;
  result[10] = v13 >> 29;
  result[11] = v13 >> 37;
  v14 = v8 + (v11 & 0x7FFFFFFFFFFFFLL) + (v13 >> 51);
  result[12] = (v13 >> 45) & 0x3F | (((_BYTE)v8 + (_BYTE)v11 + (v13 >> 51)) << 6);
  result[13] = v14 >> 2;
  result[14] = v14 >> 10;
  result[15] = v14 >> 18;
  result[16] = v14 >> 26;
  result[17] = v14 >> 34;
  result[18] = v14 >> 42;
  v15 = v9 + (v11 & 0x7FFFFFFFFFFFFLL) + (v14 >> 51);
  result[19] = ((v14 & 0x4000000000000) != 0) | (2 * (v9 + v11 + (v14 >> 51)));
  result[20] = v15 >> 7;
  result[21] = v15 >> 15;
  result[22] = v15 >> 23;
  result[23] = v15 >> 31;
  result[24] = v15 >> 39;
  v16 = v10 + v11 + (v15 >> 51);
  result[25] = (v15 >> 47) & 0xF | (16 * v16);
  result[26] = v16 >> 4;
  result[27] = v16 >> 12;
  result[28] = v16 >> 20;
  result[29] = v16 >> 28;
  result[30] = v16 >> 36;
  result[31] = (v16 >> 44) & 0x7F;
  return result;
}

uint64_t sub_23414C160(uint64_t a1, int64x2_t *a2)
{
  unint64_t *v3;
  int64x2_t v4;
  uint64_t v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  int64x2_t v37;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[3];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int64x2_t v50;
  int64x2_t v51;
  unint64_t v52[5];
  _OWORD v53[2];
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  int64x2_t v57;
  int64x2_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  memset(v45, 0, 40);
  v3 = (unint64_t *)(a1 + 40);
  v4 = a2[1];
  v57 = *a2;
  v58 = v4;
  v58.i8[15] = v4.i8[15] & 0x7F;
  sub_23414D0A8((unint64_t *)(a1 + 40), (unsigned int *)&v57);
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 80) = 1;
  v39 = v3;
  sub_23414C680((uint64_t)&v46, v3);
  sub_2341503BC((uint64_t)v45, (unint64_t *)&v46, qword_2342E0850);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = vaddq_s64(*(int64x2_t *)((char *)v45 + 8), *(int64x2_t *)(a1 + 88));
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = vaddq_s64(*(int64x2_t *)((char *)&v45[1] + 8), *(int64x2_t *)(a1 + 104));
  v10 = *(_QWORD *)(a1 + 104);
  v49 = *(_QWORD *)&v45[0] + 1;
  v11 = *((_QWORD *)&v46 + 1) - v7 + ((unint64_t)(v46 + 0xFFFFFFFFFFFD9) >> 51) + 0xFFFFFFFFFFFFELL;
  v12 = v47 - v5 + (v11 >> 51) + 0xFFFFFFFFFFFFELL;
  v13 = v12 & 0x7FFFFFFFFFFFFLL;
  v50 = v6;
  v14 = *((_QWORD *)&v47 + 1) - v10 + (v12 >> 51) + 0xFFFFFFFFFFFFELL;
  v15 = v48 - v8 + (v14 >> 51) + 0xFFFFFFFFFFFFELL;
  v16 = ((v46 + 0xFFFFFFFFFFFD9) & 0x7FFFFFFFFFFFFLL) + 19 * (v15 >> 51);
  v17 = (v11 & 0x7FFFFFFFFFFFFLL) + (v16 >> 51);
  v18 = v16 & 0x7FFFFFFFFFFFFLL;
  v19 = v17 & 0x7FFFFFFFFFFFFLL;
  v52[0] = v16 & 0x7FFFFFFFFFFFFLL;
  v52[1] = v17 & 0x7FFFFFFFFFFFFLL;
  v20 = v13 + (v17 >> 51);
  v21 = v14 & 0x7FFFFFFFFFFFFLL;
  v52[2] = v20;
  v52[3] = v14 & 0x7FFFFFFFFFFFFLL;
  v22 = v15 & 0x7FFFFFFFFFFFFLL;
  v52[4] = v15 & 0x7FFFFFFFFFFFFLL;
  v51 = v9;
  sub_2341503BC((uint64_t)&v46, v52, (unint64_t *)&v49);
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  v56 = 0;
  memset(v55, 0, sizeof(v55));
  sub_23414C680((uint64_t)&v57, (unint64_t *)&v46);
  sub_23414C680((uint64_t)v55, (unint64_t *)&v57);
  sub_23414C680((uint64_t)v55, (unint64_t *)v55);
  sub_2341503BC((uint64_t)v55, (unint64_t *)&v46, (unint64_t *)v55);
  sub_2341503BC((uint64_t)&v57, (unint64_t *)&v57, (unint64_t *)v55);
  sub_23414C680((uint64_t)&v57, (unint64_t *)&v57);
  sub_2341503BC((uint64_t)&v57, (unint64_t *)v55, (unint64_t *)&v57);
  sub_23414C680((uint64_t)v55, (unint64_t *)&v57);
  v23 = 4;
  do
  {
    sub_23414C680((uint64_t)v55, (unint64_t *)v55);
    --v23;
  }
  while (v23);
  sub_2341503BC((uint64_t)&v57, (unint64_t *)v55, (unint64_t *)&v57);
  sub_23414C680((uint64_t)v55, (unint64_t *)&v57);
  v24 = 9;
  do
  {
    sub_23414C680((uint64_t)v55, (unint64_t *)v55);
    --v24;
  }
  while (v24);
  v54 = 0;
  memset(v53, 0, sizeof(v53));
  sub_2341503BC((uint64_t)v55, (unint64_t *)v55, (unint64_t *)&v57);
  sub_23414C680((uint64_t)v53, (unint64_t *)v55);
  v25 = 19;
  do
  {
    sub_23414C680((uint64_t)v53, (unint64_t *)v53);
    --v25;
  }
  while (v25);
  sub_2341503BC((uint64_t)v55, (unint64_t *)v53, (unint64_t *)v55);
  sub_23414C680((uint64_t)v55, (unint64_t *)v55);
  v26 = 9;
  do
  {
    sub_23414C680((uint64_t)v55, (unint64_t *)v55);
    --v26;
  }
  while (v26);
  sub_2341503BC((uint64_t)&v57, (unint64_t *)v55, (unint64_t *)&v57);
  sub_23414C680((uint64_t)v55, (unint64_t *)&v57);
  v27 = 49;
  do
  {
    sub_23414C680((uint64_t)v55, (unint64_t *)v55);
    --v27;
  }
  while (v27);
  sub_2341503BC((uint64_t)v55, (unint64_t *)v55, (unint64_t *)&v57);
  sub_23414C680((uint64_t)v53, (unint64_t *)v55);
  v28 = 99;
  do
  {
    sub_23414C680((uint64_t)v53, (unint64_t *)v53);
    --v28;
  }
  while (v28);
  sub_2341503BC((uint64_t)v55, (unint64_t *)v53, (unint64_t *)v55);
  sub_23414C680((uint64_t)v55, (unint64_t *)v55);
  v29 = 49;
  do
  {
    sub_23414C680((uint64_t)v55, (unint64_t *)v55);
    --v29;
  }
  while (v29);
  sub_2341503BC((uint64_t)&v57, (unint64_t *)v55, (unint64_t *)&v57);
  sub_23414C680((uint64_t)&v57, (unint64_t *)&v57);
  sub_23414C680((uint64_t)&v57, (unint64_t *)&v57);
  sub_2341503BC(a1, (unint64_t *)&v57, (unint64_t *)&v46);
  sub_2341503BC(a1, (unint64_t *)a1, v52);
  sub_23414C680((uint64_t)v45, (unint64_t *)a1);
  sub_2341503BC((uint64_t)v45, (unint64_t *)v45, (unint64_t *)&v49);
  v30 = v45[0];
  v40 = *(_QWORD *)&v45[0] - v18 + 0xFFFFFFFFFFFDALL;
  v31 = v45[1];
  v32 = *(_QWORD *)&v45[1] - v20 + 0xFFFFFFFFFFFFELL;
  v33 = v20;
  v34 = *(_QWORD *)&v45[2];
  v41 = *((_QWORD *)&v45[0] + 1) - v19 + 0xFFFFFFFFFFFFELL;
  v42 = v32;
  v43 = *((_QWORD *)&v45[1] + 1) - v21 + 0xFFFFFFFFFFFFELL;
  v44 = *(_QWORD *)&v45[2] - v22 + 0xFFFFFFFFFFFFELL;
  if (sub_23414C8A4(&v40))
  {
    v40 = v30 + v18;
    v41 = *((_QWORD *)&v30 + 1) + v19;
    v42 = v31 + v33;
    v43 = *((_QWORD *)&v31 + 1) + v21;
    v44 = v34 + v22;
    if (sub_23414C8A4(&v40))
      return 0;
    sub_2341503BC(a1, (unint64_t *)a1, qword_2342E0878);
  }
  sub_23414BFA8(&v57, (_QWORD *)a1);
  if ((v57.i8[0] & 1) != a2[1].u8[15] >> 7)
  {
    v36 = 0xFFFFFFFFFFFFELL - *(_QWORD *)(a1 + 32);
    v37 = vsubq_s64(vdupq_n_s64(0xFFFFFFFFFFFFEuLL), *(int64x2_t *)(a1 + 16));
    v57 = vsubq_s64((int64x2_t)xmmword_2342DA840, *(int64x2_t *)a1);
    v58 = v37;
    v59 = v36;
    sub_23414C848((unint64_t *)a1, &v57);
  }
  sub_2341503BC(a1 + 120, (unint64_t *)a1, v39);
  return 1;
}

int8x16_t sub_23414C680(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  signed __int128 v12;
  unsigned __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int8x16_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  int8x16_t result;

  v3 = a2[3];
  v2 = a2[4];
  v4 = a2[1];
  v5 = a2[2];
  v6 = 2 * v5;
  v7 = *a2;
  v8 = (v3 * (unsigned __int128)(38 * v2)) >> 64;
  v9 = v3 * 38 * v2;
  v10 = (v5 * (unsigned __int128)(38 * v2)) >> 64;
  v11 = v5 * 38 * v2;
  v12 = v4 * (unsigned __int128)(38 * v2) + v5 * (unsigned __int128)(38 * v3) + v7 * (unsigned __int128)v7;
  v13 = v4 * (unsigned __int128)(2 * v3) + v5 * (unsigned __int128)v5 + v7 * (unsigned __int128)(2 * v2);
  v16 = v4 * (unsigned __int128)(2 * v5) + 19 * v2 * (unsigned __int128)v2 + v7 * (unsigned __int128)(2 * v3);
  v15 = v16 >> 64;
  v14 = v16;
  v18 = v4 * v4 + v9 + v7 * v6;
  v17 = (v4 * (unsigned __int128)v4 + __PAIR128__(v8, v9) + v7 * (unsigned __int128)(unint64_t)v6) >> 64;
  v20 = __PAIR128__(v10, v11) + 19 * v3 * (unsigned __int128)v3 + v7 * (unsigned __int128)(2 * v4);
  v19 = *((_QWORD *)&v20 + 1);
  v21 = v12 >> 51;
  if (__CFADD__((_QWORD)v20, v21))
    v19 = *((_QWORD *)&v20 + 1) + 1;
  *((_QWORD *)&v23 + 1) = v19;
  *(_QWORD *)&v23 = v20 + v21;
  v22 = v23 >> 51;
  v24 = __CFADD__(v18, v22);
  v25 = v18 + v22;
  if (v24)
    ++v17;
  *((_QWORD *)&v27 + 1) = v17;
  *(_QWORD *)&v27 = v25;
  v26 = v27 >> 51;
  v24 = __CFADD__(v14, v26);
  v28 = v14 + v26;
  if (v24)
    v29 = v15 + 1;
  else
    v29 = v15;
  *((_QWORD *)&v31 + 1) = v29;
  *(_QWORD *)&v31 = v28;
  v30 = v31 >> 51;
  v24 = __CFADD__((_QWORD)v13, v30);
  v32 = v13 + v30;
  v33.i64[0] = v28;
  if (v24)
    v34 = *((_QWORD *)&v13 + 1) + 1;
  else
    v34 = *((_QWORD *)&v13 + 1);
  *((_QWORD *)&v35 + 1) = v34;
  *(_QWORD *)&v35 = v32;
  v33.i64[1] = v32;
  v36 = (v12 & 0x7FFFFFFFFFFFFLL) + 19 * (v35 >> 51);
  v37 = ((v20 + v21) & 0x7FFFFFFFFFFFFLL) + (v36 >> 51);
  *(_QWORD *)a1 = v36 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 8) = v37 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 16) = (v25 & 0x7FFFFFFFFFFFFLL) + (v37 >> 51);
  result = vandq_s8(v33, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL));
  *(int8x16_t *)(a1 + 24) = result;
  return result;
}

int64x2_t sub_23414C804(int64x2_t *a1, int64x2_t *a2, int64x2_t *a3)
{
  int64x2_t result;
  uint64_t v4;
  int64x2_t v5;

  result = vaddq_s64(vsubq_s64(*a2, *a3), (int64x2_t)xmmword_2342DA840);
  v4 = a2[2].i64[0] - a3[2].i64[0] + 0xFFFFFFFFFFFFELL;
  v5 = vaddq_s64(vsubq_s64(a2[1], a3[1]), vdupq_n_s64(0xFFFFFFFFFFFFEuLL));
  *a1 = result;
  a1[1] = v5;
  a1[2].i64[0] = v4;
  return result;
}

unint64_t *sub_23414C848(unint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = a2[1] + (*a2 >> 51);
  v3 = a2[2] + (v2 >> 51);
  v4 = a2[3] + (v3 >> 51);
  v5 = a2[4] + (v4 >> 51);
  v6 = (*a2 & 0x7FFFFFFFFFFFFLL) + 19 * (v5 >> 51);
  v7 = (v2 & 0x7FFFFFFFFFFFFLL) + (v6 >> 51);
  *result = v6 & 0x7FFFFFFFFFFFFLL;
  result[1] = v7 & 0x7FFFFFFFFFFFFLL;
  result[2] = (v3 & 0x7FFFFFFFFFFFFLL) + (v7 >> 51);
  result[3] = v4 & 0x7FFFFFFFFFFFFLL;
  result[4] = v5 & 0x7FFFFFFFFFFFFLL;
  return result;
}

BOOL sub_23414C8A4(_QWORD *a1)
{
  _OWORD v2[2];
  uint64_t v3;
  char v4[32];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 0;
  memset(v2, 0, sizeof(v2));
  sub_23414C848((unint64_t *)v2, a1);
  sub_23414BFA8(v4, v2);
  return sub_23418E484(v4, byte_2342E0908, 32) != 0;
}

double sub_23414C928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int64x2_t v5;
  __int128 v6;
  __int128 v7;
  double result;

  v4 = *(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 72);
  v5 = vaddq_s64(*(int64x2_t *)(a2 + 16), *(int64x2_t *)(a2 + 56));
  *(int64x2_t *)a1 = vaddq_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 40));
  *(int64x2_t *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  sub_23414C804((int64x2_t *)(a1 + 40), (int64x2_t *)(a2 + 40), (int64x2_t *)a2);
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(_QWORD *)&result = sub_2341503BC(a1 + 120, (unint64_t *)(a2 + 120), qword_2342E08A0).u64[0];
  return result;
}

double sub_23414C99C(uint64_t a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t *v4;
  unint64_t *v5;
  double result;

  v2 = a2;
  v4 = a2 + 15;
  sub_2341503BC(a1, a2, a2 + 15);
  v5 = v2 + 5;
  v2 += 10;
  sub_2341503BC(a1 + 40, v5, v2);
  *(_QWORD *)&result = sub_2341503BC(a1 + 80, v2, v4).u64[0];
  return result;
}

double sub_23414C9F0(uint64_t a1, unint64_t *a2)
{
  unint64_t *v4;
  double result;

  v4 = a2 + 15;
  sub_2341503BC(a1, a2, a2 + 15);
  sub_2341503BC(a1 + 40, a2 + 5, a2 + 10);
  sub_2341503BC(a1 + 80, a2 + 10, v4);
  *(_QWORD *)&result = sub_2341503BC(a1 + 120, a2, a2 + 5).u64[0];
  return result;
}

uint64_t sub_23414CA60(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int64x2_t v6;
  int64x2_t v7;
  unint64_t *v8;
  int64x2_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t v41;
  uint64_t v42;

  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v6 = vaddq_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 40));
  v7 = vaddq_s64(*(int64x2_t *)(a2 + 16), *(int64x2_t *)(a2 + 56));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 72);
  v8 = (unint64_t *)(a1 + 40);
  *(int64x2_t *)a1 = v6;
  *(int64x2_t *)(a1 + 16) = v7;
  sub_23414C804((int64x2_t *)(a1 + 40), (int64x2_t *)(a2 + 40), (int64x2_t *)a2);
  sub_2341503BC((uint64_t)&v34, (unint64_t *)a1, a3);
  sub_2341503BC((uint64_t)&v37, v8, a3 + 5);
  sub_2341503BC((uint64_t)&v31, a3 + 15, (unint64_t *)(a2 + 120));
  sub_2341503BC((uint64_t)&v40, (unint64_t *)(a2 + 80), a3 + 10);
  v9 = v41;
  *(int64x2_t *)(a1 + 120) = vaddq_s64(v40, v40);
  v10 = 2 * v42;
  *(int64x2_t *)(a1 + 136) = vaddq_s64(v9, v9);
  *(_QWORD *)(a1 + 152) = v10;
  v11 = v34;
  v12 = v37;
  v13 = *((_QWORD *)&v34 + 1) - *((_QWORD *)&v37 + 1) + 0xFFFFFFFFFFFFELL;
  v14 = v35;
  v15 = v38;
  v16 = v35 - v38 + 0xFFFFFFFFFFFFELL;
  v17 = *((_QWORD *)&v35 + 1) - *((_QWORD *)&v38 + 1) + 0xFFFFFFFFFFFFELL;
  v18 = v36;
  v19 = v39;
  v20 = v36 - v39 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)a1 = v34 + 0xFFFFFFFFFFFDALL - v37;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v12 + v11;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)&v12 + 1) + *((_QWORD *)&v11 + 1);
  *(_QWORD *)(a1 + 56) = v15 + v14;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)&v15 + 1) + *((_QWORD *)&v14 + 1);
  *(_QWORD *)(a1 + 72) = v19 + v18;
  sub_23414C848((unint64_t *)&v34, (_QWORD *)(a1 + 120));
  v21 = v34;
  v22 = v31;
  v23 = *((_QWORD *)&v31 + 1) + *((_QWORD *)&v34 + 1);
  v24 = v35;
  v25 = v32;
  result = v32 + v35;
  v27 = *((_QWORD *)&v32 + 1) + *((_QWORD *)&v35 + 1);
  v28 = v36;
  v29 = v33;
  v30 = v33 + v36;
  *(_QWORD *)(a1 + 80) = v31 + v34;
  *(_QWORD *)(a1 + 88) = v23;
  *(_QWORD *)(a1 + 96) = result;
  *(_QWORD *)(a1 + 104) = v27;
  *(_QWORD *)(a1 + 112) = v30;
  *(_QWORD *)(a1 + 120) = v21 + 0xFFFFFFFFFFFDALL - v22;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)&v21 + 1) - *((_QWORD *)&v22 + 1) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 136) = v24 - v25 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 144) = *((_QWORD *)&v24 + 1) - *((_QWORD *)&v25 + 1) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 152) = v28 - v29 + 0xFFFFFFFFFFFFELL;
  return result;
}

uint64_t sub_23414CC40(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int64x2_t v6;
  int64x2_t v7;
  unint64_t *v8;
  int64x2_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t v41;
  uint64_t v42;

  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v6 = vaddq_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 40));
  v7 = vaddq_s64(*(int64x2_t *)(a2 + 16), *(int64x2_t *)(a2 + 56));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 72);
  v8 = (unint64_t *)(a1 + 40);
  *(int64x2_t *)a1 = v6;
  *(int64x2_t *)(a1 + 16) = v7;
  sub_23414C804((int64x2_t *)(a1 + 40), (int64x2_t *)(a2 + 40), (int64x2_t *)a2);
  sub_2341503BC((uint64_t)&v34, (unint64_t *)a1, a3 + 5);
  sub_2341503BC((uint64_t)&v37, v8, a3);
  sub_2341503BC((uint64_t)&v31, a3 + 15, (unint64_t *)(a2 + 120));
  sub_2341503BC((uint64_t)&v40, (unint64_t *)(a2 + 80), a3 + 10);
  v9 = v41;
  *(int64x2_t *)(a1 + 120) = vaddq_s64(v40, v40);
  v10 = 2 * v42;
  *(int64x2_t *)(a1 + 136) = vaddq_s64(v9, v9);
  *(_QWORD *)(a1 + 152) = v10;
  v11 = v34;
  v12 = v37;
  v13 = *((_QWORD *)&v34 + 1) - *((_QWORD *)&v37 + 1) + 0xFFFFFFFFFFFFELL;
  v14 = v35;
  v15 = v38;
  v16 = v35 - v38 + 0xFFFFFFFFFFFFELL;
  v17 = *((_QWORD *)&v35 + 1) - *((_QWORD *)&v38 + 1) + 0xFFFFFFFFFFFFELL;
  v18 = v36;
  v19 = v39;
  v20 = v36 - v39 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)a1 = v34 + 0xFFFFFFFFFFFDALL - v37;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v12 + v11;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)&v12 + 1) + *((_QWORD *)&v11 + 1);
  *(_QWORD *)(a1 + 56) = v15 + v14;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)&v15 + 1) + *((_QWORD *)&v14 + 1);
  *(_QWORD *)(a1 + 72) = v19 + v18;
  sub_23414C848((unint64_t *)&v34, (_QWORD *)(a1 + 120));
  v21 = v34;
  v22 = v31;
  v23 = *((_QWORD *)&v34 + 1) - *((_QWORD *)&v31 + 1) + 0xFFFFFFFFFFFFELL;
  v24 = v35;
  v25 = v32;
  result = v35 - v32 + 0xFFFFFFFFFFFFELL;
  v27 = *((_QWORD *)&v35 + 1) - *((_QWORD *)&v32 + 1) + 0xFFFFFFFFFFFFELL;
  v28 = v36;
  v29 = v33;
  v30 = v36 - v33 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 80) = v34 + 0xFFFFFFFFFFFDALL - v31;
  *(_QWORD *)(a1 + 88) = v23;
  *(_QWORD *)(a1 + 96) = result;
  *(_QWORD *)(a1 + 104) = v27;
  *(_QWORD *)(a1 + 112) = v30;
  *(_QWORD *)(a1 + 120) = v22 + v21;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)&v22 + 1) + *((_QWORD *)&v21 + 1);
  *(_QWORD *)(a1 + 136) = v25 + v24;
  *(_QWORD *)(a1 + 144) = *((_QWORD *)&v25 + 1) + *((_QWORD *)&v24 + 1);
  *(_QWORD *)(a1 + 152) = v29 + v28;
  return result;
}

void sub_23414CE20(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[1800];
  uint64_t v57;

  v5 = 0;
  v57 = *MEMORY[0x24BDAC8D0];
  do
  {
    *(_QWORD *)&v39 = 0;
    v37 = 0u;
    v38 = 0u;
    *(_QWORD *)&v29 = 0;
    v27 = 0u;
    v28 = 0u;
    sub_23414D0A8((unint64_t *)&v37, a3);
    sub_23414D0A8((unint64_t *)&v27, a3 + 8);
    v6 = &v56[v5];
    v7 = v27;
    v8 = v37;
    v9 = *((_QWORD *)&v37 + 1) + *((_QWORD *)&v27 + 1);
    v10 = v28;
    v11 = v38;
    v12 = v38 + v28;
    v13 = *((_QWORD *)&v38 + 1) + *((_QWORD *)&v28 + 1);
    v14 = v29;
    v15 = v39;
    v16 = v39 + v29;
    *v6 = v37 + v27;
    v6[1] = v9;
    v6[2] = v12;
    v6[3] = v13;
    v6[4] = v16;
    v6[5] = v7 - v8 + 0xFFFFFFFFFFFDALL;
    v6[6] = *((_QWORD *)&v7 + 1) - *((_QWORD *)&v8 + 1) + 0xFFFFFFFFFFFFELL;
    v6[7] = v10 - v11 + 0xFFFFFFFFFFFFELL;
    v6[8] = *((_QWORD *)&v10 + 1) - *((_QWORD *)&v11 + 1) + 0xFFFFFFFFFFFFELL;
    v6[9] = v14 - v15 + 0xFFFFFFFFFFFFELL;
    sub_2341503BC((uint64_t)&v56[v5 + 80], (unint64_t *)&v37, (unint64_t *)&v27);
    sub_2341503BC((uint64_t)&v56[v5 + 80], (unint64_t *)&v56[v5 + 80], qword_2342E08A0);
    v5 += 120;
    a3 += 16;
  }
  while (v5 != 1800);
  sub_23414D168(a1);
  v17 = 63;
  do
  {
    v18 = 0;
    v19 = 0;
    v20 = (unsigned __int8 *)(a2 + (v17 >> 3));
    do
    {
      v21 = *v20;
      v20 += 8;
      v19 |= ((v21 >> (v17 & 7)) & 1) << v18++;
    }
    while (v18 != 4);
    v48 = 0u;
    v49 = 0u;
    v51 = 0u;
    v52 = 0u;
    v47 = 1;
    v50 = 1;
    v22 = (char)v19;
    v53 = 0u;
    v54 = 0u;
    v23 = ~(uint64_t)(char)v19;
    v24 = v56;
    v25 = 1;
    v55 = 0;
    do
    {
      sub_23414D19C((uint64_t)&v47, (uint64_t)v24, (((v25++ ^ v22) - 1) & (unint64_t)v23) >> 63);
      v24 += 120;
    }
    while (v25 != 16);
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    sub_23414C928((uint64_t)&v37, a1);
    sub_23414CA60((uint64_t)&v27, a1, (unint64_t *)&v37);
    sub_23414C9F0(a1, (unint64_t *)&v27);
    sub_23414D22C((uint64_t)&v27, a1, &v47);
    sub_23414C9F0(a1, (unint64_t *)&v27);
    --v17;
  }
  while (v17 < 0x40);
}

unint64_t *sub_23414D0A8(unint64_t *result, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = (unint64_t)a2[7] << 20;
  v3 = *((unsigned __int8 *)a2 + 6);
  v4 = ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) & 0xFFF8FFFFFFFFFFFFLL | ((v3 & 7) << 48) | *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  v5 = *((unsigned __int8 *)a2 + 12);
  v6 = *((unsigned __int8 *)a2 + 27);
  v7 = *((unsigned __int8 *)a2 + 26);
  v8 = *(unsigned int *)((char *)a2 + 22);
  v9 = a2[4];
  v10 = ((v5 & 0x3F) << 45) | ((unint64_t)*((unsigned __int8 *)a2 + 11) << 37) | ((unint64_t)*((unsigned __int8 *)a2 + 10) << 29) | ((unint64_t)*((unsigned __int8 *)a2 + 9) << 21) | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 13) | (32 * *((unsigned __int8 *)a2 + 7)) | (v3 >> 3);
  v11 = ((v9 & 0x1FFFFFF) << 26) | ((unint64_t)*((unsigned __int8 *)a2 + 15) << 18) | ((unint64_t)*((unsigned __int8 *)a2 + 14) << 10) | (4 * *((unsigned __int8 *)a2 + 13)) | (v5 >> 6);
  v12 = ((v8 & 0xFFFFFFF) << 23) | ((unint64_t)*((unsigned __int8 *)a2 + 21) << 15) | ((unint64_t)*((unsigned __int8 *)a2 + 20) << 7) | (v9 >> 25);
  *result = v4;
  result[1] = v10;
  result[2] = v11;
  result[3] = v12;
  result[4] = v2 | (v6 << 12) | (16 * v7) | (v8 >> 28);
  return result;
}

double sub_23414D168(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  return result;
}

uint64_t sub_23414D19C(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;

  for (i = 0; i != 40; i += 8)
    *(_QWORD *)(result + i) = *(_QWORD *)(a2 + i) & -(uint64_t)a3 | *(_QWORD *)(result + i) & (a3 - 1);
  for (j = 0; j != 40; j += 8)
    *(_QWORD *)(result + 40 + j) = *(_QWORD *)(a2 + 40 + j) & -(uint64_t)a3 | *(_QWORD *)(result + 40 + j) & (a3 - 1);
  for (k = 0; k != 40; k += 8)
    *(_QWORD *)(result + 80 + k) = *(_QWORD *)(a2 + 80 + k) & -(uint64_t)a3 | *(_QWORD *)(result + 80 + k) & (a3 - 1);
  return result;
}

uint64_t sub_23414D22C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  int64x2_t v7;
  unint64_t *v8;
  uint64_t v9;
  int64x2_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v6 = *(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 72);
  v7 = vaddq_s64(*(int64x2_t *)(a2 + 16), *(int64x2_t *)(a2 + 56));
  *(int64x2_t *)a1 = vaddq_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 40));
  *(int64x2_t *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  v8 = (unint64_t *)(a1 + 40);
  sub_23414C804((int64x2_t *)(a1 + 40), (int64x2_t *)(a2 + 40), (int64x2_t *)a2);
  sub_2341503BC((uint64_t)&v34, (unint64_t *)a1, a3);
  sub_2341503BC((uint64_t)&v37, v8, a3 + 5);
  sub_2341503BC((uint64_t)&v31, a3 + 10, (unint64_t *)(a2 + 120));
  v9 = 2 * *(_QWORD *)(a2 + 112);
  v10 = vaddq_s64(*(int64x2_t *)(a2 + 96), *(int64x2_t *)(a2 + 96));
  *(int64x2_t *)(a1 + 120) = vaddq_s64(*(int64x2_t *)(a2 + 80), *(int64x2_t *)(a2 + 80));
  *(int64x2_t *)(a1 + 136) = v10;
  *(_QWORD *)(a1 + 152) = v9;
  v11 = v34;
  v12 = v37;
  v13 = *((_QWORD *)&v34 + 1) - *((_QWORD *)&v37 + 1) + 0xFFFFFFFFFFFFELL;
  v14 = v35;
  v15 = v38;
  v16 = v35 - v38 + 0xFFFFFFFFFFFFELL;
  v17 = *((_QWORD *)&v35 + 1) - *((_QWORD *)&v38 + 1) + 0xFFFFFFFFFFFFELL;
  v18 = v36;
  v19 = v39;
  v20 = v36 - v39 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)a1 = v34 + 0xFFFFFFFFFFFDALL - v37;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v12 + v11;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)&v12 + 1) + *((_QWORD *)&v11 + 1);
  *(_QWORD *)(a1 + 56) = v15 + v14;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)&v15 + 1) + *((_QWORD *)&v14 + 1);
  *(_QWORD *)(a1 + 72) = v19 + v18;
  sub_23414C848((unint64_t *)&v34, (_QWORD *)(a1 + 120));
  v21 = v34;
  v22 = v31;
  v23 = *((_QWORD *)&v31 + 1) + *((_QWORD *)&v34 + 1);
  v24 = v35;
  v25 = v32;
  result = v32 + v35;
  v27 = *((_QWORD *)&v32 + 1) + *((_QWORD *)&v35 + 1);
  v28 = v36;
  v29 = v33;
  v30 = v33 + v36;
  *(_QWORD *)(a1 + 80) = v31 + v34;
  *(_QWORD *)(a1 + 88) = v23;
  *(_QWORD *)(a1 + 96) = result;
  *(_QWORD *)(a1 + 104) = v27;
  *(_QWORD *)(a1 + 112) = v30;
  *(_QWORD *)(a1 + 120) = v21 + 0xFFFFFFFFFFFDALL - v22;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)&v21 + 1) - *((_QWORD *)&v22 + 1) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 136) = v24 - v25 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 144) = *((_QWORD *)&v24 + 1) - *((_QWORD *)&v25 + 1) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 152) = v28 - v29 + 0xFFFFFFFFFFFFELL;
  return result;
}

void sub_23414D3F4(__int128 *a1, int8x16_t *a2)
{
  uint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  _OWORD v15[7];
  uint64_t v16;
  _OWORD v17[7];
  uint64_t v18;
  _OWORD v19[10];
  _OWORD v20[7];
  uint64_t v21;
  _BYTE v22[63];
  char v23;
  uint64_t v24;
  int8x16x2_t v25;

  v3 = 0;
  v24 = *MEMORY[0x24BDAC8D0];
  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  do
  {
    v5 = *a2++;
    v25.val[0] = vandq_s8(v5, v4);
    v25.val[1] = (int8x16_t)vshrq_n_u8((uint8x16_t)v5, 4uLL);
    v6 = &v22[v3];
    vst2q_s8(v6, v25);
    v3 += 32;
  }
  while (v3 != 64);
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = v22[v7] + v8;
    v8 = (v9 + 8) << 24 >> 28;
    v22[v7++] = v9 - ((v9 + 8) & 0xF0);
  }
  while (v7 != 63);
  memset(v19, 0, sizeof(v19));
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v23 += v8;
  sub_23414D168((uint64_t)a1);
  v10 = 0;
  v11 = 1;
  do
  {
    sub_23414D624((uint64_t)v15, v10, (char)v22[v11]);
    sub_23414D22C((uint64_t)v19, (uint64_t)a1, (unint64_t *)v15);
    sub_23414C9F0((uint64_t)a1, (unint64_t *)v19);
    ++v10;
    v12 = v11 >= 0x3E;
    v11 += 2;
  }
  while (!v12);
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  sub_23414DDA4((uint64_t)v20, a1);
  sub_23414D804((uint64_t)v19, (uint64_t)v20);
  sub_23414C99C((uint64_t)v17, (unint64_t *)v19);
  sub_23414D804((uint64_t)v19, (uint64_t)v17);
  sub_23414C99C((uint64_t)v17, (unint64_t *)v19);
  sub_23414D804((uint64_t)v19, (uint64_t)v17);
  sub_23414C99C((uint64_t)v17, (unint64_t *)v19);
  sub_23414D804((uint64_t)v19, (uint64_t)v17);
  sub_23414C9F0((uint64_t)a1, (unint64_t *)v19);
  v13 = 0;
  v14 = 0;
  do
  {
    sub_23414D624((uint64_t)v15, v13, (char)v22[v14]);
    sub_23414D22C((uint64_t)v19, (uint64_t)a1, (unint64_t *)v15);
    sub_23414C9F0((uint64_t)a1, (unint64_t *)v19);
    ++v13;
    v12 = v14 >= 0x3E;
    v14 += 2;
  }
  while (!v12);
}

uint64_t sub_23414D624(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;
  int8x16_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[2];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int64x2_t v26;
  int64x2_t v27;
  uint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  _BYTE v40[79];
  uint64_t v41;

  v4 = 0;
  v41 = *MEMORY[0x24BDAC8D0];
  memset(v40, 0, sizeof(v40));
  v39 = 0u;
  v6 = (char *)&unk_2342DA850 + 768 * a2;
  v38 = ((a3 - 1) & ~(uint64_t)a3) < 0;
  v40[15] = v38;
  do
  {
    v7 = 0;
    v8 = vdupq_n_s8((uint64_t)((++v4 ^ (unint64_t)(a3 - 2 * ((a3 >> 31) & a3))) - 1) >> 63);
    do
    {
      *(int8x16_t *)(&v38 + v7) = veorq_s8(vandq_s8(*(int8x16_t *)&v6[v7], v8), *(int8x16_t *)(&v38 + v7));
      v7 += 16;
    }
    while (v7 != 96);
    v6 += 96;
  }
  while (v4 != 8);
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  sub_23414D0A8((unint64_t *)&v35, (unsigned int *)&v38);
  sub_23414D0A8((unint64_t *)&v32, (unsigned int *)&v40[15]);
  sub_23414D0A8((unint64_t *)&v29, (unsigned int *)&v40[47]);
  v9 = v36;
  v10 = v35;
  v11 = v36;
  *(_OWORD *)a1 = v35;
  *(_OWORD *)(a1 + 16) = v9;
  v12 = v33;
  *(_OWORD *)(a1 + 40) = v32;
  v13 = v32;
  *(_OWORD *)(a1 + 56) = v33;
  v14 = v30;
  v15 = v29;
  v16 = v30;
  *(int64x2_t *)(a1 + 80) = v29;
  *(int64x2_t *)(a1 + 96) = v14;
  v21[0] = v13;
  v21[1] = v12;
  v23 = v10;
  v24 = v11;
  v17 = v37;
  *(_QWORD *)(a1 + 32) = v37;
  v18 = v34;
  *(_QWORD *)(a1 + 72) = v34;
  v19 = v31;
  *(_QWORD *)(a1 + 112) = v31;
  v22 = v18;
  v25 = v17;
  v26 = vsubq_s64((int64x2_t)xmmword_2342DA840, v15);
  v27 = vsubq_s64(vdupq_n_s64(0xFFFFFFFFFFFFEuLL), v16);
  v28 = 0xFFFFFFFFFFFFELL - v19;
  return sub_23414D19C(a1, (uint64_t)v21, (a3 >> 7) & 1);
}

unint64_t *sub_23414D804(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  __int128 v19;
  uint64_t v20;
  int64x2_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  unint64_t *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  int64x2_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int64x2_t v41;
  int64x2_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  sub_23414C680((uint64_t)&v44, (unint64_t *)a2);
  sub_23414C680((uint64_t)&v41, (unint64_t *)(a2 + 40));
  sub_23414C680((uint64_t)&v38, (unint64_t *)(a2 + 80));
  v4 = (((unint64_t)v38 >> 50) & 0x1FFF) + 2 * *((_QWORD *)&v38 + 1);
  v5 = (v4 >> 51) + 2 * v39;
  v6 = (v5 >> 51) + 2 * *((_QWORD *)&v39 + 1);
  v7 = (v6 >> 51) + 2 * v40;
  v8 = 2 * (v38 & 0x3FFFFFFFFFFFFLL) + 19 * (v7 >> 51);
  v9 = (v4 & 0x7FFFFFFFFFFFFLL) + (v8 >> 51);
  v10 = v8 & 0x7FFFFFFFFFFFFLL;
  v11 = v9 & 0x7FFFFFFFFFFFFLL;
  v12 = (v5 & 0x7FFFFFFFFFFFFLL) + (v9 >> 51);
  v13 = v6 & 0x7FFFFFFFFFFFFLL;
  v14 = v7 & 0x7FFFFFFFFFFFFLL;
  v15 = *(_QWORD *)(a2 + 72) + *(_QWORD *)(a2 + 32);
  v16 = *(int64x2_t *)(a2 + 16);
  v17 = *(int64x2_t *)(a2 + 56);
  *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a2 + 40), *(int64x2_t *)a2);
  *(int64x2_t *)(a1 + 56) = vaddq_s64(v17, v16);
  *(_QWORD *)(a1 + 72) = v15;
  sub_23414C680((uint64_t)&v35, (unint64_t *)(a1 + 40));
  v18 = v41;
  v19 = v44;
  v20 = *((_QWORD *)&v44 + 1) + v41.i64[1];
  v21 = v42;
  v22 = v45;
  v23 = v45 + v42.i64[0];
  v24 = *((_QWORD *)&v45 + 1) + v42.i64[1];
  v25 = v43;
  v26 = v46;
  v27 = v46 + v43;
  *(_QWORD *)(a1 + 40) = v44 + v41.i64[0];
  *(_QWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 56) = v23;
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v18.i64[0] + 0xFFFFFFFFFFFDALL - v19;
  *(_QWORD *)(a1 + 88) = v18.i64[1] - *((_QWORD *)&v19 + 1) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 96) = v21.i64[0] - v22 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 104) = v21.i64[1] - *((_QWORD *)&v22 + 1) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 112) = v25 - v26 + 0xFFFFFFFFFFFFELL;
  sub_23414C848((unint64_t *)&v41, (_QWORD *)(a1 + 40));
  v28 = v37 - v43 + 0xFFFFFFFFFFFFELL;
  v29 = vaddq_s64(vsubq_s64(v36, v42), vdupq_n_s64(0xFFFFFFFFFFFFEuLL));
  *(int64x2_t *)a1 = vaddq_s64(vsubq_s64(v35, v41), (int64x2_t)xmmword_2342DA840);
  *(int64x2_t *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 32) = v28;
  result = sub_23414C848((unint64_t *)&v41, (_QWORD *)(a1 + 80));
  v31 = v11 - v41.i64[1] + 0xFFFFFFFFFFFFELL;
  v32 = v12 - v42.i64[0] + 0xFFFFFFFFFFFFELL;
  v33 = v13 - v42.i64[1] + 0xFFFFFFFFFFFFELL;
  v34 = v14 - v43 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 120) = v10 + 0xFFFFFFFFFFFDALL - v41.i64[0];
  *(_QWORD *)(a1 + 128) = v31;
  *(_QWORD *)(a1 + 136) = v32;
  *(_QWORD *)(a1 + 144) = v33;
  *(_QWORD *)(a1 + 152) = v34;
  return result;
}

void sub_23414DA38(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _OWORD v17[10];
  _OWORD v18[10];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[160];
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[120];
  _QWORD v33[91];

  v33[90] = *MEMORY[0x24BDAC8D0];
  memset(v18, 0, sizeof(v18));
  sub_23414DD6C((uint64_t)v29);
  sub_23414C928((uint64_t)&v30, (uint64_t)a3);
  v6 = v32;
  sub_23414DDA4((uint64_t)v32, a3);
  v7 = 0;
  v8 = (unint64_t *)&v31;
  v9 = v33;
  do
  {
    sub_23414D804((uint64_t)v18, (uint64_t)v6);
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    sub_23414C9F0((uint64_t)&v19, (unint64_t *)v18);
    sub_23414C928((uint64_t)v8, (uint64_t)&v19);
    if (v7 + 2 <= 7)
      sub_23414C99C((uint64_t)v9, (unint64_t *)v18);
    sub_23414CA60((uint64_t)v18, (uint64_t)a3, v8);
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    sub_23414C9F0((uint64_t)&v19, (unint64_t *)v18);
    sub_23414C928((uint64_t)(v8 + 20), (uint64_t)&v19);
    if (v7 + 2 <= 6)
      sub_23414C99C((uint64_t)(v9 + 15), (unint64_t *)v18);
    v7 += 2;
    v8 += 40;
    v9 += 30;
    v6 += 120;
  }
  while (v7 < 0xE);
  sub_23414DDE0(a1);
  v10 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  do
  {
    sub_23414D804((uint64_t)v18, a1);
    sub_23414C99C(a1, (unint64_t *)v18);
    sub_23414D804((uint64_t)v18, a1);
    sub_23414C99C(a1, (unint64_t *)v18);
    sub_23414D804((uint64_t)v18, a1);
    sub_23414C99C(a1, (unint64_t *)v18);
    sub_23414D804((uint64_t)v18, a1);
    sub_23414C9F0((uint64_t)&v19, (unint64_t *)v18);
    v11 = (*(unsigned __int8 *)(a2 - (v10 >> 3) + 31) >> (~(_BYTE)v10 & 4)) & 0xF;
    memset(v17, 0, sizeof(v17));
    sub_23414DD6C((uint64_t)v17);
    v12 = 0;
    v13 = v29;
    do
    {
      v14 = 0;
      v15 = ((v11 ^ v12) - 1) >> 63;
      do
      {
        *(_QWORD *)((char *)v17 + v14) = *(_QWORD *)&v13[v14] & v15 | *(_QWORD *)((_BYTE *)v17 + v14) & ~v15;
        v14 += 8;
      }
      while (v14 != 40);
      do
      {
        *(_QWORD *)((char *)v17 + v14) = *(_QWORD *)&v13[v14] & v15 | *(_QWORD *)((_BYTE *)v17 + v14) & ~v15;
        v14 += 8;
      }
      while (v14 != 80);
      do
      {
        *(_QWORD *)((char *)v17 + v14) = *(_QWORD *)&v13[v14] & v15 | *(_QWORD *)((_BYTE *)v17 + v14) & ~v15;
        v14 += 8;
      }
      while (v14 != 120);
      do
      {
        *(_QWORD *)((char *)v17 + v14) = *(_QWORD *)&v13[v14] & v15 | *(_QWORD *)((_BYTE *)v17 + v14) & ~v15;
        v14 += 8;
      }
      while (v14 != 160);
      ++v12;
      v13 += 160;
    }
    while (v12 != 16);
    sub_23414CA60((uint64_t)v18, (uint64_t)&v19, (unint64_t *)v17);
    sub_23414C99C(a1, (unint64_t *)v18);
    v16 = v10 >= 0xFC;
    v10 += 4;
  }
  while (!v16);
}

double sub_23414DD6C(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  return result;
}

__n128 sub_23414DDA4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(__int128 *)((char *)a2 + 40);
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  result = (__n128)a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v7;
  return result;
}

double sub_23414DDE0(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  return result;
}

unsigned __int16 *sub_23414DE08(unsigned __int16 *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;

  v1 = *(unsigned int *)((char *)result + 15);
  v2 = *((unsigned int *)result + 9);
  v3 = (v2 >> 24) | ((unint64_t)*((unsigned __int8 *)result + 40) << 8) | ((unint64_t)*((unsigned __int8 *)result + 41) << 16);
  v4 = ((unint64_t)(HIBYTE(*((_DWORD *)result + 11)) | (*((unsigned __int8 *)result + 48) << 8) | (*((unsigned __int8 *)result + 49) << 16)) >> 2) & 0x1FFFFF;
  v5 = ((unint64_t)*(unsigned int *)((char *)result + 49) >> 7) & 0x1FFFFF;
  v6 = ((unint64_t)*((unsigned int *)result + 13) >> 4) & 0x1FFFFF;
  v7 = ((unint64_t)(HIBYTE(*((_DWORD *)result + 13)) | (*((unsigned __int8 *)result + 56) << 8) | (*((unsigned __int8 *)result + 57) << 16)) >> 1) & 0x1FFFFF;
  v8 = ((v1 >> 6) & 0x1FFFFF) + 666643 * v4;
  v9 = (*(unsigned __int16 *)((char *)result + 21) | ((unint64_t)(*((_BYTE *)result + 23) & 0x1F) << 16))
     + 470296 * v5
     + 666643 * v6
     + 654183 * v4;
  v10 = (((v1 >> 24) | ((unint64_t)*((unsigned __int8 *)result + 19) << 8) | ((unint64_t)*((unsigned __int8 *)result + 20) << 16)) >> 3)
      + 666643 * v5
      + 470296 * v4
      + ((unint64_t)(v8 + 0x100000) >> 21);
  v11 = (((unint64_t)*(unsigned int *)((char *)result + 23) >> 5) & 0x1FFFFF)
      + 654183 * v5
      + 470296 * v6
      - 997805 * (int)v4
      + 666643 * v7
      + ((v9 + 0x100000) >> 21);
  v12 = (((unint64_t)(HIBYTE(*(_DWORD *)((char *)result + 23)) | (*((unsigned __int8 *)result + 27) << 8) | (*((unsigned __int8 *)result + 28) << 16)) >> 2) & 0x1FFFFF)
      - 997805 * (int)v5
      + 654183 * v6
      + 136657 * v4;
  v13 = (((unint64_t)*((unsigned int *)result + 7) >> 7) & 0x1FFFFF)
      + 136657 * v5
      - 997805 * (int)v6
      - 683901 * (int)v4;
  v14 = (((unint64_t)*(unsigned int *)((char *)result + 31) >> 4) & 0x1FFFFF)
      - 683901 * (int)v5
      + 136657 * v6;
  v15 = (((unint64_t)(HIBYTE(*(_DWORD *)((char *)result + 31)) | (*((unsigned __int8 *)result + 35) << 8) | (*((unsigned __int8 *)result + 36) << 16)) >> 1) & 0x1FFFFF)
      - 683901 * (int)v6;
  v16 = (unint64_t)*((unsigned int *)result + 15) >> 3;
  v17 = ((v2 >> 6) & 0x1FFFFF) - 997805 * (int)v16;
  v18 = (v3 >> 3) + 136657 * v16;
  v19 = (result[21] | ((unint64_t)(result[22] & 0x1F) << 16)) - 683901 * (int)v16;
  v20 = v14 + 470296 * v16;
  v21 = v13 + 666643 * v16;
  v22 = v15 + 654183 * v16;
  v23 = ((unint64_t)*(unsigned int *)((char *)result + 57) >> 6) & 0x1FFFFF;
  v24 = v18 - 683901 * (int)v23;
  v25 = v17 + 136657 * v23 - 683901 * (int)v7;
  v26 = v20 + 654183 * v23 - 997805 * (int)v7;
  v27 = v12 + 666643 * v23 + 470296 * v7;
  v28 = v21 + 470296 * v23;
  v29 = v22 - 997805 * (int)v23;
  v30 = v28 + 654183 * v7 + ((v27 + 0x100000) >> 21);
  v31 = v29 + 136657 * v7 + ((v26 + 0x100000) >> 21);
  v32 = v26 - ((v26 + 0x100000) & 0xFFFFFFFFFFE00000);
  v33 = v24 + ((v25 + 0x100000) >> 21);
  v34 = (((unint64_t)*((unsigned int *)result + 11) >> 5) & 0x1FFFFF) + ((uint64_t)(v19 + 0x100000) >> 21);
  v35 = v9 - ((v9 + 0x100000) & 0xFFFFFE00000) + ((v10 + 0x100000) >> 21);
  v36 = v10 - ((v10 + 0x100000) & 0x7FFFFFFFFFE00000);
  v37 = v32 + ((v30 + 0x100000) >> 21);
  v38 = v30 - ((v30 + 0x100000) & 0xFFFFFFFFFFE00000);
  v39 = v25 - ((v25 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v31 + 0x100000) >> 21);
  v40 = v31 - ((v31 + 0x100000) & 0xFFFFFFFFFFE00000);
  v41 = v19 - ((v19 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v33 + 0x100000) >> 21);
  v42 = v33 - ((v33 + 0x100000) & 0xFFFFFFFFFFE00000);
  v43 = (((unint64_t)*(unsigned int *)((char *)result + 7) >> 7) & 0x1FFFFF) + 666643 * v42;
  v44 = (((unint64_t)*(unsigned int *)(result + 5) >> 4) & 0x1FFFFF) + 666643 * v41 + 470296 * v42;
  v45 = (((unint64_t)(HIBYTE(*(_DWORD *)(result + 5)) | (*((unsigned __int8 *)result + 14) << 8) | (*((unsigned __int8 *)result + 15) << 16)) >> 1) & 0x1FFFFF)
      + 666643 * v34
      + 470296 * v41
      + 654183 * v42;
  v46 = v8 - ((v8 + 0x100000) & 0x7FFFFE00000) + 470296 * v34 + 654183 * v41 - 997805 * v42;
  v47 = v36 + 654183 * v34 - 997805 * v41 + 136657 * v42;
  v48 = v35 - 997805 * v34 + 136657 * v41 - 683901 * v42;
  v49 = (((unint64_t)(HIBYTE(*(_DWORD *)(result + 1)) | (*((unsigned __int8 *)result + 6) << 8) | (*((unsigned __int8 *)result + 7) << 16)) >> 2) & 0x1FFFFF)
      + 666643 * v39;
  v50 = v43 + 470296 * v39;
  v51 = v44 + 654183 * v39;
  v52 = v45 - 997805 * v39;
  v53 = v46 + 136657 * v39;
  v54 = v47 - 683901 * v39;
  v55 = (((unint64_t)*(unsigned int *)(result + 1) >> 5) & 0x1FFFFF) + 666643 * v40;
  v56 = v49 + 470296 * v40;
  v57 = v50 + 654183 * v40;
  v58 = v51 - 997805 * v40;
  v59 = v52 + 136657 * v40;
  v60 = v53 - 683901 * v40;
  v61 = v27 - 683901 * v34 - ((v27 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v11 + 0x100000) >> 21);
  v62 = (*result | ((unint64_t)(result[1] & 0x1F) << 16)) + 666643 * v37;
  v63 = v56 + 654183 * v37;
  v64 = v58 + 136657 * v37;
  v65 = v55 + 470296 * v37 + ((uint64_t)(v62 + 0x100000) >> 21);
  v66 = v54 + ((uint64_t)(v60 + 0x100000) >> 21);
  v67 = v11 + 136657 * v34 - ((v11 + 0x100000) & 0xFFFFFFFFFFE00000) - 683901 * v41 + ((v48 + 0x100000) >> 21);
  v68 = v48 - ((v48 + 0x100000) & 0xFFFFFFFFFFE00000);
  v69 = v38 + ((uint64_t)(v61 + 0x100000) >> 21);
  v70 = v61 - ((v61 + 0x100000) & 0xFFFFFFFFFFE00000);
  v71 = v65 + 0x100000;
  v72 = v70 + ((uint64_t)(v67 + 0x100000) >> 21);
  v73 = v67 - ((v67 + 0x100000) & 0xFFFFFFFFFFE00000);
  v74 = (uint64_t)(v69 + 0x100000) >> 21;
  v75 = v65 + 470296 * v74 - ((v65 + 0x100000) & 0xFFFFFFFFFFE00000);
  v76 = v57 - 997805 * v37 + ((uint64_t)(v63 + 0x100000) >> 21);
  v77 = v63 + 654183 * v74 - ((v63 + 0x100000) & 0xFFFFFFFFFFE00000) + (v71 >> 21);
  v78 = v76 - 997805 * v74 - ((v76 + 0x100000) & 0xFFFFFFFFFFE00000);
  v79 = v59 - 683901 * v37 + ((uint64_t)(v64 + 0x100000) >> 21);
  v80 = v64 + 136657 * v74 - ((v64 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v76 + 0x100000) >> 21);
  v81 = v62 - ((v62 + 0x100000) & 0xFFFFFFFFFFE00000) + 666643 * v74;
  v82 = v79 - 683901 * v74;
  v79 += 0x100000;
  v83 = v60 - ((v60 + 0x100000) & 0xFFFFFFFFFFE00000) + (v79 >> 21);
  v84 = v75 + (v81 >> 21);
  v85 = v77 + (v84 >> 21);
  v86 = v78 + (v85 >> 21);
  v87 = v80 + (v86 >> 21);
  v88 = v82 - (v79 & 0xFFFFFFFFFFE00000) + (v87 >> 21);
  v89 = v83 + (v88 >> 21);
  v90 = v66 - ((v66 + 0x100000) & 0xFFFFFFFFFFE00000) + (v89 >> 21);
  v91 = v68 + ((uint64_t)(v66 + 0x100000) >> 21) + (v90 >> 21);
  v92 = v73 + (v91 >> 21);
  v93 = v72 + (v92 >> 21);
  v94 = v69 - ((v69 + 0x100000) & 0xFFFFFFFFFFE00000) + (v93 >> 21);
  v95 = (v81 & 0x1FFFFF) + 666643 * (v94 >> 21);
  *((_BYTE *)result + 1) = (unsigned __int16)(v81 + 11283 * (v94 >> 21)) >> 8;
  v96 = (v84 & 0x1FFFFF) + 470296 * (v94 >> 21) + (v95 >> 21);
  *(_BYTE *)result = v81 + 19 * (v94 >> 21);
  *((_BYTE *)result + 2) = ((unint64_t)((v81 & 0x1FFFFF) + 666643 * (v94 >> 21)) >> 16) & 0x1F | (32 * (v84 + 24 * (v94 >> 21) + (v95 >> 21)));
  *((_BYTE *)result + 3) = (unint64_t)v96 >> 3;
  *((_BYTE *)result + 4) = (unint64_t)v96 >> 11;
  v97 = (v85 & 0x1FFFFF) + 654183 * (v94 >> 21) + (v96 >> 21);
  *((_BYTE *)result + 5) = (v96 >> 19) & 3 | (4 * (v85 + 103 * (v94 >> 21) + (v96 >> 21)));
  *((_BYTE *)result + 6) = (unint64_t)v97 >> 6;
  v98 = (v86 & 0x1FFFFF) - 997805 * (v94 >> 21) + (v97 >> 21);
  *((_BYTE *)result + 7) = (v97 >> 14) & 0x7F | (((_BYTE)v86
                                                              - -83 * (v94 >> 21)
                                                              + (v97 >> 21)) << 7);
  *((_BYTE *)result + 8) = (unint64_t)v98 >> 1;
  *((_BYTE *)result + 9) = (unint64_t)v98 >> 9;
  v99 = (v87 & 0x1FFFFF) + 136657 * (v94 >> 21) + (v98 >> 21);
  *((_BYTE *)result + 10) = (v98 >> 17) & 0xF | (16 * (v87 - 47 * (v94 >> 21) + (v98 >> 21)));
  *((_BYTE *)result + 11) = (unint64_t)v99 >> 4;
  *((_BYTE *)result + 12) = (unint64_t)v99 >> 12;
  v100 = (v88 & 0x1FFFFF) - 683901 * (v94 >> 21) + (v99 >> 21);
  *((_BYTE *)result + 13) = ((v99 & 0x100000) != 0) | (2 * (v88 - 125 * (v94 >> 21) + (v99 >> 21)));
  *((_BYTE *)result + 14) = (unint64_t)v100 >> 7;
  v101 = (v89 & 0x1FFFFF) + (v100 >> 21);
  *((_BYTE *)result + 15) = (v100 >> 15) & 0x3F | (((_BYTE)v89 + (v100 >> 21)) << 6);
  *((_BYTE *)result + 16) = (unint64_t)v101 >> 2;
  *((_BYTE *)result + 17) = (unint64_t)v101 >> 10;
  v102 = (v90 & 0x1FFFFF) + (v101 >> 21);
  *((_BYTE *)result + 18) = (v101 >> 18) & 7 | (8 * (v66 + (v89 >> 21) + (v101 >> 21)));
  *((_BYTE *)result + 19) = (unint64_t)v102 >> 5;
  *((_BYTE *)result + 20) = (unint64_t)v102 >> 13;
  *((_BYTE *)result + 22) = (unsigned __int16)(v91 + (v102 >> 21)) >> 8;
  v103 = (v92 & 0x1FFFFF) + (((v91 & 0x1FFFFF) + (v102 >> 21)) >> 21);
  *((_BYTE *)result + 21) = v91 + (v102 >> 21);
  *((_BYTE *)result + 23) = ((unint64_t)((v91 & 0x1FFFFF) + (v102 >> 21)) >> 16) & 0x1F | (32 * v103);
  *((_BYTE *)result + 24) = (unint64_t)v103 >> 3;
  *((_BYTE *)result + 25) = (unint64_t)v103 >> 11;
  v104 = (v93 & 0x1FFFFF) + (v103 >> 21);
  *((_BYTE *)result + 26) = (v103 >> 19) & 3 | (4 * v104);
  *((_BYTE *)result + 27) = (unint64_t)v104 >> 6;
  v105 = (v94 & 0x1FFFFF) + (v104 >> 21);
  *((_BYTE *)result + 28) = (v104 >> 14) & 0x7F | ((_BYTE)v105 << 7);
  *((_BYTE *)result + 29) = v105 >> 1;
  *((_BYTE *)result + 30) = v105 >> 9;
  *((_BYTE *)result + 31) = v105 >> 17;
  return result;
}

double sub_23414E41C(uint64_t a1, _OWORD *a2)
{
  double result;
  unint64_t __src[5];

  __src[4] = *MEMORY[0x24BDAC8D0];
  sub_23416BE78((char *)__src, 0x20uLL);
  *(_QWORD *)&result = sub_23414E48C(a1, a2, __src).n128_u64[0];
  return result;
}

__n128 sub_23414E48C(uint64_t a1, _OWORD *a2, unint64_t *__src)
{
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9[10];
  int8x16_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_2341719DC(__src, 0x20uLL, &v10);
  v10.i8[0] &= 0xF8u;
  v11 = v11 & 0x3F | 0x40;
  memset(v9, 0, sizeof(v9));
  sub_23414D3F4(v9, &v10);
  sub_23414BED4((_BYTE *)a1, (uint64_t)v9);
  v6 = *((_OWORD *)__src + 1);
  *a2 = *(_OWORD *)__src;
  a2[1] = v6;
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  a2[2] = *(_OWORD *)a1;
  a2[3] = v8;
  return result;
}

uint64_t sub_23414E558(unint64_t *a1, unint64_t *a2, size_t a3, unint64_t *__src)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  int64_t v120;
  int64_t v121;
  int64_t v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  __int128 v148[10];
  unsigned __int16 v149;
  unsigned int v150;
  unsigned __int8 v151;
  _BYTE v152[7];
  unsigned __int8 v153;
  unsigned int v154;
  unsigned __int8 v155;
  unsigned __int8 v156;
  unsigned __int16 v157;
  unsigned int v158;
  unsigned __int8 v159;
  unsigned int v160;
  unsigned __int16 v161;
  unsigned int v162;
  unsigned __int8 v163;
  _BYTE v164[7];
  unsigned __int8 v165;
  unsigned int v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  unsigned __int16 v169;
  unsigned int v170;
  unsigned __int8 v171;
  unsigned int v172;
  int8x16_t v173[13];
  uint64_t v174;
  unsigned __int16 v175;
  unsigned int v176;
  unsigned __int8 v177;
  _BYTE v178[7];
  unsigned __int8 v179;
  unsigned int v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unsigned __int16 v183;
  unsigned int v184;
  unsigned __int8 v185;
  unsigned int v186;
  unint64_t v187[7];

  v187[4] = *MEMORY[0x24BDAC8D0];
  sub_2341719DC(__src, 0x20uLL, &v175);
  LOBYTE(v175) = v175 & 0xF8;
  HIBYTE(v186) = HIBYTE(v186) & 0x3F | 0x40;
  v174 = 0;
  memset(v173, 0, sizeof(v173));
  sub_234172574((uint64_t)v173);
  sub_2341725B4((unint64_t)v173, v187, 0x20uLL);
  sub_2341725B4((unint64_t)v173, a2, a3);
  sub_2341726AC(&v161, v173);
  sub_23414DE08(&v161);
  memset(v148, 0, sizeof(v148));
  sub_23414D3F4(v148, (int8x16_t *)&v161);
  sub_23414BED4(a1, (uint64_t)v148);
  sub_234172574((uint64_t)v173);
  sub_2341725B4((unint64_t)v173, a1, 0x20uLL);
  sub_2341725B4((unint64_t)v173, __src + 4, 0x20uLL);
  sub_2341725B4((unint64_t)v173, a2, a3);
  sub_2341726AC(&v149, v173);
  sub_23414DE08(&v149);
  v8 = v149 | ((v150 & 0x1F) << 16);
  v9 = v157 | ((v158 & 0x1F) << 16);
  v10 = v175 | ((v176 & 0x1F) << 16);
  v11 = v183 | ((v184 & 0x1F) << 16);
  v12 = ((unint64_t)v150 >> 5) & 0x1FFFFF;
  v13 = ((unint64_t)(HIBYTE(v150) | (v151 << 8) | (v152[0] << 16)) >> 2) & 0x1FFFFF;
  v14 = ((unint64_t)v176 >> 5) & 0x1FFFFF;
  v15 = ((unint64_t)(HIBYTE(v176) | (v177 << 8) | (v178[0] << 16)) >> 2) & 0x1FFFFF;
  v147 = v14 * v12
       + v10 * (unint64_t)v13
       + v15 * v8
       + (((unint64_t)(HIBYTE(v162) | (v163 << 8) | (v164[0] << 16)) >> 2) & 0x1FFFFF);
  v16 = ((unint64_t)*(unsigned int *)v152 >> 7) & 0x1FFFFF;
  v17 = ((unint64_t)*(unsigned int *)&v152[3] >> 4) & 0x1FFFFF;
  v18 = ((unint64_t)*(unsigned int *)v178 >> 7) & 0x1FFFFF;
  v19 = ((unint64_t)*(unsigned int *)&v178[3] >> 4) & 0x1FFFFF;
  v20 = v14 * (unint64_t)v16
      + v10 * v17
      + v18 * (unint64_t)v12
      + v8 * (unint64_t)v19
      + v15 * (unint64_t)v13
      + (((unint64_t)*(unsigned int *)&v164[3] >> 4) & 0x1FFFFF);
  v21 = ((unint64_t)(v152[6] | (v153 << 8) | (v154 << 16)) >> 1) & 0x1FFFFF;
  v22 = ((unint64_t)v154 >> 6) & 0x1FFFFF;
  v23 = ((unint64_t)v180 >> 6) & 0x1FFFFF;
  v24 = ((unint64_t)(v178[6] | (v179 << 8) | (v180 << 16)) >> 1) & 0x1FFFFF;
  v145 = v21 * (unint64_t)v14
       + v10 * (unint64_t)v22
       + v18 * (unint64_t)v16
       + v13 * (unint64_t)v19
       + v15 * (unint64_t)v17
       + v8 * (unint64_t)v23
       + v24 * (unint64_t)v12
       + (((unint64_t)v166 >> 6) & 0x1FFFFF);
  v25 = (((unint64_t)v154 >> 24) | ((unint64_t)v155 << 8) | ((unint64_t)v156 << 16)) >> 3;
  v26 = (((unint64_t)v180 >> 24) | ((unint64_t)v181 << 8) | ((unint64_t)v182 << 16)) >> 3;
  v144 = v25 * (unint64_t)v14
       + v10 * (unint64_t)v9
       + v21 * (unint64_t)v18
       + v19 * (unint64_t)v17
       + v15 * (unint64_t)v22
       + v13 * (unint64_t)v23
       + v24 * (unint64_t)v16
       + v26 * (unint64_t)v12
       + v11 * (unint64_t)v8
       + v169
       + ((unint64_t)(v170 & 0x1F) << 16);
  v27 = ((unint64_t)v158 >> 5) & 0x1FFFFF;
  v28 = ((unint64_t)(HIBYTE(v158) | (v159 << 8) | (v160 << 16)) >> 2) & 0x1FFFFF;
  v29 = ((unint64_t)v184 >> 5) & 0x1FFFFF;
  v30 = ((unint64_t)(HIBYTE(v184) | (v185 << 8) | (v186 << 16)) >> 2) & 0x1FFFFF;
  v143 = v14 * v27
       + v10 * v28
       + v25 * (unint64_t)v18
       + v19 * (unint64_t)v22
       + v15 * (unint64_t)v9
       + v23 * (unint64_t)v17
       + v24 * (unint64_t)v21
       + v26 * (unint64_t)v16
       + v29 * v12
       + v11 * (unint64_t)v13
       + v30 * v8
       + (((unint64_t)(HIBYTE(v170) | (v171 << 8) | (v172 << 16)) >> 2) & 0x1FFFFF);
  v31 = (v161 | ((unint64_t)(v162 & 0x1F) << 16)) + v10 * (unint64_t)v8;
  v32 = v8 * (unint64_t)v14
      + v10 * (unint64_t)v12
      + (((unint64_t)v162 >> 5) & 0x1FFFFF)
      + ((v31 + 0x100000) >> 21);
  v146 = v31 - ((v31 + 0x100000) & 0xFFFFFE00000);
  v33 = v13 * (unint64_t)v14
      + v10 * (unint64_t)v16
      + v8 * (unint64_t)v18
      + v15 * (unint64_t)v12
      + (((unint64_t)*(unsigned int *)v164 >> 7) & 0x1FFFFF);
  v141 = v14 * (unint64_t)v17
       + v10 * (unint64_t)v21
       + v13 * (unint64_t)v18
       + v19 * (unint64_t)v12
       + v15 * (unint64_t)v16
       + v24 * (unint64_t)v8
       + ((v20 + 0x100000) >> 21)
       + (((unint64_t)(v164[6] | (v165 << 8) | (v166 << 16)) >> 1) & 0x1FFFFF);
  v34 = v20 - ((v20 + 0x100000) & 0xFFFFFFFFFFE00000);
  v139 = v14 * (unint64_t)v22
       + v10 * (unint64_t)v25
       + v18 * (unint64_t)v17
       + v19 * (unint64_t)v16
       + v15 * (unint64_t)v21
       + v23 * (unint64_t)v12
       + v24 * (unint64_t)v13
       + v26 * (unint64_t)v8
       + ((((unint64_t)v166 >> 24) | ((unint64_t)v167 << 8) | ((unint64_t)v168 << 16)) >> 3);
  v138 = v9 * (unint64_t)v14
       + v10 * (unint64_t)v27
       + v18 * (unint64_t)v22
       + v21 * (unint64_t)v19
       + v15 * (unint64_t)v25
       + v23 * (unint64_t)v16
       + v24 * (unint64_t)v17
       + v26 * (unint64_t)v13
       + v8 * (unint64_t)v29
       + v11 * (unint64_t)v12
       + (((unint64_t)v170 >> 5) & 0x1FFFFF);
  v35 = (unint64_t)v160 >> 7;
  v36 = v28 * (unint64_t)v14 + v10 * (unint64_t)v35;
  v37 = (unint64_t)v186 >> 7;
  v38 = v36
      + v9 * (unint64_t)v18
      + v25 * (unint64_t)v19
      + v15 * (unint64_t)v27
      + v21 * (unint64_t)v23
      + v24 * (unint64_t)v22
      + v26 * (unint64_t)v17
      + v13 * (unint64_t)v29
      + v11 * (unint64_t)v16
      + v8 * (unint64_t)v37;
  v39 = v14 * (unint64_t)v35
      + v18 * (unint64_t)v27
      + v9 * (unint64_t)v19
      + v15 * (unint64_t)v28
      + v23 * (unint64_t)v22
      + v24 * (unint64_t)v25
      + v26 * (unint64_t)v21
      + v29 * (unint64_t)v16
      + v11 * (unint64_t)v17
      + v37 * (unint64_t)v12;
  v40 = v38 + v30 * (unint64_t)v12 + ((unint64_t)v172 >> 7);
  v41 = v39 + v30 * (unint64_t)v13;
  v42 = v18 * (unint64_t)v35
      + v28 * (unint64_t)v19
      + v9 * (unint64_t)v23
      + v24 * (unint64_t)v27
      + v26 * (unint64_t)v25
      + v21 * (unint64_t)v29
      + v11 * (unint64_t)v22
      + v37 * (unint64_t)v16;
  v43 = v28 * (unint64_t)v18
      + v19 * (unint64_t)v27
      + v15 * (unint64_t)v35
      + v25 * (unint64_t)v23
      + v24 * (unint64_t)v9
      + v26 * (unint64_t)v22
      + v29 * (unint64_t)v17
      + v11 * (unint64_t)v21
      + v13 * (unint64_t)v37
      + v30 * (unint64_t)v16;
  v44 = v26 * (unint64_t)v35
      + v29 * (unint64_t)v27
      + v11 * (unint64_t)v28
      + v25 * (unint64_t)v37
      + v30 * (unint64_t)v9;
  v45 = v28 * (unint64_t)v29
      + v11 * (unint64_t)v35
      + v9 * (unint64_t)v37
      + v30 * (unint64_t)v27
      + ((v44 + 0x100000) >> 21);
  v46 = v42 + v30 * (unint64_t)v17;
  v47 = v19 * (unint64_t)v35
      + v23 * (unint64_t)v27
      + v24 * (unint64_t)v28
      + v26 * (unint64_t)v9
      + v29 * (unint64_t)v22
      + v11 * (unint64_t)v25
      + v37 * (unint64_t)v17;
  v48 = v28 * (unint64_t)v23
      + v24 * (unint64_t)v35
      + v26 * (unint64_t)v27
      + v25 * (unint64_t)v29
      + v11 * (unint64_t)v9
      + v21 * (unint64_t)v37;
  v49 = v23 * (unint64_t)v35
      + v26 * (unint64_t)v28
      + v9 * (unint64_t)v29;
  v50 = v33 + ((v147 + 0x100000) >> 21);
  v51 = v43 + ((v41 + 0x100000) >> 21);
  v52 = v48 + v30 * (unint64_t)v22;
  v53 = v47 + v30 * (unint64_t)v21 + ((v46 + 0x100000) >> 21);
  v54 = v49
      + v11 * (unint64_t)v27
      + v37 * (unint64_t)v22
      + v30 * (unint64_t)v25
      + ((v52 + 0x100000) >> 21);
  v55 = v29 * (unint64_t)v35
      + v37 * (unint64_t)v27
      + v30 * (unint64_t)v28;
  v56 = v28 * (unint64_t)v37
      + v30 * (unint64_t)v35
      + ((v55 + 0x100000) >> 21);
  v57 = v37 * (unint64_t)v35;
  v58 = (v57 + 0x100000) >> 21;
  v59 = v32 + 0x100000;
  v140 = v32 - ((v32 + 0x100000) & 0xFFFFFFFFFFE00000);
  v142 = v34 + ((v50 + 0x100000) >> 21);
  v60 = v44 - ((v44 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v54 + 0x100000) >> 21);
  v61 = v54 - ((v54 + 0x100000) & 0xFFFFFFFFFFE00000);
  v62 = v55 - ((v55 + 0x100000) & 0x1FFFFFFE00000) + ((v45 + 0x100000) >> 21);
  v63 = v45 - ((v45 + 0x100000) & 0xFFFFFFFFFFE00000);
  v64 = v57 - ((v57 + 0x100000) & 0x7FFFFFFE00000) + ((v56 + 0x100000) >> 21);
  v65 = v56 - ((v56 + 0x100000) & 0x1FFFFFFE00000);
  v66 = v52 - 683901 * (int)v58 - ((v52 + 0x100000) & 0xFFFFFFFFFFE00000);
  v67 = v46 - 997805 * (int)v58 - ((v46 + 0x100000) & 0xFFFFFFFFFFE00000);
  v68 = v41 + 470296 * v58 - ((v41 + 0x100000) & 0xFFFFFFFFFFE00000);
  v69 = v139 + ((v145 + 0x100000) >> 21);
  v70 = v138 + ((v144 + 0x100000) >> 21);
  v71 = 666643 * v62
      + 470296 * v63
      + 654183 * v60
      + v144
      + ((v69 + 0x100000) >> 21)
      - ((v144 + 0x100000) & 0xFFFFFFFFFFE00000);
  v72 = v40 + ((v143 + 0x100000) >> 21);
  v73 = 666643 * v64
      + 470296 * v65
      + 654183 * v62
      - 997805 * v63
      + 136657 * v60
      + ((v70 + 0x100000) >> 21)
      + v143
      - ((v143 + 0x100000) & 0xFFFFFFFFFFE00000);
  v74 = 666643 * v63 + 470296 * v60 + v69 - ((v69 + 0x100000) & 0xFFFFFFFFFFE00000);
  v75 = 666643 * v65 + 470296 * v62 + 654183 * v63 - 997805 * v60 + v70 - ((v70 + 0x100000) & 0xFFFFFFFFFFE00000);
  v76 = v68 + 654183 * v64 - 997805 * v65 + 136657 * v62 - 683901 * v63 + ((v72 + 0x100000) >> 21);
  v77 = 470296 * v64
      + 666643 * v58
      + 654183 * v65
      - 997805 * v62
      + 136657 * v63
      - 683901 * v60
      + v72
      - ((v72 + 0x100000) & 0xFFFFFFFFFFE00000);
  v78 = v67 + ((v51 + 0x100000) >> 21);
  v79 = v51
      + 654183 * v58
      - ((v51 + 0x100000) & 0xFFFFFFFFFFE00000)
      - 997805 * v64
      + 136657 * v65
      - 683901 * v62
      + ((uint64_t)(v76 + 0x100000) >> 21);
  v80 = v53 + 136657 * v58;
  v53 += 0x100000;
  v81 = v66 + (v53 >> 21);
  v82 = v145 + 666643 * v60 - ((v145 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v141 + 0x100000) >> 21);
  v83 = v75 + ((uint64_t)(v71 + 0x100000) >> 21);
  v84 = v78 + 136657 * v64 - 683901 * v65;
  v85 = v77 + ((uint64_t)(v73 + 0x100000) >> 21);
  v86 = v80 - (v53 & 0xFFFFFFFFFFE00000) - 683901 * v64 + ((v84 + 0x100000) >> 21);
  v87 = v61 + ((uint64_t)(v81 + 0x100000) >> 21);
  v88 = v81 - ((v81 + 0x100000) & 0xFFFFFFFFFFE00000);
  v89 = v76 - ((v76 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v85 + 0x100000) >> 21);
  v90 = v85 - ((v85 + 0x100000) & 0xFFFFFFFFFFE00000);
  v91 = v84 - ((v84 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v79 + 0x100000) >> 21);
  v92 = v79 - ((v79 + 0x100000) & 0xFFFFFFFFFFE00000);
  v93 = v88 + ((uint64_t)(v86 + 0x100000) >> 21);
  v94 = v86 - ((v86 + 0x100000) & 0xFFFFFFFFFFE00000);
  v95 = v73 - 683901 * v87 + ((uint64_t)(v83 + 0x100000) >> 21) - ((v73 + 0x100000) & 0xFFFFFFFFFFE00000);
  v96 = v74 + ((uint64_t)(v82 + 0x100000) >> 21);
  v97 = -997805 * v87
      + 136657 * v93
      - 683901 * v94
      + v71
      + ((uint64_t)(v96 + 0x100000) >> 21)
      - ((v71 + 0x100000) & 0xFFFFFFFFFFE00000);
  v98 = v146 + 666643 * v89;
  v99 = v140 + 470296 * v89 + 666643 * v92 + ((uint64_t)(v98 + 0x100000) >> 21);
  v100 = v82
       + 470296 * v87
       - ((v82 + 0x100000) & 0xFFFFFFFFFFE00000)
       + 654183 * v93
       - 997805 * v94
       + 136657 * v91
       - 683901 * v92;
  v101 = v96
       + 654183 * v87
       - 997805 * v93
       + 136657 * v94
       - ((v96 + 0x100000) & 0xFFFFFFFFFFE00000)
       - 683901 * v91
       + ((uint64_t)(v100 + 0x100000) >> 21);
  v102 = 136657 * v87
       - 683901 * v93
       + v83
       - ((v83 + 0x100000) & 0xFFFFFFFFFFE00000)
       + ((uint64_t)(v97 + 0x100000) >> 21);
  v103 = v90 + ((uint64_t)(v95 + 0x100000) >> 21);
  v104 = (uint64_t)(v103 + 0x100000) >> 21;
  v105 = v147 + (v59 >> 21) - ((v147 + 0x100000) & 0xFFFFFFFFFFE00000) + 654183 * v89 + 666643 * v91 + 470296 * v92;
  v106 = v50
       - ((v50 + 0x100000) & 0xFFFFFFFFFFE00000)
       + 666643 * v94
       - 997805 * v89
       + 470296 * v91
       + 654183 * v92
       + ((uint64_t)(v105 + 0x100000) >> 21);
  v107 = v141 + 666643 * v87 - ((v141 + 0x100000) & 0xFFFFFFFFFFE00000) + 470296 * v93 + 654183 * v94 - 683901 * v89;
  v108 = v142 + 666643 * v93 + 470296 * v94 + 136657 * v89 + 654183 * v91 - 997805 * v92;
  v109 = v107 - 997805 * v91 + 136657 * v92 + ((v108 + 0x100000) >> 21);
  v110 = v95 + ((uint64_t)(v102 + 0x100000) >> 21);
  v111 = v98 - ((v98 + 0x100000) & 0xFFFFFFFFFFE00000) + 666643 * v104;
  v112 = (v95 + 0x100000) & 0xFFFFFFFFFFE00000;
  v113 = v99 + 470296 * v104 - ((v99 + 0x100000) & 0xFFFFFFFFFFE00000) + (v111 >> 21);
  v114 = v111 & 0x1FFFFF;
  v115 = v105 + 654183 * v104 - ((v105 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v99 + 0x100000) >> 21) + (v113 >> 21);
  v116 = v106 - 997805 * v104 - ((v106 + 0x100000) & 0xFFFFFFFFFFE00000) + (v115 >> 21);
  v117 = v108
       + 136657 * v104
       - ((v108 + 0x100000) & 0xFFFFFFFFFFE00000)
       + ((uint64_t)(v106 + 0x100000) >> 21)
       + (v116 >> 21);
  v118 = v109 - 683901 * v104 - ((v109 + 0x100000) & 0xFFFFFFFFFFE00000) + (v117 >> 21);
  v119 = v100 - ((v100 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v109 + 0x100000) >> 21) + (v118 >> 21);
  v120 = v101 - ((v101 + 0x100000) & 0xFFFFFFFFFFE00000) + (v119 >> 21);
  v121 = v97 - ((v97 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v101 + 0x100000) >> 21) + (v120 >> 21);
  v122 = v102 - ((v102 + 0x100000) & 0xFFFFFFFFFFE00000) + (v121 >> 21);
  v123 = v110 - v112 + (v122 >> 21);
  v124 = v103 - ((v103 + 0x100000) & 0xFFFFFFFFFFE00000) + (v123 >> 21);
  v125 = v114 + 666643 * (v124 >> 21);
  *((_BYTE *)a1 + 33) = BYTE1(v125);
  v126 = (v113 & 0x1FFFFF) + 470296 * (v124 >> 21) + (v125 >> 21);
  *((_BYTE *)a1 + 32) = v125;
  *((_BYTE *)a1 + 34) = ((v114 + 666643 * (v124 >> 21)) >> 16) & 0x1F | (32 * (v113 + 24 * (v124 >> 21) + (v125 >> 21)));
  *((_BYTE *)a1 + 35) = (unint64_t)v126 >> 3;
  *((_BYTE *)a1 + 36) = (unint64_t)v126 >> 11;
  v127 = (v115 & 0x1FFFFF) + 654183 * (v124 >> 21) + (v126 >> 21);
  *((_BYTE *)a1 + 37) = (v126 >> 19) & 3 | (4 * (v115 + 103 * (v124 >> 21) + (v126 >> 21)));
  *((_BYTE *)a1 + 38) = (unint64_t)v127 >> 6;
  v128 = (v116 & 0x1FFFFF) - 997805 * (v124 >> 21) + (v127 >> 21);
  *((_BYTE *)a1 + 39) = (v127 >> 14) & 0x7F | (((_BYTE)v106
                                                            - -83 * (_BYTE)v104
                                                            + (v115 >> 21)
                                                            - -83 * (v124 >> 21)
                                                            + (v127 >> 21)) << 7);
  *((_BYTE *)a1 + 40) = (unint64_t)v128 >> 1;
  *((_BYTE *)a1 + 41) = (unint64_t)v128 >> 9;
  v129 = (v117 & 0x1FFFFF) + 136657 * (v124 >> 21) + (v128 >> 21);
  *((_BYTE *)a1 + 42) = (v128 >> 17) & 0xF | (16 * (v117 - 47 * (v124 >> 21) + (v128 >> 21)));
  *((_BYTE *)a1 + 43) = (unint64_t)v129 >> 4;
  *((_BYTE *)a1 + 44) = (unint64_t)v129 >> 12;
  v130 = (v118 & 0x1FFFFF) - 683901 * (v124 >> 21) + (v129 >> 21);
  *((_BYTE *)a1 + 45) = ((v129 & 0x100000) != 0) | (2 * (v118 - 125 * (v124 >> 21) + (v129 >> 21)));
  *((_BYTE *)a1 + 46) = (unint64_t)v130 >> 7;
  v131 = (v119 & 0x1FFFFF) + (v130 >> 21);
  *((_BYTE *)a1 + 47) = (v130 >> 15) & 0x3F | (((_BYTE)v119 + (v130 >> 21)) << 6);
  *((_BYTE *)a1 + 48) = (unint64_t)v131 >> 2;
  *((_BYTE *)a1 + 49) = (unint64_t)v131 >> 10;
  v132 = (v120 & 0x1FFFFF) + (v131 >> 21);
  *((_BYTE *)a1 + 50) = (v131 >> 18) & 7 | (8 * (v120 + (v131 >> 21)));
  *((_BYTE *)a1 + 51) = (unint64_t)v132 >> 5;
  v133 = (v121 & 0x1FFFFF) + (v132 >> 21);
  *((_BYTE *)a1 + 52) = (unint64_t)v132 >> 13;
  *((_BYTE *)a1 + 54) = BYTE1(v133);
  v134 = (v122 & 0x1FFFFF) + (v133 >> 21);
  *((_BYTE *)a1 + 53) = v133;
  *((_BYTE *)a1 + 55) = BYTE2(v133) & 0x1F | (32 * (v122 + (v133 >> 21)));
  *((_BYTE *)a1 + 56) = (unint64_t)v134 >> 3;
  *((_BYTE *)a1 + 57) = (unint64_t)v134 >> 11;
  v135 = (v123 & 0x1FFFFF) + (v134 >> 21);
  *((_BYTE *)a1 + 58) = (v134 >> 19) & 3 | (4 * v135);
  *((_BYTE *)a1 + 59) = (unint64_t)v135 >> 6;
  v136 = (v124 & 0x1FFFFF) + (v135 >> 21);
  *((_BYTE *)a1 + 60) = (v135 >> 14) & 0x7F | ((_BYTE)v136 << 7);
  *((_BYTE *)a1 + 61) = v136 >> 1;
  *((_BYTE *)a1 + 62) = v136 >> 9;
  *((_BYTE *)a1 + 63) = v136 >> 17;
  return 1;
}

uint64_t sub_23414F1FC(unint64_t *a1, size_t a2, uint64_t a3, int64x2_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v40[7];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[10];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[3];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  unsigned __int16 v85[32];
  int8x16_t v86[13];
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];
  unint64_t v91[20];
  unint64_t v92[20];
  unint64_t v93[20];
  unint64_t v94[20];
  unint64_t v95[20];
  unint64_t v96[20];
  unint64_t v97[20];
  uint64_t v98;
  _BYTE v99[256];
  _BYTE v100[256];
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(a3 + 63) > 0x1Fu)
    return 0;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  result = sub_23414C160((uint64_t)&v42, a4);
  if (!(_DWORD)result)
    return result;
  v9 = ((unint64_t)(0xFFFFFFFFFFFDALL - v42) >> 51) - *((_QWORD *)&v42 + 1) + 0xFFFFFFFFFFFFELL;
  v10 = (v9 >> 51) - v43 + 0xFFFFFFFFFFFFELL;
  v11 = (v10 >> 51) - *((_QWORD *)&v43 + 1) + 0xFFFFFFFFFFFFELL;
  v12 = (v11 >> 51) - v44 + 0xFFFFFFFFFFFFELL;
  v13 = ((0xFFFFFFFFFFFDALL - v42) & 0x7FFFFFFFFFFFFLL) + 19 * (v12 >> 51);
  v14 = (v9 & 0x7FFFFFFFFFFFFLL) + (v13 >> 51);
  *(_QWORD *)&v42 = v13 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v42 + 1) = v14 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)&v43 = (v10 & 0x7FFFFFFFFFFFFLL) + (v14 >> 51);
  *((_QWORD *)&v43 + 1) = v11 & 0x7FFFFFFFFFFFFLL;
  v15 = ((unint64_t)(0xFFFFFFFFFFFDALL - *((_QWORD *)&v49 + 1)) >> 51) - v50 + 0xFFFFFFFFFFFFELL;
  v16 = (v15 >> 51) - *((_QWORD *)&v50 + 1) + 0xFFFFFFFFFFFFELL;
  v17 = (v16 >> 51) - v51 + 0xFFFFFFFFFFFFELL;
  v18 = (v17 >> 51) - *((_QWORD *)&v51 + 1) + 0xFFFFFFFFFFFFELL;
  v19 = ((0xFFFFFFFFFFFDALL - *((_QWORD *)&v49 + 1)) & 0x7FFFFFFFFFFFFLL) + 19 * (v18 >> 51);
  v20 = (v15 & 0x7FFFFFFFFFFFFLL) + (v19 >> 51);
  *(_QWORD *)&v44 = v12 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v49 + 1) = v19 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)&v50 = v20 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v50 + 1) = (v16 & 0x7FFFFFFFFFFFFLL) + (v20 >> 51);
  *(_QWORD *)&v51 = v17 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v51 + 1) = v18 & 0x7FFFFFFFFFFFFLL;
  v21 = *(_OWORD *)(a3 + 16);
  v90[0] = *(_OWORD *)a3;
  v90[1] = v21;
  v22 = *(_OWORD *)(a3 + 32);
  v89 = *(_OWORD *)(a3 + 48);
  v88 = v22;
  v23 = *((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1) > 0x1000000000000000uLL)
    return 0;
  v24 = 0x1000000000000000;
  v25 = 0x10u;
  while (v23 >= v24)
  {
    if (v25 != -8)
    {
      v23 = *(_QWORD *)((char *)&v88 + v25);
      v24 = *(_QWORD *)((char *)&unk_2342E08C8 + v25);
      v25 -= 8;
      if (v23 <= v24)
        continue;
    }
    return 0;
  }
  v87 = 0;
  memset(v86, 0, sizeof(v86));
  sub_234172574((uint64_t)v86);
  sub_2341725B4((unint64_t)v86, (unint64_t *)a3, 0x20uLL);
  sub_2341725B4((unint64_t)v86, (unint64_t *)a4, 0x20uLL);
  sub_2341725B4((unint64_t)v86, a1, a2);
  sub_2341726AC(v85, v86);
  sub_23414DE08(v85);
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  memset(v60, 0, sizeof(v60));
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  memset(v52, 0, sizeof(v52));
  sub_2341505D8((uint64_t)v100, (uint64_t)v85);
  sub_2341505D8((uint64_t)v99, (uint64_t)&v88);
  sub_23414C928((uint64_t)v91, (uint64_t)&v42);
  v78 = 0;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v71 = 0u;
  sub_23414DDA4((uint64_t)&v71, &v42);
  sub_23414D804((uint64_t)&v61, (uint64_t)&v71);
  sub_23414C9F0((uint64_t)v52, (unint64_t *)&v61);
  sub_23414CA60((uint64_t)&v61, (uint64_t)v52, v91);
  sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
  sub_23414C928((uint64_t)v92, (uint64_t)&v53);
  sub_23414CA60((uint64_t)&v61, (uint64_t)v52, v92);
  sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
  sub_23414C928((uint64_t)v93, (uint64_t)&v53);
  sub_23414CA60((uint64_t)&v61, (uint64_t)v52, v93);
  sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
  sub_23414C928((uint64_t)v94, (uint64_t)&v53);
  sub_23414CA60((uint64_t)&v61, (uint64_t)v52, v94);
  sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
  sub_23414C928((uint64_t)v95, (uint64_t)&v53);
  sub_23414CA60((uint64_t)&v61, (uint64_t)v52, v95);
  sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
  sub_23414C928((uint64_t)v96, (uint64_t)&v53);
  sub_23414CA60((uint64_t)&v61, (uint64_t)v52, v96);
  sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
  sub_23414C928((uint64_t)v97, (uint64_t)&v53);
  sub_23414CA60((uint64_t)&v61, (uint64_t)v52, v97);
  sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
  sub_23414C928((uint64_t)&v98, (uint64_t)&v53);
  sub_23414DDE0((uint64_t)v40);
  v26 = 255;
  while (1)
  {
    v27 = v26;
    if (v100[v26] || v99[v26])
      break;
    --v26;
    if (!(_DWORD)v27)
      goto LABEL_26;
  }
  if ((v26 & 0x80000000) == 0)
  {
    do
    {
      sub_23414D804((uint64_t)&v61, (uint64_t)v40);
      v28 = v100[v27];
      if ((char)v100[v27] < 1)
      {
        if ((v28 & 0x80) != 0)
        {
          sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
          sub_23414CC40((uint64_t)&v61, (uint64_t)&v53, &v91[20 * (-(char)v28 >> 1)]);
        }
      }
      else
      {
        sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
        sub_23414CA60((uint64_t)&v61, (uint64_t)&v53, &v91[20 * (v28 >> 1)]);
      }
      v29 = (char)v99[v27];
      if (v29 < 1)
      {
        if (v29 < 0)
        {
          sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
          *(_QWORD *)&v73 = 0;
          v30 = &qword_2342E0928[15 * (-(char)v29 >> 1)];
          v71 = 0u;
          v72 = 0u;
          v84 = 0;
          v82 = 0u;
          v83 = 0u;
          v81 = 0;
          v79 = 0u;
          v80 = 0u;
          *(_QWORD *)&v61 = v53 + *((_QWORD *)&v55 + 1);
          *((_QWORD *)&v61 + 1) = *((_QWORD *)&v53 + 1) + v56;
          *(_QWORD *)&v62 = v54 + *((_QWORD *)&v56 + 1);
          *((_QWORD *)&v62 + 1) = *((_QWORD *)&v54 + 1) + v57;
          *(_QWORD *)&v63 = v55 + *((_QWORD *)&v57 + 1);
          *((_QWORD *)&v63 + 1) = *((_QWORD *)&v55 + 1) + 0xFFFFFFFFFFFDALL - v53;
          *(_QWORD *)&v64 = v56 - *((_QWORD *)&v53 + 1) + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v64 + 1) = *((_QWORD *)&v56 + 1) - v54 + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v65 = v57 - *((_QWORD *)&v54 + 1) + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v65 + 1) = *((_QWORD *)&v57 + 1) - v55 + 0xFFFFFFFFFFFFELL;
          sub_2341503BC((uint64_t)&v82, (unint64_t *)&v61, v30 + 5);
          sub_2341503BC((uint64_t)&v71, (unint64_t *)&v63 + 1, v30);
          sub_2341503BC((uint64_t)&v79, v30 + 10, (unint64_t *)v60 + 1);
          *(_QWORD *)&v61 = v82 + 0xFFFFFFFFFFFDALL - v71;
          *((_QWORD *)&v61 + 1) = *((_QWORD *)&v82 + 1) - *((_QWORD *)&v71 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v62 = v83 - v72 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v62 + 1) = *((_QWORD *)&v83 + 1) - *((_QWORD *)&v72 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v63 = v84 - v73 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v63 + 1) = v71 + v82;
          *(_QWORD *)&v64 = *((_QWORD *)&v71 + 1) + *((_QWORD *)&v82 + 1);
          *((_QWORD *)&v64 + 1) = v72 + v83;
          *(_QWORD *)&v65 = *((_QWORD *)&v72 + 1) + *((_QWORD *)&v83 + 1);
          *((_QWORD *)&v65 + 1) = v73 + v84;
          v31 = 2 * *((_QWORD *)&v58 + 1) + ((unint64_t)(2 * v58) >> 51);
          v32 = (v31 >> 51) + 2 * v59;
          v33 = (v32 >> 51) + 2 * *((_QWORD *)&v59 + 1);
          v34 = (v33 >> 51) + 2 * *(_QWORD *)&v60[0];
          v35 = ((2 * v58) & 0x7FFFFFFFFFFFELL) + 19 * (v34 >> 51);
          v36 = (v31 & 0x7FFFFFFFFFFFFLL) + (v35 >> 51);
          v35 &= 0x7FFFFFFFFFFFFuLL;
          v37 = v36 & 0x7FFFFFFFFFFFFLL;
          v38 = (v32 & 0x7FFFFFFFFFFFFLL) + (v36 >> 51);
          *(_QWORD *)&v66 = v35 + 0xFFFFFFFFFFFDALL - v79;
          *((_QWORD *)&v66 + 1) = v37 - *((_QWORD *)&v79 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v67 = v38 - v80 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v67 + 1) = (v33 & 0x7FFFFFFFFFFFFLL) - *((_QWORD *)&v80 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v68 = (v34 & 0x7FFFFFFFFFFFFLL) - v81 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v68 + 1) = v79 + v35;
          *(_QWORD *)&v69 = *((_QWORD *)&v79 + 1) + v37;
          *((_QWORD *)&v69 + 1) = v80 + v38;
          *(_QWORD *)&v70 = *((_QWORD *)&v80 + 1) + (v33 & 0x7FFFFFFFFFFFFLL);
          *((_QWORD *)&v70 + 1) = v81 + (v34 & 0x7FFFFFFFFFFFFLL);
        }
      }
      else
      {
        sub_23414C9F0((uint64_t)&v53, (unint64_t *)&v61);
        sub_23414D22C((uint64_t)&v61, (uint64_t)&v53, &qword_2342E0928[15 * (v29 >> 1)]);
      }
      sub_23414C99C((uint64_t)v40, (unint64_t *)&v61);
    }
    while (v27-- > 0);
  }
LABEL_26:
  sub_23414BED4(v91, (uint64_t)v40);
  return sub_23418E484((char *)v91, (char *)v90, 32) == 0;
}

_BYTE *sub_23414FA20(_BYTE *a1, char *a2)
{
  sub_23416BE78(a2, 0x20uLL);
  *a2 |= 7u;
  a2[31] = a2[31] & 0x3F | 0x80;
  return sub_23414FA70(a1, (uint64_t)a2);
}

_BYTE *sub_23414FA70(_BYTE *a1, uint64_t a2)
{
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  unint64_t v7[5];
  unint64_t v8[5];
  __int128 v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int8x16_t v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a2 + 16);
  v18 = *(int8x16_t *)a2;
  v19 = v3;
  v18.i8[0] &= 0xF8u;
  HIBYTE(v19) = HIBYTE(v3) & 0x3F | 0x40;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  memset(v9, 0, sizeof(v9));
  sub_23414D3F4(v9, &v18);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v8[0] = *((_QWORD *)&v10 + 1) + v13;
  v8[1] = v11 + *((_QWORD *)&v13 + 1);
  v8[2] = *((_QWORD *)&v11 + 1) + v14;
  v8[3] = v12 + *((_QWORD *)&v14 + 1);
  v8[4] = *((_QWORD *)&v12 + 1) + v15;
  v7[0] = v13 - *((_QWORD *)&v10 + 1) + 0xFFFFFFFFFFFDALL;
  v7[1] = *((_QWORD *)&v13 + 1) - v11 + 0xFFFFFFFFFFFFELL;
  v7[2] = v14 - *((_QWORD *)&v11 + 1) + 0xFFFFFFFFFFFFELL;
  v7[3] = *((_QWORD *)&v14 + 1) - v12 + 0xFFFFFFFFFFFFELL;
  v7[4] = v15 - *((_QWORD *)&v12 + 1) + 0xFFFFFFFFFFFFELL;
  sub_234150170((uint64_t)v5, v7);
  sub_2341503BC((uint64_t)v5, v8, (unint64_t *)v5);
  return sub_23414BFA8(a1, v5);
}

BOOL sub_23414FBB0(char *a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t j;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  unsigned int v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v101 = 0;
  v99 = 0u;
  v100 = 0u;
  v86 = 0;
  v84 = 0u;
  v85 = 0u;
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  v80 = 0;
  v78 = 0u;
  v79 = 0u;
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v71 = 0;
  v69 = 0u;
  v70 = 0u;
  v68 = 0;
  v66 = 0u;
  v67 = 0u;
  v3 = a2[1];
  v102 = *a2;
  v103 = v3;
  LOBYTE(v102) = v102 & 0xF8;
  HIBYTE(v103) = HIBYTE(v3) & 0x3F | 0x40;
  v4 = a3[1];
  v104 = *a3;
  v105 = v4;
  HIBYTE(v105) = HIBYTE(v4) & 0x7F;
  sub_23414D0A8((unint64_t *)&v99, (unsigned int *)&v104);
  v5 = 0;
  v97 = 0u;
  v98 = 0u;
  v95 = 0;
  v96 = 1;
  v93 = 0u;
  v94 = 0u;
  v90 = v99;
  v91 = v100;
  v6 = 254;
  v92 = v101;
  v88 = 0u;
  v87 = 1;
  v89 = 0u;
  do
  {
    v7 = 0;
    v64 = v6;
    v65 = (*((unsigned __int8 *)&v102 + ((unint64_t)v6 >> 3)) >> (v6 & 7)) & 1;
    v8 = -(uint64_t)(v65 ^ v5);
    do
    {
      v9 = *(unint64_t *)((char *)&v96 + v7);
      v10 = *(_QWORD *)((char *)&v90 + v7);
      v11 = (v10 ^ v9) & v8;
      *(unint64_t *)((char *)&v96 + v7) = v11 ^ v9;
      *(_QWORD *)((char *)&v90 + v7) = v11 ^ v10;
      v7 += 8;
    }
    while (v7 != 40);
    for (i = 0; i != 40; i += 8)
    {
      v13 = *(_QWORD *)((char *)&v93 + i);
      v14 = *(uint64_t *)((char *)&v87 + i);
      v15 = (v14 ^ v13) & v8;
      *(_QWORD *)((char *)&v93 + i) = v15 ^ v13;
      *(uint64_t *)((char *)&v87 + i) = v15 ^ v14;
    }
    *(_QWORD *)&v69 = v90 + 0xFFFFFFFFFFFDALL - v87;
    *((_QWORD *)&v69 + 1) = *((_QWORD *)&v90 + 1) - v88 + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v70 = v91 - *((_QWORD *)&v88 + 1) + 0xFFFFFFFFFFFFELL;
    *((_QWORD *)&v70 + 1) = *((_QWORD *)&v91 + 1) - v89 + 0xFFFFFFFFFFFFELL;
    v71 = v92 - *((_QWORD *)&v89 + 1) + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v66 = v96 + 0xFFFFFFFFFFFDALL - v93;
    *((_QWORD *)&v66 + 1) = v97 - *((_QWORD *)&v93 + 1) + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v67 = *((_QWORD *)&v97 + 1) - v94 + 0xFFFFFFFFFFFFELL;
    *((_QWORD *)&v67 + 1) = v98 - *((_QWORD *)&v94 + 1) + 0xFFFFFFFFFFFFELL;
    v68 = *((_QWORD *)&v98 + 1) - v95 + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v78 = v93 + v96;
    *((_QWORD *)&v78 + 1) = *((_QWORD *)&v93 + 1) + v97;
    *(_QWORD *)&v79 = v94 + *((_QWORD *)&v97 + 1);
    *((_QWORD *)&v79 + 1) = *((_QWORD *)&v94 + 1) + v98;
    v80 = v95 + *((_QWORD *)&v98 + 1);
    *(_QWORD *)&v75 = v87 + v90;
    *((_QWORD *)&v75 + 1) = v88 + *((_QWORD *)&v90 + 1);
    *(_QWORD *)&v76 = *((_QWORD *)&v88 + 1) + v91;
    *((_QWORD *)&v76 + 1) = v89 + *((_QWORD *)&v91 + 1);
    v77 = *((_QWORD *)&v89 + 1) + v92;
    sub_2341503BC((uint64_t)&v87, (unint64_t *)&v69, (unint64_t *)&v78);
    sub_2341503BC((uint64_t)&v93, (unint64_t *)&v75, (unint64_t *)&v66);
    sub_23414C680((uint64_t)&v84, (unint64_t *)&v66);
    sub_23414C680((uint64_t)&v81, (unint64_t *)&v78);
    *(_QWORD *)&v72 = v93 + v87;
    *((_QWORD *)&v72 + 1) = *((_QWORD *)&v93 + 1) + v88;
    *(_QWORD *)&v73 = v94 + *((_QWORD *)&v88 + 1);
    *((_QWORD *)&v73 + 1) = *((_QWORD *)&v94 + 1) + v89;
    v74 = v95 + *((_QWORD *)&v89 + 1);
    *(_QWORD *)&v75 = v87 + 0xFFFFFFFFFFFDALL - v93;
    *((_QWORD *)&v75 + 1) = v88 - *((_QWORD *)&v93 + 1) + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v76 = *((_QWORD *)&v88 + 1) - v94 + 0xFFFFFFFFFFFFELL;
    *((_QWORD *)&v76 + 1) = v89 - *((_QWORD *)&v94 + 1) + 0xFFFFFFFFFFFFELL;
    v77 = *((_QWORD *)&v89 + 1) - v95 + 0xFFFFFFFFFFFFELL;
    sub_2341503BC((uint64_t)&v96, (unint64_t *)&v81, (unint64_t *)&v84);
    v63 = v84;
    v16 = v81 + 0xFFFFFFFFFFFDALL - v84;
    v17 = *((_QWORD *)&v81 + 1) - *((_QWORD *)&v84 + 1) + 0xFFFFFFFFFFFFELL;
    v18 = v85;
    v19 = v82 - v85 + 0xFFFFFFFFFFFFELL;
    v20 = *((_QWORD *)&v82 + 1) - *((_QWORD *)&v85 + 1) + 0xFFFFFFFFFFFFELL;
    v61 = v86;
    v62 = *((_QWORD *)&v85 + 1);
    v21 = v83 - v86 + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v66 = v16;
    *((_QWORD *)&v66 + 1) = v17;
    *(_QWORD *)&v67 = v19;
    *((_QWORD *)&v67 + 1) = v20;
    v68 = v21;
    sub_23414C680((uint64_t)&v93, (unint64_t *)&v75);
    v22 = ((unint64_t)v21 * (unsigned __int128)0x1DB42uLL) >> 64;
    v23 = 121666 * v21;
    v24 = ((unint64_t)v20 * (unsigned __int128)0x1DB42uLL) >> 64;
    v25 = 121666 * v20;
    v26 = ((unint64_t)v19 * (unsigned __int128)0x1DB42uLL) >> 64;
    v27 = 121666 * v19;
    v28 = ((unint64_t)v17 * (unsigned __int128)0x1DB42uLL) >> 64;
    v29 = (__int128)(v16 * (unsigned __int128)0x1DB42uLL) >> 51;
    if (__CFADD__(121666 * v17, v29))
      ++v28;
    *((_QWORD *)&v31 + 1) = v28;
    *(_QWORD *)&v31 = 121666 * v17 + v29;
    v30 = v31 >> 51;
    v32 = v31 & 0x7FFFFFFFFFFFFLL;
    v33 = __CFADD__(v30, v27);
    v34 = v30 + v27;
    if (v33)
      ++v26;
    *((_QWORD *)&v36 + 1) = v26;
    *(_QWORD *)&v36 = v34;
    v35 = v36 >> 51;
    v37 = v34 & 0x7FFFFFFFFFFFFLL;
    v33 = __CFADD__(v35, v25);
    v38 = v35 + v25;
    if (v33)
      ++v24;
    *((_QWORD *)&v40 + 1) = v24;
    *(_QWORD *)&v40 = v38;
    v39 = v40 >> 51;
    v33 = __CFADD__(v39, v23);
    v41 = v39 + v23;
    if (v33)
      ++v22;
    *((_QWORD *)&v42 + 1) = v22;
    *(_QWORD *)&v42 = v41;
    v43 = v38 & 0x7FFFFFFFFFFFFLL;
    v44 = v41 & 0x7FFFFFFFFFFFFLL;
    v45 = ((121666 * v16) & 0x7FFFFFFFFFFFELL) + 19 * (v42 >> 51);
    v46 = v45 & 0x7FFFFFFFFFFFFLL;
    v47 = v32 + (v45 >> 51);
    v48 = v47 & 0x7FFFFFFFFFFFFLL;
    v87 = v46;
    *(_QWORD *)&v88 = v47 & 0x7FFFFFFFFFFFFLL;
    v49 = v37 + (v47 >> 51);
    *((_QWORD *)&v88 + 1) = v49;
    *(_QWORD *)&v89 = v38 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v89 + 1) = v41 & 0x7FFFFFFFFFFFFLL;
    sub_23414C680((uint64_t)&v90, (unint64_t *)&v72);
    *(_QWORD *)&v69 = v46 + v63;
    *((_QWORD *)&v69 + 1) = v48 + *((_QWORD *)&v63 + 1);
    *(_QWORD *)&v70 = v49 + v18;
    *((_QWORD *)&v70 + 1) = v43 + v62;
    v71 = v44 + v61;
    sub_2341503BC((uint64_t)&v87, (unint64_t *)&v99, (unint64_t *)&v93);
    sub_2341503BC((uint64_t)&v93, (unint64_t *)&v66, (unint64_t *)&v69);
    v5 = v65;
    v6 = v64 - 1;
  }
  while (v64);
  v50 = 0;
  v51 = -(uint64_t)v65;
  do
  {
    v52 = *(unint64_t *)((char *)&v96 + v50);
    v53 = *(_QWORD *)((char *)&v90 + v50);
    v54 = (v53 ^ v52) & v51;
    *(unint64_t *)((char *)&v96 + v50) = v54 ^ v52;
    *(_QWORD *)((char *)&v90 + v50) = v54 ^ v53;
    v50 += 8;
  }
  while (v50 != 40);
  for (j = 0; j != 40; j += 8)
  {
    v56 = *(_QWORD *)((char *)&v93 + j);
    v57 = *(uint64_t *)((char *)&v87 + j);
    v58 = (v57 ^ v56) & v51;
    *(_QWORD *)((char *)&v93 + j) = v58 ^ v56;
    *(uint64_t *)((char *)&v87 + j) = v58 ^ v57;
  }
  v104 = v93;
  v105 = v94;
  v106 = v95;
  sub_234150170((uint64_t)&v93, (unint64_t *)&v104);
  sub_2341503BC((uint64_t)&v96, &v96, (unint64_t *)&v93);
  sub_23414BFA8(a1, &v96);
  return sub_23418E484(byte_2342E08E8, a1, 32) != 0;
}

double sub_234150170(uint64_t a1, unint64_t *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double result;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_23414C680((uint64_t)v19, a2);
  sub_23414C680((uint64_t)v17, (unint64_t *)v19);
  sub_23414C680((uint64_t)v17, (unint64_t *)v17);
  sub_2341503BC((uint64_t)v17, a2, (unint64_t *)v17);
  sub_2341503BC((uint64_t)v19, (unint64_t *)v19, (unint64_t *)v17);
  sub_23414C680((uint64_t)v15, (unint64_t *)v19);
  sub_2341503BC((uint64_t)v17, (unint64_t *)v17, (unint64_t *)v15);
  sub_23414C680((uint64_t)v15, (unint64_t *)v17);
  v4 = 4;
  do
  {
    sub_23414C680((uint64_t)v15, (unint64_t *)v15);
    --v4;
  }
  while (v4);
  sub_2341503BC((uint64_t)v17, (unint64_t *)v15, (unint64_t *)v17);
  sub_23414C680((uint64_t)v15, (unint64_t *)v17);
  v5 = 9;
  do
  {
    sub_23414C680((uint64_t)v15, (unint64_t *)v15);
    --v5;
  }
  while (v5);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_2341503BC((uint64_t)v15, (unint64_t *)v15, (unint64_t *)v17);
  sub_23414C680((uint64_t)v13, (unint64_t *)v15);
  v6 = 19;
  do
  {
    sub_23414C680((uint64_t)v13, (unint64_t *)v13);
    --v6;
  }
  while (v6);
  sub_2341503BC((uint64_t)v15, (unint64_t *)v13, (unint64_t *)v15);
  sub_23414C680((uint64_t)v15, (unint64_t *)v15);
  v7 = 9;
  do
  {
    sub_23414C680((uint64_t)v15, (unint64_t *)v15);
    --v7;
  }
  while (v7);
  sub_2341503BC((uint64_t)v17, (unint64_t *)v15, (unint64_t *)v17);
  sub_23414C680((uint64_t)v15, (unint64_t *)v17);
  v8 = 49;
  do
  {
    sub_23414C680((uint64_t)v15, (unint64_t *)v15);
    --v8;
  }
  while (v8);
  sub_2341503BC((uint64_t)v15, (unint64_t *)v15, (unint64_t *)v17);
  sub_23414C680((uint64_t)v13, (unint64_t *)v15);
  v9 = 99;
  do
  {
    sub_23414C680((uint64_t)v13, (unint64_t *)v13);
    --v9;
  }
  while (v9);
  sub_2341503BC((uint64_t)v15, (unint64_t *)v13, (unint64_t *)v15);
  sub_23414C680((uint64_t)v15, (unint64_t *)v15);
  v10 = 49;
  do
  {
    sub_23414C680((uint64_t)v15, (unint64_t *)v15);
    --v10;
  }
  while (v10);
  sub_2341503BC((uint64_t)v17, (unint64_t *)v15, (unint64_t *)v17);
  sub_23414C680((uint64_t)v17, (unint64_t *)v17);
  v11 = 4;
  do
  {
    sub_23414C680((uint64_t)v17, (unint64_t *)v17);
    --v11;
  }
  while (v11);
  *(_QWORD *)&result = sub_2341503BC(a1, (unint64_t *)v17, (unint64_t *)v19).u64[0];
  return result;
}

int8x16_t sub_2341503BC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unsigned __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int128 v26;
  unsigned __int128 v27;
  uint64_t v28;
  unsigned __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t result;

  v4 = a3[3];
  v3 = a3[4];
  v5 = a2[4];
  v7 = a3[1];
  v6 = a3[2];
  v8 = *a3;
  v10 = a2[2];
  v9 = a2[3];
  v11 = *a2;
  v12 = a2[1];
  v14 = v9 * 19 * v6 + 19 * v7 * v5 + v10 * 19 * v4 + v12 * 19 * v3 + v11 * *a3;
  v15 = v9 * (unsigned __int128)(19 * v3) + 19 * v4 * (unsigned __int128)v5;
  v16 = (v9 * (unsigned __int128)(19 * v4)
       + 19 * v6 * (unsigned __int128)v5
       + v10 * (unsigned __int128)(19 * v3)
       + *a3 * (unsigned __int128)v12
       + v11 * (unsigned __int128)v7) >> 64;
  v17 = v9 * 19 * v4 + 19 * v6 * v5 + v10 * 19 * v3 + *a3 * v12 + v11 * v7;
  v18 = (__int128)(v9 * (unsigned __int128)(19 * v6)
                 + 19 * v7 * (unsigned __int128)v5
                 + v10 * (unsigned __int128)(19 * v4)
                 + v12 * (unsigned __int128)(19 * v3)
                 + v11 * (unsigned __int128)*a3) >> 51;
  v19 = __CFADD__(v17, v18);
  v20 = v17 + v18;
  if (v19)
    ++v16;
  *((_QWORD *)&v22 + 1) = v16;
  *(_QWORD *)&v22 = v20;
  v21 = v22 >> 51;
  v24 = (v15 + v12 * (unsigned __int128)v7 + v8 * (unsigned __int128)v10 + v11 * (unsigned __int128)v6) >> 64;
  v23 = v15 + v12 * v7 + v8 * v10 + v11 * v6;
  v19 = __CFADD__(v23, v21);
  v25 = v23 + v21;
  if (v19)
    ++v24;
  v26 = v10 * (unsigned __int128)v7
      + 19 * v3 * (unsigned __int128)v5
      + v12 * (unsigned __int128)v6
      + v8 * (unsigned __int128)v9
      + v11 * (unsigned __int128)v4;
  v27 = v10 * (unsigned __int128)v6
      + v9 * (unsigned __int128)v7
      + v12 * (unsigned __int128)v4
      + v8 * (unsigned __int128)v5;
  v29 = v27 + v11 * (unsigned __int128)v3;
  v28 = *((_QWORD *)&v29 + 1);
  *((_QWORD *)&v30 + 1) = v24;
  *(_QWORD *)&v30 = v25;
  v31 = v26 + (v30 >> 51);
  *((_QWORD *)&v30 + 1) = v27;
  *(_QWORD *)&v30 = v31;
  v32 = v30 >> 51;
  v33.i64[0] = v31;
  if (__CFADD__((_QWORD)v29, v32))
    v28 = *((_QWORD *)&v29 + 1) + 1;
  *((_QWORD *)&v34 + 1) = v28;
  *(_QWORD *)&v34 = v29 + v32;
  v33.i64[1] = v29 + v32;
  v35 = (v14 & 0x7FFFFFFFFFFFFLL) + 19 * (v34 >> 51);
  v36 = (v20 & 0x7FFFFFFFFFFFFLL) + (v35 >> 51);
  *(_QWORD *)a1 = v35 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 8) = v36 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 16) = (v25 & 0x7FFFFFFFFFFFFLL) + (v36 >> 51);
  result = vandq_s8(v33, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL));
  *(int8x16_t *)(a1 + 24) = result;
  return result;
}

uint64_t sub_2341505D8(uint64_t result, uint64_t a2)
{
  uint64_t i;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;

  for (i = 0; i != 256; ++i)
    *(_BYTE *)(result + i) = (*(unsigned __int8 *)(a2 + (i >> 3)) >> (i & 7)) & 1;
  v3 = 0;
  v4 = result + 1;
  v5 = 1;
  do
  {
    if (*(_BYTE *)(result + v3) && v3 <= 0xFE)
    {
      v6 = v3;
      v7 = 1;
      v8 = v5;
      do
      {
        v9 = *(char *)(result + v8);
        if (*(_BYTE *)(result + v8))
        {
          v10 = *(char *)(result + v3);
          v11 = v9 << v7;
          v12 = (v9 << v7) + v10;
          if (v12 > 15)
          {
            v13 = v10 - v11;
            if (v13 < -15)
              break;
            *(_BYTE *)(result + v3) = v13;
            v14 = v6;
            while (*(_BYTE *)(v4 + v14))
            {
              *(_BYTE *)(v4 + v14++) = 0;
              if (v14 >= 0xFF)
                goto LABEL_16;
            }
            *(_BYTE *)(v4 + v14) = 1;
          }
          else
          {
            *(_BYTE *)(result + v3) = v12;
            *(_BYTE *)(result + v8) = 0;
          }
        }
LABEL_16:
        if (v7 > 5)
          break;
        ++v7;
        ++v8;
        ++v6;
      }
      while (v7 + v3 < 0x100);
    }
    ++v3;
    ++v5;
  }
  while (v3 != 256);
  return result;
}

uint64_t sub_2341506C0(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  char v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t result;

  v2 = 0;
  v3 = a1[1];
  v4 = (*a1 ^ (v3 >> 4)) & 0xF0F0F0F;
  v5 = ((v4 ^ *a1 ^ ((v4 ^ *a1) << 18)) & 0xCCCC0000 | (((v4 ^ *a1 ^ ((v4 ^ *a1) << 18)) & 0xCCCC0000) >> 18)) ^ v4 ^ *a1;
  v6 = ((v3 ^ (16 * v4) ^ ((v3 ^ (16 * v4)) << 18)) & 0xCCCC0000 | (((v3 ^ (16 * v4) ^ ((v3 ^ (16 * v4)) << 18)) & 0xCCCC0000) >> 18)) ^ v3 ^ (16 * v4);
  v7 = (v5 ^ (v6 >> 1)) & 0x55555555;
  v8 = v7 ^ v5;
  v9 = v6 ^ (2 * v7);
  v10 = (v9 ^ (v8 >> 8)) & 0xFF00FF;
  v11 = v10 ^ v9;
  v12 = v8 ^ (v10 << 8);
  v13 = (v12 ^ (v11 >> 1)) & 0x55555555;
  v14 = v13 ^ v12;
  v15 = (v14 >> 4) & 0xF000000 | (v11 ^ (2 * v13)) & 0xFF00 | ((v11 ^ (2 * v13)) << 16) | ((v11 ^ (2 * v13)) >> 16);
  v16 = (_DWORD *)(a2 + 4);
  do
  {
    if (((0x8103uLL >> v2) & 1) != 0)
      v17 = 1;
    else
      v17 = 2;
    v18 = (v14 & 0xFFFFFFF) >> v17;
    if (((0x8103uLL >> v2) & 1) != 0)
      v19 = 27;
    else
      v19 = 26;
    v20 = v15 >> v17;
    v14 = v18 | (v14 << v19);
    v21 = v20 | (v15 << v19);
    v15 = v21 & 0xFFFFFFF;
    v22 = dword_2342E0D04[((v18 >> 7) & 0x3C | (v18 >> 6)) + 64] | dword_2342E0D04[v18 & 0x3F] | dword_2342E0D04[((v18 >> 14) & 0x30 | (v18 >> 13) & 0xF) + 128] | dword_2342E0D04[((v18 >> 21) & 6 | (v18 >> 20) & 1 | (v14 >> 22) & 0x38) + 192];
    v23 = dword_2342E0D04[((v20 >> 8) & 0x3C | (v20 >> 7) & 3) + 320] | dword_2342E0D04[(v20 & 0x3F) + 256] | dword_2342E0D04[((v20 >> 15) & 0x3F) + 384] | dword_2342E0D04[((v21 >> 22) & 0x30 | (v20 >> 21) & 0xF) + 448];
    HIDWORD(v24) = v23 << 16;
    LODWORD(v24) = v23 << 16;
    v25 = (v24 >> 30) | (4 * (unsigned __int16)v22);
    result = v23 & 0x3FF0000 | HIWORD(v22);
    HIDWORD(v24) = v23 & 0x3FF0000 | HIWORD(v22);
    LODWORD(v24) = v23;
    *(v16 - 1) = v25;
    *v16 = v24 >> 26;
    ++v2;
    v16 += 2;
  }
  while (v2 != 16);
  return result;
}

uint64_t sub_234150864(uint64_t result)
{
  uint64_t i;

  for (i = 0; i != 8; ++i)
    *(_BYTE *)(result + i) = byte_2342E1504[*(unsigned __int8 *)(result + i)];
  return result;
}

_DWORD *sub_23415088C(int *a1, int *a2, int *a3, int *a4)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  _DWORD *result;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;

  v7 = a1[1];
  v8 = (*a1 ^ (v7 >> 4)) & 0xF0F0F0F;
  v9 = v8 ^ *a1;
  v10 = v7 ^ (16 * v8);
  v11 = (unsigned __int16)v10 ^ HIWORD(v9);
  v12 = v11 ^ v10;
  v13 = v9 ^ (v11 << 16);
  v14 = (v13 ^ (v12 >> 2)) & 0x33333333;
  v15 = v14 ^ v13;
  v16 = v12 ^ (4 * v14);
  v17 = (v16 ^ (v15 >> 8)) & 0xFF00FF;
  v18 = v17 ^ v16;
  v19 = v15 ^ (v17 << 8);
  v20 = (v19 ^ (v18 >> 1)) & 0x55555555;
  *a1 = v20 ^ v19;
  a1[1] = v18 ^ (2 * v20);
  sub_234150990(a1, a2, 1);
  sub_234150990(a1, a3, 0);
  result = sub_234150990(a1, a4, 1);
  v22 = a1[1];
  v23 = (*a1 ^ (v22 >> 1)) & 0x55555555;
  v24 = v23 ^ *a1;
  v25 = v22 ^ (2 * v23);
  v26 = (v25 ^ (v24 >> 8)) & 0xFF00FF;
  v27 = v26 ^ v25;
  v28 = v24 ^ (v26 << 8);
  v29 = (v28 ^ (v27 >> 2)) & 0x33333333;
  v30 = v29 ^ v28;
  v31 = v27 ^ (4 * v29);
  v32 = (unsigned __int16)v31 ^ HIWORD(v30);
  v33 = v32 ^ v31;
  v34 = v30 ^ (v32 << 16);
  v35 = (v34 ^ (v33 >> 4)) & 0xF0F0F0F;
  *a1 = v35 ^ v34;
  a1[1] = v33 ^ (16 * v35);
  return result;
}

_DWORD *sub_234150990(_DWORD *result, int *a2, int a3)
{
  int v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unint64_t v98;
  int v99;

  HIDWORD(v4) = *result;
  LODWORD(v4) = *result;
  v3 = v4 >> 29;
  HIDWORD(v4) = result[1];
  LODWORD(v4) = HIDWORD(v4);
  v5 = v4 >> 29;
  if (a3)
  {
    v6 = *a2 ^ v3;
    HIDWORD(v8) = a2[1] ^ v3;
    LODWORD(v8) = HIDWORD(v8);
    v7 = v8 >> 4;
    v9 = dword_2342E1604[v6 >> 2] ^ dword_2342E1604[((unsigned __int16)v6 >> 10) + 128] ^ dword_2342E1604[((v6 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v6 >> 26) + 384] ^ dword_2342E1604[(v7 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v7 >> 10) + 192] ^ dword_2342E1604[((v7 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v7 >> 26) + 448] ^ v5;
    v10 = v9 ^ a2[2];
    HIDWORD(v8) = v9 ^ a2[3];
    LODWORD(v8) = HIDWORD(v8);
    v11 = v8 >> 4;
    v12 = dword_2342E1604[v10 >> 2] ^ dword_2342E1604[((unsigned __int16)v10 >> 10) + 128] ^ dword_2342E1604[((v10 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v10 >> 26) + 384] ^ dword_2342E1604[(v11 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v11 >> 10) + 192] ^ dword_2342E1604[((v11 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v11 >> 26) + 448] ^ v3;
    v13 = v12 ^ a2[4];
    HIDWORD(v8) = v12 ^ a2[5];
    LODWORD(v8) = HIDWORD(v8);
    v14 = v8 >> 4;
    v15 = dword_2342E1604[v13 >> 2] ^ dword_2342E1604[((unsigned __int16)v13 >> 10) + 128] ^ dword_2342E1604[((v13 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v13 >> 26) + 384] ^ dword_2342E1604[(v14 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v14 >> 10) + 192] ^ dword_2342E1604[((v14 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v14 >> 26) + 448] ^ v9;
    v16 = v15 ^ a2[6];
    HIDWORD(v8) = v15 ^ a2[7];
    LODWORD(v8) = HIDWORD(v8);
    v17 = v8 >> 4;
    v18 = dword_2342E1604[v16 >> 2] ^ dword_2342E1604[((unsigned __int16)v16 >> 10) + 128] ^ dword_2342E1604[((v16 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v16 >> 26) + 384] ^ dword_2342E1604[(v17 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v17 >> 10) + 192] ^ dword_2342E1604[((v17 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v17 >> 26) + 448] ^ v12;
    v19 = v18 ^ a2[8];
    HIDWORD(v8) = v18 ^ a2[9];
    LODWORD(v8) = HIDWORD(v8);
    v20 = v8 >> 4;
    v21 = dword_2342E1604[v19 >> 2] ^ dword_2342E1604[((unsigned __int16)v19 >> 10) + 128] ^ dword_2342E1604[((v19 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v19 >> 26) + 384] ^ dword_2342E1604[(v20 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v20 >> 10) + 192] ^ dword_2342E1604[((v20 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v20 >> 26) + 448] ^ v15;
    v22 = v21 ^ a2[10];
    HIDWORD(v8) = v21 ^ a2[11];
    LODWORD(v8) = HIDWORD(v8);
    v23 = v8 >> 4;
    v24 = dword_2342E1604[v22 >> 2] ^ dword_2342E1604[((unsigned __int16)v22 >> 10) + 128] ^ dword_2342E1604[((v22 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v22 >> 26) + 384] ^ dword_2342E1604[(v23 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v23 >> 10) + 192] ^ dword_2342E1604[((v23 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v23 >> 26) + 448] ^ v18;
    v25 = v24 ^ a2[12];
    HIDWORD(v8) = v24 ^ a2[13];
    LODWORD(v8) = HIDWORD(v8);
    v26 = v8 >> 4;
    v27 = dword_2342E1604[v25 >> 2] ^ dword_2342E1604[((unsigned __int16)v25 >> 10) + 128] ^ dword_2342E1604[((v25 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v25 >> 26) + 384] ^ dword_2342E1604[(v26 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v26 >> 10) + 192] ^ dword_2342E1604[((v26 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v26 >> 26) + 448] ^ v21;
    v28 = v27 ^ a2[14];
    HIDWORD(v8) = v27 ^ a2[15];
    LODWORD(v8) = HIDWORD(v8);
    v29 = v8 >> 4;
    v30 = dword_2342E1604[v28 >> 2] ^ dword_2342E1604[((unsigned __int16)v28 >> 10) + 128] ^ dword_2342E1604[((v28 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v28 >> 26) + 384] ^ dword_2342E1604[(v29 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v29 >> 10) + 192] ^ dword_2342E1604[((v29 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v29 >> 26) + 448] ^ v24;
    v31 = v30 ^ a2[16];
    HIDWORD(v8) = v30 ^ a2[17];
    LODWORD(v8) = HIDWORD(v8);
    v32 = v8 >> 4;
    v33 = dword_2342E1604[v31 >> 2] ^ dword_2342E1604[((unsigned __int16)v31 >> 10) + 128] ^ dword_2342E1604[((v31 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v31 >> 26) + 384] ^ dword_2342E1604[(v32 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v32 >> 10) + 192] ^ dword_2342E1604[((v32 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v32 >> 26) + 448] ^ v27;
    v34 = v33 ^ a2[18];
    HIDWORD(v8) = v33 ^ a2[19];
    LODWORD(v8) = HIDWORD(v8);
    v35 = v8 >> 4;
    v36 = dword_2342E1604[v34 >> 2] ^ dword_2342E1604[((unsigned __int16)v34 >> 10) + 128] ^ dword_2342E1604[((v34 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v34 >> 26) + 384] ^ dword_2342E1604[(v35 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v35 >> 10) + 192] ^ dword_2342E1604[((v35 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v35 >> 26) + 448] ^ v30;
    v37 = v36 ^ a2[20];
    HIDWORD(v8) = v36 ^ a2[21];
    LODWORD(v8) = HIDWORD(v8);
    v38 = v8 >> 4;
    v39 = dword_2342E1604[v37 >> 2] ^ dword_2342E1604[((unsigned __int16)v37 >> 10) + 128] ^ dword_2342E1604[((v37 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v37 >> 26) + 384] ^ dword_2342E1604[(v38 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v38 >> 10) + 192] ^ dword_2342E1604[((v38 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v38 >> 26) + 448] ^ v33;
    v40 = v39 ^ a2[22];
    HIDWORD(v8) = v39 ^ a2[23];
    LODWORD(v8) = HIDWORD(v8);
    v41 = v8 >> 4;
    v42 = dword_2342E1604[v40 >> 2] ^ dword_2342E1604[((unsigned __int16)v40 >> 10) + 128] ^ dword_2342E1604[((v40 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v40 >> 26) + 384] ^ dword_2342E1604[(v41 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v41 >> 10) + 192] ^ dword_2342E1604[((v41 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v41 >> 26) + 448] ^ v36;
    v43 = v42 ^ a2[24];
    HIDWORD(v8) = v42 ^ a2[25];
    LODWORD(v8) = HIDWORD(v8);
    v44 = v8 >> 4;
    v45 = dword_2342E1604[v43 >> 2] ^ dword_2342E1604[((unsigned __int16)v43 >> 10) + 128] ^ dword_2342E1604[((v43 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v43 >> 26) + 384] ^ dword_2342E1604[(v44 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v44 >> 10) + 192] ^ dword_2342E1604[((v44 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v44 >> 26) + 448] ^ v39;
    v46 = v45 ^ a2[26];
    HIDWORD(v8) = v45 ^ a2[27];
    LODWORD(v8) = HIDWORD(v8);
    v47 = v8 >> 4;
    v48 = dword_2342E1604[v46 >> 2] ^ dword_2342E1604[((unsigned __int16)v46 >> 10) + 128] ^ dword_2342E1604[((v46 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v46 >> 26) + 384] ^ dword_2342E1604[(v47 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v47 >> 10) + 192] ^ dword_2342E1604[((v47 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v47 >> 26) + 448] ^ v42;
    v49 = v48 ^ a2[28];
    HIDWORD(v8) = v48 ^ a2[29];
    LODWORD(v8) = HIDWORD(v8);
    v50 = dword_2342E1604[v49 >> 2] ^ dword_2342E1604[((unsigned __int16)v49 >> 10) + 128] ^ dword_2342E1604[((v49 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v49 >> 26) + 384] ^ dword_2342E1604[((v8 >> 4) >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)(v8 >> 4) >> 10) + 192] ^ dword_2342E1604[(((v8 >> 4) >> 18) & 0x3F) + 320] ^ dword_2342E1604[((v8 >> 4) >> 26) + 448] ^ v45;
    v51 = a2[30];
    v52 = a2[31];
  }
  else
  {
    v53 = a2[30] ^ v3;
    HIDWORD(v55) = a2[31] ^ v3;
    LODWORD(v55) = HIDWORD(v55);
    v54 = v55 >> 4;
    v56 = dword_2342E1604[v53 >> 2] ^ dword_2342E1604[((unsigned __int16)v53 >> 10) + 128] ^ dword_2342E1604[((v53 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v53 >> 26) + 384] ^ dword_2342E1604[(v54 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v54 >> 10) + 192] ^ dword_2342E1604[((v54 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v54 >> 26) + 448] ^ v5;
    v57 = v56 ^ a2[28];
    HIDWORD(v55) = v56 ^ a2[29];
    LODWORD(v55) = HIDWORD(v55);
    v58 = v55 >> 4;
    v59 = dword_2342E1604[v57 >> 2] ^ dword_2342E1604[((unsigned __int16)v57 >> 10) + 128] ^ dword_2342E1604[((v57 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v57 >> 26) + 384] ^ dword_2342E1604[(v58 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v58 >> 10) + 192] ^ dword_2342E1604[((v58 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v58 >> 26) + 448] ^ v3;
    v60 = v59 ^ a2[26];
    HIDWORD(v55) = v59 ^ a2[27];
    LODWORD(v55) = HIDWORD(v55);
    v61 = v55 >> 4;
    v62 = dword_2342E1604[v60 >> 2] ^ dword_2342E1604[((unsigned __int16)v60 >> 10) + 128] ^ dword_2342E1604[((v60 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v60 >> 26) + 384] ^ dword_2342E1604[(v61 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v61 >> 10) + 192] ^ dword_2342E1604[((v61 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v61 >> 26) + 448] ^ v56;
    v63 = v62 ^ a2[24];
    HIDWORD(v55) = v62 ^ a2[25];
    LODWORD(v55) = HIDWORD(v55);
    v64 = v55 >> 4;
    v65 = dword_2342E1604[v63 >> 2] ^ dword_2342E1604[((unsigned __int16)v63 >> 10) + 128] ^ dword_2342E1604[((v63 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v63 >> 26) + 384] ^ dword_2342E1604[(v64 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v64 >> 10) + 192] ^ dword_2342E1604[((v64 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v64 >> 26) + 448] ^ v59;
    v66 = v65 ^ a2[22];
    HIDWORD(v55) = v65 ^ a2[23];
    LODWORD(v55) = HIDWORD(v55);
    v67 = v55 >> 4;
    v68 = dword_2342E1604[v66 >> 2] ^ dword_2342E1604[((unsigned __int16)v66 >> 10) + 128] ^ dword_2342E1604[((v66 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v66 >> 26) + 384] ^ dword_2342E1604[(v67 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v67 >> 10) + 192] ^ dword_2342E1604[((v67 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v67 >> 26) + 448] ^ v62;
    v69 = v68 ^ a2[20];
    HIDWORD(v55) = v68 ^ a2[21];
    LODWORD(v55) = HIDWORD(v55);
    v70 = v55 >> 4;
    v71 = dword_2342E1604[v69 >> 2] ^ dword_2342E1604[((unsigned __int16)v69 >> 10) + 128] ^ dword_2342E1604[((v69 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v69 >> 26) + 384] ^ dword_2342E1604[(v70 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v70 >> 10) + 192] ^ dword_2342E1604[((v70 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v70 >> 26) + 448] ^ v65;
    v72 = v71 ^ a2[18];
    HIDWORD(v55) = v71 ^ a2[19];
    LODWORD(v55) = HIDWORD(v55);
    v73 = v55 >> 4;
    v74 = dword_2342E1604[v72 >> 2] ^ dword_2342E1604[((unsigned __int16)v72 >> 10) + 128] ^ dword_2342E1604[((v72 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v72 >> 26) + 384] ^ dword_2342E1604[(v73 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v73 >> 10) + 192] ^ dword_2342E1604[((v73 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v73 >> 26) + 448] ^ v68;
    v75 = v74 ^ a2[16];
    HIDWORD(v55) = v74 ^ a2[17];
    LODWORD(v55) = HIDWORD(v55);
    v76 = v55 >> 4;
    v77 = dword_2342E1604[v75 >> 2] ^ dword_2342E1604[((unsigned __int16)v75 >> 10) + 128] ^ dword_2342E1604[((v75 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v75 >> 26) + 384] ^ dword_2342E1604[(v76 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v76 >> 10) + 192] ^ dword_2342E1604[((v76 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v76 >> 26) + 448] ^ v71;
    v78 = v77 ^ a2[14];
    HIDWORD(v55) = v77 ^ a2[15];
    LODWORD(v55) = HIDWORD(v55);
    v79 = v55 >> 4;
    v80 = dword_2342E1604[v78 >> 2] ^ dword_2342E1604[((unsigned __int16)v78 >> 10) + 128] ^ dword_2342E1604[((v78 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v78 >> 26) + 384] ^ dword_2342E1604[(v79 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v79 >> 10) + 192] ^ dword_2342E1604[((v79 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v79 >> 26) + 448] ^ v74;
    v81 = v80 ^ a2[12];
    HIDWORD(v55) = v80 ^ a2[13];
    LODWORD(v55) = HIDWORD(v55);
    v82 = v55 >> 4;
    v83 = dword_2342E1604[v81 >> 2] ^ dword_2342E1604[((unsigned __int16)v81 >> 10) + 128] ^ dword_2342E1604[((v81 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v81 >> 26) + 384] ^ dword_2342E1604[(v82 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v82 >> 10) + 192] ^ dword_2342E1604[((v82 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v82 >> 26) + 448] ^ v77;
    v84 = v83 ^ a2[10];
    HIDWORD(v55) = v83 ^ a2[11];
    LODWORD(v55) = HIDWORD(v55);
    v85 = v55 >> 4;
    v86 = dword_2342E1604[v84 >> 2] ^ dword_2342E1604[((unsigned __int16)v84 >> 10) + 128] ^ dword_2342E1604[((v84 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v84 >> 26) + 384] ^ dword_2342E1604[(v85 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v85 >> 10) + 192] ^ dword_2342E1604[((v85 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v85 >> 26) + 448] ^ v80;
    v87 = v86 ^ a2[8];
    HIDWORD(v55) = v86 ^ a2[9];
    LODWORD(v55) = HIDWORD(v55);
    v88 = v55 >> 4;
    v89 = dword_2342E1604[v87 >> 2] ^ dword_2342E1604[((unsigned __int16)v87 >> 10) + 128] ^ dword_2342E1604[((v87 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v87 >> 26) + 384] ^ dword_2342E1604[(v88 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v88 >> 10) + 192] ^ dword_2342E1604[((v88 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v88 >> 26) + 448] ^ v83;
    v90 = v89 ^ a2[6];
    HIDWORD(v55) = v89 ^ a2[7];
    LODWORD(v55) = HIDWORD(v55);
    v91 = v55 >> 4;
    v92 = dword_2342E1604[v90 >> 2] ^ dword_2342E1604[((unsigned __int16)v90 >> 10) + 128] ^ dword_2342E1604[((v90 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v90 >> 26) + 384] ^ dword_2342E1604[(v91 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v91 >> 10) + 192] ^ dword_2342E1604[((v91 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v91 >> 26) + 448] ^ v86;
    v93 = v92 ^ a2[4];
    HIDWORD(v55) = v92 ^ a2[5];
    LODWORD(v55) = HIDWORD(v55);
    v94 = v55 >> 4;
    v48 = dword_2342E1604[v93 >> 2] ^ dword_2342E1604[((unsigned __int16)v93 >> 10) + 128] ^ dword_2342E1604[((v93 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v93 >> 26) + 384] ^ dword_2342E1604[(v94 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v94 >> 10) + 192] ^ dword_2342E1604[((v94 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v94 >> 26) + 448] ^ v89;
    v95 = v48 ^ a2[2];
    HIDWORD(v55) = v48 ^ a2[3];
    LODWORD(v55) = HIDWORD(v55);
    v50 = dword_2342E1604[v95 >> 2] ^ dword_2342E1604[((unsigned __int16)v95 >> 10) + 128] ^ dword_2342E1604[((v95 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v95 >> 26) + 384] ^ dword_2342E1604[((v55 >> 4) >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)(v55 >> 4) >> 10) + 192] ^ dword_2342E1604[(((v55 >> 4) >> 18) & 0x3F) + 320] ^ dword_2342E1604[((v55 >> 4) >> 26) + 448] ^ v92;
    v51 = *a2;
    v52 = a2[1];
  }
  v96 = v50 ^ v51;
  HIDWORD(v98) = v50 ^ v52;
  LODWORD(v98) = v50 ^ v52;
  v97 = v98 >> 4;
  HIDWORD(v98) = v50;
  LODWORD(v98) = v50;
  v99 = v98 >> 3;
  HIDWORD(v98) = dword_2342E1604[v96 >> 2] ^ dword_2342E1604[((unsigned __int16)v96 >> 10) + 128] ^ dword_2342E1604[((v96 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v96 >> 26) + 384] ^ dword_2342E1604[(v97 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v97 >> 10) + 192] ^ dword_2342E1604[((v97 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v97 >> 26) + 448] ^ v48;
  LODWORD(v98) = HIDWORD(v98);
  *result = v99;
  result[1] = v98 >> 3;
  return result;
}

_DWORD *sub_2341517AC(int *a1, int *a2, int *a3, int *a4)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  _DWORD *result;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;

  v7 = a1[1];
  v8 = (*a1 ^ (v7 >> 4)) & 0xF0F0F0F;
  v9 = v8 ^ *a1;
  v10 = v7 ^ (16 * v8);
  v11 = (unsigned __int16)v10 ^ HIWORD(v9);
  v12 = v11 ^ v10;
  v13 = v9 ^ (v11 << 16);
  v14 = (v13 ^ (v12 >> 2)) & 0x33333333;
  v15 = v14 ^ v13;
  v16 = v12 ^ (4 * v14);
  v17 = (v16 ^ (v15 >> 8)) & 0xFF00FF;
  v18 = v17 ^ v16;
  v19 = v15 ^ (v17 << 8);
  v20 = (v19 ^ (v18 >> 1)) & 0x55555555;
  *a1 = v20 ^ v19;
  a1[1] = v18 ^ (2 * v20);
  sub_234150990(a1, a4, 0);
  sub_234150990(a1, a3, 1);
  result = sub_234150990(a1, a2, 0);
  v22 = a1[1];
  v23 = (*a1 ^ (v22 >> 1)) & 0x55555555;
  v24 = v23 ^ *a1;
  v25 = v22 ^ (2 * v23);
  v26 = (v25 ^ (v24 >> 8)) & 0xFF00FF;
  v27 = v26 ^ v25;
  v28 = v24 ^ (v26 << 8);
  v29 = (v28 ^ (v27 >> 2)) & 0x33333333;
  v30 = v29 ^ v28;
  v31 = v27 ^ (4 * v29);
  v32 = (unsigned __int16)v31 ^ HIWORD(v30);
  v33 = v32 ^ v31;
  v34 = v30 ^ (v32 << 16);
  v35 = (v34 ^ (v33 >> 4)) & 0xF0F0F0F;
  *a1 = v35 ^ v34;
  a1[1] = v33 ^ (16 * v35);
  return result;
}

double sub_2341518B8(_QWORD *a1, _QWORD *a2, int *a3, int a4)
{
  double result;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v6[0] = *a1;
  sub_234151928((int *)v6, a3, a4);
  result = *(double *)v6;
  *a2 = v6[0];
  return result;
}

int *sub_234151928(int *result, int *a2, int a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  int v125;

  v3 = result[1];
  v4 = (*result ^ (v3 >> 4)) & 0xF0F0F0F;
  v5 = v4 ^ *result;
  v6 = v3 ^ (16 * v4);
  v7 = (unsigned __int16)v6 ^ HIWORD(v5);
  v8 = v7 ^ v6;
  v9 = v5 ^ (v7 << 16);
  v10 = (v9 ^ (v8 >> 2)) & 0x33333333;
  v11 = v10 ^ v9;
  v12 = v8 ^ (4 * v10);
  v13 = (v12 ^ (v11 >> 8)) & 0xFF00FF;
  v14 = v13 ^ v12;
  v15 = v11 ^ (v13 << 8);
  v16 = (v15 ^ (v14 >> 1)) & 0x55555555;
  HIDWORD(v18) = v16 ^ v15;
  LODWORD(v18) = v16 ^ v15;
  v17 = v18 >> 29;
  HIDWORD(v18) = v14 ^ (2 * v16);
  LODWORD(v18) = HIDWORD(v18);
  v19 = v18 >> 29;
  if (a3)
  {
    v20 = *a2 ^ v17;
    HIDWORD(v22) = a2[1] ^ v17;
    LODWORD(v22) = HIDWORD(v22);
    v21 = v22 >> 4;
    v23 = dword_2342E1604[v20 >> 2] ^ dword_2342E1604[((unsigned __int16)v20 >> 10) + 128] ^ dword_2342E1604[((v20 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v20 >> 26) + 384] ^ dword_2342E1604[(v21 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v21 >> 10) + 192] ^ dword_2342E1604[((v21 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v21 >> 26) + 448] ^ v19;
    v24 = v23 ^ a2[2];
    HIDWORD(v22) = v23 ^ a2[3];
    LODWORD(v22) = HIDWORD(v22);
    v25 = v22 >> 4;
    v26 = dword_2342E1604[v24 >> 2] ^ dword_2342E1604[((unsigned __int16)v24 >> 10) + 128] ^ dword_2342E1604[((v24 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v24 >> 26) + 384] ^ dword_2342E1604[(v25 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v25 >> 10) + 192] ^ dword_2342E1604[((v25 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v25 >> 26) + 448] ^ v17;
    v27 = v26 ^ a2[4];
    HIDWORD(v22) = v26 ^ a2[5];
    LODWORD(v22) = HIDWORD(v22);
    v28 = v22 >> 4;
    v29 = dword_2342E1604[v27 >> 2] ^ dword_2342E1604[((unsigned __int16)v27 >> 10) + 128] ^ dword_2342E1604[((v27 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v27 >> 26) + 384] ^ dword_2342E1604[(v28 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v28 >> 10) + 192] ^ dword_2342E1604[((v28 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v28 >> 26) + 448] ^ v23;
    v30 = v29 ^ a2[6];
    HIDWORD(v22) = v29 ^ a2[7];
    LODWORD(v22) = HIDWORD(v22);
    v31 = v22 >> 4;
    v32 = dword_2342E1604[v30 >> 2] ^ dword_2342E1604[((unsigned __int16)v30 >> 10) + 128] ^ dword_2342E1604[((v30 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v30 >> 26) + 384] ^ dword_2342E1604[(v31 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v31 >> 10) + 192] ^ dword_2342E1604[((v31 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v31 >> 26) + 448] ^ v26;
    v33 = v32 ^ a2[8];
    HIDWORD(v22) = v32 ^ a2[9];
    LODWORD(v22) = HIDWORD(v22);
    v34 = v22 >> 4;
    v35 = dword_2342E1604[v33 >> 2] ^ dword_2342E1604[((unsigned __int16)v33 >> 10) + 128] ^ dword_2342E1604[((v33 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v33 >> 26) + 384] ^ dword_2342E1604[(v34 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v34 >> 10) + 192] ^ dword_2342E1604[((v34 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v34 >> 26) + 448] ^ v29;
    v36 = v35 ^ a2[10];
    HIDWORD(v22) = v35 ^ a2[11];
    LODWORD(v22) = HIDWORD(v22);
    v37 = v22 >> 4;
    v38 = dword_2342E1604[v36 >> 2] ^ dword_2342E1604[((unsigned __int16)v36 >> 10) + 128] ^ dword_2342E1604[((v36 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v36 >> 26) + 384] ^ dword_2342E1604[(v37 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v37 >> 10) + 192] ^ dword_2342E1604[((v37 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v37 >> 26) + 448] ^ v32;
    v39 = v38 ^ a2[12];
    HIDWORD(v22) = v38 ^ a2[13];
    LODWORD(v22) = HIDWORD(v22);
    v40 = v22 >> 4;
    v41 = dword_2342E1604[v39 >> 2] ^ dword_2342E1604[((unsigned __int16)v39 >> 10) + 128] ^ dword_2342E1604[((v39 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v39 >> 26) + 384] ^ dword_2342E1604[(v40 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v40 >> 10) + 192] ^ dword_2342E1604[((v40 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v40 >> 26) + 448] ^ v35;
    v42 = v41 ^ a2[14];
    HIDWORD(v22) = v41 ^ a2[15];
    LODWORD(v22) = HIDWORD(v22);
    v43 = v22 >> 4;
    v44 = dword_2342E1604[v42 >> 2] ^ dword_2342E1604[((unsigned __int16)v42 >> 10) + 128] ^ dword_2342E1604[((v42 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v42 >> 26) + 384] ^ dword_2342E1604[(v43 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v43 >> 10) + 192] ^ dword_2342E1604[((v43 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v43 >> 26) + 448] ^ v38;
    v45 = v44 ^ a2[16];
    HIDWORD(v22) = v44 ^ a2[17];
    LODWORD(v22) = HIDWORD(v22);
    v46 = v22 >> 4;
    v47 = dword_2342E1604[v45 >> 2] ^ dword_2342E1604[((unsigned __int16)v45 >> 10) + 128] ^ dword_2342E1604[((v45 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v45 >> 26) + 384] ^ dword_2342E1604[(v46 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v46 >> 10) + 192] ^ dword_2342E1604[((v46 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v46 >> 26) + 448] ^ v41;
    v48 = v47 ^ a2[18];
    HIDWORD(v22) = v47 ^ a2[19];
    LODWORD(v22) = HIDWORD(v22);
    v49 = v22 >> 4;
    v50 = dword_2342E1604[v48 >> 2] ^ dword_2342E1604[((unsigned __int16)v48 >> 10) + 128] ^ dword_2342E1604[((v48 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v48 >> 26) + 384] ^ dword_2342E1604[(v49 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v49 >> 10) + 192] ^ dword_2342E1604[((v49 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v49 >> 26) + 448] ^ v44;
    v51 = v50 ^ a2[20];
    HIDWORD(v22) = v50 ^ a2[21];
    LODWORD(v22) = HIDWORD(v22);
    v52 = v22 >> 4;
    v53 = dword_2342E1604[v51 >> 2] ^ dword_2342E1604[((unsigned __int16)v51 >> 10) + 128] ^ dword_2342E1604[((v51 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v51 >> 26) + 384] ^ dword_2342E1604[(v52 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v52 >> 10) + 192] ^ dword_2342E1604[((v52 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v52 >> 26) + 448] ^ v47;
    v54 = v53 ^ a2[22];
    HIDWORD(v22) = v53 ^ a2[23];
    LODWORD(v22) = HIDWORD(v22);
    v55 = v22 >> 4;
    v56 = dword_2342E1604[v54 >> 2] ^ dword_2342E1604[((unsigned __int16)v54 >> 10) + 128] ^ dword_2342E1604[((v54 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v54 >> 26) + 384] ^ dword_2342E1604[(v55 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v55 >> 10) + 192] ^ dword_2342E1604[((v55 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v55 >> 26) + 448] ^ v50;
    v57 = v56 ^ a2[24];
    HIDWORD(v22) = v56 ^ a2[25];
    LODWORD(v22) = HIDWORD(v22);
    v58 = v22 >> 4;
    v59 = dword_2342E1604[v57 >> 2] ^ dword_2342E1604[((unsigned __int16)v57 >> 10) + 128] ^ dword_2342E1604[((v57 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v57 >> 26) + 384] ^ dword_2342E1604[(v58 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v58 >> 10) + 192] ^ dword_2342E1604[((v58 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v58 >> 26) + 448] ^ v53;
    v60 = v59 ^ a2[26];
    HIDWORD(v22) = v59 ^ a2[27];
    LODWORD(v22) = HIDWORD(v22);
    v61 = v22 >> 4;
    v62 = dword_2342E1604[v60 >> 2] ^ dword_2342E1604[((unsigned __int16)v60 >> 10) + 128] ^ dword_2342E1604[((v60 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v60 >> 26) + 384] ^ dword_2342E1604[(v61 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v61 >> 10) + 192] ^ dword_2342E1604[((v61 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v61 >> 26) + 448] ^ v56;
    v63 = v62 ^ a2[28];
    HIDWORD(v22) = v62 ^ a2[29];
    LODWORD(v22) = HIDWORD(v22);
    v64 = dword_2342E1604[v63 >> 2] ^ dword_2342E1604[((unsigned __int16)v63 >> 10) + 128] ^ dword_2342E1604[((v63 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v63 >> 26) + 384] ^ dword_2342E1604[((v22 >> 4) >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)(v22 >> 4) >> 10) + 192] ^ dword_2342E1604[(((v22 >> 4) >> 18) & 0x3F) + 320] ^ dword_2342E1604[((v22 >> 4) >> 26) + 448] ^ v59;
    v65 = a2[30];
    v66 = a2[31];
  }
  else
  {
    v67 = a2[30] ^ v17;
    HIDWORD(v69) = a2[31] ^ v17;
    LODWORD(v69) = HIDWORD(v69);
    v68 = v69 >> 4;
    v70 = dword_2342E1604[v67 >> 2] ^ dword_2342E1604[((unsigned __int16)v67 >> 10) + 128] ^ dword_2342E1604[((v67 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v67 >> 26) + 384] ^ dword_2342E1604[(v68 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v68 >> 10) + 192] ^ dword_2342E1604[((v68 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v68 >> 26) + 448] ^ v19;
    v71 = v70 ^ a2[28];
    HIDWORD(v69) = v70 ^ a2[29];
    LODWORD(v69) = HIDWORD(v69);
    v72 = v69 >> 4;
    v73 = dword_2342E1604[v71 >> 2] ^ dword_2342E1604[((unsigned __int16)v71 >> 10) + 128] ^ dword_2342E1604[((v71 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v71 >> 26) + 384] ^ dword_2342E1604[(v72 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v72 >> 10) + 192] ^ dword_2342E1604[((v72 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v72 >> 26) + 448] ^ v17;
    v74 = v73 ^ a2[26];
    HIDWORD(v69) = v73 ^ a2[27];
    LODWORD(v69) = HIDWORD(v69);
    v75 = v69 >> 4;
    v76 = dword_2342E1604[v74 >> 2] ^ dword_2342E1604[((unsigned __int16)v74 >> 10) + 128] ^ dword_2342E1604[((v74 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v74 >> 26) + 384] ^ dword_2342E1604[(v75 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v75 >> 10) + 192] ^ dword_2342E1604[((v75 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v75 >> 26) + 448] ^ v70;
    v77 = v76 ^ a2[24];
    HIDWORD(v69) = v76 ^ a2[25];
    LODWORD(v69) = HIDWORD(v69);
    v78 = v69 >> 4;
    v79 = dword_2342E1604[v77 >> 2] ^ dword_2342E1604[((unsigned __int16)v77 >> 10) + 128] ^ dword_2342E1604[((v77 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v77 >> 26) + 384] ^ dword_2342E1604[(v78 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v78 >> 10) + 192] ^ dword_2342E1604[((v78 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v78 >> 26) + 448] ^ v73;
    v80 = v79 ^ a2[22];
    HIDWORD(v69) = v79 ^ a2[23];
    LODWORD(v69) = HIDWORD(v69);
    v81 = v69 >> 4;
    v82 = dword_2342E1604[v80 >> 2] ^ dword_2342E1604[((unsigned __int16)v80 >> 10) + 128] ^ dword_2342E1604[((v80 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v80 >> 26) + 384] ^ dword_2342E1604[(v81 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v81 >> 10) + 192] ^ dword_2342E1604[((v81 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v81 >> 26) + 448] ^ v76;
    v83 = v82 ^ a2[20];
    HIDWORD(v69) = v82 ^ a2[21];
    LODWORD(v69) = HIDWORD(v69);
    v84 = v69 >> 4;
    v85 = dword_2342E1604[v83 >> 2] ^ dword_2342E1604[((unsigned __int16)v83 >> 10) + 128] ^ dword_2342E1604[((v83 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v83 >> 26) + 384] ^ dword_2342E1604[(v84 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v84 >> 10) + 192] ^ dword_2342E1604[((v84 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v84 >> 26) + 448] ^ v79;
    v86 = v85 ^ a2[18];
    HIDWORD(v69) = v85 ^ a2[19];
    LODWORD(v69) = HIDWORD(v69);
    v87 = v69 >> 4;
    v88 = dword_2342E1604[v86 >> 2] ^ dword_2342E1604[((unsigned __int16)v86 >> 10) + 128] ^ dword_2342E1604[((v86 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v86 >> 26) + 384] ^ dword_2342E1604[(v87 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v87 >> 10) + 192] ^ dword_2342E1604[((v87 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v87 >> 26) + 448] ^ v82;
    v89 = v88 ^ a2[16];
    HIDWORD(v69) = v88 ^ a2[17];
    LODWORD(v69) = HIDWORD(v69);
    v90 = v69 >> 4;
    v91 = dword_2342E1604[v89 >> 2] ^ dword_2342E1604[((unsigned __int16)v89 >> 10) + 128] ^ dword_2342E1604[((v89 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v89 >> 26) + 384] ^ dword_2342E1604[(v90 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v90 >> 10) + 192] ^ dword_2342E1604[((v90 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v90 >> 26) + 448] ^ v85;
    v92 = v91 ^ a2[14];
    HIDWORD(v69) = v91 ^ a2[15];
    LODWORD(v69) = HIDWORD(v69);
    v93 = v69 >> 4;
    v94 = dword_2342E1604[v92 >> 2] ^ dword_2342E1604[((unsigned __int16)v92 >> 10) + 128] ^ dword_2342E1604[((v92 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v92 >> 26) + 384] ^ dword_2342E1604[(v93 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v93 >> 10) + 192] ^ dword_2342E1604[((v93 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v93 >> 26) + 448] ^ v88;
    v95 = v94 ^ a2[12];
    HIDWORD(v69) = v94 ^ a2[13];
    LODWORD(v69) = HIDWORD(v69);
    v96 = v69 >> 4;
    v97 = dword_2342E1604[v95 >> 2] ^ dword_2342E1604[((unsigned __int16)v95 >> 10) + 128] ^ dword_2342E1604[((v95 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v95 >> 26) + 384] ^ dword_2342E1604[(v96 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v96 >> 10) + 192] ^ dword_2342E1604[((v96 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v96 >> 26) + 448] ^ v91;
    v98 = v97 ^ a2[10];
    HIDWORD(v69) = v97 ^ a2[11];
    LODWORD(v69) = HIDWORD(v69);
    v99 = v69 >> 4;
    v100 = dword_2342E1604[v98 >> 2] ^ dword_2342E1604[((unsigned __int16)v98 >> 10) + 128] ^ dword_2342E1604[((v98 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v98 >> 26) + 384] ^ dword_2342E1604[(v99 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v99 >> 10) + 192] ^ dword_2342E1604[((v99 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v99 >> 26) + 448] ^ v94;
    v101 = v100 ^ a2[8];
    HIDWORD(v69) = v100 ^ a2[9];
    LODWORD(v69) = HIDWORD(v69);
    v102 = v69 >> 4;
    v103 = dword_2342E1604[v101 >> 2] ^ dword_2342E1604[((unsigned __int16)v101 >> 10) + 128] ^ dword_2342E1604[((v101 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v101 >> 26) + 384] ^ dword_2342E1604[(v102 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v102 >> 10) + 192] ^ dword_2342E1604[((v102 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v102 >> 26) + 448] ^ v97;
    v104 = v103 ^ a2[6];
    HIDWORD(v69) = v103 ^ a2[7];
    LODWORD(v69) = HIDWORD(v69);
    v105 = v69 >> 4;
    v106 = dword_2342E1604[v104 >> 2] ^ dword_2342E1604[((unsigned __int16)v104 >> 10) + 128] ^ dword_2342E1604[((v104 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v104 >> 26) + 384] ^ dword_2342E1604[(v105 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v105 >> 10) + 192] ^ dword_2342E1604[((v105 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v105 >> 26) + 448] ^ v100;
    v107 = v106 ^ a2[4];
    HIDWORD(v69) = v106 ^ a2[5];
    LODWORD(v69) = HIDWORD(v69);
    v108 = v69 >> 4;
    v62 = dword_2342E1604[v107 >> 2] ^ dword_2342E1604[((unsigned __int16)v107 >> 10) + 128] ^ dword_2342E1604[((v107 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v107 >> 26) + 384] ^ dword_2342E1604[(v108 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v108 >> 10) + 192] ^ dword_2342E1604[((v108 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v108 >> 26) + 448] ^ v103;
    v109 = v62 ^ a2[2];
    HIDWORD(v69) = v62 ^ a2[3];
    LODWORD(v69) = HIDWORD(v69);
    v64 = dword_2342E1604[v109 >> 2] ^ dword_2342E1604[((unsigned __int16)v109 >> 10) + 128] ^ dword_2342E1604[((v109 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v109 >> 26) + 384] ^ dword_2342E1604[((v69 >> 4) >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)(v69 >> 4) >> 10) + 192] ^ dword_2342E1604[(((v69 >> 4) >> 18) & 0x3F) + 320] ^ dword_2342E1604[((v69 >> 4) >> 26) + 448] ^ v106;
    v65 = *a2;
    v66 = a2[1];
  }
  v110 = v64 ^ v65;
  HIDWORD(v112) = v64 ^ v66;
  LODWORD(v112) = v64 ^ v66;
  v111 = v112 >> 4;
  HIDWORD(v112) = dword_2342E1604[v110 >> 2] ^ dword_2342E1604[((unsigned __int16)v110 >> 10) + 128] ^ dword_2342E1604[((v110 >> 18) & 0x3F) + 256] ^ dword_2342E1604[(v110 >> 26) + 384] ^ dword_2342E1604[(v111 >> 2) + 64] ^ dword_2342E1604[((unsigned __int16)v111 >> 10) + 192] ^ dword_2342E1604[((v111 >> 18) & 0x3F) + 320] ^ dword_2342E1604[(v111 >> 26) + 448] ^ v62;
  LODWORD(v112) = HIDWORD(v112);
  v113 = (((v112 >> 3) >> 1) ^ __ROR4__(v64, 3)) & 0x55555555;
  v114 = v113 ^ __ROR4__(v64, 3);
  v115 = (2 * v113) ^ __ROR4__(HIDWORD(v112), 3);
  v116 = (v115 ^ (v114 >> 8)) & 0xFF00FF;
  v117 = v116 ^ v115;
  v118 = v114 ^ (v116 << 8);
  v119 = (v118 ^ (v117 >> 2)) & 0x33333333;
  v120 = v119 ^ v118;
  v121 = v117 ^ (4 * v119);
  v122 = (unsigned __int16)v121 ^ HIWORD(v120);
  v123 = v122 ^ v121;
  v124 = v120 ^ (v122 << 16);
  v125 = (v124 ^ (v123 >> 4)) & 0xF0F0F0F;
  *result = v125 ^ v124;
  result[1] = v123 ^ (16 * v125);
  return result;
}

int *sub_23415280C(int *result, unsigned int *a2, unint64_t a3, int *a4, uint64_t a5, int a6)
{
  unint64_t v8;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  int *v34;
  __int16 v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;

  v8 = a3;
  v10 = result;
  v44 = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)a5;
  v12 = *(_DWORD *)(a5 + 4);
  if (a6)
  {
    if (a3 >= 8)
    {
      do
      {
        v13 = a2;
        v14 = *v10;
        v15 = v10[1];
        v10 += 2;
        v42 = v14 ^ v11;
        v43 = v15 ^ v12;
        result = sub_234151928((int *)&v42, a4, 1);
        v11 = v42;
        v12 = v43;
        a2 += 2;
        *v13 = v42;
        v13[1] = v12;
        v8 -= 8;
      }
      while (v8 > 7);
    }
    if (v8)
    {
      v16 = 0;
      v17 = (char *)v10 + v8;
      v18 = 0;
      switch(v8)
      {
        case 1uLL:
          goto LABEL_12;
        case 2uLL:
          goto LABEL_11;
        case 3uLL:
          goto LABEL_10;
        case 4uLL:
          goto LABEL_9;
        case 5uLL:
          goto LABEL_8;
        case 6uLL:
          goto LABEL_7;
        case 7uLL:
          v19 = *--v17;
          v16 = v19 << 16;
LABEL_7:
          v20 = *--v17;
          v16 |= v20 << 8;
LABEL_8:
          v21 = *--v17;
          v16 |= v21;
LABEL_9:
          v18 = v16;
          v22 = *--v17;
          v16 = v22 << 24;
LABEL_10:
          v23 = *--v17;
          v16 |= v23 << 16;
LABEL_11:
          v24 = *--v17;
          v16 |= v24 << 8;
LABEL_12:
          v16 |= *(v17 - 1);
          break;
        default:
          v18 = 0;
          break;
      }
      v42 = v16 ^ v11;
      v43 = v18 ^ v12;
      result = sub_234151928((int *)&v42, a4, 1);
      LOBYTE(v11) = v42;
      v12 = v43;
      v25 = v42 >> 8;
      v26 = HIWORD(v42);
      v27 = HIBYTE(v42);
      v28 = v43 >> 8;
      v29 = HIWORD(v43);
      v30 = HIBYTE(v43);
      *a2 = v42;
      a2[1] = v12;
    }
    else
    {
      v25 = v11 >> 8;
      v26 = HIWORD(v11);
      v27 = HIBYTE(v11);
      v28 = v12 >> 8;
      v29 = HIWORD(v12);
      v30 = HIBYTE(v12);
    }
    *(_BYTE *)a5 = v11;
    *(_BYTE *)(a5 + 1) = v25;
    *(_BYTE *)(a5 + 2) = v26;
    *(_BYTE *)(a5 + 3) = v27;
    *(_BYTE *)(a5 + 4) = v12;
    *(_BYTE *)(a5 + 5) = v28;
    *(_BYTE *)(a5 + 6) = v29;
  }
  else
  {
    if (a3 >= 8)
    {
      do
      {
        v31 = a2;
        v32 = v11;
        v33 = v12;
        v11 = *v10;
        v12 = v10[1];
        v34 = v10 + 2;
        v42 = *v10;
        v43 = v12;
        result = sub_234151928((int *)&v42, a4, 0);
        v35 = HIWORD(v42) ^ HIWORD(v32);
        v36 = v43 ^ v33;
        *(_WORD *)v31 = v42 ^ v32;
        *((_WORD *)v31 + 1) = v35;
        v31[1] = v36;
        a2 = v31 + 2;
        v8 -= 8;
        v10 += 2;
      }
      while (v8 > 7);
      v10 = v34;
    }
    if (v8)
    {
      v38 = *v10;
      v37 = v10[1];
      v42 = v38;
      v43 = v37;
      result = sub_234151928((int *)&v42, a4, 0);
      v39 = v42 ^ v11;
      v40 = v43 ^ v12;
      v41 = (char *)a2 + v8;
      switch(v8)
      {
        case 1uLL:
          goto LABEL_25;
        case 2uLL:
          goto LABEL_24;
        case 3uLL:
          goto LABEL_23;
        case 4uLL:
          goto LABEL_22;
        case 5uLL:
          goto LABEL_21;
        case 6uLL:
          goto LABEL_20;
        case 7uLL:
          *--v41 = BYTE2(v40);
LABEL_20:
          *--v41 = BYTE1(v40);
LABEL_21:
          *--v41 = v40;
LABEL_22:
          *--v41 = HIBYTE(v39);
LABEL_23:
          *--v41 = BYTE2(v39);
LABEL_24:
          *--v41 = BYTE1(v39);
LABEL_25:
          *(v41 - 1) = v39;
          break;
        default:
          break;
      }
    }
    else
    {
      v38 = v11;
      v37 = v12;
    }
    *(_DWORD *)a5 = v38;
    *(_WORD *)(a5 + 4) = v37;
    v30 = HIBYTE(v37);
    *(_BYTE *)(a5 + 6) = BYTE2(v37);
  }
  *(_BYTE *)(a5 + 7) = v30;
  return result;
}

double sub_234152B18(_QWORD *a1, _QWORD *a2, int *a3, int *a4, int *a5, int a6)
{
  double result;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v8[0] = *a1;
  if (a6)
    sub_23415088C((int *)v8, a3, a4, a5);
  else
    sub_2341517AC((int *)v8, a3, a4, a5);
  result = *(double *)v8;
  *a2 = v8[0];
  return result;
}

int *sub_234152B9C(int *result, uint64_t a2, unint64_t a3, int *a4, int *a5, int *a6, _DWORD *a7, int a8)
{
  _BYTE *v8;
  int *v9;
  int *v10;
  int *v11;
  unint64_t v12;
  int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int *v39;
  __int16 v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v49;
  int v50;
  uint64_t v51;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v14 = result;
  v51 = *MEMORY[0x24BDAC8D0];
  v16 = *a7;
  v15 = a7[1];
  if (a8)
  {
    if (a3 >= 8)
    {
      do
      {
        v17 = *v14;
        v18 = v14[1];
        v14 += 2;
        v49 = v17 ^ v16;
        v50 = v18 ^ v15;
        result = sub_23415088C((int *)&v49, v11, v10, v9);
        v16 = v49;
        v15 = v50;
        *(_WORD *)a2 = v49;
        *(_BYTE *)(a2 + 2) = BYTE2(v16);
        *(_BYTE *)(a2 + 3) = HIBYTE(v16);
        *(_DWORD *)(a2 + 4) = v15;
        a2 += 8;
        v12 -= 8;
      }
      while (v12 > 7);
    }
    if (v12)
    {
      v19 = 0;
      v20 = (char *)v14 + v12;
      v21 = 0;
      switch(v12)
      {
        case 1uLL:
          goto LABEL_12;
        case 2uLL:
          goto LABEL_11;
        case 3uLL:
          goto LABEL_10;
        case 4uLL:
          goto LABEL_9;
        case 5uLL:
          goto LABEL_8;
        case 6uLL:
          goto LABEL_7;
        case 7uLL:
          v22 = *--v20;
          v19 = v22 << 16;
LABEL_7:
          v23 = *--v20;
          v19 |= v23 << 8;
LABEL_8:
          v24 = *--v20;
          v19 |= v24;
LABEL_9:
          v21 = v19;
          v25 = *--v20;
          v19 = v25 << 24;
LABEL_10:
          v26 = *--v20;
          v19 |= v26 << 16;
LABEL_11:
          v27 = *--v20;
          v19 |= v27 << 8;
LABEL_12:
          v19 |= *(v20 - 1);
          break;
        default:
          v21 = 0;
          break;
      }
      v49 = v19 ^ v16;
      v50 = v21 ^ v15;
      result = sub_23415088C((int *)&v49, v11, v10, v9);
      v16 = v49;
      v15 = v50;
      *(_BYTE *)a2 = v49;
      v28 = v16 >> 8;
      *(_BYTE *)(a2 + 1) = BYTE1(v16);
      v29 = HIWORD(v16);
      *(_BYTE *)(a2 + 2) = BYTE2(v16);
      v30 = HIBYTE(v16);
      *(_BYTE *)(a2 + 3) = HIBYTE(v16);
      *(_DWORD *)(a2 + 4) = v15;
      v31 = v15 >> 8;
      v32 = HIWORD(v15);
      v33 = HIBYTE(v15);
    }
    else
    {
      v28 = v16 >> 8;
      v29 = HIWORD(v16);
      v30 = HIBYTE(v16);
      v31 = v15 >> 8;
      v32 = HIWORD(v15);
      v33 = HIBYTE(v15);
    }
    *v8 = v16;
    v8[1] = v28;
    v8[2] = v29;
    v8[3] = v30;
    v8[4] = v15;
    v8[5] = v31;
    v8[6] = v32;
  }
  else
  {
    if (a3 >= 8)
    {
      do
      {
        v36 = a2;
        v37 = v16;
        v38 = v15;
        v16 = *v14;
        v15 = v14[1];
        v39 = v14 + 2;
        v49 = *v14;
        v50 = v15;
        result = sub_2341517AC((int *)&v49, a4, a5, a6);
        v40 = HIWORD(v49) ^ HIWORD(v37);
        v41 = v50 ^ v38;
        *(_WORD *)v36 = v49 ^ v37;
        *(_WORD *)(v36 + 2) = v40;
        *(_DWORD *)(v36 + 4) = v41;
        a2 = v36 + 8;
        v12 -= 8;
        v14 += 2;
      }
      while (v12 > 7);
      v14 = v39;
      v9 = a6;
      v10 = a5;
      v8 = a7;
      v11 = a4;
    }
    if (v12)
    {
      v43 = *v14;
      v42 = v14[1];
      v49 = v43;
      v50 = v42;
      result = sub_2341517AC((int *)&v49, v11, v10, v9);
      v44 = v49 ^ v16;
      v45 = v50 ^ v15;
      v46 = a2 + v12;
      switch(v12)
      {
        case 1uLL:
          goto LABEL_25;
        case 2uLL:
          goto LABEL_24;
        case 3uLL:
          goto LABEL_23;
        case 4uLL:
          goto LABEL_22;
        case 5uLL:
          goto LABEL_21;
        case 6uLL:
          goto LABEL_20;
        case 7uLL:
          *(_BYTE *)--v46 = BYTE2(v45);
LABEL_20:
          *(_BYTE *)--v46 = BYTE1(v45);
LABEL_21:
          *(_BYTE *)--v46 = v45;
LABEL_22:
          *(_BYTE *)--v46 = HIBYTE(v44);
LABEL_23:
          *(_BYTE *)--v46 = BYTE2(v44);
LABEL_24:
          *(_BYTE *)--v46 = BYTE1(v44);
LABEL_25:
          *(_BYTE *)(v46 - 1) = v44;
          break;
        default:
          break;
      }
    }
    else
    {
      v43 = v16;
      v42 = v15;
    }
    *(_DWORD *)v8 = v43;
    *((_WORD *)v8 + 2) = v42;
    v33 = HIBYTE(v42);
    v8[6] = BYTE2(v42);
  }
  v8[7] = v33;
  return result;
}

int *sub_234152F24(int *a1, uint64_t a2, unint64_t a3, int *a4, int *a5, _DWORD *a6, int a7)
{
  return sub_234152B9C(a1, a2, a3, a4, a5, a4, a6, a7);
}

_QWORD *sub_234152F34(__int128 *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v6;
  __int128 v7;

  v2 = sub_23416FCA4();
  if (v2)
  {
    if ((v7 = 0uLL, !sub_2341493F4(a1, &v7, 536870928))
      || (v3 = sub_234161F88(), (*v2 = v3) == 0)
      || !sub_234146860(&v7, v3)
      || (v4 = sub_234161F88(), (v2[1] = v4) == 0)
      || !sub_234146860(&v7, v4)
      || (v6 = 0, *((_QWORD *)&v7 + 1))
      && (!sub_2341495A8(&v7, &v6) || HIDWORD(v6) || (*((_DWORD *)v2 + 10) = v6, *((_QWORD *)&v7 + 1)))
      || !sub_23416F714(v2))
    {
      sub_2341579B4(5, 0, 104, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dh_extra/dh_asn1.c", 120);
      sub_23416FCE0((uint64_t)v2);
      return 0;
    }
  }
  return v2;
}

uint64_t sub_234153024(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _OWORD v6[3];

  memset(v6, 0, sizeof(v6));
  if (sub_234147F60(a1, (uint64_t)v6, 0x20000010u))
  {
    if (sub_2341530D4((uint64_t *)v6, *(uint64_t **)a2))
    {
      if (sub_2341530D4((uint64_t *)v6, *(uint64_t **)(a2 + 8)))
      {
        v4 = *(unsigned int *)(a2 + 40);
        if (!(_DWORD)v4 || sub_2341484FC((uint64_t)v6, v4))
        {
          if (sub_234147CB0(a1))
            return 1;
        }
      }
    }
  }
  sub_2341579B4(5, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dh_extra/dh_asn1.c", 133);
  return 0;
}

uint64_t sub_2341530D4(uint64_t *a1, uint64_t *a2)
{
  if (a2)
    return sub_234146908(a1, a2);
  sub_2341579B4(5, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dh_extra/dh_asn1.c", 81);
  return 0;
}

_QWORD *sub_234153108(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v7;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_234152F34(&v7);
  if (v5)
  {
    if (a1)
    {
      sub_23416FCE0(*a1);
      *a1 = (uint64_t)v5;
    }
    *a2 = v7;
  }
  return v5;
}

uint64_t sub_234153178(uint64_t a1, void **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147B54((uint64_t)v5, 0) && sub_234153024((uint64_t *)v5, a1))
    return sub_2341475C8((uint64_t)v5, a2);
  sub_234147BE4((uint64_t)v5);
  return 0xFFFFFFFFLL;
}

uint64_t sub_2341531E8(int a1)
{
  uint64_t v1;

  if (!a1)
    return 0;
  v1 = 0;
  while (dword_250506470[v1] != a1)
  {
    v1 += 8;
    if (v1 == 144)
      return 0;
  }
  return (*(uint64_t (**)(void))&dword_250506470[v1 + 2])();
}

uint64_t sub_234153224(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _QWORD v5[2];

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    while (dword_250506470[v2] != v1)
    {
      v2 += 8;
      if (v2 == 144)
        return 0;
    }
    return (*(uint64_t (**)(void))&dword_250506470[v2 + 2])();
  }
  else
  {
    v5[0] = sub_23418EBDC(a1);
    v5[1] = sub_23418EBE8(a1);
    return sub_2341532B0((uint64_t)v5);
  }
}

uint64_t sub_2341532B0(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v5;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  while (v3 != byte_2342E1E04[v2 + 9] || memcmp(*(const void **)a1, &byte_2342E1E04[v2], v3))
  {
    v2 += 16;
    if (v2 == 112)
      return 0;
  }
  v5 = 0;
  while (dword_250506470[v5] != *(_DWORD *)&byte_2342E1E04[v2 + 12])
  {
    v5 += 8;
    if (v5 == 144)
      return 0;
  }
  return (*(uint64_t (**)(void))&dword_250506470[v5 + 2])();
}

uint64_t sub_23415335C(__int128 *a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  __int128 v7;

  v7 = 0uLL;
  v6[0] = 0;
  v6[1] = 0;
  if (!sub_2341493F4(a1, &v7, 536870928) || !sub_2341493F4(&v7, v6, 6))
  {
    v2 = 172;
    goto LABEL_10;
  }
  v1 = sub_2341532B0((uint64_t)v6);
  if (!v1)
  {
    sub_2341579B4(29, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/digest_extra/digest_extra.c", 178);
    return v1;
  }
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = 0;
    v5 = 0;
    if (!sub_2341493F4(&v7, &v4, 5) || v5 || *((_QWORD *)&v7 + 1))
    {
      v2 = 191;
LABEL_10:
      sub_2341579B4(29, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/digest_extra/digest_extra.c", v2);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_23415344C(uint64_t *a1, unsigned int *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  _OWORD v7[3];
  _OWORD v8[3];
  _OWORD v9[3];

  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  result = sub_234147F60(a1, (uint64_t)v9, 0x20000010u);
  if ((_DWORD)result)
  {
    result = sub_234147F60((uint64_t *)v9, (uint64_t)v8, 6u);
    if ((_DWORD)result)
    {
      v5 = sub_2341414B0(a2);
      v6 = 0;
      while (v5 != *(_DWORD *)&byte_2342E1E04[v6 + 12])
      {
        v6 += 16;
        if (v6 == 112)
        {
          sub_2341579B4(29, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/digest_extra/digest_extra.c", 219);
          return 0;
        }
      }
      result = sub_23414817C((uint64_t)v8, &byte_2342E1E04[v6], byte_2342E1E04[v6 + 9]);
      if ((_DWORD)result)
      {
        result = sub_234147F60((uint64_t *)v9, (uint64_t)v7, 5u);
        if ((_DWORD)result)
          return sub_234147CB0(a1) != 0;
      }
    }
  }
  return result;
}

uint64_t sub_23415353C(char *__s2)
{
  uint64_t v2;
  const char *v3;

  v2 = 6u;
  while (1)
  {
    v3 = *(const char **)&dword_250506470[v2];
    if (!strcmp(*(const char **)&dword_250506470[v2 - 2], __s2) || v2 != 94 && !strcmp(v3, __s2))
      break;
    v2 += 8;
    if (v2 == 150)
      return 0;
  }
  return (*(uint64_t (**)(void))&dword_250506470[v2 - 4])();
}

void *sub_2341535C8()
{
  return &unk_2505066B0;
}

double sub_2341535D4(uint64_t a1)
{
  return sub_234146234(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_2341535DC(uint64_t a1, char *a2, unint64_t a3)
{
  return sub_234146288(*(_QWORD **)(a1 + 8), a2, a3);
}

double sub_2341535E4(uint64_t a1, _OWORD *a2)
{
  double result;

  *(_QWORD *)&result = sub_234146754(a2, *(_QWORD *)(a1 + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_2341535F4()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_23418E344(0x110uLL);
  v1 = v0;
  if (v0)
  {
    *((_DWORD *)v0 + 64) = 1;
    sub_234195BFC((pthread_rwlock_t *)(v0 + 5));
    sub_23415F254(v1 + 33);
  }
  return v1;
}

void sub_234153638(uint64_t a1)
{
  if (a1)
  {
    if (sub_234193960((unsigned int *)(a1 + 256)))
    {
      sub_23415F25C((uint64_t)&unk_256157CC0, a1, (unint64_t **)(a1 + 264));
      sub_234162010(*(void **)a1);
      sub_234162010(*(void **)(a1 + 8));
      sub_234162010(*(void **)(a1 + 16));
      sub_234162010(*(void **)(a1 + 24));
      sub_234162010(*(void **)(a1 + 32));
      sub_2341659A4(*(_QWORD ***)(a1 + 240));
      sub_2341659A4(*(_QWORD ***)(a1 + 248));
      j__pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 40));
      sub_23418E3C4((_QWORD *)a1);
    }
  }
}

uint64_t sub_2341536C8(uint64_t a1)
{
  sub_234193914((unsigned int *)(a1 + 256));
  return 1;
}

uint64_t sub_2341536E4(uint64_t **a1)
{
  return sub_2341621D4(*a1);
}

uint64_t sub_2341536EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_2341536F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_2341536FC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_234153704(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_23415370C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)(result + 24);
  if (a3)
    *a3 = *(_QWORD *)(result + 32);
  return result;
}

_QWORD *sub_234153728(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  if (a2)
    *a2 = *result;
  if (a3)
    *a3 = result[1];
  if (a4)
    *a4 = result[2];
  return result;
}

uint64_t sub_234153750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if (!(a2 | v4))
    return 0;
  if (a2)
  {
    sub_234161FC4((_QWORD **)v4);
    *(_QWORD *)(a1 + 24) = a2;
  }
  if (a3)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 32));
    *(_QWORD *)(a1 + 32) = a3;
  }
  return 1;
}

uint64_t sub_2341537B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;

  v5 = *(_QWORD *)a1;
  if (!(a2 | v5) || !(a3 | *(_QWORD *)(a1 + 8)) || !(a4 | *(_QWORD *)(a1 + 16)))
    return 0;
  if (a2)
  {
    sub_234161FC4((_QWORD **)v5);
    *(_QWORD *)a1 = a2;
  }
  if (a3)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) = a3;
  }
  if (a4)
  {
    sub_234161FC4(*(_QWORD ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = a4;
  }
  sub_2341659A4(*(_QWORD ***)(a1 + 240));
  *(_QWORD *)(a1 + 240) = 0;
  sub_2341659A4(*(_QWORD ***)(a1 + 248));
  *(_QWORD *)(a1 + 248) = 0;
  return 1;
}

BOOL sub_234153854(void ***a1, unsigned int a2, _QWORD **a3, unint64_t a4, _DWORD *a5, _QWORD *a6, uint64_t a7)
{
  unsigned int v12;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL8 v18;
  unint64_t **v19;
  unint64_t **v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  unsigned __int8 *v32;
  char *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  __int16 v44;
  uint64_t *v46;
  int v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t *v50;
  int v52;
  void **v53;
  uint64_t v54;
  void ***v55;
  unint64_t *v56;
  _BOOL4 v57;
  int v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t *v63;
  _BYTE v64[32];
  _BYTE v65[32];
  unsigned __int8 v66[32];
  char v67[32];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0x2711)
  {
    v12 = a2;
    if (a2 < 0x800)
      v14 = sub_234170AC4();
    else
      v14 = sub_234170BAC();
    v15 = (uint64_t)v14;
    v16 = sub_2341414B8((uint64_t)v14);
    v17 = v16;
    if (v12 <= 0x200)
      v12 = 512;
    if (a3)
    {
      if (v16 > a4)
        return 0;
      if (v16)
        __memcpy_chk();
    }
    sub_234162D58();
    if (v19)
    {
      v20 = v19;
      v55 = a1;
      sub_234162DC8(v19);
      v21 = sub_234162E68((uint64_t)v20);
      v56 = sub_234162E68((uint64_t)v20);
      v22 = sub_234162E68((uint64_t)v20);
      v63 = sub_234162E68((uint64_t)v20);
      v60 = sub_234162E68((uint64_t)v20);
      v59 = sub_234162E68((uint64_t)v20);
      v61 = sub_234162E68((uint64_t)v20);
      v23 = sub_234162E68((uint64_t)v20);
      if (v23
        && (v62 = a7,
            v24 = (uint64_t)v23,
            v25 = sub_23416210C(),
            v26 = ((v12 + 63) & 0xFFFFFFC0) - 1,
            v54 = v24,
            sub_2341634F4(v24, v25, v26)))
      {
        v27 = 0;
        v28 = v62;
        while (1)
        {
LABEL_17:
          if (!sub_23416A8A4(v28, 0, v27))
            goto LABEL_73;
          v57 = a3 == 0;
          if (!a3 && !sub_23416BE78(v67, v17))
            goto LABEL_73;
          if (v17)
          {
            __memcpy_chk();
            __memcpy_chk();
            v29 = v17;
            do
            {
              v30 = v64[v29 + 31]++ + 1;
              if ((v30 & 0x100) == 0)
                break;
              v31 = v29 - 2;
              --v29;
            }
            while (v31 < v17);
          }
          if (!sub_2341704B4((uint64_t)v67, v17, (uint64_t)v66, 0, v15)
            || !sub_2341704B4((uint64_t)v65, v17, (uint64_t)v64, 0, v15))
          {
            goto LABEL_73;
          }
          if (v17)
          {
            v32 = v66;
            v33 = v64;
            v34 = v17;
            do
            {
              v35 = *v33++;
              *v32++ ^= v35;
              --v34;
            }
            while (v34);
          }
          v66[0] |= 0x80u;
          v66[v17 - 1] |= 1u;
          if (!sub_2341625C8(v66, v17, v63))
            goto LABEL_73;
          v27 = (v27 + 1);
          v36 = v62;
          v37 = sub_23416AE74((uint64_t)v63, 50, (uint64_t)v20, v57, v62);
          if (v37 > 0)
            break;
          v28 = v62;
          a3 = 0;
          if (v37)
            goto LABEL_74;
        }
        if (!sub_23416A8A4(v62, 2, 0) || !sub_23416A8A4(v62, 3, 0))
          goto LABEL_73;
        v38 = 0;
        while (2)
        {
          if (!(_DWORD)v38 || (v39 = v36, v40 = v38, v41 = sub_23416A8A4(v39, 0, v38), LODWORD(v38) = v40, v41))
          {
            v58 = v38;
            sub_23416225C((uint64_t)v22);
            v42 = 0;
            do
            {
              v43 = v17 - 1;
              do
              {
                if (v43 >= v17)
                  break;
                v44 = v65[v43--]++ + 1;
              }
              while ((v44 & 0x100) != 0);
              if (!sub_2341704B4((uint64_t)v65, v17, (uint64_t)v66, 0, v15)
                || !sub_2341625C8(v66, v17, v21)
                || !sub_2341634F4((uint64_t)v21, (uint64_t *)v21, 8 * (int)v17 * v42)
                || !sub_2341614D0((uint64_t)v22, (uint64_t)v22, (uint64_t)v21))
              {
                goto LABEL_73;
              }
            }
            while (v42++ != v26 / 0xA0);
            if (!sub_23416C4AC((uint64_t)v22, v26))
              goto LABEL_73;
            if (!sub_234162060((void **)v60, (uint64_t)v22))
              goto LABEL_73;
            if (!sub_2341614D0((uint64_t)v60, (uint64_t)v60, v54))
              goto LABEL_73;
            if (!sub_2341645A0((uint64_t)v21, (uint64_t *)v63))
              goto LABEL_73;
            if (!sub_234162F7C(0, (uint64_t)v59, (uint64_t)v60, (uint64_t)v21, (uint64_t)v20))
              goto LABEL_73;
            v46 = sub_23416210C();
            if (!sub_234161C30((uint64_t)v21, (uint64_t)v59, (uint64_t)v46)
              || !sub_234161C30((uint64_t)v61, (uint64_t)v60, (uint64_t)v21))
            {
              goto LABEL_73;
            }
            v27 = v27;
            v36 = v62;
            if ((sub_234162A28((uint64_t)v61, v54) & 0x80000000) != 0)
            {
LABEL_56:
              v38 = (v58 + 1);
              if (v58 != 4095)
                continue;
              v28 = v62;
              a3 = 0;
              goto LABEL_17;
            }
            v47 = sub_23416AE74((uint64_t)v61, 50, (uint64_t)v20, 1, v62);
            if (v47 <= 0)
            {
              if (v47)
                goto LABEL_73;
              goto LABEL_56;
            }
            if (!sub_23416A8A4(v62, 2, 1))
              goto LABEL_73;
            v48 = sub_23416210C();
            if (!sub_234161C30(v54, (uint64_t)v61, (uint64_t)v48)
              || !sub_234162F7C(v21, 0, v54, (uint64_t)v63, (uint64_t)v20))
            {
              goto LABEL_73;
            }
            a3 = sub_2341668A4((uint64_t)v61, (uint64_t)v20);
            if (!a3
              || !sub_234161A58(v54, 2)
              || !sub_2341652E0((uint64_t)v56, v54, (uint64_t)v21, (uint64_t)v61, (uint64_t)v20, (uint64_t)a3))
            {
              goto LABEL_74;
            }
            v49 = 2;
            while (sub_234162B4C((unsigned int *)v56))
            {
              v50 = sub_23416210C();
              if (sub_2341614D0(v54, v54, (uint64_t)v50))
              {
                ++v49;
                if (sub_2341652E0((uint64_t)v56, v54, (uint64_t)v21, (uint64_t)v61, (uint64_t)v20, (uint64_t)a3))continue;
              }
              goto LABEL_74;
            }
            v52 = sub_23416A8A4(v62, 3, 1);
            v18 = v52 != 0;
            if (v52)
            {
              sub_234161FC4((_QWORD **)*v55);
              sub_234161FC4((_QWORD **)v55[1]);
              sub_234161FC4((_QWORD **)v55[2]);
              *v55 = sub_234162014((uint64_t)v61);
              v55[1] = sub_234162014((uint64_t)v63);
              v53 = sub_234162014((uint64_t)v56);
              v55[2] = v53;
              if (!*v55)
                goto LABEL_74;
              v18 = 0;
              if (v55[1] && v53)
              {
                if (a5)
                  *a5 = v58;
                if (a6)
                  *a6 = v49;
                v18 = 1;
              }
            }
          }
          else
          {
LABEL_73:
            a3 = 0;
LABEL_74:
            v18 = 0;
          }
          break;
        }
      }
      else
      {
        v18 = 0;
        a3 = 0;
      }
      sub_234162F58((uint64_t)v20);
      sub_234162D80(v20);
    }
    else
    {
      v18 = 0;
      a3 = 0;
    }
    sub_2341659A4(a3);
    return v18;
  }
  sub_2341579B4(10, 0, 107, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa.c", 212);
  return 0;
}

_QWORD *sub_234153F4C(uint64_t *a1)
{
  _QWORD *v2;
  void **v3;

  v2 = sub_2341535F4();
  if (v2)
  {
    *v2 = sub_234162014(*a1);
    v2[1] = sub_234162014(a1[1]);
    v3 = sub_234162014(a1[2]);
    v2[2] = v3;
    if (!*v2 || !v2[1] || !v3)
    {
      sub_234153638((uint64_t)v2);
      return 0;
    }
  }
  return v2;
}

uint64_t sub_234153FBC(uint64_t a1)
{
  unint64_t **v2;
  unint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  if (!sub_234154B6C((uint64_t *)a1))
    return 0;
  sub_234162D58();
  v3 = v2;
  if (v2)
  {
    v4 = *(_QWORD **)(a1 + 32);
    if ((v4 || (v4 = sub_234161F88()) != 0) && sub_234167838((uint64_t)v4, 1uLL, *(_QWORD *)(a1 + 8)))
    {
      v5 = *(_QWORD **)(a1 + 24);
      if ((v5 || (v5 = sub_234161F88()) != 0)
        && sub_234169A50((_QWORD *)(a1 + 240), (pthread_rwlock_t *)(a1 + 40), *(_QWORD *)a1, (uint64_t)v3)
        && sub_234166004((uint64_t)v5, *(_QWORD *)(a1 + 16), (uint64_t)v4, *(_QWORD *)a1, (uint64_t)v3, *(_QWORD *)(a1 + 240)))
      {
        *(_QWORD *)(a1 + 24) = v5;
        *(_QWORD *)(a1 + 32) = v4;
        v6 = 1;
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v4 = 0;
  }
  if (!*(_QWORD *)(a1 + 24))
    sub_234161FC4((_QWORD **)v5);
  if (!*(_QWORD *)(a1 + 32))
    sub_234161FC4((_QWORD **)v4);
  sub_234162D80(v3);
  return v6;
}

_QWORD *sub_2341540D0()
{
  return sub_23418E344(0x10uLL);
}

void sub_2341540D8(_QWORD *a1)
{
  if (a1)
  {
    sub_234161FC4((_QWORD **)*a1);
    sub_234161FC4((_QWORD **)a1[1]);
    sub_23418E3C4(a1);
  }
}

_QWORD *sub_234154110(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *result;
  if (a3)
    *a3 = result[1];
  return result;
}

uint64_t sub_23415412C(_QWORD ***a1, _QWORD **a2, _QWORD **a3)
{
  uint64_t result;

  result = 0;
  if (a2)
  {
    if (a3)
    {
      sub_234161FC4(*a1);
      sub_234161FC4(a1[1]);
      *a1 = a2;
      a1[1] = a3;
      return 1;
    }
  }
  return result;
}

_QWORD *sub_23415417C(unsigned __int8 *a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  unint64_t **v7;
  unint64_t **v8;
  void *v9;
  _QWORD **v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  char v15;
  void *v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  pthread_rwlock_t *v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  unint64_t *v26[3];
  unint64_t *v27[3];
  _QWORD v28[3];

  if (!sub_234154B6C(a3))
    return 0;
  if (!a3[4])
  {
    sub_2341579B4(10, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa.c", 599);
    return 0;
  }
  memset(v27, 0, sizeof(v27));
  memset(v26, 0, sizeof(v26));
  sub_234161FB8(v27);
  sub_234161FB8(v26);
  v6 = sub_234161F88();
  if (!v6)
  {
    v9 = 0;
    v10 = 0;
    v8 = 0;
    goto LABEL_36;
  }
  sub_234162D58();
  v8 = v7;
  v9 = 0;
  v10 = 0;
  if (!v7)
  {
LABEL_36:
    sub_2341579B4(10, 0, 3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa.c", 688);
    sub_234161FC4(v10);
    sub_234161FC4((_QWORD **)v6);
    v20 = 0;
    goto LABEL_37;
  }
  v23 = (pthread_rwlock_t *)(a3 + 5);
  v24 = a1;
  v25 = a3 + 31;
  v11 = 33;
  while (1)
  {
    memset(v28, 0, sizeof(v28));
    sub_234161FB8(v28);
    v12 = sub_234161F88();
    v13 = sub_234161F88();
    v14 = v13;
    if (v12
      && v13
      && sub_234167838((uint64_t)v28, 1uLL, a3[1])
      && sub_234169A50(a3 + 30, v23, *a3, (uint64_t)v8)
      && sub_234169A50(v25, v23, a3[1], (uint64_t)v8)
      && sub_234166004((uint64_t)v12, a3[2], (uint64_t)v28, *a3, (uint64_t)v8, a3[30]))
    {
      if (sub_234162F7C(0, (uint64_t)v12, (uint64_t)v12, a3[1], (uint64_t)v8)
        && sub_2341678A0((uint64_t)v14, (uint64_t)v28, a3[1], (uint64_t)v8, a3[31]))
      {
        sub_234162010(v9);
        sub_234162010(v10);
        v15 = 0;
        v16 = v14;
        v17 = (uint64_t)v12;
        v12 = 0;
        v14 = 0;
        goto LABEL_17;
      }
      v17 = (uint64_t)v10;
      v16 = v9;
      v18 = 935;
    }
    else
    {
      v17 = (uint64_t)v10;
      v16 = v9;
      v18 = 920;
    }
    sub_2341579B4(10, 0, 3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa.c", v18);
    v15 = 1;
LABEL_17:
    sub_234162010(v28);
    sub_234162010(v12);
    sub_234162010(v14);
    if ((v15 & 1) != 0)
    {
      v9 = v16;
LABEL_35:
      v10 = (_QWORD **)v17;
      goto LABEL_36;
    }
    if (a2 > sub_234162240((uint64_t *)a3[1]))
      a2 = sub_234162240((uint64_t *)a3[1]);
    v9 = v16;
    if (!sub_2341625C8(v24, a2, v27))
      goto LABEL_35;
    v19 = (int)sub_234161F54(a3[1]);
    if (!sub_234162474((uint64_t)v27, v19) || !sub_234162474((uint64_t)v26, v19))
      goto LABEL_35;
    sub_2341638CC(v27[0], 0, *(unint64_t **)a3[1], v26[0], v19);
    v10 = (_QWORD **)v17;
    if (!sub_234154548((uint64_t)v26, a3[4], v17, a3[31], v8)
      || !sub_234163DA4((unint64_t **)v6, (uint64_t)v26, (uint64_t)v27, a3[1], (uint64_t)v8)
      || !sub_234154548((uint64_t)v6, (uint64_t)v6, (uint64_t)v9, *v25, v8))
    {
      goto LABEL_36;
    }
    if (!sub_234161A24(v17) && !sub_234161A24((uint64_t)v6))
      break;
    if (!--v11)
    {
      sub_2341579B4(10, 0, 108, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa.c", 673);
      goto LABEL_36;
    }
  }
  v22 = sub_23418E344(0x10uLL);
  if (!v22)
    goto LABEL_35;
  v20 = v22;
  *v22 = v17;
  v22[1] = v6;
LABEL_37:
  sub_234162D80(v8);
  sub_234162010(v27);
  sub_234162010(v26);
  sub_234162010(v9);
  return v20;
}

BOOL sub_234154548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t *v10;
  uint64_t v11;
  _BOOL8 v12;

  sub_234162DC8(a5);
  v10 = sub_234162E68((uint64_t)a5);
  v12 = v10
     && (v11 = (uint64_t)v10, sub_234165830((uint64_t)v10, a2, a4, (uint64_t)a5))
     && sub_23416583C(a1, v11, a3, a4, (uint64_t)a5) != 0;
  sub_234162F58((uint64_t)a5);
  return v12;
}

uint64_t sub_2341545E4(unsigned __int8 *a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v5;

  v5 = 0;
  if (sub_234154624(&v5, a1, a2, a3, a4))
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_234154624(_DWORD *a1, unsigned __int8 *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t **v10;
  unint64_t **v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v16[3];
  _QWORD *v17[3];
  _QWORD *v18[3];

  *a1 = 0;
  if (sub_234154B6C((uint64_t *)a5))
  {
    if (*(_QWORD *)(a5 + 24))
    {
      memset(v18, 0, sizeof(v18));
      memset(v17, 0, sizeof(v17));
      memset(v16, 0, sizeof(v16));
      sub_234161FB8(v18);
      sub_234161FB8(v17);
      sub_234161FB8(v16);
      sub_234162D58();
      v11 = v10;
      if (v10)
      {
        if (sub_234161A24(*a4)
          || sub_234162420(*a4)
          || (sub_234161580(*a4, *(_QWORD *)(a5 + 8)) & 0x80000000) == 0
          || sub_234161A24(a4[1])
          || sub_234162420(a4[1])
          || (sub_234161580(a4[1], *(_QWORD *)(a5 + 8)) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        if (sub_234166D64((void **)v17, a4[1], *(_QWORD *)(a5 + 8), (uint64_t)v11))
        {
          v13 = sub_2341621D4(*(uint64_t **)(a5 + 8));
          v14 = v13 >> 3 >= a3 ? a3 : v13 >> 3;
          if (sub_2341625C8(a2, v14, v18)
            && sub_234164140((uint64_t)v18, (uint64_t)v18, (uint64_t)v17, *(_QWORD *)(a5 + 8), (uint64_t)v11)
            && sub_234164140((uint64_t)v17, *a4, (uint64_t)v17, *(_QWORD *)(a5 + 8), (uint64_t)v11)
            && sub_234169A50((_QWORD *)(a5 + 240), (pthread_rwlock_t *)(a5 + 40), *(_QWORD *)a5, (uint64_t)v11)&& sub_234166788((uint64_t)v16, *(_QWORD *)(a5 + 16), (uint64_t)v18, *(_QWORD *)(a5 + 24), (uint64_t)v17, *(_QWORD *)a5, (uint64_t)v11, *(_QWORD ***)(a5 + 240))&& sub_234162F7C(0, (uint64_t)v18, (uint64_t)v16, *(_QWORD *)(a5 + 8), (uint64_t)v11))
          {
            *a1 = sub_234161580((uint64_t)v18, *a4) == 0;
LABEL_10:
            v12 = 1;
LABEL_25:
            sub_234162D80(v11);
            sub_234161FC4(v18);
            sub_234161FC4(v17);
            sub_234161FC4(v16);
            return v12;
          }
        }
      }
      sub_2341579B4(10, 0, 3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa.c", 796);
      v12 = 0;
      goto LABEL_25;
    }
    sub_2341579B4(10, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa.c", 718);
  }
  return 0;
}

uint64_t sub_234154864(uint64_t a1, unsigned __int8 *a2, unint64_t a3, void *a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t result;
  _QWORD *v8;
  void *v9;

  v9 = a4;
  result = (uint64_t)sub_23415417C(a2, a3, a6);
  if (result)
  {
    v8 = (_QWORD *)result;
    *a5 = sub_234155524((uint64_t **)result, &v9);
    sub_2341540D8(v8);
    return 1;
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

uint64_t sub_2341548C4(uint64_t a1, unsigned __int8 *a2, unint64_t a3, char *a4, size_t a5, uint64_t a6)
{
  unsigned int v7;

  v7 = 0;
  if (sub_2341548F4(&v7, a2, a3, a4, a5, a6))
    return v7;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_2341548F4(_DWORD *a1, unsigned __int8 *a2, unint64_t a3, char *a4, size_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  char *v15;
  void *__s2;
  uint64_t **v17;

  __s2 = 0;
  v17 = (uint64_t **)sub_23418E344(0x10uLL);
  if (!v17)
  {
LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  v15 = a4;
  v12 = 0;
  if (sub_2341554B4(&v17, &v15, a5))
  {
    if (v15 == &a4[a5])
    {
      v13 = sub_234155524(v17, &__s2);
      v12 = 0;
      if ((v13 & 0x80000000) == 0 && v13 == a5)
      {
        if (!a5 || !memcmp(a4, __s2, a5))
        {
          v12 = sub_234154624(a1, a2, a3, (uint64_t *)v17, a6);
          goto LABEL_9;
        }
        goto LABEL_8;
      }
    }
  }
LABEL_9:
  sub_23418E3C4(__s2);
  sub_2341540D8(v17);
  return v12;
}

uint64_t *sub_2341549F4(uint64_t a1)
{
  uint64_t *result;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  result = *(uint64_t **)(a1 + 8);
  if (result)
  {
    v2 = sub_234162240(result);
    v3 = v2;
    if (v2 >= 0x7F)
    {
      v5 = v2 + 1;
      v4 = 1;
      do
      {
        ++v4;
        v6 = v5 >= 0xFF;
        v7 = v5 == 255;
        v5 >>= 8;
      }
      while (!v7 && v6);
    }
    else
    {
      v4 = 1;
    }
    result = 0;
    v8 = v3 + v4 + 2;
    if (v8 >= v3 && (v8 & 0x8000000000000000) == 0)
    {
      v9 = 2 * v8;
      if (v8 >= 0x40)
      {
        v10 = 1;
        v11 = v9;
        do
        {
          ++v10;
          v6 = v11 >= 0xFF;
          v7 = v11 == 255;
          v11 >>= 8;
        }
        while (!v7 && v6);
      }
      else
      {
        v10 = 1;
      }
      v12 = (v9 | 1) + v10;
      if (v12 >= v9)
        return (uint64_t *)v12;
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_234154A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23415F0A8((uint64_t)&unk_256157CC0, a1, a2, a5);
}

uint64_t sub_234154AB0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return sub_23415F178((unint64_t **)(a1 + 264), a2, a3);
}

unint64_t *sub_234154AB8(uint64_t a1, unsigned int a2)
{
  return sub_23415F204((unint64_t **)(a1 + 264), a2);
}

_QWORD *sub_234154AC0(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  void **v4;
  void **v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;

  if (!a1)
    return 0;
  v2 = sub_23416FCA4();
  if (!v2)
    goto LABEL_13;
  v3 = (uint64_t *)a1[1];
  if (v3)
  {
    *((_DWORD *)v2 + 10) = sub_2341621D4(v3);
    v4 = sub_234162014(a1[1]);
    v2[2] = v4;
    if (!v4)
      goto LABEL_13;
  }
  if (*a1)
  {
    v5 = sub_234162014(*a1);
    *v2 = v5;
    if (!v5)
      goto LABEL_13;
  }
  v6 = a1[2];
  if (v6)
  {
    v7 = sub_234162014(v6);
    v2[1] = v7;
    if (!v7)
      goto LABEL_13;
  }
  if ((v8 = a1[3]) != 0 && (v9 = sub_234162014(v8), (v2[3] = v9) == 0)
    || (v10 = a1[4]) != 0 && (v11 = sub_234162014(v10), (v2[4] = v11) == 0))
  {
LABEL_13:
    sub_23416FCE0((uint64_t)v2);
    return 0;
  }
  return v2;
}

uint64_t sub_234154B6C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  if (!v2 || !a1[1] || !a1[2])
  {
    v3 = 101;
    v4 = 73;
    goto LABEL_10;
  }
  if (sub_234162420(v2)
    || sub_234162420(a1[1])
    || sub_234161A24(*a1)
    || sub_234161A24(a1[1])
    || !sub_234162C04(*a1)
    || !sub_234162C04(a1[1])
    || (sub_234162A28(a1[1], *a1) & 0x80000000) == 0
    || sub_234162420(a1[2])
    || sub_234161A24(a1[2])
    || (sub_234162A28(a1[2], *a1) & 0x80000000) == 0)
  {
    v3 = 107;
    v4 = 90;
LABEL_10:
    sub_2341579B4(10, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", v4);
    return 0;
  }
  v6 = sub_2341621D4((uint64_t *)a1[1]);
  if (v6 != 160 && v6 != 224 && v6 != 256)
  {
    v3 = 100;
    v4 = 97;
    goto LABEL_10;
  }
  if (sub_2341621D4((uint64_t *)*a1) >= 0x2711)
  {
    v3 = 102;
    v4 = 104;
    goto LABEL_10;
  }
  v7 = a1[3];
  if (v7 && (sub_234162420(v7) || sub_234161A24(a1[3]) || (sub_234162A28(a1[3], *a1) & 0x80000000) == 0))
  {
    v3 = 107;
    v4 = 112;
    goto LABEL_10;
  }
  v8 = a1[4];
  if (v8 && (sub_234162420(v8) || sub_234161A24(a1[4]) || (int)sub_234162A28(a1[4], a1[1]) >= 0))
  {
    v3 = 107;
    v4 = 123;
    goto LABEL_10;
  }
  return 1;
}

_QWORD *sub_234154D60(__int128 *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  __int128 v6;

  v2 = sub_2341540D0();
  if (v2)
  {
    v6 = 0uLL;
    if (!sub_2341493F4(a1, &v6, 536870928)
      || (v3 = sub_234161F88(), (*v2 = v3) == 0)
      || !sub_234146860(&v6, v3)
      || (v4 = sub_234161F88(), (v2[1] = v4) == 0)
      || !sub_234146860(&v6, v4)
      || *((_QWORD *)&v6 + 1))
    {
      sub_2341579B4(10, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", 159);
      sub_2341540D8(v2);
      return 0;
    }
  }
  return v2;
}

_QWORD *sub_234154E18(__int128 *a1, _QWORD *a2)
{
  _QWORD *result;

  result = sub_234161F88();
  *a2 = result;
  if (result)
    return (_QWORD *)sub_234146860(a1, result);
  return result;
}

uint64_t sub_234154E58(uint64_t *a1, uint64_t **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v5, 0x20000010u)
    && sub_234154EF4((uint64_t *)v5, *a2)
    && sub_234154EF4((uint64_t *)v5, a2[1])
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(10, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", 172);
  return 0;
}

uint64_t sub_234154EF4(uint64_t *a1, uint64_t *a2)
{
  if (a2)
    return sub_234146908(a1, a2);
  sub_2341579B4(10, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", 143);
  return 0;
}

uint64_t *sub_234154F28(__int128 *a1)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v8;

  v2 = sub_2341535F4();
  if (v2)
  {
    v8 = 0uLL;
    if (!sub_2341493F4(a1, &v8, 536870928))
      goto LABEL_14;
    v3 = sub_234161F88();
    v2[3] = (uint64_t)v3;
    if (!v3
      || !sub_234146860(&v8, v3)
      || (v4 = sub_234161F88(), (*v2 = (uint64_t)v4) == 0)
      || !sub_234146860(&v8, v4)
      || (v5 = sub_234161F88(), (v2[1] = (uint64_t)v5) == 0)
      || !sub_234146860(&v8, v5)
      || (v6 = sub_234161F88(), (v2[2] = (uint64_t)v6) == 0)
      || !sub_234146860(&v8, v6)
      || *((_QWORD *)&v8 + 1))
    {
LABEL_14:
      sub_2341579B4(10, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", 190);
LABEL_15:
      sub_234153638((uint64_t)v2);
      return 0;
    }
    if (!sub_234154B6C(v2))
      goto LABEL_15;
  }
  return v2;
}

uint64_t sub_234155028(uint64_t *a1, uint64_t **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v5, 0x20000010u)
    && sub_234154EF4((uint64_t *)v5, a2[3])
    && sub_234154EF4((uint64_t *)v5, *a2)
    && sub_234154EF4((uint64_t *)v5, a2[1])
    && sub_234154EF4((uint64_t *)v5, a2[2])
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(10, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", 211);
  return 0;
}

uint64_t *sub_2341550E4(__int128 *a1)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v7;

  v2 = sub_2341535F4();
  if (v2)
  {
    v7 = 0uLL;
    if (!sub_2341493F4(a1, &v7, 536870928)
      || (v3 = sub_234161F88(), (*v2 = (uint64_t)v3) == 0)
      || !sub_234146860(&v7, v3)
      || (v4 = sub_234161F88(), (v2[1] = (uint64_t)v4) == 0)
      || !sub_234146860(&v7, v4)
      || (v5 = sub_234161F88(), (v2[2] = (uint64_t)v5) == 0)
      || !sub_234146860(&v7, v5)
      || *((_QWORD *)&v7 + 1))
    {
      sub_2341579B4(10, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", 228);
LABEL_13:
      sub_234153638((uint64_t)v2);
      return 0;
    }
    if (!sub_234154B6C(v2))
      goto LABEL_13;
  }
  return v2;
}

uint64_t sub_2341551C8(uint64_t *a1, uint64_t **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v5, 0x20000010u)
    && sub_234154EF4((uint64_t *)v5, *a2)
    && sub_234154EF4((uint64_t *)v5, a2[1])
    && sub_234154EF4((uint64_t *)v5, a2[2])
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(10, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", 248);
  return 0;
}

uint64_t *sub_234155274(__int128 *a1)
{
  uint64_t *v2;
  int v3;
  __int16 v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  __int128 v11;

  v2 = sub_2341535F4();
  if (v2)
  {
    v11 = 0uLL;
    v10 = 0;
    if (sub_2341493F4(a1, &v11, 536870928) && sub_2341495A8(&v11, &v10))
    {
      if (v10)
      {
        v3 = 104;
        v4 = 269;
      }
      else
      {
        v6 = sub_234161F88();
        *v2 = (uint64_t)v6;
        if (v6)
        {
          if (sub_234146860(&v11, v6))
          {
            v7 = sub_234161F88();
            v2[1] = (uint64_t)v7;
            if (v7)
            {
              if (sub_234146860(&v11, v7))
              {
                v8 = sub_234161F88();
                v2[2] = (uint64_t)v8;
                if (v8)
                {
                  if (sub_234146860(&v11, v8))
                  {
                    v9 = sub_234161F88();
                    v2[3] = (uint64_t)v9;
                    if (v9)
                    {
                      if (sub_234146860(&v11, v9)
                        && sub_234154E18(&v11, v2 + 4)
                        && !*((_QWORD *)&v11 + 1))
                      {
                        if (sub_234154B6C(v2))
                          return v2;
                        goto LABEL_8;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v3 = 105;
        v4 = 279;
      }
    }
    else
    {
      v3 = 105;
      v4 = 264;
    }
    sub_2341579B4(10, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", v4);
LABEL_8:
    sub_234153638((uint64_t)v2);
    return 0;
  }
  return v2;
}

uint64_t sub_2341553D8(uint64_t *a1, uint64_t **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v5, 0x20000010u)
    && sub_2341484FC((uint64_t)v5, 0)
    && sub_234154EF4((uint64_t *)v5, *a2)
    && sub_234154EF4((uint64_t *)v5, a2[1])
    && sub_234154EF4((uint64_t *)v5, a2[2])
    && sub_234154EF4((uint64_t *)v5, a2[3])
    && sub_234154EF4((uint64_t *)v5, a2[4])
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(10, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/dsa/dsa_asn1.c", 303);
  return 0;
}

_QWORD *sub_2341554B4(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v7;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_234154D60(&v7);
  if (v5)
  {
    if (a1)
    {
      sub_2341540D8(*a1);
      *a1 = v5;
    }
    *a2 = v7;
  }
  return v5;
}

uint64_t sub_234155524(uint64_t **a1, void **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147B54((uint64_t)v5, 0) && sub_234154E58((uint64_t *)v5, a1))
    return sub_2341475C8((uint64_t)v5, a2);
  sub_234147BE4((uint64_t)v5);
  return 0xFFFFFFFFLL;
}

uint64_t *sub_234155594(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  __int128 v7;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_234154F28(&v7);
  if (v5)
  {
    if (a1)
    {
      sub_234153638(*a1);
      *a1 = (uint64_t)v5;
    }
    *a2 = v7;
  }
  return v5;
}

uint64_t sub_234155604(uint64_t **a1, void **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147B54((uint64_t)v5, 0) && sub_234155028((uint64_t *)v5, a1))
    return sub_2341475C8((uint64_t)v5, a2);
  sub_234147BE4((uint64_t)v5);
  return 0xFFFFFFFFLL;
}

uint64_t *sub_234155674(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  __int128 v7;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_234155274(&v7);
  if (v5)
  {
    if (a1)
    {
      sub_234153638(*a1);
      *a1 = (uint64_t)v5;
    }
    *a2 = v7;
  }
  return v5;
}

uint64_t sub_2341556E4(uint64_t **a1, void **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147B54((uint64_t)v5, 0) && sub_2341553D8((uint64_t *)v5, a1))
    return sub_2341475C8((uint64_t)v5, a2);
  sub_234147BE4((uint64_t)v5);
  return 0xFFFFFFFFLL;
}

uint64_t *sub_234155754(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  __int128 v7;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_2341550E4(&v7);
  if (v5)
  {
    if (a1)
    {
      sub_234153638(*a1);
      *a1 = (uint64_t)v5;
    }
    *a2 = v7;
  }
  return v5;
}

uint64_t sub_2341557C4(uint64_t **a1, void **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147B54((uint64_t)v5, 0) && sub_2341551C8((uint64_t *)v5, a1))
    return sub_2341475C8((uint64_t)v5, a2);
  sub_234147BE4((uint64_t)v5);
  return 0xFFFFFFFFLL;
}

uint64_t sub_234155834(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  __int16 v11;
  char v12;
  unsigned __int8 *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  __int128 v19;

  v19 = 0uLL;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  if (sub_2341493F4(a1, &v19, 536870928)
    && sub_2341495A8(&v19, &v16)
    && v16 == 1
    && sub_2341493F4(&v19, &v17, 4))
  {
    if (sub_2341494C0(&v19, -1610612736))
    {
      v15 = 0uLL;
      if (!sub_2341493F4(&v19, &v15, -1610612736))
      {
        v4 = 128;
        v5 = 106;
        goto LABEL_34;
      }
      v3 = sub_234155B2C(&v15);
      if (!v3)
      {
LABEL_35:
        v6 = 0;
LABEL_36:
        v9 = 0;
LABEL_37:
        sub_234174FAC(v6);
        sub_234161FC4((_QWORD **)v9);
        return 0;
      }
      if (a2)
      {
        if (sub_23417154C(a2, v3))
        {
          v4 = 130;
          v5 = 117;
LABEL_34:
          sub_2341579B4(15, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", v5);
          goto LABEL_35;
        }
      }
      else
      {
        a2 = v3;
      }
      if (*((_QWORD *)&v15 + 1))
      {
        v4 = 128;
        v5 = 121;
        goto LABEL_34;
      }
    }
    else if (!a2)
    {
      v4 = 114;
      v5 = 127;
      goto LABEL_34;
    }
    v8 = sub_234174EA4();
    v6 = (uint64_t)v8;
    if (!v8 || !sub_2341750E4(v8, a2))
      goto LABEL_36;
    v9 = sub_2341625C8(v17, v18, 0);
    v10 = sub_2341737FC(a2);
    *(_QWORD *)(v6 + 8) = v10;
    if (!v9 || !v10 || !sub_2341751FC((uint64_t *)v6, (uint64_t)v9))
      goto LABEL_37;
    if (sub_2341494C0(&v19, -1610612735))
    {
      v15 = 0uLL;
      v13 = 0;
      v14 = 0;
      v12 = 0;
      if (!sub_2341493F4(&v19, &v15, -1610612735)
        || !sub_2341493F4(&v15, &v13, 3)
        || !sub_234148D28(&v13, &v12)
        || v12
        || !v14
        || !sub_23417571C(a2, *(_QWORD *)(v6 + 8), v13, v14, 0)
        || *((_QWORD *)&v15 + 1))
      {
        v11 = 161;
LABEL_43:
        sub_2341579B4(15, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", v11);
        goto LABEL_37;
      }
      *(_DWORD *)(v6 + 28) = *v13 & 0xFE;
    }
    else
    {
      if (!sub_2341749E8(a2, *(_QWORD *)(v6 + 8) + 8, *(_QWORD *)(v6 + 16) + 24))
        goto LABEL_37;
      *(_DWORD *)(v6 + 24) |= 2u;
    }
    if (!*((_QWORD *)&v19 + 1))
    {
      if (sub_234175380(v6))
      {
        sub_234161FC4((_QWORD **)v9);
        return v6;
      }
      goto LABEL_37;
    }
    v11 = 181;
    goto LABEL_43;
  }
  sub_2341579B4(15, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", 92);
  return 0;
}

uint64_t sub_234155B2C(__int128 *a1)
{
  BOOL v2;
  int v3;
  __int16 v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  unint64_t v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  _DWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  if (!sub_2341494C0(a1, 536870928))
    return sub_2341562FC(a1);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v32 = 0uLL;
  v31 = 0uLL;
  v29 = 0;
  v30 = 0;
  v28 = 0uLL;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v22 = 0;
  if (!sub_2341493F4(a1, &v32, 536870928)
    || !sub_2341495A8(&v32, &v22)
    || v22 != 1
    || !sub_2341493F4(&v32, &v31, 536870928)
    || !sub_2341493F4(&v31, &v29, 6)
    || v30 != 7
    || (*v29 == -834107862 ? (v2 = *(_DWORD *)((char *)v29 + 3) == 16858574) : (v2 = 0),
        !v2
     || !sub_2341493F4(&v31, &v15, 2)
     || !sub_234149678((unsigned __int8 **)&v15)
     || *((_QWORD *)&v31 + 1)
     || !sub_2341493F4(&v32, &v28, 536870928)
     || !sub_2341493F4(&v28, &v16, 4)
     || !sub_2341493F4(&v28, &v17, 4)
     || !sub_23414988C(&v28, 0, 0, 3)
     || *((_QWORD *)&v28 + 1)
     || !sub_2341493F4(&v32, &v26, 4)
     || !sub_2341493F4(&v32, &v20, 2)
     || !sub_234149678((unsigned __int8 **)&v20)
     || !sub_23414988C(&v32, &v24, &v23, 2)
     || *((_QWORD *)&v32 + 1)))
  {
    v3 = 128;
    v4 = 288;
LABEL_13:
    sub_2341579B4(15, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", v4);
    return 0;
  }
  if (v23 && (v25 != 1 || *v24 != 1))
  {
    v3 = 123;
    v4 = 296;
    goto LABEL_13;
  }
  v21 = 0;
  if (!sub_234148D28(&v26, &v21) || v21 != 4)
  {
    v3 = 111;
    v4 = 304;
    goto LABEL_13;
  }
  if ((v27 & 1) != 0)
  {
    v3 = 128;
    v4 = 309;
    goto LABEL_13;
  }
  *(_QWORD *)&v18 = v26;
  *((_QWORD *)&v18 + 1) = v27 >> 1;
  *(_QWORD *)&v19 = v26 + (v27 >> 1);
  *((_QWORD *)&v19 + 1) = v27 >> 1;
  v6 = sub_234161F88();
  v7 = sub_234161F88();
  v8 = sub_234161F88();
  v9 = sub_234161F88();
  v14 = sub_234161F88();
  v10 = 0;
  if (v6 && v7 && v8 && v9 && v14)
  {
    v11 = 0;
    while (1)
    {
      v10 = off_2505066E0[v11]();
      v12 = sub_23417256C(v10);
      if (sub_2341563B0(&v20, v12))
        break;
      if (++v11 == 4)
        goto LABEL_42;
    }
    if (!sub_234173614(v10, v6, v7, v8, 0))
    {
LABEL_43:
      v10 = 0;
      goto LABEL_44;
    }
    if (!sub_2341563B0(&v15, (uint64_t)v6) || !sub_2341563B0(&v16, (uint64_t)v7) || !sub_2341563B0(&v17, (uint64_t)v8))
      goto LABEL_42;
    v13 = (uint64_t *)sub_234173584(v10);
    if (!sub_234173E08(v10, v13, v9, v14))
      goto LABEL_43;
    if (!sub_2341563B0(&v18, (uint64_t)v9) || !sub_2341563B0(&v19, (uint64_t)v14) || !v10)
    {
LABEL_42:
      sub_2341579B4(15, 0, 123, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", 422);
      goto LABEL_43;
    }
  }
LABEL_44:
  sub_234161FC4((_QWORD **)v6);
  sub_234161FC4((_QWORD **)v7);
  sub_234161FC4((_QWORD **)v8);
  sub_234161FC4((_QWORD **)v9);
  sub_234161FC4((_QWORD **)v14);
  return v10;
}

uint64_t sub_234155FA4(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  __int16 v11;
  _OWORD v12[3];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[3];
  _OWORD v17[3];

  if (a2 && *(_QWORD *)a2 && *(_QWORD *)(a2 + 16))
  {
    memset(v17, 0, sizeof(v17));
    memset(v16, 0, sizeof(v16));
    if (sub_234147F60(a1, (uint64_t)v17, 0x20000010u)
      && sub_2341484FC((uint64_t)v17, 1uLL)
      && sub_234147F60((uint64_t *)v17, (uint64_t)v16, 4u)
      && (v6 = (uint64_t *)sub_23417256C(*(_QWORD *)a2),
          v7 = sub_234162240(v6),
          v8 = sub_234153704(a2),
          sub_2341469E8((uint64_t)v16, v7, v8)))
    {
      if ((a3 & 1) != 0
        || (v14 = 0u, v15 = 0u, v13 = 0u, sub_234147F60((uint64_t *)v17, (uint64_t)&v13, 0xA0000000))
        && sub_2341561C4((uint64_t *)&v13, *(_QWORD *)a2)
        && sub_234147CB0((uint64_t *)v17))
      {
        if ((a3 & 2) != 0
          || !*(_QWORD *)(a2 + 8)
          || (v14 = 0u,
              v15 = 0u,
              v13 = 0u,
              memset(v12, 0, sizeof(v12)),
              sub_234147F60((uint64_t *)v17, (uint64_t)&v13, 0xA0000001))
          && sub_234147F60((uint64_t *)&v13, (uint64_t)v12, 3u)
          && sub_234148008((uint64_t)v12, 0)
          && sub_234156258((uint64_t)v12, *(_QWORD *)a2, *(uint64_t **)(a2 + 8), *(_DWORD *)(a2 + 28))
          && sub_234147CB0((uint64_t *)v17))
        {
          if (sub_234147CB0(a1))
            return 1;
          v10 = 129;
          v11 = 244;
        }
        else
        {
          v10 = 129;
          v11 = 238;
        }
      }
      else
      {
        v10 = 129;
        v11 = 222;
      }
    }
    else
    {
      v10 = 129;
      v11 = 213;
    }
  }
  else
  {
    v10 = 67;
    v11 = 202;
  }
  sub_2341579B4(15, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", v11);
  return 0;
}

uint64_t sub_2341561C4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v5[3];

  if (*(_BYTE *)(a2 + 525))
  {
    memset(v5, 0, sizeof(v5));
    result = sub_234147F60(a1, (uint64_t)v5, 6u);
    if ((_DWORD)result)
    {
      result = sub_23414817C((uint64_t)v5, (const void *)(a2 + 516), *(unsigned __int8 *)(a2 + 525));
      if ((_DWORD)result)
        return sub_234147CB0(a1) != 0;
    }
  }
  else
  {
    sub_2341579B4(15, 0, 123, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", 363);
    return 0;
  }
  return result;
}

uint64_t sub_234156258(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t result;
  unint64_t v9;
  char *v10;

  result = sub_234177370(a2, a3, a4, 0, 0);
  if (result)
  {
    v9 = result;
    v10 = 0;
    result = sub_2341481CC(a1, &v10, result);
    if ((_DWORD)result)
      return sub_234177370(a2, a3, a4, v10, v9) == v9;
  }
  return result;
}

uint64_t sub_2341562FC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  __int16 v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  if (sub_2341493F4(a1, v6, 6))
  {
    v1 = 0;
    while (1)
    {
      v2 = off_2505066E0[v1]();
      if (sub_234148CF4((uint64_t)v6, (char *)(v2 + 516), *(unsigned __int8 *)(v2 + 525)))
        break;
      if (++v1 == 4)
      {
        v3 = 123;
        v4 = 357;
        goto LABEL_7;
      }
    }
  }
  else
  {
    v3 = 128;
    v4 = 345;
LABEL_7:
    sub_2341579B4(15, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", v4);
    return 0;
  }
  return v2;
}

BOOL sub_2341563B0(__int128 *a1, uint64_t a2)
{
  __int128 i;
  char v5[66];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  for (i = *a1; *((_QWORD *)&i + 1); sub_234148BF8(&i, 1uLL))
  {
    if (*(_BYTE *)i)
    {
      if (*((_QWORD *)&i + 1) > 0x42uLL)
        return 0;
      break;
    }
  }
  if (sub_234162840(v5, *((unint64_t *)&i + 1), a2))
    return sub_234148CF4((uint64_t)&i, v5, *((uint64_t *)&i + 1));
  sub_234157348();
  return 0;
}

uint64_t sub_234156460(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  if (a1 && (v6 = *a1) != 0)
  {
    v7 = sub_2341536FC(v6);
    if (a3 < 0)
    {
LABEL_4:
      sub_2341579B4(15, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", 454);
      return 0;
    }
  }
  else
  {
    v7 = 0;
    if (a3 < 0)
      goto LABEL_4;
  }
  *(_QWORD *)&v10 = *a2;
  *((_QWORD *)&v10 + 1) = a3;
  v8 = sub_234155834(&v10, v7);
  if (v8)
  {
    if (a1)
    {
      sub_234174FAC(*a1);
      *a1 = v8;
    }
    *a2 = v10;
  }
  return v8;
}

uint64_t sub_23415650C(uint64_t a1, void **a2)
{
  char v4;
  _OWORD v6[3];

  memset(v6, 0, sizeof(v6));
  if (sub_234147B54((uint64_t)v6, 0))
  {
    v4 = sub_23416E2B8(a1);
    if (sub_234155FA4((uint64_t *)v6, a1, v4))
      return sub_2341475C8((uint64_t)v6, a2);
  }
  sub_234147BE4((uint64_t)v6);
  return 0xFFFFFFFFLL;
}

uint64_t sub_234156588(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v10;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v10 = *a2;
  *((_QWORD *)&v10 + 1) = a3;
  v5 = sub_234155B2C(&v10);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sub_234174EA4();
  v8 = (uint64_t)v7;
  if (!v7 || !sub_2341750E4(v7, v6))
  {
    sub_234174FAC(v8);
    return 0;
  }
  if (a1)
  {
    sub_234174FAC(*a1);
    *a1 = v8;
  }
  *a2 = v10;
  return v8;
}

uint64_t sub_23415661C(uint64_t *a1, void **a2)
{
  _OWORD v5[3];

  if (a1 && *a1)
  {
    memset(v5, 0, sizeof(v5));
    if (sub_234147B54((uint64_t)v5, 0) && sub_2341561C4((uint64_t *)v5, *a1))
      return sub_2341475C8((uint64_t)v5, a2);
    sub_234147BE4((uint64_t)v5);
  }
  else
  {
    sub_2341579B4(15, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", 509);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_2341566B8(uint64_t *a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  __int16 v10;

  if (!a1 || (v3 = *a1) == 0 || (v4 = *(_QWORD *)v3) == 0)
  {
    v9 = 67;
    v10 = 526;
LABEL_10:
    sub_2341579B4(15, 0, v9, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", v10);
    return 0;
  }
  v7 = *(_QWORD *)(v3 + 8);
  if (!v7)
  {
    v8 = sub_2341737FC(v4);
    *(_QWORD *)(v3 + 8) = v8;
    if (!v8)
      return 0;
    v7 = (uint64_t)v8;
    v4 = *(_QWORD *)v3;
  }
  if (!sub_23417571C(v4, v7, *a2, a3, 0))
  {
    v9 = 15;
    v10 = 535;
    goto LABEL_10;
  }
  *(_DWORD *)(v3 + 28) = **a2 & 0xFE;
  *a2 += a3;
  return v3;
}

uint64_t sub_234156784(uint64_t a1, void **a2)
{
  int v4;
  _OWORD v6[3];

  if (a1)
  {
    memset(v6, 0, sizeof(v6));
    if (sub_234147B54((uint64_t)v6, 0)
      && sub_234156258((uint64_t)v6, *(_QWORD *)a1, *(uint64_t **)(a1 + 8), *(_DWORD *)(a1 + 28)))
    {
      v4 = sub_2341475C8((uint64_t)v6, a2);
      return v4 & ~(v4 >> 31);
    }
    else
    {
      sub_234147BE4((uint64_t)v6);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    sub_2341579B4(15, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ec_extra/ec_asn1.c", 546);
    return 0;
  }
}

uint64_t sub_234156828(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (**v4)(void);
  uint64_t (*v5)(void);
  uint64_t v6;

  if (a2 >= 4)
    v2 = 4;
  else
    v2 = a2;
  if (v2)
  {
    v3 = (_QWORD *)(a1 + 8);
    v4 = off_2505066E0;
    do
    {
      v5 = *v4++;
      v6 = v5();
      *((_DWORD *)v3 - 2) = *(_DWORD *)(v6 + 512);
      *v3 = *(_QWORD *)(v6 + 504);
      v3 += 2;
      --v2;
    }
    while (v2);
  }
  return 4;
}

uint64_t sub_234156888(void *a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(_BYTE *, size_t, void *, unint64_t *))
{
  uint64_t v5;
  size_t v8;
  uint64_t *v10;
  int v11;
  int v12;
  __int16 v13;
  size_t v15;
  _OWORD v16[13];
  uint64_t v17;
  unint64_t v18;
  _BYTE __src[66];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v5 = *(_QWORD *)(a4 + 16);
  if (!v5)
  {
    v11 = 27;
    v12 = 101;
    v13 = 85;
    goto LABEL_11;
  }
  v8 = a2;
  v10 = (uint64_t *)sub_2341536FC(a4);
  if (sub_23417154C((uint64_t)v10, *a3))
  {
    v11 = 15;
    v12 = 106;
    v13 = 91;
LABEL_11:
    sub_2341579B4(v11, 0, v12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ecdh_extra/ecdh_extra.c", v13);
    return 0xFFFFFFFFLL;
  }
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v15 = 0;
  if (!sub_234171624((uint64_t)v10, (uint64_t)v16, (uint64_t)(a3 + 1), v5 + 24)
    || !sub_2341716AC(v10, (uint64_t)__src, &v15, 0x42uLL, (uint64_t)v16))
  {
    v11 = 27;
    v12 = 102;
    v13 = 101;
    goto LABEL_11;
  }
  if (a5)
  {
    if (!a5(__src, v15, a1, &v18))
    {
      v11 = 27;
      v12 = 100;
      v13 = 107;
      goto LABEL_11;
    }
    v8 = v18;
LABEL_17:
    if (!(v8 >> 31))
      return v8;
    v11 = 27;
    v12 = 69;
    v13 = 119;
    goto LABEL_11;
  }
  if (v15 < v8)
  {
    v18 = v15;
    v8 = v15;
  }
  if (v8)
  {
    memcpy(a1, __src, v8);
    goto LABEL_17;
  }
  return v8;
}

uint64_t sub_234156A68(uint64_t a1, unint64_t *a2, size_t a3, uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t (*v10)(unint64_t *, size_t, uint64_t, _DWORD *, uint64_t *);
  uint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];

  v9 = a6[5];
  if (v9)
  {
    v10 = *(uint64_t (**)(unint64_t *, size_t, uint64_t, _DWORD *, uint64_t *))(v9 + 40);
    if (v10)
      return v10(a2, a3, a4, a5, a6);
  }
  v12 = sub_234172360(a2, a3, a6);
  if (!v12)
    goto LABEL_9;
  memset(v17, 0, sizeof(v17));
  v13 = sub_234156B74((uint64_t)a6);
  sub_234147BB4((uint64_t)v17, a4, v13);
  v16 = 0;
  if (!sub_234156BC0((uint64_t *)v17, (uint64_t **)v12)
    || !sub_234147C00((uint64_t)v17, 0, &v16))
  {
    sub_2341579B4(26, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ecdsa_extra/ecdsa_asn1.c", 88);
LABEL_9:
    v14 = 0;
    v15 = 0;
    goto LABEL_10;
  }
  v14 = v16;
  v15 = 1;
LABEL_10:
  *a5 = v14;
  sub_2341540D8(v12);
  return v15;
}

unint64_t sub_234156B74(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 40);
    if (v1)
    {
      v2 = *(uint64_t (**)(void))(v1 + 32);
      if (v2)
      {
        v3 = v2();
        return sub_234156E58(v3);
      }
    }
    v4 = sub_2341536FC(a1);
    if (v4)
    {
      v5 = (uint64_t *)sub_23417256C(v4);
      v3 = sub_234162240(v5);
      return sub_234156E58(v3);
    }
  }
  return 0;
}

uint64_t sub_234156BC0(uint64_t *a1, uint64_t **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v5, 0x20000010u)
    && sub_234146908((uint64_t *)v5, *a2)
    && sub_234146908((uint64_t *)v5, a2[1])
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(26, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ecdsa_extra/ecdsa_asn1.c", 185);
  return 0;
}

uint64_t sub_234156C5C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, uint64_t a6)
{
  uint64_t **v11;
  uint64_t v12;
  uint64_t v14;
  void *__s2;

  __s2 = 0;
  v11 = (uint64_t **)sub_234156D44((uint64_t)a4, a5);
  if (v11)
  {
    v14 = 0;
    if (sub_234156DAC(&__s2, &v14, v11) && v14 == a5 && (!a5 || !memcmp(a4, __s2, a5)))
    {
      v12 = sub_234171F78(a2, a3, v11, a6);
      goto LABEL_9;
    }
    sub_2341579B4(26, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ecdsa_extra/ecdsa_asn1.c", 117);
  }
  v12 = 0;
LABEL_9:
  sub_23418E3C4(__s2);
  sub_2341540D8(v11);
  return v12;
}

_QWORD *sub_234156D44(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  __int128 v4;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = a2;
  v2 = sub_234156EDC(&v4);
  if (!v2 || *((_QWORD *)&v4 + 1))
  {
    sub_2341579B4(26, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ecdsa_extra/ecdsa_asn1.c", 172);
    sub_2341540D8(v2);
    return 0;
  }
  return v2;
}

uint64_t sub_234156DAC(_QWORD *a1, _QWORD *a2, uint64_t **a3)
{
  _OWORD v7[3];

  memset(v7, 0, sizeof(v7));
  sub_234147B44(v7);
  if (sub_234147B54((uint64_t)v7, 0)
    && sub_234156BC0((uint64_t *)v7, a3)
    && sub_234147C00((uint64_t)v7, a1, a2))
  {
    return 1;
  }
  sub_2341579B4(26, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ecdsa_extra/ecdsa_asn1.c", 198);
  sub_234147BE4((uint64_t)v7);
  return 0;
}

unint64_t sub_234156E58(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = a1 + 1;
  v2 = 1;
  if (a1 + 1 >= 0x80)
  {
    do
    {
      ++v2;
      v3 = v1 > 0xFF;
      v1 >>= 8;
    }
    while (v3);
  }
  v4 = 0;
  v5 = a1 + v2 + 2;
  if (v5 >= a1 && (v5 & 0x8000000000000000) == 0)
  {
    v6 = 2 * v5;
    if (v5 >= 0x40)
    {
      v7 = 1;
      v8 = v6;
      do
      {
        ++v7;
        v3 = v8 > 0xFF;
        v8 >>= 8;
      }
      while (v3);
    }
    else
    {
      v7 = 1;
    }
    v9 = (v6 | 1) + v7;
    if (v9 >= v6)
      return v9;
    else
      return 0;
  }
  return v4;
}

_QWORD *sub_234156EDC(__int128 *a1)
{
  _QWORD *v2;
  __int128 v4;

  v2 = sub_234171AA8();
  if (v2)
  {
    v4 = 0uLL;
    if (!sub_2341493F4(a1, &v4, 536870928)
      || !sub_234146860(&v4, (_QWORD *)*v2)
      || !sub_234146860(&v4, (_QWORD *)v2[1])
      || *((_QWORD *)&v4 + 1))
    {
      sub_2341579B4(26, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ecdsa_extra/ecdsa_asn1.c", 160);
      sub_2341540D8(v2);
      return 0;
    }
  }
  return v2;
}

_QWORD *sub_234156F7C(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v7;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_234156EDC(&v7);
  if (v5)
  {
    if (a1)
    {
      sub_2341540D8(*a1);
      *a1 = v5;
    }
    *a2 = v7;
  }
  return v5;
}

uint64_t sub_234156FEC(uint64_t **a1, void **a2)
{
  _OWORD v5[3];

  memset(v5, 0, sizeof(v5));
  if (sub_234147B54((uint64_t)v5, 0) && sub_234156BC0((uint64_t *)v5, a1))
    return sub_2341475C8((uint64_t)v5, a2);
  sub_234147BE4((uint64_t)v5);
  return 0xFFFFFFFFLL;
}

uint64_t sub_23415705C(_QWORD *a1)
{
  sub_23418E3C4(a1);
  return 1;
}

uint64_t sub_234157074(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 80 || !*(_BYTE *)(a2 + 4))
    return 0;
  *a1 = a2;
  return 1;
}

uint64_t sub_234157098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 56 || !*(_BYTE *)(a2 + 4))
    return 0;
  *(_QWORD *)(a1 + 8) = a2;
  return 1;
}

uint64_t sub_2341570BC()
{
  return sub_2341570D8(1, 0, 0, 0, 0, 0);
}

uint64_t sub_2341570D8(int a1, int a2, _QWORD *a3, _DWORD *a4, _QWORD *a5, _DWORD *a6)
{
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;

  v12 = sub_2341573A4();
  if (!v12)
    return 0;
  v13 = v12;
  v14 = *((_DWORD *)v12 + 97);
  if (v14 == *((_DWORD *)v12 + 96))
    return 0;
  v16 = ((_BYTE)v14 + 1) & 0xF;
  if (a2)
    v17 = *((_DWORD *)v12 + 96);
  else
    v17 = v16;
  v18 = &v12[3 * v17];
  v15 = *((unsigned int *)v18 + 4);
  if (a3 && a4)
  {
    v19 = *v18;
    if (*v18)
    {
      *a3 = v19;
      LODWORD(v19) = WORD2(v12[3 * v17 + 2]);
    }
    else
    {
      *a3 = "NA";
    }
    *a4 = v19;
  }
  if (!a5)
    goto LABEL_23;
  v20 = &v12[3 * v17];
  v23 = v20[1];
  v22 = v20 + 1;
  v21 = v23;
  if (!v23)
  {
    *a5 = "";
    if (a6)
      *a6 = 0;
LABEL_23:
    if (!a1)
      return v15;
    v24 = (void *)v12[3 * v17 + 1];
LABEL_25:
    free(v24);
    *v18 = 0;
    v18[1] = 0;
    v18[2] = 0;
    *((_DWORD *)v13 + 97) = v17;
    return v15;
  }
  *a5 = v21;
  if (a6)
    *a6 = 3;
  if (a1)
  {
    if (*v22)
    {
      free((void *)v12[49]);
      v13[49] = *v22;
    }
    v24 = 0;
    *v22 = 0;
    goto LABEL_25;
  }
  return v15;
}

uint64_t sub_234157220(_QWORD *a1, _DWORD *a2)
{
  return sub_2341570D8(1, 0, a1, a2, 0, 0);
}

uint64_t sub_23415723C(_QWORD *a1, _DWORD *a2, _QWORD *a3, _DWORD *a4)
{
  return sub_2341570D8(1, 0, a1, a2, a3, a4);
}

_QWORD *sub_234157258()
{
  _QWORD *result;
  int v1;

  result = sub_2341573A4();
  if (result)
  {
    v1 = *((_DWORD *)result + 97);
    if (v1 == *((_DWORD *)result + 96))
      return 0;
    else
      return (_QWORD *)LODWORD(result[3 * ((v1 + 1) & 0xF) + 2]);
  }
  return result;
}

uint64_t sub_23415729C(_QWORD *a1, _DWORD *a2)
{
  return sub_2341570D8(0, 0, a1, a2, 0, 0);
}

uint64_t sub_2341572B8(_QWORD *a1, _DWORD *a2, _QWORD *a3, _DWORD *a4)
{
  return sub_2341570D8(0, 0, a1, a2, a3, a4);
}

_QWORD *sub_2341572D4()
{
  _QWORD *result;
  unsigned int v1;

  result = sub_2341573A4();
  if (result)
  {
    v1 = *((_DWORD *)result + 96);
    if (*((_DWORD *)result + 97) == v1)
      return 0;
    else
      return (_QWORD *)LODWORD(result[3 * v1 + 2]);
  }
  return result;
}

uint64_t sub_234157310(_QWORD *a1, _DWORD *a2)
{
  return sub_2341570D8(0, 1, a1, a2, 0, 0);
}

uint64_t sub_23415732C(_QWORD *a1, _DWORD *a2, _QWORD *a3, _DWORD *a4)
{
  return sub_2341570D8(0, 1, a1, a2, a3, a4);
}

void sub_234157348()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t i;
  _QWORD *v3;

  v0 = sub_2341573A4();
  if (v0)
  {
    v1 = v0;
    for (i = 0; i != 48; i += 3)
    {
      v3 = &v1[i];
      free((void *)v1[i + 1]);
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    free((void *)v1[49]);
    v1[48] = 0;
    v1[49] = 0;
  }
}

_QWORD *sub_2341573A4()
{
  _QWORD *v0;
  _OWORD *v2;

  v0 = sub_234195C90(0);
  if (!v0)
  {
    v2 = malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
    v0 = v2;
    if (v2)
    {
      v2[23] = 0u;
      v2[24] = 0u;
      v2[21] = 0u;
      v2[22] = 0u;
      v2[19] = 0u;
      v2[20] = 0u;
      v2[17] = 0u;
      v2[18] = 0u;
      v2[15] = 0u;
      v2[16] = 0u;
      v2[13] = 0u;
      v2[14] = 0u;
      v2[11] = 0u;
      v2[12] = 0u;
      v2[9] = 0u;
      v2[10] = 0u;
      v2[7] = 0u;
      v2[8] = 0u;
      v2[5] = 0u;
      v2[6] = 0u;
      v2[3] = 0u;
      v2[4] = 0u;
      v2[1] = 0u;
      v2[2] = 0u;
      *v2 = 0u;
      if (!sub_234195D24(0, (uint64_t)v2, (void (*)(uint64_t))sub_234157FD8))
        return 0;
    }
  }
  return v0;
}

void sub_234157448(uint64_t a1)
{
  if (!a1)
    sub_234157348();
}

uint64_t sub_234157454()
{
  uint64_t v0;

  sub_234195C38(&stru_256157DA0);
  v0 = dword_256157E68++;
  sub_234195C54(&stru_256157DA0);
  return v0;
}

int *sub_23415749C()
{
  int *result;

  result = __error();
  *result = 0;
  return result;
}

const char *sub_2341574B4(unsigned int a1)
{
  char *v1;

  if (a1 >> 25 <= 0x10)
    v1 = (&off_250506700)[3 * HIBYTE(a1)];
  else
    v1 = 0;
  if (v1)
    return v1;
  else
    return "unknown library";
}

char *sub_2341574F4(unsigned int a1)
{
  if (a1 >> 25 <= 0x10)
    return (&off_250506700)[3 * HIBYTE(a1) + 1];
  else
    return 0;
}

const char *sub_234157524()
{
  return "OPENSSL_internal";
}

char *sub_234157530(unsigned int a1)
{
  char *result;

  result = sub_234157558(a1, 0);
  if (!result)
    return "unknown error";
  return result;
}

char *sub_234157558(unsigned int a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  char *result;
  char **v5;
  const char *v6;
  const char *v7;
  int __key;

  v2 = HIBYTE(a1);
  v3 = a1 & 0xFFF;
  if (HIBYTE(a1) == 2)
  {
    result = 0;
    if (!a2 && v3 <= 0x7E)
      return strerror(v3);
  }
  else if (v3 > 0x21)
  {
    if (v3 > 0x63)
    {
      result = 0;
      if (!(a1 >> 30) && v3 <= 0x7FF)
      {
        __key = (v3 << 15) | (v2 << 26);
        result = (char *)bsearch(&__key, &unk_2342E8C10, 0x2F5uLL, 4uLL, (int (__cdecl *)(const void *, const void *))sub_234158034);
        if (result)
          return &aAsn1LengthMism[*(_DWORD *)result & 0x7FFF];
      }
    }
    else
    {
      switch(a1 & 0xFFF)
      {
        case 'A':
          v6 = "MALLOC_FAILURE";
          v7 = "malloc failure";
          goto LABEL_21;
        case 'B':
          v6 = "SHOULD_NOT_HAVE_BEEN_CALLED";
          v7 = "function should not have been called";
          goto LABEL_21;
        case 'C':
          v6 = "PASSED_NULL_PARAMETER";
          v7 = "passed a null parameter";
          goto LABEL_21;
        case 'D':
          v6 = "INTERNAL_ERROR";
          v7 = "internal error";
          goto LABEL_21;
        case 'E':
          v6 = "OVERFLOW";
          v7 = "overflow";
LABEL_21:
          if (a2)
            result = (char *)v6;
          else
            result = (char *)v7;
          break;
        default:
          result = 0;
          break;
      }
    }
  }
  else
  {
    v5 = &(&off_250506700)[3 * (a1 & 0xFFF)];
    if (a2)
      v5 += 2;
    return *v5;
  }
  return result;
}

char *sub_2341576D0(unsigned int a1)
{
  return sub_234157558(a1, 1);
}

char *sub_2341576D8(unsigned int a1, char *a2)
{
  if (!a2)
    a2 = (char *)&unk_256159698;
  return sub_2341576F0(a1, a2, 0x78uLL);
}

char *sub_2341576F0(unsigned int a1, char *a2, size_t a3)
{
  unsigned int v6;
  char *v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v16[32];
  char __str[32];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = HIBYTE(a1);
  if (a1 >> 25 < 0x11)
  {
    v8 = (&off_250506700)[3 * v6];
    v7 = sub_234157558(a1, 0);
    if (v8)
      goto LABEL_7;
  }
  else
  {
    v7 = sub_234157558(a1, 0);
  }
  v8 = __str;
  snprintf(__str, 0x20uLL, "lib(%u)", v6);
LABEL_7:
  if (!v7)
  {
    v7 = v16;
    snprintf(v16, 0x20uLL, "reason(%u)", a1 & 0xFFF);
  }
  v9 = snprintf(a2, a3, "error:%08x:%s:OPENSSL_internal:%s", a1, v8, v7);
  if (a3 >= 5 && (v9 & 0x80000000) == 0 && v9 >= a3)
  {
    v10 = 0;
    v11 = (uint64_t)&a2[a3 - 5];
    v12 = a2;
    while (1)
    {
      v13 = strchr(v12, 58);
      v14 = (char *)(v11 + v10);
      if (!v13 || v13 > v14)
        break;
      v12 = v13 + 1;
      if (++v10 == 4)
        return a2;
    }
    memset(v14, 58, 4 - v10);
  }
  return a2;
}

uint64_t sub_234157878(uint64_t (*a1)(char *, size_t, uint64_t), uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  const char *v6;
  size_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  char __str[1024];
  char v12[120];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v4 = sub_2341573A4();
  do
  {
    result = sub_2341570D8(1, 0, &v10, (_DWORD *)&v8 + 1, &v9, &v8);
    if (!(_DWORD)result)
      break;
    sub_2341576F0(result, v12, 0x78uLL);
    v6 = (v8 & 1) != 0 ? v9 : "";
    snprintf(__str, 0x400uLL, "%lu:%s:%s:%d:%s\n", v4, v12, v10, HIDWORD(v8), v6);
    v7 = strlen(__str);
    result = a1(__str, v7, a2);
  }
  while ((int)result > 0);
  return result;
}

uint64_t sub_234157984(uint64_t a1)
{
  return sub_234157878((uint64_t (*)(char *, size_t, uint64_t))sub_234157994, a1);
}

BOOL sub_234157994(const char *a1, int a2, FILE *a3)
{
  return fputs(a1, a3) >= 0;
}

void sub_2341579B4(int a1, uint64_t a2, int a3, uint64_t a4, __int16 a5)
{
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  int v12;
  _QWORD *v13;

  v9 = sub_2341573A4();
  if (v9)
  {
    v10 = v9;
    if (a1 == 2 && !a3)
      a3 = *__error();
    v11 = *((_DWORD *)v10 + 96);
    v12 = ((_BYTE)v11 + 1) & 0xF;
    *((_DWORD *)v10 + 96) = v12;
    if (v12 == *((_DWORD *)v10 + 97))
      *((_DWORD *)v10 + 97) = ((_BYTE)v11 + 2) & 0xF;
    v13 = &v10[3 * ((v11 + 1) & 0xF)];
    free((void *)v13[1]);
    v13[1] = 0;
    v13[2] = 0;
    *v13 = a4;
    *((_WORD *)v13 + 10) = a5;
    *((_DWORD *)v13 + 4) = a3 & 0xFFF | (a1 << 24);
  }
}

void sub_234157A5C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  _BYTE *v17;
  char **v18;
  const char **v19;
  char **v20;

  v19 = (const char **)&a9;
  v20 = (char **)&a9;
  v10 = a1;
  v11 = 0;
  if (!a1)
    goto LABEL_8;
  v12 = a1;
  do
  {
    v13 = v19++;
    if (*v13)
    {
      v14 = strlen(*v13);
      if (__CFADD__(v11, v14))
        return;
      v11 += v14;
    }
    --v12;
  }
  while (v12);
  if (v11 != -1)
  {
LABEL_8:
    v15 = v11 + 1;
    v16 = malloc_type_malloc(v15, 0x8E171D9AuLL);
    if (v16)
    {
      v17 = v16;
      *v16 = 0;
      if (a1)
      {
        do
        {
          v18 = v20++;
          if (*v18)
            sub_23418EA40(v17, *v18, v15);
          --v10;
        }
        while (v10);
      }
      sub_234157B70(v17);
    }
  }
}

void sub_234157B2C(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char *v9;

  v9 = 0;
  if (sub_23418E7D4(&v9, a1, &a9, 1) != -1)
    sub_234157B70(v9);
}

void sub_234157B70(void *a1)
{
  _QWORD *v2;
  unsigned int v3;
  _QWORD *v4;

  v2 = sub_2341573A4();
  if (v2 && (v3 = *((_DWORD *)v2 + 96), v3 != *((_DWORD *)v2 + 97)))
  {
    v4 = &v2[3 * v3];
    free((void *)v4[1]);
    v4[1] = a1;
  }
  else
  {
    free(a1);
  }
}

void sub_234157BC8(char *a1, char a2)
{
  void *v4;

  if ((a2 & 1) != 0)
  {
    v4 = sub_234157C0C(a1);
    if (v4)
      sub_234157B70(v4);
    if ((a2 & 2) != 0)
      sub_23418E3C4(a1);
  }
}

void *sub_234157C0C(const char *a1)
{
  size_t v2;
  void *v3;
  void *v4;

  v2 = strlen(a1) + 1;
  v3 = malloc_type_malloc(v2, 0x96AA084AuLL);
  v4 = v3;
  if (v3)
    memcpy(v3, a1, v2);
  return v4;
}

uint64_t sub_234157C64()
{
  uint64_t result;
  unsigned int v1;

  result = (uint64_t)sub_2341573A4();
  if (result)
  {
    v1 = *(_DWORD *)(result + 384);
    if (*(_DWORD *)(result + 388) == v1)
    {
      return 0;
    }
    else
    {
      *(_BYTE *)(result + 24 * v1 + 22) |= 1u;
      return 1;
    }
  }
  return result;
}

uint64_t sub_234157CAC()
{
  uint64_t result;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _BYTE *v4;
  char v5;
  char v6;
  uint64_t v7;
  int v8;

  result = (uint64_t)sub_2341573A4();
  if (result)
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 384);
    if (*(_DWORD *)(result + 388) == v2)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        v3 = v1 + 24 * v2;
        v6 = *(_BYTE *)(v3 + 22);
        v4 = (_BYTE *)(v3 + 22);
        v5 = v6;
        if ((v6 & 1) != 0)
          break;
        v7 = v1 + 24 * v2;
        free(*(void **)(v7 + 8));
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        v8 = *(_DWORD *)(v1 + 384);
        if (v8)
          v2 = v8 - 1;
        else
          v2 = 15;
        *(_DWORD *)(v1 + 384) = v2;
        if (*(_DWORD *)(v1 + 388) == v2)
          return 0;
      }
      *v4 = v5 & 0xFE;
      return 1;
    }
  }
  return result;
}

void sub_234157D48(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v2 = 0;
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)a1 + v2;
        free(*(void **)(v4 + 8));
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        *(_QWORD *)(v4 + 16) = 0;
        ++v3;
        v2 += 24;
      }
      while (v3 < *(_QWORD *)(a1 + 8));
    }
    free(*(void **)a1);
    free((void *)a1);
  }
}

_QWORD *sub_234157DBC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v0 = sub_2341573A4();
  if (!v0)
    return 0;
  v1 = v0;
  if (*((_DWORD *)v0 + 96) == *((_DWORD *)v0 + 97))
    return 0;
  v2 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
  if (!v2)
    return v2;
  v4 = *((_DWORD *)v1 + 96);
  v5 = *((_DWORD *)v1 + 97);
  if (v4 >= v5)
    v6 = *((_DWORD *)v1 + 96);
  else
    v6 = v4 + 16;
  v7 = v6 - v5;
  v8 = malloc_type_malloc(24 * v7, 0x10500400B811B97uLL);
  *v2 = v8;
  if (!v8)
  {
    free(v2);
    return 0;
  }
  if (v6 == v5)
  {
    v2[1] = v7;
  }
  else
  {
    bzero(v8, 24 * (v6 - v5));
    v9 = 0;
    v2[1] = v7;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = v6 - v5;
    v11 = 24 * v10;
    v12 = 1;
    do
    {
      sub_234157EDC(*v2 + v9, (uint64_t)&v1[3 * ((v12 + *((_DWORD *)v1 + 97)) & 0xF)]);
      v9 += 24;
      ++v12;
    }
    while (v11 != v9);
  }
  return v2;
}

const char *sub_234157EDC(uint64_t a1, uint64_t a2)
{
  const char *result;

  free(*(void **)(a1 + 8));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)sub_234157C0C(result);
    *(_QWORD *)(a1 + 8) = result;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  return result;
}

void sub_234157F34(_QWORD *a1)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;

  if (a1 && (v2 = a1[1]) != 0)
  {
    if (v2 >= 0x10)
      abort();
    v3 = sub_2341573A4();
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = 0;
        v6 = 0;
        do
        {
          sub_234157EDC((uint64_t)&v4[v5], *a1 + v5 * 8);
          ++v6;
          v7 = a1[1];
          v5 += 3;
        }
        while (v6 < v7);
        v8 = v7 - 1;
      }
      else
      {
        v8 = -1;
      }
      *((_DWORD *)v4 + 96) = v8;
      *((_DWORD *)v4 + 97) = 15;
    }
  }
  else
  {
    sub_234157348();
  }
}

void sub_234157FD8(void **a1)
{
  uint64_t i;
  void **v3;

  if (a1)
  {
    for (i = 0; i != 48; i += 3)
    {
      v3 = &a1[i];
      free(a1[i + 1]);
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    free(a1[49]);
    free(a1);
  }
}

uint64_t sub_234158034(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  BOOL v3;
  _BOOL4 v4;

  v2 = *a1 >> 15;
  v3 = v2 >= *a2 >> 15;
  v4 = v2 > *a2 >> 15;
  if (v3)
    return v4;
  else
    return 0xFFFFFFFFLL;
}

double sub_234158050()
{
  _QWORD *v0;
  double result;

  v0 = sub_23418E344(0x18uLL);
  if (v0)
  {
    *(_QWORD *)&result = 1;
    *v0 = 1;
  }
  return result;
}

void sub_234158078(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);

  if (a1 && sub_234193960((unsigned int *)a1))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(void (**)(uint64_t))(v2 + 160);
      if (v3)
      {
        v3(a1);
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 4) = 0;
      }
    }
    sub_23418E3C4((_QWORD *)a1);
  }
}

uint64_t sub_2341580D0(unsigned int *a1)
{
  sub_234193914(a1);
  return 1;
}

uint64_t sub_2341580E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && (v2 = *(uint64_t (**)(void))(v1 + 112)) != 0)
    return v2();
  else
    return 0;
}

uint64_t sub_234158104(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 4294967294;
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 152);
  if (v5)
  {
    result = v5(a1, a2);
    if ((int)result < 1)
      return result;
    v3 = *(_QWORD *)(a1 + 16);
  }
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 40);
  if (v7)
    return v7(a1, a2);
  else
    return 4294967294;
}

uint64_t sub_234158184(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  __int16 v6;
  _DWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  unsigned int (*v11)(uint64_t);
  uint64_t v12;
  unsigned int (*v13)(uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);

  v4 = *(_DWORD *)(a1 + 4);
  if (v4)
  {
    if (v4 != *(_DWORD *)(a2 + 4))
    {
      v5 = 103;
      v6 = 151;
LABEL_23:
      sub_2341579B4(6, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp.c", v6);
      return 0;
    }
  }
  else
  {
    v7 = *(_DWORD **)(a2 + 16);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      v9 = *(void (**)(uint64_t))(v8 + 160);
      if (v9)
      {
        v9(a1);
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 4) = 0;
      }
    }
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 4) = *v7;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    v11 = *(unsigned int (**)(uint64_t))(v10 + 136);
    if (v11)
    {
      if (v11(a2))
      {
        v5 = 118;
        v6 = 156;
        goto LABEL_23;
      }
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = *(unsigned int (**)(uint64_t))(v12 + 136);
    if (v13)
    {
      if (v13(a1))
      {
        v14 = *(_QWORD *)(a2 + 16);
        if (v14)
        {
          v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 144);
          if (v15)
            return v15(a1, a2);
        }
        return 0;
      }
    }
  }
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || (v17 = *(_QWORD *)(a1 + 16)) == 0
    || (v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 152)) == 0
    || (result = v18(a1, a2), (_DWORD)result != 1))
  {
    v5 = 104;
    v6 = 165;
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_2341582DC(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t))(v4 + 160);
    if (v5)
    {
      result = v5(result);
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 4) = 0;
    }
  }
  *(_QWORD *)(v3 + 16) = a2;
  *(_DWORD *)(v3 + 4) = *a2;
  return result;
}

uint64_t sub_234158328(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && (v2 = *(uint64_t (**)(void))(v1 + 136)) != 0)
    return v2();
  else
    return 0;
}

uint64_t sub_234158344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(void);

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 && (v3 = *(uint64_t (**)(void))(v2 + 152)) != 0)
    return v3();
  else
    return 4294967294;
}

uint64_t sub_234158378(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 120)) != 0)
    return v2();
  else
    return 0;
}

uint64_t sub_234158398(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 128)) != 0)
    return v2();
  else
    return 0;
}

BOOL sub_2341583B8(uint64_t a1, int a2, uint64_t a3)
{
  char v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  if (a2 > 115)
  {
    if (a2 != 116)
    {
      if (a2 == 408)
        return sub_23415BA7C(a1, a3);
      goto LABEL_8;
    }
    return sub_23415AE08(a1, a3);
  }
  else
  {
    if (a2 != 6)
    {
      if (a2 == 28)
        return sub_23415A654(a1, a3);
LABEL_8:
      sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp.c", 250);
      sub_234157B2C("algorithm %d", v5, v6, v7, v8, v9, v10, v11, v3);
      return 0;
    }
    return sub_23415DA1C(a1, a3);
  }
}

uint64_t sub_234158484(uint64_t a1, int a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  int *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = *(void (**)(uint64_t))(v4 + 160);
        if (v5)
        {
          v5(a1);
          *(_QWORD *)(a1 + 8) = 0;
          *(_DWORD *)(a1 + 4) = 0;
        }
      }
    }
  }
  if (a2 <= 407)
  {
    if (a2 == 6)
    {
      v6 = &dword_250506F78;
      if (!a1)
        return 1;
LABEL_21:
      v7 = *(_QWORD *)(a1 + 16);
      if (v7)
      {
        v8 = *(void (**)(uint64_t))(v7 + 160);
        if (v8)
        {
          v8(a1);
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
      *(_QWORD *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 4) = *v6;
      return 1;
    }
    if (a2 == 116)
    {
      v6 = &dword_250506BA0;
      if (!a1)
        return 1;
      goto LABEL_21;
    }
  }
  else
  {
    switch(a2)
    {
      case 949:
        v6 = &dword_250506DE0;
        if (!a1)
          return 1;
        goto LABEL_21;
      case 948:
        v6 = &dword_250507098;
        if (!a1)
          return 1;
        goto LABEL_21;
      case 408:
        v6 = &dword_250506CC0;
        if (!a1)
          return 1;
        goto LABEL_21;
    }
  }
  sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp.c", 265);
  sub_234157B2C("algorithm %d", v10, v11, v12, v13, v14, v15, v16, a2);
  return 0;
}

uint64_t sub_2341585B4(int a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  int *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *);

  if (a1 == 948)
  {
    v6 = &dword_250507098;
  }
  else
  {
    if (a1 != 949)
    {
      sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp.c", 290);
      return 0;
    }
    v6 = &dword_250506DE0;
  }
  v7 = sub_23418E344(0x18uLL);
  v8 = (uint64_t)v7;
  if (!v7)
    goto LABEL_10;
  *v7 = 1;
  v9 = v7[2];
  if (v9)
  {
    v10 = *(void (**)(_QWORD *))(v9 + 160);
    if (v10)
    {
      v10(v7);
      *(_QWORD *)(v8 + 8) = 0;
    }
  }
  *(_QWORD *)(v8 + 16) = v6;
  *(_DWORD *)(v8 + 4) = *v6;
  if (!(*((unsigned int (**)(uint64_t, unint64_t *, uint64_t))v6 + 8))(v8, a3, a4))
  {
LABEL_10:
    sub_234158078(v8);
    return 0;
  }
  return v8;
}

uint64_t sub_23415868C(int a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  int *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *);

  if (a1 == 948)
  {
    v6 = &dword_250507098;
  }
  else
  {
    if (a1 != 949)
    {
      sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp.c", 324);
      return 0;
    }
    v6 = &dword_250506DE0;
  }
  v7 = sub_23418E344(0x18uLL);
  v8 = (uint64_t)v7;
  if (!v7)
    goto LABEL_10;
  *v7 = 1;
  v9 = v7[2];
  if (v9)
  {
    v10 = *(void (**)(_QWORD *))(v9 + 160);
    if (v10)
    {
      v10(v7);
      *(_QWORD *)(v8 + 8) = 0;
    }
  }
  *(_QWORD *)(v8 + 16) = v6;
  *(_DWORD *)(v8 + 4) = *v6;
  if (!(*((unsigned int (**)(uint64_t, _OWORD *, uint64_t))v6 + 9))(v8, a3, a4))
  {
LABEL_10:
    sub_234158078(v8);
    return 0;
  }
  return v8;
}

uint64_t sub_234158764(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 80);
  if (v1)
    return v1();
  sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp.c", 348);
  return 0;
}

uint64_t sub_2341587A8(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 88);
  if (v1)
    return v1();
  sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp.c", 358);
  return 0;
}

uint64_t sub_2341587EC(uint64_t *a1)
{
  return sub_234159734(a1, -1, 56);
}

uint64_t sub_234158804(uint64_t *a1)
{
  return sub_234159734(a1, -1, 56);
}

uint64_t sub_23415881C(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 96);
  if (v1)
    return v1();
  sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp.c", 409);
  return 0;
}

uint64_t sub_234158860(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 104);
  if (v1)
    return v1();
  sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp.c", 418);
  return 0;
}

uint64_t sub_2341588A4(__int128 *a1)
{
  int *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, __int128 *, _QWORD *);
  int v6;
  __int16 v7;
  char v9;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;

  v12 = 0uLL;
  v11 = 0uLL;
  v10[0] = 0;
  v10[1] = 0;
  v9 = 0;
  if (!sub_2341493F4(a1, &v12, 536870928)
    || !sub_2341493F4(&v12, &v11, 536870928)
    || !sub_2341493F4(&v12, v10, 3)
    || *((_QWORD *)&v12 + 1))
  {
    v6 = 102;
    v7 = 106;
LABEL_13:
    sub_2341579B4(6, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", v7);
    return 0;
  }
  v1 = sub_234158A04(&v11);
  if (!v1)
  {
    v6 = 128;
    v7 = 111;
    goto LABEL_13;
  }
  v2 = v1;
  if (!sub_234148D28(v10, &v9) || v9)
  {
    v6 = 102;
    v7 = 118;
    goto LABEL_13;
  }
  sub_234158050();
  v4 = v3;
  if (!v3)
  {
LABEL_19:
    sub_234158078(v4);
    return 0;
  }
  sub_2341582DC(v3, v2);
  v5 = *(unsigned int (**)(uint64_t, __int128 *, _QWORD *))(*(_QWORD *)(v4 + 16) + 24);
  if (!v5)
  {
    sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 131);
    goto LABEL_19;
  }
  if (!v5(v4, &v11, v10))
    goto LABEL_19;
  return v4;
}

int *sub_234158A04(__int128 *a1)
{
  uint64_t v1;
  size_t v2;
  const void *v3;
  int *v4;
  const void *v6;
  size_t v7;

  v6 = 0;
  v7 = 0;
  if (!sub_2341493F4(a1, &v6, 6))
    return 0;
  v1 = 0;
  v3 = v6;
  v2 = v7;
  while (1)
  {
    v4 = off_250506A30[v1];
    if (v2 == *((unsigned __int8 *)v4 + 13) && (!*((_BYTE *)v4 + 13) || !memcmp(v3, v4 + 1, v2)))
      break;
    if (++v1 == 5)
      return 0;
  }
  return v4;
}

uint64_t sub_234158A94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(void);

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(uint64_t (**)(void))(v2 + 32);
    if (v3)
      return v3();
  }
  sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 147);
  return 0;
}

uint64_t sub_234158ADC(__int128 *a1)
{
  int *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, __int128 *, _QWORD *);
  int v6;
  __int16 v7;
  unint64_t v9;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;

  v12 = 0uLL;
  v11 = 0uLL;
  v10[0] = 0;
  v10[1] = 0;
  v9 = 0;
  if (!sub_2341493F4(a1, &v12, 536870928)
    || !sub_2341495A8(&v12, &v9)
    || v9
    || !sub_2341493F4(&v12, &v11, 536870928)
    || !sub_2341493F4(&v12, v10, 4))
  {
    v6 = 102;
    v7 = 163;
LABEL_12:
    sub_2341579B4(6, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", v7);
    return 0;
  }
  v1 = sub_234158A04(&v11);
  if (!v1)
  {
    v6 = 128;
    v7 = 168;
    goto LABEL_12;
  }
  v2 = v1;
  sub_234158050();
  v4 = v3;
  if (!v3)
  {
LABEL_17:
    sub_234158078(v4);
    return 0;
  }
  sub_2341582DC(v3, v2);
  v5 = *(unsigned int (**)(uint64_t, __int128 *, _QWORD *))(*(_QWORD *)(v4 + 16) + 48);
  if (!v5)
  {
    sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 183);
    goto LABEL_17;
  }
  if (!v5(v4, &v11, v10))
    goto LABEL_17;
  return v4;
}

uint64_t sub_234158C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(void);

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(uint64_t (**)(void))(v2 + 56);
    if (v3)
      return v3();
  }
  sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 199);
  return 0;
}

uint64_t sub_234158C60(int a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v15;

  if (a4 < 0)
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 250);
    return 0;
  }
  *(_QWORD *)&v15 = *a3;
  *((_QWORD *)&v15 + 1) = a4;
  sub_234158050();
  if (v8)
  {
    v9 = v8;
    switch(a1)
    {
      case 6:
        v11 = sub_234193C88(&v15);
        if (v11 && sub_23415DA1C(v9, (uint64_t)v11))
          goto LABEL_20;
        sub_23417D814((uint64_t)v11);
        break;
      case 116:
        v12 = sub_234155274(&v15);
        if (v12 && sub_23415AE08(v9, (uint64_t)v12))
          goto LABEL_20;
        sub_234153638((uint64_t)v12);
        break;
      case 408:
        v10 = sub_234155834(&v15, 0);
        if (v10 && sub_23415BA7C(v9, v10))
          goto LABEL_20;
        sub_234174FAC(v10);
        break;
      default:
        sub_2341579B4(6, 0, 127, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 238);
        break;
    }
    sub_234158078(v9);
  }
  sub_234157348();
  *(_QWORD *)&v15 = *a3;
  *((_QWORD *)&v15 + 1) = a4;
  v13 = sub_234158ADC(&v15);
  v9 = v13;
  if (!v13)
    return v9;
  if (*(_DWORD *)(v13 + 4) != a1)
  {
    sub_2341579B4(6, 0, 103, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 267);
    sub_234158078(v9);
    return 0;
  }
LABEL_20:
  if (a2)
  {
    sub_234158078(*a2);
    *a2 = v9;
  }
  *a3 = v15;
  return v9;
}

uint64_t sub_234158E0C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a3 < 0)
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 305);
    return 0;
  }
  else
  {
    *(_QWORD *)&v12 = *a2;
    *((_QWORD *)&v12 + 1) = a3;
    v6 = sub_234158ADC(&v12);
    if (v6)
    {
      v7 = v6;
      if (a1)
      {
        sub_234158078(*a1);
        *a1 = v7;
      }
      *a2 = v12;
    }
    else
    {
      sub_234157348();
      v8 = *a2;
      v13 = 0uLL;
      *(_QWORD *)&v14 = v8;
      *((_QWORD *)&v14 + 1) = a3;
      if (sub_2341493F4(&v14, &v13, 536870928) && *((_QWORD *)&v13 + 1))
      {
        v9 = -1;
        while (sub_2341491FC(&v13, 0, 0, 0))
        {
          ++v9;
          if (!*((_QWORD *)&v13 + 1))
          {
            if (v9 == 5)
            {
              v10 = 116;
            }
            else
            {
              if (v9 != 3)
                break;
              v10 = 408;
            }
            return sub_234158C60(v10, a1, a2, a3);
          }
        }
      }
      v10 = 6;
      return sub_234158C60(v10, a1, a2, a3);
    }
  }
  return v7;
}

uint64_t sub_234158F30(uint64_t a1, void **a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t **v7;

  v3 = *(_DWORD *)(a1 + 4);
  switch(v3)
  {
    case 408:
      v6 = sub_23415BAB4(a1);
      return sub_234156784(v6, a2);
    case 116:
      v7 = (uint64_t **)sub_23415AE40(a1);
      return sub_234155604(v7, a2);
    case 6:
      v4 = sub_23415DA54(a1);
      return sub_2341940C4(v4, a2);
    default:
      sub_2341579B4(6, 0, 129, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 345);
      return 0xFFFFFFFFLL;
  }
}

uint64_t sub_234158FC4(int a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 v12;

  sub_234158050();
  v9 = v8;
  if (!v8)
    return v9;
  *(_QWORD *)&v12 = *a3;
  *((_QWORD *)&v12 + 1) = a4 & ~(a4 >> 63);
  if (a1 != 6)
  {
    sub_2341579B4(6, 0, 129, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_asn1.c", 375);
LABEL_9:
    sub_234158078(v9);
    return 0;
  }
  v10 = sub_2341939C4(&v12);
  if (!v10 || !sub_23415DA1C(v9, (uint64_t)v10))
  {
    sub_23417D814((uint64_t)v10);
    goto LABEL_9;
  }
  *a3 = v12;
  if (a2)
  {
    sub_234158078(*a2);
    *a2 = v9;
  }
  return v9;
}

uint64_t sub_234159098(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v7;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = a3;
  v5 = sub_2341588A4(&v7);
  if (v5)
  {
    if (a1)
    {
      sub_234158078(*a1);
      *a1 = v5;
    }
    *a2 = v7;
  }
  return v5;
}

uint64_t sub_234159108(uint64_t result, void **a2)
{
  uint64_t v3;
  _OWORD v4[3];

  if (result)
  {
    v3 = result;
    memset(v4, 0, sizeof(v4));
    if (sub_234147B54((uint64_t)v4, 0x80uLL) && sub_234158A94((uint64_t)v4, v3))
    {
      return sub_2341475C8((uint64_t)v4, a2);
    }
    else
    {
      sub_234147BE4((uint64_t)v4);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_23415917C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v9 = *a2;
  *((_QWORD *)&v9 + 1) = a3;
  v5 = sub_2341588A4(&v9);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sub_23415DA98(v5);
  sub_234158078(v6);
  if (v7)
  {
    if (a1)
    {
      sub_23417D814(*a1);
      *a1 = v7;
    }
    *a2 = v9;
  }
  return v7;
}

uint64_t sub_234159200(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    return 0;
  sub_234158050();
  v5 = v4;
  if (v4 && sub_23415D9D4(v4, a1))
    v6 = sub_234159108(v5, a2);
  else
    v6 = 0xFFFFFFFFLL;
  sub_234158078(v5);
  return v6;
}

uint64_t sub_234159274(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v9 = *a2;
  *((_QWORD *)&v9 + 1) = a3;
  v5 = sub_2341588A4(&v9);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sub_23415AE84(v5);
  sub_234158078(v6);
  if (v7)
  {
    if (a1)
    {
      sub_234153638(*a1);
      *a1 = v7;
    }
    *a2 = v9;
  }
  return v7;
}

uint64_t sub_2341592F8(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    return 0;
  sub_234158050();
  v5 = v4;
  if (v4 && sub_23415ADC0(v4, a1))
    v6 = sub_234159108(v5, a2);
  else
    v6 = 0xFFFFFFFFLL;
  sub_234158078(v5);
  return v6;
}

uint64_t sub_23415936C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  if (a3 < 0)
    return 0;
  *(_QWORD *)&v9 = *a2;
  *((_QWORD *)&v9 + 1) = a3;
  v5 = sub_2341588A4(&v9);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sub_23415BAF8(v5);
  sub_234158078(v6);
  if (v7)
  {
    if (a1)
    {
      sub_234174FAC(*a1);
      *a1 = v7;
    }
    *a2 = v9;
  }
  return v7;
}

uint64_t sub_2341593F0(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    return 0;
  sub_234158050();
  v5 = v4;
  if (v4 && sub_23415BA34(v4, a1))
    v6 = sub_234159108(v5, a2);
  else
    v6 = 0xFFFFFFFFLL;
  sub_234158078(v5);
  return v6;
}

_QWORD *sub_234159464(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 && (v3 = *(_QWORD *)(a1 + 16)) != 0)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
      return sub_234159508((unsigned int *)a1, a2, v4);
    sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 122);
    sub_234157B2C("algorithm %d", v6, v7, v8, v9, v10, v11, v12, **(_DWORD **)(a1 + 16));
  }
  else
  {
    sub_2341579B4(6, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 116);
  }
  return 0;
}

_QWORD *sub_234159508(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int (*v8)(_QWORD *);

  v6 = sub_23418E344(0x30uLL);
  v7 = v6;
  if (v6)
  {
    *v6 = a3;
    v6[1] = a2;
    *((_DWORD *)v6 + 8) = 0;
    if (a1)
    {
      sub_2341580D0(a1);
      v7[2] = a1;
    }
    v8 = *(int (**)(_QWORD *))(a3 + 8);
    if (v8 && v8(v7) <= 0)
    {
      sub_234158078(v7[2]);
      sub_23418E3C4(v7);
      return 0;
    }
  }
  return v7;
}

_QWORD *sub_23415958C(int a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1;
  v3 = 0;
  while (1)
  {
    v4 = *(_UNKNOWN **)((char *)&off_250506A58 + v3);
    if (*v4 == a1)
      break;
    v3 += 8;
    if (v3 == 40)
    {
      sub_2341579B4(6, 0, 128, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 133);
      sub_234157B2C("algorithm %d", v5, v6, v7, v8, v9, v10, v11, v2);
      return 0;
    }
  }
  return sub_234159508(0, a2, (uint64_t)v4);
}

void sub_23415961C(uint64_t *a1)
{
  void (*v2)(uint64_t *);

  if (a1)
  {
    if (*a1)
    {
      v2 = *(void (**)(uint64_t *))(*a1 + 24);
      if (v2)
        v2(a1);
    }
    sub_234158078(a1[2]);
    sub_234158078(a1[3]);
    sub_23418E3C4(a1);
  }
}

uint64_t *sub_23415966C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int *v4;
  unsigned int *v5;

  if (!*(_QWORD *)a1 || !*(_QWORD *)(*(_QWORD *)a1 + 16))
    return 0;
  v2 = sub_23418E344(0x30uLL);
  v3 = v2;
  if (v2)
  {
    *v2 = *(_QWORD *)a1;
    v2[1] = *(_QWORD *)(a1 + 8);
    *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
    v4 = *(unsigned int **)(a1 + 16);
    if (v4)
    {
      sub_2341580D0(v4);
      v3[2] = *(_QWORD *)(a1 + 16);
    }
    v5 = *(unsigned int **)(a1 + 24);
    if (v5)
    {
      sub_2341580D0(v5);
      v3[3] = *(_QWORD *)(a1 + 24);
    }
    if ((*(int (**)(uint64_t *, uint64_t))(*(_QWORD *)a1 + 16))(v3, a1) <= 0)
    {
      *v3 = 0;
      sub_23415961C(v3);
      sub_2341579B4(6, 0, 6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 180);
      return 0;
    }
  }
  return v3;
}

uint64_t sub_234159734(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  int v5;
  int v6;
  __int16 v7;

  if (!a1 || (v3 = *a1) == 0 || (v4 = *(uint64_t (**)(void))(v3 + 112)) == 0)
  {
    v6 = 101;
    v7 = 192;
    goto LABEL_11;
  }
  if (a2 != -1 && *(_DWORD *)v3 != a2)
  {
    v6 = 125;
    v7 = 196;
    goto LABEL_11;
  }
  v5 = *((_DWORD *)a1 + 8);
  if (!v5)
  {
    v6 = 123;
    v7 = 201;
    goto LABEL_11;
  }
  if (a3 != -1 && (v5 & a3) == 0)
  {
    v6 = 114;
    v7 = 206;
LABEL_11:
    sub_2341579B4(6, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v7);
    return 0;
  }
  return v4();
}

uint64_t sub_23415980C(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0 && (*(_QWORD *)(v1 + 40) || *(_QWORD *)(v1 + 48)))
  {
    *((_DWORD *)a1 + 8) = 8;
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 216);
    return 0;
  }
}

uint64_t sub_234159868(_DWORD *a1)
{
  uint64_t (*v1)(void);
  int v3;
  __int16 v4;

  if (a1 && *(_QWORD *)a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 40)) != 0)
  {
    if (a1[8] == 8)
      return v1();
    v3 = 126;
    v4 = 231;
  }
  else
  {
    v3 = 125;
    v4 = 227;
  }
  sub_2341579B4(6, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v4);
  return 0;
}

uint64_t sub_2341598DC(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0 && (*(_QWORD *)(v1 + 56) || *(_QWORD *)(v1 + 64)))
  {
    *((_DWORD *)a1 + 8) = 16;
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 240);
    return 0;
  }
}

uint64_t sub_234159938(_DWORD *a1)
{
  uint64_t (*v1)(void);
  int v3;
  __int16 v4;

  if (a1 && *(_QWORD *)a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 56)) != 0)
  {
    if (a1[8] == 16)
      return v1();
    v3 = 126;
    v4 = 254;
  }
  else
  {
    v3 = 125;
    v4 = 250;
  }
  sub_2341579B4(6, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v4);
  return 0;
}

uint64_t sub_2341599AC(_DWORD *a1)
{
  if (a1 && *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 80))
  {
    a1[8] = 64;
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 262);
    return 0;
  }
}

uint64_t sub_234159A00(_DWORD *a1)
{
  uint64_t (*v1)(void);
  int v3;
  __int16 v4;

  if (a1 && *(_QWORD *)a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 80)) != 0)
  {
    if (a1[8] == 64)
      return v1();
    v3 = 126;
    v4 = 276;
  }
  else
  {
    v3 = 125;
    v4 = 272;
  }
  sub_2341579B4(6, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v4);
  return 0;
}

uint64_t sub_234159A74(_DWORD *a1)
{
  if (a1 && *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 88))
  {
    a1[8] = 128;
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 284);
    return 0;
  }
}

uint64_t sub_234159AC8(_DWORD *a1)
{
  uint64_t (*v1)(void);
  int v3;
  __int16 v4;

  if (a1 && *(_QWORD *)a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 88)) != 0)
  {
    if (a1[8] == 128)
      return v1();
    v3 = 126;
    v4 = 298;
  }
  else
  {
    v3 = 125;
    v4 = 294;
  }
  sub_2341579B4(6, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v4);
  return 0;
}

uint64_t sub_234159B3C(_DWORD *a1)
{
  if (a1 && *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 72))
  {
    a1[8] = 32;
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 306);
    return 0;
  }
}

uint64_t sub_234159B90(_DWORD *a1)
{
  uint64_t (*v1)(void);
  int v3;
  __int16 v4;

  if (a1 && *(_QWORD *)a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 72)) != 0)
  {
    if (a1[8] == 32)
      return v1();
    v3 = 126;
    v4 = 320;
  }
  else
  {
    v3 = 125;
    v4 = 316;
  }
  sub_2341579B4(6, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v4);
  return 0;
}

uint64_t sub_234159C04(_DWORD *a1)
{
  if (a1 && *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 96))
  {
    a1[8] = 256;
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 328);
    return 0;
  }
}

uint64_t sub_234159C58(uint64_t a1, unsigned int *a2)
{
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, unsigned int *);
  int v6;
  int v7;
  uint64_t result;
  int v9;
  __int16 v10;
  uint64_t v11;

  if (!a1
    || (v3 = *(_QWORD **)a1) == 0
    || !v3[12] && !v3[10] && !v3[11]
    || (v5 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, unsigned int *))v3[14]) == 0)
  {
    v9 = 125;
    v10 = 340;
LABEL_14:
    sub_2341579B4(6, 0, v9, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v10);
    return 0;
  }
  v6 = *(_DWORD *)(a1 + 32);
  if (v6 != 64 && v6 != 128 && v6 != 256)
  {
    v9 = 126;
    v10 = 346;
    goto LABEL_14;
  }
  v7 = v5(a1, 3, 0, a2);
  if (v7 < 1)
    return 0;
  if (v7 == 2)
    return 1;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v9 = 120;
    v10 = 361;
    goto LABEL_14;
  }
  if (*(_DWORD *)(v11 + 4) != a2[1])
  {
    v9 = 103;
    v10 = 366;
    goto LABEL_14;
  }
  if (!sub_234158328((uint64_t)a2) && !sub_234158344(*(_QWORD *)(a1 + 16), (uint64_t)a2))
  {
    v9 = 104;
    v10 = 377;
    goto LABEL_14;
  }
  sub_234158078(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = a2;
  if ((*(int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 112))(a1, 3, 1, a2) > 0)
  {
    sub_2341580D0(a2);
    return 1;
  }
  result = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_234159DF8(_DWORD *a1)
{
  uint64_t (*v1)(void);
  int v3;
  __int16 v4;

  if (a1 && *(_QWORD *)a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 96)) != 0)
  {
    if (a1[8] == 256)
      return v1();
    v3 = 126;
    v4 = 401;
  }
  else
  {
    v3 = 125;
    v4 = 397;
  }
  sub_2341579B4(6, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v4);
  return 0;
}

uint64_t sub_234159E6C(_DWORD *a1)
{
  if (a1 && *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 32))
  {
    a1[8] = 4;
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 409);
    return 0;
  }
}

uint64_t sub_234159EC0(_DWORD *a1, uint64_t *a2)
{
  unsigned int (*v3)(_DWORD *);
  uint64_t v5;
  uint64_t result;
  int v7;
  __int16 v8;

  if (!a1 || !*(_QWORD *)a1 || (v3 = *(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 32)) == 0)
  {
    v7 = 125;
    v8 = 418;
LABEL_12:
    sub_2341579B4(6, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v8);
    return 0;
  }
  if (a1[8] != 4)
  {
    v7 = 126;
    v8 = 422;
    goto LABEL_12;
  }
  if (!a2)
    return 0;
  if (*a2)
    goto LABEL_9;
  sub_234158050();
  *a2 = v5;
  if (!v5)
  {
    v7 = 6;
    v8 = 433;
    goto LABEL_12;
  }
  v3 = *(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 32);
LABEL_9:
  if (v3(a1))
    return 1;
  sub_234158078(*a2);
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_234159FA0(_DWORD *a1)
{
  if (a1 && *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 104))
  {
    a1[8] = 512;
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 125, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", 448);
    return 0;
  }
}

uint64_t sub_234159FF4(_DWORD *a1, uint64_t *a2)
{
  unsigned int (*v3)(_DWORD *);
  uint64_t v5;
  uint64_t result;
  int v7;
  __int16 v8;

  if (!a1 || !*(_QWORD *)a1 || (v3 = *(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 104)) == 0)
  {
    v7 = 125;
    v8 = 457;
LABEL_12:
    sub_2341579B4(6, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/evp_ctx.c", v8);
    return 0;
  }
  if (a1[8] != 512)
  {
    v7 = 126;
    v8 = 461;
    goto LABEL_12;
  }
  if (!a2)
    return 0;
  if (*a2)
    goto LABEL_9;
  sub_234158050();
  *a2 = v5;
  if (!v5)
  {
    v7 = 6;
    v8 = 472;
    goto LABEL_12;
  }
  v3 = *(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 104);
LABEL_9:
  if (v3(a1))
    return 1;
  sub_234158078(*a2);
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_23415A0D4(uint64_t a1)
{
  uint64_t result;

  result = (uint64_t)sub_23418E344(4uLL);
  if (result)
  {
    *(_QWORD *)(a1 + 40) = result;
    return 1;
  }
  return result;
}

uint64_t sub_23415A104(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (uint64_t)sub_23418E344(4uLL);
  if (result)
  {
    *(_QWORD *)(a1 + 40) = result;
    *(_DWORD *)result = **(_DWORD **)(a2 + 40);
    return 1;
  }
  return result;
}

void sub_23415A144(uint64_t a1)
{
  sub_23418E3C4(*(_QWORD **)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t sub_23415A16C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = sub_23416FCA4();
  if (v4 && sub_23415A654(a2, (uint64_t)v4))
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (!v5 || sub_234158184(a2, v5))
      return sub_23416FE64((uint64_t)v4);
  }
  else
  {
    sub_23416FCE0((uint64_t)v4);
  }
  return 0;
}

uint64_t sub_23415A1E4(_QWORD *a1, char *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  BOOL v6;
  int v7;
  __int16 v8;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v3 = a1[2];
  if (!v3 || (v4 = a1[3]) == 0)
  {
    v7 = 117;
    v8 = 68;
    goto LABEL_10;
  }
  v5 = *(uint64_t ***)(v3 + 8);
  if (v5)
    v6 = *(_QWORD *)(v4 + 8) == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = 117;
    v8 = 75;
LABEL_10:
    sub_2341579B4(6, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dh.c", v8);
    return 0;
  }
  v12 = (_DWORD *)a1[5];
  v13 = sub_2341536EC(*(_QWORD *)(v4 + 8));
  if (!v13)
  {
    v7 = 117;
    v8 = 81;
    goto LABEL_10;
  }
  if (a2)
  {
    v14 = v13;
    v15 = *a3;
    if (v15 < (int)sub_234170108(v5))
    {
      v7 = 100;
      v8 = 91;
      goto LABEL_10;
    }
    if (*v12)
      v17 = sub_2341702EC(a2, v14, v5);
    else
      v17 = sub_2341702F0(a2, v14, (uint64_t)v5);
    if ((v17 & 0x80000000) != 0)
      return 0;
    v16 = v17;
  }
  else
  {
    v16 = (int)sub_234170108(v5);
  }
  *a3 = v16;
  return 1;
}

uint64_t sub_23415A328(uint64_t a1, int a2, int a3)
{
  if (a2 == 3)
    return 1;
  if (a2 == 4115)
  {
    **(_DWORD **)(a1 + 40) = a3;
    return 1;
  }
  else
  {
    sub_2341579B4(6, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dh.c", 119);
    return 0;
  }
}

uint64_t sub_23415A384(uint64_t *a1)
{
  return sub_234159734(a1, 28, 256);
}

BOOL sub_23415A39C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((int)sub_23415A544(a1, a2) < 1)
    return 0;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = sub_2341536EC(*(_QWORD *)(a1 + 8));
  v6 = sub_2341536EC(v4);
  return sub_234162A28(v5, v6) == 0;
}

uint64_t sub_23415A3FC(uint64_t a1)
{
  return sub_234170108(*(uint64_t ***)(a1 + 8));
}

uint64_t sub_23415A404(uint64_t a1)
{
  return sub_2341536E4(*(uint64_t ***)(a1 + 8));
}

BOOL sub_23415A40C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return !v1 || !sub_2341536FC(*(_QWORD *)(a1 + 8)) || sub_2341414C0(v1) == 0;
}

uint64_t sub_23415A450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  void **v10;
  void **v11;
  BOOL v12;

  if (sub_23415A40C(a2))
  {
    sub_2341579B4(6, 0, 118, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dh_asn1.c", 36);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = sub_234153704(v4);
    v6 = sub_2341536FC(v4);
    v7 = sub_234162014(v6);
    if (v5)
      v8 = sub_234162014(v5);
    else
      v8 = 0;
    v9 = sub_2341414C0(v4);
    v10 = sub_234162014(v9);
    v11 = v10;
    if (v7)
    {
      v12 = v8 || v5 == 0;
      if (v12 && v10 && sub_23416FDCC(*(_QWORD *)(a1 + 8), (uint64_t)v7, (uint64_t)v8, (uint64_t)v10))
        return 1;
    }
    sub_234161FC4((_QWORD **)v7);
    sub_234161FC4((_QWORD **)v8);
    sub_234161FC4((_QWORD **)v11);
  }
  return 0;
}

uint64_t sub_23415A544(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (sub_23415A40C(a1) || sub_23415A40C(a2))
    return 4294967294;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = sub_2341536FC(v5);
  v8 = sub_2341536FC(v6);
  if (sub_234162A28(v7, v8))
    return 0;
  v9 = sub_2341414C0(v5);
  v10 = sub_2341414C0(v6);
  return sub_234162A28(v9, v10) == 0;
}

void sub_23415A5E4(uint64_t a1)
{
  sub_23416FCE0(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t sub_23415A60C(uint64_t a1, uint64_t a2)
{
  sub_2341582DC(a1, dword_250506AF8);
  *(_QWORD *)(a1 + 8) = a2;
  if (!a2)
    return 0;
  sub_234170544(a2);
  return 1;
}

BOOL sub_23415A654(uint64_t a1, uint64_t a2)
{
  sub_2341582DC(a1, dword_250506AF8);
  *(_QWORD *)(a1 + 8) = a2;
  return a2 != 0;
}

uint64_t sub_23415A68C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == 28)
    return *(_QWORD *)(a1 + 8);
  sub_2341579B4(6, 0, 138, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dh_asn1.c", 108);
  return 0;
}

uint64_t sub_23415A6D0(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 4) == 28)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
      sub_234170544(*(_QWORD *)(a1 + 8));
  }
  else
  {
    sub_2341579B4(6, 0, 138, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dh_asn1.c", 108);
    return 0;
  }
  return v1;
}

uint64_t sub_23415A72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  __int16 v7;
  uint64_t result;
  _QWORD *v9;

  if (*(_QWORD *)(a2 + 8))
  {
    v6 = sub_2341550E4((__int128 *)a2);
    if (!v6 || *(_QWORD *)(a2 + 8))
    {
      v7 = 81;
LABEL_10:
      sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dsa_asn1.c", v7);
      goto LABEL_11;
    }
  }
  else
  {
    result = (uint64_t)sub_2341535F4();
    v6 = (uint64_t *)result;
    if (!result)
      return result;
  }
  v9 = sub_234161F88();
  v6[3] = (uint64_t)v9;
  if (v9)
  {
    if (sub_234146860((__int128 *)a3, v9) && !*(_QWORD *)(a3 + 8))
    {
      sub_2341582DC(a1, &dword_250506BA0);
      *(_QWORD *)(a1 + 8) = v6;
      return 1;
    }
    v7 = 93;
    goto LABEL_10;
  }
LABEL_11:
  sub_234153638((uint64_t)v6);
  return 0;
}

uint64_t sub_23415A7F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _BOOL4 v4;
  _OWORD v6[3];
  _OWORD v7[3];
  _OWORD v8[3];
  _OWORD v9[3];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)v3 && *(_QWORD *)(v3 + 8) && *(_QWORD *)(v3 + 16) != 0;
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  if (sub_234147F60(a1, (uint64_t)v9, 0x20000010u)
    && sub_234147F60((uint64_t *)v9, (uint64_t)v8, 0x20000010u)
    && sub_234147F60((uint64_t *)v8, (uint64_t)v7, 6u)
    && sub_23414817C((uint64_t)v7, &unk_250506BA4, 7uLL)
    && (!v4 || sub_2341551C8((uint64_t *)v8, (uint64_t **)v3))
    && sub_234147F60((uint64_t *)v9, (uint64_t)v6, 3u)
    && sub_234148008((uint64_t)v6, 0)
    && sub_234146908((uint64_t *)v6, *(uint64_t **)(v3 + 24))
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(6, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dsa_asn1.c", 121);
  return 0;
}

BOOL sub_23415A940(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = sub_2341536EC(*(_QWORD *)(a2 + 8));
  v4 = sub_2341536EC(v2);
  return sub_234162A28(v3, v4) == 0;
}

uint64_t sub_23415A984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  __int16 v7;
  unint64_t **v8;
  _QWORD *v10;
  unint64_t **v11;
  _QWORD *v12;

  v6 = sub_2341550E4((__int128 *)a2);
  if (!v6 || *(_QWORD *)(a2 + 8))
  {
    v7 = 135;
LABEL_4:
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dsa_asn1.c", v7);
LABEL_5:
    v8 = 0;
LABEL_6:
    sub_234162D80(v8);
    sub_234153638((uint64_t)v6);
    return 0;
  }
  v10 = sub_234161F88();
  v6[4] = (uint64_t)v10;
  if (!v10)
    goto LABEL_5;
  if (!sub_234146860((__int128 *)a3, v10) || *(_QWORD *)(a3 + 8))
  {
    v7 = 145;
    goto LABEL_4;
  }
  if (!sub_234154B6C(v6))
  {
    v7 = 153;
    goto LABEL_4;
  }
  sub_234162D58();
  v8 = v11;
  v12 = sub_234161F88();
  v6[3] = (uint64_t)v12;
  if (!v8 || !v12 || !sub_234166004((uint64_t)v12, v6[2], v6[4], *v6, (uint64_t)v8, 0))
    goto LABEL_6;
  sub_234162D80(v8);
  sub_2341582DC(a1, &dword_250506BA0);
  *(_QWORD *)(a1 + 8) = v6;
  return 1;
}

uint64_t sub_23415AA94(uint64_t *a1, uint64_t a2)
{
  uint64_t **v2;
  int v5;
  __int16 v6;
  _OWORD v7[3];
  _OWORD v8[3];
  _OWORD v9[3];
  _OWORD v10[3];

  v2 = *(uint64_t ***)(a2 + 8);
  if (v2 && v2[4])
  {
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    memset(v8, 0, sizeof(v8));
    memset(v7, 0, sizeof(v7));
    if (sub_234147F60(a1, (uint64_t)v10, 0x20000010u)
      && sub_2341484FC((uint64_t)v10, 0)
      && sub_234147F60((uint64_t *)v10, (uint64_t)v9, 0x20000010u)
      && sub_234147F60((uint64_t *)v9, (uint64_t)v8, 6u)
      && sub_23414817C((uint64_t)v8, &unk_250506BA4, 7uLL)
      && sub_2341551C8((uint64_t *)v9, v2)
      && sub_234147F60((uint64_t *)v10, (uint64_t)v7, 4u)
      && sub_234146908((uint64_t *)v7, v2[4])
      && sub_234147CB0(a1))
    {
      return 1;
    }
    v5 = 105;
    v6 = 194;
  }
  else
  {
    v5 = 118;
    v6 = 179;
  }
  sub_2341579B4(6, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dsa_asn1.c", v6);
  return 0;
}

uint64_t *sub_23415ABD4(uint64_t a1)
{
  return sub_2341549F4(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23415ABDC(uint64_t a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)sub_2341536FC(*(_QWORD *)(a1 + 8));
  return sub_2341621D4(v1);
}

BOOL sub_23415ABF4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return !sub_2341536FC(v1) || !sub_2341414C0(v1) || sub_234153704(v1) == 0;
}

void **sub_23415AC40(uint64_t a1, uint64_t a2)
{
  void ***v2;
  uint64_t *v3;

  v2 = *(void ****)(a1 + 8);
  v3 = *(uint64_t **)(a2 + 8);
  if (sub_23415AEE0(v2, *v3) && sub_23415AEE0(v2 + 1, v3[1]))
    return sub_23415AEE0(v2 + 2, v3[2]);
  else
    return 0;
}

BOOL sub_23415AC98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = sub_2341536FC(v2);
  v5 = sub_2341536FC(v3);
  if (sub_234162A28(v4, v5))
    return 0;
  v6 = sub_2341414C0(v2);
  v7 = sub_2341414C0(v3);
  if (sub_234162A28(v6, v7))
    return 0;
  v9 = sub_234153704(v2);
  v10 = sub_234153704(v3);
  return sub_234162A28(v9, v10) == 0;
}

void sub_23415AD38(uint64_t a1)
{
  sub_234153638(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t sub_23415AD60()
{
  sub_2341579B4(6, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dsa_asn1.c", 300);
  return 0;
}

uint64_t sub_23415AD90()
{
  sub_2341579B4(6, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dsa_asn1.c", 306);
  return 0;
}

uint64_t sub_23415ADC0(uint64_t a1, uint64_t a2)
{
  sub_2341582DC(a1, &dword_250506BA0);
  *(_QWORD *)(a1 + 8) = a2;
  if (!a2)
    return 0;
  sub_2341536C8(a2);
  return 1;
}

BOOL sub_23415AE08(uint64_t a1, uint64_t a2)
{
  sub_2341582DC(a1, &dword_250506BA0);
  *(_QWORD *)(a1 + 8) = a2;
  return a2 != 0;
}

uint64_t sub_23415AE40(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == 116)
    return *(_QWORD *)(a1 + 8);
  sub_2341579B4(6, 0, 108, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dsa_asn1.c", 326);
  return 0;
}

uint64_t sub_23415AE84(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 4) == 116)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
      sub_2341536C8(*(_QWORD *)(a1 + 8));
  }
  else
  {
    sub_2341579B4(6, 0, 108, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_dsa_asn1.c", 326);
    return 0;
  }
  return v1;
}

void **sub_23415AEE0(void ***a1, uint64_t a2)
{
  void **result;
  void **v4;

  result = sub_234162014(a2);
  if (result)
  {
    v4 = result;
    sub_234161FC4((_QWORD **)*a1);
    *a1 = v4;
    return (void **)1;
  }
  return result;
}

uint64_t sub_23415AF1C(uint64_t a1)
{
  uint64_t result;

  result = (uint64_t)sub_23418E344(0x10uLL);
  if (result)
  {
    *(_QWORD *)(a1 + 40) = result;
    return 1;
  }
  return result;
}

uint64_t sub_23415AF4C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;

  result = (uint64_t)sub_23418E344(0x10uLL);
  if (result)
  {
    *(_QWORD *)(a1 + 40) = result;
    v5 = *(_QWORD **)(a2 + 40);
    *(_QWORD *)result = *v5;
    *(_QWORD *)(result + 8) = v5[1];
    return 1;
  }
  return result;
}

void sub_23415AF94(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 40);
  if (v1)
    sub_23418E3C4(v1);
}

uint64_t sub_23415AFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!v3)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4)
    {
      sub_2341579B4(6, 0, 124, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec.c", 212);
      return 0;
    }
    v3 = sub_2341536FC(*(_QWORD *)(v4 + 8));
  }
  v5 = sub_234174EA4();
  v6 = (uint64_t)v5;
  if (v5 && sub_2341750E4(v5, v3) && sub_234175CB8(v6))
  {
    sub_23415BA7C(a2, v6);
    return 1;
  }
  sub_234174FAC(v6);
  return 0;
}

uint64_t sub_23415B050(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, size_t a5)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t **)(v6 + 8);
  if (!a2)
  {
    *a3 = sub_234156B74(*(_QWORD *)(v6 + 8));
    return 1;
  }
  v11 = *a3;
  if (v11 < sub_234156B74(*(_QWORD *)(v6 + 8)))
  {
    sub_2341579B4(6, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec.c", 120);
    return 0;
  }
  v13 = 0;
  result = sub_234156A68(0, a4, a5, a2, &v13, v7);
  if ((_DWORD)result)
  {
    *a3 = v13;
    return 1;
  }
  return result;
}

uint64_t sub_23415B114(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  return sub_234156C5C(0, a4, a5, a2, a3, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
}

uint64_t sub_23415B13C(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3 || (v4 = *(_QWORD *)(a1 + 24)) == 0)
  {
    sub_2341579B4(6, 0, 117, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec.c", 141);
    return 0;
  }
  v7 = *(_QWORD *)(v3 + 8);
  if (!a2)
  {
    v12 = sub_2341536FC(*(_QWORD *)(v3 + 8));
    v10 = (sub_23417370C(v12) + 7) >> 3;
    goto LABEL_9;
  }
  v8 = (uint64_t *)sub_2341414C0(*(_QWORD *)(v4 + 8));
  v9 = sub_234156888(a2, *a3, v8, v7, 0);
  if ((v9 & 0x80000000) != 0)
    return 0;
  v10 = v9;
LABEL_9:
  *a3 = v10;
  return 1;
}

uint64_t sub_23415B1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 8))
  {
    v4 = sub_234174EA4();
    v5 = (uint64_t)v4;
    if (v4 && sub_2341750E4(v4, *(_QWORD *)(v2 + 8)))
    {
      sub_23415BA7C(a2, v5);
      return 1;
    }
    sub_234174FAC(v5);
  }
  else
  {
    sub_2341579B4(6, 0, 124, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec.c", 231);
  }
  return 0;
}

uint64_t sub_23415B274(uint64_t a1, int a2, int a3, unsigned int *a4)
{
  unsigned int **v4;
  uint64_t result;
  int v7;
  int v8;
  __int16 v9;

  v4 = *(unsigned int ***)(a1 + 40);
  if (a2 <= 2)
  {
    if (a2 == 1)
    {
      v7 = sub_2341414B0(a4);
      if ((v7 - 672) < 4 || v7 == 64)
      {
        *v4 = a4;
        return 1;
      }
      v8 = 111;
      v9 = 177;
      goto LABEL_13;
    }
    if (a2 == 2)
    {
      *(_QWORD *)a4 = *v4;
      return 1;
    }
LABEL_12:
    v8 = 101;
    v9 = 202;
LABEL_13:
    sub_2341579B4(6, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec.c", v9);
    return 0;
  }
  if (a2 == 3)
    return 1;
  if (a2 != 4109)
    goto LABEL_12;
  result = (uint64_t)sub_234173224(a3);
  if (result)
  {
    v4[1] = (unsigned int *)result;
    return 1;
  }
  return result;
}

uint64_t sub_23415B344(uint64_t *a1)
{
  return sub_234159734(a1, 408, 516);
}

uint64_t sub_23415B35C(uint64_t a1, int a2)
{
  if (a2 == 1)
    return 1;
  sub_2341579B4(6, 0, 133, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec.c", 270);
  return 0;
}

uint64_t sub_23415B39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t *v10;

  v6 = sub_2341562FC((__int128 *)a2);
  if (!v6 || *(_QWORD *)(a2 + 8))
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", 99);
    v7 = 0;
LABEL_4:
    sub_234174FAC((uint64_t)v7);
    return 0;
  }
  v9 = v6;
  v10 = sub_234174EA4();
  v7 = v10;
  if (!v10 || !sub_2341750E4(v10, v9) || !sub_23417566C(v7, *(unsigned __int8 **)a3, *(_QWORD *)(a3 + 8), 0))
    goto LABEL_4;
  sub_2341582DC(a1, &dword_250506CC0);
  *(_QWORD *)(a1 + 8) = v7;
  return 1;
}

uint64_t sub_23415B458(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _OWORD v7[3];
  _OWORD v8[3];
  _OWORD v9[3];
  _OWORD v10[3];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = sub_2341536FC(v3);
  v5 = (uint64_t *)sub_2341414C0(v3);
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  if (sub_234147F60(a1, (uint64_t)v10, 0x20000010u)
    && sub_234147F60((uint64_t *)v10, (uint64_t)v9, 0x20000010u)
    && sub_234147F60((uint64_t *)v9, (uint64_t)v8, 6u)
    && sub_23414817C((uint64_t)v8, &unk_250506CC4, 7uLL)
    && sub_2341561C4((uint64_t *)v9, v4)
    && sub_234147F60((uint64_t *)v10, (uint64_t)v7, 3u)
    && sub_234148008((uint64_t)v7, 0)
    && sub_234156258((uint64_t)v7, v4, v5, 4)
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(6, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", 85);
  return 0;
}

uint64_t sub_23415B5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = sub_2341536FC(v3);
  v5 = (uint64_t *)sub_2341414C0(v2);
  v6 = (uint64_t *)sub_2341414C0(v3);
  v7 = sub_234173D88(v4, v5, v6);
  if (v7 == 1)
    v8 = 0;
  else
    v8 = -2;
  if (v7)
    return v8;
  else
    return 1;
}

uint64_t sub_23415B610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  v6 = sub_234155B2C((__int128 *)a2);
  if (!v6 || *(_QWORD *)(a2 + 8))
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", 138);
    return 0;
  }
  v8 = sub_234155834((__int128 *)a3, v6);
  if (!v8 || *(_QWORD *)(a3 + 8))
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", 144);
    sub_234174FAC(v8);
    return 0;
  }
  sub_2341582DC(a1, &dword_250506CC0);
  *(_QWORD *)(a1 + 8) = v8;
  return 1;
}

uint64_t sub_23415B6D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _OWORD v7[3];
  _OWORD v8[3];
  _OWORD v9[3];
  _OWORD v10[3];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = sub_23416E2B8(v3);
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  if (sub_234147F60(a1, (uint64_t)v10, 0x20000010u))
  {
    if (sub_2341484FC((uint64_t)v10, 0))
    {
      if (sub_234147F60((uint64_t *)v10, (uint64_t)v9, 0x20000010u))
      {
        if (sub_234147F60((uint64_t *)v9, (uint64_t)v8, 6u))
        {
          if (sub_23414817C((uint64_t)v8, &unk_250506CC4, 7uLL))
          {
            v5 = sub_2341536FC(v3);
            if (sub_2341561C4((uint64_t *)v9, v5))
            {
              if (sub_234147F60((uint64_t *)v10, (uint64_t)v7, 4u)
                && sub_234155FA4((uint64_t *)v7, v3, v4 | 1u)
                && sub_234147CB0(a1))
              {
                return 1;
              }
            }
          }
        }
      }
    }
  }
  sub_2341579B4(6, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", 173);
  return 0;
}

BOOL sub_23415B80C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v3;

  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
    return sub_23417566C(v3, a2, a3, 0);
  sub_2341579B4(6, 0, 120, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", 184);
  return 0;
}

char *sub_23415B850(uint64_t a1, char **a2)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
    return sub_234175984(v2, 4, a2);
  sub_2341579B4(6, 0, 120, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", 195);
  return 0;
}

uint64_t sub_23415B89C(uint64_t a1)
{
  return sub_234175328(*(_QWORD *)(a1 + 8));
}

unint64_t sub_23415B8A4(uint64_t a1)
{
  return sub_234156B74(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23415B8BC(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_2341536FC(*(_QWORD *)(a1 + 8));
  if (v1)
    return sub_2341735C0(v1);
  sub_234157348();
  return 0;
}

BOOL sub_23415B8E8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return !v1 || sub_2341536FC(v1) == 0;
}

BOOL sub_23415B914(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v8;
  __int16 v9;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    v8 = 120;
    v9 = 225;
LABEL_8:
    sub_2341579B4(6, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", v9);
    return 0;
  }
  v4 = sub_2341536FC(v3);
  if (!v4)
  {
    v8 = 118;
    v9 = 230;
    goto LABEL_8;
  }
  v5 = v4;
  v6 = *(uint64_t **)(a1 + 8);
  if (v6)
    return sub_2341750E4(v6, v5);
  v6 = sub_234174EA4();
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
    return sub_2341750E4(v6, v5);
  return 0;
}

uint64_t sub_23415B9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return 4294967294;
  v5 = sub_2341536FC(v2);
  v6 = sub_2341536FC(v3);
  if (!v5 || v6 == 0)
    return 4294967294;
  else
    return sub_23417154C(v5, v6) == 0;
}

void sub_23415BA0C(uint64_t a1)
{
  sub_234174FAC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t sub_23415BA34(uint64_t a1, uint64_t a2)
{
  sub_2341582DC(a1, &dword_250506CC0);
  *(_QWORD *)(a1 + 8) = a2;
  if (!a2)
    return 0;
  sub_23417530C(a2);
  return 1;
}

BOOL sub_23415BA7C(uint64_t a1, uint64_t a2)
{
  sub_2341582DC(a1, &dword_250506CC0);
  *(_QWORD *)(a1 + 8) = a2;
  return a2 != 0;
}

uint64_t sub_23415BAB4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == 408)
    return *(_QWORD *)(a1 + 8);
  sub_2341579B4(6, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", 320);
  return 0;
}

uint64_t sub_23415BAF8(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 4) == 408)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
      sub_23417530C(*(_QWORD *)(a1 + 8));
  }
  else
  {
    sub_2341579B4(6, 0, 106, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ec_asn1.c", 320);
    return 0;
  }
  return v1;
}

uint64_t sub_23415BB54()
{
  return 1;
}

uint64_t sub_23415BB5C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = sub_23418E2E4(0x41uLL);
  if (!v3)
    return 0;
  v4 = v3;
  sub_2341582DC(a2, &dword_250506DE0);
  sub_23414E41C((uint64_t)v7, v4);
  v5 = 1;
  *((_BYTE *)v4 + 64) = 1;
  sub_23418E3C4(*(_QWORD **)(a2 + 8));
  *(_QWORD *)(a2 + 8) = v4;
  return v5;
}

uint64_t sub_23415BC00(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4, size_t a5)
{
  uint64_t v5;
  int v7;
  __int16 v8;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (!*(_BYTE *)(v5 + 64))
  {
    v7 = 130;
    v8 = 49;
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_8;
  if (*a3 <= 0x3FuLL)
  {
    v7 = 100;
    v8 = 59;
LABEL_6:
    sub_2341579B4(6, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519.c", v8);
    return 0;
  }
  result = sub_23414E558(a2, a4, a5, (unint64_t *)v5);
  if ((_DWORD)result)
  {
LABEL_8:
    *a3 = 64;
    return 1;
  }
  return result;
}

uint64_t sub_23415BCA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, size_t a5)
{
  if (a3 == 64
    && sub_23414F1FC(a4, a5, a2, (int64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32)))
  {
    return 1;
  }
  sub_2341579B4(6, 0, 131, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519.c", 77);
  return 0;
}

uint64_t sub_23415BD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_QWORD *)(a2 + 8))
    return sub_23415C118(a1, *(_OWORD **)a3, *(_QWORD *)(a3 + 8));
  sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519_asn1.c", 119);
  return 0;
}

uint64_t sub_23415BD4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD v5[3];
  _OWORD v6[3];
  _OWORD v7[3];
  _OWORD v8[3];

  v3 = *(_QWORD *)(a2 + 8);
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v8, 0x20000010u)
    && sub_234147F60((uint64_t *)v8, (uint64_t)v7, 0x20000010u)
    && sub_234147F60((uint64_t *)v7, (uint64_t)v6, 6u)
    && sub_23414817C((uint64_t)v6, &unk_250506DE4, 3uLL)
    && sub_234147F60((uint64_t *)v8, (uint64_t)v5, 3u)
    && sub_234148008((uint64_t)v5, 0)
    && sub_23414817C((uint64_t)v5, (const void *)(v3 + 32), 0x20uLL)
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(6, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519_asn1.c", 140);
  return 0;
}

BOOL sub_23415BE58(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a2 + 8);
  v4 = v2[4];
  v5 = v2[5];
  v6 = v3[4];
  v7 = v3[5];
  v9 = v2[6];
  v8 = v2[7];
  v11 = v3[6];
  v10 = v3[7];
  return v4 == v6 && v5 == v7 && v9 == v11 && v8 == v10;
}

uint64_t sub_23415BE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  if (!*(_QWORD *)(a2 + 8) && sub_2341493F4((__int128 *)a3, &v6, 4) && !*(_QWORD *)(a3 + 8))
    return sub_23415C058(a1, v6, v7);
  sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519_asn1.c", 163);
  return 0;
}

uint64_t sub_23415BF08(uint64_t *a1, uint64_t a2)
{
  _BYTE *v2;
  int v5;
  __int16 v6;
  _OWORD v7[3];
  _OWORD v8[3];
  _OWORD v9[3];
  _OWORD v10[3];
  _OWORD v11[3];

  v2 = *(_BYTE **)(a2 + 8);
  if (v2[64])
  {
    memset(v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    memset(v8, 0, sizeof(v8));
    memset(v7, 0, sizeof(v7));
    if (sub_234147F60(a1, (uint64_t)v11, 0x20000010u)
      && sub_2341484FC((uint64_t)v11, 0)
      && sub_234147F60((uint64_t *)v11, (uint64_t)v10, 0x20000010u)
      && sub_234147F60((uint64_t *)v10, (uint64_t)v9, 6u)
      && sub_23414817C((uint64_t)v9, &unk_250506DE4, 3uLL)
      && sub_234147F60((uint64_t *)v11, (uint64_t)v8, 4u)
      && sub_234147F60((uint64_t *)v8, (uint64_t)v7, 4u)
      && sub_23414817C((uint64_t)v7, v2, 0x20uLL)
      && sub_234147CB0(a1))
    {
      return 1;
    }
    v5 = 105;
    v6 = 190;
  }
  else
  {
    v5 = 130;
    v6 = 173;
  }
  sub_2341579B4(6, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519_asn1.c", v6);
  return 0;
}

uint64_t sub_23415C058(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[32];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a3 != 32)
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519_asn1.c", 33);
    return 0;
  }
  v5 = sub_23418E2E4(0x41uLL);
  if (!v5)
    return 0;
  v6 = v5;
  sub_23414E48C((uint64_t)v9, v5, a2);
  v7 = 1;
  *((_BYTE *)v6 + 64) = 1;
  sub_23418E3C4(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = v6;
  return v7;
}

uint64_t sub_23415C118(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  __int128 v7;

  if (a3 == 32)
  {
    result = (uint64_t)sub_23418E2E4(0x41uLL);
    if (result)
    {
      v6 = result;
      v7 = a2[1];
      *(_OWORD *)(result + 32) = *a2;
      *(_OWORD *)(result + 48) = v7;
      *(_BYTE *)(result + 64) = 0;
      sub_23418E3C4(*(_QWORD **)(a1 + 8));
      *(_QWORD *)(a1 + 8) = v6;
      return 1;
    }
  }
  else
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519_asn1.c", 55);
    return 0;
  }
  return result;
}

uint64_t sub_23415C198(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  __int16 v5;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 64))
  {
    v4 = 130;
    v5 = 76;
    goto LABEL_6;
  }
  if (a2)
  {
    if (*a3 <= 0x1FuLL)
    {
      v4 = 100;
      v5 = 86;
LABEL_6:
      sub_2341579B4(6, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519_asn1.c", v5);
      return 0;
    }
    v7 = *(_OWORD *)(v3 + 16);
    *a2 = *(_OWORD *)v3;
    a2[1] = v7;
  }
  *a3 = 32;
  return 1;
}

uint64_t sub_23415C218(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  __int128 v5;

  if (a2)
  {
    if (*a3 <= 0x1FuLL)
    {
      sub_2341579B4(6, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_ed25519_asn1.c", 105);
      return 0;
    }
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_OWORD *)(v4 + 48);
    *a2 = *(_OWORD *)(v4 + 32);
    a2[1] = v5;
  }
  *a3 = 32;
  return 1;
}

uint64_t sub_23415C274()
{
  return 64;
}

uint64_t sub_23415C27C()
{
  return 253;
}

void sub_23415C284(uint64_t a1)
{
  sub_23418E3C4(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t sub_23415C2AC(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  result = (uint64_t)sub_23418E344(0x60uLL);
  if (result)
  {
    v3 = (_QWORD *)result;
    if (sub_234147B54(result + 48, 0))
    {
      *(_QWORD *)(a1 + 40) = v3;
      return 1;
    }
    else
    {
      sub_23418E3C4(v3);
      return 0;
    }
  }
  return result;
}

uint64_t sub_23415C300(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  result = sub_23415C2AC(a1);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)v5 = *(_DWORD *)v6;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      result = (uint64_t)sub_23418E58C(*(const void **)(v6 + 16), v7);
      *(_QWORD *)(v5 + 16) = result;
      if (!result)
        return result;
      *(_QWORD *)(v5 + 24) = *(_QWORD *)(v6 + 24);
    }
    v8 = *(_QWORD *)(v6 + 40);
    if (v8)
    {
      result = (uint64_t)sub_23418E58C(*(const void **)(v6 + 32), v8);
      *(_QWORD *)(v5 + 32) = result;
      if (!result)
        return result;
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v6 + 40);
    }
    v9 = v5 + 48;
    v10 = v6 + 48;
    v11 = sub_234147EA4(v6 + 48);
    v12 = sub_234147ECC(v10);
    return sub_23414817C(v9, v11, v12) != 0;
  }
  return result;
}

void sub_23415C3BC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    sub_23418E3C4(*(_QWORD **)(v1 + 16));
    sub_23418E3C4(*(_QWORD **)(v1 + 32));
    sub_234147BE4(v1 + 48);
    sub_23418E3C4((_QWORD *)v1);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

uint64_t sub_23415C404(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;

  v3 = *(int **)(a1 + 40);
  v4 = *((_QWORD *)v3 + 1);
  if (!v4)
  {
    v17 = 118;
    v18 = 100;
LABEL_10:
    sub_2341579B4(6, 0, v17, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_hkdf.c", v18);
    return 0;
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
  {
    v17 = 120;
    v18 = 104;
    goto LABEL_10;
  }
  v8 = *v3;
  if (a2)
  {
    switch(v8)
    {
      case 2:
        v19 = *a3;
        v20 = *((_QWORD *)v3 + 2);
        v21 = sub_234147EA4((uint64_t)(v3 + 12));
        v22 = sub_234147ECC((uint64_t)(v3 + 12));
        return sub_23417918C(a2, v19, v4, v20, v5, (uint64_t)v21, v22);
      case 1:
        v23 = *a3;
        if (v23 < sub_2341414B8(*((_QWORD *)v3 + 1)))
        {
          v17 = 100;
          v18 = 124;
          goto LABEL_10;
        }
        return sub_234179110(a2, a3, *((_QWORD *)v3 + 1), *((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3), *((_QWORD *)v3 + 4), *((_QWORD *)v3 + 5));
      case 0:
        v9 = *a3;
        v10 = *((_QWORD *)v3 + 2);
        v11 = (uint64_t)(v3 + 12);
        v12 = *((_QWORD *)v3 + 4);
        v13 = *((_QWORD *)v3 + 5);
        v14 = sub_234147EA4(v11);
        v15 = sub_234147ECC(v11);
        return sub_234179070(a2, v9, v4, v10, v5, v12, v13, (uint64_t)v14, v15);
      default:
        v17 = 68;
        v18 = 134;
        goto LABEL_10;
    }
  }
  else
  {
    if (v8 == 1)
      *a3 = sub_2341414B8(*((_QWORD *)v3 + 1));
    return 1;
  }
}

BOOL sub_23415C600(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  __int16 v6;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 40);
  switch(a2)
  {
    case 4110:
      if (a3 >= 3)
      {
        v5 = 114;
        v6 = 145;
        goto LABEL_10;
      }
      *(_DWORD *)v4 = a3;
      return 1;
    case 4111:
      *(_QWORD *)(v4 + 8) = a4;
      return 1;
    case 4112:
      v7 = (uint64_t *)(v4 + 16);
      v8 = (_QWORD *)(v4 + 24);
      goto LABEL_6;
    case 4113:
      v7 = (uint64_t *)(v4 + 32);
      v8 = (_QWORD *)(v4 + 40);
LABEL_6:
      v9 = sub_234148C20(a4, v7, v8);
      goto LABEL_8;
    case 4114:
      v9 = sub_23414817C(v4 + 48, *(const void **)a4, *(_QWORD *)(a4 + 8));
LABEL_8:
      result = v9 != 0;
      break;
    default:
      v5 = 101;
      v6 = 177;
LABEL_10:
      sub_2341579B4(6, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_hkdf.c", v6);
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_23415C6CC(uint64_t *a1)
{
  return sub_234159734(a1, 963, 256);
}

uint64_t sub_23415C6E4(uint64_t *a1)
{
  return sub_234159734(a1, 963, 256);
}

uint64_t sub_23415C6FC(uint64_t *a1)
{
  return sub_234159734(a1, 963, 256);
}

uint64_t sub_23415C730(uint64_t *a1)
{
  return sub_234159734(a1, 963, 256);
}

uint64_t sub_23415C764(uint64_t *a1)
{
  return sub_234159734(a1, 963, 256);
}

uint64_t sub_23415C798(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)sub_23418E344(0x48uLL);
  if (result)
  {
    v3 = result;
    *(_DWORD *)result = 2048;
    result = 1;
    *(_DWORD *)(v3 + 16) = 1;
    *(_DWORD *)(v3 + 40) = -2;
    *(_QWORD *)(a1 + 40) = v3;
  }
  return result;
}

uint64_t sub_23415C7E0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)sub_23418E344(0x48uLL);
  if (result)
  {
    v5 = result;
    *(_DWORD *)result = 2048;
    *(_DWORD *)(result + 16) = 1;
    *(_DWORD *)(result + 40) = -2;
    *(_QWORD *)(a1 + 40) = result;
    v6 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)result = *(_DWORD *)v6;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7 || (result = (uint64_t)sub_234162014(v7), (*(_QWORD *)(v5 + 8) = result) != 0))
    {
      *(_DWORD *)(v5 + 16) = *(_DWORD *)(v6 + 16);
      *(_QWORD *)(v5 + 24) = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v5 + 32) = *(_QWORD *)(v6 + 32);
      *(_DWORD *)(v5 + 40) = *(_DWORD *)(v6 + 40);
      if (*(_QWORD *)(v6 + 56))
      {
        sub_23418E3C4(*(_QWORD **)(v5 + 56));
        result = (uint64_t)sub_23418E58C(*(const void **)(v6 + 56), *(_QWORD *)(v6 + 64));
        *(_QWORD *)(v5 + 56) = result;
        if (!result)
          return result;
        *(_QWORD *)(v5 + 64) = *(_QWORD *)(v6 + 64);
      }
      return 1;
    }
  }
  return result;
}

void sub_23415C8A0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    sub_234161FC4(*(_QWORD ***)(v1 + 8));
    sub_23418E3C4(*(_QWORD **)(v1 + 48));
    sub_23418E3C4(*(_QWORD **)(v1 + 56));
    sub_23418E3C4((_QWORD *)v1);
  }
}

uint64_t sub_23415C8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v3 + 8)
    || (result = (uint64_t)sub_234161F88(), (*(_QWORD *)(v3 + 8) = result) != 0)
    && (result = sub_234161A58(result, 65537), (_DWORD)result))
  {
    result = (uint64_t)sub_23417D2A8();
    if (result)
    {
      v5 = result;
      if (sub_23417FC54(result, *(_DWORD *)v3, *(uint64_t **)(v3 + 8), 0))
      {
        sub_23415DA1C(a2, v5);
        return 1;
      }
      else
      {
        sub_23417D814(v5);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_23415C974(uint64_t a1, char *a2, size_t *a3, const void *a4, size_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  int v12;
  size_t v13;
  unint64_t v14;
  uint64_t result;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;

  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(uint64_t ***)(v10 + 8);
  v12 = sub_234158378(v10);
  v13 = v12;
  if (!a2)
    goto LABEL_9;
  v14 = *a3;
  if (*a3 < v12)
  {
    sub_2341579B4(6, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa.c", 181);
    return 0;
  }
  v16 = *(unsigned int **)(v9 + 24);
  if (!v16)
    return sub_23417E0D0(v11, a3, a2);
  v19 = 0;
  v17 = *(_DWORD *)(v9 + 16);
  if (v17 == 6)
    return sub_23417E4C0(v11, a3, a2, v14, (uint64_t)a4, a5, (uint64_t)v16, *(_QWORD *)(v9 + 32), *(_DWORD *)(v9 + 40));
  result = 0;
  if (v17 == 1)
  {
    v18 = sub_2341414B0(v16);
    result = sub_23417E4BC(v18, a4, a5, a2, &v19, v11);
    if ((_DWORD)result)
    {
      v13 = v19;
LABEL_9:
      *a3 = v13;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23415CAA8(uint64_t a1, unsigned __int8 *a2, unint64_t a3, void *a4, size_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t result;
  int v17;
  BOOL v18;
  size_t v19;

  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD **)(v11 + 8);
  v13 = *(_QWORD *)(v10 + 24);
  if (v13)
  {
    v14 = *(_DWORD *)(v10 + 16);
    if (v14 != 6)
    {
      if (v14 == 1)
      {
        v15 = sub_2341414B0(*(unsigned int **)(v10 + 24));
        return sub_23417EA5C(v15, a4, a5, a2, a3, v12);
      }
      return 0;
    }
    return sub_23417EA60(*(uint64_t ***)(v11 + 8), (uint64_t)a4, a5, v13, *(_QWORD *)(v10 + 32), *(_DWORD *)(v10 + 40), a2, a3);
  }
  else
  {
    v19 = 0;
    v17 = sub_234158378(v11);
    result = sub_23415D4D0(v10, a1);
    if (!(_DWORD)result)
      return result;
    if (sub_23417EBD8((uint64_t)v12, &v19, *(char **)(v10 + 48), v17, a2, a3, *(_DWORD *)(v10 + 16)))
      v18 = v19 == a5;
    else
      v18 = 0;
    if (!v18)
      return 0;
    return sub_23418E484((char *)a4, *(char **)(v10 + 48), a5) == 0;
  }
}

uint64_t sub_23415CBF8(uint64_t a1, char *a2, size_t *a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  size_t v18;
  int v19;
  BOOL v20;
  size_t v21;
  int v22;
  size_t v23;
  void *v24;

  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = sub_234158378(v11);
  v14 = v13;
  if (!a2)
  {
    *a3 = v13;
    return 1;
  }
  if (*a3 < v13)
  {
    sub_2341579B4(6, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa.c", 253);
    return 0;
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *(_DWORD *)(v10 + 16);
  if (!v16)
    return sub_23417EBD8(v12, a3, a2, *a3, a4, a5, v17);
  if (v17 != 1)
    return 0;
  v18 = sub_2341414B8(v16);
  v23 = 0;
  v24 = 0;
  v22 = 0;
  result = sub_23415D4D0(v10, a1);
  if ((_DWORD)result)
  {
    v19 = sub_2341414B0(*(unsigned int **)(v10 + 24));
    result = sub_23417E14C((uint64_t *)&v24, &v23, &v22, v19, algn_2342E1E91, v18);
    if ((_DWORD)result)
    {
      v21 = 0;
      v20 = !sub_23417EBD8(v12, &v21, *(char **)(v10 + 48), v14, a4, a5, 1)
         || v21 != v23
         || sub_23418E484(*(char **)(v10 + 48), (char *)v24, v21 - v18);
      if (v22)
        sub_23418E3C4(v24);
      if (v20)
        return 0;
      if (v18)
        memcpy(a2, (const void *)(*(_QWORD *)(v10 + 48) + v21 - v18), v18);
      *a3 = v18;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23415CDC8(uint64_t a1, char *a2, unint64_t *a3, void *a4, size_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t result;
  int v16;

  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = sub_234158378(v11);
  v14 = v13;
  if (a2)
  {
    if (*a3 >= v13)
    {
      v16 = *(_DWORD *)(v10 + 16);
      if (v16 == 4)
      {
        result = sub_23415D4D0(v10, a1);
        if ((_DWORD)result)
        {
          result = sub_2341942C4(*(_BYTE **)(v10 + 48), v14, a4, a5, *(_QWORD *)(v10 + 56), *(_QWORD *)(v10 + 64), *(uint64_t **)(v10 + 24), *(uint64_t **)(v10 + 32));
          if ((_DWORD)result)
            return sub_234194898(v12, a3, a2, *a3, *(void **)(v10 + 48), v14, 3) != 0;
        }
      }
      else
      {
        return sub_234194898(v12, a3, a2, *a3, a4, a5, v16);
      }
    }
    else
    {
      sub_2341579B4(6, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa.c", 317);
      return 0;
    }
  }
  else
  {
    *a3 = v13;
    return 1;
  }
  return result;
}

uint64_t sub_23415CEF0(uint64_t a1, void *a2, unint64_t *a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  int v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;

  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(uint64_t ***)(v11 + 8);
  v13 = sub_234158378(v11);
  v14 = v13;
  if (a2)
  {
    if (*a3 >= v13)
    {
      v16 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v16 == 4)
      {
        v17 = 0;
        result = sub_23415D4D0(v10, a1);
        if ((_DWORD)result)
        {
          result = sub_234194CD8(v12, &v17, *(char **)(v10 + 48), v14, a4, a5, 3);
          if ((_DWORD)result)
            return sub_234194544(a2, a3, v14, *(unsigned __int8 **)(v10 + 48), v17, *(_QWORD *)(v10 + 56), *(_QWORD *)(v10 + 64), *(uint64_t **)(v10 + 24), *(_QWORD *)(v10 + 32)) != 0;
        }
      }
      else
      {
        return sub_234194CD8(v12, a3, (char *)a2, v13, a4, a5, v16);
      }
    }
    else
    {
      sub_2341579B4(6, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa.c", 349);
      return 0;
    }
  }
  else
  {
    *a3 = v13;
    return 1;
  }
  return result;
}

uint64_t sub_23415D034(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 40);
  switch(a2)
  {
    case 4097:
      if (a3 > 6 || ((1 << a3) & 0x5A) == 0)
        goto LABEL_21;
      v11 = *(_QWORD *)(v5 + 24);
      if (a3 == 3 && v11)
      {
        sub_2341579B4(6, 0, 115, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa.c", 375);
LABEL_21:
        v8 = 109;
        v9 = 403;
        goto LABEL_45;
      }
      if (a3 == 4)
      {
        if ((*(_BYTE *)(a1 + 32) & 0xC0) == 0)
          goto LABEL_21;
      }
      else
      {
        if (a3 != 6)
          goto LABEL_54;
        if ((*(_BYTE *)(a1 + 32) & 0x18) == 0)
          goto LABEL_21;
      }
      if (!v11)
        *(_QWORD *)(v5 + 24) = sub_234170AC4();
LABEL_54:
      *(_DWORD *)(v5 + 16) = a3;
      return 1;
    case 4098:
      v7 = *(_DWORD *)(v5 + 16);
      goto LABEL_23;
    case 4099:
    case 4100:
      if (*(_DWORD *)(v5 + 16) != 6)
      {
        v8 = 116;
        v9 = 420;
        goto LABEL_45;
      }
      if (a2 == 4100)
      {
        v7 = *(_DWORD *)(v5 + 40);
LABEL_23:
        *(_DWORD *)a4 = v7;
      }
      else
      {
        if (a3 < -2)
          return 0;
        *(_DWORD *)(v5 + 40) = a3;
      }
      return 1;
    case 4101:
      if (a3 <= 255)
      {
        v8 = 112;
        v9 = 435;
        goto LABEL_45;
      }
      *(_DWORD *)v5 = a3;
      return 1;
    case 4102:
      if (!a4)
        return 0;
      sub_234161FC4(*(_QWORD ***)(v5 + 8));
      *(_QWORD *)(v5 + 8) = a4;
      return 1;
    case 4103:
    case 4104:
      if (*(_DWORD *)(v5 + 16) != 4)
      {
        v8 = 115;
        v9 = 452;
        goto LABEL_45;
      }
      if (a2 == 4104)
        goto LABEL_14;
      goto LABEL_37;
    case 4105:
    case 4106:
      if ((*(_DWORD *)(v5 + 16) | 2) != 6)
      {
        v8 = 113;
        v9 = 477;
        goto LABEL_45;
      }
      if (a2 != 4106)
      {
        *(_QWORD *)(v5 + 32) = a4;
        return 1;
      }
      v10 = *(_QWORD *)(v5 + 32);
      if (v10)
        goto LABEL_15;
      goto LABEL_14;
    case 4107:
      if (*(_DWORD *)(v5 + 16) == 4)
      {
        sub_23418E3C4(*(_QWORD **)(v5 + 56));
        *(_QWORD *)(v5 + 56) = *(_QWORD *)a4;
        *(_QWORD *)(v5 + 64) = *(_QWORD *)(a4 + 8);
        return 1;
      }
      v8 = 115;
      v9 = 493;
      goto LABEL_45;
    case 4108:
      if (*(_DWORD *)(v5 + 16) == 4)
      {
        v12 = *(_QWORD *)(v5 + 64);
        *(_QWORD *)a4 = *(_QWORD *)(v5 + 56);
        *(_QWORD *)(a4 + 8) = v12;
        return 1;
      }
      v8 = 115;
      v9 = 505;
      goto LABEL_45;
    default:
      if (a2 == 1)
      {
        if (!a4 || *(_DWORD *)(v5 + 16) != 3)
        {
LABEL_37:
          *(_QWORD *)(v5 + 24) = a4;
          return 1;
        }
        v8 = 115;
        v9 = 375;
        goto LABEL_45;
      }
      if (a2 != 2)
      {
        v8 = 101;
        v9 = 512;
LABEL_45:
        sub_2341579B4(6, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa.c", v9);
        return 0;
      }
LABEL_14:
      v10 = *(_QWORD *)(v5 + 24);
LABEL_15:
      *(_QWORD *)a4 = v10;
      return 1;
  }
}

uint64_t sub_23415D330(uint64_t *a1)
{
  return sub_234159734(a1, 6, -1);
}

uint64_t sub_23415D348(uint64_t *a1)
{
  return sub_234159734(a1, 6, -1);
}

uint64_t sub_23415D360(uint64_t *a1)
{
  return sub_234159734(a1, 6, 24);
}

uint64_t sub_23415D378(uint64_t *a1)
{
  return sub_234159734(a1, 6, 24);
}

uint64_t sub_23415D390(uint64_t *a1)
{
  return sub_234159734(a1, 6, 4);
}

uint64_t sub_23415D3A8(uint64_t *a1)
{
  return sub_234159734(a1, 6, 4);
}

uint64_t sub_23415D3C0(uint64_t *a1)
{
  return sub_234159734(a1, 6, 192);
}

uint64_t sub_23415D3D8(uint64_t *a1)
{
  return sub_234159734(a1, 6, 192);
}

uint64_t sub_23415D3F0(uint64_t *a1)
{
  return sub_234159734(a1, 6, 248);
}

uint64_t sub_23415D408(uint64_t *a1)
{
  return sub_234159734(a1, 6, 248);
}

uint64_t sub_23415D420(uint64_t *a1)
{
  return sub_234159734(a1, 6, 192);
}

uint64_t sub_23415D454(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;

  if (!sub_234159734(a1, 6, 192))
    return 0xFFFFFFFFLL;
  result = 0;
  *a2 = 0;
  return result;
}

BOOL sub_23415D4D0(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;

  if (*(_QWORD *)(a1 + 48))
    return 1;
  v4 = sub_234158378(*(_QWORD *)(a2 + 16));
  v5 = sub_23418E2E4(v4);
  *(_QWORD *)(a1 + 48) = v5;
  return v5 != 0;
}

uint64_t sub_23415D518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  if (!sub_2341493F4((__int128 *)a2, &v8, 5) || v9 || *(_QWORD *)(a2 + 8))
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa_asn1.c", 97);
  }
  else
  {
    v7 = sub_2341939C4((__int128 *)a3);
    if (v7 && !*(_QWORD *)(a3 + 8))
    {
      sub_2341582DC(a1, &dword_250506F78);
      *(_QWORD *)(a1 + 8) = v7;
      return 1;
    }
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa_asn1.c", 103);
    sub_23417D814((uint64_t)v7);
  }
  return 0;
}

uint64_t sub_23415D5F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD v5[3];
  _OWORD v6[3];
  _OWORD v7[3];
  _OWORD v8[3];
  _OWORD v9[3];

  v3 = *(_QWORD *)(a2 + 8);
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v9, 0x20000010u)
    && sub_234147F60((uint64_t *)v9, (uint64_t)v8, 0x20000010u)
    && sub_234147F60((uint64_t *)v8, (uint64_t)v7, 6u)
    && sub_23414817C((uint64_t)v7, &unk_250506F7C, 9uLL)
    && sub_234147F60((uint64_t *)v8, (uint64_t)v6, 5u)
    && sub_234147F60((uint64_t *)v9, (uint64_t)v5, 3u)
    && sub_234148008((uint64_t)v5, 0)
    && sub_234193B0C((uint64_t *)v5, v3)
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(6, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa_asn1.c", 82);
  return 0;
}

BOOL sub_23415D718(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = sub_2341414C0(v3);
  v5 = sub_2341414C0(v2);
  if (sub_234162A28(v4, v5))
    return 0;
  v7 = sub_234153704(v3);
  v8 = sub_234153704(v2);
  return sub_234162A28(v7, v8) == 0;
}

uint64_t sub_23415D794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  if (!sub_2341493F4((__int128 *)a2, &v8, 5) || v9 || *(_QWORD *)(a2 + 8))
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa_asn1.c", 144);
  }
  else
  {
    v7 = sub_234193C88((__int128 *)a3);
    if (v7 && !*(_QWORD *)(a3 + 8))
    {
      sub_2341582DC(a1, &dword_250506F78);
      *(_QWORD *)(a1 + 8) = v7;
      return 1;
    }
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa_asn1.c", 150);
    sub_23417D814((uint64_t)v7);
  }
  return 0;
}

uint64_t sub_23415D86C(uint64_t *a1, uint64_t a2)
{
  uint64_t **v3;
  _OWORD v5[3];
  _OWORD v6[3];
  _OWORD v7[3];
  _OWORD v8[3];
  _OWORD v9[3];

  v3 = *(uint64_t ***)(a2 + 8);
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v9, 0x20000010u)
    && sub_2341484FC((uint64_t)v9, 0)
    && sub_234147F60((uint64_t *)v9, (uint64_t)v8, 0x20000010u)
    && sub_234147F60((uint64_t *)v8, (uint64_t)v7, 6u)
    && sub_23414817C((uint64_t)v7, &unk_250506F7C, 9uLL)
    && sub_234147F60((uint64_t *)v8, (uint64_t)v6, 5u)
    && sub_234147F60((uint64_t *)v9, (uint64_t)v5, 4u)
    && sub_234193E9C((uint64_t *)v5, v3)
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(6, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa_asn1.c", 131);
  return 0;
}

uint64_t sub_23415D994(uint64_t a1)
{
  return sub_23417E108(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23415D99C(uint64_t a1)
{
  return sub_23417CF10(*(uint64_t ***)(a1 + 8));
}

uint64_t sub_23415D9A4(uint64_t a1)
{
  return sub_23417DEC4(*(_QWORD *)(a1 + 8));
}

void sub_23415D9AC(uint64_t a1)
{
  sub_23417D814(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t sub_23415D9D4(uint64_t a1, uint64_t a2)
{
  sub_2341582DC(a1, &dword_250506F78);
  *(_QWORD *)(a1 + 8) = a2;
  if (!a2)
    return 0;
  sub_23417DEA8(a2);
  return 1;
}

BOOL sub_23415DA1C(uint64_t a1, uint64_t a2)
{
  sub_2341582DC(a1, &dword_250506F78);
  *(_QWORD *)(a1 + 8) = a2;
  return a2 != 0;
}

uint64_t sub_23415DA54(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == 6)
    return *(_QWORD *)(a1 + 8);
  sub_2341579B4(6, 0, 107, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa_asn1.c", 229);
  return 0;
}

uint64_t sub_23415DA98(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 4) == 6)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
      sub_23417DEA8(*(_QWORD *)(a1 + 8));
  }
  else
  {
    sub_2341579B4(6, 0, 107, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_rsa_asn1.c", 229);
    return 0;
  }
  return v1;
}

uint64_t sub_23415DAF4()
{
  return 1;
}

uint64_t sub_23415DAFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;

  v3 = sub_23418E2E4(0x41uLL);
  if (!v3)
    return 0;
  v4 = v3;
  sub_2341582DC(a2, &dword_250507098);
  sub_23414FA20(v4, v4 + 32);
  v5 = 1;
  v4[64] = 1;
  sub_23418E3C4(*(_QWORD **)(a2 + 8));
  *(_QWORD *)(a2 + 8) = v4;
  return v5;
}

uint64_t sub_23415DB6C(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  BOOL v8;
  int v9;
  __int16 v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3 || (v4 = *(_QWORD *)(a1 + 24)) == 0)
  {
    v9 = 117;
    v10 = 46;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = *(__int128 **)(v4 + 8);
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 117;
    v10 = 53;
LABEL_10:
    sub_2341579B4(6, 0, v9, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519.c", v10);
    return 0;
  }
  if (!*(_BYTE *)(v6 + 64))
  {
    v9 = 130;
    v10 = 58;
    goto LABEL_10;
  }
  if (a2)
  {
    if (*a3 <= 0x1FuLL)
    {
      v9 = 100;
      v10 = 64;
      goto LABEL_10;
    }
    if (!sub_23414FBB0(a2, (__int128 *)(v6 + 32), v7))
    {
      v9 = 134;
      v10 = 68;
      goto LABEL_10;
    }
  }
  *a3 = 32;
  return 1;
}

uint64_t sub_23415DC78(uint64_t a1, int a2)
{
  if (a2 == 3)
    return 1;
  sub_2341579B4(6, 0, 101, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519.c", 85);
  return 0;
}

uint64_t sub_23415DCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_QWORD *)(a2 + 8))
    return sub_23415E094(a1, *(_OWORD **)a3, *(_QWORD *)(a3 + 8));
  sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519_asn1.c", 133);
  return 0;
}

uint64_t sub_23415DCFC(uint64_t *a1, uint64_t a2)
{
  const void *v3;
  _OWORD v5[3];
  _OWORD v6[3];
  _OWORD v7[3];
  _OWORD v8[3];

  v3 = *(const void **)(a2 + 8);
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  if (sub_234147F60(a1, (uint64_t)v8, 0x20000010u)
    && sub_234147F60((uint64_t *)v8, (uint64_t)v7, 0x20000010u)
    && sub_234147F60((uint64_t *)v7, (uint64_t)v6, 6u)
    && sub_23414817C((uint64_t)v6, &unk_25050709C, 3uLL)
    && sub_234147F60((uint64_t *)v8, (uint64_t)v5, 3u)
    && sub_234148008((uint64_t)v5, 0)
    && sub_23414817C((uint64_t)v5, v3, 0x20uLL)
    && sub_234147CB0(a1))
  {
    return 1;
  }
  sub_2341579B4(6, 0, 105, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519_asn1.c", 153);
  return 0;
}

BOOL sub_23415DE08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *v2;
  v5 = v2[1];
  v6 = *v3;
  v7 = v3[1];
  v9 = v2[2];
  v8 = v2[3];
  v11 = v3[2];
  v10 = v3[3];
  return v4 == v6 && v5 == v7 && v9 == v11 && v8 == v10;
}

uint64_t sub_23415DE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  if (!*(_QWORD *)(a2 + 8) && sub_2341493F4((__int128 *)a3, &v6, 4) && !*(_QWORD *)(a3 + 8))
    return sub_23415E008(a1, v6, v7);
  sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519_asn1.c", 175);
  return 0;
}

uint64_t sub_23415DEB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  __int16 v6;
  _OWORD v7[3];
  _OWORD v8[3];
  _OWORD v9[3];
  _OWORD v10[3];
  _OWORD v11[3];

  v2 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v2 + 64))
  {
    memset(v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    memset(v8, 0, sizeof(v8));
    memset(v7, 0, sizeof(v7));
    if (sub_234147F60(a1, (uint64_t)v11, 0x20000010u)
      && sub_2341484FC((uint64_t)v11, 0)
      && sub_234147F60((uint64_t *)v11, (uint64_t)v10, 0x20000010u)
      && sub_234147F60((uint64_t *)v10, (uint64_t)v9, 6u)
      && sub_23414817C((uint64_t)v9, &unk_25050709C, 3uLL)
      && sub_234147F60((uint64_t *)v11, (uint64_t)v8, 4u)
      && sub_234147F60((uint64_t *)v8, (uint64_t)v7, 4u)
      && sub_23414817C((uint64_t)v7, (const void *)(v2 + 32), 0x20uLL)
      && sub_234147CB0(a1))
    {
      return 1;
    }
    v5 = 105;
    v6 = 202;
  }
  else
  {
    v5 = 130;
    v6 = 185;
  }
  sub_2341579B4(6, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519_asn1.c", v6);
  return 0;
}

uint64_t sub_23415E008(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;

  if (a3 != 32)
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519_asn1.c", 33);
    return 0;
  }
  v5 = sub_23418E2E4(0x41uLL);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = a2[1];
  *((_OWORD *)v5 + 2) = *a2;
  *((_OWORD *)v5 + 3) = v7;
  sub_23414FA70(v5, (uint64_t)(v5 + 4));
  v8 = 1;
  *((_BYTE *)v6 + 64) = 1;
  sub_23418E3C4(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = v6;
  return v8;
}

uint64_t sub_23415E094(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  __int128 v7;

  if (a3 == 32)
  {
    result = (uint64_t)sub_23418E2E4(0x41uLL);
    if (result)
    {
      v6 = result;
      v7 = a2[1];
      *(_OWORD *)result = *a2;
      *(_OWORD *)(result + 16) = v7;
      *(_BYTE *)(result + 64) = 0;
      sub_23418E3C4(*(_QWORD **)(a1 + 8));
      *(_QWORD *)(a1 + 8) = v6;
      return 1;
    }
  }
  else
  {
    sub_2341579B4(6, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519_asn1.c", 53);
    return 0;
  }
  return result;
}

uint64_t sub_23415E114(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  __int16 v5;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 64))
  {
    v4 = 130;
    v5 = 74;
    goto LABEL_6;
  }
  if (a2)
  {
    if (*a3 <= 0x1FuLL)
    {
      v4 = 100;
      v5 = 84;
LABEL_6:
      sub_2341579B4(6, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519_asn1.c", v5);
      return 0;
    }
    v7 = *(_OWORD *)(v3 + 48);
    *a2 = *(_OWORD *)(v3 + 32);
    a2[1] = v7;
  }
  *a3 = 32;
  return 1;
}

uint64_t sub_23415E194(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  _OWORD *v4;
  __int128 v5;

  if (a2)
  {
    if (*a3 <= 0x1FuLL)
    {
      sub_2341579B4(6, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519_asn1.c", 102);
      return 0;
    }
    v4 = *(_OWORD **)(a1 + 8);
    v5 = v4[1];
    *a2 = *v4;
    a2[1] = v5;
  }
  *a3 = 32;
  return 1;
}

uint64_t sub_23415E1F4(uint64_t a1, _QWORD *a2)
{
  const void *v2;
  _QWORD *v4;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    v4 = sub_23418E58C(v2, 0x20uLL);
    *a2 = v4;
    return 32 * (v4 != 0);
  }
  else
  {
    sub_2341579B4(6, 0, 120, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/p_x25519_asn1.c", 120);
    return 0;
  }
}

uint64_t sub_23415E254()
{
  return 32;
}

uint64_t sub_23415E25C()
{
  return 253;
}

void sub_23415E264(uint64_t a1)
{
  sub_23418E3C4(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
}

BOOL sub_23415E28C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unint64_t a7, char *a8)
{
  unint64_t v14;
  int v15;
  size_t v16;
  int v17;
  char *v18;
  _BYTE *v19;
  size_t v20;
  char v21;
  _BOOL8 v22;
  _OWORD v24[6];
  uint64_t v25;
  _BYTE __src[64];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v14 = sub_2341414B8(a6);
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  sub_23417945C((uint64_t)v24);
  if (!sub_234179480((uint64_t)v24, a1, a2, a6))
  {
LABEL_24:
    v22 = 0;
    goto LABEL_25;
  }
  if (a7)
  {
    v15 = 1;
    do
    {
      v16 = v14 >= a7 ? a7 : v14;
      if (!sub_234179480((uint64_t)v24, 0, 0, 0)
        || !sub_234179658((uint64_t)v24)
        || !sub_234179658((uint64_t)v24)
        || !sub_234179678((uint64_t)v24, (uint64_t)__src, 0))
      {
        goto LABEL_24;
      }
      if (v16)
        memcpy(a8, __src, v16);
      if (a5 >= 2)
      {
        v17 = 1;
        while (sub_234179480((uint64_t)v24, 0, 0, 0)
             && sub_234179658((uint64_t)v24)
             && sub_234179678((uint64_t)v24, (uint64_t)__src, 0))
        {
          if (v16)
          {
            v18 = __src;
            v19 = a8;
            v20 = v16;
            do
            {
              v21 = *v18++;
              *v19++ ^= v21;
              --v20;
            }
            while (v20);
          }
          if (++v17 == a5)
            goto LABEL_22;
        }
        goto LABEL_24;
      }
LABEL_22:
      a8 += v16;
      ++v15;
      a7 -= v16;
    }
    while (a7);
  }
  v22 = a5 != 0;
LABEL_25:
  sub_234179740(v24);
  return v22;
}

BOOL sub_23415E490(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unint64_t a6, char *a7)
{
  uint64_t *v14;

  v14 = sub_234170AC4();
  return sub_23415E28C(a1, a2, a3, a4, a5, (uint64_t)v14, a6, a7);
}

uint64_t sub_23415E500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;

  v6 = sub_2341414B8(a2);
  v7 = 0;
  while (dword_250507140[v7] != v6)
  {
    v7 += 8;
    if (v7 == 24)
    {
      sub_2341452E0(a1, a3, 0x80u);
      sub_234146138(a1, "%s algorithm unsupported\n", "Public Key");
      return 1;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))&dword_250507140[v7 + 2])(a1, a2, a3);
}

uint64_t sub_23415E5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;

  v6 = sub_2341414B8(a2);
  v7 = 0;
  while (dword_250507140[v7] != v6)
  {
    v7 += 8;
    if (v7 == 24)
    {
      sub_2341452E0(a1, a3, 0x80u);
      sub_234146138(a1, "%s algorithm unsupported\n", "Private Key");
      return 1;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))&dword_250507140[v7 + 4])(a1, a2, a3);
}

uint64_t sub_23415E670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;

  v6 = sub_2341414B8(a2);
  v7 = 0;
  while (dword_250507140[v7] != v6)
  {
    v7 += 8;
    if (v7 == 24)
      goto LABEL_7;
  }
  if (v7 * 4)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))&dword_250507140[v7 + 6])(a1, a2, a3);
LABEL_7:
  sub_2341452E0(a1, a3, 0x80u);
  sub_234146138(a1, "%s algorithm unsupported\n", "Parameters");
  return 1;
}

uint64_t sub_23415E730(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t ***v5;

  v5 = (uint64_t ***)sub_23415DA54(a2);
  return sub_23415E8F0(a1, v5, a3, 0);
}

uint64_t sub_23415E768(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t ***v5;

  v5 = (uint64_t ***)sub_23415DA54(a2);
  return sub_23415E8F0(a1, v5, a3, 1);
}

uint64_t sub_23415E7A0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;

  v5 = sub_23415AE40(a2);
  return sub_23415ED48(a1, v5, a3, 1);
}

uint64_t sub_23415E7D8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;

  v5 = sub_23415AE40(a2);
  return sub_23415ED48(a1, v5, a3, 2);
}

uint64_t sub_23415E810(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;

  v5 = sub_23415AE40(a2);
  return sub_23415ED48(a1, v5, a3, 0);
}

uint64_t sub_23415E848(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)sub_23415BAB4(a2);
  return sub_23415EEEC(a1, v5, a3, 1);
}

uint64_t sub_23415E880(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)sub_23415BAB4(a2);
  return sub_23415EEEC(a1, v5, a3, 2);
}

uint64_t sub_23415E8B8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)sub_23415BAB4(a2);
  return sub_23415EEEC(a1, v5, a3, 0);
}

uint64_t sub_23415E8F0(uint64_t a1, uint64_t ***a2, unsigned int a3, int a4)
{
  uint64_t *v8;
  int v9;
  uint64_t result;
  const char *v11;
  const char *v12;

  v8 = (uint64_t *)a2[1];
  if (v8)
    v9 = sub_2341621D4(v8);
  else
    v9 = 0;
  result = sub_2341452E0(a1, a3, 0x80u);
  if (!(_DWORD)result)
    return result;
  if (!a4 || !a2[3])
  {
    if ((int)sub_234146138(a1, "Public-Key: (%d bit)\n", v9) >= 1)
    {
      v11 = "Modulus:";
      v12 = "Exponent:";
      goto LABEL_11;
    }
    return 0;
  }
  if ((int)sub_234146138(a1, "Private-Key: (%d bit)\n", v9) < 1)
    return 0;
  v11 = "modulus:";
  v12 = "publicExponent:";
LABEL_11:
  result = sub_23415EAA8(a1, v11, a2[1], a3);
  if ((_DWORD)result)
  {
    result = sub_23415EAA8(a1, v12, a2[2], a3);
    if ((_DWORD)result)
    {
      if (!a4)
        return 1;
      result = sub_23415EAA8(a1, "privateExponent:", a2[3], a3);
      if ((_DWORD)result)
      {
        result = sub_23415EAA8(a1, "prime1:", a2[4], a3);
        if ((_DWORD)result)
        {
          result = sub_23415EAA8(a1, "prime2:", a2[5], a3);
          if ((_DWORD)result)
          {
            result = sub_23415EAA8(a1, "exponent1:", a2[6], a3);
            if ((_DWORD)result)
            {
              result = sub_23415EAA8(a1, "exponent2:", a2[7], a3);
              if ((_DWORD)result)
              {
                result = sub_23415EAA8(a1, "coefficient:", a2[8], a3);
                if ((_DWORD)result)
                  return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_23415EAA8(uint64_t a1, const char *a2, uint64_t **a3, unsigned int a4)
{
  int v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  const char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v21;

  if (!a3)
    return 1;
  if (!sub_2341452E0(a1, a4, 0x80u))
    return 0;
  if (sub_234161A24((uint64_t)a3))
  {
    v8 = sub_234146138(a1, "%s 0\n");
    return v8 > 0;
  }
  v21 = 0;
  v10 = sub_2341628EC(a3, &v21);
  v11 = sub_234162420((uint64_t)a3);
  if (v10)
  {
    v8 = sub_234146138(a1, "%s %s%llu (%s0x%llx)\n");
    return v8 > 0;
  }
  v12 = " (Negative)";
  if (!v11)
    v12 = "";
  if ((int)sub_234146138(a1, "%s%s", a2, v12) < 1)
    return 0;
  v13 = sub_234162240((uint64_t *)a3);
  v14 = (unsigned __int8 *)sub_23418E2E4(v13 + 1);
  if (!v14)
    return 0;
  v15 = v14;
  *v14 = 0;
  v16 = v14 + 1;
  sub_234162760((uint64_t)a3, (char *)v14 + 1);
  if ((_DWORD)v13 && (char)*v16 < 0)
  {
    v17 = a1;
    v18 = v15;
    v19 = v13 + 1;
  }
  else
  {
    v17 = a1;
    v18 = v16;
    v19 = v13;
  }
  v9 = sub_23415EC3C(v17, v18, v19, a4);
  sub_23418E3C4(v15);
  return v9;
}

uint64_t sub_23415EC3C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t result;
  int v11;
  int v12;
  const char *v13;

  v7 = 0;
  v8 = 0;
  v9 = a4 + 4;
  while (a3)
  {
    if (!(v7 - v8 / 0xF + 16 * (v8 / 0xF)))
    {
      if ((int)sub_234144F70(a1, "\n") < 1)
        return 0;
      result = sub_2341452E0(a1, v9, 0x80u);
      if (!(_DWORD)result)
        return result;
    }
    v12 = *a2++;
    v11 = v12;
    ++v8;
    if (--a3)
      v13 = ":";
    else
      v13 = "";
    --v7;
    if ((int)sub_234146138(a1, "%02x%s", v11, v13) < 1)
      return 0;
  }
  return (int)sub_234144E68(a1, (uint64_t)"\n", 1) > 0;
}

uint64_t sub_23415ED48(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  const char *v11;
  const char *v12;
  uint64_t *v13;
  int v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;

  if (a4 == 2)
  {
    v8 = sub_2341536F4(a2);
LABEL_4:
    v10 = (uint64_t **)sub_2341536EC(a2);
    v9 = (uint64_t **)v8;
    goto LABEL_5;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (a4 >= 1)
    goto LABEL_4;
LABEL_5:
  if (!sub_2341452E0(a1, a3, 0x80u))
    return 0;
  v11 = "DSA-Parameters";
  if (a4 == 1)
    v11 = "Public-Key";
  v12 = a4 == 2 ? "Private-Key" : v11;
  v13 = (uint64_t *)sub_2341536FC(a2);
  v14 = sub_2341621D4(v13);
  if ((int)sub_234146138(a1, "%s: (%u bit)\n", v12, v14) < 1)
    return 0;
  if (!sub_23415EAA8(a1, "priv:", v9, a3))
    return 0;
  if (!sub_23415EAA8(a1, "pub:", v10, a3))
    return 0;
  v15 = (uint64_t **)sub_2341536FC(a2);
  if (!sub_23415EAA8(a1, "P:", v15, a3))
    return 0;
  v16 = (uint64_t **)sub_2341414C0(a2);
  if (!sub_23415EAA8(a1, "Q:", v16, a3))
    return 0;
  v17 = (uint64_t **)sub_234153704(a2);
  return sub_23415EAA8(a1, "G:", v17, a3);
}

uint64_t sub_23415EEEC(uint64_t a1, uint64_t *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t result;
  int v13;
  const char *v14;
  uint64_t **v15;
  int v16;
  char *v17;
  uint64_t v18;
  int v19;
  void *v20;

  if (!a2 || (v8 = sub_2341536FC((uint64_t)a2)) == 0)
  {
    sub_2341579B4(6, 0, 67, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/evp/print.c", 246);
    return 0;
  }
  v9 = v8;
  v10 = "ECDSA-Parameters";
  if (a4 == 1)
    v10 = "Public-Key";
  if (a4 == 2)
    v11 = "Private-Key";
  else
    v11 = v10;
  result = sub_2341452E0(a1, a3, 0x80u);
  if ((_DWORD)result)
  {
    v13 = sub_234173704(v9);
    if (v13)
      v14 = sub_234173714(v13);
    else
      v14 = "unknown curve";
    if ((int)sub_234146138(a1, "%s: (%s)\n", v11, v14) < 1)
      return 0;
    if (a4 == 2)
    {
      v15 = (uint64_t **)sub_234153704((uint64_t)a2);
      if (v15)
      {
        result = sub_23415EAA8(a1, "priv:", v15, a3);
        if (!(_DWORD)result)
          return result;
      }
    }
    else if (a4 < 1)
    {
      return 1;
    }
    if (sub_2341414C0((uint64_t)a2))
    {
      v20 = 0;
      v16 = sub_234145124((uint64_t)a2);
      v17 = sub_234175984(a2, v16, (char **)&v20);
      if (v17)
      {
        v18 = (uint64_t)v17;
        if (sub_2341452E0(a1, a3, 0x80u) && (int)sub_234144F70(a1, "pub:") > 0)
        {
          v19 = sub_23415EC3C(a1, (unsigned __int8 *)v20, v18, a3);
          sub_23418E3C4(v20);
          if (v19)
            return 1;
        }
        else
        {
          sub_23418E3C4(v20);
        }
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_23415F0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD *v13;

  v8 = sub_23418E2E4(0x20uLL);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v8;
  *v8 = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = 0;
  sub_234195C38((pthread_rwlock_t *)a1);
  v10 = atomic_load((unsigned int *)(a1 + 216));
  if ((*(unsigned __int8 *)(a1 + 220) ^ 0x7FFFFFFFuLL) < v10)
  {
    sub_2341579B4(14, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/ex_data.c", 152);
    sub_234195C54((pthread_rwlock_t *)a1);
    return 0xFFFFFFFFLL;
  }
  v12 = *(_QWORD *)(a1 + 208);
  if (v12)
    v13 = (_QWORD *)(v12 + 24);
  else
    v13 = (_QWORD *)(a1 + 200);
  *v13 = v9;
  *(_QWORD *)(a1 + 208) = v9;
  atomic_store(v10 + 1, (unsigned int *)(a1 + 216));
  sub_234195C54((pthread_rwlock_t *)a1);
  return v10 + *(unsigned __int8 *)(a1 + 220);
}

uint64_t sub_23415F178(unint64_t **a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if ((a2 & 0x80000000) != 0)
    abort();
  result = (uint64_t)*a1;
  if (result || (result = (uint64_t)sub_2341953A0(), (*a1 = (unint64_t *)result) != 0))
  {
    v7 = sub_2341709C4(result);
    v8 = a2;
    if (v7 > a2)
    {
LABEL_8:
      sub_23419540C(*a1, v8, a3);
      return 1;
    }
    else
    {
      v9 = a2 - v7 + 1;
      while (1)
      {
        result = (uint64_t)sub_2341958E8(*a1, 0);
        if (!result)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  return result;
}

unint64_t *sub_23415F204(unint64_t **a1, unsigned int a2)
{
  unint64_t *v3;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v3 = *a1;
  if (!v3 || sub_2341709C4((uint64_t)v3) <= (unint64_t)a2)
    return 0;
  else
    return sub_2341953E8(*a1, a2);
}

_QWORD *sub_23415F254(_QWORD *result)
{
  *result = 0;
  return result;
}

void sub_23415F25C(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  unsigned int v5;
  int v7;
  _QWORD **v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;

  if (*a3)
  {
    v5 = atomic_load((unsigned int *)(a1 + 216));
    if (v5)
    {
      v7 = 0;
      v8 = (_QWORD **)(a1 + 200);
      do
      {
        v9 = *v8;
        if ((*v8)[2])
        {
          v10 = *(unsigned __int8 *)(a1 + 220);
          v11 = (v7 + v10);
          v12 = sub_23415F204(a3, v7 + v10);
          ((void (*)(uint64_t, unint64_t *, unint64_t **, uint64_t, _QWORD, _QWORD))(*v8)[2])(a2, v12, a3, v11, **v8, (*v8)[1]);
          v9 = *v8;
        }
        v8 = (_QWORD **)(v9 + 3);
        ++v7;
      }
      while (v5 != v7);
    }
    sub_234141344((uint64_t)*a3);
    *a3 = 0;
  }
}

uint64_t *sub_23415F318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v7[4];
  _OWORD v8[60];

  memset(v8, 0, 512);
  sub_23415FAE0((uint64_t)v8, a3);
  memset(v7, 0, sizeof(v7));
  sub_23415FB54((uint64_t *)v7, a1, 1);
  sub_23415FC00((uint64_t)v8, *(unsigned int *)(a3 + 240), (uint64_t *)v7);
  return sub_23415FDA0(a2, 1, v7);
}

uint64_t *sub_23415F3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v7[4];
  _OWORD v8[60];

  memset(v8, 0, 512);
  sub_23415FAE0((uint64_t)v8, a3);
  memset(v7, 0, sizeof(v7));
  sub_23415FB54((uint64_t *)v7, a1, 1);
  sub_23415FE88((uint64_t)v8, *(unsigned int *)(a3 + 240), (uint64_t)v7);
  return sub_23415FDA0(a2, 1, v7);
}

uint64_t sub_23415F49C(_OWORD *a1, int a2, uint64_t a3)
{
  if (a2 == 128 || a2 == 256 || a2 == 192)
    return sub_23415F4C0(a1, a2, a3);
  else
    return 4294967294;
}

uint64_t sub_23415F4C0(_OWORD *a1, int a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t i;
  uint64_t v53;
  unsigned int v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned int v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  char v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD v108[2];
  __int128 v109;
  uint64_t v110[3];
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 256:
      *(_DWORD *)(a3 + 240) = 14;
      *(_OWORD *)v110 = *a1;
      v24 = (v110[0] ^ ((unint64_t)v110[0] >> 4)) & 0xF000F000F000F0;
      v25 = v110[0] ^ (16 * v24);
      v26 = v25 ^ v24;
      v27 = (v25 ^ (v26 >> 8)) & 0xFF000000FF00;
      v28 = v26 ^ (v27 << 8);
      v29 = v28 ^ v27;
      v30 = ((v29 >> 16) ^ v28) & 0xFFFF0000;
      v31 = (v110[1] ^ ((unint64_t)v110[1] >> 4)) & 0xF000F000F000F0;
      v32 = v110[1] ^ (16 * v31);
      v33 = v32 ^ v31;
      v34 = (v32 ^ (v33 >> 8)) & 0xFF000000FF00;
      v35 = v33 ^ (v34 << 8);
      v36 = v35 ^ v34;
      v37 = ((v36 >> 16) ^ v35) & 0xFFFF0000;
      v110[0] = v30 ^ v29 | ((unint64_t)(v37 ^ v36) << 32);
      v110[1] = (v36 & 0xFFFFFFFF00000000 ^ (v37 << 16)) & 0xFFFFFFFF00000000 | ((v29 ^ (v30 << 16)) >> 32);
      *(_OWORD *)a3 = *(_OWORD *)v110;
      v109 = a1[1];
      v38 = (v109 ^ ((unint64_t)v109 >> 4)) & 0xF000F000F000F0;
      v39 = v109 ^ (16 * v38);
      v40 = v39 ^ v38;
      v41 = (v39 ^ (v40 >> 8)) & 0xFF000000FF00;
      v42 = v40 ^ (v41 << 8);
      v43 = v42 ^ v41;
      v44 = ((v43 >> 16) ^ v42) & 0xFFFF0000;
      v45 = (*((_QWORD *)&v109 + 1) ^ (*((_QWORD *)&v109 + 1) >> 4)) & 0xF000F000F000F0;
      v46 = *((_QWORD *)&v109 + 1) ^ (16 * v45);
      v47 = v46 ^ v45;
      v48 = (v46 ^ (v47 >> 8)) & 0xFF000000FF00;
      v49 = v47 ^ (v48 << 8);
      v50 = v49 ^ v48;
      v51 = ((v50 >> 16) ^ v49) & 0xFFFF0000;
      *(_QWORD *)&v109 = v44 ^ v43 | ((unint64_t)(v51 ^ v50) << 32);
      *((_QWORD *)&v109 + 1) = (v50 & 0xFFFFFFFF00000000 ^ (v51 << 16)) & 0xFFFFFFFF00000000 | ((v43 ^ (v44 << 16)) >> 32);
      *(_OWORD *)(a3 + 16) = v109;
      for (i = 2; ; i += 2)
      {
        sub_234184F24(v108, (uint64_t *)&v109);
        v53 = 0;
        v54 = *((unsigned __int8 *)&unk_2342E2687 + (i >> 1) - 1);
        v55 = 1;
        do
        {
          v56 = v55;
          v57 = v110[v53] ^ (v54 >> (4 * v53)) & 0xF ^ ((v108[v53] >> 36) & 0xF000 | (v108[v53] >> 52));
          v110[v53] = (v57 << 16) ^ (v57 << 32) ^ (v57 << 48) ^ v57;
          v53 = 1;
          v55 = 0;
        }
        while ((v56 & 1) != 0);
        *(_OWORD *)(a3 + 16 * i) = *(_OWORD *)v110;
        if (i == 14)
          break;
        sub_234184F24(v108, v110);
        v58 = 0;
        v59 = 1;
        do
        {
          v60 = v59;
          v61 = HIWORD(v108[v58]) ^ v110[v58 - 2];
          v110[v58 - 2] = (v61 << 16) ^ (v61 << 32) ^ (v61 << 48) ^ v61;
          v58 = 1;
          v59 = 0;
        }
        while ((v60 & 1) != 0);
        *(_OWORD *)(a3 + ((16 * i) | 0x10)) = v109;
      }
      return 0;
    case 192:
      v62 = 0;
      *(_DWORD *)(a3 + 240) = 12;
      *(_OWORD *)v110 = *a1;
      v63 = (v110[0] ^ ((unint64_t)v110[0] >> 4)) & 0xF000F000F000F0;
      v64 = v110[0] ^ (16 * v63);
      v65 = v64 ^ v63;
      v66 = (v64 ^ (v65 >> 8)) & 0xFF000000FF00;
      v67 = v65 ^ (v66 << 8);
      v68 = v67 ^ v66;
      v69 = ((v68 >> 16) ^ v67) & 0xFFFF0000;
      v70 = (v110[1] ^ ((unint64_t)v110[1] >> 4)) & 0xF000F000F000F0;
      v71 = v110[1] ^ (16 * v70);
      v72 = v71 ^ v70;
      v73 = (v71 ^ (v72 >> 8)) & 0xFF000000FF00;
      v74 = v72 ^ (v73 << 8);
      v75 = v74 ^ v73;
      v76 = ((v75 >> 16) ^ v74) & 0xFFFF0000;
      v110[0] = v69 ^ v68 | ((unint64_t)(v76 ^ v75) << 32);
      v110[1] = (v75 & 0xFFFFFFFF00000000 ^ (v76 << 16)) & 0xFFFFFFFF00000000 | ((v68 ^ (v69 << 16)) >> 32);
      *(_OWORD *)a3 = *(_OWORD *)v110;
      v77 = *((_QWORD *)a1 + 2);
      v78 = (v77 ^ (v77 >> 4)) & 0xF000F000F000F0;
      v79 = v77 ^ (16 * v78);
      v80 = v79 ^ v78;
      v81 = (v79 ^ (v80 >> 8)) & 0xFF000000FF00;
      v82 = v80 ^ (v81 << 8);
      v83 = v82 ^ v81;
      v84 = ((v83 >> 16) ^ v82) & 0xFFFF0000;
      *(_QWORD *)&v109 = v84 ^ v83;
      *((_QWORD *)&v109 + 1) = (v83 ^ (v84 << 16)) >> 32;
      v85 = (uint64_t *)&v109;
      v86 = v110;
      do
      {
        v87 = v86;
        sub_234184F24(v108, v85);
        v88 = 0;
        v89 = *((unsigned __int8 *)&unk_2342E2687 + 2 * v62);
        v90 = 1;
        do
        {
          v91 = v85[v88];
          v92 = v87[v88];
          v93 = v91 | ((unint64_t)(v92 ^ (v89 >> (4 * v88)) & 0xF) << 32);
          v85[v88] = v93;
          v94 = (v108[v88] >> 4) & 0xFFF0000 | (((v108[v88] >> 16) & 0xFLL) << 28);
          v95 = v93 ^ (v94 << 16) ^ ((v93 ^ (v94 << 16)) >> 32 << 48);
          v85[v88] = v95;
          v96 = v90;
          *((_QWORD *)&v97 + 1) = v91;
          *(_QWORD *)&v97 = v92;
          v87[v88] = (((unint64_t)(v97 >> 32) ^ HIWORD(v95)) << 16) ^ (((unint64_t)(v97 >> 32) ^ HIWORD(v95)) << 32) ^ (((unint64_t)(v97 >> 32) ^ HIWORD(v95)) << 48) ^ (v97 >> 32) ^ HIWORD(v95);
          v88 = 1;
          v90 = 0;
        }
        while ((v96 & 1) != 0);
        v98 = a3 + 48 * v62;
        *(_OWORD *)(v98 + 16) = *(_OWORD *)v85;
        *(_OWORD *)(v98 + 32) = *(_OWORD *)v87;
        sub_234184F24(v108, v87);
        v99 = 0;
        v100 = *((unsigned __int8 *)&unk_2342E2687 + ((2 * v62) | 1));
        v101 = 1;
        do
        {
          v102 = v101;
          *((_QWORD *)&v103 + 1) = v87[v99];
          *(_QWORD *)&v103 = v85[v99];
          v104 = (v103 >> 32) ^ (v100 >> (4 * v99)) & 0xF;
          v85[v99] = v104;
          v105 = ((v108[v99] >> 36) & 0xF000 | (v108[v99] >> 52)) ^ v104;
          v106 = (v105 << 16) ^ (v105 << 32) ^ (v105 << 48) ^ v105;
          v85[v99] = v106;
          v87[v99] = ((HIWORD(v106) ^ HIDWORD(v103)) << 16) ^ HIWORD(v106) ^ HIDWORD(*((_QWORD *)&v103 + 1));
          v99 = 1;
          v101 = 0;
        }
        while ((v102 & 1) != 0);
        *(_OWORD *)(a3 + 48 * v62++ + 48) = *(_OWORD *)v85;
        v86 = v85;
        v85 = v87;
      }
      while (v62 != 4);
      return 0;
    case 128:
      *(_DWORD *)(a3 + 240) = 10;
      *(_OWORD *)v110 = *a1;
      v4 = (v110[0] ^ ((unint64_t)v110[0] >> 4)) & 0xF000F000F000F0;
      v5 = v110[0] ^ (16 * v4);
      v6 = v5 ^ v4;
      v7 = (v5 ^ (v6 >> 8)) & 0xFF000000FF00;
      v8 = v6 ^ (v7 << 8);
      v9 = v8 ^ v7;
      v10 = ((v9 >> 16) ^ v8) & 0xFFFF0000;
      v11 = (v110[1] ^ ((unint64_t)v110[1] >> 4)) & 0xF000F000F000F0;
      v12 = v110[1] ^ (16 * v11);
      v13 = v12 ^ v11;
      v14 = (v12 ^ (v13 >> 8)) & 0xFF000000FF00;
      v15 = v13 ^ (v14 << 8);
      v16 = v15 ^ v14;
      v17 = ((v16 >> 16) ^ v15) & 0xFFFF0000;
      v110[0] = v10 ^ v9 | ((unint64_t)(v17 ^ v16) << 32);
      v110[1] = (v16 & 0xFFFFFFFF00000000 ^ (v17 << 16)) & 0xFFFFFFFF00000000 | ((v9 ^ (v10 << 16)) >> 32);
      *(_OWORD *)a3 = *(_OWORD *)v110;
      v18 = 1u;
      do
      {
        sub_234184F24(&v109, v110);
        v19 = 0;
        v20 = *((unsigned __int8 *)&unk_2342E2687 + v18 - 1);
        v21 = 1;
        do
        {
          v22 = v21;
          v23 = v110[v19] ^ (v20 >> (4 * v19)) & 0xF ^ (((unint64_t)v110[v19 - 2] >> 36) & 0xF000 | ((unint64_t)v110[v19 - 2] >> 52));
          v110[v19] = (v23 << 16) ^ (v23 << 32) ^ (v23 << 48) ^ v23;
          v19 = 1;
          v21 = 0;
        }
        while ((v22 & 1) != 0);
        *(_OWORD *)(a3 + 16 * v18++) = *(_OWORD *)v110;
      }
      while (v18 != 11);
      return 0;
  }
  return 1;
}

uint64_t *sub_23415FAE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *result;

  v4 = 0;
  v5 = a1;
  do
  {
    v6 = 0;
    v7 = (_QWORD *)(a2 + 16 * v4);
    do
    {
      v8 = v7[1];
      v9 = (_QWORD *)(v5 + v6);
      *v9 = *v7;
      v9[4] = v8;
      v6 += 8;
    }
    while (v6 != 32);
    result = sub_234184F8C((uint64_t *)(a1 + (v4 << 6)));
    v5 += 64;
  }
  while (v4++ < *(unsigned int *)(a2 + 240));
  return result;
}

uint64_t *sub_23415FB54(uint64_t *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *(_OWORD *)result = 0u;
  *((_OWORD *)result + 1) = 0u;
  if (a3)
  {
    v3 = (_QWORD *)(a2 + 8);
    v4 = result + 4;
    do
    {
      v5 = *(v3 - 1);
      v6 = (v5 ^ (v5 >> 4)) & 0xF000F000F000F0;
      v7 = v5 ^ (16 * v6);
      v8 = v7 ^ v6;
      v9 = (v7 ^ (v8 >> 8)) & 0xFF000000FF00;
      v10 = v8 ^ (v9 << 8);
      v11 = v10 ^ v9;
      v12 = ((v11 >> 16) ^ v10) & 0xFFFF0000;
      v13 = (*v3 ^ (*v3 >> 4)) & 0xF000F000F000F0;
      v14 = *v3 ^ (16 * v13);
      v15 = v14 ^ v13;
      v16 = (v14 ^ (v15 >> 8)) & 0xFF000000FF00;
      v17 = v15 ^ (v16 << 8);
      v18 = v17 ^ v16;
      v19 = ((v18 >> 16) ^ v17) & 0xFFFF0000;
      *(v4 - 4) = v12 ^ v11 | ((unint64_t)(v19 ^ v18) << 32);
      *v4++ = (v18 & 0xFFFFFFFF00000000 ^ (v19 << 16)) & 0xFFFFFFFF00000000 | ((v11 ^ (v12 << 16)) >> 32);
      v3 += 2;
      --a3;
    }
    while (a3);
  }
  return sub_234184F8C(result);
}

uint64_t *sub_23415FC00(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t i;
  uint64_t v7;
  uint64_t j;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  uint64_t k;
  uint64_t *result;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  uint64_t m;

  for (i = 0; i != 8; ++i)
    a3[i] ^= *(_QWORD *)(a1 + i * 8);
  if (a2 >= 2)
  {
    v7 = a1 + 64;
    for (j = 1; j != a2; ++j)
    {
      sub_234185030(a3);
      v9 = 0;
      v10.i64[0] = 0xF000F000F000FLL;
      v10.i64[1] = 0xF000F000F000FLL;
      v11.i64[0] = 0xF000F000F000F0;
      v11.i64[1] = 0xF000F000F000F0;
      v12.i64[0] = 0xF000F000F000F00;
      v12.i64[1] = 0xF000F000F000F00;
      v13.i64[0] = 0xF000F000F000F000;
      v13.i64[1] = 0xF000F000F000F000;
      do
      {
        v14 = *(int8x16_t *)&a3[v9];
        v15 = vandq_s8(v14, v10);
        v16 = (int64x2_t)vandq_s8(v14, v11);
        v17 = (int64x2_t)vandq_s8(v14, v12);
        v18 = (int64x2_t)vandq_s8(v14, v13);
        *(int8x16_t *)&a3[v9] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v17, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v17, 0x20uLL)), v15), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v18, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v18, 0x30uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v16, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v16, 0x10uLL))));
        v9 += 2;
      }
      while (v9 != 8);
      sub_23418525C((uint64_t)a3);
      for (k = 0; k != 8; ++k)
        a3[k] ^= *(_QWORD *)(v7 + k * 8);
      v7 += 64;
    }
  }
  result = sub_234185030(a3);
  v21 = 0;
  v22.i64[0] = 0xF000F000F000FLL;
  v22.i64[1] = 0xF000F000F000FLL;
  v23.i64[0] = 0xF000F000F000F0;
  v23.i64[1] = 0xF000F000F000F0;
  v24.i64[0] = 0xF000F000F000F00;
  v24.i64[1] = 0xF000F000F000F00;
  v25.i64[0] = 0xF000F000F000F000;
  v25.i64[1] = 0xF000F000F000F000;
  do
  {
    v26 = *(int8x16_t *)&a3[v21];
    v27 = vandq_s8(v26, v22);
    v28 = (int64x2_t)vandq_s8(v26, v23);
    v29 = (int64x2_t)vandq_s8(v26, v24);
    v30 = (int64x2_t)vandq_s8(v26, v25);
    *(int8x16_t *)&a3[v21] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v29, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v29, 0x20uLL)), v27), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v30, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v30, 0x30uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v28, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v28, 0x10uLL))));
    v21 += 2;
  }
  while (v21 != 8);
  for (m = 0; m != 8; ++m)
    a3[m] ^= *(_QWORD *)(a1 + (a2 << 6) + m * 8);
  return result;
}

uint64_t *sub_23415FDA0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t *result;
  unint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  _OWORD v22[2];

  v5 = a3[1];
  v21[0] = *a3;
  v21[1] = v5;
  v6 = a3[3];
  v22[0] = a3[2];
  v22[1] = v6;
  result = sub_234184F8C((uint64_t *)v21);
  if (a2)
  {
    v8 = (unint64_t *)(a1 + 8);
    v9 = (uint64_t *)v22;
    do
    {
      v10 = *(v9 - 4);
      v11 = *v9++;
      v12 = (v10 ^ ((_DWORD)v11 << 16)) & 0xFFFF0000;
      v13 = (v10 | ((unint64_t)v11 << 32)) ^ (v12 << 16);
      v14 = v13 ^ v12;
      v15 = (v13 ^ (v14 >> 8)) & 0xFF000000FF00;
      v16 = v11 & 0xFFFFFFFF00000000 | HIDWORD(v10);
      v17 = (((v11 & 0xFFFFFFFF00000000) >> 16) ^ HIDWORD(v10)) & 0xFFFF0000;
      v18 = v16 ^ (v17 << 16);
      v19 = v18 ^ v17;
      v20 = (v18 ^ (v19 >> 8)) & 0xFF000000FF00;
      *(v8 - 1) = v14 ^ (v15 << 8) ^ v15 ^ (16
                                          * ((v14 ^ (v15 << 8) ^ ((v14 ^ (v15 << 8) ^ v15) >> 4)) & 0xF000F000F000F0)) ^ (v14 ^ (v15 << 8) ^ ((v14 ^ (v15 << 8) ^ v15) >> 4)) & 0xF000F000F000F0;
      *v8 = v19 ^ (v20 << 8) ^ v20 ^ (16 * ((v19 ^ (v20 << 8) ^ ((v19 ^ (v20 << 8) ^ v20) >> 4)) & 0xF000F000F000F0)) ^ (v19 ^ (v20 << 8) ^ ((v19 ^ (v20 << 8) ^ v20) >> 4)) & 0xF000F000F000F0;
      v8 += 2;
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t *sub_23415FE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  uint64_t *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  int64x2_t v21;
  int8x16_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t k;

  for (i = 0; i != 64; i += 8)
    *(_QWORD *)(a3 + i) ^= *(_QWORD *)(a1 + (a2 << 6) + i);
  v7 = 0;
  v8.i64[0] = 0xF000F000F000FLL;
  v8.i64[1] = 0xF000F000F000FLL;
  v9.i64[0] = 0xF000F000F000F0;
  v9.i64[1] = 0xF000F000F000F0;
  v10.i64[0] = 0xF000F000F000F00;
  v10.i64[1] = 0xF000F000F000F00;
  v11.i64[0] = 0xF000F000F000F000;
  v11.i64[1] = 0xF000F000F000F000;
  do
  {
    v12 = *(int8x16_t *)(a3 + v7);
    v13 = vandq_s8(v12, v8);
    v14 = (int64x2_t)vandq_s8(v12, v9);
    v15 = (int64x2_t)vandq_s8(v12, v10);
    v16 = (int64x2_t)vandq_s8(v12, v11);
    *(int8x16_t *)(a3 + v7) = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v15, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v15, 0x20uLL)), v13), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v16, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v16, 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v14, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v14, 0x30uLL))));
    v7 += 16;
  }
  while (v7 != 64);
  sub_234185394((uint64_t *)a3);
  sub_234185030((uint64_t *)a3);
  result = sub_234185394((uint64_t *)a3);
  v18 = a2 - 1;
  if (a2 != 1)
  {
    v19 = a1 + (a2 << 6) - 64;
    do
    {
      for (j = 0; j != 64; j += 8)
        *(_QWORD *)(a3 + j) ^= *(_QWORD *)(v19 + j);
      v21 = *(int64x2_t *)(a3 + 16);
      v23 = *(int64x2_t *)(a3 + 32);
      v22 = *(int8x16_t *)(a3 + 48);
      v24 = (int64x2_t)vextq_s8(v22, v22, 8uLL);
      v25.i64[0] = 0xFF00FF00FF00FFLL;
      v25.i64[1] = 0xFF00FF00FF00FFLL;
      v26 = veorq_s8(vbslq_s8(v25, (int8x16_t)vshrq_n_u64((uint64x2_t)v24, 8uLL), (int8x16_t)vshlq_n_s64(v24, 8uLL)), (int8x16_t)v24);
      v27 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)a3, (int8x16_t)v21), vbslq_s8(v25, (int8x16_t)vshrq_n_u64(*(uint64x2_t *)a3, 8uLL), (int8x16_t)vshlq_n_s64(*(int64x2_t *)a3, 8uLL))), v26);
      v28 = (int8x16_t)vdupq_lane_s64(v26.i64[0], 0);
      v29 = v26.i64[0] ^ v26.i64[1] ^ *(_QWORD *)(a3 + 8);
      *(_QWORD *)a3 ^= v26.u64[1];
      *(_QWORD *)(a3 + 8) = v29;
      v28.i64[0] = v26.i64[0] ^ v26.i64[1];
      *(int8x16_t *)(a3 + 16) = v27;
      *(int8x16_t *)(a3 + 32) = veorq_s8(veorq_s8(veorq_s8(vbslq_s8(v25, (int8x16_t)vshrq_n_u64((uint64x2_t)v21, 8uLL), (int8x16_t)vshlq_n_s64(v21, 8uLL)), (int8x16_t)v21), (int8x16_t)v23), v28);
      *(int8x16_t *)(a3 + 48) = veorq_s8(veorq_s8((int8x16_t)v23, v22), vbslq_s8(v25, (int8x16_t)vshrq_n_u64((uint64x2_t)v23, 8uLL), (int8x16_t)vshlq_n_s64(v23, 8uLL)));
      sub_23418525C(a3);
      v30 = 0;
      v31.i64[0] = 0xF000F000F000FLL;
      v31.i64[1] = 0xF000F000F000FLL;
      v32.i64[0] = 0xF000F000F000F0;
      v32.i64[1] = 0xF000F000F000F0;
      v33.i64[0] = 0xF000F000F000F00;
      v33.i64[1] = 0xF000F000F000F00;
      v34.i64[0] = 0xF000F000F000F000;
      v34.i64[1] = 0xF000F000F000F000;
      do
      {
        v35 = *(int8x16_t *)(a3 + v30);
        v36 = vandq_s8(v35, v31);
        v37 = (int64x2_t)vandq_s8(v35, v32);
        v38 = (int64x2_t)vandq_s8(v35, v33);
        v39 = (int64x2_t)vandq_s8(v35, v34);
        *(int8x16_t *)(a3 + v30) = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v38, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v38, 0x20uLL)), v36), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v39, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v39, 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v37, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v37, 0x30uLL))));
        v30 += 16;
      }
      while (v30 != 64);
      sub_234185394((uint64_t *)a3);
      sub_234185030((uint64_t *)a3);
      result = sub_234185394((uint64_t *)a3);
      v19 -= 64;
      --v18;
    }
    while (v18);
  }
  for (k = 0; k != 64; k += 8)
    *(_QWORD *)(a3 + k) ^= *(_QWORD *)(a1 + k);
  return result;
}

uint64_t *sub_2341600D0(uint64_t *result, uint64_t a2, unint64_t a3, uint64_t a4, _OWORD *a5)
{
  unint64_t v7;
  uint64_t *v9;
  uint64_t i;
  unsigned int j;
  unsigned int v12;
  uint64_t k;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _OWORD v20[4];
  _OWORD v21[60];
  _BYTE v22[64];
  _BYTE v23[12];
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = a3;
    v9 = result;
    memset(v21, 0, 512);
    sub_23415FAE0((uint64_t)v21, a4);
    for (i = 0; i != 64; i += 16)
      *(_OWORD *)&v23[i] = *a5;
    for (j = bswap32(v24); ; j += 4)
    {
      v12 = j;
      for (k = 12; k != 76; k += 16)
        *(_DWORD *)&v23[k] = bswap32(v12++);
      v14 = v7 >= 4 ? 4 : v7;
      memset(v20, 0, sizeof(v20));
      sub_23415FB54((uint64_t *)v20, (uint64_t)v23, v14);
      sub_23415FC00((uint64_t)v21, *(unsigned int *)(a4 + 240), (uint64_t *)v20);
      result = sub_23415FDA0((uint64_t)v22, v14, v20);
      v15 = 0;
      v16 = v14 <= 1 ? 1 : v14;
      v17 = 16 * v16;
      do
      {
        v18 = (uint64_t *)(a2 + v15);
        v19 = *(_QWORD *)&v22[v15 + 8];
        *v18 = *(_QWORD *)&v22[v15] ^ v9[v15 / 8];
        v18[1] = v19 ^ v9[v15 / 8 + 1];
        v15 += 16;
      }
      while (v17 != v15);
      v7 -= v14;
      if (!v7)
        break;
      v9 += 8;
      a2 += 64;
    }
  }
  return result;
}

double sub_234160294(int8x16_t *a1, int8x16_t *a2, unint64_t a3, uint64_t a4, int8x16_t *a5, int a6)
{
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double result;
  _OWORD v18[4];
  _OWORD v19[60];
  _OWORD v20[4];
  int8x16_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 0x10)
  {
    v11 = a3 >> 4;
    memset(v19, 0, 512);
    sub_23415FAE0((uint64_t)v19, a4);
    v21 = *a5;
    if (a6)
    {
      do
      {
        v12 = *a1++;
        v21 = veorq_s8(v12, v21);
        memset(v20, 0, sizeof(v20));
        sub_23415FB54((uint64_t *)v20, (uint64_t)&v21, 1);
        sub_23415FC00((uint64_t)v19, *(unsigned int *)(a4 + 240), (uint64_t *)v20);
        sub_23415FDA0((uint64_t)a2, 1, v20);
        v13 = *a2++;
        v21 = v13;
        --v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        if (v11 >= 4)
          v14 = 4;
        else
          v14 = v11;
        v15 = v14;
        __memcpy_chk();
        memset(v18, 0, sizeof(v18));
        sub_23415FB54((uint64_t *)v18, (uint64_t)a1, v14);
        sub_23415FE88((uint64_t)v19, *(unsigned int *)(a4 + 240), (uint64_t)v18);
        sub_23415FDA0((uint64_t)a2, v14, v18);
        *a2 = veorq_s8(v21, *a2);
        if (v14 >= 2)
        {
          v16 = 0;
          do
          {
            a2[v16 / 0x10 + 1] = veorq_s8((int8x16_t)v20[v16 / 0x10], a2[v16 / 0x10 + 1]);
            v16 += 16;
          }
          while (v15 * 16 - 16 != v16);
        }
        v21 = (int8x16_t)v20[v15 - 1];
        a1 += 4;
        a2 += 4;
        v11 -= v14;
      }
      while (v11);
    }
    result = *(double *)v21.i64;
    *a5 = v21;
  }
  return result;
}

uint64_t sub_2341604A4(uint64_t a1, uint64_t *a2, _QWORD *a3, void *__src, size_t __len)
{
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  size_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  result = 0xFFFFFFFFLL;
  if (__len - 16 <= 0x7FFFFFE7 && (__len & 7) == 0)
  {
    if (a2)
      v9 = a2;
    else
      v9 = (uint64_t *)&unk_2342E222A;
    memmove(a3 + 1, __src, __len);
    v10 = 0;
    v15 = *v9;
    v11 = __len >> 3;
    v12 = 1;
    do
    {
      v13 = 0;
      do
      {
        v14 = &a3[v13];
        v16 = v14[1];
        sub_23415F318((uint64_t)&v15, (uint64_t)&v15, a1);
        HIBYTE(v15) ^= (_BYTE)v12 + (_BYTE)v13;
        BYTE6(v15) ^= (unsigned __int16)(v12 + v13) >> 8;
        BYTE5(v15) ^= (v12 + v13) >> 16;
        BYTE4(v15) ^= (v12 + v13) >> 24;
        v14[1] = v16;
        ++v13;
      }
      while (v11 != v13);
      ++v10;
      v12 += v11;
    }
    while (v10 != 6);
    *a3 = v15;
    return (__len + 8);
  }
  return result;
}

uint64_t sub_2341605EC(uint64_t a1, char *a2, char *__dst, uint64_t *a4, unint64_t a5)
{
  int v5;
  char *v7;
  _QWORD v9[2];

  v5 = a5;
  v9[1] = *MEMORY[0x24BDAC8D0];
  if (!sub_234160688(a1, __dst, v9, a4, a5))
    return 0xFFFFFFFFLL;
  if (a2)
    v7 = a2;
  else
    v7 = (char *)&unk_2342E222A;
  if (sub_23418E484((char *)v9, v7, 8))
    return 0xFFFFFFFFLL;
  else
    return (v5 - 8);
}

uint64_t sub_234160688(uint64_t a1, char *__dst, _QWORD *a3, uint64_t *__src, unint64_t a5)
{
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a5 - 24 > 0x7FFFFFE7 || (a5 & 7) != 0)
    return 0;
  v18 = *__src;
  memmove(__dst, __src + 1, a5 - 8);
  v11 = a5 >> 3;
  v12 = __dst - 16;
  v13 = 6 * (a5 >> 3) - 6;
  v14 = 5;
  v15 = 1 - (a5 >> 3);
  do
  {
    v16 = v13;
    v17 = v11;
    do
    {
      HIBYTE(v18) ^= v16;
      BYTE6(v18) ^= BYTE1(v16);
      BYTE5(v18) ^= BYTE2(v16);
      BYTE4(v18) ^= HIBYTE(v16);
      v19 = *(_QWORD *)&v12[8 * v17];
      sub_23415F3DC((uint64_t)&v18, (uint64_t)&v18, a1);
      *(_QWORD *)&v12[8 * v17--] = v19;
      --v16;
    }
    while (v17 != 1);
    --v14;
    LODWORD(v13) = v13 + v15;
  }
  while (v14 < 6);
  *a3 = v18;
  return 1;
}

uint64_t sub_2341607E4(uint64_t a1, _QWORD *a2, uint64_t *a3, unint64_t a4, const void *a5, size_t a6)
{
  size_t v6;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v6 = (a6 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a3 = 0;
  if (a6 - 0x100000000 < 0xFFFFFFFF00000001 || v6 + 8 > a4)
    return 0;
  LODWORD(v17[0]) = -1504093786;
  HIDWORD(v17[0]) = bswap32(a6);
  if (a6 > 8)
  {
    result = (uint64_t)sub_23418E2E4((a6 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (!result)
      return result;
    v15 = (_QWORD *)result;
    *(_QWORD *)(result + v6 - 8) = 0;
    memcpy((void *)result, a5, a6);
    v16 = sub_2341604A4(a1, v17, a2, v15, v6);
    sub_23418E3C4(v15);
    if ((v16 & 0x80000000) == 0)
    {
      v14 = v16;
      goto LABEL_12;
    }
    return 0;
  }
  v17[1] = 0;
  __memcpy_chk();
  sub_23415F318((uint64_t)v17, (uint64_t)a2, a1);
  v14 = 16;
LABEL_12:
  *a3 = v14;
  return 1;
}

uint64_t sub_234160930(uint64_t a1, char *__dst, uint64_t *a3, unint64_t a4, uint64_t *__src, unint64_t a6)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  if (a6 < 0x10 || a6 - 8 > a4)
    return 0;
  if (a6 == 16)
  {
    sub_23415F3DC((uint64_t)__src, (uint64_t)v18, a1);
    v19[0] = v18[0];
    *(_QWORD *)__dst = v18[1];
  }
  else
  {
    result = sub_234160688(a1, __dst, v19, __src, a6);
    if (!(_DWORD)result)
      return result;
  }
  v10 = sub_23418E484((char *)v19, byte_2342E2232, 4);
  v11 = 0;
  v12 = bswap32(HIDWORD(v19[0]));
  v13 = (v12 - 1) ^ (a6 - 9);
  v14 = ((v10 - 1) & ~(uint64_t)v10) >> 63;
  if (!HIDWORD(v19[0]))
    v14 = 0;
  v15 = __OFSUB__(v13, 8);
  if (v13 >= 8)
    v14 = 0;
  v16 = 14 - a6;
  do
  {
    if ((((a6 - 15 - v12 + v11) & v16 & 0x8000000000000000) != 0) != v15)
      v17 = -1;
    else
      v17 = (__dst[a6 - 15 + v11] - 1) >> 63;
    v14 &= v17;
    ++v11;
    --v16;
    v15 = __OFSUB__(v11, 7);
  }
  while (v11 != 7);
  *a3 = v14 & v12;
  return v14 & 1;
}

uint64_t sub_234160A94(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, unsigned int *a7)
{
  return sub_234160AA0(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(char *, _BYTE *, unint64_t, uint64_t, uint64_t))sub_2341600D0);
}

uint64_t sub_234160AA0(uint64_t result, _BYTE *a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, unsigned int *a7, uint64_t (*a8)(char *, _BYTE *, unint64_t, uint64_t, uint64_t))
{
  char *v12;
  unsigned int v13;
  BOOL v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t i;
  unsigned int v23;
  int v24;
  uint64_t j;
  unsigned int v26;
  unsigned int *v27;

  v12 = (char *)result;
  v13 = *a7;
  if (*a7)
    v14 = a3 == 0;
  else
    v14 = 1;
  if (v14)
  {
    v15 = a3;
  }
  else
  {
    do
    {
      v16 = *v12++;
      *a2++ = *((_BYTE *)a6 + v13) ^ v16;
      v15 = a3 - 1;
      v13 = ((_BYTE)v13 + 1) & 0xF;
      if (!v13)
        break;
      --a3;
    }
    while (a3);
  }
  v17 = bswap32(*(_DWORD *)(a5 + 12));
  if (v15 >= 0x10)
  {
    do
    {
      v18 = v15 >> 4;
      if (v15 >> 4 >= 0x10000000)
        v18 = 0x10000000;
      v19 = v17 + v18;
      if (v18 <= v19)
        v17 += v18;
      else
        v17 = 0;
      if (v18 <= v19)
        v19 = 0;
      v20 = v18 - v19;
      result = a8(v12, a2, v18 - v19, a4, a5);
      *(_DWORD *)(a5 + 12) = bswap32(v17);
      if (!v17)
      {
        v21 = 1;
        for (i = 11; i != -1; --i)
        {
          v23 = v21 + *(unsigned __int8 *)(a5 + i);
          *(_BYTE *)(a5 + i) = v23;
          v21 = v23 >> 8;
        }
      }
      v15 -= 16 * v20;
      a2 += 16 * v20;
      v12 += 16 * v20;
    }
    while (v15 > 0xF);
  }
  if (v15)
  {
    *a6 = 0;
    a6[1] = 0;
    result = a8((char *)a6, a6, 1uLL, a4, a5);
    *(_DWORD *)(a5 + 12) = bswap32(v17 + 1);
    if (v17 == -1)
    {
      v24 = 1;
      for (j = 11; j != -1; --j)
      {
        v26 = v24 + *(unsigned __int8 *)(a5 + j);
        *(_BYTE *)(a5 + j) = v26;
        v24 = v26 >> 8;
      }
    }
    v27 = a7;
    do
    {
      a2[v13] = *((_BYTE *)a6 + v13) ^ v12[v13];
      ++v13;
      --v15;
    }
    while (v15);
  }
  else
  {
    v27 = a7;
  }
  *v27 = v13;
  return result;
}

uint64_t sub_234160C58(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, unsigned int *a7, uint64_t (*a8)(uint64_t, _QWORD *, uint64_t))
{
  char *v14;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  char v18;
  int v19;
  uint64_t i;
  unsigned int v21;
  int v22;
  uint64_t j;
  unsigned int v24;

  v14 = (char *)result;
  v15 = *a7;
  if (*a7)
    v16 = a3 == 0;
  else
    v16 = 1;
  if (v16)
  {
    v17 = a3;
  }
  else
  {
    do
    {
      v18 = *v14++;
      *(_BYTE *)a2 = *((_BYTE *)a6 + v15) ^ v18;
      a2 = (_QWORD *)((char *)a2 + 1);
      v17 = a3 - 1;
      v15 = (v15 + 1) & 0xF;
      if (!v15)
        break;
      --a3;
    }
    while (a3);
  }
  if (v17 >= 0x10)
  {
    do
    {
      result = a8(a5, a6, a4);
      v19 = 1;
      for (i = 15; i != -1; --i)
      {
        v21 = v19 + *(unsigned __int8 *)(a5 + i);
        *(_BYTE *)(a5 + i) = v21;
        v19 = v21 >> 8;
      }
      *a2 = *a6 ^ *(_QWORD *)v14;
      a2[1] = a6[1] ^ *((_QWORD *)v14 + 1);
      v17 -= 16;
      a2 += 2;
      v14 += 16;
    }
    while (v17 > 0xF);
    v15 = 0;
  }
  if (v17)
  {
    result = a8(a5, a6, a4);
    v22 = 1;
    for (j = 15; j != -1; --j)
    {
      v24 = v22 + *(unsigned __int8 *)(a5 + j);
      *(_BYTE *)(a5 + j) = v24;
      v22 = v24 >> 8;
    }
    do
    {
      *((_BYTE *)a2 + v15) = *((_BYTE *)a6 + v15) ^ v14[v15];
      ++v15;
      --v17;
    }
    while (v17);
  }
  *a7 = v15;
  return result;
}

uint64_t *sub_234160DBC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1)
    return sub_23415F318(a1, a2, a3);
  else
    return sub_23415F3DC(a1, a2, a3);
}

__n128 sub_234160DD0(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 *a5, void (*a6)(__n128 *, __n128 *, uint64_t))
{
  __n128 *v10;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  unint64_t i;
  __n128 *v16;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  char v22;
  __n128 result;

  if (a3)
  {
    v10 = a2;
    if (a3 < 0x10)
    {
      v17 = a5;
      i = a3;
    }
    else
    {
      v12 = 0;
      v13 = a5;
      v14 = a2;
      for (i = a3; i > 0xF; i -= 16)
      {
        v16 = &v10[v12 / 0x10];
        v16->n128_u64[0] = v13->n128_u64[0] ^ *(_QWORD *)(a1 + v12);
        v16->n128_u64[1] = v13->n128_u64[1] ^ *(_QWORD *)(a1 + v12 + 8);
        a6(&v10[v12 / 0x10], &v10[v12 / 0x10], a4);
        v13 = v14++;
        v12 += 16;
      }
      v10 = (__n128 *)((char *)v10 + v12);
      v17 = v10 - 1;
      if (a3 == v12)
      {
        --v10;
LABEL_15:
        result = *v10;
        *a5 = *v10;
        return result;
      }
      a1 += v12;
    }
    v18 = 0;
    do
    {
      v10->n128_u8[v18] = v17->n128_u8[v18] ^ *(_BYTE *)(a1 + v18);
      ++v18;
    }
    while (i != v18);
    if ((unint64_t)(v18 - 1) <= 0xE)
    {
      v19 = 15 - 2 * i + v18 + 1;
      v20 = (char *)v10 + i;
      v21 = (char *)v17 + i;
      do
      {
        v22 = *v21++;
        *v20++ = v22;
        --v19;
      }
      while (v19);
    }
    a6(v10, v10, a4);
    goto LABEL_15;
  }
  return result;
}

unint64_t sub_234160F28(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *, _QWORD *, uint64_t))
{
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  char v27;
  _QWORD v28[4];

  v28[3] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return result;
  v9 = a3;
  v10 = (_QWORD *)a2;
  v11 = (_QWORD *)result;
  v13 = result > 0x1F && result - 32 >= a2;
  if (result < a2 || v13)
  {
    if (a3 < 0x10)
    {
      v20 = (_OWORD *)a5;
    }
    else
    {
      v17 = (_QWORD *)a5;
      do
      {
        v18 = v11;
        result = a6(v11, v10, a4);
        v19 = v10[1];
        *v10 ^= *v17;
        v9 -= 16;
        v10[1] = v17[1] ^ v19;
        v11 += 2;
        v10 += 2;
        v17 = v18;
      }
      while (v9 > 0xF);
      v20 = v11 - 2;
    }
    *(_OWORD *)a5 = *v20;
    if (!v9)
      return result;
  }
  else if (a3 >= 0x10)
  {
    do
    {
      result = a6(v11, v28, a4);
      v14 = v28[1];
      v15 = *v11;
      *v10 = *(_QWORD *)a5 ^ v28[0];
      *(_QWORD *)a5 = v15;
      v16 = v11[1];
      v10[1] = *(_QWORD *)(a5 + 8) ^ v14;
      *(_QWORD *)(a5 + 8) = v16;
      v9 -= 16;
      v11 += 2;
      v10 += 2;
    }
    while (v9 > 0xF);
    if (!v9)
      return result;
  }
  result = a6(v11, v28, a4);
  v21 = 0;
  v22 = 15;
  if (v9 > 0xF)
    v22 = v9;
  do
  {
    v23 = *((_BYTE *)v11 + v21);
    *((_BYTE *)v10 + v21) = *(_BYTE *)(a5 + v21) ^ *((_BYTE *)v28 + v21);
    *(_BYTE *)(a5 + v21++) = v23;
  }
  while (v9 != v21);
  if ((unint64_t)(v21 - 1) <= 0xE)
  {
    v24 = v22 - 2 * v9 + v21 + 1;
    v25 = (_BYTE *)(a5 + v9);
    v26 = (char *)v11 + v9;
    do
    {
      v27 = *v26++;
      *v25++ = v27;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_23416110C(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, _QWORD *a5, unsigned int *a6)
{
  uint64_t result;
  unsigned int v8;

  v8 = *a6;
  result = sub_234161150(a1, a2, a3, a4, a5, &v8, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t))sub_23415F314);
  *a6 = v8;
  return result;
}

uint64_t sub_234161150(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t a4, _QWORD *a5, unsigned int *a6, uint64_t (*a7)(_QWORD *, _QWORD *, uint64_t))
{
  char *v12;
  unsigned int v13;
  BOOL v14;
  unint64_t v15;
  char v16;

  v12 = (char *)result;
  v13 = *a6;
  if (*a6)
    v14 = a3 == 0;
  else
    v14 = 1;
  if (v14)
  {
    v15 = a3;
  }
  else
  {
    do
    {
      v16 = *v12++;
      *(_BYTE *)a2 = *((_BYTE *)a5 + v13) ^ v16;
      a2 = (_QWORD *)((char *)a2 + 1);
      v15 = a3 - 1;
      v13 = (v13 + 1) & 0xF;
      if (!v13)
        break;
      --a3;
    }
    while (a3);
  }
  if (v15 >= 0x10)
  {
    do
    {
      result = a7(a5, a5, a4);
      *a2 = *a5 ^ *(_QWORD *)v12;
      a2[1] = a5[1] ^ *((_QWORD *)v12 + 1);
      v15 -= 16;
      a2 += 2;
      v12 += 16;
    }
    while (v15 > 0xF);
    v13 = 0;
  }
  if (v15)
  {
    result = a7(a5, a5, a4);
    do
    {
      *((_BYTE *)a2 + v13) = *((_BYTE *)a5 + v13) ^ v12[v13];
      ++v13;
      --v15;
    }
    while (v15);
  }
  *a6 = v13;
  return result;
}

uint64_t sub_234161260(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, int a7)
{
  uint64_t result;
  unsigned int v9;

  v9 = *a6;
  result = sub_2341612A4(a1, a2, a3, a4, a5, &v9, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23415F314);
  *a6 = v9;
  return result;
}

uint64_t sub_2341612A4(uint64_t result, _BYTE *a2, unint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, int a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t))
{
  char *v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  char v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;

  v13 = (char *)result;
  v14 = *a6;
  if (*a6)
    v15 = a3 == 0;
  else
    v15 = 1;
  v16 = !v15;
  if (a7)
  {
    if (v16)
    {
      do
      {
        v17 = *v13++;
        v18 = *(_BYTE *)(a5 + v14);
        *(_BYTE *)(a5 + v14) = v18 ^ v17;
        *a2++ = v18 ^ v17;
        v19 = a3 - 1;
        v14 = ((_BYTE)v14 + 1) & 0xF;
        if (!v14)
          break;
        --a3;
      }
      while (a3);
    }
    else
    {
      v19 = a3;
    }
    if (v19 < 0x10)
    {
      v25 = v14;
      if (!v19)
        goto LABEL_41;
    }
    else
    {
      do
      {
        result = a8(a5, a5, a4);
        if (v14 <= 0xF)
        {
          v22 = v14;
          do
          {
            v23 = *(_QWORD *)&v13[v22] ^ *(_QWORD *)(a5 + v22);
            *(_QWORD *)(a5 + v22) = v23;
            *(_QWORD *)&a2[v22] = v23;
            v24 = v22 >= 8;
            v22 += 8;
          }
          while (!v24);
        }
        v14 = 0;
        v25 = 0;
        v19 -= 16;
        a2 += 16;
        v13 += 16;
      }
      while (v19 > 0xF);
      if (!v19)
        goto LABEL_41;
    }
    result = a8(a5, a5, a4);
    do
    {
      v26 = *(_BYTE *)(a5 + v25) ^ v13[v25];
      *(_BYTE *)(a5 + v25) = v26;
      a2[v25++] = v26;
      --v19;
    }
    while (v19);
    goto LABEL_41;
  }
  if (v16)
  {
    do
    {
      v20 = *v13++;
      *a2++ = v20 ^ *(_BYTE *)(a5 + v14);
      *(_BYTE *)(a5 + v14) = v20;
      v21 = a3 - 1;
      v14 = ((_BYTE)v14 + 1) & 0xF;
      if (!v14)
        break;
      --a3;
    }
    while (a3);
  }
  else
  {
    v21 = a3;
  }
  if (v21 < 0x10)
  {
    v25 = v14;
    if (!v21)
      goto LABEL_41;
    goto LABEL_39;
  }
  do
  {
    result = a8(a5, a5, a4);
    if (v14 <= 0xF)
    {
      v27 = v14;
      do
      {
        v28 = *(_QWORD *)&v13[v27];
        *(_QWORD *)&a2[v27] = *(_QWORD *)(a5 + v27) ^ v28;
        *(_QWORD *)(a5 + v27) = v28;
        v24 = v27 >= 8;
        v27 += 8;
      }
      while (!v24);
    }
    v14 = 0;
    v25 = 0;
    v21 -= 16;
    a2 += 16;
    v13 += 16;
  }
  while (v21 > 0xF);
  if (v21)
  {
LABEL_39:
    result = a8(a5, a5, a4);
    do
    {
      v29 = v13[v25];
      a2[v25] = v29 ^ *(_BYTE *)(a5 + v25);
      *(_BYTE *)(a5 + v25++) = v29;
      --v21;
    }
    while (v21);
  }
LABEL_41:
  *a6 = v25;
  return result;
}

uint64_t sub_2341614D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  if ((_DWORD)v4 == *(_DWORD *)(a3 + 16))
  {
    v5 = sub_234161608(a1, a2, a3);
  }
  else
  {
    v6 = (_DWORD)v4 == 0;
    if ((_DWORD)v4)
      v7 = a3;
    else
      v7 = a2;
    if (v6)
      v8 = a3;
    else
      v8 = a2;
    if ((sub_234162948(*(uint64_t **)v7, *(int *)(v7 + 8), *(uint64_t **)v8, *(int *)(v8 + 8)) & 0x80000000) != 0)
    {
      if (!sub_23416159C(a1, v8, v7))
        return 0;
      LODWORD(v4) = 1;
    }
    else
    {
      v9 = sub_23416159C(a1, v7, v8);
      v4 = 0;
      if (!v9)
        return v4;
    }
    v5 = 1;
  }
  *(_DWORD *)(a1 + 16) = v4;
  return v5;
}

uint64_t sub_234161580(uint64_t a1, uint64_t a2)
{
  return sub_234162948(*(uint64_t **)a1, *(int *)(a1 + 8), *(uint64_t **)a2, *(int *)(a2 + 8));
}

uint64_t sub_23416159C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  result = sub_234161CF8(a1, a2, a3);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a1 + 8);
    v6 = 8 * v5 - 8;
    v7 = *(_DWORD *)(a1 + 8);
    while (1)
    {
      v8 = __OFSUB__(v7--, 1);
      if (v7 < 0 != v8)
        break;
      v9 = *(_QWORD *)(*(_QWORD *)a1 + v6);
      v6 -= 8;
      if (v9)
      {
        *(_DWORD *)(a1 + 8) = v7 + 1;
        return 1;
      }
    }
    *(_DWORD *)(a1 + 8) = v5 & ((int)v5 >> 31);
    if ((v5 & 0x80000000) == 0)
      *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_234161608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  result = sub_234161674((_QWORD **)a1, a2, a3);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a1 + 8);
    v6 = 8 * v5 - 8;
    v7 = *(_DWORD *)(a1 + 8);
    while (1)
    {
      v8 = __OFSUB__(v7--, 1);
      if (v7 < 0 != v8)
        break;
      v9 = *(_QWORD *)(*(_QWORD *)a1 + v6);
      v6 -= 8;
      if (v9)
      {
        *(_DWORD *)(a1 + 8) = v7 + 1;
        return 1;
      }
    }
    *(_DWORD *)(a1 + 8) = v5 & ((int)v5 >> 31);
    if ((v5 & 0x80000000) == 0)
      *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_234161674(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a3 + 8);
  if (v4 >= v5)
    v6 = a2;
  else
    v6 = a3;
  if (v4 >= v5)
    v7 = a3;
  else
    v7 = a2;
  v8 = *(int *)(v6 + 8);
  v9 = *(int *)(v7 + 8);
  result = sub_23416171C(a1, v8 + 1);
  if ((_DWORD)result)
  {
    *((_DWORD *)a1 + 2) = v8 + 1;
    v11 = sub_2341617E0(*a1, *(uint64_t **)v6, *(uint64_t **)v7, v9);
    if ((int)v9 < (int)v8)
    {
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)v6 + 8 * v9);
        v13 = __CFADD__(v12, v11);
        v14 = v12 + v11;
        v11 = v13;
        (*a1)[v9++] = v14;
      }
      while (v8 != v9);
    }
    (*a1)[v8] = v11;
    return 1;
  }
  return result;
}

uint64_t sub_23416171C(_QWORD **a1, unint64_t a2)
{
  int v2;
  int v3;
  __int16 v4;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;

  if (*((int *)a1 + 3) >= a2)
    return 1;
  v2 = a2;
  if (a2 < 0x800000)
  {
    if ((*((_BYTE *)a1 + 20) & 2) != 0)
    {
      v3 = 106;
      v4 = 360;
      goto LABEL_11;
    }
    result = (uint64_t)sub_23418E380(a2, 8uLL);
    if (!result)
      return result;
    v7 = (_QWORD *)result;
    v8 = *((int *)a1 + 2);
    if ((_DWORD)v8)
      memcpy((void *)result, *a1, 8 * v8);
    sub_23418E3C4(*a1);
    *a1 = v7;
    *((_DWORD *)a1 + 3) = v2;
    return 1;
  }
  v3 = 102;
  v4 = 355;
LABEL_11:
  sub_2341579B4(3, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/bn.c", v4);
  return 0;
}

uint64_t sub_2341617E0(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  if (!a4)
    return 0;
  if (a4 < 4)
  {
    v4 = 0;
    do
    {
LABEL_17:
      v23 = *a2++;
      v22 = v23;
      v24 = *a3++;
      v7 = __CFADD__(v22, v24);
      v25 = v22 + v24;
      v26 = v7;
      v7 = __CFADD__(v25, v4);
      v27 = v25 + v4;
      if (v7)
        v4 = 1;
      else
        v4 = v26;
      *a1++ = v27;
      --a4;
    }
    while (a4);
    return v4;
  }
  v4 = 0;
  do
  {
    v5 = *a2 + *a3;
    v6 = __CFADD__(*a2, *a3);
    v7 = __CFADD__(v5, v4);
    v8 = v5 + v4;
    v9 = v7 || v6;
    v7 = v9 != 0;
    *a1 = v8;
    v10 = a2[1];
    v11 = a3[1];
    v13 = v7;
    v7 = __CFADD__(v7, v10);
    v12 = v13 + v10;
    v7 |= __CFADD__(v11, v12);
    a1[1] = v11 + v12;
    v14 = a2[2];
    v15 = a3[2];
    v17 = v7;
    v7 = __CFADD__(v7, v14);
    v16 = v17 + v14;
    v7 |= __CFADD__(v15, v16);
    a1[2] = v15 + v16;
    v18 = a2[3];
    v19 = a3[3];
    v21 = v7 + v18;
    v7 = __CFADD__(v7, v18) | __CFADD__(v19, v21);
    v20 = v19 + v21;
    v4 = v7;
    a1[3] = v20;
    a2 += 4;
    a3 += 4;
    a1 += 4;
    a4 -= 4;
  }
  while (a4 >= 4);
  if (a4)
    goto LABEL_17;
  return v4;
}

uint64_t sub_23416189C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v1 = *(unsigned int *)(result + 8);
  v2 = 8 * v1 - 8;
  v3 = *(_DWORD *)(result + 8);
  while (1)
  {
    v4 = __OFSUB__(v3--, 1);
    if (v3 < 0 != v4)
      break;
    v5 = *(_QWORD *)(*(_QWORD *)result + v2);
    v2 -= 8;
    if (v5)
    {
      *(_DWORD *)(result + 8) = v3 + 1;
      return result;
    }
  }
  *(_DWORD *)(result + 8) = v1 & ((int)v1 >> 31);
  if ((v1 & 0x80000000) == 0)
    *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_2341618E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!a2)
    return 1;
  v2 = a2;
  v4 = *(int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_12;
  v5 = 0;
  v6 = *(uint64_t **)a1;
  do
  {
    v7 = *v6++;
    v5 |= v7;
    --v4;
  }
  while (v4);
  if (!v5)
  {
LABEL_12:
    v8 = 1;
    if (sub_23416171C((_QWORD **)a1, 1uLL))
    {
      *(_DWORD *)(a1 + 16) = 0;
      **(_QWORD **)a1 = v2;
      *(_DWORD *)(a1 + 8) = 1;
      return v8;
    }
    return 0;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    v13 = 0;
    while (1)
    {
      v14 = *(int *)(a1 + 8);
      if (v13 >= v14)
        break;
      v15 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v13);
      v16 = __CFADD__(v15, v2);
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v13++) = v15 + v2;
      v2 = 1;
      if (!v16)
        return 1;
    }
    if ((_DWORD)v13 != (_DWORD)v14)
      return 1;
    if (sub_23416171C((_QWORD **)a1, v14 + 1))
    {
      ++*(_DWORD *)(a1 + 8);
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = v2;
      return 1;
    }
    return 0;
  }
  *(_DWORD *)(a1 + 16) = 0;
  v8 = sub_234161AB0(a1, a2);
  v9 = *(int *)(a1 + 8);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *(uint64_t **)a1;
    do
    {
      v12 = *v11++;
      v10 |= v12;
      --v9;
    }
    while (v9);
    if (v10)
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) == 0;
  }
  return v8;
}

BOOL sub_234161A24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(int *)(a1 + 8);
  if (!(_DWORD)v1)
    return 1;
  v2 = 0;
  v3 = *(uint64_t **)a1;
  do
  {
    v4 = *v3++;
    v2 |= v4;
    --v1;
  }
  while (v1);
  return v2 == 0;
}

uint64_t sub_234161A58(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  if (a2)
  {
    result = sub_23416171C((_QWORD **)a1, 1uLL);
    if (!(_DWORD)result)
      return result;
    *(_DWORD *)(a1 + 16) = 0;
    **(_QWORD **)a1 = a2;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return 1;
}

uint64_t sub_234161AB0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a2)
  {
    v2 = a2;
    v4 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v4)
      goto LABEL_8;
    v5 = 0;
    v6 = 0;
    v7 = *(unint64_t **)a1;
    do
      v6 |= v7[v5++];
    while ((int)v4 != v5);
    if (!v6)
    {
LABEL_8:
      v9 = 1;
      if (!sub_23416171C((_QWORD **)a1, 1uLL))
        return 0;
      *(_DWORD *)(a1 + 16) = 0;
      **(_QWORD **)a1 = v2;
      *(_DWORD *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 16) = **(_QWORD **)a1 != 0;
      return v9;
    }
    if (*(_DWORD *)(a1 + 16))
    {
      *(_DWORD *)(a1 + 16) = 0;
      result = sub_2341618E4(a1, a2);
      *(_DWORD *)(a1 + 16) = 1;
      return result;
    }
    v10 = 8 * v4 - 8;
    do
    {
      v11 = __OFSUB__((_DWORD)v4, 1);
      LODWORD(v4) = v4 - 1;
      if ((int)v4 < 0 != v11)
      {
        v13 = *v7;
        goto LABEL_18;
      }
      v12 = *(unint64_t *)((char *)v7 + v10);
      v10 -= 8;
    }
    while (!v12);
    v13 = *v7;
    if (!(_DWORD)v4 && a2 > v13)
    {
      *v7 = a2 - v13;
      v9 = 1;
      *(_DWORD *)(a1 + 16) = 1;
      return v9;
    }
LABEL_18:
    v14 = v13 - a2;
    if (v13 >= a2)
    {
      v17 = 0;
      v15 = 0;
    }
    else
    {
      v15 = 0;
      v16 = 8;
      do
      {
        *v7 = v14;
        ++v15;
        v7 = (unint64_t *)(*(_QWORD *)a1 + v16);
        v13 = *v7;
        v16 += 8;
        v14 = -1;
      }
      while (!*v7);
      v7 = (unint64_t *)(*(_QWORD *)a1 + v16 - 8);
      v2 = 1;
      v17 = v15;
    }
    *v7 = v13 - v2;
    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15) && v17 == *(_DWORD *)(a1 + 8) - 1)
      *(_DWORD *)(a1 + 8) = v17;
  }
  return 1;
}

uint64_t sub_234161C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  int v9;

  v3 = a3;
  v5 = *(_DWORD *)(a3 + 16);
  if (*(_DWORD *)(a2 + 16))
  {
    if (v5)
    {
      v6 = a2;
      goto LABEL_10;
    }
    v7 = 1;
LABEL_7:
    result = sub_234161608(a1, a2, a3);
    if (!(_DWORD)result)
      return result;
    goto LABEL_15;
  }
  if (v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = a3;
  v3 = a2;
LABEL_10:
  if ((sub_234162948(*(uint64_t **)v3, *(int *)(v3 + 8), *(uint64_t **)v6, *(int *)(v6 + 8)) & 0x80000000) != 0)
  {
    result = sub_23416159C(a1, v6, v3);
    if (!(_DWORD)result)
      return result;
    v7 = 1;
    goto LABEL_15;
  }
  v9 = sub_23416159C(a1, v3, v6);
  v7 = 0;
  result = 0;
  if (v9)
  {
LABEL_15:
    *(_DWORD *)(a1 + 16) = v7;
    return 1;
  }
  return result;
}

uint64_t sub_234161CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;

  v6 = *(_DWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a2 + 8);
  v8 = v6;
  if (v6 > v7)
  {
    if (v6 > v7)
    {
      v9 = 0;
      v10 = v6 - (uint64_t)v7;
      v11 = (uint64_t *)(*(_QWORD *)a3 + 8 * v7);
      do
      {
        v12 = *v11++;
        v9 |= v12;
        --v10;
      }
      while (v10);
      v8 = *(_DWORD *)(a2 + 8);
      if (v9)
      {
        v13 = 229;
LABEL_16:
        sub_2341579B4(3, 0, 100, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/add.c", v13);
        return 0;
      }
    }
    else
    {
      v8 = *(_DWORD *)(a2 + 8);
    }
  }
  result = sub_23416171C((_QWORD **)a1, v7);
  if (!(_DWORD)result)
    return result;
  v15 = v8;
  v16 = sub_234161E5C(*(unint64_t **)a1, *(unint64_t **)a2, *(unint64_t **)a3, v8);
  LODWORD(v17) = *(_DWORD *)(a2 + 8);
  if (v8 < (int)v17)
  {
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v15);
      v19 = v18 >= v16;
      v20 = v18 - v16;
      v16 = !v19;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = v20;
      v17 = *(int *)(a2 + 8);
    }
    while (v15 < v17);
  }
  if (v16)
  {
    v13 = 245;
    goto LABEL_16;
  }
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 16) = 0;
  return 1;
}

BOOL sub_234161E20(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = *(int *)(a1 + 8);
  v3 = v2 > a2;
  v4 = v2 - a2;
  if (!v3)
    return 1;
  v5 = 0;
  v6 = (uint64_t *)(*(_QWORD *)a1 + 8 * a2);
  do
  {
    v7 = *v6++;
    v5 |= v7;
    --v4;
  }
  while (v4);
  return v5 == 0;
}

unint64_t sub_234161E5C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _BOOL1 v6;
  unint64_t v7;
  _BOOL4 v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL1 v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL1 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL1 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;

  if (!a4)
    return 0;
  if (a4 < 4)
  {
    v4 = 0;
    do
    {
LABEL_14:
      v20 = *a2++;
      v19 = v20;
      v21 = *a3++;
      v6 = v19 >= v21;
      v22 = v19 - v21;
      v23 = !v6;
      v6 = v22 >= v4;
      v24 = v22 - v4;
      if (v6)
        v4 = v23;
      else
        v4 = 1;
      *a1++ = v24;
      --a4;
    }
    while (a4);
    return v4;
  }
  v4 = 0;
  do
  {
    v5 = *a2 - *a3;
    v6 = v5 >= v4;
    v7 = v5 - v4;
    v8 = !v6 || *a2 < *a3;
    v6 = !v8;
    *a1 = v7;
    v9 = a2[1];
    v10 = a3[1];
    v11 = v6;
    v6 = __CFSUB__(v9, v10, v6);
    a1[1] = v9 - (v10 + !v11);
    v12 = a2[2];
    v13 = a3[2];
    v14 = v6;
    v6 = __CFSUB__(v12, v13, v6);
    a1[2] = v12 - (v13 + !v14);
    v15 = a2[3];
    v16 = a3[3];
    v18 = v6;
    v6 = __CFSUB__(v15, v16, v6);
    v17 = v15 - (v16 + !v18);
    v4 = !v6;
    a1[3] = v17;
    a2 += 4;
    a3 += 4;
    a1 += 4;
    a4 -= 4;
  }
  while (a4 >= 4);
  if (a4)
    goto LABEL_14;
  return v4;
}

uint64_t sub_234161F18(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  if (!a2)
    goto LABEL_7;
  v2 = *(int *)(result + 8);
  if (!(_DWORD)v2)
    goto LABEL_7;
  v3 = 0;
  v4 = *(uint64_t **)result;
  do
  {
    v5 = *v4++;
    v3 |= v5;
    --v2;
  }
  while (v2);
  if (v3)
    v6 = 1;
  else
LABEL_7:
    v6 = 0;
  *(_DWORD *)(result + 16) = v6;
  return result;
}

uint64_t sub_234161F54(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  BOOL v5;

  v2 = *(unsigned int *)(a1 + 8);
  result = v2 & ((int)v2 >> 31);
  for (i = 8 * v2 - 8; ; i -= 8)
  {
    v5 = __OFSUB__((_DWORD)v2, 1);
    LODWORD(v2) = v2 - 1;
    if ((int)v2 < 0 != v5)
      break;
    if (*(_QWORD *)(*(_QWORD *)a1 + i))
      return (v2 + 1);
  }
  return result;
}

_QWORD *sub_234161F88()
{
  _QWORD *result;

  result = sub_23418E2E4(0x18uLL);
  if (result)
  {
    result[1] = 0;
    result[2] = 0;
    *result = 0;
    *((_DWORD *)result + 5) = 1;
  }
  return result;
}

_QWORD *sub_234161FB8(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void sub_234161FC4(_QWORD **a1)
{
  int v2;

  if (a1)
  {
    v2 = *((_DWORD *)a1 + 5);
    if ((v2 & 2) == 0)
    {
      sub_23418E3C4(*a1);
      v2 = *((_DWORD *)a1 + 5);
    }
    if ((v2 & 1) != 0)
      sub_23418E3C4(a1);
    else
      *a1 = 0;
  }
}

void **sub_234162014(uint64_t a1)
{
  void **v2;
  void **v3;

  if (!a1)
    return 0;
  v2 = (void **)sub_234161F88();
  v3 = v2;
  if (v2 && !sub_234162060(v2, a1))
  {
    sub_234161FC4((_QWORD **)v3);
    return 0;
  }
  return v3;
}

void **sub_234162060(void **a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;

  if ((void **)a2 == a1)
    return (void **)a2;
  v3 = a1;
  if (!sub_23416171C((_QWORD **)a1, *(int *)(a2 + 8)))
    return 0;
  v4 = *(int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    memcpy(*v3, *(const void **)a2, 8 * v4);
    LODWORD(v4) = *(_DWORD *)(a2 + 8);
  }
  *((_DWORD *)v3 + 2) = v4;
  *((_DWORD *)v3 + 4) = *(_DWORD *)(a2 + 16);
  return v3;
}

void sub_2341620D0(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)a1;
  if (v2)
  {
    v3 = *(int *)(a1 + 12);
    if ((_DWORD)v3)
      bzero(v2, 8 * v3);
  }
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t *sub_23416210C()
{
  sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
  return &qword_256159710;
}

double sub_234162138()
{
  double result;

  qword_256159710 = (uint64_t)&unk_2342E2698;
  *(_QWORD *)&result = 0x100000001;
  unk_256159718 = xmmword_2342E1EE0;
  return result;
}

uint64_t sub_23416215C(unint64_t a1)
{
  unint64_t v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  v1 = HIDWORD(a1);
  if (!HIDWORD(a1))
    v1 = a1;
  v2 = (a1 != 0) | (32 * (HIDWORD(a1) != 0)) | (16 * (v1 >> 16 != 0));
  if (v1 >> 16)
    v1 >>= 16;
  v3 = v2 | (8 * (v1 > 0xFF));
  if (v1 > 0xFF)
    v1 >>= 8;
  v4 = v3 | (4 * (v1 > 0xF));
  if (v1 > 0xF)
    v1 >>= 4;
  v5 = v4 | (2 * (v1 > 3));
  if (v1 > 3)
    v1 >>= 2;
  if (v1 <= 1)
    return v5;
  else
    return v5 + 1;
}

uint64_t sub_2341621D4(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((unsigned int *)a1 + 2);
  v2 = v1 & ((int)v1 >> 31);
  v3 = 8 * v1 - 8;
  v4 = *((_DWORD *)a1 + 2);
  while (1)
  {
    v5 = __OFSUB__(v4--, 1);
    if (v4 < 0 != v5)
      break;
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + v3);
    v3 -= 8;
    if (v7)
    {
      v2 = v4 + 1;
      return sub_23416215C(*(_QWORD *)(v6 + 8 * (v2 - 1))) + ((v2 - 1) << 6);
    }
  }
  if ((v1 & 0x80000000) == 0)
    return 0;
  v6 = *a1;
  return sub_23416215C(*(_QWORD *)(v6 + 8 * (v2 - 1))) + ((v2 - 1) << 6);
}

uint64_t sub_234162240(uint64_t *a1)
{
  return (sub_2341621D4(a1) + 7) >> 3;
}

uint64_t sub_23416225C(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_234162268(uint64_t a1)
{
  uint64_t v2;

  v2 = 1;
  if (!sub_23416171C((_QWORD **)a1, 1uLL))
    return 0;
  *(_DWORD *)(a1 + 16) = 0;
  **(_QWORD **)a1 = 1;
  *(_DWORD *)(a1 + 8) = 1;
  return v2;
}

uint64_t sub_2341622B0(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t result;

  result = sub_23416171C((_QWORD **)a1, a3);
  if ((_DWORD)result)
  {
    if (8 * a3)
      memmove(*(void **)a1, a2, 8 * a3);
    *(_DWORD *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

void sub_234162308(uint64_t a1, uint64_t a2, int a3)
{
  int v6;

  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 2) == 0)
  {
    sub_23418E3C4(*(_QWORD **)a1);
    v6 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v6 | 2;
}

uint64_t sub_234162358(void *__dst, unint64_t a2, uint64_t a3)
{
  int v3;
  __int16 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;

  if (*(_DWORD *)(a3 + 16))
  {
    v3 = 109;
    v4 = 317;
LABEL_3:
    sub_2341579B4(3, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/bn.c", v4);
    return 0;
  }
  v8 = *(int *)(a3 + 8);
  v9 = v8 - a2;
  if (v8 > a2)
  {
    v10 = 0;
    v11 = (uint64_t *)(*(_QWORD *)a3 + 8 * a2);
    do
    {
      v12 = *v11++;
      v10 |= v12;
      --v9;
    }
    while (v9);
    v8 = a2;
    if (v10)
    {
      v3 = 102;
      v4 = 324;
      goto LABEL_3;
    }
  }
  v13 = 8 * a2;
  if (v13)
    bzero(__dst, v13);
  if (8 * v8)
    memcpy(__dst, *(const void **)a3, 8 * v8);
  return 1;
}

BOOL sub_234162420(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) != 0;
}

uint64_t sub_234162430(_QWORD **a1, unint64_t a2)
{
  if (a2 < 0xFFFFFFFFFFFFFFC1)
    return sub_23416171C(a1, (a2 + 63) >> 6);
  sub_2341579B4(3, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/bn.c", 380);
  return 0;
}

uint64_t sub_234162474(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  size_t v12;

  v4 = *(int *)(a1 + 8);
  v5 = v4 > a2;
  v6 = v4 - a2;
  if (v5)
  {
    v7 = 0;
    v8 = (uint64_t *)(*(_QWORD *)a1 + 8 * a2);
    do
    {
      v9 = *v8++;
      v7 |= v9;
      --v6;
    }
    while (v6);
    if (v7)
    {
      sub_2341579B4(3, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/bn.c", 399);
      return 0;
    }
    goto LABEL_10;
  }
  result = sub_23416171C((_QWORD **)a1, a2);
  if ((_DWORD)result)
  {
    v11 = *(int *)(a1 + 8);
    v12 = 8 * (a2 - v11);
    if (v12)
      bzero((void *)(*(_QWORD *)a1 + 8 * v11), v12);
LABEL_10:
    *(_DWORD *)(a1 + 8) = a2;
    return 1;
  }
  return result;
}

uint64_t *sub_234162518(uint64_t *result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  for (; a5; --a5)
  {
    v6 = *a3++;
    v5 = v6;
    v7 = *a4++;
    *result++ = a2 & v5 | v7 & ~a2;
  }
  return result;
}

void sub_234162544(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  size_t v7;

  if (a4 > 8 * a2)
    abort();
  if (a4 < 8)
  {
    v4 = a4;
    if (!a4)
      goto LABEL_10;
LABEL_7:
    v5 = 0;
    do
    {
      v6 = *a3++;
      v5 = v6 | (v5 << 8);
      --v4;
    }
    while (v4);
    *a1++ = v5;
    --a2;
    goto LABEL_10;
  }
  do
  {
    v4 = a4 - 8;
    *a1++ = bswap64(*(_QWORD *)&a3[a4 - 8]);
    --a2;
    a4 = v4;
  }
  while (v4 > 7);
  if (v4)
    goto LABEL_7;
LABEL_10:
  v7 = 8 * a2;
  if (v7)
    bzero(a1, v7);
}

_QWORD *sub_2341625C8(unsigned __int8 *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD **v6;
  unint64_t v7;

  if (a3)
  {
    v5 = a3;
    v6 = 0;
  }
  else
  {
    v5 = sub_234161F88();
    v6 = (_QWORD **)v5;
    if (!v5)
      return v5;
  }
  if (a2)
  {
    v7 = ((a2 - 1) >> 3) + 1;
    if (sub_23416171C((_QWORD **)v5, v7))
    {
      *((_DWORD *)v5 + 2) = v7;
      *((_DWORD *)v5 + 4) = 0;
      sub_234162544((unint64_t *)*v5, (int)v7, a1, a2);
    }
    else
    {
      sub_234161FC4(v6);
      return 0;
    }
  }
  else
  {
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_234162670(const void *a1, size_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD **v6;
  unint64_t v7;

  if (a3)
  {
    v5 = a3;
    v6 = 0;
  }
  else
  {
    v5 = sub_234161F88();
    v6 = (_QWORD **)v5;
    if (!v5)
      return v5;
  }
  if (a2)
  {
    v7 = (a2 - 1) >> 3;
    if (sub_23416171C((_QWORD **)v5, v7 + 1))
    {
      *((_DWORD *)v5 + 2) = v7 + 1;
      *(_QWORD *)(*v5 + 8 * v7) = 0;
      memcpy((void *)*v5, a1, a2);
    }
    else
    {
      sub_234161FC4(v6);
      return 0;
    }
  }
  else
  {
    *((_DWORD *)v5 + 2) = 0;
    *((_DWORD *)v5 + 4) = 0;
  }
  return v5;
}

void sub_234162720(char *a1, unint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;

  if (8 * a4 >= a2)
    v4 = a2;
  else
    v4 = 8 * a4;
  if (v4)
  {
    v5 = &a1[a2 - 1];
    v6 = v4;
    do
    {
      v7 = *a3++;
      *v5-- = v7;
      --v6;
    }
    while (v6);
  }
  if (8 * a4 < a2)
    bzero(a1, a2 - v4);
}

unint64_t sub_234162760(uint64_t a1, char *a2)
{
  unint64_t v4;

  v4 = (sub_2341621D4((uint64_t *)a1) + 7) >> 3;
  sub_234162720(a2, v4, *(char **)a1, *(int *)(a1 + 8));
  return v4;
}

uint64_t sub_2341627AC(char *__dst, size_t a2, char **a3)
{
  char *v5;
  unint64_t v6;
  int v7;
  size_t v8;
  char *v9;
  int v10;
  size_t v13;

  v5 = *a3;
  v6 = 8 * *((int *)a3 + 2);
  if (a2 < v6)
  {
    v7 = 0;
    v8 = a2 - v6;
    v9 = &v5[a2];
    do
    {
      v10 = *v9++;
      v7 |= v10;
    }
    while (!__CFADD__(v8++, 1));
    if (v7)
      return 0;
  }
  if (v6 >= a2)
    v13 = a2;
  else
    v13 = 8 * *((int *)a3 + 2);
  if (v13)
    memcpy(__dst, v5, v13);
  if (v6 < a2)
    bzero(&__dst[v13], a2 - v13);
  return 1;
}

uint64_t sub_234162840(char *a1, unint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  char *v8;
  int v9;

  v4 = *(char **)a3;
  v5 = *(int *)(a3 + 8);
  if (a2 < 8 * v5)
  {
    v6 = 0;
    v7 = a2 - 8 * v5;
    v8 = &v4[a2];
    do
    {
      v9 = *v8++;
      v6 |= v9;
    }
    while (!__CFADD__(v7++, 1));
    if (v6)
      return 0;
  }
  sub_234162720(a1, a2, v4, v5);
  return 1;
}

uint64_t sub_234162898(unsigned int *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v1 = a1[2];
  v2 = v1 & ((int)v1 >> 31);
  v3 = 8 * v1 - 8;
  while (1)
  {
    v4 = __OFSUB__((_DWORD)v1, 1);
    LODWORD(v1) = v1 - 1;
    if ((int)v1 < 0 != v4)
      break;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
    v3 -= 8;
    if (v5)
    {
      v2 = v1 + 1;
      break;
    }
  }
  if (!v2)
    return 0;
  if (v2 == 1)
    return **(_QWORD **)a1;
  return -1;
}

uint64_t sub_2341628EC(uint64_t **a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((unsigned int *)a1 + 2);
  v3 = v2 & ((int)v2 >> 31);
  v4 = 8 * v2 - 8;
  while (1)
  {
    v5 = __OFSUB__((_DWORD)v2, 1);
    LODWORD(v2) = v2 - 1;
    if ((int)v2 < 0 != v5)
      break;
    v6 = *(uint64_t *)((char *)*a1 + v4);
    v4 -= 8;
    if (v6)
    {
      v3 = v2 + 1;
      break;
    }
  }
  if (!v3)
  {
    v7 = 0;
    goto LABEL_9;
  }
  if (v3 == 1)
  {
    v7 = **a1;
LABEL_9:
    *a2 = v7;
    return 1;
  }
  return 0;
}

uint64_t sub_234162948(uint64_t *a1, unint64_t a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  if (a2 >= a4)
    v5 = a4;
  else
    v5 = a2;
  if (v5)
  {
    LODWORD(result) = 0;
    v7 = a1;
    v8 = a3;
    do
    {
      v10 = *v7++;
      v9 = v10;
      v11 = *v8++;
      v12 = (((v11 ^ v9) - 1) & ~(v11 ^ v9)) >> 63;
      result = result & v12 | (((((v9 - v11) ^ v9 | v11 ^ v9) ^ v9) >> 63) | 1) & ~v12;
      --v5;
    }
    while (v5);
  }
  else
  {
    result = 0;
  }
  v13 = a2 - a4;
  if (a2 >= a4)
  {
    if (a4 < a2)
    {
      v18 = 0;
      v19 = &a1[a4];
      do
      {
        v20 = *v19++;
        v18 |= v20;
        --v13;
      }
      while (v13);
      return (((((v18 - 1) & ~v18) >> 63) & 1) == 0) | (((v18 - 1) & ~v18) >> 63) & result;
    }
  }
  else
  {
    v14 = 0;
    v15 = a4 - a2;
    v16 = &a3[a2];
    do
    {
      v17 = *v16++;
      v14 |= v17;
      --v15;
    }
    while (v15);
    return result | ~(((v14 - 1) & ~v14) >> 63);
  }
  return result;
}

uint64_t sub_234162A28(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  if (a1 && a2)
  {
    v2 = *(_DWORD *)(a1 + 16);
    if (v2 == *(_DWORD *)(a2 + 16))
    {
      LODWORD(result) = sub_234162948(*(uint64_t **)a1, *(int *)(a1 + 8), *(uint64_t **)a2, *(int *)(a2 + 8));
      if (v2)
        return -(int)result;
      else
        return result;
    }
    else if (v2)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  else if (a1)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return a2 != 0;
  }
}

uint64_t sub_234162AA0(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  return sub_234162948(a1, a3, a2, a3) >> 31;
}

BOOL sub_234162AC4(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[2];
  if ((_DWORD)v2)
  {
    a2 ^= **(_QWORD **)a1;
    if ((int)v2 >= 2)
    {
      v3 = (uint64_t *)(*(_QWORD *)a1 + 8);
      v4 = v2 - 1;
      do
      {
        v5 = *v3++;
        a2 |= v5;
        --v4;
      }
      while (v4);
    }
  }
  return a2 == 0;
}

uint64_t sub_234162B04(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v6 = 0x200000000;
  v3 = &v7;
  v4 = a2 != 0;
  v5 = 1;
  return sub_234162A28(a1, (uint64_t)&v3);
}

BOOL sub_234162B4C(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (a1[4])
    return 0;
  v2 = a1[2];
  if ((_DWORD)v2)
  {
    v3 = **(_QWORD **)a1 ^ 1;
    if ((int)v2 >= 2)
    {
      v4 = v2 - 1;
      v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
      do
      {
        v6 = *v5++;
        v3 |= v6;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    v3 = 1;
  }
  return v3 == 0;
}

BOOL sub_234162BA4(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a2;
  if ((_DWORD)v2)
  {
    v3 = **(_QWORD **)a1 ^ a2;
    if ((int)v2 >= 2)
    {
      v4 = v2 - 1;
      v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
      do
      {
        v6 = *v5++;
        v3 |= v6;
        --v4;
      }
      while (v4);
    }
  }
  if (v3)
    return 0;
  if (a2)
    return a1[4] == 0;
  return 1;
}

uint64_t sub_234162C04(uint64_t a1)
{
  if (*(int *)(a1 + 8) < 1)
    return 0;
  else
    return **(_DWORD **)a1 & 1;
}

BOOL sub_234162C28(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(unsigned int *)(a1 + 8);
  v2 = v1 & ((int)v1 >> 31);
  v3 = 8 * v1 - 8;
  v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v5 = __OFSUB__(v4--, 1);
    if (v4 < 0 != v5)
      break;
    v6 = *(_QWORD *)(*(_QWORD *)a1 + v3);
    v3 -= 8;
    if (v6)
    {
      v2 = v4 + 1;
      goto LABEL_6;
    }
  }
  if ((v1 & 0x80000000) == 0)
    return 0;
LABEL_6:
  if (*(_DWORD *)(a1 + 16))
    return 0;
  v8 = v2 - 1;
  if (v2 >= 2)
  {
    v9 = (v2 - 1);
    v10 = *(_QWORD **)a1;
    while (!*v10++)
    {
      if (!--v9)
        return (*(_QWORD *)(*(_QWORD *)a1 + 8 * v8) & (*(_QWORD *)(*(_QWORD *)a1 + 8 * v8) - 1)) == 0;
    }
    return 0;
  }
  return (*(_QWORD *)(*(_QWORD *)a1 + 8 * v8) & (*(_QWORD *)(*(_QWORD *)a1 + 8 * v8) - 1)) == 0;
}

BOOL sub_234162CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(int *)(a1 + 8);
  v3 = *(int *)(a2 + 8);
  if ((int)v2 >= (int)v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = (uint64_t *)(*(_QWORD *)a2 + 8 * v2);
    v6 = v3 - v2;
    do
    {
      v7 = *v5++;
      v4 |= v7;
      --v6;
    }
    while (v6);
  }
  if ((int)v3 < (int)v2)
  {
    v8 = (uint64_t *)(*(_QWORD *)a1 + 8 * v3);
    v9 = v2 - v3;
    do
    {
      v10 = *v8++;
      v4 |= v10;
      --v9;
    }
    while (v9);
  }
  if ((int)v2 >= (int)v3)
    v2 = v3;
  else
    v2 = v2;
  if ((int)v2 >= 1)
  {
    v11 = *(uint64_t **)a1;
    v12 = *(uint64_t **)a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      v4 |= v15 ^ v13;
      --v2;
    }
    while (v2);
  }
  return (v4 | *(_DWORD *)(a2 + 16) ^ *(_DWORD *)(a1 + 16)) == 0;
}

double sub_234162D58()
{
  _OWORD *v0;
  double result;

  v0 = sub_23418E2E4(0x30uLL);
  if (v0)
  {
    result = 0.0;
    *(_OWORD *)((char *)v0 + 26) = 0u;
    *v0 = 0u;
    v0[1] = 0u;
  }
  return result;
}

void sub_234162D80(unint64_t **a1)
{
  if (a1)
  {
    sub_234195434(*a1, (void (*)(uint64_t))sub_2341853EC, (uint64_t)sub_234161FC4);
    sub_23418E3C4(a1[1]);
    sub_23418E3C4(a1);
  }
}

_QWORD *sub_234162DC8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = result[4];
    v3 = result[2];
    if (v3 != result[3])
    {
      result = (_QWORD *)result[1];
      goto LABEL_14;
    }
    if (v3)
      v4 = (3 * v3) >> 1;
    else
      v4 = 32;
    if (v4 > v3 && v4 >> 61 == 0)
    {
      result = sub_23418E40C((_QWORD *)result[1], 8 * v4);
      if (result)
      {
        v1[1] = result;
        v1[3] = v4;
        v3 = v1[2];
LABEL_14:
        result[v3] = v2;
        ++v1[2];
        return result;
      }
    }
    *((_WORD *)v1 + 20) = 257;
  }
  return result;
}

unint64_t *sub_234162E68(uint64_t a1)
{
  unint64_t *result;
  uint64_t v3;
  _QWORD *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
      sub_2341579B4(3, 0, 116, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/ctx.c", 155);
      result = 0;
      *(_BYTE *)(a1 + 41) = 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = *(unint64_t **)a1;
    if (*(_QWORD *)a1 || (result = sub_2341953A0(), (*(_QWORD *)a1 = result) != 0))
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (v3 != sub_2341709C4((uint64_t)result)
        || (v4 = sub_234161F88()) != 0 && sub_2341958E8(*(unint64_t **)a1, (uint64_t)v4))
      {
        result = sub_2341953E8(*(unint64_t **)a1, *(_QWORD *)(a1 + 32));
        *((_DWORD *)result + 4) = 0;
        *((_DWORD *)result + 2) = 0;
        ++*(_QWORD *)(a1 + 32);
        return result;
      }
      sub_2341579B4(3, 0, 116, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/ctx.c", 172);
      sub_234161FC4((_QWORD **)v4);
      result = 0;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t sub_234162F58(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (!*(_BYTE *)(result + 40))
  {
    v1 = *(_QWORD *)(result + 8);
    v2 = *(_QWORD *)(result + 16) - 1;
    *(_QWORD *)(result + 16) = v2;
    *(_QWORD *)(result + 32) = *(_QWORD *)(v1 + 8 * v2);
  }
  return result;
}

uint64_t sub_234162F7C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  uint64_t result;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t *v50;
  int v51;
  uint64_t *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t i;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t *v84;
  unint64_t *v85;

  v9 = *(unsigned int *)(a3 + 8);
  v10 = v9 & ((int)v9 >> 31);
  v11 = 8 * v9 - 8;
  while (1)
  {
    v12 = __OFSUB__((_DWORD)v9, 1);
    LODWORD(v9) = v9 - 1;
    if ((int)v9 < 0 != v12)
      break;
    v13 = *(_QWORD *)(*(_QWORD *)a3 + v11);
    v11 -= 8;
    if (v13)
    {
      v10 = v9 + 1;
      break;
    }
  }
  v14 = *(unsigned int *)(a4 + 8);
  v15 = (int)v14;
  v16 = v14 & ((int)v14 >> 31);
  v17 = 8 * v14 - 8;
  v18 = *(_DWORD *)(a4 + 8);
  while (1)
  {
    v12 = __OFSUB__(v18--, 1);
    if (v18 < 0 != v12)
      break;
    v19 = *(_QWORD *)(*(_QWORD *)a4 + v17);
    v17 -= 8;
    if (v19)
    {
      v16 = v18 + 1;
      break;
    }
  }
  v12 = __OFSUB__(v10, 1);
  v20 = v10 - 1;
  if (v20 < 0 == v12 && !*(_QWORD *)(*(_QWORD *)a3 + 8 * v20)
    || v16 >= 1 && !*(_QWORD *)(*(_QWORD *)a4 + 8 * (v16 - 1)))
  {
    v37 = 111;
    v38 = 212;
LABEL_36:
    sub_2341579B4(3, 0, v37, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/div.c", v38);
    return 0;
  }
  if (!(_DWORD)v14)
    goto LABEL_35;
  v21 = 0;
  v22 = *(uint64_t **)a4;
  do
  {
    v23 = *v22++;
    v21 |= v23;
    --v15;
  }
  while (v15);
  if (!v21)
  {
LABEL_35:
    v37 = 105;
    v38 = 217;
    goto LABEL_36;
  }
  sub_234162DC8((_QWORD *)a5);
  v85 = sub_234162E68(a5);
  v84 = sub_234162E68(a5);
  v24 = sub_234162E68(a5);
  if (!a1)
    a1 = sub_234162E68(a5);
  if (!v24)
    goto LABEL_79;
  if (!a1)
    goto LABEL_79;
  v25 = sub_2341621D4((uint64_t *)a4) & 0x3F;
  if (!sub_2341634F4((uint64_t)v24, (uint64_t *)a4, 64 - v25))
    goto LABEL_79;
  v26 = *((unsigned int *)v24 + 2);
  v27 = v26 & ((int)v26 >> 31);
  v28 = 8 * v26 - 8;
  while (1)
  {
    v12 = __OFSUB__((_DWORD)v26, 1);
    LODWORD(v26) = v26 - 1;
    if ((int)v26 < 0 != v12)
      break;
    v29 = *(_QWORD *)(*v24 + v28);
    v28 -= 8;
    if (v29)
    {
      v27 = v26 + 1;
      break;
    }
  }
  *((_DWORD *)v24 + 2) = v27;
  *((_DWORD *)v24 + 4) = 0;
  v79 = 128 - v25;
  if (!sub_2341634F4((uint64_t)v84, (uint64_t *)a3, 128 - v25))
    goto LABEL_79;
  v30 = *((unsigned int *)v84 + 2);
  v31 = v30 & ((int)v30 >> 31);
  v32 = 8 * v30 - 8;
  while (1)
  {
    v12 = __OFSUB__((_DWORD)v30, 1);
    LODWORD(v30) = v30 - 1;
    if ((int)v30 < 0 != v12)
      break;
    v33 = *(_QWORD *)(*v84 + v32);
    v32 -= 8;
    if (v33)
    {
      v31 = v30 + 1;
      break;
    }
  }
  *((_DWORD *)v84 + 2) = v31;
  *((_DWORD *)v84 + 4) = 0;
  v34 = *((int *)v24 + 2);
  if (v31 <= (int)v34 + 1)
  {
    if (sub_23416171C((_QWORD **)v84, v34 + 2))
    {
      v35 = v84;
      v40 = *((int *)v84 + 2);
      LODWORD(v36) = *((_DWORD *)v24 + 2) + 2;
      if ((int)v40 < (int)v36)
      {
        do
        {
          *(_QWORD *)(*v84 + 8 * v40++) = 0;
          v36 = *((int *)v24 + 2) + 2;
        }
        while (v40 < v36);
      }
      goto LABEL_41;
    }
LABEL_79:
    if (!*(_BYTE *)(a5 + 40))
    {
      result = 0;
      v72 = *(_QWORD *)(a5 + 8);
      v73 = *(_QWORD *)(a5 + 16) - 1;
      *(_QWORD *)(a5 + 16) = v73;
      *(_QWORD *)(a5 + 32) = *(_QWORD *)(v72 + 8 * v73);
      return result;
    }
    return 0;
  }
  if (!sub_23416171C((_QWORD **)v84, v31 + 1))
    goto LABEL_79;
  v35 = v84;
  *(_QWORD *)(*v84 + 8 * *((int *)v84 + 2)) = 0;
  LODWORD(v36) = *((_DWORD *)v84 + 2) + 1;
LABEL_41:
  *((_DWORD *)v35 + 2) = v36;
  v41 = *((_DWORD *)v24 + 2);
  v42 = v36 - v41;
  v43 = *v24;
  v82 = v41;
  if (v41 == 1)
    v44 = 0;
  else
    v44 = *(_QWORD *)(v43 + 8 * (v41 - 2));
  v78 = *v35;
  v45 = *(_QWORD *)(v43 + 8 * (v41 - 1));
  v46 = *(_DWORD *)(a3 + 16);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a4 + 16) ^ v46;
  if (!sub_23416171C((_QWORD **)a1, v42 + 1))
    goto LABEL_79;
  v47 = v42 - 1;
  *((_DWORD *)a1 + 2) = v42 - 1;
  v48 = (_QWORD *)*a1;
  if (!sub_23416171C((_QWORD **)v85, v82 + 1))
    goto LABEL_79;
  v49 = a1;
  v50 = &v48[v47];
  v77 = v49;
  v76 = v46;
  if (*((_DWORD *)v49 + 2))
    --v50;
  else
    *((_DWORD *)v49 + 4) = 0;
  if (v42 >= 2)
  {
    v51 = 0;
    v52 = (uint64_t *)(v78 + 8 * v42);
    v53 = (_QWORD *)(v78 + 8 * ((int)v36 - 1));
    v80 = v45;
    v81 = v47;
    do
    {
      if (*v53 == v45)
      {
        v54 = -1;
      }
      else
      {
        v55 = *(v53 - 1);
        v54 = __udivti3();
        v56 = v55 - v45 * v54;
        v57 = (v54 * (unsigned __int128)v44) >> 64;
        for (i = v54 * v44; __PAIR128__(v56, *(v53 - 2)) < __PAIR128__(v57, i); i -= v44)
        {
          --v54;
          v59 = __CFADD__(v56, v45);
          v56 += v45;
          if (v59)
            break;
          v57 = (__PAIR128__(v57, i) - v44) >> 64;
        }
      }
      *(_QWORD *)(*v85 + 8 * v82) = sub_23416365C((_QWORD *)*v85, (unint64_t *)*v24, v82, v54);
      --v52;
      if (sub_234161E5C((unint64_t *)v52, (unint64_t *)v52, (unint64_t *)*v85, v82 + 1))
      {
        --v54;
        if (sub_2341617E0(v52, v52, (uint64_t *)*v24, v82))
          ++*v53;
      }
      v45 = v80;
      *v50-- = v54;
      ++v51;
      --v53;
    }
    while (v51 != v81);
  }
  v60 = *((unsigned int *)v84 + 2);
  v61 = 8 * v60 - 8;
  v62 = *((_DWORD *)v84 + 2);
  while (1)
  {
    v12 = __OFSUB__(v62--, 1);
    if (v62 < 0 != v12)
      break;
    v63 = *(_QWORD *)(*v84 + v61);
    v61 -= 8;
    if (v63)
    {
      *((_DWORD *)v84 + 2) = v62 + 1;
      goto LABEL_68;
    }
  }
  *((_DWORD *)v84 + 2) = v60 & ((int)v60 >> 31);
  if ((v60 & 0x80000000) == 0)
    *((_DWORD *)v84 + 4) = 0;
LABEL_68:
  if (!a2)
    goto LABEL_75;
  if (!sub_23416371C(a2, (uint64_t)v84, v79))
    goto LABEL_79;
  v64 = *(int *)(a2 + 8);
  if ((_DWORD)v64)
  {
    v65 = 0;
    v66 = *(uint64_t **)a2;
    do
    {
      v67 = *v66++;
      v65 |= v67;
      --v64;
    }
    while (v64);
    if (v65)
      *(_DWORD *)(a2 + 16) = v76;
  }
LABEL_75:
  v68 = *((unsigned int *)v77 + 2);
  v69 = 8 * v68 - 8;
  v70 = *((_DWORD *)v77 + 2);
  while (1)
  {
    v12 = __OFSUB__(v70--, 1);
    if (v70 < 0 != v12)
      break;
    v71 = *(_QWORD *)(*v77 + v69);
    v69 -= 8;
    if (v71)
    {
      *((_DWORD *)v77 + 2) = v70 + 1;
      goto LABEL_83;
    }
  }
  *((_DWORD *)v77 + 2) = v68 & ((int)v68 >> 31);
  if ((v68 & 0x80000000) == 0)
    *((_DWORD *)v77 + 4) = 0;
LABEL_83:
  if (!*(_BYTE *)(a5 + 40))
  {
    v74 = *(_QWORD *)(a5 + 8);
    v75 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v75;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v74 + 8 * v75);
  }
  return 1;
}

uint64_t sub_2341634F4(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if ((a3 & 0x80000000) != 0)
  {
    sub_2341579B4(3, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/shift.c", 73);
    return 0;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    result = sub_23416171C((_QWORD **)a1, (int)(*((_DWORD *)a2 + 2) + (a3 >> 6) + 1));
    if ((_DWORD)result)
    {
      v7 = a3 >> 6;
      v8 = *a2;
      v9 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * (int)(*((_DWORD *)a2 + 2) + (a3 >> 6))) = 0;
      v10 = *((unsigned int *)a2 + 2);
      v11 = a3 & 0x3F;
      if ((a3 & 0x3F) != 0)
      {
        if ((int)v10 >= 1)
        {
          v12 = v8 - 8;
          do
          {
            v13 = *(_QWORD *)(v12 + 8 * v10);
            v9[(int)(v7 + v10)] |= v13 >> (64 - v11);
            v9[v7 - 1 + v10] = v13 << v11;
            v14 = v10-- > 1;
          }
          while (v14);
        }
      }
      else if ((int)v10 >= 1)
      {
        do
        {
          v9[v7 - 1 + v10] = *(_QWORD *)(v8 - 8 + 8 * v10);
          v14 = v10-- > 1;
        }
        while (v14);
      }
      if (a3 >= 0x40)
        bzero(v9, 8 * v7);
      v15 = *((_DWORD *)a2 + 2) + v7;
      *(_DWORD *)(a1 + 8) = v15 + 1;
      v16 = 8 * (v15 + 1) - 8;
      v17 = v15 + 2;
      while (--v17 >= 1)
      {
        v18 = *(_QWORD *)(*(_QWORD *)a1 + v16);
        v16 -= 8;
        if (v18)
        {
          *(_DWORD *)(a1 + 8) = v17;
          return 1;
        }
      }
      *(_DWORD *)(a1 + 8) = (v15 + 1) & ((v15 + 1) >> 31);
      if (v15 >= -1)
        *(_DWORD *)(a1 + 16) = 0;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23416365C(_QWORD *a1, unint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a3)
    return 0;
  if (a3 < 4)
  {
    v4 = 0;
    do
    {
LABEL_20:
      v23 = *a2++;
      v24 = (v23 * (unsigned __int128)a4) >> 64;
      v25 = v23 * a4 + v4;
      if (__CFADD__(v23 * a4, v4))
        v4 = v24 + 1;
      else
        v4 = v24;
      *a1++ = v25;
      --a3;
    }
    while (a3);
    return v4;
  }
  v4 = 0;
  do
  {
    v5 = *a2 * a4;
    v6 = __CFADD__(v5, v4);
    v7 = v5 + v4;
    if (v6)
      v8 = ((*a2 * (unsigned __int128)a4) >> 64) + 1;
    else
      v8 = (*a2 * (unsigned __int128)a4) >> 64;
    *a1 = v7;
    v9 = a2[1];
    v10 = (v9 * (unsigned __int128)a4) >> 64;
    v11 = v9 * a4;
    v6 = __CFADD__(v11, v8);
    v12 = v11 + v8;
    if (v6)
      v13 = v10 + 1;
    else
      v13 = v10;
    a1[1] = v12;
    v14 = a2[2];
    v15 = (v14 * (unsigned __int128)a4) >> 64;
    v16 = v14 * a4;
    v6 = __CFADD__(v16, v13);
    v17 = v16 + v13;
    if (v6)
      v18 = v15 + 1;
    else
      v18 = v15;
    a1[2] = v17;
    v19 = a2[3];
    v20 = (v19 * (unsigned __int128)a4) >> 64;
    v21 = v19 * a4;
    v6 = __CFADD__(v21, v18);
    v22 = v21 + v18;
    if (v6)
      v4 = v20 + 1;
    else
      v4 = v20;
    a1[3] = v22;
    a2 += 4;
    a1 += 4;
    a3 -= 4;
  }
  while (a3 >= 4);
  if (a3)
    goto LABEL_20;
  return v4;
}

uint64_t sub_23416371C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;

  if ((a3 & 0x80000000) != 0)
  {
    sub_2341579B4(3, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/shift.c", 158);
    return 0;
  }
  else
  {
    result = sub_23416171C((_QWORD **)a1, *(int *)(a2 + 8));
    if ((_DWORD)result)
    {
      sub_23416C30C(*(char **)a1, *(_QWORD *)a2, a3, *(int *)(a2 + 8));
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      v7 = *(unsigned int *)(a2 + 8);
      *(_DWORD *)(a1 + 8) = v7;
      v8 = 8 * v7 - 8;
      v9 = v7;
      while (1)
      {
        v10 = __OFSUB__(v9--, 1);
        if (v9 < 0 != v10)
          break;
        v11 = *(_QWORD *)(*(_QWORD *)a1 + v8);
        v8 -= 8;
        if (v11)
        {
          *(_DWORD *)(a1 + 8) = v9 + 1;
          return 1;
        }
      }
      *(_DWORD *)(a1 + 8) = v7 & ((int)v7 >> 31);
      if ((v7 & 0x80000000) == 0)
        *(_DWORD *)(a1 + 16) = 0;
      return 1;
    }
  }
  return result;
}

uint64_t sub_2341637E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  result = sub_234162F7C(0, a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 16))
    {
      if (*(_DWORD *)(a3 + 16))
        v7 = sub_234161C30;
      else
        v7 = sub_2341614D0;
      return v7(a1, a1, a3);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_234163860(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t result;
  uint64_t v9;

  v5 = a5;
  v6 = a2;
  v7 = a1;
  for (result = a3 - sub_234161E5C(a1, a2, a4, a5); v5; --v5)
  {
    v9 = *v6++;
    *v7 = *v7 & ~result | v9 & result;
    ++v7;
  }
  return result;
}

uint64_t sub_2341638CC(unint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t result;
  uint64_t v9;

  v5 = a5;
  v6 = a4;
  v7 = a1;
  for (result = a2 - sub_234161E5C(a4, a1, a3, a5); v5; --v5)
  {
    v9 = *v6++;
    *v7 = v9 & ~result | *v7 & result;
    ++v7;
  }
  return result;
}

uint64_t sub_23416393C(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;

  v6 = a6;
  v9 = (uint64_t *)a1;
  v10 = sub_234161E5C(a1, a2, a3, a6);
  for (result = sub_2341617E0(a5, v9, a4, v6); v6; --v6)
  {
    v12 = *a5++;
    *v9 = *v9 & (v10 - 1) | v12 & -(uint64_t)v10;
    ++v9;
  }
  return result;
}

uint64_t sub_2341639C0(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t a6)
{
  uint64_t v10;

  v10 = sub_2341617E0(a1, a2, a3, a6);
  return sub_2341638CC(a1, v10, a4, a5, a6);
}

uint64_t sub_234163A0C(void **a1, void **a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v7;
  __int16 v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  signed int v25;
  int v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  if (*(_DWORD *)(a3 + 16) || *(_DWORD *)(a4 + 16))
  {
    v7 = 109;
    v8 = 461;
LABEL_4:
    sub_2341579B4(3, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/div.c", v8);
    return 0;
  }
  v10 = *(int *)(a4 + 8);
  if (!(_DWORD)v10)
    goto LABEL_34;
  v16 = 0;
  v17 = *(unint64_t **)a4;
  do
  {
    v18 = *v17++;
    v16 |= v18;
    --v10;
  }
  while (v10);
  if (!v16)
  {
LABEL_34:
    v7 = 105;
    v8 = 465;
    goto LABEL_4;
  }
  sub_234162DC8((_QWORD *)a6);
  if (!a1 || a1 == (void **)a3 || (v19 = (unint64_t *)a1, a1 == (void **)a4))
    v19 = sub_234162E68(a6);
  if (!a2 || a2 == (void **)a3 || (v20 = (unint64_t *)a2, a2 == (void **)a4))
    v20 = sub_234162E68(a6);
  v21 = sub_234162E68(a6);
  result = 0;
  if (v19)
  {
    if (v20)
    {
      if (v21)
      {
        result = sub_23416171C((_QWORD **)v19, *(int *)(a3 + 8));
        if ((_DWORD)result)
        {
          result = sub_23416171C((_QWORD **)v20, *(int *)(a4 + 8));
          if ((_DWORD)result)
          {
            result = sub_23416171C((_QWORD **)v21, *(int *)(a4 + 8));
            if ((_DWORD)result)
            {
              v22 = *(int *)(a3 + 8);
              if ((_DWORD)v22)
              {
                bzero((void *)*v19, 8 * v22);
                LODWORD(v22) = *(_DWORD *)(a3 + 8);
              }
              *((_DWORD *)v19 + 2) = v22;
              *((_DWORD *)v19 + 4) = 0;
              v23 = *(int *)(a4 + 8);
              if ((_DWORD)v23)
              {
                bzero((void *)*v20, 8 * v23);
                LODWORD(v23) = *(_DWORD *)(a4 + 8);
              }
              *((_DWORD *)v20 + 2) = v23;
              *((_DWORD *)v20 + 4) = 0;
              v24 = *(_DWORD *)(a3 + 8);
              if (a5
                && ((int)((a5 - 1) >> 6) >= v24
                  ? (v25 = *(_DWORD *)(a3 + 8))
                  : (v25 = (a5 - 1) >> 6),
                    v25))
              {
                memcpy((void *)*v20, (const void *)(*(_QWORD *)a3 + 8 * v24 - 8 * v25), 8 * v25);
                v24 = *(_DWORD *)(a3 + 8);
                v26 = ~v25;
              }
              else
              {
                v26 = -1;
              }
              v27 = (v24 + v26);
              if (v24 + v26 >= 0)
              {
                do
                {
                  for (i = 63; i != -1; --i)
                  {
                    v29 = sub_2341617E0((_QWORD *)*v20, (uint64_t *)*v20, (uint64_t *)*v20, *(int *)(a4 + 8));
                    *(_QWORD *)*v20 |= (*(_QWORD *)(*(_QWORD *)a3 + 8 * v27) >> i) & 1;
                    *(_QWORD *)(*v19 + 8 * v27) |= (unint64_t)((sub_2341638CC((unint64_t *)*v20, v29, *(unint64_t **)a4, (unint64_t *)*v21, *(int *)(a4 + 8)) & 1) == 0) << i;
                  }
                }
                while ((int)v27-- > 0);
              }
              if ((!a1 || (result = (uint64_t)sub_234162060(a1, (uint64_t)v19)) != 0)
                && (!a2 || (result = (uint64_t)sub_234162060(a2, (uint64_t)v20)) != 0))
              {
                result = 1;
              }
            }
          }
        }
      }
    }
  }
  if (!*(_BYTE *)(a6 + 40))
  {
    v31 = *(_QWORD *)(a6 + 8);
    v32 = *(_QWORD *)(a6 + 16) - 1;
    *(_QWORD *)(a6 + 16) = v32;
    *(_QWORD *)(a6 + 32) = *(_QWORD *)(v31 + 8 * v32);
  }
  return result;
}

uint64_t sub_234163CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = sub_2341614D0(a1, a2, a3);
  if ((_DWORD)result)
    return sub_2341637E4(a1, a1, a4, a5);
  return result;
}

uint64_t sub_234163D20(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v8;
  unint64_t **v9;
  uint64_t v10;

  v8 = sub_23418E2E4(0x30uLL);
  v9 = (unint64_t **)v8;
  if (v8)
  {
    *(_OWORD *)((char *)v8 + 26) = 0u;
    *v8 = 0u;
    v8[1] = 0u;
    v10 = sub_234163DA4(a1, a2, a3, a4, (uint64_t)v8);
  }
  else
  {
    v10 = 0;
  }
  sub_234162D80(v9);
  return v10;
}

uint64_t sub_234163DA4(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t **v10;
  uint64_t **v11;
  unint64_t *v12;
  BOOL v13;
  unint64_t **v15;
  uint64_t result;
  unint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_234162DC8((_QWORD *)a5);
  v10 = (uint64_t **)sub_234163EB8(a2, *(int *)(a4 + 8), a5);
  v11 = (uint64_t **)sub_234163EB8(a3, *(int *)(a4 + 8), a5);
  v12 = sub_234163F2C(*(int *)(a4 + 8), a5);
  if (v10)
    v13 = v11 == 0;
  else
    v13 = 1;
  if (v13 || v12 == 0)
  {
    result = 0;
  }
  else
  {
    v15 = (unint64_t **)v12;
    result = sub_23416171C(a1, *(int *)(a4 + 8));
    if ((_DWORD)result)
    {
      v17 = *a1;
      v18 = *v10;
      v19 = *v11;
      v20 = *(unint64_t **)a4;
      v21 = *v15;
      v22 = *(int *)(a4 + 8);
      v23 = sub_2341617E0(*a1, v18, v19, v22);
      sub_2341638CC(v17, v23, v20, v21, v22);
      *((_DWORD *)a1 + 2) = *(_DWORD *)(a4 + 8);
      *((_DWORD *)a1 + 4) = 0;
      result = 1;
    }
  }
  if (!*(_BYTE *)(a5 + 40))
  {
    v24 = *(_QWORD *)(a5 + 8);
    v25 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v25;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v24 + 8 * v25);
  }
  return result;
}

uint64_t sub_234163EB8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v5;
  uint64_t v6;

  v3 = a1;
  if (*(int *)(a1 + 8) < a2)
  {
    v5 = sub_234163F2C(a2, a3);
    if (v5 && (v6 = (uint64_t)v5, sub_234162060((void **)v5, v3)))
    {
      if (sub_234162474(v6, a2))
        return v6;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

unint64_t *sub_234163F2C(unint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t *v4;

  v3 = sub_234162E68(a2);
  v4 = v3;
  if (v3)
  {
    if (sub_23416171C((_QWORD **)v3, a1))
    {
      *((_DWORD *)v4 + 4) = 0;
      *((_DWORD *)v4 + 2) = a1;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_234163F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = sub_234161C30(a1, a2, a3);
  if ((_DWORD)result)
    return sub_2341637E4(a1, a1, a4, a5);
  return result;
}

uint64_t sub_234163FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t **v10;
  unint64_t **v11;
  unint64_t *v12;
  BOOL v13;
  uint64_t **v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  sub_234162DC8((_QWORD *)a5);
  v10 = (unint64_t **)sub_234163EB8(a2, *(int *)(a4 + 8), a5);
  v11 = (unint64_t **)sub_234163EB8(a3, *(int *)(a4 + 8), a5);
  v12 = sub_234163F2C(*(int *)(a4 + 8), a5);
  if (v10)
    v13 = v11 == 0;
  else
    v13 = 1;
  if (v13 || v12 == 0)
  {
    result = 0;
  }
  else
  {
    v15 = (uint64_t **)v12;
    result = sub_23416171C((_QWORD **)a1, *(int *)(a4 + 8));
    if ((_DWORD)result)
    {
      sub_23416393C(*(unint64_t **)a1, *v10, *v11, *(uint64_t **)a4, *v15, *(int *)(a4 + 8));
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a1 + 16) = 0;
      result = 1;
    }
  }
  if (!*(_BYTE *)(a5 + 40))
  {
    v17 = *(_QWORD *)(a5 + 8);
    v18 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v18;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v17 + 8 * v18);
  }
  return result;
}

uint64_t sub_2341640BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v8;
  unint64_t **v9;
  uint64_t v10;

  v8 = sub_23418E2E4(0x30uLL);
  v9 = (unint64_t **)v8;
  if (v8)
  {
    *(_OWORD *)((char *)v8 + 26) = 0u;
    *v8 = 0u;
    v8[1] = 0u;
    v10 = sub_234163FD0(a1, a2, a3, a4, (uint64_t)v8);
  }
  else
  {
    v10 = 0;
  }
  sub_234162D80(v9);
  return v10;
}

uint64_t sub_234164140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_234162DC8((_QWORD *)a5);
  result = (uint64_t)sub_234162E68(a5);
  if (!result)
    goto LABEL_5;
  v11 = result;
  if (a2 != a3)
  {
    result = sub_234164264(result, a2, a3, a5);
    if (!(_DWORD)result)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = sub_2341641F8(result, a2, a5);
  if ((_DWORD)result)
LABEL_4:
    result = sub_2341637E4(a1, v11, a4, a5) != 0;
LABEL_5:
  if (!*(_BYTE *)(a5 + 40))
  {
    v12 = *(_QWORD *)(a5 + 8);
    v13 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v13;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v12 + 8 * v13);
  }
  return result;
}

uint64_t sub_2341641F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  result = sub_23416A418(a1, a2, a3);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a1 + 8);
    v6 = 8 * v5 - 8;
    v7 = *(_DWORD *)(a1 + 8);
    while (1)
    {
      v8 = __OFSUB__(v7--, 1);
      if (v7 < 0 != v8)
        break;
      v9 = *(_QWORD *)(*(_QWORD *)a1 + v6);
      v6 -= 8;
      if (v9)
      {
        *(_DWORD *)(a1 + 8) = v7 + 1;
        return 1;
      }
    }
    *(_DWORD *)(a1 + 8) = v5 & ((int)v5 >> 31);
    if ((v5 & 0x80000000) == 0)
      *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_234164264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;

  result = sub_234169FE4(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    v6 = *(unsigned int *)(a1 + 8);
    v7 = 8 * v6 - 8;
    v8 = *(_DWORD *)(a1 + 8);
    while (1)
    {
      v9 = __OFSUB__(v8--, 1);
      if (v8 < 0 != v9)
        break;
      v10 = *(_QWORD *)(*(_QWORD *)a1 + v7);
      v7 -= 8;
      if (v10)
      {
        *(_DWORD *)(a1 + 8) = v8 + 1;
        return 1;
      }
    }
    *(_DWORD *)(a1 + 8) = v6 & ((int)v6 >> 31);
    if ((v6 & 0x80000000) == 0)
      *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_2341642D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = sub_2341641F8(a1, a2, a4);
  if ((_DWORD)result)
    return sub_234162F7C(0, a1, a1, a3, a4);
  return result;
}

BOOL sub_23416432C(void **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  void **v9;
  void **v10;
  uint64_t v12;
  _BOOL8 v13;

  if (!sub_2341637E4((uint64_t)a1, a2, a4, a5))
    return 0;
  if (!*(_DWORD *)(a4 + 16))
  {
    v10 = 0;
    goto LABEL_7;
  }
  v9 = sub_234162014(a4);
  if (!v9)
    return 0;
  v10 = v9;
  *((_DWORD *)v9 + 4) = 0;
LABEL_7:
  if (v10)
    v12 = (uint64_t)v10;
  else
    v12 = a4;
  v13 = sub_2341643CC(a1, (uint64_t)a1, a3, v12, a5);
  sub_234161FC4((_QWORD **)v10);
  return v13;
}

BOOL sub_2341643CC(void **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t *v9;
  _BOOL8 v10;
  unint64_t **v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!sub_234162060(a1, a2) || !sub_234162474((uint64_t)a1, *(int *)(a4 + 8)))
    return 0;
  sub_234162DC8((_QWORD *)a5);
  v9 = sub_234163F2C(*(int *)(a4 + 8), a5);
  v10 = v9 != 0;
  if (v9)
  {
    if (a3 >= 1)
    {
      v11 = (unint64_t **)v9;
      do
      {
        v12 = (unint64_t *)*a1;
        v13 = *(unint64_t **)a4;
        v14 = *v11;
        v15 = *(int *)(a4 + 8);
        v16 = sub_2341617E0(*a1, (uint64_t *)*a1, (uint64_t *)*a1, v15);
        sub_2341638CC(v12, v16, v13, v14, v15);
        --a3;
      }
      while (a3);
    }
    *((_DWORD *)a1 + 4) = 0;
  }
  if (!*(_BYTE *)(a5 + 40))
  {
    v17 = *(_QWORD *)(a5 + 8);
    v18 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v18;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v17 + 8 * v18);
  }
  return v10;
}

BOOL sub_2341644C8(void **a1, uint64_t a2, int a3, uint64_t a4)
{
  _OWORD *v8;
  unint64_t **v9;
  _BOOL8 v10;

  v8 = sub_23418E2E4(0x30uLL);
  v9 = (unint64_t **)v8;
  if (v8)
  {
    *(_OWORD *)((char *)v8 + 26) = 0u;
    *v8 = 0u;
    v8[1] = 0u;
    v10 = sub_2341643CC(a1, a2, a3, a4, (uint64_t)v8);
  }
  else
  {
    v10 = 0;
  }
  sub_234162D80(v9);
  return v10;
}

uint64_t sub_23416454C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = sub_2341645A0(a1, a2);
  if ((_DWORD)result)
    return sub_2341637E4(a1, a1, a3, a4);
  return result;
}

uint64_t sub_2341645A0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  if ((uint64_t *)a1 == a2)
  {
    result = sub_23416171C((_QWORD **)a1, *(int *)(a1 + 8) + 1);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    result = sub_23416171C((_QWORD **)a1, *((int *)a2 + 2) + 1);
    if (!(_DWORD)result)
      return result;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  }
  if (*((int *)a2 + 2) < 1)
    return 1;
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD **)a1;
  v8 = *a2;
  do
  {
    v9 = *(_QWORD *)(v8 + 8 * v5);
    v7[v5] = v6 | (2 * v9);
    v6 = v9 >> 63;
    ++v5;
  }
  while ((int)v5 < *((_DWORD *)a2 + 2));
  if ((v9 & 0x8000000000000000) == 0)
    return 1;
  result = 1;
  v7[v5] = 1;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_234164660(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_234163DA4(a1, a2, a2, a3, a4);
}

uint64_t sub_234164670(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  unint64_t **v7;
  uint64_t v8;

  v6 = sub_23418E2E4(0x30uLL);
  v7 = (unint64_t **)v6;
  if (v6)
  {
    *(_OWORD *)((char *)v6 + 26) = 0u;
    *v6 = 0u;
    v6[1] = 0u;
    v8 = sub_234163DA4(a1, a2, a2, a3, (uint64_t)v6);
  }
  else
  {
    v8 = 0;
  }
  sub_234162D80(v7);
  return v8;
}

uint64_t sub_2341646E8(uint64_t a1, unint64_t a2)
{
  int v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;

  if (!a2)
    return -1;
  if (!*(_DWORD *)(a1 + 8))
    return 0;
  v4 = sub_23416215C(a2);
  v5 = 64 - v4;
  if (!sub_2341634F4(a1, (uint64_t *)a1, 64 - v4))
    return -1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((int)v6 < 1)
  {
    v12 = 0;
  }
  else
  {
    v7 = a2 << -(char)v4;
    v8 = v6 + 1;
    do
    {
      v9 = *(_QWORD *)a1;
      v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v8 - 2));
      v11 = __udivti3();
      v12 = v10 - v7 * v11;
      *(_QWORD *)(v9 + 8 * (v8-- - 2)) = v11;
    }
    while (v8 > 1);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v14 = 8 * v6 - 8;
  v15 = v6;
  while (1)
  {
    v16 = __OFSUB__(v15--, 1);
    if (v15 < 0 != v16)
      break;
    v17 = *(_QWORD *)(*(_QWORD *)a1 + v14);
    v14 -= 8;
    if (v17)
    {
      *(_DWORD *)(a1 + 8) = v15 + 1;
      return v12 >> v5;
    }
  }
  *(_DWORD *)(a1 + 8) = v6 & ((int)v6 >> 31);
  if ((v6 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 16) = 0;
  return v12 >> v5;
}

uint64_t sub_234164808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!a2)
    return -1;
  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
    return 0;
  v3 = v2 + 1;
  do
  {
    v4 = __umodti3();
    --v3;
  }
  while (v3 > 1);
  return v4;
}

uint64_t sub_234164880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (!a3 || (v5 = *(int *)(a2 + 8), !(_DWORD)v5))
  {
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = 0;
    return 1;
  }
  v6 = a3;
  v7 = (unint64_t)(a3 - 1) >> 6;
  if (v7 >= v5)
    return sub_234162060((void **)a1, a2) != 0;
  v8 = v7 + 1;
  result = sub_23416171C((_QWORD **)a1, v7 + 1);
  if ((_DWORD)result)
  {
    memcpy(*(void **)a1, *(const void **)a2, 8 * v8);
    if ((v6 & 0x3F) != 0)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) &= ~(-1 << (v6 & 0x3F));
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 8) = v8;
    v10 = 8 * (v7 + 1) - 8;
    v11 = v7 + 2;
    while (--v11 >= 1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a1 + v10);
      v10 -= 8;
      if (v12)
      {
        *(_DWORD *)(a1 + 8) = v11;
        return 1;
      }
    }
    *(_DWORD *)(a1 + 8) = v8 & ((int)v8 >> 31);
    if ((v8 & 0x80000000) == 0)
      *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_23416498C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;

  result = sub_234164880(a1, a2, a3);
  if ((_DWORD)result)
  {
    v6 = *(int *)(a1 + 8);
    if (!(_DWORD)v6)
      return 1;
    v7 = 0;
    v8 = *(uint64_t **)a1;
    do
    {
      v9 = *v8++;
      v7 |= v9;
      --v6;
    }
    while (v6);
    if (v7 && *(_DWORD *)(a1 + 16))
    {
      v10 = ((unint64_t)(a3 - 1) >> 6) + 1;
      result = sub_23416171C((_QWORD **)a1, v10);
      if ((_DWORD)result)
      {
        v11 = *(int *)(a1 + 8);
        if (v10 != v11)
          bzero((void *)(*(_QWORD *)a1 + 8 * v11), 8 * (v10 - v11));
        *(_DWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 8) = v10;
        if ((int)v10 >= 1)
        {
          v12 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = ~*(_QWORD *)(*(_QWORD *)a1 + 8 * v12);
            ++v12;
            v10 = *(int *)(a1 + 8);
          }
          while (v12 < v10);
        }
        if ((a3 & 0x3F) != 0)
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * ((int)v10 - 1)) &= ~(-1 << (a3 & 0x3F));
          LODWORD(v10) = *(_DWORD *)(a1 + 8);
        }
        v13 = 8 * v10 - 8;
        v14 = v10;
        while (1)
        {
          v15 = __OFSUB__(v14--, 1);
          if (v14 < 0 != v15)
            break;
          v16 = *(_QWORD *)(*(_QWORD *)a1 + v13);
          v13 -= 8;
          if (v16)
          {
            *(_DWORD *)(a1 + 8) = v14 + 1;
            goto LABEL_23;
          }
        }
        *(_DWORD *)(a1 + 8) = v10 & ((int)v10 >> 31);
        if ((v10 & 0x80000000) == 0)
          *(_DWORD *)(a1 + 16) = 0;
LABEL_23:
        sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
        return sub_2341614D0(a1, a1, (uint64_t)&qword_256159710);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_234164AF8(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  unint64_t v6;
  char v7;
  unsigned int v8;
  char v9;
  unint64_t v10;
  int *v11;
  int v12;
  unsigned int v13;
  unint64_t v14;

  if (a2 >= 2)
  {
    v4 = *(unsigned int *)(a1 + 8);
    if ((int)v4 < 1)
    {
      LOWORD(v2) = 0;
    }
    else
    {
      v6 = a2;
      v7 = sub_23416215C(a2 - 1);
      v2 = 0;
      v8 = ((1 << (v7 + 32)) + (unint64_t)a2 - 1) / v6;
      v9 = v7 - 1;
      v10 = v4 + 1;
      do
      {
        v11 = (int *)(*(_QWORD *)a1 + 8 * (v10 - 2));
        v12 = *v11;
        LODWORD(v11) = v11[1];
        v13 = (unsigned __int16)v11 | ((unsigned __int16)(WORD1(v11)
                                                        - ((((v8
                                                                          * (unint64_t)(__PAIR64__(v2, v11) >> 16)) >> 32)
                                                                        + (((__PAIR64__(v2, v11) >> 16)- ((v8* (unint64_t)(__PAIR64__(v2, v11) >> 16)) >> 32)) >> 1)) >> v9)* a2) << 16);
        HIDWORD(v14) = (_DWORD)v11
                     - ((((v8 * (unint64_t)v13) >> 32)
                                     + ((v13 - ((v8 * (unint64_t)v13) >> 32)) >> 1)) >> v9)
                     * a2;
        LODWORD(v14) = v12;
        LODWORD(v11) = (unsigned __int16)v12 | ((unsigned __int16)(HIWORD(v12)
                                                                 - ((((v8
                                                                                   * (unint64_t)(v14 >> 16)) >> 32)
                                                                                 + (((v14 >> 16)
                                                                                                 - ((v8 * (unint64_t)(v14 >> 16)) >> 32)) >> 1)) >> v9)
                                                                 * a2) << 16);
        v2 = v12
           - ((((v8 * (unint64_t)v11) >> 32)
                           + (((_DWORD)v11 - ((v8 * (unint64_t)v11) >> 32)) >> 1)) >> v9)
           * a2;
        --v10;
      }
      while (v10 > 1);
    }
  }
  else
  {
    LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

uint64_t sub_234164C10(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_234162DC8((_QWORD *)a4);
  if (a1 == (void **)a2 || (v8 = (unint64_t *)a1, a1 == (void **)a3))
    v8 = sub_234162E68(a4);
  v9 = sub_234162E68(a4);
  result = 0;
  if (v8)
  {
    if (v9)
    {
      result = (uint64_t)sub_234162060((void **)v9, a2);
      if (result)
      {
        v11 = sub_2341621D4((uint64_t *)a3);
        if (*(int *)(a3 + 8) >= 1 && (**(_BYTE **)a3 & 1) != 0)
        {
          result = (uint64_t)sub_234162060((void **)v8, a2);
          if (!result)
            goto LABEL_22;
        }
        else
        {
          result = sub_23416171C((_QWORD **)v8, 1uLL);
          if (!(_DWORD)result)
            goto LABEL_22;
          *((_DWORD *)v8 + 4) = 0;
          *(_QWORD *)*v8 = 1;
          *((_DWORD *)v8 + 2) = 1;
        }
        if (v11 < 2)
        {
LABEL_19:
          if (v8 == (unint64_t *)a1 || (result = (uint64_t)sub_234162060(a1, (uint64_t)v8)) != 0)
            result = 1;
        }
        else
        {
          v12 = v11;
          v13 = 1;
          while (1)
          {
            result = sub_2341641F8((uint64_t)v9, (uint64_t)v9, a4);
            if (!(_DWORD)result)
              break;
            if (v13 >> 6 < *(int *)(a3 + 8) && ((*(_QWORD *)(*(_QWORD *)a3 + 8 * (v13 >> 6)) >> v13) & 1) != 0)
            {
              result = sub_234164264((uint64_t)v8, (uint64_t)v8, (uint64_t)v9, a4);
              if (!(_DWORD)result)
                break;
            }
            if (v12 == ++v13)
              goto LABEL_19;
          }
        }
      }
    }
  }
LABEL_22:
  if (!*(_BYTE *)(a4 + 40))
  {
    v14 = *(_QWORD *)(a4 + 8);
    v15 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v15;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v14 + 8 * v15);
  }
  return result;
}

uint64_t sub_234164D9C(uint64_t a1, unsigned int a2)
{
  unint64_t v2;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v2 = (unint64_t)a2 >> 6;
  if (v2 >= *(int *)(a1 + 8))
    return 0;
  else
    return (*(_QWORD *)(*(_QWORD *)a1 + 8 * v2) >> a2) & 1;
}

uint64_t sub_234164DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t *v25;
  char v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  _BYTE v46[64];
  unint64_t *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a4 + 16))
  {
    sub_2341579B4(3, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/exponentiation.c", 614);
    return 0;
  }
  v10 = a2;
  if (*(_DWORD *)(a2 + 16)
    || (v12 = *(_DWORD *)(a4 + 8),
        (sub_234162948(*(uint64_t **)a2, *(int *)(a2 + 8), *(uint64_t **)a4, v12) & 0x80000000) == 0))
  {
    if (!sub_2341637E4(a1, v10, a4, a5))
      return 0;
    v12 = *(_DWORD *)(a4 + 8);
    v10 = a1;
  }
  if (v12 < 1 || (**(_BYTE **)a4 & 1) == 0)
  {
    *(_QWORD *)&v46[56] = 0;
    v13 = sub_2341621D4((uint64_t *)a3);
    if (!v13)
    {
      v5 = 1;
      if (sub_23416171C((_QWORD **)a1, 1uLL))
      {
        *(_DWORD *)(a1 + 16) = 0;
        **(_QWORD **)a1 = 1;
        *(_DWORD *)(a1 + 8) = 1;
        return v5;
      }
      return 0;
    }
    v14 = v13;
    memset(v46, 0, 60);
    sub_234162DC8((_QWORD *)a5);
    v15 = sub_234162E68(a5);
    v16 = sub_234162E68(a5);
    v5 = 0;
    v47 = v16;
    if (v15)
    {
      v17 = (uint64_t)v16;
      if (v16)
      {
        if (*(_DWORD *)(a4 + 16))
        {
          if (!sub_234162060((void **)v15, a4))
            goto LABEL_71;
          *((_DWORD *)v15 + 4) = 0;
          v18 = (uint64_t *)v15;
        }
        else
        {
          v18 = (uint64_t *)a4;
        }
        if (!sub_2341853F8((uint64_t)v46, v18) || !sub_2341637E4(v17, v10, a4, a5))
          goto LABEL_71;
        v19 = *(int *)(v17 + 8);
        if ((_DWORD)v19)
        {
          v20 = 0;
          v21 = *(uint64_t **)v17;
          do
          {
            v22 = *v21++;
            v20 |= v22;
            --v19;
          }
          while (v19);
          if (v20)
          {
            v63 = 0;
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v48 = 0u;
            if (v14 > 0x29F)
            {
              v23 = 6;
              goto LABEL_36;
            }
            if (v14 > 0xEF)
            {
              v23 = 5;
              goto LABEL_36;
            }
            if (v14 > 0x4F)
            {
              v23 = 4;
              goto LABEL_36;
            }
            if (v14 >= 0x18)
            {
              v23 = 3;
LABEL_36:
              if (sub_234185438(v15, v17, v17, (uint64_t)v46, a5))
              {
                v24 = 0;
                while (1)
                {
                  v25 = sub_234162E68(a5);
                  (&v47)[v24 + 1] = v25;
                  if (!v25 || !sub_234185438(v25, (uint64_t)(&v47)[v24], (uint64_t)v15, (uint64_t)v46, a5))
                    break;
                  if ((v24++ + 2) >> (v23 - 1))
                    goto LABEL_43;
                }
              }
              goto LABEL_71;
            }
            v23 = 1;
LABEL_43:
            if (sub_23416171C((_QWORD **)a1, 1uLL))
            {
              v27 = 0;
              v28 = v14 - 1;
              *(_DWORD *)(a1 + 16) = 0;
              **(_QWORD **)a1 = 1;
              v45 = 1;
              *(_DWORD *)(a1 + 8) = 1;
              v44 = v23;
              v43 = v23;
              while (1)
              {
                v29 = v28 - 1;
                v30 = v28 + 1;
                while (1)
                {
                  v31 = v28;
                  if ((v28 & 0x80000000) == 0)
                  {
                    v32 = *(int *)(a3 + 8);
                    v33 = (unint64_t)v31 >> 6;
                    if (v33 < v32 && ((*(_QWORD *)(*(_QWORD *)a3 + 8 * v33) >> v31) & 1) != 0)
                      break;
                  }
                  if ((v27 & 1) != 0 && !sub_234185438((unint64_t *)a1, a1, a1, (uint64_t)v46, a5))
                    goto LABEL_71;
                  v28 = v31 - 1;
                  --v29;
                  --v30;
                  v5 = 1;
                  if (!v31)
                    goto LABEL_72;
                }
                if (v44 < 2)
                {
                  v34 = 0;
                  v36 = 1;
                }
                else
                {
                  v34 = 0;
                  v35 = 1;
                  v36 = 1;
                  do
                  {
                    if (v30 == v35)
                      break;
                    v37 = (unint64_t)v29 >> 6;
                    if (v37 >= v32)
                      LODWORD(v38) = 0;
                    else
                      v38 = (*(_QWORD *)(*(_QWORD *)a3 + 8 * v37) >> v29) & 1;
                    if ((_DWORD)v38)
                    {
                      v36 = (v36 << (v35 - v34)) | 1;
                      v34 = v35;
                    }
                    ++v35;
                    --v29;
                  }
                  while (v43 != v35);
                }
                if (!(v45 & 1 | (v34 < 0)))
                  break;
LABEL_68:
                if (!sub_234185438((unint64_t *)a1, a1, (uint64_t)(&v47)[v36 >> 1], (uint64_t)v46, a5))goto LABEL_71;
                v45 = 0;
                v40 = ~v34;
                v27 = 1;
                v5 = 1;
                v28 = v31 + v40;
                if (v28 < 0)
                  goto LABEL_72;
              }
              v39 = v34 + 1;
              while (sub_234185438((unint64_t *)a1, a1, a1, (uint64_t)v46, a5))
              {
                if (!--v39)
                  goto LABEL_68;
              }
            }
LABEL_71:
            v5 = 0;
            goto LABEL_72;
          }
        }
        *(_DWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 8) = 0;
        v5 = 1;
      }
    }
LABEL_72:
    if (!*(_BYTE *)(a5 + 40))
    {
      v41 = *(_QWORD *)(a5 + 8);
      v42 = *(_QWORD *)(a5 + 16) - 1;
      *(_QWORD *)(a5 + 16) = v42;
      *(_QWORD *)(a5 + 32) = *(_QWORD *)(v41 + 8 * v42);
    }
    sub_234161FC4((_QWORD **)v46);
    sub_234161FC4((_QWORD **)&v46[24]);
    return v5;
  }
  return sub_2341652E0(a1, v10, a3, a4, a5, 0);
}

uint64_t sub_2341652E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t *v22;
  _QWORD **v23;
  _QWORD **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t *v34;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD **v52;
  unint64_t *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a4 + 8);
  if ((int)v6 < 1 || (v8 = *(uint64_t **)a4, v9 = **(_QWORD **)a4, (v9 & 1) == 0))
  {
    v10 = 104;
    v11 = 634;
LABEL_9:
    sub_2341579B4(3, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/exponentiation.c", v11);
    return 0;
  }
  if (*(_DWORD *)(a4 + 16))
  {
    v10 = 109;
    v11 = 638;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 16)
    || (sub_234162948(*(uint64_t **)a2, *(int *)(a2 + 8), *(uint64_t **)a4, *(unsigned int *)(a4 + 8)) & 0x80000000) == 0)
  {
    v10 = 107;
    v11 = 643;
    goto LABEL_9;
  }
  v19 = sub_2341621D4((uint64_t *)a3);
  if (!v19)
  {
    v25 = v9 ^ 1;
    if (v6 >= 2)
    {
      v26 = v6 - 1;
      v27 = v8 + 1;
      do
      {
        v28 = *v27++;
        v25 |= v28;
        --v26;
      }
      while (v26);
    }
    if (!v25)
    {
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
      return 1;
    }
    v17 = 1;
    if (sub_23416171C((_QWORD **)a1, 1uLL))
    {
      *(_DWORD *)(a1 + 16) = 0;
      **(_QWORD **)a1 = 1;
      *(_DWORD *)(a1 + 8) = 1;
      return v17;
    }
    return 0;
  }
  v20 = v19;
  v69 = 0;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  sub_234162DC8((_QWORD *)a5);
  v21 = sub_234162E68(a5);
  v22 = sub_234162E68(a5);
  v23 = 0;
  v17 = 0;
  v53 = v22;
  if (v21 && v22)
  {
    if (a6)
    {
      v24 = 0;
LABEL_25:
      v52 = v24;
      if (v20 <= 0x29F)
      {
        if (v20 <= 0xEF)
        {
          if (v20 <= 0x4F)
          {
            if (v20 <= 0x17)
              v29 = 1;
            else
              v29 = 3;
          }
          else
          {
            v29 = 4;
          }
        }
        else
        {
          v29 = 5;
        }
      }
      else
      {
        v29 = 6;
      }
      if (!sub_23416583C((uint64_t)v22, a2, a6, a6, a5))
      {
LABEL_75:
        v17 = 0;
LABEL_77:
        v23 = v52;
        goto LABEL_78;
      }
      v51 = v29;
      if (v29 >= 2)
      {
        v30 = sub_234162E68(a5);
        if (v30)
        {
          v31 = (uint64_t)v30;
          if (sub_23416583C((uint64_t)v30, (uint64_t)v22, (uint64_t)v22, a6, a5))
          {
            v32 = 0;
            v33 = v29 - 1;
            while (1)
            {
              v34 = sub_234162E68(a5);
              (&v53)[v32 + 1] = v34;
              if (!v34 || !sub_23416583C((uint64_t)v34, (uint64_t)(&v53)[v32], v31, a6, a5))
                break;
              if ((v32++ + 2) >> v33)
                goto LABEL_43;
            }
          }
        }
        goto LABEL_75;
      }
LABEL_43:
      v36 = 0;
      v37 = v20 - 1;
      v38 = v51;
      while (1)
      {
        v39 = v37;
        v40 = v37 - 1;
        if ((v37 & 0x80000000) != 0)
          goto LABEL_47;
LABEL_45:
        v41 = *(int *)(a3 + 8);
        if (v39 >> 6 >= v41 || ((*(_QWORD *)(*(_QWORD *)a3 + 8 * (v39 >> 6)) >> v39) & 1) == 0)
        {
LABEL_47:
          while ((v36 & 1) == 0 || sub_23416583C((uint64_t)v21, (uint64_t)v21, (uint64_t)v21, a6, a5))
          {
            if (!v39)
              goto LABEL_76;
            --v39;
            --v40;
            if ((v39 & 0x80000000) == 0)
              goto LABEL_45;
          }
          goto LABEL_75;
        }
        if (v38 < 2 || !(_DWORD)v39)
          break;
        v42 = 0;
        v43 = 1;
        v44 = 1;
        do
        {
          if ((v40 & 0x80000000) != 0 || (v45 = (unint64_t)v40 >> 6, v45 >= v41))
            LODWORD(v46) = 0;
          else
            v46 = (*(_QWORD *)(*(_QWORD *)a3 + 8 * v45) >> v40) & 1;
          if ((_DWORD)v46)
          {
            v44 = (v44 << (v43 - v42)) | 1;
            v42 = v43;
          }
          if (v43 + 1 >= (unint64_t)v51)
            break;
          --v40;
        }
        while (v43++ < (int)v39);
        if ((v36 & 1) == 0)
          goto LABEL_72;
        if ((v42 & 0x80000000) == 0)
          goto LABEL_67;
LABEL_70:
        if (!sub_23416583C((uint64_t)v21, (uint64_t)v21, (uint64_t)(&v53)[v44 >> 1], a6, a5))
          goto LABEL_75;
LABEL_73:
        v38 = v51;
        if ((_DWORD)v39 == v42)
        {
LABEL_76:
          v17 = (uint64_t)sub_23416591C(a1, (uint64_t)v21, a6, a5);
          goto LABEL_77;
        }
        v37 = v39 + ~v42;
        v36 = 1;
      }
      v42 = 0;
      v44 = 1;
      if ((v36 & 1) != 0)
      {
LABEL_67:
        v48 = -1;
        while (sub_23416583C((uint64_t)v21, (uint64_t)v21, (uint64_t)v21, a6, a5))
        {
          if (v42 == ++v48)
            goto LABEL_70;
        }
        goto LABEL_75;
      }
LABEL_72:
      if (!sub_234162060((void **)v21, (uint64_t)(&v53)[v44 >> 1]))
        goto LABEL_75;
      goto LABEL_73;
    }
    v23 = sub_2341657CC(a4, a5);
    a6 = (uint64_t)v23;
    v24 = v23;
    if (v23)
      goto LABEL_25;
    v17 = 0;
  }
LABEL_78:
  sub_2341659A4(v23);
  if (!*(_BYTE *)(a5 + 40))
  {
    v49 = *(_QWORD *)(a5 + 8);
    v50 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v50;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v49 + 8 * v50);
  }
  return v17;
}

_QWORD **sub_2341657CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD **v5;

  v4 = sub_2341695D4();
  v5 = (_QWORD **)v4;
  if (!v4 || !sub_234169728((uint64_t)v4, a1) || !sub_234169980((uint64_t)v5, a2))
  {
    sub_2341659A4(v5);
    return 0;
  }
  return v5;
}

uint64_t sub_234165830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23416583C(a1, a2, a3, a3, a4);
}

uint64_t sub_23416583C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_DWORD *)(a2 + 16) || *(_DWORD *)(a3 + 16))
  {
    sub_2341579B4(3, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/montgomery.c", 421);
    return 0;
  }
  sub_234162DC8((_QWORD *)a5);
  result = (uint64_t)sub_234162E68(a5);
  if (result)
  {
    v11 = result;
    if (a2 != a3)
    {
      result = sub_234167EE8(result, a2, a3, a5);
      if (!(_DWORD)result)
        goto LABEL_9;
      goto LABEL_8;
    }
    result = sub_23416A418(result, a2, a5);
    if ((_DWORD)result)
LABEL_8:
      result = sub_234169ADC(a1, v11, a4);
  }
LABEL_9:
  if (!*(_BYTE *)(a5 + 40))
  {
    v12 = *(_QWORD *)(a5 + 8);
    v13 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v13;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v12 + 8 * v13);
  }
  return result;
}

void **sub_23416591C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_234162DC8((_QWORD *)a4);
  result = (void **)sub_234162E68(a4);
  if (result)
  {
    v9 = (uint64_t)result;
    result = sub_234162060(result, a2);
    if (result)
      result = (void **)sub_234169ADC(a1, v9, a3);
  }
  if (!*(_BYTE *)(a4 + 40))
  {
    v10 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v11;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v10 + 8 * v11);
  }
  return result;
}

void sub_2341659A4(_QWORD **a1)
{
  if (a1)
  {
    sub_234161FC4(a1);
    sub_234161FC4(a1 + 3);
    sub_23418E3C4(a1);
  }
}

void sub_2341659D8(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int j;
  uint64_t v30;
  uint64_t __n;
  unint64_t v32;
  unint64_t v33[9];
  unint64_t v34[146];

  v34[144] = *MEMORY[0x24BDAC8D0];
  if (a5 >> 58 || a3 > 9 || *(_DWORD *)(a6 + 32) != a3)
    abort();
  v10 = -64 * a5;
  do
  {
    if (!a5)
    {
      sub_234165D40(a1, a3, *(_QWORD *)a6, a3, a6);
      return;
    }
    v11 = a5 - 1;
    v12 = *(_QWORD *)(a4 - 8 + 8 * a5);
    v10 += 64;
    --a5;
  }
  while (!v12);
  v13 = sub_23416215C(v12);
  v14 = v13 - v10;
  if ((unint64_t)(v13 - v10) <= 0x29F)
  {
    if (v14 <= 0xEF)
    {
      if (v14 <= 0x17)
        v16 = 1;
      else
        v16 = 3;
      if (v14 <= 0x4F)
        LODWORD(v15) = v16;
      else
        LODWORD(v15) = 4;
    }
    else
    {
      LODWORD(v15) = 5;
    }
  }
  else
  {
    LODWORD(v15) = 6;
  }
  if (v15 >= 5)
    v15 = 5;
  else
    v15 = v15;
  v32 = v15;
  if (8 * a3)
    __memcpy_chk();
  __n = 8 * a3;
  if (v32 >= 2)
  {
    v30 = v13;
    sub_234165E1C(v33, v34, v34, a3, a6);
    v17 = 2;
    do
      sub_234165E1C(&v34[9 * v17 - 9], &v34[9 * v17 - 18], v33, a3, a6);
    while (!(v17++ >> (v32 - 1)));
    v13 = v30;
  }
  v19 = 0;
  v20 = v11 + 1;
  v21 = ~v10 + v13;
  do
  {
    v22 = v21 - 1;
    for (i = v21; i >> 6 >= v20 || ((*(_QWORD *)(a4 + 8 * (i >> 6)) >> i) & 1) == 0; --i)
    {
      if ((v19 & 1) != 0)
        sub_234165E1C(a1, a1, a1, a3, a6);
      if (!i)
        goto LABEL_55;
      --v22;
    }
    if (v32 >= 2 && i)
    {
      v24 = 0;
      v25 = 1;
      v26 = 1;
      do
      {
        if (v22 >> 6 >= v20)
          LODWORD(v27) = 0;
        else
          v27 = (*(_QWORD *)(a4 + 8 * (v22 >> 6)) >> v22) & 1;
        if ((_DWORD)v27)
        {
          v26 = (v26 << (v25 - v24)) | 1;
          v24 = v25;
        }
        if (v25 + 1 >= v32)
          break;
        --v22;
      }
      while (i > v25++);
      if ((v19 & 1) != 0)
      {
        if (v24 != -1)
        {
LABEL_49:
          for (j = -1; j != v24; ++j)
            sub_234165E1C(a1, a1, a1, a3, a6);
        }
        sub_234165E1C(a1, a1, &v34[9 * (v26 >> 1)], a3, a6);
        goto LABEL_54;
      }
    }
    else
    {
      v24 = 0;
      v26 = 1;
      if ((v19 & 1) != 0)
        goto LABEL_49;
    }
    if (__n)
      memcpy(a1, &v34[9 * (v26 >> 1)], __n);
LABEL_54:
    v21 = i - (v24 + 1);
    v19 = 1;
  }
  while (i != v24);
LABEL_55:
  sub_23418E400(v34, 0x480uLL);
}

void sub_234165D40(unint64_t *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v7;
  _OWORD v10[9];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a2 > 9)
    goto LABEL_11;
  v7 = 2 * a2;
  if (*(_DWORD *)(a5 + 32) != a2 || v7 < a4)
    goto LABEL_11;
  memset(v10, 0, sizeof(v10));
  if (a4)
    __memcpy_chk();
  if (!sub_234169BF4(a1, a2, (unint64_t *)v10, v7, a5))
LABEL_11:
    abort();
  sub_23418E400(v10, 16 * a2);
}

void sub_234165E1C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11[19];

  v11[18] = *MEMORY[0x24BDAC8D0];
  if (a4 > 9 || *(_DWORD *)(a5 + 32) != a4)
    goto LABEL_8;
  v10 = 2 * a4;
  if (a2 == a3)
    sub_234169CE8(v11, v10, a2, a4);
  else
    sub_234169DD4(v11, v10, a2, a4, a3, a4);
  if (!sub_234169BF4(a1, a4, v11, 2 * a4, a5))
LABEL_8:
    abort();
  sub_23418E400(v11, 16 * a4);
}

uint64_t sub_234165EEC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >> 6 >= a2)
    return 0;
  else
    return (*(_QWORD *)(a1 + 8 * (a3 >> 6)) >> a3) & 1;
}

void sub_234165F10(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  if (a3 > 9 || *(_DWORD *)(a4 + 32) != a3)
    abort();
  if (a3)
  {
    __memcpy_chk();
    v8 = v13;
    v13 -= 2;
    if (v8 <= 1 && a3 != 1)
    {
      v9 = a3 - 2;
      v10 = v14;
      do
      {
        v11 = v9;
        if ((*v10++)-- != 0)
          break;
        --v9;
      }
      while (v11);
    }
  }
  sub_2341659D8(a1, a2, a3, (uint64_t)&v13, a3, a4);
}

uint64_t sub_234166004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v17;
  int v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD **v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD **v48;
  uint64_t v49;
  signed int v50;
  char *__dst;
  char *v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;

  v6 = *(unsigned int *)(a4 + 8);
  if ((int)v6 < 1 || (v8 = *(uint64_t **)a4, v9 = **(_QWORD **)a4, (v9 & 1) == 0))
  {
    v10 = 104;
    v11 = 938;
LABEL_9:
    sub_2341579B4(3, 0, v10, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/exponentiation.c", v11);
    return 0;
  }
  if (*(_DWORD *)(a4 + 16))
  {
    v10 = 109;
    v11 = 942;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 16)
    || (int)sub_234162948(*(uint64_t **)a2, *(int *)(a2 + 8), *(uint64_t **)a4, *(unsigned int *)(a4 + 8)) >= 0)
  {
    v10 = 107;
    v11 = 948;
    goto LABEL_9;
  }
  v19 = *(_DWORD *)(a3 + 8);
  if (!v19)
  {
    v21 = v9 ^ 1;
    if (v6 >= 2)
    {
      v22 = v6 - 1;
      v23 = v8 + 1;
      do
      {
        v24 = *v23++;
        v21 |= v24;
        --v22;
      }
      while (v22);
    }
    if (!v21)
    {
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
      return 1;
    }
    v17 = 1;
    if (sub_23416171C((_QWORD **)a1, 1uLL))
    {
      *(_DWORD *)(a1 + 16) = 0;
      **(_QWORD **)a1 = 1;
      *(_DWORD *)(a1 + 8) = 1;
      return v17;
    }
    return 0;
  }
  if (a6)
  {
    v20 = 0;
    goto LABEL_22;
  }
  v25 = sub_2341657CC(a4, a5);
  a6 = (uint64_t)v25;
  v20 = v25;
  if (v25)
  {
LABEL_22:
    v48 = v20;
    v26 = *(_DWORD *)(a6 + 32);
    if (v19 == 1)
      v27 = 3;
    else
      v27 = 1;
    if (v19 <= 1)
      v28 = v27;
    else
      v28 = 4;
    if (v19 <= 4)
      v29 = v28;
    else
      v29 = 5;
    if (v19 > 14)
      v29 = 6;
    v50 = v29;
    v30 = 1 << v29;
    v49 = 8 * *(int *)(a6 + 32) * (uint64_t)((1 << v29) + 2);
    v31 = sub_23418E2E4(v49 + 64);
    v32 = v31;
    if (v31)
    {
      v47 = -(int)v31 & 0x3FLL;
      v33 = (char *)v31 + v47;
      __dst = (char *)v31 + v47;
      if (v26)
      {
        bzero(__dst, v49);
        v33 = __dst;
      }
      v56 = &v33[8 * (v26 << v50)];
      v52 = &v56[8 * v26];
      v53 = 0;
      v54 = v26;
      v57 = 0;
      v58 = v26;
      v55 = 0x200000000;
      v59 = 0x200000000;
      if (sub_234166500((uint64_t)&v56, a6, a5)
        && sub_234162474((uint64_t)&v56, v26)
        && sub_23416583C((uint64_t)&v52, a2, a6, a6, a5)
        && sub_234162474((uint64_t)&v52, v26))
      {
        sub_234162358(__dst, v26, (uint64_t)&v56);
        sub_234162358(&__dst[8 * v26], v26, (uint64_t)&v52);
        if (v50 < 2)
        {
LABEL_48:
          v37 = (v19 << 6) - 1;
          v38 = 0;
          v39 = v37 % v50;
          if (((v37 % v50) & 0x80000000) == 0)
          {
            v40 = v39 + 1;
            do
            {
              if (v37 < 0 || (v41 = (unint64_t)v37 >> 6, v41 >= *(int *)(a3 + 8)))
                LODWORD(v42) = 0;
              else
                v42 = (*(_QWORD *)(*(_QWORD *)a3 + 8 * v41) >> v37) & 1;
              v38 = v42 | (2 * v38);
              --v37;
              --v40;
            }
            while (v40 > 0);
            v37 = (v19 << 6) - 2 - v39;
          }
          if (sub_2341665B8((uint64_t)&v56, v26, (uint64_t)__dst, v38, v50))
          {
LABEL_57:
            if (v37 < 0)
            {
              v17 = (uint64_t)sub_23416591C(a1, (uint64_t)&v56, a6, a5);
              goto LABEL_69;
            }
            v43 = 0;
            v44 = 0;
            while (sub_23416583C((uint64_t)&v56, (uint64_t)&v56, (uint64_t)&v56, a6, a5))
            {
              v45 = (v37 + v43);
              if ((v45 & 0x80000000) != 0 || v45 >> 6 >= *(int *)(a3 + 8))
                LODWORD(v46) = 0;
              else
                v46 = (*(_QWORD *)(*(_QWORD *)a3 + 8 * ((unint64_t)(v37 + v43) >> 6)) >> (v37 + v43)) & 1;
              v44 = v46 | (2 * v44);
              --v43;
              if (!(v50 + v43))
              {
                if (sub_2341665B8((uint64_t)&v52, v26, (uint64_t)__dst, v44, v50))
                {
                  v37 -= v50;
                  if (sub_23416583C((uint64_t)&v56, (uint64_t)&v56, (uint64_t)&v52, a6, a5))
                    goto LABEL_57;
                }
                break;
              }
            }
          }
        }
        else if (sub_23416583C((uint64_t)&v56, (uint64_t)&v52, (uint64_t)&v52, a6, a5))
        {
          sub_234162358(&__dst[16 * v26], v26, (uint64_t)&v56);
          if (v30 <= 4)
            v34 = 4;
          else
            v34 = v30;
          v35 = (char *)&v32[3 * v26] + v47;
          v36 = v34 - 3;
          while (sub_23416583C((uint64_t)&v56, (uint64_t)&v52, (uint64_t)&v56, a6, a5))
          {
            sub_234162358(v35, v26, (uint64_t)&v56);
            v35 += 8 * v26;
            if (!--v36)
              goto LABEL_48;
          }
        }
      }
      v17 = 0;
    }
    else
    {
      v17 = 0;
      __dst = 0;
    }
LABEL_69:
    v25 = v48;
    goto LABEL_70;
  }
  v17 = 0;
  v32 = 0;
  v49 = 0;
  __dst = 0;
LABEL_70:
  sub_2341659A4(v25);
  if (!v32 && __dst)
    sub_23418E400(__dst, v49);
  sub_23418E3C4(v32);
  return v17;
}

uint64_t sub_234166500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = *(unsigned int *)(a2 + 32);
  if ((int)v5 < 1 || (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * (v5 - 1)) & 0x8000000000000000) == 0)
    return (uint64_t)sub_23416591C(a1, a2, a2, a3);
  result = sub_23416171C((_QWORD **)a1, v5);
  if ((_DWORD)result)
  {
    **(_QWORD **)a1 = -**(_QWORD **)(a2 + 24);
    LODWORD(v7) = *(_DWORD *)(a2 + 32);
    if ((int)v7 >= 2)
    {
      v8 = 1;
      do
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = ~*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v8);
        ++v8;
        v7 = *(int *)(a2 + 32);
      }
      while (v8 < v7);
    }
    *(_DWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_2341665B8(uint64_t a1, int a2, uint64_t a3, int a4, char a5)
{
  uint64_t v10;
  uint64_t result;
  size_t v12;
  unsigned int v13;
  uint64_t v14;

  v10 = a2;
  result = sub_23416171C((_QWORD **)a1, a2);
  if ((_DWORD)result)
  {
    v12 = 8 * v10;
    if (a2)
      bzero(*(void **)a1, v12);
    v13 = 0;
    do
    {
      if (a2 >= 1)
      {
        v14 = 0;
        do
        {
          *(_QWORD *)(*(_QWORD *)a1 + v14) |= *(_QWORD *)(a3 + v14) & ((((int)(v13 ^ a4) - 1) & ~(uint64_t)(int)(v13 ^ a4)) >> 63);
          v14 += 8;
        }
        while (8 * a2 != v14);
      }
      ++v13;
      a3 += v12;
    }
    while (!(v13 >> a5));
    *(_DWORD *)(a1 + 8) = a2;
    return 1;
  }
  return result;
}

uint64_t sub_234166680(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a2;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v12 = *(unsigned int *)(a4 + 8);
  v13 = 8 * v12 - 8;
  do
  {
    v14 = __OFSUB__((_DWORD)v12, 1);
    LODWORD(v12) = v12 - 1;
    if ((int)v12 < 0 != v14)
      goto LABEL_5;
    v15 = *(_QWORD *)(*(_QWORD *)a4 + v13);
    v13 -= 8;
  }
  while (!v15);
  if (!(_DWORD)v12)
  {
    v10 = a2 % **(_QWORD **)a4;
    if (v10)
      goto LABEL_6;
LABEL_10:
    v16 = 0;
    goto LABEL_11;
  }
LABEL_5:
  if (!a2)
    goto LABEL_10;
LABEL_6:
  if (!sub_23416171C(&v19, 1uLL))
  {
    sub_2341579B4(3, 0, 68, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/exponentiation.c", 1271);
    v17 = 0;
    goto LABEL_12;
  }
  LODWORD(v21) = 0;
  *v19 = v10;
  v16 = 1;
LABEL_11:
  LODWORD(v20) = v16;
  v17 = sub_2341652E0(a1, (uint64_t)&v19, a3, a4, a5, a6);
LABEL_12:
  sub_234161FC4(&v19);
  return v17;
}

uint64_t sub_234166788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD **a8)
{
  _QWORD **v8;
  _QWORD **v16;
  uint64_t v17;
  _QWORD *v19[3];

  v8 = a8;
  v16 = 0;
  memset(v19, 0, sizeof(v19));
  if ((a8 || (v8 = sub_2341668A4(a6, a7), (v16 = v8) != 0))
    && sub_2341652E0(a1, a2, a3, a6, a7, (uint64_t)v8)
    && sub_2341652E0((uint64_t)v19, a4, a5, a6, a7, (uint64_t)v8)
    && sub_23416583C(a1, a1, (uint64_t)v8, (uint64_t)v8, a7))
  {
    v17 = sub_23416583C(a1, a1, (uint64_t)v19, (uint64_t)v8, a7);
  }
  else
  {
    v17 = 0;
  }
  sub_2341659A4(v16);
  sub_234161FC4(v19);
  return v17;
}

_QWORD **sub_2341668A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD **v5;

  v4 = sub_2341695D4();
  v5 = (_QWORD **)v4;
  if (!v4 || !sub_234169668(v4, a1, a2))
  {
    sub_2341659A4(v5);
    return 0;
  }
  return v5;
}

uint64_t sub_2341668FC(void **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  __int16 v7;
  uint64_t result;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *a2 = 0;
  if (*(int *)(a4 + 8) < 1 || (**(_BYTE **)a4 & 1) == 0)
  {
    v6 = 104;
    v7 = 121;
LABEL_7:
    sub_2341579B4(3, 0, v6, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/gcd.c", v7);
    return 0;
  }
  if (*(_DWORD *)(a3 + 16) || (sub_234162A28(a3, a4) & 0x80000000) == 0)
  {
    v6 = 107;
    v7 = 126;
    goto LABEL_7;
  }
  sub_234162DC8((_QWORD *)a5);
  v13 = sub_234162E68(a5);
  v14 = sub_234162E68(a5);
  v15 = sub_234162E68(a5);
  result = (uint64_t)sub_234162E68(a5);
  if (result)
  {
    v16 = result;
    *(_DWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 8) = 0;
    result = sub_23416171C((_QWORD **)v15, 1uLL);
    if ((_DWORD)result)
    {
      *((_DWORD *)v15 + 4) = 0;
      *(_QWORD *)*v15 = 1;
      *((_DWORD *)v15 + 2) = 1;
      result = (uint64_t)sub_234162060((void **)v14, a3);
      if (result)
      {
        result = (uint64_t)sub_234162060((void **)v13, a4);
        if (result)
        {
          *((_DWORD *)v13 + 4) = 0;
          while (1)
          {
            LODWORD(v17) = *((_DWORD *)v14 + 2);
            if (!(_DWORD)v17)
              break;
            v18 = 0;
            v17 = (int)v17;
            v19 = (uint64_t *)*v14;
            do
            {
              v20 = *v19++;
              v18 |= v20;
              --v17;
            }
            while (v17);
            if (!v18)
              break;
            v21 = 0;
            while (v21 >> 6 >= *((int *)v14 + 2) || ((*(_QWORD *)(*v14 + 8 * (v21 >> 6)) >> v21) & 1) == 0)
            {
              if (*((int *)v15 + 2) < 1
                || (*(_BYTE *)*v15 & 1) == 0
                || (result = sub_234161608((uint64_t)v15, (uint64_t)v15, a4), (_DWORD)result))
              {
                result = sub_234166C94((uint64_t)v15, (uint64_t *)v15);
                ++v21;
                if ((_DWORD)result)
                  continue;
              }
              goto LABEL_53;
            }
            if (!(_DWORD)v21 || (result = sub_23416371C((uint64_t)v14, (uint64_t)v14, v21), (_DWORD)result))
            {
              v22 = 0;
              while (1)
              {
                v23 = *((int *)v13 + 2);
                if (v22 >> 6 < v23)
                {
                  v24 = (uint64_t *)*v13;
                  if (((*(_QWORD *)(*v13 + 8 * (v22 >> 6)) >> v22) & 1) != 0)
                    break;
                }
                if (*(int *)(v16 + 8) < 1
                  || (**(_BYTE **)v16 & 1) == 0
                  || (result = sub_234161608(v16, v16, a4), (_DWORD)result))
                {
                  v25 = sub_234166C94(v16, (uint64_t *)v16);
                  result = 0;
                  ++v22;
                  if (v25)
                    continue;
                }
                goto LABEL_53;
              }
              if ((_DWORD)v22)
              {
                result = sub_23416371C((uint64_t)v13, (uint64_t)v13, v22);
                if (!(_DWORD)result)
                  goto LABEL_53;
                v24 = (uint64_t *)*v13;
                v23 = *((int *)v13 + 2);
              }
              if ((sub_234162948((uint64_t *)*v14, *((int *)v14 + 2), v24, v23) & 0x80000000) != 0)
              {
                result = sub_234161608(v16, v16, (uint64_t)v15);
                if (!(_DWORD)result)
                  goto LABEL_53;
                v26 = (uint64_t)v13;
                v27 = (uint64_t)v13;
                v28 = (uint64_t)v14;
              }
              else
              {
                result = sub_234161608((uint64_t)v15, (uint64_t)v15, v16);
                if (!(_DWORD)result)
                  goto LABEL_53;
                v26 = (uint64_t)v14;
                v27 = (uint64_t)v14;
                v28 = (uint64_t)v13;
              }
              result = sub_23416159C(v26, v27, v28);
              if ((_DWORD)result)
                continue;
            }
            goto LABEL_53;
          }
          if (sub_234162B4C((unsigned int *)v13))
          {
            result = sub_234161C30(v16, a4, v16);
            if ((_DWORD)result)
            {
              if (!*(_DWORD *)(v16 + 16)
                && (sub_234162948(*(uint64_t **)v16, *(int *)(v16 + 8), *(uint64_t **)a4, *(int *)(a4 + 8)) & 0x80000000) != 0
                || (result = sub_2341637E4(v16, v16, a4, a5), (_DWORD)result))
              {
                result = sub_234162060(a1, v16) != 0;
              }
            }
          }
          else
          {
            *a2 = 1;
            sub_2341579B4(3, 0, 112, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/gcd.c", 248);
            result = 0;
          }
        }
      }
    }
  }
LABEL_53:
  if (!*(_BYTE *)(a5 + 40))
  {
    v29 = *(_QWORD *)(a5 + 8);
    v30 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v30;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v29 + 8 * v30);
  }
  return result;
}

uint64_t sub_234166C94(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;

  result = sub_23416171C((_QWORD **)a1, *((int *)a2 + 2));
  if ((_DWORD)result)
  {
    v5 = *((int *)a2 + 2);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)a1;
      v7 = *a2;
      v8 = v5 - 1;
      if (v8)
      {
        v9 = v7 + 8;
        v10 = v8;
        v11 = *(_QWORD **)a1;
        do
        {
          *v11++ = *(__int128 *)(v9 - 8) >> 1;
          v9 += 8;
          --v10;
        }
        while (v10);
      }
      v6[v8] = *(_QWORD *)(v7 + 8 * v8) >> 1;
      v12 = *((_DWORD *)a2 + 2);
    }
    else
    {
      v12 = 0;
    }
    *(_DWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v13 = 8 * v12 - 8;
    v14 = v12;
    while (1)
    {
      v15 = __OFSUB__(v14--, 1);
      if (v14 < 0 != v15)
        break;
      v16 = *(_QWORD *)(*(_QWORD *)a1 + v13);
      v13 -= 8;
      if (v16)
      {
        *(_DWORD *)(a1 + 8) = v14 + 1;
        return 1;
      }
    }
    *(_DWORD *)(a1 + 8) = v12 & (v12 >> 31);
    if ((v12 & 0x80000000) == 0)
      *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

void **sub_234166D64(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v7;
  void **v8;
  int v9;
  void **v10;
  _QWORD **v11;
  int v13;

  if (a1)
  {
    v7 = a1;
    v8 = 0;
LABEL_4:
    if (!*(_DWORD *)(a2 + 16)
      && (v9 = *(_DWORD *)(a3 + 8),
          (sub_234162948(*(uint64_t **)a2, *(int *)(a2 + 8), *(uint64_t **)a3, v9) & 0x80000000) != 0))
    {
      v11 = 0;
    }
    else
    {
      v10 = sub_234162014(a2);
      if (!v10)
      {
        v11 = 0;
        goto LABEL_15;
      }
      a2 = (uint64_t)v10;
      if (!sub_2341637E4((uint64_t)v10, (uint64_t)v10, a3, a4))
      {
        v11 = (_QWORD **)a2;
        goto LABEL_15;
      }
      v9 = *(_DWORD *)(a3 + 8);
      v11 = (_QWORD **)a2;
    }
    if (v9 >= 1 && (**(_BYTE **)a3 & 1) != 0)
    {
      if (sub_2341668FC(v7, &v13, a2, a3, a4))
        goto LABEL_16;
    }
    else if (sub_234166E98((uint64_t)v7, &v13, a2, a3, a4))
    {
LABEL_16:
      sub_234161FC4(v11);
      return v7;
    }
LABEL_15:
    sub_234161FC4((_QWORD **)v8);
    v7 = 0;
    goto LABEL_16;
  }
  v7 = (void **)sub_234161F88();
  v8 = v7;
  if (v7)
    goto LABEL_4;
  return v7;
}

uint64_t sub_234166E98(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  int v14;
  __int16 v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t **v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  int v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t **v89;
  unint64_t **v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t *v93;
  unint64_t *v94;

  *a2 = 0;
  if (*(_DWORD *)(a3 + 16)
    || (v10 = *(uint64_t **)a3,
        v11 = *(int *)(a3 + 8),
        v12 = *(uint64_t **)a4,
        v13 = *(int *)(a4 + 8),
        (sub_234162948(*(uint64_t **)a3, v11, *(uint64_t **)a4, v13) & 0x80000000) == 0))
  {
    v14 = 107;
    v15 = 174;
LABEL_4:
    sub_2341579B4(3, 0, v14, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/gcd_extra.c", v15);
    return 0;
  }
  if (!(_DWORD)v11)
    goto LABEL_89;
  v17 = 0;
  v18 = 0;
  do
    v18 |= v10[v17++];
  while (v11 != v17);
  if (!v18)
  {
LABEL_89:
    if (sub_234162B4C((unsigned int *)a4))
    {
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
      return 1;
    }
    *a2 = 1;
    v14 = 112;
    v15 = 183;
    goto LABEL_4;
  }
  if (((int)v11 < 1 || (*(_BYTE *)v10 & 1) == 0) && ((int)v13 < 1 || (*(_BYTE *)v12 & 1) == 0))
  {
    *a2 = 1;
    v14 = 112;
    v15 = 199;
    goto LABEL_4;
  }
  if (v11 >= v13)
    v19 = v13;
  else
    v19 = v11;
  sub_234162DC8((_QWORD *)a5);
  v20 = sub_234162E68(a5);
  v21 = sub_234162E68(a5);
  v22 = sub_234162E68(a5);
  v92 = sub_234162E68(a5);
  v91 = sub_234162E68(a5);
  v94 = sub_234162E68(a5);
  v93 = sub_234162E68(a5);
  v23 = sub_234162E68(a5);
  result = 0;
  if (v20)
  {
    if (v21)
    {
      if (v22)
      {
        if (v92)
        {
          if (v91)
          {
            if (v94)
            {
              if (v93)
              {
                if (v23)
                {
                  v90 = (unint64_t **)v23;
                  result = (uint64_t)sub_234162060((void **)v20, a3);
                  if (result)
                  {
                    result = (uint64_t)sub_234162060((void **)v21, a4);
                    if (result)
                    {
                      v89 = (unint64_t **)v21;
                      result = sub_23416171C((_QWORD **)v22, 1uLL);
                      if ((_DWORD)result)
                      {
                        *((_DWORD *)v22 + 4) = 0;
                        *(_QWORD *)*v22 = 1;
                        *((_DWORD *)v22 + 2) = 1;
                        result = sub_23416171C((_QWORD **)v94, 1uLL);
                        if ((_DWORD)result)
                        {
                          *((_DWORD *)v94 + 4) = 0;
                          *(_QWORD *)*v94 = 1;
                          *((_DWORD *)v94 + 2) = 1;
                          result = sub_234162474((uint64_t)v20, v13);
                          if ((_DWORD)result)
                          {
                            result = sub_234162474((uint64_t)v21, v13);
                            if ((_DWORD)result)
                            {
                              result = sub_234162474((uint64_t)v22, v13);
                              if ((_DWORD)result)
                              {
                                result = sub_234162474((uint64_t)v91, v13);
                                if ((_DWORD)result)
                                {
                                  result = sub_234162474((uint64_t)v92, v19);
                                  if ((_DWORD)result)
                                  {
                                    result = sub_234162474((uint64_t)v94, v19);
                                    if ((_DWORD)result)
                                    {
                                      result = sub_234162474((uint64_t)v93, v13);
                                      if ((_DWORD)result)
                                      {
                                        result = sub_234162474((uint64_t)v90, v13);
                                        if ((_DWORD)result)
                                        {
                                          v24 = (v19 + v13) << 6;
                                          if (v24 < (uint64_t)v19 << 6)
                                          {
                                            v25 = 102;
                                            v26 = 248;
LABEL_83:
                                            sub_2341579B4(3, 0, v25, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/gcd_extra.c", v26);
                                            result = 0;
                                            goto LABEL_85;
                                          }
                                          if (v19 + v13)
                                          {
                                            v27 = 0;
                                            v69 = v19 - 1;
                                            v70 = v13 - 1;
                                            if (v24 <= 1)
                                              v24 = 1;
                                            v68 = v24;
                                            do
                                            {
                                              v85 = ((uint64_t)(*(_QWORD *)*v20 << 63) >> 63) & -(uint64_t)(**v89 & 1);
                                              v28 = sub_234161E5C((unint64_t *)*v93, *v89, (unint64_t *)*v20, v13);
                                              v29 = *v89;
                                              v30 = (unint64_t *)*v93;
                                              v81 = v27;
                                              v82 = (v28 - 1) & v85;
                                              if ((_DWORD)v13)
                                              {
                                                v31 = v13;
                                                do
                                                {
                                                  v32 = *v30++;
                                                  *v29 = *v29 & ~((v28 - 1) & v85) | v32 & (v28 - 1) & v85;
                                                  ++v29;
                                                  --v31;
                                                }
                                                while (v31);
                                                v30 = (unint64_t *)*v93;
                                                v29 = *v89;
                                              }
                                              v33 = -(uint64_t)v28;
                                              sub_234161E5C(v30, (unint64_t *)*v20, v29, v13);
                                              v34 = v85 & v33;
                                              v35 = (unint64_t *)*v93;
                                              v86 = v85 & v33;
                                              if ((_DWORD)v13)
                                              {
                                                v36 = (_QWORD *)*v20;
                                                v37 = v13;
                                                do
                                                {
                                                  v38 = *v35++;
                                                  *v36 = *v36 & ~v34 | v38 & v34;
                                                  ++v36;
                                                  --v37;
                                                }
                                                while (v37);
                                                v35 = (unint64_t *)*v93;
                                              }
                                              v75 = sub_2341617E0(v35, (uint64_t *)*v22, (uint64_t *)*v91, v13);
                                              v39 = v75
                                                  - sub_234161E5C(*v90, (unint64_t *)*v93, *(unint64_t **)a4, v13);
                                              v40 = (unint64_t *)*v93;
                                              v76 = v39;
                                              if ((_DWORD)v13)
                                              {
                                                v41 = *v90;
                                                v42 = v13;
                                                do
                                                {
                                                  v43 = *v41++;
                                                  *v40 = v43 & ~v39 | *v40 & v39;
                                                  ++v40;
                                                  --v42;
                                                }
                                                while (v42);
                                                v44 = (_QWORD *)*v22;
                                                v45 = (unint64_t *)*v93;
                                                v46 = v13;
                                                do
                                                {
                                                  v47 = *v45++;
                                                  *v44 = *v44 & ~v86 | v47 & v86;
                                                  ++v44;
                                                  --v46;
                                                }
                                                while (v46);
                                                v48 = (uint64_t *)*v91;
                                                v49 = (unint64_t *)*v93;
                                                v50 = v13;
                                                v51 = v19;
                                                do
                                                {
                                                  v52 = *v49++;
                                                  *v48 = *v48 & ~v82 | v52 & v82;
                                                  ++v48;
                                                  --v50;
                                                }
                                                while (v50);
                                                v40 = (unint64_t *)*v93;
                                                v53 = (uint64_t **)v94;
                                              }
                                              else
                                              {
                                                v53 = (uint64_t **)v94;
                                                v51 = v19;
                                              }
                                              sub_2341617E0(v40, (uint64_t *)*v92, *v53, v51);
                                              sub_234161E5C(*v90, (unint64_t *)*v93, *(unint64_t **)a3, v51);
                                              v54 = (unint64_t *)*v93;
                                              if ((_DWORD)v51)
                                              {
                                                v55 = *v90;
                                                v56 = v51;
                                                do
                                                {
                                                  v57 = *v55++;
                                                  *v54 = v57 & ~v76 | *v54 & v76;
                                                  ++v54;
                                                  --v56;
                                                }
                                                while (v56);
                                                v58 = (uint64_t *)*v92;
                                                v59 = (unint64_t *)*v93;
                                                v60 = v51;
                                                do
                                                {
                                                  v61 = *v59++;
                                                  *v58 = *v58 & ~v86 | v61 & v86;
                                                  ++v58;
                                                  --v60;
                                                }
                                                while (v60);
                                                v62 = (_QWORD *)*v94;
                                                v63 = (unint64_t *)*v93;
                                                do
                                                {
                                                  v64 = *v63++;
                                                  *v62 = *v62 & ~v82 | v64 & v82;
                                                  ++v62;
                                                  --v51;
                                                }
                                                while (v51);
                                                v54 = (unint64_t *)*v93;
                                              }
                                              v83 = (*(_QWORD *)*v20 & 1) - 1;
                                              v87 = **v89;
                                              sub_234168048((uint64_t *)*v20, v83, (uint64_t *)v54, v13);
                                              v77 = (-(*(_QWORD *)*v92 & 1) | -(*(_QWORD *)*v22 & 1)) & v83;
                                              v72 = sub_2341680BC((uint64_t *)*v22, v77, *(uint64_t **)a4, (uint64_t *)*v93, v13);
                                              v78 = sub_2341680BC((uint64_t *)*v92, v77, *(uint64_t **)a3, (uint64_t *)*v93, v19);
                                              v71 = (_QWORD *)*v22;
                                              sub_234168048((uint64_t *)*v22, v83, (uint64_t *)*v93, v13);
                                              if ((_DWORD)v13)
                                                v71[v70] |= (unint64_t)(v72 & v83) << 63;
                                              v73 = (uint64_t *)*v92;
                                              sub_234168048((uint64_t *)*v92, v83, (uint64_t *)*v93, v19);
                                              if (v19)
                                                v73[v69] |= (unint64_t)(v78 & v83) << 63;
                                              v88 = (v87 & 1) - 1;
                                              sub_234168048((uint64_t *)*v89, v88, (uint64_t *)*v93, v13);
                                              v65 = (-(*(_QWORD *)*v94 & 1) | -(*(_QWORD *)*v91 & 1)) & v88;
                                              v79 = sub_2341680BC((uint64_t *)*v91, v65, *(uint64_t **)a4, (uint64_t *)*v93, v13);
                                              v84 = sub_2341680BC((uint64_t *)*v94, v65, *(uint64_t **)a3, (uint64_t *)*v93, v19);
                                              v74 = (uint64_t *)*v91;
                                              sub_234168048((uint64_t *)*v91, v88, (uint64_t *)*v93, v13);
                                              if ((_DWORD)v13)
                                                v74[v70] |= (unint64_t)(v79 & v88) << 63;
                                              v80 = (_QWORD *)*v94;
                                              sub_234168048((uint64_t *)*v94, v88, (uint64_t *)*v93, v19);
                                              if (v19)
                                                v80[v69] |= (unint64_t)(v84 & v88) << 63;
                                              v27 = v81 + 1;
                                            }
                                            while (v81 + 1 != v68);
                                          }
                                          if (!sub_234162B4C((unsigned int *)v20))
                                          {
                                            *a2 = 1;
                                            v25 = 112;
                                            v26 = 322;
                                            goto LABEL_83;
                                          }
                                          result = sub_234162060((void **)a1, (uint64_t)v22) != 0;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_85:
  if (!*(_BYTE *)(a5 + 40))
  {
    v66 = *(_QWORD *)(a5 + 8);
    v67 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v67;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v66 + 8 * v67);
  }
  return result;
}

uint64_t sub_234167724(void **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13[3];

  *a2 = 0;
  if (*(_DWORD *)(a3 + 16) || (v10 = a4 + 24, (int)sub_234162A28(a3, a4 + 24) >= 0))
  {
    sub_2341579B4(3, 0, 107, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/gcd.c", 334);
    return 0;
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    if (sub_234167838((uint64_t)v13, 1uLL, v10)
      && sub_23416583C((uint64_t)a1, (uint64_t)v13, a3, a4, a5)
      && sub_2341668FC(a1, a2, (uint64_t)a1, v10, a5))
    {
      v11 = sub_23416583C((uint64_t)a1, (uint64_t)v13, (uint64_t)a1, a4, a5);
    }
    else
    {
      v11 = 0;
    }
    sub_234161FC4(v13);
  }
  return v11;
}

uint64_t sub_234167838(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_23416171C((_QWORD **)a1, *(int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = sub_23416BF24(*(char **)a1, a2, *(unint64_t **)a3, *(int *)(a3 + 8), (uint64_t)&unk_2342E2258);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 8);
      return 1;
    }
  }
  return result;
}

uint64_t sub_2341678A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_234162DC8((_QWORD *)a4);
  result = (uint64_t)sub_234162E68(a4);
  if (result)
  {
    v11 = result;
    result = (uint64_t)sub_234162060((void **)result, a3);
    if (result)
    {
      result = sub_234161AB0(v11, 2uLL);
      if ((_DWORD)result)
        result = sub_2341652E0(a1, a2, v11, a3, a4, a5) != 0;
    }
  }
  if (!*(_BYTE *)(a4 + 40))
  {
    v12 = *(_QWORD *)(a4 + 8);
    v13 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v13;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v12 + 8 * v13);
  }
  return result;
}

void **sub_234167950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_234162DC8((_QWORD *)a4);
  result = (void **)sub_234162E68(a4);
  if (result)
  {
    v11 = (uint64_t)result;
    result = sub_234162060(result, a3);
    if (result)
    {
      result = (void **)sub_234161AB0(v11, 2uLL);
      if ((_DWORD)result)
        result = (void **)sub_234166004(a1, a2, v11, a3, a4, a5);
    }
  }
  if (!*(_BYTE *)(a4 + 40))
  {
    v12 = *(_QWORD *)(a4 + 8);
    v13 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v13;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v12 + 8 * v13);
  }
  return result;
}

uint64_t sub_2341679F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = sub_234167A54((uint64_t)a1, &v6, a2, a3, a4);
  if ((_DWORD)result)
    return sub_2341634F4((uint64_t)a1, a1, v6);
  return result;
}

uint64_t sub_234167A54(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t result;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;

  if (*(_DWORD *)(a3 + 8) <= *(_DWORD *)(a4 + 8))
    v7 = *(_DWORD *)(a4 + 8);
  else
    v7 = *(_DWORD *)(a3 + 8);
  if (v7)
  {
    sub_234162DC8((_QWORD *)a5);
    v11 = sub_234162E68(a5);
    v12 = sub_234162E68(a5);
    v13 = sub_234162E68(a5);
    result = 0;
    if (v11)
    {
      if (v12)
      {
        if (v13)
        {
          result = (uint64_t)sub_234162060((void **)v11, a3);
          if (result)
          {
            result = (uint64_t)sub_234162060((void **)v12, a4);
            if (result)
            {
              result = sub_234162474((uint64_t)v11, v7);
              if ((_DWORD)result)
              {
                result = sub_234162474((uint64_t)v12, v7);
                if ((_DWORD)result)
                {
                  result = sub_234162474((uint64_t)v13, v7);
                  if ((_DWORD)result)
                  {
                    v15 = *(_DWORD *)(a3 + 8);
                    v16 = (*(_DWORD *)(a4 + 8) + v15) << 6;
                    if (v16 >= v15 << 6)
                    {
                      v37 = a2;
                      if (v16)
                      {
                        v17 = 0;
                        v18 = 0;
                        v38 = (*(_DWORD *)(a4 + 8) + v15) << 6;
                        do
                        {
                          v19 = ((uint64_t)(*(_QWORD *)*v11 << 63) >> 63) & -(*(_QWORD *)*v12 & 1);
                          v20 = sub_234161E5C((unint64_t *)*v13, (unint64_t *)*v11, (unint64_t *)*v12, v7);
                          v21 = (_QWORD *)*v11;
                          v22 = (unint64_t *)*v13;
                          v23 = v7;
                          do
                          {
                            v24 = *v22++;
                            *v21 = *v21 & ~((v20 - 1) & v19) | v24 & (v20 - 1) & v19;
                            ++v21;
                            --v23;
                          }
                          while (v23);
                          v25 = -(uint64_t)v20;
                          sub_234161E5C((unint64_t *)*v13, (unint64_t *)*v12, (unint64_t *)*v11, v7);
                          v26 = (_QWORD *)*v12;
                          v27 = (unint64_t *)*v13;
                          v28 = v7;
                          do
                          {
                            v29 = *v27++;
                            *v26 = *v26 & ~(v19 & v25) | v29 & v19 & v25;
                            ++v26;
                            --v28;
                          }
                          while (v28);
                          v30 = *(_QWORD *)*v12 & 1;
                          v31 = (*(_QWORD *)*v11 & 1) - 1;
                          v32 = v30 - 1;
                          v18 -= (v30 - 1) & v31;
                          sub_234168048((uint64_t *)*v11, v31, (uint64_t *)*v13, v7);
                          sub_234168048((uint64_t *)*v12, v32, (uint64_t *)*v13, v7);
                          ++v17;
                        }
                        while (v17 != v38);
                      }
                      else
                      {
                        v18 = 0;
                      }
                      v33 = 0;
                      if ((unint64_t)v7 <= 1)
                        v34 = 1;
                      else
                        v34 = v7;
                      do
                      {
                        *(_QWORD *)(*v12 + 8 * v33) |= *(_QWORD *)(*v11 + 8 * v33);
                        ++v33;
                      }
                      while (v34 != v33);
                      *v37 = v18;
                      result = sub_2341622B0(a1, (const void *)*v12, v7);
                    }
                    else
                    {
                      sub_2341579B4(3, 0, 102, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/gcd_extra.c", 78);
                      result = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (!*(_BYTE *)(a5 + 40))
    {
      v35 = *(_QWORD *)(a5 + 8);
      v36 = *(_QWORD *)(a5 + 16) - 1;
      *(_QWORD *)(a5 + 16) = v36;
      *(_QWORD *)(a5 + 32) = *(_QWORD *)(v35 + 8 * v36);
    }
  }
  else
  {
    *a2 = 0;
    *(_DWORD *)(a1 + 16) = 0;
    result = 1;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_234167D24(_BOOL4 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  sub_234162DC8((_QWORD *)a4);
  result = (uint64_t)sub_234162E68(a4);
  if (result)
  {
    v9 = (unsigned int *)result;
    v18 = 0;
    result = sub_234167A54(result, &v18, a2, a3, a4);
    if ((_DWORD)result)
    {
      v10 = v9[2];
      if ((_DWORD)v10)
      {
        v11 = **(_QWORD **)v9 ^ 1 | v18;
        if ((int)v10 >= 2)
        {
          v12 = (uint64_t *)(*(_QWORD *)v9 + 8);
          v13 = v10 - 1;
          do
          {
            v14 = *v12++;
            v11 |= v14;
            --v13;
          }
          while (v13);
        }
        v15 = v11 == 0;
      }
      else
      {
        v15 = 0;
      }
      *a1 = v15;
      result = 1;
    }
  }
  if (!*(_BYTE *)(a4 + 40))
  {
    v16 = *(_QWORD *)(a4 + 8);
    v17 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v17;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v16 + 8 * v17);
  }
  return result;
}

uint64_t sub_234167E08(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  sub_234162DC8((_QWORD *)a4);
  result = (uint64_t)sub_234162E68(a4);
  if (result)
  {
    v9 = result;
    result = sub_234167EE8((uint64_t)a1, a2, a3, a4);
    if ((_DWORD)result)
    {
      v12 = 0;
      result = sub_234167A54(v9, &v12, a2, a3, a4);
      if ((_DWORD)result)
      {
        result = sub_234163A0C(a1, 0, (uint64_t)a1, v9, 0, a4);
        if ((_DWORD)result)
          result = sub_234167F30((uint64_t)a1, (uint64_t)a1, v12, a4);
      }
    }
  }
  if (!*(_BYTE *)(a4 + 40))
  {
    v10 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v11;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v10 + 8 * v11);
  }
  return result;
}

uint64_t sub_234167EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(_DWORD *)(a2 + 16) && !*(_DWORD *)(a3 + 16))
    return sub_234169FE4(a1, a2, a3, a4);
  sub_2341579B4(3, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/mul.c", 524);
  return 0;
}

uint64_t sub_234167F30(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t *v8;
  char **v9;
  int v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_234162DC8((_QWORD *)a4);
  v8 = sub_234162E68(a4);
  if (v8
    && (v9 = (char **)v8, sub_234162060((void **)a1, a2))
    && sub_23416171C((_QWORD **)v9, *(int *)(a1 + 8)))
  {
    v10 = *(_DWORD *)(a1 + 8);
    v11 = 1;
    if (v10)
    {
      v12 = 0;
      v13 = v10 << 6;
      do
      {
        sub_23416C30C(*v9, *(_QWORD *)a1, 1 << v12, *(int *)(a1 + 8));
        v14 = *(int *)(a1 + 8);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD **)a1;
          v16 = *v9;
          do
          {
            v17 = *(_QWORD *)v16;
            v16 += 8;
            *v15 = *v15 & (((a3 >> v12) & 1) - 1) | v17 & -(uint64_t)((a3 >> v12) & 1);
            ++v15;
            --v14;
          }
          while (v14);
        }
        ++v12;
      }
      while (v13 >> v12);
      v11 = 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (!*(_BYTE *)(a4 + 40))
  {
    v18 = *(_QWORD *)(a4 + 8);
    v19 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v19;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v18 + 8 * v19);
  }
  return v11;
}

uint64_t *sub_234168048(uint64_t *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  if (a4)
  {
    if (a4 == 1)
    {
      *a3 = (unint64_t)*result >> 1;
    }
    else
    {
      v4 = result + 1;
      v5 = a4 - 1;
      v6 = a3;
      do
      {
        *v6++ = *(__int128 *)(v4++ - 1) >> 1;
        --v5;
      }
      while (v5);
      a3[a4 - 1] = (unint64_t)result[a4 - 1] >> 1;
    }
    do
    {
      v7 = *a3++;
      *result = *result & ~a2 | v7 & a2;
      ++result;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t sub_2341680BC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;

  v5 = a5;
  v6 = a4;
  v8 = a1;
  for (i = sub_2341617E0(a4, a1, a3, a5); v5; --v5)
  {
    v10 = *v6++;
    *v8 = *v8 & ~a2 | v10 & a2;
    ++v8;
  }
  return i & a2;
}

uint64_t sub_23416812C(unint64_t *a1, unint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  if (!a3)
    return 0;
  if (a3 < 4)
  {
    v4 = 0;
    do
    {
LABEL_25:
      v27 = *a2++;
      v28 = (v27 * (unsigned __int128)a4) >> 64;
      v29 = v27 * a4;
      v6 = __CFADD__(*a1, v4);
      v30 = *a1 + v4;
      v31 = v6;
      v32 = v30 + v29;
      v4 = (__PAIR128__(v31, v30) + __PAIR128__(v28, v29)) >> 64;
      *a1++ = v32;
      --a3;
    }
    while (a3);
    return v4;
  }
  v4 = 0;
  do
  {
    v5 = a1[1];
    v6 = __CFADD__(*a1, v4);
    v7 = *a1 + v4;
    v8 = v6;
    v9 = __PAIR128__(v8, v7) + *a2 * (unsigned __int128)a4;
    *a1 = v9;
    v10 = a2[1];
    v11 = (v10 * (unsigned __int128)a4) >> 64;
    v12 = v10 * a4;
    v6 = __CFADD__(v12, v5);
    v13 = v12 + v5;
    if (v6)
      ++v11;
    v6 = __CFADD__(v13, *((_QWORD *)&v9 + 1));
    v14 = v13 + *((_QWORD *)&v9 + 1);
    if (v6)
      v15 = v11 + 1;
    else
      v15 = v11;
    a1[1] = v14;
    v16 = a2[2];
    v17 = a1[2];
    v18 = a1[3];
    v6 = __CFADD__(v16 * a4, v17);
    v19 = v16 * a4 + v17;
    v20 = (v16 * (unsigned __int128)a4) >> 64;
    if (v6)
      ++v20;
    v6 = __CFADD__(v19, v15);
    v21 = v19 + v15;
    if (v6)
      ++v20;
    a1[2] = v21;
    v22 = a2[3];
    v23 = (v22 * (unsigned __int128)a4) >> 64;
    v24 = v22 * a4;
    v6 = __CFADD__(v24, v18);
    v25 = v24 + v18;
    if (v6)
      ++v23;
    v6 = __CFADD__(v25, v20);
    v26 = v25 + v20;
    if (v6)
      v4 = v23 + 1;
    else
      v4 = v23;
    a1[3] = v26;
    a2 += 4;
    a1 += 4;
    a3 -= 4;
  }
  while (a3 >= 4);
  if (a3)
    goto LABEL_25;
  return v4;
}

_OWORD *sub_234168220(_OWORD *result, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;

  if (a3)
  {
    if (a3 < 4)
      goto LABEL_8;
    do
    {
      *result = *a2 * (unsigned __int128)*a2;
      result[1] = a2[1] * (unsigned __int128)a2[1];
      result[2] = a2[2] * (unsigned __int128)a2[2];
      result[3] = a2[3] * (unsigned __int128)a2[3];
      a2 += 4;
      result += 4;
      a3 -= 4;
    }
    while (a3 >= 4);
    if (a3)
    {
LABEL_8:
      do
      {
        v3 = *a2++;
        *result++ = v3 * (unsigned __int128)v3;
        --a3;
      }
      while (a3);
    }
  }
  return result;
}

_QWORD *sub_2341682A0(_QWORD *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int128 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int128 v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unsigned __int128 v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int128 v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL8 v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int128 v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BOOL8 v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unsigned __int128 v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unsigned __int128 v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL8 v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unsigned __int128 v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _BOOL8 v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unsigned __int128 v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _BOOL8 v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unsigned __int128 v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _BOOL8 v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unsigned __int128 v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unsigned __int128 v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _BOOL8 v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unsigned __int128 v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _BOOL8 v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unsigned __int128 v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unsigned __int128 v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _BOOL8 v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;

  v4 = *a3;
  v5 = *a2;
  v3 = ((unsigned __int128)*a3 * v5) >> 64;
  *result = *a3 * *a2;
  v6 = a2[1];
  v8 = *a3;
  v7 = a3[1];
  v9 = (__PAIR128__(v7, v4) * v5) >> 64;
  if (__CFADD__(v7 * *a2, v3))
    v10 = ((v7 * (unsigned __int128)*a2) >> 64) + 1;
  else
    v10 = (v7 * (unsigned __int128)*a2) >> 64;
  v11 = (v8 * (unsigned __int128)v6) >> 64;
  v12 = v8 * v6;
  v13 = __CFADD__(v12, v9);
  v14 = v12 + v9;
  if (v13)
    v15 = v11 + 1;
  else
    v15 = v11;
  result[1] = v14;
  v16 = a2[2];
  v17 = a3[1];
  v18 = (*a3 * (unsigned __int128)v16) >> 64;
  v19 = *a3 * v16;
  v13 = __CFADD__(v19, v15 + v10);
  v20 = v19 + v15 + v10;
  if (v13)
    v21 = v18 + 1;
  else
    v21 = v18;
  v13 = __CFADD__(__CFADD__(v15, v10), v21);
  v22 = __CFADD__(v15, v10) + v21;
  v23 = v13;
  v25 = *a2;
  v24 = a2[1];
  v26 = (v17 * (unsigned __int128)v24) >> 64;
  v27 = v17 * v24;
  v13 = __CFADD__(v20, v27);
  v28 = v20 + v27;
  if (v13)
    v29 = v26 + 1;
  else
    v29 = v26;
  v13 = __CFADD__(v22, v29);
  v30 = v22 + v29;
  v31 = v13;
  v32 = a3[2];
  v33 = (v32 * (unsigned __int128)v25) >> 64;
  v34 = v32 * v25;
  v13 = __CFADD__(v28, v34);
  v35 = v28 + v34;
  if (v13)
    v36 = v33 + 1;
  else
    v36 = v33;
  v13 = __CFADD__(v30, v36);
  v37 = v30 + v36;
  v38 = v23 + v13 + v31;
  result[2] = v35;
  v39 = a2[1];
  v41 = a3[2];
  v40 = a3[3];
  v42 = v40 * *a2;
  v13 = __CFADD__(v42, v37);
  v43 = v42 + v37;
  if (v13)
    v44 = ((v40 * (unsigned __int128)*a2) >> 64) + 1;
  else
    v44 = (v40 * (unsigned __int128)*a2) >> 64;
  v45 = v38 + v44;
  v46 = (v41 * (unsigned __int128)v39) >> 64;
  v47 = v41 * v39;
  v13 = __CFADD__(v43, v47);
  v48 = v43 + v47;
  if (v13)
    v49 = v46 + 1;
  else
    v49 = v46;
  v13 = __CFADD__(v45, v49);
  v50 = v45 + v49;
  v51 = v13;
  if (__CFADD__(v38, v44))
    v52 = v51 + 1;
  else
    v52 = v51;
  v53 = a2[2];
  v54 = a2[3];
  v56 = *a3;
  v55 = a3[1];
  v57 = (v55 * (unsigned __int128)v53) >> 64;
  v58 = v55 * v53;
  v13 = __CFADD__(v48, v58);
  v59 = v48 + v58;
  if (v13)
    v60 = v57 + 1;
  else
    v60 = v57;
  v13 = __CFADD__(v50, v60);
  v61 = v50 + v60;
  v62 = v13;
  v63 = (v56 * (unsigned __int128)v54) >> 64;
  v64 = v56 * v54;
  v13 = __CFADD__(v59, v64);
  v65 = v59 + v64;
  if (v13)
    v66 = v63 + 1;
  else
    v66 = v63;
  v67 = __PAIR128__(v52, v61) + __PAIR128__(v62, v66);
  result[3] = v65;
  v68 = a3[1];
  v69 = *a3 * a2[4] + v67;
  v70 = *((_QWORD *)&v67 + 1) + v67;
  v71 = __CFADD__(*((_QWORD *)&v67 + 1), (_QWORD)v67);
  v73 = a2[2];
  v72 = a2[3];
  v74 = (v68 * (unsigned __int128)v72) >> 64;
  v75 = v68 * v72;
  v13 = __CFADD__(v69, v75);
  v76 = v69 + v75;
  if (v13)
    v77 = v74 + 1;
  else
    v77 = v74;
  v13 = __CFADD__(v70, v77);
  v78 = v70 + v77;
  v79 = v13;
  v80 = a3[2];
  v81 = a3[3];
  v82 = (v80 * (unsigned __int128)v73) >> 64;
  v83 = v80 * v73;
  v13 = __CFADD__(v76, v83);
  v84 = v76 + v83;
  if (v13)
    v85 = v82 + 1;
  else
    v85 = v82;
  v13 = __CFADD__(v78, v85);
  v86 = v78 + v85;
  v87 = v71 + v13 + v79;
  v89 = *a2;
  v88 = a2[1];
  v90 = (v81 * (unsigned __int128)v88) >> 64;
  v91 = v81 * v88;
  v13 = __CFADD__(v84, v91);
  v92 = v84 + v91;
  if (v13)
    v93 = v90 + 1;
  else
    v93 = v90;
  v13 = __CFADD__(v86, v93);
  v94 = v86 + v93;
  v95 = v13;
  v96 = a3[4];
  v97 = (v96 * (unsigned __int128)v89) >> 64;
  v98 = v96 * v89;
  v13 = __CFADD__(v92, v98);
  v99 = v92 + v98;
  if (v13)
    v100 = v97 + 1;
  else
    v100 = v97;
  v101 = __PAIR128__(v87, v94) + __PAIR128__(v95, v100);
  result[4] = v99;
  v102 = a2[1];
  v103 = a3[4];
  v104 = a3[5] * *a2 + v101;
  v105 = *((_QWORD *)&v101 + 1) + v101;
  v106 = (v103 * (unsigned __int128)v102) >> 64;
  v107 = v103 * v102;
  v13 = __CFADD__(v104, v107);
  v108 = v104 + v107;
  if (v13)
    v109 = v106 + 1;
  else
    v109 = v106;
  v13 = __CFADD__(v105, v109);
  v110 = v105 + v109;
  v111 = v13;
  if (__CFADD__(*((_QWORD *)&v101 + 1), (_QWORD)v101))
    v112 = v111 + 1;
  else
    v112 = v111;
  v113 = a2[2];
  v114 = a2[3];
  v116 = a3[2];
  v115 = a3[3];
  v117 = (v115 * (unsigned __int128)v113) >> 64;
  v118 = v115 * v113;
  v13 = __CFADD__(v108, v118);
  v119 = v108 + v118;
  if (v13)
    v120 = v117 + 1;
  else
    v120 = v117;
  v13 = __CFADD__(v110, v120);
  v121 = v110 + v120;
  v122 = v13;
  v123 = (v116 * (unsigned __int128)v114) >> 64;
  v124 = v116 * v114;
  v13 = __CFADD__(v119, v124);
  v125 = v119 + v124;
  if (v13)
    v126 = v123 + 1;
  else
    v126 = v123;
  v127 = __PAIR128__(v112, v121) + __PAIR128__(v122, v126);
  v128 = a2[4];
  v129 = a2[5];
  v131 = *a3;
  v130 = a3[1];
  v132 = (v130 * (unsigned __int128)v128) >> 64;
  v133 = v130 * v128;
  v13 = __CFADD__(v125, v133);
  v134 = v125 + v133;
  if (v13)
    v135 = v132 + 1;
  else
    v135 = v132;
  v136 = __CFADD__((_QWORD)v127, v135);
  v137 = (v131 * (unsigned __int128)v129) >> 64;
  v138 = v131 * v129;
  v13 = __CFADD__(v134, v138);
  v139 = v134 + v138;
  if (v13)
    v140 = v137 + 1;
  else
    v140 = v137;
  v141 = v127 + __PAIR128__(v136, v140);
  result[5] = v139;
  v142 = a3[1];
  v143 = *a3 * a2[6] + v141;
  v144 = *((_QWORD *)&v141 + 1) + v141;
  v145 = __CFADD__(*((_QWORD *)&v141 + 1), (_QWORD)v141);
  v147 = a2[4];
  v146 = a2[5];
  v148 = (v142 * (unsigned __int128)v146) >> 64;
  v149 = v142 * v146;
  v13 = __CFADD__(v143, v149);
  v150 = v143 + v149;
  if (v13)
    v151 = v148 + 1;
  else
    v151 = v148;
  v13 = __CFADD__(v144, v151);
  v152 = v144 + v151;
  v153 = v13;
  v154 = a3[2];
  v155 = a3[3];
  v156 = (v154 * (unsigned __int128)v147) >> 64;
  v157 = v154 * v147;
  v13 = __CFADD__(v150, v157);
  v158 = v150 + v157;
  if (v13)
    v159 = v156 + 1;
  else
    v159 = v156;
  v13 = __CFADD__(v152, v159);
  v160 = v152 + v159;
  v161 = v145 + v13 + v153;
  v163 = a2[2];
  v162 = a2[3];
  v164 = (v155 * (unsigned __int128)v162) >> 64;
  v165 = v155 * v162;
  v13 = __CFADD__(v158, v165);
  v166 = v158 + v165;
  if (v13)
    v167 = v164 + 1;
  else
    v167 = v164;
  v13 = __CFADD__(v160, v167);
  v168 = v160 + v167;
  v169 = v13;
  v170 = a3[4];
  v171 = a3[5];
  v172 = (v170 * (unsigned __int128)v163) >> 64;
  v173 = v170 * v163;
  v13 = __CFADD__(v166, v173);
  v174 = v166 + v173;
  if (v13)
    v175 = v172 + 1;
  else
    v175 = v172;
  v176 = __PAIR128__(v161, v168) + __PAIR128__(v169, v175);
  v178 = *a2;
  v177 = a2[1];
  v179 = (v171 * (unsigned __int128)v177) >> 64;
  v180 = v171 * v177;
  v13 = __CFADD__(v174, v180);
  v181 = v174 + v180;
  if (v13)
    v182 = v179 + 1;
  else
    v182 = v179;
  v183 = __CFADD__((_QWORD)v176, v182);
  v184 = a3[6];
  v185 = (v184 * (unsigned __int128)v178) >> 64;
  v186 = v184 * v178;
  v13 = __CFADD__(v181, v186);
  v187 = v181 + v186;
  if (v13)
    v188 = v185 + 1;
  else
    v188 = v185;
  v189 = v176 + __PAIR128__(v183, v188);
  result[6] = v187;
  v190 = a2[1];
  v191 = a3[6];
  v192 = a3[7] * *a2 + v189;
  v193 = *((_QWORD *)&v189 + 1) + v189;
  v194 = (v191 * (unsigned __int128)v190) >> 64;
  v195 = v191 * v190;
  v13 = __CFADD__(v192, v195);
  v196 = v192 + v195;
  if (v13)
    v197 = v194 + 1;
  else
    v197 = v194;
  v13 = __CFADD__(v193, v197);
  v198 = v193 + v197;
  v199 = v13;
  if (__CFADD__(*((_QWORD *)&v189 + 1), (_QWORD)v189))
    v200 = v199 + 1;
  else
    v200 = v199;
  v201 = a2[2];
  v202 = a2[3];
  v204 = a3[4];
  v203 = a3[5];
  v205 = (v203 * (unsigned __int128)v201) >> 64;
  v206 = v203 * v201;
  v13 = __CFADD__(v196, v206);
  v207 = v196 + v206;
  if (v13)
    v208 = v205 + 1;
  else
    v208 = v205;
  v13 = __CFADD__(v198, v208);
  v209 = v198 + v208;
  v210 = v13;
  v211 = (v204 * (unsigned __int128)v202) >> 64;
  v212 = v204 * v202;
  v13 = __CFADD__(v207, v212);
  v213 = v207 + v212;
  if (v13)
    v214 = v211 + 1;
  else
    v214 = v211;
  v215 = __PAIR128__(v200, v209) + __PAIR128__(v210, v214);
  v216 = a2[4];
  v217 = a2[5];
  v219 = a3[2];
  v218 = a3[3];
  v220 = (v218 * (unsigned __int128)v216) >> 64;
  v221 = v218 * v216;
  v13 = __CFADD__(v213, v221);
  v222 = v213 + v221;
  if (v13)
    v223 = v220 + 1;
  else
    v223 = v220;
  v224 = __CFADD__((_QWORD)v215, v223);
  v225 = (v219 * (unsigned __int128)v217) >> 64;
  v226 = v219 * v217;
  v13 = __CFADD__(v222, v226);
  v227 = v222 + v226;
  if (v13)
    v228 = v225 + 1;
  else
    v228 = v225;
  v229 = v215 + __PAIR128__(v224, v228);
  v230 = a2[6];
  v231 = a2[7];
  v233 = *a3;
  v232 = a3[1];
  v234 = (v232 * (unsigned __int128)v230) >> 64;
  v235 = v232 * v230;
  v13 = __CFADD__(v227, v235);
  v236 = v227 + v235;
  if (v13)
    v237 = v234 + 1;
  else
    v237 = v234;
  v238 = __CFADD__((_QWORD)v229, v237);
  v239 = (v233 * (unsigned __int128)v231) >> 64;
  v240 = v233 * v231;
  v13 = __CFADD__(v236, v240);
  v241 = v236 + v240;
  if (v13)
    v242 = v239 + 1;
  else
    v242 = v239;
  v243 = v229 + __PAIR128__(v238, v242);
  result[7] = v241;
  v244 = a3[2];
  v245 = a3[1] * a2[7] + v243;
  v246 = *((_QWORD *)&v243 + 1) + v243;
  v247 = __CFADD__(*((_QWORD *)&v243 + 1), (_QWORD)v243);
  v249 = a2[5];
  v248 = a2[6];
  v250 = (v244 * (unsigned __int128)v248) >> 64;
  v251 = v244 * v248;
  v13 = __CFADD__(v245, v251);
  v252 = v245 + v251;
  if (v13)
    v253 = v250 + 1;
  else
    v253 = v250;
  v13 = __CFADD__(v246, v253);
  v254 = v246 + v253;
  v255 = v13;
  v256 = a3[3];
  v257 = a3[4];
  v258 = (v256 * (unsigned __int128)v249) >> 64;
  v259 = v256 * v249;
  v13 = __CFADD__(v252, v259);
  v260 = v252 + v259;
  if (v13)
    v261 = v258 + 1;
  else
    v261 = v258;
  v13 = __CFADD__(v254, v261);
  v262 = v254 + v261;
  v263 = v247 + v13 + v255;
  v265 = a2[3];
  v264 = a2[4];
  v266 = (v257 * (unsigned __int128)v264) >> 64;
  v267 = v257 * v264;
  v13 = __CFADD__(v260, v267);
  v268 = v260 + v267;
  if (v13)
    v269 = v266 + 1;
  else
    v269 = v266;
  v13 = __CFADD__(v262, v269);
  v270 = v262 + v269;
  v271 = v13;
  v272 = a3[5];
  v273 = a3[6];
  v274 = (v272 * (unsigned __int128)v265) >> 64;
  v275 = v272 * v265;
  v13 = __CFADD__(v268, v275);
  v276 = v268 + v275;
  if (v13)
    v277 = v274 + 1;
  else
    v277 = v274;
  v278 = __PAIR128__(v263, v270) + __PAIR128__(v271, v277);
  v280 = a2[1];
  v279 = a2[2];
  v281 = (v273 * (unsigned __int128)v279) >> 64;
  v282 = v273 * v279;
  v13 = __CFADD__(v276, v282);
  v283 = v276 + v282;
  if (v13)
    v284 = v281 + 1;
  else
    v284 = v281;
  v285 = __CFADD__((_QWORD)v278, v284);
  v286 = a3[7];
  v287 = (v286 * (unsigned __int128)v280) >> 64;
  v288 = v286 * v280;
  v13 = __CFADD__(v283, v288);
  v289 = v283 + v288;
  if (v13)
    v290 = v287 + 1;
  else
    v290 = v287;
  v291 = v278 + __PAIR128__(v285, v290);
  result[8] = v289;
  v292 = a2[3];
  v293 = a3[6];
  v294 = a3[7] * a2[2] + v291;
  v295 = *((_QWORD *)&v291 + 1) + v291;
  v296 = (v293 * (unsigned __int128)v292) >> 64;
  v297 = v293 * v292;
  v13 = __CFADD__(v294, v297);
  v298 = v294 + v297;
  if (v13)
    v299 = v296 + 1;
  else
    v299 = v296;
  v13 = __CFADD__(v295, v299);
  v300 = v295 + v299;
  v301 = v13;
  if (__CFADD__(*((_QWORD *)&v291 + 1), (_QWORD)v291))
    v302 = v301 + 1;
  else
    v302 = v301;
  v303 = a2[4];
  v304 = a2[5];
  v306 = a3[4];
  v305 = a3[5];
  v307 = (v305 * (unsigned __int128)v303) >> 64;
  v308 = v305 * v303;
  v13 = __CFADD__(v298, v308);
  v309 = v298 + v308;
  if (v13)
    v310 = v307 + 1;
  else
    v310 = v307;
  v13 = __CFADD__(v300, v310);
  v311 = v300 + v310;
  v312 = v13;
  v313 = (v306 * (unsigned __int128)v304) >> 64;
  v314 = v306 * v304;
  v13 = __CFADD__(v309, v314);
  v315 = v309 + v314;
  if (v13)
    v316 = v313 + 1;
  else
    v316 = v313;
  v317 = __PAIR128__(v302, v311) + __PAIR128__(v312, v316);
  v318 = a2[6];
  v319 = a2[7];
  v321 = a3[2];
  v320 = a3[3];
  v322 = (v320 * (unsigned __int128)v318) >> 64;
  v323 = v320 * v318;
  v13 = __CFADD__(v315, v323);
  v324 = v315 + v323;
  if (v13)
    v325 = v322 + 1;
  else
    v325 = v322;
  v326 = __CFADD__((_QWORD)v317, v325);
  v327 = (v321 * (unsigned __int128)v319) >> 64;
  v328 = v321 * v319;
  v13 = __CFADD__(v324, v328);
  v329 = v324 + v328;
  if (v13)
    v330 = v327 + 1;
  else
    v330 = v327;
  v331 = v317 + __PAIR128__(v326, v330);
  result[9] = v329;
  v332 = a3[4];
  v333 = a3[3] * a2[7] + v331;
  v334 = *((_QWORD *)&v331 + 1) + v331;
  v335 = __CFADD__(*((_QWORD *)&v331 + 1), (_QWORD)v331);
  v337 = a2[5];
  v336 = a2[6];
  v338 = (v332 * (unsigned __int128)v336) >> 64;
  v339 = v332 * v336;
  v13 = __CFADD__(v333, v339);
  v340 = v333 + v339;
  if (v13)
    v341 = v338 + 1;
  else
    v341 = v338;
  v13 = __CFADD__(v334, v341);
  v342 = v334 + v341;
  v343 = v13;
  v344 = a3[5];
  v345 = a3[6];
  v346 = (v344 * (unsigned __int128)v337) >> 64;
  v347 = v344 * v337;
  v13 = __CFADD__(v340, v347);
  v348 = v340 + v347;
  if (v13)
    v349 = v346 + 1;
  else
    v349 = v346;
  v13 = __CFADD__(v342, v349);
  v350 = v342 + v349;
  v351 = v335 + v13 + v343;
  v353 = a2[3];
  v352 = a2[4];
  v354 = (v345 * (unsigned __int128)v352) >> 64;
  v355 = v345 * v352;
  v13 = __CFADD__(v348, v355);
  v356 = v348 + v355;
  if (v13)
    v357 = v354 + 1;
  else
    v357 = v354;
  v13 = __CFADD__(v350, v357);
  v358 = v350 + v357;
  v359 = v13;
  v360 = a3[7];
  v361 = (v360 * (unsigned __int128)v353) >> 64;
  v362 = v360 * v353;
  v13 = __CFADD__(v356, v362);
  v363 = v356 + v362;
  if (v13)
    v364 = v361 + 1;
  else
    v364 = v361;
  v365 = __PAIR128__(v351, v358) + __PAIR128__(v359, v364);
  result[10] = v363;
  v366 = a2[5];
  v367 = a3[6];
  v368 = a3[7] * a2[4] + v365;
  v369 = *((_QWORD *)&v365 + 1) + v365;
  v370 = (v367 * (unsigned __int128)v366) >> 64;
  v371 = v367 * v366;
  v13 = __CFADD__(v368, v371);
  v372 = v368 + v371;
  if (v13)
    v373 = v370 + 1;
  else
    v373 = v370;
  v13 = __CFADD__(v369, v373);
  v374 = v369 + v373;
  v375 = v13;
  v376 = a2[6];
  v377 = a2[7];
  v379 = a3[4];
  v378 = a3[5];
  v380 = (v378 * (unsigned __int128)v376) >> 64;
  v381 = v378 * v376;
  if (__CFADD__(*((_QWORD *)&v365 + 1), (_QWORD)v365))
    ++v375;
  v13 = __CFADD__(v372, v381);
  v382 = v372 + v381;
  if (v13)
    v383 = v380 + 1;
  else
    v383 = v380;
  v13 = __CFADD__(v374, v383);
  v384 = v374 + v383;
  v385 = v13;
  v386 = (v379 * (unsigned __int128)v377) >> 64;
  v387 = v379 * v377;
  v13 = __CFADD__(v382, v387);
  v388 = v382 + v387;
  if (v13)
    v389 = v386 + 1;
  else
    v389 = v386;
  v390 = __PAIR128__(v375, v384) + __PAIR128__(v385, v389);
  result[11] = v388;
  v391 = a3[6];
  v392 = a3[5] * a2[7] + v390;
  v393 = *((_QWORD *)&v390 + 1) + v390;
  v394 = __CFADD__(*((_QWORD *)&v390 + 1), (_QWORD)v390);
  v396 = a2[5];
  v395 = a2[6];
  v397 = (v391 * (unsigned __int128)v395) >> 64;
  v398 = v391 * v395;
  v13 = __CFADD__(v392, v398);
  v399 = v392 + v398;
  if (v13)
    v400 = v397 + 1;
  else
    v400 = v397;
  v13 = __CFADD__(v393, v400);
  v401 = v393 + v400;
  v402 = v13;
  v403 = a3[7];
  v404 = (v403 * (unsigned __int128)v396) >> 64;
  v405 = v403 * v396;
  v13 = __CFADD__(v399, v405);
  v406 = v399 + v405;
  if (v13)
    v407 = v404 + 1;
  else
    v407 = v404;
  v13 = __CFADD__(v401, v407);
  v408 = v401 + v407;
  v409 = v394 + v13 + v402;
  result[12] = v406;
  v410 = a2[6];
  v411 = a2[7];
  v413 = a3[6];
  v412 = a3[7];
  v414 = (v412 * (unsigned __int128)v410) >> 64;
  v415 = v412 * v410;
  v13 = __CFADD__(v415, v408);
  v416 = v415 + v408;
  if (v13)
    v417 = v414 + 1;
  else
    v417 = v414;
  v418 = v409 + v417;
  v419 = (v413 * (unsigned __int128)v411) >> 64;
  v420 = v413 * v411;
  v13 = __CFADD__(v416, v420);
  v421 = v416 + v420;
  if (v13)
    v422 = v419 + 1;
  else
    v422 = v419;
  v13 = __CFADD__(v418, v422);
  v423 = v418 + v422;
  v424 = v13;
  result[13] = v421;
  v425 = a2[7];
  v426 = a3[7];
  v427 = (v426 * (unsigned __int128)v425) >> 64;
  v428 = v426 * v425;
  v13 = __CFADD__(v428, v423);
  v429 = v428 + v423;
  if (v13)
    v430 = v427 + 1;
  else
    v430 = v427;
  result[14] = v429;
  result[15] = v424 + __CFADD__(v409, v417) + v430;
  return result;
}

_QWORD *sub_2341689F8(_QWORD *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int128 v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v4 = *a3;
  v5 = *a2;
  v3 = ((unsigned __int128)*a3 * v5) >> 64;
  *result = *a3 * *a2;
  v6 = a2[1];
  v8 = *a3;
  v7 = a3[1];
  v9 = (__PAIR128__(v7, v4) * v5) >> 64;
  if (__CFADD__(v7 * *a2, v3))
    v10 = ((v7 * (unsigned __int128)*a2) >> 64) + 1;
  else
    v10 = (v7 * (unsigned __int128)*a2) >> 64;
  v11 = (v8 * (unsigned __int128)v6) >> 64;
  v12 = v8 * v6;
  v13 = __CFADD__(v12, v9);
  v14 = v12 + v9;
  if (v13)
    v15 = v11 + 1;
  else
    v15 = v11;
  result[1] = v14;
  v16 = a2[2];
  v17 = a3[1];
  v18 = (*a3 * (unsigned __int128)v16) >> 64;
  v19 = *a3 * v16;
  v13 = __CFADD__(v19, v15 + v10);
  v20 = v19 + v15 + v10;
  if (v13)
    v21 = v18 + 1;
  else
    v21 = v18;
  v13 = __CFADD__(__CFADD__(v15, v10), v21);
  v22 = __CFADD__(v15, v10) + v21;
  v23 = v13;
  v25 = *a2;
  v24 = a2[1];
  v26 = (v17 * (unsigned __int128)v24) >> 64;
  v27 = v17 * v24;
  v13 = __CFADD__(v20, v27);
  v28 = v20 + v27;
  if (v13)
    v29 = v26 + 1;
  else
    v29 = v26;
  v13 = __CFADD__(v22, v29);
  v30 = v22 + v29;
  v31 = v13;
  v32 = a3[2];
  v33 = (v32 * (unsigned __int128)v25) >> 64;
  v34 = v32 * v25;
  v13 = __CFADD__(v28, v34);
  v35 = v28 + v34;
  if (v13)
    v36 = v33 + 1;
  else
    v36 = v33;
  v13 = __CFADD__(v30, v36);
  v37 = v30 + v36;
  v38 = v23 + v13 + v31;
  result[2] = v35;
  v39 = a2[1];
  v41 = a3[2];
  v40 = a3[3];
  v42 = v40 * *a2;
  v13 = __CFADD__(v42, v37);
  v43 = v42 + v37;
  if (v13)
    v44 = ((v40 * (unsigned __int128)*a2) >> 64) + 1;
  else
    v44 = (v40 * (unsigned __int128)*a2) >> 64;
  v45 = v38 + v44;
  v46 = (v41 * (unsigned __int128)v39) >> 64;
  v47 = v41 * v39;
  v13 = __CFADD__(v43, v47);
  v48 = v43 + v47;
  if (v13)
    v49 = v46 + 1;
  else
    v49 = v46;
  v13 = __CFADD__(v45, v49);
  v50 = v45 + v49;
  v51 = v13;
  v13 = __CFADD__(v38, v44);
  v52 = a2[2];
  v53 = a2[3];
  v55 = *a3;
  v54 = a3[1];
  v56 = (v54 * (unsigned __int128)v52) >> 64;
  v57 = v54 * v52;
  if (v13)
    ++v51;
  v13 = __CFADD__(v48, v57);
  v58 = v48 + v57;
  if (v13)
    v59 = v56 + 1;
  else
    v59 = v56;
  v13 = __CFADD__(v50, v59);
  v60 = v50 + v59;
  v61 = v13;
  v62 = (v55 * (unsigned __int128)v53) >> 64;
  v63 = v55 * v53;
  v13 = __CFADD__(v58, v63);
  v64 = v58 + v63;
  if (v13)
    v65 = v62 + 1;
  else
    v65 = v62;
  v66 = __PAIR128__(v51, v60) + __PAIR128__(v61, v65);
  result[3] = v64;
  v67 = a3[2];
  v68 = a3[1] * a2[3] + v66;
  v69 = *((_QWORD *)&v66 + 1) + v66;
  v70 = __CFADD__(*((_QWORD *)&v66 + 1), (_QWORD)v66);
  v72 = a2[1];
  v71 = a2[2];
  v73 = (v67 * (unsigned __int128)v71) >> 64;
  v74 = v67 * v71;
  v13 = __CFADD__(v68, v74);
  v75 = v68 + v74;
  if (v13)
    v76 = v73 + 1;
  else
    v76 = v73;
  v13 = __CFADD__(v69, v76);
  v77 = v69 + v76;
  v78 = v13;
  v79 = a3[3];
  v80 = (v79 * (unsigned __int128)v72) >> 64;
  v81 = v79 * v72;
  v13 = __CFADD__(v75, v81);
  v82 = v75 + v81;
  if (v13)
    v83 = v80 + 1;
  else
    v83 = v80;
  v13 = __CFADD__(v77, v83);
  v84 = v77 + v83;
  v85 = v70 + v13 + v78;
  result[4] = v82;
  v86 = a2[2];
  v87 = a2[3];
  v89 = a3[2];
  v88 = a3[3];
  v90 = (v88 * (unsigned __int128)v86) >> 64;
  v91 = v88 * v86;
  v13 = __CFADD__(v91, v84);
  v92 = v91 + v84;
  if (v13)
    v93 = v90 + 1;
  else
    v93 = v90;
  v94 = v85 + v93;
  v95 = (v89 * (unsigned __int128)v87) >> 64;
  v96 = v89 * v87;
  v13 = __CFADD__(v92, v96);
  v97 = v92 + v96;
  if (v13)
    v98 = v95 + 1;
  else
    v98 = v95;
  v13 = __CFADD__(v94, v98);
  v99 = v94 + v98;
  v100 = v13;
  result[5] = v97;
  v101 = a2[3];
  v102 = a3[3];
  v103 = (v102 * (unsigned __int128)v101) >> 64;
  v104 = v102 * v101;
  v13 = __CFADD__(v104, v99);
  v105 = v104 + v99;
  if (v13)
    v106 = v103 + 1;
  else
    v106 = v103;
  result[6] = v105;
  result[7] = v100 + __CFADD__(v85, v93) + v106;
  return result;
}

_QWORD *sub_234168BD0(_QWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int128 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned __int128 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BOOL8 v106;
  uint64_t v107;
  unint64_t v108;
  unsigned __int128 v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL8 v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned __int128 v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _BOOL8 v142;
  uint64_t v143;
  unint64_t v144;
  unsigned __int128 v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unsigned __int128 v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _BOOL8 v176;
  uint64_t v177;
  unint64_t v178;
  unsigned __int128 v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BOOL8 v184;
  uint64_t v185;
  unsigned __int128 v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _BOOL8 v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unsigned __int128 v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BOOL8 v219;
  uint64_t v220;
  unint64_t v221;
  unsigned __int128 v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unsigned __int128 v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  _BOOL8 v252;
  uint64_t v253;
  unint64_t v254;
  unsigned __int128 v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _BOOL8 v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unsigned __int128 v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unsigned __int128 v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _BOOL8 v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;

  v2 = (*a2 * (unsigned __int128)*a2) >> 64;
  *result = *a2 * *a2;
  v3 = a2[1];
  v4 = (*a2 * (unsigned __int128)v3) >> 64;
  v5 = *a2 * v3;
  v6 = __CFADD__(v5, v2);
  v7 = v5 + v2;
  if (v6)
    v8 = v4 + 1;
  else
    v8 = v4;
  v6 = __CFADD__(v7, v5);
  v9 = v7 + v5;
  if (v6)
    v10 = v4 + 1;
  else
    v10 = v4;
  result[1] = v9;
  v12 = *a2;
  v11 = a2[1];
  v13 = (v11 * (unsigned __int128)v11) >> 64;
  v14 = v11 * v11;
  v6 = __CFADD__(v14, v10 + v8);
  v15 = v14 + v10 + v8;
  if (v6)
    v16 = v13 + 1;
  else
    v16 = v13;
  v6 = __CFADD__(__CFADD__(v10, v8), v16);
  v17 = __CFADD__(v10, v8) + v16;
  v18 = v6;
  v19 = a2[2];
  v20 = (v12 * (unsigned __int128)v19) >> 64;
  v21 = v12 * v19;
  v6 = __CFADD__(v15, v21);
  v22 = v15 + v21;
  if (v6)
    v23 = v20 + 1;
  else
    v23 = v20;
  v6 = __CFADD__(v17, v23);
  v24 = v17 + v23;
  v25 = v6;
  v6 = __CFADD__(v22, v21);
  v26 = v22 + v21;
  if (v6)
    v27 = v20 + 1;
  else
    v27 = v20;
  v6 = __CFADD__(v24, v27);
  v28 = v24 + v27;
  v29 = v18 + v6 + v25;
  result[2] = v26;
  v31 = a2[2];
  v30 = a2[3];
  v32 = a2[1];
  v33 = (*a2 * (unsigned __int128)v30) >> 64;
  v34 = *a2 * v30;
  v6 = __CFADD__(v34, v28);
  v35 = v34 + v28;
  if (v6)
    v36 = v33 + 1;
  else
    v36 = v33;
  v37 = v29 + v36;
  v6 = __CFADD__(v35, v34);
  v38 = v35 + v34;
  if (v6)
    v39 = v33 + 1;
  else
    v39 = v33;
  v6 = __CFADD__(v37, v39);
  v40 = v37 + v39;
  v41 = v6;
  if (__CFADD__(v29, v36))
    v42 = v41 + 1;
  else
    v42 = v41;
  v43 = (v32 * (unsigned __int128)v31) >> 64;
  v44 = v32 * v31;
  v6 = __CFADD__(v38, v44);
  v45 = v38 + v44;
  if (v6)
    v46 = v43 + 1;
  else
    v46 = v43;
  v6 = __CFADD__(v40, v46);
  v47 = v40 + v46;
  v48 = v6;
  v6 = __CFADD__(v45, v44);
  v49 = v45 + v44;
  if (v6)
    v50 = v43 + 1;
  else
    v50 = v43;
  v51 = __PAIR128__(v42, v47) + __PAIR128__(v48, v50);
  result[3] = v49;
  v52 = a2[3];
  v53 = a2[2] * a2[2] + v51;
  v54 = *((_QWORD *)&v51 + 1) + v51;
  v55 = __CFADD__(*((_QWORD *)&v51 + 1), (_QWORD)v51);
  v57 = *a2;
  v56 = a2[1];
  v58 = (v56 * (unsigned __int128)v52) >> 64;
  v59 = v56 * v52;
  v6 = __CFADD__(v53, v59);
  v60 = v53 + v59;
  if (v6)
    v61 = v58 + 1;
  else
    v61 = v58;
  v6 = __CFADD__(v54, v61);
  v62 = v54 + v61;
  v63 = v6;
  v6 = __CFADD__(v60, v59);
  v64 = v60 + v59;
  if (v6)
    v65 = v58 + 1;
  else
    v65 = v58;
  v6 = __CFADD__(v62, v65);
  v66 = v62 + v65;
  v67 = v55 + v6 + v63;
  v68 = a2[4];
  v69 = (v57 * (unsigned __int128)v68) >> 64;
  v70 = v57 * v68;
  v6 = __CFADD__(v64, v70);
  v71 = v64 + v70;
  if (v6)
    v72 = v69 + 1;
  else
    v72 = v69;
  v6 = __CFADD__(v66, v72);
  v73 = v66 + v72;
  v74 = v6;
  v6 = __CFADD__(v71, v70);
  v75 = v71 + v70;
  if (v6)
    v76 = v69 + 1;
  else
    v76 = v69;
  v77 = __PAIR128__(v67, v73) + __PAIR128__(v74, v76);
  result[4] = v75;
  v79 = a2[4];
  v78 = a2[5];
  v80 = a2[1];
  v81 = (*a2 * (unsigned __int128)v78) >> 64;
  v82 = *a2 * v78;
  v83 = v82 + v77;
  if (__CFADD__(v82, (_QWORD)v77))
    v84 = v81 + 1;
  else
    v84 = v81;
  v85 = *((_QWORD *)&v77 + 1) + v84;
  v6 = __CFADD__(v83, v82);
  v86 = v83 + v82;
  if (v6)
    v87 = v81 + 1;
  else
    v87 = v81;
  v6 = __CFADD__(v85, v87);
  v88 = v85 + v87;
  v89 = v6;
  if (__CFADD__(*((_QWORD *)&v77 + 1), v84))
    v90 = v89 + 1;
  else
    v90 = v89;
  v91 = (v80 * (unsigned __int128)v79) >> 64;
  v92 = v80 * v79;
  v6 = __CFADD__(v86, v92);
  v93 = v86 + v92;
  if (v6)
    v94 = v91 + 1;
  else
    v94 = v91;
  v6 = __CFADD__(v88, v94);
  v95 = v88 + v94;
  v96 = v6;
  v6 = __CFADD__(v93, v92);
  v97 = v93 + v92;
  if (v6)
    v98 = v91 + 1;
  else
    v98 = v91;
  v99 = __PAIR128__(v90, v95) + __PAIR128__(v96, v98);
  v101 = a2[2];
  v100 = a2[3];
  v102 = (v101 * (unsigned __int128)v100) >> 64;
  v103 = v101 * v100;
  v6 = __CFADD__(v97, v103);
  v104 = v97 + v103;
  if (v6)
    v105 = v102 + 1;
  else
    v105 = v102;
  v106 = __CFADD__((_QWORD)v99, v105);
  v6 = __CFADD__(v104, v103);
  v107 = v104 + v103;
  if (v6)
    v108 = v102 + 1;
  else
    v108 = v102;
  v109 = v99 + __PAIR128__(v106, v108);
  result[5] = v107;
  v110 = a2[2];
  v111 = a2[3] * a2[3] + v109;
  v112 = *((_QWORD *)&v109 + 1) + v109;
  v113 = __CFADD__(*((_QWORD *)&v109 + 1), (_QWORD)v109);
  v114 = a2[4];
  v115 = a2[5];
  v116 = (v110 * (unsigned __int128)v114) >> 64;
  v117 = v110 * v114;
  v6 = __CFADD__(v111, v117);
  v118 = v111 + v117;
  if (v6)
    v119 = v116 + 1;
  else
    v119 = v116;
  v6 = __CFADD__(v112, v119);
  v120 = v112 + v119;
  v121 = v6;
  v6 = __CFADD__(v118, v117);
  v122 = v118 + v117;
  if (v6)
    v123 = v116 + 1;
  else
    v123 = v116;
  v6 = __CFADD__(v120, v123);
  v124 = v120 + v123;
  v125 = v113 + v6 + v121;
  v127 = *a2;
  v126 = a2[1];
  v128 = (v126 * (unsigned __int128)v115) >> 64;
  v129 = v126 * v115;
  v6 = __CFADD__(v122, v129);
  v130 = v122 + v129;
  if (v6)
    v131 = v128 + 1;
  else
    v131 = v128;
  v6 = __CFADD__(v124, v131);
  v132 = v124 + v131;
  v133 = v6;
  v6 = __CFADD__(v130, v129);
  v134 = v130 + v129;
  if (v6)
    v135 = v128 + 1;
  else
    v135 = v128;
  v136 = __PAIR128__(v125, v132) + __PAIR128__(v133, v135);
  v137 = a2[6];
  v138 = (v127 * (unsigned __int128)v137) >> 64;
  v139 = v127 * v137;
  v6 = __CFADD__(v134, v139);
  v140 = v134 + v139;
  if (v6)
    v141 = v138 + 1;
  else
    v141 = v138;
  v142 = __CFADD__((_QWORD)v136, v141);
  v6 = __CFADD__(v140, v139);
  v143 = v140 + v139;
  if (v6)
    v144 = v138 + 1;
  else
    v144 = v138;
  v145 = v136 + __PAIR128__(v142, v144);
  result[6] = v143;
  v147 = a2[6];
  v146 = a2[7];
  v148 = a2[1];
  v149 = (*a2 * (unsigned __int128)v146) >> 64;
  v150 = *a2 * v146;
  v151 = v150 + v145;
  if (__CFADD__(v150, (_QWORD)v145))
    v152 = v149 + 1;
  else
    v152 = v149;
  v153 = *((_QWORD *)&v145 + 1) + v152;
  v6 = __CFADD__(v151, v150);
  v154 = v151 + v150;
  if (v6)
    v155 = v149 + 1;
  else
    v155 = v149;
  v6 = __CFADD__(v153, v155);
  v156 = v153 + v155;
  v157 = v6;
  if (__CFADD__(*((_QWORD *)&v145 + 1), v152))
    v158 = v157 + 1;
  else
    v158 = v157;
  v159 = (v148 * (unsigned __int128)v147) >> 64;
  v160 = v148 * v147;
  v6 = __CFADD__(v154, v160);
  v161 = v154 + v160;
  if (v6)
    v162 = v159 + 1;
  else
    v162 = v159;
  v6 = __CFADD__(v156, v162);
  v163 = v156 + v162;
  v164 = v6;
  v6 = __CFADD__(v161, v160);
  v165 = v161 + v160;
  if (v6)
    v166 = v159 + 1;
  else
    v166 = v159;
  v167 = __PAIR128__(v158, v163) + __PAIR128__(v164, v166);
  v169 = a2[4];
  v168 = a2[5];
  v170 = a2[2];
  v171 = a2[3];
  v172 = (v170 * (unsigned __int128)v168) >> 64;
  v173 = v170 * v168;
  v6 = __CFADD__(v165, v173);
  v174 = v165 + v173;
  if (v6)
    v175 = v172 + 1;
  else
    v175 = v172;
  v176 = __CFADD__((_QWORD)v167, v175);
  v6 = __CFADD__(v174, v173);
  v177 = v174 + v173;
  if (v6)
    v178 = v172 + 1;
  else
    v178 = v172;
  v179 = v167 + __PAIR128__(v176, v178);
  v180 = (v171 * (unsigned __int128)v169) >> 64;
  v181 = v171 * v169;
  v6 = __CFADD__(v177, v181);
  v182 = v177 + v181;
  if (v6)
    v183 = v180 + 1;
  else
    v183 = v180;
  v184 = __CFADD__((_QWORD)v179, v183);
  v6 = __CFADD__(v182, v181);
  v185 = v182 + v181;
  if (v6)
    ++v180;
  v186 = v179 + __PAIR128__(v184, v180);
  result[7] = v185;
  v187 = a2[3];
  v188 = a2[4] * a2[4] + v186;
  v189 = *((_QWORD *)&v186 + 1) + v186;
  v190 = __CFADD__(*((_QWORD *)&v186 + 1), (_QWORD)v186);
  v191 = a2[5];
  v192 = a2[6];
  v193 = (v187 * (unsigned __int128)v191) >> 64;
  v194 = v187 * v191;
  v6 = __CFADD__(v188, v194);
  v195 = v188 + v194;
  if (v6)
    v196 = v193 + 1;
  else
    v196 = v193;
  v6 = __CFADD__(v189, v196);
  v197 = v189 + v196;
  v198 = v6;
  v6 = __CFADD__(v195, v194);
  v199 = v195 + v194;
  if (v6)
    v200 = v193 + 1;
  else
    v200 = v193;
  v6 = __CFADD__(v197, v200);
  v201 = v197 + v200;
  v202 = v190 + v6 + v198;
  v204 = a2[1];
  v203 = a2[2];
  v205 = (v203 * (unsigned __int128)v192) >> 64;
  v206 = v203 * v192;
  v6 = __CFADD__(v199, v206);
  v207 = v199 + v206;
  if (v6)
    v208 = v205 + 1;
  else
    v208 = v205;
  v6 = __CFADD__(v201, v208);
  v209 = v201 + v208;
  v210 = v6;
  v6 = __CFADD__(v207, v206);
  v211 = v207 + v206;
  if (v6)
    v212 = v205 + 1;
  else
    v212 = v205;
  v213 = __PAIR128__(v202, v209) + __PAIR128__(v210, v212);
  v214 = a2[7];
  v215 = (v204 * (unsigned __int128)v214) >> 64;
  v216 = v204 * v214;
  v6 = __CFADD__(v211, v216);
  v217 = v211 + v216;
  if (v6)
    v218 = v215 + 1;
  else
    v218 = v215;
  v219 = __CFADD__((_QWORD)v213, v218);
  v6 = __CFADD__(v217, v216);
  v220 = v217 + v216;
  if (v6)
    v221 = v215 + 1;
  else
    v221 = v215;
  v222 = v213 + __PAIR128__(v219, v221);
  result[8] = v220;
  v224 = a2[6];
  v223 = a2[7];
  v225 = a2[2];
  v226 = a2[3];
  v227 = (v225 * (unsigned __int128)v223) >> 64;
  v228 = v225 * v223;
  v229 = v228 + v222;
  if (__CFADD__(v228, (_QWORD)v222))
    v230 = v227 + 1;
  else
    v230 = v227;
  v231 = *((_QWORD *)&v222 + 1) + v230;
  v6 = __CFADD__(v229, v228);
  v232 = v229 + v228;
  if (v6)
    v233 = v227 + 1;
  else
    v233 = v227;
  v6 = __CFADD__(v231, v233);
  v234 = v231 + v233;
  v235 = v6;
  if (__CFADD__(*((_QWORD *)&v222 + 1), v230))
    v236 = v235 + 1;
  else
    v236 = v235;
  v237 = (v226 * (unsigned __int128)v224) >> 64;
  v238 = v226 * v224;
  v6 = __CFADD__(v232, v238);
  v239 = v232 + v238;
  if (v6)
    v240 = v237 + 1;
  else
    v240 = v237;
  v6 = __CFADD__(v234, v240);
  v241 = v234 + v240;
  v242 = v6;
  v6 = __CFADD__(v239, v238);
  v243 = v239 + v238;
  if (v6)
    v244 = v237 + 1;
  else
    v244 = v237;
  v245 = __PAIR128__(v236, v241) + __PAIR128__(v242, v244);
  v247 = a2[4];
  v246 = a2[5];
  v248 = (v247 * (unsigned __int128)v246) >> 64;
  v249 = v247 * v246;
  v6 = __CFADD__(v243, v249);
  v250 = v243 + v249;
  if (v6)
    v251 = v248 + 1;
  else
    v251 = v248;
  v252 = __CFADD__((_QWORD)v245, v251);
  v6 = __CFADD__(v250, v249);
  v253 = v250 + v249;
  if (v6)
    v254 = v248 + 1;
  else
    v254 = v248;
  v255 = v245 + __PAIR128__(v252, v254);
  result[9] = v253;
  v256 = a2[6];
  v257 = a2[5] * a2[5] + v255;
  v258 = *((_QWORD *)&v255 + 1) + v255;
  v259 = __CFADD__(*((_QWORD *)&v255 + 1), (_QWORD)v255);
  v261 = a2[3];
  v260 = a2[4];
  v262 = (v260 * (unsigned __int128)v256) >> 64;
  v263 = v260 * v256;
  v6 = __CFADD__(v257, v263);
  v264 = v257 + v263;
  if (v6)
    v265 = v262 + 1;
  else
    v265 = v262;
  v6 = __CFADD__(v258, v265);
  v266 = v258 + v265;
  v267 = v6;
  v6 = __CFADD__(v264, v263);
  v268 = v264 + v263;
  if (v6)
    v269 = v262 + 1;
  else
    v269 = v262;
  v6 = __CFADD__(v266, v269);
  v270 = v266 + v269;
  v271 = v259 + v6 + v267;
  v272 = a2[7];
  v273 = (v261 * (unsigned __int128)v272) >> 64;
  v274 = v261 * v272;
  v6 = __CFADD__(v268, v274);
  v275 = v268 + v274;
  if (v6)
    v276 = v273 + 1;
  else
    v276 = v273;
  v6 = __CFADD__(v270, v276);
  v277 = v270 + v276;
  v278 = v6;
  v6 = __CFADD__(v275, v274);
  v279 = v275 + v274;
  if (v6)
    v280 = v273 + 1;
  else
    v280 = v273;
  v281 = __PAIR128__(v271, v277) + __PAIR128__(v278, v280);
  result[10] = v279;
  v283 = a2[6];
  v282 = a2[7];
  v284 = a2[4];
  v285 = a2[5];
  v286 = (v284 * (unsigned __int128)v282) >> 64;
  v287 = v284 * v282;
  v288 = v287 + v281;
  if (__CFADD__(v287, (_QWORD)v281))
    v289 = v286 + 1;
  else
    v289 = v286;
  v290 = *((_QWORD *)&v281 + 1) + v289;
  v6 = __CFADD__(v288, v287);
  v291 = v288 + v287;
  if (v6)
    v292 = v286 + 1;
  else
    v292 = v286;
  v6 = __CFADD__(v290, v292);
  v293 = v290 + v292;
  v294 = v6;
  if (__CFADD__(*((_QWORD *)&v281 + 1), v289))
    v295 = v294 + 1;
  else
    v295 = v294;
  v296 = (v285 * (unsigned __int128)v283) >> 64;
  v297 = v285 * v283;
  v6 = __CFADD__(v291, v297);
  v298 = v291 + v297;
  if (v6)
    v299 = v296 + 1;
  else
    v299 = v296;
  v6 = __CFADD__(v293, v299);
  v300 = v293 + v299;
  v301 = v6;
  v6 = __CFADD__(v298, v297);
  v302 = v298 + v297;
  if (v6)
    v303 = v296 + 1;
  else
    v303 = v296;
  v304 = __PAIR128__(v295, v300) + __PAIR128__(v301, v303);
  result[11] = v302;
  v305 = a2[5];
  v306 = a2[6] * a2[6] + v304;
  v307 = *((_QWORD *)&v304 + 1) + v304;
  v308 = __CFADD__(*((_QWORD *)&v304 + 1), (_QWORD)v304);
  v309 = a2[7];
  v310 = (v305 * (unsigned __int128)v309) >> 64;
  v311 = v305 * v309;
  v6 = __CFADD__(v306, v311);
  v312 = v306 + v311;
  if (v6)
    v313 = v310 + 1;
  else
    v313 = v310;
  v6 = __CFADD__(v307, v313);
  v314 = v307 + v313;
  v315 = v6;
  v6 = __CFADD__(v312, v311);
  v316 = v312 + v311;
  if (v6)
    v317 = v310 + 1;
  else
    v317 = v310;
  v6 = __CFADD__(v314, v317);
  v318 = v314 + v317;
  v319 = v308 + v6 + v315;
  result[12] = v316;
  v321 = a2[6];
  v320 = a2[7];
  v322 = (v321 * (unsigned __int128)v320) >> 64;
  v323 = v321 * v320;
  v6 = __CFADD__(v323, v318);
  v324 = v323 + v318;
  if (v6)
    v325 = v322 + 1;
  else
    v325 = v322;
  v326 = v319 + v325;
  v6 = __CFADD__(v324, v323);
  v327 = v324 + v323;
  if (v6)
    v328 = v322 + 1;
  else
    v328 = v322;
  v6 = __CFADD__(v326, v328);
  v329 = v326 + v328;
  v330 = v6;
  result[13] = v327;
  v331 = a2[7];
  v332 = (v331 * (unsigned __int128)v331) >> 64;
  v333 = v331 * v331;
  v6 = __CFADD__(v333, v329);
  v334 = v333 + v329;
  if (v6)
    v335 = v332 + 1;
  else
    v335 = v332;
  result[14] = v334;
  result[15] = v330 + __CFADD__(v319, v325) + v335;
  return result;
}

_QWORD *sub_2341691B8(_QWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v2 = (*a2 * (unsigned __int128)*a2) >> 64;
  *result = *a2 * *a2;
  v3 = a2[1];
  v4 = (*a2 * (unsigned __int128)v3) >> 64;
  v5 = *a2 * v3;
  v6 = __CFADD__(v5, v2);
  v7 = v5 + v2;
  if (v6)
    v8 = v4 + 1;
  else
    v8 = v4;
  v6 = __CFADD__(v7, v5);
  v9 = v7 + v5;
  if (v6)
    v10 = v4 + 1;
  else
    v10 = v4;
  result[1] = v9;
  v12 = *a2;
  v11 = a2[1];
  v13 = (v11 * (unsigned __int128)v11) >> 64;
  v14 = v11 * v11;
  v6 = __CFADD__(v14, v10 + v8);
  v15 = v14 + v10 + v8;
  if (v6)
    v16 = v13 + 1;
  else
    v16 = v13;
  v6 = __CFADD__(__CFADD__(v10, v8), v16);
  v17 = __CFADD__(v10, v8) + v16;
  v18 = v6;
  v19 = a2[2];
  v20 = (v12 * (unsigned __int128)v19) >> 64;
  v21 = v12 * v19;
  v6 = __CFADD__(v15, v21);
  v22 = v15 + v21;
  if (v6)
    v23 = v20 + 1;
  else
    v23 = v20;
  v6 = __CFADD__(v17, v23);
  v24 = v17 + v23;
  v25 = v6;
  v6 = __CFADD__(v22, v21);
  v26 = v22 + v21;
  if (v6)
    v27 = v20 + 1;
  else
    v27 = v20;
  v6 = __CFADD__(v24, v27);
  v28 = v24 + v27;
  v29 = v18 + v6 + v25;
  result[2] = v26;
  v31 = a2[2];
  v30 = a2[3];
  v32 = a2[1];
  v33 = (*a2 * (unsigned __int128)v30) >> 64;
  v34 = *a2 * v30;
  v6 = __CFADD__(v34, v28);
  v35 = v34 + v28;
  if (v6)
    v36 = v33 + 1;
  else
    v36 = v33;
  v37 = v29 + v36;
  v6 = __CFADD__(v35, v34);
  v38 = v35 + v34;
  if (v6)
    v39 = v33 + 1;
  else
    v39 = v33;
  v6 = __CFADD__(v37, v39);
  v40 = v37 + v39;
  v41 = v6;
  if (__CFADD__(v29, v36))
    v42 = v41 + 1;
  else
    v42 = v41;
  v43 = (v32 * (unsigned __int128)v31) >> 64;
  v44 = v32 * v31;
  v6 = __CFADD__(v38, v44);
  v45 = v38 + v44;
  if (v6)
    v46 = v43 + 1;
  else
    v46 = v43;
  v6 = __CFADD__(v40, v46);
  v47 = v40 + v46;
  v48 = v6;
  v6 = __CFADD__(v45, v44);
  v49 = v45 + v44;
  if (v6)
    v50 = v43 + 1;
  else
    v50 = v43;
  v51 = __PAIR128__(v42, v47) + __PAIR128__(v48, v50);
  result[3] = v49;
  v52 = a2[1];
  v53 = a2[2] * a2[2] + v51;
  v54 = *((_QWORD *)&v51 + 1) + v51;
  v55 = __CFADD__(*((_QWORD *)&v51 + 1), (_QWORD)v51);
  v56 = a2[3];
  v57 = (v52 * (unsigned __int128)v56) >> 64;
  v58 = v52 * v56;
  v6 = __CFADD__(v53, v58);
  v59 = v53 + v58;
  if (v6)
    v60 = v57 + 1;
  else
    v60 = v57;
  v6 = __CFADD__(v54, v60);
  v61 = v54 + v60;
  v62 = v6;
  v6 = __CFADD__(v59, v58);
  v63 = v59 + v58;
  if (v6)
    v64 = v57 + 1;
  else
    v64 = v57;
  v6 = __CFADD__(v61, v64);
  v65 = v61 + v64;
  v66 = v55 + v6 + v62;
  result[4] = v63;
  v68 = a2[2];
  v67 = a2[3];
  v69 = (v68 * (unsigned __int128)v67) >> 64;
  v70 = v68 * v67;
  v6 = __CFADD__(v70, v65);
  v71 = v70 + v65;
  if (v6)
    v72 = v69 + 1;
  else
    v72 = v69;
  v73 = v66 + v72;
  v6 = __CFADD__(v71, v70);
  v74 = v71 + v70;
  if (v6)
    v75 = v69 + 1;
  else
    v75 = v69;
  v6 = __CFADD__(v73, v75);
  v76 = v73 + v75;
  v77 = v6;
  result[5] = v74;
  v78 = a2[3];
  v79 = (v78 * (unsigned __int128)v78) >> 64;
  v80 = v78 * v78;
  v6 = __CFADD__(v80, v76);
  v81 = v80 + v76;
  if (v6)
    v82 = v79 + 1;
  else
    v82 = v79;
  result[6] = v81;
  result[7] = v77 + __CFADD__(v66, v72) + v82;
  return result;
}

uint64_t sub_234169338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  __int16 v5;
  uint64_t result;
  unint64_t *v9;
  unint64_t *v10;
  unsigned int *v11;
  int v12;
  int *v13;
  unsigned int v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(int *)(a2 + 8) < 1 || (**(_BYTE **)a2 & 1) == 0)
  {
    v4 = 104;
    v5 = 73;
LABEL_6:
    sub_2341579B4(3, 0, v4, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/jacobi.c", v5);
    return 4294967294;
  }
  if (*(_DWORD *)(a2 + 16))
  {
    v4 = 109;
    v5 = 79;
    goto LABEL_6;
  }
  sub_234162DC8((_QWORD *)a3);
  v9 = sub_234162E68(a3);
  v10 = sub_234162E68(a3);
  if (v10 && (v11 = (unsigned int *)v10, sub_234162060((void **)v9, a1)) && sub_234162060((void **)v11, a2))
  {
    v13 = (int *)(v9 + 1);
    v12 = *((_DWORD *)v9 + 2);
    if (v12)
    {
      v14 = 1;
      v15 = (unint64_t *)v11;
      while (1)
      {
        v16 = 0;
        v11 = (unsigned int *)v9;
        v9 = v15;
        v17 = *(uint64_t **)v11;
        v18 = v12;
        do
        {
          v19 = *v17++;
          v16 |= v19;
          --v18;
        }
        while (v18);
        if (!v16)
          break;
        for (i = 0; i >> 6 >= v12 || ((*(_QWORD *)(*(_QWORD *)v11 + 8 * (i >> 6)) >> i) & 1) == 0; ++i)
          ;
        if (!sub_23416371C((uint64_t)v11, (uint64_t)v11, i))
          goto LABEL_42;
        if ((i & 1) != 0)
        {
          if (*((_DWORD *)v9 + 2))
            v21 = *(_QWORD *)*v9;
          else
            LOBYTE(v21) = 0;
          v14 *= dword_2342E2238[v21 & 7];
        }
        v22 = *v13;
        if (v11[4])
        {
          if (v22)
            v23 = **(_QWORD **)v11;
          else
            LOBYTE(v23) = 0;
          LOBYTE(v24) = ~(_BYTE)v23;
        }
        else if (v22)
        {
          v24 = **(_QWORD **)v11;
        }
        else
        {
          LOBYTE(v24) = 0;
        }
        v13 = (int *)(v9 + 1);
        if (*((_DWORD *)v9 + 2))
          v25 = *(_QWORD *)*v9;
        else
          LOBYTE(v25) = 0;
        if (!sub_2341637E4((uint64_t)v9, (uint64_t)v9, (uint64_t)v11, a3))
          goto LABEL_42;
        if ((v24 & v25 & 2) != 0)
          v14 = -v14;
        v11[4] = 0;
        v12 = *v13;
        v15 = (unint64_t *)v11;
        if (!*v13)
          goto LABEL_47;
      }
      v11 = (unsigned int *)v15;
    }
    else
    {
      v14 = 1;
    }
LABEL_47:
    if (sub_234162B4C(v11))
      result = v14;
    else
      result = 0;
  }
  else
  {
LABEL_42:
    result = 4294967294;
  }
  if (!*(_BYTE *)(a3 + 40))
  {
    v26 = *(_QWORD *)(a3 + 8);
    v27 = *(_QWORD *)(a3 + 16) - 1;
    *(_QWORD *)(a3 + 16) = v27;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(v26 + 8 * v27);
  }
  return result;
}

double sub_234169594(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_2341695B0(_QWORD **a1)
{
  sub_234161FC4(a1);
  sub_234161FC4(a1 + 3);
}

_QWORD *sub_2341695D4()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = sub_23418E2E4(0x40uLL);
  v1 = v0;
  if (v0)
    sub_234169594((uint64_t)v0);
  return v1;
}

void **sub_234169608(void **a1, uint64_t a2)
{
  void **v2;

  v2 = a1;
  if (a1 != (void **)a2)
  {
    if (sub_234162060(a1, a2) && sub_234162060(v2 + 3, a2 + 24))
    {
      v2[6] = *(void **)(a2 + 48);
      v2[7] = *(void **)(a2 + 56);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_234169668(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t **v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;

  if (!sub_234169728((uint64_t)a1, a2))
    return 0;
  if (a3)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v6 = sub_23418E2E4(0x30uLL);
  if (!v6)
    return 0;
  a3 = (uint64_t)v6;
  *(_OWORD *)((char *)v6 + 26) = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  v5 = (unint64_t **)v6;
LABEL_6:
  v7 = a1[8];
  a1[4] = 0;
  a1[2] = 0;
  if (sub_2341698DC((uint64_t)a1, v7 << 7)
    && sub_234162F7C(0, (uint64_t)a1, (uint64_t)a1, (uint64_t)(a1 + 6), a3))
  {
    v8 = sub_234162474((uint64_t)a1, (int)a1[8]);
  }
  else
  {
    v8 = 0;
  }
  sub_234162D80(v5);
  return v8;
}

uint64_t sub_234169728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  __int16 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = *(int *)(a2 + 8);
  if (!(_DWORD)v2)
    goto LABEL_8;
  v4 = 0;
  v5 = 0;
  v6 = *(_BYTE **)a2;
  do
    v5 |= *(_QWORD *)&v6[8 * v4++];
  while (v2 != v4);
  if (!v5)
  {
LABEL_8:
    v7 = 105;
    v8 = 170;
    goto LABEL_9;
  }
  if ((int)v2 < 1 || (*v6 & 1) == 0)
  {
    v7 = 104;
    v8 = 174;
LABEL_9:
    sub_2341579B4(3, 0, v7, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/montgomery.c", v8);
    return 0;
  }
  if (*(_DWORD *)(a2 + 16))
  {
    v7 = 109;
    v8 = 178;
    goto LABEL_9;
  }
  if (v2 >= 0x401)
  {
    v10 = 0;
    v11 = v2 - 1024;
    v12 = (uint64_t *)(v6 + 0x2000);
    do
    {
      v13 = *v12++;
      v10 |= v13;
      --v11;
    }
    while (v11);
    if (v10)
    {
      v7 = 102;
      v8 = 182;
      goto LABEL_9;
    }
  }
  v14 = (_QWORD *)(a1 + 24);
  if (!sub_234162060((void **)(a1 + 24), a2))
  {
    v7 = 68;
    v8 = 188;
    goto LABEL_9;
  }
  v15 = *(unsigned int *)(a1 + 32);
  v16 = 8 * v15 - 8;
  v17 = *(_DWORD *)(a1 + 32);
  while (1)
  {
    v18 = __OFSUB__(v17--, 1);
    if (v17 < 0 != v18)
      break;
    v19 = *(_QWORD *)(*v14 + v16);
    v16 -= 8;
    if (v19)
    {
      *(_DWORD *)(a1 + 32) = v17 + 1;
      goto LABEL_25;
    }
  }
  *(_DWORD *)(a1 + 32) = v15 & ((int)v15 >> 31);
  if ((v15 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 40) = 0;
LABEL_25:
  v20 = 0;
  v21 = 1;
  v22 = 64;
  do
  {
    v23 = v20;
    v24 = -(v21 & 1);
    v21 = (*(_QWORD *)*v14 & v24 & v21) + ((*(_QWORD *)*v14 & v24 ^ (unint64_t)v21) >> 1);
    v20 = v24 & 0x8000000000000000 | (v23 >> 1);
    --v22;
  }
  while (v22);
  *(_QWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 56) = 0;
  return 1;
}

uint64_t sub_2341698DC(uint64_t a1, unsigned int a2)
{
  char v2;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v2 = a2;
  v4 = a2 >> 6;
  if (*(_DWORD *)(a1 + 8) <= (signed int)(a2 >> 6))
  {
    result = sub_23416171C((_QWORD **)a1, (v4 + 1));
    if (!(_DWORD)result)
      return result;
    v6 = *(int *)(a1 + 8);
    if ((int)v6 <= v4)
    {
      v7 = 8 * v6;
      v8 = v4 - v6 + 1;
      do
      {
        *(_QWORD *)(*(_QWORD *)a1 + v7) = 0;
        v7 += 8;
        --v8;
      }
      while (v8);
    }
    *(_DWORD *)(a1 + 8) = v4 + 1;
  }
  result = 1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) |= 1 << (v2 & 0x3F);
  return result;
}

uint64_t sub_234169980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v7;
  int v8;
  int v9;

  v4 = a1 + 24;
  v5 = sub_2341621D4((uint64_t *)(a1 + 24));
  if (v5 == 1)
  {
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = 0;
    return sub_234162474(a1, *(int *)(a1 + 32));
  }
  else
  {
    v7 = v5;
    v8 = *(_DWORD *)(a1 + 32);
    if (sub_2341698DC(a1, v5 - 1) && sub_2341643CC((void **)a1, a1, v8 - v7 + (v8 << 6) + 1, v4, a2))
    {
      v9 = 6;
      while (sub_23416583C(a1, a1, a1, a1, a2))
      {
        if (!--v9)
          return sub_234162474(a1, *(int *)(a1 + 32));
      }
    }
    return 0;
  }
}

uint64_t sub_234169A50(_QWORD *a1, pthread_rwlock_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v8;
  _BOOL8 v9;
  _QWORD **v10;

  sub_234195C1C(a2);
  v8 = (_QWORD **)*a1;
  sub_234195C54(a2);
  if (v8)
    return 1;
  sub_234195C38(a2);
  v10 = (_QWORD **)*a1;
  if (!*a1)
  {
    v10 = sub_2341668A4(a3, a4);
    *a1 = v10;
  }
  v9 = v10 != 0;
  sub_234195C54(a2);
  return v9;
}

uint64_t sub_234169ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v8;

  if (*(_DWORD *)(a2 + 16))
  {
    sub_2341579B4(3, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/montgomery.c", 323);
    return 0;
  }
  else
  {
    v6 = *(int *)(a3 + 32);
    if ((_DWORD)v6)
    {
      result = sub_234162474(a2, 2 * v6);
      if ((_DWORD)result)
      {
        result = sub_23416171C((_QWORD **)a1, *(int *)(a3 + 32));
        if ((_DWORD)result)
        {
          v8 = *(int *)(a3 + 32);
          *(_DWORD *)(a1 + 8) = v8;
          *(_DWORD *)(a1 + 16) = 0;
          return sub_234169BF4(*(unint64_t **)a1, v8, *(unint64_t **)a2, *(int *)(a2 + 8), a3);
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      return 1;
    }
  }
  return result;
}

BOOL sub_234169B90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(int *)(a2 + 32);
  v4 = *(int *)(a1 + 8);
  if (v4 <= v3)
    return 1;
  v5 = 0;
  v6 = v4 - v3;
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v3);
  do
  {
    v8 = *v7++;
    v5 |= v8;
    --v6;
  }
  while (v6);
  return v5 == 0;
}

void sub_234169BE4(unint64_t *a1, unint64_t *a2, unint64_t a3, unint64_t **a4)
{
  sub_234165E1C(a1, a2, *a4, a3, (uint64_t)a4);
}

uint64_t sub_234169BF4(unint64_t *a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v5 = *(int *)(a5 + 32);
  if (v5 == a2 && 2 * v5 == a4)
  {
    v11 = *(unint64_t **)(a5 + 24);
    v12 = 0;
    if ((_DWORD)v5)
    {
      v13 = *(_QWORD *)(a5 + 48);
      if (a2 <= 1)
        v14 = 1;
      else
        v14 = a2;
      v15 = a3;
      do
      {
        v16 = sub_23416812C(v15, v11, a2, *v15 * v13);
        v17 = v15[a2];
        v18 = v16 + v12 + v17;
        v12 = (v12 | (v16 + v12 != 0)) & (unint64_t)(v18 <= v17);
        v15[a2] = v18;
        ++v15;
        --v14;
      }
      while (v14);
    }
    sub_234163860(a1, &a3[a2], v12, v11, a2);
    return 1;
  }
  else
  {
    sub_2341579B4(3, 0, 66, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/montgomery.c", 294);
    return 0;
  }
}

void sub_234169CE8(_QWORD *a1, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v5[19];

  v5[18] = *MEMORY[0x24BDAC8D0];
  if (a4 > 9 || 2 * a4 != a2)
    abort();
  if (a4 == 8)
  {
    sub_234168BD0(a1, a3);
  }
  else if (a4 == 4)
  {
    sub_2341691B8(a1, a3);
  }
  else
  {
    sub_23416A5D4(a1, a3, a4, v5);
    sub_23418E400(v5, 16 * a4);
  }
}

void sub_234169DD4(_QWORD *a1, uint64_t a2, unint64_t *a3, unint64_t a4, unint64_t *a5, unint64_t a6)
{
  if (a6 + a4 != a2)
    abort();
  if (a4 == 8 && a6 == 8)
    sub_2341682A0(a1, a3, a5);
  else
    sub_23416A248(a1, a3, a4, a5, a6);
}

unint64_t sub_234169E1C(uint64_t **a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = 0;
  v3 = **a1;
  v4 = 1;
  v5 = 64;
  do
  {
    v6 = -(v4 & 1);
    v4 = (v3 & v6 & v4) + ((v3 & v6 ^ (unint64_t)v4) >> 1);
    result = v6 & 0x8000000000000000 | (result >> 1);
    --v5;
  }
  while (v5);
  return result;
}

uint64_t sub_234169E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  signed int v10;
  int v11;
  int v12;
  uint64_t result;
  unint64_t **v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a3 + 8);
  v10 = v8 - v9;
  if (v8 >= v9)
    v11 = *(_DWORD *)(a3 + 8);
  else
    v11 = *(_DWORD *)(a2 + 8);
  if (v8 <= v9)
    v12 = *(_DWORD *)(a3 + 8);
  else
    v12 = *(_DWORD *)(a2 + 8);
  sub_234162DC8((_QWORD *)a4);
  result = (uint64_t)sub_234162E68(a4);
  if (result)
  {
    v14 = (unint64_t **)result;
    result = sub_23416171C((_QWORD **)a1, v12);
    if ((_DWORD)result)
    {
      result = sub_23416171C(v14, v12);
      if ((_DWORD)result)
      {
        sub_234169F38(*(unint64_t **)a1, *(unint64_t **)a2, *(unint64_t **)a3, v11, v10, *v14);
        *(_DWORD *)(a1 + 8) = v12;
        result = 1;
      }
    }
  }
  if (!*(_BYTE *)(a4 + 40))
  {
    v15 = *(_QWORD *)(a4 + 8);
    v16 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v15 + 8 * v16);
  }
  return result;
}

uint64_t sub_234169F38(unint64_t *a1, unint64_t *a2, unint64_t *a3, int a4, signed int a5, unint64_t *a6)
{
  unint64_t *v6;
  unint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v6 = a6;
  v12 = sub_23418578C(a6, a2, a3, a4, a5);
  sub_23418578C(a1, a3, a2, a4, -a5);
  if (a5 >= 0)
    v13 = a5;
  else
    v13 = -a5;
  result = -(uint64_t)v12;
  LODWORD(v15) = v13 + a4;
  if ((_DWORD)v15)
  {
    v15 = (int)v15;
    do
    {
      v16 = *v6++;
      *a1 = v16 & (v12 - 1) | *a1 & result;
      ++a1;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_234169FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  BOOL v7;
  uint64_t result;
  _QWORD **v12;
  int v13;
  unint64_t v14;
  char v15;
  unint64_t **v16;
  char v17;
  signed int v18;
  uint64_t v20;
  uint64_t v21;

  v5 = *(int *)(a2 + 8);
  v6 = *(_DWORD *)(a3 + 8);
  if ((_DWORD)v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = 0;
    return 1;
  }
  sub_234162DC8((_QWORD *)a4);
  if (a1 != a2 && (v12 = (_QWORD **)a1, a1 != a3)
    || (result = (uint64_t)sub_234162E68(a4), (v12 = (_QWORD **)result) != 0))
  {
    *((_DWORD *)v12 + 4) = *(_DWORD *)(a3 + 16) ^ *(_DWORD *)(a2 + 16);
    if ((_DWORD)v5 == 8 && v6 == 8)
    {
      result = sub_23416171C(v12, 0x10uLL);
      if ((_DWORD)result)
      {
        *((_DWORD *)v12 + 2) = 16;
        sub_2341682A0(*v12, *(unint64_t **)a2, *(unint64_t **)a3);
LABEL_34:
        if (v12 == (_QWORD **)a1 || (result = (uint64_t)sub_234162060((void **)a1, (uint64_t)v12)) != 0)
          result = 1;
      }
    }
    else
    {
      v13 = v6 + v5;
      if ((int)v5 >= 16 && v6 >= 16 && (v5 - v6 + 1) <= 2)
      {
        if ((int)v5 - v6 >= 0)
          v14 = v5;
        else
          v14 = v6;
        v15 = sub_23416215C(v14);
        result = (uint64_t)sub_234162E68(a4);
        if (!result)
          goto LABEL_37;
        v16 = (unint64_t **)result;
        v17 = v15 - 1;
        v18 = 1 << (v15 - 1);
        if ((int)v5 <= v18 && v6 <= v18)
        {
          result = sub_23416171C((_QWORD **)result, 4 << v17);
          if (!(_DWORD)result)
            goto LABEL_37;
          result = sub_23416171C(v12, 2 << v17);
          if (!(_DWORD)result)
            goto LABEL_37;
          sub_234185B9C(*v12, *(unint64_t **)a2, *(unint64_t **)a3, v18, (v5 - v18), (v6 - v18), *v16);
        }
        else
        {
          result = sub_23416171C((_QWORD **)result, 8 << v17);
          if (!(_DWORD)result)
            goto LABEL_37;
          result = sub_23416171C(v12, 4 << v17);
          if (!(_DWORD)result)
            goto LABEL_37;
          sub_234185834(*v12, *(unint64_t **)a2, *(unint64_t **)a3, v18, v5 - v18, v6 - v18, *v16);
        }
        *((_DWORD *)v12 + 2) = v6 + v5;
        goto LABEL_34;
      }
      result = sub_23416171C(v12, v13);
      if ((_DWORD)result)
      {
        *((_DWORD *)v12 + 2) = v13;
        sub_23416A248(*v12, *(unint64_t **)a2, v5, *(unint64_t **)a3, v6);
        goto LABEL_34;
      }
    }
  }
LABEL_37:
  if (!*(_BYTE *)(a4 + 40))
  {
    v20 = *(_QWORD *)(a4 + 8);
    v21 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v21;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v20 + 8 * v21);
  }
  return result;
}

void sub_23416A248(_QWORD *a1, unint64_t *a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;

  if (a3 < a5)
    v6 = a5;
  else
    v6 = a3;
  if (a3 < a5)
    v7 = a2;
  else
    v7 = a4;
  if (a3 < a5)
    v8 = a3;
  else
    v8 = a5;
  if (a3 < a5)
    v9 = a4;
  else
    v9 = a2;
  if (v8)
  {
    a1[v6] = sub_23416365C(a1, v9, v6, *v7);
    if (v8 != 1)
    {
      v10 = 0;
      v11 = v7 + 2;
      v12 = 4 - v8;
      v13 = (char *)&a1[v6 + 4];
      do
      {
        *(_QWORD *)&v13[v10 * 8 - 24] = sub_23416812C(&a1[v10 + 1], v9, v6, v11[v10 - 1]);
        if (v12 == 2)
          break;
        *(_QWORD *)&v13[v10 * 8 - 16] = sub_23416812C(&a1[v10 + 2], v9, v6, v11[v10]);
        if (v12 == 1)
          break;
        *(_QWORD *)&v13[v10 * 8 - 8] = sub_23416812C(&a1[v10 + 3], v9, v6, v11[v10 + 1]);
        if (!v12)
          break;
        *(_QWORD *)&v13[v10 * 8] = sub_23416812C(&a1[v10 + 4], v9, v6, v11[v10 + 2]);
        v12 += 4;
        v10 += 4;
      }
      while (v12 != 3);
    }
  }
  else if (8 * v6)
  {
    bzero(a1, 8 * v6);
  }
}

uint64_t sub_23416A3A0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t *v7;
  uint64_t v8;

  v2 = *(int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    if (a2)
    {
      v4 = sub_23416365C(*(_QWORD **)a1, *(unint64_t **)a1, v2, a2);
      if (v4)
      {
        v5 = v4;
        result = sub_23416171C((_QWORD **)a1, *(int *)(a1 + 8) + 1);
        if (!(_DWORD)result)
          return result;
        v7 = *(unint64_t **)a1;
        v8 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v8 + 1;
        v7[v8] = v5;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
  }
  return 1;
}

uint64_t sub_23416A418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t result;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 8);
  if ((int)v4 <= 0)
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  sub_234162DC8((_QWORD *)a3);
  v7 = (unint64_t *)a1;
  if (a2 == a1)
    v7 = sub_234162E68(a3);
  v8 = sub_234162E68(a3);
  result = 0;
  if (v7)
  {
    if (v8)
    {
      result = sub_23416171C((_QWORD **)v7, 2 * v4);
      if ((_DWORD)result)
      {
        if ((_DWORD)v4 == 8)
        {
          sub_234168BD0((_QWORD *)*v7, *(unint64_t **)a2);
          goto LABEL_20;
        }
        if ((_DWORD)v4 == 4)
        {
          sub_2341691B8((_QWORD *)*v7, *(unint64_t **)a2);
LABEL_20:
          *((_DWORD *)v7 + 4) = 0;
          *((_DWORD *)v7 + 2) = 2 * v4;
          if (v7 == (unint64_t *)a1 || (result = (uint64_t)sub_234162060((void **)a1, (uint64_t)v7)) != 0)
            result = 1;
          goto LABEL_23;
        }
        if (v4 <= 0xF)
        {
          v10 = (_QWORD *)*v7;
          v11 = *(unint64_t **)a2;
          v12 = (uint64_t *)&v15;
LABEL_19:
          sub_23416A5D4(v10, v11, v4, v12);
          goto LABEL_20;
        }
        if ((v4 & ((_DWORD)v4 - 1)) != 0)
        {
          result = sub_23416171C((_QWORD **)v8, 2 * v4);
          if ((_DWORD)result)
          {
            v10 = (_QWORD *)*v7;
            v11 = *(unint64_t **)a2;
            v12 = (uint64_t *)*v8;
            goto LABEL_19;
          }
        }
        else
        {
          result = sub_23416171C((_QWORD **)v8, 4 * (int)v4);
          if ((_DWORD)result)
          {
            sub_23416A6C8((uint64_t *)*v7, *(unint64_t **)a2, v4, (uint64_t *)*v8);
            goto LABEL_20;
          }
        }
      }
    }
  }
LABEL_23:
  if (!*(_BYTE *)(a3 + 40))
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = *(_QWORD *)(a3 + 16) - 1;
    *(_QWORD *)(a3 + 16) = v14;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(v13 + 8 * v14);
  }
  return result;
}

_QWORD *sub_23416A5D4(_QWORD *result, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;

  if (a3)
  {
    v7 = result;
    v8 = 2 * a3;
    result[2 * a3 - 1] = 0;
    *result = 0;
    v9 = a3 - 1;
    if (v9)
    {
      result[a3] = sub_23416365C(result + 1, a2 + 1, v9, *a2);
      if (a3 >= 3)
      {
        v10 = a3 - 2;
        v11 = v7 + 3;
        v12 = &v7[a3 + 1];
        v13 = a2 + 2;
        do
        {
          *v12++ = sub_23416812C(v11, v13, v10, *(v13 - 1));
          v11 += 2;
          ++v13;
          --v10;
        }
        while (v10);
      }
    }
    sub_2341617E0(v7, v7, v7, v8);
    sub_234168220(a4, a2, a3);
    return (_QWORD *)sub_2341617E0(v7, v7, a4, v8);
  }
  return result;
}

_QWORD *sub_23416A6C8(uint64_t *a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  _QWORD *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t *v18;
  char *v19;

  if (a3 == 8)
    return sub_234168BD0(a1, a2);
  if (a3 <= 0xF)
    return sub_23416A5D4(a1, a2, a3, a4);
  v9 = a3 >> 1;
  v10 = 2 * a3;
  v11 = sub_234161E5C((unint64_t *)&a4[a3 >> 1], a2, &a2[a3 >> 1], a3 >> 1);
  sub_234161E5C((unint64_t *)a4, &a2[a3 >> 1], a2, a3 >> 1);
  v12 = 0;
  do
  {
    a4[v12] = a4[(a3 >> 1) + v12] & (v11 - 1) | a4[v12] & -(uint64_t)v11;
    ++v12;
  }
  while (v9 != v12);
  v13 = (unint64_t *)&a4[a3];
  sub_23416A6C8(v13, a4, a3 >> 1, &a4[2 * a3]);
  sub_23416A6C8(a1, a2, a3 >> 1, &a4[2 * a3]);
  sub_23416A6C8(&a1[a3], &a2[a3 >> 1], a3 >> 1, &a4[2 * a3]);
  v14 = sub_2341617E0(a4, a1, &a1[a3], a3);
  v15 = sub_234161E5C(v13, (unint64_t *)a4, v13, a3);
  result = (_QWORD *)sub_2341617E0(&a1[v9], &a1[v9], (uint64_t *)v13, a3);
  if (v9 + a3 < v10)
  {
    v16 = (char *)result + v14 - v15;
    v17 = a3 - v9;
    v18 = &a1[v9 + a3];
    do
    {
      v19 = &v16[*v18];
      v16 = (char *)__CFADD__(*v18, v16);
      *v18++ = (uint64_t)v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

_QWORD *sub_23416A89C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a3;
  result[1] = a2;
  return result;
}

uint64_t sub_23416A8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a1);
  else
    return 1;
}

uint64_t sub_23416A8C8(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  int v11;
  _BOOL4 v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _BOOL4 v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;

  if (a2 > 3746)
  {
    v11 = 3;
LABEL_13:
    v12 = a3 != 0;
    goto LABEL_14;
  }
  if (a2 > 1344)
  {
    v11 = 4;
    goto LABEL_13;
  }
  if (a2 > 475)
  {
    v11 = 5;
    goto LABEL_13;
  }
  if (a2 > 399)
  {
    v11 = 6;
    goto LABEL_13;
  }
  if (a2 > 346)
  {
    v11 = 7;
    goto LABEL_13;
  }
  if (a2 >= 308)
  {
    v11 = 8;
    goto LABEL_13;
  }
  if (a2 <= 1)
  {
    v45 = 393;
LABEL_105:
    sub_2341579B4(3, 0, 103, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/prime.c", v45);
    return 0;
  }
  if (a2 <= 0x36)
    v11 = 34;
  else
    v11 = 27;
  v12 = a3 != 0;
  if (a2 == 2 && a3)
  {
    v45 = 397;
    goto LABEL_105;
  }
LABEL_14:
  v13 = sub_23418E2E4(0x30uLL);
  if (!v13)
    return 0;
  v14 = (uint64_t)v13;
  v49 = a5;
  *(_OWORD *)((char *)v13 + 26) = 0u;
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  sub_234162DC8(v13);
  v15 = sub_234162E68(v14);
  if (v15)
  {
    v16 = (uint64_t)v15;
    v17 = 0;
    v52 = (uint64_t)a4;
    v50 = v12;
    while (1)
    {
LABEL_17:
      if (!a4)
      {
        while (sub_23416BC9C(a1, a2, 1, 1u))
        {
          if (!sub_23416AEB8((unsigned int *)a1))
            goto LABEL_69;
        }
        goto LABEL_91;
      }
      v51 = v17;
      sub_234162DC8((_QWORD *)v14);
      v18 = sub_234162E68(v14);
      v19 = (uint64_t)v18;
      if (!v12)
      {
        if (!v18)
          goto LABEL_37;
        v24 = 1;
        if (sub_23416BC9C(a1, a2, 0, 1u))
        {
          if (sub_234162F7C(0, v19, a1, (uint64_t)a4, v14) && sub_234161C30(a1, a1, v19))
          {
            if (v49)
            {
              if (!sub_2341614D0(a1, a1, (uint64_t)v49))
                goto LABEL_37;
LABEL_43:
              if (*(int *)(a1 + 8) <= 16)
                v27 = 512;
              else
                v27 = 1024;
              for (i = 1; i != v27; ++i)
              {
                while (1)
                {
                  v29 = sub_234164AF8(a1, (unsigned __int16)word_2342E26A0[i]);
                  v24 = v29 < 2;
                  if (v29 > 1)
                    break;
                  i = 1;
                  if (!sub_2341614D0(a1, a1, (uint64_t)a4))
                    goto LABEL_38;
                }
              }
            }
            else
            {
              v24 = 1;
              if (sub_2341618E4(a1, 1uLL))
                goto LABEL_43;
            }
          }
          else
          {
LABEL_37:
            v24 = 1;
          }
        }
LABEL_38:
        if (!*(_BYTE *)(v14 + 40))
        {
          v25 = *(_QWORD *)(v14 + 8);
          v26 = *(_QWORD *)(v14 + 16) - 1;
          *(_QWORD *)(v14 + 16) = v26;
          *(_QWORD *)(v14 + 32) = *(_QWORD *)(v25 + 8 * v26);
        }
        v12 = v50;
        v17 = v51;
        if (v24)
          goto LABEL_91;
        goto LABEL_69;
      }
      v20 = (uint64_t *)sub_234162E68(v14);
      v21 = sub_234162E68(v14);
      if (!v21)
        goto LABEL_65;
      v22 = (uint64_t)v21;
      if (!sub_234166C94((uint64_t)v21, a4))
        goto LABEL_65;
      v23 = 1;
      if (!sub_23416BC9C((uint64_t)v20, a2 - 1, 0, 1u))
        goto LABEL_66;
      if (!sub_234162F7C(0, v19, (uint64_t)v20, v22, v14)
        || !sub_234161C30((uint64_t)v20, (uint64_t)v20, v19))
      {
        goto LABEL_65;
      }
      if (v49)
      {
        if (!sub_234166C94(v19, v49) || !sub_2341614D0((uint64_t)v20, (uint64_t)v20, v19))
          goto LABEL_65;
      }
      else
      {
        v23 = 1;
        if (!sub_2341618E4((uint64_t)v20, 1uLL))
          goto LABEL_66;
      }
      if (!sub_2341645A0(a1, v20))
        goto LABEL_65;
      v23 = 1;
      if (sub_2341618E4(a1, 1uLL))
        break;
LABEL_66:
      if (!*(_BYTE *)(v14 + 40))
      {
        v33 = *(_QWORD *)(v14 + 8);
        v34 = *(_QWORD *)(v14 + 16) - 1;
        *(_QWORD *)(v14 + 16) = v34;
        *(_QWORD *)(v14 + 32) = *(_QWORD *)(v33 + 8 * v34);
      }
      v12 = v50;
      v17 = v51;
      if ((v23 & 1) != 0)
        goto LABEL_91;
LABEL_69:
      if (a6 && !(*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(a6 + 8))(0, v17, a6))
        goto LABEL_91;
      v17 = (v17 + 1);
      if (v12)
      {
        a4 = (uint64_t *)v52;
        if (sub_234166C94(v16, (uint64_t *)a1))
        {
          v35 = 0;
          while (1)
          {
            v54 = 0;
            v36 = sub_23416B34C(&v54, a1, 1, v14, 0, 0);
            v37 = v54;
            if (!v36)
              v37 = -1;
            if (v37 == -1)
              break;
            if (!v37)
              goto LABEL_17;
            v55 = 0;
            v38 = sub_23416B34C(&v55, v16, 1, v14, 0, 0);
            v39 = v55;
            if (!v38)
              v39 = -1;
            if (v39 == -1)
              break;
            if (!v39)
              goto LABEL_17;
            if (a6 && !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a6 + 8))(1, v35, a6))
              break;
            v35 = (v35 + 1);
            if (v11 == (_DWORD)v35)
              goto LABEL_96;
          }
        }
        goto LABEL_91;
      }
      v53 = 0;
      v40 = sub_23416B34C(&v53, a1, v11, v14, 0, a6);
      v41 = v53;
      if (!v40)
        v41 = -1;
      a4 = (uint64_t *)v52;
      if (v41)
      {
        v42 = 0;
        if (v41 != -1)
LABEL_96:
          v42 = 1;
        goto LABEL_92;
      }
    }
    v30 = 512;
    if (*(int *)(a1 + 8) > 16)
      v30 = 1024;
    v47 = v30;
    v48 = (uint64_t)v20;
    v31 = 1;
    while (1)
    {
      while (1)
      {
        v32 = (unsigned __int16)word_2342E26A0[v31];
        if (!sub_234164AF8(a1, v32) || !sub_234164AF8(v48, v32))
          break;
        v23 = 0;
        if (++v31 == v47)
          goto LABEL_66;
      }
      if (!sub_2341614D0(a1, a1, v52))
        break;
      v31 = 1;
      v23 = 1;
      if (!sub_2341614D0(v48, v48, v22))
        goto LABEL_66;
    }
LABEL_65:
    v23 = 1;
    goto LABEL_66;
  }
LABEL_91:
  v42 = 0;
LABEL_92:
  if (!*(_BYTE *)(v14 + 40))
  {
    v43 = *(_QWORD *)(v14 + 8);
    v44 = *(_QWORD *)(v14 + 16) - 1;
    *(_QWORD *)(v14 + 16) = v44;
    *(_QWORD *)(v14 + 32) = *(_QWORD *)(v43 + 8 * v44);
  }
  sub_234162D80((unint64_t **)v14);
  return v42;
}

uint64_t sub_23416AE74(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int v6;

  v6 = 0;
  if (sub_23416B34C(&v6, a1, a2, a3, a4, a5))
    return v6;
  else
    return 0xFFFFFFFFLL;
}

BOOL sub_23416AEB8(unsigned int *a1)
{
  _BOOL8 result;
  unsigned __int16 v3;

  v3 = 0;
  result = sub_23416AF00(&v3, (uint64_t)a1);
  if (result)
    return !sub_234162BA4(a1, v3);
  return result;
}

BOOL sub_23416AF00(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v4;
  unsigned __int16 v5;
  _BOOL8 result;
  uint64_t v7;

  if (*(int *)(a2 + 8) <= 16)
    v4 = 512;
  else
    v4 = 1024;
  v5 = 3;
  if (sub_234164AF8(a2, 3u))
  {
    v7 = 2;
    while (v4 != v7)
    {
      v5 = word_2342E26A0[v7++];
      if (!sub_234164AF8(a2, v5))
      {
        result = v7 - 1 < v4;
        goto LABEL_10;
      }
    }
    return 0;
  }
  else
  {
    result = 1;
LABEL_10:
    *a1 = v5;
  }
  return result;
}

uint64_t sub_23416AFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  *(_QWORD *)a1 = sub_234162E68(a3);
  *(_QWORD *)(a1 + 8) = sub_234162E68(a3);
  *(_QWORD *)(a1 + 16) = sub_234162E68(a3);
  v6 = sub_234162E68(a3);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    && *(_QWORD *)(a1 + 8)
    && *(_QWORD *)(a1 + 16)
    && v6
    && (sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138),
        sub_234161CF8(v7, a2 + 24, (uint64_t)&qword_256159710))
    && (v8 = *(_QWORD *)a1,
        v9 = sub_23416B0CC(*(_QWORD *)a1),
        *(_DWORD *)(a1 + 36) = v9,
        sub_234167F30(*(_QWORD *)(a1 + 8), v8, v9, a3))
    && (*(_DWORD *)(a1 + 32) = sub_2341621D4((uint64_t *)(a2 + 24)),
        sub_234166500(*(_QWORD *)(a1 + 16), a2, a3)))
  {
    return sub_234161CF8(*(_QWORD *)(a1 + 24), a2 + 24, *(_QWORD *)(a1 + 16));
  }
  else
  {
    return 0;
  }
}

unint64_t sub_23416B0CC(unint64_t result)
{
  uint64_t v1;
  unint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 < 1)
    return 0;
  v2 = (unint64_t **)result;
  v3 = 0;
  LODWORD(result) = 0;
  v4 = 0;
  v5 = *v2;
  v6 = v1 << 6;
  do
  {
    v7 = *v5++;
    v8 = (uint64_t)(((v7 << 32) - 1) & ~(v7 << 32)) >> 63;
    v9 = v8 & 0x20;
    v10 = v8 & HIDWORD(v7) | v7 & ~v8;
    v11 = (uint64_t)(((v10 << 48) - 1) & ~(v10 << 48)) >> 63;
    v12 = v11 & 0x10;
    v13 = v11 & (v10 >> 16) | v10 & ~v11;
    v14 = (v7 - 1) & ~v7;
    v15 = (uint64_t)(((v13 << 56) - 1) & ~(v13 << 56)) >> 63;
    v16 = v15 & 8;
    v17 = v12 | v9;
    v18 = v15 & (v13 >> 8) | v13 & ~v15;
    v19 = (uint64_t)(((v18 << 60) - 1) & ~(v18 << 60)) >> 63;
    v20 = v19 & 4;
    v21 = v19 & (v18 >> 4) | v18 & ~v19;
    v22 = v17 | v16;
    v23 = (((v21 << 62) - 1) & ~(v21 << 62)) >> 63;
    v24 = v23 & 2;
    v25 = v23 & (v21 >> 2) | v21 & ~(_DWORD)v23;
    LODWORD(v23) = (v14 >> 63) | v4;
    v4 |= ~(v14 >> 63);
    result = (v3 | v22 | v20 | v24 | ((((v25 << 63) - 1) & (unint64_t)~(v25 << 63)) >> 63)) & ~(_DWORD)v23 | result;
    v3 += 64;
  }
  while (v6 != v3);
  return result;
}

uint64_t sub_23416B1F0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_234162DC8((_QWORD *)a5);
  result = (uint64_t)sub_234162E68(a5);
  if (result)
  {
    v11 = result;
    result = sub_234166004(result, a3, *(_QWORD *)(a1 + 8), a4 + 24, a5, a4);
    if ((_DWORD)result)
    {
      result = sub_23416583C(v11, v11, a4, a4, a5);
      if ((_DWORD)result)
      {
        v12 = sub_234162CAC(v11, *(_QWORD *)(a1 + 16));
        v13 = -(uint64_t)(sub_234162CAC(v11, *(_QWORD *)(a1 + 24)) | v12);
        if (*(int *)(a1 + 32) >= 2)
        {
          v14 = 1;
          do
          {
            if (v14 == *(_DWORD *)(a1 + 36))
              v15 = ~v13;
            else
              v15 = 0;
            if (v15)
              break;
            result = sub_23416583C(v11, v11, v11, a4, a5);
            if (!(_DWORD)result)
              goto LABEL_14;
            v13 |= -(uint64_t)sub_234162CAC(v11, *(_QWORD *)(a1 + 24));
            if ((sub_234162CAC(v11, *(_QWORD *)(a1 + 16)) & (unint64_t)~v13) != 0)
              break;
            ++v14;
          }
          while (v14 < *(_DWORD *)(a1 + 32));
        }
        *a2 = v13 & 1;
        result = 1;
      }
    }
  }
LABEL_14:
  if (!*(_BYTE *)(a5 + 40))
  {
    v16 = *(_QWORD *)(a5 + 8);
    v17 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v17;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v16 + 8 * v17);
  }
  return result;
}

uint64_t sub_23416B34C(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  unint64_t **v17;
  _OWORD *v18;
  unint64_t *v19;
  _QWORD **v20;
  _QWORD **v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t **v31;
  int v32;
  int v33;
  _OWORD v34[2];
  uint64_t v35;

  *a1 = 0;
  sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
  if ((int)sub_234162A28(a2, (uint64_t)&qword_256159710) < 1)
    return 1;
  if (*(int *)(a2 + 8) < 1 || (**(_BYTE **)a2 & 1) == 0)
  {
    v12 = (unsigned int *)a2;
    v13 = 2;
LABEL_5:
    *a1 = sub_234162BA4(v12, v13);
    return 1;
  }
  if (sub_234162BA4((unsigned int *)a2, 3))
  {
    v14 = 1;
    *a1 = 1;
    return v14;
  }
  if (a5)
  {
    LOWORD(v34[0]) = 0;
    if (sub_23416AF00((unsigned __int16 *)v34, a2))
    {
      v13 = LOWORD(v34[0]);
      v12 = (unsigned int *)a2;
      goto LABEL_5;
    }
    if (a6 && !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a6 + 8))(1, 0xFFFFFFFFLL, a6))
      return 0;
  }
  if (!a3)
  {
    v16 = sub_2341621D4((uint64_t *)a2);
    if (v16 <= 3746)
    {
      if (v16 <= 1344)
      {
        if (v16 <= 475)
        {
          if (v16 <= 399)
          {
            if (v16 <= 346)
            {
              if (v16 <= 307)
              {
                if (v16 <= 54)
                  a3 = 34;
                else
                  a3 = 27;
              }
              else
              {
                a3 = 8;
              }
            }
            else
            {
              a3 = 7;
            }
          }
          else
          {
            a3 = 6;
          }
        }
        else
        {
          a3 = 5;
        }
      }
      else
      {
        a3 = 4;
      }
    }
    else
    {
      a3 = 3;
    }
  }
  if (a4)
  {
    v17 = 0;
    goto LABEL_35;
  }
  v18 = sub_23418E2E4(0x30uLL);
  if (!v18)
    return 0;
  a4 = (uint64_t)v18;
  *(_OWORD *)((char *)v18 + 26) = 0u;
  *v18 = 0u;
  v18[1] = 0u;
  v17 = (unint64_t **)v18;
LABEL_35:
  sub_234162DC8((_QWORD *)a4);
  v19 = sub_234162E68(a4);
  v20 = sub_2341657CC(a2, a4);
  v21 = v20;
  v14 = 0;
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  if (v19 && v20)
  {
    if (sub_23416AFB4((uint64_t)v34, (uint64_t)v20, a4))
    {
      v31 = v17;
      v22 = 0;
      v23 = a3;
      v24 = 1;
      v25 = *(_QWORD *)&v34[0];
      while (1)
      {
        v33 = 0;
        if (!sub_23416B664((uint64_t)v19, (unsigned int *)&v33, 2uLL, v25)
          || (v26 = v33, v32 = 0, !sub_23416B1F0((uint64_t)v34, &v32, (uint64_t)v19, (uint64_t)v21, a4)))
        {
LABEL_51:
          v14 = 0;
          goto LABEL_53;
        }
        if (!v32)
          break;
        if (a6 && !(*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(a6 + 8))(1, v24 - 1, a6))
          goto LABEL_51;
        v22 += v26;
        v28 = v24++ < 0x10;
        if (!(v28 | ((((v22 - v23) ^ v22 | v22 ^ v23) ^ v22) >> 63)))
        {
          v14 = 1;
          *a1 = 1;
          goto LABEL_53;
        }
      }
      *a1 = 0;
      v14 = 1;
LABEL_53:
      v17 = v31;
    }
    else
    {
      v14 = 0;
    }
  }
  sub_2341659A4(v21);
  if (!*(_BYTE *)(a4 + 40))
  {
    v29 = *(_QWORD *)(a4 + 8);
    v30 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v30;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v29 + 8 * v30);
  }
  sub_234162D80(v17);
  return v14;
}

uint64_t sub_23416B664(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0;
  result = sub_23416C024(&v16, &v15, a3, *(unint64_t **)a4, *(int *)(a4 + 8));
  if ((_DWORD)result)
  {
    v9 = v16;
    result = sub_23416171C((_QWORD **)a1, v16);
    if ((_DWORD)result)
    {
      v10 = v15;
      v11 = v15 >> 1;
      if (v9 != 1 || v11 >= a3)
      {
        sub_23416C0A8(*(char **)a1, 8 * v9, (uint64_t)&unk_2342E23D8);
        v13 = 8 * v9 - 8;
        *(_QWORD *)(*(_QWORD *)a1 + v13) &= v10;
        v14 = sub_23416BE9C(*(uint64_t **)a1, a3, *(uint64_t **)a4, v9);
        *a2 = v14;
        **(_QWORD **)a1 |= a3 & (v14 - 1);
        *(_QWORD *)(*(_QWORD *)a1 + v13) &= -(uint64_t)v14 | v11;
        *(_DWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 8) = v9;
        return 1;
      }
      else
      {
        sub_2341579B4(3, 0, 108, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/random.c", 323);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_23416B794(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;

  v5 = 0;
  if (sub_23416B34C(&v5, a1, a2, a3, 0, a4))
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_23416B7D8(int *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  unint64_t *v13;
  uint64_t v14;
  unint64_t i;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  int v21;
  int v22;
  void **v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  unint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (*(int *)(a2 + 8) < 1
    || (**(_BYTE **)a2 & 1) == 0
    || (v38 = 3, v37 = 0x200000000, v35 = &v38, v36 = 0x100000001, (int)sub_234162A28(a2, (uint64_t)&v35) <= 0))
  {
    sub_2341579B4(3, 0, 119, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/prime.c", 807);
    return 0;
  }
  if (!a3)
  {
    v10 = sub_2341621D4((uint64_t *)a2);
    if (v10 <= 3746)
    {
      if (v10 <= 1344)
      {
        if (v10 <= 475)
        {
          if (v10 <= 399)
          {
            if (v10 <= 346)
            {
              if (v10 <= 307)
              {
                if (v10 <= 54)
                  a3 = 34;
                else
                  a3 = 27;
              }
              else
              {
                a3 = 8;
              }
            }
            else
            {
              a3 = 7;
            }
          }
          else
          {
            a3 = 6;
          }
        }
        else
        {
          a3 = 5;
        }
      }
      else
      {
        a3 = 4;
      }
    }
    else
    {
      a3 = 3;
    }
  }
  sub_234162DC8((_QWORD *)a4);
  v13 = sub_234162E68(a4);
  if (!v13)
    goto LABEL_66;
  v14 = (uint64_t)v13;
  if (!sub_234162060((void **)v13, a2) || !sub_234161AB0(v14, 1uLL))
    goto LABEL_66;
  for (i = 0; i >> 6 >= *(int *)(v14 + 8) || ((*(_QWORD *)(*(_QWORD *)v14 + 8 * (i >> 6)) >> i) & 1) == 0; ++i)
    ;
  v16 = sub_234162E68(a4);
  v17 = v16;
  if (!v16)
    goto LABEL_69;
  if (!sub_23416371C((uint64_t)v16, v14, i))
  {
LABEL_66:
    v11 = 0;
    v17 = 0;
    goto LABEL_67;
  }
  v30 = (uint64_t)v17;
  v18 = sub_234162E68(a4);
  v32 = (uint64_t *)sub_234162E68(a4);
  v34 = sub_234162E68(a4);
  v33 = sub_234162E68(a4);
  v19 = sub_234162E68(a4);
  v17 = 0;
  v11 = 0;
  v31 = (uint64_t)v18;
  if (v18 && v32 && v34 && v33 && v19)
  {
    v27 = (void **)v19;
    v20 = (unint64_t *)sub_2341668A4(a2, a4);
    v17 = v20;
    if (v20)
    {
      if (a3 < 1)
      {
LABEL_70:
        v22 = 0;
LABEL_71:
        *a1 = v22;
        v11 = 1;
        goto LABEL_67;
      }
      v21 = 1;
      v28 = v20;
      while (1)
      {
        if (!sub_234167838(v31, 2uLL, v14))
          goto LABEL_69;
        v29 = v21;
        if (!sub_2341679F8(v32, v31, a2, a4))
          goto LABEL_69;
        v22 = 1;
        v37 = 0x200000000;
        v38 = 1;
        v35 = &v38;
        v36 = 0x100000001;
        if ((int)sub_234162A28((uint64_t)v32, (uint64_t)&v35) > 0)
          goto LABEL_71;
        if (!sub_2341652E0((uint64_t)v34, v31, v30, a2, a4, (uint64_t)v17))
          goto LABEL_69;
        if (!sub_234162B4C((unsigned int *)v34) && sub_234162A28((uint64_t)v34, v14))
          break;
LABEL_44:
        if (a5
          && !(*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(a5 + 8))(1, (v29 - 1), a5))
        {
          goto LABEL_72;
        }
        v21 = v29 + 1;
        v17 = v28;
        if (v29 == a3)
          goto LABEL_70;
      }
      v23 = (void **)v33;
      if (i >= 2)
      {
        v24 = i - 1;
        while (sub_234162060(v23, (uint64_t)v34)
             && sub_234164140((uint64_t)v34, (uint64_t)v23, (uint64_t)v23, a2, a4))
        {
          if (!sub_234162A28((uint64_t)v34, v14))
            goto LABEL_44;
          v23 = (void **)v33;
          if (sub_234162B4C((unsigned int *)v34))
            goto LABEL_60;
          if (!--v24)
            goto LABEL_56;
        }
        goto LABEL_72;
      }
LABEL_56:
      v17 = v28;
      if (sub_234162060(v23, (uint64_t)v34))
      {
        if (sub_234164140((uint64_t)v34, (uint64_t)v23, (uint64_t)v23, a2, a4))
        {
          if (sub_234162B4C((unsigned int *)v34) || sub_234162060(v23, (uint64_t)v34))
          {
LABEL_60:
            if (sub_234162060(v27, (uint64_t)v23))
            {
              v17 = v28;
              if (sub_234161AB0((uint64_t)v27, 1uLL)
                && sub_2341679F8(v32, (uint64_t)v27, a2, a4))
              {
                v37 = 0x200000000;
                v38 = 1;
                v35 = &v38;
                v36 = 0x100000001;
                if ((int)sub_234162A28((uint64_t)v32, (uint64_t)&v35) >= 1)
                  v22 = 1;
                else
                  v22 = 2;
                goto LABEL_71;
              }
              goto LABEL_69;
            }
          }
LABEL_72:
          v11 = 0;
          v17 = v28;
          goto LABEL_67;
        }
      }
    }
LABEL_69:
    v11 = 0;
  }
LABEL_67:
  sub_2341659A4((_QWORD **)v17);
  if (!*(_BYTE *)(a4 + 40))
  {
    v25 = *(_QWORD *)(a4 + 8);
    v26 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v26;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v25 + 8 * v26);
  }
  return v11;
}

uint64_t sub_23416BC9C(uint64_t result, int a2, int a3, unsigned int a4)
{
  int v5;
  __int16 v6;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if (result)
  {
    if ((a3 - 2) <= 0xFFFFFFFC)
    {
      v5 = 66;
      v6 = 131;
LABEL_9:
      sub_2341579B4(3, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/random.c", v6);
      return 0;
    }
    if (a4 >= 2)
    {
      v5 = 66;
      v6 = 136;
      goto LABEL_9;
    }
    v9 = result;
    if (!a2)
    {
      *(_DWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 8) = 0;
      return 1;
    }
    if (a2 >= 2147483585)
    {
      v5 = 102;
      v6 = 146;
      goto LABEL_9;
    }
    v10 = a2 >= -63 ? a2 + 63 : a2 + 126;
    v11 = 1 - a2 >= 0 ? -((1 - a2) & 0x3F) : (a2 - 1) & 0x3F;
    v12 = (uint64_t)v10 >> 6;
    result = sub_23416171C((_QWORD **)result, v12);
    if ((_DWORD)result)
    {
      v13 = v10 >> 6;
      if (v11 < 63)
        v14 = ~(-1 << (v11 + 1));
      else
        v14 = -1;
      sub_23416C0A8(*(char **)v9, 8 * v12, (uint64_t)&unk_2342E23D8);
      v15 = v13 - 1;
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v15) &= v14;
      if (a3 == -1)
        goto LABEL_31;
      if (a2 >= 2 && a3 == 1)
      {
        if (!v11)
        {
          *(_QWORD *)(*(_QWORD *)v9 + 8 * v15) |= 1uLL;
          v17 = (_QWORD *)(*(_QWORD *)v9 + 8 * v13 - 16);
          v16 = 0x8000000000000000;
          goto LABEL_30;
        }
        v16 = 3 << (v11 - 1);
      }
      else
      {
        v16 = 1 << v11;
      }
      v17 = (_QWORD *)(*(_QWORD *)v9 + 8 * v15);
LABEL_30:
      *v17 |= v16;
LABEL_31:
      if (a4 == 1)
        **(_QWORD **)v9 |= 1uLL;
      *(_DWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 8) = v13;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23416BE78(char *a1, unint64_t a2)
{
  sub_23416C0A8(a1, a2, (uint64_t)&unk_2342E23D8);
  return 1;
}

uint64_t sub_23416BE9C(uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  if (a2)
  {
    if (a4)
    {
      v4 = 0;
      v5 = a4 - 1;
      if (a4 != 1)
      {
        v6 = a1 + 1;
        do
        {
          v7 = *v6++;
          v4 |= v7;
          --v5;
        }
        while (v5);
      }
      v8 = ~(((v4 - 1) & ~v4 & (((*a1 - a2) ^ *a1 | *a1 ^ a2) ^ *a1)) >> 63);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = -1;
  }
  return *(_DWORD *)&v8 & (sub_234162948(a1, a4, a3, a4) >> 31);
}

uint64_t sub_23416BF24(char *a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  unint64_t v16;
  unint64_t v17;

  v16 = 0;
  v17 = 0;
  result = sub_23416C024(&v17, &v16, a2, a3, a4);
  if ((_DWORD)result)
  {
    v11 = v17;
    v12 = 8 * (a4 - v17);
    if (v12)
      bzero(&a1[8 * v17], v12);
    v13 = v16;
    v14 = -100;
    while (!__CFADD__(v14++, 1))
    {
      sub_23416C0A8(a1, 8 * v11, a5);
      *(_QWORD *)&a1[8 * v11 - 8] &= v13;
      if (sub_23416BE9C((uint64_t *)a1, a2, (uint64_t *)a3, v11))
        return 1;
    }
    sub_2341579B4(3, 0, 115, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/random.c", 271);
    return 0;
  }
  return result;
}

uint64_t sub_23416C024(_QWORD *a1, unint64_t *a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  while (a5)
  {
    v5 = a5 - 1;
    v6 = a4[--a5];
    if (v6)
    {
      if (v5 || *a4 > a3)
      {
        v7 = v6 | (v6 >> 1) | ((v6 | (v6 >> 1)) >> 2);
        v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
        *a1 = v5 + 1;
        *a2 = v8 | (v8 >> 16) | ((v8 | (v8 >> 16)) >> 32);
        return 1;
      }
      break;
    }
  }
  sub_2341579B4(3, 0, 108, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/random.c", 230);
  return 0;
}

void sub_23416C0A8(char *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  BOOL v9;
  uint64_t i;
  _QWORD *v11;
  _OWORD *v12;
  _DWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[3];
  _OWORD v21[19];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  v4 = a2;
  sub_234195C74(&stru_256158220, (void (*)(void))sub_23417C550);
  v6 = qword_25615AA50;
  v7 = sub_234193814();
  v8 = v7;
  if (v6)
    v9 = 0;
  else
    v9 = !v7;
  if (v9)
    sub_23419382C(v23, 0x20uLL);
  else
    memset(v23, 0, sizeof(v23));
  for (i = 0; i != 2; ++i)
    v23[i] = veorq_s8((int8x16_t)v23[i], *(int8x16_t *)(a3 + i * 16));
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v11 = sub_234195C90(1);
  if (v11)
  {
    v12 = v11;
    v13 = v11 + 37;
    if (*((_DWORD *)v11 + 74) > 0xFFFu)
      goto LABEL_20;
  }
  else
  {
    v14 = sub_23418E344(0x138uLL);
    if (!v14
      || (v12 = v14, !sub_234195D24(1u, (uint64_t)v14, (void (*)(uint64_t))sub_23417C588)))
    {
      v12 = v21;
    }
    *((_DWORD *)v12 + 75) = 0;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    sub_23419382C(v20, 0x30uLL);
    if (!sub_23417C088((uint64_t)v12, v20, (char *)&v17, 0))
      goto LABEL_31;
    v13 = (_DWORD *)v12 + 74;
    *((_DWORD *)v12 + 74) = 0;
    *((_QWORD *)v12 + 36) = v6;
    *((_DWORD *)v12 + 76) = v8;
  }
  if (*((_QWORD *)v12 + 36) != v6 || *((_DWORD *)v12 + 76) != v8)
  {
LABEL_20:
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    sub_23419382C(v20, 0x30uLL);
    if (sub_23417C17C((uint64_t)v12, (char *)v20, (uint64_t)&v17, 0))
    {
      *v13 = 0;
      *((_QWORD *)v12 + 36) = v6;
      *((_DWORD *)v12 + 76) = v8;
      goto LABEL_22;
    }
LABEL_31:
    abort();
  }
LABEL_22:
  v15 = 32;
  do
  {
    if (v4 >= 0x10000)
      v16 = 0x10000;
    else
      v16 = v4;
    if (!sub_23417C334((uint64_t)v12, a1, v16, (char *)v23, v15))
      goto LABEL_31;
    v15 = 0;
    a1 += v16;
    ++*v13;
    v4 -= v16;
  }
  while (v4);
  if (v12 == v21)
    sub_23418E400(v21, 0x120uLL);
}

uint64_t sub_23416C300(uint64_t a1, uint64_t a2)
{
  return sub_234167838(a1, 0, a2);
}

void sub_23416C30C(char *__dst, uint64_t a2, unsigned int a3, unint64_t a4)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  size_t v13;

  v5 = __dst;
  v6 = a3 >> 6;
  v7 = a4 - v6;
  if (a4 <= v6)
  {
    if (!a4)
      return;
    v13 = 8 * a4;
LABEL_14:
    bzero(__dst, v13);
    return;
  }
  v9 = a3 & 0x3F;
  if ((a3 & 0x3F) != 0)
  {
    if (a4 - 1 > v6)
    {
      v10 = ~v6 + a4;
      v11 = (_QWORD *)(a2 + 8 * v6 + 8);
      v12 = __dst;
      do
      {
        *(_QWORD *)v12 = (*v11 << (64 - v9)) | (*(v11 - 1) >> v9);
        v12 += 8;
        ++v11;
        --v10;
      }
      while (v10);
    }
    *(_QWORD *)&__dst[8 * (a4 - 1 - v6)] = *(_QWORD *)(a2 + 8 * (a4 - 1)) >> v9;
  }
  else if (8 * v7)
  {
    memmove(__dst, (const void *)(a2 + 8 * v6), 8 * v7);
  }
  if (a3 >= 0x40)
  {
    v13 = 8 * v6;
    __dst = &v5[8 * a4 + -8 * v6];
    goto LABEL_14;
  }
}

_QWORD *sub_23416C3EC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (a3)
  {
    if (a3 != 1)
    {
      v3 = a2 + 8;
      v4 = a3 - 1;
      v5 = result;
      do
      {
        *v5++ = *(__int128 *)(v3 - 8) >> 1;
        v3 += 8;
        --v4;
      }
      while (v4);
    }
    result[a3 - 1] = *(_QWORD *)(a2 + 8 * (a3 - 1)) >> 1;
  }
  return result;
}

uint64_t sub_23416C42C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 8) <= (signed int)(a2 >> 6))
    return 0;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (a2 >> 6)) &= ~(1 << a2);
  v2 = *(unsigned int *)(a1 + 8);
  v3 = 8 * v2 - 8;
  v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v5 = __OFSUB__(v4--, 1);
    if (v4 < 0 != v5)
      break;
    v6 = *(_QWORD *)(*(_QWORD *)a1 + v3);
    v3 -= 8;
    if (v6)
    {
      *(_DWORD *)(a1 + 8) = v4 + 1;
      return 1;
    }
  }
  *(_DWORD *)(a1 + 8) = v2 & ((int)v2 >> 31);
  if ((v2 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 16) = 0;
  return 1;
}

uint64_t sub_23416C4AC(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v2 = a2 >> 6;
  if ((signed int)(a2 >> 6) < *(_DWORD *)(a1 + 8))
  {
    if ((a2 & 0x3F) != 0)
    {
      *(_DWORD *)(a1 + 8) = v2 + 1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) &= ~(-1 << (a2 & 0x3F));
      v2 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v2;
    }
    v4 = 8 * v2 - 8;
    v5 = v2;
    while (1)
    {
      v6 = __OFSUB__(v5--, 1);
      if (v5 < 0 != v6)
        break;
      v7 = *(_QWORD *)(*(_QWORD *)a1 + v4);
      v4 -= 8;
      if (v7)
      {
        *(_DWORD *)(a1 + 8) = v5 + 1;
        return 1;
      }
    }
    *(_DWORD *)(a1 + 8) = v2 & (v2 >> 31);
    if ((v2 & 0x80000000) == 0)
      *(_DWORD *)(a1 + 16) = 0;
  }
  return 1;
}

_QWORD *sub_23416C544(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t i;
  int v38;
  __int16 v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;

  v7 = *(unsigned int *)(a3 + 8);
  if ((int)v7 < 1)
    goto LABEL_17;
  v8 = *(uint64_t **)a3;
  v9 = **(_QWORD **)a3;
  if ((v9 & 1) == 0)
    goto LABEL_19;
  v11 = v9 ^ 1;
  if (v7 >= 2)
  {
    v12 = v7 - 1;
    v13 = v8 + 1;
    do
    {
      v14 = *v13++;
      v11 |= v14;
      --v12;
    }
    while (v12);
  }
  if (!v11)
  {
LABEL_17:
    if (!(_DWORD)v7)
      goto LABEL_23;
    v8 = *(uint64_t **)a3;
    v9 = **(_QWORD **)a3;
LABEL_19:
    v23 = v9 ^ 2;
    if ((int)v7 >= 2)
    {
      v24 = v7 - 1;
      v25 = v8 + 1;
      do
      {
        v26 = *v25++;
        v23 |= v26;
        --v24;
      }
      while (v24);
    }
    if (!v23)
    {
      v19 = a1;
      if (a1 || (v19 = sub_234161F88()) != 0)
      {
        if (a2[2])
        {
          v27 = **(_QWORD **)a2;
          if ((v27 & 1) != 0)
          {
            if (sub_23416171C((_QWORD **)v19, 1uLL))
            {
              v22 = v27 & 1;
              goto LABEL_32;
            }
            goto LABEL_35;
          }
        }
        goto LABEL_29;
      }
LABEL_35:
      if (v19 != a1)
        sub_234161FC4((_QWORD **)v19);
      return 0;
    }
LABEL_23:
    sub_2341579B4(3, 0, 114, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/sqrt.c", 88);
    return 0;
  }
  v15 = (int)a2[2];
  if (!(_DWORD)v15)
    goto LABEL_12;
  v16 = 0;
  v17 = *(uint64_t **)a2;
  do
  {
    v18 = *v17++;
    v16 |= v18;
    --v15;
  }
  while (v15);
  if (!v16 || sub_234162B4C(a2))
  {
LABEL_12:
    v19 = a1;
    if (a1 || (v19 = sub_234161F88()) != 0)
    {
      v20 = sub_234162B4C(a2);
      if (v20)
      {
        v21 = v20;
        if (sub_23416171C((_QWORD **)v19, 1uLL))
        {
          v22 = v21;
LABEL_32:
          *((_DWORD *)v19 + 4) = 0;
          *(_QWORD *)*v19 = v22;
          v28 = 1;
          goto LABEL_33;
        }
        goto LABEL_35;
      }
LABEL_29:
      v28 = 0;
      *((_DWORD *)v19 + 4) = 0;
LABEL_33:
      *((_DWORD *)v19 + 2) = v28;
      return v19;
    }
    goto LABEL_35;
  }
  sub_234162DC8((_QWORD *)a4);
  v30 = sub_234162E68(a4);
  v31 = sub_234162E68(a4);
  v32 = sub_234162E68(a4);
  v33 = sub_234162E68(a4);
  v34 = sub_234162E68(a4);
  v35 = sub_234162E68(a4);
  if (!v35)
    goto LABEL_88;
  v36 = (uint64_t)v35;
  v71 = (unsigned int *)v31;
  v19 = a1;
  if (!a1)
  {
    v19 = sub_234161F88();
    if (!v19)
      goto LABEL_86;
  }
  if (!sub_2341637E4((uint64_t)v30, (uint64_t)a2, a3, a4))
    goto LABEL_86;
  for (i = 1; i >> 6 >= *(int *)(a3 + 8) || ((*(_QWORD *)(*(_QWORD *)a3 + 8 * (i >> 6)) >> i) & 1) == 0; ++i)
    ;
  if ((_DWORD)i == 2)
  {
    if (sub_234163DA4((unint64_t **)v33, (uint64_t)v30, (uint64_t)v30, a3, a4))
    {
      if (sub_23416371C((uint64_t)v32, a3, 3u))
      {
        *((_DWORD *)v32 + 4) = 0;
        if (sub_2341652E0((uint64_t)v71, (uint64_t)v33, (uint64_t)v32, a3, a4, 0))
        {
          if (sub_2341642D0(v36, (uint64_t)v71, a3, a4)
            && sub_234164140((uint64_t)v33, (uint64_t)v33, v36, a3, a4)
            && sub_234161AB0((uint64_t)v33, 1uLL)
            && sub_234164140((uint64_t)v34, (uint64_t)v30, (uint64_t)v71, a3, a4)
            && sub_234164140((uint64_t)v34, (uint64_t)v34, (uint64_t)v33, a3, a4)
            && sub_234162060((void **)v19, (uint64_t)v34))
          {
            goto LABEL_50;
          }
        }
      }
    }
    goto LABEL_86;
  }
  if ((_DWORD)i == 1)
  {
    if (sub_23416371C((uint64_t)v32, a3, 2u))
    {
      *((_DWORD *)v32 + 4) = 0;
      if (sub_2341618E4((uint64_t)v32, 1uLL))
      {
        if (sub_2341652E0((uint64_t)v19, (uint64_t)v30, (uint64_t)v32, a3, a4, 0))
        {
LABEL_50:
          if (!sub_2341642D0((uint64_t)v34, (uint64_t)v19, a3, a4))
            goto LABEL_86;
          if (!sub_234162A28((uint64_t)v34, (uint64_t)v30))
            goto LABEL_89;
          v38 = 110;
          v39 = 409;
          goto LABEL_85;
        }
      }
    }
LABEL_86:
    if (v19 != a1)
      sub_234161FC4((_QWORD **)v19);
LABEL_88:
    v19 = 0;
    goto LABEL_89;
  }
  if (!sub_234162060((void **)v32, a3))
    goto LABEL_86;
  v69 = (uint64_t)v34;
  v70 = (uint64_t)v33;
  v68 = (uint64_t)v30;
  *((_DWORD *)v32 + 4) = 0;
  v40 = 2;
  while (1)
  {
    if (v40 <= 0x15)
      goto LABEL_76;
    v41 = sub_2341621D4((uint64_t *)a3);
    if (!sub_23416BC9C(v36, v41, 0, 0))
      goto LABEL_86;
    v42 = *(_DWORD *)(v36 + 8);
    v43 = v42;
    if ((sub_234162948(*(uint64_t **)v36, v42, *(uint64_t **)a3, *(int *)(a3 + 8)) & 0x80000000) == 0)
    {
      v44 = sub_2341614D0;
      if (!*(_DWORD *)(a3 + 16))
        v44 = sub_234161C30;
      if (!v44(v36, v36, a3))
        goto LABEL_86;
      v42 = *(_DWORD *)(v36 + 8);
      v43 = v42;
    }
    if (!v42)
      goto LABEL_76;
    v45 = 0;
    v46 = *(uint64_t **)v36;
    do
    {
      v47 = *v46++;
      v45 |= v47;
      --v43;
    }
    while (v43);
    if (!v45)
    {
LABEL_76:
      if (!sub_234161A58(v36, v40))
        goto LABEL_86;
    }
    v48 = sub_234169338(v36, (uint64_t)v32, a4);
    if (v48 < -1)
      goto LABEL_86;
    if (v48 != 1)
      break;
    if (++v40 == 82)
      goto LABEL_84;
  }
  if (v48 != -1)
  {
    if (!v48)
    {
      v38 = 114;
      v39 = 257;
      goto LABEL_85;
    }
LABEL_84:
    v38 = 115;
    v39 = 267;
    goto LABEL_85;
  }
  if (!sub_23416371C((uint64_t)v32, (uint64_t)v32, i)
    || !sub_2341652E0(v36, v36, (uint64_t)v32, a3, a4, 0))
  {
    goto LABEL_86;
  }
  if (sub_234162B4C((unsigned int *)v36))
  {
    v38 = 114;
    v39 = 282;
LABEL_85:
    sub_2341579B4(3, 0, v38, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/sqrt.c", v39);
    goto LABEL_86;
  }
  if (!sub_234166C94(v70, (uint64_t *)v32))
    goto LABEL_86;
  v51 = *(int *)(v70 + 8);
  if ((_DWORD)v51)
  {
    v52 = 0;
    v53 = *(uint64_t **)v70;
    do
    {
      v54 = *v53++;
      v52 |= v54;
      --v51;
    }
    while (v51);
    if (v52)
    {
      if (!sub_2341652E0(v69, v68, v70, a3, a4, 0))
        goto LABEL_86;
      v55 = *(int *)(v69 + 8);
      if (!(_DWORD)v55)
        goto LABEL_134;
      v56 = 0;
      v57 = *(uint64_t **)v69;
      do
      {
        v58 = *v57++;
        v56 |= v58;
        --v55;
      }
      while (v55);
      if (!v56)
        goto LABEL_134;
LABEL_113:
      if (sub_2341642D0((uint64_t)v71, v69, a3, a4)
        && sub_234164140((uint64_t)v71, (uint64_t)v71, v68, a3, a4))
      {
        v64 = v68;
        v63 = v69;
        v65 = v69;
        while (sub_234164140(v63, v65, v64, a3, a4))
        {
          if (sub_234162B4C(v71))
          {
            v34 = (unint64_t *)v69;
            v30 = (unint64_t *)v68;
            if (sub_234162060((void **)v19, v69))
              goto LABEL_50;
            goto LABEL_86;
          }
          v66 = i - 2;
          if (i < 2)
          {
LABEL_135:
            v38 = 110;
            v39 = 377;
            goto LABEL_85;
          }
          v67 = i - 1;
          LODWORD(i) = 1;
          while (1)
          {
            if ((_DWORD)i == 1)
            {
              if (!sub_2341642D0(v70, (uint64_t)v71, a3, a4))
                goto LABEL_86;
            }
            else if (!sub_234164140(v70, v70, v70, a3, a4))
            {
              goto LABEL_86;
            }
            if (sub_234162B4C((unsigned int *)v70))
              break;
            LODWORD(i) = i + 1;
            --v66;
            --v67;
            if (v66 == -1)
              goto LABEL_135;
          }
          if (!sub_234162060((void **)v70, v36))
            goto LABEL_86;
          if (v66 >= 1)
          {
            while (sub_2341642D0(v70, v70, a3, a4))
            {
              if (--v67 < 2)
                goto LABEL_131;
            }
            goto LABEL_86;
          }
LABEL_131:
          if (!sub_234164140(v36, v70, v70, a3, a4)
            || !sub_234164140(v69, v69, v70, a3, a4))
          {
            goto LABEL_86;
          }
          v63 = (uint64_t)v71;
          v65 = (uint64_t)v71;
          v64 = v36;
        }
      }
      goto LABEL_86;
    }
  }
  if (!sub_2341637E4(v70, v68, a3, a4))
    goto LABEL_86;
  v59 = *(int *)(v70 + 8);
  if ((_DWORD)v59)
  {
    v60 = 0;
    v61 = *(uint64_t **)v70;
    do
    {
      v62 = *v61++;
      v60 |= v62;
      --v59;
    }
    while (v59);
    if (v60)
    {
      if (!sub_23416171C((_QWORD **)v69, 1uLL))
        goto LABEL_86;
      *(_DWORD *)(v69 + 16) = 0;
      **(_QWORD **)v69 = 1;
      *(_DWORD *)(v69 + 8) = 1;
      goto LABEL_113;
    }
  }
LABEL_134:
  *((_DWORD *)v19 + 4) = 0;
  *((_DWORD *)v19 + 2) = 0;
LABEL_89:
  if (!*(_BYTE *)(a4 + 40))
  {
    v49 = *(_QWORD *)(a4 + 8);
    v50 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v50;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v49 + 8 * v50);
  }
  return v19;
}

uint64_t sub_23416CD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unsigned int v15;
  char v16;
  unint64_t *v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_DWORD *)(a2 + 16))
  {
    sub_2341579B4(3, 0, 109, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/sqrt.c", 430);
    return 0;
  }
  else
  {
    v6 = *(int *)(a2 + 8);
    if (!(_DWORD)v6)
      goto LABEL_27;
    v8 = 0;
    v9 = *(uint64_t **)a2;
    do
    {
      v10 = *v9++;
      v8 |= v10;
      --v6;
    }
    while (v6);
    if (v8)
    {
      sub_234162DC8((_QWORD *)a3);
      v11 = (unint64_t *)a1;
      if (a1 == a2)
        v11 = sub_234162E68(a3);
      v12 = (uint64_t *)sub_234162E68(a3);
      v13 = sub_234162E68(a3);
      v14 = sub_234162E68(a3);
      result = 0;
      if (v11)
      {
        if (v12)
        {
          if (v13)
          {
            if (v14)
            {
              sub_234195C74(&stru_256157E70, (void (*)(void))sub_234162138);
              v15 = sub_2341621D4((uint64_t *)a2);
              result = sub_2341634F4((uint64_t)v11, &qword_256159710, v15 >> 1);
              if ((_DWORD)result)
              {
                if (sub_234162F7C((unint64_t *)v12, 0, a2, (uint64_t)v11, a3))
                {
                  v16 = 1;
                  do
                  {
                    v17 = v13;
                    if (!sub_2341614D0((uint64_t)v12, (uint64_t)v12, (uint64_t)v11)
                      || !sub_234166C94((uint64_t)v11, v12)
                      || !sub_2341641F8((uint64_t)v12, (uint64_t)v11, a3)
                      || !sub_234161C30((uint64_t)v14, a2, (uint64_t)v12))
                    {
                      break;
                    }
                    *((_DWORD *)v14 + 4) = 0;
                    if ((v16 & 1) == 0 && (sub_234162A28((uint64_t)v14, (uint64_t)v13) & 0x80000000) == 0)
                    {
                      if (sub_234162A28((uint64_t)v12, a2))
                      {
                        v18 = 110;
                        v19 = 487;
                        goto LABEL_24;
                      }
                      result = a1 != a2 || sub_234162060((void **)a2, (uint64_t)v11) != 0;
                      goto LABEL_25;
                    }
                    v16 = 0;
                    v13 = v14;
                    v14 = v17;
                  }
                  while (sub_234162F7C((unint64_t *)v12, 0, a2, (uint64_t)v11, a3));
                }
                v18 = 3;
                v19 = 467;
LABEL_24:
                sub_2341579B4(3, 0, v18, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/bn/sqrt.c", v19);
                result = 0;
              }
            }
          }
        }
      }
LABEL_25:
      if (!*(_BYTE *)(a3 + 40))
      {
        v20 = *(_QWORD *)(a3 + 8);
        v21 = *(_QWORD *)(a3 + 16) - 1;
        *(_QWORD *)(a3 + 16) = v21;
        *(_QWORD *)(a3 + 32) = *(_QWORD *)(v20 + 8 * v21);
      }
    }
    else
    {
LABEL_27:
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23416CFFC(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_23416D004(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t sub_23416D00C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_23416D014(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3);
}

void sub_23416D01C(void *a1)
{
  bzero(a1, 0x248uLL);
}

_QWORD *sub_23416D024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = sub_23418E2E4(0x248uLL);
  bzero(v8, 0x248uLL);
  if (!sub_23416D0B8(v8, a1, a2, a3, a4) && v8)
  {
    if (*v8)
    {
      (*(void (**)(_QWORD *))(*v8 + 24))(v8);
      *v8 = 0;
    }
    sub_23418E3C4(v8);
    return 0;
  }
  return v8;
}

uint64_t sub_23416D0B8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_QWORD *)(a2 + 8))
    return sub_23416D184(a1, (unsigned __int8 *)a2, a3, a4, a5, 0);
  sub_2341579B4(30, 0, 124, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/aead.c", 65);
  *a1 = 0;
  return 0;
}

void sub_23416D114(_QWORD *a1)
{
  if (a1)
  {
    if (*a1)
    {
      (*(void (**)(_QWORD *))(*a1 + 24))(a1);
      *a1 = 0;
    }
    sub_23418E3C4(a1);
  }
}

uint64_t sub_23416D154(uint64_t result)
{
  _QWORD *v1;

  if (*(_QWORD *)result)
  {
    v1 = (_QWORD *)result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    *v1 = 0;
  }
  return result;
}

uint64_t sub_23416D184(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  if (*a2 != a4)
  {
    sub_2341579B4(30, 0, 120, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/aead.c", 78);
    goto LABEL_6;
  }
  *a1 = a2;
  v7 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*((_QWORD *)a2 + 1);
  if (v7)
  {
    result = v7(a1, a3, a4, a5);
    if ((_DWORD)result)
      return result;
    goto LABEL_6;
  }
  result = (*((uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))a2 + 2))(a1, a3, a4, a5, a6);
  if (!(_DWORD)result)
  {
LABEL_6:
    result = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t sub_23416D21C(uint64_t a1, char *a2, _QWORD *a3, size_t a4, uint64_t a5, uint64_t a6, char *a7, size_t a8)
{
  int v12;
  __int16 v13;
  size_t v14;
  uint64_t result;
  unsigned int (*v16)(uint64_t, char *, char *, uint64_t *, size_t);
  uint64_t v17;

  if (__CFADD__(a8, *(unsigned __int8 *)(*(_QWORD *)a1 + 2)))
  {
    v12 = 117;
    v13 = 123;
LABEL_10:
    sub_2341579B4(30, 0, v12, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/aead.c", v13);
    goto LABEL_11;
  }
  if (a4 < a8)
  {
    v12 = 103;
    v13 = 128;
    goto LABEL_10;
  }
  if (a7 != a2 && &a2[a4] > a7 && &a7[a8] > a2)
  {
    v12 = 115;
    v13 = 133;
    goto LABEL_10;
  }
  v16 = *(unsigned int (**)(uint64_t, char *, char *, uint64_t *, size_t))(*(_QWORD *)a1 + 40);
  v17 = 0;
  if (v16(a1, a2, &a2[a8], &v17, a4 - a8))
  {
    v14 = v17 + a8;
    result = 1;
    goto LABEL_14;
  }
LABEL_11:
  if (a4)
    bzero(a2, a4);
  v14 = 0;
  result = 0;
LABEL_14:
  *a3 = v14;
  return result;
}

uint64_t sub_23416D340(uint64_t *a1, char *a2, char *a3, _QWORD *a4, size_t a5, uint64_t a6, uint64_t a7, char *a8, size_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v15;
  char *v16;
  BOOL v17;
  int v18;
  __int16 v19;
  uint64_t result;
  uint64_t v21;

  v15 = (unint64_t)&a8[a9];
  v16 = &a2[a9];
  if (a8 != a2 && (v15 > (unint64_t)a2 ? (v17 = v16 > a8) : (v17 = 0), v17)
    || &a3[a5] > a2 && v16 > a3
    || &a3[a5] > a8 && v15 > (unint64_t)a3)
  {
    v18 = 115;
    v19 = 162;
LABEL_11:
    sub_2341579B4(30, 0, v18, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/aead.c", v19);
    goto LABEL_12;
  }
  v21 = *a1;
  if (a11 && !*(_DWORD *)(v21 + 4))
  {
    v18 = 112;
    v19 = 167;
    goto LABEL_11;
  }
  if ((*(unsigned int (**)(uint64_t *, char *, char *, _QWORD *, size_t))(v21 + 40))(a1, a2, a3, a4, a5))
    return 1;
LABEL_12:
  if (a9)
    bzero(a2, a9);
  if (a5)
    bzero(a3, a5);
  result = 0;
  *a4 = 0;
  return result;
}

uint64_t sub_23416D470(unsigned __int8 *a1, char *a2, size_t *a3, size_t a4, uint64_t a5, uint64_t a6, char *a7, unint64_t a8)
{
  int v11;
  __int16 v12;
  size_t v13;
  uint64_t result;
  unsigned int (*v15)(unsigned __int8 *, char *);
  unint64_t v16;

  if (a7 != a2 && &a2[a4] > a7 && &a7[a8] > a2)
  {
    v11 = 115;
    v12 = 191;
    goto LABEL_5;
  }
  v15 = *(unsigned int (**)(unsigned __int8 *, char *))(*(_QWORD *)a1 + 32);
  if (!v15)
  {
    v16 = a1[576];
    v13 = a8 - v16;
    if (a8 >= v16)
    {
      if (v13 <= a4)
      {
        if (sub_23416D5AC((uint64_t)a1, a2, a5, a6, a7, a8 - v16))
        {
          result = 1;
LABEL_9:
          *a3 = v13;
          return result;
        }
LABEL_6:
        if (a4)
          bzero(a2, a4);
        v13 = 0;
        result = 0;
        goto LABEL_9;
      }
      v11 = 103;
      v12 = 214;
    }
    else
    {
      v11 = 101;
      v12 = 208;
    }
LABEL_5:
    sub_2341579B4(30, 0, v11, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/aead.c", v12);
    goto LABEL_6;
  }
  if (!v15(a1, a2))
    goto LABEL_6;
  return 1;
}

uint64_t sub_23416D5AC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char *a5, size_t a6)
{
  int v8;
  __int16 v9;
  unsigned int (*v10)(uint64_t, char *);

  if (a5 != a2 && &a5[a6] > a2 && &a2[a6] > a5)
  {
    v8 = 115;
    v9 = 238;
LABEL_9:
    sub_2341579B4(30, 0, v8, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/aead.c", v9);
    goto LABEL_10;
  }
  v10 = *(unsigned int (**)(uint64_t, char *))(*(_QWORD *)a1 + 48);
  if (!v10)
  {
    v8 = 104;
    v9 = 243;
    goto LABEL_9;
  }
  if (v10(a1, a2))
    return 1;
LABEL_10:
  if (a6)
    bzero(a2, a6);
  return 0;
}

uint64_t sub_23416D66C(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 56);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_23416D684(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 64);
  if (v5)
  {
    v6 = v5();
LABEL_6:
    v8 = 1;
    goto LABEL_7;
  }
  v7 = a1[576];
  v6 = v7 + a4;
  if (!__CFADD__(v7, a4))
    goto LABEL_6;
  sub_2341579B4(30, 0, 69, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/aead.c", 281);
  v6 = 0;
  v8 = 0;
LABEL_7:
  *a2 = v6;
  return v8;
}

double sub_23416D6FC(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double sub_23416D71C()
{
  _QWORD *v0;
  double result;

  v0 = sub_23418E2E4(0x98uLL);
  if (v0)
  {
    v0[18] = 0;
    result = 0.0;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *(_OWORD *)v0 = 0u;
  }
  return result;
}

uint64_t sub_23416D754(uint64_t a1)
{
  void (*v2)(uint64_t);

  if (*(_QWORD *)a1)
  {
    v2 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 40);
    if (v2)
      v2(a1);
  }
  sub_23418E3C4(*(_QWORD **)(a1 + 16));
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return 1;
}

void sub_23416D7B0(_QWORD *a1)
{
  if (a1)
  {
    sub_23416D754((uint64_t)a1);
    sub_23418E3C4(a1);
  }
}

uint64_t sub_23416D7DC(uint64_t a1, uint64_t *a2)
{
  int v3;
  __int16 v4;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const void *v14;
  uint64_t v15;
  unint64_t v16;

  if (!a2 || !*a2)
  {
    v3 = 108;
    v4 = 103;
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 36))
  {
    v3 = 66;
    v4 = 108;
LABEL_6:
    sub_2341579B4(30, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/cipher.c", v4);
    return 0;
  }
  sub_23416D754(a1);
  v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *((_OWORD *)a2 + 5);
  v10 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  v12 = *((_OWORD *)a2 + 7);
  v11 = *((_OWORD *)a2 + 8);
  v13 = *((_OWORD *)a2 + 6);
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 96) = v13;
  v14 = (const void *)a2[2];
  v15 = *a2;
  if (v14)
  {
    v16 = *(unsigned int *)(v15 + 16);
    if ((_DWORD)v16)
    {
      result = (uint64_t)sub_23418E58C(v14, v16);
      *(_QWORD *)(a1 + 16) = result;
      if (!result)
        goto LABEL_14;
      v15 = *a2;
    }
  }
  if ((*(_BYTE *)(v15 + 21) & 0x10) == 0)
    return 1;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(v15 + 48))(a2, 8, 0, a1);
  if ((_DWORD)result)
    return 1;
LABEL_14:
  *(_QWORD *)a1 = 0;
  return result;
}

uint64_t sub_23416D8D8(uint64_t a1)
{
  sub_23416D754(a1);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  return 1;
}

uint64_t sub_23416D918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  __int16 v15;
  int v16;
  unsigned int v17;
  size_t v18;
  void *v19;
  const void *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  if (a6 == -1)
  {
    v10 = *(unsigned int *)(a1 + 28);
  }
  else
  {
    v10 = a6 != 0;
    *(_DWORD *)(a1 + 28) = v10;
  }
  v11 = *(_QWORD *)a1;
  if (a2)
  {
    if (v11)
    {
      sub_23416D754(a1);
      *(_DWORD *)(a1 + 28) = v10;
    }
    *(_QWORD *)a1 = a2;
    v12 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v12)
    {
      result = (uint64_t)sub_23418E2E4(v12);
      *(_QWORD *)(a1 + 16) = result;
      if (!result)
      {
        *(_QWORD *)a1 = 0;
        return result;
      }
      v11 = *(_QWORD *)a1;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = 0;
      v11 = a2;
    }
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = 0;
    if ((*(_BYTE *)(v11 + 21) & 2) == 0)
      goto LABEL_16;
    if (sub_23416DAF8(a1))
    {
      v11 = *(_QWORD *)a1;
      goto LABEL_16;
    }
    *(_QWORD *)a1 = 0;
    v14 = 107;
    v15 = 178;
LABEL_23:
    sub_2341579B4(30, 0, v14, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/cipher.c", v15);
    return 0;
  }
  if (!v11)
  {
    v14 = 114;
    v15 = 183;
    goto LABEL_23;
  }
LABEL_16:
  v16 = *(_DWORD *)(v11 + 20);
  if ((v16 & 0x100) == 0)
  {
    switch(v16 & 0x3F)
    {
      case 0:
      case 1:
        break;
      case 2:
        goto LABEL_26;
      case 3:
        *(_DWORD *)(a1 + 104) = 0;
LABEL_26:
        if (a5)
        {
          v21 = sub_23416DB9C(a1);
          if (v21)
            memcpy((void *)(a1 + 36), a5, v21);
        }
        v22 = sub_23416DB9C(a1);
        if (!v22)
          break;
        v18 = v22;
        v20 = (const void *)(a1 + 36);
        v19 = (void *)(a1 + 52);
LABEL_31:
        memcpy(v19, v20, v18);
        break;
      case 4:
      case 5:
        *(_DWORD *)(a1 + 104) = 0;
        if (!a5)
          break;
        v17 = sub_23416DB9C(a1);
        if (!v17)
          break;
        v18 = v17;
        v19 = (void *)(a1 + 52);
        v20 = a5;
        goto LABEL_31;
      default:
        return 0;
    }
  }
  v23 = *(_QWORD *)a1;
  if (!a4 && (*(_BYTE *)(v23 + 20) & 0x80) == 0
    || (result = (*(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t))(v23 + 24))(a1, a4, a5, v10),
        (_DWORD)result))
  {
    *(_DWORD *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 108) = 0;
    result = 1;
    *(_DWORD *)(a1 + 144) = 0;
  }
  return result;
}

uint64_t sub_23416DAF8(uint64_t a1)
{
  uint64_t (*v1)(void);
  uint64_t result;
  int v3;
  __int16 v4;

  if (*(_QWORD *)a1)
  {
    v1 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 48);
    if (v1)
    {
      result = v1();
      if ((_DWORD)result != -1)
        return result;
      v3 = 105;
      v4 = 631;
    }
    else
    {
      v3 = 104;
      v4 = 625;
    }
  }
  else
  {
    v3 = 114;
    v4 = 620;
  }
  sub_2341579B4(30, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/cipher.c", v4);
  return 0;
}

uint64_t sub_23416DB7C(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)a1 + 20) & 0xFFFFFFC0;
}

uint64_t sub_23416DB8C(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)a1 + 20) & 0x3F;
}

uint64_t sub_23416DB9C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 20) & 0x3F) == 6)
  {
    if (sub_23416DAF8(a1) == 1)
      return 0;
    v1 = *(_QWORD *)a1;
  }
  return *(unsigned int *)(v1 + 12);
}

uint64_t sub_23416DC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  return sub_23416D918(a1, a2, a3, a4, a5, 1);
}

uint64_t sub_23416DC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  return sub_23416D918(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_23416DC10(int *a1, uint64_t a2, int *a3, char *__src, size_t __n)
{
  int v5;
  __int16 v6;
  int v7;
  uint64_t v9;
  int v10;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  if (a1[36])
  {
    v5 = 66;
    v6 = 259;
LABEL_13:
    sub_2341579B4(30, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/cipher.c", v6);
    return 0;
  }
  v7 = __n;
  a1[36] = 1;
  v9 = *(_QWORD *)a1;
  v10 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if (v10 >= 2 && (v10 ^ 0x7FFFFFFF) < (int)__n)
  {
    v5 = 69;
    v6 = 271;
    goto LABEL_13;
  }
  v12 = __src;
  v14 = a2;
  if ((*(_BYTE *)(v9 + 21) & 4) != 0)
  {
    v19 = (*(uint64_t (**)(int *, uint64_t, char *, _QWORD))(v9 + 32))(a1, a2, __src, (int)__n);
    if (v19 < 0)
      return 0;
    *a3 = v19;
    goto LABEL_34;
  }
  if ((int)__n <= 0)
  {
    result = 0;
    *a3 = 0;
    if (!(_DWORD)__n)
      goto LABEL_34;
    return result;
  }
  v15 = a1[25];
  if (!(_DWORD)v15)
  {
    if (((v10 - 1) & __n) != 0)
    {
      v10 = 0;
      goto LABEL_26;
    }
    result = (*(uint64_t (**)(int *, uint64_t, char *, _QWORD))(v9 + 32))(a1, a2, __src, __n);
    if (!(_DWORD)result)
    {
      *a3 = 0;
      return result;
    }
    *a3 = v7;
LABEL_34:
    a1[36] = 0;
    return 1;
  }
  v16 = v10 - v15;
  v17 = __n - (v10 - v15);
  if ((int)__n < v10 - (int)v15)
  {
    memcpy((char *)a1 + v15 + 68, __src, __n);
    a1[25] += v7;
    *a3 = 0;
    goto LABEL_34;
  }
  v20 = v16;
  if (v10 != (_DWORD)v15)
  {
    memcpy((char *)a1 + v15 + 68, __src, v16);
    v9 = *(_QWORD *)a1;
  }
  result = (*(uint64_t (**)(int *, uint64_t, int *, _QWORD))(v9 + 32))(a1, v14, a1 + 17, v10);
  if (!(_DWORD)result)
    return result;
  v12 += v20;
  v14 += v10;
  v7 = v17;
LABEL_26:
  *a3 = v10;
  v21 = (*(_DWORD *)(*(_QWORD *)a1 + 4) - 1) & v7;
  v22 = (v7 - v21);
  if ((int)v22 < 1)
  {
LABEL_29:
    if (v21)
      memcpy(a1 + 17, &v12[(int)v22], v21);
    a1[25] = v21;
    goto LABEL_34;
  }
  result = (*(uint64_t (**)(int *, uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 32))(a1, v14, v12, v22);
  if ((_DWORD)result)
  {
    *a3 += v22;
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_23416DE40(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  __int16 v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (*((_DWORD *)a1 + 36))
  {
    v3 = 66;
    v4 = 352;
LABEL_3:
    sub_2341579B4(30, 0, v3, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/cipher.c", v4);
    return 0;
  }
  v9 = *a1;
  if ((*(_BYTE *)(*a1 + 21) & 4) != 0)
  {
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _QWORD))(v9 + 32))(a1, a2, 0, 0);
    if (v11 < 0)
      return 0;
    *a3 = v11;
    return 1;
  }
  v10 = *(unsigned int *)(v9 + 4);
  if ((_DWORD)v10 == 1)
    goto LABEL_7;
  v12 = *((unsigned int *)a1 + 25);
  if ((*((_BYTE *)a1 + 33) & 8) != 0)
  {
    if ((_DWORD)v12)
    {
      v3 = 106;
      v4 = 378;
      goto LABEL_3;
    }
LABEL_7:
    *a3 = 0;
    return 1;
  }
  if (v10 > v12)
    memset((char *)a1 + v12 + 68, v10 - v12, (v10 + ~(_DWORD)v12) + 1);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, (uint64_t)a1 + 68, v10);
  if ((_DWORD)result)
  {
    *a3 = v10;
    return 1;
  }
  return result;
}

uint64_t sub_23416DF58(int *a1, void *a2, int *a3, char *__src, size_t __n)
{
  int v5;
  __int16 v6;
  uint64_t v9;
  size_t v10;
  uint64_t v14;
  int v15;
  uint64_t result;
  int v17;
  int v18;

  if (a1[36])
  {
    v5 = 66;
    v6 = 402;
LABEL_21:
    sub_2341579B4(30, 0, v5, (uint64_t)"../../../../../../../../Sources/CHIPFramework/connectedhomeip/third_party/boringssl/repo/src/crypto/fipsmodule/cipher/cipher.c", v6);
    return 0;
  }
  v9 = *(_QWORD *)a1;
  v10 = *(unsigned int *)(*(_QWORD *)a1 + 4);
  if (v10 >= 2 && (int)(v10 ^ 0x7FFFFFFF) < (int)__n)
  {
    v5 = 69;
    v6 = 410;
    goto LABEL_21;
  }
  v14 = (uint64_t)a2;
  if ((*(_BYTE *)(v9 + 21) & 4) != 0)
  {
    v17 = (*(uint64_t (**)(int *, void *, char *, _QWORD))(v9 + 32))(a1, a2, __src, (int)__n);
    v18 = v17 & ~(v17 >> 31);
    result = v17 >= 0;
    *a3 = v18;
    return result;
  }
  if ((int)__n <= 0)
  {
    *a3 = 0;
    return (_DWORD)__n == 0;
  }
  if ((*((_BYTE *)a1 + 33) & 8) != 0)
    return sub_23416DC10(a1, (uint64_t)a2, a3, __src, __n);
  v15 = a1[27];
  if (v15)
  {
    if ((_DWORD)v10)
      memcpy(a2, a1 + 28, v10);
    v14 += v10;
  }
  result = sub_23416DC10(a1, v14, a3, __src, __n);
  if ((_DWORD)result)
  {
    if (v10 < 2 || a1[25])
    {
      a1[27] = 0;
      if (!v15)
        return 1;
    }
    else
    {
      *a3 -= v10;
      a1[27] = 1;
      memcpy(a1 + 28, (const void *)(v14 + *a3), v10);
      if (!v15)
        return 1;
    }
    *a3 += v10;
    return 1;
  }
  return result;
}

