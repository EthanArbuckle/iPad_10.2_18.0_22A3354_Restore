_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

__n128 thinBin(__int128 *a1)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int i;
  uint64_t v50;
  int v51;
  unsigned int v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __n128 result;

  v2 = (__int128 *)malloc_type_malloc(0x10000uLL, 0x7ACDE883uLL);
  v3 = a1[3];
  v5 = *a1;
  v4 = a1[1];
  v2[2] = a1[2];
  v2[3] = v3;
  *v2 = v5;
  v2[1] = v4;
  v6 = a1[7];
  v8 = a1[4];
  v7 = a1[5];
  v2[6] = a1[6];
  v2[7] = v6;
  v2[4] = v8;
  v2[5] = v7;
  v9 = a1[11];
  v11 = a1[8];
  v10 = a1[9];
  v2[10] = a1[10];
  v2[11] = v9;
  v2[8] = v11;
  v2[9] = v10;
  v12 = a1[15];
  v14 = a1[12];
  v13 = a1[13];
  v2[14] = a1[14];
  v2[15] = v12;
  v2[12] = v14;
  v2[13] = v13;
  v15 = v2 + 16;
  v16 = a1 + 16;
  v17 = 1;
  v18 = v2 + 16;
  v19 = a1 + 16;
  do
  {
    v20 = 0;
    *(_BYTE *)v18 = *(_BYTE *)v19;
    v21 = (8 * (*((_BYTE *)v19 - 255) & 1)) & 0xC8 | (16 * (*((_BYTE *)v19 + 1) & 1)) & 0xD8 | (32
                                                                                              * (*((_BYTE *)v19 + 257) & 1)) | *(_BYTE *)(v19 - 16) & 1 | (2 * (*(_BYTE *)v19 & 1)) & 0xFB | (4 * (v19[16] & 1));
    do
    {
      v22 = ((*((_BYTE *)v19 + v20 + 2) & 1) << 7) | ((*((_BYTE *)v19 + v20 - 254) & 1) << 6) | ((*((_BYTE *)v19
                                                                                                  + v20
                                                                                                  + 258) & 1) << 8) | v21;
      *((_BYTE *)v18 + v20 + 1) = qdthin1[v22];
      v21 = v22 >> 3;
      ++v20;
    }
    while ((_DWORD)v20 != 254);
    v23 = (char *)v18 + v20;
    v24 = (char *)v19 + v20;
    v18 = (_OWORD *)((char *)v18 + v20 + 2);
    v23[1] = v24[1];
    v19 = v24 + 2;
    ++v17;
  }
  while (v17 != 255);
  v25 = *v19;
  v26 = v19[1];
  v27 = v19[3];
  v18[2] = v19[2];
  v18[3] = v27;
  *v18 = v25;
  v18[1] = v26;
  v28 = v19[4];
  v29 = v19[5];
  v30 = v19[7];
  v18[6] = v19[6];
  v18[7] = v30;
  v18[4] = v28;
  v18[5] = v29;
  v31 = v19[8];
  v32 = v19[9];
  v33 = v19[11];
  v18[10] = v19[10];
  v18[11] = v33;
  v18[8] = v31;
  v18[9] = v32;
  v34 = v19[12];
  v35 = v19[13];
  v36 = v19[15];
  v18[14] = v19[14];
  v18[15] = v36;
  v18[12] = v34;
  v18[13] = v35;
  v37 = *v2;
  v38 = v2[1];
  v39 = v2[3];
  a1[2] = v2[2];
  a1[3] = v39;
  *a1 = v37;
  a1[1] = v38;
  v40 = v2[4];
  v41 = v2[5];
  v42 = v2[7];
  a1[6] = v2[6];
  a1[7] = v42;
  a1[4] = v40;
  a1[5] = v41;
  v43 = v2[8];
  v44 = v2[9];
  v45 = v2[11];
  a1[10] = v2[10];
  a1[11] = v45;
  a1[8] = v43;
  a1[9] = v44;
  v46 = v2[12];
  v47 = v2[13];
  v48 = v2[15];
  a1[14] = v2[14];
  a1[15] = v48;
  a1[12] = v46;
  a1[13] = v47;
  for (i = 1; i != 255; ++i)
  {
    v50 = 0;
    *(_BYTE *)v16 = *(_BYTE *)v15;
    v51 = (32 * (*((_BYTE *)v15 - 255) & 1)) | (16 * (*((_BYTE *)v15 + 1) & 1)) | (8 * (*((_BYTE *)v15 + 257) & 1)) | (4 * (*(_BYTE *)(v15 - 16) & 1)) | (2 * (*(_BYTE *)v15 & 1)) | v15[16] & 1;
    do
    {
      v52 = ((*((_BYTE *)v15 + v50 + 2) & 1) << 7) | ((*((_BYTE *)v15 + v50 - 254) & 1) << 8) | ((*((_BYTE *)v15
                                                                                                  + v50
                                                                                                  + 258) & 1) << 6) | v51;
      *((_BYTE *)v16 + v50 + 1) = qdthin2[v52];
      v51 = v52 >> 3;
      ++v50;
    }
    while ((_DWORD)v50 != 254);
    v53 = (char *)v16 + v50;
    v54 = (char *)v15 + v50;
    v16 = (_OWORD *)((char *)v16 + v50 + 2);
    v53[1] = v54[1];
    v15 = v54 + 2;
  }
  v55 = *v15;
  v56 = v15[1];
  v57 = v15[3];
  v16[2] = v15[2];
  v16[3] = v57;
  *v16 = v55;
  v16[1] = v56;
  v58 = v15[4];
  v59 = v15[5];
  v60 = v15[7];
  v16[6] = v15[6];
  v16[7] = v60;
  v16[4] = v58;
  v16[5] = v59;
  v61 = v15[8];
  v62 = v15[9];
  v63 = v15[11];
  v16[10] = v15[10];
  v16[11] = v63;
  v16[8] = v61;
  v16[9] = v62;
  v64 = v15[12];
  v65 = v15[13];
  v66 = v15[15];
  v16[14] = v15[14];
  v16[15] = v66;
  v16[12] = v64;
  v16[13] = v65;
  free(v2);
  return result;
}

uint64_t trimChain(uint64_t result, int a2, int a3, signed int a4)
{
  int v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if (a4 <= 6 && ((0x55u >> a4) & 1) != 0)
  {
    v4 = 0;
    v5 = (_BYTE *)(result + (a2 + (a3 << 8)));
    v6 = qword_1A15FAFC0[a4];
    v7 = qword_1A15FAFF8[a4];
    v8 = qword_1A15FB030[a4];
    v9 = 256;
    while (1)
    {
      result = v5[v6] & 1;
      v10 = v5[v8] & 1;
      if ((v5[v7] & 1) + (_DWORD)result + v10 != 1)
        break;
      if ((v5[v6] & 1) != 0)
      {
        *v5 = 3;
        if (v4 == -1)
          return result;
        v4 = -1;
        v5 += v6;
      }
      else
      {
        *v5 = 3;
        if (v10)
        {
          if (v4 == 1)
            return result;
          v4 = 1;
          v5 += v8;
        }
        else
        {
          v4 = 0;
          v5 += v7;
        }
      }
      if (!--v9)
        return result;
    }
    *v5 = 3;
  }
  return result;
}

void sub_1A138B19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A138B2AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

#error "1A138B86C: call analysis failed (funcsize=54)"

void sub_1A138BBE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A138BF1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A138C0C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A138C254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A138C2FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A138C398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A138C444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A138CDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1A138D0A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A138D0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A138D130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A138D178(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A138D1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A138D874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A138D970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A138DB9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1A138DEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A138E134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A138E248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A138E2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A138E378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A138E528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A138E76C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1A138E898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A138E968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A138E9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A138EC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A138EF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A138F278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A138F478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A138F550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A138F8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A138FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A138FFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_1A1390324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A139131C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&STACK[0x478], 8);
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy((_QWORD *)STACK[0x4B0]);

  _Unwind_Resume(a1);
}

void sub_1A1391788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v7 + 48);
  _Unwind_Resume(a1);
}

void sub_1A13918EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;

  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1A1391B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v13 = v12;

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  std::__list_imp<long long>::clear(v10);

  _Unwind_Resume(a1);
}

void sub_1A1391F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;
  uint64_t v33;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(*(_QWORD **)(v33 - 120));

  _Unwind_Resume(a1);
}

void sub_1A1392108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A139226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A13923FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1392850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  void *v46;
  void *v47;
  void *v48;
  void *v49;

  _Block_object_dispose(&a46, 8);
  a28 = a13;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);

  _Unwind_Resume(a1);
}

void sub_1A1393228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, vision::mod::ImageDescriptorBufferFloat32 *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21)
{
  uint64_t v21;

  _Block_object_dispose(&STACK[0x210], 8);
  if (STACK[0x230])
    operator delete((void *)STACK[0x230]);
  vision::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32((void **)&STACK[0x248]);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v21 - 256);

  _Unwind_Resume(a1);
}

void sub_1A13934B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  *(_QWORD *)(a1 + 56) = 0;
  v4 = a1 + 56;
  *(_QWORD *)(a1 + 48) = off_1E453AB20;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  std::map<long long,int>::map[abi:ne180100]((uint64_t *)(v4 + 24), a2 + 80);
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 48) = &off_1E453A8D0;
  result = *(__n128 *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(__n128 *)(a1 + 144) = result;
  return result;
}

void sub_1A1393680(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __Block_byref_object_dispose__221(uint64_t a1)
{
  void **v1;

  *(_QWORD *)(a1 + 48) = &off_1E453A8D0;
  v1 = (void **)(a1 + 48);
  free(*(void **)(a1 + 160));
  vision::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(v1);
}

void sub_1A139374C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A13937C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *__copy_helper_block_ea8_48c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = (_QWORD *)(a1 + 48);
  v2[2] = 0;
  return std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v2, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
}

void __destroy_helper_block_ea8_48c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t *std::map<long long,int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long long,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,int>,std::__tree_node<std::__value_type<long long,int>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1A139388C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__214(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__215(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

__n128 __Block_byref_object_copy__175(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__176(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1A13939AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  v19 = &v7[24 * v6];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v9 = v18.i64[0];
  v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = 0;
      v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_1A1393B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<long long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<long long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::__split_buffer<std::vector<long long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1A1394054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  _Block_object_dispose(&a33, 8);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }

  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(*(_QWORD **)(v40 - 240));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1A1394188(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A13941EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t __Block_byref_object_copy__190(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__191(uint64_t a1)
{

}

void sub_1A13943B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(a10);
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(a13);
  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy_(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(*(_QWORD **)(a1 + 56));
}

void sub_1A13945A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1394648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E452A5D0, MEMORY[0x1E0DE42E0]);
}

void sub_1A13946A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

_QWORD *__Block_byref_object_copy__178(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result[6] = result + 6;
  result[7] = result + 6;
  result[8] = 0;
  v2 = a2[8];
  if (v2)
  {
    v4 = a2[6];
    v3 = (uint64_t *)a2[7];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = result[6];
    *(_QWORD *)(v6 + 8) = v3;
    *v3 = v6;
    result[6] = v4;
    *(_QWORD *)(v4 + 8) = result + 6;
    result[8] = v2;
    a2[8] = 0;
  }
  return result;
}

_QWORD *__Block_byref_object_dispose__179(uint64_t a1)
{
  return std::__list_imp<long long>::clear((_QWORD *)(a1 + 48));
}

_QWORD *std::__list_imp<long long>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

__n128 __Block_byref_object_copy__172(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__173(uint64_t a1)
{
  return std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 48);
}

__n128 __Block_byref_object_copy__166(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__167(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1A1394B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v16;

  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(a10);
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(a13);
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(a16);
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(*(_QWORD **)(v16 - 32));
  _Unwind_Resume(a1);
}

void sub_1A1394DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1394F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A1395078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A1395324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v28;

  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1A1395784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void _addFileNameInStdStringPathToArray(uint64_t *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      goto LABEL_9;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    goto LABEL_9;
  }
  v6 = v3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lastPathComponent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v5, "length"))
    objc_msgSend(v6, "addObject:", v5);

  v3 = v6;
LABEL_9:

}

void sub_1A1395964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__201(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__202(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1A1395B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  vision::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32((void **)va);
  _Unwind_Resume(a1);
}

float *std::__minmax_element_impl[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__identity,std::__less<void,void>>(float *result, float *a2)
{
  float *v2;
  float v4;
  float v5;
  float *v6;
  float *v7;
  float *i;
  float *v9;
  float v10;
  float v11;
  float *v12;
  float *v13;

  v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    v5 = *result;
    v4 = result[1];
    if (v4 < *result)
      ++result;
    v6 = v4 >= *v2 ? v2 + 1 : v2;
    v7 = v2 + 2;
    if (v2 + 2 != a2)
    {
      if (v4 >= v5)
        v4 = *v2;
      for (i = v2 + 3; ; i += 2)
      {
        v9 = v7;
        if (i == a2)
          break;
        v11 = *(i - 1);
        v10 = *i;
        if (*i >= v11)
        {
          v12 = v2 + 3;
          if (v11 < v4)
          {
            v4 = *(i - 1);
            result = i - 1;
          }
          if (v10 >= *v6)
            v6 = v12;
        }
        else
        {
          v4 = *result;
          if (v10 < *result)
          {
            v4 = *i;
            result = i;
          }
          if (v11 >= *v6)
            v6 = i - 1;
        }
        v7 += 2;
        v13 = i + 1;
        v2 = v9;
        if (v13 == a2)
          return result;
      }
      if (*(i - 1) < *result)
        return i - 1;
    }
  }
  return result;
}

void std::vector<long long>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[8 * v5];
  v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    v18 = *((_QWORD *)v13 - 1);
    v13 -= 8;
    *((_QWORD *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

void sub_1A1395ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorBufferJoint::setAvailableFlagsForKthDescriptor(uint64_t this, int a2, int a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;

  if (a2 < 0 || *(_DWORD *)(this + 72) <= a2)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3692;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v4 = *(_QWORD *)(this + 120);
  v5 = (unint64_t)(2 * a2) >> 6;
  v6 = 1 << ((2 * a2) & 0x3E);
  if (a3)
    v7 = *(_QWORD *)(v4 + 8 * v5) | v6;
  else
    v7 = *(_QWORD *)(v4 + 8 * v5) & ~v6;
  *(_QWORD *)(v4 + 8 * v5) = v7;
  v8 = (unint64_t)((2 * a2) | 1) >> 6;
  v9 = 1 << ((2 * a2) | 1u);
  if (a4)
    v10 = *(_QWORD *)(v4 + 8 * v8) | v9;
  else
    v10 = *(_QWORD *)(v4 + 8 * v8) & ~v9;
  *(_QWORD *)(v4 + 8 * v8) = v10;
  return this;
}

__n128 vision::mod::ImageDescriptorBufferJoint::setSideInfoForKthDescriptor(uint64_t a1, int a2, __n128 *a3)
{
  __n128 result;
  _QWORD *exception;

  if (a2 < 0 || *(_DWORD *)(a1 + 72) <= a2)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3692;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  result = *a3;
  *(__n128 *)(*(_QWORD *)(a1 + 144) + 16 * a2) = *a3;
  return result;
}

void sub_1A1396174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13967F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_1A139694C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A139752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *a69;
  void *v69;
  void *v71;
  void *v72;

  if (__p)
    operator delete(__p);
  if (a69)
    operator delete(a69);
  v71 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v71;
    operator delete(v71);
  }

  v72 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v72;
    operator delete(v72);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__299(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__300(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

double std::vector<std::pair<long long,long long>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<long long,long long>*>,std::__wrap_iter<std::pair<long long,long long>*>>(__int128 **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v6;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 *v30;
  __int128 *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 *i;
  __int128 v35;
  __int128 *v36;
  __int128 *v37;
  __int128 *v38;
  __int128 *v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;

  if (a5 < 1)
    return *(double *)&v24;
  v6 = a3;
  v8 = *a1;
  v9 = (unint64_t)a1[1];
  v10 = a2 - (_QWORD)*a1;
  v11 = v10 >> 4;
  v12 = (__int128 *)((char *)*a1 + (v10 & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[2];
  if (a5 <= (uint64_t)((uint64_t)v13 - v9) >> 4)
  {
    v19 = (uint64_t)(v9 - (_QWORD)v12) >> 4;
    if (v19 >= a5)
    {
      v20 = &a3[a5];
      v22 = a1[1];
    }
    else
    {
      v20 = &a3[v19];
      if (v20 == a4)
      {
        v22 = a1[1];
      }
      else
      {
        v21 = v20;
        v22 = a1[1];
        do
        {
          v23 = *v21++;
          *(_QWORD *)&v24 = v23;
          *v22++ = v23;
        }
        while (v21 != a4);
      }
      a1[1] = v22;
      if ((uint64_t)(v9 - (_QWORD)v12) < 1)
        return *(double *)&v24;
    }
    v37 = &v12[a5];
    v38 = &v22[-a5];
    v39 = v22;
    if ((unint64_t)v38 < v9)
    {
      v39 = v22;
      do
      {
        v40 = *v38++;
        *(_QWORD *)&v24 = v40;
        *v39++ = v40;
      }
      while ((unint64_t)v38 < v9);
    }
    a1[1] = v39;
    if (v22 != v37)
    {
      v41 = 16 * (v22 - v37);
      v42 = (_QWORD *)v22 - 1;
      v43 = (uint64_t)&v8[v11 - 1] + 8;
      do
      {
        *(v42 - 1) = *(_QWORD *)(v43 + v41 - 8);
        *v42 = *(_QWORD *)(v43 + v41);
        v42 -= 2;
        v41 -= 16;
      }
      while (v41);
    }
    if (v20 != a3)
    {
      do
      {
        v44 = *v6++;
        *(_QWORD *)&v24 = v44;
        *v12++ = v44;
      }
      while (v6 != v20);
    }
  }
  else
  {
    v14 = a5 + ((uint64_t)(v9 - (_QWORD)v8) >> 4);
    if (v14 >> 60)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v15 = (char *)v13 - (char *)v8;
    v16 = v15 >> 3;
    if (v15 >> 3 <= v14)
      v16 = v14;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(v17);
    else
      v18 = 0;
    v25 = (_OWORD *)(v17 + 16 * v11);
    v26 = &v25[a5];
    v27 = 16 * a5;
    v28 = v25;
    do
    {
      v29 = *v6++;
      *(_QWORD *)&v24 = v29;
      *v28++ = v29;
      v27 -= 16;
    }
    while (v27);
    v30 = *a1;
    if (*a1 == v12)
    {
      v32 = v17 + 16 * v11;
    }
    else
    {
      v31 = v12;
      do
      {
        v32 = (unint64_t)(v25 - 1);
        v24 = *(v31 - 1);
        *(v25 - 1) = v24;
        --v31;
        --v25;
      }
      while (v31 != v30);
    }
    v33 = v17 + 16 * v18;
    for (i = a1[1]; v12 != i; ++v26)
    {
      v35 = *v12++;
      *(_QWORD *)&v24 = v35;
      *v26 = v35;
    }
    v36 = *a1;
    *a1 = (__int128 *)v32;
    a1[1] = v26;
    a1[2] = (__int128 *)v33;
    if (v36)
      operator delete(v36);
  }
  return *(double *)&v24;
}

void sub_1A1397CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
}

void __destroy_helper_block_ea8_56c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_1A1397E48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1397EC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1397F30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1397FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1398120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13982E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1398470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__207(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__208(uint64_t a1)
{

}

void sub_1A1398844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1A13989C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1398CB0(_Unwind_Exception *a1)
{
  id *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__deallocate_node(*(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__deallocate_node(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (id *)*v1;

      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

char *std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * {__strong},espresso_buffer_t>>(uint64_t a1, id *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = objc_msgSend(*a2, "hash");
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v7)
          {
            if (*((id *)v12 + 2) == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0xC0uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  v14 = *a3;
  *a3 = 0;
  *((_QWORD *)v12 + 2) = v14;
  *(_OWORD *)(v12 + 136) = *(_OWORD *)(a3 + 15);
  *(_OWORD *)(v12 + 152) = *(_OWORD *)(a3 + 17);
  *(_OWORD *)(v12 + 168) = *(_OWORD *)(a3 + 19);
  *((_QWORD *)v12 + 23) = a3[21];
  *(_OWORD *)(v12 + 72) = *(_OWORD *)(a3 + 7);
  *(_OWORD *)(v12 + 88) = *(_OWORD *)(a3 + 9);
  *(_OWORD *)(v12 + 104) = *(_OWORD *)(a3 + 11);
  *(_OWORD *)(v12 + 120) = *(_OWORD *)(a3 + 13);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a3 + 1);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(a3 + 5);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v12 = *v22;
LABEL_38:
    *v22 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1A1399024(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void sub_1A1399644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1399790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A139C8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;

  if (a47 < 0)
    operator delete(__p);

  if (a53 < 0)
    operator delete(a48);

  _Unwind_Resume(a1);
}

void sub_1A139D850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A139D940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (_QWORD *)*a1;
    v3 = v2;
  }
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (v3 == v5)
      return 0;
    if (v3 >= v5)
      return 1;
  }
  return 255;
}

void std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_1A139DCE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A139DEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A139E068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A139E184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A139E2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A139E470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A139E5C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A139E868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  uint64_t v30;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__447(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__448(uint64_t a1)
{

}

void sub_1A139EAB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A139EC40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A139ED98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A139EE1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A139EF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A139F060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A139F290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;
  uint64_t v36;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);

  _Block_object_dispose((const void *)(v36 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1A139F630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  uint64_t v30;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1A139F8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<CGPoint>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

apple::vision::fgbg::ConnectedComponentResult *apple::vision::fgbg::ConnectedComponentResult::ConnectedComponentResult(apple::vision::fgbg::ConnectedComponentResult *this, uint64_t a2, uint64_t a3)
{
  size_t v4;
  void *v5;
  uint64_t v6;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = a2;
  *((_QWORD *)this + 14) = a3;
  *((_DWORD *)this + 30) = 1;
  *((_QWORD *)this + 16) = 0;
  *((_WORD *)this + 68) = 257;
  if ((unint64_t)(a3 * a2) >> 61)
    v4 = -1;
  else
    v4 = 8 * a3 * a2;
  v5 = (void *)operator new[]();
  bzero(v5, v4);
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = v5;
  if (v6)
    MEMORY[0x1A1B0A880](v6, 0x1000C8000313F17);
  return this;
}

void sub_1A139FA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  a10 = (void **)(v10 + 10);
  std::vector<std::vector<CGPoint>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v12 = (void *)v10[7];
  if (v12)
  {
    v10[8] = (uint64_t)v12;
    operator delete(v12);
  }
  v13 = (void *)v10[4];
  if (v13)
  {
    v10[5] = (uint64_t)v13;
    operator delete(v13);
  }
  v14 = (void *)v10[1];
  if (v14)
  {
    v10[2] = (uint64_t)v14;
    operator delete(v14);
  }
  v15 = *v10;
  *v10 = 0;
  if (v15)
    MEMORY[0x1A1B0A880](v15, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::fgbg::connectComponentLabel(apple::vision::fgbg *this, float *a2, unint64_t a3, float64x2_t **a4, apple::vision::fgbg::ConnectedComponentResult *a5)
{
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  float64x2_t *v32;
  unint64_t v33;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v42 = 0u;
  v43 = 0u;
  v41 = 0u;
  if (a3)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (a2)
      {
        v11 = 0;
        v12 = v9 * (_DWORD)a2;
        v36 = v9;
        v37 = v9;
        v35 = v9 * (_DWORD)a2;
        do
        {
          if (*((float *)this + v12 + (int)v11) >= 0.5
            && (!*(_QWORD *)&(*a4)->f64[v11 + (_QWORD)a4[13] * v9] || v10 == 0))
          {
            v14 = *((_QWORD *)&v41 + 1);
            v15 = (((_QWORD)v42 - *((_QWORD *)&v41 + 1)) << 6) - 1;
            if ((_QWORD)v42 == *((_QWORD *)&v41 + 1))
              v15 = 0;
            v16 = v43;
            if (v15 == (_QWORD)v43)
            {
              std::deque<std::pair<int,int>>::__add_back_capacity(&v41);
              v14 = *((_QWORD *)&v41 + 1);
              v16 = *((_QWORD *)&v43 + 1) + v43;
            }
            ++v10;
            *(_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF)) = v37 | (v11 << 32);
            ++*((_QWORD *)&v43 + 1);
            v40 = v10;
            apple::vision::fgbg::ConnectedComponentResult::setLabel((apple::vision::fgbg::ConnectedComponentResult *)a4, v9, v11, v10);
            v17 = *((_QWORD *)&v43 + 1);
            if (*((_QWORD *)&v43 + 1))
            {
              v38 = v11;
              v39 = v10;
              do
              {
                v18 = (int *)(*(_QWORD *)(*((_QWORD *)&v41 + 1) + (((unint64_t)v43 >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * (v43 & 0x1FF));
                v19 = *v18;
                v20 = v18[1];
                *(_QWORD *)&v43 = v43 + 1;
                *((_QWORD *)&v43 + 1) = v17 - 1;
                if ((unint64_t)v43 > 0x3FF)
                {
                  operator delete(**((void ***)&v41 + 1));
                  *((_QWORD *)&v41 + 1) += 8;
                  *(_QWORD *)&v43 = v43 - 512;
                }
                for (i = 0; i != 8; ++i)
                {
                  v22 = dword_1A15E22A0[i] + (uint64_t)v19;
                  if ((v22 & 0x80000000) == 0 && v22 < a3)
                  {
                    v23 = dword_1A15E22C0[i] + (uint64_t)v20;
                    if ((v23 & 0x80000000) == 0
                      && v23 < (unint64_t)a2
                      && *((float *)this + (int)v23 + (int)v22 * (int)a2) >= 0.5
                      && !*(_QWORD *)&(*a4)->f64[v23 + (_QWORD)a4[13] * v22])
                    {
                      v24 = *((_QWORD *)&v41 + 1);
                      if ((_QWORD)v42 == *((_QWORD *)&v41 + 1))
                        v25 = 0;
                      else
                        v25 = (((_QWORD)v42 - *((_QWORD *)&v41 + 1)) << 6) - 1;
                      v26 = *((_QWORD *)&v43 + 1);
                      v27 = *((_QWORD *)&v43 + 1) + v43;
                      if (v25 == *((_QWORD *)&v43 + 1) + (_QWORD)v43)
                      {
                        std::deque<std::pair<int,int>>::__add_back_capacity(&v41);
                        v26 = *((_QWORD *)&v43 + 1);
                        v24 = *((_QWORD *)&v41 + 1);
                        v27 = v43 + *((_QWORD *)&v43 + 1);
                      }
                      v28 = (_DWORD *)(*(_QWORD *)(v24 + ((v27 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v27 & 0x1FF));
                      *v28 = v22;
                      v28[1] = v23;
                      *((_QWORD *)&v43 + 1) = v26 + 1;
                      apple::vision::fgbg::ConnectedComponentResult::setLabel((apple::vision::fgbg::ConnectedComponentResult *)a4, v22, v23, v40);
                    }
                  }
                }
                v17 = *((_QWORD *)&v43 + 1);
              }
              while (*((_QWORD *)&v43 + 1));
              v12 = v35;
              v9 = v36;
              v11 = v38;
              v10 = v39;
            }
          }
          ++v11;
        }
        while ((float *)v11 != a2);
      }
      ++v9;
    }
    while (v9 != a3);
  }
  if (*((_BYTE *)a4 + 137))
  {
    v29 = (unint64_t *)a4[1];
    v30 = (char *)a4[2] - (char *)v29;
    if (v30)
    {
      v31 = v30 >> 3;
      v32 = a4[7];
      if (v31 <= 1)
        v31 = 1;
      do
      {
        v33 = *v29++;
        *v32 = vdivq_f64(*v32, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v33), 0));
        ++v32;
        --v31;
      }
      while (v31);
    }
  }
  return std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t)&v41);
}

void sub_1A139FDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void apple::vision::fgbg::ConnectedComponentResult::setLabel(apple::vision::fgbg::ConnectedComponentResult *this, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  size_t v35;
  char *v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  double **v46;
  double v47;
  double v48;
  double *v49;
  double **v50;
  unint64_t v51;
  double *v52;
  double *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  uint64_t v59;
  double *v60;
  unint64_t v61;
  char *v62;
  _BYTE *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  char *v80;
  int64x2_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  double *v85;
  double v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  double *v100;

  v8 = (_QWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)(*(_QWORD *)this + 8 * (a3 + *((_QWORD *)this + 13) * a2)) = a4;
  v9 = a4 - *((int *)this + 30);
  v10 = (_BYTE *)*((_QWORD *)this + 2);
  v11 = (v10 - (_BYTE *)v8) >> 3;
  if (v11 > v9)
  {
    ++v8[v9];
    goto LABEL_24;
  }
  v12 = a4 - v11;
  if (a4 > v11)
  {
    v13 = *((_QWORD *)this + 3);
    if (v12 > (v13 - (uint64_t)v10) >> 3)
    {
      if (a4 >> 61)
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      v14 = v13 - (_QWORD)v8;
      v15 = v14 >> 2;
      if (v14 >> 2 <= a4)
        v15 = a4;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v16);
        v8 = (_QWORD *)*((_QWORD *)this + 1);
        v10 = (_BYTE *)*((_QWORD *)this + 2);
      }
      else
      {
        v17 = 0;
      }
      v19 = (char *)(v16 + 8 * v11);
      v20 = v16 + 8 * v17;
      bzero(v19, 8 * v12);
      v21 = &v19[8 * v12];
      while (v10 != (_BYTE *)v8)
      {
        v22 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v19 - 1) = v22;
        v19 -= 8;
      }
      *((_QWORD *)this + 1) = v19;
      *((_QWORD *)this + 2) = v21;
      *((_QWORD *)this + 3) = v20;
      if (v8)
        operator delete(v8);
      goto LABEL_23;
    }
    bzero(*((void **)this + 2), 8 * v12);
    v18 = &v10[8 * v12];
    goto LABEL_16;
  }
  if (a4 < v11)
  {
    v18 = (char *)&v8[a4];
LABEL_16:
    *((_QWORD *)this + 2) = v18;
  }
LABEL_23:
  *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v9) = 1;
LABEL_24:
  v24 = (_QWORD *)*((_QWORD *)this + 10);
  v23 = (_QWORD *)*((_QWORD *)this + 11);
  v25 = 0xAAAAAAAAAAAAAAABLL * (v23 - v24);
  if (v25 <= v9)
  {
    v26 = a4 - v25;
    if (a4 <= v25)
    {
      if (a4 < v25)
      {
        v42 = &v24[3 * a4];
        if (v23 != v42)
        {
          v43 = (_QWORD *)*((_QWORD *)this + 11);
          do
          {
            v45 = (void *)*(v43 - 3);
            v43 -= 3;
            v44 = v45;
            if (v45)
            {
              *(v23 - 2) = v44;
              operator delete(v44);
            }
            v23 = v43;
          }
          while (v43 != v42);
        }
        *((_QWORD *)this + 11) = v42;
      }
    }
    else
    {
      v27 = *((_QWORD *)this + 12);
      if (0xAAAAAAAAAAAAAAABLL * ((v27 - (uint64_t)v23) >> 3) >= v26)
      {
        bzero(*((void **)this + 11), 24 * ((24 * v26 - 24) / 0x18) + 24);
        *((_QWORD *)this + 11) = &v23[3 * ((24 * v26 - 24) / 0x18) + 3];
      }
      else
      {
        if (a4 > 0xAAAAAAAAAAAAAAALL)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v28 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (uint64_t)v24) >> 3);
        v29 = 2 * v28;
        if (2 * v28 <= a4)
          v29 = a4;
        if (v28 >= 0x555555555555555)
          v30 = 0xAAAAAAAAAAAAAAALL;
        else
          v30 = v29;
        if (v30 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_122;
        v31 = 3 * v30;
        v32 = (char *)operator new(24 * v30);
        v33 = &v32[8 * (v23 - v24)];
        v34 = &v32[8 * v31];
        v35 = 24 * ((24 * v26 - 24) / 0x18) + 24;
        bzero(v33, v35);
        v36 = &v33[v35];
        if (v23 == v24)
        {
          *((_QWORD *)this + 10) = v33;
          *((_QWORD *)this + 11) = v36;
          *((_QWORD *)this + 12) = v34;
        }
        else
        {
          do
          {
            *((_QWORD *)v33 - 3) = 0;
            *((_QWORD *)v33 - 2) = 0;
            v33 -= 24;
            *((_QWORD *)v33 + 2) = 0;
            v37 = *(_OWORD *)(v23 - 3);
            v23 -= 3;
            *(_OWORD *)v33 = v37;
            *((_QWORD *)v33 + 2) = v23[2];
            *v23 = 0;
            v23[1] = 0;
            v23[2] = 0;
          }
          while (v23 != v24);
          v38 = (_QWORD *)*((_QWORD *)this + 10);
          v23 = (_QWORD *)*((_QWORD *)this + 11);
          *((_QWORD *)this + 10) = v33;
          *((_QWORD *)this + 11) = v36;
          *((_QWORD *)this + 12) = v34;
          if (v23 != v38)
          {
            v39 = v23;
            do
            {
              v41 = (void *)*(v39 - 3);
              v39 -= 3;
              v40 = v41;
              if (v41)
              {
                *(v23 - 2) = v40;
                operator delete(v40);
              }
              v23 = v39;
            }
            while (v39 != v38);
            v23 = v38;
          }
        }
        if (v23)
          operator delete(v23);
      }
    }
    v24 = (_QWORD *)*((_QWORD *)this + 10);
  }
  v46 = (double **)&v24[3 * v9];
  v47 = (double)a3;
  v48 = (double)a2;
  v50 = v46 + 1;
  v49 = v46[1];
  v51 = (unint64_t)v46[2];
  if ((unint64_t)v49 >= v51)
  {
    v53 = *v46;
    v54 = ((char *)v49 - (char *)*v46) >> 4;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60)
      goto LABEL_121;
    v56 = v51 - (_QWORD)v53;
    if (v56 >> 3 > v55)
      v55 = v56 >> 3;
    v57 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0;
    v58 = 0xFFFFFFFFFFFFFFFLL;
    if (!v57)
      v58 = v55;
    if (v58)
    {
      v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(v58);
      v49 = *v50;
      v53 = *v46;
    }
    else
    {
      v59 = 0;
    }
    v60 = (double *)(v58 + 16 * v54);
    v61 = v58 + 16 * v59;
    *v60 = v47;
    v60[1] = v48;
    v52 = v60 + 2;
    if (v49 != v53)
    {
      do
      {
        *((_OWORD *)v60 - 1) = *((_OWORD *)v49 - 1);
        v60 -= 2;
        v49 -= 2;
      }
      while (v49 != v53);
      v53 = *v46;
    }
    *v46 = v60;
    *v50 = v52;
    v46[2] = (double *)v61;
    if (v53)
      operator delete(v53);
  }
  else
  {
    *v49 = v47;
    v49[1] = v48;
    v52 = v49 + 2;
  }
  *v50 = v52;
  ++*((_QWORD *)this + 16);
  if (*((_BYTE *)this + 136))
  {
    v63 = (_BYTE *)*((_QWORD *)this + 4);
    v62 = (char *)*((_QWORD *)this + 5);
    v64 = (v62 - v63) >> 5;
    if (v64 > v9)
    {
      v65 = (unint64_t *)&v63[32 * v9];
      v66 = v65[2];
      v67 = v65[3];
      if (v66 >= a3)
        v66 = a3;
      if (v67 <= a3)
        v67 = a3;
      v65[2] = v66;
      v65[3] = v67;
      v68 = *v65;
      v69 = v65[1];
      if (*v65 >= a2)
        v68 = a2;
      if (v69 <= a2)
        v69 = a2;
      *v65 = v68;
      v65[1] = v69;
      goto LABEL_99;
    }
    v70 = a4 - v64;
    if (a4 <= v64)
    {
      if (a4 >= v64)
      {
LABEL_98:
        v81 = (int64x2_t *)(*((_QWORD *)this + 4) + 32 * v9);
        *v81 = vdupq_n_s64(a2);
        v81[1] = vdupq_n_s64(a3);
        goto LABEL_99;
      }
      v80 = &v63[32 * a4];
    }
    else
    {
      v71 = *((_QWORD *)this + 6);
      if (v70 > (v71 - (uint64_t)v62) >> 5)
      {
        if (a4 >> 59)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v72 = v71 - (_QWORD)v63;
        v73 = v72 >> 4;
        if (v72 >> 4 <= a4)
          v73 = a4;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFE0)
          v74 = 0x7FFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        if (!(v74 >> 59))
        {
          v75 = (char *)operator new(32 * v74);
          v76 = &v75[32 * v64];
          v77 = &v75[32 * v74];
          bzero(v76, 32 * v70);
          v78 = &v76[32 * v70];
          if (v62 != v63)
          {
            do
            {
              v79 = *((_OWORD *)v62 - 1);
              *((_OWORD *)v76 - 2) = *((_OWORD *)v62 - 2);
              *((_OWORD *)v76 - 1) = v79;
              v76 -= 32;
              v62 -= 32;
            }
            while (v62 != v63);
            v62 = (char *)*((_QWORD *)this + 4);
          }
          *((_QWORD *)this + 4) = v76;
          *((_QWORD *)this + 5) = v78;
          *((_QWORD *)this + 6) = v77;
          if (v62)
            operator delete(v62);
          goto LABEL_98;
        }
LABEL_122:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      bzero(*((void **)this + 5), 32 * v70);
      v80 = &v62[32 * v70];
    }
    *((_QWORD *)this + 5) = v80;
    goto LABEL_98;
  }
LABEL_99:
  if (!*((_BYTE *)this + 137))
    return;
  v82 = *((_QWORD *)this + 7);
  v83 = *((_QWORD *)this + 8);
  v84 = (v83 - v82) >> 4;
  if (v84 > v9)
  {
    v85 = (double *)(v82 + 16 * v9);
    v86 = v85[1] + v48;
    *v85 = *v85 + v47;
    v85[1] = v86;
    return;
  }
  v87 = a4 - v84;
  if (a4 > v84)
  {
    v88 = *((_QWORD *)this + 9);
    if (v87 > (v88 - v83) >> 4)
    {
      if (!(a4 >> 60))
      {
        v89 = v88 - v82;
        v90 = v89 >> 3;
        if (v89 >> 3 <= a4)
          v90 = a4;
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
          v91 = 0xFFFFFFFFFFFFFFFLL;
        else
          v91 = v90;
        v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(v91);
        v93 = &v92[16 * v84];
        v95 = &v92[16 * v94];
        bzero(v93, 16 * v87);
        v96 = &v93[16 * v87];
        v98 = (char *)*((_QWORD *)this + 7);
        v97 = (char *)*((_QWORD *)this + 8);
        if (v97 != v98)
        {
          do
          {
            *((_OWORD *)v93 - 1) = *((_OWORD *)v97 - 1);
            v93 -= 16;
            v97 -= 16;
          }
          while (v97 != v98);
          v97 = (char *)*((_QWORD *)this + 7);
        }
        *((_QWORD *)this + 7) = v93;
        *((_QWORD *)this + 8) = v96;
        *((_QWORD *)this + 9) = v95;
        if (v97)
          operator delete(v97);
        goto LABEL_119;
      }
LABEL_121:
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    }
    bzero(*((void **)this + 8), 16 * v87);
    v99 = v83 + 16 * v87;
    goto LABEL_118;
  }
  if (a4 < v84)
  {
    v99 = v82 + 16 * a4;
LABEL_118:
    *((_QWORD *)this + 8) = v99;
  }
LABEL_119:
  v100 = (double *)(*((_QWORD *)this + 7) + 16 * v9);
  *v100 = v47;
  v100[1] = v48;
}

uint64_t std::deque<std::pair<int,int>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<std::pair<int,int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t i;
  _QWORD *v67;
  char *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v40 = 1;
      else
        v40 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v40);
      v42 = &v41[8 * (v40 >> 2)];
      v44 = &v41[8 * v43];
      v45 = (uint64_t *)a1[1];
      v6 = v42;
      v46 = a1[2] - (_QWORD)v45;
      if (v46)
      {
        v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        v47 = 8 * (v46 >> 3);
        v48 = &v41[8 * (v40 >> 2)];
        do
        {
          v49 = *v45++;
          *(_QWORD *)v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v51 = 1;
      else
        v51 = (v19 - v22) >> 2;
      v52 = 2 * v51;
      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v51);
      v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      v55 = (uint64_t *)a1[1];
      v56 = v22;
      v57 = a1[2] - (_QWORD)v55;
      if (v57)
      {
        v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = 8 * (v57 >> 3);
        v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v60 = *v55++;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v85 = 1;
      else
        v85 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v85);
      v42 = &v41[8 * (v85 >> 2)];
      v44 = &v41[8 * v86];
      v87 = (uint64_t *)a1[1];
      v6 = v42;
      v88 = a1[2] - (_QWORD)v87;
      if (v88)
      {
        v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        v89 = 8 * (v88 >> 3);
        v90 = &v41[8 * (v85 >> 2)];
        do
        {
          v91 = *v87++;
          *(_QWORD *)v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v28);
  v31 = v30;
  v32 = &v29[8 * v23];
  *(_QWORD *)&v33 = v29;
  *((_QWORD *)&v33 + 1) = v32;
  v95 = v33;
  v34 = operator new(0x1000uLL);
  *(_QWORD *)&v35 = v32;
  *((_QWORD *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    v36 = 8 * v23;
    *(_QWORD *)&v37 = v95;
    if (v20 - v22 >= 1)
    {
      v38 = v36 >> 3;
      if (v38 >= -1)
        v39 = v38 + 1;
      else
        v39 = v38 + 2;
      v32 -= 8 * (v39 >> 1);
      *(_QWORD *)&v35 = v32;
      *((_QWORD *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    v62 = v36 >> 2;
    if (v20 == v22)
      v63 = 1;
    else
      v63 = v62;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
    v32 = &v64[8 * (v63 >> 2)];
    *(_QWORD *)&v37 = v64;
    *((_QWORD *)&v37 + 1) = v32;
    *(_QWORD *)&v35 = v32;
    *((_QWORD *)&v35 + 1) = &v64[8 * v65];
    if (!v29)
      goto LABEL_50;
    v92 = v35;
    v95 = v37;
    operator delete(v29);
    v35 = v92;
  }
  v37 = v95;
LABEL_50:
  *(_QWORD *)v32 = v34;
  *(_QWORD *)&v35 = v35 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    v67 = (_QWORD *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
    {
      v69 = (_BYTE *)v35;
      if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
      {
        if (*((_QWORD *)&v35 + 1) == *((_QWORD *)&v37 + 1))
          v74 = 1;
        else
          v74 = (uint64_t)(*((_QWORD *)&v35 + 1) - *((_QWORD *)&v37 + 1)) >> 2;
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v74);
        v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        v77 = v68;
        v78 = v69 - (_BYTE *)v67;
        if (v69 != (_BYTE *)v67)
        {
          v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          v79 = 8 * (v78 >> 3);
          v80 = v68;
          v81 = v67;
          do
          {
            v82 = *v81++;
            *(_QWORD *)v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(_QWORD *)&v37 = v75;
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = v77;
        *((_QWORD *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          v93 = v35;
          v97 = v37;
          operator delete(v67);
          v35 = v93;
          v37 = v97;
        }
      }
      else
      {
        v70 = (uint64_t)(*((_QWORD *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1)
          v71 = v70 + 1;
        else
          v71 = v70 + 2;
        v72 = v71 >> 1;
        v73 = v35 + 8 * (v71 >> 1);
        v68 = (char *)(v73 - (v35 - *((_QWORD *)&v37 + 1)));
        if ((_QWORD)v35 == *((_QWORD *)&v37 + 1))
        {
          v69 = (_BYTE *)*((_QWORD *)&v37 + 1);
        }
        else
        {
          v94 = *((_QWORD *)&v35 + 1);
          v96 = v37;
          memmove((void *)(v73 - (v35 - *((_QWORD *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((_QWORD *)&v37 + 1));
          *((_QWORD *)&v35 + 1) = v94;
          *(_QWORD *)&v37 = v96;
        }
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = &v69[8 * v72];
      }
    }
    else
    {
      v68 = (char *)*((_QWORD *)&v37 + 1);
    }
    v83 = *(_QWORD *)(i - 8);
    *((_QWORD *)v68 - 1) = v83;
    *((_QWORD *)&v37 + 1) -= 8;
  }
  v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
    operator delete(v84);
}

void sub_1A13A0980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageProcessing_Preprocessor::ImageProcessing_Preprocessor(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t **v7;
  char v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;

  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 0;
  *(_QWORD *)(a1 + 20) = 0x437F000000000000;
  *(_DWORD *)(a1 + 28) = 32;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = operator new(0xAuLL);
  v6 = 0;
  *v4 = v5;
  v5[4] = 2567;
  *(_QWORD *)(a1 + 48) = v5 + 5;
  *(_QWORD *)(a1 + 56) = v5 + 5;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v7 = (uint64_t **)(a1 + 72);
  *(_QWORD *)v5 = 0x908060504030201;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v8 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 32) = v8;
  do
  {
    v9 = *v7;
    v10 = (uint64_t **)(a1 + 72);
    v11 = (uint64_t **)(a1 + 72);
    if (*v7)
    {
      v12 = *((unsigned __int8 *)v5 + v6);
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v9;
          v13 = *((unsigned __int8 *)v9 + 32);
          if (v12 >= v13)
            break;
          v9 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_10;
        }
        if (v13 >= v12)
          break;
        v9 = v11[1];
        if (!v9)
        {
          v10 = v11 + 1;
          goto LABEL_10;
        }
      }
      v14 = (char *)v11;
    }
    else
    {
LABEL_10:
      v14 = (char *)operator new(0x50uLL);
      v14[32] = *((_BYTE *)v5 + v6);
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 56) = 0u;
      *((_QWORD *)v14 + 9) = 0;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v11;
      *v10 = (uint64_t *)v14;
      v15 = **(_QWORD **)(a1 + 64);
      v16 = (uint64_t *)v14;
      if (v15)
      {
        *(_QWORD *)(a1 + 64) = v15;
        v16 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v16);
      ++*(_QWORD *)(a1 + 80);
    }
    *(_QWORD *)(v14 + 69) = 0;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    ++v6;
  }
  while (v6 != 10);
  *(int32x4_t *)a1 = vdupq_n_s32(0x7FC00000u);
  *(_OWORD *)(a1 + 128) = xmmword_1A15FB400;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_1A13A1204(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD **v3;
  _QWORD **v4;
  void *v6;

  std::__tree<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::__map_value_compare<vision::mod::ImagePreprocessor_BufferName,std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::less<vision::mod::ImagePreprocessor_BufferName>,true>,std::allocator<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>>>::destroy(*v4);
  std::__tree<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::__map_value_compare<vision::mod::ImagePreprocessor_BufferName,std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::less<vision::mod::ImagePreprocessor_BufferName>,true>,std::allocator<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>>>::destroy(*v3);
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vision::mod::ImageProcessing_Preprocessor>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    free(*(void **)(v2 + 112));
    std::__tree<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::__map_value_compare<vision::mod::ImagePreprocessor_BufferName,std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::less<vision::mod::ImagePreprocessor_BufferName>,true>,std::allocator<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>>>::destroy(*(_QWORD **)(v2 + 96));
    std::__tree<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::__map_value_compare<vision::mod::ImagePreprocessor_BufferName,std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::less<vision::mod::ImagePreprocessor_BufferName>,true>,std::allocator<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>>>::destroy(*(_QWORD **)(v2 + 72));
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(_QWORD *)(v2 + 48) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1A1B0A898);
  }
  return result;
}

void std::__tree<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::__map_value_compare<vision::mod::ImagePreprocessor_BufferName,std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::less<vision::mod::ImagePreprocessor_BufferName>,true>,std::allocator<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::__map_value_compare<vision::mod::ImagePreprocessor_BufferName,std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::less<vision::mod::ImagePreprocessor_BufferName>,true>,std::allocator<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>>>::destroy(*a1);
    std::__tree<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::__map_value_compare<vision::mod::ImagePreprocessor_BufferName,std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>,std::less<vision::mod::ImagePreprocessor_BufferName>,true>,std::allocator<std::__value_type<vision::mod::ImagePreprocessor_BufferName,vision::mod::ImageProcessing_ImageBuffer>>>::destroy(a1[1]);
    if (!*((_BYTE *)a1 + 76))
      free((void *)a1[5]);
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<vision::mod::ConcreteFaceQualityPredictor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ConcreteFaceQualityPredictor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::ConcreteFaceQualityPredictor>::__on_zero_shared(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 556))
  {
    if (espresso_plan_destroy())
    {
      syslog(5, "[Error] Failed to destroy the existing FaceQual espresso plan ");
LABEL_6:
      syslog(5, "[Error] Failed to destroy Face Quality object");
      goto LABEL_7;
    }
    *(_QWORD *)(a1 + 184) = 0;
    if (espresso_context_destroy())
    {
      syslog(5, "[Error] Failed to destroy the existing FaceQual context ");
      goto LABEL_6;
    }
    *(_QWORD *)(a1 + 176) = 0;
  }
LABEL_7:
  std::unique_ptr<vision::mod::ImageProcessing_Preprocessor>::reset[abi:ne180100]((uint64_t *)(a1 + 168), 0);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
}

void vision::mod::ImageDescriptorBufferAbstract::createEmptyCopy(vision::mod::ImageDescriptorBufferAbstract *this)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = 3711;
  __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
}

uint64_t vision::mod::ImageDescriptorBufferAbstract::createDeepCopyOfSubset(vision::mod::ImageDescriptorBufferAbstract *a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  const void *DataForKthDescriptor;

  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v5 = (*(uint64_t (**)(vision::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)a1 + 104))(a1);
  v6 = (*(uint64_t (**)(vision::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)a1 + 16))(a1);
  *(_BYTE *)(v6 + 88) = 1;
  *(_QWORD *)(v6 + 64) = *((_QWORD *)a1 + 8);
  *(_QWORD *)(v6 + 72) = v4 >> 3;
  *(_QWORD *)(v6 + 56) = malloc_type_malloc(*((_QWORD *)a1 + 8) * (v4 >> 3), 0x87EFF8CDuLL);
  *(_QWORD *)(v6 + 80) = v4 >> 3;
  if (v6 + 8 != a2)
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v6 + 8), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if ((int)((unint64_t)v4 >> 3) >= 1)
  {
    v7 = 0;
    v8 = (_QWORD *)((char *)a1 + 40);
    v9 = *(char **)(v6 + 56);
    v10 = ((unint64_t)v4 >> 3);
    while (1)
    {
      v11 = (_QWORD *)*v8;
      if (!*v8)
        break;
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v7);
      v13 = (_QWORD *)((char *)a1 + 40);
      do
      {
        v14 = v11[4];
        v15 = v14 < v12;
        if (v14 >= v12)
          v16 = v11;
        else
          v16 = v11 + 1;
        if (!v15)
          v13 = v11;
        v11 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 == v8 || v12 < v13[4])
        break;
      DataForKthDescriptor = (const void *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(a1, *((int *)v13 + 10));
      memcpy(v9, DataForKthDescriptor, v5);
      *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(v6 + 32), *(_QWORD *)(*(_QWORD *)a2 + 8 * v7), (_QWORD *)(*(_QWORD *)a2 + 8 * v7))+ 10) = v7;
      ++v7;
      v9 += *((_QWORD *)a1 + 8);
      if (v7 == v10)
        return v6;
    }
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      return 0;
    }
  }
  return v6;
}

uint64_t vision::mod::ImageDescriptorBufferAbstract::deleteDescriptorAtIndex(vision::mod::ImageDescriptorBufferAbstract *this, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *DataForKthDescriptor;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  _DWORD *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *exception;
  uint64_t v30;
  uint64_t v31;

  v4 = *((int *)this + 18);
  v5 = v4 - 1;
  if ((int)v4 <= a2)
  {
    syslog(5, "ERROR: Can't delete descriptor with given index: %d (highest descriptor index in the buffer is %d)\n", a2, v4 - 1);
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  if ((int)v5 > a2)
  {
    DataForKthDescriptor = (void *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, a2);
    v9 = (const void *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, (int)v5);
    memcpy(DataForKthDescriptor, v9, *((_QWORD *)this + 8));
    v10 = *((_QWORD *)this + 1);
    if (v10 != *((_QWORD *)this + 2))
    {
      v11 = *(_QWORD *)(v10 + 8 * a2);
      v30 = *(_QWORD *)(v10 + 8 * (int)v5);
      v12 = v30;
      v31 = v11;
      *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)this + 4, v11, &v31)+ 10) = v5;
      *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)this + 4, v12, &v30)+ 10) = a2;
      v13 = *((_QWORD *)this + 1);
      *(_QWORD *)(v13 + 8 * a2) = v12;
      *(_QWORD *)(v13 + 8 * (int)v5) = v11;
    }
    if (a3)
    {
      v15 = *(int **)(a3 + 8);
      v14 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v15 >= v14)
      {
        v17 = *(int **)a3;
        v18 = ((uint64_t)v15 - *(_QWORD *)a3) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL;
        v22 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v21)
          v22 = v19;
        if (v22)
        {
          v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v22);
          v17 = *(int **)a3;
          v15 = *(int **)(a3 + 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = (int *)(v22 + 4 * v18);
        v25 = v22 + 4 * v23;
        *v24 = a2;
        v16 = v24 + 1;
        while (v15 != v17)
        {
          v26 = *--v15;
          *--v24 = v26;
        }
        *(_QWORD *)a3 = v24;
        *(_QWORD *)(a3 + 8) = v16;
        *(_QWORD *)(a3 + 16) = v25;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v15 = a2;
        v16 = v15 + 1;
      }
      *(_QWORD *)(a3 + 8) = v16;
    }
  }
  v27 = *((_QWORD *)this + 1);
  if (v27 != *((_QWORD *)this + 2))
  {
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>((uint64_t **)this + 4, *(_QWORD *)(v27 + 8 * v5));
    *((_QWORD *)this + 2) -= 8;
  }
  --*((_QWORD *)this + 9);
  return 3712;
}

uint64_t vision::mod::ImageDescriptorBufferAbstract::deleteDescriptorsAtIndexes(uint64_t a1, int **a2, uint64_t a3)
{
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v7 = 0;
    v10 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      if ((unint64_t)v8 >= v9)
      {
        v11 = v8 - v7;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v9 - (_QWORD)v7) >> 1 > v12)
          v12 = (uint64_t)(v9 - (_QWORD)v7) >> 1;
        if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v13);
        else
          v14 = 0;
        v15 = (int *)(v13 + 4 * v11);
        *v15 = *v5;
        v10 = v15 + 1;
        while (v8 != v7)
        {
          v16 = *--v8;
          *--v15 = v16;
        }
        v9 = v13 + 4 * v14;
        if (v7)
          operator delete(v7);
        v7 = v15;
      }
      else
      {
        *v8 = *v5;
        v10 = v8 + 1;
      }
      ++v5;
      v8 = v10;
    }
    while (v5 != v6);
  }
  v17 = 126 - 2 * __clz(v10 - v7);
  v18 = (char *)v10 - (char *)v7;
  if (v10 == v7)
    v19 = 0;
  else
    v19 = v17;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v7, v10, v19, 1);
  if ((int)((unint64_t)v18 >> 2) >= 1)
  {
    v20 = 0;
    v21 = (int)(v18 >> 2);
    if (v21 <= 1)
      v21 = 1;
    v22 = 4 * v21;
    while (1)
    {
      v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 48))(a1, v7[v20 / 4], a3);
      if ((v23 & 0x80) == 0)
        goto LABEL_34;
      v20 += 4;
      if (v22 == v20)
      {
        v23 = 3712;
        goto LABEL_34;
      }
    }
  }
  v23 = 3712;
  if (v7)
LABEL_34:
    operator delete(v7);
  return v23;
}

void sub_1A13A19D4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::ImageDescriptorBufferAbstract::deleteDescriptorsWithIds(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *exception;
  void *v39;
  char *v40;
  uint64_t v41;
  void *__p;
  char *v43;
  unint64_t v44;

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
  {
    syslog(5, "ERROR: Can't delete descriptors with given ids - ids information is not present\n");
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  __p = 0;
  v43 = 0;
  v44 = 0;
  v6 = *a2;
  if ((int)((unint64_t)(a2[1] - *a2) >> 3) >= 1)
  {
    v7 = 0;
    do
    {
      v39 = *(void **)(v6 + 8 * v7);
      v8 = std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 32), (uint64_t)v39, &v39);
      v9 = v8;
      v10 = v43;
      if ((unint64_t)v43 >= v44)
      {
        v12 = (char *)__p;
        v13 = (v43 - (_BYTE *)__p) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v15 = v44 - (_QWORD)__p;
        if ((uint64_t)(v44 - (_QWORD)__p) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v16);
          v12 = (char *)__p;
          v10 = v43;
        }
        else
        {
          v17 = 0;
        }
        v18 = (char *)(v16 + 4 * v13);
        *(_DWORD *)v18 = *((_DWORD *)v9 + 10);
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        __p = v18;
        v44 = v16 + 4 * v17;
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v43 = *((_DWORD *)v8 + 10);
        v11 = v10 + 4;
      }
      v43 = v11;
      ++v7;
      v6 = *a2;
    }
    while (v7 < (int)((unint64_t)(a2[1] - *a2) >> 3));
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v20 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 56))(a1, &__p, &v39);
  if ((v20 & 0x80) != 0)
  {
    v21 = (char *)v39;
    if (a3 && (v22 = v40, (int)((unint64_t)(v40 - (_BYTE *)v39) >> 2) >= 1))
    {
      v23 = 0;
      v20 = 3712;
      do
      {
        v24 = *(int *)&v21[4 * v23];
        v25 = *(_QWORD *)(a1 + 8);
        if ((int)v24 < (int)((unint64_t)(*(_QWORD *)(a1 + 16) - v25) >> 3))
        {
          v27 = *(_QWORD **)(a3 + 8);
          v26 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v27 >= v26)
          {
            v29 = *(_QWORD **)a3;
            v30 = ((uint64_t)v27 - *(_QWORD *)a3) >> 3;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
              std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
            v32 = v26 - (_QWORD)v29;
            if (v32 >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v33);
              v29 = *(_QWORD **)a3;
              v27 = *(_QWORD **)(a3 + 8);
            }
            else
            {
              v34 = 0;
            }
            v35 = (_QWORD *)(v33 + 8 * v30);
            *v35 = *(_QWORD *)(v25 + 8 * v24);
            v28 = v35 + 1;
            while (v27 != v29)
            {
              v36 = *--v27;
              *--v35 = v36;
            }
            *(_QWORD *)a3 = v35;
            *(_QWORD *)(a3 + 8) = v28;
            *(_QWORD *)(a3 + 16) = v33 + 8 * v34;
            if (v29)
              operator delete(v29);
          }
          else
          {
            *v27 = *(_QWORD *)(v25 + 8 * v24);
            v28 = v27 + 1;
          }
          *(_QWORD *)(a3 + 8) = v28;
          v21 = (char *)v39;
          v22 = v40;
        }
        ++v23;
      }
      while (v23 < (int)((unint64_t)(v22 - v21) >> 2));
    }
    else
    {
      v20 = 3712;
    }
  }
  else
  {
    v21 = (char *)v39;
  }
  if (v21)
  {
    v40 = v21;
    operator delete(v21);
  }
  if (__p)
  {
    v43 = (char *)__p;
    operator delete(__p);
  }
  return v20;
}

void sub_1A13A1CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::ImageDescriptorBufferAbstract::print@<X0>(vision::mod::ImageDescriptorBufferAbstract *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  std::locale v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Descriptor count = ", 19);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v15, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Descriptor length = ", 20);
  (*(void (**)(vision::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)this + 104))(this);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" bytes", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v15, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v12);
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11 = v8;
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1B0A808](&v14);
}

void sub_1A13A1EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float vision::mod::ImageDescriptorBufferAbstract::computeDistanceFrom(vision::mod::ImageDescriptorBufferAbstract *this, const vision::mod::ImageDescriptorBufferAbstract *a2)
{
  float v3;
  _QWORD *exception;
  void *__p[3];

  if (*((_QWORD *)this + 9) != 1 || *((_QWORD *)a2 + 9) != 1)
  {
    syslog(5, "ERROR: Incorrect count of descriptors in one of the buffers, expected exactly 1\n");
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 80))(__p);
  v3 = *(float *)__p[0];
  __p[1] = __p[0];
  operator delete(__p[0]);
  return v3;
}

void vision::mod::ImageDescriptorBufferAbstract::getRepresentative()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = 3711;
  __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
}

int *std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int *v75;
  BOOL v77;
  uint64_t v78;
  int *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  int *v89;
  int v90;
  BOOL v91;
  int *v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int *v99;
  int *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  int *v106;
  int v107;
  int v108;
  int v109;
  int v110;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *v9;
        if (*v8 > *v9)
        {
          *v9 = *v8;
          *v8 = v38;
        }
        return result;
      case 3uLL:
        v39 = v9[1];
        if (v39 <= *v8)
          v40 = *v8;
        else
          v40 = v9[1];
        if (v39 >= *v8)
          v39 = *v8;
        *v8 = v39;
        v9[1] = v40;
        v41 = *v8;
        if (*v8 <= *v9)
          v42 = *v9;
        else
          v42 = *v8;
        if (v41 >= *v9)
          v41 = *v9;
        *v8 = v41;
        v44 = *v9;
        v43 = v9[1];
        if (v42 <= v43)
          v44 = v9[1];
        if (v42 < v43)
          v43 = v42;
        *v9 = v44;
        v9[1] = v43;
        return result;
      case 4uLL:
        v46 = v9[1];
        v45 = v9[2];
        if (*v9 <= v45)
          v47 = v9[2];
        else
          v47 = *v9;
        if (*v9 < v45)
          v45 = *v9;
        v9[2] = v45;
        *v9 = v47;
        v48 = *v8;
        if (v46 <= *v8)
          v49 = *v8;
        else
          v49 = v46;
        if (v46 < v48)
          v48 = v46;
        *v8 = v48;
        v50 = *v9;
        if (*v9 <= v49)
          v51 = v49;
        else
          v51 = *v9;
        if (v50 >= v49)
          v50 = v49;
        *v9 = v51;
        v9[1] = v50;
        v52 = v9[2];
        if (v52 <= *v8)
          v53 = *v8;
        else
          v53 = v9[2];
        if (v52 >= *v8)
          v52 = *v8;
        *v8 = v52;
        v54 = v9[1];
        if (v54 <= v53)
          v55 = v53;
        else
          v55 = v9[1];
        if (v54 >= v53)
          v54 = v53;
        v9[1] = v55;
        v9[2] = v54;
        return result;
      case 5uLL:
        v56 = *v9;
        v57 = v9[1];
        if (*v9 <= v57)
          v58 = v9[1];
        else
          v58 = *v9;
        if (v56 >= v57)
          v56 = v9[1];
        *v9 = v58;
        v9[1] = v56;
        v59 = v9[3];
        if (v59 <= *v8)
          v60 = *v8;
        else
          v60 = v9[3];
        if (v59 >= *v8)
          v59 = *v8;
        *v8 = v59;
        v9[3] = v60;
        v61 = *v8;
        v62 = v9[2];
        if (*v8 <= v62)
          v63 = v9[2];
        else
          v63 = *v8;
        if (v61 >= v62)
          v61 = v9[2];
        *v8 = v61;
        v65 = v9[2];
        v64 = v9[3];
        v66 = v9[1];
        if (v63 <= v64)
          v65 = v9[3];
        if (v63 < v64)
          v64 = v63;
        v9[2] = v65;
        v9[3] = v64;
        v67 = *v8;
        if (v66 <= *v8)
          v68 = *v8;
        else
          v68 = v66;
        if (v66 < v67)
          v67 = v66;
        *v8 = v67;
        v69 = *v9;
        v71 = v9[2];
        v70 = v9[3];
        if (v70 <= *v9)
          v72 = *v9;
        else
          v72 = v9[3];
        if (v70 >= v69)
          v70 = *v9;
        if (v72 <= v71)
          v69 = v9[2];
        if (v72 < v71)
          v71 = v72;
        if (v70 <= v68)
          v73 = v68;
        else
          v73 = v70;
        if (v70 >= v68)
          v70 = v68;
        if (v73 <= v71)
          v68 = v71;
        *v9 = v69;
        v9[1] = v68;
        if (v73 >= v71)
          v74 = v71;
        else
          v74 = v73;
        v9[2] = v74;
        v9[3] = v70;
        return result;
      default:
        if (v10 <= 95)
        {
          v75 = v9 + 1;
          v77 = v9 == a2 || v75 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v77)
            {
              v78 = 4;
              v79 = v9;
              do
              {
                v81 = *v79;
                v80 = v79[1];
                v79 = v75;
                if (v80 > v81)
                {
                  v82 = v78;
                  while (1)
                  {
                    *(int *)((char *)v9 + v82) = v81;
                    v83 = v82 - 4;
                    if (v82 == 4)
                      break;
                    v81 = *(int *)((char *)v9 + v82 - 8);
                    v82 -= 4;
                    if (v80 <= v81)
                    {
                      v84 = (int *)((char *)v9 + v83);
                      goto LABEL_154;
                    }
                  }
                  v84 = v9;
LABEL_154:
                  *v84 = v80;
                }
                v75 = v79 + 1;
                v78 += 4;
              }
              while (v79 + 1 != a2);
            }
          }
          else if (!v77)
          {
            do
            {
              v110 = *v7;
              v109 = v7[1];
              v7 = v75;
              if (v109 > v110)
              {
                do
                {
                  *v75 = v110;
                  v110 = *(v75 - 2);
                  --v75;
                }
                while (v109 > v110);
                *v75 = v109;
              }
              v75 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v85 = (v11 - 2) >> 1;
            v86 = v85;
            do
            {
              v87 = v86;
              if (v85 >= v86)
              {
                v88 = (2 * v86) | 1;
                v89 = &v9[v88];
                if (2 * v87 + 2 >= (uint64_t)v11)
                {
                  v90 = *v89;
                }
                else
                {
                  v90 = v89[1];
                  v91 = *v89 <= v90;
                  if (*v89 < v90)
                    v90 = *v89;
                  if (!v91)
                  {
                    ++v89;
                    v88 = 2 * v87 + 2;
                  }
                }
                v92 = &v9[v87];
                v93 = *v92;
                if (v90 <= *v92)
                {
                  do
                  {
                    *v92 = v90;
                    v92 = v89;
                    if (v85 < v88)
                      break;
                    v94 = (2 * v88) | 1;
                    v89 = &v9[v94];
                    v88 = 2 * v88 + 2;
                    if (v88 >= (uint64_t)v11)
                    {
                      v90 = *v89;
                      v88 = v94;
                    }
                    else
                    {
                      v90 = *v89;
                      result = v89 + 1;
                      v95 = v89[1];
                      if (*v89 >= v95)
                        v90 = v89[1];
                      if (*v89 <= v95)
                        v88 = v94;
                      else
                        ++v89;
                    }
                  }
                  while (v90 <= v93);
                  *v92 = v93;
                }
              }
              v86 = v87 - 1;
            }
            while (v87);
            v96 = (unint64_t)v10 >> 2;
            do
            {
              v97 = 0;
              v98 = *v9;
              v99 = v9;
              do
              {
                v100 = &v99[v97 + 1];
                v101 = (2 * v97) | 1;
                v97 = 2 * v97 + 2;
                if (v97 >= v96)
                {
                  v102 = *v100;
                  v97 = v101;
                }
                else
                {
                  v102 = *v100;
                  v103 = v100[1];
                  if (*v100 >= v103)
                    v102 = v100[1];
                  if (*v100 <= v103)
                    v97 = v101;
                  else
                    ++v100;
                }
                *v99 = v102;
                v99 = v100;
              }
              while (v97 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
              if (v100 == --a2)
              {
                *v100 = v98;
              }
              else
              {
                *v100 = *a2;
                *a2 = v98;
                v104 = (char *)v100 - (char *)v9 + 4;
                if (v104 >= 5)
                {
                  v105 = (((unint64_t)v104 >> 2) - 2) >> 1;
                  v106 = &v9[v105];
                  v107 = *v106;
                  v108 = *v100;
                  if (*v106 > *v100)
                  {
                    do
                    {
                      *v100 = v107;
                      v100 = v106;
                      if (!v105)
                        break;
                      v105 = (v105 - 1) >> 1;
                      v106 = &v9[v105];
                      v107 = *v106;
                    }
                    while (*v106 > v108);
                    *v100 = v108;
                  }
                }
              }
              v91 = v96-- <= 2;
            }
            while (!v91);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        v16 = v7;
        if ((a4 & 1) == 0)
        {
          v16 = v7;
          if (*(v7 - 1) <= v15)
          {
            if (v15 <= *v8)
            {
              v30 = v7 + 1;
              do
              {
                v9 = v30;
                if (v30 >= a2)
                  break;
                ++v30;
              }
              while (v15 <= *v9);
            }
            else
            {
              v9 = v7;
              do
              {
                v29 = v9[1];
                ++v9;
              }
              while (v15 <= v29);
            }
            v31 = a2;
            if (v9 < a2)
            {
              v31 = a2;
              do
                v32 = *--v31;
              while (v15 > v32);
            }
            if (v9 < v31)
            {
              v33 = *v9;
              v34 = *v31;
              do
              {
                *v9 = v34;
                *v31 = v33;
                do
                {
                  v35 = v9[1];
                  ++v9;
                  v33 = v35;
                }
                while (v15 <= v35);
                do
                {
                  v36 = *--v31;
                  v34 = v36;
                }
                while (v15 > v36);
              }
              while (v9 < v31);
            }
            v37 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v37;
            a4 = 0;
            *v37 = v15;
            continue;
          }
        }
        do
        {
          v17 = v16;
          v19 = v16[1];
          ++v16;
          v18 = v19;
        }
        while (v19 > v15);
        v20 = a2;
        if (v17 == v7)
        {
          v20 = a2;
          do
          {
            if (v16 >= v20)
              break;
            v22 = *--v20;
          }
          while (v22 <= v15);
        }
        else
        {
          do
            v21 = *--v20;
          while (v21 <= v15);
        }
        if (v16 < v20)
        {
          v23 = *v20;
          v24 = v16;
          v25 = v20;
          do
          {
            *v24 = v23;
            *v25 = v18;
            do
            {
              v17 = v24;
              v26 = v24[1];
              ++v24;
              v18 = v26;
            }
            while (v26 > v15);
            do
            {
              v27 = *--v25;
              v23 = v27;
            }
            while (v27 <= v15);
          }
          while (v24 < v25);
        }
        if (v17 != v7)
          *v7 = *v17;
        *v17 = v15;
        if (v16 < v20)
        {
LABEL_29:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v7, v17, a3, a4 & 1);
          a4 = 0;
          v9 = v17 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v7, v17);
        v9 = v17 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v17 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(int *result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 > *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 <= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(_DWORD *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *(a2 - 1);
      else
        v22 = a1[1];
      if (v20 >= v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      a1[1] = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 >= *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
        v26 = a1[1];
      if (v24 < v25)
        v25 = v24;
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 < v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 < v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (v52 >= v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 >= v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 >= v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (v27 >= v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *(a2 - 1);
      else
        v32 = a1[3];
      if (v30 >= v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      a1[3] = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 >= v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = a1[2];
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
        v37 = a1[3];
      if (v35 < v36)
        v36 = v35;
      a1[2] = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 < v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 >= v41)
        v42 = *a1;
      if (v44 <= v43)
        v41 = a1[2];
      if (v44 < v43)
        v43 = v44;
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 >= v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43)
        v46 = v43;
      else
        v46 = v45;
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v5)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 < v5)
        v5 = a1[1];
      if (v5 <= v8)
        v10 = *a1;
      else
        v10 = v5;
      if (v5 >= v8)
        v5 = *a1;
      *v6 = v5;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 >= v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = *v6;
    if (*v12 > v16)
    {
      v17 = v14;
      while (1)
      {
        *(_DWORD *)((char *)a1 + v17) = v16;
        v18 = v17 - 4;
        if (v17 == 4)
          break;
        v16 = *(_DWORD *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (v15 <= v16)
        {
          v19 = (_DWORD *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      v19 = a1;
LABEL_27:
      *v19 = v15;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v6 = v12;
    v14 += 4;
    if (++v12 == a2)
      return 1;
  }
}

void std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 < a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (!v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<long long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

vision::mod::ImageDescriptorBufferAbstract *vision::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(vision::mod::ImageDescriptorBufferAbstract *this, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t inited;
  _QWORD *exception;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E453AB20;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_BYTE *)this + 88) = a5;
  inited = vision::mod::ImageDescriptorBufferAbstract::initBufferWithData(this, a2, a3, a4, a5);
  if ((inited & 0x80) == 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = inited;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  return this;
}

void sub_1A13A2FB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD **v3;
  void *v5;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

vision::mod::ImageDescriptorBufferAbstract *vision::mod::ImageDescriptorBufferAbstract::setDescriptorIdForKthDescriptor(vision::mod::ImageDescriptorBufferAbstract *this, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t **v7;
  _QWORD *exception;
  uint64_t v10;

  v10 = a3;
  v3 = *((_QWORD *)this + 1);
  if (v3 == *((_QWORD *)this + 2))
  {
    syslog(5, "ERROR: Can't set descriptor id - ids vector is empty\n");
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v7 = (uint64_t **)((char *)this + 32);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>((uint64_t **)this + 4, *(_QWORD *)(v3 + 8 * a2));
  *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2) = a3;
  *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v7, a3, &v10)+ 10) = a2;
  return this;
}

void vision::mod::ObjectTrackerCorrelation::~ObjectTrackerCorrelation(void **this)
{
  vision::mod::ObjectTrackerCorrelation::~ObjectTrackerCorrelation(this);
  JUMPOUT(0x1A1B0A898);
}

{
  *this = &off_1E453A750;
  ctrTrackerInitialization_freeContext(this[4]);
  this[4] = 0;
  *this = off_1E453A5B0;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)(this + 2));
}

uint64_t vision::mod::ObjectTrackerCorrelation::setTargetObjects(uint64_t a1, __CVBuffer *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t *v22;
  float64x2_t v28;
  float64x2_t v29;
  int8x16_t v30;
  int *v31;
  uint64_t result;
  float v33;
  float v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  const DSPComplex *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  const DSPSplitComplex *v49;
  OpaqueFFTSetup *__Setup;
  float64x2_t v51;
  float64_t v52;
  _BYTE v53[32];
  float64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    return 6751;
  for (i = 2048; i != 2112; i += 16)
  {
    bzero(*(void **)(*(_QWORD *)v3 + i), 0x8000uLL);
    bzero(*(void **)(*(_QWORD *)v3 + i + 8), 0x8000uLL);
  }
  bzero(*(void **)(*(_QWORD *)v3 + 2112), 0x8000uLL);
  bzero(*(void **)(*(_QWORD *)v3 + 2120), 0x8000uLL);
  bzero(*(void **)v3, 0x400uLL);
  bzero((void *)(*(_QWORD *)v3 + 1024), 0x400uLL);
  bzero(*(void **)(v3 + 16), 0x4000uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 0x4000), 0x4000uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 0x8000), 0x4000uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 49152), 0x4000uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 0x10000), 0x4000uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 81920), 0x4000uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 98304), 0x4000uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 246072), 0x400uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 247096), 0x400uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 248120), 0x400uLL);
  bzero((void *)(*(_QWORD *)(v3 + 16) + 249144), 0x400uLL);
  v8 = *(_QWORD *)(v3 + 16) + 250184;
  *(_BYTE *)(v8 + 8) = 0;
  *(_QWORD *)v8 = 0;
  bzero(*(void **)(*(_QWORD *)(v3 + 16) + 245992), 0x8000uLL);
  bzero(*(void **)(*(_QWORD *)(v3 + 16) + 246000), 0x8000uLL);
  bzero(*(void **)(*(_QWORD *)(v3 + 16) + 246008), 0x8000uLL);
  bzero(*(void **)(*(_QWORD *)(v3 + 16) + 246016), 0x8000uLL);
  v9 = 4;
  v10 = 245936;
  do
  {
    bzero(*(void **)(*(_QWORD *)(v3 + 16) + v10 - 8), 0x8000uLL);
    bzero(*(void **)(*(_QWORD *)(v3 + 16) + v10), 0x8000uLL);
    v10 += 16;
    --v9;
  }
  while (v9);
  v11 = 246032;
  v12 = 3;
  do
  {
    v13 = *(_OWORD **)(*(_QWORD *)(v3 + 16) + v11 - 8);
    v13[14] = 0uLL;
    v13[15] = 0uLL;
    v13[12] = 0uLL;
    v13[13] = 0uLL;
    v13[10] = 0uLL;
    v13[11] = 0uLL;
    v13[8] = 0uLL;
    v13[9] = 0uLL;
    v13[6] = 0uLL;
    v13[7] = 0uLL;
    v13[4] = 0uLL;
    v13[5] = 0uLL;
    v13[2] = 0uLL;
    v13[3] = 0uLL;
    *v13 = 0uLL;
    v13[1] = 0uLL;
    v14 = *(_OWORD **)(*(_QWORD *)(v3 + 16) + v11);
    v14[14] = 0uLL;
    v14[15] = 0uLL;
    v14[12] = 0uLL;
    v14[13] = 0uLL;
    v14[10] = 0uLL;
    v14[11] = 0uLL;
    v14[8] = 0uLL;
    v14[9] = 0uLL;
    v14[6] = 0uLL;
    v14[7] = 0uLL;
    v14[4] = 0uLL;
    v14[5] = 0uLL;
    v14[2] = 0uLL;
    v14[3] = 0uLL;
    *v14 = 0uLL;
    v14[1] = 0uLL;
    v11 += 16;
    --v12;
  }
  while (v12);
  bzero(*(void **)(*(_QWORD *)(v3 + 32) + 65632), 0x8000uLL);
  bzero(*(void **)(*(_QWORD *)(v3 + 32) + 65640), 0x8000uLL);
  v15 = *a3;
  if (a3[1] - *a3 != 80)
    return 6780;
  v16.i32[0] = *(_DWORD *)(v15 + 24);
  v17.f32[0] = v16.f32[0] + *(float *)(v15 + 36);
  v16.f32[1] = *(float *)(v15 + 28) + *(float *)(v15 + 32);
  v18 = vcvtq_f64_f32(v16);
  v17.i32[1] = *(_DWORD *)(v15 + 28);
  *(float64x2_t *)(a1 + 56) = v18;
  v19 = vcvtq_f64_f32(v17);
  v20.f64[0] = v19.f64[0];
  v20.f64[1] = v18.f64[1];
  v21 = vaddq_f64(v19, v18);
  v18.f64[1] = v19.f64[1];
  *(float64x2_t *)(a1 + 40) = v18;
  *(float64x2_t *)(a1 + 72) = v20;
  *(float64x2_t *)(a1 + 88) = v19;
  v22 = *(uint64_t **)(a1 + 32);
  __asm { FMOV            V1.2D, #0.5 }
  v28 = vmulq_f64(v21, _Q1);
  v29 = vmulq_f64(vmulq_f64(vsubq_f64(v20, v18), (float64x2_t)vdupq_n_s64(0x40047AE140000000uLL)), _Q1);
  v51 = vsubq_f64(v28, v29);
  v52 = v51.f64[0];
  v30 = (int8x16_t)vaddq_f64(v28, v29);
  *(int8x16_t *)v53 = vextq_s8(v30, v30, 8uLL);
  *(_OWORD *)&v53[16] = *(_OWORD *)v53;
  v54 = v51.f64[1];
  *(float64x2_t *)(*v22 + 2128) = vdivq_f64(vsubq_f64(*(float64x2_t *)&v53[8], v51), (float64x2_t)vdupq_n_s64(0x405FC00000000000uLL));
  v31 = (int *)v22[2];
  result = tplTrackerResampler_setImage(v22[3], a2, v51.f64);
  if (result == 128)
  {
    v33 = *(double *)(*v22 + 2136);
    v34 = *(double *)(*v22 + 2128);
    tplTrackerResampler_resample(v22[3], v51.f64, 0x80u, 128, v22[2], (_BYTE *)(v22[2] + 0x4000), (_BYTE *)(v22[2] + 0x8000), v31 + 62542, v33, v34);
    if (v31[62542] > 0 || v31[62543] > 0 || v31[62544] < 127 || v31[62545] <= 126)
      ctrTrackerComputation_repairNonValidRegion(v22[2], v22[2] + 0x4000, v22[2] + 0x8000, v31 + 62542);
    ctrTrackerComputation_YCbCr2nRGB(v22[2], v22[2] + 0x4000, v22[2] + 0x8000, v22[2] + 49152, v22[2] + 0x10000, v22[2] + 81920);
    ctrTrackerComputation_normedGradient(v22[2] + 49152, v22[2] + 0x10000, v22[2] + 81920, v22[2] + 98304);
    v35 = v22[2];
    result = ctrTrackerAlgorithm_computeFFTx(v35 + 49152, v35 + 0x10000, v35 + 81920, v35 + 98304, *(_QWORD *)(v22[4] + 65624), (DSPComplex *)(v35 + 114856), (DSPSplitComplex *)(*v22 + 2048), *(OpaqueFFTSetup **)(v35 + 250200), v36);
    if (result == 128)
    {
      result = ctrTrackerAlgorithm_GaussianCorrelation(*v22 + 2048, *v22 + 2048, (DSPSplitComplex *)(v22[2] + 245992), (const DSPSplitComplex *)(v22[2] + 246024), (DSPComplex *)(v22[2] + 114856), (char *)(v22[2] + 180392), *(OpaqueFFTSetup **)(v22[2] + 250200));
      if (result == 128)
      {
        v37 = v22[2];
        v38 = (const DSPComplex *)(v37 + 114856);
        v49 = (const DSPSplitComplex *)v22[4];
        __Setup = *(OpaqueFFTSetup **)(v37 + 250200);
        bzero((void *)(v37 + 114856), 0x10000uLL);
        v39 = 0;
        v40 = 0;
        v41 = v37 + 115368;
        v42 = v37 + 180392;
        v43 = v37 + 114856;
        while (1)
        {
          v44 = 0;
          v45 = v39;
          do
          {
            v46 = (float)(v40 * v40 + v44 * v44) * -0.5 / 25.0;
            v47 = expf(v46);
            *(float *)(v43 + 4 * v44) = v47;
            if (v40)
            {
              *(float *)(v42 + 4 * v44) = v47;
              if (!v44)
                goto LABEL_25;
              *(float *)(v41 + 4 * v45) = v47;
              v48 = 0x4000 - (v40 << 7) - v44 + 128;
            }
            else
            {
              if (!v44)
                goto LABEL_25;
              v48 = v45 + 128;
            }
            *(&v38->real + v48) = v47;
LABEL_25:
            ++v44;
            --v45;
          }
          while (v44 != 64);
          ++v40;
          v39 += 128;
          v42 -= 512;
          v43 += 512;
          if (v40 == 64)
          {
            vDSP_ctoz(v38, 2, v49 + 4102, 1, 0x2000uLL);
            vDSP_fft2d_zrip(__Setup, v49 + 4102, 1, 0, 7uLL, 7uLL, 1);
            result = ctrTrackerAlgorithm_packedDivision((float **)(v22[2] + 245992), (float **)(v22[4] + 65632), (float **)(*v22 + 2112));
            if (result == 128)
            {
              *(_QWORD *)v22[1] = 0;
              ctrTrackerComputation_colorHistogram(v22[2] + 49152, v22[2] + 0x10000, v22[2] + 81920, (char *)*v22, (char *)(*v22 + 1024));
              result = 6784;
            }
            break;
          }
        }
      }
    }
  }
  if (result == 128)
    return 6784;
  return result;
}

uint64_t vision::mod::ObjectTrackerCorrelation::track(uint64_t a1, __CVBuffer *a2, uint64_t *a3)
{
  const DSPSplitComplex **v3;
  float64x2_t *v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v16;
  float64x2_t v17;
  const DSPSplitComplex *v18;
  uint64_t updated;
  uint64_t v20;
  float v21;
  int *p_imagp;
  float64x2_t v23;
  float64_t v24;
  float v25;
  const DSPSplitComplex *v26;
  double v27;
  uint64_t v28;
  const DSPSplitComplex *v29;
  const DSPSplitComplex *v30;
  float **v31;
  const DSPSplitComplex *v32;
  uint64_t v33;
  float *imagp;
  float *realp;
  unint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  float *v40;
  float v41;
  float *v42;
  float *v43;
  float *v44;
  float *v45;
  float *v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  int *v56;
  int *v57;
  uint64_t v58;
  int v59;
  DSPSplitComplex *v60;
  uint64_t v61;
  float v62;
  unint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  float v74;
  float v75;
  unint64_t v76;
  int v77;
  int v78;
  BOOL v80;
  int v81;
  int v82;
  BOOL v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  double v89;
  double v90;
  double v91;
  __int32 v92;
  unint64_t v93;
  uint64_t v94;
  size_t Width;
  size_t Height;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  float v103;
  double v104;
  double v105;
  float v106;
  float v107;
  double v108;
  float v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64_t v116;
  int realp_high;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  FFTSetup __Setup[2];
  OpaqueFFTSetup *__Setupa;
  FFTSetup __Setupb[2];
  float v124;
  void *__p[2];
  void *v126;
  int8x16_t v127;
  int8x16_t v128;
  void *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v3 = *(const DSPSplitComplex ***)(a1 + 32);
  if (!v3)
    return 6751;
  v7 = (float64x2_t *)(a1 + 40);
  v8 = *(float64x2_t *)(a1 + 40);
  v124 = 0.0;
  v9 = *(float64x2_t *)(a1 + 72);
  v10 = vsubq_f64(v9, v8);
  __asm { FMOV            V3.2D, #0.5 }
  v16 = vmulq_f64(vaddq_f64(v9, v8), _Q3);
  v17 = vmulq_f64(vmulq_f64(v10, (float64x2_t)vdupq_n_s64(0x40047AE140000000uLL)), _Q3);
  *(float64x2_t *)__p = vsubq_f64(v16, v17);
  v126 = __p[0];
  v118 = _Q3;
  v119 = vaddq_f64(v16, v17);
  v127 = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL);
  v128 = v127;
  *(_OWORD *)__Setup = *(_OWORD *)__p;
  v129 = __p[1];
  v18 = v3[2];
  updated = tplTrackerResampler_setImage((uint64_t)v3[3], a2, (double *)__p);
  v20 = updated;
  v21 = 0.0;
  if (updated != 128)
    goto LABEL_61;
  p_imagp = (int *)&v18[15635].imagp;
  v23 = vsubq_f64(v119, *(float64x2_t *)__Setup);
  v24 = v23.f64[0] / 127.0;
  *(float *)v23.f64 = v23.f64[1] / 127.0;
  v25 = v24;
  tplTrackerResampler_resample((uint64_t)v3[3], (double *)__p, 0x80u, 128, (uint64_t)v3[2], &v3[2][1024], &v3[2][2048], p_imagp, *(float *)v23.f64, v25);
  if (*p_imagp > 0 || p_imagp[1] > 0 || p_imagp[2] < 127 || p_imagp[3] <= 126)
    ctrTrackerComputation_repairNonValidRegion((uint64_t)v3[2], (uint64_t)&v3[2][1024], (uint64_t)&v3[2][2048], p_imagp);
  ctrTrackerComputation_YCbCr2nRGB((uint64_t)v3[2], (uint64_t)&v3[2][1024], (uint64_t)&v3[2][2048], (uint64_t)&v3[2][3072], (uint64_t)&v3[2][4096], (uint64_t)&v3[2][5120]);
  ctrTrackerComputation_normedGradient((uint64_t)&v3[2][3072], (uint64_t)&v3[2][4096], (uint64_t)&v3[2][5120], (uint64_t)&v3[2][6144]);
  v26 = v3[2];
  v28 = ctrTrackerAlgorithm_computeFFTx((uint64_t)&v26[3072], (uint64_t)&v26[4096], (uint64_t)&v26[5120], (uint64_t)&v26[6144], (uint64_t)v3[4][4101].imagp, (DSPComplex *)&v26[7178].imagp, (DSPSplitComplex *)&v26[15370].imagp, (OpaqueFFTSetup *)v26[15637].imagp, v27);
  v20 = v28;
  if (v28 != 128
    || (v29 = v3[2],
        v28 = ctrTrackerAlgorithm_GaussianCorrelation((uint64_t)&v29[15370].imagp, (uint64_t)&(*v3)[128], (DSPSplitComplex *)&v29[15374].imagp, (const DSPSplitComplex *)((char *)v29 + 246024), (DSPComplex *)&v29[7178].imagp, (char *)&v29[11274].imagp, (OpaqueFFTSetup *)v29[15637].imagp), v20 = v28, v28 != 128))
  {
    updated = v28;
LABEL_61:
    v57 = 0;
    goto LABEL_62;
  }
  v30 = v3[2];
  v31 = &v30[15374].imagp;
  v32 = *v3;
  __Setupa = (OpaqueFFTSetup *)v30[15637].imagp;
  vDSP_zvcmul((const DSPSplitComplex *)((char *)v30 + 245992), 1, *v3 + 132, 1, (const DSPSplitComplex *)((char *)v30 + 246008), 1, 0x2000uLL);
  v33 = 0;
  imagp = v30[15375].imagp;
  realp = v30[15376].realp;
  do
  {
    imagp[v33] = imagp[v33] * 0.5;
    realp[v33] = realp[v33] * 0.5;
    ++v33;
  }
  while (v33 != 0x2000);
  v36 = 0;
  v37 = v32[132].realp;
  v38 = *v31;
  *imagp = (float)(*v37 * **v31) * 0.5;
  v39 = v32[132].imagp;
  v40 = v30[15375].realp;
  *realp = (float)(*v39 * *v40) * 0.5;
  imagp[64] = (float)(v37[64] * v38[64]) * 0.5;
  v41 = v39[64] * v40[64];
  v42 = v37 + 192;
  v43 = v39 + 192;
  realp[64] = v41 * 0.5;
  v44 = v38 + 192;
  v45 = v40 + 192;
  v46 = imagp + 192;
  v47 = realp + 192;
  do
  {
    v48 = *(v42 - 64);
    v49 = *(v43 - 64);
    v50 = *v42;
    v51 = *v43;
    v52 = *(v44 - 64);
    v53 = *(v45 - 64);
    v54 = *v44;
    v55 = *v45;
    *(v46 - 64) = (float)((float)(v48 * v52) - (float)(*v42 * *v44)) * 0.5;
    *(v47 - 64) = (float)((float)(v49 * v53) - (float)(v51 * v55)) * 0.5;
    *v46 = (float)((float)(v50 * v52) + (float)(v48 * v54)) * 0.5;
    v36 += 2;
    v42 += 128;
    v43 += 128;
    v44 += 128;
    *v47 = (float)((float)(v51 * v53) + (float)(v49 * v55)) * 0.5;
    v45 += 128;
    v46 += 128;
    v47 += 128;
  }
  while (v36 < 0x7E);
  vDSP_fft2d_zrip(__Setupa, (const DSPSplitComplex *)((char *)v30 + 246008), 1, 0, 7uLL, 7uLL, -1);
  vDSP_ztoc((const DSPSplitComplex *)((char *)v30 + 246008), 1, (DSPComplex *)&v30[11274].imagp, 2, 0x2000uLL);
  v56 = (int *)malloc_type_malloc(0xCuLL, 0x10000403E1C8BA9uLL);
  if (!v56)
    return 6779;
  v57 = v56;
  v58 = 0;
  v59 = 0;
  v60 = (DSPSplitComplex *)v3[1];
  v61 = (uint64_t)&v3[2][11274].imagp;
  v62 = 0.0;
  do
  {
    if (*(float *)(v61 + 4 * v58) > v62)
    {
      v59 = v58;
      v62 = *(float *)(v61 + 4 * v58);
    }
    ++v58;
  }
  while (v58 != 0x4000);
  v63 = 0;
  *(float *)v56 = v62;
  if (v59 >= 0)
    v64 = v59;
  else
    v64 = v59 + 127;
  v65 = v59 - (v64 & 0xFFFFFF80);
  v56[1] = v64 >> 7;
  v56[2] = v65;
  if (v59 >= 8832)
    v66 = -128;
  else
    v66 = 0;
  v67 = v66 + (v64 >> 7) - 5;
  if (v59 >= 7552)
    v68 = -128;
  else
    v68 = 0;
  v69 = v68 + (v64 >> 7) + 5;
  if (v65 >= 69)
    v70 = -128;
  else
    v70 = 0;
  v71 = v65 + v70 - 5;
  if (v65 >= 59)
    v72 = -128;
  else
    v72 = 0;
  v73 = v65 + v72 + 5;
  v74 = 0.0;
  v75 = 0.0;
  do
  {
    v76 = 0;
    if (v63 >= 0x40)
      v77 = -128;
    else
      v77 = 0;
    v78 = v77 + v63;
    v80 = v78 < v67 || v78 > v69;
    do
    {
      if (v80
        || (v76 >= 0x40 ? (v81 = -128) : (v81 = 0), (v82 = v76 + v81, v82 >= v71) ? (v83 = v82 <= v73) : (v83 = 0), !v83))
      {
        v84 = *(float *)(v61 + 4 * v76);
        v75 = v75 + v84;
        v74 = v74 + (float)(v84 * v84);
      }
      ++v76;
    }
    while (v76 != 128);
    ++v63;
    v61 += 512;
  }
  while (v63 != 128);
  v85 = v75 / 16263.0;
  v86 = sqrtf((float)(v74 / 16263.0) - (float)(v85 * v85));
  if (v86 == 0.0)
  {
    v87 = 0.0;
    if (!LOBYTE(v60->imagp))
    {
LABEL_75:
      HIDWORD(v60->imagp) = 1098907648;
      v21 = v87 * 0.0625;
      *(float *)&v60->realp = v87 * 0.0625;
      LOBYTE(v60->imagp) = 1;
      goto LABEL_76;
    }
  }
  else
  {
    v87 = (float)(v62 - v85) / v86;
    if (!LOBYTE(v60->imagp))
    {
      if (v87 >= 8.0)
      {
        *((float *)&v60->imagp + 1) = v87;
        LODWORD(v60->realp) = 1065353216;
        LOBYTE(v60->imagp) = 1;
        v88 = 1.0;
LABEL_78:
        HIDWORD(v60->realp) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v124 = v88;
        v21 = v88;
        goto LABEL_79;
      }
      goto LABEL_75;
    }
  }
  v21 = v87 / *((float *)&v60->imagp + 1);
  *(float *)&v60->realp = v21;
  v88 = 1.0;
  if (v21 > 1.0)
  {
    LODWORD(v60->realp) = 1065353216;
    goto LABEL_78;
  }
LABEL_76:
  if (v21 > 0.2)
  {
    v88 = v21;
    goto LABEL_78;
  }
  realp_high = HIDWORD(v60->realp);
  HIDWORD(v60->realp) = realp_high + 1;
  *(_BYTE *)(a1 + 104) = 0;
  v124 = v21;
  if (realp_high >= 30)
    *(_BYTE *)(a1 + 105) = 1;
LABEL_79:
  Width = CVPixelBufferGetWidth(a2);
  Height = CVPixelBufferGetHeight(a2);
  v98 = *(double *)(a1 + 40);
  v99 = *(double *)(a1 + 48);
  v100 = 0.0;
  if (v98 >= 0.0)
    v101 = *(double *)(a1 + 40);
  else
    v101 = 0.0;
  v102 = (double)Width;
  v103 = v101;
  v104 = *(double *)(a1 + 72);
  v105 = *(double *)(a1 + 80);
  if (v104 < (double)Width)
    v102 = *(double *)(a1 + 72);
  v106 = v102;
  if (v99 >= 0.0)
    v100 = *(double *)(a1 + 48);
  v107 = v100;
  v108 = (double)Height;
  if (v105 < (double)Height)
    v108 = *(double *)(a1 + 80);
  v109 = v108;
  if ((v104 - v98) * 0.5 * (v105 - v99) >= (float)((float)(v106 - v103) * (float)(v109 - v107)))
  {
    if (*(_BYTE *)(a1 + 104))
      ctrTrackerComputation_updateLocation((uint64_t)&v3[2][11274].imagp, (uint64_t)v7, v57[1], v57[2], *(double *)&(*v3)[133].realp, *(double *)&(*v3)[133].imagp);
    goto LABEL_94;
  }
  ctrTrackerComputation_updateLocation((uint64_t)&v3[2][11274].imagp, (uint64_t)v7, v57[1], v57[2], *(double *)&(*v3)[133].realp, *(double *)&(*v3)[133].imagp);
  if (*(_BYTE *)(a1 + 104))
  {
    v110 = *(float64x2_t *)(a1 + 72);
    v111 = *(float64x2_t *)(a1 + 40);
    v112 = vsubq_f64(v110, v111);
    v113 = vmulq_f64(vaddq_f64(v110, v111), v118);
    v114 = vmulq_f64(vmulq_f64(v112, (float64x2_t)vdupq_n_s64(0x3FF3333340000000uLL)), v118);
    *(float64x2_t *)__p = vsubq_f64(v113, v114);
    v126 = __p[0];
    v120 = vaddq_f64(v113, v114);
    *(_OWORD *)__Setupb = *(_OWORD *)__p;
    v127 = vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL);
    v128 = v127;
    v129 = __p[1];
    updated = tplTrackerResampler_setImage((uint64_t)v3[3], a2, (double *)__p);
    v20 = updated;
    if (updated == 128)
    {
      v115 = vsubq_f64(v120, *(float64x2_t *)__Setupb);
      v116 = v115.f64[0] / 127.0;
      *(float *)v115.f64 = v115.f64[1] / 127.0;
      *(float *)&v116 = v116;
      tplTrackerResampler_resample((uint64_t)v3[3], (double *)__p, 0x80u, 128, (uint64_t)v3[2], &v3[2][1024], &v3[2][2048], p_imagp, *(float *)v115.f64, *(float *)&v116);
      ctrTrackerComputation_YCbCr2nRGB((uint64_t)v3[2], (uint64_t)&v3[2][1024], (uint64_t)&v3[2][2048], (uint64_t)&v3[2][3072], (uint64_t)&v3[2][4096], (uint64_t)&v3[2][5120]);
      ctrTrackerComputation_sizeAdaption((uint64_t)v3[2], (float64x2_t *)*v3, (float *)v3[4], (uint64_t)&v3[4][5].realp + 4, v7);
      goto LABEL_94;
    }
LABEL_62:
    free(v57);
    if (v20 != 128)
      return updated;
    goto LABEL_63;
  }
LABEL_94:
  free(v57);
LABEL_63:
  updated = ctrTrackerComputation_updateHistory(a2, *(uint64_t **)(a1 + 32), *(_BYTE *)(a1 + 104), &v124, *(float64x2_t *)(a1 + 40), *(float64x2_t *)(a1 + 72));
  if (updated == 128)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "unknown");
    v89 = *(double *)(a1 + 88) - *(double *)(a1 + 40);
    v90 = *(double *)(a1 + 56);
    v91 = *(double *)(a1 + 64) - *(double *)(a1 + 48);
    v128.i32[3] = 0;
    LOBYTE(v129) = 0;
    HIDWORD(v129) = 0;
    v128.i64[0] = 0;
    v128.i16[4] = 0;
    *(float *)&v89 = v89;
    *(float *)&v91 = v91;
    v127.i64[1] = __PAIR64__(LODWORD(v89), LODWORD(v91));
    *(float *)&v89 = v90;
    v127.i64[0] = LODWORD(v89) | 0x7FC0000000000000;
    *(float *)&v92 = (float)CVPixelBufferGetHeight(a2) - *(double *)(a1 + 64);
    v127.i32[1] = v92;
    *((float *)&v129 + 1) = v21;
    v93 = a3[1];
    if (v93 >= a3[2])
    {
      v94 = std::vector<vision::mod::DetectedObject>::__push_back_slow_path<vision::mod::DetectedObject const&>(a3, (uint64_t)__p);
    }
    else
    {
      vision::mod::DetectedObject::DetectedObject(a3[1], (uint64_t)__p);
      v94 = v93 + 80;
      a3[1] = v93 + 80;
    }
    a3[1] = v94;
    if (SHIBYTE(v126) < 0)
      operator delete(__p[0]);
    return 6784;
  }
  return updated;
}

void sub_1A13A40AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v22 + 8) = v23;
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::ObjectTrackerCorrelation::update(uint64_t a1, CVPixelBufferRef pixelBuffer, int32x2_t **a3)
{
  uint64_t *v3;
  int32x2_t *v4;
  float32x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  uint64_t result;
  __int32 v9;

  v3 = *(uint64_t **)(a1 + 32);
  if (!v3)
    return 6751;
  v4 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 80)
    return 6780;
  v5 = (float32x2_t)v4[3];
  v6 = vcvtq_f64_f32(v5);
  v7 = vcvtq_f64_f32(vadd_f32(v5, (float32x2_t)vrev64_s32(v4[4])));
  v9 = v4[7].i32[1];
  result = ctrTrackerComputation_updateHistory(pixelBuffer, v3, *(_BYTE *)(a1 + 104), (float *)&v9, v6, v7);
  if (result == 128)
    return 6784;
  return result;
}

uint64_t vision::mod::ObjectTrackerCorrelation::init(vision::mod::ObjectTrackerCorrelation *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  uint64x2_t v38;
  int64x2_t v39;
  int32x2_t v40;
  float32x2_t v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  float v46;
  float v47;

  v2 = malloc_type_calloc(1uLL, 0x28uLL, 0x20040769AC3DAuLL);
  if (v2)
  {
    v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x10000407D226C2BuLL);
    v2[1] = v3;
    if (v3)
    {
      v4 = malloc_type_calloc(1uLL, 0x860uLL, 0x1080040EFF975D0uLL);
      *v2 = v4;
      if (v4)
      {
        v5 = 2048;
        while (1)
        {
          v6 = malloc_type_malloc(0x8000uLL, 0x74D116ECuLL);
          *(_QWORD *)(*v2 + v5) = v6;
          if (!v6)
            break;
          v7 = malloc_type_malloc(0x8000uLL, 0x2F550853uLL);
          *(_QWORD *)(*v2 + v5 + 8) = v7;
          if (!v7)
            break;
          v5 += 16;
          if (v5 == 2112)
          {
            v8 = malloc_type_malloc(0x8000uLL, 0x2629E526uLL);
            *(_QWORD *)(*v2 + 2112) = v8;
            if (v8)
            {
              v9 = malloc_type_malloc(0x8000uLL, 0xEE41DED4uLL);
              v10 = (void *)*v2;
              *(_QWORD *)(*v2 + 2120) = v9;
              if (v9)
              {
                bzero(v10, 0x400uLL);
                bzero((void *)(*v2 + 1024), 0x400uLL);
                v11 = malloc_type_calloc(1uLL, 0x3D160uLL, 0x10A004026F24330uLL);
                v2[2] = v11;
                if (v11)
                {
                  bzero(v11, 0x4000uLL);
                  bzero((void *)(v2[2] + 0x4000), 0x4000uLL);
                  bzero((void *)(v2[2] + 0x8000), 0x4000uLL);
                  bzero((void *)(v2[2] + 49152), 0x4000uLL);
                  bzero((void *)(v2[2] + 0x10000), 0x4000uLL);
                  bzero((void *)(v2[2] + 81920), 0x4000uLL);
                  bzero((void *)(v2[2] + 98304), 0x4000uLL);
                  bzero((void *)(v2[2] + 246072), 0x400uLL);
                  bzero((void *)(v2[2] + 247096), 0x400uLL);
                  bzero((void *)(v2[2] + 248120), 0x400uLL);
                  bzero((void *)(v2[2] + 249144), 0x400uLL);
                  v12 = 0;
                  v13 = 1;
                  while (1)
                  {
                    v14 = v13;
                    v15 = malloc_type_malloc(0x8000uLL, 0x8B3C3602uLL);
                    *(_QWORD *)(v2[2] + 16 * v12 + 245992) = v15;
                    if (!v15)
                      break;
                    v16 = malloc_type_malloc(0x8000uLL, 0xEBAA786BuLL);
                    *(_QWORD *)(v2[2] + 16 * v12 + 246000) = v16;
                    if (!v16)
                      break;
                    v13 = 0;
                    v12 = 1;
                    if ((v14 & 1) == 0)
                    {
                      v17 = 4;
                      v18 = 245936;
                      while (1)
                      {
                        v19 = malloc_type_malloc(0x8000uLL, 0xF64943F3uLL);
                        *(_QWORD *)(v2[2] + v18 - 8) = v19;
                        if (!v19)
                          goto LABEL_41;
                        v20 = malloc_type_malloc(0x8000uLL, 0xA0BFFFF5uLL);
                        *(_QWORD *)(v2[2] + v18) = v20;
                        if (!v20)
                          goto LABEL_41;
                        v18 += 16;
                        if (!--v17)
                        {
                          v21 = 246032;
                          v22 = 3;
                          while (1)
                          {
                            v23 = malloc_type_calloc(0x40uLL, 4uLL, 0x100004052888210uLL);
                            *(_QWORD *)(v2[2] + v21 - 8) = v23;
                            if (!v23)
                              goto LABEL_41;
                            v24 = malloc_type_calloc(0x40uLL, 4uLL, 0x100004052888210uLL);
                            v25 = v2[2];
                            *(_QWORD *)(v25 + v21) = v24;
                            if (!v24)
                              goto LABEL_41;
                            v21 += 16;
                            if (!--v22)
                            {
                              *(_DWORD *)(v25 + 250184) = 0;
                              *(_QWORD *)(v2[2] + 250200) = vDSP_create_fftsetup(7uLL, 0);
                              v2[3] = tplTrackerResampler_alloc(128, 128);
                              v26 = malloc_type_calloc(1uLL, 0x10070uLL, 0x10C0040E2B89275uLL);
                              v2[4] = v26;
                              if (v26)
                              {
                                v27 = v26;
                                v28 = -10;
                                v29 = v26;
                                do
                                {
                                  if (v28 >= 0xFFFFFFFFFFFFFFF6)
                                  {
                                    v46 = expf((float)(((int)v28 + 1) * ((int)v28 + 1)) / -30.0);
                                    *(float *)&v30 = expf((float)((int)v28 * (int)v28) / -30.0);
                                    *((float *)&v30 + 1) = v46;
                                    *v29 = v30;
                                  }
                                  ++v29;
                                  v28 += 2;
                                }
                                while (v28);
                                v31 = 0;
                                *((_DWORD *)v27 + 10) = 1065353216;
                                v32 = (_QWORD *)((char *)v27 + 44);
                                do
                                {
                                  v33 = v31 + 2;
                                  if (v31 <= 9)
                                  {
                                    v34 = (float)(((int)v31 + 1) * ((int)v31 + 1)) / -26.0;
                                    v47 = expf((float)((int)v33 * (int)v33) / -26.0);
                                    *(float *)&v35 = expf(v34);
                                    *((float *)&v35 + 1) = v47;
                                    *v32 = v35;
                                  }
                                  ++v32;
                                  v31 = v33;
                                }
                                while (v33 != 10);
                                v36 = 0;
                                v37 = (int64x2_t)xmmword_1A15DD910;
                                v38 = (uint64x2_t)vdupq_n_s64(0x4001uLL);
                                v39 = vdupq_n_s64(2uLL);
                                do
                                {
                                  v40.i32[0] = v36 * 2;
                                  v40.i32[1] = v36 * 2 + 1;
                                  v41 = vsqrt_f32(vcvt_f32_s32(v40));
                                  if ((vmovn_s64((int64x2_t)vcgtq_u64(v38, (uint64x2_t)v37)).u8[0] & 1) != 0)
                                    HIDWORD(v27[v36 + 10]) = v41.i32[0];
                                  if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x4001uLL), *(uint64x2_t *)&v37)).i32[1] & 1) != 0)LODWORD(v27[v36 + 11]) = v41.i32[1];
                                  ++v36;
                                  v37 = vaddq_s64(v37, v39);
                                }
                                while (v36 != 8193);
                                v42 = malloc_type_malloc(0x8000uLL, 0x46BCD33EuLL);
                                *(_QWORD *)(v2[4] + 65632) = v42;
                                if (v42)
                                {
                                  v43 = malloc_type_malloc(0x8000uLL, 0x7EA5B9DCuLL);
                                  v44 = (_QWORD *)(v2[4] + 65624);
                                  *(_QWORD *)(v2[4] + 65640) = v43;
                                  if (v43)
                                  {
                                    *v44 = &cosineWindow;
                                    goto LABEL_42;
                                  }
                                }
                              }
                              goto LABEL_41;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            break;
          }
        }
      }
    }
  }
LABEL_41:
  ctrTrackerInitialization_freeContext(v2);
  v2 = 0;
LABEL_42:
  *((_QWORD *)this + 4) = v2;
  if (v2)
    return 6784;
  else
    return 6751;
}

uint64_t vision::mod::ObjectTrackerCorrelation::free(void **this)
{
  ctrTrackerInitialization_freeContext(this[4]);
  this[4] = 0;
  return 6784;
}

uint64_t vision::mod::DetectedObject::DetectedObject(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;

  v4 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "unknown");
  v4[3] = vdup_n_s32(0x7FC00000u);
  v5 = v4 + 3;
  *((_DWORD *)v4 + 13) = 0;
  *((_BYTE *)v4 + 56) = 0;
  *((_DWORD *)v4 + 15) = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((_WORD *)v4 + 24) = 0;
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  std::string::operator=((std::string *)v4, (const std::string *)a2);
  *v5 = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return a1;
}

void sub_1A13A4790(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<vision::mod::DetectedObject>::__push_back_slow_path<vision::mod::DetectedObject const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  unint64_t v17;
  _BYTE v18[24];
  _QWORD *v19;
  _QWORD v20[3];
  char v21;
  __int128 v22;
  __int128 v23;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v7 = 0x333333333333333;
  else
    v7 = v3;
  v19 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DetectedObject>>(v7);
  else
    v8 = 0;
  v17 = v7;
  *(_QWORD *)v18 = v7 + 80 * v2;
  *(_QWORD *)&v18[16] = v7 + 80 * v8;
  vision::mod::DetectedObject::DetectedObject(*(uint64_t *)v18, a2);
  v9 = *(_QWORD *)v18;
  *(_QWORD *)&v18[8] = *(_QWORD *)v18 + 80;
  v11 = *a1;
  v10 = a1[1];
  *(_QWORD *)&v23 = *(_QWORD *)v18;
  *((_QWORD *)&v23 + 1) = *(_QWORD *)v18;
  v22 = v23;
  v20[0] = v6;
  v20[1] = &v22;
  v20[2] = &v23;
  v21 = 0;
  while (v10 != v11)
  {
    v10 -= 80;
    vision::mod::DetectedObject::DetectedObject(v9 - 80, v10);
    v9 = *((_QWORD *)&v23 + 1) - 80;
    *((_QWORD *)&v23 + 1) -= 80;
  }
  v21 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vision::mod::DetectedObject>,std::reverse_iterator<vision::mod::DetectedObject*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v20);
  v12 = a1[2];
  v13 = *(_OWORD *)&v18[8];
  v16 = *(_QWORD *)&v18[8];
  v14 = *(_OWORD *)a1;
  *a1 = v9;
  *(_OWORD *)v18 = v14;
  *(_OWORD *)(a1 + 1) = v13;
  *(_QWORD *)&v18[16] = v12;
  v17 = v14;
  std::__split_buffer<vision::mod::DetectedObject>::~__split_buffer((uint64_t)&v17);
  return v16;
}

void sub_1A13A4914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<vision::mod::DetectedObject>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DetectedObject>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a1);
}

uint64_t std::__split_buffer<vision::mod::DetectedObject>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 10;
      *(_QWORD *)(a1 + 16) = v2 - 10;
      if (*((char *)v2 - 57) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vision::mod::DetectedObject>,std::reverse_iterator<vision::mod::DetectedObject*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 80;
    }
  }
  return a1;
}

void sub_1A13A4B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A13A4C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VNHomographyTrackerState;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A13A4F7C()
{
  __break(1u);
}

void sub_1A13A4F94(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<simd_float3x3,float>>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 6);
}

void sub_1A13A5114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13A5218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13A53B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A13A5718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13A5728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  if (v10)
    operator delete(v10);

  JUMPOUT(0x1A13A5794);
}

void sub_1A13A5730()
{
  void *v0;
  void *v1;

  if (v0)
    operator delete(v0);
  JUMPOUT(0x1A13A5774);
}

void sub_1A13A573C(_Unwind_Exception *exc_buf, int a2)
{
  os_unfair_lock_s *v2;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_1A13A5760()
{
  objc_end_catch();
  JUMPOUT(0x1A13A5768);
}

void sub_1A13A5780(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

float apple::vision::GreedyClusteringParamsWrapperRevision5::thresholdScaleForDescriptor(apple::vision::GreedyClusteringParamsWrapperRevision5 *this, float *a2)
{
  return 0.6;
}

uint64_t apple::vision::GreedyClusteringParamsWrapperRevision5::getConfidenceBasedScalingFlag(apple::vision::GreedyClusteringParamsWrapperRevision5 *this)
{
  return 0;
}

uint64_t apple::vision::GreedyClusteringParamsWrapperRevision5::getGrowBiggestClustersFlag(apple::vision::GreedyClusteringParamsWrapperRevision5 *this)
{
  return 0;
}

_QWORD *apple::vision::GreedyClusteringParamsWrapper::createClusteringHacksWrapper(_QWORD *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  _OWORD *v9;
  char *v10;
  apple::vision::GreedyClusteringParamsWrapper *v11;
  float *v12;
  _BOOL4 isTorsoAvailable;
  float v14;
  _BOOL4 v15;
  float v16;
  _BOOL4 v17;
  float v18;
  float v19;
  __int128 v20;

  *result = 0;
  result[1] = 0;
  if ((a2 & 0xFFFFFFFD) == 0xDECAF001)
  {
    v9 = result;
    if (a3 == 1 || a3 == -557125630)
    {
      v10 = (char *)operator new(0x58uLL);
      *(_OWORD *)(v10 + 8) = 0u;
      *(_QWORD *)v10 = &off_1E453B418;
      *((_QWORD *)v10 + 3) = &unk_1E453A118;
      v11 = (apple::vision::GreedyClusteringParamsWrapper *)(v10 + 24);
      *((_OWORD *)v10 + 2) = 0u;
      v12 = (float *)(v10 + 32);
      *((_DWORD *)v10 + 12) = a2;
      *((_DWORD *)v10 + 13) = a3;
      *((_QWORD *)v10 + 7) = a4;
      *((_QWORD *)v10 + 8) = a5;
      isTorsoAvailable = apple::vision::GreedyClusteringParamsWrapper::isTorsoAvailable((apple::vision::GreedyClusteringParamsWrapper *)(v10 + 24));
      v14 = 0.18;
      if (!isTorsoAvailable)
        v14 = 0.325;
      *v12 = v14;
      v15 = apple::vision::GreedyClusteringParamsWrapper::isTorsoAvailable(v11);
      v16 = 0.165;
      if (!v15)
        v16 = 0.173;
      *((_QWORD *)v10 + 9) = 0;
      *((float *)v10 + 9) = v16;
      *((_QWORD *)v10 + 5) = 0x23E3851ECLL;
      *((_QWORD *)v10 + 3) = &off_1E453A140;
      *((_QWORD *)v10 + 10) = 0;
      v17 = apple::vision::GreedyClusteringParamsWrapper::isTorsoAvailable(v11);
      v18 = 0.3;
      if (!v17)
        v18 = 0.325;
      *v12 = v18;
      result = (_QWORD *)apple::vision::GreedyClusteringParamsWrapper::isTorsoAvailable(v11);
      v19 = 0.295;
      if (!(_DWORD)result)
        v19 = 0.173;
      *((float *)v10 + 9) = v19;
      *((_DWORD *)v10 + 10) = 1050253722;
      *((_QWORD *)v10 + 3) = &off_1E453A168;
      *(_QWORD *)&v20 = v10 + 24;
      *((_QWORD *)&v20 + 1) = v10;
      *v9 = v20;
    }
  }
  return result;
}

void sub_1A13A5940(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

BOOL apple::vision::GreedyClusteringParamsWrapper::isTorsoAvailable(apple::vision::GreedyClusteringParamsWrapper *this)
{
  const char *v2;
  size_t v3;
  size_t v4;
  size_t v5;

  v2 = (const char *)objc_msgSend(CFSTR("VNClusteringAlgorithm_GreedyWithTorso"), "UTF8String");
  v3 = strlen(v2);
  v4 = *((_QWORD *)this + 5);
  if (v3 >= v4)
    v5 = *((_QWORD *)this + 5);
  else
    v5 = v3;
  return !memcmp(*((const void **)this + 4), v2, v5) && v4 == v3;
}

void std::__shared_ptr_emplace<apple::vision::GreedyClusteringParamsWrapperRevision5Concrete>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<apple::vision::GreedyClusteringParamsWrapperRevision5Concrete>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<apple::vision::GreedyClusteringParamsWrapperRevision5Concrete>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_1E453A140;
  return std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 72);
}

void sub_1A13A5BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13A5D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13A5E54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13A5F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13A6034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13A6094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13A610C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13A6160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13A61AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13A61F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13A6240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13A64AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1A13A66D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13A67F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A13A68AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13A6964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CVBuffer *VNCropAndScalePixelBufferToPixelBuffers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, double a7, double a8, double a9, double a10)
{
  void *v20;
  VNImageBuffer *v21;
  void *v22;
  VNSession *v23;
  VNImageBuffer *v24;
  unint64_t v25;
  unint64_t v26;
  __CVBuffer *v27;
  id v28;
  id v29;
  id v31;
  void *values;
  id v33;
  const __CFString *v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3)
  {
    v20 = (void *)MEMORY[0x1A1B0B060]();
    v21 = [VNImageBuffer alloc];
    v34 = CFSTR("VNImageBufferOption_DoNotCacheRepresentations");
    v35[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_alloc_init(VNSession);
    v24 = -[VNImageBuffer initWithCVPixelBuffer:orientation:options:session:](v21, "initWithCVPixelBuffer:orientation:options:session:", a1, 1, v22, v23);

    if (v24)
    {
      if (a9 <= 1.0 && a10 <= 1.0)
      {
        v25 = -[VNImageBuffer width](v24, "width");
        v26 = -[VNImageBuffer height](v24, "height");
        a7 = a7 * (double)v25;
        a9 = a9 * (double)v25;
        a8 = a8 * (double)v26;
        a10 = a10 * (double)v26;
      }
      if (a5)
      {
        v33 = 0;
        -[VNImageBuffer augmentedCroppedBuffersWithWidth:height:format:cropRect:options:augmentationOptions:error:](v24, "augmentedCroppedBuffersWithWidth:height:format:cropRect:options:augmentationOptions:error:", a2, a3, a4, 0, a5, &v33, a7, a8, a9, a10);
        v27 = (__CVBuffer *)objc_claimAutoreleasedReturnValue();
        v28 = v33;
      }
      else
      {
        v31 = 0;
        v27 = -[VNImageBuffer croppedBufferWithWidth:height:format:cropRect:options:error:](v24, "croppedBufferWithWidth:height:format:cropRect:options:error:", a2, a3, a4, 0, &v31, a7, a8, a9, a10);
        v28 = v31;
        values = v27;
        if (v27)
        {
          v27 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
          CVPixelBufferRelease((CVPixelBufferRef)values);
        }
      }
      if (!a6 || !v28)
        goto LABEL_22;
      v29 = v28;
      v28 = v29;
    }
    else
    {
      if (!a6)
      {
        v27 = 0;
        v28 = 0;
        goto LABEL_22;
      }
      +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", -1, CFSTR("The image is invalid"));
      v29 = (id)objc_claimAutoreleasedReturnValue();
      v27 = 0;
      v28 = 0;
    }
    *a6 = v29;
LABEL_22:

    objc_autoreleasePoolPop(v20);
    return v27;
  }
  v27 = 0;
  if (a6)
    *a6 = _createInvalidArgumentError(0);
  return v27;
}

void sub_1A13A6C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _createInvalidArgumentError(NSString *a1)
{
  NSString *v1;
  __CFString *v2;
  uint64_t v3;

  v1 = a1;
  if (v1)
    v2 = (__CFString *)v1;
  else
    v2 = CFSTR("Invalid argument");
  +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", -1, v2);
  v3 = objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1A13A6CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _VNScenePrintsFromPixelBuffers(__CVBuffer *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, __CFError **a5)
{
  void *v10;
  _BOOL4 ConfiguredSceneprintRequest;
  VNCreateSceneprintRequest *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  size_t Width;
  size_t Height;
  float v22;
  float v23;
  BOOL v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  NSArray *v31;
  id v33;
  id v34;

  if (a1)
  {
    v10 = (void *)MEMORY[0x1A1B0B060]();
    v33 = 0;
    v34 = 0;
    ConfiguredSceneprintRequest = _getConfiguredSceneprintRequest(a2, a4, &v34, &v33, (uint64_t *)a5);
    v12 = (VNCreateSceneprintRequest *)v34;
    v13 = v33;
    v14 = v13;
    v15 = 0;
    if (ConfiguredSceneprintRequest)
    {
      objc_msgSend(v13, "pixelsWideRange");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "idealDimension");

      objc_msgSend(v14, "pixelsHighRange");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "idealDimension");

      Width = CVPixelBufferGetWidth(a1);
      Height = CVPixelBufferGetHeight(a1);
      v22 = (double)v17 / (double)Width;
      v23 = (double)v19 / (double)Height;
      v24 = v22 < v23;
      v25 = 1.0 / v22 * (double)v19;
      v26 = 1.0 / v23 * (double)v17;
      if (v24)
        v27 = (double)Height;
      else
        v27 = v25;
      if (v24)
        v28 = v26;
      else
        v28 = (double)Width;
      if (v24)
        v29 = 0.0;
      else
        v29 = ((double)Height - v25) * 0.5 + 0.0;
      if (v24)
        v30 = ((double)Width - v26) * 0.5 + 0.0;
      else
        v30 = 0.0;
      v31 = (NSArray *)VNCropAndScalePixelBufferToPixelBuffers((uint64_t)a1, (unint64_t)(double)v17, (unint64_t)(double)v19, objc_msgSend(v14, "idealImageFormat"), (uint64_t)a3, a5, v30, v29, v28, v27);
      if (v31)
        v15 = _performSceneprintRequestOnAugmentedBuffers(v12, v31, a5);
      else
        v15 = 0;

    }
    objc_autoreleasePoolPop(v10);
  }
  else
  {
    v15 = 0;
    if (a5)
      *a5 = (__CFError *)_createInvalidArgumentError(CFSTR("no input buffer"));
  }
  return v15;
}

void sub_1A13A6EE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL _getConfiguredSceneprintRequest(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  VNCreateSceneprintRequest *v10;
  uint64_t v11;
  BOOL v12;
  NSError *v13;
  void *v14;
  uint64_t v15;
  _BOOL8 v16;
  void *v17;
  void *v18;
  void *v19;
  id v21;

  v10 = objc_alloc_init(VNCreateSceneprintRequest);
  -[VNRequest setUsesCPUOnly:](v10, "setUsesCPUOnly:", a2);
  if ((int)a1 >= 1)
    v11 = a1;
  else
    v11 = -(int)a1 + 3737841664;
  v21 = 0;
  v12 = -[VNRequest setRevision:error:](v10, "setRevision:error:", v11, &v21);
  v13 = (NSError *)v21;
  if (v12)
  {
    -[VNCreateSceneprintRequest supportedImageSizeSet](v10, "supportedImageSizeSet");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "count");
    v16 = v15 != 0;
    if (v15)
    {
      *a3 = objc_retainAutorelease(v10);
      objc_msgSend(v14, "firstObject");
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else if (a5)
    {
      v17 = (void *)MEMORY[0x1E0CB3940];
      -[VNRequest specifier](v10, "specifier");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "stringWithFormat:", CFSTR("could not obtain a supported image size for %@"), v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", -1, v19);
      *a5 = objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v16 = 0;
    if (a5)
      *a5 = _createInvalidRequestRevisionError(a1, v13);
  }

  return v16;
}

void sub_1A13A70A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id _performSceneprintRequestOnAugmentedBuffers(VNCreateSceneprintRequest *a1, NSArray *a2, __CFError **a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  VNImageRequestHandler *v8;
  VNImageRequestHandler *v9;
  BOOL v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v23;
  VNCreateSceneprintRequest *v24;
  void *v26;
  NSArray *v27;
  id v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  v24 = a1;
  v27 = a2;
  v4 = -[NSArray count](v27, "count");
  v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v4);
  if (v23)
  {
    v29[0] = v24;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v5 = 0;
      while (1)
      {
        v6 = (void *)MEMORY[0x1A1B0B060]();
        v7 = -[NSArray objectAtIndex:](v27, "objectAtIndex:", v5);
        v8 = [VNImageRequestHandler alloc];
        v9 = -[VNImageRequestHandler initWithCVPixelBuffer:options:](v8, "initWithCVPixelBuffer:options:", v7, MEMORY[0x1E0C9AA70]);
        v28 = 0;
        v10 = -[VNImageRequestHandler performRequests:error:](v9, "performRequests:error:", v26, &v28);
        v11 = v28;
        v12 = v11;
        if (v10)
        {
          -[VNRequest results](v24, "results");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "firstObject");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "sceneprints");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "firstObject");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            objc_msgSend(v16, "descriptorData");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "addObject:", v17);

          }
        }
        else if (a3)
        {
          *a3 = (__CFError *)v11;
        }

        objc_autoreleasePoolPop(v6);
        if (!v10)
          break;
        if (v4 == ++v5)
          goto LABEL_12;
      }
      v18 = 0;
    }
    else
    {
LABEL_12:
      v18 = v23;
    }

  }
  else
  {
    if (a3)
    {
      v19 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v4);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "stringWithFormat:", CFSTR("unable to allocate results array for %@ elements"), v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", -1, v21);
      *a3 = (__CFError *)objc_claimAutoreleasedReturnValue();

    }
    v18 = 0;
  }

  return v18;
}

void sub_1A13A7364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _createInvalidRequestRevisionError(uint64_t a1, NSError *a2)
{
  NSError *v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Invalid requestRevision %d requested"), a1);
  +[VNError errorWithCode:message:underlyingError:](VNError, "errorWithCode:message:underlyingError:", -1, v4, v3);
  v5 = objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1A13A74A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id VNScenePrintsFromPixelBuffersUsesCPUOnly(__CVBuffer *a1, uint64_t a2, const __CFDictionary *a3, __CFError **a4)
{
  return _VNScenePrintsFromPixelBuffers(a1, a2, a3, 1, a4);
}

id VNScenePrintsFromPixelBuffers(__CVBuffer *a1, uint64_t a2, const __CFDictionary *a3, __CFError **a4)
{
  return _VNScenePrintsFromPixelBuffers(a1, a2, a3, 0, a4);
}

__CVBuffer *VNCropAndScaleFromURLToPixelBuffers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, double a7, double a8, double a9, double a10)
{
  void *v20;
  VNImageBuffer *v21;
  void *v22;
  VNSession *v23;
  VNImageBuffer *v24;
  unint64_t v25;
  unint64_t v26;
  __CVBuffer *v27;
  id v28;
  id v29;
  id v31;
  void *values;
  id v33;
  const __CFString *v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3)
  {
    v20 = (void *)MEMORY[0x1A1B0B060]();
    v21 = [VNImageBuffer alloc];
    v34 = CFSTR("VNImageBufferOption_DoNotCacheRepresentations");
    v35[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_alloc_init(VNSession);
    v24 = -[VNImageBuffer initWithURL:orientation:options:session:](v21, "initWithURL:orientation:options:session:", a1, 0, v22, v23);

    if (v24 && -[VNImageBuffer width](v24, "width") && -[VNImageBuffer height](v24, "height"))
    {
      if (a9 <= 1.0 && a10 <= 1.0)
      {
        v25 = -[VNImageBuffer width](v24, "width");
        v26 = -[VNImageBuffer height](v24, "height");
        a7 = a7 * (double)v25;
        a9 = a9 * (double)v25;
        a8 = a8 * (double)v26;
        a10 = a10 * (double)v26;
      }
      if (a5)
      {
        v33 = 0;
        -[VNImageBuffer augmentedCroppedBuffersWithWidth:height:format:cropRect:options:augmentationOptions:error:](v24, "augmentedCroppedBuffersWithWidth:height:format:cropRect:options:augmentationOptions:error:", a2, a3, a4, 0, a5, &v33, a7, a8, a9, a10);
        v27 = (__CVBuffer *)objc_claimAutoreleasedReturnValue();
        v28 = v33;
      }
      else
      {
        v31 = 0;
        v27 = -[VNImageBuffer croppedBufferWithWidth:height:format:cropRect:options:error:](v24, "croppedBufferWithWidth:height:format:cropRect:options:error:", a2, a3, a4, 0, &v31, a7, a8, a9, a10);
        v28 = v31;
        values = v27;
        if (v27)
        {
          v27 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
          CVPixelBufferRelease((CVPixelBufferRef)values);
        }
      }
      if (!a6 || !v28)
        goto LABEL_24;
      v29 = v28;
      v28 = v29;
    }
    else
    {
      if (!a6)
      {
        v27 = 0;
        v28 = 0;
LABEL_24:

        objc_autoreleasePoolPop(v20);
        return v27;
      }
      +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", -1, CFSTR("The image is invalid"));
      v29 = (id)objc_claimAutoreleasedReturnValue();
      v27 = 0;
      v28 = 0;
    }
    *a6 = v29;
    goto LABEL_24;
  }
  v27 = 0;
  if (a6)
    *a6 = _createInvalidArgumentError(0);
  return v27;
}

void sub_1A13A77B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id _VNScenePrintsFromURL(const __CFURL *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, __CFError **a5)
{
  void *v10;
  id v11;
  void *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  VNImageBuffer *v17;
  void *v18;
  VNSession *v19;
  VNImageBuffer *v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  BOOL v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  NSArray *v32;
  id v33;
  VNCreateSceneprintRequest *v35;
  id v36;
  id v37;
  const __CFString *v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v10 = (void *)MEMORY[0x1A1B0B060]();
    v36 = 0;
    v37 = 0;
    LODWORD(a4) = _getConfiguredSceneprintRequest(a2, a4, &v37, &v36, (uint64_t *)a5);
    v35 = (VNCreateSceneprintRequest *)v37;
    v11 = v36;
    v12 = v11;
    if ((_DWORD)a4)
    {
      objc_msgSend(v11, "pixelsWideRange");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "idealDimension");

      objc_msgSend(v12, "pixelsHighRange");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "idealDimension");

      v17 = [VNImageBuffer alloc];
      v38 = CFSTR("VNImageBufferOption_DoNotCacheRepresentations");
      v39[0] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, &v38, 1);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_alloc_init(VNSession);
      v20 = -[VNImageBuffer initWithURL:orientation:options:session:](v17, "initWithURL:orientation:options:session:", a1, 0, v18, v19);

      if (v20)
      {
        v21 = -[VNImageBuffer width](v20, "width");
        v22 = -[VNImageBuffer height](v20, "height");
        v23 = (double)v14 / (double)v21;
        v24 = (double)v16 / (double)v22;
        v25 = v23 < v24;
        v26 = 1.0 / v23 * (double)v16;
        v27 = 1.0 / v24 * (double)v14;
        if (v25)
          v28 = (double)v22;
        else
          v28 = v26;
        if (v25)
          v29 = v27;
        else
          v29 = (double)v21;
        if (v25)
          v30 = 0.0;
        else
          v30 = ((double)v22 - v26) * 0.5 + 0.0;
        if (v25)
          v31 = ((double)v21 - v27) * 0.5 + 0.0;
        else
          v31 = 0.0;
        v32 = (NSArray *)VNCropAndScaleFromURLToPixelBuffers((uint64_t)a1, (unint64_t)(double)v14, (unint64_t)(double)v16, objc_msgSend(v12, "idealImageFormat", v35), (uint64_t)a3, a5, v31, v30, v29, v28);
        if (v32)
          v33 = _performSceneprintRequestOnAugmentedBuffers(v35, v32, a5);
        else
          v33 = 0;

      }
      else if (a5)
      {
        +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", -1, CFSTR("The image is invalid"), v35);
        v33 = 0;
        *a5 = (__CFError *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v33 = 0;
      }

    }
    else
    {
      v33 = 0;
    }

    objc_autoreleasePoolPop(v10);
  }
  else
  {
    v33 = 0;
    if (a5)
      *a5 = (__CFError *)_createInvalidArgumentError(CFSTR("invalid URL"));
  }
  return v33;
}

void sub_1A13A7AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

id VNScenePrintsFromURLUsesCPUOnly(const __CFURL *a1, uint64_t a2, const __CFDictionary *a3, __CFError **a4)
{
  if ((int)a2 >= 1)
    a2 = a2;
  else
    a2 = -(int)a2 + 3737841664;
  return _VNScenePrintsFromURL(a1, a2, a3, 1, a4);
}

id VNScenePrintsFromURL(const __CFURL *a1, uint64_t a2, const __CFDictionary *a3, __CFError **a4)
{
  if ((int)a2 >= 1)
    a2 = a2;
  else
    a2 = -(int)a2 + 3737841664;
  return _VNScenePrintsFromURL(a1, a2, a3, 0, a4);
}

uint64_t VNElementCountForScenePrintRequestRevision(int a1)
{
  uint64_t v1;
  uint64_t v2;
  VNCreateSceneprintRequest *v3;

  if (a1 >= 1)
    v1 = a1;
  else
    v1 = -a1 + 3737841664;
  if (v1 != 1)
  {
    v3 = objc_alloc_init(VNCreateSceneprintRequest);
    if (!-[VNRequest setRevision:error:](v3, "setRevision:error:", v1, 0))
      goto LABEL_11;
    if ((unint64_t)(v1 - 3737841671) < 2)
      goto LABEL_10;
    if (v1 == 2)
    {
      v2 = 2048;
      goto LABEL_12;
    }
    if (v1 == 3)
LABEL_10:
      v2 = 768;
    else
LABEL_11:
      v2 = 0;
LABEL_12:

    return v2;
  }
  return 2048;
}

void sub_1A13A7C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VNLengthInBytesForScenePrintRequestRevision(int a1)
{
  uint64_t v1;
  uint64_t v2;
  VNCreateSceneprintRequest *v3;

  if (a1 >= 1)
    v1 = a1;
  else
    v1 = -a1 + 3737841664;
  if (v1 != 1)
  {
    v3 = objc_alloc_init(VNCreateSceneprintRequest);
    if (!-[VNRequest setRevision:error:](v3, "setRevision:error:", v1, 0))
      goto LABEL_11;
    if ((unint64_t)(v1 - 3737841671) < 2)
      goto LABEL_10;
    if (v1 == 2)
    {
      v2 = 0x2000;
      goto LABEL_12;
    }
    if (v1 == 3)
LABEL_10:
      v2 = 3072;
    else
LABEL_11:
      v2 = 0;
LABEL_12:

    return v2;
  }
  return 0x2000;
}

void sub_1A13A7CFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFMutableArrayRef VNSceneprintSupportedRevisions()
{
  objc_class *v0;

  v0 = (objc_class *)objc_opt_class();
  return _createSupportedRevisionsArrayForRequestClass(v0);
}

CFMutableArrayRef _createSupportedRevisionsArrayForRequestClass(objc_class *a1)
{
  void *v2;
  void *v3;
  CFIndex v4;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v6;
  _QWORD v8[5];

  v2 = (void *)MEMORY[0x1A1B0B060]();
  -[objc_class supportedRevisions](a1, "supportedRevisions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, MEMORY[0x1E0C9B378]);
  v6 = Mutable;
  if (Mutable)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___ZL45_createSupportedRevisionsArrayForRequestClassP10objc_class_block_invoke;
    v8[3] = &__block_descriptor_40_e12_v24__0Q8_B16l;
    v8[4] = Mutable;
    objc_msgSend(v3, "enumerateIndexesUsingBlock:", v8);
  }

  objc_autoreleasePoolPop(v2);
  return v6;
}

void sub_1A13A7DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL45_createSupportedRevisionsArrayForRequestClassP10objc_class_block_invoke(uint64_t a1, uint64_t a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2));
}

CFMutableArrayRef VNDetectionPrintSupportedRevisions()
{
  objc_class *v0;

  v0 = (objc_class *)objc_opt_class();
  return _createSupportedRevisionsArrayForRequestClass(v0);
}

id VNDetectionPrintShapes(unsigned int a1, uint64_t *a2)
{
  uint64_t v2;
  NSError *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSError *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v20;
  id obj;
  uint64_t v22;
  void *v23;
  NSError *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  _QWORD v30[3];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((int)a1 >= 1)
    v2 = a1;
  else
    v2 = -a1 + 3737841664;
  v29 = 0;
  +[VNDetectionprint knownTensorKeysForRequestRevision:error:](VNDetectionprint, "knownTensorKeysForRequestRevision:error:", v2, &v29);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (NSError *)v29;
  if (v20)
  {
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v20, "count"));
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    obj = v20;
    v23 = (void *)v4;
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    if (v5)
    {
      v22 = *(_QWORD *)v26;
      while (2)
      {
        v6 = 0;
        v7 = v3;
        do
        {
          if (*(_QWORD *)v26 != v22)
            objc_enumerationMutation(obj);
          v8 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * v6);
          v24 = v7;
          +[VNDetectionprint tensorShapeForKey:error:](VNDetectionprint, "tensorShapeForKey:error:", v8, &v24);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v3 = v24;

          if (!v9)
          {
            if (a2)
              *a2 = _createInvalidRequestRevisionError(a1, v3);

            v16 = 0;
            v15 = v23;
            goto LABEL_20;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v10 = v9;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", objc_msgSend(v10, "channels"));
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v30[0] = v11;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", objc_msgSend(v10, "height"));
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v30[1] = v12;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", objc_msgSend(v10, "width"));
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v30[2] = v13;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 3);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "setObject:forKeyedSubscript:", v14, v8);

          }
          else
          {
            objc_msgSend(v9, "sizesAsNSNumberArray");
            v10 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "setObject:forKeyedSubscript:", v10, v8);
          }

          ++v6;
          v7 = v3;
        }
        while (v5 != v6);
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
        if (v5)
          continue;
        break;
      }
    }

    v15 = v23;
    v16 = v23;
LABEL_20:

  }
  else
  {
    v16 = 0;
    if (a2)
      *a2 = _createInvalidRequestRevisionError(a1, v3);
  }

  return v16;
}

void sub_1A13A8178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

id VNDetectionPrintsFromPixelBuffers(__CVBuffer *a1, uint64_t a2, const __CFDictionary *a3, __CFError **a4)
{
  return _VNDetectionPrintsFromPixelBuffers(a1, a2, a3, 0, a4);
}

id _VNDetectionPrintsFromPixelBuffers(__CVBuffer *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, __CFError **a5)
{
  id v9;
  VNCreateDetectionprintRequest *v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  size_t Width;
  size_t Height;
  __CVBuffer *v21;
  uint64_t v22;
  VNImageRequestHandler *v23;
  VNImageRequestHandler *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  int v37;
  id v38;
  void *v39;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __CVBuffer *v48;
  void *v49;
  void *v50;
  NSError *v51;
  VNImageRequestHandler *v52;
  void *context;
  VNCreateDetectionprintRequest *v54;
  uint64_t v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  id v62;
  id v63;
  _BYTE v64[128];
  _QWORD v65[3];

  v65[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v9 = VNDetectionPrintShapes(a2, (uint64_t *)a5);
    v50 = v9;
    if (!v9)
    {
      v38 = 0;
LABEL_48:

      return v38;
    }
    objc_msgSend(v9, "allKeys");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend(v49, "count");
    v10 = objc_alloc_init(VNCreateDetectionprintRequest);
    if ((int)a2 >= 1)
      v11 = a2;
    else
      v11 = -(int)a2 + 3737841664;
    v63 = 0;
    v54 = v10;
    v12 = -[VNRequest setRevision:error:](v10, "setRevision:error:", v11, &v63);
    v51 = (NSError *)v63;
    if (!v12)
    {
      v38 = 0;
      if (a5)
        *a5 = (__CFError *)_createInvalidRequestRevisionError(a2, v51);
      goto LABEL_47;
    }
    -[VNRequest setUsesCPUOnly:](v54, "setUsesCPUOnly:", a4);
    -[VNImageBasedRequest supportedImageSizeSet](v54, "supportedImageSizeSet");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "firstObject");
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    if (v45)
    {
      objc_msgSend(v45, "pixelsWideRange");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "idealDimension");

      objc_msgSend(v45, "pixelsHighRange");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "idealDimension");

      v18 = objc_msgSend(v45, "idealImageFormat");
      Width = CVPixelBufferGetWidth(a1);
      Height = CVPixelBufferGetHeight(a1);
      v21 = VNCropAndScalePixelBufferToPixelBuffers((uint64_t)a1, v15, v17, v18, (uint64_t)a3, a5, 0.0, 0.0, (double)Width, (double)Height);
      v48 = v21;
      if (v21)
      {
        v47 = -[__CVBuffer count](v21, "count");
        v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v47);
        v65[0] = v54;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v65, 1);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        if (v47)
        {
          v56 = 0;
          while (1)
          {
            context = (void *)MEMORY[0x1A1B0B060]();
            v22 = -[__CVBuffer objectAtIndex:](v48, "objectAtIndex:", v56);
            v23 = [VNImageRequestHandler alloc];
            v24 = -[VNImageRequestHandler initWithCVPixelBuffer:options:](v23, "initWithCVPixelBuffer:options:", v22, MEMORY[0x1E0C9AA70]);
            v62 = 0;
            v52 = v24;
            LOBYTE(v22) = -[VNImageRequestHandler performRequests:error:](v24, "performRequests:error:", v46, &v62);
            v25 = v62;
            v26 = v25;
            if ((v22 & 1) != 0)
            {
              -[VNRequest results](v54, "results");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "firstObject");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "detectionprint");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", v44);
              v60 = 0u;
              v61 = 0u;
              v58 = 0u;
              v59 = 0u;
              v29 = v49;
              v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v58, v64, 16);
              if (v30)
              {
                v31 = *(_QWORD *)v59;
                while (2)
                {
                  v32 = 0;
                  v33 = v26;
                  do
                  {
                    if (*(_QWORD *)v59 != v31)
                      objc_enumerationMutation(v29);
                    v34 = *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * v32);
                    v57 = v33;
                    objc_msgSend(v27, "tensorForKey:error:", v34, &v57);
                    v35 = (void *)objc_claimAutoreleasedReturnValue();
                    v26 = v57;

                    if (!v35)
                    {
                      if (a5)
                        *a5 = (__CFError *)CFRetain(v26);

                      v37 = 1;
                      goto LABEL_27;
                    }
                    objc_msgSend(v35, "descriptorData");
                    v36 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v28, "setObject:forKeyedSubscript:", v36, v34);

                    ++v32;
                    v33 = v26;
                  }
                  while (v30 != v32);
                  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v58, v64, 16);
                  if (v30)
                    continue;
                  break;
                }
              }

              objc_msgSend(v41, "addObject:", v28);
              v37 = 0;
LABEL_27:

            }
            else
            {
              if (a5)
                *a5 = (__CFError *)CFRetain(v25);
              v37 = 1;
            }

            objc_autoreleasePoolPop(context);
            if (v37)
              break;
            if (++v56 == v47)
              goto LABEL_30;
          }
          v38 = 0;
        }
        else
        {
LABEL_30:
          v38 = v41;
        }

      }
      else
      {
        v38 = 0;
      }

    }
    else
    {
      if (a5)
      {
        v39 = 0;
        +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", -1, CFSTR("no supported image size available"));
        v38 = 0;
        *a5 = (__CFError *)objc_claimAutoreleasedReturnValue();
LABEL_46:

LABEL_47:
        goto LABEL_48;
      }
      v38 = 0;
    }
    v39 = v45;
    goto LABEL_46;
  }
  v38 = 0;
  if (a5)
    *a5 = (__CFError *)_createInvalidArgumentError(CFSTR("no input buffer"));
  return v38;
}

void sub_1A13A8768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23)
{

  _Unwind_Resume(a1);
}

id VNDetectionPrintsFromPixelBuffersUsesCPUOnly(__CVBuffer *a1, uint64_t a2, const __CFDictionary *a3, __CFError **a4)
{
  return _VNDetectionPrintsFromPixelBuffers(a1, a2, a3, 1, a4);
}

void sub_1A13A8AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13A8C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13A8DE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13A8FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13A9280()
{
  __cxa_end_catch();
  JUMPOUT(0x1A13A9200);
}

void sub_1A13A9504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1A13A9860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a8);
  vision::mod::ImageAnalyzer_Options::~ImageAnalyzer_Options((vision::mod::ImageAnalyzer_Options *)va);

  _Unwind_Resume(a1);
}

void sub_1A13A99AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13A9C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13A9EF4()
{
  objc_end_catch();
  JUMPOUT(0x1A13A9F08);
}

uint64_t __Block_byref_object_copy__891(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__892(uint64_t a1)
{

}

uint64_t std::shared_ptr<vision::mod::ImageAnalyzer>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void vision::mod::ImageAnalyzer_Options::~ImageAnalyzer_Options(vision::mod::ImageAnalyzer_Options *this)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  void **v9;

  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(*((char **)this + 71));
  v2 = (void **)*((_QWORD *)this + 67);
  if (v2)
  {
    v3 = (void **)*((_QWORD *)this + 68);
    v4 = (void *)*((_QWORD *)this + 67);
    if (v3 != v2)
    {
      do
      {
        v3 -= 3;
        v9 = v3;
        std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v9);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 67);
    }
    *((_QWORD *)this + 68) = v2;
    operator delete(v4);
  }
  v9 = (void **)((char *)this + 512);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v5 = (void **)*((_QWORD *)this + 61);
  if (v5)
  {
    v6 = (void **)*((_QWORD *)this + 62);
    v7 = (void *)*((_QWORD *)this + 61);
    if (v6 != v5)
    {
      do
      {
        v6 -= 3;
        v9 = v6;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 61);
    }
    *((_QWORD *)this + 62) = v5;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 58);
  if (v8)
  {
    *((_QWORD *)this + 59) = v8;
    operator delete(v8);
  }
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  if (*((char *)this + 383) < 0)
    operator delete(*((void **)this + 45));
  v9 = (void **)((char *)this + 336);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (*((char *)this + 335) < 0)
    operator delete(*((void **)this + 39));
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_1A13AA3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

BOOL _isAcceptableRecognizedObjectIdentifier(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(id, id);
  _BOOL8 v5;

  v3 = a1;
  v4 = a2;
  v5 = (objc_msgSend(v3, "hasPrefix:", CFSTR("CVML_UNKNOWN_")) & 1) == 0 && (!v4 || (v4[2](v4, v3) & 1) == 0);

  return v5;
}

void sub_1A13AA564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(*(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t *vision::mod::ImageAnalyzer::getLabelsList(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>>>::find<vision::mod::ImageAnalyzer_AnalysisType>((_QWORD *)(a1 + 864), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 3;
}

uint64_t *vision::mod::ImageAnalyzer::getDisallowedLabels(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 912);
  if (!v2)
    goto LABEL_17;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 904) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_17:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    v7 = v6[1];
    if (v7 == a2)
      break;
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= v2)
        v7 %= v2;
    }
    else
    {
      v7 &= v2 - 1;
    }
    if (v7 != v4)
      goto LABEL_17;
LABEL_16:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_17;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_16;
  return v6 + 3;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t *std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>>>::find<vision::mod::ImageAnalyzer_AnalysisType>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void sub_1A13AB974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A13ABB54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A13ABC1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A13ABD50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A13ABEC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A13ABFEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A13AC114(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t calculateChecksumMD5(char *a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  CC_MD5_CTX v8;

  memset(&v8, 0, sizeof(v8));
  CC_MD5_Init(&v8);
  for (; a2; a2 -= v6)
  {
    if (a2 >= 0x4000)
      v6 = 0x4000;
    else
      v6 = a2;
    CC_MD5_Update(&v8, a1, v6);
    a1 += v6;
  }
  return CC_MD5_Final(a3, &v8);
}

uint64_t calculateChecksumMD5ForFile(const char *a1, unsigned __int8 *a2)
{
  void *v4;
  void *v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CC_MD5_CTX c;

  v4 = malloc_type_malloc(0x4000uLL, 0x12BF400uLL);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = open(a1, 0);
  if (v6 == -1)
  {
    free(v5);
    return 0;
  }
  v7 = v6;
  v8 = lseek(v6, 0, 2);
  lseek(v7, 0, 0);
  memset(&c, 0, sizeof(c));
  CC_MD5_Init(&c);
  if (v8)
  {
    while (1)
    {
      v9 = v8 >= 0x4000 ? 0x4000 : v8;
      if (read(v7, v5, 0x4000uLL) != v9)
        break;
      CC_MD5_Update(&c, v5, v9);
      v8 -= v9;
      if (!v8)
        goto LABEL_9;
    }
    VNValidatedLog(4, (uint64_t)CFSTR("  calculateChecksumMD5ForFile: error reading %zu bytes from file"), v10, v11, v12, v13, v14, v15, v9);
    close(v7);
    CC_MD5_Final(a2, &c);
    v16 = 0;
  }
  else
  {
LABEL_9:
    CC_MD5_Final(a2, &c);
    close(v7);
    v16 = 1;
  }
  free(v5);
  return v16;
}

uint64_t verifyChecksumMD5ForFile(const char *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = 0;
  result = calculateChecksumMD5ForFile(a1, (unsigned __int8 *)&v5);
  if ((_DWORD)result)
    return v5 == *a2 && v6 == a2[1];
  return result;
}

void sub_1A13AC65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A13AC7D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AC8D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13ACA28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13ACCB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1A13ACEA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,vision::mod::ModelValues::ValueInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,vision::mod::ModelValues::ValueInfo>,0>(uint64_t a1)
{
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::__shared_ptr_pointer<float  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_pointer<float  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1B0A880);
  return result;
}

uint64_t std::__shared_ptr_pointer<float  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001A15FAA5ALL))
    return a1 + 24;
  else
    return 0;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void sub_1A13AD580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AD63C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AD730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AD838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AD928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AD9E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13ADA8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13ADB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13ADBDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13ADCA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13ADD50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13ADE28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13ADF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13ADFB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AE02C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AE0A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AE1A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13AE2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AE404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AE4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AE53C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AE5AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AE610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AE6CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AE758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AE7F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AE8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AE964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AEA88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AEB94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AEC18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AECFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AEDA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AEE68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AEF14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AEFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A13AF084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

objc_object *_prettyPrintedValue(objc_object *a1)
{
  objc_object *v1;
  uint64_t v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\"%@\""), v1);
    v2 = objc_claimAutoreleasedReturnValue();

    v1 = (objc_object *)v2;
  }
  return v1;
}

void sub_1A13AF118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AF22C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AF314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13AF444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13AF920(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  v23 = va_arg(va1, _QWORD);
  v24 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  vision::mod::ObjectDetector_DCNFaceDetector_v2_Options::~ObjectDetector_DCNFaceDetector_v2_Options((void **)va1);

  _Unwind_Resume(a1);
}

void sub_1A13AFC08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13AFF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  _Block_object_dispose(&a34, 8);
  *(_QWORD *)(v39 - 128) = a10;
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 128));

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1A13B0988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46)
{
  void *v46;

  a46 = (void **)&a38;
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&a46);
  _Unwind_Resume(a1);
}

void std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<vision::mod::DetectedObject>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<vision::mod::DetectedObject>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 80)
  {
    if (*(char *)(i - 57) < 0)
      operator delete(*(void **)(i - 80));
  }
  a1[1] = v2;
}

__n128 __Block_byref_object_copy__1469(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v3 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v3;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  result = *(__n128 *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(__n128 *)(a1 + 104) = result;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return result;
}

void __Block_byref_object_dispose__1470(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));

}

void sub_1A13B0E60(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);

  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void vision::mod::ObjectDetector_DCNFaceDetector_v2_Options::~ObjectDetector_DCNFaceDetector_v2_Options(void **this)
{
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);

}

void std::__shared_ptr_emplace<vision::mod::ObjectDetector_DCNFaceDetector_v2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ObjectDetector_DCNFaceDetector_v2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<vision::mod::ObjectDetector_DCNFaceDetector_v2>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1A13B1010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vision::mod::formCompoundID(std::string *this, const char *a2, char *a3)
{
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string v14;
  std::string v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, ":");
  v6 = strlen(a2);
  v7 = std::string::insert(&v14, 0, a2, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v15, (const std::string::value_type *)v9, v10);
  *this = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1A13B1114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

uint64_t vision::mod::readParametersNoMapping(uint64_t a1)
{
  if (a1)
    return 8576;
  else
    return 8573;
}

uint64_t vision::mod::computeNoMapping(int a1, uint64_t a2, char *a3)
{
  if (a3 != (char *)a2)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a3, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return 8576;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t vision::mod::readParameters1DAffineMapping(FILE *a1, const char *a2, uint64_t a3)
{
  _OWORD *v6;
  void *v7;
  _QWORD *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  void *v13;
  _QWORD *v14;
  char **v15;
  std::string __p;
  std::string v18;
  std::string *p_p;

  memset(&v18, 0, sizeof(v18));
  if (!a1)
  {
    v11 = 8573;
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "a");
  p_p = &__p;
  v6 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)&p_p);
  v8 = (_QWORD *)v6 + 7;
  v7 = (void *)*((_QWORD *)v6 + 7);
  if (v7)
  {
    *((_QWORD *)v6 + 8) = v7;
    operator delete(v7);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  vision::mod::formCompoundID(&__p, a2, "a");
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v18 = __p;
  std::string::basic_string[abi:ne180100]<0>(&__p, "a");
  p_p = &__p;
  v9 = (char **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)&p_p);
  v10 = vision::mod::loadFloat32Vector(a1, &v18, v9 + 7);
  v11 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v11 & 0x80) == 0)
      goto LABEL_21;
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "b");
  p_p = &__p;
  v12 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)&p_p);
  v14 = (_QWORD *)v12 + 7;
  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
    *v14 = 0;
    v14[1] = 0;
    v14[2] = 0;
  }
  *v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  vision::mod::formCompoundID(&__p, a2, "b");
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v18 = __p;
  std::string::basic_string[abi:ne180100]<0>(&__p, "b");
  p_p = &__p;
  v15 = (char **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)&p_p);
  v11 = vision::mod::loadFloat32Vector(a1, &v18, v15 + 7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_21:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1A13B1600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;

  v5 = (void **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__find_equal<std::string>(a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x50uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    v10 = v14;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v10;
    *v7 = v6;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

uint64_t vision::mod::loadFloat32Vector(FILE *a1, _BYTE *a2, char **a3)
{
  uint64_t v6;
  _BYTE *v8;
  _BYTE *v9;
  float *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  if (fseek(a1, 0, 0))
    return 8565;
  v15 = 0;
  v12 = 0;
  if ((char)a2[23] >= 0)
    v8 = a2;
  else
    v8 = *(_BYTE **)a2;
  v6 = BinSerializer_fgetBlobInfo(a1, v8, &v16, &v15, &v14, &v13, &v12);
  if ((v6 & 0x80) != 0)
  {
    if (v15 != 3)
      return 8565;
    std::vector<float>::resize(a3, v12);
    v10 = (float *)*a3;
    if ((char)a2[23] >= 0)
      v9 = a2;
    else
      v9 = *(_BYTE **)a2;
    if (BinSerializer_freadInFloat(a1, v9, 0, &v10, &v11) != 128)
      return 8565;
  }
  return v6;
}

void std::vector<float>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[4 * v5];
  v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t vision::mod::compute1DAffineMapping(uint64_t a1, uint64_t a2, char **a3)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  const float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t __N;
  float *v13;
  float *v14;
  void *v16[2];
  char v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  std::string::basic_string[abi:ne180100]<0>(&v21, "a");
  if ((_QWORD *)(a1 + 8) == std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::find<std::string>(a1, &v21))
  {
    v6 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "b");
    v6 = a1 + 8 == (_QWORD)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::find<std::string>(a1, &__p);
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
  }
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v21);
    if (v6)
      goto LABEL_7;
  }
  else if (v6)
  {
LABEL_7:
    v7 = -2;
    return (v7 + 128) | 0x2100;
  }
  v9 = *(const float **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "a");
  v10 = std::map<std::string,std::vector<float>>::at(a1, &__p);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v21, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 2);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v16, "b");
  v11 = std::map<std::string,std::vector<float>>::at(a1, v16);
  __p = 0;
  v19 = 0;
  v20 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2);
  __N = (v8 - (uint64_t)v9) >> 2;
  if (v17 < 0)
    operator delete(v16[0]);
  v13 = (float *)v21;
  v14 = (float *)__p;
  if (__N != (v22 - (uint64_t)v21) >> 2 || __N != (v19 - (uint64_t)__p) >> 2)
  {
    v7 = -4;
    if (!__p)
      goto LABEL_19;
    goto LABEL_18;
  }
  std::vector<float>::resize(a3, __N);
  vDSP_vma(*(const float **)a2, 1, v13, 1, v14, 1, (float *)*a3, 1, __N);
  v7 = 0;
  if (v14)
LABEL_18:
    operator delete(v14);
LABEL_19:
  if (v13)
    operator delete(v13);
  return (v7 + 128) | 0x2100;
}

void sub_1A13B1B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;

  if (v28)
    operator delete(v28);
  if (v27)
    operator delete(v27);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  char v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::map<std::string,std::vector<float>>::at(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A13B1CA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::readParameters1DLogisticMapping(FILE *a1, const char *a2, uint64_t a3)
{
  _OWORD *v6;
  void *v7;
  _QWORD *v8;
  int v9;
  void *v10;
  std::string *v11;
  char **v12;
  uint64_t v13;
  _OWORD *v14;
  void *v15;
  _QWORD *v16;
  std::string *v17;
  char **v18;
  void *v20[2];
  char v21;
  std::string __p;
  std::string v23;
  void **v24;

  memset(&v23, 0, sizeof(v23));
  if (!a1)
    return 8573;
  std::string::basic_string[abi:ne180100]<0>(&__p, "a");
  v20[0] = &__p;
  v6 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)v20);
  v8 = (_QWORD *)v6 + 7;
  v7 = (void *)*((_QWORD *)v6 + 7);
  if (v7)
  {
    *((_QWORD *)v6 + 8) = v7;
    operator delete(v7);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  vision::mod::formCompoundID(&__p, a2, "a");
  v23 = __p;
  v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v23;
  else
    v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v11);
  std::string::basic_string[abi:ne180100]<0>(v20, "a");
  v24 = v20;
  v12 = (char **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, v20, (_OWORD **)&v24);
  v13 = vision::mod::loadFloat32Vector(a1, &__p, v12 + 7);
  if (v21 < 0)
    operator delete(v20[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v13 & 0x80) == 0)
      goto LABEL_28;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(&__p, "b");
    v20[0] = &__p;
    v14 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)v20);
    v16 = (_QWORD *)v14 + 7;
    v15 = (void *)*((_QWORD *)v14 + 7);
    if (v15)
    {
      *((_QWORD *)v14 + 8) = v15;
      operator delete(v15);
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
    }
    *v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    vision::mod::formCompoundID(&__p, a2, "b");
    if (v9 < 0)
      operator delete(v10);
    v23 = __p;
    v10 = (void *)__p.__r_.__value_.__r.__words[0];
    v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v23;
    else
      v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v17);
    std::string::basic_string[abi:ne180100]<0>(v20, "b");
    v24 = v20;
    v18 = (char **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, v20, (_OWORD **)&v24);
    v13 = vision::mod::loadFloat32Vector(a1, &__p, v18 + 7);
    if (v21 < 0)
      operator delete(v20[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v9 & 0x80000000) == 0)
        return v13;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if ((v13 & 0x80) != 0)
    goto LABEL_16;
LABEL_28:
  if (v9 < 0)
LABEL_29:
    operator delete(v10);
  return v13;
}

void sub_1A13B1F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::compute1DLogisticMapping(uint64_t a1, uint64_t a2, char **a3)
{
  BOOL v6;
  uint64_t v7;
  char *v8;
  char **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;

  std::string::basic_string[abi:ne180100]<0>(v19, "a");
  if ((_QWORD *)(a1 + 8) == std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::find<std::string>(a1, v19))
  {
    v6 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "b");
    v6 = a1 + 8 == (_QWORD)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::find<std::string>(a1, __p);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  if (v20 < 0)
  {
    operator delete(v19[0]);
    if (v6)
      return 8574;
  }
  else if (v6)
  {
    return 8574;
  }
  v7 = vision::mod::compute1DAffineMapping(a1, a2, a3);
  if ((v7 & 0x80) != 0)
  {
    v9 = a3;
    v8 = *a3;
    v10 = v9[1] - v8;
    if (v10)
    {
      v11 = v10 >> 2;
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = v11;
      do
      {
        v13 = *(float *)v8;
        if (*(float *)v8 >= 0.0)
        {
          v14 = expf(-v13);
          v15 = 1.0;
        }
        else
        {
          v14 = expf(v13);
          v15 = v14;
        }
        *(float *)v8 = v15 / (float)(v14 + 1.0);
        v8 += 4;
        --v12;
      }
      while (v12);
    }
  }
  return v7;
}

void sub_1A13B20E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::readParameters1DPairwiseAffineMapping(FILE *a1, const char *a2, uint64_t a3)
{
  _OWORD *v6;
  void *v7;
  _QWORD *v8;
  int v9;
  void *v10;
  std::string *v11;
  char **v12;
  uint64_t v13;
  _OWORD *v14;
  void *v15;
  _QWORD *v16;
  std::string *v17;
  char **v18;
  _OWORD *v19;
  void *v20;
  _QWORD *v21;
  std::string *v22;
  char **v23;
  _OWORD *v24;
  void *v25;
  _QWORD *v26;
  std::string *v27;
  char **v28;
  void *v30[2];
  char v31;
  std::string __p;
  std::string v33;
  void **v34;

  memset(&v33, 0, sizeof(v33));
  if (!a1)
    return 8573;
  std::string::basic_string[abi:ne180100]<0>(&__p, "a1");
  v30[0] = &__p;
  v6 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)v30);
  v8 = (_QWORD *)v6 + 7;
  v7 = (void *)*((_QWORD *)v6 + 7);
  if (v7)
  {
    *((_QWORD *)v6 + 8) = v7;
    operator delete(v7);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  vision::mod::formCompoundID(&__p, a2, "a1");
  v33 = __p;
  v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v33;
  else
    v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v11);
  std::string::basic_string[abi:ne180100]<0>(v30, "a1");
  v34 = v30;
  v12 = (char **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, v30, (_OWORD **)&v34);
  v13 = vision::mod::loadFloat32Vector(a1, &__p, v12 + 7);
  if (v31 < 0)
    operator delete(v30[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v13 & 0x80) == 0)
      goto LABEL_59;
  }
  else if ((v13 & 0x80) == 0)
  {
    goto LABEL_59;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "a2");
  v30[0] = &__p;
  v14 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)v30);
  v16 = (_QWORD *)v14 + 7;
  v15 = (void *)*((_QWORD *)v14 + 7);
  if (v15)
  {
    *((_QWORD *)v14 + 8) = v15;
    operator delete(v15);
    *v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
  }
  *v16 = 0;
  v16[1] = 0;
  v16[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  vision::mod::formCompoundID(&__p, a2, "a2");
  if (v9 < 0)
    operator delete(v10);
  v33 = __p;
  v10 = (void *)__p.__r_.__value_.__r.__words[0];
  v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v33;
  else
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v17);
  std::string::basic_string[abi:ne180100]<0>(v30, "a2");
  v34 = v30;
  v18 = (char **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, v30, (_OWORD **)&v34);
  v13 = vision::mod::loadFloat32Vector(a1, &__p, v18 + 7);
  if (v31 < 0)
    operator delete(v30[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v13 & 0x80) == 0)
      goto LABEL_59;
  }
  else if ((v13 & 0x80) == 0)
  {
    goto LABEL_59;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "b1");
  v30[0] = &__p;
  v19 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)v30);
  v21 = (_QWORD *)v19 + 7;
  v20 = (void *)*((_QWORD *)v19 + 7);
  if (v20)
  {
    *((_QWORD *)v19 + 8) = v20;
    operator delete(v20);
    *v21 = 0;
    v21[1] = 0;
    v21[2] = 0;
  }
  *v21 = 0;
  v21[1] = 0;
  v21[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  vision::mod::formCompoundID(&__p, a2, "b1");
  if (v9 < 0)
    operator delete(v10);
  v33 = __p;
  v10 = (void *)__p.__r_.__value_.__r.__words[0];
  v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v33;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v22);
  std::string::basic_string[abi:ne180100]<0>(v30, "b1");
  v34 = v30;
  v23 = (char **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, v30, (_OWORD **)&v34);
  v13 = vision::mod::loadFloat32Vector(a1, &__p, v23 + 7);
  if (v31 < 0)
    operator delete(v30[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v13 & 0x80) == 0)
      goto LABEL_59;
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(&__p, "b2");
    v30[0] = &__p;
    v24 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, &__p, (_OWORD **)v30);
    v26 = (_QWORD *)v24 + 7;
    v25 = (void *)*((_QWORD *)v24 + 7);
    if (v25)
    {
      *((_QWORD *)v24 + 8) = v25;
      operator delete(v25);
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
    }
    *v26 = 0;
    v26[1] = 0;
    v26[2] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    vision::mod::formCompoundID(&__p, a2, "b2");
    if (v9 < 0)
      operator delete(v10);
    v33 = __p;
    v10 = (void *)__p.__r_.__value_.__r.__words[0];
    v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v33;
    else
      v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v27);
    std::string::basic_string[abi:ne180100]<0>(v30, "b2");
    v34 = v30;
    v28 = (char **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, v30, (_OWORD **)&v34);
    v13 = vision::mod::loadFloat32Vector(a1, &__p, v28 + 7);
    if (v31 < 0)
      operator delete(v30[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_59;
  }
  if ((v13 & 0x80) != 0)
    goto LABEL_46;
LABEL_59:
  if (v9 < 0)
    operator delete(v10);
  return v13;
}

void sub_1A13B258C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20);
  _Unwind_Resume(exception_object);
}

unint64_t vision::mod::getOutputSize1DPairwiseAffineMapping(unint64_t this)
{
  return this >> 1;
}

uint64_t vision::mod::compute1DPairwiseAffineMapping(uint64_t a1, _DWORD *a2, char **a3)
{
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t __N;
  float *v16;
  const float *v17;
  const float *v18;
  const float *v19;
  const float *v20;
  const float *v21;
  float *v22;
  char *v23;
  void *v25[3];
  float *__D[2];
  char v27;
  void *__p;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  if (((a2[2] - *a2) & 4) != 0)
    return 8572;
  std::string::basic_string[abi:ne180100]<0>(&v37, "a1");
  v6 = (_QWORD *)(a1 + 8);
  if ((_QWORD *)(a1 + 8) == std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::find<std::string>(a1, &v37))
  {
    v7 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "b1");
    if (v6 == std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::find<std::string>(a1, &v34))
    {
      v7 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "a2");
      if (v6 == std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::find<std::string>(a1, &v31))
      {
        v7 = 1;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "b2");
        v7 = v6 == std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::find<std::string>(a1, &__p);
        if (SHIBYTE(v30) < 0)
          operator delete(__p);
      }
      if (SHIBYTE(v33) < 0)
        operator delete(v31);
    }
    if (SHIBYTE(v36) < 0)
      operator delete(v34);
  }
  if (SHIBYTE(v39) < 0)
  {
    operator delete(v37);
    if (v7)
      return 8574;
  }
  else if (v7)
  {
    return 8574;
  }
  v10 = *(_QWORD *)a2;
  v9 = *((_QWORD *)a2 + 1);
  std::string::basic_string[abi:ne180100]<0>(&v34, "a1");
  v11 = std::map<std::string,std::vector<float>>::at(a1, &v34);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v37, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2);
  if (SHIBYTE(v36) < 0)
    operator delete(v34);
  std::string::basic_string[abi:ne180100]<0>(&v31, "b1");
  v12 = std::map<std::string,std::vector<float>>::at(a1, &v31);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v34, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  if (SHIBYTE(v33) < 0)
    operator delete(v31);
  std::string::basic_string[abi:ne180100]<0>(&__p, "a2");
  v13 = std::map<std::string,std::vector<float>>::at(a1, &__p);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v31, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 2);
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(__D, "b2");
  v14 = std::map<std::string,std::vector<float>>::at(a1, __D);
  __p = 0;
  v29 = 0;
  v30 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
  __N = (unint64_t)((v9 - v10) >> 2) >> 1;
  if (v27 < 0)
    operator delete(__D[0]);
  v16 = (float *)v37;
  if (__N == (v38 - (uint64_t)v37) >> 2
    && (v17 = (const float *)v34, __N == (v35 - (uint64_t)v34) >> 2)
    && (v18 = (const float *)v31, __N == (v32 - (uint64_t)v31) >> 2)
    && (v19 = (const float *)__p, __N == (v29 - (uint64_t)__p) >> 2))
  {
    std::vector<float>::resize(a3, __N);
    std::vector<float>::vector(__D, __N);
    std::vector<float>::vector(v25, __N);
    v20 = *(const float **)a2;
    v21 = __D[0];
    v22 = (float *)v25[0];
    v23 = *a3;
    vDSP_vma(v20, 2, v16, 1, v17, 1, __D[0], 1, __N);
    vDSP_vma(v20 + 1, 2, v18, 1, v19, 1, v22, 1, __N);
    vDSP_vadd(v21, 1, v22, 1, (float *)v23, 1, __N);
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
    if (__D[0])
    {
      __D[1] = __D[0];
      operator delete(__D[0]);
    }
    v8 = 8576;
  }
  else
  {
    v8 = 8572;
  }
  if (__p)
    operator delete(__p);
  if (v31)
    operator delete(v31);
  if (v34)
    operator delete(v34);
  if (v16)
    operator delete(v16);
  return v8;
}

void sub_1A13B2A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;
  uint64_t v39;
  void *v41;

  if (__p)
  {
    operator delete(__p);
    if (!v38)
    {
LABEL_3:
      if (!v37)
      {
LABEL_8:
        if (a32)
          operator delete(a32);
        v41 = *(void **)(v39 - 104);
        if (v41)
          operator delete(v41);
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(v37);
      goto LABEL_8;
    }
  }
  else if (!v38)
  {
    goto LABEL_3;
  }
  operator delete(v38);
  if (!v37)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_1A13B2B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x1A13B2B2CLL);
  JUMPOUT(0x1A13B2B30);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(uint64_t a1, unint64_t a2, int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(float *a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v22)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v31)
  {
    *v12 = *v31;
LABEL_72:
    *v31 = v12;
    goto LABEL_73;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v30[v3] = a1 + 4;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_1A13B2FC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1A13B303C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_1A13B342C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::pair<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,float>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_QWORD *)((char *)v10 + 20) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_1A13B3818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_1A13B3C00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1A13B4024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void sub_1A13B44D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13B4608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13B465C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13B46A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13B4750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13B49A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13B4A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13B4B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13B4D18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13B4E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13B5340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1A13B5450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A13B5594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13B576C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13B592C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13B59D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13B5B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1A13B5F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1A13B60E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13B630C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13B6768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id a54)
{
  void *v54;
  void *v55;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);

  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1835(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1836(uint64_t a1)
{

}

NSError *_vnErrorForError(NSError *a1, VNRequest *a2)
{
  NSError *v3;
  VNRequest *v4;
  void *v5;
  uint64_t v6;
  NSError *v7;
  NSError *v8;

  v3 = a1;
  v4 = a2;
  -[NSError domain](v3, "domain");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0DBEBE0]))
  {
    v6 = -[NSError code](v3, "code");
    if (v6 == -4)
    {
      +[VNError errorForUnsupportedRevision:ofRequest:](VNError, "errorForUnsupportedRevision:ofRequest:", -[VNRequest revision](v4, "revision"), v4);
      v7 = (NSError *)objc_claimAutoreleasedReturnValue();
    }
    else if (v6 == -3)
    {
      +[VNError errorForCancellationOfRequest:](VNError, "errorForCancellationOfRequest:", v4);
      v7 = (NSError *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v6 == -2)
        +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", 2, CFSTR("VNRecognizeTextRequest error - invalid orientation"));
      else
        +[VNError errorWithCode:message:underlyingError:](VNError, "errorWithCode:message:underlyingError:", 11, CFSTR("VNRecognizeTextRequest produced an internal error"), v3);
      v7 = (NSError *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v7 = v3;
  }
  v8 = v7;

  return v8;
}

void sub_1A13B6A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13B6C6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13B6D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13B6E70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13B714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(__CVBuffer **this)
{
  __CVBuffer *v2;

  v2 = *this;
  if (v2)
  {
    CVPixelBufferRelease(v2);
    *this = 0;
  }
}

uint64_t __Block_byref_object_copy__1904(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1905(uint64_t a1)
{

}

void sub_1A13B74C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13B76DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A13B78C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A13B7AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

float apple::vision::libraries::autotrace::BitString::writeBit(apple::vision::libraries::autotrace::BitString *this, int a2)
{
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  _BYTE *v13;
  char *v14;
  _BYTE *v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char v20;
  int32x2_t v21;

  v4 = *((int *)this + 7);
  v6 = *(_QWORD *)this;
  v5 = (_BYTE *)*((_QWORD *)this + 1);
  v7 = &v5[-*(_QWORD *)this];
  if ((unint64_t)v7 <= v4)
  {
    v8 = *((_QWORD *)this + 2);
    if ((unint64_t)v5 >= v8)
    {
      v10 = (unint64_t)(v7 + 1);
      if ((uint64_t)(v7 + 1) < 0)
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      v11 = v8 - v6;
      if (2 * v11 > v10)
        v10 = 2 * v11;
      if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
        v13 = operator new(v12);
      else
        v13 = 0;
      v14 = &v13[v12];
      v7[(_QWORD)v13] = 0;
      v9 = (uint64_t)&v7[(_QWORD)v13 + 1];
      if (v5 == (_BYTE *)v6)
      {
        v13 = &v7[(_QWORD)v13];
      }
      else
      {
        v15 = &v5[~v6];
        do
        {
          v16 = *--v5;
          (v15--)[(_QWORD)v13] = v16;
        }
        while (v5 != (_BYTE *)v6);
        v5 = *(_BYTE **)this;
      }
      *(_QWORD *)this = v13;
      *((_QWORD *)this + 1) = v9;
      *((_QWORD *)this + 2) = v14;
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = 0;
      v9 = (uint64_t)(v5 + 1);
    }
    *((_QWORD *)this + 1) = v9;
    v6 = *(_QWORD *)this;
    v4 = *((int *)this + 7);
  }
  v17 = 1 << *((_DWORD *)this + 8);
  v18 = *(_BYTE *)(v6 + v4);
  v19 = v18 & ~(_BYTE)v17;
  v20 = v18 | v17;
  if (a2 != 1)
    v20 = v19;
  *(_BYTE *)(v6 + v4) = v20;
  ++*((_DWORD *)this + 6);
  v21 = vadd_s32(*(int32x2_t *)((char *)this + 32), (int32x2_t)0x100000001);
  *((int32x2_t *)this + 4) = v21;
  if (v21.i32[0] == 8)
    *(_QWORD *)((char *)this + 28) = (*((_DWORD *)this + 7) + 1);
  return *(float *)v21.i32;
}

void sub_1A13B8004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13B81E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1A13B84C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t ctrTrackerComputation_updateHistory(CVPixelBufferRef pixelBuffer, uint64_t *a2, char a3, float *a4, float64x2_t a5, float64x2_t a6)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t result;
  int *v19;
  float64x2_t v20;
  float64_t v21;
  float v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 6784;
  v8 = vsubq_f64(a6, a5);
  v9 = vaddq_f64(a6, a5);
  __asm { FMOV            V1.2D, #0.5 }
  v15 = vmulq_f64(v9, _Q1);
  v16 = vmulq_f64(vmulq_f64(v8, (float64x2_t)vdupq_n_s64(0x40047AE140000000uLL)), _Q1);
  v49 = vsubq_f64(v15, v16);
  v50 = v49;
  v51 = v49.f64[0];
  v48 = vaddq_f64(v15, v16);
  v52 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL);
  v53 = v52;
  v54 = v49.f64[1];
  v17 = a2[2];
  result = tplTrackerResampler_setImage(a2[3], pixelBuffer, v50.f64);
  if (result == 128)
  {
    v19 = (int *)(v17 + 250168);
    v20 = vsubq_f64(v48, v49);
    v21 = v20.f64[0] / 127.0;
    *(float *)v20.f64 = v20.f64[1] / 127.0;
    v22 = v21;
    tplTrackerResampler_resample(a2[3], v50.f64, 0x80u, 128, a2[2], (_BYTE *)(a2[2] + 0x4000), (_BYTE *)(a2[2] + 0x8000), v19, *(float *)v20.f64, v22);
    if (*v19 > 0 || v19[1] > 0 || v19[2] < 127 || v19[3] <= 126)
      ctrTrackerComputation_repairNonValidRegion(a2[2], a2[2] + 0x4000, a2[2] + 0x8000, v19);
    ctrTrackerComputation_YCbCr2nRGB(a2[2], a2[2] + 0x4000, a2[2] + 0x8000, a2[2] + 49152, a2[2] + 0x10000, a2[2] + 81920);
    ctrTrackerComputation_normedGradient(a2[2] + 49152, a2[2] + 0x10000, a2[2] + 81920, a2[2] + 98304);
    v23 = a2[2];
    result = ctrTrackerAlgorithm_computeFFTx(v23 + 49152, v23 + 0x10000, v23 + 81920, v23 + 98304, *(_QWORD *)(a2[4] + 65624), (DSPComplex *)(v23 + 114856), (DSPSplitComplex *)(v23 + 245928), *(OpaqueFFTSetup **)(v23 + 250200), v24);
    if (result == 128)
    {
      v25 = a2[2];
      result = ctrTrackerAlgorithm_GaussianCorrelation(v25 + 245928, v25 + 245928, (DSPSplitComplex *)(v25 + 245992), (const DSPSplitComplex *)(v25 + 246024), (DSPComplex *)(v25 + 114856), (char *)(v25 + 180392), *(OpaqueFFTSetup **)(v25 + 250200));
      if (result == 128)
      {
        result = ctrTrackerAlgorithm_packedDivision((float **)(a2[2] + 245992), (float **)(a2[4] + 65632), (float **)(a2[2] + 246008));
        if (result == 128)
        {
          v26 = 0;
          v27 = a2[2];
          v28 = *a2;
          v29 = *a4 * 0.08;
          v30 = 1.0 - v29;
          v31 = *(_QWORD *)(*a2 + 2112);
          v32 = *(_QWORD *)(*a2 + 2120);
          v33 = *(_QWORD *)(v27 + 246008);
          v34 = *(_QWORD *)(v27 + 246016);
          do
          {
            *(float *)(v31 + v26) = (float)(*(float *)(v33 + v26) * v29) + (float)(v30 * *(float *)(v31 + v26));
            *(float *)(v32 + v26) = (float)(*(float *)(v34 + v26) * v29) + (float)(v30 * *(float *)(v32 + v26));
            v26 += 4;
          }
          while (v26 != 0x8000);
          for (i = 0; i != 4; ++i)
          {
            v36 = 0;
            v37 = v28 + 16 * i;
            v38 = *a4 * 0.08;
            v39 = 1.0 - v38;
            v40 = *(_QWORD *)(v37 + 2048);
            v41 = *(_QWORD *)(v37 + 2056);
            v42 = *(_QWORD *)(v27 + 16 * i + 245928);
            v43 = *(_QWORD *)(v27 + 16 * i + 245936);
            do
            {
              *(float *)(v40 + v36) = (float)(*(float *)(v42 + v36) * v38) + (float)(v39 * *(float *)(v40 + v36));
              *(float *)(v41 + v36) = (float)(*(float *)(v43 + v36) * v38) + (float)(v39 * *(float *)(v41 + v36));
              v36 += 4;
            }
            while (v36 != 0x8000);
          }
          ctrTrackerComputation_colorHistogram(v27 + 49152, v27 + 0x10000, v27 + 81920, (char *)(v27 + 248120), (char *)(v27 + 249144));
          v44 = *a2;
          v45 = (float *)(a2[2] + 248120);
          v46 = -1024;
          result = 6784;
          do
          {
            v47 = v44 + v46;
            *(float *)(v47 + 1024) = (float)(*v45 * 0.05) + (float)(*(float *)(v44 + v46 + 1024) * 0.95);
            *(float *)(v47 + 2048) = (float)(v45[256] * 0.05) + (float)(*(float *)(v44 + v46 + 2048) * 0.95);
            ++v45;
            v46 += 4;
          }
          while (v46);
        }
      }
    }
  }
  return result;
}

uint64_t FastRegistration_allocateSignatureBuffersForImageDimension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t *v13;

  if (a1)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 40) = a2;
    *(_QWORD *)(a1 + 8) = a3;
    v4 = (4 * a2 + 31) & 0xFFFFFFE0;
    v5 = (4 * a3 + 31) & 0xFFFFFFE0;
    v6 = (4 * a2 + 35) & 0xFFFFFFE0;
    v7 = (4 * a3 + 35) & 0xFFFFFFE0;
    v8 = (char *)malloc_type_calloc(1uLL, v5 + v4 + 2 * (v7 + v6), 0x955E7161uLL);
    if (v8)
    {
      v9 = &v8[v4];
      *(_QWORD *)a1 = v9;
      v10 = &v9[v5];
      v11 = &v10[v7];
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v8;
      v12 = &v11[v7];
      *(_QWORD *)(a1 + 48) = v12;
      *(_QWORD *)(a1 + 56) = &v12[v6];
      *(_QWORD *)(a1 + 64) = v8;
      v13 = &CVML_status_ok;
    }
    else
    {
      v13 = &CVML_status_memoryAllocationError;
    }
  }
  else
  {
    v13 = &CVML_status_invalidParameter;
  }
  return (*v13 + 128) | 0x1200;
}

void sub_1A13B8A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13B8B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13B8C64(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1A13B8D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13B8DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2031(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2032(uint64_t a1)
{

}

void sub_1A13B8E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13B8F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13B961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{

  _Unwind_Resume(a1);
}

void sub_1A13B99A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13B9AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13B9CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A13BA1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A13BA2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  apple::vision::fgbg::ConnectedComponentResult *v11;

  if (__p)
    operator delete(__p);
  apple::vision::fgbg::ConnectedComponentResult::~ConnectedComponentResult(v11);
  _Unwind_Resume(a1);
}

void sub_1A13BA65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1A13BA8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13BAACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  apple::vision::fgbg::ConnectedComponentResult *v12;

  if (__p)
    operator delete(__p);
  apple::vision::fgbg::ConnectedComponentResult::~ConnectedComponentResult(v12);

  _Unwind_Resume(a1);
}

void apple::vision::fgbg::ConnectedComponentResult::~ConnectedComponentResult(apple::vision::fgbg::ConnectedComponentResult *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void **v6;

  v6 = (void **)((char *)this + 80);
  std::vector<std::vector<CGPoint>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
    MEMORY[0x1A1B0A880](v5, 0x1000C8000313F17);
}

void ___ZL33_categoryCocoNameForCategoryIndexi_block_invoke()
{
  void *v0;

  v0 = (void *)_categoryCocoNameForCategoryIndex(int)::categoryNames;
  _categoryCocoNameForCategoryIndex(int)::categoryNames = (uint64_t)&unk_1E459DF70;

}

void ___ZL36_categoryMiyoshiNameForCategoryIndexi_block_invoke()
{
  void *v0;

  v0 = (void *)_categoryMiyoshiNameForCategoryIndex(int)::categoryNames;
  _categoryMiyoshiNameForCategoryIndex(int)::categoryNames = (uint64_t)&unk_1E459DF58;

}

void sub_1A13BAD10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13BADA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BAEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BAFA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A13BB1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A13BB408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13BB5E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13BB648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13BB7A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BB854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BB948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13BBBC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13BBCBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BBE48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13BBEB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BBF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13BBF60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BBFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13BBFF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BC040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13BC08C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BC16C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13BC250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t vision::mod::image_quality::BlurMeasure::computeEdgeBasedBlurScoreForPlanar8Image(vision::mod::image_quality::BlurMeasure *this, vImage_Buffer *a2, float *a3, float a4, int *a5, vision::mod::image_quality::BlurMeasure **a6, void **a7)
{
  uint64_t v12;
  int v13;
  int v14;
  int *v15;
  int *v17;
  uint64_t result;
  int v19;
  _BYTE v20[12];
  _Geometry2D_rect2D_ v21;

  v12 = *(_QWORD *)this;
  v13 = *((_DWORD *)this + 4);
  v14 = *((_DWORD *)this + 2);
  v15 = (int *)*((unsigned int *)this + 6);
  *(_QWORD *)&v20[4] = v12;
  v19 = v14;
  *(_DWORD *)v20 = v13;
  LODWORD(a2->data) = 1065353216;
  if (a6)
  {
    v21.size.width = (float)v13;
    v21.size.height = (float)v14;
    v21.origin.x = 0.0;
    v21.origin.y = 0.0;
    return vision::mod::image_quality::BlurMeasure::computeEdgeBasedBlurForImageRegionUsingBlurSignature(*a6, (float *)a2, v21, a3, a4, a5, v17);
  }
  else
  {
    if ((result & 0x80) != 0)
    {
      return 2688;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::applyInsetFactorToData(_anonymous_namespace_ *this, unsigned __int8 **a2, int *a3, int *a4, int a5, float a6)
{
  int v6;
  int v7;
  float v8;

  v6 = *a3;
  if (a6 > 0.0)
  {
    v7 = (int)(float)((float)*(int *)a2 * a6);
    v8 = (float)v6 * a6;
    *(_DWORD *)a2 -= 2 * v7;
    v6 = *a3 - 2 * (int)v8;
    *a3 = v6;
    *(_QWORD *)this += v7 * a5 + (int)v8 * (int)a4;
  }
  if (*(int *)a2 >= 32 && v6 > 31)
    return 2688;
  syslog(5, "Both width and height have to be >= 32 after applying the inset factor. Given w/h: %d/%d", *(_DWORD *)a2, v6);
  return 2684;
}

uint64_t `anonymous namespace'::computeBlockwiseBlurStatsOnData(uint64_t result, int a2, int a3, int a4, float *a5, int *a6, int *a7, _QWORD *a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int32x4_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int32x4_t *v42;
  uint8x16_t v43;
  uint8x16_t v44;
  int16x8_t v45;
  uint8x16_t v46;
  int16x8_t v47;
  uint8x16_t v48;
  int16x8_t v49;
  uint8x16_t v50;
  int16x8_t v51;
  uint8x16_t v52;
  int16x8_t v53;
  uint8x16_t v54;
  int16x8_t v55;
  uint8x16_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  char v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  int *v152;
  int *v153;
  float *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  _DWORD *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  _BYTE v177[32];
  uint64_t v178;
  uint64_t v179;
  _QWORD v180[126];

  v13 = a2;
  v163 = result;
  v180[124] = *MEMORY[0x1E0C80C00];
  v14 = (a2 / 32);
  v15 = (a3 / 32);
  if (a8)
  {
    v17 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
    *v17 = v13;
    v17[1] = a3;
    v17[2] = v14;
    v17[3] = v15;
    result = (uint64_t)malloc_type_calloc((int)v15 * (int)v14, 0xCuLL, 0x10000403E1C8BA9uLL);
    *((_QWORD *)v17 + 2) = result;
    v18 = v17;
    *a8 = v17;
  }
  else
  {
    v18 = 0;
  }
  if (a3 < 32)
    goto LABEL_24;
  v152 = a6;
  v153 = a7;
  v154 = a5;
  v19 = 0;
  v20 = 0;
  v164 = 32 * a4;
  v171 = v14;
  v162 = (int)v14;
  v21 = 3 * a4;
  v22 = 5 * a4;
  v23 = a4;
  v24 = 8 * a4;
  v161 = v163 - v23 + 8 * v23;
  v160 = v163 + 6 * v23;
  v25 = 0;
  v159 = v163 + v22;
  v157 = v163 + v21;
  v158 = v163 + 4 * v23;
  v26 = 0;
  v156 = v163 + 2 * v23;
  v155 = v163 + v23;
  v166 = v13;
  v165 = v15;
  v170 = v18;
  do
  {
    v168 = v25;
    v167 = v26;
    if (v13 >= 32)
    {
      v27 = 0;
      v28 = 0;
      v29 = v161 + v25;
      v30 = v160 + v25;
      v31 = v159 + v25;
      v32 = v158 + v25;
      v33 = v157 + v25;
      v34 = v156 + v25;
      v35 = v155 + v25;
      v169 = v26 * v162;
      v36 = v163 + v25;
      do
      {
        v173 = v19;
        v174 = v20;
        v37 = 0;
        v176 = 0;
        v175 = 0;
        v38 = (int32x4_t *)v177;
        v172 = v27;
        v39 = v27;
        do
        {
          v40 = 1;
          v41 = v39;
          v42 = v38;
          do
          {
            v43 = *(uint8x16_t *)(v36 + v41);
            v44 = *(uint8x16_t *)(v35 + v41);
            v45 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v43.i8);
            v46 = *(uint8x16_t *)(v34 + v41);
            v47 = (int16x8_t)vaddl_high_u8(v44, v43);
            v48 = *(uint8x16_t *)(v33 + v41);
            v49 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v46.i8);
            v50 = *(uint8x16_t *)(v32 + v41);
            v51 = (int16x8_t)vaddl_high_u8(v48, v46);
            v52 = *(uint8x16_t *)(v31 + v41);
            v53 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v52.i8, *(uint8x8_t *)v50.i8);
            v54 = *(uint8x16_t *)(v30 + v41);
            v55 = (int16x8_t)vaddl_high_u8(v52, v50);
            v56 = *(uint8x16_t *)(v29 + v41);
            v57 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v56.i8, *(uint8x8_t *)v54.i8);
            v58 = (int16x8_t)vaddl_high_u8(v56, v54);
            v59 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v44.i8);
            v60 = (int16x8_t)vsubl_high_u8(v43, v44);
            v61 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v48.i8);
            v62 = (int16x8_t)vsubl_high_u8(v46, v48);
            v63 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v52.i8);
            v64 = (int16x8_t)vsubl_high_u8(v50, v52);
            v65 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v54.i8, *(uint8x8_t *)v56.i8);
            v66 = (int16x8_t)vsubl_high_u8(v54, v56);
            v67 = vaddq_s16(v49, v45);
            v68 = vaddq_s16(v51, v47);
            v69 = vaddq_s16(v57, v53);
            v70 = vaddq_s16(v58, v55);
            v71 = vsubq_s16(v45, v49);
            v72 = vsubq_s16(v47, v51);
            v73 = vsubq_s16(v53, v57);
            v74 = vsubq_s16(v55, v58);
            v75 = vaddq_s16(v69, v67);
            v76 = vaddq_s16(v70, v68);
            v77 = vsubq_s16(v67, v69);
            v78 = vsubq_s16(v68, v70);
            v79 = vuzp1q_s16(v75, v77);
            v80 = vuzp1q_s16(v71, v73);
            v81 = vuzp2q_s16(v71, v73);
            v82 = vuzp1q_s16(v59, v61);
            v83 = vuzp2q_s16(v59, v61);
            v84 = vuzp2q_s16(v75, v77);
            v85 = vuzp1q_s16(v63, v65);
            v86 = vuzp2q_s16(v63, v65);
            v87 = vaddq_s16(v80, v81);
            v88 = vaddq_s16(v82, v83);
            v89 = vaddq_s16(v85, v86);
            v90 = vaddq_s16(v79, v84);
            v91 = (int8x16_t)vsubq_s16(v79, v84);
            v92 = (int8x16_t)vsubq_s16(v80, v81);
            v93 = (int8x16_t)vsubq_s16(v82, v83);
            v94 = (int8x16_t)vsubq_s16(v85, v86);
            v95 = vuzp1q_s16(v90, v87);
            v96 = vuzp2q_s16(v90, v87);
            v97 = vuzp1q_s16(v88, v89);
            v98 = vuzp2q_s16(v88, v89);
            v99 = vaddq_s16(v95, v96);
            v100 = vaddq_s16(v97, v98);
            v101 = (int32x4_t)vsubq_s16(v97, v98);
            v102 = (int32x4_t)vsubq_s16(v95, v96);
            v103 = vuzp1q_s16(v99, v100);
            v104 = vuzp2q_s16(v99, v100);
            v105 = vaddq_s16(v103, v104);
            v106 = vsubq_s16(v103, v104);
            v107 = (int32x4_t)vzip1q_s16(v105, v106);
            v108 = (int32x4_t)vzip2q_s16(v105, v106);
            v109 = (int8x16_t)vzip1q_s32(v107, v102);
            v110 = (int8x16_t)vzip2q_s32(v107, v102);
            v111 = (int8x16_t)vzip1q_s32(v108, v101);
            v112 = (int8x16_t)vzip2q_s32(v108, v101);
            v102.i64[0] = vextq_s8(v109, v109, 8uLL).u64[0];
            v108.i64[0] = v109.i64[0];
            v101.i64[0] = vextq_s8(v110, v110, 8uLL).u64[0];
            v113 = vuzp1q_s16(v76, v78);
            v114 = vuzp2q_s16(v76, v78);
            v115 = vuzp1q_s16(v72, v74);
            v76.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
            v116 = vuzp2q_s16(v72, v74);
            v117 = vuzp1q_s16(v60, v62);
            v118 = vuzp2q_s16(v60, v62);
            v119 = vuzp1q_s16(v64, v66);
            v120 = vuzp2q_s16(v64, v66);
            v62.i64[0] = v111.i64[0];
            v121 = vaddq_s16(v113, v114);
            v122 = vaddq_s16(v115, v116);
            v123 = vaddq_s16(v117, v118);
            v124 = vaddq_s16(v119, v120);
            v125 = (int8x16_t)vsubq_s16(v113, v114);
            v60.i64[0] = vextq_s8(v112, v112, 8uLL).u64[0];
            v126 = (int8x16_t)vsubq_s16(v115, v116);
            v127 = (int8x16_t)vsubq_s16(v117, v118);
            v128 = vuzp1q_s16(v121, v122);
            v129 = vuzp2q_s16(v121, v122);
            v130 = vuzp1q_s16(v123, v124);
            v116.i64[0] = v112.i64[0];
            v131 = vuzp2q_s16(v123, v124);
            v132 = vaddq_s16(v128, v129);
            v133 = vaddq_s16(v130, v131);
            v134 = (int32x4_t)vsubq_s16(v128, v129);
            v108.i64[1] = v91.i64[0];
            v135 = vuzp1q_s16(v132, v133);
            v136 = vuzp2q_s16(v132, v133);
            v137 = vaddq_s16(v135, v136);
            v138 = vsubq_s16(v135, v136);
            v110.i64[1] = v92.i64[0];
            v139 = (int32x4_t)vzip1q_s16(v137, v138);
            v140 = (int8x16_t)vzip1q_s32(v139, v134);
            v123.i64[0] = vextq_s8(v140, v140, 8uLL).u64[0];
            v62.i64[1] = v93.i64[0];
            v141 = (int8x16_t)vzip2q_s32(v139, v134);
            v139.i64[0] = vextq_s8(v141, v141, 8uLL).u64[0];
            v102.i64[1] = vextq_s8(v91, v91, 8uLL).u64[0];
            v91.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
            v92.i64[0] = vextq_s8(v93, v93, 8uLL).u64[0];
            v116.i64[1] = v94.i64[0];
            v101.i64[1] = v91.i64[0];
            v142 = (int32x4_t)vsubq_s16(v130, v131);
            v143 = (int32x4_t)vzip2q_s16(v137, v138);
            v144 = (int8x16_t)vzip1q_s32(v143, v142);
            v138.i64[0] = vextq_s8(v144, v144, 8uLL).u64[0];
            v76.i64[1] = v92.i64[0];
            v145 = (int8x16_t)vzip2q_s32(v143, v142);
            v92.i64[0] = vextq_s8(v145, v145, 8uLL).u64[0];
            v60.i64[1] = vextq_s8(v94, v94, 8uLL).u64[0];
            v140.i64[1] = v125.i64[0];
            *v42 = v108;
            v42[1] = (int32x4_t)v140;
            v123.i64[1] = vextq_s8(v125, v125, 8uLL).u64[0];
            v141.i64[1] = v126.i64[0];
            v42[8] = (int32x4_t)v110;
            v42[9] = (int32x4_t)v141;
            v146 = (int8x16_t)vsubq_s16(v119, v120);
            v144.i64[1] = v127.i64[0];
            v42[16] = (int32x4_t)v62;
            v42[17] = (int32x4_t)v144;
            v139.i64[1] = vextq_s8(v126, v126, 8uLL).u64[0];
            v145.i64[1] = v146.i64[0];
            v42[4] = v102;
            v42[5] = (int32x4_t)v123;
            v42[24] = (int32x4_t)v116;
            v42[25] = (int32x4_t)v145;
            v138.i64[1] = vextq_s8(v127, v127, 8uLL).u64[0];
            v42[12] = v101;
            v42[13] = v139;
            v92.i64[1] = vextq_s8(v146, v146, 8uLL).u64[0];
            v42[20] = (int32x4_t)v76;
            v42[21] = (int32x4_t)v138;
            v147 = v40;
            v42[28] = (int32x4_t)v60;
            v42[29] = (int32x4_t)v92;
            v41 += 16;
            v42 += 2;
            v40 = 0;
          }
          while ((v147 & 1) != 0);
          v38 += 32;
          v39 += v24;
          v148 = v37 >= 0x18;
          v37 += 8;
        }
        while (!v148);
        if (v170)
        {
          v149 = *((_QWORD *)v170 + 2) + 12 * (v28 + v169);
          v150 = v175;
          *(_DWORD *)(v149 + 8) = v176;
          *(_QWORD *)v149 = v150;
        }
        v20 = v175 + v174;
        v19 = HIDWORD(v175) + v173;
        ++v28;
        v27 = v172 + 32;
      }
      while (v28 != v171);
    }
    v26 = v167 + 1;
    v25 = v168 + v164;
    v13 = v166;
  }
  while (v167 + 1 != v165);
  a7 = v153;
  a5 = v154;
  a6 = v152;
  if (v20 < 1)
  {
LABEL_24:
    if (a6)
      *a6 = 0;
    if (a7)
      *a7 = 0;
    v151 = 1.0;
    if (a5)
      goto LABEL_29;
  }
  else
  {
    if (v152)
      *v152 = v19;
    if (v153)
      *v153 = v20;
    if (v154)
    {
      v151 = (float)v19 / (float)v20;
LABEL_29:
      *a5 = v151;
    }
  }
  return result;
}

uint64_t vision::mod::image_quality::BlurMeasure::computeEdgeBasedBlurForImageRegionUsingBlurSignature(vision::mod::image_quality::BlurMeasure *this, float *a2, _Geometry2D_rect2D_ a3, float *a4, float a5, int *a6, int *a7)
{
  int v7;
  float v8;
  int x;
  int y;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  double v21;
  int v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  float v41;

  if (a5 > 0.0)
  {
    v7 = (int)(float)(a3.size.width * a5);
    v8 = a3.size.height * a5;
    a3.origin.x = a3.origin.x + (float)v7;
    a3.origin.y = a3.origin.y + (float)(int)v8;
    a3.size.width = a3.size.width - (float)(2 * v7);
    a3.size.height = a3.size.height - (float)(2 * (int)v8);
  }
  if (a3.size.width < 32.0 || a3.size.height < 32.0)
  {
    syslog(5, "Both width and height have to be >= 32 after applying the inset factor. Given w/h: %d/%d", (int)a3.size.width, (int)a3.size.height);
    return 2684;
  }
  else
  {
    x = (int)a3.origin.x;
    y = (int)a3.origin.y;
    v13 = *((int *)this + 2);
    v14 = 32 * v13 - 1;
    if (v14 >= (int)(float)(a3.size.width + a3.origin.x))
      v14 = (int)(float)(a3.size.width + a3.origin.x);
    v15 = 32 * *((_DWORD *)this + 3) - 1;
    if (v15 >= (int)(float)(a3.size.height + a3.origin.y))
      v15 = (int)(float)(a3.size.height + a3.origin.y);
    if (x >= 0)
      v16 = (int)a3.origin.x;
    else
      v16 = x + 31;
    v17 = y / 32;
    if (v14 >= 0)
      v18 = v14;
    else
      v18 = v14 + 31;
    if (v15 >= 0)
      v19 = v15;
    else
      v19 = v15 + 31;
    v20 = 0.0;
    v21 = 0.0;
    if (v17 <= v19 >> 5)
    {
      v22 = v16 >> 5;
      v23 = 1.0 - (double)(int)(x - (v16 & 0xFFFFFFE0)) * 0.03125;
      v24 = v18 >> 5;
      v25 = (double)(int)(v14 - (v18 & 0xFFFFFFE0) + 1) * 0.03125;
      v26 = (double)(int)(v15 - (v19 & 0xFFFFFFE0) + 1) * 0.03125;
      v27 = (double)(y % 32) * -0.03125 + 1.0;
      v28 = v17;
      v29 = v19 >> 5;
      v30 = (v19 >> 5) + 1;
      if (v16 >> 5 <= (uint64_t)(v18 >> 5))
        v31 = v24;
      else
        v31 = v22;
      v32 = v31 - v22 + 1;
      v33 = 12 * (v22 + (int)v13 * (uint64_t)v17) + 4;
      v34 = 12 * v13;
      v21 = 0.0;
      v20 = 0.0;
      do
      {
        if (v28 == v29)
          v27 = v26;
        if (v22 <= v24)
        {
          v35 = (int *)(*((_QWORD *)this + 2) + v33);
          v36 = v24 - (uint64_t)v22;
          v37 = v32;
          v38 = v23;
          do
          {
            if (!v36)
              v38 = v25;
            v20 = v20 + v38 * (double)*v35 * v27;
            v21 = v21 + v38 * (double)*(v35 - 1) * v27;
            --v36;
            v35 += 3;
            v38 = 1.0;
            --v37;
          }
          while (v37);
        }
        ++v28;
        v33 += v34;
        v27 = 1.0;
      }
      while (v28 != v30);
    }
    v39 = round(v20);
    if (a4)
      *(_DWORD *)a4 = (int)v39;
    v40 = round(v21);
    if (a6)
      *a6 = (int)v40;
    v41 = 1.0;
    if (v40 > 0.0)
      v41 = v39 / v40;
    *a2 = v41;
    return 2688;
  }
}

uint64_t `anonymous namespace'::updateBlurStatsOne16x16(_anonymous_namespace_ *a1, _DWORD *a2)
{
  int v4;
  int v5;
  uint64_t result;
  _BOOL4 v9;

  v9 = v4 > 1225 || v5 > 1225 || (int)result > 1225;
  if (a2)
  {
    if (v9 && v4 < v5 && v5 != (_DWORD)result)
    {
      ++*a2;
      if (v4 < 1225 || v5 < 1225 || (int)result <= 1224)
        ++a2[1];
    }
  }
  return result;
}

uint64_t `anonymous namespace'::computeEdgeVal(_anonymous_namespace_ *this, __int16 *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t result;

  if (v5 > v4)
    v4 = v5;
  if (v6 > v4)
    v4 = v6;
  if ((int)result <= v4)
    return v4;
  else
    return result;
}

uint64_t `anonymous namespace'::computeEdgeValOne8x8(_anonymous_namespace_ *this, __int16 *a2)
{
  int v2;
  char *v3;
  uint64_t v4;
  float v5;
  int v6;
  _anonymous_namespace_ *v7;
  __int16 *v8;
  int v9;

  v2 = 0;
  v3 = (char *)this + 2 * a2;
  v5 = 0.0;
  do
  {
    v6 = (int)a2;
    v7 = this;
    v8 = (__int16 *)v3;
    do
    {
      v4 = (32 * (_DWORD)a2);
      v9 = *((__int16 *)v7 + v4) * *((__int16 *)v7 + v4) + v8[v4] * v8[v4] + *v8 * *v8;
      if (v5 < (float)v9)
        v5 = (float)v9;
      ++v8;
      v7 = (_anonymous_namespace_ *)((char *)v7 + 2);
      --v6;
    }
    while (v6);
    ++v2;
    v3 += 64;
    this = (_anonymous_namespace_ *)((char *)this + 64);
  }
  while (v2 != (_DWORD)a2);
  return (int)v5;
}

uint64_t `anonymous namespace'::computeBlurScoreOnImageSubblocks(_anonymous_namespace_ *this, unsigned __int8 *a2, int a3, int *a4, unsigned int a5, int a6, float a7, vImage_Buffer *a8, float *a9, int *a10, int *a11)
{
  int v14;
  uint64_t result;
  void **v16;
  double v17;
  int v18;
  int v19;
  int v20;
  int64x2_t v21;
  int v22;
  float v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t i;
  unint64_t v35;
  double v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  int64x2_t v42;
  uint64_t v43;
  int v44;
  _BYTE v45[12];
  _BYTE v46[1024];
  uint64_t v47;

  v14 = (int)a4;
  v47 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v45[4] = this;
  v44 = a3;
  *(_DWORD *)v45 = (_DWORD)a2;
  LODWORD(a8->data) = 1065353216;
  if ((result & 0x80) != 0)
  {
    if (*(int *)v45 >= a6)
      v18 = a6;
    else
      v18 = *(_DWORD *)v45;
    v39 = v18;
    if (v18 >= 0)
      v19 = v18;
    else
      v19 = v18 + 31;
    if (v44 >= a6)
      v20 = a6;
    else
      v20 = v44;
    v41 = v46;
    v21 = vdupq_n_s64(0x20uLL);
    v42 = v21;
    if (a5 == 1)
      v22 = v14;
    else
      v22 = 32;
    v43 = v22;
    v23 = 1.0;
    if (v20 < 32)
    {
      result = 2688;
LABEL_30:
      *(float *)&a8->data = v23;
    }
    else
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = (v19 >> 5);
      v28 = *(_DWORD *)v45 / (int)v27;
      v38 = v20 >> 5;
      v37 = v44 / (int)v38 * v14;
      result = 2688;
      while (v39 < 32)
      {
LABEL_26:
        if (++v24 == v38)
        {
          if (v25 >= 1)
            v23 = (float)v26 / (float)v25;
          goto LABEL_30;
        }
      }
      v29 = 0;
      v30 = *(_QWORD *)&v45[4] + (v37 * v24);
      while (1)
      {
        if (a5 == 1)
        {
          v41 = (_BYTE *)(v30 + v29 * v28);
        }
        else
        {
          v31 = 0;
          v32 = v30 + v28 * a5 * v29;
          v33 = v46;
          do
          {
            for (i = 0; i != 128; i += 4)
            {
              v21.i8[0] = *(_BYTE *)(v32 + i);
              LOBYTE(v17) = *(_BYTE *)(v32 + i + 1);
              *(double *)&v35 = (double)*(unint64_t *)&v17 * 0.7154;
              v36 = *(double *)&v35 + (double)v21.u64[0] * 0.2125;
              LOBYTE(v35) = *(_BYTE *)(v32 + i + 2);
              v17 = (double)v35;
              *(double *)v21.i64 = v36 + v17 * 0.0721;
              *v33++ = (int)*(double *)v21.i64;
            }
            v32 += v14;
            ++v31;
          }
          while (v31 != 32);
        }
        v40 = 0;
        result = vision::mod::image_quality::BlurMeasure::computeEdgeBasedBlurScoreForPlanar8Image((vision::mod::image_quality::BlurMeasure *)&v41, a8, (float *)&v40 + 1, 0.0, (int *)&v40, 0, v16);
        if ((result & 0x80) == 0)
          break;
        v25 += v40;
        v26 += HIDWORD(v40);
        if (++v29 == v27)
          goto LABEL_26;
      }
    }
  }
  return result;
}

void vision::mod::TorsoprintGenerator::~TorsoprintGenerator(vision::mod::TorsoprintGenerator *this)
{
  vision::mod::TorsoprintGenerator::~TorsoprintGenerator(this);
  JUMPOUT(0x1A1B0A898);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E453A3C0;
  if (*((_BYTE *)this + 52))
  {
    espresso_plan_destroy();
    *((_QWORD *)this + 8) = 0;
    espresso_context_destroy();
    *((_QWORD *)this + 7) = 0;
  }
  std::unique_ptr<vision::mod::ImageProcessing_Preprocessor>::reset[abi:ne180100]((uint64_t *)this + 78, 0);
  v2 = (void *)*((_QWORD *)this + 74);
  if (v2)
  {
    *((_QWORD *)this + 75) = v2;
    operator delete(v2);
  }
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1A13BD214(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::ImageDescriptorAugmenterFlip::augmentImage(uint64_t a1, uint64_t a2, int a3, const vImage_Buffer ***a4)
{
  BOOL v4;
  uint64_t result;
  const vImage_Buffer **v10;
  const vImage_Buffer **v11;
  uint64_t v14;
  int v15;
  const vImage_Buffer *v16;
  vImage_Buffer *v17;

  if (*(_QWORD *)a2)
    v4 = *(_QWORD *)(a2 + 16) == 0;
  else
    v4 = 1;
  if (v4 || *(_QWORD *)(a2 + 8) == 0 || *(_QWORD *)(a2 + 24) < 2uLL)
    return 3708;
  v11 = *a4;
  v10 = a4[1];
  if (*(_QWORD *)(a1 + 8) != v10 - *a4)
    return 3700;
  if ((a3 & 1) != 0)
  {
    v14 = 1;
  }
  else if ((a3 & 0x3E) != 0)
  {
    v14 = 4;
  }
  else
  {
    if ((a3 & 0x3C0) == 0)
    {
      syslog(5, "ERROR: Invalid image type");
      return 4211;
    }
    v14 = 16;
  }
  if (v11 == v10)
  {
LABEL_22:
    result = ImageProcessing_copyVImageBufferData((char **)a2, v14, (char **)*v10);
    if ((result & 0x80) == 0)
      return result;
    v15 = *(_DWORD *)(a1 + 48);
    if ((~v15 & 3) != 0)
    {
      if ((v15 & 1) == 0)
      {
        if ((v15 & 2) != 0)
          return vision::mod::ImageDescriptorAugmenterFlip::flipLR(**a4, a3, (vImage_Buffer *)(*a4)[1]);
        return result;
      }
      v16 = **a4;
      v17 = (vImage_Buffer *)(*a4)[1];
    }
    else
    {
      result = vision::mod::ImageDescriptorAugmenterFlip::flipLR(**a4, a3, (vImage_Buffer *)(*a4)[1]);
      if ((result & 0x80) == 0)
        return result;
      result = vision::mod::ImageDescriptorAugmenterFlip::flipUD(**a4, a3, (vImage_Buffer *)(*a4)[2]);
      if ((result & 0x80) == 0)
        return result;
      v16 = (*a4)[1];
      v17 = (vImage_Buffer *)(*a4)[3];
    }
    return vision::mod::ImageDescriptorAugmenterFlip::flipUD(v16, a3, v17);
  }
  while (1)
  {
    result = ImageProcessing_reallocVImageBuffer((uint64_t)*v11, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 8), v14);
    if ((result & 0x80) == 0)
      return result;
    if (++v11 == v10)
    {
      v10 = *a4;
      goto LABEL_22;
    }
  }
}

uint64_t vision::mod::ImageDescriptorAugmenterFlip::flipLR(const vImage_Buffer *a1, int a2, vImage_Buffer *dest)
{
  vImage_Error v3;

  if (a2 == 4 || a2 == 2)
  {
    v3 = vImageHorizontalReflect_ARGB8888(a1, dest, 0);
  }
  else
  {
    if (a2 != 1)
      return 3711;
    v3 = vImageHorizontalReflect_Planar8(a1, dest, 0);
  }
  if (v3)
    return 3706;
  else
    return 3712;
}

uint64_t vision::mod::ImageDescriptorAugmenterFlip::flipUD(const vImage_Buffer *a1, int a2, vImage_Buffer *dest)
{
  vImage_Error v3;

  if (a2 == 4 || a2 == 2)
  {
    v3 = vImageVerticalReflect_ARGB8888(a1, dest, 0);
  }
  else
  {
    if (a2 != 1)
      return 3711;
    v3 = vImageVerticalReflect_Planar8(a1, dest, 0);
  }
  if (v3)
    return 3706;
  else
    return 3712;
}

void vision::mod::ImageDescriptorAugmenterAbstract::~ImageDescriptorAugmenterAbstract(vision::mod::ImageDescriptorAugmenterAbstract *this)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  *(_QWORD *)this = off_1E453AC68;
  v2 = (void **)*((_QWORD *)this + 2);
  v3 = (void **)*((_QWORD *)this + 3);
  if (!((unint64_t)(v3 - v2) % *((_QWORD *)this + 1)))
  {
    if (v2 == v3)
    {
      v2 = (void **)*((_QWORD *)this + 3);
    }
    else
    {
      do
      {
        v4 = (void **)*v2;
        if (*v2)
        {
          free(*v4);
          *(_OWORD *)v4 = 0u;
          *((_OWORD *)v4 + 1) = 0u;
          v5 = *v2;
        }
        else
        {
          v5 = 0;
        }
        free(v5);
        *v2++ = 0;
      }
      while (v2 != v3);
      v2 = (void **)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    *((_QWORD *)this + 5) = 0;
  }
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

void vision::mod::ImageDescriptorAugmenterFlip::~ImageDescriptorAugmenterFlip(vision::mod::ImageDescriptorAugmenterFlip *this)
{
  vision::mod::ImageDescriptorAugmenterAbstract::~ImageDescriptorAugmenterAbstract(this);
  JUMPOUT(0x1A1B0A898);
}

uint64_t vision::mod::ImageDescriptorAugmenterFlip::combine(vision::mod::ImageDescriptorAugmenterFlip *this, const vision::mod::ImageDescriptorBufferAbstract *lpsrc, vision::mod::ImageDescriptorBufferAbstract *a3)
{
  vision::mod::ImageDescriptorBufferAbstract *v6;
  vision::mod::ImageDescriptorBufferAbstract *v7;
  unint64_t v8;
  unint64_t v9;
  vision::mod::ImageDescriptorBufferAbstract *v10;
  uint64_t v11;
  unint64_t v12;
  void *DataForKthDescriptor;
  const void *v14;
  size_t v15;
  unint64_t v16;
  unint64_t i;
  const float *v18;
  float __B;

  v8 = *((_QWORD *)lpsrc + 9);
  v9 = *((_QWORD *)this + 1);
  if (v8 != v8 / v9 * v9)
    return 3700;
  v10 = v7;
  vision::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount(a3, v8 / v9, 0);
  v11 = 3708;
  if (v6 && v10)
  {
    if (*((_QWORD *)v10 + 9))
    {
      v12 = 0;
      v11 = 3712;
      do
      {
        DataForKthDescriptor = (void *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(v10, v12);
        v14 = (const void *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(v6, *((_QWORD *)this + 1) * v12);
        v15 = (*(uint64_t (**)(vision::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)v10 + 104))(v10);
        memcpy(DataForKthDescriptor, v14, v15);
        v16 = *((_QWORD *)this + 1);
        if (v16 >= 2)
        {
          for (i = 1; i < v16; ++i)
          {
            v18 = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(v6, i + v12 * v16);
            vDSP_vadd(v18, 1, (const float *)DataForKthDescriptor, 1, (float *)DataForKthDescriptor, 1, *((_QWORD *)v10 + 12));
            v16 = *((_QWORD *)this + 1);
          }
        }
        __B = (float)v16;
        vDSP_vsdiv((const float *)DataForKthDescriptor, 1, &__B, (float *)DataForKthDescriptor, 1, *((_QWORD *)v10 + 12));
        ++v12;
      }
      while (v12 < *((_QWORD *)v10 + 9));
    }
    else
    {
      return 3712;
    }
  }
  return v11;
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptorAugmenterFlip>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B8E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptorAugmenterFlip>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B8E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<vision::mod::ImageDescriptorAugmenterFlip>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void vision::mod::ImageDescriptorAugmenterNoOp::~ImageDescriptorAugmenterNoOp(vision::mod::ImageDescriptorAugmenterNoOp *this)
{
  vision::mod::ImageDescriptorAugmenterAbstract::~ImageDescriptorAugmenterAbstract(this);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptorAugmenterNoOp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptorAugmenterNoOp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<vision::mod::ImageDescriptorAugmenterNoOp>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void vision::mod::TorsoprintGeneratorConcrete::~TorsoprintGeneratorConcrete(vision::mod::TorsoprintGeneratorConcrete *this)
{
  vision::mod::TorsoprintGenerator::~TorsoprintGenerator(this);
  JUMPOUT(0x1A1B0A898);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1A13BD850(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<vision::mod::TorsoprintGeneratorConcrete>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::TorsoprintGeneratorConcrete>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<vision::mod::TorsoprintGeneratorConcrete>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptorBufferFloat32>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptorBufferFloat32>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

_QWORD *std::shared_ptr<vision::mod::ImageDescriptorBufferAbstract>::shared_ptr[abi:ne180100]<vision::mod::ImageDescriptorBufferAbstract,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E453BF40;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1A13BD950(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<vision::mod::ImageDescriptorBufferAbstract *,std::shared_ptr<vision::mod::ImageDescriptorBufferAbstract>::__shared_ptr_default_delete<vision::mod::ImageDescriptorBufferAbstract,vision::mod::ImageDescriptorBufferAbstract>,std::allocator<vision::mod::ImageDescriptorBufferAbstract>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_pointer<vision::mod::ImageDescriptorBufferAbstract *,std::shared_ptr<vision::mod::ImageDescriptorBufferAbstract>::__shared_ptr_default_delete<vision::mod::ImageDescriptorBufferAbstract,vision::mod::ImageDescriptorBufferAbstract>,std::allocator<vision::mod::ImageDescriptorBufferAbstract>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN6vision3mod29ImageDescriptorBufferAbstractEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vImage_Buffer>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

uint64_t tplTrackerResampler_lumaDownscale4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8x8_t v15;
  uint16x8_t v16;
  uint8x8_t v17;
  uint16x8_t v18;

  if (a6 >= 4)
  {
    v7 = 0;
    v8 = 4 * a2;
    v9 = result + a3 + a2 * a4;
    v10 = v9 + 3 * a2;
    v11 = v9 + 2 * a2;
    v12 = v9 + a2;
    if (a5 >> 2 <= 1)
      v13 = 1;
    else
      v13 = a5 >> 2;
    do
    {
      if (a5 >= 4)
      {
        v14 = 0;
        do
        {
          v15.i32[0] = *(_DWORD *)(v11 + 4 * v14);
          v15.i32[1] = *(_DWORD *)(v10 + 4 * v14);
          v16 = vmovl_u8(v15);
          v17.i32[0] = *(_DWORD *)(v9 + 4 * v14);
          v17.i32[1] = *(_DWORD *)(v12 + 4 * v14);
          v18 = vmovl_u8(v17);
          result = (vaddvq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v18.i8, *(uint16x4_t *)v16.i8), (int32x4_t)vaddl_high_u16(v18, v16)))+ 8) >> 4;
          *(_BYTE *)(a7 + v14++) = result;
        }
        while (v13 != v14);
      }
      v9 += v8;
      v12 += v8;
      v11 += v8;
      v10 += v8;
      a7 += a5 >> 2;
      ++v7;
    }
    while (v7 != a6 >> 2);
  }
  return result;
}

uint64_t tplTrackerResampler_chromaDownscale4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a6 >= 4)
  {
    v8 = 0;
    v15 = a6 >> 2;
    v9 = 2 * a3;
    v16 = a5 >> 2;
    v17 = 4 * a2;
    if (a5 >> 2 <= 1)
      v10 = 1;
    else
      v10 = a5 >> 2;
    v22 = result + a2 * a4 + 3;
    v21 = v22 + a2;
    v19 = result + a2 * (a4 + 3) + 3;
    v20 = result + a2 * (a4 + 2) + 3;
    do
    {
      v18 = v8;
      if (a5 >= 4)
      {
        result = 0;
        v11 = v19;
        v12 = v20;
        v13 = v21;
        v14 = v22;
        do
        {
          *(_BYTE *)(a7 + result) = (*(unsigned __int8 *)(v14 + v9 - 3)
                                   + *(unsigned __int8 *)(v14 + v9 - 1)
                                   + *(unsigned __int8 *)(v14 + v9 + 1)
                                   + *(unsigned __int8 *)(v14 + v9 + 3)
                                   + *(unsigned __int8 *)(v13 + v9 - 3)
                                   + *(unsigned __int8 *)(v13 + v9 - 1)
                                   + *(unsigned __int8 *)(v13 + v9 + 1)
                                   + *(unsigned __int8 *)(v13 + v9 + 3)
                                   + *(unsigned __int8 *)(v12 + v9 - 3)
                                   + *(unsigned __int8 *)(v12 + v9 - 1)
                                   + *(unsigned __int8 *)(v12 + v9 + 1)
                                   + *(unsigned __int8 *)(v12 + v9 + 3)
                                   + *(unsigned __int8 *)(v11 + v9 - 3)
                                   + *(unsigned __int8 *)(v11 + v9 - 1)
                                   + *(unsigned __int8 *)(v11 + v9 + 1)
                                   + *(unsigned __int8 *)(v11 + v9 + 3)
                                   + 8) >> 4;
          *(_BYTE *)(a8 + result++) = (*(unsigned __int8 *)(v14 + v9 - 2)
                                     + *(unsigned __int8 *)(v14 + v9)
                                     + *(unsigned __int8 *)(v14 + v9 + 2)
                                     + *(unsigned __int8 *)(v14 + v9 + 4)
                                     + *(unsigned __int8 *)(v13 + v9 - 2)
                                     + *(unsigned __int8 *)(v13 + v9)
                                     + *(unsigned __int8 *)(v13 + v9 + 2)
                                     + *(unsigned __int8 *)(v13 + v9 + 4)
                                     + *(unsigned __int8 *)(v12 + v9 - 2)
                                     + *(unsigned __int8 *)(v12 + v9)
                                     + *(unsigned __int8 *)(v12 + v9 + 2)
                                     + *(unsigned __int8 *)(v12 + v9 + 4)
                                     + *(unsigned __int8 *)(v11 + v9 - 2)
                                     + *(unsigned __int8 *)(v11 + v9)
                                     + *(unsigned __int8 *)(v11 + v9 + 2)
                                     + *(unsigned __int8 *)(v11 + v9 + 4)
                                     + 8) >> 4;
          v14 += 8;
          v13 += 8;
          v12 += 8;
          v11 += 8;
        }
        while (v10 != result);
      }
      a7 += v16;
      a8 += v16;
      ++v8;
      v22 += v17;
      v21 += v17;
      v20 += v17;
      v19 += v17;
    }
    while (v18 + 1 != v15);
  }
  return result;
}

unsigned __int8 *tplTracker_YCbCr2RGB(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, _BYTE *a5, _BYTE *a6, _BYTE *a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  if (a4 >= 1)
  {
    v7 = a4;
    do
    {
      v9 = *a2++;
      v8 = v9;
      v11 = *result++;
      v10 = v11;
      v12 = v8 - 128;
      v13 = *a3++;
      v14 = v13 - 128;
      v15 = 101 * (v13 - 128) + (v10 << 6);
      if (v15 <= 16351)
        v16 = ((v15 + 32) >> 6) & ~((v15 + 32) >> 31);
      else
        v16 = 255;
      v17 = -12 * v12 + (v10 << 6) - 30 * v14;
      v18 = 119 * v12 + (v10 << 6);
      if (v17 <= 16351)
        v19 = ((v17 + 32) >> 6) & ~((v17 + 32) >> 31);
      else
        v19 = 255;
      if (v18 <= 16351)
        v20 = ((v18 + 32) >> 6) & ~((v18 + 32) >> 31);
      else
        v20 = 255;
      if (v19 <= v20)
        v21 = v20;
      else
        v21 = v19;
      if (v16 > v21)
        v21 = v16;
      v22 = ctrTrackerComputation_YCbCr2nRGB_kIlluminationInvariantLookupTable[v21];
      v23 = v16 * v22;
      v24 = v23 >> 4;
      v25 = (v23 + 16) >> 5;
      v26 = v19 * v22;
      if (v24 > 0x1FE)
        LOBYTE(v25) = -1;
      v27 = v26 >> 4;
      v28 = (v26 + 16) >> 5;
      *a5++ = v25;
      if (v27 > 0x1FE)
        LOBYTE(v28) = -1;
      v29 = v20 * v22;
      v30 = v29 >> 4;
      *a6++ = v28;
      v31 = (v29 + 16) >> 5;
      if (v30 > 0x1FE)
        LOBYTE(v31) = -1;
      *a7++ = v31;
      --v7;
    }
    while (v7);
  }
  return result;
}

void tplTracker_computeNormedGradient(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6, uint64_t a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;

  v7 = a6[1];
  if (*a6 >= a5)
    v8 = a5 - 1;
  else
    v8 = *a6 & ~(*a6 >> 31);
  v9 = a6[2];
  v10 = a6[3];
  if (v9 >= a5)
    v11 = a5 - 1;
  else
    v11 = v9 & ~(v9 >> 31);
  v12 = a4 - 1;
  v13 = v7 & ~(v7 >> 31);
  if (v7 >= a4)
    v13 = a4 - 1;
  v56 = v13;
  if (v10 < a4)
    v12 = v10 & ~(v10 >> 31);
  v55 = v12;
  if (a4 >= 1)
  {
    v18 = 0;
    v19 = a5;
    v20 = v12;
    v21 = v13;
    v57 = a4;
    v54 = a5;
    v53 = a5;
    do
    {
      if (v18 < v21 || v18 > v20)
      {
        if (a5 >= 1)
        {
          bzero((void *)(a7 + (int)v18 * a5), v19);
          v21 = v56;
          v20 = v55;
          a5 = v54;
        }
      }
      else if (a5 >= 1)
      {
        v22 = 0;
        if (v18 < v20)
          v23 = v18 + 1;
        else
          v23 = v55;
        if ((int)v18 - 1 <= v56)
          v24 = v56;
        else
          v24 = v18 - 1;
        v25 = v23 - v24 != 2;
        v26 = v18 * v53;
        v27 = v23 * a5;
        v28 = v24 * a5;
        v29 = v27;
        do
        {
          if (v22 < v8 || v22 > v11)
          {
            *(_BYTE *)(a7 + v22 + v26) = 0;
            ++v22;
          }
          else
          {
            if ((int)v22 - 1 <= v8)
              v30 = v8;
            else
              v30 = v22 - 1;
            v31 = v22 < v11;
            v32 = v22 + v28;
            v33 = v22 + v29;
            v34 = v22 + v26;
            ++v22;
            if (v31)
              v35 = v22;
            else
              v35 = v11;
            v36 = v35 - v30 != 2;
            v37 = v26 + v30;
            v38 = v26 + v35;
            v39 = (*(unsigned __int8 *)(a1 + v38) - *(unsigned __int8 *)(a1 + v37)) << v36;
            v40 = (*(unsigned __int8 *)(a1 + v33) - *(unsigned __int8 *)(a1 + v32)) << v25;
            v41 = (*(unsigned __int8 *)(a2 + v38) - *(unsigned __int8 *)(a2 + v37)) << v36;
            v42 = (*(unsigned __int8 *)(a2 + v33) - *(unsigned __int8 *)(a2 + v32)) << v25;
            v43 = (*(unsigned __int8 *)(a3 + v38) - *(unsigned __int8 *)(a3 + v37)) << v36;
            v44 = (*(unsigned __int8 *)(a3 + v33) - *(unsigned __int8 *)(a3 + v32)) << v25;
            if (v39 >= 0)
              v45 = v39;
            else
              v45 = -v39;
            if (v40 >= 0)
              v46 = v40;
            else
              v46 = -v40;
            v47 = v46 + v45;
            if (v41 >= 0)
              v48 = v41;
            else
              v48 = -v41;
            if (v42 >= 0)
              v49 = v42;
            else
              v49 = -v42;
            v50 = v49 + v48;
            if (v43 < 0)
              v43 = -v43;
            if (v44 < 0)
              v44 = -v44;
            v51 = v44 + v43;
            if (v47 <= v50)
              v52 = v50;
            else
              v52 = v47;
            if (v52 > v51)
              v51 = v52;
            if (v51 >= 0xFF)
              LOBYTE(v51) = -1;
            *(_BYTE *)(a7 + v34) = v51;
          }
        }
        while (v22 != v19);
      }
      ++v18;
    }
    while (v18 != v57);
  }
}

float tplTracker_computeTemplateAvgColor(_DWORD *a1, float result)
{
  float *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (float *)(a1 + 10516);
  v3 = a1[11258];
  if (v3 > 4)
  {
    v6 = a1[11256];
    if (v6 <= 6)
      v4 = 6;
    else
      v4 = a1[11256];
    if (v6 <= 18)
      v6 = 18;
    if (v3 <= 0x10)
      v5 = v3 + 1;
    else
      v5 = v6;
  }
  else
  {
    v4 = v3 + 1;
    v5 = v3 + 1;
  }
  v7 = a1[11259];
  if (v7 > 4)
  {
    v10 = a1[11257];
    if (v10 <= 6)
      v8 = 6;
    else
      v8 = a1[11257];
    if (v10 <= 18)
      v10 = 18;
    if (v7 <= 0x10)
      v9 = v7 + 1;
    else
      v9 = v10;
  }
  else
  {
    v8 = v7 + 1;
    v9 = v7 + 1;
  }
  v11 = (v9 - v8) * (v5 - v4);
  if (v11 >= 1)
  {
    v12 = (float)v11;
    if (v9 <= v8)
    {
      v15 = 0;
      v14 = 0;
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = (uint64_t)&a1[6 * v8 + 17740];
      v17 = (uint64_t)&a1[6 * v8 + 16444];
      v18 = (uint64_t)&a1[6 * v8 + 15148];
      do
      {
        v19 = v18;
        v20 = v17;
        v21 = v16;
        v22 = v5;
        if (v5 > v4)
        {
          do
          {
            v15 += *(unsigned __int8 *)(v19 + v4);
            v14 += *(unsigned __int8 *)(v20 + v4);
            v13 += *(unsigned __int8 *)(v21 + v4);
            --v22;
            ++v21;
            ++v20;
            ++v19;
          }
          while (v4 != v22);
        }
        v18 += 24;
        v17 += 24;
        v16 += 24;
        ++v8;
      }
      while (v8 != v9);
    }
    *v2 = (float)v15 / v12;
    v2[1] = (float)v14 / v12;
    result = (float)v13 / v12;
    v2[2] = result;
  }
  return result;
}

uint64_t tplTracker_computeTemplateStats(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  int v6;
  float v7;
  float v8;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = result + 8;
  do
  {
    for (i = 0; i != 24; ++i)
    {
      v6 = *(_BYTE *)(v4 + i) & 0xF0;
      v1 += v6;
      v2 += v6 * v6;
    }
    v4 += 24;
    ++v3;
  }
  while (v3 != 24);
  v7 = (float)v1 / 576.0;
  v8 = (float)((float)v2 / 576.0) - (float)(v7 * v7);
  if (v8 < 0.0)
    v8 = 0.0;
  *(float *)(result + 42056) = v7;
  *(float *)(result + 42060) = sqrtf(v8);
  return result;
}

uint64_t tplTracker_computeTemplateFFT(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  int32x4_t v10;

  v2 = 0;
  v3 = a1 + 216824;
  v4 = a1 + 8;
  v5 = a1 + 216828;
  v6 = (char *)(a1 + 216824);
  do
  {
    v7 = 0;
    v8 = v5;
    do
    {
      *(_QWORD *)(v8 - 4) = *(_BYTE *)(v4 + v7++) & 0xF0;
      v8 += 8;
    }
    while (v7 != 24);
    v9 = (_OWORD *)(a1 + 576 * v2 + 217016);
    v9[22] = 0uLL;
    v9[23] = 0uLL;
    v9[20] = 0uLL;
    v9[21] = 0uLL;
    v9[18] = 0uLL;
    v9[19] = 0uLL;
    v9[16] = 0uLL;
    v9[17] = 0uLL;
    v9[14] = 0uLL;
    v9[15] = 0uLL;
    v9[12] = 0uLL;
    v9[13] = 0uLL;
    v9[10] = 0uLL;
    v9[11] = 0uLL;
    v9[8] = 0uLL;
    v9[9] = 0uLL;
    v9[6] = 0uLL;
    v9[7] = 0uLL;
    v9[4] = 0uLL;
    v9[5] = 0uLL;
    v9[2] = 0uLL;
    v9[3] = 0uLL;
    v4 += 24;
    v6 += 576;
    ++v2;
    v5 += 576;
    *v9 = 0uLL;
    v9[1] = 0uLL;
  }
  while (v2 != 24);
  bzero(v6, 0x6C00uLL);
  return tplTracker_IFFT_2D(v3, (char *)(a1 + 258296), (_QWORD *)(a1 + 584), v10);
}

uint64_t tplTracker_findPeakXY(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, float *a9)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  float *v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float Peak;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a2 <= a4)
    v11 = a2 - 1;
  else
    v11 = a4;
  if (a3 <= a5)
    v12 = a3 - 1;
  else
    v12 = a5;
  if (a2 <= a6)
    v13 = a2 - 1;
  else
    v13 = a6;
  if (a3 <= a7)
    v14 = a3 - 1;
  else
    v14 = a7;
  v15 = v14 - v12 + 1;
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v34 - v16;
  MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v34 - v22;
  result = 6780;
  if (v13 - v11 <= 47 && v21 <= 47)
  {
    v37 = a9;
    v38 = v19;
    v36 = v20;
    bzero(v17, 4 * v20);
    v35 = v15;
    bzero(v23, 4 * v15);
    if (v14 >= v12)
    {
      v25 = 0;
      v26 = a1 + 4 * v12 * a2;
      do
      {
        if (v13 >= v11)
        {
          v27 = *(float *)&v23[4 * v25];
          v28 = (float *)v17;
          v29 = (v13 - v11 + 1);
          v30 = 4 * v11;
          do
          {
            v31 = *(float *)(v26 + v30);
            *v28 = v31 + *v28;
            ++v28;
            v27 = v31 + v27;
            v30 += 4;
            --v29;
          }
          while (v29);
          *(float *)&v23[4 * v25] = v27;
        }
        ++v25;
        v26 += 4 * a2;
      }
      while (v25 != v14 - v12 + 1);
    }
    Peak = tplTracker_findPeak((uint64_t)v17, v36);
    *v38 = Peak + (float)v11;
    v33 = tplTracker_findPeak((uint64_t)v23, v35);
    *v37 = v33 + (float)v12;
    return 6784;
  }
  return result;
}

float tplTracker_findPeak(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float result;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;

  switch(a2)
  {
    case 5:
      v8 = 0;
      v3 = 0.0;
      v4 = 0.0;
      do
      {
        v9 = *(float *)(a1 + v8 * 4);
        v4 = v4 + (float)(*(float *)&dword_1A15E4320[v8] * v9);
        v3 = v3 + (float)(*(float *)&dword_1A15E4334[v8++] * v9);
      }
      while (v8 != 5);
      if (v3 <= -0.005)
      {
        result = 0.0;
        if (v4 > 0.0 != v3 < 0.0)
          return result;
        v7 = v3 * -8.0;
        result = 4.0;
        goto LABEL_33;
      }
      break;
    case 6:
      v10 = 0;
      v3 = 0.0;
      v4 = 0.0;
      do
      {
        v11 = *(float *)(a1 + v10 * 4);
        v4 = v4 + (float)(*(float *)&dword_1A15E273C[v10] * v11);
        v3 = v3 + (float)(*(float *)&dword_1A15E2754[v10++] * v11);
      }
      while (v10 != 6);
      if (v3 <= -0.005)
      {
        result = 0.0;
        if (v4 > 0.0 != v3 < 0.0)
          return result;
        v7 = v3 * -10.0;
        result = 5.0;
        goto LABEL_33;
      }
      break;
    case 7:
      v2 = 0;
      v3 = 0.0;
      v4 = 0.0;
      do
      {
        v5 = *(float *)(a1 + v2 * 4);
        v4 = v4 + (float)(*(float *)&dword_1A15E276C[v2] * v5);
        v3 = v3 + (float)(*(float *)&dword_1A15E2788[v2++] * v5);
      }
      while (v2 != 7);
      if (v3 <= -0.005)
      {
        result = 0.0;
        if (v4 > 0.0 != v3 < 0.0)
          return result;
        v7 = v3 * -12.0;
        result = 6.0;
LABEL_33:
        if (v4 <= v7)
          return v4 / (float)(v3 * -2.0);
        return result;
      }
      break;
  }
  result = (float)(unint64_t)(a2 - 1) * 0.5;
  if (a2)
  {
    v12 = 0;
    v13 = 0.0;
    v14 = 3.4028e38;
    do
    {
      v15 = *(float *)(a1 + 4 * v12);
      if (v15 < v14)
        v14 = *(float *)(a1 + 4 * v12);
      if (v15 > v13)
      {
        result = (float)(int)v12;
        v13 = *(float *)(a1 + 4 * v12);
      }
      ++v12;
    }
    while (a2 != v12);
    v16 = 0;
    v17 = 0.0;
    v18 = 0.0;
    do
    {
      v19 = (float)(*(float *)(a1 + 4 * v16) - v14) * (float)(*(float *)(a1 + 4 * v16) - v14);
      v17 = v17 + v19;
      v18 = v18 + (float)((float)(int)v16++ * v19);
    }
    while (a2 != v16);
  }
  else
  {
    v18 = 0.0;
    v17 = 0.0;
  }
  if (v17 > 0.0)
    return v18 / v17;
  return result;
}

uint64_t tplTracker_mergeSpans(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  signed int v7;
  uint64_t v8;
  _BOOL4 v10;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  int v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  _DWORD *v52;
  _DWORD *v53;
  int v54;
  int v55;
  int v56;
  int v57;

  if ((int)a2 >= a3)
    return 6784;
  v3 = 0;
  v4 = a1 + 162432;
  v5 = -1;
  v6 = -1;
  while (1)
  {
    v7 = *(_DWORD *)(v4 + 36 * (int)a2);
    if (v7 > (int)v3)
    {
      v8 = a2;
      LODWORD(a2) = -1;
      goto LABEL_67;
    }
    if ((int)a2 < a3 && v7 == v3)
      break;
    v8 = a2;
LABEL_67:
    if (v3 <= 0x2F)
    {
      ++v3;
      v5 = v6;
      v6 = a2;
      a2 = v8;
      if ((int)v8 < a3)
        continue;
    }
    return 6784;
  }
  v8 = (int)a2;
  v10 = v5 != -1 && v5 < a3;
  v12 = v6 != -1 && v6 < a3;
  while (1)
  {
    v13 = *(unsigned int *)(v4 + 36 * v8 + 12);
    do
    {
      v14 = v13;
      v13 = *(unsigned int *)(v4 + 36 * (int)v13 + 12);
    }
    while ((_DWORD)v14 != (_DWORD)v13);
    if (v10)
    {
      v15 = (_DWORD *)(v4 + 36 * (int)v8);
      v16 = v15 + 2;
      v17 = v15 + 1;
      v18 = v15 + 3;
      v19 = v5;
      v20 = v14;
      do
      {
        if (*(_DWORD *)(v4 + 36 * v19) != v3 - 2 || *(_DWORD *)(v4 + 36 * v19 + 4) > *v16 + 2)
          break;
        if (*(_DWORD *)(v4 + 36 * v19 + 8) >= *v17 - 2)
        {
          v21 = v4 + 36 * v19;
          v24 = *(_DWORD *)(v21 + 12);
          v23 = (_DWORD *)(v21 + 12);
          v22 = v24;
          do
          {
            v25 = v22;
            v26 = v4 + 36 * (int)v22;
            v28 = *(_DWORD *)(v26 + 12);
            v27 = (_DWORD *)(v26 + 12);
            v22 = v28;
          }
          while ((_DWORD)v25 != v28);
          if ((_DWORD)v25 != (_DWORD)v20)
          {
            v29 = v25;
            if ((int)v20 <= (int)v25)
            {
              *v27 = v20;
              *v23 = v20;
              v25 = v20;
              v30 = v20;
            }
            else
            {
              v30 = v25;
              v29 = v20;
              *(_DWORD *)(v4 + 36 * (int)v20 + 12) = v25;
              *v18 = v25;
            }
            v31 = (_DWORD *)(v4 + 36 * v30);
            v32 = (_DWORD *)(v4 + 36 * v29);
            v33 = v31[4];
            v34 = v31[5];
            if (v33 >= v32[4])
              v33 = v32[4];
            if (v34 <= v32[5])
              v34 = v32[5];
            v31[4] = v33;
            v31[5] = v34;
            v35 = v31[6];
            v36 = v31[7];
            if (v35 >= v32[6])
              v35 = v32[6];
            if (v36 <= v32[7])
              v36 = v32[7];
            v31[6] = v35;
            v31[7] = v36;
            v31[8] += v32[8];
            v20 = v25;
          }
        }
        ++v19;
      }
      while ((_DWORD)v19 != a3);
    }
    if (v12)
    {
      v37 = (_DWORD *)(v4 + 36 * (int)v8);
      v38 = v37 + 2;
      v39 = v37 + 1;
      v40 = v37 + 3;
      v41 = v6;
      do
      {
        if (*(_DWORD *)(v4 + 36 * v41) != v3 - 1 || *(_DWORD *)(v4 + 36 * v41 + 4) > *v38 + 2)
          break;
        if (*(_DWORD *)(v4 + 36 * v41 + 8) >= *v39 - 2)
        {
          v42 = v4 + 36 * v41;
          v45 = *(_DWORD *)(v42 + 12);
          v44 = (_DWORD *)(v42 + 12);
          v43 = v45;
          do
          {
            v46 = v43;
            v47 = v4 + 36 * (int)v43;
            v49 = *(_DWORD *)(v47 + 12);
            v48 = (_DWORD *)(v47 + 12);
            v43 = v49;
          }
          while ((_DWORD)v46 != v49);
          if ((_DWORD)v46 != (_DWORD)v14)
          {
            v50 = v46;
            if ((int)v14 <= (int)v46)
            {
              *v48 = v14;
              *v44 = v14;
              v46 = v14;
              v51 = v14;
            }
            else
            {
              v51 = v46;
              v50 = v14;
              *(_DWORD *)(v4 + 36 * (int)v14 + 12) = v46;
              *v40 = v46;
            }
            v52 = (_DWORD *)(v4 + 36 * v51);
            v53 = (_DWORD *)(v4 + 36 * v50);
            v54 = v52[4];
            v55 = v52[5];
            if (v54 >= v53[4])
              v54 = v53[4];
            if (v55 <= v53[5])
              v55 = v53[5];
            v52[4] = v54;
            v52[5] = v55;
            v56 = v52[6];
            v57 = v52[7];
            if (v56 >= v53[6])
              v56 = v53[6];
            if (v57 <= v53[7])
              v57 = v53[7];
            v52[6] = v56;
            v52[7] = v57;
            v52[8] += v53[8];
            v14 = v46;
          }
        }
        ++v41;
      }
      while ((_DWORD)v41 != a3);
    }
    if (++v8 == a3)
      return 6784;
    if (*(_DWORD *)(v4 + 36 * v8) != v3)
      goto LABEL_67;
  }
}

uint64_t calculateIntegralImage(unsigned __int8 *a1, int a2, int a3, int a4, int a5, _DWORD *a6)
{
  uint64_t result;
  int v8;
  unsigned __int8 *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;

  result = 6780;
  if (a1 && a6 && a3 * a2 < 0x10000)
  {
    if (a2 >= 1)
    {
      v8 = 0;
      v9 = a1;
      v10 = a6;
      v11 = a2;
      do
      {
        v12 = *v9++;
        v8 += v12;
        *v10++ = v8;
        --v11;
      }
      while (v11);
    }
    if (a3 <= 1)
    {
      return 6784;
    }
    else
    {
      v13 = 4 * a5;
      v14 = &a1[a4];
      v15 = 1;
      result = 6784;
      v16 = &a6[(unint64_t)v13 / 4];
      do
      {
        if (a2 >= 1)
        {
          v17 = 0;
          v18 = 0;
          do
          {
            v18 += v14[v17];
            v16[v17] = v18 + a6[v17];
            ++v17;
          }
          while (a2 != v17);
        }
        ++v15;
        v16 = (_DWORD *)((char *)v16 + v13);
        a6 = (_DWORD *)((char *)a6 + v13);
        v14 += a4;
      }
      while (v15 != a3);
    }
  }
  return result;
}

void sub_1A13BEC74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13BED10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BEDB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BEE84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13BEF98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13BF0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13BF6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;

  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

void sub_1A13BFB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1A13BFA70);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1A13BFCB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1A13BFD2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A13BFE5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C0064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id VNPersonsModelIOStringForTag(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = ((int)a1 >> 24);
  v3 = MEMORY[0x1E0C80978];
  if ((a1 & 0x80000000) != 0)
  {
    if (!__maskrune((int)a1 >> 24, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v2 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  if ((((_DWORD)a1 << 6) & 0x80000000) != 0)
  {
    if (!__maskrune((int)((_DWORD)a1 << 6) >> 24, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(v3 + 4 * ((int)((_DWORD)a1 << 6) >> 24) + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  if ((((_DWORD)a1 << 16) & 0x80000000) != 0)
  {
    if (!__maskrune((__int16)a1 >> 8, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(v3 + 4 * ((__int16)a1 >> 8) + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  if ((a1 & 0x80) != 0)
  {
    if (__maskrune((char)a1, 0x40000uLL))
      goto LABEL_15;
LABEL_17:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("0x%08X"), a1, v5, v6, v7);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  if ((*(_DWORD *)(v3 + 4 * (char)a1 + 60) & 0x40000) == 0)
    goto LABEL_17;
LABEL_15:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("'%c%c%c%c'"), v2, ((int)((_DWORD)a1 << 6) >> 24), ((__int16)a1 >> 8), (char)a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

BOOL VNPersonsModelIOWriteTagToOutputStream(int a1, void *a2, CC_MD5_CTX *a3, _QWORD *a4)
{
  id v6;
  uint64_t v7;
  void *v8;
  int data;

  data = a1;
  v6 = a2;
  v7 = objc_msgSend(v6, "write:maxLength:", &data, 4);
  if (v7 == 4)
  {
    CC_MD5_Update(a3, &data, 4u);
  }
  else if (a4)
  {
    objc_msgSend(v6, "streamError");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    VNPersonsModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("failed to write to data stream"), v8);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v7 == 4;
}

uint64_t VNPersonsModelIOWriteTaggedBufferToOutputStream(uint64_t a1, const void *a2, CC_LONG a3, void *a4, CC_MD5_CTX *a5, uint64_t a6)
{
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v16;

  v11 = a4;
  if (!a2)
  {
    if (!a6)
      goto LABEL_11;
    v12 = (void *)MEMORY[0x1E0CB3940];
    VNPersonsModelIOStringForTag(a1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringWithFormat:", CFSTR("tag %@ did not provide any data"), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    VNPersonsModelErrorForIOError(v14);
    *(_QWORD *)a6 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_10;
  }
  if (!VNPersonsModelIOWriteTagToOutputStream(a1, v11, a5, (_QWORD *)a6)
    || !VNPersonsModelIOWriteTagToOutputStream(a3, v11, a5, (_QWORD *)a6))
  {
    goto LABEL_10;
  }
  if (a3)
  {
    if (objc_msgSend(v11, "write:maxLength:", a2, a3) == a3)
    {
      CC_MD5_Update(a5, a2, a3);
      goto LABEL_7;
    }
    if (!a6)
      goto LABEL_11;
    objc_msgSend(v11, "streamError");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    VNPersonsModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("failed to write to data stream"), v16);
    *(_QWORD *)a6 = (id)objc_claimAutoreleasedReturnValue();

LABEL_10:
    a6 = 0;
    goto LABEL_11;
  }
LABEL_7:
  a6 = 1;
LABEL_11:

  return a6;
}

_QWORD *VNPersonsModelIOWriteTaggedDataToOutputStream(uint64_t a1, void *a2, void *a3, CC_MD5_CTX *a4, _QWORD *a5)
{
  id v9;
  id v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  v9 = a2;
  v10 = a3;
  v11 = objc_msgSend(v9, "length");
  if (HIDWORD(v11))
  {
    if (a5)
    {
      v12 = (void *)MEMORY[0x1E0CB3940];
      VNPersonsModelIOStringForTag(a1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "stringWithFormat:", CFSTR("tag %@ has a data overflow to %lu bytes"), v13, v11);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      VNPersonsModelErrorForIOError(v14);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

      a5 = 0;
    }
  }
  else
  {
    a5 = (_QWORD *)VNPersonsModelIOWriteTaggedBufferToOutputStream(a1, (const void *)objc_msgSend(objc_retainAutorelease(v9), "bytes"), v11, v10, a4, (uint64_t)a5);
  }

  return a5;
}

_QWORD *VNPersonsModelIOWriteTaggedObjectToOutputStream(uint64_t a1, uint64_t a2, void *a3, CC_MD5_CTX *a4, _QWORD *a5)
{
  id v9;
  void *v10;
  _QWORD *v11;

  v9 = a3;
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a2, 1, a5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
    v11 = VNPersonsModelIOWriteTaggedDataToOutputStream(a1, v10, v9, a4, a5);
  else
    v11 = 0;

  return v11;
}

BOOL VNPersonsModelIOReadTagFromInputStream(void *a1, const void *a2, CC_MD5_CTX *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  void *v9;

  v7 = a1;
  v8 = objc_msgSend(v7, "read:maxLength:", a2, 4);
  if (v8 == 4)
  {
    CC_MD5_Update(a3, a2, 4u);
  }
  else if (a4)
  {
    objc_msgSend(v7, "streamError");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    VNPersonsModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("unexpected end of data stream"), v9);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v8 == 4;
}

BOOL VNPersonsModelIOReadBufferFromInputStream(void *a1, CC_LONG a2, const void *a3, CC_MD5_CTX *a4, _QWORD *a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v9 = a1;
  v10 = a2;
  v11 = objc_msgSend(v9, "read:maxLength:", a3, a2);
  if (v11 == a2)
  {
    CC_MD5_Update(a4, a3, a2);
  }
  else if (a5)
  {
    objc_msgSend(v9, "streamError");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    VNPersonsModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("unexpected end of data stream"), v12);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v11 == v10;
}

id VNPersonsModelIOReadNSDataFromInputStream(void *a1, CC_MD5_CTX *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  const void *v8;
  id v9;
  CC_LONG v11;

  v5 = a1;
  v11 = 0;
  if (VNPersonsModelIOReadTagFromInputStream(v5, &v11, a2, a3))
  {
    v6 = objc_alloc(MEMORY[0x1E0C99DF0]);
    v7 = objc_retainAutorelease((id)objc_msgSend(v6, "initWithLength:", v11));
    v8 = (const void *)objc_msgSend(v7, "mutableBytes");
    if (v8)
    {
      if (VNPersonsModelIOReadBufferFromInputStream(v5, v11, v8, a2, a3))
      {
        v9 = v7;
LABEL_9:

        goto LABEL_10;
      }
    }
    else if (a3)
    {
      +[VNError errorForMemoryAllocationFailure](VNError, "errorForMemoryAllocationFailure");
      v9 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    }
    v9 = 0;
    goto LABEL_9;
  }
  v9 = 0;
LABEL_10:

  return v9;
}

uint64_t VNPersonsModelIOReadPastUnknownTagData(void *a1, CC_MD5_CTX *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  unsigned int v12;
  _BYTE data[256];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v12 = 0;
  v6 = 0;
  if (VNPersonsModelIOReadTagFromInputStream(v5, &v12, a2, a3))
  {
    v7 = v12;
    v8 = v5;
    if ((_DWORD)v7)
    {
      while (1)
      {
        v9 = v7 >= 0x100 ? 256 : v7;
        if (objc_msgSend(v8, "read:maxLength:", data, v9) != v9)
          break;
        CC_MD5_Update(a2, data, v9);
        v7 -= v9;
        if (!v7)
          goto LABEL_8;
      }
      if (a3)
      {
        objc_msgSend(v8, "streamError");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        VNPersonsModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("unexpected end of data stream"), v10);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

      }
      v6 = 0;
    }
    else
    {
LABEL_8:
      v6 = 1;
    }

  }
  return v6;
}

void sub_1A13C0DB8(void *a1)
{
  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_1A13C0DC4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A13C19F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13C1B9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13C1D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13C220C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13C2358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vision::mod::ImageClassifierEspresso::~ImageClassifierEspresso(vision::mod::ImageClassifierEspresso *this)
{
  *(_QWORD *)this = &off_1E453A6B8;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 120);
  vision::mod::ImageClassifierAbstract::~ImageClassifierAbstract(this);
}

{
  *(_QWORD *)this = &off_1E453A6B8;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 120);
  vision::mod::ImageClassifierAbstract::~ImageClassifierAbstract(this);
  JUMPOUT(0x1A1B0A898);
}

void vision::mod::ImageClassifierAbstract::classifyDescriptorBatch(vision::mod::ImageClassifierAbstract *this@<X0>, const vision::mod::ImageDescriptorBufferAbstract *a2@<X1>, int a3@<W2>, char a4@<W3>, char **a5@<X8>)
{
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  char v18;
  void *v19;
  int v20;
  uint64_t i;
  uint64_t v22;
  int v23;
  void *v24;
  void *v25;
  char **v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *exception;
  void *v32[2];
  void *v33[2];
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  void *__p[2];
  void *v42[2];
  int v43;
  void *v44[2];
  void *v45[2];
  int v46;
  char **v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  int v50;
  __int128 *v51[2];

  v10 = *((_QWORD *)a2 + 9);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v47 = a5;
  LOBYTE(v48) = 0;
  if (v10)
  {
    if (v10 >= 0x666666666666667)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_map<std::string,float>>>(v10);
    *a5 = v11;
    a5[1] = v11;
    a5[2] = &v11[40 * v12];
    v13 = &v11[40 * v10];
    do
    {
      *(_OWORD *)v11 = 0uLL;
      *((_OWORD *)v11 + 1) = 0uLL;
      *((_DWORD *)v11 + 8) = 1065353216;
      v11 += 40;
    }
    while (v11 != v13);
    a5[1] = v13;
  }
  (*(void (**)(char ***__return_ptr, vision::mod::ImageClassifierAbstract *))(*(_QWORD *)this + 24))(&v47, this);
  (*((void (**)(uint64_t *__return_ptr))*v47 + 8))(&v35);
  v14 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*((_QWORD *)a2 + 9))
  {
    v17 = 0;
    if (__p == (void **)((char *)this + 32))
      v18 = 1;
    else
      v18 = a4;
    do
    {
      (*(void (**)(const vision::mod::ImageDescriptorBufferAbstract *, uint64_t, unint64_t))(*(_QWORD *)a2 + 112))(a2, v35, v17);
      (*(void (**)(char ***__return_ptr, vision::mod::ImageClassifierAbstract *, uint64_t))(*(_QWORD *)this + 56))(&v47, this, v35);
      *(_OWORD *)v44 = 0u;
      *(_OWORD *)v45 = 0u;
      v46 = 1065353216;
      if (a3)
      {
        vision::mod::ImageClassifierAbstract::ImageClassifier_filterdisallowedListedLabels((uint64_t)__p, (uint64_t)this, (uint64_t)&v47);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__move_assign((uint64_t)v44, (uint64_t *)__p);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node((void **)v42[0]);
        v19 = __p[0];
        __p[0] = 0;
        if (v19)
          operator delete(v19);
      }
      else
      {
        v46 = v50;
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,float>,void *> *>>(v44, v49);
      }
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v42 = 0u;
      v43 = 1065353216;
      if ((v18 & 1) == 0)
      {
        v43 = *((_DWORD *)this + 16);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,float>,void *> *>>(__p, *((uint64_t **)this + 6));
      }
      v39 = 0uLL;
      v40 = 0;
      v20 = *((_DWORD *)this + 24);
      if (v20 == 1)
      {
        ImageClassifier_getLabelsAuto((uint64_t *)&v37, (void **)v45[0], __p, *((float *)this + 26), 0.1);
      }
      else
      {
        if (v20)
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = 3955;
          __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
        }
        ImageClassifier_getLabels((uint64_t *)&v37, (void **)v45[0], __p, *((int *)this + 27), *((float *)this + 25));
      }
      std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)&v39);
      v39 = v37;
      v40 = v38;
      v38 = 0;
      v37 = 0uLL;
      v51[0] = &v37;
      std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
      *(_OWORD *)v32 = 0u;
      *(_OWORD *)v33 = 0u;
      v34 = 1065353216;
      v22 = *((_QWORD *)&v39 + 1);
      for (i = v39; i != v22; i += 32)
      {
        v23 = *(_DWORD *)(i + 24);
        v51[0] = (__int128 *)i;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v32, (unsigned __int8 *)i, v51)+ 10) = v23;
      }
      *(_QWORD *)&v37 = &v39;
      std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node((void **)v42[0]);
      v24 = __p[0];
      __p[0] = 0;
      if (v24)
        operator delete(v24);
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node((void **)v45[0]);
      v25 = v44[0];
      v44[0] = 0;
      if (v25)
        operator delete(v25);
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node((void **)v49);
      v26 = v47;
      v47 = 0;
      if (v26)
        operator delete(v26);
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__move_assign((uint64_t)&(*a5)[40 * v17], (uint64_t *)v32);
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node((void **)v33[0]);
      v27 = v32[0];
      v32[0] = 0;
      if (v27)
        operator delete(v27);
      ++v17;
    }
    while (*((_QWORD *)a2 + 9) > v17);
  }
  v28 = v36;
  if (v36)
  {
    v29 = (unint64_t *)&v36->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1A13C2788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  uint64_t v31;

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v31 - 152);
  std::vector<std::unordered_map<std::string,float>>::__destroy_vector::operator()[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageClassifierEspresso::getDescriptorProcessor@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(this + 120);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

uint64_t vision::mod::ImageClassifierEspresso::setDescriptorProcessor(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *exception;

  v3 = *(_QWORD **)(a1 + 120);
  if (!v3)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3965;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  std::shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>::operator=[abi:ne180100](v3, *a2, a2[1]);
  return a1;
}

uint64_t vision::mod::ImageClassifierEspresso::wipeLayersMemory(vision::mod::ImageClassifierEspresso *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *((_QWORD *)this + 15);
  v3 = *(void **)(v2 + 16);
  if (v3)
  {
    objc_msgSend(v3, "wipe_layers_blobs");
    v2 = *((_QWORD *)this + 15);
  }
  if (*(_QWORD *)v2)
  {
    if (v4)
    {
      v5 = *(std::__shared_weak_count **)(v2 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(void *))(*(_QWORD *)v4 + 112))(v4);
      if (v5)
      {
        v8 = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  return 3968;
}

void sub_1A13C2968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageClassifierEspresso::setPriority(vision::mod::ImageClassifierEspresso *this)
{
  void *v1;
  void *v2;
  int updated;
  uint64_t *v4;

  v1 = *(void **)(*((_QWORD *)this + 15) + 16);
  if (v1)
  {
    objc_msgSend(v1, "ctx");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    updated = espresso_vision_util_update_metal_priority();

    v4 = &CVML_status_invalidParameter;
    if (updated)
      v4 = &CVML_status_ok;
  }
  else
  {
    v4 = &CVML_status_internalError;
  }
  return (*v4 + 128) | 0xF00;
}

void sub_1A13C2A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vision::mod::ImageClassifierEspresso::classifyDescriptorHandler(vision::mod::ImageClassifierEspresso *this@<X0>, const vision::mod::ImageDescriptorBufferAbstract *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  id v11;
  unsigned __int8 *v12;

  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", *((_QWORD *)a2 + 7), (*(uint64_t (**)(const vision::mod::ImageDescriptorBufferAbstract *))(*(_QWORD *)a2 + 104))(a2), 0);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  espresso_vision_classify_descriptor_handler_nsdata();
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v6 = (int *)objc_msgSend(v5, "bytes");
  v7 = objc_msgSend(v5, "length");
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (v7 >= 4)
  {
    v8 = 0;
    v9 = v7 >> 2;
    do
    {
      v10 = *v6;
      v12 = (unsigned __int8 *)(*((_QWORD *)this + 1) + v8);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, v12, (__int128 **)&v12)+ 10) = v10;
      v8 += 24;
      ++v6;
      --v9;
    }
    while (v9);
  }

}

void sub_1A13C2B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void vision::mod::ImageClassifierEspresso::classifyImage_RGBA8888(uint64_t a1@<X8>)
{
  _QWORD *exception;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  exception = __cxa_allocate_exception(8uLL);
  *exception = 3967;
  __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
}

void sub_1A13C2B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void vision::mod::ImageClassifierEspresso::classifyImage_BGRA8888(uint64_t a1@<X8>)
{
  _QWORD *exception;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  exception = __cxa_allocate_exception(8uLL);
  *exception = 3967;
  __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
}

void sub_1A13C2BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void vision::mod::ImageClassifierEspresso::classifyImage_Planar8(uint64_t a1@<X8>)
{
  _QWORD *exception;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  exception = __cxa_allocate_exception(8uLL);
  *exception = 3967;
  __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
}

void sub_1A13C2C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  *((_DWORD *)v13 + 10) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v13 = *v25;
LABEL_41:
    *v25 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1A13C2E80(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void std::vector<std::unordered_map<std::string,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void vision::mod::ImageClassifierAbstract::ImageClassifier_filterdisallowedListedLabels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *i;
  uint64_t v6;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (*(_QWORD *)(a2 + 80) == *(_QWORD *)(a2 + 72))
  {
    if (a1 != a3)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 32);
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,float>,void *> *>>((_QWORD *)a1, *(uint64_t **)(a3 + 16));
    }
  }
  else
  {
    for (i = *(unsigned __int8 **)(a3 + 16); i; i = *(unsigned __int8 **)i)
    {
      v6 = *(_QWORD *)(a2 + 80);
      if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a2 + 72), v6, (unsigned __int8 **)i + 2) == v6)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(a1, i + 16, (uint64_t)(i + 16));
    }
  }
}

void sub_1A13C307C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,float>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  void **v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = (void **)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        *(_DWORD *)(v6 + 40) = *((_DWORD *)v2 + 10);
        v8 = *(void ***)v6;
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (uint64_t *)*v2;
        if (v8)
          v9 = v2 == 0;
        else
          v9 = 1;
        v6 = (uint64_t)v8;
      }
      while (!v9);
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v10 = (char *)operator new(0x30uLL);
    v11 = (uint64_t)v10;
    v12 = v10 + 16;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v10 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      v13 = *((_OWORD *)v2 + 1);
      *((_QWORD *)v10 + 4) = v2[4];
      *v12 = v13;
    }
    *(_DWORD *)(v11 + 40) = *((_DWORD *)v2 + 10);
    *(_QWORD *)(v11 + 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v12);
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_insert_multi((uint64_t)a1, v11);
  }
}

void sub_1A13C31A4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<std::string,float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::string,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::string,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = (int8x8_t)v10;
    else
      prime = (int8x8_t)v9;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_99;
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_60;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = operator new(8 * *(_QWORD *)&prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v41 = v4;
      v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (*(_QWORD *)&prime != v14);
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        v16 = v15[1];
        v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        v18 = v17.u32[0];
        v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&prime)
            v16 %= *(_QWORD *)&prime;
        }
        else
        {
          v16 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 16;
        v22 = *v15;
        if (*v15)
        {
          v42 = v17.u32[0];
          do
          {
            v23 = *(_QWORD *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            if (v23 == v16)
            {
              v15 = (uint64_t *)v22;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              v24 = *(_QWORD **)v22;
              if (*(_QWORD *)v22)
              {
                v25 = (_QWORD *)v22;
                while (1)
                {
                  v26 = v24;
                  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break;
                  v24 = (_QWORD *)*v26;
                  v25 = v26;
                  if (!*v26)
                    goto LABEL_47;
                }
                v24 = v26;
                v26 = v25;
LABEL_47:
                v18 = v42;
              }
              else
              {
                v26 = (_QWORD *)v22;
              }
              *v15 = (uint64_t)v24;
              *v26 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v15;
              v15 = (uint64_t *)v22;
              v16 = v23;
            }
            v22 = *v15;
          }
          while (*v15);
        }
        v5 = (unint64_t)prime;
        v2 = v40;
        v4 = v41;
      }
      else
      {
        v5 = (unint64_t)prime;
        v4 = v41;
      }
    }
    else
    {
      v27 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v27)
        operator delete(v27);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    v30 = v43;
    if (v5 <= v43)
      v30 = v43 % v5;
  }
  else
  {
    v30 = (v5 - 1) & v43;
  }
  v31 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v30);
  if (v31)
  {
    v32 = *(unsigned __int8 **)v31;
    if (*(_QWORD *)v31)
    {
      v33 = 0;
      do
      {
        v34 = v32;
        v35 = *((_QWORD *)v32 + 1);
        if (v29 > 1)
        {
          v36 = v35;
          if (v35 >= v5)
            v36 = v35 % v5;
        }
        else
        {
          v36 = v35 & (v5 - 1);
        }
        if (v36 != v30)
          break;
        v37 = v35 == v43 && std::equal_to<std::string>::operator()[abi:ne180100](v34 + 16, v4);
        if ((v33 & !v37 & 1) != 0)
          break;
        v33 |= v37;
        v32 = *(unsigned __int8 **)v34;
        v31 = v34;
      }
      while (*(_QWORD *)v34);
    }
  }
  v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5)
      v38 %= v5;
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a1 + 16;
    if (!*v2)
      goto LABEL_95;
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  *v2 = *(_QWORD *)v31;
  *(_QWORD *)v31 = v2;
  if (*v2)
  {
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38)
      goto LABEL_94;
  }
LABEL_95:
  ++*(_QWORD *)(a1 + 24);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  std::string *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v8;
  v16 = (std::string *)(v15 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v15 + 10) = *(_DWORD *)(a3 + 24);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)v15 = *v24;
LABEL_41:
    *v24 = v15;
    goto LABEL_42;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1A13C3980(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_map<std::string,float>>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

void vision::mod::ImageClassifierAbstract::~ImageClassifierAbstract(vision::mod::ImageClassifierAbstract *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_1E453A668;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 32);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t vision::mod::ImageClassifierAbstract::wipeLayersMemory(vision::mod::ImageClassifierAbstract *this)
{
  return 3967;
}

uint64_t vision::mod::ImageClassifierAbstract::setPriority(vision::mod::ImageClassifierAbstract *this)
{
  return 3967;
}

void vision::mod::ImageClassifierAbstract::initLabels(vision::mod::ImageClassifierAbstract *this, const char *a2)
{
  unint64_t v2;
  const std::string *begin;
  std::vector<std::string>::pointer end;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  float v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  std::string::size_type v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  std::vector<std::string>::pointer v28;
  __int128 v29;
  char *v30;
  char *v31;
  std::vector<std::string>::pointer v32;
  __int128 v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  unint64_t v45;
  char *v46;
  std::string *v47;
  char v48;
  float v49;
  float v50;
  _BOOL8 v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  char *v61;
  std::string v62;
  void *__p;
  __int128 v64;
  float v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  std::vector<std::string> v71;

  v59 = 0;
  v60 = 0;
  v61 = 0;
  ImageClassifier_readLinesFromFile(&v71, a2);
  begin = v71.__begin_;
  end = v71.__end_;
  if (v71.__begin_ != v71.__end_)
  {
    while (1)
    {
      ImageClassifier_splitAndTrim((uint64_t)&v69, begin);
      v6 = (uint64_t)v69 + 24;
      if ((__int128 *)((char *)v69 + 24) == v70)
      {
        v7 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
      }
      else
      {
        v7 = 0;
        do
        {
          if (!ImageClassifier_isBooleanFlag(v6))
            break;
          ++v7;
          v6 += 24;
        }
        while ((__int128 *)v6 != v70);
        v66 = 0;
        v67 = 0;
        v68 = 0;
        if (v7)
        {
          v8 = 24;
          v2 = v7;
          do
          {
            v62.__r_.__value_.__s.__data_[0] = ImageClassifier_stringToBool((uint64_t)v69 + v8);
            std::vector<BOOL>::push_back((uint64_t *)&v66, &v62);
            v8 += 24;
            --v2;
          }
          while (v2);
        }
      }
      v9 = v69;
      v10 = 0.1;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)v69) >> 3) >= v7 + 2)
      {
        v10 = std::stof((const std::string *)v69 + v7 + 1, 0);
        v9 = v69;
      }
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v11 = *v9;
        v62.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v11;
      }
      std::vector<BOOL>::vector(&__p, (uint64_t)&v66);
      v65 = v10;
      v12 = v60;
      if (v60 >= v61)
        break;
      v13 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
      *((_QWORD *)v60 + 2) = *((_QWORD *)&v62.__r_.__value_.__l + 2);
      *(_OWORD *)v12 = v13;
      memset(&v62, 0, sizeof(v62));
      *((_QWORD *)v12 + 3) = __p;
      *((_OWORD *)v12 + 2) = v64;
      __p = 0;
      v64 = 0uLL;
      *((float *)v12 + 12) = v65;
      v60 = v12 + 56;
LABEL_38:
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (v66)
        operator delete(v66);
      v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
      if (++begin == end)
        goto LABEL_46;
    }
    v14 = v59;
    v15 = 0x6DB6DB6DB6DB6DB7 * ((v60 - v59) >> 3) + 1;
    if (v15 > 0x492492492492492)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    if (0xDB6DB6DB6DB6DB6ELL * ((v61 - v59) >> 3) > v15)
      v15 = 0xDB6DB6DB6DB6DB6ELL * ((v61 - v59) >> 3);
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v61 - v59) >> 3)) >= 0x249249249249249)
      v16 = 0x492492492492492;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)operator new(56 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[8 * ((v60 - v59) >> 3)];
    *(_OWORD *)v18 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
    v19 = v62.__r_.__value_.__r.__words[2];
    v20 = __p;
    memset(&v62, 0, sizeof(v62));
    *((_QWORD *)v18 + 2) = v19;
    *((_QWORD *)v18 + 3) = v20;
    *((_OWORD *)v18 + 2) = v64;
    v64 = 0uLL;
    __p = 0;
    v2 = (unint64_t)(v18 + 56);
    *((float *)v18 + 12) = v10;
    if (v12 == v14)
    {
      v59 = v18;
      v60 = v18 + 56;
      v61 = &v17[56 * v16];
      if (!v12)
      {
LABEL_36:
        v60 = (char *)v2;
        if (__p)
          operator delete(__p);
        goto LABEL_38;
      }
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = &v18[v21];
        v23 = &v12[v21];
        v24 = *(_OWORD *)&v12[v21 - 56];
        *((_QWORD *)v22 - 5) = *(_QWORD *)&v12[v21 - 40];
        *(_OWORD *)(v22 - 56) = v24;
        *((_QWORD *)v23 - 6) = 0;
        *((_QWORD *)v23 - 5) = 0;
        *((_QWORD *)v23 - 7) = 0;
        *((_QWORD *)v22 - 4) = *(_QWORD *)&v12[v21 - 32];
        *((_QWORD *)v22 - 3) = *(_QWORD *)&v12[v21 - 24];
        *((_QWORD *)v22 - 2) = *(_QWORD *)&v12[v21 - 16];
        *((_QWORD *)v23 - 4) = 0;
        *((_QWORD *)v23 - 3) = 0;
        *((_QWORD *)v23 - 2) = 0;
        *((_DWORD *)v22 - 2) = *(_DWORD *)&v12[v21 - 8];
        v21 -= 56;
      }
      while (&v12[v21] != v14);
      v25 = v59;
      v12 = v60;
      v59 = &v18[v21];
      v60 = v18 + 56;
      v61 = &v17[56 * v16];
      if (v12 != v25)
      {
        do
        {
          v12 -= 56;
          std::__destroy_at[abi:ne180100]<std::tuple<std::string,std::vector<BOOL>,float>,0>((uint64_t)v12);
        }
        while (v12 != v25);
        v12 = v25;
      }
      if (!v12)
        goto LABEL_36;
    }
    operator delete(v12);
    goto LABEL_36;
  }
LABEL_46:
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  memset(&v62, 0, sizeof(v62));
  v26 = v59;
  v27 = v60;
  if (v59 != v60)
  {
    v28 = 0;
    do
    {
      if ((unint64_t)v28 >= v62.__r_.__value_.__r.__words[2])
      {
        v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)&v62, (__int128 *)v26);
      }
      else
      {
        if (v26[23] < 0)
        {
          std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
        }
        else
        {
          v29 = *(_OWORD *)v26;
          v28->__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
        }
        ++v28;
      }
      v62.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
      v26 += 56;
    }
    while (v26 != v27);
  }
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 8));
  *(std::string *)((char *)this + 8) = v62;
  memset(&v62, 0, sizeof(v62));
  v71.__begin_ = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  memset(&v62, 0, sizeof(v62));
  v30 = v59;
  v31 = v60;
  if (v59 != v60)
  {
    v32 = 0;
    do
    {
      if (*((_QWORD *)v30 + 4) && (**((_BYTE **)v30 + 3) & 1) == 0)
      {
        if ((unint64_t)v32 >= v62.__r_.__value_.__r.__words[2])
        {
          v32 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)&v62, (__int128 *)v30);
        }
        else
        {
          if (v30[23] < 0)
          {
            std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
          }
          else
          {
            v33 = *(_OWORD *)v30;
            v32->__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
            *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
          }
          ++v32;
        }
        v62.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
      }
      v30 += 56;
    }
    while (v30 != v31);
  }
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)this + 3);
  *((std::string *)this + 3) = v62;
  memset(&v62, 0, sizeof(v62));
  v71.__begin_ = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  v34 = (uint64_t *)((char *)this + 32);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear((uint64_t)this + 32);
  v35 = v59;
  v36 = v60;
  if (v59 == v60)
    goto LABEL_118;
  v58 = (_QWORD *)((char *)this + 48);
  do
  {
    if (v35[23] < 0)
      std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
    else
      v62 = *(std::string *)v35;
    v37 = *((_DWORD *)v35 + 12);
    LODWORD(__p) = v37;
    v38 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v62);
    v39 = v38;
    v40 = *((_QWORD *)this + 5);
    if (!v40)
      goto LABEL_88;
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
    v41.i16[0] = vaddlv_u8(v41);
    v42 = v41.u32[0];
    if (v41.u32[0] > 1uLL)
    {
      v2 = v38;
      if (v38 >= v40)
        v2 = v38 % v40;
    }
    else
    {
      v2 = (v40 - 1) & v38;
    }
    v43 = *(unsigned __int8 ***)(*v34 + 8 * v2);
    if (!v43 || (v44 = *v43) == 0)
    {
LABEL_88:
      v46 = (char *)operator new(0x30uLL);
      *(_QWORD *)v46 = 0;
      *((_QWORD *)v46 + 1) = v39;
      v47 = (std::string *)(v46 + 16);
      v48 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v47, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
        *((_QWORD *)v46 + 4) = *((_QWORD *)&v62.__r_.__value_.__l + 2);
      }
      *((_DWORD *)v46 + 10) = v37;
      v49 = (float)(unint64_t)(*((_QWORD *)this + 7) + 1);
      v50 = *((float *)this + 16);
      if (!v40 || (float)(v50 * (float)v40) < v49)
      {
        v51 = (v40 & (v40 - 1)) != 0;
        if (v40 < 3)
          v51 = 1;
        v52 = v51 | (2 * v40);
        v53 = vcvtps_u32_f32(v49 / v50);
        if (v52 <= v53)
          v54 = v53;
        else
          v54 = v52;
        std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>((uint64_t)this + 32, v54);
        v40 = *((_QWORD *)this + 5);
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v39 >= v40)
            v2 = v39 % v40;
          else
            v2 = v39;
        }
        else
        {
          v2 = (v40 - 1) & v39;
        }
      }
      v55 = *v34;
      v56 = *(_QWORD **)(*v34 + 8 * v2);
      if (v56)
      {
        *(_QWORD *)v46 = *v56;
      }
      else
      {
        *(_QWORD *)v46 = *v58;
        *v58 = v46;
        *(_QWORD *)(v55 + 8 * v2) = v58;
        if (!*(_QWORD *)v46)
          goto LABEL_112;
        v57 = *(_QWORD *)(*(_QWORD *)v46 + 8);
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v57 >= v40)
            v57 %= v40;
        }
        else
        {
          v57 &= v40 - 1;
        }
        v56 = (_QWORD *)(*v34 + 8 * v57);
      }
      *v56 = v46;
LABEL_112:
      ++*((_QWORD *)this + 7);
      if (v48 < 0)
        goto LABEL_113;
      goto LABEL_114;
    }
    while (1)
    {
      v45 = *((_QWORD *)v44 + 1);
      if (v45 == v39)
        break;
      if (v42 > 1)
      {
        if (v45 >= v40)
          v45 %= v40;
      }
      else
      {
        v45 &= v40 - 1;
      }
      if (v45 != v2)
        goto LABEL_88;
LABEL_87:
      v44 = *(unsigned __int8 **)v44;
      if (!v44)
        goto LABEL_88;
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v44 + 16, (unsigned __int8 *)&v62))
      goto LABEL_87;
    if ((*((_BYTE *)&v62.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_113:
      operator delete(v62.__r_.__value_.__l.__data_);
LABEL_114:
    v35 += 56;
  }
  while (v35 != v36);
LABEL_118:
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<std::tuple<std::string,std::vector<BOOL>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
}

void sub_1A13C4204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  a13 = &a10;
  std::vector<std::tuple<std::string,std::vector<BOOL>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void vision::mod::ImageDescriptorProcessorEspresso::Options::~Options(id *this)
{

}

void std::__shared_ptr_emplace<vision::mod::ImageClassifierEspresso::private_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ImageClassifierEspresso::private_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<vision::mod::ImageClassifierEspresso::private_t>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }

  return std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 24);
}

void std::vector<std::tuple<std::string,std::vector<BOOL>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<std::tuple<std::string,std::vector<BOOL>,float>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::tuple<std::string,std::vector<BOOL>,float>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1A13C4504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13C4670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C489C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13C49E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13C4AAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13C4BC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C4C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13C4D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13C4FC4(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_begin_catch(a1);
  JUMPOUT(0x1A13C4F4CLL);
}

void sub_1A13C53B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A13C6064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13C612C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void sub_1A13C62E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13C641C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C6548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A13C66A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13C67FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C6920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C6A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A13C6BB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13C6D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C6E28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C6F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A13C70DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13C7230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C72E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13C73BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13C748C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13C755C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13C7630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13C7700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13C77EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13C78D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13C7958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13C79FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C7B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C7C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C7D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13C7E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id _stringOrDataCodingClassesSet(void)
{
  if (_stringOrDataCodingClassesSet(void)::onceToken != -1)
    dispatch_once(&_stringOrDataCodingClassesSet(void)::onceToken, &__block_literal_global_129);
  return (id)_stringOrDataCodingClassesSet(void)::classesSet;
}

id missingRequiredCodingKeyError(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Missing the required key '%@'"), v1);
  +[VNError errorForDataUnavailableWithLocalizedDescription:](VNError, "errorForDataUnavailableWithLocalizedDescription:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1A13C7F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id unknownDataForCodingKeyError(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown data encoded for '%@'"), v1);
  +[VNError errorForOperationFailedErrorWithLocalizedDescription:](VNError, "errorForOperationFailedErrorWithLocalizedDescription:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1A13C801C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL29_stringOrDataCodingClassesSetv_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v1 = objc_opt_class();
  v2 = objc_msgSend(v0, "initWithObjects:", v1, objc_opt_class(), 0);
  v3 = (void *)_stringOrDataCodingClassesSet(void)::classesSet;
  _stringOrDataCodingClassesSet(void)::classesSet = v2;

}

BOOL _scanNFloats(NSScanner *a1, unint64_t a2, float *a3)
{
  NSScanner *v5;
  BOOL v6;
  uint64_t v7;

  v5 = a1;
  v6 = 0;
  v7 = 0;
  do
  {
    if (!-[NSScanner scanFloat:](v5, "scanFloat:", a3))
      break;
    v6 = ++v7 >= a2;
    ++a3;
  }
  while (a2 != v7);

  return v6;
}

void sub_1A13C8144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

__n128 __Block_byref_object_copy__2931(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1A13C83D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AnnealContours(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v5;
  void *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _DWORD v12[2];
  uint64_t v13;
  void *v14;

  v5 = *(unsigned int *)(a1 + 4);
  v6 = malloc_type_malloc(4 * a3, 0x100004052888210uLL);
  v7 = a2[19];
  v12[0] = a2[2];
  v12[1] = v7;
  v8 = a2[4];
  v14 = v6;
  v13 = v8;
  if ((int)v5 >= 1)
  {
    v9 = 0;
    v10 = 2 * v5;
    do
    {
      v11 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 40 * *(__int16 *)(*(_QWORD *)(a1 + 8) + v9));
      if (*v11)
        AnnealContour((uint64_t)v11, (uint64_t)v12);
      v9 += 2;
    }
    while (v10 != v9);
  }
  if (v6)
    free(v6);
}

uint64_t AnnealContour(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  BOOL v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  float v25;
  float v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;

  result = 0;
  v4 = *(unsigned __int8 *)(a1 + 8);
  v30 = 0;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v25 = 1000000.0;
  v26 = 1000000.0;
  if (v4)
    v5 = 2;
  else
    v5 = 1;
  if (*(_DWORD *)(a1 + 12) <= v5)
    return result;
  v24 = 0;
  result = 0;
  do
  {
    v23 = result;
    if (v4)
    {
      v8 = *(_QWORD *)(a1 + 24);
      v7 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)v7;
      if (!*(_QWORD *)v7)
        return result;
    }
    v9 = 0;
    v10 = 0;
    v11 = *(uint64_t **)v8;
    v12 = 1;
    do
    {
      if (v7 == v8)
        __assert_rtn("AnnealContour", "ContourUtilities.c", 229, "sPtrPrev != sPtr");
      if ((uint64_t *)v8 == v11)
        __assert_rtn("AnnealContour", "ContourUtilities.c", 230, "sPtr != sPtrNext");
      v13 = annealTest(v7, v8, a2, (float *)&v29, &v26);
      v14 = v13;
      if (v11)
      {
        v15 = annealTest(v8, (uint64_t)v11, a2, (float *)&v27, &v25);
        if (v14)
        {
          if (v15)
          {
            ++v9;
            if (v26 < v25)
            {
              v16 = (uint64_t *)annealSegments(a1, v7, (uint64_t *)v8);
              *(_QWORD *)(v7 + 20) = v29;
              *(_DWORD *)(v7 + 28) = v30;
              *(float *)(v7 + 16) = v26;
              if (!v16)
                goto LABEL_17;
              goto LABEL_20;
            }
            v7 = annealSegments(a1, v8, v11);
            *(_QWORD *)(v8 + 20) = v27;
            *(_DWORD *)(v8 + 28) = v28;
            *(float *)(v8 + 16) = v25;
            if (!v7)
              goto LABEL_32;
LABEL_24:
            v8 = *(_QWORD *)v7;
            if (*(_QWORD *)v7)
              goto LABEL_42;
          }
          else
          {
LABEL_19:
            v16 = (uint64_t *)annealSegments(a1, v7, (uint64_t *)v8);
            *(_QWORD *)(v7 + 20) = v29;
            *(_DWORD *)(v7 + 28) = v30;
            *(float *)(v7 + 16) = v26;
            ++v9;
            if (v16)
            {
LABEL_20:
              v8 = *v16;
              if (*v16)
                v11 = *(uint64_t **)v8;
              else
                v11 = 0;
              v7 = (uint64_t)v16;
              goto LABEL_43;
            }
LABEL_17:
            v7 = 0;
LABEL_32:
            v8 = 0;
          }
        }
        else
        {
          if (v15)
          {
            v7 = annealSegments(a1, v8, v11);
            *(_QWORD *)(v8 + 20) = v27;
            *(_DWORD *)(v8 + 28) = v28;
            *(float *)(v8 + 16) = v25;
            ++v9;
            if (!v7)
              goto LABEL_32;
            goto LABEL_24;
          }
          v19 = v10 == 0;
          if (!v10)
            v10 = v8;
          v20 = v24;
          if (v19)
            v20 = (_QWORD *)v7;
          v24 = v20;
          v8 = *v11;
          if (*v11)
          {
            v7 = (uint64_t)v11;
LABEL_42:
            v11 = *(uint64_t **)v8;
            goto LABEL_43;
          }
          v7 = (uint64_t)v11;
        }
        v11 = 0;
        goto LABEL_43;
      }
      if (v13)
        goto LABEL_19;
      v11 = 0;
      v17 = v10 == 0;
      if (!v10)
        v10 = v8;
      v18 = v24;
      if (v17)
        v18 = (_QWORD *)v7;
      v24 = v18;
      v7 = 0;
      v8 = 0;
LABEL_43:
      ++v12;
      v21 = *(_QWORD **)(a1 + 32);
      if (v4 && (_QWORD *)v8 == v21 && *(int *)(a1 + 12) >= 3)
      {
        v11 = *(uint64_t **)(a1 + 24);
        v12 = -1;
      }
    }
    while (v8 && v12);
    result = (v9 + v23);
  }
  while (v9);
  if (v4)
  {
    v22 = *(_QWORD *)(a1 + 24);
    if (v10 != v22)
    {
      if (!v10)
        __assert_rtn("AnnealContour", "ContourUtilities.c", 332, "rPtr != NULL");
      *v21 = v22;
      *v24 = 0;
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v24;
    }
  }
  return result;
}

uint64_t annealTest(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  __int16 *v5;
  int v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v17;
  __int16 *v18;
  int v19;
  int v20;
  __int16 *v21;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  char *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  _BOOL4 v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  __int16 *v43;
  unint64_t v44;
  float v45;
  float v47;
  float v48;
  float v49;
  float v50;

  v5 = *(__int16 **)(a2 + 40);
  v6 = *v5;
  v7 = v5[1];
  v8 = *(float *)(a1 + 20);
  v9 = *(float *)(a1 + 24);
  v10 = *(float *)(a2 + 20);
  v11 = *(float *)(a2 + 24);
  v12 = fabsf(*(float *)(a1 + 28) + (float)((float)(v9 * (float)v7) + (float)(v8 * (float)v6)));
  v13 = fabsf(*(float *)(a2 + 28) + (float)((float)(v11 * (float)v7) + (float)(v10 * (float)v6)));
  if (v12 <= v13)
    v12 = v13;
  v14 = *(float *)a3 * *(float *)(a3 + 8);
  if (v12 > v14)
    return 0;
  v17 = *(int *)(a2 + 12);
  v18 = *(__int16 **)(a1 + 40);
  v19 = *v18;
  v20 = v18[1];
  v21 = &v5[2 * (int)v17 - 2];
  v22 = *v21;
  v23 = v21[1];
  v24 = (float)(v19 - v6);
  v25 = (float)(v20 - v7);
  v26 = (float)(v22 - v6);
  v27 = (float)(v23 - v7);
  if ((__PAIR64__((float)((float)(v9 * v24) - (float)(v8 * v25)) > 0.0, (float)(v9 * v24) - (float)(v8 * v25))
      - COERCE_UNSIGNED_INT(0.0)) >> 32 != (__PAIR64__((float)((float)(v9 * v26) - (float)(v8 * v27)) < 0.0, 0.0)
                                          - COERCE_UNSIGNED_INT((float)(v9 * v26) - (float)(v8 * v27))) >> 32
    || (__PAIR64__((float)((float)(v11 * v26) - (float)(v10 * v27)) > 0.0, (float)(v11 * v26) - (float)(v10 * v27))
      - COERCE_UNSIGNED_INT(0.0)) >> 32 != (__PAIR64__((float)((float)(v11 * v24) - (float)(v10 * v25)) < 0.0, 0.0)
                                          - COERCE_UNSIGNED_INT((float)(v11 * v24) - (float)(v10 * v25))) >> 32)
  {
    return 0;
  }
  v31 = *(char **)(a3 + 16);
  v32 = *(_DWORD *)(a1 + 12);
  v33 = (v17 - 1 + v32);
  v34 = v22 - v19;
  v35 = v23 - v20;
  if (v35 >= 0)
    v36 = v35;
  else
    v36 = -v35;
  if (v34 >= 0)
    v37 = v34;
  else
    v37 = -v34;
  v38 = v36 > v37;
  v39 = v36 > v37;
  if (v38)
    v40 = v35;
  else
    v40 = v34;
  if (!v38)
    v34 = v35;
  v41 = v34 & 0x10000 | v39 | (v40 >> 31 << 8);
  v42 = v32 - 1;
  memcpy(v31, v18, 4 * (v32 - 1));
  memcpy(&v31[4 * v42], *(const void **)(a2 + 40), 4 * v17);
  v43 = *(__int16 **)(a3 + 16);
  applyCoordTransform(v41, (uint64_t)v43, v33);
  v44 = straightLineLSQ(v43, v33);
  if (v14 < v45
    && fabsf((float)(*(float *)(a1 + 24) * *(float *)(a2 + 20)) - (float)(*(float *)(a1 + 20) * *(float *)(a2 + 24))) > (float)(*(float *)(a3 + 4) * *(float *)(a3 + 8)))
  {
    return 0;
  }
  if (a5)
    *a5 = v45;
  if (a4)
  {
    v47 = Lsq2Leq(v44);
    if (v41 >= 0x10000)
    {
      v49 = -v49;
      v47 = -v47;
    }
    if ((v41 & 0x100) != 0)
    {
      v49 = -v49;
      v48 = -v48;
    }
    if ((v41 & 1) != 0)
      v50 = v47;
    else
      v50 = v48;
    if ((v41 & 1) != 0)
      v47 = v48;
    *a4 = v47;
    a4[1] = v50;
    a4[2] = v49;
  }
  return v33;
}

uint64_t annealSegments(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t result;

  if ((uint64_t *)a2 == a3)
    __assert_rtn("annealSegments", "ContourUtilities.c", 129, "sPrevPtr != sPtr");
  v6 = *(int *)(a2 + 12);
  v7 = *((int *)a3 + 3);
  v8 = v6 - 1 + v7;
  if (*(_QWORD *)(a2 + 40) + 4 * v6 - 4 != a3[5])
  {
    v9 = (char *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
    memcpy(v9, *(const void **)(a2 + 40), 4 * ((int)v6 - 1));
    memcpy(&v9[4 * v6 - 4], (const void *)a3[5], 4 * v7);
    if (!*(_WORD *)(a2 + 32))
    {
      v10 = *(void **)(a2 + 40);
      if (v10)
        free(v10);
    }
    *(_QWORD *)(a2 + 40) = v9;
    *(_WORD *)(a2 + 32) = 0;
  }
  *(_DWORD *)(a2 + 12) = v8;
  *((_BYTE *)a3 + 8) = 0;
  if (!*((_WORD *)a3 + 16))
  {
    v11 = (void *)a3[5];
    if (v11)
      free(v11);
    a3[5] = 0;
  }
  result = *a3;
  if (*(_QWORD *)a2)
    *(_QWORD *)a2 = result;
  --*(_DWORD *)(a1 + 12);
  if (*(uint64_t **)(a1 + 24) == a3)
  {
    if (!result)
      __assert_rtn("annealSegments", "ContourUtilities.c", 168, "newCurr != NULL");
    *(_QWORD *)(a1 + 24) = result;
  }
  else if (*(uint64_t **)(a1 + 32) == a3)
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  return result;
}

uint64_t createBridgeSegment(int *a1, int a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  void *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;

  v7 = allocSegments(a1, 1);
  v8 = v7;
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 32) = a2;
  if ((__int16)a4 - (__int16)a3 >= 0)
    v9 = (__int16)a4 - (__int16)a3;
  else
    v9 = (__int16)a3 - (__int16)a4;
  if ((a4 >> 16) - (a3 >> 16) >= 0)
    v10 = (a4 >> 16) - (a3 >> 16);
  else
    v10 = (a3 >> 16) - (a4 >> 16);
  if (v9 <= v10)
    v11 = v10;
  else
    v11 = v9;
  v12 = v11 + 1;
  *(_DWORD *)(v7 + 12) = v11 + 1;
  v13 = malloc_type_malloc(4 * (v11 + 1), 0x100004052888210uLL);
  *(_QWORD *)(v8 + 40) = v13;
  if (BresenhamCoords(a3, a4, (uint64_t)v13) != v12)
    __assert_rtn("createBridgeSegment", "ContourUtilities.c", 557, "mPnts == nPnts");
  if (v10 <= v9)
    v14 = (__int16)a4 - (__int16)a3;
  else
    v14 = (a4 >> 16) - (a3 >> 16);
  if (v10 <= v9)
    v15 = (a4 >> 16) - (a3 >> 16);
  else
    v15 = (__int16)a4 - (__int16)a3;
  v16 = v15 & 0x10000 | (v10 > v9) | (v14 >> 31 << 8);
  applyCoordTransform(v16, *(_QWORD *)(v8 + 40), v12);
  v17 = straightLineLSQ(*(__int16 **)(v8 + 40), v12);
  *(_DWORD *)(v8 + 16) = v18;
  *(float *)(v8 + 20) = Lsq2Leq(v17);
  *(_DWORD *)(v8 + 24) = v19;
  *(_DWORD *)(v8 + 28) = v20;
  revertSegmentCoordinateSystem(v8, v12, v16);
  return v8;
}

void calculateContourPartialAreaAndPerimeter(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  uint64_t *v7;
  int v8;
  signed __int16 *v9;
  int v10;
  int v11;
  __int16 v12;
  int v13;
  float v14;
  signed __int16 v15;
  float v16;
  __int16 v17;
  float v18;
  unsigned int v19;
  int v20;
  signed __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  uint64_t *v26;
  int v27;
  int v28;
  int v29;
  float v30;
  float *v31;
  float *v32;
  int v33;
  int v34;
  __int16 v35;
  __int16 *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  float v41;
  float v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  int v53;
  int v61;
  __int16 v62;
  int v63;
  int v64;
  __int16 v65;
  __int16 v66;

  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 12);
  v9 = (signed __int16 *)v7[5];
  v61 = v8;
  if (v8 < 2)
  {
    v31 = a3;
    v32 = a2;
    v35 = 0;
    v65 = 0;
    v24 = 0;
    v25 = 0;
    v18 = 0.0;
    v16 = 0.0;
    v33 = v9[1];
    v22 = v33;
    v34 = *v9;
    v20 = v34;
    v14 = 0.0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0.0;
    v52 = *v9;
    v53 = v9[1];
    v15 = *v9;
    v16 = 0.0;
    v17 = v9[1];
    v18 = 0.0;
    v19 = 1;
    do
    {
      v7 = (uint64_t *)*v7;
      v9 = (signed __int16 *)v7[5];
      v20 = *v9;
      v21 = *v9;
      v22 = v9[1];
      v23 = v9[1];
      v24 = v20 - v15;
      v25 = v22 - v17;
      if (v19 < 2)
      {
        v13 = (unsigned __int16)*v9;
        v12 = v9[1];
      }
      else
      {
        v63 = v13;
        v64 = v9[1];
        v26 = v7;
        v27 = v20 - v15;
        v28 = v22 - v17;
        v29 = *v9;
        v62 = v9[1];
        v30 = atan2f((float)(v25 * v11 - v24 * v10), (float)(v24 * v11 + v25 * v10));
        v23 = v62;
        v13 = v63;
        v22 = v64;
        v20 = v29;
        v25 = v28;
        v24 = v27;
        v7 = v26;
        v8 = v61;
        v14 = v14 + v30;
      }
      v18 = v18 + sqrtf((float)(v24 * v24 + v25 * v25));
      ++v19;
      v10 = v25;
      v16 = v16 + (float)(v22 * v15 - v20 * v17);
      v11 = v24;
      v17 = v23;
      v15 = v21;
    }
    while (v8 != v19);
    v31 = a3;
    v32 = a2;
    v34 = v52;
    v33 = v53;
    v65 = v12;
    v35 = v13;
  }
  v36 = &v9[2 * *((int *)v7 + 3)];
  v37 = *(v36 - 2);
  v38 = *(v36 - 1);
  v39 = v37 - v20;
  v40 = v38 - v22;
  v41 = v16 + (float)(v20 * v38 - v22 * v37);
  v42 = atan2f((float)(v40 * v24 - v39 * v25), (float)(v39 * v24 + v40 * v25));
  *v31 = v18 + sqrtf((float)(v39 * v39 + v40 * v40));
  *v32 = v41;
  *a4 = v14 + v42;
  if (v61 == 1)
    v35 = v37;
  v43 = v65;
  if (v61 == 1)
    v43 = v38;
  v66 = v43;
  v44 = v34 - v37;
  v45 = v33;
  v46 = v33 - v38;
  v47 = sqrtf((float)(v44 * v44 + v46 * v46));
  v48 = (float)(v45 * v37 - v34 * v38);
  v49 = 0.0;
  v50 = atan2f((float)(v46 * v39 - v40 * v44), (float)(v39 * v44 + v40 * v46)) + 0.0;
  v51 = v50 + atan2f((float)((v66 - v45) * v44 - (v35 - v34) * v46), (float)((v35 - v34) * v44 + (v66 - v45) * v46));
  if (*(_BYTE *)(a1 + 8))
  {
    *a3 = v47 + *a3;
    *a2 = *a2 + v48;
    *a4 = v51 + *a4;
    v48 = 0.0;
    v51 = 0.0;
  }
  else
  {
    v49 = v47;
  }
  *a6 = v49;
  *a5 = v48;
  *a7 = v51;
}

uint64_t reverseContour(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int *v10;
  unsigned int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  unsigned int v17;
  int *v18;
  int v19;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 65534;
    v6 = *(_QWORD **)(result + 24);
    do
    {
      v7 = v4;
      v4 = v6;
      v6 = (_QWORD *)*v6;
      *v4 = v7;
      v8 = *((__int16 *)v4 + 16);
      if (v8 <= 0)
      {
        v9 = *((_DWORD *)v4 + 3);
        if (v9 >= 2)
        {
          v10 = (int *)v4[5];
          v11 = v9 >> 1;
          v12 = &v10[v9 - 1];
          do
          {
            v13 = *v12;
            *v12-- = *v10;
            *v10++ = v13;
            --v11;
          }
          while (v11);
        }
      }
      else
      {
        if (*((unsigned __int16 *)v4 + 16) == (unsigned __int16)v5)
        {
          if (!v3)
            __assert_rtn("reverseContour", "ContourUtilities.c", 1753, "currCPtr != NULL");
        }
        else
        {
          v14 = *(_QWORD *)(a2 + 16);
          v3 = v14 + 40 * v8;
          v15 = *(_DWORD *)(v3 + 4);
          if (v15 >= 2)
          {
            v16 = *(int **)(v14 + 40 * v8 + 16);
            v17 = v15 >> 1;
            v18 = &v16[v15 - 1];
            do
            {
              v19 = *v18;
              *v18-- = *v16;
              *v16++ = v19;
              --v17;
            }
            while (v17);
          }
          v5 = v8;
        }
        v4[5] = *(_QWORD *)(v3 + 16)
              + 4 * (*(int *)(v3 + 4) - (*((int *)v4 + 3) + ((v4[5] - *(_QWORD *)(v3 + 16)) >> 2)));
        v8 = v5;
      }
      v5 = v8;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = v2;
  return result;
}

void MergeContours(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  uint64_t i;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  _BYTE *v26;
  void *v27;
  void *v29;
  void *v31;
  void *v33;
  _QWORD v34[9];
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v11 = *(unsigned int *)(a1 + 4);
  v12 = llroundf(*(float *)(a2 + 104));
  v13 = malloc_type_malloc(4 * v12 * v12, 0x100004052888210uLL);
  v27 = malloc_type_malloc(4 * v12 * v12, 0x100004052888210uLL);
  v14 = malloc_type_malloc(8 * v12 * v12, 0x100004000313F17uLL);
  v15 = malloc_type_malloc(4 * v12 * v12, 0x100004052888210uLL);
  v16 = malloc_type_malloc(4 * a3, 0x100004052888210uLL);
  v17 = v13;
  v18 = malloc_type_malloc(2 * v12 * v12, 0x1000040BDFB0063uLL);
  v34[0] = (unsigned __int16)v12;
  BYTE2(v34[0]) = *(_BYTE *)(a2 + 112);
  v34[1] = a5;
  v34[2] = a6;
  v34[3] = v13;
  v34[4] = v27;
  v29 = v14;
  v31 = v16;
  v34[5] = v14;
  v34[6] = v15;
  v33 = v18;
  v34[7] = v18;
  v34[8] = v16;
  v19 = *(_DWORD *)(a2 + 76);
  v20 = *(_DWORD *)(a2 + 80);
  v35 = *(_DWORD *)(a2 + 8);
  v36 = v19;
  v21 = *(_DWORD *)(a2 + 92);
  v37 = *(_DWORD *)(a2 + 88);
  v38 = v20;
  v39 = *(_DWORD *)(a2 + 108);
  v40 = v21;
  v41 = a1;
  v42 = a4;
  if ((int)v11 >= 1)
  {
    for (i = 0; i != v11; ++i)
    {
      v23 = *(_QWORD *)(a1 + 16);
      v24 = (_BYTE *)(v23 + 40 * *(__int16 *)(*(_QWORD *)(a1 + 8) + 2 * i));
      if (*v24)
      {
        v25 = 0;
        v26 = (_BYTE *)(v23 + 40 * *(__int16 *)(*(_QWORD *)(a1 + 8) + 2 * i) + 8);
        do
        {
          if (!*v26)
          {
            v25 = mergeContourEnd((uint64_t)v24, (float *)v34, 1, a7);
            if (!v25)
              v25 = mergeContourEnd((uint64_t)v24, (float *)v34, 0, a7);
          }
        }
        while (v25 > 0);
      }
    }
  }
  if (v17)
    free(v17);
  if (v29)
    free(v29);
  if (v15)
    free(v15);
  if (v31)
    free(v31);
  if (v33)
    free(v33);
  if (v27)
    free(v27);
}

uint64_t mergeContourEnd(uint64_t a1, float *a2, int a3, int a4)
{
  uint64_t v5;
  int v6;
  __int16 *v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  int v11;
  signed int v12;
  __int16 v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  int v41;
  __int16 *v42;
  __int16 *v43;
  int v44;
  float v45;
  int v46;
  uint64_t v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  int v54;
  float v55;
  int v56;
  __int16 *v57;
  int v58;
  int v59;
  int v60;
  float v61;
  __int16 *v62;
  __int16 *v63;
  __int16 *v64;
  __int16 *v65;
  float v66;
  float v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  float v76;
  float v77;
  float v78;
  int v79;
  int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v89;
  float v90;
  _WORD *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  vDSP_Length v96;
  uint64_t v97;
  vDSP_Length *v98;
  uint64_t v99;
  float v100;
  float v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int16 *v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t **v112;
  uint64_t v113;
  int *v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  int v132;
  float v133;
  _BOOL4 v134;
  _BOOL4 v135;
  float v136;
  _BOOL4 v137;
  _BOOL4 v138;
  float v139;
  _BOOL4 v140;
  _BOOL4 v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  char v145;
  BOOL v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t result;
  int v155;
  uint64_t BridgeSegment;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  __int16 *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *i;
  int v167;
  int v168;
  int v170;
  float v171;
  int v172;
  int v173;
  float v174;
  uint64_t v175;
  float v176;
  int v177;
  float *v178;
  float v179;
  int v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  __int16 v187;
  uint64_t v188;
  const float *v189;
  vDSP_Length *v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  float v197;
  float v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  float *v208;
  uint64_t v209;
  int v210;
  int v211;
  uint64_t v212;
  int v213;
  __int16 v214;
  int v215;
  unint64_t v216;
  unint64_t v217;
  float v219;
  float v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  float v225[4];

  v5 = *(_QWORD *)(a1 + 24);
  v175 = a1 + 24;
  v6 = *(__int16 *)(v5 + 34);
  if (a3)
  {
    v7 = *(__int16 **)(v5 + 40);
    v8 = (unsigned __int16 *)&v7[2 * *(int *)(v5 + 12) - 2];
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v8 = *(unsigned __int16 **)(v5 + 40);
    v7 = (__int16 *)&v8[2 * *(int *)(v5 + 12) - 2];
  }
  v176 = a2[18];
  v174 = a2[19];
  v171 = a2[21];
  v9 = (unsigned __int16)*v7;
  v10 = v7[1];
  v11 = (__int16)v8[1];
  v177 = (__int16)*v8;
  v12 = vcvtms_s32_f32(sqrtf((float)((v10 - v11) * (v10 - v11) + ((__int16)v9 - v177) * ((__int16)v9 - v177))));
  v13 = v12 - 1;
  if (*(__int16 *)a2 < v12)
    v13 = *(_WORD *)a2;
  v14 = (_QWORD *)*((_QWORD *)a2 + 2);
  v15 = v14[2];
  if (v15 - 1 >= (unint64_t)(v13 + (__int16)v9))
    v16 = v13 + (__int16)v9;
  else
    v16 = v15 - 1;
  v17 = v14[1] - 1;
  if (v17 >= v10 + v13)
    v17 = v10 + v13;
  v207 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 16);
  v205 = v207 + 40 * v6 + 24;
  v206 = *((_QWORD *)a2 + 7);
  v18 = *(unsigned __int16 **)(*(_QWORD *)v205 + 40);
  v194 = v207 + 40 * v6;
  v193 = v194 + 32;
  v19 = *(_QWORD *)(*(_QWORD *)v193 + 40) + 4 * *(int *)(*(_QWORD *)v193 + 12);
  v20 = *(unsigned __int16 *)(v19 - 4);
  v21 = *(unsigned __int16 *)(v19 - 2);
  if (v9 == *v18 && v18[1] == (unsigned __int16)v10)
  {
    v192 = 1;
  }
  else
  {
    if (v9 != v20 || v21 != (unsigned __int16)v10)
      __assert_rtn("mergeEndpointSearch4", "ContourUtilities.c", 1265, "code1 != -1");
    v192 = 0;
  }
  v22 = (v17 << 48) | ((unint64_t)((v10 - v13) & ~((v10 - v13) >> 31)) << 32);
  v23 = (__int16)((v10 - v13) & ~(unsigned __int16)((v10 - v13) >> 31));
  v24 = HIDWORD(v22);
  if (v23 >= SHIDWORD(v22) >> 16)
    return 0;
  v178 = (float *)v5;
  v25 = 0;
  v172 = (unsigned __int16)v6;
  v173 = v11;
  v168 = (unsigned __int16)v6;
  v26 = ((__int16)v9 - v13) & ~(((__int16)v9 - v13) >> 31);
  v195 = *((_QWORD *)a2 + 4);
  v188 = *((_QWORD *)a2 + 6);
  v189 = (const float *)*((_QWORD *)a2 + 3);
  v190 = (vDSP_Length *)*((_QWORD *)a2 + 5);
  v179 = a2[22];
  v27 = ((__int16)v26 - (__int16)v9);
  v185 = (v26 | (v16 << 16)) >> 16;
  v186 = (__int16)v26;
  v28 = v185 - (__int16)v9;
  v184 = ((int)v24 >> 16) - v10;
  v29 = v23 - v10;
  v167 = v9;
  v181 = ((__int16)v26 + v9 - (__int16)v9) << 16;
  v182 = v10;
  v170 = (__int16)v9;
  v183 = 2 * (int)v15;
  v30 = 1.0;
  v31 = *v14 + 2 * v23 * (int)v15 + 2 * (__int16)v26;
  v187 = (v9 - v13) & ~(unsigned __int16)(((__int16)v9 - v13) >> 31);
  v208 = a2;
  v204 = v27;
  v203 = v28;
  do
  {
    if (v186 < v185)
    {
      v32 = 0;
      v214 = v182 + v29;
      v191 = v29 * v29;
      v33 = v181;
      v210 = v29;
      v209 = v31;
      do
      {
        v34 = *(__int16 *)(v31 + 2 * v32);
        v35 = a4;
        if (v34 > 0)
          v35 = 1;
        if (!(((_DWORD)v27 + (_DWORD)v32) | v29))
          goto LABEL_61;
        if (!*(_WORD *)(v31 + 2 * v32) || v35 == 0)
          goto LABEL_61;
        if (v34 < 0)
          v34 = -v34;
        *(_WORD *)(v206 + 2 * (int)v25) = v34;
        v37 = v207 + 40 * (__int16)v34;
        v39 = *(_QWORD *)(v37 + 24);
        v38 = *(_QWORD *)(v37 + 32);
        v40 = *(__int16 **)(v39 + 40);
        v41 = *v40;
        v42 = *(__int16 **)(v38 + 40);
        v43 = &v42[2 * *(int *)(v38 + 12)];
        v216 = v27 + v32;
        v217 = v25;
        v213 = *(v43 - 2);
        v211 = *(v43 - 1);
        if (v33 >> 16 == v41 && v40[1] == v214)
        {
          v44 = 1;
        }
        else
        {
          if (v33 >> 16 != *(v43 - 2) || v214 != *(v43 - 1))
            __assert_rtn("mergeEndpointSearch4", "ContourUtilities.c", 1316, "code2 != -1");
          v44 = 0;
        }
        v224 = 0;
        *(_QWORD *)v225 = 0;
        v222 = 0;
        v223 = 0;
        v221 = 0;
        v220 = 0.0;
        v45 = a2[18];
        v46 = *(unsigned __int16 *)(v39 + 34);
        v47 = *(_QWORD *)v205;
        v48 = *(unsigned __int16 *)(*(_QWORD *)v205 + 34);
        calculateContourPartialAreaAndPerimeter(v37, &v225[1], (float *)&v223 + 1, (float *)&v221 + 1, (float *)&v224 + 1, (float *)&v222 + 1, &v220);
        v49 = *((float *)&v223 + 1);
        v50 = v225[1];
        v51 = *((float *)&v221 + 1);
        v52 = *((float *)&v223 + 1) + *((float *)&v222 + 1);
        v53 = v225[1] + *((float *)&v224 + 1);
        if (v46 == v48)
        {
          a2 = v208;
          v31 = v209;
          v54 = v216;
          v25 = v217;
          v27 = v204;
          v28 = v203;
          v29 = v210;
          if (v53 < (float)(v45 * v52) || roundf(fabsf(*((float *)&v221 + 1) + v220) / 6.2832) != v30)
            goto LABEL_61;
          v55 = 1000.0;
        }
        else
        {
          v56 = v40[1];
          v57 = &v40[2 * *(int *)(v39 + 12)];
          v58 = *(v57 - 2);
          v199 = *(v57 - 1);
          v59 = *v42;
          v60 = v42[1];
          calculateContourPartialAreaAndPerimeter(v194, v225, (float *)&v223, (float *)&v221, (float *)&v224, (float *)&v222, &v219);
          v202 = v59;
          v201 = v60;
          v200 = v58;
          if (v192 == v44)
          {
            v61 = v50 - v225[0];
            v196 = -(float)(v225[0] + *(float *)&v224);
            v197 = v51 - *(float *)&v221;
            v62 = *(__int16 **)(v47 + 40);
            v63 = &v62[2 * *(int *)(v47 + 12) - 2];
            v64 = *(__int16 **)(*(_QWORD *)v193 + 40);
            v65 = &v64[2 * *(int *)(*(_QWORD *)v193 + 12) - 2];
          }
          else
          {
            v61 = v50 + v225[0];
            v196 = v225[0] + *(float *)&v224;
            v197 = v51 + *(float *)&v221;
            v65 = *(__int16 **)(v47 + 40);
            v64 = &v65[2 * *(int *)(v47 + 12) - 2];
            v63 = *(__int16 **)(*(_QWORD *)v193 + 40);
            v62 = &v63[2 * *(int *)(*(_QWORD *)v193 + 12) - 2];
          }
          v66 = v49 + *(float *)&v223;
          v67 = *(float *)&v223 + *(float *)&v222;
          v68 = v64[1];
          v69 = *v64;
          v70 = v62[1];
          v71 = *v62;
          v72 = v65[1];
          v73 = *v65;
          v74 = v41 - v71;
          v75 = v56 - v70;
          v76 = v66 + sqrtf((float)(v75 * v75 + v74 * v74));
          v77 = v61 + (float)(v71 * v56 - v70 * v41);
          v198 = atan2f((float)((v71 - *v63) * v75 - v74 * (v70 - v63[1])), (float)((v70 - v63[1]) * v75 + (v71 - *v63) * v74));
          v78 = atan2f((float)(v74 * (v199 - v56) - v75 * (v200 - v41)), (float)(v75 * (v199 - v56) + v74 * (v200 - v41)));
          v79 = v73 - v213;
          v80 = v72 - v211;
          v81 = v76 + sqrtf((float)(v80 * v80 + v79 * v79));
          v82 = atan2f((float)(v80 * (v213 - v202) - v79 * (v211 - v201)), (float)(v80 * (v211 - v201) + v79 * (v213 - v202)));
          v83 = atan2f((float)(v79 * (v68 - v72) - (v69 - v73) * v80), (float)(v80 * (v68 - v72) + v79 * (v69 - v73)));
          v84 = fabsf(v53);
          v85 = fabsf(v196);
          v86 = fabsf(v77 + (float)(v72 * v213 - v73 * v211));
          v55 = 1.0;
          if (v86 < (float)(v45 * v81) && v84 < (float)(v45 * v52) && v85 < (float)(v45 * v67))
          {
            a2 = v208;
            v31 = v209;
            v54 = v216;
            v25 = v217;
            v27 = v204;
            v28 = v203;
            v29 = v210;
            v30 = 1.0;
            v89 = v197;
          }
          else
          {
            if (v84 <= v85)
              v84 = v85;
            a2 = v208;
            v31 = v209;
            v54 = v216;
            v25 = v217;
            v27 = v204;
            v28 = v203;
            v29 = v210;
            v30 = 1.0;
            v89 = v197;
            if (v84 != 0.0)
            {
              if (v52 <= v67)
                v90 = v67;
              else
                v90 = v52;
              v55 = (float)((float)(v86 / v84) * v208[20]) / (float)(v81 / v90);
            }
          }
          if ((float)(roundf(fabsf((float)((float)((float)((float)((float)(v89 + v198) + v78) + v82) + v83) * 180.0) / 3.1416))
                     / 360.0) != v30
            || v55 < v30)
          {
            goto LABEL_61;
          }
        }
        v91 = (_WORD *)(v188 + 4 * (int)v25);
        *v91 = v187 + v32;
        v91[1] = v214;
        v189[(int)v25] = (float)(v191 + v54 * v54);
        v190[(int)v25] = (int)v25;
        *(float *)(v195 + 4 * (int)v25) = v55;
        v25 = (v25 + 1);
LABEL_61:
        ++v32;
        v33 += 0x10000;
      }
      while ((int)v27 + (int)v32 < v28);
    }
    ++v29;
    v31 += v183;
  }
  while (v29 < v184);
  if (!(_DWORD)v25)
    return 0;
  vDSP_vsorti(v189, v190, 0, (int)v25, 1);
  if ((int)v25 < 1)
    return 0;
  v92 = 0;
  v93 = v25;
  while (v189[v190[v92]] <= v179)
  {
    if (v25 == ++v92)
      goto LABEL_70;
  }
  LODWORD(v25) = v92;
LABEL_70:
  if (v25 >= 2)
  {
    v94 = v25 - 1;
    v95 = 1;
    do
    {
      if ((int)v25 > v95)
      {
        v96 = *v190;
        v97 = v94;
        v98 = v190 + 1;
        do
        {
          if (*(float *)(v195 + 4 * (int)v96) >= *(float *)(v195 + ((uint64_t)(*v98 << 32) >> 30)))
          {
            v96 = *v98;
          }
          else
          {
            *(v98 - 1) = *v98;
            *v98 = v96;
          }
          ++v98;
          --v97;
        }
        while (v97);
      }
      ++v95;
      --v94;
    }
    while (v95 != (_DWORD)v25);
  }
  v99 = 0;
  v100 = (float)v170;
  v101 = (float)v182;
  v212 = v93;
  while (2)
  {
    v102 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * v99);
    v103 = *(__int16 *)(*((_QWORD *)a2 + 7) + 2 * (int)v102);
    v104 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 16);
    if (!*(_BYTE *)(v104 + 40 * v103))
      __assert_rtn("mergeContourEnd", "ContourUtilities.c", 1467, "cPtr2->active");
    v105 = (int)v102;
    v106 = (unsigned __int16 *)(*((_QWORD *)a2 + 6) + 4 * (int)v102);
    v107 = *v106;
    v108 = (__int16)v107;
    v109 = (__int16)v106[1];
    v110 = v104 + 40 * (int)v103;
    v113 = *(_QWORD *)(v110 + 24);
    v112 = (uint64_t **)(v110 + 24);
    v111 = v113;
    v114 = *(int **)(v113 + 40);
    if (*(unsigned __int16 *)v114 == v107 && *((unsigned __int16 *)v114 + 1) == (unsigned __int16)v109)
    {
      v115 = &v114[*(int *)(v111 + 12) - 1];
      v116 = *(_QWORD *)(v104 + 40 * (int)v103 + 32);
      v117 = *(_QWORD *)(v116 + 40);
      v118 = *(_DWORD *)(v116 + 12);
      v119 = 1;
    }
    else
    {
      v111 = *(_QWORD *)(v104 + 40 * (int)v103 + 32);
      v117 = *(_QWORD *)(v111 + 40);
      v118 = *(_DWORD *)(v111 + 12);
      if (*(unsigned __int16 *)(v117 + 4 * (v118 - 1)) != (unsigned __int16)v108
        || *(unsigned __int16 *)(v117 + 4 * (v118 - 1) + 2) != (unsigned __int16)v109)
      {
        __assert_rtn("mergeContourEnd", "ContourUtilities.c", 1482, "PCOORD_EQUAL(sPtr2->pary[sPtr2->nPnts-1], pc3)");
      }
      v119 = 0;
      v115 = *(int **)(v111 + 40);
    }
    v120 = *v115;
    if (a4 && *(float *)(*((_QWORD *)a2 + 3) + 4 * v105) > 8.0)
    {
      v121 = v178[5];
      v122 = v178[6];
      v123 = v178[7];
      v124 = *(float *)(v111 + 20);
      v125 = *(float *)(v111 + 24);
      v126 = *(float *)(v111 + 28);
      v127 = v122 * (float)v109;
      v128 = v123 + (float)(v127 + (float)(v121 * (float)v108));
      v129 = fabsf(v128);
      v130 = v126 + (float)((float)(v125 * v101) + (float)(v124 * v100));
      v131 = fabsf(v130);
      if (v129 <= v131)
        v129 = v131;
      if (v129 <= (float)(v176 + v176))
      {
        v132 = (__PAIR64__((float)((float)(v122 * (float)(v177 - v170)) - (float)(v121 * (float)(v173 - v182))) > 0.0, (float)(v122 * (float)(v177 - v170)) - (float)(v121 * (float)(v173 - v182)))- COERCE_UNSIGNED_INT(0.0)) >> 32;
        v133 = (float)(v125 * (float)((__int16)v120 - v108)) - (float)(v124 * (float)((v120 >> 16) - v109));
        v134 = v133 > 0.0;
        v135 = v133 < 0.0;
        v136 = (float)(v122 * (float)(v108 - v170)) - (float)(v121 * (float)(v109 - v182));
        v137 = v136 > 0.0;
        v138 = v136 < 0.0;
        v139 = (float)(v125 * (float)(v170 - v108)) - (float)(v124 * (float)(v182 - v109));
        v140 = v139 > 0.0;
        v141 = v139 < 0.0;
        *(float *)&v142 = (float)(v122 * (float)((__int16)v120 - v170)) - (float)(v121 * (float)((v120 >> 16) - v182));
        if (v132 == (__PAIR64__(*(float *)&v142 < 0.0, 0.0) - v142) >> 32)
        {
          v143 = v134 - v135;
          *(float *)&v144 = (float)((float)(v173 - v109) * (float)-v124) + (float)(v125 * (float)(v177 - v108));
          if (v143 == (__PAIR64__(*(float *)&v144 < 0.0, 0.0) - v144) >> 32
            && (v167 == (unsigned __int16)v108 && v182 == v109 || v132 == v138 - v137 && v143 == v141 - v140))
          {
            v145 = 0;
            goto LABEL_109;
          }
        }
      }
      if (fabsf((float)(v121 * v125) - (float)(v122 * v124)) < v171
        || (v177 == v108 ? (v146 = v173 == v109) : (v146 = 0),
            !v146
         && ((v148 = (__PAIR64__(v128 > 0.0, LODWORD(v128)) - COERCE_UNSIGNED_INT(0.0)) >> 32,
              *(float *)&v147 = v123
                              + (float)((float)(v122 * (float)(v120 >> 16)) + (float)(v121 * (float)(__int16)v120)),
              (__PAIR64__(*(float *)&v147 > 0.0, v147) - COERCE_UNSIGNED_INT(0.0)) >> 32 != v148)
          && v148 != (__PAIR64__((float)(v123 + (float)((float)(v122 * v101) + (float)(v121 * v100))) > 0.0, v123 + (float)((float)(v122 * v101) + (float)(v121 * v100)))- COERCE_UNSIGNED_INT(0.0)) >> 32|| (*(float *)&v149 = v126 + (float)((float)(v125 * (float)v173) + (float)(v124 * (float)v177)), v150 = (__PAIR64__(v130 > 0.0, LODWORD(v130)) - COERCE_UNSIGNED_INT(0.0)) >> 32, (__PAIR64__(*(float *)&v149 > 0.0, v149) - COERCE_UNSIGNED_INT(0.0)) >> 32 != v150)&& v150 != (__PAIR64__((float)(v123 + (float)(v127 + (float)(v124 * (float)v108))) > 0.0, v123 + (float)(v127 + (float)(v124 * (float)v108)))- COERCE_UNSIGNED_INT(0.0)) >> 32)))
      {
LABEL_122:
        if (++v99 == v93)
          return 0;
        continue;
      }
    }
    break;
  }
  v145 = 1;
LABEL_109:
  v151 = (int *)(v117 + 4 * (v118 - 1));
  if (a3)
  {
    if (v119 == a3)
      v151 = v114;
    v114 = *(int **)(*(_QWORD *)v175 + 40);
  }
  else
  {
    if (!v119)
      v114 = v151;
    v151 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) + 4 * *(int *)(*(_QWORD *)(a1 + 32) + 12) - 4);
  }
  v152 = *v114;
  v215 = *v151;
  v216 = v216 & 0xFFFFFFFF00000000 | *v151;
  v217 = v217 & 0xFFFFFFFF00000000 | v152;
  if (!checkBridgeCrossing((uint64_t)a2, *v151, *v114))
  {
    v93 = v212;
    goto LABEL_122;
  }
  v153 = a3 | (2 * v119);
  if ((v145 & 1) != 0
    || fabsf((float)(v178[6] * *(float *)(v111 + 20)) - (float)(v178[5] * *(float *)(v111 + 24))) <= v174)
  {
    v155 = v152;
    BridgeSegment = createBridgeSegment(*((int **)a2 + 13), v168 << 16, v215, v152);
    if (v172 != (unsigned __int16)v103)
    {
      for (i = *v112; i; i = (uint64_t *)*i)
        *((_WORD *)i + 17) = v172;
      __asm { BR              X9 }
    }
  }
  else
  {
    if (v172 != (unsigned __int16)v103)
      __asm { BR              X8 }
    v155 = v152;
    BridgeSegment = createBridgeSegment(*((int **)a2 + 13), v168 << 16, v215, v152);
  }
  *(_BYTE *)(a1 + 8) = 1;
  ++*(_DWORD *)(a1 + 12);
  **(_QWORD **)(a1 + 32) = BridgeSegment;
  *(_QWORD *)BridgeSegment = 0;
  *(_QWORD *)(a1 + 32) = BridgeSegment;
  if ((v153 - 3) <= 0xFFFFFFFD)
    __assert_rtn("mergeContourEnd", "ContourUtilities.c", 1633, "(code == 1) || (code == 2)");
  v157 = *(unsigned int *)(BridgeSegment + 12);
  if ((int)v157 >= 1)
  {
    v158 = (uint64_t *)*((_QWORD *)a2 + 1);
    v159 = *v158;
    v160 = v158[3] << 32;
    v161 = (__int16 *)(*(_QWORD *)(BridgeSegment + 40) + 2);
    do
    {
      *(_BYTE *)(v159 + *(v161 - 1) + ((v160 * *v161) >> 32)) = 1;
      v161 += 2;
      --v157;
    }
    while (v157);
  }
  v162 = (uint64_t *)*((_QWORD *)a2 + 2);
  v163 = *v162;
  v164 = *v162 + 2 * (__int16)v215;
  v165 = v162[3];
  *(_WORD *)(v164 + v165 * ((uint64_t)v215 >> 16)) = 0;
  result = 0xFFFFFFFFLL;
  *(_WORD *)(v163 + 2 * (__int16)v155 + v165 * ((uint64_t)v155 >> 16)) = 0;
  return result;
}

BOOL checkBridgeCrossing(uint64_t a1, int a2, int a3)
{
  int v3;
  __int16 *v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int *v26;
  int *v27;
  int v28;
  uint64_t v29;
  int v30;
  int *v31;
  int *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int *v37;
  int *v38;
  int v39;
  int v40;
  int v41;
  int *v42;
  int *v43;
  int v44;
  int v45;
  int v46;
  int *v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  int *v53;
  int v54;
  int *v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  int v59;
  __int16 *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v3 = (__int16)a2;
  v4 = *(__int16 **)(a1 + 64);
  v5 = (__int16)a3 - (__int16)a2;
  v6 = a3 >> 16;
  v7 = a2 >> 16;
  v8 = (a3 >> 16) - (a2 >> 16);
  if ((v5 & 0x80000000) != 0)
  {
    v16 = (__int16)a2 - (__int16)a3;
    if ((v8 & 0x80000000) != 0)
    {
      v22 = (a2 >> 16) - (a3 >> 16);
      LODWORD(v34) = 0;
      if (v5 > v8)
      {
        v35 = 2 * (v8 - v5);
        v36 = v8 + 2 * v16;
        do
        {
          v37 = (int *)&v4[2 * (int)v34];
          *(_WORD *)v37 = v3;
          *((_WORD *)v37 + 1) = v7;
          if (v36 < 1)
          {
            v39 = 2 * v16;
          }
          else
          {
            v34 = (int)v34 + 1;
            v38 = (int *)&v4[2 * v34];
            *(_WORD *)v38 = v3;
            *((_WORD *)v38 + 1) = v7 - 1;
            LOWORD(v3) = v3 - 1;
            v39 = v35;
          }
          v36 += v39;
          --v7;
          LODWORD(v34) = v34 + 1;
        }
        while (v6 != v7);
        v14 = (int)v34;
        v15 = v16;
        goto LABEL_61;
      }
      v50 = 2 * (v5 - v8);
      v51 = v5 + 2 * v22;
      do
      {
        v52 = (int *)&v4[2 * (int)v34];
        *(_WORD *)v52 = v3;
        *((_WORD *)v52 + 1) = v7;
        if (v51 < 1)
        {
          v54 = 2 * v22;
        }
        else
        {
          v34 = (int)v34 + 1;
          v53 = (int *)&v4[2 * v34];
          *(_WORD *)v53 = v3 - 1;
          *((_WORD *)v53 + 1) = v7;
          LOWORD(v7) = v7 - 1;
          v54 = v50;
        }
        v51 += v54;
        --v3;
        LODWORD(v34) = v34 + 1;
      }
      while ((__int16)a3 != v3);
      v14 = (int)v34;
      LOWORD(v6) = v7;
      v15 = v22;
    }
    else
    {
      LODWORD(v17) = 0;
      if (v16 < v8)
      {
        v18 = -2 * v5 - v8;
        do
        {
          v19 = (int *)&v4[2 * (int)v17];
          *(_WORD *)v19 = v3;
          *((_WORD *)v19 + 1) = v7;
          if (v18 < 1)
          {
            v21 = -2 * v5;
          }
          else
          {
            v17 = (int)v17 + 1;
            v20 = (int *)&v4[2 * v17];
            *(_WORD *)v20 = v3;
            *((_WORD *)v20 + 1) = v7 + 1;
            LOWORD(v3) = v3 - 1;
            v21 = 2 * (v16 - v8);
          }
          v18 += v21;
          ++v7;
          LODWORD(v17) = v17 + 1;
        }
        while (v6 != v7);
        v14 = (int)v17;
        v15 = -v5;
        goto LABEL_18;
      }
      v40 = 2 * (v5 + v8);
      v41 = v5 + 2 * v8;
      do
      {
        v42 = (int *)&v4[2 * (int)v17];
        *(_WORD *)v42 = v3;
        *((_WORD *)v42 + 1) = v7;
        if (v41 < 1)
        {
          v44 = 2 * v8;
        }
        else
        {
          v17 = (int)v17 + 1;
          v43 = (int *)&v4[2 * v17];
          *(_WORD *)v43 = v3 - 1;
          *((_WORD *)v43 + 1) = v7;
          LOWORD(v7) = v7 + 1;
          v44 = v40;
        }
        v41 += v44;
        --v3;
        LODWORD(v17) = v17 + 1;
      }
      while ((__int16)a3 != v3);
      v14 = (int)v17;
      LOWORD(v6) = v7;
      v15 = v8;
    }
    v22 = v16;
    goto LABEL_61;
  }
  if ((v8 & 0x80000000) != 0)
  {
    v22 = (a2 >> 16) - (a3 >> 16);
    LODWORD(v23) = 0;
    if (v22 <= v5)
    {
      v45 = 2 * ((a2 >> 16) - (a3 >> 16) - v5);
      v46 = 2 * v22 - v5;
      do
      {
        v47 = (int *)&v4[2 * (int)v23];
        *(_WORD *)v47 = v3;
        *((_WORD *)v47 + 1) = v7;
        if (v46 < 1)
        {
          v49 = 2 * v22;
        }
        else
        {
          v23 = (int)v23 + 1;
          v48 = (int *)&v4[2 * v23];
          *(_WORD *)v48 = v3 + 1;
          *((_WORD *)v48 + 1) = v7;
          LOWORD(v7) = v7 - 1;
          v49 = v45;
        }
        v46 += v49;
        ++v3;
        LODWORD(v23) = v23 + 1;
      }
      while ((__int16)a3 != v3);
      v14 = (int)v23;
      LOWORD(v6) = v7;
      v15 = v22;
      goto LABEL_52;
    }
    v24 = 2 * (v5 + v8);
    v25 = v8 + 2 * v5;
    do
    {
      v26 = (int *)&v4[2 * (int)v23];
      *(_WORD *)v26 = v3;
      *((_WORD *)v26 + 1) = v7;
      if (v25 < 1)
      {
        v28 = 2 * v5;
      }
      else
      {
        v23 = (int)v23 + 1;
        v27 = (int *)&v4[2 * v23];
        *(_WORD *)v27 = v3;
        *((_WORD *)v27 + 1) = v7 - 1;
        LOWORD(v3) = v3 + 1;
        v28 = v24;
      }
      v25 += v28;
      --v7;
      LODWORD(v23) = v23 + 1;
    }
    while (v6 != v7);
    v14 = (int)v23;
    v15 = v5;
  }
  else
  {
    if (v8 > v5)
    {
      LODWORD(v9) = 0;
      v10 = 2 * v5 - v8;
      do
      {
        v11 = (int *)&v4[2 * (int)v9];
        *(_WORD *)v11 = v3;
        *((_WORD *)v11 + 1) = v7;
        if (v10 < 1)
        {
          v13 = 2 * v5;
        }
        else
        {
          v9 = (int)v9 + 1;
          v12 = (int *)&v4[2 * v9];
          *(_WORD *)v12 = v3;
          *((_WORD *)v12 + 1) = v7 + 1;
          LOWORD(v3) = v3 + 1;
          v13 = 2 * (v5 - v8);
        }
        v10 += v13;
        ++v7;
        LODWORD(v9) = v9 + 1;
      }
      while (v6 != v7);
      v14 = (int)v9;
      v15 = v5;
LABEL_18:
      v22 = v8;
      goto LABEL_61;
    }
    if (v5)
    {
      LODWORD(v29) = 0;
      v30 = 2 * v8 - v5;
      do
      {
        v31 = (int *)&v4[2 * (int)v29];
        *(_WORD *)v31 = v3;
        *((_WORD *)v31 + 1) = v7;
        if (v30 < 1)
        {
          v33 = 2 * v8;
        }
        else
        {
          v29 = (int)v29 + 1;
          v32 = (int *)&v4[2 * v29];
          *(_WORD *)v32 = v3 + 1;
          *((_WORD *)v32 + 1) = v7;
          LOWORD(v7) = v7 + 1;
          v33 = 2 * (v8 - v5);
        }
        v30 += v33;
        ++v3;
        LODWORD(v29) = v29 + 1;
      }
      while ((__int16)a3 != v3);
      v14 = (int)v29;
      LOWORD(v6) = v7;
      v15 = v8;
LABEL_52:
      v22 = v5;
      goto LABEL_61;
    }
    v14 = 0;
    v22 = 0;
    v6 = a2 >> 16;
    v15 = (a3 >> 16) - (a2 >> 16);
  }
LABEL_61:
  v55 = (int *)&v4[2 * v14];
  *(_WORD *)v55 = v3;
  *((_WORD *)v55 + 1) = v6;
  v56 = v15 + v22 + 1;
  if ((int)v56 < 1)
  {
    v61 = 0;
    v59 = 0;
  }
  else
  {
    v57 = *(uint64_t **)(a1 + 8);
    v58 = *((_DWORD *)v57 + 4);
    v59 = v56;
    v60 = v4;
    do
    {
      *(_DWORD *)v60 = *v60 + v60[1] * v58;
      v60 += 2;
      --v59;
    }
    while (v59);
    v61 = 0;
    v62 = *v57;
    do
    {
      v64 = *(int *)v4;
      v4 += 2;
      v63 = v64;
      if (*(_BYTE *)(v62 + v64))
        ++v61;
      if (*(_WORD *)(**(_QWORD **)(a1 + 16) + 2 * v63))
        ++v59;
      --v56;
    }
    while (v56);
  }
  return v61 == v59;
}

float computePolyAreaAndMetric(float *a1, float *a2, float *a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float result;

  v3 = 0;
  v4 = *a1;
  v5 = a1[1];
  v6 = 0.0;
  v7 = v5;
  v8 = *a1;
  v9 = 0.0;
  do
  {
    v10 = v8;
    v11 = v7;
    v8 = a1[v3 + 2];
    v7 = a1[v3 + 3];
    v9 = v9 + sqrtf((float)((float)(v7 - v11) * (float)(v7 - v11)) + (float)((float)(v8 - v10) * (float)(v8 - v10)));
    v6 = v6 + (float)((float)(v10 * v7) - (float)(v8 * v11));
    v3 += 2;
  }
  while (v3 != 6);
  v12 = v9 + sqrtf((float)((float)(v5 - v7) * (float)(v5 - v7)) + (float)((float)(v4 - v8) * (float)(v4 - v8)));
  v13 = fabsf(v6 + (float)((float)(v8 * v5) - (float)(v4 * v7))) * 0.5;
  *a2 = v13;
  result = (float)(v13 * 12.566) / (float)(v12 * v12);
  *a3 = result;
  return result;
}

void findContourCorners(uint64_t a1, float a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t **v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 *v16;
  int v17;
  int v18;
  __int16 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  __int16 *v30;
  float v31;
  int v32;
  char v33;
  int v34;
  uint64_t v35;
  float v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v41;
  char v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  __int16 *v59;
  float v60;
  int v61;
  int v62;
  char v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  BOOL v69;
  char v70;
  BOOL v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  int *v83;
  uint64_t *v84;
  int v85;
  int *v86;
  int v87;
  uint64_t v88;
  int v89;
  int *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int __src;
  uint64_t v96;

  v86 = &v81;
  v96 = *MEMORY[0x1E0C80C00];
  v94 = 0;
  v6 = *(_DWORD *)(a1 + 12);
  MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v7);
  v91 = (char *)&v81 - v12;
  if (v10)
  {
    v13 = 0;
    v14 = -1;
    v15 = -1;
    do
    {
      *(_QWORD *)(a4 + 8 * v13) = v10;
      v16 = (__int16 *)v10[5];
      v17 = *v16;
      v18 = v16[1];
      v19 = &v16[2 * *((int *)v10 + 3)];
      v20 = (*(v19 - 2) - v17) * (*(v19 - 2) - v17) + (*(v19 - 1) - v18) * (*(v19 - 1) - v18);
      v11[v13] = v20;
      if (v20 > v14)
      {
        v15 = v13;
        v14 = v20;
      }
      ++v13;
      v10 = (uint64_t **)*v10;
    }
    while (v10);
    v94 = v20;
  }
  else
  {
    v15 = -1;
  }
  v90 = v11;
  if (v8)
  {
    v21 = v8[1] >> 1;
    v8[2] = v21;
    v8[3] = v21 - 1;
  }
  __src = 0;
  v93 = 0;
  v83 = v8;
  v84 = (uint64_t *)(a4 + 8 * v15);
  v22 = v15 - v6;
  v85 = v9;
  v82 = v15 - v6;
  if (!v9)
    v22 = 0;
  LODWORD(v92) = v22;
  if (v15 > v22)
  {
    v23 = v84;
    v81 = v15;
    while (2)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = *v23;
      v29 = *(_DWORD *)(v28 + 12);
      v30 = *(__int16 **)(v28 + 40);
      v31 = 0.0;
      v32 = 1;
      v33 = 1;
      v34 = v81;
LABEL_15:
      v89 = v24;
      v88 = v25;
      v87 = v32;
      v35 = v34;
      v36 = v31;
      while (1)
      {
        v34 = v35 - 1;
        v37 = (int)v35 <= 0 ? v6 : 0;
        v38 = *(_QWORD *)(a4 + 8 * (v35 + v37) - 8);
        segmentSinCosLen2(v29, v30, *(_DWORD *)(v38 + 12), *(__int16 **)(v38 + 40), (float *)&v93 + 1, (float *)&v93, &v94);
        v31 = fabsf(*((float *)&v93 + 1));
        v39 = (__PAIR64__(*((float *)&v93 + 1) > 0.0, HIDWORD(v93)) - COERCE_UNSIGNED_INT(0.0)) >> 32;
        if (v26)
          break;
        if (v31 >= a2)
        {
          v33 = 0;
          v34 = v35 - 1;
          v27 = (__PAIR64__(*((float *)&v93 + 1) > 0.0, HIDWORD(v93)) - COERCE_UNSIGNED_INT(0.0)) >> 32;
          v44 = v88;
LABEL_37:
          v90[v44] = v94;
          *(_DWORD *)&v91[4 * v44] = v34;
          v25 = v44 + 1;
          v32 = v87 + 1;
          v24 = v89 + 1;
          v26 = 1;
          if (v34 > (int)v92)
            goto LABEL_15;
          if ((_DWORD)v44)
          {
            LODWORD(v49) = 0;
            v50 = *v90;
            v51 = 1;
            do
            {
              if (v90[v51] > v50)
              {
                LODWORD(v49) = v51;
                v50 = v90[v51];
              }
              ++v51;
            }
            while (v87 != v51);
            v49 = (int)v49;
          }
          else
          {
            v49 = 0;
          }
          LOWORD(__src) = (v6 & (*(int *)&v91[4 * v49] >> 31)) + *(_WORD *)&v91[4 * v49];
          HIWORD(__src) = (v6 & (v81 >> 31)) + v81;
          prependDequeElement(v83, &__src);
          goto LABEL_54;
        }
        v41 = v31 < v36 || v27 != v39;
        if (v34 > (int)v92 && *(float *)&v93 >= 0.0)
        {
          v26 = 0;
          v42 = v41 & ~v33;
          --v35;
          v27 = (__PAIR64__(*((float *)&v93 + 1) > 0.0, HIDWORD(v93)) - COERCE_UNSIGNED_INT(0.0)) >> 32;
          v36 = v31;
          v33 = 0;
          if ((v42 & 1) == 0)
            continue;
        }
        goto LABEL_54;
      }
      v43 = v31 >= a2 && v39 == v27;
      v44 = v88;
      if (v43)
        goto LABEL_37;
      v45 = 0;
      if ((v88 & 0xFFFFFFFE) != 0)
      {
        v46 = *v90;
        v47 = 1;
        do
        {
          if (v90[v47] > v46)
          {
            v45 = v47;
            v46 = v90[v47];
          }
          ++v47;
        }
        while (v89 != v47);
      }
      v48 = *(_DWORD *)&v91[4 * v45];
      LOWORD(__src) = (v6 & (v48 >> 31)) + v48;
      HIWORD(__src) = (v6 & (v81 >> 31)) + v81;
      prependDequeElement(v83, &__src);
      v23 = (uint64_t *)(a4 + 8 * ((v6 & (v48 >> 31)) + v48));
      v81 = v48;
      if (v48 > (int)v92)
        continue;
      break;
    }
  }
LABEL_54:
  if (v85)
  {
    if (v83)
    {
      v52 = v83[2];
      v53 = v82;
      if (v83[3] + 1 != v52)
      {
        __src = *(_DWORD *)(*((_QWORD *)v83 + 2) + *v83 * (uint64_t)v52);
        if (v15 == (__int16)__src)
          v53 = v15;
        else
          v53 = (v6 + (__int16)__src);
      }
    }
    else
    {
      v53 = v82;
    }
  }
  else
  {
    v53 = (v6 - 1);
  }
  if (v15 < (int)v53)
  {
    v54 = *v84;
    while (2)
    {
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = *(__int16 **)(v54 + 40);
      v60 = 0.0;
      v61 = 1;
      v62 = v15;
      v63 = 1;
LABEL_65:
      v89 = v55;
      v92 = v56;
      LODWORD(v88) = v61;
      ++v62;
      v64 = v60;
      while (1)
      {
        v65 = v53;
        v66 = *(_QWORD *)(a4 + 8 * (v62 % v6));
        segmentSinCosLen2(*(_DWORD *)(v54 + 12), v59, *(_DWORD *)(v66 + 12), *(__int16 **)(v66 + 40), (float *)&v93 + 1, (float *)&v93, &v94);
        v60 = fabsf(*((float *)&v93 + 1));
        v67 = (__PAIR64__(*((float *)&v93 + 1) > 0.0, HIDWORD(v93)) - COERCE_UNSIGNED_INT(0.0)) >> 32;
        if (v57)
          break;
        v53 = v65;
        if (v60 >= a2)
        {
          v63 = 0;
          v58 = (__PAIR64__(*((float *)&v93 + 1) > 0.0, HIDWORD(v93)) - COERCE_UNSIGNED_INT(0.0)) >> 32;
          v72 = v92;
LABEL_84:
          v90[v72] = v94;
          *(_DWORD *)&v91[4 * v72] = v62;
          v56 = v72 + 1;
          v61 = v88 + 1;
          v55 = v89 + 1;
          v57 = 1;
          if (v62 < (int)v53)
            goto LABEL_65;
          if ((_DWORD)v72)
          {
            LODWORD(v77) = 0;
            v78 = *v90;
            v79 = 1;
            do
            {
              if (v90[v79] > v78)
              {
                LODWORD(v77) = v79;
                v78 = v90[v79];
              }
              ++v79;
            }
            while (v88 != v79);
            v77 = (int)v77;
          }
          else
          {
            v77 = 0;
          }
          v80 = *(_DWORD *)&v91[4 * v77] % v6;
          LOWORD(__src) = v15 % v6;
          HIWORD(__src) = v80;
          appendDequeElement(v83, &__src);
          return;
        }
        v69 = v60 < v64 || v58 != v67;
        if (v62 < (int)v65 && *(float *)&v93 >= 0.0)
        {
          v57 = 0;
          v70 = v69 & ~v63;
          ++v62;
          v58 = (__PAIR64__(*((float *)&v93 + 1) > 0.0, HIDWORD(v93)) - COERCE_UNSIGNED_INT(0.0)) >> 32;
          v64 = v60;
          v63 = 0;
          if ((v70 & 1) == 0)
            continue;
        }
        return;
      }
      v71 = v60 >= a2 && v67 == v58;
      v53 = v65;
      v72 = v92;
      if (v71)
        goto LABEL_84;
      if ((v92 & 0xFFFFFFFE) != 0)
      {
        v73 = 0;
        v74 = *v90;
        v75 = 1;
        do
        {
          if (v90[v75] > v74)
          {
            v73 = v75;
            v74 = v90[v75];
          }
          ++v75;
        }
        while (v89 != v75);
      }
      else
      {
        v73 = 0;
      }
      v76 = v15 % v6;
      v15 = *(_DWORD *)&v91[4 * v73];
      LOWORD(__src) = v76;
      HIWORD(__src) = v15 % v6;
      appendDequeElement(v83, &__src);
      v54 = *(_QWORD *)(a4 + 8 * (v15 % v6));
      v53 = v65;
      if (v15 < (int)v65)
        continue;
      break;
    }
  }
}

uint64_t calcRotationParity(int a1, __int16 *a2, int a3, __int16 *a4)
{
  int v4;

  v4 = (a4[2 * a3 - 2] - *a4) * (a2[1] - a2[2 * a1 - 1]) + (a4[2 * a3 - 1] - a4[1]) * (a2[2 * a1 - 2] - *a2);
  return (v4 != 0) | (v4 >> 31);
}

BOOL extendedSegmentTest(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v8;
  __int16 *v9;
  int v10;
  __int16 *v11;
  _BOOL8 result;
  int v13;
  __int16 *v14;
  int v15;
  uint64_t v16;

  if (a4)
  {
    v16 = 0;
    v8 = *(_DWORD *)(a2 + 12);
    v9 = *(__int16 **)(a2 + 40);
    v10 = *(_DWORD *)(a3 + 12);
    v11 = *(__int16 **)(a3 + 40);
    segmentSinCos(v8, v9, v10, v11, (float *)&v16 + 1, (float *)&v16);
    if (fabsf(*((float *)&v16 + 1)) >= *(float *)(a5 + 80) || (result = 0, *(float *)&v16 >= 0.0))
    {
      v13 = *(_DWORD *)(a1 + 12);
      v14 = *(__int16 **)(a1 + 40);
LABEL_8:
      v15 = calcRotationParity(v13, v14, v8, v9);
      return v15 == calcRotationParity(v8, v9, v10, v11);
    }
  }
  else
  {
    v16 = 0;
    v13 = *(_DWORD *)(a1 + 12);
    v14 = *(__int16 **)(a1 + 40);
    v8 = *(_DWORD *)(a2 + 12);
    v9 = *(__int16 **)(a2 + 40);
    segmentSinCos(v13, v14, v8, v9, (float *)&v16 + 1, (float *)&v16);
    if (fabsf(*((float *)&v16 + 1)) >= *(float *)(a5 + 80) || (result = 0, *(float *)&v16 >= 0.0))
    {
      v10 = *(_DWORD *)(a3 + 12);
      v11 = *(__int16 **)(a3 + 40);
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Contours2Quads(uint64_t a1, float *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  char *v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int32x2_t v31;
  uint64_t v32;
  float32x2_t *v33;
  __int16 *v34;
  uint64_t v35;
  float32x2_t *v36;
  float32x2_t *v37;
  float32x2_t v38;
  float32x2_t v39;
  int32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  __int16 *v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  __int16 *v62;
  int v63;
  __int16 *v64;
  uint64_t v65;
  int v66;
  unsigned __int16 v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int16 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int16 *v77;
  int v78;
  __int16 *v79;
  _BOOL4 v80;
  int v83;
  __int16 *v84;
  int v85;
  int v86;
  __int16 *v87;
  int v88;
  __int16 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned __int16 *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  __int16 *v100;
  int v101;
  uint64_t v102;
  __int16 *v103;
  int v104;
  BOOL v105;
  _WORD *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  __int16 *v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  __int16 *v118;
  float *v119;
  float *v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float *v130;
  float *v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  int v139;
  _BOOL8 v140;
  int v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  int32x2_t v145;
  uint64_t v146;
  float *v147;
  float32x2_t *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  float *v156;
  float v157;
  float v158;
  int v159;
  int v160;
  int v161;
  float32x2_t *v162;
  int v163;
  uint64_t v164;
  int v165;
  int v166;
  float *v167;
  float *v168;
  float *v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  unsigned int v179;
  int v180;
  int v181;
  unsigned int v182;
  float v183;
  float v184;
  float v185;
  float *v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float32x2_t *v194;
  float32x2_t *v195;
  int v196;
  float32x2_t v197;
  int v198;
  int v199;
  float32x2_t *v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x2_t v203;
  int32x2_t v204;
  float32x2_t v205;
  int v206;
  unsigned int v207;
  int v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  float *v224;
  float *v225;
  float *v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  int v236;
  int v237;
  unsigned int v238;
  float v239;
  float *v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  int v248;
  float *v249;
  int v250;
  float32x2_t v251;
  int v252;
  float32x2_t v253;
  int v254;
  int v255;
  __int16 *v256;
  int v257;
  int v258;
  float32x2_t v259;
  float *v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  unsigned int v268;
  float v269;
  uint64_t v270;
  float *v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float *v279;
  int v280;
  unsigned int v281;
  float *v282;
  float *v283;
  int v284;
  float32x2_t v285;
  int v286;
  float32x2_t v287;
  int v288;
  int v289;
  uint64_t v290;
  int v291;
  int v292;
  __int16 *v293;
  int v294;
  int v295;
  float v296;
  float32x2_t v297;
  int v298;
  float *v299;
  float *v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  unsigned int v307;
  float v308;
  float *v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  int v317;
  unsigned int v318;
  int v319;
  __int16 *v320;
  float v321;
  float v322;
  __int16 *v323;
  float v324;
  float v325;
  float *v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float *v346;
  float32x2_t v347;
  int v348;
  int v349;
  float32x2_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  int v354;
  __int16 *v355;
  int v356;
  int v357;
  int v358;
  float *v359;
  float v360;
  float v361;
  unsigned int v362;
  float *v363;
  unsigned int v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  float v368;
  float v369;
  uint64_t v370;
  float v371;
  float v372;
  float v373;
  float v374;
  unsigned int v375;
  float v376;
  float v377;
  unsigned int v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  int v389;
  float v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  float *v394;
  uint64_t v395;
  float *v396;
  uint64_t *v397;
  float *v398;
  float *v399;
  float *v400;
  uint64_t v401;
  __int128 v402;
  __int128 v403;
  double v404;
  double v405;
  double v406;
  __int128 v407;
  uint64_t v408;
  int v409;
  float v410;
  float32x2_t *v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  float v418;
  double v419;
  double v420;
  float v421;
  unsigned int v423;
  float32x2_t v424;
  float32x2_t v425;
  float32x2_t v430;
  int v431;
  int v432;
  char v433;
  char v434;
  float v435;
  float v436;
  float32x2_t v437;
  double v438;
  float v439;
  float32x2_t v440;
  int v441;
  float v442;
  float v443;
  float v444;
  int16x4_t v445;
  int16x4_t v446;
  int16x4_t v447;
  int16x4_t v448;
  int16x4_t v449;
  uint64_t v450;
  int v451;
  uint64_t v452;
  int v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  char *v459;
  uint64_t v460;
  int v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t *v464;
  __int128 v465;
  _OWORD *v466;
  uint64_t v468;
  int v469;
  int v470;
  char *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  unsigned int v481;
  uint64_t *v482;
  _OWORD *v483;
  float *v484;
  __int128 v485;
  __int128 v486;
  int v487;
  unsigned int v488;
  uint64_t *v489;
  uint64_t v490;
  _BOOL4 v491;
  float32x2_t *v492;
  __int16 *v493;
  unint64_t v494;
  uint64_t v495;
  float *v496;
  int v497;
  uint64_t v498;
  char *v499;
  uint64_t v500;
  float v501;
  __int128 v502;
  uint64_t v503;
  _DWORD v504[11];

  *(_QWORD *)&v504[9] = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned int *)(a1 + 4);
  v10 = *((_DWORD *)a3 + 4);
  v489 = a3;
  v11 = (char *)malloc_type_malloc(4 * (*((_DWORD *)a3 + 2) + v10), 0x100004052888210uLL);
  v12 = a2[20];
  v13 = a2[17];
  v496 = a2;
  v14 = a2[23];
  v474 = a1;
  v472 = *(_QWORD *)(a1 + 8);
  v15 = (uint64_t)malloc_type_malloc(0x28uLL, 0xE36368ECuLL);
  v503 = v15;
  v502 = xmmword_1A15FB440;
  v473 = v9;
  if ((int)v9 >= 1)
  {
    v16 = 0;
    v17 = 0;
    v471 = v11 + 2;
    v480 = v11;
    v481 = a5;
LABEL_3:
    v18 = *(__int16 *)(v472 + 2 * v16);
    v19 = *(_QWORD *)(v474 + 16);
    v20 = (_BYTE *)(v19 + 40 * *(__int16 *)(v472 + 2 * v16));
    if (!*v20)
      goto LABEL_326;
    v475 = &v468;
    v21 = v19 + 40 * v18;
    v22 = *(unsigned __int8 *)(v21 + 8);
    v491 = *(_BYTE *)(v21 + 8) != 0;
    v23 = *(int *)(v21 + 12);
    MEMORY[0x1E0C80A78](v15);
    v26 = (char *)&v468 - v25;
    if (v24 >= 0x200)
      v27 = 512;
    else
      v27 = v24;
    bzero((char *)&v468 - v25, v27);
    v490 = v23;
    bzero(v26, 8 * v23);
    findContourCorners((uint64_t)v20, v496[20], (uint64_t)&v502, (uint64_t)v26);
    MEMORY[0x1E0C80A78](v28);
    v33 = (float32x2_t *)((char *)&v468 - v32);
    v476 = v16;
    if ((int)v29 < 1)
      goto LABEL_325;
    v34 = (__int16 *)(v30 + 2);
    v492 = v33;
    v35 = v29;
    do
    {
      v36 = *(float32x2_t **)&v26[8 * *(v34 - 1)];
      v37 = *(float32x2_t **)&v26[8 * *v34];
      v38 = v36[3];
      v39 = v37[3];
      *(float *)v31.i32 = vmlas_n_f32((float)-v37[2].f32[1] * v38.f32[0], v36[2].f32[1], v39.f32[0]);
      v40.i32[1] = v38.i32[1];
      v40.i32[0] = v36[2].i32[1];
      v41 = vmul_f32(v39, vneg_f32((float32x2_t)vrev64_s32(v40)));
      v39.i32[0] = vdup_lane_s32((int32x2_t)v39, 1).u32[0];
      v39.i32[1] = v37[2].i32[1];
      *v33++ = vdiv_f32(vmla_f32(v41, v38, v39), (float32x2_t)vdup_lane_s32(v31, 0));
      v34 += 2;
      --v35;
    }
    while (v35);
    v487 = v29 - 1;
    v479 = ((_DWORD)v29 - 1) & ~(((int)v29 - 1) >> 31);
    MEMORY[0x1E0C80A78](v15);
    v493 = (__int16 *)((char *)&v468 - ((v46 + 15) & 0x7FFFFFFF0));
    v47 = 0;
    v48 = 0;
    v49 = v42 + v22;
    if (v22)
      v50 = -1;
    else
      v50 = 0;
    v482 = (uint64_t *)(v45 + 2);
    v470 = v43 + v22 - v44;
    v483 = (_OWORD *)a4;
    v488 = v17;
    v498 = v45;
    v499 = v26;
    v500 = v42;
    LODWORD(v478) = v22;
    LODWORD(v477) = v42 + v22;
    LODWORD(v485) = v50;
    do
    {
      if ((int)v48 < (int)v42)
      {
        v51 = a5;
        v52 = (__int16 *)v482 + 2 * (int)v48;
        v53 = (int)v48;
        v54 = v496[20];
        v26 = v499;
        while (1)
        {
          v55 = *(_QWORD *)&v26[8 * *(v52 - 1)];
          v56 = *(_QWORD *)&v26[8 * *v52];
          *(_QWORD *)v504 = 0;
          segmentSinCos(*(_DWORD *)(v55 + 12), *(__int16 **)(v55 + 40), *(_DWORD *)(v56 + 12), *(__int16 **)(v56 + 40), (float *)&v504[1], (float *)v504);
          if (fabsf(*(float *)&v504[1]) >= v54 || *(float *)v504 >= 0.0)
            break;
          v52 += 2;
          ++v53;
          LODWORD(v42) = v500;
          if (v500 == v53)
          {
            v45 = v498;
            a5 = v51;
            goto LABEL_42;
          }
        }
        v45 = v498;
        LODWORD(v42) = v500;
        v48 = v53;
        a5 = v51;
        v50 = v485;
      }
      if ((_DWORD)v48 == (_DWORD)v42)
        break;
      v57 = (__int16 *)(v45 + 4 * (int)v48);
      v58 = v57[1];
      v59 = *(_QWORD *)&v26[8 * *v57];
      v60 = *(_QWORD *)&v26[8 * v58];
      v61 = *(_DWORD *)(v59 + 12);
      v62 = *(__int16 **)(v59 + 40);
      v63 = *(_DWORD *)(v60 + 12);
      v64 = *(__int16 **)(v60 + 40);
      *(_QWORD *)&v486 = v48;
      v15 = calcRotationParity(v61, v62, v63, v64);
      v48 = v486;
      LODWORD(v495) = v15;
      v65 = (v486 + 1);
      if ((int)v65 >= v49)
      {
        v85 = 1;
      }
      else
      {
        LODWORD(v484) = v47;
        v66 = 0;
        v67 = v58;
        v469 = v49 - v486;
        v68 = v496[20];
        LODWORD(v494) = v470 - v486;
        while (1)
        {
          v69 = v65;
          v70 = (v65 + v66++);
          v71 = (unsigned __int16 *)(v498 + 4 * ((int)v70 % (int)v500));
          v72 = *v71;
          v73 = (__int16)v71[1];
          v74 = *(_QWORD *)&v26[8 * (__int16)v72];
          v75 = *(_QWORD *)&v26[8 * v73];
          v76 = *(_DWORD *)(v74 + 12);
          v77 = *(__int16 **)(v74 + 40);
          v78 = *(_DWORD *)(v75 + 12);
          v79 = *(__int16 **)(v75 + 40);
          v497 = calcRotationParity(v76, v77, v78, v79);
          *(_QWORD *)v504 = 0;
          segmentSinCos(v76, v77, v78, v79, (float *)&v504[1], (float *)v504);
          v80 = fabsf(*(float *)&v504[1]) < v68;
          if (*(float *)v504 >= 0.0)
            v80 = 0;
          _ZF = v72 == v67 && v497 == (_DWORD)v495;
          if (!_ZF || v80)
            break;
          v67 = v73;
          v26 = v499;
          v65 = v69;
          if ((_DWORD)v494 == v66)
          {
            a5 = v481;
            a4 = (uint64_t)v483;
            v17 = v488;
            v45 = v498;
            LODWORD(v42) = v500;
            v22 = v478;
            v47 = (int)v484;
            v49 = v477;
            v50 = v485;
            v48 = v486;
            v85 = v469;
            goto LABEL_38;
          }
        }
        v491 = 0;
        v83 = (int)v484;
        v84 = &v493[2 * (int)v484];
        v84[1] = v66;
        *v84 = v486;
        v47 = v83 + 1;
        v85 = v66;
        LODWORD(v65) = v70;
        v48 = v70;
        a5 = v481;
        a4 = (uint64_t)v483;
        v17 = v488;
        v26 = v499;
        v22 = v478;
        v49 = v477;
        v50 = v485;
      }
      v45 = v498;
      LODWORD(v42) = v500;
      if ((_DWORD)v65 == v49)
      {
LABEL_38:
        v86 = v85 + v50;
        v87 = &v493[2 * v47];
        v87[1] = v86;
        *v87 = v48;
        if (v86 << 16 > 0)
          ++v47;
        LODWORD(v65) = v49;
      }
    }
    while ((int)v65 < (int)v42);
LABEL_42:
    if (v22)
    {
      v88 = v47 - 1;
      if (v47 > 1)
      {
        v89 = &v493[2 * v88];
        v90 = *v89;
        v91 = v89[1];
        v92 = v45 + 4 * (v90 + v91);
        v93 = *(unsigned __int16 *)(v92 - 2);
        v94 = (unsigned __int16 *)(v45 + 4 * *v493);
        if (*v94 == v93)
        {
          LODWORD(v484) = v47;
          v95 = (__int16)v94[1];
          v96 = v499;
          v97 = *(_QWORD *)&v499[8 * *(__int16 *)(v92 - 4)];
          v98 = *(_QWORD *)&v499[8 * (__int16)v93];
          v99 = *(_DWORD *)(v98 + 12);
          v100 = *(__int16 **)(v98 + 40);
          v101 = calcRotationParity(*(_DWORD *)(v97 + 12), *(__int16 **)(v97 + 40), v99, v100);
          v102 = *(_QWORD *)&v96[8 * v95];
          LODWORD(v96) = *(_DWORD *)(v102 + 12);
          v103 = *(__int16 **)(v102 + 40);
          v104 = calcRotationParity(v99, v100, (int)v96, v103);
          *(_QWORD *)v504 = 0;
          segmentSinCos(v99, v100, (int)v96, v103, (float *)&v504[1], (float *)v504);
          v105 = fabsf(*(float *)&v504[1]) < v496[20];
          if (*(float *)v504 >= 0.0)
            v105 = 0;
          if (v104 == v101)
          {
            a5 = v481;
            a4 = (uint64_t)v483;
            v17 = v488;
            v45 = v498;
            LODWORD(v42) = v500;
            v47 = (int)v484;
            if (!v105)
            {
              v106 = v493;
              v493[1] += v91;
              *v106 = v90;
              v47 = v88;
            }
          }
          else
          {
            a5 = v481;
            a4 = (uint64_t)v483;
            v17 = v488;
            v45 = v498;
            LODWORD(v42) = v500;
            v47 = (int)v484;
          }
        }
      }
    }
    if (v47 < 1 || (int)v17 >= (int)a5)
      goto LABEL_325;
    v107 = 0;
    v108 = 0;
    v497 = v490 - 1;
    v477 = v45 + 2;
    v494 = v47;
    v109 = v499;
LABEL_54:
    v110 = &v493[2 * v107];
    v111 = *v110;
    v112 = v110[1];
    v113 = v112 + v111;
    if (v491)
    {
      if (v112 == 4)
      {
        v114 = v108;
        v115 = 0;
        v504[0] = 0;
        v501 = 0.0;
        v116 = v477 + 4 * v111;
        do
        {
          if (v111 >= (int)v42)
            v117 = v42;
          else
            v117 = 0;
          v118 = (__int16 *)(v116 - 4 * v117);
          v119 = *(float **)&v109[8 * *(v118 - 1)];
          v120 = *(float **)&v109[8 * *v118];
          v121 = v119[5];
          v122 = v119[6];
          v123 = v119[7];
          v124 = v120[5];
          v125 = v120[6];
          v126 = v120[7];
          v127 = (float)(v121 * v125) - (float)(v124 * v122);
          v128 = (float)((float)(v126 * v122) - (float)(v123 * v125)) / v127;
          v129 = (float)((float)(v124 * v123) - (float)(v121 * v126)) / v127;
          v130 = (float *)&v504[v115 + 1];
          v131 = (float *)(a4 + v115 * 4);
          *v130 = v128;
          v130[1] = v129;
          *v131 = v128;
          v131[1] = v129;
          ++v111;
          v115 += 2;
          v116 += 4;
        }
        while (v111 < v113);
        computePolyAreaAndMetric((float *)&v504[1], (float *)v504, &v501);
        *(float *)&v138 = v501;
        if (v501 >= v14)
        {
          v15 = quadValid(a4, (uint64_t)v496, v138, v132, v133, v134, v135, v136, v137);
          if ((_DWORD)v15)
          {
            a4 += 32;
            v17 = (v17 + 1);
          }
        }
        LODWORD(v42) = v500;
        v108 = v114;
      }
      goto LABEL_323;
    }
    if (v112 < 2)
      goto LABEL_323;
    v488 = v17;
    v482 = &v468;
    v139 = v113 - 1;
    MEMORY[0x1E0C80A78](v15);
    v147 = (float *)(&v468 - 4 * v146);
    if (v143 != 4)
    {
      v148 = v492;
      if (v143 == 3)
      {
        v194 = (float32x2_t *)&v147[8 * v142];
        v109 = v499;
        v195 = *(float32x2_t **)&v499[8 * *(__int16 *)(v144 + 4 * v111)];
        if (v111 + 1 >= v141)
          v196 = v141;
        else
          v196 = 0;
        v197 = v492[v111 + 1 - v196];
        ++v142;
        if (v111 + 2 >= v141)
          v198 = v141;
        else
          v198 = 0;
        v199 = v111 + 2 - v198;
        v200 = *(float32x2_t **)&v499[8 * *(__int16 *)(v144 + 4 * v199 + 2)];
        v201 = v492[v199];
        *v194 = v492[v111];
        v194[1] = v197;
        v194[2] = v201;
        v202 = v200[3];
        v203 = v195[3];
        *(float *)v145.i32 = vmlas_n_f32((float)-v195[2].f32[1] * v202.f32[0], v200[2].f32[1], v203.f32[0]);
        v204.i32[1] = v202.i32[1];
        v204.i32[0] = v200[2].i32[1];
        v205 = vneg_f32((float32x2_t)vrev64_s32(v204));
        v204.i32[0] = vdup_lane_s32((int32x2_t)v203, 1).u32[0];
        v204.i32[1] = v195[2].i32[1];
        v194[3] = vdiv_f32(vmla_f32(vmul_f32(v203, v205), v202, (float32x2_t)v204), (float32x2_t)vdup_lane_s32(v145, 0));
        goto LABEL_249;
      }
      if (v143 == 2)
      {
        v149 = *(__int16 *)(v144 + 4 * v111);
        v150 = *(_QWORD *)&v499[8 * v149];
        if (v141 <= v111)
          v151 = v141;
        else
          v151 = 0;
        v152 = v111 - v151;
        v153 = *(unsigned __int16 *)(v144 + 4 * (v111 - v151));
        if (!*(_WORD *)(v144 + 4 * v152))
          goto LABEL_219;
        if (v152 >= 1)
        {
          v154 = v111 >= 1 ? 0 : v141;
          v155 = v111 + v154 - 1;
          if (v153 == *(unsigned __int16 *)(v144 + 4 * v155 + 2))
          {
            v156 = (float *)&v492[v155];
            v157 = *v156;
            v158 = v156[1];
LABEL_221:
            v346 = &v147[8 * v142];
            *v346 = v157;
            v346[1] = v158;
            v347 = v148[v111];
            if (v111 + 1 >= v141)
              v348 = v141;
            else
              v348 = 0;
            v349 = v111 + 1 - v348;
            v350 = v148[v349];
            *((float32x2_t *)v346 + 1) = v347;
            *((float32x2_t *)v346 + 2) = v350;
            v351 = *(__int16 *)(v144 + 4 * v349 + 2);
            v352 = *(_QWORD *)&v499[8 * v351];
            if (v113 <= v141)
              v353 = 0;
            else
              v353 = v141;
            v354 = v139 - v353;
            v109 = v499;
            v355 = (__int16 *)(v144 + 4 * v354);
            v356 = v355[1];
            if (v497 == v356)
              goto LABEL_246;
            if (v354 < v487)
            {
              v357 = v113 >= v141 ? v141 : 0;
              v358 = v113 - v357;
              if (*(unsigned __int16 *)(v144 + 4 * v358) == (unsigned __int16)v356)
              {
                v359 = (float *)&v148[v358];
                v360 = *v359;
                v361 = v359[1];
LABEL_248:
                ++v142;
                v346[6] = v360;
                v346[7] = v361;
                goto LABEL_249;
              }
            }
            v364 = v142;
            v140 = extendedSegmentTest(*(_QWORD *)&v499[8 * *v355], *(_QWORD *)&v499[8 * v355[1]], *(_QWORD *)&v499[8 * ((v355[1] + 1) % (int)v490)], 1, (uint64_t)v496);
            v142 = v364;
            if (!v140)
            {
LABEL_246:
              v386 = *(float *)(v352 + 20);
              v387 = *(float *)(v352 + 24);
              v388 = *(float *)(v352 + 28);
              v389 = *(_DWORD *)(*(_QWORD *)(v352 + 40) + 4 * *(int *)(v352 + 12) - 4);
              v390 = (float)(v387 * (float)(__int16)v389) - (float)(v386 * (float)(v389 >> 16));
              v384 = -(float)((float)(v387 * v387) + (float)(v386 * v386));
              v360 = (float)((float)(v386 * v388) - (float)(v387 * v390)) / v384;
              v385 = (float)(v386 * v390) + (float)(v387 * v388);
            }
            else
            {
              if ((int)v351 + 1 >= (int)v490)
                v365 = v490;
              else
                v365 = 0;
              v366 = *(_QWORD *)&v109[8 * ((int)v351 + 1 - v365)];
              v367 = *(_QWORD *)(v366 + 40) + 4 * *(int *)(v366 + 12);
              v368 = (float)*(__int16 *)(v367 - 4);
              v369 = (float)*(__int16 *)(v367 - 2);
              v370 = *(_QWORD *)(v352 + 40) + 4 * *(int *)(v352 + 12);
              v371 = (float)*(__int16 *)(v370 - 4);
              v372 = (float)*(__int16 *)(v370 - 2);
              v373 = v371 - v350.f32[0];
              v374 = v372 - v350.f32[1];
              *(float *)&v375 = (float)((float)(v350.f32[0] - v347.f32[0]) * (float)(v372 - v350.f32[1]))
                              - (float)((float)(v371 - v350.f32[0]) * (float)(v350.f32[1] - v347.f32[1]));
              LODWORD(v370) = (__PAIR64__(*(float *)&v375 > 0.0, v375) - COERCE_UNSIGNED_INT(0.0)) >> 32;
              v376 = v368 - v371;
              v377 = v369 - v372;
              *(float *)&v378 = (float)((float)(v371 - v350.f32[0]) * (float)(v369 - v372))
                              - (float)((float)(v368 - v371) * (float)(v372 - v350.f32[1]));
              if ((_DWORD)v370 != (__PAIR64__(*(float *)&v378 > 0.0, v378) - COERCE_UNSIGNED_INT(0.0)) >> 32
                || (v379 = 1.0
                         / sqrtf((float)((float)(v377 * v377) + (float)(v376 * v376))* (float)((float)(v374 * v374) + (float)(v373 * v373))), fabsf((float)((float)(v377 * (float)-v373) + (float)(v374 * v376)) * v379) < v496[20])&& (float)((float)((float)(v377 * v374) + (float)(v373 * v376)) * v379) < 0.0)
              {
                v368 = v371;
                v369 = v372;
              }
              v380 = *(float *)(v352 + 20);
              v381 = *(float *)(v352 + 24);
              v382 = *(float *)(v352 + 28);
              v383 = (float)(v381 * v368) - (float)(v380 * v369);
              v384 = -(float)((float)(v381 * v381) + (float)(v380 * v380));
              v360 = (float)((float)(v380 * v382) - (float)(v381 * v383)) / v384;
              v385 = (float)(v380 * v383) + (float)(v381 * v382);
            }
            v361 = v385 / v384;
            goto LABEL_248;
          }
        }
        v317 = v113 <= v141 ? 0 : v141;
        v318 = v142;
        v140 = extendedSegmentTest(*(_QWORD *)&v499[8 * ((v497 + *(__int16 *)(v144 + 4 * (v139 - v317))) % (int)v490)], *(_QWORD *)&v499[8 * *(__int16 *)(v144 + 4 * (v139 - v317))], *(_QWORD *)&v499[8 * *(__int16 *)(v144 + 4 * (v139 - v317) + 2)], 0, (uint64_t)v496);
        v142 = v318;
        v148 = v492;
        v141 = v500;
        v144 = v498;
        if (v140)
        {
          if ((int)v149 >= 1)
            v319 = 0;
          else
            v319 = v490;
          v320 = *(__int16 **)(*(_QWORD *)&v499[8 * (int)v149 - 8 + 8 * v319] + 40);
          v321 = (float)*v320;
          v322 = (float)v320[1];
          v323 = *(__int16 **)(v150 + 40);
          v324 = (float)*v323;
          v325 = (float)v323[1];
          v326 = (float *)&v492[v111];
          v327 = v326[1];
          v328 = v324 - v321;
          v329 = v325 - v322;
          v330 = *v326 - v324;
          v331 = v327 - v325;
          if (v111 + 1 >= (int)v500)
            v333 = v500;
          else
            v333 = 0;
          *(float *)&v332 = (float)((float)(v324 - v321) * (float)(v327 - v325)) - (float)(v330 * (float)(v325 - v322));
          *(float *)&v334 = (float)(v330 * (float)(v492[v111 + 1 - v333].f32[1] - v327))
                          - (float)((float)(v492[v111 + 1 - v333].f32[0] - *v326) * v331);
          if ((__PAIR64__(*(float *)&v332 > 0.0, v332) - COERCE_UNSIGNED_INT(0.0)) >> 32 != (__PAIR64__(*(float *)&v334 > 0.0, v334)- COERCE_UNSIGNED_INT(0.0)) >> 32|| (v335 = 1.0/ sqrtf((float)((float)(v329 * v329) + (float)(v328 * v328))* (float)((float)(v331 * v331) + (float)(v330 * v330))), fabsf((float)((float)(v329 * v330) - (float)(v328 * v331)) * v335) < v496[20])&& (float)((float)((float)(v329 * v331) + (float)(v328 * v330)) * v335) < 0.0)
          {
            v321 = v324;
            v322 = v325;
          }
          v336 = *(float *)(v150 + 20);
          v337 = *(float *)(v150 + 24);
          v338 = *(float *)(v150 + 28);
          v339 = (float)(v337 * v321) - (float)(v336 * v322);
          v340 = -(float)((float)(v337 * v337) + (float)(v336 * v336));
          v157 = (float)((float)(v336 * v338) - (float)(v337 * v339)) / v340;
          v341 = (float)(v336 * v339) + (float)(v337 * v338);
        }
        else
        {
LABEL_219:
          v342 = *(float *)(v150 + 20);
          v343 = *(float *)(v150 + 24);
          v344 = *(float *)(v150 + 28);
          v345 = (float)(v343 * (float)(__int16)**(_DWORD **)(v150 + 40))
               - (float)(v342 * (float)(**(int **)(v150 + 40) >> 16));
          v340 = -(float)((float)(v343 * v343) + (float)(v342 * v342));
          v157 = (float)((float)(v342 * v344) - (float)(v343 * v345)) / v340;
          v341 = (float)(v342 * v345) + (float)(v343 * v344);
        }
        v158 = v341 / v340;
        goto LABEL_221;
      }
      v206 = v113 - 4;
      if (v113 - 4 < v111)
        goto LABEL_172;
      v483 = (_OWORD *)a4;
      v207 = v142;
      LODWORD(v495) = v143 + v111 - 3;
      if (v113 >= v141)
        v208 = v141;
      else
        v208 = 0;
      *(_QWORD *)&v485 = v113 - v208;
      *(_QWORD *)&v486 = &v492[v485];
      v209 = (uint64_t)&v147[8 * v142 + 4];
      v210 = v111;
      while (1)
      {
        if (v210 >= v141)
          v211 = v141;
        else
          v211 = 0;
        v212 = v210;
        v213 = v210 - (uint64_t)v211;
        v214 = v210 + 3;
        if ((int)v214 >= v141)
          v215 = v141;
        else
          v215 = 0;
        v216 = v214 - v215;
        if ((int)v213 >= v141)
          v217 = v141;
        else
          v217 = 0;
        v218 = v213 - v217;
        v219 = *(unsigned __int16 *)(v144 + 4 * ((int)v213 - v217));
        if (*(_WORD *)(v144 + 4 * v218))
        {
          if (v218 >= 1
            && ((int)v213 <= 0 ? (v220 = v141) : (v220 = 0),
                v219 == *(unsigned __int16 *)(v144 + 4 * ((int)v213 + v220 - 1) + 2)))
          {
            if ((_DWORD)v213 == v111)
            {
              if (v210 <= 0)
                v221 = v141;
              else
                v221 = 0;
              v222 = v210++ + (uint64_t)v221 - 1;
              if (v210 >= v141)
                v223 = v141;
              else
                v223 = 0;
              v224 = (float *)&v148[v222];
              v225 = (float *)&v148[v213];
              v226 = (float *)&v148[v210 - v223];
              v227 = *v224;
              v228 = *v225;
              v229 = v225[1];
              v230 = *v226;
              v231 = v226[1];
              v232 = *v225 - *v224;
              v233 = v229 - v224[1];
              v234 = *v226 - *v225;
              v235 = v231 - v229;
              v236 = v212 + 2;
              if (v212 + 2 >= v141)
                v237 = v141;
              else
                v237 = 0;
              *(float *)&v238 = (float)(v234 * (float)(v148[v236 - v237].f32[1] - v231))
                              - (float)((float)(v148[v236 - v237].f32[0] - v230) * v235);
              if ((__PAIR64__((float)((float)(v232 * v235) - (float)(v234 * v233)) > 0.0, (float)(v232 * v235) - (float)(v234 * v233))- COERCE_UNSIGNED_INT(0.0)) >> 32 != (__PAIR64__(*(float *)&v238 > 0.0, v238)- COERCE_UNSIGNED_INT(0.0)) >> 32|| (v239 = 1.0/ sqrtf((float)((float)(v233 * v233) + (float)(v232 * v232))* (float)((float)(v235 * v235) + (float)(v234 * v234))), fabsf((float)((float)(v233 * v234) - (float)(v232 * v235)) * v239) < v496[20])&& (float)((float)((float)(v233 * v235) + (float)(v232 * v234)) * v239) < 0.0)
              {
                v227 = v228;
                v222 = v213;
              }
              v240 = *(float **)&v499[8 * *(__int16 *)(v144 + 4 * v213 + 2)];
              v241 = v240[5];
              v242 = v240[6];
              v243 = v240[7];
              v244 = (float)(v242 * v227) - (float)(v241 * v148[v222].f32[1]);
              v245 = -(float)((float)(v242 * v242) + (float)(v241 * v241));
              v246 = (float)((float)(v241 * v243) - (float)(v242 * v244)) / v245;
              v247 = (float)((float)(v241 * v244) + (float)(v242 * v243)) / v245;
              goto LABEL_146;
            }
          }
          else
          {
            if ((int)v216 >= v141)
              v248 = v141;
            else
              v248 = 0;
            v140 = extendedSegmentTest(*(_QWORD *)&v499[8 * ((v497 + *(__int16 *)(v144 + 4 * ((int)v216 - v248))) % (int)v490)], *(_QWORD *)&v499[8 * *(__int16 *)(v144 + 4 * ((int)v216 - v248))], *(_QWORD *)&v499[8 * *(__int16 *)(v144 + 4 * ((int)v216 - v248) + 2)], 0, (uint64_t)v496);
            v148 = v492;
            v141 = v500;
            v144 = v498;
          }
        }
        v249 = (float *)&v148[v213];
        v246 = *v249;
        v247 = v249[1];
        ++v210;
        v236 = v212 + 2;
LABEL_146:
        *(float *)(v209 - 16) = v246;
        *(float *)(v209 - 12) = v247;
        if (v210 >= v141)
          v250 = v141;
        else
          v250 = 0;
        v251 = v148[v210 - v250];
        if (v236 >= v141)
          v252 = v141;
        else
          v252 = 0;
        v253 = v148[v236 - v252];
        *(float32x2_t *)(v209 - 8) = v251;
        *(float32x2_t *)v209 = v253;
        if ((int)v216 >= v141)
          v254 = v141;
        else
          v254 = 0;
        v255 = v216 - v254;
        v256 = (__int16 *)(v144 + 4 * ((int)v216 - v254));
        v257 = v256[1];
        if (v497 == v257)
          goto LABEL_168;
        if (v255 >= v487
          || ((int)v216 + 1 >= v141 ? (v258 = v141) : (v258 = 0),
              *(unsigned __int16 *)(v144 + 4 * ((int)v216 + 1 - v258)) != (unsigned __int16)v257))
        {
          v140 = extendedSegmentTest(*(_QWORD *)&v499[8 * *v256], *(_QWORD *)&v499[8 * v256[1]], *(_QWORD *)&v499[8 * ((v256[1] + 1) % (int)v490)], 1, (uint64_t)v496);
          v148 = v492;
          v141 = v500;
          v144 = v498;
LABEL_168:
          v279 = (float *)&v148[v216];
          v277 = *v279;
          v278 = v279[1];
          goto LABEL_169;
        }
        if (v212 != v206)
          goto LABEL_168;
        v259 = v253;
        v260 = (float *)&v148[v216];
        v261 = *v260;
        v262 = v260[1];
        v263 = *(float *)v486;
        v264 = *v260 - v259.f32[0];
        v265 = v262 - v259.f32[1];
        v266 = *(float *)v486 - *v260;
        v267 = *(float *)(v486 + 4) - v262;
        *(float *)&v268 = (float)((float)(v259.f32[0] - v251.f32[0]) * v265)
                        - (float)(v264 * (float)(v259.f32[1] - v251.f32[1]));
        if ((__PAIR64__((float)((float)(v264 * v267) - (float)(v266 * v265)) > 0.0, (float)(v264 * v267) - (float)(v266 * v265))- COERCE_UNSIGNED_INT(0.0)) >> 32 != (__PAIR64__(*(float *)&v268 > 0.0, v268) - COERCE_UNSIGNED_INT(0.0)) >> 32)goto LABEL_165;
        v269 = 1.0
             / sqrtf((float)((float)(v265 * v265) + (float)(v264 * v264))* (float)((float)(v267 * v267) + (float)(v266 * v266)));
        if (fabsf((float)((float)(v267 * (float)-v264) + (float)(v265 * v266)) * v269) >= v496[20])
        {
          v270 = v485;
          goto LABEL_166;
        }
        v270 = v485;
        if ((float)((float)((float)(v265 * v267) + (float)(v264 * v266)) * v269) < 0.0)
        {
LABEL_165:
          v263 = v261;
          v270 = v216;
        }
LABEL_166:
        v271 = *(float **)&v499[8 * *(__int16 *)(v144 + 4 * v216)];
        v272 = v271[5];
        v273 = v271[6];
        v274 = v271[7];
        v275 = (float)(v273 * v263) - (float)(v272 * v148[v270].f32[1]);
        v276 = -(float)((float)(v273 * v273) + (float)(v272 * v272));
        v277 = (float)((float)(v272 * v274) - (float)(v273 * v275)) / v276;
        v278 = (float)((float)(v272 * v275) + (float)(v273 * v274)) / v276;
LABEL_169:
        *(float *)(v209 + 8) = v277;
        *(float *)(v209 + 12) = v278;
        v209 += 32;
        ++v207;
        if (v210 == (_DWORD)v495)
        {
          v142 = v207;
          a4 = (uint64_t)v483;
LABEL_172:
          v109 = v499;
LABEL_249:
          v391 = v142;
          MEMORY[0x1E0C80A78](v140);
          MEMORY[0x1E0C80A78](v392);
          v394 = (float *)((char *)&v468 - v393);
          MEMORY[0x1E0C80A78](v395);
          if ((int)v108 < 1)
          {
            v17 = v488;
          }
          else
          {
            v397 = &v468 - 4 * v391;
            v478 = v108;
            v483 = (_OWORD *)a4;
            v398 = v147;
            v484 = v396;
            v399 = v396;
            v400 = v394;
            v401 = v391;
            do
            {
              computePolyAreaAndMetric(v398, v399++, v400++);
              v398 += 8;
              --v401;
            }
            while (v401);
            v408 = 0;
            v409 = 0;
            v410 = 0.0;
            v495 = 0xFFFFFFFFLL;
            do
            {
              if (v394[v408] >= v14)
              {
                v411 = (float32x2_t *)&v147[8 * v408];
                v412 = v411->f32[1];
                v413 = v411[3].f32[0];
                v414 = v411[3].f32[1];
                v415 = v413 - v411[2].f32[0];
                v416 = v414 - v411[2].f32[1];
                *(float *)&v406 = v411->f32[0] - v413;
                v417 = v412 - v414;
                v418 = (float)(v416 * v416) + (float)(v415 * v415);
                *(float *)&v404 = (float)(v417 * v417) + (float)(*(float *)&v406 * *(float *)&v406);
                *(float *)&v405 = -(float)(*(float *)&v406 * v416);
                v419 = fabsf(*(float *)&v405 + (float)(v415 * v417));
                v420 = v419 / sqrt((float)(v418 * *(float *)&v404));
                *(float *)&v420 = v420;
                v421 = fabsf((float)(*(float *)&v406 * (float)(v411[1].f32[1] - v412))- (float)((float)(v411[1].f32[0] - v411->f32[0]) * v417))/ sqrt((float)((float)((float)((float)(v411[1].f32[1] - v412) * (float)(v411[1].f32[1] - v412))+ (float)((float)(v411[1].f32[0] - v411->f32[0])* (float)(v411[1].f32[0] - v411->f32[0])))* *(float *)&v404));
                if (v12 <= *(float *)&v420 && v12 <= v421)
                {
                  *(int32x2_t *)&v402 = vcvt_s32_f32(vrnda_f32(v411[3]));
                  *(int32x2_t *)&v403 = vcvt_s32_f32(vrnda_f32(*v411));
                  *(int32x2_t *)&v407 = vabd_s32(*(int32x2_t *)&v403, *(int32x2_t *)&v402);
                  if (v407 <= DWORD1(v407))
                    v423 = DWORD1(v407);
                  else
                    v423 = v407;
                  if (v423 < 0xC)
                    goto LABEL_310;
                  v404 = COERCE_DOUBLE(vcvt_f32_s32(*(int32x2_t *)&v402));
                  v424 = vcvt_f32_s32(*(int32x2_t *)&v403);
                  *(float *)&v419 = (float)(*((_DWORD *)v489 + 4) - 2);
                  *(float *)&v405 = (float)(*((_DWORD *)v489 + 2) - 2);
                  v425 = (float32x2_t)vzip1_s32((int32x2_t)v424, *(int32x2_t *)&v404);
                  __asm { FMOV            V7.2S, #1.0 }
                  v430 = (float32x2_t)vzip2_s32((int32x2_t)v424, *(int32x2_t *)&v404);
                  v406 = COERCE_DOUBLE(vorr_s8((int8x8_t)vsub_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v425, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v419, 0)), (int8x8_t)0x200000002), vcgt_f32(_D7, v425)), vorr_s8(vand_s8((int8x8_t)vcgt_f32(_D7, v430), (int8x8_t)0x400000004), vand_s8((int8x8_t)vcgt_f32(v430, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v405, 0)), (int8x8_t)0x800000008))));
                  v431 = HIDWORD(v406);
                  v432 = LODWORD(v406);
                  if (v406 == 0.0)
                  {
                    v486 = v407;
                    v445 = vuzp1_s16(*(int16x4_t *)&v403, *(int16x4_t *)&v402);
                    *(_QWORD *)&v403 = 0xFFFFFFFF00000001;
                    v485 = v403;
                    goto LABEL_291;
                  }
                  if ((LODWORD(v406) & HIDWORD(v406)) == 0)
                  {
                    v433 = 0;
                    v434 = 0;
                    v435 = v424.f32[1];
                    v436 = *((float *)&v404 + 1);
                    v437.i32[0] = 0;
                    LODWORD(v438) = LODWORD(v404);
                    v439 = 0.0;
                    v440.i32[0] = v424.i32[0];
                    do
                    {
                      if (v431)
                        v441 = v431;
                      else
                        v441 = v432;
                      v442 = v435 - v436;
                      v443 = v440.f32[0] - *(float *)&v438;
                      if ((v441 & 4) != 0)
                      {
                        v439 = 1.0;
                        v437.f32[0] = *(float *)&v438 + (float)((float)((float)(1.0 - v436) * v443) / v442);
                      }
                      else
                      {
                        if ((v441 & 1) != 0)
                        {
                          v437.f32[0] = 1.0;
                          v439 = v436 + (float)((float)((float)(1.0 - *(float *)&v438) * v442) / v443);
                        }
                        if ((v441 & 2) != 0)
                        {
                          v437.f32[0] = (float)(*((_DWORD *)v489 + 4) - 2);
                          v439 = v436 + (float)((float)((float)(*(float *)&v419 - *(float *)&v438) * v442) / v443);
                        }
                        v444 = *(float *)&v438 + (float)((float)((float)(*(float *)&v405 - v436) * v443) / v442);
                        if ((v441 & 8) != 0)
                        {
                          v437.f32[0] = v444;
                          v439 = (float)(*((_DWORD *)v489 + 2) - 2);
                        }
                      }
                      if (v441 == v431)
                      {
                        v431 = (v437.f32[0] < 1.0) | (2 * (v437.f32[0] > *(float *)&v419)) | (4 * (v439 < 1.0)) | (8 * (v439 > *(float *)&v405));
                        if (!(v432 | v431))
                        {
                          v437.f32[1] = v439;
                          v404 = *(double *)&v437;
                          if ((v434 & 1) == 0)
                            goto LABEL_290;
LABEL_289:
                          v440.f32[1] = v435;
                          *(double *)&v437 = v404;
                          v424 = v440;
LABEL_290:
                          v446 = (int16x4_t)vcvt_s32_f32(vrnda_f32(v424));
                          v447 = (int16x4_t)vcvt_s32_f32(vrnda_f32(v437));
                          v448.i16[0] = v446.i16[2];
                          v448.i16[1] = v446.i16[0];
                          v448.i16[2] = v447.i16[2];
                          v448.i16[3] = v447.i16[0];
                          v449.i16[0] = WORD2(v403);
                          v449.i16[1] = v403;
                          v449.i16[2] = WORD2(v402);
                          v449.i16[3] = v402;
                          *(int16x4_t *)&v403 = vceq_s16(v448, v449);
                          v448.i32[0] = WORD3(v403);
                          v448.i32[1] = WORD1(v403);
                          LODWORD(v402) = WORD2(v403);
                          DWORD1(v402) = (unsigned __int16)v403;
                          *(int8x8_t *)&v402 = vand_s8((int8x8_t)v448, *(int8x8_t *)&v402);
                          LODWORD(v403) = vand_s8(*(int8x8_t *)&v402, (int8x8_t)0x100000001).u32[0];
                          DWORD1(v403) = vcltz_s32(vshl_n_s32(*(int32x2_t *)&v402, 0x1FuLL)).i32[1];
                          v485 = v403;
                          *(int32x2_t *)&v402 = vabd_s32((int32x2_t)v446, (int32x2_t)v447);
                          v486 = v402;
                          v445 = vuzp1_s16(v446, v447);
LABEL_291:
                          v15 = BresenhamCoords(v445.i32[1], v445.i32[0], (uint64_t)v480);
                          v420 = *(double *)&v485;
                          v450 = (v15 + DWORD1(v485));
                          v451 = *((_DWORD *)v489 + 6);
                          v452 = *v489;
                          v403 = v486;
                          *(uint32x2_t *)&v402 = vcgt_u32(*(uint32x2_t *)&v486, (uint32x2_t)vdup_lane_s32(*(int32x2_t *)&v486, 1));
                          if ((v402 & 1) != 0)
                          {
                            if ((int)v485 < (int)v450)
                            {
                              v453 = 0;
                              v454 = v450 - v485;
                              v455 = &v471[4 * v485];
                              do
                              {
                                v456 = *((__int16 *)v455 - 1) + *(__int16 *)v455 * (uint64_t)v451;
                                v457 = *(_BYTE *)(v452 + v456)
                                    || *(_BYTE *)(v452 + (int)v456 + (uint64_t)v451)
                                    || *(unsigned __int8 *)(v452 + (int)v456 - (uint64_t)v451) != 0;
                                v455 += 4;
                                v453 += v457;
                                --v454;
                              }
                              while (v454);
                              goto LABEL_309;
                            }
LABEL_308:
                            v453 = 0;
                            goto LABEL_309;
                          }
                          if ((int)v485 >= (int)v450)
                            goto LABEL_308;
                          v453 = 0;
                          v458 = v450 - v485;
                          v459 = &v471[4 * v485];
                          do
                          {
                            v460 = *((__int16 *)v459 - 1) + *(__int16 *)v459 * (uint64_t)v451;
                            v461 = *(_BYTE *)(v452 + v460)
                                || *(_BYTE *)(v452 + (int)v460 + 1)
                                || *(unsigned __int8 *)((int)v460 + v452 - 1) != 0;
                            v459 += 4;
                            v453 += v461;
                            --v458;
                          }
                          while (v458);
LABEL_309:
                          *(float *)&v402 = (float)v453;
                          *(float *)&v403 = roundf(v13 * (float)(int)(v423 - 1));
                          if (*(float *)&v403 <= (float)v453)
                          {
LABEL_310:
                            v15 = quadValid((uint64_t)&v147[8 * v408], (uint64_t)v496, *(double *)&v402, *(double *)&v403, v420, v404, v419, v405, v406);
                            if ((_DWORD)v15)
                            {
                              v462 = &v397[4 * v409];
                              v402 = *(_OWORD *)v411->f32;
                              v403 = *(_OWORD *)v411[2].f32;
                              *(_OWORD *)v462 = *(_OWORD *)v411->f32;
                              *((_OWORD *)v462 + 1) = v403;
                              if (v484[v408] <= v410)
                              {
                                v463 = v495;
                              }
                              else
                              {
                                v410 = v484[v408];
                                v463 = v409;
                              }
                              v495 = v463;
                              ++v409;
                            }
                          }
                          break;
                        }
                        v433 = 1;
                        v436 = v439;
                        LODWORD(v438) = v437.i32[0];
                      }
                      else
                      {
                        v432 = (*(float *)&v438 < 1.0) | (2 * (*(float *)&v438 > *(float *)&v419)) | (4 * (v436 < 1.0)) | (8 * (v436 > *(float *)&v405));
                        if (!(v432 | v431))
                        {
                          *((float *)&v438 + 1) = v436;
                          if ((v433 & 1) != 0)
                            v404 = v438;
                          v435 = v439;
                          v440.i32[0] = v437.i32[0];
                          goto LABEL_289;
                        }
                        v434 = 1;
                        v435 = v439;
                        v440.i32[0] = v437.i32[0];
                      }
                    }
                    while ((v432 & v431) <= 0);
                  }
                  v109 = v499;
                }
              }
              ++v408;
            }
            while (v408 != v391);
            if (v409 <= 0)
            {
              a4 = (uint64_t)v483;
              v17 = v488;
            }
            else
            {
              v464 = &v397[4 * (int)v495];
              v465 = *((_OWORD *)v464 + 1);
              v466 = v483;
              *v483 = *(_OWORD *)v464;
              v466[1] = v465;
              a4 = (uint64_t)(v466 + 2);
              v17 = v488 + 1;
            }
            LODWORD(v42) = v500;
            v108 = v478;
          }
          a5 = v481;
LABEL_323:
          if (++v107 >= v494 || (int)v17 >= (int)a5)
          {
LABEL_325:
            v16 = v476;
LABEL_326:
            if (++v16 == v473)
            {
              v15 = v503;
              v11 = v480;
              if (v503)
                goto LABEL_328;
              goto LABEL_329;
            }
            goto LABEL_3;
          }
          goto LABEL_54;
        }
      }
    }
    if (v141 <= v111)
      v159 = v141;
    else
      v159 = 0;
    v160 = v111 - v159;
    v161 = *(unsigned __int16 *)(v144 + 4 * (v111 - v159));
    v162 = v492;
    if (*(_WORD *)(v144 + 4 * v160))
    {
      if (v160 >= 1)
      {
        v163 = v111 >= 1 ? 0 : v141;
        v164 = v111 + (uint64_t)v163 - 1;
        if (v161 == *(unsigned __int16 *)(v144 + 4 * v164 + 2))
        {
          v165 = v111 + 1;
          if (v111 + 1 >= v141)
            v166 = v141;
          else
            v166 = 0;
          v167 = (float *)&v492[v164];
          v168 = (float *)&v492[v111];
          v169 = (float *)&v492[v165 - v166];
          v170 = *v167;
          v171 = v167[1];
          v172 = *v168;
          v173 = v168[1];
          v174 = *v169;
          v175 = v169[1];
          v176 = *v168 - *v167;
          v177 = v173 - v171;
          v178 = *v169 - *v168;
          v180 = v111 + 2;
          if (v111 + 2 >= v141)
            v181 = v141;
          else
            v181 = 0;
          *(float *)&v182 = (float)(v178 * (float)(v492[v180 - v181].f32[1] - v175))
                          - (float)((float)(v492[v180 - v181].f32[0] - v174) * (float)(v175 - v173));
          *(float *)&v179 = (float)(v176 * (float)(v175 - v173)) - (float)(v178 * (float)(v173 - v171));
          if ((__PAIR64__(*(float *)&v179 > 0.0, v179) - COERCE_UNSIGNED_INT(0.0)) >> 32 != (__PAIR64__(*(float *)&v182 > 0.0, v182)- COERCE_UNSIGNED_INT(0.0)) >> 32|| (v183 = v170 - v172, v184 = v171 - v173, v185 = 1.0/ sqrtf((float)((float)(v177 * v177) + (float)(v176 * v176))* (float)((float)(v184 * v184) + (float)(v183 * v183))), fabsf((float)((float)(v177 * (float)(v170 - v172)) - (float)(v176 * v184)) * v185) < v496[20])&& (float)((float)((float)(v177 * v184) + (float)(v176 * v183)) * v185) < 0.0)
          {
            v170 = v172;
            v164 = v111;
          }
          v186 = *(float **)&v499[8 * *(__int16 *)(v144 + 4 * v111 + 2)];
          v187 = v186[5];
          v188 = v186[6];
          v189 = v186[7];
          v190 = (float)(v188 * v170) - (float)(v187 * v492[v164].f32[1]);
          v191 = -(float)((float)(v188 * v188) + (float)(v187 * v187));
          v192 = (float)((float)(v187 * v189) - (float)(v188 * v190)) / v191;
          v193 = (float)((float)(v187 * v190) + (float)(v188 * v189)) / v191;
LABEL_178:
          v283 = &v147[8 * v142];
          *v283 = v192;
          v283[1] = v193;
          if (v165 >= v141)
            v284 = v141;
          else
            v284 = 0;
          v285 = v162[v165 - v284];
          if (v180 >= v141)
            v286 = v141;
          else
            v286 = 0;
          v287 = v162[v180 - v286];
          *((float32x2_t *)v283 + 1) = v285;
          *((float32x2_t *)v283 + 2) = v287;
          if (v111 + 3 >= v141)
            v288 = v141;
          else
            v288 = 0;
          v289 = v111 + 3 - v288;
          v290 = v289;
          if (v113 <= v141)
            v291 = 0;
          else
            v291 = v141;
          v292 = v139 - v291;
          v293 = (__int16 *)(v144 + 4 * (v139 - v291));
          v294 = v293[1];
          v109 = v499;
          if (v497 != v294)
          {
            if (v292 < v487)
            {
              v295 = v113 >= v141 ? v141 : 0;
              if (*(unsigned __int16 *)(v144 + 4 * (v113 - v295)) == (unsigned __int16)v294)
              {
                v296 = v287.f32[0];
                v297 = v285;
                if (v111 + 4 >= v141)
                  v298 = v141;
                else
                  v298 = 0;
                v287.i32[0] = v111 + 4 - v298;
                v299 = (float *)&v162[v289];
                v300 = (float *)&v162[v287.i32[0]];
                v301 = v299[1];
                v302 = *v300;
                v303 = *v299 - v296;
                v304 = v301 - v287.f32[1];
                v305 = *v300 - *v299;
                v306 = v300[1] - v301;
                *(float *)&v307 = (float)((float)(v296 - v297.f32[0]) * v304)
                                - (float)(v303 * (float)(v287.f32[1] - v297.f32[1]));
                if ((__PAIR64__((float)((float)(v303 * v306) - (float)(v305 * v304)) > 0.0, (float)(v303 * v306) - (float)(v305 * v304))- COERCE_UNSIGNED_INT(0.0)) >> 32 != (__PAIR64__(*(float *)&v307 > 0.0, v307)- COERCE_UNSIGNED_INT(0.0)) >> 32|| (v287 = (float32x2_t)v287.i32[0], v308 = 1.0/ sqrtf((float)((float)(v304 * v304) + (float)(v303 * v303))* (float)((float)(v306 * v306) + (float)(v305 * v305))), fabsf((float)((float)(v306 * (float)-v303) + (float)(v304 * v305)) * v308) < v496[20])&& (float)((float)((float)(v304 * v306) + (float)(v303 * v305)) * v308) < 0.0)
                {
                  v302 = *v299;
                  v287 = (float32x2_t)v289;
                }
                v309 = *(float **)&v499[8 * *(__int16 *)(v144 + 4 * v289)];
                v310 = v309[5];
                v311 = v309[6];
                v312 = v309[7];
                v313 = (float)(v311 * v302) - (float)(v310 * v162[*(_QWORD *)&v287].f32[1]);
                v314 = -(float)((float)(v311 * v311) + (float)(v310 * v310));
                v315 = (float)((float)(v310 * v312) - (float)(v311 * v313)) / v314;
                v316 = (float)((float)(v310 * v313) + (float)(v311 * v312)) / v314;
                goto LABEL_236;
              }
            }
            v362 = v142;
            v140 = extendedSegmentTest(*(_QWORD *)&v499[8 * *v293], *(_QWORD *)&v499[8 * v293[1]], *(_QWORD *)&v499[8 * ((v293[1] + 1) % (int)v490)], 1, (uint64_t)v496);
            v142 = v362;
            v162 = v492;
          }
          v363 = (float *)&v162[v290];
          v315 = *v363;
          v316 = v363[1];
LABEL_236:
          ++v142;
          v283[6] = v315;
          v283[7] = v316;
          goto LABEL_249;
        }
      }
      if (v113 <= v141)
        v280 = 0;
      else
        v280 = v141;
      v281 = v142;
      v140 = extendedSegmentTest(*(_QWORD *)&v499[8 * ((v497 + *(__int16 *)(v144 + 4 * (v139 - v280))) % (int)v490)], *(_QWORD *)&v499[8 * *(__int16 *)(v144 + 4 * (v139 - v280))], *(_QWORD *)&v499[8 * *(__int16 *)(v144 + 4 * (v139 - v280) + 2)], 0, (uint64_t)v496);
      v142 = v281;
      v162 = v492;
      v141 = v500;
      v144 = v498;
    }
    v282 = (float *)&v162[v111];
    v192 = *v282;
    v193 = v282[1];
    v165 = v111 + 1;
    v180 = v111 + 2;
    goto LABEL_178;
  }
  v17 = 0;
  if (v15)
LABEL_328:
    free((void *)v15);
LABEL_329:
  if (v11)
    free(v11);
  return v17;
}

BOOL quadValid(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  int32x2_t v9;
  int32x2_t v10;
  float v11;
  float v12;
  float *v13;
  uint64_t i;
  float v15;
  float v16;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float v41;

  v11 = *(float *)(a2 + 96) - *(float *)(a2 + 20);
  if (v11 < 0.0)
    v11 = 0.0;
  v12 = v11 * v11;
  v13 = (float *)(a1 + 4);
  for (i = 1; i != 5; ++i)
  {
    v15 = (float)((float)(*v13 - *(float *)(a1 + 8 * (i & 3) + 4)) * (float)(*v13 - *(float *)(a1 + 8 * (i & 3) + 4)))
        + (float)((float)(*(v13 - 1) - *(float *)(a1 + 8 * (i & 3))) * (float)(*(v13 - 1) - *(float *)(a1 + 8 * (i & 3))));
    v13 += 2;
    if (v15 < v12)
      return 0;
  }
  v16 = *(float *)(a2 + 52);
  if (v16 < 0.0)
    return 1;
  LODWORD(a4) = *(_DWORD *)(a2 + 56);
  LODWORD(a5) = *(_DWORD *)(a2 + 60);
  v18 = *(float *)a1 - *(float *)&a4;
  *(float *)&a7 = *(float *)(a1 + 4) - *(float *)&a5;
  *(float *)&a8 = *(float *)(a1 + 16) - *(float *)&a4;
  *(float *)&a9 = *(float *)(a1 + 20) - *(float *)&a5;
  v19.i32[0] = *(_DWORD *)(a1 + 24);
  v20.i32[0] = *(_DWORD *)(a1 + 28);
  *(float *)v9.i32 = -*(float *)&a7;
  *(float *)v10.i32 = -v18;
  v19.i32[1] = *(_DWORD *)(a1 + 8);
  v21 = vsub_f32(v19, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0));
  v20.i32[1] = *(_DWORD *)(a1 + 12);
  v22 = vsub_f32(v20, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0));
  v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v24 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
  v25 = vmls_lane_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(v22, -(float)(v18 - *(float *)&a8)), v21, *(float *)&a7 - *(float *)&a9), v23, v18), v24, *(float32x2_t *)&a7, 0);
  v26 = (float32x2_t)vrev64_s32((int32x2_t)v22);
  v27 = vmla_f32(vmul_f32(v22, vneg_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v21, v24)))), v21, vsub_f32(v26, v23));
  v28 = (float32x2_t)vrev64_s32((int32x2_t)v21);
  v29 = vdiv_f32(v25, vmls_lane_f32(vmla_n_f32(v27, v28, *(float *)&a9), v26, *(float32x2_t *)&a8, 0));
  __asm
  {
    FMOV            V5.2S, #-1.0
    FMOV            V7.2S, #1.0
  }
  v36 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3BA3D70Au), vabs_f32(vadd_f32(v29, _D5))), _D7, (int8x8_t)v29);
  v37 = vadd_f32(v36, _D5);
  v38 = vmla_f32((float32x2_t)vdup_lane_s32(v9, 0), v26, v36);
  v39 = vmla_f32((float32x2_t)vdup_lane_s32(v10, 0), v28, v36);
  v40 = vmla_f32(vmla_f32(vmul_f32(v38, v38), v37, vmul_n_f32(v37, v16 * v16)), v39, v39);
  v41 = sqrtf(vdiv_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).f32[0]);
  if (v41 > 1.0)
    v41 = 1.0 / v41;
  if (v41 < *(float *)(a2 + 44))
    return 0;
  return v41 <= *(float *)(a2 + 48);
}

void sub_1A13CD588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13CD768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13CD974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13CD9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13CDB50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13CDC04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13CDC98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

FILE *ImageProcessing_save(FILE *result, _QWORD *a2, int a3)
{
  uint64_t *v4;
  unint64_t *v5;
  FILE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int __ptr;

  if (result)
  {
    if (a2)
    {
      if (*a2)
      {
        v4 = a2 + 2;
        if (a2[2])
        {
          v5 = a2 + 1;
          if (a2[1])
          {
            if (a2[3] >= 2uLL)
            {
              result = fopen((const char *)result, "wb");
              if (result)
              {
                v7 = result;
                if (!*a2 || !*v4 || !*v5 || a2[3] < 2uLL)
                  return (FILE *)fclose(v7);
                if ((a3 & 1) != 0)
                {
                  v8 = 1;
                }
                else if ((a3 & 0x3E) != 0)
                {
                  v8 = 4;
                }
                else
                {
                  if ((a3 & 0x3C0) == 0)
                  {
                    syslog(5, "ERROR: Invalid image type");
                    return (FILE *)fclose(v7);
                  }
                  v8 = 16;
                }
                __ptr = 0;
                if (fwrite(&__ptr, 4uLL, 1uLL, result) == 1)
                {
                  v16 = a3;
                  if (fwrite(&v16, 4uLL, 1uLL, v7) == 1
                    && fwrite(a2 + 2, 8uLL, 1uLL, v7) == 1
                    && fwrite(a2 + 1, 8uLL, 1uLL, v7) == 1)
                  {
                    v15 = a2[3];
                    if (fwrite(&v15, 8uLL, 1uLL, v7) == 1)
                    {
                      v9 = (char *)*a2;
                      if (*a2)
                      {
                        v10 = *v4;
                        if (*v4)
                        {
                          v11 = *v5;
                          if (*v5)
                          {
                            v12 = a2[3];
                            if (v12 >= 2)
                            {
                              if (v11 < 2)
                              {
                                v13 = 0;
                                goto LABEL_35;
                              }
                              if (v12 * (v11 - 1) == fwrite(v9, 1uLL, v12 * (v11 - 1), v7) && *v5)
                              {
                                v9 = (char *)*a2;
                                v13 = *v5 - 1;
                                v10 = a2[2];
                                v12 = a2[3];
LABEL_35:
                                v14 = v10 * v8;
                                if (v10 * v8 == fwrite(&v9[v12 * v13], 1uLL, v10 * v8, v7) && a2[3] > v14)
                                {
                                  LOBYTE(v15) = 0;
                                  do
                                  {
                                    if (fwrite(&v15, 1uLL, 1uLL, v7) != 1)
                                      break;
                                    ++v14;
                                  }
                                  while (v14 < a2[3]);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                return (FILE *)fclose(v7);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

const char *CVML_getStatusDescription(unint64_t a1)
{
  const char *v1;

  v1 = "Not supported error";
  switch(a1)
  {
    case 0x59u:
      return v1;
    case 0x5Au:
      v1 = "General error";
      break;
    case 0x5Bu:
      v1 = "Espresso error";
      break;
    case 0x5Cu:
      v1 = "incorrect binserializer key";
      break;
    case 0x5Du:
      v1 = "small sparsity error";
      break;
    case 0x5Eu:
      v1 = "feature extraction error";
      break;
    case 0x5Fu:
      v1 = "initialization error";
      break;
    case 0x60u:
      v1 = "no saved state to revert";
      break;
    case 0x61u:
      v1 = "nominal distance not changed";
      break;
    case 0x62u:
      v1 = "batch size violation";
      break;
    case 0x63u:
      v1 = "computation kill request was issued";
      break;
    case 0x64u:
      v1 = "too few IDs to build VIP model";
      break;
    case 0x65u:
      v1 = "video error";
      break;
    case 0x66u:
      v1 = "error with projection computation";
      break;
    case 0x67u:
      v1 = "missing positional parameter";
      break;
    case 0x68u:
      v1 = "inconsistent state error";
      break;
    case 0x69u:
      v1 = "warping error";
      break;
    case 0x6Au:
      v1 = "OpenGL error";
      break;
    case 0x6Bu:
      v1 = "invalid format";
      break;
    case 0x6Cu:
      v1 = "out of bounds";
      break;
    case 0x6Du:
      v1 = "singular point configuration error";
      break;
    case 0x6Eu:
      v1 = "division by zero";
      break;
    case 0x6Fu:
      v1 = "LAPACK error";
      break;
    case 0x70u:
      v1 = "platform endianess not supported";
      break;
    case 0x71u:
      v1 = "hash already in use";
      break;
    case 0x72u:
      v1 = "invalid ID";
      break;
    case 0x73u:
      v1 = "invalid data type";
      break;
    case 0x74u:
      v1 = "data inconsistency error";
      break;
    case 0x75u:
      v1 = "I/O error";
      break;
    case 0x76u:
      v1 = "unknown option";
      break;
    case 0x77u:
      v1 = "invalid option";
      break;
    case 0x78u:
      v1 = "missing option";
      break;
    case 0x79u:
      v1 = "delegate error";
      break;
    case 0x7Au:
      v1 = "vImage related error";
      break;
    case 0x7Bu:
      v1 = "memory allocation error";
      break;
    case 0x7Cu:
      v1 = "invalid parameter";
      break;
    case 0x7Du:
      v1 = "unexpected null pointer";
      break;
    case 0x7Eu:
      v1 = "internal error";
      break;
    case 0x7Fu:
      v1 = "not implemented error";
      break;
    case 0x80u:
      v1 = "ok";
      break;
    default:
      v1 = CVML_getStatusDescription_ourSharedDefaultStatusDescription;
      snprintf(CVML_getStatusDescription_ourSharedDefaultStatusDescription, 0x3FuLL, "CVML_status module %d error %lld", a1 >> 8, a1 - 128);
      break;
  }
  return v1;
}

const char *CVML_getModuleDescription(uint64_t a1)
{
  const char *v1;

  v1 = "BinSerializer";
  switch(a1 >> 8)
  {
    case 1:
      return v1;
    case 2:
      v1 = "ERT";
      break;
    case 3:
      v1 = "Face3D";
      break;
    case 4:
      v1 = "FaceDescriptor";
      break;
    case 5:
      v1 = "FaceFrontalizer";
      break;
    case 6:
      v1 = "FaceWarper";
      break;
    case 7:
      v1 = "Geometry2D";
      break;
    case 8:
      v1 = "Geometry3D";
      break;
    case 9:
      v1 = "ImageGrouping";
      break;
    case 10:
      v1 = "ImageQuality";
      break;
    case 11:
      v1 = "LandmarkDetector";
      break;
    case 12:
      v1 = "MomentProcessor";
      break;
    case 13:
      v1 = "FaceboxAligner";
      break;
    case 14:
      v1 = "ImageDescriptor";
      break;
    case 15:
      v1 = "ImageClassifier";
      break;
    case 16:
      v1 = "ImageProcessing";
      break;
    case 17:
      v1 = "VIPIdentification";
      break;
    case 18:
      v1 = "ImageRegistration";
      break;
    case 19:
      v1 = "SimilarityMatrix";
      break;
    case 20:
      v1 = "Clustering";
      break;
    case 21:
      v1 = "HumanDetector";
      break;
    case 22:
      v1 = "FaceRegionMap";
      break;
    case 23:
      v1 = "ObjectDetector";
      break;
    case 24:
      v1 = "DML";
      break;
    case 25:
      v1 = "SGD";
      break;
    case 26:
      v1 = "ObjectTracker";
      break;
    case 27:
      v1 = "SRCClassifier";
      break;
    case 28:
      v1 = "Kmeans";
      break;
    case 29:
      v1 = "SparseCoding";
      break;
    case 30:
      v1 = "FaceID";
      break;
    case 31:
      v1 = "BoostedClassifier";
      break;
    case 32:
      v1 = "FaceSegmenter";
      break;
    case 33:
      v1 = "ImageAnalyzer";
      break;
    case 34:
      v1 = "FaceAttributes";
      break;
    case 35:
      v1 = "FaceprintAndAttributes";
      break;
    case 36:
      v1 = "FaceQuality";
      break;
    case 37:
      v1 = "Torsoprint";
      break;
    case 38:
      v1 = "ScreenGaze";
      break;
    case 39:
      v1 = "TapToBox";
      break;
    case 40:
      v1 = "PetprintGenerator";
      break;
    case 41:
    case 42:
    case 43:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
      goto LABEL_5;
    case 44:
      v1 = "RANSAC";
      break;
    case 64:
      v1 = "Generic";
      break;
    case 65:
      v1 = "ImageTools";
      break;
    case 66:
      v1 = "VideoTools";
      break;
    case 67:
      v1 = "ImageWarper";
      break;
    case 68:
      v1 = "ThirdParty";
      break;
    case 69:
      v1 = "BinSerializerProcessor";
      break;
    case 70:
      v1 = "AppleNetParser";
      break;
    case 128:
      v1 = "FaceProcessorCLI";
      break;
    case 129:
      v1 = "ImageClassifierCLI";
      break;
    case 130:
      v1 = "MPCmdlineClientCLI";
      break;
    case 131:
      v1 = "ClusteringCLI";
      break;
    case 132:
      v1 = "ImageProcessorCLI";
      break;
    case 133:
      v1 = "PhotosProcessorCLI";
      break;
    default:
      if (a1 >> 8 == 192)
      {
        v1 = "CVMLEngine";
      }
      else
      {
LABEL_5:
        v1 = CVML_getModuleDescription_ourSharedModuleNameString;
        snprintf(CVML_getModuleDescription_ourSharedModuleNameString, 0x1FuLL, "CVML Module %lld", a1 >> 8);
      }
      break;
  }
  return v1;
}

void sub_1A13CE4EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13CE5C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13CE698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13CE734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A13CE824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A13CE8D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13CEC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A13CF3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void _recordResultsInObservationsRecipients(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * v8);
        v10 = v4;
        if (v9)
        {
          objc_msgSend(v9, "observationsRecipient", (_QWORD)v12);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "cacheObservationsOfRequest:", v11);

        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

void sub_1A13CF750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13CF944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A13CFA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A13CFC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A13CFCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13CFD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A13CFE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A13CFF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A13D0064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A13D01E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A13D02F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A13D03FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A13D0504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A13D060C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A13D06F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A13D07AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A13D08D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D0DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1A13D11A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A13D1344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D1440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D1650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getABPKPoseEstimationPipelineClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!AltruisticBodyPoseKitLibraryCore_frameworkLibrary)
  {
    AltruisticBodyPoseKitLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!AltruisticBodyPoseKitLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("ABPKPoseEstimationPipeline");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getABPKPoseEstimationPipelineClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A13D1830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D1964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13D1AAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A13D1B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13D1BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13D1C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13D1D50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13D1F50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13D1FF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D21E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13D24E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A13D272C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3464(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3465(uint64_t a1)
{

}

void sub_1A13D2890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D28F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VNFgBgE5MLInputElement;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A13D2E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  if (a34)
    operator delete(a34);

  _Unwind_Resume(a1);
}

void sub_1A13D33D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v36;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  v36 = *(void **)(v34 - 168);
  if (v36)
  {
    *(_QWORD *)(v34 - 160) = v36;
    operator delete(v36);
  }

  _Unwind_Resume(a1);
}

void sub_1A13D3730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D38D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D3A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13D3D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3575(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3576(uint64_t a1)
{

}

void sub_1A13D4094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13D42B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13D434C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D4528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13D4664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13D4870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D4A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D4AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13D4C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13D4CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VNInstanceMaskObservation;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A13D4E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D4F6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13D5144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D520C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D52E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13D54F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13D5B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A13D5C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D5F04(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1A13D5E9CLL);
}

void sub_1A13D5F38()
{
  objc_end_catch();
  JUMPOUT(0x1A13D5F7CLL);
}

void sub_1A13D5F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D608C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13D6290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13D635C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13D6858(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1A13D6734);
}

void sub_1A13D6880()
{
  JUMPOUT(0x1A13D6900);
}

void sub_1A13D6894()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x1A13D689CLL);
  JUMPOUT(0x1A13D68A0);
}

void sub_1A13D6B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A13D7068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A13D74CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x1A13D742CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A13D7780(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1A13D79F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A13D7E7C(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x1A13D7E24);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void Geometry3D_mallocCart3D(uint64_t a1, int a2)
{
  size_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a2 >= 1
    && (v4 = 4 * a2, v5 = malloc_type_malloc(v4, 0x100004052888210uLL), (*(_QWORD *)a1 = v5) != 0)
    && (v6 = malloc_type_malloc(v4, 0x100004052888210uLL), (*(_QWORD *)(a1 + 8) = v6) != 0)
    && (v7 = malloc_type_malloc(v4, 0x100004052888210uLL), (*(_QWORD *)(a1 + 16) = v7) != 0))
  {
    *(_DWORD *)(a1 + 24) = a2;
  }
  else
  {
    Geometry3D_freeCart3D(a1);
  }
}

void Geometry3D_freeCart3D(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    free(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
    free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
}

void sub_1A13D8F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;

  v6 = *(void **)(v4 - 88);
  if (v6)
  {
    *(_QWORD *)(v4 - 80) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageAnalyzer::getSceneRepresentation(vision::mod::ImageAnalyzer *this, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  vision::mod::ImageAnalyzer *v6;
  int v7;
  _QWORD *exception;
  int v10;

  v4 = a2 + 824;
  v10 = 1;
  if (*((_BYTE *)std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(a2 + 824, 1u, &v10)+ 20))
  {
    v10 = 1;
    v5 = std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(a2 + 784, 1u, &v10)+ 24;
    v6 = this;
    v7 = 0;
  }
  else
  {
    v10 = 1024;
    if (!*((_BYTE *)std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(v4, 0x400u, &v10)+ 20))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = 8574;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
    v10 = 1024;
    v5 = std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(a2 + 784, 0x400u, &v10)+ 24;
    v6 = this;
    v7 = 1;
  }
  return vision::mod::ImageAnalyzer_Tensor1D<float>::ImageAnalyzer_Tensor1D((uint64_t)v6, (__int128 *)v5, v7);
}

void vision::mod::ImageAnalyzer_Tensor1D<float>::getVectorFromTensor(_QWORD *a1, unint64_t *a2)
{
  float v4;
  unint64_t v5;

  std::vector<float>::vector(a1, *a2);
  if (*a2)
  {
    v5 = 0;
    do
    {
      v4 = vision::mod::ImageAnalyzer_Tensor1D<float>::operator[]((uint64_t)a2, v5, v4);
      *(float *)(*a1 + 4 * v5++) = v4;
    }
    while (v5 < *a2);
  }
}

void sub_1A13D9108(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::ImageAnalyzer_Tensor1D<float>::~ImageAnalyzer_Tensor1D(uint64_t a1)
{
  int v2;

  if (*(_BYTE *)(a1 + 176))
  {
    v2 = *(_DWORD *)(a1 + 168);
    switch(v2)
    {
      case 65552:
        if (*(_QWORD *)(a1 + 8))
          goto LABEL_10;
        goto LABEL_11;
      case 262152:
        if (*(_QWORD *)(a1 + 8))
LABEL_10:
          MEMORY[0x1A1B0A880]();
LABEL_11:
        *(_QWORD *)(a1 + 8) = 0;
        return a1;
      case 65568:
        if (*(_QWORD *)(a1 + 8))
          goto LABEL_10;
        goto LABEL_11;
    }
  }
  return a1;
}

float vision::mod::ImageAnalyzer_Tensor1D<float>::operator[](uint64_t a1, unint64_t a2, float a3)
{
  int v3;
  _QWORD *exception;
  uint64_t v6;

  if (*(_QWORD *)a1 <= a2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v6 = 8556;
    goto LABEL_13;
  }
  v3 = *(_DWORD *)(a1 + 168);
  if (v3 > 131103)
  {
    if (v3 == 131104)
    {
      return (float)*(int *)(*(_QWORD *)(a1 + 8) + 4 * a2);
    }
    else
    {
      if (v3 != 262152)
      {
LABEL_14:
        exception = __cxa_allocate_exception(8uLL);
        v6 = 8563;
LABEL_13:
        *exception = v6;
        __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
      }
      LOBYTE(a3) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + a2);
      return (float)LODWORD(a3);
    }
  }
  else
  {
    if (v3 != 65568)
    {
      if (v3 == 131080)
        return (float)*(char *)(*(_QWORD *)(a1 + 8) + a2);
      goto LABEL_14;
    }
    return *(float *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_BYTE *)v10 + 20) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1A13D949C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0xC0uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *((_QWORD *)v10 + 23) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *(_QWORD *)v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1A13D96DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageAnalyzer_Tensor1D<float>::ImageAnalyzer_Tensor1D(uint64_t a1, __int128 *a2, int a3)
{
  BOOL v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (**v23)();
  uint64_t (***v24)();
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  _QWORD *exception;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (!*(_QWORD *)a2 || (*((_QWORD *)a2 + 13) <= 1uLL ? (v4 = *((_QWORD *)a2 + 14) >= 2uLL) : (v4 = 1), v4))
  {
LABEL_45:
    exception = __cxa_allocate_exception(8uLL);
    v44 = 8572;
    goto LABEL_46;
  }
  v6 = *((_QWORD *)a2 + 10);
  v7 = v6 > 1;
  if (v6 <= 1)
    v8 = 1;
  else
    v8 = *((_QWORD *)a2 + 10);
  *(_QWORD *)a1 = v8;
  v9 = *((_QWORD *)a2 + 11);
  if (v9 >= 2)
  {
    v8 *= v9;
    *(_QWORD *)a1 = v8;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = 2;
  }
  v10 = *((_QWORD *)a2 + 12);
  if (v10 >= 2)
  {
    v8 *= v10;
    *(_QWORD *)a1 = v8;
    ++v7;
  }
  if (!a3)
  {
    if (v7 == 1)
      goto LABEL_19;
    goto LABEL_45;
  }
  if (*((_QWORD *)a2 + 18) == v8)
  {
    *(_BYTE *)(a1 + 176) = 0;
LABEL_19:
    v11 = *a2;
    v12 = a2[1];
    *(_OWORD *)(a1 + 40) = a2[2];
    *(_OWORD *)(a1 + 24) = v12;
    *(_OWORD *)(a1 + 8) = v11;
    v13 = a2[3];
    v14 = a2[4];
    v15 = a2[5];
    *(_OWORD *)(a1 + 104) = a2[6];
    *(_OWORD *)(a1 + 88) = v15;
    *(_OWORD *)(a1 + 72) = v14;
    *(_OWORD *)(a1 + 56) = v13;
    v16 = a2[7];
    v17 = a2[8];
    v18 = a2[9];
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 152) = v18;
    *(_OWORD *)(a1 + 136) = v17;
    *(_OWORD *)(a1 + 120) = v16;
    return a1;
  }
  if (*((_QWORD *)a2 + 13) > 1uLL || *((_QWORD *)a2 + 14) >= 2uLL)
    goto LABEL_45;
  v20 = *((_DWORD *)a2 + 40);
  switch(v20)
  {
    case 65552:
      *(_QWORD *)(a1 + 8) = operator new[]();
      v21 = (_QWORD *)operator new();
      v27 = *(_QWORD *)(a1 + 8);
      v23 = &off_1E453A578;
      *v21 = &off_1E453A578;
      v21[1] = v27;
      v24 = (uint64_t (***)())operator new();
      v25 = *(uint64_t (***)())a2;
      *v24 = &off_1E453A578;
      v26 = 2;
      break;
    case 262152:
      *(_QWORD *)(a1 + 8) = operator new[]();
      v21 = (_QWORD *)operator new();
      v28 = *(_QWORD *)(a1 + 8);
      v23 = &off_1E453A418;
      *v21 = &off_1E453A418;
      v21[1] = v28;
      v24 = (uint64_t (***)())operator new();
      v25 = *(uint64_t (***)())a2;
      *v24 = &off_1E453A418;
      v26 = 1;
      break;
    case 65568:
      *(_QWORD *)(a1 + 8) = operator new[]();
      v21 = (_QWORD *)operator new();
      v22 = *(_QWORD *)(a1 + 8);
      v23 = &off_1E453A3E0;
      *v21 = &off_1E453A3E0;
      v21[1] = v22;
      v24 = (uint64_t (***)())operator new();
      v25 = *(uint64_t (***)())a2;
      *v24 = &off_1E453A3E0;
      v26 = 4;
      break;
    default:
      exception = __cxa_allocate_exception(8uLL);
      v44 = 8563;
LABEL_46:
      *exception = v44;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v24[1] = v25;
  v29 = *((_QWORD *)a2 + 12);
  if (v29)
  {
    LODWORD(v30) = 0;
    do
    {
      ((void (*)(uint64_t *__return_ptr, uint64_t (***)()))(*v24)[2])(&v46, v24);
      if (*((_QWORD *)a2 + 11))
      {
        LODWORD(v31) = 0;
        do
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v46 + 16))(&v45);
          if (*((_QWORD *)a2 + 10))
          {
            v32 = 1;
            do
            {
              (*(void (**)(_QWORD *, uint64_t *))*v21)(v21, &v45);
              (*(void (**)(_QWORD *, uint64_t))(*v21 + 8))(v21, 1);
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 8))(v45, *((_QWORD *)a2 + 15));
            }
            while (*((_QWORD *)a2 + 10) > (unint64_t)v32++);
          }
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 8))(v46, *((_QWORD *)a2 + 16));
          v34 = v45;
          v45 = 0;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
          v31 = (v31 + 1);
        }
        while (*((_QWORD *)a2 + 11) > v31);
      }
      ((void (*)(uint64_t (***)(), _QWORD))(*v24)[1])(v24, *((_QWORD *)a2 + 17));
      v35 = v46;
      v46 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
      v30 = (v30 + 1);
      v29 = *((_QWORD *)a2 + 12);
    }
    while (v29 > v30);
    v23 = *v24;
  }
  v36 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 88) = v36;
  v37 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = v37;
  *(_QWORD *)(a1 + 104) = v29;
  *(_OWORD *)(a1 + 112) = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)a1 = v36 * v29 * v37;
  *(_QWORD *)(a1 + 128) = 1;
  v38 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 136) = v38;
  v39 = *((_QWORD *)a2 + 16) * *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 144) = v39;
  v40 = *((_QWORD *)a2 + 17) * *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 152) = v40;
  v41 = *((_QWORD *)a2 + 18) * *((_QWORD *)a2 + 14);
  *(_QWORD *)(a1 + 160) = v41;
  *(_QWORD *)(a1 + 56) = v38 * v26;
  *(_QWORD *)(a1 + 64) = v39 * v26;
  *(_QWORD *)(a1 + 72) = v40 * v26;
  *(_QWORD *)(a1 + 80) = v41 * v26;
  v42 = a2[1];
  *(_OWORD *)(a1 + 40) = a2[2];
  *(_OWORD *)(a1 + 24) = v42;
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 40);
  *(_BYTE *)(a1 + 176) = 1;
  ((void (*)(uint64_t (***)()))v23[4])(v24);
  (*(void (**)(_QWORD *))(*v21 + 32))(v21);
  if (!*(_BYTE *)(a1 + 176))
    goto LABEL_19;
  return a1;
}

void sub_1A13D9BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  _Unwind_Resume(a1);
}

_BYTE **vision::mod::EspressoUint8ElemPtr::assign(uint64_t a1, const void **a2)
{
  _BYTE **result;
  _QWORD *exception;

  if (!*a2
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 8573;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  **(_BYTE **)(a1 + 8) = *result[1];
  return result;
}

uint64_t vision::mod::EspressoUint8ElemPtr::increment(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 8) += a2;
  return this;
}

_QWORD *vision::mod::EspressoUint8ElemPtr::copy@<X0>(vision::mod::EspressoUint8ElemPtr *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *((_QWORD *)this + 1);
  *result = &off_1E453A418;
  result[1] = v5;
  *a2 = result;
  return result;
}

void vision::mod::EspressoUint8ElemPtr::~EspressoUint8ElemPtr(vision::mod::EspressoUint8ElemPtr *this)
{
  JUMPOUT(0x1A1B0A898);
}

_WORD **vision::mod::EspressoUint16ElemPtr::assign(uint64_t a1, const void **a2)
{
  _WORD **result;
  _QWORD *exception;

  if (!*a2
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 8573;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  **(_WORD **)(a1 + 8) = *result[1];
  return result;
}

uint64_t vision::mod::EspressoUint16ElemPtr::increment(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 8) += 2 * a2;
  return this;
}

_QWORD *vision::mod::EspressoUint16ElemPtr::copy@<X0>(vision::mod::EspressoUint16ElemPtr *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *((_QWORD *)this + 1);
  *result = &off_1E453A578;
  result[1] = v5;
  *a2 = result;
  return result;
}

void vision::mod::EspressoUint16ElemPtr::~EspressoUint16ElemPtr(vision::mod::EspressoUint16ElemPtr *this)
{
  JUMPOUT(0x1A1B0A898);
}

float vision::mod::EspressoFloatElemPtr::assign(uint64_t a1, const void **a2)
{
  float **v3;
  float result;
  _QWORD *exception;

  if (!*a2
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 8573;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  result = *v3[1];
  **(float **)(a1 + 8) = result;
  return result;
}

uint64_t vision::mod::EspressoFloatElemPtr::increment(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 8) += 4 * a2;
  return this;
}

_QWORD *vision::mod::EspressoFloatElemPtr::copy@<X0>(vision::mod::EspressoFloatElemPtr *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *((_QWORD *)this + 1);
  *result = &off_1E453A3E0;
  result[1] = v5;
  *a2 = result;
  return result;
}

void vision::mod::EspressoFloatElemPtr::~EspressoFloatElemPtr(vision::mod::EspressoFloatElemPtr *this)
{
  JUMPOUT(0x1A1B0A898);
}

void sub_1A13D9F94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ma::GaborFilters::Destroy(ma::GaborFilters *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;

  v2 = *((_QWORD *)this + 7);
  if (v2)
    MEMORY[0x1A1B0A880](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    MEMORY[0x1A1B0A880](v3, 0x1000C8052888210);
  if (*(_QWORD *)this)
    MEMORY[0x1A1B0A880](*(_QWORD *)this, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    MEMORY[0x1A1B0A880](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 9);
  if (v5)
    MEMORY[0x1A1B0A880](v5, 0x1000C8052888210);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v6 = *((_QWORD *)this + 12);
  if (v6)
    MEMORY[0x1A1B0A880](v6, 0x1000C8052888210);
  *((_QWORD *)this + 12) = 0;
  v7 = *((_QWORD *)this + 19);
  if (v7)
    MEMORY[0x1A1B0A880](v7, 0x1000C8052888210);
  *((_QWORD *)this + 19) = 0;
  v8 = *((_QWORD *)this + 18);
  if (v8)
    MEMORY[0x1A1B0A880](v8, 0x1000C80BDFB0063);
  *((_QWORD *)this + 18) = 0;
  v9 = *((_QWORD *)this + 13);
  if (v9)
    MEMORY[0x1A1B0A880](v9, 0x1000C8052888210);
  *((_QWORD *)this + 13) = 0;
  v10 = *((_QWORD *)this + 14);
  if (v10)
    MEMORY[0x1A1B0A880](v10, 0x1000C8052888210);
  *((_QWORD *)this + 14) = 0;
  v11 = *((_QWORD *)this + 15);
  if (v11)
    MEMORY[0x1A1B0A880](v11, 0x1000C8052888210);
  *((_QWORD *)this + 15) = 0;
  v12 = *((_QWORD *)this + 17);
  if (v12)
    MEMORY[0x1A1B0A880](v12, 0x1000C8052888210);
  *((_QWORD *)this + 17) = 0;
  vDSP_destroy_fftsetup(*((FFTSetup *)this + 10));
  v13 = *((_QWORD *)this + 21);
  if (v13)
  {
    dispatch_release(v13);
    *((_QWORD *)this + 21) = 0;
  }
  v14 = *((_QWORD *)this + 22);
  if (v14)
  {
    dispatch_release(v14);
    *((_QWORD *)this + 22) = 0;
  }
  v15 = *((_QWORD *)this + 23);
  if (v15)
  {
    dispatch_release(v15);
    *((_QWORD *)this + 23) = 0;
  }
  v16 = *((_QWORD *)this + 24);
  if (v16)
  {
    dispatch_release(v16);
    *((_QWORD *)this + 24) = 0;
  }
}

void ma::GaborFilters::DispatchHelperCreateGabor(ma::GaborFilters *this, void *a2)
{
  ma::GaborFilters *v2;
  int v3;
  uint64_t v8;
  float32x4_t *v9;
  int v10;
  uint64_t v11;
  const int *v12;
  int v13;
  size_t v14;
  const std::nothrow_t *v15;
  float32x4_t *v16;
  size_t v17;
  const float *v18;
  const float *v19;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  float v25;
  float *v26;
  float v27;
  double v28;
  double v29;
  float v30;
  uint64_t v31;
  double v32;
  float v33;
  float v34;
  float v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  NSObject *v41;
  float32x4_t v42;
  int v43;
  int v45;
  char v46;
  int v47;
  _QWORD block[5];
  char v49;

  v47 = *(_DWORD *)(*(_QWORD *)this + 132);
  if (v47 >= 1)
  {
    v2 = this;
    v3 = 0;
    v43 = *((_DWORD *)this + 3);
    __asm { FMOV            V0.4S, #-1.0 }
    v42 = _Q0;
    do
    {
      v8 = *(_QWORD *)v2;
      v9 = *(float32x4_t **)(*(_QWORD *)v2 + 120);
      v10 = *(_DWORD *)(*(_QWORD *)v2 + 132);
      v12 = (const int *)(*(_QWORD *)v2 + 88);
      v11 = *v12;
      v13 = *(_DWORD *)(*(_QWORD *)v2 + 28) * *(_DWORD *)(*(_QWORD *)v2 + 24);
      if (v13 < 0)
        v14 = -1;
      else
        v14 = 4 * v13;
      v15 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v16 = (float32x4_t *)operator new[](v14, MEMORY[0x1E0DE4E10]);
      if ((int)v11 < 0)
        v17 = -1;
      else
        v17 = 4 * v11;
      v18 = (const float *)operator new[](v17, v15);
      v19 = v18;
      if (v16)
        _ZF = v18 == 0;
      else
        _ZF = 1;
      v21 = !_ZF;
      if (!_ZF)
      {
        v46 = v21;
        v22 = v11;
        v45 = v3 + v10 * v43;
        v23 = 4 * v45;
        memcpy(v16, *(const void **)(v8 + 112), 4 * v11);
        v24 = *(_QWORD *)(v8 + 96);
        if ((int)v11 >= 1)
        {
          v25 = *(float *)(v24 + ((4 * v23) | 0xC));
          v26 = (float *)v16;
          do
          {
            v27 = v25 + *v26;
            *v26 = v27;
            v28 = v27;
            v29 = -6.28318531;
            if (v28 > 3.14159265 || (v29 = 6.28318531, v28 < -3.14159265))
            {
              v30 = v29 + v28;
              *v26 = v30;
            }
            ++v26;
            --v22;
          }
          while (v22);
        }
        if (*(int *)(v8 + 88) >= 1)
        {
          v31 = 0;
          v32 = *(float *)(v24 + ((16 * v45) | 8));
          v33 = (v32 + v32) * 3.14159265;
          v34 = *(float *)(v24 + 4 * v23) * -10.0;
          v35 = (float)(1.0 / (float)*(int *)(v8 + 24)) / *(float *)(v24 + ((4 * v23) | 4));
          v36 = v16;
          v37 = (float32x4_t *)v19;
          do
          {
            v38 = *v9++;
            v39 = vaddq_f32(vmulq_n_f32(v38, v35), v42);
            v40 = *v36++;
            *v37++ = vsubq_f32(vmulq_f32(v39, vmulq_n_f32(v39, v34)), vmulq_n_f32(vmulq_f32(v40, v40), v33));
            v31 += 4;
          }
          while (v31 < *v12);
        }
        vvexpf((float *)(*(_QWORD *)(v8 + 152) + 4 * v45 * (int)v11), v19, v12);
        v2 = this;
        v21 = v46;
      }
      v41 = *(NSObject **)(v8 + 184);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZN2ma12GaborFilters29CreateOneGaborFilterFrequencyEii_block_invoke;
      block[3] = &__block_descriptor_tmp_5_3919;
      block[4] = v8;
      v49 = v21;
      dispatch_sync(v41, block);
      if (v16)
        MEMORY[0x1A1B0A880](v16, 0x1000C8052888210);
      if (v19)
        MEMORY[0x1A1B0A880](v19, 0x1000C8052888210);
      ++v3;
    }
    while (v3 != v47);
  }
}

uint64_t ___ZN2ma12GaborFilters29CreateOneGaborFilterFrequencyEii_block_invoke(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_BYTE *)(v1 + 160);
  if (v2)
    v2 = *(_BYTE *)(result + 40) != 0;
  *(_BYTE *)(v1 + 160) = v2;
  return result;
}

void ma::GaborFilters::DispatchHelperDescriptor(ma::GaborFilters *this, void *a2)
{
  ma::GaborFilters *v2;
  uint64_t v3;
  OpaqueFFTSetup *fftsetup;
  size_t v5;
  const std::nothrow_t *v6;
  void *v7;
  void *v8;
  float *v9;
  float *v10;
  int v11;
  float *v12;
  BOOL v13;
  BOOL v16;
  char v17;
  uint64_t v18;
  int v19;
  int v20;
  vDSP_Length v21;
  unsigned int v22;
  vDSP_Length v23;
  vDSP_Length v24;
  float *v25;
  unsigned int v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  NSObject *v30;
  float *v31;
  ma::GaborFilters *v32;
  void *v33;
  float *v34;
  char v35;
  int v36;
  _QWORD block[5];
  char v38;
  DSPSplitComplex __A;
  DSPSplitComplex __C;
  DSPSplitComplex __B;

  v2 = this;
  v3 = *(int *)(*(_QWORD *)this + 88);
  fftsetup = vDSP_create_fftsetup(*(unsigned int *)(*(_QWORD *)this + 32), 0);
  v36 = v3;
  if ((int)v3 < 0)
    v5 = -1;
  else
    v5 = 4 * v3;
  v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v7 = operator new[](v5, MEMORY[0x1E0DE4E10]);
  v8 = operator new[](v5, v6);
  v9 = (float *)operator new[](v5, v6);
  v10 = (float *)operator new[](v5, v6);
  v11 = *((_DWORD *)v2 + 3);
  v12 = (float *)operator new[](v5, v6);
  if (v12)
    v13 = v7 == 0;
  else
    v13 = 1;
  v16 = v13 || v8 == 0 || v9 == 0 || v10 == 0;
  v17 = !v16;
  v18 = *(_QWORD *)v2;
  if (!v16)
  {
    v35 = v17;
    memcpy(v8, *(const void **)(v18 + 48), 4 * v36);
    memcpy(v7, *(const void **)(v18 + 56), 4 * v36);
    __B.realp = (float *)v8;
    __B.imagp = (float *)v7;
    __C.realp = v9;
    __C.imagp = v10;
    v19 = *(_DWORD *)(v18 + 132);
    if (v19 >= 1)
    {
      v31 = v10;
      v32 = v2;
      v33 = v8;
      v34 = v9;
      v20 = 0;
      v21 = *(int *)(v18 + 88);
      v22 = v19 * v11;
      v24 = *(int *)(v18 + 36);
      v23 = *(int *)(v18 + 40);
      do
      {
        v25 = *(float **)(v18 + 8);
        __A.realp = (float *)(*(_QWORD *)(v18 + 152) + 4 * (v20 + v19 * v11) * (int)v21);
        __A.imagp = v25;
        vDSP_zvmul(&__A, 1, &__B, 1, &__C, 1, v21, 1);
        vDSP_fft2d_zip(fftsetup, &__C, 1, 0, v24, v23, -1);
        vDSP_zvmags(&__C, 1, v12, 1, v21);
        if ((int)v21 >= 4)
        {
          v26 = v21 >> 2;
          v27 = (float32x4_t *)v12;
          do
          {
            v28 = vrsqrteq_f32(*v27);
            v29 = vmulq_f32(v28, vrsqrtsq_f32(vmulq_f32(v28, v28), *v27));
            *v27 = vmulq_n_f32(vmulq_f32(*v27, vmulq_f32(vrsqrtsq_f32(vmulq_f32(v29, v29), *v27), v29)), 1.0 / (float)(int)v21);
            ++v27;
            --v26;
          }
          while (v26);
        }
        vDSP_meanv(v12, 1, (float *)(*(_QWORD *)(v18 + 136) + 4 * v22++), v21);
        ++v20;
        v19 = *(_DWORD *)(v18 + 132);
      }
      while (v20 < v19);
      v2 = v32;
      v18 = *(_QWORD *)v32;
      v8 = v33;
      v9 = v34;
      v10 = v31;
    }
    v17 = v35;
  }
  v30 = *(NSObject **)(v18 + 192);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2ma12GaborFilters24DispatchHelperDescriptorEPv_block_invoke;
  block[3] = &__block_descriptor_tmp_3921;
  block[4] = v2;
  v38 = v17;
  dispatch_sync(v30, block);
  vDSP_destroy_fftsetup(fftsetup);
  if (v12)
    MEMORY[0x1A1B0A880](v12, 0x1000C8052888210);
  if (v7)
    MEMORY[0x1A1B0A880](v7, 0x1000C8052888210);
  if (v8)
    MEMORY[0x1A1B0A880](v8, 0x1000C8052888210);
  if (v10)
    MEMORY[0x1A1B0A880](v10, 0x1000C8052888210);
  if (v9)
    JUMPOUT(0x1A1B0A880);
}

uint64_t ___ZN2ma12GaborFilters24DispatchHelperDescriptorEPv_block_invoke(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = **(_QWORD **)(result + 32);
  v2 = *(_BYTE *)(v1 + 161);
  if (v2)
    v2 = *(_BYTE *)(result + 40) != 0;
  *(_BYTE *)(v1 + 161) = v2;
  return result;
}

void sub_1A13DA980(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1A13DA944);
}

void sub_1A13DA98C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A13DABA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13DACAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13DAE08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13DB0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  MEMORY[0x1A1B0A898](v20, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A13DB1F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A13DB398(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*(_QWORD **)(v1 + 8));
  MEMORY[0x1A1B0A898](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_1A13DB47C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13DB600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13DB6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  a9.super_class = (Class)VNFaceLandmarkDetector;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A13DBC6C()
{
  void *v0;

  __cxa_end_catch();
  JUMPOUT(0x1A13DBC80);
}

void sub_1A13DBFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1A13DBF9CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A13DC118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13DCAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,_QWORD *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  void *v42;
  double v45;
  void *v46;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a38);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  if (v42)
    operator delete(v42);
  if (a34)
    operator delete(a34);
  if (a2 == 1)
  {
    if ((*(_QWORD *)__cxa_begin_catch(a1) | 0x10) == 0xB7C)
    {
      LODWORD(v45) = 0;
      objc_msgSend(a17, "setBlinkScore:", v45);
      objc_msgSend(a17, "uuid");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      VNRecordBlinkDetectionFailureWarning(a16, v46);

      __cxa_end_catch();
      JUMPOUT(0x1A13DCA1CLL);
    }
    __cxa_rethrow();
  }

  _Unwind_Resume(a1);
}

void sub_1A13DCC28()
{
  void *v0;

  __cxa_end_catch();
  JUMPOUT(0x1A13DCABCLL);
}

uint64_t **std::__tree<std::__value_type<vision::mod::_blinkType,float>,std::__map_value_compare<vision::mod::_blinkType,std::__value_type<vision::mod::_blinkType,float>,std::less<vision::mod::_blinkType>,true>,std::allocator<std::__value_type<vision::mod::_blinkType,float>>>::__emplace_unique_key_args<vision::mod::_blinkType,std::piecewise_construct_t const&,std::tuple<vision::mod::_blinkType&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1A13DCF60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void cvml::util::binserialized_table_of_contents::init(cvml::util::binserialized_table_of_contents *this, char *a2, uint64_t a3)
{
  char *v3;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  _QWORD *v42;
  __int128 v43;
  _BYTE v44[32];
  _QWORD v45[2];
  char v46;
  _OWORD v47[2];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a3 >= 41)
  {
    v3 = a2;
    v41 = &a2[a3];
    v5 = a2 + 40;
    v42 = (_QWORD *)((char *)this + 16);
    while (1)
    {
      v6 = *(_QWORD *)v3;
      v7 = *((unsigned __int16 *)v3 + 4);
      v47[0] = *(_OWORD *)(v3 + 10);
      *(_QWORD *)((char *)v47 + 14) = *((_QWORD *)v3 + 3);
      if ((v7 - 1) > 8)
      {
        syslog(3, "Error %s when executing %s in file %s:%d\n", "model file is corrupt", "void cvml::util::binserialized_table_of_contents::init(const void *const, size_t)", "/Library/Caches/com.apple.xbs/Sources/Vision/VisionKitFramework/VN/algorithm_util/binserialized_mapped_file_contents.h", 119);
        __assert_rtn("syslog_assert_failed", "common_defines.h", 24, "false");
      }
      v8 = *((_QWORD *)v3 + 4);
      v9 = qword_1A15E49C0[(v7 - 1)];
      *(_QWORD *)&v43 = v5;
      v10 = (_QWORD *)operator new();
      *v10 = &off_1E453BD10;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = v5;
      *((_QWORD *)&v43 + 1) = v10;
      *(_QWORD *)v44 = v6;
      *(_WORD *)&v44[8] = v7;
      *(_OWORD *)&v44[10] = v47[0];
      *(_QWORD *)&v44[24] = *(_QWORD *)((char *)v47 + 14);
      v11 = *((_QWORD *)this + 1);
      if (v11)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          v7 = v6;
          if (v6 >= v11)
            v7 = v6 % v11;
        }
        else
        {
          v7 = (v11 - 1) & v6;
        }
        v13 = *(uint64_t ***)(*(_QWORD *)this + 8 * v7);
        if (v13)
        {
          for (i = *v13; i; i = (uint64_t *)*i)
          {
            v15 = i[1];
            if (v15 == v6)
            {
              if (i[2] == v6)
                goto LABEL_76;
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v11)
                  v15 %= v11;
              }
              else
              {
                v15 &= v11 - 1;
              }
              if (v15 != v7)
                break;
            }
          }
        }
      }
      v16 = (char *)operator new(0x50uLL);
      v45[0] = v16;
      v45[1] = v42;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = v6;
      *((_QWORD *)v16 + 2) = v6;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *((_QWORD *)v16 + 9) = 0;
      v46 = 1;
      v17 = (float)(unint64_t)(*((_QWORD *)this + 3) + 1);
      v18 = *((float *)this + 8);
      if (!v11 || (float)(v18 * (float)v11) < v17)
        break;
LABEL_66:
      v34 = *(_QWORD **)(*(_QWORD *)this + 8 * v7);
      i = (uint64_t *)v45[0];
      if (v34)
      {
        *(_QWORD *)v45[0] = *v34;
      }
      else
      {
        *(_QWORD *)v45[0] = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = i;
        *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v42;
        if (!*i)
          goto LABEL_75;
        v35 = *(_QWORD *)(*i + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v35 >= v11)
            v35 %= v11;
        }
        else
        {
          v35 &= v11 - 1;
        }
        v34 = (_QWORD *)(*(_QWORD *)this + 8 * v35);
      }
      *v34 = i;
LABEL_75:
      v45[0] = 0;
      ++*((_QWORD *)this + 3);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,void *>>>>::reset[abi:ne180100]((uint64_t)v45);
LABEL_76:
      v36 = (std::__shared_weak_count *)i[4];
      *(_OWORD *)(i + 3) = v43;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      *(_OWORD *)(i + 5) = *(_OWORD *)v44;
      *(_OWORD *)(i + 7) = *(_OWORD *)&v44[16];
      i[9] = v8;
      v39 = v9 * v8 + 40;
      v3 += v39;
      v5 += v39;
      if (v5 >= v41)
        return;
    }
    v19 = (v11 & (v11 - 1)) != 0;
    if (v11 < 3)
      v19 = 1;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v11 = *((_QWORD *)this + 1);
    }
    if (*(_QWORD *)&prime > v11)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v11)
    {
      v29 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
      if (v11 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = *((_QWORD *)this + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)this;
          *(_QWORD *)this = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *((int8x8_t *)this + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)this + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v42;
          if (*v42)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)this + 8 * v27) = v42;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)this + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)this + 8 * v33) = v26;
                    goto LABEL_57;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)this + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)this + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_57:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_61;
        }
        v40 = *(void **)this;
        *(_QWORD *)this = 0;
        if (v40)
          operator delete(v40);
        v11 = 0;
        *((_QWORD *)this + 1) = 0;
      }
    }
LABEL_61:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v6 >= v11)
        v7 = v6 % v11;
      else
        v7 = v6;
    }
    else
    {
      v7 = (v11 - 1) & v6;
    }
    goto LABEL_66;
  }
}

void sub_1A13DD5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,void *>>>>::reset[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A13DD5EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1A13DD604(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A13DD610(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1A13DD618);
  __clang_call_terminate(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void cvml::util::binserialized_contents::init_model_values(uint64_t a1, uint64_t a2, const char *a3, unint64_t *a4)
{
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  unint64_t i;
  const void *v12;
  size_t v13;
  size_t v14;
  std::string *p_p;
  void **v16;
  char *v17;
  std::string *v18;
  std::string::value_type v19;
  std::string::value_type *v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  float *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  const void *v46;
  size_t v47;
  size_t v48;
  std::string *v49;
  void **v50;
  char *v51;
  std::string *v52;
  std::string::value_type v53;
  std::string::value_type *v54;
  unint64_t v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  __int128 v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void **v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  __int128 *v72;
  const char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  std::string __p;
  void *v79[2];
  int64_t v80;
  float *v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v74, "::");
    v8 = strlen(a3);
    v9 = std::string::insert((std::string *)&v74, 0, a3, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v80 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)v79 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v75) < 0)
      operator delete((void *)v74);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v79, "");
  }
  v73 = a3;
  if (*a4)
  {
    for (i = 0; i < *a4; ++i)
    {
      v12 = *(const void **)(a4[1] + 8 * i);
      if (v80 >= 0)
        v13 = HIBYTE(v80);
      else
        v13 = (size_t)v79[1];
      v14 = strlen(*(const char **)(a4[1] + 8 * i));
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v13 + v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v13)
      {
        if (v80 >= 0)
          v16 = v79;
        else
          v16 = (void **)v79[0];
        memmove(p_p, v16, v13);
      }
      v17 = (char *)p_p + v13;
      if (v14)
        memmove(v17, v12, v14);
      v17[v14] = 0;
      v77 = 0;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &__p;
      v19 = v18->__r_.__value_.__s.__data_[0];
      if (v18->__r_.__value_.__s.__data_[0])
      {
        v20 = &v18->__r_.__value_.__s.__data_[1];
        v21 = 5381;
        do
        {
          v21 = 33 * v21 + v19;
          v22 = *v20++;
          v19 = v22;
        }
        while (v22);
      }
      else
      {
        v21 = 5381;
      }
      v23 = std::__hash_table<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>>>::find<unsigned long long>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v21);
      if (!v23)
        goto LABEL_42;
      v24 = v23;
      std::shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>::operator=[abi:ne180100](&v74, v23[3], v23[4]);
      v25 = *(_OWORD *)(v24 + 5);
      v77 = v24[9];
      v26 = *(_OWORD *)(v24 + 7);
      v75 = v25;
      v76 = v26;
      if (WORD4(v25) - 1 < 2)
        goto LABEL_31;
      if (WORD4(v25) != 3)
      {
        syslog(3, "Error %s when executing %s in file %s:%d\n", "Model file info populated incorrectly", "void cvml::util::binserialized_contents::init_model_values(const binserialized_table_of_contents &, const char *, const vision::mod::BinSerializedModelFileInfo &)", "/Library/Caches/com.apple.xbs/Sources/Vision/VisionKitFramework/VN/algorithm_util/binserialized_mapped_file_contents.h", 209);
        __assert_rtn("syslog_assert_failed", "common_defines.h", 24, "false");
      }
      v27 = v74;
      if ((v74 & 3) != 0)
      {
LABEL_31:
        v28 = (float *)operator new[]();
        v83 = (uint64_t)v28;
        v29 = (std::__shared_weak_count *)operator new();
        v29->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        v29->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BFB0;
        v29->__shared_weak_owners_ = 0;
        v29[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
        v84 = v29;
        BinSerializer_convertFloats((uint64_t)&v75, (float *)v74, v28);
        v81 = v28;
        v82 = v29;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
        vision::mod::ModelValues::setModelValues(a1, (__int128 *)&__p, (uint64_t)v28, v29, v77);
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        v33 = v84;
        if (!v84)
          goto LABEL_42;
        v34 = (unint64_t *)&v84->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
      }
      else
      {
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v83 = v27;
        v84 = v39;
        v81 = 0;
        v82 = 0;
        vision::mod::ModelValues::setModelValues(a1, (__int128 *)&__p, v27, v39, v77);
        if (v39)
        {
          v42 = (unint64_t *)&v39->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v33 = v82;
        if (!v82)
          goto LABEL_42;
        v44 = (unint64_t *)&v82->__shared_owners_;
        do
          v35 = __ldaxr(v44);
        while (__stlxr(v35 - 1, v44));
      }
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
LABEL_42:
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (a4[2])
  {
    v45 = 0;
    do
    {
      v46 = *(const void **)(a4[3] + 8 * v45);
      if (v80 >= 0)
        v47 = HIBYTE(v80);
      else
        v47 = (size_t)v79[1];
      v48 = strlen(*(const char **)(a4[3] + 8 * v45));
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v47 + v48);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &__p;
      else
        v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v47)
      {
        if (v80 >= 0)
          v50 = v79;
        else
          v50 = (void **)v79[0];
        memmove(v49, v50, v47);
      }
      v51 = (char *)v49 + v47;
      if (v48)
        memmove(v51, v46, v48);
      v51[v48] = 0;
      v77 = 0;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &__p;
      v53 = v52->__r_.__value_.__s.__data_[0];
      if (v52->__r_.__value_.__s.__data_[0])
      {
        v54 = &v52->__r_.__value_.__s.__data_[1];
        v55 = 5381;
        do
        {
          v55 = 33 * v55 + v53;
          v56 = *v54++;
          v53 = v56;
        }
        while (v56);
      }
      else
      {
        v55 = 5381;
      }
      v57 = std::__hash_table<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>>>::find<unsigned long long>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v55);
      if (v57)
      {
        v58 = v57;
        std::shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>::operator=[abi:ne180100](&v74, v57[3], v57[4]);
        v59 = *(_OWORD *)(v58 + 5);
        v77 = v58[9];
        v60 = *(_OWORD *)(v58 + 7);
        v75 = v59;
        v76 = v60;
        if (WORD4(v59) != 9)
        {
          syslog(3, "Error %s when executing %s in file %s:%d\n", "Model file info populated incorrectly", "void cvml::util::binserialized_contents::init_model_values(const binserialized_table_of_contents &, const char *, const vision::mod::BinSerializedModelFileInfo &)", "/Library/Caches/com.apple.xbs/Sources/Vision/VisionKitFramework/VN/algorithm_util/binserialized_mapped_file_contents.h", 226);
          __assert_rtn("syslog_assert_failed", "common_defines.h", 24, "false");
        }
        vision::mod::ModelValues::setModelValues(a1, (__int128 *)&__p, v74, *((std::__shared_weak_count **)&v74 + 1), v77);
        v61 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1))
        {
          v62 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v45;
    }
    while (v45 < a4[2]);
  }
  if (a4[4])
  {
    v64 = 0;
    v65 = 0;
    do
    {
      v66 = a4[5];
      v67 = *(_QWORD *)(v66 + 8 * v65);
      if (v73)
      {
        if (v67)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(v66 + 8 * v65));
          if (v80 >= 0)
            v68 = v79;
          else
            v68 = (void **)v79[0];
          if (v80 >= 0)
            v69 = HIBYTE(v80);
          else
            v69 = (std::string::size_type)v79[1];
          v70 = std::string::insert(&__p, 0, (const std::string::value_type *)v68, v69);
          v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          *(_QWORD *)&v75 = *((_QWORD *)&v70->__r_.__value_.__l + 2);
          v74 = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v75) & 0x80u) == 0)
            v72 = &v74;
          else
            v72 = (__int128 *)v74;
          cvml::util::binserialized_contents::init_model_values(a1, a2, v72, a4[6] + v64);
          if (SBYTE7(v75) < 0)
            operator delete((void *)v74);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          cvml::util::binserialized_contents::init_model_values(a1, a2, v73, a4[6] + v64);
        }
      }
      else
      {
        cvml::util::binserialized_contents::init_model_values(a1, a2, v67, a4[6] + v64);
      }
      ++v65;
      v64 += 56;
    }
    while (v65 < a4[4]);
  }
  if (SHIBYTE(v80) < 0)
    operator delete(v79[0]);
}

void sub_1A13DDDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1A13DDDCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v33 - 104);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v33 - 120);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a15);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    JUMPOUT(0x1A13DDE98);
  JUMPOUT(0x1A13DDE9CLL);
}

void sub_1A13DDDE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1A13DDE70);
}

void sub_1A13DDE00()
{
  JUMPOUT(0x1A13DDE70);
}

void sub_1A13DDE10(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x1A1B0A880](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_1A13DDE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_end_catch();
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a15);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1A13DDE8CLL);
}

void sub_1A13DDE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v27 - 120);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v27 - 104);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a15);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1A13DDE8CLL);
}

void std::__shared_ptr_emplace<vision::mod::LandmarkAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::LandmarkAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::LandmarkAttributes>::__on_zero_shared(uint64_t a1)
{
  vision::mod::LandmarkAttributes::~LandmarkAttributes((id *)(a1 + 24));
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>>>::find<unsigned long long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void vision::mod::ModelValues::setModelValues(uint64_t a1, __int128 *a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::string __p;
  std::__shared_weak_count *v19;

  v14 = 2;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v15 = a3;
  v16 = a4;
  v17 = a5;
  std::pair<std::string const,vision::mod::ModelValues::ValueInfo>::pair[abi:ne180100]<std::string const&,vision::mod::ModelValues::ValueInfo,0>(&__p, a2, (uint64_t)&v14);
  std::__hash_table<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,vision::mod::ModelValues::ValueInfo>>(a1, (unsigned __int8 *)&__p, (uint64_t)&__p);
  v8 = v19;
  if (v19)
  {
    v9 = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::string __p;
  std::__shared_weak_count *v19;

  v14 = 1;
  v15 = a3;
  v16 = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v17 = a5;
  std::pair<std::string const,vision::mod::ModelValues::ValueInfo>::pair[abi:ne180100]<std::string const&,vision::mod::ModelValues::ValueInfo,0>(&__p, a2, (uint64_t)&v14);
  std::__hash_table<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,vision::mod::ModelValues::ValueInfo>>(a1, (unsigned __int8 *)&__p, (uint64_t)&__p);
  v8 = v19;
  if (v19)
  {
    v9 = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1A13DE084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::pair<std::string const,vision::mod::ModelValues::ValueInfo>::~pair((uint64_t)va);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v6 + 8);
  _Unwind_Resume(a1);
}

void sub_1A13DE190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::pair<std::string const,vision::mod::ModelValues::ValueInfo>::~pair((uint64_t)va1);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,vision::mod::ModelValues::ValueInfo>::pair[abi:ne180100]<std::string const&,vision::mod::ModelValues::ValueInfo,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 24);
  return this;
}

void std::__hash_table<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,vision::mod::ModelValues::ValueInfo>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  _QWORD v39[2];
  char v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x48uLL);
  v39[0] = v16;
  v39[1] = a1 + 16;
  v40 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v16 + 10) = *(_DWORD *)(a3 + 24);
  *((_OWORD *)v16 + 3) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *((_QWORD *)v16 + 8) = *(_QWORD *)(a3 + 48);
  v40 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)a1;
          *(_QWORD *)a1 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v15;
          if (*v15)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v15;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_58:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v38 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v38)
          operator delete(v38);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v36 = v39[0];
  if (v35)
  {
    *(_QWORD *)v39[0] = *v35;
LABEL_75:
    *v35 = v36;
    goto LABEL_76;
  }
  *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v36;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)v36)
  {
    v37 = *(_QWORD *)(*(_QWORD *)v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v39[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_1A13DE674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,vision::mod::ModelValues::ValueInfo>::~pair(uint64_t a1)
{
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,vision::mod::ModelValues::ValueInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,vision::mod::ModelValues::ValueInfo>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,cvml::util::binserialized_table_of_contents::blob_info>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__shared_ptr_pointer<unsigned char const*,cvml::util::binserialized_table_of_contents::blob_info::blob_info(unsigned char const*,_BinSerializer_blobHeader_ const&)::{lambda(unsigned char const*)#1},std::allocator<unsigned char const>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_pointer<unsigned char const*,cvml::util::binserialized_table_of_contents::blob_info::blob_info(unsigned char const*,_BinSerializer_blobHeader_ const&)::{lambda(unsigned char const*)#1},std::allocator<unsigned char const>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4cvml4util31binserialized_table_of_contents9blob_infoC1EPKhRK26_BinSerializer_blobHeader_EUlS4_E_"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1A13DE85C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13DE8EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4160(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4161(uint64_t a1)
{

}

uint64_t FaceRegionMap_addForeheadLandmarks(uint64_t a1)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float32x2_t v5;
  int32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  unint64_t v16;
  float32x2_t *v17;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  float32x2_t *v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t *v27;
  float32x2_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float32x2_t *v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t *v37;
  float32x2_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float32x2_t *v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t *v47;
  float32x2_t v48;
  float32x2_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float32x2_t *v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t *v58;
  float32x2_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  float32x2_t *v65;
  unint64_t v66;
  float32x2_t v67;
  float32x2_t v68;

  v2 = *(float32x2_t **)a1;
  v3 = *(float32x2_t **)(a1 + 8);
  if ((char *)v3 - (char *)v2 != 504)
    return 5759;
  v5 = vadd_f32(vsub_f32(v2[40], v2[41]), vsub_f32(v2[50], v2[49]));
  v6 = (int32x2_t)vmul_f32(v5, v5);
  *(float *)v6.i32 = sqrtf(vmlas_n_f32(*(float *)&v6.i32[1], v5.f32[0], v5.f32[0]));
  if (*(float *)v6.i32 > 0.0)
    v5 = vdiv_f32(v5, (float32x2_t)vdup_lane_s32(v6, 0));
  v8 = v2[1];
  v7 = v2[2];
  v9 = v2[60].f32[0] - v2[62].f32[0];
  v11 = v2[5];
  v10 = v2[6];
  v12 = vmul_n_f32(v5, sqrtf((float)((float)(v2[60].f32[1] - v2[62].f32[1]) * (float)(v2[60].f32[1] - v2[62].f32[1])) + (float)(v9 * v9)));
  v68 = (float32x2_t)vdup_n_s32(0x3F333333u);
  v13 = vmla_f32(*v2, v68, v12);
  v14 = (float32x2_t)vdup_n_s32(0x3F666666u);
  v15 = v2[7];
  v16 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v3 >= v16)
  {
    v19 = v16 - (_QWORD)v2;
    if ((unint64_t)(v19 >> 2) <= 0x40)
      v20 = 64;
    else
      v20 = v19 >> 2;
    v21 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8;
    v22 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v21)
      v22 = v20;
    if (v22)
    {
      v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v22);
      v2 = *(float32x2_t **)a1;
      v3 = *(float32x2_t **)(a1 + 8);
    }
    else
    {
      v23 = 0;
    }
    v24 = (float32x2_t *)(v22 + 504);
    v16 = v22 + 8 * v23;
    *v24 = v13;
    v17 = v24 + 1;
    if (v3 != v2)
    {
      do
      {
        v25 = v3[-1];
        --v3;
        v24[-1] = v25;
        --v24;
      }
      while (v3 != v2);
      v2 = *(float32x2_t **)a1;
    }
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v2)
    {
      operator delete(v2);
      v16 = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    *v3 = v13;
    v17 = v3 + 1;
  }
  v26 = vmla_f32(v8, v14, v12);
  *(_QWORD *)(a1 + 8) = v17;
  if ((unint64_t)v17 >= v16)
  {
    v28 = *(float32x2_t **)a1;
    v29 = ((uint64_t)v17 - *(_QWORD *)a1) >> 3;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
      goto LABEL_83;
    v31 = v16 - (_QWORD)v28;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    v21 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
    v32 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v21)
      v32 = v30;
    if (v32)
    {
      v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v32);
      v28 = *(float32x2_t **)a1;
      v17 = *(float32x2_t **)(a1 + 8);
    }
    else
    {
      v33 = 0;
    }
    v34 = (float32x2_t *)(v32 + 8 * v29);
    v16 = v32 + 8 * v33;
    *v34 = v26;
    v27 = v34 + 1;
    if (v17 != v28)
    {
      do
      {
        v35 = v17[-1];
        --v17;
        v34[-1] = v35;
        --v34;
      }
      while (v17 != v28);
      v28 = *(float32x2_t **)a1;
    }
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 8) = v27;
    *(_QWORD *)(a1 + 16) = v16;
    if (v28)
    {
      operator delete(v28);
      v16 = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    *v17 = v26;
    v27 = v17 + 1;
  }
  v36 = vmla_f32(vmul_f32(vadd_f32(v7, v11), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3F8CCCCDu), v12);
  *(_QWORD *)(a1 + 8) = v27;
  if ((unint64_t)v27 >= v16)
  {
    v38 = *(float32x2_t **)a1;
    v39 = ((uint64_t)v27 - *(_QWORD *)a1) >> 3;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 61)
      goto LABEL_83;
    v41 = v16 - (_QWORD)v38;
    if (v41 >> 2 > v40)
      v40 = v41 >> 2;
    v21 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8;
    v42 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v21)
      v42 = v40;
    if (v42)
    {
      v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v42);
      v38 = *(float32x2_t **)a1;
      v27 = *(float32x2_t **)(a1 + 8);
    }
    else
    {
      v43 = 0;
    }
    v44 = (float32x2_t *)(v42 + 8 * v39);
    v16 = v42 + 8 * v43;
    *v44 = v36;
    v37 = v44 + 1;
    if (v27 != v38)
    {
      do
      {
        v45 = v27[-1];
        --v27;
        v44[-1] = v45;
        --v44;
      }
      while (v27 != v38);
      v38 = *(float32x2_t **)a1;
    }
    *(_QWORD *)a1 = v44;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = v16;
    if (v38)
    {
      operator delete(v38);
      v16 = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    *v27 = v36;
    v37 = v27 + 1;
  }
  v46 = vmla_f32(v10, v14, v12);
  *(_QWORD *)(a1 + 8) = v37;
  if ((unint64_t)v37 >= v16)
  {
    v49 = *(float32x2_t **)a1;
    v50 = ((uint64_t)v37 - *(_QWORD *)a1) >> 3;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61)
      goto LABEL_83;
    v52 = v16 - (_QWORD)v49;
    if (v52 >> 2 > v51)
      v51 = v52 >> 2;
    v21 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8;
    v53 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v21)
      v53 = v51;
    if (v53)
    {
      v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v53);
      v49 = *(float32x2_t **)a1;
      v37 = *(float32x2_t **)(a1 + 8);
    }
    else
    {
      v54 = 0;
    }
    v55 = (float32x2_t *)(v53 + 8 * v50);
    v16 = v53 + 8 * v54;
    *v55 = v46;
    v47 = v55 + 1;
    if (v37 == v49)
    {
      v48 = v68;
    }
    else
    {
      v48 = v68;
      do
      {
        v56 = v37[-1];
        --v37;
        v55[-1] = v56;
        --v55;
      }
      while (v37 != v49);
      v49 = *(float32x2_t **)a1;
    }
    *(_QWORD *)a1 = v55;
    *(_QWORD *)(a1 + 8) = v47;
    *(_QWORD *)(a1 + 16) = v16;
    if (v49)
    {
      operator delete(v49);
      v16 = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    *v37 = v46;
    v47 = v37 + 1;
    v48 = v68;
  }
  v57 = vmla_f32(v15, v48, v12);
  *(_QWORD *)(a1 + 8) = v47;
  if ((unint64_t)v47 >= v16)
  {
    v59 = *(float32x2_t **)a1;
    v60 = ((uint64_t)v47 - *(_QWORD *)a1) >> 3;
    v61 = v60 + 1;
    if (!((unint64_t)(v60 + 1) >> 61))
    {
      v62 = v16 - (_QWORD)v59;
      if (v62 >> 2 > v61)
        v61 = v62 >> 2;
      v21 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8;
      v63 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v21)
        v63 = v61;
      if (v63)
      {
        v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
        v59 = *(float32x2_t **)a1;
        v47 = *(float32x2_t **)(a1 + 8);
      }
      else
      {
        v64 = 0;
      }
      v65 = (float32x2_t *)(v63 + 8 * v60);
      v66 = v63 + 8 * v64;
      *v65 = v57;
      v58 = v65 + 1;
      if (v47 != v59)
      {
        do
        {
          v67 = v47[-1];
          --v47;
          v65[-1] = v67;
          --v65;
        }
        while (v47 != v59);
        v59 = *(float32x2_t **)a1;
      }
      *(_QWORD *)a1 = v65;
      *(_QWORD *)(a1 + 8) = v58;
      *(_QWORD *)(a1 + 16) = v66;
      if (v59)
        operator delete(v59);
      goto LABEL_82;
    }
LABEL_83:
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  }
  *v47 = v57;
  v58 = v47 + 1;
LABEL_82:
  *(_QWORD *)(a1 + 8) = v58;
  return 5760;
}

void sub_1A13DF01C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13DF0E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13DF178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VNImageSourceManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A13DF384(void *a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  void *v3;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A13DF3D0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A13DF49C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13DF538(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A13DF54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1A13DF630(void *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A13DF65C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A13DF6E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13DF774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13DF81C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13DF900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13DF990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13DFA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13DFB10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13DFBF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13DFC94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13DFDBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13DFE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13DFF8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13E0034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13E0154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13E01FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13E02C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13E03E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13E07B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E0A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E0B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E0C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E0CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E0DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E282C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,_Unwind_Exception *exception_object,uint64_t a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1A13E2CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E321C(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  objc_begin_catch(exc_buf);
  JUMPOUT(0x1A13E319CLL);
}

void sub_1A13E32F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13E3FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1A13E3FACLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A13E42F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E4728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CVPixelBufferReleaseReferencingPixelBufferCallback(__CVBuffer *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    CVPixelBufferUnlockBaseAddress(a1, 0);
    CVPixelBufferRelease(a1);
  }
  else
  {
    VNValidatedLog(4, (uint64_t)CFSTR("VNImageBuffer - this release call should not be used with anything but a referencing pixelbuffer %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"void CVPixelBufferReleaseReferencingPixelBufferCallback(void * _Nullable, const void * _Nullable)");
  }
}

__n128 __Block_byref_object_copy__4449(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1A13E4C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*(_QWORD **)(v1 + 8));
  MEMORY[0x1A1B0A898](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t Geometry2D_metricToPixelHomo2D(uint64_t *a1, float *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  size_t v17;
  float v18;
  float v19;

  if (!a3)
    return 1916;
  v3 = *a3;
  if (!*a3)
    return 1916;
  v4 = a3[1];
  if (!v4)
    return 1916;
  v6 = (void *)a3[2];
  if (!v6)
    return 1916;
  v7 = 1916;
  if (!a1)
    return v7;
  v8 = *((unsigned int *)a3 + 6);
  if ((int)v8 < 1)
    return v7;
  v9 = *a1;
  if (!*a1)
    return 1916;
  v10 = a1[1];
  if (!v10)
    return 1916;
  v11 = (char *)a1[2];
  if (!v11)
    return 1916;
  v12 = *((_DWORD *)a1 + 6);
  v7 = 1916;
  if (v12 >= 1 && v12 == (_DWORD)v8)
  {
    v13 = 0;
    v14 = *a2;
    v15 = a2[3];
    v16 = a2[4];
    v17 = 4 * v8;
    v18 = a2[6];
    v19 = a2[7];
    do
    {
      *(float *)(v3 + v13) = (float)((float)(v15 * *(float *)(v10 + v13)) + (float)(v14 * *(float *)(v9 + v13)))
                           + (float)(v18 * *(float *)&v11[v13]);
      *(float *)(v4 + v13) = (float)(v19 * *(float *)&v11[v13]) + (float)(v16 * *(float *)(v10 + v13));
      v13 += 4;
    }
    while (v17 != v13);
    memcpy(v6, v11, v17);
    return 1920;
  }
  return v7;
}

void sub_1A13E4E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A13E502C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13E514C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13E5608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{

  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_1A13E5834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13E59A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4522(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_1A13E5C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  uint64_t v20;

  _Block_object_dispose((const void *)(v20 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void sub_1A13E5E00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E5E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

IOSurfaceRef createIOSurfaceWithInput(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, _QWORD *a5)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFDictionary *v14;
  IOSurfaceRef v15;
  void *v16;
  void *v17;
  void *BaseAddress;
  vImage_Error v19;
  void *v20;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  dest.data = (void *)*MEMORY[0x1E0CBC1E0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  src.data = v10;
  dest.height = *MEMORY[0x1E0CBC008];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  src.height = (vImagePixelCount)v11;
  dest.width = *MEMORY[0x1E0CBBF00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  src.width = (vImagePixelCount)v12;
  dest.rowBytes = *MEMORY[0x1E0CBBF08];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  src.rowBytes = (size_t)v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &src, &dest, 4);
  v14 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v15 = IOSurfaceCreate(v14);
  if (!v15)
  {
    if (a5)
    {
      +[VNFgBgInstanceSegmenterError allocationErrorIOSurface](VNFgBgInstanceSegmenterError, "allocationErrorIOSurface");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      +[VNFgBgInstanceSegmenterError errorWithCode:description:](VNFgBgInstanceSegmenterError, "errorWithCode:description:", -7, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:
      *a5 = v17;

      return 0;
    }
    return 0;
  }
  if (IOSurfaceLock(v15, 0, 0))
  {
    CFRelease(v15);
    if (a5)
      goto LABEL_12;
    return 0;
  }
  BaseAddress = IOSurfaceGetBaseAddress(v15);
  src.data = *a4;
  src.height = 1;
  src.width = a2 * a1;
  src.rowBytes = 4 * a2 * a1;
  dest.data = BaseAddress;
  dest.height = 1;
  dest.width = a2 * a1;
  dest.rowBytes = 2 * a2 * a1;
  v19 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
  if (a5 && v19)
  {
    +[VNFgBgInstanceSegmenterError genericErrorIOSurface](VNFgBgInstanceSegmenterError, "genericErrorIOSurface");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    +[VNFgBgInstanceSegmenterError errorWithCode:description:](VNFgBgInstanceSegmenterError, "errorWithCode:description:", -7, v20);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

  }
  if (IOSurfaceUnlock(v15, 0, 0))
  {
    CFRelease(v15);
    if (a5)
    {
LABEL_12:
      +[VNFgBgInstanceSegmenterError genericErrorIOSurface](VNFgBgInstanceSegmenterError, "genericErrorIOSurface");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      +[VNFgBgInstanceSegmenterError errorWithCode:description:](VNFgBgInstanceSegmenterError, "errorWithCode:description:", -7, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    return 0;
  }
  return v15;
}

void sub_1A13E623C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E6370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A13E645C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13E66A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13E6BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,uint64_t a30,void *a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,id a52)
{
  void *v52;
  void *v53;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);

  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4632(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4633(uint64_t a1)
{

}

void sub_1A13E6F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *apple::vision::libraries::autotrace::EPolygon::addPointAtStart(apple::vision::libraries::autotrace::EPolygon *this)
{
  int v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *result;

  v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    v3 = (char *)*((_QWORD *)this + 1);
LABEL_5:
    v11 = v2 - 1;
    result = &v3[8 * v11];
    ++*(_DWORD *)this;
    *((_DWORD *)this + 4) = v11;
    return result;
  }
  v4 = (char *)malloc_type_malloc(8 * *(int *)this + 800, 0x100004000313F17uLL);
  if (v4)
  {
    v3 = v4;
    memmove(v4 + 400, (const void *)(*((_QWORD *)this + 1) + 8 * *((int *)this + 4)), 8 * *(int *)this);
    *((_DWORD *)this + 4) = 50;
    *((_DWORD *)this + 1) = *(_DWORD *)this + 100;
    free(*((void **)this + 1));
    *((_QWORD *)this + 1) = v3;
    v2 = *((_DWORD *)this + 4);
    goto LABEL_5;
  }
  VNValidatedLog(4, (uint64_t)CFSTR("%s: could not extend extract polygons point list"), v5, v6, v7, v8, v9, v10, (uint64_t)"addPointAtStart");
  return 0;
}

char *apple::vision::libraries::autotrace::EPolygon::addPointAtEnd(apple::vision::libraries::autotrace::EPolygon *this)
{
  int v2;
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *result;

  v2 = *(_DWORD *)this;
  v3 = *(_DWORD *)this + *((_DWORD *)this + 4);
  if (v3 != *((_DWORD *)this + 1))
  {
    v11 = (char *)*((_QWORD *)this + 1);
    goto LABEL_5;
  }
  v4 = (char *)malloc_type_malloc(8 * (v2 + 100), 0x100004000313F17uLL);
  if (v4)
  {
    v11 = v4;
    memmove(v4 + 400, (const void *)(*((_QWORD *)this + 1) + 8 * *((int *)this + 4)), 8 * *(int *)this);
    *((_DWORD *)this + 4) = 50;
    *((_DWORD *)this + 1) = *(_DWORD *)this + 100;
    free(*((void **)this + 1));
    *((_QWORD *)this + 1) = v11;
    v2 = *(_DWORD *)this;
    v3 = *(_DWORD *)this + *((_DWORD *)this + 4);
LABEL_5:
    result = &v11[8 * v3];
    *(_DWORD *)this = v2 + 1;
    return result;
  }
  VNValidatedLog(4, (uint64_t)CFSTR("%s: could not extend extract polygons point list"), v5, v6, v7, v8, v9, v10, (uint64_t)"addPointAtEnd");
  return 0;
}

uint64_t apple::vision::libraries::autotrace::EPolygon::containsPoint(unsigned int *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  BOOL v13;
  float v16;
  char v17;
  BOOL v19;

  v2 = *a1;
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = *((_QWORD *)a1 + 1);
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v3);
      if (v2 - 1 == v3)
        v7 = 0;
      else
        v7 = v3 + 1;
      v8 = *(_QWORD *)(v5 + 8 * v7);
      if (*((float *)&v6 + 1) != *((float *)&v8 + 1))
      {
        if (*((float *)&v8 + 1) <= *((float *)&v6 + 1))
        {
          v9 = *(float *)&v8;
          LODWORD(v8) = *(_QWORD *)(v5 + 8 * v3);
          LODWORD(v10) = HIDWORD(*(_QWORD *)(v5 + 8 * v7));
          LODWORD(v11) = HIDWORD(*(_QWORD *)(v5 + 8 * v3));
        }
        else
        {
          LODWORD(v9) = *(_QWORD *)(v5 + 8 * v3);
          LODWORD(v10) = HIDWORD(*(_QWORD *)(v5 + 8 * v3));
          LODWORD(v11) = HIDWORD(*(_QWORD *)(v5 + 8 * v7));
        }
        v12 = v9 < *(float *)&a2 && *(float *)&v8 < *(float *)&a2;
        v13 = !v12 && v10 <= *((float *)&a2 + 1);
        if (v13 && v11 >= *((float *)&a2 + 1))
        {
          if (*(float *)&v8 > *(float *)&a2 && v9 > *(float *)&a2)
          {
            v17 = v10 != *((float *)&a2 + 1);
            if (*((float *)&v8 + 1) > *((float *)&v6 + 1) || v10 == *((float *)&a2 + 1))
              goto LABEL_27;
            goto LABEL_39;
          }
          v16 = (float)((float)(*(float *)&a2 - *(float *)&v8) * (float)(v10 - v11))
              - (float)((float)(*((float *)&a2 + 1) - v11) * (float)(v9 - *(float *)&v8));
          if (v16 != 0.0)
          {
            v19 = v16 <= 0.0 || v10 == *((float *)&a2 + 1);
            v17 = !v19;
            if (v19 || *((float *)&v8 + 1) > *((float *)&v6 + 1))
              goto LABEL_27;
LABEL_39:
            v17 = 1;
            goto LABEL_27;
          }
        }
      }
      v17 = 0;
LABEL_27:
      ++v3;
      v4 += v17;
      if (v2 == v3)
        return v4 & 1;
    }
  }
  return 0;
}

BOOL apple::vision::libraries::autotrace::EPolygonList::init(apple::vision::libraries::autotrace::EPolygonList *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v8 = malloc_type_malloc(0xFA0uLL, 0x10800400A3A46C6uLL);
  *((_QWORD *)this + 1) = v8;
  if (v8)
  {
    *(_QWORD *)this = 0x6400000000;
    *((_DWORD *)this + 4) = -1;
  }
  else
  {
    VNValidatedLog(4, (uint64_t)CFSTR("%s: could not allocate extract polygons point list"), v2, v3, v4, v5, v6, v7, (uint64_t)"init");
  }
  return v8 != 0;
}

void apple::vision::libraries::autotrace::EPolygonList::term(apple::vision::libraries::autotrace::EPolygonList *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*(int *)this >= 1)
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 1);
    v4 = v3 + 21;
    do
    {
      *(_DWORD *)(v4 + 3) = *((_DWORD *)this + 4);
      *((_DWORD *)this + 4) = -858993459 * ((unint64_t)(v3 - *((_QWORD *)this + 1)) >> 3);
      *(_BYTE *)v4 = 1;
      free(*(void **)(v4 - 13));
      *(_QWORD *)(v4 - 13) = 0;
      *(_QWORD *)(v4 - 21) = 0;
      *(_QWORD *)(v4 + 7) = -1;
      ++v2;
      v4 += 40;
      v3 += 40;
    }
    while (v2 < *(_DWORD *)this);
  }
  free(*((void **)this + 1));
}

void apple::vision::libraries::autotrace::EPolygonList::freePolygon(apple::vision::libraries::autotrace::EPolygonList *this, apple::vision::libraries::autotrace::EPolygon *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *((_DWORD *)a2 + 6) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = -858993459 * (((unint64_t)a2 - *((_QWORD *)this + 1)) >> 3);
  *((_BYTE *)a2 + 21) = 1;
  free(*((void **)a2 + 1));
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)((char *)a2 + 28) = -1;
  apple::vision::libraries::autotrace::EPolygonList::verifyList(this, v4, v5, v6, v7, v8, v9, v10);
}

void apple::vision::libraries::autotrace::EPolygonList::verifyList(apple::vision::libraries::autotrace::EPolygonList *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int i;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int j;
  int v15;
  uint64_t v16;
  int m;
  int k;

  for (i = *((_DWORD *)this + 4); i != -1; i = *(_DWORD *)(v11 + 40 * v10 + 24))
  {
    v10 = i;
    if (i < 0 || i >= *(_DWORD *)this)
      VNValidatedLog(4, (uint64_t)CFSTR("%s: free polygon %d free list index out of range (value: %d)"), a3, a4, a5, a6, a7, a8, (uint64_t)"verifyList");
    v11 = *((_QWORD *)this + 1);
    if (!*(_BYTE *)(v11 + 40 * v10 + 21))
      VNValidatedLog(4, (uint64_t)CFSTR("%s: polygon %d on free list is not marked free"), a3, a4, a5, a6, a7, a8, (uint64_t)"verifyList");
  }
  if (*(int *)this >= 1)
  {
    v12 = 0;
    v13 = *((_QWORD *)this + 1);
    do
    {
      if (*(_BYTE *)(v13 + 21))
      {
        for (j = *((_DWORD *)this + 4); j != -1; j = *(_DWORD *)(*((_QWORD *)this + 1) + 40 * j + 24))
        {
          if (j == v12)
            goto LABEL_28;
        }
        VNValidatedLog(4, (uint64_t)CFSTR("%s: free polygon %d is not on the free list"), a3, a4, a5, a6, a7, a8, (uint64_t)"verifyPolygon");
      }
      else
      {
        if ((*(_DWORD *)v13 & 0x80000000) != 0 || *(_DWORD *)v13 > *(_DWORD *)(v13 + 4))
          VNValidatedLog(4, (uint64_t)CFSTR("%s: polygon %d has a bad number of points %d (maxPoints %d)"), a3, a4, a5, a6, a7, a8, (uint64_t)"verifyPolygon");
        v15 = *(_DWORD *)(v13 + 32);
        if (v15 == -1)
        {
          if (*(_DWORD *)(v13 + 24) != -1)
            VNValidatedLog(4, (uint64_t)CFSTR("%s: top-level polygon %d has a next pointer (value: %d)"), a3, a4, a5, a6, a7, a8, (uint64_t)"verifyPolygon");
          for (k = *(_DWORD *)(v13 + 28); k != -1; k = *(_DWORD *)(*((_QWORD *)this + 1) + 40 * k + 24))
          {
            if (k < 0 || k >= *(_DWORD *)this)
              VNValidatedLog(4, (uint64_t)CFSTR("%s: polygon %d has a bad index (value: %d) in its child list"), a3, a4, a5, a6, a7, a8, (uint64_t)"verifyPolygon");
          }
        }
        else
        {
          if (v15 < 0 || v15 >= *(_DWORD *)this)
          {
            VNValidatedLog(4, (uint64_t)CFSTR("%s: child polygon %d has a bad parent index (value %d)"), a3, a4, a5, a6, a7, a8, (uint64_t)"verifyPolygon");
            v15 = *(_DWORD *)(v13 + 32);
          }
          v16 = *((_QWORD *)this + 1);
          for (m = *(_DWORD *)(v16 + 40 * v15 + 28); m != -1; m = *(_DWORD *)(v16 + 40 * m + 24))
          {
            if (m == v12)
              goto LABEL_28;
          }
          VNValidatedLog(4, (uint64_t)CFSTR("%s: child polygon %d is not found in the child list of its parent polygon %d"), a3, a4, a5, a6, a7, a8, (uint64_t)"verifyPolygon");
        }
      }
LABEL_28:
      ++v12;
      v13 += 40;
    }
    while (v12 < *(_DWORD *)this);
  }
}

uint64_t apple::vision::libraries::autotrace::EPolygonList::newPolygon(apple::vision::libraries::autotrace::EPolygonList *this, int a2, int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;

  v6 = *((_DWORD *)this + 4);
  if (v6 == -1)
  {
    v8 = *(_DWORD *)this;
    v9 = *((_DWORD *)this + 1);
    if (*(_DWORD *)this >= v9)
    {
      v10 = malloc_type_malloc(40 * v9 + 4000, 0x10800400A3A46C6uLL);
      v7 = (uint64_t)v10;
      if (!v10)
      {
        VNValidatedLog(4, (uint64_t)CFSTR("%s: could not extend extract polygons list"), v11, v12, v13, v14, v15, v16, (uint64_t)"newPolygon");
        return v7;
      }
      memmove(v10, *((const void **)this + 1), 40 * *((int *)this + 1));
      *((_DWORD *)this + 1) += 100;
      free(*((void **)this + 1));
      *((_QWORD *)this + 1) = v7;
      v8 = *(_DWORD *)this;
    }
    else
    {
      v7 = *((_QWORD *)this + 1);
    }
    v7 += 40 * v8;
    *(_DWORD *)this = v8 + 1;
  }
  else
  {
    v7 = *((_QWORD *)this + 1) + 40 * v6;
    *((_DWORD *)this + 4) = *(_DWORD *)(v7 + 24);
    *(_BYTE *)(v7 + 21) = 0;
  }
  v17 = malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
  *(_QWORD *)(v7 + 8) = v17;
  if (v17)
  {
    *(_DWORD *)v7 = 0;
    *(_DWORD *)(v7 + 4) = a2;
    if (a2 >= 0)
      v25 = a2;
    else
      v25 = a2 + 1;
    v26 = v25 >> 1;
    if (!a3)
      v26 = 0;
    *(_DWORD *)(v7 + 16) = v26;
    *(_WORD *)(v7 + 20) = 0;
    *(_QWORD *)(v7 + 24) = -1;
    *(_DWORD *)(v7 + 32) = -1;
    apple::vision::libraries::autotrace::EPolygonList::verifyList(this, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    VNValidatedLog(4, (uint64_t)CFSTR("%s: could not allocate extract polygons point list"), v19, v20, v21, v22, v23, v24, (uint64_t)"newPolygon");
    return 0;
  }
  return v7;
}

void apple::vision::libraries::autotrace::EPolygonList::insertPolygon(apple::vision::libraries::autotrace::EPolygonList *this, apple::vision::libraries::autotrace::EPolygon *a2, apple::vision::libraries::autotrace::EPolygon *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;

  if (!*((_BYTE *)a2 + 20) || !*((_BYTE *)a3 + 20))
    VNValidatedLog(4, (uint64_t)CFSTR("%s: something is not closed"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"insertPolygon");
  v11 = *((_QWORD *)this + 1);
  v12 = -858993459 * (((unint64_t)a3 - v11) >> 3);
  v13 = *((_DWORD *)a3 + 8);
  if (v13 != -1)
  {
    v14 = v11 + 40 * v13;
    v17 = *(_DWORD *)(v14 + 28);
    v15 = (unsigned int *)(v14 + 28);
    v16 = v17;
    if (v17 != -1)
    {
      v18 = 0;
      while (1)
      {
        if ((v16 & 0x80000000) != 0 || (signed int)v16 >= *(_DWORD *)this)
        {
          VNValidatedLog(4, (uint64_t)CFSTR("%s: bad next index %d in polygon %d nested list"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"insertPolygon");
          v11 = *((_QWORD *)this + 1);
          goto LABEL_16;
        }
        v19 = (unsigned int *)(v11 + 40 * v16 + 24);
        if (v16 == v12)
          break;
        v18 = v11 + 40 * v16;
        v16 = *v19;
        if (*v19 == -1)
          goto LABEL_16;
      }
      v20 = *v19;
      if (v18)
        *(_DWORD *)(v18 + 24) = v20;
      else
        *v15 = v20;
    }
  }
LABEL_16:
  *((_DWORD *)a3 + 6) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v12;
  *((_BYTE *)a3 + 21) = 0;
  v21 = -858993459 * (((unint64_t)a2 - v11) >> 3);
  *((_DWORD *)a3 + 8) = v21;
  if (v21 < 0 || *(_DWORD *)this <= v21)
    VNValidatedLog(4, (uint64_t)CFSTR("%s: parent index out of whack"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"insertPolygon");
  apple::vision::libraries::autotrace::EPolygonList::verifyList(this, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

EPolygon *apple::vision::libraries::autotrace::EPolygonList::containsPolygon(apple::vision::libraries::autotrace::EPolygonList *this, EPolygon *a2)
{
  int v2;
  double v4;
  EPolygon *i;
  BOOL v6;

  v2 = *(_DWORD *)this;
  if (*(int *)this < 1)
    return 0;
  v4 = **((double **)a2 + 1);
  for (i = (EPolygon *)*((_QWORD *)this + 1); ; i = (EPolygon *)((char *)i + 40))
  {
    v6 = *((_BYTE *)i + 21) || i == a2;
    if (!v6
      && *((_BYTE *)i + 20)
      && (apple::vision::libraries::autotrace::EPolygon::containsPoint((unsigned int *)i, v4) & 1) != 0)
    {
      break;
    }
    if (!--v2)
      return 0;
  }
  return i;
}

unsigned int *apple::vision::libraries::autotrace::EPolygonList::containsPolygonInChildList(apple::vision::libraries::autotrace::EPolygonList *this, int a2, EPolygon *a3, double a4)
{
  uint64_t v6;
  unsigned int *v7;

  v6 = *((_QWORD *)this + 1);
  while (1)
  {
    v7 = (unsigned int *)(v6 + 40 * a2);
    if ((apple::vision::libraries::autotrace::EPolygon::containsPoint(v7, a4) & 1) != 0)
      break;
    a2 = *(_DWORD *)(v6 + 40 * a2 + 24);
    if (a2 == -1)
      return 0;
  }
  return v7;
}

void sub_1A13E7AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13E7E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1A13E7FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1A13E8064(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::__split_buffer<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer v12;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_1A13E8178(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v8;

  for (result = a7; a3 != a5; a3 -= 24)
  {
    v8 = *(_OWORD *)(a3 - 24);
    *(_QWORD *)(result - 8) = *(_QWORD *)(a3 - 8);
    *(_OWORD *)(result - 24) = v8;
    result -= 24;
    *(_QWORD *)(a3 - 16) = 0;
    *(_QWORD *)(a3 - 8) = 0;
    *(_QWORD *)(a3 - 24) = 0;
  }
  return result;
}

uint64_t *std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 32;
      v6 = *(_OWORD *)(v3 - 32);
      *(_QWORD *)(v4 - 16) = *(_QWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v6;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      v4 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(uint64_t a1, void **a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  void **v21;
  float v22;
  void **v23;
  float v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  void **v31;
  __int128 v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  float v37;
  unint64_t v38;
  float v39;
  void **v40;
  void **v41;
  float v42;
  __int128 v43;
  float v44;
  float v45;
  void **v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *v51;
  __int128 v52;
  void *v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  __int128 v58;
  float v59;
  uint64_t v60;
  __int128 v61;
  float v62;
  void **v63;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  float v69;
  void *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  float v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  void *v92;
  char v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  float v104;
  void *v105;
  char v106;
  unint64_t v107;
  __int128 v108;
  uint64_t v110;
  void **v111;
  float v112;
  void *v113;
  char v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  float v118;
  float *v119;
  void *v120;
  _BYTE v121[15];
  _BYTE v122[15];
  _BYTE v123[15];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[15];
  _BYTE v129[15];
  _BYTE v130[15];
  _BYTE v131[15];
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;

LABEL_1:
  v119 = (float *)(a2 - 4);
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((float *)a2 - 2) > *(float *)(a1 + 24))
        {
          v134 = *(void **)(a1 + 16);
          v126 = *(_OWORD *)a1;
          v48 = *(_OWORD *)v119;
          *(_QWORD *)(a1 + 16) = *(a2 - 2);
          *(_OWORD *)a1 = v48;
          *(a2 - 2) = v134;
          *(_OWORD *)v119 = v126;
          LODWORD(v48) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v48;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)(a1 + 32), v119);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), v119);
        return;
      case 5:
        v49 = (__int128 *)(a1 + 32);
        v50 = (__int128 *)(a1 + 64);
        v51 = (__int128 *)(a1 + 96);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), (float *)(a1 + 96));
        if (*((float *)a2 - 2) > *(float *)(a1 + 120))
        {
          v52 = *v51;
          v53 = *(void **)(a1 + 112);
          v54 = (uint64_t)*(a2 - 2);
          *v51 = *(_OWORD *)v119;
          *(_QWORD *)(a1 + 112) = v54;
          *(a2 - 2) = v53;
          *(_OWORD *)v119 = v52;
          LODWORD(v52) = *(_DWORD *)(a1 + 120);
          *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v52;
          v55 = *(float *)(a1 + 120);
          v56 = *(float *)(a1 + 88);
          if (v55 > v56)
          {
            v57 = *(_QWORD *)(a1 + 80);
            v58 = *v50;
            *v50 = *v51;
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 112);
            *v51 = v58;
            *(_QWORD *)(a1 + 112) = v57;
            *(float *)(a1 + 88) = v55;
            v59 = *(float *)(a1 + 56);
            *(float *)(a1 + 120) = v56;
            if (v55 > v59)
            {
              v60 = *(_QWORD *)(a1 + 48);
              v61 = *v49;
              *v49 = *v50;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 80);
              *v50 = v61;
              *(_QWORD *)(a1 + 80) = v60;
              *(float *)(a1 + 56) = v55;
              v62 = *(float *)(a1 + 24);
              *(float *)(a1 + 88) = v59;
              if (v55 > v62)
              {
                v135 = *(_QWORD *)(a1 + 16);
                v127 = *(_OWORD *)a1;
                *(_OWORD *)a1 = *v49;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 48);
                *v49 = v127;
                *(_QWORD *)(a1 + 48) = v135;
                *(float *)(a1 + 24) = v55;
                *(float *)(a1 + 56) = v62;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v63 = (void **)(a1 + 32);
          v65 = (void **)a1 == a2 || v63 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v65)
            {
              v66 = 0;
              v67 = a1;
              do
              {
                v68 = v63;
                v69 = *(float *)(v67 + 56);
                if (v69 > *(float *)(v67 + 24))
                {
                  v70 = *v63;
                  *(_QWORD *)v128 = *(_QWORD *)(v67 + 40);
                  *(_QWORD *)&v128[7] = *(_QWORD *)(v67 + 47);
                  v71 = *(_BYTE *)(v67 + 55);
                  v63[1] = 0;
                  v63[2] = 0;
                  *v63 = 0;
                  v72 = v66;
                  while (1)
                  {
                    v73 = a1 + v72;
                    v74 = (void **)(a1 + v72 + 32);
                    if (*(char *)(a1 + v72 + 55) < 0)
                      operator delete(*v74);
                    *(_OWORD *)v74 = *(_OWORD *)v73;
                    *(_QWORD *)(a1 + v72 + 48) = *(_QWORD *)(v73 + 16);
                    *(_BYTE *)(v73 + 23) = 0;
                    *(_BYTE *)v73 = 0;
                    *(_DWORD *)(v73 + 56) = *(_DWORD *)(v73 + 24);
                    if (!v72)
                      break;
                    v75 = *(float *)(a1 + v72 - 8);
                    v72 -= 32;
                    if (v69 <= v75)
                    {
                      v76 = a1 + v72 + 32;
                      goto LABEL_88;
                    }
                  }
                  v76 = a1;
LABEL_88:
                  if (*(char *)(v76 + 23) < 0)
                    operator delete(*(void **)v76);
                  *(_QWORD *)v76 = v70;
                  *(_QWORD *)(v76 + 8) = *(_QWORD *)v128;
                  *(_QWORD *)(v76 + 15) = *(_QWORD *)&v128[7];
                  *(_BYTE *)(v76 + 23) = v71;
                  *(float *)(v76 + 24) = v69;
                }
                v63 = v68 + 4;
                v66 += 32;
                v67 = (uint64_t)v68;
              }
              while (v68 + 4 != a2);
            }
          }
          else if (!v65)
          {
            v110 = a1 - 8;
            do
            {
              v111 = v63;
              v112 = *(float *)(a1 + 56);
              if (v112 > *(float *)(a1 + 24))
              {
                v113 = *v63;
                *(_QWORD *)v131 = *(_QWORD *)(a1 + 40);
                *(_QWORD *)&v131[7] = *(_QWORD *)(a1 + 47);
                v114 = *(_BYTE *)(a1 + 55);
                v63[1] = 0;
                v63[2] = 0;
                *v63 = 0;
                v115 = v110;
                do
                {
                  v116 = (void **)(v115 + 40);
                  if (*(char *)(v115 + 63) < 0)
                    operator delete(*v116);
                  *(_OWORD *)v116 = *(_OWORD *)(v115 + 8);
                  *(_QWORD *)(v115 + 56) = *(_QWORD *)(v115 + 24);
                  *(_BYTE *)(v115 + 8) = 0;
                  v117 = v115 + 8;
                  *(_BYTE *)(v115 + 31) = 0;
                  *(_DWORD *)(v115 + 64) = *(_DWORD *)(v115 + 32);
                  v118 = *(float *)v115;
                  v115 -= 32;
                }
                while (v112 > v118);
                if (*(char *)(v117 + 23) < 0)
                  operator delete(*(void **)v117);
                *(_QWORD *)v117 = v113;
                *(_QWORD *)(v117 + 15) = *(_QWORD *)&v131[7];
                *(_QWORD *)(v117 + 8) = *(_QWORD *)v131;
                *(_BYTE *)(v117 + 23) = v114;
                *(float *)(v117 + 24) = v112;
              }
              v63 = v111 + 4;
              v110 += 32;
              a1 = (uint64_t)v111;
            }
            while (v111 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((void **)a1 != a2)
          {
            v77 = (unint64_t)(v10 - 2) >> 1;
            v78 = v77;
            do
            {
              v79 = v78;
              if (v77 >= v78)
              {
                v80 = (2 * v78) | 1;
                v81 = a1 + 32 * v80;
                if (2 * v79 + 2 < v10 && *(float *)(v81 + 24) > *(float *)(v81 + 56))
                {
                  v81 += 32;
                  v80 = 2 * v79 + 2;
                }
                v82 = *(float *)(a1 + 32 * v79 + 24);
                if (*(float *)(v81 + 24) <= v82)
                {
                  v83 = a1 + 32 * v79;
                  v120 = *(void **)v83;
                  *(_QWORD *)&v129[7] = *(_QWORD *)(v83 + 15);
                  *(_QWORD *)v129 = *(_QWORD *)(v83 + 8);
                  v84 = *(_BYTE *)(v83 + 23);
                  *(_QWORD *)v83 = 0;
                  *(_QWORD *)(v83 + 8) = 0;
                  *(_QWORD *)(v83 + 16) = 0;
                  do
                  {
                    v85 = v83;
                    v83 = v81;
                    if (*(char *)(v85 + 23) < 0)
                      operator delete(*(void **)v85);
                    v86 = *(_OWORD *)v83;
                    *(_QWORD *)(v85 + 16) = *(_QWORD *)(v83 + 16);
                    *(_OWORD *)v85 = v86;
                    *(_BYTE *)(v83 + 23) = 0;
                    *(_BYTE *)v83 = 0;
                    *(_DWORD *)(v85 + 24) = *(_DWORD *)(v83 + 24);
                    if (v77 < v80)
                      break;
                    v87 = 2 * v80;
                    v80 = (2 * v80) | 1;
                    v81 = a1 + 32 * v80;
                    v88 = v87 + 2;
                    if (v88 < v10 && *(float *)(v81 + 24) > *(float *)(v81 + 56))
                    {
                      v81 += 32;
                      v80 = v88;
                    }
                  }
                  while (*(float *)(v81 + 24) <= v82);
                  if (*(char *)(v83 + 23) < 0)
                    operator delete(*(void **)v83);
                  *(_QWORD *)v83 = v120;
                  *(_QWORD *)(v83 + 8) = *(_QWORD *)v129;
                  *(_QWORD *)(v83 + 15) = *(_QWORD *)&v129[7];
                  *(_BYTE *)(v83 + 23) = v84;
                  *(float *)(v83 + 24) = v82;
                }
              }
              v78 = v79 - 1;
            }
            while (v79);
            v89 = (unint64_t)v9 >> 5;
            do
            {
              v90 = 0;
              v91 = a2;
              v92 = *(void **)a1;
              *(_QWORD *)v123 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v123[7] = *(_QWORD *)(a1 + 15);
              v93 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v94 = *(_DWORD *)(a1 + 24);
              v95 = a1;
              do
              {
                v96 = v95 + 32 * (v90 + 1);
                v97 = 2 * v90;
                v90 = (2 * v90) | 1;
                v98 = v97 + 2;
                if (v98 < v89 && *(float *)(v96 + 24) > *(float *)(v96 + 56))
                {
                  v96 += 32;
                  v90 = v98;
                }
                if (*(char *)(v95 + 23) < 0)
                  operator delete(*(void **)v95);
                v99 = *(_OWORD *)v96;
                *(_QWORD *)(v95 + 16) = *(_QWORD *)(v96 + 16);
                *(_OWORD *)v95 = v99;
                *(_BYTE *)(v96 + 23) = 0;
                *(_BYTE *)v96 = 0;
                *(_DWORD *)(v95 + 24) = *(_DWORD *)(v96 + 24);
                v95 = v96;
              }
              while (v90 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
              a2 -= 4;
              v100 = *(char *)(v96 + 23);
              if ((void **)v96 == v91 - 4)
              {
                if (v100 < 0)
                  operator delete(*(void **)v96);
                *(_QWORD *)v96 = v92;
                *(_QWORD *)(v96 + 8) = *(_QWORD *)v123;
                *(_QWORD *)(v96 + 15) = *(_QWORD *)&v123[7];
                *(_BYTE *)(v96 + 23) = v93;
                *(_DWORD *)(v96 + 24) = v94;
              }
              else
              {
                if (v100 < 0)
                  operator delete(*(void **)v96);
                v101 = *(_OWORD *)a2;
                *(_QWORD *)(v96 + 16) = *(v91 - 2);
                *(_OWORD *)v96 = v101;
                *((_BYTE *)v91 - 9) = 0;
                *((_BYTE *)v91 - 32) = 0;
                *(_DWORD *)(v96 + 24) = *((_DWORD *)v91 - 2);
                if (*((char *)v91 - 9) < 0)
                  operator delete(*a2);
                *(v91 - 4) = v92;
                *(void **)((char *)v91 - 17) = *(void **)&v123[7];
                *(v91 - 3) = *(void **)v123;
                *((_BYTE *)v91 - 9) = v93;
                *((_DWORD *)v91 - 2) = v94;
                v102 = v96 + 32 - a1;
                if (v102 >= 33)
                {
                  v103 = (((unint64_t)v102 >> 5) - 2) >> 1;
                  v104 = *(float *)(v96 + 24);
                  if (*(float *)(a1 + 32 * v103 + 24) > v104)
                  {
                    v105 = *(void **)v96;
                    *(_QWORD *)v130 = *(_QWORD *)(v96 + 8);
                    *(_QWORD *)&v130[7] = *(_QWORD *)(v96 + 15);
                    v106 = *(_BYTE *)(v96 + 23);
                    *(_QWORD *)(v96 + 8) = 0;
                    *(_QWORD *)(v96 + 16) = 0;
                    *(_QWORD *)v96 = 0;
                    do
                    {
                      if (*(char *)(v96 + 23) < 0)
                        operator delete(*(void **)v96);
                      v107 = a1 + 32 * v103;
                      v108 = *(_OWORD *)v107;
                      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v107 + 16);
                      *(_OWORD *)v96 = v108;
                      *(_BYTE *)(v107 + 23) = 0;
                      *(_BYTE *)v107 = 0;
                      *(_DWORD *)(v96 + 24) = *(_DWORD *)(v107 + 24);
                      if (!v103)
                        break;
                      v103 = (v103 - 1) >> 1;
                      v96 = v107;
                    }
                    while (*(float *)(a1 + 32 * v103 + 24) > v104);
                    if (*(char *)(v107 + 23) < 0)
                      operator delete(*(void **)v107);
                    *(_QWORD *)v107 = v105;
                    *(_QWORD *)(v107 + 15) = *(_QWORD *)&v130[7];
                    *(_QWORD *)(v107 + 8) = *(_QWORD *)v130;
                    *(_BYTE *)(v107 + 23) = v106;
                    *(float *)(v107 + 24) = v104;
                  }
                }
              }
            }
            while (v89-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = a1 + 32 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)v12, (float *)a1, v119);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)v12, v119);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)(a1 + 32), (float *)(v12 - 32), (float *)a2 - 16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)(a1 + 64), (float *)(a1 + 32 + 32 * v11), (float *)a2 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)(v12 - 32), (float *)v12, (float *)(a1 + 32 + 32 * v11));
          v132 = *(_QWORD *)(a1 + 16);
          v124 = *(_OWORD *)a1;
          v13 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v13;
          *(_QWORD *)(v12 + 16) = v132;
          *(_OWORD *)v12 = v124;
          v14 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v12 + 24) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(float *)(a1 + 24);
          if (*(float *)(a1 - 8) > v15)
            goto LABEL_11;
          v34 = *(_QWORD *)a1;
          *(_QWORD *)v122 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v122[7] = *(_QWORD *)(a1 + 15);
          v35 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v15 <= *((float *)a2 - 2))
          {
            v38 = a1 + 32;
            do
            {
              v8 = v38;
              if (v38 >= (unint64_t)a2)
                break;
              v39 = *(float *)(v38 + 24);
              v38 += 32;
            }
            while (v15 <= v39);
          }
          else
          {
            v36 = a1;
            do
            {
              v8 = v36 + 32;
              v37 = *(float *)(v36 + 56);
              v36 += 32;
            }
            while (v15 <= v37);
          }
          v40 = a2;
          if (v8 < (unint64_t)a2)
          {
            v41 = a2;
            do
            {
              v40 = v41 - 4;
              v42 = *((float *)v41 - 2);
              v41 -= 4;
            }
            while (v15 > v42);
          }
          while (v8 < (unint64_t)v40)
          {
            v133 = *(void **)(v8 + 16);
            v125 = *(_OWORD *)v8;
            v43 = *(_OWORD *)v40;
            *(_QWORD *)(v8 + 16) = v40[2];
            *(_OWORD *)v8 = v43;
            v40[2] = v133;
            *(_OWORD *)v40 = v125;
            LODWORD(v43) = *(_DWORD *)(v8 + 24);
            *(_DWORD *)(v8 + 24) = *((_DWORD *)v40 + 6);
            *((_DWORD *)v40 + 6) = v43;
            do
            {
              v44 = *(float *)(v8 + 56);
              v8 += 32;
            }
            while (v15 <= v44);
            do
            {
              v45 = *((float *)v40 - 2);
              v40 -= 4;
            }
            while (v15 > v45);
          }
          v46 = (void **)(v8 - 32);
          if (v8 - 32 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v47 = *(_OWORD *)v46;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 16);
            *(_OWORD *)a1 = v47;
            *(_BYTE *)(v8 - 9) = 0;
            *(_BYTE *)(v8 - 32) = 0;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 - 8);
          }
          if (*(char *)(v8 - 9) < 0)
            operator delete(*v46);
          a4 = 0;
          *(_QWORD *)(v8 - 32) = v34;
          *(_QWORD *)(v8 - 17) = *(_QWORD *)&v122[7];
          *(_QWORD *)(v8 - 24) = *(_QWORD *)v122;
          *(_BYTE *)(v8 - 9) = v35;
          *(float *)(v8 - 8) = v15;
          continue;
        }
        v15 = *(float *)(a1 + 24);
LABEL_11:
        v16 = *(_QWORD *)a1;
        *(_QWORD *)v121 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v121[7] = *(_QWORD *)(a1 + 15);
        v17 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v18 = a1;
        do
        {
          v19 = v18;
          v18 += 32;
        }
        while (*(float *)(v19 + 56) > v15);
        v20 = a2;
        if (v19 == a1)
        {
          v23 = a2;
          while (v18 < (unint64_t)v23)
          {
            v21 = v23 - 4;
            v24 = *((float *)v23 - 2);
            v23 -= 4;
            if (v24 > v15)
              goto LABEL_21;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 4;
            v22 = *((float *)v20 - 2);
            v20 -= 4;
          }
          while (v22 <= v15);
        }
LABEL_21:
        v8 = v18;
        if (v18 < (unint64_t)v21)
        {
          v25 = (unint64_t)v21;
          do
          {
            v26 = *(_OWORD *)v8;
            v27 = *(_QWORD *)(v8 + 16);
            v28 = *(_QWORD *)(v25 + 16);
            *(_OWORD *)v8 = *(_OWORD *)v25;
            *(_QWORD *)(v8 + 16) = v28;
            *(_QWORD *)(v25 + 16) = v27;
            *(_OWORD *)v25 = v26;
            LODWORD(v26) = *(_DWORD *)(v8 + 24);
            *(_DWORD *)(v8 + 24) = *(_DWORD *)(v25 + 24);
            *(_DWORD *)(v25 + 24) = v26;
            do
            {
              v29 = *(float *)(v8 + 56);
              v8 += 32;
            }
            while (v29 > v15);
            do
            {
              v30 = *(float *)(v25 - 8);
              v25 -= 32;
            }
            while (v30 <= v15);
          }
          while (v8 < v25);
        }
        v31 = (void **)(v8 - 32);
        if (v8 - 32 != a1)
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v32 = *(_OWORD *)v31;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 16);
          *(_OWORD *)a1 = v32;
          *(_BYTE *)(v8 - 9) = 0;
          *(_BYTE *)(v8 - 32) = 0;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 - 8);
        }
        if (*(char *)(v8 - 9) < 0)
          operator delete(*v31);
        *(_QWORD *)(v8 - 32) = v16;
        *(_QWORD *)(v8 - 17) = *(_QWORD *)&v121[7];
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v121;
        *(_BYTE *)(v8 - 9) = v17;
        *(float *)(v8 - 8) = v15;
        if (v18 < (unint64_t)v21)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, v8 - 32);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(v8, (uint64_t)a2))
        {
          if (v33)
            continue;
          goto LABEL_36;
        }
        a2 = (void **)(v8 - 32);
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

  v119 = (float *)(a2 - 4);
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((float *)a2 - 2) > *(float *)(a1 + 24))
        {
          v134 = *(void **)(a1 + 16);
          v126 = *(_OWORD *)a1;
          v48 = *(_OWORD *)v119;
          *(_QWORD *)(a1 + 16) = *(a2 - 2);
          *(_OWORD *)a1 = v48;
          *(a2 - 2) = v134;
          *(_OWORD *)v119 = v126;
          LODWORD(v48) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v48;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)(a1 + 32), v119);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), v119);
        return;
      case 5:
        v49 = (__int128 *)(a1 + 32);
        v50 = (__int128 *)(a1 + 64);
        v51 = (__int128 *)(a1 + 96);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), (float *)(a1 + 96));
        if (*((float *)a2 - 2) > *(float *)(a1 + 120))
        {
          v52 = *v51;
          v53 = *(void **)(a1 + 112);
          v54 = (uint64_t)*(a2 - 2);
          *v51 = *(_OWORD *)v119;
          *(_QWORD *)(a1 + 112) = v54;
          *(a2 - 2) = v53;
          *(_OWORD *)v119 = v52;
          LODWORD(v52) = *(_DWORD *)(a1 + 120);
          *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v52;
          v55 = *(float *)(a1 + 120);
          v56 = *(float *)(a1 + 88);
          if (v55 > v56)
          {
            v57 = *(_QWORD *)(a1 + 80);
            v58 = *v50;
            *v50 = *v51;
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 112);
            *v51 = v58;
            *(_QWORD *)(a1 + 112) = v57;
            *(float *)(a1 + 88) = v55;
            v59 = *(float *)(a1 + 56);
            *(float *)(a1 + 120) = v56;
            if (v55 > v59)
            {
              v60 = *(_QWORD *)(a1 + 48);
              v61 = *v49;
              *v49 = *v50;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 80);
              *v50 = v61;
              *(_QWORD *)(a1 + 80) = v60;
              *(float *)(a1 + 56) = v55;
              v62 = *(float *)(a1 + 24);
              *(float *)(a1 + 88) = v59;
              if (v55 > v62)
              {
                v135 = *(_QWORD *)(a1 + 16);
                v127 = *(_OWORD *)a1;
                *(_OWORD *)a1 = *v49;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 48);
                *v49 = v127;
                *(_QWORD *)(a1 + 48) = v135;
                *(float *)(a1 + 24) = v55;
                *(float *)(a1 + 56) = v62;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v63 = (void **)(a1 + 32);
          v65 = (void **)a1 == a2 || v63 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v65)
            {
              v66 = 0;
              v67 = a1;
              do
              {
                v68 = v63;
                v69 = *(float *)(v67 + 56);
                if (v69 > *(float *)(v67 + 24))
                {
                  v70 = *v63;
                  *(_QWORD *)v128 = *(_QWORD *)(v67 + 40);
                  *(_QWORD *)&v128[7] = *(_QWORD *)(v67 + 47);
                  v71 = *(_BYTE *)(v67 + 55);
                  v63[1] = 0;
                  v63[2] = 0;
                  *v63 = 0;
                  v72 = v66;
                  while (1)
                  {
                    v73 = a1 + v72;
                    v74 = (void **)(a1 + v72 + 32);
                    if (*(char *)(a1 + v72 + 55) < 0)
                      operator delete(*v74);
                    *(_OWORD *)v74 = *(_OWORD *)v73;
                    *(_QWORD *)(a1 + v72 + 48) = *(_QWORD *)(v73 + 16);
                    *(_BYTE *)(v73 + 23) = 0;
                    *(_BYTE *)v73 = 0;
                    *(_DWORD *)(v73 + 56) = *(_DWORD *)(v73 + 24);
                    if (!v72)
                      break;
                    v75 = *(float *)(a1 + v72 - 8);
                    v72 -= 32;
                    if (v69 <= v75)
                    {
                      v76 = a1 + v72 + 32;
                      goto LABEL_88;
                    }
                  }
                  v76 = a1;
LABEL_88:
                  if (*(char *)(v76 + 23) < 0)
                    operator delete(*(void **)v76);
                  *(_QWORD *)v76 = v70;
                  *(_QWORD *)(v76 + 8) = *(_QWORD *)v128;
                  *(_QWORD *)(v76 + 15) = *(_QWORD *)&v128[7];
                  *(_BYTE *)(v76 + 23) = v71;
                  *(float *)(v76 + 24) = v69;
                }
                v63 = v68 + 4;
                v66 += 32;
                v67 = (uint64_t)v68;
              }
              while (v68 + 4 != a2);
            }
          }
          else if (!v65)
          {
            v110 = a1 - 8;
            do
            {
              v111 = v63;
              v112 = *(float *)(a1 + 56);
              if (v112 > *(float *)(a1 + 24))
              {
                v113 = *v63;
                *(_QWORD *)v131 = *(_QWORD *)(a1 + 40);
                *(_QWORD *)&v131[7] = *(_QWORD *)(a1 + 47);
                v114 = *(_BYTE *)(a1 + 55);
                v63[1] = 0;
                v63[2] = 0;
                *v63 = 0;
                v115 = v110;
                do
                {
                  v116 = (void **)(v115 + 40);
                  if (*(char *)(v115 + 63) < 0)
                    operator delete(*v116);
                  *(_OWORD *)v116 = *(_OWORD *)(v115 + 8);
                  *(_QWORD *)(v115 + 56) = *(_QWORD *)(v115 + 24);
                  *(_BYTE *)(v115 + 8) = 0;
                  v117 = v115 + 8;
                  *(_BYTE *)(v115 + 31) = 0;
                  *(_DWORD *)(v115 + 64) = *(_DWORD *)(v115 + 32);
                  v118 = *(float *)v115;
                  v115 -= 32;
                }
                while (v112 > v118);
                if (*(char *)(v117 + 23) < 0)
                  operator delete(*(void **)v117);
                *(_QWORD *)v117 = v113;
                *(_QWORD *)(v117 + 15) = *(_QWORD *)&v131[7];
                *(_QWORD *)(v117 + 8) = *(_QWORD *)v131;
                *(_BYTE *)(v117 + 23) = v114;
                *(float *)(v117 + 24) = v112;
              }
              v63 = v111 + 4;
              v110 += 32;
              a1 = (uint64_t)v111;
            }
            while (v111 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((void **)a1 != a2)
          {
            v77 = (unint64_t)(v10 - 2) >> 1;
            v78 = v77;
            do
            {
              v79 = v78;
              if (v77 >= v78)
              {
                v80 = (2 * v78) | 1;
                v81 = a1 + 32 * v80;
                if (2 * v79 + 2 < v10 && *(float *)(v81 + 24) > *(float *)(v81 + 56))
                {
                  v81 += 32;
                  v80 = 2 * v79 + 2;
                }
                v82 = *(float *)(a1 + 32 * v79 + 24);
                if (*(float *)(v81 + 24) <= v82)
                {
                  v83 = a1 + 32 * v79;
                  v120 = *(void **)v83;
                  *(_QWORD *)&v129[7] = *(_QWORD *)(v83 + 15);
                  *(_QWORD *)v129 = *(_QWORD *)(v83 + 8);
                  v84 = *(_BYTE *)(v83 + 23);
                  *(_QWORD *)v83 = 0;
                  *(_QWORD *)(v83 + 8) = 0;
                  *(_QWORD *)(v83 + 16) = 0;
                  do
                  {
                    v85 = v83;
                    v83 = v81;
                    if (*(char *)(v85 + 23) < 0)
                      operator delete(*(void **)v85);
                    v86 = *(_OWORD *)v83;
                    *(_QWORD *)(v85 + 16) = *(_QWORD *)(v83 + 16);
                    *(_OWORD *)v85 = v86;
                    *(_BYTE *)(v83 + 23) = 0;
                    *(_BYTE *)v83 = 0;
                    *(_DWORD *)(v85 + 24) = *(_DWORD *)(v83 + 24);
                    if (v77 < v80)
                      break;
                    v87 = 2 * v80;
                    v80 = (2 * v80) | 1;
                    v81 = a1 + 32 * v80;
                    v88 = v87 + 2;
                    if (v88 < v10 && *(float *)(v81 + 24) > *(float *)(v81 + 56))
                    {
                      v81 += 32;
                      v80 = v88;
                    }
                  }
                  while (*(float *)(v81 + 24) <= v82);
                  if (*(char *)(v83 + 23) < 0)
                    operator delete(*(void **)v83);
                  *(_QWORD *)v83 = v120;
                  *(_QWORD *)(v83 + 8) = *(_QWORD *)v129;
                  *(_QWORD *)(v83 + 15) = *(_QWORD *)&v129[7];
                  *(_BYTE *)(v83 + 23) = v84;
                  *(float *)(v83 + 24) = v82;
                }
              }
              v78 = v79 - 1;
            }
            while (v79);
            v89 = (unint64_t)v9 >> 5;
            do
            {
              v90 = 0;
              v91 = a2;
              v92 = *(void **)a1;
              *(_QWORD *)v123 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v123[7] = *(_QWORD *)(a1 + 15);
              v93 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v94 = *(_DWORD *)(a1 + 24);
              v95 = a1;
              do
              {
                v96 = v95 + 32 * (v90 + 1);
                v97 = 2 * v90;
                v90 = (2 * v90) | 1;
                v98 = v97 + 2;
                if (v98 < v89 && *(float *)(v96 + 24) > *(float *)(v96 + 56))
                {
                  v96 += 32;
                  v90 = v98;
                }
                if (*(char *)(v95 + 23) < 0)
                  operator delete(*(void **)v95);
                v99 = *(_OWORD *)v96;
                *(_QWORD *)(v95 + 16) = *(_QWORD *)(v96 + 16);
                *(_OWORD *)v95 = v99;
                *(_BYTE *)(v96 + 23) = 0;
                *(_BYTE *)v96 = 0;
                *(_DWORD *)(v95 + 24) = *(_DWORD *)(v96 + 24);
                v95 = v96;
              }
              while (v90 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
              a2 -= 4;
              v100 = *(char *)(v96 + 23);
              if ((void **)v96 == v91 - 4)
              {
                if (v100 < 0)
                  operator delete(*(void **)v96);
                *(_QWORD *)v96 = v92;
                *(_QWORD *)(v96 + 8) = *(_QWORD *)v123;
                *(_QWORD *)(v96 + 15) = *(_QWORD *)&v123[7];
                *(_BYTE *)(v96 + 23) = v93;
                *(_DWORD *)(v96 + 24) = v94;
              }
              else
              {
                if (v100 < 0)
                  operator delete(*(void **)v96);
                v101 = *(_OWORD *)a2;
                *(_QWORD *)(v96 + 16) = *(v91 - 2);
                *(_OWORD *)v96 = v101;
                *((_BYTE *)v91 - 9) = 0;
                *((_BYTE *)v91 - 32) = 0;
                *(_DWORD *)(v96 + 24) = *((_DWORD *)v91 - 2);
                if (*((char *)v91 - 9) < 0)
                  operator delete(*a2);
                *(v91 - 4) = v92;
                *(void **)((char *)v91 - 17) = *(void **)&v123[7];
                *(v91 - 3) = *(void **)v123;
                *((_BYTE *)v91 - 9) = v93;
                *((_DWORD *)v91 - 2) = v94;
                v102 = v96 + 32 - a1;
                if (v102 >= 33)
                {
                  v103 = (((unint64_t)v102 >> 5) - 2) >> 1;
                  v104 = *(float *)(v96 + 24);
                  if (*(float *)(a1 + 32 * v103 + 24) > v104)
                  {
                    v105 = *(void **)v96;
                    *(_QWORD *)v130 = *(_QWORD *)(v96 + 8);
                    *(_QWORD *)&v130[7] = *(_QWORD *)(v96 + 15);
                    v106 = *(_BYTE *)(v96 + 23);
                    *(_QWORD *)(v96 + 8) = 0;
                    *(_QWORD *)(v96 + 16) = 0;
                    *(_QWORD *)v96 = 0;
                    do
                    {
                      if (*(char *)(v96 + 23) < 0)
                        operator delete(*(void **)v96);
                      v107 = a1 + 32 * v103;
                      v108 = *(_OWORD *)v107;
                      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v107 + 16);
                      *(_OWORD *)v96 = v108;
                      *(_BYTE *)(v107 + 23) = 0;
                      *(_BYTE *)v107 = 0;
                      *(_DWORD *)(v96 + 24) = *(_DWORD *)(v107 + 24);
                      if (!v103)
                        break;
                      v103 = (v103 - 1) >> 1;
                      v96 = v107;
                    }
                    while (*(float *)(a1 + 32 * v103 + 24) > v104);
                    if (*(char *)(v107 + 23) < 0)
                      operator delete(*(void **)v107);
                    *(_QWORD *)v107 = v105;
                    *(_QWORD *)(v107 + 15) = *(_QWORD *)&v130[7];
                    *(_QWORD *)(v107 + 8) = *(_QWORD *)v130;
                    *(_BYTE *)(v107 + 23) = v106;
                    *(float *)(v107 + 24) = v104;
                  }
                }
              }
            }
            while (v89-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = a1 + 32 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)v12, (float *)a1, v119);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)v12, v119);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)(a1 + 32), (float *)(v12 - 32), (float *)a2 - 16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)(a1 + 64), (float *)(a1 + 32 + 32 * v11), (float *)a2 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)(v12 - 32), (float *)v12, (float *)(a1 + 32 + 32 * v11));
          v132 = *(_QWORD *)(a1 + 16);
          v124 = *(_OWORD *)a1;
          v13 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v13;
          *(_QWORD *)(v12 + 16) = v132;
          *(_OWORD *)v12 = v124;
          v14 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v12 + 24) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(float *)(a1 + 24);
          if (*(float *)(a1 - 8) > v15)
            goto LABEL_11;
          v34 = *(_QWORD *)a1;
          *(_QWORD *)v122 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v122[7] = *(_QWORD *)(a1 + 15);
          v35 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v15 <= *((float *)a2 - 2))
          {
            v38 = a1 + 32;
            do
            {
              v8 = v38;
              if (v38 >= (unint64_t)a2)
                break;
              v39 = *(float *)(v38 + 24);
              v38 += 32;
            }
            while (v15 <= v39);
          }
          else
          {
            v36 = a1;
            do
            {
              v8 = v36 + 32;
              v37 = *(float *)(v36 + 56);
              v36 += 32;
            }
            while (v15 <= v37);
          }
          v40 = a2;
          if (v8 < (unint64_t)a2)
          {
            v41 = a2;
            do
            {
              v40 = v41 - 4;
              v42 = *((float *)v41 - 2);
              v41 -= 4;
            }
            while (v15 > v42);
          }
          while (v8 < (unint64_t)v40)
          {
            v133 = *(void **)(v8 + 16);
            v125 = *(_OWORD *)v8;
            v43 = *(_OWORD *)v40;
            *(_QWORD *)(v8 + 16) = v40[2];
            *(_OWORD *)v8 = v43;
            v40[2] = v133;
            *(_OWORD *)v40 = v125;
            LODWORD(v43) = *(_DWORD *)(v8 + 24);
            *(_DWORD *)(v8 + 24) = *((_DWORD *)v40 + 6);
            *((_DWORD *)v40 + 6) = v43;
            do
            {
              v44 = *(float *)(v8 + 56);
              v8 += 32;
            }
            while (v15 <= v44);
            do
            {
              v45 = *((float *)v40 - 2);
              v40 -= 4;
            }
            while (v15 > v45);
          }
          v46 = (void **)(v8 - 32);
          if (v8 - 32 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v47 = *(_OWORD *)v46;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 16);
            *(_OWORD *)a1 = v47;
            *(_BYTE *)(v8 - 9) = 0;
            *(_BYTE *)(v8 - 32) = 0;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 - 8);
          }
          if (*(char *)(v8 - 9) < 0)
            operator delete(*v46);
          a4 = 0;
          *(_QWORD *)(v8 - 32) = v34;
          *(_QWORD *)(v8 - 17) = *(_QWORD *)&v122[7];
          *(_QWORD *)(v8 - 24) = *(_QWORD *)v122;
          *(_BYTE *)(v8 - 9) = v35;
          *(float *)(v8 - 8) = v15;
          continue;
        }
        v15 = *(float *)(a1 + 24);
LABEL_11:
        v16 = *(_QWORD *)a1;
        *(_QWORD *)v121 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v121[7] = *(_QWORD *)(a1 + 15);
        v17 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v18 = a1;
        do
        {
          v19 = v18;
          v18 += 32;
        }
        while (*(float *)(v19 + 56) > v15);
        v20 = a2;
        if (v19 == a1)
        {
          v23 = a2;
          while (v18 < (unint64_t)v23)
          {
            v21 = v23 - 4;
            v24 = *((float *)v23 - 2);
            v23 -= 4;
            if (v24 > v15)
              goto LABEL_21;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 4;
            v22 = *((float *)v20 - 2);
            v20 -= 4;
          }
          while (v22 <= v15);
        }
LABEL_21:
        v8 = v18;
        if (v18 < (unint64_t)v21)
        {
          v25 = (unint64_t)v21;
          do
          {
            v26 = *(_OWORD *)v8;
            v27 = *(_QWORD *)(v8 + 16);
            v28 = *(_QWORD *)(v25 + 16);
            *(_OWORD *)v8 = *(_OWORD *)v25;
            *(_QWORD *)(v8 + 16) = v28;
            *(_QWORD *)(v25 + 16) = v27;
            *(_OWORD *)v25 = v26;
            LODWORD(v26) = *(_DWORD *)(v8 + 24);
            *(_DWORD *)(v8 + 24) = *(_DWORD *)(v25 + 24);
            *(_DWORD *)(v25 + 24) = v26;
            do
            {
              v29 = *(float *)(v8 + 56);
              v8 += 32;
            }
            while (v29 > v15);
            do
            {
              v30 = *(float *)(v25 - 8);
              v25 -= 32;
            }
            while (v30 <= v15);
          }
          while (v8 < v25);
        }
        v31 = (void **)(v8 - 32);
        if (v8 - 32 != a1)
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v32 = *(_OWORD *)v31;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 16);
          *(_OWORD *)a1 = v32;
          *(_BYTE *)(v8 - 9) = 0;
          *(_BYTE *)(v8 - 32) = 0;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 - 8);
        }
        if (*(char *)(v8 - 9) < 0)
          operator delete(*v31);
        *(_QWORD *)(v8 - 32) = v16;
        *(_QWORD *)(v8 - 17) = *(_QWORD *)&v121[7];
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v121;
        *(_BYTE *)(v8 - 9) = v17;
        *(float *)(v8 - 8) = v15;
        if (v18 < (unint64_t)v21)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, v8 - 32);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(v8, (uint64_t)a2))
        {
          if (v33)
            continue;
          goto LABEL_36;
        }
        a2 = (void **)(v8 - 32);
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2;
  v9 = a2 - 3;
  v10 = (float *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)v8 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v8 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v105 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>(v9, a1);
        if (v105 != 129 && (char)v105 < 0)
        {
          v106 = *(_DWORD *)a1;
          *(float *)a1 = *(a2 - 3);
          *((_DWORD *)a2 - 3) = v106;
          v107 = *(_DWORD *)(a1 + 4);
          *(float *)(a1 + 4) = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v107;
          result = *(float *)(a1 + 8);
          *(float *)(a1 + 8) = *(a2 - 1);
          *(a2 - 1) = result;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>((_DWORD *)a1, a1 + 12, (uint64_t)v9);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(a1, a1 + 12, a1 + 24, (uint64_t)v9);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(a1, a1 + 12, a1 + 24, a1 + 36, (uint64_t)v9);
      default:
        if (v11 <= 287)
        {
          v108 = (float *)(a1 + 12);
          v110 = (float *)a1 == v8 || v108 == v8;
          if ((a4 & 1) != 0)
          {
            if (!v110)
            {
              v111 = 0;
              v112 = (_DWORD *)a1;
              do
              {
                v113 = (uint64_t)v112;
                v112 = v108;
                v114 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>(v108, v113);
                if (v114 != 129 && (char)v114 < 0)
                {
                  v115 = *v112;
                  v116 = *(_DWORD *)(v113 + 16);
                  result = *(float *)(v113 + 20);
                  v117 = v111;
                  v118 = *(_DWORD *)v113;
                  while (1)
                  {
                    v119 = (_DWORD *)(a1 + v117);
                    v120 = *(_DWORD *)(a1 + v117 + 4);
                    v119[3] = v118;
                    v119[4] = v120;
                    v119[5] = *(_DWORD *)(a1 + v117 + 8);
                    if (!v117)
                      break;
                    v118 = *(v119 - 3);
                    if (v115 < v118)
                      v121 = -1;
                    else
                      v121 = 1;
                    if (v115 == v118)
                    {
                      v122 = *(_DWORD *)(a1 + v117 - 8);
                      v123 = v116 == v122;
                      v121 = v116 < v122 ? -1 : 1;
                      if (v123)
                      {
                        v124 = *(float *)(a1 + v117 - 4);
                        if (result == v124)
                          v121 = 0;
                        else
                          v121 = -127;
                        if (result > v124)
                          v121 = 1;
                        if (result < v124)
                          v121 = -1;
                      }
                    }
                    v117 -= 12;
                    if (v121 == 129 || (v121 & 0x80) == 0)
                    {
                      v125 = a1 + v117 + 12;
                      goto LABEL_293;
                    }
                  }
                  v125 = a1;
LABEL_293:
                  *(_DWORD *)v125 = v115;
                  *(_DWORD *)(v125 + 4) = v116;
                  *(float *)(v125 + 8) = result;
                }
                v108 = (float *)(v112 + 3);
                v111 += 12;
              }
              while (v112 + 3 != (_DWORD *)a2);
            }
          }
          else if (!v110)
          {
            v168 = (float *)(a1 + 4);
            do
            {
              v169 = a1;
              a1 = (uint64_t)v108;
              v170 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>(v108, v169);
              if (v170 != 129 && (char)v170 < 0)
              {
                v171 = *(_DWORD *)a1;
                v172 = *(_DWORD *)(v169 + 16);
                result = *(float *)(v169 + 20);
                v173 = v168;
                v174 = *(_DWORD *)v169;
                do
                {
                  v175 = *v173;
                  *((_DWORD *)v173 + 2) = v174;
                  v173[3] = v175;
                  v173[4] = v173[1];
                  v174 = *((_DWORD *)v173 - 4);
                  if (v171 < v174)
                    v176 = -1;
                  else
                    v176 = 1;
                  if (v171 == v174)
                  {
                    v177 = *((_DWORD *)v173 - 3);
                    v178 = v172 == v177;
                    v176 = v172 < v177 ? -1 : 1;
                    if (v178)
                    {
                      v179 = *(v173 - 2);
                      if (result == v179)
                        v176 = 0;
                      else
                        v176 = -127;
                      if (result > v179)
                        v176 = 1;
                      if (result < v179)
                        v176 = -1;
                    }
                  }
                  v173 -= 3;
                }
                while (v176 != 129 && (v176 & 0x80) != 0);
                *((_DWORD *)v173 + 2) = v171;
                *((_DWORD *)v173 + 3) = v172;
                v173[4] = result;
              }
              v108 = (float *)(a1 + 12);
              v168 += 3;
            }
            while ((float *)(a1 + 12) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((float *)a1 != v8)
          {
            v126 = (unint64_t)(v12 - 2) >> 1;
            v182 = v126;
            do
            {
              v127 = v126;
              if (v182 >= v126)
              {
                v128 = (2 * v126) | 1;
                v129 = a1 + 12 * v128;
                if (2 * v126 + 2 < v12)
                {
                  v130 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)(a1 + 12 * v128), v129 + 12);
                  if (v130 != 129 && (v130 & 0x80u) != 0)
                  {
                    v129 += 12;
                    v128 = 2 * v127 + 2;
                  }
                }
                v131 = a1 + 12 * v127;
                v132 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)v129, v131);
                if (v132 == 129 || ((char)v132 & 0x80000000) == 0)
                {
                  v133 = *(_DWORD *)v131;
                  v180 = *(_DWORD *)(v131 + 4);
                  v134 = *(float *)(v131 + 8);
                  v135 = *(float *)v129;
                  do
                  {
                    v136 = (float *)v131;
                    v131 = v129;
                    *v136 = v135;
                    v136[1] = *(float *)(v129 + 4);
                    v136[2] = *(float *)(v129 + 8);
                    if (v182 < v128)
                      break;
                    v137 = (2 * v128) | 1;
                    v129 = a1 + 12 * v137;
                    if (2 * v128 + 2 >= v12)
                    {
                      v128 = (2 * v128) | 1;
                    }
                    else
                    {
                      v138 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)(a1 + 12 * v137), v129 + 12);
                      if (v138 != 129 && (v138 & 0x80u) != 0)
                      {
                        v129 += 12;
                        v128 = 2 * v128 + 2;
                      }
                      else
                      {
                        v128 = (2 * v128) | 1;
                      }
                    }
                    v135 = *(float *)v129;
                    if (*(_DWORD *)v129 < v133)
                      v139 = -1;
                    else
                      v139 = 1;
                    if (LODWORD(v135) == v133)
                    {
                      v140 = *(_DWORD *)(v129 + 4);
                      v141 = v140 == v180;
                      v139 = v140 < v180 ? -1 : 1;
                      if (v141)
                      {
                        v142 = *(float *)(v129 + 8);
                        if (v142 == v134)
                          v139 = 0;
                        else
                          v139 = -127;
                        if (v142 > v134)
                          v139 = 1;
                        if (v142 < v134)
                          v139 = -1;
                      }
                    }
                  }
                  while (v139 == 129 || (v139 & 0x80) == 0);
                  *(_DWORD *)v131 = v133;
                  *(_DWORD *)(v131 + 4) = v180;
                  *(float *)(v131 + 8) = v134;
                }
              }
              v126 = v127 - 1;
            }
            while (v127);
            v143 = v11 / 0xCuLL;
            do
            {
              v144 = 0;
              v145 = *(_DWORD *)a1;
              v181 = *(_DWORD *)(a1 + 4);
              v146 = *(_DWORD *)(a1 + 8);
              v147 = v143 - 2;
              if (v143 < 2)
                v147 = v143 - 1;
              v148 = v147 >> 1;
              v149 = a1;
              do
              {
                v150 = v149 + 12 * v144 + 12;
                v151 = (2 * v144) | 1;
                v152 = 2 * v144 + 2;
                if (v152 < v143)
                {
                  v153 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)(v149 + 12 * v144 + 12), v149 + 12 * v144 + 24);
                  if (v153 != 129 && (v153 & 0x80u) != 0)
                  {
                    v150 += 12;
                    v151 = v152;
                  }
                }
                *(_DWORD *)v149 = *(_DWORD *)v150;
                *(_DWORD *)(v149 + 4) = *(_DWORD *)(v150 + 4);
                result = *(float *)(v150 + 8);
                *(float *)(v149 + 8) = result;
                v149 = v150;
                v144 = v151;
              }
              while (v151 <= v148);
              if ((float *)v150 == a2 - 3)
              {
                *(_DWORD *)v150 = v145;
                *(_DWORD *)(v150 + 4) = v181;
                *(_DWORD *)(v150 + 8) = v146;
                v155 = v143 - 1;
              }
              else
              {
                *(float *)v150 = *(a2 - 3);
                *(float *)(v150 + 4) = *(a2 - 2);
                result = *(a2 - 1);
                *(float *)(v150 + 8) = result;
                *((_DWORD *)a2 - 3) = v145;
                *((_DWORD *)a2 - 2) = v181;
                *((_DWORD *)a2 - 1) = v146;
                v154 = v150 - a1 + 12;
                v155 = v143 - 1;
                if (v154 >= 13)
                {
                  v156 = (unint64_t)(-2 - 0x5555555555555555 * (v154 >> 2)) >> 1;
                  v157 = a1 + 12 * v156;
                  v158 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)v157, v150);
                  if (v158 != 129 && (char)v158 < 0)
                  {
                    v159 = *(_DWORD *)v150;
                    v160 = *(_DWORD *)(v150 + 4);
                    result = *(float *)(v150 + 8);
                    v161 = *(float *)v157;
                    do
                    {
                      v162 = (float *)v150;
                      v150 = v157;
                      *v162 = v161;
                      v162[1] = *(float *)(v157 + 4);
                      v162[2] = *(float *)(v157 + 8);
                      if (!v156)
                        break;
                      v156 = (v156 - 1) >> 1;
                      v157 = a1 + 12 * v156;
                      v161 = *(float *)v157;
                      if (*(_DWORD *)v157 < v159)
                        v163 = -1;
                      else
                        v163 = 1;
                      if (LODWORD(v161) == v159)
                      {
                        v164 = *(_DWORD *)(v157 + 4);
                        v165 = v164 == v160;
                        v163 = v164 < v160 ? -1 : 1;
                        if (v165)
                        {
                          v166 = *(float *)(v157 + 8);
                          if (v166 == result)
                            v163 = 0;
                          else
                            v163 = -127;
                          if (v166 > result)
                            v163 = 1;
                          if (v166 < result)
                            v163 = -1;
                        }
                      }
                    }
                    while (v163 != 129 && (v163 & 0x80) != 0);
                    *(_DWORD *)v150 = v159;
                    *(_DWORD *)(v150 + 4) = v160;
                    *(float *)(v150 + 8) = result;
                  }
                }
              }
              a2 -= 3;
              v167 = v143 <= 2;
              v143 = v155;
            }
            while (!v167);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (_DWORD *)(a1 + 12 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 < 0x601)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(v14, a1, (uint64_t)v9);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>((_DWORD *)a1, (uint64_t)v14, (uint64_t)v9);
          v15 = 3 * v13;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>((_DWORD *)(a1 + 12), a1 + 4 * v15 - 12, (uint64_t)(a2 - 6));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>((_DWORD *)(a1 + 24), a1 + 12 + 4 * v15, (uint64_t)(a2 - 9));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>((_DWORD *)(a1 + 4 * v15 - 12), (uint64_t)v14, a1 + 12 + 4 * v15);
          v16 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v14;
          *(_QWORD *)v14 = v16;
          LODWORD(v16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v14[2];
          v14[2] = v16;
        }
        --a3;
        v8 = a2;
        if ((a4 & 1) == 0)
        {
          v17 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)(a1 - 12), a1);
          if (v17 == 129 || ((char)v17 & 0x80000000) == 0)
          {
            v63 = *(_DWORD *)a1;
            v64 = *(_DWORD *)(a1 + 4);
            result = *(float *)(a1 + 8);
            if (*(_DWORD *)a1 < *(_DWORD *)v9)
              v65 = -1;
            else
              v65 = 1;
            if (*(_DWORD *)a1 == *(_DWORD *)v9)
            {
              v66 = *((_DWORD *)a2 - 2);
              v67 = v64 == v66;
              v65 = v64 < v66 ? -1 : 1;
              if (v67)
              {
                v68 = *(a2 - 1);
                if (result == v68)
                  v65 = 0;
                else
                  v65 = -127;
                if (result > v68)
                  v65 = 1;
                if (result < v68)
                  v65 = -1;
              }
            }
            if (v65 == 129 || (v65 & 0x80) == 0)
            {
              v76 = a1 + 12;
              do
              {
                v10 = (float *)v76;
                if (v76 >= (unint64_t)a2)
                  break;
                if (v63 < *(_DWORD *)v76)
                  v77 = -1;
                else
                  v77 = 1;
                if (v63 == *(_DWORD *)v76)
                {
                  v78 = *(_DWORD *)(v76 + 4);
                  v79 = v64 == v78;
                  v77 = v64 < v78 ? -1 : 1;
                  if (v79)
                  {
                    v80 = *(float *)(v76 + 8);
                    if (result == v80)
                      v77 = 0;
                    else
                      v77 = -127;
                    if (result > v80)
                      v77 = 1;
                    if (result < v80)
                      v77 = -1;
                  }
                }
                v76 += 12;
              }
              while (v77 == 129 || (v77 & 0x80) == 0);
            }
            else
            {
              v69 = (float *)a1;
              while (1)
              {
                v10 = v69 + 3;
                v70 = *((_DWORD *)v69 + 3);
                v71 = v63 == v70;
                if (v63 < v70)
                  v72 = -1;
                else
                  v72 = 1;
                if (v71)
                {
                  v73 = *((_DWORD *)v69 + 4);
                  v74 = v64 == v73;
                  v72 = v64 < v73 ? -1 : 1;
                  if (v74)
                  {
                    v75 = v69[5];
                    if (result == v75)
                      v72 = 0;
                    else
                      v72 = -127;
                    if (result > v75)
                      v72 = 1;
                    if (result < v75)
                      v72 = -1;
                  }
                }
                v69 += 3;
                if (v72 != 129)
                {
                  v69 = v10;
                  if ((v72 & 0x80) != 0)
                    break;
                }
              }
            }
            v81 = a2;
            if (v10 < a2)
            {
              v82 = a2;
              v81 = a2;
              do
              {
                v83 = *((_DWORD *)v81 - 3);
                v81 -= 3;
                v84 = v63 == v83;
                if (v63 < v83)
                  v85 = -1;
                else
                  v85 = 1;
                if (v84)
                {
                  v86 = *((_DWORD *)v82 - 2);
                  v87 = v64 == v86;
                  v85 = v64 < v86 ? -1 : 1;
                  if (v87)
                  {
                    v88 = *(v82 - 1);
                    if (result == v88)
                      v85 = 0;
                    else
                      v85 = -127;
                    if (result > v88)
                      v85 = 1;
                    if (result < v88)
                      v85 = -1;
                  }
                }
                if (v85 == 129)
                  break;
                v82 = v81;
              }
              while ((v85 & 0x80) != 0);
            }
            if (v10 < v81)
            {
              v89 = *v10;
              v90 = *(_DWORD *)v81;
              do
              {
                *(_DWORD *)v10 = v90;
                *v81 = v89;
                v91 = *((_DWORD *)v10 + 1);
                v10[1] = v81[1];
                *((_DWORD *)v81 + 1) = v91;
                v92 = *((_DWORD *)v10 + 2);
                v10[2] = v81[2];
                *((_DWORD *)v81 + 2) = v92;
                v93 = v10;
                while (1)
                {
                  v10 = v93 + 3;
                  v89 = v93[3];
                  if (v63 < LODWORD(v89))
                    v94 = -1;
                  else
                    v94 = 1;
                  if (v63 == LODWORD(v89))
                  {
                    v95 = *((_DWORD *)v93 + 4);
                    v96 = v64 == v95;
                    v94 = v64 < v95 ? -1 : 1;
                    if (v96)
                    {
                      v97 = v93[5];
                      if (result == v97)
                        v94 = 0;
                      else
                        v94 = -127;
                      if (result > v97)
                        v94 = 1;
                      if (result < v97)
                        v94 = -1;
                    }
                  }
                  v93 += 3;
                  if (v94 != 129)
                  {
                    v93 = v10;
                    if ((v94 & 0x80) != 0)
                      break;
                  }
                }
                v98 = v81;
                do
                {
                  v99 = *((_DWORD *)v81 - 3);
                  v81 -= 3;
                  v90 = v99;
                  v100 = v63 == v99;
                  if (v63 < v99)
                    v101 = -1;
                  else
                    v101 = 1;
                  if (v100)
                  {
                    v102 = *((_DWORD *)v98 - 2);
                    v103 = v64 == v102;
                    v101 = v64 < v102 ? -1 : 1;
                    if (v103)
                    {
                      v104 = *(v98 - 1);
                      if (result == v104)
                        v101 = 0;
                      else
                        v101 = -127;
                      if (result > v104)
                        v101 = 1;
                      if (result < v104)
                        v101 = -1;
                    }
                  }
                  if (v101 == 129)
                    break;
                  v98 = v81;
                }
                while ((v101 & 0x80) != 0);
              }
              while (v10 < v81);
            }
            if (v10 - 3 != (float *)a1)
            {
              *(float *)a1 = *(v10 - 3);
              *(float *)(a1 + 4) = *(v10 - 2);
              *(float *)(a1 + 8) = *(v10 - 1);
            }
            a4 = 0;
            *((_DWORD *)v10 - 3) = v63;
            *((_DWORD *)v10 - 2) = v64;
            *(v10 - 1) = result;
            continue;
          }
        }
        v18 = *(_DWORD *)a1;
        v19 = *(_DWORD *)(a1 + 4);
        v20 = *(float *)(a1 + 8);
        v21 = a1;
        v22 = (float *)a1;
        do
        {
          v24 = *((_DWORD *)v22 + 3);
          v22 += 3;
          v23 = v24;
          v25 = v24 == v18;
          if (v24 < v18)
            v26 = -1;
          else
            v26 = 1;
          if (v25)
          {
            v27 = *(_DWORD *)(v21 + 16);
            v28 = v27 == v19;
            v26 = v27 < v19 ? -1 : 1;
            if (v28)
            {
              v29 = *(float *)(v21 + 20);
              if (v29 == v20)
                v26 = 0;
              else
                v26 = -127;
              if (v29 > v20)
                v26 = 1;
              if (v29 < v20)
                v26 = -1;
            }
          }
          if (v26 == 129)
            break;
          v21 = (uint64_t)v22;
        }
        while ((v26 & 0x80) != 0);
        v30 = a2;
        if (v22 - 3 == (float *)a1)
        {
          v38 = a2;
          while (v22 < v38)
          {
            v31 = v38 - 3;
            v39 = *((_DWORD *)v38 - 3);
            v40 = v39 == v18;
            if (v39 < v18)
              v41 = -1;
            else
              v41 = 1;
            if (v40)
            {
              v42 = *((_DWORD *)v38 - 2);
              v43 = v42 == v19;
              v41 = v42 < v19 ? -1 : 1;
              if (v43)
              {
                v44 = *(v38 - 1);
                if (v44 == v20)
                  v41 = 0;
                else
                  v41 = -127;
                if (v44 > v20)
                  v41 = 1;
                if (v44 < v20)
                  v41 = -1;
              }
            }
            v38 -= 3;
            if (v41 != 129)
            {
              v38 = v31;
              if ((v41 & 0x80) != 0)
                goto LABEL_75;
            }
          }
          v31 = v38;
        }
        else
        {
          while (1)
          {
            v31 = v30 - 3;
            v32 = *((_DWORD *)v30 - 3);
            v33 = v32 == v18;
            if (v32 < v18)
              v34 = -1;
            else
              v34 = 1;
            if (v33)
            {
              v35 = *((_DWORD *)v30 - 2);
              v36 = v35 == v19;
              v34 = v35 < v19 ? -1 : 1;
              if (v36)
              {
                v37 = *(v30 - 1);
                if (v37 == v20)
                  v34 = 0;
                else
                  v34 = -127;
                if (v37 > v20)
                  v34 = 1;
                if (v37 < v20)
                  v34 = -1;
              }
            }
            v30 -= 3;
            if (v34 != 129)
            {
              v30 = v31;
              if ((v34 & 0x80) != 0)
                break;
            }
          }
        }
LABEL_75:
        if (v22 >= v31)
        {
          v10 = v22;
        }
        else
        {
          v45 = *v31;
          v10 = v22;
          v46 = v31;
          do
          {
            *v10 = v45;
            *(_DWORD *)v46 = v23;
            v47 = *((_DWORD *)v10 + 1);
            v10[1] = v46[1];
            *((_DWORD *)v46 + 1) = v47;
            v48 = *((_DWORD *)v10 + 2);
            v10[2] = v46[2];
            *((_DWORD *)v46 + 2) = v48;
            v49 = v10;
            do
            {
              v50 = *((_DWORD *)v10 + 3);
              v10 += 3;
              v23 = v50;
              v51 = v50 == v18;
              if (v50 < v18)
                v52 = -1;
              else
                v52 = 1;
              if (v51)
              {
                v53 = *((_DWORD *)v49 + 4);
                v54 = v53 == v19;
                v52 = v53 < v19 ? -1 : 1;
                if (v54)
                {
                  v55 = v49[5];
                  if (v55 == v20)
                    v52 = 0;
                  else
                    v52 = -127;
                  if (v55 > v20)
                    v52 = 1;
                  if (v55 < v20)
                    v52 = -1;
                }
              }
              if (v52 == 129)
                break;
              v49 = v10;
            }
            while ((v52 & 0x80) != 0);
            while (1)
            {
              v56 = v46 - 3;
              v45 = *(v46 - 3);
              if (LODWORD(v45) < v18)
                v57 = -1;
              else
                v57 = 1;
              if (LODWORD(v45) == v18)
              {
                v58 = *((_DWORD *)v46 - 2);
                v59 = v58 == v19;
                v57 = v58 < v19 ? -1 : 1;
                if (v59)
                {
                  v60 = *(v46 - 1);
                  if (v60 == v20)
                    v61 = 0;
                  else
                    v61 = -127;
                  if (v60 > v20)
                    v61 = 1;
                  if (v60 < v20)
                    v57 = -1;
                  else
                    v57 = v61;
                }
              }
              v46 = v56;
              if (v57 != 129)
              {
                v46 = v56;
                if ((v57 & 0x80) != 0)
                  break;
              }
            }
            v46 = v56;
          }
          while (v10 < v56);
        }
        if (v10 - 3 != (float *)a1)
        {
          *(float *)a1 = *(v10 - 3);
          *(float *)(a1 + 4) = *(v10 - 2);
          *(float *)(a1 + 8) = *(v10 - 1);
        }
        *((_DWORD *)v10 - 3) = v18;
        *((_DWORD *)v10 - 2) = v19;
        *(v10 - 1) = v20;
        if (v22 < v31)
        {
LABEL_124:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *,false>(a1, v10 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v62 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>((_DWORD *)a1, v10 - 3);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(v10, a2))
        {
          if (v62)
            continue;
          goto LABEL_124;
        }
        a2 = v10 - 3;
        if (!v62)
          goto LABEL_1;
        return result;
    }
  }
}

  v151 = a2 - 5;
  v148 = (__int128 *)(a2 - 15);
  v149 = (__int128 *)(a2 - 10);
  v8 = a1;
  v155 = a2;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v8) >> 2);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v68 = *a3;
        v69 = v151[4];
        v163 = *(_OWORD *)v151;
        v164 = v69;
        v70 = *(_DWORD *)(a1 + 16);
        v161 = *(_OWORD *)a1;
        v162 = v70;
        if (v68(&v163, &v161))
        {
          v71 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(a2 - 5);
          *(a2 - 5) = v71;
          *(_OWORD *)v179 = *(_OWORD *)(a1 + 4);
          *(_OWORD *)(a1 + 4) = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = *(_OWORD *)v179;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>((__int128 *)a1, (__int128 *)(a1 + 20), (__int128 *)v151, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>((int *)a1, (__int128 *)(a1 + 20), (__int128 *)(a1 + 40), (__int128 *)v151, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>((__int128 *)a1, (__int128 *)(a1 + 20), (__int128 *)(a1 + 40), (__int128 *)(a1 + 60), (__int128 *)v151, a3);
        return;
      default:
        if (v9 <= 479)
        {
          if ((a5 & 1) != 0)
          {
            if ((int *)a1 != a2)
            {
              v72 = (int *)(a1 + 20);
              if ((int *)(a1 + 20) != a2)
              {
                v73 = 0;
                v74 = (int *)a1;
                do
                {
                  v75 = v72;
                  v76 = *a3;
                  v77 = v75[4];
                  *(_OWORD *)v179 = *(_OWORD *)v75;
                  *(_DWORD *)&v179[16] = v77;
                  v78 = v74[4];
                  *(_OWORD *)v178 = *(_OWORD *)v74;
                  *(_DWORD *)&v178[16] = v78;
                  if (v76((__int128 *)v179, (__int128 *)v178))
                  {
                    v79 = *v75;
                    *(_OWORD *)v175 = *(_OWORD *)(v74 + 6);
                    v80 = v73;
                    while (1)
                    {
                      v81 = v80;
                      v82 = a1 + v80;
                      *(_DWORD *)(v82 + 20) = *(_DWORD *)v82;
                      *(_OWORD *)(v82 + 24) = *(_OWORD *)(v82 + 4);
                      if (!v81)
                        break;
                      v83 = *a3;
                      *(_DWORD *)v177 = v79;
                      *(_OWORD *)&v177[4] = *(_OWORD *)v175;
                      v84 = *(_OWORD *)(v82 - 20);
                      *(_DWORD *)&v176[16] = *(_DWORD *)(v82 - 4);
                      *(_OWORD *)v176 = v84;
                      v85 = v83((__int128 *)v177, (__int128 *)v176);
                      v80 = v81 - 20;
                      if ((v85 & 1) == 0)
                      {
                        v86 = (_DWORD *)(a1 + v81);
                        v87 = (_OWORD *)(a1 + v81 + 4);
                        goto LABEL_72;
                      }
                    }
                    v87 = (_OWORD *)(v82 + 4);
                    v86 = (_DWORD *)a1;
LABEL_72:
                    *v86 = v79;
                    *v87 = *(_OWORD *)v175;
                  }
                  v72 = v75 + 5;
                  v73 += 20;
                  v74 = v75;
                }
                while (v75 + 5 != a2);
              }
            }
          }
          else if ((int *)a1 != a2)
          {
            v136 = (int *)(a1 + 20);
            if ((int *)(a1 + 20) != a2)
            {
              v137 = (_OWORD *)(a1 + 24);
              do
              {
                v138 = v136;
                v139 = *a3;
                v140 = v138[4];
                *(_OWORD *)v179 = *(_OWORD *)v138;
                *(_DWORD *)&v179[16] = v140;
                v141 = *(_DWORD *)(a1 + 16);
                *(_OWORD *)v178 = *(_OWORD *)a1;
                *(_DWORD *)&v178[16] = v141;
                if (v139((__int128 *)v179, (__int128 *)v178))
                {
                  v142 = *v138;
                  *(_OWORD *)v175 = *(_OWORD *)(a1 + 24);
                  v143 = v137;
                  do
                  {
                    *((_DWORD *)v143 - 1) = *((_DWORD *)v143 - 6);
                    v144 = (_OWORD *)((char *)v143 - 20);
                    *v143 = *(_OWORD *)((char *)v143 - 20);
                    v145 = *a3;
                    *(_DWORD *)v177 = v142;
                    *(_OWORD *)&v177[4] = *(_OWORD *)v175;
                    v146 = *(_OWORD *)((char *)v143 - 44);
                    *(_DWORD *)&v176[16] = *((_DWORD *)v143 - 7);
                    *(_OWORD *)v176 = v146;
                    v147 = v145((__int128 *)v177, (__int128 *)v176);
                    v143 = v144;
                  }
                  while ((v147 & 1) != 0);
                  *((_DWORD *)v144 - 1) = v142;
                  *v144 = *(_OWORD *)v175;
                }
                v136 = v138 + 5;
                v137 = (_OWORD *)((char *)v137 + 20);
                a1 = (uint64_t)v138;
              }
              while (v138 + 5 != a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if ((int *)a1 != a2)
          {
            v88 = (v10 - 2) >> 1;
            v89 = v88;
            v152 = v9;
            do
            {
              v90 = v89;
              if (v88 >= v89)
              {
                v154 = v89;
                v91 = (2 * v89) | 1;
                v92 = a1 + 20 * v91;
                v93 = 2 * v89 + 2;
                if (v93 < (uint64_t)v10)
                {
                  v94 = *a3;
                  v95 = *(_DWORD *)(v92 + 16);
                  *(_OWORD *)v179 = *(_OWORD *)v92;
                  *(_DWORD *)&v179[16] = v95;
                  v96 = *(_DWORD *)(v92 + 36);
                  *(_OWORD *)v178 = *(_OWORD *)(v92 + 20);
                  *(_DWORD *)&v178[16] = v96;
                  if (v94((__int128 *)v179, (__int128 *)v178))
                  {
                    v92 += 20;
                    v91 = v93;
                  }
                }
                v90 = v154;
                v97 = (int *)(a1 + 20 * v154);
                v98 = *a3;
                v99 = *(_DWORD *)(v92 + 16);
                *(_OWORD *)v177 = *(_OWORD *)v92;
                *(_DWORD *)&v177[16] = v99;
                v100 = v97[4];
                *(_OWORD *)v176 = *(_OWORD *)v97;
                *(_DWORD *)&v176[16] = v100;
                v101 = v98((__int128 *)v177, (__int128 *)v176);
                v9 = v152;
                if ((v101 & 1) == 0)
                {
                  v102 = *v97;
                  *(_OWORD *)v170 = *(_OWORD *)(v97 + 1);
                  do
                  {
                    v103 = v97;
                    v97 = (int *)v92;
                    *v103 = *(_DWORD *)v92;
                    *(_OWORD *)(v103 + 1) = *(_OWORD *)(v92 + 4);
                    if (v88 < v91)
                      break;
                    v104 = (2 * v91) | 1;
                    v92 = a1 + 20 * v104;
                    v105 = 2 * v91 + 2;
                    if (v105 < (uint64_t)v10)
                    {
                      v106 = *a3;
                      v107 = *(_DWORD *)(v92 + 16);
                      *(_OWORD *)v175 = *(_OWORD *)v92;
                      *(_DWORD *)&v175[16] = v107;
                      v108 = *(_DWORD *)(v92 + 36);
                      v173 = *(_OWORD *)(v92 + 20);
                      v174 = v108;
                      if (v106((__int128 *)v175, &v173))
                      {
                        v92 += 20;
                        v104 = v105;
                      }
                    }
                    v109 = *a3;
                    v110 = *(_DWORD *)(v92 + 16);
                    *(_OWORD *)v172 = *(_OWORD *)v92;
                    *(_DWORD *)&v172[16] = v110;
                    *(_DWORD *)v171 = v102;
                    *(_OWORD *)&v171[4] = *(_OWORD *)v170;
                    v91 = v104;
                  }
                  while (!v109((__int128 *)v172, (__int128 *)v171));
                  *v97 = v102;
                  *(_OWORD *)(v97 + 1) = *(_OWORD *)v170;
                  v9 = v152;
                  v90 = v154;
                }
              }
              v89 = v90 - 1;
            }
            while (v90);
            v111 = v9 / 0x14uLL;
            v112 = v155;
            do
            {
              v113 = 0;
              v114 = *(_DWORD *)a1;
              v173 = *(_OWORD *)(a1 + 4);
              v115 = v111 - 2;
              v156 = v112;
              if (v111 < 2)
                v115 = v111 - 1;
              v116 = v115 >> 1;
              v117 = a1;
              do
              {
                v118 = v117 + 20 * v113 + 20;
                v119 = (2 * v113) | 1;
                v120 = 2 * v113 + 2;
                if (v120 < v111)
                {
                  v121 = *a3;
                  v122 = *(_DWORD *)(v118 + 16);
                  *(_OWORD *)v179 = *(_OWORD *)v118;
                  *(_DWORD *)&v179[16] = v122;
                  v123 = *(_DWORD *)(v118 + 36);
                  *(_OWORD *)v178 = *(_OWORD *)(v118 + 20);
                  *(_DWORD *)&v178[16] = v123;
                  if (v121((__int128 *)v179, (__int128 *)v178))
                  {
                    v118 += 20;
                    v119 = v120;
                  }
                }
                *(_DWORD *)v117 = *(_DWORD *)v118;
                *(_OWORD *)(v117 + 4) = *(_OWORD *)(v118 + 4);
                v117 = v118;
                v113 = v119;
              }
              while (v119 <= v116);
              v124 = (_OWORD *)(v118 + 4);
              v112 = v156 - 5;
              if ((int *)v118 == v156 - 5)
              {
                *(_DWORD *)v118 = v114;
                *v124 = v173;
              }
              else
              {
                *(_DWORD *)v118 = *(v156 - 5);
                *v124 = *((_OWORD *)v156 - 1);
                *(v156 - 5) = v114;
                *((_OWORD *)v156 - 1) = v173;
                v125 = v118 - a1 + 20;
                if (v125 >= 21)
                {
                  v126 = (unint64_t)(-2 - 0x3333333333333333 * (v125 >> 2)) >> 1;
                  v127 = a1 + 20 * v126;
                  v128 = *a3;
                  v129 = *(_DWORD *)(v127 + 16);
                  *(_OWORD *)v179 = *(_OWORD *)v127;
                  *(_DWORD *)&v179[16] = v129;
                  v130 = *(_DWORD *)(v118 + 16);
                  *(_OWORD *)v178 = *(_OWORD *)v118;
                  *(_DWORD *)&v178[16] = v130;
                  if (v128((__int128 *)v179, (__int128 *)v178))
                  {
                    v131 = *(_DWORD *)v118;
                    *(_OWORD *)v175 = *v124;
                    do
                    {
                      v132 = v118;
                      v118 = v127;
                      *(_DWORD *)v132 = *(_DWORD *)v127;
                      *(_OWORD *)(v132 + 4) = *(_OWORD *)(v127 + 4);
                      if (!v126)
                        break;
                      v126 = (v126 - 1) >> 1;
                      v127 = a1 + 20 * v126;
                      v133 = *a3;
                      v134 = *(_DWORD *)(v127 + 16);
                      *(_OWORD *)v177 = *(_OWORD *)v127;
                      *(_DWORD *)&v177[16] = v134;
                      *(_DWORD *)v176 = v131;
                      *(_OWORD *)&v176[4] = *(_OWORD *)v175;
                    }
                    while ((v133((__int128 *)v177, (__int128 *)v176) & 1) != 0);
                    *(_DWORD *)v118 = v131;
                    *(_OWORD *)(v118 + 4) = *(_OWORD *)v175;
                  }
                }
              }
            }
            while (v111-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (__int128 *)(a1 + 20 * (v10 >> 1));
        if ((unint64_t)v9 < 0xA01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>(v12, (__int128 *)a1, (__int128 *)v151, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>((__int128 *)a1, v12, (__int128 *)v151, a3);
          v13 = 5 * v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>((__int128 *)(a1 + 20), (__int128 *)(a1 + 4 * v13 - 20), v149, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>((__int128 *)(a1 + 40), (__int128 *)(a1 + 20 + 4 * v13), v148, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>((__int128 *)(a1 + 4 * v13 - 20), v12, (__int128 *)(a1 + 20 + 4 * v13), a3);
          v14 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v14;
          *(_OWORD *)v179 = *(_OWORD *)(a1 + 4);
          *(_OWORD *)(a1 + 4) = *(__int128 *)((char *)v12 + 4);
          *(__int128 *)((char *)v12 + 4) = *(_OWORD *)v179;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v15 = *a3;
          v16 = *(_DWORD *)(a1 - 4);
          v159 = *(_OWORD *)(a1 - 20);
          v160 = v16;
          v17 = *(_DWORD *)(a1 + 16);
          v157 = *(_OWORD *)a1;
          v158 = v17;
          if ((v15(&v159, &v157) & 1) == 0)
          {
            v42 = *(_DWORD *)a1;
            v168 = *(_OWORD *)(a1 + 4);
            v43 = *a3;
            *(_DWORD *)v179 = v42;
            *(_OWORD *)&v179[4] = *(_OWORD *)(a1 + 4);
            v44 = *(_OWORD *)v151;
            *(_DWORD *)&v178[16] = v151[4];
            *(_OWORD *)v178 = v44;
            if ((v43((__int128 *)v179, (__int128 *)v178) & 1) != 0)
            {
              v45 = a1;
              v46 = v155;
              do
              {
                v8 = v45 + 20;
                v47 = *a3;
                *(_DWORD *)v177 = v42;
                *(_OWORD *)&v177[4] = v168;
                v48 = *(_OWORD *)(v45 + 20);
                *(_DWORD *)&v176[16] = *(_DWORD *)(v45 + 36);
                *(_OWORD *)v176 = v48;
                v49 = v47((__int128 *)v177, (__int128 *)v176);
                v45 = v8;
              }
              while ((v49 & 1) == 0);
            }
            else
            {
              v50 = a1 + 20;
              v46 = v155;
              do
              {
                v8 = v50;
                if (v50 >= (unint64_t)v155)
                  break;
                v51 = *a3;
                *(_DWORD *)v175 = v42;
                *(_OWORD *)&v175[4] = v168;
                v52 = *(_OWORD *)v8;
                *(_DWORD *)&v176[16] = *(_DWORD *)(v8 + 16);
                *(_OWORD *)v176 = v52;
                v53 = v51((__int128 *)v175, (__int128 *)v176);
                v50 = v8 + 20;
              }
              while (!v53);
            }
            v54 = (__int128 *)((char *)&v173 + 4);
            v55 = v46;
            if (v8 < (unint64_t)v46)
            {
              v56 = v155;
              do
              {
                v55 = v56 - 5;
                v57 = *a3;
                LODWORD(v173) = v42;
                *v54 = v168;
                v58 = *(_OWORD *)(v56 - 5);
                *(_DWORD *)&v172[16] = *(v56 - 1);
                *(_OWORD *)v172 = v58;
                v59 = v54;
                v60 = v57(&v173, (__int128 *)v172);
                v54 = v59;
                v56 = v55;
              }
              while ((v60 & 1) != 0);
            }
            if (v8 >= (unint64_t)v55)
            {
              a2 = v155;
            }
            else
            {
              a2 = v155;
              do
              {
                v61 = *(_DWORD *)v8;
                *(_DWORD *)v8 = *v55;
                *v55 = v61;
                v169 = *(_OWORD *)(v8 + 4);
                *(_OWORD *)(v8 + 4) = *(_OWORD *)(v55 + 1);
                *(_OWORD *)(v55 + 1) = v169;
                do
                {
                  *(_DWORD *)v171 = v42;
                  *(_OWORD *)&v171[4] = v168;
                  v62 = *(_OWORD *)(v8 + 20);
                  v63 = *(_DWORD *)(v8 + 36);
                  v8 += 20;
                  v64 = *a3;
                  *(_DWORD *)&v170[16] = v63;
                  *(_OWORD *)v170 = v62;
                }
                while (!v64((__int128 *)v171, (__int128 *)v170));
                do
                {
                  LODWORD(v167[0]) = v42;
                  *(_OWORD *)((char *)v167 + 4) = v168;
                  v65 = *(_OWORD *)(v55 - 5);
                  v66 = *(v55 - 1);
                  v55 -= 5;
                  v67 = *a3;
                  v166 = v66;
                  v165 = v65;
                }
                while ((v67(v167, &v165) & 1) != 0);
              }
              while (v8 < (unint64_t)v55);
            }
            if (v8 - 20 != a1)
            {
              *(_DWORD *)a1 = *(_DWORD *)(v8 - 20);
              *(_OWORD *)(a1 + 4) = *(_OWORD *)(v8 - 16);
            }
            a5 = 0;
            *(_DWORD *)(v8 - 20) = v42;
            *(_OWORD *)(v8 - 16) = v168;
            continue;
          }
        }
        v18 = *(_DWORD *)a1;
        v165 = *(_OWORD *)(a1 + 4);
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 20;
          v21 = *a3;
          v22 = *(_DWORD *)(v20 + 36);
          *(_OWORD *)v179 = *(_OWORD *)(v20 + 20);
          *(_DWORD *)&v179[16] = v22;
          *(_DWORD *)v178 = v18;
          *(_OWORD *)&v178[4] = v165;
        }
        while ((v21((__int128 *)v179, (__int128 *)v178) & 1) != 0);
        v23 = v155;
        if (v20 == a1)
        {
          v28 = v155;
          while (v19 < (unint64_t)v28)
          {
            v29 = *a3;
            v24 = v28 - 5;
            v30 = *(v28 - 1);
            *(_OWORD *)v177 = *(_OWORD *)(v28 - 5);
            *(_DWORD *)&v177[16] = v30;
            *(_DWORD *)v176 = v18;
            *(_OWORD *)&v176[4] = v165;
            v31 = v29((__int128 *)v177, (__int128 *)v176);
            v28 = v24;
            if ((v31 & 1) != 0)
              goto LABEL_20;
          }
          v24 = v28;
        }
        else
        {
          do
          {
            v24 = v23 - 5;
            v25 = *a3;
            v26 = *(v23 - 1);
            *(_OWORD *)v177 = *(_OWORD *)(v23 - 5);
            *(_DWORD *)&v177[16] = v26;
            *(_DWORD *)v175 = v18;
            *(_OWORD *)&v175[4] = v165;
            v27 = v25((__int128 *)v177, (__int128 *)v175);
            v23 = v24;
          }
          while (!v27);
        }
LABEL_20:
        v8 = v19;
        if (v19 < (unint64_t)v24)
        {
          v32 = v24;
          do
          {
            v33 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *v32;
            *v32 = v33;
            v167[0] = *(_OWORD *)(v8 + 4);
            *(_OWORD *)(v8 + 4) = *(_OWORD *)(v32 + 1);
            *(_OWORD *)(v32 + 1) = v167[0];
            do
            {
              v34 = *(_DWORD *)(v8 + 36);
              v35 = *(_OWORD *)(v8 + 20);
              v8 += 20;
              v36 = *a3;
              v173 = v35;
              v174 = v34;
              *(_DWORD *)v172 = v18;
              *(_OWORD *)&v172[4] = v165;
            }
            while ((v36(&v173, (__int128 *)v172) & 1) != 0);
            do
            {
              v37 = *(v32 - 1);
              v38 = *(_OWORD *)(v32 - 5);
              v32 -= 5;
              v39 = *a3;
              *(_OWORD *)v171 = v38;
              *(_DWORD *)&v171[16] = v37;
              *(_DWORD *)v170 = v18;
              *(_OWORD *)&v170[4] = v165;
            }
            while (!v39((__int128 *)v171, (__int128 *)v170));
          }
          while (v8 < (unint64_t)v32);
        }
        if (v8 - 20 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v8 - 20);
          *(_OWORD *)(a1 + 4) = *(_OWORD *)(v8 - 16);
        }
        *(_DWORD *)(v8 - 20) = v18;
        *(_OWORD *)(v8 - 16) = v165;
        v40 = v19 >= (unint64_t)v24;
        a2 = v155;
        if (!v40)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*,false>(a1, v8 - 20, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v41 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>((__int128 *)a1, (int *)(v8 - 20), a3);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<float,_Geometry2D_rect2D_>,std::tuple<float,_Geometry2D_rect2D_>),std::tuple<float,_Geometry2D_rect2D_>*>((__int128 *)v8, v155, a3))
        {
          if (v41)
            continue;
          goto LABEL_32;
        }
        a2 = (int *)(v8 - 20);
        if (!v41)
          goto LABEL_1;
        return;
    }
  }
}

  v237 = a2 - 3;
  v232 = a2 - 9;
  v233 = a2 - 6;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v107 = *a3;
        v109 = v237[1];
        v108 = v237[2];
        v242[0] = *v237;
        v242[1] = v109;
        v242[2] = v108;
        v110 = *a1;
        v111 = a1[2];
        v241[1] = a1[1];
        v241[2] = v111;
        v241[0] = v110;
        if (v107(v242, v241))
        {
          v112 = *a1;
          v113 = a1[2];
          *(_OWORD *)v269 = a1[1];
          *(_OWORD *)&v269[16] = v113;
          v268 = v112;
          v114 = *v237;
          v115 = v237[1];
          *(__int128 *)((char *)a1 + 28) = *(__int128 *)((char *)v237 + 28);
          *a1 = v114;
          a1[1] = v115;
          v116 = v268;
          v117 = *(_OWORD *)v269;
          *(__int128 *)((char *)v237 + 28) = *(_OWORD *)&v269[12];
          *v237 = v116;
          v237[1] = v117;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(a1, a1 + 3, v237, (unsigned int (**)(_QWORD, _QWORD))a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(a1, a1 + 3, a1 + 6, v237, (unsigned int (**)(_QWORD, _QWORD))a3);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(a1, a1 + 3, a1 + 6, a1 + 9, v237, (unsigned int (**)(_QWORD, _QWORD))a3);
        return;
      default:
        if (v10 <= 1151)
        {
          v118 = a1 + 3;
          v120 = a1 == a2 || v118 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v120)
            {
              v121 = a2;
              v122 = 0;
              v123 = a1;
              do
              {
                v124 = v123;
                v123 = v118;
                v125 = *a3;
                v127 = v123[1];
                v126 = v123[2];
                v268 = *v123;
                *(_OWORD *)v269 = v127;
                *(_OWORD *)&v269[16] = v126;
                v128 = *v124;
                v129 = v124[2];
                *(_OWORD *)v267 = v124[1];
                *(_OWORD *)&v267[16] = v129;
                v266 = v128;
                if (v125(&v268, &v266))
                {
                  v130 = *v123;
                  v131 = v123[2];
                  *(_OWORD *)v265 = v123[1];
                  *(_OWORD *)&v265[16] = v131;
                  v264 = v130;
                  v132 = v122;
                  while (1)
                  {
                    v133 = (__int128 *)((char *)a1 + v132);
                    v134 = *(__int128 *)((char *)a1 + v132 + 16);
                    v133[3] = *(__int128 *)((char *)a1 + v132);
                    v133[4] = v134;
                    *(_OWORD *)((char *)v133 + 76) = *(__int128 *)((char *)a1 + v132 + 28);
                    if (!v132)
                      break;
                    v135 = (uint64_t (*)(__int128 *, __int128 *))*a3;
                    v261 = v264;
                    v262 = *(_OWORD *)v265;
                    v263 = *(_OWORD *)&v265[16];
                    v136 = *(v133 - 3);
                    v137 = *(v133 - 1);
                    *(_OWORD *)v260 = *(v133 - 2);
                    *(_OWORD *)&v260[16] = v137;
                    v259 = v136;
                    v132 -= 48;
                    if ((v135(&v261, &v259) & 1) == 0)
                    {
                      v138 = (__int128 *)((char *)a1 + v132 + 48);
                      goto LABEL_74;
                    }
                  }
                  v138 = a1;
LABEL_74:
                  v139 = v264;
                  v140 = *(_OWORD *)v265;
                  *(__int128 *)((char *)v138 + 28) = *(_OWORD *)&v265[12];
                  *v138 = v139;
                  v138[1] = v140;
                }
                v118 = v123 + 3;
                v122 += 48;
              }
              while (v123 + 3 != v121);
            }
          }
          else if (!v120)
          {
            do
            {
              v215 = a1;
              a1 = v118;
              v216 = *a3;
              v218 = a1[1];
              v217 = a1[2];
              v268 = *a1;
              *(_OWORD *)v269 = v218;
              *(_OWORD *)&v269[16] = v217;
              v219 = *v215;
              v220 = v215[2];
              *(_OWORD *)v267 = v215[1];
              *(_OWORD *)&v267[16] = v220;
              v266 = v219;
              if (v216(&v268, &v266))
              {
                v221 = *a1;
                v222 = a1[2];
                *(_OWORD *)v265 = a1[1];
                *(_OWORD *)&v265[16] = v222;
                v264 = v221;
                v223 = a1;
                do
                {
                  v224 = v223 - 3;
                  v225 = *(v223 - 2);
                  *v223 = *(v223 - 3);
                  v223[1] = v225;
                  *(__int128 *)((char *)v223 + 28) = *(__int128 *)((char *)v223 - 20);
                  v226 = *a3;
                  v261 = v264;
                  v262 = *(_OWORD *)v265;
                  v263 = *(_OWORD *)&v265[16];
                  v227 = *(v223 - 6);
                  v228 = *(v223 - 4);
                  *(_OWORD *)v260 = *(v223 - 5);
                  *(_OWORD *)&v260[16] = v228;
                  v259 = v227;
                  v229 = v226(&v261, &v259);
                  v223 = v224;
                }
                while ((v229 & 1) != 0);
                v230 = v264;
                v231 = *(_OWORD *)v265;
                *(__int128 *)((char *)v224 + 28) = *(_OWORD *)&v265[12];
                *v224 = v230;
                v224[1] = v231;
              }
              v118 = a1 + 3;
            }
            while (a1 + 3 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v141 = (unint64_t)(v11 - 2) >> 1;
            v235 = a2;
            v238 = v141;
            do
            {
              v142 = v141;
              if (v238 >= v141)
              {
                v143 = (2 * v141) | 1;
                v144 = &a1[3 * v143];
                if (2 * v141 + 2 < v11)
                {
                  v145 = *a3;
                  v147 = v144[1];
                  v146 = v144[2];
                  v268 = *v144;
                  *(_OWORD *)v269 = v147;
                  *(_OWORD *)&v269[16] = v146;
                  v148 = v144[3];
                  v149 = v144[5];
                  *(_OWORD *)v267 = v144[4];
                  *(_OWORD *)&v267[16] = v149;
                  v266 = v148;
                  if (v145(&v268, &v266))
                  {
                    v144 += 3;
                    v143 = 2 * v142 + 2;
                  }
                }
                v150 = &a1[3 * v142];
                v151 = (uint64_t (*)(__int128 *, __int128 *))*a3;
                v153 = v144[1];
                v152 = v144[2];
                v264 = *v144;
                *(_OWORD *)v265 = v153;
                *(_OWORD *)&v265[16] = v152;
                v154 = *v150;
                v155 = v150[2];
                v262 = v150[1];
                v263 = v155;
                v261 = v154;
                if ((v151(&v264, &v261) & 1) == 0)
                {
                  v156 = *v150;
                  v157 = v150[2];
                  *(_OWORD *)v260 = v150[1];
                  *(_OWORD *)&v260[16] = v157;
                  v259 = v156;
                  do
                  {
                    v158 = v144;
                    v159 = *v144;
                    v160 = v144[1];
                    *(__int128 *)((char *)v150 + 28) = *(__int128 *)((char *)v144 + 28);
                    *v150 = v159;
                    v150[1] = v160;
                    if (v238 < v143)
                      break;
                    v161 = (2 * v143) | 1;
                    v144 = &a1[3 * v161];
                    if (2 * v143 + 2 < v11)
                    {
                      v162 = *a3;
                      v164 = v144[1];
                      v163 = v144[2];
                      v257 = *v144;
                      *(_OWORD *)v258 = v164;
                      *(_OWORD *)&v258[16] = v163;
                      v165 = v144[3];
                      v166 = v144[5];
                      v255 = v144[4];
                      v256 = v166;
                      v254 = v165;
                      if (v162(&v257, &v254))
                      {
                        v144 += 3;
                        v161 = 2 * v143 + 2;
                      }
                    }
                    v167 = *a3;
                    v169 = v144[1];
                    v168 = v144[2];
                    v251 = *v144;
                    v252 = v169;
                    v253 = v168;
                    v249 = *(_OWORD *)v260;
                    v250 = *(_OWORD *)&v260[16];
                    v248 = v259;
                    v150 = v158;
                    v143 = v161;
                  }
                  while (!v167(&v251, &v248));
                  v170 = v259;
                  v171 = *(_OWORD *)v260;
                  *(__int128 *)((char *)v158 + 28) = *(_OWORD *)&v260[12];
                  *v158 = v170;
                  v158[1] = v171;
                }
              }
              v141 = v142 - 1;
            }
            while (v142);
            v172 = v10 / 0x30uLL;
            v173 = v235;
            do
            {
              v174 = 0;
              v175 = *a1;
              v176 = a1[2];
              *(_OWORD *)v258 = a1[1];
              *(_OWORD *)&v258[16] = v176;
              v257 = v175;
              v177 = v172 - 2;
              v236 = v173;
              if (v172 < 2)
                v177 = v172 - 1;
              v178 = v177 >> 1;
              v179 = a1;
              do
              {
                v180 = &v179[3 * v174 + 3];
                v181 = (2 * v174) | 1;
                v182 = 2 * v174 + 2;
                if (v182 < v172)
                {
                  v183 = *a3;
                  v185 = v180[1];
                  v184 = v180[2];
                  v268 = *v180;
                  *(_OWORD *)v269 = v185;
                  *(_OWORD *)&v269[16] = v184;
                  v186 = v180[3];
                  v187 = v180[5];
                  *(_OWORD *)v267 = v180[4];
                  *(_OWORD *)&v267[16] = v187;
                  v266 = v186;
                  if (v183(&v268, &v266))
                  {
                    v180 += 3;
                    v181 = v182;
                  }
                }
                v188 = *v180;
                v189 = v180[1];
                *(__int128 *)((char *)v179 + 28) = *(__int128 *)((char *)v180 + 28);
                *v179 = v188;
                v179[1] = v189;
                v179 = v180;
                v174 = v181;
              }
              while (v181 <= v178);
              v173 = v236 - 3;
              if (v180 == v236 - 3)
              {
                v212 = v257;
                v213 = *(_OWORD *)v258;
                *(__int128 *)((char *)v180 + 28) = *(_OWORD *)&v258[12];
                *v180 = v212;
                v180[1] = v213;
              }
              else
              {
                v190 = *v173;
                v191 = *(v236 - 2);
                *(__int128 *)((char *)v180 + 28) = *(__int128 *)((char *)v236 - 20);
                *v180 = v190;
                v180[1] = v191;
                v192 = v257;
                v193 = *(_OWORD *)v258;
                *(__int128 *)((char *)v236 - 20) = *(_OWORD *)&v258[12];
                *v173 = v192;
                *(v236 - 2) = v193;
                v194 = (char *)v180 - (char *)a1 + 48;
                if (v194 >= 49)
                {
                  v195 = (unint64_t)(-2 - 0x5555555555555555 * (v194 >> 4)) >> 1;
                  v196 = &a1[3 * v195];
                  v197 = *a3;
                  v199 = v196[1];
                  v198 = v196[2];
                  v268 = *v196;
                  *(_OWORD *)v269 = v199;
                  *(_OWORD *)&v269[16] = v198;
                  v200 = *v180;
                  v201 = v180[2];
                  *(_OWORD *)v267 = v180[1];
                  *(_OWORD *)&v267[16] = v201;
                  v266 = v200;
                  if (v197(&v268, &v266))
                  {
                    v202 = *v180;
                    v203 = v180[2];
                    *(_OWORD *)v265 = v180[1];
                    *(_OWORD *)&v265[16] = v203;
                    v264 = v202;
                    do
                    {
                      v204 = v196;
                      v205 = *v196;
                      v206 = v196[1];
                      *(__int128 *)((char *)v180 + 28) = *(__int128 *)((char *)v196 + 28);
                      *v180 = v205;
                      v180[1] = v206;
                      if (!v195)
                        break;
                      v195 = (v195 - 1) >> 1;
                      v207 = (uint64_t (*)(__int128 *, __int128 *))*a3;
                      v196 = &a1[3 * v195];
                      v209 = v196[1];
                      v208 = v196[2];
                      v261 = *v196;
                      v262 = v209;
                      v263 = v208;
                      *(_OWORD *)v260 = *(_OWORD *)v265;
                      *(_OWORD *)&v260[16] = *(_OWORD *)&v265[16];
                      v259 = v264;
                      v180 = v204;
                    }
                    while ((v207(&v261, &v259) & 1) != 0);
                    v210 = v264;
                    v211 = *(_OWORD *)v265;
                    *(__int128 *)((char *)v204 + 28) = *(_OWORD *)&v265[12];
                    *v204 = v210;
                    v204[1] = v211;
                    v173 = v236 - 3;
                  }
                }
              }
            }
            while (v172-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[3 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x1801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(v13, a1, v237, (unsigned int (**)(_QWORD, _QWORD))a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(a1, v13, v237, (unsigned int (**)(_QWORD, _QWORD))a3);
          v14 = 3 * v12;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(a1 + 3, &a1[v14 - 3], v233, (unsigned int (**)(_QWORD, _QWORD))a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(a1 + 6, &a1[v14 + 3], v232, (unsigned int (**)(_QWORD, _QWORD))a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(&a1[v14 - 3], v13, &a1[v14 + 3], (unsigned int (**)(_QWORD, _QWORD))a3);
          v15 = *a1;
          v16 = a1[2];
          *(_OWORD *)v269 = a1[1];
          *(_OWORD *)&v269[16] = v16;
          v268 = v15;
          v17 = *(__int128 *)((char *)v13 + 28);
          v18 = v13[1];
          *a1 = *v13;
          a1[1] = v18;
          *(__int128 *)((char *)a1 + 28) = v17;
          v19 = v268;
          v20 = *(_OWORD *)v269;
          *(__int128 *)((char *)v13 + 28) = *(_OWORD *)&v269[12];
          *v13 = v19;
          v13[1] = v20;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v21 = *a3;
          v23 = *(a1 - 2);
          v22 = *(a1 - 1);
          v240[0] = *(a1 - 3);
          v240[1] = v23;
          v240[2] = v22;
          v24 = *a1;
          v25 = a1[2];
          v239[1] = a1[1];
          v239[2] = v25;
          v239[0] = v24;
          if ((((uint64_t (*)(_OWORD *, _OWORD *))v21)(v240, v239) & 1) == 0)
          {
            v65 = *a1;
            v66 = a1[2];
            *(_OWORD *)v267 = a1[1];
            *(_OWORD *)&v267[16] = v66;
            v266 = v65;
            v67 = (uint64_t (*)(__int128 *, __int128 *))*a3;
            v69 = a1[1];
            v68 = a1[2];
            v264 = *a1;
            *(_OWORD *)v265 = v69;
            *(_OWORD *)&v265[16] = v68;
            v70 = *v237;
            v71 = v237[2];
            v262 = v237[1];
            v263 = v71;
            v261 = v70;
            if ((v67(&v264, &v261) & 1) != 0)
            {
              v72 = a1;
              do
              {
                v9 = v72 + 3;
                v73 = *a3;
                v259 = v266;
                *(_OWORD *)v260 = *(_OWORD *)v267;
                *(_OWORD *)&v260[16] = *(_OWORD *)&v267[16];
                v74 = v72[3];
                v75 = v72[5];
                *(_OWORD *)v258 = v72[4];
                *(_OWORD *)&v258[16] = v75;
                v257 = v74;
                v76 = v73(&v259, &v257);
                v72 = v9;
              }
              while ((v76 & 1) == 0);
            }
            else
            {
              v77 = a1 + 3;
              do
              {
                v9 = v77;
                if (v77 >= a2)
                  break;
                v78 = *a3;
                v259 = v266;
                *(_OWORD *)v260 = *(_OWORD *)v267;
                *(_OWORD *)&v260[16] = *(_OWORD *)&v267[16];
                v79 = *v9;
                v80 = v9[2];
                *(_OWORD *)v258 = v9[1];
                *(_OWORD *)&v258[16] = v80;
                v257 = v79;
                v81 = v78(&v259, &v257);
                v77 = v9 + 3;
              }
              while (!v81);
            }
            v82 = a2;
            if (v9 < a2)
            {
              v83 = a2;
              do
              {
                v82 = v83 - 3;
                v84 = *a3;
                v254 = v266;
                v255 = *(_OWORD *)v267;
                v256 = *(_OWORD *)&v267[16];
                v85 = *(v83 - 3);
                v86 = *(v83 - 1);
                v252 = *(v83 - 2);
                v253 = v86;
                v251 = v85;
                v87 = v84(&v254, &v251);
                v83 = v82;
              }
              while ((v87 & 1) != 0);
            }
            while (v9 < v82)
            {
              v88 = *v9;
              v89 = v9[2];
              *(_OWORD *)v269 = v9[1];
              *(_OWORD *)&v269[16] = v89;
              v268 = v88;
              v90 = *v82;
              v91 = v82[1];
              *(__int128 *)((char *)v9 + 28) = *(__int128 *)((char *)v82 + 28);
              *v9 = v90;
              v9[1] = v91;
              v92 = v268;
              v93 = *(_OWORD *)v269;
              *(__int128 *)((char *)v82 + 28) = *(_OWORD *)&v269[12];
              *v82 = v92;
              v82[1] = v93;
              do
              {
                v248 = v266;
                v249 = *(_OWORD *)v267;
                v250 = *(_OWORD *)&v267[16];
                v95 = v9[3];
                v94 = v9[4];
                v96 = v9[5];
                v9 += 3;
                v97 = *a3;
                v246 = v94;
                v247 = v96;
                v245 = v95;
              }
              while (!v97(&v248, &v245));
              do
              {
                v244[0] = v266;
                v244[1] = *(_OWORD *)v267;
                v244[2] = *(_OWORD *)&v267[16];
                v99 = *(v82 - 3);
                v98 = *(v82 - 2);
                v100 = *(v82 - 1);
                v82 -= 3;
                v101 = *a3;
                v243[1] = v98;
                v243[2] = v100;
                v243[0] = v99;
              }
              while ((((uint64_t (*)(_OWORD *, _OWORD *))v101)(v244, v243) & 1) != 0);
            }
            v102 = v9 - 3;
            if (v9 - 3 != a1)
            {
              v103 = *v102;
              v104 = *(v9 - 2);
              *(__int128 *)((char *)a1 + 28) = *(__int128 *)((char *)v9 - 20);
              *a1 = v103;
              a1[1] = v104;
            }
            a5 = 0;
            v105 = v266;
            v106 = *(_OWORD *)v267;
            *(__int128 *)((char *)v9 - 20) = *(_OWORD *)&v267[12];
            *v102 = v105;
            *(v9 - 2) = v106;
            continue;
          }
        }
        v26 = *a1;
        v27 = a1[2];
        *(_OWORD *)v267 = a1[1];
        *(_OWORD *)&v267[16] = v27;
        v266 = v26;
        v28 = a1;
        do
        {
          v29 = v28;
          v30 = (uint64_t (*)(__int128 *, __int128 *))*a3;
          v28 += 3;
          v32 = v29[4];
          v31 = v29[5];
          v264 = v29[3];
          *(_OWORD *)v265 = v32;
          *(_OWORD *)&v265[16] = v31;
          v262 = *(_OWORD *)v267;
          v263 = *(_OWORD *)&v267[16];
          v261 = v266;
        }
        while ((v30(&v264, &v261) & 1) != 0);
        v33 = a2;
        v34 = a2;
        if (v29 == a1)
        {
          v40 = a2;
          while (v28 < v40)
          {
            v41 = *a3;
            v35 = v40 - 3;
            v43 = *(v40 - 2);
            v42 = *(v40 - 1);
            v259 = *(v40 - 3);
            *(_OWORD *)v260 = v43;
            *(_OWORD *)&v260[16] = v42;
            *(_OWORD *)v258 = *(_OWORD *)v267;
            *(_OWORD *)&v258[16] = *(_OWORD *)&v267[16];
            v257 = v266;
            v44 = v41(&v259, &v257);
            v40 = v35;
            if ((v44 & 1) != 0)
              goto LABEL_20;
          }
          v35 = v40;
        }
        else
        {
          do
          {
            v35 = v34 - 3;
            v36 = *a3;
            v38 = *(v34 - 2);
            v37 = *(v34 - 1);
            v259 = *(v34 - 3);
            *(_OWORD *)v260 = v38;
            *(_OWORD *)&v260[16] = v37;
            *(_OWORD *)v258 = *(_OWORD *)v267;
            *(_OWORD *)&v258[16] = *(_OWORD *)&v267[16];
            v257 = v266;
            v39 = v36(&v259, &v257);
            v34 = v35;
          }
          while (!v39);
        }
LABEL_20:
        if (v28 < v35)
        {
          v45 = v28;
          v46 = v35;
          do
          {
            v47 = v45[2];
            *(_OWORD *)v269 = v45[1];
            v48 = *(_OWORD *)v269;
            *(_OWORD *)&v269[16] = v47;
            v268 = *v45;
            v49 = v268;
            v51 = *v46;
            v50 = v46[1];
            *(__int128 *)((char *)v45 + 28) = *(__int128 *)((char *)v46 + 28);
            *v45 = v51;
            v45[1] = v50;
            *(__int128 *)((char *)v46 + 28) = *(_OWORD *)&v269[12];
            *v46 = v49;
            v46[1] = v48;
            do
            {
              v29 = v45;
              v52 = (uint64_t (*)(__int128 *, __int128 *))*a3;
              v45 += 3;
              v54 = v29[4];
              v53 = v29[5];
              v254 = v29[3];
              v255 = v54;
              v256 = v53;
              v252 = *(_OWORD *)v267;
              v253 = *(_OWORD *)&v267[16];
              v251 = v266;
            }
            while ((v52(&v254, &v251) & 1) != 0);
            do
            {
              v56 = *(v46 - 2);
              v55 = *(v46 - 1);
              v57 = *(v46 - 3);
              v46 -= 3;
              v58 = *a3;
              v248 = v57;
              v249 = v56;
              v250 = v55;
              v246 = *(_OWORD *)v267;
              v247 = *(_OWORD *)&v267[16];
              v245 = v266;
            }
            while (!v58(&v248, &v245));
          }
          while (v45 < v46);
        }
        if (v29 != a1)
        {
          v59 = *v29;
          v60 = v29[1];
          *(__int128 *)((char *)a1 + 28) = *(__int128 *)((char *)v29 + 28);
          *a1 = v59;
          a1[1] = v60;
        }
        v61 = v266;
        v62 = *(_OWORD *)v267;
        *(__int128 *)((char *)v29 + 28) = *(_OWORD *)&v267[12];
        *v29 = v61;
        v29[1] = v62;
        v63 = v28 >= v35;
        a2 = v33;
        if (!v63)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*,false>(a1, v29, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v29 + 3;
          continue;
        }
        v64 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(a1, v29, (unsigned int (**)(_QWORD, _QWORD))a3);
        v9 = v29 + 3;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CGPointWithPts,CGPointWithPts),CGPointWithPts*>(v29 + 3, v33, (unsigned int (**)(_QWORD, _QWORD))a3))
        {
          if (v64)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v64)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (_OWORD *)((char *)a2 - 28);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v9) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((float *)a2 - 3) > *(float *)(v9 + 16))
        {
          *(_OWORD *)&v101[12] = *(_OWORD *)(v9 + 12);
          *(_OWORD *)v101 = *(_OWORD *)v9;
          v47 = *v8;
          *(_OWORD *)(v9 + 12) = *(a2 - 1);
          *(_OWORD *)v9 = v47;
          *(a2 - 1) = *(_OWORD *)&v101[12];
          *v8 = *(_OWORD *)v101;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(v9, v9 + 28, (uint64_t)a2 - 28);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(v9, v9 + 28, v9 + 56, (uint64_t)a2 - 28);
        return;
      case 5:
        v48 = (_OWORD *)(v9 + 28);
        v49 = (_OWORD *)(v9 + 56);
        v50 = (_OWORD *)(v9 + 84);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(v9, v9 + 28, v9 + 56, v9 + 84);
        if (*((float *)a2 - 3) > *(float *)(v9 + 100))
        {
          *(_OWORD *)v102 = *v50;
          *(_OWORD *)&v102[12] = *(_OWORD *)(v9 + 96);
          v51 = *v8;
          *(_OWORD *)(v9 + 96) = *(a2 - 1);
          *v50 = v51;
          *(a2 - 1) = *(_OWORD *)&v102[12];
          *v8 = *(_OWORD *)v102;
          if (*(float *)(v9 + 100) > *(float *)(v9 + 72))
          {
            *(_OWORD *)v103 = *v49;
            *(_OWORD *)&v103[12] = *(_OWORD *)(v9 + 68);
            *v49 = *v50;
            *(_OWORD *)(v9 + 68) = *(_OWORD *)(v9 + 96);
            *v50 = *(_OWORD *)v103;
            *(_OWORD *)(v9 + 96) = *(_OWORD *)&v103[12];
            if (*(float *)(v9 + 72) > *(float *)(v9 + 44))
            {
              *(_OWORD *)v104 = *v48;
              *(_OWORD *)&v104[12] = *(_OWORD *)(v9 + 40);
              *v48 = *v49;
              *(_OWORD *)(v9 + 40) = *(_OWORD *)(v9 + 68);
              *v49 = *(_OWORD *)v104;
              *(_OWORD *)(v9 + 68) = *(_OWORD *)&v104[12];
              if (*(float *)(v9 + 44) > *(float *)(v9 + 16))
              {
                *(_OWORD *)&v105[12] = *(_OWORD *)(v9 + 12);
                *(_OWORD *)v105 = *(_OWORD *)v9;
                *(_OWORD *)v9 = *v48;
                *(_OWORD *)(v9 + 12) = *(_OWORD *)(v9 + 40);
                *v48 = *(_OWORD *)v105;
                *(_OWORD *)(v9 + 40) = *(_OWORD *)&v105[12];
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 671)
        {
          v52 = (_OWORD *)(v9 + 28);
          v54 = (_OWORD *)v9 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v9;
              do
              {
                v57 = v52;
                v58 = *(float *)(v56 + 44);
                if (v58 > *(float *)(v56 + 16))
                {
                  v106 = *v52;
                  v59 = *(_QWORD *)(v56 + 48);
                  v60 = v55;
                  while (1)
                  {
                    v61 = v9 + v60;
                    *(_OWORD *)(v61 + 28) = *(_OWORD *)(v9 + v60);
                    *(_OWORD *)(v61 + 40) = *(_OWORD *)(v9 + v60 + 12);
                    if (!v60)
                      break;
                    v60 -= 28;
                    if (v58 <= *(float *)(v61 - 12))
                    {
                      v62 = v9 + v60 + 28;
                      goto LABEL_79;
                    }
                  }
                  v62 = v9;
LABEL_79:
                  *(_OWORD *)v62 = v106;
                  *(float *)(v62 + 16) = v58;
                  *(_QWORD *)(v62 + 20) = v59;
                }
                v52 = (_OWORD *)((char *)v57 + 28);
                v55 += 28;
                v56 = (unint64_t)v57;
              }
              while ((_OWORD *)((char *)v57 + 28) != a2);
            }
          }
          else if (!v54)
          {
            do
            {
              v91 = (uint64_t)v52;
              v92 = *(float *)(a1 + 44);
              if (v92 > *(float *)(a1 + 16))
              {
                v109 = *v52;
                v93 = *(_QWORD *)(a1 + 48);
                do
                {
                  *v52 = *(_OWORD *)((char *)v52 - 28);
                  *(_OWORD *)((char *)v52 + 12) = *(v52 - 1);
                  v94 = *((float *)v52 - 10);
                  v52 = (_OWORD *)((char *)v52 - 28);
                }
                while (v92 > v94);
                *v52 = v109;
                *((float *)v52 + 4) = v92;
                *(_QWORD *)((char *)v52 + 20) = v93;
              }
              v52 = (_OWORD *)(v91 + 28);
              a1 = v91;
            }
            while ((_OWORD *)(v91 + 28) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((_OWORD *)v9 != a2)
          {
            v63 = (unint64_t)(v11 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = v9 + 28 * v66;
                if (2 * v65 + 2 < v11 && *(float *)(v9 + 28 * v66 + 16) > *(float *)(v67 + 44))
                {
                  v67 += 28;
                  v66 = 2 * v65 + 2;
                }
                v68 = *(float *)(v9 + 28 * v65 + 16);
                if (*(float *)(v67 + 16) <= v68)
                {
                  v69 = v9 + 28 * v65;
                  v107 = *(_OWORD *)v69;
                  v70 = *(_QWORD *)(v69 + 20);
                  do
                  {
                    v71 = (_OWORD *)v69;
                    v69 = v67;
                    v72 = *(_OWORD *)v67;
                    *(_OWORD *)((char *)v71 + 12) = *(_OWORD *)(v67 + 12);
                    *v71 = v72;
                    if (v63 < v66)
                      break;
                    v73 = (2 * v66) | 1;
                    v67 = v9 + 28 * v73;
                    v74 = 2 * v66 + 2;
                    if (v74 < v11 && *(float *)(v9 + 28 * v73 + 16) > *(float *)(v67 + 44))
                    {
                      v67 += 28;
                      v73 = v74;
                    }
                    v66 = v73;
                  }
                  while (*(float *)(v67 + 16) <= v68);
                  *(_OWORD *)v69 = v107;
                  *(float *)(v69 + 16) = v68;
                  *(_QWORD *)(v69 + 20) = v70;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v75 = v10 / 0x1CuLL;
            do
            {
              v76 = 0;
              *(_OWORD *)&v108[12] = *(_OWORD *)(v9 + 12);
              *(_OWORD *)v108 = *(_OWORD *)v9;
              v77 = v9;
              do
              {
                v78 = (_OWORD *)v77;
                v79 = v76 + 1;
                v77 += 28 * (v76 + 1);
                v80 = 2 * v76;
                v76 = (2 * v76) | 1;
                v81 = v80 + 2;
                if (v81 < v75 && *((float *)v78 + 7 * v79 + 4) > *(float *)(v77 + 44))
                {
                  v77 += 28;
                  v76 = v81;
                }
                v82 = *(_OWORD *)v77;
                *(_OWORD *)((char *)v78 + 12) = *(_OWORD *)(v77 + 12);
                *v78 = v82;
              }
              while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              a2 = (_OWORD *)((char *)a2 - 28);
              if ((_OWORD *)v77 == a2)
              {
                *(_OWORD *)(v77 + 12) = *(_OWORD *)&v108[12];
                *(_OWORD *)v77 = *(_OWORD *)v108;
              }
              else
              {
                v83 = *a2;
                *(_OWORD *)(v77 + 12) = *(_OWORD *)((char *)a2 + 12);
                *(_OWORD *)v77 = v83;
                *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v108[12];
                *a2 = *(_OWORD *)v108;
                v84 = v77 - v9 + 28;
                if (v84 >= 29)
                {
                  v85 = (v84 / 0x1CuLL - 2) >> 1;
                  v86 = *(float *)(v77 + 16);
                  if (*(float *)(v9 + 28 * v85 + 16) > v86)
                  {
                    v97 = *(_OWORD *)v77;
                    v87 = *(_QWORD *)(v77 + 20);
                    do
                    {
                      v88 = (_OWORD *)v77;
                      v77 = v9 + 28 * v85;
                      v89 = *(_OWORD *)v77;
                      *(_OWORD *)((char *)v88 + 12) = *(_OWORD *)(v77 + 12);
                      *v88 = v89;
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                    }
                    while (*(float *)(v9 + 28 * v85 + 16) > v86);
                    *(_OWORD *)v77 = v97;
                    *(float *)(v77 + 16) = v86;
                    *(_QWORD *)(v77 + 20) = v87;
                  }
                }
              }
            }
            while (v75-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (__int128 *)(v9 + 28 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0xE01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(a1 + 28 * v12, a1, (uint64_t)a2 - 28);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(a1, a1 + 28 * v12, (uint64_t)a2 - 28);
          v14 = 28 * v12;
          v15 = 28 * v12 + a1 - 28;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(a1 + 28, v15, (uint64_t)a2 - 56);
          v16 = a1 + 28 + v14;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(a1 + 56, v16, (uint64_t)a2 - 84);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(v15, (uint64_t)v13, v16);
          *(_OWORD *)&v98[12] = *(_OWORD *)(a1 + 12);
          *(_OWORD *)v98 = *(_OWORD *)a1;
          v17 = *v13;
          *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)v13 + 12);
          *(_OWORD *)a1 = v17;
          *(__int128 *)((char *)v13 + 12) = *(_OWORD *)&v98[12];
          *v13 = *(_OWORD *)v98;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(float *)(a1 + 16);
          if (*(float *)(a1 - 12) > v18)
            goto LABEL_11;
          v96 = *(_OWORD *)a1;
          if (v18 <= *((float *)a2 - 3))
          {
            v36 = a1 + 28;
            do
            {
              v9 = v36;
              if (v36 >= (unint64_t)a2)
                break;
              v37 = *(float *)(v36 + 16);
              v36 += 28;
            }
            while (v18 <= v37);
          }
          else
          {
            v34 = a1;
            do
            {
              v9 = v34 + 28;
              v35 = *(float *)(v34 + 44);
              v34 += 28;
            }
            while (v18 <= v35);
          }
          v38 = (float *)a2;
          if (v9 < (unint64_t)a2)
          {
            v39 = (float *)a2;
            do
            {
              v38 = v39 - 7;
              v40 = *(v39 - 3);
              v39 -= 7;
            }
            while (v18 > v40);
          }
          v41 = *(_QWORD *)(a1 + 20);
          while (v9 < (unint64_t)v38)
          {
            *(_OWORD *)&v100[12] = *(_OWORD *)(v9 + 12);
            *(_OWORD *)v100 = *(_OWORD *)v9;
            v42 = *(_OWORD *)v38;
            *(_OWORD *)(v9 + 12) = *(_OWORD *)(v38 + 3);
            *(_OWORD *)v9 = v42;
            *(_OWORD *)(v38 + 3) = *(_OWORD *)&v100[12];
            *(_OWORD *)v38 = *(_OWORD *)v100;
            do
            {
              v43 = *(float *)(v9 + 44);
              v9 += 28;
            }
            while (v18 <= v43);
            do
            {
              v44 = *(v38 - 3);
              v38 -= 7;
            }
            while (v18 > v44);
          }
          v45 = (__int128 *)(v9 - 28);
          if (v9 - 28 != a1)
          {
            v46 = *v45;
            *(_OWORD *)(a1 + 12) = *(_OWORD *)(v9 - 16);
            *(_OWORD *)a1 = v46;
          }
          a4 = 0;
          *v45 = v96;
          *(float *)(v9 - 12) = v18;
          *(_QWORD *)(v9 - 8) = v41;
          continue;
        }
        v18 = *(float *)(a1 + 16);
LABEL_11:
        v95 = *(_OWORD *)a1;
        v19 = *(_QWORD *)(a1 + 20);
        v20 = a1;
        do
        {
          v21 = v20;
          v20 += 28;
        }
        while (*(float *)(v21 + 44) > v18);
        v22 = (float *)a2;
        if (v21 == a1)
        {
          v25 = (float *)a2;
          while (v20 < (unint64_t)v25)
          {
            v23 = v25 - 7;
            v26 = *(v25 - 3);
            v25 -= 7;
            if (v26 > v18)
              goto LABEL_21;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 7;
            v24 = *(v22 - 3);
            v22 -= 7;
          }
          while (v24 <= v18);
        }
LABEL_21:
        v9 = v20;
        if (v20 < (unint64_t)v23)
        {
          v27 = v23;
          do
          {
            *(_OWORD *)v99 = *(_OWORD *)v9;
            *(_OWORD *)&v99[12] = *(_OWORD *)(v9 + 12);
            v28 = *(_OWORD *)v27;
            *(_OWORD *)(v9 + 12) = *(_OWORD *)(v27 + 3);
            *(_OWORD *)v9 = v28;
            *(_OWORD *)(v27 + 3) = *(_OWORD *)&v99[12];
            *(_OWORD *)v27 = *(_OWORD *)v99;
            do
            {
              v29 = *(float *)(v9 + 44);
              v9 += 28;
            }
            while (v29 > v18);
            do
            {
              v30 = *(v27 - 3);
              v27 -= 7;
            }
            while (v30 <= v18);
          }
          while (v9 < (unint64_t)v27);
        }
        v31 = (__int128 *)(v9 - 28);
        if (v9 - 28 != a1)
        {
          v32 = *v31;
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(v9 - 16);
          *(_OWORD *)a1 = v32;
        }
        *v31 = v95;
        *(float *)(v9 - 12) = v18;
        *(_QWORD *)(v9 - 8) = v19;
        if (v20 < (unint64_t)v23)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*,false>(a1, v9 - 28, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(a1, v9 - 28);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nonMaxSuppression(std::vector<DetectedRectangle> &,float)::$_0 &,DetectedRectangle*>(v9, (uint64_t)a2))
        {
          if (v33)
            continue;
          goto LABEL_32;
        }
        a2 = (_OWORD *)(v9 - 28);
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

float std::vector<std::pair<std::string,float>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,float> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  float result;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  result = *((float *)a2 + 6);
  *(float *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 32;
  return result;
}

void sub_1A13E8EFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,float>>::__push_back_slow_path<std::pair<std::string,float> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v2 = (a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  v7 = a1[2] - *a1;
  if (v7 >> 4 > v3)
    v3 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v8 = 0x7FFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v18 = v6;
  if (v8)
  {
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<vImage_Buffer>>(v8);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = (std::string *)&v10[8 * v2];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[8 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[8 * v2 + 6] = *((_DWORD *)a2 + 6);
  v16 = (std::string *)((char *)v11 + 32);
  std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<std::string,float>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1A13E8FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(__int128 *a1, float *a2, float *a3)
{
  float *v3;
  float result;
  float *v5;
  float v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v3 = a2 + 6;
  result = a2[6];
  v5 = (float *)a1 + 6;
  v6 = a3[6];
  if (result > *((float *)a1 + 6))
  {
    if (v6 <= result)
    {
      v16 = *((_QWORD *)a1 + 2);
      v17 = *a1;
      v18 = *((_QWORD *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = v18;
      *(_OWORD *)a2 = v17;
      *((_QWORD *)a2 + 2) = v16;
      result = *((float *)a1 + 6);
      *((float *)a1 + 6) = a2[6];
      a2[6] = result;
      if (a3[6] <= result)
        return result;
      v19 = *((_QWORD *)a2 + 2);
      v20 = *(_OWORD *)a2;
      v21 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v21;
      *(_OWORD *)a3 = v20;
      *((_QWORD *)a3 + 2) = v19;
      v5 = a2 + 6;
    }
    else
    {
      v7 = *((_QWORD *)a1 + 2);
      v8 = *a1;
      v9 = *((_QWORD *)a3 + 2);
      *a1 = *(_OWORD *)a3;
      *((_QWORD *)a1 + 2) = v9;
      *(_OWORD *)a3 = v8;
      *((_QWORD *)a3 + 2) = v7;
    }
    v3 = a3 + 6;
    goto LABEL_10;
  }
  if (v6 > result)
  {
    v10 = *((_QWORD *)a2 + 2);
    v11 = *(_OWORD *)a2;
    v12 = *((_QWORD *)a3 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_QWORD *)a2 + 2) = v12;
    *(_OWORD *)a3 = v11;
    *((_QWORD *)a3 + 2) = v10;
    *(float *)&v11 = a2[6];
    a2[6] = a3[6];
    *((_DWORD *)a3 + 6) = v11;
    result = a2[6];
    if (result > *v5)
    {
      v13 = *((_QWORD *)a1 + 2);
      v14 = *a1;
      v15 = *((_QWORD *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = v15;
      *(_OWORD *)a2 = v14;
      *((_QWORD *)a2 + 2) = v13;
LABEL_10:
      result = *v5;
      *v5 = *v3;
      *v3 = result;
    }
  }
  return result;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(uint64_t a1, __int128 *a2, float *a3, float *a4)
{
  float result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)a2, a3);
  result = a4[6];
  if (result > a3[6])
  {
    v9 = *((_QWORD *)a3 + 2);
    v10 = *(_OWORD *)a3;
    v11 = *((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_QWORD *)a3 + 2) = v11;
    *(_OWORD *)a4 = v10;
    *((_QWORD *)a4 + 2) = v9;
    *(float *)&v10 = a3[6];
    a3[6] = a4[6];
    *((_DWORD *)a4 + 6) = v10;
    result = a3[6];
    if (result > *((float *)a2 + 6))
    {
      v12 = *((_QWORD *)a2 + 2);
      v13 = *a2;
      v14 = *((_QWORD *)a3 + 2);
      *a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v14;
      *(_OWORD *)a3 = v13;
      *((_QWORD *)a3 + 2) = v12;
      LODWORD(v13) = *((_DWORD *)a2 + 6);
      *((float *)a2 + 6) = a3[6];
      *((_DWORD *)a3 + 6) = v13;
      result = *((float *)a2 + 6);
      if (result > *(float *)(a1 + 24))
      {
        v15 = *(_QWORD *)(a1 + 16);
        v16 = *(_OWORD *)a1;
        v17 = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 16) = v17;
        *a2 = v16;
        *((_QWORD *)a2 + 2) = v15;
        result = *(float *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        *((float *)a2 + 6) = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  float v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  __int128 v30;
  float v31;
  uint64_t v32;
  __int128 v33;
  float v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[15];

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) > *(float *)(a1 + 24))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(_QWORD *)(a2 - 16) = v6;
        LODWORD(v7) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)(a1 + 32), (float *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), (float *)(a2 - 32));
      return 1;
    case 5:
      v21 = (__int128 *)(a1 + 32);
      v22 = (__int128 *)(a1 + 64);
      v23 = (__int128 *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), (float *)(a1 + 96));
      if (*(float *)(a2 - 8) > *(float *)(a1 + 120))
      {
        v24 = *(_QWORD *)(a1 + 112);
        v25 = *v23;
        v26 = *(_QWORD *)(a2 - 16);
        *v23 = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 112) = v26;
        *(_OWORD *)(a2 - 32) = v25;
        *(_QWORD *)(a2 - 16) = v24;
        LODWORD(v25) = *(_DWORD *)(a1 + 120);
        *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v25;
        v27 = *(float *)(a1 + 120);
        v28 = *(float *)(a1 + 88);
        if (v27 > v28)
        {
          v29 = *(_QWORD *)(a1 + 80);
          v30 = *v22;
          *v22 = *v23;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 112);
          *v23 = v30;
          *(_QWORD *)(a1 + 112) = v29;
          *(float *)(a1 + 88) = v27;
          v31 = *(float *)(a1 + 56);
          *(float *)(a1 + 120) = v28;
          if (v27 > v31)
          {
            v32 = *(_QWORD *)(a1 + 48);
            v33 = *v21;
            *v21 = *v22;
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 80);
            *v22 = v33;
            *(_QWORD *)(a1 + 80) = v32;
            *(float *)(a1 + 56) = v27;
            v34 = *(float *)(a1 + 24);
            *(float *)(a1 + 88) = v31;
            if (v27 > v34)
            {
              v35 = *(_QWORD *)(a1 + 16);
              v36 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v21;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 48);
              *v21 = v36;
              *(_QWORD *)(a1 + 48) = v35;
              *(float *)(a1 + 24) = v27;
              *(float *)(a1 + 56) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)(a1 + 32), (float *)(a1 + 64));
      v10 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)(v10 + 24);
    if (v13 > *(float *)(v9 + 24))
    {
      v14 = *(_QWORD *)v10;
      *(_QWORD *)v37 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)&v37[7] = *(_QWORD *)(v10 + 15);
      v15 = *(_BYTE *)(v10 + 23);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = 0;
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 96);
        if (*(char *)(a1 + v16 + 119) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 64);
        *(_QWORD *)(a1 + v16 + 112) = *(_QWORD *)(v17 + 80);
        *(_BYTE *)(v17 + 87) = 0;
        *(_BYTE *)(v17 + 64) = 0;
        *(_DWORD *)(v17 + 120) = *(_DWORD *)(v17 + 88);
        if (v16 == -64)
          break;
        v19 = *(float *)(a1 + v16 + 56);
        v16 -= 32;
        if (v13 <= v19)
        {
          v20 = a1 + v16 + 96;
          goto LABEL_14;
        }
      }
      v20 = a1;
LABEL_14:
      if (*(char *)(v20 + 23) < 0)
        operator delete(*(void **)v20);
      *(_QWORD *)v20 = v14;
      *(_QWORD *)(v20 + 8) = *(_QWORD *)v37;
      *(_QWORD *)(v20 + 15) = *(_QWORD *)&v37[7];
      *(_BYTE *)(v20 + 23) = v15;
      *(float *)(v20 + 24) = v13;
      if (++v12 == 8)
        return v10 + 32 == a2;
    }
    v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2)
      return 1;
  }
}

void ImageClassifier_getLabels(uint64_t *a1, void **a2, _QWORD *a3, unint64_t a4, float a5)
{
  void **v9;
  _OWORD *v10;
  float v11;
  unsigned __int8 *v12;
  float v13;
  void **v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  unint64_t v32;
  std::string v33;
  float v34;
  std::string v35;
  uint64_t v36;
  void **v37;
  unint64_t v38;
  void **v39[5];

  v36 = 0;
  v37 = 0;
  v38 = 0;
  if (a2)
  {
    v9 = a2;
    do
    {
      v10 = v9 + 2;
      if (*((char *)v9 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v9[2], (std::string::size_type)v9[3]);
      }
      else
      {
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *v10;
        v35.__r_.__value_.__r.__words[2] = (std::string::size_type)v9[4];
      }
      v11 = *((float *)v9 + 10);
      v12 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, (unsigned __int8 *)&v35);
      v13 = a5;
      if (v12)
      {
        v13 = a5;
        if (*((float *)v12 + 10) >= a5)
          v13 = *((float *)v12 + 10);
      }
      if (v11 >= v13)
      {
        if (*((char *)v9 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v9[2], (std::string::size_type)v9[3]);
          v11 = *((float *)v9 + 10);
        }
        else
        {
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *v10;
          v33.__r_.__value_.__r.__words[2] = (std::string::size_type)v9[4];
        }
        v34 = v11;
        v14 = v37;
        if ((unint64_t)v37 >= v38)
        {
          v16 = ((uint64_t)v37 - v36) >> 5;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 59)
            std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
          v18 = v38 - v36;
          if ((uint64_t)(v38 - v36) >> 4 > v17)
            v17 = v18 >> 4;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
            v19 = 0x7FFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          v39[4] = (void **)&v38;
          v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<vImage_Buffer>>(v19);
          v21 = &v20[4 * v16];
          v39[0] = v20;
          v39[1] = v21;
          v39[3] = &v20[4 * v22];
          *(std::string *)v21 = v33;
          memset(&v33, 0, sizeof(v33));
          *((float *)v21 + 6) = v11;
          v39[2] = v21 + 4;
          std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(&v36, v39);
          v15 = v37;
          std::__split_buffer<std::pair<std::string,float>>::~__split_buffer((uint64_t)v39);
        }
        else
        {
          *(_OWORD *)v37 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
          v14[2] = (void *)v33.__r_.__value_.__r.__words[2];
          *((float *)v14 + 6) = v11;
          v15 = v14 + 4;
        }
        v37 = v15;
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      v9 = (void **)*v9;
    }
    while (v9);
    v23 = v36;
    a2 = v37;
  }
  else
  {
    v23 = 0;
  }
  v24 = 126 - 2 * __clz(((uint64_t)a2 - v23) >> 5);
  if (a2 == (void **)v23)
    v25 = 0;
  else
    v25 = v24;
  std::__introsort<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(v23, a2, v25, 1);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v26 = v36;
  v27 = ((uint64_t)v37 - v36) >> 5;
  if (v27 >= a4)
    v27 = a4;
  if (v27)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    do
    {
      v31 = (__int128 *)(v26 + v28);
      if (v29 >= a1[2])
      {
        v29 = std::vector<std::pair<std::string,float>>::__push_back_slow_path<std::pair<std::string,float> const&>(a1, v31);
      }
      else
      {
        std::vector<std::pair<std::string,float>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,float> const&>((uint64_t)a1, v31);
        v29 += 32;
      }
      a1[1] = v29;
      ++v30;
      v26 = v36;
      v32 = ((uint64_t)v37 - v36) >> 5;
      if (v32 >= a4)
        v32 = a4;
      v28 += 32;
    }
    while (v30 < v32);
  }
  v39[0] = (void **)&v36;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100](v39);
}

void sub_1A13E9818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a21 < 0)
    operator delete(__p);
  a9 = &a23;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(uint64_t a1, void **a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  void **v21;
  float v22;
  void **v23;
  float v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  void **v31;
  __int128 v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  float v37;
  unint64_t v38;
  float v39;
  void **v40;
  void **v41;
  float v42;
  __int128 v43;
  float v44;
  float v45;
  void **v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *v51;
  __int128 v52;
  void *v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  __int128 v58;
  float v59;
  uint64_t v60;
  __int128 v61;
  float v62;
  void **v63;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  float v69;
  void *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  float v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  void *v92;
  char v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  float v104;
  void *v105;
  char v106;
  unint64_t v107;
  __int128 v108;
  uint64_t v110;
  void **v111;
  float v112;
  void *v113;
  char v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  float v118;
  float *v119;
  void *v120;
  _BYTE v121[15];
  _BYTE v122[15];
  _BYTE v123[15];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[15];
  _BYTE v129[15];
  _BYTE v130[15];
  _BYTE v131[15];
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  float v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  __int128 v30;
  float v31;
  uint64_t v32;
  __int128 v33;
  float v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[15];

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) > *(float *)(a1 + 24))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(_QWORD *)(a2 - 16) = v6;
        LODWORD(v7) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)(a1 + 32), (float *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), (float *)(a2 - 32));
      return 1;
    case 5:
      v21 = (__int128 *)(a1 + 32);
      v22 = (__int128 *)(a1 + 64);
      v23 = (__int128 *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), (float *)(a1 + 96));
      if (*(float *)(a2 - 8) > *(float *)(a1 + 120))
      {
        v24 = *(_QWORD *)(a1 + 112);
        v25 = *v23;
        v26 = *(_QWORD *)(a2 - 16);
        *v23 = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 112) = v26;
        *(_OWORD *)(a2 - 32) = v25;
        *(_QWORD *)(a2 - 16) = v24;
        LODWORD(v25) = *(_DWORD *)(a1 + 120);
        *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v25;
        v27 = *(float *)(a1 + 120);
        v28 = *(float *)(a1 + 88);
        if (v27 > v28)
        {
          v29 = *(_QWORD *)(a1 + 80);
          v30 = *v22;
          *v22 = *v23;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 112);
          *v23 = v30;
          *(_QWORD *)(a1 + 112) = v29;
          *(float *)(a1 + 88) = v27;
          v31 = *(float *)(a1 + 56);
          *(float *)(a1 + 120) = v28;
          if (v27 > v31)
          {
            v32 = *(_QWORD *)(a1 + 48);
            v33 = *v21;
            *v21 = *v22;
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 80);
            *v22 = v33;
            *(_QWORD *)(a1 + 80) = v32;
            *(float *)(a1 + 56) = v27;
            v34 = *(float *)(a1 + 24);
            *(float *)(a1 + 88) = v31;
            if (v27 > v34)
            {
              v35 = *(_QWORD *)(a1 + 16);
              v36 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v21;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 48);
              *v21 = v36;
              *(_QWORD *)(a1 + 48) = v35;
              *(float *)(a1 + 24) = v27;
              *(float *)(a1 + 56) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)(a1 + 32), (float *)(a1 + 64));
      v10 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)(v10 + 24);
    if (v13 > *(float *)(v9 + 24))
    {
      v14 = *(_QWORD *)v10;
      *(_QWORD *)v37 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)&v37[7] = *(_QWORD *)(v10 + 15);
      v15 = *(_BYTE *)(v10 + 23);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = 0;
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 96);
        if (*(char *)(a1 + v16 + 119) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 64);
        *(_QWORD *)(a1 + v16 + 112) = *(_QWORD *)(v17 + 80);
        *(_BYTE *)(v17 + 87) = 0;
        *(_BYTE *)(v17 + 64) = 0;
        *(_DWORD *)(v17 + 120) = *(_DWORD *)(v17 + 88);
        if (v16 == -64)
          break;
        v19 = *(float *)(a1 + v16 + 56);
        v16 -= 32;
        if (v13 <= v19)
        {
          v20 = a1 + v16 + 96;
          goto LABEL_14;
        }
      }
      v20 = a1;
LABEL_14:
      if (*(char *)(v20 + 23) < 0)
        operator delete(*(void **)v20);
      *(_QWORD *)v20 = v14;
      *(_QWORD *)(v20 + 8) = *(_QWORD *)v37;
      *(_QWORD *)(v20 + 15) = *(_QWORD *)&v37[7];
      *(_BYTE *)(v20 + 23) = v15;
      *(float *)(v20 + 24) = v13;
      if (++v12 == 8)
        return v10 + 32 == a2;
    }
    v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2)
      return 1;
  }
}

void ImageClassifier_getBatchCumulativeLabels(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unint64_t v15;
  float v16;
  float v17;
  char *v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  uint64_t v24;
  __int128 *v26;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v5 = *a2;
  v4 = a2[1];
  v24 = v4;
LABEL_2:
  if (v5 != v4)
  {
    v6 = *(uint64_t **)(v5 + 16);
    if (!v6)
      goto LABEL_29;
    while (1)
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v6 + 2));
      v8 = *(int8x8_t *)(a1 + 8);
      if (!*(_QWORD *)&v8)
        goto LABEL_20;
      v9 = v7;
      v10 = (uint8x8_t)vcnt_s8(v8);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = v10.u32[0];
      if (v10.u32[0] > 1uLL)
      {
        v12 = v7;
        if (v7 >= *(_QWORD *)&v8)
          v12 = v7 % *(_QWORD *)&v8;
      }
      else
      {
        v12 = (*(_QWORD *)&v8 - 1) & v7;
      }
      v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
      if (!v13 || (v14 = *v13) == 0)
      {
LABEL_20:
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(a1, (unsigned __int8 *)v6 + 16, (uint64_t)(v6 + 2));
        goto LABEL_21;
      }
      while (1)
      {
        v15 = *((_QWORD *)v14 + 1);
        if (v15 == v9)
          break;
        if (v11 > 1)
        {
          if (v15 >= *(_QWORD *)&v8)
            v15 %= *(_QWORD *)&v8;
        }
        else
        {
          v15 &= *(_QWORD *)&v8 - 1;
        }
        if (v15 != v12)
          goto LABEL_20;
LABEL_19:
        v14 = *(unsigned __int8 **)v14;
        if (!v14)
          goto LABEL_20;
      }
      if (!std::equal_to<std::string>::operator()[abi:ne180100](v14 + 16, (unsigned __int8 *)v6 + 16))
        goto LABEL_19;
      if (a3 == 2)
      {
        v26 = (__int128 *)(v6 + 2);
        v16 = *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)v6 + 16, &v26)+ 10);
        v17 = *((float *)v6 + 10);
        v26 = (__int128 *)(v6 + 2);
        v18 = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)v6 + 16, &v26);
        if (v16 >= v17)
          v19 = v16;
        else
          v19 = v17;
      }
      else
      {
        v20 = *((float *)v6 + 10);
        v26 = (__int128 *)(v6 + 2);
        v18 = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)v6 + 16, &v26);
        v19 = v20 + *((float *)v18 + 10);
      }
      *((float *)v18 + 10) = v19;
LABEL_21:
      v6 = (uint64_t *)*v6;
      if (!v6)
      {
LABEL_29:
        v5 += 40;
        v4 = v24;
        goto LABEL_2;
      }
    }
  }
  if (a3 == 1)
  {
    v21 = *(float **)(a1 + 16);
    if (v21)
    {
      v22 = (float)(0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
      do
      {
        v21[10] = v21[10] / v22;
        v21 = *(float **)v21;
      }
      while (v21);
    }
  }
}

void sub_1A13EA9D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void ImageClassifier_getLabelsAuto(uint64_t *a1, uint64_t *a2, float a3, float a4)
{
  uint64_t *v7;
  unint64_t v8;
  float v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  unint64_t v31;
  __int128 *v32;
  __int128 *v33;
  __int128 *v34;
  __int128 *v35;
  unint64_t v36;
  std::string v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void **v42[5];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (a2)
  {
    v7 = a2;
    v8 = 0;
    do
    {
      v9 = *((float *)v7 + 10);
      if (v9 >= a3)
      {
        if (*((char *)v7 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)v7[2], v7[3]);
          v9 = *((float *)v7 + 10);
          v8 = v40;
        }
        else
        {
          v37 = *(std::string *)(v7 + 2);
        }
        v38 = v9;
        if (v8 >= v41)
        {
          v11 = (uint64_t)(v8 - v39) >> 5;
          if ((unint64_t)(v11 + 1) >> 59)
            std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
          v12 = (uint64_t)(v41 - v39) >> 4;
          if (v12 <= v11 + 1)
            v12 = v11 + 1;
          if (v41 - v39 >= 0x7FFFFFFFFFFFFFE0)
            v13 = 0x7FFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          v42[4] = (void **)&v41;
          v14 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<vImage_Buffer>>(v13);
          v15 = &v14[4 * v11];
          v42[0] = v14;
          v42[1] = v15;
          v42[3] = &v14[4 * v16];
          *(std::string *)v15 = v37;
          memset(&v37, 0, sizeof(v37));
          *((float *)v15 + 6) = v9;
          v42[2] = v15 + 4;
          std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(&v39, v42);
          v8 = v40;
          std::__split_buffer<std::pair<std::string,float>>::~__split_buffer((uint64_t)v42);
        }
        else
        {
          v10 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
          *(_QWORD *)(v8 + 16) = *((_QWORD *)&v37.__r_.__value_.__l + 2);
          *(_OWORD *)v8 = v10;
          *(float *)(v8 + 24) = v9;
          v8 += 32;
        }
        v40 = v8;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    v17 = v39;
  }
  else
  {
    v8 = 0;
    v17 = 0;
  }
  v18 = 126 - 2 * __clz((uint64_t)(v8 - v17) >> 5);
  if (v8 == v17)
    v19 = 0;
  else
    v19 = v18;
  std::__introsort<std::_ClassicAlgPolicy,ImageClassifier_getLabels(std::unordered_map<std::string,float> const&,float,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(v17, (void **)v8, v19, 1);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v20 = v39;
  v21 = (uint64_t)(v40 - v39) >> 5;
  if (v21 >= 0x7FFFFFFF)
    v21 = 0x7FFFFFFFLL;
  if (v21)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = (__int128 *)(v20 + v22);
      if (v23 >= v36)
      {
        v23 = std::vector<std::pair<std::string,float>>::__push_back_slow_path<std::pair<std::string,float> const&>((uint64_t *)&v34, v25);
      }
      else
      {
        std::vector<std::pair<std::string,float>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,float> const&>((uint64_t)&v34, v25);
        v23 += 32;
      }
      v35 = (__int128 *)v23;
      ++v24;
      v20 = v39;
      v26 = (uint64_t)(v40 - v39) >> 5;
      if (v26 >= 0x7FFFFFFF)
        v26 = 0x7FFFFFFFLL;
      v22 += 32;
    }
    while (v24 < v26);
  }
  v42[0] = (void **)&v39;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100](v42);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v35 != v34)
  {
    v27 = std::vector<std::pair<std::string,float>>::__push_back_slow_path<std::pair<std::string,float> const&>(a1, v34);
    v28 = v34;
    v29 = v35;
    a1[1] = v27;
    if ((unint64_t)((char *)v29 - (char *)v28) >= 0x21)
    {
      v30 = 0;
      v31 = 1;
      do
      {
        v32 = &v28[v30];
        if ((float)(*((float *)v32 + 14) / *(float *)(*a1 + v30 * 16 + 24)) < a4)
          break;
        v33 = v32 + 2;
        if (v27 >= a1[2])
        {
          v27 = std::vector<std::pair<std::string,float>>::__push_back_slow_path<std::pair<std::string,float> const&>(a1, v33);
        }
        else
        {
          std::vector<std::pair<std::string,float>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,float> const&>((uint64_t)a1, v33);
          v27 += 32;
        }
        a1[1] = v27;
        ++v31;
        v28 = v34;
        v30 += 2;
      }
      while (v31 < ((char *)v35 - (char *)v34) >> 5);
    }
  }
  v42[0] = (void **)&v34;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100](v42);
}

void sub_1A13EACDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a10;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void ImageClassifier_getLabelsAuto(uint64_t *a1, void **a2, _QWORD *a3, float a4, float a5)
{
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 **v16;

  ImageClassifier_getLabels((uint64_t *)&v14, a2, a3, 0x7FFFFFFFuLL, a4);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v15 != v14)
  {
    v7 = std::vector<std::pair<std::string,float>>::__push_back_slow_path<std::pair<std::string,float> const&>(a1, v14);
    v8 = v14;
    v9 = v15;
    a1[1] = v7;
    if ((unint64_t)((char *)v9 - (char *)v8) >= 0x21)
    {
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = &v8[v10];
        if ((float)(*((float *)v12 + 14) / *(float *)(*a1 + v10 * 16 + 24)) < a5)
          break;
        v13 = v12 + 2;
        if (v7 >= a1[2])
        {
          v7 = std::vector<std::pair<std::string,float>>::__push_back_slow_path<std::pair<std::string,float> const&>(a1, v13);
        }
        else
        {
          std::vector<std::pair<std::string,float>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,float> const&>((uint64_t)a1, v13);
          v7 += 32;
        }
        a1[1] = v7;
        ++v11;
        v8 = v14;
        v10 += 2;
      }
      while (v11 < ((char *)v15 - (char *)v14) >> 5);
    }
  }
  v16 = &v14;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_1A13EAE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1A13EAFB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13EB1C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13EB2C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13EB438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13EB5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EB6F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EB824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EB950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EBA7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EBE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  vision::mod::RPNTrackerOptions::~RPNTrackerOptions((id *)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<vision::mod::ObjectTrackerAbstract>::reset[abi:ne180100]<vision::mod::ObjectTrackerAbstract,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E453BED0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A13EBF0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void vision::mod::RPNTrackerOptions::~RPNTrackerOptions(id *this)
{

}

void std::__shared_ptr_pointer<vision::mod::ObjectTrackerAbstract *,std::shared_ptr<vision::mod::ObjectTrackerAbstract>::__shared_ptr_default_delete<vision::mod::ObjectTrackerAbstract,vision::mod::ObjectTrackerAbstract>,std::allocator<vision::mod::ObjectTrackerAbstract>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_pointer<vision::mod::ObjectTrackerAbstract *,std::shared_ptr<vision::mod::ObjectTrackerAbstract>::__shared_ptr_default_delete<vision::mod::ObjectTrackerAbstract,vision::mod::ObjectTrackerAbstract>,std::allocator<vision::mod::ObjectTrackerAbstract>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<vision::mod::ObjectTrackerAbstract *,std::shared_ptr<vision::mod::ObjectTrackerAbstract>::__shared_ptr_default_delete<vision::mod::ObjectTrackerAbstract,vision::mod::ObjectTrackerAbstract>,std::allocator<vision::mod::ObjectTrackerAbstract>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN6vision3mod21ObjectTrackerAbstractEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1A13EC2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13EC344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13EC460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13EC54C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vision::mod::ObjectDetector_DCNFaceDetector_v2::~ObjectDetector_DCNFaceDetector_v2(void **this)
{
  vision::mod::ObjectDetector_DCNFaceDetector_v2::~ObjectDetector_DCNFaceDetector_v2(this);
  JUMPOUT(0x1A1B0A898);
}

{
  *this = &off_1E453ADF8;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)(this + 14));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);

}

void vision::mod::ObjectDetector_DCNFaceDetector_v2::getLabels(std::string **a1@<X8>)
{
  std::string *v3;
  void *__p[2];
  char v5;
  __int128 v6;

  *(_QWORD *)&v6 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "face");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = (std::string *)operator new(0x18uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 1;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 2), (__int128 *)__p, &v6, v3);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1A13EC65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 8) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float vision::mod::ObjectDetector_DCNFaceDetector_v2::getSuggestedImageSize(vision::mod::ObjectDetector_DCNFaceDetector_v2 *this, _Geometry2D_size2D_ *a2)
{
  float height;
  float width;
  float v4;
  float v5;
  float v6;
  _QWORD *exception;

  height = a2->height;
  width = a2->width;
  if (width >= a2->height)
    v4 = a2->height;
  else
    v4 = a2->width;
  if (height >= width)
    v5 = a2->height;
  else
    v5 = a2->width;
  if (v4 == 0.0 || v5 == 0.0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 5998;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  if ((float)(v5 / v4) >= 1.3326)
    v6 = 597.0 / v5;
  else
    v6 = 448.0 / v4;
  return roundf(height * v6);
}

uint64_t vision::mod::ObjectDetectorAbstract::getRequiredImageType(vision::mod::ObjectDetectorAbstract *this)
{
  return 0;
}

void vision::mod::ObjectDetectorAbstract::detectObjectsInImage_RGBA8888(_QWORD *a1@<X8>)
{
  _QWORD *exception;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  exception = __cxa_allocate_exception(8uLL);
  *exception = 6015;
  __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
}

void sub_1A13EC774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void vision::mod::ObjectDetector_DCNFaceDetector_v2::detectObjectsInImage_BGRA8888(vision::mod::ObjectDetector_DCNFaceDetector_v2 *this@<X0>, const vImage_Buffer *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t *v5;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(__n128 *, __n128 *);
  void (*v11)(uint64_t);
  const char *v12;
  _QWORD v13[3];
  void **v14;

  v7 = 0;
  v8 = &v7;
  v9 = 0x4812000000;
  v10 = __Block_byref_object_copy__4901;
  v11 = __Block_byref_object_dispose__4902;
  v12 = "";
  memset(v13, 0, sizeof(v13));
  v4 = *(void **)(*((_QWORD *)this + 14) + 8);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN6vision3mod33ObjectDetector_DCNFaceDetector_v229detectObjectsInImage_BGRA8888ERK13vImage_Buffer_block_invoke;
  v6[3] = &unk_1E4543DC0;
  v6[4] = &v7;
  v6[5] = this;
  v6[6] = a2;
  vision::mod::dispatch_sync_guard(v4, v6);
  v5 = v8;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::vector<vision::mod::DetectedObject>::__init_with_size[abi:ne180100]<vision::mod::DetectedObject*,vision::mod::DetectedObject*>(a3, v5[6], v5[7], 0xCCCCCCCCCCCCCCCDLL * ((v5[7] - v5[6]) >> 4));
  _Block_object_dispose(&v7, 8);
  v14 = (void **)v13;
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_1A13EC878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v10 - 24) = v9;
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

void vision::mod::ObjectDetectorAbstract::detectObjectsInImage_Planar8(_QWORD *a1@<X8>)
{
  _QWORD *exception;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  exception = __cxa_allocate_exception(8uLL);
  *exception = 6015;
  __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
}

void sub_1A13EC8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void vision::mod::ObjectDetectorAbstract::detectObjectsInImages_RGBA8888(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v7[3];
  void **v8;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(v7, a1, v3);
      std::vector<std::vector<vision::mod::DetectedObject>>::push_back[abi:ne180100]((void ***)a3, (uint64_t)v7);
      v8 = (void **)v7;
      std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v8);
      v3 += 32;
    }
    while (v3 != v4);
  }
}

void sub_1A13EC980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::vector<vision::mod::DetectedObject>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void vision::mod::ObjectDetector_DCNFaceDetector_v2::detectObjectsInImages_BGRA8888(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __n128 (*v25)(__n128 *, __n128 *);
  void (*v26)(uint64_t);
  const char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  char **v33;
  _QWORD *v34;
  _QWORD *v35;
  char v36;
  _QWORD *v37;
  _QWORD *v38;

  v22 = 0;
  v23 = &v22;
  v24 = 0x4812000000;
  v25 = __Block_byref_object_copy__7;
  v26 = __Block_byref_object_dispose__8;
  v7 = *a2;
  v6 = a2[1];
  v27 = "";
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v33 = &v28;
  LOBYTE(v34) = 0;
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v9 = v8 >> 5;
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v8 >> 5);
    v28 = v10;
    v30 = &v10[24 * v11];
    v12 = 24 * ((24 * v9 - 24) / 0x18uLL) + 24;
    bzero(v10, v12);
    v29 = &v10[v12];
  }
  v13 = *(void **)(*(_QWORD *)(a1 + 112) + 8);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = ___ZN6vision3mod33ObjectDetector_DCNFaceDetector_v230detectObjectsInImages_BGRA8888ERKNSt3__16vectorI13vImage_BufferNS2_9allocatorIS4_EEEE_block_invoke;
  v21[3] = &unk_1E4543DC0;
  v21[5] = a1;
  v21[6] = a2;
  v21[4] = &v22;
  vision::mod::dispatch_sync_guard(v13, v21);
  v14 = v23;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v15 = (uint64_t *)v14[6];
  v16 = (uint64_t *)v14[7];
  v31 = a3;
  v32 = 0;
  if (v16 != v15)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * (v16 - v15);
    if (v17 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v17);
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v18;
    *(_QWORD *)(a3 + 16) = &v18[3 * v19];
    v37 = v18;
    v38 = v18;
    v33 = (char **)(a3 + 16);
    v34 = &v37;
    v35 = &v38;
    v36 = 0;
    v20 = v18;
    do
    {
      *v20 = 0;
      v20[1] = 0;
      v20[2] = 0;
      std::vector<vision::mod::DetectedObject>::__init_with_size[abi:ne180100]<vision::mod::DetectedObject*,vision::mod::DetectedObject*>(v20, *v15, v15[1], 0xCCCCCCCCCCCCCCCDLL * ((v15[1] - *v15) >> 4));
      v20 = v38 + 3;
      v38 += 3;
      v15 += 3;
    }
    while (v15 != v16);
    v36 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<vision::mod::DetectedObject>>,std::vector<vision::mod::DetectedObject>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v33);
    *(_QWORD *)(a3 + 8) = v20;
  }
  _Block_object_dispose(&v22, 8);
  v33 = &v28;
  std::vector<std::vector<vision::mod::DetectedObject>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1A13ECBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v9 - 112) = v8;
  std::vector<std::vector<vision::mod::DetectedObject>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 112));
  _Unwind_Resume(a1);
}

void vision::mod::ObjectDetectorAbstract::detectObjectsInImages_Planar8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v7[3];
  void **v8;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(v7, a1, v3);
      std::vector<std::vector<vision::mod::DetectedObject>>::push_back[abi:ne180100]((void ***)a3, (uint64_t)v7);
      v8 = (void **)v7;
      std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v8);
      v3 += 32;
    }
    while (v3 != v4);
  }
}

void sub_1A13ECCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::vector<vision::mod::DetectedObject>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::ObjectDetectorAbstract::wipeLayersMemory(vision::mod::ObjectDetectorAbstract *this)
{
  return 6015;
}

uint64_t vision::mod::ObjectDetectorAbstract::setPriority(vision::mod::ObjectDetectorAbstract *this)
{
  return 6015;
}

void std::vector<std::vector<vision::mod::DetectedObject>>::push_back[abi:ne180100](void ***a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  __int128 v17;
  void **v18;
  void **v19;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v10);
    v12 = &v11[24 * v7];
    v14 = (void **)&v11[24 * v13];
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = 0;
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = (void **)(v12 + 24);
    v15 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v14;
    }
    else
    {
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        v12 -= 24;
        *((_QWORD *)v12 + 2) = 0;
        v17 = *(_OWORD *)(v16 - 3);
        v16 -= 3;
        *(_OWORD *)v12 = v17;
        *((_QWORD *)v12 + 2) = v16[2];
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
      }
      while (v16 != v15);
      v16 = *a1;
      v18 = a1[1];
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v14;
      while (v18 != v16)
      {
        v18 -= 3;
        v19 = v18;
        std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
    }
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(void **)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = v4 + 3;
  }
  a1[1] = v6;
}

void std::vector<std::vector<vision::mod::DetectedObject>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::vector<vision::mod::DetectedObject>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN6vision3mod33ObjectDetector_DCNFaceDetector_v230detectObjectsInImages_BGRA8888ERKNSt3__16vectorI13vImage_BufferNS2_9allocatorIS4_EEEE_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  _OWORD *v27;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  void **v32;

  v1 = a1[6];
  v2 = *(_OWORD **)v1;
  v27 = *(_OWORD **)(v1 + 8);
  if (*(_OWORD **)v1 != v27)
  {
    v3 = 0;
    v4 = a1[5];
    do
    {
      v5 = v2[1];
      v31[0] = *v2;
      v31[1] = v5;
      vision::mod::ObjectDetector_DCNFaceDetector_v2::priv::detectFacesInImageBufferInternal((vision::mod::ObjectDetector_DCNFaceDetector_v2::priv *)&v29, *(vImage_Buffer **)(*(_QWORD *)(v4 + 112) + 96), (uint64_t)v31, *(unsigned __int8 *)(v4 + 104), *(float *)(*(_QWORD *)(v4 + 112) + 84));
      v6 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48);
      v7 = (uint64_t *)(v6 + 24 * v3);
      if (v7 != &v29)
      {
        v9 = v29;
        v8 = v30;
        v10 = v6 + 24 * v3;
        v12 = *(_QWORD *)(v10 + 16);
        v11 = (_QWORD *)(v10 + 16);
        v13 = 0xCCCCCCCCCCCCCCCDLL * ((v30 - v29) >> 4);
        v14 = *v7;
        if (0xCCCCCCCCCCCCCCCDLL * ((v12 - *v7) >> 4) >= v13)
        {
          v21 = v6 + 24 * v3;
          v22 = *(_QWORD *)(v21 + 8);
          v18 = (uint64_t *)(v21 + 8);
          v23 = 0xCCCCCCCCCCCCCCCDLL * ((v22 - v14) >> 4);
          if (v23 >= v13)
          {
            v25 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vision::mod::DetectedObject *,vision::mod::DetectedObject *,vision::mod::DetectedObject *,0>(v29, v30, v14);
            for (i = *v18; i != v25; i -= 80)
            {
              if (*(char *)(i - 57) < 0)
                operator delete(*(void **)(i - 80));
            }
            *v18 = v25;
            goto LABEL_21;
          }
          v24 = v29 + 80 * v23;
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vision::mod::DetectedObject *,vision::mod::DetectedObject *,vision::mod::DetectedObject *,0>(v29, v24, v14);
          v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vision::mod::DetectedObject>,vision::mod::DetectedObject*,vision::mod::DetectedObject*,vision::mod::DetectedObject*>((uint64_t)v11, v24, v8, *v18);
        }
        else
        {
          std::vector<vision::mod::DetectedObject>::__vdeallocate(v7);
          if (v13 > 0x333333333333333)
            std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
          v15 = 0x999999999999999ALL * ((*v11 - *v7) >> 4);
          if (v15 <= v13)
            v15 = v13;
          if (0xCCCCCCCCCCCCCCCDLL * ((*v11 - *v7) >> 4) >= 0x199999999999999)
            v16 = 0x333333333333333;
          else
            v16 = v15;
          std::vector<vision::mod::DetectedObject>::__vallocate[abi:ne180100](v7, v16);
          v17 = v6 + 24 * v3;
          v19 = *(_QWORD *)(v17 + 8);
          v18 = (uint64_t *)(v17 + 8);
          v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vision::mod::DetectedObject>,vision::mod::DetectedObject*,vision::mod::DetectedObject*,vision::mod::DetectedObject*>((uint64_t)v11, v9, v8, v19);
        }
        *v18 = v20;
      }
LABEL_21:
      ++v3;
      v32 = (void **)&v29;
      std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v32);
      v2 += 2;
    }
    while (v2 != v27);
  }
}

void sub_1A13ED130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  uint64_t v20;
  _QWORD *v21;

  *v21 = v20;
  a20 = (void **)&a12;
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void vision::mod::dispatch_sync_guard(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;
  void *exception;
  void *v7;
  _QWORD block[4];
  id v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void (*v19)();
  void (*v20)();
  const char *v21;
  _BYTE v22[16];

  v3 = a1;
  v4 = a2;
  v16 = 0;
  v17 = &v16;
  v18 = 0x4012000000;
  v19 = __Block_byref_object_copy__12;
  v20 = __Block_byref_object_dispose__13;
  v21 = "";
  MEMORY[0x1A1B0A5BC](v22, "Unspecified error");
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6vision3modL19dispatch_sync_guardEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E4543DE8;
  v5 = v4;
  v9 = v5;
  v10 = &v12;
  v11 = &v16;
  dispatch_sync(v3, block);
  if (*((_BYTE *)v13 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v7 = (void *)MEMORY[0x1A1B0A5C8](exception, v17 + 6);
    __cxa_throw(v7, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }

  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  MEMORY[0x1A1B0A5D4](v22);

}

void sub_1A13ED2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  MEMORY[0x1A1B0A5D4](v11);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<vision::mod::DetectedObject>::__init_with_size[abi:ne180100]<vision::mod::DetectedObject*,vision::mod::DetectedObject*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<vision::mod::DetectedObject>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vision::mod::DetectedObject>,vision::mod::DetectedObject*,vision::mod::DetectedObject*,vision::mod::DetectedObject*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1A13ED364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<vision::mod::DetectedObject>>,std::vector<vision::mod::DetectedObject>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 16);
    v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      v5 = v3;
      std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

char *std::vector<vision::mod::DetectedObject>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DetectedObject>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vision::mod::DetectedObject>,vision::mod::DetectedObject*,vision::mod::DetectedObject*,vision::mod::DetectedObject*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      vision::mod::DetectedObject::DetectedObject(v4, v6);
      v6 += 80;
      v4 = v11 + 80;
      v11 += 80;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vision::mod::DetectedObject>,vision::mod::DetectedObject*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1A13ED4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vision::mod::DetectedObject>,vision::mod::DetectedObject*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vision::mod::DetectedObject>,vision::mod::DetectedObject*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 57) < 0)
        operator delete(*(void **)(v3 - 80));
      v3 -= 80;
    }
  }
  return a1;
}

void __Block_byref_object_copy__12()
{
  JUMPOUT(0x1A1B0A5C8);
}

void __Block_byref_object_dispose__13()
{
  JUMPOUT(0x1A1B0A5D4);
}

uint64_t ___ZN6vision3modL19dispatch_sync_guardEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1A13ED568(void *a1, int a2)
{
  uint64_t v2;
  const std::runtime_error *v4;

  v4 = (const std::runtime_error *)__cxa_begin_catch(a1);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = 1;
  if (a2 == 2)
    std::runtime_error::operator=((std::runtime_error *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) + 48), v4);
  __cxa_end_catch();
}

void vision::mod::ObjectDetector_DCNFaceDetector_v2::priv::detectFacesInImageBufferInternal(vision::mod::ObjectDetector_DCNFaceDetector_v2::priv *this, vImage_Buffer *a2, uint64_t a3, int a4, float a5)
{
  vision::mod::ObjectDetector_DCNFaceDetector_v2::priv *v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  float v11;
  float v12;
  double v13;
  double v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *__p[2];
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  char v52;
  int v53;
  _BYTE v54[128];
  uint64_t v55;

  v7 = this;
  v55 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v9 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(a3 + 16);
  -[vImage_Buffer detect:inputIsBGR:](a2, "detect:inputIsBGR:");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (float)v8;
  v12 = (float)v9;
  *(float *)&v13 = (float)v9;
  *(float *)&v14 = (float)v8;
  -[vImage_Buffer processBoxes:withHeight:andWidth:](a2, "processBoxes:withHeight:andWidth:", v10, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v16 = v15;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
  if (v17)
  {
    v18 = *(_QWORD *)v42;
    v19 = vdup_n_s32(0x7FC00000u);
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v42 != v18)
          objc_enumerationMutation(v16);
        v21 = (uint64_t *)v7;
        v22 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * v20);
        std::string::basic_string[abi:ne180100]<0>(__p, "unknown");
        v47 = (unint64_t)v19;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        objc_msgSend(v22, "bounds");
        *(float *)&v23 = v23;
        *(float *)&v24 = v24;
        v47 = __PAIR64__(LODWORD(v24), LODWORD(v23));
        *(float *)&v23 = v25;
        *(float *)&v24 = v26;
        v48 = __PAIR64__(LODWORD(v23), LODWORD(v24));
        objc_msgSend(v22, "confidence");
        v53 = v27;
        objc_msgSend(v22, "rotationAngle");
        LODWORD(v49) = v28;
        LOBYTE(v50) = 1;
        objc_msgSend(v22, "yawAngle");
        HIDWORD(v49) = v29;
        HIBYTE(v50) = 1;
        if (v46 < 0)
        {
          __p[1] = (void *)4;
          v30 = (char *)__p[0];
        }
        else
        {
          v46 = 4;
          v30 = (char *)__p;
        }
        strcpy(v30, "face");
        v7 = (vision::mod::ObjectDetector_DCNFaceDetector_v2::priv *)v21;
        if ((float)((float)(*(float *)&v47 + *((float *)&v48 + 1)) - v11) <= (float)(*((float *)&v48 + 1) * a5)
          && (float)(*(float *)&v48 * a5) >= (float)-*((float *)&v47 + 1)
          && (float)(*((float *)&v48 + 1) * a5) >= (float)-*(float *)&v47
          && (float)((float)(*((float *)&v47 + 1) + *(float *)&v48) - v12) <= (float)(*(float *)&v48 * a5))
        {
          if ((float)(*(float *)&v47 + *((float *)&v48 + 1)) <= v11)
            v31 = 0.0;
          else
            v31 = (float)(*(float *)&v47 + *((float *)&v48 + 1)) - v11;
          if (*(float *)&v47 < 0.0)
            v31 = *(float *)&v47;
          if ((float)(*((float *)&v47 + 1) + *(float *)&v48) > v12)
            v32 = (float)(*((float *)&v47 + 1) + *(float *)&v48) - v12;
          else
            v32 = 0.0;
          if (*((float *)&v47 + 1) < 0.0)
            v32 = *((float *)&v47 + 1);
          v33 = *(float *)&v47 - v31;
          v34 = *((float *)&v47 + 1) - v32;
          *(float *)&v47 = v33;
          *((float *)&v47 + 1) = *((float *)&v47 + 1) - v32;
          if ((float)(*((float *)&v48 + 1) + v33) <= v11
            && v34 >= 0.0
            && v33 >= 0.0
            && (float)(*(float *)&v48 + v34) <= v12)
          {
            if (a4)
              *((float *)&v47 + 1) = (float)((float)*(unint64_t *)(a3 + 8) - v34) - *(float *)&v48;
            v36 = v21[1];
            if (v36 >= v21[2])
            {
              v37 = std::vector<vision::mod::DetectedObject>::__push_back_slow_path<vision::mod::DetectedObject const&>(v21, (uint64_t)__p);
              v7 = (vision::mod::ObjectDetector_DCNFaceDetector_v2::priv *)v21;
            }
            else
            {
              vision::mod::DetectedObject::DetectedObject(v36, (uint64_t)__p);
              v37 = v36 + 80;
              v7 = (vision::mod::ObjectDetector_DCNFaceDetector_v2::priv *)v21;
              v21[1] = v37;
            }
            *((_QWORD *)v7 + 1) = v37;
          }
        }
        if (v46 < 0)
          operator delete(__p[0]);
        ++v20;
      }
      while (v17 != v20);
      v38 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
      v17 = v38;
    }
    while (v38);
  }

}

void sub_1A13ED8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vision::mod::DetectedObject *,vision::mod::DetectedObject *,vision::mod::DetectedObject *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      if (a1 != a3)
      {
        v7 = a3 + v6;
        *(_OWORD *)(a3 + v6 + 64) = *(_OWORD *)(a1 + v6 + 64);
        std::string::operator=((std::string *)(a3 + v6), (const std::string *)(a1 + v6));
        *(_OWORD *)(v7 + 24) = *(_OWORD *)(a1 + v6 + 24);
        *(_BYTE *)(v7 + 48) = *(_BYTE *)(a1 + v6 + 48);
        *(_QWORD *)(v7 + 40) = *(_QWORD *)(a1 + v6 + 40);
        *(_BYTE *)(v7 + 49) = *(_BYTE *)(a1 + v6 + 49);
        *(_BYTE *)(v7 + 56) = *(_BYTE *)(a1 + v6 + 56);
        *(_DWORD *)(v7 + 52) = *(_DWORD *)(a1 + v6 + 52);
        *(_DWORD *)(v7 + 60) = *(_DWORD *)(a1 + v6 + 60);
      }
      v6 += 80;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void std::vector<vision::mod::DetectedObject>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<vision::mod::DetectedObject>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__n128 __Block_byref_object_copy__4901(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__4902(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN6vision3mod33ObjectDetector_DCNFaceDetector_v229detectObjectsInImage_BGRA8888ERK13vImage_Buffer_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void **v5;

  vision::mod::ObjectDetector_DCNFaceDetector_v2::priv::detectFacesInImageBufferInternal((vision::mod::ObjectDetector_DCNFaceDetector_v2::priv *)&v3, *(vImage_Buffer **)(*(_QWORD *)(a1[5] + 112) + 96), a1[6], *(unsigned __int8 *)(a1[5] + 104), *(float *)(*(_QWORD *)(a1[5] + 112) + 84));
  v2 = *(_QWORD *)(a1[4] + 8);
  std::vector<vision::mod::DetectedObject>::__vdeallocate((uint64_t *)(v2 + 48));
  *(_OWORD *)(v2 + 48) = v3;
  *(_QWORD *)(v2 + 64) = v4;
  v4 = 0;
  v3 = 0uLL;
  v5 = (void **)&v3;
  std::vector<vision::mod::DetectedObject>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void ___ZN6vision3mod33ObjectDetector_DCNFaceDetector_v2C2ERKNS0_41ObjectDetector_DCNFaceDetector_v2_OptionsE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  double v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (_QWORD *)(v2 + 32);
  if (*(char *)(v2 + 55) < 0)
    v3 = (_QWORD *)*v3;
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (_QWORD *)(v8 + 56);
  if ((*(char *)(v8 + 79) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v8 + 79))
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_QWORD *)(v8 + 64))
  {
    v9 = (_QWORD *)*v9;
LABEL_8:
    objc_msgSend(v5, "stringByAppendingFormat:", CFSTR(":%s"), v9);
    v10 = objc_claimAutoreleasedReturnValue();

    v8 = *(_QWORD *)(a1 + 40);
    v7 = (void *)v10;
  }
LABEL_9:
  LODWORD(v6) = *(_DWORD *)v8;
  v11 = *(_DWORD *)(v8 + 4);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v12;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v14) = v11;
  +[VNShotflowDetector processingDeviceDetectorWithModelPath:networkThreshold:filterThresholds:preferredDeviceID:engineID:storageType:](VNShotflowDetectorANFDv1, "processingDeviceDetectorWithModelPath:networkThreshold:filterThresholds:preferredDeviceID:engineID:storageType:", v7, v13, *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 24), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 28), v14);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = *(_QWORD *)(v4 + 112);
  v17 = *(void **)(v16 + 96);
  *(_QWORD *)(v16 + 96) = v15;

}

void sub_1A13EDCC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<vision::mod::ObjectDetector_DCNFaceDetector_v2::priv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BB18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ObjectDetector_DCNFaceDetector_v2::priv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BB18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::ObjectDetector_DCNFaceDetector_v2::priv>::__on_zero_shared(uint64_t a1)
{

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));

}

void sub_1A13EE4B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13EE5C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EE704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EEC10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1A13EEE40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13EEF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13EF10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EF1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EF2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13EF354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13EF408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1A13EF5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1A13EF668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EF798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5036(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5037(uint64_t a1)
{

}

void ___ZL39_writeVersion1PersonAndFaceObservationsPU44objcproto9NSCopying8NSObject14NSSecureCoding11objc_objectP7NSArrayIP17VNFaceObservationEP14NSOutputStreamP14CC_MD5state_stPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  id obj;

  v6 = a2;
  v7 = (void *)MEMORY[0x1A1B0B060]();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v8 + 40);
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v6, 1, &obj);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v8 + 40), obj);
  if (v9)
  {
    v10 = objc_msgSend(v9, "length");
    objc_msgSend(*(id *)(a1 + 32), "appendBytes:length:", &v10, 4);
    objc_msgSend(*(id *)(a1 + 32), "appendData:", v9);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    *a4 = 1;
  }

  objc_autoreleasePoolPop(v7);
}

void sub_1A13EF8B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13EFABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A13EFC28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13EFD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13EFD98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EFECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13EFF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13F0094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F022C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F02E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F03D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F0430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F04B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F0578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1A13F0804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A13F09B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13F0A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F0AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13F0B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A13F0C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F0D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A13F0EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F0F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13F10A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F112C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F12F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F1484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13F16B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A13F1880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13F1A48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13F1B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F1C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5258(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__107(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__108(uint64_t a1)
{

}

void sub_1A13F1DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A13F1EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F1F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F2054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F2168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F224C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F231C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F2400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F261C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13F2734(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F27DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F2854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F2A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _getObjectFromOptionsDictionary(_QWORD *a1, void *a2, void *a3, int a4, objc_class *a5, uint64_t a6)
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  objc_class *v17;
  void *v18;
  void *v19;
  void *v20;

  v11 = a2;
  v12 = a3;
  objc_msgSend(v11, "objectForKey:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (a1)
    *a1 = objc_retainAutorelease(v13);
  if (v14)
  {
    if (a5 && (objc_opt_isKindOfClass() & 1) == 0)
    {
      if (a6)
      {
        v15 = objc_alloc(MEMORY[0x1E0CB3940]);
        NSStringFromClass(a5);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = (objc_class *)objc_opt_class();
        NSStringFromClass(v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = (void *)objc_msgSend(v15, "initWithFormat:", CFSTR("The %@ option was expected to be a %@, but was instead a %@ (%@)"), v12, v16, v18, v14);

        +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", 5, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
        *(_QWORD *)a6 = v20;

        a6 = 0;
        goto LABEL_13;
      }
      goto LABEL_13;
    }
LABEL_12:
    a6 = 1;
    goto LABEL_13;
  }
  if (!a4)
    goto LABEL_12;
  if (a6)
  {
    v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("The %@ required option was not found"), v12);
    +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", 7, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
LABEL_13:

  return a6;
}

{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  objc_class *v17;
  void *v18;
  void *v19;
  void *v20;

  v11 = a2;
  v12 = a3;
  objc_msgSend(v11, "objectForKey:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (a1)
    *a1 = objc_retainAutorelease(v13);
  if (v14)
  {
    if (a5 && (objc_opt_isKindOfClass() & 1) == 0)
    {
      if (a6)
      {
        v15 = (void *)MEMORY[0x1E0CB3940];
        NSStringFromClass(a5);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = (objc_class *)objc_opt_class();
        NSStringFromClass(v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "stringWithFormat:", CFSTR("The %@ option was expected to be a %@, but was instead a %@ (%@)"), v12, v16, v18, v14);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", 5, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
        *(_QWORD *)a6 = v20;

        a6 = 0;
        goto LABEL_13;
      }
      goto LABEL_13;
    }
LABEL_12:
    a6 = 1;
    goto LABEL_13;
  }
  if (!a4)
    goto LABEL_12;
  if (a6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("The %@ required option was not found"), v12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", 7, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
LABEL_13:

  return a6;
}

void sub_1A13F2C08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13F2CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13F2F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F3190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F3218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13F32B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F33C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F34B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F3550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F3620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F37A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13F3884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13F399C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13F3A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL VNRequestRevisionIsPrivate(unint64_t a1)
{
  return a1 > 0xDECAEFFF;
}

void sub_1A13F3B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F3D50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A13F4064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F40C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F4114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13F439C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13F4484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F4514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F45E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13F47C0(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A13F47D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A13F4874(void *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A13F489C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1A13F48FC(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A13F4910(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A13F4AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F4B8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F4E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A13F4F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F4FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F52B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  if (v11)

  _Unwind_Resume(a1);
}

void sub_1A13F5478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13F5554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A13F5784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13F5C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A13F5EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F5F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F69E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  void *v32;
  uint64_t v33;
  void *v35;

  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  v35 = *(void **)(v33 - 120);
  if (v35)
  {
    *(_QWORD *)(v33 - 112) = v35;
    operator delete(v35);
  }
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a27);
  if (a18 < 0)
    operator delete(a13);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

void sub_1A13F6CE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13F74B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v21;
  va_list va;

  va_start(va, a13);

  v21 = *(void **)(v19 - 208);
  if (v21)
  {
    *(_QWORD *)(v19 - 200) = v21;
    operator delete(v21);
  }
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1A13F77E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13F7918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorProcessorAbstract::computeDescriptorForImage(vision::mod::ImageDescriptorProcessorAbstract *this, __CVBuffer *a2, vision::mod::ImageDescriptorBufferAbstract *a3)
{
  syslog(5, "ERROR: This descriptor processor does not know how to handle CVPixelBuffers", a3);
  return 3711;
}

uint64_t vision::mod::ImageDescriptorProcessorAbstract::computeDescriptorForImage(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t (*v3)(void);

  if (!a3)
    return 3708;
  if ((a3 & (a3 - 1)) == 0)
  {
    switch(a3)
    {
      case 4:
        v3 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 24);
        return v3();
      case 2:
        v3 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 16);
        return v3();
      case 1:
        v3 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 32);
        return v3();
    }
    return 3708;
  }
  syslog(5, "ERROR: this function can handle only one image type");
  return 3710;
}

uint64_t vision::mod::ImageDescriptorProcessorAbstract::computeDescriptorsForImages(_QWORD *a1, uint64_t a2, int a3, void *a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a4;
  if (a3)
  {
    if ((a3 & (a3 - 1)) != 0)
    {
      syslog(5, "ERROR: this function can handle only one image type");
      v11 = 3710;
      goto LABEL_12;
    }
    switch(a3)
    {
      case 1:
        v10 = 11;
        goto LABEL_11;
      case 4:
        v10 = 10;
        goto LABEL_11;
      case 2:
        v10 = 9;
LABEL_11:
        v11 = (*(uint64_t (**)(_QWORD *, uint64_t, id, uint64_t))(*a1 + 8 * v10))(a1, a2, v9, a5);
        goto LABEL_12;
    }
  }
  v11 = 3708;
LABEL_12:

  return v11;
}

void sub_1A13F7B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorProcessorAbstract::computeDescriptorsForAugmentedImages(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, void *a5, uint64_t a6)
{
  id v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[3];
  uint64_t v18;
  std::__shared_weak_count *v19;

  v11 = a5;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(&v18, a1);
  v12 = vision::mod::ImageDescriptorAugmenterAbstract::augment(a4, *a2, a2[1], a3);
  if ((v12 & 0x80) != 0)
  {
    vision::mod::ImageDescriptorAugmenterAbstract::getAugmentedImages((vision::mod::ImageDescriptorAugmenterAbstract *)__p, (uint64_t)a4);
    v12 = (*(uint64_t (**)(uint64_t, void **, uint64_t, id, uint64_t))(*(_QWORD *)a1 + 96))(a1, __p, a3, v11, v18);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v12 & 0x80) != 0)
      v12 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a4 + 24))(a4, v18, a6);
  }
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  return v12;
}

void sub_1A13F7C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

BOOL prune(float *a1, uint64_t a2, float a3, float a4)
{
  float v6;
  signed int v7;
  float v8;
  float v10;
  int v11;
  __float2 v12;
  float v13;
  __float2 v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;

  if (!*(_BYTE *)a2)
    return 0;
  v6 = *(float *)(a2 + 4);
  if (a3 != a4)
  {
    v10 = *(float *)(a2 + 8);
    v11 = *(_DWORD *)(a2 + 12);
    v12 = __sincosf_stret(a3 * 0.017453);
    v13 = atan2f(v12.__sinval * v10, v12.__cosval) * 57.296;
    v14 = __sincosf_stret(a4 * 0.017453);
    v15 = atan2f(v14.__sinval * v10, v14.__cosval) * 57.296;
    v16 = (float)(v13 + v15) * 0.5;
    if (vabds_f32(v13, v15) > 90.0)
      v16 = fmodf(v16 + 90.0, 180.0);
    v17 = v16 >= 22.5 && v16 < 67.5;
    v18 = 1.0 / v10;
    if (!v17)
    {
      if (v16 >= 67.5 && v16 < 112.5)
      {
        v36 = v18 * a1[1];
        v37 = v18 * a1[2];
        v38 = v18 * a1[9];
        v39 = v18 * a1[10];
        v27 = (float)(v39 / v38) - (float)(v37 / v36);
        v40 = (float)(v39 + (float)(a1[8] * (float)(v11 - 1))) / v38;
        v41 = (float)-(float)(v37 - (float)(*a1 * (float)(v11 - 1))) / v36;
      }
      else
      {
        v20 = (float)(v11 - 1);
        v21 = *a1;
        v22 = v18 * a1[1];
        v23 = v18 * a1[2];
        v24 = a1[8];
        v25 = v18 * a1[9];
        v26 = v18 * a1[10];
        if (v16 >= 112.5 && v16 < 157.5)
        {
          v27 = v23 - v26;
          v28 = v23 + (float)((float)(v21 + v22) * v20);
          v29 = v26 + (float)((float)(v24 + v25) * v20);
LABEL_21:
          v35 = v28 - v29;
          goto LABEL_25;
        }
        v27 = (float)(v26 / v24) - (float)(v23 / v21);
        v40 = (float)(v26 + (float)(v25 * v20)) / v24;
        v41 = (float)(v23 + (float)(v22 * v20)) / v21;
      }
      v35 = v40 - v41;
LABEL_25:
      v8 = fabsf(v27);
      v42 = fabsf(v35);
      if (v8 <= v42)
        v8 = v42;
      return v8 < v6;
    }
    v30 = (float)(v11 - 1);
    v31 = v18 * a1[1];
    v32 = v18 * a1[2];
    v33 = v18 * a1[9];
    v34 = v18 * a1[10];
    v27 = (float)(v32 + (float)(v31 * v30)) - (float)(v34 + (float)(v33 * v30));
    v28 = v32 + (float)(*a1 * v30);
    v29 = v34 + (float)(a1[8] * v30);
    goto LABEL_21;
  }
  v7 = llroundf((float)(a3 * 1440.0) / 180.0);
  if (v7 == 1440)
    v7 = 0;
  v8 = cosScaleTab[v7] * vabds_f32(a1[2], a1[10]);
  return v8 < v6;
}

unint64_t singleton(unint64_t result, uint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  float v4;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned int *v10;
  int v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v3 = *(unsigned int *)result;
  v4 = *(float *)(result + 4);
  v21 = *(unint64_t *)(result + 8);
  v22 = result;
  v23 = v21;
  v24 = result;
  if ((int)v3 < 2)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = (unsigned int *)(result + 16);
    v19 = (v3 - 1);
    v20 = v3;
    v9 = v3 - 1;
    v10 = (unsigned int *)(result + 20);
    v11 = 1;
    v12 = &leqBuffer;
    do
    {
      v13 = v6 + 1;
      if (v6 + 1 < v3)
      {
        v14 = 0;
        do
        {
          DWORD2(v21) = v10[v14];
          DWORD2(v22) = v11 + v14;
          DWORD2(v23) = v8[v6];
          DWORD2(v24) = v6;
          result = prune((float *)&v21, a2, v4, v4);
          if ((result & 1) == 0)
          {
            v15 = v21;
            v16 = v22;
            v17 = v24;
            v12[2] = v23;
            v12[3] = v17;
            *v12 = v15;
            v12[1] = v16;
            v12 += 4;
            ++v7;
          }
          ++v14;
        }
        while (v9 != v14);
      }
      ++v11;
      --v9;
      ++v10;
      ++v6;
      v3 = v20;
    }
    while (v13 != v19);
  }
  *a3 = v7;
  return result;
}

unsigned int *doubleton(unsigned int *result, unsigned int *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int *v11;
  float v12;
  float v13;
  __int128 *v14;
  uint64_t i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[64];

  v5 = *result;
  v6 = *a2;
  memset(&v19[8], 0, 56);
  *(_QWORD *)v19 = *((_QWORD *)result + 1);
  *(_QWORD *)&v19[16] = result;
  *(_QWORD *)&v19[32] = *((_QWORD *)a2 + 1);
  *(_QWORD *)&v19[48] = a2;
  if ((int)v5 < 1)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = result + 4;
    v11 = a2 + 4;
    v12 = *((float *)result + 1);
    v13 = *((float *)a2 + 1);
    v14 = &leqBuffer;
    do
    {
      *(_DWORD *)&v19[8] = v10[v8];
      *(_DWORD *)&v19[24] = v8;
      if ((int)v6 >= 1)
      {
        for (i = 0; i != v6; ++i)
        {
          *(_DWORD *)&v19[40] = v11[i];
          *(_DWORD *)&v19[56] = i;
          result = (unsigned int *)prune((float *)v19, a3, v12, v13);
          if ((result & 1) == 0)
          {
            v16 = *(_OWORD *)v19;
            v17 = *(_OWORD *)&v19[16];
            v18 = *(_OWORD *)&v19[48];
            v14[2] = *(_OWORD *)&v19[32];
            v14[3] = v18;
            *v14 = v16;
            v14[1] = v17;
            v14 += 4;
            ++v9;
          }
        }
      }
      ++v8;
    }
    while (v8 != v5);
  }
  *a4 = v9;
  return result;
}

float *leqIntersect(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v4 = a2[1];
  v5 = result[1];
  v6 = (float)(*result * v4) - (float)(*a2 * v5);
  if (fabsf(v6) < 0.00000001)
  {
    *a3 = -1.0;
    v8 = -1.0;
  }
  else
  {
    v7 = 1.0 / v6;
    *a3 = v7 * (float)((float)(v5 * a2[2]) - (float)(result[2] * v4));
    v8 = v7 * (float)((float)(result[2] * *a2) - (float)(*result * a2[2]));
  }
  *a4 = v8;
  return result;
}

float cgNormalizedRectToGeometryImageRect(CGRect a1, unint64_t a2)
{
  return a1.origin.x * (double)a2;
}

void sub_1A13F8810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void apple::vision::OpticalFlow::LKTCPU::AllocationException::~AllocationException(std::bad_alloc *this)
{
  std::bad_alloc::~bad_alloc(this);
  JUMPOUT(0x1A1B0A898);
}

void *apple::vision::AlignedAllocator<unsigned char,32ul>::allocate(size_t size)
{
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v3;

  result = malloc_type_aligned_alloc(0x20uLL, size, 0x100004077774924uLL);
  if (!result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v3 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v3, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
  }
  return result;
}

uint64_t apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::~LKTCPUImpl(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E453A070;
  v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(_QWORD *)(a1 + 208) = v2;
    free(v2);
  }

  return a1;
}

void apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::~LKTCPUImpl(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E453A070;
  v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(_QWORD *)(a1 + 208) = v2;
    free(v2);
  }

  JUMPOUT(0x1A1B0A898);
}

int32x2_t apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::estimateFlow(int32x2_t *a1, __CVBuffer **a2, __CVBuffer **a3, __CVBuffer **a4, int *a5)
{
  __CVBuffer *v9;
  __CVBuffer *v10;
  __CVBuffer *v11;
  int32x2_t result;
  __CVBuffer *v13;
  __CVBuffer *v14;
  __CVBuffer *v15;

  a1[115] = (int32x2_t)0x100000000;
  v9 = *a2;
  v15 = v9;
  if (v9)
    CVPixelBufferRetain(v9);
  apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::createImagePyramid((uint64_t)a1, &v15, 0, a5);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&v15);
  v10 = *a3;
  v14 = v10;
  if (v10)
    CVPixelBufferRetain(v10);
  apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::createImagePyramid((uint64_t)a1, &v14, 1, a5);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&v14);
  bzero(*(void **)&a1[112], 8 * *(_QWORD *)&a1[2 * *a5 + 3] * *(_QWORD *)&a1[2 * *a5 + 4]);
  apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::calculateFeaturesAndDerivatives((uint64_t)a1, 0, *a5);
  apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::calculateFeaturesAndDerivatives((uint64_t)a1, 1, *a5);
  v11 = *a4;
  v13 = v11;
  if (v11)
    CVPixelBufferRetain(v11);
  apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::computeOpticalFlow((uint64_t)a1, &v13, a5);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&v13);
  result = vrev64_s32(a1[115]);
  a1[115] = result;
  return result;
}

void sub_1A13F8A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper((__CVBuffer **)va);
  _Unwind_Resume(a1);
}

int32x2_t apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::estimateFlow(int32x2_t *a1, __CVBuffer **a2, __CVBuffer **a3, int *a4)
{
  __CVBuffer *v7;
  __CVBuffer *v8;
  int32x2_t result;
  __CVBuffer *v10;
  __CVBuffer *v11;

  v7 = *a2;
  v11 = v7;
  if (v7)
    CVPixelBufferRetain(v7);
  apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::createImagePyramid((uint64_t)a1, &v11, a1[115].i32[1], a4);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&v11);
  bzero(*(void **)&a1[112], 8 * *(_QWORD *)&a1[2 * *a4 + 3] * *(_QWORD *)&a1[2 * *a4 + 4]);
  apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::calculateFeaturesAndDerivatives((uint64_t)a1, a1[115].i32[1], *a4);
  v8 = *a3;
  v10 = v8;
  if (v8)
    CVPixelBufferRetain(v8);
  apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::computeOpticalFlow((uint64_t)a1, &v10, a4);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&v10);
  result = vrev64_s32(a1[115]);
  a1[115] = result;
  return result;
}

void sub_1A13F8B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __CVBuffer *a9)
{
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&a9);
  _Unwind_Resume(a1);
}

void apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::createImagePyramid(uint64_t a1, CVPixelBufferRef *a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CVBuffer *v13;
  size_t Width;
  __int128 v15;
  size_t v16;
  void (__cdecl *v17)(void *, size_t);
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::logic_error *exception;
  OSType v39;
  std::logic_error *v40;
  CVPixelBufferRef pixelBuffer;
  __int128 v42;
  __int128 v43;
  __int128 context;
  __int128 v45;
  _BYTE texture[32];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = a1 + 80 * a3;
  v9 = *(_QWORD *)(v8 + 224);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(v8 + 384);
  if (CVPixelBufferGetPixelFormatType(*a2) != 1111970369)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x18uLL);
    v39 = apple::vision::CVPixelBufferWrapper::pixelFormatType(*a2);
    v40 = apple::vision::OpticalFlow::LKTCPU::InvalidPixelFormatException::InvalidPixelFormatException(exception, v39);
  }
  v13 = *a2;
  pixelBuffer = v13;
  if (v13)
    CVPixelBufferRetain(v13);
  Width = CVPixelBufferGetWidth(v13);
  *((_QWORD *)&context + 1) = CVPixelBufferGetHeight(pixelBuffer);
  *(_QWORD *)&v45 = Width;
  *((_QWORD *)&v45 + 1) = CVPixelBufferGetBytesPerRow(pixelBuffer);
  apple::vision::CVPixelBufferWrapper::BaseAddressLock<1ull>::BaseAddressLock(&texture[8], pixelBuffer);
  *(_QWORD *)&context = CVPixelBufferGetBaseAddress(pixelBuffer);
  *(_QWORD *)texture = pixelBuffer;
  pixelBuffer = 0;
  v42 = context;
  v43 = v45;
  apple::vision::CVPixelBufferWrapper::BaseAddressLock<1ull>::~BaseAddressLock((CVPixelBufferRef *)&texture[8]);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper((__CVBuffer **)texture);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&pixelBuffer);
  if (*((_BYTE *)a4 + 8))
  {
    *(_OWORD *)&texture[16] = v43;
    *(_QWORD *)&context = a1;
    *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::convertBGRA8888ToYUVF32;
    v15 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)texture = v42;
    v45 = v15;
    v47 = v9;
    v48 = v11;
    v49 = v10;
    v50 = v10;
    v51 = v12;
    v52 = v11;
    v53 = v10;
    v54 = 2 * v10;
    v16 = *(unsigned int *)(a1 + 16);
    v17 = (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS1_13Pixel_BGRA_8UES8_EENS6_INS0_9NamedTypeIhNS1_15YImageParameterEEESC_EENS6_INSA_IDv2_hNS1_16UVImageParameterEEESG_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSO_ENUlPvmE_8__invokeESR_m;
  }
  else
  {
    *(_OWORD *)&texture[16] = v43;
    *(_QWORD *)&context = a1;
    *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::convertBGRA8888ToYF32;
    v18 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)texture = v42;
    v45 = v18;
    v47 = v9;
    v48 = v11;
    v49 = v10;
    v50 = v10;
    v16 = *(unsigned int *)(a1 + 16);
    v17 = (void (__cdecl *)(void *, size_t))apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::dispatchProcessing<apple::vision::ImageBuffer<apple::vision::OpticalFlow::Pixel_BGRA_8U const,apple::vision::OpticalFlow::Pixel_BGRA_8U const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>>>(void (*)(apple::vision::OpticalFlow::ComputeParameters const&,apple::vision::ImageBuffer<apple::vision::OpticalFlow::Pixel_BGRA_8U const,apple::vision::OpticalFlow::Pixel_BGRA_8U const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>> const&),int,apple::vision::ImageBuffer<apple::vision::OpticalFlow::Pixel_BGRA_8U const,apple::vision::OpticalFlow::Pixel_BGRA_8U const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>> const&)::{lambda(void *,unsigned long)#1}::__invoke;
  }
  dispatch_apply_f(v16, 0, &context, v17);
  if (*a4 >= 2)
  {
    v19 = 0;
    v20 = a1 + 392;
    v21 = (uint64_t *)(a1 + 392 + 80 * a3);
    v22 = 1;
    do
    {
      v23 = (int8x16_t *)(v20 + v19 - 352);
      v24 = *(v21 - 21);
      v25 = *(v21 - 20);
      v26 = (uint64_t *)(v20 + v19 - 336);
      v27 = *v26;
      v28 = (uint64_t *)(v20 + v19 - 328);
      v29 = *v28;
      *(_QWORD *)&context = a1;
      *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::downscale2x;
      *(_QWORD *)&v45 = v27;
      *((_QWORD *)&v45 + 1) = v29;
      *(_QWORD *)texture = v24;
      v30 = *v23;
      *(int8x16_t *)&texture[8] = vextq_s8(v30, v30, 8uLL);
      *(_QWORD *)&texture[24] = v30.i64[0];
      v47 = v25;
      v48 = v29;
      v49 = v27;
      v50 = v27;
      dispatch_apply_f(*(unsigned int *)(a1 + 16), 0, &context, (void (__cdecl *)(void *, size_t))apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::dispatchProcessing<apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>>>(void (*)(apple::vision::OpticalFlow::ComputeParameters const&,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>> const&),int,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>> const&)::{lambda(void *,unsigned long)#1}::__invoke);
      if (*((_BYTE *)a4 + 8))
      {
        v31 = vextq_s8(*v23, *v23, 8uLL);
        v32 = v23->i64[0];
        v33 = *(v21 - 1);
        v34 = *v21;
        v35 = *v26;
        v36 = *v28;
        v37 = 2 * *v26;
        *(_QWORD *)&context = a1;
        *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::downscale2x;
        *(_QWORD *)&v45 = v35;
        *((_QWORD *)&v45 + 1) = v36;
        *(_QWORD *)texture = v33;
        *(int8x16_t *)&texture[8] = v31;
        *(_QWORD *)&texture[24] = 2 * v32;
        v47 = v34;
        v48 = v36;
        v49 = v35;
        v50 = v37;
        dispatch_apply_f(*(unsigned int *)(a1 + 16), 0, &context, (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_hNS1_16UVImageParameterEEESB_EENS6_ISA_SA_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSK_ENUlPvmE_8__invokeESN_m);
      }
      ++v22;
      v19 += 16;
      ++v21;
    }
    while (v22 < *a4);
  }
}

void sub_1A13F8E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::calculateFeaturesAndDerivatives(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a3 >= 1)
  {
    v26 = v3;
    v27 = v4;
    v6 = a3 + 1;
    v7 = a1 + 80 * a2;
    do
    {
      v8 = (_QWORD *)(v7 + 8 * (v6 - 2));
      v9 = v8[28];
      v10 = a1 + 16 * (v6 - 2);
      v11 = *(_QWORD *)(v10 + 40);
      v12 = *(_QWORD *)(v10 + 48);
      v13 = v8[68];
      v14 = v8[88];
      v15 = a1;
      v16 = apple::vision::OpticalFlow::LKTCPUCompute::computeFeatures;
      *(_QWORD *)&v17 = v11;
      *((_QWORD *)&v17 + 1) = v12;
      v18 = v9;
      v19 = v12;
      v20 = v11;
      v21 = v11;
      v22 = v13;
      v23 = v12;
      v24 = v11;
      v25 = 8 * v11;
      dispatch_apply_f(*(unsigned int *)(a1 + 16), 0, &v15, (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIhNS1_15YImageParameterEEESA_EENS6_INS7_IDv2_fNS1_16FeatureParameterEEESE_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSM_ENUlPvmE_8__invokeESP_m);
      v15 = a1;
      v16 = apple::vision::OpticalFlow::LKTCPUCompute::computeDerivatives;
      v17 = *(_OWORD *)(v10 + 40);
      v18 = v13;
      v19 = v12;
      v20 = v11;
      v21 = 8 * v11;
      v22 = v14;
      v23 = v12;
      v24 = v11;
      v25 = 16 * v11;
      dispatch_apply_f(*(unsigned int *)(a1 + 16), 0, &v15, (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_16FeatureParameterEEESB_EENS6_INS7_IDv4_fNS1_19DerivativeParameterEEESF_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSN_ENUlPvmE_8__invokeESQ_m);
      --v6;
    }
    while (v6 > 1);
  }
}

void apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::computeOpticalFlow(uint64_t a1, __CVBuffer **a2, int *a3)
{
  uint64_t v3;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  float32x2_t v15;
  float32x2_t v16;
  __int128 v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  int8x16_t v22;
  __CVBuffer *v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  int32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  __CVBuffer *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __CVBuffer *v43;
  __CVBuffer *v44;
  OSType PixelFormatType;
  uint64_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  void (__cdecl *v51)(void *, size_t);
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  std::logic_error *exception;
  OSType v56;
  std::logic_error *v57;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __CVBuffer *v65;
  __int128 v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  __int128 v72;
  int8x16_t v73;
  __CVBuffer *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  uint64_t v84;
  int8x16_t v85;
  int8x16_t v86;
  CVPixelBufferRef texture;
  CVPixelBufferRef pixelBuffer;
  __int128 v89;
  __int128 v90;
  __int128 context;
  __int128 v92;
  CVPixelBufferRef v93;
  int8x16_t v94;
  uint64_t v95;
  _BYTE v96[32];
  uint64_t v97;
  int8x16_t v98;
  uint64_t v99;
  uint64_t v100;
  int8x16_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[24];
  uint64_t v108;
  uint64_t v109;
  int8x16_t v110;
  uint64_t v111;
  __int128 v112;

  v3 = *a3;
  if ((int)v3 < 1)
  {
    v78 = 0;
  }
  else
  {
    v78 = 0;
    __asm { FMOV            V0.4S, #1.0 }
    v66 = _Q0;
    __asm { FMOV            V10.2S, #-1.0 }
    do
    {
      v10 = *a3 - 1;
      if ((int)v3 < v10)
        v10 = v3;
      v68 = v3 - 1;
      v11 = a1 + 16 * (v3 - 1);
      v12 = *(_QWORD *)(v11 + 40);
      v69 = (uint64_t *)(v11 + 40);
      v13 = *(_QWORD *)(v11 + 48);
      v14 = v66;
      if (*a3 != (_DWORD)v3)
      {
        v15 = vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(v11 + 40)));
        v16 = vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 16 * v3 + 40)));
        *(float32x2_t *)&v17 = vdiv_f32(v15, v16);
        *((float32x2_t *)&v17 + 1) = vdiv_f32(vadd_f32(v16, _D10), vadd_f32(v15, _D10));
        v14 = v17;
      }
      v59 = v3;
      v67 = (uint64_t *)(v11 + 48);
      v18 = a3[1];
      if (v18 >= 1)
      {
        v19 = 0;
        v21 = v69;
        v20 = a1;
        v64 = 16 * v12;
        v65 = *(__CVBuffer **)(a1 + 864);
        v22.i64[0] = v13;
        v22.i64[1] = v12;
        v83 = v22;
        v63 = *(_QWORD *)(a1 + 872);
        v61 = 4 * v12;
        v62 = *(_QWORD *)(a1 + 880);
        v60 = *(_QWORD *)(a1 + 888);
        do
        {
          v84 = 0;
          v23 = *(__CVBuffer **)(v20 + 896 + 8 * v78);
          v24 = *(int8x16_t *)(v20 + 16 * v10 + 40);
          v25 = 8 * *(_QWORD *)(v20 + 16 * v10 + 40);
          v78 ^= 1uLL;
          v76 = *(_QWORD *)(v20 + 896 + 8 * v78);
          v26 = *v67;
          v82 = *v21;
          v75 = 8 * *v21;
          v77 = v19 + 1;
          if (v19 + 1 == v18)
          {
            v80 = 0;
            v81 = 0;
            v79 = 0;
            if (*((_BYTE *)a3 + 8))
            {
              v84 = 4 * v82;
              v80 = *(_QWORD *)(a1 + 912);
              v81 = *v21;
              v79 = *v67;
            }
          }
          else
          {
            v80 = 0;
            v81 = 0;
            v79 = 0;
          }
          v21 = v69;
          v20 = a1;
          v27 = *(_QWORD *)(a1 + 544 + 80 * *(unsigned int *)(a1 + 920) + 8 * v68);
          v28 = *v69;
          v29 = *(_QWORD *)(a1 + 704 + 80 * *(unsigned int *)(a1 + 920) + 8 * v68);
          v30 = *(_QWORD *)(a1 + 544 + 80 * *(unsigned int *)(a1 + 924) + 8 * v68);
          v31 = *(_QWORD *)(a1 + 704 + 80 * *(unsigned int *)(a1 + 924) + 8 * v68);
          v74 = v23;
          v93 = v23;
          v72 = v14;
          v73 = vextq_s8(v24, v24, 8uLL);
          v94 = v73;
          *(int8x16_t *)&v107[8] = v83;
          v108 = v64;
          v109 = v62;
          v110 = v83;
          v111 = v61;
          v112 = v14;
          *(_QWORD *)&context = a1;
          *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::prepareMatrices;
          *(_QWORD *)&v92 = v28;
          *((_QWORD *)&v92 + 1) = v26;
          v95 = v25;
          *(_QWORD *)v96 = v27;
          *(_QWORD *)&v96[8] = v26;
          *(_QWORD *)&v96[16] = v28;
          *(_QWORD *)&v96[24] = 8 * v28;
          v97 = v29;
          v98.i64[0] = v26;
          v98.i64[1] = v28;
          v99 = 16 * v28;
          v100 = v30;
          v101.i64[0] = v26;
          v101.i64[1] = v28;
          v102 = 8 * v28;
          v103 = v31;
          v104 = v26;
          v105 = v28;
          v106 = 16 * v28;
          *(_QWORD *)v107 = v65;
          dispatch_apply_f(*(unsigned int *)(a1 + 16), 0, &context, (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_13FlowParameterEEESB_EENS6_IKNS7_IS8_NS1_16FeatureParameterEEESF_EENS6_IKNS7_IDv4_fNS1_19DerivativeParameterEEESK_EESG_SL_NS6_INS7_ISH_NS1_21MatrixAdiagBParameterEEESN_EENS6_INS7_IfNS1_18MatrixIxyParameterEEESQ_EENS1_16SolverParametersEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSZ_ENUlPvmE_8__invokeES12_m);
          v98 = v83;
          v99 = v64;
          v100 = v60;
          v101 = v83;
          v102 = v61;
          *(_QWORD *)&context = a1;
          *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::solverBox7;
          v92 = *(_OWORD *)v69;
          v93 = v65;
          v94 = v83;
          v95 = v64;
          *(_QWORD *)v96 = v62;
          *(int8x16_t *)&v96[8] = v83;
          *(_QWORD *)&v96[24] = v61;
          v97 = v63;
          dispatch_apply_f(*(unsigned int *)(a1 + 16), 0, &context, (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv4_fNS1_21MatrixAdiagBParameterEEESB_EENS6_IKNS7_IfNS1_18MatrixIxyParameterEEESF_EENS6_ISA_SA_EENS6_ISE_SE_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSP_ENUlPvmE_8__invokeESS_m);
          v93 = v74;
          v94 = v73;
          *(_OWORD *)v107 = v72;
          *(_QWORD *)&context = a1;
          *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::solverBoxXAndAxb;
          v92 = *(_OWORD *)v69;
          v95 = v25;
          *(_QWORD *)v96 = v63;
          *(int8x16_t *)&v96[8] = v83;
          *(_QWORD *)&v96[24] = v64;
          v97 = v60;
          v98 = v83;
          v99 = v61;
          v100 = v76;
          v101.i64[0] = v26;
          v101.i64[1] = v82;
          v102 = v75;
          v103 = v80;
          v104 = v79;
          v105 = v81;
          v106 = v84;
          dispatch_apply_f(*(unsigned int *)(a1 + 16), 0, &context, (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_13FlowParameterEEESB_EENS6_IKNS7_IDv4_fNS1_21MatrixAdiagBParameterEEESG_EENS6_IKNS7_IfNS1_18MatrixIxyParameterEEESK_EENS6_ISA_SA_EENS6_INS7_IfNS1_14NLRegParameterEEESO_EENS1_16SolverParametersEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSX_ENUlPvmE_8__invokeES10_m);
          v18 = a3[1];
          v14 = v66;
          v10 = v68;
          v19 = v77;
        }
        while (v77 < v18);
      }
      if (*((_BYTE *)a3 + 8))
      {
        v32 = *((float *)a3 + 7);
        v33 = *(int32x2_t *)(a3 + 3);
        v34 = v68;
        v35 = a1 + 80 * *(unsigned int *)(a1 + 920) + 8 * v68;
        v36 = *(__CVBuffer **)(v35 + 224);
        v37 = *v69;
        v38 = *v67;
        v39 = *(_QWORD *)(v35 + 384);
        v40 = *(_QWORD *)(a1 + 896 + 8 * v78);
        v78 ^= 1uLL;
        v41 = *(_QWORD *)(a1 + 896 + 8 * v78);
        v42 = *(_QWORD *)(a1 + 912);
        *(float32x2_t *)v107 = vdiv_f32((float32x2_t)0x3F0000003F000000, *(float32x2_t *)(a3 + 5));
        *(float *)&v107[8] = 0.5 / v32;
        *(int32x2_t *)&v107[12] = vrev64_s32(v33);
        *(_QWORD *)&context = a1;
        *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::nonLocalRegularization;
        *(_QWORD *)&v92 = v37;
        *((_QWORD *)&v92 + 1) = v38;
        v93 = v36;
        v94.i64[0] = v38;
        v94.i64[1] = v37;
        v95 = v37;
        *(_QWORD *)v96 = v39;
        *(_QWORD *)&v96[8] = v38;
        *(_QWORD *)&v96[16] = v37;
        *(_QWORD *)&v96[24] = 2 * v37;
        v97 = v40;
        v98.i64[0] = v38;
        v98.i64[1] = v37;
        v99 = 8 * v37;
        v100 = v42;
        v101.i64[0] = v38;
        v101.i64[1] = v37;
        v102 = 4 * v37;
        v103 = v41;
        v104 = v38;
        v105 = v37;
        v106 = 8 * v37;
        dispatch_apply_f(*(unsigned int *)(a1 + 16), 0, &context, (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIhNS1_15YImageParameterEEESA_EENS6_IKNS7_IDv2_hNS1_16UVImageParameterEEESF_EENS6_IKNS7_IDv2_fNS1_13FlowParameterEEESK_EENS6_IKNS7_IfNS1_14NLRegParameterEEESO_EENS6_ISJ_SJ_EENS1_12NLParametersEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSY_ENUlPvmE_8__invokeES11_m);
      }
      else
      {
        v34 = v68;
      }
      v3 = v34;
    }
    while ((v59 & 0xFFFFFFFE) != 0);
  }
  v43 = *(__CVBuffer **)(a1 + 8 * v78 + 896);
  v85 = *(int8x16_t *)(a1 + 40);
  v44 = *a2;
  texture = v44;
  if (v44)
    CVPixelBufferRetain(v44);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v44);
  v46 = 8 * v85.i64[0];
  v86 = vextq_s8(v85, v85, 8uLL);
  if (PixelFormatType == 843264102)
  {
    pixelBuffer = texture;
    if (texture)
      CVPixelBufferRetain(texture);
    Width = CVPixelBufferGetWidth(texture);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    *(_QWORD *)&context = 0;
    *((_QWORD *)&context + 1) = Height;
    *(_QWORD *)&v92 = Width;
    *((_QWORD *)&v92 + 1) = BytesPerRow;
    v93 = 0;
    apple::vision::CVPixelBufferWrapper::BaseAddressLock<0ull>::BaseAddressLock(&v94, pixelBuffer);
    *(_QWORD *)&context = CVPixelBufferGetBaseAddress(pixelBuffer);
    if (v93)
      CVPixelBufferRelease(v93);
    v93 = pixelBuffer;
    pixelBuffer = 0;
    v89 = context;
    v90 = v92;
    apple::vision::CVPixelBufferWrapper::BaseAddressLock<0ull>::~BaseAddressLock((CVPixelBufferRef *)&v94);
    apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&v93);
    apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&pixelBuffer);
    *(_QWORD *)&context = a1;
    *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::copyFlowToOutput32F;
    v92 = *(_OWORD *)(a1 + 40);
    v93 = v43;
    v94 = v86;
    v95 = v46;
    *(_OWORD *)v96 = v89;
    *(_OWORD *)&v96[16] = v90;
    v50 = *(unsigned int *)(a1 + 16);
    v51 = (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_13FlowParameterEEESB_EENS6_INS1_12Pixel_UV_32FESD_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSL_ENUlPvmE_8__invokeESO_m;
  }
  else
  {
    if (PixelFormatType != 843264104)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x18uLL);
      v56 = CVPixelBufferGetPixelFormatType(texture);
      v57 = apple::vision::OpticalFlow::LKTCPU::InvalidPixelFormatException::InvalidPixelFormatException(exception, v56);
    }
    pixelBuffer = texture;
    if (texture)
      CVPixelBufferRetain(texture);
    v47 = CVPixelBufferGetWidth(texture);
    v48 = CVPixelBufferGetHeight(pixelBuffer);
    v49 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    *(_QWORD *)&context = 0;
    *((_QWORD *)&context + 1) = v48;
    *(_QWORD *)&v92 = v47;
    *((_QWORD *)&v92 + 1) = v49;
    v93 = 0;
    apple::vision::CVPixelBufferWrapper::BaseAddressLock<0ull>::BaseAddressLock(&v94, pixelBuffer);
    *(_QWORD *)&context = CVPixelBufferGetBaseAddress(pixelBuffer);
    if (v93)
      CVPixelBufferRelease(v93);
    v93 = pixelBuffer;
    pixelBuffer = 0;
    v89 = context;
    v90 = v92;
    apple::vision::CVPixelBufferWrapper::BaseAddressLock<0ull>::~BaseAddressLock((CVPixelBufferRef *)&v94);
    apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&v93);
    apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&pixelBuffer);
    *(_QWORD *)&context = a1;
    *((_QWORD *)&context + 1) = apple::vision::OpticalFlow::LKTCPUCompute::copyFlowToOutput16F;
    v92 = *(_OWORD *)(a1 + 40);
    v93 = v43;
    v94 = v86;
    v95 = v46;
    *(_OWORD *)v96 = v89;
    *(_OWORD *)&v96[16] = v90;
    v50 = *(unsigned int *)(a1 + 16);
    v51 = (void (__cdecl *)(void *, size_t))_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_13FlowParameterEEESB_EENS6_INS1_12Pixel_UV_16FESD_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSL_ENUlPvmE_8__invokeESO_m;
  }
  dispatch_apply_f(v50, 0, &context, v51);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&texture);
}

void sub_1A13F96EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,__CVBuffer *a43,__int16 a44,char a45,char a46)
{
  void *v46;

  __cxa_free_exception(v46);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(&a43);
  _Unwind_Resume(a1);
}

uint64_t *apple::vision::OpticalFlow::LKTCPUCompute::solverBox7(uint64_t *result, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  float32x4_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;

  if (result[1] >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *result;
    if (*result <= 3)
      v9 = 3;
    else
      v9 = *result;
    v10 = v9 - 3;
    v11 = 4 - v9;
    __asm { FMOV            V0.4S, #7.0 }
    do
    {
      v17 = result[2] - 1;
      if (v17 >= v8 + 3)
        v17 = v8 + 3;
      if (v10 <= v17)
      {
        v20 = a2[3] >> 4;
        v21 = a3[3] >> 2;
        v22 = v11 + v17;
        v23 = (float *)(*a3 + v6 + 4 * v10 * v21);
        v24 = 4 * v21;
        v25 = (float32x4_t *)(*a2 + v5 + 16 * v10 * v20);
        v26 = 16 * v20;
        v19 = 0.0;
        v18 = 0uLL;
        do
        {
          v18 = vaddq_f32(v18, *v25);
          v19 = v19 + *v23;
          v23 = (float *)((char *)v23 + v24);
          v25 = (float32x4_t *)((char *)v25 + v26);
          --v22;
        }
        while (v22);
      }
      else
      {
        v18 = 0uLL;
        v19 = 0.0;
      }
      *(float32x4_t *)(*a4 + 16 * (a4[3] >> 4) * v8 + 16 * v7) = vdivq_f32(v18, _Q0);
      *(float *)(*a5 + 4 * (a5[3] >> 2) * v8 + 4 * v7++) = v19 / 7.0;
      v6 += 4;
      v5 += 16;
    }
    while (v7 < result[1]);
  }
  return result;
}

_QWORD *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv4_fNS1_21MatrixAdiagBParameterEEESB_EENS6_IKNS7_IfNS1_18MatrixIxyParameterEEESF_EENS6_ISA_SA_EENS6_ISE_SE_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSP_ENUlPvmE_8__invokeESS_m(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *);
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _QWORD v20[3];
  _OWORD v21[2];
  _OWORD v22[2];
  _OWORD v23[2];
  _OWORD v24[2];

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *))result[1];
    v3 = result[2];
    v4 = result[3];
    v5 = result + 4;
    v6 = *(unsigned int *)(*result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v18 = result + 12;
      v19 = result + 8;
      v17 = result + 16;
      do
      {
        v20[0] = ++v11;
        v20[1] = v3;
        v20[2] = v4;
        v13 = v5[1];
        v21[0] = *v5;
        v21[1] = v13;
        v14 = v19[1];
        v22[0] = *v19;
        v22[1] = v14;
        v15 = v18[1];
        v23[0] = *v18;
        v23[1] = v15;
        v16 = v17[1];
        v24[0] = *v17;
        v24[1] = v16;
        result = (_QWORD *)v2(v20, v21, v22, v23, v24);
      }
      while (v10 != v11);
    }
  }
  return result;
}

void apple::vision::OpticalFlow::LKTCPUCompute::solverBoxXAndAxb(uint64_t *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, float32x2_t *a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v25;
  float32x2_t v26;
  int32x2_t v27;
  float32x2_t v28;
  uint64_t v29;
  float v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v36;
  float v37;
  float32x2_t v40;
  int8x8_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float v46;
  __int32 v47;
  int32x2_t v48;

  v7 = a1[1];
  if (v7 >= 1)
  {
    v14 = 0;
    v15 = *a1;
    v46 = (float)*a1;
    __asm { FMOV            V0.4S, #7.0 }
    v45 = _Q0;
    v22 = *a7;
    v21 = a7[1];
    v43 = 16 * *a1;
    v44 = 4 * *a1;
    __asm
    {
      FMOV            V12.2S, #-1.0
      FMOV            V13.2S, #1.0
    }
    do
    {
      if (v14 <= 3)
        v25 = 3;
      else
        v25 = v14;
      v26.f32[0] = (float)v14;
      v26.f32[1] = v46;
      v28 = _ZN5apple6vision11OpticalFlow13LKTCPUCompute8sampleLNINS0_9NamedTypeIDv2_fNS1_13FlowParameterEEEEET_RKNS0_11ImageBufferIKS8_SA_EES5_(a2, COERCE_DOUBLE(vmul_f32(v21, v26)));
      v29 = v14 + 3;
      if (v7 - 1 < v14 + 3)
        v29 = v7 - 1;
      v30 = 0.0;
      v31 = 0uLL;
      if (v25 - 3 <= v29)
      {
        do
        {
          v31 = vaddq_f32(v31, *(float32x4_t *)(*a3 + v43 * (a3[3] >> 4) - 48 + 16 * v25));
          v30 = v30 + *(float *)(*a4 + v44 * (a4[3] >> 2) - 12 + 4 * v25);
          v32 = v25 - 3;
          ++v25;
        }
        while (v32 < v29);
      }
      _Q2 = vdivq_f32(v31, v45);
      _S15 = v30 / 7.0;
      _S9 = _Q2.i32[1];
      *(float *)v27.i32 = vmlas_n_f32(-(float)(_S15 * _S15), _Q2.f32[1], _Q2.f32[0]);
      v36 = *a6;
      if (*a6)
      {
        v47 = _Q2.i32[2];
        v48 = v27;
        v37 = expf((float)((float)(sqrtf(fmaxf((float)(*(float *)v27.i32 * -4.0)+ (float)((float)(_Q2.f32[0] + _Q2.f32[1]) * (float)(_Q2.f32[0] + _Q2.f32[1])), 0.0))* -0.5)+ (float)((float)(_Q2.f32[0] + _Q2.f32[1]) * 0.5))* -0.5);
        _Q2.i32[2] = v47;
        v27 = v48;
        *(float *)(v36 + 4 * ((unint64_t)a6[3] >> 2) * v15 + 4 * v14) = v37;
      }
      __asm
      {
        FMLA            S0, S9, V2.S[2]
        FMLS            S1, S15, V2.S[2]
      }
      _D0.i32[1] = _S1;
      v40 = vmul_f32(v22, v28);
      v41 = (int8x8_t)vdiv_f32(_D0, (float32x2_t)vdup_lane_s32(v27, 0));
      if (*(float *)v27.i32 <= 0.0)
        v42 = 0;
      else
        v42 = -1;
      *(float32x2_t *)(*a5 + 8 * (a5[3] >> 3) * v15 + 8 * v14++) = vadd_f32(v40, vminnm_f32(vmaxnm_f32(vsub_f32((float32x2_t)vbsl_s8((int8x8_t)*(_OWORD *)&vcltzq_s32((int32x4_t)vdupq_n_s32(v42).u64[0]), v41, (int8x8_t)v40), v40), _D12), _D13));
      v7 = a1[1];
    }
    while (v14 < v7);
  }
}

__int128 *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_13FlowParameterEEESB_EENS6_IKNS7_IDv4_fNS1_21MatrixAdiagBParameterEEESG_EENS6_IKNS7_IfNS1_18MatrixIxyParameterEEESK_EENS6_ISA_SA_EENS6_INS7_IfNS1_14NLRegParameterEEESO_EENS1_16SolverParametersEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSX_ENUlPvmE_8__invokeES10_m(__int128 *result, int a2)
{
  uint64_t (*v2)(_QWORD *);
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  _QWORD v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *))*((_QWORD *)result + 1);
    v4 = *((_QWORD *)result + 2);
    v3 = *((_QWORD *)result + 3);
    v5 = result + 2;
    v6 = *(unsigned int *)(*(_QWORD *)result + 16);
    v7 = v3 / v6;
    v8 = v3 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v21 = result + 6;
      v22 = result + 4;
      v19 = result + 10;
      v20 = result + 8;
      v18 = result + 12;
      do
      {
        v23[0] = ++v11;
        v23[1] = v4;
        v23[2] = v3;
        v13 = v5[1];
        v24 = *v5;
        v25 = v13;
        v14 = v22[1];
        v26 = *v22;
        v27 = v14;
        v15 = v21[1];
        v28 = *v21;
        v29 = v15;
        v16 = v20[1];
        v30 = *v20;
        v31 = v16;
        v17 = v19[1];
        v32 = *v19;
        v33 = v17;
        v34 = *v18;
        result = (__int128 *)v2(v23);
      }
      while (v10 != v11);
    }
  }
  return result;
}

_QWORD *apple::vision::OpticalFlow::LKTCPUCompute::nonLocalRegularization(_QWORD *result, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, int32x4_t *a7)
{
  uint64_t v7;
  uint64_t *v9;
  uint64_t v11;
  int32x4_t v12;
  float32x2_t v13;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  unint64_t v19;
  int64x2_t v20;
  int8x16_t v21;
  float32x4_t v22;
  uint64_t v23;
  int8x16_t v24;
  int32x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  simd_float4 v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int32x4_t v33;
  int v34;
  float32x2_t v35;
  uint64x2_t v36;
  uint64_t v37;
  __int32 v38;
  uint64_t v39;
  __int32 v40;
  unsigned int v41;
  _QWORD *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  int8x16_t v48;
  uint64_t v49;
  int8x16_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int32 *v56;
  __int32 *v57;
  uint64_t v58;
  __int32 *v59;
  __int32 *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  float32x2_t v66;
  float32x2_t v67;
  uint64_t v68;
  float32x2_t v69;
  float32x4_t v70;
  uint64x2_t v71;
  int64x2_t v72;
  float32x4_t v73;
  int64x2_t v74;
  float32x4_t v75;
  int64x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int8x16_t v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int v100;
  float32x2_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v111;
  int v112;
  uint64_t v114;
  int v115;
  int v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  uint64_t v122;
  float32x2_t v124;
  float32x4_t v125;
  int8x16_t v126;
  int8x16_t v127;

  v7 = *result;
  if ((*result & 1) == 0 && (uint64_t)result[1] >= 1)
  {
    v9 = a3;
    v11 = 0;
    v12 = vzip1q_s32(*a7, (int32x4_t)vextq_s8(*(int8x16_t *)a7, *(int8x16_t *)a7, 4uLL));
    v117 = (float32x4_t)v12;
    v105 = (int)v7 + 1;
    v106 = (int)v7;
    v104 = v7 + 1;
    v13 = (float32x2_t)vdup_n_s32(0x437F0000u);
    v107 = *result;
    v108 = result;
    do
    {
      v12.i64[0] = __PAIR64__(v7, v11);
      v126 = (int8x16_t)v12;
      v15 = v7;
      v16 = v11;
      v17 = result;
      v18 = apple::vision::OpticalFlow::LKTCPUCompute::gather<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const>(a2, COERCE_DOUBLE(__PAIR64__(v7, v11)));
      v19 = _ZN5apple6vision11OpticalFlow13LKTCPUCompute6gatherIKNS0_9NamedTypeIDv2_hNS1_16UVImageParameterEEEEEDaRKNS0_11ImageBufferIT_SB_EEDv2_i(v9, *(double *)v126.i64);
      v23 = a7->i32[3];
      *(int32x2_t *)v28.f32 = vdup_n_s32(a7[1].i32[0] * (int)v23);
      v111 = v16;
      v27.i32[0] = (int)v16 / (int)v23;
      v27.i32[1] = v15 / (int)v23;
      v24.i64[1] = v126.i64[1];
      v25 = vadd_s32((int32x2_t)vmvn_s8(*(int8x8_t *)v126.i8), vmovn_s64(*(int64x2_t *)(v17 + 1)));
      v26.i32[0] = v25.i32[0] / (int)v23;
      v26.i32[1] = v25.i32[1] / (int)v23;
      v26.i64[1] = v126.i64[1];
      *(int32x2_t *)v27.i8 = vsub_s32(*(int32x2_t *)v126.i8, vmin_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v28.f32));
      *(int32x2_t *)v28.f32 = vadd_s32(vmin_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v28.f32), *(int32x2_t *)v126.i8);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0uLL;
      if ((vcgt_s32(*(int32x2_t *)&v27, *(int32x2_t *)&v28).i32[1] & 1) == 0)
      {
        v34 = 0;
        *(float *)v24.i32 = (float)v18;
        v35.f32[0] = (float)v19;
        v35.f32[1] = (float)BYTE1(v19);
        *(float32x2_t *)((char *)v24.i64 + 4) = vdiv_f32(v35, v13);
        *(float *)v21.i32 = (float)BYTE1(v18);
        v36 = (uint64x2_t)vdupq_n_s64(v19);
        *(float32x2_t *)((char *)v21.i64 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v36, (uint64x2_t)xmmword_1A15FB4A0)), (int8x8_t)0xFF000000FFLL)), v13);
        v22.f32[0] = (float)BYTE2(v18);
        v20 = (int64x2_t)vshlq_u64(v36, (uint64x2_t)xmmword_1A15FB4B0);
        *(float32x2_t *)&v22.i32[1] = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vmovn_s64(v20), (int8x8_t)0xFF000000FFLL)), v13);
        *(float *)v20.i32 = (float)HIBYTE(v18);
        *(float32x2_t *)((char *)v20.i64 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)(*(_QWORD *)&vmovn_s64((int64x2_t)vshlq_u64(v36, (uint64x2_t)xmmword_1A15FB4C0)) & 0xFFFF00FFFFFF00FFLL)), v13);
        v115 = v28.i32[1];
        v26 = v27;
        v37 = v27.i32[0];
        v38 = v28.i32[0];
        v112 = v27.i32[0] + v23;
        v114 = v27.i32[0];
        v122 = v28.i32[0];
        v120 = (float32x4_t)v20;
        v121 = (float32x4_t)v21;
        v118 = v22;
        v119 = (float32x4_t)v24;
        do
        {
          v26.i32[0] = v34 + v37;
          v116 = v34;
          if (v34 + (int)v37 <= v38)
          {
            v39 = v37 + v34;
            v40 = v112 + v34;
            do
            {
              v125 = (float32x4_t)v33;
              v127 = v26;
              v41 = apple::vision::OpticalFlow::LKTCPUCompute::gather<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const>(a2, *(double *)v26.i64);
              v42 = a2;
              v43 = BYTE1(v41);
              v44 = v41;
              v45 = BYTE2(v41);
              v46 = HIBYTE(v41);
              v47 = _ZN5apple6vision11OpticalFlow13LKTCPUCompute6gatherIKNS0_9NamedTypeIDv2_hNS1_16UVImageParameterEEEEEDaRKNS0_11ImageBufferIT_SB_EEDv2_i(a3, *(double *)v127.i64);
              if (a5[2] - 1 >= (unint64_t)(v127.i32[0] + 1))
                v49 = v127.i32[0] + 1;
              else
                v49 = a5[2] - 1;
              v50.i64[1] = v127.i64[1];
              v51 = v127.i32[1] + 1;
              v52 = *a5;
              v53 = a5[1] - 1;
              if (v53 >= v127.i32[1] + 1)
                v53 = v51;
              v54 = (unint64_t)a5[3] >> 2;
              v55 = v52 + 4 * v54 * v127.i32[1];
              v56 = (__int32 *)(v55 + 4 * v127.i32[0]);
              v57 = (__int32 *)(v55 + 4 * v49);
              v58 = v52 + 4 * v54 * v53;
              v59 = (__int32 *)(v58 + 4 * v127.i32[0]);
              v60 = (__int32 *)(v58 + 4 * v49);
              v61 = a4[3];
              if (a4[2] - 1 >= (unint64_t)(v39 + 1))
                v62 = v39 + 1;
              else
                v62 = a4[2] - 1;
              v63 = *a4;
              v64 = a4[1] - 1;
              if (v64 >= v51)
                v64 = v51;
              v65 = v63 + 8 * (v61 >> 3) * v127.i32[1];
              v66 = *(float32x2_t *)(v65 + 8 * v39);
              v67 = *(float32x2_t *)(v65 + 8 * v62);
              v68 = v63 + 8 * (v61 >> 3) * v64;
              v69 = *(float32x2_t *)(v68 + 8 * v39);
              v124 = *(float32x2_t *)(v68 + 8 * v62);
              v50.i32[1] = v124.i32[1];
              *(float *)v50.i32 = (float)v44;
              *(float *)v48.i32 = (float)v47;
              *(float *)&v48.i32[1] = (float)BYTE1(v47);
              *(float32x2_t *)v48.i8 = vdiv_f32(*(float32x2_t *)v48.i8, v13);
              v70 = (float32x4_t)vextq_s8(vextq_s8(v50, v50, 4uLL), v48, 0xCuLL);
              *(float *)v48.i32 = (float)v43;
              a2 = v42;
              v71 = (uint64x2_t)vdupq_n_s64(v47);
              v72 = (int64x2_t)vshlq_u64(v71, (uint64x2_t)xmmword_1A15FB4A0);
              *(float32x2_t *)v72.i8 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vmovn_s64(v72), (int8x8_t)0xFF000000FFLL)), v13);
              v73 = (float32x4_t)vextq_s8(vextq_s8(v48, v48, 4uLL), (int8x16_t)v72, 0xCuLL);
              *(float *)v72.i32 = (float)v45;
              v74 = (int64x2_t)vshlq_u64(v71, (uint64x2_t)xmmword_1A15FB4B0);
              *(float32x2_t *)v74.i8 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vmovn_s64(v74), (int8x8_t)0xFF000000FFLL)), v13);
              v75 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL), (int8x16_t)v74, 0xCuLL);
              *(float *)v74.i32 = (float)v46;
              v76 = (int64x2_t)vshlq_u64(v71, (uint64x2_t)xmmword_1A15FB4C0);
              *(float32x2_t *)v76.i8 = vdiv_f32(vcvt_f32_u32((uint32x2_t)(*(_QWORD *)&vmovn_s64(v76) & 0xFFFF00FFFFFF00FFLL)), v13);
              v77 = vsubq_f32(v119, v70);
              v77.i32[3] = *v56;
              v78 = vsubq_f32(v121, v73);
              v78.i32[3] = *v57;
              v79 = vsubq_f32(v118, v75);
              v79.i32[3] = *v59;
              v80 = vsubq_f32(v120, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL), (int8x16_t)v76, 0xCuLL));
              v80.i32[3] = *v60;
              v81 = vmulq_f32(v117, v77);
              v82 = vmulq_f32(v81, v81);
              *(float32x2_t *)v82.f32 = vadd_f32(*(float32x2_t *)v82.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL));
              v83 = vmulq_f32(v117, v78);
              v84 = (int8x16_t)vmulq_f32(v83, v83);
              *(float32x2_t *)v84.i8 = vadd_f32(*(float32x2_t *)v84.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL));
              v85 = vmulq_f32(v117, v79);
              v86 = (int8x16_t)vmulq_f32(v85, v85);
              *(float32x2_t *)v86.i8 = vadd_f32(*(float32x2_t *)v86.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL));
              v87 = vmulq_f32(v117, v80);
              v88 = (int8x16_t)vmulq_f32(v87, v87);
              *(int32x2_t *)v89.f32 = vzip1_s32(*(int32x2_t *)v82.f32, *(int32x2_t *)v84.i8);
              v89.i32[2] = v86.i32[0];
              *(float32x2_t *)v88.i8 = vadd_f32(*(float32x2_t *)v88.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL));
              v89.i32[3] = v88.i32[0];
              *(int32x2_t *)v82.f32 = vzip2_s32(*(int32x2_t *)v82.f32, *(int32x2_t *)v84.i8);
              v82.i64[1] = __PAIR64__(v88.u32[1], vdup_lane_s32(*(int32x2_t *)v86.i8, 1).u32[0]);
              v28 = _simd_exp_f4((simd_float4)vnegq_f32(vaddq_f32(v89, v82)));
              v38 = v122;
              v26 = v127;
              v33 = (int32x4_t)vaddq_f32(v125, (float32x4_t)v28);
              v32 = vmla_n_f32(v32, v66, v28.f32[0]);
              v31 = vmla_lane_f32(v31, v67, *(float32x2_t *)v28.f32, 1);
              v30 = vmla_laneq_f32(v30, v69, (float32x4_t)v28, 2);
              v29 = vmla_laneq_f32(v29, v124, (float32x4_t)v28, 3);
              v39 += v23;
              v26.i32[0] = v40;
              v40 += v23;
            }
            while (v39 <= v122);
          }
          v34 = v23 + ~v116;
          v26.i32[1] += v23;
          v37 = v114;
        }
        while (v26.i32[1] <= v115);
      }
      v90 = (int)v111 | 1;
      if (a4[2] - 1 < v90)
        v90 = a4[2] - 1;
      v91 = *a4;
      v92 = a4[1] - 1;
      if (v92 >= v105)
        v92 = v105;
      v93 = (unint64_t)a4[3] >> 3;
      v94 = v91 + 8 * v93 * v106;
      v26.i64[0] = *(_QWORD *)(v94 + 8 * v90);
      v95 = v91 + 8 * v93 * v92;
      v28.i64[0] = *(_QWORD *)(v95 + 8 * v90);
      *(int32x2_t *)v24.i8 = vdup_lane_s32(*(int32x2_t *)v33.i8, 0);
      if (*(float *)v33.i32 <= 0.00097656)
        v96 = 0;
      else
        v96 = -1;
      *(float32x2_t *)v24.i8 = vdiv_f32(v32, *(float32x2_t *)v24.i8);
      v97 = (int8x16_t)vcltzq_s32((int32x4_t)vdupq_n_s32(v96).u64[0]);
      v27.i64[0] = *(_QWORD *)(v94 + 8 * (int)v111);
      v27.i64[0] = vbslq_s8(v97, v24, v27).u64[0];
      *(int32x2_t *)v97.i8 = vdup_lane_s32(*(int32x2_t *)v33.i8, 1);
      if (*(float *)&v33.i32[1] <= 0.00097656)
        v98 = 0;
      else
        v98 = -1;
      *(float32x2_t *)v97.i8 = vdiv_f32(v31, *(float32x2_t *)v97.i8);
      v99 = vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vdupq_n_s32(v98).u64[0]), v97, v26).u64[0];
      *(int32x2_t *)v97.i8 = vdup_laneq_s32(v33, 2);
      if (*(float *)&v33.i32[2] <= 0.00097656)
        v100 = 0;
      else
        v100 = -1;
      *(float32x2_t *)v97.i8 = vdiv_f32(v30, *(float32x2_t *)v97.i8);
      v20.i64[0] = *(_QWORD *)(v95 + 8 * (int)v111);
      v20.i64[0] = vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vdupq_n_s32(v100).u64[0]), v97, (int8x16_t)v20).u64[0];
      v101 = (float32x2_t)vdup_laneq_s32(v33, 3);
      if (*(float *)&v33.i32[3] <= 0.00097656)
        v102 = 0;
      else
        v102 = -1;
      *(float32x2_t *)v21.i8 = vdiv_f32(v29, v101);
      LODWORD(v7) = v107;
      *(_QWORD *)(*a6 + 8 * (a6[3] >> 3) * v107 + 8 * v111) = v27.i64[0];
      v103 = (8 * v111) | 8;
      *(_QWORD *)(*a6 + 8 * (a6[3] >> 3) * v107 + v103) = v99;
      v12 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)vdupq_n_s32(v102).u64[0]), v21, (int8x16_t)v28);
      *(_QWORD *)(*a6 + 8 * (a6[3] >> 3) * v104 + 8 * v111) = v20.i64[0];
      *(_QWORD *)(*a6 + 8 * (a6[3] >> 3) * v104 + v103) = v12.i64[0];
      v11 = v111 + 2;
      result = v108;
      v9 = a3;
    }
    while (v111 + 2 < v108[1]);
  }
  return result;
}

_QWORD *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIhNS1_15YImageParameterEEESA_EENS6_IKNS7_IDv2_hNS1_16UVImageParameterEEESF_EENS6_IKNS7_IDv2_fNS1_13FlowParameterEEESK_EENS6_IKNS7_IfNS1_14NLRegParameterEEESO_EENS6_ISJ_SJ_EENS1_12NLParametersEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSY_ENUlPvmE_8__invokeES11_m(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *);
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  _QWORD v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *))result[1];
    v4 = result[2];
    v3 = result[3];
    v5 = (__int128 *)(result + 4);
    v6 = *(unsigned int *)(*result + 16);
    v7 = v3 / v6;
    v8 = v3 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v21 = (__int128 *)(result + 12);
      v22 = (__int128 *)(result + 8);
      v19 = (__int128 *)(result + 20);
      v20 = (__int128 *)(result + 16);
      v18 = result + 24;
      do
      {
        v23[0] = ++v11;
        v23[1] = v4;
        v23[2] = v3;
        v13 = v5[1];
        v24 = *v5;
        v25 = v13;
        v14 = v22[1];
        v26 = *v22;
        v27 = v14;
        v15 = v21[1];
        v28 = *v21;
        v29 = v15;
        v16 = v20[1];
        v30 = *v20;
        v31 = v16;
        v17 = v19[1];
        v32 = *v19;
        v33 = v17;
        v35 = *((_DWORD *)v18 + 4);
        v34 = *(_OWORD *)v18;
        result = (_QWORD *)v2(v23);
      }
      while (v10 != v11);
    }
  }
  return result;
}

uint64_t apple::vision::OpticalFlow::LKTCPUCompute::gather<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const>(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  LODWORD(v2) = LODWORD(a2) + 1;
  if (a1[2] - 1 >= (unint64_t)(LODWORD(a2) + 1))
    v2 = (int)v2;
  else
    v2 = a1[2] - 1;
  v4 = HIDWORD(a2) + 1;
  if (a1[1] - 1 < v4)
    v4 = a1[1] - 1;
  v3 = a1[3];
  return *(unsigned __int8 *)(*a1 + v3 * SHIDWORD(a2) + SLODWORD(a2)) | (*(unsigned __int8 *)(*a1
                                                                                            + v3 * SHIDWORD(a2)
                                                                                            + v2) << 8) | (*(unsigned __int8 *)(*a1 + v4 * v3 + SLODWORD(a2)) << 16) | (*(unsigned __int8 *)(*a1 + v4 * v3 + v2) << 24);
}

unint64_t _ZN5apple6vision11OpticalFlow13LKTCPUCompute6gatherIKNS0_9NamedTypeIDv2_hNS1_16UVImageParameterEEEEEDaRKNS0_11ImageBufferIT_SB_EEDv2_i(uint64_t *a1, double a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = LODWORD(a2) + 1;
  if (a1[2] - 1 < v3)
    v3 = a1[2] - 1;
  v4 = *a1;
  v5 = HIDWORD(a2) + 1;
  if (a1[1] - 1 < (unint64_t)(int)v5)
    v5 = a1[1] - 1;
  v6 = v4 + 2 * (v2 >> 1) * SHIDWORD(a2);
  return *(unsigned __int16 *)(v6 + 2 * SLODWORD(a2)) | ((unint64_t)*(unsigned __int16 *)(v6 + 2 * v3) << 16) | ((unint64_t)*(unsigned __int16 *)(v4 + 2 * (v2 >> 1) * v5 + 2 * SLODWORD(a2)) << 32) | ((unint64_t)*(unsigned __int16 *)(v4 + 2 * (v2 >> 1) * v5 + 2 * v3) << 48);
}

float32x2_t _ZN5apple6vision11OpticalFlow13LKTCPUCompute8sampleLNINS0_9NamedTypeIDv2_fNS1_13FlowParameterEEEEET_RKNS0_11ImageBufferIKS8_SA_EES5_(uint64_t *a1, double a2)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  unint64_t v13;

  v2 = a1[2];
  v3 = (float)v2 + -1.0;
  if (v3 >= *(float *)&a2)
    v3 = *(float *)&a2;
  if (*(float *)&a2 < 0.0)
    v3 = 0.0;
  v4 = a1[1];
  v6 = (float)v4 + -1.0;
  if (v6 >= *((float *)&a2 + 1))
    v6 = *((float *)&a2 + 1);
  if (*((float *)&a2 + 1) >= 0.0)
    v7 = v6;
  else
    v7 = 0.0;
  v8 = (uint64_t)v3;
  v9 = (uint64_t)v7;
  v10 = v2 - 1;
  if (v10 >= (uint64_t)v3 + 1)
    v10 = v8 + 1;
  v11 = v4 - 1;
  if (v11 >= v9 + 1)
    v11 = v9 + 1;
  v12 = v3 - (float)v8;
  v13 = (unint64_t)a1[3] >> 3;
  v5 = *a1;
  return vmla_n_f32(vmul_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v5 + 8 * v11 * v13 + 8 * v10), v12), *(float32x2_t *)(v5 + 8 * v11 * v13 + 8 * v8), 1.0 - v12), v7 - (float)v9), vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v5 + 8 * v13 * v9 + 8 * v10), v12), *(float32x2_t *)(v5 + 8 * v13 * v9 + 8 * v8), 1.0 - v12), 1.0 - (float)(v7 - (float)v9));
}

void apple::vision::OpticalFlow::LKTCPUCompute::prepareMatrices(uint64_t *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8, float32x2_t *a9)
{
  uint64_t v17;
  float32x2_t v18;
  uint64_t v19;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  unint64_t v29;
  float32x2_t v30;
  float v31;
  unint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  float v38;
  unint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  float v50;
  float32x2_t v51;
  float32x2_t v52;
  uint64_t v53;
  float32x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  simd_float4 v62;
  float32x4_t v63;
  int32x2_t v64;
  float32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int32x2_t v68;
  float32x2_t v69;
  int32x2_t v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x4_t v80;

  if (a1[1] >= 1)
  {
    v17 = 0;
    v74 = *a9;
    v75 = a9[1];
    v72 = (float32x2_t)vdup_n_s32(0x3D23D70Bu);
    v73 = (float32x2_t)vdup_n_s32(0x3A800000u);
    v18 = (float32x2_t)vdup_n_s32(0x3E4CCCCDu);
    v19 = *a1;
    v71 = (float)*a1;
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v25.f32[0] = (float)v17;
      v25.f32[1] = v71;
      v79 = v25;
      v26 = _ZN5apple6vision11OpticalFlow13LKTCPUCompute8sampleLNINS0_9NamedTypeIDv2_fNS1_13FlowParameterEEEEET_RKNS0_11ImageBufferIKS8_SA_EES5_(a2, COERCE_DOUBLE(vmul_f32(v75, v25)));
      v27 = *(float32x2_t *)(*a3 + 8 * (a3[3] >> 3) * v19 + 8 * v17);
      v28 = vmul_f32(v74, v26);
      v29 = a5[2];
      v30 = vadd_f32(v79, v28);
      v31 = (float)v29 + -1.0;
      if (v31 >= v30.f32[0])
        v31 = v30.f32[0];
      v33 = *a5;
      v32 = a5[1];
      v34 = (float)v32 + -1.0;
      if (v34 >= v30.f32[1])
        v34 = v30.f32[1];
      v35 = v29 - 1;
      v36 = a6[2];
      v38 = (float)v36 + -1.0;
      if (v38 >= v30.f32[0])
        v38 = v30.f32[0];
      v39 = a6[1];
      v41 = (float)v39 + -1.0;
      if (v41 >= v30.f32[1])
        v41 = v30.f32[1];
      if (v30.f32[1] >= 0.0)
        v42 = v34;
      else
        v42 = 0.0;
      if (v30.f32[1] >= 0.0)
        v43 = v41;
      else
        v43 = 0.0;
      if (v30.f32[0] < 0.0)
        v31 = 0.0;
      v44 = (uint64_t)v31;
      v45 = (uint64_t)v42;
      if (v30.f32[0] >= 0.0)
        v46 = v38;
      else
        v46 = 0.0;
      if (v35 >= (uint64_t)v31 + 1)
        v35 = v44 + 1;
      v47 = v32 - 1;
      if (v47 >= v45 + 1)
        v47 = v45 + 1;
      v48 = (unint64_t)a5[3] >> 3;
      v49 = v31 - (float)v44;
      v50 = v42 - (float)v45;
      v51 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v33 + 8 * v48 * v45 + 8 * v35), v49), *(float32x2_t *)(v33 + 8 * v48 * v45 + 8 * v44), 1.0 - v49);
      v52 = vmul_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v33 + 8 * v47 * v48 + 8 * v35), v49), *(float32x2_t *)(v33 + 8 * v47 * v48 + 8 * v44), 1.0 - v49), v50);
      v53 = (uint64_t)v46;
      v54 = vmla_n_f32(v52, v51, 1.0 - v50);
      v55 = (uint64_t)v43;
      if ((uint64_t)(v36 - 1) >= (uint64_t)v46 + 1)
        v56 = v53 + 1;
      else
        v56 = v36 - 1;
      if ((uint64_t)(v39 - 1) >= v55 + 1)
        v57 = v55 + 1;
      else
        v57 = v39 - 1;
      v58 = v46 - (float)v53;
      v37 = a6[3];
      v40 = *a6;
      v59 = vaddq_f32(*(float32x4_t *)(*a4 + 16 * (a4[3] >> 4) * v19 + 16 * v17), vmlaq_n_f32(vmulq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v40 + 16 * v57 * (v37 >> 4) + 16 * v56), v58), *(float32x4_t *)(v40 + 16 * v57 * (v37 >> 4) + 16 * v53), 1.0 - v58), v43 - (float)v55), vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v40 + 16 * (v37 >> 4) * v55 + 16 * v56), v58), *(float32x4_t *)(v40 + 16 * (v37 >> 4) * v55 + 16 * v53), 1.0 - v58), 1.0 - (float)(v43 - (float)v55)));
      v60.i64[0] = 0x3F0000003F000000;
      v60.i64[1] = 0x3F0000003F000000;
      v61 = vsub_f32(v54, v27);
      v76 = vmulq_f32(v59, v60);
      v77 = (float32x2_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u64[0];
      v78 = vsub_f32(v61, vmla_n_f32(vmul_lane_f32(v77, v28, 1), *(float32x2_t *)v76.f32, v28.f32[0]));
      v80 = vmulq_f32(v76, v76);
      v62 = (simd_float4)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL);
      *(float32x2_t *)v62.f32 = vmla_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
      *(float32x2_t *)v63.f32 = vadd_f32(vmla_f32((float32x2_t)*(_OWORD *)&_simd_pow_f4(v62, (simd_float4)xmmword_1A15FB4D0), (float32x2_t)0x4100000041000000, vabd_f32(v54, v27)), v73);
      v64 = (int32x2_t)vdiv_f32(vmul_f32(*(float32x2_t *)v76.f32, v77), *(float32x2_t *)v63.f32);
      v63.i64[1] = v63.i64[0];
      *(float32x2_t *)v65.f32 = v78;
      *(float32x2_t *)&v65.u32[2] = v78;
      v66 = (int8x16_t)vdivq_f32(v80, v63);
      v67 = (int8x16_t)vdivq_f32(vmulq_f32(v76, v65), v63);
      *(float32x2_t *)v65.f32 = vdiv_f32(vdiv_f32(_D8, vsqrt_f32(vadd_f32(vdiv_f32(vmul_f32(v61, v61), v72), _D8))), v18);
      v68 = (int32x2_t)vextq_s8(v66, v66, 8uLL).u64[0];
      *(float32x2_t *)v66.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v66.i8, v68), (float32x2_t)vzip2_s32(*(int32x2_t *)v66.i8, v68));
      v69 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v65.f32, v64), (float32x2_t)vzip2_s32(*(int32x2_t *)v65.f32, v64));
      v70 = (int32x2_t)vextq_s8(v67, v67, 8uLL).u64[0];
      *(float32x2_t *)v66.i8 = vmul_n_f32(*(float32x2_t *)v66.i8, v69.f32[0]);
      v66.u64[1] = (unint64_t)vmul_n_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v67.i8, v70), (float32x2_t)vzip2_s32(*(int32x2_t *)v67.i8, v70)), -v69.f32[0]);
      *(int8x16_t *)(*a7 + 16 * (a7[3] >> 4) * v19 + 16 * v17) = v66;
      *(_DWORD *)(*a8 + 4 * (a8[3] >> 2) * v19 + 4 * v17++) = vmul_lane_f32(v69, v69, 1).u32[0];
    }
    while (v17 < a1[1]);
  }
}

__int128 *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_13FlowParameterEEESB_EENS6_IKNS7_IS8_NS1_16FeatureParameterEEESF_EENS6_IKNS7_IDv4_fNS1_19DerivativeParameterEEESK_EESG_SL_NS6_INS7_ISH_NS1_21MatrixAdiagBParameterEEESN_EENS6_INS7_IfNS1_18MatrixIxyParameterEEESQ_EENS1_16SolverParametersEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSZ_ENUlPvmE_8__invokeES12_m(__int128 *result, int a2)
{
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  _QWORD v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *))*((_QWORD *)result + 1);
    v3 = *((_QWORD *)result + 2);
    v4 = *((_QWORD *)result + 3);
    v5 = result + 2;
    v6 = *(unsigned int *)(*(_QWORD *)result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v25 = result + 6;
      v26 = result + 4;
      v23 = result + 10;
      v24 = result + 8;
      v21 = result + 14;
      v22 = result + 12;
      v20 = result + 16;
      do
      {
        v27[0] = ++v11;
        v27[1] = v3;
        v27[2] = v4;
        v13 = v5[1];
        v28 = *v5;
        v29 = v13;
        v14 = v26[1];
        v30 = *v26;
        v31 = v14;
        v15 = v25[1];
        v32 = *v25;
        v33 = v15;
        v16 = v24[1];
        v34 = *v24;
        v35 = v16;
        v17 = v23[1];
        v36 = *v23;
        v37 = v17;
        v18 = v22[1];
        v38 = *v22;
        v39 = v18;
        v19 = v21[1];
        v40 = *v21;
        v41 = v19;
        v42 = *v20;
        result = (__int128 *)v2(v27);
      }
      while (v10 != v11);
    }
  }
  return result;
}

CVPixelBufferRef *apple::vision::CVPixelBufferWrapper::BaseAddressLock<0ull>::~BaseAddressLock(CVPixelBufferRef *a1)
{
  CVPixelBufferUnlockBaseAddress(*a1, 0);
  CVPixelBufferRelease(*a1);
  return a1;
}

vImage_Error apple::vision::OpticalFlow::LKTCPUCompute::copyFlowToOutput16F(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  vImage_Buffer v20;
  vImage_Buffer src;

  v3 = *a1;
  v4 = a2[2];
  v5 = a2[3];
  if (v4 >= 1)
    v6 = 1;
  else
    v6 = a2[2];
  v7 = v6 - 1;
  v8 = a2[1];
  v9 = v8 - 1;
  if (v8 - 1 >= v3)
    v9 = *a1;
  v10 = v7 + (v5 >> 3) * v9;
  v11 = v4 - v7;
  if (v11 < v4)
    v4 = v11;
  src.data = (void *)(*a2 + 8 * v10);
  src.height = v8 != v9;
  src.width = 2 * (v4 & 0x1FFFFFFFFFFFFFFFLL);
  src.rowBytes = v5;
  v12 = a3[2];
  v13 = a3[3];
  if (v12 >= 1)
    v14 = 1;
  else
    v14 = a3[2];
  v15 = v14 - 1;
  v16 = a3[1];
  if (v16 - 1 < v3)
    v3 = v16 - 1;
  v17 = v15 + (v13 >> 2) * v3;
  v18 = v12 - v15;
  if (v18 < v12)
    v12 = v18;
  v20.data = (void *)(*a3 + 4 * v17);
  v20.height = v16 != v3;
  v20.width = 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
  v20.rowBytes = v13;
  return vImageConvert_PlanarFtoPlanar16F(&src, &v20, 0x10u);
}

_QWORD *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_13FlowParameterEEESB_EENS6_INS1_12Pixel_UV_16FESD_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSL_ENUlPvmE_8__invokeESO_m(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *, _OWORD *);
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[3];
  _OWORD v17[2];
  _OWORD v18[2];

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *, _OWORD *, _OWORD *))result[1];
    v3 = result[2];
    v4 = result[3];
    v5 = result + 4;
    v6 = *(unsigned int *)(*result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v13 = result + 8;
      do
      {
        v16[0] = ++v11;
        v16[1] = v3;
        v16[2] = v4;
        v14 = v5[1];
        v17[0] = *v5;
        v17[1] = v14;
        v15 = v13[1];
        v18[0] = *v13;
        v18[1] = v15;
        result = (_QWORD *)v2(v16, v17, v18);
      }
      while (v10 != v11);
    }
  }
  return result;
}

void *apple::vision::OpticalFlow::LKTCPUCompute::copyFlowToOutput32F(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  size_t v4;
  void *v5;
  size_t v6;
  const void *v7;
  size_t v8;

  v3 = *a1;
  v4 = a3[3];
  v5 = (void *)(*a3 + 8 * (v4 >> 3) * *a1);
  v6 = a2[3];
  v7 = (const void *)(*a2 + 8 * (v6 >> 3) * v3);
  if (v6 >= v4)
    v8 = a3[3];
  else
    v8 = v6;
  return memcpy(v5, v7, v8);
}

_QWORD *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_13FlowParameterEEESB_EENS6_INS1_12Pixel_UV_32FESD_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSL_ENUlPvmE_8__invokeESO_m(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *, _OWORD *);
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[3];
  _OWORD v17[2];
  _OWORD v18[2];

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *, _OWORD *, _OWORD *))result[1];
    v3 = result[2];
    v4 = result[3];
    v5 = result + 4;
    v6 = *(unsigned int *)(*result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v13 = result + 8;
      do
      {
        v16[0] = ++v11;
        v16[1] = v3;
        v16[2] = v4;
        v14 = v5[1];
        v17[0] = *v5;
        v17[1] = v14;
        v15 = v13[1];
        v18[0] = *v13;
        v18[1] = v15;
        result = (_QWORD *)v2(v16, v17, v18);
      }
      while (v10 != v11);
    }
  }
  return result;
}

std::logic_error *apple::vision::OpticalFlow::LKTCPU::InvalidPixelFormatException::InvalidPixelFormatException(std::logic_error *this, int a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(this, "pixelFormatType");
  result->__vftable = (std::logic_error_vtbl *)off_1E453A0C8;
  LODWORD(result[1].__vftable) = a2;
  return result;
}

void apple::vision::OpticalFlow::LKTCPU::InvalidPixelFormatException::~InvalidPixelFormatException(apple::vision::OpticalFlow::LKTCPU::InvalidPixelFormatException *this)
{
  MEMORY[0x1A1B0A5EC](this);
  JUMPOUT(0x1A1B0A898);
}

_QWORD *apple::vision::CVPixelBufferWrapper::BaseAddressLock<0ull>::BaseAddressLock(_QWORD *a1, CVPixelBufferRef texture)
{
  CVReturn v4;
  CVReturn v6;
  _DWORD *exception;

  *a1 = texture;
  CVPixelBufferRetain(texture);
  v4 = CVPixelBufferLockBaseAddress(texture, 0);
  if (v4)
  {
    v6 = v4;
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E453A0F0;
    exception[2] = v6;
  }
  return a1;
}

void apple::vision::CVPixelBufferWrapper::LockException::~LockException(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A1B0A898);
}

uint64_t *apple::vision::OpticalFlow::LKTCPUCompute::computeFeatures(uint64_t *result, uint64_t *a2, _QWORD *a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  unsigned int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float v26;
  unsigned int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float v32;
  float v33;
  float32x2_t v34;

  if (result[1] >= 1)
  {
    v11 = result;
    v12 = 0;
    v13 = *result;
    v33 = (float)*result;
    do
    {
      *(float *)&v14 = (float)v12;
      *((float *)&v14 + 1) = v33;
      v34 = *(float32x2_t *)&v14;
      v15 = apple::vision::OpticalFlow::LKTCPUCompute::sampleLN<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>>(a2, COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v14, (float32x2_t)3204448256)), v14, a6, a7, a8, a9);
      v21 = apple::vision::OpticalFlow::LKTCPUCompute::sampleLN<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>>(a2, COERCE_DOUBLE(vadd_f32(v34, (float32x2_t)1056964608)), v16, v17, v18, v19, v20);
      v27 = apple::vision::OpticalFlow::LKTCPUCompute::sampleLN<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>>(a2, COERCE_DOUBLE(vadd_f32(v34, (float32x2_t)0xBF00000000000000)), v22, v23, v24, v25, v26);
      result = (uint64_t *)apple::vision::OpticalFlow::LKTCPUCompute::sampleLN<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>>(a2, COERCE_DOUBLE(vadd_f32(v34, (float32x2_t)0x3F00000000000000)), v28, v29, v30, v31, v32);
      *(float32x2_t *)(*a3 + 8 * (a3[3] >> 3) * v13 + 8 * v12++) = vcvt_f32_s32(vsub_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(result, v21), (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(v27, v15), (int8x8_t)0xFF000000FFLL)));
    }
    while (v12 < v11[1]);
  }
  return result;
}

_QWORD *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIhNS1_15YImageParameterEEESA_EENS6_INS7_IDv2_fNS1_16FeatureParameterEEESE_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSM_ENUlPvmE_8__invokeESP_m(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *, _OWORD *);
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[3];
  _OWORD v17[2];
  _OWORD v18[2];

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *, _OWORD *, _OWORD *))result[1];
    v3 = result[2];
    v4 = result[3];
    v5 = result + 4;
    v6 = *(unsigned int *)(*result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v13 = result + 8;
      do
      {
        v16[0] = ++v11;
        v16[1] = v3;
        v16[2] = v4;
        v14 = v5[1];
        v17[0] = *v5;
        v17[1] = v14;
        v15 = v13[1];
        v18[0] = *v13;
        v18[1] = v15;
        result = (_QWORD *)v2(v16, v17, v18);
      }
      while (v10 != v11);
    }
  }
  return result;
}

uint64_t *apple::vision::OpticalFlow::LKTCPUCompute::computeDerivatives(uint64_t *result, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float32x2_t v27;
  uint64_t v28;
  float32x2_t v29;
  uint64_t v30;
  float32x2_t v31;
  uint64_t v32;
  __int128 v33;

  if (result[1] >= 1)
  {
    v3 = 0;
    v4 = *result;
    v5 = *result - 2;
    v6 = *result - 1;
    v7 = *result + 1;
    v8 = *result + 2;
    __asm { FMOV            V1.2S, #12.0 }
    do
    {
      v14 = v3 - 2;
      v15 = a2[2] - 1;
      if (v15 < (uint64_t)(v3 - 2))
        v14 = a2[2] - 1;
      if (v3 < 2)
        v14 = 0;
      v16 = *a2;
      v17 = a2[1] - 1;
      if (v17 >= v4)
        v18 = v4;
      else
        v18 = a2[1] - 1;
      v19 = v3 - 1;
      if (v15 < (uint64_t)(v3 - 1))
        v19 = a2[2] - 1;
      if (!v3)
        v19 = 0;
      v20 = v3 + 1;
      if (v15 >= (uint64_t)(v3 + 1))
        v21 = v3 + 1;
      else
        v21 = a2[2] - 1;
      v22 = v3 + 2;
      if (v15 < (uint64_t)(v3 + 2))
        v22 = a2[2] - 1;
      if (v15 >= (uint64_t)v3)
        v15 = v3;
      if (v17 >= v5)
        v23 = v5;
      else
        v23 = a2[1] - 1;
      if (v4 < 2)
        v23 = 0;
      if (v17 >= v6)
        v24 = v6;
      else
        v24 = a2[1] - 1;
      if (v4 < 0)
        v18 = 0;
      v25 = (unint64_t)a2[3] >> 3;
      v26 = v16 + 8 * v18 * v25;
      v27 = *(float32x2_t *)(v26 + 8 * v14);
      if (v4 <= 0)
        v28 = 0;
      else
        v28 = v24;
      v29 = *(float32x2_t *)(v16 + 8 * v28 * v25 + 8 * v15);
      if (v17 >= v7)
        v30 = v7;
      else
        v30 = a2[1] - 1;
      if (v4 < -1)
        v30 = 0;
      v31 = *(float32x2_t *)(v16 + 8 * v30 * v25 + 8 * v15);
      if (v17 >= v8)
        v32 = v8;
      else
        v32 = a2[1] - 1;
      if (v4 < -2)
        v32 = 0;
      *(float32x2_t *)&v33 = vdiv_f32(vsub_f32(vmla_f32(vmls_f32(v27, (float32x2_t)0x4100000041000000, *(float32x2_t *)(v26 + 8 * v19)), (float32x2_t)0x4100000041000000, *(float32x2_t *)(v26 + 8 * v21)), *(float32x2_t *)(v26 + 8 * v22)), _D1);
      *((float32x2_t *)&v33 + 1) = vdiv_f32(vsub_f32(vmla_f32(vmls_f32(*(float32x2_t *)(v16 + 8 * v23 * v25 + 8 * v15), (float32x2_t)0x4100000041000000, v29), (float32x2_t)0x4100000041000000, v31), *(float32x2_t *)(v16 + 8 * v32 * v25 + 8 * v15)), _D1);
      *(_OWORD *)(*a3 + 16 * (a3[3] >> 4) * v4 + 16 * v3++) = v33;
    }
    while (v20 < result[1]);
  }
  return result;
}

_QWORD *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_fNS1_16FeatureParameterEEESB_EENS6_INS7_IDv4_fNS1_19DerivativeParameterEEESF_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSN_ENUlPvmE_8__invokeESQ_m(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *, _OWORD *);
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[3];
  _OWORD v17[2];
  _OWORD v18[2];

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *, _OWORD *, _OWORD *))result[1];
    v3 = result[2];
    v4 = result[3];
    v5 = result + 4;
    v6 = *(unsigned int *)(*result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v13 = result + 8;
      do
      {
        v16[0] = ++v11;
        v16[1] = v3;
        v16[2] = v4;
        v14 = v5[1];
        v17[0] = *v5;
        v17[1] = v14;
        v15 = v13[1];
        v18[0] = *v13;
        v18[1] = v15;
        result = (_QWORD *)v2(v16, v17, v18);
      }
      while (v10 != v11);
    }
  }
  return result;
}

uint64_t apple::vision::OpticalFlow::LKTCPUCompute::sampleLN<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>>(uint64_t *a1, double a2, double a3, double a4, double a5, double a6, float a7)
{
  unint64_t v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v7 = a1[2];
  v8 = a1[3];
  v9 = (float)v7 + -1.0;
  if (v9 >= *(float *)&a2)
    v9 = *(float *)&a2;
  if (*(float *)&a2 < 0.0)
    v9 = 0.0;
  v11 = *a1;
  v10 = a1[1];
  v12 = (float)v10 + -1.0;
  if (v12 >= *((float *)&a2 + 1))
    v12 = *((float *)&a2 + 1);
  if (*((float *)&a2 + 1) >= 0.0)
    v13 = v12;
  else
    v13 = 0.0;
  v14 = (uint64_t)v9;
  v15 = (uint64_t)v13;
  v16 = v7 - 1;
  if (v16 >= (uint64_t)v9 + 1)
    v16 = v14 + 1;
  v17 = v10 - 1;
  if (v17 >= v15 + 1)
    v17 = v15 + 1;
  *(float *)&v18 = (float)v14;
  v19 = v9 - (float)v14;
  v20 = v13 - (float)v15;
  v21 = v11 + v8 * v15;
  LOBYTE(v18) = *(_BYTE *)(v21 + v14);
  LOBYTE(a7) = *(_BYTE *)(v21 + v16);
  *(float *)&v22 = v19 * (float)LODWORD(a7);
  *(float *)&v23 = *(float *)&v22 + (float)((float)v18 * (float)(1.0 - v19));
  LODWORD(v21) = (int)*(float *)&v23;
  v24 = v11 + v17 * v8;
  LOBYTE(v23) = *(_BYTE *)(v24 + v14);
  LOBYTE(v22) = *(_BYTE *)(v24 + v16);
  return (int)(float)((float)(v20
                                          * (float)(int)(float)((float)(v19 * (float)v22)
                                                                            + (float)((float)v23 * (float)(1.0 - v19))))
                                  + (float)((float)v21 * (float)(1.0 - v20)));
}

CVPixelBufferRef *apple::vision::CVPixelBufferWrapper::BaseAddressLock<1ull>::~BaseAddressLock(CVPixelBufferRef *a1)
{
  CVPixelBufferUnlockBaseAddress(*a1, 1uLL);
  CVPixelBufferRelease(*a1);
  return a1;
}

uint64_t *apple::vision::OpticalFlow::LKTCPUCompute::convertBGRA8888ToYUVF32(uint64_t *result, _QWORD *a2, _QWORD *a3, _QWORD *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  float32x2_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  float v18;
  float v19;
  _BYTE *v20;

  if (result[1] >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = *result;
    do
    {
      v17 = (_BYTE *)(*a2 + 4 * (a2[3] >> 2) * v16 + v14);
      LOBYTE(a12) = *v17;
      v18 = (float)LODWORD(a12);
      v12.i8[0] = v17[1];
      v19 = (float)v12.u32[0];
      LOBYTE(v13) = v17[2];
      v13 = (float)LODWORD(v13);
      *(_BYTE *)(*a3 + a3[3] * v16 + v15) = (int)(float)((float)((float)(v19 * 0.587) + (float)(v13 * 0.299))
                                                       + (float)(v18 * 0.114));
      v12 = vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)0xBED65FD9BEA9A027, v19), (float32x2_t)0x3F000000BE2CBFB1, v13), (float32x2_t)0xBDA6809D3F000000, v18);
      a12 = COERCE_DOUBLE(vcvt_s32_f32(vadd_f32(v12, (float32x2_t)0x4300000043000000)));
      v20 = (_BYTE *)(*a4 + 2 * (a4[3] >> 1) * v16 + 2 * v15);
      v20[1] = BYTE4(a12);
      *v20 = LOBYTE(a12);
      ++v15;
      v14 += 4;
    }
    while (v15 < result[1]);
  }
  return result;
}

_QWORD *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS1_13Pixel_BGRA_8UES8_EENS6_INS0_9NamedTypeIhNS1_15YImageParameterEEESC_EENS6_INSA_IDv2_hNS1_16UVImageParameterEEESG_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSO_ENUlPvmE_8__invokeESR_m(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *, _OWORD *, _OWORD *);
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _QWORD v18[3];
  _OWORD v19[2];
  _OWORD v20[2];
  _OWORD v21[2];

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *, _OWORD *, _OWORD *, _OWORD *))result[1];
    v3 = result[2];
    v4 = result[3];
    v5 = result + 4;
    v6 = *(unsigned int *)(*result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v17 = result + 8;
      v13 = result + 12;
      do
      {
        v18[0] = ++v11;
        v18[1] = v3;
        v18[2] = v4;
        v14 = v5[1];
        v19[0] = *v5;
        v19[1] = v14;
        v15 = v17[1];
        v20[0] = *v17;
        v20[1] = v15;
        v16 = v13[1];
        v21[0] = *v13;
        v21[1] = v16;
        result = (_QWORD *)v2(v18, v19, v20, v21);
      }
      while (v10 != v11);
    }
  }
  return result;
}

uint64_t *apple::vision::OpticalFlow::LKTCPUCompute::convertBGRA8888ToYF32(uint64_t *result, _QWORD *a2, _QWORD *a3, double a4, double a5, double a6, float a7, float a8, float a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  if (result[1] >= 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = *result;
    do
    {
      v12 = (_BYTE *)(*a2 + 4 * (a2[3] >> 2) * v11 + v9);
      LOBYTE(a7) = v12[1];
      LOBYTE(a8) = *v12;
      LOBYTE(a9) = v12[2];
      a9 = (float)LODWORD(a9);
      a8 = (float)LODWORD(a8);
      a7 = (float)((float)((float)LODWORD(a7) * 0.587) + (float)(a9 * 0.299)) + (float)(a8 * 0.114);
      *(_BYTE *)(*a3 + a3[3] * v11 + v10++) = (int)a7;
      v9 += 4;
    }
    while (v10 < result[1]);
  }
  return result;
}

_QWORD *apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::dispatchProcessing<apple::vision::ImageBuffer<apple::vision::OpticalFlow::Pixel_BGRA_8U const,apple::vision::OpticalFlow::Pixel_BGRA_8U const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>>>(void (*)(apple::vision::OpticalFlow::ComputeParameters const&,apple::vision::ImageBuffer<apple::vision::OpticalFlow::Pixel_BGRA_8U const,apple::vision::OpticalFlow::Pixel_BGRA_8U const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>> const&),int,apple::vision::ImageBuffer<apple::vision::OpticalFlow::Pixel_BGRA_8U const,apple::vision::OpticalFlow::Pixel_BGRA_8U const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>> const&)::{lambda(void *,unsigned long)#1}::__invoke(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *, _OWORD *);
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[3];
  _OWORD v17[2];
  _OWORD v18[2];

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *, _OWORD *, _OWORD *))result[1];
    v3 = result[2];
    v4 = result[3];
    v5 = result + 4;
    v6 = *(unsigned int *)(*result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v13 = result + 8;
      do
      {
        v16[0] = ++v11;
        v16[1] = v3;
        v16[2] = v4;
        v14 = v5[1];
        v17[0] = *v5;
        v17[1] = v14;
        v15 = v13[1];
        v18[0] = *v13;
        v18[1] = v15;
        result = (_QWORD *)v2(v16, v17, v18);
      }
      while (v10 != v11);
    }
  }
  return result;
}

uint64_t *apple::vision::OpticalFlow::LKTCPUCompute::downscale2x(uint64_t *result, uint64_t *a2, _QWORD *a3, double a4, double a5, double a6, float a7, float a8, float a9, float a10, float a11)
{
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;

  if (result[1] >= 1)
  {
    v22 = 0;
    v23 = *result;
    v24 = 2 * *result;
    v25 = 2;
    do
    {
      v26 = v25 - 2;
      v27 = v25 - 3;
      v28 = a2[3];
      v29 = a2[2] - 1;
      if (v29 < v25 - 3)
        v27 = a2[2] - 1;
      if (!v22)
        v27 = 0;
      v30 = *a2;
      v31 = a2[1] - 1;
      if (v31 >= v24 - 1)
        v32 = v24 - 1;
      else
        v32 = a2[1] - 1;
      if (v29 < v26)
        v26 = a2[2] - 1;
      if (v31 >= v24)
        v33 = v24;
      else
        v33 = a2[1] - 1;
      v34 = v25 - 1;
      if (v29 < v25 - 1)
        v34 = a2[2] - 1;
      if (v29 >= v25)
        v29 = v25;
      if (v31 >= (v24 | 1))
        v35 = v24 | 1;
      else
        v35 = a2[1] - 1;
      if (v23 <= 0)
        v32 = 0;
      v36 = v30 + v32 * v28;
      LOBYTE(a7) = *(_BYTE *)(v36 + v27);
      LOBYTE(a8) = *(_BYTE *)(v36 + v26);
      v37 = (float)LODWORD(a7);
      v38 = (float)LODWORD(a8);
      if (v23 < 0)
        v33 = 0;
      v39 = v30 + v33 * v28;
      LOBYTE(a9) = *(_BYTE *)(v39 + v27);
      a9 = (float)LODWORD(a9);
      LOBYTE(a10) = *(_BYTE *)(v39 + v26);
      v40 = (float)LODWORD(a10);
      LOBYTE(a11) = *(_BYTE *)(v36 + v34);
      a11 = (float)LODWORD(a11);
      LOBYTE(v11) = *(_BYTE *)(v36 + v29);
      v41 = (float)v11;
      LOBYTE(v12) = *(_BYTE *)(v39 + v34);
      v12 = (float)LODWORD(v12);
      LOBYTE(v13) = *(_BYTE *)(v39 + v29);
      v13 = (float)LODWORD(v13);
      if (v23 >= 0)
        v42 = v35;
      else
        v42 = 0;
      v43 = v30 + v42 * v28;
      LOBYTE(v14) = *(_BYTE *)(v43 + v27);
      v14 = (float)LODWORD(v14);
      if (v31 >= v24 + 2)
        v31 = v24 + 2;
      if (v23 < -1)
        v31 = 0;
      v44 = v30 + v31 * v28;
      LOBYTE(v16) = *(_BYTE *)(v44 + v27);
      LOBYTE(v15) = *(_BYTE *)(v43 + v26);
      v15 = (float)LODWORD(v15);
      v16 = (float)LODWORD(v16);
      LOBYTE(v17) = *(_BYTE *)(v44 + v26);
      LOBYTE(v18) = *(_BYTE *)(v43 + v34);
      v17 = (float)LODWORD(v17);
      v18 = (float)LODWORD(v18);
      LOBYTE(v19) = *(_BYTE *)(v43 + v29);
      LOBYTE(v20) = *(_BYTE *)(v44 + v34);
      v19 = (float)LODWORD(v19);
      v20 = (float)LODWORD(v20);
      LOBYTE(v21) = *(_BYTE *)(v44 + v29);
      v21 = (float)LODWORD(v21);
      v45 = (float)((float)(v37 + v41) + v16) + v21;
      v11 = 1117782016;
      a10 = (float)((float)((float)(v40 + v12) + v15) + v18) * 80.0;
      v46 = (float)(a10 + (float)(v45 * 6.0))
          + (float)((float)((float)((float)((float)((float)((float)((float)(v38 + a11) + a9) + v13) + v14) + v19) + v17)
                          + v20)
                  * 21.0);
      a8 = 384.0;
      a7 = (float)(v46 + 384.0) * 0.0019531;
      *(_BYTE *)(*a3 + a3[3] * v23 + v22++) = (int)a7;
      v25 += 2;
    }
    while (v22 < result[1]);
  }
  return result;
}

_QWORD *apple::vision::OpticalFlow::LKTCPUImpl<apple::vision::OpticalFlow::LKTCPUCompute>::dispatchProcessing<apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>>>(void (*)(apple::vision::OpticalFlow::ComputeParameters const&,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>> const&),int,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter> const>,apple::vision::ImageBuffer<apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>,apple::vision::NamedType<unsigned char,apple::vision::OpticalFlow::YImageParameter>> const&)::{lambda(void *,unsigned long)#1}::__invoke(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *, _OWORD *);
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[3];
  _OWORD v17[2];
  _OWORD v18[2];

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *, _OWORD *, _OWORD *))result[1];
    v3 = result[2];
    v4 = result[3];
    v5 = result + 4;
    v6 = *(unsigned int *)(*result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v13 = result + 8;
      do
      {
        v16[0] = ++v11;
        v16[1] = v3;
        v16[2] = v4;
        v14 = v5[1];
        v17[0] = *v5;
        v17[1] = v14;
        v15 = v13[1];
        v18[0] = *v13;
        v18[1] = v15;
        result = (_QWORD *)v2(v16, v17, v18);
      }
      while (v10 != v11);
    }
  }
  return result;
}

uint64_t *apple::vision::OpticalFlow::LKTCPUCompute::downscale2x(uint64_t *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x2_t v7;
  float32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float32x2_t v29;
  float v30;
  unsigned int v31;
  float v32;
  uint64_t v33;
  float32x2_t v34;
  float v35;
  float32x2_t v36;
  float v37;
  float32x2_t v38;
  unsigned int v39;
  unsigned int v40;
  float v41;
  float32x2_t v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float v53;
  float32x2_t v54;
  uint64_t v55;
  unsigned int v56;
  float32x2_t v57;
  unsigned int v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float v63;
  float32x2_t v64;
  unsigned int v65;
  float32x2_t v66;
  unsigned int v67;
  float32x2_t v68;
  int32x2_t v69;
  _BYTE *v70;

  if (result[1] >= 1)
  {
    v3 = 0;
    v4 = *result;
    v5 = 2 * *result;
    v6 = 2;
    v7 = (float32x2_t)vdup_n_s32(0x42A00000u);
    __asm
    {
      FMOV            V1.2S, #6.0
      FMOV            V2.2S, #21.0
    }
    v14 = (float32x2_t)vdup_n_s32(0x43C00000u);
    do
    {
      v15 = v6 - 3;
      v16 = a2[2] - 1;
      if (v16 < v6 - 3)
        v15 = a2[2] - 1;
      if (v3)
        v17 = v15;
      else
        v17 = 0;
      v18 = *a2;
      v19 = a2[1];
      v20 = v19 - 1;
      if (v19 - 1 >= v5 - 1)
        v21 = v5 - 1;
      else
        v21 = v19 - 1;
      if (v16 >= v6 - 2)
        v22 = v6 - 2;
      else
        v22 = a2[2] - 1;
      if (v20 >= v5)
        v23 = v5;
      else
        v23 = v19 - 1;
      if (v16 >= v6 - 1)
        v24 = v6 - 1;
      else
        v24 = a2[2] - 1;
      if (v16 >= v6)
        v25 = v6;
      else
        v25 = a2[2] - 1;
      if (v20 >= (v5 | 1))
        v26 = v5 | 1;
      else
        v26 = v20;
      if (v4 <= 0)
        v21 = 0;
      v27 = (unint64_t)a2[3] >> 1;
      v28 = v18 + 2 * v21 * v27;
      v29.f32[0] = (float)*(_WORD *)(v28 + 2 * v17);
      v30 = (float)HIBYTE(*(unsigned __int16 *)(v28 + 2 * v17));
      v31 = *(_WORD *)(v28 + 2 * v22);
      if (v4 < 0)
        v23 = 0;
      v32 = (float)HIBYTE(*(unsigned __int16 *)(v28 + 2 * v22));
      v33 = v18 + 2 * v23 * v27;
      v34.f32[0] = (float)*(_WORD *)(v33 + 2 * v17);
      v35 = (float)HIBYTE(*(unsigned __int16 *)(v33 + 2 * v17));
      v36.f32[0] = (float)*(_WORD *)(v33 + 2 * v22);
      v37 = (float)HIBYTE(*(unsigned __int16 *)(v33 + 2 * v22));
      v38.f32[0] = (float)*(_WORD *)(v28 + 2 * v24);
      v39 = HIBYTE(*(unsigned __int16 *)(v28 + 2 * v24));
      v40 = *(unsigned __int16 *)(v28 + 2 * v25);
      v41 = (float)v39;
      v42.f32[0] = (float)v40;
      v43 = (float)(v40 >> 8);
      v44 = *(_WORD *)(v33 + 2 * v24);
      v45 = HIBYTE(*(unsigned __int16 *)(v33 + 2 * v24));
      LODWORD(v33) = *(unsigned __int16 *)(v33 + 2 * v25);
      v46 = (float)v45;
      v47 = v33;
      v48 = v33 >> 8;
      if (v4 < 0)
        v26 = 0;
      v49 = v18 + 2 * v26 * v27;
      v50.f32[0] = (float)*(_WORD *)(v49 + 2 * v17);
      v51 = (float)HIBYTE(*(unsigned __int16 *)(v49 + 2 * v17));
      v52.f32[0] = (float)*(_WORD *)(v49 + 2 * v22);
      v53 = (float)HIBYTE(*(unsigned __int16 *)(v49 + 2 * v22));
      v29.f32[1] = v30;
      if (v20 >= v5 + 2)
        v20 = v5 + 2;
      if (v4 < -1)
        v20 = 0;
      v54.f32[1] = v32;
      v55 = v18 + 2 * v20 * v27;
      v56 = *(unsigned __int16 *)(v55 + 2 * v17);
      v34.f32[1] = v35;
      v57.f32[0] = (float)v56;
      v36.f32[1] = v37;
      v58 = *(unsigned __int16 *)(v55 + 2 * v22);
      v38.f32[1] = v41;
      v59.f32[0] = (float)v58;
      v42.f32[1] = v43;
      v60.f32[1] = v46;
      v61.f32[0] = (float)*(_WORD *)(v49 + 2 * v24);
      v62.f32[1] = (float)v48;
      v63 = (float)HIBYTE(*(unsigned __int16 *)(v49 + 2 * v24));
      v50.f32[1] = v51;
      v64.f32[0] = (float)*(_WORD *)(v49 + 2 * v25);
      v52.f32[1] = v53;
      v65 = *(unsigned __int16 *)(v55 + 2 * v24);
      v61.f32[1] = v63;
      v66.f32[0] = (float)v65;
      v64.f32[1] = (float)HIBYTE(*(unsigned __int16 *)(v49 + 2 * v25));
      v67 = *(unsigned __int16 *)(v55 + 2 * v25);
      v57.f32[1] = (float)(v56 >> 8);
      v68.f32[0] = (float)v67;
      v59.f32[1] = (float)(v58 >> 8);
      v66.f32[1] = (float)(v65 >> 8);
      v68.f32[1] = (float)(v67 >> 8);
      v60.f32[0] = (float)v44;
      v54.f32[0] = (float)v31;
      v62.f32[0] = (float)v47;
      v69 = vcvt_s32_f32(vmul_f32(vadd_f32(vmla_f32(vmla_f32(vmul_f32(vadd_f32(vadd_f32(vadd_f32(v36, v60), v52), v61), v7), _D1, vadd_f32(vadd_f32(vadd_f32(v29, v42), v57), v68)), _D2, vadd_f32(v66, vadd_f32(v59, vadd_f32(vadd_f32(vadd_f32(vadd_f32(v34, vadd_f32(v54, v38)), v62), v50), v64)))), v14), (float32x2_t)0x3B0000003B000000));
      v70 = (_BYTE *)(*a3 + 2 * (a3[3] >> 1) * v4 + 2 * v3);
      v70[1] = v69.i8[4];
      *v70 = v69.i8[0];
      ++v3;
      v6 += 2;
    }
    while (v3 < result[1]);
  }
  return result;
}

_QWORD *_ZZN5apple6vision11OpticalFlow10LKTCPUImplINS1_13LKTCPUComputeEE18dispatchProcessingIJNS0_11ImageBufferIKNS0_9NamedTypeIDv2_hNS1_16UVImageParameterEEESB_EENS6_ISA_SA_EEEEEvPFvRKNS1_17ComputeParametersEDpRKT_EiSK_ENUlPvmE_8__invokeESN_m(_QWORD *result, int a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *, _OWORD *);
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[3];
  _OWORD v17[2];
  _OWORD v18[2];

  if ((a2 & 0x80000000) == 0)
  {
    v2 = (uint64_t (*)(_QWORD *, _OWORD *, _OWORD *))result[1];
    v3 = result[2];
    v4 = result[3];
    v5 = result + 4;
    v6 = *(unsigned int *)(*result + 16);
    v7 = v4 / v6;
    v8 = v4 % v6;
    v9 = a2 + 1;
    v10 = -1;
    do
    {
      v11 = v10;
      if (v8 <= 0)
        v12 = v10;
      else
        v12 = v10 + 1;
      v10 = v12 + v7;
      v8 -= v8 > 0;
      --v9;
    }
    while (v9);
    if (v11 < v10)
    {
      v13 = result + 8;
      do
      {
        v16[0] = ++v11;
        v16[1] = v3;
        v16[2] = v4;
        v14 = v5[1];
        v17[0] = *v5;
        v17[1] = v14;
        v15 = v13[1];
        v18[0] = *v13;
        v18[1] = v15;
        result = (_QWORD *)v2(v16, v17, v18);
      }
      while (v10 != v11);
    }
  }
  return result;
}

_QWORD *apple::vision::CVPixelBufferWrapper::BaseAddressLock<1ull>::BaseAddressLock(_QWORD *a1, CVPixelBufferRef texture)
{
  CVReturn v4;
  CVReturn v6;
  _DWORD *exception;

  *a1 = texture;
  CVPixelBufferRetain(texture);
  v4 = CVPixelBufferLockBaseAddress(texture, 1uLL);
  if (v4)
  {
    v6 = v4;
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E453A0F0;
    exception[2] = v6;
  }
  return a1;
}

void sub_1A13FC354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A13FC48C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13FC550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13FC714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A13FC818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (v3)
    operator delete(v3);

  _Unwind_Resume(a1);
}

void sub_1A13FC94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_1A13FCA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_1A13FCBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_1A13FCC94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<MPClusteringTreeNode *>::__init_with_size[abi:ne180100]<MPClusteringTreeNode **,MPClusteringTreeNode **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1A13FCD44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A13FCDDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13FCF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1A13FD0B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13FD134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13FD1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13FD27C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id _validatedEntityPrintOriginatingRequestSpecifierCompatibility(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  if (v11)
  {
    objc_msgSend(v11, "VNEntityIdentificationModelPrintOriginatingRequestSpecifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v13, "hasModelEquivalencyToRequestSpecifier:", v12) & 1) != 0)
    {
      v14 = v11;
    }
    else
    {
      if (a5)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ was generated by %@, which is not equivalent to %@"), v11, v13, v12);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(2, v15, 0);
        *a5 = (id)objc_claimAutoreleasedReturnValue();

      }
      v14 = 0;
    }
  }
  else
  {
    if (!a5)
    {
      v14 = 0;
      goto LABEL_10;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ does not have a %@"), v9, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(2, v13, 0);
    v14 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_10:
  return v14;
}

void sub_1A13FD3E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A13FD490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13FD5E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13FD694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13FD714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id VNEntityUniqueIdentifierClasses()
{
  if (VNEntityUniqueIdentifierClasses::ourOnceToken != -1)
    dispatch_once(&VNEntityUniqueIdentifierClasses::ourOnceToken, &__block_literal_global_6094);
  return (id)VNEntityUniqueIdentifierClasses::classesSet;
}

id VNEntityUniqueIdentifierSupportedRequestSpecifiers()
{
  if (VNEntityUniqueIdentifierSupportedRequestSpecifiers::ourOnceToken != -1)
    dispatch_once(&VNEntityUniqueIdentifierSupportedRequestSpecifiers::ourOnceToken, &__block_literal_global_25);
  return (id)VNEntityUniqueIdentifierSupportedRequestSpecifiers::ourRequestSpecifiers;
}

void sub_1A13FDA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A13FDB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1A13FDB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t VNEntityIdentificationModelPrintConformingObject(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  VNEntityIdentificationModelPrintConformingClasses();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsObject:", objc_opt_class());

  return v3;
}

void sub_1A13FDC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id VNEntityIdentificationModelPrintConformingClasses()
{
  if (VNEntityIdentificationModelPrintConformingClasses::onceToken != -1)
    dispatch_once(&VNEntityIdentificationModelPrintConformingClasses::onceToken, &__block_literal_global_30);
  return (id)VNEntityIdentificationModelPrintConformingClasses::ourEntityPrintClasses;
}

void sub_1A13FDD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A13FDDB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VNEntityIdentificationModelObservationConformingObject(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  VNEntityIdentificationModelObservationConformingClasses();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsObject:", objc_opt_class());

  return v3;
}

void sub_1A13FDE20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id VNEntityIdentificationModelObservationConformingClasses()
{
  if (VNEntityIdentificationModelObservationConformingClasses::onceToken != -1)
    dispatch_once(&VNEntityIdentificationModelObservationConformingClasses::onceToken, &__block_literal_global_93);
  return (id)VNEntityIdentificationModelObservationConformingClasses::ourObservationClasses;
}

void sub_1A13FDF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A13FDFD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13FE3A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float *generateQuadrilaterals(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, _DWORD *a6, float a7)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *result;
  unsigned int v17;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  float *v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float v42;
  float v43;
  int8x16_t v44;
  float *v45;
  float v46;
  int8x16_t v47;
  float *v48;
  float v49;
  int64x2_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int8x16_t v62;
  int64x2_t v63;
  int8x16_t v64;
  uint64_t v66;
  uint64_t v68;
  float *v69;
  float v70;
  float v71;
  float *v72;
  uint64_t v73;
  float v74;
  float v75;
  float *v76;
  float *v77;
  float v78;
  float v79;
  float *v80;
  uint64_t v81;
  float v82;
  float v83;
  float *v84;
  float *v85;
  uint64_t v86;

  v9 = 0;
  v10 = 0;
  v86 = *MEMORY[0x1E0C80C00];
  v11 = a4;
  v12 = (float)(a7 * 256.0) * (float)(a7 * 256.0);
  v66 = a2;
  do
  {
    v13 = 0;
    v68 = v9;
    v14 = (float *)(a1 + (v9 << 6));
    v69 = v14 + 8;
    do
    {
      v15 = (float *)(a3 + (v13 << 6));
      result = leqIntersect(v14, v15, &v70, &v71);
      if (v70 < 0.0)
        goto LABEL_4;
      v17 = 0;
      if (v70 <= 255.0 && v71 >= 0.0 && v71 <= 255.0)
      {
        v72 = v14;
        v73 = a3 + (v13 << 6);
        result = leqIntersect(v14, v15 + 8, &v74, &v75);
        if (v74 < 0.0)
          goto LABEL_4;
        v17 = 0;
        if (v74 <= 255.0 && v75 >= 0.0 && v75 <= 255.0)
        {
          v76 = v14;
          v77 = v15 + 8;
          result = leqIntersect(v69, (float *)(a3 + (v13 << 6)), &v78, &v79);
          if (v78 < 0.0)
            goto LABEL_4;
          v17 = 0;
          if (v78 <= 255.0 && v79 >= 0.0 && v79 <= 255.0)
          {
            v80 = v14 + 8;
            v81 = a3 + (v13 << 6);
            result = leqIntersect(v69, v15 + 8, &v82, &v83);
            if (v82 < 0.0)
              goto LABEL_4;
            v17 = 0;
            if (v82 <= 255.0 && v83 >= 0.0 && v83 <= 255.0)
            {
              v84 = v14 + 8;
              v85 = v15 + 8;
              v20 = v70;
              v21 = v71;
              v22 = v74;
              if ((float)((float)((float)(v79 - v71) * (float)(v83 - v75))
                         + (float)((float)(v78 - v70) * (float)(v82 - v74))) < 0.0
                || (float)((float)((float)(v83 - v79) * (float)(v75 - v71))
                         + (float)((float)(v74 - v70) * (float)(v82 - v78))) < 0.0)
              {
                goto LABEL_4;
              }
              v23 = 0;
              v24 = -3;
              v25 = &v75;
              v26 = v71;
              while (2)
              {
                v27 = *v25;
                if (*v25 <= v26)
                {
                  if (*v25 != v26)
                  {
                    v23 = v24 + 4;
                    goto LABEL_35;
                  }
                  if (*(v25 - 1) < *(&v70 + 6 * v23))
                    v23 = v24 + 4;
                }
                v27 = v26;
LABEL_35:
                v25 += 6;
                v26 = v27;
                v28 = __CFADD__(v24++, 1);
                if (!v28)
                  continue;
                break;
              }
              v29 = 0;
              v30 = -3;
              v31 = &v75;
              while (2)
              {
                v32 = *v31;
                if (*v31 >= v21)
                {
                  if (*v31 != v21)
                  {
                    v29 = v30 + 4;
                    goto LABEL_44;
                  }
                  if (*(v31 - 1) > *(&v70 + 6 * v29))
                    v29 = v30 + 4;
                }
                v32 = v21;
LABEL_44:
                v31 += 6;
                v21 = v32;
                v28 = __CFADD__(v30++, 1);
                if (v28)
                {
                  v33 = ((1 << v29) | (1 << v23)) - 3;
                  if (v33 >= 8)
                  {
                    v34 = 0;
                    v35 = 1;
                  }
                  else
                  {
                    v34 = qword_1A15E2CB8[v33];
                    v35 = qword_1A15E2CF8[v33];
                    v20 = *(&v70 + 6 * v34);
                    v22 = *(&v70 + 6 * v35);
                  }
                  v36 = &v70 + 6 * v23;
                  v37 = *v36;
                  v38 = v36[1];
                  v40 = *((_QWORD *)v36 + 1);
                  v39 = *((_QWORD *)v36 + 2);
                  v41 = &v70 + 6 * v29;
                  v43 = *v41;
                  v42 = v41[1];
                  v44 = *(int8x16_t *)(v41 + 2);
                  v45 = &v70 + 6 * v34;
                  v46 = v45[1];
                  v47 = *(int8x16_t *)(v45 + 2);
                  v48 = &v70 + 6 * v35;
                  v49 = v48[1];
                  v50 = *(int64x2_t *)(v48 + 2);
                  v51 = (float)((float)(v43 * (float)(v49 - v38)) + (float)(v37 * (float)(v42 - v49)))
                      + (float)(v22 * (float)(v38 - v42));
                  if ((float)((float)((float)(v43 * (float)(v46 - v38)) + (float)(v37 * (float)(v42 - v46)))
                             + (float)(v20 * (float)(v38 - v42))) >= 0.0)
                  {
                    if (v51 >= 0.0)
                    {
                      v52 = v43;
                      v53 = v42;
                      if (v46 >= v49)
                      {
                        v54 = v20;
                        v55 = v46;
                        v56 = v44;
                        v57 = v47;
                        goto LABEL_62;
                      }
                      v54 = v22;
                      v55 = v48[1];
                      v22 = v20;
                      v49 = v46;
                      v56 = v44;
                      v57 = *(int8x16_t *)(v48 + 2);
                    }
                    else
                    {
                      v52 = v22;
                      v53 = v48[1];
                      v54 = v43;
                      v55 = v42;
                      v22 = v20;
                      v49 = v46;
                      v56 = *(int8x16_t *)(v48 + 2);
                      v57 = v44;
                    }
                    v50 = (int64x2_t)v47;
                  }
                  else if (v51 >= 0.0)
                  {
                    v52 = v20;
                    v53 = v46;
                    v54 = v43;
                    v55 = v42;
                    v56 = v47;
                    v57 = v44;
                  }
                  else
                  {
                    if (v46 >= v49)
                    {
                      v52 = v22;
                      v53 = v48[1];
                      v54 = v20;
                      v55 = v46;
                      v22 = v43;
                      v49 = v42;
                      v56 = *(int8x16_t *)(v48 + 2);
                      v57 = v47;
                    }
                    else
                    {
                      v52 = v20;
                      v53 = v46;
                      v54 = v22;
                      v55 = v48[1];
                      v22 = v43;
                      v49 = v42;
                      v56 = v47;
                      v57 = *(int8x16_t *)(v48 + 2);
                    }
                    v50 = (int64x2_t)v44;
                  }
LABEL_62:
                  if ((float)((float)((float)(v53 - v38) * (float)(v53 - v38))
                             + (float)((float)(v52 - v37) * (float)(v52 - v37))) >= v12
                    && (float)((float)((float)(v55 - v53) * (float)(v55 - v53))
                             + (float)((float)(v54 - v52) * (float)(v54 - v52))) >= v12
                    && (float)((float)((float)(v49 - v55) * (float)(v49 - v55))
                             + (float)((float)(v22 - v54) * (float)(v22 - v54))) >= v12
                    && (float)((float)((float)(v38 - v49) * (float)(v38 - v49))
                             + (float)((float)(v37 - v22) * (float)(v37 - v22))) >= v12)
                  {
                    *(float *)a5 = v37;
                    *(float *)(a5 + 4) = v38;
                    v58 = (int8x16_t)vdupq_lane_s64(v57.i64[0], 0);
                    v59.i64[1] = v58.i64[1];
                    v59.i64[0] = v40;
                    *(float *)(a5 + 8) = v52;
                    *(float *)(a5 + 12) = v53;
                    v60 = vdupq_lane_s64(v56.i64[0], 0);
                    v61.i64[1] = v57.i64[1];
                    v61.i64[0] = v40;
                    v62 = vorrq_s8((int8x16_t)vceqq_s64(v59, v60), (int8x16_t)vceqq_s64(v61, (int64x2_t)vextq_s8(v56, v56, 8uLL)));
                    v60.i64[0] = v40;
                    v56.i64[0] = v39;
                    *(float *)(a5 + 16) = v54;
                    *(float *)(a5 + 20) = v55;
                    *(float *)(a5 + 24) = v22;
                    *(float *)(a5 + 28) = v49;
                    v63.i64[1] = v58.i64[1];
                    v63.i64[0] = v39;
                    v57.i64[0] = v50.i64[1];
                    v58.i64[0] = v50.i64[0];
                    v64 = vbslq_s8(vorrq_s8((int8x16_t)vceqq_s64(v59, vdupq_lane_s64(v50.i64[0], 0)), (int8x16_t)vceqq_s64(v63, v50)), v58, v57);
                    *(int8x16_t *)(a5 + 32) = vbslq_s8(v62, (int8x16_t)v60, v56);
                    *(int8x16_t *)(a5 + 48) = vextq_s8(v64, v64, 8uLL);
                    v17 = 1;
                    break;
                  }
LABEL_4:
                  v17 = 0;
                  break;
                }
                continue;
              }
            }
          }
        }
      }
      v10 += v17;
      a5 += (unint64_t)v17 << 6;
      ++v13;
    }
    while (v13 != v11);
    v9 = v68 + 1;
  }
  while (v68 + 1 != v66);
  *a6 = v10;
  return result;
}

void processQuadrilaterals(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, double a7, double a8, double a9, double a10, float a11, float a12, float a13)
{
  float32x2_t v13;
  int32x2_t v14;
  float v17;
  uint64_t v19;
  int v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v28;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  float v54;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v64;
  _QWORD v65[2];

  v61 = *(float *)&a7;
  if (a2)
  {
    v17 = *(float *)&a8;
    v19 = 0;
    v20 = 0;
    v58 = *(float *)&a8 * *(float *)&a8;
    v59 = *(float *)&a9;
    v64 = a2;
    v21 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    v60 = *(float *)&a10;
    v22 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
    __asm { FMOV            V14.2S, #-1.0 }
    v28 = (float32x2_t)vdup_n_s32(0x3BA3D70Au);
    __asm { FMOV            V9.2S, #1.0 }
    do
    {
      if (v17 < 0.0)
        goto LABEL_11;
      v30.i32[0] = *(_DWORD *)(a1 + 24);
      v31.i32[0] = *(_DWORD *)(a1 + 28);
      v32 = (float)(*(float *)a1 * v61) - v59;
      *(float *)&a10 = *(float *)(a1 + 4) - v60;
      *(float *)&a7 = (float)(*(float *)(a1 + 16) * v61) - v59;
      *(float *)&a8 = *(float *)(a1 + 20) - v60;
      v13.f32[0] = -*(float *)&a10;
      *(float *)v14.i32 = -v32;
      v30.i32[1] = *(_DWORD *)(a1 + 8);
      v33 = vsub_f32(vmul_n_f32(v30, v61), v21);
      v31.i32[1] = *(_DWORD *)(a1 + 12);
      v34 = vsub_f32(v31, v22);
      v35 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
      v36 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v34, -(float)(v32 - *(float *)&a7)), v33, *(float *)&a10 - *(float *)&a8), v35, v32);
      v37 = (float32x2_t)vdup_lane_s32((int32x2_t)v13, 0);
      v38 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
      v39 = vmls_lane_f32(v36, v38, *(float32x2_t *)&a10, 0);
      v40 = (float32x2_t)vrev64_s32((int32x2_t)v34);
      v13 = vneg_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v33, v38)));
      v41 = vmla_f32(vmul_f32(v34, v13), v33, vsub_f32(v40, v35));
      v42 = (float32x2_t)vrev64_s32((int32x2_t)v33);
      v43 = vdiv_f32(v39, vmls_lane_f32(vmla_n_f32(v41, v42, *(float *)&a8), v40, *(float32x2_t *)&a7, 0));
      v44 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v28, vabs_f32(vadd_f32(v43, _D14))), _D9, (int8x8_t)v43);
      a8 = COERCE_DOUBLE(vadd_f32(v44, _D14));
      v45 = vmla_f32(v37, v40, v44);
      a10 = COERCE_DOUBLE(vmla_f32((float32x2_t)vdup_lane_s32(v14, 0), v42, v44));
      v46 = vmla_f32(vmla_f32(vmul_f32(v45, v45), *(float32x2_t *)&a8, vmul_n_f32(*(float32x2_t *)&a8, v58)), *(float32x2_t *)&a10, *(float32x2_t *)&a10);
      a7 = COERCE_DOUBLE(vdiv_f32(v46, (float32x2_t)vdup_lane_s32((int32x2_t)v46, 1)));
      *(float *)&a7 = sqrtf(*(float *)&a7);
      if (*(float *)&a7 > 1.0)
        *(float *)&a7 = 1.0 / *(float *)&a7;
      if (*(float *)&a7 >= a11 && *(float *)&a7 <= a12)
      {
LABEL_11:
        v65[0] = 0;
        cachedOverlap(a3, (float *)a1, (float *)(a1 + 8), *(_QWORD *)(a1 + 32), (int *)v65 + 1, v65);
        v49 = v65[0];
        v48 = HIDWORD(v65[0]);
        cachedOverlap(a3, (float *)(a1 + 8), (float *)(a1 + 16), *(_QWORD *)(a1 + 40), (int *)v65 + 1, v65);
        v50 = HIDWORD(v65[0]);
        v51 = LODWORD(v65[0]) + v49;
        cachedOverlap(a3, (float *)(a1 + 16), (float *)(a1 + 24), *(_QWORD *)(a1 + 48), (int *)v65 + 1, v65);
        v53 = v65[0];
        v52 = HIDWORD(v65[0]);
        cachedOverlap(a3, (float *)(a1 + 24), (float *)a1, *(_QWORD *)(a1 + 56), (int *)v65 + 1, v65);
        if (v51 + v53 + LODWORD(v65[0]))
          v54 = (float)(v50 + v48 + v52 + HIDWORD(v65[0]))
              / (float)(v51 + v53 + LODWORD(v65[0]));
        else
          v54 = 0.0;
        if (v54 >= a13)
        {
          *(float *)(a5 + 4 * v20) = v54;
          *(_QWORD *)(a4 + 8 * v20++) = v19;
        }
      }
      ++v19;
      a1 += 64;
    }
    while (v64 != v19);
  }
  else
  {
    v20 = 0;
  }
  *a6 = v20;
}

void cachedOverlap(uint64_t a1, float *a2, float *a3, uint64_t a4, int *a5, _DWORD *a6)
{
  _BYTE *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v13;
  malloc_type_id_t v14;
  float v15;
  float v16;
  float v17;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v27;
  _BOOL4 v28;
  float v31;
  BOOL v34;
  _BOOL4 v35;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  signed int v45;
  float v46;
  float v47;
  int v48;
  signed int v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  float v58;
  float v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  signed int v76;
  float v77;
  signed int v78;
  BOOL v79;
  int v80;
  signed int v81;
  int v82;
  int v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  float v88;
  float *v89;
  float *v90;
  _DWORD *v91;
  int *v92;
  float v93;
  float v94;
  float v95;

  v6 = *(_BYTE **)(*(_QWORD *)(a4 + 16) + 8 * *(int *)(a4 + 24) + 48);
  v8 = *(float *)a4;
  v7 = *(float *)(a4 + 4);
  if (*(float *)a4 >= 0.0)
    v9 = *(float *)a4;
  else
    v9 = -*(float *)a4;
  if (v7 >= 0.0)
    v10 = *(float *)(a4 + 4);
  else
    v10 = -v7;
  if (v6)
    goto LABEL_141;
  v89 = a3;
  v90 = a2;
  v91 = a6;
  v92 = a5;
  v13 = *(float *)(a4 + 8);
  if (v9 <= v10)
    v14 = 3816575818;
  else
    v14 = 1754752960;
  v6 = malloc_type_calloc(0x100uLL, 1uLL, v14);
  v15 = fabsf(v7);
  v88 = v9;
  if (v15 < 0.0001)
  {
    v16 = (float)-v13 / v8;
    v17 = 0.0;
    if (v16 >= 0.0 && v16 <= 255.0)
    {
      v22 = 255.0;
      v21 = (float)-v13 / v8;
      goto LABEL_98;
    }
    goto LABEL_16;
  }
  v19 = fabsf(v8);
  if (v19 < 0.0001)
  {
    v17 = (float)-v13 / v7;
    v16 = 0.0;
    if (v17 >= 0.0 && v17 <= 255.0)
    {
      v21 = 255.0;
      v22 = (float)-v13 / v7;
      goto LABEL_98;
    }
    v17 = 0.0;
    goto LABEL_23;
  }
  v23 = -v13;
  if (v19 > v15)
  {
    v24 = v23 / v8;
    v21 = (float)-(float)(v13 + (float)(v7 * 255.0)) / v8;
    v22 = 0.0;
    if ((float)(v23 / v8) < 0.0 && v21 < 0.0)
      goto LABEL_97;
    if (v24 > 255.0 && v21 > 255.0)
      goto LABEL_97;
    v27 = v24 < 0.0 || v21 > 255.0 || v24 > 255.0;
    if (!v27 && v21 >= 0.0)
    {
      v16 = v23 / v8;
      v17 = 0.0;
      v22 = 255.0;
      goto LABEL_98;
    }
    v28 = v24 < 0.0;
    if (v21 <= 255.0)
      v28 = 0;
    if (v21 < 0.0 && v24 > 255.0 || v28)
    {
      v17 = v23 / v7;
      v21 = 255.0;
      v16 = 0.0;
      v22 = (float)-(float)(v13 + (float)(v8 * 255.0)) / v7;
      goto LABEL_98;
    }
    if (v24 >= 0.0)
    {
      if (v21 >= 0.0)
      {
        if (v24 > 255.0)
        {
          v17 = 255.0;
          v22 = (float)-(float)(v13 + (float)(v8 * 255.0)) / v7;
          v16 = (float)-(float)(v13 + (float)(v7 * 255.0)) / v8;
          v21 = 255.0;
          goto LABEL_98;
        }
        if (v21 > 255.0)
        {
          v21 = 255.0;
          v22 = (float)-(float)(v13 + (float)(v8 * 255.0)) / v7;
          v16 = v23 / v8;
          v17 = 0.0;
          goto LABEL_98;
        }
LABEL_97:
        v16 = 0.0;
        v17 = 0.0;
        v21 = 0.0;
        goto LABEL_98;
      }
      v16 = 0.0;
      v21 = v23 / v8;
    }
    else
    {
      v22 = 255.0;
      v16 = 0.0;
    }
    v17 = v23 / v7;
    goto LABEL_98;
  }
  v31 = v23 / v7;
  v22 = (float)-(float)(v13 + (float)(v8 * 255.0)) / v7;
  v17 = 0.0;
  if (((float)(v23 / v7) >= 0.0 || v22 >= 0.0) && (v31 <= 255.0 || v22 <= 255.0))
  {
    v21 = 255.0;
    v34 = v31 < 0.0 || v22 > 255.0 || v31 > 255.0;
    if (!v34 && v22 >= 0.0)
      goto LABEL_84;
    v35 = v31 < 0.0;
    if (v22 <= 255.0)
      v35 = 0;
    if (v22 < 0.0 && v31 > 255.0 || v35)
    {
      v16 = v23 / v8;
      v22 = 255.0;
      v21 = (float)-(float)(v13 + (float)(v7 * 255.0)) / v8;
      goto LABEL_98;
    }
    if (v31 >= 0.0)
    {
      if (v22 >= 0.0)
      {
        if (v31 > 255.0)
        {
          v16 = 255.0;
          v21 = (float)-(float)(v13 + (float)(v7 * 255.0)) / v8;
          v17 = (float)-(float)(v13 + (float)(v8 * 255.0)) / v7;
          v22 = 255.0;
          goto LABEL_98;
        }
        if (v22 <= 255.0)
          goto LABEL_16;
        v22 = 255.0;
        v21 = (float)-(float)(v13 + (float)(v7 * 255.0)) / v8;
LABEL_84:
        v16 = 0.0;
        v17 = v23 / v7;
        goto LABEL_98;
      }
      v21 = 0.0;
      v22 = v23 / v7;
    }
    else
    {
      v21 = 255.0;
    }
    v16 = v23 / v8;
    goto LABEL_98;
  }
LABEL_16:
  v16 = 0.0;
LABEL_23:
  v21 = 0.0;
  v22 = 0.0;
LABEL_98:
  v38 = vabds_f32(v22, v17);
  v39 = vabds_f32(v21, v16);
  if (v38 <= v39)
    v40 = v16;
  else
    v40 = v17;
  if (v38 <= v39)
  {
    v41 = v21;
  }
  else
  {
    v17 = v16;
    v41 = v22;
  }
  if (v38 > v39)
    v22 = v21;
  if (v40 <= v41)
  {
    v42 = v22;
    v43 = v41;
  }
  else
  {
    v42 = v17;
    v43 = v40;
    v17 = v22;
    v40 = v41;
  }
  v44 = (float)(v42 - v17) / (float)(v43 - v40);
  v45 = llroundf(v40);
  v46 = v17 + (float)(v44 * (float)((float)(int)roundf(v40) - v40));
  v95 = 0.0;
  v47 = modff(v46, &v95);
  v48 = (int)v95;
  v49 = llroundf(v43);
  v94 = 0.0;
  v50 = modff(v42 + (float)(v44 * (float)((float)(int)roundf(v43) - v43)), &v94);
  v87 = (int)v94;
  v51 = v45;
  v52 = a1 + v45;
  v53 = (_BYTE *)(v52 + ((v48 << 8) + 256));
  v54 = (_BYTE *)(v52 + (v48 << 8));
  if (v47 >= 0.5)
    v54 = v53;
  v55 = a1 + v48 + (v45 << 8);
  v56 = v45;
  if (v47 >= 0.5)
  {
    v56 = v45;
    v55 = a1 + v48 + (v45 << 8) + 1;
  }
  if (v38 > v39)
  {
    v51 = v56;
    v54 = (_BYTE *)v55;
  }
  v57 = *v54 != 0;
  v6[v51] = v57;
  v58 = v44 + v46;
  v93 = 0.0;
  v59 = modff(v58, &v93);
  if (v49 - 1 > v45)
  {
    v60 = v45;
    v61 = v45 + 1;
    v62 = v49 - 1 - (uint64_t)v45;
    v63 = &v6[v60 + 1];
    v64 = a1 + v60 + 1;
    do
    {
      v65 = (int)v93;
      LODWORD(v60) = v60 + 1;
      if (v59 < 0.5)
        v66 = (int)v93;
      else
        v66 = v65 + 1;
      v67 = a1 + v65;
      if (v59 < 0.5)
        v68 = v61;
      else
        v68 = v60;
      if (v59 >= 0.5)
        ++v67;
      if (v38 <= v39)
        v67 = v64;
      else
        v66 = v68;
      if (*(_BYTE *)(v67 + (v66 << 8)))
        ++v57;
      *v63++ = v57;
      v58 = v44 + v58;
      v59 = modff(v58, &v93);
      ++v61;
      ++v64;
      --v62;
    }
    while (v62);
  }
  v69 = v49;
  v70 = a1 + v49;
  v71 = (_BYTE *)(v70 + ((v87 << 8) + 256));
  v72 = (_BYTE *)(v70 + (v87 << 8));
  if (v50 >= 0.5)
    v72 = v71;
  v73 = a1 + v87 + (v49 << 8);
  v74 = v49;
  if (v50 >= 0.5)
  {
    v74 = v49;
    v73 = a1 + v87 + (v49 << 8) + 1;
  }
  if (v38 > v39)
  {
    v69 = v74;
    v72 = (_BYTE *)v73;
  }
  if (*v72)
    v75 = v57 + 1;
  else
    v75 = v57;
  v6[v69] = v75;
  *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * *(int *)(a4 + 24) + 48) = v6;
  a6 = v91;
  a5 = v92;
  a3 = v89;
  a2 = v90;
  v9 = v88;
LABEL_141:
  if (v9 <= v10)
  {
    v76 = llroundf(*a3);
    v77 = *a2;
  }
  else
  {
    v76 = llroundf(a3[1]);
    v77 = a2[1];
  }
  v78 = llroundf(v77);
  v80 = v78 - v76;
  v79 = v78 - v76 < 0;
  if (v78 >= v76)
    v81 = v76;
  else
    v81 = v78;
  if (v78 > v76)
    v76 = v78;
  if (v79)
    v82 = -v80;
  else
    v82 = v80;
  *a6 = v82 + 1;
  v83 = v6[v76];
  v84 = v6[v81];
  v85 = __OFSUB__(v83, v84);
  v86 = v83 - v84;
  if (v86 < 0 != v85)
    v86 += 256;
  *a5 = v86;
}

void mergeQuads(uint64_t a1, uint64_t a2, const float *__C, vDSP_Length *__I, char *a5, _QWORD *a6, void *a7, vDSP_Length __N, _OWORD *a9, float *a10, unint64_t a11, unint64_t *a12)
{
  vDSP_Length *v14;
  unint64_t *v18;
  _OWORD *v19;
  float *v20;
  float v21;
  uint64_t v22;
  int v23;
  _OWORD *v24;
  __int128 v25;
  unint64_t v26;
  float v27;
  float v28;
  float v29;
  __int128 v30;
  __int128 v31;
  vDSP_Length j;
  vDSP_Length v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  vDSP_Length v40;
  vDSP_Length v41;
  vDSP_Length v42;
  vDSP_Length i;
  unint64_t v44;
  vDSP_Length v45;
  _OWORD *v46;
  __int128 v47;

  if (!__N)
    return;
  v14 = __I;
  v18 = a12;
  v19 = a9;
  v20 = a10;
  if (*a12)
    v21 = *a10;
  else
    v21 = -1.0;
  if (a11 != 1)
  {
    if (__N == 1)
    {
      *__I = 0;
LABEL_38:
      v36 = *a12;
      memmove(a7, a10, 4 * *a12);
      memmove(a5, a9, 32 * v36);
      if (v36)
      {
        v37 = a6;
        v38 = v36;
        do
        {
          *v37++ = a5;
          a5 += 32;
          --v38;
        }
        while (v38);
      }
      v39 = 0;
      if (__N <= 1)
        v40 = 1;
      else
        v40 = __N;
      do
      {
        v41 = v14[v39];
        *((float *)a7 + v36 + v39) = __C[v41];
        a6[v36 + v39++] = a1 + (*(_QWORD *)(a2 + 8 * v41) << 6);
      }
      while (v40 != v39);
      v42 = v36 + __N;
      if (v42)
      {
        for (i = 0; i != v42; ++i)
          v14[i] = i;
      }
      vDSP_vsorti((const float *)a7, v14, 0, v42, -1);
      v26 = a11;
      if (v42 < a11)
        v26 = v42;
      v18 = a12;
      if (v26)
      {
        v44 = v26;
        do
        {
          v45 = *v14++;
          *v20++ = *((float *)a7 + v45);
          v46 = (_OWORD *)a6[v45];
          v47 = v46[1];
          *v19 = *v46;
          v19[1] = v47;
          v19 += 2;
          --v44;
        }
        while (v44);
      }
      goto LABEL_53;
    }
    if (__N == 2)
    {
      if (*__C <= __C[1])
        v31 = xmmword_1A15FB4E0;
      else
        v31 = xmmword_1A15DD910;
      *(_OWORD *)__I = v31;
      goto LABEL_38;
    }
    if (__N != 3)
    {
      for (j = 0; j != __N; ++j)
        __I[j] = j;
      vDSP_vsorti(__C, __I, 0, __N, -1);
      goto LABEL_38;
    }
    v27 = *__C;
    v28 = __C[1];
    v29 = __C[2];
    if (*__C <= v28)
    {
      if (v27 <= v29)
      {
        if (v28 <= v29)
          v35 = xmmword_1A15FB410;
        else
          v35 = xmmword_1A15C3FE0;
        *(_OWORD *)__I = v35;
        __I[2] = 0;
        goto LABEL_38;
      }
      v30 = xmmword_1A15FB4E0;
    }
    else
    {
      if (v28 <= v29)
      {
        if (v27 <= v29)
          v34 = xmmword_1A15FB4F0;
        else
          v34 = xmmword_1A15FB500;
        *(_OWORD *)__I = v34;
        v33 = 1;
        goto LABEL_35;
      }
      v30 = xmmword_1A15DD910;
    }
    *(_OWORD *)__I = v30;
    v33 = 2;
LABEL_35:
    __I[2] = v33;
    goto LABEL_38;
  }
  v22 = 0;
  v23 = -1;
  do
  {
    if (__C[v22] > v21)
    {
      v21 = __C[v22];
      v23 = v22;
    }
    ++v22;
  }
  while (__N != v22);
  if (v23 != -1)
  {
    *a10 = v21;
    v24 = (_OWORD *)(a1 + (*(_QWORD *)(a2 + 8 * v23) << 6));
    v25 = v24[1];
    *a9 = *v24;
    a9[1] = v25;
    v26 = 1;
LABEL_53:
    *v18 = v26;
  }
}

void sub_1A13FF790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A13FF860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13FF9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1A13FFAD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13FFB64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A13FFCB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A13FFD94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1400690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  operator delete(v16);
  if ((_QWORD)a13)
    operator delete((void *)a13);

  _Unwind_Resume(a1);
}

void sub_1A1400820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1400924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1400A8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1401100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1401294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14012E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A140147C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A140152C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140172C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A1401A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1401AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1401B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1401C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1401D98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1401E18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1401ED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1401FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140215C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

#error "1A1402498: call analysis failed (funcsize=26)"

void sub_1A1402538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1402B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1402DE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1402EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140307C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1403798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A14039CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A1403B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1403C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1403CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1403EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A1403F4C(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A1403F60(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A1403FE0(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A1403FF4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void std::deque<std::pair<unsigned int,unsigned int>>::emplace_back<std::pair<unsigned int,unsigned int>>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x200)
    {
      a1[4] = v8 - 512;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v109 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v109;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v106 = v36;
      v109 = v38;
      operator delete(v30);
      v36 = v106;
    }
    v38 = v109;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v107 = v36;
            v111 = v38;
            operator delete(v78);
            v36 = v107;
            v38 = v111;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v108 = *((_QWORD *)&v36 + 1);
            v110 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v108;
            *(_QWORD *)&v38 = v110;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v9 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v9 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_1A1404580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void sub_1A1404648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140477C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A140488C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14049CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A1404DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14050AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A1405470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

void sub_1A1405858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A1405AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A1405B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A1405E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A14061A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;

  v63 = v59;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose((const void *)(v62 - 240), 8);
  _Block_object_dispose((const void *)(v62 - 176), 8);
  _Block_object_dispose((const void *)(v62 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6799(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6800(uint64_t a1)
{

}

__n128 __Block_byref_object_copy__63(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1A1406550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A14065E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1406690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1406A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A1406F08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A14074C8(void *a1)
{
  void *v1;

  objc_begin_catch(a1);
  JUMPOUT(0x1A1407490);
}

void sub_1A1407518()
{
  void *v0;

  JUMPOUT(0x1A1407520);
}

uint64_t VNHashCGAffineTransform(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  v1 = *(double *)a1;
  if (*(double *)a1 == 0.0)
    v1 = 0.0;
  v2 = *(double *)(a1 + 8);
  if (v2 == 0.0)
    v2 = 0.0;
  v3 = *(double *)(a1 + 16);
  if (v3 == 0.0)
    v3 = 0.0;
  v4 = *(double *)(a1 + 24);
  if (v4 == 0.0)
    v4 = 0.0;
  v5 = *(_QWORD *)&v4 ^ __ROR8__(*(_QWORD *)&v3 ^ __ROR8__(*(_QWORD *)&v2 ^ __ROR8__(*(_QWORD *)&v1, 51), 51), 51);
  if (*(double *)(a1 + 32) == 0.0)
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = v6 ^ __ROR8__(v5, 51);
  v8 = *(double *)(a1 + 40);
  if (v8 == 0.0)
    v8 = 0.0;
  return *(_QWORD *)&v8 ^ __ROR8__(v7, 51);
}

uint64_t VNHashMatrixFloat4x4(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = (unint64_t)a1.n128_u32[0] << 13;
  if (a1.n128_f32[0] == 0.0)
    v4 = 0;
  v5 = a1.n128_u32[1];
  if (a1.n128_f32[1] == 0.0)
    v5 = 0;
  v6 = v4 ^ v5;
  v7 = a1.n128_u32[2];
  if (a1.n128_f32[2] == 0.0)
    v7 = 0;
  v8 = v7 ^ (v6 << 13);
  v9 = a1.n128_u32[3];
  if (a1.n128_f32[3] == 0.0)
    v9 = 0;
  v10 = v9 ^ __ROR8__(v8, 51);
  v11 = a2.n128_u32[0];
  if (a2.n128_f32[0] == 0.0)
    v11 = 0;
  v12 = v11 ^ __ROR8__(v10, 51);
  v13 = a2.n128_u32[1];
  if (a2.n128_f32[1] == 0.0)
    v13 = 0;
  v14 = v13 ^ __ROR8__(v12, 51);
  v15 = a2.n128_u32[2];
  if (a2.n128_f32[2] == 0.0)
    v15 = 0;
  v16 = v15 ^ __ROR8__(v14, 51);
  v17 = a2.n128_u32[3];
  if (a2.n128_f32[3] == 0.0)
    v17 = 0;
  v18 = v17 ^ __ROR8__(v16, 51);
  v19 = a3.n128_u32[0];
  if (a3.n128_f32[0] == 0.0)
    v19 = 0;
  v20 = v19 ^ __ROR8__(v18, 51);
  v21 = a3.n128_u32[1];
  if (a3.n128_f32[1] == 0.0)
    v21 = 0;
  v22 = v21 ^ __ROR8__(v20, 51);
  v23 = a3.n128_u32[2];
  if (a3.n128_f32[2] == 0.0)
    v23 = 0;
  v24 = v23 ^ __ROR8__(v22, 51);
  v25 = a3.n128_u32[3];
  if (a3.n128_f32[3] == 0.0)
    v25 = 0;
  v26 = v25 ^ __ROR8__(v24, 51);
  v27 = a4.n128_u32[0];
  if (a4.n128_f32[0] == 0.0)
    v27 = 0;
  v28 = v27 ^ __ROR8__(v26, 51);
  v29 = a4.n128_u32[1];
  if (a4.n128_f32[1] == 0.0)
    v29 = 0;
  v30 = v29 ^ __ROR8__(v28, 51);
  v31 = a4.n128_u32[2];
  if (a4.n128_f32[2] == 0.0)
    v31 = 0;
  v32 = v31 ^ __ROR8__(v30, 51);
  v33 = a4.n128_u32[3];
  if (a4.n128_f32[3] == 0.0)
    v33 = 0;
  return v33 ^ __ROR8__(v32, 51);
}

uint64_t VNHashMemory(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hash");

  return v3;
}

void sub_1A140783C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1407E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1A1407BCCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A14080EC()
{
  objc_end_catch();
  JUMPOUT(0x1A14080F4);
}

void sub_1A1409570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
  {
    _Block_object_dispose(&a23, 8);
    objc_begin_catch(exception_object);
    JUMPOUT(0x1A140950CLL);
  }
  _Unwind_Resume(exception_object);
}

Class __getBCSDetectedCodeClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!BarcodeSupportLibraryCore_frameworkLibrary)
  {
    BarcodeSupportLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!BarcodeSupportLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("BCSDetectedCode");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getBCSDetectedCodeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id _validatedVNBarcodeSymbology(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if (_validatedVNBarcodeSymbology_onceToken != -1)
    dispatch_once(&_validatedVNBarcodeSymbology_onceToken, &__block_literal_global_7168);
  v2 = objc_msgSend((id)_validatedVNBarcodeSymbology_ourValidBarcodeSymbologies, "indexOfObject:", v1);
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = 0;
  }
  else
  {
    objc_msgSend((id)_validatedVNBarcodeSymbology_ourValidBarcodeSymbologies, "objectAtIndex:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

void ___validatedVNBarcodeSymbology_block_invoke()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[26];

  v2[25] = *MEMORY[0x1E0C80C00];
  v2[0] = CFSTR("VNBarcodeSymbologyAztec");
  v2[1] = CFSTR("VNBarcodeSymbologyCode39");
  v2[2] = CFSTR("VNBarcodeSymbologyCode39Checksum");
  v2[3] = CFSTR("VNBarcodeSymbologyCode39FullASCII");
  v2[4] = CFSTR("VNBarcodeSymbologyCode39FullASCIIChecksum");
  v2[5] = CFSTR("VNBarcodeSymbologyCode93");
  v2[6] = CFSTR("VNBarcodeSymbologyCode93i");
  v2[7] = CFSTR("VNBarcodeSymbologyCode128");
  v2[8] = CFSTR("VNBarcodeSymbologyDataMatrix");
  v2[9] = CFSTR("VNBarcodeSymbologyEAN8");
  v2[10] = CFSTR("VNBarcodeSymbologyEAN13");
  v2[11] = CFSTR("VNBarcodeSymbologyI2of5");
  v2[12] = CFSTR("VNBarcodeSymbologyI2of5Checksum");
  v2[13] = CFSTR("VNBarcodeSymbologyITF14");
  v2[14] = CFSTR("VNBarcodeSymbologyPDF417");
  v2[15] = CFSTR("VNBarcodeSymbologyQR");
  v2[16] = CFSTR("VNBarcodeSymbologyUPCE");
  v2[17] = CFSTR("VNBarcodeSymbologyAppClipCode");
  v2[18] = CFSTR("VNBarcodeSymbologyCodabar");
  v2[19] = CFSTR("VNBarcodeSymbologyGS1DataBar");
  v2[20] = CFSTR("VNBarcodeSymbologyGS1DataBarExpanded");
  v2[21] = CFSTR("VNBarcodeSymbologyGS1DataBarLimited");
  v2[22] = CFSTR("VNBarcodeSymbologyMicroPDF417");
  v2[23] = CFSTR("VNBarcodeSymbologyMicroQR");
  v2[24] = CFSTR("VNBarcodeSymbologyMSIPlessey");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 25);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_validatedVNBarcodeSymbology_ourValidBarcodeSymbologies;
  _validatedVNBarcodeSymbology_ourValidBarcodeSymbologies = v0;

}

void sub_1A140B504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

double vision::mod::ImageAnalyzer::getSceneSaliency(vision::mod::ImageAnalyzer *this, uint64_t a2)
{
  char *v4;
  double result;
  _QWORD *exception;
  int v7;
  int v8;

  v8 = 16;
  if (!*((_BYTE *)std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(a2 + 824, 0x10u, &v8)+ 20))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 8574;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v7 = 16;
  v4 = std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(a2 + 784, 0x10u, &v7);
  *(_QWORD *)&result = vision::mod::ImageAnalyzer_Tensor2D::ImageAnalyzer_Tensor2D((uint64_t)this, (__int128 *)(v4 + 24)).n128_u64[0];
  return result;
}

int8x16_t vision::mod::ImageAnalyzer_Tensor2D::getVImageBufferFromTensor(uint64_t a1, int8x16_t *a2, int *a3)
{
  __int32 v3;
  int v4;
  uint64_t v5;
  int8x16_t result;
  _QWORD *exception;

  *a3 = 0;
  v3 = a2[10].i32[0];
  if (v3 == 262152)
  {
    v4 = 1;
    v5 = 1;
  }
  else
  {
    if (v3 != 65568)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = 8563;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
    v4 = 32;
    v5 = 4;
  }
  *a3 = v4;
  *(_QWORD *)a1 = a2->i64[0];
  result = vextq_s8(a2[5], a2[5], 8uLL);
  *(int8x16_t *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v5 * a2[8].i64[0];
  return result;
}

__n128 vision::mod::ImageAnalyzer_Tensor2D::ImageAnalyzer_Tensor2D(uint64_t a1, __int128 *a2)
{
  BOOL v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _QWORD *exception;

  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  if (!*(_QWORD *)a2
    || (*((_QWORD *)a2 + 13) <= 1uLL ? (v2 = *((_QWORD *)a2 + 14) >= 2uLL) : (v2 = 1), v2
                                                                                    || *((_QWORD *)a2 + 12) >= 2uLL))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 8572;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v3 = *a2;
  v4 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v3;
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  result = (__n128)a2[7];
  v9 = a2[8];
  v10 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v10;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

double vision::mod::ImageAnalyzer::getSceneSegmentation(vision::mod::ImageAnalyzer *this, uint64_t a2)
{
  char *v4;
  double result;
  _QWORD *exception;
  int v7;
  int v8;

  v8 = 32;
  if (!*((_BYTE *)std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,BOOL>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(a2 + 824, 0x20u, &v8)+ 20))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 8574;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v7 = 32;
  v4 = std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,espresso_buffer_t>>>::__emplace_unique_key_args<vision::mod::ImageAnalyzer_AnalysisType,std::piecewise_construct_t const&,std::tuple<vision::mod::ImageAnalyzer_AnalysisType&&>,std::tuple<>>(a2 + 784, 0x20u, &v7);
  *(_QWORD *)&result = vision::mod::ImageAnalyzer_Tensor3D::ImageAnalyzer_Tensor3D((uint64_t)this, (__int128 *)(v4 + 24)).n128_u64[0];
  return result;
}

__n128 vision::mod::ImageAnalyzer_Tensor3D::getVImageBufferFromTensorChannel(_OWORD *a1, uint64_t a2, unint64_t a3, float *a4, int *a5)
{
  int v8;
  int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  size_t v13;
  vImagePixelCount v14;
  vImagePixelCount v15;
  uint64_t v16;
  vImage_Buffer *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  vImage_Error v22;
  __n128 result;
  __int128 v24;
  _QWORD *exception;
  uint64_t v26;
  uint64_t v27;
  vImage_Buffer v28;

  if (*(_QWORD *)(a2 + 96) <= a3)
  {
    exception = __cxa_allocate_exception(8uLL);
    v26 = 8556;
LABEL_29:
    *exception = v26;
LABEL_30:
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  *a5 = 0;
  v8 = *(_DWORD *)(a2 + 160);
  if (v8 == 262152)
  {
    v9 = 1;
    v10 = 1;
  }
  else
  {
    if (v8 != 65568)
      goto LABEL_25;
    v9 = 32;
    v10 = 4;
  }
  *a5 = v9;
  v11 = a4[1];
  v12 = (unint64_t)*a4;
  v13 = v10 * *(_QWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v28.data = (void *)(*(_QWORD *)a2 + v14 * a3 * v13);
  v28.height = v14;
  v28.width = v15;
  v28.rowBytes = v13;
  v16 = (unint64_t)v11;
  if (v14 != v12 || v15 != v16)
  {
    v18 = (vImage_Buffer *)(a2 + 184);
    v19 = ImageProcessing_reallocVImageBuffer(a2 + 184, v16, v12, v10);
    if ((v19 & 0x80) == 0)
    {
      v27 = v19;
      exception = __cxa_allocate_exception(8uLL);
      *exception = v27;
      goto LABEL_30;
    }
    if (*a5 == 1)
    {
      v20 = vImageScale_Planar8(&v28, (const vImage_Buffer *)(a2 + 184), 0, 0x80u);
LABEL_16:
      if (v20 > *(_QWORD *)(a2 + 176))
      {
        v21 = malloc_type_realloc(*(void **)(a2 + 168), v20, 0x5A716879uLL);
        *(_QWORD *)(a2 + 168) = v21;
        if (!v21)
        {
          exception = __cxa_allocate_exception(8uLL);
          v26 = 8571;
          goto LABEL_29;
        }
      }
      if (*a5 == 1)
      {
        v22 = vImageScale_Planar8(&v28, (const vImage_Buffer *)(a2 + 184), *(void **)(a2 + 168), 0);
        goto LABEL_22;
      }
      if (*a5 == 32)
      {
        v22 = vImageScale_PlanarF(&v28, (const vImage_Buffer *)(a2 + 184), *(void **)(a2 + 168), 0);
LABEL_22:
        if (!v22)
          goto LABEL_23;
        exception = __cxa_allocate_exception(8uLL);
        v26 = 8570;
        goto LABEL_29;
      }
      goto LABEL_25;
    }
    if (*a5 == 32)
    {
      v20 = vImageScale_PlanarF(&v28, (const vImage_Buffer *)(a2 + 184), 0, 0x80u);
      goto LABEL_16;
    }
LABEL_25:
    exception = __cxa_allocate_exception(8uLL);
    v26 = 8563;
    goto LABEL_29;
  }
  v18 = &v28;
LABEL_23:
  result = *(__n128 *)&v18->data;
  v24 = *(_OWORD *)&v18->width;
  *a1 = *(_OWORD *)&v18->data;
  a1[1] = v24;
  return result;
}

float vision::mod::ImageAnalyzer_Tensor3D::valueAt(vision::mod::ImageAnalyzer_Tensor3D *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *exception;

  if (*((_DWORD *)this + 40) != 65568)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 8563;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  return *(float *)(*(_QWORD *)this + 4 * (a3 + *((_QWORD *)this + 17) * a4 + *((_QWORD *)this + 16) * a2));
}

void vision::mod::ImageAnalyzer_Tensor3D::~ImageAnalyzer_Tensor3D(vision::mod::ImageAnalyzer_Tensor3D *this)
{
  free(*((void **)this + 21));
  free(*((void **)this + 23));
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  free(*((void **)this + 27));
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
}

__n128 vision::mod::ImageAnalyzer_Tensor3D::ImageAnalyzer_Tensor3D(uint64_t a1, __int128 *a2)
{
  BOOL v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _QWORD *exception;

  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  if (!*(_QWORD *)a2 || (*((_QWORD *)a2 + 13) <= 1uLL ? (v2 = *((_QWORD *)a2 + 14) >= 2uLL) : (v2 = 1), v2))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 8572;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v3 = *a2;
  v4 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v3;
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  result = (__n128)a2[7];
  v9 = a2[8];
  v10 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v10;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

void sub_1A140BDC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140BE7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140BFAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140C1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A140C2E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140C3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140C690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A140C76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140C7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A140C810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140C864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A140C8B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140C908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A140C950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140C99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A140CA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A140CBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A140CD5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A140D070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void **a15, _QWORD *a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a16);
  a15 = (void **)&a18;
  std::vector<std::map<int,double>>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void sub_1A140D324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  void *v38;
  void *v39;
  uint64_t v40;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a33, 8);

  _Block_object_dispose((const void *)(v40 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1A140D4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A140D558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A140D6F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A140D89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A140DA78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A140DDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A140DF80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A140E190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::ostream::~ostream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void _newFaceIDModel(_QWORD *a1, int a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 (*v17)(__n128 *, __n128 *);
  uint64_t (*v18)(uint64_t);
  const char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v14 = 0;
  v15 = &v14;
  v16 = 0x4012000000;
  v17 = __Block_byref_object_copy__88;
  v18 = __Block_byref_object_dispose__89;
  v20 = 0;
  v21 = 0;
  v19 = "";
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZL15_newFaceIDModeliPU15__autoreleasingP7NSError_block_invoke;
  v12[3] = &unk_1E45475C0;
  v12[4] = &v14;
  v13 = a2;
  v5 = _Block_copy(v12);
  if ((VNExecuteBlock(v5, a3) & 1) != 0)
  {
    v6 = v15[7];
    *a1 = v15[6];
    a1[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }

  _Block_object_dispose(&v14, 8);
  v9 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

{
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 (*v17)(__n128 *, __n128 *);
  uint64_t (*v18)(uint64_t);
  const char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v14 = 0;
  v15 = &v14;
  v16 = 0x4012000000;
  v17 = __Block_byref_object_copy__102_25205;
  v18 = __Block_byref_object_dispose__103_25206;
  v20 = 0;
  v21 = 0;
  v19 = "";
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZL15_newFaceIDModeliPU15__autoreleasingP7NSError_block_invoke_25208;
  v12[3] = &unk_1E45475C0;
  v12[4] = &v14;
  v13 = a2;
  v5 = _Block_copy(v12);
  if ((VNExecuteBlock(v5, a3) & 1) != 0)
  {
    v6 = v15[7];
    *a1 = v15[6];
    a1[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }

  _Block_object_dispose(&v14, 8);
  v9 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1A140E334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v7);
  _Unwind_Resume(a1);
}

void sub_1A140E4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__88(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__89(uint64_t a1)
{
  return std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 48);
}

uint64_t ___ZL15_newFaceIDModeliPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  v2 = operator new(0x280uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E453B450;
  vision::mod::FaceIDModel::FaceIDModel((vision::mod::FaceIDModel *)(v2 + 3), *(_DWORD *)(a1 + 40), 1, 10000, 1, 0.1, 1, *(_DWORD *)(a1 + 40));
  *(_QWORD *)&v8 = v3;
  *((_QWORD *)&v8 + 1) = v2;
  std::shared_ptr<vision::mod::ImageAnalyzer>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return 1;
}

void std::__shared_ptr_emplace<vision::mod::FaceIDModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::FaceIDModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<vision::mod::FaceIDModel>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v3;
  __int128 v4;
  void **v5;
  void **v6;
  __int128 v7;
  void **v8;
  void **v9;
  __int128 v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;

  free(*(void **)(a1 + 368));
  *(_QWORD *)(a1 + 368) = 0;
  v2 = *(void **)(a1 + 616);
  if (v2)
  {
    *(_QWORD *)(a1 + 624) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 576);
  if (*(_BYTE *)(a1 + 608) && *v3)
    free(*v3);
  v4 = 0uLL;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_BYTE *)(a1 + 608) = 1;
  v5 = (void **)(a1 + 536);
  if (*(_BYTE *)(a1 + 568) && *v5)
  {
    free(*v5);
    v4 = 0uLL;
  }
  *(_OWORD *)v5 = v4;
  *(_OWORD *)(a1 + 552) = v4;
  *(_BYTE *)(a1 + 568) = 1;
  v6 = (void **)(a1 + 496);
  if (*(_BYTE *)(a1 + 528) && *v6)
    free(*v6);
  v7 = 0uLL;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_BYTE *)(a1 + 528) = 1;
  v8 = (void **)(a1 + 456);
  if (*(_BYTE *)(a1 + 488) && *v8)
  {
    free(*v8);
    v7 = 0uLL;
  }
  *(_OWORD *)v8 = v7;
  *(_OWORD *)(a1 + 472) = v7;
  *(_BYTE *)(a1 + 488) = 1;
  v9 = (void **)(a1 + 416);
  if (*(_BYTE *)(a1 + 448) && *v9)
    free(*v9);
  v10 = 0uLL;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_BYTE *)(a1 + 448) = 1;
  v11 = (void **)(a1 + 376);
  if (*(_BYTE *)(a1 + 408) && *v11)
  {
    free(*v11);
    v10 = 0uLL;
  }
  *(_OWORD *)v11 = v10;
  *(_OWORD *)(a1 + 392) = v10;
  *(_BYTE *)(a1 + 408) = 1;
  v12 = (void **)(a1 + 296);
  if (*(_BYTE *)(a1 + 336) && *v12)
    free(*v12);
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_BYTE *)(a1 + 336) = 1;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 248);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 208);
  v13 = (void **)(a1 + 160);
  if (*(_BYTE *)(a1 + 200) && *v13)
    free(*v13);
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 200) = 1;
  v14 = (void **)(a1 + 112);
  if (*(_BYTE *)(a1 + 152) && *v14)
    free(*v14);
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 152) = 1;
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 24);
}

void ___ZL54_serialNumberToPersonUniqueIdentifierDictionaryClassesv_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v0 = (void *)MEMORY[0x1A1B0B060]();
  VNEntityUniqueIdentifierClasses();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "mutableCopy");

  objc_msgSend(v2, "addObject:", objc_opt_class());
  v3 = objc_msgSend(v2, "copy");
  v4 = (void *)_serialNumberToPersonUniqueIdentifierDictionaryClasses(void)::classes;
  _serialNumberToPersonUniqueIdentifierDictionaryClasses(void)::classes = v3;

  objc_autoreleasePoolPop(v0);
}

void sub_1A140E840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__7411(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = &off_1E453A1B8;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  return result;
}

uint64_t std::map<int,double>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  int *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t **v10;
  BOOL v11;
  int v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = (int *)(v5 + 4);
      v7 = *(uint64_t **)(a1 + 8);
      v8 = v3;
      if (*(uint64_t ***)a1 == v3)
        goto LABEL_8;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = v3;
      if (v7)
      {
        do
        {
          v8 = (uint64_t **)v9;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t **)v10[2];
          v11 = *v8 == (uint64_t *)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *v6;
      if (*((_DWORD *)v8 + 8) < *v6)
      {
LABEL_8:
        if (v7)
          v13 = v8;
        else
          v13 = v3;
        if (v7)
          v14 = v8 + 1;
        else
          v14 = v3;
      }
      else
      {
        v13 = v3;
        v14 = v3;
        if (v7)
        {
          v14 = v3;
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v18 = *((_DWORD *)v7 + 8);
              if (v12 >= v18)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_15;
            }
            if (v18 >= v12)
              break;
            v14 = v13 + 1;
            v7 = v13[1];
            if (!v7)
              goto LABEL_15;
          }
        }
      }
      if (!*v14)
      {
LABEL_15:
        v15 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)v6;
        std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }
      v16 = (_QWORD *)v5[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v5[2];
          v11 = *v17 == (_QWORD)v5;
          v5 = v17;
        }
        while (!v11);
      }
      v5 = v17;
    }
    while (v17 != v4);
  }
  return a1;
}

void sub_1A140EA90(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::vector<std::map<int,double>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1A140EBF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A140EF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, id a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A140F79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  uint64_t v44;
  void *v46;

  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a34);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a32);
  _Block_object_dispose(&a39, 8);

  _Block_object_dispose((const void *)(v44 - 240), 8);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v44 - 176);

  v46 = *(void **)(v44 - 136);
  if (v46)
  {
    *(_QWORD *)(v44 - 128) = v46;
    operator delete(v46);
  }
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v44 - 112);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_48c52_ZTSNSt3__110shared_ptrIN6vision3mod11FaceIDModelEEE64c69_ZTSNSt3__110shared_ptrIN6vision3mod28ImageDescriptorBufferFloat32EEE80c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 72);
  a1[8] = *(_QWORD *)(a2 + 64);
  a1[9] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[10] = 0;
  a1[11] = 0;
  v8 = a1 + 10;
  v8[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
}

void sub_1A140FA1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v2);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_48c52_ZTSNSt3__110shared_ptrIN6vision3mod11FaceIDModelEEE64c69_ZTSNSt3__110shared_ptrIN6vision3mod28ImageDescriptorBufferFloat32EEE80c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 64);
  return std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 48);
}

uint64_t std::allocate_shared[abi:ne180100]<vision::mod::ImageDescriptorBufferFloat32,std::allocator<vision::mod::ImageDescriptorBufferFloat32>,std::vector<long long> &,void *,unsigned long,int,BOOL,void>(uint64_t *a1, _QWORD **a2, void *a3, unint64_t a4, int a5, char a6)
{
  _QWORD *v12;
  uint64_t result;

  v12 = operator new(0x90uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E453B958;
  result = vision::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract((uint64_t)(v12 + 3), a2, a3, a4, a5, a6 != 0);
  v12[3] = &off_1E453A8D0;
  *((_DWORD *)v12 + 32) = 1;
  v12[17] = 0;
  v12[15] = a4 >> 2;
  *a1 = result;
  a1[1] = (uint64_t)v12;
  return result;
}

void sub_1A140FB18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1A14105DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, id *a18, void *a19, char a20)
{
  std::__shared_weak_count *v20;
  vision::mod::ImageClassifierAbstract *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v26;

  __cxa_free_exception(v22);

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v23);
  vision::mod::ImageClassifierAbstract::~ImageClassifierAbstract(v21);

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v26);

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a20);
  vision::mod::ImageDescriptorProcessorEspresso::Options::~Options(a18);
  _Unwind_Resume(a1);
}

void sub_1A1410824(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, ...)
{
  id *v5;
  std::__shared_weak_count *v6;
  void *v7;
  void *v8;
  void *v10;
  va_list va;

  va_start(va, a5);

  std::__shared_weak_count::~__shared_weak_count(v6);
  operator delete(v10);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)va);

  vision::mod::ImageDescriptorProcessorEspresso::Options::~Options(v5);
  _Unwind_Resume(a1);
}

void sub_1A14108D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141095C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1410A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1410B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A1410CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void vision::mod::ImageDescriptor_EspressoJunk::~ImageDescriptor_EspressoJunk(vision::mod::ImageDescriptor_EspressoJunk *this)
{
  *(_QWORD *)this = &off_1E453AC98;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 48);
}

{
  *(_QWORD *)this = &off_1E453AC98;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 48);
  JUMPOUT(0x1A1B0A898);
}

uint64_t vision::mod::ImageDescriptor_EspressoJunk::getRequiredImageType(vision::mod::ImageDescriptor_EspressoJunk *this)
{
  return 1;
}

float vision::mod::ImageDescriptor_EspressoJunk::getRequiredImageSize(vision::mod::ImageDescriptor_EspressoJunk *this)
{
  return 64.0;
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptor_EspressoJunk>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptor_EspressoJunk>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<vision::mod::ImageDescriptor_EspressoJunk>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1A1410EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14110C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1411128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1411174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A14111BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1411208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1411258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14112AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A14112FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1411350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A14115F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14116F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1411764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL VNEntityIdentificationModelIOWriteUInt32ToOutputStream(int a1, void *a2, CC_MD5_CTX *a3, _QWORD *a4)
{
  id v6;
  uint64_t v7;
  void *v8;
  int data;

  data = a1;
  v6 = a2;
  v7 = objc_msgSend(v6, "write:maxLength:", &data, 4);
  if (v7 == 4)
  {
    CC_MD5_Update(a3, &data, 4u);
  }
  else if (a4)
  {
    objc_msgSend(v6, "streamError");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("failed to write to data stream"), v8);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v7 == 4;
}

uint64_t VNEntityIdentificationModelIOWriteBufferToOutputStream(const void *a1, CC_LONG a2, void *a3, CC_MD5_CTX *a4, _QWORD *a5)
{
  id v9;
  uint64_t v10;
  void *v11;

  v9 = a3;
  if (!a1)
  {
    if (a5)
    {
      VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("buffer cannot be nil"), 0);
      v10 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (!VNEntityIdentificationModelIOWriteUInt32ToOutputStream(a2, v9, a4, a5))
    goto LABEL_11;
  if (a2)
  {
    if (objc_msgSend(v9, "write:maxLength:", a1, a2) == a2)
    {
      CC_MD5_Update(a4, a1, a2);
      goto LABEL_6;
    }
    if (a5)
    {
      objc_msgSend(v9, "streamError");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("failed to write to data stream"), v11);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

    }
LABEL_11:
    v10 = 0;
    goto LABEL_12;
  }
LABEL_6:
  v10 = 1;
LABEL_12:

  return v10;
}

uint64_t VNEntityIdentificationModelIOWriteTaggedBufferToOutputStream(int a1, const void *a2, CC_LONG a3, void *a4, CC_MD5_CTX *a5, _QWORD *a6)
{
  id v11;
  uint64_t v12;

  v11 = a4;
  if (VNEntityIdentificationModelIOWriteUInt32ToOutputStream(a1, v11, a5, a6))
    v12 = VNEntityIdentificationModelIOWriteBufferToOutputStream(a2, a3, v11, a5, a6);
  else
    v12 = 0;

  return v12;
}

uint64_t VNEntityIdentificationModelIOWriteTaggedUInt32ToOutputStream(int a1, int a2, void *a3, CC_MD5_CTX *a4, _QWORD *a5)
{
  id v8;
  uint64_t v9;
  int v11;

  v11 = a2;
  v8 = a3;
  if (VNEntityIdentificationModelIOWriteUInt32ToOutputStream(a1, v8, a4, a5))
    v9 = VNEntityIdentificationModelIOWriteBufferToOutputStream(&v11, 4u, v8, a4, a5);
  else
    v9 = 0;

  return v9;
}

uint64_t VNEntityIdentificationModelIOWriteTaggedNSObjectToOutputStream(int a1, void *a2, void *a3, CC_MD5_CTX *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  unint64_t v17;
  void *v18;

  v9 = a2;
  v10 = a3;
  if (v9)
  {
    if (VNEntityIdentificationModelIOWriteUInt32ToOutputStream(a1, v10, a4, (_QWORD *)a5))
    {
      v11 = v9;
      v12 = v10;
      objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v11, 1, a5);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v13)
      {
        v15 = v13;
        v16 = v12;
        v17 = objc_msgSend(v15, "length");
        if (HIDWORD(v17))
        {
          if (a5)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("data overflow to %lu bytes"), v17);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(1, v18, 0);
            *(_QWORD *)a5 = (id)objc_claimAutoreleasedReturnValue();

            a5 = 0;
          }
        }
        else
        {
          a5 = VNEntityIdentificationModelIOWriteBufferToOutputStream((const void *)objc_msgSend(objc_retainAutorelease(v15), "bytes"), v17, v16, a4, (_QWORD *)a5);
        }

      }
      else
      {
        a5 = 0;
      }

    }
    else
    {
      a5 = 0;
    }
  }
  else
  {
    a5 = 1;
  }

  return a5;
}

BOOL VNEntityIdentificationModelIOReadUInt32FromInputStream(void *a1, const void *a2, CC_MD5_CTX *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  void *v9;

  v7 = a1;
  v8 = objc_msgSend(v7, "read:maxLength:", a2, 4);
  if (v8 == 4)
  {
    CC_MD5_Update(a3, a2, 4u);
  }
  else if (a4)
  {
    objc_msgSend(v7, "streamError");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("unexpected end of data stream"), v9);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v8 == 4;
}

BOOL VNEntityIdentificationModelIOReadBufferFromInputStream(void *a1, CC_LONG a2, const void *a3, CC_MD5_CTX *a4, _QWORD *a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v9 = a1;
  v10 = a2;
  v11 = objc_msgSend(v9, "read:maxLength:", a3, a2);
  if (v11 == a2)
  {
    CC_MD5_Update(a4, a3, a2);
  }
  else if (a5)
  {
    objc_msgSend(v9, "streamError");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("unexpected end of data stream"), v12);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v11 == v10;
}

uint64_t VNEntityIdentificationModelIOReadPastUnknownTagData(void *a1, CC_MD5_CTX *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  unsigned int v12;
  _BYTE data[256];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v12 = 0;
  v6 = 0;
  if (VNEntityIdentificationModelIOReadUInt32FromInputStream(v5, &v12, a2, a3))
  {
    v7 = v12;
    v8 = v5;
    if ((_DWORD)v7)
    {
      while (1)
      {
        v9 = v7 >= 0x100 ? 256 : v7;
        if (objc_msgSend(v8, "read:maxLength:", data, v9) != v9)
          break;
        CC_MD5_Update(a2, data, v9);
        v7 -= v9;
        if (!v7)
          goto LABEL_8;
      }
      if (a3)
      {
        objc_msgSend(v8, "streamError");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(1, CFSTR("unexpected end of data stream"), v10);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

      }
      v6 = 0;
    }
    else
    {
LABEL_8:
      v6 = 1;
    }

  }
  return v6;
}

BOOL VNEntityIdentificationModelIOReadBufferOfExpectedLengthFromInputStream(void *a1, uint64_t a2, const void *a3, CC_MD5_CTX *a4, _QWORD *a5)
{
  id v9;
  _BOOL8 v10;
  void *v11;
  unsigned int v13;

  v9 = a1;
  v13 = 0;
  v10 = 0;
  if (VNEntityIdentificationModelIOReadUInt32FromInputStream(v9, &v13, a4, a5))
  {
    if (v13 == (_DWORD)a2)
    {
      v10 = VNEntityIdentificationModelIOReadBufferFromInputStream(v9, a2, a3, a4, a5);
    }
    else
    {
      if (a5)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("encountered unexpected length of %u, instead of %u"), v13, a2);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(1, v11, 0);
        *a5 = (id)objc_claimAutoreleasedReturnValue();

      }
      v10 = 0;
    }
  }

  return v10;
}

void sub_1A14124E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141263C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1412948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  void *v22;
  void *v23;
  void *v24;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a22);
  _Unwind_Resume(a1);
}

void sub_1A1412C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  void *v22;
  void *v23;
  void *v24;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a22);
  _Unwind_Resume(a1);
}

void sub_1A1412D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1412E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A1412F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  a9.super_class = (Class)VNFaceExpressionDetector;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A1413340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<_Geometry2D_point2D_>::__init_with_size[abi:ne180100]<_Geometry2D_point2D_*,_Geometry2D_point2D_*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A1413474(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *__Block_byref_object_copy__7750(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__7751(uint64_t a1)
{
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*(_QWORD **)(a1 + 56));
}

void sub_1A141379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c62_ZTSNSt3__16vectorI20_Geometry2D_point2D_NS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<_Geometry2D_point2D_>::__init_with_size[abi:ne180100]<_Geometry2D_point2D_*,_Geometry2D_point2D_*>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
}

void __destroy_helper_block_ea8_56c62_ZTSNSt3__16vectorI20_Geometry2D_point2D_NS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_1A1413A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::shared_ptr<vision::mod::LandmarkAttributes>::reset[abi:ne180100]<vision::mod::LandmarkAttributes,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E453BE60;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A1413B3C(_Unwind_Exception *exception_object)
{
  id *v1;

  if (v1)
  {
    vision::mod::LandmarkAttributes::~LandmarkAttributes(v1);
    MEMORY[0x1A1B0A898]();
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<vision::mod::LandmarkAttributes *,std::shared_ptr<vision::mod::LandmarkAttributes>::__shared_ptr_default_delete<vision::mod::LandmarkAttributes,vision::mod::LandmarkAttributes>,std::allocator<vision::mod::LandmarkAttributes>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

id *std::__shared_ptr_pointer<vision::mod::LandmarkAttributes *,std::shared_ptr<vision::mod::LandmarkAttributes>::__shared_ptr_default_delete<vision::mod::LandmarkAttributes,vision::mod::LandmarkAttributes>,std::allocator<vision::mod::LandmarkAttributes>>::__on_zero_shared(uint64_t a1)
{
  id *result;

  result = *(id **)(a1 + 24);
  if (result)
  {
    vision::mod::LandmarkAttributes::~LandmarkAttributes(result);
    JUMPOUT(0x1A1B0A898);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<vision::mod::LandmarkAttributes *,std::shared_ptr<vision::mod::LandmarkAttributes>::__shared_ptr_default_delete<vision::mod::LandmarkAttributes,vision::mod::LandmarkAttributes>,std::allocator<vision::mod::LandmarkAttributes>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN6vision3mod18LandmarkAttributesEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1A1413CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1413D88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1413EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1413F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1414164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A14142F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1414430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id VNErrorForCVMLStatus(id a1)
{
  id v1;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v1 = a1;
  v7[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1 == (id)-29)
    {
LABEL_5:
      +[VNError errorForCancellationOfRequest:](VNError, "errorForCancellationOfRequest:", 0);
      return (id)objc_claimAutoreleasedReturnValue();
    }
    if (a1 == 128)
      return 0;
    if (a1 == 99)
      goto LABEL_5;
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("failure with status %lld"), a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "appendFormat:", CFSTR(" (%s)"), CVML_getStatusDescription((unint64_t)v1));
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s "), CVML_getModuleDescription((uint64_t)v1));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "insertString:atIndex:", v4, 0);

    v6 = *MEMORY[0x1E0CB2D50];
    v7[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.Vision"), 9, v5);
    v1 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v1;
}

void sub_1A14146E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14148A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1414B14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1414C5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1414CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1414D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1414D50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1414DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A1414E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1414EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A1414F00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1414F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1414F94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1414FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1415028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1415074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A14150BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1415108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1415250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A1415378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1415C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

void sub_1A1415F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141607C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___Z13_VisionLoggerv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)objc_msgSend(CFSTR("com.apple.Vision"), "UTF8String"), (const char *)objc_msgSend(CFSTR("VisionLog"), "UTF8String"));
  v1 = (void *)_VisionLogger(void)::_visionLogger;
  _VisionLogger(void)::_visionLogger = (uint64_t)v0;

}

void sub_1A1416458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14165B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A14166D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1416780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14168D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1416940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14169DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1416BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1416C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1416D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1416DE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1416F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A1417210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14173C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A14174F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1417678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorForUnknownPersonUniqueIdentifier(uint64_t a1)
{
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown person (%@)"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  VNPersonsModelErrorWithLocalizedDescription(6, v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1A1417770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorWithLocalizedDescription(uint64_t a1, void *a2)
{
  VNPersonsModelErrorWithLocalizedDescriptionAndUnderlyingError(a1, a2, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

id VNPersonsModelErrorWithLocalizedDescriptionAndUnderlyingError(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;

  v5 = a2;
  v6 = a3;
  v7 = objc_alloc(MEMORY[0x1E0C99D80]);
  v8 = (void *)objc_msgSend(v7, "initWithObjectsAndKeys:", v5, *MEMORY[0x1E0CB2D50], v6, *MEMORY[0x1E0CB3388], 0);
  VNPersonsModelErrorWithUserInfo(a1, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_1A1417838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorWithUserInfo(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.vis.VNPersonsModel"), a1, v3);

  return v4;
}

void sub_1A14178A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorForInvalidModelData(void *a1)
{
  VNPersonsModelErrorWithLocalizedDescription(2, a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1A14179C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1A1417B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1417CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1417D48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1417DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1417E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1417ED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1418594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

id ___ZL43_readVersion1PersonAndFaceObservationsChunkP13NSInputStreamP19NSMutableDictionaryP14CC_MD5state_stPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1)
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("face observation %lu of %lu for person identifier '%@'"), a1[5] + 1, a1[6], a1[4]);
}

uint64_t __Block_byref_object_copy__8142(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8143(uint64_t a1)
{

}

BOOL ___ZL24_readTaggedObjectOfClassP13NSInputStreamjP10objc_classP19NSMutableDictionaryP14CC_MD5state_stPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  Class *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BOOL8 v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v20;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", *(_QWORD *)(a1 + 32), a2);
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "setRequiresSecureCoding:", 1);
    objc_msgSend(v5, "setDecodingFailurePolicy:", 1);
    if (*(_DWORD *)(a1 + 56) == 1919895117)
      objc_msgSend(v5, "setClass:forClassName:", objc_opt_class(), CFSTR("VNPersonsModelFaceModel"));
    v6 = (Class *)(a1 + 48);
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:count:", a1 + 48, 1);
    v8 = *MEMORY[0x1E0CB2CD0];
    v20 = 0;
    objc_msgSend(v5, "decodeTopLevelObjectOfClasses:forKey:error:", v7, v8, &v20);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = v20;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v9;

    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v14 = v13 != 0;
    if (a2 && !v13)
    {
      if (v10)
      {
        *a2 = objc_retainAutorelease(v10);
      }
      else
      {
        v15 = (void *)MEMORY[0x1E0CB3940];
        NSStringFromClass(*v6);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "stringWithFormat:", CFSTR("could not decode object of class %@"), v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        VNPersonsModelErrorForIOError(v17);
        v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        *a2 = v18;

      }
    }

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1A1418934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorForIOError(void *a1)
{
  VNPersonsModelErrorWithLocalizedDescription(1, a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1A1418A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1418C90(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a19, 8);
  objc_begin_catch(a1);
  JUMPOUT(0x1A1418C34);
}

void sub_1A1418E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1419324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A141948C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A141957C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1419628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1419784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorForUnacceptableModelVersion(uint64_t a1)
{
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("cannot accept model version %lu"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  VNPersonsModelErrorWithLocalizedDescription(2, v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1A1419878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1419944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A14199B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1419A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1419B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1A1419CBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1419EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1419FA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141A0CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A141A21C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141A2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141A40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141A4E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141A5C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141A670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141A6F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141A790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141A878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141A95C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A141A9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141AB20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A141AC48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141ADC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141AE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141AE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141AF1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141B048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141B148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A141B220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorForReadOnlyModelWithLocalizedDescription(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = objc_alloc(MEMORY[0x1E0C99D80]);
  v3 = (void *)objc_msgSend(v2, "initWithObjectsAndKeys:", v1, *MEMORY[0x1E0CB2D50], 0);
  VNPersonsModelErrorWithUserInfo(3, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A141B2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorCancelledOperation()
{
  void *v0;
  void *v1;
  uint64_t v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v3 = *MEMORY[0x1E0CB2D50];
  v4[0] = CFSTR("operation was cancelled");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.Vision"), 1, v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1A141B384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorForUnsupportedAlgorithm(void *a1)
{
  id v1;
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("unsupported algorithm %@"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  VNPersonsModelErrorWithLocalizedDescription(7, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1A141B424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id VNPersonsModelErrorForUnimplementedMethod(uint64_t a1, uint64_t a2)
{
  +[VNError errorForUnimplementedMethod:ofObject:](VNError, "errorForUnimplementedMethod:ofObject:", a2, a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id VNPersonsModelErrorForIncompatibleFaceprint(void *a1)
{
  VNPersonsModelErrorWithLocalizedDescription(8, a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1A141B594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141B688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A141B768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141BAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141BC7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A141BD54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141BE3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141BEF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141C0B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141C114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141C160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141C1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141C1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141C240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141C320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141C404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A141C454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141C4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141C7A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A141C944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141CAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A141CCA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141CD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141CEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A141CF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141CFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141D094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141D1BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A141D64C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A141D85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A141D990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141DC98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A141E1C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A141E2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141E9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141EA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141EA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A141EACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void vision::mod::ImageDescriptorBufferFloat32::computeDistancesFrom(vision::mod::ImageDescriptorBufferFloat32 *this@<X0>, vDSP_Length *lpsrc@<X1>, float **a3@<X8>)
{
  vision::mod::ImageDescriptorBufferFloat32 *v6;
  vDSP_Length v7;
  vDSP_Length v8;
  const float *DataForKthDescriptor;
  const float *v10;
  uint64_t v11;
  _QWORD *v12;
  const float *v13;
  const float *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  const float *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  const float *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *exception;

  if (!v6)
    __cxa_bad_cast();
  if (v6 == this)
  {
    (*(void (**)(vision::mod::ImageDescriptorBufferFloat32 *))(*(_QWORD *)this + 96))(this);
  }
  else
  {
    if (*((_QWORD *)v6 + 12) != *((_QWORD *)this + 12))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = 3708;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
    v7 = *((_QWORD *)this + 9);
    v8 = lpsrc[9];
    std::vector<float>::vector(a3, v8 * v7);
    if (v7 == 1 && v8 == 1)
    {
      **a3 = (*(float (**)(vision::mod::ImageDescriptorBufferFloat32 *, vDSP_Length *))(*(_QWORD *)this + 88))(this, lpsrc);
    }
    else if (v7 == 1)
    {
      DataForKthDescriptor = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((vision::mod::ImageDescriptorBufferAbstract *)lpsrc, 0);
      v10 = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, 0);
      v11 = vision::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(this, v10, DataForKthDescriptor, v8, *a3);
      if ((v11 & 0x80) == 0)
      {
        v12 = __cxa_allocate_exception(8uLL);
        *v12 = v11;
        __cxa_throw(v12, MEMORY[0x1E0DE4F28], 0);
      }
    }
    else if (v8 == 1)
    {
      v13 = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((vision::mod::ImageDescriptorBufferAbstract *)lpsrc, 0);
      v14 = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, 0);
      v15 = vision::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(this, v13, v14, v7, *a3);
      if ((v15 & 0x80) == 0)
      {
        v16 = __cxa_allocate_exception(8uLL);
        *v16 = v15;
        __cxa_throw(v16, MEMORY[0x1E0DE4F28], 0);
      }
    }
    else
    {
      v17 = vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((vision::mod::ImageDescriptorBufferAbstract *)lpsrc, 0);
      if ((int)v7 >= 1)
      {
        v18 = (const float *)v17;
        v19 = 0;
        v20 = 0;
        v21 = v7;
        do
        {
          v22 = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, v19);
          v23 = vision::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(this, v22, v18, v8, &(*a3)[v20]);
          if ((v23 & 0x80) == 0)
          {
            v24 = __cxa_allocate_exception(8uLL);
            *v24 = v23;
            __cxa_throw(v24, MEMORY[0x1E0DE4F28], 0);
          }
          v20 += v8;
          ++v19;
        }
        while (v21 != v19);
      }
    }
  }
}

void sub_1A141ED40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float vision::mod::ImageDescriptorBufferFloat32::computeDistanceFrom(vision::mod::ImageDescriptorBufferFloat32 *this, const vision::mod::ImageDescriptorBufferAbstract *a2)
{
  const float *DataForKthDescriptor;
  const float *v6;
  uint64_t v7;
  _QWORD *exception;
  float __C;

  if (*((_QWORD *)this + 9) != 1 || *((_QWORD *)a2 + 9) != 1)
  {
    syslog(5, "ERROR: Invalid number of descriptors, should be 1");
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
    goto LABEL_9;
  }
  DataForKthDescriptor = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, 0);
  v6 = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(a2, 0);
  __C = 0.0;
  v7 = vision::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(this, DataForKthDescriptor, v6, &__C);
  if ((v7 & 0x80) == 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = v7;
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  return __C;
}

uint64_t vision::mod::ImageDescriptorBufferFloat32::computeSelfDistances@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  vision::mod::ImageDescriptorBufferAbstract *v4;
  const float *DataForKthDescriptor;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  const float *v9;
  uint64_t v10;
  _QWORD *exception;

  v3 = *(_QWORD *)(this + 72);
  if ((int)v3 > 1)
  {
    v4 = (vision::mod::ImageDescriptorBufferAbstract *)this;
    std::vector<float>::vector(a2, (uint64_t)(int)((v3 - 1) * v3 + (((int)v3 - 1) * (int)v3 < 0)) >> 1);
    DataForKthDescriptor = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(v4, 0);
    v6 = 0;
    v7 = v3;
    for (i = 1; i != v7; ++i)
    {
      v9 = (const float *)vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(v4, i);
      this = vision::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(v4, v9, DataForKthDescriptor, i, (float *)(*a2 + 4 * v6));
      if ((this & 0x80) == 0)
      {
        v10 = this;
        exception = __cxa_allocate_exception(8uLL);
        *exception = v10;
        __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
      }
      v6 += i;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void sub_1A141EF20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *vision::mod::ImageDescriptorBufferFloat32::getRepresentative(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  vDSP_Length v17;
  vDSP_Length v18;
  const void *v19;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *exception;
  void *__p;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;

  v4 = *(_QWORD *)(a1 + 72);
  if (v4 != 1)
  {
    if (v4)
    {
      v7 = malloc_type_realloc(*(void **)(a1 + 112), 4 * v4, 0x100004052888210uLL);
      *(_QWORD *)(a1 + 112) = v7;
      if (v7)
      {
        v8 = operator new(8uLL);
        *v8 = a3;
        v27 = v8 + 1;
        v28 = v8 + 1;
        __p = v8;
        v26 = v8;
        v9 = *(_QWORD *)(a1 + 96);
        v10 = malloc_type_malloc(4 * v9, 0x309AE310uLL);
        if (!v10)
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = 3707;
          __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
        }
        v11 = operator new();
        vision::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(v11, &v26, v10, 4 * v9, 1, 1);
        *(_QWORD *)v11 = &off_1E453A8D0;
        *(_DWORD *)(v11 + 104) = 1;
        *(_QWORD *)(v11 + 112) = 0;
        *(_QWORD *)(v11 + 96) = v9 & 0x3FFFFFFFFFFFFFFFLL;
        if (*(_QWORD *)(a1 + 96))
        {
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 72);
          v14 = v13 >> 1;
          v15 = (v13 - 1) >> 1;
          do
          {
            if (*(_QWORD *)(a1 + 72))
            {
              v16 = 0;
              v17 = 0;
              do
              {
                *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v17++) = *(_DWORD *)(vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((vision::mod::ImageDescriptorBufferAbstract *)a1, v16 >> 32)+ 4 * v12);
                v18 = *(_QWORD *)(a1 + 72);
                v16 += 0x100000000;
              }
              while (v17 < v18);
            }
            else
            {
              v18 = 0;
            }
            if (a2 == 1)
            {
              vDSP_vsort(*(float **)(a1 + 112), v18, -1);
              *((float *)v10 + v12) = (float)(*(float *)(*(_QWORD *)(a1 + 112) + 4 * v14)
                                            + *(float *)(*(_QWORD *)(a1 + 112) + 4 * v15))
                                    * 0.5;
            }
            else
            {
              if (a2 != 2)
              {
                syslog(5, "Unknown representative mode", __p, v26, v27, v28);
                v21 = __cxa_allocate_exception(8uLL);
                *v21 = 3703;
                __cxa_throw(v21, MEMORY[0x1E0DE4F28], 0);
              }
              vDSP_meanv(*(const float **)(a1 + 112), 1, (float *)v10 + v12, v18);
            }
            ++v12;
          }
          while (v12 < *(_QWORD *)(a1 + 96));
        }
        operator delete(__p);
        return (void *)v11;
      }
      v22 = __cxa_allocate_exception(8uLL);
      v23 = 3707;
    }
    else
    {
      syslog(5, "ERROR: Cannot compute the representative of an empty buffer");
      v22 = __cxa_allocate_exception(8uLL);
      v23 = 3710;
    }
    *v22 = v23;
    __cxa_throw(v22, MEMORY[0x1E0DE4F28], 0);
  }
  v19 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v19)
  return 0;
}

void sub_1A141F21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  uint64_t v9;

  MEMORY[0x1A1B0A898](v9, 0x10B1C408DA78774);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(vision::mod::ImageDescriptorBufferFloat32 *this, const float *__A, const float *a3, vDSP_Length __N, float *__C)
{
  uint64_t v5;
  const float *v6;
  float *__Y;
  vDSP_Length v8;
  uint64_t v11;
  int v12;
  uint64_t v14;
  _QWORD *exception;
  float __Aa;
  float v17;

  v5 = 3709;
  if (!__A)
    return v5;
  v6 = a3;
  if (!a3)
    return v5;
  __Y = __C;
  if (!__C)
    return v5;
  v8 = __N;
  if (__N <= 7)
  {
    if (__N)
    {
      v5 = 3712;
      while (1)
      {
        v11 = vision::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(this, __A, v6, __Y);
        if ((v11 & 0x80) == 0)
          break;
        v6 = (const float *)((char *)v6 + *((_QWORD *)this + 8));
        ++__Y;
        if (!--v8)
          return v5;
      }
      goto LABEL_22;
    }
    return 3712;
  }
  v12 = *((_DWORD *)this + 26);
  switch(v12)
  {
    case 3:
      __Aa = 0.5;
      vDSP_vfill(&__Aa, __C, 1, __N);
      cblas_sgemv(CblasColMajor, CblasTrans, *((_DWORD *)this + 24), v8, 0.5, v6, *((_DWORD *)this + 24), __A, 1, 1.0, __Y, 1);
      return 3712;
    case 2:
      v17 = 0.5;
      vDSP_vfill(&v17, __C, 1, __N);
      cblas_sgemv(CblasColMajor, CblasTrans, *((_DWORD *)this + 24), v8, -0.5, v6, *((_DWORD *)this + 24), __A, 1, 1.0, __Y, 1);
      return 3712;
    case 1:
      v5 = 3712;
      while (1)
      {
        v11 = vision::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(this, __A, v6, __Y);
        if ((v11 & 0x80) == 0)
          break;
        v6 = (const float *)((char *)v6 + *((_QWORD *)this + 8));
        ++__Y;
        if (!--v8)
          return v5;
      }
LABEL_22:
      v14 = v11;
      exception = __cxa_allocate_exception(8uLL);
      *exception = v14;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  syslog(5, "ERROR: Unknown distance function");
  return 3702;
}

uint64_t vision::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(vision::mod::ImageDescriptorBufferFloat32 *this, const float *__A, const float *a3, float *__C)
{
  uint64_t v4;
  int v6;
  float v7;
  float __Ca;
  float v10;

  v4 = 3709;
  if (__A && a3)
  {
    *__C = 0.0;
    v6 = *((_DWORD *)this + 26);
    switch(v6)
    {
      case 3:
        __Ca = 0.0;
        vDSP_dotpr(__A, 1, a3, 1, &__Ca, *((_QWORD *)this + 12));
        v7 = (float)(__Ca + 1.0) * 0.5;
        break;
      case 2:
        v10 = 0.0;
        vDSP_dotpr(__A, 1, a3, 1, &v10, *((_QWORD *)this + 12));
        v7 = (float)((float)(v10 + 1.0) * -0.5) + 1.0;
        break;
      case 1:
        vDSP_distancesq(__A, 1, a3, 1, __C, *((_QWORD *)this + 12));
        v7 = sqrtf(*__C);
        break;
      default:
        syslog(5, "ERROR: Unknown distance function");
        return 3702;
    }
    *__C = v7;
    return 3712;
  }
  return v4;
}

void vision::mod::descriptorBufferUnpackedScores(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  _QWORD *exception;
  __int128 v30;
  void *__p[3];

  *a1 = 0;
  a1[1] = 0;
  v8 = a2[9];
  v9 = (unint64_t)(*(uint64_t (**)(_QWORD *))(*a2 + 104))(a2) >> 2;
  if (v9 == a4)
  {
    *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
    v10 = (void *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    __p[0] = v10;
    v11 = (_QWORD *)operator new();
    *v11 = &off_1E453BF08;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    __p[1] = v11;
    std::shared_ptr<vision::mod::ImageAnalyzer>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)__p);
    v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v13 = (unint64_t *)((char *)__p[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    if (v9 != a4 + 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = 3708;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
    std::vector<float>::resize((char **)a3, v8);
    memset(__p, 0, sizeof(__p));
    std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(__p, (const void *)a2[1], a2[2], (uint64_t)(a2[2] - a2[1]) >> 3);
    if (v8 != ((char *)__p[1] - (char *)__p[0]) >> 3)
      std::vector<long long>::resize((char **)__p, v8);
    v15 = 4 * (v9 - 1);
    v16 = malloc_type_malloc(v8 * v15, 0xD8247996uLL);
    v17 = operator new(0x90uLL);
    v17[1] = 0;
    v17[2] = 0;
    *v17 = &off_1E453B958;
    v18 = vision::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract((uint64_t)(v17 + 3), (_QWORD **)__p, v16, v15, v8, 1);
    v17[3] = &off_1E453A8D0;
    *((_DWORD *)v17 + 32) = 1;
    v17[17] = 0;
    v17[15] = (v9 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v30 = v18;
    *((_QWORD *)&v30 + 1) = v17;
    std::shared_ptr<vision::mod::ImageAnalyzer>::operator=[abi:ne180100]((uint64_t)a1, &v30);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *a1;
    *(_QWORD *)(v22 + 96) = v9 - 1;
    *(_DWORD *)(v22 + 104) = *((_DWORD *)a2 + 26);
    if (v8)
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 4 * v9;
      do
      {
        v27 = (char *)(a2[7] + v23);
        v28 = (void *)(*(_QWORD *)(*a1 + 56) + v24);
        *(float *)(*(_QWORD *)a3 + 4 * v25) = *(float *)&v27[v15] / 0.00001;
        memcpy(v28, v27, v15);
        ++v25;
        v24 += v15;
        v23 += v26;
      }
      while (v8 != v25);
    }
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_1A141F7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  uint64_t v12;

  if (__p)
    operator delete(__p);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<vision::mod::ImageDescriptorBufferFloat32 *,std::shared_ptr<vision::mod::ImageDescriptorBufferFloat32>::__shared_ptr_default_delete<vision::mod::ImageDescriptorBufferFloat32,vision::mod::ImageDescriptorBufferFloat32>,std::allocator<vision::mod::ImageDescriptorBufferFloat32>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_pointer<vision::mod::ImageDescriptorBufferFloat32 *,std::shared_ptr<vision::mod::ImageDescriptorBufferFloat32>::__shared_ptr_default_delete<vision::mod::ImageDescriptorBufferFloat32,vision::mod::ImageDescriptorBufferFloat32>,std::allocator<vision::mod::ImageDescriptorBufferFloat32>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<vision::mod::ImageDescriptorBufferFloat32 *,std::shared_ptr<vision::mod::ImageDescriptorBufferFloat32>::__shared_ptr_default_delete<vision::mod::ImageDescriptorBufferFloat32,vision::mod::ImageDescriptorBufferFloat32>,std::allocator<vision::mod::ImageDescriptorBufferFloat32>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN6vision3mod28ImageDescriptorBufferFloat32EE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1A141FAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8993(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8994(uint64_t a1)
{

}

uint64_t Face3D_estimateCameraProjective(uint64_t a1, uint64_t a2, float *a3, uint64_t a4)
{
  int v6;
  char *v9;
  uint64_t v10;
  void *v11;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  char *v18;
  float *v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  size_t v29;
  float v30;
  size_t v31;
  char *v32;
  size_t v33;
  char *v34;
  char *v35;
  vDSP_Length v36;
  float *v37;
  int v38;
  float *v39;
  float *v40;
  size_t v41;
  unsigned int v43;
  size_t v44;
  __CLPK_real *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  float *v71;
  float v72;
  float *v73;
  float *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  char *v82;
  float v83;
  float v84;
  unsigned int v85;
  float *v86[2];
  float *v87[2];
  void *v88[2];
  void *v89[2];
  void *v90[2];
  void *v91[2];
  __int128 __A;
  void *__src[2];
  void *__dst[2];
  float *__C[2];
  __CLPK_real __work;
  __CLPK_integer __lwork;
  unsigned int v98;
  __CLPK_integer __ldb;
  __CLPK_integer __lda;
  __CLPK_integer __nrhs;
  __CLPK_integer __n;
  char __trans;
  __CLPK_integer __m;
  float v105[4];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (v6 != *(_DWORD *)(a2 + 24))
    {
      v9 = 0;
      v11 = 0;
      v12 = 0;
      v10 = 2172;
      goto LABEL_47;
    }
    *(_OWORD *)__dst = 0u;
    *(_OWORD *)__C = 0u;
    Geometry2D_mallocHomo2D((uint64_t)__dst, v6);
    v9 = 0;
    v10 = 2171;
    if (!__dst[0] || !__dst[1] || !__C[0])
      goto LABEL_46;
    v11 = 0;
    v12 = 0;
    if (SLODWORD(__C[1]) < 1)
      goto LABEL_47;
    if (*(_QWORD *)a1 && *(_QWORD *)(a1 + 8) && (v13 = *(_DWORD *)(a1 + 16), v13 >= 1))
    {
      if (v13 == LODWORD(__C[1]))
      {
        memcpy(__dst[0], *(const void **)a1, 4 * LODWORD(__C[1]));
        memcpy(__dst[1], *(const void **)(a1 + 8), 4 * *(int *)(a1 + 16));
        LODWORD(__A) = 1065353216;
        vDSP_vfill((const float *)&__A, __C[0], 1, *(int *)(a1 + 16));
        __A = 0u;
        *(_OWORD *)__src = 0u;
        Geometry2D_mallocHomo2D((uint64_t)&__A, *(_DWORD *)(a1 + 16));
        v9 = 0;
        v14 = __A;
        v10 = 2171;
        if ((_QWORD)__A)
        {
          v15 = *((_QWORD *)&__A + 1);
          if (*((_QWORD *)&__A + 1))
          {
            v16 = __src[0];
            if (__src[0])
            {
              v11 = 0;
              v12 = 0;
              if (SLODWORD(__src[1]) < 1)
                goto LABEL_47;
              v17 = (char *)__dst[0];
              if (!__dst[0] || (v18 = (char *)__dst[1]) == 0 || (v19 = __C[0]) == 0)
              {
                v9 = 0;
                v11 = 0;
                v12 = 0;
                v10 = 1916;
                goto LABEL_47;
              }
              v9 = 0;
              v10 = 1916;
              if (SLODWORD(__C[1]) >= 1)
              {
                v11 = 0;
                v12 = 0;
                if (LODWORD(__C[1]) == LODWORD(__src[1]))
                {
                  v20 = 0;
                  v21 = a3[3];
                  v22 = a3[4];
                  v23 = a3[7];
                  v24 = 1.0 / *a3;
                  v25 = *a3 * v22;
                  v26 = (float)-v21 / v25;
                  v27 = (float)((float)(v21 * v23) / v25) - (float)(a3[6] / *a3);
                  v28 = 1.0 / v22;
                  v29 = 4 * LODWORD(__src[1]);
                  v30 = (float)-v23 / v22;
                  do
                  {
                    *(float *)(v14 + v20) = (float)((float)(v26 * *(float *)&v18[v20])
                                                  + (float)(v24 * *(float *)&v17[v20]))
                                          + (float)(v27 * v19[v20 / 4]);
                    *(float *)(v15 + v20) = (float)(v30 * v19[v20 / 4]) + (float)(v28 * *(float *)&v18[v20]);
                    v20 += 4;
                  }
                  while (v29 != v20);
                  memcpy(v16, v19, v29);
                  v31 = 16 * *(int *)(a2 + 24);
                  v32 = (char *)malloc_type_malloc(v31, 0xFD7F38A1uLL);
                  v9 = v32;
                  if (v32)
                  {
                    v33 = 4 * *(int *)(a2 + 24);
                    memcpy(v32, *(const void **)a2, v33);
                    v34 = &v9[4 * *(int *)(a2 + 24)];
                    memcpy(v34, *(const void **)(a2 + 8), v33);
                    v35 = &v34[4 * *(int *)(a2 + 24)];
                    memcpy(v35, *(const void **)(a2 + 16), v33);
                    v36 = *(int *)(a2 + 24);
                    LODWORD(v90[0]) = 1065353216;
                    vDSP_vfill((const float *)v90, (float *)&v35[4 * v36], 1, v36);
                    v11 = malloc_type_malloc(v31, 0x50CC6BCBuLL);
                    if (v11)
                    {
                      v12 = (float *)malloc_type_malloc(8 * *(int *)(a2 + 24), 0x100004052888210uLL);
                      if (v12)
                      {
                        *(_OWORD *)v90 = 0u;
                        *(_OWORD *)v91 = 0u;
                        Geometry2D_mallocHomo2D((uint64_t)v90, *(_DWORD *)(a1 + 16));
                        v10 = 2171;
                        if (v90[0])
                        {
                          if (v90[1])
                          {
                            if (v91[0])
                            {
                              if (SLODWORD(v91[1]) >= 1)
                              {
                                *(_OWORD *)v88 = 0u;
                                *(_OWORD *)v89 = 0u;
                                Geometry2D_mallocHomo2D((uint64_t)v88, *(_DWORD *)(a1 + 16));
                                v10 = 2171;
                                if (v88[0])
                                {
                                  if (v88[1] && v89[0] && SLODWORD(v89[1]) >= 1)
                                  {
                                    v37 = 0;
                                    v38 = 0;
                                    *(_OWORD *)v86 = 0u;
                                    *(_OWORD *)v87 = 0u;
                                    if ((_QWORD)__A && *((_QWORD *)&__A + 1))
                                    {
                                      v39 = 0;
                                      v40 = 0;
                                      if (__src[0])
                                      {
                                        if (SLODWORD(__src[1]) < 1)
                                        {
                                          v38 = 0;
                                          v37 = 0;
                                          v39 = 0;
                                          v40 = 0;
                                        }
                                        else
                                        {
                                          Geometry2D_mallocHomo2D((uint64_t)v86, (int)__src[1]);
                                          v40 = v86[0];
                                          v39 = v86[1];
                                          v37 = v87[0];
                                          v38 = (int)v87[1];
                                          if (v86[0] && v86[1] && v87[0] && SLODWORD(v87[1]) >= 1)
                                          {
                                            v41 = 4 * SLODWORD(__src[1]);
                                            LODWORD(v87[1]) = __src[1];
                                            memcpy(v86[0], (const void *)__A, v41);
                                            memcpy(v39, *((const void **)&__A + 1), v41);
                                            memcpy(v37, __src[0], v41);
                                            v40 = v86[0];
                                            v39 = v86[1];
                                            v37 = v87[0];
                                            v38 = (int)v87[1];
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      v39 = 0;
                                      v40 = 0;
                                    }
                                    v10 = 2171;
                                    if (v40)
                                    {
                                      if (v39 && v37 && v38 >= 1)
                                      {
                                        v43 = 0;
                                        v82 = "The %d argument had an illegal value.";
                                        while (1)
                                        {
                                          v85 = v43;
                                          v44 = 4 * SLODWORD(v87[1]);
                                          memcpy(v12, v86[0], v44);
                                          memcpy(&v12[SLODWORD(v87[1])], v86[1], v44);
                                          memcpy(v11, v9, v31);
                                          __m = *(_DWORD *)(a2 + 24);
                                          __trans = 78;
                                          __nrhs = 2;
                                          __n = 4;
                                          __ldb = __m;
                                          __lda = __m;
                                          __lwork = -1;
                                          v98 = 0;
                                          sgels_(&__trans, &__m, &__n, &__nrhs, 0, &__lda, 0, &__ldb, &__work, &__lwork, (__CLPK_integer *)&v98);
                                          __lwork = (int)__work;
                                          v45 = (__CLPK_real *)malloc_type_malloc(4 * (int)__work, 0x100004052888210uLL);
                                          if (!v45)
                                          {
                                            v10 = 2171;
                                            goto LABEL_80;
                                          }
                                          sgels_(&__trans, &__m, &__n, &__nrhs, (__CLPK_real *)v11, &__lda, v12, &__ldb, v45, &__lwork, (__CLPK_integer *)&v98);
                                          if ((int)v98 > 0)
                                            break;
                                          if ((v98 & 0x80000000) != 0)
                                          {
                                            v82 = "The %d-th diagonal element of the triangular factor of A is zero, so t"
                                                  "hat A does not have full rank; the least squares solution could not be computed.";
                                            break;
                                          }
                                          v46 = *v12;
                                          v47 = v12[1];
                                          v48 = v12[2];
                                          v49 = v12[3];
                                          v50 = v12[__m];
                                          v51 = v12[__m + 1];
                                          v52 = v12[__m + 2];
                                          v53 = v12[__m + 3];
                                          free(v45);
                                          v54 = sqrtf((float)(1.0/ sqrtf((float)((float)(v47 * v47) + (float)(v46 * v46))+ (float)(v48 * v48)))* (float)(1.0/ sqrtf((float)((float)(v51 * v51) + (float)(v50 * v50))+ (float)(v52 * v52))));
                                          *(float *)(a4 + 44) = v54;
                                          v55 = v46 * v54;
                                          v56 = v47 * v54;
                                          v57 = v48 * v54;
                                          v58 = v49 * v54;
                                          v59 = v50 * v54;
                                          v60 = v51 * v54;
                                          v61 = v52 * v54;
                                          v83 = (float)(v57 * v59) - (float)(v55 * (float)(v52 * v54));
                                          v84 = (float)(v56 * (float)(v52 * v54)) - (float)(v57 * v60);
                                          v105[0] = v84;
                                          v105[1] = v83;
                                          v105[2] = (float)(v55 * v60) - (float)(v56 * v59);
                                          v105[3] = v54;
                                          *(float *)(a4 + 36) = v58;
                                          *(float *)(a4 + 40) = v53 * v54;
                                          v10 = Geometry2D_metricToPixelHomo2D((uint64_t *)v86, a3, (uint64_t *)v90);
                                          if ((v10 & 0x80) == 0)
                                            goto LABEL_47;
                                          v62 = *(unsigned int *)(a2 + 24);
                                          v63 = v87[0];
                                          __m = 0;
                                          vDSP_vfill((const float *)&__m, v87[0], 1, (int)v62);
                                          v64 = 0;
                                          LODWORD(v65) = 0;
                                          do
                                          {
                                            if ((int)v62 >= 1)
                                            {
                                              v65 = (int)v65;
                                              v66 = v105[v64];
                                              v67 = v63;
                                              v68 = v62;
                                              do
                                              {
                                                *v67 = *v67 + (float)(*(float *)&v9[4 * v65] * v66);
                                                ++v67;
                                                ++v65;
                                                --v68;
                                              }
                                              while (v68);
                                            }
                                            ++v64;
                                          }
                                          while (v64 != 4);
                                          vDSP_vsdiv(v87[0], 1, (const float *)(a4 + 44), v87[0], 1, *(int *)(a2 + 24));
                                          vDSP_vmul((const float *)__A, 1, v87[0], 1, v86[0], 1, *(int *)(a2 + 24));
                                          vDSP_vmul(*((const float **)&__A + 1), 1, v87[0], 1, v86[1], 1, *(int *)(a2 + 24));
                                          v10 = Geometry2D_metricToPixelHomo2D((uint64_t *)v86, a3, (uint64_t *)v88);
                                          if ((v10 & 0x80) == 0)
                                            goto LABEL_47;
                                          v69 = LODWORD(v91[1]);
                                          if (SLODWORD(v91[1]) > 0)
                                          {
                                            v70 = (float *)v90[0];
                                            v71 = (float *)v90[1];
                                            v72 = 0.0;
                                            v73 = (float *)v88[0];
                                            v74 = (float *)v88[1];
                                            do
                                            {
                                              v75 = *v70++;
                                              v76 = v75;
                                              v77 = *v73++;
                                              v78 = v77;
                                              v79 = *v71++;
                                              v80 = v79;
                                              v81 = *v74++;
                                              v72 = v72
                                                  + (float)((float)((float)(v80 - v81) * (float)(v80 - v81))
                                                          + (float)((float)(v76 - v78) * (float)(v76 - v78)));
                                              --v69;
                                            }
                                            while (v69);
                                            if (v85 <= 0x3E6)
                                            {
                                              v43 = v85 + 1;
                                              if (v72 > 1.0)
                                                continue;
                                            }
                                          }
                                          *(float *)a4 = v55;
                                          *(float *)(a4 + 4) = v59;
                                          *(float *)(a4 + 24) = v57;
                                          *(float *)(a4 + 28) = v61;
                                          *(float *)(a4 + 8) = v84;
                                          *(float *)(a4 + 12) = v56;
                                          *(float *)(a4 + 16) = v60;
                                          *(float *)(a4 + 20) = v83;
                                          *(float *)(a4 + 32) = (float)(v55 * v60) - (float)(v56 * v59);
                                          goto LABEL_47;
                                        }
                                        syslog(3, v82, v98);
                                        v10 = 2159;
LABEL_80:
                                        free(v45);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        goto LABEL_47;
                      }
                      goto LABEL_53;
                    }
                  }
                  else
                  {
                    v11 = 0;
                  }
                  v12 = 0;
LABEL_53:
                  v10 = 2171;
                }
LABEL_47:
                free(__dst[0]);
                __dst[0] = 0;
                free(__dst[1]);
                __dst[1] = 0;
                free(__C[0]);
                __C[0] = 0;
                LODWORD(__C[1]) = 0;
                free((void *)__A);
                *(_QWORD *)&__A = 0;
                free(*((void **)&__A + 1));
                *((_QWORD *)&__A + 1) = 0;
                free(__src[0]);
                __src[0] = 0;
                LODWORD(__src[1]) = 0;
                free(v90[0]);
                v90[0] = 0;
                free(v90[1]);
                v90[1] = 0;
                free(v91[0]);
                v91[0] = 0;
                LODWORD(v91[1]) = 0;
                free(v88[0]);
                v88[0] = 0;
                free(v88[1]);
                v88[1] = 0;
                free(v89[0]);
                v89[0] = 0;
                LODWORD(v89[1]) = 0;
                free(v86[0]);
                v86[0] = 0;
                free(v86[1]);
                v86[1] = 0;
                free(v87[0]);
                free(v9);
                free(v11);
                free(v12);
                return v10;
              }
            }
          }
        }
LABEL_46:
        v11 = 0;
        v12 = 0;
        goto LABEL_47;
      }
      v10 = 1916;
    }
    else
    {
      v10 = 1917;
    }
    v9 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_47;
  }
  return 893;
}

void sub_1A14206DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A14207A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1420A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A1420B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void VNRecordImageTooSmallWarningWithImageMinimumShortDimension(void *a1, uint64_t a2)
{
  void *v3;
  id v4;

  v4 = a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "recordWarning:value:", CFSTR("VNRequestWarningImageMinimumShortDimension"), v3);

}

void sub_1A1420C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void VNRecordBlinkDetectionFailureWarning(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v6[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "recordWarning:value:", CFSTR("VNRequestWarningBlinkDetectionFailure"), v5);

}

void sub_1A1420D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void VNRecordImageTilingWarning(void *a1, unint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if ((a3 | a2) >= 2)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = v6;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9[1] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "recordWarning:value:", CFSTR("VNRequestWarningTiledAnalysis"), v8);

  }
}

void sub_1A1420E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A1420EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1420F30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1420FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14210F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1421254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1A14213E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1421630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

Class ___ZL31getVCPPetsPoseImageRequestClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!VideoProcessingLibraryCore(char **)::frameworkLibrary)
  {
    VideoProcessingLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!VideoProcessingLibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VCPPetsPoseImageRequest");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getVCPPetsPoseImageRequestClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t apple::vision::libraries::autotrace::ATRRecord::ATRRecord(uint64_t this, const EPolygon *a2, int a3, int a4)
{
  float64x2_t v4;
  int v5;
  float32x2_t *v6;
  int v7;
  float32x2_t *v8;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float64x2_t v14;
  float32x2_t v15;
  _DWORD *v16;
  float v17;
  __int32 *v18;
  __int32 v19;
  float v20;

  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 8) = a3;
  *(_DWORD *)(this + 12) = a4;
  v4 = 0uLL;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  if (a4 >= 1)
  {
    v5 = 0;
    v6 = (float32x2_t *)*((_QWORD *)a2 + 1);
    v7 = *(_DWORD *)a2;
    v8 = &v6[a3];
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0uLL;
    do
    {
      v15 = *v8;
      if (!v5)
      {
        *(_DWORD *)(this + 56) = v15.i32[0];
        *(float32x2_t *)(this + 64) = v15;
        v18 = (__int32 *)(this + 60);
        v19 = v15.i32[1];
        v20 = v15.f32[1];
        v11 = v15.f32[1];
        v12 = v15.f32[0];
        v13 = v15.f32[0];
LABEL_12:
        *v18 = v19;
        v10 = v20;
        goto LABEL_13;
      }
      if (v15.f32[0] >= v13)
      {
        v16 = (_DWORD *)(this + 64);
        LODWORD(v17) = *(float32x2_t *)v8->f32;
        if (v15.f32[0] <= v12)
          goto LABEL_9;
      }
      else
      {
        v16 = (_DWORD *)(this + 56);
        v17 = v12;
        LODWORD(v13) = *(float32x2_t *)v8->f32;
      }
      *v16 = v15.i32[0];
      v12 = v17;
LABEL_9:
      v19 = v15.i32[1];
      if (v15.f32[1] < v11)
      {
        v18 = (__int32 *)(this + 60);
        v20 = v10;
        v11 = v15.f32[1];
        goto LABEL_12;
      }
      v18 = (__int32 *)(this + 68);
      v20 = v15.f32[1];
      if (v15.f32[1] > v10)
        goto LABEL_12;
LABEL_13:
      v4 = vaddq_f64(v4, vcvtq_f64_f32(v15));
      v14 = vaddq_f64(v14, vcvtq_f64_f32(vmul_f32(v15, v15)));
      *(float64x2_t *)(this + 16) = v4;
      *(float64x2_t *)(this + 32) = v14;
      v9 = v9 + vmul_lane_f32(v15, v15, 1).f32[0];
      *(double *)(this + 48) = v9;
      ++v8;
      if (a3 + 1 < v7)
      {
        ++a3;
      }
      else
      {
        v8 = v6;
        a3 = 0;
      }
      ++v5;
    }
    while (a4 != v5);
  }
  return this;
}

uint64_t apple::vision::libraries::autotrace::ATRRecord::LinearRegression(apple::vision::libraries::autotrace::ATRRecord *this, BOOL *a2, float *a3, float *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  float v8;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19;

  v4 = (float)(1.0 / (float)*((int *)this + 3));
  v6 = *((double *)this + 2);
  v5 = *((double *)this + 3);
  v7 = v5 * v4;
  v8 = v5 * v4;
  v9 = v6 * v4;
  v10 = *((float *)this + 16) - *((float *)this + 14);
  v11 = v9;
  v12 = *((float *)this + 17) - *((float *)this + 15);
  if (v10 <= v12)
  {
    v17 = *((double *)this + 5) - v7 * v5;
    if (v17 != 0.0)
    {
      v19 = *((double *)this + 6) - v9 * v5;
      v15 = v19 / v17;
      v16 = v11 - (float)(v15 * v8);
      goto LABEL_7;
    }
    return 0;
  }
  v13 = *((double *)this + 4) - v9 * v6;
  if (v13 == 0.0)
    return 0;
  v14 = *((double *)this + 6) + -v9 * v5;
  v15 = v14 / v13;
  v16 = v8 - (float)(v15 * v11);
LABEL_7:
  *a2 = v10 > v12;
  *a3 = v16;
  *a4 = v15;
  return 1;
}

float apple::vision::libraries::autotrace::ATRRecord::MaxDistanceFromLine(int **this, unsigned int a2, float a3, float a4)
{
  int v4;
  uint64_t v5;
  int v6;
  float v7;
  int v8;
  float v9;
  float v10;
  uint64_t v12;

  v4 = *((_DWORD *)this + 3);
  if (v4 < 1)
    return 0.0;
  v5 = *((_QWORD *)*this + 1);
  v6 = **this;
  v7 = 1.0 / sqrtf((float)(a4 * a4) + 1.0);
  v8 = *((_DWORD *)this + 2);
  v9 = 0.0;
  do
  {
    v12 = *(_QWORD *)(v5 + 8 * v8);
    v10 = v7
        * vabds_f32(*(float *)((unint64_t)&v12 | (4 * a2)), a3 + (float)(a4 * *(float *)((unint64_t)&v12 | (4 * (a2 ^ 1)))));
    if (v10 > v9)
      v9 = v10;
    if (v8 + 1 == v6)
      v8 = 0;
    else
      ++v8;
    --v4;
  }
  while (v4);
  return v9;
}

void apple::vision::libraries::autotrace::ATRAngleOfLine(apple::vision::libraries::autotrace *this, const EPolygon *a2, int a3, int a4, int a5, float a6, float a7)
{
  float v8;
  float v9;
  float v10;

  v8 = atanf(a6);
  if (a5)
  {
    v10 = v8;
  }
  else
  {
    v9 = 1.57079633 - v8;
    v10 = v9;
  }
  __sincosf_stret(v10);
}

void sub_1A1421F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A14224F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1422654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1422814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v7;

  _Unwind_Resume(a1);
}

void sub_1A1423044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_1A14233F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14239F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51)
{
  void *v51;
  void *v52;
  void *v53;

  _Unwind_Resume(a1);
}

void sub_1A14240AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, id *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, id *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,id *a42)
{
  uint64_t v42;
  void *v44;
  void *v45;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__deallocate_node(a20);
  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__deallocate_node(a15);
  if (a13)
    operator delete(a13);

  _Block_object_dispose(&a34, 8);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__deallocate_node(a42);
  v44 = a40;
  a40 = 0;
  if (v44)
    operator delete(v44);
  _Block_object_dispose((const void *)(v42 - 176), 8);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__deallocate_node(*(id **)(v42 - 112));
  v45 = *(void **)(v42 - 128);
  *(_QWORD *)(v42 - 128) = 0;
  if (v45)
    operator delete(v45);

  _Unwind_Resume(a1);
}

void sub_1A14242CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A142449C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9433(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},__CVBuffer *>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__9434(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::~__hash_table(a1 + 48);
}

uint64_t __Block_byref_object_copy__87(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},__CVBuffer *>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__88(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::~__hash_table(a1 + 48);
}

void sub_1A142489C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},__CVBuffer *>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::unordered_map<NSString * {__strong},__CVBuffer *>::unordered_map(uint64_t a1, uint64_t a2)
{
  id *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(id **)(a2 + 16); i; i = (id *)*i)
    std::__hash_table<std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},__CVBuffer *>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},__CVBuffer *> const&>(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1A14249D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},__CVBuffer *>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},__CVBuffer *> const&>(uint64_t a1, id *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = objc_msgSend(*a2, "hash");
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if ((id)i[2] == *a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v8;
  v15 = *(id *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v14[2] = v15;
  v14[3] = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1A1424BF8(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},__CVBuffer *>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},__CVBuffer *>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t a1, id *a2, id **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = objc_msgSend(*a2, "hash");
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if ((id)i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = **a3;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A1424E2C(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void sub_1A1425500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  void *v39;

  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x1A1425414);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1425720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::tuple<std::unordered_map<NSString * {__strong},__CVBuffer *>,std::unordered_map<NSString * {__strong},espresso_buffer_t>>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::~__hash_table(a1 + 40);
    std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::~__hash_table(a1);
  }
  return a1;
}

void ma::HSVHistogram::~HSVHistogram(ma::HSVHistogram *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)this;
  if (v2)
    MEMORY[0x1A1B0A880](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    MEMORY[0x1A1B0A880](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x1A1B0A880](v4, 0x1000C8052888210);
}

void sub_1A14258B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1425A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A1425AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1425BE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1425C64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1425E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1425F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1426C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1426FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A14271E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1427404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14278E4(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    free(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void std::__shared_ptr_emplace<vision::mod::FaceFrontalizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B4F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::FaceFrontalizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B4F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::FaceFrontalizer>::__on_zero_shared(uint64_t a1)
{
  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 32));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  free(*(void **)(a1 + 64));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;

}

void sub_1A1427B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t tplTrackerResampler_lumaDownscale2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a6 >= 2)
  {
    v7 = 0;
    v8 = 2 * a2;
    v9 = result + a3 + a2 * a4;
    v10 = v9 + a2;
    if (a5 >> 1 <= 1)
      v11 = 1;
    else
      v11 = a5 >> 1;
    do
    {
      if (a5 >= 2)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          result = *(unsigned __int8 *)(v10 + v12) + *(unsigned __int8 *)(v10 + v12 + 1);
          *(_BYTE *)(a7 + v13++) = (*(unsigned __int8 *)(v9 + v12)
                                  + *(unsigned __int8 *)(v9 + v12 + 1)
                                  + result
                                  + 2) >> 2;
          v12 += 2;
        }
        while (v11 != v13);
      }
      v9 += v8;
      v10 += v8;
      a7 += a5 >> 1;
      ++v7;
    }
    while (v7 != a6 >> 1);
  }
  return result;
}

uint64_t tplTrackerResampler_chromaDownscale2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a6 >= 2)
  {
    v8 = 0;
    v9 = 2 * a2;
    v10 = a5 >> 1;
    v11 = result + a2 * a4 + 2 * a3;
    v12 = v11 + a2;
    if (a5 >> 1 <= 1)
      v13 = 1;
    else
      v13 = a5 >> 1;
    do
    {
      if (a5 >= 2)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          *(_BYTE *)(a7 + v15) = (*(unsigned __int8 *)(v11 + v14)
                                + *(unsigned __int8 *)(v11 + v14 + 2)
                                + *(unsigned __int8 *)(v12 + v14)
                                + *(unsigned __int8 *)(v12 + v14 + 2)
                                + 2) >> 2;
          result = *(unsigned __int8 *)(v12 + v14 + 1) + *(unsigned __int8 *)(v12 + v14 + 3);
          *(_BYTE *)(a8 + v15++) = (*(unsigned __int8 *)(v11 + v14 + 1)
                                  + *(unsigned __int8 *)(v11 + v14 + 3)
                                  + result
                                  + 2) >> 2;
          v14 += 4;
        }
        while (v13 != v15);
      }
      v11 += v9;
      v12 += v9;
      a7 += v10;
      a8 += v10;
      ++v8;
    }
    while (v8 != a6 >> 1);
  }
  return result;
}

void sub_1A14283B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A14284E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14285CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1A1B0A688](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1A14286D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1B0A808](v1 + 424);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(char *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void *)*((_QWORD *)a1 + 12);
    if (v2)
    {
      *((_QWORD *)a1 + 13) = v2;
      operator delete(v2);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1B0A694](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1A1B0A808](a1 + 53);
  return a1;
}

void sub_1A1428810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14288FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1428A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A1428AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1428B20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1428B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1428BD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1428C24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1428C70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1428DAC(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x1A1428D64);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1428FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14290D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14291B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14293B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1429450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14294F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14296F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A142979C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14297E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A142982C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1429924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1429AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1429DF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A142A384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A142A978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A142ADB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<vision::mod::FaceSegmenterDNN>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::FaceSegmenterDNN>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::FaceSegmenterDNN>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  if (*(_BYTE *)(a1 + 400))
  {
    espresso_plan_destroy();
    espresso_context_destroy();
  }
  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 296);
    if (v5)
    {
      v6 = v5 + 32 * v2;
      free(*(void **)v6);
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
    }
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  free(*(void **)(a1 + 368));
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  free(*(void **)(a1 + 320));
  v7 = *(void **)(a1 + 296);
  if (v7)
  {
    *(_QWORD *)(a1 + 304) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 248);
  if (v8)
  {
    *(_QWORD *)(a1 + 256) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 224);
  if (v9)
  {
    *(_QWORD *)(a1 + 232) = v9;
    operator delete(v9);
  }
}

void sub_1A142B278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A142B2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A142B390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A142B480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A142B794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A142B8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A142BF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVCPVideoProcessorClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!VideoProcessingLibraryCore_frameworkLibrary)
  {
    VideoProcessingLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!VideoProcessingLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VCPVideoProcessor");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getVCPVideoProcessorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A142C510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A142CAF8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1A142CAB0);
  }
  _Unwind_Resume(exc_buf);
}

Class __getVCPPersonObservationClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  VideoProcessingLibrary();
  result = objc_getClass("VCPPersonObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVCPPersonObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getVCPHandObservationClass_block_invoke(v3);
  }
  return result;
}

Class __getVCPHandObservationClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  VideoProcessingLibrary();
  result = objc_getClass("VCPHandObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVCPHandObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getVCPPetsObservationClass_block_invoke(v3);
  }
  return result;
}

void __getVCPPetsObservationClass_block_invoke(uint64_t a1)
{
  VideoProcessingLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("VCPPetsObservation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVCPPetsObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    VideoProcessingLibrary();
  }
}

void VideoProcessingLibrary()
{
  void *v0;

  if (!VideoProcessingLibraryCore_frameworkLibrary_10335)
  {
    VideoProcessingLibraryCore_frameworkLibrary_10335 = _sl_dlopen();
    if (!VideoProcessingLibraryCore_frameworkLibrary_10335)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

uint64_t ImageProcessing_getCVPixelFormatType(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 32;
  switch(v1)
  {
    case 0:
      result = 1278226488;
      break;
    case 1:
      result = 1380401729;
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      result = 0;
      break;
    case 3:
      result = 1111970369;
      break;
    case 7:
      return result;
    default:
      result = 1278226534;
      break;
  }
  return result;
}

uint64_t ImageProcessing_getCVPixelBufferImageType(__CVBuffer *a1)
{
  signed int PixelFormatType;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1094862673)
  {
    if (PixelFormatType == 8)
      return 1;
    if (PixelFormatType == 32)
      return 8;
  }
  else
  {
    switch(PixelFormatType)
    {
      case 1380401729:
        return 2;
      case 1111970369:
        return 4;
      case 1094862674:
        return 16;
    }
  }
  return 0;
}

CVPixelBufferRef ImageProcessing_createDeepCopyCVPixelBufferFromVImageBuffer(char **a1, __int16 a2, int *a3)
{
  uint64_t v5;
  OSType CVPixelFormatType;
  OSType v7;
  const __CFAllocator *v8;
  const CFDictionaryKeyCallBacks *v9;
  const CFDictionaryValueCallBacks *v10;
  __CFDictionary *Mutable;
  CFDictionaryRef v12;
  CFDictionaryRef v13;
  int v14;
  int v15;
  char *v17;
  char *v18;
  char *v19;
  size_t v20;
  char *BaseAddress;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *v25;
  size_t v26;
  size_t v27;
  CVPixelBufferRef pixelBufferOut;

  *a3 = 0;
  pixelBufferOut = 0;
  if ((a2 & 1) != 0)
  {
    v5 = 1;
  }
  else if ((a2 & 0x3E) != 0)
  {
    v5 = 4;
  }
  else
  {
    if ((a2 & 0x3C0) == 0)
    {
      syslog(5, "ERROR: Invalid image type");
      syslog(5, "ERROR: require_action");
      v15 = -16750;
      goto LABEL_13;
    }
    v5 = 16;
  }
  CVPixelFormatType = ImageProcessing_getCVPixelFormatType(a2);
  if (!CVPixelFormatType)
  {
    v15 = -12743;
LABEL_13:
    *a3 = v15;
    return pixelBufferOut;
  }
  v7 = CVPixelFormatType;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = CFDictionaryCreate(v8, 0, 0, 0, v9, v10);
  if (v12)
  {
    v13 = v12;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v12);
    CFRelease(v13);
  }
  if (CVPixelBufferCreate(v8, (size_t)a1[2], (size_t)a1[1], v7, Mutable, &pixelBufferOut))
  {
    v14 = -12730;
    goto LABEL_10;
  }
  if (!CVPixelBufferLockBaseAddress(pixelBufferOut, 0))
  {
    v17 = *a1;
    v18 = a1[1];
    v19 = a1[2];
    v20 = (size_t)a1[3];
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
    Width = CVPixelBufferGetWidth(pixelBufferOut);
    Height = CVPixelBufferGetHeight(pixelBufferOut);
    BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
    v25 = v19;
    if ((char *)Width == v19 && BaseAddress && v17 && (char *)Height == v18)
    {
      v26 = BytesPerRow;
      if (v20 == BytesPerRow)
      {
        memcpy(BaseAddress, v17, v20 * (_QWORD)v18);
        goto LABEL_30;
      }
      if (v20 <= BytesPerRow)
      {
        if (v18)
        {
          v27 = v5 * (_QWORD)v25;
          do
          {
            memcpy(BaseAddress, v17, v27);
            v17 += v20;
            BaseAddress += v26;
            --v18;
          }
          while (v18);
        }
LABEL_30:
        CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
        if (!Mutable)
          return pixelBufferOut;
        goto LABEL_11;
      }
    }
    syslog(5, "ERROR: require_action");
    v14 = -16750;
LABEL_10:
    *a3 = v14;
    if (!Mutable)
      return pixelBufferOut;
LABEL_11:
    CFRelease(Mutable);
    return pixelBufferOut;
  }
  *a3 = -16750;
  CVPixelBufferRelease(pixelBufferOut);
  return 0;
}

void sub_1A142D1C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A142D330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A142D484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1A142D698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1A142D9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

void sub_1A142DC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10395(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10396(uint64_t a1)
{

}

uint64_t VideoProcessingLibrary(void)
{
  uint64_t v0;
  void *v2;

  if (VideoProcessingLibraryCore(char **)::frameworkLibrary)
    return VideoProcessingLibraryCore(char **)::frameworkLibrary;
  VideoProcessingLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = VideoProcessingLibraryCore(char **)::frameworkLibrary;
  if (!VideoProcessingLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_1A142E6F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A142E778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A142E9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p)
{
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1A142EC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p)
{
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1A142F06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  void *v19;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1A142F684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  void *v23;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1A142F8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A142FA60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A142FD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A142FDE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A142FF9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14300DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1430240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1430308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A14303BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A143046C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1430508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1430918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1430AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{

  _Unwind_Resume(a1);
}

void sub_1A1430DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A1431210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14314B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{

  _Unwind_Resume(a1);
}

void sub_1A14316BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14317CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A14319CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1431A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1431C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{

  _Unwind_Resume(a1);
}

void sub_1A1432014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14320C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14322C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{

  _Unwind_Resume(a1);
}

void sub_1A14329A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1432BB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1432C5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1432E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{

  _Unwind_Resume(a1);
}

void sub_1A143327C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1433328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1433528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{

  _Unwind_Resume(a1);
}

void sub_1A1433790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1434114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1A143438C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1434408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14344A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1434730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A14348BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A1434A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1434C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A1434E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A1434FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1435160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1435300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1435400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1435628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1435784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1435898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A143598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A1435A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A1435F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id a48)
{
  void *v48;
  void *v49;

  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10822(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10823(uint64_t a1)
{

}

void sub_1A14362F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper((__CVBuffer **)va);
  _Unwind_Resume(a1);
}

void apple::vision::ScopeExit::~ScopeExit(apple::vision::ScopeExit *this)
{
  uint64_t v2;
  apple::vision::ScopeExit *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (apple::vision::ScopeExit *)*((_QWORD *)this + 3);
  if (v3 == this)
  {
    v4 = 4;
    v3 = this;
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A1B0A898);
}

void _ZNSt3__110__function6__funcIZZZ152__VNFaceDetectorPrivateRevisionLegacyFaceCore_internalProcessUsingQualityOfServiceClass_options_regionOfInterest_warningRecorder_error_progressHandler__EUb_ENK3__0clEP7CGImageEUlvE_NS_9allocatorIS5_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1B0A898);
}

_QWORD *_ZNKSt3__110__function6__funcIZZZ152__VNFaceDetectorPrivateRevisionLegacyFaceCore_internalProcessUsingQualityOfServiceClass_options_regionOfInterest_warningRecorder_error_progressHandler__EUb_ENK3__0clEP7CGImageEUlvE_NS_9allocatorIS5_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E453B2B8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZZ152__VNFaceDetectorPrivateRevisionLegacyFaceCore_internalProcessUsingQualityOfServiceClass_options_regionOfInterest_warningRecorder_error_progressHandler__EUb_ENK3__0clEP7CGImageEUlvE_NS_9allocatorIS5_EEFvvEE7__cloneEPNS0_6__baseIS8_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E453B2B8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ152__VNFaceDetectorPrivateRevisionLegacyFaceCore_internalProcessUsingQualityOfServiceClass_options_regionOfInterest_warningRecorder_error_progressHandler__EUb_ENK3__0clEP7CGImageEUlvE_NS_9allocatorIS5_EEFvvEEclEv(uint64_t a1)
{
  CGImageRelease(*(CGImageRef *)(a1 + 8));
}

uint64_t _ZNKSt3__110__function6__funcIZZZ152__VNFaceDetectorPrivateRevisionLegacyFaceCore_internalProcessUsingQualityOfServiceClass_options_regionOfInterest_warningRecorder_error_progressHandler__EUb_ENK3__0clEP7CGImageEUlvE_NS_9allocatorIS5_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ152-[VNFaceDetectorPrivateRevisionLegacyFaceCore internalProcessUsingQualityOfServiceClass:options:regionOfInterest:warningRecorder:error:progressHandler:]EUb_ENK3$_0clEP7CGImageEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ152__VNFaceDetectorPrivateRevisionLegacyFaceCore_internalProcessUsingQualityOfServiceClass_options_regionOfInterest_warningRecorder_error_progressHandler__EUb_ENK3__0clEP7CGImageEUlvE_NS_9allocatorIS5_EEFvvEE11target_typeEv()
{
  return &_ZTIZZZ152__VNFaceDetectorPrivateRevisionLegacyFaceCore_internalProcessUsingQualityOfServiceClass_options_regionOfInterest_warningRecorder_error_progressHandler__EUb_ENK3__0clEP7CGImageEUlvE_;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::pair<std::string,BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t vision::mod::ImageClassifier_HierarchicalModel::infer(uint64_t a1, uint64_t **a2, _QWORD *a3, int a4)
{
  uint64_t *i;
  uint64_t *v8;
  unsigned __int8 *j;
  uint64_t *v10;
  _QWORD *k;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t m;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  std::string::size_type *v23;
  std::string::size_type *v24;
  std::string::size_type v25;
  int v26;
  _QWORD *exception;
  _QWORD *v29;
  void *__p[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  std::string v34;
  std::string *v35;

  if (a4)
  {
    for (i = (uint64_t *)a3[2]; i; i = (uint64_t *)*i)
    {
      if (*((char *)i + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)i[2], i[3]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)i + 1);
        *(_QWORD *)&v31 = i[4];
      }
      v8 = *a2;
      if (!std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::find<std::string>(*a2, (unsigned __int8 *)__p)|| !std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::find<std::string>(v8 + 5, (unsigned __int8 *)__p))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = 3966;
        __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
      }
      if (SBYTE7(v31) < 0)
        operator delete(__p[0]);
    }
    for (j = (unsigned __int8 *)(*a2)[7]; j; j = *(unsigned __int8 **)j)
    {
      v10 = *a2;
      __p[0] = j + 16;
      if (!*(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, j + 16, (__int128 **)__p)+ 5)+ 84)&& !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, j + 16))
      {
        v29 = __cxa_allocate_exception(8uLL);
        *v29 = 3966;
        __cxa_throw(v29, MEMORY[0x1E0DE4F28], 0);
      }
    }
  }
  for (k = (_QWORD *)(*a2)[2]; k; k = (_QWORD *)*k)
    *(_DWORD *)(k[5] + 24) = (*(_QWORD *)(k[5] + 64) - *(_QWORD *)(k[5] + 56)) >> 3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)__p = 0u;
  v12 = (uint64_t *)a3[2];
  if (v12)
  {
    do
    {
      if (*((char *)v12 + 39) < 0)
        std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)v12[2], v12[3]);
      else
        v34 = *(std::string *)(v12 + 2);
      v13 = *a2;
      if (std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::find<std::string>(*a2, (unsigned __int8 *)&v34))
      {
        if (std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::find<std::string>(v13 + 5, (unsigned __int8 *)&v34))
        {
          v35 = &v34;
          v14 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (unsigned __int8 *)&v34, (__int128 **)&v35)+ 5);
          v33 = v14;
          if (*(_DWORD *)(v14 + 84) != 2)
          {
            *(_DWORD *)(v14 + 80) = *((_DWORD *)v12 + 10);
            std::deque<vision::mod::ImageClassfier_GraphNode *>::push_back(__p, &v33);
          }
        }
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      v12 = (uint64_t *)*v12;
    }
    while (v12);
    for (m = *((_QWORD *)&v32 + 1); *((_QWORD *)&v32 + 1); m = *((_QWORD *)&v32 + 1))
    {
      v16 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v32 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v32 & 0x1FF));
      *(_QWORD *)&v32 = v32 + 1;
      *((_QWORD *)&v32 + 1) = m - 1;
      if ((unint64_t)v32 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v32 = v32 - 512;
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::find<std::string>(*a2 + 5, (unsigned __int8 *)v16))
      {
        v17 = *(_QWORD *)(v16 + 56);
        v18 = *(_QWORD *)(v16 + 64);
        v19 = 0.0;
        while (v17 != v18)
        {
          if (!*(_DWORD *)(*(_QWORD *)v17 + 84))
          {
            v20 = powf(fminf(*(float *)(*(_QWORD *)v17 + 80), 1.0), 4.0);
            v19 = v19 - logf(1.0 - v20);
          }
          v17 += 8;
        }
        v21 = expf(-v19);
        v22 = powf(1.0 - v21, 0.25);
        *(float *)(v16 + 80) = v22;
        v34.__r_.__value_.__r.__words[0] = v16;
        *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)v16, (__int128 **)&v34)+ 10) = v22;
      }
      v24 = *(std::string::size_type **)(v16 + 32);
      v23 = *(std::string::size_type **)(v16 + 40);
      while (v24 != v23)
      {
        v25 = *v24;
        v34.__r_.__value_.__r.__words[0] = v25;
        v26 = *(_DWORD *)(v25 + 24) - 1;
        *(_DWORD *)(v25 + 24) = v26;
        if (!v26 && *(_DWORD *)(v25 + 84) != 2)
          std::deque<vision::mod::ImageClassfier_GraphNode *>::push_back(__p, &v34);
        ++v24;
      }
    }
  }
  return std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t)__p);
}

void sub_1A1436938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v25);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::_readBinSerializerBlob(FILE *a1, _BYTE *a2, float *a3, uint64_t a4)
{
  uint64_t result;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  float *v18;

  v18 = a3;
  if (fseek(a1, 0, 0))
    return 8565;
  v16 = 0;
  v13 = 0;
  if ((char)a2[23] >= 0)
    v8 = a2;
  else
    v8 = *(_BYTE **)a2;
  result = BinSerializer_fgetBlobInfo(a1, v8, &v17, &v16, &v15, &v14, &v13);
  if (result == 128)
  {
    if (v13 == a4)
    {
      if (v16 != 3)
        return 8565;
      v12 = 0;
      if ((char)a2[23] >= 0)
        v9 = a2;
      else
        v9 = *(_BYTE **)a2;
      v10 = BinSerializer_freadInFloat(a1, v9, 0, &v18, &v12);
      if (v12 == a4 && v10 == 128)
        return 8576;
      else
        return 8565;
    }
    else
    {
      return 8564;
    }
  }
  return result;
}

void std::default_delete<std::vector<float>>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = MEMORY[0x1E0DE4FD0];
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  v6 = a1 + 16;
  v7 = a1 + 24;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[4];
  v13 = v8[5];
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v6 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = v8[1];
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 24)) = v8[6];
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  std::string::operator=((std::string *)(a1 + 88), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v7);
  return a1;
}

void sub_1A1436EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1B0A808](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1A1B0A6AC](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1A1437028(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1A1436FF4);
  }
  __cxa_rethrow();
}

void sub_1A143706C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

std::string *std::pair<std::string,std::vector<BOOL>>::pair[abi:ne180100]<std::string&,std::vector<BOOL>&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::vector<BOOL>::vector(this[1].__r_.__value_.__r.__words, a3);
  return this;
}

void sub_1A143728C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<BOOL>>>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

uint64_t std::pair<std::string,std::vector<BOOL>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<std::string,std::vector<BOOL>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::tuple<std::string,std::vector<BOOL>,float>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1A14377E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A14378B8()
{
  JUMPOUT(0x1A14378ACLL);
}

void sub_1A1437938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1437A64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1437B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1437E38(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, void *a9, void *a10, int __pa, __int16 __p_4, char __p_6, char __p_7, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__split_buffer<std::pair<std::string, std::string>> *a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1A1437F40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__10940(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__10941(uint64_t a1)
{
  return std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 48);
}

void sub_1A14381EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  a11 = (void **)&a17;
  std::vector<std::pair<std::string,BOOL>>::__destroy_vector::operator()[abi:ne180100](&a11);
  a11 = (void **)&a20;
  std::vector<std::pair<std::string,std::vector<BOOL>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<vision::mod::ImageClassifier_HierarchicalModel,std::allocator<vision::mod::ImageClassifier_HierarchicalModel>,char const*,decltype(nullptr),std::vector<std::pair<std::string,BOOL>> &,void>(uint64_t ***a1, const char *a2, uint64_t *a3)
{
  std::string::size_type v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer begin;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t size;
  std::vector<std::string>::pointer v35;
  char *v36;
  std::vector<std::string>::pointer v37;
  char *v38;
  uint64_t v39;
  char v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  unsigned int v46;
  char *v48;
  char *v49;
  char *v50;
  std::string *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  unsigned int v63;
  std::string::size_type v65;
  std::string *v66;
  std::string *v67;
  std::string *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  char v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  int64x2_t v85;
  char v86;
  unint64_t v87;
  std::pair<std::string, std::string> *v88;
  __int128 *i;
  __int128 *v90;
  char *v91;
  std::string *v92;
  std::string *j;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer first;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint8x8_t v102;
  _QWORD *v103;
  _QWORD *k;
  unint64_t v105;
  std::pair<std::string, std::string> *v106;
  float v107;
  _BOOL8 v108;
  unint64_t v109;
  unint64_t v110;
  int8x8_t prime;
  std::pair<std::string, std::string> *v112;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v113;
  uint64_t v114;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v115;
  std::string::size_type v116;
  uint8x8_t v117;
  unint64_t v118;
  uint8x8_t v119;
  uint64_t v120;
  std::pair<std::string, std::string> *v121;
  std::string::size_type v122;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v123;
  std::string::size_type *v124;
  unint64_t v125;
  std::vector<std::string>::pointer *v126;
  std::vector<std::string>::pointer *v127;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v128;
  void **v129;
  unint64_t *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  void **v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  int8x8_t v142;
  unint64_t v143;
  uint8x8_t v144;
  void **v145;
  void **v146;
  unint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  void *v153;
  void *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  int v158;
  char *v159;
  uint64_t m;
  uint64_t v161;
  std::vector<std::string>::pointer *v162;
  std::vector<std::string>::pointer *v163;
  _QWORD *exception;
  _QWORD *v165;
  uint64_t v167;
  char *v168;
  std::string *v169;
  uint64_t **v170;
  __int128 v171;
  unint64_t v172;
  int64x2_t v173;
  _QWORD v174[2];
  std::string v175;
  std::string v176;
  std::vector<std::string> v177;
  _BYTE v178[48];
  std::__split_buffer<std::pair<std::string, std::string>> v179;

  v6 = (char *)operator new(0x20uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  v168 = v6;
  *(_QWORD *)v6 = &off_1E453BAE0;
  v172 = 0;
  v171 = 0u;
  v7 = *a3;
  v8 = a3[1];
  v9 = v8 - *a3;
  if (v8 != *a3)
  {
    if (v9 < 0)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    *(_QWORD *)&v178[32] = &v172;
    *(_QWORD *)v178 = std::__allocate_at_least[abi:ne180100]<std::allocator<vImage_Buffer>>(v9 >> 5);
    *(_QWORD *)&v178[8] = *(_QWORD *)v178;
    *(_QWORD *)&v178[16] = *(_QWORD *)v178;
    *(_QWORD *)&v178[24] = *(_QWORD *)v178 + 32 * v10;
    std::vector<std::pair<std::string,vision::mod::ImageClassfier_GraphNodeType>>::__swap_out_circular_buffer((uint64_t *)&v171, v178);
    std::__split_buffer<std::pair<std::string,float>>::~__split_buffer((uint64_t)v178);
    v7 = *a3;
    v8 = a3[1];
  }
  for (; v7 != v8; v7 += 32)
  {
    v11 = *(_BYTE *)(v7 + 24) == 0;
    if (*(char *)(v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v179, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      *(_OWORD *)&v179.__first_ = *(_OWORD *)v7;
      v179.__end_ = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)(v7 + 16);
    }
    LODWORD(v179.__end_cap_.__value_) = v11;
    v12 = *((_QWORD *)&v171 + 1);
    if (*((_QWORD *)&v171 + 1) >= v172)
    {
      v13 = (uint64_t)(*((_QWORD *)&v171 + 1) - v171) >> 5;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 59)
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      v15 = v172 - v171;
      if ((uint64_t)(v172 - v171) >> 4 > v14)
        v14 = v15 >> 4;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
        v16 = 0x7FFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      *(_QWORD *)&v178[32] = &v172;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vImage_Buffer>>(v16);
      v18 = &v17[32 * v13];
      *(_QWORD *)v178 = v17;
      *(_QWORD *)&v178[8] = v18;
      *(_QWORD *)&v178[24] = &v17[32 * v19];
      *(_OWORD *)v18 = *(_OWORD *)&v179.__first_;
      *((_QWORD *)v18 + 2) = v179.__end_;
      memset(&v179, 0, 24);
      *((_DWORD *)v18 + 6) = v11;
      *(_QWORD *)&v178[16] = v18 + 32;
      std::vector<std::pair<std::string,vision::mod::ImageClassfier_GraphNodeType>>::__swap_out_circular_buffer((uint64_t *)&v171, v178);
      v3 = *((_QWORD *)&v171 + 1);
      std::__split_buffer<std::pair<std::string,float>>::~__split_buffer((uint64_t)v178);
    }
    else
    {
      **((_OWORD **)&v171 + 1) = *(_OWORD *)&v179.__first_;
      *(_QWORD *)(v12 + 16) = v179.__end_;
      *(_DWORD *)(v12 + 24) = v11;
      v3 = v12 + 32;
    }
    *((_QWORD *)&v171 + 1) = v3;
  }
  v20 = operator new();
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_DWORD *)(v20 + 32) = 1065353216;
  *(_OWORD *)(v20 + 40) = 0u;
  v167 = v20 + 40;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_DWORD *)(v20 + 72) = 1065353216;
  ImageClassifier_readLinesFromFile(&v177, a2);
  v173 = 0uLL;
  v174[0] = 0;
  begin = v177.__begin_;
  end = v177.__end_;
  if (v177.__end_ != v177.__begin_)
  {
    v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v177.__end_ - (char *)v177.__begin_) >> 3);
    if (v23 > 0x555555555555555)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    *(_QWORD *)&v178[32] = v174;
    v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<BOOL>>>>(v23);
    v26 = v173.i64[1];
    v27 = v173.i64[0];
    if (v173.i64[1] == v173.i64[0])
    {
      v31 = vdupq_n_s64(v173.u64[1]);
      v28 = v24;
    }
    else
    {
      v28 = v24;
      do
      {
        v29 = *(_OWORD *)(v26 - 48);
        *((_QWORD *)v28 - 4) = *(_QWORD *)(v26 - 32);
        *((_OWORD *)v28 - 3) = v29;
        *(_QWORD *)(v26 - 40) = 0;
        *(_QWORD *)(v26 - 32) = 0;
        *(_QWORD *)(v26 - 48) = 0;
        v30 = *(_OWORD *)(v26 - 24);
        *((_QWORD *)v28 - 1) = *(_QWORD *)(v26 - 8);
        *(_OWORD *)(v28 - 24) = v30;
        v28 -= 48;
        *(_QWORD *)(v26 - 16) = 0;
        *(_QWORD *)(v26 - 8) = 0;
        *(_QWORD *)(v26 - 24) = 0;
        v26 -= 48;
      }
      while (v26 != v27);
      v31 = v173;
    }
    v173.i64[0] = (uint64_t)v28;
    v173.i64[1] = (uint64_t)v24;
    *(int64x2_t *)&v178[8] = v31;
    v32 = v174[0];
    v174[0] = &v24[48 * v25];
    *(_QWORD *)&v178[24] = v32;
    *(_QWORD *)v178 = v31.i64[0];
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)v178);
    begin = v177.__begin_;
    end = v177.__end_;
  }
  if (begin != end)
  {
    v33 = MEMORY[0x1E0C80978];
    v169 = end;
    while (1)
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        v35 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
        size = begin->__r_.__value_.__l.__size_;
      }
      else
      {
        size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
        v35 = begin;
      }
      if (size < 2)
        goto LABEL_316;
      v36 = (char *)v35 + size;
      v37 = v35;
      while (1)
      {
        v38 = (char *)memchr(v37, 45, size - 1);
        if (!v38)
          goto LABEL_316;
        if (*(_WORD *)v38 == 15917)
          break;
        v37 = (std::vector<std::string>::pointer)(v38 + 1);
        size = v36 - (char *)v37;
        if (v36 - (char *)v37 < 2)
          goto LABEL_316;
      }
      if (v38 == v36 || (v3 = v38 - (char *)v35, v3 == -1))
      {
LABEL_316:
        exception = __cxa_allocate_exception(8uLL);
        *exception = 3957;
        __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
      }
      std::string::basic_string(&v176, begin, 0, v3, (std::allocator<char> *)v178);
      v39 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
      v40 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
      v42 = v176.__r_.__value_.__l.__size_;
      v41 = (std::string *)v176.__r_.__value_.__r.__words[0];
      if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v176;
      else
        v43 = (std::string *)v176.__r_.__value_.__r.__words[0];
      if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
      else
        v44 = v176.__r_.__value_.__l.__size_;
      if (v44)
      {
        v45 = (std::string *)((char *)v43 + v44);
        while (1)
        {
          v46 = v43->__r_.__value_.__s.__data_[0];
          if (!((v46 & 0x80000000) != 0 ? __maskrune(v46, 0x4000uLL) : *(_DWORD *)(v33 + 4 * v46 + 60) & 0x4000))
            break;
          v43 = (std::string *)((char *)v43 + 1);
          if (!--v44)
          {
            v43 = v45;
            break;
          }
        }
        v39 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
        v42 = v176.__r_.__value_.__l.__size_;
        v41 = (std::string *)v176.__r_.__value_.__r.__words[0];
        v40 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
      }
      v48 = (char *)v41 + v42;
      v49 = (char *)&v176 + v39;
      v50 = v40 >= 0 ? v49 : v48;
      v51 = v40 >= 0 ? &v176 : v41;
      while (v50 != (char *)v51)
      {
        v53 = *--v50;
        v52 = v53;
        if ((v53 & 0x80000000) != 0)
          v54 = __maskrune(v52, 0x4000uLL);
        else
          v54 = *(_DWORD *)(v33 + 4 * v52 + 60) & 0x4000;
        if (!v54)
        {
          v51 = (std::string *)(v50 + 1);
          break;
        }
      }
      if (v43 >= v51)
        memset(v178, 0, 24);
      else
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v178, (char *)v43, (char *)v51, (char *)v51 - (char *)v43);
      if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v176.__r_.__value_.__l.__data_);
      v176 = *(std::string *)v178;
      v55 = HIBYTE(*(_QWORD *)&v178[16]);
      if (v178[23] < 0)
        v55 = v176.__r_.__value_.__l.__size_;
      if (v55)
        break;
LABEL_140:
      v73 = 0;
LABEL_141:
      if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v176.__r_.__value_.__l.__data_);
      if (!v73)
        goto LABEL_316;
      if (++begin == v169)
        goto LABEL_145;
    }
    std::string::basic_string(&v175, begin, v3 + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v178);
    v56 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
    v57 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
    v59 = v175.__r_.__value_.__l.__size_;
    v58 = v175.__r_.__value_.__r.__words[0];
    if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &v175;
    else
      v60 = (std::string *)v175.__r_.__value_.__r.__words[0];
    if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
    else
      v61 = v175.__r_.__value_.__l.__size_;
    if (v61)
    {
      v62 = (std::string *)((char *)v60 + v61);
      while (1)
      {
        v63 = v60->__r_.__value_.__s.__data_[0];
        if (!((v63 & 0x80000000) != 0 ? __maskrune(v63, 0x4000uLL) : *(_DWORD *)(v33 + 4 * v63 + 60) & 0x4000))
          break;
        v60 = (std::string *)((char *)v60 + 1);
        if (!--v61)
        {
          v60 = v62;
          break;
        }
      }
      v56 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
      v59 = v175.__r_.__value_.__l.__size_;
      v58 = v175.__r_.__value_.__r.__words[0];
      v57 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
    }
    v65 = v58 + v59;
    v66 = (std::string *)((char *)&v175 + v56);
    if (v57 >= 0)
      v67 = v66;
    else
      v67 = (std::string *)v65;
    if (v57 >= 0)
      v68 = &v175;
    else
      v68 = (std::string *)v58;
    while (v67 != v68)
    {
      v70 = SHIBYTE(v67[-1].__r_.__value_.__r.__words[2]);
      v67 = (std::string *)((char *)v67 - 1);
      v69 = v70;
      if ((v70 & 0x80000000) != 0)
        v71 = __maskrune(v69, 0x4000uLL);
      else
        v71 = *(_DWORD *)(v33 + 4 * v69 + 60) & 0x4000;
      if (!v71)
      {
        v68 = (std::string *)((char *)&v67->__r_.__value_.__l.__data_ + 1);
        break;
      }
    }
    if (v60 >= v68)
      memset(v178, 0, 24);
    else
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v178, (char *)v60, (char *)v68, (char *)v68 - (char *)v60);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    v175 = *(std::string *)v178;
    v72 = v178[23];
    if (v178[23] >= 0)
      v3 = HIBYTE(*(_QWORD *)&v178[16]);
    else
      v3 = v175.__r_.__value_.__l.__size_;
    if (!v3)
    {
      v73 = 0;
      if ((v178[23] & 0x80) == 0)
        goto LABEL_139;
LABEL_114:
      operator delete(v175.__r_.__value_.__l.__data_);
      if (v3)
        goto LABEL_141;
      goto LABEL_140;
    }
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v178, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
      if ((*((_BYTE *)&v175.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_112;
    }
    else
    {
      *(std::string *)v178 = v176;
      if ((v72 & 0x80) == 0)
      {
LABEL_112:
        *(std::string *)&v178[24] = v175;
        goto LABEL_118;
      }
    }
    std::string::__init_copy_ctor_external((std::string *)&v178[24], v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
LABEL_118:
    v74 = v173.i64[1];
    if (v173.i64[1] >= v174[0])
    {
      v75 = 0xAAAAAAAAAAAAAAABLL * ((v173.i64[1] - v173.i64[0]) >> 4);
      v76 = v75 + 1;
      if (v75 + 1 > 0x555555555555555)
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v174[0] - v173.i64[0]) >> 4) > v76)
        v76 = 0x5555555555555556 * ((v174[0] - v173.i64[0]) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v174[0] - v173.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v77 = 0x555555555555555;
      else
        v77 = v76;
      v179.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)v174;
      if (v77)
        v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<BOOL>>>>(v77);
      else
        v78 = 0;
      v79 = v77 + 48 * v75;
      *(_OWORD *)v79 = *(_OWORD *)v178;
      *(_QWORD *)(v79 + 16) = *(_QWORD *)&v178[16];
      memset(v178, 0, 24);
      *(_QWORD *)(v79 + 40) = *(_QWORD *)&v178[40];
      *(_OWORD *)(v79 + 24) = *(_OWORD *)&v178[24];
      memset(&v178[24], 0, 24);
      v80 = v173.i64[1];
      v81 = v173.i64[0];
      if (v173.i64[1] == v173.i64[0])
      {
        v86 = 0;
        v85 = vdupq_n_s64(v173.u64[1]);
        v82 = v79;
      }
      else
      {
        v82 = v77 + 48 * v75;
        do
        {
          v83 = *(_OWORD *)(v80 - 48);
          *(_QWORD *)(v82 - 32) = *(_QWORD *)(v80 - 32);
          *(_OWORD *)(v82 - 48) = v83;
          *(_QWORD *)(v80 - 40) = 0;
          *(_QWORD *)(v80 - 32) = 0;
          *(_QWORD *)(v80 - 48) = 0;
          v84 = *(_OWORD *)(v80 - 24);
          *(_QWORD *)(v82 - 8) = *(_QWORD *)(v80 - 8);
          *(_OWORD *)(v82 - 24) = v84;
          v82 -= 48;
          *(_QWORD *)(v80 - 16) = 0;
          *(_QWORD *)(v80 - 8) = 0;
          *(_QWORD *)(v80 - 24) = 0;
          v80 -= 48;
        }
        while (v80 != v81);
        v85 = v173;
        v86 = v178[47];
      }
      v87 = v79 + 48;
      v173.i64[0] = v82;
      v173.i64[1] = v79 + 48;
      *(int64x2_t *)&v179.__begin_ = v85;
      v88 = (std::pair<std::string, std::string> *)v174[0];
      v174[0] = v77 + 48 * v78;
      v179.__end_cap_.__value_ = v88;
      v179.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v85.i64[0];
      std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v179);
      v173.i64[1] = v87;
      if (v86 < 0)
        operator delete(*(void **)&v178[24]);
    }
    else
    {
      *(_OWORD *)v173.i64[1] = *(_OWORD *)v178;
      *(_QWORD *)(v74 + 16) = *(_QWORD *)&v178[16];
      memset(v178, 0, 24);
      *(_OWORD *)(v74 + 24) = *(_OWORD *)&v178[24];
      *(_QWORD *)(v74 + 40) = *(_QWORD *)&v178[40];
      memset(&v178[24], 0, 24);
      v173.i64[1] = v74 + 48;
    }
    if ((v178[23] & 0x80000000) != 0)
      operator delete(*(void **)v178);
    v73 = 3;
    if ((*((_BYTE *)&v175.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_139:
      if (v3)
        goto LABEL_141;
      goto LABEL_140;
    }
    goto LABEL_114;
  }
LABEL_145:
  *(_QWORD *)v178 = &v177;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
  v90 = (__int128 *)v173.i64[1];
  for (i = (__int128 *)v173.i64[0]; i != v90; i = (__int128 *)(v91 + 24))
  {
    v91 = (char *)i + 24;
    vision::mod::ImageClassfier_Graph::addParentChildRelation((uint64_t *)v20, i, (__int128 *)((char *)i + 24));
  }
  *(_QWORD *)v178 = &v173;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
  *((_QWORD *)v168 + 3) = v20;
  memset(&v179, 0, 32);
  LODWORD(v179.__end_cap_.__value_) = 1065353216;
  memset(v178, 0, sizeof(v178));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},espresso_buffer_t>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},espresso_buffer_t>>>::__rehash<true>(v167, vcvtps_u32_f32((float)(unint64_t)((uint64_t)(*((_QWORD *)&v171 + 1) - v171) >> 5) / *(float *)(v20 + 72)));
  v92 = (std::string *)*((_QWORD *)&v171 + 1);
  for (j = (std::string *)v171; j != v92; j = (std::string *)((char *)j + 32))
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::find<std::string>((_QWORD *)v20, (unsigned __int8 *)j))
    {
      v165 = __cxa_allocate_exception(8uLL);
      *v165 = 3956;
      __cxa_throw(v165, MEMORY[0x1E0DE4F28], 0);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v167, (unsigned __int8 *)j, (uint64_t)j);
    v177.__begin_ = j;
    v94 = std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)v20, (unsigned __int8 *)j, (__int128 **)&v177);
    std::deque<vision::mod::ImageClassfier_GraphNode *>::push_back(v178, (_QWORD *)v94 + 5);
  }
  v170 = (uint64_t **)(v168 + 24);
  v95 = *(_QWORD *)&v178[40];
  if (*(_QWORD *)&v178[40])
  {
    while (1)
    {
      v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v178[8] + (((*(_QWORD *)&v178[32])++ >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*(_WORD *)&v178[32] & 0x1FF));
      *(_QWORD *)&v178[40] = v95 - 1;
      if (*(_QWORD *)&v178[32] >= 0x400uLL)
      {
        operator delete(**(void ***)&v178[8]);
        *(_QWORD *)&v178[8] += 8;
        *(_QWORD *)&v178[32] -= 512;
      }
      v98 = (unint64_t)v179.__begin_;
      first = v179.__first_;
      if (!std::__hash_table<vision::mod::ImageClassfier_GraphNode *,std::hash<vision::mod::ImageClassfier_GraphNode *>,std::equal_to<vision::mod::ImageClassfier_GraphNode *>,std::allocator<vision::mod::ImageClassfier_GraphNode *>>::find<vision::mod::ImageClassfier_GraphNode *>((uint64_t)v179.__first_, (unint64_t)v179.__begin_, v96))break;
LABEL_156:
      v95 = *(_QWORD *)&v178[40];
      if (!*(_QWORD *)&v178[40])
        goto LABEL_242;
    }
    v99 = 0x9DDFEA08EB382D69 * (((8 * v96) + 8) ^ HIDWORD(v96));
    v100 = 0x9DDFEA08EB382D69 * (HIDWORD(v96) ^ (v99 >> 47) ^ v99);
    v101 = 0x9DDFEA08EB382D69 * (v100 ^ (v100 >> 47));
    if (v98)
    {
      v102 = (uint8x8_t)vcnt_s8((int8x8_t)v98);
      v102.i16[0] = vaddlv_u8(v102);
      if (v102.u32[0] > 1uLL)
      {
        v3 = 0x9DDFEA08EB382D69 * (v100 ^ (v100 >> 47));
        if (v101 >= v98)
          v3 = v101 % v98;
      }
      else
      {
        v3 = v101 & (v98 - 1);
      }
      v103 = (_QWORD *)*((_QWORD *)&first->first.__r_.__value_.__l.__data_ + v3);
      if (v103)
      {
        for (k = (_QWORD *)*v103; k; k = (_QWORD *)*k)
        {
          v105 = k[1];
          if (v105 == v101)
          {
            if (k[2] == v96)
              goto LABEL_230;
          }
          else
          {
            if (v102.u32[0] > 1uLL)
            {
              if (v105 >= v98)
                v105 %= v98;
            }
            else
            {
              v105 &= v98 - 1;
            }
            if (v105 != v3)
              break;
          }
        }
      }
    }
    v106 = (std::pair<std::string, std::string> *)operator new(0x18uLL);
    v106->first.__r_.__value_.__r.__words[0] = 0;
    v106->first.__r_.__value_.__l.__size_ = v101;
    v106->first.__r_.__value_.__r.__words[2] = v96;
    v107 = (float)((unint64_t)v179.__end_cap_.__value_->first.__r_.__value_.__r.__words + 1);
    if (v98 && (float)(*(float *)&v179.__end_cap_.__value_ * (float)v98) >= v107)
    {
LABEL_220:
      v123 = v179.__first_;
      v124 = (std::string::size_type *)*((_QWORD *)&v179.__first_->first.__r_.__value_.__l.__data_ + v3);
      if (v124)
      {
        v106->first.__r_.__value_.__r.__words[0] = *v124;
      }
      else
      {
        v106->first.__r_.__value_.__r.__words[0] = (std::string::size_type)v179.__end_;
        v179.__end_ = v106;
        v123->first.__r_.__value_.__r.__words[v3] = (std::string::size_type)&v179.__end_;
        if (!v106->first.__r_.__value_.__r.__words[0])
          goto LABEL_229;
        v125 = *(_QWORD *)(v106->first.__r_.__value_.__r.__words[0] + 8);
        if ((v98 & (v98 - 1)) != 0)
        {
          if (v125 >= v98)
            v125 %= v98;
        }
        else
        {
          v125 &= v98 - 1;
        }
        v124 = &v179.__first_->first.__r_.__value_.__r.__words[v125];
      }
      *v124 = (std::string::size_type)v106;
LABEL_229:
      ++v179.__end_cap_.__value_;
LABEL_230:
      v127 = *(std::vector<std::string>::pointer **)(v96 + 32);
      v126 = *(std::vector<std::string>::pointer **)(v96 + 40);
      while (v127 != v126)
      {
        v177.__begin_ = *v127;
        std::deque<vision::mod::ImageClassfier_GraphNode *>::push_back(v178, &v177);
        ++v127;
      }
      goto LABEL_156;
    }
    v108 = (v98 & (v98 - 1)) != 0;
    if (v98 < 3)
      v108 = 1;
    v109 = v108 | (2 * v98);
    v110 = vcvtps_u32_f32(v107 / *(float *)&v179.__end_cap_.__value_);
    if (v109 <= v110)
      prime = (int8x8_t)v110;
    else
      prime = (int8x8_t)v109;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v98 = (unint64_t)v179.__begin_;
    }
    if (*(_QWORD *)&prime > v98)
      goto LABEL_186;
    if (*(_QWORD *)&prime < v98)
    {
      v118 = vcvtps_u32_f32((float)(unint64_t)v179.__end_cap_.__value_ / *(float *)&v179.__end_cap_.__value_);
      if (v98 < 3 || (v119 = (uint8x8_t)vcnt_s8((int8x8_t)v98), v119.i16[0] = vaddlv_u8(v119), v119.u32[0] > 1uLL))
      {
        v118 = std::__next_prime(v118);
      }
      else
      {
        v120 = 1 << -(char)__clz(v118 - 1);
        if (v118 >= 2)
          v118 = v120;
      }
      if (*(_QWORD *)&prime <= v118)
        prime = (int8x8_t)v118;
      if (*(_QWORD *)&prime >= v98)
      {
        v98 = (unint64_t)v179.__begin_;
      }
      else
      {
        if (prime)
        {
LABEL_186:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v112 = (std::pair<std::string, std::string> *)operator new(8 * *(_QWORD *)&prime);
          v113 = v179.__first_;
          v179.__first_ = v112;
          if (v113)
            operator delete(v113);
          v114 = 0;
          v179.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)prime;
          do
            v179.__first_->first.__r_.__value_.__r.__words[v114++] = 0;
          while (*(_QWORD *)&prime != v114);
          v115 = v179.__end_;
          if (v179.__end_)
          {
            v116 = v179.__end_->first.__r_.__value_.__l.__size_;
            v117 = (uint8x8_t)vcnt_s8(prime);
            v117.i16[0] = vaddlv_u8(v117);
            if (v117.u32[0] > 1uLL)
            {
              if (v116 >= *(_QWORD *)&prime)
                v116 %= *(_QWORD *)&prime;
            }
            else
            {
              v116 &= *(_QWORD *)&prime - 1;
            }
            v179.__first_->first.__r_.__value_.__r.__words[v116] = (std::string::size_type)&v179.__end_;
            v121 = (std::pair<std::string, std::string> *)v115->first.__r_.__value_.__r.__words[0];
            if (v115->first.__r_.__value_.__r.__words[0])
            {
              do
              {
                v122 = v121->first.__r_.__value_.__l.__size_;
                if (v117.u32[0] > 1uLL)
                {
                  if (v122 >= *(_QWORD *)&prime)
                    v122 %= *(_QWORD *)&prime;
                }
                else
                {
                  v122 &= *(_QWORD *)&prime - 1;
                }
                if (v122 != v116)
                {
                  if (!v179.__first_->first.__r_.__value_.__r.__words[v122])
                  {
                    v179.__first_->first.__r_.__value_.__r.__words[v122] = (std::string::size_type)v115;
                    goto LABEL_211;
                  }
                  v115->first.__r_.__value_.__r.__words[0] = v121->first.__r_.__value_.__r.__words[0];
                  v121->first.__r_.__value_.__r.__words[0] = **((_QWORD **)&v179.__first_->first.__r_.__value_.__l.__data_
                                                              + v122);
                  **((_QWORD **)&v179.__first_->first.__r_.__value_.__l.__data_ + v122) = v121;
                  v121 = v115;
                }
                v122 = v116;
LABEL_211:
                v115 = v121;
                v121 = (std::pair<std::string, std::string> *)v121->first.__r_.__value_.__r.__words[0];
                v116 = v122;
              }
              while (v121);
            }
          }
          v98 = (unint64_t)prime;
          goto LABEL_215;
        }
        v128 = v179.__first_;
        v179.__first_ = 0;
        if (v128)
          operator delete(v128);
        v98 = 0;
        v179.__begin_ = 0;
      }
    }
LABEL_215:
    if ((v98 & (v98 - 1)) != 0)
    {
      if (v101 >= v98)
        v3 = v101 % v98;
      else
        v3 = v101;
    }
    else
    {
      v3 = (v98 - 1) & v101;
    }
    goto LABEL_220;
  }
LABEL_242:
  v129 = *(void ***)(v20 + 16);
  if (!v129)
    goto LABEL_304;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  do
  {
    v133 = (unint64_t)v129[5];
    if (std::__hash_table<vision::mod::ImageClassfier_GraphNode *,std::hash<vision::mod::ImageClassfier_GraphNode *>,std::equal_to<vision::mod::ImageClassfier_GraphNode *>,std::allocator<vision::mod::ImageClassfier_GraphNode *>>::find<vision::mod::ImageClassfier_GraphNode *>((uint64_t)v179.__first_, (unint64_t)v179.__begin_, v133))
    {
      vision::mod::ImageClassfier_GraphNode::filterVectorForValidNodes((unint64_t **)(v133 + 56), (uint64_t)&v179);
      vision::mod::ImageClassfier_GraphNode::filterVectorForValidNodes((unint64_t **)(v133 + 32), (uint64_t)&v179);
      *(_DWORD *)(v133 + 24) = (*(_QWORD *)(v133 + 64) - *(_QWORD *)(v133 + 56)) >> 3;
      v134 = (void **)*v129;
      goto LABEL_290;
    }
    if ((unint64_t)v131 >= v132)
    {
      v135 = v131 - v130;
      v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 61)
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v132 - (_QWORD)v130) >> 2 > v136)
        v136 = (uint64_t)(v132 - (_QWORD)v130) >> 2;
      if (v132 - (unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
        v137 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v137 = v136;
      if (v137)
      {
        v137 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v137);
        v133 = (unint64_t)v129[5];
      }
      else
      {
        v138 = 0;
      }
      v139 = (unint64_t *)(v137 + 8 * v135);
      *v139 = v133;
      v140 = v139 + 1;
      while (v131 != v130)
      {
        v141 = *--v131;
        *--v139 = v141;
      }
      v132 = v137 + 8 * v138;
      if (v130)
        operator delete(v130);
      v130 = v139;
      v131 = v140;
    }
    else
    {
      *v131++ = v133;
    }
    v142 = *(int8x8_t *)(v20 + 8);
    v134 = (void **)*v129;
    v143 = (unint64_t)v129[1];
    v144 = (uint8x8_t)vcnt_s8(v142);
    v144.i16[0] = vaddlv_u8(v144);
    if (v144.u32[0] > 1uLL)
    {
      if (v143 >= *(_QWORD *)&v142)
        v143 %= *(_QWORD *)&v142;
    }
    else
    {
      v143 &= *(_QWORD *)&v142 - 1;
    }
    v145 = *(void ***)(*(_QWORD *)v20 + 8 * v143);
    do
    {
      v146 = v145;
      v145 = (void **)*v145;
    }
    while (v145 != v129);
    if (v146 == (void **)(v20 + 16))
      goto LABEL_326;
    v147 = (unint64_t)v146[1];
    if (v144.u32[0] > 1uLL)
    {
      if (v147 >= *(_QWORD *)&v142)
        v147 %= *(_QWORD *)&v142;
    }
    else
    {
      v147 &= *(_QWORD *)&v142 - 1;
    }
    v148 = *v129;
    if (v147 != v143)
    {
LABEL_326:
      if (v134)
      {
        v149 = (unint64_t)v134[1];
        if (v144.u32[0] > 1uLL)
        {
          if (v149 >= *(_QWORD *)&v142)
            v149 %= *(_QWORD *)&v142;
        }
        else
        {
          v149 &= *(_QWORD *)&v142 - 1;
        }
        v148 = *v129;
        if (v149 == v143)
        {
LABEL_283:
          v150 = v148[1];
          if (v144.u32[0] > 1uLL)
          {
            if (v150 >= *(_QWORD *)&v142)
              v150 %= *(_QWORD *)&v142;
          }
          else
          {
            v150 &= *(_QWORD *)&v142 - 1;
          }
          if (v150 != v143)
          {
            *(_QWORD *)(*(_QWORD *)v20 + 8 * v150) = v146;
            v148 = *v129;
          }
          goto LABEL_289;
        }
      }
      *(_QWORD *)(*(_QWORD *)v20 + 8 * v143) = 0;
      v148 = *v129;
    }
    if (v148)
      goto LABEL_283;
LABEL_289:
    *v146 = v148;
    *v129 = 0;
    --*(_QWORD *)(v20 + 24);
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](1, v129);
LABEL_290:
    v129 = v134;
  }
  while (v134);
  if (v130 != v131)
  {
    v151 = v130;
    do
    {
      v152 = *v151;
      if (*v151)
      {
        v153 = *(void **)(v152 + 56);
        if (v153)
        {
          *(_QWORD *)(v152 + 64) = v153;
          operator delete(v153);
        }
        v154 = *(void **)(v152 + 32);
        if (v154)
        {
          *(_QWORD *)(v152 + 40) = v154;
          operator delete(v154);
        }
        if (*(char *)(v152 + 23) < 0)
          operator delete(*(void **)v152);
        MEMORY[0x1A1B0A898](v152, 0x1092C40FB66ED40);
      }
      ++v151;
    }
    while (v151 != v131);
  }
  if (v130)
    operator delete(v130);
LABEL_304:
  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t)v178);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v179);
  v155 = v171;
  v156 = *v170;
  memset(&v179, 0, 32);
  LODWORD(v179.__end_cap_.__value_) = 1065353216;
  memset(v178, 0, sizeof(v178));
  v157 = *((_QWORD *)&v171 + 1);
  if ((_QWORD)v171 != *((_QWORD *)&v171 + 1))
  {
    do
    {
      v158 = *(_DWORD *)(v155 + 24);
      v177.__begin_ = (std::vector<std::string>::pointer)v155;
      *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v156, (unsigned __int8 *)v155, (__int128 **)&v177)+ 5)+ 84) = v158;
      if (*(_DWORD *)(v155 + 24) == 2)
      {
        v177.__begin_ = (std::vector<std::string>::pointer)v155;
        v159 = std::__hash_table<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,vision::mod::ImageClassfier_GraphNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v156, (unsigned __int8 *)v155, (__int128 **)&v177);
        std::deque<vision::mod::ImageClassfier_GraphNode *>::push_back(v178, (_QWORD *)v159 + 5);
      }
      v155 += 32;
    }
    while (v155 != v157);
    for (m = *(_QWORD *)&v178[40]; *(_QWORD *)&v178[40]; m = *(_QWORD *)&v178[40])
    {
      v161 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v178[8] + (((*(_QWORD *)&v178[32])++ >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (*(_WORD *)&v178[32] & 0x1FF));
      *(_QWORD *)&v178[40] = m - 1;
      if (*(_QWORD *)&v178[32] >= 0x400uLL)
      {
        operator delete(**(void ***)&v178[8]);
        *(_QWORD *)&v178[8] += 8;
        *(_QWORD *)&v178[32] -= 512;
      }
      *(_DWORD *)(v161 + 84) = 2;
      v162 = *(std::vector<std::string>::pointer **)(v161 + 32);
      v163 = *(std::vector<std::string>::pointer **)(v161 + 40);
      while (v162 != v163)
      {
        v177.__begin_ = *v162;
        std::deque<vision::mod::ImageClassfier_GraphNode *>::push_back(v178, &v177);
        ++v162;
      }
    }
  }
  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t)v178);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v179);
  *(_QWORD *)v178 = &v171;
  std::vector<std::pair<std::string,BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
  *a1 = v170;
  a1[1] = (uint64_t **)v168;
}

void sub_1A1439400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  void *v50;

  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t)&a37);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v48 - 144);
  a28 = &a14;
  std::vector<std::pair<std::string,BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::__shared_weak_count::~__shared_weak_count(a11);
  operator delete(v50);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<vision::mod::ImageClassifier_HierarchicalModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BAE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ImageClassifier_HierarchicalModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BAE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<vision::mod::ImageClassifier_HierarchicalModel>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  _QWORD *i;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    for (i = *(_QWORD **)(v1 + 16); i; i = (_QWORD *)*i)
    {
      v3 = i[5];
      if (v3)
      {
        v4 = *(void **)(v3 + 56);
        if (v4)
        {
          *(_QWORD *)(v3 + 64) = v4;
          operator delete(v4);
        }
        v5 = *(void **)(v3 + 32);
        if (v5)
        {
          *(_QWORD *)(v3 + 40) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 + 23) < 0)
          operator delete(*(void **)v3);
        MEMORY[0x1A1B0A898](v3, 0x1092C40FB66ED40);
      }
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1 + 40);
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(*(void ***)(v1 + 16));
    v6 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v6)
      operator delete(v6);
    JUMPOUT(0x1A1B0A898);
  }
  return result;
}

void sub_1A14399E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1A1439C74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A1439D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A143A380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,char *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  uint64_t v38;

  __p = &a37;
  std::vector<std::unordered_map<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v38 - 152);
  _Unwind_Resume(a1);
}

void sub_1A143AC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30,char *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  __p = &a40;
  std::vector<std::unordered_map<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v43 - 192);

  _Unwind_Resume(a1);
}

void sub_1A143AEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A143AFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1A143B100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id _modelBundlePathForClassifierResource(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v9 = a1;
  v10 = a3;
  v11 = a4;
  objc_msgSend(a2, "objectForKeyedSubscript:", v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_msgSend(v9, "pathForResource:ofType:", v12, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v14 = v13;
      v15 = v14;
    }
    else
    {
      if (a5)
      {
        v16 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v9, "resourcePath");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "stringWithFormat:", CFSTR("could not locate %@ in %@"), 0, v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        +[VNError errorForInternalErrorWithLocalizedDescription:](VNError, "errorForInternalErrorWithLocalizedDescription:", v18);
        *a5 = (id)objc_claimAutoreleasedReturnValue();

      }
      v14 = 0;
      v15 = 0;
    }
  }
  else
  {
    if (!a5)
    {
      v15 = 0;
      goto LABEL_10;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("resource key \"%@\" is not available"), v10);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    +[VNError errorForInternalErrorWithLocalizedDescription:](VNError, "errorForInternalErrorWithLocalizedDescription:", v14);
    v15 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_10:
  return v15;
}

void sub_1A143B280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A143B794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A143BA14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143BAC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143BD94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A143BFD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A143C214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A143C494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143C694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143C894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143C96C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143CC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x1A143CBE0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A143CDBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143D2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1A143D7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A143D840(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1A143D684);
}

void sub_1A143E058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x1A143DF58);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A143E450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A143E868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A143E908()
{
  JUMPOUT(0x1A143E8F4);
}

void sub_1A143ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A143F184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1A143F314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143F4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1A143F534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143F590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A143F5E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143F630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A143F678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143F6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A143F70C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A143F758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A143F970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A143FAE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A143FC30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A143FD54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A143FDDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A144022C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14402AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A144032C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1440394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14404C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1440690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A144085C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1440A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1440BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1440DC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1440F8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1441434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A14414FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A1441880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A1441948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A1441CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A1441D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A14420E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A14421A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A14424FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A14425C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A144292C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A14429F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A1442D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A1442E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<vision::mod::CamGazePredictorConcrete>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::CamGazePredictorConcrete>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::CamGazePredictorConcrete>::__on_zero_shared(uint64_t a1)
{
  free(*(void **)(a1 + 56));
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  free(*(void **)(a1 + 88));
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (!espresso_plan_destroy())
  {
    *(_QWORD *)(a1 + 144) = 0;
    if (!espresso_context_destroy())
      *(_QWORD *)(a1 + 136) = 0;
  }
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
}

void sub_1A1443280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A14433C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A144347C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1443500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1443574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1443664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t Geometry2D_normalizePoints(uint64_t a1, float *a2, uint64_t a3, float *__C, float *a5, float *a6)
{
  const float *v7;
  uint64_t v9;
  vDSP_Length v10;
  int v11;
  float *v16;
  float *v17;
  float v18;
  float __Ca;
  float v21;
  float __B;

  if (a1 && (v7 = *(const float **)a1) != 0 && *(_QWORD *)(a1 + 8))
  {
    v9 = -3;
    if (a3)
    {
      v10 = *(unsigned int *)(a1 + 16);
      if ((int)v10 >= 1)
      {
        if (*(_QWORD *)a3)
        {
          if (*(_QWORD *)(a3 + 8))
          {
            v11 = *(_DWORD *)(a3 + 16);
            if (v11 >= 1)
            {
              if ((_DWORD)v10 == v11)
              {
                v16 = a2;
                if (!a2)
                {
                  v17 = (float *)malloc_type_malloc(4 * v10, 0x100004052888210uLL);
                  if (!v17)
                  {
                    v9 = -5;
                    return (v9 + 128) | 0x700;
                  }
                  v16 = v17;
                  v7 = *(const float **)a1;
                }
                vDSP_meanv(v7, 1, __C, v10);
                vDSP_meanv(*(const float **)(a1 + 8), 1, a5, v10);
                v18 = -*__C;
                v21 = -*a5;
                __B = v18;
                vDSP_vsadd(*(const float **)a1, 1, &__B, *(float **)a3, 1, v10);
                vDSP_vsadd(*(const float **)(a1 + 8), 1, &v21, *(float **)(a3 + 8), 1, v10);
                vDSP_vdist(*(const float **)a3, 1, *(const float **)(a3 + 8), 1, v16, 1, v10);
                __Ca = 0.0;
                vDSP_meanv(v16, 1, &__Ca, v10);
                if (fabsf(__Ca) >= 0.00000011921)
                {
                  *a6 = 1.4142 / __Ca;
                  vDSP_vsmul(*(const float **)a3, 1, a6, *(float **)a3, 1, v10);
                  vDSP_vsmul(*(const float **)(a3 + 8), 1, a6, *(float **)(a3 + 8), 1, v10);
                  v9 = 0;
                  if (!a2)
LABEL_20:
                    free(v16);
                }
                else
                {
                  v9 = -19;
                  if (!a2)
                    goto LABEL_20;
                }
              }
              else
              {
                v9 = -4;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v9 = -3;
  }
  return (v9 + 128) | 0x700;
}

void sub_1A14439B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1443A1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1443C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  uint64_t v26;

  _Block_object_dispose(&a19, 8);

  _Block_object_dispose((const void *)(v26 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A1443DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11341(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11342(uint64_t a1)
{

}

void sub_1A14440F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A14442C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A14444DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1444640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vision::mod::GreedyClustererWithTorso::~GreedyClustererWithTorso(vision::mod::GreedyClustererWithTorso *this)
{
  vision::mod::GreedyClustererWithTorso::~GreedyClustererWithTorso(this);
  JUMPOUT(0x1A1B0A898);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E453A720;
  v2 = (char *)this + 32;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 64);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 48);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)v2);
}

BOOL vision::mod::GreedyClustererWithTorso::serializeStatus(vision::mod::GreedyClustererWithTorso *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *p_s;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  std::string::size_type size;
  std::string *p_str;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *exception;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *__p[2];
  char v52;
  std::string __str;
  std::string __s;

  VNValidatedLog(1, (uint64_t)CFSTR("  GreedyClustererWithTorso::serializeStatus - enter"), a3, a4, a5, a6, a7, a8, v48);
  if (a2 == -1)
  {
    VNValidatedLog(4, (uint64_t)CFSTR("  GreedyClustererWithTorso: Failed to open file - skipping serialization"), v10, v11, v12, v13, v14, v15, v49);
  }
  else
  {
    vision::mod::GreedyClustererWithTorso::private_t::clusters_t::newMapFilePath(&__s, *((_QWORD *)this + 8));
    getRelativePath(&__str, *((char **)this + 8), &__s);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    VNValidatedLog(1, (uint64_t)CFSTR("  GreedyClustererWithTorso::serializeStatus - saving map file: %s"), v16, v17, v18, v19, v20, v21, (uint64_t)p_s);
    v23 = *((_QWORD *)this + 8);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &__s;
    else
      v24 = (std::string *)__s.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)v24);
    v31 = *(_QWORD *)(v23 + 88);
    if (v31 || (v31 = *(_QWORD *)(v23 + 72)) != 0)
    {
      v32 = cvml::util::MMapFileBackingStore::writeToFile(v31, (uint64_t)__p);
      v33 = 0;
    }
    else
    {
      v32 = 0;
      v33 = 1;
    }
    if (v52 < 0)
      operator delete(__p[0]);
    if (v32)
      v34 = v33;
    else
      v34 = 1;
    if ((v34 & 1) != 0)
    {
      VNValidatedLog(4, (uint64_t)CFSTR("  GreedyClustererWithTorso: failed to save the file"), v25, v26, v27, v28, v29, v30, v50);
      exception = __cxa_allocate_exception(8uLL);
      *exception = 5236;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    __p[0] = (void *)size;
    write(a2, __p, 8uLL);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    write(a2, p_str, (size_t)__p[0]);
    std::string::operator=((std::string *)(*((_QWORD *)this + 8) + 24), &__str);
    write(a2, (const void *)(*((_QWORD *)this + 8) + 104), 4uLL);
    write(a2, (const void *)(*((_QWORD *)this + 8) + 108), 8uLL);
    __p[0] = (void *)((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 8) + 56) - *(_QWORD *)(*((_QWORD *)this + 8) + 48)) >> 2);
    write(a2, __p, 8uLL);
    v43 = *(_QWORD *)(*((_QWORD *)this + 8) + 48);
    if ((int)((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 8) + 56) - v43) >> 2) >= 1)
    {
      v44 = 0;
      v45 = 0;
      do
      {
        write(a2, (const void *)(v43 + v44), 4uLL);
        ++v45;
        v43 = *(_QWORD *)(*((_QWORD *)this + 8) + 48);
        v44 += 4;
      }
      while (v45 < (int)((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 8) + 56) - v43) >> 2));
    }
    VNValidatedLog(1, (uint64_t)CFSTR("  GreedyClustererWithTorso::serializeStatus - done"), v37, v38, v39, v40, v41, v42, v50);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
  }
  return a2 != -1;
}

void sub_1A14448FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::GreedyClustererWithTorso::deserializeStatus(vision::mod::GreedyClustererWithTorso *this, int a2, int a3)
{
  void **v6;
  uint64_t OnlyFromContentsOfFile;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  std::vector<int>::size_type __sz;
  std::string __p;
  void *__b[2];
  char v30;
  size_t v31;

  v31 = 0;
  read(a2, &v31, 8uLL);
  std::string::basic_string[abi:ne180100](__b, v31, 48);
  if (v30 >= 0)
    v6 = __b;
  else
    v6 = (void **)__b[0];
  read(a2, v6, v31);
  createFullPath(&__p, *((_QWORD *)this + 8), (uint64_t)__b);
  if (a3)
  {
    OnlyFromContentsOfFile = cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::createReadOnlyFromContentsOfFile((uint64_t)&__p);
    v8 = *((_QWORD *)this + 8);
    std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::reset[abi:ne180100]((_QWORD *)(v8 + 72));
    std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>::reset[abi:ne180100]<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const,void>(v8 + 88, OnlyFromContentsOfFile);
  }
  else
  {
    v15 = cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::createFromContentsOfFile((uint64_t)&__p);
    v16 = (uint64_t *)*((_QWORD *)this + 8);
    std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::reset[abi:ne180100]<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>,void>((uint64_t)(v16 + 9), v15);
    std::shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>::operator=[abi:ne180100](v16 + 11, v16[9], v16[10]);
  }
  v17 = (_QWORD *)*((_QWORD *)this + 8);
  v18 = v17[11];
  if (v17[9])
  {
    if (!v18)
      v18 = v17[9];
  }
  else if (!v18)
  {
    VNValidatedLog(4, (uint64_t)CFSTR("  GreedyClustererWithTorso::deserializeStatus - failed to load memory map file"), v9, v10, v11, v12, v13, v14, v25);
    goto LABEL_19;
  }
  if (*(_DWORD *)(*(_QWORD *)v18 + 16) != 1064)
  {
    VNValidatedLog(4, (uint64_t)CFSTR("  GreedyClustererWithTorso::deserializeStatus - loaded a corrupt file as expected element size does not match"), v9, v10, v11, v12, v13, v14, v25);
    v23 = *((_QWORD *)this + 8);
    std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::reset[abi:ne180100]((_QWORD *)(v23 + 72));
    std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::reset[abi:ne180100]((_QWORD *)(v23 + 88));
LABEL_19:
    v22 = 0;
    goto LABEL_20;
  }
  read(a2, v17 + 13, 4uLL);
  read(a2, (void *)(*((_QWORD *)this + 8) + 108), 8uLL);
  __sz = 0;
  read(a2, &__sz, 8uLL);
  std::vector<unsigned int>::resize((std::vector<int> *)(*((_QWORD *)this + 8) + 48), __sz);
  if ((int)((*(_QWORD *)(*((_QWORD *)this + 8) + 56) - *(_QWORD *)(*((_QWORD *)this + 8) + 48)) >> 2) >= 1)
  {
    v19 = 0;
    do
    {
      v26 = 0;
      read(a2, &v26, 4uLL);
      v20 = *((_QWORD *)this + 8);
      v21 = *(_QWORD *)(v20 + 48);
      *(_DWORD *)(v21 + 4 * v19++) = v26;
    }
    while (v19 < (int)((unint64_t)(*(_QWORD *)(v20 + 56) - v21) >> 2));
  }
  v22 = 1;
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v30 < 0)
    operator delete(__b[0]);
  return v22;
}

void sub_1A1444B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

std::string *createFullPath(std::string *this, uint64_t a2, uint64_t a3)
{
  std::string::size_type size;
  BOOL v6;
  std::string *v7;
  const std::string::value_type *v8;
  void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  void *__p[2];
  unsigned __int8 v15;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v6 = (size & 0x80u) != 0;
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (v6)
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  else
    v7 = this;
  if (v7->__r_.__value_.__s.__data_[size - 1] != 47)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/");
    v8 = (v15 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
    v9 = (v15 & 0x80u) == 0 ? (void *)v15 : __p[1];
    std::string::append(this, v8, (std::string::size_type)v9);
    if ((char)v15 < 0)
      operator delete(__p[0]);
  }
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a3;
  else
    v11 = *(const std::string::value_type **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  return std::string::append(this, v11, v12);
}

{
  std::string::size_type size;
  BOOL v6;
  std::string *v7;
  const std::string::value_type *v8;
  void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  void *__p[2];
  unsigned __int8 v15;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v6 = (size & 0x80u) != 0;
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (v6)
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  else
    v7 = this;
  if (v7->__r_.__value_.__s.__data_[size - 1] != 47)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/");
    v8 = (v15 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
    v9 = (v15 & 0x80u) == 0 ? (void *)v15 : __p[1];
    std::string::append(this, v8, (std::string::size_type)v9);
    if ((char)v15 < 0)
      operator delete(__p[0]);
  }
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a3;
  else
    v11 = *(const std::string::value_type **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  return std::string::append(this, v11, v12);
}

void sub_1A1444CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::createReadOnlyFromContentsOfFile(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  v34 = 24;
  v35 = 0;
  v36 = 0;
  if ((cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::isValidHeader(a1, &v34) & 1) != 0)
  {
    v8 = cvml::util::MMapFileBackingStore::createByMappingDirectlyFromFile((const char *)a1, 0);
    std::shared_ptr<cvml::util::MMapFileBackingStore>::shared_ptr[abi:ne180100]<cvml::util::MMapFileBackingStore,void>(&v32, v8);
    if (v32)
    {
      v15 = 0;
      v30 = 0;
      v31 = 0uLL;
      if (v35 <= HIDWORD(v35))
      {
        v17 = *v32;
        std::vector<BOOL>::resize((uint64_t)&v30, HIDWORD(v35), 1);
        if (!(_DWORD)v35)
        {
LABEL_16:
          v15 = operator new();
          cvml::util::MMapFileBackingStore::MMapFileBackingStore(v15, (uint64_t)v32);
          *(_QWORD *)(v15 + 56) = v30;
          *(_OWORD *)(v15 + 64) = v31;
          goto LABEL_17;
        }
        v18 = (unsigned int *)(v17 + v34);
        v19 = HIDWORD(v35);
        v15 = v30;
        v20 = 4 * v35;
        while (1)
        {
          v21 = *v18;
          if (v21 >= v19)
            break;
          v22 = v21 >> 6;
          v23 = 1 << v21;
          v24 = *(_QWORD *)(v15 + 8 * v22);
          if ((v24 & v23) == 0)
            break;
          *(_QWORD *)(v15 + 8 * v22) = v24 & ~v23;
          ++v18;
          v20 -= 4;
          if (!v20)
            goto LABEL_16;
        }
      }
      VNValidatedLog(4, (uint64_t)CFSTR("BackedBuffer<BackingStore>::createByMappingDirectlyFromFile -- The valid element list is corrupt"), v9, v10, v11, v12, v13, v14, v29);
      if (!v15)
      {
LABEL_17:
        v25 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        return v15;
      }
      operator delete((void *)v15);
    }
    v15 = 0;
    goto LABEL_17;
  }
  if (*(char *)(a1 + 23) >= 0)
    v16 = a1;
  else
    v16 = *(_QWORD *)a1;
  VNValidatedLog(4, (uint64_t)CFSTR("BackedBuffer<BackingStore>::createByMappingDirectlyFromFile -- Invalid header detected for file '%s'"), v2, v3, v4, v5, v6, v7, v16);
  return 0;
}

void sub_1A1444E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1A1B0A898](v14, 0x1092C4040FCC1CALL);
  if (__p)
    operator delete(__p);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>::reset[abi:ne180100]<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E453BCD8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A1444FA4(_Unwind_Exception *exception_object)
{
  cvml::util::MMapFileBackingStore *v1;

  if (v1)
    std::default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::operator()[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

uint64_t cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::createFromContentsOfFile(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *p_p;
  void *v24;
  void *v25;
  int v26;
  uint64_t v27;
  const __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *exception;
  uint64_t v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  void *__p;
  __int128 v59;

  v55 = 24;
  v56 = 0;
  v57 = 0;
  if ((cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::isValidHeader(a1, &v55) & 1) == 0)
  {
    if (*(char *)(a1 + 23) >= 0)
      v50 = a1;
    else
      v50 = *(_QWORD *)a1;
    VNValidatedLog(4, (uint64_t)CFSTR("BackedBuffer<BackingStore>::createByMappingDirectlyFromFile -- Invalid header detected for file '%s'"), v3, v4, v5, v6, v7, v8, v50);
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x1E0DE5060] + 16;
    __cxa_throw(exception, MEMORY[0x1E0DE4EB0], (void (*)(void *))MEMORY[0x1E0DE4DD0]);
  }
  v15 = HIBYTE(v59);
  if (v59 < 0)
    v15 = v59;
  if (v15 == 11
    && (v59 >= 0 ? (v16 = (uint64_t *)&__p) : (v16 = (uint64_t *)__p),
        (v17 = *v16, v18 = *(uint64_t *)((char *)v16 + 3), v17 == 0x494C41564E492323)
      ? (v19 = v18 == 0x232344494C41564ELL)
      : (v19 = 0),
        v19))
  {
    v28 = CFSTR("MMapFileBackedBuffer::createFromContentsOfFile -- Could not generate a valid path for temporary file");
  }
  else
  {
    v20 = (void *)MEMORY[0x1A1B0B060]();
    if (*(char *)(a1 + 23) >= 0)
      v21 = a1;
    else
      v21 = *(_QWORD *)a1;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v59 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "fileExistsAtPath:", v22);
    if (v26)
      v1 = objc_msgSend(v25, "copyItemAtPath:toPath:error:", v22, v24, 0);

    objc_autoreleasePoolPop(v20);
    if ((v26 & v1 & 1) != 0)
    {
      v27 = cvml::util::MMapFileBackingStore::createByMappingDirectlyFromFile((const char *)&__p, 1);
      goto LABEL_25;
    }
    v28 = CFSTR("MMapFileBackedBuffer::createFromContentsOfFile -- Could not create a temporary file for file backed storage");
  }
  VNValidatedLog(4, (uint64_t)v28, v9, v10, v11, v12, v13, v14, v52);
  v27 = 0;
LABEL_25:
  if (SHIBYTE(v59) < 0)
    operator delete(__p);
  std::shared_ptr<cvml::util::MMapFileBackingStore>::shared_ptr[abi:ne180100]<cvml::util::MMapFileBackingStore,void>(&v53, v27);
  if (v53)
  {
    __p = 0;
    v59 = 0uLL;
    if (v56 > HIDWORD(v56))
      goto LABEL_42;
    v35 = *v53;
    std::vector<BOOL>::resize((uint64_t)&__p, HIDWORD(v56), 1);
    if ((_DWORD)v56)
    {
      v36 = (unsigned int *)(v35 + v55);
      v37 = HIDWORD(v56);
      v38 = __p;
      v39 = 4 * v56;
      while (1)
      {
        v40 = *v36;
        if (v40 >= v37)
          break;
        v41 = v40 >> 6;
        v42 = 1 << v40;
        v43 = v38[v41];
        if ((v43 & v42) == 0)
          break;
        v38[v41] = v43 & ~v42;
        ++v36;
        v39 -= 4;
        if (!v39)
          goto LABEL_34;
      }
LABEL_42:
      VNValidatedLog(4, (uint64_t)CFSTR("BackedBuffer<BackingStore>::createByMappingDirectlyFromFile -- The valid element list is corrupt"), v29, v30, v31, v32, v33, v34, v52);
      v49 = __cxa_allocate_exception(8uLL);
      *v49 = MEMORY[0x1E0DE5060] + 16;
      __cxa_throw(v49, MEMORY[0x1E0DE4EB0], (void (*)(void *))MEMORY[0x1E0DE4DD0]);
    }
LABEL_34:
    v44 = operator new();
    cvml::util::MMapFileBackingStore::MMapFileBackingStore(v44, (uint64_t)v53);
    *(_QWORD *)(v44 + 56) = __p;
    *(_OWORD *)(v44 + 64) = v59;
  }
  else
  {
    v44 = 0;
  }
  v45 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  return v44;
}

void sub_1A14452F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  MEMORY[0x1A1B0A898](v21, 0x1092C4040FCC1CALL);
  if (__p)
    operator delete(__p);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::reset[abi:ne180100]<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E453BD48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A1445400(_Unwind_Exception *exception_object)
{
  cvml::util::MMapFileBackingStore *v1;

  if (v1)
    std::default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::operator()[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  std::vector<int>::size_type v5;
  std::vector<int>::size_type v6;
  int *value;
  uint64_t v8;
  std::vector<int>::size_type v9;
  unint64_t v10;
  char *v11;
  std::vector<int>::pointer v12;
  std::vector<int>::pointer v13;
  char *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int *v19;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v19 = &begin[__sz];
    goto LABEL_15;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 4 * v6);
    v19 = &end[v6];
LABEL_15:
    this->__end_ = v19;
    return;
  }
  if (__sz >> 62)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 1;
  if (v8 >> 1 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  v12 = this->__begin_;
  v13 = this->__end_;
  v14 = &v11[4 * v5];
  v16 = (int *)&v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = (int *)&v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *--v13;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  this->__begin_ = (std::vector<int>::pointer)v14;
  this->__end_ = v17;
  this->__end_cap_.__value_ = v16;
  if (v12)
    operator delete(v12);
}

cvml::util::MMapFileBackingStore *std::default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::operator()[abi:ne180100](cvml::util::MMapFileBackingStore *this)
{
  cvml::util::MMapFileBackingStore *v1;
  void *v2;

  if (this)
  {
    v1 = this;
    v2 = (void *)*((_QWORD *)this + 7);
    if (v2)
      operator delete(v2);
    cvml::util::MMapFileBackingStore::~MMapFileBackingStore(v1);
    JUMPOUT(0x1A1B0A898);
  }
  return this;
}

void std::__shared_ptr_pointer<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> *,std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::__shared_ptr_default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>,cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>,std::allocator<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

cvml::util::MMapFileBackingStore *std::__shared_ptr_pointer<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> *,std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::__shared_ptr_default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>,cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>,std::allocator<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::operator()[abi:ne180100](*(cvml::util::MMapFileBackingStore **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> *,std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::__shared_ptr_default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>,cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>,std::allocator<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4cvml4util12BackedBufferINS2_20MMapFileBackingStoreEEEE27__shared_ptr_default_deleteIS5_S5_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::isValidHeader(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  off_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v23;
  uint64_t v24;
  _QWORD *exception;
  const __CFString *v26;
  uint64_t v27;
  _QWORD *v28;
  const __CFString *v29;
  uint64_t v30;
  _QWORD *v31;

  v3 = a1;
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  v4 = open((const char *)a1, 0);
  v11 = v4;
  if (v4 == -1)
  {
    v23 = CFSTR("BackedBuffer<BackingStore>::isValidHeader -- cannot open source file '%s'");
    goto LABEL_14;
  }
  if (read(v4, a2, 0x18uLL) != 24)
  {
    v23 = CFSTR("BackedBuffer<BackingStore>::isValidHeader -- corrupt header detected in file '%s'");
    goto LABEL_14;
  }
  v12 = a2[4];
  if (!(_DWORD)v12)
  {
    v23 = CFSTR("BackedBuffer<BackingStore>::isValidHeader -- inconsistent header detected -- zero element size detected for file '%s'");
LABEL_14:
    if (*(char *)(v3 + 23) >= 0)
      v24 = v3;
    else
      v24 = *(_QWORD *)v3;
    VNValidatedLog(4, (uint64_t)v23, v5, v6, v7, v8, v9, v10, v24);
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x1E0DE5060] + 16;
    __cxa_throw(exception, MEMORY[0x1E0DE4EB0], (void (*)(void *))MEMORY[0x1E0DE4DD0]);
  }
  v13 = *(_QWORD *)a2;
  v14 = (*(_QWORD *)a2 - 24) / v12;
  if (a2[3] != (_DWORD)v14)
  {
    v26 = CFSTR("BackedBuffer<BackingStore>::isValidHeader -- inconsistent header detected -- element count does not match max free element capacity for file '%s'");
    goto LABEL_20;
  }
  if (a2[2] > v14)
  {
    v26 = CFSTR("BackedBuffer<BackingStore>::isValidHeader -- inconsistent header detected -- free element count exceeds free element capacity for file '%s'");
LABEL_20:
    if (*(char *)(v3 + 23) >= 0)
      v27 = v3;
    else
      v27 = *(_QWORD *)v3;
    VNValidatedLog(4, (uint64_t)v26, v5, v6, v7, v8, v9, v10, v27);
    v28 = __cxa_allocate_exception(8uLL);
    *v28 = MEMORY[0x1E0DE5060] + 16;
    __cxa_throw(v28, MEMORY[0x1E0DE4EB0], (void (*)(void *))MEMORY[0x1E0DE4DD0]);
  }
  v15 = lseek(v11, 0, 2);
  if (v15 == -1)
  {
    v29 = CFSTR("BackedBuffer<BackingStore>::isValidHeader -- inconsistent header detected -- could not validate file size for file '%s'");
    goto LABEL_26;
  }
  if (4 * v14 + v13 != v15)
  {
    v29 = CFSTR("BackedBuffer<BackingStore>::isValidHeader -- inconsistent header detected -- expected file size does not match actual file size for file '%s'");
LABEL_26:
    if (*(char *)(v3 + 23) >= 0)
      v30 = v3;
    else
      v30 = *(_QWORD *)v3;
    VNValidatedLog(4, (uint64_t)v29, v16, v17, v18, v19, v20, v21, v30);
    v31 = __cxa_allocate_exception(8uLL);
    *v31 = MEMORY[0x1E0DE5060] + 16;
    __cxa_throw(v31, MEMORY[0x1E0DE4EB0], (void (*)(void *))MEMORY[0x1E0DE4DD0]);
  }
  close(v11);
  return 1;
}

void sub_1A14457D0(_Unwind_Exception *a1, int a2)
{
  int v2;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (v2 == -1)
      JUMPOUT(0x1A144568CLL);
    JUMPOUT(0x1A1445680);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<cvml::util::MMapFileBackingStore>::shared_ptr[abi:ne180100]<cvml::util::MMapFileBackingStore,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E453BD80;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1A1445860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<cvml::util::MMapFileBackingStore>::reset[abi:ne180100]((cvml::util::MMapFileBackingStore **)va);
  _Unwind_Resume(a1);
}

cvml::util::MMapFileBackingStore *std::unique_ptr<cvml::util::MMapFileBackingStore>::reset[abi:ne180100](cvml::util::MMapFileBackingStore **a1)
{
  cvml::util::MMapFileBackingStore *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    cvml::util::MMapFileBackingStore::~MMapFileBackingStore(result);
    JUMPOUT(0x1A1B0A898);
  }
  return result;
}

void std::__shared_ptr_pointer<cvml::util::MMapFileBackingStore *,std::shared_ptr<cvml::util::MMapFileBackingStore>::__shared_ptr_default_delete<cvml::util::MMapFileBackingStore,cvml::util::MMapFileBackingStore>,std::allocator<cvml::util::MMapFileBackingStore>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

cvml::util::MMapFileBackingStore *std::__shared_ptr_pointer<cvml::util::MMapFileBackingStore *,std::shared_ptr<cvml::util::MMapFileBackingStore>::__shared_ptr_default_delete<cvml::util::MMapFileBackingStore,cvml::util::MMapFileBackingStore>,std::allocator<cvml::util::MMapFileBackingStore>>::__on_zero_shared(uint64_t a1)
{
  cvml::util::MMapFileBackingStore *result;

  result = *(cvml::util::MMapFileBackingStore **)(a1 + 24);
  if (result)
  {
    cvml::util::MMapFileBackingStore::~MMapFileBackingStore(result);
    JUMPOUT(0x1A1B0A898);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<cvml::util::MMapFileBackingStore *,std::shared_ptr<cvml::util::MMapFileBackingStore>::__shared_ptr_default_delete<cvml::util::MMapFileBackingStore,cvml::util::MMapFileBackingStore>,std::allocator<cvml::util::MMapFileBackingStore>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4cvml4util20MMapFileBackingStoreEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const*,std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>::__shared_ptr_default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const,cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>,std::allocator<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

cvml::util::MMapFileBackingStore *std::__shared_ptr_pointer<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const*,std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>::__shared_ptr_default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const,cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>,std::allocator<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::operator()[abi:ne180100](*(cvml::util::MMapFileBackingStore **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const*,std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>::__shared_ptr_default_delete<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const,cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>,std::allocator<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore> const>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN4cvml4util12BackedBufferINS2_20MMapFileBackingStoreEEEE27__shared_ptr_default_deleteIS6_S6_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void vision::mod::GreedyClustererWithTorso::private_t::clusters_t::newMapFilePath(std::string *a1, uint64_t a2)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string v14;
  std::string v15;
  char out[40];
  unsigned __int8 uu[8];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)uu = 0;
  v18 = 0;
  MEMORY[0x1A1B0B8E8](uu);
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  std::string::basic_string[abi:ne180100]<0>(&v14, out);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = std::string::insert(&v14, 0, v5, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ".cmap");
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v15, (const std::string::value_type *)v9, v10);
  *a1 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1A1445AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *getRelativePath(_QWORD *a1, char *a2, _QWORD *__s)
{
  int v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  int v11;
  void *v12;
  size_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *exception;

  v5 = a2[23];
  if (v5 >= 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  if (*((char *)__s + 23) < 0)
  {
    v7 = __s[1];
    if (v6 >= v7)
      goto LABEL_22;
    v8 = (_QWORD *)*__s;
  }
  else
  {
    v7 = *((unsigned __int8 *)__s + 23);
    v8 = __s;
    if (v6 >= v7)
      goto LABEL_22;
  }
  if (v5 >= 0)
    v9 = a2;
  else
    v9 = *(char **)a2;
  if (v6)
  {
    if ((uint64_t)v7 < (uint64_t)v6)
      goto LABEL_22;
    v10 = (char *)v8 + v7;
    v11 = *v9;
    v12 = v8;
    while (1)
    {
      v13 = v7 - v6;
      if (v13 == -1)
        goto LABEL_22;
      v14 = (char *)memchr(v12, v11, v13 + 1);
      if (!v14)
        goto LABEL_22;
      v15 = v14;
      if (!memcmp(v14, v9, v6))
        break;
      v12 = v15 + 1;
      v7 = v10 - (v15 + 1);
      if ((uint64_t)v7 < (uint64_t)v6)
        goto LABEL_22;
    }
    if (v15 == v10 || (v16 = v15 - (char *)v8, v15 - (char *)v8 == -1))
    {
LABEL_22:
      exception = __cxa_allocate_exception(8uLL);
      *exception = 5246;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
  }
  else
  {
    v16 = 0;
  }
  return std::string::basic_string[abi:ne180100](a1, __s, v16 + v6);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 < a3)
      goto LABEL_15;
    v4 = (uint64_t *)*a2;
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 < a3)
LABEL_15:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v7 = v6 - a3;
  if (v6 - a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = v10 | 0x8000000000000000;
    *__dst = v8;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v7;
    v8 = __dst;
    if (v6 == a3)
      goto LABEL_14;
  }
  memmove(v8, (char *)v4 + a3, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  return __dst;
}

void vision::mod::GreedyClustererFacesWithTorso::~GreedyClustererFacesWithTorso(vision::mod::GreedyClustererFacesWithTorso *this)
{
  vision::mod::GreedyClustererFacesWithTorso::~GreedyClustererFacesWithTorso(this);
  JUMPOUT(0x1A1B0A898);
}

{
  vision::mod::GreedyClustererWithTorso *v2;

  *(_QWORD *)this = &off_1E453AA10;
  *((_QWORD *)this + 1) = &unk_1E453AAF0;
  v2 = (vision::mod::GreedyClustererFacesWithTorso *)((char *)this + 8);
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*((_QWORD **)this + 22));
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*((_QWORD **)this + 19));
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*((_QWORD **)this + 16));
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(*((_QWORD **)this + 13));
  vision::mod::GreedyClustererWithTorso::~GreedyClustererWithTorso(v2);
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::update(uint64_t **a1, std::vector<unsigned int>::size_type *lpsrc, _QWORD *a3)
{
  _QWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  std::vector<unsigned int>::size_type v12;
  int v13;
  int v14;
  std::vector<unsigned int>::size_type v15;
  std::vector<unsigned int> *v16;
  uint64_t *v17;
  int v18;
  std::vector<unsigned int>::size_type v19;
  cvml::util::MMapFileBackingStore *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  float v25;
  float v26;
  float v27;
  int v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t *v37;
  unsigned int *v38;
  unsigned int *v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;
  float v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  _BOOL4 v57;
  BOOL v58;
  int v59;
  float v60;
  float v61;
  int v62;
  int v63;
  BOOL v64;
  int v65;
  unsigned int v66;
  uint16x4_t v67;
  float v68;
  unsigned int v69;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  _BOOL4 v75;
  cvml::util::MMapFileBackingStore *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64x2_t v88;
  _DWORD *v89;
  int v90;
  int64x2_t v91;
  int32x2_t v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  int *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  char *v105;
  _DWORD *v106;
  unint64_t v107;
  int v108;
  int v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  float v114;
  float v115;
  double v116;
  double v117;
  vDSP_Length v118;
  double v119;
  float v120;
  std::vector<unsigned int>::size_type v121;
  int *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  BOOL v127;
  unint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  int v131;
  unint64_t *v132;
  unsigned int *v133;
  unsigned int *shared_owners;
  std::__shared_weak_count_vtbl *v135;
  unint64_t v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t **v140;
  uint64_t *v141;
  unint64_t v142;
  uint64_t *v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *exception;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t *p_end;
  std::__shared_weak_count *v161;
  std::vector<unsigned int>::size_type *v162;
  uint64_t v163;
  uint64_t v164;
  std::vector<unsigned int> *v165;
  std::vector<unsigned int>::size_type v166;
  std::vector<unsigned int>::size_type v167;
  unint64_t v168;
  int *v169;
  int64x2_t v170;
  uint64_t **v171;
  int64x2_t *v172;
  unsigned int *v173;
  vDSP_Length v174;
  const float *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unsigned int v180;
  unint64_t v181;
  _QWORD **v182;
  _QWORD *v183[2];
  int64x2_t v184;
  int64x2_t v185;
  uint64_t __C;
  void *v187[2];
  char v188;

  if (!v6 || v6[12] != 256)
    return 5244;
  if (lpsrc[9] != (uint64_t)(lpsrc[2] - lpsrc[1]) >> 3)
    syslog(5, "wrong number of descriptors id in descriptor buffer");
  v183[0] = 0;
  v183[1] = 0;
  v182 = v183;
  if (*((_DWORD *)lpsrc + 26) != *((_DWORD *)a1 + 8))
  {
    syslog(5, "For consistency, GreedyClustererWithTorso::addDescriptors must be called with a ImageDescriptorBufferJoint having the same distance mode as GreedyClustererWithTorso::distance_mode");
    exception = __cxa_allocate_exception(8uLL);
    *exception = 5244;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  std::vector<BOOL>::vector(v187, (uint64_t)(lpsrc + 15));
  v8 = (_BYTE *)lpsrc[18];
  v7 = (_BYTE *)lpsrc[19];
  v9 = v7 - v8;
  v171 = a1;
  v162 = lpsrc;
  v157 = a3;
  if (v7 == v8)
  {
    v10 = 0;
  }
  else
  {
    if (v9 < 0)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v10 = (int64x2_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(v9 >> 4);
    memmove(v10, v8, v9);
  }
  v12 = lpsrc[8];
  v167 = lpsrc[7];
  v172 = v10;
  v13 = (*(uint64_t (**)(std::vector<unsigned int>::size_type *))(*lpsrc + 104))(lpsrc);
  if (!v167)
  {
    v154 = __cxa_allocate_exception(8uLL);
    *v154 = 5245;
    __cxa_throw(v154, MEMORY[0x1E0DE4F28], 0);
  }
  v14 = v13;
  v15 = lpsrc[9];
  v16 = (std::vector<unsigned int> *)operator new(0x30uLL);
  v16->__end_ = 0;
  p_end = (unint64_t *)&v16->__end_;
  v161 = (std::__shared_weak_count *)v16;
  v16->__end_cap_.__value_ = 0;
  v16->__begin_ = (std::vector<unsigned int>::pointer)&off_1E453BC68;
  v165 = v16 + 1;
  v166 = v15;
  std::vector<unsigned int>::vector(v16 + 1, v15);
  v17 = a1[9];
  v18 = *((_DWORD *)v17 + 26);
  v168 = (unint64_t)v14 >> 2;
  if (v18 != (_DWORD)v168 && v18)
  {
    v155 = __cxa_allocate_exception(8uLL);
    *v155 = 5244;
    __cxa_throw(v155, MEMORY[0x1E0DE4F28], 0);
  }
  *((_DWORD *)v17 + 26) = v168;
  v19 = v15;
  if (!v17[9] && !v17[11])
  {
    v20 = cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::create((cvml::util::MMapFileBackingStore *)(4 * (int)v168 + 40));
    if (!v20)
    {
      v156 = __cxa_allocate_exception(8uLL);
      *v156 = 5246;
      __cxa_throw(v156, MEMORY[0x1E0DE4F28], 0);
    }
    v21 = a1[9];
    std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::reset[abi:ne180100]<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>,void>((uint64_t)(v21 + 9), (uint64_t)v20);
    std::shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>::operator=[abi:ne180100](v21 + 11, v21[9], v21[10]);
    v19 = v166;
  }
  if (v19)
  {
    v22 = 0;
    v23 = (unint64_t)(int)v12 >> 2;
    v24 = a1[5];
    v25 = *((float *)v24 + 4);
    v26 = *((float *)a1 + 5);
    v27 = *((float *)v24 + 2);
    if ((v168 & 0x80000000) == 0)
      v28 = (unint64_t)v14 >> 2;
    else
      v28 = v168 + 1;
    v174 = (uint64_t)v28 >> 1;
    v158 = ((unint64_t)v14 >> 2);
    v163 = (int)v23;
    v164 = (int)v23;
    v170 = vdupq_n_s64(2uLL);
    v29 = (int *)v167;
    v159 = (v28 >> 1);
    while (1)
    {
      v169 = v29;
      v175 = (const float *)(v167 + 4 * v22 * v164);
      v36 = (*(float (**)(uint64_t *))*a1[5])(a1[5]);
      v37 = a1[9];
      v39 = (unsigned int *)v37[6];
      v38 = (unsigned int *)v37[7];
      v178 = v22 >> 5;
      v177 = 1 << (2 * (v22 & 0x1Fu));
      v176 = 1 << ((2 * (v22 & 0x1F)) | 1);
      if (v39 != v38)
        break;
      v179 = -1;
LABEL_86:
      v71 = *((_QWORD *)v187[0] + v178);
      v72 = v71 & v177;
      v73 = (v71 & v177) != 0;
      v74 = v71 & v176;
      v75 = (v71 & v176) != 0;
      v76 = (cvml::util::MMapFileBackingStore *)a1[9][9];
      if ((v179 & 0x80000000) != 0)
      {
        if (!v76)
          goto LABEL_162;
        v78 = *(_QWORD *)v76;
        v79 = *(_DWORD *)(*(_QWORD *)v76 + 8);
        if (!v79)
        {
          v181 = v22;
          v80 = *(unsigned int *)(v78 + 12);
          if ((_DWORD)v80)
            v81 = (2 * v80);
          else
            v81 = 256;
          if (v81 <= v80
            || (v82 = *(_DWORD *)(v78 + 16),
                v83 = v81 * (unint64_t)v82,
                !cvml::util::MMapFileBackingStore::growStorage(v76, (cvml::util::MMapFileBackingStore *)(v83 + 24 + 4 * v81))))
          {
            VNValidatedLog(4, (uint64_t)CFSTR("BackedBuffer<BackingStore>::allocateElement -- could not allocate new element because grow failed"), v30, v31, v32, v33, v34, v35, (uint64_t)v183);
LABEL_162:
            v152 = __cxa_allocate_exception(8uLL);
            *v152 = 5246;
            __cxa_throw(v152, MEMORY[0x1E0DE4F28], 0);
          }
          v84 = 0;
          v85 = *(_QWORD *)v76;
          v86 = (4 * v81 - 4 * v80 - 4) >> 2;
          v87 = (v86 + 2) & 0x7FFFFFFFFFFFFFFELL;
          v88 = (uint64x2_t)vdupq_n_s64(v86);
          v89 = (_DWORD *)(*(_QWORD *)v76 + v83 + 28);
          v90 = -2;
          v91 = (int64x2_t)xmmword_1A15DD910;
          do
          {
            v92 = vmovn_s64((int64x2_t)vcgeq_u64(v88, (uint64x2_t)v91));
            if ((v92.i8[0] & 1) != 0)
              *(v89 - 1) = v81 + v90 + 1;
            if ((v92.i8[4] & 1) != 0)
              *v89 = v81 + (v84 ^ 0xFFFFFFFE);
            v84 += 2;
            v91 = vaddq_s64(v91, v170);
            v90 -= 2;
            v89 += 2;
          }
          while (v87 != v84);
          *(_QWORD *)v85 = v83 + 24;
          *(_DWORD *)(v85 + 12) = v81;
          *(_DWORD *)(v85 + 16) = v82;
          *(_DWORD *)(v85 + 8) = v81 - v80;
          std::vector<BOOL>::resize((uint64_t)v76 + 56, v81, 0);
          v78 = *(_QWORD *)v76;
          v79 = *(_DWORD *)(*(_QWORD *)v76 + 8);
          v10 = v172;
          v22 = v181;
        }
        v93 = v79 - 1;
        *(_DWORD *)(v78 + 8) = v93;
        v94 = *(unsigned int *)(v78 + *(_QWORD *)v78 + 4 * v93);
        *(_QWORD *)(*((_QWORD *)v76 + 7) + ((v94 >> 3) & 0x1FFFFFF8)) |= 1 << v94;
        if ((_DWORD)v94 == -1)
          goto LABEL_162;
        v95 = (uint64_t *)a1[9][9];
        if (!v95)
        {
          v151 = __cxa_allocate_exception(8uLL);
          *v151 = 5246;
          __cxa_throw(v151, MEMORY[0x1E0DE4F28], 0);
        }
        v96 = *v95;
        v97 = *(_DWORD *)(v96 + 16);
        if ((int)v168 >= 1)
        {
          v98 = (_DWORD *)(v96 + v97 * (unint64_t)v94 + 64);
          v99 = v169;
          v100 = v158;
          do
          {
            v101 = *v99++;
            *v98++ = v101;
            --v100;
          }
          while (v100);
        }
        v102 = v96 + v97 * (unint64_t)v94;
        *(_QWORD *)(v102 + 24) = v94;
        v102 += 24;
        *(float *)(v102 + 12) = v36;
        *(_DWORD *)(v102 + 16) = v73;
        *(_DWORD *)(v102 + 20) = v75;
        *(int64x2_t *)(v102 + 24) = v10[v22];
        *(_DWORD *)(v102 + 8) = 1;
        v103 = a1[9];
        v105 = (char *)v103[7];
        v104 = v103[8];
        if ((unint64_t)v105 >= v104)
        {
          v123 = (char *)v103[6];
          v124 = (v105 - v123) >> 2;
          v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 62)
            std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
          v126 = v104 - (_QWORD)v123;
          if (v126 >> 1 > v125)
            v125 = v126 >> 1;
          v127 = (unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL;
          v128 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v127)
            v128 = v125;
          if (v128)
          {
            v128 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v128);
            v123 = (char *)v103[6];
            v105 = (char *)v103[7];
          }
          else
          {
            v129 = 0;
          }
          v130 = (_DWORD *)(v128 + 4 * v124);
          *v130 = v94;
          v106 = v130 + 1;
          while (v105 != v123)
          {
            v131 = *((_DWORD *)v105 - 1);
            v105 -= 4;
            *--v130 = v131;
          }
          v103[6] = (uint64_t)v130;
          v103[7] = (uint64_t)v106;
          v103[8] = v128 + 4 * v129;
          if (v123)
            operator delete(v123);
        }
        else
        {
          *(_DWORD *)v105 = v94;
          v106 = v105 + 4;
        }
        v122 = v169;
        v103[7] = (uint64_t)v106;
        v121 = v166;
      }
      else
      {
        if (v76)
          v77 = *(_QWORD *)v76 + *(unsigned int *)(*(_QWORD *)v76 + 16) * (unint64_t)v179 + 24;
        else
          v77 = 0;
        v107 = v77 + 40;
        v108 = *(_DWORD *)(v77 + 20);
        if (v72)
        {
          v109 = *(_DWORD *)(v77 + 16);
          v110 = (double)v109 + 1.0;
          v111 = (double)v109 / v110;
          v112 = 1.0 / v110;
          if ((int)v168 >= 2)
          {
            v113 = 0;
            do
            {
              v114 = v112 * *(float *)&v169[v113] + *(float *)(v107 + 4 * v113) * v111;
              *(float *)(v107 + 4 * v113++) = v114;
            }
            while (v159 != v113);
          }
          *(_DWORD *)(v77 + 16) = v109 + 1;
          v115 = v112 * v36 + *(float *)(v77 + 12) * v111;
          *(float *)(v77 + 12) = v115;
        }
        if (v74)
        {
          if ((int)v174 < (int)v168)
          {
            v116 = (double)v108 + 1.0;
            v117 = (double)v108 / v116;
            v118 = v174;
            v119 = 1.0 / v116;
            do
            {
              v120 = v119 * *(float *)&v169[v118] + *(float *)(v107 + 4 * v118) * v117;
              *(float *)(v107 + 4 * v118++) = v120;
            }
            while ((int)v168 != v118);
          }
          *(_DWORD *)(v77 + 20) = v108 + 1;
        }
        ++*(_DWORD *)(v77 + 8);
        LODWORD(v94) = *(_DWORD *)v77;
        v121 = v166;
        v122 = v169;
      }
      v165->__begin_[v22++] = v94;
      v29 = &v122[v163];
      if (v22 == v121)
        goto LABEL_137;
    }
    v173 = (unsigned int *)v37[7];
    v40 = 0.0;
    v179 = -1;
    while (1)
    {
      v41 = a1[9][9];
      if (v41)
      {
        v42 = *(_QWORD *)v41 + *(unsigned int *)(*(_QWORD *)v41 + 16) * (unint64_t)*v39;
        if (*(int *)(v42 + 32) >= 1)
          break;
      }
LABEL_83:
      if (++v39 == v38)
        goto LABEL_86;
    }
    v180 = *v39;
    v43 = v42 + 24;
    v44 = v22;
    v45 = v10[v22];
    v46 = *(int64x2_t *)(v43 + 24);
    v184 = v46;
    v185 = v45;
    v47 = *((_DWORD *)a1[5] + 5);
    if (v45.i64[0])
      v48 = v45.i64[1] == 0;
    else
      v48 = 1;
    v49 = !v48;
    if (v46.i64[0])
      v50 = v46.i64[1] == 0;
    else
      v50 = 1;
    v51 = !v50;
    if (*(float *)(v43 + 12) >= v36)
      v52 = v36;
    else
      v52 = *(float *)(v43 + 12);
    v53 = v43 + 40;
    v54 = *((_QWORD *)v187[0] + v178);
    v56 = *(_DWORD *)(v43 + 16);
    v55 = *(_DWORD *)(v43 + 20);
    __C = 0;
    vDSP_dotpr((const float *)(v43 + 40), 1, v175, 1, (float *)&__C + 1, v174);
    vDSP_dotpr((const float *)(v53 + 4 * v174), 1, &v175[v174], 1, (float *)&__C, v174);
    v57 = 0;
    if (v56)
      v58 = (v54 & v177) == 0;
    else
      v58 = 1;
    v59 = !v58;
    v60 = (*((float *)&__C + 1) * -0.5 + 0.5) / v52;
    v61 = *(float *)&__C * -0.5 + 0.5;
    if ((v54 & v176) != 0)
      v62 = v49;
    else
      v62 = 0;
    if (v47 == 1)
    {
      a1 = v171;
      v22 = v44;
      v38 = v173;
    }
    else
    {
      v63 = v62 & v51;
      if (v55)
        v64 = v63 == 0;
      else
        v64 = 1;
      a1 = v171;
      v22 = v44;
      v38 = v173;
      if (!v64)
      {
        if (v185.i64[0] == v184.i64[0])
        {
          v57 = v185.i64[1] == v184.i64[1];
          if (v185.i64[1] == v184.i64[1])
            v65 = v59;
          else
            v65 = 0;
          if (v65 == 1)
          {
            v66 = v180;
            if (v47 != 3)
            {
              if (v47 != 2)
              {
                v150 = __cxa_allocate_exception(8uLL);
                *v150 = 5238;
                __cxa_throw(v150, MEMORY[0x1E0DE4F28], 0);
              }
              v61 = (float)(v61 * 0.5) + (float)(v60 * 0.5);
              if (v61 > v60)
                v61 = (*((float *)&__C + 1) * -0.5 + 0.5) / v52;
            }
            v10 = v172;
LABEL_73:
            v67 = (uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v184), (int32x4_t)vceqzq_s64(v185)));
            v67.i16[0] = vmaxv_u16(v67);
            if (((*((_DWORD *)a1[5] + 5) != 1) & ~v67.i32[0]) != 0)
              v68 = v25;
            else
              v68 = v27;
            if (v61 < (float)(v68 * v26))
            {
              v69 = v179;
              if (v61 < v40 || v179 == -1)
              {
                v40 = v61;
                v69 = v66;
              }
              v179 = v69;
            }
            goto LABEL_83;
          }
        }
        else
        {
          v57 = 0;
        }
      }
    }
    if (!v57)
      v61 = 1.0;
    if ((v59 & 1) != 0)
      v61 = (*((float *)&__C + 1) * -0.5 + 0.5) / v52;
    v10 = v172;
    v66 = v180;
    goto LABEL_73;
  }
LABEL_137:
  if (v10)
    operator delete(v10);
  v132 = p_end;
  if (v187[0])
    operator delete(v187[0]);
  v133 = (unsigned int *)v161[1].__vftable;
  shared_owners = (unsigned int *)v161[1].__shared_owners_;
  if (v133 != shared_owners)
  {
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v182, (uint64_t *)v183, *v133, *v133);
      ++v133;
    }
    while (v133 != shared_owners);
    v135 = v161[1].__vftable;
    if ((std::__shared_weak_count_vtbl *)v161[1].__shared_owners_ != v135)
    {
      v136 = 0;
      v137 = v171 + 13;
      do
      {
        v185.i64[0] = *(_QWORD *)(v162[1] + 8 * v136);
        v138 = (uint64_t *)*((unsigned int *)&v135->~__shared_weak_count + v136);
        v139 = *v137;
        v140 = v171 + 13;
        v141 = (uint64_t *)(v171 + 13);
        if (*v137)
        {
          while (1)
          {
            while (1)
            {
              v141 = v139;
              v142 = v139[4];
              if (v142 <= (unint64_t)v138)
                break;
              v139 = (uint64_t *)*v141;
              v140 = (uint64_t **)v141;
              if (!*v141)
                goto LABEL_152;
            }
            if (v142 >= (unint64_t)v138)
              break;
            v139 = (uint64_t *)v141[1];
            if (!v139)
            {
              v140 = (uint64_t **)(v141 + 1);
              goto LABEL_152;
            }
          }
        }
        else
        {
LABEL_152:
          v143 = (uint64_t *)operator new(0x40uLL);
          v187[1] = v171 + 13;
          v143[4] = (uint64_t)v138;
          v143[5] = (uint64_t)(v143 + 5);
          v143[6] = (uint64_t)(v143 + 5);
          v143[7] = 0;
          v188 = 1;
          std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(v171 + 12, (uint64_t)v141, v140, v143);
          v187[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v187);
          v141 = v143;
        }
        v144 = operator new(0x18uLL);
        v145 = v185.i64[0];
        v144[2] = v185.i64[0];
        v147 = v141[5];
        v146 = v141 + 5;
        *v144 = v147;
        v144[1] = v146;
        *(_QWORD *)(v147 + 8) = v144;
        *v146 = v144;
        ++v146[2];
        std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v171 + 15, v145, (uint64_t **)&v185)[5] = v138;
        ++v136;
        v132 = p_end;
        v135 = v161[1].__vftable;
      }
      while (v136 < (v161[1].__shared_owners_ - (uint64_t)v135) >> 2);
    }
  }
  do
    v148 = __ldaxr(v132);
  while (__stlxr(v148 - 1, v132));
  if (!v148)
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
  vision::mod::GreedyClustererFacesWithTorso::computeDeltaAfterUpdate((uint64_t)v171, v157, (uint64_t *)&v182);
  v11 = 5248;
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(v183[0]);
  return v11;
}

void sub_1A144699C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_QWORD *a41)
{
  uint64_t v41;
  unint64_t v44;
  void *v45;
  uint64_t v46;

  do
    v44 = __ldaxr(a16);
  while (__stlxr(v44 - 1, a16));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
    std::__shared_weak_count::__release_weak(a17);
  }
  if (__p)
    operator delete(__p);
  v45 = *(void **)(v41 - 176);
  if (v45)
    operator delete(v45);
  if (a2 == 1)
  {
    v46 = *(_QWORD *)__cxa_begin_catch(a1);
    __cxa_end_catch();
    if (v46 == 5248)
      JUMPOUT(0x1A1446820);
    JUMPOUT(0x1A1446834);
  }
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a41);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::remove()
{
  return 5248;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::affinityForFace(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v15;
  unint64_t v16;
  const float *v17;
  const float *v18;
  int v19;
  int v20;
  vDSP_Length v21;
  float v22;
  float v23;
  unint64_t v24;
  float *v25;
  float *v26;
  float *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  int v34;
  uint64_t *v35;
  uint64_t __C;

  if (!vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState((vision::mod::GreedyClustererFacesWithTorso *)a1, (uint64_t)a2))return 5244;
  if (!v8 || v8[12] != 256)
    return 5244;
  v35 = a2;
  if (vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState((vision::mod::GreedyClustererFacesWithTorso *)a1, (uint64_t)a2))
  {
    v9 = (unint64_t)std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 120), (uint64_t)a2, &v35)[5];
    if (v9 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 56) - *(_QWORD *)(*(_QWORD *)(a1 + 72) + 48)) >> 2)
    {
      v15 = &CVML_status_inconsistentState;
      return (*v15 + 128) | 0x1400;
    }
    v10 = (*(uint64_t (**)(_QWORD *))(*a3 + 104))(a3);
    v11 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(v11 + 104) == v10 >> 2)
    {
      v12 = *(_QWORD *)(v11 + 72);
      if (v12)
        v13 = *(_QWORD *)v12 + v9 * (unint64_t)*(unsigned int *)(*(_QWORD *)v12 + 16) + 24;
      else
        v13 = 0;
      std::vector<float>::reserve((void **)a4, a3[9]);
      if (a3[9])
      {
        v16 = 0;
        v17 = (const float *)(v13 + 40);
        v15 = &CVML_status_ok;
        do
        {
          v18 = (const float *)(a3[7] + 4 * (a3[8] >> 2) * v16);
          v19 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 104) + (*(int *)(*(_QWORD *)(a1 + 72) + 104) < 0);
          v20 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 104) / 2;
          __C = 0;
          v21 = (uint64_t)v19 >> 1;
          vDSP_dotpr(v18, 1, v17, 1, (float *)&__C + 1, v21);
          vDSP_dotpr(&v18[v20], 1, &v17[v20], 1, (float *)&__C, v21);
          v22 = *((float *)&__C + 1) * -0.5 + 0.5;
          v23 = 1.0 - v22;
          v25 = *(float **)(a4 + 8);
          v24 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v25 >= v24)
          {
            v27 = *(float **)a4;
            v28 = ((uint64_t)v25 - *(_QWORD *)a4) >> 2;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62)
              std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
            v30 = v24 - (_QWORD)v27;
            if (v30 >> 1 > v29)
              v29 = v30 >> 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v31);
              v27 = *(float **)a4;
              v25 = *(float **)(a4 + 8);
            }
            else
            {
              v32 = 0;
            }
            v33 = (float *)(v31 + 4 * v28);
            *v33 = v23;
            v26 = v33 + 1;
            while (v25 != v27)
            {
              v34 = *((_DWORD *)v25-- - 1);
              *((_DWORD *)v33-- - 1) = v34;
            }
            *(_QWORD *)a4 = v33;
            *(_QWORD *)(a4 + 8) = v26;
            *(_QWORD *)(a4 + 16) = v31 + 4 * v32;
            if (v27)
              operator delete(v27);
          }
          else
          {
            *v25 = v23;
            v26 = v25 + 1;
          }
          *(_QWORD *)(a4 + 8) = v26;
          ++v16;
        }
        while (a3[9] > v16);
      }
      else
      {
        v15 = &CVML_status_ok;
      }
      return (*v15 + 128) | 0x1400;
    }
  }
  v15 = &CVML_status_invalidParameter;
  return (*v15 + 128) | 0x1400;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4)
{
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t *v15;
  unint64_t v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  int v20;
  float v21;
  uint64_t *v22;
  uint64_t **v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v55;
  _QWORD *exception;
  uint64_t v57;
  char *v58;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  float *__B[3];
  float *__A[3];
  float __C[3];

  v7 = (uint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 72) + 104) + (*(int *)(*(_QWORD *)(a1 + 72) + 104) < 0)) >> 1;
  LODWORD(v60) = 0;
  std::vector<float>::vector(__A, v7, &v60);
  LODWORD(v60) = 0;
  std::vector<float>::vector(__B, v7, &v60);
  v8 = *(_QWORD *)(a1 + 160);
  if (v8)
  {
    if (v8 >> 61)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8);
    v58 = &v9[8 * v10];
    v11 = v9;
  }
  else
  {
    v11 = 0;
    v58 = 0;
  }
  v12 = *(_QWORD *)(a1 + 72);
  if (*(_BYTE *)(v12 + 112))
  {
    *(_BYTE *)(v12 + 112) = 0;
    exception = __cxa_allocate_exception(8uLL);
    *exception = 5219;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  vision::mod::GreedyClustererFacesWithTorso::getAverageDescriptorOfClusterContainingFace((_QWORD *)a1, a2, (uint64_t)a4, __A[0]);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2);
  v57 = a2;
  v14 = 0.0;
  if (v13 <= 0xA)
    v14 = (float)((float)((float)((float)v13 + -1.0) / -10.0) + 1.0) * 0.05;
  v15 = *a4;
  if (*a4 != (uint64_t *)(a4 + 1))
  {
    v16 = (unint64_t)v11;
    while (1)
    {
      v17 = (const void *)v15[5];
      v60 = v15[4];
      v62 = 0;
      v63 = 0;
      v61 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v61, v17, v15[6], (v15[6] - (uint64_t)v17) >> 3);
      v18 = v61;
      if (v62 == v61)
      {
        v18 = v62;
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 72);
        if (*(_BYTE *)(v19 + 112))
        {
          *(_BYTE *)(v19 + 112) = 0;
          v55 = __cxa_allocate_exception(8uLL);
          *v55 = 5219;
          __cxa_throw(v55, MEMORY[0x1E0DE4F28], 0);
        }
        v20 = v60;
        vision::mod::GreedyClustererFacesWithTorso::getAverageDescriptorOfClusterContainingFace((_QWORD *)a1, v60, (uint64_t)a4, __B[0]);
        __C[0] = 0.0;
        vDSP_dotpr(__A[0], 1, __B[0], 1, __C, 0x80uLL);
        v21 = (float)(__C[0] * -0.5) + 0.5;
        if (*(float *)(*(_QWORD *)(a1 + 40) + 8) * 1.1 > (float)(v14 + v21))
        {
          if (v16 >= (unint64_t)v58)
          {
            v25 = (uint64_t)(v16 - (_QWORD)v11) >> 3;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 61)
              std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
            if ((v58 - v11) >> 2 > v26)
              v26 = (v58 - v11) >> 2;
            if ((unint64_t)(v58 - v11) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v27);
            else
              v28 = 0;
            v29 = v27 + 8 * v25;
            *(_DWORD *)v29 = v20;
            *(float *)(v29 + 4) = v21;
            v30 = (char *)v29;
            while ((char *)v16 != v11)
            {
              v31 = *(_QWORD *)(v16 - 8);
              v16 -= 8;
              *((_QWORD *)v30 - 1) = v31;
              v30 -= 8;
            }
            v58 = (char *)(v27 + 8 * v28);
            v16 = v29 + 8;
            if (v11)
              operator delete(v11);
            v11 = v30;
          }
          else
          {
            *(_DWORD *)v16 = v20;
            *(float *)(v16 + 4) = v21;
            v16 += 8;
          }
          v18 = v61;
          if (!v61)
            goto LABEL_18;
LABEL_17:
          v62 = v18;
          operator delete(v18);
          goto LABEL_18;
        }
      }
      if (v18)
        goto LABEL_17;
LABEL_18:
      v22 = (uint64_t *)v15[1];
      if (v22)
      {
        do
        {
          v23 = (uint64_t **)v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t **)v15[2];
          v24 = *v23 == v15;
          v15 = (uint64_t *)v23;
        }
        while (!v24);
      }
      v15 = (uint64_t *)v23;
      if (v23 == a4 + 1)
        goto LABEL_43;
    }
  }
  v16 = (unint64_t)v11;
LABEL_43:
  v32 = 126 - 2 * __clz((uint64_t)(v16 - (_QWORD)v11) >> 3);
  if ((char *)v16 == v11)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *,false>((float *)v11, v16, v33, 1);
  v34 = v57;
  if ((char *)v16 != v11)
  {
    v35 = (float *)v11;
    do
    {
      v36 = *(unsigned int *)v35;
      v60 = v36;
      v37 = std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a4, v36, &v60);
      v38 = *std::map<long long,unsigned long>::at(*(_QWORD **)(a1 + 152), *(unsigned int *)v35);
      if (v38 != *std::map<long long,unsigned long>::at(*(_QWORD **)(a1 + 152), v34))
      {
        v39 = 1.0 - v35[1];
        v40 = *(_QWORD *)v37[5];
        v41 = LODWORD(v39);
        v43 = a3[1];
        v42 = (unint64_t)a3[2];
        if ((unint64_t)v43 >= v42)
        {
          v45 = ((char *)v43 - (_BYTE *)*a3) >> 4;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 60)
            std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
          v47 = v42 - (_QWORD)*a3;
          if (v47 >> 3 > v46)
            v46 = v47 >> 3;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
            v48 = 0xFFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
            v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(v48);
          else
            v49 = 0;
          v50 = (_QWORD *)(v48 + 16 * v45);
          *v50 = v40;
          v50[1] = v41;
          v52 = (char *)*a3;
          v51 = (char *)a3[1];
          v53 = v50;
          if (v51 == *a3)
          {
            v34 = v57;
          }
          else
          {
            v34 = v57;
            do
            {
              *((_OWORD *)v53 - 1) = *((_OWORD *)v51 - 1);
              v53 -= 2;
              v51 -= 16;
            }
            while (v51 != v52);
            v51 = (char *)*a3;
          }
          v44 = v50 + 2;
          *a3 = v53;
          a3[1] = v50 + 2;
          a3[2] = (void *)(v48 + 16 * v49);
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v43 = v40;
          v43[1] = LODWORD(v39);
          v44 = v43 + 2;
          v34 = v57;
        }
        a3[1] = v44;
      }
      v35 += 2;
    }
    while (v35 != (float *)v16);
  }
  if (v11)
    operator delete(v11);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  if (__A[0])
  {
    __A[1] = __A[0];
    operator delete(__A[0]);
  }
  return 5248;
}

void sub_1A14472A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v21;

  if (v21)
    operator delete(v21);
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void vision::mod::GreedyClustererFacesWithTorso::serialize(vision::mod::GreedyClustererFacesWithTorso *this)
{
  std::string *v1;
  std::string *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t data;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *p_s;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  std::string::size_type *v27;
  int v28;
  std::string *v29;
  std::string::size_type *v30;
  std::string::size_type *v31;
  BOOL v32;
  std::string::size_type *v33;
  int v34;
  std::string *v35;
  std::string::size_type *v36;
  std::string::size_type *v37;
  std::string::size_type size;
  uint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  std::string *p_buf;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  std::string __buf;
  __int128 v65;
  std::string __s;
  std::string __p[5458];
  uint64_t v68;

  MEMORY[0x1E0C80A78](this);
  v2 = v1;
  v4 = v3;
  v68 = *MEMORY[0x1E0C80C00];
  VNValidatedLog(1, (uint64_t)CFSTR("  GreedyClustererFacesWithTorso::serialize - enter"), v5, v6, v7, v8, v9, v10, v62);
  data = (uint64_t)v2[3].__r_.__value_.__l.__data_;
  if (*(_QWORD *)(data + 72) || *(_QWORD *)(data + 88))
  {
    vision::mod::GreedyClustererWithTorso::private_t::clusters_t::newMapFilePath(&__s, data);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    VNValidatedLog(1, (uint64_t)CFSTR("  GreedyClustererFacesWithTorso::serialize - cachefile: %s"), v12, v13, v14, v15, v16, v17, (uint64_t)p_s);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &__s;
    else
      v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
    v26 = open((const char *)v19, 1537, 438);
    if (v26 == -1)
    {
      VNValidatedLog(4, (uint64_t)CFSTR("  GreedyClustererFacesWithTorso::serialize - error creating new map file for serialization"), v20, v21, v22, v23, v24, v25, v63);
      *v4 = 0;
      v4[1] = 0;
    }
    else
    {
      vision::mod::GreedyClustererWithTorso::serializeStatus((vision::mod::GreedyClustererWithTorso *)&v2->__r_.__value_.__r.__words[1], v26, v20, v21, v22, v23, v24, v25);
      __buf.__r_.__value_.__r.__words[0] = v2[5].__r_.__value_.__r.__words[2];
      write(v26, &__buf, 8uLL);
      v27 = (std::string::size_type *)v2[5].__r_.__value_.__l.__data_;
      if (v27 != &v2[5].__r_.__value_.__r.__words[1])
      {
        v28 = 0;
        v29 = __p;
        do
        {
          v29->__r_.__value_.__r.__words[0] = v27[4];
          v29->__r_.__value_.__l.__size_ = v27[5];
          if (v28 <= 130968)
          {
            v29 = (std::string *)((char *)v29 + 16);
            v28 += 16;
          }
          else
          {
            v29 = __p;
            write(v26, __p, (v28 + 16));
            v28 = 0;
          }
          v30 = (std::string::size_type *)v27[1];
          if (v30)
          {
            do
            {
              v31 = v30;
              v30 = (std::string::size_type *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (std::string::size_type *)v27[2];
              v32 = *v31 == (_QWORD)v27;
              v27 = v31;
            }
            while (!v32);
          }
          v27 = v31;
        }
        while (v31 != &v2[5].__r_.__value_.__r.__words[1]);
        if (v28 > 0)
          write(v26, __p, v28);
      }
      __buf.__r_.__value_.__r.__words[0] = v2[6].__r_.__value_.__r.__words[2];
      write(v26, &__buf, 8uLL);
      v33 = (std::string::size_type *)v2[6].__r_.__value_.__l.__data_;
      if (v33 != &v2[6].__r_.__value_.__r.__words[1])
      {
        v34 = 0;
        v35 = __p;
        do
        {
          v35->__r_.__value_.__r.__words[0] = v33[4];
          v35->__r_.__value_.__l.__size_ = v33[5];
          if (v34 <= 130968)
          {
            v35 = (std::string *)((char *)v35 + 16);
            v34 += 16;
          }
          else
          {
            v35 = __p;
            write(v26, __p, (v34 + 16));
            v34 = 0;
          }
          v36 = (std::string::size_type *)v33[1];
          if (v36)
          {
            do
            {
              v37 = v36;
              v36 = (std::string::size_type *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v37 = (std::string::size_type *)v33[2];
              v32 = *v37 == (_QWORD)v33;
              v33 = v37;
            }
            while (!v32);
          }
          v33 = v37;
        }
        while (v37 != &v2[6].__r_.__value_.__r.__words[1]);
        if (v34 > 0)
          write(v26, __p, v34);
      }
      close(v26);
      size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __s.__r_.__value_.__l.__size_;
      std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned long,void>(&v65, size + 53);
      v39 = *(_QWORD *)v65;
      v40 = *(_QWORD **)v65;
      *v40 = 0x2717C1457E25;
      v41 = (unsigned __int8 *)(v40 + 3);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &__s;
      else
        v42 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if ((calculateChecksumMD5ForFile((const char *)v42, v41) & 1) != 0)
      {
        createFullPath(__p, (uint64_t)v2[3].__r_.__value_.__l.__data_, v2[3].__r_.__value_.__r.__words[0] + 24);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = __p;
        else
          v49 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((calculateChecksumMD5ForFile((const char *)v49, (unsigned __int8 *)(v39 + 8)) & 1) == 0)
          VNValidatedLog(4, (uint64_t)CFSTR("  GreedyClustererFacesWithTorso::serialize - error calculating checksum for cluster data file"), v50, v51, v52, v53, v54, v55, v63);
        getRelativePath(&__buf, v2[3].__r_.__value_.__l.__data_, &__s);
        v56 = HIBYTE(__buf.__r_.__value_.__r.__words[2]);
        if ((__buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          p_buf = &__buf;
        }
        else
        {
          v56 = __buf.__r_.__value_.__r.__words[1];
          p_buf = (std::string *)__buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)(v39 + 40) = v56;
        memcpy((void *)(v39 + 44), p_buf, (v56 + 1));
        std::string::operator=(v2 + 8, &__buf);
        *(_OWORD *)v4 = v65;
        v65 = 0uLL;
        if (SHIBYTE(__buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      else
      {
        VNValidatedLog(4, (uint64_t)CFSTR("  GreedyClustererFacesWithTorso::serialize - error calculating checksum for cluster data file"), v43, v44, v45, v46, v47, v48, v63);
        *v4 = 0;
        v4[1] = 0;
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (*((_QWORD *)&v65 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
      }
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
  }
  else
  {
    v61 = operator new(0x30uLL);
    v61[1] = 0;
    v61[2] = 0;
    *v61 = &off_1E453BC30;
    v61[4] = 0;
    v61[5] = 0;
    v4[1] = v61;
    v61[3] = 0;
    *v4 = v61 + 3;
  }
}

void sub_1A1447774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a16);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(vision::mod::GreedyClustererFacesWithTorso *a1, uint64_t **a2, uint64_t a3, _DWORD *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  int v31;
  int v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *__p[2];
  uint64_t *v56;
  _QWORD *v57[2];
  float __C;

  if (!vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState(a1, a3))
    goto LABEL_43;
  v9 = *a2;
  v8 = a2[1];
  if (v8 == *a2)
    goto LABEL_43;
  v10 = (_QWORD *)((char *)a1 + 152);
  if (!*((_QWORD *)a1 + 19))
  {
LABEL_42:
    syslog(5, "FaceId=%lld not present in clustering", a3);
LABEL_43:
    v43 = -4;
    return (v43 + 128) | 0x1400;
  }
  do
  {
    v11 = *v9;
    v12 = (_QWORD *)*((_QWORD *)a1 + 19);
    while (1)
    {
      v13 = v12[4];
      if (v11 >= v13)
        break;
LABEL_8:
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_42;
    }
    if (v13 < v11)
    {
      ++v12;
      goto LABEL_8;
    }
    ++v9;
  }
  while (v9 != v8);
  v57[0] = 0;
  v57[1] = 0;
  v56 = (uint64_t *)v57;
  v14 = (_QWORD *)*((_QWORD *)a1 + 18);
  if (v14 != v10)
  {
    do
    {
      *(_OWORD *)__p = *((_OWORD *)v14 + 2);
      v15 = std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v56, (uint64_t)__p[1], (uint64_t *)&__p[1]);
      v16 = v15;
      v18 = (void **)v15[6];
      v17 = v15[7];
      if ((unint64_t)v18 >= v17)
      {
        v20 = (void **)v15[5];
        v21 = v18 - v20;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v23 = v17 - (_QWORD)v20;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v24);
          v20 = (void **)v16[5];
          v18 = (void **)v16[6];
        }
        else
        {
          v25 = 0;
        }
        v26 = (void **)(v24 + 8 * v21);
        *v26 = __p[0];
        v19 = v26 + 1;
        while (v18 != v20)
        {
          v27 = *--v18;
          *--v26 = v27;
        }
        v16[5] = (uint64_t)v26;
        v16[6] = (uint64_t)v19;
        v16[7] = v24 + 8 * v25;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v18 = __p[0];
        v19 = v18 + 1;
      }
      v16[6] = (uint64_t)v19;
      v28 = (_QWORD *)v14[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v14[2];
          v30 = *v29 == (_QWORD)v14;
          v14 = v29;
        }
        while (!v30);
      }
      v14 = v29;
    }
    while (v29 != v10);
  }
  v31 = *(_DWORD *)(*((_QWORD *)a1 + 9) + 104);
  if (v31 >= 0)
    v32 = *(_DWORD *)(*((_QWORD *)a1 + 9) + 104);
  else
    v32 = v31 + 1;
  v33 = (char *)malloc_type_malloc(4 * (int)(v32 & 0xFFFFFFFE), 0x100004052888210uLL);
  if (v33)
  {
    vision::mod::GreedyClustererFacesWithTorso::getAverageDescriptorOfClusterContainingFace(a1, a3, (uint64_t)&v56, v33);
    std::vector<std::pair<float,unsigned long>>::vector((char **)__p, a2[1] - *a2);
    v34 = *a2;
    v35 = a2[1];
    if (*a2 == v35)
    {
      v42 = 0;
      v41 = __p[0];
    }
    else
    {
      v36 = 0;
      v37 = 0;
      v38 = &v33[4 * (v32 >> 1)];
      do
      {
        v39 = *v34;
        vision::mod::GreedyClustererFacesWithTorso::getAverageDescriptorOfClusterContainingFace(a1, *v34, (uint64_t)&v56, v38);
        __C = 0.0;
        vDSP_dotpr((const float *)v33, 1, (const float *)v38, 1, &__C, 0x80uLL);
        *(float *)((char *)__p[0] + v36) = (float)(__C * -0.5) + 0.5;
        v40 = (*(uint64_t (**)(vision::mod::GreedyClustererFacesWithTorso *, uint64_t))(*(_QWORD *)a1 + 200))(a1, v39);
        v41 = __p[0];
        *(_QWORD *)((char *)__p[0] + v36 + 8) = v40;
        v37 += v40;
        ++v34;
        v36 += 16;
      }
      while (v34 != v35);
      v42 = v37 >> 1;
    }
    v45 = 126 - 2 * __clz(((char *)__p[1] - (char *)v41) >> 4);
    if (__p[1] == v41)
      v46 = 0;
    else
      v46 = v45;
    std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *,false>((uint64_t)v41, (unint64_t)__p[1], v46, 1);
    v47 = a2[1];
    v48 = __p[0];
    v49 = (char *)v47 - (char *)*a2;
    if (v47 == *a2)
    {
      if (__p[0])
        goto LABEL_60;
    }
    else
    {
      v50 = 0;
      v51 = 0;
      v52 = v49 >> 3;
      if (v52 <= 1)
        v52 = 1;
      v53 = (uint64_t *)((char *)__p[0] + 8);
      while (1)
      {
        v54 = *v53;
        v53 += 2;
        v51 += v54;
        if (v51 >= v42)
          break;
        if (v52 == ++v50)
          goto LABEL_60;
      }
      *a4 = *((_DWORD *)__p[0] + 4 * v50);
LABEL_60:
      __p[1] = v48;
      operator delete(v48);
    }
    v43 = 0;
  }
  else
  {
    v43 = -5;
  }
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(v57[0]);
  return (v43 + 128) | 0x1400;
}

void sub_1A1447BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(a16);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::computeClusterLookupMapL0(uint64_t a1, uint64_t **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;

  v2 = *(_QWORD **)(a1 + 120);
  v3 = (_QWORD *)(a1 + 128);
  if (v2 != (_QWORD *)(a1 + 128))
  {
    do
    {
      v5 = std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a2, v2[4], v2 + 4);
      v6 = v5;
      v7 = v2[5];
      v9 = (char *)v5[6];
      v8 = v5[7];
      if ((unint64_t)v9 >= v8)
      {
        v11 = (char *)v5[5];
        v12 = (v9 - v11) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v14 = v8 - (_QWORD)v11;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v15);
          v11 = (char *)v6[5];
          v9 = (char *)v6[6];
        }
        else
        {
          v16 = 0;
        }
        v17 = (_QWORD *)(v15 + 8 * v12);
        *v17 = v7;
        v10 = v17 + 1;
        while (v9 != v11)
        {
          v18 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *--v17 = v18;
        }
        v6[5] = (uint64_t)v17;
        v6[6] = (uint64_t)v10;
        v6[7] = v15 + 8 * v16;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v9 = v7;
        v10 = v9 + 8;
      }
      v6[6] = (uint64_t)v10;
      v19 = (_QWORD *)v2[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v2[2];
          v21 = *v20 == (_QWORD)v2;
          v2 = v20;
        }
        while (!v21);
      }
      v2 = v20;
    }
    while (v20 != v3);
  }
  return 5248;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::computeClusterMapL0(uint64_t a1, uint64_t **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *i;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v23;

  v2 = *(_QWORD **)(a1 + 96);
  v3 = (_QWORD *)(a1 + 104);
  if (v2 != (_QWORD *)(a1 + 104))
  {
    do
    {
      for (i = (_QWORD *)v2[6]; i != v2 + 5; i = (_QWORD *)i[1])
      {
        v23 = v2[4];
        v6 = std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a2, v23, &v23);
        v7 = v6;
        v9 = (char *)v6[6];
        v8 = v6[7];
        if ((unint64_t)v9 >= v8)
        {
          v11 = (char *)v6[5];
          v12 = (v9 - v11) >> 3;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v15);
            v11 = (char *)v7[5];
            v9 = (char *)v7[6];
          }
          else
          {
            v16 = 0;
          }
          v17 = (_QWORD *)(v15 + 8 * v12);
          *v17 = i[2];
          v10 = v17 + 1;
          while (v9 != v11)
          {
            v18 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *--v17 = v18;
          }
          v7[5] = (uint64_t)v17;
          v7[6] = (uint64_t)v10;
          v7[7] = v15 + 8 * v16;
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_QWORD *)v9 = i[2];
          v10 = v9 + 8;
        }
        v7[6] = (uint64_t)v10;
      }
      v19 = (_QWORD *)v2[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v2[2];
          v21 = *v20 == (_QWORD)v2;
          v2 = v20;
        }
        while (!v21);
      }
      v2 = v20;
    }
    while (v20 != v3);
  }
  return 5248;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::computeClusterLookupMapL1(uint64_t a1, uint64_t **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;

  v2 = *(_QWORD **)(a1 + 144);
  v3 = (_QWORD *)(a1 + 152);
  if (v2 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v5 = std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a2, v2[4], v2 + 4);
      v6 = v5;
      v8 = (char *)v5[6];
      v7 = v5[7];
      if ((unint64_t)v8 >= v7)
      {
        v10 = (char *)v5[5];
        v11 = (v8 - v10) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v14);
          v10 = (char *)v6[5];
          v8 = (char *)v6[6];
        }
        else
        {
          v15 = 0;
        }
        v16 = (_QWORD *)(v14 + 8 * v11);
        *v16 = v2[5];
        v9 = v16 + 1;
        while (v8 != v10)
        {
          v17 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v16 = v17;
        }
        v6[5] = (uint64_t)v16;
        v6[6] = (uint64_t)v9;
        v6[7] = v14 + 8 * v15;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_QWORD *)v8 = v2[5];
        v9 = v8 + 8;
      }
      v6[6] = (uint64_t)v9;
      v18 = (_QWORD *)v2[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v2[2];
          v20 = *v19 == (_QWORD)v2;
          v2 = v19;
        }
        while (!v20);
      }
      v2 = v19;
    }
    while (v19 != v3);
  }
  return 5248;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::getLevel0FacesToClusterContaining(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;

  if (vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState((vision::mod::GreedyClustererFacesWithTorso *)a1, a2))
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = std::map<long long,unsigned long>::at(*(_QWORD **)(a1 + 128), a2);
    v8 = std::map<unsigned long,std::list<long long>>::at(*(_QWORD **)(a1 + 104), *(_QWORD *)(**(_QWORD **)(v6 + 88)+ *(unsigned int *)v7 * (unint64_t)*(unsigned int *)(**(_QWORD **)(v6 + 88) + 16)+ 24));
    if (v8 != a3)
      std::list<long long>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<long long,void *>,std::__list_const_iterator<long long,void *>>(a3, v8[1], (uint64_t)v8);
    v9 = &CVML_status_ok;
  }
  else
  {
    v9 = &CVML_status_invalidParameter;
  }
  return (*v9 + 128) | 0x1400;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::getDistanceBetweenLevel0ClustersContaining(vision::mod::GreedyClustererFacesWithTorso *this, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  const float *v16;
  const float *v17;
  int v18;
  int v19;
  int v20;
  vDSP_Length v21;
  float v22;
  uint64_t __C;

  if (vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState(this, a2)
    && vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState(this, a3))
  {
    v8 = *((_QWORD *)this + 9);
    v9 = std::map<long long,unsigned long>::at(*((_QWORD **)this + 16), a2);
    v10 = *(_QWORD *)(v8 + 88);
    if (v10)
      v11 = *(_QWORD *)v10 + *(unsigned int *)v9 * (unint64_t)*(unsigned int *)(*(_QWORD *)v10 + 16) + 24;
    else
      v11 = 0;
    v13 = *((_QWORD *)this + 9);
    v14 = std::map<long long,unsigned long>::at(*((_QWORD **)this + 16), a3);
    v15 = *(_QWORD *)(v13 + 88);
    if (v15)
      v15 = *(_QWORD *)v15 + *(unsigned int *)v14 * (unint64_t)*(unsigned int *)(*(_QWORD *)v15 + 16) + 24;
    v16 = (const float *)(v11 + 40);
    v17 = (const float *)(v15 + 40);
    v18 = (*(uint64_t (**)(vision::mod::GreedyClustererFacesWithTorso *))(*(_QWORD *)this + 168))(this);
    if (v18 >= 0)
      v19 = v18;
    else
      v19 = v18 + 1;
    v20 = v19 >> 1;
    __C = 0;
    v21 = (uint64_t)v19 >> 1;
    vDSP_dotpr(v16, 1, v17, 1, (float *)&__C + 1, v21);
    vDSP_dotpr(&v16[v20], 1, &v17[v20], 1, (float *)&__C, v21);
    v22 = *((float *)&__C + 1) * -0.5 + 0.5;
    *a4 = v22;
    v12 = &CVML_status_ok;
  }
  else
  {
    v12 = &CVML_status_invalidParameter;
  }
  return (*v12 + 128) | 0x1400;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::getDistanceBetweenLevel1ClustersContaining(vision::mod::GreedyClustererFacesWithTorso *a1, uint64_t a2, uint64_t **a3, uint64_t a4, char **a5)
{
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  float *__B[3];
  _DWORD v20[64];
  void *v21[3];
  float __C[3];

  if (!vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState(a1, a2))
    return 5244;
  v10 = (uint64_t)(*(_DWORD *)(*((_QWORD *)a1 + 9) + 104) + (*(int *)(*((_QWORD *)a1 + 9) + 104) < 0)) >> 1;
  v20[0] = 0;
  std::vector<float>::vector(v21, v10, v20);
  vision::mod::GreedyClustererFacesWithTorso::getAverageDescriptorOfClusterContainingFace(a1, a2, a4, v21[0]);
  v11 = (*(uint64_t (**)(vision::mod::GreedyClustererFacesWithTorso *))(*(_QWORD *)a1 + 168))(a1);
  vision::mod::dist_greedy_status_t::dist_greedy_status_t((uint64_t)v20, v11, 2);
  std::vector<float>::resize(a5, a3[1] - *a3);
  v12 = *a3;
  v13 = a3[1];
  if (*a3 == v13)
  {
    v15 = &CVML_status_ok;
  }
  else
  {
    v14 = 0;
    v15 = &CVML_status_invalidParameter;
    while (1)
    {
      v16 = *v12;
      if ((vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState(a1, *v12) & 1) == 0)
        break;
      __C[0] = 0.0;
      std::vector<float>::vector(__B, v10, __C);
      vision::mod::GreedyClustererFacesWithTorso::getAverageDescriptorOfClusterContainingFace(a1, v16, a4, __B[0]);
      __C[0] = 0.0;
      vDSP_dotpr((const float *)v21[0], 1, __B[0], 1, __C, 0x80uLL);
      *(float *)&(*a5)[v14] = (float)(__C[0] * -0.5) + 0.5;
      if (__B[0])
      {
        __B[1] = __B[0];
        operator delete(__B[0]);
      }
      ++v12;
      v14 += 4;
      if (v12 == v13)
      {
        v15 = &CVML_status_ok;
        break;
      }
    }
  }
  v18 = *v15;
  vision::mod::dist_greedy_status_t::~dist_greedy_status_t((vision::mod::dist_greedy_status_t *)v20);
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  return (v18 + 128) | 0x1400;
}

void sub_1A14483A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  void *v14;

  vision::mod::dist_greedy_status_t::~dist_greedy_status_t((vision::mod::dist_greedy_status_t *)&a12);
  v14 = *(void **)(v12 - 136);
  if (v14)
  {
    *(_QWORD *)(v12 - 128) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::computeClusterMapL1(uint64_t a1, uint64_t **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  __int128 v22;

  v2 = *(_QWORD **)(a1 + 144);
  v3 = (_QWORD *)(a1 + 152);
  if (v2 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v22 = *((_OWORD *)v2 + 2);
      v5 = std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a2, *((uint64_t *)&v22 + 1), (uint64_t *)&v22 + 1);
      v6 = v5;
      v8 = (char *)v5[6];
      v7 = v5[7];
      if ((unint64_t)v8 >= v7)
      {
        v10 = (char *)v5[5];
        v11 = (v8 - v10) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v14);
          v10 = (char *)v6[5];
          v8 = (char *)v6[6];
        }
        else
        {
          v15 = 0;
        }
        v16 = (_QWORD *)(v14 + 8 * v11);
        *v16 = v22;
        v9 = v16 + 1;
        while (v8 != v10)
        {
          v17 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v16 = v17;
        }
        v6[5] = (uint64_t)v16;
        v6[6] = (uint64_t)v9;
        v6[7] = v14 + 8 * v15;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_QWORD *)v8 = v22;
        v9 = v8 + 8;
      }
      v6[6] = (uint64_t)v9;
      v18 = (_QWORD *)v2[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v2[2];
          v20 = *v19 == (_QWORD)v2;
          v2 = v19;
        }
        while (!v20);
      }
      v2 = v19;
    }
    while (v19 != v3);
  }
  return 5248;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::getClusterIdForFaceId(vision::mod::GreedyClustererFacesWithTorso *this, uint64_t a2)
{
  if (vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState(this, a2))
    return *std::map<long long,unsigned long>::at(*((_QWORD **)this + 19), a2);
  else
    return -1;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::getMaximumFaceId(vision::mod::GreedyClustererFacesWithTorso *this)
{
  _QWORD *v1;
  char *v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = (_QWORD *)*((_QWORD *)this + 18);
  v2 = (char *)this + 152;
  if (v1 == (_QWORD *)((char *)this + 152))
    return 0;
  result = 0;
  do
  {
    if (result <= v1[4])
      result = v1[4];
    v4 = (_QWORD *)v1[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v1[2];
        v6 = *v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
  }
  while (v5 != (_QWORD *)v2);
  return result;
}

double vision::mod::GreedyClustererFacesWithTorso::getClusteredIds(uint64_t a1, uint64_t a2)
{
  void *v3;
  double result;
  __int128 v5;
  uint64_t v6;

  allKeys<long long,unsigned long>((char **)&v5, (_QWORD *)(a1 + 120));
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

void vision::mod::GreedyClustererFacesWithTorso::getClusters(vision::mod::GreedyClustererFacesWithTorso *this@<X0>, uint64_t *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  BOOL v21;
  uint64_t *v22;
  const void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  void *__p[3];
  uint64_t *v30;
  _QWORD *v31[2];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v30 = (uint64_t *)v31;
  v3 = (char *)*((_QWORD *)this + 18);
  v4 = (char *)this + 152;
  if (v3 != (char *)this + 152)
  {
    do
    {
      v5 = *((_QWORD *)v3 + 4);
      v28 = *((_QWORD *)v3 + 5);
      v6 = std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v30, v28, &v28);
      v7 = v6;
      v9 = (char *)v6[6];
      v8 = v6[7];
      if ((unint64_t)v9 >= v8)
      {
        v11 = (char *)v6[5];
        v12 = (v9 - v11) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v14 = v8 - (_QWORD)v11;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v15);
          v11 = (char *)v7[5];
          v9 = (char *)v7[6];
        }
        else
        {
          v16 = 0;
        }
        v17 = (_QWORD *)(v15 + 8 * v12);
        *v17 = v5;
        v10 = v17 + 1;
        while (v9 != v11)
        {
          v18 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *--v17 = v18;
        }
        v7[5] = (uint64_t)v17;
        v7[6] = (uint64_t)v10;
        v7[7] = v15 + 8 * v16;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v9 = v5;
        v10 = v9 + 8;
      }
      v7[6] = (uint64_t)v10;
      v19 = (char *)*((_QWORD *)v3 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v3 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v3;
          v3 = v20;
        }
        while (!v21);
      }
      v3 = v20;
    }
    while (v20 != v4);
    v22 = v30;
    if (v30 != (uint64_t *)v31)
    {
      do
      {
        v23 = (const void *)v22[5];
        v28 = v22[4];
        memset(__p, 0, sizeof(__p));
        std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(__p, v23, v22[6], (v22[6] - (uint64_t)v23) >> 3);
        v24 = a2[1];
        if (v24 >= a2[2])
        {
          v25 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(a2, (uint64_t)__p);
        }
        else
        {
          std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>((uint64_t)a2, (uint64_t)__p);
          v25 = v24 + 24;
        }
        a2[1] = v25;
        if (__p[0])
          operator delete(__p[0]);
        v26 = (uint64_t *)v22[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (uint64_t *)v22[2];
            v21 = *v27 == (_QWORD)v22;
            v22 = v27;
          }
          while (!v21);
        }
        v22 = v27;
      }
      while (v27 != (uint64_t *)v31);
    }
  }
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(v31[0]);
}

void sub_1A1448860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(a15);
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void vision::mod::GreedyClustererFacesWithTorso::getAllClustersFromState(vision::mod::GreedyClustererFacesWithTorso *this@<X0>, uint64_t *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  BOOL v21;
  uint64_t *v22;
  const void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  void *__p[3];
  uint64_t *v30;
  _QWORD *v31[2];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v30 = (uint64_t *)v31;
  v3 = (char *)*((_QWORD *)this + 18);
  v4 = (char *)this + 152;
  if (v3 != (char *)this + 152)
  {
    do
    {
      v5 = *((_QWORD *)v3 + 4);
      v28 = *((_QWORD *)v3 + 5);
      v6 = std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v30, v28, &v28);
      v7 = v6;
      v9 = (char *)v6[6];
      v8 = v6[7];
      if ((unint64_t)v9 >= v8)
      {
        v11 = (char *)v6[5];
        v12 = (v9 - v11) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v14 = v8 - (_QWORD)v11;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v15);
          v11 = (char *)v7[5];
          v9 = (char *)v7[6];
        }
        else
        {
          v16 = 0;
        }
        v17 = (_QWORD *)(v15 + 8 * v12);
        *v17 = v5;
        v10 = v17 + 1;
        while (v9 != v11)
        {
          v18 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *--v17 = v18;
        }
        v7[5] = (uint64_t)v17;
        v7[6] = (uint64_t)v10;
        v7[7] = v15 + 8 * v16;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v9 = v5;
        v10 = v9 + 8;
      }
      v7[6] = (uint64_t)v10;
      v19 = (char *)*((_QWORD *)v3 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v3 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v3;
          v3 = v20;
        }
        while (!v21);
      }
      v3 = v20;
    }
    while (v20 != v4);
    v22 = v30;
    if (v30 != (uint64_t *)v31)
    {
      do
      {
        v23 = (const void *)v22[5];
        v28 = v22[4];
        memset(__p, 0, sizeof(__p));
        std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(__p, v23, v22[6], (v22[6] - (uint64_t)v23) >> 3);
        v24 = a2[1];
        if (v24 >= a2[2])
        {
          v25 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(a2, (uint64_t)__p);
        }
        else
        {
          std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>((uint64_t)a2, (uint64_t)__p);
          v25 = v24 + 24;
        }
        a2[1] = v25;
        if (__p[0])
          operator delete(__p[0]);
        v26 = (uint64_t *)v22[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (uint64_t *)v22[2];
            v21 = *v27 == (_QWORD)v22;
            v22 = v27;
          }
          while (!v21);
        }
        v22 = v27;
      }
      while (v27 != (uint64_t *)v31);
    }
  }
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(v31[0]);
}

void sub_1A1448AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(a15);
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void vision::mod::GreedyClustererFacesWithTorso::getIdsForCluster(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  _QWORD *exception;

  if ((vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState((vision::mod::GreedyClustererFacesWithTorso *)a1, a2) & 1) == 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 5244;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v8 = a1 + 19;
  v9 = *std::map<long long,unsigned long>::at((_QWORD *)a1[19], a2);
  std::vector<long long>::reserve((void **)a3, a1[20] + 1);
  if (a4)
  {
    v10 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__equal_range_multi<long long>(a4, v9);
    if (v10 != v11)
    {
      v12 = v10;
      v13 = v11;
      v14 = *(_QWORD **)(a3 + 8);
      do
      {
        v15 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v14 >= v15)
        {
          v17 = *(_QWORD **)a3;
          v18 = ((uint64_t)v14 - *(_QWORD *)a3) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            goto LABEL_49;
          v20 = v15 - (_QWORD)v17;
          if (v20 >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v21);
            v17 = *(_QWORD **)a3;
            v14 = *(_QWORD **)(a3 + 8);
          }
          else
          {
            v22 = 0;
          }
          v23 = (_QWORD *)(v21 + 8 * v18);
          *v23 = v12[3];
          v16 = v23 + 1;
          while (v14 != v17)
          {
            v24 = *--v14;
            *--v23 = v24;
          }
          *(_QWORD *)a3 = v23;
          *(_QWORD *)(a3 + 8) = v16;
          *(_QWORD *)(a3 + 16) = v21 + 8 * v22;
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v14 = v12[3];
          v16 = v14 + 1;
        }
        *(_QWORD *)(a3 + 8) = v16;
        v12 = (_QWORD *)*v12;
        v14 = v16;
      }
      while (v12 != v13);
    }
  }
  else
  {
    v25 = (_QWORD *)a1[18];
    if (v25 != v8)
    {
      do
      {
        if (v25[5] == v9)
        {
          v27 = *(_QWORD **)(a3 + 8);
          v26 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v27 >= v26)
          {
            v29 = *(_QWORD **)a3;
            v30 = ((uint64_t)v27 - *(_QWORD *)a3) >> 3;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
LABEL_49:
              std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
            v32 = v26 - (_QWORD)v29;
            if (v32 >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v33);
              v29 = *(_QWORD **)a3;
              v27 = *(_QWORD **)(a3 + 8);
            }
            else
            {
              v34 = 0;
            }
            v35 = (_QWORD *)(v33 + 8 * v30);
            *v35 = v25[4];
            v28 = v35 + 1;
            while (v27 != v29)
            {
              v36 = *--v27;
              *--v35 = v36;
            }
            *(_QWORD *)a3 = v35;
            *(_QWORD *)(a3 + 8) = v28;
            *(_QWORD *)(a3 + 16) = v33 + 8 * v34;
            if (v29)
              operator delete(v29);
          }
          else
          {
            *v27 = v25[4];
            v28 = v27 + 1;
          }
          *(_QWORD *)(a3 + 8) = v28;
        }
        v37 = (_QWORD *)v25[1];
        if (v37)
        {
          do
          {
            v38 = v37;
            v37 = (_QWORD *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v25[2];
            v39 = *v38 == (_QWORD)v25;
            v25 = v38;
          }
          while (!v39);
        }
        v25 = v38;
      }
      while (v38 != v8);
    }
  }
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::descriptorLength(vision::mod::GreedyClustererFacesWithTorso *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 9);
  if (v1)
    return *(int *)(v1 + 104);
  else
    return 0;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::getAverageDescriptorsOfClusters(vision::mod::GreedyClustererFacesWithTorso *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v15[3];
  void *v16[13];
  int v17;
  void *v18;
  _QWORD **v19;
  _QWORD *v20[3];

  v20[0] = 0;
  v20[1] = 0;
  v19 = v20;
  v6 = (*(uint64_t (**)(vision::mod::GreedyClustererFacesWithTorso *, _QWORD ***))(*(_QWORD *)a1 + 112))(a1, &v19);
  if (v6 == 5248)
  {
    v7 = *a2;
    v8 = a2[1];
    if (*a2 == v8)
    {
LABEL_7:
      v6 = 5248;
    }
    else
    {
      v9 = 4 * (*(_DWORD *)(*((_QWORD *)a1 + 9) + 104) / 2);
      v10 = (void *)(((uint64_t)(*(_DWORD *)(*((_QWORD *)a1 + 9) + 104) + (*(int *)(*((_QWORD *)a1 + 9) + 104) < 0)) >> 1) & 0x3FFFFFFFFFFFFFFFLL);
      while (1)
      {
        v11 = *v7;
        v12 = malloc_type_malloc(v9, 0x100004052888210uLL);
        if (!v12)
        {
          v6 = 5243;
          goto LABEL_10;
        }
        if ((vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState(a1, v11) & 1) == 0)
          break;
        vision::mod::GreedyClustererFacesWithTorso::getAverageDescriptorOfClusterContainingFace(a1, v11, (uint64_t)&v19, v12);
        v13 = operator new(8uLL);
        *v13 = v11;
        v15[1] = v13 + 1;
        v15[2] = v13 + 1;
        v15[0] = v13;
        vision::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract((uint64_t)v16, v15, v12, v9, 1, 1);
        v17 = 1;
        v18 = 0;
        v16[0] = &off_1E453A8D0;
        v16[12] = v10;
        operator delete(v13);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 40))(a3, v16);
        v16[0] = &off_1E453A8D0;
        free(v18);
        vision::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(v16);
        if (++v7 == v8)
          goto LABEL_7;
      }
      free(v12);
      v6 = 5244;
    }
  }
LABEL_10:
  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(v20[0]);
  return v6;
}

void sub_1A1448F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::destroy(*(_QWORD **)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::cancelLongRunning(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 72) + 112) = 1;
  return this;
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::removeIds(uint64_t **this, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int32 *v15;
  __int32 *v16;
  __int32 *v17;
  __int32 *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int32 *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t **v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *exception;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  __int32 v45;

  v43 = 0;
  v44 = 0;
  v42 = &v43;
  v4 = *a2;
  if (a2[1] == *a2)
  {
LABEL_40:
    vision::mod::GreedyClustererFacesWithTorso::computeDeltaAfterUpdate((uint64_t)this, a3, (uint64_t *)&v42);
    v36 = &CVML_status_ok;
  }
  else
  {
    v6 = 0;
    while (1)
    {
      v7 = (uint64_t *)(v4 + 8 * v6);
      if ((vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState((vision::mod::GreedyClustererFacesWithTorso *)this, *v7) & 1) == 0)break;
      v41 = 0;
      v8 = (uint64_t)std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(this + 15, *v7, (uint64_t **)v7)[5];
      v41 = v8;
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t *)&v42, v8, v8);
      v9 = this[9][9];
      if (v9)
        v10 = *(_QWORD *)v9 + v8 * (unint64_t)*(unsigned int *)(*(_QWORD *)v9 + 16) + 24;
      else
        v10 = 0;
      --*(_DWORD *)(v10 + 8);
      v11 = std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(this + 12, v8, &v41);
      v12 = v11 + 5;
      v13 = (uint64_t *)std::remove[abi:ne180100]<std::__list_iterator<long long,void *>,long long>(v11[6], (uint64_t)(v11 + 5), v7);
      std::list<long long>::erase((uint64_t)v12, v13, v12);
      std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>(this + 15, *v7);
      std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>(this + 18, *v7);
      if (!*(_DWORD *)(v10 + 8))
      {
        v14 = this[9];
        v45 = v8;
        v15 = (__int32 *)v14[7];
        v16 = wmemchr((__int32 *)v14[6], v8, ((uint64_t)v15 - v14[6]) >> 2);
        if (v16)
          v17 = v16;
        else
          v17 = v15;
        v18 = (__int32 *)v14[7];
        if (v17 == v18 || (v19 = (_QWORD *)v14[9]) == 0)
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = 5246;
          __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
        }
        v20 = *v19;
        if (*(_DWORD *)(*v19 + 12) > v8)
        {
          v21 = v19[7];
          v22 = v8 >> 6;
          v23 = *(_QWORD *)(v21 + 8 * v22);
          if ((v23 & (1 << v8)) != 0)
          {
            *(_DWORD *)(v20 + *(_QWORD *)v20 + 4 * *(unsigned int *)(v20 + 8)) = v8;
            *(_QWORD *)(v21 + 8 * v22) = v23 & ~(1 << v8);
            ++*(_DWORD *)(v20 + 8);
          }
        }
        v24 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>((__int32 *)v14[6], v18, &v45);
        if ((__int32 *)v14[7] != v24)
          v14[7] = (uint64_t)v24;
        std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__erase_unique<unsigned long>(this + 12, v8);
        if (v43)
        {
          v25 = (uint64_t *)&v43;
          v26 = v43;
          do
          {
            v27 = v26;
            v28 = v25;
            v29 = *((_DWORD *)v26 + 7);
            v30 = v26 + 1;
            if (v29 >= v8)
              v25 = v26;
            else
              ++v26;
            v26 = (uint64_t *)*v26;
          }
          while (v26);
          if (v25 != (uint64_t *)&v43)
          {
            if (v29 < v8)
              v27 = v28;
            if (*((_DWORD *)v27 + 7) <= v8)
            {
              v31 = v28 + 1;
              if (v29 >= v8)
                v31 = v30;
              v32 = (uint64_t *)*v31;
              v33 = v25;
              if (*v31)
              {
                do
                {
                  v34 = (uint64_t **)v32;
                  v32 = (uint64_t *)*v32;
                }
                while (v32);
              }
              else
              {
                do
                {
                  v34 = (uint64_t **)v33[2];
                  v35 = *v34 == v33;
                  v33 = (uint64_t *)v34;
                }
                while (!v35);
              }
              if (v42 == (uint64_t **)v25)
                v42 = v34;
              --v44;
              std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v25);
              operator delete(v25);
            }
          }
        }
      }
      ++v6;
      v4 = *a2;
      if (v6 >= (a2[1] - *a2) >> 3)
        goto LABEL_40;
    }
    v36 = &CVML_status_invalidParameter;
  }
  v37 = (*v36 + 128) | 0x1400;
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(v43);
  return v37;
}

void sub_1A14492BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a14);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::getCountForCluster(vision::mod::GreedyClustererFacesWithTorso *this, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;

  if (!vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState(this, a2))
    return 0;
  v4 = (char *)this + 152;
  v5 = (_QWORD *)*((_QWORD *)this + 19);
  if (!v5)
    goto LABEL_12;
  v6 = (char *)this + 152;
  do
  {
    v7 = v5[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (!v8)
      v6 = (char *)v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v4 || *((_QWORD *)v6 + 4) > a2)
LABEL_12:
    v6 = (char *)this + 152;
  v10 = (char *)*((_QWORD *)this + 18);
  if (v10 == v4)
    return 0;
  result = 0;
  v12 = *((_QWORD *)v6 + 5);
  do
  {
    if (*((_QWORD *)v10 + 5) == v12)
      ++result;
    v13 = (char *)*((_QWORD *)v10 + 1);
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = *(char **)v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (char *)*((_QWORD *)v10 + 2);
        v15 = *(_QWORD *)v14 == (_QWORD)v10;
        v10 = v14;
      }
      while (!v15);
    }
    v10 = v14;
  }
  while (v14 != v4);
  return result;
}

void `non-virtual thunk to'vision::mod::GreedyClustererFacesWithTorso::~GreedyClustererFacesWithTorso(vision::mod::GreedyClustererFacesWithTorso *this)
{
  vision::mod::GreedyClustererFacesWithTorso::~GreedyClustererFacesWithTorso((vision::mod::GreedyClustererFacesWithTorso *)((char *)this - 8));
}

{
  vision::mod::GreedyClustererFacesWithTorso::~GreedyClustererFacesWithTorso((vision::mod::GreedyClustererFacesWithTorso *)((char *)this - 8));
  JUMPOUT(0x1A1B0A898);
}

void std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(a1[1]);
    std::__list_imp<long long>::clear(a1 + 5);
    operator delete(a1);
  }
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState(vision::mod::GreedyClustererFacesWithTorso *this, uint64_t a2)
{
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v2 = (_QWORD *)*((_QWORD *)this + 19);
  if (!v2)
  {
    v3 = "FaceId=%lld not present in clustering";
LABEL_9:
    syslog(5, v3, a2);
    return 0;
  }
  v3 = "FaceId=%lld not present in clustering";
  while (1)
  {
    v4 = v2[4];
    if (v4 <= a2)
      break;
LABEL_6:
    v2 = (_QWORD *)*v2;
    if (!v2)
      goto LABEL_9;
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 16);
  if (!v6)
  {
    syslog(5, "FaceId=%lld not present in l0 clustering");
    return 0;
  }
  v3 = "FaceId=%lld not present in l0 clustering";
  while (1)
  {
    v7 = v6[4];
    if (v7 <= a2)
      break;
LABEL_17:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_9;
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_17;
  }
  return 1;
}

uint64_t **std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = (uint64_t *)operator new(0x40uLL);
    v12[1] = v6;
    v10[4] = *a3;
    v10[5] = (uint64_t)(v10 + 5);
    v10[6] = (uint64_t)(v10 + 5);
    v10[7] = 0;
    v13 = 1;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v8, v7, v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::remove[abi:ne180100]<std::__list_iterator<long long,void *>,long long>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  if (result == a2)
    return a2;
  v3 = *a3;
  while (*(_QWORD *)(result + 16) != v3)
  {
    result = *(_QWORD *)(result + 8);
    if (result == a2)
      return a2;
  }
  if (result == a2)
    return a2;
  for (i = *(_QWORD *)(result + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 16);
    if (v5 != v3)
    {
      *(_QWORD *)(result + 16) = v5;
      result = *(_QWORD *)(result + 8);
      v3 = *a3;
    }
  }
  return result;
}

uint64_t *std::list<long long>::erase(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (__p != a3)
  {
    v5 = *a3;
    v6 = *__p;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    do
    {
      v7 = (uint64_t *)__p[1];
      --*(_QWORD *)(a1 + 16);
      operator delete(__p);
      __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

void std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__erase_unique<unsigned long>(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      std::__list_imp<long long>::clear(v5 + 5);
      operator delete(v5);
    }
  }
}

void vision::mod::GreedyClustererFacesWithTorso::computeDeltaAfterUpdate(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int **v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  _OWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int **v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int *v71;
  uint64_t v72;
  unsigned int v73;
  char *v74;
  unsigned int v75;
  char *i;
  unsigned int v77;
  char *v78;
  char *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t DeepCopy;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  BOOL v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  unint64_t v130;
  double v131;
  double v132;
  double v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  float *v137;
  float *v138;
  float v139;
  float v140;
  float v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unsigned int *v145;
  unint64_t v146;
  int *v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  int *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int *v167;
  void *v168;
  int v169;
  char *v170;
  unint64_t v171;
  int v172;
  int v173;
  int v174;
  vDSP_Length v175;
  uint64_t v176;
  unsigned int v177;
  unint64_t v178;
  int v179;
  int v180;
  unint64_t v181;
  unint64_t v182;
  BOOL v183;
  unint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unint64_t v188;
  int v189;
  unint64_t v190;
  float v191;
  unint64_t v192;
  float v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unint64_t v197;
  double v198;
  unint64_t v199;
  double v200;
  double v201;
  double v202;
  unint64_t v203;
  float *v204;
  float *v205;
  char *v206;
  float v207;
  float v208;
  float v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  _DWORD *v223;
  _DWORD *v224;
  unint64_t v225;
  uint64_t v226;
  int v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  uint8x8_t v235;
  _DWORD *v236;
  _DWORD *v237;
  unint64_t v238;
  uint64_t *v239;
  uint64_t *v240;
  unint64_t v241;
  uint64_t **v242;
  uint64_t *j;
  unint64_t v244;
  _QWORD *v245;
  float v246;
  _BOOL8 v247;
  unint64_t v248;
  unint64_t v249;
  int8x8_t prime;
  void *v251;
  void *v252;
  uint64_t v253;
  _QWORD *v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  unint64_t v263;
  void *v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  char *v269;
  uint64_t v270;
  unsigned int v271;
  unsigned int v272;
  float v273;
  __int128 v274;
  uint64_t *v275;
  uint64_t *v276;
  int v277;
  int v278;
  _QWORD *v279;
  _QWORD *v280;
  unint64_t v281;
  unsigned int *v282;
  _DWORD *v283;
  unsigned int v284;
  unsigned int v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  int v298;
  int v299;
  int v300;
  unint64_t v301;
  unint64_t v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t *v305;
  uint64_t *v306;
  char v307;
  unsigned int *v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  unint64_t v316;
  unsigned int *v317;
  _DWORD *v318;
  _QWORD *v319;
  _QWORD *v320;
  unint64_t v321;
  unsigned int *v322;
  _DWORD *v323;
  unsigned int *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int v331;
  _QWORD *v332;
  _QWORD *v333;
  unint64_t v334;
  char *v335;
  _DWORD *v336;
  char *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  _DWORD *v343;
  int v344;
  unsigned int v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _DWORD *v355;
  _DWORD *v356;
  unint64_t v357;
  uint64_t v358;
  int v359;
  unsigned int *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  int v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  _DWORD *v373;
  uint64_t v374;
  int v375;
  unsigned int *v376;
  uint64_t v377;
  char *v378;
  unsigned int v379;
  uint64_t *k;
  unsigned int v381;
  uint64_t *v382;
  uint64_t *v383;
  unsigned int *v384;
  unsigned int v385;
  int v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  _DWORD *v392;
  uint64_t v393;
  int v394;
  uint64_t *v395;
  _QWORD *v396;
  int *v397;
  int *v398;
  int v399;
  _QWORD *v400;
  _QWORD *v401;
  unint64_t v402;
  char *v403;
  _DWORD *v404;
  char *v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  _DWORD *v411;
  int v412;
  unint64_t v413;
  unint64_t v414;
  uint8x8_t v415;
  unint64_t v416;
  __int128 **v417;
  __int128 *v418;
  uint64_t v419;
  unint64_t v420;
  __int128 *v421;
  __int128 *v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  _DWORD *v431;
  uint64_t v432;
  int v433;
  char *v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  _QWORD *v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t *v442;
  unint64_t v443;
  unint64_t *v444;
  unint64_t v445;
  void *v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  void *v450;
  unint64_t *v451;
  unint64_t v452;
  uint64_t *v453;
  _QWORD *v454;
  uint64_t v455;
  unsigned int *v456;
  unsigned int *v457;
  unint64_t v458;
  unsigned int *v459;
  unint64_t v460;
  _QWORD *v461;
  _QWORD *v462;
  unint64_t v463;
  BOOL v464;
  _QWORD *v465;
  _QWORD *v466;
  unint64_t v467;
  _QWORD *v468;
  unint64_t v469;
  BOOL v470;
  _QWORD *v471;
  _QWORD *v472;
  _QWORD *v473;
  unint64_t v474;
  char *v475;
  char *v476;
  uint64_t v477;
  char *v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  _QWORD *v485;
  void *v486;
  uint64_t *v487;
  uint64_t v488;
  float v489;
  unint64_t *v490;
  unint64_t v491;
  unint64_t *v492;
  unint64_t v493;
  float *v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t *v497;
  uint64_t *v498;
  uint64_t *v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  void **v506;
  void *v507;
  _QWORD *v508;
  uint64_t v509;
  void *v510;
  unint64_t v511;
  _QWORD *v512;
  _QWORD *v513;
  _QWORD *v514;
  _QWORD *v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  _QWORD *v522;
  void **v523;
  void **v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  _QWORD *v528;
  _QWORD *v529;
  _QWORD *v530;
  _QWORD *exception;
  _QWORD *v532;
  char *v533;
  uint64_t v534;
  std::__shared_weak_count *v535;
  std::__shared_weak_count *v536;
  unsigned int v537;
  uint64_t **v538;
  uint64_t v539;
  unsigned int v540;
  std::__shared_weak_count *v541;
  char *v542;
  uint64_t *v543;
  uint64_t v544;
  unint64_t v546;
  uint64_t *v547;
  uint64_t *v548;
  _QWORD *v549;
  int v551;
  uint64_t v552;
  unsigned int *m;
  uint64_t *v554;
  std::__shared_weak_count *v555;
  uint64_t *v556;
  _QWORD *v557;
  unint64_t v558;
  unsigned int **v559;
  _QWORD *v560;
  uint64_t *v561;
  std::__shared_weak_count *v562;
  uint64_t *v563;
  std::__shared_weak_count *v564;
  uint64_t *v565;
  std::__shared_weak_count *v566;
  void *__p[2];
  __int128 v568;
  __int128 v569;
  uint64_t v570;
  uint64_t *__C;
  std::__shared_weak_count *v572;
  unsigned int **v573;
  uint64_t *v574;
  unsigned int v575;
  unsigned int v576;
  char *v577;
  char *v578;
  uint64_t v579;
  char *v580;
  char *v581;
  uint64_t v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  __int128 v588;
  __int128 v589;
  int v590;
  __int128 v591;
  __int128 v592;
  int v593;
  unint64_t *v594;
  std::__shared_weak_count *v595;

  v4 = a1;
  *(_BYTE *)(a1 + 88) = 1;
  v5 = operator new(0x30uLL);
  v5[1] = 0;
  v6 = v5 + 1;
  v5[2] = 0;
  v5[3] = 0;
  *v5 = &off_1E453BBF8;
  v5[4] = 0;
  v5[5] = 0;
  v561 = v5 + 3;
  v562 = (std::__shared_weak_count *)v5;
  v559 = (unsigned int **)(v5 + 3);
  v560 = v5;
  v536 = (std::__shared_weak_count *)v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  *((_QWORD *)&v591 + 1) = 0;
  *(_QWORD *)&v592 = 0;
  *(_QWORD *)&v591 = (char *)&v591 + 8;
  *((_QWORD *)&v588 + 1) = 0;
  *(_QWORD *)&v589 = 0;
  *(_QWORD *)&v588 = (char *)&v588 + 8;
  v8 = *(_QWORD **)(v4 + 144);
  v538 = (uint64_t **)(v4 + 144);
  v549 = (_QWORD *)(v4 + 152);
  v544 = v4;
  if (v8 == (_QWORD *)(v4 + 152))
    goto LABEL_124;
  do
  {
    v3 = v8[5];
    v9 = *std::map<long long,unsigned long>::at(*(_QWORD **)(v4 + 128), v8[4]);
    v10 = (uint64_t *)*((_QWORD *)&v591 + 1);
    v11 = (uint64_t **)&v591 + 1;
    v12 = (uint64_t **)&v591 + 1;
    if (*((_QWORD *)&v591 + 1))
    {
      while (1)
      {
        while (1)
        {
          v12 = (uint64_t **)v10;
          v13 = *((_DWORD *)v10 + 8);
          if (v13 <= v3)
            break;
          v10 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_11;
        }
        if (v13 >= v3)
          break;
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          goto LABEL_11;
        }
      }
      v14 = (char *)v12;
    }
    else
    {
LABEL_11:
      v14 = (char *)operator new(0x40uLL);
      *((_DWORD *)v14 + 8) = v3;
      *((_QWORD *)v14 + 7) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 5) = v14 + 48;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v12;
      *v11 = (uint64_t *)v14;
      v15 = (uint64_t *)v14;
      if (*(_QWORD *)v591)
      {
        *(_QWORD *)&v591 = *(_QWORD *)v591;
        v15 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v591 + 1), v15);
      *(_QWORD *)&v592 = v592 + 1;
    }
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t *)v14 + 5, v9, v9);
    v16 = a3[1];
    if (!v16)
      goto LABEL_22;
    while (1)
    {
      v17 = *(_DWORD *)(v16 + 28);
      if (v17 <= v9)
        break;
LABEL_19:
      v16 = *(_QWORD *)v16;
      if (!v16)
        goto LABEL_22;
    }
    if (v17 < v9)
    {
      v16 += 8;
      goto LABEL_19;
    }
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t *)&v588, v3, v3);
LABEL_22:
    v18 = (_QWORD *)v8[1];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v8[2];
        v119 = *v19 == (_QWORD)v8;
        v8 = v19;
      }
      while (!v119);
    }
    v8 = v19;
  }
  while (v19 != v549);
  v20 = (_OWORD *)v591;
  if ((__int128 *)v591 == (__int128 *)((char *)&v591 + 8))
    goto LABEL_124;
  v539 = v4 + 8;
  while (2)
  {
    LODWORD(__p[0]) = *((_DWORD *)v20 + 8);
    std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&__p[1], (_QWORD *)v20 + 5);
    v21 = __p[0];
    std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&v580, &__p[1]);
    v22 = (uint64_t *)*((_QWORD *)&v588 + 1);
    if (!*((_QWORD *)&v588 + 1))
    {
LABEL_35:
      v24 = v580;
      if (v580 != (char *)&v581)
      {
        v25 = -1;
        do
        {
          v26 = *((_DWORD *)v24 + 7);
          if (v25 == -1)
          {
            v25 = *((_DWORD *)v24 + 7);
          }
          else
          {
            if (v26 <= v25)
              __assert_rtn("computeInitialMergingList", "GreedyWithTorsoClustering.cpp", 2115, "L0 > mergingTo");
            v27 = v559;
            v29 = v559[1];
            v28 = (unint64_t)v559[2];
            if ((unint64_t)v29 >= v28)
            {
              v31 = 0xAAAAAAAAAAAAAAABLL * (v29 - *v559);
              v32 = v31 + 1;
              if (v31 + 1 > 0x1555555555555555)
                std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
              v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)*v559) >> 2);
              if (2 * v33 > v32)
                v32 = 2 * v33;
              if (v33 >= 0xAAAAAAAAAAAAAAALL)
                v34 = 0x1555555555555555;
              else
                v34 = v32;
              if (v34)
                v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(v34);
              else
                v35 = 0;
              v36 = (unsigned int *)(v34 + 12 * v31);
              *v36 = v25;
              v36[1] = v26;
              v36[2] = -1082130432;
              v38 = *v27;
              v37 = v27[1];
              v39 = v36;
              if (v37 != *v27)
              {
                do
                {
                  v40 = *(_QWORD *)(v37 - 3);
                  v37 -= 3;
                  v41 = v37[2];
                  *(_QWORD *)(v39 - 3) = v40;
                  v39 -= 3;
                  v39[2] = v41;
                }
                while (v37 != v38);
                v37 = *v27;
              }
              v30 = v36 + 3;
              *v27 = v39;
              v27[1] = v36 + 3;
              v27[2] = (unsigned int *)(v34 + 12 * v35);
              if (v37)
                operator delete(v37);
            }
            else
            {
              *v29 = v25;
              v29[1] = v26;
              v30 = v29 + 3;
              v29[2] = -1082130432;
            }
            v27[1] = v30;
          }
          v42 = (char *)*((_QWORD *)v24 + 1);
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = *(char **)v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (char *)*((_QWORD *)v24 + 2);
              v119 = *(_QWORD *)v43 == (_QWORD)v24;
              v24 = v43;
            }
            while (!v119);
          }
          v24 = v43;
        }
        while (v43 != (char *)&v581);
      }
      goto LABEL_63;
    }
    while (2)
    {
      v23 = *((_DWORD *)v22 + 7);
      if (v21 < v23)
      {
LABEL_34:
        v22 = (uint64_t *)*v22;
        if (!v22)
          goto LABEL_35;
        continue;
      }
      break;
    }
    if (v23 < v21)
    {
      ++v22;
      goto LABEL_34;
    }
    v46 = (std::__shared_weak_count *)operator new(0x30uLL);
    v46->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    v46->__shared_weak_owners_ = 0;
    v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BBF8;
    v46[1].__shared_owners_ = 0;
    v46[1].__shared_weak_owners_ = 0;
    v46[1].__vftable = 0;
    v573 = (unsigned int **)&v46[1];
    v574 = (uint64_t *)v46;
    v556 = (uint64_t *)&v46[1];
    v557 = &v46->__vftable;
    do
      v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
    vision::mod::GreedyClustererWithTorso::computeMergePairs(v539, &v580, &v580, &v556, 0);
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    v578 = 0;
    v579 = 0;
    v577 = (char *)&v578;
    v51 = *v573;
    v50 = (uint64_t)v573[1];
    while (v51 != (unsigned int *)v50)
    {
      v53 = *v51;
      v52 = v51[1];
      v54 = v51[2];
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t *)&v577, *v51, *v51);
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t *)&v577, v52, v52);
      v55 = a3[1];
      if (v55)
      {
        v56 = a3[1];
        do
        {
          v57 = *(_DWORD *)(v56 + 28);
          if (v53 >= v57)
          {
            if (v57 >= v53)
              goto LABEL_105;
            v56 += 8;
          }
          v56 = *(_QWORD *)v56;
        }
        while (v56);
        do
        {
          v58 = *(_DWORD *)(v55 + 28);
          if (v52 >= v58)
          {
            if (v58 >= v52)
              goto LABEL_105;
            v55 += 8;
          }
          v55 = *(_QWORD *)v55;
        }
        while (v55);
      }
      v59 = v559;
      v61 = v559[1];
      v60 = (unint64_t)v559[2];
      if ((unint64_t)v61 >= v60)
      {
        v63 = 0xAAAAAAAAAAAAAAABLL * (v61 - *v559);
        v64 = v63 + 1;
        if (v63 + 1 > 0x1555555555555555)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)*v559) >> 2);
        if (2 * v65 > v64)
          v64 = 2 * v65;
        if (v65 >= 0xAAAAAAAAAAAAAAALL)
          v66 = 0x1555555555555555;
        else
          v66 = v64;
        if (v66)
          v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(v66);
        else
          v67 = 0;
        v68 = (unsigned int *)(v66 + 12 * v63);
        *v68 = v53;
        v68[1] = v52;
        v68[2] = v54;
        v70 = *v59;
        v69 = v59[1];
        v71 = v68;
        if (v69 != *v59)
        {
          do
          {
            v72 = *(_QWORD *)(v69 - 3);
            v69 -= 3;
            v73 = v69[2];
            *(_QWORD *)(v71 - 3) = v72;
            v71 -= 3;
            v71[2] = v73;
          }
          while (v69 != v70);
          v69 = *v59;
        }
        v62 = v68 + 3;
        *v59 = v71;
        v59[1] = v68 + 3;
        v59[2] = (unsigned int *)(v66 + 12 * v67);
        if (v69)
          operator delete(v69);
      }
      else
      {
        *v61 = v53;
        v61[1] = v52;
        v62 = v61 + 3;
        v61[2] = v54;
      }
      v59[1] = v62;
LABEL_105:
      v51 += 3;
    }
    v74 = v580;
    v4 = v544;
    if (v580 != (char *)&v581)
    {
      do
      {
        v75 = *((_DWORD *)v74 + 7);
        for (i = v578; i; i = *(char **)i)
        {
          v77 = *((_DWORD *)i + 7);
          if (v75 >= v77)
          {
            if (v77 >= v75)
              goto LABEL_113;
            i += 8;
          }
        }
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(a3, v75, *((_DWORD *)v74 + 7));
LABEL_113:
        v78 = (char *)*((_QWORD *)v74 + 1);
        if (v78)
        {
          do
          {
            v79 = v78;
            v78 = *(char **)v78;
          }
          while (v78);
        }
        else
        {
          do
          {
            v79 = (char *)*((_QWORD *)v74 + 2);
            v119 = *(_QWORD *)v79 == (_QWORD)v74;
            v74 = v79;
          }
          while (!v119);
        }
        v74 = v79;
      }
      while (v79 != (char *)&v581);
    }
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(v578);
    v80 = (std::__shared_weak_count *)v574;
    if (v574)
    {
      v81 = (unint64_t *)(v574 + 1);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
LABEL_63:
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(v581);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((_QWORD *)v568);
    v44 = (_QWORD *)*((_QWORD *)v20 + 1);
    v3 = (uint64_t)&__p[1];
    if (v44)
    {
      do
      {
        v45 = v44;
        v44 = (_QWORD *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        v45 = (_OWORD *)*((_QWORD *)v20 + 2);
        v119 = *(_QWORD *)v45 == (_QWORD)v20;
        v20 = v45;
      }
      while (!v119);
    }
    v20 = v45;
    if (v45 != (__int128 *)((char *)&v591 + 8))
      continue;
    break;
  }
LABEL_124:
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*((_QWORD **)&v588 + 1));
  std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::destroy(*((_QWORD **)&v591 + 1));
  do
    v83 = __ldaxr(v6);
  while (__stlxr(v83 - 1, v6));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
    std::__shared_weak_count::__release_weak(v536);
  }
  v84 = v561;
  v85 = v562;
  v554 = v561;
  v555 = v562;
  if (v562)
  {
    v86 = (unint64_t *)&v562->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    v88 = v4 + 8;
    v565 = v84;
    v566 = v85;
    v89 = (unint64_t *)&v85->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  else
  {
    v88 = v4 + 8;
    v565 = v561;
    v566 = 0;
  }
  v91 = *(_QWORD *)(v4 + 72);
  v92 = *(_QWORD *)(v91 + 48);
  v534 = v88;
  v535 = v85;
  if (*(_QWORD *)(v91 + 56) != v92)
  {
    v93 = 0;
    *((_QWORD *)&v591 + 1) = 0;
    *(_QWORD *)&v592 = 0;
    *(_QWORD *)&v591 = (char *)&v591 + 8;
    v94 = *a3;
    do
    {
      v95 = *(_DWORD *)(v92 + 4 * v93);
      if ((uint64_t *)v94 == a3 + 1 || v95 != *(_DWORD *)(v94 + 28))
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t *)&v591, v95, v95);
        v91 = *(_QWORD *)(v4 + 72);
      }
      else
      {
        v96 = *(_QWORD **)(v94 + 8);
        if (v96)
        {
          do
          {
            v94 = (uint64_t)v96;
            v96 = (_QWORD *)*v96;
          }
          while (v96);
        }
        else
        {
          do
          {
            v97 = v94;
            v94 = *(_QWORD *)(v94 + 16);
          }
          while (*(_QWORD *)v94 != v97);
        }
      }
      ++v93;
      v92 = *(_QWORD *)(v91 + 48);
    }
    while (v93 < (*(_QWORD *)(v91 + 56) - v92) >> 2);
    v577 = (char *)v84;
    v578 = (char *)v85;
    if (v85)
    {
      v98 = (unint64_t *)&v85->__shared_owners_;
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    vision::mod::GreedyClustererWithTorso::computeMergePairs(v88, &v591, a3, (uint64_t **)&v577, 1);
    if (v85)
    {
      v100 = (unint64_t *)&v85->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v102 = v566;
    v573 = (unsigned int **)v565;
    v574 = (uint64_t *)v566;
    if (v566)
    {
      v103 = (unint64_t *)&v566->__shared_owners_;
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    vision::mod::GreedyClustererWithTorso::computeMergePairs(v88, a3, a3, (uint64_t **)&v573, 0);
    if (v102)
    {
      v105 = (unint64_t *)&v102->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v107 = v566;
    v594 = (unint64_t *)v565;
    v595 = v566;
    if (v566)
    {
      v108 = (unint64_t *)&v566->__shared_owners_;
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
    }
    vision::mod::GreedyClustererWithTorso::getConnectedComponentsWithoutFiltering((uint64_t *)&v588, v88, &v594);
    if (v107)
    {
      v110 = (unint64_t *)&v107->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v112 = *(_QWORD *)(v4 + 72);
    *(_OWORD *)__p = 0u;
    v568 = 0u;
    v569 = 0u;
    v570 = 0;
    v113 = *(_QWORD **)(v112 + 72);
    if (!v113)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = 5215;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
    DeepCopy = cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::createDeepCopy(v113);
    if (!DeepCopy)
    {
      syslog(5, "GreedyClustererWithTorso::clusters_t: Cannot clone MMapVector object");
      v532 = __cxa_allocate_exception(8uLL);
      *v532 = 5246;
      __cxa_throw(v532, MEMORY[0x1E0DE4F28], 0);
    }
    std::shared_ptr<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>>::reset[abi:ne180100]<cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>,void>((uint64_t)&v568 + 8, DeepCopy);
    v3 = v112 + 48;
    std::shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>::operator=[abi:ne180100]((_QWORD *)&v569 + 1, *((uint64_t *)&v568 + 1), v569);
    if (__p != (void **)(v112 + 48))
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)__p, *(char **)(v112 + 48), *(_QWORD *)(v112 + 56), (uint64_t)(*(_QWORD *)(v112 + 56) - *(_QWORD *)(v112 + 48)) >> 2);
    v116 = *((_QWORD *)&v588 + 1);
    v115 = v588;
    if ((_QWORD)v588 != *((_QWORD *)&v588 + 1))
    {
      v3 = 0xFFFFFFFFLL;
      do
      {
        v580 = 0;
        v581 = 0;
        v582 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v580, *(const void **)v115, *(_QWORD *)(v115 + 8), (uint64_t)(*(_QWORD *)(v115 + 8) - *(_QWORD *)v115) >> 2);
        v117 = v580;
        v118 = v581;
        v119 = (unint64_t)(v581 - v580) < 5 || v580 == v581;
        if (!v119)
        {
          v120 = (uint64_t *)*((_QWORD *)&v568 + 1);
          v121 = 0xFFFFFFFFLL;
          v122 = v580;
          do
          {
            v123 = *(_DWORD *)v122;
            if (v121 == 0xFFFFFFFFLL)
            {
              v121 = *(unsigned int *)v122;
            }
            else
            {
              v124 = *v120;
              v125 = *v120 + 24;
              v126 = *(unsigned int *)(*v120 + 16);
              v127 = v126 * v121;
              v128 = v125 + v126 * v121;
              v129 = (double)*(int *)(v128 + 8);
              v130 = v125 + v126 * (unint64_t)v123;
              v131 = (double)*(int *)(v130 + 8);
              v132 = v129 + v131;
              v133 = 1.0 / (v129 + v131);
              v134 = *(unsigned int *)(*(_QWORD *)(v4 + 72) + 104);
              if ((int)v134 >= 2)
              {
                v135 = v126 * (unint64_t)v123;
                v136 = v134 >> 1;
                v137 = (float *)(v124 + 64 + v135);
                v138 = (float *)(v124 + 64 + v127);
                do
                {
                  v139 = *v137++;
                  v140 = v133 * (v129 * *v138 + v131 * v139);
                  *v138++ = v140;
                  --v136;
                }
                while (v136);
              }
              v141 = v133 * (v131 * *(float *)(v130 + 12) + *(float *)(v128 + 12) * v129);
              *(float *)(v128 + 12) = v141;
              *(_DWORD *)(v128 + 8) = (int)v132;
              *(_DWORD *)(v125 + *(unsigned int *)(v124 + 16) * (unint64_t)v123 + 8) = 0;
            }
            v122 += 4;
          }
          while (v122 != v118);
        }
        if (v117)
          operator delete(v117);
        v115 += 24;
      }
      while (v115 != v116);
    }
    v142 = v566;
    v580 = (char *)v565;
    v581 = (char *)v566;
    if (v566)
    {
      v143 = (unint64_t *)&v566->__shared_owners_;
      do
        v144 = __ldxr(v143);
      while (__stxr(v144 + 1, v143));
    }
    v541 = v142;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 16))(*(_QWORD *)(v4 + 40)))
    {
      v145 = (unsigned int *)__p[0];
      if (__p[0] == __p[1])
      {
        v3 = 0;
        v148 = 0;
      }
      else
      {
        v146 = 0;
        v147 = 0;
        v148 = 0;
        do
        {
          if (!*((_QWORD *)&v568 + 1))
          {
            v529 = __cxa_allocate_exception(8uLL);
            *v529 = 5246;
            __cxa_throw(v529, MEMORY[0x1E0DE4F28], 0);
          }
          v149 = *v145;
          v150 = *(unsigned int *)(**((_QWORD **)&v568 + 1)
                                 + *(unsigned int *)(**((_QWORD **)&v568 + 1) + 16)
                                 * (unint64_t)v149
                                 + 32);
          if ((unint64_t)v147 >= v146)
          {
            v151 = ((char *)v147 - (char *)v148) >> 3;
            v152 = v151 + 1;
            if ((unint64_t)(v151 + 1) >> 61)
              std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v146 - (_QWORD)v148) >> 2 > v152)
              v152 = (uint64_t)(v146 - (_QWORD)v148) >> 2;
            if (v146 - (unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
              v153 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v153 = v152;
            if (v153)
              v153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v153);
            else
              v154 = 0;
            v155 = (int *)(v153 + 8 * v151);
            *(_QWORD *)v155 = v149 | (v150 << 32);
            v3 = (uint64_t)(v155 + 2);
            if (v147 != v148)
            {
              do
              {
                v156 = *((_QWORD *)v147 - 1);
                v147 -= 2;
                *((_QWORD *)v155 - 1) = v156;
                v155 -= 2;
              }
              while (v147 != v148);
              v147 = v148;
            }
            v148 = v155;
            v146 = v153 + 8 * v154;
            if (v147)
              operator delete(v147);
          }
          else
          {
            *(_QWORD *)v147 = v149 | (v150 << 32);
            v3 = (uint64_t)(v147 + 2);
          }
          ++v145;
          v147 = (int *)v3;
        }
        while (v145 != __p[1]);
      }
      v157 = 126 - 2 * __clz((v3 - (uint64_t)v148) >> 3);
      if ((int *)v3 == v148)
        v158 = 0;
      else
        v158 = v157;
      std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*,false>(v148, (int *)v3, v158, 1);
      v159 = (char *)__p[0];
      __p[1] = __p[0];
      if ((int *)v3 != v148)
      {
        v160 = v148;
        do
        {
          if ((unint64_t)v159 >= (unint64_t)v568)
          {
            v161 = (char *)__p[0];
            v162 = (v159 - (char *)__p[0]) >> 2;
            v163 = v162 + 1;
            if ((unint64_t)(v162 + 1) >> 62)
              std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
            v164 = v568 - (unint64_t)__p[0];
            if ((uint64_t)(v568 - (unint64_t)__p[0]) >> 1 > v163)
              v163 = v164 >> 1;
            if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL)
              v165 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v165 = v163;
            if (v165)
            {
              v165 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v165);
              v161 = (char *)__p[0];
              v159 = (char *)__p[1];
            }
            else
            {
              v166 = 0;
            }
            v167 = (int *)(v165 + 4 * v162);
            *v167 = *v160;
            v168 = v167 + 1;
            while (v159 != v161)
            {
              v169 = *((_DWORD *)v159 - 1);
              v159 -= 4;
              *--v167 = v169;
            }
            __p[0] = v167;
            __p[1] = v168;
            *(_QWORD *)&v568 = v165 + 4 * v166;
            if (v161)
              operator delete(v161);
            v159 = (char *)v168;
          }
          else
          {
            *(_DWORD *)v159 = *v160;
            v159 += 4;
          }
          __p[1] = v159;
          v160 += 2;
        }
        while (v160 != (int *)v3);
        v3 = (uint64_t)v148;
      }
      if (v3)
      {
        operator delete((void *)v3);
        v159 = (char *)__p[1];
      }
      v170 = (char *)__p[0];
      if (v159 != __p[0])
      {
        v171 = 0;
        v172 = *(_DWORD *)(*(_QWORD *)(v544 + 72) + 104);
        if (v172 >= 0)
          v173 = *(_DWORD *)(*(_QWORD *)(v544 + 72) + 104);
        else
          v173 = v172 + 1;
        v546 = (v173 >> 1);
        v174 = v172 + 3;
        v551 = *(_DWORD *)(*(_QWORD *)(v544 + 72) + 104);
        if (v172 >= 0)
          v174 = *(_DWORD *)(*(_QWORD *)(v544 + 72) + 104);
        v175 = (uint64_t)v174 >> 2;
        v176 = 1;
        while (1)
        {
          v177 = *(_DWORD *)&v170[4 * v171];
          v178 = **((_QWORD **)&v568 + 1) + *(unsigned int *)(**((_QWORD **)&v568 + 1) + 16) * (unint64_t)v177;
          v179 = *(_DWORD *)(v178 + 32);
          v180 = *(_DWORD *)(v178 + 40);
          v181 = v171 + 1;
          v182 = (v159 - v170) >> 2;
          v183 = v179 < 31 || v180 == 0;
          if (!v183 && v182 > v181)
            break;
LABEL_296:
          if (v171 <= 2)
          {
            ++v176;
            ++v171;
            if (v182 > v181)
              continue;
          }
          goto LABEL_298;
        }
        v185 = v176;
        while (2)
        {
          v186 = *(_DWORD *)&v170[4 * v185];
          if (*((_QWORD *)&v568 + 1))
          {
            v187 = *(_DWORD *)(**((_QWORD **)&v568 + 1) + 16);
            v188 = **((_QWORD **)&v568 + 1) + 24 + v187 * (unint64_t)v186;
            v189 = *(_DWORD *)(v188 + 8);
            if (v189)
            {
              if (*(_DWORD *)(v188 + 16))
              {
                v190 = **((_QWORD **)&v568 + 1) + 24 + v187 * (unint64_t)v177;
                if ((float)((float)*(int *)(v190 + 8) * 0.1) >= (float)v189)
                {
                  v191 = sqrtf(*(float *)(v190 + 12) * *(float *)(v188 + 12));
                  v3 = v190 + 40;
LABEL_268:
                  v192 = v188 + 40;
                  LODWORD(__C) = 0;
                  v587 = 0;
                  vDSP_dotpr((const float *)v3, 1, (const float *)(v188 + 40), 1, (float *)&__C, v175);
                  vDSP_dotpr((const float *)(v3 + 4 * v175), 1, (const float *)(v192 + 4 * v175), 1, (float *)&v587, v175);
                  v193 = *(float *)&__C * -0.5 + 0.5;
                  if ((float)(v191 * 0.21) > v193)
                  {
                    v194 = **((_QWORD **)&v568 + 1);
                    v195 = **((_QWORD **)&v568 + 1) + 24;
                    v196 = *(_DWORD *)(**((_QWORD **)&v568 + 1) + 16);
                    v197 = v195 + v196 * (unint64_t)v177;
                    v198 = (double)*(int *)(v197 + 8);
                    v199 = v195 + v196 * (unint64_t)v186;
                    v200 = (double)*(int *)(v199 + 8);
                    v201 = v198 + v200;
                    v202 = 1.0 / (v198 + v200);
                    if (v551 >= 2)
                    {
                      v203 = v196 * (unint64_t)v177;
                      v204 = (float *)(v194 + 64 + v196 * (unint64_t)v186);
                      v205 = (float *)(v194 + 64 + v203);
                      v206 = (char *)v546;
                      do
                      {
                        v207 = *v204++;
                        v208 = v202 * (v198 * *v205 + v200 * v207);
                        *v205++ = v208;
                        --v206;
                      }
                      while (v206);
                    }
                    v209 = v202 * (v200 * *(float *)(v199 + 12) + *(float *)(v197 + 12) * v198);
                    *(float *)(v197 + 12) = v209;
                    *(_DWORD *)(v197 + 8) = (int)v201;
                    *(_DWORD *)(v195 + *(unsigned int *)(v194 + 16) * (unint64_t)v186 + 8) = 0;
                    v210 = *(_DWORD *)(v194 + 16);
                    v211 = *(_DWORD *)(v195 + v210 * (unint64_t)v186);
                    LODWORD(v195) = *(_DWORD *)(v195 + v210 * (unint64_t)v177);
                    if (v211 <= v195)
                      v212 = v195;
                    else
                      v212 = v211;
                    if (v211 >= v195)
                      v195 = v195;
                    else
                      v195 = v211;
                    v3 = (uint64_t)v580;
                    v213 = v195 | (v212 << 32);
                    v215 = *((_QWORD *)v580 + 1);
                    v214 = *((_QWORD *)v580 + 2);
                    if (v215 >= v214)
                    {
                      v217 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v215 - *(_QWORD *)v580) >> 2);
                      v218 = v217 + 1;
                      if (v217 + 1 > 0x1555555555555555)
                        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
                      v219 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v214 - *(_QWORD *)v580) >> 2);
                      if (2 * v219 > v218)
                        v218 = 2 * v219;
                      if (v219 >= 0xAAAAAAAAAAAAAAALL)
                        v220 = 0x1555555555555555;
                      else
                        v220 = v218;
                      if (v220)
                        v220 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(v220);
                      else
                        v221 = 0;
                      v222 = v220 + 12 * v217;
                      *(_QWORD *)v222 = v213;
                      *(_DWORD *)(v222 + 8) = -1082130432;
                      v224 = *(_DWORD **)v3;
                      v223 = *(_DWORD **)(v3 + 8);
                      v225 = v222;
                      if (v223 != *(_DWORD **)v3)
                      {
                        do
                        {
                          v226 = *(_QWORD *)(v223 - 3);
                          v223 -= 3;
                          v227 = v223[2];
                          *(_QWORD *)(v225 - 12) = v226;
                          v225 -= 12;
                          *(_DWORD *)(v225 + 8) = v227;
                        }
                        while (v223 != v224);
                        v223 = *(_DWORD **)v3;
                      }
                      v216 = v222 + 12;
                      *(_QWORD *)v3 = v225;
                      *(_QWORD *)(v3 + 8) = v222 + 12;
                      *(_QWORD *)(v3 + 16) = v220 + 12 * v221;
                      if (v223)
                        operator delete(v223);
                    }
                    else
                    {
                      *(_QWORD *)v215 = v213;
                      *(_DWORD *)(v215 + 8) = -1082130432;
                      v216 = v215 + 12;
                    }
                    *(_QWORD *)(v3 + 8) = v216;
                  }
                }
              }
            }
          }
          else if (MEMORY[8] && MEMORY[0x10] && (float)((float)MEMORY[8] * 0.1) >= (float)MEMORY[8])
          {
            v188 = 0;
            v191 = sqrtf(MEMORY[0xC] * MEMORY[0xC]);
            v3 = 40;
            goto LABEL_268;
          }
          ++v185;
          v170 = (char *)__p[0];
          v159 = (char *)__p[1];
          v182 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          if (v182 <= v185)
            goto LABEL_296;
          continue;
        }
      }
    }
LABEL_298:
    v4 = v544;
    v85 = v535;
    if (v541)
    {
      v228 = (unint64_t *)&v541->__shared_owners_;
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
        std::__shared_weak_count::__release_weak(v541);
      }
    }
    vision::mod::GreedyClustererWithTorso::private_t::clusters_t::~clusters_t((vision::mod::GreedyClustererWithTorso::private_t::clusters_t *)__p);
    __p[0] = &v588;
    std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*((_QWORD **)&v591 + 1));
  }
  if (v85)
  {
    v230 = (unint64_t *)&v85->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v563 = v554;
  v564 = v555;
  if (v555)
  {
    v232 = (unint64_t *)&v555->__shared_owners_;
    do
      v233 = __ldxr(v232);
    while (__stxr(v233 + 1, v232));
    __C = v554;
    v572 = v555;
    do
      v234 = __ldxr(v232);
    while (__stxr(v234 + 1, v232));
  }
  else
  {
    __C = v554;
    v572 = 0;
  }
  v235.i32[0] = 0;
  *(_OWORD *)__p = 0u;
  v568 = 0u;
  LODWORD(v569) = 1065353216;
  v236 = (_DWORD *)*v554;
  v237 = (_DWORD *)v554[1];
  if ((_DWORD *)*v554 != v237)
  {
    while (2)
    {
      v238 = v236[1];
      LODWORD(v591) = *v236;
      v239 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)__p, v591, &v591);
      v240 = v239;
      v241 = v239[4];
      if (v241)
      {
        v235 = (uint8x8_t)vcnt_s8((int8x8_t)v241);
        v235.i16[0] = vaddlv_u8(v235);
        if (v235.u32[0] > 1uLL)
        {
          v3 = v238;
          if (v241 <= v238)
            v3 = v238 % v241;
        }
        else
        {
          v3 = ((_DWORD)v241 - 1) & v238;
        }
        v242 = *(uint64_t ***)(v239[3] + 8 * v3);
        if (v242)
        {
          for (j = *v242; j; j = (uint64_t *)*j)
          {
            v244 = j[1];
            if (v244 == v238)
            {
              if (*((_DWORD *)j + 4) == (_DWORD)v238)
                goto LABEL_389;
            }
            else
            {
              if (v235.u32[0] > 1uLL)
              {
                if (v244 >= v241)
                  v244 %= v241;
              }
              else
              {
                v244 &= v241 - 1;
              }
              if (v244 != v3)
                break;
            }
          }
        }
      }
      v245 = operator new(0x18uLL);
      *v245 = 0;
      v245[1] = v238;
      *((_DWORD *)v245 + 4) = v238;
      *(float *)v235.i32 = (float)(unint64_t)(v240[6] + 1);
      v246 = *((float *)v240 + 14);
      if (!v241 || (float)(v246 * (float)v241) < *(float *)v235.i32)
      {
        v247 = (v241 & (v241 - 1)) != 0;
        if (v241 < 3)
          v247 = 1;
        v248 = v247 | (2 * v241);
        *(float *)v235.i32 = *(float *)v235.i32 / v246;
        v249 = vcvtps_u32_f32(*(float *)v235.i32);
        if (v248 <= v249)
          prime = (int8x8_t)v249;
        else
          prime = (int8x8_t)v248;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v241 = v240[4];
        if (*(_QWORD *)&prime <= v241)
        {
          if (*(_QWORD *)&prime < v241)
          {
            v256 = vcvtps_u32_f32((float)(unint64_t)v240[6] / *((float *)v240 + 14));
            if (v241 < 3
              || (v235 = (uint8x8_t)vcnt_s8((int8x8_t)v241), v235.i16[0] = vaddlv_u8(v235), v235.u32[0] > 1uLL))
            {
              v256 = std::__next_prime(v256);
            }
            else
            {
              v257 = 1 << -(char)__clz(v256 - 1);
              if (v256 >= 2)
                v256 = v257;
            }
            if (*(_QWORD *)&prime <= v256)
              prime = (int8x8_t)v256;
            if (*(_QWORD *)&prime >= v241)
            {
              v241 = v240[4];
            }
            else
            {
              if (prime)
                goto LABEL_345;
              v264 = (void *)v240[3];
              v240[3] = 0;
              if (v264)
                operator delete(v264);
              v241 = 0;
              v240[4] = 0;
            }
          }
        }
        else
        {
LABEL_345:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v251 = operator new(8 * *(_QWORD *)&prime);
          v252 = (void *)v240[3];
          v240[3] = (uint64_t)v251;
          if (v252)
            operator delete(v252);
          v253 = 0;
          v240[4] = (uint64_t)prime;
          do
            *(_QWORD *)(v240[3] + 8 * v253++) = 0;
          while (*(_QWORD *)&prime != v253);
          v254 = (_QWORD *)v240[5];
          if (v254)
          {
            v255 = v254[1];
            v235 = (uint8x8_t)vcnt_s8(prime);
            v235.i16[0] = vaddlv_u8(v235);
            if (v235.u32[0] > 1uLL)
            {
              if (v255 >= *(_QWORD *)&prime)
                v255 %= *(_QWORD *)&prime;
            }
            else
            {
              v255 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(v240[3] + 8 * v255) = v240 + 5;
            v258 = (_QWORD *)*v254;
            if (*v254)
            {
              do
              {
                v259 = v258[1];
                if (v235.u32[0] > 1uLL)
                {
                  if (v259 >= *(_QWORD *)&prime)
                    v259 %= *(_QWORD *)&prime;
                }
                else
                {
                  v259 &= *(_QWORD *)&prime - 1;
                }
                if (v259 != v255)
                {
                  v260 = v240[3];
                  if (!*(_QWORD *)(v260 + 8 * v259))
                  {
                    *(_QWORD *)(v260 + 8 * v259) = v254;
                    goto LABEL_370;
                  }
                  *v254 = *v258;
                  *v258 = **(_QWORD **)(v240[3] + 8 * v259);
                  **(_QWORD **)(v240[3] + 8 * v259) = v258;
                  v258 = v254;
                }
                v259 = v255;
LABEL_370:
                v254 = v258;
                v258 = (_QWORD *)*v258;
                v255 = v259;
              }
              while (v258);
            }
          }
          v241 = (unint64_t)prime;
        }
        if ((v241 & (v241 - 1)) != 0)
        {
          if (v241 <= v238)
            v3 = v238 % v241;
          else
            v3 = v238;
        }
        else
        {
          v3 = ((_DWORD)v241 - 1) & v238;
        }
      }
      v261 = v240[3];
      v262 = *(_QWORD **)(v261 + 8 * v3);
      if (v262)
      {
        *v245 = *v262;
      }
      else
      {
        *v245 = v240[5];
        v240[5] = (uint64_t)v245;
        *(_QWORD *)(v261 + 8 * v3) = v240 + 5;
        if (!*v245)
        {
LABEL_388:
          ++v240[6];
LABEL_389:
          v236 += 3;
          if (v236 != v237)
            continue;
          goto LABEL_400;
        }
        v263 = *(_QWORD *)(*v245 + 8);
        if ((v241 & (v241 - 1)) != 0)
        {
          if (v263 >= v241)
            v263 %= v241;
        }
        else
        {
          v263 &= v241 - 1;
        }
        v262 = (_QWORD *)(v240[3] + 8 * v263);
      }
      break;
    }
    *v262 = v245;
    goto LABEL_388;
  }
LABEL_400:
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *,false>(0, 0, 0, 1, *(float *)v235.i32);
  v265 = v554[1];
  v266 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v265 - *v554) >> 2));
  if (v265 == *v554)
    v267 = 0;
  else
    v267 = v266;
  std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*,false>(*v554, v265, v267, 1);
  v268 = (std::__shared_weak_count *)operator new(0x30uLL);
  v268->__shared_owners_ = 0;
  v268->__shared_weak_owners_ = 0;
  v268->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BBF8;
  v268[1].__vftable = 0;
  v269 = (char *)&v268[1];
  v268[1].__shared_owners_ = 0;
  v268[1].__shared_weak_owners_ = 0;
  v594 = (unint64_t *)&v268[1];
  v595 = v268;
  v591 = 0u;
  v592 = 0u;
  v593 = 1065353216;
  v588 = 0u;
  v589 = 0u;
  v590 = 1065353216;
  v587 = 0;
  srand(0x7C0u);
  v270 = *v554;
  v552 = v554[1];
  if (*v554 != v552)
  {
    while (1)
    {
      v271 = *(_DWORD *)(v270 + 4);
      v273 = *(float *)(v270 + 8);
      v586 = *(_DWORD *)v270;
      v272 = v586;
      v585 = v271;
      v274 = v588;
      v275 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v588, *((unint64_t *)&v588 + 1), v586);
      v276 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v274, *((unint64_t *)&v274 + 1), v271);
      if (v275)
        v277 = *((_DWORD *)v275 + 5);
      else
        v277 = -1;
      if (v276)
        v278 = *((_DWORD *)v276 + 5);
      else
        v278 = -1;
      if (v277 == -1 && v278 == -1)
      {
        v279 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v587, &v587);
        v280 = v279;
        v282 = (unsigned int *)v279[4];
        v281 = v279[5];
        if ((unint64_t)v282 >= v281)
        {
          v308 = (unsigned int *)v279[3];
          v309 = v282 - v308;
          v310 = v309 + 1;
          if ((unint64_t)(v309 + 1) >> 62)
            goto LABEL_799;
          v311 = v281 - (_QWORD)v308;
          if (v311 >> 1 > v310)
            v310 = v311 >> 1;
          v464 = (unint64_t)v311 >= 0x7FFFFFFFFFFFFFFCLL;
          v312 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v464)
            v312 = v310;
          if (v312)
          {
            v312 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v312);
            v308 = (unsigned int *)v280[3];
            v282 = (unsigned int *)v280[4];
          }
          else
          {
            v313 = 0;
          }
          v330 = (unsigned int *)(v312 + 4 * v309);
          *v330 = v272;
          v283 = v330 + 1;
          while (v282 != v308)
          {
            v331 = *--v282;
            *--v330 = v331;
          }
          v280[3] = v330;
          v280[4] = v283;
          v280[5] = v312 + 4 * v313;
          if (v308)
            operator delete(v308);
        }
        else
        {
          *v282 = v272;
          v283 = v282 + 1;
        }
        v280[4] = v283;
        v332 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v587, &v587);
        v333 = v332;
        v335 = (char *)v332[4];
        v334 = v332[5];
        if ((unint64_t)v335 >= v334)
        {
          v337 = (char *)v332[3];
          v338 = (v335 - v337) >> 2;
          v339 = v338 + 1;
          if ((unint64_t)(v338 + 1) >> 62)
LABEL_799:
            std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
          v340 = v334 - (_QWORD)v337;
          if (v340 >> 1 > v339)
            v339 = v340 >> 1;
          v464 = (unint64_t)v340 >= 0x7FFFFFFFFFFFFFFCLL;
          v341 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v464)
            v341 = v339;
          if (v341)
          {
            v341 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v341);
            v337 = (char *)v333[3];
            v335 = (char *)v333[4];
          }
          else
          {
            v342 = 0;
          }
          v343 = (_DWORD *)(v341 + 4 * v338);
          *v343 = v585;
          v336 = v343 + 1;
          while (v335 != v337)
          {
            v344 = *((_DWORD *)v335 - 1);
            v335 -= 4;
            *--v343 = v344;
          }
          v333[3] = v343;
          v333[4] = v336;
          v333[5] = v341 + 4 * v342;
          if (v337)
            operator delete(v337);
        }
        else
        {
          *(_DWORD *)v335 = v585;
          v336 = v335 + 4;
        }
        v333[4] = v336;
        v345 = v587;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v588, v586, &v586)+ 5) = v345;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v588, v585, &v585)+ 5) = v345;
        v587 = v345 + 1;
        v346 = v594;
        v348 = v594[1];
        v347 = v594[2];
        if (v348 >= v347)
        {
          v349 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - *v594) >> 2);
          v350 = v349 + 1;
          if (v349 + 1 > 0x1555555555555555)
            std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
          v351 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v347 - *v594) >> 2);
          if (2 * v351 > v350)
            v350 = 2 * v351;
          if (v351 >= 0xAAAAAAAAAAAAAAALL)
            v352 = 0x1555555555555555;
          else
            v352 = v350;
          if (v352)
            v352 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(v352);
          else
            v353 = 0;
          v354 = v352 + 12 * v349;
          *(_DWORD *)v354 = v272;
          *(_DWORD *)(v354 + 4) = v271;
          *(float *)(v354 + 8) = v273;
          v356 = (_DWORD *)*v346;
          v355 = (_DWORD *)v346[1];
          v357 = v354;
          if (v355 != (_DWORD *)*v346)
          {
            do
            {
              v358 = *(_QWORD *)(v355 - 3);
              v355 -= 3;
              v359 = v355[2];
              *(_QWORD *)(v357 - 12) = v358;
              v357 -= 12;
              *(_DWORD *)(v357 + 8) = v359;
            }
            while (v355 != v356);
            goto LABEL_622;
          }
          goto LABEL_623;
        }
LABEL_522:
        *(_DWORD *)v348 = v272;
        *(_DWORD *)(v348 + 4) = v271;
        goto LABEL_523;
      }
      if (v277 == -1)
        break;
      if (v278 == -1)
      {
        LODWORD(v580) = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v588, v272, &v586)+ 5);
        v319 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v580, &v580);
        v320 = v319;
        v322 = (unsigned int *)v319[4];
        v321 = v319[5];
        if ((unint64_t)v322 >= v321)
        {
          v360 = (unsigned int *)v319[3];
          v361 = v322 - v360;
          v362 = v361 + 1;
          if ((unint64_t)(v361 + 1) >> 62)
            std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
          v363 = v321 - (_QWORD)v360;
          if (v363 >> 1 > v362)
            v362 = v363 >> 1;
          v464 = (unint64_t)v363 >= 0x7FFFFFFFFFFFFFFCLL;
          v364 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v464)
            v364 = v362;
          if (v364)
          {
            v364 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v364);
            v360 = (unsigned int *)v320[3];
            v322 = (unsigned int *)v320[4];
          }
          else
          {
            v365 = 0;
          }
          v384 = (unsigned int *)(v364 + 4 * v361);
          *v384 = v271;
          v323 = v384 + 1;
          while (v322 != v360)
          {
            v385 = *--v322;
            *--v384 = v385;
          }
          v320[3] = v384;
          v320[4] = v323;
          v320[5] = v364 + 4 * v365;
          if (v360)
            operator delete(v360);
        }
        else
        {
          *v322 = v271;
          v323 = v322 + 1;
        }
        v320[4] = v323;
        v386 = (int)v580;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v588, v585, &v585)+ 5) = v386;
        v346 = v594;
        v348 = v594[1];
        v387 = v594[2];
        if (v348 < v387)
          goto LABEL_522;
        v389 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - *v594) >> 2);
        v390 = v389 + 1;
        if (v389 + 1 > 0x1555555555555555)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v391 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v387 - *v594) >> 2);
        if (2 * v391 > v390)
          v390 = 2 * v391;
        if (v391 >= 0xAAAAAAAAAAAAAAALL)
          v352 = 0x1555555555555555;
        else
          v352 = v390;
        if (v352)
          v352 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(v352);
        else
          v353 = 0;
        v354 = v352 + 12 * v389;
        *(_DWORD *)v354 = v272;
        *(_DWORD *)(v354 + 4) = v271;
        *(float *)(v354 + 8) = v273;
        v392 = (_DWORD *)*v346;
        v355 = (_DWORD *)v346[1];
        v357 = v354;
        if (v355 == (_DWORD *)*v346)
          goto LABEL_623;
        do
        {
          v393 = *(_QWORD *)(v355 - 3);
          v355 -= 3;
          v394 = v355[2];
          *(_QWORD *)(v357 - 12) = v393;
          v357 -= 12;
          *(_DWORD *)(v357 + 8) = v394;
        }
        while (v355 != v392);
LABEL_622:
        v355 = (_DWORD *)*v346;
        goto LABEL_623;
      }
      v540 = v271;
      v284 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v588, v272, &v586)+ 5);
      v584 = v284;
      v285 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v588, v271, &v585)+ 5);
      v583 = v285;
      if (v284 != v285)
      {
        v286 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v284, &v584);
        v288 = v286[3];
        v287 = v286[4];
        v289 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v285, &v583);
        if (v273 > 0.0)
        {
          v537 = v285;
          v291 = v289[3];
          v290 = v289[4];
          v292 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v284, &v584);
          v580 = 0;
          v581 = 0;
          v582 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v580, (const void *)v292[3], v292[4], (uint64_t)(v292[4] - v292[3]) >> 2);
          v293 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v537, &v583);
          v577 = 0;
          v578 = 0;
          v579 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v577, (const void *)v293[3], v293[4], (uint64_t)(v293[4] - v293[3]) >> 2);
          v294 = (unint64_t)((double)(unint64_t)((v287 - v288) >> 2)
                                  * 0.25
                                  * (double)(unint64_t)((v290 - v291) >> 2));
          if (v294 >= 0x32)
          {
            v295 = 0;
            v542 = v580;
            v296 = (v581 - v580) >> 2;
            v547 = (uint64_t *)v577;
            v297 = (v578 - v577) >> 2;
            v298 = 50;
            while (1)
            {
              v299 = rand();
              v300 = rand();
              v301 = (v299 % v296);
              if (v296 <= v301)
                std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
              v302 = (v300 % v297);
              v303 = *(_DWORD *)&v542[4 * v301];
              v576 = v303;
              if (v297 <= v302)
                std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
              v575 = *((_DWORD *)v547 + v302);
              v304 = v575;
              v305 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)__p, v303, &v576);
              if (std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>>>::find<vision::mod::ImageAnalyzer_AnalysisType>(v305 + 3, v304)|| (v306 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)__p, v304, &v575), std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>>>::find<vision::mod::ImageAnalyzer_AnalysisType>(v306 + 3, v303)))
              {
                if ((unint64_t)++v295 > 0xB)
                  break;
              }
              if (!--v298)
              {
                v307 = 1;
                v4 = v544;
                goto LABEL_538;
              }
            }
            v307 = 0;
            v376 = (unsigned int *)v542;
            v4 = v544;
            v285 = v537;
            v395 = v547;
            goto LABEL_542;
          }
          v376 = (unsigned int *)v580;
          v547 = (uint64_t *)v577;
          v533 = v581;
          if (v580 == v581)
          {
            v307 = 1;
          }
          else
          {
            v377 = 0;
            v378 = v578;
            v542 = v580;
            while (2)
            {
              v379 = *v376;
              v576 = *v376;
              for (k = v547; k != (uint64_t *)v378; k = (uint64_t *)((char *)k + 4))
              {
                v575 = *(_DWORD *)k;
                v381 = v575;
                v382 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)__p, v379, &v576);
                if (!std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>>>::find<vision::mod::ImageAnalyzer_AnalysisType>(v382 + 3, v381))
                {
                  v383 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)__p, v381, &v575);
                  if (!std::__hash_table<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::__unordered_map_hasher<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::__unordered_map_equal<vision::mod::ImageAnalyzer_AnalysisType,std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>,std::equal_to<vision::mod::ImageAnalyzer_AnalysisType>,std::hash<vision::mod::ImageAnalyzer_AnalysisType>,true>,std::allocator<std::__hash_value_type<vision::mod::ImageAnalyzer_AnalysisType,std::vector<std::string>>>>::find<vision::mod::ImageAnalyzer_AnalysisType>(v383 + 3, v379))continue;
                }
                if (++v377 >= v294)
                {
                  v307 = 0;
                  goto LABEL_537;
                }
              }
              if (++v376 != (unsigned int *)v533)
                continue;
              break;
            }
            v307 = 1;
LABEL_537:
            v4 = v544;
LABEL_538:
            v376 = (unsigned int *)v542;
          }
          v285 = v537;
          v395 = v547;
          if (v547)
LABEL_542:
            operator delete(v395);
          if (v376)
            operator delete(v376);
          if ((v307 & 1) != 0)
            goto LABEL_626;
        }
        v396 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v285, &v583);
        v397 = (int *)v396[3];
        v398 = (int *)v396[4];
        if (v397 != v398)
        {
          do
          {
            v399 = *v397;
            LODWORD(v580) = *v397;
            v400 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v284, &v584);
            v401 = v400;
            v403 = (char *)v400[4];
            v402 = v400[5];
            if ((unint64_t)v403 >= v402)
            {
              v405 = (char *)v400[3];
              v406 = (v403 - v405) >> 2;
              v407 = v406 + 1;
              if ((unint64_t)(v406 + 1) >> 62)
                std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
              v408 = v402 - (_QWORD)v405;
              if (v408 >> 1 > v407)
                v407 = v408 >> 1;
              v464 = (unint64_t)v408 >= 0x7FFFFFFFFFFFFFFCLL;
              v409 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v464)
                v409 = v407;
              if (v409)
              {
                v409 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v409);
                v405 = (char *)v401[3];
                v403 = (char *)v401[4];
              }
              else
              {
                v410 = 0;
              }
              v411 = (_DWORD *)(v409 + 4 * v406);
              *v411 = v399;
              v404 = v411 + 1;
              while (v403 != v405)
              {
                v412 = *((_DWORD *)v403 - 1);
                v403 -= 4;
                *--v411 = v412;
              }
              v401[3] = v411;
              v401[4] = v404;
              v401[5] = v409 + 4 * v410;
              if (v405)
                operator delete(v405);
            }
            else
            {
              *(_DWORD *)v403 = v399;
              v404 = v403 + 4;
            }
            v401[4] = v404;
            v284 = v584;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v588, v580, &v580)+ 5) = v284;
            ++v397;
          }
          while (v397 != v398);
          v285 = v583;
        }
        v413 = *((_QWORD *)&v591 + 1);
        if (*((_QWORD *)&v591 + 1))
        {
          v414 = v285;
          v415 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v591 + 8));
          v415.i16[0] = vaddlv_u8(v415);
          if (v415.u32[0] > 1uLL)
          {
            v416 = v285;
            if (*((_QWORD *)&v591 + 1) <= (unint64_t)v285)
              v416 = (unint64_t)v285 % *((_QWORD *)&v591 + 1);
          }
          else
          {
            v416 = (DWORD2(v591) - 1) & v285;
          }
          v417 = *(__int128 ***)(v591 + 8 * v416);
          if (v417)
          {
            v418 = *v417;
            if (*v417)
            {
              v419 = *((_QWORD *)&v591 + 1) - 1;
              do
              {
                v420 = *((_QWORD *)v418 + 1);
                if (v420 == v285)
                {
                  if (*((_DWORD *)v418 + 4) == v285)
                  {
                    if (v415.u32[0] > 1uLL)
                    {
                      if (*((_QWORD *)&v591 + 1) <= (unint64_t)v285)
                        v414 = (unint64_t)v285 % *((_QWORD *)&v591 + 1);
                    }
                    else
                    {
                      v414 = v419 & v285;
                    }
                    v421 = *(__int128 **)(v591 + 8 * v414);
                    do
                    {
                      v422 = v421;
                      v421 = *(__int128 **)v421;
                    }
                    while (v421 != v418);
                    if (v422 == &v592)
                      goto LABEL_599;
                    v423 = *((_QWORD *)v422 + 1);
                    if (v415.u32[0] > 1uLL)
                    {
                      if (v423 >= *((_QWORD *)&v591 + 1))
                        v423 %= *((_QWORD *)&v591 + 1);
                    }
                    else
                    {
                      v423 &= v419;
                    }
                    if (v423 != v414)
                    {
LABEL_599:
                      if (!*(_QWORD *)v418)
                        goto LABEL_600;
                      v424 = *(_QWORD *)(*(_QWORD *)v418 + 8);
                      if (v415.u32[0] > 1uLL)
                      {
                        if (v424 >= *((_QWORD *)&v591 + 1))
                          v424 %= *((_QWORD *)&v591 + 1);
                      }
                      else
                      {
                        v424 &= v419;
                      }
                      if (v424 != v414)
LABEL_600:
                        *(_QWORD *)(v591 + 8 * v414) = 0;
                    }
                    v425 = *(_QWORD *)v418;
                    if (*(_QWORD *)v418)
                    {
                      v426 = *(_QWORD *)(v425 + 8);
                      if (v415.u32[0] > 1uLL)
                      {
                        if (v426 >= v413)
                          v426 %= v413;
                      }
                      else
                      {
                        v426 &= v419;
                      }
                      if (v426 != v414)
                      {
                        *(_QWORD *)(v591 + 8 * v426) = v422;
                        v425 = *(_QWORD *)v418;
                      }
                    }
                    *(_QWORD *)v422 = v425;
                    *(_QWORD *)v418 = 0;
                    --*((_QWORD *)&v592 + 1);
                    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,void *>>>::operator()[abi:ne180100](1, v418);
                    break;
                  }
                }
                else
                {
                  if (v415.u32[0] > 1uLL)
                  {
                    if (v420 >= *((_QWORD *)&v591 + 1))
                      v420 %= *((_QWORD *)&v591 + 1);
                  }
                  else
                  {
                    v420 &= v419;
                  }
                  if (v420 != v416)
                    break;
                }
                v418 = *(__int128 **)v418;
              }
              while (v418);
            }
          }
        }
        v346 = v594;
        v348 = v594[1];
        v427 = v594[2];
        if (v348 < v427)
        {
          *(_DWORD *)v348 = v272;
          *(_DWORD *)(v348 + 4) = v540;
LABEL_523:
          v388 = v348 + 12;
          *(float *)(v348 + 8) = v273;
LABEL_625:
          v346[1] = v388;
          goto LABEL_626;
        }
        v428 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - *v594) >> 2);
        v429 = v428 + 1;
        if (v428 + 1 > 0x1555555555555555)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v430 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v427 - *v594) >> 2);
        if (2 * v430 > v429)
          v429 = 2 * v430;
        if (v430 >= 0xAAAAAAAAAAAAAAALL)
          v352 = 0x1555555555555555;
        else
          v352 = v429;
        if (v352)
          v352 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(v352);
        else
          v353 = 0;
        v354 = v352 + 12 * v428;
        *(_DWORD *)v354 = v272;
        *(_DWORD *)(v354 + 4) = v540;
        *(float *)(v354 + 8) = v273;
        v431 = (_DWORD *)*v346;
        v355 = (_DWORD *)v346[1];
        v357 = v354;
        if (v355 != (_DWORD *)*v346)
        {
          do
          {
            v432 = *(_QWORD *)(v355 - 3);
            v355 -= 3;
            v433 = v355[2];
            *(_QWORD *)(v357 - 12) = v432;
            v357 -= 12;
            *(_DWORD *)(v357 + 8) = v433;
          }
          while (v355 != v431);
          goto LABEL_622;
        }
LABEL_623:
        v388 = v354 + 12;
        *v346 = v357;
        v346[1] = v354 + 12;
        v346[2] = v352 + 12 * v353;
        if (v355)
          operator delete(v355);
        goto LABEL_625;
      }
LABEL_626:
      v270 += 12;
      if (v270 == v552)
      {
        v269 = (char *)v594;
        v268 = v595;
        goto LABEL_628;
      }
    }
    LODWORD(v580) = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v588, v271, &v585)+ 5);
    v314 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)&v591, v580, &v580);
    v315 = v314;
    v317 = (unsigned int *)v314[4];
    v316 = v314[5];
    if ((unint64_t)v317 >= v316)
    {
      v324 = (unsigned int *)v314[3];
      v325 = v317 - v324;
      v326 = v325 + 1;
      if ((unint64_t)(v325 + 1) >> 62)
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      v327 = v316 - (_QWORD)v324;
      if (v327 >> 1 > v326)
        v326 = v327 >> 1;
      v464 = (unint64_t)v327 >= 0x7FFFFFFFFFFFFFFCLL;
      v328 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v464)
        v328 = v326;
      if (v328)
      {
        v328 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v328);
        v324 = (unsigned int *)v315[3];
        v317 = (unsigned int *)v315[4];
      }
      else
      {
        v329 = 0;
      }
      v366 = (unsigned int *)(v328 + 4 * v325);
      *v366 = v272;
      v318 = v366 + 1;
      while (v317 != v324)
      {
        v367 = *--v317;
        *--v366 = v367;
      }
      v315[3] = v366;
      v315[4] = v318;
      v315[5] = v328 + 4 * v329;
      if (v324)
        operator delete(v324);
    }
    else
    {
      *v317 = v272;
      v318 = v317 + 1;
    }
    v315[4] = v318;
    v368 = (int)v580;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v588, v586, &v586)+ 5) = v368;
    v346 = v594;
    v348 = v594[1];
    v369 = v594[2];
    if (v348 < v369)
      goto LABEL_522;
    v370 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - *v594) >> 2);
    v371 = v370 + 1;
    if (v370 + 1 > 0x1555555555555555)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v372 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v369 - *v594) >> 2);
    if (2 * v372 > v371)
      v371 = 2 * v372;
    if (v372 >= 0xAAAAAAAAAAAAAAALL)
      v352 = 0x1555555555555555;
    else
      v352 = v371;
    if (v352)
      v352 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(v352);
    else
      v353 = 0;
    v354 = v352 + 12 * v370;
    *(_DWORD *)v354 = v272;
    *(_DWORD *)(v354 + 4) = v271;
    *(float *)(v354 + 8) = v273;
    v373 = (_DWORD *)*v346;
    v355 = (_DWORD *)v346[1];
    v357 = v354;
    if (v355 == (_DWORD *)*v346)
      goto LABEL_623;
    do
    {
      v374 = *(_QWORD *)(v355 - 3);
      v355 -= 3;
      v375 = v355[2];
      *(_QWORD *)(v357 - 12) = v374;
      v357 -= 12;
      *(_DWORD *)(v357 + 8) = v375;
    }
    while (v355 != v373);
    goto LABEL_622;
  }
LABEL_628:
  if (*((_QWORD *)&v568 + 1))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__deallocate_node((_QWORD *)v568);
    *(_QWORD *)&v568 = 0;
    v434 = (char *)__p[1];
    if (__p[1])
    {
      v435 = 0;
      do
        *((_QWORD *)__p[0] + (_QWORD)v435++) = 0;
      while (v434 != v435);
    }
    *((_QWORD *)&v568 + 1) = 0;
  }
  if (*((_QWORD *)&v592 + 1))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__deallocate_node((_QWORD *)v592);
    *(_QWORD *)&v592 = 0;
    v436 = *((_QWORD *)&v591 + 1);
    if (*((_QWORD *)&v591 + 1))
    {
      v437 = 0;
      do
        *(_QWORD *)(v591 + 8 * v437++) = 0;
      while (v436 != v437);
    }
    *((_QWORD *)&v592 + 1) = 0;
  }
  if (*((_QWORD *)&v589 + 1))
  {
    v438 = (_QWORD *)v589;
    if ((_QWORD)v589)
    {
      do
      {
        v439 = (_QWORD *)*v438;
        operator delete(v438);
        v438 = v439;
      }
      while (v439);
    }
    *(_QWORD *)&v589 = 0;
    v440 = *((_QWORD *)&v588 + 1);
    if (*((_QWORD *)&v588 + 1))
    {
      v441 = 0;
      do
        *(_QWORD *)(v588 + 8 * v441++) = 0;
      while (v440 != v441);
    }
    *((_QWORD *)&v589 + 1) = 0;
  }
  v580 = v269;
  v581 = (char *)v268;
  if (v268)
  {
    v442 = (unint64_t *)&v268->__shared_owners_;
    do
      v443 = __ldxr(v442);
    while (__stxr(v443 + 1, v442));
  }
  vision::mod::GreedyClustererWithTorso::getConnectedComponentsWithoutFiltering((uint64_t *)&v573, v534, (_QWORD **)&v580);
  if (v268)
  {
    v444 = (unint64_t *)&v268->__shared_owners_;
    do
      v445 = __ldaxr(v444);
    while (__stlxr(v445 - 1, v444));
    if (!v445)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v588);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__deallocate_node((_QWORD *)v592);
  v446 = (void *)v591;
  *(_QWORD *)&v591 = 0;
  if (v446)
    operator delete(v446);
  v447 = v595;
  if (v595)
  {
    v448 = (unint64_t *)&v595->__shared_owners_;
    do
      v449 = __ldaxr(v448);
    while (__stlxr(v449 - 1, v448));
    if (!v449)
    {
      ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
      std::__shared_weak_count::__release_weak(v447);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__deallocate_node((_QWORD *)v568);
  v450 = __p[0];
  __p[0] = 0;
  if (v450)
    operator delete(v450);
  if (v555)
  {
    v451 = (unint64_t *)&v555->__shared_owners_;
    do
      v452 = __ldaxr(v451);
    while (__stlxr(v452 - 1, v451));
    if (!v452)
    {
      ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
      std::__shared_weak_count::__release_weak(v555);
    }
  }
  v556 = 0;
  v557 = 0;
  v558 = 0;
  v453 = (uint64_t *)v573;
  v543 = v574;
  if (v573 != (unsigned int **)v574)
  {
    v454 = (_QWORD *)(v4 + 104);
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v568 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, (const void *)*v453, v453[1], (v453[1] - *v453) >> 2);
      v455 = *(_QWORD *)(v4 + 72);
      if (*(_BYTE *)(v455 + 112))
      {
        *(_BYTE *)(v455 + 112) = 0;
        v528 = __cxa_allocate_exception(8uLL);
        *v528 = 5219;
        __cxa_throw(v528, MEMORY[0x1E0DE4F28], 0);
      }
      v591 = 0uLL;
      *(_QWORD *)&v592 = 0;
      v457 = (unsigned int *)__p[0];
      v456 = (unsigned int *)__p[1];
      if (__p[0] == __p[1])
      {
        v458 = 0;
      }
      else
      {
        v458 = 0;
        v459 = (unsigned int *)__p[0];
        do
        {
          if (*v454)
          {
            v460 = *v459;
            v461 = v454;
            v462 = (_QWORD *)*v454;
            do
            {
              v463 = v462[4];
              v464 = v463 >= v460;
              if (v463 >= v460)
                v465 = v462;
              else
                v465 = v462 + 1;
              if (v464)
                v461 = v462;
              v462 = (_QWORD *)*v465;
            }
            while (*v465);
            if (v461 != v454 && v461[4] <= v460)
              v458 += v461[7];
          }
          ++v459;
        }
        while (v459 != __p[1]);
      }
      std::vector<long long>::reserve((void **)&v591, v458);
      v548 = v453;
      for (m = v456; v457 != v456; ++v457)
      {
        v466 = (_QWORD *)*v454;
        if (*v454)
        {
          v467 = *v457;
          v468 = v454;
          do
          {
            v469 = v466[4];
            v470 = v469 >= v467;
            if (v469 >= v467)
              v471 = v466;
            else
              v471 = v466 + 1;
            if (v470)
              v468 = v466;
            v466 = (_QWORD *)*v471;
          }
          while (*v471);
          if (v468 != v454 && v468[4] <= v467)
          {
            v472 = v468 + 5;
            v473 = (_QWORD *)v468[6];
            if (v473 != v468 + 5)
            {
              v475 = (char *)*((_QWORD *)&v591 + 1);
              v474 = v592;
              v476 = (char *)v591;
              do
              {
                v477 = v473[2];
                if ((unint64_t)v475 >= v474)
                {
                  v479 = (v475 - v476) >> 3;
                  v480 = v479 + 1;
                  if ((unint64_t)(v479 + 1) >> 61)
                  {
                    *(_QWORD *)&v592 = v474;
                    *(_QWORD *)&v591 = v476;
                    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v474 - (_QWORD)v476) >> 2 > v480)
                    v480 = (uint64_t)(v474 - (_QWORD)v476) >> 2;
                  if (v474 - (unint64_t)v476 >= 0x7FFFFFFFFFFFFFF8)
                    v481 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v481 = v480;
                  if (v481)
                    v481 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v481);
                  else
                    v482 = 0;
                  v483 = (char *)(v481 + 8 * v479);
                  *(_QWORD *)v483 = v477;
                  v478 = v483 + 8;
                  while (v475 != v476)
                  {
                    v484 = *((_QWORD *)v475 - 1);
                    v475 -= 8;
                    *((_QWORD *)v483 - 1) = v484;
                    v483 -= 8;
                  }
                  v474 = v481 + 8 * v482;
                  *((_QWORD *)&v591 + 1) = v478;
                  if (v476)
                    operator delete(v476);
                  v476 = v483;
                }
                else
                {
                  *(_QWORD *)v475 = v477;
                  v478 = v475 + 8;
                }
                *((_QWORD *)&v591 + 1) = v478;
                v473 = (_QWORD *)v473[1];
                v475 = v478;
              }
              while (v473 != v472);
              *(_QWORD *)&v592 = v474;
              *(_QWORD *)&v591 = v476;
              v456 = m;
            }
          }
        }
      }
      v485 = v557;
      if ((unint64_t)v557 >= v558)
      {
        v488 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>((uint64_t *)&v556, (uint64_t)&v591);
        v4 = v544;
        v487 = v548;
        v486 = (void *)v591;
      }
      else
      {
        *v557 = 0;
        v485[1] = 0;
        v485[2] = 0;
        v486 = (void *)v591;
        std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v485, (const void *)v591, *((uint64_t *)&v591 + 1), (uint64_t)(*((_QWORD *)&v591 + 1) - v591) >> 3);
        v4 = v544;
        v487 = v548;
        v488 = (uint64_t)(v485 + 3);
      }
      v557 = (_QWORD *)v488;
      if (v486)
        operator delete(v486);
      if (__p[0])
        operator delete(__p[0]);
      v453 = v487 + 3;
    }
    while (v453 != v543);
  }
  __p[0] = &v573;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v555)
  {
    v490 = (unint64_t *)&v555->__shared_owners_;
    do
      v491 = __ldaxr(v490);
    while (__stlxr(v491 - 1, v490));
    if (!v491)
    {
      ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
      std::__shared_weak_count::__release_weak(v555);
    }
  }
  if (v535)
  {
    v492 = (unint64_t *)&v535->__shared_owners_;
    do
      v493 = __ldaxr(v492);
    while (__stlxr(v493 - 1, v492));
    if (!v493)
    {
      ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
      std::__shared_weak_count::__release_weak(v535);
    }
  }
  v494 = (float *)v561[1];
  v495 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v494 - *v561) >> 2));
  if (v494 == (float *)*v561)
    v496 = 0;
  else
    v496 = v495;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *,false>(*v561, v494, v496, 1, v489);
  __p[1] = 0;
  *(_QWORD *)&v568 = 0;
  __p[0] = &__p[1];
  v497 = v556;
  v498 = v557;
  while (v497 != v498)
  {
    v499 = (uint64_t *)*v497;
    v500 = (uint64_t *)v497[1];
    if (v500 != (uint64_t *)*v497)
    {
      v501 = *v499;
      v502 = (uint64_t *)*v497;
      do
      {
        v504 = *v502++;
        v503 = v504;
        if (v504 < v501)
          v501 = v503;
      }
      while (v502 != v500);
      do
      {
        std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)__p, *v499, v499)[5] = v501;
        ++v499;
      }
      while (v499 != v500);
    }
    v497 += 3;
  }
  v505 = *(_QWORD *)(v4 + 72);
  if (*(_BYTE *)(v505 + 112))
  {
    *(_BYTE *)(v505 + 112) = 0;
    v530 = __cxa_allocate_exception(8uLL);
    *v530 = 5219;
    __cxa_throw(v530, MEMORY[0x1E0DE4F28], 0);
  }
  v506 = (void **)__p[0];
  if (__p[0] != &__p[1])
  {
    do
    {
      v507 = v506[4];
      v508 = v549;
      while (1)
      {
        v508 = (_QWORD *)*v508;
        if (!v508)
          break;
        v509 = v508[4];
        if ((uint64_t)v507 >= v509)
        {
          if (v509 >= (uint64_t)v507)
          {
            if ((void *)std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v538, (uint64_t)v506[4], (uint64_t *)v506 + 4)[5] == v506[5])goto LABEL_779;
            v507 = v506[4];
            break;
          }
          ++v508;
        }
      }
      v510 = v506[5];
      v512 = (_QWORD *)a2[1];
      v511 = a2[2];
      if ((unint64_t)v512 >= v511)
      {
        v515 = (_QWORD *)*a2;
        v516 = ((uint64_t)v512 - *a2) >> 4;
        v517 = v516 + 1;
        if ((unint64_t)(v516 + 1) >> 60)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v518 = v511 - (_QWORD)v515;
        if (v518 >> 3 > v517)
          v517 = v518 >> 3;
        if ((unint64_t)v518 >= 0x7FFFFFFFFFFFFFF0)
          v519 = 0xFFFFFFFFFFFFFFFLL;
        else
          v519 = v517;
        if (v519)
        {
          v519 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(v519);
          v515 = (_QWORD *)*a2;
          v512 = (_QWORD *)a2[1];
        }
        else
        {
          v520 = 0;
        }
        v521 = (_QWORD *)(v519 + 16 * v516);
        *v521 = v507;
        v521[1] = v510;
        v522 = v521;
        if (v512 == v515)
        {
          v514 = a2;
        }
        else
        {
          v514 = a2;
          do
          {
            *((_OWORD *)v522 - 1) = *((_OWORD *)v512 - 1);
            v522 -= 2;
            v512 -= 2;
          }
          while (v512 != v515);
          v515 = (_QWORD *)*a2;
        }
        v513 = v521 + 2;
        *v514 = v522;
        v514[1] = v521 + 2;
        v514[2] = v519 + 16 * v520;
        if (v515)
          operator delete(v515);
      }
      else
      {
        *v512 = v507;
        v512[1] = v510;
        v513 = v512 + 2;
        v514 = a2;
      }
      v514[1] = v513;
LABEL_779:
      v523 = (void **)v506[1];
      if (v523)
      {
        do
        {
          v524 = v523;
          v523 = (void **)*v523;
        }
        while (v523);
      }
      else
      {
        do
        {
          v524 = (void **)v506[2];
          v119 = *v524 == v506;
          v506 = v524;
        }
        while (!v119);
      }
      v506 = v524;
    }
    while (v524 != &__p[1]);
  }
  *(_BYTE *)(v4 + 88) = 0;
  if (v538 != (uint64_t **)__p)
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>((uint64_t)v538, (_QWORD *)__p[0], &__p[1]);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((_QWORD *)__p[1]);
  __p[0] = &v556;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v525 = v562;
  if (v562)
  {
    v526 = (unint64_t *)&v562->__shared_owners_;
    do
      v527 = __ldaxr(v526);
    while (__stlxr(v527 - 1, v526));
    if (!v527)
    {
      ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
      std::__shared_weak_count::__release_weak(v525);
    }
  }
}

void sub_1A144C45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v54 - 256);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::~__hash_table(v54 - 208);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v54 - 160);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table((uint64_t)&a37);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a44);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a33);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a24);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

float std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *,false>(uint64_t a1, float *a2, uint64_t a3, char a4, float result)
{
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  uint64_t v21;
  float *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned __int8 v26;
  unsigned int v27;
  BOOL v28;
  float v29;
  float *v30;
  float *v31;
  unsigned int v32;
  BOOL v33;
  unsigned __int8 v34;
  unsigned int v35;
  BOOL v36;
  float v37;
  float *v38;
  unsigned int v39;
  BOOL v40;
  unsigned __int8 v41;
  unsigned int v42;
  BOOL v43;
  float v44;
  float v45;
  float *v46;
  int v47;
  int v48;
  float *v49;
  unsigned int v50;
  BOOL v51;
  unsigned __int8 v52;
  unsigned int v53;
  BOOL v54;
  float v55;
  float *v56;
  unsigned __int8 v57;
  unsigned int v58;
  BOOL v59;
  float v60;
  char v61;
  BOOL v62;
  unsigned int v63;
  unsigned int v64;
  unsigned __int8 v65;
  unsigned int v66;
  BOOL v67;
  float v68;
  float *v69;
  unsigned int v70;
  BOOL v71;
  unsigned __int8 v72;
  unsigned int v73;
  BOOL v74;
  float v75;
  unint64_t v76;
  unsigned __int8 v77;
  unsigned int v78;
  BOOL v79;
  float v80;
  float *v81;
  float *v82;
  unsigned int v83;
  BOOL v84;
  unsigned __int8 v85;
  unsigned int v86;
  BOOL v87;
  float v88;
  float v89;
  unsigned int v90;
  int v91;
  int v92;
  float *v93;
  unsigned __int8 v94;
  unsigned int v95;
  BOOL v96;
  float v97;
  float *v98;
  unsigned int v99;
  BOOL v100;
  unsigned __int8 v101;
  unsigned int v102;
  BOOL v103;
  float v104;
  unsigned __int8 v105;
  unsigned int v106;
  int v107;
  float *v108;
  BOOL v110;
  uint64_t v111;
  _DWORD *v112;
  uint64_t v113;
  unsigned __int8 v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  _DWORD *v119;
  int v120;
  unsigned __int8 v121;
  unsigned int v122;
  BOOL v123;
  float v124;
  uint64_t v125;
  int64_t v126;
  int64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 v130;
  uint64_t v131;
  unsigned __int8 v132;
  unsigned int v133;
  float v134;
  float v135;
  float *v136;
  uint64_t v137;
  unsigned __int8 v138;
  unsigned __int8 v139;
  unsigned int v140;
  BOOL v141;
  float v142;
  int64_t v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 v153;
  uint64_t v154;
  int64_t v155;
  unint64_t v156;
  uint64_t v157;
  unsigned __int8 v158;
  unsigned int v159;
  unsigned int v160;
  float v161;
  float *v162;
  unsigned __int8 v163;
  unsigned int v164;
  BOOL v165;
  float v166;
  BOOL v167;
  float *v168;
  uint64_t v169;
  unsigned __int8 v170;
  unsigned int v171;
  unsigned int v172;
  float *v173;
  unsigned int v174;
  float v175;
  unsigned __int8 v176;
  unsigned int v177;
  BOOL v178;
  float v179;
  unsigned int v180;
  int v181;
  int64_t v182;

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = *a3;
    v9[5] = 0;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

void std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t *i;
  uint64_t *v20;
  uint64_t **v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  _QWORD *v26;
  _QWORD *v27;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v20 = 0;
LABEL_29:
      std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(v20);
      goto LABEL_30;
    }
    v10 = std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
    if (a2 != a3)
    {
      v11 = v9;
      v12 = a2;
      do
      {
        v9 = v10;
        v13 = v12[4];
        v11[4] = v13;
        v11[5] = v12[5];
        v14 = *v8;
        v15 = (uint64_t **)(a1 + 8);
        v16 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              v15 = (uint64_t **)v14;
              if (v13 >= v14[4])
                break;
              v14 = (uint64_t *)*v14;
              v16 = v15;
              if (!*v15)
                goto LABEL_14;
            }
            v14 = (uint64_t *)v14[1];
          }
          while (v14);
          v16 = v15 + 1;
        }
LABEL_14:
        std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v16, v11);
        if (v10)
          v10 = std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::_DetachedTreeCache::__detach_next((uint64_t)v10);
        else
          v10 = 0;
        v17 = (_QWORD *)v12[1];
        if (v17)
        {
          do
          {
            a2 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            a2 = (_QWORD *)v12[2];
            v18 = *a2 == (_QWORD)v12;
            v12 = a2;
          }
          while (!v18);
        }
        if (!v9)
          break;
        v11 = v9;
        v12 = a2;
      }
      while (a2 != a3);
    }
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(v9);
    if (v10)
    {
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      v20 = v10;
      goto LABEL_29;
    }
  }
LABEL_30:
  if (a2 != a3)
  {
    v21 = (uint64_t **)(a1 + 8);
    do
    {
      v22 = operator new(0x30uLL);
      v22[2] = *((_OWORD *)a2 + 2);
      v23 = *v21;
      v24 = (uint64_t **)(a1 + 8);
      v25 = (uint64_t **)(a1 + 8);
      if (*v21)
      {
        do
        {
          while (1)
          {
            v24 = (uint64_t **)v23;
            if (*((_QWORD *)v22 + 4) >= v23[4])
              break;
            v23 = (uint64_t *)*v23;
            v25 = v24;
            if (!*v24)
              goto LABEL_38;
          }
          v23 = (uint64_t *)v23[1];
        }
        while (v23);
        v25 = v24 + 1;
      }
LABEL_38:
      std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v24, v25, (uint64_t *)v22);
      v26 = (_QWORD *)a2[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)a2[2];
          v18 = *v27 == (_QWORD)a2;
          a2 = v27;
        }
        while (!v18);
      }
      a2 = v27;
    }
    while (v27 != a3);
  }
}

_QWORD *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>(float *a1, uint64_t a2)
{
  float v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  float v7;
  float v8;
  unsigned int v9;

  v3 = *a1;
  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    result = 0xFFFFFFFFLL;
  else
    result = 1;
  if (LODWORD(v3) == *(_DWORD *)a2)
  {
    v5 = *((_DWORD *)a1 + 1);
    v6 = *(_DWORD *)(a2 + 4);
    result = v5 < v6 ? 0xFFFFFFFFLL : 1;
    if (v5 == v6)
    {
      v7 = a1[2];
      v8 = *(float *)(a2 + 8);
      if (v7 == v8)
        v9 = 0;
      else
        v9 = -127;
      if (v7 > v8)
        v9 = 1;
      if (v7 < v8)
        return 0xFFFFFFFFLL;
      else
        return v9;
    }
  }
  return result;
}

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  float result;
  _BOOL4 v10;
  int v11;
  float *v12;
  int v13;
  float v14;
  int v15;
  float *v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned __int8 v23;
  float v24;

  v6 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a2, (uint64_t)a1);
  v7 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a3, a2);
  v10 = v7 != 129 && (v7 & 0x80u) != 0;
  if (v6 == 129 || ((char)v6 & 0x80000000) == 0)
  {
    if (v10)
    {
      v14 = *(float *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v14;
      v15 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v15;
      v16 = (float *)(a2 + 8);
      v17 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v17;
      v18 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a2, (uint64_t)a1);
      if (v18 != 129 && (char)v18 < 0)
      {
        v19 = *a1;
        *a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v19;
        v20 = a1[1];
        a1[1] = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = v20;
        v12 = (float *)(a1 + 2);
LABEL_19:
        result = *v12;
        *v12 = *v16;
        *v16 = result;
      }
    }
  }
  else
  {
    v12 = (float *)(a1 + 2);
    v11 = *a1;
    if (v10)
    {
      *a1 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v11;
      v13 = a1[1];
      a1[1] = *(_DWORD *)(a3 + 4);
LABEL_18:
      *(_DWORD *)(a3 + 4) = v13;
      v16 = (float *)(a3 + 8);
      goto LABEL_19;
    }
    *a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v11;
    v21 = a1[1];
    a1[1] = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v21;
    v12 = (float *)(a2 + 8);
    v22 = a1[2];
    a1[2] = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v22;
    v23 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a3, a2);
    if (v23 != 129 && (char)v23 < 0)
    {
      v24 = *(float *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v24;
      v13 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      goto LABEL_18;
    }
  }
  return result;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;
  float result;
  float v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  float v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  int v18;
  int v19;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>((_DWORD *)a1, a2, a3);
  v8 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a4, a3);
  if (v8 != 129 && (char)v8 < 0)
  {
    v10 = *(float *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(float *)a4 = v10;
    v11 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v12;
    v13 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a3, a2);
    if (v13 != 129 && (char)v13 < 0)
    {
      v14 = *(float *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v14;
      v15 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v15;
      v16 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v16;
      v17 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a2, a1);
      if (v17 != 129 && (char)v17 < 0)
      {
        v18 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v18;
        v19 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = v19;
        result = *(float *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(float *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10;
  float result;
  float v12;
  int v13;
  int v14;
  unsigned __int8 v15;
  float v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  float v20;
  int v21;
  int v22;
  unsigned __int8 v23;
  int v24;
  int v25;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(a1, a2, a3, a4);
  v10 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a5, a4);
  if (v10 != 129 && (char)v10 < 0)
  {
    v12 = *(float *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(float *)a5 = v12;
    v13 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(_DWORD *)(a5 + 4) = v13;
    v14 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v14;
    v15 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a4, a3);
    if (v15 != 129 && (char)v15 < 0)
    {
      v16 = *(float *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(float *)a4 = v16;
      v17 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v17;
      v18 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v18;
      v19 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a3, a2);
      if (v19 != 129 && (char)v19 < 0)
      {
        v20 = *(float *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(float *)a3 = v20;
        v21 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v21;
        v22 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v22;
        v23 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>((float *)a2, a1);
        if (v23 != 129 && (char)v23 < 0)
        {
          v24 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v24;
          v25 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
          *(_DWORD *)(a2 + 4) = v25;
          result = *(float *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(float *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(_DWORD *a1, float *a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned __int8 v6;
  int v7;
  int v8;
  int v9;
  float *v10;
  float *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  float v15;
  unsigned int v16;
  float v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  int v21;
  unsigned __int8 v22;
  unsigned int v23;
  BOOL v24;
  float v25;
  uint64_t v26;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>(a2 - 3, (uint64_t)a1);
      result = 1;
      if (v6 != 129 && (char)v6 < 0)
      {
        v7 = *a1;
        *a1 = *((_DWORD *)a2 - 3);
        *((_DWORD *)a2 - 3) = v7;
        v8 = a1[1];
        a1[1] = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
        v9 = a1[2];
        a1[2] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(a1, (uint64_t)(a1 + 3), (uint64_t)(a2 - 3));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a1 + 6), (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a1 + 6), (uint64_t)(a1 + 9), (uint64_t)(a2 - 3));
      return 1;
    default:
      v10 = (float *)(a1 + 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,float> *>(a1, (uint64_t)(a1 + 3), (uint64_t)(a1 + 6));
      v11 = (float *)(a1 + 9);
      if (a1 + 9 == (_DWORD *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,float,unsigned int,unsigned int,float,0ul,1ul,2ul>(v11, (uint64_t)v10);
    if (v14 != 129 && (char)v14 < 0)
    {
      v15 = *v11;
      v16 = *((_DWORD *)v11 + 1);
      v17 = v11[2];
      v18 = v12;
      v19 = *(_DWORD *)v10;
      while (1)
      {
        v20 = (_DWORD *)((char *)a1 + v18);
        v21 = *(_DWORD *)((char *)a1 + v18 + 28);
        v20[9] = v19;
        v20[10] = v21;
        v20[11] = *(_DWORD *)((char *)a1 + v18 + 32);
        if (v18 == -24)
          break;
        v19 = v20[3];
        if (LODWORD(v15) < v19)
          v22 = -1;
        else
          v22 = 1;
        if (LODWORD(v15) == v19)
        {
          v23 = *(_DWORD *)((char *)a1 + v18 + 16);
          v24 = v16 == v23;
          v22 = v16 < v23 ? -1 : 1;
          if (v24)
          {
            v25 = *(float *)((char *)a1 + v18 + 20);
            if (v17 == v25)
              v22 = 0;
            else
              v22 = -127;
            if (v17 > v25)
              v22 = 1;
            if (v17 < v25)
              v22 = -1;
          }
        }
        v18 -= 12;
        if (v22 == 129 || (v22 & 0x80) == 0)
        {
          v26 = (uint64_t)a1 + v18 + 36;
          goto LABEL_31;
        }
      }
      v26 = (uint64_t)a1;
LABEL_31:
      *(float *)v26 = v15;
      *(_DWORD *)(v26 + 4) = v16;
      *(float *)(v26 + 8) = v17;
      if (++v13 == 8)
        return v11 + 3 == a2;
    }
    v10 = v11;
    v12 += 12;
    v11 += 3;
    if (v11 == a2)
      return 1;
  }
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A144DE28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1A144E2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  float v23;
  unint64_t v24;
  float v25;
  float *v26;
  float v27;
  int v28;
  int v29;
  float v30;
  float v31;
  BOOL v32;
  uint64_t v33;
  float v34;
  unint64_t v35;
  float v36;
  float *v37;
  unint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  int v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  int v52;
  int v53;
  float v54;
  float v55;
  int v56;
  int v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  _QWORD *v63;
  BOOL v65;
  uint64_t v66;
  _QWORD *v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  int v73;
  uint64_t v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  float v81;
  float v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  int64_t v88;
  float v89;
  int v90;
  float v91;
  unint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  float v99;
  uint64_t v100;
  unint64_t v101;
  _DWORD *v103;
  float v104;
  float v105;
  uint64_t v106;
  _DWORD *v107;
  int v108;
  float v109;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v46 = *(float *)(a2 - 4);
        v47 = *(float *)(v8 + 8);
        if (v46 < v47)
        {
          v48 = *(float *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 12);
          *(float *)(a2 - 12) = v48;
          v49 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v49;
          *(float *)(v8 + 8) = v46;
          *(float *)(a2 - 4) = v47;
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)v8, (float *)(v8 + 12), (float *)(a2 - 12));
      case 4:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v8, v8 + 12, v8 + 24, a2 - 12);
      case 5:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v8, v8 + 12, v8 + 24, v8 + 36);
        v50 = *(float *)(a2 - 4);
        v51 = *(float *)(v8 + 44);
        if (v50 < v51)
        {
          v52 = *(_DWORD *)(v8 + 36);
          *(_DWORD *)(v8 + 36) = *(_DWORD *)(a2 - 12);
          *(_DWORD *)(a2 - 12) = v52;
          v53 = *(_DWORD *)(v8 + 40);
          *(_DWORD *)(v8 + 40) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v53;
          *(float *)(v8 + 44) = v50;
          *(float *)(a2 - 4) = v51;
          v54 = *(float *)(v8 + 44);
          v55 = *(float *)(v8 + 32);
          if (v54 < v55)
          {
            v56 = *(_DWORD *)(v8 + 36);
            v57 = *(_DWORD *)(v8 + 40);
            v58 = *(_QWORD *)(v8 + 24);
            *(_DWORD *)(v8 + 24) = v56;
            *(_DWORD *)(v8 + 28) = v57;
            *(_QWORD *)(v8 + 36) = v58;
            *(float *)(v8 + 32) = v54;
            *(float *)(v8 + 44) = v55;
            v59 = *(float *)(v8 + 20);
            if (v54 < v59)
            {
              v60 = *(_QWORD *)(v8 + 12);
              *(_DWORD *)(v8 + 12) = v56;
              *(_DWORD *)(v8 + 16) = v57;
              *(_QWORD *)(v8 + 24) = v60;
              *(float *)(v8 + 20) = v54;
              *(float *)(v8 + 32) = v59;
              v61 = *(float *)(v8 + 8);
              if (v54 < v61)
              {
                v62 = *(_QWORD *)v8;
                *(_DWORD *)v8 = v56;
                *(_DWORD *)(v8 + 4) = v57;
                *(_QWORD *)(v8 + 12) = v62;
                *(float *)(v8 + 8) = v54;
                *(float *)(v8 + 20) = v61;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v63 = (_QWORD *)(v8 + 12);
          v65 = v8 == a2 || v63 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v65)
            {
              v66 = 0;
              v67 = (_QWORD *)v8;
              do
              {
                v68 = *((float *)v67 + 5);
                v69 = *((float *)v67 + 2);
                v67 = v63;
                if (v68 < v69)
                {
                  v70 = *v63;
                  v71 = v66;
                  while (1)
                  {
                    v72 = (float *)(v8 + v71);
                    v73 = *(_DWORD *)(v8 + v71 + 4);
                    v72[3] = *(float *)(v8 + v71);
                    *((_DWORD *)v72 + 4) = v73;
                    v72[5] = *(float *)(v8 + v71 + 8);
                    if (!v71)
                      break;
                    v71 -= 12;
                    if (v68 >= *(v72 - 1))
                    {
                      v74 = v8 + v71 + 12;
                      goto LABEL_80;
                    }
                  }
                  v74 = v8;
LABEL_80:
                  *(_QWORD *)v74 = v70;
                  *(float *)(v74 + 8) = v68;
                }
                v63 = (_QWORD *)((char *)v67 + 12);
                v66 += 12;
              }
              while ((_QWORD *)((char *)v67 + 12) != (_QWORD *)a2);
            }
          }
          else if (!v65)
          {
            v103 = (_DWORD *)(v8 + 8);
            do
            {
              v104 = *(float *)(v7 + 20);
              v105 = *(float *)(v7 + 8);
              v7 = (uint64_t)v63;
              if (v104 < v105)
              {
                v106 = *v63;
                v107 = v103;
                do
                {
                  v108 = *(v107 - 1);
                  v107[1] = *(v107 - 2);
                  v107[2] = v108;
                  v107[3] = *v107;
                  v109 = *((float *)v107 - 3);
                  v107 -= 3;
                }
                while (v104 < v109);
                *(_QWORD *)(v107 + 1) = v106;
                *((float *)v107 + 3) = v104;
              }
              v63 = (_QWORD *)(v7 + 12);
              v103 += 3;
            }
            while (v7 + 12 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v75 = (unint64_t)(v10 - 2) >> 1;
          v76 = v75;
          do
          {
            v77 = v76;
            if (v75 >= v76)
            {
              v78 = (2 * v76) | 1;
              v79 = v8 + 12 * v78;
              if (2 * v77 + 2 < v10 && *(float *)(v79 + 8) < *(float *)(v79 + 20))
              {
                v79 += 12;
                v78 = 2 * v77 + 2;
              }
              v80 = v8 + 12 * v77;
              v81 = *(float *)(v79 + 8);
              v82 = *(float *)(v80 + 8);
              if (v81 >= v82)
              {
                v83 = *(_QWORD *)v80;
                do
                {
                  v84 = v80;
                  v80 = v79;
                  *(_DWORD *)v84 = *(_DWORD *)v79;
                  *(_DWORD *)(v84 + 4) = *(_DWORD *)(v79 + 4);
                  *(float *)(v84 + 8) = v81;
                  if (v75 < v78)
                    break;
                  v85 = 2 * v78;
                  v78 = (2 * v78) | 1;
                  v79 = v8 + 12 * v78;
                  v86 = v85 + 2;
                  if (v86 < v10 && *(float *)(v79 + 8) < *(float *)(v79 + 20))
                  {
                    v79 += 12;
                    v78 = v86;
                  }
                  v81 = *(float *)(v79 + 8);
                }
                while (v81 >= v82);
                *(_QWORD *)v80 = v83;
                *(float *)(v80 + 8) = v82;
              }
            }
            v76 = v77 - 1;
          }
          while (v77);
          v87 = v9 / 0xCuLL;
          while (2)
          {
            v88 = 0;
            v89 = *(float *)v8;
            v90 = *(_DWORD *)(v8 + 4);
            v91 = *(float *)(v8 + 8);
            v92 = v8;
            do
            {
              v93 = (_DWORD *)v92;
              v92 += 12 * v88 + 12;
              v94 = 2 * v88;
              result = (2 * v88) | 1;
              v88 = result;
              v95 = v94 + 2;
              if (v95 < v87 && *(float *)(v92 + 8) < *(float *)(v92 + 20))
              {
                v92 += 12;
                v88 = v95;
              }
              *v93 = *(_DWORD *)v92;
              v93[1] = *(_DWORD *)(v92 + 4);
              v93[2] = *(_DWORD *)(v92 + 8);
            }
            while (v88 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
            if (v92 != a2 - 12)
            {
              *(_DWORD *)v92 = *(_DWORD *)(a2 - 12);
              *(_DWORD *)(v92 + 4) = *(_DWORD *)(a2 - 8);
              *(_DWORD *)(v92 + 8) = *(_DWORD *)(a2 - 4);
              *(float *)(a2 - 12) = v89;
              *(_DWORD *)(a2 - 8) = v90;
              *(float *)(a2 - 4) = v91;
              v96 = v92 - v8 + 12;
              if (v96 >= 13)
              {
                v97 = (v96 / 0xCuLL - 2) >> 1;
                v98 = v8 + 12 * v97;
                v99 = *(float *)(v98 + 8);
                v91 = *(float *)(v92 + 8);
                if (v99 < v91)
                {
                  v100 = *(_QWORD *)v92;
                  do
                  {
                    v101 = v92;
                    v92 = v98;
                    *(_DWORD *)v101 = *(_DWORD *)v98;
                    *(_DWORD *)(v101 + 4) = *(_DWORD *)(v98 + 4);
                    *(float *)(v101 + 8) = v99;
                    if (!v97)
                      break;
                    v97 = (v97 - 1) >> 1;
                    v98 = v8 + 12 * v97;
                    v99 = *(float *)(v98 + 8);
                  }
                  while (v99 < v91);
                  *(_QWORD *)v92 = v100;
LABEL_112:
                  *(float *)(v92 + 8) = v91;
                }
              }
              a2 -= 12;
              if (v87-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *(float *)v92 = v89;
          *(_DWORD *)(v92 + 4) = v90;
          goto LABEL_112;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 12 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x601)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)(v7 + 12 * v11), (float *)v7, (float *)(a2 - 12));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)v7, (float *)(v7 + 12 * v11), (float *)(a2 - 12));
          v13 = 3 * v11;
          v14 = (float *)(v7 + 12 * v11 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)(v7 + 12), v14, (float *)(a2 - 24));
          v15 = (float *)(v7 + 12 + 4 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)(v7 + 24), v15, (float *)(a2 - 36));
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v14, (float *)v12, v15);
          v16 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v16;
          LODWORD(v16) = *(_DWORD *)(v7 + 8);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v12 + 8);
          *(_DWORD *)(v12 + 8) = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(float *)(v7 + 8);
          if (*(float *)(v7 - 4) < v17)
            goto LABEL_12;
          if (v17 >= *(float *)(a2 - 4))
          {
            v35 = v7 + 12;
            do
            {
              v8 = v35;
              if (v35 >= a2)
                break;
              v36 = *(float *)(v35 + 8);
              v35 += 12;
            }
            while (v17 >= v36);
          }
          else
          {
            v33 = v7;
            do
            {
              v8 = v33 + 12;
              v34 = *(float *)(v33 + 20);
              v33 += 12;
            }
            while (v17 >= v34);
          }
          v37 = (float *)a2;
          if (v8 < a2)
          {
            v38 = a2;
            do
            {
              v37 = (float *)(v38 - 12);
              v39 = *(float *)(v38 - 4);
              v38 -= 12;
            }
            while (v17 < v39);
          }
          v40 = *(_QWORD *)v7;
          while (v8 < (unint64_t)v37)
          {
            v41 = *(float *)v8;
            *(float *)v8 = *v37;
            *v37 = v41;
            v42 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v37[1];
            *((_DWORD *)v37 + 1) = v42;
            v43 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v37[2];
            *((_DWORD *)v37 + 2) = v43;
            do
            {
              v44 = *(float *)(v8 + 20);
              v8 += 12;
            }
            while (v17 >= v44);
            do
            {
              v45 = *(v37 - 1);
              v37 -= 3;
            }
            while (v17 < v45);
          }
          if (v8 - 12 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 12) = v40;
          *(float *)(v8 - 4) = v17;
          continue;
        }
        v17 = *(float *)(v7 + 8);
LABEL_12:
        v18 = *(_QWORD *)v7;
        v19 = v7;
        do
        {
          v20 = v19;
          v19 += 12;
        }
        while (*(float *)(v20 + 20) < v17);
        v21 = a2;
        if (v20 == v7)
        {
          v24 = a2;
          while (v19 < v24)
          {
            v22 = (float *)(v24 - 12);
            v25 = *(float *)(v24 - 4);
            v24 -= 12;
            if (v25 < v17)
              goto LABEL_22;
          }
          v22 = (float *)v24;
        }
        else
        {
          do
          {
            v22 = (float *)(v21 - 12);
            v23 = *(float *)(v21 - 4);
            v21 -= 12;
          }
          while (v23 >= v17);
        }
LABEL_22:
        v8 = v19;
        if (v19 < (unint64_t)v22)
        {
          v26 = v22;
          do
          {
            v27 = *(float *)v8;
            *(float *)v8 = *v26;
            *v26 = v27;
            v28 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v26[1];
            *((_DWORD *)v26 + 1) = v28;
            v29 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v26[2];
            *((_DWORD *)v26 + 2) = v29;
            do
            {
              v30 = *(float *)(v8 + 20);
              v8 += 12;
            }
            while (v30 < v17);
            do
            {
              v31 = *(v26 - 1);
              v26 -= 3;
            }
            while (v31 >= v17);
          }
          while (v8 < (unint64_t)v26);
        }
        if (v8 - 12 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 12);
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
        }
        *(_QWORD *)(v8 - 12) = v18;
        *(float *)(v8 - 4) = v17;
        if (v19 < (unint64_t)v22)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*,false>(v7, v8 - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v7, v8 - 12);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 12;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

void vision::mod::GreedyClustererWithTorso::getConnectedComponentsWithoutFiltering(uint64_t *a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int *value;
  int *end;
  int *begin;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  unsigned int *v19;
  unsigned int *i;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int **v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int **v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  _DWORD *v49;
  unsigned int *v50;
  unsigned int *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD **v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  __int128 v72;
  uint64_t *v73;
  int64x2_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned int v79;
  unsigned int *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  int v90;
  _DWORD *v91;
  _QWORD *v92;
  _QWORD *exception;
  _QWORD **v94;
  uint64_t v96;
  unsigned int v97;
  _QWORD *v98;
  void *__p;
  uint64_t v100;
  uint64_t *v101;
  _QWORD *v102[2];
  uint64_t v103;
  uint64_t v104;
  std::vector<int> v105;
  void **v106;
  int64x2_t v107;
  unint64_t v108;
  _QWORD *v109;

  v4 = a2;
  memset(&v105, 0, sizeof(v105));
  std::vector<int>::reserve(&v105, (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 56) - *(_QWORD *)(*(_QWORD *)(a2 + 64) + 48)) >> 2);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 48);
  v96 = v4;
  if (*(_QWORD *)(*(_QWORD *)(v4 + 64) + 56) == v5)
  {
    v7 = 0;
  }
  else
  {
    v94 = a3;
    v6 = 0;
    v7 = 0;
    end = v105.__end_;
    value = v105.__end_cap_.__value_;
    begin = v105.__begin_;
    do
    {
      v11 = *(_DWORD *)(v5 + 4 * v6);
      if (end >= value)
      {
        v12 = end - begin;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
        {
          v105.__begin_ = begin;
          v105.__end_ = end;
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)value - (char *)begin) >> 1 > v13)
          v13 = ((char *)value - (char *)begin) >> 1;
        if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v14);
        else
          v15 = 0;
        v16 = (int *)(v14 + 4 * v12);
        *v16 = v11;
        v17 = v16 + 1;
        while (end != begin)
        {
          v18 = *--end;
          *--v16 = v18;
        }
        value = (int *)(v14 + 4 * v15);
        if (begin)
          operator delete(begin);
        begin = v16;
        end = v17;
        v4 = v96;
      }
      else
      {
        *end++ = v11;
      }
      if (v11 > v7)
        v7 = v11;
      ++v6;
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 48);
    }
    while (v6 < (*(_QWORD *)(*(_QWORD *)(v4 + 64) + 56) - v5) >> 2);
    v105.__end_ = end;
    v105.__end_cap_.__value_ = value;
    v105.__begin_ = begin;
    a3 = v94;
  }
  std::vector<std::vector<unsigned int>>::vector(&v103, v7 + 1);
  v19 = (unsigned int *)**a3;
  for (i = (unsigned int *)(*a3)[1]; v19 != i; v19 += 3)
  {
    v21 = *v19;
    v22 = v19[1];
    v23 = v103 + 24 * *v19;
    v25 = (unsigned int **)(v23 + 8);
    v24 = *(unsigned int **)(v23 + 8);
    v26 = *(_QWORD *)(v23 + 16);
    if ((unint64_t)v24 >= v26)
    {
      v28 = *(unsigned int **)v23;
      v29 = ((uint64_t)v24 - *(_QWORD *)v23) >> 2;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        goto LABEL_122;
      v31 = v26 - (_QWORD)v28;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v32);
        v24 = *v25;
        v28 = *(unsigned int **)v23;
      }
      else
      {
        v33 = 0;
      }
      v34 = (unsigned int *)(v32 + 4 * v29);
      *v34 = v22;
      v27 = v34 + 1;
      while (v24 != v28)
      {
        v35 = *--v24;
        *--v34 = v35;
      }
      *(_QWORD *)v23 = v34;
      *v25 = v27;
      *(_QWORD *)(v23 + 16) = v32 + 4 * v33;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v24 = v22;
      v27 = v24 + 1;
    }
    *v25 = v27;
    v36 = v103 + 24 * v22;
    v38 = (unsigned int **)(v36 + 8);
    v37 = *(unsigned int **)(v36 + 8);
    v39 = *(_QWORD *)(v36 + 16);
    if ((unint64_t)v37 >= v39)
    {
      v41 = *(unsigned int **)v36;
      v42 = ((uint64_t)v37 - *(_QWORD *)v36) >> 2;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 62)
LABEL_122:
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      v44 = v39 - (_QWORD)v41;
      if (v44 >> 1 > v43)
        v43 = v44 >> 1;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
        v45 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      if (v45)
      {
        v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v45);
        v37 = *v38;
        v41 = *(unsigned int **)v36;
      }
      else
      {
        v46 = 0;
      }
      v47 = (unsigned int *)(v45 + 4 * v42);
      *v47 = v21;
      v40 = v47 + 1;
      while (v37 != v41)
      {
        v48 = *--v37;
        *--v47 = v48;
      }
      *(_QWORD *)v36 = v47;
      *v38 = v40;
      *(_QWORD *)(v36 + 16) = v45 + 4 * v46;
      if (v41)
        operator delete(v41);
    }
    else
    {
      *v37 = v21;
      v40 = v37 + 1;
    }
    *v38 = v40;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v102[0] = 0;
  v102[1] = 0;
  v100 = 0;
  v101 = (uint64_t *)v102;
  v98 = &v98;
  __p = &v98;
  v49 = operator new(0x18uLL);
  v49[4] = 0;
  *(_QWORD *)v49 = &v98;
  *((_QWORD *)v49 + 1) = &v98;
  v98 = v49;
  __p = v49;
  v100 = 1;
  if (v104 == v103)
    goto LABEL_119;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
LABEL_61:
  v54 = *(_QWORD *)(v96 + 64);
  if (*(_BYTE *)(v54 + 112))
  {
    *(_BYTE *)(v54 + 112) = 0;
    exception = __cxa_allocate_exception(8uLL);
    *exception = 5219;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v97 = 0;
  v55 = v100;
  if (v100)
  {
    v56 = (_QWORD **)__p;
    v57 = *((_DWORD *)__p + 4);
    v97 = v57;
    v58 = *(_QWORD *)__p;
    *(_QWORD *)(v58 + 8) = *((_QWORD *)__p + 1);
    *v56[1] = v58;
    v100 = v55 - 1;
    operator delete(v56);
    goto LABEL_92;
  }
  v60 = (_QWORD *)a1[1];
  v59 = a1[2];
  if ((unint64_t)v60 >= v59)
  {
    v63 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v60 - *a1) >> 3);
    v64 = v63 + 1;
    if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - *a1) >> 3);
    if (2 * v65 > v64)
      v64 = 2 * v65;
    if (v65 >= 0x555555555555555)
      v66 = 0xAAAAAAAAAAAAAAALL;
    else
      v66 = v64;
    v109 = a1 + 2;
    if (v66)
      v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v66);
    else
      v67 = 0;
    v68 = (_QWORD *)(v66 + 24 * v63);
    v106 = (void **)v66;
    v107.i64[0] = (uint64_t)v68;
    v107.i64[1] = (uint64_t)v68;
    v108 = v66 + 24 * v67;
    *v68 = 0;
    v68[1] = 0;
    v68[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v68, v50, (uint64_t)v51, v51 - v50);
    v69 = v107.i64[0];
    v61 = v107.i64[1] + 24;
    v107.i64[1] += 24;
    v71 = (_QWORD *)*a1;
    v70 = (_QWORD *)a1[1];
    if (v70 == (_QWORD *)*a1)
    {
      v74 = vdupq_n_s64((unint64_t)v70);
      v73 = a1;
    }
    else
    {
      do
      {
        *(_QWORD *)(v69 - 24) = 0;
        *(_QWORD *)(v69 - 16) = 0;
        v69 -= 24;
        *(_QWORD *)(v69 + 16) = 0;
        v72 = *(_OWORD *)(v70 - 3);
        v70 -= 3;
        *(_OWORD *)v69 = v72;
        *(_QWORD *)(v69 + 16) = v70[2];
        *v70 = 0;
        v70[1] = 0;
        v70[2] = 0;
      }
      while (v70 != v71);
      v73 = a1;
      v74 = *(int64x2_t *)a1;
      v61 = v107.i64[1];
    }
    *v73 = v69;
    v73[1] = v61;
    v107 = v74;
    v75 = v73[2];
    a1[2] = v108;
    v108 = v75;
    v106 = (void **)v74.i64[0];
    std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v106);
    v62 = a1;
  }
  else
  {
    *v60 = 0;
    v60[1] = 0;
    v60[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v60, v50, (uint64_t)v51, v51 - v50);
    v61 = (uint64_t)(v60 + 3);
    v62 = a1;
    a1[1] = (uint64_t)(v60 + 3);
  }
  v62[1] = v61;
  v76 = v105.__end_ - v105.__begin_;
  if (v76 > v53)
  {
    v77 = v53;
    while (1)
    {
      v57 = v105.__begin_[v77];
      if (!v102[0])
      {
LABEL_91:
        v97 = v105.__begin_[v77];
        ++v53;
        v51 = v50;
LABEL_92:
        if (!*((_BYTE *)std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v101, v57, &v97)+ 32))
        {
          *((_BYTE *)std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v101, v57, &v97)+ 32) = 1;
          if ((unint64_t)v51 >= v52)
          {
            v81 = v51 - v50;
            v82 = v81 + 1;
            if ((unint64_t)(v81 + 1) >> 62)
              std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v52 - (_QWORD)v50) >> 1 > v82)
              v82 = (uint64_t)(v52 - (_QWORD)v50) >> 1;
            if (v52 - (unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
              v83 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v83 = v82;
            if (v83)
              v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v83);
            else
              v84 = 0;
            v85 = (unsigned int *)(v83 + 4 * v81);
            *v85 = v57;
            v80 = v85 + 1;
            while (v51 != v50)
            {
              v86 = *--v51;
              *--v85 = v86;
            }
            v52 = v83 + 4 * v84;
            if (v50)
              operator delete(v50);
            v50 = v85;
          }
          else
          {
            *v51 = v57;
            v80 = v51 + 1;
          }
          v87 = v103 + 24 * v97;
          v88 = *(_DWORD **)v87;
          v89 = *(_DWORD **)(v87 + 8);
          while (v88 != v89)
          {
            LODWORD(v106) = *v88;
            v90 = (int)v106;
            if (!*((_BYTE *)std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v101, v106, &v106)+ 32))
            {
              v91 = operator new(0x18uLL);
              v91[4] = v90;
              v92 = v98;
              *(_QWORD *)v91 = v98;
              *((_QWORD *)v91 + 1) = &v98;
              v92[1] = v91;
              v98 = v91;
              ++v100;
            }
            ++v88;
          }
          v51 = v80;
        }
        if (v104 == v103)
          goto LABEL_117;
        goto LABEL_61;
      }
      v78 = v102[0];
      while (1)
      {
        v79 = *((_DWORD *)v78 + 7);
        if (v57 >= v79)
          break;
LABEL_87:
        v78 = (_QWORD *)*v78;
        if (!v78)
        {
          v53 = v77;
          goto LABEL_91;
        }
      }
      if (v79 < v57)
        break;
      if (++v77 == v76)
        goto LABEL_117;
    }
    ++v78;
    goto LABEL_87;
  }
LABEL_117:
  if (v50)
    operator delete(v50);
LABEL_119:
  std::__list_imp<long long>::clear(&v98);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(v102[0]);
  v106 = (void **)&v103;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v106);
  if (v105.__begin_)
    operator delete(v105.__begin_);
}

void sub_1A144F28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, _QWORD *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  std::__list_imp<long long>::clear(&a13);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a17);
  a16 = a10;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a19;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v6);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1A144F7D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_1A144FBC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a1);
}

void std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (void *)v1[3];
      if (v3)
      {
        v1[4] = v3;
        operator delete(v3);
      }
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  std::vector<int>::pointer begin;
  int *end;
  int *v10;
  int v11;

  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v3 = (char *)this->__end_ - (char *)this->__begin_;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(__n);
    v5 = (int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = (int *)&v4[4 * v6];
    begin = this->__begin_;
    end = this->__end_;
    v10 = v5;
    if (end != this->__begin_)
    {
      v10 = v5;
      do
      {
        v11 = *--end;
        *--v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *std::vector<std::vector<unsigned int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1A144FE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_BYTE *)v7 + 32) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  int v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  int v17;

  v3 = a2[2];
  v4 = result[2];
  v5 = a3[2];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      v8 = *a2;
      *a2 = *a3;
      *a3 = v8;
      v9 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v9;
      a2[2] = v5;
      a3[2] = v3;
      v10 = a2[2];
      v11 = result[2];
      if (v10 < v11)
      {
        v12 = *result;
        *result = *a2;
        *a2 = v12;
        v13 = *((_DWORD *)result + 1);
        result[1] = a2[1];
        *((_DWORD *)a2 + 1) = v13;
        result[2] = v10;
        a2[2] = v11;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 >= v3)
    {
      *result = *a2;
      *a2 = v6;
      v14 = *((_DWORD *)result + 1);
      result[1] = a2[1];
      *((_DWORD *)a2 + 1) = v14;
      result[2] = v3;
      a2[2] = v4;
      v15 = a3[2];
      if (v15 >= v4)
        return result;
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v17;
      a2[2] = v15;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      v7 = *((_DWORD *)result + 1);
      result[1] = a3[1];
      *((_DWORD *)a3 + 1) = v7;
      result[2] = v5;
    }
    a3[2] = v4;
  }
  return result;
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float *result;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float v17;
  float v18;
  float v19;
  int v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)a1, (float *)a2, (float *)a3);
  v9 = *(float *)(a4 + 8);
  v10 = *(float *)(a3 + 8);
  if (v9 < v10)
  {
    v11 = *(float *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(float *)a4 = v11;
    v12 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v12;
    *(float *)(a3 + 8) = v9;
    *(float *)(a4 + 8) = v10;
    v13 = *(float *)(a3 + 8);
    v14 = *(float *)(a2 + 8);
    if (v13 < v14)
    {
      v15 = *(float *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v15;
      v16 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v16;
      *(float *)(a2 + 8) = v13;
      *(float *)(a3 + 8) = v14;
      v17 = *(float *)(a2 + 8);
      v18 = *(float *)(a1 + 8);
      if (v17 < v18)
      {
        v19 = *(float *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(float *)a2 = v19;
        v20 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = v20;
        *(float *)(a1 + 8) = v17;
        *(float *)(a2 + 8) = v18;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float v20;
  float v21;
  int v22;
  int v23;
  float v24;
  float v25;
  int v26;
  int v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 4);
      v7 = *(float *)(a1 + 8);
      if (v6 < v7)
      {
        v8 = *(float *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 12);
        *(float *)(a2 - 12) = v8;
        v9 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v9;
        *(float *)(a1 + 8) = v6;
        *(float *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)a1, (float *)(a1 + 12), (float *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(a1, a1 + 12, a1 + 24, a1 + 36);
      v20 = *(float *)(a2 - 4);
      v21 = *(float *)(a1 + 44);
      if (v20 < v21)
      {
        v22 = *(_DWORD *)(a1 + 36);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v22;
        v23 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v23;
        *(float *)(a1 + 44) = v20;
        *(float *)(a2 - 4) = v21;
        v24 = *(float *)(a1 + 44);
        v25 = *(float *)(a1 + 32);
        if (v24 < v25)
        {
          v26 = *(_DWORD *)(a1 + 36);
          v27 = *(_DWORD *)(a1 + 40);
          v28 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = v26;
          *(_DWORD *)(a1 + 28) = v27;
          *(_QWORD *)(a1 + 36) = v28;
          *(float *)(a1 + 32) = v24;
          *(float *)(a1 + 44) = v25;
          v29 = *(float *)(a1 + 20);
          if (v24 < v29)
          {
            v30 = *(_QWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 12) = v26;
            *(_DWORD *)(a1 + 16) = v27;
            *(_QWORD *)(a1 + 24) = v30;
            *(float *)(a1 + 20) = v24;
            *(float *)(a1 + 32) = v29;
            v31 = *(float *)(a1 + 8);
            if (v24 < v31)
            {
              v32 = *(_QWORD *)a1;
              *(_DWORD *)a1 = v26;
              *(_DWORD *)(a1 + 4) = v27;
              *(_QWORD *)(a1 + 12) = v32;
              *(float *)(a1 + 8) = v24;
              *(float *)(a1 + 20) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      v11 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)(v11 + 8);
    if (v14 < *(float *)(v10 + 8))
    {
      v15 = *(_QWORD *)v11;
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_DWORD *)(a1 + v16 + 28);
        *(_DWORD *)(v17 + 36) = *(_DWORD *)(a1 + v16 + 24);
        *(_DWORD *)(v17 + 40) = v18;
        *(_DWORD *)(v17 + 44) = *(_DWORD *)(a1 + v16 + 32);
        if (v16 == -24)
          break;
        v16 -= 12;
        if (v14 >= *(float *)(v17 + 20))
        {
          v19 = a1 + v16 + 36;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(_QWORD *)v19 = v15;
      *(float *)(v19 + 8) = v14;
      if (++v13 == 8)
        return v11 + 12 == a2;
    }
    v10 = v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2)
      return 1;
  }
}

void vision::mod::GreedyClustererWithTorso::computeMergePairs(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t **a4, int a5)
{
  _QWORD *v5;
  uint64_t **v7;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  unsigned int v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  size_t v62;
  char *v63;
  _DWORD *v64;
  _DWORD *v65;
  char *v66;
  uint64_t v67;
  int v68;
  size_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  float __C;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 56) != *(_QWORD *)(*(_QWORD *)(a1 + 64) + 48))
  {
    v5 = (_QWORD *)*a2;
    v76 = a2 + 1;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      v7 = a4;
      v9 = a3 + 1;
      while (1)
      {
        v10 = *((_DWORD *)v5 + 7);
        v11 = **(_QWORD **)(*(_QWORD *)(a1 + 64) + 72);
        v12 = (_QWORD *)*a3;
        v13 = !*(_DWORD *)(v11 + *(unsigned int *)(v11 + 16) * (unint64_t)v10 + 40) || v12 == v9;
        if (!v13)
          break;
LABEL_72:
        v72 = (_QWORD *)v5[1];
        if (v72)
        {
          do
          {
            v73 = v72;
            v72 = (_QWORD *)*v72;
          }
          while (v72);
        }
        else
        {
          do
          {
            v73 = (_QWORD *)v5[2];
            v13 = *v73 == (_QWORD)v5;
            v5 = v73;
          }
          while (!v13);
        }
        v5 = v73;
        if (v73 == v76)
          return;
      }
      while (1)
      {
        v14 = *((_DWORD *)v12 + 7);
        if (v14 > v10 || a5 != 0)
        {
          v16 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 72);
          if (v16)
          {
            v17 = *v16;
            v18 = v17 + 24;
            v19 = *(_DWORD *)(v17 + 16);
            v20 = v17 + 24 + v19 * (unint64_t)v14;
            if (*(_DWORD *)(v20 + 8) && *(_DWORD *)(v20 + 16))
            {
              v21 = v18 + v19 * (unint64_t)v10;
              if (*(float *)(v20 + 12) >= *(float *)(v21 + 12))
                v22 = *(float *)(v21 + 12);
              else
                v22 = *(float *)(v20 + 12);
              v23 = v21 + 40;
LABEL_22:
              __C = 0.0;
              vDSP_dotpr((const float *)v23, 1, (const float *)(v20 + 40), 1, &__C, 0x80uLL);
              v24 = (float)(__C * -0.5) + 0.5;
              if (v24 < (float)(v22 * *(float *)(*(_QWORD *)(a1 + 32) + 12)))
              {
                v27 = **(_QWORD **)(*(_QWORD *)(a1 + 64) + 72);
                v25 = v27 + 24;
                LODWORD(v27) = *(_DWORD *)(v27 + 16);
                v26 = *(_DWORD *)(v25 + v27 * (unint64_t)v14);
                LODWORD(v27) = *(_DWORD *)(v25 + v27 * (unint64_t)v10);
                if (v26 <= v27)
                  v28 = v27;
                else
                  v28 = v26;
                if (v26 >= v27)
                  v27 = v27;
                else
                  v27 = v26;
                v29 = *v7;
                v30 = v24 / v22;
                v31 = v27 | (v28 << 32);
                v33 = (*v7)[1];
                v32 = (*v7)[2];
                if (v33 >= v32)
                {
                  v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *v29) >> 2);
                  v36 = v35 + 1;
                  if (v35 + 1 > 0x1555555555555555)
                    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
                  v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *v29) >> 2);
                  if (2 * v37 > v36)
                    v36 = 2 * v37;
                  if (v37 >= 0xAAAAAAAAAAAAAAALL)
                    v38 = 0x1555555555555555;
                  else
                    v38 = v36;
                  if (v38)
                    v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(v38);
                  else
                    v39 = 0;
                  v40 = v38 + 12 * v35;
                  *(_QWORD *)v40 = v31;
                  *(float *)(v40 + 8) = v30;
                  v42 = (_DWORD *)*v29;
                  v41 = (_DWORD *)v29[1];
                  v43 = v40;
                  if (v41 == (_DWORD *)*v29)
                  {
                    v7 = a4;
                  }
                  else
                  {
                    v7 = a4;
                    do
                    {
                      v44 = *(_QWORD *)(v41 - 3);
                      v41 -= 3;
                      v45 = v41[2];
                      *(_QWORD *)(v43 - 12) = v44;
                      v43 -= 12;
                      *(_DWORD *)(v43 + 8) = v45;
                    }
                    while (v41 != v42);
                    v41 = (_DWORD *)*v29;
                  }
                  v34 = v40 + 12;
                  *v29 = v43;
                  v29[1] = v40 + 12;
                  v29[2] = v38 + 12 * v39;
                  if (v41)
                    operator delete(v41);
                }
                else
                {
                  *(_QWORD *)v33 = v31;
                  *(float *)(v33 + 8) = v30;
                  v34 = v33 + 12;
                }
                v29[1] = v34;
                v46 = **v7;
                v47 = (*v7)[1];
                v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v46) >> 2);
                if (v48 >= 0x86471)
                {
                  v49 = 126 - 2 * __clz(v48);
                  if (v47 == v46)
                    v50 = 0;
                  else
                    v50 = v49;
                  std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::computeMergePairs(std::set<unsigned int> &,std::set<unsigned int> &,std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>,BOOL)::$_0 &,std::tuple<unsigned int,unsigned int,float>*,false>(v46, v47, v50, 1);
                  v51 = *v7;
                  v52 = **v7;
                  v53 = (char *)(*v7)[1];
                  v54 = &v53[-v52];
                  v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v53[-v52] >> 2);
                  if (v55 >= 0x7A120)
                  {
                    v7 = a4;
                    if (v54 != (char *)6000000)
                      v51[1] = v52 + 6000000;
                  }
                  else
                  {
                    v56 = v51[2];
                    if (0xAAAAAAAAAAAAAAABLL * ((v56 - (uint64_t)v53) >> 2) >= 500000 - v55)
                    {
                      v69 = 12 * ((5999988 - (uint64_t)v54) / 0xCuLL) + 12;
                      bzero(v53, v69);
                      v51[1] = (uint64_t)&v53[v69];
                      v7 = a4;
                    }
                    else
                    {
                      v57 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v52) >> 2);
                      v58 = 2 * v57;
                      if (2 * v57 <= 0x7A120)
                        v58 = 500000;
                      if (v57 >= 0xAAAAAAAAAAAAAAALL)
                        v59 = 0x1555555555555555;
                      else
                        v59 = v58;
                      v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,unsigned int,float>>>(v59);
                      v74 = v61;
                      v75 = v60;
                      v62 = 12 * ((5999988 - (uint64_t)v54) / 0xCuLL) + 12;
                      v63 = &v60[12 * v55];
                      bzero(v63, v62);
                      v65 = (_DWORD *)*v51;
                      v64 = (_DWORD *)v51[1];
                      v66 = v63;
                      if (v64 != (_DWORD *)*v51)
                      {
                        do
                        {
                          v67 = *(_QWORD *)(v64 - 3);
                          v64 -= 3;
                          v68 = v64[2];
                          *(_QWORD *)(v66 - 12) = v67;
                          v66 -= 12;
                          *((_DWORD *)v66 + 2) = v68;
                        }
                        while (v64 != v65);
                        v64 = (_DWORD *)*v51;
                      }
                      v7 = a4;
                      *v51 = (uint64_t)v66;
                      v51[1] = (uint64_t)&v63[v62];
                      v51[2] = (uint64_t)&v75[12 * v74];
                      if (v64)
                        operator delete(v64);
                    }
                  }
                }
              }
            }
          }
          else if (MEMORY[8] && MEMORY[0x10])
          {
            v20 = 0;
            v22 = MEMORY[0xC];
            v23 = 40;
            goto LABEL_22;
          }
        }
        v70 = (_QWORD *)v12[1];
        if (v70)
        {
          do
          {
            v71 = v70;
            v70 = (_QWORD *)*v70;
          }
          while (v70);
        }
        else
        {
          do
          {
            v71 = (_QWORD *)v12[2];
            v13 = *v71 == (_QWORD)v12;
            v12 = v71;
          }
          while (!v13);
        }
        v12 = v71;
        if (v71 == v9)
          goto LABEL_72;
      }
    }
  }
}

void vision::mod::GreedyClustererWithTorso::private_t::clusters_t::~clusters_t(vision::mod::GreedyClustererWithTorso::private_t::clusters_t *this)
{
  void *v2;

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 40);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 24);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

int *std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;
  int *v21;
  int v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  int *v33;
  int v34;
  int *v35;
  int *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  BOOL v46;
  uint64_t v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  int *v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  int v63;
  int *v64;
  int v65;
  int v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  int *v83;
  int v84;
  int v85;
  int *v86;
  int *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  int v94;
  int v95;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 1) > v8[1])
        {
          v42 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v42;
          v43 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v43;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(v8, v8 + 2, v8 + 4, v8 + 6, a2 - 2);
      default:
        if (v9 <= 191)
        {
          v44 = v8 + 2;
          v46 = v8 == a2 || v44 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v46)
            {
              v47 = 0;
              v48 = v8;
              do
              {
                v49 = v48[3];
                v50 = v48[1];
                v48 = v44;
                if (v49 > v50)
                {
                  v51 = *v44;
                  v52 = v48[1];
                  v53 = v47;
                  while (1)
                  {
                    v54 = (char *)v8 + v53;
                    v55 = *(int *)((char *)v8 + v53 + 4);
                    *((_DWORD *)v54 + 2) = *(int *)((char *)v8 + v53);
                    *((_DWORD *)v54 + 3) = v55;
                    if (!v53)
                      break;
                    v53 -= 8;
                    if (*((_DWORD *)v54 - 1) >= v52)
                    {
                      v56 = (int *)((char *)v8 + v53 + 8);
                      goto LABEL_75;
                    }
                  }
                  v56 = v8;
LABEL_75:
                  *v56 = v51;
                  v56[1] = v52;
                }
                v44 = v48 + 2;
                v47 += 8;
              }
              while (v48 + 2 != a2);
            }
          }
          else if (!v46)
          {
            v88 = v8 + 1;
            do
            {
              v89 = v7[3];
              v90 = v7[1];
              v7 = v44;
              if (v89 > v90)
              {
                v91 = *(_QWORD *)v44;
                v92 = HIDWORD(*(_QWORD *)v7);
                v93 = v88;
                do
                {
                  v94 = *v93;
                  v93[1] = *(v93 - 1);
                  v93[2] = v94;
                  v95 = *(v93 - 2);
                  v93 -= 2;
                }
                while (v95 < (int)v92);
                v93[1] = v91;
                v93[2] = v92;
              }
              v44 = v7 + 2;
              v88 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v57 = (v10 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = &v8[2 * v60];
                if (2 * v59 + 2 < (uint64_t)v10)
                {
                  v62 = v61[1];
                  v63 = v61[3];
                  v61 += 2 * (v62 > v63);
                  if (v62 > v63)
                    v60 = 2 * v59 + 2;
                }
                v64 = &v8[2 * v59];
                if (v61[1] <= v64[1])
                {
                  v65 = *v64;
                  v66 = v64[1];
                  do
                  {
                    v67 = v64;
                    v64 = v61;
                    *v67 = *v61;
                    v67[1] = v61[1];
                    if (v57 < v60)
                      break;
                    v68 = (2 * v60) | 1;
                    v61 = &v8[2 * v68];
                    v69 = 2 * v60 + 2;
                    if (v69 < (uint64_t)v10)
                    {
                      v70 = v61[1];
                      v71 = v61[3];
                      v61 += 2 * (v70 > v71);
                      if (v70 > v71)
                        v68 = v69;
                    }
                    result = (int *)v61[1];
                    v60 = v68;
                  }
                  while ((int)result <= v66);
                  *v64 = v65;
                  v64[1] = v66;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v72 = (unint64_t)v9 >> 3;
            do
            {
              v73 = 0;
              v74 = *(_QWORD *)v8;
              v75 = v8;
              do
              {
                v76 = &v75[2 * v73 + 2];
                v77 = (2 * v73) | 1;
                v78 = 2 * v73 + 2;
                if (v78 < v72)
                {
                  v79 = v76[1];
                  v80 = v76[3];
                  v76 += 2 * (v79 > v80);
                  if (v79 > v80)
                    v77 = v78;
                }
                *v75 = *v76;
                v75[1] = v76[1];
                v75 = v76;
                v73 = v77;
              }
              while (v77 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              if (v76 == a2 - 2)
              {
                *(_QWORD *)v76 = v74;
              }
              else
              {
                *v76 = *(a2 - 2);
                v76[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v74;
                v81 = (char *)v76 - (char *)v8 + 8;
                if (v81 >= 9)
                {
                  v82 = (unint64_t)((v81 >> 3) - 2) >> 1;
                  v83 = &v8[2 * v82];
                  if (v83[1] > v76[1])
                  {
                    v84 = *v76;
                    v85 = v76[1];
                    do
                    {
                      v86 = v76;
                      v76 = v83;
                      *v86 = *v83;
                      v86[1] = v83[1];
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v8[2 * v82];
                    }
                    while (v83[1] > v85);
                    *v76 = v84;
                    v76[1] = v85;
                  }
                }
              }
              a2 -= 2;
            }
            while (v72-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(v7 - 1) <= v7[1])
        {
          v29 = *(_QWORD *)v7;
          v30 = HIDWORD(*(_QWORD *)v7);
          if (*(a2 - 1) >= (int)v30)
          {
            v33 = v7 + 2;
            do
            {
              v8 = v33;
              if (v33 >= a2)
                break;
              v34 = v33[1];
              v33 += 2;
            }
            while (v34 >= (int)v30);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = v31 + 2;
              v32 = v31[3];
              v31 += 2;
            }
            while (v32 >= (int)v30);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 2;
              v37 = *(v36 - 1);
              v36 -= 2;
            }
            while (v37 < (int)v30);
          }
          while (v8 < v35)
          {
            v38 = *v8;
            *v8 = *v35;
            *v35 = v38;
            v39 = v8[1];
            v8[1] = v35[1];
            v35[1] = v39;
            do
            {
              v40 = v8[3];
              v8 += 2;
            }
            while (v40 >= (int)v30);
            do
            {
              v41 = *(v35 - 1);
              v35 -= 2;
            }
            while (v41 < (int)v30);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v29;
          *(v8 - 1) = v30;
          continue;
        }
        v14 = *(_QWORD *)v7;
        v15 = HIDWORD(*(_QWORD *)v7);
        v16 = v7;
        do
        {
          v17 = v16;
          v16 += 2;
        }
        while (v17[3] > (int)v15);
        v18 = a2;
        if (v17 == v7)
        {
          v21 = a2;
          while (v16 < v21)
          {
            v19 = v21 - 2;
            v22 = *(v21 - 1);
            v21 -= 2;
            if (v22 > (int)v15)
              goto LABEL_21;
          }
          v19 = v21;
        }
        else
        {
          do
          {
            v19 = v18 - 2;
            v20 = *(v18 - 1);
            v18 -= 2;
          }
          while (v20 <= (int)v15);
        }
LABEL_21:
        v8 = v16;
        if (v16 < v19)
        {
          v23 = v19;
          do
          {
            v24 = *v8;
            *v8 = *v23;
            *v23 = v24;
            v25 = v8[1];
            v8[1] = v23[1];
            v23[1] = v25;
            do
            {
              v26 = v8[3];
              v8 += 2;
            }
            while (v26 > (int)v15);
            do
            {
              v27 = *(v23 - 1);
              v23 -= 2;
            }
            while (v27 <= (int)v15);
          }
          while (v8 < v23);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v14;
        *(v8 - 1) = v15;
        if (v16 < v19)
        {
LABEL_32:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(v7, v8 - 2);
        result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(int *result, int *a2, int *a3)
{
  int *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = result + 1;
  v6 = a3[1];
  if (v4 > result[1])
  {
    v7 = *result;
    if (v6 <= v4)
    {
      *result = *a2;
      *a2 = v7;
      v11 = result[1];
      result[1] = a2[1];
      a2[1] = v11;
      if (a3[1] <= v11)
        return result;
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v5 = a2 + 1;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
    }
    v3 = a3 + 1;
    goto LABEL_10;
  }
  if (v6 > v4)
  {
    v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    if (a2[1] > *v5)
    {
      v10 = *result;
      *result = *a2;
      *a2 = v10;
LABEL_10:
      v13 = *v5;
      *v5 = *v3;
      *v3 = v13;
    }
  }
  return result;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(int *a1, int *a2, int *a3, int *a4)
{
  int *result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(a1, a2, a3);
  if (a4[1] > a3[1])
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    if (a3[1] > a2[1])
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      if (a2[1] > a1[1])
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

int *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  int *result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(a1, a2, a3, a4);
  if (a5[1] > a4[1])
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    if (a4[1] > a3[1])
    {
      v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      if (a3[1] > a2[1])
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        if (a2[1] > a1[1])
        {
          v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
          v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int *v17;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) > a1[1])
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v8 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::private_t::clusters_t::sort(void)::{lambda(std::tuple<unsigned int,int> const&,std::tuple<unsigned int,int> const&)#1} &,std::tuple<unsigned int,int>*>(a1, a1 + 2, a1 + 4);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (v9[1] > v8[1])
    {
      v12 = *v9;
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        v15 = (int *)((char *)a1 + v14);
        v16 = *(int *)((char *)a1 + v14 + 20);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = v16;
        if (v14 == -16)
          break;
        v14 -= 8;
        if (v15[3] >= v13)
        {
          v17 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      v17[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 8;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::createDeepCopy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *p_p;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *__p;
  __int128 v16;

  v2 = HIBYTE(v16);
  if (v16 < 0)
    v2 = v16;
  if (v2 == 11
    && (v16 >= 0 ? (p_p = (uint64_t *)&__p) : (p_p = (uint64_t *)__p),
        (v4 = *p_p, v5 = *(uint64_t *)((char *)p_p + 3), v4 == 0x494C41564E492323)
      ? (v6 = v5 == 0x232344494C41564ELL)
      : (v6 = 0),
        v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = cvml::util::MMapFileBackingStore::createByMappingDirectlyFromFile((const char *)&__p, 1);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  std::shared_ptr<cvml::util::MMapFileBackingStore>::shared_ptr[abi:ne180100]<cvml::util::MMapFileBackingStore,void>(&v13, v7);
  if (v13)
  {
    std::vector<BOOL>::vector(&__p, (uint64_t)(a1 + 7));
    v8 = operator new();
    cvml::util::MMapFileBackingStore::MMapFileBackingStore(v8, v13);
    *(_QWORD *)(v8 + 56) = __p;
    *(_OWORD *)(v8 + 64) = v16;
  }
  else
  {
    v8 = 0;
  }
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_1A1451528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  MEMORY[0x1A1B0A898](v17, 0x1092C4040FCC1CALL);
  if (__p)
    operator delete(__p);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::computeMergePairs(std::set<unsigned int> &,std::set<unsigned int> &,std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>,BOOL)::$_0 &,std::tuple<unsigned int,unsigned int,float>*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  float v23;
  unint64_t v24;
  float v25;
  float *v26;
  float v27;
  int v28;
  int v29;
  float v30;
  float v31;
  BOOL v32;
  uint64_t v33;
  float v34;
  unint64_t v35;
  float v36;
  float *v37;
  unint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  int v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  int v52;
  int v53;
  float v54;
  float v55;
  int v56;
  int v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  _QWORD *v63;
  BOOL v65;
  uint64_t v66;
  _QWORD *v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  int v73;
  uint64_t v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  float v81;
  float v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  int64_t v88;
  float v89;
  int v90;
  float v91;
  unint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  float v99;
  uint64_t v100;
  unint64_t v101;
  _DWORD *v103;
  float v104;
  float v105;
  uint64_t v106;
  _DWORD *v107;
  int v108;
  float v109;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v46 = *(float *)(a2 - 4);
        v47 = *(float *)(v8 + 8);
        if (v46 < v47)
        {
          v48 = *(float *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 12);
          *(float *)(a2 - 12) = v48;
          v49 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v49;
          *(float *)(v8 + 8) = v46;
          *(float *)(a2 - 4) = v47;
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)v8, (float *)(v8 + 12), (float *)(a2 - 12));
      case 4:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v8, v8 + 12, v8 + 24, a2 - 12);
      case 5:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v8, v8 + 12, v8 + 24, v8 + 36);
        v50 = *(float *)(a2 - 4);
        v51 = *(float *)(v8 + 44);
        if (v50 < v51)
        {
          v52 = *(_DWORD *)(v8 + 36);
          *(_DWORD *)(v8 + 36) = *(_DWORD *)(a2 - 12);
          *(_DWORD *)(a2 - 12) = v52;
          v53 = *(_DWORD *)(v8 + 40);
          *(_DWORD *)(v8 + 40) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v53;
          *(float *)(v8 + 44) = v50;
          *(float *)(a2 - 4) = v51;
          v54 = *(float *)(v8 + 44);
          v55 = *(float *)(v8 + 32);
          if (v54 < v55)
          {
            v56 = *(_DWORD *)(v8 + 36);
            v57 = *(_DWORD *)(v8 + 40);
            v58 = *(_QWORD *)(v8 + 24);
            *(_DWORD *)(v8 + 24) = v56;
            *(_DWORD *)(v8 + 28) = v57;
            *(_QWORD *)(v8 + 36) = v58;
            *(float *)(v8 + 32) = v54;
            *(float *)(v8 + 44) = v55;
            v59 = *(float *)(v8 + 20);
            if (v54 < v59)
            {
              v60 = *(_QWORD *)(v8 + 12);
              *(_DWORD *)(v8 + 12) = v56;
              *(_DWORD *)(v8 + 16) = v57;
              *(_QWORD *)(v8 + 24) = v60;
              *(float *)(v8 + 20) = v54;
              *(float *)(v8 + 32) = v59;
              v61 = *(float *)(v8 + 8);
              if (v54 < v61)
              {
                v62 = *(_QWORD *)v8;
                *(_DWORD *)v8 = v56;
                *(_DWORD *)(v8 + 4) = v57;
                *(_QWORD *)(v8 + 12) = v62;
                *(float *)(v8 + 8) = v54;
                *(float *)(v8 + 20) = v61;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v63 = (_QWORD *)(v8 + 12);
          v65 = v8 == a2 || v63 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v65)
            {
              v66 = 0;
              v67 = (_QWORD *)v8;
              do
              {
                v68 = *((float *)v67 + 5);
                v69 = *((float *)v67 + 2);
                v67 = v63;
                if (v68 < v69)
                {
                  v70 = *v63;
                  v71 = v66;
                  while (1)
                  {
                    v72 = (float *)(v8 + v71);
                    v73 = *(_DWORD *)(v8 + v71 + 4);
                    v72[3] = *(float *)(v8 + v71);
                    *((_DWORD *)v72 + 4) = v73;
                    v72[5] = *(float *)(v8 + v71 + 8);
                    if (!v71)
                      break;
                    v71 -= 12;
                    if (v68 >= *(v72 - 1))
                    {
                      v74 = v8 + v71 + 12;
                      goto LABEL_80;
                    }
                  }
                  v74 = v8;
LABEL_80:
                  *(_QWORD *)v74 = v70;
                  *(float *)(v74 + 8) = v68;
                }
                v63 = (_QWORD *)((char *)v67 + 12);
                v66 += 12;
              }
              while ((_QWORD *)((char *)v67 + 12) != (_QWORD *)a2);
            }
          }
          else if (!v65)
          {
            v103 = (_DWORD *)(v8 + 8);
            do
            {
              v104 = *(float *)(v7 + 20);
              v105 = *(float *)(v7 + 8);
              v7 = (uint64_t)v63;
              if (v104 < v105)
              {
                v106 = *v63;
                v107 = v103;
                do
                {
                  v108 = *(v107 - 1);
                  v107[1] = *(v107 - 2);
                  v107[2] = v108;
                  v107[3] = *v107;
                  v109 = *((float *)v107 - 3);
                  v107 -= 3;
                }
                while (v104 < v109);
                *(_QWORD *)(v107 + 1) = v106;
                *((float *)v107 + 3) = v104;
              }
              v63 = (_QWORD *)(v7 + 12);
              v103 += 3;
            }
            while (v7 + 12 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v75 = (unint64_t)(v10 - 2) >> 1;
          v76 = v75;
          do
          {
            v77 = v76;
            if (v75 >= v76)
            {
              v78 = (2 * v76) | 1;
              v79 = v8 + 12 * v78;
              if (2 * v77 + 2 < v10 && *(float *)(v79 + 8) < *(float *)(v79 + 20))
              {
                v79 += 12;
                v78 = 2 * v77 + 2;
              }
              v80 = v8 + 12 * v77;
              v81 = *(float *)(v79 + 8);
              v82 = *(float *)(v80 + 8);
              if (v81 >= v82)
              {
                v83 = *(_QWORD *)v80;
                do
                {
                  v84 = v80;
                  v80 = v79;
                  *(_DWORD *)v84 = *(_DWORD *)v79;
                  *(_DWORD *)(v84 + 4) = *(_DWORD *)(v79 + 4);
                  *(float *)(v84 + 8) = v81;
                  if (v75 < v78)
                    break;
                  v85 = 2 * v78;
                  v78 = (2 * v78) | 1;
                  v79 = v8 + 12 * v78;
                  v86 = v85 + 2;
                  if (v86 < v10 && *(float *)(v79 + 8) < *(float *)(v79 + 20))
                  {
                    v79 += 12;
                    v78 = v86;
                  }
                  v81 = *(float *)(v79 + 8);
                }
                while (v81 >= v82);
                *(_QWORD *)v80 = v83;
                *(float *)(v80 + 8) = v82;
              }
            }
            v76 = v77 - 1;
          }
          while (v77);
          v87 = v9 / 0xCuLL;
          while (2)
          {
            v88 = 0;
            v89 = *(float *)v8;
            v90 = *(_DWORD *)(v8 + 4);
            v91 = *(float *)(v8 + 8);
            v92 = v8;
            do
            {
              v93 = (_DWORD *)v92;
              v92 += 12 * v88 + 12;
              v94 = 2 * v88;
              result = (2 * v88) | 1;
              v88 = result;
              v95 = v94 + 2;
              if (v95 < v87 && *(float *)(v92 + 8) < *(float *)(v92 + 20))
              {
                v92 += 12;
                v88 = v95;
              }
              *v93 = *(_DWORD *)v92;
              v93[1] = *(_DWORD *)(v92 + 4);
              v93[2] = *(_DWORD *)(v92 + 8);
            }
            while (v88 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
            if (v92 != a2 - 12)
            {
              *(_DWORD *)v92 = *(_DWORD *)(a2 - 12);
              *(_DWORD *)(v92 + 4) = *(_DWORD *)(a2 - 8);
              *(_DWORD *)(v92 + 8) = *(_DWORD *)(a2 - 4);
              *(float *)(a2 - 12) = v89;
              *(_DWORD *)(a2 - 8) = v90;
              *(float *)(a2 - 4) = v91;
              v96 = v92 - v8 + 12;
              if (v96 >= 13)
              {
                v97 = (v96 / 0xCuLL - 2) >> 1;
                v98 = v8 + 12 * v97;
                v99 = *(float *)(v98 + 8);
                v91 = *(float *)(v92 + 8);
                if (v99 < v91)
                {
                  v100 = *(_QWORD *)v92;
                  do
                  {
                    v101 = v92;
                    v92 = v98;
                    *(_DWORD *)v101 = *(_DWORD *)v98;
                    *(_DWORD *)(v101 + 4) = *(_DWORD *)(v98 + 4);
                    *(float *)(v101 + 8) = v99;
                    if (!v97)
                      break;
                    v97 = (v97 - 1) >> 1;
                    v98 = v8 + 12 * v97;
                    v99 = *(float *)(v98 + 8);
                  }
                  while (v99 < v91);
                  *(_QWORD *)v92 = v100;
LABEL_112:
                  *(float *)(v92 + 8) = v91;
                }
              }
              a2 -= 12;
              if (v87-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *(float *)v92 = v89;
          *(_DWORD *)(v92 + 4) = v90;
          goto LABEL_112;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 12 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x601)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)(v7 + 12 * v11), (float *)v7, (float *)(a2 - 12));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)v7, (float *)(v7 + 12 * v11), (float *)(a2 - 12));
          v13 = 3 * v11;
          v14 = (float *)(v7 + 12 * v11 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)(v7 + 12), v14, (float *)(a2 - 24));
          v15 = (float *)(v7 + 12 + 4 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)(v7 + 24), v15, (float *)(a2 - 36));
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v14, (float *)v12, v15);
          v16 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v16;
          LODWORD(v16) = *(_DWORD *)(v7 + 8);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v12 + 8);
          *(_DWORD *)(v12 + 8) = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(float *)(v7 + 8);
          if (*(float *)(v7 - 4) < v17)
            goto LABEL_12;
          if (v17 >= *(float *)(a2 - 4))
          {
            v35 = v7 + 12;
            do
            {
              v8 = v35;
              if (v35 >= a2)
                break;
              v36 = *(float *)(v35 + 8);
              v35 += 12;
            }
            while (v17 >= v36);
          }
          else
          {
            v33 = v7;
            do
            {
              v8 = v33 + 12;
              v34 = *(float *)(v33 + 20);
              v33 += 12;
            }
            while (v17 >= v34);
          }
          v37 = (float *)a2;
          if (v8 < a2)
          {
            v38 = a2;
            do
            {
              v37 = (float *)(v38 - 12);
              v39 = *(float *)(v38 - 4);
              v38 -= 12;
            }
            while (v17 < v39);
          }
          v40 = *(_QWORD *)v7;
          while (v8 < (unint64_t)v37)
          {
            v41 = *(float *)v8;
            *(float *)v8 = *v37;
            *v37 = v41;
            v42 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v37[1];
            *((_DWORD *)v37 + 1) = v42;
            v43 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v37[2];
            *((_DWORD *)v37 + 2) = v43;
            do
            {
              v44 = *(float *)(v8 + 20);
              v8 += 12;
            }
            while (v17 >= v44);
            do
            {
              v45 = *(v37 - 1);
              v37 -= 3;
            }
            while (v17 < v45);
          }
          if (v8 - 12 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 12) = v40;
          *(float *)(v8 - 4) = v17;
          continue;
        }
        v17 = *(float *)(v7 + 8);
LABEL_12:
        v18 = *(_QWORD *)v7;
        v19 = v7;
        do
        {
          v20 = v19;
          v19 += 12;
        }
        while (*(float *)(v20 + 20) < v17);
        v21 = a2;
        if (v20 == v7)
        {
          v24 = a2;
          while (v19 < v24)
          {
            v22 = (float *)(v24 - 12);
            v25 = *(float *)(v24 - 4);
            v24 -= 12;
            if (v25 < v17)
              goto LABEL_22;
          }
          v22 = (float *)v24;
        }
        else
        {
          do
          {
            v22 = (float *)(v21 - 12);
            v23 = *(float *)(v21 - 4);
            v21 -= 12;
          }
          while (v23 >= v17);
        }
LABEL_22:
        v8 = v19;
        if (v19 < (unint64_t)v22)
        {
          v26 = v22;
          do
          {
            v27 = *(float *)v8;
            *(float *)v8 = *v26;
            *v26 = v27;
            v28 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v26[1];
            *((_DWORD *)v26 + 1) = v28;
            v29 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v26[2];
            *((_DWORD *)v26 + 2) = v29;
            do
            {
              v30 = *(float *)(v8 + 20);
              v8 += 12;
            }
            while (v30 < v17);
            do
            {
              v31 = *(v26 - 1);
              v26 -= 3;
            }
            while (v31 >= v17);
          }
          while (v8 < (unint64_t)v26);
        }
        if (v8 - 12 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 12);
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
        }
        *(_QWORD *)(v8 - 12) = v18;
        *(float *)(v8 - 4) = v17;
        if (v19 < (unint64_t)v22)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::computeMergePairs(std::set<unsigned int> &,std::set<unsigned int> &,std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>,BOOL)::$_0 &,std::tuple<unsigned int,unsigned int,float>*,false>(v7, v8 - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::computeMergePairs(std::set<unsigned int> &,std::set<unsigned int> &,std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>,BOOL)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v7, v8 - 12);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::computeMergePairs(std::set<unsigned int> &,std::set<unsigned int> &,std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>,BOOL)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 12;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::computeMergePairs(std::set<unsigned int> &,std::set<unsigned int> &,std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>,BOOL)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float v20;
  float v21;
  int v22;
  int v23;
  float v24;
  float v25;
  int v26;
  int v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 4);
      v7 = *(float *)(a1 + 8);
      if (v6 < v7)
      {
        v8 = *(float *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 12);
        *(float *)(a2 - 12) = v8;
        v9 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v9;
        *(float *)(a1 + 8) = v6;
        *(float *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)a1, (float *)(a1 + 12), (float *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>(a1, a1 + 12, a1 + 24, a1 + 36);
      v20 = *(float *)(a2 - 4);
      v21 = *(float *)(a1 + 44);
      if (v20 < v21)
      {
        v22 = *(_DWORD *)(a1 + 36);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v22;
        v23 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v23;
        *(float *)(a1 + 44) = v20;
        *(float *)(a2 - 4) = v21;
        v24 = *(float *)(a1 + 44);
        v25 = *(float *)(a1 + 32);
        if (v24 < v25)
        {
          v26 = *(_DWORD *)(a1 + 36);
          v27 = *(_DWORD *)(a1 + 40);
          v28 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = v26;
          *(_DWORD *)(a1 + 28) = v27;
          *(_QWORD *)(a1 + 36) = v28;
          *(float *)(a1 + 32) = v24;
          *(float *)(a1 + 44) = v25;
          v29 = *(float *)(a1 + 20);
          if (v24 < v29)
          {
            v30 = *(_QWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 12) = v26;
            *(_DWORD *)(a1 + 16) = v27;
            *(_QWORD *)(a1 + 24) = v30;
            *(float *)(a1 + 20) = v24;
            *(float *)(a1 + 32) = v29;
            v31 = *(float *)(a1 + 8);
            if (v24 < v31)
            {
              v32 = *(_QWORD *)a1;
              *(_DWORD *)a1 = v26;
              *(_DWORD *)(a1 + 4) = v27;
              *(_QWORD *)(a1 + 12) = v32;
              *(float *)(a1 + 8) = v24;
              *(float *)(a1 + 20) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererWithTorso::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<unsigned int,unsigned int,float>>>)::$_0 &,std::tuple<unsigned int,unsigned int,float>*>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      v11 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)(v11 + 8);
    if (v14 < *(float *)(v10 + 8))
    {
      v15 = *(_QWORD *)v11;
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_DWORD *)(a1 + v16 + 28);
        *(_DWORD *)(v17 + 36) = *(_DWORD *)(a1 + v16 + 24);
        *(_DWORD *)(v17 + 40) = v18;
        *(_DWORD *)(v17 + 44) = *(_DWORD *)(a1 + v16 + 32);
        if (v16 == -24)
          break;
        v16 -= 12;
        if (v14 >= *(float *)(v17 + 20))
        {
          v19 = a1 + v16 + 36;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(_QWORD *)v19 = v15;
      *(float *)(v19 + 8) = v14;
      if (++v13 == 8)
        return v11 + 12 == a2;
    }
    v10 = v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2)
      return 1;
  }
}

_QWORD *std::map<long long,unsigned long>::at(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  if (!a1)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = a1[4];
      if (v2 <= a2)
        break;
      a1 = (_QWORD *)*a1;
      if (!a1)
        goto LABEL_8;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (_QWORD *)a1[1];
    if (!a1)
      goto LABEL_8;
  }
}

void std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 7));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1A145210C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, uint64_t *a2, unsigned int a3, int a4)
{
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;

  v5 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      v10 = a2;
LABEL_16:
      if (v8)
        v13 = (uint64_t **)v10;
      else
        v13 = (uint64_t **)a2;
      if (v8)
        v11 = (uint64_t **)(v10 + 1);
      else
        v11 = (uint64_t **)a2;
      goto LABEL_22;
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3)
      goto LABEL_16;
    v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v17;
          v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3)
            break;
          v17 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v18 >= a3)
          break;
        v6 = v13 + 1;
        v17 = v13[1];
        if (!v17)
          goto LABEL_44;
      }
LABEL_45:
      v11 = v6;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
  if (v7 >= a3)
    return result;
  v11 = (uint64_t **)(a2 + 1);
  v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      v11 = (uint64_t **)v12;
      v12 = (uint64_t *)*v12;
      v13 = v11;
      v14 = v11;
    }
    while (v12);
  }
  else
  {
    v14 = (uint64_t **)a2;
    do
    {
      v19 = (uint64_t *)v14;
      v14 = (uint64_t **)v14[2];
    }
    while (*v14 != v19);
    v13 = (uint64_t **)a2;
  }
  if (v14 != v6 && *((_DWORD *)v14 + 7) <= a3)
  {
    v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v20;
          v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3)
            break;
          v20 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v21 >= a3)
          goto LABEL_45;
        v6 = v13 + 1;
        v20 = v13[1];
        if (!v20)
          goto LABEL_44;
      }
    }
LABEL_43:
    v13 = (uint64_t **)(result + 1);
    goto LABEL_44;
  }
LABEL_22:
  v6 = v11;
  if (!*v11)
  {
LABEL_44:
    v22 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v22 + 7) = a4;
    return std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(v5, (uint64_t)v13, v6, v22);
  }
  return result;
}

void std::__shared_ptr_emplace<std::vector<std::tuple<unsigned int,unsigned int,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BBF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<unsigned int,unsigned int,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BBF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<unsigned int,unsigned int,float>>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

__int32 *std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(__int32 *a1, __int32 *a2, __int32 *a3)
{
  __int32 *result;
  __int32 *v6;

  result = wmemchr(a1, *a3, a2 - a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      if (*v6 != *a3)
        *result++ = *v6;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__list_imp<long long>::clear(v1 + 5);
    operator delete(v1);
  }
}

void vision::mod::GreedyClustererFacesWithTorso::getAverageDescriptorOfClusterContainingFace(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  vDSP_Length v17;
  uint64_t v18;
  _QWORD *exception;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  float __B;
  uint64_t v34;

  if ((vision::mod::GreedyClustererFacesWithTorso::isFaceIdInClustererState((vision::mod::GreedyClustererFacesWithTorso *)a1, a2) & 1) == 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v20 = 5244;
    goto LABEL_24;
  }
  if (!a4)
  {
    exception = __cxa_allocate_exception(8uLL);
    v20 = 5245;
LABEL_24:
    *exception = v20;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v8 = *(_DWORD *)(a1[9] + 104);
  if (v8 >= 0)
    v9 = *(_DWORD *)(a1[9] + 104);
  else
    v9 = v8 + 1;
  memset(a4, 48, 4 * (v9 >> 1));
  v10 = (_QWORD *)a1[19];
  if (!v10)
    goto LABEL_16;
  v11 = a1 + 19;
  do
  {
    v12 = v10[4];
    v13 = v12 < a2;
    if (v12 >= a2)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (!v13)
      v11 = v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 == a1 + 19 || v11[4] > a2)
LABEL_16:
    v11 = a1 + 19;
  v15 = v11[5];
  v34 = v15;
  v16 = *(_QWORD **)(a3 + 8);
  if (!v16)
  {
LABEL_23:
    exception = __cxa_allocate_exception(8uLL);
    v20 = 5224;
    goto LABEL_24;
  }
  v17 = (uint64_t)v9 >> 1;
  while (1)
  {
    v18 = v16[4];
    if (v15 >= v18)
      break;
LABEL_22:
    v16 = (_QWORD *)*v16;
    if (!v16)
      goto LABEL_23;
  }
  if (v18 < v15)
  {
    ++v16;
    goto LABEL_22;
  }
  v21 = std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)a3, v15, &v34);
  v23 = (uint64_t *)v21[5];
  v22 = (uint64_t *)v21[6];
  __B = 1.0 / (float)(unint64_t)(v22 - v23);
  if (v22 != v23)
  {
    v24 = a1 + 16;
    do
    {
      v25 = (_QWORD *)*v24;
      if (!*v24)
        goto LABEL_37;
      v26 = *v23;
      v27 = a1 + 16;
      do
      {
        v28 = v25[4];
        v29 = v28 < v26;
        if (v28 >= v26)
          v30 = v25;
        else
          v30 = v25 + 1;
        if (!v29)
          v27 = v25;
        v25 = (_QWORD *)*v30;
      }
      while (*v30);
      if (v27 == v24 || v26 < v27[4])
LABEL_37:
        v27 = a1 + 16;
      v31 = *(_QWORD *)(a1[9] + 88);
      if (v31)
        v32 = *(_QWORD *)v31
            + *((unsigned int *)v27 + 10) * (unint64_t)*(unsigned int *)(*(_QWORD *)v31 + 16)
            + 24;
      else
        v32 = 0;
      vDSP_vadd((const float *)(v32 + 40), 1, (const float *)a4, 1, (float *)a4, 1, v17);
      ++v23;
    }
    while (v23 != v22);
  }
  vDSP_vsmul((const float *)a4, 1, &__B, (float *)a4, 1, v17);
}

uint64_t *std::__tree<std::__value_type<long long,std::vector<long long>>,std::__map_value_compare<long long,std::__value_type<long long,std::vector<long long>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x40uLL);
    v9[4] = *a3;
    v9[5] = 0;
    v9[6] = 0;
    v9[7] = 0;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__equal_range_multi<long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (!*v6)
    return result;
  while (1)
  {
    v7 = result[1];
    if (v7 == a2)
      break;
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= *(_QWORD *)&v2)
        v7 %= *(_QWORD *)&v2;
    }
    else
    {
      v7 &= *(_QWORD *)&v2 - 1;
    }
    if (v7 != v4)
      return 0;
LABEL_17:
    result = (_QWORD *)*result;
    if (!result)
      return result;
  }
  if (result[2] != a2)
    goto LABEL_17;
  v8 = result;
  do
    v8 = (_QWORD *)*v8;
  while (v8 && v8[2] == a2);
  return result;
}

void allKeys<long long,unsigned long>(char **a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if ((unint64_t)v7 >= v6)
      {
        v8 = (v7 - v5) >> 3;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v6 - (_QWORD)v5) >> 2 > v9)
          v9 = (uint64_t)(v6 - (_QWORD)v5) >> 2;
        if (v6 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
        else
          v11 = 0;
        v12 = (char *)(v10 + 8 * v8);
        *(_QWORD *)v12 = v3[4];
        v13 = v12 + 8;
        while (v7 != v5)
        {
          v14 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v12 - 1) = v14;
          v12 -= 8;
        }
        v6 = v10 + 8 * v11;
        *a1 = v12;
        a1[1] = v13;
        a1[2] = (char *)v6;
        if (v5)
          operator delete(v5);
        v5 = v12;
        v7 = v13;
      }
      else
      {
        *(_QWORD *)v7 = v3[4];
        v7 += 8;
      }
      a1[1] = v7;
      v15 = (_QWORD *)v3[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v3[2];
          v17 = *v16 == (_QWORD)v3;
          v3 = v16;
        }
        while (!v17);
      }
      v3 = v16;
    }
    while (v16 != v2);
  }
}

void sub_1A14528B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::dist_greedy_status_t::dist_greedy_status_t(uint64_t a1, int a2, int a3)
{
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v6 = operator new(8uLL);
  *v6 = 1;
  v17 = v6 + 1;
  v18 = v6 + 1;
  v16 = v6;
  if (a2 <= 0)
    v7 = 0;
  else
    v7 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  vision::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(a1, &v16, v7, 4 * a2, 1, 1);
  *(_QWORD *)a1 = &off_1E453A8D0;
  *(_DWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = a2 & 0x3FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 96) = v8;
  operator delete(v6);
  v9 = operator new(8uLL);
  *v9 = 1;
  v17 = v9 + 1;
  v18 = v9 + 1;
  v16 = v9;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  vision::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(a1 + 120, &v16, v10, 4 * a2, 1, 1);
  *(_QWORD *)(a1 + 120) = &off_1E453A8D0;
  *(_DWORD *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = v8;
  operator delete(v9);
  v11 = *(_QWORD *)(a1 + 56);
  if (!v11)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 5243;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v12 = *(_QWORD *)(a1 + 176);
  if (!v12)
  {
    v15 = __cxa_allocate_exception(8uLL);
    *v15 = 5243;
    __cxa_throw(v15, MEMORY[0x1E0DE4F28], 0);
  }
  *(_DWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 224) = a3;
  *(_QWORD *)(a1 + 240) = v11;
  *(_QWORD *)(a1 + 248) = v12;
  return a1;
}

void sub_1A1452A98(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  vision::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32(v2);
  vision::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32(v1);
  _Unwind_Resume(a1);
}

void vision::mod::dist_greedy_status_t::~dist_greedy_status_t(vision::mod::dist_greedy_status_t *this)
{
  void **v2;

  *((_QWORD *)this + 15) = &off_1E453A8D0;
  v2 = (void **)((char *)this + 120);
  free(*((void **)this + 29));
  vision::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(v2);
  *(_QWORD *)this = &off_1E453A8D0;
  free(*((void **)this + 14));
  vision::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract((void **)this);
}

_QWORD *std::map<unsigned long,std::list<long long>>::at(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  if (!a1)
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = a1[4];
      if (v2 <= a2)
        break;
      a1 = (_QWORD *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (_QWORD *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

uint64_t *std::list<long long>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<long long,void *>,std::__list_const_iterator<long long,void *>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = result;
  for (i = (uint64_t *)result[1]; a2 != a3 && i != result; i = (uint64_t *)i[1])
  {
    i[2] = *(_QWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i != result)
    return std::list<long long>::erase((uint64_t)result, i, result);
  if (a2 != a3)
  {
    result = (uint64_t *)operator new(0x18uLL);
    v8 = result;
    *result = 0;
    result[1] = 0;
    v9 = *(_QWORD *)(a2 + 8);
    result[2] = *(_QWORD *)(a2 + 16);
    v10 = 1;
    if (v9 != a3)
    {
      v11 = result;
      do
      {
        result = (uint64_t *)operator new(0x18uLL);
        *result = (uint64_t)v11;
        result[1] = 0;
        result[2] = *(_QWORD *)(v9 + 16);
        v11[1] = (uint64_t)result;
        ++v10;
        v9 = *(_QWORD *)(v9 + 8);
        v11 = result;
      }
      while (v9 != a3);
    }
    v12 = *v5;
    *(_QWORD *)(v12 + 8) = v8;
    *v8 = v12;
    *v5 = (uint64_t)result;
    result[1] = (uint64_t)v5;
    v5[2] += v10;
  }
  return result;
}

void sub_1A1452C88(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1A1452CA8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char **std::vector<std::pair<float,unsigned long>>::vector(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(16 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[16 * a2];
    a1[2] = v5;
    do
    {
      *(_DWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1A1452D28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  uint64_t v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  unint64_t v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  float v89;
  float v90;
  float v91;
  uint64_t v92;
  unint64_t v93;
  float *v95;
  uint64_t v96;
  float v97;
  float v98;
  uint64_t v99;
  float *v100;
  float *v101;
  uint64_t v102;

  v7 = result;
LABEL_2:
  v8 = (_DWORD *)(a2 - 16);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = (uint64_t)(a2 - v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v41 = *(float *)v9;
        if (*(float *)v8 < *(float *)v9)
        {
          *(_DWORD *)v9 = *v8;
          *(float *)(a2 - 16) = v41;
          v42 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v42;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v9, v9 + 16, a2 - 16);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v9, v9 + 16, v9 + 32, a2 - 16);
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v9, v9 + 16, v9 + 32, v9 + 48);
        v43 = *(float *)(v9 + 48);
        if (*(float *)v8 < v43)
        {
          *(_DWORD *)(v9 + 48) = *v8;
          *(float *)(a2 - 16) = v43;
          v44 = *(_QWORD *)(v9 + 56);
          *(_QWORD *)(v9 + 56) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v44;
          v45 = *(float *)(v9 + 48);
          v46 = *(float *)(v9 + 32);
          if (v45 < v46)
          {
            *(float *)(v9 + 32) = v45;
            *(float *)(v9 + 48) = v46;
            v47 = *(_QWORD *)(v9 + 40);
            v48 = *(_QWORD *)(v9 + 56);
            *(_QWORD *)(v9 + 40) = v48;
            *(_QWORD *)(v9 + 56) = v47;
            v49 = *(float *)(v9 + 16);
            if (v45 < v49)
            {
              *(float *)(v9 + 16) = v45;
              *(float *)(v9 + 32) = v49;
              v50 = *(_QWORD *)(v9 + 24);
              *(_QWORD *)(v9 + 24) = v48;
              *(_QWORD *)(v9 + 40) = v50;
              v51 = *(float *)v9;
              if (v45 < *(float *)v9)
              {
                *(float *)v9 = v45;
                *(float *)(v9 + 16) = v51;
                v52 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)(v9 + 8) = v48;
                *(_QWORD *)(v9 + 24) = v52;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 383)
        {
          v53 = v9 + 16;
          v55 = v9 == a2 || v53 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = v9;
              do
              {
                v58 = v53;
                v59 = *(float *)(v57 + 16);
                v60 = *(float *)v57;
                if (v59 < *(float *)v57)
                {
                  v61 = *(_QWORD *)(v57 + 24);
                  v62 = v56;
                  while (1)
                  {
                    v63 = v9 + v62;
                    *(float *)(v63 + 16) = v60;
                    *(_QWORD *)(v63 + 24) = *(_QWORD *)(v9 + v62 + 8);
                    if (!v62)
                      break;
                    v60 = *(float *)(v63 - 16);
                    v62 -= 16;
                    if (v59 >= v60)
                    {
                      v64 = v9 + v62 + 16;
                      goto LABEL_80;
                    }
                  }
                  v64 = v9;
LABEL_80:
                  *(float *)v64 = v59;
                  *(_QWORD *)(v64 + 8) = v61;
                }
                v53 = v58 + 16;
                v56 += 16;
                v57 = v58;
              }
              while (v58 + 16 != a2);
            }
          }
          else if (!v55)
          {
            v95 = (float *)(v9 + 24);
            do
            {
              v96 = v53;
              v97 = *(float *)(v7 + 16);
              v98 = *(float *)v7;
              if (v97 < *(float *)v7)
              {
                v99 = *(_QWORD *)(v7 + 24);
                v100 = v95;
                do
                {
                  v101 = v100;
                  *(v100 - 2) = v98;
                  v102 = *((_QWORD *)v100 - 2);
                  v100 -= 4;
                  *(_QWORD *)v101 = v102;
                  v98 = *(v101 - 10);
                }
                while (v97 < v98);
                *(v100 - 2) = v97;
                *(_QWORD *)v100 = v99;
              }
              v53 = v96 + 16;
              v95 += 4;
              v7 = v96;
            }
            while (v96 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v65 = (v11 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = v9 + 16 * v68;
                if (2 * v67 + 2 < (uint64_t)v11 && *(float *)v69 < *(float *)(v69 + 16))
                {
                  v69 += 16;
                  v68 = 2 * v67 + 2;
                }
                v70 = v9 + 16 * v67;
                v71 = *(float *)v70;
                v72 = *(float *)v69;
                v73 = *(float *)v70;
                if (*(float *)v69 >= *(float *)v70)
                {
                  v74 = *(_QWORD *)(v70 + 8);
                  do
                  {
                    v75 = v70;
                    v70 = v69;
                    *(float *)v75 = v72;
                    *(_QWORD *)(v75 + 8) = *(_QWORD *)(v69 + 8);
                    if (v65 < v68)
                      break;
                    v76 = 2 * v68;
                    v68 = (2 * v68) | 1;
                    v69 = v9 + 16 * v68;
                    v77 = v76 + 2;
                    if (v77 < (uint64_t)v11)
                    {
                      result = v69 + 16;
                      if (*(float *)v69 < *(float *)(v69 + 16))
                      {
                        v69 += 16;
                        v68 = v77;
                      }
                    }
                    v72 = *(float *)v69;
                  }
                  while (*(float *)v69 >= v73);
                  *(float *)v70 = v71;
                  *(_QWORD *)(v70 + 8) = v74;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v78 = (unint64_t)v10 >> 4;
            do
            {
              v79 = 0;
              v80 = *(float *)v9;
              v81 = *(_QWORD *)(v9 + 8);
              v82 = v9;
              do
              {
                v83 = v82;
                v82 += 16 * v79 + 16;
                v84 = 2 * v79;
                v79 = (2 * v79) | 1;
                v85 = v84 + 2;
                if (v85 < v78 && *(float *)v82 < *(float *)(v82 + 16))
                {
                  v82 += 16;
                  v79 = v85;
                }
                *(_DWORD *)v83 = *(_DWORD *)v82;
                *(_QWORD *)(v83 + 8) = *(_QWORD *)(v82 + 8);
              }
              while (v79 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              if (v82 == a2 - 16)
              {
                *(float *)v82 = v80;
                *(_QWORD *)(v82 + 8) = v81;
              }
              else
              {
                *(_DWORD *)v82 = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v82 + 8) = *(_QWORD *)(a2 - 8);
                *(float *)(a2 - 16) = v80;
                *(_QWORD *)(a2 - 8) = v81;
                v86 = v82 - v9 + 16;
                if (v86 >= 17)
                {
                  v87 = (((unint64_t)v86 >> 4) - 2) >> 1;
                  v88 = v9 + 16 * v87;
                  v89 = *(float *)v82;
                  v90 = *(float *)v88;
                  v91 = *(float *)v82;
                  if (*(float *)v88 < *(float *)v82)
                  {
                    v92 = *(_QWORD *)(v82 + 8);
                    do
                    {
                      v93 = v82;
                      v82 = v88;
                      *(float *)v93 = v90;
                      *(_QWORD *)(v93 + 8) = *(_QWORD *)(v88 + 8);
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = v9 + 16 * v87;
                      v90 = *(float *)v88;
                    }
                    while (*(float *)v88 < v91);
                    *(float *)v82 = v89;
                    *(_QWORD *)(v82 + 8) = v92;
                  }
                }
              }
              a2 -= 16;
            }
            while (v78-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = v9 + 16 * (v11 >> 1);
        if ((unint64_t)v10 < 0x801)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v7 + 16 * (v11 >> 1), v7, a2 - 16);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v7, v7 + 16 * (v11 >> 1), a2 - 16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v7 + 16, v13 - 16, a2 - 32);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v7 + 32, v7 + 16 + 16 * v12, a2 - 48);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v13 - 16, v13, v7 + 16 + 16 * v12);
          v14 = *(float *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v13;
          *(float *)v13 = v14;
          v15 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = v15;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(float *)v7;
          v17 = *(_QWORD *)(v7 + 8);
          v18 = *(float *)v7;
          if (*(float *)(v7 - 16) < *(float *)v7)
            goto LABEL_12;
          if (v18 >= *(float *)v8)
          {
            v33 = v7 + 16;
            do
            {
              v9 = v33;
              if (v33 >= a2)
                break;
              v33 += 16;
            }
            while (v18 >= *(float *)v9);
          }
          else
          {
            v9 = v7;
            do
            {
              v32 = *(float *)(v9 + 16);
              v9 += 16;
            }
            while (v18 >= v32);
          }
          v34 = a2;
          if (v9 < a2)
          {
            v34 = a2;
            do
            {
              v35 = *(float *)(v34 - 16);
              v34 -= 16;
            }
            while (v18 < v35);
          }
          if (v9 < v34)
          {
            v36 = *(float *)v9;
            v37 = *(float *)v34;
            do
            {
              *(float *)v9 = v37;
              *(float *)v34 = v36;
              v38 = *(_QWORD *)(v9 + 8);
              *(_QWORD *)(v9 + 8) = *(_QWORD *)(v34 + 8);
              *(_QWORD *)(v34 + 8) = v38;
              do
              {
                v39 = *(float *)(v9 + 16);
                v9 += 16;
                v36 = v39;
              }
              while (v18 >= v39);
              do
              {
                v40 = *(float *)(v34 - 16);
                v34 -= 16;
                v37 = v40;
              }
              while (v18 < v40);
            }
            while (v9 < v34);
          }
          if (v9 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v9 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v9 - 8);
          }
          a4 = 0;
          *(float *)(v9 - 16) = v16;
          *(_QWORD *)(v9 - 8) = v17;
          continue;
        }
        v16 = *(float *)v7;
        v17 = *(_QWORD *)(v7 + 8);
        v18 = *(float *)v7;
LABEL_12:
        v19 = v7;
        do
        {
          v20 = v19;
          v21 = *(float *)(v19 + 16);
          v19 += 16;
          v22 = v21;
        }
        while (v18 > v21);
        v23 = (float *)a2;
        if (v20 == v7)
        {
          v23 = (float *)a2;
          do
          {
            if (v19 >= (unint64_t)v23)
              break;
            v25 = *(v23 - 4);
            v23 -= 4;
          }
          while (v18 <= v25);
        }
        else
        {
          do
          {
            v24 = *(v23 - 4);
            v23 -= 4;
          }
          while (v18 <= v24);
        }
        if (v19 >= (unint64_t)v23)
        {
          v9 = v19;
        }
        else
        {
          v26 = *v23;
          v9 = v19;
          v27 = v23;
          do
          {
            *(float *)v9 = v26;
            *v27 = v22;
            v28 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *((_QWORD *)v27 + 1);
            *((_QWORD *)v27 + 1) = v28;
            do
            {
              v29 = *(float *)(v9 + 16);
              v9 += 16;
              v22 = v29;
            }
            while (v18 > v29);
            do
            {
              v30 = *(v27 - 4);
              v27 -= 4;
              v26 = v30;
            }
            while (v18 <= v30);
          }
          while (v9 < (unint64_t)v27);
        }
        if (v9 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v9 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v9 - 8);
        }
        *(float *)(v9 - 16) = v16;
        *(_QWORD *)(v9 - 8) = v17;
        if (v19 < (unint64_t)v23)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *,false>(v7, v9 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v7, v9 - 16);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(v9, a2);
        if (!(_DWORD)result)
        {
          if (v31)
            continue;
          goto LABEL_33;
        }
        a2 = v9 - 16;
        if (!v31)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(float *)a2;
  v4 = *(float *)result;
  v5 = *(float *)a2;
  v6 = *(float *)a3;
  v7 = *(float *)a3;
  if (*(float *)a2 >= *(float *)result)
  {
    if (v7 < v5)
    {
      *(float *)a2 = v6;
      *(float *)a3 = v3;
      v9 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v9;
      v10 = *(float *)result;
      if (*(float *)a2 < *(float *)result)
      {
        *(_DWORD *)result = *(_DWORD *)a2;
        *(float *)a2 = v10;
        v11 = *(_QWORD *)(result + 8);
        *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v11;
      }
    }
  }
  else if (v7 >= v5)
  {
    *(float *)result = v3;
    *(float *)a2 = v4;
    v12 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v12;
    if (*(float *)a3 < v4)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v12;
    }
  }
  else
  {
    *(float *)result = v6;
    *(float *)a3 = v4;
    v8 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v8;
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(a1, a2, a3);
  v9 = *(float *)a3;
  if (*(float *)a4 < *(float *)a3)
  {
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(float *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    v11 = *(float *)a2;
    if (*(float *)a3 < *(float *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v11;
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v12;
      v13 = *(float *)a1;
      if (*(float *)a2 < *(float *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(float *)a2 = v13;
        v14 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)a1;
      if (*(float *)(a2 - 16) < *(float *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(float *)(a2 - 16) = v6;
        v7 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a1 + 48);
      v19 = *(float *)(a1 + 48);
      if (*(float *)(a2 - 16) < v19)
      {
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(float *)(a2 - 16) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v20;
        v21 = *(float *)(a1 + 48);
        v22 = *(float *)(a1 + 32);
        if (v21 < v22)
        {
          *(float *)(a1 + 32) = v21;
          *(float *)(a1 + 48) = v22;
          v23 = *(_QWORD *)(a1 + 40);
          v24 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 40) = v24;
          *(_QWORD *)(a1 + 56) = v23;
          v25 = *(float *)(a1 + 16);
          if (v21 < v25)
          {
            *(float *)(a1 + 16) = v21;
            *(float *)(a1 + 32) = v25;
            v26 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v24;
            *(_QWORD *)(a1 + 40) = v26;
            v27 = *(float *)a1;
            if (v21 < *(float *)a1)
            {
              *(float *)a1 = v21;
              *(float *)(a1 + 16) = v27;
              v28 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v24;
              *(_QWORD *)(a1 + 24) = v28;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (float *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::anomalyForGroup(std::vector<long long> const&,long long,float &)::$_0 &,std::pair<float,unsigned long> *>(a1, a1 + 16, a1 + 32);
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(float *)v9;
    v13 = *(float *)v9;
    v14 = *v8;
    if (*(float *)v9 < *v8)
    {
      v15 = *(_QWORD *)(v9 + 8);
      v16 = v10;
      while (1)
      {
        v17 = a1 + v16;
        *(float *)(v17 + 48) = v14;
        *(_QWORD *)(v17 + 56) = *(_QWORD *)(a1 + v16 + 40);
        if (v16 == -32)
          break;
        v14 = *(float *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          v18 = a1 + v16 + 48;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(float *)v18 = v12;
      *(_QWORD *)(v18 + 8) = v15;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = (float *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned long,void>(_QWORD *a1, size_t a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E453BC30;
  result = std::vector<unsigned char>::vector(v4 + 3, a2);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1A1453910(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BC30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BC30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

float *std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *,false>(float *result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  int v15;
  float v16;
  float v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  float *v24;
  float v25;
  float *v26;
  float v27;
  int v28;
  float *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  float v35;
  unint64_t v36;
  float v37;
  _DWORD *v38;
  unint64_t v39;
  float v40;
  float v41;
  float v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  float *v75;
  uint64_t v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  int v84;
  unint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  float v93;
  int v94;
  _DWORD *v95;
  float *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  float v101;
  float *v102;
  float *v103;
  int v104;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = (_QWORD *)(a2 - 8);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = (uint64_t)(a2 - v9) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v46 = *(_QWORD *)v9;
        v47 = HIDWORD(*v8);
        v48 = HIDWORD(*(_QWORD *)v9);
        if (COERCE_FLOAT(HIDWORD(*v8)) < COERCE_FLOAT(HIDWORD(*(_QWORD *)v9)))
        {
          *(_DWORD *)v9 = *v8;
          *(_DWORD *)(v9 + 4) = v47;
          *(_DWORD *)(a2 - 8) = v46;
          *(_DWORD *)(a2 - 4) = v48;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)v9, (float *)(v9 + 8), (float *)(a2 - 8));
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), a2 - 8);
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), v9 + 24);
        v49 = *(_QWORD *)(v9 + 24);
        v50 = HIDWORD(*v8);
        if (COERCE_FLOAT(HIDWORD(*v8)) < *((float *)&v49 + 1))
        {
          *(_DWORD *)(v9 + 24) = *v8;
          *(_DWORD *)(v9 + 28) = v50;
          *(_QWORD *)(a2 - 8) = v49;
          v51 = *(_QWORD *)(v9 + 16);
          v52 = *(_QWORD *)(v9 + 24);
          if (*((float *)&v52 + 1) < *((float *)&v51 + 1))
          {
            *(_QWORD *)(v9 + 16) = v52;
            *(_QWORD *)(v9 + 24) = v51;
            v53 = *(_QWORD *)(v9 + 8);
            v54 = *(_QWORD *)(v9 + 16);
            if (*((float *)&v54 + 1) < *((float *)&v53 + 1))
            {
              *(_QWORD *)(v9 + 8) = v54;
              *(_QWORD *)(v9 + 16) = v53;
              v55 = *(_QWORD *)v9;
              v56 = *(_QWORD *)(v9 + 8);
              v57 = HIDWORD(*(_QWORD *)v9);
              if (*((float *)&v56 + 1) < COERCE_FLOAT(HIDWORD(*(_QWORD *)v9)))
              {
                *(_QWORD *)v9 = v56;
                *(_DWORD *)(v9 + 8) = v55;
                *(_DWORD *)(v9 + 12) = v57;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v58 = v9 + 8;
          v60 = v9 == a2 || v58 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              v61 = 0;
              v62 = v9;
              do
              {
                v63 = v58;
                v64 = *(_QWORD *)v62;
                if (*(float *)(v62 + 12) < COERCE_FLOAT(HIDWORD(*(_QWORD *)v62)))
                {
                  v65 = *(_DWORD *)(v62 + 8);
                  v66 = *(float *)(v62 + 12);
                  v67 = v61;
                  while (1)
                  {
                    v68 = v9 + v67;
                    *(_DWORD *)(v68 + 8) = v64;
                    *(_DWORD *)(v68 + 12) = *(_DWORD *)(v9 + v67 + 4);
                    if (!v67)
                      break;
                    v64 = *(_QWORD *)(v68 - 8);
                    v67 -= 8;
                    if (v66 >= *((float *)&v64 + 1))
                    {
                      v69 = v9 + v67 + 8;
                      goto LABEL_82;
                    }
                  }
                  v69 = v9;
LABEL_82:
                  *(_DWORD *)v69 = v65;
                  *(float *)(v69 + 4) = v66;
                }
                v58 = v63 + 8;
                v61 += 8;
                v62 = v63;
              }
              while (v63 + 8 != a2);
            }
          }
          else if (!v60)
          {
            v97 = (float *)(v9 + 12);
            do
            {
              v98 = v58;
              v99 = *(_QWORD *)v7;
              if (*(float *)(v7 + 12) < COERCE_FLOAT(HIDWORD(*(_QWORD *)v7)))
              {
                v100 = *(_DWORD *)(v7 + 8);
                v101 = *(float *)(v7 + 12);
                v102 = v97;
                do
                {
                  v103 = v102;
                  v104 = *((_DWORD *)v102 - 2);
                  v102 -= 2;
                  *((_DWORD *)v103 - 1) = v99;
                  *(_DWORD *)v103 = v104;
                  v99 = *(_QWORD *)(v103 - 5);
                }
                while (v101 < *((float *)&v99 + 1));
                *((_DWORD *)v102 - 1) = v100;
                *v102 = v101;
              }
              v58 = v98 + 8;
              v97 += 2;
              v7 = v98;
            }
            while (v98 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v70 = (v11 - 2) >> 1;
            v71 = v70;
            do
            {
              v72 = v71;
              if (v70 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = v9 + 8 * v73;
                if (2 * v72 + 2 < (uint64_t)v11 && *(float *)(v74 + 4) < *(float *)(v74 + 12))
                {
                  v74 += 8;
                  v73 = 2 * v72 + 2;
                }
                v75 = (float *)(v9 + 8 * v72);
                v76 = *(_QWORD *)v74;
                v77 = v75[1];
                if (COERCE_FLOAT(HIDWORD(*(_QWORD *)v74)) >= v77)
                {
                  v78 = *v75;
                  do
                  {
                    result = v75;
                    v75 = (float *)v74;
                    *(_DWORD *)result = v76;
                    result[1] = *(float *)(v74 + 4);
                    if (v70 < v73)
                      break;
                    v79 = 2 * v73;
                    v73 = (2 * v73) | 1;
                    v74 = v9 + 8 * v73;
                    v80 = v79 + 2;
                    if (v80 < (uint64_t)v11 && *(float *)(v74 + 4) < *(float *)(v74 + 12))
                    {
                      v74 += 8;
                      v73 = v80;
                    }
                    v76 = *(_QWORD *)v74;
                    result = (float *)HIDWORD(*(_QWORD *)v74);
                  }
                  while (COERCE_FLOAT(HIDWORD(*(_QWORD *)v74)) >= v77);
                  *v75 = v78;
                  v75[1] = v77;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v81 = (unint64_t)v10 >> 3;
            do
            {
              v82 = 0;
              v83 = *(float *)v9;
              v84 = *(_DWORD *)(v9 + 4);
              v85 = v9;
              do
              {
                v86 = (_DWORD *)v85;
                v85 += 8 * v82 + 8;
                v87 = 2 * v82;
                v82 = (2 * v82) | 1;
                v88 = v87 + 2;
                if (v88 < v81 && *(float *)(v85 + 4) < *(float *)(v85 + 12))
                {
                  v85 += 8;
                  v82 = v88;
                }
                *v86 = *(_DWORD *)v85;
                v86[1] = *(_DWORD *)(v85 + 4);
              }
              while (v82 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
              if (v85 == a2 - 8)
              {
                *(float *)v85 = v83;
                *(_DWORD *)(v85 + 4) = v84;
              }
              else
              {
                *(_DWORD *)v85 = *(_DWORD *)(a2 - 8);
                *(_DWORD *)(v85 + 4) = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 8) = v83;
                *(_DWORD *)(a2 - 4) = v84;
                v89 = v85 - v9 + 8;
                if (v89 >= 9)
                {
                  v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
                  v91 = v9 + 8 * v90;
                  v92 = *(_QWORD *)v91;
                  v93 = *(float *)(v85 + 4);
                  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)v91)) < v93)
                  {
                    v94 = *(_DWORD *)v85;
                    do
                    {
                      v95 = (_DWORD *)v85;
                      v85 = v91;
                      *v95 = v92;
                      v95[1] = *(_DWORD *)(v91 + 4);
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = v9 + 8 * v90;
                      v92 = *(_QWORD *)v91;
                    }
                    while (COERCE_FLOAT(HIDWORD(*(_QWORD *)v91)) < v93);
                    *(_DWORD *)v85 = v94;
                    *(float *)(v85 + 4) = v93;
                  }
                }
              }
              a2 -= 8;
            }
            while (v81-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = v9 + 8 * (v11 >> 1);
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)(v7 + 8 * (v11 >> 1)), (float *)v7, (float *)(a2 - 8));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)v7, (float *)(v7 + 8 * (v11 >> 1)), (float *)(a2 - 8));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)(v7 + 8), (float *)(v13 - 8), (float *)(a2 - 16));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)(v7 + 16), (float *)(v7 + 8 + 8 * v12), (float *)(a2 - 24));
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)(v13 - 8), (float *)v13, (float *)(v7 + 8 + 8 * v12));
          v14 = *(float *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v13;
          *(float *)v13 = v14;
          v15 = *(_DWORD *)(v7 + 4);
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v13 + 4);
          *(_DWORD *)(v13 + 4) = v15;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(float *)v7;
          v17 = *(float *)(v7 + 4);
          v18 = v17;
          if (*(float *)(v7 - 4) < v17)
            goto LABEL_12;
          if (v17 >= *(float *)(a2 - 4))
          {
            v36 = v7 + 8;
            do
            {
              v9 = v36;
              if (v36 >= a2)
                break;
              v37 = *(float *)(v36 + 4);
              v36 += 8;
            }
            while (v17 >= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v9 = v34 + 8;
              v35 = *(float *)(v34 + 12);
              v34 += 8;
            }
            while (v17 >= v35);
          }
          v38 = (_DWORD *)a2;
          if (v9 < a2)
          {
            v39 = a2;
            do
            {
              v38 = (_DWORD *)(v39 - 8);
              v40 = *(float *)(v39 - 4);
              v39 -= 8;
            }
            while (v17 < v40);
          }
          if (v9 < (unint64_t)v38)
          {
            v41 = *(float *)v9;
            v42 = *(float *)v38;
            do
            {
              *(float *)v9 = v42;
              *(float *)v38 = v41;
              v43 = *(_DWORD *)(v9 + 4);
              *(_DWORD *)(v9 + 4) = v38[1];
              v38[1] = v43;
              do
              {
                v44 = *(_QWORD *)(v9 + 8);
                v9 += 8;
                v41 = *(float *)&v44;
              }
              while (v17 >= *((float *)&v44 + 1));
              do
              {
                v45 = *((_QWORD *)v38 - 1);
                v38 -= 2;
                v42 = *(float *)&v45;
              }
              while (v17 < *((float *)&v45 + 1));
            }
            while (v9 < (unint64_t)v38);
          }
          if (v9 - 8 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v9 - 8);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v9 - 4);
          }
          a4 = 0;
          *(float *)(v9 - 8) = v16;
          *(float *)(v9 - 4) = v17;
          continue;
        }
        v16 = *(float *)v7;
        v17 = *(float *)(v7 + 4);
        v18 = v17;
LABEL_12:
        v19 = v7;
        do
        {
          v20 = v19;
          v21 = *(_QWORD *)(v19 + 8);
          v19 += 8;
          v22 = v21;
        }
        while (v18 > *((float *)&v21 + 1));
        v23 = a2;
        if (v20 == v7)
        {
          v26 = (float *)a2;
          while (v19 < (unint64_t)v26)
          {
            v24 = v26 - 2;
            v27 = *(v26 - 1);
            v26 -= 2;
            if (v18 > v27)
              goto LABEL_22;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = (float *)(v23 - 8);
            v25 = *(float *)(v23 - 4);
            v23 -= 8;
          }
          while (v18 <= v25);
        }
LABEL_22:
        if (v19 >= (unint64_t)v24)
        {
          v9 = v19;
        }
        else
        {
          v28 = *(_DWORD *)v24;
          v9 = v19;
          v29 = v24;
          do
          {
            *(_DWORD *)v9 = v28;
            *(_DWORD *)v29 = v22;
            v30 = *(_DWORD *)(v9 + 4);
            *(float *)(v9 + 4) = v29[1];
            *((_DWORD *)v29 + 1) = v30;
            do
            {
              v31 = *(_QWORD *)(v9 + 8);
              v9 += 8;
              v22 = v31;
            }
            while (v18 > *((float *)&v31 + 1));
            do
            {
              v32 = *((_QWORD *)v29 - 1);
              v29 -= 2;
              v28 = v32;
            }
            while (v18 <= *((float *)&v32 + 1));
          }
          while (v9 < (unint64_t)v29);
        }
        if (v9 - 8 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v9 - 8);
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v9 - 4);
        }
        *(float *)(v9 - 8) = v16;
        *(float *)(v9 - 4) = v17;
        if (v19 < (unint64_t)v24)
        {
LABEL_35:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *,false>(v7, v9 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>(v7, v9 - 8);
        result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>(v9, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_35;
        }
        a2 = v9 - 8;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *a2;
  v3 = a2[1];
  v5 = result[1];
  v6 = *(_QWORD *)a3;
  v7 = HIDWORD(*(_QWORD *)a3);
  LODWORD(v8) = HIDWORD(*(_QWORD *)a3);
  if (v3 >= v5)
  {
    if (v8 < v3)
    {
      *(_DWORD *)a2 = v6;
      *((_DWORD *)a2 + 1) = v7;
      *a3 = v4;
      a3[1] = v3;
      v10 = *(_QWORD *)result;
      v11 = HIDWORD(*(_QWORD *)a2);
      v12 = HIDWORD(*(_QWORD *)result);
      if (COERCE_FLOAT(HIDWORD(*(_QWORD *)a2)) < COERCE_FLOAT(HIDWORD(*(_QWORD *)result)))
      {
        *(_DWORD *)result = *(_QWORD *)a2;
        *((_DWORD *)result + 1) = v11;
        *(_DWORD *)a2 = v10;
        *((_DWORD *)a2 + 1) = v12;
      }
    }
  }
  else
  {
    v9 = *(_DWORD *)result;
    if (v8 >= v3)
    {
      *result = v4;
      result[1] = v3;
      *(_DWORD *)a2 = v9;
      a2[1] = v5;
      v13 = *(_QWORD *)a2;
      v14 = HIDWORD(*(_QWORD *)a3);
      if (COERCE_FLOAT(HIDWORD(*(_QWORD *)a3)) >= COERCE_FLOAT(HIDWORD(*(_QWORD *)a2)))
        return result;
      *(_DWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 1) = v14;
      *(_DWORD *)a3 = v13;
    }
    else
    {
      *(_DWORD *)result = v6;
      *((_DWORD *)result + 1) = v7;
      *(_DWORD *)a3 = v9;
    }
    a3[1] = v5;
  }
  return result;
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>(a1, a2, a3);
  v9 = *(_QWORD *)a3;
  v10 = HIDWORD(*(_QWORD *)a4);
  v11 = HIDWORD(*(_QWORD *)a3);
  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)a4)) < COERCE_FLOAT(HIDWORD(*(_QWORD *)a3)))
  {
    *(_DWORD *)a3 = *(_QWORD *)a4;
    *((_DWORD *)a3 + 1) = v10;
    *(_DWORD *)a4 = v9;
    *(_DWORD *)(a4 + 4) = v11;
    v12 = *(_QWORD *)a2;
    v13 = HIDWORD(*(_QWORD *)a3);
    v14 = HIDWORD(*(_QWORD *)a2);
    if (COERCE_FLOAT(HIDWORD(*(_QWORD *)a3)) < COERCE_FLOAT(HIDWORD(*(_QWORD *)a2)))
    {
      *(_DWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 1) = v13;
      *(_DWORD *)a3 = v12;
      *((_DWORD *)a3 + 1) = v14;
      v15 = *(_QWORD *)a1;
      v16 = HIDWORD(*(_QWORD *)a2);
      v17 = HIDWORD(*(_QWORD *)a1);
      if (COERCE_FLOAT(HIDWORD(*(_QWORD *)a2)) < COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
      {
        *(_DWORD *)a1 = *(_QWORD *)a2;
        *((_DWORD *)a1 + 1) = v16;
        *(_DWORD *)a2 = v15;
        *((_DWORD *)a2 + 1) = v17;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 8);
      v7 = *(_QWORD *)a1;
      v8 = HIDWORD(*(_QWORD *)a1);
      if (*((float *)&v6 + 1) < COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
      {
        *(_QWORD *)a1 = v6;
        *(_DWORD *)(a2 - 8) = v7;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a1 + 24);
      v19 = *(_QWORD *)(a2 - 8);
      v20 = *(_QWORD *)(a1 + 24);
      if (*((float *)&v19 + 1) >= *((float *)&v20 + 1))
        return 1;
      *(_QWORD *)(a1 + 24) = v19;
      *(_QWORD *)(a2 - 8) = v20;
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(_QWORD *)(a1 + 24);
      if (*((float *)&v22 + 1) >= *((float *)&v21 + 1))
        return 1;
      *(_QWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 24) = v21;
      v23 = *(_QWORD *)(a1 + 8);
      v24 = *(_QWORD *)(a1 + 16);
      if (*((float *)&v24 + 1) >= *((float *)&v23 + 1))
        return 1;
      *(_QWORD *)(a1 + 8) = v24;
      *(_QWORD *)(a1 + 16) = v23;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD *)(a1 + 8);
      v27 = HIDWORD(*(_QWORD *)a1);
      if (*((float *)&v26 + 1) >= COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
        return 1;
      *(_QWORD *)a1 = v26;
      result = 1;
      *(_DWORD *)(a1 + 8) = v25;
      *(_DWORD *)(a1 + 12) = v27;
      return result;
    default:
      v9 = (uint64_t *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,vision::mod::GreedyClustererFacesWithTorso::getSimilarFacesToClusterContaining(long long,std::vector<std::pair<long long,float>> &,std::map<long long,std::vector<long long>> &)::$_0 &,std::pair<unsigned int,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v10 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)(v10 + 4);
    v14 = *v9;
    if (v13 < COERCE_FLOAT(HIDWORD(*v9)))
    {
      v15 = *(_DWORD *)v10;
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = *(_DWORD *)(a1 + v16 + 20);
        if (v16 == -16)
          break;
        v14 = *(_QWORD *)(v17 + 8);
        v16 -= 8;
        if (v13 >= *((float *)&v14 + 1))
        {
          v18 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_DWORD *)v18 = v15;
      *(float *)(v18 + 4) = v13;
      if (++v12 == 8)
        return v10 + 8 == a2;
    }
    v9 = (uint64_t *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2)
      return 1;
  }
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = &v4[4 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

cvml::util::MMapFileBackingStore *cvml::util::BackedBuffer<cvml::util::MMapFileBackingStore>::create(cvml::util::MMapFileBackingStore *a1)
{
  cvml::util::MMapFileBackingStore *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;

  v1 = a1;
  if (!a1)
    return v1;
  v2 = cvml::util::MMapFileBackingStore::create((cvml::util::MMapFileBackingStore *)0x18);
  std::shared_ptr<cvml::util::MMapFileBackingStore>::shared_ptr[abi:ne180100]<cvml::util::MMapFileBackingStore,void>(&v16, v2);
  if (!v16)
    goto LABEL_6;
  v3 = *v16;
  *(_QWORD *)v3 = 24;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = (_DWORD)v1;
  v1 = (cvml::util::MMapFileBackingStore *)operator new();
  cvml::util::MMapFileBackingStore::MMapFileBackingStore((uint64_t)v1, (uint64_t)v16);
  *((_QWORD *)v1 + 7) = 0;
  v4 = (void **)((char *)v1 + 56);
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = 0;
  v5 = *(_QWORD *)v1;
  v6 = *(unsigned int *)(*(_QWORD *)v1 + 12);
  if (v6 > 0xFF || *(_DWORD *)(v5 + 8))
  {
LABEL_5:
    cvml::util::MMapFileBackingStore::~MMapFileBackingStore(v1);
    MEMORY[0x1A1B0A898]();
LABEL_6:
    v1 = 0;
    goto LABEL_7;
  }
  v11 = *(unsigned int *)(v5 + 16);
  if (!cvml::util::MMapFileBackingStore::growStorage(v1, (cvml::util::MMapFileBackingStore *)((v11 << 8) + 1048)))
  {
    if (*v4)
      operator delete(*v4);
    goto LABEL_5;
  }
  v12 = *(_QWORD *)v1;
  v13 = 1024 - 4 * v6;
  v14 = 255;
  v15 = ((unint64_t)v11 << 8) | 0x18;
  do
  {
    *(_DWORD *)(v12 + v15) = v14--;
    v15 += 4;
    v13 -= 4;
  }
  while (v13);
  *(_QWORD *)v12 = ((unint64_t)v11 << 8) | 0x18;
  *(_DWORD *)(v12 + 12) = 256;
  *(_DWORD *)(v12 + 16) = v11;
  *(_DWORD *)(v12 + 8) = 256 - v6;
  std::vector<BOOL>::resize((uint64_t)v1 + 56, 0x100uLL, 0);
LABEL_7:
  v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v1;
}

void sub_1A1454704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1A1454794(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<std::vector<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

char *std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned char const* const&,unsigned char const*,void>(_QWORD *a1, const void *a2, uint64_t a3)
{
  char *result;
  char *v7;
  char *v8;
  size_t v9;
  char *v10;

  result = (char *)operator new(0x30uLL);
  v7 = result;
  *(_OWORD *)(result + 8) = 0u;
  *(_QWORD *)result = &off_1E453BC30;
  *((_QWORD *)result + 3) = 0;
  v8 = result + 24;
  *((_OWORD *)result + 2) = 0u;
  v9 = a3 - (_QWORD)a2;
  if (v9)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100]((_QWORD *)result + 3, v9);
    v10 = (char *)*((_QWORD *)v7 + 4);
    result = (char *)memmove(v10, a2, v9);
    *((_QWORD *)v7 + 4) = &v10[v9];
  }
  *a1 = v8;
  a1[1] = v7;
  return result;
}

void sub_1A14548A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<vision::mod::GreedyClustererFacesWithTorso,std::allocator<vision::mod::GreedyClustererFacesWithTorso>,char const*&,std::shared_ptr<std::vector<unsigned char>> &,BOOL &,std::shared_ptr<apple::vision::GreedyClusteringParamsWrapper> const&,void>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  char v3;
  char v4;
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  size_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t *v25;
  size_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  BOOL v38;
  uint64_t **v39;
  uint64_t *v40;
  char *v41;
  _QWORD *v42;
  char **v43;
  int v44;
  std::string v45;
  std::string __s;
  uint64_t *v47;
  uint64_t v48;
  void *__p[2];
  uint64_t v50;
  uint64_t v51;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v51 = *MEMORY[0x1E0C80C00];
  v11 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1E453B9C8;
  *((_QWORD *)v11 + 3) = off_1E453A1D8;
  vision::mod::GreedyClustererWithTorso::GreedyClustererWithTorso((uint64_t)(v11 + 32), v8, v2);
  v43 = (char **)v11;
  *((_QWORD *)v11 + 27) = 0;
  v12 = v11 + 216;
  *((_QWORD *)v11 + 3) = &off_1E453AA10;
  *((_QWORD *)v11 + 4) = &unk_1E453AAF0;
  *((_QWORD *)v11 + 16) = 0;
  *((_QWORD *)v11 + 15) = v11 + 128;
  v39 = (uint64_t **)(v11 + 120);
  *((_QWORD *)v11 + 17) = 0;
  *((_QWORD *)v11 + 19) = 0;
  v40 = (uint64_t *)(v11 + 152);
  *((_QWORD *)v11 + 18) = v11 + 152;
  v13 = (uint64_t **)(v11 + 144);
  *((_QWORD *)v11 + 22) = 0;
  *((_QWORD *)v11 + 21) = v11 + 176;
  v14 = (uint64_t **)(v11 + 168);
  *((_QWORD *)v11 + 20) = 0;
  *((_QWORD *)v11 + 25) = 0;
  *((_QWORD *)v11 + 26) = 0;
  *((_QWORD *)v11 + 23) = 0;
  *((_QWORD *)v11 + 24) = v11 + 200;
  *((_QWORD *)v11 + 28) = 0;
  *((_QWORD *)v11 + 29) = 0;
  v11[240] = 0;
  memset(&__s, 0, sizeof(__s));
  memset(&v45, 0, sizeof(v45));
  v44 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  v18 = vision::mod::GreedyClustererFacesWithTorso::pasreAndVerifyClustererState((uint64_t)__p, **v6, &__s, &v45, &v44, v15, v16, v17);
  v41 = v11 + 24;
  v42 = v10;
  if (SHIBYTE(v50) < 0)
    operator delete(__p[0]);
  if (v18 == 5248)
  {
    v19 = v4 != 0;
    v20 = v44;
    if ((vision::mod::GreedyClustererWithTorso::deserializeStatus((vision::mod::GreedyClustererWithTorso *)(v11 + 32), v44, v19) & 1) != 0)
    {
      v48 = 0;
      read(v20, &v48, 8uLL);
      v21 = 16 * v48;
      if (16 * v48)
      {
        v22 = 8187;
        do
        {
          if (v21 <= 0x1FFB0)
          {
            read(v20, __p, v21);
            v22 = v21 >> 4;
            v21 = 0;
            if (v22)
            {
LABEL_11:
              v23 = __p;
              v24 = v22;
              do
              {
                v25 = (uint64_t *)v23[1];
                v47 = (uint64_t *)*v23;
                std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v13, (uint64_t)v47, &v47)[5] = v25;
                v23 += 2;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            read(v20, __p, 0x1FFB0uLL);
            v21 -= 130992;
            if (v22)
              goto LABEL_11;
          }
        }
        while (v21);
      }
      v48 = 0;
      read(v20, &v48, 8uLL);
      v26 = 16 * v48;
      if (16 * v48)
      {
        v27 = 8187;
        do
        {
          if (v26 <= 0x1FFB0)
          {
            read(v20, __p, v26);
            v27 = v26 >> 4;
            v26 = 0;
            if (v27)
            {
LABEL_20:
              v28 = __p;
              v29 = v27;
              do
              {
                v30 = (uint64_t)v28[1];
                v47 = (uint64_t *)*v28;
                std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v14, (uint64_t)v47, (uint64_t *)&v47)[5] = v30;
                v28 += 2;
                --v29;
              }
              while (v29);
            }
          }
          else
          {
            read(v20, __p, 0x1FFB0uLL);
            v26 -= 130992;
            if (v27)
              goto LABEL_20;
          }
        }
        while (v26);
      }
      v31 = *v13;
      if (*v13 != v40)
      {
        do
        {
          v32 = v31[4];
          __p[0] = (void *)v31[5];
          v33 = std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v39, (unint64_t)__p[0], (uint64_t *)__p);
          v34 = operator new(0x18uLL);
          v34[2] = v32;
          v35 = v33[5];
          v33 += 5;
          *v34 = v35;
          v34[1] = v33;
          *(_QWORD *)(v35 + 8) = v34;
          *v33 = (uint64_t)v34;
          ++v33[2];
          v36 = (uint64_t *)v31[1];
          if (v36)
          {
            do
            {
              v37 = v36;
              v36 = (uint64_t *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v37 = (uint64_t *)v31[2];
              v38 = *v37 == (_QWORD)v31;
              v31 = v37;
            }
            while (!v38);
          }
          v31 = v37;
        }
        while (v37 != v40);
      }
      close(v20);
      getRelativePath(__p, v43[12], &__s);
      if (*((char *)v43 + 239) < 0)
        operator delete(*(void **)v12);
      *(_OWORD *)v12 = *(_OWORD *)__p;
      *((_QWORD *)v12 + 2) = v50;
      *((_BYTE *)v43 + 240) = 1;
    }
    else
    {
      close(v20);
    }
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *v42 = v41;
  v42[1] = v43;
}

void sub_1A1454CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, _QWORD **a11, _QWORD **a12, uint64_t a13, _QWORD **a14, vision::mod::GreedyClustererWithTorso *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void **v39;
  uint64_t v40;
  void *v42;

  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (*(char *)(v40 + 239) < 0)
    operator delete(*v39);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*a10);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*a11);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*a14);
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(*a12);
  vision::mod::GreedyClustererWithTorso::~GreedyClustererWithTorso(a15);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v40);
  operator delete(v42);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<vision::mod::GreedyClustererFacesWithTorso,std::allocator<vision::mod::GreedyClustererFacesWithTorso>,char const*&,std::shared_ptr<apple::vision::GreedyClusteringParamsWrapper> const&,void>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0xF8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E453B9C8;
  v6[3] = off_1E453A1D8;
  result = vision::mod::GreedyClustererWithTorso::GreedyClustererWithTorso((uint64_t)(v6 + 4), a2, a3);
  v6[3] = &off_1E453AA10;
  v6[4] = &unk_1E453AAF0;
  v6[16] = 0;
  v6[15] = v6 + 16;
  v6[19] = 0;
  v6[17] = 0;
  v6[18] = v6 + 19;
  v6[22] = 0;
  v6[20] = 0;
  v6[21] = v6 + 22;
  v6[26] = 0;
  v6[27] = 0;
  v6[25] = 0;
  v6[23] = 0;
  v6[24] = v6 + 25;
  v6[28] = 0;
  v6[29] = 0;
  *((_BYTE *)v6 + 240) = 1;
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_1A1454E74(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::GreedyClustererWithTorso::GreedyClustererWithTorso(uint64_t a1, char *a2, uint64_t *a3)
{
  _QWORD *v4;
  std::string **v5;
  char *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  void **v14;
  std::string::size_type v15;
  _QWORD *exception;
  void *__p[2];
  int64_t v19;

  *(_QWORD *)a1 = &off_1E453A720;
  *(_QWORD *)(a1 + 8) = 0x3F0000003F000000;
  *(_DWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 24) = 3;
  *(_OWORD *)(a1 + 32) = 0u;
  v4 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = (std::string **)(a1 + 64);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  if (!*a3)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = 5245;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  v8 = (char *)operator new(0x90uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E453B7D0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *((_QWORD *)v8 + 17) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_QWORD *)&v9 = v8 + 24;
  *((_QWORD *)&v9 + 1) = v8;
  *(_OWORD *)v5 = v9;
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    v10 = *v5;
    if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10->__r_.__value_.__l.__data_);
    v11 = *(_OWORD *)__p;
    v10->__r_.__value_.__r.__words[2] = v19;
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    v12 = *v5;
    if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
      size = (*v5)->__r_.__value_.__l.__size_;
    }
    else
    {
      size = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
    }
    if (v12->__r_.__value_.__s.__data_[size - 1] != 47)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/");
      if (v19 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if (v19 >= 0)
        v15 = HIBYTE(v19);
      else
        v15 = (std::string::size_type)__p[1];
      std::string::append(*v5, (const std::string::value_type *)v14, v15);
      if (SHIBYTE(v19) < 0)
        operator delete(__p[0]);
    }
  }
  std::shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>::operator=[abi:ne180100](v4, *a3, a3[1]);
  return a1;
}

void sub_1A1455034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v17);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v15 + 48);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<vision::mod::GreedyClustererWithTorso::private_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B7D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::GreedyClustererWithTorso::private_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B7D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::GreedyClustererWithTorso::private_t>::__on_zero_shared(uint64_t a1)
{
  vision::mod::GreedyClustererWithTorso::private_t::clusters_t::~clusters_t((vision::mod::GreedyClustererWithTorso::private_t::clusters_t *)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__shared_ptr_emplace<vision::mod::GreedyClustererFacesWithTorso>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::GreedyClustererFacesWithTorso>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_emplace<vision::mod::GreedyClustererFacesWithTorso>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t vision::mod::GreedyClustererFacesWithTorso::pasreAndVerifyClustererState(uint64_t a1, uint64_t a2, std::string *a3, std::string *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *p_str;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  std::string *v30;
  void **v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  const __CFString *v40;
  uint64_t v41;
  std::string::size_type v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string *v50;
  std::string *v51;
  uint64_t v52;
  std::string v53;
  size_t __len;
  void *__p[2];
  char v56;
  std::string __str;

  if (*(_DWORD *)a2 != -1052410331)
  {
    v40 = CFSTR("  Clusterer - couldn't find sanity value\n");
LABEL_25:
    VNValidatedLog(4, (uint64_t)v40, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v52);
    v41 = -2;
    return (v41 + 128) | 0x1400;
  }
  if (*(_DWORD *)(a2 + 4) != 10007)
  {
    v52 = *(unsigned int *)(a2 + 4);
    v40 = CFSTR("  Clusterer - versions mismatch (serialized: %d, current: %d");
    goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)(a2 + 44));
  createFullPath(&__str, a1, (uint64_t)__p);
  if (v56 < 0)
    operator delete(__p[0]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v20 = verifyChecksumMD5ForFile((const char *)p_str, (_QWORD *)(a2 + 24));
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__str;
  else
    v21 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v20 & 1) != 0)
  {
    v28 = open((const char *)v21, 0);
    v29 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (v28 != -1)
    {
      v30 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &__str;
      VNValidatedLog(1, (uint64_t)CFSTR("  GreedyClustererFacesWithTorso: Opening '%s'"), v22, v23, v24, v25, v26, v27, (uint64_t)v30);
      __len = 0;
      read(v28, &__len, 8uLL);
      std::string::basic_string[abi:ne180100](__p, __len, 48);
      if (v56 >= 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      read(v28, v31, __len);
      createFullPath(&v53, a1, (uint64_t)__p);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v53;
      else
        v32 = (std::string *)v53.__r_.__value_.__r.__words[0];
      if ((verifyChecksumMD5ForFile((const char *)v32, (_QWORD *)(a2 + 8)) & 1) != 0)
      {
        *a5 = v28;
        lseek(v28, 0, 0);
        std::string::operator=(a3, &__str);
        std::string::operator=(a4, &v53);
        v39 = &CVML_status_ok;
      }
      else
      {
        v51 = &v53;
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v51 = (std::string *)v53.__r_.__value_.__r.__words[0];
        VNValidatedLog(4, (uint64_t)CFSTR("  Clusterer - data checksum mismatch for file: %s"), v33, v34, v35, v36, v37, v38, (uint64_t)v51);
        close(v28);
        v39 = &CVML_status_internalError;
      }
      v41 = *v39;
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (v56 < 0)
        operator delete(__p[0]);
      goto LABEL_39;
    }
    v43 = __str.__r_.__value_.__r.__words[0];
    __error();
    v50 = &__str;
    if (v29 < 0)
      v50 = (std::string *)v43;
    VNValidatedLog(4, (uint64_t)CFSTR("  GreedyClustererFacesWithTorso: Failed to open '%s': errno=%d"), v44, v45, v46, v47, v48, v49, (uint64_t)v50);
  }
  else
  {
    VNValidatedLog(4, (uint64_t)CFSTR("  Clusterer - data checksum mismatch for file: %s"), v14, v15, v16, v17, v18, v19, (uint64_t)v21);
  }
  v41 = -2;
LABEL_39:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return (v41 + 128) | 0x1400;
}

void sub_1A145540C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void sub_1A1455580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14556B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1455DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,void *__p,uint64_t a51)
{
  void *v51;
  void *v52;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1A14560CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A1456224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A145629C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1456434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14565FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A14566FC(void *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A145671C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A1456854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14568B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1456920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VNBGRBilinearUpsampler;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A1456994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1456AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A1456B84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1A1456C6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1456CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1456DF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1A1456F50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1456FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1457038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145786C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A14579F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1457A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1457AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1457DA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1457E9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1457F34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1457FCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1458068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1458368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145844C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14585C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A1458CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;

  a19 = (void **)&a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  vision::mod::ImageAnalyzer_Tensor3D::~ImageAnalyzer_Tensor3D((vision::mod::ImageAnalyzer_Tensor3D *)&a53);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v56 - 136);

  _Unwind_Resume(a1);
}

void sub_1A1458E0C()
{
  JUMPOUT(0x1A1458E00);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *end;
  __int128 *v14;
  uint64_t v15;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_1A1459000(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1A14598F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  void *v48;
  void *v49;

  if (v48)
    operator delete(v48);

  if (a47 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1A1459A80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1459B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1459BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1459C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1459C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1459D14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Geometry2D_mallocCart2D(_QWORD *a1, int a2)
{
  size_t v4;
  void *v5;
  void *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 >= 1)
  {
    v4 = 4 * a2;
    v5 = malloc_type_malloc(v4, 0x100004052888210uLL);
    *a1 = v5;
    if (v5 && (v6 = malloc_type_malloc(v4, 0x100004052888210uLL), (a1[1] = v6) != 0))
    {
      *((_DWORD *)a1 + 4) = a2;
    }
    else
    {
      free(v5);
      *a1 = 0;
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
    }
  }
}

uint64_t Geometry2D_copyCart2D(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  if (!a1)
    return 1917;
  v4 = *(const void **)a1;
  if (!*(_QWORD *)a1 || !*(_QWORD *)(a1 + 8))
    return 1917;
  result = 1917;
  if (a2)
  {
    v6 = *(unsigned int *)(a1 + 16);
    if ((int)v6 >= 1)
    {
      if (*(_QWORD *)a2)
      {
        if (*(_QWORD *)(a2 + 8))
        {
          v7 = *(_DWORD *)(a2 + 16);
          if (v7 >= 1)
          {
            if ((_DWORD)v6 != v7)
              return 1916;
            memcpy(*(void **)a2, v4, 4 * v6);
            memcpy(*(void **)(a2 + 8), *(const void **)(a1 + 8), 4 * *(int *)(a2 + 16));
            return 1920;
          }
        }
      }
      return 1917;
    }
  }
  return result;
}

float Geometry2D_cloneUsingIndicesCart2D(int *a1, int *a2)
{
  float result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  if (a2)
  {
    if (*(_QWORD *)a2)
    {
      if (*((_QWORD *)a2 + 1))
      {
        if (a2[4] >= 1)
        {
          Geometry2D_mallocCart2D(a1, 8);
          v5 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
          {
            v6 = *((_QWORD *)a1 + 1);
            if (v6)
            {
              if (a1[4] >= 1)
              {
                v7 = 0;
                v8 = *(_QWORD *)a2;
                v9 = *((_QWORD *)a2 + 1);
                do
                {
                  v10 = *(int *)((char *)&LandmarkDetector_faceMesh63Parts + v7 + 1544);
                  *(_DWORD *)(v5 + v7) = *(_DWORD *)(v8 + 4 * v10);
                  result = *(float *)(v9 + 4 * v10);
                  *(float *)(v6 + v7) = result;
                  v7 += 4;
                }
                while (v7 != 32);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1A1459FC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145A0E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145A184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145A3B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A145A4E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145A60C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145A688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145A7DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145A828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A145A97C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145A9F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145AC5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145AE10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _dataUnvailableError(uint64_t a1)
{
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("no operation point data is available for \"%@\""), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[VNError errorForDataUnavailableWithLocalizedDescription:](VNError, "errorForDataUnavailableWithLocalizedDescription:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1A145B96C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145BA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VNLKTOpticalFlowGPU;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A145BAC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1A145BC34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145BD6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145BE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145C058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A145C690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1A145CAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, id a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A145CCE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145CE24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145CF70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A145D0C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A145D210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A145D6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A145D950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A145E478(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1A145E420);
}

void sub_1A145E920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12400(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12401(uint64_t a1)
{

}

uint64_t _bestDimensionForSizeRange(void *a1, unint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1;
  v4 = objc_msgSend(v3, "idealDimension");
  if (!v4)
  {
    if ((objc_msgSend(v3, "isAllowedDimension:", a2) & 1) != 0)
    {
      v4 = a2;
    }
    else
    {
      v4 = objc_msgSend(v3, "maximumDimension");
      if (v4 - 1 >= a2)
      {
        v5 = objc_msgSend(v3, "minimumDimension");
        if (v5)
          v4 = v5;
        else
          v4 = a2;
      }
    }
  }

  return v4;
}

void sub_1A145EC6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A145EDC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12438(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12439(uint64_t a1)
{

}

void sub_1A145EE7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145EF14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145EFF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::set<VNRequestFaceLandmarksConstellation>::set[abi:ne180100](uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<VNRequestFaceLandmarksConstellation>::__emplace_hint_unique_key_args<VNRequestFaceLandmarksConstellation,VNRequestFaceLandmarksConstellation const&>(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1A145F098(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void sub_1A145F274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A145F350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A145F3F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145F434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145F478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145F5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145F694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A145F7C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145F98C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A145FAF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A145FC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A145FD34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A145FF88(_Unwind_Exception *a1, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1A145FD84);
  }

  _Unwind_Resume(a1);
}

void sub_1A14600C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A1460648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A1460928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14609E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1460A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1460B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1460C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1460C68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1460CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1460D68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1460E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1460EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VNTrackMaskDetectorState;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A1460FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VNTrackMaskDetector;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A14611D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A1461388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1461460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A146167C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A14617AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1461ACC(void *a1)
{
  void *v1;

  operator delete(v1);
  objc_begin_catch(a1);
  JUMPOUT(0x1A1461A68);
}

void sub_1A1461D50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14624BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a2)
  {
    objc_begin_catch(exception_object);
    if (!v14)
      JUMPOUT(0x1A14623FCLL);
    JUMPOUT(0x1A14623F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1462874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A1462A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1462B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A1462CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ctrTrackerAlgorithm_computeFFTx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, DSPComplex *__C, DSPSplitComplex *__Z, OpaqueFFTSetup *a8, double a9)
{
  uint64_t v9;
  uint64_t v17;
  int8x16_t v18;
  int8x8_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  int8x8_t v28;
  int8x16_t v29;
  int8x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  int8x8_t v39;
  int8x16_t v40;
  int8x8_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  int8x8_t v50;
  int8x16_t v51;
  int8x8_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float v58;
  float v59;
  const DSPSplitComplex *v60;

  v9 = 6780;
  if (a1 && a2 && a3 && a4 && a5 && __C && __Z)
  {
    v17 = 0;
    LODWORD(a9) = 0;
    do
    {
      v18 = *(int8x16_t *)(a1 + v17);
      v19 = (int8x8_t)vextq_s8(v18, v18, 8uLL).u64[0];
      v20 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v19, *(int8x8_t *)&a9) & 0xFF00FF00FF00FFLL)));
      v21 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v19, *(int8x8_t *)&a9) & 0xFF00FF00FF00FFLL)));
      v22 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a9) & 0xFF00FF00FF00FFLL)));
      v23 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a9) & 0xFF00FF00FF00FFLL)));
      *(float *)&a9 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)&a9 + v23.f32[0]) + v23.f32[1]) + v23.f32[2]) + v23.f32[3]) + v22.f32[0]) + v22.f32[1])
                                                                                            + v22.f32[2])
                                                                                    + v22.f32[3])
                                                                            + v21.f32[0])
                                                                    + v21.f32[1])
                                                            + v21.f32[2])
                                                    + v21.f32[3])
                                            + v20.f32[0])
                                    + v20.f32[1])
                            + v20.f32[2])
                    + v20.f32[3];
      v17 += 16;
    }
    while (v17 != 0x4000);
    v24 = 0;
    v25 = 0.000061035;
    v26 = *(float *)&a9 * 0.000061035;
    do
    {
      LOBYTE(v25) = *(_BYTE *)(a1 + v24);
      v25 = (float)(*(float *)(a5 + 4 * v24) * (float)((float)LODWORD(v25) - v26)) / 255.0;
      *(&__C->real + v24++) = v25;
    }
    while (v24 != 0x4000);
    vDSP_ctoz(__C, 2, __Z, 1, 0x2000uLL);
    vDSP_fft2d_zrip(a8, __Z, 1, 0, 7uLL, 7uLL, 1);
    v27 = 0;
    v28.i32[0] = 0;
    do
    {
      v29 = *(int8x16_t *)(a2 + v27);
      v30 = (int8x8_t)vextq_s8(v29, v29, 8uLL).u64[0];
      v31 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v30, v28) & 0xFF00FF00FF00FFLL)));
      v32 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v30, v28) & 0xFF00FF00FF00FFLL)));
      v33 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v29.i8, v28) & 0xFF00FF00FF00FFLL)));
      v34 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v29.i8, v28) & 0xFF00FF00FF00FFLL)));
      *(float *)v28.i32 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v28.i32 + v34.f32[0]) + v34.f32[1]) + v34.f32[2]) + v34.f32[3]) + v33.f32[0]) + v33.f32[1])
                                                                                                + v33.f32[2])
                                                                                        + v33.f32[3])
                                                                                + v32.f32[0])
                                                                        + v32.f32[1])
                                                                + v32.f32[2])
                                                        + v32.f32[3])
                                                + v31.f32[0])
                                        + v31.f32[1])
                                + v31.f32[2])
                        + v31.f32[3];
      v27 += 16;
    }
    while (v27 != 0x4000);
    v35 = 0;
    v36 = 0.000061035;
    v37 = *(float *)v28.i32 * 0.000061035;
    do
    {
      LOBYTE(v36) = *(_BYTE *)(a2 + v35);
      v36 = (float)(*(float *)(a5 + 4 * v35) * (float)((float)LODWORD(v36) - v37)) / 255.0;
      *(&__C->real + v35++) = v36;
    }
    while (v35 != 0x4000);
    vDSP_ctoz(__C, 2, __Z + 1, 1, 0x2000uLL);
    vDSP_fft2d_zrip(a8, __Z + 1, 1, 0, 7uLL, 7uLL, 1);
    v38 = 0;
    v39.i32[0] = 0;
    do
    {
      v40 = *(int8x16_t *)(a3 + v38);
      v41 = (int8x8_t)vextq_s8(v40, v40, 8uLL).u64[0];
      v42 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v41, v39) & 0xFF00FF00FF00FFLL)));
      v43 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v41, v39) & 0xFF00FF00FF00FFLL)));
      v44 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v40.i8, v39) & 0xFF00FF00FF00FFLL)));
      v45 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v40.i8, v39) & 0xFF00FF00FF00FFLL)));
      *(float *)v39.i32 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v39.i32 + v45.f32[0]) + v45.f32[1]) + v45.f32[2]) + v45.f32[3]) + v44.f32[0]) + v44.f32[1])
                                                                                                + v44.f32[2])
                                                                                        + v44.f32[3])
                                                                                + v43.f32[0])
                                                                        + v43.f32[1])
                                                                + v43.f32[2])
                                                        + v43.f32[3])
                                                + v42.f32[0])
                                        + v42.f32[1])
                                + v42.f32[2])
                        + v42.f32[3];
      v38 += 16;
    }
    while (v38 != 0x4000);
    v46 = 0;
    v47 = 0.000061035;
    v48 = *(float *)v39.i32 * 0.000061035;
    do
    {
      LOBYTE(v47) = *(_BYTE *)(a3 + v46);
      v47 = (float)(*(float *)(a5 + 4 * v46) * (float)((float)LODWORD(v47) - v48)) / 255.0;
      *(&__C->real + v46++) = v47;
    }
    while (v46 != 0x4000);
    vDSP_ctoz(__C, 2, __Z + 2, 1, 0x2000uLL);
    vDSP_fft2d_zrip(a8, __Z + 2, 1, 0, 7uLL, 7uLL, 1);
    v49 = 0;
    v50.i32[0] = 0;
    do
    {
      v51 = *(int8x16_t *)(a4 + v49);
      v52 = (int8x8_t)vextq_s8(v51, v51, 8uLL).u64[0];
      v53 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v52, v50) & 0xFF00FF00FF00FFLL)));
      v54 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v52, v50) & 0xFF00FF00FF00FFLL)));
      v55 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v51.i8, v50) & 0xFF00FF00FF00FFLL)));
      v56 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v51.i8, v50) & 0xFF00FF00FF00FFLL)));
      *(float *)v50.i32 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v50.i32 + v56.f32[0]) + v56.f32[1]) + v56.f32[2]) + v56.f32[3]) + v55.f32[0]) + v55.f32[1])
                                                                                                + v55.f32[2])
                                                                                        + v55.f32[3])
                                                                                + v54.f32[0])
                                                                        + v54.f32[1])
                                                                + v54.f32[2])
                                                        + v54.f32[3])
                                                + v53.f32[0])
                                        + v53.f32[1])
                                + v53.f32[2])
                        + v53.f32[3];
      v49 += 16;
    }
    while (v49 != 0x4000);
    v57 = 0;
    v58 = 0.000061035;
    v59 = *(float *)v50.i32 * 0.000061035;
    do
    {
      LOBYTE(v58) = *(_BYTE *)(a4 + v57);
      v58 = (float)(*(float *)(a5 + 4 * v57) * (float)((float)LODWORD(v58) - v59)) / 255.0;
      *(&__C->real + v57++) = v58;
    }
    while (v57 != 0x4000);
    v60 = __Z + 3;
    vDSP_ctoz(__C, 2, v60, 1, 0x2000uLL);
    vDSP_fft2d_zrip(a8, v60, 1, 0, 7uLL, 7uLL, 1);
    return 6784;
  }
  return v9;
}

uint64_t ctrTrackerAlgorithm_GaussianCorrelation(uint64_t a1, uint64_t a2, DSPSplitComplex *a3, const DSPSplitComplex *a4, DSPComplex *a5, char *a6, OpaqueFFTSetup *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v14;
  const DSPSplitComplex *v15;
  const DSPSplitComplex *v16;
  uint64_t v17;
  float *realp;
  float *v19;
  float *v20;
  float *imagp;
  float *v22;
  float **p_imagp;
  float *v24;
  float **v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  uint64_t v33;
  float *v34;
  float *v35;
  _DWORD *v36;
  uint64_t v37;
  float *v38;
  float *v39;
  float *v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float *v46;
  _DWORD *v47;
  uint64_t j;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v56;
  float v57;
  float __B;

  v7 = 6780;
  if (a1)
  {
    v8 = a2;
    if (a2)
    {
      if (a3 && a4 && a5 && a6)
      {
        bzero(a6, 0x10000uLL);
        for (i = 0; i != 4; ++i)
        {
          v14 = v8;
          v15 = (const DSPSplitComplex *)(v8 + 16 * i);
          v16 = (const DSPSplitComplex *)(a1 + 16 * i);
          vDSP_zvcmul(v15, 1, v16, 1, a3, 1, 0x2000uLL);
          v17 = 0;
          realp = v16->realp;
          v19 = v15->realp;
          v20 = a3->realp;
          imagp = a3->imagp;
          *v20 = *v16->realp * *v15->realp;
          v24 = v16->imagp;
          p_imagp = &v16->imagp;
          v22 = v24;
          v26 = v15->imagp;
          v25 = &v15->imagp;
          *imagp = *v22 * *v26;
          v20[64] = realp[64] * v19[64];
          imagp[64] = v22[64] * v26[64];
          v27 = a4->realp;
          v28 = a4->imagp;
          v29 = a4[1].realp;
          v30 = a4[1].imagp;
          v31 = v19 + 192;
          v32 = realp + 192;
          do
          {
            v27[v17] = *(v32 - 64);
            v28[v17] = *v32;
            v29[v17] = *(v31 - 64);
            v30[v17++] = *v31;
            v31 += 128;
            v32 += 128;
          }
          while (v17 != 63);
          vDSP_zvcmul(a4 + 1, 1, a4, 1, a4 + 2, 1, 0x3EuLL);
          v33 = 0;
          v34 = a4[2].realp;
          v35 = a4[2].imagp;
          v36 = a3->realp + 192;
          do
          {
            *(v36 - 64) = LODWORD(v34[v33]);
            *v36 = LODWORD(v35[v33]);
            v36 += 128;
            ++v33;
          }
          while (v33 != 63);
          v37 = 0;
          v38 = a4->realp;
          v39 = a4->imagp;
          v40 = a4[1].realp;
          v41 = a4[1].imagp;
          v42 = *v25 + 192;
          v43 = *p_imagp + 192;
          do
          {
            v38[v37] = *(v43 - 64);
            v39[v37] = *v43;
            v40[v37] = *(v42 - 64);
            v41[v37++] = *v42;
            v42 += 128;
            v43 += 128;
          }
          while (v37 != 63);
          vDSP_zvcmul(a4 + 1, 1, a4, 1, a4 + 2, 1, 0x3EuLL);
          v44 = 0;
          v45 = a4[2].realp;
          v46 = a4[2].imagp;
          v47 = a3->imagp + 192;
          v8 = v14;
          do
          {
            *(v47 - 64) = LODWORD(v45[v44]);
            *v47 = LODWORD(v46[v44]);
            v47 += 128;
            ++v44;
          }
          while (v44 != 63);
          vDSP_fft2d_zrip(a7, a3, 1, 0, 7uLL, 7uLL, -1);
          vDSP_ztoc(a3, 1, a5, 2, 0x2000uLL);
          __B = 0.000015259;
          vDSP_vsmul((const float *)a5, 1, &__B, (float *)a5, 1, 0x4000uLL);
          for (j = 0; j != 0x10000; j += 4)
            *(float *)&a6[j] = *(float *)((char *)&a5->real + j) + *(float *)&a6[j];
        }
        v57 = 0.0;
        v7 = ctrTrackerAlgorithm_packedNorm(a1, a3, &v57);
        if (v7 == 128)
        {
          v56 = 0.0;
          v7 = ctrTrackerAlgorithm_packedNorm(v14, a3, &v56);
          if (v7 == 128)
          {
            v49 = 0;
            v50 = v57 + v56;
            do
            {
              v51 = (float)(v50 + (float)(*(float *)&a6[v49] * -2.0)) * 0.000015259;
              if (v51 <= 0.0)
                v52 = -0.0;
              else
                v52 = v51 * -25.0;
              *(float *)((char *)&a5->real + v49) = expf(v52);
              v49 += 4;
            }
            while (v49 != 0x10000);
            vDSP_ctoz(a5, 2, a3, 1, 0x2000uLL);
            vDSP_fft2d_zrip(a7, a3, 1, 0, 7uLL, 7uLL, 1);
          }
        }
      }
    }
  }
  return v7;
}

uint64_t ctrTrackerAlgorithm_packedNorm(uint64_t a1, DSPSplitComplex *__C, float *a3)
{
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;

  if (!a3)
    return 6780;
  v6 = 0;
  v7 = 0.0;
  do
  {
    vDSP_zvcmul((const DSPSplitComplex *)(a1 + 16 * v6), 1, (const DSPSplitComplex *)(a1 + 16 * v6), 1, __C, 1, 0x2000uLL);
    v9 = 0;
    v10 = 0.0;
    do
      v10 = v10 + __C->realp[v9++];
    while (v9 != 0x2000);
    v11 = *(float **)(a1 + 16 * v6 + 8);
    v8 = a1 + 16 * v6;
    v7 = v7
       + (float)((float)(v10
                       + (float)((float)((float)((float)((float)(*v11 * *v11) + (float)(**(float **)v8 * **(float **)v8))
                                               + (float)(*(float *)(*(_QWORD *)v8 + 256)
                                                       * *(float *)(*(_QWORD *)v8 + 256)))
                                       + (float)(v11[64] * v11[64]))
                               * -0.5))
               * 0.000030518);
    ++v6;
  }
  while (v6 != 4);
  *a3 = v7;
  return 6784;
}

uint64_t ctrTrackerAlgorithm_packedDivision(float **a1, float **a2, float **a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float32x4_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float *v16;
  float *v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  _DWORD *v26;
  _DWORD *v27;
  unint64_t v28;

  v3 = 6780;
  if (a1 && a2 && a3)
  {
    v4 = 0;
    v5 = *a1;
    v6 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    do
    {
      *(float32x4_t *)&v5[v4] = vaddq_f32(*(float32x4_t *)&v5[v4], v6);
      v4 += 4;
    }
    while (v4 != 0x2000);
    v7 = 1;
    v8 = 192;
    do
    {
      v5[v8] = v5[v8] + -0.0001;
      v7 += 2;
      v8 += 128;
    }
    while (v7 < 0x7E);
    v9 = 0;
    v10 = *a2;
    v11 = *a3;
    v12 = a3[1];
    v13 = v12 + 1;
    v14 = a1[1];
    v15 = (uint64_t)(*a3 + 1);
    v16 = v14 + 1;
    v17 = v5 + 1;
    v18 = (uint64_t)(*a2 + 1);
    do
    {
      for (i = 0; i != 63; ++i)
      {
        *(float *)(v15 + i * 4) = (float)(*(float *)(v18 + i * 4) * v17[i])
                                / (float)((float)(v16[i] * v16[i]) + (float)(v17[i] * v17[i]));
        v13[i] = (float)-(float)(*(float *)(v18 + i * 4) * v16[i])
               / (float)((float)(v16[i] * v16[i]) + (float)(v17[i] * v17[i]));
      }
      ++v9;
      v13 += 64;
      v15 += 256;
      v16 += 64;
      v17 += 64;
      v18 += 256;
    }
    while (v9 != 128);
    v20 = 0;
    *v11 = (float)(*v10 * *v5) / (float)((float)(*v14 * *v14) + (float)(*v5 * *v5));
    *v12 = (float)-(float)(*v10 * *v14) / (float)((float)(*v14 * *v14) + (float)(*v5 * *v5));
    v11[64] = (float)(v10[64] * v5[64]) / (float)((float)(v14[64] * v14[64]) + (float)(v5[64] * v5[64]));
    v21 = v12 + 128;
    v12[64] = (float)-(float)(v10[64] * v14[64]) / (float)((float)(v14[64] * v14[64]) + (float)(v5[64] * v5[64]));
    v22 = v11 + 128;
    v23 = v14 + 128;
    v24 = v5 + 128;
    v25 = v10 + 128;
    do
    {
      *v22 = (float)(*v25 * *v24) / (float)((float)(*v23 * *v23) + (float)(*v24 * *v24));
      *v21 = (float)-(float)(*v25 * *v23) / (float)((float)(*v23 * *v23) + (float)(*v24 * *v24));
      v20 += 2;
      v21 += 128;
      v22 += 128;
      v23 += 128;
      v24 += 128;
      v25 += 128;
    }
    while (v20 < 0x7E);
    v26 = v12 + 192;
    v27 = v11 + 192;
    v28 = 1;
    v3 = 6784;
    do
    {
      *v27 = 0;
      *v26 = 0;
      v28 += 2;
      v26 += 128;
      v27 += 128;
    }
    while (v28 < 0x7E);
  }
  return v3;
}

void vision::mod::ImageDescriptorProcessorEspresso::~ImageDescriptorProcessorEspresso(vision::mod::ImageDescriptorProcessorEspresso *this)
{
  *(_QWORD *)this = &off_1E453AC98;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 48);
}

{
  *(_QWORD *)this = &off_1E453AC98;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 48);
  JUMPOUT(0x1A1B0A898);
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorForImage_RGBA8888(vision::mod::ImageDescriptorProcessorEspresso *this, const vImage_Buffer *a2, float **a3)
{
  if (((*(uint64_t (**)(vision::mod::ImageDescriptorProcessorEspresso *))(*(_QWORD *)this + 136))(this) & 2) != 0)
    return vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorForImage_XYZA8888(this, a2, a3);
  else
    return 3691;
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorForImage_BGRA8888(vision::mod::ImageDescriptorProcessorEspresso *this, const vImage_Buffer *a2, float **a3)
{
  if (((*(uint64_t (**)(vision::mod::ImageDescriptorProcessorEspresso *))(*(_QWORD *)this + 136))(this) & 4) != 0)
    return vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorForImage_XYZA8888(this, a2, a3);
  else
    return 3691;
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorForImage_Planar8(vision::mod::ImageDescriptorProcessorEspresso *this, const vImage_Buffer *a2, float **a3)
{
  uint64_t v5;
  uint64_t v6;
  vision::mod::ImageDescriptorBufferAbstract *v7;
  vision::mod::ImageDescriptorBufferAbstract *v8;
  uint64_t v9;
  float *v11;
  int v12;
  _QWORD *exception;

  if (((*(uint64_t (**)(vision::mod::ImageDescriptorProcessorEspresso *))(*(_QWORD *)this + 136))(this) & 1) == 0)
    return 3691;
  v6 = *((_QWORD *)this + 6);
  if (*((_BYTE *)this + 8) && *(int *)(v6 + 8) >= 2)
  {
    syslog(5, "ERROR: The number of images submitted to batch compute the descriptors is less than the size of the internal Espresso network batch size (resulting in a waste of memory and computation)");
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3700;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  if (*(_DWORD *)(v6 + 16) != 1)
    return 3708;
  if (!v7)
    return 3708;
  v8 = v7;
  v9 = *((_QWORD *)v7 + 12);
  if (v9 != (unint64_t)(*(uint64_t (**)(vision::mod::ImageDescriptorProcessorEspresso *))(*(_QWORD *)this + 128))(this) >> 2)
    return 3708;
  vision::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount(v8, 1uLL, 0);
  if (*((_DWORD *)this + 10))
  {
    v5 = espresso_vision_compute_dropout_augment();
    if ((v5 & 0x80) == 0)
      return v5;
  }
  else
  {
    espresso_vision_compute();
    v5 = 3712;
  }
  if (*((_BYTE *)this + 38))
  {
    v11 = a3[7];
    v12 = (*(uint64_t (**)(vision::mod::ImageDescriptorProcessorEspresso *))(*(_QWORD *)this + 128))(this);
    normalizeMeanL2(v11, (unint64_t)v12 >> 2);
  }
  if (*((_DWORD *)this + 10))
    *((_DWORD *)this + 11) = 1065353216;
  return v5;
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorForAugmentedImage(_DWORD *a1, _OWORD *a2, uint64_t a3, _QWORD *a4, void *lpsrc)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const void **v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  _QWORD *exception;

  if (!a1[10])
    return vision::mod::ImageDescriptorProcessorAbstract::computeDescriptorForAugmentedImage((uint64_t)a1, a2, a3, a4, (uint64_t)lpsrc);
  if (!v10)
    return 3708;
  v11 = v10[12];
  if (v11 != (unint64_t)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 128))(a1) >> 2)
    return 3708;
  a1[11] = -1082130432;
  v12 = vision::mod::ImageDescriptorProcessorAbstract::computeDescriptorForAugmentedImage((uint64_t)a1, a2, a3, a4, (uint64_t)lpsrc);
  if ((v12 & 0x80) != 0)
  {
    v13 = a1[11];
    v14 = (float *)operator new(4uLL);
    *(_DWORD *)v14 = v13;
    v15 = *((_QWORD *)lpsrc + 9);
    v16 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 104))(lpsrc);
    if (v15 != 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = 3708;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
    v17 = v16;
    v18 = (const void **)(*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
    v19 = v17 >> 2;
    v20 = *((_QWORD *)lpsrc + 12);
    *((_QWORD *)lpsrc + 12) = v20 + 1;
    *((_QWORD *)lpsrc + 8) = v19 + 1;
    vision::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount((vision::mod::ImageDescriptorBufferAbstract *)lpsrc, 1uLL, 0);
    v21 = 4 * (int)v20;
    v22 = (char *)*((_QWORD *)lpsrc + 7);
    memcpy(v22, v18[7], v21);
    *(float *)&v22[v21] = *v14 * 0.00001;
    (*((void (**)(const void **))*v18 + 1))(v18);
    operator delete(v14);
  }
  return v12;
}

void sub_1A1464224(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t vision::mod::ImageDescriptorProcessorEspresso::createDescriptorBuffer@<X0>(vision::mod::ImageDescriptorProcessorEspresso *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  unint64_t result;

  v4 = operator new(0x90uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E453B958;
  v4[3] = &off_1E453A8D0;
  v4[4] = 0;
  v4[5] = 0;
  v4[9] = 0;
  v4[8] = 0;
  v4[6] = 0;
  v4[7] = v4 + 8;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_BYTE *)v4 + 112) = 0;
  v4[15] = 0;
  *((_DWORD *)v4 + 32) = 1;
  v4[17] = 0;
  result = (*(uint64_t (**)(vision::mod::ImageDescriptorProcessorEspresso *))(*(_QWORD *)this + 128))(this);
  v4[15] = result >> 2;
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A14642E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorsForImages_RGBA8888(uint64_t a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;

  v7 = a3;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1) & 2) != 0)
    v8 = vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorsForImages_XYZA8888(a1, a2, v7, a4);
  else
    v8 = 3691;

  return v8;
}

void sub_1A146436C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorsForImages_BGRA8888(uint64_t a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;

  v7 = a3;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1) & 4) != 0)
    v8 = vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorsForImages_XYZA8888(a1, a2, v7, a4);
  else
    v8 = 3691;

  return v8;
}

void sub_1A14643F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorsForImages_Planar8(_DWORD *a1, uint64_t *a2, void *a3, _QWORD *a4)
{
  uint64_t (**v7)(_QWORD);
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  vision::mod::ImageDescriptorBufferAbstract *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  _QWORD *v28;
  _QWORD *exception;
  uint64_t v30;
  _BYTE v31[20];
  int v32;

  v7 = a3;
  v8 = a1[10];
  if (!v8)
  {
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1) & 1) == 0)
    {
      v12 = 3691;
      goto LABEL_31;
    }
    v16 = *((_QWORD *)a1 + 6);
    if (*((_BYTE *)a1 + 8) && *(_DWORD *)(v16 + 8) > (int)((unint64_t)(a2[1] - *a2) >> 5))
    {
      syslog(5, "ERROR: The number of images submitted to batch compute the descriptors is less than the size of the internal Espresso network batch size (resulting in a waste of memory and computation)");
      exception = __cxa_allocate_exception(8uLL);
      *exception = 3700;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
    if (*(_DWORD *)(v16 + 16) == 1)
    {
      if (v17)
      {
        v18 = v17[12];
        if (v18 == (unint64_t)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 128))(a1) >> 2)
        {
          vision::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount(v19, (a2[1] - *a2) >> 5, 0);
          v32 = 0;
          LODWORD(v30) = a1[3];
          v20 = *((unsigned __int8 *)a1 + 37);
          HIDWORD(v30) = *((unsigned __int8 *)a1 + 36);
          *(_DWORD *)v31 = v20;
          *(_OWORD *)&v31[4] = *(_OWORD *)(a1 + 5);
          v12 = espresso_vision_compute_batch();
          if ((v12 & 0x80) != 0)
          {
            if (*((_BYTE *)a1 + 38))
            {
              v21 = a4[7];
              v22 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 128))(a1);
              if (a4[9])
              {
                v23 = 0;
                v24 = (unint64_t)v22 >> 2;
                v25 = 1;
                do
                {
                  normalizeMeanL2((float *)(v21 + 4 * v23), v24);
                  v26 = a4[9] > (unint64_t)v25++;
                  v23 += v24;
                }
                while (v26);
              }
            }
          }
          goto LABEL_31;
        }
      }
    }
LABEL_30:
    v12 = 3708;
    goto LABEL_31;
  }
  v9 = *a2;
  v10 = a2[1];
  if (v10 - *a2 != 64)
    goto LABEL_30;
  if (v9 == v10)
  {
    v12 = 3712;
  }
  else
  {
    v11 = 0;
    while (!v7 || (v7[2](v7) & 1) == 0)
    {
      if (v11)
        a1[10] = 0;
      (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(_QWORD *)a1 + 64))(&v30, a1);
      v12 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v9, v30);
      a1[10] = v8;
      if ((v12 & 0x80) == 0)
      {
        v28 = __cxa_allocate_exception(8uLL);
        *v28 = v12;
        __cxa_throw(v28, MEMORY[0x1E0DE4F28], 0);
      }
      (*(void (**)(_QWORD *, uint64_t))(*a4 + 40))(a4, v30);
      v13 = *(std::__shared_weak_count **)v31;
      if (*(_QWORD *)v31)
      {
        v14 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      ++v11;
      v9 += 32;
      if (v9 == v10)
        goto LABEL_31;
    }
    v12 = -29;
  }
LABEL_31:

  return v12;
}

void sub_1A146470C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::wipeLayersMemory(id **this)
{
  objc_msgSend(*this[6], "wipe_layers_blobs");
  return 3712;
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::setPriority(vision::mod::ImageDescriptorProcessorEspresso *this)
{
  if (espresso_vision_util_update_metal_priority())
    return 3712;
  else
    return 3708;
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::getDescriptorLengthInBytes(vision::mod::ImageDescriptorProcessorEspresso *this)
{
  return 4 * *(int *)(*((_QWORD *)this + 6) + 12);
}

uint64_t vision::mod::ImageDescriptorProcessorAbstract::getRequiredImageType(vision::mod::ImageDescriptorProcessorAbstract *this)
{
  return 0;
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::getRequiredImageChannelDepth(vision::mod::ImageDescriptorProcessorEspresso *this)
{
  uint64_t result;

  result = **((_QWORD **)this + 6);
  if (result)
  {
    result = espresso_vision_first_layer_number_of_input_blobs();
    if (result)
      return *(unsigned int *)(*((_QWORD *)this + 6) + 16);
  }
  return result;
}

float vision::mod::ImageDescriptorProcessorEspresso::getRequiredImageSize(vision::mod::ImageDescriptorProcessorEspresso *this)
{
  void *v1;

  v1 = (void *)**((_QWORD **)this + 6);
  if (v1 && objc_msgSend(v1, "layers_size") && espresso_vision_first_layer_number_of_input_blobs())
    return (float)(int)((unint64_t)espresso_vision_first_layer_first_source_blob_shape() >> 32);
  else
    return NAN;
}

float *normalizeMeanL2(float *result, unsigned int a2)
{
  uint64_t v2;
  float v3;
  float *v4;
  uint64_t v5;
  float v6;
  float v7;
  float *v8;
  uint64_t v9;
  float v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;

  if ((int)a2 >= 1)
  {
    v2 = a2;
    v3 = 0.0;
    v4 = result;
    v5 = a2;
    do
    {
      v6 = *v4++;
      v3 = v3 + v6;
      --v5;
    }
    while (v5);
    v7 = v3 / (float)(int)a2;
    v8 = result;
    v9 = a2;
    do
    {
      *v8 = *v8 - v7;
      ++v8;
      --v9;
    }
    while (v9);
    v10 = 0.0;
    v11 = result;
    v12 = a2;
    do
    {
      v13 = *v11++;
      v10 = v10 + (float)(v13 * v13);
      --v12;
    }
    while (v12);
    if (v10 < 0.000001)
      v10 = 0.000001;
    v14 = 1.0 / sqrtf(v10);
    do
    {
      *result = v14 * *result;
      ++result;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorsForImages_XYZA8888(uint64_t a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  vision::mod::ImageDescriptorBufferAbstract *v11;
  vision::mod::ImageDescriptorBufferAbstract *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  float v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  BOOL v32;
  _QWORD *exception;

  v7 = a3;
  v8 = v7;
  if (v7 && ((*((uint64_t (**)(id))v7 + 2))(v7) & 1) != 0)
  {
    v9 = 3683;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 48);
    if (*(_BYTE *)(a1 + 8) && *(_DWORD *)(v10 + 8) > (int)((a2[1] - *a2) >> 5))
    {
      syslog(5, "ERROR: The number of images submitted to batch compute the descriptors is less than the size of the internal Espresso network batch size (resulting in a waste of memory and computation)");
      exception = __cxa_allocate_exception(8uLL);
      *exception = 3700;
      __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
    }
    if ((*(_DWORD *)(v10 + 16) - 3) <= 1
    {
      vision::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount(v12, (uint64_t)(a2[1] - *a2) >> 5, 0);
      if (*(_BYTE *)(a1 + 16))
      {
        v15 = *(_QWORD *)(*a2 + 8);
        v16 = *(_QWORD *)(*a2 + 16);
        if (v15)
        {
          v17 = 0;
          v18 = 0.0;
          v19 = 0.0;
          v20 = 0.0;
          do
          {
            if (v16)
            {
              v21 = (_BYTE *)(*(_QWORD *)*a2 + *(_QWORD *)(*a2 + 24) * v17 + 2);
              v22 = *(_QWORD *)(*a2 + 16);
              do
              {
                LOBYTE(v14) = *(v21 - 2);
                *(float *)&v23 = (float)LODWORD(v14);
                v20 = v20 + *(float *)&v23;
                LOBYTE(v23) = *(v21 - 1);
                *(float *)&v24 = (float)v23;
                v19 = v19 + *(float *)&v24;
                LOBYTE(v24) = *v21;
                v14 = (float)v24;
                v18 = v18 + v14;
                v21 += 4;
                --v22;
              }
              while (v22);
            }
            ++v17;
          }
          while (v17 != v15);
        }
        else
        {
          v20 = 0.0;
          v19 = 0.0;
          v18 = 0.0;
        }
        v26 = (float)(unint64_t)(v16 * v15);
        *(float *)(a1 + 20) = (float)-v20 / v26;
        *(float *)(a1 + 24) = (float)-v19 / v26;
        *(float *)(a1 + 28) = (float)-v18 / v26;
      }
      v9 = espresso_vision_compute_batch();
      if ((v9 & 0x80) != 0)
      {
        if (*(_BYTE *)(a1 + 38))
        {
          v27 = a4[7];
          v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
          if (a4[9])
          {
            v29 = 0;
            v30 = (unint64_t)v28 >> 2;
            v31 = 1;
            do
            {
              normalizeMeanL2((float *)(v27 + 4 * v29), v30);
              v32 = a4[9] > (unint64_t)v31++;
              v29 += v30;
            }
            while (v32);
          }
        }
      }
    }
    else
    {
      v9 = 3708;
    }
  }

  return v9;
}

void sub_1A1464C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorProcessorAbstract::computeDescriptorForAugmentedImage(uint64_t a1, _OWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[3];
  uint64_t v16;
  std::__shared_weak_count *v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 64))(&v16);
  v10 = vision::mod::ImageDescriptorAugmenterAbstract::augment(a4, a2, a3);
  if ((v10 & 0x80) != 0)
  {
    vision::mod::ImageDescriptorAugmenterAbstract::getAugmentedImages((vision::mod::ImageDescriptorAugmenterAbstract *)__p, (uint64_t)a4);
    v10 = (*(uint64_t (**)(uint64_t, void **, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 96))(a1, __p, a3, 0, v16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v10 & 0x80) != 0)
      v10 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a4 + 24))(a4, v16, a5);
  }
  v11 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_1A1464D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::computeDescriptorForImage_XYZA8888(vision::mod::ImageDescriptorProcessorEspresso *this, const vImage_Buffer *a2, float **lpsrc)
{
  uint64_t v6;
  vision::mod::ImageDescriptorBufferAbstract *v7;
  vision::mod::ImageDescriptorBufferAbstract *v8;
  uint64_t v9;
  float v10;
  vImagePixelCount height;
  vImagePixelCount width;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  float v17;
  _BYTE *v18;
  vImagePixelCount v19;
  unsigned int v20;
  unsigned int v21;
  float v23;
  float *v24;
  int v25;
  _QWORD *exception;

  v6 = *((_QWORD *)this + 6);
  if (*((_BYTE *)this + 8) && *(int *)(v6 + 8) >= 2)
  {
    syslog(5, "ERROR: The number of images submitted to batch compute the descriptors is less than the size of the internal Espresso network batch size (resulting in a waste of memory and computation)");
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3700;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  if ((*(_DWORD *)(v6 + 16) - 3) > 1)
    return 3708;
  if (!v7)
    return 3708;
  v8 = v7;
  v9 = *((_QWORD *)v7 + 12);
  if (v9 != (unint64_t)(*(uint64_t (**)(vision::mod::ImageDescriptorProcessorEspresso *))(*(_QWORD *)this + 128))(this) >> 2)
    return 3708;
  vision::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount(v8, 1uLL, 0);
  if (*((_BYTE *)this + 16))
  {
    height = a2->height;
    width = a2->width;
    if (height)
    {
      v13 = 0;
      v14 = (char *)a2->data + 2;
      v15 = 0.0;
      v16 = 0.0;
      v17 = 0.0;
      do
      {
        v18 = v14;
        v19 = a2->width;
        if (width)
        {
          do
          {
            LOBYTE(v10) = *(v18 - 2);
            *(float *)&v20 = (float)LODWORD(v10);
            v17 = v17 + *(float *)&v20;
            LOBYTE(v20) = *(v18 - 1);
            *(float *)&v21 = (float)v20;
            v16 = v16 + *(float *)&v21;
            LOBYTE(v21) = *v18;
            v10 = (float)v21;
            v15 = v15 + v10;
            v18 += 4;
            --v19;
          }
          while (v19);
        }
        ++v13;
        v14 += a2->rowBytes;
      }
      while (v13 != height);
    }
    else
    {
      v17 = 0.0;
      v16 = 0.0;
      v15 = 0.0;
    }
    v23 = (float)(width * height);
    *((float *)this + 5) = (float)-v17 / v23;
    *((float *)this + 6) = (float)-v16 / v23;
    *((float *)this + 7) = (float)-v15 / v23;
  }
  espresso_vision_compute();
  if (*((_BYTE *)this + 38))
  {
    v24 = lpsrc[7];
    v25 = (*(uint64_t (**)(vision::mod::ImageDescriptorProcessorEspresso *))(*(_QWORD *)this + 128))(this);
    normalizeMeanL2(v24, (unint64_t)v25 >> 2);
  }
  return 3712;
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptorProcessorEspresso::private_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptorProcessorEspresso::private_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::ImageDescriptorProcessorEspresso::private_t>::__on_zero_shared(uint64_t a1)
{

}

uint64_t vision::mod::ImageDescriptorProcessorEspresso::ImageDescriptorProcessorEspresso(uint64_t a1, id *a2, const char *a3, char *a4, int a5, int a6)
{
  void ***v12;
  char *v13;
  __int128 v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  void *v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t layer_first_destination_blob_shape;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD *exception;
  _QWORD *v35;
  void *__p[2];
  unsigned __int8 v37;

  *(_QWORD *)a1 = &off_1E453AC98;
  *(_BYTE *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 39) = 0;
  *(_QWORD *)(a1 + 40) = 0xBF80000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  v12 = (void ***)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  v13 = (char *)operator new(0x40uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_1E453BA70;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *((_DWORD *)v13 + 8) = 1;
  *((_QWORD *)v13 + 7) = 0;
  *(_QWORD *)&v14 = v13 + 24;
  *((_QWORD *)&v14 + 1) = v13;
  *(_OWORD *)(a1 + 48) = v14;
  *((_DWORD *)v13 + 11) = a5;
  *((_DWORD *)v13 + 12) = a6;
  *(_DWORD *)(a1 + 12) = 998277249;
  *(_BYTE *)(a1 + 16) = 0;
  if (a5 == 1)
    v15 = 20000;
  else
    v15 = 0;
  if (a5 == 2)
    v15 = 1;
  if (a5 == 6)
    v15 = 6;
  v16 = a5 - 5;
  if (a5 == 5)
    v17 = 5;
  else
    v17 = v15;
  v18 = a6 == 2;
  if (a6 == 3)
    v18 = 2;
  if (v16 >= 2)
    v19 = v18;
  else
    v19 = 4;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 35) = 0;
  objc_storeStrong((id *)v13 + 7, a2[2]);
  v21 = *(void **)(*(_QWORD *)(a1 + 48) + 32);
  if (!v21)
  {
    v22 = objc_msgSend(objc_alloc(MEMORY[0x1E0D1F4E8]), "initWithPlatform:", v17);
    v23 = (*v12)[4];
    (*v12)[4] = (void *)v22;

    v21 = (*v12)[4];
  }
  LODWORD(v20) = 4.0;
  objc_msgSend(v21, "set_priority:low_priority_max_ms_per_command_buffer:gpu_priority:", *(unsigned __int8 *)a2, *((unsigned int *)a2 + 2), v20);
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a4);
    if ((v37 & 0x80u) == 0)
      v24 = v37;
    else
      v24 = (unint64_t)__p[1];
    if ((char)v37 < 0)
    {
      operator delete(__p[0]);
      if (v24)
        goto LABEL_24;
    }
    else if (v24)
    {
LABEL_24:
      v25 = objc_msgSend(objc_alloc(MEMORY[0x1E0D1F4F8]), "initWithJSFile:binSerializerId:context:computePath:", a3, a4, (*v12)[4], v19);
      goto LABEL_27;
    }
  }
  v25 = objc_msgSend(objc_alloc(MEMORY[0x1E0D1F4F8]), "initWithJSFile:context:computePath:", a3, (*v12)[4], v19);
LABEL_27:
  v26 = **v12;
  **v12 = (void *)v25;

  v27 = **v12;
  if (!v27)
  {
    syslog(5, "ERROR: Could not load network from %s", a3);
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3701;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  if (!objc_msgSend(v27, "layers_size"))
  {
    syslog(5, "ERROR: The network layer size is zero");
    v35 = __cxa_allocate_exception(8uLL);
    *v35 = 3708;
    __cxa_throw(v35, MEMORY[0x1E0DE4F28], 0);
  }
  layer_first_destination_blob_shape = espresso_vision_last_layer_first_destination_blob_shape();
  *((_DWORD *)*v12 + 3) = v29 * layer_first_destination_blob_shape * HIDWORD(layer_first_destination_blob_shape);
  espresso_vision_first_layer_first_source_blob_shape();
  v30 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v30 + 16) = v31;
  *(_DWORD *)(v30 + 8) = v32;

  return a1;
}

void sub_1A14652C4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v2);
  vision::mod::ImageDescriptorProcessorEspresso::Options::~Options(v1);
  _Unwind_Resume(a1);
}

void sub_1A14653D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1465458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0A898](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_1A14658AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  void *v42;
  void *v43;
  void *v44;

  _Unwind_Resume(a1);
}

void sub_1A1465AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13037(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__13038(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<_Geometry2D_point2D_>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1A1465BA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1A1466C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,void *a40,char a41)
{
  void *v41;
  void *v42;

  if (v41)
    operator delete(v41);
  vision::mod::Face3D::~Face3D((vision::mod::Face3D *)&a41);

  _Unwind_Resume(a1);
}

void sub_1A14670AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A146729C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1467398(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A14673AC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A1467450(void *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A1467470(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A1467724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14679B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1467A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1467C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1A1468000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A14682C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A1468494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1A146858C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZL11getVNBundlev_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.VN"));
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)getVNBundle(void)::bundle;
  getVNBundle(void)::bundle = v0;

}

void sub_1A14688D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1468A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1468B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1468CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1468E84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1468F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A1469100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1469250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A14692D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

#error "1A146972C: call analysis failed (funcsize=25)"

void sub_1A1469754()
{
  JUMPOUT(0x1A1469704);
}

void sub_1A1469760()
{
  JUMPOUT(0x1A146970CLL);
}

void sub_1A146976C()
{
  JUMPOUT(0x1A1469710);
}

void sub_1A1469800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1469CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A1469F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146A1DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146A2A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A146A714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A146A83C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A146A9C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A146AB2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146AD9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146AEFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146B01C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146B1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  vision::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32(&a13);
  vision::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32(&a28);
  _Unwind_Resume(a1);
}

void sub_1A146B2DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A146B378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A146B4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A146B6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146B86C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A146BAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A146BCE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A146BDA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A146BF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A146C0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13552(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13553(uint64_t a1)
{

}

void sub_1A146C208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A146C2E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146C464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146C5B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146C694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A146C710(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL CCRectLowLevel(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10, float a11)
{
  unsigned __int32 v10;
  _QWORD *v11;
  _OWORD *v12;
  float *v13;
  int v14;
  int v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned __int32 v32;
  _BYTE **v33;
  _BYTE **v34;
  uint64_t v35;
  int32x2_t v36;
  float *PerMeshForFFTSIZE;
  float *v38;
  int32x4_t v39;
  unint64_t v40;
  float32x4_t v41;
  __double2 v42;
  __int128 v43;
  __double2 v44;
  __double2 v45;
  float64x2_t v46;
  float64x2_t v47;
  __double2 v48;
  float64x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t i;
  uint64_t j;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t k;
  int8x8_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  float v74;
  int v75;
  _DWORD *v76;
  DSPComplex *v77;
  float v78;
  DSPComplex *v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD *v94;
  _OWORD *v95;
  int m;
  uint64_t v97;
  int v98;
  unsigned int v99;
  char *v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  unint64_t v114;
  float *v115;
  float *v116;
  float v117;
  unint64_t v118;
  uint64_t v119;
  float *v120;
  uint64_t v121;
  __float2 v122;
  float v123;
  float v124;
  unint64_t v125;
  float *v126;
  __float2 v127;
  float v128;
  float v129;
  float v130;
  char v131;
  void *v132;
  void *v133;
  float *v134;
  float *v135;
  float v136;
  unint64_t v137;
  unsigned int v138;
  _BOOL8 v139;
  void **v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  float *v146;
  float v147;
  float v148;
  float v149;
  unsigned int v150;
  float v151;
  unint64_t v152;
  float *v153;
  int v154;
  int v155;
  float v156;
  float v157;
  uint64_t v159;
  float *v160;
  float v161;
  float *v162;
  unint64_t v163;
  float v164;
  float v165;
  float v167;
  int v168;
  size_t v169;
  int *v170;
  _QWORD *v171;
  uint64_t v172;
  int v173;
  float *v174;
  char *v175;
  char *v176;
  float *v177;
  uint64_t v178;
  __float2 v179;
  uint64_t v180;
  float v181;
  float *v182;
  char *v183;
  __float2 v184;
  float v185;
  float v186;
  float v187;
  _DWORD *v188;
  _DWORD *v189;
  _DWORD *v190;
  uint64_t v191;
  unsigned __int8 *v192;
  char *v193;
  float v194;
  void **v195;
  uint64_t v196;
  unsigned __int8 *v197;
  int v198;
  _DWORD *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  float v203;
  __float2 v204;
  size_t v205;
  float *v206;
  _BYTE *v207;
  unsigned __int8 *v208;
  unsigned __int8 *v209;
  float v210;
  float v211;
  float v212;
  float cosval;
  uint64_t v214;
  unsigned int v215;
  float v216;
  float v218;
  float v219;
  float v220;
  uint64_t v221;
  float v222;
  BOOL v223;
  BOOL v224;
  float sinval;
  float *v226;
  float *v227;
  float *v228;
  float *v229;
  float *v230;
  uint64_t v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  unsigned int v234;
  float v235;
  unsigned int v236;
  float v237;
  unsigned int v238;
  uint64_t v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  unsigned int v242;
  float v243;
  unsigned int v244;
  float v245;
  unsigned int v246;
  void **v247;
  unsigned int *v248;
  int *v249;
  float *v250;
  uint64_t v251;
  int v252;
  float *v253;
  float v254;
  int v255;
  int v256;
  int v257;
  int v258;
  float v259;
  float v261;
  float v262;
  int v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float *v272;
  BOOL v273;
  int v274;
  float *v275;
  uint64_t v276;
  float *v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  int v284;
  char *v285;
  char *v286;
  _DWORD *v287;
  char *v288;
  size_t v289;
  unsigned int v291;
  void *v292;
  void *v293;
  _DWORD *v294;
  uint64_t v295;
  unsigned __int8 *v296;
  unint64_t v297;
  void **v298;
  char *v299;
  int v300;
  int v301;
  unsigned __int8 *v302;
  uint64_t v303;
  unint64_t v305;
  unsigned int v306;
  unint64_t v307;
  char *v308;
  uint64_t v309;
  void **v310;
  uint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  unsigned int v315;
  void *v316;
  char *v317;
  void **v318;
  unsigned int *v319;
  unsigned int v320;
  uint64_t v321;
  void *v322;
  uint64_t v323;
  double v324;
  double v325;
  double v326;
  double v327;
  uint64_t v328;
  char *v329;
  char *v330;
  uint64_t v331;
  void *v332;
  void *v333;
  int v334;
  int v335;
  int v336;
  unsigned int *v337;
  void **v338;
  unsigned int *v339;
  unsigned int v340;
  void *v341;
  uint64_t v342;
  double v343;
  double v344;
  double v345;
  double v346;
  _DWORD *v347;
  int *v348;
  _DWORD *v349;
  char *v350;
  int8x8_t v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  int v356;
  uint64_t v357;
  int *v358;
  int v359;
  void **v360;
  char *v361;
  uint64_t v362;
  int v363;
  BOOL v364;
  unint64_t v365;
  int *v366;
  _DWORD *v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  int v375;
  BOOL v376;
  uint64_t v377;
  int *v378;
  int v379;
  uint64_t v380;
  int *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int *v385;
  int v386;
  int *v387;
  int v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  int v393;
  int v394;
  int v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int v400;
  uint64_t v401;
  unint64_t v402;
  char *v403;
  char *v404;
  unsigned int v405;
  uint64_t v406;
  void *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int *v411;
  unint64_t v412;
  unsigned int v413;
  uint64_t v414;
  unsigned int v415;
  unint64_t v416;
  char *v417;
  void *v418;
  char *v419;
  uint64_t v420;
  double v421;
  double v422;
  double v423;
  double v424;
  char *v425;
  uint64_t v426;
  void **v427;
  void **v428;
  unint64_t v429;
  uint64_t v430;
  char *v431;
  uint64_t n;
  unint64_t v433;
  float v434;
  float *v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  void *v444;
  _DWORD *v445;
  uint64_t v446;
  uint64_t size;
  int *v448;
  _DWORD *v449;
  void **v450;
  uint64_t v451;
  _DWORD *v452;
  void *v453;
  char *v454;
  _QWORD *v455;
  size_t count;
  size_t counta;
  uint64_t v458;
  char *v459;
  _DWORD *v460;
  _DWORD *v461;
  int v462;
  char *v463;
  uint64_t v464;
  unsigned int v465;
  uint64_t v466;
  _DWORD *v467;
  unsigned int v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  float v472;
  unint64_t v473;
  void *v474;
  _DWORD *v475;
  void **v476;
  char *v477;
  unsigned int *v478;
  uint64_t v479;
  float v480;
  unsigned __int32 v481;
  float *v482;
  void *v483;
  void *v484;
  int v485;
  unint64_t v486;
  uint64_t v487;
  float v488;
  char *v489;
  unint64_t v490;
  unsigned int v491;
  unint64_t v492;
  float *v493;
  uint64_t v494;
  unsigned int v495;
  unsigned int v496;
  unsigned int *v497;
  void *v498;
  float32x4_t v499;
  unsigned int *v500;
  float32x4_t v501;
  float v502;
  void **v503;
  void **v504;
  unsigned int *v505;
  unsigned int *v506;
  float32x4_t v507;
  float v508;
  unint64_t v509;
  float *v510;
  _OWORD *v511;
  char *v512;
  _QWORD *v513;
  vDSP_Length *v514;
  float *v515;
  void *v516;
  void *v517;
  unsigned int *__n;
  uint64_t __na;
  size_t __nd;
  void **__nb;
  uint64_t __nc;
  _OWORD *v523;
  void *v524[2];
  unsigned int v525;
  unsigned __int8 *v526;
  void *v527;
  char *v528;
  void *v529[2];
  float v530;
  size_t v531;
  float *v532;
  char *v533;
  _DWORD *v534;
  float v535;
  float *v536;
  void **v537;
  size_t v538[2];
  char *v539;
  float v540;
  uint64_t v541;
  void *v542[2];
  char *v543;
  float v544;
  float v545;
  float v546;
  uint64_t v547;
  unsigned int v548;
  unsigned int v549;
  uint64_t v550;
  float v551;
  int v552;
  unsigned int v553;
  unsigned int v554;
  int v555;
  vDSP_Length __N;
  unint64_t v557;
  float v558;
  float v559;
  _DWORD v560[200];
  _QWORD v561[3];
  int v562;
  float v563[1200];
  float v564[3];
  int v565;
  _BYTE v566[4788];

  v10 = MEMORY[0x1E0C80A78](a1).n128_u32[0];
  v455 = v11;
  v510 = v13;
  v511 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v465 = v20;
  v488 = v21;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = v10;
  v34 = v33;
  *(_QWORD *)&v566[4772] = *MEMORY[0x1E0C80C00];
  v557 = 0;
  v493 = (float *)malloc_type_malloc(0x1680uLL, 0x100004052888210uLL);
  v517 = malloc_type_malloc(0x4000uLL, 0x1020040166361F2uLL);
  v35 = (uint64_t)malloc_type_malloc(0x800uLL, 0x100004000313F17uLL);
  v514 = (vDSP_Length *)malloc_type_malloc(8 * (v15 + 256), 0x100004000313F17uLL);
  v462 = v15;
  v512 = (char *)malloc_type_malloc(32 * v15, 0x100004052888210uLL);
  v513 = malloc_type_malloc(8 * (v15 + 256), 0x80040B8603338uLL);
  v516 = malloc_type_malloc(4 * (v15 + 256), 0x100004052888210uLL);
  v515 = (float *)malloc_type_malloc(0x400uLL, 0x100004052888210uLL);
  if (CCRectLowLevel_bFirstTime == 1)
  {
    PerMeshForFFTSIZE = (float *)CCRectLowLevel_retainedPerMeshPtr;
  }
  else
  {
    if (v17)
      PerMeshForFFTSIZE = 0;
    else
      PerMeshForFFTSIZE = createPerMeshForFFTSIZE();
    CCRectLowLevel_retainedPerMeshPtr = (uint64_t)PerMeshForFFTSIZE;
    CCRectLowLevel_bFirstTime = 1;
  }
  if (v17)
    v38 = v17;
  else
    v38 = PerMeshForFFTSIZE;
  v482 = v38;
  if (v19 != -1.0)
  {
    *(float *)v36.i32 = v19 * v19;
    v507 = (float32x4_t)vdupq_lane_s32(v36, 0);
    v39 = (int32x4_t)xmmword_1A15FB450;
    v40 = 0x3FFFFFFFFFFFFA60uLL;
    v499 = (float32x4_t)vdupq_n_s32(0x44B40000u);
    v501 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
    do
    {
      *(int32x4_t *)v542 = v39;
      v41 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(v39), v501), v499);
      *(float64x2_t *)v538 = vcvtq_f64_f32(*(float32x2_t *)v41.f32);
      *(float64x2_t *)v529 = vcvt_hight_f64_f32(v41);
      v42 = __sincos_stret(*(double *)&v529[1]);
      v44 = __sincos_stret(*(double *)v529);
      *(double *)&v43 = v44.__sinval;
      *((_QWORD *)&v43 + 1) = *(_QWORD *)&v42.__sinval;
      *(_OWORD *)v524 = v43;
      v45 = __sincos_stret(*(double *)&v538[1]);
      v48 = __sincos_stret(*(double *)v538);
      v47.f64[0] = v48.__cosval;
      v46.f64[0] = v48.__sinval;
      v46.f64[1] = v45.__sinval;
      v49.f64[0] = v44.__cosval;
      v49.f64[1] = v42.__cosval;
      v50 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v46), *(float64x2_t *)v524);
      v47.f64[1] = v45.__cosval;
      v51 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v47), v49);
      v52 = vmulq_f32(v50, v50);
      v53 = vmulq_f32(v51, v51);
      *(float32x4_t *)((char *)&sinScaleTab + v40 * 4 + 5760) = vsqrtq_f32(vmlaq_f32(v53, v52, v507));
      *(float32x4_t *)&cosScaleTab[v40 + 1440] = vsqrtq_f32(vmlaq_f32(v52, v53, v507));
      v53.i64[0] = 0x400000004;
      v53.i64[1] = 0x400000004;
      v39 = vaddq_s32(*(int32x4_t *)v542, (int32x4_t)v53);
      v40 += 4;
    }
    while (v40 * 4);
  }
  v54 = (char *)malloc_type_malloc(0x20000uLL, 0x1000040BDFB0063uLL);
  v55 = (char *)malloc_type_malloc(0x20000uLL, 0x1000040BDFB0063uLL);
  v56 = (char *)malloc_type_malloc(0x10000uLL, 0x4FEABBE8uLL);
  v543 = v54;
  v539 = v55;
  cannyEdgeWithGradientOutput(*v34, v56, v54, v55, 0.5, 0.9);
  thinBin((__int128 *)v56);
  for (i = 257; i != 511; ++i)
  {
    if (v56[i])
      trimChain((uint64_t)v56, i - 256, 1, 6);
  }
  for (j = 0; j != 254; ++j)
  {
    if (v56[j + 65025])
      trimChain((uint64_t)v56, j + 1, 254, 2);
  }
  v59 = 1;
  v60 = 257;
  do
  {
    if (v56[v60])
      trimChain((uint64_t)v56, 1, v59, 0);
    v60 += 256;
    ++v59;
  }
  while (v59 != 255);
  v61 = 1;
  v62 = 510;
  do
  {
    if (v56[v62])
      trimChain((uint64_t)v56, 254, v61, 4);
    v62 += 256;
    ++v61;
  }
  while (v61 != 255);
  for (k = 0; k != 0x10000; k += 8)
  {
    v64 = vceq_s8(*(int8x8_t *)&v56[k], (int8x8_t)0x303030303030303);
    if ((v64.i8[0] & 1) != 0)
      v56[k] = 0;
    if ((v64.i8[1] & 1) != 0)
      v56[k + 1] = 0;
    if ((v64.i8[2] & 1) != 0)
      v56[k + 2] = 0;
    if ((v64.i8[3] & 1) != 0)
      v56[k + 3] = 0;
    if ((v64.i8[4] & 1) != 0)
      v56[k + 4] = 0;
    if ((v64.i8[5] & 1) != 0)
      v56[k + 5] = 0;
    if ((v64.i8[6] & 1) != 0)
      v56[k + 6] = 0;
    if ((v64.i8[7] & 1) != 0)
      v56[k + 7] = 0;
  }
  v523 = v56;
  v472 = v23;
  v487 = v35;
  v65 = malloc_type_malloc(0x30uLL, 0x109004023CC7A6AuLL);
  *v65 = 0x400000000000;
  v65[1] = 0x10000000100;
  v65[2] = malloc_type_malloc(0x4000uLL, 0x30474B5AuLL);
  v65[3] = malloc_type_malloc(0x4000uLL, 0x50B77A67uLL);
  v65[4] = malloc_type_malloc(0x10000uLL, 0x100004052888210uLL);
  v66 = 0;
  LODWORD(v35) = 0;
  v67 = 0;
  v534 = malloc_type_malloc(0x400uLL, 0x100004052888210uLL);
  v65[5] = v534;
  v68 = *((_DWORD *)v65 + 1);
  v69 = v65[2];
  v70 = v65[3];
  v71 = v65[4];
  v476 = (void **)v65;
  v65[1] = 0x10000000100;
  v72 = 0;
  do
  {
    v73 = 0;
    v35 = (int)v35;
    do
    {
      if (*((_BYTE *)v523 + v35))
      {
        *(_BYTE *)(v69 + v72) = v73;
        *(_BYTE *)(v70 + v72) = v66;
        v74 = atan2f((float)*(__int16 *)&v539[2 * v35], (float)*(__int16 *)&v543[2 * v35]);
        *(float *)(v71 + 4 * v72++) = (float)(fmodf(3.1416 - v74, 3.1416) * 180.0) / 3.1416;
        if (v72 == v68)
        {
          *(_DWORD *)v65 = v68;
          goto LABEL_59;
        }
      }
      ++v35;
      ++v73;
    }
    while (v73 != 256);
    if (v67 == v72)
      v75 = -1;
    else
      v75 = v67;
    v534[v66++] = v75;
    v67 = v72;
  }
  while (v66 != 256);
  *(_DWORD *)v65 = v72;
  if (!v543)
    goto LABEL_60;
LABEL_59:
  free(v543);
LABEL_60:
  if (v539)
    free(v539);
  __N = 0;
  v76 = malloc_type_malloc(0x40000uLL, 0x100004052888210uLL);
  v77 = (DSPComplex *)malloc_type_malloc(0x40000uLL, 0x100004052888210uLL);
  v79 = v77;
  v80 = 0;
  do
  {
    LOBYTE(v78) = *((_BYTE *)v523 + v80);
    v78 = (float)LODWORD(v78) * 255.0;
    *(&v77->real + v80++) = v78;
  }
  while ((_DWORD)v80 != 0x10000);
  v81 = malloc_type_malloc(0x10000uLL, 0xF95E39ECuLL);
  v82 = v523[3];
  v84 = *v523;
  v83 = v523[1];
  v81[2] = v523[2];
  v81[3] = v82;
  *v81 = v84;
  v81[1] = v83;
  v85 = v523[7];
  v87 = v523[4];
  v86 = v523[5];
  v81[6] = v523[6];
  v81[7] = v85;
  v81[4] = v87;
  v81[5] = v86;
  v88 = v523[11];
  v90 = v523[8];
  v89 = v523[9];
  v81[10] = v523[10];
  v81[11] = v88;
  v81[8] = v90;
  v81[9] = v89;
  v91 = v523[15];
  v93 = v523[12];
  v92 = v523[13];
  v81[14] = v523[14];
  v81[15] = v91;
  v81[12] = v93;
  v81[13] = v92;
  v94 = v523 + 16;
  v95 = v81 + 16;
  for (m = 1; m != 255; ++m)
  {
    v97 = 0;
    *(_BYTE *)v95 = *(_BYTE *)v94;
    v98 = (8 * (*((_BYTE *)v94 - 255) & 1)) & 0xC8 | (16 * (*((_BYTE *)v94 + 1) & 1)) & 0xD8 | (32
                                                                                              * (*((_BYTE *)v94 + 257) & 1)) | *(_BYTE *)(v94 - 16) & 1 | (2 * (*(_BYTE *)v94 & 1)) & 0xFB | (4 * (v94[16] & 1));
    do
    {
      v99 = ((*((_BYTE *)v94 + v97 + 2) & 1) << 7) | ((*((_BYTE *)v94 + v97 - 254) & 1) << 6) | ((*((_BYTE *)v94
                                                                                                  + v97
                                                                                                  + 258) & 1) << 8) | v98;
      *((_BYTE *)v95 + v97 + 1) = dilate[v99];
      v98 = v99 >> 3;
      ++v97;
    }
    while ((_DWORD)v97 != 254);
    v100 = (char *)v95 + v97;
    v101 = (char *)v94 + v97;
    v95 = (_OWORD *)((char *)v95 + v97 + 2);
    v100[1] = v101[1];
    v94 = v101 + 2;
  }
  v102 = *v94;
  v103 = v94[1];
  v104 = v94[3];
  v95[2] = v94[2];
  v95[3] = v104;
  *v95 = v102;
  v95[1] = v103;
  v105 = v94[4];
  v106 = v94[5];
  v107 = v94[7];
  v95[6] = v94[6];
  v95[7] = v107;
  v95[4] = v105;
  v95[5] = v106;
  v108 = v94[8];
  v109 = v94[9];
  v110 = v94[11];
  v95[10] = v94[10];
  v95[11] = v110;
  v95[8] = v108;
  v95[9] = v109;
  v111 = v94[12];
  v112 = v94[13];
  v113 = v94[15];
  v95[14] = v94[14];
  v95[15] = v113;
  v95[12] = v111;
  v95[13] = v112;
  memcpy(v523, v81, 0x10000uLL);
  free(v81);
  fftGrayMag(v79, v76, v482);
  free(v79);
  v555 = 0;
  fftProject((uint64_t)v76, v493, (float *)&v555, 0.0625);
  free(v76);
  v114 = 0x3FFFFFFFFFFFFA60uLL;
  do
  {
    *(float32x4_t *)&v493[v114 + 1440] = vmulq_f32(*(float32x4_t *)((char *)&sinScaleTab + v114 * 4 + 5760), *(float32x4_t *)&v493[v114 + 1440]);
    v114 += 4;
  }
  while (v114 * 4);
  normalizeArray(v493, 0x5A0u);
  v115 = (float *)malloc_type_malloc(0x1680uLL, 0x100004052888210uLL);
  v116 = (float *)malloc_type_malloc(0x1680uLL, 0x100004052888210uLL);
  boxFilter(v493, 0x5A0u, 3u, 2, v115);
  boxFilter(v493, 0x5A0u, 0x13u, 4, v116);
  normalizeArray(v115, 0x5A0u);
  normalizeArray(v116, 0x5A0u);
  v554 = 0;
  v535 = 90.0 - v488;
  v117 = 0.3;
  while (1)
  {
    v530 = v117;
    findPeaks(v116, 1440, v564, &v554, 0.0, 0.003);
    v118 = v554;
    if (v554 >= 2)
      break;
LABEL_72:
    v117 = v530 * 0.8;
    if ((float)(v530 * 0.8) < 0.1)
    {
      v364 = (_DWORD)v118 == 0;
      v132 = (void *)v487;
      v133 = v523;
      v134 = v493;
      if ((_DWORD)v118)
      {
        v131 = 1;
        goto LABEL_89;
      }
      goto LABEL_96;
    }
  }
  v119 = 0;
  v120 = (float *)v566;
  v121 = 1;
  while (1)
  {
    v122 = __sincosf_stret((float)(v564[6 * v119 + 1] * 0.125) * 0.017453);
    v123 = atan2f(v122.__sinval * v19, v122.__cosval);
    if (++v119 < v118)
      break;
LABEL_85:
    ++v121;
    v120 += 6;
    if (v119 == (_DWORD)v118 - 1)
      goto LABEL_72;
  }
  v124 = v123 * 57.296;
  v125 = v118;
  v126 = v120;
  while (1)
  {
    v127 = __sincosf_stret((float)(*v126 * 0.125) * 0.017453);
    v128 = atan2f(v127.__sinval * v19, v127.__cosval) * 57.296;
    if (v124 <= v128)
    {
      v130 = v128 - v124;
      v129 = v130 >= 90.0 ? 180.0 - v130 : -v130;
    }
    else
    {
      v129 = v124 - v128;
      if (v129 >= 90.0)
        v129 = v129 + -180.0;
    }
    if (fabsf(v129) >= v535)
      break;
    v126 += 6;
    if (v121 == --v125)
      goto LABEL_85;
  }
  v364 = (_DWORD)v118 == 0;
  if ((_DWORD)v118)
  {
    v131 = 0;
    v132 = (void *)v487;
    v133 = v523;
    v134 = v493;
LABEL_89:
    v135 = (float *)&v565;
    v136 = 1.0;
    v137 = v118;
    do
    {
      v138 = (int)(float)(*v135 + 0.5) % 0x5A0u;
      if (v116[(int)(float)(*(v135 - 1) + 0.5) % 0x5A0u] < v136)
        v136 = v116[(int)(float)(*(v135 - 1) + 0.5) % 0x5A0u];
      if (v116[v138] < v136)
        v136 = v116[v138];
      v135 += 6;
      --v137;
    }
    while (v137);
    if ((v131 & 1) != 0)
    {
LABEL_96:
      free(v115);
      free(v116);
      free(v133);
      free(v517);
      v139 = 0;
      v140 = v476;
      if (v132)
        goto LABEL_445;
      goto LABEL_446;
    }
    v553 = 0;
    findPeaks(v115, 1440, v563, &v553, v136, 0.0);
    v141 = 0;
    if (!v364)
    {
      v142 = 0;
      LODWORD(v143) = 0;
      v141 = 0;
      v144 = v553;
      v145 = -1;
      while (1)
      {
        v146 = &v564[6 * v142];
        v148 = v146[2];
        v147 = v146[3];
        v149 = v115[(int)(float)(v148 + 0.5) % 0x5A0u];
        if (v142)
          v150 = 0;
        else
          v150 = v143;
        if (v148 <= v147)
          v151 = v148;
        else
          v151 = 0.0;
        if (v148 <= v147)
          v152 = v143;
        else
          v152 = v150;
        v153 = &v563[6 * v152 + 1];
        v154 = v152 + 1;
        do
        {
          v143 = v152;
          v155 = v154;
          v156 = *v153;
          v153 += 6;
          v157 = v156;
          ++v152;
          ++v154;
        }
        while (v156 < v151 && v143 < v144);
        if (v149 >= v115[(int)(float)(v147 + 0.5) % 0x5A0u])
          v149 = v115[(int)(float)(v147 + 0.5) % 0x5A0u];
        if (v148 > v147)
          v145 = v142;
        if ((_DWORD)v144 == (_DWORD)v143)
          break;
        if (v157 <= v147)
        {
          while (1)
          {
            if (v115[v157] >= v149)
              v560[v141++] = v155 - 1;
            if ((_DWORD)v144 == v155)
              break;
            v157 = v563[6 * v155++ + 1];
            if (v157 > v147)
            {
              LODWORD(v143) = v155 - 1;
              goto LABEL_128;
            }
          }
          LODWORD(v143) = v144;
        }
LABEL_128:
        if (++v142 == v118)
          goto LABEL_131;
      }
      LODWORD(v143) = v144;
LABEL_131:
      if (v145 != -1)
      {
        v159 = 0;
        v160 = &v564[6 * v145];
        v161 = v160[2];
        v162 = &v563[6 * v143 + 1];
        do
        {
          v163 = v143 + v159;
          v164 = *v162;
          v162 += 6;
          v165 = v164;
          ++v159;
        }
        while (v164 < v161 && v163 < v144);
        v167 = v115[(int)(float)(v161 + 0.5) % 0x5A0u] >= v115[(int)(float)(v160[3] + 0.5) % 0x5A0u]
             ? v115[(int)(float)(v160[3] + 0.5) % 0x5A0u]
             : v115[(int)(float)(v161 + 0.5) % 0x5A0u];
        if (v163 < v144 && v165 < 1440.0)
        {
          v168 = v143 + v159;
          do
          {
            if (v115[v165] >= v167)
              v560[v141++] = v168 - 1;
            if ((_DWORD)v144 == v168)
              break;
            v165 = v563[6 * v168++ + 1];
          }
          while (v165 < 1440.0);
        }
      }
      if ((int)v141 > 0)
      {
        v169 = v141;
        v170 = v560;
        v171 = v561;
        v172 = v141;
        do
        {
          v173 = *v170++;
          v174 = &v563[6 * v173];
          *(_OWORD *)v171 = *(_OWORD *)v174;
          v171[2] = *((_QWORD *)v174 + 2);
          v171 += 3;
          --v172;
        }
        while (v172);
        goto LABEL_153;
      }
    }
  }
  else
  {
    v553 = 0;
    findPeaks(v115, 1440, v563, &v553, 1.0, 0.0);
    v141 = 0;
    v134 = v493;
  }
  v169 = v141;
LABEL_153:
  free(v134);
  free(v115);
  free(v116);
  v459 = (char *)malloc_type_calloc(v169 * (unint64_t)v169, 1uLL, 0x7E06169FuLL);
  v525 = v141;
  if (v141 >= 2)
  {
    v531 = v169 + 1;
    v175 = v459;
    v176 = v459 + 1;
    v177 = (float *)&v562;
    v178 = 1;
    do
    {
      v179 = __sincosf_stret((float)(*((float *)&v561[3 * v178 - 2] - 1) * 0.125) * 0.017453);
      v180 = 0;
      v181 = atan2f(v179.__sinval * v19, v179.__cosval) * 57.296;
      v182 = v177;
      v183 = v175;
      do
      {
        v184 = __sincosf_stret((float)(*v182 * 0.125) * 0.017453);
        v185 = atan2f(v184.__sinval * v19, v184.__cosval) * 57.296;
        if (v181 <= v185)
        {
          v187 = v185 - v181;
          if (v187 >= 90.0)
            v186 = 180.0 - v187;
          else
            v186 = -v187;
        }
        else
        {
          v186 = v181 - v185;
          if (v186 >= 90.0)
            v186 = v186 + -180.0;
        }
        if (fabsf(v186) >= v535)
        {
          v176[v180] = 1;
          v183[v169] = 1;
        }
        ++v180;
        v183 += v169;
        v182 += 6;
      }
      while (v178 + v180 < v169);
      ++v178;
      v175 += v531;
      v176 += v531;
      v177 += 6;
    }
    while (v178 != v169);
  }
  v188 = malloc_type_calloc(4uLL, v169, 0x525D124FuLL);
  v189 = malloc_type_calloc(4uLL, v169, 0x31F2396EuLL);
  v190 = malloc_type_calloc(4uLL, v169, 0xF28688B8uLL);
  v467 = v190;
  v460 = v189;
  v461 = v188;
  if (!v525)
  {
    v500 = (unsigned int *)malloc_type_calloc(0x50uLL, v169, 0xA1C02EEBuLL);
    v454 = (char *)malloc_type_calloc(0, 1uLL, 0xE0A881D3uLL);
    v541 = 0;
    v468 = 0;
    v132 = (void *)v487;
    v292 = v523;
    v195 = v476;
    goto LABEL_434;
  }
  v191 = 0;
  v192 = (unsigned __int8 *)v459;
  v193 = v459;
  v194 = v472;
  v195 = v476;
  do
  {
    v196 = 0;
    v197 = v192;
    do
    {
      v188[v191] += v193[v196];
      v198 = v189[v191] + *v197;
      v189[v191] = v198;
      ++v196;
      v197 += v169;
    }
    while (v169 != v196);
    v190[v191] = v198 + v188[v191];
    ++v191;
    ++v192;
    v193 += v169;
  }
  while (v191 != v169);
  v500 = (unsigned int *)malloc_type_calloc(0x50uLL, v169, 0xA1C02EEBuLL);
  v199 = v467;
  v200 = 0;
  v468 = 0;
  v201 = v459;
  v202 = v459;
  v480 = v19;
  v481 = v32;
  do
  {
    if (!v199[v200])
      goto LABEL_254;
    v203 = *((float *)&v561[3 * v200] + 1) * 0.125;
    v204 = __sincosf_stret((float)(v203 * 3.1416) / 180.0);
    v205 = *(unsigned int *)v195;
    v206 = (float *)v195[4];
    v207 = malloc_type_malloc(v205, 0xCDFC7244uLL);
    v208 = (unsigned __int8 *)malloc_type_malloc(v205, 0x16BC031DuLL);
    v209 = v208;
    v210 = v203 + -5.0;
    v544 = v203;
    v211 = v203 + 5.0;
    v494 = v200;
    if (v210 >= 0.0)
    {
      if (v211 < 180.0)
      {
        cosval = v204.__cosval;
        if (!(_DWORD)v205)
          goto LABEL_200;
        v214 = 0;
        v215 = 0;
        do
        {
          v216 = v206[v214];
          if (v216 >= v210 && v216 <= v211)
          {
            v207[v215] = *((_BYTE *)v195[2] + v214);
            v208[v215++] = *((_BYTE *)v195[3] + v214);
          }
          ++v214;
        }
        while (v205 != v214);
        goto LABEL_201;
      }
      v218 = v211 + 180.0;
      v219 = v210;
      v220 = fmodf(v218, 180.0);
      v212 = v219;
      v211 = v220;
    }
    else
    {
      v212 = fmodf(v210 + 180.0, 180.0);
    }
    cosval = v204.__cosval;
    if (!(_DWORD)v205)
    {
LABEL_200:
      v215 = 0;
      goto LABEL_201;
    }
    v221 = 0;
    v215 = 0;
    do
    {
      v222 = v206[v221];
      v223 = v222 < v212 || v222 > 180.0;
      if (!v223 || (v222 >= 0.0 ? (v224 = v222 > v211) : (v224 = 1), !v224))
      {
        v207[v215] = *((_BYTE *)v195[2] + v221);
        v209[v215++] = *((_BYTE *)v195[3] + v221);
      }
      ++v221;
    }
    while (v205 != v221);
LABEL_201:
    v526 = v209;
    v508 = fabsf(cosval);
    sinval = v204.__sinval;
    v502 = fabsf(v204.__sinval);
    v226 = (float *)malloc_type_calloc(0x800uLL, 1uLL, 0x2902583DuLL);
    v227 = v226 + 128;
    v536 = (float *)malloc_type_malloc(0x800uLL, 0x100004052888210uLL);
    v532 = (float *)malloc_type_malloc(0x600uLL, 0x1000040504FFAC1uLL);
    LODWORD(v550) = 0;
    v559 = 0.0;
    v228 = (float *)&v500[20 * v468];
    v228[1] = v544;
    v229 = v228 + 2;
    v230 = v228 + 3;
    v489 = v202;
    v483 = v207;
    if (v508 <= v502)
    {
      *v229 = v204.__cosval;
      *v230 = -v204.__sinval;
      v545 = v204.__cosval / v204.__sinval;
      if (v215)
      {
        v239 = v215;
        v240 = v526;
        v241 = v207;
        do
        {
          v242 = *v240++;
          v243 = (float)v242;
          v244 = *v241++;
          v245 = modff((float)(v243 + (float)((float)-(float)(v204.__cosval / v204.__sinval) * (float)v244))+ (float)(v545 * 128.0), &v559);
          v246 = (int)v559;
          if ((int)v559 <= 0xFF)
          {
            v227[v246] = (float)(1.0 - v245) + v227[v246];
            v227[v246 + 1] = v245 + v227[v246 + 1];
          }
          --v239;
        }
        while (v239);
        goto LABEL_213;
      }
    }
    else
    {
      *v229 = -v204.__cosval;
      *v230 = v204.__sinval;
      v545 = v204.__sinval / v204.__cosval;
      if (v215)
      {
        v231 = v215;
        v232 = v207;
        v233 = v526;
        do
        {
          v234 = *v232++;
          v235 = (float)v234;
          v236 = *v233++;
          v237 = modff((float)(v235 + (float)((float)-(float)(v204.__sinval / v204.__cosval) * (float)v236))+ (float)(v545 * 128.0), &v559);
          v238 = (int)v559;
          if ((int)v559 <= 0xFF)
          {
            v227[v238] = (float)(1.0 - v237) + v227[v238];
            v227[v238 + 1] = v237 + v227[v238 + 1];
          }
          --v231;
        }
        while (v231);
LABEL_213:
        v247 = v195;
        sinval = v204.__sinval;
        goto LABEL_215;
      }
    }
    v247 = v195;
LABEL_215:
    v248 = &v500[20 * v468];
    boxFilter(v226, 0x200u, 3u, 3, v536);
    normalizeArray(v536, 0x200u);
    findPeaks(v536, 512, v532, &v550, 0.1, 0.0);
    v249 = (int *)malloc_type_malloc(0x100uLL, 0x100004052888210uLL);
    v250 = (float *)malloc_type_malloc(0x100uLL, 0x100004052888210uLL);
    v558 = 0.0;
    v251 = v550;
    if ((_DWORD)v550)
    {
      __n = &v500[20 * v468];
      v252 = 0;
      v546 = -v545;
      v253 = v532 + 1;
      v254 = v204.__cosval;
      if (v508 <= v502)
        v254 = sinval;
      v540 = v254;
      v255 = -1;
      v256 = -1;
      *(float *)&v257 = -1.0e10;
      *(float *)&v258 = -1.0e10;
      do
      {
        v259 = *v253;
        if (*v253 >= 128.0 && v259 <= 384.0)
        {
          v261 = v25;
          v262 = *(float *)&v257;
          v263 = v29;
          v264 = v27;
          v265 = v261;
          v266 = *(float *)&v258;
          v267 = modff(*v253, &v558);
          v268 = (float)((float)((float)(v226[v558] + (float)(v226[(int)v558 - 1] * (float)(1.0 - v267)))
                               + v226[(int)v558 + 1])
                       + (float)(v226[(int)v558 + 2] * v267))
               / 3.0;
          if (v268 >= 2.0)
          {
            v250[v252] = v268;
            *(float *)&v258 = v266;
            if (v268 <= v266)
            {
              v271 = v265;
              if (v268 <= v262)
                v268 = v262;
              else
                v255 = v252;
              v27 = v264;
              v25 = v271;
            }
            else
            {
              if (v266 <= v262)
                v270 = v262;
              else
                v270 = v266;
              if (v266 > v262)
                v255 = v256;
              *(float *)&v258 = v268;
              v268 = v270;
              v256 = v252;
              v25 = v265;
              v27 = v264;
            }
            v249[v252++] = (int)(float)(v540 * (float)((float)(v259 + -128.0) + (float)(v546 * 128.0)));
            *(float *)&v257 = v268;
            v29 = v263;
            v19 = v480;
            v32 = v481;
          }
          else
          {
            *(float *)&v258 = v266;
            v269 = v265;
            v27 = v264;
            v29 = v263;
            v19 = v480;
            v32 = v481;
            *(float *)&v257 = v262;
            v25 = v269;
          }
        }
        v253 += 6;
        --v251;
      }
      while (v251);
      if (v252 <= 0)
      {
        v279 = 0;
        v194 = v472;
        v247 = v476;
        v200 = v494;
        v248 = &v500[20 * v468];
      }
      else
      {
        v200 = v494;
        v272 = (float *)&v500[20 * v468];
        v272[4] = (float)*v249;
        v272[8] = *v250;
        v248 = (unsigned int *)v272;
        *__n = 1;
        v274 = v252 - 1;
        v273 = v252 == 1;
        v194 = v472;
        v247 = v476;
        if (v273)
          goto LABEL_250;
        v275 = (float *)&v500[20 * v468];
        v275[5] = (float)v249[v274];
        v275[9] = v250[v274];
        *__n = 2;
        v276 = 2;
        if (v256 >= 1 && v256 != v274)
        {
          v277 = (float *)&v500[20 * v468];
          v277[6] = (float)v249[v256];
          v277[10] = v250[v256];
          *__n = 3;
          v276 = 3;
        }
        v248 = &v500[20 * v468];
        if (v255 < 1 || v255 == v274)
          goto LABEL_250;
        v278 = (uint64_t)&v500[20 * v468 + v276];
        *(float *)(v278 + 16) = (float)v249[v255];
        *(float *)(v278 + 32) = v250[v255];
        v279 = v276 + 1;
      }
    }
    else
    {
      v279 = 0;
      v194 = v472;
      v200 = v494;
    }
    *v248 = v279;
LABEL_250:
    free(v483);
    free(v526);
    free(v532);
    free(v226);
    free(v536);
    free(v249);
    free(v250);
    if (*v248)
    {
      ++v468;
      v199 = v467;
      v202 = v489;
      v195 = v247;
    }
    else
    {
      v280 = 0;
      v461[v200] = 0;
      v460[v200] = 0;
      v202 = v489;
      v281 = v489;
      v199 = v467;
      v467[v200] = 0;
      v195 = v247;
      do
      {
        *v281 = 0;
        v201[v280++] = 0;
        v281 += v169;
      }
      while (v169 != v280);
    }
LABEL_254:
    ++v200;
    v201 += v169;
    ++v202;
  }
  while (v200 != v169);
  count = v468 * v468;
  v282 = (char *)malloc_type_calloc(count, 1uLL, 0xE0A881D3uLL);
  v283 = 0;
  v284 = 0;
  v285 = v459;
  v454 = v282;
  v286 = v282;
  v132 = (void *)v487;
  do
  {
    if (v467[v283])
    {
      v287 = v467;
      v288 = v285;
      v289 = v169;
      do
      {
        if (*v287++)
        {
          *v286++ = *v288;
          if (*v288)
            ++v284;
        }
        ++v288;
        --v289;
      }
      while (v289);
    }
    ++v283;
    v285 += v169;
  }
  while (v283 != v169);
  v541 = v468;
  if (!v284)
  {
    v292 = v523;
    goto LABEL_434;
  }
  v537 = (void **)malloc_type_calloc(count, 8uLL, 0x5FEC6413uLL);
  v533 = (char *)malloc_type_calloc(count, 4uLL, 0x9C8A125AuLL);
  v559 = 0.0;
  v550 = 0x424CCCCD00000001;
  v551 = v19;
  v552 = 256;
  if (v465 >= 0x20)
    v291 = 32;
  else
    v291 = v465;
  v292 = v523;
  if (v468 > v291)
    goto LABEL_433;
  v293 = malloc_type_calloc(v468, 4uLL, 0x100004052888210uLL);
  v294 = malloc_type_calloc(v468, 4uLL, 0x100004052888210uLL);
  v452 = v294;
  v453 = v293;
  if (!v468)
    goto LABEL_432;
  v295 = 0;
  v296 = (unsigned __int8 *)v454;
  v297 = v468;
  v298 = v537;
  v299 = v533;
  do
  {
    v300 = 0;
    v301 = 1;
    v302 = v296;
    v303 = v468;
    do
    {
      if (*v302++)
      {
        v300 |= v301;
        ++v294[v295];
      }
      v301 *= 2;
      --v303;
    }
    while (v303);
    *((_DWORD *)v293 + v295++) = v300;
    v296 += v468;
  }
  while (v295 != v468);
  v558 = 0.0;
  v549 = 0;
  v458 = 8 * v468;
  if (v468 < 2)
    goto LABEL_426;
  v305 = 0;
  v306 = v468 - 1;
  v509 = v462;
  v307 = (unint64_t)(v500 + 20);
  size = 4 * v468;
  v308 = &v533[size + 4];
  v309 = v458 + 8;
  v310 = &v537[(unint64_t)v458 / 8 + 1];
  v311 = 1;
  v474 = (void *)(v468 - 1);
  do
  {
    if (!*((_DWORD *)v293 + v305))
    {
      ++v305;
      goto LABEL_304;
    }
    v312 = v305 * v297;
    v313 = (char *)&v298[v305 * v297];
    v314 = &v299[4 * v305 * v297];
    v315 = *(_DWORD *)&v314[4 * v305];
    __na = *(_QWORD *)&v313[8 * v305];
    if (__na)
    {
      v558 = *(float *)&v314[4 * v305];
    }
    else if (v315)
    {
      v315 = 0;
      __na = 0;
      v558 = 0.0;
    }
    else
    {
      v495 = v306;
      v503 = v310;
      singleton((unint64_t)&v500[20 * v305], (uint64_t)&v550, &v558);
      v315 = LODWORD(v558);
      if (v558 == 0.0)
      {
        __na = 0;
        *(_DWORD *)&v314[4 * v305] = -1;
      }
      else
      {
        __nd = (unint64_t)LODWORD(v558) << 6;
        v316 = malloc_type_malloc(__nd, 0x1020040E4DCC77DuLL);
        memcpy(v316, &leqBuffer, __nd);
        __na = (uint64_t)v316;
        *(_QWORD *)&v313[8 * v305] = v316;
        *(_DWORD *)&v314[4 * v305] = v315;
      }
      v297 = v468;
      v298 = v537;
      v299 = v533;
      v309 = v458 + 8;
      v310 = v503;
      v306 = v495;
    }
    if (++v305 < v297)
    {
      v490 = v305;
      v317 = &v454[v312];
      v504 = v310;
      v318 = v310;
      v477 = v308;
      v319 = (unsigned int *)v308;
      v484 = (void *)v307;
      v496 = v306;
      v320 = v306;
      v321 = 4 * v468 + 4;
      while (1)
      {
        if (v317[v311])
        {
          v322 = *v318;
          LODWORD(v323) = *v319;
          if (*v318)
          {
            v549 = *v319;
            if (v315)
              goto LABEL_292;
          }
          else if ((_DWORD)v323)
          {
            v549 = 0;
          }
          else
          {
            singleton(v307, (uint64_t)&v550, &v549);
            v323 = v549;
            if (v549)
            {
              v322 = malloc_type_malloc((unint64_t)v549 << 6, 0x1020040E4DCC77DuLL);
              v321 = 4 * v468 + 4;
              memcpy(v322, &leqBuffer, v323 << 6);
              *v318 = v322;
              *v319 = v323;
              v297 = v468;
              v298 = v537;
              v299 = v533;
              v309 = v458 + 8;
              if (v315)
              {
LABEL_292:
                if ((_DWORD)v323)
                {
                  generateQuadrilaterals(__na, v315, (uint64_t)v322, v323, (uint64_t)v517, &v559, v194);
                  v309 = v458 + 8;
                  v299 = v533;
                  v298 = v537;
                  v297 = v468;
                  if (v559 != 0.0)
                  {
                    *(float *)&v324 = v19;
                    LODWORD(v325) = v32;
                    LODWORD(v326) = v31;
                    LODWORD(v327) = v29;
                    processQuadrilaterals((uint64_t)v517, LODWORD(v559), (uint64_t)v523, v487, (uint64_t)v515, &__N, v324, v325, v326, v327, v27, v25, a11);
                    v321 = 4 * v468 + 4;
                    mergeQuads((uint64_t)v517, v487, v515, v514, v512, v513, v516, __N, v511, v510, v462, &v557);
                    v309 = v458 + 8;
                    v299 = v533;
                    v298 = v537;
                    v297 = v468;
                  }
                }
              }
            }
            else
            {
              *v319 = -1;
              v297 = v468;
              v298 = v537;
              v299 = v533;
              v309 = v458 + 8;
            }
          }
        }
        ++v317;
        v307 += 80;
        v319 = (unsigned int *)((char *)v319 + v321);
        v318 = (void **)((char *)v318 + v309);
        if (!--v320)
        {
          v195 = v476;
          v308 = v477;
          v293 = v453;
          v305 = v490;
          v307 = (unint64_t)v484;
          v310 = v504;
          v306 = v496;
          goto LABEL_304;
        }
      }
    }
    v293 = v453;
LABEL_304:
    ++v311;
    --v306;
    v307 += 80;
    v308 += size + 4;
    v310 = (void **)((char *)v310 + v309);
  }
  while ((void *)v305 != v474);
  if (v468 < 3)
    goto LABEL_426;
  v328 = 0;
  v463 = v299 + 4;
  v450 = v298 + 1;
  while (2)
  {
    v469 = v328;
    if (v452[v328] >= 2u)
    {
      v329 = (char *)&v298[v328 * v297];
      v330 = &v299[4 * v328 * v297];
      LODWORD(v331) = *(_DWORD *)&v330[4 * v328];
      v547 = *(_QWORD *)&v329[8 * v328];
      if (v547)
      {
        v558 = *(float *)&v330[4 * v328];
      }
      else if ((_DWORD)v331)
      {
        LODWORD(v331) = 0;
        v547 = 0;
        v558 = 0.0;
      }
      else
      {
        singleton((unint64_t)&v500[20 * v328], (uint64_t)&v550, &v558);
        v331 = LODWORD(v558);
        if (v558 == 0.0)
        {
          v547 = 0;
          *(_DWORD *)&v330[4 * v469] = -1;
        }
        else
        {
          v332 = malloc_type_malloc((unint64_t)LODWORD(v558) << 6, 0x1020040E4DCC77DuLL);
          memcpy(v332, &leqBuffer, v331 << 6);
          v547 = (uint64_t)v332;
          *(_QWORD *)&v329[8 * v469] = v332;
          *(_DWORD *)&v330[4 * v469] = v331;
        }
        v297 = v468;
        v298 = v537;
        v299 = v533;
      }
      v333 = 0;
      v334 = *((_DWORD *)v453 + v469);
      v335 = 1;
      __nb = v450;
      v505 = (unsigned int *)v463;
      v497 = v500 + 20;
      v491 = v468 - 1;
      while (1)
      {
        v527 = (char *)v333 + 1;
        v485 = v335;
        if ((v335 & v334) != 0 && (unint64_t)v527 < v297)
          break;
LABEL_333:
        v335 = 2 * v485;
        --v491;
        v497 += 20;
        v505 = (unsigned int *)((char *)v505 + size + 4);
        __nb = (void **)((char *)__nb + v458 + 8);
        v333 = v527;
        if (v527 == v474)
          goto LABEL_334;
      }
      v336 = 2 << (char)v333;
      v337 = v497;
      v478 = &v500[20 * (_QWORD)v333];
      v338 = __nb;
      v339 = v505;
      v340 = v491;
      while (2)
      {
        if ((v336 & v334) != 0)
        {
          v341 = *v338;
          LODWORD(v342) = *v339;
          if (*v338)
          {
            v549 = *v339;
            if ((_DWORD)v331)
            {
LABEL_323:
              if ((_DWORD)v342)
              {
                generateQuadrilaterals(v547, v331, (uint64_t)v341, v342, (uint64_t)v517, &v559, v194);
                *(float *)&v343 = v19;
                LODWORD(v344) = v32;
                LODWORD(v345) = v31;
                LODWORD(v346) = v29;
                processQuadrilaterals((uint64_t)v517, LODWORD(v559), (uint64_t)v523, v487, (uint64_t)v515, &__N, v343, v344, v345, v346, v27, v25, a11);
                mergeQuads((uint64_t)v517, v487, v515, v514, v512, v513, v516, __N, v511, v510, v509, &v557);
                v299 = v533;
                v298 = v537;
                v297 = v468;
              }
            }
          }
          else if ((_DWORD)v342)
          {
            v549 = 0;
          }
          else
          {
            doubleton(v478, v337, (uint64_t)&v550, &v549);
            v342 = v549;
            if (v549)
            {
              v341 = malloc_type_malloc((unint64_t)v549 << 6, 0x1020040E4DCC77DuLL);
              memcpy(v341, &leqBuffer, v342 << 6);
              *v338 = v341;
              *v339 = v342;
              v297 = v468;
              v298 = v537;
              v299 = v533;
              if ((_DWORD)v331)
                goto LABEL_323;
            }
            else
            {
              *v339 = -1;
              v297 = v468;
              v298 = v537;
              v299 = v533;
            }
          }
        }
        v336 *= 2;
        v337 += 20;
        ++v339;
        ++v338;
        if (!--v340)
          goto LABEL_333;
        continue;
      }
    }
LABEL_334:
    v328 = v469 + 1;
    if (v469 + 1 != v297)
      continue;
    break;
  }
  v195 = v476;
  v347 = v453;
  if (v468 >= 4)
  {
    v445 = malloc_type_malloc(4 * count, 0x100004052888210uLL);
    v449 = malloc_type_malloc(4 * count, 0x100004052888210uLL);
    v348 = (int *)malloc_type_malloc(size, 0x100004052888210uLL);
    v349 = malloc_type_malloc(size, 0x100004052888210uLL);
    v475 = malloc_type_malloc(size, 0x100004052888210uLL);
    v350 = (char *)malloc_type_malloc(size, 0x100004052888210uLL);
    v352 = v468;
    v353 = 0;
    LODWORD(v354) = 0;
    v355 = 0;
    do
    {
      if (v452[v353] >= 2u)
      {
        v356 = *((_DWORD *)v453 + v353);
        v349[v355++] = v356;
        if ((int)v354 < 1)
        {
LABEL_342:
          v348[(int)v354] = v356;
          LODWORD(v354) = v354 + 1;
        }
        else
        {
          v357 = v354;
          v358 = v348;
          while (1)
          {
            v359 = *v358++;
            if (v356 == v359)
              break;
            if (!--v357)
              goto LABEL_342;
          }
        }
      }
      ++v353;
    }
    while (v353 != v468);
    v444 = v349;
    v360 = v537;
    v361 = v533;
    if ((_DWORD)v354)
    {
      v362 = (v354 - 1);
      if ((_DWORD)v354 == 1)
      {
        *v445 = *v348;
        *v449 = *v348;
        v363 = 1;
        goto LABEL_384;
      }
      if ((int)v354 >= 1)
      {
        v365 = v354;
        v366 = v348;
        v367 = v445;
        v368 = v354;
        do
        {
          v369 = *v366++;
          *v367++ = v369;
          --v368;
        }
        while (v368);
        v370 = 0;
        v371 = 1;
        do
        {
          v372 = v370 + 1;
          if (v370 + 1 < v365)
          {
            v373 = v348[v370];
            v374 = v371;
            do
            {
              v375 = v348[v374] & v373;
              v351.i32[0] = v375;
              v351 = vcnt_s8(v351);
              v351.i16[0] = vaddlv_u8((uint8x8_t)v351);
              if (v375)
                v376 = v351.i32[0] >= 2u;
              else
                v376 = 0;
              if (v376)
              {
                if ((int)v354 < 1)
                {
LABEL_366:
                  v445[(int)v354] = v375;
                  LODWORD(v354) = v354 + 1;
                }
                else
                {
                  v377 = v354;
                  v378 = v445;
                  while (1)
                  {
                    v379 = *v378++;
                    if (v375 == v379)
                      break;
                    if (!--v377)
                      goto LABEL_366;
                  }
                }
              }
              ++v374;
            }
            while (v374 != v365);
          }
          ++v371;
          v370 = v372;
        }
        while (v372 != v362);
        if ((int)v354 > 1)
        {
          v380 = 0;
          v381 = v445 + 1;
          v382 = 1;
          do
          {
            v383 = v380 + 1;
            if (v380 + 1 < (unint64_t)v354)
            {
              v384 = v354;
              v385 = v381;
              while (1)
              {
                v386 = *v385++;
                if ((v386 ^ v445[v380]) == (v386 | v445[v380]))
                  break;
                if (v382 == --v384)
                  goto LABEL_377;
              }
              v445[v380] = 0;
            }
LABEL_377:
            ++v382;
            ++v381;
            ++v380;
          }
          while (v383 != (_DWORD)v354 - 1);
        }
        v352 = v468;
        v360 = v537;
        v361 = v533;
        if ((int)v354 >= 1)
        {
          v363 = 0;
          v354 = v354;
          v387 = v445;
          do
          {
            v389 = *v387++;
            v388 = v389;
            if (v389)
              v449[v363++] = v388;
            --v354;
          }
          while (v354);
          if (v363 >= 1)
          {
LABEL_384:
            v390 = 0;
            v391 = v468;
            v446 = v363;
            v470 = v350 + 4;
            v528 = v350;
            v448 = v348;
            while (1)
            {
              v392 = 0;
              v393 = 0;
              v394 = v449[v390];
              v395 = 1;
              do
              {
                if ((v395 & v394) != 0)
                  v475[v393++] = v392;
                v395 *= 2;
                ++v392;
              }
              while ((_DWORD)v391 != v392);
              v396 = 0;
              v397 = 0;
              do
              {
                if ((v394 & ~v347[v396]) == 0)
                  *(_DWORD *)&v350[4 * v397++] = v396;
                ++v396;
              }
              while (v391 != v396);
              v451 = v390;
              if (v397 >= 2 && v393 >= 2)
                break;
LABEL_424:
              v390 = v451 + 1;
              v391 = v468;
              v347 = v453;
              v348 = v448;
              if (v451 + 1 == v446)
                goto LABEL_425;
            }
            v398 = 0;
            counta = (v393 - 1);
            v486 = (v397 - 1);
            v466 = 1;
            v492 = v397;
            v473 = v393;
LABEL_396:
            v464 = v398 + 1;
            if (v398 + 1 >= v473)
              goto LABEL_423;
            v399 = v466;
            v471 = v398;
LABEL_398:
            v400 = v475[v398];
            v401 = v475[v399];
            v402 = v400 * (unint64_t)v352;
            v403 = (char *)&v360[v402];
            v404 = &v361[4 * v402];
            v405 = *(_DWORD *)&v404[4 * v401];
            __nc = *(_QWORD *)&v403[8 * v401];
            v479 = v399;
            if (__nc)
            {
              v558 = *(float *)&v404[4 * v401];
            }
            else if (v405)
            {
              v405 = 0;
              __nc = 0;
              v558 = 0.0;
            }
            else
            {
              doubleton(&v500[20 * v400], &v500[20 * v401], (uint64_t)&v550, &v558);
              v406 = LODWORD(v558);
              if (v558 == 0.0)
              {
                v405 = 0;
                __nc = 0;
                *(_DWORD *)&v404[4 * v401] = -1;
              }
              else
              {
                v407 = malloc_type_malloc((unint64_t)LODWORD(v558) << 6, 0x1020040E4DCC77DuLL);
                memcpy(v407, &leqBuffer, v406 << 6);
                v405 = v406;
                __nc = (uint64_t)v407;
                *(_QWORD *)&v403[8 * v401] = v407;
                *(_DWORD *)&v404[4 * v401] = v406;
              }
              v352 = v468;
              v360 = v537;
              v361 = v533;
              v350 = v528;
            }
            v408 = 0;
            v506 = (unsigned int *)v470;
            v409 = 1;
            v410 = v487;
            v548 = v405;
            while (1)
            {
              v498 = (void *)(v408 + 1);
              if (v408 + 1 < v492)
                break;
LABEL_421:
              ++v409;
              ++v506;
              ++v408;
              if (v498 == (void *)v486)
              {
                v195 = v476;
                v399 = v479 + 1;
                v398 = v471;
                if (v479 + 1 == v473)
                {
LABEL_423:
                  ++v466;
                  v398 = v464;
                  if (v464 == counta)
                    goto LABEL_424;
                  goto LABEL_396;
                }
                goto LABEL_398;
              }
            }
            v411 = v506;
            v412 = v492;
            while (2)
            {
              v413 = *(_DWORD *)&v350[4 * v408];
              v415 = *v411++;
              v414 = v415;
              v416 = v413 * (unint64_t)v352;
              v417 = (char *)&v360[v416];
              v418 = *(void **)&v417[8 * v415];
              v419 = &v361[4 * v416];
              LODWORD(v420) = *(_DWORD *)&v419[4 * v415];
              if (v418)
              {
                v549 = v420;
                if (v405)
                {
LABEL_411:
                  if ((_DWORD)v420)
                  {
                    generateQuadrilaterals(__nc, v548, (uint64_t)v418, v420, (uint64_t)v517, &v559, v194);
                    *(float *)&v421 = v19;
                    LODWORD(v422) = v32;
                    LODWORD(v423) = v31;
                    LODWORD(v424) = v29;
                    processQuadrilaterals((uint64_t)v517, LODWORD(v559), (uint64_t)v523, v410, (uint64_t)v515, &__N, v421, v422, v423, v424, v27, v25, a11);
                    mergeQuads((uint64_t)v517, v410, v515, v514, v512, v513, v516, __N, v511, v510, v509, &v557);
                    v405 = v548;
                    v350 = v528;
                    v361 = v533;
                    v360 = v537;
                    v352 = v468;
                  }
                }
              }
              else if ((_DWORD)v420)
              {
                v549 = 0;
              }
              else
              {
                doubleton(&v500[20 * v413], &v500[20 * v414], (uint64_t)&v550, &v549);
                v420 = v549;
                if (v549)
                {
                  v418 = malloc_type_malloc((unint64_t)v549 << 6, 0x1020040E4DCC77DuLL);
                  v410 = v487;
                  memcpy(v418, &leqBuffer, v420 << 6);
                  *(_QWORD *)&v417[8 * v414] = v418;
                  *(_DWORD *)&v419[4 * v414] = v420;
                  v352 = v468;
                  v360 = v537;
                  v361 = v533;
                  v350 = v528;
                  v405 = v548;
                  if (v548)
                    goto LABEL_411;
                }
                else
                {
                  *(_DWORD *)&v419[4 * v414] = -1;
                  v352 = v468;
                  v360 = v537;
                  v361 = v533;
                  v350 = v528;
                  v405 = v548;
                }
              }
              if (v409 == --v412)
                goto LABEL_421;
              continue;
            }
          }
        }
      }
    }
LABEL_425:
    v425 = v350;
    free(v348);
    free(v445);
    free(v449);
    free(v444);
    free(v475);
    free(v425);
    v298 = v537;
    v297 = v468;
  }
LABEL_426:
  v426 = 0;
  v427 = v298;
  do
  {
    v428 = v427;
    v429 = v297;
    do
    {
      if (*v428)
        free(*v428);
      ++v428;
      --v429;
    }
    while (v429);
    ++v426;
    v427 = (void **)((char *)v427 + v458);
    v297 = v468;
  }
  while (v426 != v468);
LABEL_432:
  free(v453);
  free(v452);
  v132 = (void *)v487;
  v292 = v523;
LABEL_433:
  free(v537);
  free(v533);
LABEL_434:
  deallocateEdgeMap(v195);
  if (v292)
    free(v292);
  free(v461);
  free(v460);
  free(v467);
  free(v459);
  free(v454);
  if (v468)
  {
    v430 = 0;
    v431 = (char *)(v500 + 12);
    do
    {
      for (n = 0; n != 32; n += 8)
      {
        free(*(void **)&v431[n]);
        *(_QWORD *)&v431[n] = 0;
      }
      ++v430;
      v431 += 80;
    }
    while (v430 != v541);
  }
  free(v500);
  free(v517);
  v433 = v557;
  v139 = v557 != 0;
  if (v557)
  {
    v434 = v19 * a10;
    v435 = (float *)(v511 + 1);
    do
    {
      v436 = *(v435 - 2);
      v437 = 255.0 - *(v435 - 1);
      v438 = *v435;
      v439 = 255.0 - v435[1];
      v441 = v435[2];
      v440 = v435[3];
      v442 = (float)(255.0 - *(v435 - 3)) * a10;
      *(v435 - 4) = v434 * *(v435 - 4);
      *(v435 - 3) = v442;
      *(v435 - 2) = v434 * v436;
      *(v435 - 1) = v437 * a10;
      *v435 = v434 * v438;
      v435[1] = v439 * a10;
      v435[2] = v434 * v441;
      v435[3] = (float)(255.0 - v440) * a10;
      v435 += 8;
      --v433;
    }
    while (v433);
  }
  v140 = 0;
  v134 = 0;
  if (v132)
LABEL_445:
    free(v132);
LABEL_446:
  if (v514)
    free(v514);
  if (v512)
    free(v512);
  if (v513)
    free(v513);
  if (v516)
    free(v516);
  if (v515)
    free(v515);
  if (v134)
    free(v134);
  if (v140)
    deallocateEdgeMap(v140);
  *v455 = v557;
  return v139;
}

float *createPerMeshForFFTSIZE()
{
  float *v0;
  float *v1;

  v0 = (float *)malloc_type_malloc(0x40000uLL, 0x100004052888210uLL);
  v1 = v0;
  if (v0)
    initializePerMesh(v0, 256, 256);
  return v1;
}

void initializePerMesh(float *a1, int a2, int a3)
{
  double *v6;
  double *v7;
  uint64_t v8;
  uint64x2_t v9;
  int64x2_t v10;
  double v11;
  uint64_t v12;
  uint64x2_t v13;
  int64x2_t v14;
  double v15;
  uint64_t v16;
  float *v17;
  double v18;
  double *v19;
  uint64_t v20;
  double v21;
  float v22;
  int64x2_t v23;
  int64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64x2_t v29;
  uint64x2_t v30;
  float64x2_t __x;
  float64x2_t __xa;
  long double v33;
  long double v34;
  int32x2_t v35;
  int32x2_t v36;
  int64x2_t v37;
  int64x2_t v38;

  v6 = (double *)malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
  v7 = v6;
  if (a2 != a3)
    v7 = (double *)malloc_type_malloc(8 * a3, 0x100004000313F17uLL);
  if (a2 >= 1)
  {
    v8 = 0;
    v27 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a2), 0);
    v29 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    v9 = (uint64x2_t)xmmword_1A15DD910;
    v23 = vdupq_n_s64(2uLL);
    v25 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    do
    {
      v37 = (int64x2_t)v9;
      v35 = vmovn_s64((int64x2_t)vcgeq_u64(v29, v9));
      v10.i64[0] = (int)v8;
      v10.i64[1] = (int)v8 + 1;
      __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v10), v25), v27);
      v33 = cos(__x.f64[1]);
      v11 = cos(__x.f64[0]);
      if ((v35.i8[0] & 1) != 0)
        v6[v8] = v11;
      if ((v35.i8[4] & 1) != 0)
        v6[v8 + 1] = v33;
      v8 += 2;
      v9 = (uint64x2_t)vaddq_s64(v37, v23);
    }
    while (((a2 + 1) & 0x1FFFFFFFELL) != v8);
  }
  if (a2 != a3 && a3 >= 1)
  {
    v12 = 0;
    v28 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a3), 0);
    v30 = (uint64x2_t)vdupq_n_s64((unint64_t)a3 - 1);
    v13 = (uint64x2_t)xmmword_1A15DD910;
    v24 = vdupq_n_s64(2uLL);
    v26 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    do
    {
      v38 = (int64x2_t)v13;
      v36 = vmovn_s64((int64x2_t)vcgeq_u64(v30, v13));
      v14.i64[0] = (int)v12;
      v14.i64[1] = (int)v12 + 1;
      __xa = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v14), v26), v28);
      v34 = cos(__xa.f64[1]);
      v15 = cos(__xa.f64[0]);
      if ((v36.i8[0] & 1) != 0)
        v7[v12] = v15;
      if ((v36.i8[4] & 1) != 0)
        v7[v12 + 1] = v34;
      v12 += 2;
      v13 = (uint64x2_t)vaddq_s64(v38, v24);
    }
    while (((a3 + 1) & 0x1FFFFFFFELL) != v12);
  }
  if (a3 >= 1)
  {
    v16 = 0;
    v17 = a1;
    do
    {
      if (a2 >= 1)
      {
        v18 = v7[v16];
        v19 = v6;
        v20 = a2;
        do
        {
          v21 = *v19++;
          v22 = 1.0 / (2.0 - v21 - v18 + 2.0 - v21 - v18);
          *v17++ = v22;
          --v20;
        }
        while (v20);
      }
      ++v16;
    }
    while (v16 != a3);
  }
  *a1 = 0.0;
  free(v6);
  if (a2 != a3)
    free(v7);
}

void sub_1A1470980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A14709E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VNContoursObservation;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A1470C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A1470CD0(void *a1)
{
  apple::vision::libraries::autotrace::EPolygonList *v1;

  __cxa_begin_catch(a1);
  _deleteEPolygonList(v1);
  __cxa_rethrow();
}

void sub_1A1470CE4()
{
  __cxa_end_catch();
  JUMPOUT(0x1A1470CC8);
}

void sub_1A1470E28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A14710D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1471244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1471334(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  os_unfair_lock_s *v10;

  objc_begin_catch(exc_buf);
  os_unfair_lock_unlock(v10);
  objc_exception_rethrow();
}

void sub_1A1471360(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A1471438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147158C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14716A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1471768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1471858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::vector<long long>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v12;
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v13);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(v9, a2, a3, (_QWORD *)a1[1]);
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v10) >> 3) < a4)
  {
    v15 = a2 + 8 * ((a1[1] - (uint64_t)v10) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned int> *,std::vector<unsigned int> *,std::vector<unsigned int> *>(a2, v15, v10);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(v9, v15, a3, (_QWORD *)a1[1]);
LABEL_13:
    a1[1] = (uint64_t)v14;
    return;
  }
  v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned int> *,std::vector<unsigned int> *,std::vector<unsigned int> *>(a2, a3, v10);
  v17 = (char *)a1[1];
  if (v17 != v16)
  {
    v18 = (char *)a1[1];
    do
    {
      v20 = (void *)*((_QWORD *)v18 - 3);
      v18 -= 24;
      v19 = v20;
      if (v20)
      {
        *((_QWORD *)v17 - 2) = v19;
        operator delete(v19);
      }
      v17 = v18;
    }
    while (v18 != v16);
  }
  a1[1] = (uint64_t)v16;
}

void sub_1A1471AC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1A1471AD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned int> *,std::vector<unsigned int> *,std::vector<unsigned int> *>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((char *)v5 != a3)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a3, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1A1471BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void _deleteEPolygonList(apple::vision::libraries::autotrace::EPolygonList *a1)
{
  apple::vision::libraries::autotrace::EPolygonList::term(a1);
  if (a1)
    JUMPOUT(0x1A1B0A898);
}

void sub_1A1471F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a13;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (v16)
    operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1A1472B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<apple::vision::libraries::autotrace::EPolygonList *,void (*)(apple::vision::libraries::autotrace::EPolygonList *),std::allocator<apple::vision::libraries::autotrace::EPolygonList>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_pointer<apple::vision::libraries::autotrace::EPolygonList *,void (*)(apple::vision::libraries::autotrace::EPolygonList *),std::allocator<apple::vision::libraries::autotrace::EPolygonList>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<apple::vision::libraries::autotrace::EPolygonList *,void (*)(apple::vision::libraries::autotrace::EPolygonList *),std::allocator<apple::vision::libraries::autotrace::EPolygonList>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFvPN5apple6vision9libraries9autotrace12EPolygonListEE"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void sub_1A1473334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1A147346C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VNTrajectoryProcessor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A14735B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1473690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1474550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *v67;
  void *v68;
  void *v69;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

double getHostTimeInMillis(void)
{
  kern_return_t v0;
  double v1;

  v0 = mach_timebase_info((mach_timebase_info_t)&getHostTimeInNanos(void)::info);
  v1 = 0.0;
  if (!v0)
    v1 = (double)(mach_absolute_time() * getHostTimeInNanos(void)::info / *(unsigned int *)algn_1EE6402F4);
  return v1 / 1000000.0;
}

void ObservedParabola::ObservedParabola(ObservedParabola *this, const ObservedParabola *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)this = *(id *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((_QWORD *)this + 1, *((const void **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 4);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((_QWORD *)this + 4, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  v4 = *(_OWORD *)((char *)a2 + 72);
  v5 = *(_OWORD *)((char *)a2 + 88);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 116) = *(_OWORD *)((char *)a2 + 116);
  *(_OWORD *)((char *)this + 104) = v6;
  *(_OWORD *)((char *)this + 88) = v5;
  *(_OWORD *)((char *)this + 72) = v4;
}

void sub_1A1474948(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void ObservedParabola::~ObservedParabola(ObservedParabola *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }

}

_QWORD *std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<vision::mod::DescriptorItemSideInfo>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A1474A18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1474AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1474B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  a9.super_class = (Class)VNFaceRegionMapGenerator;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A1475600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p)
{
  uint64_t v37;
  void *v39;

  v39 = *(void **)(v37 - 224);
  if (v39)
    operator delete(v39);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::vector<_Geometry2D_point2D_>::resize(char **a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *a1;
  v3 = a1[1];
  v4 = v3 - *a1;
  if ((unint64_t)v4 > 0x1F7)
  {
    if (v4 == 504)
      return;
    v19 = v2 + 504;
    goto LABEL_16;
  }
  v5 = 63 - (v4 >> 3);
  v6 = a1[2];
  if (v5 <= (v6 - v3) >> 3)
  {
    bzero(a1[1], 8 * v5);
    v19 = &v3[8 * v5];
LABEL_16:
    a1[1] = v19;
    return;
  }
  v7 = v4 >> 3;
  v8 = v6 - v2;
  v9 = v8 >> 2;
  if ((unint64_t)(v8 >> 2) <= 0x3F)
    v9 = 63;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
  v12 = &v11[8 * v7];
  v14 = &v11[8 * v13];
  bzero(v12, 8 * v5);
  v15 = &v12[8 * v5];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void std::__tree<std::__value_type<unsigned char,std::string>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::string>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned char,std::string>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::string>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned char,std::string>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::string>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::string>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

void sub_1A1476A0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<vision::mod::FaceRegionMap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::FaceRegionMap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::FaceRegionMap>::__on_zero_shared(_QWORD *a1)
{
  char *v2;
  char **v3;
  char *v4;
  void *v5;
  void *v6;

  v3 = (char **)(a1 + 4);
  v2 = (char *)a1[4];
  v3[10] = v3[9];
  std::__tree<std::__value_type<unsigned char,std::string>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::string>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::string>>>::destroy(v2);
  *(v3 - 1) = (char *)v3;
  *v3 = 0;
  v3[1] = 0;
  v3[3] = v3[2];
  v4 = v3[5];
  if (v4)
    free(v4);
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[6];
  if (v6)
  {
    a1[7] = v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<unsigned char,std::string>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::string>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::string>>>::destroy(*v3);
}

void sub_1A1476CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void deallocateEdgeMap(void **a1)
{
  free(a1[2]);
  a1[2] = 0;
  free(a1[3]);
  a1[3] = 0;
  free(a1[4]);
  a1[4] = 0;
  free(a1[5]);
  free(a1);
}

void sub_1A1476D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1476FD8(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  void *v3;
  void *v4;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1A1476F04);
  }

  _Unwind_Resume(exc_buf);
}

void sub_1A14770E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1477268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1477340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1477490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1477550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147779C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A147796C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1A1477B24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1477C84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1477DAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1477E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1477F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1478080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A14781C0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A1478250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1478E68(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  void *v3;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1A14786E8);
  }

  _Unwind_Resume(exc_buf);
}

void sub_1A14793F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147986C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1479FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A147A288(void *exc_buf)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(exc_buf);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A147A2C8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A147A434(void *exc_buf)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(exc_buf);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A147A468(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A147A5B8(void *exc_buf)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(exc_buf);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A147A5EC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A147A724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A147AF00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147B054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147B0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A147B170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A147B1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A147B370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147B4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A147B794(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x1A147B720);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A147B984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A147B9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A147BA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A147BAD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147BD58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147BE20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147BEE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147BF94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147C338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A147C4A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A147C73C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147C7D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147C860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147C8FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147CA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A147CB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A147CCE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147CD7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147CF2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147D004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147D194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147D224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147D47C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147D678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147D700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147D79C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147D8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A147D9DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A147DC54(_Unwind_Exception *a1, int a2)
{
  void *v2;
  void *v3;
  void *v4;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1A147DB08);
  }

  _Unwind_Resume(a1);
}

void sub_1A147DD3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147DDC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147DE48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147DF38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A147E004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A147E224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147E2CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147E324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147E414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A147E520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A147E5A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147E6F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A147E8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A147E9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A147EAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147EB7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147ED54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147EF14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147F0A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147F1EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A147F29C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147F42C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A147F528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A147F6D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A147F794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147F8C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A147F928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VNPixelBufferObservation;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A147FA44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A147FAF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147FB88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147FC64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A147FD98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A147FF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1A14800F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A148021C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A14802D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1480370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1480444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14805E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14806B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14807D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1480BB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1480E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1480F34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14811EC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A1481510()
{
  JUMPOUT(0x1A1481518);
}

void sub_1A14815C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1481660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14817EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1481A90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1481BA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1481D48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1481E90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1481F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1482134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A14824C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A1482614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1482768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14828AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1482B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1482F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A14830C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1483204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A14833F4(_Unwind_Exception *a1, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v8;

  v8 = v6;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1A1483298);
  }

  _Unwind_Resume(a1);
}

void sub_1A1483510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14835A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1483644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A148377C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1483808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1483874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1483918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1483A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1483B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1483C68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

#error "1A1483ED4: call analysis failed (funcsize=27)"

void sub_1A1483FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1484038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14840D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14841FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A14842E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1484378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14844C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A148458C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1484610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A148473C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14847A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A14849B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1484AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1484B84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1484E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1485014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A14850D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1485158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14851CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14852BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1485348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A14853B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1485620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1485850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A148590C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1485A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14860A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1486688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VNDetector;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A1486778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1486854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A148692C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A14869C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1486A40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1486BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A1486CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1486DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A1486E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A1486F54(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A1486F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1A1486FF8(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A148700C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1A1487140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1A1487268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14881(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14882(uint64_t a1)
{

}

void sub_1A1487304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A148735C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1487404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14875F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A1487718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14878E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1487988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VNVTSession;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A1487A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VNVTPixelTransferSession;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A1487A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VNVTPixelRotationSession;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A1487B9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::default_delete<SessionsHandler<VNVTPixelRotationSession>>::operator()[abi:ne180100](id *a1)
{

  JUMPOUT(0x1A1B0A898);
}

VNVTPixelTransferSession *_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  BOOL v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  VNVTPixelTransferSession *v22;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  objc_super v25;

  objc_opt_self();
  pixelTransferSessionOut = 0;
  v3 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = pixelTransferSessionOut == 0;
  if (v4)
  {
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Cannot create VTPixelTransferSessionRef object: session: %lu, error: %d"), pixelTransferSessionOut, v3);
      v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v6 = objc_msgSend(v5, "UTF8String");
      VNValidatedLog(4, (uint64_t)CFSTR("%s"), v7, v8, v9, v10, v11, v12, v6);
      +[VNError errorForInternalErrorWithLocalizedDescription:](VNError, "errorForInternalErrorWithLocalizedDescription:", v5);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
      *a2 = v13;

    }
LABEL_12:
    v22 = 0;
    return v22;
  }
  v14 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED7E0], (CFTypeRef)*MEMORY[0x1E0CA8F10]);
  if ((_DWORD)v14)
  {
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Cannot set VTSession property, error: %d"), v14);
      v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v15 = objc_msgSend(v5, "UTF8String");
      VNValidatedLog(4, (uint64_t)CFSTR("%s"), v16, v17, v18, v19, v20, v21, v15);
      +[VNError errorForInternalErrorWithLocalizedDescription:](VNError, "errorForInternalErrorWithLocalizedDescription:", v5);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  v22 = [VNVTPixelTransferSession alloc];
  if (v22)
  {
    v22->_pixelTransferSession = pixelTransferSessionOut;
    v25.receiver = v22;
    v25.super_class = (Class)VNVTPixelTransferSession;
    v22 = (VNVTPixelTransferSession *)objc_msgSendSuper2(&v25, sel_initWithSession_);
  }
  return v22;
}

void sub_1A1487DB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _block_invoke()
{
  return 1;
}

void sub_1A14881D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_unfair_lock_t lock, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A148847C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1488534(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A1488548(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1A148863C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A14886D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A14887F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1488B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1A1488CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A1488E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1488FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v3;

  _Unwind_Resume(a1);
}

void sub_1A1489088(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14890F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A14891DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14892C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A148934C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14893AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1489460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14895A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A14896D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14897F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1489CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1A148A158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

Class ___ZL18getABPKOutputClassv_block_invoke(uint64_t a1)
{
  Class result;

  AltruisticBodyPoseKitLibrary();
  result = objc_getClass("ABPKOutput");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getABPKOutputClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)getABPKInputClass();
  }
  return result;
}

id getABPKInputClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getABPKInputClass(void)::softClass;
  v7 = getABPKInputClass(void)::softClass;
  if (!getABPKInputClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL17getABPKInputClassv_block_invoke;
    v3[3] = &unk_1E4548FA8;
    v3[4] = &v4;
    ___ZL17getABPKInputClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A148A334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getABPKCameraParamsClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getABPKCameraParamsClass(void)::softClass;
  v7 = getABPKCameraParamsClass(void)::softClass;
  if (!getABPKCameraParamsClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL24getABPKCameraParamsClassv_block_invoke;
    v3[3] = &unk_1E4548FA8;
    v3[4] = &v4;
    ___ZL24getABPKCameraParamsClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A148A3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL24getABPKCameraParamsClassv_block_invoke(uint64_t a1)
{
  AltruisticBodyPoseKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ABPKCameraParams");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getABPKCameraParamsClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    AltruisticBodyPoseKitLibrary();
  }
}

void AltruisticBodyPoseKitLibrary(void)
{
  void *v0;

  if (!AltruisticBodyPoseKitLibraryCore(char **)::frameworkLibrary)
  {
    AltruisticBodyPoseKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!AltruisticBodyPoseKitLibraryCore(char **)::frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class ___ZL17getABPKInputClassv_block_invoke(uint64_t a1)
{
  Class result;
  VNSliderNetDetector *v3;
  SEL v4;
  void *v5;
  id *v6;

  AltruisticBodyPoseKitLibrary();
  result = objc_getClass("ABPKInput");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getABPKInputClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (VNSliderNetDetector *)abort_report_np();
    return (Class)-[VNSliderNetDetector configureImageAnalyzerOptions:error:](v3, v4, v5, v6);
  }
  return result;
}

void sub_1A148A7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A148A9D4(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void Geometry2D_mallocHomo2D(uint64_t a1, int a2)
{
  size_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a2 >= 1)
  {
    v4 = 4 * a2;
    v5 = malloc_type_malloc(v4, 0x100004052888210uLL);
    *(_QWORD *)a1 = v5;
    if (v5
      && (v6 = malloc_type_malloc(v4, 0x100004052888210uLL), (*(_QWORD *)(a1 + 8) = v6) != 0)
      && (v7 = malloc_type_malloc(v4, 0x100004052888210uLL), (*(_QWORD *)(a1 + 16) = v7) != 0))
    {
      *(_DWORD *)(a1 + 24) = a2;
    }
    else
    {
      Geometry3D_freeCart3D(a1);
    }
  }
}

void sub_1A148ACFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A148AF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1A148B34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  void *v56;
  void *v57;
  void *v58;
  void **v59;
  uint64_t v60;

  vision::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32(v59);

  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a51, 8);

  _Block_object_dispose((const void *)(v60 - 256), 8);
  vision::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32((void **)(v60 - 208));

  _Unwind_Resume(a1);
}

void sub_1A148B4E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A148B608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A148B6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A148BA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a5);

  std::unique_ptr<vision::mod::FaceID3Model>::reset[abi:ne180100]((vision::mod::FaceID3Model **)va);
  std::istream::~istream();

  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_1A148BC68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::ostream::~ostream();
  std::streambuf::~streambuf();

  _Unwind_Resume(a1);
}

void vision::mod::FaceID3Model::~FaceID3Model(vision::mod::FaceID3Model *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 96);
  v2 = (_QWORD *)*((_QWORD *)this + 9);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    operator delete(v5);
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

_QWORD *std::shared_ptr<vision::mod::FaceID3Model>::operator=[abi:ne180100]<vision::mod::FaceID3Model,std::default_delete<vision::mod::FaceID3Model>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E453BE28;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

vision::mod::FaceID3Model *std::unique_ptr<vision::mod::FaceID3Model>::reset[abi:ne180100](vision::mod::FaceID3Model **a1)
{
  vision::mod::FaceID3Model *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    vision::mod::FaceID3Model::~FaceID3Model(result);
    JUMPOUT(0x1A1B0A898);
  }
  return result;
}

void std::__shared_ptr_pointer<vision::mod::FaceID3Model  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

vision::mod::FaceID3Model *std::__shared_ptr_pointer<vision::mod::FaceID3Model  *>::__on_zero_shared(uint64_t a1)
{
  vision::mod::FaceID3Model *result;

  result = *(vision::mod::FaceID3Model **)(a1 + 24);
  if (result)
  {
    vision::mod::FaceID3Model::~FaceID3Model(result);
    JUMPOUT(0x1A1B0A898);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<vision::mod::FaceID3Model  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN6vision3mod12FaceID3ModelEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1A148BF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A148C060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__15549(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = &off_1E453A1B8;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  return result;
}

void sub_1A148C388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17, void **a18)
{
  void *v18;

  a18 = (void **)&a15;
  std::vector<std::map<int,double>>::__destroy_vector::operator()[abi:ne180100](&a18);

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_72c47_ZTSN6vision3mod28ImageDescriptorBufferFloat32E(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  *(_QWORD *)(a1 + 80) = 0;
  v4 = a1 + 80;
  *(_QWORD *)(a1 + 72) = off_1E453AB20;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  std::map<long long,int>::map[abi:ne180100]((uint64_t *)(v4 + 24), a2 + 104);
  v5 = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 72) = &off_1E453A8D0;
  result = *(__n128 *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(__n128 *)(a1 + 168) = result;
  return result;
}

void sub_1A148C4A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_72c47_ZTSN6vision3mod28ImageDescriptorBufferFloat32E(uint64_t a1)
{
  void **v1;

  *(_QWORD *)(a1 + 72) = &off_1E453A8D0;
  v1 = (void **)(a1 + 72);
  free(*(void **)(a1 + 184));
  vision::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(v1);
}

void sub_1A148C5D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A148D1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,char a53,uint64_t a54,char a55)
{
  void *v55;
  uint64_t v56;

  if (v55)
    operator delete(v55);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v56 - 240);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__102(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__103(uint64_t a1)
{
  return std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 48);
}

uint64_t ___ZL15_newFaceIDModelP40VNEntityIdentificationModelConfigurationPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v6;

  std::allocate_shared[abi:ne180100]<vision::mod::FaceID3Model,std::allocator<vision::mod::FaceID3Model>,int const&,int const&,int const&,vision::mod::FaceIDIndexMode const&,void>(&v6, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
  std::shared_ptr<vision::mod::ImageAnalyzer>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, &v6);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return 1;
}

_QWORD *__copy_helper_block_ea8_48c53_ZTSNSt3__110shared_ptrIN6vision3mod12FaceID3ModelEEE64c69_ZTSNSt3__110shared_ptrIN6vision3mod28ImageDescriptorBufferFloat32EEE80c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 72);
  a1[8] = *(_QWORD *)(a2 + 64);
  a1[9] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[10] = 0;
  a1[11] = 0;
  v8 = a1 + 10;
  v8[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
}

void sub_1A148D5C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v2);
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_48c53_ZTSNSt3__110shared_ptrIN6vision3mod12FaceID3ModelEEE64c69_ZTSNSt3__110shared_ptrIN6vision3mod28ImageDescriptorBufferFloat32EEE80c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 64);
  return std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](a1 + 48);
}

char *std::allocate_shared[abi:ne180100]<vision::mod::FaceID3Model,std::allocator<vision::mod::FaceID3Model>,int const&,int const&,int const&,vision::mod::FaceIDIndexMode const&,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *result;
  _DWORD *v11;

  result = (char *)operator new(0xA0uLL);
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_DWORD *)result + 6) = a2;
  v11 = result + 24;
  *(_QWORD *)result = &off_1E453B488;
  *((_DWORD *)result + 7) = a3;
  *((_DWORD *)result + 8) = a4;
  *(_QWORD *)(result + 36) = 0x12C0000000ALL;
  *((_QWORD *)result + 6) = 0x3F1A36E2EB1C432DLL;
  *((_DWORD *)result + 14) = a5;
  *((_DWORD *)result + 15) = 1036831949;
  *((_QWORD *)result + 8) = 0x20000000FLL;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *((_QWORD *)result + 13) = 0;
  *((_DWORD *)result + 28) = 1065353216;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *((_DWORD *)result + 38) = 1065353216;
  if (a5 == 1)
    *v11 = 1;
  *a1 = v11;
  a1[1] = result;
  return result;
}

void std::__shared_ptr_emplace<vision::mod::FaceID3Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vision::mod::FaceID3Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453B488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

void std::__shared_ptr_emplace<vision::mod::FaceID3Model>::__on_zero_shared(uint64_t a1)
{
  vision::mod::FaceID3Model::~FaceID3Model((vision::mod::FaceID3Model *)(a1 + 24));
}

uint64_t std::allocate_shared[abi:ne180100]<vision::mod::ImageDescriptorBufferFloat32,std::allocator<vision::mod::ImageDescriptorBufferFloat32>,std::vector<long long> &,void *,unsigned long const&,int,BOOL,void>(uint64_t *a1, _QWORD **a2, void *a3, unint64_t a4, int a5, char a6)
{
  _QWORD *v12;
  uint64_t result;

  v12 = operator new(0x90uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E453B958;
  result = vision::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract((uint64_t)(v12 + 3), a2, a3, a4, a5, a6 != 0);
  v12[3] = &off_1E453A8D0;
  *((_DWORD *)v12 + 32) = 1;
  v12[17] = 0;
  v12[15] = a4 >> 2;
  *a1 = result;
  a1[1] = (uint64_t)v12;
  return result;
}

void sub_1A148D7E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1A148D8A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A148D9D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

uint64_t Geometry2D_estimateRST(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  float *v5;
  float *v6;
  int v8;
  float *v9;
  float *v10;
  int v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t __C;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  float *__B;
  float *v44;
  uint64_t v45;
  float *__A;
  float *v47;
  vDSP_Length __N;

  v3 = 1917;
  if (a3 && a1)
  {
    v5 = *(float **)a1;
    if (!*(_QWORD *)a1)
      return 1917;
    v6 = *(float **)(a1 + 8);
    if (!v6)
      return 1917;
    v3 = 1917;
    if (!a2)
      return v3;
    v8 = *(_DWORD *)(a1 + 16);
    if (v8 < 1)
      return v3;
    v9 = *(float **)a2;
    if (!*(_QWORD *)a2)
      return 1917;
    v10 = *(float **)(a2 + 8);
    if (!v10)
      return 1917;
    v11 = *(_DWORD *)(a2 + 16);
    if (v11 < 1)
      return 1917;
    v3 = 1916;
    if (v8 >= 2 && v8 == v11)
    {
      if (v8 == 2)
      {
        v13 = v5[1];
        v14 = *v5 - v13;
        v15 = v6[1];
        v16 = *v6 - v15;
        v17 = (float)(v16 * v16) + (float)(v14 * v14);
        v18 = v14 / v17;
        v19 = v16 / v17;
        v20 = v9[1];
        v21 = *v9 - v20;
        v22 = v10[1];
        v23 = *v10 - v22;
        v24 = (float)(v19 * v23) + (float)(v18 * v21);
        v25 = (float)(v18 * v23) - (float)(v19 * v21);
        v26 = (float)(v20 - (float)(v24 * v13)) + (float)(v25 * v15);
        v27 = (float)(v22 - (float)(v24 * v15)) - (float)(v25 * v13);
        a3[1] = sqrtf((float)(v25 * v25) + (float)(v24 * v24));
        *a3 = atan2f(v25, v24);
        a3[2] = v26;
        a3[3] = v27;
        return 1920;
      }
      else
      {
        __A = 0;
        v47 = 0;
        __N = 0;
        Geometry2D_mallocCart2D(&__A, v8);
        __B = 0;
        v44 = 0;
        v45 = 0;
        Geometry2D_mallocCart2D(&__B, *(_DWORD *)(a2 + 16));
        v29 = (float *)malloc_type_malloc(4 * *(int *)(a1 + 16), 0x100004052888210uLL);
        v42 = 0;
        v41 = 0.0;
        v3 = Geometry2D_normalizePoints(a1, v29, (uint64_t)&__A, (float *)&v42 + 1, (float *)&v42, &v41);
        if ((v3 & 0x80) != 0)
        {
          v40 = 0.0;
          v39 = 0;
          v3 = Geometry2D_normalizePoints(a2, v29, (uint64_t)&__B, &v40, (float *)&v39 + 1, (float *)&v39);
          if ((v3 & 0x80) != 0)
          {
            __C = 0;
            vDSP_svesq(__A, 1, (float *)&__C + 1, *(int *)(a1 + 16));
            vDSP_svesq(v47, 1, (float *)&__C, *(int *)(a1 + 16));
            v30 = *((float *)&__C + 1) + *(float *)&__C;
            v37 = 0;
            vDSP_dotpr(__A, 1, __B, 1, (float *)&v37 + 1, (int)__N);
            vDSP_dotpr(v47, 1, v44, 1, (float *)&v37, (int)__N);
            v31 = (float)(*((float *)&v37 + 1) + *(float *)&v37) / v30;
            v36 = 0;
            vDSP_dotpr(v47, 1, __B, 1, (float *)&v36 + 1, (int)__N);
            vDSP_dotpr(__A, 1, v44, 1, (float *)&v36, (int)__N);
            v32 = v31 * (float)(v41 / *(float *)&v39);
            v33 = (float)((float)(*(float *)&v36 - *((float *)&v36 + 1)) / v30) * (float)(v41 / *(float *)&v39);
            v34 = -(float)((float)((float)(v32 * *((float *)&v42 + 1)) - (float)(v33 * *(float *)&v42)) - v40);
            v35 = -(float)((float)((float)(v32 * *(float *)&v42) + (float)(v33 * *((float *)&v42 + 1)))
                         - *((float *)&v39 + 1));
            a3[1] = v41 / *(float *)&v39;
            *a3 = atan2f(v33, v32);
            a3[2] = v34;
            a3[3] = v35;
            free(__A);
            __A = 0;
            free(v47);
            v47 = 0;
            LODWORD(__N) = 0;
            free(__B);
            __B = 0;
            free(v44);
            free(v29);
          }
        }
      }
    }
  }
  return v3;
}

uint64_t ctrTrackerComputation_repairNonValidRegion(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  int v21;
  uint64_t v22;

  LODWORD(v4) = *a4;
  if (*a4 >= 1)
  {
    v5 = 0;
    v6 = result;
    v7 = a2;
    v8 = a3;
    do
    {
      if ((int)v4 >= 1)
      {
        v9 = 0;
        v10 = v5 << 7;
        do
        {
          *(_BYTE *)(v6 + v9) = *(_BYTE *)(result + v10 + (int)v4);
          *(_BYTE *)(v7 + v9) = *(_BYTE *)(a2 + v10 + *a4);
          *(_BYTE *)(v8 + v9++) = *(_BYTE *)(a3 + v10 + *a4);
          v4 = *a4;
        }
        while (v9 < v4);
      }
      ++v5;
      v8 += 128;
      v7 += 128;
      v6 += 128;
    }
    while (v5 != 128);
  }
  LODWORD(v11) = a4[2];
  if ((int)v11 <= 126)
  {
    v12 = 0;
    v13 = a3 + 1;
    v14 = a2 + 1;
    for (i = result + 1; ; i += 128)
    {
      if ((int)v11 <= 126)
      {
        v16 = v12 << 7;
        v11 = (int)v11;
        do
        {
          *(_BYTE *)(i + v11) = *(_BYTE *)(result + v16 + a4[2]);
          *(_BYTE *)(v14 + v11) = *(_BYTE *)(a2 + v16 + a4[2]);
          *(_BYTE *)(v13 + v11++) = *(_BYTE *)(a3 + v16 + a4[2]);
        }
        while (v11 != 127);
      }
      if (++v12 == 128)
        break;
      LODWORD(v11) = a4[2];
      v13 += 128;
      v14 += 128;
    }
  }
  if (a4[1] >= 1)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      for (j = 0; j != 128; ++j)
      {
        *(_BYTE *)(result + v17 + j) = *(_BYTE *)(result + ((uint64_t)a4[1] << 7) + j);
        *(_BYTE *)(a2 + v17 + j) = *(_BYTE *)(a2 + ((uint64_t)a4[1] << 7) + j);
        *(_BYTE *)(a3 + v17 + j) = *(_BYTE *)(a3 + ((uint64_t)a4[1] << 7) + j);
      }
      ++v18;
      v17 += 128;
    }
    while (v18 < a4[1]);
  }
  v20 = a4[3];
  if ((int)v20 <= 126)
  {
    v21 = ((_DWORD)v20 << 7) + 128;
    do
    {
      v22 = 0;
      ++v20;
      do
      {
        *(_BYTE *)(result + v21 + v22) = *(_BYTE *)(result + ((uint64_t)a4[3] << 7) + v22);
        *(_BYTE *)(a2 + v21 + v22) = *(_BYTE *)(a2 + ((uint64_t)a4[3] << 7) + v22);
        *(_BYTE *)(a3 + v21 + v22) = *(_BYTE *)(a3 + ((uint64_t)a4[3] << 7) + v22);
        ++v22;
      }
      while (v22 != 128);
      v21 += 128;
    }
    while (v20 != 127);
  }
  return result;
}

uint64_t ctrTrackerComputation_YCbCr2nRGB(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  for (i = 0; i != 0x4000; ++i)
  {
    v7 = *(unsigned __int8 *)(result + i);
    v8 = *(unsigned __int8 *)(a2 + i) - 128;
    v9 = *(unsigned __int8 *)(a3 + i) - 128;
    v10 = 101 * v9 + (v7 << 6);
    if (v10 <= 16351)
      v11 = ((v10 + 32) >> 6) & ~((v10 + 32) >> 31);
    else
      v11 = 255;
    v12 = -12 * v8 + (v7 << 6) - 30 * v9;
    if (v12 <= 16351)
      v13 = ((v12 + 32) >> 6) & ~((v12 + 32) >> 31);
    else
      v13 = 255;
    v14 = 119 * v8 + (v7 << 6);
    if (v14 <= 16351)
      v15 = ((v14 + 32) >> 6) & ~((v14 + 32) >> 31);
    else
      v15 = 255;
    if (v13 <= v15)
      v16 = v15;
    else
      v16 = v13;
    if (v11 > v16)
      v16 = v11;
    v17 = ctrTrackerComputation_YCbCr2nRGB_kIlluminationInvariantLookupTable[v16];
    v18 = v11 * v17;
    v19 = v18 >> 4;
    v20 = (v18 + 16) >> 5;
    if (v19 > 0x1FE)
      LOBYTE(v20) = -1;
    *(_BYTE *)(a4 + i) = v20;
    v21 = v13 * v17;
    v22 = v21 >> 4;
    v23 = (v21 + 16) >> 5;
    if (v22 > 0x1FE)
      LOBYTE(v23) = -1;
    *(_BYTE *)(a5 + i) = v23;
    v24 = v15 * v17;
    v25 = v24 >> 4;
    v26 = (v24 + 16) >> 5;
    if (v25 > 0x1FE)
      LOBYTE(v26) = -1;
    *(_BYTE *)(a6 + i) = v26;
  }
  return result;
}

uint64_t ctrTrackerComputation_normedGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t result;
  unsigned int v19;

  v4 = a4 + 129;
  v5 = a1 + 257;
  v6 = a2 + 257;
  v7 = a3 + 257;
  v8 = 1;
  do
  {
    v9 = 0;
    ++v8;
    do
    {
      v10 = *(unsigned __int8 *)(v5 + v9 - 127) - *(unsigned __int8 *)(v5 + v9 - 129);
      v11 = *(unsigned __int8 *)(v5 + v9) - *(unsigned __int8 *)(v5 + v9 - 256);
      v12 = *(unsigned __int8 *)(v6 + v9) - *(unsigned __int8 *)(v6 + v9 - 256);
      v13 = *(unsigned __int8 *)(v7 + v9) - *(unsigned __int8 *)(v7 + v9 - 256);
      if (v10 < 0)
        v10 = *(unsigned __int8 *)(v5 + v9 - 129) - *(unsigned __int8 *)(v5 + v9 - 127);
      if (v11 < 0)
        v11 = *(unsigned __int8 *)(v5 + v9 - 256) - *(unsigned __int8 *)(v5 + v9);
      v14 = v11 + v10;
      if (*(unsigned __int8 *)(v6 + v9 - 127) - *(unsigned __int8 *)(v6 + v9 - 129) >= 0)
        v15 = *(unsigned __int8 *)(v6 + v9 - 127) - *(unsigned __int8 *)(v6 + v9 - 129);
      else
        v15 = *(unsigned __int8 *)(v6 + v9 - 129) - *(unsigned __int8 *)(v6 + v9 - 127);
      if (v12 < 0)
        v12 = *(unsigned __int8 *)(v6 + v9 - 256) - *(unsigned __int8 *)(v6 + v9);
      v16 = v12 + v15;
      if (*(unsigned __int8 *)(v7 + v9 - 127) - *(unsigned __int8 *)(v7 + v9 - 129) >= 0)
        v17 = *(unsigned __int8 *)(v7 + v9 - 127) - *(unsigned __int8 *)(v7 + v9 - 129);
      else
        v17 = *(unsigned __int8 *)(v7 + v9 - 129) - *(unsigned __int8 *)(v7 + v9 - 127);
      if (v13 >= 0)
        result = v13;
      else
        result = *(unsigned __int8 *)(v7 + v9 - 256) - *(unsigned __int8 *)(v7 + v9);
      v19 = result + v17;
      if (v14 <= v16)
        v14 = v16;
      if (v14 <= v19)
        v14 = v19;
      if (v14 >= 0xFF)
        LOBYTE(v14) = -1;
      *(_BYTE *)(v4 + v9++) = v14;
    }
    while (v9 != 126);
    v4 += 128;
    v5 += 128;
    v6 += 128;
    v7 += 128;
  }
  while (v8 != 127);
  return result;
}

uint64_t ctrTrackerComputation_updateLocation(uint64_t result, uint64_t a2, int a3, int a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double *v35;
  _QWORD v36[2];
  int v37;
  uint64_t v38;
  float64x2x2_t v39;

  v6 = 0;
  v38 = *MEMORY[0x1E0C80C00];
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v7 = a4 - 2;
  do
  {
    if (v7 + v6 >= 128)
      v8 = -128;
    else
      v8 = ((unint64_t)(v7 + v6) >> 56) & 0x80;
    *((_DWORD *)v36 + v6) = *(_DWORD *)(result + 4 * (a4 + (a3 << 7) - 2 + (int)v6 + v8));
    ++v6;
  }
  while (v6 != 5);
  v9 = 0;
  v10 = 0.0;
  v11 = 0.0;
  do
  {
    v12 = *(float *)((char *)v36 + v9 * 4);
    v11 = v11 + (float)(*(float *)&dword_1A15E4320[v9] * v12);
    v10 = v10 + (float)(*(float *)&dword_1A15E4334[v9++] * v12);
  }
  while (v9 != 5);
  if (v10 <= -0.0002)
  {
    v13 = -2.0;
    if (v11 > 0.0 == v10 < 0.0)
    {
      v13 = 2.0;
      if (v11 <= (float)(v10 * -8.0))
        v13 = -2.0 - (float)(v11 / (float)(v10 + v10));
    }
  }
  else
  {
    v13 = NAN;
  }
  v14 = 0;
  v15 = v13 + (float)a4;
  v16 = HIBYTE(a4) & 0x80;
  if (a4 >= 128)
    v16 = -128;
  v17 = v16 + a4;
  v18 = a3 - 2;
  do
  {
    if (v18 + v14 >= 128)
      v19 = -128;
    else
      v19 = ((unint64_t)(v18 + v14) >> 56) & 0x80;
    *((_DWORD *)v36 + v14) = *(_DWORD *)(result + 4 * (v17 + ((a3 - 2 + (int)v14 + v19) << 7)));
    ++v14;
  }
  while (v14 != 5);
  v20 = 0;
  v21 = 0.0;
  v22 = 0.0;
  do
  {
    v23 = *(float *)((char *)v36 + v20 * 4);
    v22 = v22 + (float)(*(float *)&dword_1A15E4320[v20] * v23);
    v21 = v21 + (float)(*(float *)&dword_1A15E4334[v20++] * v23);
  }
  while (v20 != 5);
  v24 = 128.0;
  if (v15 < 64.0)
    v24 = 0.0;
  v25 = v15 - v24;
  if (v21 <= -0.0002)
  {
    v26 = -2.0;
    if (v22 > 0.0 == v21 < 0.0)
    {
      v26 = 2.0;
      if (v22 <= (float)(v21 * -8.0))
        v26 = -2.0 - (float)(v22 / (float)(v21 + v21));
    }
  }
  else
  {
    v26 = NAN;
  }
  v27 = 0;
  v28 = v26 + (float)a3;
  v29 = 128.0;
  if (v28 < 64.0)
    v29 = 0.0;
  *(double *)&v30 = -(float)(v28 - v29);
  v31 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v25), 0);
  v32 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5, 0);
  v33 = (float64x2_t)vdupq_lane_s64(v30, 0);
  v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6, 0);
  do
  {
    v35 = (double *)(a2 + v27);
    v39 = vld2q_f64(v35);
    v39.val[0] = vmlaq_f64(v39.val[0], v32, v31);
    v39.val[1] = vmlaq_f64(v39.val[1], v34, v33);
    vst2q_f64(v35, v39);
    v27 += 32;
  }
  while (v27 != 64);
  return result;
}

void ctrTrackerComputation_colorHistogram(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unsigned int v16;
  unsigned int v17;
  double v18;
  float v19;
  int v20;
  float v21;
  int v22;
  uint64_t j;

  bzero(a4, 0x400uLL);
  bzero(a5, 0x400uLL);
  v11 = a3 + 5031;
  v12 = a2 + 5031;
  v13 = a1 + 5031;
  v14 = 39;
  do
  {
    for (i = 0; i != 50; ++i)
    {
      v16 = *(unsigned __int8 *)(v13 + i);
      v17 = *(unsigned __int8 *)(v12 + i);
      LOBYTE(v10) = *(_BYTE *)(v11 + i);
      v18 = (float)((float)((float)v16 + (float)v17) + (float)v10);
      if (v18 < 0.01)
        v18 = 0.01;
      v19 = (double)v16 / v18;
      v10 = 1132462080;
      v20 = vcvtms_s32_f32(v19 * 256.0);
      v21 = (double)v17 / v18;
      if (v20 >= 255)
        v20 = 255;
      v22 = vcvtms_s32_f32(v21 * 256.0);
      if (v22 >= 255)
        v22 = 255;
      *(float *)&a4[4 * v20] = *(float *)&a4[4 * v20] + 1.0;
      *(float *)&a5[4 * v22] = *(float *)&a5[4 * v22] + 1.0;
    }
    ++v14;
    v11 += 128;
    v12 += 128;
    v13 += 128;
  }
  while (v14 != 89);
  for (j = 0; j != 1024; j += 4)
  {
    *(float *)&a4[j] = *(float *)&a4[j] / 2500.0;
    *(float *)&a5[j] = *(float *)&a5[j] / 2500.0;
  }
}

float64x2_t ctrTrackerComputation_sizeAdaption(uint64_t a1, float64x2_t *a2, float *a3, uint64_t a4, float64x2_t *a5)
{
  uint64_t v9;
  float *v10;
  unsigned __int8 *v11;
  float *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  float64x2_t result;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  double v21;
  unsigned int v22;
  unsigned int v23;
  double v24;
  float v25;
  int v26;
  double v27;
  int v28;
  float v29;
  int v30;
  int v31;
  float *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  int v37;
  float *v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  float v61;
  double v62;
  unsigned int v63;
  unsigned int v64;
  double v65;
  float v66;
  int v67;
  double v68;
  int v69;
  float v70;
  int v71;
  int v72;
  unsigned int v73;
  float v74;
  double v75;
  unsigned int v76;
  unsigned int v77;
  double v78;
  float v79;
  int v80;
  float v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  float v85;
  double v86;
  unsigned int v87;
  unsigned int v88;
  double v89;
  float v90;
  int v91;
  double v92;
  int v93;
  float v94;
  int v95;
  int v96;
  unsigned int v97;
  float v98;
  double v99;
  unsigned int v100;
  unsigned int v101;
  double v102;
  float v103;
  int v104;
  float v105;
  int v106;
  int v107;
  float v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  int v113;
  float v114;
  float *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float v119;
  float v120;
  float *v121;
  float *v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  float *v133;
  float v134;
  float v135;
  float v136;
  uint64_t v137;
  double v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  int8x16_t v149;
  __int128 v150;
  _OWORD *f64;
  float v152;
  float v153;
  _BYTE *v155;
  float64x2_t v156;
  float64_t v157;
  int8x16_t v158;
  int8x16_t v159;
  float64_t v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v155 = (_BYTE *)(a1 + 250192);
  v9 = a1 + 246072;
  v10 = (float *)(a1 + 114688);
  v11 = (unsigned __int8 *)(a1 + 84500);
  v12 = (float *)(a1 + 248120);
  v13 = -1024;
  do
  {
    *v12 = sqrtf(*(float *)((char *)a2[64].f64 + v13));
    v12[256] = sqrtf(*(float *)((char *)a2[128].f64 + v13));
    ++v12;
    v13 += 4;
  }
  while (v13);
  v14 = (int *)(a1 + 247096);
  bzero((void *)(a1 + 246072), 0x800uLL);
  v15 = 20;
  HIDWORD(result.f64[0]) = 1065646817;
  do
  {
    v17 = v11;
    v18 = 88;
    do
    {
      v19 = *(v17 - 0x8000);
      v20 = (float)v19;
      v21 = (double)v19;
      v22 = *(v17 - 0x4000);
      v23 = *v17++;
      v24 = (float)((float)(v20 + (float)v22) + (float)v23);
      if (v24 < 0.01)
        v24 = 0.01;
      v25 = v21 / v24;
      v26 = vcvtms_s32_f32(v25 * 256.0);
      v27 = (double)v22;
      if (v26 >= 255)
        v28 = 255;
      else
        v28 = v26;
      v29 = v27 / v24;
      v30 = vcvtms_s32_f32(v29 * 256.0);
      if (v30 >= 255)
        v30 = 255;
      ++*(_DWORD *)(v9 + 4 * v28);
      ++v14[v30];
      --v18;
    }
    while (v18);
    ++v15;
    v11 += 128;
  }
  while (v15 != 108);
  v32 = (float *)(v9 + 4);
  v31 = *(_DWORD *)v9;
  v33 = 0.0;
  v34 = 255;
  do
  {
    v35 = *(int *)v32;
    v31 += v35;
    v33 = v33 + (float)(*(float *)(a4 + 4 * v35) * v32[512]);
    ++v32;
    --v34;
  }
  while (v34);
  v36 = v33 / sqrtf((float)v31);
  *v10 = v36;
  v37 = *(_DWORD *)(v9 + 1024);
  v38 = (float *)(v9 + 1028);
  v39 = 0.0;
  v40 = 255;
  do
  {
    v41 = *(int *)v38;
    v37 += v41;
    v39 = v39 + (float)(*(float *)(a4 + 4 * v41) * v38[512]);
    ++v38;
    --v40;
  }
  while (v40);
  v42 = sqrtf((float)v37);
  v43 = a1 + 84371;
  v44 = a1 + 67987;
  v45 = a1 + 51603;
  v46 = a1 + 84460;
  v47 = a1 + 68076;
  v48 = a1 + 51692;
  v49 = a1 + 95764;
  v50 = a1 + 79380;
  v51 = a1 + 62996;
  v52 = a1 + 84372;
  v53 = a1 + 67988;
  v54 = a1 + 51604;
  v55 = 1;
  v56 = (float)(v36 + (float)(v39 / v42)) * 0.5;
  *v10 = v56;
  v57 = 11520;
  v58 = 88;
  do
  {
    v59 = 0;
    do
    {
      v60 = *(unsigned __int8 *)(v45 + v59);
      v61 = (float)v60;
      v62 = (double)v60;
      v63 = *(unsigned __int8 *)(v44 + v59);
      *(float *)&v64 = (float)v63;
      LOBYTE(v64) = *(_BYTE *)(v43 + v59);
      v65 = (float)((float)(v61 + (float)v63) + (float)v64);
      if (v65 < 0.01)
        v65 = 0.01;
      v66 = v62 / v65;
      v67 = vcvtms_s32_f32(v66 * 256.0);
      v68 = (double)v63;
      if (v67 >= 255)
        v69 = 255;
      else
        v69 = v67;
      v70 = v68 / v65;
      v71 = vcvtms_s32_f32(v70 * 256.0);
      ++*(_DWORD *)(v9 + 4 * v69);
      if (v71 >= 255)
        v72 = 255;
      else
        v72 = v71;
      ++v14[v72];
      v73 = *(unsigned __int8 *)(v48 + v59);
      v74 = (float)v73;
      v75 = (double)v73;
      v76 = *(unsigned __int8 *)(v47 + v59);
      *(float *)&v77 = (float)v76;
      LOBYTE(v77) = *(_BYTE *)(v46 + v59);
      v78 = (float)((float)(v74 + (float)v76) + (float)v77);
      if (v78 < 0.01)
        v78 = 0.01;
      v79 = v75 / v78;
      v80 = vcvtms_s32_f32(v79 * 256.0);
      if (v80 >= 255)
        v80 = 255;
      v81 = (double)v76 / v78;
      v82 = vcvtms_s32_f32(v81 * 256.0);
      if (v82 >= 255)
        v82 = 255;
      ++*(_DWORD *)(v9 + 4 * v80);
      ++v14[v82];
      v59 += 128;
    }
    while (v57 != v59);
    v83 = 0;
    do
    {
      v84 = *(unsigned __int8 *)(v54 + v83);
      v85 = (float)v84;
      v86 = (double)v84;
      v87 = *(unsigned __int8 *)(v53 + v83);
      *(float *)&v88 = (float)v87;
      LOBYTE(v88) = *(_BYTE *)(v52 + v83);
      v89 = (float)((float)(v85 + (float)v87) + (float)v88);
      if (v89 < 0.01)
        v89 = 0.01;
      v90 = v86 / v89;
      v91 = vcvtms_s32_f32(v90 * 256.0);
      v92 = (double)v87;
      if (v91 >= 255)
        v93 = 255;
      else
        v93 = v91;
      v94 = v92 / v89;
      v95 = vcvtms_s32_f32(v94 * 256.0);
      ++*(_DWORD *)(v9 + 4 * v93);
      if (v95 >= 255)
        v96 = 255;
      else
        v96 = v95;
      ++v14[v96];
      v97 = *(unsigned __int8 *)(v51 + v83);
      v98 = (float)v97;
      v99 = (double)v97;
      v100 = *(unsigned __int8 *)(v50 + v83);
      *(float *)&v101 = (float)v100;
      LOBYTE(v101) = *(_BYTE *)(v49 + v83);
      v102 = (float)((float)(v98 + (float)v100) + (float)v101);
      if (v102 < 0.01)
        v102 = 0.01;
      v103 = v99 / v102;
      v104 = vcvtms_s32_f32(v103 * 256.0);
      if (v104 >= 255)
        v104 = 255;
      v105 = (double)v100 / v102;
      v106 = vcvtms_s32_f32(v105 * 256.0);
      if (v106 >= 255)
        v106 = 255;
      ++*(_DWORD *)(v9 + 4 * v104);
      ++v14[v106];
      ++v83;
    }
    while (v58 != v83);
    v107 = *(_DWORD *)v9;
    v108 = 0.0;
    v109 = (float *)(v9 + 4);
    v110 = 255;
    do
    {
      v111 = *(int *)v109;
      v107 += v111;
      v108 = v108 + (float)(*(float *)(a4 + 4 * v111) * v109[512]);
      ++v109;
      --v110;
    }
    while (v110);
    v112 = v108 / sqrtf((float)v107);
    v10[v55] = v112;
    v113 = *v14;
    v114 = 0.0;
    v115 = (float *)(v9 + 1028);
    v116 = 255;
    do
    {
      v117 = *(int *)v115;
      v113 += v117;
      v114 = v114 + (float)(*(float *)(a4 + 4 * v117) * v115[512]);
      ++v115;
      --v116;
    }
    while (v116);
    v10[v55++] = (float)(v112 + (float)(v114 / sqrtf((float)v113))) * 0.5;
    v43 -= 129;
    v44 -= 129;
    v45 -= 129;
    v46 -= 127;
    v47 -= 127;
    v48 -= 127;
    v57 += 256;
    v58 += 2;
    v49 += 127;
    v50 += 127;
    v51 += 127;
    v52 -= 129;
    v53 -= 129;
    v54 -= 129;
  }
  while (v55 != 21);
  v118 = 0;
  v119 = v10[1];
  v120 = (float)((float)(v119 * 0.19) + (float)(v56 * 0.79)) + (float)(*a3 * 0.02);
  v10[21] = v120;
  v121 = v10 + 21;
  v122 = v10;
  do
  {
    v123 = (float)(*v122 * 0.19) + (float)(v119 * 0.6);
    v119 = v122[2];
    v122[22] = (float)(v123 + (float)(v119 * 0.19)) + (float)(a3[v118 + 1] * 0.02);
    ++v122;
    ++v118;
  }
  while (v118 != 19);
  v124 = (float)((float)(v10[19] * 0.19) + (float)(v10[20] * 0.79)) + (float)(a3[20] * 0.02);
  v10[41] = v124;
  v125 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v10[22] * 0.0019763) + (float)(v120 * 0.0028233)) + (float)(v10[23] * 0.0012185)) + (float)(v10[24] * 0.00054979)) + (float)(v10[25] * -0.000029719)) + (float)(v10[26] * -0.00052007)) + (float)(v10[27] * -0.00092128)) + (float)(v10[28] * -0.0012333)) + (float)(v10[29] * -0.0014562)) + (float)(v10[30] * -0.0015899))
                                                                                               + (float)(v10[31] * -0.0016345))
                                                                                       + (float)(v10[32] * -0.0015899))
                                                                               + (float)(v10[33] * -0.0014562))
                                                                       + (float)(v10[34] * -0.0012333))
                                                               + (float)(v10[35] * -0.00092128))
                                                       + (float)(v10[36] * -0.00052007))
                                               + (float)(v10[37] * -0.000029719))
                                       + (float)(v10[38] * 0.00054979))
                               + (float)(v10[39] * 0.0012185))
                       + (float)(v10[40] * 0.0019763))
               + (float)(v124 * 0.0028233))
       * -1000.0;
  v126 = 0.0;
  if (v125 >= 0.0)
    v127 = v125;
  else
    v127 = 0.0;
  if (v125 <= 1.0)
    v128 = v127;
  else
    v128 = 1.0;
  *(float *)(v9 + 4112) = v128;
  if (*v155)
  {
    if (v128 >= *(float *)(v9 + 4116))
    {
      v129 = 0;
      v130 = 10;
      do
      {
        if (v121[v129] > v126)
        {
          v130 = v129;
          v126 = v121[v129];
        }
        ++v129;
      }
      while (v129 != 21);
      v131 = v130 - 2;
      v126 = 0.0;
      if (v131 < 0x11)
      {
        v132 = 0;
        v133 = &v121[v131];
        v134 = 0.0;
        do
        {
          v135 = v133[v132];
          v134 = v134 + (float)(*(float *)&dword_1A15E4320[v132] * v135);
          v126 = v126 + (float)(*(float *)&dword_1A15E4334[v132++] * v135);
        }
        while (v132 != 5);
        if (v126 <= -0.0002)
        {
          v136 = 0.0;
          if (v134 > 0.0 == v126 < 0.0)
          {
            v136 = 4.0;
            if (v134 <= (float)(v126 * -8.0))
              v136 = v134 / (float)(v126 * -2.0);
          }
        }
        else
        {
          v136 = NAN;
        }
        v126 = 0.0;
        if (fabsf(v136) != INFINITY)
        {
          v152 = v136 + (float)(int)v131;
          v126 = -4.0;
          if (v152 > 0.0)
          {
            v126 = 4.0;
            if (v152 < 20.0)
            {
              v153 = (float)((float)((float)(v152 - (float)(int)v152) * (float)((int)v152 + 1))
                           + (float)((float)(1.0 - (float)(v152 - (float)(int)v152)) * (float)(int)v152))
                   + -10.0;
              v126 = (float)(v153 * 0.2) + (float)(v153 * 0.2);
            }
          }
        }
      }
    }
  }
  else
  {
    *v155 = 1;
    *(float *)(v9 + 4116) = v128 * 0.5;
  }
  *(float *)result.f64 = v126 / 20.0;
  if (*(float *)result.f64 != 0.0)
  {
    v137 = 0;
    v138 = (float)(*(float *)result.f64 + 1.0);
    v139 = a5[2];
    v140 = vsubq_f64(v139, *a5);
    __asm { FMOV            V2.2D, #0.5 }
    v146 = vmulq_f64(vaddq_f64(v139, *a5), _Q2);
    v147 = vmulq_f64(vmulq_n_f64(v140, v138), _Q2);
    v148 = vsubq_f64(v146, v147);
    v160 = v148.f64[1];
    v156 = v148;
    v157 = v148.f64[0];
    v149 = (int8x16_t)vaddq_f64(v146, v147);
    v158 = vextq_s8(v149, v149, 8uLL);
    v159 = v158;
    do
    {
      v150 = *(__int128 *)((char *)&v156 + v137 * 16 + 16);
      f64 = (_OWORD *)a5[v137].f64;
      *f64 = *(float64x2_t *)((char *)&v156 + v137 * 16);
      f64[1] = v150;
      v137 += 2;
    }
    while (v137 != 4);
    result = vmulq_n_f64(a2[133], v138);
    a2[133] = result;
  }
  return result;
}

void sub_1A148EF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A148F14C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A148F6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A14904B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  _Unwind_Resume(exception_object);
}

void sub_1A14906F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1490A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A1490D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A1490F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1491008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1491138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1491224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A149137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A149146C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1491510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A149155C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A14916BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A149191C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A14919DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1491B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1A1491CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1491DC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1491F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id getVCPRequestRevisionPropertyKey(void)
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr;
  v7 = getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr;
  if (!getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr)
  {
    v1 = (void *)VideoProcessingLibrary();
    v0 = (id *)dlsym(v1, "VCPRequestRevisionPropertyKey");
    v5[3] = (uint64_t)v0;
    getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

uint64_t VideoProcessingLibrary()
{
  uint64_t v0;
  void *v2;

  if (VideoProcessingLibraryCore(char **)::frameworkLibrary)
    return VideoProcessingLibraryCore(char **)::frameworkLibrary;
  VideoProcessingLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = VideoProcessingLibraryCore(char **)::frameworkLibrary;
  if (!VideoProcessingLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

{
  uint64_t v0;
  void *v2;

  if (VideoProcessingLibraryCore(char **)::frameworkLibrary)
    return VideoProcessingLibraryCore(char **)::frameworkLibrary;
  VideoProcessingLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = VideoProcessingLibraryCore(char **)::frameworkLibrary;
  if (!VideoProcessingLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

{
  uint64_t v0;
  void *v2;

  if (VideoProcessingLibraryCore(char **)::frameworkLibrary)
    return VideoProcessingLibraryCore(char **)::frameworkLibrary;
  VideoProcessingLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = VideoProcessingLibraryCore(char **)::frameworkLibrary;
  if (!VideoProcessingLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

Class ___ZL32getVCPHumanPoseImageRequestClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;
  unsigned int *v5;
  unint64_t v6;
  id *v7;

  VideoProcessingLibrary();
  result = objc_getClass("VCPHumanPoseImageRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVCPHumanPoseImageRequestClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)abort_report_np();
    return (Class)+[VNEntityIdentificationModelTrainedModel getStoredRepresentationTag:forModelVersion:error:](v3, v4, v5, v6, v7);
  }
  return result;
}

void sub_1A149231C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1492488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1492900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A1492D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A14931DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A149325C()
{
  JUMPOUT(0x1A149324CLL);
}

void sub_1A14933D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vision::mod::ObjectTrackerEx::~ObjectTrackerEx(vision::mod::ObjectTrackerEx *this)
{
  *(_QWORD *)this = &off_1E453A2E8;
  ctpl_trackerDelete(*((_QWORD **)this + 4));
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E453A5B0;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_1E453A2E8;
  ctpl_trackerDelete(*((_QWORD **)this + 4));
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E453A5B0;
  std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100]((uint64_t)this + 16);
  JUMPOUT(0x1A1B0A898);
}

uint64_t vision::mod::ObjectTrackerEx::setTargetObjects(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t *a3)
{
  uint64_t v3;
  float v6;
  float32x2_t v7;
  float v8;
  float Width;
  int32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  double v16;
  float64x2_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int Height;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float v41;
  float64_t v42;
  _OWORD v43[4];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  if (a3[1] - *a3 != 80)
    return 6780;
  v6 = *(float *)(v3 + 24);
  v7 = *(float32x2_t *)(v3 + 28);
  v8 = *(float *)(v3 + 36);
  Width = (float)CVPixelBufferGetWidth(pixelBuffer);
  *(float *)v10.i32 = (float)CVPixelBufferGetHeight(pixelBuffer);
  v11 = vdiv_f32(v7, (float32x2_t)vdup_lane_s32(v10, 0));
  v12 = *(_QWORD *)(a1 + 32);
  if (CVPixelBufferGetPlaneCount(pixelBuffer))
  {
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
  }
  else
  {
    WidthOfPlane = CVPixelBufferGetWidth(pixelBuffer);
    HeightOfPlane = CVPixelBufferGetHeight(pixelBuffer);
  }
  v16 = (float)(v6 / Width) * (double)WidthOfPlane;
  v17 = vmulq_n_f64(vcvtq_f64_f32(v11), (double)HeightOfPlane);
  v18 = (double)WidthOfPlane + -1.0;
  if (v16 >= 0.0)
    v19 = (float)(v6 / Width) * (double)WidthOfPlane;
  else
    v19 = 0.0;
  if (v16 > v18)
    v19 = (double)WidthOfPlane + -1.0;
  v20 = (double)HeightOfPlane + -1.0;
  if (v17.f64[0] >= 0.0)
    v21 = v17.f64[0];
  else
    v21 = 0.0;
  if (v17.f64[0] > v20)
    v21 = (double)HeightOfPlane + -1.0;
  *(double *)v12 = v19;
  *(double *)(v12 + 8) = v21;
  v22 = v16 + (float)(v8 / Width) * (double)WidthOfPlane;
  if (v22 >= 0.0)
    v23 = v22;
  else
    v23 = 0.0;
  if (v22 <= v18)
    v18 = v23;
  *(double *)(v12 + 16) = v18;
  *(double *)(v12 + 24) = v21;
  v24 = vaddvq_f64(v17);
  if (v24 >= 0.0)
    v25 = v24;
  else
    v25 = 0.0;
  if (v24 <= v20)
    v20 = v25;
  *(double *)(v12 + 48) = v19;
  *(double *)(v12 + 56) = v20;
  *(double *)(v12 + 32) = v18;
  *(double *)(v12 + 40) = v20;
  v26 = *(_QWORD *)(v12 + 72);
  if (!v26)
  {
    v27 = malloc_type_calloc(1uLL, 0x53500uLL, 0x10200401370116FuLL);
    if (!v27)
    {
      *(_QWORD *)(v12 + 72) = 0;
      return 6779;
    }
    v26 = (uint64_t)v27;
    v27[42655] = tplTrackerResampler_alloc(72, 72);
    *(_QWORD *)(v12 + 72) = v26;
  }
  *(_QWORD *)(v26 + 44972) = 0;
  *(_OWORD *)(v26 + 42056) = 0u;
  *(_DWORD *)(v26 + 42072) = 0;
  v28 = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  *(_DWORD *)v26 = v28;
  *(_DWORD *)(v26 + 4) = Height;
  *(_BYTE *)(v26 + 44968) = 1;
  v30 = *(float64x2_t *)(v12 + 32);
  v31 = *(float64x2_t *)v12;
  __asm { FMOV            V3.2D, #23.0 }
  *(float32x2_t *)&_Q3.f64[0] = vcvt_f32_f64(vdivq_f64(vsubq_f64(v30, *(float64x2_t *)v12), _Q3));
  *(int32x2_t *)(v26 + 44960) = vrev64_s32(*(int32x2_t *)&_Q3.f64[0]);
  __asm { FMOV            V2.2S, #24.0 }
  v38 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&_Q3.f64[0], _D2));
  v39 = vsubq_f64(v31, v38);
  v40 = vaddq_f64(v30, v38);
  v38.f64[0] = v40.f64[0];
  v38.f64[1] = v39.f64[1];
  v42 = _Q3.f64[0];
  v43[0] = v39;
  v43[1] = v38;
  v43[2] = v40;
  v39.f64[1] = v40.f64[1];
  v43[3] = v39;
  if (tplTrackerResampler_setImage(*(_QWORD *)(v26 + 341240), pixelBuffer, (double *)v43) == 128)
  {
    tplTrackerResampler_resample(*(_QWORD *)(v26 + 341240), (double *)v12, 0x18u, 24, v26 + 45040, (_BYTE *)(v26 + 50224), (_BYTE *)(v26 + 55408), (int *)(v26 + 45024), *((float *)&v42 + 1), *(float *)&v42);
    tplTracker_YCbCr2RGB((unsigned __int8 *)(v26 + 45040), (unsigned __int8 *)(v26 + 50224), (unsigned __int8 *)(v26 + 55408), 576, (_BYTE *)(v26 + 60592), (_BYTE *)(v26 + 65776), (_BYTE *)(v26 + 70960));
    tplTracker_computeNormedGradient(v26 + 60592, v26 + 65776, v26 + 70960, 24, 24, (int *)(v26 + 45024), v26 + 8);
    tplTracker_computeTemplateAvgColor((_DWORD *)v26, v41);
    tplTracker_computeTemplateStats(v26);
    tplTracker_computeTemplateFFT(v26);
  }
  memcpy((void *)(v26 + 42076), (const void *)(v26 + 8), 0x240uLL);
  *(_DWORD *)(v26 + 44956) = 1;
  *(_BYTE *)(v12 + 65) = 0;
  return 6784;
}

uint64_t vision::mod::ObjectTrackerEx::track(uint64_t a1, __CVBuffer *a2, uint64_t *a3)
{
  float64x2_t *v3;
  uint64_t v5;
  float64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float32x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t PeakXY;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  float v28;
  int v29;
  int32x4_t v30;
  double v31;
  double v32;
  double v33;
  int32x4_t v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  float64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  float v60;
  unsigned int v61;
  unsigned int v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  float v67;
  BOOL *v68;
  float v69;
  int v70;
  float *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  float *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  _DWORD *v105;
  _DWORD *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t i;
  float v130;
  float *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  float v139;
  float v140;
  uint64_t v141;
  float *v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float *v149;
  int *v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  float32x2_t v155;
  float32x2_t v157;
  float v158;
  float v159;
  float v160;
  float32x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  __int128 v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  float v170;
  uint64_t v171;
  uint64_t j;
  int v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  float v188;
  float v189;
  float v190;
  float v191;
  int v192;
  int v193;
  int v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  float v204;
  float v205;
  float *v206;
  uint64_t v207;
  float v208;
  float v209;
  uint64_t k;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  float v214;
  float *v215;
  uint64_t v216;
  uint64_t v217;
  int32x2_t v218;
  int32x2_t v219;
  uint64_t v220;
  char v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  _DWORD *v230;
  int v231;
  float v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  unsigned int *v237;
  signed int v238;
  signed int v239;
  uint64_t v240;
  unsigned int v241;
  int v242;
  int32x2_t v243;
  float *v244;
  int32x2_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  _DWORD *v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  float32x2_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  float32x2_t v271;
  int8x8_t v272;
  int8x8_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  float v281;
  float *v282;
  float v283;
  float v284;
  int v285;
  float v286;
  float v287;
  float v288;
  unsigned __int8 *v289;
  int v290;
  int v291;
  int v292;
  int v293;
  float v294;
  float v295;
  uint64_t v296;
  uint64_t v297;
  int *v298;
  int v299;
  float64x2_t v300;
  float64x2_t v301;
  int v302;
  float64_t v303;
  int v304;
  int v305;
  int v306;
  float64_t v307;
  float64x2_t v308;
  float64x2_t v310;
  float v311;
  char *v312;
  float v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  char v330;
  double *v331;
  float v332;
  float v333;
  unsigned int v334;
  size_t Height;
  uint64_t v336;
  float v337;
  float v338;
  unint64_t v339;
  uint64_t v340;
  float32x2_t v342;
  float32x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  uint64_t v347;
  char *v348;
  float64x2_t v349;
  char v350;
  _BYTE *v351;
  int __dst;
  _QWORD *__dsta;
  _DWORD *__dstb;
  _DWORD *__dstc;
  unsigned __int8 *v356;
  unsigned __int8 *v357;
  unsigned __int8 *v358;
  uint64_t *v359;
  int *v360;
  uint64_t v361;
  unsigned __int8 *v362;
  unsigned __int8 *v363;
  uint64_t *v364;
  uint64_t *v365;
  float64x2_t v366;
  float64x2_t *v367;
  float64x2_t *v368;
  uint64_t v369;
  uint64_t v370;
  float32x2_t v372;
  float32x2_t *v373;
  float64x2_t v374;
  int v375;
  float32x2_t v376;
  void *__p[2];
  __int128 v378;
  float64x2_t v379;
  float64x2_t v380;
  _OWORD v381[4];
  uint64_t v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  uint64_t v392;
  CGRect v393;
  CGRect v394;

  v392 = *MEMORY[0x1E0C80C00];
  v3 = *(float64x2_t **)(a1 + 32);
  if (!v3)
    return 6751;
  v5 = a1;
  v6 = v3[4].f64[1];
  *(_BYTE *)(*(_QWORD *)&v6 + 44968) = 1;
  *(_DWORD *)(*(_QWORD *)&v6 + 44980) = 0;
  *(_OWORD *)(*(_QWORD *)&v6 + 44988) = 0u;
  *(_OWORD *)(*(_QWORD *)&v6 + 45004) = 0u;
  *(_DWORD *)(*(_QWORD *)&v6 + 45020) = 0;
  v7 = v3[2];
  v8 = *v3;
  __asm { FMOV            V3.2D, #23.0 }
  v366 = _Q3;
  v14 = vcvt_f32_f64(vdivq_f64(vsubq_f64(v7, *v3), _Q3));
  *(int32x2_t *)(*(_QWORD *)&v6 + 44996) = vrev64_s32((int32x2_t)v14);
  *(_OWORD *)(*(_QWORD *)&v6 + 45004) = xmmword_1A15FB570;
  __asm { FMOV            V3.2S, #24.0 }
  v15 = vcvtq_f64_f32(vmul_f32(v14, *(float32x2_t *)&_Q3.f64[0]));
  v16 = vsubq_f64(v8, v15);
  v17 = vaddq_f64(v7, v15);
  v15.f64[0] = v17.f64[0];
  v15.f64[1] = v16.f64[1];
  v381[0] = v16;
  v381[1] = v15;
  v16.f64[1] = v17.f64[1];
  v381[2] = v17;
  v381[3] = v16;
  PeakXY = tplTrackerResampler_setImage(*(_QWORD *)(*(_QWORD *)&v6 + 341240), a2, (double *)v381);
  v19 = PeakXY;
  if (PeakXY != 128)
    goto LABEL_278;
  v367 = v3;
  v369 = v5;
  v20 = a3;
  v359 = (uint64_t *)(*(_QWORD *)&v6 + 341240);
  v373 = (float32x2_t *)(*(_QWORD *)&v6 + 44980);
  tplTrackerResampler_resample(*(_QWORD *)(*(_QWORD *)&v6 + 341240), (double *)v381, *(_DWORD *)(*(_QWORD *)&v6 + 45012), *(_DWORD *)(*(_QWORD *)&v6 + 45016), *(_QWORD *)&v6 + 45040, (_BYTE *)(*(_QWORD *)&v6 + 50224), (_BYTE *)(*(_QWORD *)&v6 + 55408), (int *)(*(_QWORD *)&v6 + 45024), *(float *)(*(_QWORD *)&v6 + 44996), *(float *)(*(_QWORD *)&v6 + 45000));
  v356 = (unsigned __int8 *)(*(_QWORD *)&v6 + 50224);
  v357 = (unsigned __int8 *)(*(_QWORD *)&v6 + 45040);
  v358 = (unsigned __int8 *)(*(_QWORD *)&v6 + 55408);
  tplTracker_YCbCr2RGB((unsigned __int8 *)(*(_QWORD *)&v6 + 45040), (unsigned __int8 *)(*(_QWORD *)&v6 + 50224), (unsigned __int8 *)(*(_QWORD *)&v6 + 55408), *(_DWORD *)(*(_QWORD *)&v6 + 45016) * *(_DWORD *)(*(_QWORD *)&v6 + 45012), (_BYTE *)(*(_QWORD *)&v6 + 60592), (_BYTE *)(*(_QWORD *)&v6 + 65776), (_BYTE *)(*(_QWORD *)&v6 + 70960));
  v362 = (unsigned __int8 *)(*(_QWORD *)&v6 + 70960);
  v363 = (unsigned __int8 *)(*(_QWORD *)&v6 + 65776);
  v360 = (int *)(*(_QWORD *)&v6 + 45024);
  v361 = *(_QWORD *)&v6 + 88152;
  tplTracker_computeNormedGradient(*(_QWORD *)&v6 + 60592, *(_QWORD *)&v6 + 65776, *(_QWORD *)&v6 + 70960, *(_DWORD *)(*(_QWORD *)&v6 + 45012), *(_DWORD *)(*(_QWORD *)&v6 + 45016), (int *)(*(_QWORD *)&v6 + 45024), *(_QWORD *)&v6 + 88152);
  v21 = *(_DWORD *)(*(_QWORD *)&v6 + 45016);
  if (v21 > 95)
  {
    v64 = 6780;
    v3 = v367;
    goto LABEL_44;
  }
  v364 = a3;
  v22 = (char *)(*(_QWORD *)&v6 + 114652);
  v23 = (char *)(*(_QWORD *)&v6 + 93336);
  v24 = *(unsigned int *)(*(_QWORD *)&v6 + 45012);
  v25 = v21 + 1;
  v26 = *(float *)(*(_QWORD *)&v6 + 42064);
  v27 = *(float *)(*(_QWORD *)&v6 + 42068);
  v28 = *(float *)(*(_QWORD *)&v6 + 42072);
  v29 = v21 + 2;
  v351 = (_BYTE *)(*(_QWORD *)&v6 + 60592);
  PeakXY = calculateIntegralImage((unsigned __int8 *)(*(_QWORD *)&v6 + 60592), v21, v24, v21, v21 + 1, (_DWORD *)(*(_QWORD *)&v6 + 93336 + 4 * (v21 + 2)));
  if (PeakXY == 128)
  {
    PeakXY = calculateIntegralImage(v363, v21, v24, v21, v21 + 1, &v22[4 * v29]);
    if (PeakXY == 128)
    {
      PeakXY = calculateIntegralImage(v362, v21, v24, v21, v21 + 1, (_DWORD *)(*(_QWORD *)&v6 + 135968 + 4 * v29));
      if (PeakXY == 128)
      {
        v35 = (float *)(*(_QWORD *)&v6 + 78548);
        v36 = 4 * v25;
        if ((v24 & 0x80000000) == 0)
        {
          v37 = v24 + 1;
          v38 = v6;
          do
          {
            *(_DWORD *)(*(_QWORD *)&v38 + 93336) = 0;
            *(_DWORD *)(*(_QWORD *)&v38 + 114652) = 0;
            *(_DWORD *)(*(_QWORD *)&v38 + 135968) = 0;
            *(_QWORD *)&v38 += v36;
            --v37;
          }
          while (v37);
        }
        __dst = v24 - 23;
        bzero(v23, 4 * v25);
        bzero(v22, 4 * v25);
        bzero((void *)(*(_QWORD *)&v6 + 135968), 4 * v25);
        if ((int)v24 < 24)
        {
          v30.i32[0] = 0;
          LODWORD(v31) = 1212055744;
          v49 = v21 - 23;
        }
        else
        {
          v39 = 0;
          v40 = *(_DWORD *)(*(_QWORD *)&v6 + 45036) + 1;
          v41 = *(_QWORD *)&v6 + 72 * v25;
          v42 = v41 + 136040;
          v43 = *(_QWORD *)&v6 + 24 * v25;
          v44 = v43 + 136040;
          v45 = v43 + 93360;
          v46 = v41 + 93360;
          v47 = v43 + 114676;
          v48 = v41 + 114676;
          v49 = v21 - 23;
          v30.i32[0] = 0;
          LODWORD(v31) = 1212055744;
          LODWORD(v32) = 1.0;
          v50 = *(_QWORD *)&v6 + 78548;
          do
          {
            v51 = v40;
            if (v39 + 6 <= v40)
            {
              v51 = *(_DWORD *)(*(_QWORD *)&v6 + 45028);
              if (v39 + 6 > v51)
                v51 = v39 + 6;
            }
            v52 = v40;
            if (v39 + 18 <= v40)
            {
              v52 = *(_DWORD *)(*(_QWORD *)&v6 + 45028);
              if (v39 + 18 > v52)
                v52 = v39 + 18;
            }
            v53 = v52 - v51;
            if (v53 < 1)
              LODWORD(v33) = 0;
            else
              *(float *)&v33 = 1.0 / (float)v53;
            if (v21 >= 24)
            {
              v54 = 0;
              v55 = 0;
              v56 = *(int *)(*(_QWORD *)&v6 + 45032) + 1;
              do
              {
                v57 = v56;
                if (v55 + 6 <= v56)
                {
                  v57 = *v360;
                  if ((int)v55 + 6 > *v360)
                    v57 = v55 + 6;
                }
                v58 = v56;
                if ((int)v56 >= (int)v55 + 18)
                {
                  v58 = *v360;
                  if ((int)v55 + 18 > *v360)
                    v58 = v55 + 18;
                }
                v59 = v58 - v57;
                if (v59 < 1)
                  v60 = 0.0;
                else
                  v60 = 1.0 / (float)v59;
                *(float *)v34.i32 = *(float *)&v33 * v60;
                if (*(float *)v34.i32 > 0.0)
                {
                  v61 = *(_DWORD *)(v45 + v54)
                      - (*(_DWORD *)(v45 + v54 + 48)
                       + *(_DWORD *)(v46 + v54))
                      + *(_DWORD *)(v46 + v54 + 48);
                  v62 = *(_DWORD *)(v47 + v54)
                      - (*(_DWORD *)(v47 + v54 + 48)
                       + *(_DWORD *)(v48 + v54))
                      + *(_DWORD *)(v48 + v54 + 48);
                  v63 = (float)(*(_DWORD *)(v44 + v54 - 48)
                                            - (*(_DWORD *)(v44 + v54)
                                             + *(_DWORD *)(v42 + v54 - 48))
                                            + *(_DWORD *)(v42 + v54));
                  *(float *)v34.i32 = (float)((float)((float)((float)(*(float *)v34.i32 * (float)v61) - v26)
                                                    * (float)((float)(*(float *)v34.i32 * (float)v61) - v26))
                                            + (float)((float)((float)(*(float *)v34.i32 * (float)v62) - v27)
                                                    * (float)((float)(*(float *)v34.i32 * (float)v62) - v27)))
                                    + (float)((float)((float)(*(float *)v34.i32 * v63) - v28)
                                            * (float)((float)(*(float *)v34.i32 * v63) - v28));
                  *(_DWORD *)(v50 + v54) = v34.i32[0];
                  if (*(float *)v34.i32 > *(float *)v30.i32)
                    v30.i32[0] = v34.i32[0];
                  if (*(float *)v34.i32 < *(float *)&v31)
                    *(float *)&v31 = *(float *)v34.i32;
                }
                ++v55;
                v54 += 4;
              }
              while (4 * (v21 - 23) != v54);
            }
            ++v39;
            v50 += 4 * (v21 - 23);
            v42 += v36;
            v44 += v36;
            v45 += v36;
            v46 += v36;
            v47 += v36;
            v48 += v36;
          }
          while (v39 != __dst);
          v64 = 6780;
          a3 = v364;
          v3 = v367;
          if (*(float *)&v31 < 0.0 || *(float *)v30.i32 < 0.0)
            goto LABEL_279;
        }
        v65 = (v49 * __dst);
        if ((int)v65 >= 1)
        {
          v66 = sqrtf(*(float *)&v31);
          v67 = sqrtf(*(float *)v30.i32);
          LODWORD(v32) = 1060320051;
          *(float *)v30.i32 = fminf((float)(v66 + (float)((float)(v67 - v66) * 0.7))* (float)(v66 + (float)((float)(v67 - v66) * 0.7)), 1600.0);
          v68 = (BOOL *)(*(_QWORD *)&v6 + 76144);
          do
          {
            v69 = *v35++;
            *(float *)&v31 = v69;
            *v68++ = v69 > *(float *)v30.i32;
            --v65;
          }
          while (v65);
        }
      }
    }
  }
  v19 = PeakXY;
  a3 = v364;
  v3 = v367;
  if (PeakXY != 128)
    goto LABEL_278;
  if (*(_DWORD *)(*(_QWORD *)&v6 + 45016) != 72 || *(_DWORD *)(*(_QWORD *)&v6 + 45012) != 72)
    goto LABEL_116;
  v70 = 0;
  v71 = (float *)(*(_QWORD *)&v6 + 178600);
  v72 = *(_QWORD *)&v6 + 216828;
  v73 = *(_QWORD *)&v6 + 88152;
  do
  {
    v74 = 0;
    v75 = v72;
    do
    {
      *(_QWORD *)(v75 - 4) = *(_BYTE *)(v73 + v74++) & 0xF0;
      v75 += 8;
    }
    while (v74 != 72);
    v73 += 72;
    ++v70;
    v72 += 576;
  }
  while (v70 != 72);
  v348 = (char *)(*(_QWORD *)&v6 + 197808);
  __dsta = (_QWORD *)(*(_QWORD *)&v6 + 299768);
  v76 = 72;
  v77 = *(_QWORD *)&v6 + 258296;
  v78 = *(_QWORD *)&v6 + 216824;
  do
  {
    v79 = tplTracker_FFT_3324(v78, v77, *(double *)v30.i64, v31, v32, v33, v34);
    if (v79 != 128)
    {
      PeakXY = v79;
      goto LABEL_68;
    }
    v78 += 576;
    v77 += 576;
    --v76;
  }
  while (v76);
  v80 = 0;
  v81 = *(_QWORD *)&v6 + 299768;
  v82 = *(_QWORD *)&v6 + 258296;
  do
  {
    v83 = 0;
    v84 = 0;
    do
    {
      *(_QWORD *)(v81 + v83) = *(_QWORD *)(v82 + v84);
      v84 += 8;
      v83 += 576;
    }
    while ((_DWORD)v84 != 576);
    v82 += 576;
    v81 += 8;
    ++v80;
  }
  while (v80 != 72);
  v85 = 72;
  v86 = *(_QWORD *)&v6 + 258296;
  v87 = *(_QWORD *)&v6 + 299768;
  while (1)
  {
    PeakXY = tplTracker_FFT_3324(v87, v86, *(double *)v30.i64, v31, v32, v33, v34);
    if (PeakXY != 128)
      break;
    v87 += 576;
    v86 += 576;
    if (!--v85)
    {
      memcpy(__dsta, (const void *)(*(_QWORD *)&v6 + 258296), 0xA200uLL);
      break;
    }
  }
LABEL_68:
  a3 = v364;
  v5 = v369;
  if (PeakXY == 128)
  {
    v88 = 5184;
    v89 = *(int **)&v6;
    v90 = (_DWORD *)(*(_QWORD *)&v6 + 216824);
    do
    {
      v91 = (v89[74942] + 4) >> 3;
      v92 = (v89[74943] + 4) >> 3;
      v93 = (v89[146] + 4) >> 3;
      v94 = (v89[147] + 4) >> 3;
      *v90 = (unint64_t)(26512144 * ((int)v93 * (uint64_t)(int)v91 - (int)v94 * (uint64_t)(int)v92) + 0x40000000) >> 31;
      v90[1] = (unint64_t)(26512144 * ((int)v93 * (uint64_t)(int)v92 + (int)v94 * (uint64_t)(int)v91) + 0x40000000) >> 31;
      v90 += 2;
      v89 += 2;
      --v88;
    }
    while (v88);
    PeakXY = tplTracker_IFFT_2D(*(_QWORD *)&v6 + 216824, (char *)(*(_QWORD *)&v6 + 258296), __dsta, v30);
    if (PeakXY == 128)
    {
      v20 = v364;
      v95 = 0;
      v96 = 299768;
      v97 = (float *)(*(_QWORD *)&v6 + 197808);
      v98 = *(_QWORD *)&v6 + 197808;
      v3 = v367;
      v99 = *(_QWORD *)&v6 + 44980;
      do
      {
        v100 = 0;
        v101 = v96;
        do
        {
          *(float *)(v98 + v100) = (float)*(int *)(*(_QWORD *)&v6 + v101);
          v100 += 4;
          v101 += 8;
        }
        while (v100 != 196);
        v98 += 196;
        ++v95;
        v96 += 576;
      }
      while (v95 != 49);
      if (v6 != 0.0)
      {
        v102 = *(_DWORD *)(*(_QWORD *)&v6 + 45012);
        v103 = *(int *)(*(_QWORD *)&v6 + 45016);
        v104 = v103 + 1;
        if ((v103 & 0x80000000) == 0)
        {
          v105 = (_DWORD *)(*(_QWORD *)&v6 + 93336);
          v106 = (_DWORD *)(*(_QWORD *)&v6 + 114652);
          v107 = (v103 + 1);
          do
          {
            *v105++ = 0;
            *v106++ = 0;
            --v107;
          }
          while (v107);
        }
        v108 = v103 - 23;
        v109 = 4 * v104;
        if (v102 >= 1)
        {
          v110 = *(_QWORD *)&v6 + 4 * v104;
          v111 = v110 + 114652;
          v112 = v110 + 93336;
          v113 = 1;
          v114 = *(_QWORD *)&v6 + 93336;
          v115 = *(_QWORD *)&v6 + 114652;
          v116 = *(_QWORD *)&v6 + 88152;
          do
          {
            if ((int)v103 < 1)
            {
              v119 = 0;
              v118 = 0;
            }
            else
            {
              v117 = 0;
              v118 = 0;
              v119 = 0;
              do
              {
                v120 = *(_BYTE *)(v116 + v117) & 0xF0;
                *(_DWORD *)(v112 + 4 * v117) = *(_DWORD *)(v114 + 4 * v117) + v119;
                *(_DWORD *)(v111 + 4 * v117) = *(_DWORD *)(v115 + 4 * v117) + v118;
                v119 += v120;
                v118 += v120 * v120;
                ++v117;
              }
              while (v103 != v117);
            }
            v121 = *(_DWORD *)(v114 + 4 * v103);
            v114 += v109;
            *(_DWORD *)(v114 + 4 * v103) = v121 + v119;
            v122 = *(_DWORD *)(v115 + 4 * v103);
            v115 += v109;
            *(_DWORD *)(v115 + 4 * v103) = v122 + v118;
            v116 += v103;
            v111 += v109;
            v112 += v109;
            _ZF = v113++ == v102;
          }
          while (!_ZF);
        }
        v123 = 0;
        v124 = 24 * v104;
        v125 = &v23[96 * v104];
        v126 = 4 * v108;
        v127 = 4 * v124 + 114676 + *(_QWORD *)&v6 + 72;
        v128 = *(_QWORD *)&v6 + 178600;
        do
        {
          for (i = 0; i != 196; i += 4)
          {
            v130 = (float)(*(_DWORD *)&v23[i]
                                       - (*(_DWORD *)&v23[i + 96]
                                        + *(_DWORD *)&v125[i])
                                       + *(_DWORD *)&v125[i + 96])
                 * 0.0017361;
            v131 = (float *)(v128 + i);
            *v131 = sqrtf((float)((float)(*(_DWORD *)&v22[i]- (*(_DWORD *)&v22[i + 96]+ *(_DWORD *)(v127 + i - 96))+ *(_DWORD *)(v127 + i))* 0.0017361)- (float)(v130 * v130));
            v131[2401] = v130;
          }
          ++v123;
          v23 += v109;
          v128 += v126;
          v127 += v109;
          v22 += v109;
          v125 += v109;
        }
        while (v123 != 49);
        v133 = *(_DWORD *)(*(_QWORD *)&v6 + 45012);
        v132 = *(_DWORD *)(*(_QWORD *)&v6 + 45016);
        v134 = v133 - 23;
        v135 = v132 - 23;
        LODWORD(v136) = (v132 - 23) * (v133 - 23);
        v137 = *(_QWORD *)&v6 + 42056;
        v138 = (_BYTE *)(*(_QWORD *)&v6 + 76144);
        if ((int)v136 >= 1)
        {
          v140 = *(float *)(*(_QWORD *)&v6 + 42056);
          v139 = *(float *)(*(_QWORD *)&v6 + 42060);
          v141 = (v135 * v134);
          v142 = (float *)(*(_QWORD *)&v6 + 197808);
          do
          {
            v143 = v139 * fmaxf(*v71, v139 * 0.5);
            if (v143 == 0.0 || *v138)
            {
              *v142 = 0.0;
            }
            else
            {
              v144 = (float)((float)(v143 + (float)(v140 * v71[2401])) + (float)(*v142 * -0.0017361))
                   / (float)(v143 + v143);
              v145 = 1.0 - sqrtf(v144);
              if (v144 <= 0.0)
                v146 = 1.0;
              else
                v146 = v145;
              *v142 = fmaxf(v146, 0.0);
            }
            ++v142;
            ++v71;
            ++v138;
            --v141;
          }
          while (v141);
        }
        goto LABEL_107;
      }
      v64 = 6780;
LABEL_44:
      a3 = v20;
      goto LABEL_279;
    }
  }
  v19 = PeakXY;
  v3 = v367;
  if (PeakXY != 128)
    goto LABEL_278;
  if (v6 == 0.0)
  {
LABEL_116:
    v64 = 6780;
    goto LABEL_279;
  }
  v20 = v364;
  v99 = *(_QWORD *)&v6 + 44980;
  v133 = *(_DWORD *)(*(_QWORD *)&v6 + 45012);
  v132 = *(_DWORD *)(*(_QWORD *)&v6 + 45016);
  v134 = v133 - 23;
  v135 = v132 - 23;
  LODWORD(v136) = (v132 - 23) * (v133 - 23);
  v137 = *(_QWORD *)&v6 + 42056;
  v97 = (float *)(*(_QWORD *)&v6 + 197808);
LABEL_107:
  if ((int)v136 < 1)
  {
    v148 = 1.1755e-38;
    v151 = 3.4028e38;
    v150 = (int *)(*(_QWORD *)&v6 + 45024);
  }
  else
  {
    v136 = v136;
    v147 = 3.4028e38;
    v148 = 1.1755e-38;
    v149 = v97;
    v150 = (int *)(*(_QWORD *)&v6 + 45024);
    do
    {
      v151 = *v149;
      if (*v149 == 0.0)
        goto LABEL_113;
      if (v151 > v148)
        v148 = *v149;
      if (v151 >= v147)
LABEL_113:
        v151 = v147;
      ++v149;
      v147 = v151;
      --v136;
    }
    while (v136);
  }
  if (v148 < (float)(v151 + 0.000001))
  {
    *(_DWORD *)(v99 + 40) = 0;
    __dstb = (_DWORD *)(v99 + 40);
LABEL_120:
    *(_BYTE *)(v137 + 2912) = 0;
LABEL_121:
    v152 = 0;
    v153 = *(_QWORD *)&v6 + 8;
    __asm { FMOV            V1.2D, #0.5 }
    v349 = _Q1;
    v155 = vcvt_f32_f64(vaddq_f64(vmulq_f64(vaddq_f64(*v3, v3[2]), _Q1), vcvtq_f64_f32(*(float32x2_t *)(v99 + 8))));
    __asm { FMOV            V8.2S, #11.5 }
    v157 = vmul_f32(*(float32x2_t *)(v99 + 16), _D8);
    v372 = *(float32x2_t *)(v99 + 16);
    do
    {
      v158 = 1.0 - kTrackerSizeChangeScale[v152];
      v159 = v372.f32[0] * v158;
      v160 = v372.f32[1] * v158;
      v161 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v157, v158));
      v162 = vcvtq_f64_f32(vsub_f32(v155, v161));
      v163 = vcvtq_f64_f32(vadd_f32(v161, v155));
      *(float64_t *)&v164 = v163.f64[0];
      *((_QWORD *)&v164 + 1) = *(_QWORD *)&v162.f64[1];
      *(float64x2_t *)__p = v162;
      v378 = v164;
      v162.f64[1] = v163.f64[1];
      v379 = v163;
      v380 = v162;
      tplTrackerResampler_resample(*v359, (double *)__p, 0x18u, 24, (uint64_t)v357, v356, v358, v150, v159, v160);
      tplTracker_YCbCr2RGB(v357, v356, v358, 576, v351, v363, v362);
      v165 = v361;
      tplTracker_computeNormedGradient((uint64_t)v351, (uint64_t)v363, (uint64_t)v362, 24, 24, v150, v361);
      v166 = 0;
      v167 = 0;
      v168 = 0;
      v169 = 0;
      v170 = *(float *)(v137 + 4);
      v171 = v153;
      do
      {
        for (j = 0; j != 24; ++j)
        {
          v173 = *(_BYTE *)(v165 + j) & 0xF0;
          v166 += v173;
          v167 += v173 * v173;
          v168 += (*(_BYTE *)(v171 + j) & 0xF0) * v173;
        }
        v165 += 24;
        v171 += 24;
        ++v169;
      }
      while (v169 != 24);
      v174 = (float)v166 / 576.0;
      v175 = (float)((float)v167 / 576.0) - (float)(v174 * v174);
      if (v175 < 0.0)
        v175 = 0.0;
      v176 = sqrtf(v175);
      v177 = (float)((float)((float)v168 / -576.0) + (float)(v170 * v176)) + (float)(*(float *)v137 * v174);
      v178 = (float)(v170 + v170) * v176;
      if (v178 < 0.00000011921)
        v178 = 0.00000011921;
      v179 = v177 / v178;
      if (v179 < 0.0)
        v179 = 0.0;
      *((float *)&v382 + v152) = (float)(1.0 - sqrtf(v179)) * kTrackerSizeChangePenalty[v152];
      ++v152;
      v150 = v360;
    }
    while (v152 != 11);
    v180 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*((float *)&v382 + 1)
                                                                                                 * 0.006993)
                                                                                         + (float)(*(float *)&v382
                                                                                                 * 0.017483))
                                                                                 + (float)(v383 * -0.0011655))
                                                                         + (float)(v384 * -0.006993))
                                                                 + (float)(v385 * -0.01049))
                                                         + (float)(v386 * -0.011655))
                                                 + (float)(v387 * -0.01049))
                                         + (float)(v388 * -0.006993))
                                 + (float)(v389 * -0.0011655))
                         + (float)(v390 * 0.006993))
                 + (float)(v391 * 0.017483))
         * -100.0;
    v181 = 0.0;
    if (v180 >= 0.0)
      v182 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*((float *)&v382 + 1) * 0.006993)
                                                                                           + (float)(*(float *)&v382 * 0.017483))
                                                                                   + (float)(v383 * -0.0011655))
                                                                           + (float)(v384 * -0.006993))
                                                                   + (float)(v385 * -0.01049))
                                                           + (float)(v386 * -0.011655))
                                                   + (float)(v387 * -0.01049))
                                           + (float)(v388 * -0.006993))
                                   + (float)(v389 * -0.0011655))
                           + (float)(v390 * 0.006993))
                   + (float)(v391 * 0.017483))
           * -100.0;
    else
      v182 = 0.0;
    if (v180 <= 1.0)
      v183 = v182;
    else
      v183 = 1.0;
    v373->f32[1] = v183;
    v3 = v367;
    if (v183 >= 0.3)
    {
      v184 = 0;
      v185 = 5;
      do
      {
        if (*((float *)&v382 + v184) > v181)
        {
          v185 = v184;
          v181 = *((float *)&v382 + v184);
        }
        ++v184;
      }
      while (v184 != 11);
      v186 = v185 - 2;
      if ((v185 - 2) >= 7)
      {
        v294 = kTrackerSizeChangeScale[v185];
      }
      else
      {
        v187 = 0;
        v188 = 0.0;
        v189 = 0.0;
        do
        {
          v190 = *(float *)((char *)&v382 + 4 * v186 + v187 * 4);
          v189 = v189 + (float)(*(float *)&dword_1A15E4320[v187] * v190);
          v188 = v188 + (float)(*(float *)&dword_1A15E4334[v187++] * v190);
        }
        while (v187 != 5);
        if (v188 <= -0.005)
        {
          v191 = 0.0;
          if (v189 > 0.0 == v188 < 0.0)
          {
            v191 = 4.0;
            if (v189 <= (float)(v188 * -8.0))
              v191 = v189 / (float)(v188 * -2.0);
          }
        }
        else
        {
          v191 = NAN;
        }
        v294 = 0.0;
        if (fabsf(v191) != INFINITY)
        {
          v295 = v191 + (float)v186;
          if (v295 <= 0.0)
          {
            v294 = -0.1;
          }
          else if (v295 >= 10.0)
          {
            v294 = 0.1;
          }
          else
          {
            v294 = (float)((float)(v295 - (float)(int)v295) * kTrackerSizeChangeScale[(int)v295 + 1])
                 + (float)((float)(1.0 - (float)(v295 - (float)(int)v295)) * kTrackerSizeChangeScale[v295]);
          }
        }
      }
      v373[2] = vmul_n_f32(v372, 1.0 - v294);
    }
    if (*__dstb == 1)
    {
      v342 = vcvt_f32_f64(vaddq_f64(vmulq_f64(vaddq_f64(*v367, v367[2]), v349), vcvtq_f64_f32(v373[1])));
      v343 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v373[2], _D8));
      v344 = vcvtq_f64_f32(vsub_f32(v342, v343));
      v345 = vcvtq_f64_f32(vadd_f32(v343, v342));
      v346.f64[0] = v345.f64[0];
      v346.f64[1] = v344.f64[1];
      *v367 = v344;
      v367[1] = v346;
      v344.f64[1] = v345.f64[1];
      v367[2] = v345;
      v367[3] = v344;
    }
    a3 = v364;
    v5 = v369;
    goto LABEL_281;
  }
  if (v133 < 24)
  {
    v205 = 1.1755e-38;
    v204 = 3.4028e38;
  }
  else
  {
    v192 = 0;
    v193 = *(_DWORD *)(v99 + 24);
    v194 = *(_DWORD *)(v99 + 28);
    v195 = *(float *)(v99 + 16);
    v196 = *(float *)(v99 + 20);
    v197 = (float)((float)(v196 * (float)(v135 - v194)) * (float)(v196 * (float)(v135 - v194)))
         + (float)((float)(v195 * (float)(v134 - v193)) * (float)(v195 * (float)(v134 - v193)));
    v198 = v148 * 0.5;
    v199 = (float)(v198 * (float)(v195 * v195)) / v197;
    v200 = (float)(v198 * (float)(v196 * v196)) / v197;
    v201 = v135;
    v202 = -v194;
    v203 = 4 * v135;
    v204 = 3.4028e38;
    v205 = 1.1755e-38;
    v206 = v97;
    do
    {
      if (v132 >= 24)
      {
        v207 = 0;
        do
        {
          v208 = v206[v207];
          if (v208 != 0.0)
          {
            v209 = v208
                 - (float)((float)(v199 * (float)((v192 - v193) * (v192 - v193)))
                         + (float)((float)((v202 + v207) * (v202 + v207)) * v200));
            v206[v207] = v209;
            if (v209 > v205)
              v205 = v209;
            if (v209 < v204)
              v204 = v209;
          }
          ++v207;
        }
        while (v201 != v207);
      }
      ++v192;
      v206 = (float *)((char *)v206 + v203);
    }
    while (v192 != v134);
  }
  for (k = 0; k != 12; k += 4)
  {
    v382 = 0x3F7AE1483F733333;
    v383 = 0.99;
    *(float *)((char *)__p + k) = v204 + (float)(*(float *)((char *)&v382 + k) * (float)(v205 - v204));
  }
  v211 = 0;
  v212 = 0;
  v213 = *(_QWORD *)&v6 + 207412;
  v214 = *(float *)__p;
  v215 = v97;
  a3 = v20;
  do
  {
    v216 = 0;
    v217 = 0;
    v218 = vdup_n_s32(v211);
    while (v215[v216] <= v214)
    {
LABEL_172:
      if (++v216 == 49)
        goto LABEL_175;
    }
    if (v217 && (int)v216 - *(_DWORD *)(v217 + 8) <= 2)
    {
      *(_DWORD *)(v217 + 8) = v216;
      *(_DWORD *)(v217 + 20) = v216;
      ++*(_DWORD *)(v217 + 32);
      goto LABEL_172;
    }
    if ((int)v212 <= 255)
    {
      v217 = v213 + 36 * (int)v212;
      *(_DWORD *)(v217 + 12) = v212;
      v219 = vdup_n_s32(v216);
      *(_DWORD *)v217 = v211;
      *(int32x2_t *)(v217 + 4) = v219;
      *(int32x2_t *)(v217 + 16) = v219;
      *(int32x2_t *)(v217 + 24) = v218;
      *(_DWORD *)(v217 + 32) = 1;
      v212 = (v212 + 1);
      goto LABEL_172;
    }
    v212 = 0xFFFFFFFFLL;
LABEL_175:
    ++v211;
    v215 += 49;
  }
  while (v211 != 49);
  v220 = *(_QWORD *)&v6 + 216628;
  PeakXY = tplTracker_mergeSpans(v99, 0, v212);
  if (PeakXY == 128)
  {
    v221 = 0;
    v222 = 0;
    v223 = *(_QWORD *)&v6 + 197808;
    v224 = 1;
    do
    {
      v350 = v221;
      if (v222 >= (int)v212)
      {
        v234 = v212;
      }
      else
      {
        v225 = v222;
        v226 = v222;
        v227 = v212;
        v347 = v224;
        do
        {
          v228 = *(_DWORD *)(v213 + 36 * v226 + 12);
          if (v228 != (_DWORD)v226
            || (v229 = v213 + 36 * v226, v231 = *(_DWORD *)(v229 + 32), v230 = (_DWORD *)(v229 + 32), v231 < 9))
          {
            v234 = v227;
            goto LABEL_204;
          }
          v232 = *((float *)__p + v224);
          v233 = v225;
          v234 = v227;
LABEL_183:
          while (2)
          {
            v235 = *(_DWORD *)(v213 + 36 * v233 + 12);
            do
            {
              v236 = v235;
              v235 = *(_DWORD *)(v213 + 36 * v235 + 12);
            }
            while (v236 != v235);
            if (v236 == v228)
            {
              v237 = (unsigned int *)(v213 + 36 * v233);
              v238 = v237[1];
              v239 = v237[2];
              if (v238 <= v239)
              {
                v240 = 0;
                v241 = *v237;
                v242 = v239 + 1;
                v243 = vdup_n_s32(v241);
                v244 = (float *)(v223 + 4 * v238 + 4 * (int)(49 * v241));
                do
                {
                  if (*v244 > v232)
                  {
                    if (v240 && v238 - *(_DWORD *)(v240 + 8) <= 2)
                    {
                      *(_DWORD *)(v240 + 8) = v238;
                      *(_DWORD *)(v240 + 20) = v238;
                      ++*(_DWORD *)(v240 + 32);
                    }
                    else
                    {
                      if ((int)v234 > 255)
                      {
                        ++v233;
                        v234 = 0xFFFFFFFFLL;
                        if (v233 == (int)v212)
                        {
LABEL_263:
                          v285 = 0;
                          *(_DWORD *)(*(_QWORD *)&v6 + 216820) = -1;
                          PeakXY = 6784;
                          v3 = v367;
                          v5 = v369;
                          goto LABEL_273;
                        }
                        goto LABEL_183;
                      }
                      v240 = v213 + 36 * (int)v234;
                      *(_DWORD *)(v240 + 12) = v234;
                      v245 = vdup_n_s32(v238);
                      *(_DWORD *)v240 = v241;
                      *(int32x2_t *)(v240 + 4) = v245;
                      *(int32x2_t *)(v240 + 16) = v245;
                      *(int32x2_t *)(v240 + 24) = v243;
                      *(_DWORD *)(v240 + 32) = 1;
                      v234 = (v234 + 1);
                    }
                  }
                  ++v238;
                  ++v244;
                }
                while (v242 != v238);
              }
            }
            if (++v233 != (int)v212)
              continue;
            break;
          }
          if ((_DWORD)v234 == -1)
            goto LABEL_263;
          if ((int)v234 > (int)v227)
          {
            v246 = v99;
            v247 = v223;
            v248 = v225;
            __dstc = v230;
            tplTracker_mergeSpans(v246, v227, v234);
            v225 = v248;
            v224 = v347;
            v99 = *(_QWORD *)&v6 + 44980;
            v223 = v247;
            *__dstc = 0;
          }
          PeakXY = 6784;
LABEL_204:
          ++v226;
          v227 = v234;
        }
        while ((_DWORD)v212 != (_DWORD)v226);
      }
      v221 = 1;
      v224 = 2;
      v222 = v212;
      v212 = v234;
    }
    while ((v350 & 1) == 0);
    if ((int)v234 < 1)
    {
      v250 = 0;
      a3 = v364;
      v3 = v367;
      v220 = *(_QWORD *)&v6 + 216628;
    }
    else
    {
      v249 = 0;
      v250 = 0;
      a3 = v364;
      v3 = v367;
      v220 = *(_QWORD *)&v6 + 216628;
      do
      {
        if (v249 == *(_DWORD *)(v213 + 36 * v249 + 12) && *(_DWORD *)(v213 + 36 * v249 + 32))
        {
          v251 = (_DWORD *)(v213 + 36 * v249);
          v253 = v251[4];
          v252 = v251[5];
          if (v253 <= 1)
            v254 = 1;
          else
            v254 = v251[4];
          v255 = v254 - 1;
          if (v253 > 49)
            v255 = 48;
          if (v252 < 0)
            v256 = -1;
          else
            v256 = v251[5];
          if (v252 < 48)
            v257 = v256 + 1;
          else
            v257 = 48;
          v258 = v251[6];
          v259 = v251[7];
          if (v258 <= 1)
            v260 = 1;
          else
            v260 = v251[6];
          v261 = v260 - 1;
          if (v258 > 49)
            v261 = 48;
          if (v259 < 0)
            v262 = -1;
          else
            v262 = v259;
          if (v259 < 48)
            v263 = v262 + 1;
          else
            v263 = 48;
          v264 = (float32x2_t)0x7F7FFFFF00800000;
          if (v261 <= v263)
          {
            v265 = *(_QWORD *)&v6 + 196 * v261 + 78548;
            v266 = &v348[196 * v261];
            v267 = 4 * v255;
            v268 = v261;
            v264 = (float32x2_t)0x7F7FFFFF00800000;
            do
            {
              if (v255 <= v257)
              {
                v269 = 0;
                v270 = v265 + v267;
                do
                {
                  v271.i32[0] = *(_DWORD *)&v266[4 * v269 + v267];
                  v272 = (int8x8_t)__PAIR64__(v264.u32[1], v271.u32[0]);
                  v271.i32[1] = *(_DWORD *)(v270 + 4 * v269);
                  v273 = (int8x8_t)vcgt_f32(v271, v264);
                  v264.i32[1] = *(_DWORD *)(v270 + 4 * v269);
                  v264 = (float32x2_t)vbsl_s8(v273, v272, (int8x8_t)v264);
                  ++v269;
                }
                while (v257 - v255 + 1 != (_DWORD)v269);
              }
              v266 += 196;
              v265 += 196;
              _ZF = v268++ == v263;
            }
            while (!_ZF);
          }
          v274 = *(_QWORD *)&v6 + 216628 + 12 * v250;
          *(_BYTE *)v274 = v255;
          *(_BYTE *)(v274 + 1) = v261;
          *(_BYTE *)(v274 + 2) = v257;
          *(_BYTE *)(v274 + 3) = v263;
          *(float32x2_t *)(v274 + 4) = v264;
          ++v250;
          a3 = v364;
        }
        ++v249;
      }
      while (v249 != v234);
    }
    v275 = *(_QWORD *)&v6 + 216636;
    *(_DWORD *)(*(_QWORD *)&v6 + 216820) = v250;
  }
  else
  {
    v275 = *(_QWORD *)&v6 + 216636;
  }
  v5 = v369;
  if (PeakXY == 128)
  {
    v276 = *(unsigned int *)(v275 + 184);
    if ((int)v276 < 1)
      goto LABEL_272;
    v277 = 0;
    v278 = *(_DWORD *)(v99 + 36) - 23;
    v279 = *(_DWORD *)(v99 + 32) - 23;
    v280 = -1;
    v281 = 3.4028e38;
    v282 = (float *)v275;
    do
    {
      v283 = *v282;
      v282 += 3;
      v284 = v283;
      if (v283 < v281)
      {
        v280 = v277;
        v281 = v284;
      }
      ++v277;
    }
    while (v276 != v277);
    if (v280 == -1)
    {
LABEL_272:
      v285 = 0;
      PeakXY = 6784;
LABEL_273:
      *(_DWORD *)(v99 + 40) = v285;
    }
    else
    {
      v285 = 0;
      v286 = 5.0;
      if ((float)(v281 * 1.5) >= 5.0)
        v286 = v281 * 1.5;
      if ((float)(v281 * 1.5) <= 1000.0)
        v287 = v286;
      else
        v287 = 1000.0;
      do
      {
        v288 = *(float *)v275;
        v275 += 12;
        if (v288 <= v287)
          ++v285;
        --v276;
      }
      while (v276);
      v289 = (unsigned __int8 *)(v220 + 12 * v280);
      v290 = *v289;
      v291 = v289[1];
      v292 = v289[2];
      v293 = v289[3];
      v376 = 0;
      PeakXY = tplTracker_findPeakXY((uint64_t)v348, v278, v279, v290, v291, v292, v293, (uint64_t)&v376 + 4, (float *)&v376);
      if (PeakXY == 128)
      {
        *(float *)v99 = v281;
        *(int32x2_t *)(v99 + 8) = vrev64_s32((int32x2_t)vmul_f32(*(float32x2_t *)(v99 + 16), vsub_f32(v376, vcvt_f32_s32(*(int32x2_t *)(v99 + 24)))));
        v5 = v369;
        goto LABEL_273;
      }
      v5 = v369;
    }
    a3 = v364;
  }
  v19 = PeakXY;
  if (PeakXY == 128)
  {
    v99 = *(_QWORD *)&v6 + 44980;
    __dstb = (_DWORD *)(*(_QWORD *)&v6 + 45020);
    v137 = *(_QWORD *)&v6 + 42056;
    v150 = (int *)(*(_QWORD *)&v6 + 45024);
    if (*(_DWORD *)(*(_QWORD *)&v6 + 45020) == 1)
      goto LABEL_121;
    goto LABEL_120;
  }
LABEL_278:
  v64 = PeakXY;
  if (v19 != 128)
  {
LABEL_279:
    *(_BYTE *)(*(_QWORD *)&v6 + 44968) = 0;
    BYTE1(v3[4].f64[0]) = 1;
  }
  v296 = v64;
  if (v64 != 128)
    goto LABEL_324;
LABEL_281:
  v297 = *(_QWORD *)&v3[4].f64[1];
  v298 = (int *)(v297 + 44956);
  v299 = *(unsigned __int8 *)(v297 + 44968);
  LOBYTE(v3[4].f64[0]) = v299;
  v300 = v3[2];
  v301 = *v3;
  *(int32x2_t *)(v297 + 44960) = vrev64_s32((int32x2_t)vcvt_f32_f64(vdivq_f64(vsubq_f64(v300, *v3), v366)));
  v302 = *(_DWORD *)(v297 + 44972);
  v303 = v301.f64[1];
  if (!v299)
  {
    if (!v302)
    {
      v306 = *(_DWORD *)(v297 + 44976) + 1;
      *(_DWORD *)(v297 + 44972) = 1;
      *(_DWORD *)(v297 + 44976) = v306;
      goto LABEL_291;
    }
    v304 = v302 + 1;
    v305 = *(_DWORD *)(v297 + 44976) + 1;
    *(_DWORD *)(v297 + 44972) = v304;
    *(_DWORD *)(v297 + 44976) = v305;
LABEL_286:
    if (v305 == 2)
    {
      BYTE1(v3[4].f64[0]) = 1;
    }
    else if (v304 != 3)
    {
      goto LABEL_291;
    }
    *(_QWORD *)(v297 + 44972) = 0;
    goto LABEL_291;
  }
  if (v302)
  {
    v304 = v302 + 1;
    *(_DWORD *)(v297 + 44972) = v304;
    v305 = *(_DWORD *)(v297 + 44976);
    goto LABEL_286;
  }
LABEL_291:
  v307 = v3->f64[0];
  v300.f64[0] = v3[2].f64[0];
  v301.f64[0] = v3->f64[0];
  v308 = vsubq_f64(v300, v301);
  __asm { FMOV            V3.2D, #1.0 }
  v310 = vaddq_f64(v308, _Q3);
  v394.size.width = (double)(*(_DWORD *)v297 - 1);
  v394.size.height = (double)(*(_DWORD *)(v297 + 4) - 1);
  _Q3.f64[0] = v310.f64[1];
  v394.origin.x = 0.0;
  v394.origin.y = 0.0;
  v374 = v310;
  v393 = CGRectIntersection(*(CGRect *)(&v303 - 1), v394);
  v64 = 6784;
  if (*(_DWORD *)(v297 + 45020) != 1)
    goto LABEL_325;
  v311 = v393.size.width * v393.size.height / vmuld_lane_f64(v374.f64[0], v374, 1);
  if (v311 <= 0.5)
    goto LABEL_325;
  v370 = v5;
  v365 = a3;
  v375 = 576 * *v298;
  v312 = (char *)(v297 + v375 + 42076);
  v368 = v3;
  tplTrackerResampler_resample(*(_QWORD *)(v297 + 341240), v3->f64, 0x18u, 24, v297 + 45040, (_BYTE *)(v297 + 50224), (_BYTE *)(v297 + 55408), (int *)(v297 + 45024), *(float *)(v297 + 44960), *(float *)(v297 + 44964));
  tplTracker_YCbCr2RGB((unsigned __int8 *)(v297 + 45040), (unsigned __int8 *)(v297 + 50224), (unsigned __int8 *)(v297 + 55408), 576, (_BYTE *)(v297 + 60592), (_BYTE *)(v297 + 65776), (_BYTE *)(v297 + 70960));
  tplTracker_computeTemplateAvgColor((_DWORD *)v297, v313);
  tplTracker_computeNormedGradient(v297 + 60592, v297 + 65776, v297 + 70960, 24, 24, (int *)(v297 + 45024), (uint64_t)v312);
  v314 = *(unsigned int *)(v297 + 45024);
  v64 = 6780;
  if ((v314 & 0x80000000) != 0)
    goto LABEL_323;
  v315 = *(unsigned int *)(v297 + 45028);
  if ((v315 & 0x80000000) != 0)
    goto LABEL_323;
  v316 = *(unsigned int *)(v297 + 45032);
  v64 = 6780;
  if ((int)v316 > 23)
    goto LABEL_323;
  v317 = *(_DWORD *)(v297 + 45036);
  if (v317 > 23)
    goto LABEL_323;
  v64 = 6780;
  if ((int)v314 > (int)v316 || (int)v315 > v317)
    goto LABEL_323;
  v318 = v297 + 8;
  if ((_DWORD)v315)
    memcpy(v312, (const void *)(v297 + 8), 24 * v315);
  if ((_DWORD)v314 || (int)v316 <= 22)
  {
    v319 = v297 + 24 * v315;
    v320 = v375 + 24 * v315 + v297 + 42077;
    do
    {
      v321 = v319;
      v322 = v314;
      if ((_DWORD)v314)
      {
        do
        {
          *(_BYTE *)(v321 + v375 + 42076) = *(_BYTE *)(v321 + 8);
          ++v321;
          --v322;
        }
        while (v322);
      }
      if ((int)v316 <= 22)
      {
        v323 = 0;
        do
        {
          *(_BYTE *)(v320 + v316 + v323) = *(_BYTE *)(v319 + v316 + v323 + 9);
          ++v323;
        }
        while ((int)v316 + (int)v323 - 1 < 22);
      }
      v319 += 24;
      v320 += 24;
    }
    while (v317 > (int)v315++);
  }
  if (v317 <= 22)
    memcpy(&v312[24 * v317 + 24], (const void *)(v318 + 24 * v317 + 24), (24 * (23 - v317)));
  v325 = *v298 + 1;
  *v298 = v325;
  a3 = v365;
  if (v325 != 5)
  {
    v64 = 6784;
    v5 = v370;
    goto LABEL_325;
  }
  v326 = 0;
  v327 = v297 + 42076;
  v5 = v370;
  do
  {
    v328 = 0;
    v329 = 2;
    do
    {
      v329 += *(unsigned __int8 *)(v327 + v328);
      v328 += 576;
    }
    while (v328 != 2880);
    if (v329 > 0x4FF)
      v330 = -1;
    else
      v330 = v329 / 5;
    *(_BYTE *)(v318 + v326++) = v330;
    ++v327;
  }
  while (v326 != 576);
  tplTracker_computeTemplateStats(v297);
  v64 = tplTracker_computeTemplateFFT(v297);
  if (v64 == 128)
  {
    *v298 = 0;
    goto LABEL_325;
  }
LABEL_323:
  v5 = v370;
  BYTE1(v368[4].f64[0]) = 1;
  v296 = v64;
  a3 = v365;
LABEL_324:
  if (v296 == 128)
  {
LABEL_325:
    std::string::basic_string[abi:ne180100]<0>(__p, "unknown");
    HIDWORD(v380.f64[0]) = 0;
    LOBYTE(v380.f64[1]) = 0;
    HIDWORD(v380.f64[1]) = 0;
    LOWORD(v380.f64[0]) = 0;
    v379 = 0uLL;
    v331 = *(double **)(v5 + 32);
    v332 = v331[2] - *v331;
    *((float *)v379.f64 + 1) = v332;
    v333 = v331[5] - v331[3];
    *(float *)&v334 = v331[6];
    *(float *)v379.f64 = v333;
    *((_QWORD *)&v378 + 1) = v334 | 0x7FC0000000000000;
    Height = CVPixelBufferGetHeight(a2);
    v336 = *(_QWORD *)(v5 + 32);
    v337 = 0.0;
    if (*(_BYTE *)(v336 + 64))
      v337 = 1.0;
    v338 = (float)Height - *(double *)(v336 + 56);
    *((float *)&v378 + 3) = v338;
    *((float *)&v380.f64[1] + 1) = v337;
    v339 = a3[1];
    if (v339 >= a3[2])
    {
      v340 = std::vector<vision::mod::DetectedObject>::__push_back_slow_path<vision::mod::DetectedObject const&>(a3, (uint64_t)__p);
    }
    else
    {
      vision::mod::DetectedObject::DetectedObject(a3[1], (uint64_t)__p);
      v340 = v339 + 80;
      a3[1] = v339 + 80;
    }
    a3[1] = v340;
    if (SBYTE7(v378) < 0)
      operator delete(__p[0]);
  }
  return v64;
}

void sub_1A149555C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = v46;
  *(_QWORD *)(v48 + 8) = v47;
  if (a46 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::ObjectTrackerEx::update(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t vision::mod::ObjectTrackerEx::init(vision::mod::ObjectTrackerEx *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t result;

  v2 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x10200401EF7F3E0uLL);
  *((_QWORD *)this + 4) = v2;
  v3 = (_QWORD *)((char *)this + 32);
  if (v2)
  {
    v3 = v2 + 72;
    result = 6784;
  }
  else
  {
    ctpl_trackerDelete(0);
    result = 6779;
  }
  *v3 = 0;
  return result;
}

uint64_t vision::mod::ObjectTrackerEx::free(vision::mod::ObjectTrackerEx *this)
{
  uint64_t result;

  result = ctpl_trackerDelete(*((_QWORD **)this + 4));
  *((_QWORD *)this + 4) = 0;
  if (result == 128)
    return 6784;
  return result;
}

uint64_t tplTracker_FFT_3324(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, int32x4_t a7)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t *v21;
  int32x2_t *v22;
  unint64_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  _BYTE *v44;
  int32x2_t v45;
  int32x4_t v46;
  int32x2_t v47;
  int32x4_t v48;
  int32x2_t v49;
  int8x8_t v50;
  unsigned __int32 v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  unint64_t v55;
  int *v56;
  _BYTE *v57;
  unint64_t v58;
  _DWORD *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  _DWORD *v103;
  _BYTE v104[68];
  _BYTE v105[576];
  _BYTE v106[524];
  _BYTE v107[576];
  _QWORD v108[72];

  v108[70] = *MEMORY[0x1E0C80C00];
  result = 6780;
  if (a1 && a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v13 + 4 * v12 + 8 * v11 + 24 * v10;
      if (v14 >= 0x48)
        __assert_rtn("tplTracker_FFT_3324", "tplTrackerFFT.c", 99, "(outputIndex >= 0) && (outputIndex < 72)");
      *(_QWORD *)&v107[8 * v14 + 560] = *(_QWORD *)(a1 + v9);
      v15 = v11 + 1;
      v16 = !v12;
      if (v12)
        v17 = v13 + 1;
      else
        v17 = v13;
      v18 = v15 >= 3;
      if (v15 >= 3)
        v19 = v17;
      else
        v19 = v13;
      if (v18)
      {
        v20 = 0;
      }
      else
      {
        v16 = v12;
        v20 = v11 + 1;
      }
      if (v10 < 2)
      {
        ++v10;
      }
      else
      {
        v13 = v19;
        v12 = v16;
        v11 = v20;
        v10 = 0;
      }
      v9 += 8;
    }
    while (v9 != 576);
    v21 = (int32x2_t *)v108;
    v22 = (int32x2_t *)v107;
    v23 = -4;
    do
    {
      v24 = v21[-2];
      v25 = v21[-1];
      v26 = *v21;
      v27 = v21[1];
      v21 += 4;
      v28 = vadd_s32(v26, v24);
      v29 = vadd_s32(v25, v27);
      v22[-2] = vadd_s32(v29, v28);
      v22[-1] = vsub_s32(vadd_s32(vzip1_s32(v24, v27), vzip2_s32(v25, v24)), vadd_s32(vzip1_s32(v26, v25), vzip2_s32(v27, v26)));
      v30 = vsub_s32(v28, v29);
      v31 = vsub_s32(v24, vadd_s32(v26, vdup_lane_s32(v25, 1)));
      v32 = vadd_s32(v24, vdup_lane_s32(v25, 0));
      v25.i32[0] = vadd_s32(v31, vdup_lane_s32(v27, 1)).u32[0];
      v25.i32[1] = vsub_s32(v32, vadd_s32(vdup_lane_s32(v27, 0), v26)).i32[1];
      *v22 = v30;
      v22[1] = v25;
      v22 += 4;
      v23 += 4;
    }
    while (v23 < 0x44);
    v33 = 0;
    v34 = -8;
    do
    {
      v35 = *(_DWORD *)&v106[v33 + 516];
      v36 = *(_DWORD *)&v106[v33 + 520];
      v37 = (unint64_t)(1518500250 * *(int *)&v107[v33 + 24] + 0x40000000) >> 31;
      v38 = (unint64_t)(1518500250 * *(int *)&v107[v33 + 28] + 0x40000000) >> 31;
      v39 = v38 + v37;
      LODWORD(v37) = v38 - v37;
      v40 = v35 + v39;
      v41 = (unint64_t)(1518500250 * *(int *)&v107[v33 + 40] + 0x40000000) >> 31;
      v42 = (unint64_t)(1518500250 * *(int *)&v107[v33 + 44] + 0x40000000) >> 31;
      v43 = v35 - v39;
      v44 = &v105[v33 + 508];
      v45 = *(int32x2_t *)&v106[v33 + 508];
      v46.i64[0] = __PAIR64__((int)v41 + (int)v42, (int)v41 - (int)v42);
      v47 = *(int32x2_t *)&v107[v33 + 16];
      *(int32x2_t *)v44 = vadd_s32(v47, v45);
      v48 = *(int32x4_t *)&v106[v33 + 524];
      a7.i64[0] = *(_QWORD *)&v107[v33 + 32];
      v49 = vrev64_s32(*(int32x2_t *)v48.i8);
      *((_DWORD *)v44 + 2) = v40;
      *((_DWORD *)v44 + 3) = v36 + v37;
      v50 = vext_s8((int8x8_t)vadd_s32(v49, *(int32x2_t *)a7.i8), (int8x8_t)vsub_s32(v49, *(int32x2_t *)a7.i8), 4uLL);
      *(int32x2_t *)a7.i8 = vrev64_s32(*(int32x2_t *)a7.i8);
      v51 = vsubq_s32(v48, a7).u32[0];
      *((_DWORD *)v44 + 10) = v43;
      *((_DWORD *)v44 + 11) = v36 - v37;
      a7.i64[1] = __PAIR64__((int)v41 + (int)v42, (int)v41 - (int)v42);
      *((int8x8_t *)v44 + 2) = v50;
      v46.u64[1] = (unint64_t)v47;
      v52.i64[0] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
      v52.u64[1] = (unint64_t)v45;
      v53 = vsubq_s32(v52, v46);
      v54 = vaddq_s32(v48, a7);
      *(int32x4_t *)(v44 + 24) = v53;
      v54.i32[0] = v51;
      *((int32x4_t *)v44 + 3) = v54;
      v34 += 8;
      v33 += 64;
    }
    while (v34 < 0x40);
    v55 = 0;
    v56 = (int *)v106;
    v57 = v105;
    do
    {
      v58 = 0xFFFFFFFFFFFFFF40;
      v59 = v57;
      v60 = v56;
      do
      {
        v62 = *(v60 - 1);
        v61 = *v60;
        v63 = *(_QWORD *)((char *)&coeffsB_3324 + v58 + 192);
        v64 = *(_QWORD *)((char *)&coeffsB_3324 + v58 + 336);
        v66 = v60[15];
        v65 = v60[16];
        v67 = *(_QWORD *)((char *)&coeffsC_3324 + v58 + 192);
        v68 = *(_QWORD *)((char *)&coeffsC_3324 + v58 + 264);
        v70 = *(v60 - 17);
        v69 = *(v60 - 16);
        v71 = ((unint64_t)(v63 * v62 + 0x40000000) >> 31)
            + v70
            + ((unint64_t)(v67 * v66 + 0x40000000) >> 31)
            - (((unint64_t)(v64 * v61 + 0x40000000) >> 31)
             + ((unint64_t)(v68 * v65 + 0x40000000) >> 31));
        LODWORD(v63) = ((unint64_t)(v63 * v61 + 0x40000000) >> 31)
                     + v69
                     + ((unint64_t)(v64 * v62 + 0x40000000) >> 31)
                     + ((unint64_t)(v67 * v65 + 0x40000000) >> 31)
                     + ((unint64_t)(v68 * v66 + 0x40000000) >> 31);
        v72 = *(_QWORD *)((char *)&coeffsB_3324 + v58 + 384);
        v73 = *(_QWORD *)((char *)&coeffsB_3324 + v58 + 528);
        v74 = *(_QWORD *)((char *)&coeffsC_3324 + v58 + 384);
        v75 = *(_QWORD *)((char *)&coeffsC_3324 + v58 + 456);
        v76 = ((unint64_t)(v72 * v62 + 0x40000000) >> 31)
            + v70
            + ((unint64_t)(v74 * v66 + 0x40000000) >> 31)
            - (((unint64_t)(v73 * v61 + 0x40000000) >> 31)
             + ((unint64_t)(v75 * v65 + 0x40000000) >> 31));
        LODWORD(v72) = ((unint64_t)(v72 * v61 + 0x40000000) >> 31)
                     + v69
                     + ((unint64_t)(v73 * v62 + 0x40000000) >> 31)
                     + ((unint64_t)(v74 * v65 + 0x40000000) >> 31)
                     + ((unint64_t)(v75 * v66 + 0x40000000) >> 31);
        v77 = *(_QWORD *)((char *)&coeffsB_3324 + v58 + 576);
        v78 = *(_QWORD *)((char *)&coeffsB_3324 + v58 + 720);
        v79 = *(_QWORD *)((char *)&coeffsC_3324 + v58 + 576);
        v80 = *(_QWORD *)((char *)&coeffsC_3324 + v58 + 648);
        *(v59 - 17) = v71;
        *(v59 - 16) = v63;
        *(v59 - 1) = v76;
        *v59 = v72;
        v59[15] = ((unint64_t)(v77 * v62 + 0x40000000) >> 31)
                + v70
                + ((unint64_t)(v79 * v66 + 0x40000000) >> 31)
                - (((unint64_t)(v78 * v61 + 0x40000000) >> 31)
                 + ((unint64_t)(v80 * v65 + 0x40000000) >> 31));
        v59[16] = ((unint64_t)(v77 * v61 + 0x40000000) >> 31)
                + v69
                + ((unint64_t)(v78 * v62 + 0x40000000) >> 31)
                + ((unint64_t)(v79 * v65 + 0x40000000) >> 31)
                + ((unint64_t)(v80 * v66 + 0x40000000) >> 31);
        v60 += 2;
        v59 += 2;
        v58 += 24;
      }
      while (v58);
      v56 += 48;
      v57 += 192;
      v18 = v55 >= 0x30;
      v55 += 24;
    }
    while (!v18);
    v81 = 0xC0u;
    result = 6784;
    do
    {
      v83 = *(int *)&v104[v81];
      v82 = *(int *)&v104[v81 + 4];
      v84 = *(_QWORD *)((char *)&coeffsB_3324 + v81 - 192);
      v85 = *(_QWORD *)((char *)&coeffsB_3324 + v81 - 48);
      v87 = *(int *)&v105[v81 + 124];
      v86 = *(int *)&v105[v81 + 128];
      v88 = *(_QWORD *)((char *)&coeffsC_3324 + v81 - 192);
      v89 = *(_QWORD *)((char *)&coeffsC_3324 + v81 - 120);
      v90 = *(_DWORD *)&v104[v81 - 192];
      v91 = *(_DWORD *)&v104[v81 - 188];
      v92 = ((unint64_t)(v84 * v83 + 0x40000000) >> 31)
          + v90
          + ((unint64_t)(v88 * v87 + 0x40000000) >> 31)
          - (((unint64_t)(v85 * v82 + 0x40000000) >> 31)
           + ((unint64_t)(v89 * v86 + 0x40000000) >> 31));
      LODWORD(v84) = ((unint64_t)(v84 * v82 + 0x40000000) >> 31)
                   + v91
                   + ((unint64_t)(v85 * v83 + 0x40000000) >> 31)
                   + ((unint64_t)(v88 * v86 + 0x40000000) >> 31)
                   + ((unint64_t)(v89 * v87 + 0x40000000) >> 31);
      v93 = *(_QWORD *)((char *)&coeffsB_3324 + v81);
      v94 = *(_QWORD *)((char *)&coeffsB_3324 + v81 + 144);
      v95 = *(_QWORD *)((char *)&coeffsC_3324 + v81);
      v96 = *(_QWORD *)((char *)&coeffsC_3324 + v81 + 72);
      v97 = ((unint64_t)(v93 * v83 + 0x40000000) >> 31)
          + v90
          + ((unint64_t)(v95 * v87 + 0x40000000) >> 31)
          - (((unint64_t)(v94 * v82 + 0x40000000) >> 31)
           + ((unint64_t)(v96 * v86 + 0x40000000) >> 31));
      LODWORD(v93) = ((unint64_t)(v93 * v82 + 0x40000000) >> 31)
                   + v91
                   + ((unint64_t)(v94 * v83 + 0x40000000) >> 31)
                   + ((unint64_t)(v95 * v86 + 0x40000000) >> 31)
                   + ((unint64_t)(v96 * v87 + 0x40000000) >> 31);
      v98 = *(_QWORD *)((char *)&coeffsB_3324 + v81 + 192);
      v99 = *(_QWORD *)((char *)&coeffsB_3324 + v81 + 336);
      v100 = *(_QWORD *)((char *)&coeffsC_3324 + v81 + 192);
      v101 = *(_QWORD *)((char *)&coeffsC_3324 + v81 + 264);
      v102 = ((unint64_t)(v98 * v83 + 0x40000000) >> 31)
           + v90
           + ((unint64_t)(v100 * v87 + 0x40000000) >> 31)
           - (((unint64_t)(v99 * v82 + 0x40000000) >> 31)
            + ((unint64_t)(v101 * v86 + 0x40000000) >> 31));
      LODWORD(v83) = ((unint64_t)(v99 * v83 + 0x40000000) >> 31)
                   + ((unint64_t)(v100 * v86 + 0x40000000) >> 31);
      v103 = (_DWORD *)(a2 + v81);
      *(v103 - 48) = v92;
      *(v103 - 47) = v84;
      *v103 = v97;
      v103[1] = v93;
      v103[48] = v102;
      v103[49] = ((unint64_t)(v98 * v82 + 0x40000000) >> 31)
               + v91
               + v83
               + ((unint64_t)(v101 * v87 + 0x40000000) >> 31);
      v81 += 8;
    }
    while (v81 != 384);
  }
  return result;
}

uint64_t tplTracker_IFFT_3324(uint64_t a1, uint64_t a2, int32x4_t a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  __int32 v25;
  int8x16_t v26;
  unsigned __int32 v27;
  int32x4_t v28;
  int8x16_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  _BYTE *v41;
  int32x2_t v42;
  int32x4_t v43;
  int32x2_t v44;
  int32x4_t v45;
  int32x2_t v46;
  int8x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  unint64_t v52;
  int *v53;
  _BYTE *v54;
  unint64_t v55;
  _DWORD *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _DWORD *v99;
  _BYTE v100[68];
  _BYTE v101[576];
  int v102;
  _BYTE v103[576];
  _QWORD v104[73];

  v104[72] = *MEMORY[0x1E0C80C00];
  result = 6780;
  if (a1 && a2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v9 + 4 * v8 + 8 * v7 + 24 * v6;
      if (v10 >= 0x48)
        __assert_rtn("tplTracker_IFFT_3324", "tplTrackerFFT.c", 313, "(outputIndex >= 0) && (outputIndex < 72)");
      v104[v10] = *(_QWORD *)(a1 + v5);
      v11 = v7 + 1;
      v12 = !v8;
      if (v8)
        v13 = v9 + 1;
      else
        v13 = v9;
      v14 = v11 >= 3;
      if (v11 >= 3)
        v15 = v13;
      else
        v15 = v9;
      if (v14)
      {
        v16 = 0;
      }
      else
      {
        v12 = v8;
        v16 = v7 + 1;
      }
      if (v6 < 2)
      {
        ++v6;
      }
      else
      {
        v9 = v15;
        v8 = v12;
        v7 = v16;
        v6 = 0;
      }
      v5 += 8;
    }
    while (v5 != 576);
    v17 = -4;
    v18 = v103;
    v19 = v104;
    do
    {
      a3.i64[0] = *v19;
      v20 = vzip1q_s32(vrev64q_s32(a3), a3);
      v21 = *(int32x4_t *)(v19 + 1);
      v22 = vaddq_s32(v20, v21);
      v24 = vrev64q_s32(v22);
      v23 = (int32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v24, 8uLL);
      v24.i64[0] = v19[3];
      *(int32x2_t *)v18 = vadd_s32(*(int32x2_t *)v23.i8, vadd_s32(*(int32x2_t *)v21.i8, *(int32x2_t *)v24.i8));
      v25 = vsubq_s32(v20, vaddq_s32(vdupq_laneq_s32(v21, 2), v21)).i32[1] + v24.i32[1];
      v26 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL);
      v27 = vaddq_s32(v21, vdupq_laneq_s32(v21, 3)).u32[0];
      v21.i32[3] = v24.i32[0];
      v28.i64[0] = v24.i64[0];
      *((_DWORD *)v18 + 2) = v25;
      v28.i64[1] = __PAIR64__(v26.u32[1], v24.u32[1]);
      v29 = (int8x16_t)vsubq_s32(v23, vaddq_s32(v21, v28));
      *(int8x16_t *)(v18 + 12) = vextq_s8(v29, v29, 0xCuLL);
      *((_DWORD *)v18 + 7) = vadd_s32(*(int32x2_t *)v24.i8, vdup_lane_s32(*(int32x2_t *)a3.i8, 1)).u32[0] - v27;
      v17 += 4;
      v18 += 32;
      v19 += 4;
    }
    while (v17 < 0x44);
    v30 = 0;
    v31 = -8;
    do
    {
      v32 = *(_DWORD *)&v103[v30 + 8];
      v33 = *(_DWORD *)&v103[v30 + 12];
      v34 = (unint64_t)(1518500250 * *(int *)&v103[v30 + 40] + 0x40000000) >> 31;
      v35 = (unint64_t)(1518500250 * *(int *)&v103[v30 + 44] + 0x40000000) >> 31;
      v36 = v34 - v35;
      LODWORD(v34) = v35 + v34;
      v37 = v32 + v36;
      v38 = (unint64_t)(1518500250 * *(int *)&v103[v30 + 56] + 0x40000000) >> 31;
      v39 = (unint64_t)(1518500250 * *(int *)&v103[v30 + 60] + 0x40000000) >> 31;
      v40 = v32 - v36;
      v41 = &v101[v30 + 508];
      v42 = *(int32x2_t *)&v103[v30];
      v43.i64[0] = __PAIR64__((int)v39 - (int)v38, (int)v39 + (int)v38);
      v44 = *(int32x2_t *)&v103[v30 + 32];
      *(int32x2_t *)v41 = vadd_s32(v44, v42);
      v45 = *(int32x4_t *)&v103[v30 + 16];
      v24.i64[0] = *(_QWORD *)&v103[v30 + 48];
      v46 = vrev64_s32(*(int32x2_t *)v45.i8);
      *((_DWORD *)v41 + 2) = v37;
      *((_DWORD *)v41 + 3) = v33 + v34;
      v47 = vext_s8((int8x8_t)vsub_s32(v46, *(int32x2_t *)v24.i8), (int8x8_t)vadd_s32(v46, *(int32x2_t *)v24.i8), 4uLL);
      *(int32x2_t *)v24.i8 = vrev64_s32(*(int32x2_t *)v24.i8);
      v48 = vsubq_s32(v45, v24);
      *((_DWORD *)v41 + 10) = v40;
      *((_DWORD *)v41 + 11) = v33 - v34;
      v24.i64[1] = __PAIR64__((int)v39 - (int)v38, (int)v39 + (int)v38);
      *((int8x8_t *)v41 + 2) = v47;
      v43.u64[1] = (unint64_t)v44;
      v49.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
      v49.u64[1] = (unint64_t)v42;
      v50 = vsubq_s32(v49, v43);
      v51 = vaddq_s32(v45, v24);
      *(int32x4_t *)(v41 + 24) = v50;
      v51.i32[1] = v48.i32[1];
      *((int32x4_t *)v41 + 3) = v51;
      v31 += 8;
      v30 += 64;
    }
    while (v31 < 0x40);
    v52 = 0;
    v53 = &v102;
    v54 = v101;
    do
    {
      v55 = 0xFFFFFFFFFFFFFF40;
      v56 = v54;
      v57 = v53;
      do
      {
        v59 = *(v57 - 1);
        v58 = *v57;
        v60 = *(_QWORD *)((char *)&coeffsB_3324 + v55 + 192);
        v61 = *(_QWORD *)((char *)&coeffsB_3324 + v55 + 336);
        v63 = v57[15];
        v62 = v57[16];
        v64 = *(_QWORD *)((char *)&coeffsC_3324 + v55 + 192);
        v65 = *(_QWORD *)((char *)&coeffsC_3324 + v55 + 264);
        v67 = *(v57 - 17);
        v66 = *(v57 - 16);
        v68 = ((unint64_t)(v60 * v59 + 0x40000000) >> 31)
            + v67
            + ((unint64_t)(v61 * v58 + 0x40000000) >> 31)
            + ((unint64_t)(v64 * v63 + 0x40000000) >> 31)
            + ((unint64_t)(v65 * v62 + 0x40000000) >> 31);
        LODWORD(v60) = ((unint64_t)(v60 * v58 + 0x40000000) >> 31)
                     + v66
                     + ((unint64_t)(v64 * v62 + 0x40000000) >> 31)
                     - (((unint64_t)(v61 * v59 + 0x40000000) >> 31)
                      + ((unint64_t)(v65 * v63 + 0x40000000) >> 31));
        v69 = *(_QWORD *)((char *)&coeffsB_3324 + v55 + 384);
        v70 = *(_QWORD *)((char *)&coeffsB_3324 + v55 + 528);
        v71 = *(_QWORD *)((char *)&coeffsC_3324 + v55 + 384);
        v72 = *(_QWORD *)((char *)&coeffsC_3324 + v55 + 456);
        v73 = ((unint64_t)(v69 * v59 + 0x40000000) >> 31)
            + v67
            + ((unint64_t)(v70 * v58 + 0x40000000) >> 31)
            + ((unint64_t)(v71 * v63 + 0x40000000) >> 31)
            + ((unint64_t)(v72 * v62 + 0x40000000) >> 31);
        LODWORD(v69) = ((unint64_t)(v69 * v58 + 0x40000000) >> 31)
                     + v66
                     + ((unint64_t)(v71 * v62 + 0x40000000) >> 31)
                     - (((unint64_t)(v70 * v59 + 0x40000000) >> 31)
                      + ((unint64_t)(v72 * v63 + 0x40000000) >> 31));
        v74 = *(_QWORD *)((char *)&coeffsB_3324 + v55 + 576);
        v75 = *(_QWORD *)((char *)&coeffsB_3324 + v55 + 720);
        v76 = *(_QWORD *)((char *)&coeffsC_3324 + v55 + 576);
        v77 = *(_QWORD *)((char *)&coeffsC_3324 + v55 + 648);
        *(v56 - 17) = v68;
        *(v56 - 16) = v60;
        *(v56 - 1) = v73;
        *v56 = v69;
        v56[15] = ((unint64_t)(v74 * v59 + 0x40000000) >> 31)
                + v67
                + ((unint64_t)(v75 * v58 + 0x40000000) >> 31)
                + ((unint64_t)(v76 * v63 + 0x40000000) >> 31)
                + ((unint64_t)(v77 * v62 + 0x40000000) >> 31);
        v56[16] = ((unint64_t)(v74 * v58 + 0x40000000) >> 31)
                + v66
                + ((unint64_t)(v76 * v62 + 0x40000000) >> 31)
                - (((unint64_t)(v75 * v59 + 0x40000000) >> 31)
                 + ((unint64_t)(v77 * v63 + 0x40000000) >> 31));
        v57 += 2;
        v56 += 2;
        v55 += 24;
      }
      while (v55);
      v53 += 48;
      v54 += 192;
      v14 = v52 >= 0x30;
      v52 += 24;
    }
    while (!v14);
    v78 = 0xC0u;
    result = 6784;
    do
    {
      v80 = *(int *)&v100[v78];
      v79 = *(int *)&v100[v78 + 4];
      v81 = *(_QWORD *)((char *)&coeffsB_3324 + v78 - 192);
      v82 = *(_QWORD *)((char *)&coeffsB_3324 + v78 - 48);
      v84 = *(int *)&v101[v78 + 124];
      v83 = *(int *)&v101[v78 + 128];
      v85 = *(_QWORD *)((char *)&coeffsC_3324 + v78 - 192);
      v86 = *(_QWORD *)((char *)&coeffsC_3324 + v78 - 120);
      v88 = *(_DWORD *)&v100[v78 - 192];
      v87 = *(_DWORD *)&v100[v78 - 188];
      v89 = ((unint64_t)(v81 * v80 + 0x40000000) >> 31)
          + v88
          + ((unint64_t)(v82 * v79 + 0x40000000) >> 31)
          + ((unint64_t)(v85 * v84 + 0x40000000) >> 31)
          + ((unint64_t)(v86 * v83 + 0x40000000) >> 31);
      LODWORD(v81) = ((unint64_t)(v81 * v79 + 0x40000000) >> 31)
                   + v87
                   + ((unint64_t)(v85 * v83 + 0x40000000) >> 31)
                   - (((unint64_t)(v82 * v80 + 0x40000000) >> 31)
                    + ((unint64_t)(v86 * v84 + 0x40000000) >> 31));
      v90 = *(_QWORD *)((char *)&coeffsB_3324 + v78);
      v91 = *(_QWORD *)((char *)&coeffsB_3324 + v78 + 144);
      v92 = *(_QWORD *)((char *)&coeffsC_3324 + v78);
      v93 = *(_QWORD *)((char *)&coeffsC_3324 + v78 + 72);
      LODWORD(v82) = ((unint64_t)(v90 * v80 + 0x40000000) >> 31)
                   + v88
                   + ((unint64_t)(v91 * v79 + 0x40000000) >> 31)
                   + ((unint64_t)(v92 * v84 + 0x40000000) >> 31)
                   + ((unint64_t)(v93 * v83 + 0x40000000) >> 31);
      LODWORD(v90) = ((unint64_t)(v90 * v79 + 0x40000000) >> 31)
                   + v87
                   + ((unint64_t)(v92 * v83 + 0x40000000) >> 31)
                   - (((unint64_t)(v91 * v80 + 0x40000000) >> 31)
                    + ((unint64_t)(v93 * v84 + 0x40000000) >> 31));
      v94 = *(_QWORD *)((char *)&coeffsB_3324 + v78 + 192);
      v95 = *(_QWORD *)((char *)&coeffsB_3324 + v78 + 336);
      v96 = *(_QWORD *)((char *)&coeffsC_3324 + v78 + 192);
      v97 = *(_QWORD *)((char *)&coeffsC_3324 + v78 + 264);
      v98 = ((unint64_t)(v94 * v80 + 0x40000000) >> 31)
          + v88
          + ((unint64_t)(v95 * v79 + 0x40000000) >> 31)
          + ((unint64_t)(v96 * v84 + 0x40000000) >> 31)
          + ((unint64_t)(v97 * v83 + 0x40000000) >> 31);
      LODWORD(v79) = ((unint64_t)(v94 * v79 + 0x40000000) >> 31)
                   + v87
                   + ((unint64_t)(v96 * v83 + 0x40000000) >> 31);
      v99 = (_DWORD *)(a2 + v78);
      *(v99 - 48) = v89;
      *(v99 - 47) = v81;
      *v99 = v82;
      v99[1] = v90;
      v99[48] = v98;
      v99[49] = v79
              - (((unint64_t)(v95 * v80 + 0x40000000) >> 31)
               + ((unint64_t)(v97 * v84 + 0x40000000) >> 31));
      v78 += 8;
    }
    while (v78 != 384);
  }
  return result;
}

