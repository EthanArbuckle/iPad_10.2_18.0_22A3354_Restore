@implementation VNObservation

- (unint64_t)requestRevision
{
  void *v2;
  unint64_t v3;

  -[VNObservation originatingRequestSpecifier](self, "originatingRequestSpecifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "requestRevision");

  return v3;
}

- (VNRequestSpecifier)originatingRequestSpecifier
{
  return self->_originatingRequestSpecifier;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_requestImageBuffersCacheKeys, 0);
  objc_storeStrong((id *)&self->_requestImageBuffers, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_storeStrong((id *)&self->_originatingRequestSpecifier, 0);
}

- (VNObservation)initWithRequestRevision:(unint64_t)a3
{
  void *v4;
  VNObservation *v5;

  objc_msgSend((id)objc_opt_class(), "defaultOriginatingRequestSpecifierForRevision:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    self = -[VNObservation initWithOriginatingRequestSpecifier:](self, "initWithOriginatingRequestSpecifier:", v4);
    v5 = self;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)vn_cloneObject
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;

  v3 = objc_msgSend(objc_alloc((Class)objc_opt_class()), "initWithOriginatingRequestSpecifier:", self->_originatingRequestSpecifier);
  if (v3)
  {
    v4 = -[NSUUID copy](self->_uuid, "copy");
    v5 = *(void **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v4;

    *(float *)(v3 + 16) = self->_confidence;
    v6 = *(_OWORD *)&self->_timeRange.start.value;
    v7 = *(_OWORD *)&self->_timeRange.duration.timescale;
    *(_OWORD *)(v3 + 64) = *(_OWORD *)&self->_timeRange.start.epoch;
    *(_OWORD *)(v3 + 80) = v7;
    *(_OWORD *)(v3 + 48) = v6;
    objc_storeStrong((id *)(v3 + 32), self->_requestImageBuffers);
    objc_storeStrong((id *)(v3 + 40), self->_requestImageBuffersCacheKeys);
  }
  return (id)v3;
}

- (VNObservation)initWithOriginatingRequestSpecifier:(id)a3
{
  id v5;
  VNObservation *v6;
  uint64_t v7;
  NSUUID *uuid;
  uint64_t v9;
  __int128 v10;
  objc_super v12;

  v5 = a3;
  v12.receiver = self;
  v12.super_class = (Class)VNObservation;
  v6 = -[VNObservation init](&v12, sel_init);
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v7 = objc_claimAutoreleasedReturnValue();
    uuid = v6->_uuid;
    v6->_uuid = (NSUUID *)v7;

    objc_storeStrong((id *)&v6->_originatingRequestSpecifier, a3);
    v6->_confidence = 1.0;
    v9 = MEMORY[0x1E0CA2E50];
    v10 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
    *(_OWORD *)&v6->_timeRange.start.value = *MEMORY[0x1E0CA2E50];
    *(_OWORD *)&v6->_timeRange.start.epoch = v10;
    *(_OWORD *)&v6->_timeRange.duration.timescale = *(_OWORD *)(v9 + 32);
  }

  return v6;
}

+ (id)defaultOriginatingRequestSpecifierForRevision:(unint64_t)a3
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  objc_class *v8;
  void *v9;
  void *v10;
  id v11;
  id v13;

  objc_msgSend((id)objc_opt_class(), "defaultOriginatingRequestClassNameForRequestRevision:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0;
  +[VNRequestSpecifier specifierForRequestClassName:revision:error:](VNRequestSpecifier, "specifierForRequestClassName:revision:error:", v4, a3, &v13);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v13;
  if (!a3 || v5)
  {
    v11 = v5;
  }
  else
  {
    v7 = (void *)MEMORY[0x1E0CB3940];
    v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringWithFormat:", CFSTR("%@ could not resolve originating request class of %@: %@"), v9, v4, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[VNError VNAssert:log:](VNError, "VNAssert:log:", 0, v10);

    v11 = 0;
  }

  return v11;
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (id)VNEntityIdentificationModelPrintWithOriginatingRequestSpecifier:(id)a3 error:(id *)a4
{
  id v5;
  void *v6;
  objc_class *v7;
  void *v8;
  void *v9;

  v5 = a3;
  if (a4)
  {
    v6 = (void *)MEMORY[0x1E0CB3940];
    v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("%@ does not provide an entity print that is compatible with a print generated by %@"), v8, v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(3, v9, 0);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

- (VNObservation)observationWithOriginatingRequestSpecifier:(id)a3
{
  id v5;
  VNObservation *v6;

  v5 = a3;
  if (-[VNRequestSpecifier isEqual:](self->_originatingRequestSpecifier, "isEqual:", v5))
  {
    v6 = self;
  }
  else
  {
    -[VNObservation vn_cloneObject](self, "vn_cloneObject");
    v6 = (VNObservation *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)&v6->_originatingRequestSpecifier, a3);
  }

  return v6;
}

- (VNObservation)init
{
  return -[VNObservation initWithRequestRevision:](self, "initWithRequestRevision:", 0);
}

- (VNObservation)initWithCoder:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  NSUUID *v10;
  NSUUID *uuid;
  uint64_t v12;
  __int128 v13;
  VNObservation *v14;
  NSUUID *v15;
  NSUUID *v16;
  float v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  objc_super v22;
  id v23;

  v4 = a3;
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("request"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("requestRevision")))
      v6 = objc_msgSend(v4, "decodeIntegerForKey:", CFSTR("requestRevision"));
    else
      v6 = 1;
    objc_msgSend((id)objc_opt_class(), "defaultOriginatingRequestClassNameForRequestRevision:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v23 = 0;
      +[VNRequestSpecifier specifierForRequestClassName:revision:error:](VNRequestSpecifier, "specifierForRequestClassName:revision:error:", v7, v6, &v23);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v23;
      v9 = v8;
      if (!v5)
      {
        objc_msgSend(v4, "failWithError:", v8);

        v5 = 0;
LABEL_12:
        v14 = 0;
        goto LABEL_18;
      }

    }
    else
    {
      v5 = 0;
    }

  }
  v22.receiver = self;
  v22.super_class = (Class)VNObservation;
  self = -[VNObservation init](&v22, sel_init);
  if (!self)
    goto LABEL_12;
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v10 = (NSUUID *)objc_claimAutoreleasedReturnValue();
  uuid = self->_uuid;
  self->_uuid = v10;

  objc_storeStrong((id *)&self->_originatingRequestSpecifier, v5);
  self->_confidence = 1.0;
  v12 = MEMORY[0x1E0CA2E50];
  v13 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  *(_OWORD *)&self->_timeRange.start.value = *MEMORY[0x1E0CA2E50];
  *(_OWORD *)&self->_timeRange.start.epoch = v13;
  *(_OWORD *)&self->_timeRange.duration.timescale = *(_OWORD *)(v12 + 32);
  if (objc_msgSend(v4, "vn_decodeCodingVersionForKey:", CFSTR("VNObservation")))
    goto LABEL_12;
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("uuid"));
  v15 = (NSUUID *)objc_claimAutoreleasedReturnValue();
  v16 = self->_uuid;
  self->_uuid = v15;

  objc_msgSend(v4, "vn_decodeValidatedConfidenceForKey:", CFSTR("confidence"));
  self->_confidence = v17;
  if (v4)
  {
    objc_msgSend(v4, "vn_decodeTimeRangeForKey:", CFSTR("timeRange"));
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
  }
  *(_OWORD *)&self->_timeRange.start.value = v19;
  *(_OWORD *)&self->_timeRange.start.epoch = v20;
  *(_OWORD *)&self->_timeRange.duration.timescale = v21;
  self = self;
  v14 = self;
LABEL_18:

  return v14;
}

- (void)encodeWithCoder:(id)a3
{
  id v4;
  double v5;
  __int128 v6;
  _OWORD v7[3];

  v4 = a3;
  objc_msgSend(v4, "vn_encodeCodingVersion:forKey:", 0, CFSTR("VNObservation"));
  objc_msgSend(v4, "encodeObject:forKey:", self->_originatingRequestSpecifier, CFSTR("request"));
  objc_msgSend(v4, "encodeObject:forKey:", self->_uuid, CFSTR("uuid"));
  *(float *)&v5 = self->_confidence;
  objc_msgSend(v4, "vn_encodeValidatedConfidence:forKey:", CFSTR("confidence"), v5);
  v6 = *(_OWORD *)&self->_timeRange.start.epoch;
  v7[0] = *(_OWORD *)&self->_timeRange.start.value;
  v7[1] = v6;
  v7[2] = *(_OWORD *)&self->_timeRange.duration.timescale;
  objc_msgSend(v4, "vn_encodeTimeRange:forKey:", v7, CFSTR("timeRange"));

}

- (id)description
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  float v7;
  __int128 v8;
  const __CFAllocator *v9;
  __CFString *v10;
  CMTimeRange range;
  CMTimeRange range2;
  CMTimeRange range1;
  CMTimeRange v15;
  objc_super v16;

  v3 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v16.receiver = self;
  v16.super_class = (Class)VNObservation;
  -[VNObservation description](&v16, sel_description);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[VNObservation uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appendFormat:", CFSTR("%@ %@"), v4, v6);

  if (self->_originatingRequestSpecifier)
    objc_msgSend(v3, "appendFormat:", CFSTR(" %@"), self->_originatingRequestSpecifier);
  -[VNObservation confidence](self, "confidence");
  objc_msgSend(v3, "appendFormat:", CFSTR(" confidence=%f"), v7);
  memset(&v15, 0, sizeof(v15));
  -[VNObservation timeRange](self, "timeRange");
  range1 = v15;
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  *(_OWORD *)&range2.start.value = *MEMORY[0x1E0CA2E50];
  *(_OWORD *)&range2.start.epoch = v8;
  *(_OWORD *)&range2.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  if (!CMTimeRangeEqual(&range1, &range2))
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    range = v15;
    v10 = (__CFString *)CMTimeRangeCopyDescription(v9, &range);
    objc_msgSend(v3, "appendFormat:", CFSTR(" timeRange=%@"), v10);

  }
  return v3;
}

- (unint64_t)hash
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  float confidence;
  uint64_t v7;

  -[VNObservation uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hash");

  v5 = -[VNRequestSpecifier hash](self->_originatingRequestSpecifier, "hash") ^ __ROR8__(v4, 51);
  confidence = self->_confidence;
  v7 = LODWORD(confidence);
  if (confidence == 0.0)
    v7 = 0;
  return self->_timeRange.duration.epoch ^ __ROR8__(self->_timeRange.duration.flags ^ __ROR8__(self->_timeRange.duration.timescale ^ __ROR8__(self->_timeRange.duration.value ^ __ROR8__(self->_timeRange.start.epoch ^ __ROR8__(self->_timeRange.start.flags ^ __ROR8__(self->_timeRange.start.timescale ^ __ROR8__(self->_timeRange.start.value, 51), 51), 51), 51), 51), 51), 51) ^ __ROR8__(v7 ^ __ROR8__(v5, 51), 51);
}

- (BOOL)isEqual:(id)a3
{
  VNObservation *v4;
  VNObservation *v5;
  VNRequestSpecifier *originatingRequestSpecifier;
  void *v7;
  NSUUID *uuid;
  void *v9;
  float confidence;
  float v11;
  BOOL v12;
  __int128 v14;
  CMTimeRange v15;
  CMTimeRange range1;

  v4 = (VNObservation *)a3;
  if (self == v4)
  {
    v12 = 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = v4;
      originatingRequestSpecifier = self->_originatingRequestSpecifier;
      -[VNObservation originatingRequestSpecifier](v5, "originatingRequestSpecifier");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(originatingRequestSpecifier) = -[VNRequestSpecifier isEqual:](originatingRequestSpecifier, "isEqual:", v7);

      if ((originatingRequestSpecifier & 1) != 0
        && (uuid = self->_uuid,
            -[VNObservation uuid](v5, "uuid"),
            v9 = (void *)objc_claimAutoreleasedReturnValue(),
            LOBYTE(uuid) = -[NSUUID isEqual:](uuid, "isEqual:", v9),
            v9,
            (uuid & 1) != 0)
        && (confidence = self->_confidence, -[VNObservation confidence](v5, "confidence"), confidence == v11))
      {
        v14 = *(_OWORD *)&self->_timeRange.start.epoch;
        *(_OWORD *)&range1.start.value = *(_OWORD *)&self->_timeRange.start.value;
        *(_OWORD *)&range1.start.epoch = v14;
        *(_OWORD *)&range1.duration.timescale = *(_OWORD *)&self->_timeRange.duration.timescale;
        if (v5)
          -[VNObservation timeRange](v5, "timeRange");
        else
          memset(&v15, 0, sizeof(v15));
        v12 = CMTimeRangeEqual(&range1, &v15) != 0;
      }
      else
      {
        v12 = 0;
      }

    }
    else
    {
      v12 = 0;
    }
  }

  return v12;
}

- (id)getDataDetectorResults:(id *)a3
{
  void *v4;
  objc_class *v5;
  void *v6;
  void *v7;

  if (a3)
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    v5 = (objc_class *)objc_opt_class();
    NSStringFromClass(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("Data detecor not supported for %@"), v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[VNError errorWithCode:message:](VNError, "errorWithCode:message:", 8, v7);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

- (id)getDataDetectorResultsForString:(id)a3 error:(id *)a4
{
  id v6;
  const void *v7;
  void *v8;
  void *v9;
  const __CFArray *v11;
  CFIndex Count;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  VNDataDetectorResult *v18;
  VNDataDetectorResult *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v25 = 0;
  v7 = (const void *)DDScannerCreate();
  v8 = 0;
  if (v7)
  {
    if (DDScannerScanString())
    {
      v11 = (const __CFArray *)DDScannerCopyResultsWithOptions();
      CFRelease(v7);
      if (v11)
      {
        Count = CFArrayGetCount(v11);
        objc_msgSend(MEMORY[0x1E0D1CE68], "resultsFromCoreResults:", v11);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        CFRelease(v11);
        if (Count < 1)
        {
          v9 = 0;
        }
        else
        {
          v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", Count);
          v23 = 0u;
          v24 = 0u;
          v21 = 0u;
          v22 = 0u;
          v13 = v8;
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
          if (v14)
          {
            v15 = *(_QWORD *)v22;
            do
            {
              for (i = 0; i != v14; ++i)
              {
                if (*(_QWORD *)v22 != v15)
                  objc_enumerationMutation(v13);
                v17 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i);
                v18 = [VNDataDetectorResult alloc];
                v19 = -[VNDataDetectorResult initWithDDScannerResult:observation:](v18, "initWithDDScannerResult:observation:", v17, self, (_QWORD)v21);
                objc_msgSend(v9, "addObject:", v19);

              }
              v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
            }
            while (v14);
          }

          v8 = v13;
        }
        goto LABEL_19;
      }
    }
    else
    {
      CFRelease(v7);
    }
  }
  else if (a4)
  {
    +[VNError errorWithCode:message:underlyingError:](VNError, "errorWithCode:message:underlyingError:", 9, CFSTR("Could not create DataDetector"), v25);
    v9 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_19:

    goto LABEL_20;
  }
  v9 = 0;
LABEL_20:

  return v9;
}

- (id)debugQuickLookObject
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  __CVBuffer *v9;
  __CVBuffer *v10;
  size_t Width;
  size_t Height;
  void *v13;
  void *v14;
  CGImage *v15;

  -[VNObservation requestImageBuffersCacheKeys](self, "requestImageBuffersCacheKeys");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v3, "count"))
  {
    v5 = 0;
LABEL_8:

    return v5;
  }
  -[VNObservation requestImageBuffers](self, "requestImageBuffers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "count");

  if (v5)
  {
    -[VNObservation requestImageBuffers](self, "requestImageBuffers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "pointerAtIndex:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    -[VNObservation requestImageBuffersCacheKeys](self, "requestImageBuffersCacheKeys");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "pointerAtIndex:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (__CVBuffer *)objc_msgSend(v3, "cachedPixelBufferRepresentationForKey:", v8);
    v10 = v9;
    if (v9)
    {
      Width = CVPixelBufferGetWidth(v9);
      Height = CVPixelBufferGetHeight(v10);
      objc_msgSend(MEMORY[0x1E0C9DDC8], "imageWithCVPixelBuffer:", v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      CVPixelBufferRelease(v10);
      objc_msgSend(MEMORY[0x1E0C9DD90], "contextWithOptions:", 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (CGImage *)objc_msgSend(v14, "createCGImage:fromRect:", v13, 0.0, 0.0, (double)Width, (double)Height);
      VNDebugImageFromCGImage((uint64_t)v15);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      CGImageRelease(v15);

    }
    else
    {
      v5 = 0;
    }

    goto LABEL_8;
  }
  return v5;
}

- (void)setUUID:(id)a3
{
  objc_storeStrong((id *)&self->_uuid, a3);
}

- (VNConfidence)confidence
{
  return self->_confidence;
}

- (void)setConfidence:(float)a3
{
  self->_confidence = a3;
}

- (CMTimeRange)timeRange
{
  __int128 v3;

  v3 = *(_OWORD *)&self[1].start.epoch;
  *(_OWORD *)&retstr->start.value = *(_OWORD *)&self[1].start.value;
  *(_OWORD *)&retstr->start.epoch = v3;
  *(_OWORD *)&retstr->duration.timescale = *(_OWORD *)&self[1].duration.timescale;
  return self;
}

- (void)setTimeRange:(id *)a3
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)&a3->var0.var0;
  v4 = *(_OWORD *)&a3->var1.var1;
  *(_OWORD *)&self->_timeRange.start.epoch = *(_OWORD *)&a3->var0.var3;
  *(_OWORD *)&self->_timeRange.duration.timescale = v4;
  *(_OWORD *)&self->_timeRange.start.value = v3;
}

- (NSPointerArray)requestImageBuffers
{
  return self->_requestImageBuffers;
}

- (void)setRequestImageBuffers:(id)a3
{
  objc_storeStrong((id *)&self->_requestImageBuffers, a3);
}

- (NSPointerArray)requestImageBuffersCacheKeys
{
  return self->_requestImageBuffersCacheKeys;
}

- (void)setRequestImageBuffersCacheKeys:(id)a3
{
  objc_storeStrong((id *)&self->_requestImageBuffersCacheKeys, a3);
}

+ (id)defaultOriginatingRequestClassNameForRequestRevision:(unint64_t)a3
{
  return 0;
}

+ (BOOL)supportsSecureCoding
{
  return 1;
}

- (id)VNCoreMLTransformerSceneprintsAndReturnError:(id *)a3
{
  id v4;
  objc_class *v5;
  void *v6;
  void *v7;

  if (a3)
  {
    v4 = objc_alloc(MEMORY[0x1E0CB3940]);
    v5 = (objc_class *)objc_opt_class();
    NSStringFromClass(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v4, "initWithFormat:", CFSTR("%@ cannot provide sceneprints"), v6);

    +[VNError errorForDataUnavailableWithLocalizedDescription:](VNError, "errorForDataUnavailableWithLocalizedDescription:", v7);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

- (id)VNCoreMLTransformerDetectionprintAndReturnError:(id *)a3
{
  id v4;
  objc_class *v5;
  void *v6;
  void *v7;

  if (a3)
  {
    v4 = objc_alloc(MEMORY[0x1E0CB3940]);
    v5 = (objc_class *)objc_opt_class();
    NSStringFromClass(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v4, "initWithFormat:", CFSTR("%@ cannot provide a detectionprint"), v6);

    +[VNError errorForDataUnavailableWithLocalizedDescription:](VNError, "errorForDataUnavailableWithLocalizedDescription:", v7);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

@end
