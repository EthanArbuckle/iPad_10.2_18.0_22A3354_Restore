uint64_t sub_1A1303778(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FE398);
  v37 = a2;
  v6 = sub_1A15A91C8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1A15A93E4();
    sub_1A15A8BC8();
    result = sub_1A15A9420();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_1A1303A80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEBC0);
  v2 = *v0;
  v3 = sub_1A15A91BC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1A1303C28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FE398);
  v2 = *v0;
  v3 = sub_1A15A91BC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v20) = (_DWORD)v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1A1303DD4(unint64_t a1)
{
  uint64_t *v1;

  sub_1A1302984(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_1A1303DF4()
{
  unint64_t result;

  result = qword_1EE5FEB48;
  if (!qword_1EE5FEB48)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GeneratePersonSegmentationRequest.Revision, &type metadata for GeneratePersonSegmentationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FEB48);
  }
  return result;
}

unint64_t sub_1A1303E3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE5FEB50;
  if (!qword_1EE5FEB50)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FEB58);
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE5FEB50);
  }
  return result;
}

unint64_t sub_1A1303E8C()
{
  unint64_t result;

  result = qword_1EE5FEB60[0];
  if (!qword_1EE5FEB60[0])
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GeneratePersonSegmentationRequest.QualityLevel, &type metadata for GeneratePersonSegmentationRequest.QualityLevel);
    atomic_store(result, qword_1EE5FEB60);
  }
  return result;
}

uint64_t sub_1A1303ED0(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FD9E8, type metadata accessor for GeneratePersonSegmentationRequest, (uint64_t)&protocol conformance descriptor for GeneratePersonSegmentationRequest);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A1303F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A1303F8C(a1, a2, a3, &qword_1EE5FDB48, (uint64_t)&protocol conformance descriptor for GeneratePersonSegmentationRequest, &qword_1EE5FEB28, (uint64_t)&protocol conformance descriptor for GeneratePersonSegmentationRequest);
}

uint64_t sub_1A1303F30()
{
  return sub_1A12857D8(&qword_1EE5FEB98, type metadata accessor for GeneratePersonSegmentationRequest, (uint64_t)&protocol conformance descriptor for GeneratePersonSegmentationRequest);
}

_UNKNOWN **sub_1A1303F5C()
{
  return &off_1E4536F80;
}

uint64_t sub_1A1303F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A1303F8C(a1, a2, a3, &qword_1EE5FEAC0, (uint64_t)&unk_1A15CD204, &qword_1EE5FEBA0, (uint64_t)&protocol conformance descriptor for GeneratePersonSegmentationRequest);
}

uint64_t sub_1A1303F8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12857D8(a4, type metadata accessor for GeneratePersonSegmentationRequest, a5);
  result = sub_1A12857D8(a6, type metadata accessor for GeneratePersonSegmentationRequest, a7);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A1303FEC()
{
  unint64_t result;

  result = qword_1EE5FEBA8;
  if (!qword_1EE5FEBA8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GeneratePersonSegmentationRequest.Revision, &type metadata for GeneratePersonSegmentationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FEBA8);
  }
  return result;
}

uint64_t sub_1A1304030()
{
  return sub_1A12857D8(&qword_1EE5FEBB0, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&unk_1A15CD9A8);
}

uint64_t sub_1A130405C(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FEAC0, type metadata accessor for GeneratePersonSegmentationRequest, (uint64_t)&unk_1A15CD204);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A1304098()
{
  return type metadata accessor for GeneratePersonSegmentationRequest(0);
}

uint64_t sub_1A13040A0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for GeneratePersonSegmentationRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GeneratePersonSegmentationRequest.__allocating_init(_:frameAnalysisSpacing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v5 + 120))(a1, a2, a3, a4, a5 & 1);
}

ValueMetadata *type metadata accessor for GeneratePersonSegmentationRequest.Revision()
{
  return &type metadata for GeneratePersonSegmentationRequest.Revision;
}

ValueMetadata *type metadata accessor for GeneratePersonSegmentationRequest.QualityLevel()
{
  return &type metadata for GeneratePersonSegmentationRequest.QualityLevel;
}

uint64_t initializeWithCopy for GeneratePersonSegmentationRequest.Configuration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeneratePersonSegmentationRequest.Configuration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return a1;
}

uint64_t assignWithTake for GeneratePersonSegmentationRequest.Configuration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeneratePersonSegmentationRequest.Configuration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeneratePersonSegmentationRequest.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeneratePersonSegmentationRequest.Configuration()
{
  return &type metadata for GeneratePersonSegmentationRequest.Configuration;
}

uint64_t sub_1A1304370()
{
  return type metadata accessor for GeneratePersonSegmentationRequest.State(0);
}

void sub_1A1304378()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A12D590C(319, &qword_1EE5FEBB8, (void (*)(uint64_t))type metadata accessor for PixelBufferObservation);
  if (v0 <= 0x3F)
  {
    sub_1A12D590C(319, (unint64_t *)&qword_1EE5FD0B8, (void (*)(uint64_t))type metadata accessor for VisionResult);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t _s6Vision33GeneratePersonSegmentationRequestC12QualityLevelOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A1304480 + 4 * byte_1A15CCEF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A13044B4 + 4 * byte_1A15CCEF0[v4]))();
}

uint64_t sub_1A13044B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13044BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A13044C4);
  return result;
}

uint64_t sub_1A13044D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A13044D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A13044DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13044E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GeneratePersonSegmentationRequest.QualityLevel.CodingKeys()
{
  return &type metadata for GeneratePersonSegmentationRequest.QualityLevel.CodingKeys;
}

ValueMetadata *type metadata accessor for GeneratePersonSegmentationRequest.QualityLevel.AccurateCodingKeys()
{
  return &type metadata for GeneratePersonSegmentationRequest.QualityLevel.AccurateCodingKeys;
}

ValueMetadata *type metadata accessor for GeneratePersonSegmentationRequest.QualityLevel.BalancedCodingKeys()
{
  return &type metadata for GeneratePersonSegmentationRequest.QualityLevel.BalancedCodingKeys;
}

ValueMetadata *type metadata accessor for GeneratePersonSegmentationRequest.QualityLevel.FastCodingKeys()
{
  return &type metadata for GeneratePersonSegmentationRequest.QualityLevel.FastCodingKeys;
}

uint64_t _s6Vision33GeneratePersonSegmentationRequestC8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1304570 + 4 * byte_1A15CCEFA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1304590 + 4 * byte_1A15CCEFF[v4]))();
}

_BYTE *sub_1A1304570(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1304590(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1304598(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A13045A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A13045A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A13045B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GeneratePersonSegmentationRequest.Revision.CodingKeys()
{
  return &type metadata for GeneratePersonSegmentationRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for GeneratePersonSegmentationRequest.Revision.Revision1CodingKeys()
{
  return &type metadata for GeneratePersonSegmentationRequest.Revision.Revision1CodingKeys;
}

unint64_t sub_1A13045E0()
{
  unint64_t result;

  result = qword_1EE617AC0[0];
  if (!qword_1EE617AC0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD4C4, &type metadata for GeneratePersonSegmentationRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE617AC0);
  }
  return result;
}

unint64_t sub_1A1304628()
{
  unint64_t result;

  result = qword_1EE617FD0[0];
  if (!qword_1EE617FD0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD66C, &type metadata for GeneratePersonSegmentationRequest.QualityLevel.CodingKeys);
    atomic_store(result, qword_1EE617FD0);
  }
  return result;
}

unint64_t sub_1A1304670()
{
  unint64_t result;

  result = qword_1EE6180E0;
  if (!qword_1EE6180E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD58C, &type metadata for GeneratePersonSegmentationRequest.QualityLevel.AccurateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6180E0);
  }
  return result;
}

unint64_t sub_1A13046B8()
{
  unint64_t result;

  result = qword_1EE6180E8[0];
  if (!qword_1EE6180E8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD5B4, &type metadata for GeneratePersonSegmentationRequest.QualityLevel.AccurateCodingKeys);
    atomic_store(result, qword_1EE6180E8);
  }
  return result;
}

unint64_t sub_1A1304700()
{
  unint64_t result;

  result = qword_1EE618170;
  if (!qword_1EE618170)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD53C, &type metadata for GeneratePersonSegmentationRequest.QualityLevel.BalancedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618170);
  }
  return result;
}

unint64_t sub_1A1304748()
{
  unint64_t result;

  result = qword_1EE618178;
  if (!qword_1EE618178)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD564, &type metadata for GeneratePersonSegmentationRequest.QualityLevel.BalancedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618178);
  }
  return result;
}

unint64_t sub_1A1304790()
{
  unint64_t result;

  result = qword_1EE618200;
  if (!qword_1EE618200)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD4EC, &type metadata for GeneratePersonSegmentationRequest.QualityLevel.FastCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618200);
  }
  return result;
}

unint64_t sub_1A13047D8()
{
  unint64_t result;

  result = qword_1EE618208[0];
  if (!qword_1EE618208[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD514, &type metadata for GeneratePersonSegmentationRequest.QualityLevel.FastCodingKeys);
    atomic_store(result, qword_1EE618208);
  }
  return result;
}

unint64_t sub_1A1304820()
{
  unint64_t result;

  result = qword_1EE618290;
  if (!qword_1EE618290)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD5DC, &type metadata for GeneratePersonSegmentationRequest.QualityLevel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618290);
  }
  return result;
}

unint64_t sub_1A1304868()
{
  unint64_t result;

  result = qword_1EE618298[0];
  if (!qword_1EE618298[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD604, &type metadata for GeneratePersonSegmentationRequest.QualityLevel.CodingKeys);
    atomic_store(result, qword_1EE618298);
  }
  return result;
}

unint64_t sub_1A13048B0()
{
  unint64_t result;

  result = qword_1EE618320;
  if (!qword_1EE618320)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD3E4, &type metadata for GeneratePersonSegmentationRequest.Revision.Revision1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618320);
  }
  return result;
}

unint64_t sub_1A13048F8()
{
  unint64_t result;

  result = qword_1EE618328[0];
  if (!qword_1EE618328[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD40C, &type metadata for GeneratePersonSegmentationRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE618328);
  }
  return result;
}

unint64_t sub_1A1304940()
{
  unint64_t result;

  result = qword_1EE6183B0;
  if (!qword_1EE6183B0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD434, &type metadata for GeneratePersonSegmentationRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6183B0);
  }
  return result;
}

unint64_t sub_1A1304988()
{
  unint64_t result;

  result = qword_1EE6183B8[0];
  if (!qword_1EE6183B8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CD45C, &type metadata for GeneratePersonSegmentationRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE6183B8);
  }
  return result;
}

uint64_t sub_1A13049CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574617275636361 && a2 == 0xE800000000000000;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465636E616C6162 && a2 == 0xE800000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1953718630 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

float sub_1A1304B10(uint64_t a1)
{
  uint64_t v1;
  float result;

  result = *(float *)(v1 + 16);
  *(float *)(a1 + 52) = result;
  return result;
}

uint64_t sub_1A1304B1C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 49) = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t sub_1A1304B28(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 48) = *(_BYTE *)(v1 + 16);
  return result;
}

void sub_1A1304B34(unint64_t a1)
{
  sub_1A1303DD4(a1);
}

double PixelBufferObservation.size.getter()
{
  uint64_t v0;
  __CVBuffer *v1;
  int64_t Width;

  v1 = *(__CVBuffer **)(v0 + *(int *)(type metadata accessor for PixelBufferObservation() + 32));
  Width = CVPixelBufferGetWidth(v1);
  CVPixelBufferGetHeight(v1);
  return (double)Width;
}

uint64_t type metadata accessor for PixelBufferObservation()
{
  uint64_t result;

  result = qword_1EE618840;
  if (!qword_1EE618840)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t PixelBufferObservation.pixelFormat.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for PixelBufferObservation();
  return CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v0 + *(int *)(v1 + 32)));
}

id PixelBufferObservation.cgImage.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DDC8]), sel_initWithCVImageBuffer_, *(_QWORD *)(v0 + *(int *)(type metadata accessor for PixelBufferObservation() + 32)));
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DD90]), sel_init);
  objc_msgSend(v1, sel_extent);
  v3 = objc_msgSend(v2, sel_createCGImage_fromRect_, v1);

  if (!v3)
  {
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v4 = 0xD00000000000001DLL;
    *(_QWORD *)(v4 + 8) = 0x80000001A15FD390;
    *(_BYTE *)(v4 + 16) = 8;
    swift_willThrow();
  }

  return v3;
}

uint64_t PixelBufferObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

float PixelBufferObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PixelBufferObservation() + 20));
}

__n128 PixelBufferObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for PixelBufferObservation() + 24);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t PixelBufferObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  __CVBuffer *v2;
  uint64_t v3;

  sub_1A15A9090();
  sub_1A15A8BEC();
  v1 = type metadata accessor for PixelBufferObservation();
  v2 = *(__CVBuffer **)(v0 + *(int *)(v1 + 32));
  CVPixelBufferGetWidth(v2);
  CVPixelBufferGetHeight(v2);
  sub_1A15A8E2C();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  CVPixelBufferGetWidth(v2);
  CVPixelBufferGetHeight(v2);
  sub_1A15A8E2C();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  CVPixelBufferGetPixelFormatType(v2);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v3 = sub_1A12857D8(qword_1EE5FD380, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  sub_1A132D4B4(v1, (uint64_t)&off_1E45311A0, v3);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

uint64_t PixelBufferObservation.withUnsafePointer<A>(_:)(void (*a1)(void))
{
  uint64_t v1;
  __CVBuffer *v3;
  uint64_t result;

  v3 = *(__CVBuffer **)(v1 + *(int *)(type metadata accessor for PixelBufferObservation() + 32));
  CVPixelBufferLockBaseAddress(v3, 1uLL);
  if (CVPixelBufferGetBaseAddress(v3))
  {
    a1();
    return CVPixelBufferUnlockBaseAddress(v3, 1uLL);
  }
  else
  {
    result = sub_1A15A91A4();
    __break(1u);
  }
  return result;
}

Swift::Float __swiftcall PixelBufferObservation.pixel(at:)(Vision::NormalizedPoint at)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __CVBuffer *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  __CVBuffer *v16;
  int64_t Width;
  unint64_t v18;
  CGPoint v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  __CVBuffer *v24;
  int64_t v25;
  double v26;
  __CVBuffer *v27;
  double Height;
  int64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  OSType PixelFormatType;
  uint64_t v34;
  Swift::Float result;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE v44[14];
  char v45;
  char v46;
  __int128 v47;

  v3 = v2;
  v4 = v1;
  v5 = type metadata accessor for PixelBufferObservation();
  MEMORY[0x1E0C80A78](v5);
  v7 = (__CVBuffer *)&v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v10 = &v44[-v9];
  MEMORY[0x1E0C80A78](v11);
  v13 = &v44[-v12];
  v47 = *v4;
  v15 = *(int *)(v14 + 32);
  v16 = *(__CVBuffer **)(v3 + v15);
  Width = CVPixelBufferGetWidth(v16);
  *(double *)&v18 = (double)(uint64_t)CVPixelBufferGetHeight(v16);
  sub_1A128B1FC(&v46);
  v45 = v46;
  v19 = NormalizedPoint.toImageCoordinates(_:origin:)((CGSize)__PAIR128__(v18, (double)Width), (Vision::CoordinateOrigin)&v45);
  v20 = round(v19.x);
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v21 = round(v19.y);
  if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v22 = (uint64_t)v20;
  sub_1A12AC6B4(v3, (uint64_t)v13);
  sub_1A12AC6B4((uint64_t)v13, (uint64_t)v10);
  if (v22 < 0)
    goto LABEL_45;
  v23 = (uint64_t)v21;
  if ((uint64_t)v21 < 0)
    goto LABEL_45;
  v24 = *(__CVBuffer **)&v10[*(int *)(v5 + 32)];
  v25 = CVPixelBufferGetWidth(v24);
  CVPixelBufferGetHeight(v24);
  v26 = (double)v25;
  sub_1A13054CC((uint64_t)v10);
  if ((~COERCE__INT64((double)v25) & 0x7FF0000000000000) == 0)
    goto LABEL_34;
  if (v26 <= -9.22337204e18)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  sub_1A12AC6B4((uint64_t)v13, (uint64_t)v7);
  if (v22 >= (uint64_t)v26)
  {
LABEL_46:
    sub_1A13054CC((uint64_t)v7);
    sub_1A13054CC((uint64_t)v13);
    goto LABEL_47;
  }
  v27 = *(__CVBuffer **)((char *)v7 + *(int *)(v5 + 32));
  CVPixelBufferGetWidth(v27);
  Height = (double)(uint64_t)CVPixelBufferGetHeight(v27);
  sub_1A13054CC((uint64_t)v7);
  sub_1A13054CC((uint64_t)v13);
  if ((~*(_QWORD *)&Height & 0x7FF0000000000000) == 0)
    goto LABEL_37;
  if (Height <= -9.22337204e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (Height >= 9.22337204e18)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v23 >= (uint64_t)Height)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v7 = *(__CVBuffer **)(v3 + v15);
  v29 = CVPixelBufferGetWidth(v7);
  CVPixelBufferGetHeight(v7);
  v30 = (double)v29;
  if ((~COERCE__INT64((double)v29) & 0x7FF0000000000000) == 0)
    goto LABEL_40;
  if (v30 <= -9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v30 >= 9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v31 = v23 * (uint64_t)v30;
  if ((unsigned __int128)(v23 * (__int128)(uint64_t)v30) >> 64 != v31 >> 63)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v32 = v22 + v31;
  if (__OFADD__(v22, v31))
  {
LABEL_44:
    __break(1u);
LABEL_45:
    sub_1A13054CC((uint64_t)v10);
    sub_1A12AC6B4((uint64_t)v13, (uint64_t)v7);
    goto LABEL_46;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(v7);
  switch(PixelFormatType)
  {
    case 0x4C303038u:
      v36 = sub_1A12857D8(&qword_1EE5FD8B8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&unk_1A15CD89C);
      sub_1A133D15C(v32, v5, MEMORY[0x1E0DEDE70], v36, (uint64_t)&v47);
      LOBYTE(v37) = v47;
      return (float)v37;
    case 0x4C303066u:
      v34 = sub_1A12857D8(&qword_1EE5FD8B8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&unk_1A15CD89C);
      sub_1A133D15C(v32, v5, MEMORY[0x1E0DEB188], v34, (uint64_t)&v47);
      return *(float *)&v47;
    case 0x4C303068u:
      v38 = sub_1A12857D8(&qword_1EE5FD8B8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&unk_1A15CD89C);
      sub_1A133D15C(v32, v5, MEMORY[0x1E0DEE290], v38, (uint64_t)&v47);
      _H0 = v47;
      __asm { FCVT            S0, H0 }
      return result;
  }
LABEL_48:
  sub_1A15A91A4();
  __break(1u);
  return result;
}

uint64_t sub_1A13054CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PixelBufferObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PixelBufferObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PixelBufferObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t sub_1A130553C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  char v11;
  int *v12;
  uint64_t v13;
  uint64_t result;

  v11 = *a3;
  v12 = (int *)type metadata accessor for PixelBufferObservation();
  *(_QWORD *)(a5 + v12[8]) = a4;
  v13 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a5, a1, v13);
  *(float *)(a5 + v12[5]) = a6;
  result = sub_1A128465C(a2, a5 + v12[6]);
  *(_BYTE *)(a5 + v12[7]) = v11;
  return result;
}

uint64_t PixelBufferObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for PixelBufferObservation();
  sub_1A12857D8(&qword_1EE5FEBD8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

id sub_1A1305644(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(v1 + *(int *)(a1 + 32));
}

double sub_1A1305650(uint64_t a1)
{
  uint64_t v1;
  __CVBuffer *v2;
  int64_t Width;

  v2 = *(__CVBuffer **)(v1 + *(int *)(a1 + 32));
  Width = CVPixelBufferGetWidth(v2);
  CVPixelBufferGetHeight(v2);
  return (double)Width;
}

uint64_t sub_1A130568C(uint64_t a1)
{
  uint64_t v1;

  return CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v1 + *(int *)(a1 + 32)));
}

uint64_t sub_1A1305698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, uint64_t a6@<X8>, float a7@<S0>)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v12 = *a3;
  *(_QWORD *)(a6 + a5[8]) = a4;
  v13 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a6, a1, v13);
  v14 = a5[6];
  *(float *)(a6 + a5[5]) = a7;
  result = sub_1A128465C(a2, a6 + v14);
  *(_BYTE *)(a6 + a5[7]) = v12;
  return result;
}

uint64_t sub_1A1305724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(qword_1EE5FD380, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

void *sub_1A1305778@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = sub_1A12857D8(&qword_1EE5FD8B8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&unk_1A15CD89C);
  return sub_1A133D5B4(a1, a2, v6, a3);
}

void sub_1A13057DC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1A12857D8(&qword_1EE5FD8B8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&unk_1A15CD89C);
  sub_1A133D274(a1, a2, v4);
}

uint64_t sub_1A130583C@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v7;
  id v8;
  int v9;
  int v10;
  id v11;
  int *v12;
  uint64_t result;

  v7 = *a2;
  v8 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v10 = v9;
  v11 = objc_msgSend(a1, sel_pixelBuffer);

  v12 = (int *)type metadata accessor for PixelBufferObservation();
  *(_QWORD *)(a4 + v12[8]) = v11;
  *(_DWORD *)(a4 + v12[5]) = v10;
  result = sub_1A128465C(a3, a4 + v12[6]);
  *(_BYTE *)(a4 + v12[7]) = v7;
  return result;
}

uint64_t PixelBufferObservation.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  CVPixelBufferRef v5;
  id v6;
  int v7;
  int v8;
  int *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = objc_msgSend(a1, sel_pixelBuffer);
  v5 = sub_1A12A4B70();

  v6 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v8 = v7;
  objc_msgSend(a1, sel_timeRange);

  v9 = (int *)type metadata accessor for PixelBufferObservation();
  *(_QWORD *)(a2 + v9[8]) = v5;
  *(_DWORD *)(a2 + v9[5]) = v8;
  v10 = a2 + v9[6];
  *(_OWORD *)v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  *(_QWORD *)(v10 + 32) = v14;
  *(_QWORD *)(v10 + 40) = v15;
  *(_BYTE *)(v10 + 48) = 0;
  *(_BYTE *)(a2 + v9[7]) = -4;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v9 - 1) + 56))(a2, 0, 1, v9);
}

uint64_t sub_1A1305A64@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, int *a4@<X4>, uint64_t a5@<X8>)
{
  char v9;
  id v10;
  int v11;
  int v12;
  id v13;
  uint64_t v14;
  uint64_t result;

  v9 = *a2;
  v10 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v12 = v11;
  v13 = objc_msgSend(a1, sel_pixelBuffer);

  *(_QWORD *)(a5 + a4[8]) = v13;
  v14 = a4[6];
  *(_DWORD *)(a5 + a4[5]) = v12;
  result = sub_1A128465C(a3, a5 + v14);
  *(_BYTE *)(a5 + a4[7]) = v9;
  return result;
}

id _s6Vision22PixelBufferObservationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _BYTE *v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t, __n128);
  void (*v14)(_BYTE *, uint64_t);
  int *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_1A15A88C8();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = &v33[-v11];
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16);
  v13(&v33[-v11], a1, v4, v10);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v13)(v8, a2, v4);
  sub_1A12857D8(&qword_1EE5FEBF0, v5, MEMORY[0x1E0CB09D0]);
  LOBYTE(v5) = sub_1A15A8B80();
  v14 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v14(v8, v4);
  v14(v12, v4);
  if ((v5 & 1) == 0)
    return 0;
  v15 = (int *)type metadata accessor for PixelBufferObservation();
  v16 = v15[6];
  v17 = (uint64_t *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 48);
  v19 = (uint64_t *)(a2 + v16);
  if ((v18 & 1) != 0)
  {
    if (!*((_BYTE *)v19 + 48))
      return 0;
  }
  else
  {
    if ((v19[6] & 1) != 0)
      return 0;
    v20 = *v17;
    v21 = v17[1];
    v22 = *((_OWORD *)v17 + 1);
    v23 = v17[4];
    v24 = *v19;
    v25 = v19[1];
    v26 = *((_OWORD *)v19 + 1);
    v28 = v19[4];
    v27 = v19[5];
    v38 = v17[5];
    v39 = v24;
    v40 = v25;
    v41 = v26;
    v42 = v28;
    v43 = v27;
    v34 = v20;
    v35 = v21;
    v36 = v22;
    v37 = v23;
    if ((sub_1A15A8EC8() & 1) == 0)
      return 0;
  }
  if (*(float *)(a1 + v15[5]) == *(float *)(a2 + v15[5]))
  {
    v29 = v15[7];
    v30 = *(unsigned __int8 *)(a1 + v29);
    v31 = *(unsigned __int8 *)(a2 + v29);
    if (v30 <= 0xFB)
    {
      v33[15] = v30;
      if (v31 > 0xFB)
        return 0;
      v33[14] = v31;
      sub_1A12862A0();
      if ((sub_1A15A8B80() & 1) == 0)
        return 0;
      return objc_msgSend((id)objc_opt_self(), sel_isCVPixelBuffer_equalToCVPixelBuffer_, *(_QWORD *)(a1 + v15[8]), *(_QWORD *)(a2 + v15[8]));
    }
    if (v31 > 0xFB)
      return objc_msgSend((id)objc_opt_self(), sel_isCVPixelBuffer_equalToCVPixelBuffer_, *(_QWORD *)(a1 + v15[8]), *(_QWORD *)(a2 + v15[8]));
  }
  return 0;
}

uint64_t sub_1A1305D54(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE5FD8A8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  a1[2] = sub_1A12857D8(&qword_1EE5FEBE0, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  a1[3] = sub_1A12857D8(&qword_1EE5FEBE8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  result = sub_1A12857D8(&qword_1EE5FEBD8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A1305DE8(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(qword_1EE5FD380, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A1305E24()
{
  return sub_1A12857D8(&qword_1EE5FDD00, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
}

uint64_t sub_1A1305E50(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(qword_1EE5FD380, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ContoursObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A15A88C8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v11;
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    v9[48] = v10[48];
    v12 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v13 = *(void **)((char *)a2 + v12);
    *(_QWORD *)((char *)a1 + v12) = v13;
    v14 = v13;
  }
  return a1;
}

void destroy for ContoursObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for ContoursObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v12 = *(void **)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v13 = v12;
  return a1;
}

uint64_t assignWithCopy for ContoursObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  v6 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 48);
  v12 = *(_OWORD *)(v9 + 16);
  v11 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  *(_BYTE *)(v8 + 48) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v13 = a3[8];
  v14 = *(void **)(a2 + v13);
  v15 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  v16 = v14;

  return a1;
}

uint64_t initializeWithTake for AnimalBodyPoseObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v6 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for ContoursObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *v12;

  v6 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v12 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);

  return a1;
}

uint64_t getEnumTagSinglePayload for PixelBufferObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A13061FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1A15A88C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PixelBufferObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A1306284(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A15A88C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_1A13062FC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t SaliencyImageObservation.salientObjects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SaliencyImageObservation.heatMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SaliencyImageObservation();
  return sub_1A1294AF8(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for PixelBufferObservation);
}

uint64_t type metadata accessor for SaliencyImageObservation()
{
  uint64_t result;

  result = qword_1EE618BE0;
  if (!qword_1EE618BE0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SaliencyImageObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SaliencyImageObservation() + 24);
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

float SaliencyImageObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for SaliencyImageObservation() + 28));
}

__n128 SaliencyImageObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for SaliencyImageObservation() + 32);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t SaliencyImageObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A15A9090();
  sub_1A15A8BEC();
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v0 = type metadata accessor for SaliencyImageObservation();
  type metadata accessor for PixelBufferObservation();
  sub_1A12857D8(&qword_1EE5FD8A8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v1 = sub_1A12857D8(&qword_1EE5FEBF8, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
  sub_1A132D4B4(v0, (uint64_t)&off_1E4533160, v1);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

uint64_t SaliencyImageObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SaliencyImageObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t SaliencyImageObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for SaliencyImageObservation();
  sub_1A12857D8(&qword_1EE5FEC00, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A13066F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE5FEBF8, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

uint64_t sub_1A1306750()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x70614D74616568;
  if (*v0 != 1)
    v1 = 0x4F746E65696C6173;
  if (*v0)
    return v1;
  else
    return 0x746176726573626FLL;
}

uint64_t sub_1A13067C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A13077F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A13067E4()
{
  sub_1A13077B4();
  return sub_1A15A9474();
}

uint64_t sub_1A130680C()
{
  sub_1A13077B4();
  return sub_1A15A9480();
}

uint64_t SaliencyImageObservation.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v21 = *(_QWORD *)(v5 - 8);
  v22 = v5;
  MEMORY[0x1E0C80A78](v5);
  v20 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC08);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13077B4();
  sub_1A15A9468();
  v11 = type metadata accessor for SaliencyImageObservation();
  v12 = v3;
  v26 = 1;
  type metadata accessor for PixelBufferObservation();
  sub_1A12857D8(&qword_1EE5FEBE8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  sub_1A15A92F4();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = v11;
  v19 = v8;
  v14 = (uint64_t)v20;
  v15 = v21;
  v16 = v22;
  v23 = *v12;
  v25 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDAA0);
  sub_1A12F4F54(&qword_1EE5FE720, &qword_1EE5FD360, (uint64_t)&protocol conformance descriptor for RectangleObservation, MEMORY[0x1E0DEAF10]);
  sub_1A15A92F4();
  v24 = 0;
  sub_1A12855AC();
  sub_1A15A92AC();
  v17 = sub_1A12857D8(&qword_1EE5FEBF8, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
  sub_1A12E2C64(v14, v18, (uint64_t)&off_1E4533160, v17);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v10, v7);
}

uint64_t SaliencyImageObservation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  _BYTE v39[52];
  uint64_t v40;

  v28 = a2;
  v3 = sub_1A15A88C8();
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  MEMORY[0x1E0C80A78](v3);
  v30 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for PixelBufferObservation();
  MEMORY[0x1E0C80A78](v32);
  v36 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC10);
  v8 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for SaliencyImageObservation();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13077B4();
  v14 = (uint64_t)v37;
  sub_1A15A945C();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v8;
  v27 = v6;
  v37 = a1;
  v17 = v33;
  v16 = v34;
  LOBYTE(v40) = 1;
  sub_1A12857D8(&qword_1EE5FEBE0, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  v18 = v35;
  sub_1A15A9264();
  v19 = v10;
  v20 = v18;
  v21 = (uint64_t)v19;
  sub_1A12AB0A4(v36, (uint64_t)&v13[v11[5]], (uint64_t (*)(_QWORD))type metadata accessor for PixelBufferObservation);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDAA0);
  v38 = 2;
  sub_1A12F4F54(&qword_1EE5FE740, &qword_1EE5FD358, (uint64_t)&protocol conformance descriptor for RectangleObservation, MEMORY[0x1E0DEAF40]);
  sub_1A15A9264();
  *(_QWORD *)v13 = v40;
  LOBYTE(v40) = 0;
  sub_1A12855AC();
  sub_1A15A9204();
  v36 = v21;
  LOBYTE(v40) = 0;
  sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v22 = v30;
  sub_1A15A9264();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v13[v11[6]], v22, v16);
  LOBYTE(v40) = 1;
  sub_1A15A924C();
  *(_DWORD *)&v13[v11[7]] = v23;
  v38 = 3;
  sub_1A1285654();
  sub_1A15A9228();
  v25 = v27;
  v24 = v28;
  v13[v11[9]] = v40;
  sub_1A12E32A4((uint64_t)v39);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v31);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v36, v20);
  sub_1A128465C((uint64_t)v39, (uint64_t)&v13[v11[8]]);
  sub_1A1294AF8((uint64_t)v13, v24, (uint64_t (*)(_QWORD))type metadata accessor for SaliencyImageObservation);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  return sub_1A1294B7C((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SaliencyImageObservation);
}

uint64_t sub_1A130701C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SaliencyImageObservation.init(from:)(a1, a2);
}

uint64_t sub_1A1307030(_QWORD *a1)
{
  return SaliencyImageObservation.encode(to:)(a1);
}

size_t sub_1A1307044@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  size_t result;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  int *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  int v35;
  int v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v40 = a4;
  v9 = type metadata accessor for RectangleObservation();
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)&v11 = MEMORY[0x1E0C80A78](v9).n128_u64[0];
  v13 = (uint64_t *)((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = *a2;
  v14 = *a3;
  v15 = a3[1];
  v16 = a3[2];
  v17 = a3[3];
  v18 = objc_msgSend(a1, sel_salientObjects, v11);
  v19 = MEMORY[0x1E0DEE9D8];
  if (!v18)
    goto LABEL_15;
  v20 = v18;
  sub_1A12F50BC();
  v21 = sub_1A15A8C40();

  if (!(v21 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v22)
      goto LABEL_4;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v22 = sub_1A15A91B0();
  swift_bridgeObjectRelease();
  if (!v22)
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    v29 = v41;
    LOBYTE(v43) = v41;
    v44 = v14;
    v45 = v15;
    v46 = v16;
    v47 = v17;
    v30 = (int *)type metadata accessor for SaliencyImageObservation();
    v31 = (uint64_t)a5 + v30[5];
    v32 = a1;
    v33 = v40;
    sub_1A130583C(v32, (char *)&v43, v40, v31);
    v34 = objc_msgSend(v32, sel_uuid);
    sub_1A15A88B0();

    objc_msgSend(v32, sel_confidence);
    v36 = v35;

    *a5 = v19;
    *(_DWORD *)((char *)a5 + v30[7]) = v36;
    result = sub_1A128465C(v33, (uint64_t)a5 + v30[8]);
    *((_BYTE *)a5 + v30[9]) = v29;
    return result;
  }
LABEL_4:
  v43 = v19;
  result = sub_1A12B7434(0, v22 & ~(v22 >> 63), 0);
  if ((v22 & 0x8000000000000000) == 0)
  {
    v38 = a1;
    v39 = a5;
    v24 = 0;
    v19 = v43;
    v25 = v40;
    do
    {
      if ((v21 & 0xC000000000000001) != 0)
        v26 = (id)MEMORY[0x1A1B09470](v24, v21);
      else
        v26 = *(id *)(v21 + 8 * v24 + 32);
      v42 = v41;
      v44 = v14;
      v45 = v15;
      v46 = v16;
      v47 = v17;
      sub_1A1299184(v26, &v42, &v44, v25, v13);
      v43 = v19;
      v28 = *(_QWORD *)(v19 + 16);
      v27 = *(_QWORD *)(v19 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_1A12B7434(v27 > 1, v28 + 1, 1);
        v25 = v40;
        v19 = v43;
      }
      ++v24;
      *(_QWORD *)(v19 + 16) = v28 + 1;
      sub_1A12AB0A4((uint64_t)v13, v19+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v28, (uint64_t (*)(_QWORD))type metadata accessor for RectangleObservation);
    }
    while (v22 != v24);
    swift_bridgeObjectRelease();
    a1 = v38;
    a5 = v39;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t SaliencyImageObservation.init(_:)@<X0>(void *a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  CVPixelBufferRef v9;
  id v10;
  void *v11;
  unint64_t v12;
  id v13;
  id v14;
  float v15;
  float v16;
  int *v17;
  uint64_t v18;
  __CVBuffer *v19;
  id v20;
  int v21;
  int v22;
  char *v23;
  __int128 v24;
  uint64_t v26;
  size_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[4];
  __int128 v32;
  char v33;

  v4 = sub_1A15A88C8();
  *(_QWORD *)&v5 = MEMORY[0x1E0C80A78](v4).n128_u64[0];
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, sel_pixelBuffer, v5);
  v9 = sub_1A12A4B70();

  v10 = objc_msgSend(a1, sel_salientObjects);
  if (v10)
  {
    v11 = v10;
    sub_1A12F50BC();
    v12 = sub_1A15A8C40();

    v13 = a1;
    v27 = sub_1A1307988(v12, v13);
    swift_bridgeObjectRelease();

  }
  else
  {
    v27 = MEMORY[0x1E0DEE9D8];
  }
  v14 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v16 = v15;
  objc_msgSend(a1, sel_timeRange);
  v33 = 0;
  LOBYTE(v31[0]) = -4;
  v17 = (int *)type metadata accessor for SaliencyImageObservation();
  v18 = (uint64_t)a2 + v17[5];
  v19 = v9;
  sub_1A130553C((uint64_t)v7, (uint64_t)&v32, (char *)v31, (uint64_t)v19, v18, v16);
  v20 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v22 = v21;
  objc_msgSend(a1, sel_timeRange);
  v30 = v31[0];
  v29 = v31[1];
  v28 = v31[2];

  *a2 = v27;
  *(_DWORD *)((char *)a2 + v17[7]) = v22;
  v23 = (char *)a2 + v17[8];
  v24 = v29;
  *(_OWORD *)v23 = v30;
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v28;
  v23[48] = 0;
  *((_BYTE *)a2 + v17[9]) = -4;
  return (*(uint64_t (**)(size_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v17 - 1) + 56))(a2, 0, 1, v17);
}

size_t sub_1A1307618@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v5;
  _OWORD v7[2];
  unsigned __int8 v8;

  v8 = *a2;
  v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  return sub_1A1307044(a1, &v8, (uint64_t *)v7, a4, a5);
}

uint64_t _s6Vision24SaliencyImageObservationV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  char v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  if ((sub_1A12F4AAC(*a1, *a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for SaliencyImageObservation();
  if ((static PixelBufferObservation.== infix(_:_:)((uint64_t)a1 + v4[5], (uint64_t)a2 + v4[5]) & 1) == 0
    || (sub_1A15A88A4() & 1) == 0
    || *(float *)((char *)a1 + v4[7]) != *(float *)((char *)a2 + v4[7]))
  {
    return 0;
  }
  v5 = v4[8];
  v6 = *((_BYTE *)a1 + v5 + 48);
  v7 = (char *)a2 + v5;
  if ((v6 & 1) == 0)
  {
    if ((v7[48] & 1) != 0 || (sub_1A15A8EC8() & 1) == 0)
      return 0;
LABEL_10:
    v8 = v4[9];
    v9 = *((unsigned __int8 *)a1 + v8);
    v10 = *((unsigned __int8 *)a2 + v8);
    if (v9 <= 0xFB)
    {
      if (v10 > 0xFB)
        return 0;
      sub_1A12862A0();
      if ((sub_1A15A8B80() & 1) == 0)
        return 0;
    }
    else if (v10 <= 0xFB)
    {
      return 0;
    }
    return 1;
  }
  if (v7[48])
    goto LABEL_10;
  return 0;
}

unint64_t sub_1A13077B4()
{
  unint64_t result;

  result = qword_1EE618850[0];
  if (!qword_1EE618850[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CDCC8, &type metadata for SaliencyImageObservation.CodingKeys);
    atomic_store(result, qword_1EE618850);
  }
  return result;
}

uint64_t sub_1A13077F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x70614D74616568 && a2 == 0xE700000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4F746E65696C6173 && a2 == 0xEE00737463656A62)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

size_t sub_1A1307988(unint64_t a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  size_t result;
  uint64_t v12;
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  __n128 v22[2];
  char v23;
  _OWORD v24[3];
  char v25;
  uint64_t v26;

  v3 = v2;
  v17 = a2;
  v5 = type metadata accessor for RectangleObservation();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (unint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 >> 62)
    goto LABEL_15;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    if (!v9)
      return v10;
    v26 = MEMORY[0x1E0DEE9D8];
    result = sub_1A12B7434(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
      break;
    v16 = v3;
    v12 = 0;
    v10 = v26;
    while (v9 != v12)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x1A1B09470](v12, a1);
      else
        v13 = *(id *)(a1 + 8 * v12 + 32);
      v23 = -4;
      v14 = v13;
      static NormalizedRect.fullImage.getter(v22);
      v21[0] = v22[0];
      v21[1] = v22[1];
      objc_msgSend(v17, sel_timeRange);
      v24[0] = v18;
      v24[1] = v19;
      v24[2] = v20;
      v25 = 0;
      sub_1A1299184(v14, &v23, (uint64_t *)v21, (uint64_t)v24, v8);

      v26 = v10;
      v3 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      if (v3 >= v15 >> 1)
      {
        sub_1A12B7434(v15 > 1, v3 + 1, 1);
        v10 = v26;
      }
      ++v12;
      *(_QWORD *)(v10 + 16) = v3 + 1;
      sub_1A12AB0A4((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v3, (uint64_t (*)(_QWORD))type metadata accessor for RectangleObservation);
      if (v9 == v12)
        return v10;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v9 = sub_1A15A91B0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A1307BA0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE5FDB58, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
  a1[2] = sub_1A12857D8(&qword_1EE5FEC18, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
  a1[3] = sub_1A12857D8(&qword_1EE5FEC20, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
  result = sub_1A12857D8(&qword_1EE5FEC00, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A1307C34()
{
  return sub_1A12857D8(&qword_1EE5FEC28, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
}

uint64_t sub_1A1307C60(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FEBF8, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&protocol conformance descriptor for SaliencyImageObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SaliencyImageObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  id v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A15A88C8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = (int *)type metadata accessor for PixelBufferObservation();
    *(_DWORD *)&v9[v13[5]] = *(_DWORD *)&v10[v13[5]];
    v14 = v13[6];
    v15 = &v9[v14];
    v16 = &v10[v14];
    v15[48] = v16[48];
    v17 = *((_OWORD *)v16 + 2);
    v18 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = *((_OWORD *)v16 + 1);
    *((_OWORD *)v15 + 2) = v17;
    *(_OWORD *)v15 = v18;
    v9[v13[7]] = v10[v13[7]];
    v19 = v13[8];
    v20 = *(void **)&v10[v19];
    *(_QWORD *)&v9[v19] = v20;
    v21 = a3[6];
    v22 = (char *)v7 + v21;
    v23 = (char *)a2 + v21;
    v24 = v20;
    v12(v22, v23, v11);
    v25 = a3[8];
    *(_DWORD *)((char *)v7 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    v26 = (char *)v7 + v25;
    v27 = (char *)a2 + v25;
    v28 = *((_OWORD *)v27 + 1);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *((_OWORD *)v26 + 1) = v28;
    *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
    v26[48] = v27[48];
    *((_BYTE *)v7 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return v7;
}

uint64_t destroy for SaliencyImageObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1A15A88C8();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);

  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 24), v5);
}

_QWORD *initializeWithCopy for SaliencyImageObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  id v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A15A88C8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for PixelBufferObservation();
  *(_DWORD *)&v7[v11[5]] = *(_DWORD *)&v8[v11[5]];
  v12 = v11[6];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v13[48] = v14[48];
  v15 = *((_OWORD *)v14 + 2);
  v16 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
  *((_OWORD *)v13 + 2) = v15;
  *(_OWORD *)v13 = v16;
  v7[v11[7]] = v8[v11[7]];
  v17 = v11[8];
  v18 = *(void **)&v8[v17];
  *(_QWORD *)&v7[v17] = v18;
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = v18;
  v10(v20, v21, v9);
  v23 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
  v24[48] = v25[48];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

char *assignWithCopy for SaliencyImageObservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  __int128 v26;
  __int128 v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A15A88C8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for PixelBufferObservation();
  *(_DWORD *)&v7[v11[5]] = *(_DWORD *)&v8[v11[5]];
  v12 = v11[6];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v15 = v14[48];
  v17 = *((_OWORD *)v14 + 1);
  v16 = *((_OWORD *)v14 + 2);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v17;
  *((_OWORD *)v13 + 2) = v16;
  v13[48] = v15;
  v7[v11[7]] = v8[v11[7]];
  v18 = v11[8];
  v19 = *(void **)&v8[v18];
  v20 = *(void **)&v7[v18];
  *(_QWORD *)&v7[v18] = v19;
  v21 = v19;

  v10(&a1[a3[6]], &a2[a3[6]], v9);
  *(_DWORD *)&a1[a3[7]] = *(_DWORD *)&a2[a3[7]];
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = v24[48];
  v27 = *((_OWORD *)v24 + 1);
  v26 = *((_OWORD *)v24 + 2);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v27;
  *((_OWORD *)v23 + 2) = v26;
  v23[48] = v25;
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *initializeWithTake for SaliencyImageObservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A15A88C8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for PixelBufferObservation();
  *(_DWORD *)&v7[v11[5]] = *(_DWORD *)&v8[v11[5]];
  v12 = v11[6];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v13[48] = v14[48];
  v15 = *((_OWORD *)v14 + 2);
  v16 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
  *((_OWORD *)v13 + 2) = v15;
  *(_OWORD *)v13 = v16;
  v7[v11[7]] = v8[v11[7]];
  *(_QWORD *)&v7[v11[8]] = *(_QWORD *)&v8[v11[8]];
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v17 = a3[8];
  *(_DWORD *)&a1[a3[7]] = *(_DWORD *)&a2[a3[7]];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
  v18[48] = v19[48];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *assignWithTake for SaliencyImageObservation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A15A88C8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for PixelBufferObservation();
  *(_DWORD *)&v7[v11[5]] = *(_DWORD *)&v8[v11[5]];
  v12 = v11[6];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v13[48] = v14[48];
  v15 = *((_OWORD *)v14 + 2);
  v16 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
  *((_OWORD *)v13 + 2) = v15;
  *(_OWORD *)v13 = v16;
  v7[v11[7]] = v8[v11[7]];
  v17 = v11[8];
  v18 = *(void **)&v7[v17];
  *(_QWORD *)&v7[v17] = *(_QWORD *)&v8[v17];

  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v19 = a3[8];
  *(_DWORD *)&a1[a3[7]] = *(_DWORD *)&a2[a3[7]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  v20[48] = v21[48];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t getEnumTagSinglePayload for SaliencyImageObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A1308318(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PixelBufferObservation();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_1A15A88C8();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SaliencyImageObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A13083C4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for PixelBufferObservation();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_1A15A88C8();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_1A1308460()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for PixelBufferObservation();
  if (v1 <= 0x3F)
  {
    result = sub_1A15A88C8();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SaliencyImageObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A1308560 + 4 * byte_1A15CDA45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A1308594 + 4 * byte_1A15CDA40[v4]))();
}

uint64_t sub_1A1308594(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A130859C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A13085A4);
  return result;
}

uint64_t sub_1A13085B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A13085B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A13085BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13085C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SaliencyImageObservation.CodingKeys()
{
  return &type metadata for SaliencyImageObservation.CodingKeys;
}

unint64_t sub_1A13085E4()
{
  unint64_t result;

  result = qword_1EE618CF0;
  if (!qword_1EE618CF0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CDCA0, &type metadata for SaliencyImageObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618CF0);
  }
  return result;
}

unint64_t sub_1A130862C()
{
  unint64_t result;

  result = qword_1EE618E00;
  if (!qword_1EE618E00)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CDC10, &type metadata for SaliencyImageObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618E00);
  }
  return result;
}

unint64_t sub_1A1308674()
{
  unint64_t result;

  result = qword_1EE618E08[0];
  if (!qword_1EE618E08[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CDC38, &type metadata for SaliencyImageObservation.CodingKeys);
    atomic_store(result, qword_1EE618E08);
  }
  return result;
}

BOOL static DetectFaceRectanglesRequest.Revision.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL static DetectFaceRectanglesRequest.Revision.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DetectFaceRectanglesRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A1308708()
{
  sub_1A1308BBC();
  return sub_1A15A9474();
}

uint64_t sub_1A1308730()
{
  sub_1A1308BBC();
  return sub_1A15A9480();
}

uint64_t sub_1A1308758()
{
  sub_1A1308B78();
  return sub_1A15A9474();
}

uint64_t sub_1A1308780()
{
  sub_1A1308B78();
  return sub_1A15A9480();
}

uint64_t sub_1A13087A8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F4E5F34444F4E41;
  if (*v0 != 1)
    v1 = 0x3576444F4E41;
  if (*v0)
    return v1;
  else
    return 0x6E6F697369766572;
}

uint64_t sub_1A130880C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A13099CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A1308830()
{
  sub_1A1308B34();
  return sub_1A15A9474();
}

uint64_t sub_1A1308858()
{
  sub_1A1308B34();
  return sub_1A15A9480();
}

uint64_t sub_1A1308880()
{
  sub_1A1308C00();
  return sub_1A15A9474();
}

uint64_t sub_1A13088A8()
{
  sub_1A1308C00();
  return sub_1A15A9480();
}

uint64_t DetectFaceRectanglesRequest.Revision.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC30);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x1E0C80A78](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC38);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC40);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC48);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1308B34();
  sub_1A15A9468();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_1A1308BBC();
      sub_1A15A92AC();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_1A1308B78();
      v16 = v21;
      sub_1A15A92AC();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_1A1308C00();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t sub_1A1308B34()
{
  unint64_t result;

  result = qword_1EE618EA8;
  if (!qword_1EE618EA8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE27C, &type metadata for DetectFaceRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618EA8);
  }
  return result;
}

unint64_t sub_1A1308B78()
{
  unint64_t result;

  result = qword_1EE618EB0;
  if (!qword_1EE618EB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE22C, &type metadata for DetectFaceRectanglesRequest.Revision.ANODv5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618EB0);
  }
  return result;
}

unint64_t sub_1A1308BBC()
{
  unint64_t result;

  result = qword_1EE618EB8;
  if (!qword_1EE618EB8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE1DC, &type metadata for DetectFaceRectanglesRequest.Revision.ANOD4_NoFBBACodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE618EB8);
  }
  return result;
}

unint64_t sub_1A1308C00()
{
  unint64_t result;

  result = qword_1EE618EC0[0];
  if (!qword_1EE618EC0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE18C, &type metadata for DetectFaceRectanglesRequest.Revision.Revision3CodingKeys);
    atomic_store(result, qword_1EE618EC0);
  }
  return result;
}

uint64_t DetectFaceRectanglesRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectFaceRectanglesRequest.Revision.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC50);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC58);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC60);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEC68);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1308B34();
  v13 = v41;
  sub_1A15A945C();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_1A15A9294();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_1A15A90F0();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v25 = &type metadata for DetectFaceRectanglesRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC450], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_1A1308BBC();
      v20 = v9;
      sub_1A15A9204();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_1A1308B78();
      v28 = v15;
      sub_1A15A9204();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_1A1308C00();
    sub_1A15A9204();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

BOOL sub_1A13090CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_1A13090E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1A13090F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1A1309108(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t sub_1A130911C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DetectFaceRectanglesRequest.Revision.init(from:)(a1, a2);
}

uint64_t sub_1A1309130(_QWORD *a1)
{
  return DetectFaceRectanglesRequest.Revision.encode(to:)(a1);
}

double DetectFaceRectanglesRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  double result;
  __n128 v7;
  char v8;
  __n128 v9[3];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(v9);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 3)
  {
    v5 = sub_1A12D0F00();
    sub_1A1377CDC((uint64_t)&type metadata for DetectFaceRectanglesRequest, v5, (uint64_t)&v8);
    LOBYTE(v3) = v8;
  }
  result = v9[0].n128_f64[0];
  v7 = v9[1];
  *a2 = v9[0];
  a2[1] = v7;
  a2[2].n128_u8[0] = v3;
  a2[2].n128_u64[1] = v4;
  return result;
}

__n128 DetectFaceRectanglesRequest.regionOfInterest.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 DetectFaceRectanglesRequest.regionOfInterest.setter(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*DetectFaceRectanglesRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

void DetectFaceRectanglesRequest.revision.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

uint64_t sub_1A13091F8()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A12D0F00();
  result = sub_1A1378184((uint64_t)&type metadata for DetectFaceRectanglesRequest, v0);
  qword_1EE618E98 = result;
  return result;
}

uint64_t static DetectFaceRectanglesRequest.supportedRevisions.getter()
{
  if (qword_1EE618E90 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void DetectFaceRectanglesRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32) | 0x40;
}

int *sub_1A1309280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;
  char v8;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FECD8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v8 = 0;
  v1 = sub_1A12DA050(5, 0, 21);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(5, 0, 21);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(5, 0, 21);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958((uint64_t)&v8, v2, v4, v6, (uint64_t)&type metadata for DetectFaceRectanglesRequest.Revision, v0 + 32);
  qword_1EE643758 = v0;
  return result;
}

uint64_t DetectFaceRectanglesRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t DetectFaceRectanglesRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 40);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A1309470(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1309D00();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A1309498@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A12D0F00();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A13094D8(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A12D0F00();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1309518(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32) | 0x40;
}

uint64_t sub_1A1309528(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A12D0F00();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1309550()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 40);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A13095F8(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A1309678()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 40);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

void sub_1A1309720(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

uint64_t sub_1A130972C()
{
  if (qword_1EE618EA0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A130976C()
{
  return sub_1A15A8BB0();
}

uint64_t sub_1A1309790(uint64_t a1, uint64_t a2)
{
  sub_1A12B3638();
  return sub_1A1377AB4(a1, a2);
}

uint64_t sub_1A13097C8()
{
  char *v0;

  return qword_1A15CE2D0[*v0];
}

uint64_t sub_1A13097E0(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t result;
  size_t v17;
  unint64_t v18;
  _OWORD v19[3];
  _OWORD v20[3];

  v5 = v2[1];
  v20[0] = *v2;
  v20[1] = v5;
  v7 = *v2;
  v6 = v2[1];
  v20[2] = v2[2];
  v19[0] = v7;
  v19[1] = v6;
  v19[2] = v2[2];
  v8 = sub_1A1309D00();
  v9 = sub_1A12F6658((uint64_t)&type metadata for DetectFaceRectanglesRequest, v8);
  v11 = v10;
  v12 = sub_1A15A8BB0();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  if (v9 == v12 && v11 == v13)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v15 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
      return MEMORY[0x1E0DEE9D8];
  }
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1A128E764(a1 + 32, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFAF0);
    if (swift_dynamicCast())
    {
      sub_1A1309F1C((uint64_t)v20);
      v17 = sub_1A1309D44(v18, (unint64_t)v20, a2);
      sub_1A1309F44((uint64_t)v20);
      swift_bridgeObjectRelease();
      return v17;
    }
    return MEMORY[0x1E0DEE9D8];
  }
  __break(1u);
  return result;
}

uint64_t sub_1A1309968(uint64_t a1, uint64_t a2)
{
  return sub_1A13097E0(a1, a2);
}

void sub_1A130997C(uint64_t a1)
{
  sub_1A1309BBC(a1);
}

uint64_t sub_1A1309990@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (result == 3737841670)
    v2 = 2;
  else
    v2 = 3;
  if (result == 3737841669)
    v3 = 1;
  else
    v3 = v2;
  if (result == 3)
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_1A13099CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697369766572 && a2 == 0xE900000000000033;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F4E5F34444F4E41 && a2 == 0xEC00000041424246 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x3576444F4E41 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t _s6Vision27DetectFaceRectanglesRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  CGSize v6;
  CGSize v7;
  CGRect v9;
  CGRect v10;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(CGSize *)(a1 + 16);
  v10.origin = *(CGPoint *)a1;
  v10.size = v6;
  v7 = *(CGSize *)(a2 + 16);
  v9.origin = *(CGPoint *)a2;
  v9.size = v7;
  if (static NormalizedRect.== infix(_:_:)(&v10, &v9) && v2 == v4)
    return sub_1A12903B0(v3, v5);
  else
    return 0;
}

void sub_1A1309BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *ObjCClassFromMetadata;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *);
  id v15;
  void (*v16)(_BYTE *, _QWORD);
  _BYTE v17[32];
  _QWORD v18[4];

  v4 = *(char *)(v1 + 32);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1A128DB40(0, &qword_1EE5FECC8);
  if (objc_msgSend(ObjCClassFromMetadata, sel_isSubclassOfClass_, swift_getObjCClassFromMetadata()))
  {
    v6 = qword_1A15CE2D0[v4];
    v7 = sub_1A128DB40(0, (unint64_t *)&qword_1EE5FD4D8);
    v8 = sub_1A128DB40(0, &qword_1EE5FECD0);
    v9 = sub_1A129EBFC(v8, v6);
    if (!v2)
    {
      v10 = v9;
      v11 = sub_1A15A8BB0();
      v13 = v12;
      v18[3] = v7;
      v18[0] = v10;
      v14 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200);
      v15 = v10;
      v16 = (void (*)(_BYTE *, _QWORD))v14(v17);
      sub_1A128D188((uint64_t)v18, v11, v13);
      v16(v17, 0);

    }
  }
}

unint64_t sub_1A1309D00()
{
  unint64_t result;

  result = qword_1EE5FEC70;
  if (!qword_1EE5FEC70)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CDF10, &type metadata for DetectFaceRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FEC70);
  }
  return result;
}

size_t sub_1A1309D44(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  size_t result;
  uint64_t v14;
  char v15;
  __int128 v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = v3;
  v22 = a3;
  v7 = type metadata accessor for FaceObservation();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_15;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    if (!v11)
      return v12;
    v27 = MEMORY[0x1E0DEE9D8];
    result = sub_1A12B7510(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
      break;
    v14 = 0;
    v12 = v27;
    v20[1] = v4;
    v21 = a1 & 0xC000000000000001;
    v15 = *(_BYTE *)(a2 + 32) | 0x40;
    v16 = *(_OWORD *)(a2 + 16);
    v25 = *(_OWORD *)a2;
    v26 = v16;
    v4 = a1;
    while (v11 != v14)
    {
      if (v21)
        v17 = (id)MEMORY[0x1A1B09470](v14, a1);
      else
        v17 = *(id *)(a1 + 8 * v14 + 32);
      v24 = v15;
      v23[0] = v25;
      v23[1] = v26;
      sub_1A136CB20(v17, (double *)v23, v22, v10);
      v27 = v12;
      v19 = *(_QWORD *)(v12 + 16);
      v18 = *(_QWORD *)(v12 + 24);
      a2 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        sub_1A12B7510(v18 > 1, v19 + 1, 1);
        v12 = v27;
      }
      ++v14;
      *(_QWORD *)(v12 + 16) = a2;
      sub_1A12C4BE4((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v19);
      a1 = v4;
      if (v11 == v14)
        return v12;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v11 = sub_1A15A91B0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A1309F1C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A1309F44(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1A1309F70()
{
  unint64_t result;

  result = qword_1EE5FEC78[0];
  if (!qword_1EE5FEC78[0])
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceRectanglesRequest.Revision, &type metadata for DetectFaceRectanglesRequest.Revision);
    atomic_store(result, qword_1EE5FEC78);
  }
  return result;
}

unint64_t sub_1A1309FB4(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B3638();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A1309FD8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B705C();
  result = sub_1A130A004();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A130A004()
{
  unint64_t result;

  result = qword_1EE5FECB0;
  if (!qword_1EE5FECB0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceRectanglesRequest, &type metadata for DetectFaceRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FECB0);
  }
  return result;
}

unint64_t sub_1A130A04C()
{
  unint64_t result;

  result = qword_1EE5FECB8;
  if (!qword_1EE5FECB8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceRectanglesRequest, &type metadata for DetectFaceRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FECB8);
  }
  return result;
}

unint64_t sub_1A130A094()
{
  unint64_t result;

  result = qword_1EE5FECC0;
  if (!qword_1EE5FECC0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceRectanglesRequest.Revision, &type metadata for DetectFaceRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FECC0);
  }
  return result;
}

unint64_t sub_1A130A0D8(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12D0F00();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for DetectFaceRectanglesRequest()
{
  return &type metadata for DetectFaceRectanglesRequest;
}

ValueMetadata *type metadata accessor for DetectFaceRectanglesRequest.Revision()
{
  return &type metadata for DetectFaceRectanglesRequest.Revision;
}

uint64_t _s6Vision27DetectFaceRectanglesRequestV8RevisionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A130A16C + 4 * byte_1A15CDD25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A130A1A0 + 4 * byte_1A15CDD20[v4]))();
}

uint64_t sub_1A130A1A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A130A1A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A130A1B0);
  return result;
}

uint64_t sub_1A130A1BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A130A1C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A130A1C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A130A1D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DetectFaceRectanglesRequest.Revision.CodingKeys()
{
  return &type metadata for DetectFaceRectanglesRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectFaceRectanglesRequest.Revision.Revision3CodingKeys()
{
  return &type metadata for DetectFaceRectanglesRequest.Revision.Revision3CodingKeys;
}

ValueMetadata *type metadata accessor for DetectFaceRectanglesRequest.Revision.ANOD4_NoFBBACodingKeys()
{
  return &type metadata for DetectFaceRectanglesRequest.Revision.ANOD4_NoFBBACodingKeys;
}

ValueMetadata *type metadata accessor for DetectFaceRectanglesRequest.Revision.ANODv5CodingKeys()
{
  return &type metadata for DetectFaceRectanglesRequest.Revision.ANODv5CodingKeys;
}

unint64_t sub_1A130A220()
{
  unint64_t result;

  result = qword_1EE6198D0[0];
  if (!qword_1EE6198D0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE164, &type metadata for DetectFaceRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE6198D0);
  }
  return result;
}

unint64_t sub_1A130A268()
{
  unint64_t result;

  result = qword_1EE6199E0;
  if (!qword_1EE6199E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE084, &type metadata for DetectFaceRectanglesRequest.Revision.Revision3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6199E0);
  }
  return result;
}

unint64_t sub_1A130A2B0()
{
  unint64_t result;

  result = qword_1EE6199E8[0];
  if (!qword_1EE6199E8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE0AC, &type metadata for DetectFaceRectanglesRequest.Revision.Revision3CodingKeys);
    atomic_store(result, qword_1EE6199E8);
  }
  return result;
}

unint64_t sub_1A130A2F8()
{
  unint64_t result;

  result = qword_1EE619A70;
  if (!qword_1EE619A70)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE034, &type metadata for DetectFaceRectanglesRequest.Revision.ANOD4_NoFBBACodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE619A70);
  }
  return result;
}

unint64_t sub_1A130A340()
{
  unint64_t result;

  result = qword_1EE619A78;
  if (!qword_1EE619A78)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE05C, &type metadata for DetectFaceRectanglesRequest.Revision.ANOD4_NoFBBACodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE619A78);
  }
  return result;
}

unint64_t sub_1A130A388()
{
  unint64_t result;

  result = qword_1EE619B00;
  if (!qword_1EE619B00)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CDFE4, &type metadata for DetectFaceRectanglesRequest.Revision.ANODv5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE619B00);
  }
  return result;
}

unint64_t sub_1A130A3D0()
{
  unint64_t result;

  result = qword_1EE619B08[0];
  if (!qword_1EE619B08[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE00C, &type metadata for DetectFaceRectanglesRequest.Revision.ANODv5CodingKeys);
    atomic_store(result, qword_1EE619B08);
  }
  return result;
}

unint64_t sub_1A130A418()
{
  unint64_t result;

  result = qword_1EE619B90;
  if (!qword_1EE619B90)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE0D4, &type metadata for DetectFaceRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE619B90);
  }
  return result;
}

unint64_t sub_1A130A460()
{
  unint64_t result;

  result = qword_1EE619B98[0];
  if (!qword_1EE619B98[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE0FC, &type metadata for DetectFaceRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE619B98);
  }
  return result;
}

uint64_t static DetectHumanRectanglesRequest.Revision.< infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  return *a2 & ~*a1 & 1;
}

BOOL static DetectHumanRectanglesRequest.Revision.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DetectHumanRectanglesRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A130A4FC()
{
  sub_1A130A864();
  return sub_1A15A9474();
}

uint64_t sub_1A130A524()
{
  sub_1A130A864();
  return sub_1A15A9480();
}

uint64_t sub_1A130A54C()
{
  _BYTE *v0;

  if (*v0)
    return 0x3576444F4E41;
  else
    return 0x6E6F697369766572;
}

uint64_t sub_1A130A588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A130B530(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A130A5AC()
{
  sub_1A130A820();
  return sub_1A15A9474();
}

uint64_t sub_1A130A5D4()
{
  sub_1A130A820();
  return sub_1A15A9480();
}

uint64_t sub_1A130A5FC()
{
  sub_1A130A8A8();
  return sub_1A15A9474();
}

uint64_t sub_1A130A624()
{
  sub_1A130A8A8();
  return sub_1A15A9480();
}

uint64_t DetectHumanRectanglesRequest.Revision.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FECE0);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FECE8);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FECF0);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A130A820();
  sub_1A15A9468();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A130A864();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A130A8A8();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_1A130A820()
{
  unint64_t result;

  result = qword_1EE619C38;
  if (!qword_1EE619C38)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE78C, &type metadata for DetectHumanRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE619C38);
  }
  return result;
}

unint64_t sub_1A130A864()
{
  unint64_t result;

  result = qword_1EE619C40;
  if (!qword_1EE619C40)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE73C, &type metadata for DetectHumanRectanglesRequest.Revision.ANODv5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE619C40);
  }
  return result;
}

unint64_t sub_1A130A8A8()
{
  unint64_t result;

  result = qword_1EE619C48[0];
  if (!qword_1EE619C48[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE6EC, &type metadata for DetectHumanRectanglesRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE619C48);
  }
  return result;
}

uint64_t DetectHumanRectanglesRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectHumanRectanglesRequest.Revision.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FECF8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FED00);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FED08);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A130A820();
  v11 = v33;
  sub_1A15A945C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A15A9294();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A15A90F0();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v21 = &type metadata for DetectHumanRectanglesRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A130A864();
    sub_1A15A9204();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A130A8A8();
    v22 = v6;
    sub_1A15A9204();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_1A130AC88(_BYTE *a1, _BYTE *a2)
{
  return *a2 & ~*a1 & 1;
}

uint64_t sub_1A130AC9C(_BYTE *a1, _BYTE *a2)
{
  return *a2 & 1 | ((*a1 & 1) == 0);
}

uint64_t sub_1A130ACB0(_BYTE *a1, _BYTE *a2)
{
  return *a1 & 1 | ((*a2 & 1) == 0);
}

uint64_t sub_1A130ACC4(_BYTE *a1, _BYTE *a2)
{
  return *a1 & ~*a2 & 1;
}

uint64_t sub_1A130ACD8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DetectHumanRectanglesRequest.Revision.init(from:)(a1, a2);
}

uint64_t sub_1A130ACEC(_QWORD *a1)
{
  return DetectHumanRectanglesRequest.Revision.encode(to:)(a1);
}

double DetectHumanRectanglesRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  double result;
  char v8;
  __n128 v9;
  double v10[4];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(&v9);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 2)
  {
    v5 = sub_1A130AE80();
    sub_1A1377CDC((uint64_t)&type metadata for DetectHumanRectanglesRequest, v5, (uint64_t)&v8);
    v6 = v8;
  }
  else
  {
    v6 = v3 & 1;
  }
  *(_BYTE *)a2 = 1;
  *(__n128 *)(a2 + 8) = v9;
  result = v10[0];
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v10;
  *(_BYTE *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v4;
  return result;
}

uint64_t DetectHumanRectanglesRequest.upperBodyOnly.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DetectHumanRectanglesRequest.upperBodyOnly.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*DetectHumanRectanglesRequest.upperBodyOnly.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

__n128 DetectHumanRectanglesRequest.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 DetectHumanRectanglesRequest.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*DetectHumanRectanglesRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

void DetectHumanRectanglesRequest.revision.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

uint64_t sub_1A130ADF8()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A130AE80();
  result = sub_1A1378184((uint64_t)&type metadata for DetectHumanRectanglesRequest, v0);
  qword_1EE619C28 = result;
  return result;
}

uint64_t static DetectHumanRectanglesRequest.supportedRevisions.getter()
{
  if (qword_1EE619C20 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void DetectHumanRectanglesRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40) | 0x70;
}

unint64_t sub_1A130AE80()
{
  unint64_t result;

  result = qword_1EE5FED10;
  if (!qword_1EE5FED10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE4C4, &type metadata for DetectHumanRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FED10);
  }
  return result;
}

int *sub_1A130AEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;
  char v8;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FED80);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v8 = 0;
  v1 = sub_1A12DA050(5, 0, 29);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(5, 0, 29);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(5, 0, 29);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958((uint64_t)&v8, v2, v4, v6, (uint64_t)&type metadata for DetectHumanRectanglesRequest.Revision, v0 + 32);
  qword_1EE643760 = v0;
  return result;
}

uint64_t DetectHumanRectanglesRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  sub_1A15A93FC();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t DetectHumanRectanglesRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 48);
  sub_1A15A93E4();
  sub_1A15A93FC();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A130B0E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A130C0B8();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A130B110@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A130AE80();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A130B150(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A130AE80();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A130B190(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40) | 0x70;
}

uint64_t sub_1A130B1A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A130AE80();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A130B1CC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  sub_1A15A93FC();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A130B270()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 48);
  sub_1A15A93E4();
  sub_1A15A93FC();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

void sub_1A130B328(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

uint64_t sub_1A130B334()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A130B33C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*sub_1A130B364())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A130B374()
{
  if (qword_1EE619C30 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A130B3B4(uint64_t a1, uint64_t a2)
{
  sub_1A12B34D8();
  return sub_1A1377AB4(a1, a2);
}

uint64_t sub_1A130B3EC()
{
  _BYTE *v0;

  if (*v0)
    return 3737841666;
  else
    return 2;
}

size_t sub_1A130B40C(size_t result, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  size_t v6;
  unint64_t v7;
  _BYTE v8[32];
  _OWORD v9[3];
  uint64_t v10;

  v3 = *(_OWORD *)(v2 + 16);
  v9[0] = *(_OWORD *)v2;
  v9[1] = v3;
  v9[2] = *(_OWORD *)(v2 + 32);
  v10 = *(_QWORD *)(v2 + 48);
  v4 = 2;
  if ((v9[0] & 1) == 0)
    v4 = 7;
  if (v4 >= *(_QWORD *)(result + 16))
  {
    __break(1u);
  }
  else
  {
    sub_1A128E764(result + 32 * v4 + 32, (uint64_t)v8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FED18);
    if (!swift_dynamicCast())
      return MEMORY[0x1E0DEE9D8];
    sub_1A130BAA0((uint64_t)v9);
    v6 = sub_1A130B8C4(v7, (unint64_t)v9, a2);
    sub_1A130BAC8((uint64_t)v9);
    swift_bridgeObjectRelease();
    return v6;
  }
  return result;
}

size_t sub_1A130B508(size_t a1, uint64_t a2)
{
  return sub_1A130B40C(a1, a2);
}

id sub_1A130B51C(uint64_t a1)
{
  return sub_1A130B6BC(a1);
}

uint64_t sub_1A130B530(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697369766572 && a2 == 0xE900000000000032;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x3576444F4E41 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t _s6Vision28DetectHumanRectanglesRequestV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  CGSize v6;
  CGSize v7;
  CGRect v9;
  CGRect v10;

  if (*a1 != *a2)
    return 0;
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a2 + 6);
  v4 = a2[40];
  v5 = a1[40];
  v6 = *(CGSize *)(a1 + 24);
  v10.origin = *(CGPoint *)(a1 + 8);
  v10.size = v6;
  v7 = *(CGSize *)(a2 + 24);
  v9.origin = *(CGPoint *)(a2 + 8);
  v9.size = v7;
  if (!static NormalizedRect.== infix(_:_:)(&v10, &v9))
    return 0;
  if (((v4 ^ v5) & 1) == 0)
    return sub_1A12903B0(v2, v3);
  else
    return 0;
}

id sub_1A130B6BC(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  char v4;
  int v5;
  void *ObjCClassFromMetadata;
  id result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *);
  void (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t (*v25)(_BYTE *, _QWORD);
  _BYTE v26[32];
  _QWORD v27[3];
  uint64_t v28;
  int v29;

  v4 = *v1;
  v5 = v1[40];
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1A128DB40(0, &qword_1EE5FECC8);
  result = objc_msgSend(ObjCClassFromMetadata, sel_isSubclassOfClass_, swift_getObjCClassFromMetadata());
  if ((_DWORD)result)
  {
    v29 = v5;
    v8 = sub_1A15A8BB0();
    v10 = v9;
    v11 = MEMORY[0x1E0DEAFA0];
    v28 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v27[0]) = v4 ^ 1;
    v12 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200);
    v13 = (void (*)(_BYTE *, _QWORD))v12(v26);
    sub_1A128D188((uint64_t)v27, v8, v10);
    v13(v26, 0);
    v14 = sub_1A15A8BB0();
    v16 = v15;
    v28 = v11;
    LOBYTE(v27[0]) = v4;
    v17 = (void (*)(_BYTE *, _QWORD))v12(v26);
    sub_1A128D188((uint64_t)v27, v14, v16);
    v17(v26, 0);
    v18 = sub_1A15A8BB0();
    v20 = v19;
    if (v29)
      v21 = 3737841666;
    else
      v21 = 2;
    v22 = sub_1A128DB40(0, (unint64_t *)&qword_1EE5FD4D8);
    v23 = sub_1A128DB40(0, &qword_1EE5FED78);
    v24 = sub_1A129EBFC(v23, v21);
    if (v2)
    {
      return (id)swift_bridgeObjectRelease();
    }
    else
    {
      v28 = v22;
      v27[0] = v24;
      v25 = (uint64_t (*)(_BYTE *, _QWORD))v12(v26);
      sub_1A128D188((uint64_t)v27, v18, v20);
      return (id)v25(v26, 0);
    }
  }
  return result;
}

size_t sub_1A130B8C4(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  size_t result;
  uint64_t v14;
  char v15;
  __int128 v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  uint64_t v22;
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = v3;
  v22 = a3;
  v7 = type metadata accessor for HumanObservation();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_15;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    if (!v11)
      return v12;
    v27 = MEMORY[0x1E0DEE9D8];
    result = sub_1A12B7460(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
      break;
    v14 = 0;
    v12 = v27;
    v20[1] = v4;
    v21 = a1 & 0xC000000000000001;
    v15 = *(_BYTE *)(a2 + 40) | 0x70;
    v16 = *(_OWORD *)(a2 + 24);
    v25 = *(_OWORD *)(a2 + 8);
    v26 = v16;
    v4 = a1;
    while (v11 != v14)
    {
      if (v21)
        v17 = (id)MEMORY[0x1A1B09470](v14, a1);
      else
        v17 = *(id *)(a1 + 8 * v14 + 32);
      v24 = v15;
      v23[0] = v25;
      v23[1] = v26;
      sub_1A128513C(v17, &v24, v23, v22, (uint64_t)v10);
      v27 = v12;
      v19 = *(_QWORD *)(v12 + 16);
      v18 = *(_QWORD *)(v12 + 24);
      a2 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        sub_1A12B7460(v18 > 1, v19 + 1, 1);
        v12 = v27;
      }
      ++v14;
      *(_QWORD *)(v12 + 16) = a2;
      sub_1A130C0FC((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v19);
      a1 = v4;
      if (v11 == v14)
        return v12;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v11 = sub_1A15A91B0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A130BAA0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A130BAC8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1A130BAF4()
{
  unint64_t result;

  result = qword_1EE5FED20;
  if (!qword_1EE5FED20)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanRectanglesRequest.Revision, &type metadata for DetectHumanRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FED20);
  }
  return result;
}

unint64_t sub_1A130BB38(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B34D8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A130BB5C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6F4C();
  result = sub_1A130BB88();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A130BB88()
{
  unint64_t result;

  result = qword_1EE5FED58;
  if (!qword_1EE5FED58)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanRectanglesRequest, &type metadata for DetectHumanRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FED58);
  }
  return result;
}

unint64_t sub_1A130BBD0()
{
  unint64_t result;

  result = qword_1EE5FED60;
  if (!qword_1EE5FED60)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanRectanglesRequest, &type metadata for DetectHumanRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FED60);
  }
  return result;
}

unint64_t sub_1A130BC18()
{
  unint64_t result;

  result = qword_1EE5FED68;
  if (!qword_1EE5FED68)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanRectanglesRequest.Revision, &type metadata for DetectHumanRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FED68);
  }
  return result;
}

uint64_t sub_1A130BC5C()
{
  return sub_1A12857D8(&qword_1EE5FCD88, (uint64_t (*)(uint64_t))type metadata accessor for HumanObservation, (uint64_t)&unk_1A15C3958);
}

unint64_t sub_1A130BC88(uint64_t a1)
{
  unint64_t result;

  result = sub_1A130AE80();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeWithCopy for DetectHumanRectanglesRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectHumanRectanglesRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DetectHumanRectanglesRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DetectHumanRectanglesRequest()
{
  return &type metadata for DetectHumanRectanglesRequest;
}

ValueMetadata *type metadata accessor for DetectHumanRectanglesRequest.Revision()
{
  return &type metadata for DetectHumanRectanglesRequest.Revision;
}

uint64_t _s6Vision28DetectHumanRectanglesRequestV8RevisionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A130BE20 + 4 * byte_1A15CE2F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A130BE54 + 4 * byte_1A15CE2F0[v4]))();
}

uint64_t sub_1A130BE54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A130BE5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A130BE64);
  return result;
}

uint64_t sub_1A130BE70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A130BE78);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A130BE7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A130BE84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DetectHumanRectanglesRequest.Revision.CodingKeys()
{
  return &type metadata for DetectHumanRectanglesRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectHumanRectanglesRequest.Revision.Revision2CodingKeys()
{
  return &type metadata for DetectHumanRectanglesRequest.Revision.Revision2CodingKeys;
}

ValueMetadata *type metadata accessor for DetectHumanRectanglesRequest.Revision.ANODv5CodingKeys()
{
  return &type metadata for DetectHumanRectanglesRequest.Revision.ANODv5CodingKeys;
}

unint64_t sub_1A130BEC4()
{
  unint64_t result;

  result = qword_1EE61A550[0];
  if (!qword_1EE61A550[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE6C4, &type metadata for DetectHumanRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE61A550);
  }
  return result;
}

unint64_t sub_1A130BF0C()
{
  unint64_t result;

  result = qword_1EE61A660;
  if (!qword_1EE61A660)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE5E4, &type metadata for DetectHumanRectanglesRequest.Revision.Revision2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A660);
  }
  return result;
}

unint64_t sub_1A130BF54()
{
  unint64_t result;

  result = qword_1EE61A668[0];
  if (!qword_1EE61A668[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE60C, &type metadata for DetectHumanRectanglesRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE61A668);
  }
  return result;
}

unint64_t sub_1A130BF9C()
{
  unint64_t result;

  result = qword_1EE61A6F0;
  if (!qword_1EE61A6F0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE594, &type metadata for DetectHumanRectanglesRequest.Revision.ANODv5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A6F0);
  }
  return result;
}

unint64_t sub_1A130BFE4()
{
  unint64_t result;

  result = qword_1EE61A6F8[0];
  if (!qword_1EE61A6F8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE5BC, &type metadata for DetectHumanRectanglesRequest.Revision.ANODv5CodingKeys);
    atomic_store(result, qword_1EE61A6F8);
  }
  return result;
}

unint64_t sub_1A130C02C()
{
  unint64_t result;

  result = qword_1EE61A780;
  if (!qword_1EE61A780)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE634, &type metadata for DetectHumanRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A780);
  }
  return result;
}

unint64_t sub_1A130C074()
{
  unint64_t result;

  result = qword_1EE61A788[0];
  if (!qword_1EE61A788[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE65C, &type metadata for DetectHumanRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE61A788);
  }
  return result;
}

unint64_t sub_1A130C0B8()
{
  unint64_t result;

  result = qword_1EE5FED70;
  if (!qword_1EE5FED70)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CE4E0, &type metadata for DetectHumanRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FED70);
  }
  return result;
}

uint64_t sub_1A130C0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HumanObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A130C144()
{
  unint64_t result;

  result = qword_1EE5FED88;
  if (!qword_1EE5FED88)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA560, &type metadata for DetectBarcodesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FED88);
  }
  return result;
}

uint64_t sub_1A130C188@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  v3 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 48);
  v4 = *(_WORD *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 26);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 41);
  v9 = *(_BYTE *)(v1 + 80);
  v11 = *(_QWORD *)(v1 + 88);
  v10 = *(_QWORD *)(v1 + 96);
  v12 = *(_QWORD *)(v1 + 104);
  *(_WORD *)a1 = v4;
  *(_BYTE *)(a1 + 2) = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 17) = v8;
  *(_OWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A130C228(__int16 *a1)
{
  uint64_t v1;
  __int16 v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 2);
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a1 + 16);
  v6 = *((_BYTE *)a1 + 17);
  v14 = *(_OWORD *)(a1 + 12);
  v7 = *((_QWORD *)a1 + 5);
  v8 = *((_QWORD *)a1 + 6);
  v9 = *((_BYTE *)a1 + 56);
  v11 = *((_QWORD *)a1 + 8);
  v10 = *((_QWORD *)a1 + 9);
  v12 = *((_QWORD *)a1 + 10);
  swift_beginAccess();
  *(_WORD *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 26) = v3;
  *(_QWORD *)(v1 + 32) = v4;
  *(_BYTE *)(v1 + 40) = v5;
  *(_BYTE *)(v1 + 41) = v6;
  *(_OWORD *)(v1 + 48) = v14;
  *(_QWORD *)(v1 + 64) = v7;
  *(_QWORD *)(v1 + 72) = v8;
  *(_BYTE *)(v1 + 80) = v9;
  *(_QWORD *)(v1 + 88) = v11;
  *(_QWORD *)(v1 + 96) = v10;
  *(_QWORD *)(v1 + 104) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A130C328(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1A130C37C(a1);
  return v2;
}

uint64_t sub_1A130C37C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE v22[48];

  v2 = v1;
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  sub_1A1288044(a1, (uint64_t)v22);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCDD8);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    DetectBarcodesRequest.descriptor.getter(v22);
    v10 = v22[0];
    v4 = sub_1A130C144();
    swift_bridgeObjectRetain_n();
    v9 = sub_1A12F6658((uint64_t)&type metadata for DetectBarcodesRequest, v4);
    v6 = v5;
    swift_bridgeObjectRetain();
    v7 = swift_retain();
    v8 = sub_1A12F6C54(v7, &type metadata for DetectBarcodesRequest, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1(a1);
    *(_BYTE *)(v2 + 24) = v10;
    *(_BYTE *)(v2 + 25) = v18;
    *(_BYTE *)(v2 + 26) = v13;
    *(_QWORD *)(v2 + 32) = v12;
    *(_BYTE *)(v2 + 40) = v19;
    *(_BYTE *)(v2 + 41) = v20;
    *(_QWORD *)(v2 + 48) = v14;
    *(_QWORD *)(v2 + 56) = v15;
    *(_QWORD *)(v2 + 64) = v16;
    *(_QWORD *)(v2 + 72) = v17;
    *(_BYTE *)(v2 + 80) = v21;
    *(_QWORD *)(v2 + 88) = v9;
    *(_QWORD *)(v2 + 96) = v6;
    *(_QWORD *)(v2 + 104) = v8;
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A130C5C0()
{
  uint64_t v0;
  void (*v1)(uint64_t *__return_ptr);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v0 + 120);
  v1(&v14);
  v2 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 0xF8) != 0x20)
  {
    v11[0] = 0;
    v11[1] = 0xE000000000000000;
    v3 = sub_1A15A9090();
    ((void (*)(_QWORD *__return_ptr, uint64_t))v1)(v11, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A130C71C();
    v4 = sub_1A15A9324();
    v6 = v5;
    swift_bridgeObjectRelease();
    v12 = v4;
    v13 = v6;
    sub_1A15A8BEC();
    v7 = v12;
    v8 = v13;
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v9 = v7;
    *(_QWORD *)(v9 + 8) = v8;
    *(_BYTE *)(v9 + 16) = 18;
    swift_willThrow();
  }
  return 0x40000;
}

unint64_t sub_1A130C71C()
{
  unint64_t result;

  result = qword_1EE5FED90;
  if (!qword_1EE5FED90)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RequestDescriptor, &type metadata for RequestDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EE5FED90);
  }
  return result;
}

uint64_t sub_1A130C760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v0 + 120))(&v3);
  v1 = SBYTE1(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return *(_QWORD *)&asc_1A15CE8D0[8 * v1];
}

id sub_1A130C7C4(char *a1)
{
  return **((id **)&unk_1E453F2B8 + *a1);
}

id sub_1A130C7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void (*v6)(_QWORD *__return_ptr);
  int v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *);
  char v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD v22[2];
  id v23;

  v2 = v0;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
  (*(void (**)(void))(*(_QWORD *)v0 + 168))();
  v4 = (void *)sub_1A15A8E5C();
  objc_msgSend(v3, sel_setValue_forKey_, v4, *MEMORY[0x1E0D83258]);

  v5 = (void *)sub_1A15A9450();
  objc_msgSend(v3, sel_setValue_forKey_, v5, *MEMORY[0x1E0D83240]);

  v6 = *(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v2 + 120);
  v6(v22);
  v7 = BYTE2(v22[0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 == 1)
  {
    v8 = (void *)sub_1A15A8CF4();
    objc_msgSend(v3, sel_setValue_forKey_, v8, *MEMORY[0x1E0D83260]);

  }
  v6(v22);
  v9 = (_QWORD *)v22[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
    v10 = v9[2];
    if (v10)
      goto LABEL_5;
LABEL_10:
    swift_bridgeObjectRelease();
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v19 = 0xD000000000000049;
    *(_QWORD *)(v19 + 8) = 0x80000001A15FD470;
    *(_BYTE *)(v19 + 16) = 2;
    swift_willThrow();

    return v3;
  }
  v9 = static BarcodeSymbology.allCases.getter();
  v10 = v9[2];
  if (!v10)
    goto LABEL_10;
LABEL_5:
  v23 = v3;
  sub_1A128DB40(0, &qword_1EE5FED98);
  v11 = (void *)MEMORY[0x1A1B09380](MEMORY[0x1E0DEE9D8]);
  v12 = 0;
  v13 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 176);
  do
  {
    v14 = *((_BYTE *)v9 + v12++ + 32);
    LOBYTE(v22[0]) = v14;
    v15 = (void *)v13(v22);
    objc_msgSend(v11, sel_addObject_, v15);

  }
  while (v10 != v12);
  swift_bridgeObjectRelease();
  v16 = *MEMORY[0x1E0D83270];
  v17 = v11;
  v3 = v23;
  ((void (*)(_QWORD *__return_ptr, id))v6)(v22, objc_msgSend(v23, sel_setValue_forKey_, v17, v16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = (void *)sub_1A15A8CF4();
  objc_msgSend(v3, sel_setValue_forKey_, v18, *MEMORY[0x1E0D83268]);

  (*(void (**)(void))(*(_QWORD *)v2 + 160))();
  if (v1)
  {

  }
  else
  {
    v20 = (void *)sub_1A15A8E5C();
    objc_msgSend(v3, sel_setValue_forKey_, v20, *MEMORY[0x1E0D83248]);

  }
  return v3;
}

id sub_1A130CB20(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double Width;
  double Height;
  __CVBuffer *v12;
  id v13;
  __CVBuffer *v14;
  id v15;
  id v16;
  id v18[2];
  CGRect v19;

  v18[1] = *(id *)MEMORY[0x1E0C80C00];
  Width = CGRectGetWidth(*(CGRect *)&a2);
  if ((~*(_QWORD *)&Width & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (Width <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v19.origin.x = a2;
  v19.origin.y = a3;
  v19.size.width = a4;
  v19.size.height = a5;
  Height = CGRectGetHeight(v19);
  if ((~*(_QWORD *)&Height & 0x7FF0000000000000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (Height <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  if (Height >= 9.22337204e18)
    goto LABEL_16;
  v18[0] = 0;
  v12 = (__CVBuffer *)objc_msgSend(a1, sel_croppedBufferWithWidth_height_format_cropRect_options_error_, (uint64_t)Width, (uint64_t)Height, 875704422, 0, v18, a2, a3, a4, a5);
  v13 = v18[0];
  if (v12)
  {
    v14 = v12;
    v15 = v18[0];
    CVPixelBufferGetWidth(v14);
    CVPixelBufferGetHeight(v14);
    v13 = (id)MRCSampleCreateWithCVPixelBuffer();

  }
  else
  {
    v16 = v18[0];
    sub_1A15A8844();

    swift_willThrow();
  }
  return v13;
}

char *sub_1A130CCEC(uint64_t a1, size_t a2, size_t a3)
{
  char *v3;
  const __CFArray *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  if (MRCDescriptorCopyAttribute())
  {
    type metadata accessor for CFArray(0);
    v6 = (const __CFArray *)(id)swift_dynamicCastUnknownClassUnconditional();
    if (CFArrayGetCount(v6) == 4)
    {
      v7 = (id)(id)CFArrayGetValueAtIndex(v6, 0);
      v8 = COERCE_DOUBLE(sub_1A15A8FD0());
      v10 = v9;
      if ((v11 & 1) != 0)
      {
        v10 = 0.0;
        v8 = 0.0;
      }
      VNNormalizedPointForImagePoint(*(CGPoint *)&v8, a2, a3);
      VNVerticallyFlippedNormalizedPoint();
      v13 = v12;
      v15 = v14;
      v3 = sub_1A130DF90(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v17 = *((_QWORD *)v3 + 2);
      v16 = *((_QWORD *)v3 + 3);
      if (v17 >= v16 >> 1)
        v3 = sub_1A130DF90((char *)(v16 > 1), v17 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v17 + 1;
      v18 = &v3[16 * v17];
      *((_QWORD *)v18 + 4) = v13;
      *((_QWORD *)v18 + 5) = v15;

      v19 = (id)(id)CFArrayGetValueAtIndex(v6, 1);
      v20 = COERCE_DOUBLE(sub_1A15A8FD0());
      v22 = v21;
      if ((v23 & 1) != 0)
      {
        v22 = 0.0;
        v20 = 0.0;
      }
      VNNormalizedPointForImagePoint(*(CGPoint *)&v20, a2, a3);
      VNVerticallyFlippedNormalizedPoint();
      v25 = v24;
      v27 = v26;
      v29 = *((_QWORD *)v3 + 2);
      v28 = *((_QWORD *)v3 + 3);
      if (v29 >= v28 >> 1)
        v3 = sub_1A130DF90((char *)(v28 > 1), v29 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v29 + 1;
      v30 = &v3[16 * v29];
      *((_QWORD *)v30 + 4) = v25;
      *((_QWORD *)v30 + 5) = v27;

      v31 = (id)(id)CFArrayGetValueAtIndex(v6, 2);
      v32 = COERCE_DOUBLE(sub_1A15A8FD0());
      v34 = v33;
      if ((v35 & 1) != 0)
      {
        v34 = 0.0;
        v32 = 0.0;
      }
      VNNormalizedPointForImagePoint(*(CGPoint *)&v32, a2, a3);
      VNVerticallyFlippedNormalizedPoint();
      v37 = v36;
      v39 = v38;
      v41 = *((_QWORD *)v3 + 2);
      v40 = *((_QWORD *)v3 + 3);
      if (v41 >= v40 >> 1)
        v3 = sub_1A130DF90((char *)(v40 > 1), v41 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v41 + 1;
      v42 = &v3[16 * v41];
      *((_QWORD *)v42 + 4) = v37;
      *((_QWORD *)v42 + 5) = v39;

      v43 = (id)(id)CFArrayGetValueAtIndex(v6, 3);
      v44 = COERCE_DOUBLE(sub_1A15A8FD0());
      v46 = v45;
      if ((v47 & 1) != 0)
      {
        v46 = 0.0;
        v44 = 0.0;
      }
      VNNormalizedPointForImagePoint(*(CGPoint *)&v44, a2, a3);
      VNVerticallyFlippedNormalizedPoint();
      v49 = v48;
      v51 = v50;
      v53 = *((_QWORD *)v3 + 2);
      v52 = *((_QWORD *)v3 + 3);
      if (v53 >= v52 >> 1)
        v3 = sub_1A130DF90((char *)(v52 > 1), v53 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v53 + 1;
      v54 = &v3[16 * v53];
      *((_QWORD *)v54 + 4) = v49;
      *((_QWORD *)v54 + 5) = v51;

    }
    else
    {
      sub_1A1288000();
      swift_allocError();
      *(_QWORD *)v56 = 0xD000000000000025;
      *(_QWORD *)(v56 + 8) = 0x80000001A15FD4F0;
      *(_BYTE *)(v56 + 16) = 0;
      swift_willThrow();

    }
  }
  else
  {
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v55 = 0xD000000000000022;
    *(_QWORD *)(v55 + 8) = 0x80000001A15FD4C0;
    *(_BYTE *)(v55 + 16) = 0;
    swift_willThrow();
  }
  return v3;
}

void type metadata accessor for CFArray(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE5FEDD0);
}

void sub_1A130D08C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  uint64_t v7;
  uint64_t v8;
  id v16;
  char v17;
  uint64_t v18;
  double Width;
  double Height;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  CGRect v37;
  CGRect v38;

  if (!MRCDescriptorCopyAttribute())
    goto LABEL_27;
  type metadata accessor for CFString(0);
  v16 = (id)swift_dynamicCastUnknownClassUnconditional();
  sub_1A1311D1C(v16, (char *)&v35);
  v17 = v35;
  if (v35 == 25)
  {
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v18 = 0xD000000000000015;
    *(_QWORD *)(v18 + 8) = 0x80000001A15FD520;
    *(_BYTE *)(v18 + 16) = 0;
    swift_willThrow();
LABEL_16:

    return;
  }
  v37.origin.x = a4;
  v37.origin.y = a5;
  v37.size.width = a6;
  v37.size.height = a7;
  Width = CGRectGetWidth(v37);
  if ((~*(_QWORD *)&Width & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (Width <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v38.origin.x = a4;
  v38.origin.y = a5;
  v38.size.width = a6;
  v38.size.height = a7;
  Height = CGRectGetHeight(v38);
  if ((~*(_QWORD *)&Height & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (Height <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (Height >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v21 = (_QWORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v7 + 200))(a1, (uint64_t)Width, (uint64_t)Height);
  if (v8)
    goto LABEL_16;
  v36 = v17;
  v22 = v21[2];
  if (!v22)
    goto LABEL_23;
  if (v22 == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v22 >= 3)
  {
    if (v22 != 3)
    {
      v23 = v21[4];
      v24 = v21[5];
      v25 = v21[6];
      v26 = v21[7];
      v28 = v21[8];
      v27 = v21[9];
      v29 = v21[10];
      v30 = v21[11];
      v31 = a1;
      v32 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 120))(&v35, v32);
      v33 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = v33;
      sub_1A12EF790(v31, &v36, &v34, a2, a3, v23, v24, v25, v26, v28, v27, v29, v30);
      goto LABEL_16;
    }
    goto LABEL_26;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

id sub_1A130D348(_QWORD *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  void (*v11)(__int128 *__return_ptr, __n128);
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void (*v21)(__int128 *__return_ptr);
  uint64_t v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  id v30;
  size_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  void *v39;
  int v41;
  uint64_t v42;
  void *v43;
  uint64_t (*v44)(__int128 *);
  id v45;
  void (*v46)(__int128 *, _QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(__int128 *);
  void (*v51)(__int128 *, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(__int128 *, _QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void (*v61)(__int128 *__return_ptr, uint64_t);
  char v62;
  uint64_t (*v63)(_QWORD *, _QWORD);
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  id v68;
  uint64_t v69;
  void *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  id v75;
  id v76;
  void *v77;
  void *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  id v85;
  void *v86;
  uint64_t DescriptorCount;
  void (*v88)(double, double, double, double);
  uint64_t (*v89)(_QWORD);
  _QWORD *v90;
  void *v91;
  id v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t (*v101)(_QWORD *);
  id v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  __int128 v107;
  __int128 v108;
  _QWORD v109[4];
  __int128 v110;
  unsigned __int8 v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120[52];
  uint64_t v121;

  v3 = v1;
  v106 = a1;
  v121 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for BarcodeObservation();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v105 = (uint64_t)&v95 - v10;
  v11 = *(void (**)(__int128 *__return_ptr, __n128))(*(_QWORD *)v1 + 120);
  v11(&v110, v9);
  v13 = v117;
  v12 = v118;
  v14 = (id)*((_QWORD *)&v110 + 1);
  swift_bridgeObjectRelease();
  v15 = swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_4;
  v103 = v5;
  v104 = v7;
  v16 = (void *)v106[10];
  ((void (*)(__int128 *__return_ptr, uint64_t))v11)(&v110, v15);
  v17 = v119;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v16;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v13, v12, v17);
  if (v2)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v19 = 0xD000000000000022;
    *(_QWORD *)(v19 + 8) = 0x80000001A15FD540;
    *(_BYTE *)(v19 + 16) = 8;
    swift_willThrow();
    return v14;
  }
  v20 = (void *)v18;
  v21 = (void (*)(__int128 *__return_ptr))v11;
  swift_bridgeObjectRelease();
  v22 = swift_bridgeObjectRelease();
  v23 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 184))(v22);
  v24 = (void *)(*(uint64_t (**)(void))(*v106 + 112))();
  v21(&v110);
  v25 = *(double *)&v112;
  v26 = v113;
  v27 = v114;
  v28 = v115;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v24, sel_width);
  v30 = objc_msgSend(v24, sel_height);
  type metadata accessor for BarcodeDetectorPerformingOperation();
  v31 = (size_t)v29;
  v14 = v3;
  v32 = sub_1A12E17D4(v31, (size_t)v30, v25, v26, v27, v28);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v39 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v3 + 192))(v24);
  if (v39)
  {
    v102 = v39;
    v97 = v24;
    v100 = v20;
    v21(&v110);
    v41 = v111;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v42 = swift_bridgeObjectRelease();
    if (v41 == 1)
    {
      ((void (*)(__int128 *__return_ptr, uint64_t))v21)(&v107, v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v43 = (void *)v106[2];
    v44 = *(uint64_t (**)(__int128 *))(*(_QWORD *)v3 + 136);
    v45 = v43;
    v46 = (void (*)(__int128 *, _QWORD))v44(&v110);
    sub_1A1337E10(v43);
    v46(&v110, 0);
    v47 = sub_1A15A8BB0();
    v49 = v48;
    *(double *)&v112 = COERCE_DOUBLE(sub_1A128DB40(0, (unint64_t *)&unk_1EE5FFAD0));
    *(_QWORD *)&v110 = v23;
    v99 = v23;
    v50 = v44;
    v101 = (uint64_t (*)(_QWORD *))v44;
    v51 = (void (*)(__int128 *, _QWORD))v44(&v107);
    sub_1A128D188((uint64_t)&v110, v47, v49);
    v51(&v107, 0);
    v52 = sub_1A15A8BB0();
    v54 = v53;
    type metadata accessor for MRCSample(0);
    v112 = v55;
    *(_QWORD *)&v110 = v102;
    v98 = v102;
    v56 = (void (*)(__int128 *, _QWORD))v50(&v107);
    sub_1A128D188((uint64_t)&v110, v52, v54);
    v56(&v107, 0);
    v57 = sub_1A15A8BB0();
    v59 = v58;
    v21(&v110);
    v60 = v3;
    v61 = (void (*)(__int128 *__return_ptr, uint64_t))v21;
    v62 = v116;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *((_QWORD *)&v108 + 1) = MEMORY[0x1E0DEAFA0];
    LOBYTE(v107) = v62;
    v63 = (uint64_t (*)(_QWORD *, _QWORD))v101(v109);
    sub_1A128D188((uint64_t)&v107, v57, v59);
    v64 = v63(v109, 0);
    v61(&v110, v64);
    v65 = v119;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A128FDD0(v65);
    swift_bridgeObjectRelease();
    v66 = objc_allocWithZone(MEMORY[0x1E0C99E08]);
    v67 = (void *)sub_1A15A8AD8();
    swift_bridgeObjectRelease();
    v68 = objc_msgSend(v66, sel_initWithDictionary_, v67);

    v69 = qos_class_self();
    v102 = v60;
    ((void (*)(__int128 *__return_ptr))v61)(&v110);
    v70 = v68;
    v71 = *(double *)&v112;
    v72 = v113;
    v73 = v114;
    v74 = v115;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v107 = 0;
    v75 = v100;
    v76 = objc_msgSend(v100, sel_processUsingQualityOfServiceClass_options_regionOfInterest_warningRecorder_error_progressHandler_, v69, v70, 0, &v107, 0, v71, v72, v73, v74);
    v77 = (void *)v107;
    if (v76)
    {
      v78 = v76;
      v79 = sub_1A15A8C40();
      v80 = v77;

      if (*(_QWORD *)(v79 + 16))
      {
        sub_1A128E764(v79 + 32, (uint64_t)&v107);
      }
      else
      {
        v107 = 0u;
        v108 = 0u;
      }
      v82 = v105;
      v84 = v98;
      v83 = v99;
      v85 = v102;
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v108 + 1))
      {
        sub_1A12880A0(&v107, &v110);
        sub_1A128E764((uint64_t)&v110, (uint64_t)&v107);
        type metadata accessor for MRCDecoderResult(0);
        swift_dynamicCast();
        v86 = (void *)v109[0];
        DescriptorCount = MRCDecoderResultGetDescriptorCount();
        if (DescriptorCount < 0)
          __break(1u);
        v96 = v70;
        if (DescriptorCount)
        {
          v101 = (uint64_t (*)(_QWORD *))DescriptorCount;
          v88 = *(void (**)(double, double, double, double))(*(_QWORD *)v85 + 208);
          sub_1A128465C((uint64_t)(v106 + 3), (uint64_t)v120);
          v89 = 0;
          v90 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v91 = v86;
          do
          {
            v92 = (id)MRCDecoderResultGetDescriptorAtIndex();
            v88(v32, v34, v36, v38);
            sub_1A12F1C0C(v82, (uint64_t)v104);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v90 = (_QWORD *)sub_1A130E0E4(0, v90[2] + 1, 1, v90);
            v94 = v90[2];
            v93 = v90[3];
            if (v94 >= v93 >> 1)
              v90 = (_QWORD *)sub_1A130E0E4(v93 > 1, v94 + 1, 1, v90);
            v89 = (uint64_t (*)(_QWORD))((char *)v89 + 1);
            v90[2] = v94 + 1;
            sub_1A130E258((uint64_t)v104, (uint64_t)v90+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(_QWORD *)(v103 + 72) * v94);

            v82 = v105;
            sub_1A12F1C50(v105);
          }
          while ((char *)v101 != (char *)v89);
        }
        else
        {
          v90 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v91 = v86;
        }
        v14 = (id)sub_1A130DCB0((uint64_t)v90);
        swift_bridgeObjectRelease();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v110);
      }
      else
      {
        sub_1A129FA6C((uint64_t)&v107);

        return (id)MEMORY[0x1E0DEE9D8];
      }
    }
    else
    {
      v14 = (id)v107;
      sub_1A15A8844();

      swift_willThrow();
    }
  }
  else
  {
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v81 = 0xD000000000000024;
    *(_QWORD *)(v81 + 8) = 0x80000001A15FD570;
    *(_BYTE *)(v81 + 16) = 8;
    swift_willThrow();

  }
  return v14;
}

uint64_t sub_1A130DCB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v2 = type metadata accessor for BarcodeObservation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1A1287244(0, v6, 0);
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_1A12F1C0C(v8, (uint64_t)v5);
      swift_dynamicCast();
      v7 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A1287244(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v15;
      }
      v11 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_1A1287244((char *)(v10 > 1), v11 + 1, 1);
        v7 = v15;
      }
      *(_QWORD *)(v7 + 16) = v11 + 1;
      sub_1A12880A0(&v14, (_OWORD *)(v7 + 32 * v11 + 32));
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_1A130DE1C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void (*sub_1A130DE6C(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
  return sub_1A12877F4;
}

uint64_t sub_1A130DEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
  return sub_1A130E4B8(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v2);
}

uint64_t sub_1A130DF10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t sub_1A130DF28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A129BC28;
  return sub_1A12E17E8(a1, a2, (uint64_t)&off_1E4537230);
}

char *sub_1A130DF90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE600390);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE5FEDC8);
}

uint64_t type metadata accessor for BarcodeDetectorPerformingOperation()
{
  return objc_opt_self();
}

void type metadata accessor for MRCSample(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE5FEDC0);
}

void type metadata accessor for MRCDecoderResult(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE5FEDB8);
}

size_t sub_1A130E0E4(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDD18);
  v10 = *(_QWORD *)(type metadata accessor for BarcodeObservation() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for BarcodeObservation() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

uint64_t sub_1A130E258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BarcodeObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for BarcodeDetectorPerformingOperation.Options()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BarcodeDetectorPerformingOperation.Options(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BarcodeDetectorPerformingOperation.Options(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BarcodeDetectorPerformingOperation.Options(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BarcodeDetectorPerformingOperation.Options()
{
  return &type metadata for BarcodeDetectorPerformingOperation.Options;
}

uint64_t sub_1A130E4B8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1A130E4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x1A1B08EC4](a1, v4, AssociatedTypeWitness, &type metadata for Joint, AssociatedConformanceWitness);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A130E584(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  char v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int v43;
  _OWORD v44[2];
  int v45;
  uint64_t v46;

  v40 = a3;
  v38 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v7;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v32 - v10;
  v37 = v4;
  v39 = a2;
  v12 = swift_getAssociatedTypeWitness();
  v13 = sub_1A15A9024();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v32 - v15;
  v17 = *(_QWORD *)(v12 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v32 - v20;
  (*(void (**)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t, __n128))(v14 + 16))(v16, v38, v13, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return (*(uint64_t (**)(uint64_t))(v40 + 24))(v39);
  }
  v23 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v35 = v12;
  v23(v21, v16, v12);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v40 + 32))(v21, v39);
  v34 = v17;
  v33 = v21;
  if (!v24)
    v24 = sub_1A15A8C70();
  v25 = v24;
  swift_getTupleTypeMetadata2();
  sub_1A15A8C70();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v46 = sub_1A15A8AFC();
  if (MEMORY[0x1A1B09068](v25, AssociatedTypeWitness))
  {
    v27 = 0;
    v38 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 24);
    do
    {
      v28 = sub_1A15A8C88();
      sub_1A15A8C58();
      if ((v28 & 1) != 0)
      {
        v29 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        v29(v11, v25+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v27, AssociatedTypeWitness);
        v30 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_14;
      }
      else
      {
        result = sub_1A15A90C0();
        if (v36 != 8)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)&v44[0] = result;
        v29 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        v29(v11, (unint64_t)v44, AssociatedTypeWitness);
        swift_unknownObjectRelease();
        v30 = v27 + 1;
        if (__OFADD__(v27, 1))
        {
LABEL_14:
          __break(1u);
          break;
        }
      }
      v29(v8, (unint64_t)v11, AssociatedTypeWitness);
      v31 = v38(v39, v40);
      MEMORY[0x1A1B08EC4](v44, v11, v31, AssociatedTypeWitness, &type metadata for Joint, AssociatedConformanceWitness);
      swift_bridgeObjectRelease();
      v41 = v44[0];
      v42 = v44[1];
      v43 = v45;
      sub_1A15A8B14();
      sub_1A15A8B2C();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, AssociatedTypeWitness);
      ++v27;
    }
    while (v30 != MEMORY[0x1A1B09068](v25, AssociatedTypeWitness));
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
  return v46;
}

uint64_t sub_1A130E96C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(void))(a2 + 24))();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v2 = sub_1A15A8B08();
  MEMORY[0x1A1B0B774](MEMORY[0x1E0DE9ED0], v2);
  return sub_1A15A8CDC();
}

uint64_t sub_1A130EA34()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  swift_checkMetadataState();
  sub_1A15A909C();
  sub_1A15A8CD0();
  swift_dynamicCast();
  return v2;
}

uint64_t dispatch thunk of PoseProviding.availableJointNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PoseProviding.availableJointsGroupNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of PoseProviding.joint(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of PoseProviding.allJoints(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t sub_1A130EB5C()
{
  sub_1A130F2FC();
  return sub_1A15A9474();
}

uint64_t sub_1A130EB84()
{
  sub_1A130F2FC();
  return sub_1A15A9480();
}

uint64_t sub_1A130EBAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A130EBE4 + 4 * byte_1A15CE9D0[a1]))(0x72437265746E6563, 0xEA0000000000706FLL);
}

uint64_t sub_1A130EBE4()
{
  return 0x466F54656C616373;
}

uint64_t sub_1A130EBFC()
{
  return 0x466F54656C616373;
}

unint64_t sub_1A130EC1C()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1A130EC38()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1A130EC58()
{
  unsigned __int8 *v0;

  return sub_1A130EBAC(*v0);
}

uint64_t sub_1A130EC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A13196E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A130EC84()
{
  sub_1A130F1A8();
  return sub_1A15A9474();
}

uint64_t sub_1A130ECAC()
{
  sub_1A130F1A8();
  return sub_1A15A9480();
}

uint64_t sub_1A130ECD4()
{
  sub_1A130F274();
  return sub_1A15A9474();
}

uint64_t sub_1A130ECFC()
{
  sub_1A130F274();
  return sub_1A15A9480();
}

uint64_t sub_1A130ED24()
{
  sub_1A130F1EC();
  return sub_1A15A9474();
}

uint64_t sub_1A130ED4C()
{
  sub_1A130F1EC();
  return sub_1A15A9480();
}

uint64_t sub_1A130ED74()
{
  sub_1A130F2B8();
  return sub_1A15A9474();
}

uint64_t sub_1A130ED9C()
{
  sub_1A130F2B8();
  return sub_1A15A9480();
}

uint64_t sub_1A130EDC4()
{
  sub_1A130F230();
  return sub_1A15A9474();
}

uint64_t sub_1A130EDEC()
{
  sub_1A130F230();
  return sub_1A15A9480();
}

void *static ImageCropAndScaleAction.allCases.getter()
{
  return &unk_1E4531830;
}

void ImageCropAndScaleAction.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEDD8);
  v14[11] = *(_QWORD *)(v3 - 8);
  v14[12] = v3;
  MEMORY[0x1E0C80A78](v3);
  v14[10] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEDE0);
  v14[8] = *(_QWORD *)(v5 - 8);
  v14[9] = v5;
  MEMORY[0x1E0C80A78](v5);
  v14[7] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEDE8);
  v14[5] = *(_QWORD *)(v7 - 8);
  v14[6] = v7;
  MEMORY[0x1E0C80A78](v7);
  v14[4] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEDF0);
  v14[2] = *(_QWORD *)(v9 - 8);
  v14[3] = v9;
  MEMORY[0x1E0C80A78](v9);
  v14[1] = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEDF8);
  MEMORY[0x1E0C80A78](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE00);
  v14[14] = *(_QWORD *)(v12 - 8);
  v14[15] = v12;
  MEMORY[0x1E0C80A78](v12);
  v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A130F1A8();
  sub_1A15A9468();
  __asm { BR              X9 }
}

uint64_t sub_1A130F014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 69) = 0;
  sub_1A130F2FC();
  v5 = *(_QWORD *)(v4 - 88);
  sub_1A15A92AC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v5);
}

unint64_t sub_1A130F1A8()
{
  unint64_t result;

  result = qword_1EE61A810;
  if (!qword_1EE61A810)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D183C, &type metadata for ImageCropAndScaleAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A810);
  }
  return result;
}

unint64_t sub_1A130F1EC()
{
  unint64_t result;

  result = qword_1EE61A818;
  if (!qword_1EE61A818)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D17EC, &type metadata for ImageCropAndScaleAction.ScaleToFillPlus90CCWRotationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A818);
  }
  return result;
}

unint64_t sub_1A130F230()
{
  unint64_t result;

  result = qword_1EE61A820;
  if (!qword_1EE61A820)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D179C, &type metadata for ImageCropAndScaleAction.ScaleToFitPlus90CCWRotationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A820);
  }
  return result;
}

unint64_t sub_1A130F274()
{
  unint64_t result;

  result = qword_1EE61A828;
  if (!qword_1EE61A828)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D174C, &type metadata for ImageCropAndScaleAction.ScaleToFillCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A828);
  }
  return result;
}

unint64_t sub_1A130F2B8()
{
  unint64_t result;

  result = qword_1EE61A830;
  if (!qword_1EE61A830)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D16FC, &type metadata for ImageCropAndScaleAction.ScaleToFitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A830);
  }
  return result;
}

unint64_t sub_1A130F2FC()
{
  unint64_t result;

  result = qword_1EE61A838;
  if (!qword_1EE61A838)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D16AC, &type metadata for ImageCropAndScaleAction.CenterCropCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A838);
  }
  return result;
}

uint64_t ImageCropAndScaleAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[4];
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v42 = a2;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE08);
  v34 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v40 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE10);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE18);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x1E0C80A78](v6);
  v38 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE20);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x1E0C80A78](v8);
  v37 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE28);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE30);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_1A130F1A8();
  v19 = v44;
  sub_1A15A945C();
  if (!v19)
  {
    v27[2] = v10;
    v27[3] = v13;
    v27[1] = v11;
    v44 = v15;
    v28 = v17;
    v29 = v14;
    v20 = sub_1A15A9294();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X9 }
    v21 = sub_1A15A90F0();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v23 = &type metadata for ImageCropAndScaleAction;
    v24 = v28;
    v25 = v29;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC450], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v25);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
}

void sub_1A130F83C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E45318E8;
}

uint64_t sub_1A130F84C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ImageCropAndScaleAction.init(from:)(a1, a2);
}

void sub_1A130F860(_QWORD *a1)
{
  ImageCropAndScaleAction.encode(to:)(a1);
}

uint64_t sub_1A130F874()
{
  _BYTE *v0;

  if (*v0)
    return 0x7468676972;
  else
    return 1952867692;
}

uint64_t sub_1A130F8A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1319900(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A130F8C8()
{
  sub_1A130FB8C();
  return sub_1A15A9474();
}

uint64_t sub_1A130F8F0()
{
  sub_1A130FB8C();
  return sub_1A15A9480();
}

uint64_t sub_1A130F918()
{
  sub_1A130FC14();
  return sub_1A15A9474();
}

uint64_t sub_1A130F940()
{
  sub_1A130FC14();
  return sub_1A15A9480();
}

uint64_t sub_1A130F968()
{
  sub_1A130FBD0();
  return sub_1A15A9474();
}

uint64_t sub_1A130F990()
{
  sub_1A130FBD0();
  return sub_1A15A9480();
}

uint64_t Chirality.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE38);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE40);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE48);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A130FB8C();
  sub_1A15A9468();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A130FBD0();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A130FC14();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_1A130FB8C()
{
  unint64_t result;

  result = qword_1EE61A840;
  if (!qword_1EE61A840)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D165C, &type metadata for Chirality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A840);
  }
  return result;
}

unint64_t sub_1A130FBD0()
{
  unint64_t result;

  result = qword_1EE61A848;
  if (!qword_1EE61A848)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D160C, &type metadata for Chirality.RightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A848);
  }
  return result;
}

unint64_t sub_1A130FC14()
{
  unint64_t result;

  result = qword_1EE61A850;
  if (!qword_1EE61A850)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D15BC, &type metadata for Chirality.LeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A850);
  }
  return result;
}

uint64_t Chirality.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE50);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE58);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE60);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A130FB8C();
  v11 = v33;
  sub_1A15A945C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A15A9294();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A15A90F0();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v21 = &type metadata for Chirality;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A130FBD0();
    sub_1A15A9204();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A130FC14();
    v22 = v6;
    sub_1A15A9204();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_1A130FFB4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Chirality.init(from:)(a1, a2);
}

uint64_t sub_1A130FFC8(_QWORD *a1)
{
  return Chirality.encode(to:)(a1);
}

uint64_t sub_1A130FFDC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A1310008 + 4 * byte_1A15CE9DF[a1]))(1701736302, 0xE400000000000000);
}

uint64_t sub_1A1310008()
{
  return 0x6969637361;
}

uint64_t sub_1A131001C()
{
  return 0x6873696C676E65;
}

uint64_t sub_1A1310104()
{
  return 0x68736964657773;
}

uint64_t sub_1A131011C()
{
  sub_1A131114C();
  return sub_1A15A9474();
}

uint64_t sub_1A1310144()
{
  sub_1A131114C();
  return sub_1A15A9480();
}

uint64_t sub_1A131016C()
{
  unsigned __int8 *v0;

  return sub_1A130FFDC(*v0);
}

uint64_t sub_1A1310174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A13199D8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A1310198(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1A13101A4()
{
  sub_1A1310E1C();
  return sub_1A15A9474();
}

uint64_t sub_1A13101CC()
{
  sub_1A1310E1C();
  return sub_1A15A9480();
}

uint64_t sub_1A13101F4()
{
  sub_1A13110C4();
  return sub_1A15A9474();
}

uint64_t sub_1A131021C()
{
  sub_1A13110C4();
  return sub_1A15A9480();
}

uint64_t sub_1A1310244()
{
  sub_1A1311080();
  return sub_1A15A9474();
}

uint64_t sub_1A131026C()
{
  sub_1A1311080();
  return sub_1A15A9480();
}

uint64_t sub_1A1310294()
{
  sub_1A1311108();
  return sub_1A15A9474();
}

uint64_t sub_1A13102BC()
{
  sub_1A1311108();
  return sub_1A15A9480();
}

uint64_t sub_1A13102E4()
{
  sub_1A131103C();
  return sub_1A15A9474();
}

uint64_t sub_1A131030C()
{
  sub_1A131103C();
  return sub_1A15A9480();
}

uint64_t sub_1A1310334()
{
  sub_1A1310FF8();
  return sub_1A15A9474();
}

uint64_t sub_1A131035C()
{
  sub_1A1310FF8();
  return sub_1A15A9480();
}

uint64_t sub_1A1310384()
{
  sub_1A1310FB4();
  return sub_1A15A9474();
}

uint64_t sub_1A13103AC()
{
  sub_1A1310FB4();
  return sub_1A15A9480();
}

uint64_t sub_1A13103D4()
{
  sub_1A1310F70();
  return sub_1A15A9474();
}

uint64_t sub_1A13103FC()
{
  sub_1A1310F70();
  return sub_1A15A9480();
}

uint64_t sub_1A1310424()
{
  sub_1A1311190();
  return sub_1A15A9474();
}

uint64_t sub_1A131044C()
{
  sub_1A1311190();
  return sub_1A15A9480();
}

uint64_t sub_1A1310474()
{
  sub_1A1310F2C();
  return sub_1A15A9474();
}

uint64_t sub_1A131049C()
{
  sub_1A1310F2C();
  return sub_1A15A9480();
}

uint64_t sub_1A13104C4()
{
  sub_1A1310EE8();
  return sub_1A15A9474();
}

uint64_t sub_1A13104EC()
{
  sub_1A1310EE8();
  return sub_1A15A9480();
}

uint64_t sub_1A1310514()
{
  sub_1A1310EA4();
  return sub_1A15A9474();
}

uint64_t sub_1A131053C()
{
  sub_1A1310EA4();
  return sub_1A15A9480();
}

uint64_t sub_1A1310564()
{
  sub_1A1310E60();
  return sub_1A15A9474();
}

uint64_t sub_1A131058C()
{
  sub_1A1310E60();
  return sub_1A15A9480();
}

void *static TextRecognitionCharacterSet.allCases.getter()
{
  return &unk_1E45358A0;
}

void TextRecognitionCharacterSet.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE68);
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  MEMORY[0x1E0C80A78](v3);
  v55 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE70);
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  MEMORY[0x1E0C80A78](v5);
  v52 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE78);
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  MEMORY[0x1E0C80A78](v7);
  v49 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE80);
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  MEMORY[0x1E0C80A78](v9);
  v46 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE88);
  v44 = *(_QWORD *)(v11 - 8);
  v45 = v11;
  MEMORY[0x1E0C80A78](v11);
  v43 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE90);
  v41 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v40 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEE98);
  v38 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v37 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEA0);
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v34 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEA8);
  v32 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v31 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEB0);
  v29 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v28 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEB8);
  v26 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v25 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEC0);
  v23[1] = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEC8);
  MEMORY[0x1E0C80A78](v19);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEED0);
  v58 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v21 = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1310E1C();
  v59 = v21;
  sub_1A15A9468();
  __asm { BR              X9 }
}

uint64_t sub_1A1310A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 93) = 0;
  sub_1A1311190();
  v5 = *(_QWORD *)(v3 - 112);
  v4 = *(_QWORD *)(v3 - 104);
  sub_1A15A92AC();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v5, v4);
}

unint64_t sub_1A1310E1C()
{
  unint64_t result;

  result = qword_1EE61A858;
  if (!qword_1EE61A858)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D156C, &type metadata for TextRecognitionCharacterSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A858);
  }
  return result;
}

unint64_t sub_1A1310E60()
{
  unint64_t result;

  result = qword_1EE61A860;
  if (!qword_1EE61A860)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D151C, &type metadata for TextRecognitionCharacterSet.SwedishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A860);
  }
  return result;
}

unint64_t sub_1A1310EA4()
{
  unint64_t result;

  result = qword_1EE61A868;
  if (!qword_1EE61A868)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D14CC, &type metadata for TextRecognitionCharacterSet.SpanishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A868);
  }
  return result;
}

unint64_t sub_1A1310EE8()
{
  unint64_t result;

  result = qword_1EE61A870;
  if (!qword_1EE61A870)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D147C, &type metadata for TextRecognitionCharacterSet.PortugueseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A870);
  }
  return result;
}

unint64_t sub_1A1310F2C()
{
  unint64_t result;

  result = qword_1EE61A878;
  if (!qword_1EE61A878)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D142C, &type metadata for TextRecognitionCharacterSet.NorwegianCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A878);
  }
  return result;
}

unint64_t sub_1A1310F70()
{
  unint64_t result;

  result = qword_1EE61A880;
  if (!qword_1EE61A880)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D13DC, &type metadata for TextRecognitionCharacterSet.ItalianCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A880);
  }
  return result;
}

unint64_t sub_1A1310FB4()
{
  unint64_t result;

  result = qword_1EE61A888;
  if (!qword_1EE61A888)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D138C, &type metadata for TextRecognitionCharacterSet.IcelandicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A888);
  }
  return result;
}

unint64_t sub_1A1310FF8()
{
  unint64_t result;

  result = qword_1EE61A890;
  if (!qword_1EE61A890)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D133C, &type metadata for TextRecognitionCharacterSet.GermanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A890);
  }
  return result;
}

unint64_t sub_1A131103C()
{
  unint64_t result;

  result = qword_1EE61A898;
  if (!qword_1EE61A898)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D12EC, &type metadata for TextRecognitionCharacterSet.FrenchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A898);
  }
  return result;
}

unint64_t sub_1A1311080()
{
  unint64_t result;

  result = qword_1EE61A8A0;
  if (!qword_1EE61A8A0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D129C, &type metadata for TextRecognitionCharacterSet.DutchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8A0);
  }
  return result;
}

unint64_t sub_1A13110C4()
{
  unint64_t result;

  result = qword_1EE61A8A8;
  if (!qword_1EE61A8A8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D124C, &type metadata for TextRecognitionCharacterSet.DanishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8A8);
  }
  return result;
}

unint64_t sub_1A1311108()
{
  unint64_t result;

  result = qword_1EE61A8B0;
  if (!qword_1EE61A8B0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D11FC, &type metadata for TextRecognitionCharacterSet.EnglishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8B0);
  }
  return result;
}

unint64_t sub_1A131114C()
{
  unint64_t result;

  result = qword_1EE61A8B8;
  if (!qword_1EE61A8B8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D11AC, &type metadata for TextRecognitionCharacterSet.AsciiCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8B8);
  }
  return result;
}

unint64_t sub_1A1311190()
{
  unint64_t result;

  result = qword_1EE61A8C0;
  if (!qword_1EE61A8C0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D115C, &type metadata for TextRecognitionCharacterSet.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8C0);
  }
  return result;
}

uint64_t TextRecognitionCharacterSet.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v34[4];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;

  v72 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEED8);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  MEMORY[0x1E0C80A78](v3);
  v68 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEE0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  MEMORY[0x1E0C80A78](v5);
  v67 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEE8);
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v66 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEF0);
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v65 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEEF8);
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v64 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF00);
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v71 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF08);
  v44 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v70 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF10);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v69 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF18);
  v42 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v63 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF20);
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v62 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF28);
  v38 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v61 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF30);
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v60 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF38);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF40);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1[3];
  v73 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  sub_1A1310E1C();
  v26 = v74;
  sub_1A15A945C();
  if (!v26)
  {
    v34[3] = v20;
    v34[1] = v18;
    v34[2] = v17;
    v74 = v22;
    v35 = v21;
    v27 = v24;
    v28 = sub_1A15A9294();
    if (*(_QWORD *)(v28 + 16) == 1)
      __asm { BR              X9 }
    v29 = sub_1A15A90F0();
    swift_allocError();
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v31 = &type metadata for TextRecognitionCharacterSet;
    v32 = v35;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x1E0DEC450], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v27, v32);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
}

void sub_1A1311CE4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E45358A0;
}

uint64_t sub_1A1311CF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TextRecognitionCharacterSet.init(from:)(a1, a2);
}

void sub_1A1311D08(_QWORD *a1)
{
  TextRecognitionCharacterSet.encode(to:)(a1);
}

void sub_1A1311D1C(void *a1@<X0>, char *a2@<X8>)
{
  void *v4;
  id v5;
  char v6;
  char v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  void *v12;
  id v13;
  id v14;
  char v15;
  void *v16;
  id v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  void *v24;
  id v25;
  id v26;
  char v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  char v34;
  void *v35;
  id v36;
  id v37;
  char v38;
  void *v39;
  id v40;
  id v41;
  char v42;
  void *v43;
  id v44;
  id v45;
  char v46;
  void *v47;
  id v48;
  id v49;
  char v50;
  void *v51;
  id v52;
  id v53;
  char v54;
  void *v55;
  id v56;
  id v57;
  char v58;
  void *v59;
  id v60;
  id v61;
  char v62;
  void *v63;
  id v64;
  id v65;
  char v66;
  void *v67;
  id v68;
  id v69;
  char v70;
  void *v71;
  id v72;
  id v73;
  char v74;
  void *v75;
  id v76;
  id v77;
  char v78;
  void *v79;
  id v80;
  id v81;
  char v82;
  void *v83;
  id v84;
  id v85;
  char v86;
  void *v87;
  id v88;
  id v89;
  char v90;
  void *v91;
  id v92;
  id v93;
  char v94;
  void *v95;
  id v96;
  id v97;
  char v98;

  v4 = (void *)*MEMORY[0x1E0D83370];
  type metadata accessor for CFString(0);
  sub_1A13189B0(&qword_1EE5FEF48, (uint64_t)&unk_1A15D1130);
  v5 = v4;
  v6 = sub_1A15A8A48();

  if ((v6 & 1) != 0)
  {
    v7 = 0;

  }
  else
  {
    v8 = (void *)*MEMORY[0x1E0D83388];
    v9 = a1;
    v10 = v8;
    v11 = sub_1A15A8A48();

    if ((v11 & 1) != 0)
    {
      v7 = 1;

    }
    else
    {
      v12 = (void *)*MEMORY[0x1E0D83390];
      v13 = v9;
      v14 = v12;
      v15 = sub_1A15A8A48();

      if ((v15 & 1) != 0)
      {
        v7 = 2;

      }
      else
      {
        v16 = (void *)*MEMORY[0x1E0D83398];
        v17 = v13;
        v18 = v16;
        v19 = sub_1A15A8A48();

        if ((v19 & 1) != 0)
        {
          v7 = 3;

        }
        else
        {
          v20 = (void *)*MEMORY[0x1E0D833A0];
          v21 = v17;
          v22 = v20;
          v23 = sub_1A15A8A48();

          if ((v23 & 1) != 0)
          {
            v7 = 4;

          }
          else
          {
            v24 = (void *)*MEMORY[0x1E0D833A8];
            v25 = v21;
            v26 = v24;
            v27 = sub_1A15A8A48();

            if ((v27 & 1) != 0)
            {
              v7 = 5;

            }
            else
            {
              v28 = (void *)*MEMORY[0x1E0D833B0];
              v29 = v25;
              v30 = v28;
              LOBYTE(v28) = sub_1A15A8A48();

              if ((v28 & 1) != 0)
              {

                v7 = 6;
              }
              else
              {
                v31 = (void *)*MEMORY[0x1E0D83380];
                v32 = v29;
                v33 = v31;
                v34 = sub_1A15A8A48();

                if ((v34 & 1) != 0)
                {

                  v7 = 7;
                }
                else
                {
                  v35 = (void *)*MEMORY[0x1E0D833B8];
                  v36 = v32;
                  v37 = v35;
                  v38 = sub_1A15A8A48();

                  if ((v38 & 1) != 0)
                  {

                    v7 = 8;
                  }
                  else
                  {
                    v39 = (void *)*MEMORY[0x1E0D833C8];
                    v40 = v36;
                    v41 = v39;
                    v42 = sub_1A15A8A48();

                    if ((v42 & 1) != 0)
                    {

                      v7 = 9;
                    }
                    else
                    {
                      v43 = (void *)*MEMORY[0x1E0D833C0];
                      v44 = v40;
                      v45 = v43;
                      v46 = sub_1A15A8A48();

                      if ((v46 & 1) != 0)
                      {

                        v7 = 10;
                      }
                      else
                      {
                        v47 = (void *)*MEMORY[0x1E0D833E8];
                        v48 = v44;
                        v49 = v47;
                        v50 = sub_1A15A8A48();

                        if ((v50 & 1) != 0)
                        {

                          v7 = 11;
                        }
                        else
                        {
                          v51 = (void *)*MEMORY[0x1E0D833F0];
                          v52 = v48;
                          v53 = v51;
                          v54 = sub_1A15A8A48();

                          if ((v54 & 1) != 0)
                          {

                            v7 = 12;
                          }
                          else
                          {
                            v55 = (void *)*MEMORY[0x1E0D833F8];
                            v56 = v52;
                            v57 = v55;
                            v58 = sub_1A15A8A48();

                            if ((v58 & 1) != 0)
                            {

                              v7 = 13;
                            }
                            else
                            {
                              v59 = (void *)*MEMORY[0x1E0D83418];
                              v60 = v56;
                              v61 = v59;
                              v62 = sub_1A15A8A48();

                              if ((v62 & 1) != 0)
                              {

                                v7 = 14;
                              }
                              else
                              {
                                v63 = (void *)*MEMORY[0x1E0D83440];
                                v64 = v60;
                                v65 = v63;
                                v66 = sub_1A15A8A48();

                                if ((v66 & 1) != 0)
                                {

                                  v7 = 15;
                                }
                                else
                                {
                                  v67 = (void *)*MEMORY[0x1E0D83448];
                                  v68 = v64;
                                  v69 = v67;
                                  v70 = sub_1A15A8A48();

                                  if ((v70 & 1) != 0)
                                  {

                                    v7 = 16;
                                  }
                                  else
                                  {
                                    v71 = (void *)*MEMORY[0x1E0D83378];
                                    v72 = v68;
                                    v73 = v71;
                                    v74 = sub_1A15A8A48();

                                    if ((v74 & 1) != 0)
                                    {

                                      v7 = 17;
                                    }
                                    else
                                    {
                                      v75 = (void *)*MEMORY[0x1E0D833D0];
                                      v76 = v72;
                                      v77 = v75;
                                      v78 = sub_1A15A8A48();

                                      if ((v78 & 1) != 0)
                                      {

                                        v7 = 18;
                                      }
                                      else
                                      {
                                        v79 = (void *)*MEMORY[0x1E0D833D8];
                                        v80 = v76;
                                        v81 = v79;
                                        v82 = sub_1A15A8A48();

                                        if ((v82 & 1) != 0)
                                        {

                                          v7 = 19;
                                        }
                                        else
                                        {
                                          v83 = (void *)*MEMORY[0x1E0D833E0];
                                          v84 = v80;
                                          v85 = v83;
                                          v86 = sub_1A15A8A48();

                                          if ((v86 & 1) != 0)
                                          {

                                            v7 = 20;
                                          }
                                          else
                                          {
                                            v87 = (void *)*MEMORY[0x1E0D83408];
                                            v88 = v84;
                                            v89 = v87;
                                            v90 = sub_1A15A8A48();

                                            if ((v90 & 1) != 0)
                                            {

                                              v7 = 21;
                                            }
                                            else
                                            {
                                              v91 = (void *)*MEMORY[0x1E0D83410];
                                              v92 = v88;
                                              v93 = v91;
                                              v94 = sub_1A15A8A48();

                                              if ((v94 & 1) != 0)
                                              {

                                                v7 = 22;
                                              }
                                              else
                                              {
                                                v95 = (void *)*MEMORY[0x1E0D83400];
                                                v96 = v92;
                                                v97 = v95;
                                                v98 = sub_1A15A8A48();

                                                if ((v98 & 1) != 0)
                                                  v7 = 23;
                                                else
                                                  v7 = 25;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *a2 = v7;
}

void sub_1A1312434(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  char v132;
  id v133;

  v4 = sub_1A15A8BB0();
  v6 = v5;
  if (v4 == sub_1A15A8BB0() && v6 == v7)
  {
    v10 = 0;
LABEL_13:
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  v9 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = 0;
  if ((v9 & 1) != 0)
  {
LABEL_14:

    goto LABEL_15;
  }
  v11 = sub_1A15A8BB0();
  v13 = v12;
  if (v11 == sub_1A15A8BB0() && v13 == v14)
  {
    v10 = 1;
    goto LABEL_13;
  }
  v16 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    v10 = 1;
    goto LABEL_14;
  }
  v17 = sub_1A15A8BB0();
  v19 = v18;
  if (v17 == sub_1A15A8BB0() && v19 == v20)
  {
    v10 = 2;
    goto LABEL_13;
  }
  v21 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    v10 = 2;
    goto LABEL_14;
  }
  v22 = sub_1A15A8BB0();
  v24 = v23;
  if (v22 == sub_1A15A8BB0() && v24 == v25)
  {
    v10 = 3;
    goto LABEL_13;
  }
  v26 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    v10 = 3;
    goto LABEL_14;
  }
  v27 = sub_1A15A8BB0();
  v29 = v28;
  if (v27 == sub_1A15A8BB0() && v29 == v30)
  {
    v10 = 4;
    goto LABEL_13;
  }
  v31 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
  {
    v10 = 4;
    goto LABEL_14;
  }
  v32 = sub_1A15A8BB0();
  v34 = v33;
  if (v32 == sub_1A15A8BB0() && v34 == v35)
  {
    v10 = 5;
    goto LABEL_13;
  }
  v36 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) != 0)
  {
    v10 = 5;
    goto LABEL_14;
  }
  v37 = sub_1A15A8BB0();
  v39 = v38;
  if (v37 == sub_1A15A8BB0() && v39 == v40)
  {
    v10 = 6;
    goto LABEL_13;
  }
  v41 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
  {
    v10 = 6;
    goto LABEL_14;
  }
  v42 = sub_1A15A8BB0();
  v44 = v43;
  if (v42 == sub_1A15A8BB0() && v44 == v45)
  {
    swift_bridgeObjectRelease_n();
LABEL_46:

    v10 = 7;
    goto LABEL_15;
  }
  v46 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v46 & 1) != 0)
    goto LABEL_46;
  v47 = sub_1A15A8BB0();
  v49 = v48;
  if (v47 == sub_1A15A8BB0() && v49 == v50)
  {
    swift_bridgeObjectRelease_n();
LABEL_51:

    v10 = 8;
    goto LABEL_15;
  }
  v51 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) != 0)
    goto LABEL_51;
  v52 = sub_1A15A8BB0();
  v54 = v53;
  if (v52 == sub_1A15A8BB0() && v54 == v55)
  {
    swift_bridgeObjectRelease_n();
LABEL_56:

    v10 = 9;
    goto LABEL_15;
  }
  v56 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0)
    goto LABEL_56;
  v57 = sub_1A15A8BB0();
  v59 = v58;
  if (v57 == sub_1A15A8BB0() && v59 == v60)
  {
    swift_bridgeObjectRelease_n();
LABEL_61:

    v10 = 10;
    goto LABEL_15;
  }
  v61 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v61 & 1) != 0)
    goto LABEL_61;
  v62 = sub_1A15A8BB0();
  v64 = v63;
  if (v62 == sub_1A15A8BB0() && v64 == v65)
  {
    swift_bridgeObjectRelease_n();
LABEL_66:

    v10 = 11;
    goto LABEL_15;
  }
  v66 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) != 0)
    goto LABEL_66;
  v67 = sub_1A15A8BB0();
  v69 = v68;
  if (v67 == sub_1A15A8BB0() && v69 == v70)
  {
    swift_bridgeObjectRelease_n();
LABEL_71:

    v10 = 12;
    goto LABEL_15;
  }
  v71 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) != 0)
    goto LABEL_71;
  v72 = sub_1A15A8BB0();
  v74 = v73;
  if (v72 == sub_1A15A8BB0() && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
LABEL_76:

    v10 = 13;
    goto LABEL_15;
  }
  v76 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) != 0)
    goto LABEL_76;
  v77 = sub_1A15A8BB0();
  v79 = v78;
  if (v77 == sub_1A15A8BB0() && v79 == v80)
  {
    swift_bridgeObjectRelease_n();
LABEL_81:

    v10 = 14;
    goto LABEL_15;
  }
  v81 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v81 & 1) != 0)
    goto LABEL_81;
  v82 = sub_1A15A8BB0();
  v84 = v83;
  if (v82 == sub_1A15A8BB0() && v84 == v85)
  {
    swift_bridgeObjectRelease_n();
LABEL_86:

    v10 = 15;
    goto LABEL_15;
  }
  v86 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v86 & 1) != 0)
    goto LABEL_86;
  v87 = sub_1A15A8BB0();
  v89 = v88;
  if (v87 == sub_1A15A8BB0() && v89 == v90)
  {
    swift_bridgeObjectRelease_n();
LABEL_91:

    v10 = 16;
    goto LABEL_15;
  }
  v91 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v91 & 1) != 0)
    goto LABEL_91;
  v92 = sub_1A15A8BB0();
  v94 = v93;
  if (v92 == sub_1A15A8BB0() && v94 == v95)
  {
    swift_bridgeObjectRelease_n();
LABEL_96:

    v10 = 17;
    goto LABEL_15;
  }
  v96 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v96 & 1) != 0)
    goto LABEL_96;
  v97 = sub_1A15A8BB0();
  v99 = v98;
  if (v97 == sub_1A15A8BB0() && v99 == v100)
  {
    swift_bridgeObjectRelease_n();
LABEL_101:

    v10 = 18;
    goto LABEL_15;
  }
  v101 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v101 & 1) != 0)
    goto LABEL_101;
  v102 = sub_1A15A8BB0();
  v104 = v103;
  if (v102 == sub_1A15A8BB0() && v104 == v105)
  {
    swift_bridgeObjectRelease_n();
LABEL_106:

    v10 = 19;
    goto LABEL_15;
  }
  v106 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v106 & 1) != 0)
    goto LABEL_106;
  v107 = sub_1A15A8BB0();
  v109 = v108;
  if (v107 == sub_1A15A8BB0() && v109 == v110)
  {
    swift_bridgeObjectRelease_n();
LABEL_111:

    v10 = 20;
    goto LABEL_15;
  }
  v111 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v111 & 1) != 0)
    goto LABEL_111;
  v112 = sub_1A15A8BB0();
  v114 = v113;
  if (v112 == sub_1A15A8BB0() && v114 == v115)
  {
    swift_bridgeObjectRelease_n();
LABEL_116:

    v10 = 21;
    goto LABEL_15;
  }
  v116 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v116 & 1) != 0)
    goto LABEL_116;
  v117 = sub_1A15A8BB0();
  v119 = v118;
  if (v117 == sub_1A15A8BB0() && v119 == v120)
  {
    swift_bridgeObjectRelease_n();
LABEL_121:

    v10 = 22;
    goto LABEL_15;
  }
  v121 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v121 & 1) != 0)
    goto LABEL_121;
  v122 = sub_1A15A8BB0();
  v124 = v123;
  if (v122 == sub_1A15A8BB0() && v124 == v125)
  {
    swift_bridgeObjectRelease_n();
LABEL_126:

    v10 = 23;
    goto LABEL_15;
  }
  v126 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v126 & 1) != 0)
    goto LABEL_126;
  v127 = sub_1A15A8BB0();
  v129 = v128;
  if (v127 == sub_1A15A8BB0() && v129 == v130)
  {
    v131 = a1;

    swift_bridgeObjectRelease_n();
    v10 = 24;
  }
  else
  {
    v132 = sub_1A15A9354();
    v133 = a1;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v132 & 1) != 0)
      v10 = 24;
    else
      v10 = 25;
  }
LABEL_15:
  *a2 = v10;
}

BOOL static BarcodeSymbology.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t BarcodeSymbology.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A13130F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A1313124 + 4 * byte_1A15CEA14[a1]))(0x6365747A61, 0xE500000000000000);
}

uint64_t sub_1A1313124()
{
  return 0x393365646F63;
}

uint64_t sub_1A1313138()
{
  return 0x6843393365646F63;
}

uint64_t sub_1A131315C()
{
  return 0x7546393365646F63;
}

unint64_t sub_1A1313180()
{
  return 0xD000000000000017;
}

unint64_t sub_1A13132E4()
{
  return 0xD000000000000011;
}

uint64_t sub_1A1313300()
{
  return 0x4644506F7263696DLL;
}

uint64_t sub_1A1313320()
{
  return 0x52516F7263696DLL;
}

uint64_t sub_1A1313338()
{
  return 0x7373656C5069736DLL;
}

uint64_t sub_1A1313358()
{
  return 0x4370696C43707061;
}

uint64_t sub_1A1313378()
{
  sub_1A131661C();
  return sub_1A15A9474();
}

uint64_t sub_1A13133A0()
{
  sub_1A131661C();
  return sub_1A15A9480();
}

uint64_t sub_1A13133C8()
{
  sub_1A1316C7C();
  return sub_1A15A9474();
}

uint64_t sub_1A13133F0()
{
  sub_1A1316C7C();
  return sub_1A15A9480();
}

uint64_t sub_1A1313418()
{
  sub_1A13167F8();
  return sub_1A15A9474();
}

uint64_t sub_1A1313440()
{
  sub_1A13167F8();
  return sub_1A15A9480();
}

uint64_t sub_1A1313468()
{
  sub_1A1316AA0();
  return sub_1A15A9474();
}

uint64_t sub_1A1313490()
{
  sub_1A1316AA0();
  return sub_1A15A9480();
}

uint64_t sub_1A13134B8()
{
  sub_1A1316BF4();
  return sub_1A15A9474();
}

uint64_t sub_1A13134E0()
{
  sub_1A1316BF4();
  return sub_1A15A9480();
}

uint64_t sub_1A1313508()
{
  sub_1A1316C38();
  return sub_1A15A9474();
}

uint64_t sub_1A1313530()
{
  sub_1A1316C38();
  return sub_1A15A9480();
}

uint64_t sub_1A1313558()
{
  sub_1A1316B6C();
  return sub_1A15A9474();
}

uint64_t sub_1A1313580()
{
  sub_1A1316B6C();
  return sub_1A15A9480();
}

uint64_t sub_1A13135A8()
{
  sub_1A1316BB0();
  return sub_1A15A9474();
}

uint64_t sub_1A13135D0()
{
  sub_1A1316BB0();
  return sub_1A15A9480();
}

uint64_t sub_1A13135F8()
{
  sub_1A1316B28();
  return sub_1A15A9474();
}

uint64_t sub_1A1313620()
{
  sub_1A1316B28();
  return sub_1A15A9480();
}

uint64_t sub_1A1313648()
{
  sub_1A1316AE4();
  return sub_1A15A9474();
}

uint64_t sub_1A1313670()
{
  sub_1A1316AE4();
  return sub_1A15A9480();
}

uint64_t sub_1A1313698()
{
  unsigned __int8 *v0;

  return sub_1A13130F4(*v0);
}

uint64_t sub_1A13136A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1319EF8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A13136C4(_BYTE *a1@<X8>)
{
  *a1 = 25;
}

uint64_t sub_1A13136D0()
{
  sub_1A13165D8();
  return sub_1A15A9474();
}

uint64_t sub_1A13136F8()
{
  sub_1A13165D8();
  return sub_1A15A9480();
}

uint64_t sub_1A1313720()
{
  sub_1A1316A5C();
  return sub_1A15A9474();
}

uint64_t sub_1A1313748()
{
  sub_1A1316A5C();
  return sub_1A15A9480();
}

uint64_t sub_1A1313770()
{
  sub_1A13169D4();
  return sub_1A15A9474();
}

uint64_t sub_1A1313798()
{
  sub_1A13169D4();
  return sub_1A15A9480();
}

uint64_t sub_1A13137C0()
{
  sub_1A1316A18();
  return sub_1A15A9474();
}

uint64_t sub_1A13137E8()
{
  sub_1A1316A18();
  return sub_1A15A9480();
}

uint64_t sub_1A1313810()
{
  sub_1A13167B4();
  return sub_1A15A9474();
}

uint64_t sub_1A1313838()
{
  sub_1A13167B4();
  return sub_1A15A9480();
}

uint64_t sub_1A1313860()
{
  sub_1A1316770();
  return sub_1A15A9474();
}

uint64_t sub_1A1313888()
{
  sub_1A1316770();
  return sub_1A15A9480();
}

uint64_t sub_1A13138B0()
{
  sub_1A131672C();
  return sub_1A15A9474();
}

uint64_t sub_1A13138D8()
{
  sub_1A131672C();
  return sub_1A15A9480();
}

uint64_t sub_1A1313900()
{
  sub_1A131694C();
  return sub_1A15A9474();
}

uint64_t sub_1A1313928()
{
  sub_1A131694C();
  return sub_1A15A9480();
}

uint64_t sub_1A1313950()
{
  sub_1A1316990();
  return sub_1A15A9474();
}

uint64_t sub_1A1313978()
{
  sub_1A1316990();
  return sub_1A15A9480();
}

uint64_t sub_1A13139A0()
{
  sub_1A1316908();
  return sub_1A15A9474();
}

uint64_t sub_1A13139C8()
{
  sub_1A1316908();
  return sub_1A15A9480();
}

uint64_t sub_1A13139F0()
{
  sub_1A13166E8();
  return sub_1A15A9474();
}

uint64_t sub_1A1313A18()
{
  sub_1A13166E8();
  return sub_1A15A9480();
}

uint64_t sub_1A1313A40()
{
  sub_1A13166A4();
  return sub_1A15A9474();
}

uint64_t sub_1A1313A68()
{
  sub_1A13166A4();
  return sub_1A15A9480();
}

uint64_t sub_1A1313A90()
{
  sub_1A1316660();
  return sub_1A15A9474();
}

uint64_t sub_1A1313AB8()
{
  sub_1A1316660();
  return sub_1A15A9480();
}

uint64_t sub_1A1313AE0()
{
  sub_1A13168C4();
  return sub_1A15A9474();
}

uint64_t sub_1A1313B08()
{
  sub_1A13168C4();
  return sub_1A15A9480();
}

uint64_t sub_1A1313B30()
{
  sub_1A1316880();
  return sub_1A15A9474();
}

uint64_t sub_1A1313B58()
{
  sub_1A1316880();
  return sub_1A15A9480();
}

uint64_t sub_1A1313B80()
{
  sub_1A131683C();
  return sub_1A15A9474();
}

uint64_t sub_1A1313BA8()
{
  sub_1A131683C();
  return sub_1A15A9480();
}

void *static BarcodeSymbology.allCases.getter()
{
  return &unk_1E452D570;
}

void BarcodeSymbology.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF50);
  v105 = *(_QWORD *)(v3 - 8);
  v106 = v3;
  MEMORY[0x1E0C80A78](v3);
  v104 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF58);
  v102 = *(_QWORD *)(v5 - 8);
  v103 = v5;
  MEMORY[0x1E0C80A78](v5);
  v101 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF60);
  v99 = *(_QWORD *)(v7 - 8);
  v100 = v7;
  MEMORY[0x1E0C80A78](v7);
  v98 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF68);
  v96 = *(_QWORD *)(v9 - 8);
  v97 = v9;
  MEMORY[0x1E0C80A78](v9);
  v95 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF70);
  v93 = *(_QWORD *)(v11 - 8);
  v94 = v11;
  MEMORY[0x1E0C80A78](v11);
  v92 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF78);
  v90 = *(_QWORD *)(v13 - 8);
  v91 = v13;
  MEMORY[0x1E0C80A78](v13);
  v89 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF80);
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v86 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF88);
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v83 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF90);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v80 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEF98);
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v77 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFA0);
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v74 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFA8);
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v71 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFB0);
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v68 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFB8);
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v65 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFC0);
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v62 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFC8);
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v59 = (char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFD0);
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v56 = (char *)&v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFD8);
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v53 = (char *)&v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFE0);
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v50 = (char *)&v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFE8);
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v47 = (char *)&v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFF0);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v44 = (char *)&v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEFF8);
  v42 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v41 = (char *)&v36 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF000);
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v38 = (char *)&v36 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF008);
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF010);
  MEMORY[0x1E0C80A78](v32);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF018);
  v107 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v34 = (char *)&v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13165D8();
  v108 = v34;
  sub_1A15A9468();
  __asm { BR              X9 }
}

uint64_t sub_1A13143F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 65) = 0;
  sub_1A1316C7C();
  v5 = *(_QWORD *)(v3 - 112);
  v4 = *(_QWORD *)(v3 - 104);
  sub_1A15A92AC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v5, v4);
}

uint64_t BarcodeSymbology.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD v44[5];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;

  v113 = a2;
  v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF020);
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v112 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF028);
  v44[4] = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v111 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF030);
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v110 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF038);
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v109 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF040);
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v108 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF048);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v107 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF050);
  v79 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v106 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF058);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v105 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF060);
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v104 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF068);
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v103 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF070);
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v102 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF078);
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v101 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF080);
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v100 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF088);
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v99 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF090);
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v116 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF098);
  v62 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v97 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0A0);
  v60 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v115 = (char *)v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0A8);
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v98 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0B0);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v92 = (char *)v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0B8);
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v96 = (char *)v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0C0);
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v95 = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0C8);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v94 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0D0);
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v93 = (char *)v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0D8);
  v46 = *(_QWORD *)(v114 - 8);
  MEMORY[0x1E0C80A78](v114);
  v91 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0E0);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)v44 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0E8);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)v44 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1[3];
  v117 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v35);
  sub_1A13165D8();
  v36 = v118;
  sub_1A15A945C();
  if (!v36)
  {
    v44[3] = v30;
    v44[1] = v28;
    v44[2] = v27;
    v118 = v31;
    v37 = v34;
    v38 = sub_1A15A9294();
    if (*(_QWORD *)(v38 + 16) == 1)
      __asm { BR              X9 }
    v39 = sub_1A15A90F0();
    swift_allocError();
    v41 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v41 = &type metadata for BarcodeSymbology;
    v42 = v118;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, *MEMORY[0x1E0DEC450], v39);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v42);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
}

void sub_1A1315E58(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E452D570;
}

uint64_t sub_1A1315E68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BarcodeSymbology.init(from:)(a1, a2);
}

void sub_1A1315E7C(_QWORD *a1)
{
  BarcodeSymbology.encode(to:)(a1);
}

BOOL static ElementType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ElementType.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A1315ED0()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C62756F64;
  else
    return 0x74616F6C66;
}

uint64_t sub_1A1315F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A131A8F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A1315F28()
{
  sub_1A1316CC0();
  return sub_1A15A9474();
}

uint64_t sub_1A1315F50()
{
  sub_1A1316CC0();
  return sub_1A15A9480();
}

uint64_t sub_1A1315F78()
{
  sub_1A1316D04();
  return sub_1A15A9474();
}

uint64_t sub_1A1315FA0()
{
  sub_1A1316D04();
  return sub_1A15A9480();
}

uint64_t sub_1A1315FC8()
{
  sub_1A1316D48();
  return sub_1A15A9474();
}

uint64_t sub_1A1315FF0()
{
  sub_1A1316D48();
  return sub_1A15A9480();
}

uint64_t ElementType.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0F0);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF0F8);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF100);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1316CC0();
  sub_1A15A9468();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A1316D04();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A1316D48();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

uint64_t ElementType.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF108);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF110);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF118);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1316CC0();
  v11 = v33;
  sub_1A15A945C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A15A9294();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A15A90F0();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v21 = &type metadata for ElementType;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A1316D04();
    sub_1A15A9204();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A1316D48();
    v22 = v6;
    sub_1A15A9204();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_1A1316548@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ElementType.init(from:)(a1, a2);
}

uint64_t sub_1A131655C(_QWORD *a1)
{
  return ElementType.encode(to:)(a1);
}

uint64_t sub_1A1316570@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 2)
    v2 = 1;
  else
    v2 = 2;
  if (result == 1)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_1A131658C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A1B0B774](&unk_1A15D1130, a3);
  return sub_1A15A8A48();
}

unint64_t sub_1A13165D8()
{
  unint64_t result;

  result = qword_1EE61A8C8;
  if (!qword_1EE61A8C8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D10E0, &type metadata for BarcodeSymbology.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8C8);
  }
  return result;
}

unint64_t sub_1A131661C()
{
  unint64_t result;

  result = qword_1EE61A8D0;
  if (!qword_1EE61A8D0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1090, &type metadata for BarcodeSymbology.AppClipCodeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8D0);
  }
  return result;
}

unint64_t sub_1A1316660()
{
  unint64_t result;

  result = qword_1EE61A8D8;
  if (!qword_1EE61A8D8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1040, &type metadata for BarcodeSymbology.MsiPlesseyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8D8);
  }
  return result;
}

unint64_t sub_1A13166A4()
{
  unint64_t result;

  result = qword_1EE61A8E0;
  if (!qword_1EE61A8E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0FF0, &type metadata for BarcodeSymbology.MicroQRCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8E0);
  }
  return result;
}

unint64_t sub_1A13166E8()
{
  unint64_t result;

  result = qword_1EE61A8E8;
  if (!qword_1EE61A8E8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0FA0, &type metadata for BarcodeSymbology.MicroPDF417CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8E8);
  }
  return result;
}

unint64_t sub_1A131672C()
{
  unint64_t result;

  result = qword_1EE61A8F0;
  if (!qword_1EE61A8F0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0F50, &type metadata for BarcodeSymbology.Gs1DataBarLimitedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8F0);
  }
  return result;
}

unint64_t sub_1A1316770()
{
  unint64_t result;

  result = qword_1EE61A8F8;
  if (!qword_1EE61A8F8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0F00, &type metadata for BarcodeSymbology.Gs1DataBarExpandedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A8F8);
  }
  return result;
}

unint64_t sub_1A13167B4()
{
  unint64_t result;

  result = qword_1EE61A900;
  if (!qword_1EE61A900)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0EB0, &type metadata for BarcodeSymbology.Gs1DataBarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A900);
  }
  return result;
}

unint64_t sub_1A13167F8()
{
  unint64_t result;

  result = qword_1EE61A908;
  if (!qword_1EE61A908)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0E60, &type metadata for BarcodeSymbology.CodabarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A908);
  }
  return result;
}

unint64_t sub_1A131683C()
{
  unint64_t result;

  result = qword_1EE61A910;
  if (!qword_1EE61A910)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0E10, &type metadata for BarcodeSymbology.UpceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A910);
  }
  return result;
}

unint64_t sub_1A1316880()
{
  unint64_t result;

  result = qword_1EE61A918;
  if (!qword_1EE61A918)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0DC0, &type metadata for BarcodeSymbology.QrCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A918);
  }
  return result;
}

unint64_t sub_1A13168C4()
{
  unint64_t result;

  result = qword_1EE61A920;
  if (!qword_1EE61A920)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0D70, &type metadata for BarcodeSymbology.Pdf417CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A920);
  }
  return result;
}

unint64_t sub_1A1316908()
{
  unint64_t result;

  result = qword_1EE61A928;
  if (!qword_1EE61A928)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0D20, &type metadata for BarcodeSymbology.Itf14CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A928);
  }
  return result;
}

unint64_t sub_1A131694C()
{
  unint64_t result;

  result = qword_1EE61A930;
  if (!qword_1EE61A930)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0CD0, &type metadata for BarcodeSymbology.I2of5ChecksumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A930);
  }
  return result;
}

unint64_t sub_1A1316990()
{
  unint64_t result;

  result = qword_1EE61A938;
  if (!qword_1EE61A938)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0C80, &type metadata for BarcodeSymbology.I2of5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A938);
  }
  return result;
}

unint64_t sub_1A13169D4()
{
  unint64_t result;

  result = qword_1EE61A940;
  if (!qword_1EE61A940)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0C30, &type metadata for BarcodeSymbology.Ean13CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A940);
  }
  return result;
}

unint64_t sub_1A1316A18()
{
  unint64_t result;

  result = qword_1EE61A948;
  if (!qword_1EE61A948)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0BE0, &type metadata for BarcodeSymbology.Ean8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A948);
  }
  return result;
}

unint64_t sub_1A1316A5C()
{
  unint64_t result;

  result = qword_1EE61A950;
  if (!qword_1EE61A950)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0B90, &type metadata for BarcodeSymbology.DataMatrixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A950);
  }
  return result;
}

unint64_t sub_1A1316AA0()
{
  unint64_t result;

  result = qword_1EE61A958;
  if (!qword_1EE61A958)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0B40, &type metadata for BarcodeSymbology.Code128CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A958);
  }
  return result;
}

unint64_t sub_1A1316AE4()
{
  unint64_t result;

  result = qword_1EE61A960;
  if (!qword_1EE61A960)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0AF0, &type metadata for BarcodeSymbology.Code93iCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A960);
  }
  return result;
}

unint64_t sub_1A1316B28()
{
  unint64_t result;

  result = qword_1EE61A968;
  if (!qword_1EE61A968)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0AA0, &type metadata for BarcodeSymbology.Code93CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A968);
  }
  return result;
}

unint64_t sub_1A1316B6C()
{
  unint64_t result;

  result = qword_1EE61A970;
  if (!qword_1EE61A970)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0A50, &type metadata for BarcodeSymbology.Code39FullASCIIChecksumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A970);
  }
  return result;
}

unint64_t sub_1A1316BB0()
{
  unint64_t result;

  result = qword_1EE61A978;
  if (!qword_1EE61A978)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0A00, &type metadata for BarcodeSymbology.Code39FullASCIICodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A978);
  }
  return result;
}

unint64_t sub_1A1316BF4()
{
  unint64_t result;

  result = qword_1EE61A980;
  if (!qword_1EE61A980)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D09B0, &type metadata for BarcodeSymbology.Code39ChecksumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A980);
  }
  return result;
}

unint64_t sub_1A1316C38()
{
  unint64_t result;

  result = qword_1EE61A988;
  if (!qword_1EE61A988)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0960, &type metadata for BarcodeSymbology.Code39CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A988);
  }
  return result;
}

unint64_t sub_1A1316C7C()
{
  unint64_t result;

  result = qword_1EE61A990;
  if (!qword_1EE61A990)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0910, &type metadata for BarcodeSymbology.AztecCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A990);
  }
  return result;
}

unint64_t sub_1A1316CC0()
{
  unint64_t result;

  result = qword_1EE61A998;
  if (!qword_1EE61A998)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D08C0, &type metadata for ElementType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A998);
  }
  return result;
}

unint64_t sub_1A1316D04()
{
  unint64_t result;

  result = qword_1EE61A9A0;
  if (!qword_1EE61A9A0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0870, &type metadata for ElementType.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61A9A0);
  }
  return result;
}

unint64_t sub_1A1316D48()
{
  unint64_t result;

  result = qword_1EE61A9A8[0];
  if (!qword_1EE61A9A8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0820, &type metadata for ElementType.FloatCodingKeys);
    atomic_store(result, qword_1EE61A9A8);
  }
  return result;
}

uint64_t sub_1A1316D8C()
{
  return sub_1A1316E8C(&qword_1EE5FF120, &qword_1EE5FF128);
}

unint64_t sub_1A1316DB4()
{
  unint64_t result;

  result = qword_1EE5FF130;
  if (!qword_1EE5FF130)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for ImageCropAndScaleAction, &type metadata for ImageCropAndScaleAction);
    atomic_store(result, (unint64_t *)&qword_1EE5FF130);
  }
  return result;
}

unint64_t sub_1A1316DFC()
{
  unint64_t result;

  result = qword_1EE5FF138;
  if (!qword_1EE5FF138)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for Chirality, &type metadata for Chirality);
    atomic_store(result, (unint64_t *)&qword_1EE5FF138);
  }
  return result;
}

uint64_t sub_1A1316E40()
{
  return sub_1A1316E8C(&qword_1EE5FF140, &qword_1EE5FF148);
}

uint64_t sub_1A1316E68()
{
  return sub_1A1316E8C(&qword_1EE5FF150, &qword_1EE5FF158);
}

uint64_t sub_1A1316E8C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A1316ED0()
{
  unint64_t result;

  result = qword_1EE5FF160;
  if (!qword_1EE5FF160)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for BarcodeSymbology, &type metadata for BarcodeSymbology);
    atomic_store(result, (unint64_t *)&qword_1EE5FF160);
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageCropAndScaleAction()
{
  return &type metadata for ImageCropAndScaleAction;
}

ValueMetadata *type metadata accessor for Chirality()
{
  return &type metadata for Chirality;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet()
{
  return &type metadata for TextRecognitionCharacterSet;
}

ValueMetadata *type metadata accessor for BarcodeSymbology()
{
  return &type metadata for BarcodeSymbology;
}

ValueMetadata *type metadata accessor for ElementType()
{
  return &type metadata for ElementType;
}

ValueMetadata *type metadata accessor for ElementType.CodingKeys()
{
  return &type metadata for ElementType.CodingKeys;
}

ValueMetadata *type metadata accessor for ElementType.FloatCodingKeys()
{
  return &type metadata for ElementType.FloatCodingKeys;
}

ValueMetadata *type metadata accessor for ElementType.DoubleCodingKeys()
{
  return &type metadata for ElementType.DoubleCodingKeys;
}

uint64_t getEnumTagSinglePayload for AnimalBodyPoseObservation.JointName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE8)
    goto LABEL_17;
  if (a2 + 24 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 24) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 24;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 24;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 24;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x19;
  v8 = v6 - 25;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6Vision16BarcodeSymbologyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_1A1317090 + 4 * byte_1A15CEA97[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_1A13170C4 + 4 * byte_1A15CEA92[v4]))();
}

uint64_t sub_1A13170C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13170CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A13170D4);
  return result;
}

uint64_t sub_1A13170E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A13170E8);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_1A13170EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13170F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.CodingKeys()
{
  return &type metadata for BarcodeSymbology.CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.AztecCodingKeys()
{
  return &type metadata for BarcodeSymbology.AztecCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Code39CodingKeys()
{
  return &type metadata for BarcodeSymbology.Code39CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Code39ChecksumCodingKeys()
{
  return &type metadata for BarcodeSymbology.Code39ChecksumCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Code39FullASCIICodingKeys()
{
  return &type metadata for BarcodeSymbology.Code39FullASCIICodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Code39FullASCIIChecksumCodingKeys()
{
  return &type metadata for BarcodeSymbology.Code39FullASCIIChecksumCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Code93CodingKeys()
{
  return &type metadata for BarcodeSymbology.Code93CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Code93iCodingKeys()
{
  return &type metadata for BarcodeSymbology.Code93iCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Code128CodingKeys()
{
  return &type metadata for BarcodeSymbology.Code128CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.DataMatrixCodingKeys()
{
  return &type metadata for BarcodeSymbology.DataMatrixCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Ean8CodingKeys()
{
  return &type metadata for BarcodeSymbology.Ean8CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Ean13CodingKeys()
{
  return &type metadata for BarcodeSymbology.Ean13CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.I2of5CodingKeys()
{
  return &type metadata for BarcodeSymbology.I2of5CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.I2of5ChecksumCodingKeys()
{
  return &type metadata for BarcodeSymbology.I2of5ChecksumCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Itf14CodingKeys()
{
  return &type metadata for BarcodeSymbology.Itf14CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Pdf417CodingKeys()
{
  return &type metadata for BarcodeSymbology.Pdf417CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.QrCodingKeys()
{
  return &type metadata for BarcodeSymbology.QrCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.UpceCodingKeys()
{
  return &type metadata for BarcodeSymbology.UpceCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.CodabarCodingKeys()
{
  return &type metadata for BarcodeSymbology.CodabarCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Gs1DataBarCodingKeys()
{
  return &type metadata for BarcodeSymbology.Gs1DataBarCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Gs1DataBarExpandedCodingKeys()
{
  return &type metadata for BarcodeSymbology.Gs1DataBarExpandedCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.Gs1DataBarLimitedCodingKeys()
{
  return &type metadata for BarcodeSymbology.Gs1DataBarLimitedCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.MicroPDF417CodingKeys()
{
  return &type metadata for BarcodeSymbology.MicroPDF417CodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.MicroQRCodingKeys()
{
  return &type metadata for BarcodeSymbology.MicroQRCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.MsiPlesseyCodingKeys()
{
  return &type metadata for BarcodeSymbology.MsiPlesseyCodingKeys;
}

ValueMetadata *type metadata accessor for BarcodeSymbology.AppClipCodeCodingKeys()
{
  return &type metadata for BarcodeSymbology.AppClipCodeCodingKeys;
}

uint64_t _s6Vision27TextRecognitionCharacterSetOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6Vision27TextRecognitionCharacterSetOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1A131737C + 4 * byte_1A15CEAA1[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1A13173B0 + 4 * byte_1A15CEA9C[v4]))();
}

uint64_t sub_1A13173B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13173B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A13173C0);
  return result;
}

uint64_t sub_1A13173CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A13173D4);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1A13173D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13173E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.CodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.CodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.NoneCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.AsciiCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.AsciiCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.EnglishCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.EnglishCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.DanishCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.DanishCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.DutchCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.DutchCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.FrenchCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.FrenchCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.GermanCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.GermanCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.IcelandicCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.IcelandicCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.ItalianCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.ItalianCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.NorwegianCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.NorwegianCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.PortugueseCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.PortugueseCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.SpanishCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.SpanishCodingKeys;
}

ValueMetadata *type metadata accessor for TextRecognitionCharacterSet.SwedishCodingKeys()
{
  return &type metadata for TextRecognitionCharacterSet.SwedishCodingKeys;
}

uint64_t _s6Vision11ElementTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A1317518 + 4 * byte_1A15CEAAB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A131754C + 4 * byte_1A15CEAA6[v4]))();
}

uint64_t sub_1A131754C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1317554(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A131755CLL);
  return result;
}

uint64_t sub_1A1317568(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1317570);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A1317574(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A131757C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Chirality.CodingKeys()
{
  return &type metadata for Chirality.CodingKeys;
}

ValueMetadata *type metadata accessor for Chirality.LeftCodingKeys()
{
  return &type metadata for Chirality.LeftCodingKeys;
}

ValueMetadata *type metadata accessor for Chirality.RightCodingKeys()
{
  return &type metadata for Chirality.RightCodingKeys;
}

uint64_t _s6Vision23ImageCropAndScaleActionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A1317604 + 4 * byte_1A15CEAB5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A1317638 + 4 * byte_1A15CEAB0[v4]))();
}

uint64_t sub_1A1317638(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1317640(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1317648);
  return result;
}

uint64_t sub_1A1317654(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A131765CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A1317660(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1317668(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageCropAndScaleAction.CodingKeys()
{
  return &type metadata for ImageCropAndScaleAction.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageCropAndScaleAction.CenterCropCodingKeys()
{
  return &type metadata for ImageCropAndScaleAction.CenterCropCodingKeys;
}

ValueMetadata *type metadata accessor for ImageCropAndScaleAction.ScaleToFitCodingKeys()
{
  return &type metadata for ImageCropAndScaleAction.ScaleToFitCodingKeys;
}

ValueMetadata *type metadata accessor for ImageCropAndScaleAction.ScaleToFillCodingKeys()
{
  return &type metadata for ImageCropAndScaleAction.ScaleToFillCodingKeys;
}

ValueMetadata *type metadata accessor for ImageCropAndScaleAction.ScaleToFitPlus90CCWRotationCodingKeys()
{
  return &type metadata for ImageCropAndScaleAction.ScaleToFitPlus90CCWRotationCodingKeys;
}

ValueMetadata *type metadata accessor for ImageCropAndScaleAction.ScaleToFillPlus90CCWRotationCodingKeys()
{
  return &type metadata for ImageCropAndScaleAction.ScaleToFillPlus90CCWRotationCodingKeys;
}

unint64_t sub_1A13176D8()
{
  unint64_t result;

  result = qword_1EE61BB30[0];
  if (!qword_1EE61BB30[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF778, &type metadata for ImageCropAndScaleAction.CodingKeys);
    atomic_store(result, qword_1EE61BB30);
  }
  return result;
}

unint64_t sub_1A1317720()
{
  unint64_t result;

  result = qword_1EE61BF40[0];
  if (!qword_1EE61BF40[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF8D0, &type metadata for Chirality.CodingKeys);
    atomic_store(result, qword_1EE61BF40);
  }
  return result;
}

unint64_t sub_1A1317768()
{
  unint64_t result;

  result = qword_1EE61CE50[0];
  if (!qword_1EE61CE50[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFD98, &type metadata for TextRecognitionCharacterSet.CodingKeys);
    atomic_store(result, qword_1EE61CE50);
  }
  return result;
}

uint64_t sub_1A13177AC()
{
  return sub_1A13189B0(&qword_1EE5FF168, (uint64_t)&unk_1A15CFDD0);
}

uint64_t sub_1A13177D0(uint64_t a1)
{
  MEMORY[0x1A1B0B774](&unk_1A15D1130, a1);
  return sub_1A15A8A60();
}

uint64_t sub_1A131780C()
{
  MEMORY[0x1A1B0B774](&unk_1A15D1130);
  return sub_1A15A8A54();
}

uint64_t sub_1A1317854(uint64_t a1, uint64_t a2)
{
  sub_1A15A93E4();
  MEMORY[0x1A1B0B774](&unk_1A15D1130, a2);
  sub_1A15A8A54();
  return sub_1A15A9420();
}

unint64_t sub_1A13178B0()
{
  unint64_t result;

  result = qword_1EE61EA60[0];
  if (!qword_1EE61EA60[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D06A0, &type metadata for BarcodeSymbology.CodingKeys);
    atomic_store(result, qword_1EE61EA60);
  }
  return result;
}

unint64_t sub_1A13178F8()
{
  unint64_t result;

  result = qword_1EE61EE70[0];
  if (!qword_1EE61EE70[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D07F8, &type metadata for ElementType.CodingKeys);
    atomic_store(result, qword_1EE61EE70);
  }
  return result;
}

unint64_t sub_1A1317940()
{
  unint64_t result;

  result = qword_1EE61EF80;
  if (!qword_1EE61EF80)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0718, &type metadata for ElementType.FloatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61EF80);
  }
  return result;
}

unint64_t sub_1A1317988()
{
  unint64_t result;

  result = qword_1EE61EF88[0];
  if (!qword_1EE61EF88[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0740, &type metadata for ElementType.FloatCodingKeys);
    atomic_store(result, qword_1EE61EF88);
  }
  return result;
}

unint64_t sub_1A13179D0()
{
  unint64_t result;

  result = qword_1EE61F010;
  if (!qword_1EE61F010)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D06C8, &type metadata for ElementType.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F010);
  }
  return result;
}

unint64_t sub_1A1317A18()
{
  unint64_t result;

  result = qword_1EE61F018[0];
  if (!qword_1EE61F018[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D06F0, &type metadata for ElementType.DoubleCodingKeys);
    atomic_store(result, qword_1EE61F018);
  }
  return result;
}

unint64_t sub_1A1317A60()
{
  unint64_t result;

  result = qword_1EE61F0A0;
  if (!qword_1EE61F0A0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0768, &type metadata for ElementType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F0A0);
  }
  return result;
}

unint64_t sub_1A1317AA8()
{
  unint64_t result;

  result = qword_1EE61F0A8[0];
  if (!qword_1EE61F0A8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0790, &type metadata for ElementType.CodingKeys);
    atomic_store(result, qword_1EE61F0A8);
  }
  return result;
}

unint64_t sub_1A1317AF0()
{
  unint64_t result;

  result = qword_1EE61F130;
  if (!qword_1EE61F130)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D05C0, &type metadata for BarcodeSymbology.AztecCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F130);
  }
  return result;
}

unint64_t sub_1A1317B38()
{
  unint64_t result;

  result = qword_1EE61F138[0];
  if (!qword_1EE61F138[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D05E8, &type metadata for BarcodeSymbology.AztecCodingKeys);
    atomic_store(result, qword_1EE61F138);
  }
  return result;
}

unint64_t sub_1A1317B80()
{
  unint64_t result;

  result = qword_1EE61F1C0;
  if (!qword_1EE61F1C0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0570, &type metadata for BarcodeSymbology.Code39CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F1C0);
  }
  return result;
}

unint64_t sub_1A1317BC8()
{
  unint64_t result;

  result = qword_1EE61F1C8[0];
  if (!qword_1EE61F1C8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0598, &type metadata for BarcodeSymbology.Code39CodingKeys);
    atomic_store(result, qword_1EE61F1C8);
  }
  return result;
}

unint64_t sub_1A1317C10()
{
  unint64_t result;

  result = qword_1EE61F250;
  if (!qword_1EE61F250)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0520, &type metadata for BarcodeSymbology.Code39ChecksumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F250);
  }
  return result;
}

unint64_t sub_1A1317C58()
{
  unint64_t result;

  result = qword_1EE61F258[0];
  if (!qword_1EE61F258[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0548, &type metadata for BarcodeSymbology.Code39ChecksumCodingKeys);
    atomic_store(result, qword_1EE61F258);
  }
  return result;
}

unint64_t sub_1A1317CA0()
{
  unint64_t result;

  result = qword_1EE61F2E0;
  if (!qword_1EE61F2E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D04D0, &type metadata for BarcodeSymbology.Code39FullASCIICodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F2E0);
  }
  return result;
}

unint64_t sub_1A1317CE8()
{
  unint64_t result;

  result = qword_1EE61F2E8[0];
  if (!qword_1EE61F2E8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D04F8, &type metadata for BarcodeSymbology.Code39FullASCIICodingKeys);
    atomic_store(result, qword_1EE61F2E8);
  }
  return result;
}

unint64_t sub_1A1317D30()
{
  unint64_t result;

  result = qword_1EE61F370;
  if (!qword_1EE61F370)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0480, &type metadata for BarcodeSymbology.Code39FullASCIIChecksumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F370);
  }
  return result;
}

unint64_t sub_1A1317D78()
{
  unint64_t result;

  result = qword_1EE61F378;
  if (!qword_1EE61F378)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D04A8, &type metadata for BarcodeSymbology.Code39FullASCIIChecksumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F378);
  }
  return result;
}

unint64_t sub_1A1317DC0()
{
  unint64_t result;

  result = qword_1EE61F400;
  if (!qword_1EE61F400)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0430, &type metadata for BarcodeSymbology.Code93CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F400);
  }
  return result;
}

unint64_t sub_1A1317E08()
{
  unint64_t result;

  result = qword_1EE61F408[0];
  if (!qword_1EE61F408[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0458, &type metadata for BarcodeSymbology.Code93CodingKeys);
    atomic_store(result, qword_1EE61F408);
  }
  return result;
}

unint64_t sub_1A1317E50()
{
  unint64_t result;

  result = qword_1EE61F490;
  if (!qword_1EE61F490)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D03E0, &type metadata for BarcodeSymbology.Code93iCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F490);
  }
  return result;
}

unint64_t sub_1A1317E98()
{
  unint64_t result;

  result = qword_1EE61F498[0];
  if (!qword_1EE61F498[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0408, &type metadata for BarcodeSymbology.Code93iCodingKeys);
    atomic_store(result, qword_1EE61F498);
  }
  return result;
}

unint64_t sub_1A1317EE0()
{
  unint64_t result;

  result = qword_1EE61F520;
  if (!qword_1EE61F520)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0390, &type metadata for BarcodeSymbology.Code128CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F520);
  }
  return result;
}

unint64_t sub_1A1317F28()
{
  unint64_t result;

  result = qword_1EE61F528[0];
  if (!qword_1EE61F528[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D03B8, &type metadata for BarcodeSymbology.Code128CodingKeys);
    atomic_store(result, qword_1EE61F528);
  }
  return result;
}

unint64_t sub_1A1317F70()
{
  unint64_t result;

  result = qword_1EE61F5B0;
  if (!qword_1EE61F5B0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0340, &type metadata for BarcodeSymbology.DataMatrixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F5B0);
  }
  return result;
}

unint64_t sub_1A1317FB8()
{
  unint64_t result;

  result = qword_1EE61F5B8[0];
  if (!qword_1EE61F5B8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0368, &type metadata for BarcodeSymbology.DataMatrixCodingKeys);
    atomic_store(result, qword_1EE61F5B8);
  }
  return result;
}

unint64_t sub_1A1318000()
{
  unint64_t result;

  result = qword_1EE61F640;
  if (!qword_1EE61F640)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D02F0, &type metadata for BarcodeSymbology.Ean8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F640);
  }
  return result;
}

unint64_t sub_1A1318048()
{
  unint64_t result;

  result = qword_1EE61F648[0];
  if (!qword_1EE61F648[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0318, &type metadata for BarcodeSymbology.Ean8CodingKeys);
    atomic_store(result, qword_1EE61F648);
  }
  return result;
}

unint64_t sub_1A1318090()
{
  unint64_t result;

  result = qword_1EE61F6D0;
  if (!qword_1EE61F6D0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D02A0, &type metadata for BarcodeSymbology.Ean13CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F6D0);
  }
  return result;
}

unint64_t sub_1A13180D8()
{
  unint64_t result;

  result = qword_1EE61F6D8[0];
  if (!qword_1EE61F6D8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D02C8, &type metadata for BarcodeSymbology.Ean13CodingKeys);
    atomic_store(result, qword_1EE61F6D8);
  }
  return result;
}

unint64_t sub_1A1318120()
{
  unint64_t result;

  result = qword_1EE61F760;
  if (!qword_1EE61F760)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0250, &type metadata for BarcodeSymbology.I2of5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F760);
  }
  return result;
}

unint64_t sub_1A1318168()
{
  unint64_t result;

  result = qword_1EE61F768[0];
  if (!qword_1EE61F768[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0278, &type metadata for BarcodeSymbology.I2of5CodingKeys);
    atomic_store(result, qword_1EE61F768);
  }
  return result;
}

unint64_t sub_1A13181B0()
{
  unint64_t result;

  result = qword_1EE61F7F0;
  if (!qword_1EE61F7F0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0200, &type metadata for BarcodeSymbology.I2of5ChecksumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F7F0);
  }
  return result;
}

unint64_t sub_1A13181F8()
{
  unint64_t result;

  result = qword_1EE61F7F8[0];
  if (!qword_1EE61F7F8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0228, &type metadata for BarcodeSymbology.I2of5ChecksumCodingKeys);
    atomic_store(result, qword_1EE61F7F8);
  }
  return result;
}

unint64_t sub_1A1318240()
{
  unint64_t result;

  result = qword_1EE61F880;
  if (!qword_1EE61F880)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D01B0, &type metadata for BarcodeSymbology.Itf14CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F880);
  }
  return result;
}

unint64_t sub_1A1318288()
{
  unint64_t result;

  result = qword_1EE61F888[0];
  if (!qword_1EE61F888[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D01D8, &type metadata for BarcodeSymbology.Itf14CodingKeys);
    atomic_store(result, qword_1EE61F888);
  }
  return result;
}

unint64_t sub_1A13182D0()
{
  unint64_t result;

  result = qword_1EE61F910;
  if (!qword_1EE61F910)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0160, &type metadata for BarcodeSymbology.Pdf417CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F910);
  }
  return result;
}

unint64_t sub_1A1318318()
{
  unint64_t result;

  result = qword_1EE61F918[0];
  if (!qword_1EE61F918[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0188, &type metadata for BarcodeSymbology.Pdf417CodingKeys);
    atomic_store(result, qword_1EE61F918);
  }
  return result;
}

unint64_t sub_1A1318360()
{
  unint64_t result;

  result = qword_1EE61F9A0;
  if (!qword_1EE61F9A0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0110, &type metadata for BarcodeSymbology.QrCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61F9A0);
  }
  return result;
}

unint64_t sub_1A13183A8()
{
  unint64_t result;

  result = qword_1EE61F9A8[0];
  if (!qword_1EE61F9A8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0138, &type metadata for BarcodeSymbology.QrCodingKeys);
    atomic_store(result, qword_1EE61F9A8);
  }
  return result;
}

unint64_t sub_1A13183F0()
{
  unint64_t result;

  result = qword_1EE61FA30;
  if (!qword_1EE61FA30)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D00C0, &type metadata for BarcodeSymbology.UpceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FA30);
  }
  return result;
}

unint64_t sub_1A1318438()
{
  unint64_t result;

  result = qword_1EE61FA38[0];
  if (!qword_1EE61FA38[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D00E8, &type metadata for BarcodeSymbology.UpceCodingKeys);
    atomic_store(result, qword_1EE61FA38);
  }
  return result;
}

unint64_t sub_1A1318480()
{
  unint64_t result;

  result = qword_1EE61FAC0;
  if (!qword_1EE61FAC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0070, &type metadata for BarcodeSymbology.CodabarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FAC0);
  }
  return result;
}

unint64_t sub_1A13184C8()
{
  unint64_t result;

  result = qword_1EE61FAC8[0];
  if (!qword_1EE61FAC8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0098, &type metadata for BarcodeSymbology.CodabarCodingKeys);
    atomic_store(result, qword_1EE61FAC8);
  }
  return result;
}

unint64_t sub_1A1318510()
{
  unint64_t result;

  result = qword_1EE61FB50;
  if (!qword_1EE61FB50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0020, &type metadata for BarcodeSymbology.Gs1DataBarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FB50);
  }
  return result;
}

unint64_t sub_1A1318558()
{
  unint64_t result;

  result = qword_1EE61FB58[0];
  if (!qword_1EE61FB58[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0048, &type metadata for BarcodeSymbology.Gs1DataBarCodingKeys);
    atomic_store(result, qword_1EE61FB58);
  }
  return result;
}

unint64_t sub_1A13185A0()
{
  unint64_t result;

  result = qword_1EE61FBE0;
  if (!qword_1EE61FBE0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFFD0, &type metadata for BarcodeSymbology.Gs1DataBarExpandedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FBE0);
  }
  return result;
}

unint64_t sub_1A13185E8()
{
  unint64_t result;

  result = qword_1EE61FBE8[0];
  if (!qword_1EE61FBE8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFFF8, &type metadata for BarcodeSymbology.Gs1DataBarExpandedCodingKeys);
    atomic_store(result, qword_1EE61FBE8);
  }
  return result;
}

unint64_t sub_1A1318630()
{
  unint64_t result;

  result = qword_1EE61FC70;
  if (!qword_1EE61FC70)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFF80, &type metadata for BarcodeSymbology.Gs1DataBarLimitedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FC70);
  }
  return result;
}

unint64_t sub_1A1318678()
{
  unint64_t result;

  result = qword_1EE61FC78;
  if (!qword_1EE61FC78)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFFA8, &type metadata for BarcodeSymbology.Gs1DataBarLimitedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FC78);
  }
  return result;
}

unint64_t sub_1A13186C0()
{
  unint64_t result;

  result = qword_1EE61FD00;
  if (!qword_1EE61FD00)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFF30, &type metadata for BarcodeSymbology.MicroPDF417CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FD00);
  }
  return result;
}

unint64_t sub_1A1318708()
{
  unint64_t result;

  result = qword_1EE61FD08[0];
  if (!qword_1EE61FD08[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFF58, &type metadata for BarcodeSymbology.MicroPDF417CodingKeys);
    atomic_store(result, qword_1EE61FD08);
  }
  return result;
}

unint64_t sub_1A1318750()
{
  unint64_t result;

  result = qword_1EE61FD90;
  if (!qword_1EE61FD90)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFEE0, &type metadata for BarcodeSymbology.MicroQRCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FD90);
  }
  return result;
}

unint64_t sub_1A1318798()
{
  unint64_t result;

  result = qword_1EE61FD98[0];
  if (!qword_1EE61FD98[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFF08, &type metadata for BarcodeSymbology.MicroQRCodingKeys);
    atomic_store(result, qword_1EE61FD98);
  }
  return result;
}

unint64_t sub_1A13187E0()
{
  unint64_t result;

  result = qword_1EE61FE20;
  if (!qword_1EE61FE20)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFE90, &type metadata for BarcodeSymbology.MsiPlesseyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FE20);
  }
  return result;
}

unint64_t sub_1A1318828()
{
  unint64_t result;

  result = qword_1EE61FE28[0];
  if (!qword_1EE61FE28[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFEB8, &type metadata for BarcodeSymbology.MsiPlesseyCodingKeys);
    atomic_store(result, qword_1EE61FE28);
  }
  return result;
}

unint64_t sub_1A1318870()
{
  unint64_t result;

  result = qword_1EE61FEB0;
  if (!qword_1EE61FEB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFE40, &type metadata for BarcodeSymbology.AppClipCodeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FEB0);
  }
  return result;
}

unint64_t sub_1A13188B8()
{
  unint64_t result;

  result = qword_1EE61FEB8[0];
  if (!qword_1EE61FEB8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFE68, &type metadata for BarcodeSymbology.AppClipCodeCodingKeys);
    atomic_store(result, qword_1EE61FEB8);
  }
  return result;
}

unint64_t sub_1A1318900()
{
  unint64_t result;

  result = qword_1EE61FF40;
  if (!qword_1EE61FF40)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0610, &type metadata for BarcodeSymbology.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE61FF40);
  }
  return result;
}

unint64_t sub_1A1318948()
{
  unint64_t result;

  result = qword_1EE61FF48[0];
  if (!qword_1EE61FF48[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D0638, &type metadata for BarcodeSymbology.CodingKeys);
    atomic_store(result, qword_1EE61FF48);
  }
  return result;
}

uint64_t sub_1A131898C()
{
  return sub_1A13189B0(&qword_1EE5FF170, (uint64_t)&unk_1A15CFDFC);
}

uint64_t sub_1A13189B0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    result = MEMORY[0x1A1B0B774](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A13189F4()
{
  unint64_t result;

  result = qword_1EE620050;
  if (!qword_1EE620050)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFCB8, &type metadata for TextRecognitionCharacterSet.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620050);
  }
  return result;
}

unint64_t sub_1A1318A3C()
{
  unint64_t result;

  result = qword_1EE620058[0];
  if (!qword_1EE620058[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFCE0, &type metadata for TextRecognitionCharacterSet.NoneCodingKeys);
    atomic_store(result, qword_1EE620058);
  }
  return result;
}

unint64_t sub_1A1318A84()
{
  unint64_t result;

  result = qword_1EE6200E0;
  if (!qword_1EE6200E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFC68, &type metadata for TextRecognitionCharacterSet.AsciiCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6200E0);
  }
  return result;
}

unint64_t sub_1A1318ACC()
{
  unint64_t result;

  result = qword_1EE6200E8[0];
  if (!qword_1EE6200E8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFC90, &type metadata for TextRecognitionCharacterSet.AsciiCodingKeys);
    atomic_store(result, qword_1EE6200E8);
  }
  return result;
}

unint64_t sub_1A1318B14()
{
  unint64_t result;

  result = qword_1EE620170;
  if (!qword_1EE620170)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFC18, &type metadata for TextRecognitionCharacterSet.EnglishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620170);
  }
  return result;
}

unint64_t sub_1A1318B5C()
{
  unint64_t result;

  result = qword_1EE620178;
  if (!qword_1EE620178)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFC40, &type metadata for TextRecognitionCharacterSet.EnglishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620178);
  }
  return result;
}

unint64_t sub_1A1318BA4()
{
  unint64_t result;

  result = qword_1EE620200;
  if (!qword_1EE620200)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFBC8, &type metadata for TextRecognitionCharacterSet.DanishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620200);
  }
  return result;
}

unint64_t sub_1A1318BEC()
{
  unint64_t result;

  result = qword_1EE620208[0];
  if (!qword_1EE620208[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFBF0, &type metadata for TextRecognitionCharacterSet.DanishCodingKeys);
    atomic_store(result, qword_1EE620208);
  }
  return result;
}

unint64_t sub_1A1318C34()
{
  unint64_t result;

  result = qword_1EE620290;
  if (!qword_1EE620290)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFB78, &type metadata for TextRecognitionCharacterSet.DutchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620290);
  }
  return result;
}

unint64_t sub_1A1318C7C()
{
  unint64_t result;

  result = qword_1EE620298[0];
  if (!qword_1EE620298[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFBA0, &type metadata for TextRecognitionCharacterSet.DutchCodingKeys);
    atomic_store(result, qword_1EE620298);
  }
  return result;
}

unint64_t sub_1A1318CC4()
{
  unint64_t result;

  result = qword_1EE620320;
  if (!qword_1EE620320)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFB28, &type metadata for TextRecognitionCharacterSet.FrenchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620320);
  }
  return result;
}

unint64_t sub_1A1318D0C()
{
  unint64_t result;

  result = qword_1EE620328[0];
  if (!qword_1EE620328[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFB50, &type metadata for TextRecognitionCharacterSet.FrenchCodingKeys);
    atomic_store(result, qword_1EE620328);
  }
  return result;
}

unint64_t sub_1A1318D54()
{
  unint64_t result;

  result = qword_1EE6203B0;
  if (!qword_1EE6203B0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFAD8, &type metadata for TextRecognitionCharacterSet.GermanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6203B0);
  }
  return result;
}

unint64_t sub_1A1318D9C()
{
  unint64_t result;

  result = qword_1EE6203B8[0];
  if (!qword_1EE6203B8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFB00, &type metadata for TextRecognitionCharacterSet.GermanCodingKeys);
    atomic_store(result, qword_1EE6203B8);
  }
  return result;
}

unint64_t sub_1A1318DE4()
{
  unint64_t result;

  result = qword_1EE620440;
  if (!qword_1EE620440)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFA88, &type metadata for TextRecognitionCharacterSet.IcelandicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620440);
  }
  return result;
}

unint64_t sub_1A1318E2C()
{
  unint64_t result;

  result = qword_1EE620448[0];
  if (!qword_1EE620448[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFAB0, &type metadata for TextRecognitionCharacterSet.IcelandicCodingKeys);
    atomic_store(result, qword_1EE620448);
  }
  return result;
}

unint64_t sub_1A1318E74()
{
  unint64_t result;

  result = qword_1EE6204D0;
  if (!qword_1EE6204D0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFA38, &type metadata for TextRecognitionCharacterSet.ItalianCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6204D0);
  }
  return result;
}

unint64_t sub_1A1318EBC()
{
  unint64_t result;

  result = qword_1EE6204D8[0];
  if (!qword_1EE6204D8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFA60, &type metadata for TextRecognitionCharacterSet.ItalianCodingKeys);
    atomic_store(result, qword_1EE6204D8);
  }
  return result;
}

unint64_t sub_1A1318F04()
{
  unint64_t result;

  result = qword_1EE620560;
  if (!qword_1EE620560)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF9E8, &type metadata for TextRecognitionCharacterSet.NorwegianCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620560);
  }
  return result;
}

unint64_t sub_1A1318F4C()
{
  unint64_t result;

  result = qword_1EE620568[0];
  if (!qword_1EE620568[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFA10, &type metadata for TextRecognitionCharacterSet.NorwegianCodingKeys);
    atomic_store(result, qword_1EE620568);
  }
  return result;
}

unint64_t sub_1A1318F94()
{
  unint64_t result;

  result = qword_1EE6205F0;
  if (!qword_1EE6205F0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF998, &type metadata for TextRecognitionCharacterSet.PortugueseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6205F0);
  }
  return result;
}

unint64_t sub_1A1318FDC()
{
  unint64_t result;

  result = qword_1EE6205F8[0];
  if (!qword_1EE6205F8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF9C0, &type metadata for TextRecognitionCharacterSet.PortugueseCodingKeys);
    atomic_store(result, qword_1EE6205F8);
  }
  return result;
}

unint64_t sub_1A1319024()
{
  unint64_t result;

  result = qword_1EE620680;
  if (!qword_1EE620680)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF948, &type metadata for TextRecognitionCharacterSet.SpanishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620680);
  }
  return result;
}

unint64_t sub_1A131906C()
{
  unint64_t result;

  result = qword_1EE620688[0];
  if (!qword_1EE620688[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF970, &type metadata for TextRecognitionCharacterSet.SpanishCodingKeys);
    atomic_store(result, qword_1EE620688);
  }
  return result;
}

unint64_t sub_1A13190B4()
{
  unint64_t result;

  result = qword_1EE620710;
  if (!qword_1EE620710)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF8F8, &type metadata for TextRecognitionCharacterSet.SwedishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620710);
  }
  return result;
}

unint64_t sub_1A13190FC()
{
  unint64_t result;

  result = qword_1EE620718[0];
  if (!qword_1EE620718[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF920, &type metadata for TextRecognitionCharacterSet.SwedishCodingKeys);
    atomic_store(result, qword_1EE620718);
  }
  return result;
}

unint64_t sub_1A1319144()
{
  unint64_t result;

  result = qword_1EE6207A0;
  if (!qword_1EE6207A0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFD08, &type metadata for TextRecognitionCharacterSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6207A0);
  }
  return result;
}

unint64_t sub_1A131918C()
{
  unint64_t result;

  result = qword_1EE6207A8[0];
  if (!qword_1EE6207A8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CFD30, &type metadata for TextRecognitionCharacterSet.CodingKeys);
    atomic_store(result, qword_1EE6207A8);
  }
  return result;
}

unint64_t sub_1A13191D4()
{
  unint64_t result;

  result = qword_1EE620830;
  if (!qword_1EE620830)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF7F0, &type metadata for Chirality.LeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620830);
  }
  return result;
}

unint64_t sub_1A131921C()
{
  unint64_t result;

  result = qword_1EE620838[0];
  if (!qword_1EE620838[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF818, &type metadata for Chirality.LeftCodingKeys);
    atomic_store(result, qword_1EE620838);
  }
  return result;
}

unint64_t sub_1A1319264()
{
  unint64_t result;

  result = qword_1EE6208C0;
  if (!qword_1EE6208C0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF7A0, &type metadata for Chirality.RightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6208C0);
  }
  return result;
}

unint64_t sub_1A13192AC()
{
  unint64_t result;

  result = qword_1EE6208C8[0];
  if (!qword_1EE6208C8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF7C8, &type metadata for Chirality.RightCodingKeys);
    atomic_store(result, qword_1EE6208C8);
  }
  return result;
}

unint64_t sub_1A13192F4()
{
  unint64_t result;

  result = qword_1EE620950;
  if (!qword_1EE620950)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF840, &type metadata for Chirality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620950);
  }
  return result;
}

unint64_t sub_1A131933C()
{
  unint64_t result;

  result = qword_1EE620958[0];
  if (!qword_1EE620958[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF868, &type metadata for Chirality.CodingKeys);
    atomic_store(result, qword_1EE620958);
  }
  return result;
}

unint64_t sub_1A1319384()
{
  unint64_t result;

  result = qword_1EE6209E0;
  if (!qword_1EE6209E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF698, &type metadata for ImageCropAndScaleAction.CenterCropCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6209E0);
  }
  return result;
}

unint64_t sub_1A13193CC()
{
  unint64_t result;

  result = qword_1EE6209E8[0];
  if (!qword_1EE6209E8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF6C0, &type metadata for ImageCropAndScaleAction.CenterCropCodingKeys);
    atomic_store(result, qword_1EE6209E8);
  }
  return result;
}

unint64_t sub_1A1319414()
{
  unint64_t result;

  result = qword_1EE620A70;
  if (!qword_1EE620A70)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF648, &type metadata for ImageCropAndScaleAction.ScaleToFitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620A70);
  }
  return result;
}

unint64_t sub_1A131945C()
{
  unint64_t result;

  result = qword_1EE620A78;
  if (!qword_1EE620A78)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF670, &type metadata for ImageCropAndScaleAction.ScaleToFitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620A78);
  }
  return result;
}

unint64_t sub_1A13194A4()
{
  unint64_t result;

  result = qword_1EE620B00;
  if (!qword_1EE620B00)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF5F8, &type metadata for ImageCropAndScaleAction.ScaleToFillCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620B00);
  }
  return result;
}

unint64_t sub_1A13194EC()
{
  unint64_t result;

  result = qword_1EE620B08[0];
  if (!qword_1EE620B08[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF620, &type metadata for ImageCropAndScaleAction.ScaleToFillCodingKeys);
    atomic_store(result, qword_1EE620B08);
  }
  return result;
}

unint64_t sub_1A1319534()
{
  unint64_t result;

  result = qword_1EE620B90;
  if (!qword_1EE620B90)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF5A8, &type metadata for ImageCropAndScaleAction.ScaleToFitPlus90CCWRotationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620B90);
  }
  return result;
}

unint64_t sub_1A131957C()
{
  unint64_t result;

  result = qword_1EE620B98[0];
  if (!qword_1EE620B98[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF5D0, &type metadata for ImageCropAndScaleAction.ScaleToFitPlus90CCWRotationCodingKeys);
    atomic_store(result, qword_1EE620B98);
  }
  return result;
}

unint64_t sub_1A13195C4()
{
  unint64_t result;

  result = qword_1EE620C20;
  if (!qword_1EE620C20)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF558, &type metadata for ImageCropAndScaleAction.ScaleToFillPlus90CCWRotationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620C20);
  }
  return result;
}

unint64_t sub_1A131960C()
{
  unint64_t result;

  result = qword_1EE620C28[0];
  if (!qword_1EE620C28[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF580, &type metadata for ImageCropAndScaleAction.ScaleToFillPlus90CCWRotationCodingKeys);
    atomic_store(result, qword_1EE620C28);
  }
  return result;
}

unint64_t sub_1A1319654()
{
  unint64_t result;

  result = qword_1EE620CB0;
  if (!qword_1EE620CB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF6E8, &type metadata for ImageCropAndScaleAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620CB0);
  }
  return result;
}

unint64_t sub_1A131969C()
{
  unint64_t result;

  result = qword_1EE620CB8[0];
  if (!qword_1EE620CB8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15CF710, &type metadata for ImageCropAndScaleAction.CodingKeys);
    atomic_store(result, qword_1EE620CB8);
  }
  return result;
}

uint64_t sub_1A13196E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72437265746E6563 && a2 == 0xEA0000000000706FLL;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x466F54656C616373 && a2 == 0xEA00000000007469 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x466F54656C616373 && a2 == 0xEB000000006C6C69 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001A15FD5D0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001A15FD5F0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1A1319900(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1952867692 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7468676972 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A13199D8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6969637361 && a2 == 0xE500000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6873696C676E65 && a2 == 0xE700000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6873696E6164 && a2 == 0xE600000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6863747564 && a2 == 0xE500000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x68636E657266 && a2 == 0xE600000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E616D726567 && a2 == 0xE600000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x69646E616C656369 && a2 == 0xE900000000000063 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E61696C617469 && a2 == 0xE700000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6169676577726F6ELL && a2 == 0xE90000000000006ELL || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6575677574726F70 && a2 == 0xEA00000000006573 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6873696E617073 && a2 == 0xE700000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x68736964657773 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_1A1319EF8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6365747A61 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x393365646F63 && a2 == 0xE600000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6843393365646F63 && a2 == 0xEE006D75736B6365 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7546393365646F63 && a2 == 0xEF49494353416C6CLL || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001A15FD610 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x333965646F63 && a2 == 0xE600000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x69333965646F63 && a2 == 0xE700000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x38323165646F63 && a2 == 0xE700000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7274614D61746164 && a2 == 0xEA00000000007869 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 946757989 && a2 == 0xE400000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x33316E6165 && a2 == 0xE500000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x35666F3269 && a2 == 0xE500000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65684335666F3269 && a2 == 0xED00006D75736B63 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x3431667469 && a2 == 0xE500000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x373134666470 && a2 == 0xE600000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 29297 && a2 == 0xE200000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 1701015669 && a2 == 0xE400000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x72616261646F63 && a2 == 0xE700000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x4261746144317367 && a2 == 0xEA00000000007261 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001A15FD630 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A15FD650 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x4644506F7263696DLL && a2 == 0xEB00000000373134 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x52516F7263696DLL && a2 == 0xE700000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x7373656C5069736DLL && a2 == 0xEA00000000007965 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x4370696C43707061 && a2 == 0xEB0000000065646FLL)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 24;
    else
      return 25;
  }
}

uint64_t sub_1A131A8F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616F6C66 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void QuadrilateralProviding.boundingBox.getter(uint64_t a1@<X0>, _QWORD *a2@<X1>, double *a3@<X8>)
{
  void (*v6)(__int128 *__return_ptr);
  double v7;
  void (*v8)(__int128 *__return_ptr, uint64_t, _QWORD *);
  double v9;
  void (*v10)(__int128 *__return_ptr, uint64_t, _QWORD *);
  double v11;
  void (*v12)(__int128 *__return_ptr, uint64_t, _QWORD *);
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v6 = (void (*)(__int128 *__return_ptr))a2[2];
  v6(&v36);
  v35 = v36;
  v7 = NormalizedPoint.x.getter();
  v8 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))a2[3];
  v8(&v35, a1, a2);
  v34 = v35;
  v9 = NormalizedPoint.x.getter();
  v10 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))a2[5];
  v10(&v34, a1, a2);
  v33 = v34;
  v11 = NormalizedPoint.x.getter();
  v12 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))a2[4];
  v12(&v33, a1, a2);
  v13 = NormalizedPoint.x.getter();
  if (v9 >= v7)
    v14 = v7;
  else
    v14 = v9;
  if (v11 < v14)
    v14 = v11;
  if (v13 >= v14)
    v15 = v14;
  else
    v15 = v13;
  ((void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v6)(&v36, a1, a2);
  v35 = v36;
  v16 = NormalizedPoint.y.getter();
  v8(&v35, a1, a2);
  v34 = v35;
  v17 = NormalizedPoint.y.getter();
  v10(&v34, a1, a2);
  v33 = v34;
  v18 = NormalizedPoint.y.getter();
  v12(&v33, a1, a2);
  v19 = NormalizedPoint.y.getter();
  if (v16 > v17)
    v20 = v16;
  else
    v20 = v17;
  if (v20 <= v18)
    v20 = v18;
  if (v20 > v19)
    v21 = v20;
  else
    v21 = v19;
  ((void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v6)(&v36, a1, a2);
  v35 = v36;
  v22 = NormalizedPoint.x.getter();
  v8(&v35, a1, a2);
  v34 = v35;
  v23 = NormalizedPoint.x.getter();
  v10(&v34, a1, a2);
  v33 = v34;
  v24 = NormalizedPoint.x.getter();
  v12(&v33, a1, a2);
  v25 = NormalizedPoint.x.getter();
  if (v22 > v23)
    v26 = v22;
  else
    v26 = v23;
  if (v26 <= v24)
    v26 = v24;
  if (v26 > v25)
    v27 = v26;
  else
    v27 = v25;
  ((void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v6)(&v36, a1, a2);
  v35 = v36;
  v28 = NormalizedPoint.y.getter();
  v8(&v35, a1, a2);
  v34 = v35;
  v29 = NormalizedPoint.y.getter();
  v10(&v34, a1, a2);
  v33 = v34;
  v30 = NormalizedPoint.y.getter();
  v12(&v33, a1, a2);
  v31 = NormalizedPoint.y.getter();
  if (v29 >= v28)
    v32 = v28;
  else
    v32 = v29;
  if (v30 < v32)
    v32 = v30;
  if (v31 < v32)
    v32 = v31;
  NormalizedRect.init(x:y:width:height:)(a3, v15, v32, v27 - v15, v21 - v32);
}

uint64_t sub_1A131AD40(uint64_t a1, uint64_t a2, void (**a3)(_QWORD *__return_ptr, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t result;
  __int128 v7;

  ((void (**)(__int128 *__return_ptr, uint64_t, _QWORD))a3)[2](&v7, a2, a3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD320);
  sub_1A1295778();
  result = sub_1A15A92F4();
  if (!v3)
  {
    ((void (**)(__int128 *__return_ptr, uint64_t, _QWORD))a3)[3](&v7, a2, a3);
    sub_1A15A92F4();
    ((void (**)(__int128 *__return_ptr, uint64_t, _QWORD))a3)[5](&v7, a2, a3);
    sub_1A15A92F4();
    ((void (**)(__int128 *__return_ptr, uint64_t, _QWORD))a3)[4](&v7, a2, a3);
    return sub_1A15A92F4();
  }
  return result;
}

uint64_t sub_1A131AEEC(uint64_t a1, void (**a2)(_QWORD *__return_ptr, _QWORD, _QWORD))
{
  __int128 v5;
  uint64_t v6;
  unint64_t v7;

  v6 = 0;
  v7 = 0xE000000000000000;
  sub_1A15A9090();
  sub_1A15A8BEC();
  ((void (**)(__int128 *__return_ptr, uint64_t, _QWORD))a2)[2](&v5, a1, a2);
  sub_1A1294F28();
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  ((void (**)(__int128 *__return_ptr, uint64_t, _QWORD))a2)[3](&v5, a1, a2);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  ((void (**)(__int128 *__return_ptr, uint64_t, _QWORD))a2)[5](&v5, a1, a2);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  ((void (**)(__int128 *__return_ptr, uint64_t, _QWORD))a2)[4](&v5, a1, a2);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1A131B104()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A131B134 + 4 * byte_1A15D1894[*v0]))(0x7466654C706F74, 0xE700000000000000);
}

uint64_t sub_1A131B134()
{
  return 0x7468676952706F74;
}

uint64_t sub_1A131B14C()
{
  return 0x69526D6F74746F62;
}

uint64_t sub_1A131B16C()
{
  return 0x654C6D6F74746F62;
}

uint64_t sub_1A131B188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A131B1FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A131B1AC()
{
  sub_1A12996B8();
  return sub_1A15A9474();
}

uint64_t sub_1A131B1D4()
{
  sub_1A12996B8();
  return sub_1A15A9480();
}

uint64_t sub_1A131B1FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7466654C706F74 && a2 == 0xE700000000000000;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7468676952706F74 && a2 == 0xE800000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69526D6F74746F62 && a2 == 0xEB00000000746867 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x654C6D6F74746F62 && a2 == 0xEA00000000007466)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_1A131B3DC()
{
  unint64_t result;

  result = qword_1EE5FF178;
  if (!qword_1EE5FF178)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D18A4, &type metadata for QuadrilateralCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE5FF178);
  }
  return result;
}

unint64_t sub_1A131B424()
{
  unint64_t result;

  result = qword_1EE5FF180;
  if (!qword_1EE5FF180)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1984, &type metadata for QuadrilateralCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE5FF180);
  }
  return result;
}

unint64_t sub_1A131B46C()
{
  unint64_t result;

  result = qword_1EE5FF188;
  if (!qword_1EE5FF188)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D195C, &type metadata for QuadrilateralCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE5FF188);
  }
  return result;
}

uint64_t dispatch thunk of QuadrilateralProviding.topLeft.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of QuadrilateralProviding.topRight.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of QuadrilateralProviding.bottomRight.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of QuadrilateralProviding.bottomLeft.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t storeEnumTagSinglePayload for QuadrilateralCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A131B51C + 4 * byte_1A15D189D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A131B550 + 4 * byte_1A15D1898[v4]))();
}

uint64_t sub_1A131B550(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A131B558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A131B560);
  return result;
}

uint64_t sub_1A131B56C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A131B574);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A131B578(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A131B580(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuadrilateralCodingKeys()
{
  return &type metadata for QuadrilateralCodingKeys;
}

uint64_t static GenerateImageFeaturePrintRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static GenerateImageFeaturePrintRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t GenerateImageFeaturePrintRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A131B5D0()
{
  sub_1A131B7AC();
  return sub_1A15A9474();
}

uint64_t sub_1A131B5F8()
{
  sub_1A131B7AC();
  return sub_1A15A9480();
}

uint64_t sub_1A131B620()
{
  sub_1A131B7F0();
  return sub_1A15A9474();
}

uint64_t sub_1A131B648()
{
  sub_1A131B7F0();
  return sub_1A15A9480();
}

uint64_t GenerateImageFeaturePrintRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF190);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF198);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A131B7AC();
  sub_1A15A9468();
  sub_1A131B7F0();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A131B7AC()
{
  unint64_t result;

  result = qword_1EE620FD8;
  if (!qword_1EE620FD8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1DFC, &type metadata for GenerateImageFeaturePrintRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE620FD8);
  }
  return result;
}

unint64_t sub_1A131B7F0()
{
  unint64_t result;

  result = qword_1EE620FE0[0];
  if (!qword_1EE620FE0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1DAC, &type metadata for GenerateImageFeaturePrintRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE620FE0);
  }
  return result;
}

uint64_t GenerateImageFeaturePrintRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t GenerateImageFeaturePrintRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF1A0);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF1A8);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A131B7AC();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for GenerateImageFeaturePrintRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A131B7F0();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A131BAD0(_QWORD *a1)
{
  return GenerateImageFeaturePrintRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A131BAE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF190);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF198);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A131B7AC();
  sub_1A15A9468();
  sub_1A131B7F0();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double GenerateImageFeaturePrintRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  __n128 v8;
  double v9[3];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(&v8);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A131BD88();
    sub_1A1377CDC((uint64_t)&type metadata for GenerateImageFeaturePrintRequest, v5, v6);
  }
  *(_BYTE *)a2 = 2;
  *(__n128 *)(a2 + 8) = v8;
  result = v9[0];
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v9;
  *(_QWORD *)(a2 + 40) = v4;
  return result;
}

void GenerateImageFeaturePrintRequest.cropAndScaleAction.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *GenerateImageFeaturePrintRequest.cropAndScaleAction.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*GenerateImageFeaturePrintRequest.cropAndScaleAction.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

__n128 GenerateImageFeaturePrintRequest.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 GenerateImageFeaturePrintRequest.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*GenerateImageFeaturePrintRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A131BD04()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A131BD88();
  result = sub_1A1378184((uint64_t)&type metadata for GenerateImageFeaturePrintRequest, v0);
  qword_1EE620FC8 = result;
  return result;
}

uint64_t static GenerateImageFeaturePrintRequest.supportedRevisions.getter()
{
  if (qword_1EE620FC0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void GenerateImageFeaturePrintRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = -104;
}

unint64_t sub_1A131BD88()
{
  unint64_t result;

  result = qword_1EE5FF1B0;
  if (!qword_1EE5FF1B0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1BD4, &type metadata for GenerateImageFeaturePrintRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF1B0);
  }
  return result;
}

int *sub_1A131BDCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF220);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(7, 0, 19);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(7, 0, 19);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(7, 0, 19);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for GenerateImageFeaturePrintRequest.Revision, v0 + 32);
  qword_1EE643768 = v0;
  return result;
}

uint64_t GenerateImageFeaturePrintRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  sub_1A12A1438();
  sub_1A15A8B44();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t GenerateImageFeaturePrintRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 40);
  sub_1A15A93E4();
  sub_1A12A1438();
  sub_1A15A8B44();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A131C004(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A131C400();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A131C02C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A131BD88();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A131C06C(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A131BD88();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A131C0AC(_BYTE *a1@<X8>)
{
  *a1 = -104;
}

uint64_t sub_1A131C0B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A131BD88();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A131C0E4()
{
  if (qword_1EE620FD0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A131C124(uint64_t a1, uint64_t a2)
{
  sub_1A12B3354();
  return sub_1A1377AB4(a1, a2);
}

void sub_1A131C15C(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *);
  id v9;
  void (*v10)(_BYTE *, _QWORD);
  _BYTE v11[32];
  _QWORD v12[4];

  v3 = objc_msgSend(objc_allocWithZone((Class)VNCoreSceneUnderstandingDetectorSceneprintConfiguration), sel_initWithObservationsRecipient_, a2);
  v4 = sub_1A15A8BB0();
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD5E8);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A15C5A00;
  *(_QWORD *)(v7 + 32) = v3;
  v12[0] = v7;
  sub_1A15A8C4C();
  v12[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF1B8);
  v8 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200);
  v9 = v3;
  v10 = (void (*)(_BYTE *, _QWORD))v8(v11);
  sub_1A128D188((uint64_t)v12, v4, v6);
  v10(v11, 0);

}

void sub_1A131C25C(uint64_t a1, uint64_t a2)
{
  sub_1A131C15C(a1, a2);
}

unint64_t sub_1A131C274()
{
  unint64_t result;

  result = qword_1EE5FF1C0;
  if (!qword_1EE5FF1C0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateImageFeaturePrintRequest.Revision, &type metadata for GenerateImageFeaturePrintRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF1C0);
  }
  return result;
}

unint64_t sub_1A131C2B8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6E3C();
  result = sub_1A131C2E4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A131C2E4()
{
  unint64_t result;

  result = qword_1EE5FF1F8;
  if (!qword_1EE5FF1F8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateImageFeaturePrintRequest, &type metadata for GenerateImageFeaturePrintRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF1F8);
  }
  return result;
}

unint64_t sub_1A131C32C()
{
  unint64_t result;

  result = qword_1EE5FF200;
  if (!qword_1EE5FF200)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateImageFeaturePrintRequest, &type metadata for GenerateImageFeaturePrintRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF200);
  }
  return result;
}

unint64_t sub_1A131C374()
{
  unint64_t result;

  result = qword_1EE5FF208;
  if (!qword_1EE5FF208)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateImageFeaturePrintRequest.Revision, &type metadata for GenerateImageFeaturePrintRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF208);
  }
  return result;
}

unint64_t sub_1A131C3B8(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B3354();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A131C3DC(uint64_t a1)
{
  unint64_t result;

  result = sub_1A131C400();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A131C400()
{
  unint64_t result;

  result = qword_1EE5FF210;
  if (!qword_1EE5FF210)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1C0C, &type metadata for GenerateImageFeaturePrintRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF210);
  }
  return result;
}

uint64_t sub_1A131C444()
{
  return sub_1A12857D8(&qword_1EE5FF218, (uint64_t (*)(uint64_t))type metadata accessor for FeaturePrintObservation, (uint64_t)&unk_1A15C3D3C);
}

unint64_t sub_1A131C470(uint64_t a1)
{
  unint64_t result;

  result = sub_1A131BD88();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for GenerateImageFeaturePrintRequest()
{
  return &type metadata for GenerateImageFeaturePrintRequest;
}

ValueMetadata *type metadata accessor for GenerateImageFeaturePrintRequest.Revision()
{
  return &type metadata for GenerateImageFeaturePrintRequest.Revision;
}

uint64_t _s6Vision32GenerateImageFeaturePrintRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A131C4F8 + 4 * asc_1A15D19F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A131C518 + 4 * byte_1A15D19F5[v4]))();
}

_BYTE *sub_1A131C4F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A131C518(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A131C520(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A131C528(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A131C530(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A131C538(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GenerateImageFeaturePrintRequest.Revision.CodingKeys()
{
  return &type metadata for GenerateImageFeaturePrintRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for GenerateImageFeaturePrintRequest.Revision.Revision2CodingKeys()
{
  return &type metadata for GenerateImageFeaturePrintRequest.Revision.Revision2CodingKeys;
}

unint64_t sub_1A131C568()
{
  unint64_t result;

  result = qword_1EE621870[0];
  if (!qword_1EE621870[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1D84, &type metadata for GenerateImageFeaturePrintRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE621870);
  }
  return result;
}

unint64_t sub_1A131C5B0()
{
  unint64_t result;

  result = qword_1EE621980;
  if (!qword_1EE621980)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1CA4, &type metadata for GenerateImageFeaturePrintRequest.Revision.Revision2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE621980);
  }
  return result;
}

unint64_t sub_1A131C5F8()
{
  unint64_t result;

  result = qword_1EE621988[0];
  if (!qword_1EE621988[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1CCC, &type metadata for GenerateImageFeaturePrintRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE621988);
  }
  return result;
}

unint64_t sub_1A131C640()
{
  unint64_t result;

  result = qword_1EE621A10;
  if (!qword_1EE621A10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1CF4, &type metadata for GenerateImageFeaturePrintRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE621A10);
  }
  return result;
}

unint64_t sub_1A131C688()
{
  unint64_t result;

  result = qword_1EE621A18[0];
  if (!qword_1EE621A18[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D1D1C, &type metadata for GenerateImageFeaturePrintRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE621A18);
  }
  return result;
}

BOOL static HumanBodyPose3DObservation.EstimationTechnique.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t HumanBodyPose3DObservation.EstimationTechnique.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A131C710()
{
  _BYTE *v0;

  if (*v0)
    return 0x646572757361656DLL;
  else
    return 0x636E657265666572;
}

uint64_t sub_1A131C750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1322738(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A131C774()
{
  sub_1A131CA38();
  return sub_1A15A9474();
}

uint64_t sub_1A131C79C()
{
  sub_1A131CA38();
  return sub_1A15A9480();
}

uint64_t sub_1A131C7C4()
{
  sub_1A131CA7C();
  return sub_1A15A9474();
}

uint64_t sub_1A131C7EC()
{
  sub_1A131CA7C();
  return sub_1A15A9480();
}

uint64_t sub_1A131C814()
{
  sub_1A131CAC0();
  return sub_1A15A9474();
}

uint64_t sub_1A131C83C()
{
  sub_1A131CAC0();
  return sub_1A15A9480();
}

uint64_t HumanBodyPose3DObservation.EstimationTechnique.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF228);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF230);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF238);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A131CA38();
  sub_1A15A9468();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A131CA7C();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A131CAC0();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_1A131CA38()
{
  unint64_t result;

  result = qword_1EE621AB0;
  if (!qword_1EE621AB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D293C, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE621AB0);
  }
  return result;
}

unint64_t sub_1A131CA7C()
{
  unint64_t result;

  result = qword_1EE621AB8;
  if (!qword_1EE621AB8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D28EC, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.MeasuredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE621AB8);
  }
  return result;
}

unint64_t sub_1A131CAC0()
{
  unint64_t result;

  result = qword_1EE621AC0;
  if (!qword_1EE621AC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D289C, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.ReferenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE621AC0);
  }
  return result;
}

uint64_t HumanBodyPose3DObservation.EstimationTechnique.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t HumanBodyPose3DObservation.EstimationTechnique.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF240);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF248);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF250);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A131CA38();
  v11 = v33;
  sub_1A15A945C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A15A9294();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A15A90F0();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v21 = &type metadata for HumanBodyPose3DObservation.EstimationTechnique;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A131CA7C();
    sub_1A15A9204();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A131CAC0();
    v22 = v6;
    sub_1A15A9204();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_1A131CEA0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return HumanBodyPose3DObservation.EstimationTechnique.init(from:)(a1, a2);
}

uint64_t sub_1A131CEB4(_QWORD *a1)
{
  return HumanBodyPose3DObservation.EstimationTechnique.encode(to:)(a1);
}

void HumanBodyPose3DObservation.heightEstimationTechnique.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t HumanBodyPose3DObservation.bodyHeight.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HumanBodyPose3DObservation() + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for HumanBodyPose3DObservation()
{
  uint64_t result;

  result = qword_1EE6224D0;
  if (!qword_1EE6224D0)
    return swift_getSingletonMetadata();
  return result;
}

__n128 HumanBodyPose3DObservation.cameraOriginMatrix.getter()
{
  uint64_t v0;

  return *(__n128 *)(v0 + *(int *)(type metadata accessor for HumanBodyPose3DObservation() + 24));
}

uint64_t HumanBodyPose3DObservation.availableJointNames.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for HumanBodyPose3DObservation();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_1A13224B4(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *HumanBodyPose3DObservation.availableJointsGroupNames.getter()
{
  return &unk_1E45348B8;
}

void *static HumanBodyPose3DObservation.JointsGroupName.allCases.getter()
{
  return &unk_1E4534500;
}

uint64_t HumanBodyPose3DObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HumanBodyPose3DObservation() + 28);
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

float HumanBodyPose3DObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for HumanBodyPose3DObservation() + 32));
}

__n128 HumanBodyPose3DObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for HumanBodyPose3DObservation() + 36);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t HumanBodyPose3DObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HumanBodyPose3DObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t HumanBodyPose3DObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A15A9090();
  sub_1A15A8BEC();
  v0 = type metadata accessor for HumanBodyPose3DObservation();
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v1 = sub_1A12857D8(&qword_1EE5FF260, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
  sub_1A132D4B4(v0, (uint64_t)&off_1E4534B70, v1);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

void __swiftcall HumanBodyPose3DObservation.joint(for:)(Vision::Joint3D_optional *__return_ptr retstr, Vision::HumanBodyPose3DObservation::JointName a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _OWORD v20[10];

  v3 = (unsigned __int8 *)a2;
  v5 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for HumanBodyPose3DObservation() + 44));
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_1A1321238(*v3), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(v5 + 56) + 160 * v6;
    v9 = *(simd_float4 *)(v8 + 16);
    v10 = *(simd_float4 *)(v8 + 32);
    v11 = *(simd_float4 *)(v8 + 48);
    v12 = *(simd_float4 *)(v8 + 64);
    v13 = *(simd_float4 *)(v8 + 80);
    v14 = *(simd_float4 *)(v8 + 96);
    v15 = *(simd_float4 *)(v8 + 112);
    v16 = *(_QWORD *)(v8 + 128);
    v17 = *(void **)(v8 + 136);
    v18 = *(_QWORD *)(v8 + 144);
    v19 = *(void **)(v8 + 152);
    retstr->value.position.columns[0] = *(simd_float4 *)v8;
    retstr->value.position.columns[1] = v9;
    retstr->value.position.columns[2] = v10;
    retstr->value.position.columns[3] = v11;
    retstr->value.localPosition.columns[0] = v12;
    retstr->value.localPosition.columns[1] = v13;
    retstr->value.localPosition.columns[2] = v14;
    retstr->value.localPosition.columns[3] = v15;
    retstr->value.identifier._countAndFlagsBits = v16;
    retstr->value.identifier._object = v17;
    retstr->value.parentJoint._countAndFlagsBits = v18;
    retstr->value.parentJoint._object = v19;
    TtTrkRpnNode::config((TtTrkRpnNode *)retstr);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1A1322588(v20);
    sub_1A12B446C((uint64_t)v20, (uint64_t)retstr, &qword_1EE5FF268);
  }
}

uint64_t HumanBodyPose3DObservation.allJoints(in:)(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  char v27;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _QWORD *v46;

  if (*a1 == 6)
  {
    v2 = *(_QWORD **)(v1 + *(int *)(type metadata accessor for HumanBodyPose3DObservation() + 44));
    swift_bridgeObjectRetain();
    return (uint64_t)v2;
  }
  LOBYTE(v46) = *a1;
  v3 = sub_1A131D620((uint64_t)&v46);
  if (v3)
    v4 = v3;
  else
    v4 = MEMORY[0x1E0DEE9D8];
  v2 = (_QWORD *)sub_1A131D6C4(MEMORY[0x1E0DEE9D8]);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  v6 = 0;
  v7 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for HumanBodyPose3DObservation() + 44));
  v35 = v5;
  v36 = v4;
  v34 = v7;
  while (1)
  {
    v9 = *(unsigned __int8 *)(v4 + v6 + 32);
    if (!*(_QWORD *)(v7 + 16) || (v10 = sub_1A1321238(*(unsigned __int8 *)(v4 + v6 + 32)), (v11 & 1) == 0))
    {
      swift_bridgeObjectRetain();
      v25 = sub_1A1321238(v9);
      v27 = v26;
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v46 = v2;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_1A13222D8();
          v2 = v46;
        }
        sub_1A1321D78(v25, (uint64_t)v2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_10;
    }
    v12 = *(_QWORD *)(v7 + 56) + 160 * v10;
    v37 = *(_OWORD *)v12;
    v38 = *(_OWORD *)(v12 + 16);
    v39 = *(_OWORD *)(v12 + 32);
    v40 = *(_OWORD *)(v12 + 48);
    v41 = *(_OWORD *)(v12 + 64);
    v42 = *(_OWORD *)(v12 + 80);
    v43 = *(_OWORD *)(v12 + 96);
    v44 = *(_OWORD *)(v12 + 112);
    v13 = *(_QWORD *)(v12 + 128);
    v14 = *(_QWORD *)(v12 + 136);
    v15 = *(_QWORD *)(v12 + 152);
    v45 = *(_QWORD *)(v12 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v46 = v2;
    v18 = sub_1A1321238(v9);
    v19 = v2[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v2[3] >= v21)
    {
      if ((v16 & 1) == 0)
        sub_1A13222D8();
    }
    else
    {
      sub_1A13217C8(v21, v16);
      v23 = sub_1A1321238(v9);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_30;
      v18 = v23;
    }
    v2 = v46;
    if ((v22 & 1) != 0)
    {
      v8 = v46[7] + 160 * v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_OWORD *)v8 = v37;
      *(_OWORD *)(v8 + 16) = v38;
      *(_OWORD *)(v8 + 32) = v39;
      *(_OWORD *)(v8 + 48) = v40;
      *(_OWORD *)(v8 + 64) = v41;
      *(_OWORD *)(v8 + 80) = v42;
      *(_OWORD *)(v8 + 96) = v43;
      *(_OWORD *)(v8 + 112) = v44;
      *(_QWORD *)(v8 + 128) = v13;
      *(_QWORD *)(v8 + 136) = v14;
      *(_QWORD *)(v8 + 144) = v45;
      *(_QWORD *)(v8 + 152) = v15;
    }
    else
    {
      v46[(v18 >> 6) + 8] |= 1 << v18;
      *(_BYTE *)(v2[6] + v18) = v9;
      v29 = v2[7] + 160 * v18;
      *(_OWORD *)v29 = v37;
      *(_OWORD *)(v29 + 16) = v38;
      *(_OWORD *)(v29 + 32) = v39;
      *(_OWORD *)(v29 + 48) = v40;
      *(_OWORD *)(v29 + 64) = v41;
      *(_OWORD *)(v29 + 80) = v42;
      *(_OWORD *)(v29 + 96) = v43;
      *(_OWORD *)(v29 + 112) = v44;
      *(_QWORD *)(v29 + 128) = v13;
      *(_QWORD *)(v29 + 136) = v14;
      *(_QWORD *)(v29 + 144) = v45;
      *(_QWORD *)(v29 + 152) = v15;
      v30 = v2[2];
      v31 = __OFADD__(v30, 1);
      v32 = v30 + 1;
      if (v31)
        goto LABEL_29;
      v2[2] = v32;
    }
    swift_bridgeObjectRelease();
    v5 = v35;
    v4 = v36;
    v7 = v34;
LABEL_10:
    if (v5 == ++v6)
      goto LABEL_26;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  result = sub_1A15A9390();
  __break(1u);
  return result;
}

uint64_t sub_1A131D620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;

  v3 = type metadata accessor for HumanBodyPose3DObservation();
  result = 0;
  v5 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 40));
  if (v5 <= 0xFB && (v5 & 0xF8) == 0x60)
    __asm { BR              X10 }
  return result;
}

unint64_t sub_1A131D6C4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF3D8);
  v2 = (_QWORD *)sub_1A15A91D4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (__int128 *)(a1 + 112);
  while (1)
  {
    v5 = *((unsigned __int8 *)v4 - 80);
    v23 = *(v4 - 4);
    v21 = *(v4 - 2);
    v22 = *(v4 - 3);
    v19 = *v4;
    v20 = *(v4 - 1);
    v17 = v4[2];
    v18 = v4[1];
    v16 = v4[3];
    v6 = *((_QWORD *)v4 + 8);
    v7 = *((_QWORD *)v4 + 9);
    v9 = *((_QWORD *)v4 + 10);
    v8 = *((_QWORD *)v4 + 11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1A1321238(v5);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    v12 = v2[7] + 160 * result;
    *(_OWORD *)v12 = v23;
    *(_OWORD *)(v12 + 16) = v22;
    *(_OWORD *)(v12 + 32) = v21;
    *(_OWORD *)(v12 + 48) = v20;
    *(_OWORD *)(v12 + 64) = v19;
    *(_OWORD *)(v12 + 80) = v18;
    *(_OWORD *)(v12 + 96) = v17;
    *(_OWORD *)(v12 + 112) = v16;
    *(_QWORD *)(v12 + 128) = v6;
    *(_QWORD *)(v12 + 136) = v7;
    *(_QWORD *)(v12 + 144) = v9;
    *(_QWORD *)(v12 + 152) = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 11;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Vision::NormalizedPoint __swiftcall HumanBodyPose3DObservation.pointInImage(for:)(Vision::HumanBodyPose3DObservation::JointName a1)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  TtTrkRpnNode *v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  double x;
  double y;
  Vision::NormalizedPoint v13;
  Vision::NormalizedPoint result;

  v3 = (unsigned __int8 *)a1;
  v4 = v1;
  v5 = type metadata accessor for HumanBodyPose3DObservation();
  if (*(_QWORD *)(*(_QWORD *)(v2 + *(int *)(v5 + 44)) + 16)
    && (v6 = v5, v7 = (TtTrkRpnNode *)sub_1A1321238(*v3), (v8 & 1) != 0))
  {
    TtTrkRpnNode::config(v7);
    NormalizedPoint.init(imagePoint:in:)((CGPoint)__PAIR128__(v10, v9), *(CGSize *)(v2 + *(int *)(v6 + 56)));
    v13 = NormalizedPoint.verticallyFlipped()();
    y = v13.cgPoint.y;
    x = v13.cgPoint.x;
  }
  else
  {
    static NormalizedPoint.zero.getter(v4);
  }
  result.cgPoint.y = y;
  result.cgPoint.x = x;
  return result;
}

Vision::HumanBodyPose3DObservation::JointName __swiftcall HumanBodyPose3DObservation.parentJointName(for:)(Vision::HumanBodyPose3DObservation::JointName a1)
{
  char *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  char v14;

  v3 = (unsigned __int8 *)a1;
  v4 = v1;
  v5 = type metadata accessor for HumanBodyPose3DObservation();
  v6 = *(_QWORD *)(v2 + *(int *)(v5 + 44));
  if (*(_QWORD *)(v6 + 16))
  {
    v5 = sub_1A1321238(*v3);
    v7 = 15;
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v6 + 56) + 160 * v5;
      v10 = *(_QWORD *)(v9 + 144);
      v11 = *(void **)(v9 + 152);
      swift_bridgeObjectRetain();
      v12._countAndFlagsBits = v10;
      v12._object = v11;
      LOBYTE(v5) = HumanBodyPose3DObservation.JointName.init(rawValue:)(v12);
      if (v14 == 17)
        v7 = 15;
      else
        v7 = v14;
    }
  }
  else
  {
    v7 = 15;
  }
  *v4 = v7;
  return (char)v5;
}

Vision::HumanBodyPose3DObservation::JointName_optional __swiftcall HumanBodyPose3DObservation.JointName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  Vision::HumanBodyPose3DObservation::JointName_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A15A936C();
  result.value = swift_bridgeObjectRelease();
  v5 = 17;
  if (v3 < 0x11)
    v5 = v3;
  *v2 = v5;
  return result;
}

void __swiftcall HumanBodyPose3DObservation.cameraRelativePosition(for:)(simd_float4x4 *__return_ptr retstr, Vision::HumanBodyPose3DObservation::JointName a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a2;
  if (*(_QWORD *)(*(_QWORD *)(v2 + *(int *)(type metadata accessor for HumanBodyPose3DObservation() + 44)) + 16))
    sub_1A1321238(*v3);
}

uint64_t HumanBodyPose3DObservation.JointName.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A131DB8C + 4 * byte_1A15D1E56[*v0]))(0x64616548706F74, 0xE700000000000000);
}

uint64_t sub_1A131DB8C()
{
  return 0x65487265746E6563;
}

uint64_t sub_1A131DBA8()
{
  return 0x68537265746E6563;
}

uint64_t sub_1A131DBCC()
{
  return 0x756F68537466656CLL;
}

uint64_t sub_1A131DBEC()
{
  return 0x6F68537468676972;
}

uint64_t sub_1A131DC10()
{
  return 0x6F626C457466656CLL;
}

uint64_t sub_1A131DC34()
{
  return 0x626C457468676972;
}

uint64_t sub_1A131DC54()
{
  return 0x736972577466656CLL;
}

uint64_t sub_1A131DC74()
{
  return 0x6972577468676972;
}

uint64_t sub_1A131DC90()
{
  return 0x7069487466656CLL;
}

uint64_t sub_1A131DCA4()
{
  return 0x7069487468676972;
}

uint64_t sub_1A131DCBC()
{
  return 0x65656E4B7466656CLL;
}

uint64_t sub_1A131DCD4()
{
  return 0x656E4B7468676972;
}

uint64_t sub_1A131DD04()
{
  return 0x6B6E417468676972;
}

uint64_t sub_1A131DD24()
{
  return 1953460082;
}

uint64_t sub_1A131DD34()
{
  return 0x656E697073;
}

uint64_t sub_1A131DD48()
{
  return sub_1A131DD54();
}

uint64_t sub_1A131DD54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = HumanBodyPose3DObservation.JointName.rawValue.getter();
  v2 = v1;
  if (v0 == HumanBodyPose3DObservation.JointName.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void sub_1A131DDE8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A131DE28(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A131DEB8 + 4 * byte_1A15D1E6D[a2]))(0x6D72417466656CLL);
}

uint64_t sub_1A131DEB8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D72417466656CLL && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

Vision::HumanBodyPose3DObservation::JointName_optional sub_1A131DF98(Swift::String *a1)
{
  return HumanBodyPose3DObservation.JointName.init(rawValue:)(*a1);
}

uint64_t sub_1A131DFA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = HumanBodyPose3DObservation.JointName.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A131DFC8()
{
  sub_1A15A93E4();
  HumanBodyPose3DObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

void sub_1A131E02C(char a1)
{
  sub_1A15A93E4();
  __asm { BR              X10 }
}

uint64_t sub_1A131E074()
{
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A131E110()
{
  HumanBodyPose3DObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A131E160()
{
  sub_1A15A93E4();
  HumanBodyPose3DObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

void sub_1A131E1C0(uint64_t a1, char a2)
{
  sub_1A15A93E4();
  __asm { BR              X10 }
}

uint64_t sub_1A131E204()
{
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A131E2A0()
{
  sub_1A13246D8();
  return sub_1A15A8C1C();
}

uint64_t sub_1A131E2FC()
{
  sub_1A13246D8();
  return sub_1A15A8C10();
}

Vision::HumanBodyPose3DObservation::JointsGroupName_optional __swiftcall HumanBodyPose3DObservation.JointsGroupName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  Vision::HumanBodyPose3DObservation::JointsGroupName_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A15A91EC();
  result.value = swift_bridgeObjectRelease();
  v5 = 6;
  if (v3 < 6)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t HumanBodyPose3DObservation.JointsGroupName.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A131E3C8 + 4 * byte_1A15D1E7F[*v0]))(1684104552, 0xE400000000000000);
}

uint64_t sub_1A131E3C8()
{
  return 0x6D72417466656CLL;
}

uint64_t sub_1A131E3E0()
{
  return 0x67654C7466656CLL;
}

uint64_t sub_1A131E3F8()
{
  return 0x6D72417468676972;
}

uint64_t sub_1A131E410()
{
  return 0x67654C7468676972;
}

uint64_t sub_1A131E428()
{
  return 0x6F73726F74;
}

void sub_1A131E43C(char *a1)
{
  sub_1A131DDE8(*a1);
}

Vision::HumanBodyPose3DObservation::JointsGroupName_optional sub_1A131E448(Swift::String *a1)
{
  return HumanBodyPose3DObservation.JointsGroupName.init(rawValue:)(*a1);
}

uint64_t sub_1A131E454()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A131E47C + 4 * byte_1A15D1E85[*v0]))();
}

void sub_1A131E47C(_QWORD *a1@<X8>)
{
  *a1 = 0x6D72417466656CLL;
  a1[1] = 0xE700000000000000;
}

void sub_1A131E498(_QWORD *a1@<X8>)
{
  *a1 = 0x67654C7466656CLL;
  a1[1] = 0xE700000000000000;
}

void sub_1A131E4B4(_QWORD *a1@<X8>)
{
  *a1 = 0x6D72417468676972;
  a1[1] = 0xE800000000000000;
}

void sub_1A131E4D0(_QWORD *a1@<X8>)
{
  *a1 = 0x67654C7468676972;
  a1[1] = 0xE800000000000000;
}

void sub_1A131E4EC(_QWORD *a1@<X8>)
{
  *a1 = 0x6F73726F74;
  a1[1] = 0xE500000000000000;
}

void sub_1A131E504(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4534500;
}

void sub_1A131E514()
{
  char *v0;

  sub_1A131E02C(*v0);
}

void sub_1A131E51C()
{
  __asm { BR              X10 }
}

uint64_t sub_1A131E550()
{
  sub_1A15A8BC8();
  return swift_bridgeObjectRelease();
}

void sub_1A131E5D8(uint64_t a1)
{
  char *v1;

  sub_1A131E1C0(a1, *v1);
}

uint64_t sub_1A131E5E4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  int64_t v30;
  _BYTE v31[16];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[16];

  if (result == a2)
    return 1;
  v2 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v30 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v8 = v7 | (v3 << 6);
      goto LABEL_24;
    }
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v9 >= v30)
      return 1;
    v10 = *(_QWORD *)(v29 + 8 * v9);
    ++v3;
    if (!v10)
    {
      v3 = v9 + 1;
      if (v9 + 1 >= v30)
        return 1;
      v10 = *(_QWORD *)(v29 + 8 * v3);
      if (!v10)
      {
        v3 = v9 + 2;
        if (v9 + 2 >= v30)
          return 1;
        v10 = *(_QWORD *)(v29 + 8 * v3);
        if (!v10)
        {
          v3 = v9 + 3;
          if (v9 + 3 >= v30)
            return 1;
          v10 = *(_QWORD *)(v29 + 8 * v3);
          if (!v10)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v3 << 6);
LABEL_24:
    v12 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v8);
    v13 = *(_QWORD *)(v2 + 56) + 160 * v8;
    v14 = *(_OWORD *)v13;
    v15 = *(_OWORD *)(v13 + 16);
    v16 = *(_OWORD *)(v13 + 32);
    v17 = *(_OWORD *)(v13 + 48);
    v18 = *(_OWORD *)(v13 + 64);
    v19 = *(_OWORD *)(v13 + 80);
    v20 = *(_OWORD *)(v13 + 96);
    v21 = *(_OWORD *)(v13 + 112);
    v22 = *(_QWORD *)(v13 + 128);
    v23 = *(_QWORD *)(v13 + 136);
    v24 = *(_QWORD *)(v13 + 144);
    v25 = *(_QWORD *)(v13 + 152);
    v31[0] = v12;
    v32 = v14;
    v33 = v15;
    v34 = v16;
    v35 = v17;
    v36 = v18;
    v37 = v19;
    v38 = v20;
    v39 = v21;
    v40 = v22;
    v41 = v23;
    v42 = v24;
    v43 = v25;
    TtTrkRpnNode::config((TtTrkRpnNode *)v31);
    sub_1A12B446C((uint64_t)v31, (uint64_t)v44, &qword_1EE5FF3C8);
    v26 = v44[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1A1321238(v26);
    if ((v27 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_1A132471C();
    v28 = sub_1A15A8B80();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
      return 0;
  }
  v11 = v9 + 4;
  if (v11 >= v30)
    return 1;
  v10 = *(_QWORD *)(v29 + 8 * v11);
  if (v10)
  {
    v3 = v11;
    goto LABEL_23;
  }
  while (1)
  {
    v3 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v3 >= v30)
      return 1;
    v10 = *(_QWORD *)(v29 + 8 * v3);
    ++v11;
    if (v10)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t HumanBodyPose3DObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for HumanBodyPose3DObservation();
  sub_1A12857D8(&qword_1EE5FF270, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A131E938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE5FF260, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

uint64_t sub_1A131E990@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, BOOL *a4@<X8>)
{
  char v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  BOOL v23;
  id v24;
  int *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  id v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL *v44;
  uint64_t result;
  BOOL *v46;
  BOOL *v47;
  BOOL *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  __int128 v61;
  id v62[3];

  v62[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = sub_1A131D6C4(MEMORY[0x1E0DEE9D8]);
  v9 = objc_msgSend(a1, sel_availableJointNames);
  _s3__C9JointNameVMa_0(0);
  v10 = sub_1A15A8C40();

  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v60 = v8;
    v53 = v7;
    for (i = 0; i != v11; ++i)
    {
      v13 = *(void **)(v10 + 8 * i + 32);
      v62[0] = 0;
      v14 = v13;
      v15 = objc_msgSend(a1, sel_recognizedPointForJointName_error_, v14, v62);
      v16 = v62[0];
      if (v15)
      {
        v17 = v15;
        v18 = v14;
        v19 = v16;
        sub_1A131F204(v18, (char *)v62);
        v20 = LOBYTE(v62[0]);
        if (LOBYTE(v62[0]) != 17)
        {
          sub_1A131F204(objc_msgSend(v17, sel_parentJoint), (char *)v62);
          if (LOBYTE(v62[0]) != 17)
          {
            objc_msgSend(v17, sel_position);
            objc_msgSend(v17, sel_localPosition);
            __asm { BR              X8 }
          }
        }

      }
      else
      {
        v21 = v62[0];
        v22 = (void *)sub_1A15A8844();

        swift_willThrow();
      }
    }
    swift_bridgeObjectRelease();
    v7 = v53;
    v8 = v60;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v23 = objc_msgSend(a1, sel_heightEstimation) == (id)1;
  objc_msgSend(a1, sel_bodyHeight);
  v24 = objc_msgSend((id)objc_opt_self(), sel_meters);
  v25 = (int *)type metadata accessor for HumanBodyPose3DObservation();
  sub_1A1322AD0();
  sub_1A15A87B4();
  objc_msgSend(a1, sel_cameraOriginMatrix);
  v59 = v27;
  v61 = v26;
  v57 = v29;
  v58 = v28;
  v30 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v32 = v31;
  objc_msgSend(a1, sel__cameraIntrinsics);
  v55 = v34;
  v56 = v33;
  v54 = v35;
  objc_msgSend(a1, sel__cameraRootTransform);
  v51 = v37;
  v52 = v36;
  v49 = v39;
  v50 = v38;
  objc_msgSend(a1, sel__inputSize);
  v41 = v40;
  v43 = v42;

  *a4 = v23;
  v44 = &a4[v25[6]];
  *(_OWORD *)v44 = v61;
  *((_OWORD *)v44 + 1) = v59;
  *((_OWORD *)v44 + 2) = v58;
  *((_OWORD *)v44 + 3) = v57;
  *(_DWORD *)&a4[v25[8]] = v32;
  result = sub_1A12B446C(a3, (uint64_t)&a4[v25[9]], &qword_1EE5FCD30);
  a4[v25[10]] = v7;
  *(_QWORD *)&a4[v25[11]] = v8;
  v46 = &a4[v25[12]];
  *(_OWORD *)v46 = v56;
  *((_OWORD *)v46 + 1) = v55;
  *((_OWORD *)v46 + 2) = v54;
  v47 = &a4[v25[13]];
  *(_OWORD *)v47 = v52;
  *((_OWORD *)v47 + 1) = v51;
  *((_OWORD *)v47 + 2) = v50;
  *((_OWORD *)v47 + 3) = v49;
  v48 = &a4[v25[14]];
  *(_QWORD *)v48 = v41;
  *((_QWORD *)v48 + 1) = v43;
  return result;
}

void sub_1A131F204(void *a1@<X0>, char *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  char v125;
  id v126;

  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v6 = sub_1A15A8BB0();
  v8 = v7;
  if (v6 == sub_1A15A8BB0() && v8 == v9)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
  v11 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
LABEL_10:

    v18 = 0;
    goto LABEL_11;
  }
  sub_1A15A8BB0();
  v12 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v13 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v14 = sub_1A15A8BB0();
  v16 = v15;
  if (v14 == sub_1A15A8BB0() && v16 == v17)
  {

    swift_bridgeObjectRelease_n();
LABEL_13:

    v18 = 1;
    goto LABEL_11;
  }
  v19 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    goto LABEL_13;
  sub_1A15A8BB0();
  v20 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v21 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v22 = sub_1A15A8BB0();
  v24 = v23;
  if (v22 == sub_1A15A8BB0() && v24 == v25)
  {

    swift_bridgeObjectRelease_n();
LABEL_18:

    v18 = 2;
    goto LABEL_11;
  }
  v26 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
    goto LABEL_18;
  sub_1A15A8BB0();
  v27 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v28 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v29 = sub_1A15A8BB0();
  v31 = v30;
  if (v29 == sub_1A15A8BB0() && v31 == v32)
  {

    swift_bridgeObjectRelease_n();
LABEL_23:

    v18 = 3;
    goto LABEL_11;
  }
  v33 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
    goto LABEL_23;
  sub_1A15A8BB0();
  v34 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v35 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v36 = sub_1A15A8BB0();
  v38 = v37;
  if (v36 == sub_1A15A8BB0() && v38 == v39)
  {

    swift_bridgeObjectRelease_n();
LABEL_28:

    v18 = 4;
    goto LABEL_11;
  }
  v40 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v40 & 1) != 0)
    goto LABEL_28;
  sub_1A15A8BB0();
  v41 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v42 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v43 = sub_1A15A8BB0();
  v45 = v44;
  if (v43 == sub_1A15A8BB0() && v45 == v46)
  {

    swift_bridgeObjectRelease_n();
LABEL_33:

    v18 = 5;
    goto LABEL_11;
  }
  v47 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
    goto LABEL_33;
  sub_1A15A8BB0();
  v48 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v49 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v50 = sub_1A15A8BB0();
  v52 = v51;
  if (v50 == sub_1A15A8BB0() && v52 == v53)
  {

    swift_bridgeObjectRelease_n();
LABEL_38:

    v18 = 6;
    goto LABEL_11;
  }
  v54 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) != 0)
    goto LABEL_38;
  sub_1A15A8BB0();
  v55 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v56 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v57 = sub_1A15A8BB0();
  v59 = v58;
  if (v57 == sub_1A15A8BB0() && v59 == v60)
  {

    swift_bridgeObjectRelease_n();
LABEL_43:

    v18 = 7;
    goto LABEL_11;
  }
  v61 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v61 & 1) != 0)
    goto LABEL_43;
  sub_1A15A8BB0();
  v62 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v63 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v64 = sub_1A15A8BB0();
  v66 = v65;
  if (v64 == sub_1A15A8BB0() && v66 == v67)
  {

    swift_bridgeObjectRelease_n();
LABEL_48:

    v18 = 8;
    goto LABEL_11;
  }
  v68 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v68 & 1) != 0)
    goto LABEL_48;
  sub_1A15A8BB0();
  v69 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v70 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v71 = sub_1A15A8BB0();
  v73 = v72;
  if (v71 == sub_1A15A8BB0() && v73 == v74)
  {

    swift_bridgeObjectRelease_n();
LABEL_53:

    v18 = 9;
    goto LABEL_11;
  }
  v75 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v75 & 1) != 0)
    goto LABEL_53;
  sub_1A15A8BB0();
  v76 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v77 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v78 = sub_1A15A8BB0();
  v80 = v79;
  if (v78 == sub_1A15A8BB0() && v80 == v81)
  {

    swift_bridgeObjectRelease_n();
LABEL_58:

    v18 = 10;
    goto LABEL_11;
  }
  v82 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v82 & 1) != 0)
    goto LABEL_58;
  sub_1A15A8BB0();
  v83 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v84 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v85 = sub_1A15A8BB0();
  v87 = v86;
  if (v85 == sub_1A15A8BB0() && v87 == v88)
  {

    swift_bridgeObjectRelease_n();
LABEL_63:

    v18 = 11;
    goto LABEL_11;
  }
  v89 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v89 & 1) != 0)
    goto LABEL_63;
  sub_1A15A8BB0();
  v90 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v91 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v92 = sub_1A15A8BB0();
  v94 = v93;
  if (v92 == sub_1A15A8BB0() && v94 == v95)
  {

    swift_bridgeObjectRelease_n();
LABEL_68:

    v18 = 12;
    goto LABEL_11;
  }
  v96 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v96 & 1) != 0)
    goto LABEL_68;
  sub_1A15A8BB0();
  v97 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v98 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v99 = sub_1A15A8BB0();
  v101 = v100;
  if (v99 == sub_1A15A8BB0() && v101 == v102)
  {

    swift_bridgeObjectRelease_n();
LABEL_73:

    v18 = 13;
    goto LABEL_11;
  }
  v103 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v103 & 1) != 0)
    goto LABEL_73;
  sub_1A15A8BB0();
  v104 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v105 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v106 = sub_1A15A8BB0();
  v108 = v107;
  if (v106 == sub_1A15A8BB0() && v108 == v109)
  {

    swift_bridgeObjectRelease_n();
LABEL_78:

    v18 = 14;
    goto LABEL_11;
  }
  v110 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v110 & 1) != 0)
    goto LABEL_78;
  sub_1A15A8BB0();
  v111 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v112 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v113 = sub_1A15A8BB0();
  v115 = v114;
  if (v113 == sub_1A15A8BB0() && v115 == v116)
  {

    swift_bridgeObjectRelease_n();
LABEL_83:

    v18 = 15;
    goto LABEL_11;
  }
  v117 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v117 & 1) != 0)
    goto LABEL_83;
  sub_1A15A8BB0();
  v118 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v119 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v120 = sub_1A15A8BB0();
  v122 = v121;
  if (v120 == sub_1A15A8BB0() && v122 == v123)
  {
    v124 = a1;

    swift_bridgeObjectRelease_n();
    v18 = 16;
  }
  else
  {
    v125 = sub_1A15A9354();
    v126 = a1;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v125 & 1) != 0)
      v18 = 16;
    else
      v18 = 17;
  }
LABEL_11:
  *a2 = v18;
}

uint64_t HumanBodyPose3DObservation.init(_:)@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  __n128 v5[2];
  char v6;
  __int128 v7;
  char v8;

  v6 = -4;
  objc_msgSend(a1, sel_timeRange, static NormalizedRect.fullImage.getter(v5).n128_f64[0]);
  v8 = 0;
  return sub_1A131E990(a1, &v6, (uint64_t)&v7, a2);
}

uint64_t sub_1A1320014@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, BOOL *a4@<X8>)
{
  char v5;

  v5 = *a2;
  return sub_1A131E990(a1, &v5, a3, a4);
}

uint64_t sub_1A132003C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A1320078 + 4 * byte_1A15D1E91[a1]))(0x746176726573626FLL, 0xEB000000006E6F69);
}

uint64_t sub_1A1320078()
{
  return 0x746E696F4A6C6C61;
}

unint64_t sub_1A1320094()
{
  return 0xD000000000000010;
}

uint64_t sub_1A13200B0()
{
  return 0x6769654879646F62;
}

unint64_t sub_1A13200D0()
{
  return 0xD000000000000012;
}

uint64_t sub_1A1320148()
{
  unsigned __int8 *v0;

  return sub_1A132003C(*v0);
}

uint64_t sub_1A1320150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1324358(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A1320174()
{
  sub_1A1322B0C();
  return sub_1A15A9474();
}

uint64_t sub_1A132019C()
{
  sub_1A1322B0C();
  return sub_1A15A9480();
}

uint64_t HumanBodyPose3DObservation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  int *v56;
  __int128 v57;
  _BYTE v58[60];
  char v59;

  v46 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  v49 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  MEMORY[0x1E0C80A78](v3);
  *(_QWORD *)&v47 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A15A88C8();
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  MEMORY[0x1E0C80A78](v5);
  *(_QWORD *)&v48 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF280);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = (int *)type metadata accessor for HumanBodyPose3DObservation();
  MEMORY[0x1E0C80A78](v56);
  v55 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v53 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_1A1322B0C();
  v17 = v54;
  sub_1A15A945C();
  if (v17)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  v44 = v8;
  v54 = v10;
  v43 = v7;
  v45 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF288);
  v59 = 1;
  sub_1A1322C9C(&qword_1EE5FF290, (uint64_t (*)(void))sub_1A1322B50, (uint64_t (*)(void))sub_1A1322B94, MEMORY[0x1E0DEA0D8]);
  sub_1A15A9264();
  v19 = v55;
  *(_QWORD *)&v55[v56[11]] = v57;
  LOBYTE(v57) = 0;
  sub_1A12855AC();
  sub_1A15A9204();
  v42 = v11;
  LOBYTE(v57) = 0;
  sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v20 = v48;
  v21 = v52;
  sub_1A15A9264();
  v22 = v56;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v51 + 32))(&v19[v56[7]], v20, v21);
  LOBYTE(v57) = 1;
  sub_1A15A924C();
  *(_DWORD *)&v19[v22[8]] = v23;
  v59 = 3;
  sub_1A1285654();
  sub_1A15A9264();
  v19[v22[10]] = v57;
  sub_1A12E32A4((uint64_t)v58);
  sub_1A12B446C((uint64_t)v58, (uint64_t)&v19[v22[9]], &qword_1EE5FCD30);
  v59 = 2;
  sub_1A1322BD8();
  sub_1A15A9264();
  *v19 = v57;
  LOBYTE(v57) = 3;
  sub_1A1322FA8(&qword_1EE5FF2B0, &qword_1EE5FF258, MEMORY[0x1E0CAE358]);
  v24 = v47;
  sub_1A15A9264();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v49 + 32))(&v19[v56[5]], v24, v50);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF2B8);
  v59 = 4;
  sub_1A1322DE4(&qword_1EE5FF2C0, &qword_1EE5FF2C8, MEMORY[0x1E0DEDDC8], MEMORY[0x1E0DEAF40]);
  sub_1A15A9264();
  result = v57;
  v25 = *(_QWORD *)(v57 + 16);
  if (!v25)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v25 == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v25 < 3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v25 == 3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v26 = *(_OWORD *)(v57 + 32);
  v47 = *(_OWORD *)(v57 + 48);
  v48 = v26;
  v41 = *(_OWORD *)(v57 + 64);
  v40 = *(_OWORD *)(v57 + 80);
  swift_bridgeObjectRelease();
  v27 = &v55[v56[6]];
  v28 = v47;
  *(_OWORD *)v27 = v48;
  *((_OWORD *)v27 + 1) = v28;
  v29 = v40;
  *((_OWORD *)v27 + 2) = v41;
  *((_OWORD *)v27 + 3) = v29;
  v59 = 7;
  sub_1A15A9264();
  result = v57;
  v30 = *(_QWORD *)(v57 + 16);
  if (!v30)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v30 == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v30 < 3)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v30 == 3)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v31 = *(_OWORD *)(v57 + 32);
  v47 = *(_OWORD *)(v57 + 48);
  v48 = v31;
  v41 = *(_OWORD *)(v57 + 64);
  v40 = *(_OWORD *)(v57 + 80);
  swift_bridgeObjectRelease();
  v32 = &v55[v56[13]];
  v33 = v47;
  *(_OWORD *)v32 = v48;
  *((_OWORD *)v32 + 1) = v33;
  v34 = v40;
  *((_OWORD *)v32 + 2) = v41;
  *((_OWORD *)v32 + 3) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF2D8);
  v59 = 5;
  sub_1A1322E68(&qword_1EE5FF2E0, &qword_1EE5FD2C8, MEMORY[0x1E0DEDD70], MEMORY[0x1E0DEAF40]);
  sub_1A15A9264();
  result = v57;
  v35 = *(_QWORD *)(v57 + 16);
  if (!v35)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v35 == 1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v35 >= 3)
  {
    v36 = *(_OWORD *)(v57 + 32);
    v47 = *(_OWORD *)(v57 + 48);
    v48 = v36;
    v41 = *(_OWORD *)(v57 + 64);
    swift_bridgeObjectRelease();
    v37 = &v55[v56[12]];
    v38 = v47;
    *(_OWORD *)v37 = v48;
    *((_OWORD *)v37 + 1) = v38;
    *((_OWORD *)v37 + 2) = v41;
    type metadata accessor for CGSize(0);
    v59 = 6;
    sub_1A12857D8(&qword_1EE5FF2E8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA08]);
    sub_1A15A9264();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v54, v43);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v42);
    v39 = (uint64_t)v55;
    *(_OWORD *)&v55[v56[14]] = v57;
    sub_1A1322C1C(v39, v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    return sub_1A1322C60(v39);
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t HumanBodyPose3DObservation.encode(to:)(_QWORD *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  char v39;

  v2 = v1;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v4 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF2F0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1322B0C();
  sub_1A15A9468();
  v11 = (int *)type metadata accessor for HumanBodyPose3DObservation();
  *(_QWORD *)&v38 = *(_QWORD *)&v2[v11[11]];
  v39 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF288);
  sub_1A1322C9C(&qword_1EE5FF2F8, (uint64_t (*)(void))sub_1A1322D18, (uint64_t (*)(void))sub_1A1322D5C, MEMORY[0x1E0DEA0B8]);
  v37 = v10;
  v12 = v36;
  sub_1A15A92F4();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v37, v7);
  v33 = v6;
  v34 = v4;
  v36 = v8;
  LOBYTE(v38) = *v2;
  v39 = 2;
  sub_1A1322DA0();
  sub_1A15A92F4();
  v14 = v2;
  LOBYTE(v38) = 3;
  v15 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  v16 = (uint64_t)v11;
  sub_1A1322FA8(&qword_1EE5FF318, &qword_1EE5FF258, MEMORY[0x1E0CAE340]);
  sub_1A15A92F4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF320);
  v17 = (_OWORD *)swift_allocObject();
  v32 = xmmword_1A15D2990;
  v17[1] = xmmword_1A15D2990;
  v18 = &v14[v11[6]];
  v19 = v18[1];
  v17[2] = *v18;
  v17[3] = v19;
  v20 = v18[3];
  v17[4] = v18[2];
  v17[5] = v20;
  *(_QWORD *)&v38 = v17;
  v39 = 4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF2B8);
  sub_1A1322DE4(&qword_1EE5FF328, &qword_1EE5FF330, MEMORY[0x1E0DEDDB8], MEMORY[0x1E0DEAF10]);
  sub_1A15A92F4();
  swift_bridgeObjectRelease();
  v21 = (_OWORD *)swift_allocObject();
  v21[1] = v32;
  v22 = &v14[v11[13]];
  v23 = v22[1];
  v21[2] = *v22;
  v21[3] = v23;
  v24 = v22[3];
  v21[4] = v22[2];
  v21[5] = v24;
  *(_QWORD *)&v38 = v21;
  v39 = 7;
  sub_1A15A92F4();
  swift_bridgeObjectRelease();
  v38 = *(_OWORD *)&v14[v11[14]];
  v39 = 6;
  type metadata accessor for CGSize(0);
  sub_1A12857D8(&qword_1EE5FF338, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9B9F0]);
  sub_1A15A92F4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF340);
  v25 = (_OWORD *)swift_allocObject();
  v25[1] = xmmword_1A15D29A0;
  v26 = &v14[v11[12]];
  v27 = v26[1];
  v25[2] = *v26;
  v25[3] = v27;
  v25[4] = v26[2];
  *(_QWORD *)&v38 = v25;
  v39 = 5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF2D8);
  sub_1A1322E68(&qword_1EE5FF348, &qword_1EE5FD2A8, MEMORY[0x1E0DEDD60], MEMORY[0x1E0DEAF10]);
  sub_1A15A92F4();
  swift_bridgeObjectRelease();
  v28 = v36;
  LOBYTE(v38) = 0;
  sub_1A12855AC();
  v29 = (uint64_t)v33;
  v30 = v37;
  sub_1A15A92AC();
  v31 = sub_1A12857D8(&qword_1EE5FF260, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
  sub_1A12E2C64(v29, v16, (uint64_t)&off_1E4534B70, v31);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v29, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v30, v15);
}

uint64_t sub_1A1321170@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HumanBodyPose3DObservation.init(from:)(a1, a2);
}

uint64_t sub_1A1321184(_QWORD *a1)
{
  return HumanBodyPose3DObservation.encode(to:)(a1);
}

uint64_t sub_1A1321198()
{
  sub_1A12857D8(&qword_1EE5FF3B8, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_0, (uint64_t)&unk_1A15D2704);
  sub_1A12857D8((unint64_t *)&unk_1EE600300, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_0, (uint64_t)&unk_1A15D26A4);
  sub_1A12857D8(&qword_1EE5FE568, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointKey, (uint64_t)&unk_1A15CAA98);
  return sub_1A15A91E0();
}

uint64_t sub_1A1321238(uint64_t a1)
{
  uint64_t v2;

  sub_1A15A93E4();
  HumanBodyPose3DObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  v2 = sub_1A15A9420();
  return sub_1A13212B0(a1, v2);
}

uint64_t sub_1A13212B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

uint64_t sub_1A13217C8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  int64_t v19;
  char v20;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF3D8);
  v20 = a2;
  v6 = sub_1A15A91C8();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_28;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v18 = v2;
  v19 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v19 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((v20 & 1) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_17;
  v13 = 2;
  if (v19 <= 2)
    goto LABEL_21;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_17:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1A15A93E4();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v19 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x1A1321D34);
      }
      if (v13 >= v19)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_17;
    }
  }
LABEL_21:
  swift_release();
  v3 = v18;
  if ((v20 & 1) == 0)
    goto LABEL_28;
LABEL_24:
  v16 = 1 << *(_BYTE *)(v5 + 32);
  if (v16 >= 64)
    bzero(v11, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v16;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v3 = v6;
  return result;
}

unint64_t sub_1A1321D78(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v3 = result;
  v4 = a2 + 64;
  v5 = (result + 1) & ~(-1 << *(_BYTE *)(a2 + 32));
  if (((1 << v5) & *(_QWORD *)(a2 + 64 + 8 * (v5 >> 6))) != 0)
  {
    result = sub_1A15A9078();
    if ((*(_QWORD *)(v4 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v5);
      sub_1A15A93E4();
      __asm { BR              X8 }
    }
    v7 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v8 = *v7;
    v9 = (-1 << v3) - 1;
  }
  else
  {
    v7 = (uint64_t *)(v4 + 8 * (result >> 6));
    v9 = *v7;
    v8 = (-1 << result) - 1;
  }
  *v7 = v9 & v8;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = __OFSUB__(v10, 1);
  v12 = v10 - 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x1A1322124);
  }
  *(_QWORD *)(a2 + 16) = v12;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

uint64_t sub_1A1322168(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1A1321238(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1A13222D8();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_1A1324760((uint64_t)a1, v16[7] + 160 * v10);
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    v18 = (_OWORD *)(v16[7] + 160 * v10);
    v19 = a1[1];
    *v18 = *a1;
    v18[1] = v19;
    v20 = a1[2];
    v21 = a1[3];
    v22 = a1[5];
    v18[4] = a1[4];
    v18[5] = v22;
    v18[2] = v20;
    v18[3] = v21;
    v23 = a1[6];
    v24 = a1[7];
    v25 = a1[9];
    v18[8] = a1[8];
    v18[9] = v25;
    v18[6] = v23;
    v18[7] = v24;
    v26 = v16[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v16[2] = v28;
      return result;
    }
    goto LABEL_14;
  }
  sub_1A13217C8(result, a3 & 1);
  result = sub_1A1321238(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_1A1324760((uint64_t)a1, v16[7] + 160 * v10);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A15A9390();
  __break(1u);
  return result;
}

void *sub_1A13222D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF3D8);
  v2 = *v0;
  v3 = sub_1A15A91BC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      v9 = v30 + 1;
      if (v30 + 1 >= v13)
        goto LABEL_26;
      v31 = *(_QWORD *)(v6 + 8 * v9);
      if (!v31)
        break;
    }
LABEL_25:
    v12 = (v31 - 1) & v31;
    v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 160 * v15;
    v17 = *(_OWORD *)v16;
    v18 = *(_OWORD *)(v16 + 16);
    v19 = *(_OWORD *)(v16 + 32);
    v20 = *(_OWORD *)(v16 + 48);
    v21 = *(_OWORD *)(v16 + 64);
    v22 = *(_OWORD *)(v16 + 80);
    v23 = *(_OWORD *)(v16 + 96);
    v24 = *(_OWORD *)(v16 + 112);
    v26 = *(_QWORD *)(v16 + 128);
    v25 = *(_QWORD *)(v16 + 136);
    v27 = *(_QWORD *)(v16 + 144);
    v28 = *(_QWORD *)(v16 + 152);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v29 = *(_QWORD *)(v4 + 56) + 160 * v15;
    *(_OWORD *)v29 = v17;
    *(_OWORD *)(v29 + 16) = v18;
    *(_OWORD *)(v29 + 32) = v19;
    *(_OWORD *)(v29 + 48) = v20;
    *(_OWORD *)(v29 + 64) = v21;
    *(_OWORD *)(v29 + 80) = v22;
    *(_OWORD *)(v29 + 96) = v23;
    *(_OWORD *)(v29 + 112) = v24;
    *(_QWORD *)(v29 + 128) = v26;
    *(_QWORD *)(v29 + 136) = v25;
    *(_QWORD *)(v29 + 144) = v27;
    *(_QWORD *)(v29 + 152) = v28;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v32 = v30 + 2;
  if (v32 >= v13)
    goto LABEL_26;
  v31 = *(_QWORD *)(v6 + 8 * v32);
  if (v31)
  {
    v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v9);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A13224B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF3E0);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  v5 = sub_1A13225A4(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1A1291BE4();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

double sub_1A1322588(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

_QWORD *sub_1A13225A4(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1A1322738(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x636E657265666572 && a2 == 0xE900000000000065;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646572757361656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BOOL _s6Vision26HumanBodyPose3DObservationV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint32x4_t v13;
  uint64_t v14;
  uint64_t v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  _BOOL4 v21;

  if (*a1 != *a2)
    return 0;
  v4 = (int *)type metadata accessor for HumanBodyPose3DObservation();
  sub_1A1322AD0();
  if ((sub_1A15A87A8() & 1) == 0)
    return 0;
  v5 = v4[6];
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v5 + 16], *(float32x4_t *)&a2[v5 + 16]), (int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v5], *(float32x4_t *)&a2[v5])), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v5 + 32], *(float32x4_t *)&a2[v5 + 32]), (int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v5 + 48], *(float32x4_t *)&a2[v5 + 48])))) & 0x80000000) == 0|| (sub_1A15A88A4() & 1) == 0|| *(float *)&a1[v4[8]] != *(float *)&a2[v4[8]])
  {
    return 0;
  }
  v6 = v4[9];
  v7 = a1[v6 + 48];
  v8 = &a2[v6];
  if ((v7 & 1) != 0)
  {
    if (!v8[48])
      return 0;
  }
  else if ((v8[48] & 1) != 0 || (sub_1A15A8EC8() & 1) == 0)
  {
    return 0;
  }
  v9 = v4[10];
  v10 = a1[v9];
  v11 = a2[v9];
  if (v10 > 0xFB)
  {
    if (v11 > 0xFB)
      goto LABEL_16;
    return 0;
  }
  if (v11 > 0xFB)
    return 0;
  sub_1A12862A0();
  if ((sub_1A15A8B80() & 1) == 0)
    return 0;
LABEL_16:
  if ((sub_1A131E5E4(*(_QWORD *)&a1[v4[11]], *(_QWORD *)&a2[v4[11]]) & 1) == 0)
    return 0;
  v12 = v4[12];
  v13 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v12 + 16], *(float32x4_t *)&a2[v12 + 16]), (int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v12], *(float32x4_t *)&a2[v12])), (int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v12 + 32], *(float32x4_t *)&a2[v12 + 32]));
  v13.i32[3] = v13.i32[2];
  if ((vminvq_u32(v13) & 0x80000000) == 0)
    return 0;
  v14 = v4[13];
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v14 + 16], *(float32x4_t *)&a2[v14 + 16]), (int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v14], *(float32x4_t *)&a2[v14])), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v14 + 32], *(float32x4_t *)&a2[v14 + 32]), (int8x16_t)vceqq_f32(*(float32x4_t *)&a1[v14 + 48], *(float32x4_t *)&a2[v14 + 48])))) & 0x80000000) == 0)return 0;
  v16 = v4[14];
  v17 = *(double *)&a1[v16];
  v18 = *(double *)&a1[v16 + 8];
  v19 = (double *)&a2[v16];
  v20 = v19[1];
  v21 = v17 == *v19;
  return v18 == v20 && v21;
}

void _s3__C9JointNameVMa_0(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE5FF3A8);
}

unint64_t sub_1A1322AD0()
{
  unint64_t result;

  result = qword_1EE5FF278;
  if (!qword_1EE5FF278)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5FF278);
  }
  return result;
}

unint64_t sub_1A1322B0C()
{
  unint64_t result;

  result = qword_1EE621AC8[0];
  if (!qword_1EE621AC8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D284C, &type metadata for HumanBodyPose3DObservation.CodingKeys);
    atomic_store(result, qword_1EE621AC8);
  }
  return result;
}

unint64_t sub_1A1322B50()
{
  unint64_t result;

  result = qword_1EE5FF298;
  if (!qword_1EE5FF298)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanBodyPose3DObservation.JointName, &type metadata for HumanBodyPose3DObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF298);
  }
  return result;
}

unint64_t sub_1A1322B94()
{
  unint64_t result;

  result = qword_1EE5FF2A0;
  if (!qword_1EE5FF2A0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for Joint3D, &type metadata for Joint3D);
    atomic_store(result, (unint64_t *)&qword_1EE5FF2A0);
  }
  return result;
}

unint64_t sub_1A1322BD8()
{
  unint64_t result;

  result = qword_1EE5FF2A8;
  if (!qword_1EE5FF2A8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanBodyPose3DObservation.EstimationTechnique, &type metadata for HumanBodyPose3DObservation.EstimationTechnique);
    atomic_store(result, (unint64_t *)&qword_1EE5FF2A8);
  }
  return result;
}

uint64_t sub_1A1322C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HumanBodyPose3DObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A1322C60(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HumanBodyPose3DObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A1322C9C(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF288);
    v10[0] = a2();
    v10[1] = a3();
    result = MEMORY[0x1A1B0B774](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A1322D18()
{
  unint64_t result;

  result = qword_1EE5FF300;
  if (!qword_1EE5FF300)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanBodyPose3DObservation.JointName, &type metadata for HumanBodyPose3DObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF300);
  }
  return result;
}

unint64_t sub_1A1322D5C()
{
  unint64_t result;

  result = qword_1EE5FF308;
  if (!qword_1EE5FF308)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for Joint3D, &type metadata for Joint3D);
    atomic_store(result, (unint64_t *)&qword_1EE5FF308);
  }
  return result;
}

unint64_t sub_1A1322DA0()
{
  unint64_t result;

  result = qword_1EE5FF310;
  if (!qword_1EE5FF310)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanBodyPose3DObservation.EstimationTechnique, &type metadata for HumanBodyPose3DObservation.EstimationTechnique);
    atomic_store(result, (unint64_t *)&qword_1EE5FF310);
  }
  return result;
}

uint64_t sub_1A1322DE4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF2B8);
    v10 = sub_1A1322FA8(a2, &qword_1EE5FF2D0, a3);
    result = MEMORY[0x1A1B0B774](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A1322E68(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF2D8);
    v10 = sub_1A1322FA8(a2, &qword_1EE5FD270, a3);
    result = MEMORY[0x1A1B0B774](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A1322EF0()
{
  unint64_t result;

  result = qword_1EE5FF350;
  if (!qword_1EE5FF350)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanBodyPose3DObservation.EstimationTechnique, &type metadata for HumanBodyPose3DObservation.EstimationTechnique);
    atomic_store(result, (unint64_t *)&qword_1EE5FF350);
  }
  return result;
}

unint64_t sub_1A1322F38()
{
  unint64_t result;

  result = qword_1EE5FF358;
  if (!qword_1EE5FF358)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanBodyPose3DObservation.JointName, &type metadata for HumanBodyPose3DObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF358);
  }
  return result;
}

uint64_t sub_1A1322F7C()
{
  return sub_1A1322FA8(&qword_1EE5FF360, &qword_1EE5FF368, MEMORY[0x1E0DEAF50]);
}

uint64_t sub_1A1322FA8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A1B0B774](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A1322FEC()
{
  unint64_t result;

  result = qword_1EE5FF370;
  if (!qword_1EE5FF370)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanBodyPose3DObservation.JointsGroupName, &type metadata for HumanBodyPose3DObservation.JointsGroupName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF370);
  }
  return result;
}

uint64_t sub_1A1323030(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE5FF378, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
  a1[2] = sub_1A12857D8(&qword_1EE5FF380, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
  a1[3] = sub_1A12857D8(&qword_1EE5FF388, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
  result = sub_1A12857D8(&qword_1EE5FF270, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A13230C4()
{
  return sub_1A12857D8(&qword_1EE5FDCD0, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
}

uint64_t sub_1A13230F0(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FF260, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPose3DObservation, (uint64_t)&protocol conformance descriptor for HumanBodyPose3DObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for HumanBodyPose3DObservation(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = (_OWORD *)((char *)v4 + v11);
    v14 = (_OWORD *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = v14[3];
    v13[2] = v14[2];
    v13[3] = v16;
    v17 = (char *)v4 + v12;
    v18 = (char *)a2 + v12;
    v19 = sub_1A15A88C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[9];
    *(_DWORD *)((char *)v4 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = *((_OWORD *)v22 + 1);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *((_OWORD *)v21 + 1) = v23;
    *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
    v21[48] = v22[48];
    v24 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *(_QWORD *)((char *)v4 + v24) = *(_QWORD *)((char *)a2 + v24);
    v25 = a3[12];
    v26 = a3[13];
    v27 = *(_OWORD *)((char *)a2 + v25);
    v28 = *(_OWORD *)((char *)a2 + v25 + 16);
    v29 = *(_OWORD *)((char *)a2 + v25 + 32);
    v30 = (_OWORD *)((char *)v4 + v25);
    *v30 = v27;
    v30[1] = v28;
    v30[2] = v29;
    v31 = (_OWORD *)((char *)v4 + v26);
    v32 = (_OWORD *)((char *)a2 + v26);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = v32[3];
    v31[2] = v32[2];
    v31[3] = v34;
    *(_OWORD *)((char *)v4 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for HumanBodyPose3DObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for HumanBodyPose3DObservation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v13[3];
  v12[2] = v13[2];
  v12[3] = v15;
  v16 = &a1[v11];
  v17 = &a2[v11];
  v18 = sub_1A15A88C8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[9];
  *(_DWORD *)&a1[a3[8]] = *(_DWORD *)&a2[a3[8]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  v20[48] = v21[48];
  v23 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  v24 = a3[12];
  v25 = a3[13];
  v26 = *(_OWORD *)&a2[v24];
  v27 = *(_OWORD *)&a2[v24 + 16];
  v28 = *(_OWORD *)&a2[v24 + 32];
  v29 = &a1[v24];
  *v29 = v26;
  v29[1] = v27;
  v29[2] = v28;
  v30 = &a1[v25];
  v31 = &a2[v25];
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = v31[3];
  v30[2] = v31[2];
  v30[3] = v33;
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for HumanBodyPose3DObservation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v11[1] = v12[1];
  v11[2] = v12[2];
  v11[3] = v12[3];
  v13 = a3[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_1A15A88C8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  *(_DWORD *)&a1[a3[8]] = *(_DWORD *)&a2[a3[8]];
  v17 = a3[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = v19[48];
  v22 = *((_OWORD *)v19 + 1);
  v21 = *((_OWORD *)v19 + 2);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v22;
  *((_OWORD *)v18 + 2) = v21;
  v18[48] = v20;
  a1[a3[10]] = a2[a3[10]];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[12];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *v24 = *v25;
  v24[1] = v25[1];
  v24[2] = v25[2];
  v26 = a3[13];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *v27 = *v28;
  v27[1] = v28[1];
  v27[2] = v28[2];
  v27[3] = v28[3];
  v29 = a3[14];
  v30 = &a1[v29];
  v31 = &a2[v29];
  *v30 = *v31;
  v30[1] = v31[1];
  return a1;
}

_BYTE *initializeWithTake for HumanBodyPose3DObservation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v13[3];
  v12[2] = v13[2];
  v12[3] = v15;
  v16 = &a1[v11];
  v17 = &a2[v11];
  v18 = sub_1A15A88C8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[9];
  *(_DWORD *)&a1[a3[8]] = *(_DWORD *)&a2[a3[8]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  v20[48] = v21[48];
  v23 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  v24 = a3[12];
  v25 = a3[13];
  v26 = *(_OWORD *)&a2[v24];
  v27 = *(_OWORD *)&a2[v24 + 16];
  v28 = *(_OWORD *)&a2[v24 + 32];
  v29 = &a1[v24];
  *v29 = v26;
  v29[1] = v27;
  v29[2] = v28;
  v30 = &a1[v25];
  v31 = &a2[v25];
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = v31[3];
  v30[2] = v31[2];
  v30[3] = v33;
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  return a1;
}

_BYTE *assignWithTake for HumanBodyPose3DObservation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v13[3];
  v12[2] = v13[2];
  v12[3] = v15;
  v16 = &a1[v11];
  v17 = &a2[v11];
  v18 = sub_1A15A88C8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[9];
  *(_DWORD *)&a1[a3[8]] = *(_DWORD *)&a2[a3[8]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  v20[48] = v21[48];
  v23 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  swift_bridgeObjectRelease();
  v24 = a3[12];
  v25 = a3[13];
  v26 = *(_OWORD *)&a2[v24];
  v27 = *(_OWORD *)&a2[v24 + 16];
  v28 = *(_OWORD *)&a2[v24 + 32];
  v29 = &a1[v24];
  *v29 = v26;
  v29[1] = v27;
  v29[2] = v28;
  v30 = &a1[v25];
  v31 = &a2[v25];
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = v31[3];
  v30[2] = v31[2];
  v30[3] = v33;
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  return a1;
}

uint64_t getEnumTagSinglePayload for HumanBodyPose3DObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A132384C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_1A15A88C8();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[11]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for HumanBodyPose3DObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A1323900(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF258);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_1A15A88C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[11]) = (a2 - 1);
  return result;
}

void sub_1A13239A4()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A1323A80();
  if (v0 <= 0x3F)
  {
    sub_1A15A88C8();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1A1323A80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE5FF390)
  {
    sub_1A1322AD0();
    v0 = sub_1A15A87E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE5FF390);
  }
}

ValueMetadata *type metadata accessor for HumanBodyPose3DObservation.EstimationTechnique()
{
  return &type metadata for HumanBodyPose3DObservation.EstimationTechnique;
}

uint64_t getEnumTagSinglePayload for HumanBodyPose3DObservation.JointName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HumanBodyPose3DObservation.JointName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1A1323BC4 + 4 * byte_1A15D1EC0[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1A1323BF8 + 4 * byte_1A15D1EBB[v4]))();
}

uint64_t sub_1A1323BF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1323C00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1323C08);
  return result;
}

uint64_t sub_1A1323C14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1323C1CLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1A1323C20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1323C28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HumanBodyPose3DObservation.JointName()
{
  return &type metadata for HumanBodyPose3DObservation.JointName;
}

uint64_t storeEnumTagSinglePayload for HumanBodyPose3DObservation.JointsGroupName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A1323C90 + 4 * byte_1A15D1ECA[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A1323CC4 + 4 * byte_1A15D1EC5[v4]))();
}

uint64_t sub_1A1323CC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1323CCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1323CD4);
  return result;
}

uint64_t sub_1A1323CE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1323CE8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A1323CEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1323CF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HumanBodyPose3DObservation.JointsGroupName()
{
  return &type metadata for HumanBodyPose3DObservation.JointsGroupName;
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE5FF398);
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1A1323D4C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A1323D6C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE5FF3A0);
}

uint64_t getEnumTagSinglePayload for HumanBodyPose3DObservation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HumanBodyPose3DObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1A1323E98 + 4 * byte_1A15D1ED4[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1A1323ECC + 4 * byte_1A15D1ECF[v4]))();
}

uint64_t sub_1A1323ECC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1323ED4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1323EDCLL);
  return result;
}

uint64_t sub_1A1323EE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1323EF0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1A1323EF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1323EFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HumanBodyPose3DObservation.CodingKeys()
{
  return &type metadata for HumanBodyPose3DObservation.CodingKeys;
}

uint64_t _s6Vision26HumanBodyPose3DObservationV19EstimationTechniqueOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A1323F64 + 4 * byte_1A15D1EDE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A1323F98 + 4 * byte_1A15D1ED9[v4]))();
}

uint64_t sub_1A1323F98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1323FA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1323FA8);
  return result;
}

uint64_t sub_1A1323FB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1323FBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A1323FC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1323FC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HumanBodyPose3DObservation.EstimationTechnique.CodingKeys()
{
  return &type metadata for HumanBodyPose3DObservation.EstimationTechnique.CodingKeys;
}

ValueMetadata *type metadata accessor for HumanBodyPose3DObservation.EstimationTechnique.ReferenceCodingKeys()
{
  return &type metadata for HumanBodyPose3DObservation.EstimationTechnique.ReferenceCodingKeys;
}

ValueMetadata *type metadata accessor for HumanBodyPose3DObservation.EstimationTechnique.MeasuredCodingKeys()
{
  return &type metadata for HumanBodyPose3DObservation.EstimationTechnique.MeasuredCodingKeys;
}

unint64_t sub_1A1324008()
{
  unint64_t result;

  result = qword_1EE6227E0[0];
  if (!qword_1EE6227E0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2614, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.CodingKeys);
    atomic_store(result, qword_1EE6227E0);
  }
  return result;
}

uint64_t sub_1A132404C()
{
  return sub_1A12857D8((unint64_t *)&unk_1EE6002B0, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_0, (uint64_t)&unk_1A15D2668);
}

uint64_t sub_1A1324078()
{
  return sub_1A12857D8(&qword_1EE5FF3B0, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_0, (uint64_t)&unk_1A15D263C);
}

uint64_t sub_1A13240A4()
{
  return sub_1A12857D8(&qword_1EE6002C0, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_0, (uint64_t)&unk_1A15D26D8);
}

unint64_t sub_1A13240D4()
{
  unint64_t result;

  result = qword_1EE622CF0;
  if (!qword_1EE622CF0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2824, &type metadata for HumanBodyPose3DObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE622CF0);
  }
  return result;
}

unint64_t sub_1A132411C()
{
  unint64_t result;

  result = qword_1EE622E00;
  if (!qword_1EE622E00)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2794, &type metadata for HumanBodyPose3DObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE622E00);
  }
  return result;
}

unint64_t sub_1A1324164()
{
  unint64_t result;

  result = qword_1EE622E08[0];
  if (!qword_1EE622E08[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D27BC, &type metadata for HumanBodyPose3DObservation.CodingKeys);
    atomic_store(result, qword_1EE622E08);
  }
  return result;
}

unint64_t sub_1A13241AC()
{
  unint64_t result;

  result = qword_1EE622E90;
  if (!qword_1EE622E90)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2534, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.ReferenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE622E90);
  }
  return result;
}

unint64_t sub_1A13241F4()
{
  unint64_t result;

  result = qword_1EE622E98[0];
  if (!qword_1EE622E98[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D255C, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.ReferenceCodingKeys);
    atomic_store(result, qword_1EE622E98);
  }
  return result;
}

unint64_t sub_1A132423C()
{
  unint64_t result;

  result = qword_1EE622F20;
  if (!qword_1EE622F20)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D24E4, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.MeasuredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE622F20);
  }
  return result;
}

unint64_t sub_1A1324284()
{
  unint64_t result;

  result = qword_1EE622F28[0];
  if (!qword_1EE622F28[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D250C, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.MeasuredCodingKeys);
    atomic_store(result, qword_1EE622F28);
  }
  return result;
}

unint64_t sub_1A13242CC()
{
  unint64_t result;

  result = qword_1EE622FB0;
  if (!qword_1EE622FB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2584, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE622FB0);
  }
  return result;
}

unint64_t sub_1A1324314()
{
  unint64_t result;

  result = qword_1EE622FB8[0];
  if (!qword_1EE622FB8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D25AC, &type metadata for HumanBodyPose3DObservation.EstimationTechnique.CodingKeys);
    atomic_store(result, qword_1EE622FB8);
  }
  return result;
}

uint64_t sub_1A1324358(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E696F4A6C6C61 && a2 == 0xE900000000000073 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A15FD720 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6769654879646F62 && a2 == 0xEA00000000007468 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001A15FD740 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x69736E6972746E69 && a2 == 0xEA00000000007363 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x616D497475706E69 && a2 == 0xEE00657A69536567 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A15FD760)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_1A13246D8()
{
  unint64_t result;

  result = qword_1EE5FF3C0;
  if (!qword_1EE5FF3C0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanBodyPose3DObservation.JointName, &type metadata for HumanBodyPose3DObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF3C0);
  }
  return result;
}

unint64_t sub_1A132471C()
{
  unint64_t result;

  result = qword_1EE5FF3D0;
  if (!qword_1EE5FF3D0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for Joint3D, &type metadata for Joint3D);
    atomic_store(result, (unint64_t *)&qword_1EE5FF3D0);
  }
  return result;
}

uint64_t sub_1A1324760(uint64_t a1, uint64_t a2)
{
  assignWithTake for Joint3D(a2, a1);
  return a2;
}

uint64_t static DetectFaceLandmarksRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static DetectFaceLandmarksRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t DetectFaceLandmarksRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A13247D0()
{
  sub_1A13249AC();
  return sub_1A15A9474();
}

uint64_t sub_1A13247F8()
{
  sub_1A13249AC();
  return sub_1A15A9480();
}

uint64_t sub_1A1324820()
{
  sub_1A13249F0();
  return sub_1A15A9474();
}

uint64_t sub_1A1324848()
{
  sub_1A13249F0();
  return sub_1A15A9480();
}

uint64_t DetectFaceLandmarksRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF3E8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF3F0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13249AC();
  sub_1A15A9468();
  sub_1A13249F0();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A13249AC()
{
  unint64_t result;

  result = qword_1EE623058;
  if (!qword_1EE623058)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2DBC, &type metadata for DetectFaceLandmarksRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE623058);
  }
  return result;
}

unint64_t sub_1A13249F0()
{
  unint64_t result;

  result = qword_1EE623060[0];
  if (!qword_1EE623060[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2D6C, &type metadata for DetectFaceLandmarksRequest.Revision.Revision3CodingKeys);
    atomic_store(result, qword_1EE623060);
  }
  return result;
}

uint64_t DetectFaceLandmarksRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectFaceLandmarksRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF3F8);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF400);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13249AC();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for DetectFaceLandmarksRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A13249F0();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A1324CD0(_QWORD *a1)
{
  return DetectFaceLandmarksRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A1324CE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF3E8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF3F0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13249AC();
  sub_1A15A9468();
  sub_1A13249F0();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double DetectFaceLandmarksRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  __n128 v8[4];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(v8);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A1325060();
    sub_1A1377CDC((uint64_t)&type metadata for DetectFaceLandmarksRequest, v5, v6);
  }
  *(_QWORD *)a2 = 0;
  *(__n128 *)(a2 + 8) = v8[0];
  *(__n128 *)(a2 + 24) = v8[1];
  *(_QWORD *)&result = 65793;
  *(_DWORD *)(a2 + 40) = 65793;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  *(_QWORD *)(a2 + 64) = v4;
  return result;
}

uint64_t DetectFaceLandmarksRequest.inputFaceObservations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DetectFaceLandmarksRequest.inputFaceObservations.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DetectFaceLandmarksRequest.inputFaceObservations.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

__n128 DetectFaceLandmarksRequest.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 DetectFaceLandmarksRequest.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*DetectFaceLandmarksRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A1324F30()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A1325060();
  result = sub_1A1378184((uint64_t)&type metadata for DetectFaceLandmarksRequest, v0);
  qword_1EE623048 = result;
  return result;
}

uint64_t static DetectFaceLandmarksRequest.supportedRevisions.getter()
{
  if (qword_1EE623040 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void DetectFaceLandmarksRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = 72;
}

uint64_t DetectFaceLandmarksRequest.refineMouthRegion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t DetectFaceLandmarksRequest.refineMouthRegion.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*DetectFaceLandmarksRequest.refineMouthRegion.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectFaceLandmarksRequest.refineLeftEyeRegion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t DetectFaceLandmarksRequest.refineLeftEyeRegion.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = result;
  return result;
}

uint64_t (*DetectFaceLandmarksRequest.refineLeftEyeRegion.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectFaceLandmarksRequest.refineRightEyeRegion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t DetectFaceLandmarksRequest.refineRightEyeRegion.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 42) = result;
  return result;
}

uint64_t (*DetectFaceLandmarksRequest.refineRightEyeRegion.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectFaceLandmarksRequest.performBlinkDetection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t DetectFaceLandmarksRequest.performBlinkDetection.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 43) = result;
  return result;
}

uint64_t (*DetectFaceLandmarksRequest.performBlinkDetection.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectFaceLandmarksRequest.cascadeStepCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t DetectFaceLandmarksRequest.cascadeStepCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*DetectFaceLandmarksRequest.cascadeStepCount.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

unint64_t sub_1A1325060()
{
  unint64_t result;

  result = qword_1EE5FF408;
  if (!qword_1EE5FF408)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2BA4, &type metadata for DetectFaceLandmarksRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF408);
  }
  return result;
}

int *sub_1A13250A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF468);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(3, 0, 22);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(3, 0, 22);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(3, 0, 22);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for DetectFaceLandmarksRequest.Revision, v0 + 32);
  qword_1EE643770 = v0;
  return result;
}

uint64_t DetectFaceLandmarksRequest.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v4 = *((unsigned __int8 *)v1 + 56);
  v5 = v1[8];
  if (*v1)
  {
    sub_1A15A93FC();
    v6 = *(_QWORD *)(v3 + 16);
    sub_1A15A93F0();
    if (v6)
    {
      v7 = *(_QWORD *)(type metadata accessor for FaceObservation() - 8);
      v8 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      v9 = *(_QWORD *)(v7 + 72);
      sub_1A12857D8(&qword_1EE5FE0B0, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
      swift_bridgeObjectRetain();
      do
      {
        sub_1A15A8B44();
        v8 += v9;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1A15A93FC();
  }
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  sub_1A15A93FC();
  sub_1A15A93FC();
  sub_1A15A93FC();
  sub_1A15A93FC();
  sub_1A15A93FC();
  if (!v4)
    sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t DetectFaceLandmarksRequest.hashValue.getter()
{
  uint64_t *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10[4];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v1 = *((_BYTE *)v0 + 40);
  v2 = *((_BYTE *)v0 + 41);
  v3 = *((_BYTE *)v0 + 42);
  v4 = *((_BYTE *)v0 + 43);
  v5 = v0[6];
  v6 = *((_BYTE *)v0 + 56);
  v7 = v0[8];
  v11 = *v0;
  v8 = *(_OWORD *)(v0 + 3);
  v12 = *(_OWORD *)(v0 + 1);
  v13 = v8;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  sub_1A15A93E4();
  DetectFaceLandmarksRequest.hash(into:)(v10);
  return sub_1A15A9420();
}

uint64_t sub_1A13253A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1325AD4();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A13253CC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A1325060();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A132540C(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A1325060();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A132544C(_BYTE *a1@<X8>)
{
  *a1 = 72;
}

uint64_t sub_1A1325458(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1325060();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1325480()
{
  uint64_t *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10[4];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v1 = *((_BYTE *)v0 + 40);
  v2 = *((_BYTE *)v0 + 41);
  v3 = *((_BYTE *)v0 + 42);
  v4 = *((_BYTE *)v0 + 43);
  v5 = v0[6];
  v6 = *((_BYTE *)v0 + 56);
  v7 = v0[8];
  v11 = *v0;
  v8 = *(_OWORD *)(v0 + 3);
  v12 = *(_OWORD *)(v0 + 1);
  v13 = v8;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  sub_1A15A93E4();
  DetectFaceLandmarksRequest.hash(into:)(v10);
  return sub_1A15A9420();
}

uint64_t sub_1A1325510()
{
  uint64_t *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10[4];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v1 = *((_BYTE *)v0 + 40);
  v2 = *((_BYTE *)v0 + 41);
  v3 = *((_BYTE *)v0 + 42);
  v4 = *((_BYTE *)v0 + 43);
  v5 = v0[6];
  v6 = *((_BYTE *)v0 + 56);
  v7 = v0[8];
  v11 = *v0;
  v8 = *(_OWORD *)(v0 + 3);
  v12 = *(_OWORD *)(v0 + 1);
  v13 = v8;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  sub_1A15A93E4();
  DetectFaceLandmarksRequest.hash(into:)(v10);
  return sub_1A15A9420();
}

uint64_t sub_1A132559C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;
  __n128 v10[2];
  char v11;
  uint64_t v12;

  if (*(_QWORD *)v1)
  {
    result = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 24);
    v4 = *(_QWORD *)(v1 + 32);
    v8 = *(_OWORD *)(v1 + 8);
    v9 = 3;
    DetectFaceRectanglesRequest.init(_:)(&v9, v10);
    v6 = v11;
    v7 = v12;
    *(_QWORD *)(a1 + 24) = &type metadata for DetectFaceRectanglesRequest;
    *(_QWORD *)(a1 + 32) = sub_1A12D0F00();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = v8;
    *(_QWORD *)(result + 32) = v5;
    *(_QWORD *)(result + 40) = v4;
    *(_BYTE *)(result + 48) = v6;
    *(_QWORD *)(result + 56) = v7;
  }
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t sub_1A1325654()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A132565C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_1A1325684())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A1325694()
{
  if (qword_1EE623050 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A13256D4()
{
  return sub_1A15A8BB0();
}

uint64_t sub_1A13256F8(uint64_t a1, uint64_t a2)
{
  sub_1A12B35C8();
  return sub_1A1377AB4(a1, a2);
}

unint64_t sub_1A1325734(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _OWORD v28[2];
  id v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v3 = *(_BYTE *)(v1 + 40);
  v4 = *(_BYTE *)(v1 + 41);
  v5 = *(_BYTE *)(v1 + 42);
  v6 = *(_BYTE *)(v1 + 43);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v29 = *(id *)v1;
  v10 = *(_OWORD *)(v1 + 24);
  v30 = *(_OWORD *)(v1 + 8);
  v32 = *((_QWORD *)&v10 + 1);
  v33 = v3;
  v34 = v4;
  v35 = v5;
  v36 = v6;
  v37 = v7;
  v38 = v8;
  v39 = v9;
  v11 = sub_1A1325AD4();
  v12 = sub_1A12F6C58(a1, (uint64_t)&type metadata for DetectFaceLandmarksRequest, v11);
  v13 = sub_1A15A8BB0();
  v15 = v14;
  v16 = MEMORY[0x1E0DEAFA0];
  v31 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v29) = v6;
  sub_1A12880A0(&v29, v28);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1A128E3E8(v28, v13, v15, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = sub_1A15A8BB0();
  v20 = v19;
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 2);
  v31 = sub_1A12E3FD8();
  v29 = v21;
  sub_1A12880A0(&v29, v28);
  v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_1A128E3E8(v28, v18, v20, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = sub_1A15A8BB0();
  v25 = v24;
  v31 = v16;
  LOBYTE(v29) = v6;
  sub_1A12880A0(&v29, v28);
  v26 = swift_isUniquelyReferenced_nonNull_native();
  sub_1A128E3E8(v28, v23, v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t _s6Vision26DetectFaceLandmarksRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  CGPoint v2;
  CGSize v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  CGPoint v10;
  CGSize v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  char v17;
  CGSize v18;
  CGPoint v19;
  CGSize v20;
  CGPoint v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  CGRect v29;
  CGRect v30;

  v2 = *(CGPoint *)(a1 + 8);
  v3 = *(CGSize *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a1 + 41);
  v6 = *(unsigned __int8 *)(a1 + 42);
  v7 = *(unsigned __int8 *)(a1 + 43);
  v8 = *(_BYTE *)(a1 + 56);
  v9 = *(_QWORD *)a2;
  v10 = *(CGPoint *)(a2 + 8);
  v11 = *(CGSize *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 41);
  v13 = *(unsigned __int8 *)(a2 + 42);
  v24 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a1 + 64);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_QWORD *)(a1 + 48);
  v26 = *(unsigned __int8 *)(a2 + 56);
  v27 = *(unsigned __int8 *)(a2 + 43);
  v28 = *(unsigned __int8 *)(a2 + 40);
  if (*(_QWORD *)a1)
  {
    if (!v9)
      return 0;
    v20 = *(CGSize *)(a1 + 24);
    v21 = *(CGPoint *)(a1 + 8);
    v18 = *(CGSize *)(a2 + 24);
    v19 = *(CGPoint *)(a2 + 8);
    swift_bridgeObjectRetain();
    v14 = swift_bridgeObjectRetain();
    v15 = sub_1A12C48DC(v14, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v18;
    v10 = v19;
    v3 = v20;
    v2 = v21;
    if ((v15 & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v30.origin = v2;
  v30.size = v3;
  v29.origin = v10;
  v29.size = v11;
  if (!static NormalizedRect.== infix(_:_:)(&v30, &v29)
    || ((v4 ^ v28) & 1) != 0
    || ((v5 ^ v12) & 1) != 0
    || ((v6 ^ v13) & 1) != 0
    || ((v7 ^ v27) & 1) != 0)
  {
    return 0;
  }
  if ((v8 & 1) != 0)
  {
    if (!v26)
      return 0;
  }
  else
  {
    v17 = v26;
    if (v23 != v22)
      v17 = 1;
    if ((v17 & 1) != 0)
      return 0;
  }
  return sub_1A12903B0(v25, v24);
}

uint64_t sub_1A1325AB0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1A1325AD4()
{
  unint64_t result;

  result = qword_1EE5FF410;
  if (!qword_1EE5FF410)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2BC0, &type metadata for DetectFaceLandmarksRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF410);
  }
  return result;
}

unint64_t sub_1A1325B1C()
{
  unint64_t result;

  result = qword_1EE5FF418[0];
  if (!qword_1EE5FF418[0])
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceLandmarksRequest.Revision, &type metadata for DetectFaceLandmarksRequest.Revision);
    atomic_store(result, qword_1EE5FF418);
  }
  return result;
}

unint64_t sub_1A1325B60(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B35C8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A1325B84(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B7018();
  result = sub_1A1325BB0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A1325BB0()
{
  unint64_t result;

  result = qword_1EE5FF450;
  if (!qword_1EE5FF450)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceLandmarksRequest, &type metadata for DetectFaceLandmarksRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF450);
  }
  return result;
}

unint64_t sub_1A1325BF8()
{
  unint64_t result;

  result = qword_1EE5FF458;
  if (!qword_1EE5FF458)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceLandmarksRequest, &type metadata for DetectFaceLandmarksRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF458);
  }
  return result;
}

unint64_t sub_1A1325C40()
{
  unint64_t result;

  result = qword_1EE5FF460;
  if (!qword_1EE5FF460)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceLandmarksRequest.Revision, &type metadata for DetectFaceLandmarksRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF460);
  }
  return result;
}

unint64_t sub_1A1325C84(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1325060();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for DetectFaceLandmarksRequest()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DetectFaceLandmarksRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectFaceLandmarksRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DetectFaceLandmarksRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DetectFaceLandmarksRequest()
{
  return &type metadata for DetectFaceLandmarksRequest;
}

ValueMetadata *type metadata accessor for DetectFaceLandmarksRequest.Revision()
{
  return &type metadata for DetectFaceLandmarksRequest.Revision;
}

uint64_t _s6Vision26DetectFaceLandmarksRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1325EC8 + 4 * byte_1A15D29C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1325EE8 + 4 * byte_1A15D29C5[v4]))();
}

_BYTE *sub_1A1325EC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1325EE8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1325EF0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1325EF8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1325F00(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1325F08(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DetectFaceLandmarksRequest.Revision.CodingKeys()
{
  return &type metadata for DetectFaceLandmarksRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectFaceLandmarksRequest.Revision.Revision3CodingKeys()
{
  return &type metadata for DetectFaceLandmarksRequest.Revision.Revision3CodingKeys;
}

unint64_t sub_1A1325F38()
{
  unint64_t result;

  result = qword_1EE623870[0];
  if (!qword_1EE623870[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2D44, &type metadata for DetectFaceLandmarksRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE623870);
  }
  return result;
}

unint64_t sub_1A1325F80()
{
  unint64_t result;

  result = qword_1EE623980;
  if (!qword_1EE623980)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2C64, &type metadata for DetectFaceLandmarksRequest.Revision.Revision3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE623980);
  }
  return result;
}

unint64_t sub_1A1325FC8()
{
  unint64_t result;

  result = qword_1EE623988[0];
  if (!qword_1EE623988[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2C8C, &type metadata for DetectFaceLandmarksRequest.Revision.Revision3CodingKeys);
    atomic_store(result, qword_1EE623988);
  }
  return result;
}

unint64_t sub_1A1326010()
{
  unint64_t result;

  result = qword_1EE623A10;
  if (!qword_1EE623A10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2CB4, &type metadata for DetectFaceLandmarksRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE623A10);
  }
  return result;
}

unint64_t sub_1A1326058()
{
  unint64_t result;

  result = qword_1EE623A18[0];
  if (!qword_1EE623A18[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2CDC, &type metadata for DetectFaceLandmarksRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE623A18);
  }
  return result;
}

uint64_t static GenerateAttentionBasedSaliencyImageRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static GenerateAttentionBasedSaliencyImageRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t GenerateAttentionBasedSaliencyImageRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A13260D4()
{
  sub_1A13262B0();
  return sub_1A15A9474();
}

uint64_t sub_1A13260FC()
{
  sub_1A13262B0();
  return sub_1A15A9480();
}

uint64_t sub_1A1326124()
{
  sub_1A13262F4();
  return sub_1A15A9474();
}

uint64_t sub_1A132614C()
{
  sub_1A13262F4();
  return sub_1A15A9480();
}

uint64_t GenerateAttentionBasedSaliencyImageRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF470);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF478);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13262B0();
  sub_1A15A9468();
  sub_1A13262F4();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A13262B0()
{
  unint64_t result;

  result = qword_1EE623AB8;
  if (!qword_1EE623AB8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D321C, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE623AB8);
  }
  return result;
}

unint64_t sub_1A13262F4()
{
  unint64_t result;

  result = qword_1EE623AC0[0];
  if (!qword_1EE623AC0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D31CC, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE623AC0);
  }
  return result;
}

uint64_t GenerateAttentionBasedSaliencyImageRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t GenerateAttentionBasedSaliencyImageRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF480);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF488);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13262B0();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A13262F4();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A13265D4(_QWORD *a1)
{
  return GenerateAttentionBasedSaliencyImageRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A13265E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF470);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF478);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13262B0();
  sub_1A15A9468();
  sub_1A13262F4();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double GenerateAttentionBasedSaliencyImageRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  __n128 v8;
  __n128 v9[3];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(v9);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A1326848();
    sub_1A1377CDC((uint64_t)&type metadata for GenerateAttentionBasedSaliencyImageRequest, v5, v6);
  }
  result = v9[0].n128_f64[0];
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  a2[2].n128_u64[0] = v4;
  return result;
}

__n128 GenerateAttentionBasedSaliencyImageRequest.regionOfInterest.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 GenerateAttentionBasedSaliencyImageRequest.regionOfInterest.setter(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*GenerateAttentionBasedSaliencyImageRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A13267C4()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A1326848();
  result = sub_1A1378184((uint64_t)&type metadata for GenerateAttentionBasedSaliencyImageRequest, v0);
  qword_1EE623AA8 = result;
  return result;
}

uint64_t static GenerateAttentionBasedSaliencyImageRequest.supportedRevisions.getter()
{
  if (qword_1EE623AA0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void GenerateAttentionBasedSaliencyImageRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = -112;
}

unint64_t sub_1A1326848()
{
  unint64_t result;

  result = qword_1EE5FF490;
  if (!qword_1EE5FF490)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D2FE4, &type metadata for GenerateAttentionBasedSaliencyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF490);
  }
  return result;
}

int *sub_1A132688C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF500);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(7, 0, 20);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(7, 0, 20);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(7, 0, 20);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision, v0 + 32);
  qword_1EE643778 = v0;
  return result;
}

uint64_t GenerateAttentionBasedSaliencyImageRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static GenerateAttentionBasedSaliencyImageRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  CGSize v4;
  CGSize v5;
  CGRect v7;
  CGRect v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(CGSize *)(a1 + 16);
  v8.origin = *(CGPoint *)a1;
  v8.size = v4;
  v5 = *(CGSize *)(a2 + 16);
  v7.origin = *(CGPoint *)a2;
  v7.size = v5;
  if (static NormalizedRect.== infix(_:_:)(&v8, &v7))
    return sub_1A12903B0(v2, v3);
  else
    return 0;
}

uint64_t GenerateAttentionBasedSaliencyImageRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 32);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A1326ABC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1326EB4();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A1326AE4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A1326848();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A1326B24(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A1326848();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1326B64(_BYTE *a1@<X8>)
{
  *a1 = -112;
}

uint64_t sub_1A1326B70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1326848();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1326B98()
{
  if (qword_1EE623AB0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A1326BD8(uint64_t a1, uint64_t a2)
{
  sub_1A12B33BC();
  return sub_1A1377AB4(a1, a2);
}

void sub_1A1326C10(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *);
  id v9;
  void (*v10)(_BYTE *, _QWORD);
  _BYTE v11[32];
  _QWORD v12[4];

  v3 = objc_msgSend(objc_allocWithZone((Class)VNCoreSceneUnderstandingDetectorImageSaliencyAConfiguration), sel_initWithObservationsRecipient_, a2);
  v4 = sub_1A15A8BB0();
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD5E8);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A15C5A00;
  *(_QWORD *)(v7 + 32) = v3;
  v12[0] = v7;
  sub_1A15A8C4C();
  v12[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF498);
  v8 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200);
  v9 = v3;
  v10 = (void (*)(_BYTE *, _QWORD))v8(v11);
  sub_1A128D188((uint64_t)v12, v4, v6);
  v10(v11, 0);

}

void sub_1A1326D10(uint64_t a1, uint64_t a2)
{
  sub_1A1326C10(a1, a2);
}

unint64_t sub_1A1326D28()
{
  unint64_t result;

  result = qword_1EE5FF4A0[0];
  if (!qword_1EE5FF4A0[0])
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateAttentionBasedSaliencyImageRequest.Revision, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision);
    atomic_store(result, qword_1EE5FF4A0);
  }
  return result;
}

unint64_t sub_1A1326D6C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6E80();
  result = sub_1A1326D98();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A1326D98()
{
  unint64_t result;

  result = qword_1EE5FF4D8;
  if (!qword_1EE5FF4D8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateAttentionBasedSaliencyImageRequest, &type metadata for GenerateAttentionBasedSaliencyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF4D8);
  }
  return result;
}

unint64_t sub_1A1326DE0()
{
  unint64_t result;

  result = qword_1EE5FF4E0;
  if (!qword_1EE5FF4E0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateAttentionBasedSaliencyImageRequest, &type metadata for GenerateAttentionBasedSaliencyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF4E0);
  }
  return result;
}

unint64_t sub_1A1326E28()
{
  unint64_t result;

  result = qword_1EE5FF4E8;
  if (!qword_1EE5FF4E8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateAttentionBasedSaliencyImageRequest.Revision, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF4E8);
  }
  return result;
}

unint64_t sub_1A1326E6C(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B33BC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A1326E90(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1326EB4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A1326EB4()
{
  unint64_t result;

  result = qword_1EE5FF4F0;
  if (!qword_1EE5FF4F0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D301C, &type metadata for GenerateAttentionBasedSaliencyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF4F0);
  }
  return result;
}

uint64_t sub_1A1326EF8()
{
  return sub_1A12857D8(&qword_1EE5FF4F8, (uint64_t (*)(uint64_t))type metadata accessor for SaliencyImageObservation, (uint64_t)&unk_1A15CDB58);
}

unint64_t sub_1A1326F24(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1326848();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for GenerateAttentionBasedSaliencyImageRequest()
{
  return &type metadata for GenerateAttentionBasedSaliencyImageRequest;
}

ValueMetadata *type metadata accessor for GenerateAttentionBasedSaliencyImageRequest.Revision()
{
  return &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision;
}

uint64_t _s6Vision42GenerateAttentionBasedSaliencyImageRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1326FAC + 4 * byte_1A15D2E10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1326FCC + 4 * byte_1A15D2E15[v4]))();
}

_BYTE *sub_1A1326FAC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1326FCC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1326FD4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1326FDC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1326FE4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1326FEC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GenerateAttentionBasedSaliencyImageRequest.Revision.CodingKeys()
{
  return &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for GenerateAttentionBasedSaliencyImageRequest.Revision.Revision2CodingKeys()
{
  return &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision.Revision2CodingKeys;
}

unint64_t sub_1A132701C()
{
  unint64_t result;

  result = qword_1EE624350[0];
  if (!qword_1EE624350[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D31A4, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE624350);
  }
  return result;
}

unint64_t sub_1A1327064()
{
  unint64_t result;

  result = qword_1EE624460;
  if (!qword_1EE624460)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D30C4, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision.Revision2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE624460);
  }
  return result;
}

unint64_t sub_1A13270AC()
{
  unint64_t result;

  result = qword_1EE624468[0];
  if (!qword_1EE624468[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D30EC, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE624468);
  }
  return result;
}

unint64_t sub_1A13270F4()
{
  unint64_t result;

  result = qword_1EE6244F0;
  if (!qword_1EE6244F0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3114, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6244F0);
  }
  return result;
}

unint64_t sub_1A132713C()
{
  unint64_t result;

  result = qword_1EE6244F8[0];
  if (!qword_1EE6244F8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D313C, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE6244F8);
  }
  return result;
}

uint64_t AnimalBodyPoseObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

float AnimalBodyPoseObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for AnimalBodyPoseObservation() + 20));
}

uint64_t type metadata accessor for AnimalBodyPoseObservation()
{
  uint64_t result;

  result = qword_1EE624EA0;
  if (!qword_1EE624EA0)
    return swift_getSingletonMetadata();
  return result;
}

__n128 AnimalBodyPoseObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for AnimalBodyPoseObservation() + 24);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t AnimalBodyPoseObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AnimalBodyPoseObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t AnimalBodyPoseObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A15A9090();
  sub_1A15A8BEC();
  v0 = type metadata accessor for AnimalBodyPoseObservation();
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v1 = sub_1A12857D8(&qword_1EE5FF508, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
  sub_1A132D4B4(v0, (uint64_t)&off_1E45337C0, v1);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

uint64_t AnimalBodyPoseObservation.allJoints(in:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v4 = *a1;
  v1 = type metadata accessor for AnimalBodyPoseObservation();
  v2 = sub_1A12857D8(&qword_1EE5FF510, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&unk_1A15D360C);
  return sub_1A130E584((uint64_t (*)(uint64_t, uint64_t))&v4, v1, v2);
}

Vision::AnimalBodyPoseObservation::JointName_optional __swiftcall AnimalBodyPoseObservation.JointName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  Vision::AnimalBodyPoseObservation::JointName_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1A15A936C();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 7;
  switch(v3)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v5 = 1;
      goto LABEL_9;
    case 2:
      v5 = 2;
      goto LABEL_9;
    case 3:
      v5 = 3;
      goto LABEL_9;
    case 4:
      v5 = 4;
      goto LABEL_9;
    case 5:
      v5 = 5;
      goto LABEL_9;
    case 6:
      v5 = 6;
LABEL_9:
      v6 = v5;
      break;
    case 7:
      break;
    case 8:
      v6 = 8;
      break;
    case 9:
      v6 = 9;
      break;
    case 10:
      v6 = 10;
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    default:
      v6 = 25;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t AnimalBodyPoseObservation.JointName.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A1327598 + 4 * byte_1A15D3289[*v0]))(0x547261457466656CLL, 0xEA0000000000706FLL);
}

uint64_t sub_1A1327598()
{
  return 0x4D7261457466656CLL;
}

uint64_t sub_1A13275BC()
{
  return 0x427261457466656CLL;
}

uint64_t sub_1A13275E0()
{
  return 0x6579457466656CLL;
}

uint64_t sub_1A13275F8()
{
  return 1801676142;
}

uint64_t sub_1A1327608()
{
  return 1702063982;
}

uint64_t sub_1A1327618()
{
  return 0x6579457468676972;
}

uint64_t sub_1A1327630()
{
  return 0x7261457468676972;
}

uint64_t sub_1A1327674()
{
  return 0x6B6361427466656CLL;
}

uint64_t sub_1A1327778()
{
  return 0x6E6F72467466656CLL;
}

uint64_t sub_1A132779C()
{
  return 0x6361427468676972;
}

uint64_t sub_1A13277E0()
{
  return 0x706F546C696174;
}

uint64_t sub_1A13277F8()
{
  return 0x6464694D6C696174;
}

uint64_t sub_1A1327814()
{
  return 0x74746F426C696174;
}

uint64_t sub_1A132782C()
{
  return sub_1A1327838();
}

uint64_t sub_1A1327838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = AnimalBodyPoseObservation.JointName.rawValue.getter();
  v2 = v1;
  if (v0 == AnimalBodyPoseObservation.JointName.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void sub_1A13278CC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A132791C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A1327980 + 4 * byte_1A15D32A7[a2]))(1684104552);
}

uint64_t sub_1A1327980(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1684104552 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

Vision::AnimalBodyPoseObservation::JointName_optional sub_1A1327A2C(Swift::String *a1)
{
  return AnimalBodyPoseObservation.JointName.init(rawValue:)(*a1);
}

uint64_t sub_1A1327A38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AnimalBodyPoseObservation.JointName.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A1327A5C()
{
  sub_1A15A93E4();
  AnimalBodyPoseObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A1327AC0()
{
  AnimalBodyPoseObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A1327B10()
{
  sub_1A15A93E4();
  AnimalBodyPoseObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A1327B70()
{
  sub_1A132B984();
  return sub_1A15A8C1C();
}

uint64_t sub_1A1327BCC()
{
  sub_1A132B984();
  return sub_1A15A8C10();
}

Vision::AnimalBodyPoseObservation::JointsGroupName_optional __swiftcall AnimalBodyPoseObservation.JointsGroupName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  Vision::AnimalBodyPoseObservation::JointsGroupName_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A15A91EC();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static AnimalBodyPoseObservation.JointsGroupName.allCases.getter()
{
  return &unk_1E4533200;
}

uint64_t AnimalBodyPoseObservation.JointsGroupName.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A1327CAC + 4 * byte_1A15D32AC[*v0]))(0x7367656C65726F66, 0xE800000000000000);
}

uint64_t sub_1A1327CAC()
{
  return 1684104552;
}

uint64_t sub_1A1327CBC()
{
  return 0x7367656C646E6968;
}

uint64_t sub_1A1327CD0()
{
  return 1818845556;
}

uint64_t sub_1A1327CE0()
{
  return 0x6B6E757274;
}

void sub_1A1327CF4(char *a1)
{
  sub_1A13278CC(*a1);
}

Vision::AnimalBodyPoseObservation::JointsGroupName_optional sub_1A1327D00(Swift::String *a1)
{
  return AnimalBodyPoseObservation.JointsGroupName.init(rawValue:)(*a1);
}

uint64_t sub_1A1327D0C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A1327D3C + 4 * byte_1A15D32B1[*v0]))();
}

void sub_1A1327D3C(_QWORD *a1@<X8>)
{
  *a1 = 1684104552;
  a1[1] = 0xE400000000000000;
}

void sub_1A1327D50(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x7367656C646E6968;
  a1[1] = v1;
}

void sub_1A1327D68(_QWORD *a1@<X8>)
{
  *a1 = 1818845556;
  a1[1] = 0xE400000000000000;
}

void sub_1A1327D7C(_QWORD *a1@<X8>)
{
  *a1 = 0x6B6E757274;
  a1[1] = 0xE500000000000000;
}

void sub_1A1327D94(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4533350;
}

void sub_1A1327DA4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A15A93E4();
  __asm { BR              X9 }
}

uint64_t sub_1A1327DF0()
{
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

void sub_1A1327E60()
{
  __asm { BR              X10 }
}

uint64_t sub_1A1327E9C()
{
  sub_1A15A8BC8();
  return swift_bridgeObjectRelease();
}

void sub_1A1327EF8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A15A93E4();
  __asm { BR              X9 }
}

uint64_t sub_1A1327F40()
{
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A1327FB4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  if (result == a2)
    return 1;
  v2 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_24;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v11 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        return 1;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          return 1;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            return 1;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_24:
    v14 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v10);
    swift_bridgeObjectRetain();
    sub_1A132A470(v14);
    if ((v15 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_1A1295804();
    v16 = sub_1A15A8B80();
    result = swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
      return 0;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
    return 1;
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t AnimalBodyPoseObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for AnimalBodyPoseObservation();
  sub_1A12857D8(&qword_1EE5FF518, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A1328228(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A12857D8(&qword_1EE5FF510, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&unk_1A15D360C);
  return sub_1A130E96C(a1, v2);
}

uint64_t sub_1A1328268()
{
  sub_1A12857D8(&qword_1EE5FF510, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&unk_1A15D360C);
  return sub_1A130EA34();
}

uint64_t sub_1A13282A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE5FF510, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&unk_1A15D360C);
  return sub_1A130E4CC(a1, a2, v4);
}

uint64_t sub_1A1328300(char *a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  v5 = *a1;
  v3 = sub_1A12857D8(&qword_1EE5FF510, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&unk_1A15D360C);
  return sub_1A130E584((uint64_t (*)(uint64_t, uint64_t))&v5, a2, v3);
}

uint64_t sub_1A1328358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE5FF508, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

uint64_t sub_1A13283B0()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E696F4A6C6C61;
  else
    return 0x746176726573626FLL;
}

uint64_t sub_1A13283F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A132C338(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A132841C()
{
  sub_1A132B5E0();
  return sub_1A15A9474();
}

uint64_t sub_1A1328444()
{
  sub_1A132B5E0();
  return sub_1A15A9480();
}

uint64_t AnimalBodyPoseObservation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int *v23;
  char *v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int *v37;
  char v38;
  _BYTE v39[60];
  uint64_t v40;

  v30 = a2;
  v34 = sub_1A15A88C8();
  v31 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v32 = (void (**)(char *, uint64_t))((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v4 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF520);
  v7 = *(char **)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AnimalBodyPoseObservation();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_1A132B5E0();
  v14 = v37;
  sub_1A15A945C();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  v37 = (int *)v10;
  v28 = v4;
  v29 = v6;
  v15 = (void (**)(char *, uint64_t))v7;
  v17 = v33;
  v16 = v34;
  v18 = (uint64_t)v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF528);
  v38 = 1;
  sub_1A132B6E8(&qword_1EE5FF530, (uint64_t (*)(void))sub_1A132B624, (uint64_t (*)(void))sub_1A12E9C18, MEMORY[0x1E0DEA0D8]);
  v19 = v35;
  sub_1A15A9264();
  v20 = v37[8];
  *(_QWORD *)(v18 + v20) = v40;
  LOBYTE(v40) = 0;
  sub_1A12855AC();
  sub_1A15A9204();
  v26 = v20;
  v27 = v9;
  LOBYTE(v40) = 0;
  sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v21 = (char *)v32;
  sub_1A15A9264();
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v18, v21, v16);
  LOBYTE(v40) = 1;
  sub_1A15A924C();
  *(_DWORD *)(v18 + v37[5]) = v22;
  v38 = 3;
  sub_1A1285654();
  sub_1A15A9228();
  v32 = v15;
  v23 = v37;
  *(_BYTE *)(v18 + v37[7]) = v40;
  v24 = v29;
  sub_1A12E32A4((uint64_t)v39);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v17);
  v32[1](v27, v19);
  sub_1A128465C((uint64_t)v39, v18 + v23[6]);
  sub_1A132B668(v18, v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return sub_1A132B6AC(v18);
}

uint64_t AnimalBodyPoseObservation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v16 = *(_QWORD *)(v5 - 8);
  v17 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF540);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A132B5E0();
  sub_1A15A9468();
  v12 = type metadata accessor for AnimalBodyPoseObservation();
  v20 = *(_QWORD *)(v3 + *(int *)(v12 + 32));
  v19 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF528);
  sub_1A132B6E8(&qword_1EE5FF548, (uint64_t (*)(void))sub_1A132B764, (uint64_t (*)(void))sub_1A12E9D60, MEMORY[0x1E0DEA0B8]);
  sub_1A15A92F4();
  if (!v2)
  {
    v18 = 0;
    sub_1A12855AC();
    sub_1A15A92AC();
    v13 = sub_1A12857D8(&qword_1EE5FF508, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
    sub_1A12E2C64((uint64_t)v7, v12, (uint64_t)&off_1E45337C0, v13);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1A1328B14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AnimalBodyPoseObservation.init(from:)(a1, a2);
}

uint64_t sub_1A1328B28(_QWORD *a1)
{
  return AnimalBodyPoseObservation.encode(to:)(a1);
}

uint64_t sub_1A1328B3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;

  v3 = type metadata accessor for AnimalBodyPoseObservation();
  result = 0;
  v5 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 28));
  if (v5 <= 0xFB && (v5 & 0xF8) == 24)
    __asm { BR              X10 }
  return result;
}

void sub_1A1328BA4()
{
  JUMPOUT(0x1A1328B74);
}

void sub_1A1328BB0()
{
  JUMPOUT(0x1A1328B74);
}

void sub_1A1328BBC()
{
  JUMPOUT(0x1A1328B74);
}

void sub_1A1328BC8()
{
  JUMPOUT(0x1A1328B74);
}

uint64_t sub_1A1328BD8@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  int v35;
  int v36;
  int *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _BYTE v43[40];
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v41 = *a2;
  v7 = sub_1A1328E9C(MEMORY[0x1E0DEE9D8]);
  v8 = objc_msgSend(a1, sel_availableJointNames);
  _s3__C9JointNameVMa_1(0);
  v9 = sub_1A15A8C40();

  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v39 = a3;
    v40 = a4;
    v11 = 0;
    v12 = &selRef_memoryPoolId;
    v42 = v9;
    do
    {
      v15 = *(void **)(v9 + 8 * v11 + 32);
      *(_QWORD *)&v44 = 0;
      v16 = v15;
      v17 = objc_msgSend(a1, v12[450], v16, &v44);
      v18 = (void *)v44;
      if (v17)
      {
        v19 = v17;
        v20 = v16;
        v21 = v18;
        sub_1A1328FCC(v20, (char *)&v44);
        v22 = v44;
        if (v44 == 25)
        {

        }
        else
        {
          objc_msgSend(v19, sel_location);
          NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v24, v23));
          v25 = AnimalBodyPoseObservation.JointName.rawValue.getter();
          v26 = v10;
          v27 = a1;
          v28 = v12;
          v30 = v29;
          objc_msgSend(v19, sel_confidence);
          v31 = v30;
          v12 = v28;
          a1 = v27;
          v10 = v26;
          v9 = v42;
          sub_1A1295500(&v44, v25, v31, (uint64_t)v43, v32);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v44 = v7;
          sub_1A132B184((uint64_t)v43, v22, isUniquelyReferenced_nonNull_native);
          v7 = v44;

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v13 = (id)v44;
        v14 = (void *)sub_1A15A8844();

        swift_willThrow();
      }
      ++v11;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
    a3 = v39;
    a4 = v40;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v34 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v36 = v35;

  v37 = (int *)type metadata accessor for AnimalBodyPoseObservation();
  *(_DWORD *)(a4 + v37[5]) = v36;
  result = sub_1A128465C(a3, a4 + v37[6]);
  *(_BYTE *)(a4 + v37[7]) = v41;
  *(_QWORD *)(a4 + v37[8]) = v7;
  return result;
}

unint64_t sub_1A1328E9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF5D0);
  v2 = (_QWORD *)sub_1A15A91D4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_DWORD *)(a1 + 72);
  while (1)
  {
    v5 = *((unsigned __int8 *)v4 - 40);
    v6 = *((_QWORD *)v4 - 4);
    v7 = *((_QWORD *)v4 - 3);
    v9 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v4 - 1);
    v10 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1A132A470(v5);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    v13 = v2[7] + 40 * result;
    *(_QWORD *)v13 = v6;
    *(_QWORD *)(v13 + 8) = v7;
    *(_QWORD *)(v13 + 16) = v9;
    *(_QWORD *)(v13 + 24) = v8;
    *(_DWORD *)(v13 + 32) = v10;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v2[2] = v16;
    v4 += 12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1A1328FCC(void *a1@<X0>, char *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  void *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  void *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  void *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  void *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  char v169;
  id v170;

  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v6 = sub_1A15A8BB0();
  v8 = v7;
  if (v6 == sub_1A15A8BB0() && v8 == v9)
  {
    v12 = 0;
    goto LABEL_10;
  }
  v11 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = 0;
  if ((v11 & 1) != 0)
  {
LABEL_11:

    goto LABEL_12;
  }
  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v13 = sub_1A15A8BB0();
  v15 = v14;
  if (v13 == sub_1A15A8BB0() && v15 == v16)
  {
    v12 = 1;
LABEL_10:

    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  v17 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
    v12 = 1;
    goto LABEL_11;
  }
  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v18 = sub_1A15A8BB0();
  v20 = v19;
  if (v18 == sub_1A15A8BB0() && v20 == v21)
  {
    v12 = 2;
    goto LABEL_10;
  }
  v22 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
    v12 = 2;
    goto LABEL_11;
  }
  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v23 = sub_1A15A8BB0();
  v25 = v24;
  if (v23 == sub_1A15A8BB0() && v25 == v26)
  {
    v12 = 3;
    goto LABEL_10;
  }
  v27 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
    v12 = 3;
    goto LABEL_11;
  }
  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v28 = sub_1A15A8BB0();
  v30 = v29;
  if (v28 == sub_1A15A8BB0() && v30 == v31)
  {
    v12 = 4;
    goto LABEL_10;
  }
  v32 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
  {
    v12 = 4;
    goto LABEL_11;
  }
  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v33 = sub_1A15A8BB0();
  v35 = v34;
  if (v33 == sub_1A15A8BB0() && v35 == v36)
  {
    v12 = 5;
    goto LABEL_10;
  }
  v37 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
  {
    v12 = 5;
    goto LABEL_11;
  }
  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v38 = sub_1A15A8BB0();
  v40 = v39;
  if (v38 == sub_1A15A8BB0() && v40 == v41)
  {
    v12 = 6;
    goto LABEL_10;
  }
  v42 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
  {
    v12 = 6;
    goto LABEL_11;
  }
  sub_1A15A8BB0();
  v43 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v44 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v45 = sub_1A15A8BB0();
  v47 = v46;
  if (v45 == sub_1A15A8BB0() && v47 == v48)
  {

    swift_bridgeObjectRelease_n();
LABEL_44:

    v12 = 7;
    goto LABEL_12;
  }
  v49 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v49 & 1) != 0)
    goto LABEL_44;
  sub_1A15A8BB0();
  v50 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v51 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v52 = sub_1A15A8BB0();
  v54 = v53;
  if (v52 == sub_1A15A8BB0() && v54 == v55)
  {

    swift_bridgeObjectRelease_n();
LABEL_49:

    v12 = 8;
    goto LABEL_12;
  }
  v56 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0)
    goto LABEL_49;
  sub_1A15A8BB0();
  v57 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v58 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v59 = sub_1A15A8BB0();
  v61 = v60;
  if (v59 == sub_1A15A8BB0() && v61 == v62)
  {

    swift_bridgeObjectRelease_n();
LABEL_54:

    v12 = 9;
    goto LABEL_12;
  }
  v63 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v63 & 1) != 0)
    goto LABEL_54;
  sub_1A15A8BB0();
  v64 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v65 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v66 = sub_1A15A8BB0();
  v68 = v67;
  if (v66 == sub_1A15A8BB0() && v68 == v69)
  {

    swift_bridgeObjectRelease_n();
LABEL_59:

    v12 = 10;
    goto LABEL_12;
  }
  v70 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v70 & 1) != 0)
    goto LABEL_59;
  sub_1A15A8BB0();
  v71 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v72 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v73 = sub_1A15A8BB0();
  v75 = v74;
  if (v73 == sub_1A15A8BB0() && v75 == v76)
  {

    swift_bridgeObjectRelease_n();
LABEL_64:

    v12 = 11;
    goto LABEL_12;
  }
  v77 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v77 & 1) != 0)
    goto LABEL_64;
  sub_1A15A8BB0();
  v78 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v79 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v80 = sub_1A15A8BB0();
  v82 = v81;
  if (v80 == sub_1A15A8BB0() && v82 == v83)
  {

    swift_bridgeObjectRelease_n();
LABEL_69:

    v12 = 12;
    goto LABEL_12;
  }
  v84 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v84 & 1) != 0)
    goto LABEL_69;
  sub_1A15A8BB0();
  v85 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v86 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v87 = sub_1A15A8BB0();
  v89 = v88;
  if (v87 == sub_1A15A8BB0() && v89 == v90)
  {

    swift_bridgeObjectRelease_n();
LABEL_74:

    v12 = 13;
    goto LABEL_12;
  }
  v91 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v91 & 1) != 0)
    goto LABEL_74;
  sub_1A15A8BB0();
  v92 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v93 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v94 = sub_1A15A8BB0();
  v96 = v95;
  if (v94 == sub_1A15A8BB0() && v96 == v97)
  {

    swift_bridgeObjectRelease_n();
LABEL_79:

    v12 = 14;
    goto LABEL_12;
  }
  v98 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v98 & 1) != 0)
    goto LABEL_79;
  sub_1A15A8BB0();
  v99 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v100 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v101 = sub_1A15A8BB0();
  v103 = v102;
  if (v101 == sub_1A15A8BB0() && v103 == v104)
  {

    swift_bridgeObjectRelease_n();
LABEL_84:

    v12 = 15;
    goto LABEL_12;
  }
  v105 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v105 & 1) != 0)
    goto LABEL_84;
  sub_1A15A8BB0();
  v106 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v107 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v108 = sub_1A15A8BB0();
  v110 = v109;
  if (v108 == sub_1A15A8BB0() && v110 == v111)
  {

    swift_bridgeObjectRelease_n();
LABEL_89:

    v12 = 16;
    goto LABEL_12;
  }
  v112 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v112 & 1) != 0)
    goto LABEL_89;
  sub_1A15A8BB0();
  v113 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v114 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v115 = sub_1A15A8BB0();
  v117 = v116;
  if (v115 == sub_1A15A8BB0() && v117 == v118)
  {

    swift_bridgeObjectRelease_n();
LABEL_94:

    v12 = 17;
    goto LABEL_12;
  }
  v119 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v119 & 1) != 0)
    goto LABEL_94;
  sub_1A15A8BB0();
  v120 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v121 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v122 = sub_1A15A8BB0();
  v124 = v123;
  if (v122 == sub_1A15A8BB0() && v124 == v125)
  {

    swift_bridgeObjectRelease_n();
LABEL_99:

    v12 = 18;
    goto LABEL_12;
  }
  v126 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v126 & 1) != 0)
    goto LABEL_99;
  sub_1A15A8BB0();
  v127 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v128 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v129 = sub_1A15A8BB0();
  v131 = v130;
  if (v129 == sub_1A15A8BB0() && v131 == v132)
  {

    swift_bridgeObjectRelease_n();
LABEL_104:

    v12 = 19;
    goto LABEL_12;
  }
  v133 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v133 & 1) != 0)
    goto LABEL_104;
  sub_1A15A8BB0();
  v134 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v135 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v136 = sub_1A15A8BB0();
  v138 = v137;
  if (v136 == sub_1A15A8BB0() && v138 == v139)
  {

    swift_bridgeObjectRelease_n();
LABEL_109:

    v12 = 20;
    goto LABEL_12;
  }
  v140 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v140 & 1) != 0)
    goto LABEL_109;
  sub_1A15A8BB0();
  v141 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v142 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v143 = sub_1A15A8BB0();
  v145 = v144;
  if (v143 == sub_1A15A8BB0() && v145 == v146)
  {

    swift_bridgeObjectRelease_n();
LABEL_114:

    v12 = 21;
    goto LABEL_12;
  }
  v147 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v147 & 1) != 0)
    goto LABEL_114;
  sub_1A15A8BB0();
  v148 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v149 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v150 = sub_1A15A8BB0();
  v152 = v151;
  if (v150 == sub_1A15A8BB0() && v152 == v153)
  {

    swift_bridgeObjectRelease_n();
LABEL_119:

    v12 = 22;
    goto LABEL_12;
  }
  v154 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v154 & 1) != 0)
    goto LABEL_119;
  sub_1A15A8BB0();
  v155 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v156 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v157 = sub_1A15A8BB0();
  v159 = v158;
  if (v157 == sub_1A15A8BB0() && v159 == v160)
  {

    swift_bridgeObjectRelease_n();
LABEL_124:

    v12 = 23;
    goto LABEL_12;
  }
  v161 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v161 & 1) != 0)
    goto LABEL_124;
  sub_1A15A8BB0();
  v162 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v163 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v164 = sub_1A15A8BB0();
  v166 = v165;
  if (v164 == sub_1A15A8BB0() && v166 == v167)
  {
    v168 = a1;

    swift_bridgeObjectRelease_n();
    v12 = 24;
  }
  else
  {
    v169 = sub_1A15A9354();
    v170 = a1;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v169 & 1) != 0)
      v12 = 24;
    else
      v12 = 25;
  }
LABEL_12:
  *a2 = v12;
}

uint64_t AnimalBodyPoseObservation.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v5[2];
  char v6;
  __int128 v7;
  char v8;

  v6 = -4;
  objc_msgSend(a1, sel_timeRange, static NormalizedRect.fullImage.getter(v5).n128_f64[0]);
  v8 = 0;
  return sub_1A1328BD8(a1, &v6, (uint64_t)&v7, a2);
}

uint64_t sub_1A132A3A8@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v5;

  v5 = *a2;
  return sub_1A1328BD8(a1, &v5, a3, a4);
}

uint64_t sub_1A132A3D0()
{
  sub_1A12857D8((unint64_t *)&unk_1EE600320, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_1, (uint64_t)&unk_1A15D38D0);
  sub_1A12857D8(&qword_1EE5FF5C8, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_1, (uint64_t)&unk_1A15D3890);
  sub_1A12857D8(&qword_1EE5FE568, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointKey, (uint64_t)&unk_1A15CAA98);
  return sub_1A15A91E0();
}

uint64_t sub_1A132A470(uint64_t a1)
{
  uint64_t v2;

  sub_1A15A93E4();
  AnimalBodyPoseObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  v2 = sub_1A15A9420();
  return sub_1A132A4E8(a1, v2);
}

uint64_t sub_1A132A4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

uint64_t sub_1A132AB58(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  int64_t v19;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF5D0);
  v6 = sub_1A15A91C8();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_27;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v18 = v2;
  v19 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_17;
  }
  if (v19 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_27;
    goto LABEL_23;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_16;
  v13 = 2;
  if (v19 <= 2)
    goto LABEL_20;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_16:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_17:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1A15A93E4();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v19 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_16;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x1A132B120);
      }
      if (v13 >= v19)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_16;
    }
  }
LABEL_20:
  swift_release();
  v3 = v18;
  if ((a2 & 1) == 0)
    goto LABEL_27;
LABEL_23:
  v16 = 1 << *(_BYTE *)(v5 + 32);
  if (v16 >= 64)
    bzero(v11, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v16;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_27:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_1A132B184(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1A132A470(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1A132B2DC();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_1A12EBB90(a1, v16[7] + 40 * v10);
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    v18 = v16[7] + 40 * v10;
    v19 = *(_OWORD *)a1;
    v20 = *(_OWORD *)(a1 + 16);
    *(_DWORD *)(v18 + 32) = *(_DWORD *)(a1 + 32);
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return result;
    }
    goto LABEL_14;
  }
  sub_1A132AB58(result, a3 & 1);
  result = sub_1A132A470(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_1A12EBB90(a1, v16[7] + 40 * v10);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A15A9390();
  __break(1u);
  return result;
}

void *sub_1A132B2DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF5D0);
  v2 = *v0;
  v3 = sub_1A15A91BC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 40 * v15;
    v18 = *(_QWORD *)(v16 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    v19 = *(_DWORD *)(v16 + 32);
    v20 = *(_OWORD *)v16;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v21 = *(_QWORD *)(v4 + 56) + 40 * v15;
    *(_OWORD *)v21 = v20;
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(v21 + 24) = v17;
    *(_DWORD *)(v21 + 32) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _s6Vision25AnimalBodyPoseObservationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v12;

  if ((sub_1A15A88A4() & 1) == 0)
    goto LABEL_14;
  v4 = type metadata accessor for AnimalBodyPoseObservation();
  if (*(float *)(a1 + *(int *)(v4 + 20)) != *(float *)(a2 + *(int *)(v4 + 20)))
    goto LABEL_14;
  v5 = v4;
  v6 = *(int *)(v4 + 24);
  v7 = *(_BYTE *)(a1 + v6 + 48);
  v8 = a2 + v6;
  if ((v7 & 1) != 0)
  {
    if (!*(_BYTE *)(v8 + 48))
      goto LABEL_14;
  }
  else if ((*(_BYTE *)(v8 + 48) & 1) != 0 || (sub_1A15A8EC8() & 1) == 0)
  {
    goto LABEL_14;
  }
  v9 = *(int *)(v5 + 28);
  v10 = *(unsigned __int8 *)(a1 + v9);
  v11 = *(unsigned __int8 *)(a2 + v9);
  if (v10 <= 0xFB)
  {
    if (v11 > 0xFB)
      goto LABEL_14;
    sub_1A12862A0();
    if ((sub_1A15A8B80() & 1) == 0)
      goto LABEL_14;
  }
  else if (v11 <= 0xFB)
  {
LABEL_14:
    v12 = 0;
    return v12 & 1;
  }
  v12 = sub_1A1327FB4(*(_QWORD *)(a1 + *(int *)(v5 + 32)), *(_QWORD *)(a2 + *(int *)(v5 + 32)));
  return v12 & 1;
}

unint64_t sub_1A132B5E0()
{
  unint64_t result;

  result = qword_1EE624590[0];
  if (!qword_1EE624590[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3920, &type metadata for AnimalBodyPoseObservation.CodingKeys);
    atomic_store(result, qword_1EE624590);
  }
  return result;
}

unint64_t sub_1A132B624()
{
  unint64_t result;

  result = qword_1EE5FF538;
  if (!qword_1EE5FF538)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for AnimalBodyPoseObservation.JointName, &type metadata for AnimalBodyPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF538);
  }
  return result;
}

uint64_t sub_1A132B668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnimalBodyPoseObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A132B6AC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnimalBodyPoseObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A132B6E8(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF528);
    v10[0] = a2();
    v10[1] = a3();
    result = MEMORY[0x1A1B0B774](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A132B764()
{
  unint64_t result;

  result = qword_1EE5FF550;
  if (!qword_1EE5FF550)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for AnimalBodyPoseObservation.JointName, &type metadata for AnimalBodyPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF550);
  }
  return result;
}

void _s3__C9JointNameVMa_1(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE5FF5B8);
}

unint64_t sub_1A132B7C0()
{
  unint64_t result;

  result = qword_1EE5FF558;
  if (!qword_1EE5FF558)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for AnimalBodyPoseObservation.JointName, &type metadata for AnimalBodyPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF558);
  }
  return result;
}

unint64_t sub_1A132B808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE5FF560;
  if (!qword_1EE5FF560)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF568);
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE5FF560);
  }
  return result;
}

unint64_t sub_1A132B858()
{
  unint64_t result;

  result = qword_1EE5FF570;
  if (!qword_1EE5FF570)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for AnimalBodyPoseObservation.JointsGroupName, &type metadata for AnimalBodyPoseObservation.JointsGroupName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF570);
  }
  return result;
}

uint64_t sub_1A132B89C(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE5FF578, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
  a1[2] = sub_1A12857D8(&qword_1EE5FF580, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
  a1[3] = sub_1A12857D8(&qword_1EE5FF588, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
  result = sub_1A12857D8(&qword_1EE5FF518, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
  a1[4] = result;
  return result;
}

unint64_t sub_1A132B93C()
{
  unint64_t result;

  result = qword_1EE5FF590;
  if (!qword_1EE5FF590)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for AnimalBodyPoseObservation.JointName, &type metadata for AnimalBodyPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF590);
  }
  return result;
}

unint64_t sub_1A132B984()
{
  unint64_t result;

  result = qword_1EE5FF598;
  if (!qword_1EE5FF598)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for AnimalBodyPoseObservation.JointName, &type metadata for AnimalBodyPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF598);
  }
  return result;
}

unint64_t sub_1A132B9CC()
{
  unint64_t result;

  result = qword_1EE5FF5A0;
  if (!qword_1EE5FF5A0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for AnimalBodyPoseObservation.JointsGroupName, &type metadata for AnimalBodyPoseObservation.JointsGroupName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF5A0);
  }
  return result;
}

unint64_t sub_1A132BA14()
{
  unint64_t result;

  result = qword_1EE5FF5A8;
  if (!qword_1EE5FF5A8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for AnimalBodyPoseObservation.JointsGroupName, &type metadata for AnimalBodyPoseObservation.JointsGroupName);
    atomic_store(result, (unint64_t *)&qword_1EE5FF5A8);
  }
  return result;
}

uint64_t sub_1A132BA58()
{
  return sub_1A12857D8(&qword_1EE5FDCB0, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
}

uint64_t sub_1A132BA84(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FF5B0, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A132BAC0(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FF508, (uint64_t (*)(uint64_t))type metadata accessor for AnimalBodyPoseObservation, (uint64_t)&protocol conformance descriptor for AnimalBodyPoseObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnimalBodyPoseObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A15A88C8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v11;
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    v9[48] = v10[48];
    v12 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AnimalBodyPoseObservation(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnimalBodyPoseObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v6 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnimalBodyPoseObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 48);
  v12 = *(_OWORD *)(v9 + 16);
  v11 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  *(_BYTE *)(v8 + 48) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AnimalBodyPoseObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v6 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimalBodyPoseObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A132BDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1A15A88C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimalBodyPoseObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A132BE68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A15A88C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_1A132BEE0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnimalBodyPoseObservation.JointName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_1A132BFC4 + 4 * byte_1A15D3301[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_1A132BFF8 + 4 * byte_1A15D32FC[v4]))();
}

uint64_t sub_1A132BFF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A132C000(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A132C008);
  return result;
}

uint64_t sub_1A132C014(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A132C01CLL);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_1A132C020(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A132C028(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimalBodyPoseObservation.JointName()
{
  return &type metadata for AnimalBodyPoseObservation.JointName;
}

uint64_t storeEnumTagSinglePayload for AnimalBodyPoseObservation.JointsGroupName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A132C090 + 4 * byte_1A15D330B[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A132C0C4 + 4 * byte_1A15D3306[v4]))();
}

uint64_t sub_1A132C0C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A132C0CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A132C0D4);
  return result;
}

uint64_t sub_1A132C0E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A132C0E8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A132C0EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A132C0F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimalBodyPoseObservation.JointsGroupName()
{
  return &type metadata for AnimalBodyPoseObservation.JointsGroupName;
}

uint64_t storeEnumTagSinglePayload for AnimalBodyPoseObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A132C15C + 4 * byte_1A15D3315[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A132C190 + 4 * byte_1A15D3310[v4]))();
}

uint64_t sub_1A132C190(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A132C198(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A132C1A0);
  return result;
}

uint64_t sub_1A132C1AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A132C1B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A132C1B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A132C1C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimalBodyPoseObservation.CodingKeys()
{
  return &type metadata for AnimalBodyPoseObservation.CodingKeys;
}

unint64_t sub_1A132C1E0()
{
  unint64_t result;

  result = qword_1EE624FB0[0];
  if (!qword_1EE624FB0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3830, &type metadata for AnimalBodyPoseObservation.CodingKeys);
    atomic_store(result, qword_1EE624FB0);
  }
  return result;
}

uint64_t sub_1A132C224()
{
  return sub_1A12857D8((unint64_t *)&unk_1EE600280, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_1, (uint64_t)&unk_1A15D9168);
}

uint64_t sub_1A132C250()
{
  return sub_1A12857D8(&qword_1EE5FF5C0, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_1, (uint64_t)&unk_1A15D3858);
}

uint64_t sub_1A132C27C()
{
  return sub_1A12857D8(&qword_1EE600290, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_1, (uint64_t)&unk_1A15D91A8);
}

unint64_t sub_1A132C2AC()
{
  unint64_t result;

  result = qword_1EE625240;
  if (!qword_1EE625240)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D37A0, &type metadata for AnimalBodyPoseObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE625240);
  }
  return result;
}

unint64_t sub_1A132C2F4()
{
  unint64_t result;

  result = qword_1EE625248[0];
  if (!qword_1EE625248[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D37C8, &type metadata for AnimalBodyPoseObservation.CodingKeys);
    atomic_store(result, qword_1EE625248);
  }
  return result;
}

uint64_t sub_1A132C338(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E696F4A6C6C61 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t static GenerateForegroundInstanceMaskRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static GenerateForegroundInstanceMaskRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t GenerateForegroundInstanceMaskRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A132C480()
{
  sub_1A132C65C();
  return sub_1A15A9474();
}

uint64_t sub_1A132C4A8()
{
  sub_1A132C65C();
  return sub_1A15A9480();
}

uint64_t sub_1A132C4D0()
{
  sub_1A132C6A0();
  return sub_1A15A9474();
}

uint64_t sub_1A132C4F8()
{
  sub_1A132C6A0();
  return sub_1A15A9480();
}

uint64_t GenerateForegroundInstanceMaskRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF5D8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF5E0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A132C65C();
  sub_1A15A9468();
  sub_1A132C6A0();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A132C65C()
{
  unint64_t result;

  result = qword_1EE6252E8;
  if (!qword_1EE6252E8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3D4C, &type metadata for GenerateForegroundInstanceMaskRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6252E8);
  }
  return result;
}

unint64_t sub_1A132C6A0()
{
  unint64_t result;

  result = qword_1EE6252F0[0];
  if (!qword_1EE6252F0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3CFC, &type metadata for GenerateForegroundInstanceMaskRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE6252F0);
  }
  return result;
}

uint64_t GenerateForegroundInstanceMaskRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t GenerateForegroundInstanceMaskRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF5E8);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF5F0);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A132C65C();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for GenerateForegroundInstanceMaskRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A132C6A0();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A132C980(_QWORD *a1)
{
  return GenerateForegroundInstanceMaskRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A132C994(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF5D8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF5E0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A132C65C();
  sub_1A15A9468();
  sub_1A132C6A0();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double GenerateForegroundInstanceMaskRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  __n128 v8;
  __n128 v9[3];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(v9);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A132CBF4();
    sub_1A1377CDC((uint64_t)&type metadata for GenerateForegroundInstanceMaskRequest, v5, v6);
  }
  result = v9[0].n128_f64[0];
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  a2[2].n128_u64[0] = v4;
  return result;
}

__n128 GenerateForegroundInstanceMaskRequest.regionOfInterest.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 GenerateForegroundInstanceMaskRequest.regionOfInterest.setter(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*GenerateForegroundInstanceMaskRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A132CB70()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A132CBF4();
  result = sub_1A1378184((uint64_t)&type metadata for GenerateForegroundInstanceMaskRequest, v0);
  qword_1EE6252D8 = result;
  return result;
}

uint64_t static GenerateForegroundInstanceMaskRequest.supportedRevisions.getter()
{
  if (qword_1EE6252D0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void GenerateForegroundInstanceMaskRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = -96;
}

unint64_t sub_1A132CBF4()
{
  unint64_t result;

  result = qword_1EE5FF5F8;
  if (!qword_1EE5FF5F8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3B44, &type metadata for GenerateForegroundInstanceMaskRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF5F8);
  }
  return result;
}

int *sub_1A132CC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF658);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(7, 0, 31);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(7, 0, 31);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(7, 0, 31);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for GenerateForegroundInstanceMaskRequest.Revision, v0 + 32);
  qword_1EE643780 = v0;
  return result;
}

uint64_t GenerateForegroundInstanceMaskRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static GenerateForegroundInstanceMaskRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  CGSize v4;
  CGSize v5;
  CGRect v7;
  CGRect v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(CGSize *)(a1 + 16);
  v8.origin = *(CGPoint *)a1;
  v8.size = v4;
  v5 = *(CGSize *)(a2 + 16);
  v7.origin = *(CGPoint *)a2;
  v7.size = v5;
  if (static NormalizedRect.== infix(_:_:)(&v8, &v7))
    return sub_1A12903B0(v2, v3);
  else
    return 0;
}

uint64_t GenerateForegroundInstanceMaskRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 32);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A132CE68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A132D3A8();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A132CE90@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A132CBF4();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A132CED0(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A132CBF4();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A132CF10(_BYTE *a1@<X8>)
{
  *a1 = -96;
}

uint64_t sub_1A132CF1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A132CBF4();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A132CF44()
{
  if (qword_1EE6252E0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A132CF84()
{
  return sub_1A15A8BB0();
}

uint64_t sub_1A132CFA8(uint64_t a1, uint64_t a2)
{
  sub_1A12B32EC();
  return sub_1A1377AB4(a1, a2);
}

unint64_t sub_1A132CFE4()
{
  unint64_t result;

  result = qword_1EE5FF600;
  if (!qword_1EE5FF600)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateForegroundInstanceMaskRequest.Revision, &type metadata for GenerateForegroundInstanceMaskRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF600);
  }
  return result;
}

unint64_t sub_1A132D028(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B32EC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A132D04C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6DF8();
  result = sub_1A132D078();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A132D078()
{
  unint64_t result;

  result = qword_1EE5FF638;
  if (!qword_1EE5FF638)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateForegroundInstanceMaskRequest, &type metadata for GenerateForegroundInstanceMaskRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF638);
  }
  return result;
}

unint64_t sub_1A132D0C0()
{
  unint64_t result;

  result = qword_1EE5FF640;
  if (!qword_1EE5FF640)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateForegroundInstanceMaskRequest, &type metadata for GenerateForegroundInstanceMaskRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF640);
  }
  return result;
}

unint64_t sub_1A132D108()
{
  unint64_t result;

  result = qword_1EE5FF648;
  if (!qword_1EE5FF648)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateForegroundInstanceMaskRequest.Revision, &type metadata for GenerateForegroundInstanceMaskRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF648);
  }
  return result;
}

unint64_t sub_1A132D14C(uint64_t a1)
{
  unint64_t result;

  result = sub_1A132CBF4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for GenerateForegroundInstanceMaskRequest()
{
  return &type metadata for GenerateForegroundInstanceMaskRequest;
}

ValueMetadata *type metadata accessor for GenerateForegroundInstanceMaskRequest.Revision()
{
  return &type metadata for GenerateForegroundInstanceMaskRequest.Revision;
}

uint64_t _s6Vision37GenerateForegroundInstanceMaskRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A132D1D4 + 4 * byte_1A15D3970[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A132D1F4 + 4 * byte_1A15D3975[v4]))();
}

_BYTE *sub_1A132D1D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A132D1F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A132D1FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A132D204(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A132D20C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A132D214(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GenerateForegroundInstanceMaskRequest.Revision.CodingKeys()
{
  return &type metadata for GenerateForegroundInstanceMaskRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for GenerateForegroundInstanceMaskRequest.Revision.Revision1CodingKeys()
{
  return &type metadata for GenerateForegroundInstanceMaskRequest.Revision.Revision1CodingKeys;
}

unint64_t sub_1A132D244()
{
  unint64_t result;

  result = qword_1EE625B00[0];
  if (!qword_1EE625B00[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3CD4, &type metadata for GenerateForegroundInstanceMaskRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE625B00);
  }
  return result;
}

unint64_t sub_1A132D28C()
{
  unint64_t result;

  result = qword_1EE625C10;
  if (!qword_1EE625C10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3BF4, &type metadata for GenerateForegroundInstanceMaskRequest.Revision.Revision1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE625C10);
  }
  return result;
}

unint64_t sub_1A132D2D4()
{
  unint64_t result;

  result = qword_1EE625C18[0];
  if (!qword_1EE625C18[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3C1C, &type metadata for GenerateForegroundInstanceMaskRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE625C18);
  }
  return result;
}

unint64_t sub_1A132D31C()
{
  unint64_t result;

  result = qword_1EE625CA0;
  if (!qword_1EE625CA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3C44, &type metadata for GenerateForegroundInstanceMaskRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE625CA0);
  }
  return result;
}

unint64_t sub_1A132D364()
{
  unint64_t result;

  result = qword_1EE625CA8[0];
  if (!qword_1EE625CA8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3C6C, &type metadata for GenerateForegroundInstanceMaskRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE625CA8);
  }
  return result;
}

unint64_t sub_1A132D3A8()
{
  unint64_t result;

  result = qword_1EE5FF650;
  if (!qword_1EE5FF650)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D3B60, &type metadata for GenerateForegroundInstanceMaskRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF650);
  }
  return result;
}

uint64_t VisionObservation.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = sub_1A15A88C8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  sub_1A132D784((unint64_t *)&qword_1EE5FD0F8, MEMORY[0x1E0CB09C8]);
  sub_1A15A8B44();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1A132D4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CMTimeRange range;
  __int128 v14;
  _QWORD v15[6];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v5 = sub_1A15A88C8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)&range - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = 0xE000000000000000;
  sub_1A15A9090();
  sub_1A15A8BEC();
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  sub_1A132D784(&qword_1EE5FF660, MEMORY[0x1E0CB09F0]);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1A15A8BEC();
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a1, a3);
  sub_1A15A8E44();
  v14 = v16;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 56))(v15, a1, a3);
  sub_1A128465C((uint64_t)v15, (uint64_t)&v16);
  if ((v19 & 1) == 0)
  {
    v20 = v16;
    v21 = v17;
    v22 = v18;
    v9 = v16;
    v10 = v17;
    v11 = v18;
    sub_1A15A8BEC();
    if ((sub_1A15A8EF8() & 1) != 0 && (sub_1A15A8EBC() & 1) == 0)
    {
      *(_OWORD *)&range.start.value = v9;
      *(_OWORD *)&range.start.epoch = v10;
      *(_OWORD *)&range.duration.timescale = v11;
      range.start.value = (CMTimeValue)CMTimeRangeCopyDescription(0, &range);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF668);
      sub_1A15A8BBC();
      sub_1A15A8BEC();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1A15A8BEC();
    }
  }
  return v14;
}

uint64_t sub_1A132D784(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1A15A88C8();
    result = MEMORY[0x1A1B0B774](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of VisionObservation.uuid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of VisionObservation.confidence.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of VisionObservation.timeRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of VisionObservation.originatingRequestDescriptor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t static DetectRectanglesRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static DetectRectanglesRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t DetectRectanglesRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A132D818()
{
  sub_1A132D9F4();
  return sub_1A15A9474();
}

uint64_t sub_1A132D840()
{
  sub_1A132D9F4();
  return sub_1A15A9480();
}

uint64_t sub_1A132D868()
{
  sub_1A132DA38();
  return sub_1A15A9474();
}

uint64_t sub_1A132D890()
{
  sub_1A132DA38();
  return sub_1A15A9480();
}

uint64_t DetectRectanglesRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF670);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF678);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A132D9F4();
  sub_1A15A9468();
  sub_1A132DA38();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A132D9F4()
{
  unint64_t result;

  result = qword_1EE625D48;
  if (!qword_1EE625D48)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D45A4, &type metadata for DetectRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE625D48);
  }
  return result;
}

unint64_t sub_1A132DA38()
{
  unint64_t result;

  result = qword_1EE625D50;
  if (!qword_1EE625D50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4554, &type metadata for DetectRectanglesRequest.Revision.Revision1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE625D50);
  }
  return result;
}

uint64_t DetectRectanglesRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectRectanglesRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF680);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF688);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A132D9F4();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for DetectRectanglesRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A132DA38();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A132DD18(_QWORD *a1)
{
  return DetectRectanglesRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A132DD2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF670);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF678);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A132D9F4();
  sub_1A15A9468();
  sub_1A132DA38();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t DetectRectanglesRequest.init(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t result;
  __int128 v19;
  char v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *a1;
  static NormalizedRect.fullImage.getter(&v21);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A132E8D4();
    sub_1A1377CDC((uint64_t)&type metadata for DetectRectanglesRequest, v5, v6);
  }
  v7 = v21;
  v8 = v22;
  v9 = v23;
  v10 = sub_1A132E918();
  v11 = sub_1A12F6658((uint64_t)&type metadata for DetectRectanglesRequest, v10);
  v13 = v12;
  v14 = sub_1A15A8BB0();
  if (!v13)
  {
    result = swift_bridgeObjectRelease();
    v20 = 2;
    v19 = xmmword_1A15D3E00;
    goto LABEL_13;
  }
  if (v14 == v11 && v13 == v15)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v19 = xmmword_1A15D3E00;
    goto LABEL_12;
  }
  v17 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v19 = xmmword_1A15D3E00;
  if ((v17 & 1) != 0)
  {
LABEL_12:
    v20 = 1;
    goto LABEL_13;
  }
  v20 = 2;
LABEL_13:
  *(_OWORD *)a2 = v19;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 1;
  *(__n128 *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v4;
  return result;
}

float DetectRectanglesRequest.minimumAspectRatio.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void DetectRectanglesRequest.minimumAspectRatio.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*DetectRectanglesRequest.minimumAspectRatio.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

float DetectRectanglesRequest.maximumAspectRatio.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void DetectRectanglesRequest.maximumAspectRatio.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*DetectRectanglesRequest.maximumAspectRatio.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

float DetectRectanglesRequest.quadratureToleranceDegrees.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void DetectRectanglesRequest.quadratureToleranceDegrees.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*DetectRectanglesRequest.quadratureToleranceDegrees.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

float DetectRectanglesRequest.minimumSize.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void DetectRectanglesRequest.minimumSize.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*DetectRectanglesRequest.minimumSize.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

float DetectRectanglesRequest.minimumConfidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void DetectRectanglesRequest.minimumConfidence.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t (*DetectRectanglesRequest.minimumConfidence.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectRectanglesRequest.maximumObservations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t DetectRectanglesRequest.maximumObservations.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*DetectRectanglesRequest.maximumObservations.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

__n128 DetectRectanglesRequest.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 DetectRectanglesRequest.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 48) = v3;
  return result;
}

uint64_t (*DetectRectanglesRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A132E0D4()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A132E8D4();
  result = sub_1A1378184((uint64_t)&type metadata for DetectRectanglesRequest, v0);
  qword_1EE625D38 = result;
  return result;
}

uint64_t static DetectRectanglesRequest.supportedRevisions.getter()
{
  if (qword_1EE625D30 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void DetectRectanglesRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = 120;
}

BOOL static DetectRectanglesRequest.Algorithm.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DetectRectanglesRequest.Algorithm.hash(into:)()
{
  return sub_1A15A93F0();
}

unint64_t sub_1A132E198()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0xD000000000000014;
}

uint64_t sub_1A132E1D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A132FE18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A132E1FC()
{
  sub_1A132E95C();
  return sub_1A15A9474();
}

uint64_t sub_1A132E224()
{
  sub_1A132E95C();
  return sub_1A15A9480();
}

uint64_t sub_1A132E24C()
{
  sub_1A132E9E4();
  return sub_1A15A9474();
}

uint64_t sub_1A132E274()
{
  sub_1A132E9E4();
  return sub_1A15A9480();
}

uint64_t sub_1A132E29C()
{
  sub_1A132E9A0();
  return sub_1A15A9474();
}

uint64_t sub_1A132E2C4()
{
  sub_1A132E9A0();
  return sub_1A15A9480();
}

void *static DetectRectanglesRequest.Algorithm.allCases.getter()
{
  return &unk_1E45313E8;
}

uint64_t DetectRectanglesRequest.Algorithm.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF6A0);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF6A8);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF6B0);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A132E95C();
  sub_1A15A9468();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A132E9A0();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A132E9E4();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

uint64_t DetectRectanglesRequest.Algorithm.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectRectanglesRequest.Algorithm.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF6B8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF6C0);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF6C8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A132E95C();
  v11 = v33;
  sub_1A15A945C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A15A9294();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A15A90F0();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v21 = &type metadata for DetectRectanglesRequest.Algorithm;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A132E9A0();
    sub_1A15A9204();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A132E9E4();
    v22 = v6;
    sub_1A15A9204();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

void sub_1A132E868(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E45314A0;
}

uint64_t sub_1A132E878@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DetectRectanglesRequest.Algorithm.init(from:)(a1, a2);
}

uint64_t sub_1A132E88C(_QWORD *a1)
{
  return DetectRectanglesRequest.Algorithm.encode(to:)(a1);
}

void DetectRectanglesRequest.algorithm.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 64);
}

_BYTE *DetectRectanglesRequest.algorithm.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = *result;
  return result;
}

uint64_t (*DetectRectanglesRequest.algorithm.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

void *DetectRectanglesRequest.supportedAlgorithms.getter()
{
  return &unk_1E45311B0;
}

unint64_t sub_1A132E8D4()
{
  unint64_t result;

  result = qword_1EE5FF690;
  if (!qword_1EE5FF690)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D40DC, &type metadata for DetectRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF690);
  }
  return result;
}

unint64_t sub_1A132E918()
{
  unint64_t result;

  result = qword_1EE5FF698;
  if (!qword_1EE5FF698)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D40F8, &type metadata for DetectRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF698);
  }
  return result;
}

unint64_t sub_1A132E95C()
{
  unint64_t result;

  result = qword_1EE625D58;
  if (!qword_1EE625D58)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4504, &type metadata for DetectRectanglesRequest.Algorithm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE625D58);
  }
  return result;
}

unint64_t sub_1A132E9A0()
{
  unint64_t result;

  result = qword_1EE625D60;
  if (!qword_1EE625D60)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D44B4, &type metadata for DetectRectanglesRequest.Algorithm.QuadrilateralDetectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE625D60);
  }
  return result;
}

unint64_t sub_1A132E9E4()
{
  unint64_t result;

  result = qword_1EE625D68[0];
  if (!qword_1EE625D68[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4464, &type metadata for DetectRectanglesRequest.Algorithm.FastFourierTransformCodingKeys);
    atomic_store(result, qword_1EE625D68);
  }
  return result;
}

int *sub_1A132EA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF740);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(1, 0, 0);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(1, 0, 0);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(1, 0, 0);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for DetectRectanglesRequest.Revision, v0 + 32);
  qword_1EE643788 = v0;
  return result;
}

uint64_t DetectRectanglesRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v3 = *(unsigned __int8 *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 72);
  sub_1A15A9408();
  sub_1A15A9408();
  sub_1A15A9408();
  sub_1A15A9408();
  sub_1A15A9408();
  sub_1A15A93F0();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  sub_1A15A93FC();
  if (v3 != 2)
    sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t DetectRectanglesRequest.hashValue.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v7[11];
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  *(_OWORD *)&v7[9] = *(_OWORD *)v0;
  v8 = v1;
  v9 = v2;
  v5 = *(_OWORD *)(v0 + 48);
  v10 = *(_OWORD *)(v0 + 32);
  v11 = v5;
  v12 = v3;
  v13 = v4;
  sub_1A15A93E4();
  DetectRectanglesRequest.hash(into:)((__int128 *)v7);
  return sub_1A15A9420();
}

__n128 sub_1A132EC88@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1A132EC94(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 48) = v3;
  return result;
}

uint64_t sub_1A132ECA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A132E918();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A132ECC8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A132E8D4();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A132ED08(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A132E8D4();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A132ED48(_BYTE *a1@<X8>)
{
  *a1 = 120;
}

uint64_t sub_1A132ED54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A132E8D4();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A132ED7C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v7[11];
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  *(_OWORD *)&v7[9] = *(_OWORD *)v0;
  v8 = v1;
  v9 = v2;
  v5 = *(_OWORD *)(v0 + 48);
  v10 = *(_OWORD *)(v0 + 32);
  v11 = v5;
  v12 = v3;
  v13 = v4;
  sub_1A15A93E4();
  DetectRectanglesRequest.hash(into:)((__int128 *)v7);
  return sub_1A15A9420();
}

uint64_t sub_1A132EDF0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v7[11];
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  *(_OWORD *)&v7[9] = *(_OWORD *)v0;
  v8 = v1;
  v9 = v2;
  v5 = *(_OWORD *)(v0 + 48);
  v10 = *(_OWORD *)(v0 + 32);
  v11 = v5;
  v12 = v3;
  v13 = v4;
  sub_1A15A93E4();
  DetectRectanglesRequest.hash(into:)((__int128 *)v7);
  return sub_1A15A9420();
}

uint64_t sub_1A132EE60()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A132EE68(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*sub_1A132EE90())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A132EEA0()
{
  if (qword_1EE625D40 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A132EEE0()
{
  return sub_1A15A8BB0();
}

uint64_t sub_1A132EF04(uint64_t a1, uint64_t a2)
{
  sub_1A12B3470();
  return sub_1A1377AB4(a1, a2);
}

void sub_1A132EF3C(uint64_t a1, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  void *ObjCClassFromMetadata;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_BYTE *);
  void (*v20)(_BYTE *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_BYTE *, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_BYTE *, _QWORD);
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_BYTE *, _QWORD);
  uint64_t v58;
  _BYTE v59[32];
  _QWORD v60[3];
  uint64_t v61;

  v7 = *v2;
  v6 = v2[1];
  v9 = v2[2];
  v8 = v2[3];
  v10 = v2[4];
  v11 = *((_QWORD *)v2 + 3);
  v12 = *((unsigned __int8 *)v2 + 64);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1A132F488();
  if (objc_msgSend(ObjCClassFromMetadata, sel_isSubclassOfClass_, swift_getObjCClassFromMetadata()))
  {
    v58 = a2;
    v14 = sub_1A15A8BB0();
    if (v12 == 2)
    {
LABEL_25:
      __break(1u);
      return;
    }
    v16 = v14;
    v17 = v15;
    v18 = 1;
    if ((v12 & 1) != 0)
      v18 = 2;
    v61 = MEMORY[0x1E0DEB418];
    v60[0] = v18;
    v19 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200);
    v20 = (void (*)(_BYTE *, _QWORD))v19(v59);
    sub_1A128D188((uint64_t)v60, v16, v17);
    v20(v59, 0);
    v21 = sub_1A15A8BB0();
    v23 = v22;
    v24 = MEMORY[0x1E0DEB188];
    v61 = MEMORY[0x1E0DEB188];
    LODWORD(v60[0]) = v10;
    v25 = (void (*)(_BYTE *, _QWORD))v19(v59);
    sub_1A128D188((uint64_t)v60, v21, v23);
    v25(v59, 0);
    v26 = sub_1A15A8BB0();
    v28 = v27;
    v61 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v60[0]) = 0;
    v29 = (void (*)(_BYTE *, _QWORD))v19(v59);
    sub_1A128D188((uint64_t)v60, v26, v28);
    v29(v59, 0);
    v30 = sub_1A15A8BB0();
    v32 = v31;
    v61 = v24;
    LODWORD(v60[0]) = v7;
    v33 = (void (*)(_BYTE *, _QWORD))v19(v59);
    sub_1A128D188((uint64_t)v60, v30, v32);
    v33(v59, 0);
    v34 = sub_1A15A8BB0();
    v36 = v35;
    v61 = v24;
    LODWORD(v60[0]) = v6;
    v37 = (void (*)(_BYTE *, _QWORD))v19(v59);
    sub_1A128D188((uint64_t)v60, v34, v36);
    v37(v59, 0);
    v38 = sub_1A15A8BB0();
    v40 = v39;
    v61 = v24;
    LODWORD(v60[0]) = v9;
    v41 = (void (*)(_BYTE *, _QWORD))v19(v59);
    sub_1A128D188((uint64_t)v60, v38, v40);
    v41(v59, 0);
    v42 = sub_1A15A8BB0();
    v44 = v43;
    v61 = v24;
    LODWORD(v60[0]) = v8;
    v45 = (uint64_t (*)(_BYTE *, _QWORD))v19(v59);
    sub_1A128D188((uint64_t)v60, v42, v44);
    v46 = v45(v59, 0);
    if (v11 != 0x7FFFFFFFFFFFFFFFLL && v11)
      goto LABEL_19;
    v47 = (void *)(*(uint64_t (**)(uint64_t))(**(_QWORD **)(v58 + 16) + 112))(v46);
    if (v3)
      return;
    v48 = v47;
    v49 = objc_msgSend(v47, sel_width);
    v50 = objc_msgSend(v48, sel_height);

    if ((uint64_t)v50 >= (uint64_t)v49)
      v51 = (uint64_t)v49;
    else
      v51 = (uint64_t)v50;
    if ((uint64_t)v50 <= (uint64_t)v49)
      v52 = (uint64_t)v49;
    else
      v52 = (uint64_t)v50;
    v53 = ceil((double)v52 * 256.0 / (double)v51);
    if ((~*(_QWORD *)&v53 & 0x7FF0000000000000) != 0)
    {
      if (v53 > -9.22337204e18)
      {
        if (v53 < 9.22337204e18)
        {
          if ((unint64_t)((uint64_t)v53 - 0x80000000000000) >> 56 == 255)
          {
            v11 = 16 * (uint64_t)v53;
LABEL_19:
            v54 = sub_1A15A8BB0();
            v56 = v55;
            v61 = MEMORY[0x1E0DEB418];
            v60[0] = v11;
            v57 = (void (*)(_BYTE *, _QWORD))v19(v59);
            sub_1A128D188((uint64_t)v60, v54, v56);
            v57(v59, 0);
            return;
          }
          goto LABEL_24;
        }
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
}

void sub_1A132F390(uint64_t a1, uint64_t a2)
{
  sub_1A132EF3C(a1, a2);
}

uint64_t _s6Vision23DetectRectanglesRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  CGSize v6;
  CGSize v7;
  CGRect v9;
  CGRect v10;

  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*(float32x4_t *)a1, *(float32x4_t *)a2)), 0xFuLL))) & 1) == 0)
    return 0;
  if (*(float *)(a1 + 16) != *(float *)(a2 + 16))
    return 0;
  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(unsigned __int8 *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(CGSize *)(a1 + 48);
  v10.origin = *(CGPoint *)(a1 + 32);
  v10.size = v6;
  v7 = *(CGSize *)(a2 + 48);
  v9.origin = *(CGPoint *)(a2 + 32);
  v9.size = v7;
  if (!static NormalizedRect.== infix(_:_:)(&v10, &v9))
    return 0;
  if (v2 != 2)
  {
    if (v4 == 2 || ((v4 ^ v2) & 1) != 0)
      return 0;
    return sub_1A12903B0(v3, v5);
  }
  if (v4 == 2)
    return sub_1A12903B0(v3, v5);
  return 0;
}

unint64_t sub_1A132F488()
{
  unint64_t result;

  result = qword_1EE5FF6D0;
  if (!qword_1EE5FF6D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5FF6D0);
  }
  return result;
}

unint64_t sub_1A132F4C8()
{
  unint64_t result;

  result = qword_1EE5FF6D8;
  if (!qword_1EE5FF6D8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectRectanglesRequest.Revision, &type metadata for DetectRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF6D8);
  }
  return result;
}

unint64_t sub_1A132F510()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE5FF6E0;
  if (!qword_1EE5FF6E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF6E8);
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE5FF6E0);
  }
  return result;
}

unint64_t sub_1A132F560()
{
  unint64_t result;

  result = qword_1EE5FF6F0[0];
  if (!qword_1EE5FF6F0[0])
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectRectanglesRequest.Algorithm, &type metadata for DetectRectanglesRequest.Algorithm);
    atomic_store(result, qword_1EE5FF6F0);
  }
  return result;
}

unint64_t sub_1A132F5A4(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B3470();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A132F5C8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6F08();
  result = sub_1A132F5F4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A132F5F4()
{
  unint64_t result;

  result = qword_1EE5FF728;
  if (!qword_1EE5FF728)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectRectanglesRequest, &type metadata for DetectRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF728);
  }
  return result;
}

unint64_t sub_1A132F63C()
{
  unint64_t result;

  result = qword_1EE5FF730;
  if (!qword_1EE5FF730)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectRectanglesRequest, &type metadata for DetectRectanglesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF730);
  }
  return result;
}

unint64_t sub_1A132F684()
{
  unint64_t result;

  result = qword_1EE5FF738;
  if (!qword_1EE5FF738)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectRectanglesRequest.Revision, &type metadata for DetectRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF738);
  }
  return result;
}

unint64_t sub_1A132F6C8(uint64_t a1)
{
  unint64_t result;

  result = sub_1A132E8D4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for ClassifyImageRequest()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DetectRectanglesRequest(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectRectanglesRequest(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for DetectRectanglesRequest(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClassifyImageRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClassifyImageRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectRectanglesRequest()
{
  return &type metadata for DetectRectanglesRequest;
}

ValueMetadata *type metadata accessor for DetectRectanglesRequest.Revision()
{
  return &type metadata for DetectRectanglesRequest.Revision;
}

ValueMetadata *type metadata accessor for DetectRectanglesRequest.Algorithm()
{
  return &type metadata for DetectRectanglesRequest.Algorithm;
}

uint64_t _s6Vision23DetectRectanglesRequestV9AlgorithmOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A132F96C + 4 * byte_1A15D3E15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A132F9A0 + 4 * byte_1A15D3E10[v4]))();
}

uint64_t sub_1A132F9A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A132F9A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A132F9B0);
  return result;
}

uint64_t sub_1A132F9BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A132F9C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A132F9C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A132F9D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DetectRectanglesRequest.Algorithm.CodingKeys()
{
  return &type metadata for DetectRectanglesRequest.Algorithm.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectRectanglesRequest.Algorithm.FastFourierTransformCodingKeys()
{
  return &type metadata for DetectRectanglesRequest.Algorithm.FastFourierTransformCodingKeys;
}

ValueMetadata *type metadata accessor for DetectRectanglesRequest.Algorithm.QuadrilateralDetectionCodingKeys()
{
  return &type metadata for DetectRectanglesRequest.Algorithm.QuadrilateralDetectionCodingKeys;
}

uint64_t _s6Vision23DetectRectanglesRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A132FA4C + 4 * byte_1A15D3E1A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A132FA6C + 4 * byte_1A15D3E1F[v4]))();
}

_BYTE *sub_1A132FA4C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A132FA6C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A132FA74(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A132FA7C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A132FA84(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A132FA8C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DetectRectanglesRequest.Revision.CodingKeys()
{
  return &type metadata for DetectRectanglesRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectRectanglesRequest.Revision.Revision1CodingKeys()
{
  return &type metadata for DetectRectanglesRequest.Revision.Revision1CodingKeys;
}

unint64_t sub_1A132FABC()
{
  unint64_t result;

  result = qword_1EE6267F0[0];
  if (!qword_1EE6267F0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D42E4, &type metadata for DetectRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE6267F0);
  }
  return result;
}

unint64_t sub_1A132FB04()
{
  unint64_t result;

  result = qword_1EE626C00[0];
  if (!qword_1EE626C00[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D443C, &type metadata for DetectRectanglesRequest.Algorithm.CodingKeys);
    atomic_store(result, qword_1EE626C00);
  }
  return result;
}

unint64_t sub_1A132FB4C()
{
  unint64_t result;

  result = qword_1EE626D10;
  if (!qword_1EE626D10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D435C, &type metadata for DetectRectanglesRequest.Algorithm.FastFourierTransformCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE626D10);
  }
  return result;
}

unint64_t sub_1A132FB94()
{
  unint64_t result;

  result = qword_1EE626D18[0];
  if (!qword_1EE626D18[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4384, &type metadata for DetectRectanglesRequest.Algorithm.FastFourierTransformCodingKeys);
    atomic_store(result, qword_1EE626D18);
  }
  return result;
}

unint64_t sub_1A132FBDC()
{
  unint64_t result;

  result = qword_1EE626DA0;
  if (!qword_1EE626DA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D430C, &type metadata for DetectRectanglesRequest.Algorithm.QuadrilateralDetectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE626DA0);
  }
  return result;
}

unint64_t sub_1A132FC24()
{
  unint64_t result;

  result = qword_1EE626DA8[0];
  if (!qword_1EE626DA8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4334, &type metadata for DetectRectanglesRequest.Algorithm.QuadrilateralDetectionCodingKeys);
    atomic_store(result, qword_1EE626DA8);
  }
  return result;
}

unint64_t sub_1A132FC6C()
{
  unint64_t result;

  result = qword_1EE626E30;
  if (!qword_1EE626E30)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D43AC, &type metadata for DetectRectanglesRequest.Algorithm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE626E30);
  }
  return result;
}

unint64_t sub_1A132FCB4()
{
  unint64_t result;

  result = qword_1EE626E38[0];
  if (!qword_1EE626E38[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D43D4, &type metadata for DetectRectanglesRequest.Algorithm.CodingKeys);
    atomic_store(result, qword_1EE626E38);
  }
  return result;
}

unint64_t sub_1A132FCFC()
{
  unint64_t result;

  result = qword_1EE626EC0;
  if (!qword_1EE626EC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4204, &type metadata for DetectRectanglesRequest.Revision.Revision1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE626EC0);
  }
  return result;
}

unint64_t sub_1A132FD44()
{
  unint64_t result;

  result = qword_1EE626EC8[0];
  if (!qword_1EE626EC8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D422C, &type metadata for DetectRectanglesRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE626EC8);
  }
  return result;
}

unint64_t sub_1A132FD8C()
{
  unint64_t result;

  result = qword_1EE626F50;
  if (!qword_1EE626F50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4254, &type metadata for DetectRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE626F50);
  }
  return result;
}

unint64_t sub_1A132FDD4()
{
  unint64_t result;

  result = qword_1EE626F58[0];
  if (!qword_1EE626F58[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D427C, &type metadata for DetectRectanglesRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE626F58);
  }
  return result;
}

uint64_t sub_1A132FE18(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001A15FD910 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001A15FD930)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t static RecognizeTextRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static RecognizeTextRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t RecognizeTextRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A132FF38()
{
  sub_1A1330114();
  return sub_1A15A9474();
}

uint64_t sub_1A132FF60()
{
  sub_1A1330114();
  return sub_1A15A9480();
}

uint64_t sub_1A132FF88()
{
  sub_1A1330158();
  return sub_1A15A9474();
}

uint64_t sub_1A132FFB0()
{
  sub_1A1330158();
  return sub_1A15A9480();
}

uint64_t RecognizeTextRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF748);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF750);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1330114();
  sub_1A15A9468();
  sub_1A1330158();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A1330114()
{
  unint64_t result;

  result = qword_1EE626FF8;
  if (!qword_1EE626FF8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4D84, &type metadata for RecognizeTextRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE626FF8);
  }
  return result;
}

unint64_t sub_1A1330158()
{
  unint64_t result;

  result = qword_1EE627000;
  if (!qword_1EE627000)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4D34, &type metadata for RecognizeTextRequest.Revision.Revision3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE627000);
  }
  return result;
}

uint64_t RecognizeTextRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t RecognizeTextRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF758);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF760);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1330114();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for RecognizeTextRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A1330158();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A1330438(_QWORD *a1)
{
  return RecognizeTextRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A133044C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF748);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF750);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1330114();
  sub_1A15A9468();
  sub_1A1330158();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double RecognizeTextRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double result;
  __n128 v23;
  uint64_t v24;
  __n128 v25[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF768);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF770);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF778);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF780);
  sub_1A15A8934();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1A15C3FE0;
  sub_1A15A88D4();
  v15 = sub_1A15A88E0();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 0, 1, v15);
  v16 = sub_1A15A8904();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
  sub_1A15A88EC();
  v17 = sub_1A15A88F8();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 0, 1, v17);
  sub_1A15A891C();
  static NormalizedRect.fullImage.getter(v25);
  v18 = MEMORY[0x1E0DEE9D8];
  v19 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v13 == 1)
  {
    v20 = sub_1A13318CC();
    sub_1A1377CDC((uint64_t)&type metadata for RecognizeTextRequest, v20, v21);
  }
  a2->n128_u32[0] = 0;
  a2->n128_u16[2] = 0;
  a2->n128_u64[1] = v14;
  a2[1].n128_u8[0] = 1;
  a2[1].n128_u64[1] = v18;
  result = v25[0].n128_f64[0];
  v23 = v25[1];
  a2[2] = v25[0];
  a2[3] = v23;
  a2[4].n128_u64[0] = v19;
  return result;
}

BOOL static RecognizeTextRequest.RecognitionLevel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t RecognizeTextRequest.RecognitionLevel.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A133080C()
{
  sub_1A1331998();
  return sub_1A15A9474();
}

uint64_t sub_1A1330834()
{
  sub_1A1331998();
  return sub_1A15A9480();
}

uint64_t sub_1A133085C()
{
  sub_1A1331910();
  return sub_1A15A9474();
}

uint64_t sub_1A1330884()
{
  sub_1A1331910();
  return sub_1A15A9480();
}

uint64_t sub_1A13308AC()
{
  sub_1A1331954();
  return sub_1A15A9474();
}

uint64_t sub_1A13308D4()
{
  sub_1A1331954();
  return sub_1A15A9480();
}

void *static RecognizeTextRequest.RecognitionLevel.allCases.getter()
{
  return &unk_1E452FA60;
}

uint64_t RecognizeTextRequest.RecognitionLevel.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF790);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF798);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF7A0);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1331910();
  sub_1A15A9468();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A1331954();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A1331998();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

uint64_t RecognizeTextRequest.RecognitionLevel.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t RecognizeTextRequest.RecognitionLevel.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF7A8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF7B0);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF7B8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1331910();
  v11 = v33;
  sub_1A15A945C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A15A9294();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A15A90F0();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v21 = &type metadata for RecognizeTextRequest.RecognitionLevel;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A1331954();
    sub_1A15A9204();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A1331998();
    v22 = v6;
    sub_1A15A9204();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

void sub_1A1330E78(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E452FB18;
}

uint64_t sub_1A1330E88@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return RecognizeTextRequest.RecognitionLevel.init(from:)(a1, a2);
}

uint64_t sub_1A1330E9C(_QWORD *a1)
{
  return RecognizeTextRequest.RecognitionLevel.encode(to:)(a1);
}

float RecognizeTextRequest.minimumTextHeightFraction.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void RecognizeTextRequest.minimumTextHeightFraction.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*RecognizeTextRequest.minimumTextHeightFraction.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

void RecognizeTextRequest.recognitionLevel.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

_BYTE *RecognizeTextRequest.recognitionLevel.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = *result;
  return result;
}

uint64_t (*RecognizeTextRequest.recognitionLevel.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t RecognizeTextRequest.automaticallyDetectsLanguage.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t RecognizeTextRequest.automaticallyDetectsLanguage.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*RecognizeTextRequest.automaticallyDetectsLanguage.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t RecognizeTextRequest.recognitionLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RecognizeTextRequest.recognitionLanguages.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*RecognizeTextRequest.recognitionLanguages.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t RecognizeTextRequest.usesLanguageCorrection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t RecognizeTextRequest.usesLanguageCorrection.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*RecognizeTextRequest.usesLanguageCorrection.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t RecognizeTextRequest.customWords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RecognizeTextRequest.customWords.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*RecognizeTextRequest.customWords.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

_QWORD *RecognizeTextRequest.supportedRecognitionLanguages.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v27[2];
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = sub_1A15A8934();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v3) = *(_BYTE *)(v0 + 4);
  v5 = *(_BYTE *)(v0 + 5);
  v6 = *(void **)(v0 + 8);
  v7 = *(_BYTE *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = *(_QWORD *)(v0 + 64);
  LODWORD(v27[0]) = *(_DWORD *)v0;
  BYTE4(v27[0]) = v3;
  BYTE5(v27[0]) = v5;
  v27[1] = v6;
  v28 = v7;
  v29 = v8;
  v10 = *(_OWORD *)(v0 + 48);
  v30 = *(_OWORD *)(v0 + 32);
  v31 = v10;
  v32 = v9;
  v11 = sub_1A1331258(0);
  v12 = (void *)objc_opt_self();
  sub_1A128FDD0(v11);
  swift_bridgeObjectRelease();
  v13 = (void *)sub_1A15A8AD8();
  swift_bridgeObjectRelease();
  v27[0] = 0;
  v14 = objc_msgSend(v12, sel_supportedLanguagesForProcessOptions_error_, v13, v27);

  v15 = v27[0];
  if (!v14)
  {
    v23 = v27[0];
    v24 = (void *)sub_1A15A8844();

    swift_willThrow();
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16 = sub_1A15A8C40();
  v17 = v15;

  v18 = *(_QWORD *)(v16 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v27[0] = (id)MEMORY[0x1E0DEE9D8];
  sub_1A1332150(0, v18, 0);
  v19 = v27[0];
  v20 = v16 + 40;
  do
  {
    swift_bridgeObjectRetain();
    sub_1A15A8910();
    v27[0] = v19;
    v22 = v19[2];
    v21 = v19[3];
    if (v22 >= v21 >> 1)
    {
      sub_1A1332150(v21 > 1, v22 + 1, 1);
      v19 = v27[0];
    }
    v20 += 16;
    v19[2] = v22 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v22, v4, v1);
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t sub_1A1331258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  _QWORD v76[2];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _OWORD v85[2];
  __int128 v86;
  char v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v83 = sub_1A15A8934();
  v3 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v5 = (char *)v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_BYTE *)(v1 + 4);
  v7 = *(unsigned __int8 *)(v1 + 5);
  v8 = *(_QWORD *)(v1 + 8);
  LOBYTE(v4) = *(_BYTE *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = *(_QWORD *)(v1 + 64);
  LODWORD(v86) = *(_DWORD *)v1;
  BYTE4(v86) = v6;
  v81 = v7;
  BYTE5(v86) = v7;
  *((_QWORD *)&v86 + 1) = v8;
  v87 = v4;
  v88 = v9;
  v11 = *(_OWORD *)(v1 + 48);
  v89 = *(_OWORD *)(v1 + 32);
  v90 = v11;
  v91 = v10;
  v12 = sub_1A133216C();
  v13 = sub_1A12F6C58(a1, (uint64_t)&type metadata for RecognizeTextRequest, v12);
  v14 = sub_1A15A8BB0();
  v16 = v15;
  v17 = MEMORY[0x1E0DEAFA0];
  v88 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v86) = v6;
  sub_1A12880A0(&v86, v85);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v84 = v13;
  sub_1A128E3E8(v85, v14, v16, isUniquelyReferenced_nonNull_native);
  v19 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = sub_1A15A8BB0();
  v22 = v21;
  v88 = MEMORY[0x1E0DEB418];
  *(_QWORD *)&v86 = 10;
  sub_1A12880A0(&v86, v85);
  v23 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v19;
  v24 = v8;
  sub_1A128E3E8(v85, v20, v22, v23);
  v80 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v78 = sub_1A15A8BB0();
  v79 = v25;
  v26 = *(_QWORD *)(v8 + 16);
  v27 = MEMORY[0x1E0DEE9D8];
  if (v26)
  {
    v77 = v9;
    *(_QWORD *)&v86 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1A12FE11C(0, v26, 0);
    v28 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v76[1] = v24;
    v29 = v24 + v28;
    v82 = *(_QWORD *)(v3 + 72);
    v30 = v3;
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v32 = v83;
      v31(v5, v29, v83);
      v33 = sub_1A15A8928();
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v32);
      v27 = v86;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A12FE11C(0, *(_QWORD *)(v27 + 16) + 1, 1);
        v27 = v86;
      }
      v37 = *(_QWORD *)(v27 + 16);
      v36 = *(_QWORD *)(v27 + 24);
      if (v37 >= v36 >> 1)
      {
        sub_1A12FE11C((char *)(v36 > 1), v37 + 1, 1);
        v27 = v86;
      }
      *(_QWORD *)(v27 + 16) = v37 + 1;
      v38 = v27 + 16 * v37;
      *(_QWORD *)(v38 + 32) = v33;
      *(_QWORD *)(v38 + 40) = v35;
      v29 += v82;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEAFA0];
    v39 = v77;
  }
  else
  {
    v39 = v9;
  }
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FEA20);
  v88 = v40;
  *(_QWORD *)&v86 = v27;
  sub_1A12880A0(&v86, v85);
  v41 = v80;
  v42 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v41;
  sub_1A128E3E8(v85, v78, v79, v42);
  v43 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = sub_1A15A8BB0();
  v46 = v45;
  v88 = MEMORY[0x1E0DEB418];
  *(_QWORD *)&v86 = 3;
  sub_1A12880A0(&v86, v85);
  v47 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v43;
  sub_1A128E3E8(v85, v44, v46, v47);
  v48 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = sub_1A15A8BB0();
  v51 = v50;
  v88 = v17;
  v52 = v81;
  LOBYTE(v86) = v81;
  sub_1A12880A0(&v86, v85);
  v53 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v48;
  sub_1A128E3E8(v85, v49, v51, v53);
  v54 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = sub_1A15A8BB0();
  v57 = v56;
  v88 = v17;
  LOBYTE(v86) = v52 ^ 1;
  sub_1A12880A0(&v86, v85);
  v58 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v54;
  sub_1A128E3E8(v85, v55, v57, v58);
  v59 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v60 = sub_1A15A8BB0();
  v62 = v61;
  v88 = v40;
  *(_QWORD *)&v86 = v39;
  sub_1A12880A0(&v86, v85);
  swift_bridgeObjectRetain();
  v63 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v59;
  sub_1A128E3E8(v85, v60, v62, v63);
  v64 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = sub_1A15A8BB0();
  v67 = v66;
  v88 = v17;
  LOBYTE(v86) = 1;
  sub_1A12880A0(&v86, v85);
  v68 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v64;
  sub_1A128E3E8(v85, v65, v67, v68);
  v69 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v70 = sub_1A15A8BB0();
  v72 = v71;
  v88 = v17;
  LOBYTE(v86) = 1;
  sub_1A12880A0(&v86, v85);
  v73 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v69;
  sub_1A128E3E8(v85, v70, v72, v73);
  v74 = v84;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v74;
}

__n128 RecognizeTextRequest.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 RecognizeTextRequest.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 48) = v3;
  return result;
}

uint64_t (*RecognizeTextRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A1331848()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A13318CC();
  result = sub_1A1378184((uint64_t)&type metadata for RecognizeTextRequest, v0);
  qword_1EE626FE8 = result;
  return result;
}

uint64_t static RecognizeTextRequest.supportedRevisions.getter()
{
  if (qword_1EE626FE0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void RecognizeTextRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = -56;
}

unint64_t sub_1A13318CC()
{
  unint64_t result;

  result = qword_1EE5FF788;
  if (!qword_1EE5FF788)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D48CC, &type metadata for RecognizeTextRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF788);
  }
  return result;
}

unint64_t sub_1A1331910()
{
  unint64_t result;

  result = qword_1EE627008;
  if (!qword_1EE627008)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4CE4, &type metadata for RecognizeTextRequest.RecognitionLevel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE627008);
  }
  return result;
}

unint64_t sub_1A1331954()
{
  unint64_t result;

  result = qword_1EE627010;
  if (!qword_1EE627010)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4C94, &type metadata for RecognizeTextRequest.RecognitionLevel.FastCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE627010);
  }
  return result;
}

unint64_t sub_1A1331998()
{
  unint64_t result;

  result = qword_1EE627018[0];
  if (!qword_1EE627018[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4C44, &type metadata for RecognizeTextRequest.RecognitionLevel.AccurateCodingKeys);
    atomic_store(result, qword_1EE627018);
  }
  return result;
}

int *sub_1A13319DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF860);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(6, 0, 9);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(6, 0, 9);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(6, 0, 9);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for RecognizeTextRequest.Revision, v0 + 32);
  qword_1EE643790 = v0;
  return result;
}

uint64_t RecognizeTextRequest.hash(into:)(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[1];
  v4 = v1[3];
  v5 = v1[8];
  sub_1A15A9408();
  sub_1A15A93F0();
  sub_1A15A93FC();
  swift_bridgeObjectRetain();
  sub_1A1332324((uint64_t)a1, v3);
  swift_bridgeObjectRelease();
  sub_1A15A93FC();
  sub_1A15A93F0();
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = v4 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1A15A8BC8();
      swift_bridgeObjectRelease();
      v7 += 16;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A1331BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_1A15A8934();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 == *(_QWORD *)(a2 + 16))
  {
    if (!v12 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16);
      v15 = v12 - 1;
      do
      {
        v16 = a1;
        v14(v11, a1 + v13, v4, v9);
        v17 = a2;
        ((void (*)(char *, unint64_t, uint64_t))v14)(v6, a2 + v13, v4);
        sub_1A12857D8(&qword_1EE5FF848, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0DB8], MEMORY[0x1E0CB0DD0]);
        v18 = sub_1A15A8B80();
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v6, v4);
        v19(v11, v4);
        v21 = v15-- != 0;
        if ((v18 & 1) == 0)
          break;
        v13 += v23;
        a2 = v17;
        a1 = v16;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1A1331D6C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1A15A9354(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_1A15A9354() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t RecognizeTextRequest.hashValue.getter()
{
  int *v0;
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9[4];
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v1 = *((_BYTE *)v0 + 4);
  v2 = *((_BYTE *)v0 + 5);
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_BYTE *)v0 + 16);
  v5 = *((_QWORD *)v0 + 3);
  v6 = *((_QWORD *)v0 + 8);
  v10 = *v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v7 = *((_OWORD *)v0 + 3);
  v16 = *((_OWORD *)v0 + 2);
  v17 = v7;
  v18 = v6;
  sub_1A15A93E4();
  RecognizeTextRequest.hash(into:)(v9);
  return sub_1A15A9420();
}

uint64_t sub_1A1331EB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A133216C();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A1331EDC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A13318CC();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A1331F1C(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A13318CC();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1331F5C(_BYTE *a1@<X8>)
{
  *a1 = -56;
}

uint64_t sub_1A1331F68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A13318CC();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1331F90()
{
  int *v0;
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9[4];
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v1 = *((_BYTE *)v0 + 4);
  v2 = *((_BYTE *)v0 + 5);
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_BYTE *)v0 + 16);
  v5 = *((_QWORD *)v0 + 3);
  v6 = *((_QWORD *)v0 + 8);
  v10 = *v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v7 = *((_OWORD *)v0 + 3);
  v16 = *((_OWORD *)v0 + 2);
  v17 = v7;
  v18 = v6;
  sub_1A15A93E4();
  RecognizeTextRequest.hash(into:)(v9);
  return sub_1A15A9420();
}

uint64_t sub_1A1332018()
{
  int *v0;
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9[4];
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v1 = *((_BYTE *)v0 + 4);
  v2 = *((_BYTE *)v0 + 5);
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_BYTE *)v0 + 16);
  v5 = *((_QWORD *)v0 + 3);
  v6 = *((_QWORD *)v0 + 8);
  v10 = *v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v7 = *((_OWORD *)v0 + 3);
  v16 = *((_OWORD *)v0 + 2);
  v17 = v7;
  v18 = v6;
  sub_1A15A93E4();
  RecognizeTextRequest.hash(into:)(v9);
  return sub_1A15A9420();
}

uint64_t sub_1A133209C()
{
  if (qword_1EE626FF0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A13320DC()
{
  return sub_1A15A8BB0();
}

uint64_t sub_1A1332100(uint64_t a1, uint64_t a2)
{
  sub_1A12B31EC();
  return sub_1A1377AB4(a1, a2);
}

void sub_1A133213C(uint64_t a1)
{
  sub_1A13325CC(a1);
}

size_t sub_1A1332150(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1A13321B0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

unint64_t sub_1A133216C()
{
  unint64_t result;

  result = qword_1EE5FF7C0;
  if (!qword_1EE5FF7C0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D48E8, &type metadata for RecognizeTextRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF7C0);
  }
  return result;
}

size_t sub_1A13321B0(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF780);
  v10 = *(_QWORD *)(sub_1A15A8934() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(sub_1A15A8934() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_1A1332324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v17[2];

  v4 = sub_1A15A8934();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF850);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v17[1] = a1;
  sub_1A15A93F0();
  if (v11)
  {
    v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v14(v10, v12, v4);
      v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0, 1, v4);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
      if ((_DWORD)result == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      sub_1A12857D8(&qword_1EE5FF858, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0DB8], MEMORY[0x1E0CB0DC8]);
      sub_1A15A8B44();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v12 += v13;
      if (!--v11)
        return v15(v10, 1, 1, v4);
    }
  }
  else
  {
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v15(v10, 1, 1, v4);
  }
  return result;
}

uint64_t _s6Vision20RecognizeTextRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  CGSize v9;
  CGPoint v10;
  CGSize v11;
  CGPoint v12;
  CGRect v13;
  CGRect v14;

  if (*(float *)a1 != *(float *)a2)
    return 0;
  if (((*(unsigned __int8 *)(a1 + 4) ^ *(unsigned __int8 *)(a2 + 4)) & 1) != 0)
    return 0;
  if (((*(unsigned __int8 *)(a1 + 5) ^ *(unsigned __int8 *)(a2 + 5)) & 1) != 0)
    return 0;
  v2 = *(_QWORD **)(a1 + 24);
  v11 = *(CGSize *)(a1 + 48);
  v12 = *(CGPoint *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD **)(a2 + 24);
  v9 = *(CGSize *)(a2 + 48);
  v10 = *(CGPoint *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a1 + 16);
  if ((sub_1A1331BE8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) == 0)
    return 0;
  if (((v6 ^ v7) & 1) == 0
    && (sub_1A1331D6C(v2, v4) & 1) != 0
    && (v14.origin = v12,
        v14.size = v11,
        v13.origin = v10,
        v13.size = v9,
        static NormalizedRect.== infix(_:_:)(&v14, &v13)))
  {
    return sub_1A12903B0(v3, v5);
  }
  else
  {
    return 0;
  }
}

void sub_1A13325CC(uint64_t a1)
{
  int *v1;
  int v3;
  void *ObjCClassFromMetadata;
  id v5;
  unsigned int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *);
  id v12;
  void (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  id v18;
  _BYTE v19[32];
  id v20[3];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1A128DB40(0, &qword_1EE5FF838);
  if (objc_msgSend(ObjCClassFromMetadata, sel_isSubclassOfClass_, swift_getObjCClassFromMetadata()))
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)VNRecognizeTextRequest), sel_init);
    v20[0] = 0;
    v6 = objc_msgSend(v5, sel_setRevision_error_, 3, v20);
    v7 = v20[0];
    if (v6)
    {
      v8 = sub_1A15A8BB0();
      v10 = v9;
      v21 = MEMORY[0x1E0DEB188];
      LODWORD(v20[0]) = v3;
      v11 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200);
      v12 = v7;
      v13 = (void (*)(_BYTE *, _QWORD))v11(v19);
      sub_1A128D188((uint64_t)v20, v8, v10);
      v13(v19, 0);
      v14 = sub_1A15A8BB0();
      v16 = v15;
      v21 = sub_1A128DB40(0, &qword_1EE5FF840);
      v20[0] = v5;
      v5 = v5;
      v17 = (void (*)(_BYTE *, _QWORD))v11(v19);
      sub_1A128D188((uint64_t)v20, v14, v16);
      v17(v19, 0);
    }
    else
    {
      v18 = v20[0];
      sub_1A15A8844();

      swift_willThrow();
    }

  }
}

unint64_t sub_1A13327C4()
{
  unint64_t result;

  result = qword_1EE5FF7C8;
  if (!qword_1EE5FF7C8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeTextRequest.Revision, &type metadata for RecognizeTextRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF7C8);
  }
  return result;
}

unint64_t sub_1A133280C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE5FF7D0;
  if (!qword_1EE5FF7D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF7D8);
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE5FF7D0);
  }
  return result;
}

unint64_t sub_1A133285C()
{
  unint64_t result;

  result = qword_1EE5FF7E0;
  if (!qword_1EE5FF7E0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeTextRequest.RecognitionLevel, &type metadata for RecognizeTextRequest.RecognitionLevel);
    atomic_store(result, (unint64_t *)&qword_1EE5FF7E0);
  }
  return result;
}

unint64_t sub_1A13328A0(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B31EC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A13328C4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6D2C();
  result = sub_1A13328F0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A13328F0()
{
  unint64_t result;

  result = qword_1EE5FF818;
  if (!qword_1EE5FF818)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeTextRequest, &type metadata for RecognizeTextRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF818);
  }
  return result;
}

unint64_t sub_1A1332938()
{
  unint64_t result;

  result = qword_1EE5FF820;
  if (!qword_1EE5FF820)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeTextRequest, &type metadata for RecognizeTextRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF820);
  }
  return result;
}

unint64_t sub_1A1332980()
{
  unint64_t result;

  result = qword_1EE5FF828;
  if (!qword_1EE5FF828)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeTextRequest.Revision, &type metadata for RecognizeTextRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF828);
  }
  return result;
}

uint64_t sub_1A13329C4()
{
  return sub_1A12857D8(&qword_1EE5FF830, (uint64_t (*)(uint64_t))type metadata accessor for RecognizedTextObservation, (uint64_t)&unk_1A15CAC1C);
}

unint64_t sub_1A13329F0(uint64_t a1)
{
  unint64_t result;

  result = sub_1A13318CC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for RecognizeTextRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RecognizeTextRequest(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RecognizeTextRequest(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RecognizeTextRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RecognizeTextRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecognizeTextRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecognizeTextRequest()
{
  return &type metadata for RecognizeTextRequest;
}

ValueMetadata *type metadata accessor for RecognizeTextRequest.Revision()
{
  return &type metadata for RecognizeTextRequest.Revision;
}

ValueMetadata *type metadata accessor for RecognizeTextRequest.RecognitionLevel()
{
  return &type metadata for RecognizeTextRequest.RecognitionLevel;
}

uint64_t _s6Vision20RecognizeTextRequestV16RecognitionLevelOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A1332D0C + 4 * byte_1A15D4605[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A1332D40 + 4 * byte_1A15D4600[v4]))();
}

uint64_t sub_1A1332D40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1332D48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1332D50);
  return result;
}

uint64_t sub_1A1332D5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1332D64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A1332D68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1332D70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecognizeTextRequest.RecognitionLevel.CodingKeys()
{
  return &type metadata for RecognizeTextRequest.RecognitionLevel.CodingKeys;
}

ValueMetadata *type metadata accessor for RecognizeTextRequest.RecognitionLevel.AccurateCodingKeys()
{
  return &type metadata for RecognizeTextRequest.RecognitionLevel.AccurateCodingKeys;
}

ValueMetadata *type metadata accessor for RecognizeTextRequest.RecognitionLevel.FastCodingKeys()
{
  return &type metadata for RecognizeTextRequest.RecognitionLevel.FastCodingKeys;
}

uint64_t _s6Vision20RecognizeTextRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1332DEC + 4 * byte_1A15D460A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1332E0C + 4 * byte_1A15D460F[v4]))();
}

_BYTE *sub_1A1332DEC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1332E0C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1332E14(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1332E1C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1332E24(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1332E2C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RecognizeTextRequest.Revision.CodingKeys()
{
  return &type metadata for RecognizeTextRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for RecognizeTextRequest.Revision.Revision3CodingKeys()
{
  return &type metadata for RecognizeTextRequest.Revision.Revision3CodingKeys;
}

unint64_t sub_1A1332E5C()
{
  unint64_t result;

  result = qword_1EE627AA0[0];
  if (!qword_1EE627AA0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4AC4, &type metadata for RecognizeTextRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE627AA0);
  }
  return result;
}

unint64_t sub_1A1332EA4()
{
  unint64_t result;

  result = qword_1EE627EB0[0];
  if (!qword_1EE627EB0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4C1C, &type metadata for RecognizeTextRequest.RecognitionLevel.CodingKeys);
    atomic_store(result, qword_1EE627EB0);
  }
  return result;
}

unint64_t sub_1A1332EEC()
{
  unint64_t result;

  result = qword_1EE627FC0;
  if (!qword_1EE627FC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4B3C, &type metadata for RecognizeTextRequest.RecognitionLevel.AccurateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE627FC0);
  }
  return result;
}

unint64_t sub_1A1332F34()
{
  unint64_t result;

  result = qword_1EE627FC8[0];
  if (!qword_1EE627FC8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4B64, &type metadata for RecognizeTextRequest.RecognitionLevel.AccurateCodingKeys);
    atomic_store(result, qword_1EE627FC8);
  }
  return result;
}

unint64_t sub_1A1332F7C()
{
  unint64_t result;

  result = qword_1EE628050;
  if (!qword_1EE628050)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4AEC, &type metadata for RecognizeTextRequest.RecognitionLevel.FastCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE628050);
  }
  return result;
}

unint64_t sub_1A1332FC4()
{
  unint64_t result;

  result = qword_1EE628058[0];
  if (!qword_1EE628058[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4B14, &type metadata for RecognizeTextRequest.RecognitionLevel.FastCodingKeys);
    atomic_store(result, qword_1EE628058);
  }
  return result;
}

unint64_t sub_1A133300C()
{
  unint64_t result;

  result = qword_1EE6280E0;
  if (!qword_1EE6280E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4B8C, &type metadata for RecognizeTextRequest.RecognitionLevel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6280E0);
  }
  return result;
}

unint64_t sub_1A1333054()
{
  unint64_t result;

  result = qword_1EE6280E8[0];
  if (!qword_1EE6280E8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4BB4, &type metadata for RecognizeTextRequest.RecognitionLevel.CodingKeys);
    atomic_store(result, qword_1EE6280E8);
  }
  return result;
}

unint64_t sub_1A133309C()
{
  unint64_t result;

  result = qword_1EE628170;
  if (!qword_1EE628170)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D49E4, &type metadata for RecognizeTextRequest.Revision.Revision3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE628170);
  }
  return result;
}

unint64_t sub_1A13330E4()
{
  unint64_t result;

  result = qword_1EE628178;
  if (!qword_1EE628178)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4A0C, &type metadata for RecognizeTextRequest.Revision.Revision3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE628178);
  }
  return result;
}

unint64_t sub_1A133312C()
{
  unint64_t result;

  result = qword_1EE628200;
  if (!qword_1EE628200)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4A34, &type metadata for RecognizeTextRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE628200);
  }
  return result;
}

unint64_t sub_1A1333174()
{
  unint64_t result;

  result = qword_1EE628208[0];
  if (!qword_1EE628208[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4A5C, &type metadata for RecognizeTextRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE628208);
  }
  return result;
}

uint64_t static ClassifyImageRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static ClassifyImageRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t ClassifyImageRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A13331F0()
{
  sub_1A13333CC();
  return sub_1A15A9474();
}

uint64_t sub_1A1333218()
{
  sub_1A13333CC();
  return sub_1A15A9480();
}

uint64_t sub_1A1333240()
{
  sub_1A1333410();
  return sub_1A15A9474();
}

uint64_t sub_1A1333268()
{
  sub_1A1333410();
  return sub_1A15A9480();
}

uint64_t ClassifyImageRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF868);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF870);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13333CC();
  sub_1A15A9468();
  sub_1A1333410();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A13333CC()
{
  unint64_t result;

  result = qword_1EE6282A8;
  if (!qword_1EE6282A8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D51DC, &type metadata for ClassifyImageRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6282A8);
  }
  return result;
}

unint64_t sub_1A1333410()
{
  unint64_t result;

  result = qword_1EE6282B0[0];
  if (!qword_1EE6282B0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D518C, &type metadata for ClassifyImageRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE6282B0);
  }
  return result;
}

uint64_t ClassifyImageRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t ClassifyImageRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF878);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF880);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13333CC();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for ClassifyImageRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A1333410();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A13336F0(_QWORD *a1)
{
  return ClassifyImageRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A1333704(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF868);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF870);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13333CC();
  sub_1A15A9468();
  sub_1A1333410();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double ClassifyImageRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  __n128 v8;
  double v9[7];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(&v8);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A1333DCC();
    sub_1A1377CDC((uint64_t)&type metadata for ClassifyImageRequest, v5, v6);
  }
  *(_BYTE *)a2 = 2;
  *(__n128 *)(a2 + 8) = v8;
  result = v9[0];
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v9;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 1;
  *(_QWORD *)(a2 + 72) = v4;
  return result;
}

uint64_t ClassifyImageRequest.supportedIdentifiers.getter()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  ValueMetadata *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  void *ObjCClassFromMetadata;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t v36;
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  v4 = (ValueMetadata *)*((_QWORD *)v0 + 3);
  v5 = *((_QWORD *)v0 + 4);
  v6 = *((_QWORD *)v0 + 5);
  v7 = v0[48];
  v8 = *((_QWORD *)v0 + 7);
  v9 = v0[64];
  v10 = *((_QWORD *)v0 + 9);
  type metadata accessor for Session();
  Session.__allocating_init()();
  LOBYTE(v35) = v1;
  *((_QWORD *)&v35 + 1) = v2;
  v36 = v3;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  v40 = v7;
  v41 = v8;
  v42 = v9;
  v43 = v10;
  v11 = sub_1A1333E10();
  v12 = swift_retain();
  sub_1A12F6948(v12, (uint64_t)&type metadata for ClassifyImageRequest, v11);
  v33 = v15;
  swift_release();
  sub_1A1333E54();
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for CoreSceneUnderstandingDetectorRecipient();
    v37 = &type metadata for ClassifyImageRequest;
    v38 = sub_1A1333E90();
    v16 = swift_allocObject();
    *(_QWORD *)&v35 = v16;
    *(_BYTE *)(v16 + 16) = v1;
    *(_QWORD *)(v16 + 24) = v2;
    *(_QWORD *)(v16 + 32) = v3;
    *(_QWORD *)(v16 + 40) = v4;
    *(_QWORD *)(v16 + 48) = v5;
    *(_QWORD *)(v16 + 56) = v6;
    *(_BYTE *)(v16 + 64) = v7;
    *(_QWORD *)(v16 + 72) = v8;
    *(_BYTE *)(v16 + 80) = v9;
    *(_QWORD *)(v16 + 88) = v10;
    swift_bridgeObjectRetain();
    v17 = sub_1A12866A4(&v35);
    v18 = objc_msgSend(objc_allocWithZone((Class)VNCoreSceneUnderstandingDetectorImageClassificationConfiguration), sel_initWithObservationsRecipient_, v17);
    if (v7)
      v6 = sub_1A15A879C();
    objc_msgSend(v18, sel_setMaximumLeafClassifications_, v6);
    if (v9)
      v8 = sub_1A15A879C();
    objc_msgSend(v18, sel_setMaximumHierarchicalClassifications_, v8);
    v19 = sub_1A15A8BB0();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD5E8);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1A15C5A00;
    *(_QWORD *)(v22 + 32) = v18;
    *(_QWORD *)&v35 = v22;
    sub_1A15A8C4C();
    v23 = v35;
    v37 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF8A8);
    *(_QWORD *)&v35 = v23;
    sub_1A12880A0(&v35, v34);
    v24 = v18;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1A128E3E8(v34, v19, v21, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    sub_1A128FDD0(v33);
    swift_bridgeObjectRelease();
    v27 = (void *)sub_1A15A8AD8();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v35 = 0;
    v28 = objc_msgSend(ObjCClassFromMetadata, sel_allClassificationIdentifiersWithConfigurationOptions_error_, v27, &v35);

    v29 = (void *)v35;
    if (v28)
    {
      v13 = sub_1A15A8C40();
      v30 = v29;

      swift_release();
      return v13;
    }
    v31 = (id)v35;
    v32 = (void *)sub_1A15A8844();

    swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  return MEMORY[0x1E0DEE9D8];
}

void ClassifyImageRequest.cropAndScaleAction.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ClassifyImageRequest.cropAndScaleAction.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ClassifyImageRequest.cropAndScaleAction.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

__n128 ClassifyImageRequest.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 ClassifyImageRequest.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*ClassifyImageRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A1333CF4()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A1333DCC();
  result = sub_1A1378184((uint64_t)&type metadata for ClassifyImageRequest, v0);
  qword_1EE628298 = result;
  return result;
}

uint64_t static ClassifyImageRequest.supportedRevisions.getter()
{
  if (qword_1EE628290 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void ClassifyImageRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ClassifyImageRequest.maximumLeafObservations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ClassifyImageRequest.maximumLeafObservations.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*ClassifyImageRequest.maximumLeafObservations.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t ClassifyImageRequest.maximumHierarchicalObservations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t ClassifyImageRequest.maximumHierarchicalObservations.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*ClassifyImageRequest.maximumHierarchicalObservations.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

unint64_t sub_1A1333DCC()
{
  unint64_t result;

  result = qword_1EE5FF888;
  if (!qword_1EE5FF888)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4FC4, &type metadata for ClassifyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF888);
  }
  return result;
}

unint64_t sub_1A1333E10()
{
  unint64_t result;

  result = qword_1EE5FF890;
  if (!qword_1EE5FF890)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4FFC, &type metadata for ClassifyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF890);
  }
  return result;
}

unint64_t sub_1A1333E54()
{
  unint64_t result;

  result = qword_1EE5FF898;
  if (!qword_1EE5FF898)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5FF898);
  }
  return result;
}

unint64_t sub_1A1333E90()
{
  unint64_t result;

  result = qword_1EE5FF8A0;
  if (!qword_1EE5FF8A0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D4FE0, &type metadata for ClassifyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF8A0);
  }
  return result;
}

uint64_t sub_1A1333ED4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

int *sub_1A1333EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF908);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(7, 0, 19);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(7, 0, 19);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(7, 0, 19);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for ClassifyImageRequest.Revision, v0 + 32);
  qword_1EE643798 = v0;
  return result;
}

uint64_t ClassifyImageRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(v1 + 48);
  v4 = *(unsigned __int8 *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  sub_1A12A1438();
  sub_1A15A8B44();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  if (v3 != 1)
  {
    sub_1A15A93FC();
    sub_1A15A93F0();
    if (!v4)
      goto LABEL_3;
LABEL_5:
    sub_1A15A93FC();
    goto LABEL_6;
  }
  sub_1A15A93FC();
  if (v4)
    goto LABEL_5;
LABEL_3:
  sub_1A15A93FC();
  sub_1A15A93F0();
LABEL_6:
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t ClassifyImageRequest.hashValue.getter()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v7[4];
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v1 = *((_QWORD *)v0 + 5);
  v2 = v0[48];
  v3 = *((_QWORD *)v0 + 7);
  v4 = v0[64];
  v5 = *((_QWORD *)v0 + 9);
  v8 = *v0;
  v9 = *(_OWORD *)(v0 + 8);
  v10 = *(_OWORD *)(v0 + 24);
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  sub_1A15A93E4();
  ClassifyImageRequest.hash(into:)(v7);
  return sub_1A15A9420();
}

uint64_t sub_1A133415C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1333E10();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A1334184@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A1333DCC();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A13341C4(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A1333DCC();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1334204(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1A133420C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1333DCC();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1334234()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v7[4];
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v1 = *((_QWORD *)v0 + 5);
  v2 = v0[48];
  v3 = *((_QWORD *)v0 + 7);
  v4 = v0[64];
  v5 = *((_QWORD *)v0 + 9);
  v8 = *v0;
  v9 = *(_OWORD *)(v0 + 8);
  v10 = *(_OWORD *)(v0 + 24);
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  sub_1A15A93E4();
  ClassifyImageRequest.hash(into:)(v7);
  return sub_1A15A9420();
}

uint64_t sub_1A13342B8()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v7[4];
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v1 = *((_QWORD *)v0 + 5);
  v2 = v0[48];
  v3 = *((_QWORD *)v0 + 7);
  v4 = v0[64];
  v5 = *((_QWORD *)v0 + 9);
  v8 = *v0;
  v9 = *(_OWORD *)(v0 + 8);
  v10 = *(_OWORD *)(v0 + 24);
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  sub_1A15A93E4();
  ClassifyImageRequest.hash(into:)(v7);
  return sub_1A15A9420();
}

uint64_t sub_1A1334338()
{
  if (qword_1EE6282A0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A1334378(uint64_t a1, uint64_t a2)
{
  sub_1A12B3888();
  return sub_1A1377AB4(a1, a2);
}

void sub_1A13343B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_BYTE *);
  id v14;
  void (*v15)(_BYTE *, _QWORD);
  _BYTE v16[32];
  _QWORD v17[4];

  v4 = *(_QWORD *)(v2 + 40);
  v5 = *(unsigned __int8 *)(v2 + 48);
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(unsigned __int8 *)(v2 + 64);
  v8 = objc_msgSend(objc_allocWithZone((Class)VNCoreSceneUnderstandingDetectorImageClassificationConfiguration), sel_initWithObservationsRecipient_, a2);
  if (v5 == 1)
    v4 = sub_1A15A879C();
  objc_msgSend(v8, sel_setMaximumLeafClassifications_, v4);
  if (v7)
    v6 = sub_1A15A879C();
  objc_msgSend(v8, sel_setMaximumHierarchicalClassifications_, v6);
  v9 = sub_1A15A8BB0();
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD5E8);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1A15C5A00;
  *(_QWORD *)(v12 + 32) = v8;
  v17[0] = v12;
  sub_1A15A8C4C();
  v17[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF8A8);
  v13 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200);
  v14 = v8;
  v15 = (void (*)(_BYTE *, _QWORD))v13(v16);
  sub_1A128D188((uint64_t)v17, v9, v11);
  v15(v16, 0);

}

uint64_t _s6Vision20ClassifyImageRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, char *a2)
{
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  char v23;
  CGRect v24;
  CGRect v25;

  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v5 = *(double *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *a2;
  v12 = *((double *)a2 + 1);
  v13 = *((double *)a2 + 2);
  v14 = *((double *)a2 + 3);
  v15 = *((double *)a2 + 4);
  v16 = *((_QWORD *)a2 + 5);
  v17 = a2[48];
  v18 = *((_QWORD *)a2 + 7);
  v19 = a2[64];
  v20 = *((_QWORD *)a2 + 9);
  LOBYTE(v25.origin.x) = *(_BYTE *)a1;
  LOBYTE(v24.origin.x) = v11;
  if ((static ImageCropAndScaleAction.== infix(_:_:)(&v25, &v24) & 1) == 0)
    return 0;
  v25.origin.x = v2;
  v25.origin.y = v3;
  v25.size.width = v4;
  v25.size.height = v5;
  v24.origin.x = v12;
  v24.origin.y = v13;
  v24.size.width = v14;
  v24.size.height = v15;
  if (!static NormalizedRect.== infix(_:_:)(&v25, &v24))
    return 0;
  if ((v7 & 1) != 0)
  {
    if (!v17)
      return 0;
  }
  else
  {
    if (v6 == v16)
      v21 = v17;
    else
      v21 = 1;
    if ((v21 & 1) != 0)
      return 0;
  }
  if ((v9 & 1) != 0)
  {
    if (!v19)
      return 0;
  }
  else
  {
    if (v8 == v18)
      v23 = v19;
    else
      v23 = 1;
    if ((v23 & 1) != 0)
      return 0;
  }
  return sub_1A12903B0(v10, v20);
}

unint64_t sub_1A133464C()
{
  unint64_t result;

  result = qword_1EE5FF8B0[0];
  if (!qword_1EE5FF8B0[0])
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for ClassifyImageRequest.Revision, &type metadata for ClassifyImageRequest.Revision);
    atomic_store(result, qword_1EE5FF8B0);
  }
  return result;
}

unint64_t sub_1A1334690(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B71F4();
  result = sub_1A13346BC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A13346BC()
{
  unint64_t result;

  result = qword_1EE5FF8E8;
  if (!qword_1EE5FF8E8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for ClassifyImageRequest, &type metadata for ClassifyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF8E8);
  }
  return result;
}

unint64_t sub_1A1334704()
{
  unint64_t result;

  result = qword_1EE5FF8F0;
  if (!qword_1EE5FF8F0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for ClassifyImageRequest, &type metadata for ClassifyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF8F0);
  }
  return result;
}

unint64_t sub_1A133474C()
{
  unint64_t result;

  result = qword_1EE5FF8F8;
  if (!qword_1EE5FF8F8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for ClassifyImageRequest.Revision, &type metadata for ClassifyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF8F8);
  }
  return result;
}

unint64_t sub_1A1334790(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B3888();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A13347B4(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1333E10();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A13347D8()
{
  return sub_1A12857D8(&qword_1EE5FF900, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&unk_1A15D58C8);
}

unint64_t sub_1A1334804(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1333DCC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeWithCopy for ClassifyImageRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClassifyImageRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClassifyImageRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ClassifyImageRequest()
{
  return &type metadata for ClassifyImageRequest;
}

ValueMetadata *type metadata accessor for ClassifyImageRequest.Revision()
{
  return &type metadata for ClassifyImageRequest.Revision;
}

uint64_t _s6Vision20ClassifyImageRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A13349D8 + 4 * byte_1A15D4DE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A13349F8 + 4 * byte_1A15D4DE5[v4]))();
}

_BYTE *sub_1A13349D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A13349F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1334A00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1334A08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1334A10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1334A18(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClassifyImageRequest.Revision.CodingKeys()
{
  return &type metadata for ClassifyImageRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for ClassifyImageRequest.Revision.Revision2CodingKeys()
{
  return &type metadata for ClassifyImageRequest.Revision.Revision2CodingKeys;
}

unint64_t sub_1A1334A48()
{
  unint64_t result;

  result = qword_1EE628B40[0];
  if (!qword_1EE628B40[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5164, &type metadata for ClassifyImageRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE628B40);
  }
  return result;
}

unint64_t sub_1A1334A90()
{
  unint64_t result;

  result = qword_1EE628C50;
  if (!qword_1EE628C50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5084, &type metadata for ClassifyImageRequest.Revision.Revision2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE628C50);
  }
  return result;
}

unint64_t sub_1A1334AD8()
{
  unint64_t result;

  result = qword_1EE628C58[0];
  if (!qword_1EE628C58[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D50AC, &type metadata for ClassifyImageRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE628C58);
  }
  return result;
}

unint64_t sub_1A1334B20()
{
  unint64_t result;

  result = qword_1EE628CE0;
  if (!qword_1EE628CE0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D50D4, &type metadata for ClassifyImageRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE628CE0);
  }
  return result;
}

unint64_t sub_1A1334B68()
{
  unint64_t result;

  result = qword_1EE628CE8[0];
  if (!qword_1EE628CE8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D50FC, &type metadata for ClassifyImageRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE628CE8);
  }
  return result;
}

BOOL sub_1A1334BB0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t sub_1A1334BE0()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  sub_1A15A93F0();
  sub_1A15A9408();
  return sub_1A15A9420();
}

uint64_t sub_1A1334C48()
{
  sub_1A15A93F0();
  sub_1A15A93F0();
  return sub_1A15A9408();
}

uint64_t sub_1A1334C8C()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  sub_1A15A93F0();
  sub_1A15A9408();
  return sub_1A15A9420();
}

void CoreMLModelContainer.init(model:featureProvider:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  unsigned int v27;
  uint64_t v28;

  v3 = objc_msgSend(a1, sel_modelDescription);
  v4 = objc_msgSend(v3, sel_inputDescriptionsByName);

  sub_1A128DB40(0, (unint64_t *)&unk_1EE5FF910);
  v5 = sub_1A15A8AF0();

  v6 = v5 + 64;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  while (v9)
  {
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v13 = v12 | (v11 << 6);
LABEL_25:
    v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v13);
    swift_bridgeObjectRetain();
    v21 = v20;
    if (objc_msgSend(v21, sel_type) == (id)4)
    {
      v22 = objc_msgSend(v21, sel_imageConstraint);

      if (v22)
      {
        swift_release();
        swift_bridgeObjectRelease();
        v23 = objc_msgSend(v21, sel_imageConstraint);
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, sel_pixelsWide);
          v26 = objc_msgSend(v24, sel_pixelsHigh);
          v27 = objc_msgSend(v24, sel_pixelFormatType);

          *(_QWORD *)a3 = v18;
          *(_QWORD *)(a3 + 8) = v19;
          *(_QWORD *)(a3 + 16) = v25;
          *(_QWORD *)(a3 + 24) = v26;
          *(_DWORD *)(a3 + 32) = v27;
          *(_QWORD *)(a3 + 40) = a2;
          *(_QWORD *)(a3 + 48) = a1;
          return;
        }

        goto LABEL_31;
      }
    }

    swift_bridgeObjectRelease();
  }
  v14 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v14 >= v10)
    goto LABEL_29;
  v15 = *(_QWORD *)(v6 + 8 * v14);
  ++v11;
  if (v15)
    goto LABEL_24;
  v11 = v14 + 1;
  if (v14 + 1 >= v10)
    goto LABEL_29;
  v15 = *(_QWORD *)(v6 + 8 * v11);
  if (v15)
    goto LABEL_24;
  v11 = v14 + 2;
  if (v14 + 2 >= v10)
    goto LABEL_29;
  v15 = *(_QWORD *)(v6 + 8 * v11);
  if (v15)
    goto LABEL_24;
  v11 = v14 + 3;
  if (v14 + 3 >= v10)
    goto LABEL_29;
  v15 = *(_QWORD *)(v6 + 8 * v11);
  if (v15)
    goto LABEL_24;
  v11 = v14 + 4;
  if (v14 + 4 >= v10)
    goto LABEL_29;
  v15 = *(_QWORD *)(v6 + 8 * v11);
  if (v15)
  {
LABEL_24:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_25;
  }
  v16 = v14 + 5;
  if (v16 >= v10)
  {
LABEL_29:
    swift_release();
LABEL_31:
    swift_bridgeObjectRelease();
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v28 = 0xD00000000000003BLL;
    *(_QWORD *)(v28 + 8) = 0x80000001A15FD950;
    *(_BYTE *)(v28 + 16) = 5;
    swift_willThrow();

    swift_unknownObjectRelease();
    return;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_24;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v10)
      goto LABEL_29;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_24;
  }
LABEL_33:
  __break(1u);
}

uint64_t CoreMLModelContainer.inputImageFeatureName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CoreMLModelContainer.inputImageFeatureName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CoreMLModelContainer.inputImageFeatureName.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

size_t sub_1A13350A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  size_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = sub_1A15A8A84();
  v2 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)&v3 = MEMORY[0x1E0C80A78](v1).n128_u64[0];
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*(id *)(v0 + 48), sel_configuration, v3);
  v7 = objc_msgSend(v6, sel_computeUnits);

  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, sel_computeDevicesOfTypes_, objc_msgSend(v8, sel_computeDeviceTypesForMLComputeUnits_, v7));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF920);
  v10 = sub_1A15A8C40();

  if (!(v10 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v11 = sub_1A15A91B0();
  swift_bridgeObjectRelease();
  if (!v11)
    goto LABEL_13;
LABEL_3:
  v18 = MEMORY[0x1E0DEE9D8];
  result = sub_1A12F730C(0, v11 & ~(v11 >> 63), 0);
  if ((v11 & 0x8000000000000000) == 0)
  {
    v13 = 0;
    v14 = v18;
    do
    {
      if ((v10 & 0xC000000000000001) != 0)
        MEMORY[0x1A1B09470](v13, v10);
      else
        swift_unknownObjectRetain();
      sub_1A15A8A78();
      v18 = v14;
      v16 = *(_QWORD *)(v14 + 16);
      v15 = *(_QWORD *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1A12F730C(v15 > 1, v16 + 1, 1);
        v14 = v18;
      }
      ++v13;
      *(_QWORD *)(v14 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v14+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v16, v5, v1);
    }
    while (v11 != v13);
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  return result;
}

void CoreMLModelContainer.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;

  v2 = v1;
  v5 = *(void **)(v2 + 40);
  v4 = *(void **)(v2 + 48);
  sub_1A15A93F0();
  sub_1A15A93F0();
  sub_1A15A9408();
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  if (v5)
  {
    v6 = objc_msgSend(v5, sel_featureNames);
    v7 = sub_1A15A8E50();

    sub_1A15A93FC();
    swift_bridgeObjectRetain();
    sub_1A13366E4(a1, v7);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_1A15A93FC();
  }
  v8 = objc_msgSend(v4, sel_configuration);
  sub_1A15A900C();

}

uint64_t CoreMLModelContainer.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[11];
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_DWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6[9] = *(_QWORD *)v0;
  v6[10] = v1;
  v7 = *(_OWORD *)(v0 + 16);
  v8 = v2;
  v9 = v3;
  v10 = v4;
  sub_1A15A93E4();
  CoreMLModelContainer.hash(into:)((uint64_t)v6);
  return sub_1A15A9420();
}

uint64_t sub_1A1335468()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[11];
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_DWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6[9] = *(_QWORD *)v0;
  v6[10] = v1;
  v7 = *(_OWORD *)(v0 + 16);
  v8 = v2;
  v9 = v3;
  v10 = v4;
  sub_1A15A93E4();
  CoreMLModelContainer.hash(into:)((uint64_t)v6);
  return sub_1A15A9420();
}

uint64_t sub_1A13354CC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[11];
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_DWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6[9] = *(_QWORD *)v0;
  v6[10] = v1;
  v7 = *(_OWORD *)(v0 + 16);
  v8 = v2;
  v9 = v3;
  v10 = v4;
  sub_1A15A93E4();
  CoreMLModelContainer.hash(into:)((uint64_t)v6);
  return sub_1A15A9420();
}

uint64_t static CoreMLRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static CoreMLRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t CoreMLRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A133555C()
{
  sub_1A1336C98();
  return sub_1A15A9474();
}

uint64_t sub_1A1335584()
{
  sub_1A1336C98();
  return sub_1A15A9480();
}

uint64_t sub_1A13355AC()
{
  sub_1A1336CDC();
  return sub_1A15A9474();
}

uint64_t sub_1A13355D4()
{
  sub_1A1336CDC();
  return sub_1A15A9480();
}

uint64_t CoreMLRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF928);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF930);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1336C98();
  sub_1A15A9468();
  sub_1A1336CDC();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t CoreMLRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t CoreMLRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF938);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FF940);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1336C98();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for CoreMLRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A1336CDC();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A13359D4(_QWORD *a1)
{
  return CoreMLRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A13359E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF928);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF930);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1336C98();
  sub_1A15A9468();
  sub_1A1336CDC();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double CoreMLRequest.init(model:_:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double result;
  __n128 v10;
  __int128 v11;
  __n128 v12[2];

  v11 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  v5 = *((_DWORD *)a1 + 8);
  v6 = *((_QWORD *)a1 + 5);
  v7 = *((_QWORD *)a1 + 6);
  static NormalizedRect.fullImage.getter(v12);
  v8 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  *(_BYTE *)(a2 + 56) = 2;
  result = v12[0].n128_f64[0];
  v10 = v12[1];
  *(__n128 *)(a2 + 64) = v12[0];
  *(__n128 *)(a2 + 80) = v10;
  *(_QWORD *)(a2 + 96) = v8;
  return result;
}

uint64_t CoreMLRequest.modelContainer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(void **)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_DWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  swift_unknownObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

_QWORD *CoreMLRequest.supportedIdentifiers.getter()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _BYTE v13[32];
  _BYTE v14[32];
  _QWORD *v15;

  v1 = objc_msgSend(*(id *)(v0 + 48), sel_modelDescription);
  v2 = objc_msgSend(v1, sel_classLabels);

  if (v2)
  {
    v3 = sub_1A15A8C40();

    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      sub_1A12FE11C(0, v4, 0);
      v5 = v3 + 32;
      v2 = v15;
      do
      {
        sub_1A128E764(v5, (uint64_t)v14);
        sub_1A128E764((uint64_t)v14, (uint64_t)v13);
        v6 = sub_1A15A8BBC();
        v8 = v7;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1A12FE11C(0, v2[2] + 1, 1);
          v2 = v15;
        }
        v10 = v2[2];
        v9 = v2[3];
        if (v10 >= v9 >> 1)
        {
          sub_1A12FE11C((char *)(v9 > 1), v10 + 1, 1);
          v2 = v15;
        }
        v2[2] = v10 + 1;
        v11 = &v2[2 * v10];
        v11[4] = v6;
        v11[5] = v8;
        v5 += 32;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
  }
  return v2;
}

void CoreMLRequest.cropAndScaleAction.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

_BYTE *CoreMLRequest.cropAndScaleAction.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = *result;
  return result;
}

uint64_t (*CoreMLRequest.cropAndScaleAction.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

__n128 CoreMLRequest.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 80);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 CoreMLRequest.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 80) = v3;
  return result;
}

uint64_t (*CoreMLRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

unint64_t CoreMLRequest.supportedComputeStageDevices.getter()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FF950);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A15C3FE0;
  *(_BYTE *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = sub_1A13350A8();
  return sub_1A12F6B54(inited);
}

uint64_t sub_1A1335E78()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A133773C();
  result = sub_1A1378184((uint64_t)&type metadata for CoreMLRequest, v0);
  qword_1EE628D78 = result;
  return result;
}

uint64_t static CoreMLRequest.supportedRevisions.getter()
{
  if (qword_1EE628D70 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void CoreMLRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

void sub_1A1335EFC()
{
  qword_1EE6437A0 = MEMORY[0x1E0DEE9D8];
}

uint64_t CoreMLRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 96);
  CoreMLModelContainer.hash(into:)((uint64_t)a1);
  sub_1A12A1438();
  sub_1A15A8B44();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t CoreMLRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 96);
  sub_1A15A93E4();
  CoreMLModelContainer.hash(into:)((uint64_t)v3);
  sub_1A12A1438();
  sub_1A15A8B44();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

__n128 sub_1A1336104@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 80);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1A1336110(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 80) = v3;
  return result;
}

unint64_t sub_1A133611C()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FF950);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A15C3FE0;
  *(_BYTE *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = sub_1A13350A8();
  return sub_1A12F6B54(inited);
}

uint64_t sub_1A13361B0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A133773C();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A13361F0(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A133773C();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1336230(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_1A133623C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A133773C();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A133626C()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 96);
  sub_1A15A93E4();
  CoreMLModelContainer.hash(into:)((uint64_t)v3);
  sub_1A12A1438();
  sub_1A15A8B44();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A133637C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A1336384(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t (*sub_1A13363AC())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A13363BC()
{
  if (qword_1EE628D80 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A13363FC()
{
  return 2;
}

uint64_t sub_1A133640C(uint64_t a1, uint64_t a2)
{
  sub_1A12B3808();
  return sub_1A1377AB4(a1, a2);
}

uint64_t sub_1A1336444(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v30)
            return 1;
          v11 = *(_QWORD *)(v29 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    sub_1A15A93E4();
    swift_bridgeObjectRetain();
    sub_1A15A8BC8();
    v18 = sub_1A15A9420();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_1A15A9354() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_1A15A9354() & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1A13366E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;

  sub_1A15A9420();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_1A15A93F0();
    }
    v13 = *(_QWORD *)(v3 + 8 * v10);
    if (!v13)
      break;
LABEL_16:
    v6 = (v13 - 1) & v13;
LABEL_5:
    sub_1A15A93E4();
    swift_bridgeObjectRetain();
    sub_1A15A8BC8();
    v11 = sub_1A15A9420();
    result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  v14 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v13 = *(_QWORD *)(v3 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void _s6Vision20CoreMLModelContainerV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  char v27;
  uint64_t v28;
  int64_t v29;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
  {
    return;
  }
  v5 = *(void **)(a2 + 40);
  v4 = *(void **)(a2 + 48);
  v6 = *(void **)(a1 + 40);
  v7 = objc_msgSend(*(id *)(a1 + 48), sel_modelDescription);
  v8 = objc_msgSend(v4, sel_modelDescription);
  sub_1A128DB40(0, &qword_1EE5FFA98);
  LOBYTE(v4) = sub_1A15A9000();

  if ((v4 & 1) == 0 || !v6 || !v5)
    return;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9 = objc_msgSend(v6, sel_featureNames);
  v10 = sub_1A15A8E50();

  v11 = objc_msgSend(v5, sel_featureNames);
  v12 = sub_1A15A8E50();

  LOBYTE(v11) = sub_1A1336444(v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    swift_unknownObjectRelease();
LABEL_42:
    swift_unknownObjectRelease();
    return;
  }
  v13 = objc_msgSend(v6, sel_featureNames);
  v14 = sub_1A15A8E50();

  v15 = 0;
  v28 = v14 + 56;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v14 + 56);
  v29 = (unint64_t)(v16 + 63) >> 6;
  while (v18)
  {
    v18 &= v18 - 1;
LABEL_33:
    swift_bridgeObjectRetain();
    v22 = (void *)sub_1A15A8B8C();
    v23 = objc_msgSend(v6, sel_featureValueForName_, v22);

    v24 = (void *)sub_1A15A8B8C();
    swift_bridgeObjectRelease();
    v25 = objc_msgSend(v5, sel_featureValueForName_, v24);

    if (v23)
    {
      if (!v25)
      {
        swift_unknownObjectRelease();
        swift_release();

        goto LABEL_42;
      }
      sub_1A128DB40(0, (unint64_t *)&unk_1EE5FFAA0);
      v26 = v23;
      v27 = sub_1A15A9000();

      if ((v27 & 1) == 0)
      {
        swift_unknownObjectRelease();
        swift_release();
        goto LABEL_42;
      }
    }
    else if (v25)
    {
      swift_unknownObjectRelease();
      swift_release();

      goto LABEL_42;
    }
  }
  v19 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v19 >= v29)
    goto LABEL_39;
  v20 = *(_QWORD *)(v28 + 8 * v19);
  ++v15;
  if (v20)
    goto LABEL_32;
  v15 = v19 + 1;
  if (v19 + 1 >= v29)
    goto LABEL_39;
  v20 = *(_QWORD *)(v28 + 8 * v15);
  if (v20)
    goto LABEL_32;
  v15 = v19 + 2;
  if (v19 + 2 >= v29)
    goto LABEL_39;
  v20 = *(_QWORD *)(v28 + 8 * v15);
  if (v20)
  {
LABEL_32:
    v18 = (v20 - 1) & v20;
    goto LABEL_33;
  }
  v21 = v19 + 3;
  if (v21 >= v29)
  {
LABEL_39:
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    return;
  }
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_32;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v29)
      goto LABEL_39;
    v20 = *(_QWORD *)(v28 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_32;
  }
LABEL_45:
  __break(1u);
}

unint64_t sub_1A1336C98()
{
  unint64_t result;

  result = qword_1EE628D88;
  if (!qword_1EE628D88)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D56FC, &type metadata for CoreMLRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE628D88);
  }
  return result;
}

unint64_t sub_1A1336CDC()
{
  unint64_t result;

  result = qword_1EE628D90[0];
  if (!qword_1EE628D90[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D56AC, &type metadata for CoreMLRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE628D90);
  }
  return result;
}

uint64_t _s6Vision13CoreMLRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  CGFloat v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t v11;
  CGFloat v12;
  CGFloat v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  uint64_t v22;
  char v23;
  CGRect v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  CGRect v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(double *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v7 = *(double *)(a1 + 64);
  v8 = *(double *)(a1 + 72);
  v9 = *(double *)(a1 + 80);
  v10 = *(double *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(double *)a2;
  v13 = *(double *)(a2 + 8);
  v14 = *(_DWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_BYTE *)(a2 + 56);
  v18 = *(double *)(a2 + 64);
  v19 = *(double *)(a2 + 72);
  v20 = *(double *)(a2 + 80);
  v21 = *(double *)(a2 + 88);
  v22 = *(_QWORD *)(a2 + 96);
  v29.origin.x = *(CGFloat *)a1;
  v29.origin.y = v2;
  v29.size = *(CGSize *)(a1 + 16);
  v30 = v3;
  v31 = v4;
  v32 = v5;
  v25.origin.x = v12;
  v25.origin.y = v13;
  v25.size = *(CGSize *)(a2 + 16);
  v26 = v14;
  v27 = v15;
  v28 = v16;
  _s6Vision20CoreMLModelContainerV2eeoiySbAC_ACtFZ_0((uint64_t)&v29, (uint64_t)&v25);
  if ((v23 & 1) == 0)
    return 0;
  LOBYTE(v29.origin.x) = v6;
  LOBYTE(v25.origin.x) = v17;
  if ((static ImageCropAndScaleAction.== infix(_:_:)(&v29, &v25) & 1) == 0)
    return 0;
  v29.origin.x = v7;
  v29.origin.y = v8;
  v29.size.width = v9;
  v29.size.height = v10;
  v25.origin.x = v18;
  v25.origin.y = v19;
  v25.size.width = v20;
  v25.size.height = v21;
  if (static NormalizedRect.== infix(_:_:)(&v29, &v25))
    return sub_1A12903B0(v11, v22);
  else
    return 0;
}

unint64_t sub_1A1336E44()
{
  unint64_t result;

  result = qword_1EE5FF968;
  if (!qword_1EE5FF968)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5248, &type metadata for CoreMLModelContainer.InputImage);
    atomic_store(result, (unint64_t *)&qword_1EE5FF968);
  }
  return result;
}

unint64_t sub_1A1336E90()
{
  unint64_t result;

  result = qword_1EE5FF978;
  if (!qword_1EE5FF978)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CoreMLRequest.Revision, &type metadata for CoreMLRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF978);
  }
  return result;
}

unint64_t sub_1A1336ED4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B71B0();
  result = sub_1A1336F00();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A1336F00()
{
  unint64_t result;

  result = qword_1EE5FF9C0;
  if (!qword_1EE5FF9C0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CoreMLRequest, &type metadata for CoreMLRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FF9C0);
  }
  return result;
}

unint64_t sub_1A1336F4C()
{
  unint64_t result;

  result = qword_1EE5FF9D0;
  if (!qword_1EE5FF9D0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CoreMLRequest.Revision, &type metadata for CoreMLRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FF9D0);
  }
  return result;
}

unint64_t sub_1A1336F90(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B3808();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void destroy for CoreMLModelContainer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

}

uint64_t initializeWithCopy for CoreMLModelContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for CoreMLModelContainer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = *(void **)(a2 + 48);
  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for CoreMLModelContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  v5 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for CoreMLModelContainer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreMLModelContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreMLModelContainer()
{
  return &type metadata for CoreMLModelContainer;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CoreMLModelContainer.InputImage(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CoreMLModelContainer.InputImage(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CoreMLModelContainer.InputImage()
{
  return &type metadata for CoreMLModelContainer.InputImage;
}

uint64_t destroy for CoreMLRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CoreMLRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  __int128 v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v6 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CoreMLRequest(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = *(void **)(a2 + 48);
  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for CoreMLRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  v5 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreMLRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreMLRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreMLRequest()
{
  return &type metadata for CoreMLRequest;
}

ValueMetadata *type metadata accessor for CoreMLRequest.Revision()
{
  return &type metadata for CoreMLRequest.Revision;
}

uint64_t _s6Vision13CoreMLRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1337568 + 4 * byte_1A15D5230[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1337588 + 4 * byte_1A15D5235[v4]))();
}

_BYTE *sub_1A1337568(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1337588(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1337590(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1337598(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A13375A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A13375A8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CoreMLRequest.Revision.CodingKeys()
{
  return &type metadata for CoreMLRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for CoreMLRequest.Revision.Revision1CodingKeys()
{
  return &type metadata for CoreMLRequest.Revision.Revision1CodingKeys;
}

unint64_t sub_1A13375D8()
{
  unint64_t result;

  result = qword_1EE629720[0];
  if (!qword_1EE629720[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5684, &type metadata for CoreMLRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE629720);
  }
  return result;
}

unint64_t sub_1A1337620()
{
  unint64_t result;

  result = qword_1EE629830;
  if (!qword_1EE629830)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D55A4, &type metadata for CoreMLRequest.Revision.Revision1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE629830);
  }
  return result;
}

unint64_t sub_1A1337668()
{
  unint64_t result;

  result = qword_1EE629838[0];
  if (!qword_1EE629838[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D55CC, &type metadata for CoreMLRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE629838);
  }
  return result;
}

unint64_t sub_1A13376B0()
{
  unint64_t result;

  result = qword_1EE6298C0;
  if (!qword_1EE6298C0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D55F4, &type metadata for CoreMLRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6298C0);
  }
  return result;
}

unint64_t sub_1A13376F8()
{
  unint64_t result;

  result = qword_1EE6298C8[0];
  if (!qword_1EE6298C8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D561C, &type metadata for CoreMLRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE6298C8);
  }
  return result;
}

unint64_t sub_1A133773C()
{
  unint64_t result;

  result = qword_1EE5FFA40;
  if (!qword_1EE5FFA40)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D54E0, &type metadata for CoreMLRequest);
    atomic_store(result, (unint64_t *)&qword_1EE5FFA40);
  }
  return result;
}

uint64_t sub_1A1337784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = sub_1A15A8BB0();
  v5[3] = MEMORY[0x1E0DEBB98];
  v5[0] = a1;
  return sub_1A128D188((uint64_t)v5, v2, v3);
}

void sub_1A13377E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  id v44;
  int64_t v45;
  __int128 v46;
  uint64_t v47;

  v3 = sub_1A15A8A84();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FFAC0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v38 - v11;
  if (!a1)
  {
    v36 = sub_1A15A8BB0();
    sub_1A128DE28(v36, v37, &v46);
    swift_bridgeObjectRelease();
    sub_1A128DB78((uint64_t)&v46, (uint64_t *)&unk_1EE5FFAB0);
    return;
  }
  v40 = v1;
  v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
  v45 = 0;
  v43 = a1;
  v15 = *(_QWORD *)(a1 + 64);
  v14 = a1 + 64;
  v13 = v15;
  v16 = 1 << *(_BYTE *)(v14 - 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v13;
  v41 = v14;
  v42 = (unint64_t)(v16 + 63) >> 6;
  v39 = v42 - 1;
  if ((v17 & v13) == 0)
    goto LABEL_9;
LABEL_7:
  v23 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v24 = v23 | (v45 << 6);
  while (2)
  {
    v25 = *(_QWORD *)(v43 + 56);
    *v10 = *(_BYTE *)(*(_QWORD *)(v43 + 48) + v24);
    v26 = v25 + *(_QWORD *)(v4 + 72) * v24;
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FFA50);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v10[*(int *)(v27 + 48)], v26, v3);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v10, 0, 1, v27);
    while (1)
    {
      sub_1A12B446C((uint64_t)v10, (uint64_t)v12, (uint64_t *)&unk_1EE5FFAC0);
      v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FFA50);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v12, 1, v32) == 1)
      {
        swift_release();
        v33 = sub_1A15A8BB0();
        v35 = v34;
        v47 = sub_1A128DB40(0, (unint64_t *)&unk_1EE5FFAD0);
        *(_QWORD *)&v46 = v44;
        sub_1A128D188((uint64_t)&v46, v33, v35);
        return;
      }
      v19 = *v12;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, &v12[*(int *)(v32 + 48)], v3);
      LOBYTE(v46) = v19;
      v20 = sub_1A12A58B8();
      v21 = sub_1A15A8A6C();
      *(_QWORD *)&v46 = v20;
      type metadata accessor for VNComputeStage();
      v22 = v20;
      swift_unknownObjectRetain();
      objc_msgSend(v44, sel___swift_setObject_forKeyedSubscript_, v21, sub_1A15A9378());

      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

      if (v18)
        goto LABEL_7;
LABEL_9:
      v28 = v45 + 1;
      if (__OFADD__(v45, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v28 < v42)
      {
        v29 = *(_QWORD *)(v41 + 8 * v28);
        if (v29)
          goto LABEL_12;
        v30 = v45 + 2;
        ++v45;
        if (v28 + 1 < v42)
        {
          v29 = *(_QWORD *)(v41 + 8 * v30);
          if (v29)
            goto LABEL_15;
          v45 = v28 + 1;
          if (v28 + 2 < v42)
          {
            v29 = *(_QWORD *)(v41 + 8 * (v28 + 2));
            if (v29)
            {
              v28 += 2;
              goto LABEL_12;
            }
            v30 = v28 + 3;
            v45 = v28 + 2;
            if (v28 + 3 < v42)
              break;
          }
        }
      }
LABEL_26:
      v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FFA50);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v10, 1, 1, v31);
      v18 = 0;
    }
    v29 = *(_QWORD *)(v41 + 8 * v30);
    if (v29)
    {
LABEL_15:
      v28 = v30;
LABEL_12:
      v18 = (v29 - 1) & v29;
      v24 = __clz(__rbit64(v29)) + (v28 << 6);
      v45 = v28;
      continue;
    }
    break;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v42)
    {
      v45 = v39;
      goto LABEL_26;
    }
    v29 = *(_QWORD *)(v41 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_12;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_1A1337C28(unsigned __int8 a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;

  v2 = a1;
  v4 = sub_1A15A8BB0();
  if (v2 == 2)
  {
    v6 = 0u;
    v7 = 0u;
  }
  else
  {
    *((_QWORD *)&v7 + 1) = MEMORY[0x1E0DEAFA0];
    LOBYTE(v6) = a1 & 1;
  }
  return sub_1A128D188((uint64_t)&v6, v4, v3);
}

uint64_t sub_1A1337CA8(uint64_t a1)
{
  return sub_1A1338244(a1, (uint64_t)&VNDetectorOption_OriginatingRequestSpecifier, (unint64_t *)&qword_1EE5FD4D8);
}

uint64_t sub_1A1337CC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  v2 = sub_1A15A8BB0();
  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_1A128DC1C(v2, v3), (v5 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_1A128E764(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_13:
    sub_1A128DB78((uint64_t)&v10, (uint64_t *)&unk_1EE5FFAB0);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FFAE0);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
    return 0;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1A15A91B0();
    result = swift_bridgeObjectRelease();
    if (!v7)
      goto LABEL_11;
  }
  else
  {
    v7 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x1A1B09470](0);
    goto LABEL_10;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(id *)(v9 + 32);
LABEL_10:
    v7 = (uint64_t)v8;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void sub_1A1337E10(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;

  if (!a1)
    goto LABEL_23;
  v3 = sub_1A15A8BB0();
  v5 = v4;
  v6 = *v1;
  if (!*(_QWORD *)(v6 + 16))
  {
    v21 = 0u;
    v22 = 0u;
    v12 = a1;
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v7 = v3;
  v8 = a1;
  v9 = sub_1A128DC1C(v7, v5);
  if ((v10 & 1) == 0)
  {
    v21 = 0u;
    v22 = 0u;
    goto LABEL_15;
  }
  sub_1A128E764(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_16:
    sub_1A128DB78((uint64_t)&v21, (uint64_t *)&unk_1EE5FFAB0);
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FFAE0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      v18 = sub_1A15A91B0();
      swift_bridgeObjectRelease();
      if (v18 != 1)
        goto LABEL_23;
      swift_bridgeObjectRetain();
      v19 = sub_1A15A91B0();
      swift_bridgeObjectRelease();
      if (!v19)
      {
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_21;
      }
    }
    else if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
    {
      goto LABEL_23;
    }
    if ((v20 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_23;
      }
      v11 = *(_QWORD *)(v20 + 32);
      goto LABEL_11;
    }
LABEL_21:
    v11 = MEMORY[0x1A1B09470](0);
    swift_unknownObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    if ((id)v11 == v8)
    {

      return;
    }
    while (1)
    {
LABEL_23:
      sub_1A15A91A4();
      __break(1u);
    }
  }
LABEL_17:
  v13 = sub_1A15A8BB0();
  v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD5E8);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1A15C5A00;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)&v21 = v16;
  sub_1A15A8C4C();
  v17 = v21;
  *((_QWORD *)&v22 + 1) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FFAE0);
  *(_QWORD *)&v21 = v17;
  sub_1A128D188((uint64_t)&v21, v13, v15);

}

uint64_t sub_1A13380E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v2 = sub_1A15A8BB0();
  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_1A128DC1C(v2, v3), (v5 & 1) == 0))
  {
    v8 = 0u;
    v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1A128E764(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_7:
    sub_1A128DB78((uint64_t)&v8, (uint64_t *)&unk_1EE5FFAB0);
    return 0;
  }
  if ((swift_dynamicCast() & 1) != 0)
    return v7;
  return 0;
}

uint64_t sub_1A13381A8(uint64_t a1, char a2)
{
  return sub_1A13381B4(a1, a2);
}

uint64_t sub_1A13381B4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;

  v5 = sub_1A15A8BB0();
  if ((a2 & 1) != 0)
  {
    a1 = 0;
    v7[1] = 0;
    v7[2] = 0;
    v8 = 0;
  }
  else
  {
    v8 = MEMORY[0x1E0DEBB98];
  }
  v7[0] = a1;
  return sub_1A128D188((uint64_t)v7, v5, v4);
}

uint64_t sub_1A1338228(uint64_t a1)
{
  return sub_1A1338244(a1, (uint64_t)VNDetectorProcessOption_Canceller, &qword_1EE5FFAF8);
}

uint64_t sub_1A1338244(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;

  v5 = sub_1A15A8BB0();
  v7 = v6;
  if (a1)
  {
    *((_QWORD *)&v10 + 1) = sub_1A128DB40(0, a3);
    *(_QWORD *)&v9 = a1;
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  return sub_1A128D188((uint64_t)&v9, v5, v7);
}

uint64_t sub_1A13382C8(uint64_t a1)
{
  return sub_1A1338244(a1, (uint64_t)VNDetectorProcessOption_Session, &qword_1EE5FFB00);
}

id sub_1A13382E4(uint64_t a1, uint64_t a2)
{
  void *ObjCClassFromMetadata;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1A128FDD0(a1);
  v5 = (void *)sub_1A15A8AD8();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(ObjCClassFromMetadata, sel_keyForDetectorWithConfigurationOptions_, v5);

  sub_1A128FDD0(a2);
  v7 = (void *)sub_1A15A8AD8();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(ObjCClassFromMetadata, sel_keyForDetectorWithConfigurationOptions_, v7);

  v9 = objc_msgSend(v6, sel_isEqual_, v8);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

uint64_t sub_1A13384B0(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 56) = a1;
  *(_QWORD *)(v6 + 64) = v5;
  *(double *)(v6 + 40) = a4;
  *(double *)(v6 + 48) = a5;
  *(double *)(v6 + 24) = a2;
  *(double *)(v6 + 32) = a3;
  return swift_task_switch();
}

uint64_t sub_1A133851C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v16;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(void **)(v0 + 64);
  v4 = *(double *)(v0 + 40);
  v3 = *(double *)(v0 + 48);
  v6 = *(double *)(v0 + 24);
  v5 = *(double *)(v0 + 32);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
  sub_1A128FDD0(v2);
  v8 = (void *)sub_1A15A8AD8();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setDictionary_, v8);

  v9 = qos_class_self();
  *(_QWORD *)(v0 + 16) = 0;
  v10 = objc_msgSend(v1, sel_processUsingQualityOfServiceClass_options_regionOfInterest_warningRecorder_error_progressHandler_, v9, v7, 0, v0 + 16, 0, v6, v5, v4, v3);
  v11 = *(void **)(v0 + 16);
  if (v10)
  {
    v12 = v10;
    v13 = sub_1A15A8C40();
    v14 = v11;

    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
  }
  else
  {
    v16 = v11;
    sub_1A15A8844();

    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A133883C(int a1, void *aBlock, double a3, double a4, double a5, double a6, void *a7)
{
  _QWORD *v7;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v7[2] = a7;
  v7[3] = _Block_copy(aBlock);
  v13 = sub_1A15A8AF0();
  v7[4] = v13;
  v14 = a7;
  v15 = swift_task_alloc();
  v7[5] = v15;
  *(_QWORD *)v15 = v7;
  *(_QWORD *)(v15 + 8) = sub_1A1338918;
  *(_QWORD *)(v15 + 56) = v13;
  *(_QWORD *)(v15 + 64) = v14;
  *(double *)(v15 + 40) = a5;
  *(double *)(v15 + 48) = a6;
  *(double *)(v15 + 24) = a3;
  *(double *)(v15 + 32) = a4;
  return swift_task_switch();
}

uint64_t sub_1A1338918()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);

  v2 = v0;
  v3 = *v1;
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v0)
  {
    v6 = sub_1A15A8838();

    v7 = 0;
    v8 = (void *)v6;
  }
  else
  {
    v7 = sub_1A15A8C34();
    swift_bridgeObjectRelease();
    v6 = 0;
    v8 = (void *)v7;
  }
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 24);
  v9[2](v9, v7, v6);

  _Block_release(v9);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A13389F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1A128E870;
  return v6();
}

uint64_t sub_1A1338A48(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1A128E870;
  return v7();
}

uint64_t sub_1A1338A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A15A8D48();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A15A8D3C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A128DB78(a1, &qword_1EE5FFB40);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A15A8D00();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1A1338BE8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;

  v3 = v2;
  v5 = sub_1A15A8A84();
  v44 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v43 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFA90);
  v8 = sub_1A15A91C8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_40;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v41 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v39 = v2;
  v40 = (unint64_t)(v10 + 63) >> 6;
  v14 = a2;
  v15 = v8 + 64;
  result = swift_retain();
  v17 = 0;
  HIDWORD(v38) = v14;
  v18 = 16;
  if ((v14 & 1) != 0)
    v18 = 32;
  v42 = v18;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_33;
      v24 = v41[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v38 & 0x100000000) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v17 >= v40)
              goto LABEL_33;
            v24 = v41[v17];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v17 = v25;
      }
    }
LABEL_23:
    v13 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v7 + 56);
    v27 = v7;
    v28 = *(_BYTE *)(*(_QWORD *)(v7 + 48) + v21);
    v29 = *(_QWORD *)(v44 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + v42))(v43, v26 + v29 * v21, v5);
    v45 = v28;
    sub_1A128E7E4();
    result = sub_1A15A8B38();
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_BYTE *)(*(_QWORD *)(v9 + 48) + v19) = v28;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v44 + 32))(*(_QWORD *)(v9 + 56) + v29 * v19, v43, v5);
    ++*(_QWORD *)(v9 + 16);
    v7 = v27;
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v38 & 0x100000000) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v7 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v9;
  return result;
}

void *sub_1A1338F70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = sub_1A15A8A84();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFA90);
  v23 = v0;
  v5 = *v0;
  v6 = sub_1A15A91BC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
    v18 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v18, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v17;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v18, v4, v1);
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A133918C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 56));
  return swift_deallocObject();
}

uint64_t sub_1A13391C0()
{
  double *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD *v9;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = *((_QWORD *)v0 + 6);
  v7 = (void *)*((_QWORD *)v0 + 7);
  v8 = (void *)*((_QWORD *)v0 + 8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_1A128E870;
  return ((uint64_t (*)(int, void *, double, double, double, double, void *))((char *)&dword_1EE5FFB48
                                                                                      + dword_1EE5FFB48))(v6, v7, v2, v3, v4, v5, v8);
}

uint64_t sub_1A1339258()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A128E870;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EE5FFB58 + dword_1EE5FFB58))(v2, v3, v4);
}

uint64_t objectdestroy_4Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A1339300(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A128C750;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EE5FFB68 + dword_1EE5FFB68))(a1, v4, v5, v6);
}

uint64_t sub_1A1339384()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A13393A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A128C750;
  return ((uint64_t (*)(uint64_t, int *))&aB_3[*(int *)aB_3])(a1, v4);
}

uint64_t ClassificationObservation.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

BOOL ClassificationObservation.hasPrecisionRecallCurve.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ClassificationObservation() + 36)) != 0;
}

uint64_t type metadata accessor for ClassificationObservation()
{
  uint64_t result;

  result = qword_1EE629D60;
  if (!qword_1EE629D60)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ClassificationObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClassificationObservation() + 20);
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

float ClassificationObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for ClassificationObservation() + 24));
}

__n128 ClassificationObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for ClassificationObservation() + 28);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

unint64_t ClassificationObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A15A9090();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v0 = type metadata accessor for ClassificationObservation();
  v1 = sub_1A12857D8(&qword_1EE5FD3B8, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
  sub_1A132D4B4(v0, (uint64_t)&off_1E45338A8, v1);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0xD000000000000026;
}

Swift::Bool __swiftcall ClassificationObservation.hasMinimumRecall(_:forPrecision:)(Swift::Float _, Swift::Float forPrecision)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  float v7;
  id v8;
  double v9;
  float v10;
  float v11;
  float v12;

  v5 = type metadata accessor for ClassificationObservation();
  v6 = *(void **)(v2 + *(int *)(v5 + 36));
  if (!v6)
    return 0;
  v7 = *(float *)(v2 + *(int *)(v5 + 24));
  if (v7 <= 0.0)
    return 0;
  v8 = v6;
  *(Swift::Float *)&v9 = forPrecision;
  objc_msgSend(v8, sel_confidenceThresholdForPrecision_, v9);
  if (v7 <= v10)
  {

    return 0;
  }
  else
  {
    if (_ <= 0.0)
    {

    }
    else
    {
      objc_msgSend(v8, sel_recallOfConfidence_);
      v12 = v11;

      if (v12 < _)
        return 0;
    }
    return 1;
  }
}

Swift::Bool __swiftcall ClassificationObservation.hasMinimumPrecision(_:forRecall:)(Swift::Float _, Swift::Float forRecall)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  float v7;
  id v8;
  double v9;
  float v10;
  float v12;
  float v13;

  v5 = type metadata accessor for ClassificationObservation();
  v6 = *(void **)(v2 + *(int *)(v5 + 36));
  if (!v6)
    return 0;
  v7 = *(float *)(v2 + *(int *)(v5 + 24));
  if (v7 <= 0.0)
    return 0;
  v8 = v6;
  *(Swift::Float *)&v9 = forRecall;
  objc_msgSend(v8, sel_confidenceThresholdForRecall_, v9);
  if (v7 < v10)
  {

    return 0;
  }
  if (_ <= 0.0)
  {

  }
  else
  {
    objc_msgSend(v8, sel_precisionOfConfidence_);
    v13 = v12;

    if (v13 < _)
      return 0;
  }
  return 1;
}

uint64_t ClassificationObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClassificationObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ClassificationObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for ClassificationObservation();
  sub_1A12857D8(&qword_1EE5FFBB8, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A1339860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE5FD3B8, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

uint64_t sub_1A13398B8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7363697274656DLL;
  if (*v0 != 1)
    v1 = 0x746176726573626FLL;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_1A1339920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A133AFF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A1339944()
{
  sub_1A133A694();
  return sub_1A15A9474();
}

uint64_t sub_1A133996C()
{
  sub_1A133A694();
  return sub_1A15A9480();
}

uint64_t ClassificationObservation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36[3];

  v2 = v1;
  v36[2] = *(id *)MEMORY[0x1E0C80C00];
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v4 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFBC0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A133A694();
  sub_1A15A9468();
  LOBYTE(v36[0]) = 0;
  v11 = v34;
  sub_1A15A92C4();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v32 = v6;
  v34 = v8;
  v13 = type metadata accessor for ClassificationObservation();
  v14 = v13;
  v15 = *(void **)(v2 + *(int *)(v13 + 36));
  v31 = v2;
  if (v15)
  {
    v29 = v13;
    v16 = (void *)objc_opt_self();
    v36[0] = 0;
    v17 = v15;
    v18 = objc_msgSend(v16, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v17, 0, v36);
    v19 = v36[0];
    v30 = v4;
    v20 = v7;
    if (!v18)
    {
      v25 = v19;
      sub_1A15A8844();

      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v10, v7);
    }
    v21 = (void *)sub_1A15A888C();
    v23 = v22;

    v36[0] = v21;
    v36[1] = v23;
    v35 = 1;
    sub_1A1289940();
    sub_1A15A92F4();
    v24 = v34;

    sub_1A12884B4((uint64_t)v21, (unint64_t)v23);
    v14 = v29;
    v26 = v30;
  }
  else
  {
    v26 = v4;
    v24 = v34;
    v20 = v7;
  }
  LOBYTE(v36[0]) = 2;
  sub_1A12855AC();
  v27 = (uint64_t)v32;
  sub_1A15A92AC();
  v28 = sub_1A12857D8(&qword_1EE5FD3B8, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
  sub_1A12E2C64(v27, v14, (uint64_t)&off_1E45338A8, v28);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v10, v20);
}

void ClassificationObservation.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (**v7)(char *, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  void (**v21)(char *, uint64_t);
  uint64_t v22;
  int v23;
  uint64_t v24;
  int *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (**v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE v40[52];
  char v41;

  v30 = a2;
  v35 = sub_1A15A88C8();
  v31 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v33 = (void (**)(char *, uint64_t))((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFBC8);
  v7 = *(void (***)(char *, uint64_t))(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ClassificationObservation();
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_1A133A694();
  v14 = v37;
  sub_1A15A945C();
  if (v14)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  else
  {
    v37 = v5;
    v15 = v7;
    v16 = v35;
    LOBYTE(v38) = 0;
    *v12 = sub_1A15A9234();
    v12[1] = v17;
    v41 = 1;
    sub_1A12899C8();
    sub_1A15A9228();
    if (v39 >> 60 == 15)
    {
      v18 = 0;
    }
    else
    {
      v19 = v38;
      v28 = (_QWORD *)v39;
      v29 = (int *)sub_1A128DB40(0, &qword_1EE5FD5A0);
      sub_1A128DB40(0, &qword_1EE5FFBD0);
      v18 = (void *)sub_1A15A8F40();
      sub_1A12EF77C(v19, (unint64_t)v28);
    }
    v28 = v12;
    v29 = (int *)v10;
    *(uint64_t *)((char *)v12 + *(int *)(v10 + 36)) = (uint64_t)v18;
    LOBYTE(v38) = 2;
    sub_1A12855AC();
    v20 = v18;
    sub_1A15A9204();
    LOBYTE(v38) = 0;
    sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v21 = v33;
    sub_1A15A9264();
    v22 = (uint64_t)v28;
    (*(void (**)(unint64_t, void (**)(char *, uint64_t), uint64_t))(v31 + 32))((unint64_t)v28 + v29[5], v21, v16);
    LOBYTE(v38) = 1;
    sub_1A15A924C();
    *(_DWORD *)(v22 + v29[6]) = v23;
    v41 = 3;
    sub_1A1285654();
    sub_1A15A9228();
    v33 = v15;
    v25 = v29;
    v24 = v30;
    *(_BYTE *)(v22 + v29[8]) = v38;
    v26 = v37;
    sub_1A12E32A4((uint64_t)v40);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v34);

    v33[1](v9, v6);
    sub_1A128465C((uint64_t)v40, v22 + v25[7]);
    sub_1A133A6D8(v22, v24);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    sub_1A133A71C(v22);
  }
}

void sub_1A133A220(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ClassificationObservation.init(from:)(a1, a2);
}

uint64_t sub_1A133A234(_QWORD *a1)
{
  return ClassificationObservation.encode(to:)(a1);
}

uint64_t sub_1A133A248@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  char v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  int *v13;
  int v14;
  int v15;
  id v16;
  uint64_t result;

  v7 = *a2;
  v8 = objc_msgSend(a1, sel_identifier);
  v9 = sub_1A15A8BB0();
  v11 = v10;

  v12 = objc_msgSend(a1, sel_uuid);
  v13 = (int *)type metadata accessor for ClassificationObservation();
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v15 = v14;
  v16 = objc_msgSend(a1, sel_classificationMetrics);

  *a4 = v9;
  a4[1] = v11;
  *(_DWORD *)((char *)a4 + v13[6]) = v15;
  result = sub_1A128465C(a3, (uint64_t)a4 + v13[7]);
  *((_BYTE *)a4 + v13[8]) = v7;
  *(uint64_t *)((char *)a4 + v13[9]) = (uint64_t)v16;
  return result;
}

__n128 ClassificationObservation.init(_:)@<Q0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  int *v9;
  int v10;
  int v11;
  id v12;
  __n128 *v13;
  __n128 result;
  __n128 v15;
  __n128 v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19[2];

  objc_msgSend(a1, sel_timeRange, static NormalizedRect.fullImage.getter(v19).n128_f64[0]);
  v4 = objc_msgSend(a1, sel_identifier);
  v5 = sub_1A15A8BB0();
  v7 = v6;

  v8 = objc_msgSend(a1, sel_uuid);
  v9 = (int *)type metadata accessor for ClassificationObservation();
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v11 = v10;
  v12 = objc_msgSend(a1, sel_classificationMetrics);

  *a2 = v5;
  a2[1] = v7;
  *(_DWORD *)((char *)a2 + v9[6]) = v11;
  v13 = (__n128 *)((char *)a2 + v9[7]);
  result = v16;
  *v13 = v15;
  v13[1] = v16;
  v13[2].n128_u64[0] = v17;
  v13[2].n128_u64[1] = v18;
  v13[3].n128_u8[0] = 0;
  *((_BYTE *)a2 + v9[8]) = -4;
  *(uint64_t *)((char *)a2 + v9[9]) = (uint64_t)v12;
  return result;
}

uint64_t sub_1A133A4A0@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  char v5;

  v5 = *a2;
  return sub_1A133A248(a1, &v5, a3, a4);
}

uint64_t _s6Vision25ClassificationObservationV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  int *v7;
  uint64_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  char v19;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_1A15A9354(), result = 0, (v5 & 1) != 0))
  {
    v7 = (int *)type metadata accessor for ClassificationObservation();
    if ((sub_1A15A88A4() & 1) == 0 || *(float *)((char *)a1 + v7[6]) != *(float *)((char *)a2 + v7[6]))
      return 0;
    v8 = v7[7];
    v9 = *((_BYTE *)a1 + v8 + 48);
    v10 = (char *)a2 + v8;
    if ((v9 & 1) != 0)
    {
      if (!v10[48])
        return 0;
    }
    else if ((v10[48] & 1) != 0 || (sub_1A15A8EC8() & 1) == 0)
    {
      return 0;
    }
    v11 = v7[8];
    v12 = *((unsigned __int8 *)a1 + v11);
    v13 = *((unsigned __int8 *)a2 + v11);
    if (v12 <= 0xFB)
    {
      if (v13 > 0xFB)
        return 0;
      sub_1A12862A0();
      if ((sub_1A15A8B80() & 1) == 0)
        return 0;
    }
    else if (v13 <= 0xFB)
    {
      return 0;
    }
    v14 = v7[9];
    v15 = *(void **)((char *)a1 + v14);
    v16 = *(void **)((char *)a2 + v14);
    if (v15)
    {
      if (!v16)
        return 0;
      sub_1A128DB40(0, &qword_1EE5FFBD0);
      v17 = v16;
      v18 = v15;
      v19 = sub_1A15A9000();

      if ((v19 & 1) == 0)
        return 0;
    }
    else if (v16)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sub_1A133A694()
{
  unint64_t result;

  result = qword_1EE6299D0[0];
  if (!qword_1EE6299D0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5A58, &type metadata for ClassificationObservation.CodingKeys);
    atomic_store(result, qword_1EE6299D0);
  }
  return result;
}

uint64_t sub_1A133A6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClassificationObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A133A71C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ClassificationObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A133A758(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE5FFBD8, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
  a1[2] = sub_1A12857D8(&qword_1EE5FEA60, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
  a1[3] = sub_1A12857D8(&qword_1EE5FEA48, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
  result = sub_1A12857D8(&qword_1EE5FFBB8, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A133A7EC()
{
  return sub_1A12857D8(&qword_1EE5FDCF0, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
}

uint64_t sub_1A133A818(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FD3B8, (uint64_t (*)(uint64_t))type metadata accessor for ClassificationObservation, (uint64_t)&protocol conformance descriptor for ClassificationObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ClassificationObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A15A88C8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    *(_DWORD *)((char *)v4 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v16;
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    v14[48] = v15[48];
    v17 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v18 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)v4 + v17) = v18;
    v19 = v18;
  }
  return v4;
}

void destroy for ClassificationObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

_QWORD *initializeWithCopy for ClassificationObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  id v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A15A88C8();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  *(_DWORD *)((char *)a1 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
  v13[48] = v14[48];
  v16 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v17 = *(void **)((char *)a2 + v16);
  *(_QWORD *)((char *)a1 + v16) = v17;
  v18 = v17;
  return a1;
}

_QWORD *assignWithCopy for ClassificationObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[48];
  v15 = *((_OWORD *)v12 + 1);
  v14 = *((_OWORD *)v12 + 2);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v15;
  *((_OWORD *)v11 + 2) = v14;
  v11[48] = v13;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v16 = a3[9];
  v17 = *(void **)((char *)a1 + v16);
  v18 = *(void **)((char *)a2 + v16);
  *(_QWORD *)((char *)a1 + v16) = v18;
  v19 = v18;

  return a1;
}

_OWORD *initializeWithTake for ClassificationObservation(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_DWORD *)((char *)a1 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  v11[48] = v12[48];
  v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  return a1;
}

_QWORD *assignWithTake for ClassificationObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  void *v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_DWORD *)((char *)a1 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  v12[48] = v13[48];
  v15 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v16 = *(void **)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);

  return a1;
}

uint64_t getEnumTagSinglePayload for ClassificationObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A133ACB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A15A88C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ClassificationObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A133AD38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1A15A88C8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A133ADAC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClassificationObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A133AE98 + 4 * byte_1A15D57B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A133AECC + 4 * byte_1A15D57B0[v4]))();
}

uint64_t sub_1A133AECC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A133AED4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A133AEDCLL);
  return result;
}

uint64_t sub_1A133AEE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A133AEF0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A133AEF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A133AEFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClassificationObservation.CodingKeys()
{
  return &type metadata for ClassificationObservation.CodingKeys;
}

unint64_t sub_1A133AF1C()
{
  unint64_t result;

  result = qword_1EE629E70[0];
  if (!qword_1EE629E70[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5A30, &type metadata for ClassificationObservation.CodingKeys);
    atomic_store(result, qword_1EE629E70);
  }
  return result;
}

unint64_t sub_1A133AF64()
{
  unint64_t result;

  result = qword_1EE629F80;
  if (!qword_1EE629F80)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D59A0, &type metadata for ClassificationObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE629F80);
  }
  return result;
}

unint64_t sub_1A133AFAC()
{
  unint64_t result;

  result = qword_1EE629F88[0];
  if (!qword_1EE629F88[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D59C8, &type metadata for ClassificationObservation.CodingKeys);
    atomic_store(result, qword_1EE629F88);
  }
  return result;
}

uint64_t sub_1A133AFF0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7363697274656DLL && a2 == 0xE700000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

__n128 ImageHomographicAlignmentObservation.warpTransform.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 32);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t ImageHomographicAlignmentObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ImageHomographicAlignmentObservation() + 20);
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ImageHomographicAlignmentObservation()
{
  uint64_t result;

  result = qword_1EE62A3A0;
  if (!qword_1EE62A3A0)
    return swift_getSingletonMetadata();
  return result;
}

float ImageHomographicAlignmentObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for ImageHomographicAlignmentObservation() + 24));
}

__n128 ImageHomographicAlignmentObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for ImageHomographicAlignmentObservation() + 28);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t ImageHomographicAlignmentObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ImageHomographicAlignmentObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ImageHomographicAlignmentObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A15A9090();
  sub_1A15A8BEC();
  sub_1A15A8BEC();
  sub_1A15A8BEC();
  v0 = type metadata accessor for ImageHomographicAlignmentObservation();
  v1 = sub_1A12857D8(&qword_1EE5FDEC0, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
  sub_1A132D4B4(v0, (uint64_t)&off_1E4537358, v1);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

CIImage __swiftcall ImageHomographicAlignmentObservation.applyTransform(to:)(CIImage to)
{
  float32x4_t *v1;
  Class isa;
  double MinX;
  CGFloat MaxY;
  float v5;
  int32x4_t v6;
  double MaxX;
  CGFloat v8;
  float v9;
  int32x4_t v10;
  double v11;
  CGFloat MinY;
  float v13;
  int32x4_t v14;
  double v15;
  CGFloat v16;
  float v17;
  int32x4_t v18;
  uint64_t inited;
  unint64_t v20;
  void *v21;
  void *v22;
  objc_class *v23;
  void *v24;
  objc_class *v25;
  CIImage result;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float64x2_t v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  isa = to.super.isa;
  -[objc_class extent](to.super.isa, sel_extent);
  MinX = CGRectGetMinX(v34);
  -[objc_class extent](isa, sel_extent);
  MaxY = CGRectGetMaxY(v35);
  v5 = MinX;
  *(float *)&MaxY = MaxY;
  v32 = v1[1];
  v30 = *v1;
  v31 = v1[2];
  v6 = (int32x4_t)vaddq_f32(v31, vmlaq_n_f32(vmulq_n_f32(*v1, v5), v32, *(float *)&MaxY));
  v29 = vcvtq_f64_f32(vdiv_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_laneq_s32(v6, 2)));
  -[objc_class extent](isa, sel_extent);
  MaxX = CGRectGetMaxX(v36);
  -[objc_class extent](isa, sel_extent);
  v8 = CGRectGetMaxY(v37);
  v9 = MaxX;
  *(float *)&v8 = v8;
  v10 = (int32x4_t)vaddq_f32(v31, vmlaq_n_f32(vmulq_n_f32(v30, v9), v32, *(float *)&v8));
  v28 = vcvtq_f64_f32(vdiv_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_laneq_s32(v10, 2)));
  -[objc_class extent](isa, sel_extent);
  v11 = CGRectGetMinX(v38);
  -[objc_class extent](isa, sel_extent);
  MinY = CGRectGetMinY(v39);
  v13 = v11;
  *(float *)&MinY = MinY;
  v14 = (int32x4_t)vaddq_f32(v31, vmlaq_n_f32(vmulq_n_f32(v30, v13), v32, *(float *)&MinY));
  v27 = vcvtq_f64_f32(vdiv_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_laneq_s32(v14, 2)));
  -[objc_class extent](isa, sel_extent);
  v15 = CGRectGetMaxX(v40);
  -[objc_class extent](isa, sel_extent);
  v16 = CGRectGetMinY(v41);
  v17 = v15;
  *(float *)&v16 = v16;
  v18 = (int32x4_t)vaddq_f32(v31, vmlaq_n_f32(vmulq_n_f32(v30, v17), v32, *(float *)&v16));
  v33 = vcvtq_f64_f32(vdiv_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_laneq_s32(v18, 2)));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFBE0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A15D2990;
  strcpy((char *)(inited + 32), "inputTopLeft");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DDF8]), sel_initWithCGPoint_, *(_OWORD *)&v29);
  strcpy((char *)(inited + 56), "inputTopRight");
  *(_WORD *)(inited + 70) = -4864;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DDF8]), sel_initWithCGPoint_, *(_OWORD *)&v28);
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x80000001A15FDB00;
  *(_QWORD *)(inited + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DDF8]), sel_initWithCGPoint_, *(_OWORD *)&v27);
  *(_QWORD *)(inited + 104) = 0x746F427475706E69;
  *(_QWORD *)(inited + 112) = 0xEF7466654C6D6F74;
  *(_QWORD *)(inited + 120) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DDF8]), sel_initWithCGPoint_, *(_OWORD *)&v33);
  v20 = sub_1A133B6D0(inited);
  v21 = (void *)sub_1A15A8B8C();
  sub_1A133B7E8(v20);
  swift_bridgeObjectRelease();
  v22 = (void *)sub_1A15A8AD8();
  swift_bridgeObjectRelease();
  v23 = (objc_class *)-[objc_class imageByApplyingFilter:withInputParameters:](isa, sel_imageByApplyingFilter_withInputParameters_, v21, v22);

  v25 = v23;
  result._priv = v24;
  result.super.isa = v25;
  return result;
}

unint64_t sub_1A133B6D0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFC20);
  v2 = (_QWORD *)sub_1A15A91D4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_1A128DC1C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A133B7E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  void *v25;
  id v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FFB90);
    v2 = (_QWORD *)sub_1A15A91D4();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v34 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v33 = (unint64_t)(63 - v3) >> 6;
  v6 = &v38;
  v7 = &v40;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x1E0DEE9B8] + 8;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v33)
    goto LABEL_32;
  v21 = *(_QWORD *)(v34 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v33)
      goto LABEL_32;
    v21 = *(_QWORD *)(v34 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v33)
        goto LABEL_32;
      v21 = *(_QWORD *)(v34 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v33)
          goto LABEL_32;
        v21 = *(_QWORD *)(v34 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v33)
          {
            v21 = *(_QWORD *)(v34 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v33)
                break;
              v21 = *(_QWORD *)(v34 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1A1291BE4();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v5 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = v18 | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v25 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v19);
    v36 = *v24;
    v37 = v24[1];
    sub_1A133D060();
    swift_bridgeObjectRetain();
    v26 = v25;
    swift_dynamicCast();
    sub_1A12880A0(v6, v7);
    sub_1A12880A0(v7, v41);
    sub_1A12880A0(v41, &v39);
    result = sub_1A128DC1C(v36, v37);
    v27 = result;
    if ((v28 & 1) != 0)
    {
      v35 = v5;
      v11 = v7;
      v12 = v6;
      v13 = v1;
      v14 = i;
      v15 = v10;
      v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v16 = v36;
      v16[1] = v37;
      v10 = v15;
      i = v14;
      v1 = v13;
      v6 = v12;
      v7 = v11;
      v5 = v35;
      v17 = (_OWORD *)(v2[7] + 32 * v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      result = (unint64_t)sub_1A12880A0(&v39, v17);
      if (!v35)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v29 = (uint64_t *)(v2[6] + 16 * result);
    *v29 = v36;
    v29[1] = v37;
    result = (unint64_t)sub_1A12880A0(&v39, (_OWORD *)(v2[7] + 32 * result));
    v30 = v2[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_34;
    v2[2] = v32;
    if (!v5)
      goto LABEL_11;
LABEL_10:
    v18 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1A133BB3C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, _OWORD *a5@<X8>, float a6@<S0>)
{
  char v10;
  __int128 v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t result;

  v10 = *a4;
  v11 = a1[1];
  *a5 = *a1;
  a5[1] = v11;
  a5[2] = a1[2];
  v12 = (int *)type metadata accessor for ImageHomographicAlignmentObservation();
  v13 = (char *)a5 + v12[5];
  v14 = sub_1A15A88C8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a2, v14);
  *(float *)((char *)a5 + v12[6]) = a6;
  result = sub_1A128465C(a3, (uint64_t)a5 + v12[7]);
  *((_BYTE *)a5 + v12[8]) = v10;
  return result;
}

uint64_t ImageHomographicAlignmentObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for ImageHomographicAlignmentObservation();
  sub_1A12857D8(&qword_1EE5FFBE8, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A133BC54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE5FDEC0, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

uint64_t sub_1A133BCAC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E61725470726177;
  else
    return 0x746176726573626FLL;
}

uint64_t sub_1A133BCFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A133CF34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A133BD20()
{
  sub_1A133C8DC();
  return sub_1A15A9474();
}

uint64_t sub_1A133BD48()
{
  sub_1A133C8DC();
  return sub_1A15A9480();
}

uint64_t ImageHomographicAlignmentObservation.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  _OWORD *v24;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFBF0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A133C8DC();
  sub_1A15A9468();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF340);
  v12 = (_OWORD *)swift_allocObject();
  v13 = *v3;
  v14 = v3[1];
  v12[1] = xmmword_1A15D29A0;
  v12[2] = v13;
  v15 = v3[2];
  v12[3] = v14;
  v12[4] = v15;
  v24 = v12;
  v23 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF2D8);
  sub_1A133C920(&qword_1EE5FF348, &qword_1EE5FD2A8, MEMORY[0x1E0DEDD60], MEMORY[0x1E0DEAF10]);
  sub_1A15A92F4();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v22 = 0;
    sub_1A12855AC();
    sub_1A15A92AC();
    v16 = type metadata accessor for ImageHomographicAlignmentObservation();
    v17 = sub_1A12857D8(&qword_1EE5FDEC0, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
    sub_1A12E2C64((uint64_t)v7, v16, (uint64_t)&off_1E4537358, v17);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t ImageHomographicAlignmentObservation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _BYTE v41[60];
  uint64_t v42;

  v32 = a2;
  v37 = sub_1A15A88C8();
  v33 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v36 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFBF8);
  v7 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ImageHomographicAlignmentObservation();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A133C8DC();
  v13 = v39;
  sub_1A15A945C();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v30 = (int *)v10;
  v31 = v6;
  v39 = v7;
  v15 = v36;
  v14 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF2D8);
  v40 = 1;
  sub_1A133C920(&qword_1EE5FF2E0, &qword_1EE5FD2C8, MEMORY[0x1E0DEDD70], MEMORY[0x1E0DEAF40]);
  v16 = v38;
  sub_1A15A9264();
  v17 = v9;
  result = v42;
  v19 = *(_QWORD *)(v42 + 16);
  if (v19)
  {
    if (v19 != 1)
    {
      if (v19 >= 3)
      {
        v20 = *(_OWORD *)(v42 + 32);
        v28 = *(_OWORD *)(v42 + 48);
        v29 = v20;
        v27 = *(_OWORD *)(v42 + 64);
        swift_bridgeObjectRelease();
        v21 = v28;
        *(_OWORD *)v12 = v29;
        *((_OWORD *)v12 + 1) = v21;
        *((_OWORD *)v12 + 2) = v27;
        LOBYTE(v42) = 0;
        sub_1A12855AC();
        sub_1A15A9204();
        LOBYTE(v42) = 0;
        sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
        sub_1A15A9264();
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v12[v30[5]], v15, v14);
        LOBYTE(v42) = 1;
        sub_1A15A924C();
        *(_DWORD *)&v12[v30[6]] = v22;
        v40 = 3;
        sub_1A1285654();
        sub_1A15A9228();
        v23 = (uint64_t)a1;
        v24 = v39;
        v26 = v30;
        v25 = v31;
        v12[v30[8]] = v42;
        sub_1A12E32A4((uint64_t)v41);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v35);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v16);
        sub_1A128465C((uint64_t)v41, (uint64_t)&v12[v26[7]]);
        sub_1A133C99C((uint64_t)v12, v32);
        __swift_destroy_boxed_opaque_existential_1(v23);
        return sub_1A133C9E0((uint64_t)v12);
      }
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1A133C468@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ImageHomographicAlignmentObservation.init(from:)(a1, a2);
}

uint64_t sub_1A133C47C(_QWORD *a1)
{
  return ImageHomographicAlignmentObservation.encode(to:)(a1);
}

uint64_t sub_1A133C490@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  int *v12;
  int v13;
  int v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v7 = *a2;
  objc_msgSend(a1, sel_warpTransform);
  v17 = v9;
  v18 = v8;
  v16 = v10;
  v11 = objc_msgSend(a1, sel_uuid);
  v12 = (int *)type metadata accessor for ImageHomographicAlignmentObservation();
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v14 = v13;

  *a4 = v18;
  a4[1] = v17;
  a4[2] = v16;
  *(_DWORD *)((char *)a4 + v12[6]) = v14;
  result = sub_1A128465C(a3, (uint64_t)a4 + v12[7]);
  *((_BYTE *)a4 + v12[8]) = v7;
  return result;
}

__n128 ImageHomographicAlignmentObservation.init(_:)@<Q0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  id v7;
  int *v8;
  int v9;
  int v10;
  __n128 *v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20[2];

  objc_msgSend(a1, sel_timeRange, static NormalizedRect.fullImage.getter(v20).n128_f64[0]);
  objc_msgSend(a1, sel_warpTransform);
  v14 = v5;
  v15 = v4;
  v13 = v6;
  v7 = objc_msgSend(a1, sel_uuid);
  v8 = (int *)type metadata accessor for ImageHomographicAlignmentObservation();
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v10 = v9;

  *a2 = v15;
  a2[1] = v14;
  a2[2] = v13;
  *(_DWORD *)((char *)a2 + v8[6]) = v10;
  v11 = (__n128 *)((char *)a2 + v8[7]);
  result = v17;
  *v11 = v16;
  v11[1] = v17;
  v11[2].n128_u64[0] = v18;
  v11[2].n128_u64[1] = v19;
  v11[3].n128_u8[0] = 0;
  *((_BYTE *)a2 + v8[8]) = -4;
  return result;
}

uint64_t sub_1A133C690@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, int *a4@<X4>, _OWORD *a5@<X8>)
{
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v9 = *a2;
  objc_msgSend(a1, sel_warpTransform);
  v19 = v11;
  v20 = v10;
  v18 = v12;
  v13 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v15 = v14;

  *a5 = v20;
  a5[1] = v19;
  a5[2] = v18;
  v16 = a4[7];
  *(_DWORD *)((char *)a5 + a4[6]) = v15;
  result = sub_1A128465C(a3, (uint64_t)a5 + v16);
  *((_BYTE *)a5 + a4[8]) = v9;
  return result;
}

uint64_t _s6Vision36ImageHomographicAlignmentObservationV2eeoiySbAC_ACtFZ_0(float32x4_t *a1, float32x4_t *a2)
{
  uint32x4_t v2;
  int *v5;
  uint64_t v6;
  __int8 v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v2 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[1], a2[1]), (int8x16_t)vceqq_f32(*a1, *a2)), (int8x16_t)vceqq_f32(a1[2], a2[2]));
  v2.i32[3] = v2.i32[2];
  if ((vminvq_u32(v2) & 0x80000000) == 0)
    return 0;
  v5 = (int *)type metadata accessor for ImageHomographicAlignmentObservation();
  if ((sub_1A15A88A4() & 1) == 0 || *(float *)((char *)a1->f32 + v5[6]) != *(float *)((char *)a2->f32 + v5[6]))
    return 0;
  v6 = v5[7];
  v7 = a1[3].i8[v6];
  v8 = (char *)a2 + v6;
  if ((v7 & 1) == 0)
  {
    if ((v8[48] & 1) != 0 || (sub_1A15A8EC8() & 1) == 0)
      return 0;
LABEL_9:
    v9 = v5[8];
    v10 = a1->u8[v9];
    v11 = a2->u8[v9];
    if (v10 <= 0xFB)
    {
      if (v11 > 0xFB)
        return 0;
      sub_1A12862A0();
      if ((sub_1A15A8B80() & 1) == 0)
        return 0;
    }
    else if (v11 <= 0xFB)
    {
      return 0;
    }
    return 1;
  }
  if (v8[48])
    goto LABEL_9;
  return 0;
}

unint64_t sub_1A133C8DC()
{
  unint64_t result;

  result = qword_1EE62A010[0];
  if (!qword_1EE62A010[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5D48, &type metadata for ImageHomographicAlignmentObservation.CodingKeys);
    atomic_store(result, qword_1EE62A010);
  }
  return result;
}

uint64_t sub_1A133C920(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF2D8);
    v10 = sub_1A1297610(a2, a3);
    result = MEMORY[0x1A1B0B774](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A133C99C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageHomographicAlignmentObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A133C9E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ImageHomographicAlignmentObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A133CA1C(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE5FDB30, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
  a1[2] = sub_1A12857D8(&qword_1EE5FFC00, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
  a1[3] = sub_1A12857D8(&qword_1EE5FFC08, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
  result = sub_1A12857D8(&qword_1EE5FFBE8, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A133CAB0()
{
  return sub_1A12857D8(&qword_1EE5FFC10, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
}

uint64_t sub_1A133CADC(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FDEC0, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&protocol conformance descriptor for ImageHomographicAlignmentObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_OWORD *assignWithCopy for ImageHomographicAlignmentObservation(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  __int128 v14;
  __int128 v15;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[48];
  v15 = *((_OWORD *)v12 + 1);
  v14 = *((_OWORD *)v12 + 2);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v15;
  *((_OWORD *)v11 + 2) = v14;
  v11[48] = v13;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageHomographicAlignmentObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A133CBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;

  v6 = sub_1A15A88C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  v10 = ((v9 >> 3) & 0xFFFFFFDF | (32 * ((v9 >> 2) & 1))) ^ 0x3F;
  if (v10 >= 0x21)
    return 0;
  else
    return v10;
}

uint64_t storeEnumTagSinglePayload for ImageHomographicAlignmentObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A133CC70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A15A88C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = ((~(_DWORD)a2 & 0x20u) >> 3) | (8 * ~(_BYTE)a2);
  return result;
}

uint64_t sub_1A133CCFC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ImageHomographicAlignmentObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A133CDDC + 4 * byte_1A15D5AB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A133CE10 + 4 * byte_1A15D5AB0[v4]))();
}

uint64_t sub_1A133CE10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A133CE18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A133CE20);
  return result;
}

uint64_t sub_1A133CE2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A133CE34);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A133CE38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A133CE40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageHomographicAlignmentObservation.CodingKeys()
{
  return &type metadata for ImageHomographicAlignmentObservation.CodingKeys;
}

unint64_t sub_1A133CE60()
{
  unint64_t result;

  result = qword_1EE62A4B0[0];
  if (!qword_1EE62A4B0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5D20, &type metadata for ImageHomographicAlignmentObservation.CodingKeys);
    atomic_store(result, qword_1EE62A4B0);
  }
  return result;
}

unint64_t sub_1A133CEA8()
{
  unint64_t result;

  result = qword_1EE62A5C0;
  if (!qword_1EE62A5C0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5C90, &type metadata for ImageHomographicAlignmentObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62A5C0);
  }
  return result;
}

unint64_t sub_1A133CEF0()
{
  unint64_t result;

  result = qword_1EE62A5C8[0];
  if (!qword_1EE62A5C8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5CB8, &type metadata for ImageHomographicAlignmentObservation.CodingKeys);
    atomic_store(result, qword_1EE62A5C8);
  }
  return result;
}

uint64_t sub_1A133CF34(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E61725470726177 && a2 == 0xED00006D726F6673)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1A133D060()
{
  unint64_t result;

  result = qword_1EE5FFC18;
  if (!qword_1EE5FFC18)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5FFC18);
  }
  return result;
}

uint64_t sub_1A133D09C()
{
  _BYTE *v0;

  if (*v0)
    return 0x746176726573626FLL;
  else
    return 0x6675426C65786970;
}

uint64_t sub_1A133D0E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A133DACC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A133D10C()
{
  sub_1A133DBEC();
  return sub_1A15A9474();
}

uint64_t sub_1A133D134()
{
  sub_1A133DBEC();
  return sub_1A15A9480();
}

void sub_1A133D15C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t (*v10)(uint64_t, uint64_t);
  __CVBuffer *v11;
  __CVBuffer *v12;
  char *BaseAddress;
  __CVBuffer *v14;

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  v11 = (__CVBuffer *)v10(a2, a4);
  CVPixelBufferLockBaseAddress(v11, 1uLL);

  v12 = (__CVBuffer *)v10(a2, a4);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v12);

  if (BaseAddress)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, &BaseAddress[*(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1], a3);
    v14 = (__CVBuffer *)v10(a2, a4);
    CVPixelBufferUnlockBaseAddress(v14, 1uLL);

  }
  else
  {
    sub_1A15A91A4();
    __break(1u);
  }
}

void sub_1A133D274(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(id *__return_ptr, uint64_t, uint64_t, __n128);
  id v15;
  void *v16;
  uint64_t (*v17)(uint64_t, _QWORD *);
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  id v41[3];

  v41[2] = *(id *)MEMORY[0x1E0C80C00];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v35 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFC28);
  v36 = *(_QWORD *)(v38 - 8);
  v10 = MEMORY[0x1E0C80A78](v38);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a3[1];
  v14 = *(void (**)(id *__return_ptr, uint64_t, uint64_t, __n128))(v13 + 8);
  v39 = a2;
  v14(v41, a2, v13, v10);
  if (LOBYTE(v41[0]) > 0xFBu)
  {
    __break(1u);
    goto LABEL_11;
  }
  v40 = (char)v41[0];
  v15 = sub_1A1346204();
  if (!v15)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  v16 = v15;
  v17 = (uint64_t (*)(uint64_t, _QWORD *))a3[3];
  v34 = v3;
  v18 = (void *)v17(v39, a3);
  v19 = objc_msgSend(objc_allocWithZone((Class)VNPixelBufferObservation), sel_initWithOriginatingRequestSpecifier_featureName_CVPixelBuffer_, v16, 0, v18);

  if (!v19)
    goto LABEL_12;
  v20 = (void *)objc_opt_self();
  v41[0] = 0;
  v21 = objc_msgSend(v20, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v19, 1, v41);
  v22 = v41[0];
  if (v21)
  {
    v31 = v13;
    v32 = v8;
    v33 = v7;
    v23 = (void *)sub_1A15A888C();
    v25 = v24;

    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1A133DBEC();
    sub_1A15A9468();
    v41[0] = v23;
    v41[1] = v25;
    v40 = 0;
    sub_1A1289940();
    v26 = v37;
    v27 = v38;
    sub_1A15A92F4();
    if (v26)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v27);

      sub_1A12884B4((uint64_t)v23, (unint64_t)v25);
    }
    else
    {
      LOBYTE(v41[0]) = 1;
      sub_1A12855AC();
      v29 = (uint64_t)v35;
      sub_1A15A92AC();
      sub_1A12E2C64(v29, v39, v31, a3[2]);
      sub_1A12884B4((uint64_t)v23, (unint64_t)v25);

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v29, v33);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v27);
    }
  }
  else
  {
    v28 = v22;
    sub_1A15A8844();

    swift_willThrow();
  }
}

void *sub_1A133D5B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *result;
  void *v24;
  id v25;
  _BYTE *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  _BYTE *v33;
  _BYTE v34[12];
  int v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  char v50;
  _QWORD v51[2];
  _BYTE v52[60];

  v44 = a3;
  v42 = a4;
  v43 = a2;
  v47 = sub_1A15A88C8();
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v41 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v46 = &v34[-v7];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v34[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFC38);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = &v34[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = a1[3];
  v49 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_1A133DBEC();
  v17 = v48;
  sub_1A15A945C();
  if (v17)
  {
    v29 = (uint64_t)v49;
    return (void *)__swift_destroy_boxed_opaque_existential_1(v29);
  }
  v48 = v11;
  v40 = v9;
  v18 = v47;
  v19 = v13;
  v50 = 0;
  sub_1A12899C8();
  sub_1A15A9264();
  v20 = v12;
  v22 = v51[0];
  v21 = v51[1];
  sub_1A128DB40(0, &qword_1EE5FD5A0);
  sub_1A128DB40(0, &qword_1EE5FD378);
  result = (void *)sub_1A15A8F40();
  v39 = v22;
  v38 = v21;
  if (result)
  {
    v24 = result;
    v25 = objc_msgSend(result, sel_pixelBuffer);
    LOBYTE(v51[0]) = 1;
    sub_1A12855AC();
    sub_1A15A9204();
    v26 = v15;
    v27 = v25;
    v36 = v26;
    v37 = v20;
    LOBYTE(v51[0]) = 0;
    sub_1A133DC30();
    v28 = v18;
    sub_1A15A9264();
    LOBYTE(v51[0]) = 1;
    sub_1A15A924C();
    v29 = (uint64_t)v49;
    v30 = v40;
    v32 = v31;
    v50 = 3;
    sub_1A1285654();
    sub_1A15A9228();
    v35 = LOBYTE(v51[0]);
    sub_1A12E32A4((uint64_t)v52);
    v33 = v41;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 16))(v41, v46, v28);
    LOBYTE(v51[0]) = v35;
    (*(void (**)(_BYTE *, _BYTE *, _QWORD *, id, uint64_t, float))(v44 + 48))(v33, v52, v51, v27, v43, v32);

    sub_1A12884B4(v39, v38);
    (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v46, v28);
    (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v48, v8);
    (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v36, v37);
    return (void *)__swift_destroy_boxed_opaque_existential_1(v29);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A133DACC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6675426C65786970 && a2 == 0xEB00000000726566;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1A133DBEC()
{
  unint64_t result;

  result = qword_1EE5FFC30;
  if (!qword_1EE5FFC30)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5E14, &type metadata for PixelBufferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE5FFC30);
  }
  return result;
}

unint64_t sub_1A133DC30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE5FCD78;
  if (!qword_1EE5FCD78)
  {
    v1 = sub_1A15A88C8();
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0CB09E0], v1);
    atomic_store(result, (unint64_t *)&qword_1EE5FCD78);
  }
  return result;
}

unint64_t sub_1A133DC7C()
{
  unint64_t result;

  result = qword_1EE5FFC40;
  if (!qword_1EE5FFC40)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5DAC, &type metadata for PixelBufferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE5FFC40);
  }
  return result;
}

unint64_t sub_1A133DCC4()
{
  unint64_t result;

  result = qword_1EE5FFC48;
  if (!qword_1EE5FFC48)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5E8C, &type metadata for PixelBufferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE5FFC48);
  }
  return result;
}

unint64_t sub_1A133DD0C()
{
  unint64_t result;

  result = qword_1EE5FFC50;
  if (!qword_1EE5FFC50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D5E64, &type metadata for PixelBufferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE5FFC50);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PixelBufferCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A133DD9C + 4 * byte_1A15D5DA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A133DDD0 + 4 * byte_1A15D5DA0[v4]))();
}

uint64_t sub_1A133DDD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A133DDD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A133DDE0);
  return result;
}

uint64_t sub_1A133DDEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A133DDF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A133DDF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A133DE00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PixelBufferCodingKeys()
{
  return &type metadata for PixelBufferCodingKeys;
}

uint64_t DetectedDocumentObservation.globalSegmentationMask.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A1294AF8(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for PixelBufferObservation);
}

uint64_t DetectedDocumentObservation.globalSegmentationMask.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1A133DE48(a1, v1);
}

uint64_t sub_1A133DE48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PixelBufferObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*DetectedDocumentObservation.globalSegmentationMask.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

__n128 DetectedDocumentObservation.topLeft.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + *(int *)(type metadata accessor for DetectedDocumentObservation() + 20));
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for DetectedDocumentObservation()
{
  uint64_t result;

  result = qword_1EE62AC60;
  if (!qword_1EE62AC60)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DetectedDocumentObservation.topLeft.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *a1;
  v3 = a1[1];
  result = type metadata accessor for DetectedDocumentObservation();
  v5 = (_QWORD *)(v1 + *(int *)(result + 20));
  *v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*DetectedDocumentObservation.topLeft.modify())(TtTrkRpnNode *__hidden this)
{
  type metadata accessor for DetectedDocumentObservation();
  return TtTrkRpnNode::config;
}

__n128 DetectedDocumentObservation.topRight.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + *(int *)(type metadata accessor for DetectedDocumentObservation() + 24));
  *a1 = result;
  return result;
}

uint64_t DetectedDocumentObservation.topRight.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *a1;
  v3 = a1[1];
  result = type metadata accessor for DetectedDocumentObservation();
  v5 = (_QWORD *)(v1 + *(int *)(result + 24));
  *v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*DetectedDocumentObservation.topRight.modify())(TtTrkRpnNode *__hidden this)
{
  type metadata accessor for DetectedDocumentObservation();
  return TtTrkRpnNode::config;
}

__n128 DetectedDocumentObservation.bottomRight.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + *(int *)(type metadata accessor for DetectedDocumentObservation() + 28));
  *a1 = result;
  return result;
}

uint64_t DetectedDocumentObservation.bottomRight.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *a1;
  v3 = a1[1];
  result = type metadata accessor for DetectedDocumentObservation();
  v5 = (_QWORD *)(v1 + *(int *)(result + 28));
  *v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*DetectedDocumentObservation.bottomRight.modify())(TtTrkRpnNode *__hidden this)
{
  type metadata accessor for DetectedDocumentObservation();
  return TtTrkRpnNode::config;
}

__n128 DetectedDocumentObservation.bottomLeft.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + *(int *)(type metadata accessor for DetectedDocumentObservation() + 32));
  *a1 = result;
  return result;
}

uint64_t DetectedDocumentObservation.bottomLeft.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *a1;
  v3 = a1[1];
  result = type metadata accessor for DetectedDocumentObservation();
  v5 = (_QWORD *)(v1 + *(int *)(result + 32));
  *v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*DetectedDocumentObservation.bottomLeft.modify())(TtTrkRpnNode *__hidden this)
{
  type metadata accessor for DetectedDocumentObservation();
  return TtTrkRpnNode::config;
}

uint64_t DetectedDocumentObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DetectedDocumentObservation() + 36);
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

float DetectedDocumentObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for DetectedDocumentObservation() + 40));
}

__n128 DetectedDocumentObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for DetectedDocumentObservation() + 44);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t DetectedDocumentObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A15A9090();
  sub_1A15A8BEC();
  v0 = type metadata accessor for DetectedDocumentObservation();
  sub_1A1340660(v0, (uint64_t)&protocol witness table for DetectedDocumentObservation);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  type metadata accessor for PixelBufferObservation();
  sub_1A12857D8(&qword_1EE5FD8A8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v1 = sub_1A12857D8(&qword_1EE5FFC58, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
  sub_1A132D4B4(v0, (uint64_t)&off_1E4535568, v1);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

uint64_t DetectedDocumentObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for DetectedDocumentObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 48));
  return result;
}

uint64_t DetectedDocumentObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for DetectedDocumentObservation();
  sub_1A12857D8(&qword_1EE5FFC60, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A133E3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

float sub_1A133E404(uint64_t a1)
{
  uint64_t v1;

  return *(float *)(v1 + *(int *)(a1 + 40));
}

__n128 sub_1A133E410@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v2 + *(int *)(a1 + 44);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 48) = v4;
  return result;
}

uint64_t sub_1A133E434@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 48));
  return result;
}

__n128 sub_1A133E444@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + *(int *)(a1 + 20));
  *a2 = result;
  return result;
}

__n128 sub_1A133E454@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + *(int *)(a1 + 24));
  *a2 = result;
  return result;
}

__n128 sub_1A133E464@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + *(int *)(a1 + 28));
  *a2 = result;
  return result;
}

__n128 sub_1A133E474@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + *(int *)(a1 + 32));
  *a2 = result;
  return result;
}

uint64_t sub_1A133E484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE5FFC58, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

void sub_1A133E4DC(uint64_t a1@<X0>, double *a2@<X8>)
{
  QuadrilateralProviding.boundingBox.getter(a1, &protocol witness table for DetectedDocumentObservation, a2);
}

uint64_t sub_1A133E4E8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6C676E6174636572;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x746176726573626FLL;
}

uint64_t sub_1A133E554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A13404E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A133E578()
{
  sub_1A133F904();
  return sub_1A15A9474();
}

uint64_t sub_1A133E5A0()
{
  sub_1A133F904();
  return sub_1A15A9480();
}

uint64_t DetectedDocumentObservation.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v17 = *(_QWORD *)(v2 - 8);
  v18 = v2;
  MEMORY[0x1E0C80A78](v2);
  v19 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD320);
  v4 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v21 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFC68);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A133F904();
  sub_1A15A9468();
  v25 = 2;
  type metadata accessor for PixelBufferObservation();
  sub_1A12857D8(&qword_1EE5FEBE8, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  v10 = v22;
  sub_1A15A92F4();
  if (v10)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22 = v7;
  v12 = v4;
  v13 = (uint64_t)v19;
  v24 = 1;
  sub_1A12996B8();
  v14 = (uint64_t)v21;
  sub_1A15A92AC();
  v15 = type metadata accessor for DetectedDocumentObservation();
  sub_1A131AD40(v14, v15, (void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))&protocol witness table for DetectedDocumentObservation);
  v23 = 0;
  sub_1A12855AC();
  sub_1A15A92AC();
  v16 = sub_1A12857D8(&qword_1EE5FFC58, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
  sub_1A12E2C64(v13, v15, (uint64_t)&off_1E4535568, v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v13, v18);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v9, v6);
}

uint64_t DetectedDocumentObservation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  __int128 v40;
  _BYTE v41[60];
  char v42;

  v27 = a2;
  v30 = sub_1A15A88C8();
  v28 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v29 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v33 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD338);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for PixelBufferObservation();
  MEMORY[0x1E0C80A78](v36);
  v37 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFC70);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DetectedDocumentObservation();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_1A133F904();
  v17 = v39;
  sub_1A15A945C();
  if (v17)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  v26 = (int *)v13;
  v39 = v7;
  v18 = v10;
  v19 = (uint64_t)v15;
  LOBYTE(v40) = 2;
  sub_1A12857D8(&qword_1EE5FEBE0, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferObservation, (uint64_t)&protocol conformance descriptor for PixelBufferObservation);
  v20 = (uint64_t)v37;
  sub_1A15A9264();
  v21 = v9;
  sub_1A1301710(v20, v19);
  LOBYTE(v40) = 1;
  sub_1A12996B8();
  sub_1A15A9204();
  v37 = v12;
  v42 = 0;
  sub_1A12957BC();
  sub_1A15A9264();
  v22 = v26;
  *(_OWORD *)(v19 + v26[5]) = v40;
  v42 = 1;
  sub_1A15A9264();
  *(_OWORD *)(v19 + v22[6]) = v40;
  v42 = 3;
  sub_1A15A9264();
  *(_OWORD *)(v19 + v22[8]) = v40;
  v42 = 2;
  sub_1A15A9264();
  *(_OWORD *)(v19 + v22[7]) = v40;
  LOBYTE(v40) = 0;
  sub_1A12855AC();
  sub_1A15A9204();
  LOBYTE(v40) = 0;
  sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v24 = v30;
  sub_1A15A9264();
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v19 + v26[9], v31, v24);
  LOBYTE(v40) = 1;
  sub_1A15A924C();
  *(_DWORD *)(v19 + v26[10]) = v25;
  v42 = 3;
  sub_1A1285654();
  sub_1A15A9228();
  *(_BYTE *)(v19 + v26[12]) = v40;
  sub_1A12E32A4((uint64_t)v41);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v35);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v37, v21);
  sub_1A128465C((uint64_t)v41, v19 + v26[11]);
  sub_1A1294AF8(v19, v27, (uint64_t (*)(_QWORD))type metadata accessor for DetectedDocumentObservation);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return sub_1A1294B7C(v19, (uint64_t (*)(_QWORD))type metadata accessor for DetectedDocumentObservation);
}

uint64_t sub_1A133EF90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DetectedDocumentObservation.init(from:)(a1, a2);
}

uint64_t sub_1A133EFA4(_QWORD *a1)
{
  return DetectedDocumentObservation.encode(to:)(a1);
}

id sub_1A133EFB8@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  id result;
  void *v19;
  id v20;
  id v21;
  float v22;
  float v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Vision::NormalizedPoint v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Vision::NormalizedPoint v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Vision::NormalizedPoint v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  int v44;
  int v45;
  int *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];

  v8 = sub_1A15A88C8();
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PixelBufferObservation();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v51 - v15;
  v17 = *a2;
  result = objc_msgSend(a1, sel_globalSegmentationMask);
  if (result)
  {
    v19 = result;
    v20 = objc_msgSend(result, sel_pixelBuffer);

    v21 = objc_msgSend(a1, sel_uuid);
    sub_1A15A88B0();

    objc_msgSend(a1, sel_confidence);
    v23 = v22;
    LOBYTE(v60[0]) = v17;
    v24 = v20;
    sub_1A130553C((uint64_t)v10, a3, (char *)v60, (uint64_t)v24, (uint64_t)v16, v23);
    sub_1A1294AF8((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PixelBufferObservation);
    objc_msgSend(a1, sel_topLeft);
    NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v26, v25));
    v27 = v60[1];
    v51 = v60[0];
    objc_msgSend(a1, sel_topRight);
    v30 = NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v29, v28));
    v31 = v58;
    v32 = v59;
    objc_msgSend(a1, sel_bottomRight, v30.cgPoint.x, v30.cgPoint.y);
    v35 = NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v34, v33));
    v36 = v56;
    v37 = v57;
    objc_msgSend(a1, sel_bottomLeft, v35.cgPoint.x, v35.cgPoint.y);
    v40 = NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v39, v38));
    v42 = v54;
    v41 = v55;
    v43 = objc_msgSend(a1, sel_uuid, v40.cgPoint.x, v40.cgPoint.y);
    sub_1A15A88B0();

    objc_msgSend(a1, sel_confidence);
    v45 = v44;

    sub_1A1294B7C((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PixelBufferObservation);
    sub_1A1301710((uint64_t)v14, a4);
    v46 = (int *)type metadata accessor for DetectedDocumentObservation();
    v47 = (_QWORD *)(a4 + v46[5]);
    *v47 = v51;
    v47[1] = v27;
    v48 = (_QWORD *)(a4 + v46[6]);
    *v48 = v31;
    v48[1] = v32;
    v49 = (_QWORD *)(a4 + v46[7]);
    *v49 = v36;
    v49[1] = v37;
    v50 = (_QWORD *)(a4 + v46[8]);
    *v50 = v42;
    v50[1] = v41;
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(a4 + v46[9], v10, v53);
    *(_DWORD *)(a4 + v46[10]) = v45;
    result = (id)sub_1A128465C(a3, a4 + v46[11]);
    *(_BYTE *)(a4 + v46[12]) = v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DetectedDocumentObservation.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  CVPixelBufferRef v19;
  id v20;
  float v21;
  float v22;
  __CVBuffer *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Vision::NormalizedPoint v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Vision::NormalizedPoint v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Vision::NormalizedPoint v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[3];
  char v71;

  v4 = sub_1A15A88C8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PixelBufferObservation();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = MEMORY[0x1E0C80A78](v11).n128_u64[0];
  v14 = (char *)&v55 - v13;
  v15 = objc_msgSend(a1, sel_globalSegmentationMask, v12);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, sel_pixelBuffer);

    v19 = sub_1A12A4B70();
    v58 = v4;

    v20 = objc_msgSend(a1, sel_uuid);
    sub_1A15A88B0();

    objc_msgSend(a1, sel_confidence);
    v22 = v21;
    objc_msgSend(a1, sel_timeRange);
    v71 = 0;
    LOBYTE(v59[0]) = -4;
    v23 = v19;
    sub_1A130553C((uint64_t)v7, (uint64_t)v70, (char *)v59, (uint64_t)v23, (uint64_t)v14, v22);
    sub_1A1294AF8((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PixelBufferObservation);
    objc_msgSend(a1, sel_topLeft);
    NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v25, v24));
    v26 = v69;
    v57 = v68;
    objc_msgSend(a1, sel_topRight);
    v29 = NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v28, v27));
    v30 = v66;
    v31 = v67;
    objc_msgSend(a1, sel_bottomRight, v29.cgPoint.x, v29.cgPoint.y);
    v34 = NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v33, v32));
    v35 = v64;
    v36 = v65;
    objc_msgSend(a1, sel_bottomLeft, v34.cgPoint.x, v34.cgPoint.y);
    v39 = NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v38, v37));
    v40 = v62;
    v41 = v63;
    v42 = objc_msgSend(a1, sel_uuid, v39.cgPoint.x, v39.cgPoint.y);
    sub_1A15A88B0();

    objc_msgSend(a1, sel_confidence);
    v44 = v43;
    objc_msgSend(a1, sel_timeRange);
    v56 = v59[0];
    v55 = v59[1];
    v45 = v60;
    v46 = v61;

    sub_1A1294B7C((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PixelBufferObservation);
    sub_1A1301710((uint64_t)v10, a2);
    v47 = (int *)type metadata accessor for DetectedDocumentObservation();
    v48 = (_QWORD *)(a2 + v47[5]);
    *v48 = v57;
    v48[1] = v26;
    v49 = (_QWORD *)(a2 + v47[6]);
    *v49 = v30;
    v49[1] = v31;
    v50 = (_QWORD *)(a2 + v47[7]);
    *v50 = v35;
    v50[1] = v36;
    v51 = (_QWORD *)(a2 + v47[8]);
    *v51 = v40;
    v51[1] = v41;
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + v47[9], v7, v58);
    *(_DWORD *)(a2 + v47[10]) = v44;
    v52 = a2 + v47[11];
    v53 = v55;
    *(_OWORD *)v52 = v56;
    *(_OWORD *)(v52 + 16) = v53;
    *(_QWORD *)(v52 + 32) = v45;
    *(_QWORD *)(v52 + 40) = v46;
    *(_BYTE *)(v52 + 48) = 0;
    *(_BYTE *)(a2 + v47[12]) = -4;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v47 - 1) + 56))(a2, 0, 1, v47);
  }
  else
  {

    v18 = type metadata accessor for DetectedDocumentObservation();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

id sub_1A133F700@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v5;

  v5 = *a2;
  return sub_1A133EFB8(a1, &v5, a3, a4);
}

uint64_t _s6Vision27DetectedDocumentObservationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  if ((static PixelBufferObservation.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for DetectedDocumentObservation();
  v5 = v4[5];
  v30[0] = *(_OWORD *)(a1 + v5);
  v27[0] = *(_OWORD *)(a2 + v5);
  if (!static NormalizedPoint.== infix(_:_:)((double *)v30, (double *)v27))
    return 0;
  v6 = v4[6];
  v30[0] = *(_OWORD *)(a1 + v6);
  v27[0] = *(_OWORD *)(a2 + v6);
  if (!static NormalizedPoint.== infix(_:_:)((double *)v30, (double *)v27))
    return 0;
  v7 = v4[7];
  v30[0] = *(_OWORD *)(a1 + v7);
  v27[0] = *(_OWORD *)(a2 + v7);
  if (!static NormalizedPoint.== infix(_:_:)((double *)v30, (double *)v27))
    return 0;
  v8 = v4[8];
  v30[0] = *(_OWORD *)(a1 + v8);
  v27[0] = *(_OWORD *)(a2 + v8);
  if (!static NormalizedPoint.== infix(_:_:)((double *)v30, (double *)v27)
    || (sub_1A15A88A4() & 1) == 0
    || *(float *)(a1 + v4[10]) != *(float *)(a2 + v4[10]))
  {
    return 0;
  }
  v9 = v4[11];
  v10 = (uint64_t *)(a1 + v9);
  v11 = *(_BYTE *)(a1 + v9 + 48);
  v12 = (uint64_t *)(a2 + v9);
  if ((v11 & 1) == 0)
  {
    if ((v12[6] & 1) != 0)
      return 0;
    v13 = *v10;
    v14 = v10[1];
    v15 = *((_OWORD *)v10 + 1);
    v17 = v10[4];
    v16 = v10[5];
    v18 = *v12;
    v19 = v12[1];
    v20 = *((_OWORD *)v12 + 1);
    v22 = v12[4];
    v21 = v12[5];
    *(_QWORD *)&v27[0] = v13;
    *((_QWORD *)&v27[0] + 1) = v14;
    v27[1] = v15;
    v28 = v17;
    v29 = v16;
    *(_QWORD *)&v30[0] = v18;
    *((_QWORD *)&v30[0] + 1) = v19;
    v30[1] = v20;
    v31 = v22;
    v32 = v21;
    if ((sub_1A15A8EC8() & 1) == 0)
      return 0;
LABEL_13:
    v23 = v4[12];
    v24 = *(unsigned __int8 *)(a1 + v23);
    v25 = *(unsigned __int8 *)(a2 + v23);
    if (v24 <= 0xFB)
    {
      if (v25 > 0xFB)
        return 0;
      sub_1A12862A0();
      if ((sub_1A15A8B80() & 1) == 0)
        return 0;
    }
    else if (v25 <= 0xFB)
    {
      return 0;
    }
    return 1;
  }
  if (*((_BYTE *)v12 + 48))
    goto LABEL_13;
  return 0;
}

unint64_t sub_1A133F904()
{
  unint64_t result;

  result = qword_1EE62A8D0[0];
  if (!qword_1EE62A8D0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D61D0, &type metadata for DetectedDocumentObservation.CodingKeys);
    atomic_store(result, qword_1EE62A8D0);
  }
  return result;
}

uint64_t sub_1A133F948(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE5FFC78, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
  a1[2] = sub_1A12857D8(&qword_1EE5FFC80, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
  a1[3] = sub_1A12857D8(&qword_1EE5FFC88, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
  result = sub_1A12857D8(&qword_1EE5FFC60, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A133F9DC()
{
  return sub_1A12857D8(&qword_1EE5FDCA8, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
}

uint64_t sub_1A133FA08(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FFC58, (uint64_t (*)(uint64_t))type metadata accessor for DetectedDocumentObservation, (uint64_t)&protocol conformance descriptor for DetectedDocumentObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for DetectedDocumentObservation(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  id v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A15A88C8();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = (int *)type metadata accessor for PixelBufferObservation();
    *(_DWORD *)&a1[v9[5]] = *(_DWORD *)&a2[v9[5]];
    v10 = v9[6];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v11[48] = v12[48];
    v13 = *((_OWORD *)v12 + 2);
    v14 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
    *((_OWORD *)v11 + 2) = v13;
    *(_OWORD *)v11 = v14;
    a1[v9[7]] = a2[v9[7]];
    v15 = v9[8];
    v16 = *(void **)&a2[v15];
    *(_QWORD *)&a1[v15] = v16;
    v17 = a3[6];
    *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
    *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
    v18 = a3[8];
    *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
    *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
    v19 = a3[9];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = v16;
    v8(v20, v21, v7);
    v23 = a3[11];
    *(_DWORD *)&a1[a3[10]] = *(_DWORD *)&a2[a3[10]];
    v24 = &a1[v23];
    v25 = &a2[v23];
    v26 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v26;
    *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
    v24[48] = v25[48];
    a1[a3[12]] = a2[a3[12]];
  }
  return a1;
}

uint64_t destroy for DetectedDocumentObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = sub_1A15A88C8();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);

  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 36), v4);
}

uint64_t initializeWithCopy for DetectedDocumentObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v6 = sub_1A15A88C8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for PixelBufferObservation();
  *(_DWORD *)(a1 + v8[5]) = *(_DWORD *)(a2 + v8[5]);
  v9 = v8[6];
  v10 = a1 + v9;
  v11 = (__int128 *)(a2 + v9);
  *(_BYTE *)(v10 + 48) = *((_BYTE *)v11 + 48);
  v12 = v11[2];
  v13 = *v11;
  *(_OWORD *)(v10 + 16) = v11[1];
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)v10 = v13;
  *(_BYTE *)(a1 + v8[7]) = *(_BYTE *)(a2 + v8[7]);
  v14 = v8[8];
  v15 = *(void **)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  v16 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = v15;
  v7(v19, v20, v6);
  v22 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(_BYTE *)(v23 + 48) = *(_BYTE *)(v24 + 48);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithCopy for DetectedDocumentObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;

  v6 = sub_1A15A88C8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for PixelBufferObservation();
  *(_DWORD *)(a1 + v8[5]) = *(_DWORD *)(a2 + v8[5]);
  v9 = v8[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_BYTE *)(v11 + 48);
  v14 = *(_OWORD *)(v11 + 16);
  v13 = *(_OWORD *)(v11 + 32);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v14;
  *(_OWORD *)(v10 + 32) = v13;
  *(_BYTE *)(v10 + 48) = v12;
  *(_BYTE *)(a1 + v8[7]) = *(_BYTE *)(a2 + v8[7]);
  v15 = v8[8];
  v16 = *(void **)(a2 + v15);
  v17 = *(void **)(a1 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  v18 = v16;

  v19 = a3[5];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  v22 = a3[6];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  v25 = a3[7];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  v28 = a3[8];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  v7(a1 + a3[9], a2 + a3[9], v6);
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_BYTE *)(v33 + 48);
  v36 = *(_OWORD *)(v33 + 16);
  v35 = *(_OWORD *)(v33 + 32);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *(_OWORD *)(v32 + 16) = v36;
  *(_OWORD *)(v32 + 32) = v35;
  *(_BYTE *)(v32 + 48) = v34;
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for DetectedDocumentObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = sub_1A15A88C8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for PixelBufferObservation();
  *(_DWORD *)(a1 + v8[5]) = *(_DWORD *)(a2 + v8[5]);
  v9 = v8[6];
  v10 = a1 + v9;
  v11 = (__int128 *)(a2 + v9);
  *(_BYTE *)(v10 + 48) = *((_BYTE *)v11 + 48);
  v12 = v11[2];
  v13 = *v11;
  *(_OWORD *)(v10 + 16) = v11[1];
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)v10 = v13;
  *(_BYTE *)(a1 + v8[7]) = *(_BYTE *)(a2 + v8[7]);
  *(_QWORD *)(a1 + v8[8]) = *(_QWORD *)(a2 + v8[8]);
  v14 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v16 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
  *(_BYTE *)(v17 + 48) = *(_BYTE *)(v18 + 48);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for DetectedDocumentObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v6 = sub_1A15A88C8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for PixelBufferObservation();
  *(_DWORD *)(a1 + v8[5]) = *(_DWORD *)(a2 + v8[5]);
  v9 = v8[6];
  v10 = a1 + v9;
  v11 = (__int128 *)(a2 + v9);
  *(_BYTE *)(v10 + 48) = *((_BYTE *)v11 + 48);
  v12 = v11[2];
  v13 = *v11;
  *(_OWORD *)(v10 + 16) = v11[1];
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)v10 = v13;
  *(_BYTE *)(a1 + v8[7]) = *(_BYTE *)(a2 + v8[7]);
  v14 = v8[8];
  v15 = *(void **)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);

  v16 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v18 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
  *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectedDocumentObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A1340120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;

  v6 = type metadata accessor for PixelBufferObservation();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1A15A88C8();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 48));
  v15 = ((v14 >> 3) & 0xFFFFFFDF | (32 * ((v14 >> 2) & 1))) ^ 0x3F;
  if (v15 >= 0x21)
    return 0;
  else
    return v15;
}

uint64_t storeEnumTagSinglePayload for DetectedDocumentObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A13401DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for PixelBufferObservation();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1A15A88C8();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 48)) = ((~(_DWORD)a2 & 0x20u) >> 3) | (8 * ~(_BYTE)a2);
  return result;
}

uint64_t sub_1A1340290()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for PixelBufferObservation();
  if (v1 <= 0x3F)
  {
    result = sub_1A15A88C8();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DetectedDocumentObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A1340390 + 4 * byte_1A15D5F05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A13403C4 + 4 * asc_1A15D5F00[v4]))();
}

uint64_t sub_1A13403C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13403CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A13403D4);
  return result;
}

uint64_t sub_1A13403E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A13403E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A13403EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13403F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DetectedDocumentObservation.CodingKeys()
{
  return &type metadata for DetectedDocumentObservation.CodingKeys;
}

unint64_t sub_1A1340414()
{
  unint64_t result;

  result = qword_1EE62AD70[0];
  if (!qword_1EE62AD70[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D61A8, &type metadata for DetectedDocumentObservation.CodingKeys);
    atomic_store(result, qword_1EE62AD70);
  }
  return result;
}

unint64_t sub_1A134045C()
{
  unint64_t result;

  result = qword_1EE62AE80;
  if (!qword_1EE62AE80)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6118, &type metadata for DetectedDocumentObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AE80);
  }
  return result;
}

unint64_t sub_1A13404A4()
{
  unint64_t result;

  result = qword_1EE62AE88[0];
  if (!qword_1EE62AE88[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6140, &type metadata for DetectedDocumentObservation.CodingKeys);
    atomic_store(result, qword_1EE62AE88);
  }
  return result;
}

uint64_t sub_1A13404E8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C676E6174636572 && a2 == 0xE900000000000065 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A15FDBB0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A1340660(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _QWORD v4[2];

  strcpy((char *)v4, "boundingBox: ");
  HIWORD(v4[1]) = -4864;
  (*(void (**)(__int128 *__return_ptr))(a2 + 8))(&v3);
  sub_1A13406E8();
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  return v4[0];
}

unint64_t sub_1A13406E8()
{
  unint64_t result;

  result = qword_1EE5FFC90;
  if (!qword_1EE5FFC90)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for NormalizedRect, &type metadata for NormalizedRect);
    atomic_store(result, (unint64_t *)&qword_1EE5FFC90);
  }
  return result;
}

uint64_t dispatch thunk of BoundingBoxProviding.boundingBox.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void RequestDescriptor.description.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1A1340768()
{
  sub_1A1340FFC();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  sub_1A15A9180();
  return 0;
}

uint64_t sub_1A1340FFC()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[4];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = 0x526E776F6E6B6E55;
  v2 = sub_1A15A9444();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v4) = *v0;
  v25[3] = &type metadata for RequestDescriptor;
  LOBYTE(v25[0]) = v4;
  sub_1A15A942C();
  sub_1A15A9438();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1A13411DC(&v26);
  swift_release();
  if (v29)
  {
    v6 = v26;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    if (*((_QWORD *)&v6 + 1))
    {
      swift_bridgeObjectRetain();
      v7 = sub_1A1346610(1);
      v9 = v8;
      v11 = v10;
      v13 = v12;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v26 = v7;
      *((_QWORD *)&v26 + 1) = v9;
      v27 = v11;
      v28 = v13;
      sub_1A1346698();
      v14 = sub_1A15A903C();
      v16 = v15;
      swift_bridgeObjectRelease();
      v17 = sub_1A13466DC(1uLL, v6, *((unint64_t *)&v6 + 1));
      v19 = v18;
      v21 = v20;
      v23 = v22;
      swift_bridgeObjectRelease();
      v25[0] = v14;
      v25[1] = v16;
      *(_QWORD *)&v26 = v17;
      *((_QWORD *)&v26 + 1) = v19;
      v27 = v21;
      v28 = v23;
      sub_1A1346778();
      swift_bridgeObjectRetain();
      sub_1A15A8BE0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v25[0];
    }
  }
  else
  {
    sub_1A13412E4((uint64_t)&v26);
  }
  return v1;
}

uint64_t sub_1A13411DC@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v2 = sub_1A15A90A8();
  swift_getObjectType();
  result = sub_1A15A90A8();
  if (v2 == result)
  {
    v4 = sub_1A15A90B4();
    swift_unknownObjectRelease();
    if ((v4 & 1) != 0)
    {
      result = swift_unknownObjectRelease();
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
    }
    else
    {
      sub_1A15A9198();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A13412E4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFC98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void RequestDescriptor.hash(into:)()
{
  __asm { BR              X11 }
}

uint64_t sub_1A1341360()
{
  sub_1A15A93F0();
  sub_1A1347318();
  return sub_1A15A8B44();
}

uint64_t sub_1A134177C()
{
  return 12383;
}

uint64_t sub_1A134178C()
{
  sub_1A1348308();
  return sub_1A15A9474();
}

uint64_t sub_1A13417B4()
{
  sub_1A1348308();
  return sub_1A15A9480();
}

uint64_t sub_1A13417DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A1341814 + 4 * byte_1A15D629D[a1]))(0xD000000000000014, 0x80000001A15FDC90);
}

uint64_t sub_1A1341814(uint64_t a1)
{
  return a1 + 17;
}

uint64_t sub_1A1341A08()
{
  sub_1A1348390();
  return sub_1A15A9474();
}

uint64_t sub_1A1341A30()
{
  sub_1A1348390();
  return sub_1A15A9480();
}

uint64_t sub_1A1341A58()
{
  unsigned __int8 *v0;

  return sub_1A13417DC(*v0);
}

uint64_t sub_1A1341A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A134AD18(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A1341A84(_BYTE *a1@<X8>)
{
  *a1 = 31;
}

uint64_t sub_1A1341A90()
{
  sub_1A134735C();
  return sub_1A15A9474();
}

uint64_t sub_1A1341AB8()
{
  sub_1A134735C();
  return sub_1A15A9480();
}

uint64_t sub_1A1341AE0()
{
  sub_1A1348280();
  return sub_1A15A9474();
}

uint64_t sub_1A1341B08()
{
  sub_1A1348280();
  return sub_1A15A9480();
}

uint64_t sub_1A1341B30()
{
  sub_1A13481F8();
  return sub_1A15A9474();
}

uint64_t sub_1A1341B58()
{
  sub_1A13481F8();
  return sub_1A15A9480();
}

uint64_t sub_1A1341B80()
{
  sub_1A1348170();
  return sub_1A15A9474();
}

uint64_t sub_1A1341BA8()
{
  sub_1A1348170();
  return sub_1A15A9480();
}

uint64_t sub_1A1341BD0()
{
  sub_1A13480E8();
  return sub_1A15A9474();
}

uint64_t sub_1A1341BF8()
{
  sub_1A13480E8();
  return sub_1A15A9480();
}

uint64_t sub_1A1341C20()
{
  sub_1A1348060();
  return sub_1A15A9474();
}

uint64_t sub_1A1341C48()
{
  sub_1A1348060();
  return sub_1A15A9480();
}

uint64_t sub_1A1341C70()
{
  sub_1A1347FD8();
  return sub_1A15A9474();
}

uint64_t sub_1A1341C98()
{
  sub_1A1347FD8();
  return sub_1A15A9480();
}

uint64_t sub_1A1341CC0()
{
  sub_1A1347EC8();
  return sub_1A15A9474();
}

uint64_t sub_1A1341CE8()
{
  sub_1A1347EC8();
  return sub_1A15A9480();
}

uint64_t sub_1A1341D10()
{
  sub_1A1347F50();
  return sub_1A15A9474();
}

uint64_t sub_1A1341D38()
{
  sub_1A1347F50();
  return sub_1A15A9480();
}

uint64_t sub_1A1341D60()
{
  sub_1A1347E40();
  return sub_1A15A9474();
}

uint64_t sub_1A1341D88()
{
  sub_1A1347E40();
  return sub_1A15A9480();
}

uint64_t sub_1A1341DB0()
{
  sub_1A1347D30();
  return sub_1A15A9474();
}

uint64_t sub_1A1341DD8()
{
  sub_1A1347D30();
  return sub_1A15A9480();
}

uint64_t sub_1A1341E00()
{
  sub_1A1347DB8();
  return sub_1A15A9474();
}

uint64_t sub_1A1341E28()
{
  sub_1A1347DB8();
  return sub_1A15A9480();
}

uint64_t sub_1A1341E50()
{
  sub_1A1347CA8();
  return sub_1A15A9474();
}

uint64_t sub_1A1341E78()
{
  sub_1A1347CA8();
  return sub_1A15A9480();
}

uint64_t sub_1A1341EA0()
{
  sub_1A1347C20();
  return sub_1A15A9474();
}

uint64_t sub_1A1341EC8()
{
  sub_1A1347C20();
  return sub_1A15A9480();
}

uint64_t sub_1A1341EF0()
{
  sub_1A1347B98();
  return sub_1A15A9474();
}

uint64_t sub_1A1341F18()
{
  sub_1A1347B98();
  return sub_1A15A9480();
}

uint64_t sub_1A1341F40()
{
  sub_1A1347B10();
  return sub_1A15A9474();
}

uint64_t sub_1A1341F68()
{
  sub_1A1347B10();
  return sub_1A15A9480();
}

uint64_t sub_1A1341F90()
{
  sub_1A1347A88();
  return sub_1A15A9474();
}

uint64_t sub_1A1341FB8()
{
  sub_1A1347A88();
  return sub_1A15A9480();
}

uint64_t sub_1A1341FE0()
{
  sub_1A1347A00();
  return sub_1A15A9474();
}

uint64_t sub_1A1342008()
{
  sub_1A1347A00();
  return sub_1A15A9480();
}

uint64_t sub_1A1342030()
{
  sub_1A13478F0();
  return sub_1A15A9474();
}

uint64_t sub_1A1342058()
{
  sub_1A13478F0();
  return sub_1A15A9480();
}

uint64_t sub_1A1342080()
{
  sub_1A1347978();
  return sub_1A15A9474();
}

uint64_t sub_1A13420A8()
{
  sub_1A1347978();
  return sub_1A15A9480();
}

uint64_t sub_1A13420D0()
{
  sub_1A1347868();
  return sub_1A15A9474();
}

uint64_t sub_1A13420F8()
{
  sub_1A1347868();
  return sub_1A15A9480();
}

uint64_t sub_1A1342120()
{
  sub_1A1347758();
  return sub_1A15A9474();
}

uint64_t sub_1A1342148()
{
  sub_1A1347758();
  return sub_1A15A9480();
}

uint64_t sub_1A1342170()
{
  sub_1A13477E0();
  return sub_1A15A9474();
}

uint64_t sub_1A1342198()
{
  sub_1A13477E0();
  return sub_1A15A9480();
}

uint64_t sub_1A13421C0()
{
  sub_1A13476D0();
  return sub_1A15A9474();
}

uint64_t sub_1A13421E8()
{
  sub_1A13476D0();
  return sub_1A15A9480();
}

uint64_t sub_1A1342210()
{
  sub_1A1347648();
  return sub_1A15A9474();
}

uint64_t sub_1A1342238()
{
  sub_1A1347648();
  return sub_1A15A9480();
}

uint64_t sub_1A1342260()
{
  sub_1A13475C0();
  return sub_1A15A9474();
}

uint64_t sub_1A1342288()
{
  sub_1A13475C0();
  return sub_1A15A9480();
}

uint64_t sub_1A13422B0()
{
  sub_1A1347538();
  return sub_1A15A9474();
}

uint64_t sub_1A13422D8()
{
  sub_1A1347538();
  return sub_1A15A9480();
}

uint64_t sub_1A1342300()
{
  sub_1A13474B0();
  return sub_1A15A9474();
}

uint64_t sub_1A1342328()
{
  sub_1A13474B0();
  return sub_1A15A9480();
}

uint64_t sub_1A1342350()
{
  sub_1A1347428();
  return sub_1A15A9474();
}

uint64_t sub_1A1342378()
{
  sub_1A1347428();
  return sub_1A15A9480();
}

uint64_t sub_1A13423A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A15A9354();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A134241C()
{
  sub_1A13473A0();
  return sub_1A15A9474();
}

uint64_t sub_1A1342444()
{
  sub_1A13473A0();
  return sub_1A15A9480();
}

void RequestDescriptor.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDA8);
  v129 = *(_QWORD *)(v3 - 8);
  v130 = v3;
  MEMORY[0x1E0C80A78](v3);
  v128 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDB0);
  v126 = *(_QWORD *)(v5 - 8);
  v127 = v5;
  MEMORY[0x1E0C80A78](v5);
  v125 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDB8);
  v123 = *(_QWORD *)(v7 - 8);
  v124 = v7;
  MEMORY[0x1E0C80A78](v7);
  v122 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDC0);
  v120 = *(_QWORD *)(v9 - 8);
  v121 = v9;
  MEMORY[0x1E0C80A78](v9);
  v119 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDC8);
  v117 = *(_QWORD *)(v11 - 8);
  v118 = v11;
  MEMORY[0x1E0C80A78](v11);
  v116 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDD0);
  v114 = *(_QWORD *)(v13 - 8);
  v115 = v13;
  MEMORY[0x1E0C80A78](v13);
  v113 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDD8);
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112);
  v110 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDE0);
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v107 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDE8);
  v105 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106);
  v104 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDF0);
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v101 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFDF8);
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v98 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE00);
  v96 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97);
  v95 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE08);
  v93 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v92 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE10);
  v90 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v89 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE18);
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v86 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE20);
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v83 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE28);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v80 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE30);
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v77 = (char *)&v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE38);
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v74 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE40);
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v71 = (char *)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE48);
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v68 = (char *)&v42 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE50);
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v65 = (char *)&v42 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE58);
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v62 = (char *)&v42 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE60);
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v59 = (char *)&v42 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE68);
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v56 = (char *)&v42 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE70);
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v53 = (char *)&v42 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE78);
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v50 = (char *)&v42 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE80);
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v47 = (char *)&v42 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE88);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v44 = (char *)&v42 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE90);
  v42 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFE98);
  MEMORY[0x1E0C80A78](v38);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFEA0);
  v131 = *(_QWORD *)(v133 - 8);
  MEMORY[0x1E0C80A78](v133);
  v40 = (char *)&v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A134735C();
  v132 = v40;
  sub_1A15A9468();
  __asm { BR              X10 }
}

uint64_t sub_1A1342E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 65) = 0;
  sub_1A1348390();
  v5 = *(_QWORD *)(v3 - 104);
  v4 = *(_QWORD *)(v3 - 96);
  sub_1A15A92AC();
  sub_1A13483D4();
  sub_1A15A92F4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 112) + 8))(v5, v4);
}

void sub_1A1343954()
{
  char v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = 24;
  sub_1A13476D0();
  sub_1A15A92AC();
  *(_BYTE *)(v1 - 65) = v0 & 1;
  sub_1A1347714();
  sub_1A15A92F4();
  JUMPOUT(0x1A13439CCLL);
}

void sub_1A13439F4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 25;
  sub_1A1347648();
  sub_1A15A92AC();
  sub_1A134768C();
  sub_1A15A92F4();
  JUMPOUT(0x1A134390CLL);
}

void sub_1A1343A60()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 26;
  sub_1A13475C0();
  sub_1A15A92AC();
  sub_1A1347604();
  sub_1A15A92F4();
  JUMPOUT(0x1A134390CLL);
}

void sub_1A1343AC8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 27;
  sub_1A1347538();
  sub_1A15A92AC();
  sub_1A134757C();
  sub_1A15A92F4();
  JUMPOUT(0x1A134390CLL);
}

void sub_1A1343B30()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 28;
  sub_1A13474B0();
  sub_1A15A92AC();
  sub_1A13474F4();
  sub_1A15A92F4();
  JUMPOUT(0x1A134390CLL);
}

void sub_1A1343B98()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 29;
  sub_1A1347428();
  sub_1A15A92AC();
  sub_1A134746C();
  sub_1A15A92F4();
  JUMPOUT(0x1A134390CLL);
}

void sub_1A1343C00()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 30;
  sub_1A13473A0();
  sub_1A15A92AC();
  sub_1A13473E4();
  sub_1A15A92F4();
  JUMPOUT(0x1A134390CLL);
}

uint64_t RequestDescriptor.hashValue.getter()
{
  sub_1A15A93E4();
  RequestDescriptor.hash(into:)();
  return sub_1A15A9420();
}

uint64_t RequestDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD v48[32];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;

  v106 = a2;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFA0);
  v111 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v105 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFA8);
  v110 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v104 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFB0);
  v48[31] = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v103 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFB8);
  v48[30] = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v102 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFC0);
  v48[4] = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v101 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFC8);
  v48[29] = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v100 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFD0);
  v48[28] = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v99 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFD8);
  v48[27] = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v98 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFE0);
  v48[26] = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v97 = (char *)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFE8);
  v48[25] = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v96 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFF0);
  v48[24] = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v95 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFFF8);
  v48[23] = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v94 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600000);
  v48[22] = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v93 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600008);
  v48[21] = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v92 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600010);
  v48[20] = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v91 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600018);
  v48[19] = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v90 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600020);
  v48[18] = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v89 = (char *)v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600028);
  v48[17] = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v109 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600030);
  v48[16] = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v88 = (char *)v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600038);
  v48[14] = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v87 = (char *)v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600040);
  v48[15] = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v85 = (char *)v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600048);
  v48[13] = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v108 = (char *)v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600050);
  v48[12] = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v86 = (char *)v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600058);
  v48[11] = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v107 = (char *)v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600060);
  v48[10] = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v84 = (char *)v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600068);
  v48[9] = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v83 = (char *)v48 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600070);
  v48[8] = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v82 = (char *)v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600078);
  v48[7] = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v81 = (char *)v48 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600080);
  v48[6] = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v80 = (char *)v48 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600088);
  v48[5] = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v79 = (char *)v48 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600090);
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)v48 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600098);
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v40 = (char *)v48 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1[3];
  v112 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v41);
  sub_1A134735C();
  v42 = v113;
  sub_1A15A945C();
  if (!v42)
  {
    v48[2] = v36;
    v48[0] = v34;
    v48[1] = v33;
    v48[3] = 0;
    v113 = v38;
    v43 = sub_1A15A9294();
    if (*(_QWORD *)(v43 + 16) == 1)
      __asm { BR              X10 }
    v44 = sub_1A15A90F0();
    swift_allocError();
    v46 = v45;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v46 = &type metadata for RequestDescriptor;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v46, *MEMORY[0x1E0DEC450], v44);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v40, v37);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
}

void sub_1A1345C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 - 65) = 30;
  sub_1A13473A0();
  v4 = *(_QWORD *)(v3 - 160);
  v5 = *(_QWORD *)(v3 - 840);
  sub_1A15A9204();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 96) + 8))(v2, v0);
  }
  else
  {
    sub_1A1348418();
    v6 = *(_QWORD *)(v3 - 376);
    sub_1A15A9264();
    v7 = *(_QWORD *)(v3 - 96);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v0);
    **(_BYTE **)(v3 - 152) = -16;
  }
  JUMPOUT(0x1A1345BE4);
}

uint64_t sub_1A1345FF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RequestDescriptor.init(from:)(a1, a2);
}

void sub_1A1346004(_QWORD *a1)
{
  RequestDescriptor.encode(to:)(a1);
}

uint64_t sub_1A1346018()
{
  sub_1A15A93E4();
  RequestDescriptor.hash(into:)();
  return sub_1A15A9420();
}

uint64_t sub_1A1346064()
{
  sub_1A15A93E4();
  RequestDescriptor.hash(into:)();
  return sub_1A15A9420();
}

void sub_1A13460A8()
{
  __asm { BR              X11 }
}

uint64_t sub_1A13460D8()
{
  return sub_1A12CC91C();
}

id sub_1A1346204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v0 = sub_1A1340FFC();
  v2 = sub_1A12EBDE0(v0, v1);
  v4 = v3;
  swift_bridgeObjectRelease();
  if (!v4)
    return 0;
  sub_1A13460A8();
  if ((v6 & 1) != 0)
    v7 = 0;
  else
    v7 = v5;
  sub_1A1348C54();
  return sub_1A13462A0(v2, v4, v7);
}

id sub_1A13462A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_specifierForRequestClassName_revision_error_, v4, a3, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    sub_1A15A8844();

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_1A1346384@<X0>(char *a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  char v10;
  id v11;
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, sel_requestClassName);
  v5 = sub_1A15A8BB0();
  v7 = v6;

  if (v5 == 0xD00000000000001DLL && v7 == 0x80000001A15FDBD0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    result = sub_1A1309990((uint64_t)objc_msgSend(v2, sel_requestRevision), (char *)&v12);
    if (v12 != 3)
    {
      v9 = v12 | 0x40;
      goto LABEL_7;
    }
LABEL_5:
    v9 = -4;
LABEL_7:
    *a1 = v9;
    return result;
  }
  if (v5 == 0xD000000000000021 && v7 == 0x80000001A15FDBF0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    result = sub_1A12D0E14((uint64_t)objc_msgSend(v2, sel_requestRevision), (BOOL *)&v12);
    if ((v12 & 1) == 0)
    {
      v9 = 56;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (v5 == 0xD00000000000001CLL && v7 == 0x80000001A15FDC20)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v10 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_17:
    result = sub_1A12D0E14((uint64_t)objc_msgSend(v2, sel_requestRevision), (BOOL *)&v12);
    if ((v12 & 1) == 0)
    {
      v9 = 72;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  sub_1A15A9090();
  v11 = objc_msgSend(v2, sel_requestClassName);
  sub_1A15A8BB0();
  swift_bridgeObjectRelease();

  sub_1A15A8BEC();
  result = sub_1A15A91A4();
  __break(1u);
  return result;
}

uint64_t sub_1A1346610(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1A15A8BD4();
    return sub_1A15A8BF8();
  }
  return result;
}

unint64_t sub_1A1346698()
{
  unint64_t result;

  result = qword_1EE5FFCA0;
  if (!qword_1EE5FFCA0)
  {
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCA0);
  }
  return result;
}

unint64_t sub_1A13466DC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_1A15A8BD4();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_1A15A8BF8();
  }
  __break(1u);
  return result;
}

unint64_t sub_1A1346778()
{
  unint64_t result;

  result = qword_1EE5FFCA8;
  if (!qword_1EE5FFCA8)
  {
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCA8);
  }
  return result;
}

void _s6Vision17RequestDescriptorO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1A13467EC@<X0>(unsigned int a1@<W8>)
{
  if (a1 > 7)
    return 0;
  else
    return static ClassifyImageRequest.Revision.== infix(_:_:)();
}

unint64_t sub_1A1346B20()
{
  unint64_t result;

  result = qword_1EE5FFCB0;
  if (!qword_1EE5FFCB0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest.Revision, &type metadata for TrackTranslationalImageRegistrationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCB0);
  }
  return result;
}

unint64_t sub_1A1346B64()
{
  unint64_t result;

  result = qword_1EE5FFCB8;
  if (!qword_1EE5FFCB8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackRectangleRequest.Revision, &type metadata for TrackRectangleRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCB8);
  }
  return result;
}

unint64_t sub_1A1346BA8()
{
  unint64_t result;

  result = qword_1EE5FFCC0;
  if (!qword_1EE5FFCC0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackOpticalFlowRequest.Revision, &type metadata for TrackOpticalFlowRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCC0);
  }
  return result;
}

unint64_t sub_1A1346BEC()
{
  unint64_t result;

  result = qword_1EE5FFCC8;
  if (!qword_1EE5FFCC8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackObjectRequest.Revision, &type metadata for TrackObjectRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCC8);
  }
  return result;
}

unint64_t sub_1A1346C30()
{
  unint64_t result;

  result = qword_1EE5FFCD0;
  if (!qword_1EE5FFCD0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackHomographicImageRegistrationRequest.Revision, &type metadata for TrackHomographicImageRegistrationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCD0);
  }
  return result;
}

unint64_t sub_1A1346C74()
{
  unint64_t result;

  result = qword_1EE5FFCD8;
  if (!qword_1EE5FFCD8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeTextRequest.Revision, &type metadata for RecognizeTextRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCD8);
  }
  return result;
}

unint64_t sub_1A1346CB8()
{
  unint64_t result;

  result = qword_1EE5FFCE0;
  if (!qword_1EE5FFCE0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeAnimalsRequest.Revision, &type metadata for RecognizeAnimalsRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCE0);
  }
  return result;
}

unint64_t sub_1A1346CFC()
{
  unint64_t result;

  result = qword_1EE5FFCE8;
  if (!qword_1EE5FFCE8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GeneratePersonInstanceMaskRequest.Revision, &type metadata for GeneratePersonInstanceMaskRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCE8);
  }
  return result;
}

unint64_t sub_1A1346D40()
{
  unint64_t result;

  result = qword_1EE5FFCF0;
  if (!qword_1EE5FFCF0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GeneratePersonSegmentationRequest.Revision, &type metadata for GeneratePersonSegmentationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCF0);
  }
  return result;
}

unint64_t sub_1A1346D84()
{
  unint64_t result;

  result = qword_1EE5FFCF8;
  if (!qword_1EE5FFCF8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateObjectnessBasedSaliencyImageRequest.Revision, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFCF8);
  }
  return result;
}

unint64_t sub_1A1346DC8()
{
  unint64_t result;

  result = qword_1EE5FFD00;
  if (!qword_1EE5FFD00)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateForegroundInstanceMaskRequest.Revision, &type metadata for GenerateForegroundInstanceMaskRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD00);
  }
  return result;
}

unint64_t sub_1A1346E0C()
{
  unint64_t result;

  result = qword_1EE5FFD08;
  if (!qword_1EE5FFD08)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateImageFeaturePrintRequest.Revision, &type metadata for GenerateImageFeaturePrintRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD08);
  }
  return result;
}

unint64_t sub_1A1346E50()
{
  unint64_t result;

  result = qword_1EE5FFD10;
  if (!qword_1EE5FFD10)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateAttentionBasedSaliencyImageRequest.Revision, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD10);
  }
  return result;
}

unint64_t sub_1A1346E94()
{
  unint64_t result;

  result = qword_1EE5FFD18;
  if (!qword_1EE5FFD18)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectTrajectoriesRequest.Revision, &type metadata for DetectTrajectoriesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD18);
  }
  return result;
}

unint64_t sub_1A1346ED8()
{
  unint64_t result;

  result = qword_1EE5FFD20;
  if (!qword_1EE5FFD20)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectTextRectanglesRequest.Revision, &type metadata for DetectTextRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD20);
  }
  return result;
}

unint64_t sub_1A1346F1C()
{
  unint64_t result;

  result = qword_1EE5FFD28;
  if (!qword_1EE5FFD28)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectRectanglesRequest.Revision, &type metadata for DetectRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD28);
  }
  return result;
}

unint64_t sub_1A1346F60()
{
  unint64_t result;

  result = qword_1EE5FFD30;
  if (!qword_1EE5FFD30)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanRectanglesRequest.Revision, &type metadata for DetectHumanRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD30);
  }
  return result;
}

unint64_t sub_1A1346FA4()
{
  unint64_t result;

  result = qword_1EE5FFD38;
  if (!qword_1EE5FFD38)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanHandPoseRequest.Revision, &type metadata for DetectHumanHandPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD38);
  }
  return result;
}

unint64_t sub_1A1346FE8()
{
  unint64_t result;

  result = qword_1EE5FFD40;
  if (!qword_1EE5FFD40)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPose3DRequest.Revision, &type metadata for DetectHumanBodyPose3DRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD40);
  }
  return result;
}

unint64_t sub_1A134702C()
{
  unint64_t result;

  result = qword_1EE5FFD48;
  if (!qword_1EE5FFD48)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPoseRequest.Revision, &type metadata for DetectHumanBodyPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD48);
  }
  return result;
}

unint64_t sub_1A1347070()
{
  unint64_t result;

  result = qword_1EE5FFD50;
  if (!qword_1EE5FFD50)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHorizonRequest.Revision, &type metadata for DetectHorizonRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD50);
  }
  return result;
}

unint64_t sub_1A13470B4()
{
  unint64_t result;

  result = qword_1EE5FFD58;
  if (!qword_1EE5FFD58)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceLandmarksRequest.Revision, &type metadata for DetectFaceLandmarksRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD58);
  }
  return result;
}

unint64_t sub_1A13470F8()
{
  unint64_t result;

  result = qword_1EE5FFD60;
  if (!qword_1EE5FFD60)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceRectanglesRequest.Revision, &type metadata for DetectFaceRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD60);
  }
  return result;
}

unint64_t sub_1A134713C()
{
  unint64_t result;

  result = qword_1EE5FFD68;
  if (!qword_1EE5FFD68)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceCaptureQualityRequest.Revision, &type metadata for DetectFaceCaptureQualityRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD68);
  }
  return result;
}

unint64_t sub_1A1347180()
{
  unint64_t result;

  result = qword_1EE5FFD70;
  if (!qword_1EE5FFD70)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectDocumentSegmentationRequest.Revision, &type metadata for DetectDocumentSegmentationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD70);
  }
  return result;
}

unint64_t sub_1A13471C4()
{
  unint64_t result;

  result = qword_1EE5FFD78;
  if (!qword_1EE5FFD78)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectContoursRequest.Revision, &type metadata for DetectContoursRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD78);
  }
  return result;
}

unint64_t sub_1A1347208()
{
  unint64_t result;

  result = qword_1EE5FFD80;
  if (!qword_1EE5FFD80)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectBarcodesRequest.Revision, &type metadata for DetectBarcodesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD80);
  }
  return result;
}

unint64_t sub_1A134724C()
{
  unint64_t result;

  result = qword_1EE5FFD88;
  if (!qword_1EE5FFD88)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectAnimalBodyPoseRequest.Revision, &type metadata for DetectAnimalBodyPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD88);
  }
  return result;
}

unint64_t sub_1A1347290()
{
  unint64_t result;

  result = qword_1EE5FFD90;
  if (!qword_1EE5FFD90)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CoreMLRequest.Revision, &type metadata for CoreMLRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD90);
  }
  return result;
}

unint64_t sub_1A13472D4()
{
  unint64_t result;

  result = qword_1EE5FFD98;
  if (!qword_1EE5FFD98)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CalculateImageAestheticsScoresRequest.Revision, &type metadata for CalculateImageAestheticsScoresRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFD98);
  }
  return result;
}

unint64_t sub_1A1347318()
{
  unint64_t result;

  result = qword_1EE5FFDA0;
  if (!qword_1EE5FFDA0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for ClassifyImageRequest.Revision, &type metadata for ClassifyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFDA0);
  }
  return result;
}

unint64_t sub_1A134735C()
{
  unint64_t result;

  result = qword_1EE62AF10;
  if (!qword_1EE62AF10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8B78, &type metadata for RequestDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF10);
  }
  return result;
}

unint64_t sub_1A13473A0()
{
  unint64_t result;

  result = qword_1EE62AF18;
  if (!qword_1EE62AF18)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8B28, &type metadata for RequestDescriptor.TrackTranslationalImageRegistrationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF18);
  }
  return result;
}

unint64_t sub_1A13473E4()
{
  unint64_t result;

  result = qword_1EE5FFEA8;
  if (!qword_1EE5FFEA8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest.Revision, &type metadata for TrackTranslationalImageRegistrationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFEA8);
  }
  return result;
}

unint64_t sub_1A1347428()
{
  unint64_t result;

  result = qword_1EE62AF20;
  if (!qword_1EE62AF20)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8AD8, &type metadata for RequestDescriptor.TrackRectangleRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF20);
  }
  return result;
}

unint64_t sub_1A134746C()
{
  unint64_t result;

  result = qword_1EE5FFEB0;
  if (!qword_1EE5FFEB0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackRectangleRequest.Revision, &type metadata for TrackRectangleRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFEB0);
  }
  return result;
}

unint64_t sub_1A13474B0()
{
  unint64_t result;

  result = qword_1EE62AF28;
  if (!qword_1EE62AF28)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8A88, &type metadata for RequestDescriptor.TrackOpticalFlowRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF28);
  }
  return result;
}

unint64_t sub_1A13474F4()
{
  unint64_t result;

  result = qword_1EE5FFEB8;
  if (!qword_1EE5FFEB8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackOpticalFlowRequest.Revision, &type metadata for TrackOpticalFlowRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFEB8);
  }
  return result;
}

unint64_t sub_1A1347538()
{
  unint64_t result;

  result = qword_1EE62AF30;
  if (!qword_1EE62AF30)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8A38, &type metadata for RequestDescriptor.TrackObjectRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF30);
  }
  return result;
}

unint64_t sub_1A134757C()
{
  unint64_t result;

  result = qword_1EE5FFEC0;
  if (!qword_1EE5FFEC0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackObjectRequest.Revision, &type metadata for TrackObjectRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFEC0);
  }
  return result;
}

unint64_t sub_1A13475C0()
{
  unint64_t result;

  result = qword_1EE62AF38;
  if (!qword_1EE62AF38)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D89E8, &type metadata for RequestDescriptor.TrackHomographicImageRegistrationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF38);
  }
  return result;
}

unint64_t sub_1A1347604()
{
  unint64_t result;

  result = qword_1EE5FFEC8;
  if (!qword_1EE5FFEC8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackHomographicImageRegistrationRequest.Revision, &type metadata for TrackHomographicImageRegistrationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFEC8);
  }
  return result;
}

unint64_t sub_1A1347648()
{
  unint64_t result;

  result = qword_1EE62AF40;
  if (!qword_1EE62AF40)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8998, &type metadata for RequestDescriptor.RecognizeTextRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF40);
  }
  return result;
}

unint64_t sub_1A134768C()
{
  unint64_t result;

  result = qword_1EE5FFED0;
  if (!qword_1EE5FFED0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeTextRequest.Revision, &type metadata for RecognizeTextRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFED0);
  }
  return result;
}

unint64_t sub_1A13476D0()
{
  unint64_t result;

  result = qword_1EE62AF48;
  if (!qword_1EE62AF48)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8948, &type metadata for RequestDescriptor.RecognizeAnimalsRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF48);
  }
  return result;
}

unint64_t sub_1A1347714()
{
  unint64_t result;

  result = qword_1EE5FFED8;
  if (!qword_1EE5FFED8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeAnimalsRequest.Revision, &type metadata for RecognizeAnimalsRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFED8);
  }
  return result;
}

unint64_t sub_1A1347758()
{
  unint64_t result;

  result = qword_1EE62AF50;
  if (!qword_1EE62AF50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D88F8, &type metadata for RequestDescriptor.GeneratePersonInstanceMaskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF50);
  }
  return result;
}

unint64_t sub_1A134779C()
{
  unint64_t result;

  result = qword_1EE5FFEE0;
  if (!qword_1EE5FFEE0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GeneratePersonInstanceMaskRequest.Revision, &type metadata for GeneratePersonInstanceMaskRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFEE0);
  }
  return result;
}

unint64_t sub_1A13477E0()
{
  unint64_t result;

  result = qword_1EE62AF58;
  if (!qword_1EE62AF58)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D88A8, &type metadata for RequestDescriptor.GeneratePersonSegmentationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF58);
  }
  return result;
}

unint64_t sub_1A1347824()
{
  unint64_t result;

  result = qword_1EE5FFEE8;
  if (!qword_1EE5FFEE8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GeneratePersonSegmentationRequest.Revision, &type metadata for GeneratePersonSegmentationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFEE8);
  }
  return result;
}

unint64_t sub_1A1347868()
{
  unint64_t result;

  result = qword_1EE62AF60;
  if (!qword_1EE62AF60)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8858, &type metadata for RequestDescriptor.GenerateObjectnessBasedSaliencyImageRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF60);
  }
  return result;
}

unint64_t sub_1A13478AC()
{
  unint64_t result;

  result = qword_1EE5FFEF0;
  if (!qword_1EE5FFEF0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateObjectnessBasedSaliencyImageRequest.Revision, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFEF0);
  }
  return result;
}

unint64_t sub_1A13478F0()
{
  unint64_t result;

  result = qword_1EE62AF68;
  if (!qword_1EE62AF68)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8808, &type metadata for RequestDescriptor.GenerateForegroundInstanceMaskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF68);
  }
  return result;
}

unint64_t sub_1A1347934()
{
  unint64_t result;

  result = qword_1EE5FFEF8;
  if (!qword_1EE5FFEF8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateForegroundInstanceMaskRequest.Revision, &type metadata for GenerateForegroundInstanceMaskRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFEF8);
  }
  return result;
}

unint64_t sub_1A1347978()
{
  unint64_t result;

  result = qword_1EE62AF70;
  if (!qword_1EE62AF70)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D87B8, &type metadata for RequestDescriptor.GenerateImageFeaturePrintRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF70);
  }
  return result;
}

unint64_t sub_1A13479BC()
{
  unint64_t result;

  result = qword_1EE5FFF00;
  if (!qword_1EE5FFF00)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateImageFeaturePrintRequest.Revision, &type metadata for GenerateImageFeaturePrintRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF00);
  }
  return result;
}

unint64_t sub_1A1347A00()
{
  unint64_t result;

  result = qword_1EE62AF78;
  if (!qword_1EE62AF78)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8768, &type metadata for RequestDescriptor.GenerateAttentionBasedSaliencyImageRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF78);
  }
  return result;
}

unint64_t sub_1A1347A44()
{
  unint64_t result;

  result = qword_1EE5FFF08;
  if (!qword_1EE5FFF08)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateAttentionBasedSaliencyImageRequest.Revision, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF08);
  }
  return result;
}

unint64_t sub_1A1347A88()
{
  unint64_t result;

  result = qword_1EE62AF80;
  if (!qword_1EE62AF80)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8718, &type metadata for RequestDescriptor.DetectTrajectoriesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF80);
  }
  return result;
}

unint64_t sub_1A1347ACC()
{
  unint64_t result;

  result = qword_1EE5FFF10;
  if (!qword_1EE5FFF10)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectTrajectoriesRequest.Revision, &type metadata for DetectTrajectoriesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF10);
  }
  return result;
}

unint64_t sub_1A1347B10()
{
  unint64_t result;

  result = qword_1EE62AF88;
  if (!qword_1EE62AF88)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D86C8, &type metadata for RequestDescriptor.DetectTextRectanglesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF88);
  }
  return result;
}

unint64_t sub_1A1347B54()
{
  unint64_t result;

  result = qword_1EE5FFF18;
  if (!qword_1EE5FFF18)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectTextRectanglesRequest.Revision, &type metadata for DetectTextRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF18);
  }
  return result;
}

unint64_t sub_1A1347B98()
{
  unint64_t result;

  result = qword_1EE62AF90;
  if (!qword_1EE62AF90)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8678, &type metadata for RequestDescriptor.DetectRectanglesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF90);
  }
  return result;
}

unint64_t sub_1A1347BDC()
{
  unint64_t result;

  result = qword_1EE5FFF20;
  if (!qword_1EE5FFF20)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectRectanglesRequest.Revision, &type metadata for DetectRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF20);
  }
  return result;
}

unint64_t sub_1A1347C20()
{
  unint64_t result;

  result = qword_1EE62AF98;
  if (!qword_1EE62AF98)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8628, &type metadata for RequestDescriptor.DetectHumanRectanglesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AF98);
  }
  return result;
}

unint64_t sub_1A1347C64()
{
  unint64_t result;

  result = qword_1EE5FFF28;
  if (!qword_1EE5FFF28)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanRectanglesRequest.Revision, &type metadata for DetectHumanRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF28);
  }
  return result;
}

unint64_t sub_1A1347CA8()
{
  unint64_t result;

  result = qword_1EE62AFA0;
  if (!qword_1EE62AFA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D85D8, &type metadata for RequestDescriptor.DetectHumanHandPoseRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFA0);
  }
  return result;
}

unint64_t sub_1A1347CEC()
{
  unint64_t result;

  result = qword_1EE5FFF30;
  if (!qword_1EE5FFF30)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanHandPoseRequest.Revision, &type metadata for DetectHumanHandPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF30);
  }
  return result;
}

unint64_t sub_1A1347D30()
{
  unint64_t result;

  result = qword_1EE62AFA8;
  if (!qword_1EE62AFA8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8588, &type metadata for RequestDescriptor.DetectHumanBodyPose3DRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFA8);
  }
  return result;
}

unint64_t sub_1A1347D74()
{
  unint64_t result;

  result = qword_1EE5FFF38;
  if (!qword_1EE5FFF38)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPose3DRequest.Revision, &type metadata for DetectHumanBodyPose3DRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF38);
  }
  return result;
}

unint64_t sub_1A1347DB8()
{
  unint64_t result;

  result = qword_1EE62AFB0;
  if (!qword_1EE62AFB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8538, &type metadata for RequestDescriptor.DetectHumanBodyPoseRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFB0);
  }
  return result;
}

unint64_t sub_1A1347DFC()
{
  unint64_t result;

  result = qword_1EE5FFF40;
  if (!qword_1EE5FFF40)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPoseRequest.Revision, &type metadata for DetectHumanBodyPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF40);
  }
  return result;
}

unint64_t sub_1A1347E40()
{
  unint64_t result;

  result = qword_1EE62AFB8;
  if (!qword_1EE62AFB8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D84E8, &type metadata for RequestDescriptor.DetectHorizonRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFB8);
  }
  return result;
}

unint64_t sub_1A1347E84()
{
  unint64_t result;

  result = qword_1EE5FFF48;
  if (!qword_1EE5FFF48)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHorizonRequest.Revision, &type metadata for DetectHorizonRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF48);
  }
  return result;
}

unint64_t sub_1A1347EC8()
{
  unint64_t result;

  result = qword_1EE62AFC0;
  if (!qword_1EE62AFC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8498, &type metadata for RequestDescriptor.DetectFaceLandmarksRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFC0);
  }
  return result;
}

unint64_t sub_1A1347F0C()
{
  unint64_t result;

  result = qword_1EE5FFF50;
  if (!qword_1EE5FFF50)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceLandmarksRequest.Revision, &type metadata for DetectFaceLandmarksRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF50);
  }
  return result;
}

unint64_t sub_1A1347F50()
{
  unint64_t result;

  result = qword_1EE62AFC8;
  if (!qword_1EE62AFC8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8448, &type metadata for RequestDescriptor.DetectFaceRectanglesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFC8);
  }
  return result;
}

unint64_t sub_1A1347F94()
{
  unint64_t result;

  result = qword_1EE5FFF58;
  if (!qword_1EE5FFF58)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceRectanglesRequest.Revision, &type metadata for DetectFaceRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF58);
  }
  return result;
}

unint64_t sub_1A1347FD8()
{
  unint64_t result;

  result = qword_1EE62AFD0;
  if (!qword_1EE62AFD0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D83F8, &type metadata for RequestDescriptor.DetectFaceCaptureQualityRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFD0);
  }
  return result;
}

unint64_t sub_1A134801C()
{
  unint64_t result;

  result = qword_1EE5FFF60;
  if (!qword_1EE5FFF60)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceCaptureQualityRequest.Revision, &type metadata for DetectFaceCaptureQualityRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF60);
  }
  return result;
}

unint64_t sub_1A1348060()
{
  unint64_t result;

  result = qword_1EE62AFD8;
  if (!qword_1EE62AFD8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D83A8, &type metadata for RequestDescriptor.DetectDocumentSegmentationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFD8);
  }
  return result;
}

unint64_t sub_1A13480A4()
{
  unint64_t result;

  result = qword_1EE5FFF68;
  if (!qword_1EE5FFF68)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectDocumentSegmentationRequest.Revision, &type metadata for DetectDocumentSegmentationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF68);
  }
  return result;
}

unint64_t sub_1A13480E8()
{
  unint64_t result;

  result = qword_1EE62AFE0;
  if (!qword_1EE62AFE0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8358, &type metadata for RequestDescriptor.DetectContoursRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFE0);
  }
  return result;
}

unint64_t sub_1A134812C()
{
  unint64_t result;

  result = qword_1EE5FFF70;
  if (!qword_1EE5FFF70)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectContoursRequest.Revision, &type metadata for DetectContoursRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF70);
  }
  return result;
}

unint64_t sub_1A1348170()
{
  unint64_t result;

  result = qword_1EE62AFE8;
  if (!qword_1EE62AFE8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8308, &type metadata for RequestDescriptor.DetectBarcodesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFE8);
  }
  return result;
}

unint64_t sub_1A13481B4()
{
  unint64_t result;

  result = qword_1EE5FFF78;
  if (!qword_1EE5FFF78)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectBarcodesRequest.Revision, &type metadata for DetectBarcodesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF78);
  }
  return result;
}

unint64_t sub_1A13481F8()
{
  unint64_t result;

  result = qword_1EE62AFF0;
  if (!qword_1EE62AFF0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D82B8, &type metadata for RequestDescriptor.DetectAnimalBodyPoseRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFF0);
  }
  return result;
}

unint64_t sub_1A134823C()
{
  unint64_t result;

  result = qword_1EE5FFF80;
  if (!qword_1EE5FFF80)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectAnimalBodyPoseRequest.Revision, &type metadata for DetectAnimalBodyPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF80);
  }
  return result;
}

unint64_t sub_1A1348280()
{
  unint64_t result;

  result = qword_1EE62AFF8;
  if (!qword_1EE62AFF8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8268, &type metadata for RequestDescriptor.CoreMLRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62AFF8);
  }
  return result;
}

unint64_t sub_1A13482C4()
{
  unint64_t result;

  result = qword_1EE5FFF88;
  if (!qword_1EE5FFF88)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CoreMLRequest.Revision, &type metadata for CoreMLRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF88);
  }
  return result;
}

unint64_t sub_1A1348308()
{
  unint64_t result;

  result = qword_1EE62B000;
  if (!qword_1EE62B000)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8218, &type metadata for RequestDescriptor.CalculateImageAestheticsScoresRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62B000);
  }
  return result;
}

unint64_t sub_1A134834C()
{
  unint64_t result;

  result = qword_1EE5FFF90;
  if (!qword_1EE5FFF90)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CalculateImageAestheticsScoresRequest.Revision, &type metadata for CalculateImageAestheticsScoresRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF90);
  }
  return result;
}

unint64_t sub_1A1348390()
{
  unint64_t result;

  result = qword_1EE62B008[0];
  if (!qword_1EE62B008[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D81C8, &type metadata for RequestDescriptor.ClassifyImageRequestCodingKeys);
    atomic_store(result, qword_1EE62B008);
  }
  return result;
}

unint64_t sub_1A13483D4()
{
  unint64_t result;

  result = qword_1EE5FFF98;
  if (!qword_1EE5FFF98)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for ClassifyImageRequest.Revision, &type metadata for ClassifyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE5FFF98);
  }
  return result;
}

unint64_t sub_1A1348418()
{
  unint64_t result;

  result = qword_1EE6000A0;
  if (!qword_1EE6000A0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest.Revision, &type metadata for TrackTranslationalImageRegistrationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000A0);
  }
  return result;
}

unint64_t sub_1A134845C()
{
  unint64_t result;

  result = qword_1EE6000A8;
  if (!qword_1EE6000A8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackRectangleRequest.Revision, &type metadata for TrackRectangleRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000A8);
  }
  return result;
}

unint64_t sub_1A13484A0()
{
  unint64_t result;

  result = qword_1EE6000B0;
  if (!qword_1EE6000B0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackOpticalFlowRequest.Revision, &type metadata for TrackOpticalFlowRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000B0);
  }
  return result;
}

unint64_t sub_1A13484E4()
{
  unint64_t result;

  result = qword_1EE6000B8;
  if (!qword_1EE6000B8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackObjectRequest.Revision, &type metadata for TrackObjectRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000B8);
  }
  return result;
}

unint64_t sub_1A1348528()
{
  unint64_t result;

  result = qword_1EE6000C0;
  if (!qword_1EE6000C0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackHomographicImageRegistrationRequest.Revision, &type metadata for TrackHomographicImageRegistrationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000C0);
  }
  return result;
}

unint64_t sub_1A134856C()
{
  unint64_t result;

  result = qword_1EE6000C8;
  if (!qword_1EE6000C8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeTextRequest.Revision, &type metadata for RecognizeTextRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000C8);
  }
  return result;
}

unint64_t sub_1A13485B0()
{
  unint64_t result;

  result = qword_1EE6000D0;
  if (!qword_1EE6000D0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeAnimalsRequest.Revision, &type metadata for RecognizeAnimalsRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000D0);
  }
  return result;
}

unint64_t sub_1A13485F4()
{
  unint64_t result;

  result = qword_1EE6000D8;
  if (!qword_1EE6000D8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GeneratePersonInstanceMaskRequest.Revision, &type metadata for GeneratePersonInstanceMaskRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000D8);
  }
  return result;
}

unint64_t sub_1A1348638()
{
  unint64_t result;

  result = qword_1EE6000E0;
  if (!qword_1EE6000E0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GeneratePersonSegmentationRequest.Revision, &type metadata for GeneratePersonSegmentationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000E0);
  }
  return result;
}

unint64_t sub_1A134867C()
{
  unint64_t result;

  result = qword_1EE6000E8;
  if (!qword_1EE6000E8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateObjectnessBasedSaliencyImageRequest.Revision, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000E8);
  }
  return result;
}

unint64_t sub_1A13486C0()
{
  unint64_t result;

  result = qword_1EE6000F0;
  if (!qword_1EE6000F0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateForegroundInstanceMaskRequest.Revision, &type metadata for GenerateForegroundInstanceMaskRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000F0);
  }
  return result;
}

unint64_t sub_1A1348704()
{
  unint64_t result;

  result = qword_1EE6000F8;
  if (!qword_1EE6000F8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateImageFeaturePrintRequest.Revision, &type metadata for GenerateImageFeaturePrintRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6000F8);
  }
  return result;
}

unint64_t sub_1A1348748()
{
  unint64_t result;

  result = qword_1EE600100;
  if (!qword_1EE600100)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateAttentionBasedSaliencyImageRequest.Revision, &type metadata for GenerateAttentionBasedSaliencyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600100);
  }
  return result;
}

unint64_t sub_1A134878C()
{
  unint64_t result;

  result = qword_1EE600108;
  if (!qword_1EE600108)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectTrajectoriesRequest.Revision, &type metadata for DetectTrajectoriesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600108);
  }
  return result;
}

unint64_t sub_1A13487D0()
{
  unint64_t result;

  result = qword_1EE600110;
  if (!qword_1EE600110)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectTextRectanglesRequest.Revision, &type metadata for DetectTextRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600110);
  }
  return result;
}

unint64_t sub_1A1348814()
{
  unint64_t result;

  result = qword_1EE600118;
  if (!qword_1EE600118)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectRectanglesRequest.Revision, &type metadata for DetectRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600118);
  }
  return result;
}

unint64_t sub_1A1348858()
{
  unint64_t result;

  result = qword_1EE600120;
  if (!qword_1EE600120)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanRectanglesRequest.Revision, &type metadata for DetectHumanRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600120);
  }
  return result;
}

unint64_t sub_1A134889C()
{
  unint64_t result;

  result = qword_1EE600128;
  if (!qword_1EE600128)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanHandPoseRequest.Revision, &type metadata for DetectHumanHandPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600128);
  }
  return result;
}

unint64_t sub_1A13488E0()
{
  unint64_t result;

  result = qword_1EE600130;
  if (!qword_1EE600130)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPose3DRequest.Revision, &type metadata for DetectHumanBodyPose3DRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600130);
  }
  return result;
}

unint64_t sub_1A1348924()
{
  unint64_t result;

  result = qword_1EE600138;
  if (!qword_1EE600138)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPoseRequest.Revision, &type metadata for DetectHumanBodyPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600138);
  }
  return result;
}

unint64_t sub_1A1348968()
{
  unint64_t result;

  result = qword_1EE600140;
  if (!qword_1EE600140)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHorizonRequest.Revision, &type metadata for DetectHorizonRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600140);
  }
  return result;
}

unint64_t sub_1A13489AC()
{
  unint64_t result;

  result = qword_1EE600148;
  if (!qword_1EE600148)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceLandmarksRequest.Revision, &type metadata for DetectFaceLandmarksRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600148);
  }
  return result;
}

unint64_t sub_1A13489F0()
{
  unint64_t result;

  result = qword_1EE600150;
  if (!qword_1EE600150)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceRectanglesRequest.Revision, &type metadata for DetectFaceRectanglesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600150);
  }
  return result;
}

unint64_t sub_1A1348A34()
{
  unint64_t result;

  result = qword_1EE600158;
  if (!qword_1EE600158)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectFaceCaptureQualityRequest.Revision, &type metadata for DetectFaceCaptureQualityRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600158);
  }
  return result;
}

unint64_t sub_1A1348A78()
{
  unint64_t result;

  result = qword_1EE600160;
  if (!qword_1EE600160)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectDocumentSegmentationRequest.Revision, &type metadata for DetectDocumentSegmentationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600160);
  }
  return result;
}

unint64_t sub_1A1348ABC()
{
  unint64_t result;

  result = qword_1EE600168;
  if (!qword_1EE600168)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectContoursRequest.Revision, &type metadata for DetectContoursRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600168);
  }
  return result;
}

unint64_t sub_1A1348B00()
{
  unint64_t result;

  result = qword_1EE600170;
  if (!qword_1EE600170)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectBarcodesRequest.Revision, &type metadata for DetectBarcodesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600170);
  }
  return result;
}

unint64_t sub_1A1348B44()
{
  unint64_t result;

  result = qword_1EE600178;
  if (!qword_1EE600178)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectAnimalBodyPoseRequest.Revision, &type metadata for DetectAnimalBodyPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600178);
  }
  return result;
}

unint64_t sub_1A1348B88()
{
  unint64_t result;

  result = qword_1EE600180;
  if (!qword_1EE600180)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CoreMLRequest.Revision, &type metadata for CoreMLRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600180);
  }
  return result;
}

unint64_t sub_1A1348BCC()
{
  unint64_t result;

  result = qword_1EE600188;
  if (!qword_1EE600188)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CalculateImageAestheticsScoresRequest.Revision, &type metadata for CalculateImageAestheticsScoresRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600188);
  }
  return result;
}

unint64_t sub_1A1348C10()
{
  unint64_t result;

  result = qword_1EE600190;
  if (!qword_1EE600190)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for ClassifyImageRequest.Revision, &type metadata for ClassifyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600190);
  }
  return result;
}

unint64_t sub_1A1348C54()
{
  unint64_t result;

  result = qword_1EE5FD4D8;
  if (!qword_1EE5FD4D8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5FD4D8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RequestDescriptor(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x22)
    goto LABEL_17;
  if (a2 + 222 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 222) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 222;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 222;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 222;
  }
LABEL_17:
  v6 = ((*a1 >> 3) & 0xFFFFFFDF | (32 * ((*a1 >> 2) & 1))) ^ 0x3F;
  if (v6 >= 0x21)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for RequestDescriptor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 222 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 222) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x22)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x21)
    return ((uint64_t (*)(void))((char *)&loc_1A1348D80 + 4 * byte_1A15D639B[v4]))();
  *a1 = a2 - 34;
  return ((uint64_t (*)(void))((char *)sub_1A1348DB4 + 4 * byte_1A15D6396[v4]))();
}

uint64_t sub_1A1348DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1348DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1348DC4);
  return result;
}

uint64_t sub_1A1348DDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1348DE4);
  *(_BYTE *)result = 4 * (((-a2 & 0x20) != 0) - 2 * a2);
  return result;
}

uint64_t sub_1A1348DE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1348DF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1348DFC(unsigned __int8 *a1)
{
  return *a1 >> 3;
}

_BYTE *sub_1A1348E08(_BYTE *result)
{
  *result &= 7u;
  return result;
}

_BYTE *sub_1A1348E18(_BYTE *result, char a2)
{
  *result = *result & 3 | (8 * a2);
  return result;
}

ValueMetadata *type metadata accessor for RequestDescriptor()
{
  return &type metadata for RequestDescriptor;
}

uint64_t getEnumTagSinglePayload for RequestDescriptor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE2)
    goto LABEL_17;
  if (a2 + 30 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 30) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 30;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 30;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 30;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1F;
  v8 = v6 - 31;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RequestDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 30 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 30) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE1)
    return ((uint64_t (*)(void))((char *)&loc_1A1348F18 + 4 * byte_1A15D63A5[v4]))();
  *a1 = a2 + 30;
  return ((uint64_t (*)(void))((char *)sub_1A1348F4C + 4 * byte_1A15D63A0[v4]))();
}

uint64_t sub_1A1348F4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1348F54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1348F5CLL);
  return result;
}

uint64_t sub_1A1348F68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1348F70);
  *(_BYTE *)result = a2 + 30;
  return result;
}

uint64_t sub_1A1348F74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1348F7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RequestDescriptor.CodingKeys()
{
  return &type metadata for RequestDescriptor.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.ClassifyImageRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.ClassifyImageRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.CalculateImageAestheticsScoresRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.CalculateImageAestheticsScoresRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.CoreMLRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.CoreMLRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectAnimalBodyPoseRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectAnimalBodyPoseRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectBarcodesRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectBarcodesRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectContoursRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectContoursRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectDocumentSegmentationRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectDocumentSegmentationRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectFaceCaptureQualityRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectFaceCaptureQualityRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectFaceRectanglesRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectFaceRectanglesRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectFaceLandmarksRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectFaceLandmarksRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectHorizonRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectHorizonRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectHumanBodyPoseRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectHumanBodyPoseRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectHumanBodyPose3DRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectHumanBodyPose3DRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectHumanHandPoseRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectHumanHandPoseRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectHumanRectanglesRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectHumanRectanglesRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectRectanglesRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectRectanglesRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectTextRectanglesRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectTextRectanglesRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.DetectTrajectoriesRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.DetectTrajectoriesRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.GenerateAttentionBasedSaliencyImageRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.GenerateAttentionBasedSaliencyImageRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.GenerateImageFeaturePrintRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.GenerateImageFeaturePrintRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.GenerateForegroundInstanceMaskRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.GenerateForegroundInstanceMaskRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.GenerateObjectnessBasedSaliencyImageRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.GenerateObjectnessBasedSaliencyImageRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.GeneratePersonSegmentationRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.GeneratePersonSegmentationRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.GeneratePersonInstanceMaskRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.GeneratePersonInstanceMaskRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.RecognizeAnimalsRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.RecognizeAnimalsRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.RecognizeTextRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.RecognizeTextRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.TrackHomographicImageRegistrationRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.TrackHomographicImageRegistrationRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.TrackObjectRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.TrackObjectRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.TrackOpticalFlowRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.TrackOpticalFlowRequestCodingKeys;
}

ValueMetadata *type metadata accessor for RequestDescriptor.TrackRectangleRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.TrackRectangleRequestCodingKeys;
}

uint64_t _s6Vision17RequestDescriptorO30ClassifyImageRequestCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A13491BC + 4 * byte_1A15D63AA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A13491DC + 4 * byte_1A15D63AF[v4]))();
}

_BYTE *sub_1A13491BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A13491DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A13491E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A13491EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A13491F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A13491FC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RequestDescriptor.TrackTranslationalImageRegistrationRequestCodingKeys()
{
  return &type metadata for RequestDescriptor.TrackTranslationalImageRegistrationRequestCodingKeys;
}

unint64_t sub_1A134921C()
{
  unint64_t result;

  result = qword_1EE62B390[0];
  if (!qword_1EE62B390[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6B58, &type metadata for RequestDescriptor.TrackTranslationalImageRegistrationRequestCodingKeys);
    atomic_store(result, qword_1EE62B390);
  }
  return result;
}

unint64_t sub_1A1349264()
{
  unint64_t result;

  result = qword_1EE62B5A0[0];
  if (!qword_1EE62B5A0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6C10, &type metadata for RequestDescriptor.TrackRectangleRequestCodingKeys);
    atomic_store(result, qword_1EE62B5A0);
  }
  return result;
}

unint64_t sub_1A13492AC()
{
  unint64_t result;

  result = qword_1EE62B7B0[0];
  if (!qword_1EE62B7B0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6CC8, &type metadata for RequestDescriptor.TrackOpticalFlowRequestCodingKeys);
    atomic_store(result, qword_1EE62B7B0);
  }
  return result;
}

unint64_t sub_1A13492F4()
{
  unint64_t result;

  result = qword_1EE62B9C0[0];
  if (!qword_1EE62B9C0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6D80, &type metadata for RequestDescriptor.TrackObjectRequestCodingKeys);
    atomic_store(result, qword_1EE62B9C0);
  }
  return result;
}

unint64_t sub_1A134933C()
{
  unint64_t result;

  result = qword_1EE62BBD0[0];
  if (!qword_1EE62BBD0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6E38, &type metadata for RequestDescriptor.TrackHomographicImageRegistrationRequestCodingKeys);
    atomic_store(result, qword_1EE62BBD0);
  }
  return result;
}

unint64_t sub_1A1349384()
{
  unint64_t result;

  result = qword_1EE62BDE0[0];
  if (!qword_1EE62BDE0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6EF0, &type metadata for RequestDescriptor.RecognizeTextRequestCodingKeys);
    atomic_store(result, qword_1EE62BDE0);
  }
  return result;
}

unint64_t sub_1A13493CC()
{
  unint64_t result;

  result = qword_1EE62BFF0[0];
  if (!qword_1EE62BFF0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6FA8, &type metadata for RequestDescriptor.RecognizeAnimalsRequestCodingKeys);
    atomic_store(result, qword_1EE62BFF0);
  }
  return result;
}

unint64_t sub_1A1349414()
{
  unint64_t result;

  result = qword_1EE62C200[0];
  if (!qword_1EE62C200[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7060, &type metadata for RequestDescriptor.GeneratePersonInstanceMaskRequestCodingKeys);
    atomic_store(result, qword_1EE62C200);
  }
  return result;
}

unint64_t sub_1A134945C()
{
  unint64_t result;

  result = qword_1EE62C410[0];
  if (!qword_1EE62C410[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7118, &type metadata for RequestDescriptor.GeneratePersonSegmentationRequestCodingKeys);
    atomic_store(result, qword_1EE62C410);
  }
  return result;
}

unint64_t sub_1A13494A4()
{
  unint64_t result;

  result = qword_1EE62C620[0];
  if (!qword_1EE62C620[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D71D0, &type metadata for RequestDescriptor.GenerateObjectnessBasedSaliencyImageRequestCodingKeys);
    atomic_store(result, qword_1EE62C620);
  }
  return result;
}

unint64_t sub_1A13494EC()
{
  unint64_t result;

  result = qword_1EE62C830[0];
  if (!qword_1EE62C830[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7288, &type metadata for RequestDescriptor.GenerateForegroundInstanceMaskRequestCodingKeys);
    atomic_store(result, qword_1EE62C830);
  }
  return result;
}

unint64_t sub_1A1349534()
{
  unint64_t result;

  result = qword_1EE62CA40[0];
  if (!qword_1EE62CA40[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7340, &type metadata for RequestDescriptor.GenerateImageFeaturePrintRequestCodingKeys);
    atomic_store(result, qword_1EE62CA40);
  }
  return result;
}

unint64_t sub_1A134957C()
{
  unint64_t result;

  result = qword_1EE62CC50[0];
  if (!qword_1EE62CC50[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D73F8, &type metadata for RequestDescriptor.GenerateAttentionBasedSaliencyImageRequestCodingKeys);
    atomic_store(result, qword_1EE62CC50);
  }
  return result;
}

unint64_t sub_1A13495C4()
{
  unint64_t result;

  result = qword_1EE62CE60[0];
  if (!qword_1EE62CE60[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D74B0, &type metadata for RequestDescriptor.DetectTrajectoriesRequestCodingKeys);
    atomic_store(result, qword_1EE62CE60);
  }
  return result;
}

unint64_t sub_1A134960C()
{
  unint64_t result;

  result = qword_1EE62D070[0];
  if (!qword_1EE62D070[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7568, &type metadata for RequestDescriptor.DetectTextRectanglesRequestCodingKeys);
    atomic_store(result, qword_1EE62D070);
  }
  return result;
}

unint64_t sub_1A1349654()
{
  unint64_t result;

  result = qword_1EE62D280[0];
  if (!qword_1EE62D280[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7620, &type metadata for RequestDescriptor.DetectRectanglesRequestCodingKeys);
    atomic_store(result, qword_1EE62D280);
  }
  return result;
}

unint64_t sub_1A134969C()
{
  unint64_t result;

  result = qword_1EE62D490[0];
  if (!qword_1EE62D490[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D76D8, &type metadata for RequestDescriptor.DetectHumanRectanglesRequestCodingKeys);
    atomic_store(result, qword_1EE62D490);
  }
  return result;
}

unint64_t sub_1A13496E4()
{
  unint64_t result;

  result = qword_1EE62D6A0[0];
  if (!qword_1EE62D6A0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7790, &type metadata for RequestDescriptor.DetectHumanHandPoseRequestCodingKeys);
    atomic_store(result, qword_1EE62D6A0);
  }
  return result;
}

unint64_t sub_1A134972C()
{
  unint64_t result;

  result = qword_1EE62D8B0[0];
  if (!qword_1EE62D8B0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7848, &type metadata for RequestDescriptor.DetectHumanBodyPose3DRequestCodingKeys);
    atomic_store(result, qword_1EE62D8B0);
  }
  return result;
}

unint64_t sub_1A1349774()
{
  unint64_t result;

  result = qword_1EE62DAC0[0];
  if (!qword_1EE62DAC0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7900, &type metadata for RequestDescriptor.DetectHumanBodyPoseRequestCodingKeys);
    atomic_store(result, qword_1EE62DAC0);
  }
  return result;
}

unint64_t sub_1A13497BC()
{
  unint64_t result;

  result = qword_1EE62DCD0[0];
  if (!qword_1EE62DCD0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D79B8, &type metadata for RequestDescriptor.DetectHorizonRequestCodingKeys);
    atomic_store(result, qword_1EE62DCD0);
  }
  return result;
}

unint64_t sub_1A1349804()
{
  unint64_t result;

  result = qword_1EE62DEE0[0];
  if (!qword_1EE62DEE0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7A70, &type metadata for RequestDescriptor.DetectFaceLandmarksRequestCodingKeys);
    atomic_store(result, qword_1EE62DEE0);
  }
  return result;
}

unint64_t sub_1A134984C()
{
  unint64_t result;

  result = qword_1EE62E0F0[0];
  if (!qword_1EE62E0F0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7B28, &type metadata for RequestDescriptor.DetectFaceRectanglesRequestCodingKeys);
    atomic_store(result, qword_1EE62E0F0);
  }
  return result;
}

unint64_t sub_1A1349894()
{
  unint64_t result;

  result = qword_1EE62E300[0];
  if (!qword_1EE62E300[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7BE0, &type metadata for RequestDescriptor.DetectFaceCaptureQualityRequestCodingKeys);
    atomic_store(result, qword_1EE62E300);
  }
  return result;
}

unint64_t sub_1A13498DC()
{
  unint64_t result;

  result = qword_1EE62E510[0];
  if (!qword_1EE62E510[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7C98, &type metadata for RequestDescriptor.DetectDocumentSegmentationRequestCodingKeys);
    atomic_store(result, qword_1EE62E510);
  }
  return result;
}

unint64_t sub_1A1349924()
{
  unint64_t result;

  result = qword_1EE62E720[0];
  if (!qword_1EE62E720[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7D50, &type metadata for RequestDescriptor.DetectContoursRequestCodingKeys);
    atomic_store(result, qword_1EE62E720);
  }
  return result;
}

unint64_t sub_1A134996C()
{
  unint64_t result;

  result = qword_1EE62E930[0];
  if (!qword_1EE62E930[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7E08, &type metadata for RequestDescriptor.DetectBarcodesRequestCodingKeys);
    atomic_store(result, qword_1EE62E930);
  }
  return result;
}

unint64_t sub_1A13499B4()
{
  unint64_t result;

  result = qword_1EE62EB40[0];
  if (!qword_1EE62EB40[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7EC0, &type metadata for RequestDescriptor.DetectAnimalBodyPoseRequestCodingKeys);
    atomic_store(result, qword_1EE62EB40);
  }
  return result;
}

unint64_t sub_1A13499FC()
{
  unint64_t result;

  result = qword_1EE62ED50[0];
  if (!qword_1EE62ED50[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7F78, &type metadata for RequestDescriptor.CoreMLRequestCodingKeys);
    atomic_store(result, qword_1EE62ED50);
  }
  return result;
}

unint64_t sub_1A1349A44()
{
  unint64_t result;

  result = qword_1EE62EF60[0];
  if (!qword_1EE62EF60[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8030, &type metadata for RequestDescriptor.CalculateImageAestheticsScoresRequestCodingKeys);
    atomic_store(result, qword_1EE62EF60);
  }
  return result;
}

unint64_t sub_1A1349A8C()
{
  unint64_t result;

  result = qword_1EE62F170[0];
  if (!qword_1EE62F170[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D80E8, &type metadata for RequestDescriptor.ClassifyImageRequestCodingKeys);
    atomic_store(result, qword_1EE62F170);
  }
  return result;
}

unint64_t sub_1A1349AD4()
{
  unint64_t result;

  result = qword_1EE62F380[0];
  if (!qword_1EE62F380[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D81A0, &type metadata for RequestDescriptor.CodingKeys);
    atomic_store(result, qword_1EE62F380);
  }
  return result;
}

unint64_t sub_1A1349B1C()
{
  unint64_t result;

  result = qword_1EE62F490;
  if (!qword_1EE62F490)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8058, &type metadata for RequestDescriptor.ClassifyImageRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F490);
  }
  return result;
}

unint64_t sub_1A1349B64()
{
  unint64_t result;

  result = qword_1EE62F498[0];
  if (!qword_1EE62F498[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8080, &type metadata for RequestDescriptor.ClassifyImageRequestCodingKeys);
    atomic_store(result, qword_1EE62F498);
  }
  return result;
}

unint64_t sub_1A1349BAC()
{
  unint64_t result;

  result = qword_1EE62F520;
  if (!qword_1EE62F520)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7FA0, &type metadata for RequestDescriptor.CalculateImageAestheticsScoresRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F520);
  }
  return result;
}

unint64_t sub_1A1349BF4()
{
  unint64_t result;

  result = qword_1EE62F528[0];
  if (!qword_1EE62F528[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7FC8, &type metadata for RequestDescriptor.CalculateImageAestheticsScoresRequestCodingKeys);
    atomic_store(result, qword_1EE62F528);
  }
  return result;
}

unint64_t sub_1A1349C3C()
{
  unint64_t result;

  result = qword_1EE62F5B0;
  if (!qword_1EE62F5B0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7EE8, &type metadata for RequestDescriptor.CoreMLRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F5B0);
  }
  return result;
}

unint64_t sub_1A1349C84()
{
  unint64_t result;

  result = qword_1EE62F5B8[0];
  if (!qword_1EE62F5B8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7F10, &type metadata for RequestDescriptor.CoreMLRequestCodingKeys);
    atomic_store(result, qword_1EE62F5B8);
  }
  return result;
}

unint64_t sub_1A1349CCC()
{
  unint64_t result;

  result = qword_1EE62F640;
  if (!qword_1EE62F640)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7E30, &type metadata for RequestDescriptor.DetectAnimalBodyPoseRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F640);
  }
  return result;
}

unint64_t sub_1A1349D14()
{
  unint64_t result;

  result = qword_1EE62F648[0];
  if (!qword_1EE62F648[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7E58, &type metadata for RequestDescriptor.DetectAnimalBodyPoseRequestCodingKeys);
    atomic_store(result, qword_1EE62F648);
  }
  return result;
}

unint64_t sub_1A1349D5C()
{
  unint64_t result;

  result = qword_1EE62F6D0;
  if (!qword_1EE62F6D0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7D78, &type metadata for RequestDescriptor.DetectBarcodesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F6D0);
  }
  return result;
}

unint64_t sub_1A1349DA4()
{
  unint64_t result;

  result = qword_1EE62F6D8[0];
  if (!qword_1EE62F6D8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7DA0, &type metadata for RequestDescriptor.DetectBarcodesRequestCodingKeys);
    atomic_store(result, qword_1EE62F6D8);
  }
  return result;
}

unint64_t sub_1A1349DEC()
{
  unint64_t result;

  result = qword_1EE62F760;
  if (!qword_1EE62F760)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7CC0, &type metadata for RequestDescriptor.DetectContoursRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F760);
  }
  return result;
}

unint64_t sub_1A1349E34()
{
  unint64_t result;

  result = qword_1EE62F768[0];
  if (!qword_1EE62F768[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7CE8, &type metadata for RequestDescriptor.DetectContoursRequestCodingKeys);
    atomic_store(result, qword_1EE62F768);
  }
  return result;
}

unint64_t sub_1A1349E7C()
{
  unint64_t result;

  result = qword_1EE62F7F0;
  if (!qword_1EE62F7F0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7C08, &type metadata for RequestDescriptor.DetectDocumentSegmentationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F7F0);
  }
  return result;
}

unint64_t sub_1A1349EC4()
{
  unint64_t result;

  result = qword_1EE62F7F8[0];
  if (!qword_1EE62F7F8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7C30, &type metadata for RequestDescriptor.DetectDocumentSegmentationRequestCodingKeys);
    atomic_store(result, qword_1EE62F7F8);
  }
  return result;
}

unint64_t sub_1A1349F0C()
{
  unint64_t result;

  result = qword_1EE62F880;
  if (!qword_1EE62F880)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7B50, &type metadata for RequestDescriptor.DetectFaceCaptureQualityRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F880);
  }
  return result;
}

unint64_t sub_1A1349F54()
{
  unint64_t result;

  result = qword_1EE62F888[0];
  if (!qword_1EE62F888[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7B78, &type metadata for RequestDescriptor.DetectFaceCaptureQualityRequestCodingKeys);
    atomic_store(result, qword_1EE62F888);
  }
  return result;
}

unint64_t sub_1A1349F9C()
{
  unint64_t result;

  result = qword_1EE62F910;
  if (!qword_1EE62F910)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7A98, &type metadata for RequestDescriptor.DetectFaceRectanglesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F910);
  }
  return result;
}

unint64_t sub_1A1349FE4()
{
  unint64_t result;

  result = qword_1EE62F918[0];
  if (!qword_1EE62F918[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7AC0, &type metadata for RequestDescriptor.DetectFaceRectanglesRequestCodingKeys);
    atomic_store(result, qword_1EE62F918);
  }
  return result;
}

unint64_t sub_1A134A02C()
{
  unint64_t result;

  result = qword_1EE62F9A0;
  if (!qword_1EE62F9A0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D79E0, &type metadata for RequestDescriptor.DetectFaceLandmarksRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62F9A0);
  }
  return result;
}

unint64_t sub_1A134A074()
{
  unint64_t result;

  result = qword_1EE62F9A8[0];
  if (!qword_1EE62F9A8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7A08, &type metadata for RequestDescriptor.DetectFaceLandmarksRequestCodingKeys);
    atomic_store(result, qword_1EE62F9A8);
  }
  return result;
}

unint64_t sub_1A134A0BC()
{
  unint64_t result;

  result = qword_1EE62FA30;
  if (!qword_1EE62FA30)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7928, &type metadata for RequestDescriptor.DetectHorizonRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FA30);
  }
  return result;
}

unint64_t sub_1A134A104()
{
  unint64_t result;

  result = qword_1EE62FA38[0];
  if (!qword_1EE62FA38[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7950, &type metadata for RequestDescriptor.DetectHorizonRequestCodingKeys);
    atomic_store(result, qword_1EE62FA38);
  }
  return result;
}

unint64_t sub_1A134A14C()
{
  unint64_t result;

  result = qword_1EE62FAC0;
  if (!qword_1EE62FAC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7870, &type metadata for RequestDescriptor.DetectHumanBodyPoseRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FAC0);
  }
  return result;
}

unint64_t sub_1A134A194()
{
  unint64_t result;

  result = qword_1EE62FAC8[0];
  if (!qword_1EE62FAC8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7898, &type metadata for RequestDescriptor.DetectHumanBodyPoseRequestCodingKeys);
    atomic_store(result, qword_1EE62FAC8);
  }
  return result;
}

unint64_t sub_1A134A1DC()
{
  unint64_t result;

  result = qword_1EE62FB50;
  if (!qword_1EE62FB50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D77B8, &type metadata for RequestDescriptor.DetectHumanBodyPose3DRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FB50);
  }
  return result;
}

unint64_t sub_1A134A224()
{
  unint64_t result;

  result = qword_1EE62FB58[0];
  if (!qword_1EE62FB58[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D77E0, &type metadata for RequestDescriptor.DetectHumanBodyPose3DRequestCodingKeys);
    atomic_store(result, qword_1EE62FB58);
  }
  return result;
}

unint64_t sub_1A134A26C()
{
  unint64_t result;

  result = qword_1EE62FBE0;
  if (!qword_1EE62FBE0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7700, &type metadata for RequestDescriptor.DetectHumanHandPoseRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FBE0);
  }
  return result;
}

unint64_t sub_1A134A2B4()
{
  unint64_t result;

  result = qword_1EE62FBE8[0];
  if (!qword_1EE62FBE8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7728, &type metadata for RequestDescriptor.DetectHumanHandPoseRequestCodingKeys);
    atomic_store(result, qword_1EE62FBE8);
  }
  return result;
}

unint64_t sub_1A134A2FC()
{
  unint64_t result;

  result = qword_1EE62FC70;
  if (!qword_1EE62FC70)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7648, &type metadata for RequestDescriptor.DetectHumanRectanglesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FC70);
  }
  return result;
}

unint64_t sub_1A134A344()
{
  unint64_t result;

  result = qword_1EE62FC78;
  if (!qword_1EE62FC78)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7670, &type metadata for RequestDescriptor.DetectHumanRectanglesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FC78);
  }
  return result;
}

unint64_t sub_1A134A38C()
{
  unint64_t result;

  result = qword_1EE62FD00;
  if (!qword_1EE62FD00)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7590, &type metadata for RequestDescriptor.DetectRectanglesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FD00);
  }
  return result;
}

unint64_t sub_1A134A3D4()
{
  unint64_t result;

  result = qword_1EE62FD08[0];
  if (!qword_1EE62FD08[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D75B8, &type metadata for RequestDescriptor.DetectRectanglesRequestCodingKeys);
    atomic_store(result, qword_1EE62FD08);
  }
  return result;
}

unint64_t sub_1A134A41C()
{
  unint64_t result;

  result = qword_1EE62FD90;
  if (!qword_1EE62FD90)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D74D8, &type metadata for RequestDescriptor.DetectTextRectanglesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FD90);
  }
  return result;
}

unint64_t sub_1A134A464()
{
  unint64_t result;

  result = qword_1EE62FD98[0];
  if (!qword_1EE62FD98[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7500, &type metadata for RequestDescriptor.DetectTextRectanglesRequestCodingKeys);
    atomic_store(result, qword_1EE62FD98);
  }
  return result;
}

unint64_t sub_1A134A4AC()
{
  unint64_t result;

  result = qword_1EE62FE20;
  if (!qword_1EE62FE20)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7420, &type metadata for RequestDescriptor.DetectTrajectoriesRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FE20);
  }
  return result;
}

unint64_t sub_1A134A4F4()
{
  unint64_t result;

  result = qword_1EE62FE28[0];
  if (!qword_1EE62FE28[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7448, &type metadata for RequestDescriptor.DetectTrajectoriesRequestCodingKeys);
    atomic_store(result, qword_1EE62FE28);
  }
  return result;
}

unint64_t sub_1A134A53C()
{
  unint64_t result;

  result = qword_1EE62FEB0;
  if (!qword_1EE62FEB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7368, &type metadata for RequestDescriptor.GenerateAttentionBasedSaliencyImageRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FEB0);
  }
  return result;
}

unint64_t sub_1A134A584()
{
  unint64_t result;

  result = qword_1EE62FEB8[0];
  if (!qword_1EE62FEB8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7390, &type metadata for RequestDescriptor.GenerateAttentionBasedSaliencyImageRequestCodingKeys);
    atomic_store(result, qword_1EE62FEB8);
  }
  return result;
}

unint64_t sub_1A134A5CC()
{
  unint64_t result;

  result = qword_1EE62FF40;
  if (!qword_1EE62FF40)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D72B0, &type metadata for RequestDescriptor.GenerateImageFeaturePrintRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FF40);
  }
  return result;
}

unint64_t sub_1A134A614()
{
  unint64_t result;

  result = qword_1EE62FF48[0];
  if (!qword_1EE62FF48[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D72D8, &type metadata for RequestDescriptor.GenerateImageFeaturePrintRequestCodingKeys);
    atomic_store(result, qword_1EE62FF48);
  }
  return result;
}

unint64_t sub_1A134A65C()
{
  unint64_t result;

  result = qword_1EE62FFD0;
  if (!qword_1EE62FFD0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D71F8, &type metadata for RequestDescriptor.GenerateForegroundInstanceMaskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE62FFD0);
  }
  return result;
}

unint64_t sub_1A134A6A4()
{
  unint64_t result;

  result = qword_1EE62FFD8[0];
  if (!qword_1EE62FFD8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7220, &type metadata for RequestDescriptor.GenerateForegroundInstanceMaskRequestCodingKeys);
    atomic_store(result, qword_1EE62FFD8);
  }
  return result;
}

unint64_t sub_1A134A6EC()
{
  unint64_t result;

  result = qword_1EE630060;
  if (!qword_1EE630060)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7140, &type metadata for RequestDescriptor.GenerateObjectnessBasedSaliencyImageRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE630060);
  }
  return result;
}

unint64_t sub_1A134A734()
{
  unint64_t result;

  result = qword_1EE630068[0];
  if (!qword_1EE630068[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7168, &type metadata for RequestDescriptor.GenerateObjectnessBasedSaliencyImageRequestCodingKeys);
    atomic_store(result, qword_1EE630068);
  }
  return result;
}

unint64_t sub_1A134A77C()
{
  unint64_t result;

  result = qword_1EE6300F0;
  if (!qword_1EE6300F0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D7088, &type metadata for RequestDescriptor.GeneratePersonSegmentationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6300F0);
  }
  return result;
}

unint64_t sub_1A134A7C4()
{
  unint64_t result;

  result = qword_1EE6300F8[0];
  if (!qword_1EE6300F8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D70B0, &type metadata for RequestDescriptor.GeneratePersonSegmentationRequestCodingKeys);
    atomic_store(result, qword_1EE6300F8);
  }
  return result;
}

unint64_t sub_1A134A80C()
{
  unint64_t result;

  result = qword_1EE630180;
  if (!qword_1EE630180)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6FD0, &type metadata for RequestDescriptor.GeneratePersonInstanceMaskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE630180);
  }
  return result;
}

unint64_t sub_1A134A854()
{
  unint64_t result;

  result = qword_1EE630188[0];
  if (!qword_1EE630188[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6FF8, &type metadata for RequestDescriptor.GeneratePersonInstanceMaskRequestCodingKeys);
    atomic_store(result, qword_1EE630188);
  }
  return result;
}

unint64_t sub_1A134A89C()
{
  unint64_t result;

  result = qword_1EE630210;
  if (!qword_1EE630210)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6F18, &type metadata for RequestDescriptor.RecognizeAnimalsRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE630210);
  }
  return result;
}

unint64_t sub_1A134A8E4()
{
  unint64_t result;

  result = qword_1EE630218[0];
  if (!qword_1EE630218[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6F40, &type metadata for RequestDescriptor.RecognizeAnimalsRequestCodingKeys);
    atomic_store(result, qword_1EE630218);
  }
  return result;
}

unint64_t sub_1A134A92C()
{
  unint64_t result;

  result = qword_1EE6302A0;
  if (!qword_1EE6302A0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6E60, &type metadata for RequestDescriptor.RecognizeTextRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6302A0);
  }
  return result;
}

unint64_t sub_1A134A974()
{
  unint64_t result;

  result = qword_1EE6302A8[0];
  if (!qword_1EE6302A8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6E88, &type metadata for RequestDescriptor.RecognizeTextRequestCodingKeys);
    atomic_store(result, qword_1EE6302A8);
  }
  return result;
}

unint64_t sub_1A134A9BC()
{
  unint64_t result;

  result = qword_1EE630330;
  if (!qword_1EE630330)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6DA8, &type metadata for RequestDescriptor.TrackHomographicImageRegistrationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE630330);
  }
  return result;
}

unint64_t sub_1A134AA04()
{
  unint64_t result;

  result = qword_1EE630338[0];
  if (!qword_1EE630338[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6DD0, &type metadata for RequestDescriptor.TrackHomographicImageRegistrationRequestCodingKeys);
    atomic_store(result, qword_1EE630338);
  }
  return result;
}

unint64_t sub_1A134AA4C()
{
  unint64_t result;

  result = qword_1EE6303C0;
  if (!qword_1EE6303C0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6CF0, &type metadata for RequestDescriptor.TrackObjectRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6303C0);
  }
  return result;
}

unint64_t sub_1A134AA94()
{
  unint64_t result;

  result = qword_1EE6303C8[0];
  if (!qword_1EE6303C8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6D18, &type metadata for RequestDescriptor.TrackObjectRequestCodingKeys);
    atomic_store(result, qword_1EE6303C8);
  }
  return result;
}

unint64_t sub_1A134AADC()
{
  unint64_t result;

  result = qword_1EE630450;
  if (!qword_1EE630450)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6C38, &type metadata for RequestDescriptor.TrackOpticalFlowRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE630450);
  }
  return result;
}

unint64_t sub_1A134AB24()
{
  unint64_t result;

  result = qword_1EE630458[0];
  if (!qword_1EE630458[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6C60, &type metadata for RequestDescriptor.TrackOpticalFlowRequestCodingKeys);
    atomic_store(result, qword_1EE630458);
  }
  return result;
}

unint64_t sub_1A134AB6C()
{
  unint64_t result;

  result = qword_1EE6304E0;
  if (!qword_1EE6304E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6B80, &type metadata for RequestDescriptor.TrackRectangleRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6304E0);
  }
  return result;
}

unint64_t sub_1A134ABB4()
{
  unint64_t result;

  result = qword_1EE6304E8[0];
  if (!qword_1EE6304E8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6BA8, &type metadata for RequestDescriptor.TrackRectangleRequestCodingKeys);
    atomic_store(result, qword_1EE6304E8);
  }
  return result;
}

unint64_t sub_1A134ABFC()
{
  unint64_t result;

  result = qword_1EE630570;
  if (!qword_1EE630570)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6AC8, &type metadata for RequestDescriptor.TrackTranslationalImageRegistrationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE630570);
  }
  return result;
}

unint64_t sub_1A134AC44()
{
  unint64_t result;

  result = qword_1EE630578;
  if (!qword_1EE630578)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D6AF0, &type metadata for RequestDescriptor.TrackTranslationalImageRegistrationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE630578);
  }
  return result;
}

unint64_t sub_1A134AC8C()
{
  unint64_t result;

  result = qword_1EE630600;
  if (!qword_1EE630600)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8110, &type metadata for RequestDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE630600);
  }
  return result;
}

unint64_t sub_1A134ACD4()
{
  unint64_t result;

  result = qword_1EE630608[0];
  if (!qword_1EE630608[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D8138, &type metadata for RequestDescriptor.CodingKeys);
    atomic_store(result, qword_1EE630608);
  }
  return result;
}

uint64_t sub_1A134AD18(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001A15FDC90 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000001A15FDCB0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65524C4D65726F63 && a2 == 0xED00007473657571 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001A15FDCE0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001A15FDD00 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001A15FDD20 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001A15FDD40 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x80000001A15FDD70 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001A15FDD90 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001A15FDDB0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001A15FDDD0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001A15FDDF0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001A15FDE10 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001A15FDE30 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001A15FDE50 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001A15FDE70 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001A15FDE90 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001A15FDEB0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD00000000000002ALL && a2 == 0x80000001A15FDED0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x80000001A15FDF00 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000001A15FDF30 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD00000000000002BLL && a2 == 0x80000001A15FDF60 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001A15FDF90 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001A15FDFC0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001A15FDFF0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001A15FE010 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0xD000000000000028 && a2 == 0x80000001A15FE030 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001A15FE060 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001A15FE080 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001A15FE0A0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0xD00000000000002ALL && a2 == 0x80000001A15FE0C0)
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else
  {
    v5 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 30;
    else
      return 31;
  }
}

uint64_t VNFaceLandmarkRegion2D.normalizedPoints.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t result;

  v1 = objc_retainAutorelease(v0);
  v2 = objc_msgSend(v1, sel_normalizedPoints);
  result = (uint64_t)objc_msgSend(v1, sel_pointCount);
  if ((result & 0x8000000000000000) == 0)
    return (uint64_t)sub_1A134CDD4(v2, result);
  __break(1u);
  return result;
}

uint64_t VNFaceLandmarkRegion2D.pointsInImage(imageSize:)(double a1, double a2)
{
  void *v2;
  id v5;
  id v6;
  uint64_t result;

  v5 = objc_retainAutorelease(v2);
  v6 = objc_msgSend(v5, sel_pointsInImageOfSize_, a1, a2);
  result = (uint64_t)objc_msgSend(v5, sel_pointCount);
  if ((result & 0x8000000000000000) == 0)
    return (uint64_t)sub_1A134CDD4(v6, result);
  __break(1u);
  return result;
}

char *VNFaceLandmarkRegion2D.precisionEstimatesPerPoint.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  id v6;
  void *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = objc_msgSend(v0, sel_precisionEstimatesPerPoint);
  if (!v1)
    return (char *)v1;
  sub_1A128DB40(0, (unint64_t *)&qword_1EE6001A0);
  v2 = sub_1A15A8C40();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_4;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v3 = sub_1A15A91B0();
  swift_bridgeObjectRelease();
  if (!v3)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
LABEL_4:
  v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  result = sub_1A134CAC0(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v1 = v12;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x1A1B09470](v5, v2);
      else
        v6 = *(id *)(v2 + 8 * v5 + 32);
      v7 = v6;
      objc_msgSend(v6, sel_floatValue);
      v9 = v8;

      v11 = v12[2];
      v10 = v12[3];
      if (v11 >= v10 >> 1)
        sub_1A134CAC0((char *)(v10 > 1), v11 + 1, 1);
      ++v5;
      v12[2] = v11 + 1;
      *((_DWORD *)v12 + v11 + 8) = v9;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return (char *)v1;
  }
  __break(1u);
  return result;
}

unint64_t VNFaceObservation.faceCaptureQuality.getter()
{
  void *v0;
  id v1;
  void *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v1 = objc_msgSend(v0, sel_faceCaptureQuality);
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, sel_floatValue);
    v4 = v3;

    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

id VNRecognizedText.boundingBox(for:)(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v9[3];

  v9[2] = *(id *)MEMORY[0x1E0C80C00];
  v9[1] = a2;
  v3 = objc_msgSend(v2, sel_string);
  sub_1A15A8BB0();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD570);
  sub_1A12A06EC();
  sub_1A12A0738();
  v4 = sub_1A15A9018();
  v9[0] = 0;
  v6 = objc_msgSend(v2, sel_boundingBoxForRange_error_, v4, v5, v9);
  if (v9[0])
  {
    v7 = v9[0];
    swift_willThrow();

  }
  return v6;
}

_QWORD *VNContour.normalizedPoints.getter()
{
  void *v0;
  id v1;

  v1 = objc_retainAutorelease(v0);
  return sub_1A134CE74(objc_msgSend(v1, sel_normalizedPoints), (uint64_t)objc_msgSend(v1, sel_pointCount));
}

id VNDetectHumanBodyPoseRequest.supportedJointNames.getter()
{
  return sub_1A134BCD0((SEL *)&selRef_supportedJointNamesAndReturnError_, type metadata accessor for JointName);
}

id VNDetectHumanBodyPoseRequest.supportedJointsGroupNames.getter()
{
  return sub_1A134BCD0((SEL *)&selRef_supportedJointsGroupNamesAndReturnError_, _s3__C15JointsGroupNameVMa_2);
}

id sub_1A134BCD0(SEL *a1, void (*a2)(_QWORD))
{
  void *v2;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v4 = objc_msgSend(v2, *a1, v10);
  v5 = v10[0];
  if (v4)
  {
    v6 = v4;
    a2(0);
    v7 = (id)sub_1A15A8C40();
    v8 = v5;

  }
  else
  {
    v7 = v10[0];
    sub_1A15A8844();

    swift_willThrow();
  }
  return v7;
}

id VNDetectHumanHandPoseRequest.supportedJointNames.getter()
{
  return sub_1A134BCD0((SEL *)&selRef_supportedJointNamesAndReturnError_, _s3__C9JointNameVMa_2);
}

id VNDetectHumanHandPoseRequest.supportedJointsGroupNames.getter()
{
  return sub_1A134BCD0((SEL *)&selRef_supportedJointsGroupNamesAndReturnError_, _s3__C15JointsGroupNameVMa_1);
}

id VNDetectAnimalBodyPoseRequest.supportedJointNames.getter()
{
  return sub_1A134BCD0((SEL *)&selRef_supportedJointNamesAndReturnError_, _s3__C9JointNameVMa_1);
}

id VNDetectAnimalBodyPoseRequest.supportedJointsGroupNames.getter()
{
  return sub_1A134BCD0((SEL *)&selRef_supportedJointsGroupNamesAndReturnError_, _s3__C15JointsGroupNameVMa_0);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VNHumanBodyPose3DObservation.cameraRelativePosition(_:)(simd_float4x4 *__return_ptr retstr, VNHumanBodyPose3DObservationJointName a2)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _OWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, sizeof(v8));
  v7 = 0;
  if ((objc_msgSend(v2, sel_getCameraRelativePosition_forJointName_error_, v8, a2, &v7) & 1) != 0)
  {
    v3 = v7;
  }
  else
  {
    v4 = v7;
    v5 = (void *)sub_1A15A8844();

    swift_willThrow();
    v7 = v5;
    v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6001C0);
    sub_1A128DB40(0, (unint64_t *)&qword_1EE5FD998);
    if (swift_dynamicCast())
    {

      swift_willThrow();
    }

  }
}

id VNDetectHumanBodyPose3DRequest.supportedJointNames.getter()
{
  return sub_1A134BCD0((SEL *)&selRef_supportedJointNamesAndReturnError_, _s3__C9JointNameVMa_0);
}

id VNDetectHumanBodyPose3DRequest.supportedJointsGroupNames.getter()
{
  return sub_1A134BCD0((SEL *)&selRef_supportedJointsGroupNamesAndReturnError_, type metadata accessor for JointsGroupName);
}

size_t sub_1A134C0F4(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  size_t result;
  uint64_t i;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = sub_1A15A8A84();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - v7;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1A15A91B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = MEMORY[0x1E0DEE9D8];
  if (!v9)
    return v10;
  v19 = MEMORY[0x1E0DEE9D8];
  result = sub_1A12F730C(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v10 = v19;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v9; ++i)
      {
        MEMORY[0x1A1B09470](i, a1);
        sub_1A15A8A78();
        v19 = v10;
        v14 = *(_QWORD *)(v10 + 16);
        v13 = *(_QWORD *)(v10 + 24);
        if (v14 >= v13 >> 1)
        {
          sub_1A12F730C(v13 > 1, v14 + 1, 1);
          v10 = v19;
        }
        *(_QWORD *)(v10 + 16) = v14 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v14, v8, v2);
      }
    }
    else
    {
      v15 = a1 + 32;
      do
      {
        swift_unknownObjectRetain();
        sub_1A15A8A78();
        v19 = v10;
        v17 = *(_QWORD *)(v10 + 16);
        v16 = *(_QWORD *)(v10 + 24);
        if (v17 >= v16 >> 1)
        {
          sub_1A12F730C(v16 > 1, v17 + 1, 1);
          v10 = v19;
        }
        *(_QWORD *)(v10 + 16) = v17 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v17, v5, v2);
        v15 += 8;
        --v9;
      }
      while (v9);
    }
    return v10;
  }
  __break(1u);
  return result;
}

__CFString *static VNBarcodeSymbology.Aztec.getter()
{
  return CFSTR("VNBarcodeSymbologyAztec");
}

__CFString *static VNBarcodeSymbology.Code39.getter()
{
  return CFSTR("VNBarcodeSymbologyCode39");
}

__CFString *static VNBarcodeSymbology.Code39Checksum.getter()
{
  return CFSTR("VNBarcodeSymbologyCode39Checksum");
}

__CFString *static VNBarcodeSymbology.Code39FullASCII.getter()
{
  return CFSTR("VNBarcodeSymbologyCode39FullASCII");
}

__CFString *static VNBarcodeSymbology.Code39FullASCIIChecksum.getter()
{
  return CFSTR("VNBarcodeSymbologyCode39FullASCIIChecksum");
}

__CFString *static VNBarcodeSymbology.Code93.getter()
{
  return CFSTR("VNBarcodeSymbologyCode93");
}

__CFString *static VNBarcodeSymbology.Code93i.getter()
{
  return CFSTR("VNBarcodeSymbologyCode93i");
}

__CFString *static VNBarcodeSymbology.Code128.getter()
{
  return CFSTR("VNBarcodeSymbologyCode128");
}

__CFString *static VNBarcodeSymbology.DataMatrix.getter()
{
  return CFSTR("VNBarcodeSymbologyDataMatrix");
}

__CFString *static VNBarcodeSymbology.EAN8.getter()
{
  return CFSTR("VNBarcodeSymbologyEAN8");
}

__CFString *static VNBarcodeSymbology.EAN13.getter()
{
  return CFSTR("VNBarcodeSymbologyEAN13");
}

__CFString *static VNBarcodeSymbology.I2of5.getter()
{
  return CFSTR("VNBarcodeSymbologyI2of5");
}

__CFString *static VNBarcodeSymbology.I2of5Checksum.getter()
{
  return CFSTR("VNBarcodeSymbologyI2of5Checksum");
}

__CFString *static VNBarcodeSymbology.ITF14.getter()
{
  return CFSTR("VNBarcodeSymbologyITF14");
}

__CFString *static VNBarcodeSymbology.PDF417.getter()
{
  return CFSTR("VNBarcodeSymbologyPDF417");
}

__CFString *static VNBarcodeSymbology.QR.getter()
{
  return CFSTR("VNBarcodeSymbologyQR");
}

__CFString *static VNBarcodeSymbology.UPCE.getter()
{
  return CFSTR("VNBarcodeSymbologyUPCE");
}

id VNRequest.supportedComputeStageDevices.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v1 = objc_msgSend(v0, sel_supportedComputeStageDevicesAndReturnError_, v8);
  v2 = v8[0];
  if (v1)
  {
    v3 = v1;
    type metadata accessor for VNComputeStage();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FE810);
    sub_1A12857D8((unint64_t *)&unk_1EE5FFB30, (uint64_t (*)(uint64_t))type metadata accessor for VNComputeStage, (uint64_t)&unk_1A15D94E0);
    v4 = sub_1A15A8AF0();
    v5 = v2;

    v2 = (id)sub_1A134CBD4(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = v8[0];
    sub_1A15A8844();

    swift_willThrow();
  }
  return v2;
}

uint64_t VNRequest.computeDevice(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  if (objc_msgSend(v2, sel_computeDeviceForComputeStage_, a1))
  {
    sub_1A15A8A78();
    v4 = sub_1A15A8A84();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 0;
  }
  else
  {
    v4 = sub_1A15A8A84();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 1;
  }
  return v5(v6, v7, 1, v4);
}

uint64_t VNRequest.setComputeDevice(_:for:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6001D0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A134CF78(a1, (uint64_t)v8);
  v9 = sub_1A15A8A84();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1A134CFC0((uint64_t)v8);
    v11 = 0;
  }
  else
  {
    v11 = sub_1A15A8A6C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  objc_msgSend(v3, sel_setComputeDevice_forComputeStage_, v11, a2);
  return swift_unknownObjectRelease();
}

uint64_t sub_1A134C6C0(uint64_t a1, id *a2)
{
  return sub_1A12E7EC4(a1, a2);
}

uint64_t sub_1A134C6D4(uint64_t a1, id *a2)
{
  return sub_1A12E7F54(a1, a2) & 1;
}

uint64_t sub_1A134C704()
{
  sub_1A12857D8(&qword_1EE600350, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_2, (uint64_t)&unk_1A15D8EAC);
  sub_1A12857D8(&qword_1EE600358, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_2, (uint64_t)&unk_1A15D8E4C);
  sub_1A12857D8((unint64_t *)&unk_1EE6002F0, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointGroupKey, (uint64_t)&unk_1A15D9668);
  return sub_1A15A91E0();
}

uint64_t sub_1A134C7A4()
{
  sub_1A12857D8(&qword_1EE600340, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_2, (uint64_t)&unk_1A15DC4B8);
  sub_1A12857D8(&qword_1EE600348, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_2, (uint64_t)&unk_1A15DC478);
  sub_1A12857D8(&qword_1EE5FE568, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointKey, (uint64_t)&unk_1A15CAA98);
  return sub_1A15A91E0();
}

uint64_t sub_1A134C844()
{
  sub_1A12857D8(&qword_1EE600330, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_1, (uint64_t)&unk_1A15D90CC);
  sub_1A12857D8(&qword_1EE600338, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_1, (uint64_t)&unk_1A15D906C);
  sub_1A12857D8((unint64_t *)&unk_1EE6002F0, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointGroupKey, (uint64_t)&unk_1A15D9668);
  return sub_1A15A91E0();
}

uint64_t sub_1A134C8E4()
{
  sub_1A12857D8(&qword_1EE600310, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_0, (uint64_t)&unk_1A15D92EC);
  sub_1A12857D8(&qword_1EE600318, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_0, (uint64_t)&unk_1A15D928C);
  sub_1A12857D8((unint64_t *)&unk_1EE6002F0, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointGroupKey, (uint64_t)&unk_1A15D9668);
  return sub_1A15A91E0();
}

uint64_t sub_1A134C984()
{
  sub_1A12857D8(&qword_1EE6002E0, (uint64_t (*)(uint64_t))type metadata accessor for JointsGroupName, (uint64_t)&unk_1A15D944C);
  sub_1A12857D8(&qword_1EE6002E8, (uint64_t (*)(uint64_t))type metadata accessor for JointsGroupName, (uint64_t)&unk_1A15D93EC);
  sub_1A12857D8((unint64_t *)&unk_1EE6002F0, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointGroupKey, (uint64_t)&unk_1A15D9668);
  return sub_1A15A91E0();
}

uint64_t sub_1A134CA38()
{
  sub_1A12857D8((unint64_t *)&unk_1EE6002F0, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointGroupKey, (uint64_t)&unk_1A15D9668);
  sub_1A12857D8(&qword_1EE6003E0, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointGroupKey, (uint64_t)&unk_1A15D95B8);
  return sub_1A15A91E0();
}

char *sub_1A134CAC0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A134CADC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A134CADC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600388);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_1A134CBD4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  id v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE600370);
  result = sub_1A15A91BC();
  v3 = (_QWORD *)result;
  v4 = 0;
  v25 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v23 = v6;
  v24 = (unint64_t)(v8 + 63) >> 6;
  v11 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = *(id *)(*(_QWORD *)(v25 + 48) + 8 * i);
    v18 = swift_bridgeObjectRetain();
    v19 = sub_1A134C0F4(v18);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v17;
    *(_QWORD *)(v3[7] + 8 * i) = v19;
    v20 = v3[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v22;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v14 >= v24)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v23 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v24)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v23 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v24)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v23 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v24)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v23 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v24)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v23 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_1A134CDD4(const void *a1, uint64_t a2)
{
  size_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (!a2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (a2 <= 0)
  {
    v4 = 16 * a2;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE600390);
    v4 = 16 * a2;
    v5 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 17;
    v5[2] = a2;
    v5[3] = 2 * (v7 >> 4);
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

_QWORD *sub_1A134CE74(const void *a1, uint64_t a2)
{
  size_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (!a2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (a2 <= 0)
  {
    v4 = 8 * a2;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600380);
    v4 = 8 * a2;
    v5 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    v5[2] = a2;
    v5[3] = 2 * (v7 >> 3);
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

void _s3__C15JointsGroupNameVMa_2(uint64_t a1)
{
  sub_1A128636C(a1, (unint64_t *)&unk_1EE600210);
}

void _s3__C9JointNameVMa_2(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE600208);
}

void _s3__C15JointsGroupNameVMa_1(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE600200);
}

void _s3__C15JointsGroupNameVMa_0(uint64_t a1)
{
  sub_1A128636C(a1, (unint64_t *)&unk_1EE6001F0);
}

void type metadata accessor for JointsGroupName(uint64_t a1)
{
  sub_1A128636C(a1, (unint64_t *)&unk_1EE6001E0);
}

uint64_t sub_1A134CF78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6001D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A134CFC0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6001D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A134D000()
{
  return sub_1A12857D8(&qword_1EE600238, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_2, (uint64_t)&unk_1A15D8E10);
}

uint64_t sub_1A134D02C()
{
  return sub_1A12857D8(&qword_1EE600240, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_2, (uint64_t)&unk_1A15D8DE4);
}

uint64_t sub_1A134D058()
{
  return sub_1A12857D8(&qword_1EE600248, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_2, (uint64_t)&unk_1A15D8E80);
}

uint64_t sub_1A134D084()
{
  return sub_1A12857D8(&qword_1EE600250, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_2, (uint64_t)&unk_1A15D8F48);
}

uint64_t sub_1A134D0B0()
{
  return sub_1A12857D8(&qword_1EE600258, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_2, (uint64_t)&unk_1A15DC440);
}

uint64_t sub_1A134D0DC()
{
  return sub_1A12857D8(&qword_1EE600260, (uint64_t (*)(uint64_t))_s3__C9JointNameVMa_2, (uint64_t)&unk_1A15D8F88);
}

uint64_t sub_1A134D108()
{
  return sub_1A12857D8(&qword_1EE600268, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_1, (uint64_t)&unk_1A15D9030);
}

uint64_t sub_1A134D134()
{
  return sub_1A12857D8(&qword_1EE600270, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_1, (uint64_t)&unk_1A15D9004);
}

uint64_t sub_1A134D160()
{
  return sub_1A12857D8(&qword_1EE600278, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_1, (uint64_t)&unk_1A15D90A0);
}

uint64_t sub_1A134D18C()
{
  return sub_1A12857D8(&qword_1EE600298, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_0, (uint64_t)&unk_1A15D9250);
}

uint64_t sub_1A134D1B8()
{
  return sub_1A12857D8(&qword_1EE6002A0, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_0, (uint64_t)&unk_1A15D9224);
}

uint64_t sub_1A134D1E4()
{
  return sub_1A12857D8(&qword_1EE6002A8, (uint64_t (*)(uint64_t))_s3__C15JointsGroupNameVMa_0, (uint64_t)&unk_1A15D92C0);
}

uint64_t sub_1A134D210()
{
  return sub_1A12857D8(&qword_1EE6002C8, (uint64_t (*)(uint64_t))type metadata accessor for JointsGroupName, (uint64_t)&unk_1A15D93B0);
}

uint64_t sub_1A134D23C()
{
  return sub_1A12857D8(&qword_1EE6002D0, (uint64_t (*)(uint64_t))type metadata accessor for JointsGroupName, (uint64_t)&unk_1A15D9384);
}

uint64_t sub_1A134D268()
{
  return sub_1A12857D8(&qword_1EE6002D8, (uint64_t (*)(uint64_t))type metadata accessor for JointsGroupName, (uint64_t)&unk_1A15D9420);
}

void type metadata accessor for VNRecognizedPointGroupKey(uint64_t a1)
{
  sub_1A128636C(a1, (unint64_t *)&unk_1EE6003A0);
}

uint64_t sub_1A134D2A8()
{
  return sub_1A12857D8(&qword_1EE6003C0, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointGroupKey, (uint64_t)&unk_1A15D957C);
}

uint64_t sub_1A134D2D4()
{
  return sub_1A12857D8(&qword_1EE6003C8, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointGroupKey, (uint64_t)&unk_1A15D9550);
}

uint64_t sub_1A134D300()
{
  return sub_1A12857D8(&qword_1EE6003D8, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointGroupKey, (uint64_t)&unk_1A15D95EC);
}

uint64_t static RecognizeAnimalsRequest.Revision.< infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  return *a2 & ~*a1 & 1;
}

BOOL static RecognizeAnimalsRequest.Revision.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t RecognizeAnimalsRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A134D390()
{
  sub_1A134D698();
  return sub_1A15A9474();
}

uint64_t sub_1A134D3B8()
{
  sub_1A134D698();
  return sub_1A15A9480();
}

uint64_t sub_1A134D3E0()
{
  sub_1A134D654();
  return sub_1A15A9474();
}

uint64_t sub_1A134D408()
{
  sub_1A134D654();
  return sub_1A15A9480();
}

uint64_t sub_1A134D430()
{
  sub_1A134D6DC();
  return sub_1A15A9474();
}

uint64_t sub_1A134D458()
{
  sub_1A134D6DC();
  return sub_1A15A9480();
}

uint64_t RecognizeAnimalsRequest.Revision.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6003E8);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6003F0);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6003F8);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A134D654();
  sub_1A15A9468();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A134D698();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A134D6DC();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_1A134D654()
{
  unint64_t result;

  result = qword_1EE631AA8;
  if (!qword_1EE631AA8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9C4C, &type metadata for RecognizeAnimalsRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE631AA8);
  }
  return result;
}

unint64_t sub_1A134D698()
{
  unint64_t result;

  result = qword_1EE631AB0;
  if (!qword_1EE631AB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9BFC, &type metadata for RecognizeAnimalsRequest.Revision.ANODv5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE631AB0);
  }
  return result;
}

unint64_t sub_1A134D6DC()
{
  unint64_t result;

  result = qword_1EE631AB8[0];
  if (!qword_1EE631AB8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9BAC, &type metadata for RecognizeAnimalsRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE631AB8);
  }
  return result;
}

uint64_t RecognizeAnimalsRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t RecognizeAnimalsRequest.Revision.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600400);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600408);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600410);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A134D654();
  v11 = v33;
  sub_1A15A945C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A15A9294();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A15A90F0();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v21 = &type metadata for RecognizeAnimalsRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A134D698();
    sub_1A15A9204();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A134D6DC();
    v22 = v6;
    sub_1A15A9204();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_1A134DABC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return RecognizeAnimalsRequest.Revision.init(from:)(a1, a2);
}

uint64_t sub_1A134DAD0(_QWORD *a1)
{
  return RecognizeAnimalsRequest.Revision.encode(to:)(a1);
}

double RecognizeAnimalsRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  double result;
  __n128 v8;
  unsigned __int8 v9;
  __n128 v10[3];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(v10);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 2)
  {
    v5 = sub_1A134E140();
    sub_1A1377CDC((uint64_t)&type metadata for RecognizeAnimalsRequest, v5, (uint64_t)&v9);
    v6 = v9;
  }
  else
  {
    v6 = v3 & 1;
  }
  result = v10[0].n128_f64[0];
  v8 = v10[1];
  *a2 = v10[0];
  a2[1] = v8;
  a2[2].n128_u8[0] = v6;
  a2[2].n128_u64[1] = v4;
  return result;
}

Vision::RecognizeAnimalsRequest::Animal_optional __swiftcall RecognizeAnimalsRequest.Animal.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  Vision::RecognizeAnimalsRequest::Animal_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A15A91EC();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t RecognizeAnimalsRequest.Animal.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 7627075;
  else
    return 6778692;
}

Vision::RecognizeAnimalsRequest::Animal_optional sub_1A134DBF0(Swift::String *a1)
{
  return RecognizeAnimalsRequest.Animal.init(rawValue:)(*a1);
}

void sub_1A134DBFC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 6778692;
  if (*v1)
    v2 = 7627075;
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_1A134DC24(char *a1, char *a2)
{
  return sub_1A134DC30(*a1, *a2);
}

uint64_t sub_1A134DC30(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 7627075;
  else
    v2 = 6778692;
  if ((a2 & 1) != 0)
    v3 = 7627075;
  else
    v3 = 6778692;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1A15A9354();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1A134DC9C()
{
  sub_1A134EFC0();
  return sub_1A15A8C1C();
}

uint64_t sub_1A134DCF8()
{
  sub_1A134EFC0();
  return sub_1A15A8C10();
}

uint64_t sub_1A134DD44()
{
  sub_1A15A93E4();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A134DDA8()
{
  sub_1A15A8BC8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A134DDE0()
{
  sub_1A15A93E4();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

char *RecognizeAnimalsRequest.supportedAnimals.getter()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;

  type metadata accessor for Session();
  Session.__allocating_init()();
  v0 = sub_1A134E184();
  v1 = swift_retain();
  sub_1A12F6948(v1, (uint64_t)&type metadata for RecognizeAnimalsRequest, v0);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1A128DB40(0, &qword_1EE5FECC8);
  if (swift_dynamicCastMetatype())
  {
    v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_knownAnimalIdentifiers);
    v5 = sub_1A15A8C40();

    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      v7 = v5 + 40;
      v2 = (char *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        swift_bridgeObjectRetain();
        v8 = sub_1A15A91EC();
        swift_bridgeObjectRelease();
        if (!v8)
          break;
        if (v8 == 1)
        {
          v9 = 1;
LABEL_13:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v2 = sub_1A134E618(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
          v11 = *((_QWORD *)v2 + 2);
          v10 = *((_QWORD *)v2 + 3);
          if (v11 >= v10 >> 1)
            v2 = sub_1A134E618((char *)(v10 > 1), v11 + 1, 1, v2);
          *((_QWORD *)v2 + 2) = v11 + 1;
          v2[v11 + 32] = v9;
        }
        v7 += 16;
        if (!--v6)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          return v2;
        }
      }
      v9 = 0;
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
  }
  swift_release();
  return (char *)MEMORY[0x1E0DEE9D8];
}

__n128 RecognizeAnimalsRequest.regionOfInterest.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 RecognizeAnimalsRequest.regionOfInterest.setter(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*RecognizeAnimalsRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

void RecognizeAnimalsRequest.revision.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

uint64_t sub_1A134E0B8()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A134E140();
  result = sub_1A1378184((uint64_t)&type metadata for RecognizeAnimalsRequest, v0);
  qword_1EE631A98 = result;
  return result;
}

uint64_t static RecognizeAnimalsRequest.supportedRevisions.getter()
{
  if (qword_1EE631A90 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void RecognizeAnimalsRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32) | 0xC0;
}

unint64_t sub_1A134E140()
{
  unint64_t result;

  result = qword_1EE600418;
  if (!qword_1EE600418)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9974, &type metadata for RecognizeAnimalsRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600418);
  }
  return result;
}

unint64_t sub_1A134E184()
{
  unint64_t result;

  result = qword_1EE600420;
  if (!qword_1EE600420)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9990, &type metadata for RecognizeAnimalsRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600420);
  }
  return result;
}

int *sub_1A134E1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;
  char v8;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600498);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v8 = 0;
  v1 = sub_1A12DA050(5, 0, 21);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(5, 0, 21);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(5, 0, 21);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958((uint64_t)&v8, v2, v4, v6, (uint64_t)&type metadata for RecognizeAnimalsRequest.Revision, v0 + 32);
  qword_1EE6437A8 = v0;
  return result;
}

uint64_t RecognizeAnimalsRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t RecognizeAnimalsRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 40);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A134E3B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A134E184();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A134E3E0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A134E140();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A134E420(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A134E140();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A134E460(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32) | 0xC0;
}

uint64_t sub_1A134E470(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A134E140();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A134E49C()
{
  if (qword_1EE631AA0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A134E4DC(uint64_t a1, uint64_t a2)
{
  sub_1A12B3264();
  return sub_1A1377AB4(a1, a2);
}

size_t sub_1A134E514(size_t result, uint64_t a2)
{
  _OWORD *v2;
  __int128 v3;
  size_t v5;
  unint64_t v6;
  _BYTE v7[32];
  _OWORD v8[3];

  v3 = v2[1];
  v8[0] = *v2;
  v8[1] = v3;
  v8[2] = v2[2];
  if (*(_QWORD *)(result + 16) < 4uLL)
  {
    __break(1u);
  }
  else
  {
    sub_1A128E764(result + 128, (uint64_t)v7);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600428);
    if (!swift_dynamicCast())
      return MEMORY[0x1E0DEE9D8];
    sub_1A1309F1C((uint64_t)v8);
    v5 = sub_1A134E8CC(v6, (unint64_t)v8, a2);
    sub_1A1309F44((uint64_t)v8);
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

size_t sub_1A134E5F0(size_t a1, uint64_t a2)
{
  return sub_1A134E514(a1, a2);
}

void sub_1A134E604(uint64_t a1)
{
  sub_1A134E780(a1);
}

char *sub_1A134E618(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6004A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _s6Vision23RecognizeAnimalsRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  CGSize v6;
  CGSize v7;
  CGRect v9;
  CGRect v10;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(CGSize *)(a1 + 16);
  v10.origin = *(CGPoint *)a1;
  v10.size = v6;
  v7 = *(CGSize *)(a2 + 16);
  v9.origin = *(CGPoint *)a2;
  v9.size = v7;
  if (!static NormalizedRect.== infix(_:_:)(&v10, &v9) || ((v2 ^ v4) & 1) != 0)
    return 0;
  else
    return sub_1A12903B0(v3, v5);
}

void sub_1A134E780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  void *ObjCClassFromMetadata;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *);
  id v15;
  void (*v16)(_BYTE *, _QWORD);
  _BYTE v17[32];
  _QWORD v18[4];

  v4 = *(unsigned __int8 *)(v1 + 32);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1A128DB40(0, &qword_1EE5FECC8);
  if (objc_msgSend(ObjCClassFromMetadata, sel_isSubclassOfClass_, swift_getObjCClassFromMetadata()))
  {
    if (v4)
      v6 = 3737841666;
    else
      v6 = 2;
    v7 = sub_1A128DB40(0, (unint64_t *)&qword_1EE5FD4D8);
    v8 = sub_1A128DB40(0, &qword_1EE600490);
    v9 = sub_1A129EBFC(v8, v6);
    if (!v2)
    {
      v10 = v9;
      v11 = sub_1A15A8BB0();
      v13 = v12;
      v18[3] = v7;
      v18[0] = v10;
      v14 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200);
      v15 = v10;
      v16 = (void (*)(_BYTE *, _QWORD))v14(v17);
      sub_1A128D188((uint64_t)v18, v11, v13);
      v16(v17, 0);

    }
  }
}

size_t sub_1A134E8CC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  size_t result;
  uint64_t v14;
  unsigned __int8 v15;
  __int128 v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  unsigned __int8 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = v3;
  v22 = a3;
  v7 = type metadata accessor for RecognizedObjectObservation();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_15;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    if (!v11)
      return v12;
    v27 = MEMORY[0x1E0DEE9D8];
    result = sub_1A12B73B0(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
      break;
    v14 = 0;
    v12 = v27;
    v20[1] = v4;
    v21 = a1 & 0xC000000000000001;
    v15 = *(_BYTE *)(a2 + 32) | 0xC0;
    v16 = *(_OWORD *)(a2 + 16);
    v25 = *(_OWORD *)a2;
    v26 = v16;
    v4 = a1;
    while (v11 != v14)
    {
      if (v21)
        v17 = (id)MEMORY[0x1A1B09470](v14, a1);
      else
        v17 = *(id *)(a1 + 8 * v14 + 32);
      v24 = v15;
      v23[0] = v25;
      v23[1] = v26;
      sub_1A12FDC30(v17, &v24, (double *)v23, v22, (uint64_t)v10);
      v27 = v12;
      v19 = *(_QWORD *)(v12 + 16);
      v18 = *(_QWORD *)(v12 + 24);
      a2 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        sub_1A12B73B0(v18 > 1, v19 + 1, 1);
        v12 = v27;
      }
      ++v14;
      *(_QWORD *)(v12 + 16) = a2;
      sub_1A134F004((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v19);
      a1 = v4;
      if (v11 == v14)
        return v12;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v11 = sub_1A15A91B0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t sub_1A134EAA8()
{
  unint64_t result;

  result = qword_1EE600430;
  if (!qword_1EE600430)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeAnimalsRequest.Revision, &type metadata for RecognizeAnimalsRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600430);
  }
  return result;
}

unint64_t sub_1A134EAF0()
{
  unint64_t result;

  result = qword_1EE600438[0];
  if (!qword_1EE600438[0])
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeAnimalsRequest.Animal, &type metadata for RecognizeAnimalsRequest.Animal);
    atomic_store(result, qword_1EE600438);
  }
  return result;
}

unint64_t sub_1A134EB34(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B3264();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A134EB58(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6D70();
  result = sub_1A134EB84();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A134EB84()
{
  unint64_t result;

  result = qword_1EE600470;
  if (!qword_1EE600470)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeAnimalsRequest, &type metadata for RecognizeAnimalsRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600470);
  }
  return result;
}

unint64_t sub_1A134EBCC()
{
  unint64_t result;

  result = qword_1EE600478;
  if (!qword_1EE600478)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeAnimalsRequest, &type metadata for RecognizeAnimalsRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600478);
  }
  return result;
}

unint64_t sub_1A134EC14()
{
  unint64_t result;

  result = qword_1EE600480;
  if (!qword_1EE600480)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeAnimalsRequest.Revision, &type metadata for RecognizeAnimalsRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600480);
  }
  return result;
}

uint64_t sub_1A134EC58()
{
  return sub_1A12857D8(&qword_1EE5FEA70, (uint64_t (*)(uint64_t))type metadata accessor for RecognizedObjectObservation, (uint64_t)&unk_1A15CCD28);
}

unint64_t sub_1A134EC84(uint64_t a1)
{
  unint64_t result;

  result = sub_1A134E140();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for RecognizeAnimalsRequest()
{
  return &type metadata for RecognizeAnimalsRequest;
}

ValueMetadata *type metadata accessor for RecognizeAnimalsRequest.Revision()
{
  return &type metadata for RecognizeAnimalsRequest.Revision;
}

ValueMetadata *type metadata accessor for RecognizeAnimalsRequest.Animal()
{
  return &type metadata for RecognizeAnimalsRequest.Animal;
}

uint64_t _s6Vision23RecognizeAnimalsRequestV8RevisionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A134ED28 + 4 * byte_1A15D96B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A134ED5C + 4 * byte_1A15D96B0[v4]))();
}

uint64_t sub_1A134ED5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A134ED64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A134ED6CLL);
  return result;
}

uint64_t sub_1A134ED78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A134ED80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A134ED84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A134ED8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecognizeAnimalsRequest.Revision.CodingKeys()
{
  return &type metadata for RecognizeAnimalsRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for RecognizeAnimalsRequest.Revision.Revision2CodingKeys()
{
  return &type metadata for RecognizeAnimalsRequest.Revision.Revision2CodingKeys;
}

ValueMetadata *type metadata accessor for RecognizeAnimalsRequest.Revision.ANODv5CodingKeys()
{
  return &type metadata for RecognizeAnimalsRequest.Revision.ANODv5CodingKeys;
}

unint64_t sub_1A134EDCC()
{
  unint64_t result;

  result = qword_1EE632640[0];
  if (!qword_1EE632640[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9B84, &type metadata for RecognizeAnimalsRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE632640);
  }
  return result;
}

unint64_t sub_1A134EE14()
{
  unint64_t result;

  result = qword_1EE632750;
  if (!qword_1EE632750)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9AA4, &type metadata for RecognizeAnimalsRequest.Revision.Revision2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE632750);
  }
  return result;
}

unint64_t sub_1A134EE5C()
{
  unint64_t result;

  result = qword_1EE632758[0];
  if (!qword_1EE632758[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9ACC, &type metadata for RecognizeAnimalsRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE632758);
  }
  return result;
}

unint64_t sub_1A134EEA4()
{
  unint64_t result;

  result = qword_1EE6327E0;
  if (!qword_1EE6327E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9A54, &type metadata for RecognizeAnimalsRequest.Revision.ANODv5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6327E0);
  }
  return result;
}

unint64_t sub_1A134EEEC()
{
  unint64_t result;

  result = qword_1EE6327E8[0];
  if (!qword_1EE6327E8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9A7C, &type metadata for RecognizeAnimalsRequest.Revision.ANODv5CodingKeys);
    atomic_store(result, qword_1EE6327E8);
  }
  return result;
}

unint64_t sub_1A134EF34()
{
  unint64_t result;

  result = qword_1EE632870;
  if (!qword_1EE632870)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9AF4, &type metadata for RecognizeAnimalsRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE632870);
  }
  return result;
}

unint64_t sub_1A134EF7C()
{
  unint64_t result;

  result = qword_1EE632878;
  if (!qword_1EE632878)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9B1C, &type metadata for RecognizeAnimalsRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE632878);
  }
  return result;
}

unint64_t sub_1A134EFC0()
{
  unint64_t result;

  result = qword_1EE600488;
  if (!qword_1EE600488)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RecognizeAnimalsRequest.Animal, &type metadata for RecognizeAnimalsRequest.Animal);
    atomic_store(result, (unint64_t *)&qword_1EE600488);
  }
  return result;
}

uint64_t sub_1A134F004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RecognizedObjectObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void NormalizedRect.init(x:y:width:height:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

Vision::NormalizedRect __swiftcall NormalizedRect.init(normalizedRect:)(Vision::NormalizedRect normalizedRect)
{
  Vision::NormalizedRect *v1;

  *v1 = normalizedRect;
  return normalizedRect;
}

Vision::NormalizedRect __swiftcall NormalizedRect.init(imageRect:in:)(Vision::NormalizedRect imageRect, CGSize in)
{
  Vision::NormalizedRect *v2;
  Vision::NormalizedRect *v3;

  v3 = v2;
  if (in.width <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (in.width >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((*(_QWORD *)&in.width & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&in.height & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_10;
  }
  if (in.height <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (in.height < 9.22337204e18)
  {
    imageRect = (Vision::NormalizedRect)VNNormalizedRectForImageRect((CGRect)imageRect, (uint64_t)in.width, (uint64_t)in.height);
    *v3 = imageRect;
    return imageRect;
  }
LABEL_12:
  __break(1u);
  return imageRect;
}

Vision::NormalizedRect __swiftcall NormalizedRect.init(imageRect:in:normalizedTo:)(Vision::NormalizedRect imageRect, CGSize in, Vision::NormalizedRect normalizedTo)
{
  CGFloat *v3;
  Vision::NormalizedRect *v4;
  Vision::NormalizedRect *v5;
  CGFloat v6;
  CGFloat v7;
  size_t width;
  size_t height;
  CGRect v10;

  v5 = v4;
  if (in.width <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (in.width >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((*(_QWORD *)&in.width & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&in.height & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_10;
  }
  if (in.height <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (in.height < 9.22337204e18)
  {
    v6 = *v3;
    v7 = v3[1];
    v10.size.width = v3[2];
    v10.size.height = v3[3];
    width = (uint64_t)in.width;
    height = (uint64_t)in.height;
    v10.origin.x = v6;
    v10.origin.y = v7;
    imageRect = (Vision::NormalizedRect)VNNormalizedRectForImageRectUsingRegionOfInterest((CGRect)imageRect, width, height, v10);
    *v5 = imageRect;
    return imageRect;
  }
LABEL_12:
  __break(1u);
  return imageRect;
}

__n128 static NormalizedRect.fullImage.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  a1[1] = result;
  return result;
}

double NormalizedRect.cgRect.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double NormalizedRect.origin.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t NormalizedRect.width.getter()
{
  return sub_1A134F210((uint64_t (*)(double, double, double, double))MEMORY[0x1E0C9D5D0]);
}

uint64_t NormalizedRect.height.getter()
{
  return sub_1A134F210((uint64_t (*)(double, double, double, double))MEMORY[0x1E0C9D580]);
}

uint64_t sub_1A134F210(uint64_t (*a1)(double, double, double, double))
{
  double *v1;

  return a1(*v1, v1[1], v1[2], v1[3]);
}

__C::CGRect __swiftcall NormalizedRect.toImageCoordinates(_:origin:)(CGSize _, Vision::CoordinateOrigin origin)
{
  double *v2;
  double height;
  double width;
  CGFloat v5;
  double v6;
  double v7;
  double v8;
  __C::CGRect result;

  height = _.height;
  width = _.width;
  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  if ((*(_BYTE *)origin & 1) == 0)
  {
LABEL_9:
    VNVerticallyFlippedNormalizedRect();
    if (width > -9.22337204e18)
    {
      if (width < 9.22337204e18)
      {
        if ((*(_QWORD *)&width & 0x7FF0000000000000) != 0x7FF0000000000000
          && (*(_QWORD *)&height & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          if (height > -9.22337204e18)
          {
            if (height < 9.22337204e18)
              goto LABEL_15;
LABEL_24:
            __break(1u);
            goto _$s6Vision14NormalizedRectV18toImageCoordinates_6originSo6CGRectVSo6CGSizeV_AA16CoordinateOriginOtF;
          }
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (width <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (width >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((*(_QWORD *)&width & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&height & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_18;
  }
  if (height <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (height >= 9.22337204e18)
  {
    __break(1u);
    goto LABEL_9;
  }
LABEL_15:
  *(CGRect *)&v5 = VNImageRectForNormalizedRect(*(CGRect *)&v5, (uint64_t)width, (uint64_t)height);
_$s6Vision14NormalizedRectV18toImageCoordinates_6originSo6CGRectVSo6CGSizeV_AA16CoordinateOriginOtF:
  result.size.height = v8;
  result.size.width = v7;
  result.origin.y = v6;
  result.origin.x = v5;
  return result;
}

Vision::NormalizedRect __swiftcall NormalizedRect.verticallyFlipped()()
{
  double *v0;
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  Vision::NormalizedRect result;

  v1 = v0;
  VNVerticallyFlippedNormalizedRect();
  *v1 = v2;
  v1[1] = v3;
  v1[2] = v4;
  v1[3] = v5;
  result.cgRect.size.height = v5;
  result.cgRect.size.width = v4;
  result.cgRect.origin.y = v3;
  result.cgRect.origin.x = v2;
  return result;
}

__C::CGRect __swiftcall NormalizedRect.toImageCoordinates(from:imageSize:origin:)(Vision::NormalizedRect from, CGSize imageSize, Vision::CoordinateOrigin origin)
{
  _BYTE *v3;
  double *v4;
  double y;
  double x;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGFloat v11;
  double v12;
  double v13;
  double v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __C::CGRect result;

  y = from.cgRect.origin.y;
  x = from.cgRect.origin.x;
  v8 = *(_QWORD *)origin;
  v7 = *(_QWORD *)(origin + 8);
  v10 = *(_QWORD *)(origin + 16);
  v9 = *(_QWORD *)(origin + 24);
  v11 = *v4;
  v12 = v4[1];
  v13 = v4[2];
  v14 = v4[3];
  if ((*v3 & 1) == 0)
  {
    VNVerticallyFlippedNormalizedRect();
    v22 = v21;
    v11 = -9.22337204e18;
    if (x > -9.22337204e18)
    {
      v11 = 9.22337204e18;
      if (x < 9.22337204e18)
      {
        if ((*(_QWORD *)&x & 0x7FF0000000000000) != 0x7FF0000000000000
          && (*(_QWORD *)&y & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          v11 = -9.22337204e18;
          if (y > -9.22337204e18)
          {
            v11 = 9.22337204e18;
            if (y < 9.22337204e18)
            {
              v23 = v12;
              v24 = v13;
              v25 = v14;
              VNVerticallyFlippedNormalizedRect();
              v17 = v26;
              v18 = v27;
              v19 = v28;
              v20 = v29;
              v11 = v22;
              v12 = v23;
              v13 = v24;
              v14 = v25;
              v15 = (uint64_t)x;
              v16 = (uint64_t)y;
              goto LABEL_16;
            }
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (x <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (x >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((*(_QWORD *)&x & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&y & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_19;
  }
  if (y <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (y >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v15 = (uint64_t)x;
  v16 = (uint64_t)y;
  v17 = v8;
  v18 = v7;
  v19 = v10;
  v20 = v9;
LABEL_16:
  *(CGRect *)&v11 = VNImageRectForNormalizedRectUsingRegionOfInterest(*(CGRect *)&v11, v15, v16, *(CGRect *)&v17);
LABEL_27:
  result.size.height = v14;
  result.size.width = v13;
  result.origin.y = v12;
  result.origin.x = v11;
  return result;
}

uint64_t NormalizedRect.hash(into:)()
{
  return sub_1A12A3B50();
}

uint64_t NormalizedRect.description.getter()
{
  CGFloat *v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGRect v6;
  CGRect v7;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_1A15A9090();
  sub_1A15A8BEC();
  sub_1A1296064();
  sub_1A15A8ACC();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  sub_1A15A8ACC();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v6.origin.x = v1;
  v6.origin.y = v2;
  v6.size.width = v3;
  v6.size.height = v4;
  CGRectGetWidth(v6);
  sub_1A15A8ACC();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v7.origin.x = v1;
  v7.origin.y = v2;
  v7.size.width = v3;
  v7.size.height = v4;
  CGRectGetHeight(v7);
  sub_1A15A8ACC();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

BOOL static NormalizedRect.== infix(_:_:)(CGRect *a1, CGRect *a2)
{
  return CGRectEqualToRect(*a1, *a2);
}

uint64_t sub_1A134F748()
{
  return 0x746365526763;
}

uint64_t sub_1A134F75C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746365526763 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A15A9354();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A134F7E8()
{
  sub_1A134F960();
  return sub_1A15A9474();
}

uint64_t sub_1A134F810()
{
  sub_1A134F960();
  return sub_1A15A9480();
}

uint64_t NormalizedRect.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6004A8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = *(_OWORD *)v1;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A134F960();
  sub_1A15A9468();
  v10[1] = v10[0];
  v11 = v7;
  v12 = v8;
  type metadata accessor for CGRect(0);
  sub_1A134FC34(&qword_1EE6004B0, MEMORY[0x1E0C9B9C0]);
  sub_1A15A92F4();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1A134F960()
{
  unint64_t result;

  result = qword_1EE632900[0];
  if (!qword_1EE632900[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9E68, &type metadata for NormalizedRect.CodingKeys);
    atomic_store(result, qword_1EE632900);
  }
  return result;
}

uint64_t NormalizedRect.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A12A3B50();
  return sub_1A15A9420();
}

uint64_t NormalizedRect.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  _OWORD v11[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6004B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A134F960();
  sub_1A15A945C();
  if (!v2)
  {
    type metadata accessor for CGRect(0);
    sub_1A134FC34(&qword_1EE6004C0, MEMORY[0x1E0C9B9E0]);
    sub_1A15A9264();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL sub_1A134FB40(CGRect *a1, CGRect *a2)
{
  return CGRectEqualToRect(*a1, *a2);
}

uint64_t sub_1A134FB64()
{
  sub_1A15A93E4();
  sub_1A12A3B50();
  return sub_1A15A9420();
}

uint64_t sub_1A134FBC8()
{
  return sub_1A12A3B50();
}

uint64_t sub_1A134FBD4()
{
  sub_1A15A93E4();
  sub_1A12A3B50();
  return sub_1A15A9420();
}

uint64_t sub_1A134FC34(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGRect(255);
    result = MEMORY[0x1A1B0B774](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A134FC78()
{
  unint64_t result;

  result = qword_1EE6004C8;
  if (!qword_1EE6004C8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for NormalizedRect, &type metadata for NormalizedRect);
    atomic_store(result, (unint64_t *)&qword_1EE6004C8);
  }
  return result;
}

uint64_t sub_1A134FCBC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return NormalizedRect.init(from:)(a1, a2);
}

uint64_t sub_1A134FCD0(_QWORD *a1)
{
  return NormalizedRect.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for NormalizedRect()
{
  return &type metadata for NormalizedRect;
}

uint64_t storeEnumTagSinglePayload for NormalizedRect.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A134FD38 + 4 * byte_1A15D9C9C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A134FD58 + 4 * byte_1A15D9CA1[v4]))();
}

_BYTE *sub_1A134FD38(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A134FD58(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A134FD60(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A134FD68(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A134FD70(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A134FD78(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NormalizedRect.CodingKeys()
{
  return &type metadata for NormalizedRect.CodingKeys;
}

unint64_t sub_1A134FD98()
{
  unint64_t result;

  result = qword_1EE632C90[0];
  if (!qword_1EE632C90[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9E40, &type metadata for NormalizedRect.CodingKeys);
    atomic_store(result, qword_1EE632C90);
  }
  return result;
}

unint64_t sub_1A134FDE0()
{
  unint64_t result;

  result = qword_1EE632DA0;
  if (!qword_1EE632DA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9DB0, &type metadata for NormalizedRect.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE632DA0);
  }
  return result;
}

unint64_t sub_1A134FE28()
{
  unint64_t result;

  result = qword_1EE632DA8[0];
  if (!qword_1EE632DA8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15D9DD8, &type metadata for NormalizedRect.CodingKeys);
    atomic_store(result, qword_1EE632DA8);
  }
  return result;
}

id ContoursObservation.contourCount.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for ContoursObservation() + 32)), sel_contourCount);
}

uint64_t type metadata accessor for ContoursObservation()
{
  uint64_t result;

  result = qword_1EE633340;
  if (!qword_1EE633340)
    return swift_getSingletonMetadata();
  return result;
}

id ContoursObservation.normalizedPath.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for ContoursObservation() + 32)), sel_normalizedPath);
}

char *ContoursObservation.topLevelContours.getter()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for ContoursObservation() + 32)), sel_topLevelContours);
  sub_1A128DB40(0, &qword_1EE6004D0);
  v2 = sub_1A15A8C40();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v3 = sub_1A15A91B0();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_13;
LABEL_3:
  v11 = MEMORY[0x1E0DEE9D8];
  result = sub_1A13519F8(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v11;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1A1B09470](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v10 = *(_QWORD *)(v11 + 16);
      v9 = *(_QWORD *)(v11 + 24);
      if (v10 >= v9 >> 1)
        sub_1A13519F8((char *)(v9 > 1), v10 + 1, 1);
      ++v5;
      *(_QWORD *)(v11 + 16) = v10 + 1;
      *(_QWORD *)(v11 + 8 * v10 + 32) = v8;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return (char *)v6;
  }
  __break(1u);
  return result;
}

uint64_t ContoursObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

float ContoursObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for ContoursObservation() + 20));
}

__n128 ContoursObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for ContoursObservation() + 24);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t ContoursObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ContoursObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t ContoursObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;

  sub_1A15A9090();
  sub_1A15A8BEC();
  v1 = type metadata accessor for ContoursObservation();
  v2 = *(void **)(v0 + *(int *)(v1 + 32));
  objc_msgSend(v2, sel_contourCount);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v3 = objc_msgSend(v2, sel_topLevelContours);
  sub_1A128DB40(0, &qword_1EE6004D0);
  v4 = sub_1A15A8C40();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1A15A91B0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v5 = sub_1A12857D8(&qword_1EE6004D8, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
  sub_1A132D4B4(v1, (uint64_t)&off_1E452F400, v5);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

void __swiftcall ContoursObservation.contourAtIndex(_:)(Vision::ContoursObservation::Contour_optional *__return_ptr retstr, Swift::Int a2)
{
  uint64_t v2;
  void *v5;
  objc_class *v6;
  id v7;
  void *v8;
  void *v9;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = *(void **)(v2 + *(int *)(type metadata accessor for ContoursObservation() + 32));
  v10[0] = 0;
  v6 = (objc_class *)objc_msgSend(v5, sel_contourAtIndex_error_, a2, v10);
  v7 = v10[0];
  if (!v6)
  {
    v8 = v7;
    v9 = (void *)sub_1A15A8844();

    swift_willThrow();
    v6 = 0;
  }
  retstr->value.vnContour.super.isa = v6;
}

void ContoursObservation.countourAtIndexPath(_:)(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = *(void **)(v1 + *(int *)(type metadata accessor for ContoursObservation() + 32));
  v4 = (void *)sub_1A15A8964();
  v9[0] = 0;
  v5 = objc_msgSend(v3, sel_contourAtIndexPath_error_, v4, v9);

  v6 = v9[0];
  if (!v5)
  {
    v7 = v6;
    v8 = (void *)sub_1A15A8844();

    swift_willThrow();
    v5 = 0;
  }
  *a1 = v5;
}

uint64_t ContoursObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for ContoursObservation();
  sub_1A12857D8(&qword_1EE6004E0, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A1350590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE6004D8, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

id ContoursObservation.Contour.aspectRatio.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_aspectRatio);
}

void ContoursObservation.Contour.indexPath.getter()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, sel_indexPath);
  sub_1A15A8970();

}

id ContoursObservation.Contour.normalizedPath.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_normalizedPath);
}

id ContoursObservation.Contour.pointCount.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_pointCount);
}

_QWORD *ContoursObservation.Contour.normalizedPoints.getter()
{
  return VNContour.normalizedPoints.getter();
}

char *ContoursObservation.Contour.childContours.getter()
{
  id *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = objc_msgSend(*v0, sel_childContours);
  sub_1A128DB40(0, &qword_1EE6004D0);
  v2 = sub_1A15A8C40();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v3 = sub_1A15A91B0();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_13;
LABEL_3:
  v11 = MEMORY[0x1E0DEE9D8];
  result = sub_1A13519F8(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v11;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1A1B09470](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v10 = *(_QWORD *)(v11 + 16);
      v9 = *(_QWORD *)(v11 + 24);
      if (v10 >= v9 >> 1)
        sub_1A13519F8((char *)(v9 > 1), v10 + 1, 1);
      ++v5;
      *(_QWORD *)(v11 + 16) = v10 + 1;
      *(_QWORD *)(v11 + 8 * v10 + 32) = v8;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return (char *)v6;
  }
  __break(1u);
  return result;
}

uint64_t ContoursObservation.Contour.description.getter()
{
  void **v0;
  void *v1;
  id v2;
  unint64_t v3;

  v1 = *v0;
  sub_1A15A9090();
  sub_1A15A8BEC();
  objc_msgSend(v1, sel_pointCount);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v2 = objc_msgSend(v1, sel_childContours);
  sub_1A128DB40(0, &qword_1EE6004D0);
  v3 = sub_1A15A8C40();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1A15A91B0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

Swift::Double __swiftcall ContoursObservation.Contour.calculateArea(useOrientedArea:)(Swift::Bool useOrientedArea)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  id v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v2 = *v1;
  v8[0] = 0;
  v7 = 0;
  if (objc_msgSend((id)objc_opt_self(), sel_calculateArea_forContour_orientedArea_error_, v8, v2, useOrientedArea, &v7))
  {
    v3 = v7;
  }
  else
  {
    v4 = v7;
    v5 = (void *)sub_1A15A8844();

    swift_willThrow();
  }
  return *(double *)v8;
}

Swift::Double __swiftcall ContoursObservation.Contour.calculatePerimeter()()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  v7[0] = 0;
  v6 = 0;
  if (objc_msgSend((id)objc_opt_self(), sel_calculatePerimeter_forContour_error_, v7, v1, &v6))
  {
    v2 = v6;
  }
  else
  {
    v3 = v6;
    v4 = (void *)sub_1A15A8844();

    swift_willThrow();
  }
  return *(double *)v7;
}

void ContoursObservation.Contour.boundingCircle()(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  id v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  *(_QWORD *)&v16 = 0;
  v4 = objc_msgSend((id)objc_opt_self(), sel_boundingCircleForContour_error_, v3, &v16);
  if (v4)
  {
    v5 = v4;
    v6 = (id)v16;
    v7 = objc_msgSend(v5, sel_center);
    objc_msgSend(v7, sel_location);
    v9 = v8;
    v11 = v10;

    NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v11, v9));
    v15 = v16;
    objc_msgSend(v5, sel_radius);
    NormalizedCircle.init(center:radius:)(&v15, a1, v12);

  }
  else
  {
    v13 = (id)v16;
    v14 = (void *)sub_1A15A8844();

    swift_willThrow();
    sub_1A15A91A4();
    __break(1u);
  }
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContoursObservation.Contour.polygonApproximation(epsilon:)(Vision::ContoursObservation::Contour *__return_ptr retstr, Swift::Float epsilon)
{
  void **v2;
  void *v4;
  objc_class *v5;
  id v6;
  id v7;
  id v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = *v2;
  v9[0] = 0;
  v5 = (objc_class *)objc_msgSend(v4, sel_polygonApproximationWithEpsilon_error_, v9);
  v6 = v9[0];
  if (v5)
  {
    retstr->vnContour.super.isa = v5;
    v7 = v6;
  }
  else
  {
    v8 = v9[0];
    sub_1A15A8844();

    swift_willThrow();
  }
}

uint64_t static ContoursObservation.Contour.== infix(_:_:)()
{
  sub_1A128DB40(0, &qword_1EE5FD588);
  return sub_1A15A9000() & 1;
}

void ContoursObservation.Contour.hash(into:)()
{
  id *v0;
  id v1;

  v1 = *v0;
  sub_1A15A900C();

}

uint64_t ContoursObservation.Contour.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_1A15A93E4();
  v2 = v1;
  sub_1A15A900C();

  return sub_1A15A9420();
}

uint64_t sub_1A1350E70()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_1A15A93E4();
  v2 = v1;
  sub_1A15A900C();

  return sub_1A15A9420();
}

void sub_1A1350EBC()
{
  id *v0;
  id v1;

  v1 = *v0;
  sub_1A15A900C();

}

uint64_t sub_1A1350F00()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_1A15A93E4();
  v2 = v1;
  sub_1A15A900C();

  return sub_1A15A9420();
}

uint64_t sub_1A1350F4C()
{
  _BYTE *v0;

  if (*v0)
    return 0x746176726573626FLL;
  else
    return 0x756F746E6F436E76;
}

uint64_t sub_1A1350F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A13521D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A1350FB8()
{
  sub_1A1351C78();
  return sub_1A15A9474();
}

uint64_t sub_1A1350FE0()
{
  sub_1A1351C78();
  return sub_1A15A9480();
}

uint64_t ContoursObservation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28[3];

  v2 = v1;
  v28[2] = *(id *)MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v25 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6004E8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1351C78();
  sub_1A15A9468();
  v11 = (void *)objc_opt_self();
  v12 = type metadata accessor for ContoursObservation();
  v13 = *(int *)(v12 + 32);
  v24[1] = v2;
  v14 = *(_QWORD *)(v2 + v13);
  v28[0] = 0;
  v15 = objc_msgSend(v11, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v14, 1, v28);
  v16 = v28[0];
  if (v15)
  {
    v24[0] = v4;
    v17 = (void *)sub_1A15A888C();
    v19 = v18;

    v28[0] = v17;
    v28[1] = v19;
    v27 = 0;
    sub_1A1289940();
    v20 = v26;
    sub_1A15A92F4();
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return sub_1A12884B4((uint64_t)v17, (unint64_t)v19);
    }
    LOBYTE(v28[0]) = 1;
    sub_1A12855AC();
    sub_1A15A92AC();
    v23 = sub_1A12857D8(&qword_1EE6004D8, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
    sub_1A12E2C64((uint64_t)v6, v12, (uint64_t)&off_1E452F400, v23);
    sub_1A12884B4((uint64_t)v17, (unint64_t)v19);
    (*(void (**)(char *, _QWORD))(v25 + 8))(v6, v24[0]);
  }
  else
  {
    v22 = v16;
    sub_1A15A8844();

    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void ContoursObservation.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  int *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE v46[60];
  char v47;

  v36 = a2;
  v41 = sub_1A15A88C8();
  v37 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6004F0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ContoursObservation();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_1A1351C78();
  v15 = v43;
  sub_1A15A945C();
  if (v15)
    goto LABEL_3;
  v34 = (int *)v11;
  v35 = v6;
  v17 = v40;
  v16 = v41;
  v18 = v8;
  v43 = v13;
  v47 = 0;
  sub_1A12899C8();
  sub_1A15A9264();
  v19 = v7;
  v20 = v44;
  v21 = v45;
  sub_1A128DB40(0, &qword_1EE5FD5A0);
  sub_1A128DB40(0, &qword_1EE6004F8);
  v22 = sub_1A15A8F40();
  v23 = (void *)v22;
  v33 = v20;
  if (!v22)
  {
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v25 = 0xD00000000000001CLL;
    *(_QWORD *)(v25 + 8) = 0x80000001A15FE210;
    *(_BYTE *)(v25 + 16) = 0;
    swift_willThrow();
    sub_1A12884B4(v33, v21);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v19);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    return;
  }
  v32 = v21;
  v31 = v34[8];
  *(_QWORD *)&v43[v31] = v22;
  LOBYTE(v44) = 1;
  sub_1A12855AC();
  v24 = v23;
  sub_1A15A9204();
  v30 = v24;
  LOBYTE(v44) = 0;
  sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  sub_1A15A9264();
  v26 = (uint64_t)v43;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v43, v17, v16);
  LOBYTE(v44) = 1;
  sub_1A15A924C();
  *(_DWORD *)(v26 + v34[5]) = v27;
  v47 = 3;
  sub_1A1285654();
  sub_1A15A9228();
  v29 = v34;
  v28 = v35;
  *(_BYTE *)(v26 + v34[7]) = v44;
  sub_1A12E32A4((uint64_t)v46);
  sub_1A12884B4(v33, v32);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v39);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v19);
  sub_1A128465C((uint64_t)v46, v26 + v29[6]);
  sub_1A1351CBC(v26, v36);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  sub_1A1351D00(v26);
}

void sub_1A1351858(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ContoursObservation.init(from:)(a1, a2);
}

uint64_t sub_1A135186C(_QWORD *a1)
{
  return ContoursObservation.encode(to:)(a1);
}

__n128 ContoursObservation.init(_:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  int v5;
  int v6;
  int *v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14[2];

  objc_msgSend(a1, sel_timeRange, static NormalizedRect.fullImage.getter(v14).n128_f64[0]);
  v4 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v6 = v5;
  v7 = (int *)type metadata accessor for ContoursObservation();
  *(_DWORD *)(a2 + v7[5]) = v6;
  v8 = a2 + v7[6];
  result = v11;
  *(_OWORD *)v8 = v10;
  *(__n128 *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v12;
  *(_QWORD *)(v8 + 40) = v13;
  *(_BYTE *)(v8 + 48) = 0;
  *(_BYTE *)(a2 + v7[7]) = -4;
  *(_QWORD *)(a2 + v7[8]) = a1;
  return result;
}

uint64_t sub_1A1351968@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, int *a4@<X4>, uint64_t a5@<X8>)
{
  char v9;
  id v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;

  v9 = *a2;
  v10 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v11 = a4[6];
  *(_DWORD *)(a5 + a4[5]) = v12;
  result = sub_1A128465C(a3, a5 + v11);
  v14 = a4[8];
  *(_BYTE *)(a5 + a4[7]) = v9;
  *(_QWORD *)(a5 + v14) = a1;
  return result;
}

char *sub_1A13519F8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A1351A14(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A1351A14(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600520);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t _s6Vision19ContoursObservationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v12;

  if ((sub_1A15A88A4() & 1) == 0)
    goto LABEL_14;
  v4 = type metadata accessor for ContoursObservation();
  if (*(float *)(a1 + *(int *)(v4 + 20)) != *(float *)(a2 + *(int *)(v4 + 20)))
    goto LABEL_14;
  v5 = v4;
  v6 = *(int *)(v4 + 24);
  v7 = *(_BYTE *)(a1 + v6 + 48);
  v8 = a2 + v6;
  if ((v7 & 1) != 0)
  {
    if (!*(_BYTE *)(v8 + 48))
      goto LABEL_14;
  }
  else if ((*(_BYTE *)(v8 + 48) & 1) != 0 || (sub_1A15A8EC8() & 1) == 0)
  {
    goto LABEL_14;
  }
  v9 = *(int *)(v5 + 28);
  v10 = *(unsigned __int8 *)(a1 + v9);
  v11 = *(unsigned __int8 *)(a2 + v9);
  if (v10 <= 0xFB)
  {
    if (v11 > 0xFB)
      goto LABEL_14;
    sub_1A12862A0();
    if ((sub_1A15A8B80() & 1) == 0)
      goto LABEL_14;
  }
  else if (v11 <= 0xFB)
  {
LABEL_14:
    v12 = 0;
    return v12 & 1;
  }
  sub_1A128DB40(0, &qword_1EE5FD588);
  v12 = sub_1A15A9000();
  return v12 & 1;
}

unint64_t sub_1A1351C78()
{
  unint64_t result;

  result = qword_1EE632E30[0];
  if (!qword_1EE632E30[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA1C8, &type metadata for ContoursObservation.CodingKeys);
    atomic_store(result, qword_1EE632E30);
  }
  return result;
}

uint64_t sub_1A1351CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContoursObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A1351D00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContoursObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A1351D3C(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE5FDBC8, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
  a1[2] = sub_1A12857D8(&qword_1EE600500, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
  a1[3] = sub_1A12857D8(&qword_1EE600508, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
  result = sub_1A12857D8(&qword_1EE6004E0, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A1351DD0()
{
  return sub_1A12857D8(&qword_1EE600510, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
}

unint64_t sub_1A1351E00()
{
  unint64_t result;

  result = qword_1EE600518;
  if (!qword_1EE600518)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for ContoursObservation.Contour, &type metadata for ContoursObservation.Contour);
    atomic_store(result, (unint64_t *)&qword_1EE600518);
  }
  return result;
}

uint64_t sub_1A1351E44(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE6004D8, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&protocol conformance descriptor for ContoursObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ContoursObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A1351E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1A15A88C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ContoursObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A1351F14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A15A88C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_1A1351F8C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContoursObservation.Contour()
{
  return &type metadata for ContoursObservation.Contour;
}

uint64_t storeEnumTagSinglePayload for ContoursObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A1352080 + 4 * byte_1A15D9EC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A13520B4 + 4 * byte_1A15D9EC0[v4]))();
}

uint64_t sub_1A13520B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13520BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A13520C4);
  return result;
}

uint64_t sub_1A13520D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A13520D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A13520DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13520E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContoursObservation.CodingKeys()
{
  return &type metadata for ContoursObservation.CodingKeys;
}

unint64_t sub_1A1352104()
{
  unint64_t result;

  result = qword_1EE633450[0];
  if (!qword_1EE633450[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA1A0, &type metadata for ContoursObservation.CodingKeys);
    atomic_store(result, qword_1EE633450);
  }
  return result;
}

unint64_t sub_1A135214C()
{
  unint64_t result;

  result = qword_1EE633560;
  if (!qword_1EE633560)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA110, &type metadata for ContoursObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633560);
  }
  return result;
}

unint64_t sub_1A1352194()
{
  unint64_t result;

  result = qword_1EE633568[0];
  if (!qword_1EE633568[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA138, &type metadata for ContoursObservation.CodingKeys);
    atomic_store(result, qword_1EE633568);
  }
  return result;
}

uint64_t sub_1A13521D8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x756F746E6F436E76 && a2 == 0xE900000000000072;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t static DetectBarcodesRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static DetectBarcodesRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t DetectBarcodesRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A1352320()
{
  return 0x6E6F697369766572;
}

uint64_t sub_1A135233C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F697369766572 && a2 == 0xE900000000000034)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A15A9354();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A13523DC()
{
  sub_1A13525B8();
  return sub_1A15A9474();
}

uint64_t sub_1A1352404()
{
  sub_1A13525B8();
  return sub_1A15A9480();
}

uint64_t sub_1A135242C()
{
  sub_1A13525FC();
  return sub_1A15A9474();
}

uint64_t sub_1A1352454()
{
  sub_1A13525FC();
  return sub_1A15A9480();
}

uint64_t DetectBarcodesRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600528);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600530);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13525B8();
  sub_1A15A9468();
  sub_1A13525FC();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A13525B8()
{
  unint64_t result;

  result = qword_1EE633608;
  if (!qword_1EE633608)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB654, &type metadata for DetectBarcodesRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633608);
  }
  return result;
}

unint64_t sub_1A13525FC()
{
  unint64_t result;

  result = qword_1EE633610;
  if (!qword_1EE633610)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB604, &type metadata for DetectBarcodesRequest.Revision.Revision4CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633610);
  }
  return result;
}

uint64_t DetectBarcodesRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectBarcodesRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600538);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600540);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13525B8();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for DetectBarcodesRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A13525FC();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A13528DC(_QWORD *a1)
{
  return DetectBarcodesRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A13528F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600528);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600530);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13525B8();
  sub_1A15A9468();
  sub_1A13525FC();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double DetectBarcodesRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  double result;
  __n128 v9[3];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(v9);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A1354D80();
    sub_1A1377CDC((uint64_t)&type metadata for DetectBarcodesRequest, v5, v6);
  }
  a2->n128_u64[0] = (unint64_t)&unk_1E452FFD8;
  a2->n128_u8[8] = 0;
  v7 = v9[1];
  a2[1] = v9[0];
  a2[2] = v7;
  result = 7.29112205e-304;
  a2[3].n128_u32[0] = 0x1000000;
  a2[3].n128_u64[1] = v4;
  return result;
}

void *DetectBarcodesRequest.supportedSymbologies.getter()
{
  return &unk_1E452FFD8;
}

uint64_t DetectBarcodesRequest.symbologies.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DetectBarcodesRequest.symbologies.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DetectBarcodesRequest.symbologies.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectBarcodesRequest.coalescesCompositeSymbologies.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t DetectBarcodesRequest.coalescesCompositeSymbologies.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*DetectBarcodesRequest.coalescesCompositeSymbologies.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A1352B28()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A1354D80();
  result = sub_1A1378184((uint64_t)&type metadata for DetectBarcodesRequest, v0);
  qword_1EE6335F8 = result;
  return result;
}

uint64_t static DetectBarcodesRequest.supportedRevisions.getter()
{
  if (qword_1EE6335F0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

__n128 DetectBarcodesRequest.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 DetectBarcodesRequest.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t (*DetectBarcodesRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

void DetectBarcodesRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = 32;
}

BOOL static DetectBarcodesRequest.LocateMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DetectBarcodesRequest.LocateMode.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A1352C14(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A1352C50 + 4 * byte_1A15DA220[a1]))(0x6669636570736E75, 0xEB00000000646569);
}

unint64_t sub_1A1352C50()
{
  return 0xD000000000000011;
}

uint64_t sub_1A1352DD0()
{
  sub_1A1354F5C();
  return sub_1A15A9474();
}

uint64_t sub_1A1352DF8()
{
  sub_1A1354F5C();
  return sub_1A15A9480();
}

uint64_t sub_1A1352E20()
{
  sub_1A1354FE4();
  return sub_1A15A9474();
}

uint64_t sub_1A1352E48()
{
  sub_1A1354FE4();
  return sub_1A15A9480();
}

uint64_t sub_1A1352E70()
{
  sub_1A13550F4();
  return sub_1A15A9474();
}

uint64_t sub_1A1352E98()
{
  sub_1A13550F4();
  return sub_1A15A9480();
}

uint64_t sub_1A1352EC0()
{
  sub_1A13550B0();
  return sub_1A15A9474();
}

uint64_t sub_1A1352EE8()
{
  sub_1A13550B0();
  return sub_1A15A9480();
}

uint64_t sub_1A1352F10()
{
  sub_1A1355204();
  return sub_1A15A9474();
}

uint64_t sub_1A1352F38()
{
  sub_1A1355204();
  return sub_1A15A9480();
}

uint64_t sub_1A1352F60()
{
  sub_1A13551C0();
  return sub_1A15A9474();
}

uint64_t sub_1A1352F88()
{
  sub_1A13551C0();
  return sub_1A15A9480();
}

uint64_t sub_1A1352FB0()
{
  sub_1A1354F18();
  return sub_1A15A9474();
}

uint64_t sub_1A1352FD8()
{
  sub_1A1354F18();
  return sub_1A15A9480();
}

uint64_t sub_1A1353000()
{
  sub_1A1354FA0();
  return sub_1A15A9474();
}

uint64_t sub_1A1353028()
{
  sub_1A1354FA0();
  return sub_1A15A9480();
}

uint64_t sub_1A1353050()
{
  sub_1A1354E90();
  return sub_1A15A9474();
}

uint64_t sub_1A1353078()
{
  sub_1A1354E90();
  return sub_1A15A9480();
}

uint64_t sub_1A13530A0()
{
  sub_1A135506C();
  return sub_1A15A9474();
}

uint64_t sub_1A13530C8()
{
  sub_1A135506C();
  return sub_1A15A9480();
}

uint64_t sub_1A13530F0()
{
  sub_1A1355028();
  return sub_1A15A9474();
}

uint64_t sub_1A1353118()
{
  sub_1A1355028();
  return sub_1A15A9480();
}

uint64_t sub_1A1353140()
{
  sub_1A1354ED4();
  return sub_1A15A9474();
}

uint64_t sub_1A1353168()
{
  sub_1A1354ED4();
  return sub_1A15A9480();
}

uint64_t sub_1A1353190()
{
  sub_1A135517C();
  return sub_1A15A9474();
}

uint64_t sub_1A13531B8()
{
  sub_1A135517C();
  return sub_1A15A9480();
}

uint64_t sub_1A13531E0()
{
  sub_1A1355138();
  return sub_1A15A9474();
}

uint64_t sub_1A1353208()
{
  sub_1A1355138();
  return sub_1A15A9480();
}

uint64_t sub_1A1353230()
{
  unsigned __int8 *v0;

  return sub_1A1352C14(*v0);
}

uint64_t sub_1A1353238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1356D58(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A135325C(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_1A1353268()
{
  sub_1A1354DC4();
  return sub_1A15A9474();
}

uint64_t sub_1A1353290()
{
  sub_1A1354DC4();
  return sub_1A15A9480();
}

uint64_t sub_1A13532B8()
{
  sub_1A1354E4C();
  return sub_1A15A9474();
}

uint64_t sub_1A13532E0()
{
  sub_1A1354E4C();
  return sub_1A15A9480();
}

uint64_t sub_1A1353308()
{
  sub_1A1354E08();
  return sub_1A15A9474();
}

uint64_t sub_1A1353330()
{
  sub_1A1354E08();
  return sub_1A15A9480();
}

uint64_t sub_1A1353358()
{
  sub_1A1355248();
  return sub_1A15A9474();
}

uint64_t sub_1A1353380()
{
  sub_1A1355248();
  return sub_1A15A9480();
}

void *static DetectBarcodesRequest.LocateMode.allCases.getter()
{
  return &unk_1E45302C0;
}

void DetectBarcodesRequest.LocateMode.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600550);
  v73 = *(_QWORD *)(v3 - 8);
  v74 = v3;
  MEMORY[0x1E0C80A78](v3);
  v72 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600558);
  v70 = *(_QWORD *)(v5 - 8);
  v71 = v5;
  MEMORY[0x1E0C80A78](v5);
  v69 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600560);
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  MEMORY[0x1E0C80A78](v7);
  v66 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600568);
  v64 = *(_QWORD *)(v9 - 8);
  v65 = v9;
  MEMORY[0x1E0C80A78](v9);
  v63 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600570);
  v61 = *(_QWORD *)(v11 - 8);
  v62 = v11;
  MEMORY[0x1E0C80A78](v11);
  v60 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600578);
  v58 = *(_QWORD *)(v13 - 8);
  v59 = v13;
  MEMORY[0x1E0C80A78](v13);
  v57 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600580);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v54 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600588);
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v51 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600590);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v48 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600598);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v45 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005A0);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v42 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005A8);
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v39 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005B0);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v36 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005B8);
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v33 = (char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005C0);
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v30 = (char *)&v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005C8);
  v28 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005D0);
  MEMORY[0x1E0C80A78](v24);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005D8);
  v75 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v26 = (char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1354DC4();
  v76 = v26;
  sub_1A15A9468();
  __asm { BR              X9 }
}

uint64_t sub_1A135394C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 65) = 0;
  sub_1A1355248();
  v5 = *(_QWORD *)(v3 - 104);
  v4 = *(_QWORD *)(v3 - 96);
  sub_1A15A92AC();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 112) + 8))(v5, v4);
}

uint64_t DetectBarcodesRequest.LocateMode.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectBarcodesRequest.LocateMode.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;

  v87 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005E0);
  v69 = *(_QWORD *)(v3 - 8);
  v70 = v3;
  MEMORY[0x1E0C80A78](v3);
  v83 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005E8);
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v82 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005F0);
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v81 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6005F8);
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v80 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600600);
  v61 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v79 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600608);
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v78 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600610);
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v77 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600618);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v76 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600620);
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v86 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600628);
  v49 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v74 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600630);
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v85 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600638);
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v75 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600640);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v84 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600648);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v73 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600650);
  v41 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v72 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600658);
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v71 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600660);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600668);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a1[3];
  v88 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v28);
  sub_1A1354DC4();
  v29 = v89;
  sub_1A15A945C();
  if (!v29)
  {
    v37[2] = v23;
    v37[0] = v21;
    v37[1] = v20;
    v89 = v25;
    v38 = v24;
    v30 = v27;
    v31 = sub_1A15A9294();
    if (*(_QWORD *)(v31 + 16) == 1)
      __asm { BR              X9 }
    v32 = sub_1A15A90F0();
    swift_allocError();
    v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v34 = &type metadata for DetectBarcodesRequest.LocateMode;
    v35 = v38;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x1E0DEC450], v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v30, v35);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
}

void sub_1A1354CB4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E45302C0;
}

uint64_t sub_1A1354CC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DetectBarcodesRequest.LocateMode.init(from:)(a1, a2);
}

void sub_1A1354CD8(_QWORD *a1)
{
  DetectBarcodesRequest.LocateMode.encode(to:)(a1);
}

void DetectBarcodesRequest.locateMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

_BYTE *DetectBarcodesRequest.locateMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = *result;
  return result;
}

uint64_t (*DetectBarcodesRequest.locateMode.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

void *DetectBarcodesRequest.availableLocateModes.getter()
{
  return &unk_1E4530388;
}

uint64_t DetectBarcodesRequest.stopAtFirstPyramidWith2DCode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t DetectBarcodesRequest.stopAtFirstPyramidWith2DCode.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*DetectBarcodesRequest.stopAtFirstPyramidWith2DCode.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectBarcodesRequest.useSegmentationPregating.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t DetectBarcodesRequest.useSegmentationPregating.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 50) = result;
  return result;
}

uint64_t (*DetectBarcodesRequest.useSegmentationPregating.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectBarcodesRequest.useMLDetector.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 51);
}

uint64_t DetectBarcodesRequest.useMLDetector.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 51) = result;
  return result;
}

uint64_t (*DetectBarcodesRequest.useMLDetector.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

unint64_t sub_1A1354D80()
{
  unint64_t result;

  result = qword_1EE600548;
  if (!qword_1EE600548)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA544, &type metadata for DetectBarcodesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600548);
  }
  return result;
}

unint64_t sub_1A1354DC4()
{
  unint64_t result;

  result = qword_1EE633618;
  if (!qword_1EE633618)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB5B4, &type metadata for DetectBarcodesRequest.LocateMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633618);
  }
  return result;
}

unint64_t sub_1A1354E08()
{
  unint64_t result;

  result = qword_1EE633620;
  if (!qword_1EE633620)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB564, &type metadata for DetectBarcodesRequest.LocateMode.RegularIntervalVerticalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633620);
  }
  return result;
}

unint64_t sub_1A1354E4C()
{
  unint64_t result;

  result = qword_1EE633628;
  if (!qword_1EE633628)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB514, &type metadata for DetectBarcodesRequest.LocateMode.RegularIntervalHorizontalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633628);
  }
  return result;
}

unint64_t sub_1A1354E90()
{
  unint64_t result;

  result = qword_1EE633630;
  if (!qword_1EE633630)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB4C4, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalAndCoverageAndDiagonalsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633630);
  }
  return result;
}

unint64_t sub_1A1354ED4()
{
  unint64_t result;

  result = qword_1EE633638;
  if (!qword_1EE633638)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB474, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalAndCoverageAndDiagonalsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633638);
  }
  return result;
}

unint64_t sub_1A1354F18()
{
  unint64_t result;

  result = qword_1EE633640;
  if (!qword_1EE633640)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB424, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionAndCoverageAndDiagonalsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633640);
  }
  return result;
}

unint64_t sub_1A1354F5C()
{
  unint64_t result;

  result = qword_1EE633648;
  if (!qword_1EE633648)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB3D4, &type metadata for DetectBarcodesRequest.LocateMode.CenterFiveEachDirectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633648);
  }
  return result;
}

unint64_t sub_1A1354FA0()
{
  unint64_t result;

  result = qword_1EE633650;
  if (!qword_1EE633650)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB384, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633650);
  }
  return result;
}

unint64_t sub_1A1354FE4()
{
  unint64_t result;

  result = qword_1EE633658;
  if (!qword_1EE633658)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB334, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneEachDirectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633658);
  }
  return result;
}

unint64_t sub_1A1355028()
{
  unint64_t result;

  result = qword_1EE633660;
  if (!qword_1EE633660)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB2E4, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCrossedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633660);
  }
  return result;
}

unint64_t sub_1A135506C()
{
  unint64_t result;

  result = qword_1EE633668;
  if (!qword_1EE633668)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB294, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633668);
  }
  return result;
}

unint64_t sub_1A13550B0()
{
  unint64_t result;

  result = qword_1EE633670;
  if (!qword_1EE633670)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB244, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneHorizontalThickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633670);
  }
  return result;
}

unint64_t sub_1A13550F4()
{
  unint64_t result;

  result = qword_1EE633678;
  if (!qword_1EE633678)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB1F4, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneHorizontalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633678);
  }
  return result;
}

unint64_t sub_1A1355138()
{
  unint64_t result;

  result = qword_1EE633680;
  if (!qword_1EE633680)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB1A4, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCrossedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633680);
  }
  return result;
}

unint64_t sub_1A135517C()
{
  unint64_t result;

  result = qword_1EE633688;
  if (!qword_1EE633688)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB154, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633688);
  }
  return result;
}

unint64_t sub_1A13551C0()
{
  unint64_t result;

  result = qword_1EE633690;
  if (!qword_1EE633690)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB104, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneVerticalThickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633690);
  }
  return result;
}

unint64_t sub_1A1355204()
{
  unint64_t result;

  result = qword_1EE633698;
  if (!qword_1EE633698)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB0B4, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneVerticalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE633698);
  }
  return result;
}

unint64_t sub_1A1355248()
{
  unint64_t result;

  result = qword_1EE6336A0[0];
  if (!qword_1EE6336A0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB064, &type metadata for DetectBarcodesRequest.LocateMode.UnspecifiedCodingKeys);
    atomic_store(result, qword_1EE6336A0);
  }
  return result;
}

int *sub_1A135528C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6006E8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(7, 0, 23);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(7, 0, 23);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(7, 0, 23);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for DetectBarcodesRequest.Revision, v0 + 32);
  qword_1EE6437B0 = v0;
  return result;
}

uint64_t DetectBarcodesRequest.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[7];
  swift_bridgeObjectRetain();
  sub_1A1355870((uint64_t)a1, v3);
  swift_bridgeObjectRelease();
  sub_1A15A93FC();
  sub_1A15A93F0();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  sub_1A15A93FC();
  sub_1A15A93FC();
  sub_1A15A93FC();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A1355450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v6 = 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      sub_1A1316ED0();
      v5 = v2 - 1;
      do
      {
        ++v3;
        ++v4;
        v6 = sub_1A15A8B80();
        v8 = v5-- != 0;
      }
      while ((v6 & 1) != 0 && v8);
    }
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t DetectBarcodesRequest.hashValue.getter()
{
  uint64_t *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9[4];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v1 = *((_BYTE *)v0 + 8);
  v2 = *((_BYTE *)v0 + 48);
  v3 = *((_BYTE *)v0 + 49);
  v4 = *((_BYTE *)v0 + 50);
  v5 = *((_BYTE *)v0 + 51);
  v6 = v0[7];
  v10 = *v0;
  v11 = v1;
  v7 = *((_OWORD *)v0 + 2);
  v12 = *((_OWORD *)v0 + 1);
  v13 = v7;
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  sub_1A15A93E4();
  DetectBarcodesRequest.hash(into:)(v9);
  return sub_1A15A9420();
}

__n128 sub_1A1355580@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1A135558C(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t (*sub_1A1355598())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A13555A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A130C144();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A13555D0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A1354D80();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A1355610(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A1354D80();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1355650(_BYTE *a1@<X8>)
{
  *a1 = 32;
}

uint64_t sub_1A135565C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1354D80();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1355684()
{
  uint64_t *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9[4];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v1 = *((_BYTE *)v0 + 8);
  v2 = *((_BYTE *)v0 + 48);
  v3 = *((_BYTE *)v0 + 49);
  v4 = *((_BYTE *)v0 + 50);
  v5 = *((_BYTE *)v0 + 51);
  v6 = v0[7];
  v10 = *v0;
  v11 = v1;
  v7 = *((_OWORD *)v0 + 2);
  v12 = *((_OWORD *)v0 + 1);
  v13 = v7;
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  sub_1A15A93E4();
  DetectBarcodesRequest.hash(into:)(v9);
  return sub_1A15A9420();
}

uint64_t sub_1A1355708()
{
  uint64_t *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9[4];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v1 = *((_BYTE *)v0 + 8);
  v2 = *((_BYTE *)v0 + 48);
  v3 = *((_BYTE *)v0 + 49);
  v4 = *((_BYTE *)v0 + 50);
  v5 = *((_BYTE *)v0 + 51);
  v6 = v0[7];
  v10 = *v0;
  v11 = v1;
  v7 = *((_OWORD *)v0 + 2);
  v12 = *((_OWORD *)v0 + 1);
  v13 = v7;
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  sub_1A15A93E4();
  DetectBarcodesRequest.hash(into:)(v9);
  return sub_1A15A9420();
}

uint64_t sub_1A1355788()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A1355790(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*sub_1A13557B8())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A13557C8()
{
  if (qword_1EE633600 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A1355808()
{
  return sub_1A15A8BB0();
}

uint64_t sub_1A135582C(uint64_t a1, uint64_t a2)
{
  sub_1A12B3754();
  return sub_1A1377AB4(a1, a2);
}

uint64_t sub_1A1355864()
{
  return 4;
}

uint64_t sub_1A1355870(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1A15A93F0();
  if (v3)
  {
    v5 = a2 + 32;
    sub_1A1357374();
    do
    {
      ++v5;
      result = sub_1A15A8B44();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t _s6Vision21DetectBarcodesRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  CGRect v23;
  CGRect v24;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v5 = *(double *)(a1 + 32);
  v6 = *(double *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a1 + 48);
  v8 = *(unsigned __int8 *)(a1 + 49);
  v9 = *(unsigned __int8 *)(a1 + 50);
  v10 = *(unsigned __int8 *)(a1 + 51);
  v11 = *(unsigned __int8 *)(a2 + 8);
  v12 = *(double *)(a2 + 16);
  v13 = *(double *)(a2 + 24);
  v14 = *(double *)(a2 + 32);
  v15 = *(double *)(a2 + 40);
  v16 = *(unsigned __int8 *)(a2 + 48);
  v17 = *(unsigned __int8 *)(a2 + 49);
  v18 = *(unsigned __int8 *)(a2 + 50);
  v19 = *(unsigned __int8 *)(a2 + 51);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a1 + 56);
  if ((sub_1A1355450(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  if (((v2 ^ v11) & 1) != 0)
    return 0;
  v24.origin.x = v3;
  v24.origin.y = v4;
  v24.size.width = v5;
  v24.size.height = v6;
  v23.origin.x = v12;
  v23.origin.y = v13;
  v23.size.width = v14;
  v23.size.height = v15;
  if (!static NormalizedRect.== infix(_:_:)(&v24, &v23)
    || v7 != v16
    || ((v8 ^ v17) & 1) != 0
    || ((v9 ^ v18) & 1) != 0
    || ((v10 ^ v19) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return sub_1A12903B0(v22, v21);
  }
}

unint64_t sub_1A1355A34()
{
  unint64_t result;

  result = qword_1EE600670;
  if (!qword_1EE600670)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectBarcodesRequest.Revision, &type metadata for DetectBarcodesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600670);
  }
  return result;
}

unint64_t sub_1A1355A7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE600678;
  if (!qword_1EE600678)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE600680);
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE600678);
  }
  return result;
}

unint64_t sub_1A1355ACC()
{
  unint64_t result;

  result = qword_1EE600688[0];
  if (!qword_1EE600688[0])
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectBarcodesRequest.LocateMode, &type metadata for DetectBarcodesRequest.LocateMode);
    atomic_store(result, qword_1EE600688);
  }
  return result;
}

unint64_t sub_1A1355B10(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B3754();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A1355B34(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B7128();
  result = sub_1A1355B60();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A1355B60()
{
  unint64_t result;

  result = qword_1EE6006C0;
  if (!qword_1EE6006C0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectBarcodesRequest, &type metadata for DetectBarcodesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE6006C0);
  }
  return result;
}

unint64_t sub_1A1355BA8()
{
  unint64_t result;

  result = qword_1EE6006C8;
  if (!qword_1EE6006C8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectBarcodesRequest, &type metadata for DetectBarcodesRequest);
    atomic_store(result, (unint64_t *)&qword_1EE6006C8);
  }
  return result;
}

unint64_t sub_1A1355BF0()
{
  unint64_t result;

  result = qword_1EE6006D0;
  if (!qword_1EE6006D0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectBarcodesRequest.Revision, &type metadata for DetectBarcodesRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6006D0);
  }
  return result;
}

uint64_t sub_1A1355C34()
{
  return sub_1A12857D8(&qword_1EE6006D8, (uint64_t (*)(uint64_t))type metadata accessor for BarcodeObservation, (uint64_t)&unk_1A15CB030);
}

unint64_t sub_1A1355C60(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1354D80();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for DetectBarcodesRequest()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DetectBarcodesRequest(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectBarcodesRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DetectBarcodesRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectBarcodesRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetectBarcodesRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest()
{
  return &type metadata for DetectBarcodesRequest;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.Revision()
{
  return &type metadata for DetectBarcodesRequest.Revision;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode()
{
  return &type metadata for DetectBarcodesRequest.LocateMode;
}

uint64_t _s6Vision21DetectBarcodesRequestV10LocateModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1A1355F4C + 4 * byte_1A15DA27B[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1A1355F80 + 4 * byte_1A15DA276[v4]))();
}

uint64_t sub_1A1355F80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1355F88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1355F90);
  return result;
}

uint64_t sub_1A1355F9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1355FA4);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1A1355FA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1355FB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.UnspecifiedCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.UnspecifiedCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterOneVerticalCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterOneVerticalCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterOneVerticalThickCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterOneVerticalThickCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCrossedCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCrossedCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterOneHorizontalCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterOneHorizontalCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterOneHorizontalThickCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterOneHorizontalThickCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCrossedCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCrossedCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterOneEachDirectionCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterOneEachDirectionCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterFiveEachDirectionCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterFiveEachDirectionCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionAndCoverageAndDiagonalsCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionAndCoverageAndDiagonalsCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterThreeVerticalAndCoverageAndDiagonalsCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalAndCoverageAndDiagonalsCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalAndCoverageAndDiagonalsCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalAndCoverageAndDiagonalsCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.RegularIntervalHorizontalCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.RegularIntervalHorizontalCodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.LocateMode.RegularIntervalVerticalCodingKeys()
{
  return &type metadata for DetectBarcodesRequest.LocateMode.RegularIntervalVerticalCodingKeys;
}

uint64_t _s6Vision21DetectBarcodesRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A135611C + 4 * byte_1A15DA280[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A135613C + 4 * byte_1A15DA285[v4]))();
}

_BYTE *sub_1A135611C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A135613C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1356144(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A135614C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1356154(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A135615C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.Revision.CodingKeys()
{
  return &type metadata for DetectBarcodesRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectBarcodesRequest.Revision.Revision4CodingKeys()
{
  return &type metadata for DetectBarcodesRequest.Revision.Revision4CodingKeys;
}

unint64_t sub_1A135618C()
{
  unint64_t result;

  result = qword_1EE634130[0];
  if (!qword_1EE634130[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAA34, &type metadata for DetectBarcodesRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE634130);
  }
  return result;
}

unint64_t sub_1A13561D4()
{
  unint64_t result;

  result = qword_1EE635440[0];
  if (!qword_1EE635440[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DB03C, &type metadata for DetectBarcodesRequest.LocateMode.CodingKeys);
    atomic_store(result, qword_1EE635440);
  }
  return result;
}

unint64_t sub_1A135621C()
{
  unint64_t result;

  result = qword_1EE635550;
  if (!qword_1EE635550)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAF5C, &type metadata for DetectBarcodesRequest.LocateMode.UnspecifiedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635550);
  }
  return result;
}

unint64_t sub_1A1356264()
{
  unint64_t result;

  result = qword_1EE635558[0];
  if (!qword_1EE635558[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAF84, &type metadata for DetectBarcodesRequest.LocateMode.UnspecifiedCodingKeys);
    atomic_store(result, qword_1EE635558);
  }
  return result;
}

unint64_t sub_1A13562AC()
{
  unint64_t result;

  result = qword_1EE6355E0;
  if (!qword_1EE6355E0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAF0C, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneVerticalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6355E0);
  }
  return result;
}

unint64_t sub_1A13562F4()
{
  unint64_t result;

  result = qword_1EE6355E8[0];
  if (!qword_1EE6355E8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAF34, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneVerticalCodingKeys);
    atomic_store(result, qword_1EE6355E8);
  }
  return result;
}

unint64_t sub_1A135633C()
{
  unint64_t result;

  result = qword_1EE635670;
  if (!qword_1EE635670)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAEBC, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneVerticalThickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635670);
  }
  return result;
}

unint64_t sub_1A1356384()
{
  unint64_t result;

  result = qword_1EE635678;
  if (!qword_1EE635678)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAEE4, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneVerticalThickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635678);
  }
  return result;
}

unint64_t sub_1A13563CC()
{
  unint64_t result;

  result = qword_1EE635700;
  if (!qword_1EE635700)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAE6C, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635700);
  }
  return result;
}

unint64_t sub_1A1356414()
{
  unint64_t result;

  result = qword_1EE635708[0];
  if (!qword_1EE635708[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAE94, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCodingKeys);
    atomic_store(result, qword_1EE635708);
  }
  return result;
}

unint64_t sub_1A135645C()
{
  unint64_t result;

  result = qword_1EE635790;
  if (!qword_1EE635790)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAE1C, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCrossedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635790);
  }
  return result;
}

unint64_t sub_1A13564A4()
{
  unint64_t result;

  result = qword_1EE635798[0];
  if (!qword_1EE635798[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAE44, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalCrossedCodingKeys);
    atomic_store(result, qword_1EE635798);
  }
  return result;
}

unint64_t sub_1A13564EC()
{
  unint64_t result;

  result = qword_1EE635820;
  if (!qword_1EE635820)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DADCC, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneHorizontalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635820);
  }
  return result;
}

unint64_t sub_1A1356534()
{
  unint64_t result;

  result = qword_1EE635828[0];
  if (!qword_1EE635828[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DADF4, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneHorizontalCodingKeys);
    atomic_store(result, qword_1EE635828);
  }
  return result;
}

unint64_t sub_1A135657C()
{
  unint64_t result;

  result = qword_1EE6358B0;
  if (!qword_1EE6358B0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAD7C, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneHorizontalThickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6358B0);
  }
  return result;
}

unint64_t sub_1A13565C4()
{
  unint64_t result;

  result = qword_1EE6358B8[0];
  if (!qword_1EE6358B8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DADA4, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneHorizontalThickCodingKeys);
    atomic_store(result, qword_1EE6358B8);
  }
  return result;
}

unint64_t sub_1A135660C()
{
  unint64_t result;

  result = qword_1EE635940;
  if (!qword_1EE635940)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAD2C, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635940);
  }
  return result;
}

unint64_t sub_1A1356654()
{
  unint64_t result;

  result = qword_1EE635948[0];
  if (!qword_1EE635948[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAD54, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCodingKeys);
    atomic_store(result, qword_1EE635948);
  }
  return result;
}

unint64_t sub_1A135669C()
{
  unint64_t result;

  result = qword_1EE6359D0;
  if (!qword_1EE6359D0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DACDC, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCrossedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6359D0);
  }
  return result;
}

unint64_t sub_1A13566E4()
{
  unint64_t result;

  result = qword_1EE6359D8[0];
  if (!qword_1EE6359D8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAD04, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalCrossedCodingKeys);
    atomic_store(result, qword_1EE6359D8);
  }
  return result;
}

unint64_t sub_1A135672C()
{
  unint64_t result;

  result = qword_1EE635A60;
  if (!qword_1EE635A60)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAC8C, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneEachDirectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635A60);
  }
  return result;
}

unint64_t sub_1A1356774()
{
  unint64_t result;

  result = qword_1EE635A68[0];
  if (!qword_1EE635A68[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DACB4, &type metadata for DetectBarcodesRequest.LocateMode.CenterOneEachDirectionCodingKeys);
    atomic_store(result, qword_1EE635A68);
  }
  return result;
}

unint64_t sub_1A13567BC()
{
  unint64_t result;

  result = qword_1EE635AF0;
  if (!qword_1EE635AF0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAC3C, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635AF0);
  }
  return result;
}

unint64_t sub_1A1356804()
{
  unint64_t result;

  result = qword_1EE635AF8[0];
  if (!qword_1EE635AF8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAC64, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionCodingKeys);
    atomic_store(result, qword_1EE635AF8);
  }
  return result;
}

unint64_t sub_1A135684C()
{
  unint64_t result;

  result = qword_1EE635B80;
  if (!qword_1EE635B80)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DABEC, &type metadata for DetectBarcodesRequest.LocateMode.CenterFiveEachDirectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635B80);
  }
  return result;
}

unint64_t sub_1A1356894()
{
  unint64_t result;

  result = qword_1EE635B88[0];
  if (!qword_1EE635B88[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAC14, &type metadata for DetectBarcodesRequest.LocateMode.CenterFiveEachDirectionCodingKeys);
    atomic_store(result, qword_1EE635B88);
  }
  return result;
}

unint64_t sub_1A13568DC()
{
  unint64_t result;

  result = qword_1EE635C10;
  if (!qword_1EE635C10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAB9C, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionAndCoverageAndDiagonalsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635C10);
  }
  return result;
}

unint64_t sub_1A1356924()
{
  unint64_t result;

  result = qword_1EE635C18[0];
  if (!qword_1EE635C18[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DABC4, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeEachDirectionAndCoverageAndDiagonalsCodingKeys);
    atomic_store(result, qword_1EE635C18);
  }
  return result;
}

unint64_t sub_1A135696C()
{
  unint64_t result;

  result = qword_1EE635CA0;
  if (!qword_1EE635CA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAB4C, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalAndCoverageAndDiagonalsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635CA0);
  }
  return result;
}

unint64_t sub_1A13569B4()
{
  unint64_t result;

  result = qword_1EE635CA8[0];
  if (!qword_1EE635CA8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAB74, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeVerticalAndCoverageAndDiagonalsCodingKeys);
    atomic_store(result, qword_1EE635CA8);
  }
  return result;
}

unint64_t sub_1A13569FC()
{
  unint64_t result;

  result = qword_1EE635D30;
  if (!qword_1EE635D30)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAAFC, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalAndCoverageAndDiagonalsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635D30);
  }
  return result;
}

unint64_t sub_1A1356A44()
{
  unint64_t result;

  result = qword_1EE635D38[0];
  if (!qword_1EE635D38[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAB24, &type metadata for DetectBarcodesRequest.LocateMode.CenterThreeHorizontalAndCoverageAndDiagonalsCodingKeys);
    atomic_store(result, qword_1EE635D38);
  }
  return result;
}

unint64_t sub_1A1356A8C()
{
  unint64_t result;

  result = qword_1EE635DC0;
  if (!qword_1EE635DC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAAAC, &type metadata for DetectBarcodesRequest.LocateMode.RegularIntervalHorizontalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635DC0);
  }
  return result;
}

unint64_t sub_1A1356AD4()
{
  unint64_t result;

  result = qword_1EE635DC8[0];
  if (!qword_1EE635DC8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAAD4, &type metadata for DetectBarcodesRequest.LocateMode.RegularIntervalHorizontalCodingKeys);
    atomic_store(result, qword_1EE635DC8);
  }
  return result;
}

unint64_t sub_1A1356B1C()
{
  unint64_t result;

  result = qword_1EE635E50;
  if (!qword_1EE635E50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAA5C, &type metadata for DetectBarcodesRequest.LocateMode.RegularIntervalVerticalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635E50);
  }
  return result;
}

unint64_t sub_1A1356B64()
{
  unint64_t result;

  result = qword_1EE635E58[0];
  if (!qword_1EE635E58[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAA84, &type metadata for DetectBarcodesRequest.LocateMode.RegularIntervalVerticalCodingKeys);
    atomic_store(result, qword_1EE635E58);
  }
  return result;
}

unint64_t sub_1A1356BAC()
{
  unint64_t result;

  result = qword_1EE635EE0;
  if (!qword_1EE635EE0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAFAC, &type metadata for DetectBarcodesRequest.LocateMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635EE0);
  }
  return result;
}

unint64_t sub_1A1356BF4()
{
  unint64_t result;

  result = qword_1EE635EE8[0];
  if (!qword_1EE635EE8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DAFD4, &type metadata for DetectBarcodesRequest.LocateMode.CodingKeys);
    atomic_store(result, qword_1EE635EE8);
  }
  return result;
}

unint64_t sub_1A1356C3C()
{
  unint64_t result;

  result = qword_1EE635F70;
  if (!qword_1EE635F70)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA954, &type metadata for DetectBarcodesRequest.Revision.Revision4CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635F70);
  }
  return result;
}

unint64_t sub_1A1356C84()
{
  unint64_t result;

  result = qword_1EE635F78;
  if (!qword_1EE635F78)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA97C, &type metadata for DetectBarcodesRequest.Revision.Revision4CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE635F78);
  }
  return result;
}

unint64_t sub_1A1356CCC()
{
  unint64_t result;

  result = qword_1EE636000;
  if (!qword_1EE636000)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA9A4, &type metadata for DetectBarcodesRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE636000);
  }
  return result;
}

unint64_t sub_1A1356D14()
{
  unint64_t result;

  result = qword_1EE636008[0];
  if (!qword_1EE636008[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DA9CC, &type metadata for DetectBarcodesRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE636008);
  }
  return result;
}

uint64_t sub_1A1356D58(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6669636570736E75 && a2 == 0xEB00000000646569;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A15FE230 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001A15FE250 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A15FE270 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001A15FE290 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A15FE2B0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001A15FE2D0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001A15FE2F0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001A15FE310 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001A15FE330 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001A15FE350 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001A15FE370 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000002FLL && a2 == 0x80000001A15FE390 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD00000000000002ALL && a2 == 0x80000001A15FE3C0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD00000000000002CLL && a2 == 0x80000001A15FE3F0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001A15FE420 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001A15FE440)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

unint64_t sub_1A1357374()
{
  unint64_t result;

  result = qword_1EE6006E0;
  if (!qword_1EE6006E0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for BarcodeSymbology, &type metadata for BarcodeSymbology);
    atomic_store(result, (unint64_t *)&qword_1EE6006E0);
  }
  return result;
}

void sub_1A13573BC()
{
  sub_1A15A91A4();
  __break(1u);
}

uint64_t static TrackTranslationalImageRegistrationRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static TrackTranslationalImageRegistrationRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t TrackTranslationalImageRegistrationRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A1357448()
{
  sub_1A1357624();
  return sub_1A15A9474();
}

uint64_t sub_1A1357470()
{
  sub_1A1357624();
  return sub_1A15A9480();
}

uint64_t sub_1A1357498()
{
  sub_1A1357668();
  return sub_1A15A9474();
}

uint64_t sub_1A13574C0()
{
  sub_1A1357668();
  return sub_1A15A9480();
}

uint64_t TrackTranslationalImageRegistrationRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6006F0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6006F8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1357624();
  sub_1A15A9468();
  sub_1A1357668();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A1357624()
{
  unint64_t result;

  result = qword_1EE6360A8;
  if (!qword_1EE6360A8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DBB8C, &type metadata for TrackTranslationalImageRegistrationRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6360A8);
  }
  return result;
}

unint64_t sub_1A1357668()
{
  unint64_t result;

  result = qword_1EE6360B0[0];
  if (!qword_1EE6360B0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DBB3C, &type metadata for TrackTranslationalImageRegistrationRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE6360B0);
  }
  return result;
}

uint64_t TrackTranslationalImageRegistrationRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t TrackTranslationalImageRegistrationRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600700);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600708);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1357624();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for TrackTranslationalImageRegistrationRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A1357668();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A1357948(_QWORD *a1)
{
  return TrackTranslationalImageRegistrationRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A135795C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6006F0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6006F8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1357624();
  sub_1A15A9468();
  sub_1A1357668();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t TrackTranslationalImageRegistrationRequest.__allocating_init(_:frameAnalysisSpacing:)(unsigned __int8 *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  char v9;
  uint64_t v10;

  v9 = a5 & 1;
  v10 = swift_allocObject();
  TrackTranslationalImageRegistrationRequest.init(_:frameAnalysisSpacing:)(a1, a2, a3, a4, v9);
  return v10;
}

uint64_t *TrackTranslationalImageRegistrationRequest.init(_:frameAnalysisSpacing:)(unsigned __int8 *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = v5;
  v11 = *v5;
  v12 = *a1;
  static NormalizedRect.fullImage.getter(&v24);
  v13 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  v23 = v24;
  v14 = v25;
  v15 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600718);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 56) = 0;
  *(__n128 *)(v16 + 16) = v23;
  *(_QWORD *)(v16 + 32) = v14;
  *(_QWORD *)(v16 + 40) = v15;
  *(_QWORD *)(v16 + 48) = v13;
  v6[5] = v16;
  type metadata accessor for ImageRegistrationState();
  v17 = sub_1A12C9A6C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600720);
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 16) = v17;
  v6[6] = v18;
  sub_1A15A88BC();
  if (v12 == 1)
  {
    v19 = sub_1A1358654(&qword_1EE600728, (uint64_t)&unk_1A15DB914);
    sub_1A1377CDC(v11, v19, v20);
  }
  if ((a5 & 1) != 0)
  {
    a2 = *MEMORY[0x1E0CA2E68];
    LODWORD(a3) = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
    LODWORD(v21) = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
    a4 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  }
  else
  {
    v21 = HIDWORD(a3);
  }
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  *((_DWORD *)v6 + 7) = v21;
  v6[4] = a4;
  return v6;
}

void TrackTranslationalImageRegistrationRequest.regionOfInterest.getter(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(v1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 56));
  v4 = *(_OWORD *)(v3 + 32);
  *a1 = *(_OWORD *)(v3 + 16);
  a1[1] = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 56));
}

void TrackTranslationalImageRegistrationRequest.regionOfInterest.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v5 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(v1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 56));
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 56));
}

void (*TrackTranslationalImageRegistrationRequest.regionOfInterest.modify(_QWORD *a1))(__int128 **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *(_QWORD *)(v1 + 40);
  v3[4] = v4;
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 56));
  v5 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)v3 = *(_OWORD *)(v4 + 16);
  *((_OWORD *)v3 + 1) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 56));
  return sub_1A128BD18;
}

uint64_t TrackTranslationalImageRegistrationRequest.minimumLatencyFrameCount.getter()
{
  return 2;
}

uint64_t TrackTranslationalImageRegistrationRequest.frameAnalysisSpacing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1A1357D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for TrackTranslationalImageRegistrationRequest();
  v1 = sub_1A1358654(&qword_1EE600728, (uint64_t)&unk_1A15DB914);
  result = sub_1A1378184(v0, v1);
  qword_1EE636098 = result;
  return result;
}

uint64_t static TrackTranslationalImageRegistrationRequest.supportedRevisions.getter()
{
  if (qword_1EE636090 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void TrackTranslationalImageRegistrationRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = -16;
}

uint64_t type metadata accessor for TrackTranslationalImageRegistrationRequest()
{
  uint64_t result;

  result = qword_1EE636840;
  if (!qword_1EE636840)
    return swift_getSingletonMetadata();
  return result;
}

int *sub_1A1357E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6007C0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(7, 0, 11);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(7, 0, 11);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(7, 0, 11);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for TrackTranslationalImageRegistrationRequest.Revision, v0 + 32);
  qword_1EE6437B8 = v0;
  return result;
}

uint64_t TrackTranslationalImageRegistrationRequest.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC6Vision42TrackTranslationalImageRegistrationRequest_uuid;
  v2 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t TrackTranslationalImageRegistrationRequest.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC6Vision42TrackTranslationalImageRegistrationRequest_uuid;
  v2 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t TrackTranslationalImageRegistrationRequest.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A1358654(&qword_1EE600730, (uint64_t)&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

void (*sub_1A135800C(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TrackTranslationalImageRegistrationRequest.regionOfInterest.modify(v2);
  return sub_1A128C384;
}

uint64_t sub_1A1358054()
{
  return 2;
}

uint64_t sub_1A1358060@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = sub_1A1358654(&qword_1EE600728, (uint64_t)&unk_1A15DB914);
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A13580B0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1A1358654(&qword_1EE600728, (uint64_t)&unk_1A15DB914);
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1358100(_BYTE *a1@<X8>)
{
  *a1 = -16;
}

uint64_t sub_1A135810C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A1358654(&qword_1EE600728, (uint64_t)&unk_1A15DB914);
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1358144(uint64_t a1, uint64_t a2)
{
  sub_1A1358654(&qword_1EE600798, (uint64_t)&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest);
  return StatefulRequest.hash(into:)(a1, a2);
}

uint64_t sub_1A135818C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A1358654(&qword_1EE600798, (uint64_t)&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest);
  return static StatefulRequest.== infix(_:_:)(a1, a2, v2);
}

uint64_t sub_1A13581D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC6Vision42TrackTranslationalImageRegistrationRequest_uuid;
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A135821C()
{
  if (qword_1EE6360A0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A135825C()
{
  return 4;
}

uint64_t sub_1A135826C(uint64_t a1)
{
  sub_1A1358654((unint64_t *)&unk_1EE600788, (uint64_t)&unk_1A15DB8F8);
  return sub_1A128EEB4(a1) & 1;
}

size_t _s6Vision42TrackTranslationalImageRegistrationRequestC28supportedComputeStageDevicesSDyAA0hI0OSay6CoreML15MLComputeDeviceOGGvg_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t inited;
  id v5;
  unint64_t v6;
  uint64_t v7;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = sub_1A15A8A84();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FF950);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A15C3FE0;
  *(_BYTE *)(inited + 32) = 0;
  v5 = objc_msgSend((id)objc_opt_self(), sel_allCPUComputeDevices);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF920);
  v6 = sub_1A15A8C40();

  if (!(v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    *(_QWORD *)(inited + 40) = v10;
    return sub_1A12F6B54(inited);
  }
  swift_bridgeObjectRetain();
  v7 = sub_1A15A91B0();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_13;
LABEL_3:
  v14 = MEMORY[0x1E0DEE9D8];
  result = sub_1A12F730C(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v13 = inited;
    v9 = 0;
    v10 = v14;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        MEMORY[0x1A1B09470](v9, v6);
      else
        swift_unknownObjectRetain();
      sub_1A15A8A78();
      v14 = v10;
      v12 = *(_QWORD *)(v10 + 16);
      v11 = *(_QWORD *)(v10 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1A12F730C(v11 > 1, v12 + 1, 1);
        v10 = v14;
      }
      ++v9;
      *(_QWORD *)(v10 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v10+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v12, v3, v0);
    }
    while (v7 != v9);
    swift_bridgeObjectRelease();
    inited = v13;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

unint64_t sub_1A13584E4()
{
  unint64_t result;

  result = qword_1EE600738[0];
  if (!qword_1EE600738[0])
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest.Revision, &type metadata for TrackTranslationalImageRegistrationRequest.Revision);
    atomic_store(result, qword_1EE600738);
  }
  return result;
}

uint64_t sub_1A1358528(uint64_t a1)
{
  uint64_t result;

  result = sub_1A1358654((unint64_t *)&unk_1EE600770, (uint64_t)&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A135855C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A1358608(a1, a2, a3, &qword_1EE5FDB00, (uint64_t)&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest, &qword_1EE600730, (uint64_t)&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest);
}

uint64_t sub_1A1358580()
{
  return sub_1A1358654(&qword_1EE600780, (uint64_t)&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest);
}

uint64_t sub_1A13585A4(uint64_t a1)
{
  uint64_t result;

  result = sub_1A1358654((unint64_t *)&unk_1EE600788, (uint64_t)&unk_1A15DB8F8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **sub_1A13585D8()
{
  return &off_1E4530ED8;
}

uint64_t sub_1A13585E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A1358608(a1, a2, a3, &qword_1EE600728, (uint64_t)&unk_1A15DB914, &qword_1EE600798, (uint64_t)&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest);
}

uint64_t sub_1A1358608(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A1358654(a4, a5);
  result = sub_1A1358654(a6, a7);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A1358654(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TrackTranslationalImageRegistrationRequest();
    result = MEMORY[0x1A1B0B774](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A1358698()
{
  unint64_t result;

  result = qword_1EE6007A0;
  if (!qword_1EE6007A0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackTranslationalImageRegistrationRequest.Revision, &type metadata for TrackTranslationalImageRegistrationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6007A0);
  }
  return result;
}

uint64_t sub_1A13586DC()
{
  return type metadata accessor for TrackTranslationalImageRegistrationRequest();
}

uint64_t sub_1A13586E4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for TrackTranslationalImageRegistrationRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TrackTranslationalImageRegistrationRequest.__allocating_init(_:frameAnalysisSpacing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v5 + 120))(a1, a2, a3, a4, a5 & 1);
}

ValueMetadata *type metadata accessor for TrackTranslationalImageRegistrationRequest.Revision()
{
  return &type metadata for TrackTranslationalImageRegistrationRequest.Revision;
}

ValueMetadata *type metadata accessor for TrackTranslationalImageRegistrationRequest.Configuration()
{
  return &type metadata for TrackTranslationalImageRegistrationRequest.Configuration;
}

uint64_t _s6Vision42TrackTranslationalImageRegistrationRequestC8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A13587F4 + 4 * asc_1A15DB6D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1358814 + 4 * byte_1A15DB6D5[v4]))();
}

_BYTE *sub_1A13587F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1358814(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A135881C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1358824(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A135882C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1358834(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TrackTranslationalImageRegistrationRequest.Revision.CodingKeys()
{
  return &type metadata for TrackTranslationalImageRegistrationRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for TrackTranslationalImageRegistrationRequest.Revision.Revision1CodingKeys()
{
  return &type metadata for TrackTranslationalImageRegistrationRequest.Revision.Revision1CodingKeys;
}

unint64_t sub_1A1358864()
{
  unint64_t result;

  result = qword_1EE636A50[0];
  if (!qword_1EE636A50[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DBB14, &type metadata for TrackTranslationalImageRegistrationRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE636A50);
  }
  return result;
}

unint64_t sub_1A13588AC()
{
  unint64_t result;

  result = qword_1EE636B60;
  if (!qword_1EE636B60)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DBA34, &type metadata for TrackTranslationalImageRegistrationRequest.Revision.Revision1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE636B60);
  }
  return result;
}

unint64_t sub_1A13588F4()
{
  unint64_t result;

  result = qword_1EE636B68[0];
  if (!qword_1EE636B68[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DBA5C, &type metadata for TrackTranslationalImageRegistrationRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE636B68);
  }
  return result;
}

unint64_t sub_1A135893C()
{
  unint64_t result;

  result = qword_1EE636BF0;
  if (!qword_1EE636BF0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DBA84, &type metadata for TrackTranslationalImageRegistrationRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE636BF0);
  }
  return result;
}

unint64_t sub_1A1358984()
{
  unint64_t result;

  result = qword_1EE636BF8[0];
  if (!qword_1EE636BF8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DBAAC, &type metadata for TrackTranslationalImageRegistrationRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE636BF8);
  }
  return result;
}

uint64_t sub_1A13589D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  sub_1A1358A24(a1, a2);
  return v4;
}

uint64_t sub_1A1358A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  const __CFString *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[3];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  CGRect v137;

  v120 = sub_1A15A8F58();
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120);
  v121 = (char *)v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_1A15A8F4C();
  MEMORY[0x1E0C80A78](v117);
  v118 = (char *)v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A15A8AC0();
  MEMORY[0x1E0C80A78](v7);
  v116[1] = (char *)v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6001D0);
  MEMORY[0x1E0C80A78](v9);
  v129 = (char *)v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A15A8A84();
  v12 = *(_QWORD *)(v11 - 8);
  v130 = v11;
  v131 = v12;
  MEMORY[0x1E0C80A78](v11);
  v123 = (char *)v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9D8];
  v127 = a1;
  sub_1A1288044(a1, (uint64_t)&v133);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCDD8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6007D8);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    v16 = v132[0];
    v15 = v132[1];
    ObjectType = swift_getObjectType();
    v133 = v16;
    v18 = *(_QWORD *)(v15 + 16);
    v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    v20 = swift_retain();
    v21 = v19(v20, ObjectType, v18);
    v124 = a2;
    swift_release();
    v125 = v2;
    *(_QWORD *)(v2 + 24) = v21;
    v22 = sub_1A15A8BB0();
    v24 = v23;
    v126 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 40);
    v25 = v126(ObjectType, v15);
    v26 = MEMORY[0x1E0DEA968];
    v135 = MEMORY[0x1E0DEA968];
    v133 = v25;
    v134 = v27;
    swift_beginAccess();
    sub_1A128D188((uint64_t)&v133, v22, v24);
    swift_endAccess();
    v28 = sub_1A15A8BB0();
    v30 = v29;
    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 48))(ObjectType, v15);
    v135 = v26;
    v133 = v31;
    v134 = v32;
    swift_beginAccess();
    sub_1A128D188((uint64_t)&v133, v28, v30);
    swift_endAccess();
    v33 = sub_1A15A8BB0();
    v35 = v34;
    v36 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 32);
    v37 = (void *)v36(ObjectType, v15);
    v38 = objc_msgSend(v37, sel_uuid);

    v135 = sub_1A15A88C8();
    __swift_allocate_boxed_opaque_existential_1(&v133);
    sub_1A15A88B0();

    swift_beginAccess();
    sub_1A128D188((uint64_t)&v133, v33, v35);
    swift_endAccess();
    v39 = sub_1A15A8BB0();
    v41 = v40;
    v42 = (void *)v36(ObjectType, v15);
    objc_msgSend(v42, sel_boundingBox);
    v44 = v43;
    v46 = v45;
    v48 = v47;
    v50 = v49;

    v137.origin.x = v44;
    v137.origin.y = v46;
    v137.size.width = v48;
    v137.size.height = v50;
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v137);
    type metadata accessor for CFDictionary(0);
    v135 = v52;
    v133 = (uint64_t)DictionaryRepresentation;
    swift_beginAccess();
    sub_1A128D188((uint64_t)&v133, v39, v41);
    swift_endAccess();
    v53 = sub_1A15A8BB0();
    v55 = v54;
    v135 = MEMORY[0x1E0DEE0F8];
    LODWORD(v133) = 875704422;
    swift_beginAccess();
    sub_1A128D188((uint64_t)&v133, v53, v55);
    swift_endAccess();
    v136 = v16;
    v133 = v16;
    LOBYTE(v132[0]) = 0;
    v56 = (uint64_t)v129;
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 8) + 8) + 40))(v132, ObjectType);
    v57 = v130;
    v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v56, 1, v130);
    v122 = CFSTR("VNTrackingOption_CVPixelBufferFormat");
    if (v58 == 1)
    {
      sub_1A128DB78(v56, (uint64_t *)&unk_1EE6001D0);
      v59 = sub_1A15A8BB0();
      v61 = v60;
      v62 = objc_msgSend((id)objc_opt_self(), sel_defaultDevice);
      v63 = objc_msgSend(objc_allocWithZone((Class)VNProcessingDeviceComputeDeviceBridge), sel_initWithProcessingDevice_, v62);

      v64 = objc_msgSend(v63, sel_computeDevice);
      v135 = swift_getObjectType();
      v133 = (uint64_t)v64;
      swift_beginAccess();
      sub_1A128D188((uint64_t)&v133, v59, v61);
      swift_endAccess();
    }
    else
    {
      v65 = v131;
      v66 = v123;
      (*(void (**)(char *, uint64_t, uint64_t))(v131 + 32))(v123, v56, v57);
      v67 = sub_1A15A8BB0();
      v69 = v68;
      v70 = sub_1A15A8A6C();
      v135 = swift_getObjectType();
      v133 = v70;
      swift_beginAccess();
      sub_1A128D188((uint64_t)&v133, v67, v69);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v57);
    }
    v71 = v126;
    v72 = v126(ObjectType, v15);
    v74 = v73;
    if (v72 == sub_1A15A8BB0() && v74 == v75)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_9;
    }
    v76 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v76 & 1) != 0)
    {
LABEL_9:
      v77 = sub_1A15A8BB0();
      v79 = v78;
      v80 = (void *)objc_opt_self();
      v81 = objc_msgSend(v80, sel_rpnTrackerInitModelName);
      v82 = sub_1A15A8BB0();
      v84 = v83;

      v85 = MEMORY[0x1E0DEA968];
      v135 = MEMORY[0x1E0DEA968];
      v133 = v82;
      v134 = v84;
      swift_beginAccess();
      sub_1A128D188((uint64_t)&v133, v77, v79);
      swift_endAccess();
      v86 = sub_1A15A8BB0();
      v88 = v87;
      v89 = objc_msgSend(v80, sel_rpnTrackerTrackModelName);
      v90 = sub_1A15A8BB0();
      v92 = v91;

      v135 = v85;
      v133 = v90;
      v134 = v92;
      swift_beginAccess();
      sub_1A128D188((uint64_t)&v133, v86, v88);
      swift_endAccess();
      v93 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 96);
      v94 = swift_bridgeObjectRetain();
      v95 = v128;
      v96 = v93(v94);
      if (v95)
      {
        v97 = v125;
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v127);
      }
      else
      {
        v98 = (void *)v96;
        swift_bridgeObjectRelease();
        v99 = sub_1A15A8BB0();
        v101 = v100;
        v135 = sub_1A128DB40(0, &qword_1EE600800);
        v133 = (uint64_t)v98;
        swift_beginAccess();
        v102 = v98;
        sub_1A128D188((uint64_t)&v133, v99, v101);
        swift_endAccess();
        v103 = sub_1A15A8BB0();
        v105 = v104;
        v135 = MEMORY[0x1E0DEE0F8];
        LODWORD(v133) = 1111970369;
        swift_beginAccess();
        sub_1A128D188((uint64_t)&v133, v103, v105);
        swift_endAccess();

        swift_unknownObjectRelease();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(v127);
        return v125;
      }
      return v97;
    }
    v106 = v71(ObjectType, v15);
    v108 = v107;
    if (v106 == sub_1A15A8BB0() && v108 == v109)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v110 = sub_1A15A9354();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v110 & 1) == 0)
      {
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_18;
      }
    }
    v111 = sub_1A15A8BB0();
    v113 = v112;
    v114 = sub_1A128DB40(0, &qword_1EE6007E0);
    sub_1A15A8AB4();
    v133 = MEMORY[0x1E0DEE9D8];
    sub_1A1359570();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6007F0);
    sub_1A13595B8();
    sub_1A15A906C();
    (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v121, *MEMORY[0x1E0DEF8D0], v120);
    v115 = sub_1A15A8F64();
    v135 = v114;
    v133 = v115;
    swift_beginAccess();
    sub_1A128D188((uint64_t)&v133, v111, v113);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_release();
LABEL_18:
    __swift_destroy_boxed_opaque_existential_1(v127);
    return v125;
  }
  __break(1u);
  return result;
}

unint64_t sub_1A1359570()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6007E8;
  if (!qword_1EE6007E8)
  {
    v1 = sub_1A15A8F4C();
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6007E8);
  }
  return result;
}

unint64_t sub_1A13595B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6007F8;
  if (!qword_1EE6007F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE6007F0);
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6007F8);
  }
  return result;
}

id sub_1A1359604(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v11;
  char v13;
  void *v14;
  char v16;
  uint64_t v17;
  __objc2_class *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void (*v23)(id);
  id v24;
  id v25[2];

  v25[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 120))();
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 152))();
  if (v8)
  {
    v9 = (id)v8;
    swift_bridgeObjectRelease();
    return v9;
  }
  if (sub_1A15A8BB0() == a2 && v11 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v13 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
LABEL_16:
    sub_1A128FDD0(v7);
    swift_bridgeObjectRelease();
    v18 = VNObjectTrackerRevision2;
    goto LABEL_19;
  }
  if (sub_1A15A8BB0() == a2 && v14 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = v14;
    v16 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1A1288000();
      swift_allocError();
      *(_QWORD *)v17 = 0xD000000000000015;
      *(_QWORD *)(v17 + 8) = 0x80000001A15FE530;
      *(_BYTE *)(v17 + 16) = 6;
LABEL_22:
      swift_willThrow();
      return v9;
    }
  }
  sub_1A128FDD0(v7);
  swift_bridgeObjectRelease();
  v18 = VNRectangleTracker;
LABEL_19:
  v19 = objc_allocWithZone((Class)v18);
  v20 = (void *)sub_1A15A8AD8();
  swift_bridgeObjectRelease();
  v25[0] = 0;
  v21 = objc_msgSend(v19, sel_initWithOptions_error_, v20, v25);

  if (!v21)
  {
    v9 = v25[0];
    sub_1A15A8844();

    goto LABEL_22;
  }
  v22 = v25[0];
  v23 = *(void (**)(id))(*(_QWORD *)a1 + 160);
  v24 = v21;
  v23(v21);
  return v24;
}

uint64_t sub_1A1359898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[13];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 96))();
  if (!*(_QWORD *)(v4 + 16))
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1A1288044(v4 + 32, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v14 + 1))
  {
LABEL_8:
    result = sub_1A128DB78((uint64_t)&v13, &qword_1EE5FDE90);
    __break(1u);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD100);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6007D8);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  ObjectType = swift_getObjectType();
  MEMORY[0x1E0C80A78](ObjectType);
  v11[8] = a1;
  v11[9] = v1;
  v11[10] = v11[12];
  v11[11] = v12;
  MEMORY[0x1E0C80A78](v7);
  v11[2] = v8;
  v11[3] = v12;
  v11[4] = sub_1A1359A28;
  v11[5] = v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FE760);
  sub_1A128ECE8((uint64_t)sub_1A12C9694, (uint64_t)v11, ObjectType, v10, *(_QWORD *)(v12 + 8), (uint64_t)&v13);
  result = swift_unknownObjectRelease();
  if (!v2)
    return v13;
  return result;
}

id sub_1A1359A28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t (*v12)(_BYTE *);
  void (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, _QWORD);
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _BYTE v38[32];
  _QWORD v39[3];
  uint64_t v40;
  _BYTE v41[52];
  void *v42;

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = (id)v0[2];
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 112))();
  if (!v1)
  {
    v7 = (void *)v6;
    v8 = sub_1A15A8BB0();
    v36 = v3;
    v10 = v9;
    v11 = objc_msgSend(v7, sel_width);
    v40 = MEMORY[0x1E0DEB418];
    v39[0] = v11;
    v12 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 136);
    v13 = (void (*)(_BYTE *, _QWORD))v12(v38);
    sub_1A128D188((uint64_t)v39, v8, v10);
    v13(v38, 0);
    v14 = sub_1A15A8BB0();
    v16 = v15;
    v42 = v7;
    v17 = objc_msgSend(v7, sel_height);
    v40 = MEMORY[0x1E0DEB418];
    v39[0] = v17;
    v18 = v12(v38);
    v19 = v4;
    v20 = (void (*)(_BYTE *, _QWORD))v18;
    sub_1A128D188((uint64_t)v39, v14, v16);
    v20(v38, 0);
    type metadata accessor for TrackingState(0);
    v21 = swift_dynamicCastClassUnconditional();
    ObjectType = swift_getObjectType();
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(ObjectType, v19);
    v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 160))(v21, v23, v24);
    v26 = v42;
    swift_bridgeObjectRelease();
    if ((objc_msgSend(v25, sel_isTracking) & 1) != 0)
    {
      v39[0] = 0;
      v27 = objc_msgSend(v25, sel_trackInFrame_error_, v26, v39);
      v28 = v25;
      v29 = (void *)v39[0];
      if (v27)
      {
        v30 = v27;
        goto LABEL_6;
      }
    }
    else
    {
      v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(ObjectType, v19);
      v39[0] = 0;
      v28 = v25;
      v30 = objc_msgSend(v25, sel_setTrackedObjects_inFrame_error_, v31, v26, v39);

      v29 = (void *)v39[0];
      if (v30)
      {
LABEL_6:
        v37 = v28;
        v32 = sub_1A15A8C40();
        v33 = v29;

        if (*(_QWORD *)(v32 + 16))
        {
          v39[0] = v36;
          sub_1A128465C((uint64_t)v5 + 24, (uint64_t)v41);
          (*(void (**)(uint64_t, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)(v19 + 16) + 32))(v32, v41, ObjectType, *(_QWORD *)(v19 + 16));
          swift_bridgeObjectRelease();
          swift_getAssociatedTypeWitness();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCE80);
          v35 = sub_1A15A9174();
          swift_bridgeObjectRelease();
          v5 = (id)sub_1A1359DF4(v35);

          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();

          return (id)MEMORY[0x1E0DEE9D8];
        }
        return v5;
      }
    }
    v5 = v29;
    sub_1A15A8844();

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_1A1359DF4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    sub_1A1287244(0, v1, 0);
    v4 = a1 + 32;
    v2 = v10;
    do
    {
      sub_1A1288044(v4, (uint64_t)&v8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCE80);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A1287244(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v10;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1A1287244((char *)(v5 > 1), v6 + 1, 1);
        v2 = v10;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_1A12880A0(&v9, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1A1359F20()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t sub_1A1359F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
  return sub_1A130E4B8(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v2);
}

uint64_t sub_1A1359F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A129BC28;
  return sub_1A12E17E8(a1, a2, (uint64_t)&off_1E452EC08);
}

uint64_t type metadata accessor for TrackingOperation()
{
  return objc_opt_self();
}

BOOL static HumanHandPoseObservation.Chirality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t HumanHandPoseObservation.Chirality.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A135A04C()
{
  sub_1A135A310();
  return sub_1A15A9474();
}

uint64_t sub_1A135A074()
{
  sub_1A135A310();
  return sub_1A15A9480();
}

uint64_t sub_1A135A09C()
{
  sub_1A135A398();
  return sub_1A15A9474();
}

uint64_t sub_1A135A0C4()
{
  sub_1A135A398();
  return sub_1A15A9480();
}

uint64_t sub_1A135A0EC()
{
  sub_1A135A354();
  return sub_1A15A9474();
}

uint64_t sub_1A135A114()
{
  sub_1A135A354();
  return sub_1A15A9480();
}

uint64_t HumanHandPoseObservation.Chirality.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600820);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600828);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600830);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A135A310();
  sub_1A15A9468();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A135A354();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A135A398();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_1A135A310()
{
  unint64_t result;

  result = qword_1EE636C90;
  if (!qword_1EE636C90)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC5F8, &type metadata for HumanHandPoseObservation.Chirality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE636C90);
  }
  return result;
}

unint64_t sub_1A135A354()
{
  unint64_t result;

  result = qword_1EE636C98;
  if (!qword_1EE636C98)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC5A8, &type metadata for HumanHandPoseObservation.Chirality.RightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE636C98);
  }
  return result;
}

unint64_t sub_1A135A398()
{
  unint64_t result;

  result = qword_1EE636CA0;
  if (!qword_1EE636CA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC558, &type metadata for HumanHandPoseObservation.Chirality.LeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE636CA0);
  }
  return result;
}

uint64_t HumanHandPoseObservation.Chirality.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t HumanHandPoseObservation.Chirality.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600838);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600840);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600848);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A135A310();
  v11 = v33;
  sub_1A15A945C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A15A9294();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A15A90F0();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v21 = &type metadata for HumanHandPoseObservation.Chirality;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A135A354();
    sub_1A15A9204();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A135A398();
    v22 = v6;
    sub_1A15A9204();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_1A135A778@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return HumanHandPoseObservation.Chirality.init(from:)(a1, a2);
}

uint64_t sub_1A135A78C(_QWORD *a1)
{
  return HumanHandPoseObservation.Chirality.encode(to:)(a1);
}

void HumanHandPoseObservation.chirality.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t HumanHandPoseObservation.allJoints(in:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v4 = *a1;
  v1 = type metadata accessor for HumanHandPoseObservation();
  v2 = sub_1A12857D8(&qword_1EE600850, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&unk_1A15DC02C);
  return sub_1A130E584((uint64_t (*)(uint64_t, uint64_t))&v4, v1, v2);
}

uint64_t type metadata accessor for HumanHandPoseObservation()
{
  uint64_t result;

  result = qword_1EE637830;
  if (!qword_1EE637830)
    return swift_getSingletonMetadata();
  return result;
}

id HumanHandPoseObservation.keypoints.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for HumanHandPoseObservation();
  v1 = sub_1A12857D8(&qword_1EE600858, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&unk_1A15DC098);
  return sub_1A12E3E0C(v0, v1);
}

uint64_t HumanHandPoseObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HumanHandPoseObservation() + 20);
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

float HumanHandPoseObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for HumanHandPoseObservation() + 24));
}

__n128 HumanHandPoseObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for HumanHandPoseObservation() + 28);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

unint64_t HumanHandPoseObservation.description.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1A15A9090();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for HumanHandPoseObservation();
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  if (*v0 != 2)
  {
    sub_1A15A8BEC();
    sub_1A15A9180();
    sub_1A15A8BEC();
    swift_bridgeObjectRelease();
  }
  v2 = sub_1A12857D8(&qword_1EE600860, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  sub_1A132D4B4(v1, (uint64_t)&off_1E4533058, v2);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  swift_bridgeObjectRetain();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000024;
}

uint64_t HumanHandPoseObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HumanHandPoseObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

Vision::HumanHandPoseObservation::JointName_optional __swiftcall HumanHandPoseObservation.JointName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  Vision::HumanHandPoseObservation::JointName_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1A15A936C();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 3;
  switch(v3)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v5 = 1;
      goto LABEL_5;
    case 2:
      v5 = 2;
LABEL_5:
      v6 = v5;
      break;
    case 3:
      break;
    case 4:
      v6 = 4;
      break;
    case 5:
      v6 = 5;
      break;
    case 6:
      v6 = 6;
      break;
    case 7:
      v6 = 7;
      break;
    case 8:
      v6 = 8;
      break;
    case 9:
      v6 = 9;
      break;
    case 10:
      v6 = 10;
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    default:
      v6 = 21;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t HumanHandPoseObservation.JointName.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A135ACB4 + 4 * byte_1A15DBC45[*v0]))(0x706954626D756874, 0xE800000000000000);
}

uint64_t sub_1A135ACB4()
{
  return 0x5049626D756874;
}

uint64_t sub_1A135ACCC()
{
  return 0x504D626D756874;
}

uint64_t sub_1A135ACE4()
{
  return 0x434D43626D756874;
}

uint64_t sub_1A135ACF8()
{
  return 0x7069547865646E69;
}

uint64_t sub_1A135AD0C()
{
  return 0x5049447865646E69;
}

uint64_t sub_1A135AD20()
{
  return 0x5049507865646E69;
}

uint64_t sub_1A135AD34()
{
  return 0x50434D7865646E69;
}

uint64_t sub_1A135AD48()
{
  return 0x6954656C6464696DLL;
}

uint64_t sub_1A135AE48()
{
  return 0x7473697277;
}

uint64_t sub_1A135AE5C()
{
  return sub_1A135AE68();
}

uint64_t sub_1A135AE68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = HumanHandPoseObservation.JointName.rawValue.getter();
  v2 = v1;
  if (v0 == HumanHandPoseObservation.JointName.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void sub_1A135AEFC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A135AF44(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A135AFC8 + 4 * byte_1A15DBC5F[a2]))(0x6E69467865646E69);
}

uint64_t sub_1A135AFC8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E69467865646E69 && v1 == 0xEB00000000726567)
    v2 = 1;
  else
    v2 = sub_1A15A9354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

Vision::HumanHandPoseObservation::JointName_optional sub_1A135B0A8(Swift::String *a1)
{
  return HumanHandPoseObservation.JointName.init(rawValue:)(*a1);
}

uint64_t sub_1A135B0B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = HumanHandPoseObservation.JointName.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A135B0D8()
{
  sub_1A15A93E4();
  HumanHandPoseObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A135B13C()
{
  HumanHandPoseObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A135B18C()
{
  sub_1A15A93E4();
  HumanHandPoseObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A135B1EC()
{
  sub_1A135EF80();
  return sub_1A15A8C1C();
}

uint64_t sub_1A135B248()
{
  sub_1A135EF80();
  return sub_1A15A8C10();
}

Vision::HumanHandPoseObservation::JointsGroupName_optional __swiftcall HumanHandPoseObservation.JointsGroupName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  Vision::HumanHandPoseObservation::JointsGroupName_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A15A91EC();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static HumanHandPoseObservation.JointsGroupName.allCases.getter()
{
  return &unk_1E4532968;
}

uint64_t HumanHandPoseObservation.JointsGroupName.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A135B324 + 4 * byte_1A15DBC64[*v0]))(0x626D756874, 0xE500000000000000);
}

uint64_t sub_1A135B324()
{
  return 0x6E69467865646E69;
}

uint64_t sub_1A135B344()
{
  return 0x6946656C7474696CLL;
}

uint64_t sub_1A135B370()
{
  return 0x676E6946676E6972;
}

void sub_1A135B38C(char *a1)
{
  sub_1A135AEFC(*a1);
}

Vision::HumanHandPoseObservation::JointsGroupName_optional sub_1A135B398(Swift::String *a1)
{
  return HumanHandPoseObservation.JointsGroupName.init(rawValue:)(*a1);
}

uint64_t sub_1A135B3A4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A135B3D0 + 4 * byte_1A15DBC69[*v0]))();
}

void sub_1A135B3D0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E69467865646E69;
  a1[1] = 0xEB00000000726567;
}

void sub_1A135B3F4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "littleFinger");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1A135B424(_QWORD *a1@<X8>)
{
  *a1 = 0x676E6946676E6972;
  a1[1] = 0xEA00000000007265;
}

void sub_1A135B444(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4532AB8;
}

void sub_1A135B454()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A15A93E4();
  __asm { BR              X9 }
}

uint64_t sub_1A135B49C()
{
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

void sub_1A135B52C()
{
  __asm { BR              X10 }
}

uint64_t sub_1A135B564()
{
  sub_1A15A8BC8();
  return swift_bridgeObjectRelease();
}

void sub_1A135B5E0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A15A93E4();
  __asm { BR              X9 }
}

uint64_t sub_1A135B624()
{
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A135B6B8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  if (result == a2)
    return 1;
  v2 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_24;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v11 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        return 1;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          return 1;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            return 1;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_24:
    v14 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v10);
    swift_bridgeObjectRetain();
    sub_1A135D8F0(v14);
    if ((v15 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_1A1295804();
    v16 = sub_1A15A8B80();
    result = swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
      return 0;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
    return 1;
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t HumanHandPoseObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for HumanHandPoseObservation();
  sub_1A12857D8(&qword_1EE600868, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A135B92C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A12857D8(&qword_1EE600850, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&unk_1A15DC02C);
  return sub_1A130E96C(a1, v2);
}

uint64_t sub_1A135B96C()
{
  sub_1A12857D8(&qword_1EE600850, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&unk_1A15DC02C);
  return sub_1A130EA34();
}

uint64_t sub_1A135B9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE600850, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&unk_1A15DC02C);
  return sub_1A130E4CC(a1, a2, v4);
}

uint64_t sub_1A135BA04(char *a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  v5 = *a1;
  v3 = sub_1A12857D8(&qword_1EE600850, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&unk_1A15DC02C);
  return sub_1A130E584((uint64_t (*)(uint64_t, uint64_t))&v5, a2, v3);
}

uint64_t sub_1A135BA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE600860, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

uint64_t sub_1A135BAB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;

  v3 = type metadata accessor for HumanHandPoseObservation();
  result = 0;
  v5 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 32));
  if (v5 <= 0xFB && (v5 & 0xF8) == 0x68)
    __asm { BR              X10 }
  return result;
}

uint64_t sub_1A135BB4C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A135BB5C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x74696C6172696863;
  if (*v0 != 1)
    v1 = 0x746176726573626FLL;
  if (*v0)
    return v1;
  else
    return 0x746E696F4A6C6C61;
}

uint64_t sub_1A135BBC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A135EAD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A135BBE8()
{
  sub_1A135E820();
  return sub_1A15A9474();
}

uint64_t sub_1A135BC10()
{
  sub_1A135E820();
  return sub_1A15A9480();
}

uint64_t HumanHandPoseObservation.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600870);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A135E820();
  v12 = v3;
  sub_1A15A9468();
  v13 = type metadata accessor for HumanHandPoseObservation();
  v26 = *(_QWORD *)&v3[*(int *)(v13 + 36)];
  v25 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600878);
  sub_1A135E950(&qword_1EE600880, (uint64_t (*)(void))sub_1A135E864, (uint64_t (*)(void))sub_1A12E9D60, MEMORY[0x1E0DEA0B8]);
  sub_1A15A92F4();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = v9;
  v15 = (uint64_t)v7;
  v16 = v20;
  v17 = v21;
  v24 = *v12;
  v23 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600890);
  sub_1A135E8A8();
  sub_1A15A92F4();
  v22 = 2;
  sub_1A12855AC();
  sub_1A15A92AC();
  v18 = sub_1A12857D8(&qword_1EE600860, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  sub_1A12E2C64(v15, v13, (uint64_t)&off_1E4533058, v18);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v11, v8);
}

uint64_t HumanHandPoseObservation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _BYTE v38[52];
  uint64_t v39;

  v29 = a2;
  v34 = sub_1A15A88C8();
  v30 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v32 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v31 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6008A8);
  v6 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HumanHandPoseObservation();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A135E820();
  v12 = (uint64_t)v36;
  sub_1A15A945C();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v28 = v5;
  v13 = v6;
  v36 = a1;
  v14 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600878);
  v37 = 0;
  sub_1A135E950(&qword_1EE6008B0, (uint64_t (*)(void))sub_1A135E9CC, (uint64_t (*)(void))sub_1A12E9C18, MEMORY[0x1E0DEA0D8]);
  v15 = v35;
  sub_1A15A9264();
  v16 = v8;
  v17 = (int *)v9;
  v18 = *(int *)(v9 + 36);
  v19 = (uint64_t)v11;
  *(_QWORD *)&v11[v18] = v39;
  v37 = 1;
  sub_1A135EA10();
  sub_1A15A9264();
  *v11 = v39;
  LOBYTE(v39) = 2;
  sub_1A12855AC();
  sub_1A15A9204();
  v26 = v13;
  v27 = v16;
  LOBYTE(v39) = 0;
  sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v20 = v32;
  sub_1A15A9264();
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v19 + v17[5], v20, v14);
  LOBYTE(v39) = 1;
  sub_1A15A924C();
  *(_DWORD *)(v19 + v17[6]) = v21;
  v37 = 3;
  sub_1A1285654();
  sub_1A15A9228();
  v23 = v28;
  v22 = v29;
  v24 = v31;
  *(_BYTE *)(v19 + v17[8]) = v39;
  sub_1A12E32A4((uint64_t)v38);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v33);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v15);
  sub_1A128465C((uint64_t)v38, v19 + v17[7]);
  sub_1A135EA54(v19, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return sub_1A135EA98(v19);
}

uint64_t sub_1A135C358@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HumanHandPoseObservation.init(from:)(a1, a2);
}

uint64_t sub_1A135C36C(_QWORD *a1)
{
  return HumanHandPoseObservation.encode(to:)(a1);
}

void *sub_1A135C380()
{
  uint64_t v0;
  void *result;

  result = sub_1A135EC50();
  if (!v0)
    return (void *)swift_bridgeObjectRetain();
  return result;
}

void sub_1A135C3A4(void *a1@<X0>, char *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  char v149;
  id v150;

  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v6 = sub_1A15A8BB0();
  v8 = v7;
  if (v6 == sub_1A15A8BB0() && v8 == v9)
  {
    v12 = 20;
LABEL_8:

    swift_bridgeObjectRelease_n();
    goto LABEL_9;
  }
  v11 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    v12 = 20;
LABEL_9:

    goto LABEL_10;
  }
  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v13 = sub_1A15A8BB0();
  v15 = v14;
  if (v13 == sub_1A15A8BB0() && v15 == v16)
  {
    v12 = 3;
    goto LABEL_8;
  }
  v17 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
    v12 = 3;
    goto LABEL_9;
  }
  sub_1A15A8BB0();
  v4 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v5 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v18 = sub_1A15A8BB0();
  v20 = v19;
  if (v18 == sub_1A15A8BB0() && v20 == v21)
  {
    v12 = 1;
    goto LABEL_8;
  }
  v22 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
    v12 = 1;
    goto LABEL_9;
  }
  sub_1A15A8BB0();
  v23 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v24 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v25 = sub_1A15A8BB0();
  v27 = v26;
  if (v25 == sub_1A15A8BB0() && v27 == v28)
  {

    swift_bridgeObjectRelease_n();
LABEL_25:

    v12 = 2;
    goto LABEL_10;
  }
  v29 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
    goto LABEL_25;
  sub_1A15A8BB0();
  v30 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v31 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v32 = sub_1A15A8BB0();
  v34 = v33;
  if (v32 == sub_1A15A8BB0() && v34 == v35)
  {

    swift_bridgeObjectRelease_n();
LABEL_30:

    v12 = 0;
    goto LABEL_10;
  }
  v36 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) != 0)
    goto LABEL_30;
  sub_1A15A8BB0();
  v37 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v38 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v39 = sub_1A15A8BB0();
  v41 = v40;
  if (v39 == sub_1A15A8BB0() && v41 == v42)
  {

    swift_bridgeObjectRelease_n();
LABEL_35:

    v12 = 4;
    goto LABEL_10;
  }
  v43 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v43 & 1) != 0)
    goto LABEL_35;
  sub_1A15A8BB0();
  v44 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v45 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v46 = sub_1A15A8BB0();
  v48 = v47;
  if (v46 == sub_1A15A8BB0() && v48 == v49)
  {

    swift_bridgeObjectRelease_n();
LABEL_40:

    v12 = 5;
    goto LABEL_10;
  }
  v50 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) != 0)
    goto LABEL_40;
  sub_1A15A8BB0();
  v51 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v52 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v53 = sub_1A15A8BB0();
  v55 = v54;
  if (v53 == sub_1A15A8BB0() && v55 == v56)
  {

    swift_bridgeObjectRelease_n();
LABEL_45:

    v12 = 6;
    goto LABEL_10;
  }
  v57 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v57 & 1) != 0)
    goto LABEL_45;
  sub_1A15A8BB0();
  v58 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v59 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v60 = sub_1A15A8BB0();
  v62 = v61;
  if (v60 == sub_1A15A8BB0() && v62 == v63)
  {

    swift_bridgeObjectRelease_n();
LABEL_50:

    v12 = 7;
    goto LABEL_10;
  }
  v64 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v64 & 1) != 0)
    goto LABEL_50;
  sub_1A15A8BB0();
  v65 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v66 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v67 = sub_1A15A8BB0();
  v69 = v68;
  if (v67 == sub_1A15A8BB0() && v69 == v70)
  {

    swift_bridgeObjectRelease_n();
LABEL_55:

    v12 = 8;
    goto LABEL_10;
  }
  v71 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) != 0)
    goto LABEL_55;
  sub_1A15A8BB0();
  v72 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v73 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v74 = sub_1A15A8BB0();
  v76 = v75;
  if (v74 == sub_1A15A8BB0() && v76 == v77)
  {

    swift_bridgeObjectRelease_n();
LABEL_60:

    v12 = 9;
    goto LABEL_10;
  }
  v78 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v78 & 1) != 0)
    goto LABEL_60;
  sub_1A15A8BB0();
  v79 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v80 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v81 = sub_1A15A8BB0();
  v83 = v82;
  if (v81 == sub_1A15A8BB0() && v83 == v84)
  {

    swift_bridgeObjectRelease_n();
LABEL_65:

    v12 = 10;
    goto LABEL_10;
  }
  v85 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v85 & 1) != 0)
    goto LABEL_65;
  sub_1A15A8BB0();
  v86 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v87 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v88 = sub_1A15A8BB0();
  v90 = v89;
  if (v88 == sub_1A15A8BB0() && v90 == v91)
  {

    swift_bridgeObjectRelease_n();
LABEL_70:

    v12 = 11;
    goto LABEL_10;
  }
  v92 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v92 & 1) != 0)
    goto LABEL_70;
  sub_1A15A8BB0();
  v93 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v94 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v95 = sub_1A15A8BB0();
  v97 = v96;
  if (v95 == sub_1A15A8BB0() && v97 == v98)
  {

    swift_bridgeObjectRelease_n();
LABEL_75:

    v12 = 12;
    goto LABEL_10;
  }
  v99 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v99 & 1) != 0)
    goto LABEL_75;
  sub_1A15A8BB0();
  v100 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v101 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v102 = sub_1A15A8BB0();
  v104 = v103;
  if (v102 == sub_1A15A8BB0() && v104 == v105)
  {

    swift_bridgeObjectRelease_n();
LABEL_80:

    v12 = 13;
    goto LABEL_10;
  }
  v106 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v106 & 1) != 0)
    goto LABEL_80;
  sub_1A15A8BB0();
  v107 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v108 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v109 = sub_1A15A8BB0();
  v111 = v110;
  if (v109 == sub_1A15A8BB0() && v111 == v112)
  {

    swift_bridgeObjectRelease_n();
LABEL_85:

    v12 = 14;
    goto LABEL_10;
  }
  v113 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v113 & 1) != 0)
    goto LABEL_85;
  sub_1A15A8BB0();
  v114 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v115 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v116 = sub_1A15A8BB0();
  v118 = v117;
  if (v116 == sub_1A15A8BB0() && v118 == v119)
  {

    swift_bridgeObjectRelease_n();
LABEL_90:

    v12 = 15;
    goto LABEL_10;
  }
  v120 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v120 & 1) != 0)
    goto LABEL_90;
  sub_1A15A8BB0();
  v121 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v122 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v123 = sub_1A15A8BB0();
  v125 = v124;
  if (v123 == sub_1A15A8BB0() && v125 == v126)
  {

    swift_bridgeObjectRelease_n();
LABEL_95:

    v12 = 16;
    goto LABEL_10;
  }
  v127 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v127 & 1) != 0)
    goto LABEL_95;
  sub_1A15A8BB0();
  v128 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v129 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v130 = sub_1A15A8BB0();
  v132 = v131;
  if (v130 == sub_1A15A8BB0() && v132 == v133)
  {

    swift_bridgeObjectRelease_n();
LABEL_100:

    v12 = 17;
    goto LABEL_10;
  }
  v134 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v134 & 1) != 0)
    goto LABEL_100;
  sub_1A15A8BB0();
  v135 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v136 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v137 = sub_1A15A8BB0();
  v139 = v138;
  if (v137 == sub_1A15A8BB0() && v139 == v140)
  {

    swift_bridgeObjectRelease_n();
LABEL_105:

    v12 = 18;
    goto LABEL_10;
  }
  v141 = sub_1A15A9354();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v141 & 1) != 0)
    goto LABEL_105;
  sub_1A15A8BB0();
  v142 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  sub_1A15A8BB0();
  v143 = (void *)sub_1A15A8B8C();
  swift_bridgeObjectRelease();
  v144 = sub_1A15A8BB0();
  v146 = v145;
  if (v144 == sub_1A15A8BB0() && v146 == v147)
  {
    v148 = a1;

    swift_bridgeObjectRelease_n();
    v12 = 19;
  }
  else
  {
    v149 = sub_1A15A9354();
    v150 = a1;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v149 & 1) != 0)
      v12 = 19;
    else
      v12 = 21;
  }
LABEL_10:
  *a2 = v12;
}

uint64_t sub_1A135D444@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  unint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  char isUniquelyReferenced_nonNull_native;
  id v32;
  char v33;
  char v34;
  id v35;
  int *v36;
  int v37;
  int v38;
  uint64_t result;
  char v40;
  uint64_t v43;
  _BYTE v44[40];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v40 = *a2;
  v5 = sub_1A135D724(MEMORY[0x1E0DEE9D8]);
  v6 = objc_msgSend(a1, sel_availableJointNames);
  _s3__C9JointNameVMa_2(0);
  v7 = sub_1A15A8C40();

  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = 0;
    v10 = &selRef_memoryPoolId;
    v43 = v7;
    do
    {
      v13 = *(void **)(v7 + 8 * v9 + 32);
      *(_QWORD *)&v45 = 0;
      v14 = v13;
      v15 = objc_msgSend(a1, v10[450], v14, &v45);
      v16 = (void *)v45;
      if (v15)
      {
        v17 = v15;
        v18 = v14;
        v19 = v16;
        sub_1A135C3A4(v18, (char *)&v45);
        v20 = v45;
        if (v45 == 21)
        {

        }
        else
        {
          objc_msgSend(v17, sel_location);
          NormalizedPoint.init(normalizedPoint:)((CGPoint)__PAIR128__(v22, v21));
          v23 = HumanHandPoseObservation.JointName.rawValue.getter();
          v24 = v8;
          v25 = a1;
          v26 = v10;
          v28 = v27;
          objc_msgSend(v17, sel_confidence);
          v29 = v28;
          v10 = v26;
          a1 = v25;
          v8 = v24;
          v7 = v43;
          sub_1A1295500(&v45, v23, v29, (uint64_t)v44, v30);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v45 = v5;
          sub_1A135E388((uint64_t)v44, v20, isUniquelyReferenced_nonNull_native);
          v5 = v45;

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v11 = (id)v45;
        v12 = (void *)sub_1A15A8844();

        swift_willThrow();
      }
      ++v9;
    }
    while (v8 != v9);
  }
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(a1, sel_chirality);
  if (v32 == (id)1)
    v33 = 1;
  else
    v33 = 2;
  if (v32 == (id)-1)
    v34 = 0;
  else
    v34 = v33;
  v35 = objc_msgSend(a1, sel_uuid);
  v36 = (int *)type metadata accessor for HumanHandPoseObservation();
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v38 = v37;

  *a4 = v34;
  *(_DWORD *)&a4[v36[6]] = v38;
  result = sub_1A128465C(a3, (uint64_t)&a4[v36[7]]);
  a4[v36[8]] = v40;
  *(_QWORD *)&a4[v36[9]] = v5;
  return result;
}

unint64_t sub_1A135D724(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600920);
  v2 = (_QWORD *)sub_1A15A91D4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_DWORD *)(a1 + 72);
  while (1)
  {
    v5 = *((unsigned __int8 *)v4 - 40);
    v6 = *((_QWORD *)v4 - 4);
    v7 = *((_QWORD *)v4 - 3);
    v9 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v4 - 1);
    v10 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1A135D8F0(v5);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    v13 = v2[7] + 40 * result;
    *(_QWORD *)v13 = v6;
    *(_QWORD *)(v13 + 8) = v7;
    *(_QWORD *)(v13 + 16) = v9;
    *(_QWORD *)(v13 + 24) = v8;
    *(_DWORD *)(v13 + 32) = v10;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v2[2] = v16;
    v4 += 12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t HumanHandPoseObservation.init(_:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __n128 v5[2];
  char v6;
  __int128 v7;
  char v8;

  v6 = -4;
  objc_msgSend(a1, sel_timeRange, static NormalizedRect.fullImage.getter(v5).n128_f64[0]);
  v8 = 0;
  return sub_1A135D444(a1, &v6, (uint64_t)&v7, a2);
}

uint64_t sub_1A135D8C8@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  char v5;

  v5 = *a2;
  return sub_1A135D444(a1, &v5, a3, a4);
}

uint64_t sub_1A135D8F0(uint64_t a1)
{
  uint64_t v2;

  sub_1A15A93E4();
  HumanHandPoseObservation.JointName.rawValue.getter();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  v2 = sub_1A15A9420();
  return sub_1A135D968(a1, v2);
}

uint64_t sub_1A135D968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

uint64_t sub_1A135DE34(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  char v19;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600920);
  v19 = a2;
  v6 = sub_1A15A91C8();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_28;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v18 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v18 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((v19 & 1) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_17;
  v13 = 2;
  if (v18 <= 2)
    goto LABEL_21;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_17:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    if ((v19 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1A15A93E4();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v18 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x1A135E334);
      }
      if (v13 >= v18)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_17;
    }
  }
LABEL_21:
  swift_release();
  if ((v19 & 1) == 0)
    goto LABEL_28;
LABEL_24:
  v16 = 1 << *(_BYTE *)(v5 + 32);
  if (v16 >= 64)
    bzero(v11, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v16;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_1A135E388(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1A135D8F0(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1A135E4E0();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_1A12EBB90(a1, v16[7] + 40 * v10);
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    v18 = v16[7] + 40 * v10;
    v19 = *(_OWORD *)a1;
    v20 = *(_OWORD *)(a1 + 16);
    *(_DWORD *)(v18 + 32) = *(_DWORD *)(a1 + 32);
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return result;
    }
    goto LABEL_14;
  }
  sub_1A135DE34(result, a3 & 1);
  result = sub_1A135D8F0(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_1A12EBB90(a1, v16[7] + 40 * v10);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A15A9390();
  __break(1u);
  return result;
}

void *sub_1A135E4E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600920);
  v2 = *v0;
  v3 = sub_1A15A91BC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 40 * v15;
    v18 = *(_QWORD *)(v16 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    v19 = *(_DWORD *)(v16 + 32);
    v20 = *(_OWORD *)v16;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v21 = *(_QWORD *)(v4 + 56) + 40 * v15;
    *(_OWORD *)v21 = v20;
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(v21 + 24) = v17;
    *(_DWORD *)(v21 + 32) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _s6Vision24HumanHandPoseObservationV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  int v6;
  int *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v15;

  v4 = *a1;
  v5 = *a2;
  if (v4 == 2)
  {
    if (v5 != 2)
      goto LABEL_22;
  }
  else
  {
    v6 = (v5 ^ v4) & 1;
    if (v5 == 2 || v6 != 0)
      goto LABEL_22;
  }
  v8 = (int *)type metadata accessor for HumanHandPoseObservation();
  if ((sub_1A15A88A4() & 1) == 0 || *(float *)&a1[v8[6]] != *(float *)&a2[v8[6]])
    goto LABEL_22;
  v9 = v8[7];
  v10 = a1[v9 + 48];
  v11 = &a2[v9];
  if ((v10 & 1) != 0)
  {
    if (!v11[48])
      goto LABEL_22;
  }
  else if ((v11[48] & 1) != 0 || (sub_1A15A8EC8() & 1) == 0)
  {
    goto LABEL_22;
  }
  v12 = v8[8];
  v13 = a1[v12];
  v14 = a2[v12];
  if (v13 > 0xFB)
  {
    if (v14 > 0xFB)
      goto LABEL_21;
LABEL_22:
    v15 = 0;
    return v15 & 1;
  }
  if (v14 > 0xFB)
    goto LABEL_22;
  sub_1A12862A0();
  if ((sub_1A15A8B80() & 1) == 0)
    goto LABEL_22;
LABEL_21:
  v15 = sub_1A135B6B8(*(_QWORD *)&a1[v8[9]], *(_QWORD *)&a2[v8[9]]);
  return v15 & 1;
}

unint64_t sub_1A135E820()
{
  unint64_t result;

  result = qword_1EE636CA8[0];
  if (!qword_1EE636CA8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC508, &type metadata for HumanHandPoseObservation.CodingKeys);
    atomic_store(result, qword_1EE636CA8);
  }
  return result;
}

unint64_t sub_1A135E864()
{
  unint64_t result;

  result = qword_1EE600888;
  if (!qword_1EE600888)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.JointName, &type metadata for HumanHandPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE600888);
  }
  return result;
}

unint64_t sub_1A135E8A8()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EE600898;
  if (!qword_1EE600898)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE600890);
    v2 = sub_1A135E90C();
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EE600898);
  }
  return result;
}

unint64_t sub_1A135E90C()
{
  unint64_t result;

  result = qword_1EE6008A0;
  if (!qword_1EE6008A0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.Chirality, &type metadata for HumanHandPoseObservation.Chirality);
    atomic_store(result, (unint64_t *)&qword_1EE6008A0);
  }
  return result;
}

uint64_t sub_1A135E950(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE600878);
    v10[0] = a2();
    v10[1] = a3();
    result = MEMORY[0x1A1B0B774](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A135E9CC()
{
  unint64_t result;

  result = qword_1EE6008B8;
  if (!qword_1EE6008B8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.JointName, &type metadata for HumanHandPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE6008B8);
  }
  return result;
}

unint64_t sub_1A135EA10()
{
  unint64_t result;

  result = qword_1EE6008C0;
  if (!qword_1EE6008C0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.Chirality, &type metadata for HumanHandPoseObservation.Chirality);
    atomic_store(result, (unint64_t *)&qword_1EE6008C0);
  }
  return result;
}

uint64_t sub_1A135EA54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HumanHandPoseObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A135EA98(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HumanHandPoseObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A135EAD4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E696F4A6C6C61 && a2 == 0xE900000000000073;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74696C6172696863 && a2 == 0xE900000000000079 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void *sub_1A135EC50()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for HumanHandPoseObservation() + 32));
  if (v1 > 0xFB || (v1 & 0xF8) != 0x68)
  {
    sub_1A15A9090();
    sub_1A15A8BEC();
    if (v1 <= 0xFB)
      RequestDescriptor.description.getter();
    sub_1A15A8BEC();
    swift_bridgeObjectRelease();
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0xE000000000000000;
    *(_BYTE *)(v2 + 16) = 18;
    swift_willThrow();
  }
  return &unk_1E4532BA8;
}

unint64_t sub_1A135ED74()
{
  unint64_t result;

  result = qword_1EE6008C8;
  if (!qword_1EE6008C8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.Chirality, &type metadata for HumanHandPoseObservation.Chirality);
    atomic_store(result, (unint64_t *)&qword_1EE6008C8);
  }
  return result;
}

unint64_t sub_1A135EDBC()
{
  unint64_t result;

  result = qword_1EE6008D0;
  if (!qword_1EE6008D0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.JointName, &type metadata for HumanHandPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE6008D0);
  }
  return result;
}

unint64_t sub_1A135EE04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6008D8;
  if (!qword_1EE6008D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE6008E0);
    result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6008D8);
  }
  return result;
}

unint64_t sub_1A135EE54()
{
  unint64_t result;

  result = qword_1EE6008E8;
  if (!qword_1EE6008E8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.JointsGroupName, &type metadata for HumanHandPoseObservation.JointsGroupName);
    atomic_store(result, (unint64_t *)&qword_1EE6008E8);
  }
  return result;
}

uint64_t sub_1A135EE98(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE6008F0, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  a1[2] = sub_1A12857D8(&qword_1EE5FE4B0, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  a1[3] = sub_1A12857D8(&qword_1EE5FE4E0, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  result = sub_1A12857D8(&qword_1EE600868, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  a1[4] = result;
  return result;
}

unint64_t sub_1A135EF38()
{
  unint64_t result;

  result = qword_1EE6008F8;
  if (!qword_1EE6008F8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.JointName, &type metadata for HumanHandPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE6008F8);
  }
  return result;
}

unint64_t sub_1A135EF80()
{
  unint64_t result;

  result = qword_1EE600900;
  if (!qword_1EE600900)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.JointName, &type metadata for HumanHandPoseObservation.JointName);
    atomic_store(result, (unint64_t *)&qword_1EE600900);
  }
  return result;
}

unint64_t sub_1A135EFC8()
{
  unint64_t result;

  result = qword_1EE600908;
  if (!qword_1EE600908)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.JointsGroupName, &type metadata for HumanHandPoseObservation.JointsGroupName);
    atomic_store(result, (unint64_t *)&qword_1EE600908);
  }
  return result;
}

unint64_t sub_1A135F010()
{
  unint64_t result;

  result = qword_1EE600910;
  if (!qword_1EE600910)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for HumanHandPoseObservation.JointsGroupName, &type metadata for HumanHandPoseObservation.JointsGroupName);
    atomic_store(result, (unint64_t *)&qword_1EE600910);
  }
  return result;
}

uint64_t sub_1A135F054()
{
  return sub_1A12857D8(&qword_1EE5FDCD8, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
}

uint64_t sub_1A135F080(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE600918, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A135F0BC(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE600860, (uint64_t (*)(uint64_t))type metadata accessor for HumanHandPoseObservation, (uint64_t)&protocol conformance descriptor for HumanHandPoseObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for HumanHandPoseObservation(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = sub_1A15A88C8();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[7];
    *(_DWORD *)((char *)v4 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v14;
    *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
    v12[48] = v13[48];
    v15 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v15) = *(_QWORD *)((char *)a2 + v15);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for HumanHandPoseObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for HumanHandPoseObservation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A15A88C8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[7];
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  v11[48] = v12[48];
  v14 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for HumanHandPoseObservation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  char v13;
  __int128 v14;
  __int128 v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A15A88C8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[48];
  v15 = *((_OWORD *)v12 + 1);
  v14 = *((_OWORD *)v12 + 2);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v15;
  *((_OWORD *)v11 + 2) = v14;
  v11[48] = v13;
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for HumanHandPoseObservation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A15A88C8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  v11[48] = v12[48];
  v14 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  return a1;
}

_BYTE *assignWithTake for HumanHandPoseObservation(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A15A88C8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  v11[48] = v12[48];
  v14 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HumanHandPoseObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A135F508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1A15A88C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for HumanHandPoseObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A135F594(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A15A88C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t sub_1A135F610()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HumanHandPoseObservation.Chirality()
{
  return &type metadata for HumanHandPoseObservation.Chirality;
}

uint64_t getEnumTagSinglePayload for HumanHandPoseObservation.JointName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HumanHandPoseObservation.JointName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_1A135F7A4 + 4 * byte_1A15DBCB1[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_1A135F7D8 + 4 * byte_1A15DBCAC[v4]))();
}

uint64_t sub_1A135F7D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A135F7E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A135F7E8);
  return result;
}

uint64_t sub_1A135F7F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A135F7FCLL);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_1A135F800(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A135F808(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HumanHandPoseObservation.JointName()
{
  return &type metadata for HumanHandPoseObservation.JointName;
}

uint64_t storeEnumTagSinglePayload for HumanHandPoseObservation.JointsGroupName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A135F870 + 4 * byte_1A15DBCBB[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A135F8A4 + 4 * byte_1A15DBCB6[v4]))();
}

uint64_t sub_1A135F8A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A135F8AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A135F8B4);
  return result;
}

uint64_t sub_1A135F8C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A135F8C8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A135F8CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A135F8D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HumanHandPoseObservation.JointsGroupName()
{
  return &type metadata for HumanHandPoseObservation.JointsGroupName;
}

uint64_t storeEnumTagSinglePayload for HumanHandPoseObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A135F93C + 4 * byte_1A15DBCC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A135F970 + 4 * byte_1A15DBCC0[v4]))();
}

uint64_t sub_1A135F970(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A135F978(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A135F980);
  return result;
}

uint64_t sub_1A135F98C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A135F994);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A135F998(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A135F9A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HumanHandPoseObservation.CodingKeys()
{
  return &type metadata for HumanHandPoseObservation.CodingKeys;
}

uint64_t _s6Vision24HumanHandPoseObservationV9ChiralityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A135FA08 + 4 * byte_1A15DBCCF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A135FA3C + 4 * byte_1A15DBCCA[v4]))();
}

uint64_t sub_1A135FA3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A135FA44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A135FA4CLL);
  return result;
}

uint64_t sub_1A135FA58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A135FA60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A135FA64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A135FA6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HumanHandPoseObservation.Chirality.CodingKeys()
{
  return &type metadata for HumanHandPoseObservation.Chirality.CodingKeys;
}

ValueMetadata *type metadata accessor for HumanHandPoseObservation.Chirality.LeftCodingKeys()
{
  return &type metadata for HumanHandPoseObservation.Chirality.LeftCodingKeys;
}

ValueMetadata *type metadata accessor for HumanHandPoseObservation.Chirality.RightCodingKeys()
{
  return &type metadata for HumanHandPoseObservation.Chirality.RightCodingKeys;
}

unint64_t sub_1A135FAAC()
{
  unint64_t result;

  result = qword_1EE637B40[0];
  if (!qword_1EE637B40[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC360, &type metadata for HumanHandPoseObservation.Chirality.CodingKeys);
    atomic_store(result, qword_1EE637B40);
  }
  return result;
}

unint64_t sub_1A135FAF4()
{
  unint64_t result;

  result = qword_1EE637D50[0];
  if (!qword_1EE637D50[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC418, &type metadata for HumanHandPoseObservation.CodingKeys);
    atomic_store(result, qword_1EE637D50);
  }
  return result;
}

unint64_t sub_1A135FB3C()
{
  unint64_t result;

  result = qword_1EE637FE0;
  if (!qword_1EE637FE0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC388, &type metadata for HumanHandPoseObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE637FE0);
  }
  return result;
}

unint64_t sub_1A135FB84()
{
  unint64_t result;

  result = qword_1EE637FE8[0];
  if (!qword_1EE637FE8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC3B0, &type metadata for HumanHandPoseObservation.CodingKeys);
    atomic_store(result, qword_1EE637FE8);
  }
  return result;
}

unint64_t sub_1A135FBCC()
{
  unint64_t result;

  result = qword_1EE638070;
  if (!qword_1EE638070)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC280, &type metadata for HumanHandPoseObservation.Chirality.LeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE638070);
  }
  return result;
}

unint64_t sub_1A135FC14()
{
  unint64_t result;

  result = qword_1EE638078;
  if (!qword_1EE638078)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC2A8, &type metadata for HumanHandPoseObservation.Chirality.LeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE638078);
  }
  return result;
}

unint64_t sub_1A135FC5C()
{
  unint64_t result;

  result = qword_1EE638100;
  if (!qword_1EE638100)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC230, &type metadata for HumanHandPoseObservation.Chirality.RightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE638100);
  }
  return result;
}

unint64_t sub_1A135FCA4()
{
  unint64_t result;

  result = qword_1EE638108[0];
  if (!qword_1EE638108[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC258, &type metadata for HumanHandPoseObservation.Chirality.RightCodingKeys);
    atomic_store(result, qword_1EE638108);
  }
  return result;
}

unint64_t sub_1A135FCEC()
{
  unint64_t result;

  result = qword_1EE638190;
  if (!qword_1EE638190)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC2D0, &type metadata for HumanHandPoseObservation.Chirality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE638190);
  }
  return result;
}

unint64_t sub_1A135FD34()
{
  unint64_t result;

  result = qword_1EE638198[0];
  if (!qword_1EE638198[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DC2F8, &type metadata for HumanHandPoseObservation.Chirality.CodingKeys);
    atomic_store(result, qword_1EE638198);
  }
  return result;
}

uint64_t sub_1A135FD7C(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1A135FDD0(a1);
  return v2;
}

uint64_t sub_1A135FDD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v2 = v1;
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  v44 = a1;
  sub_1A1288044(a1, (uint64_t)&v42);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCDD8);
  v3 = type metadata accessor for DetectTrajectoriesRequest(0);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    v5 = v41 + OBJC_IVAR____TtC6Vision25DetectTrajectoriesRequest_uuid;
    v6 = v2 + OBJC_IVAR____TtC6Vision37DetectTrajectoriesPerformingOperation_uuid;
    v7 = sub_1A15A88C8();
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
    DetectTrajectoriesRequest.regionOfInterest.getter(&v42);
    v9 = v43;
    *(_OWORD *)(v2 + 32) = v42;
    *(_OWORD *)(v2 + 48) = v9;
    *(_QWORD *)&v42 = v41;
    v10 = sub_1A1360250(&qword_1EE5FDE48, (uint64_t)&unk_1A15C73E8);
    v11 = swift_retain();
    v12 = sub_1A12F6C58(v11, v3, v10);
    swift_release();
    *(_QWORD *)(v2 + 24) = v12;
    DetectTrajectoriesRequest.descriptor.getter(&v42);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC6Vision37DetectTrajectoriesPerformingOperation_descriptor) = v42;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600928);
    v14 = sub_1A1360250(&qword_1EE5FDE40, (uint64_t)&unk_1A15C73B0);
    sub_1A128ECE8((uint64_t)sub_1A13601C0, 0, v3, v13, v14, (uint64_t)&v42);
    if (v40)
    {
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      type metadata accessor for DetectTrajectoriesPerformingOperation();
      swift_deallocPartialClassInstance();
    }
    else
    {
      v15 = v42;
      *(_QWORD *)(v2 + 64) = v42;
      v16 = sub_1A15A8BB0();
      v18 = v17;
      *((_QWORD *)&v43 + 1) = sub_1A128DB40(0, &qword_1EE600930);
      *(_QWORD *)&v42 = *((_QWORD *)&v15 + 1);
      swift_beginAccess();
      v39 = (id)v15;
      v38 = *((id *)&v15 + 1);
      sub_1A128D188((uint64_t)&v42, v16, v18);
      swift_endAccess();
      v19 = sub_1A15A8BB0();
      v21 = v20;
      v22 = DetectTrajectoriesRequest.objectMinimumNormalizedRadius.getter();
      v23 = MEMORY[0x1E0DEB188];
      *((_QWORD *)&v43 + 1) = MEMORY[0x1E0DEB188];
      *(float *)&v42 = v22;
      swift_beginAccess();
      sub_1A128D188((uint64_t)&v42, v19, v21);
      swift_endAccess();
      v24 = sub_1A15A8BB0();
      v26 = v25;
      v27 = DetectTrajectoriesRequest.objectMaximumNormalizedRadius.getter();
      *((_QWORD *)&v43 + 1) = v23;
      *(float *)&v42 = v27;
      swift_beginAccess();
      sub_1A128D188((uint64_t)&v42, v24, v26);
      swift_endAccess();
      v37 = sub_1A15A8BB0();
      v29 = v28;
      v30 = DetectTrajectoriesRequest.targetFrameTime.getter();
      v32 = v31;
      v34 = v33;
      v35 = HIDWORD(v31);
      type metadata accessor for CMTime(0);
      *(_QWORD *)&v42 = v30;
      *((_QWORD *)&v42 + 1) = __PAIR64__(v35, v32);
      *(_QWORD *)&v43 = v34;
      *((_QWORD *)&v43 + 1) = v36;
      swift_beginAccess();
      sub_1A128D188((uint64_t)&v42, v37, v29);
      swift_endAccess();

      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v44);
    }
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1A13601C0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id result;
  char v9;

  v4 = (void *)a1[2];
  v5 = objc_allocWithZone((Class)VNTrajectoryRequestState);
  v6 = v4;
  v7 = objc_msgSend(v5, sel_init);
  result = (id)(*(uint64_t (**)(void))(*a1 + 160))();
  if ((v9 & 1) == 0)
    result = objc_msgSend(v7, sel_setTargetImageDimensionForContourDetection_, result);
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t sub_1A1360250(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DetectTrajectoriesRequest(255);
    result = MEMORY[0x1A1B0B774](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DetectTrajectoriesPerformingOperation()
{
  uint64_t result;

  result = qword_1EE638220;
  if (!qword_1EE638220)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A13602CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 128))();
  if (!*(_QWORD *)(v4 + 16))
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1A1288044(v4 + 32, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_8:
    result = sub_1A128DB78((uint64_t)&v10, &qword_1EE5FDE90);
    __break(1u);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD100);
  v5 = type metadata accessor for DetectTrajectoriesRequest(0);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  MEMORY[0x1E0C80A78](result);
  v9[2] = a1;
  v9[3] = v1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FE760);
  v8 = sub_1A1360250(&qword_1EE5FDE40, (uint64_t)&unk_1A15C73B0);
  sub_1A128ECE8((uint64_t)sub_1A1360438, (uint64_t)v9, v5, v7, v8, (uint64_t)&v10);
  result = swift_release();
  if (!v2)
    return v10;
  return result;
}

void sub_1A1360438(char **a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char **v26;
  char v27;
  id v28;
  id v29;
  char *v30;
  char **v31;
  __int128 v32;
  __int128 v33;
  id v34;

  v4 = *(double **)(v1 + 24);
  v5 = (*(uint64_t (**)(void))(**(_QWORD **)(v1 + 16) + 112))();
  if (!v2)
  {
    v6 = (void *)v5;
    v31 = a1;
    v7 = (void *)*((_QWORD *)v4 + 8);
    v8 = v4[4];
    v9 = v4[5];
    v10 = v4[6];
    v11 = v4[7];
    v12 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 152);
    v13 = v12();
    sub_1A128FDD0(v13);
    swift_bridgeObjectRelease();
    v14 = (void *)sub_1A15A8AD8();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(objc_allocWithZone((Class)VNWarningRecorder), sel_init);
    v16 = (void *)sub_1A15A8898();
    *(_QWORD *)&v32 = 0;
    v17 = objc_msgSend(v7, sel_processVNImageBuffer_regionOfInterest_withOptions_warningRecorder_requestUUID_error_, v6, v14, v15, v16, &v32, v8, v9, v10, v11);

    v18 = (void *)v32;
    if (v17)
    {
      sub_1A128DB40(0, &qword_1EE600950);
      v19 = sub_1A15A8C40();
      v20 = v18;

      v21 = sub_1A15A8BB0();
      v23 = v22;
      v24 = v12();
      if (*(_QWORD *)(v24 + 16))
      {
        v25 = sub_1A128DC1C(v21, v23);
        v26 = v31;
        if ((v27 & 1) != 0)
        {
          sub_1A128E764(*(_QWORD *)(v24 + 56) + 32 * v25, (uint64_t)&v32);
        }
        else
        {
          v32 = 0u;
          v33 = 0u;
        }
      }
      else
      {
        v32 = 0u;
        v33 = 0u;
        v26 = v31;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v33 + 1))
      {
        sub_1A128DB40(0, &qword_1EE600930);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v29 = v34;
          objc_msgSend(v34, sel_setTargetImageDimensionForContourDetection_, objc_msgSend(v34, sel_targetImageDimensionForContourDetection));

        }
      }
      else
      {
        sub_1A128DB78((uint64_t)&v32, (uint64_t *)&unk_1EE5FFAB0);
      }
      swift_retain();
      v30 = sub_1A1360914(v19, (unint64_t)v4);
      swift_release();

      swift_bridgeObjectRelease();
      *v26 = v30;
    }
    else
    {
      v28 = (id)v32;
      sub_1A15A8844();

      swift_willThrow();
    }
  }
}

uint64_t sub_1A1360730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v1 = v0 + OBJC_IVAR____TtC6Vision37DetectTrajectoriesPerformingOperation_uuid;
  v2 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1A1360798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
  return sub_1A130E4B8(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v2);
}

uint64_t sub_1A13607F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t sub_1A1360808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A129BC28;
  return sub_1A12E17E8(a1, a2, (uint64_t)&off_1E4537840);
}

uint64_t sub_1A1360870()
{
  return type metadata accessor for DetectTrajectoriesPerformingOperation();
}

uint64_t sub_1A1360878()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

char *sub_1A1360914(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  unsigned __int8 v8;
  id v9;
  void *v10;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;

  if (a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    if (!v4)
      return (char *)v5;
    v21 = MEMORY[0x1E0DEE9D8];
    result = sub_1A1287244(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v21;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 1;
    v8 = *(_BYTE *)(a2 + OBJC_IVAR____TtC6Vision37DetectTrajectoriesPerformingOperation_descriptor);
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x1A1B09470](v7, a1);
      else
        v9 = *(id *)(a1 + 8 * v7 + 32);
      v10 = v9;
      v14 = v8;
      v16 = type metadata accessor for TrajectoryObservation();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15);
      sub_1A1296CB4(v10, &v14, boxed_opaque_existential_1);
      v21 = v5;
      v13 = *(_QWORD *)(v5 + 16);
      v12 = *(_QWORD *)(v5 + 24);
      a2 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        sub_1A1287244((char *)(v12 > 1), v13 + 1, 1);
        v5 = v21;
      }
      ++v7;
      *(_QWORD *)(v5 + 16) = a2;
      sub_1A12880A0(&v15, (_OWORD *)(v5 + 32 * v13 + 32));
      if (v4 == v7)
        return (char *)v5;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = sub_1A15A91B0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t static TrackHomographicImageRegistrationRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static TrackHomographicImageRegistrationRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t TrackHomographicImageRegistrationRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A1360B00()
{
  sub_1A1360CDC();
  return sub_1A15A9474();
}

uint64_t sub_1A1360B28()
{
  sub_1A1360CDC();
  return sub_1A15A9480();
}

uint64_t sub_1A1360B50()
{
  sub_1A1360D20();
  return sub_1A15A9474();
}

uint64_t sub_1A1360B78()
{
  sub_1A1360D20();
  return sub_1A15A9480();
}

uint64_t TrackHomographicImageRegistrationRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600958);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600960);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1360CDC();
  sub_1A15A9468();
  sub_1A1360D20();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A1360CDC()
{
  unint64_t result;

  result = qword_1EE638248;
  if (!qword_1EE638248)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCBAC, &type metadata for TrackHomographicImageRegistrationRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE638248);
  }
  return result;
}

unint64_t sub_1A1360D20()
{
  unint64_t result;

  result = qword_1EE638250[0];
  if (!qword_1EE638250[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCB5C, &type metadata for TrackHomographicImageRegistrationRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE638250);
  }
  return result;
}

uint64_t TrackHomographicImageRegistrationRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t TrackHomographicImageRegistrationRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600968);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600970);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1360CDC();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for TrackHomographicImageRegistrationRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A1360D20();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A1361000(_QWORD *a1)
{
  return TrackHomographicImageRegistrationRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A1361014(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600958);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600960);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1360CDC();
  sub_1A15A9468();
  sub_1A1360D20();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t TrackHomographicImageRegistrationRequest.__allocating_init(_:frameAnalysisSpacing:)(unsigned __int8 *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  int v9;
  uint64_t v10;

  v9 = a5 & 1;
  v10 = swift_allocObject();
  TrackHomographicImageRegistrationRequest.init(_:frameAnalysisSpacing:)(a1, a2, a3, a4, v9);
  return v10;
}

uint64_t TrackHomographicImageRegistrationRequest.init(_:frameAnalysisSpacing:)(unsigned __int8 *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __n128 v27;
  int v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;

  v6 = v5;
  v28 = a5;
  v11 = *(_QWORD *)v6;
  v12 = sub_1A15A88C8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  static NormalizedRect.fullImage.getter(&v29);
  v17 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  v27 = v29;
  v18 = v30;
  v19 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600978);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 56) = 0;
  *(__n128 *)(v20 + 16) = v27;
  *(_QWORD *)(v20 + 32) = v18;
  *(_QWORD *)(v20 + 40) = v19;
  *(_QWORD *)(v20 + 48) = v17;
  *(_QWORD *)(v6 + 40) = v20;
  type metadata accessor for ImageRegistrationState();
  v21 = sub_1A12C9A6C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600720);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v6 + 48) = v22;
  if (v16 == 1)
  {
    v23 = sub_1A12857D8(&qword_1EE600980, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&unk_1A15DC934);
    sub_1A1377CDC(v11, v23, v24);
  }
  if ((v28 & 1) != 0)
  {
    a2 = *MEMORY[0x1E0CA2E68];
    LODWORD(a3) = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
    LODWORD(v25) = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
    a4 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  }
  else
  {
    v25 = HIDWORD(a3);
  }
  *(_QWORD *)(v6 + 16) = a2;
  *(_DWORD *)(v6 + 24) = a3;
  *(_DWORD *)(v6 + 28) = v25;
  *(_QWORD *)(v6 + 32) = a4;
  sub_1A15A88BC();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v6 + OBJC_IVAR____TtC6Vision40TrackHomographicImageRegistrationRequest_uuid, v15, v12);
  return v6;
}

void TrackHomographicImageRegistrationRequest.regionOfInterest.getter(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(v1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 56));
  v4 = *(_OWORD *)(v3 + 32);
  *a1 = *(_OWORD *)(v3 + 16);
  a1[1] = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 56));
}

void TrackHomographicImageRegistrationRequest.regionOfInterest.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v5 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(v1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 56));
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 56));
}

void (*TrackHomographicImageRegistrationRequest.regionOfInterest.modify(_QWORD *a1))(__int128 **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *(_QWORD *)(v1 + 40);
  v3[4] = v4;
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 56));
  v5 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)v3 = *(_OWORD *)(v4 + 16);
  *((_OWORD *)v3 + 1) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 56));
  return sub_1A128BD18;
}

uint64_t TrackHomographicImageRegistrationRequest.minimumLatencyFrameCount.getter()
{
  return 2;
}

uint64_t TrackHomographicImageRegistrationRequest.frameAnalysisSpacing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1A1361484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for TrackHomographicImageRegistrationRequest();
  v1 = sub_1A12857D8(&qword_1EE600980, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&unk_1A15DC934);
  result = sub_1A1378184(v0, v1);
  qword_1EE638238 = result;
  return result;
}

uint64_t static TrackHomographicImageRegistrationRequest.supportedRevisions.getter()
{
  if (qword_1EE638230 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void TrackHomographicImageRegistrationRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = -48;
}

uint64_t type metadata accessor for TrackHomographicImageRegistrationRequest()
{
  uint64_t result;

  result = qword_1EE638A60;
  if (!qword_1EE638A60)
    return swift_getSingletonMetadata();
  return result;
}

int *sub_1A1361560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6009F0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(7, 0, 11);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(7, 0, 11);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(7, 0, 11);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for TrackHomographicImageRegistrationRequest.Revision, v0 + 32);
  qword_1EE6437D8 = v0;
  return result;
}

uint64_t TrackHomographicImageRegistrationRequest.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC6Vision40TrackHomographicImageRegistrationRequest_uuid;
  v2 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t TrackHomographicImageRegistrationRequest.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC6Vision40TrackHomographicImageRegistrationRequest_uuid;
  v2 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t TrackHomographicImageRegistrationRequest.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A12857D8(&qword_1EE600988, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&protocol conformance descriptor for TrackHomographicImageRegistrationRequest);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

void (*sub_1A1361734(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TrackHomographicImageRegistrationRequest.regionOfInterest.modify(v2);
  return sub_1A128C384;
}

uint64_t sub_1A136177C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A12857D8(&qword_1EE5FDEA8, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&unk_1A15DC950);
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A13617BC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = sub_1A12857D8(&qword_1EE600980, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&unk_1A15DC934);
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A1361814(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1A12857D8(&qword_1EE600980, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&unk_1A15DC934);
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A136186C(_BYTE *a1@<X8>)
{
  *a1 = -48;
}

uint64_t sub_1A1361878(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A12857D8(&qword_1EE600980, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&unk_1A15DC934);
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A13618B8(uint64_t a1, uint64_t a2)
{
  sub_1A12857D8(&qword_1EE6009D8, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&protocol conformance descriptor for TrackHomographicImageRegistrationRequest);
  return StatefulRequest.hash(into:)(a1, a2);
}

uint64_t sub_1A1361908(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A12857D8(&qword_1EE6009D8, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&protocol conformance descriptor for TrackHomographicImageRegistrationRequest);
  return static StatefulRequest.== infix(_:_:)(a1, a2, v2);
}

uint64_t sub_1A136195C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC6Vision40TrackHomographicImageRegistrationRequest_uuid;
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A13619A0()
{
  if (qword_1EE638240 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A13619E0()
{
  return 3;
}

uint64_t sub_1A13619F0(uint64_t a1)
{
  sub_1A12857D8(&qword_1EE6009D0, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&unk_1A15DC918);
  return sub_1A128EEB4(a1) & 1;
}

uint64_t sub_1A1361A4C()
{
  return sub_1A15A8BB0();
}

unint64_t sub_1A1361A60()
{
  unint64_t result;

  result = qword_1EE600990;
  if (!qword_1EE600990)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackHomographicImageRegistrationRequest.Revision, &type metadata for TrackHomographicImageRegistrationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600990);
  }
  return result;
}

uint64_t sub_1A1361AA4(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FD9C8, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&protocol conformance descriptor for TrackHomographicImageRegistrationRequest);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A1361AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A1361B90(a1, a2, a3, &qword_1EE5FDB28, (uint64_t)&protocol conformance descriptor for TrackHomographicImageRegistrationRequest, &qword_1EE600988, (uint64_t)&protocol conformance descriptor for TrackHomographicImageRegistrationRequest);
}

uint64_t sub_1A1361B04()
{
  return sub_1A12857D8(&qword_1EE6009C8, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&protocol conformance descriptor for TrackHomographicImageRegistrationRequest);
}

uint64_t sub_1A1361B30(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE6009D0, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&unk_1A15DC918);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A1361B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A1361B90(a1, a2, a3, &qword_1EE600980, (uint64_t)&unk_1A15DC934, &qword_1EE6009D8, (uint64_t)&protocol conformance descriptor for TrackHomographicImageRegistrationRequest);
}

uint64_t sub_1A1361B90(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12857D8(a4, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, a5);
  result = sub_1A12857D8(a6, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, a7);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A1361BF0()
{
  unint64_t result;

  result = qword_1EE6009E0;
  if (!qword_1EE6009E0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for TrackHomographicImageRegistrationRequest.Revision, &type metadata for TrackHomographicImageRegistrationRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE6009E0);
  }
  return result;
}

uint64_t sub_1A1361C34()
{
  return sub_1A12857D8(&qword_1EE6009E8, (uint64_t (*)(uint64_t))type metadata accessor for ImageHomographicAlignmentObservation, (uint64_t)&unk_1A15D5BC8);
}

uint64_t sub_1A1361C60(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE600980, (uint64_t (*)(uint64_t))type metadata accessor for TrackHomographicImageRegistrationRequest, (uint64_t)&unk_1A15DC934);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A1361C9C()
{
  return type metadata accessor for TrackHomographicImageRegistrationRequest();
}

uint64_t sub_1A1361CA4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for TrackHomographicImageRegistrationRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TrackHomographicImageRegistrationRequest.__allocating_init(_:frameAnalysisSpacing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v5 + 120))(a1, a2, a3, a4, a5 & 1);
}

ValueMetadata *type metadata accessor for TrackHomographicImageRegistrationRequest.Revision()
{
  return &type metadata for TrackHomographicImageRegistrationRequest.Revision;
}

ValueMetadata *type metadata accessor for TrackHomographicImageRegistrationRequest.Configuration()
{
  return &type metadata for TrackHomographicImageRegistrationRequest.Configuration;
}

uint64_t _s6Vision40TrackHomographicImageRegistrationRequestC8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1361DB4 + 4 * byte_1A15DC6F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1361DD4 + 4 * byte_1A15DC6F5[v4]))();
}

_BYTE *sub_1A1361DB4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1361DD4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1361DDC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1361DE4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1361DEC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1361DF4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TrackHomographicImageRegistrationRequest.Revision.CodingKeys()
{
  return &type metadata for TrackHomographicImageRegistrationRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for TrackHomographicImageRegistrationRequest.Revision.Revision1CodingKeys()
{
  return &type metadata for TrackHomographicImageRegistrationRequest.Revision.Revision1CodingKeys;
}

unint64_t sub_1A1361E24()
{
  unint64_t result;

  result = qword_1EE638C70[0];
  if (!qword_1EE638C70[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCB34, &type metadata for TrackHomographicImageRegistrationRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE638C70);
  }
  return result;
}

unint64_t sub_1A1361E6C()
{
  unint64_t result;

  result = qword_1EE638D80;
  if (!qword_1EE638D80)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCA54, &type metadata for TrackHomographicImageRegistrationRequest.Revision.Revision1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE638D80);
  }
  return result;
}

unint64_t sub_1A1361EB4()
{
  unint64_t result;

  result = qword_1EE638D88[0];
  if (!qword_1EE638D88[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCA7C, &type metadata for TrackHomographicImageRegistrationRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE638D88);
  }
  return result;
}

unint64_t sub_1A1361EFC()
{
  unint64_t result;

  result = qword_1EE638E10;
  if (!qword_1EE638E10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCAA4, &type metadata for TrackHomographicImageRegistrationRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE638E10);
  }
  return result;
}

unint64_t sub_1A1361F44()
{
  unint64_t result;

  result = qword_1EE638E18[0];
  if (!qword_1EE638E18[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCACC, &type metadata for TrackHomographicImageRegistrationRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE638E18);
  }
  return result;
}

uint64_t Session.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(id))(v0 + 88))(objc_msgSend(objc_allocWithZone((Class)VNSession), sel_init));
}

uint64_t sub_1A1361FB8(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t sub_1A1361FE8()
{
  id v0;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_globalSession);
  type metadata accessor for Session();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  qword_1EE638EA8 = result;
  return result;
}

uint64_t *sub_1A1362040()
{
  if (qword_1EE638EA0 != -1)
    swift_once();
  return &qword_1EE638EA8;
}

uint64_t static Session.global.getter()
{
  if (qword_1EE638EA0 != -1)
    swift_once();
  return swift_retain();
}

id sub_1A13620C0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(void **)(v1 + 16);
  sub_1A128FDD0(a1);
  v3 = (void *)sub_1A15A8AD8();
  swift_bridgeObjectRelease();
  v8[0] = 0;
  v4 = objc_msgSend(v2, sel_trackerResourcesConfiguredWithOptions_error_, v3, v8);

  if (v4)
  {
    v5 = v8[0];
  }
  else
  {
    v6 = v8[0];
    sub_1A15A8844();

    swift_willThrow();
  }
  return v4;
}

id sub_1A13621B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = *(void **)(v3 + 16);
  v6 = (void *)sub_1A15A8B8C();
  sub_1A128FDD0(a3);
  v7 = (void *)sub_1A15A8AD8();
  swift_bridgeObjectRelease();
  v12[0] = 0;
  v8 = objc_msgSend(v5, sel_detectorOfType_configuredWithOptions_error_, v6, v7, v12);

  if (v8)
  {
    v9 = v12[0];
  }
  else
  {
    v10 = v12[0];
    sub_1A15A8844();

    swift_willThrow();
  }
  return v8;
}

id sub_1A13622CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t ObjCClassFromMetadata;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = *(void **)(v2 + 16);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  sub_1A128FDD0(a2);
  v6 = (void *)sub_1A15A8AD8();
  swift_bridgeObjectRelease();
  v11[0] = 0;
  v7 = objc_msgSend(v4, sel_detectorOfClass_configuredWithOptions_error_, ObjCClassFromMetadata, v6, v11);

  if (v7)
  {
    v8 = v11[0];
  }
  else
  {
    v9 = v11[0];
    sub_1A15A8844();

    swift_willThrow();
  }
  return v7;
}

id sub_1A13623E0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_releaseCachedResources);
}

uint64_t Session.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t Session.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Session()
{
  return objc_opt_self();
}

uint64_t method lookup function for Session()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Session.releaseCachedResources()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t static GenerateObjectnessBasedSaliencyImageRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static GenerateObjectnessBasedSaliencyImageRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t GenerateObjectnessBasedSaliencyImageRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A136249C()
{
  sub_1A1362678();
  return sub_1A15A9474();
}

uint64_t sub_1A13624C4()
{
  sub_1A1362678();
  return sub_1A15A9480();
}

uint64_t sub_1A13624EC()
{
  sub_1A13626BC();
  return sub_1A15A9474();
}

uint64_t sub_1A1362514()
{
  sub_1A13626BC();
  return sub_1A15A9480();
}

uint64_t GenerateObjectnessBasedSaliencyImageRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6009F8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A00);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1362678();
  sub_1A15A9468();
  sub_1A13626BC();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A1362678()
{
  unint64_t result;

  result = qword_1EE638EC8;
  if (!qword_1EE638EC8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD03C, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE638EC8);
  }
  return result;
}

unint64_t sub_1A13626BC()
{
  unint64_t result;

  result = qword_1EE638ED0[0];
  if (!qword_1EE638ED0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCFEC, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE638ED0);
  }
  return result;
}

uint64_t GenerateObjectnessBasedSaliencyImageRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t GenerateObjectnessBasedSaliencyImageRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A08);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A10);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1362678();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A13626BC();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A136299C(_QWORD *a1)
{
  return GenerateObjectnessBasedSaliencyImageRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A13629B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6009F8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A00);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1362678();
  sub_1A15A9468();
  sub_1A13626BC();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double GenerateObjectnessBasedSaliencyImageRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  __n128 v8;
  __n128 v9[3];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(v9);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A1362C10();
    sub_1A1377CDC((uint64_t)&type metadata for GenerateObjectnessBasedSaliencyImageRequest, v5, v6);
  }
  result = v9[0].n128_f64[0];
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  a2[2].n128_u64[0] = v4;
  return result;
}

__n128 GenerateObjectnessBasedSaliencyImageRequest.regionOfInterest.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 GenerateObjectnessBasedSaliencyImageRequest.regionOfInterest.setter(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*GenerateObjectnessBasedSaliencyImageRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A1362B8C()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A1362C10();
  result = sub_1A1378184((uint64_t)&type metadata for GenerateObjectnessBasedSaliencyImageRequest, v0);
  qword_1EE638EB8 = result;
  return result;
}

uint64_t static GenerateObjectnessBasedSaliencyImageRequest.supportedRevisions.getter()
{
  if (qword_1EE638EB0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void GenerateObjectnessBasedSaliencyImageRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = -88;
}

unint64_t sub_1A1362C10()
{
  unint64_t result;

  result = qword_1EE600A18;
  if (!qword_1EE600A18)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCE04, &type metadata for GenerateObjectnessBasedSaliencyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600A18);
  }
  return result;
}

int *sub_1A1362C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A80);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(7, 0, 20);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(7, 0, 20);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(7, 0, 20);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision, v0 + 32);
  qword_1EE6437E8 = v0;
  return result;
}

uint64_t GenerateObjectnessBasedSaliencyImageRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static GenerateObjectnessBasedSaliencyImageRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  CGSize v4;
  CGSize v5;
  CGRect v7;
  CGRect v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(CGSize *)(a1 + 16);
  v8.origin = *(CGPoint *)a1;
  v8.size = v4;
  v5 = *(CGSize *)(a2 + 16);
  v7.origin = *(CGPoint *)a2;
  v7.size = v5;
  if (static NormalizedRect.== infix(_:_:)(&v8, &v7))
    return sub_1A12903B0(v2, v3);
  else
    return 0;
}

uint64_t GenerateObjectnessBasedSaliencyImageRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 32);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A1362E84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A136327C();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A1362EAC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A1362C10();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A1362EEC(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A1362C10();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1362F2C(_BYTE *a1@<X8>)
{
  *a1 = -88;
}

uint64_t sub_1A1362F38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1362C10();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1362F60()
{
  if (qword_1EE638EC0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A1362FA0(uint64_t a1, uint64_t a2)
{
  sub_1A12B32A8();
  return sub_1A1377AB4(a1, a2);
}

void sub_1A1362FD8(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *);
  id v9;
  void (*v10)(_BYTE *, _QWORD);
  _BYTE v11[32];
  _QWORD v12[4];

  v3 = objc_msgSend(objc_allocWithZone((Class)VNCoreSceneUnderstandingDetectorImageSaliencyOConfiguration), sel_initWithObservationsRecipient_, a2);
  v4 = sub_1A15A8BB0();
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD5E8);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A15C5A00;
  *(_QWORD *)(v7 + 32) = v3;
  v12[0] = v7;
  sub_1A15A8C4C();
  v12[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A20);
  v8 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200);
  v9 = v3;
  v10 = (void (*)(_BYTE *, _QWORD))v8(v11);
  sub_1A128D188((uint64_t)v12, v4, v6);
  v10(v11, 0);

}

void sub_1A13630D8(uint64_t a1, uint64_t a2)
{
  sub_1A1362FD8(a1, a2);
}

unint64_t sub_1A13630F0()
{
  unint64_t result;

  result = qword_1EE600A28;
  if (!qword_1EE600A28)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateObjectnessBasedSaliencyImageRequest.Revision, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600A28);
  }
  return result;
}

unint64_t sub_1A1363134(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6DB4();
  result = sub_1A1363160();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A1363160()
{
  unint64_t result;

  result = qword_1EE600A60;
  if (!qword_1EE600A60)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateObjectnessBasedSaliencyImageRequest, &type metadata for GenerateObjectnessBasedSaliencyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600A60);
  }
  return result;
}

unint64_t sub_1A13631A8()
{
  unint64_t result;

  result = qword_1EE600A68;
  if (!qword_1EE600A68)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateObjectnessBasedSaliencyImageRequest, &type metadata for GenerateObjectnessBasedSaliencyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600A68);
  }
  return result;
}

unint64_t sub_1A13631F0()
{
  unint64_t result;

  result = qword_1EE600A70;
  if (!qword_1EE600A70)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for GenerateObjectnessBasedSaliencyImageRequest.Revision, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600A70);
  }
  return result;
}

unint64_t sub_1A1363234(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B32A8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A1363258(uint64_t a1)
{
  unint64_t result;

  result = sub_1A136327C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A136327C()
{
  unint64_t result;

  result = qword_1EE600A78;
  if (!qword_1EE600A78)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCE3C, &type metadata for GenerateObjectnessBasedSaliencyImageRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600A78);
  }
  return result;
}

unint64_t sub_1A13632C0(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1362C10();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for GenerateObjectnessBasedSaliencyImageRequest()
{
  return &type metadata for GenerateObjectnessBasedSaliencyImageRequest;
}

ValueMetadata *type metadata accessor for GenerateObjectnessBasedSaliencyImageRequest.Revision()
{
  return &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision;
}

uint64_t _s6Vision43GenerateObjectnessBasedSaliencyImageRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1363348 + 4 * byte_1A15DCC30[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1363368 + 4 * byte_1A15DCC35[v4]))();
}

_BYTE *sub_1A1363348(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1363368(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1363370(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1363378(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1363380(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1363388(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GenerateObjectnessBasedSaliencyImageRequest.Revision.CodingKeys()
{
  return &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for GenerateObjectnessBasedSaliencyImageRequest.Revision.Revision2CodingKeys()
{
  return &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision.Revision2CodingKeys;
}

unint64_t sub_1A13633B8()
{
  unint64_t result;

  result = qword_1EE639760[0];
  if (!qword_1EE639760[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCFC4, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE639760);
  }
  return result;
}

unint64_t sub_1A1363400()
{
  unint64_t result;

  result = qword_1EE639870;
  if (!qword_1EE639870)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCEE4, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision.Revision2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE639870);
  }
  return result;
}

unint64_t sub_1A1363448()
{
  unint64_t result;

  result = qword_1EE639878;
  if (!qword_1EE639878)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCF0C, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision.Revision2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE639878);
  }
  return result;
}

unint64_t sub_1A1363490()
{
  unint64_t result;

  result = qword_1EE639900;
  if (!qword_1EE639900)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCF34, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE639900);
  }
  return result;
}

unint64_t sub_1A13634D8()
{
  unint64_t result;

  result = qword_1EE639908[0];
  if (!qword_1EE639908[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DCF5C, &type metadata for GenerateObjectnessBasedSaliencyImageRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE639908);
  }
  return result;
}

uint64_t sub_1A1363520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 80) = a1;
  *(_QWORD *)(v6 + 16) = a2;
  sub_1A128465C(a3, v6 + 24);
  return v6;
}

id sub_1A1363578()
{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(v0 + 16);
  if (v1)
    return v1;
  sub_1A1288000();
  swift_allocError();
  *(_QWORD *)v3 = 0xD000000000000028;
  *(_QWORD *)(v3 + 8) = 0x80000001A15FE790;
  *(_BYTE *)(v3 + 16) = 0;
  return (id)swift_willThrow();
}

uint64_t sub_1A13635F0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RequestPerformingContext()
{
  return objc_opt_self();
}

uint64_t static DetectHumanBodyPoseRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static DetectHumanBodyPoseRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t DetectHumanBodyPoseRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A1363670()
{
  sub_1A136384C();
  return sub_1A15A9474();
}

uint64_t sub_1A1363698()
{
  sub_1A136384C();
  return sub_1A15A9480();
}

uint64_t sub_1A13636C0()
{
  sub_1A1363890();
  return sub_1A15A9474();
}

uint64_t sub_1A13636E8()
{
  sub_1A1363890();
  return sub_1A15A9480();
}

uint64_t DetectHumanBodyPoseRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A88);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A90);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136384C();
  sub_1A15A9468();
  sub_1A1363890();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A136384C()
{
  unint64_t result;

  result = qword_1EE6399A8;
  if (!qword_1EE6399A8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD4CC, &type metadata for DetectHumanBodyPoseRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6399A8);
  }
  return result;
}

unint64_t sub_1A1363890()
{
  unint64_t result;

  result = qword_1EE6399B0[0];
  if (!qword_1EE6399B0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD47C, &type metadata for DetectHumanBodyPoseRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE6399B0);
  }
  return result;
}

uint64_t DetectHumanBodyPoseRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectHumanBodyPoseRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A98);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600AA0);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136384C();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for DetectHumanBodyPoseRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A1363890();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A1363B70(_QWORD *a1)
{
  return DetectHumanBodyPoseRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A1363B84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A88);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600A90);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136384C();
  sub_1A15A9468();
  sub_1A1363890();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double DetectHumanBodyPoseRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  __n128 v8;
  __n128 v9[3];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(v9);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A1363E24();
    sub_1A1377CDC((uint64_t)&type metadata for DetectHumanBodyPoseRequest, v5, v6);
  }
  result = v9[0].n128_f64[0];
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  a2[2].n128_u8[0] = 1;
  a2[2].n128_u64[1] = v4;
  return result;
}

void *DetectHumanBodyPoseRequest.supportedJointNames.getter()
{
  return &unk_1E4534020;
}

void *DetectHumanBodyPoseRequest.supportedJointsGroupNames.getter()
{
  return &unk_1E4534058;
}

__n128 DetectHumanBodyPoseRequest.regionOfInterest.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 DetectHumanBodyPoseRequest.regionOfInterest.setter(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*DetectHumanBodyPoseRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A1363D80()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A1363E24();
  result = sub_1A1378184((uint64_t)&type metadata for DetectHumanBodyPoseRequest, v0);
  qword_1EE639998 = result;
  return result;
}

uint64_t static DetectHumanBodyPoseRequest.supportedRevisions.getter()
{
  if (qword_1EE639990 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t DetectHumanBodyPoseRequest.detectsHands.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t DetectHumanBodyPoseRequest.detectsHands.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*DetectHumanBodyPoseRequest.detectsHands.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

void DetectHumanBodyPoseRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = 88;
}

unint64_t sub_1A1363E24()
{
  unint64_t result;

  result = qword_1EE600AA8;
  if (!qword_1EE600AA8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD2C4, &type metadata for DetectHumanBodyPoseRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600AA8);
  }
  return result;
}

int *sub_1A1363E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600B18);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(8, 0, 9);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(8, 0, 9);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(8, 0, 9);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for DetectHumanBodyPoseRequest.Revision, v0 + 32);
  qword_1EE6437F0 = v0;
  return result;
}

BOOL sub_1A1363F1C()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  _BOOL8 v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  _BYTE v18[15];
  char v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6001D0);
  MEMORY[0x1E0C80A78](v1);
  v3 = &v18[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_1A15A8A84();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v10 = &v18[-v9];
  v11 = *((_BYTE *)v0 + 32);
  v12 = *((_QWORD *)v0 + 5);
  v13 = v0[1];
  v20 = *v0;
  v21 = v13;
  v22 = v11;
  v23 = v12;
  v19 = 0;
  v14 = sub_1A1363E24();
  sub_1A1378480(&v19, (uint64_t)&type metadata for DetectHumanBodyPoseRequest, v14, (uint64_t)v3);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_1A128DB78((uint64_t)v3, (uint64_t *)&unk_1EE6001D0);
    return 0;
  }
  else
  {
    v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32);
    v16(v10, v3, v4);
    v16(v7, v10, v4);
    v15 = (*(unsigned int (**)(_BYTE *, uint64_t))(v5 + 88))(v7, v4) == *MEMORY[0x1E0C9E6F0];
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v15;
}

uint64_t DetectHumanBodyPoseRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  sub_1A15A93FC();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t DetectHumanBodyPoseRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 40);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  sub_1A15A93FC();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A13641E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A13646F4();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A136420C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A1363E24();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A136424C(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A1363E24();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A136428C(_BYTE *a1@<X8>)
{
  *a1 = 88;
}

uint64_t sub_1A1364298(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1363E24();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A13642C4(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  sub_1A15A93FC();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A136434C()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 40);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  sub_1A15A93FC();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A13643FC()
{
  if (qword_1EE6399A0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A136443C()
{
  return sub_1A15A8BB0();
}

uint64_t sub_1A1364460(uint64_t a1, uint64_t a2)
{
  sub_1A12B3540();
  return sub_1A1377AB4(a1, a2);
}

unint64_t sub_1A1364498(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _OWORD v30[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = *((_BYTE *)v1 + 32);
  v8 = v1[5];
  v9 = sub_1A13646F4();
  v10 = sub_1A12F6C58(a1, (uint64_t)&type metadata for DetectHumanBodyPoseRequest, v9);
  *(_QWORD *)&v31 = v3;
  *((_QWORD *)&v31 + 1) = v4;
  v32 = v5;
  v33 = v6;
  v34 = v7;
  v35 = v8;
  v11 = sub_1A12F6658((uint64_t)&type metadata for DetectHumanBodyPoseRequest, v9);
  v13 = v12;
  v14 = sub_1A15A8BB0();
  if (v13)
  {
    if (v14 == v11 && v13 == v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = sub_1A15A9354();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
        return v10;
    }
    v18 = sub_1A15A8BB0();
    v20 = v19;
    *(_QWORD *)&v31 = v3;
    *((_QWORD *)&v31 + 1) = v4;
    v32 = v5;
    v34 = v7;
    v35 = v8;
    v21 = sub_1A1363F1C();
    v33 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v31) = v21;
    sub_1A12880A0(&v31, v30);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1A128E3E8(v30, v18, v20, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = sub_1A15A8BB0();
    v25 = v24;
    v26 = sub_1A128DB40(0, (unint64_t *)&qword_1EE6001A0);
    v27 = sub_1A15A8FE8();
    v33 = v26;
    *(_QWORD *)&v31 = v27;
    sub_1A12880A0(&v31, v30);
    v28 = swift_isUniquelyReferenced_nonNull_native();
    sub_1A128E3E8(v30, v23, v25, v28);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v10;
}

id sub_1A13646D0(uint64_t a1)
{
  return sub_1A1364738(a1);
}

uint64_t sub_1A13646E4()
{
  return 3737841664;
}

unint64_t sub_1A13646F4()
{
  unint64_t result;

  result = qword_1EE600AB0;
  if (!qword_1EE600AB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD2E0, &type metadata for DetectHumanBodyPoseRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600AB0);
  }
  return result;
}

id sub_1A1364738(uint64_t a1)
{
  void *ObjCClassFromMetadata;
  id result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_BYTE *, _QWORD);
  _BYTE v8[32];
  _QWORD v9[4];

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1A128DB40(0, &qword_1EE600B10);
  result = objc_msgSend(ObjCClassFromMetadata, sel_isSubclassOfClass_, swift_getObjCClassFromMetadata());
  if ((_DWORD)result)
  {
    v4 = sub_1A15A8BB0();
    v6 = v5;
    v9[3] = sub_1A128DB40(0, (unint64_t *)&qword_1EE6001A0);
    v9[0] = sub_1A15A8FE8();
    v7 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200))(v8);
    sub_1A128D188((uint64_t)v9, v4, v6);
    return (id)v7(v8, 0);
  }
  return result;
}

unint64_t sub_1A136483C()
{
  unint64_t result;

  result = qword_1EE600AB8;
  if (!qword_1EE600AB8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPoseRequest.Revision, &type metadata for DetectHumanBodyPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600AB8);
  }
  return result;
}

unint64_t sub_1A1364880(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B3540();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A13648A4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6F90();
  result = sub_1A13648D0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A13648D0()
{
  unint64_t result;

  result = qword_1EE600AF0;
  if (!qword_1EE600AF0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPoseRequest, &type metadata for DetectHumanBodyPoseRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600AF0);
  }
  return result;
}

unint64_t sub_1A1364918()
{
  unint64_t result;

  result = qword_1EE600AF8;
  if (!qword_1EE600AF8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPoseRequest, &type metadata for DetectHumanBodyPoseRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600AF8);
  }
  return result;
}

unint64_t sub_1A1364960()
{
  unint64_t result;

  result = qword_1EE600B00;
  if (!qword_1EE600B00)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHumanBodyPoseRequest.Revision, &type metadata for DetectHumanBodyPoseRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600B00);
  }
  return result;
}

uint64_t sub_1A13649A4()
{
  return sub_1A12857D8(&qword_1EE600B08, (uint64_t (*)(uint64_t))type metadata accessor for HumanBodyPoseObservation, (uint64_t)&unk_1A15CA624);
}

unint64_t sub_1A13649D0(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1363E24();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for DetectHumanBodyPoseRequest()
{
  return &type metadata for DetectHumanBodyPoseRequest;
}

ValueMetadata *type metadata accessor for DetectHumanBodyPoseRequest.Revision()
{
  return &type metadata for DetectHumanBodyPoseRequest.Revision;
}

uint64_t _s6Vision26DetectHumanBodyPoseRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1364A58 + 4 * asc_1A15DD0F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1364A78 + 4 * byte_1A15DD0F5[v4]))();
}

_BYTE *sub_1A1364A58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1364A78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1364A80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1364A88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1364A90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1364A98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DetectHumanBodyPoseRequest.Revision.CodingKeys()
{
  return &type metadata for DetectHumanBodyPoseRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectHumanBodyPoseRequest.Revision.Revision2CodingKeys()
{
  return &type metadata for DetectHumanBodyPoseRequest.Revision.Revision2CodingKeys;
}

unint64_t sub_1A1364AC8()
{
  unint64_t result;

  result = qword_1EE63A1C0[0];
  if (!qword_1EE63A1C0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD454, &type metadata for DetectHumanBodyPoseRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE63A1C0);
  }
  return result;
}

unint64_t sub_1A1364B10()
{
  unint64_t result;

  result = qword_1EE63A2D0;
  if (!qword_1EE63A2D0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD374, &type metadata for DetectHumanBodyPoseRequest.Revision.Revision2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63A2D0);
  }
  return result;
}

unint64_t sub_1A1364B58()
{
  unint64_t result;

  result = qword_1EE63A2D8[0];
  if (!qword_1EE63A2D8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD39C, &type metadata for DetectHumanBodyPoseRequest.Revision.Revision2CodingKeys);
    atomic_store(result, qword_1EE63A2D8);
  }
  return result;
}

unint64_t sub_1A1364BA0()
{
  unint64_t result;

  result = qword_1EE63A360;
  if (!qword_1EE63A360)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD3C4, &type metadata for DetectHumanBodyPoseRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63A360);
  }
  return result;
}

unint64_t sub_1A1364BE8()
{
  unint64_t result;

  result = qword_1EE63A368[0];
  if (!qword_1EE63A368[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD3EC, &type metadata for DetectHumanBodyPoseRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE63A368);
  }
  return result;
}

double OpticalFlowObservation.size.getter()
{
  uint64_t v0;
  __CVBuffer *v1;
  int64_t Width;

  v1 = *(__CVBuffer **)(v0 + *(int *)(type metadata accessor for OpticalFlowObservation() + 32));
  Width = CVPixelBufferGetWidth(v1);
  CVPixelBufferGetHeight(v1);
  return (double)Width;
}

uint64_t type metadata accessor for OpticalFlowObservation()
{
  uint64_t result;

  result = qword_1EE63A7F0;
  if (!qword_1EE63A7F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t OpticalFlowObservation.pixelFormat.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for OpticalFlowObservation();
  return CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v0 + *(int *)(v1 + 32)));
}

uint64_t OpticalFlowObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

float OpticalFlowObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for OpticalFlowObservation() + 20));
}

__n128 OpticalFlowObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for OpticalFlowObservation() + 24);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t OpticalFlowObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for OpticalFlowObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t OpticalFlowObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  __CVBuffer *v2;
  uint64_t v3;

  sub_1A15A9090();
  sub_1A15A8BEC();
  v1 = type metadata accessor for OpticalFlowObservation();
  v2 = *(__CVBuffer **)(v0 + *(int *)(v1 + 32));
  CVPixelBufferGetWidth(v2);
  CVPixelBufferGetHeight(v2);
  sub_1A15A8E2C();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  CVPixelBufferGetWidth(v2);
  CVPixelBufferGetHeight(v2);
  sub_1A15A8E2C();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  CVPixelBufferGetPixelFormatType(v2);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v3 = sub_1A12857D8(&qword_1EE600B20, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
  sub_1A132D4B4(v1, (uint64_t)&off_1E4531110, v3);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

uint64_t OpticalFlowObservation.withUnsafePointer<A>(_:)(void (*a1)(void))
{
  uint64_t v1;
  __CVBuffer *v3;
  uint64_t result;

  v3 = *(__CVBuffer **)(v1 + *(int *)(type metadata accessor for OpticalFlowObservation() + 32));
  CVPixelBufferLockBaseAddress(v3, 1uLL);
  if (CVPixelBufferGetBaseAddress(v3))
  {
    a1();
    return CVPixelBufferUnlockBaseAddress(v3, 1uLL);
  }
  else
  {
    result = sub_1A15A91A4();
    __break(1u);
  }
  return result;
}

Swift::tuple_Float_Float __swiftcall OpticalFlowObservation.flow(at:)(Vision::NormalizedPoint at)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __CVBuffer *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  __CVBuffer *v16;
  int64_t Width;
  unint64_t v18;
  CGPoint v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  __CVBuffer *v24;
  int64_t v25;
  double v26;
  __CVBuffer *v27;
  double Height;
  int64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  OSType PixelFormatType;
  uint64_t v34;
  uint64_t v37;
  Swift::tuple_Float_Float result;
  _BYTE v45[14];
  char v46;
  char v47;
  __int128 v48;

  v3 = v2;
  v4 = v1;
  v5 = type metadata accessor for OpticalFlowObservation();
  MEMORY[0x1E0C80A78](v5);
  v7 = (__CVBuffer *)&v45[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v10 = &v45[-v9];
  MEMORY[0x1E0C80A78](v11);
  v13 = &v45[-v12];
  v48 = *v4;
  v15 = *(int *)(v14 + 32);
  v16 = *(__CVBuffer **)(v3 + v15);
  Width = CVPixelBufferGetWidth(v16);
  *(double *)&v18 = (double)(uint64_t)CVPixelBufferGetHeight(v16);
  sub_1A128B1FC(&v47);
  v46 = v47;
  v19 = NormalizedPoint.toImageCoordinates(_:origin:)((CGSize)__PAIR128__(v18, (double)Width), (Vision::CoordinateOrigin)&v46);
  v20 = round(v19.x);
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v21 = round(v19.y);
  if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v22 = (uint64_t)v20;
  sub_1A1365498(v3, (uint64_t)v13);
  sub_1A1365498((uint64_t)v13, (uint64_t)v10);
  if (v22 < 0)
    goto LABEL_43;
  v23 = (uint64_t)v21;
  if ((uint64_t)v21 < 0)
    goto LABEL_43;
  v24 = *(__CVBuffer **)&v10[*(int *)(v5 + 32)];
  v25 = CVPixelBufferGetWidth(v24);
  CVPixelBufferGetHeight(v24);
  v26 = (double)v25;
  sub_1A13654DC((uint64_t)v10);
  if ((~COERCE__INT64((double)v25) & 0x7FF0000000000000) == 0)
    goto LABEL_32;
  if (v26 <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sub_1A1365498((uint64_t)v13, (uint64_t)v7);
  if (v22 >= (uint64_t)v26)
  {
LABEL_44:
    sub_1A13654DC((uint64_t)v7);
    sub_1A13654DC((uint64_t)v13);
    goto LABEL_45;
  }
  v27 = *(__CVBuffer **)((char *)v7 + *(int *)(v5 + 32));
  CVPixelBufferGetWidth(v27);
  Height = (double)(uint64_t)CVPixelBufferGetHeight(v27);
  sub_1A13654DC((uint64_t)v7);
  sub_1A13654DC((uint64_t)v13);
  if ((~*(_QWORD *)&Height & 0x7FF0000000000000) == 0)
    goto LABEL_35;
  if (Height <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (Height >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v23 >= (uint64_t)Height)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v7 = *(__CVBuffer **)(v3 + v15);
  v29 = CVPixelBufferGetWidth(v7);
  CVPixelBufferGetHeight(v7);
  v30 = (double)v29;
  if ((~COERCE__INT64((double)v29) & 0x7FF0000000000000) == 0)
    goto LABEL_38;
  if (v30 <= -9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v30 >= 9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v31 = v23 * (uint64_t)v30;
  if ((unsigned __int128)(v23 * (__int128)(uint64_t)v30) >> 64 != v31 >> 63)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v32 = v22 + v31;
  if (__OFADD__(v22, v31))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    sub_1A13654DC((uint64_t)v10);
    sub_1A1365498((uint64_t)v13, (uint64_t)v7);
    goto LABEL_44;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(v7);
  if (PixelFormatType != 843264102)
  {
    if (PixelFormatType == 843264104)
    {
      v37 = sub_1A12857D8(&qword_1EE600B28, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&unk_1A15DD53C);
      sub_1A133D15C(v32, v5, (uint64_t)&type metadata for OpticalFlowObservation.PixelUV_16F, v37, (uint64_t)&v48);
      _H1 = WORD1(v48);
      _H0 = v48;
      __asm
      {
        FCVT            S0, H0
        FCVT            S1, H1
      }
      goto LABEL_47;
    }
LABEL_46:
    sub_1A15A91A4();
    __break(1u);
    goto LABEL_47;
  }
  v34 = sub_1A12857D8(&qword_1EE600B28, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&unk_1A15DD53C);
  sub_1A133D15C(v32, v5, (uint64_t)&type metadata for OpticalFlowObservation.PixelUV_32F, v34, (uint64_t)&v48);
  _S1 = *((float *)&v48 + 1);
  _S0 = *(float *)&v48;
LABEL_47:
  result._1 = _S1;
  result._0 = _S0;
  return result;
}

uint64_t sub_1A1365498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OpticalFlowObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A13654DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OpticalFlowObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OpticalFlowObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for OpticalFlowObservation();
  sub_1A12857D8(&qword_1EE600B30, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A1365588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, uint64_t a6@<X8>, float a7@<S0>)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v13 = *a3;
  v14 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a6, a1, v14);
  v15 = a5[6];
  *(float *)(a6 + a5[5]) = a7;
  result = sub_1A128465C(a2, a6 + v15);
  v17 = a5[8];
  *(_BYTE *)(a6 + a5[7]) = v13;
  *(_QWORD *)(a6 + v17) = a4;
  return result;
}

uint64_t sub_1A1365614(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE600B20, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

void *sub_1A1365668@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = sub_1A12857D8(&qword_1EE600B28, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&unk_1A15DD53C);
  return sub_1A133D5B4(a1, a2, v6, a3);
}

void sub_1A13656CC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1A12857D8(&qword_1EE600B28, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&unk_1A15DD53C);
  sub_1A133D274(a1, a2, v4);
}

uint64_t OpticalFlowObservation.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  CVPixelBufferRef v5;
  id v6;
  int v7;
  int v8;
  int *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = objc_msgSend(a1, sel_pixelBuffer);
  v5 = sub_1A12A4B70();

  v6 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v8 = v7;
  objc_msgSend(a1, sel_timeRange);

  v9 = (int *)type metadata accessor for OpticalFlowObservation();
  *(_DWORD *)(a2 + v9[5]) = v8;
  v10 = a2 + v9[6];
  *(_OWORD *)v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  *(_QWORD *)(v10 + 32) = v14;
  *(_QWORD *)(v10 + 40) = v15;
  *(_BYTE *)(v10 + 48) = 0;
  *(_BYTE *)(a2 + v9[7]) = -4;
  *(_QWORD *)(a2 + v9[8]) = v5;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v9 - 1) + 56))(a2, 0, 1, v9);
}

uint64_t sub_1A1365888@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, int *a4@<X4>, uint64_t a5@<X8>)
{
  char v9;
  id v10;
  int v11;
  int v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v9 = *a2;
  v10 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v12 = v11;
  v13 = objc_msgSend(a1, sel_pixelBuffer);

  v14 = a4[6];
  *(_DWORD *)(a5 + a4[5]) = v12;
  result = sub_1A128465C(a3, a5 + v14);
  v16 = a4[8];
  *(_BYTE *)(a5 + a4[7]) = v9;
  *(_QWORD *)(a5 + v16) = v13;
  return result;
}

id _s6Vision22OpticalFlowObservationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _BYTE *v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t, __n128);
  void (*v14)(_BYTE *, uint64_t);
  int *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_1A15A88C8();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = &v33[-v11];
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16);
  v13(&v33[-v11], a1, v4, v10);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v13)(v8, a2, v4);
  sub_1A12857D8(&qword_1EE5FEBF0, v5, MEMORY[0x1E0CB09D0]);
  LOBYTE(v5) = sub_1A15A8B80();
  v14 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v14(v8, v4);
  v14(v12, v4);
  if ((v5 & 1) == 0)
    return 0;
  v15 = (int *)type metadata accessor for OpticalFlowObservation();
  v16 = v15[6];
  v17 = (uint64_t *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 48);
  v19 = (uint64_t *)(a2 + v16);
  if ((v18 & 1) != 0)
  {
    if (!*((_BYTE *)v19 + 48))
      return 0;
  }
  else
  {
    if ((v19[6] & 1) != 0)
      return 0;
    v20 = *v17;
    v21 = v17[1];
    v22 = *((_OWORD *)v17 + 1);
    v23 = v17[4];
    v24 = *v19;
    v25 = v19[1];
    v26 = *((_OWORD *)v19 + 1);
    v28 = v19[4];
    v27 = v19[5];
    v38 = v17[5];
    v39 = v24;
    v40 = v25;
    v41 = v26;
    v42 = v28;
    v43 = v27;
    v34 = v20;
    v35 = v21;
    v36 = v22;
    v37 = v23;
    if ((sub_1A15A8EC8() & 1) == 0)
      return 0;
  }
  if (*(float *)(a1 + v15[5]) == *(float *)(a2 + v15[5]))
  {
    v29 = v15[7];
    v30 = *(unsigned __int8 *)(a1 + v29);
    v31 = *(unsigned __int8 *)(a2 + v29);
    if (v30 <= 0xFB)
    {
      v33[15] = v30;
      if (v31 > 0xFB)
        return 0;
      v33[14] = v31;
      sub_1A12862A0();
      if ((sub_1A15A8B80() & 1) == 0)
        return 0;
      return objc_msgSend((id)objc_opt_self(), sel_isCVPixelBuffer_equalToCVPixelBuffer_, *(_QWORD *)(a1 + v15[8]), *(_QWORD *)(a2 + v15[8]));
    }
    if (v31 > 0xFB)
      return objc_msgSend((id)objc_opt_self(), sel_isCVPixelBuffer_equalToCVPixelBuffer_, *(_QWORD *)(a1 + v15[8]), *(_QWORD *)(a2 + v15[8]));
  }
  return 0;
}

uint64_t sub_1A1365B74(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE600B38, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
  a1[2] = sub_1A12857D8(&qword_1EE600B40, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
  a1[3] = sub_1A12857D8(&qword_1EE600B48, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
  result = sub_1A12857D8(&qword_1EE600B30, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A1365C08(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE600B20, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A1365C44()
{
  return sub_1A12857D8(&qword_1EE5FDC90, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
}

uint64_t sub_1A1365C70(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE600B20, (uint64_t (*)(uint64_t))type metadata accessor for OpticalFlowObservation, (uint64_t)&protocol conformance descriptor for OpticalFlowObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OpticalFlowObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A1365CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1A15A88C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for OpticalFlowObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A1365D40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A15A88C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_1A1365DB8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A15A88C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpticalFlowObservation.PixelUV_32F()
{
  return &type metadata for OpticalFlowObservation.PixelUV_32F;
}

_DWORD *__swift_memcpy4_2(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OpticalFlowObservation.PixelUV_16F(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OpticalFlowObservation.PixelUV_16F(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OpticalFlowObservation.PixelUV_16F()
{
  return &type metadata for OpticalFlowObservation.PixelUV_16F;
}

ValueMetadata *type metadata accessor for OpticalFlowObservation.PixelUV_16U()
{
  return &type metadata for OpticalFlowObservation.PixelUV_16U;
}

__n128 Joint3D.position.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

__n128 Joint3D.localPosition.getter()
{
  __n128 *v0;

  return v0[4];
}

uint64_t Joint3D.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Joint3D.parentJoint.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A1365F4C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A1365F7C + 4 * byte_1A15DD704[*v0]))(0x6E6F697469736F70, 0xE800000000000000);
}

uint64_t sub_1A1365F7C()
{
  return 0x736F506C61636F6CLL;
}

uint64_t sub_1A1365FA0()
{
  return 0x696669746E656469;
}

uint64_t sub_1A1365FBC()
{
  return 0x6F4A746E65726170;
}

uint64_t sub_1A1365FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1366A6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A1366000()
{
  sub_1A1366C6C();
  return sub_1A15A9474();
}

uint64_t sub_1A1366028()
{
  sub_1A1366C6C();
  return sub_1A15A9480();
}

uint64_t Joint3D.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600B50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1366C6C();
  sub_1A15A945C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF2B8);
  v36 = 0;
  sub_1A1366CB0(&qword_1EE5FF2C0, &qword_1EE5FF2C8, MEMORY[0x1E0DEDDC8], MEMORY[0x1E0DEAF40]);
  sub_1A15A9264();
  result = v37;
  v10 = *(_QWORD *)(v37 + 16);
  if (!v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v10 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 < 3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 == 3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v11 = *(_OWORD *)(v37 + 32);
  v34 = *(_OWORD *)(v37 + 48);
  v35 = v11;
  v12 = *(_OWORD *)(v37 + 64);
  v32 = *(_OWORD *)(v37 + 80);
  v33 = v12;
  swift_bridgeObjectRelease();
  v36 = 1;
  sub_1A15A9264();
  result = v37;
  v13 = *(_QWORD *)(v37 + 16);
  if (!v13)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v13 == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v13 >= 3)
  {
    if (v13 != 3)
    {
      v14 = *(_OWORD *)(v37 + 32);
      v30 = *(_OWORD *)(v37 + 48);
      v31 = v14;
      v15 = *(_OWORD *)(v37 + 64);
      v28 = *(_OWORD *)(v37 + 80);
      v29 = v15;
      swift_bridgeObjectRelease();
      LOBYTE(v37) = 2;
      v16 = sub_1A15A9234();
      v18 = v17;
      LOBYTE(v37) = 3;
      swift_bridgeObjectRetain();
      v19 = sub_1A15A9234();
      v21 = v20;
      v22 = *(void (**)(char *, uint64_t))(v6 + 8);
      v23 = v19;
      v22(v8, v5);
      v24 = v34;
      *(_OWORD *)a2 = v35;
      *(_OWORD *)(a2 + 16) = v24;
      v25 = v32;
      *(_OWORD *)(a2 + 32) = v33;
      *(_OWORD *)(a2 + 48) = v25;
      v26 = v30;
      *(_OWORD *)(a2 + 64) = v31;
      *(_OWORD *)(a2 + 80) = v26;
      v27 = v28;
      *(_OWORD *)(a2 + 96) = v29;
      *(_OWORD *)(a2 + 112) = v27;
      *(_QWORD *)(a2 + 128) = v16;
      *(_QWORD *)(a2 + 136) = v18;
      *(_QWORD *)(a2 + 144) = v23;
      *(_QWORD *)(a2 + 152) = v21;
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_19;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t Joint3D.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  _OWORD *v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600B60);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v28 = v1[1];
  v29 = v8;
  v9 = v1[2];
  v26 = v1[3];
  v27 = v9;
  v10 = v1[4];
  v24 = v1[5];
  v25 = v10;
  v11 = v1[6];
  v22 = v1[7];
  v23 = v11;
  v12 = *((_QWORD *)v1 + 16);
  v20[2] = *((_QWORD *)v1 + 17);
  v20[3] = v12;
  v20[1] = *((_QWORD *)v1 + 18);
  v20[0] = *((_QWORD *)v1 + 19);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1366C6C();
  sub_1A15A9468();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF320);
  v13 = (_OWORD *)swift_allocObject();
  v21 = xmmword_1A15D2990;
  v14 = v29;
  v13[1] = xmmword_1A15D2990;
  v13[2] = v14;
  v15 = v27;
  v13[3] = v28;
  v13[4] = v15;
  v13[5] = v26;
  v31 = v13;
  v30 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FF2B8);
  sub_1A1366CB0(&qword_1EE5FF328, &qword_1EE5FF330, MEMORY[0x1E0DEDDB8], MEMORY[0x1E0DEAF10]);
  sub_1A15A92F4();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v16 = (_OWORD *)swift_allocObject();
    v17 = v25;
    v16[1] = v21;
    v16[2] = v17;
    v18 = v23;
    v16[3] = v24;
    v16[4] = v18;
    v16[5] = v22;
    v31 = v16;
    v30 = 1;
    sub_1A15A92F4();
    swift_bridgeObjectRelease();
    LOBYTE(v31) = 2;
    sub_1A15A92C4();
    LOBYTE(v31) = 3;
    sub_1A15A92C4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Joint3D.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  sub_1A12A3BC8();
  return sub_1A12A3BC8();
}

void __swiftcall Joint3D.init(position:localPosition:identifer:parentJoint:)(Vision::Joint3D *__return_ptr retstr, simd_float4x4 *position, simd_float4x4 *localPosition, Swift::String identifer, Swift::String parentJoint)
{
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;

  retstr->position.columns[0] = v5;
  retstr->position.columns[1] = v6;
  retstr->position.columns[2] = v7;
  retstr->position.columns[3] = v8;
  retstr->localPosition.columns[0] = v9;
  retstr->localPosition.columns[1] = v10;
  retstr->localPosition.columns[2] = v11;
  retstr->localPosition.columns[3] = v12;
  retstr->identifier._countAndFlagsBits = (uint64_t)position;
  retstr->identifier._object = localPosition;
  retstr->parentJoint = identifer;
}

uint64_t Joint3D.hashValue.getter()
{
  sub_1A15A93E4();
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  sub_1A12A3BC8();
  sub_1A12A3BC8();
  return sub_1A15A9420();
}

uint64_t sub_1A13667C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Joint3D.init(from:)(a1, a2);
}

uint64_t sub_1A13667D8(_QWORD *a1)
{
  return Joint3D.encode(to:)(a1);
}

uint64_t sub_1A13667F0()
{
  sub_1A15A93E4();
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  sub_1A12A3BC8();
  sub_1A12A3BC8();
  return sub_1A15A9420();
}

uint64_t sub_1A13668CC()
{
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  sub_1A12A3BC8();
  return sub_1A12A3BC8();
}

uint64_t sub_1A1366994()
{
  sub_1A15A93E4();
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A15A8BC8();
  swift_bridgeObjectRelease();
  sub_1A12A3BC8();
  sub_1A12A3BC8();
  return sub_1A15A9420();
}

uint64_t sub_1A1366A6C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736F506C61636F6CLL && a2 == 0xED00006E6F697469 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F4A746E65726170 && a2 == 0xEB00000000746E69)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_1A1366C6C()
{
  unint64_t result;

  result = qword_1EE600B58;
  if (!qword_1EE600B58)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD77C, &type metadata for Joint3D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE600B58);
  }
  return result;
}

uint64_t sub_1A1366CB0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF2B8);
    v10 = sub_1A1366D2C(a2, a3);
    result = MEMORY[0x1A1B0B774](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A1366D2C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FF2D0);
    result = MEMORY[0x1A1B0B774](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s6Vision7Joint3DV2eeoiySbAC_ACtFZ_0(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[1], a2[1]), (int8x16_t)vceqq_f32(*a1, *a2)), vandq_s8((int8x16_t)vceqq_f32(a1[2], a2[2]), (int8x16_t)vceqq_f32(a1[3], a2[3])))) & 0x80000000) == 0|| (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[6], a2[6]), (int8x16_t)vceqq_f32(a1[7], a2[7])), vandq_s8((int8x16_t)vceqq_f32(a1[5], a2[5]), (int8x16_t)vceqq_f32(a1[4], a2[4])))) & 0x80000000) == 0)
  {
    return 0;
  }
  v3 = a1[9].i64[0];
  v4 = a1[9].i64[1];
  v5 = a2[9].i64[0];
  v6 = a2[9].i64[1];
  if (a1[8].i64[0] == a2[8].i64[0] && a1[8].i64[1] == a2[8].i64[1]
    || (v7 = sub_1A15A9354(), result = 0, (v7 & 1) != 0))
  {
    if (v3 == v5 && v4 == v6)
      return 1;
    else
      return sub_1A15A9354();
  }
  return result;
}

unint64_t sub_1A1366E80()
{
  unint64_t result;

  result = qword_1EE600B68;
  if (!qword_1EE600B68)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD714, &type metadata for Joint3D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE600B68);
  }
  return result;
}

unint64_t sub_1A1366EC8()
{
  unint64_t result;

  result = qword_1EE600B70;
  if (!qword_1EE600B70)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD7F4, &type metadata for Joint3D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE600B70);
  }
  return result;
}

unint64_t sub_1A1366F10()
{
  unint64_t result;

  result = qword_1EE600B78;
  if (!qword_1EE600B78)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DD7CC, &type metadata for Joint3D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE600B78);
  }
  return result;
}

uint64_t destroy for Joint3D()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Joint3D(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v7;
  v8 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Joint3D(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy160_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for Joint3D(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Joint3D(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Joint3D(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 136) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Joint3D()
{
  return &type metadata for Joint3D;
}

uint64_t storeEnumTagSinglePayload for Joint3D.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A1367224 + 4 * byte_1A15DD70D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A1367258 + 4 * byte_1A15DD708[v4]))();
}

uint64_t sub_1A1367258(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1367260(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1367268);
  return result;
}

uint64_t sub_1A1367274(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A136727CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A1367280(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1367288(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Joint3D.CodingKeys()
{
  return &type metadata for Joint3D.CodingKeys;
}

double FaceObservation.init(boundingBox:revision:)@<D0>(__int128 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  void *v8;
  id v9;
  int *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 *v16;
  double result;
  __n128 v18;
  __int128 v19;
  __n128 v20[2];

  v19 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *a2;
  if (v6 == 3)
    v7 = -4;
  else
    v7 = v6 | 0x40;
  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, sel_radians);
  v10 = (int *)type metadata accessor for FaceObservation();
  sub_1A128DB40(0, (unint64_t *)&qword_1EE600B80);
  sub_1A15A87B4();
  v11 = objc_msgSend(v8, sel_radians);
  sub_1A15A87B4();
  v12 = objc_msgSend(v8, sel_radians);
  sub_1A15A87B4();
  sub_1A15A88BC();
  static NormalizedRect.fullImage.getter(v20);
  *(_QWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v13 = a3 + v10[8];
  *(_BYTE *)(v13 + 4) = -12;
  *(_DWORD *)v13 = 0;
  v14 = a3 + v10[9];
  *(_OWORD *)v14 = v19;
  *(_QWORD *)(v14 + 16) = v4;
  *(_QWORD *)(v14 + 24) = v5;
  *(_DWORD *)(a3 + v10[11]) = 1065353216;
  v15 = a3 + v10[12];
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)v15 = 0u;
  *(_BYTE *)(v15 + 48) = 1;
  *(_BYTE *)(a3 + v10[13]) = v7;
  v16 = (__n128 *)(a3 + v10[14]);
  result = v20[0].n128_f64[0];
  v18 = v20[1];
  *v16 = v20[0];
  v16[1] = v18;
  return result;
}

uint64_t type metadata accessor for FaceObservation()
{
  uint64_t result;

  result = qword_1EE63B9E0;
  if (!qword_1EE63B9E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FaceObservation.landmarks.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_1A13674AC(v2, v3);
}

uint64_t sub_1A13674AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t FaceObservation.roll.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FaceObservation() + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FaceObservation.yaw.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FaceObservation() + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FaceObservation.pitch.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FaceObservation() + 28);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

unint64_t FaceObservation.faceCaptureQuality.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for FaceObservation();
  v2 = *(unsigned int *)(v0 + *(int *)(v1 + 32));
  if (((v2 | ((unint64_t)*(unsigned __int8 *)(v0 + *(int *)(v1 + 32) + 4) << 32)) & 0xFC00000000) == 0xF400000000)
    v2 = 0;
  return v2 | ((unint64_t)(((*(unsigned int *)(v0 + *(int *)(v1 + 32)) | ((unint64_t)*(unsigned __int8 *)(v0 + *(int *)(v1 + 32) + 4) << 32)) & 0xFC00000000) == 0xF400000000) << 32);
}

uint64_t FaceObservation.captureQuality.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  int *v4;
  int v5;

  result = type metadata accessor for FaceObservation();
  v4 = (int *)(v1 + *(int *)(result + 32));
  v5 = *v4;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)v4 + 4);
  *(_DWORD *)a1 = v5;
  return result;
}

__n128 FaceObservation.boundingBox.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = v1 + *(int *)(type metadata accessor for FaceObservation() + 36);
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a1 = *(_OWORD *)v3;
  a1[1] = v5;
  return result;
}

__n128 FaceObservation.boundingBox.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __n128 *v4;
  __n128 result;
  __n128 v6;

  v6 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = (__n128 *)(v1 + *(int *)(type metadata accessor for FaceObservation() + 36));
  result = v6;
  *v4 = v6;
  v4[1].n128_u64[0] = v2;
  v4[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*FaceObservation.boundingBox.modify())(TtTrkRpnNode *__hidden this)
{
  type metadata accessor for FaceObservation();
  return TtTrkRpnNode::config;
}

uint64_t FaceObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FaceObservation() + 40);
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

float FaceObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for FaceObservation() + 44));
}

__n128 FaceObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for FaceObservation() + 48);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t FaceObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FaceObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 52));
  return result;
}

unint64_t FaceObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1A15A9090();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for FaceObservation();
  sub_1A1340660(v1, (uint64_t)&protocol witness table for FaceObservation);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  sub_1A15A87D8();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  sub_1A15A87D8();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  sub_1A15A87D8();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  if (((*(unsigned int *)(v0 + *(int *)(v1 + 32)) | ((unint64_t)*(unsigned __int8 *)(v0 + *(int *)(v1 + 32) + 4) << 32)) & 0xFC00000000) != 0xF400000000)
  {
    sub_1A15A9090();
    swift_bridgeObjectRelease();
    sub_1A15A9090();
    swift_bridgeObjectRelease();
    sub_1A1294F6C();
    sub_1A15A8ACC();
    sub_1A15A8BEC();
    swift_bridgeObjectRelease();
    sub_1A15A8BEC();
    sub_1A15A8BEC();
    swift_bridgeObjectRelease();
    sub_1A15A8BEC();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 8))
  {
    sub_1A15A9324();
    sub_1A15A8BEC();
    sub_1A15A8BEC();
    swift_bridgeObjectRelease();
    sub_1A15A8BEC();
    swift_bridgeObjectRelease();
  }
  v2 = sub_1A12857D8(&qword_1EE600B88, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
  sub_1A132D4B4(v1, (uint64_t)&off_1E452CF78, v2);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  swift_bridgeObjectRetain();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

uint64_t FaceObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for FaceObservation();
  sub_1A12857D8(&qword_1EE5FE0B0, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

__n128 sub_1A1367BF0@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = v2 + *(int *)(a1 + 36);
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

uint64_t sub_1A1367C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE600B88, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

float FaceObservation.CaptureQuality.score.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void FaceObservation.CaptureQuality.originatingRequestDescriptor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

unint64_t FaceObservation.CaptureQuality.description.getter()
{
  sub_1A15A9090();
  swift_bridgeObjectRelease();
  sub_1A1294F6C();
  sub_1A15A8ACC();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0xD00000000000001DLL;
}

uint64_t FaceObservation.CaptureQuality.hash(into:)()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 4);
  sub_1A15A9408();
  if (v1 >= 0xFC)
    return sub_1A15A93FC();
  sub_1A15A93FC();
  sub_1A136E174();
  return sub_1A15A8B44();
}

uint64_t sub_1A1367DA4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001CLL;
  else
    return 0x65726F6373;
}

uint64_t sub_1A1367DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A136E3B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A1367E04()
{
  sub_1A136E1B8();
  return sub_1A15A9474();
}

uint64_t sub_1A1367E2C()
{
  sub_1A136E1B8();
  return sub_1A15A9480();
}

uint64_t FaceObservation.CaptureQuality.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  _BYTE v10[16];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600B98);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_BYTE *)(v1 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136E1B8();
  sub_1A15A9468();
  v10[15] = 0;
  sub_1A15A92DC();
  if (!v2)
  {
    v10[14] = v8;
    v10[13] = 1;
    sub_1A12E390C();
    sub_1A15A92B8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FaceObservation.CaptureQuality.hashValue.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 4);
  sub_1A15A93E4();
  sub_1A15A9408();
  sub_1A15A93FC();
  if (v1 < 0xFC)
  {
    sub_1A136E174();
    sub_1A15A8B44();
  }
  return sub_1A15A9420();
}

uint64_t FaceObservation.CaptureQuality.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  char v11;
  _BYTE v13[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BA0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136E1B8();
  sub_1A15A945C();
  if (!v2)
  {
    v13[15] = 0;
    sub_1A15A924C();
    v10 = v9;
    v13[13] = 1;
    sub_1A1285654();
    sub_1A15A9228();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v13[14];
    *(_DWORD *)a2 = v10;
    *(_BYTE *)(a2 + 4) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1A13681A0()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 4);
  sub_1A15A93E4();
  sub_1A15A9408();
  sub_1A15A93FC();
  if (v1 < 0xFC)
  {
    sub_1A136E174();
    sub_1A15A8B44();
  }
  return sub_1A15A9420();
}

uint64_t sub_1A1368238@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FaceObservation.CaptureQuality.init(from:)(a1, a2);
}

uint64_t sub_1A136824C(_QWORD *a1)
{
  return FaceObservation.CaptureQuality.encode(to:)(a1);
}

void sub_1A1368264(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

void FaceObservation.Landmarks2D.allPoints.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(0);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 1;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.faceContour.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(1u);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 2;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.leftEye.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(7u);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.rightEye.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(0xBu);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.leftEyebrow.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(6u);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 2;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.rightEyebrow.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(0xAu);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 2;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.nose.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(4u);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.noseCrest.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(3u);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 2;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.medianLine.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(0x10u);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 2;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.outerLips.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(0xEu);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.innerLips.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(0xFu);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.leftPupil.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(8u);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void FaceObservation.Landmarks2D.rightPupil.getter(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  if (qword_1EE63AC80 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EE63AC90 + 16))
  {
    sub_1A136D308(0xCu);
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      v11 = sub_1A1369480(v10);
      swift_bridgeObjectRelease();
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 24) = v3;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t FaceObservation.Landmarks2D.description.getter()
{
  uint64_t v1;

  v1 = sub_1A15A9324();
  sub_1A15A8BEC();
  return v1;
}

void FaceObservation.Landmarks2D.originatingRequestDescriptor.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1A1368EFC()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = sub_1A15A8C7C();
  *(_QWORD *)(v0 + 16) = 76;
  bzero((void *)(v0 + 32), 0x260uLL);
  *(_OWORD *)(v0 + 32) = xmmword_1A15DD910;
  *(_OWORD *)(v0 + 48) = xmmword_1A15DD920;
  *(_OWORD *)(v0 + 64) = xmmword_1A15DD930;
  *(_OWORD *)(v0 + 80) = xmmword_1A15DD940;
  *(_OWORD *)(v0 + 96) = xmmword_1A15DD950;
  *(_OWORD *)(v0 + 112) = xmmword_1A15DD960;
  *(_OWORD *)(v0 + 128) = xmmword_1A15DD970;
  *(_OWORD *)(v0 + 144) = xmmword_1A15DD980;
  *(_OWORD *)(v0 + 160) = xmmword_1A15DD990;
  *(_OWORD *)(v0 + 176) = xmmword_1A15DD9A0;
  *(_OWORD *)(v0 + 192) = xmmword_1A15DD9B0;
  *(_OWORD *)(v0 + 208) = xmmword_1A15DD9C0;
  *(_OWORD *)(v0 + 224) = xmmword_1A15DD9D0;
  *(_OWORD *)(v0 + 240) = xmmword_1A15DD9E0;
  *(_OWORD *)(v0 + 256) = xmmword_1A15DD9F0;
  *(_OWORD *)(v0 + 272) = xmmword_1A15DDA00;
  *(_OWORD *)(v0 + 288) = xmmword_1A15DDA10;
  *(_OWORD *)(v0 + 304) = xmmword_1A15DDA20;
  *(_OWORD *)(v0 + 320) = xmmword_1A15DDA30;
  *(_OWORD *)(v0 + 336) = xmmword_1A15DDA40;
  *(_OWORD *)(v0 + 352) = xmmword_1A15DDA50;
  *(_OWORD *)(v0 + 368) = xmmword_1A15DDA60;
  *(_OWORD *)(v0 + 384) = xmmword_1A15DDA70;
  *(_OWORD *)(v0 + 400) = xmmword_1A15DDA80;
  *(_OWORD *)(v0 + 416) = xmmword_1A15DDA90;
  *(_OWORD *)(v0 + 432) = xmmword_1A15DDAA0;
  *(_OWORD *)(v0 + 448) = xmmword_1A15DDAB0;
  *(_OWORD *)(v0 + 464) = xmmword_1A15DDAC0;
  *(_OWORD *)(v0 + 480) = xmmword_1A15DDAD0;
  *(_OWORD *)(v0 + 496) = xmmword_1A15DDAE0;
  *(_OWORD *)(v0 + 512) = xmmword_1A15DDAF0;
  *(_OWORD *)(v0 + 528) = xmmword_1A15DDB00;
  *(_OWORD *)(v0 + 544) = xmmword_1A15DDB10;
  *(_OWORD *)(v0 + 560) = xmmword_1A15DDB20;
  *(_OWORD *)(v0 + 576) = xmmword_1A15DDB30;
  *(_OWORD *)(v0 + 592) = xmmword_1A15DDB40;
  *(_OWORD *)(v0 + 608) = xmmword_1A15DDB50;
  *(_OWORD *)(v0 + 624) = xmmword_1A15DDB60;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600CE0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A15DDB70;
  *(_BYTE *)(inited + 32) = 1;
  *(_QWORD *)(inited + 40) = &unk_1E452C9F8;
  *(_BYTE *)(inited + 48) = 2;
  *(_QWORD *)(inited + 56) = &unk_1E452C398;
  *(_BYTE *)(inited + 64) = 3;
  *(_QWORD *)(inited + 72) = &unk_1E452C6A0;
  *(_BYTE *)(inited + 80) = 4;
  *(_QWORD *)(inited + 88) = &unk_1E452C6F0;
  *(_BYTE *)(inited + 96) = 5;
  *(_QWORD *)(inited + 104) = &unk_1E452C750;
  *(_BYTE *)(inited + 112) = 6;
  *(_QWORD *)(inited + 120) = &unk_1E452C810;
  *(_BYTE *)(inited + 128) = 7;
  *(_QWORD *)(inited + 136) = &unk_1E452C860;
  *(_BYTE *)(inited + 144) = 8;
  *(_QWORD *)(inited + 152) = &unk_1E452C8B0;
  *(_BYTE *)(inited + 160) = 9;
  *(_QWORD *)(inited + 168) = &unk_1E452C8D8;
  *(_BYTE *)(inited + 176) = 10;
  *(_QWORD *)(inited + 184) = &unk_1E452C958;
  *(_BYTE *)(inited + 192) = 11;
  *(_QWORD *)(inited + 200) = &unk_1E452C9A8;
  *(_BYTE *)(inited + 208) = 12;
  *(_QWORD *)(inited + 216) = &unk_1E4541260;
  *(_BYTE *)(inited + 224) = 13;
  *(_QWORD *)(inited + 232) = &unk_1E452C470;
  *(_BYTE *)(inited + 240) = 14;
  *(_QWORD *)(inited + 248) = &unk_1E452C4F0;
  *(_BYTE *)(inited + 256) = 15;
  *(_QWORD *)(inited + 264) = &unk_1E452C580;
  *(_BYTE *)(inited + 272) = 16;
  *(_QWORD *)(inited + 280) = &unk_1E452C5D0;
  *(_BYTE *)(inited + 288) = 17;
  *(_QWORD *)(inited + 296) = &unk_1E452C640;
  *(_BYTE *)(inited + 304) = 0;
  *(_QWORD *)(inited + 312) = v0;
  v2 = sub_1A136E494(inited);
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600CE8);
  result = swift_arrayDestroy();
  qword_1EE63AC88 = v0;
  qword_1EE63AC90 = v2;
  return result;
}

__n128 sub_1A1369358@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  char v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __int128 v18;
  uint64_t v19;

  v16 = a3[1];
  v17 = *a3;
  v8 = *a4;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1A1297224(0, v9, 0);
    v10 = v19;
    v11 = a1 + 40;
    do
    {
      NormalizedPoint.init(normalizedPoint:)(*(CGPoint *)(v11 - 8));
      v12 = v18;
      v14 = *(_QWORD *)(v19 + 16);
      v13 = *(_QWORD *)(v19 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1A1297224((char *)(v13 > 1), v14 + 1, 1);
        v12 = v18;
      }
      *(_QWORD *)(v19 + 16) = v14 + 1;
      *(_OWORD *)(v19 + 16 * v14 + 32) = v12;
      v11 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x1E0DEE9D8];
  }
  *(_BYTE *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v10;
  *(_QWORD *)(a5 + 16) = a2;
  *(__n128 *)(a5 + 24) = v17;
  result = v16;
  *(__n128 *)(a5 + 40) = v16;
  return result;
}

uint64_t sub_1A1369480(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  double *v12;
  uint64_t v13;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  static NormalizedPoint.zero.getter(v21);
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  v20 = v21[0];
  v19 = v21[1];
  result = sub_1A15A8C7C();
  *(_QWORD *)(result + 16) = v4;
  v6 = (uint64_t *)(result + 32);
  if (v4 < 4)
  {
    v7 = 0;
    v9 = v19;
    v8 = v20;
LABEL_8:
    v15 = v4 - v7;
    do
    {
      *v6 = v8;
      v6[1] = v9;
      v6 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_10;
  }
  v7 = v4 & 0x7FFFFFFFFFFFFFFCLL;
  v6 += 2 * (v4 & 0x7FFFFFFFFFFFFFFCLL);
  v9 = v19;
  v8 = v20;
  v10 = vdupq_lane_s64(v20, 0);
  v11 = vdupq_lane_s64(v19, 0);
  v12 = (double *)(result + 64);
  v13 = v4 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v14 = v12 - 4;
    vst2q_f64(v14, *(float64x2x2_t *)v10.i8);
    vst2q_f64(v12, *(float64x2x2_t *)v10.i8);
    v12 += 8;
    v13 -= 4;
  }
  while (v13);
  if (v4 != v7)
    goto LABEL_8;
LABEL_10:
  v16 = 0;
  v17 = *(_QWORD *)(v3 + 16);
  while (1)
  {
    v18 = *(_QWORD *)(a1 + 32 + 8 * v16);
    if (v18 >= v17)
      break;
    if (v16 >= *(_QWORD *)(result + 16))
      goto LABEL_16;
    *(_OWORD *)(result + 16 * v16++ + 32) = *(_OWORD *)(v3 + 32 + 16 * v18);
    if (v4 == v16)
      return result;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

BOOL sub_1A13695A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

BOOL sub_1A1369610(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t FaceObservation.Landmarks2D.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *((_QWORD *)v1 + 1);
  v3 = *((_QWORD *)v1 + 2);
  if (*v1 < 0xFCu)
  {
    sub_1A15A93FC();
    sub_1A136E174();
    sub_1A15A8B44();
  }
  else
  {
    sub_1A15A93FC();
  }
  swift_bridgeObjectRetain();
  sub_1A136D754(a1, v4);
  swift_bridgeObjectRelease();
  sub_1A15A93FC();
  if (v3)
    sub_1A136D700(a1, v3);
  sub_1A1290CE4();
  return sub_1A15A8B44();
}

uint64_t sub_1A1369778(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A13697B0 + 4 * byte_1A15DDB80[a1]))(0xD00000000000001CLL, 0x80000001A15FE8D0);
}

uint64_t sub_1A13697B0(uint64_t a1)
{
  return a1 - 11;
}

uint64_t sub_1A13697E4()
{
  unsigned __int8 *v0;

  return sub_1A1369778(*v0);
}

uint64_t sub_1A13697EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1370664(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A1369810()
{
  sub_1A136E1FC();
  return sub_1A15A9474();
}

uint64_t sub_1A1369838()
{
  sub_1A136E1FC();
  return sub_1A15A9480();
}

uint64_t FaceObservation.Landmarks2D.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BA8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v16 = *((_QWORD *)v1 + 2);
  v17 = v9;
  v10 = *((_QWORD *)v1 + 3);
  v11 = *((_QWORD *)v1 + 4);
  v12 = *((_QWORD *)v1 + 5);
  v13 = *((_QWORD *)v1 + 6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136E1FC();
  sub_1A15A9468();
  LOBYTE(v18) = v8;
  v22 = 0;
  sub_1A12E390C();
  sub_1A15A92B8();
  if (!v2)
  {
    v14 = v16;
    v18 = v17;
    v22 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD298);
    sub_1A136E96C(&qword_1EE5FD2A0, &qword_1EE5FD298, (uint64_t (*)(void))sub_1A1295778, MEMORY[0x1E0DEAF10]);
    sub_1A15A92F4();
    v18 = v14;
    v22 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BB0);
    sub_1A136E240(&qword_1EE600BB8, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEAF10]);
    sub_1A15A92B8();
    v18 = v10;
    v19 = v11;
    v20 = v12;
    v21 = v13;
    v22 = 3;
    sub_1A1285568();
    sub_1A15A92F4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FaceObservation.Landmarks2D.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _BYTE v5[80];
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v5[72] = *(_BYTE *)v0;
  v6 = v1;
  v7 = v2;
  v3 = *(_OWORD *)(v0 + 40);
  v8 = *(_OWORD *)(v0 + 24);
  v9 = v3;
  sub_1A15A93E4();
  FaceObservation.Landmarks2D.hash(into:)((uint64_t)v5);
  return sub_1A15A9420();
}

uint64_t FaceObservation.Landmarks2D.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BC0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136E1FC();
  sub_1A15A945C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = 0;
  sub_1A1285654();
  sub_1A15A9228();
  v9 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD298);
  v20 = 1;
  sub_1A136E96C(&qword_1EE5FD2C0, &qword_1EE5FD298, (uint64_t (*)(void))sub_1A12957BC, MEMORY[0x1E0DEAF40]);
  sub_1A15A9264();
  v10 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BB0);
  v20 = 2;
  sub_1A136E240(&qword_1EE600BC8, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1A15A9228();
  v11 = v18;
  v20 = 3;
  sub_1A1285610();
  v17 = v11;
  swift_bridgeObjectRetain();
  sub_1A15A9264();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v18;
  v13 = v19;
  *(_BYTE *)a2 = v9;
  v14 = v17;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v14;
  *(_OWORD *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 40) = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A1369DC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FaceObservation.Landmarks2D.init(from:)(a1, a2);
}

uint64_t sub_1A1369DD4(_QWORD *a1)
{
  return FaceObservation.Landmarks2D.encode(to:)(a1);
}

uint64_t sub_1A1369DEC()
{
  uint64_t v1;

  v1 = sub_1A15A9324();
  sub_1A15A8BEC();
  return v1;
}

uint64_t sub_1A1369E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _BYTE v5[80];
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v5[72] = *(_BYTE *)v0;
  v6 = v1;
  v7 = v2;
  v3 = *(_OWORD *)(v0 + 40);
  v8 = *(_OWORD *)(v0 + 24);
  v9 = v3;
  sub_1A15A93E4();
  FaceObservation.Landmarks2D.hash(into:)((uint64_t)v5);
  return sub_1A15A9420();
}

uint64_t sub_1A1369EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _BYTE v5[80];
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v5[72] = *(_BYTE *)v0;
  v6 = v1;
  v7 = v2;
  v3 = *(_OWORD *)(v0 + 40);
  v8 = *(_OWORD *)(v0 + 24);
  v9 = v3;
  sub_1A15A93E4();
  FaceObservation.Landmarks2D.hash(into:)((uint64_t)v5);
  return sub_1A15A9420();
}

uint64_t FaceObservation.Landmarks2D.Region.PointsClassification.hash(into:)()
{
  return sub_1A15A93F0();
}

BOOL static FaceObservation.Landmarks2D.Region.PointsClassification.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A1369F4C()
{
  sub_1A136E36C();
  return sub_1A15A9474();
}

uint64_t sub_1A1369F74()
{
  sub_1A136E36C();
  return sub_1A15A9480();
}

uint64_t sub_1A1369F9C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656E6E6F63736964;
  if (*v0 != 1)
    v1 = 0x687461506E65706FLL;
  if (*v0)
    return v1;
  else
    return 0x61506465736F6C63;
}

uint64_t sub_1A136A004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A13707FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A136A028()
{
  sub_1A136E2A0();
  return sub_1A15A9474();
}

uint64_t sub_1A136A050()
{
  sub_1A136E2A0();
  return sub_1A15A9480();
}

uint64_t sub_1A136A078()
{
  sub_1A136E328();
  return sub_1A15A9474();
}

uint64_t sub_1A136A0A0()
{
  sub_1A136E328();
  return sub_1A15A9480();
}

uint64_t sub_1A136A0C8()
{
  sub_1A136E2E4();
  return sub_1A15A9474();
}

uint64_t sub_1A136A0F0()
{
  sub_1A136E2E4();
  return sub_1A15A9480();
}

uint64_t FaceObservation.Landmarks2D.Region.PointsClassification.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BD0);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x1E0C80A78](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BD8);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BE0);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BE8);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136E2A0();
  sub_1A15A9468();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_1A136E328();
      sub_1A15A92AC();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_1A136E2E4();
      v16 = v21;
      sub_1A15A92AC();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_1A136E36C();
    sub_1A15A92AC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

uint64_t FaceObservation.Landmarks2D.Region.PointsClassification.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t FaceObservation.Landmarks2D.Region.PointsClassification.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BF0);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BF8);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C00);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C08);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136E2A0();
  v13 = v41;
  sub_1A15A945C();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_1A15A9294();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_1A15A90F0();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v25 = &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC450], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_1A136E328();
      v20 = v9;
      sub_1A15A9204();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_1A136E2E4();
      v28 = v15;
      sub_1A15A9204();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_1A136E36C();
    sub_1A15A9204();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t sub_1A136A804@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FaceObservation.Landmarks2D.Region.PointsClassification.init(from:)(a1, a2);
}

uint64_t sub_1A136A818(_QWORD *a1)
{
  return FaceObservation.Landmarks2D.Region.PointsClassification.encode(to:)(a1);
}

void FaceObservation.Landmarks2D.Region.pointsClassification.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t FaceObservation.Landmarks2D.Region.points.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FaceObservation.Landmarks2D.Region.precisionEstimatesPerPoint.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FaceObservation.Landmarks2D.Region.pointsInImageCoordinates(_:origin:)(double a1, double a2)
{
  _OWORD *v2;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[4];

  v5 = v2[1];
  v10[0] = *v2;
  v10[1] = v5;
  v6 = v2[3];
  v10[2] = v2[2];
  v10[3] = v6;
  sub_1A136E6B8((uint64_t)v10);
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1A136E594(v7, (uint64_t)v10, a1, a2);
  sub_1A136E6E8((uint64_t)v10);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t FaceObservation.Landmarks2D.Region.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v4 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_1A136D754(a1, v4);
  swift_bridgeObjectRelease();
  sub_1A15A93F0();
  if (v3)
  {
    sub_1A15A93FC();
    sub_1A136D700(a1, v3);
    if (v5 >= 0xFC)
      return sub_1A15A93FC();
  }
  else
  {
    sub_1A15A93FC();
    if (v5 >= 0xFC)
      return sub_1A15A93FC();
  }
  sub_1A15A93FC();
  sub_1A136E174();
  return sub_1A15A8B44();
}

uint64_t FaceObservation.Landmarks2D.Region.description.getter()
{
  sub_1A15A9090();
  sub_1A15A8BEC();
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  sub_1A15A9180();
  sub_1A15A8BEC();
  return 0;
}

void FaceObservation.Landmarks2D.Region.originatingRequestDescriptor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

uint64_t sub_1A136AACC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A136AB04 + 4 * byte_1A15DDB84[a1]))(0xD000000000000014, 0x80000001A15FE950);
}

uint64_t sub_1A136AB04()
{
  return 0x73746E696F70;
}

uint64_t sub_1A136AB18(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_1A136AB40()
{
  return 0x6E756F4265636166;
}

uint64_t sub_1A136AB64()
{
  unsigned __int8 *v0;

  return sub_1A136AACC(*v0);
}

uint64_t sub_1A136AB6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1370974(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A136AB90()
{
  sub_1A136E71C();
  return sub_1A15A9474();
}

uint64_t sub_1A136ABB8()
{
  sub_1A136E71C();
  return sub_1A15A9480();
}

uint64_t FaceObservation.Landmarks2D.Region.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C10);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v17 = *((_QWORD *)v1 + 2);
  v18 = v9;
  v23 = v1[24];
  v10 = *((_QWORD *)v1 + 4);
  v11 = *((_QWORD *)v1 + 5);
  v12 = *((_QWORD *)v1 + 6);
  v13 = *((_QWORD *)v1 + 7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136E71C();
  sub_1A15A9468();
  LOBYTE(v19) = v8;
  v24 = 0;
  sub_1A136E760();
  sub_1A15A92F4();
  if (!v2)
  {
    v14 = v17;
    v15 = v23;
    v19 = v18;
    v24 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD298);
    sub_1A136E96C(&qword_1EE5FD2A0, &qword_1EE5FD298, (uint64_t (*)(void))sub_1A1295778, MEMORY[0x1E0DEAF10]);
    sub_1A15A92F4();
    v19 = v14;
    v24 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BB0);
    sub_1A136E240(&qword_1EE600BB8, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEAF10]);
    sub_1A15A92B8();
    LOBYTE(v19) = v15;
    v24 = 3;
    sub_1A12E390C();
    sub_1A15A92B8();
    v19 = v10;
    v20 = v11;
    v21 = v12;
    v22 = v13;
    v24 = 4;
    sub_1A1285568();
    sub_1A15A92F4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FaceObservation.Landmarks2D.Region.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  _BYTE v6[80];
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v6[72] = *(_BYTE *)v0;
  v7 = v1;
  v8 = v2;
  v9 = v3;
  v4 = *(_OWORD *)(v0 + 48);
  v10 = *(_OWORD *)(v0 + 32);
  v11 = v4;
  sub_1A15A93E4();
  FaceObservation.Landmarks2D.Region.hash(into:)((uint64_t)v6);
  return sub_1A15A9420();
}

uint64_t FaceObservation.Landmarks2D.Region.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  char v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C20);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136E71C();
  sub_1A15A945C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = 0;
  sub_1A136E7A4();
  sub_1A15A9264();
  v9 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD298);
  v21 = 1;
  sub_1A136E96C(&qword_1EE5FD2C0, &qword_1EE5FD298, (uint64_t (*)(void))sub_1A12957BC, MEMORY[0x1E0DEAF40]);
  sub_1A15A9264();
  v20 = v9;
  v10 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600BB0);
  v21 = 2;
  sub_1A136E240(&qword_1EE600BC8, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1A15A9228();
  v11 = v18;
  v21 = 3;
  sub_1A1285654();
  v17 = v11;
  swift_bridgeObjectRetain();
  sub_1A15A9228();
  v12 = v17;
  HIDWORD(v16) = v18;
  v21 = 4;
  sub_1A1285610();
  sub_1A15A9264();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v18;
  v15 = v19;
  *(_BYTE *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = BYTE4(v16);
  *(_OWORD *)(a2 + 32) = v14;
  *(_OWORD *)(a2 + 48) = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A136B238@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FaceObservation.Landmarks2D.Region.init(from:)(a1, a2);
}

uint64_t sub_1A136B24C(_QWORD *a1)
{
  return FaceObservation.Landmarks2D.Region.encode(to:)(a1);
}

uint64_t sub_1A136B264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  _BYTE v6[80];
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v6[72] = *(_BYTE *)v0;
  v7 = v1;
  v8 = v2;
  v9 = v3;
  v4 = *(_OWORD *)(v0 + 48);
  v10 = *(_OWORD *)(v0 + 32);
  v11 = v4;
  sub_1A15A93E4();
  FaceObservation.Landmarks2D.Region.hash(into:)((uint64_t)v6);
  return sub_1A15A9420();
}

uint64_t sub_1A136B2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  _BYTE v6[80];
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v6[72] = *(_BYTE *)v0;
  v7 = v1;
  v8 = v2;
  v9 = v3;
  v4 = *(_OWORD *)(v0 + 48);
  v10 = *(_OWORD *)(v0 + 32);
  v11 = v4;
  sub_1A15A93E4();
  FaceObservation.Landmarks2D.Region.hash(into:)((uint64_t)v6);
  return sub_1A15A9420();
}

uint64_t sub_1A136B328(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v2 = v1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  sub_1A15A93F0();
  if (v5)
  {
    v6 = v4 + 32;
    do
    {
      v6 += 8;
      sub_1A15A93F0();
      --v5;
    }
    while (v5);
  }
  v7 = v2[1];
  v8 = *(_QWORD *)(v7 + 16);
  sub_1A15A93F0();
  if (v8)
  {
    v9 = v7 + 32;
    do
    {
      v9 += 8;
      sub_1A15A93F0();
      --v8;
    }
    while (v8);
  }
  v10 = v2[2];
  v11 = *(_QWORD *)(v10 + 16);
  sub_1A15A93F0();
  if (v11)
  {
    v12 = v10 + 32;
    do
    {
      v12 += 8;
      sub_1A15A93F0();
      --v11;
    }
    while (v11);
  }
  v13 = v2[3];
  v14 = *(_QWORD *)(v13 + 16);
  sub_1A15A93F0();
  if (v14)
  {
    v15 = v13 + 32;
    do
    {
      v15 += 8;
      sub_1A15A93F0();
      --v14;
    }
    while (v14);
  }
  v16 = v2[4];
  v17 = *(_QWORD *)(v16 + 16);
  sub_1A15A93F0();
  if (v17)
  {
    v18 = v16 + 32;
    do
    {
      v18 += 8;
      sub_1A15A93F0();
      --v17;
    }
    while (v17);
  }
  v19 = v2[5];
  v20 = *(_QWORD *)(v19 + 16);
  sub_1A15A93F0();
  if (v20)
  {
    v21 = v19 + 32;
    do
    {
      v21 += 8;
      sub_1A15A93F0();
      --v20;
    }
    while (v20);
  }
  v22 = v2[6];
  v23 = *(_QWORD *)(v22 + 16);
  sub_1A15A93F0();
  if (v23)
  {
    v24 = v22 + 32;
    do
    {
      v24 += 8;
      sub_1A15A93F0();
      --v23;
    }
    while (v23);
  }
  v25 = v2[7];
  v26 = *(_QWORD *)(v25 + 16);
  sub_1A15A93F0();
  if (v26)
  {
    v27 = v25 + 32;
    do
    {
      v27 += 8;
      sub_1A15A93F0();
      --v26;
    }
    while (v26);
  }
  v28 = v2[8];
  v29 = *(_QWORD *)(v28 + 16);
  sub_1A15A93F0();
  if (v29)
  {
    v30 = v28 + 32;
    do
    {
      v30 += 8;
      sub_1A15A93F0();
      --v29;
    }
    while (v29);
  }
  v31 = v2[9];
  v32 = *(_QWORD *)(v31 + 16);
  sub_1A15A93F0();
  if (v32)
  {
    v33 = v31 + 32;
    do
    {
      v33 += 8;
      sub_1A15A93F0();
      --v32;
    }
    while (v32);
  }
  v34 = v2[10];
  v35 = *(_QWORD *)(v34 + 16);
  sub_1A15A93F0();
  if (v35)
  {
    v36 = v34 + 32;
    do
    {
      v36 += 8;
      sub_1A15A93F0();
      --v35;
    }
    while (v35);
  }
  v37 = v2[11];
  v38 = *(_QWORD *)(v37 + 16);
  sub_1A15A93F0();
  if (v38)
  {
    v39 = v37 + 32;
    do
    {
      v39 += 8;
      sub_1A15A93F0();
      --v38;
    }
    while (v38);
  }
  v40 = v2[12];
  v41 = *(_QWORD *)(v40 + 16);
  sub_1A15A93F0();
  if (v41)
  {
    v42 = v40 + 32;
    do
    {
      v42 += 8;
      sub_1A15A93F0();
      --v41;
    }
    while (v41);
  }
  v43 = v2[13];
  v44 = *(_QWORD *)(v43 + 16);
  sub_1A15A93F0();
  if (v44)
  {
    v45 = v43 + 32;
    do
    {
      v45 += 8;
      sub_1A15A93F0();
      --v44;
    }
    while (v44);
  }
  v46 = v2[14];
  v47 = *(_QWORD *)(v46 + 16);
  sub_1A15A93F0();
  if (v47)
  {
    v48 = v46 + 32;
    do
    {
      v48 += 8;
      sub_1A15A93F0();
      --v47;
    }
    while (v47);
  }
  v49 = v2[15];
  v50 = *(_QWORD *)(v49 + 16);
  sub_1A15A93F0();
  if (v50)
  {
    v51 = v49 + 32;
    do
    {
      v51 += 8;
      sub_1A15A93F0();
      --v50;
    }
    while (v50);
  }
  v52 = v2[16];
  v53 = *(_QWORD *)(v52 + 16);
  sub_1A15A93F0();
  if (v53)
  {
    v54 = v52 + 32;
    do
    {
      v54 += 8;
      sub_1A15A93F0();
      --v53;
    }
    while (v53);
  }
  v55 = v2[17];
  v56 = *(_QWORD *)(v55 + 16);
  sub_1A15A93F0();
  if (v56)
  {
    v57 = v55 + 32;
    do
    {
      v57 += 8;
      sub_1A15A93F0();
      --v56;
    }
    while (v56);
  }
  sub_1A15A93F0();
  v58 = v2[19];
  swift_bridgeObjectRetain();
  sub_1A136D7D8(a1, v58);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A136B644(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A136B680 + 4 * byte_1A15DDB89[a1]))(0x746176726573626FLL, 0xEB000000006E6F69);
}

uint64_t sub_1A136B680()
{
  return 0x676E69646E756F62;
}

uint64_t sub_1A136B6A0()
{
  return 0x6B72616D646E616CLL;
}

uint64_t sub_1A136B6BC()
{
  return 1819045746;
}

uint64_t sub_1A136B6CC()
{
  return 0x6863746970;
}

uint64_t sub_1A136B6E0()
{
  return 7823737;
}

uint64_t sub_1A136B6F0()
{
  return 0x5165727574706163;
}

unint64_t sub_1A136B714()
{
  return 0xD000000000000010;
}

uint64_t sub_1A136B730()
{
  _BYTE v1[72];

  sub_1A15A93E4();
  sub_1A136B328((uint64_t)v1);
  return sub_1A15A9420();
}

uint64_t sub_1A136B770()
{
  _BYTE v1[72];

  sub_1A15A93E4();
  sub_1A136B328((uint64_t)v1);
  return sub_1A15A9420();
}

uint64_t sub_1A136B7AC()
{
  unsigned __int8 *v0;

  return sub_1A136B644(*v0);
}

uint64_t sub_1A136B7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1370B98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A136B7D8()
{
  sub_1A136E7E8();
  return sub_1A15A9474();
}

uint64_t sub_1A136B800()
{
  sub_1A136E7E8();
  return sub_1A15A9480();
}

uint64_t FaceObservation.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;

  v2 = v1;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v4 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C30);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A136E7E8();
  sub_1A15A9468();
  v11 = (int *)type metadata accessor for FaceObservation();
  v12 = (__int128 *)((char *)v2 + v11[9]);
  v13 = v7;
  v14 = v12[1];
  v32 = *v12;
  v33 = v14;
  v36 = 1;
  v15 = sub_1A1285568();
  v31 = v13;
  v16 = v30;
  sub_1A15A92F4();
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v31);
  v27 = v4;
  v28 = v15;
  v26 = v6;
  v30 = v8;
  v17 = *((_QWORD *)v2 + 6);
  v18 = v2[1];
  v32 = *v2;
  v33 = v18;
  v34 = v2[2];
  v35 = v17;
  v36 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C38);
  sub_1A136E96C(&qword_1EE600C40, &qword_1EE600C38, (uint64_t (*)(void))sub_1A136E82C, MEMORY[0x1E0DEE988]);
  sub_1A15A92F4();
  LOBYTE(v32) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  sub_1A136E928(&qword_1EE600C50, MEMORY[0x1E0CAE340]);
  sub_1A15A92F4();
  LOBYTE(v32) = 4;
  sub_1A15A92F4();
  v20 = v30;
  LOBYTE(v32) = 5;
  sub_1A15A92F4();
  v21 = *(_DWORD *)v11[8];
  BYTE4(v32) = *(_BYTE *)(v11[8] + 4);
  LODWORD(v32) = v21;
  v36 = 6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C58);
  sub_1A136E96C(&qword_1EE600C60, &qword_1EE600C58, (uint64_t (*)(void))sub_1A136E870, MEMORY[0x1E0DEE988]);
  sub_1A15A92F4();
  v22 = *(_OWORD *)(v11[14] + 0x10);
  v32 = *(_OWORD *)v11[14];
  v33 = v22;
  v36 = 7;
  sub_1A15A92F4();
  LOBYTE(v32) = 0;
  sub_1A12855AC();
  v23 = (uint64_t)v26;
  v24 = v31;
  sub_1A15A92AC();
  v25 = sub_1A12857D8(&qword_1EE600B88, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
  sub_1A12E2C64(v23, (uint64_t)v11, (uint64_t)&off_1E452CF78, v25);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v23, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v24);
}

uint64_t FaceObservation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  int v27;
  int *v28;
  char *v29;
  _OWORD *v30;
  __int128 v31;
  char *v32;
  int v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  int *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _BYTE v58[60];
  char v59;

  v41 = a2;
  v47 = sub_1A15A88C8();
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v43 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v45 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v52 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v38 - v8;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v38 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C70);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = (int *)type metadata accessor for FaceObservation();
  MEMORY[0x1E0C80A78](v53);
  v51 = (_OWORD *)((char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = a1[3];
  v48 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_1A136E7E8();
  v19 = v49;
  sub_1A15A945C();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  v49 = v9;
  v39 = v6;
  v40 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C38);
  v59 = 2;
  sub_1A136E96C(&qword_1EE600C78, &qword_1EE600C38, (uint64_t (*)(void))sub_1A136E8E4, MEMORY[0x1E0DEE9A0]);
  sub_1A15A9264();
  v20 = v57;
  v21 = v55;
  v22 = v51;
  *v51 = v54;
  v22[1] = v21;
  v22[2] = v56;
  *((_QWORD *)v22 + 6) = v20;
  LOBYTE(v54) = 3;
  sub_1A136E928(&qword_1EE600C88, MEMORY[0x1E0CAE358]);
  v23 = v50;
  sub_1A15A9264();
  v24 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
  v24((char *)v22 + v53[5], v12, v23);
  LOBYTE(v54) = 4;
  v25 = v49;
  sub_1A15A9264();
  v24((char *)v22 + v53[7], v25, v23);
  LOBYTE(v54) = 5;
  v26 = v39;
  sub_1A15A9264();
  v24((char *)v22 + v53[6], v26, v23);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600C58);
  v59 = 6;
  sub_1A136E96C(&qword_1EE600C90, &qword_1EE600C58, (uint64_t (*)(void))sub_1A136E9D0, MEMORY[0x1E0DEE9A0]);
  sub_1A15A9264();
  v27 = v54;
  v28 = v53;
  v29 = (char *)v22 + v53[8];
  v29[4] = BYTE4(v54);
  *(_DWORD *)v29 = v27;
  v59 = 1;
  sub_1A1285610();
  sub_1A15A9264();
  v30 = (_OWORD *)((char *)v22 + v28[9]);
  v31 = v55;
  *v30 = v54;
  v30[1] = v31;
  LOBYTE(v54) = 0;
  sub_1A12855AC();
  sub_1A15A9204();
  v49 = v16;
  LOBYTE(v54) = 0;
  sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v32 = v43;
  sub_1A15A9264();
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))((char *)v22 + v28[10], v32, v47);
  LOBYTE(v54) = 1;
  sub_1A15A924C();
  *(_DWORD *)((char *)v22 + v28[11]) = v33;
  v59 = 3;
  sub_1A1285654();
  sub_1A15A9228();
  *((_BYTE *)v51 + v53[13]) = v54;
  sub_1A12E32A4((uint64_t)v58);
  sub_1A128465C((uint64_t)v58, (uint64_t)v51 + v53[12]);
  v59 = 7;
  sub_1A15A9264();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v44);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v49, v13);
  v34 = (uint64_t)v51;
  v35 = (_OWORD *)((char *)v51 + v53[14]);
  v36 = v55;
  *v35 = v54;
  v35[1] = v36;
  sub_1A12D14E4(v34, v41);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  return sub_1A12D1528(v34);
}

uint64_t sub_1A136C58C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FaceObservation.init(from:)(a1, a2);
}

uint64_t sub_1A136C5A0(_QWORD *a1)
{
  return FaceObservation.encode(to:)(a1);
}

double sub_1A136C5B4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = objc_msgSend(a1, sel_landmarkPoints);
  if (v3)
  {
    v4 = v3;
    sub_1A15A888C();
    v6 = v5;

    type metadata accessor for CGPoint(0);
    v7 = sub_1A15A8C7C();
    *(_QWORD *)(v7 + 16) = 76;
    bzero((void *)(v7 + 32), 0x4C0uLL);
    __asm { BR              X10 }
  }
  *(_QWORD *)(a2 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t sub_1A136C974(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  char v14;
  uint64_t v15;

  v2 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1A134CAC0(0, v3 & ~(v3 >> 63), 0);
    v4 = v15;
    if (v2)
      break;
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return v4;
LABEL_7:
    for (i = 4; ; ++i)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1A1B09470](i - 4, a1) : *(id *)(a1 + 8 * i);
      v7 = v6;
      v8 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v13 = 0;
      v14 = 1;
      MEMORY[0x1A1B091DC](v6, &v13);

      if ((v14 & 1) != 0)
      {
        swift_release();
        return 0;
      }
      v9 = v13;
      v15 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_1A134CAC0((char *)(v10 > 1), v11 + 1, 1);
        v4 = v15;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      *(_DWORD *)(v4 + 4 * v11 + 32) = v9;
      if (v8 == v2)
        return v4;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
    v3 = sub_1A15A91B0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v2 = sub_1A15A91B0();
  swift_bridgeObjectRelease();
  if (v2)
    goto LABEL_7;
  return v4;
}

double sub_1A136CB20@<D0>(void *a1@<X0>, double *a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  int *v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  char *v50;
  id v51;
  id v52;
  int v53;
  int v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  int v61;
  char *v62;
  uint64_t v63;
  CGFloat *v64;
  double result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CGFloat v88[5];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v79 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v80 = (char *)&v66 - v12;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v66 - v14;
  v16 = *a2;
  v17 = a2[1];
  v18 = a2[2];
  v19 = a2[3];
  v20 = (int *)type metadata accessor for FaceObservation();
  objc_msgSend(a1, sel_boundingBox);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = objc_msgSend(a1, sel_providesBoundsNormalizedToROI);
  v77 = v16;
  v88[0] = v16;
  v88[1] = v17;
  v88[2] = v18;
  v88[3] = v19;
  sub_1A12857D8(&qword_1EE5FE110, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&unk_1A15DE054);
  sub_1A12F5DAC(v29, v88, v22, v24, v26, v28);
  v31 = v81;
  v30 = v82;
  v32 = v83;
  v33 = v84;
  v34 = VNFaceObservation.faceCaptureQuality.getter();
  if ((v34 & 0x100000000) != 0)
  {
    v39 = 0xF400000000;
  }
  else
  {
    v35 = v34;
    v36 = objc_msgSend(a1, sel_faceCaptureQualityOriginatingRequestSpecifier);
    if (v36)
    {
      v37 = v36;
      sub_1A1346384((char *)&v81);

      v38 = v81;
    }
    else
    {
      v38 = 252;
    }
    v39 = v35 | (unint64_t)(v38 << 32);
  }
  sub_1A136C5B4(a1, (uint64_t)&v81);
  v75 = a3;
  v74 = v10;
  v78 = v30;
  v76 = v39;
  v73 = v81;
  v72 = v82;
  v71 = v83;
  v70 = v84;
  v69 = v85;
  v68 = v86;
  v67 = v87;
  v40 = objc_msgSend(a1, sel_roll);
  if (v40)
  {
    v41 = v40;
    objc_msgSend(v40, sel_doubleValue);

  }
  v42 = (void *)objc_opt_self();
  v43 = objc_msgSend(v42, sel_radians);
  sub_1A128DB40(0, (unint64_t *)&qword_1EE600B80);
  sub_1A15A87B4();
  v44 = objc_msgSend(a1, "yaw");
  if (v44)
  {
    v45 = v44;
    objc_msgSend(v44, sel_doubleValue);

  }
  v46 = objc_msgSend(v42, sel_radians);
  sub_1A15A87B4();
  v47 = objc_msgSend(a1, sel_pitch);
  if (v47)
  {
    v48 = v47;
    objc_msgSend(v47, sel_doubleValue);

  }
  v49 = v75;
  v50 = v74;
  v51 = objc_msgSend(v42, sel_radians);
  sub_1A15A87B4();
  v52 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v54 = v53;
  v55 = objc_msgSend(a1, sel_originatingRequestSpecifier);
  sub_1A1346384((char *)&v81);

  LOBYTE(v55) = v81;
  v56 = v72;
  *(_QWORD *)a4 = v73;
  *((_QWORD *)a4 + 1) = v56;
  v57 = v70;
  *((_QWORD *)a4 + 2) = v71;
  *((_QWORD *)a4 + 3) = v57;
  v58 = v68;
  *((_QWORD *)a4 + 4) = v69;
  *((_QWORD *)a4 + 5) = v58;
  *((_QWORD *)a4 + 6) = v67;
  v59 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
  v59(&a4[v20[5]], v15, v8);
  v59(&a4[v20[6]], v80, v8);
  v59(&a4[v20[7]], v50, v8);
  v60 = &a4[v20[8]];
  v61 = v76;
  v60[4] = BYTE4(v76);
  *(_DWORD *)v60 = v61;
  v62 = &a4[v20[9]];
  v63 = v78;
  *(_QWORD *)v62 = v31;
  *((_QWORD *)v62 + 1) = v63;
  *((_QWORD *)v62 + 2) = v32;
  *((_QWORD *)v62 + 3) = v33;
  *(_DWORD *)&a4[v20[11]] = v54;
  sub_1A128465C(v49, (uint64_t)&a4[v20[12]]);
  a4[v20[13]] = (char)v55;
  v64 = (CGFloat *)&a4[v20[14]];
  result = v77;
  *v64 = v77;
  v64[1] = v17;
  v64[2] = v18;
  v64[3] = v19;
  return result;
}

double FaceObservation.init(_:)@<D0>(void *a1@<X0>, char *a2@<X8>)
{
  __int128 v5;
  __n128 v6[2];
  __int128 v7;
  char v8;

  static NormalizedRect.fullImage.getter(v6);
  objc_msgSend(a1, sel_timeRange, *(_OWORD *)v6, *(_OWORD *)&v6[1]);
  v8 = 0;
  return sub_1A136CB20(a1, (double *)&v5, (uint64_t)&v7, a2);
}

double sub_1A136D114@<D0>(void *a1@<X0>, _OWORD *a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  __int128 v4;
  _OWORD v6[2];

  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  return sub_1A136CB20(a1, (double *)v6, a3, a4);
}

unint64_t sub_1A136D13C(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
LABEL_6:
    if (!v8)
    {
      v12 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
      }
      else
      {
        if (v12 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v12);
        ++v4;
        if (v13)
          goto LABEL_23;
        v4 = v12 + 1;
        if (v12 + 1 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (v13)
          goto LABEL_23;
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (v13)
          goto LABEL_23;
        v4 = v12 + 3;
        if (v12 + 3 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (v13)
          goto LABEL_23;
        v14 = v12 + 4;
        if (v14 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v14);
        if (v13)
        {
          v4 = v14;
LABEL_23:
          v8 = (v13 - 1) & v13;
          v11 = __clz(__rbit64(v13)) + (v4 << 6);
          goto LABEL_24;
        }
        while (1)
        {
          v4 = v14 + 1;
          if (__OFADD__(v14, 1))
            break;
          if (v4 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          ++v14;
          if (v13)
            goto LABEL_23;
        }
      }
      __break(1u);
      return result;
    }
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_24:
    v15 = *(_QWORD **)(*(_QWORD *)(v3 + 56) + 8 * v11);
    result = sub_1A136D308(*(_BYTE *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v16 & 1) == 0)
      return 0;
    v17 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * result);
    v18 = v17[2];
    if (v18 != v15[2])
      return 0;
    if (v18)
      v19 = v17 == v15;
    else
      v19 = 1;
    if (!v19)
    {
      if (v17[4] != v15[4])
        return 0;
      v20 = v18 - 1;
      if (v20)
        break;
    }
  }
  v21 = v17 + 5;
  v22 = v15 + 5;
  while (1)
  {
    v24 = *v21++;
    v23 = v24;
    v25 = *v22++;
    if (v23 != v25)
      return 0;
    if (!--v20)
      goto LABEL_6;
  }
}

unint64_t sub_1A136D308(unsigned __int8 a1)
{
  uint64_t v2;

  sub_1A15A93E4();
  sub_1A15A93F0();
  v2 = sub_1A15A9420();
  return sub_1A136D374(a1, v2);
}

char *sub_1A136D360(uint64_t a1)
{
  return sub_1A130DF90(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_1A136D374(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

char *sub_1A136D414(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A136D430(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A136D430(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE600390);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_1A136D528(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  float64x2_t *v14;
  float32x2_t *v15;
  unint64_t v16;
  float32x2_t v17;
  uint64_t v18;
  double *v19;
  unint64_t v20;
  const float *v21;
  double *v22;
  double *v23;
  float32x4x2_t v24;
  float64x2x2_t v25;
  float64x2x2_t v26;

  v10 = sub_1A15A87F0();
  if (v10)
  {
    v11 = sub_1A15A8808();
    if (__OFSUB__(a1, v11))
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v10 += a1 - v11;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_18;
  }
  result = sub_1A15A87FC();
  if (!v10)
  {
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v18 = 0xD000000000000019;
    *(_QWORD *)(v18 + 8) = 0x80000001A15FE970;
    *(_BYTE *)(v18 + 16) = 0;
    return swift_willThrow();
  }
  if ((a4 & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a4)
  {
    a3 = *a5;
    a2 = a4 - 1;
    if (a4 - 1 < *(_QWORD *)(*a5 + 16))
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      *a5 = a3;
      if ((result & 1) != 0)
      {
        if (a4 < 0x14)
          goto LABEL_11;
        goto LABEL_22;
      }
LABEL_21:
      result = (uint64_t)sub_1A136D360(a3);
      a3 = result;
      if (a4 < 0x14)
        goto LABEL_11;
LABEL_22:
      v13 = 0;
      v19 = (double *)(a3 + 32);
      if (a3 + 32 + 16 * a2 < a3 + 32 || a3 + 40 + 16 * a2 < a3 + 40 || a2 >> 60)
        goto LABEL_12;
      if ((unint64_t)v19 >= v10 + 8 * a4 || a3 + 16 * a4 + 32 <= v10)
      {
        v13 = a4 & 0xFFFFFFFFFFFFFFFCLL;
        v20 = a4 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = (const float *)v10;
        do
        {
          v24 = vld2q_f32(v21);
          v21 += 8;
          v25.val[0] = vcvt_hight_f64_f32(v24.val[0]);
          v25.val[1] = vcvt_hight_f64_f32(v24.val[1]);
          v26.val[0] = vcvtq_f64_f32(*(float32x2_t *)v24.val[0].f32);
          v26.val[1] = vcvtq_f64_f32(*(float32x2_t *)v24.val[1].f32);
          v22 = v19 + 8;
          vst2q_f64(v19, v26);
          v23 = v19 + 4;
          vst2q_f64(v23, v25);
          v19 = v22;
          v20 -= 4;
        }
        while (v20);
        if (v13 == a4)
          goto LABEL_14;
        goto LABEL_12;
      }
LABEL_11:
      v13 = 0;
LABEL_12:
      v14 = (float64x2_t *)(a3 + 16 * v13 + 32);
      v15 = (float32x2_t *)(v10 + 8 * v13);
      v16 = a4 - v13;
      do
      {
        v17 = *v15++;
        *v14++ = vcvtq_f64_f32(v17);
        --v16;
      }
      while (v16);
LABEL_14:
      *a5 = a3;
      return result;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_1A136D700(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1A15A93F0();
  if (v3)
  {
    v5 = a2 + 32;
    do
    {
      v5 += 4;
      result = sub_1A15A9408();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1A136D754(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1A15A93F0();
  if (v3)
  {
    v5 = a2 + 32;
    sub_1A12956F0();
    do
    {
      v5 += 16;
      result = sub_1A15A8B44();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1A136D7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_19;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      goto LABEL_23;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v7)
        goto LABEL_23;
      v14 = *(_QWORD *)(v3 + 8 * v10);
      if (!v14)
        break;
    }
LABEL_18:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_19:
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v12);
    sub_1A15A93F0();
    sub_1A15A93F0();
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = v16 + 32;
      do
      {
        v18 += 8;
        sub_1A15A93F0();
        --v17;
      }
      while (v17);
    }
    result = sub_1A15A9420();
    v9 ^= result;
  }
  v15 = v13 + 2;
  if (v15 >= v7)
  {
LABEL_23:
    swift_release();
    return sub_1A15A93F0();
  }
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v7)
      goto LABEL_23;
    v14 = *(_QWORD *)(v3 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_1A136D980(uint64_t a1, uint64_t a2)
{
  if (sub_1A1369610(*(_QWORD **)a1, *(_QWORD **)a2)
    && sub_1A1369610(*(_QWORD **)(a1 + 8), *(_QWORD **)(a2 + 8))
    && sub_1A1369610(*(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16))
    && sub_1A1369610(*(_QWORD **)(a1 + 24), *(_QWORD **)(a2 + 24))
    && sub_1A1369610(*(_QWORD **)(a1 + 32), *(_QWORD **)(a2 + 32))
    && sub_1A1369610(*(_QWORD **)(a1 + 40), *(_QWORD **)(a2 + 40))
    && sub_1A1369610(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48))
    && sub_1A1369610(*(_QWORD **)(a1 + 56), *(_QWORD **)(a2 + 56))
    && sub_1A1369610(*(_QWORD **)(a1 + 64), *(_QWORD **)(a2 + 64))
    && sub_1A1369610(*(_QWORD **)(a1 + 72), *(_QWORD **)(a2 + 72))
    && sub_1A1369610(*(_QWORD **)(a1 + 80), *(_QWORD **)(a2 + 80))
    && sub_1A1369610(*(_QWORD **)(a1 + 88), *(_QWORD **)(a2 + 88))
    && sub_1A1369610(*(_QWORD **)(a1 + 96), *(_QWORD **)(a2 + 96))
    && sub_1A1369610(*(_QWORD **)(a1 + 104), *(_QWORD **)(a2 + 104))
    && sub_1A1369610(*(_QWORD **)(a1 + 112), *(_QWORD **)(a2 + 112))
    && sub_1A1369610(*(_QWORD **)(a1 + 120), *(_QWORD **)(a2 + 120))
    && sub_1A1369610(*(_QWORD **)(a1 + 128), *(_QWORD **)(a2 + 128))
    && sub_1A1369610(*(_QWORD **)(a1 + 136), *(_QWORD **)(a2 + 136))
    && *(_QWORD *)(a1 + 144) == *(_QWORD *)(a2 + 144))
  {
    return sub_1A136D13C(*(_QWORD *)(a1 + 152), *(_QWORD *)(a2 + 152));
  }
  else
  {
    return 0;
  }
}

BOOL _s6Vision15FaceObservationV14CaptureQualityV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  if (*(float *)a1 != *(float *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a2 + 4);
  if (*(unsigned __int8 *)(a1 + 4) <= 0xFBu)
  {
    if (v2 > 0xFB)
      return 0;
    sub_1A12862A0();
    return (sub_1A15A8B80() & 1) != 0;
  }
  return v2 > 0xFB;
}

BOOL _s6Vision15FaceObservationV11Landmarks2DV6RegionV2eeoiySbAG_AGtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  CGSize v8;
  CGPoint v9;
  CGSize v10;
  CGPoint v11;
  CGRect v12;
  CGRect v13;

  if (*a1 != *a2)
    return 0;
  v2 = a1[24];
  v10 = (CGSize)*((_OWORD *)a1 + 3);
  v11 = (CGPoint)*((_OWORD *)a1 + 2);
  v3 = a2[24];
  v8 = (CGSize)*((_OWORD *)a2 + 3);
  v9 = (CGPoint)*((_OWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a1 + 2);
  if ((sub_1A12960AC(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)) & 1) == 0)
    return 0;
  if (v5)
  {
    if (!v4 || !sub_1A13695A4(v5, v4))
      return 0;
  }
  else if (v4)
  {
    return 0;
  }
  if (v2 <= 0xFB)
  {
    LOBYTE(v13.origin.x) = v2;
    if (v3 <= 0xFB)
    {
      LOBYTE(v12.origin.x) = v3;
      sub_1A12862A0();
      if ((sub_1A15A8B80() & 1) != 0)
        goto LABEL_13;
    }
    return 0;
  }
  if (v3 <= 0xFB)
    return 0;
LABEL_13:
  v13.origin = v11;
  v13.size = v10;
  v12.origin = v9;
  v12.size = v8;
  return static NormalizedRect.== infix(_:_:)(&v13, &v12);
}

BOOL _s6Vision15FaceObservationV11Landmarks2DV2eeoiySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  CGSize v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  CGSize v10;
  CGSize v11;
  CGPoint v12;
  CGPoint v13;
  CGRect v14;
  CGRect v15;

  v3 = *((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 2);
  v4 = *(CGSize *)(a1 + 40);
  v5 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  v12 = *(CGPoint *)(a2 + 24);
  v13 = *(CGPoint *)(a1 + 24);
  v11 = *(CGSize *)(a2 + 40);
  if (*a1 <= 0xFBu)
  {
    LOBYTE(v15.origin.x) = *a1;
    if (v5 > 0xFB)
      return 0;
    v10 = v4;
    LOBYTE(v14.origin.x) = v5;
    sub_1A12862A0();
    if ((sub_1A15A8B80() & 1) == 0)
      return 0;
  }
  else
  {
    v10 = *(CGSize *)(a1 + 40);
    if (v5 <= 0xFB)
      return 0;
  }
  if ((sub_1A12960AC(v3, v7) & 1) == 0)
    return 0;
  if (!v2)
  {
    if (!v6)
      goto LABEL_10;
    return 0;
  }
  if (!v6 || !sub_1A13695A4(v2, v6))
    return 0;
LABEL_10:
  v15.origin = v13;
  v15.size = v10;
  v14.origin = v12;
  v14.size = v11;
  return static NormalizedRect.== infix(_:_:)(&v15, &v14);
}

BOOL _s6Vision15FaceObservationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t *a2)
{
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v24;
  CGSize v25;
  char *v26;
  CGSize v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double *v31;
  CGFloat v32;
  CGFloat v33;
  CGSize v34;
  uint64_t v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  CGSize v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  CGSize v46;
  char *v47;
  CGSize v48;
  uint64_t v49;
  CGRect v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  CGRect v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CGRect v60;
  CGRect v61;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *a2;
  v10 = *((double *)a2 + 1);
  v12 = *((double *)a2 + 2);
  v11 = *((double *)a2 + 3);
  v14 = a2[4];
  v13 = a2[5];
  v15 = a2[6];
  if (v3 == 0.0)
  {
    v49 = *(_QWORD *)a1;
    if (v10 == 0.0)
      goto LABEL_6;
LABEL_13:
    sub_1A13674AC(v9, *(uint64_t *)&v10);
    sub_1A136E8B4(v49, *(uint64_t *)&v3);
    sub_1A136E8B4(v9, *(uint64_t *)&v10);
    return 0;
  }
  v56.origin.x = *(CGFloat *)a1;
  v56.origin.y = v3;
  v56.size.width = v5;
  v56.size.height = v4;
  v57 = v7;
  v58 = v6;
  v59 = v8;
  if (v10 == 0.0)
  {
    v49 = *(_QWORD *)&v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
  LOBYTE(v52.origin.x) = v9;
  v52.origin.y = v10;
  v52.size.width = v12;
  v52.size.height = v11;
  v53 = v14;
  v54 = v13;
  v55 = v15;
  v16 = *(_QWORD *)&v2;
  sub_1A13674AC(*(uint64_t *)&v2, *(uint64_t *)&v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = _s6Vision15FaceObservationV11Landmarks2DV2eeoiySbAE_AEtFZ_0((unsigned __int8 *)&v56, (unsigned __int8 *)&v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A136E8B4(v16, *(uint64_t *)&v3);
  if (!v17)
    return 0;
LABEL_6:
  v18 = (int *)type metadata accessor for FaceObservation();
  sub_1A128DB40(0, (unint64_t *)&qword_1EE600B80);
  if ((sub_1A15A87A8() & 1) == 0 || (sub_1A15A87A8() & 1) == 0 || (sub_1A15A87A8() & 1) == 0)
    return 0;
  v19 = v18[8];
  v20 = *(unsigned int *)(a1 + v19) | ((unint64_t)*(unsigned __int8 *)(a1 + v19 + 4) << 32);
  v21 = *(unsigned int *)((char *)a2 + v19) | ((unint64_t)*((unsigned __int8 *)a2 + v19 + 4) << 32);
  if ((v20 & 0xFC00000000) == 0xF400000000)
  {
    if ((v21 & 0xFC00000000) != 0xF400000000)
      return 0;
  }
  else
  {
    LODWORD(v56.origin.x) = v20;
    BYTE4(v56.origin.x) = BYTE4(v20);
    if ((v21 & 0xFC00000000) == 0xF400000000)
      return 0;
    LODWORD(v52.origin.x) = v21;
    BYTE4(v52.origin.x) = BYTE4(v21);
    if (!_s6Vision15FaceObservationV14CaptureQualityV2eeoiySbAE_AEtFZ_0((uint64_t)&v56, (uint64_t)&v52))
      return 0;
  }
  v24 = v18[9];
  v25 = *(CGSize *)(a1 + v24 + 16);
  v56.origin = *(CGPoint *)(a1 + v24);
  v56.size = v25;
  v26 = (char *)a2 + v24;
  v27 = (CGSize)*((_OWORD *)v26 + 1);
  v52.origin = *(CGPoint *)v26;
  v52.size = v27;
  if (!static NormalizedRect.== infix(_:_:)(&v56, &v52)
    || (sub_1A15A88A4() & 1) == 0
    || *(float *)(a1 + v18[11]) != *(float *)((char *)a2 + v18[11]))
  {
    return 0;
  }
  v28 = v18[12];
  v29 = a1 + v28;
  v30 = *(_BYTE *)(a1 + v28 + 48);
  v31 = (double *)((char *)a2 + v28);
  if ((v30 & 1) != 0)
  {
    if (!*((_BYTE *)v31 + 48))
      return 0;
  }
  else
  {
    if (((_BYTE)v31[6] & 1) != 0)
      return 0;
    v32 = *(double *)v29;
    v33 = *(double *)(v29 + 8);
    v34 = *(CGSize *)(v29 + 16);
    v36 = *(_QWORD *)(v29 + 32);
    v35 = *(_QWORD *)(v29 + 40);
    v37 = *v31;
    v38 = v31[1];
    v39 = (CGSize)*((_OWORD *)v31 + 1);
    v41 = *((_QWORD *)v31 + 4);
    v40 = *((_QWORD *)v31 + 5);
    v52.origin.x = v32;
    v52.origin.y = v33;
    v52.size = v34;
    v53 = v36;
    v54 = v35;
    v56.origin.x = v37;
    v56.origin.y = v38;
    v56.size = v39;
    v57 = v41;
    v58 = v40;
    if ((sub_1A15A8EC8() & 1) == 0)
      return 0;
  }
  v42 = v18[13];
  v43 = *(unsigned __int8 *)(a1 + v42);
  v44 = *((unsigned __int8 *)a2 + v42);
  if (v43 <= 0xFB)
  {
    LOBYTE(v61.origin.x) = v43;
    if (v44 > 0xFB)
      return 0;
    LOBYTE(v60.origin.x) = v44;
    sub_1A12862A0();
    if ((sub_1A15A8B80() & 1) == 0)
      return 0;
LABEL_31:
    v45 = v18[14];
    v46 = *(CGSize *)(a1 + v45 + 16);
    v61.origin = *(CGPoint *)(a1 + v45);
    v61.size = v46;
    v47 = (char *)a2 + v45;
    v48 = (CGSize)*((_OWORD *)v47 + 1);
    v60.origin = *(CGPoint *)v47;
    v60.size = v48;
    return static NormalizedRect.== infix(_:_:)(&v61, &v60);
  }
  if (v44 > 0xFB)
    goto LABEL_31;
  return 0;
}

unint64_t sub_1A136E174()
{
  unint64_t result;

  result = qword_1EE600B90;
  if (!qword_1EE600B90)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for RequestDescriptor, &type metadata for RequestDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EE600B90);
  }
  return result;
}

unint64_t sub_1A136E1B8()
{
  unint64_t result;

  result = qword_1EE63AC98;
  if (!qword_1EE63AC98)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE8EC, &type metadata for FaceObservation.CaptureQuality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63AC98);
  }
  return result;
}

unint64_t sub_1A136E1FC()
{
  unint64_t result;

  result = qword_1EE63ACA0;
  if (!qword_1EE63ACA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE89C, &type metadata for FaceObservation.Landmarks2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63ACA0);
  }
  return result;
}

uint64_t sub_1A136E240(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE600BB0);
    v8 = a2;
    result = MEMORY[0x1A1B0B774](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A136E2A0()
{
  unint64_t result;

  result = qword_1EE63ACA8;
  if (!qword_1EE63ACA8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE84C, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63ACA8);
  }
  return result;
}

unint64_t sub_1A136E2E4()
{
  unint64_t result;

  result = qword_1EE63ACB0;
  if (!qword_1EE63ACB0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE7FC, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.OpenPathCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63ACB0);
  }
  return result;
}

unint64_t sub_1A136E328()
{
  unint64_t result;

  result = qword_1EE63ACB8;
  if (!qword_1EE63ACB8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE7AC, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.DisconnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63ACB8);
  }
  return result;
}

unint64_t sub_1A136E36C()
{
  unint64_t result;

  result = qword_1EE63ACC0;
  if (!qword_1EE63ACC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE75C, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.ClosedPathCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63ACC0);
  }
  return result;
}

uint64_t sub_1A136E3B0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65726F6373 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001A15FE8D0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1A136E494(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600CF0);
  v3 = (_QWORD *)sub_1A15A91D4();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_1A136D308(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain();
    result = sub_1A136D308(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A136E594(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  double v16;
  double v17;
  CGPoint v18;
  unint64_t v19;
  unint64_t v20;
  _OWORD v22[3];
  uint64_t v23;
  __int128 v24;
  __int128 v25;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    sub_1A136D414(0, v4, 0);
    v5 = v23;
    v13 = (__int128 *)(a1 + 32);
    v14 = *(_OWORD *)(a2 + 48);
    v24 = *(_OWORD *)(a2 + 32);
    v25 = v14;
    do
    {
      v15 = *v13;
      v22[0] = v24;
      v22[1] = v25;
      v22[2] = v15;
      v16 = a3;
      v17 = a4;
      v18 = NormalizedPoint.toImageCoordinates(from:imageSize:origin:)(*(Vision::NormalizedRect *)(&v10 - 3), (CGSize)__PAIR128__(v12, v11), (Vision::CoordinateOrigin)v22);
      v23 = v5;
      v20 = *(_QWORD *)(v5 + 16);
      v19 = *(_QWORD *)(v5 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_1A136D414((char *)(v19 > 1), v20 + 1, 1);
        v5 = v23;
      }
      *(_QWORD *)(v5 + 16) = v20 + 1;
      *(CGPoint *)(v5 + 16 * v20 + 32) = v18;
      ++v13;
      --v4;
    }
    while (v4);
  }
  return v5;
}

uint64_t sub_1A136E6B8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A136E6E8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1A136E71C()
{
  unint64_t result;

  result = qword_1EE63ACC8;
  if (!qword_1EE63ACC8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE70C, &type metadata for FaceObservation.Landmarks2D.Region.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63ACC8);
  }
  return result;
}

unint64_t sub_1A136E760()
{
  unint64_t result;

  result = qword_1EE600C18;
  if (!qword_1EE600C18)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.Landmarks2D.Region.PointsClassification, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification);
    atomic_store(result, (unint64_t *)&qword_1EE600C18);
  }
  return result;
}

unint64_t sub_1A136E7A4()
{
  unint64_t result;

  result = qword_1EE600C28;
  if (!qword_1EE600C28)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.Landmarks2D.Region.PointsClassification, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification);
    atomic_store(result, (unint64_t *)&qword_1EE600C28);
  }
  return result;
}

unint64_t sub_1A136E7E8()
{
  unint64_t result;

  result = qword_1EE63ACD0[0];
  if (!qword_1EE63ACD0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE6BC, &type metadata for FaceObservation.CodingKeys);
    atomic_store(result, qword_1EE63ACD0);
  }
  return result;
}

unint64_t sub_1A136E82C()
{
  unint64_t result;

  result = qword_1EE600C48;
  if (!qword_1EE600C48)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.Landmarks2D, &type metadata for FaceObservation.Landmarks2D);
    atomic_store(result, (unint64_t *)&qword_1EE600C48);
  }
  return result;
}

unint64_t sub_1A136E870()
{
  unint64_t result;

  result = qword_1EE600C68;
  if (!qword_1EE600C68)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.CaptureQuality, &type metadata for FaceObservation.CaptureQuality);
    atomic_store(result, (unint64_t *)&qword_1EE600C68);
  }
  return result;
}

uint64_t sub_1A136E8B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1A136E8E4()
{
  unint64_t result;

  result = qword_1EE600C80;
  if (!qword_1EE600C80)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.Landmarks2D, &type metadata for FaceObservation.Landmarks2D);
    atomic_store(result, (unint64_t *)&qword_1EE600C80);
  }
  return result;
}

uint64_t sub_1A136E928(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE5FDC08);
    result = MEMORY[0x1A1B0B774](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A136E96C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1A1B0B774](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A136E9D0()
{
  unint64_t result;

  result = qword_1EE600C98;
  if (!qword_1EE600C98)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.CaptureQuality, &type metadata for FaceObservation.CaptureQuality);
    atomic_store(result, (unint64_t *)&qword_1EE600C98);
  }
  return result;
}

uint64_t sub_1A136EA14(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE600CA0, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
  a1[2] = sub_1A12857D8(&qword_1EE600CA8, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
  a1[3] = sub_1A12857D8(&qword_1EE600CB0, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
  result = sub_1A12857D8(&qword_1EE5FE0B0, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A136EAA8()
{
  return sub_1A12857D8((unint64_t *)&qword_1EE5FDCC0, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
}

unint64_t sub_1A136EAD8()
{
  unint64_t result;

  result = qword_1EE600CB8;
  if (!qword_1EE600CB8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.CaptureQuality, &type metadata for FaceObservation.CaptureQuality);
    atomic_store(result, (unint64_t *)&qword_1EE600CB8);
  }
  return result;
}

unint64_t sub_1A136EB20()
{
  unint64_t result;

  result = qword_1EE600CC0;
  if (!qword_1EE600CC0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.Landmarks2D, &type metadata for FaceObservation.Landmarks2D);
    atomic_store(result, (unint64_t *)&qword_1EE600CC0);
  }
  return result;
}

unint64_t sub_1A136EB68()
{
  unint64_t result;

  result = qword_1EE600CC8;
  if (!qword_1EE600CC8)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.Landmarks2D.Region.PointsClassification, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification);
    atomic_store(result, (unint64_t *)&qword_1EE600CC8);
  }
  return result;
}

unint64_t sub_1A136EBB0()
{
  unint64_t result;

  result = qword_1EE600CD0;
  if (!qword_1EE600CD0)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for FaceObservation.Landmarks2D.Region, &type metadata for FaceObservation.Landmarks2D.Region);
    atomic_store(result, (unint64_t *)&qword_1EE600CD0);
  }
  return result;
}

uint64_t sub_1A136EBF4(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE600B88, (uint64_t (*)(uint64_t))type metadata accessor for FaceObservation, (uint64_t)&protocol conformance descriptor for FaceObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FaceObservation(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = a2[2];
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 48) = a2[6];
    }
    v11 = a3[5];
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    v15(a1 + a3[6], (uint64_t)a2 + a3[6], v14);
    v15(a1 + a3[7], (uint64_t)a2 + a3[7], v14);
    v16 = a3[8];
    v17 = a3[9];
    v18 = a1 + v16;
    v19 = (uint64_t)a2 + v16;
    *(_DWORD *)v18 = *(_DWORD *)v19;
    *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
    v20 = (_OWORD *)(a1 + v17);
    v21 = (_OWORD *)((char *)a2 + v17);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = a3[10];
    v24 = a1 + v23;
    v25 = (uint64_t)a2 + v23;
    v26 = sub_1A15A88C8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
    v27 = a3[12];
    *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)((char *)a2 + a3[11]);
    v28 = a1 + v27;
    v29 = (uint64_t)a2 + v27;
    v30 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *(_OWORD *)(v28 + 16) = v30;
    *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
    *(_BYTE *)(v28 + 48) = *(_BYTE *)(v29 + 48);
    v31 = a3[14];
    *(_BYTE *)(a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    v32 = (_OWORD *)(a1 + v31);
    v33 = (_OWORD *)((char *)a2 + v31);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
  }
  return a1;
}

uint64_t destroy for FaceObservation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + a2[5];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  v6(a1 + a2[7], v5);
  v7 = a1 + a2[10];
  v8 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for FaceObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v13(a1 + a3[6], a2 + a3[6], v12);
  v13(a1 + a3[7], a2 + a3[7], v12);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  v18 = (_OWORD *)(a1 + v15);
  v19 = (_OWORD *)(a2 + v15);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[10];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  v25 = a3[12];
  *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)(a2 + a3[11]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
  *(_BYTE *)(v26 + 48) = *(_BYTE *)(v27 + 48);
  v29 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v30 = (_OWORD *)(a1 + v29);
  v31 = (_OWORD *)(a2 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  return a1;
}

uint64_t assignWithCopy for FaceObservation(uint64_t a1, __int128 *a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;

  v6 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    }
    else
    {
      sub_1A136F27C(a1);
      v9 = a2[1];
      v8 = a2[2];
      v10 = *a2;
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 16) = v9;
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v10;
    }
  }
  else if (v6)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    v7 = *(__int128 *)((char *)a2 + 24);
    *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
    *(_OWORD *)(a1 + 24) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *a2;
    v12 = a2[1];
    v13 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)a1 = v11;
  }
  v14 = a3[5];
  v15 = a1 + v14;
  v16 = (uint64_t)a2 + v14;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24);
  v18(v15, v16, v17);
  v18(a1 + a3[6], (uint64_t)a2 + a3[6], v17);
  v18(a1 + a3[7], (uint64_t)a2 + a3[7], v17);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = (int *)((char *)a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 4) = *((_BYTE *)v21 + 4);
  *(_DWORD *)v20 = v22;
  v23 = a3[9];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  v24[2] = v25[2];
  v24[3] = v25[3];
  v26 = a3[10];
  v27 = a1 + v26;
  v28 = (uint64_t)a2 + v26;
  v29 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)((char *)a2 + a3[11]);
  v30 = a3[12];
  v31 = a1 + v30;
  v32 = (uint64_t)a2 + v30;
  v33 = *(_BYTE *)(v32 + 48);
  v35 = *(_OWORD *)(v32 + 16);
  v34 = *(_OWORD *)(v32 + 32);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v35;
  *(_OWORD *)(v31 + 32) = v34;
  *(_BYTE *)(v31 + 48) = v33;
  *(_BYTE *)(a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v36 = a3[14];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  *v37 = *v38;
  v37[1] = v38[1];
  v37[2] = v38[2];
  v37[3] = v38[3];
  return a1;
}

uint64_t sub_1A136F27C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for FaceObservation(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(a1 + a3[6], a2 + a3[6], v10);
  v11(a1 + a3[7], a2 + a3[7], v10);
  v12 = a3[8];
  v13 = a3[9];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = (_OWORD *)(a1 + v13);
  v17 = (_OWORD *)(a2 + v13);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[12];
  *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)(a2 + a3[11]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v26;
  *(_OWORD *)(v24 + 32) = *(_OWORD *)(v25 + 32);
  *(_BYTE *)(v24 + 48) = *(_BYTE *)(v25 + 48);
  v27 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v28 = (_OWORD *)(a1 + v27);
  v29 = (_OWORD *)(a2 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  return a1;
}

uint64_t assignWithTake for FaceObservation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    sub_1A136F27C(a1);
LABEL_5:
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    goto LABEL_6;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_6:
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12(a1 + a3[6], a2 + a3[6], v11);
  v12(a1 + a3[7], a2 + a3[7], v11);
  v13 = a3[8];
  v14 = a3[9];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = (_OWORD *)(a1 + v14);
  v18 = (_OWORD *)(a2 + v14);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[10];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = sub_1A15A88C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[12];
  *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)(a2 + a3[11]);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v27;
  *(_OWORD *)(v25 + 32) = *(_OWORD *)(v26 + 32);
  *(_BYTE *)(v25 + 48) = *(_BYTE *)(v26 + 48);
  v28 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  return a1;
}

uint64_t getEnumTagSinglePayload for FaceObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A136F5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 20);
    }
    else
    {
      v11 = sub_1A15A88C8();
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for FaceObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A136F668(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_1A15A88C8();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1A136F708()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A136F7D4();
  if (v0 <= 0x3F)
  {
    sub_1A15A88C8();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1A136F7D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE600CD8)
  {
    sub_1A128DB40(255, (unint64_t *)&qword_1EE600B80);
    v0 = sub_1A15A87E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE600CD8);
  }
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FaceObservation.CaptureQuality(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x21 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 33);
  v3 = (*(unsigned __int8 *)(a1 + 4) >> 3) & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 4) >> 2) & 1));
  v4 = v3 ^ 0x3F;
  v5 = 62 - v3;
  if (v4 >= 0x21)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FaceObservation.CaptureQuality(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x20)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 33;
    if (a3 >= 0x21)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0x21)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = ((a2 ^ 0x3F) >> 3) & 0xFC | (8 * (a2 ^ 0x3F));
  }
  return result;
}

ValueMetadata *type metadata accessor for FaceObservation.CaptureQuality()
{
  return &type metadata for FaceObservation.CaptureQuality;
}

uint64_t initializeWithCopy for FaceObservation.Landmarks2D(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FaceObservation.Landmarks2D(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for FaceObservation.Landmarks2D(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D()
{
  return &type metadata for FaceObservation.Landmarks2D;
}

uint64_t _s6Vision15FaceObservationV11Landmarks2DVwxx_0()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FaceObservation.Landmarks2D.Region(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FaceObservation.Landmarks2D.Region(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for FaceObservation.Landmarks2D.Region(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for FaceObservation.Landmarks2D.Region(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FaceObservation.Landmarks2D.Region(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.Region()
{
  return &type metadata for FaceObservation.Landmarks2D.Region;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.Region.PointsClassification()
{
  return &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification;
}

uint64_t storeEnumTagSinglePayload for FaceObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1A136FC9C + 4 * byte_1A15DDB96[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1A136FCD0 + 4 * byte_1A15DDB91[v4]))();
}

uint64_t sub_1A136FCD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A136FCD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A136FCE0);
  return result;
}

uint64_t sub_1A136FCEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A136FCF4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1A136FCF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A136FD00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FaceObservation.CodingKeys()
{
  return &type metadata for FaceObservation.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FaceObservation.Landmarks2D.Region.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A136FD68 + 4 * byte_1A15DDBA0[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A136FD9C + 4 * byte_1A15DDB9B[v4]))();
}

uint64_t sub_1A136FD9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A136FDA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A136FDACLL);
  return result;
}

uint64_t sub_1A136FDB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A136FDC0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A136FDC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A136FDCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.Region.CodingKeys()
{
  return &type metadata for FaceObservation.Landmarks2D.Region.CodingKeys;
}

uint64_t _s6Vision15FaceObservationV11Landmarks2DV6RegionV20PointsClassificationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A136FE34 + 4 * byte_1A15DDBAA[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A136FE68 + 4 * byte_1A15DDBA5[v4]))();
}

uint64_t sub_1A136FE68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A136FE70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A136FE78);
  return result;
}

uint64_t sub_1A136FE84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A136FE8CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A136FE90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A136FE98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.Region.PointsClassification.CodingKeys()
{
  return &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.CodingKeys;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.Region.PointsClassification.ClosedPathCodingKeys()
{
  return &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.ClosedPathCodingKeys;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.Region.PointsClassification.DisconnectedCodingKeys()
{
  return &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.DisconnectedCodingKeys;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.Region.PointsClassification.OpenPathCodingKeys()
{
  return &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.OpenPathCodingKeys;
}

uint64_t storeEnumTagSinglePayload for FaceObservation.Landmarks2D.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A136FF30 + 4 * byte_1A15DDBB4[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A136FF64 + 4 * byte_1A15DDBAF[v4]))();
}

uint64_t sub_1A136FF64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A136FF6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A136FF74);
  return result;
}

uint64_t sub_1A136FF80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A136FF88);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A136FF8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A136FF94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.CodingKeys()
{
  return &type metadata for FaceObservation.Landmarks2D.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FaceObservation.CaptureQuality.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A136FFFC + 4 * byte_1A15DDBBE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A1370030 + 4 * byte_1A15DDBB9[v4]))();
}

uint64_t sub_1A1370030(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1370038(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1370040);
  return result;
}

uint64_t sub_1A137004C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1370054);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A1370058(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1370060(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FaceObservation.CaptureQuality.CodingKeys()
{
  return &type metadata for FaceObservation.CaptureQuality.CodingKeys;
}

unint64_t sub_1A1370080()
{
  unint64_t result;

  result = qword_1EE63BAF0[0];
  if (!qword_1EE63BAF0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE2C4, &type metadata for FaceObservation.CaptureQuality.CodingKeys);
    atomic_store(result, qword_1EE63BAF0);
  }
  return result;
}

unint64_t sub_1A13700C8()
{
  unint64_t result;

  result = qword_1EE63BD00[0];
  if (!qword_1EE63BD00[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE37C, &type metadata for FaceObservation.Landmarks2D.CodingKeys);
    atomic_store(result, qword_1EE63BD00);
  }
  return result;
}

unint64_t sub_1A1370110()
{
  unint64_t result;

  result = qword_1EE63C210[0];
  if (!qword_1EE63C210[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE524, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.CodingKeys);
    atomic_store(result, qword_1EE63C210);
  }
  return result;
}

unint64_t sub_1A1370158()
{
  unint64_t result;

  result = qword_1EE63C420[0];
  if (!qword_1EE63C420[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE5DC, &type metadata for FaceObservation.Landmarks2D.Region.CodingKeys);
    atomic_store(result, qword_1EE63C420);
  }
  return result;
}

unint64_t sub_1A13701A0()
{
  unint64_t result;

  result = qword_1EE63C630[0];
  if (!qword_1EE63C630[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE694, &type metadata for FaceObservation.CodingKeys);
    atomic_store(result, qword_1EE63C630);
  }
  return result;
}

unint64_t sub_1A13701E8()
{
  unint64_t result;

  result = qword_1EE63C740;
  if (!qword_1EE63C740)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE604, &type metadata for FaceObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63C740);
  }
  return result;
}

unint64_t sub_1A1370230()
{
  unint64_t result;

  result = qword_1EE63C748[0];
  if (!qword_1EE63C748[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE62C, &type metadata for FaceObservation.CodingKeys);
    atomic_store(result, qword_1EE63C748);
  }
  return result;
}

unint64_t sub_1A1370278()
{
  unint64_t result;

  result = qword_1EE63C7D0;
  if (!qword_1EE63C7D0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE54C, &type metadata for FaceObservation.Landmarks2D.Region.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63C7D0);
  }
  return result;
}

unint64_t sub_1A13702C0()
{
  unint64_t result;

  result = qword_1EE63C7D8[0];
  if (!qword_1EE63C7D8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE574, &type metadata for FaceObservation.Landmarks2D.Region.CodingKeys);
    atomic_store(result, qword_1EE63C7D8);
  }
  return result;
}

unint64_t sub_1A1370308()
{
  unint64_t result;

  result = qword_1EE63C860;
  if (!qword_1EE63C860)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE444, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.ClosedPathCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63C860);
  }
  return result;
}

unint64_t sub_1A1370350()
{
  unint64_t result;

  result = qword_1EE63C868[0];
  if (!qword_1EE63C868[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE46C, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.ClosedPathCodingKeys);
    atomic_store(result, qword_1EE63C868);
  }
  return result;
}

unint64_t sub_1A1370398()
{
  unint64_t result;

  result = qword_1EE63C8F0;
  if (!qword_1EE63C8F0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE3F4, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.DisconnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63C8F0);
  }
  return result;
}

unint64_t sub_1A13703E0()
{
  unint64_t result;

  result = qword_1EE63C8F8[0];
  if (!qword_1EE63C8F8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE41C, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.DisconnectedCodingKeys);
    atomic_store(result, qword_1EE63C8F8);
  }
  return result;
}

unint64_t sub_1A1370428()
{
  unint64_t result;

  result = qword_1EE63C980;
  if (!qword_1EE63C980)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE3A4, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.OpenPathCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63C980);
  }
  return result;
}

unint64_t sub_1A1370470()
{
  unint64_t result;

  result = qword_1EE63C988[0];
  if (!qword_1EE63C988[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE3CC, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.OpenPathCodingKeys);
    atomic_store(result, qword_1EE63C988);
  }
  return result;
}

unint64_t sub_1A13704B8()
{
  unint64_t result;

  result = qword_1EE63CA10;
  if (!qword_1EE63CA10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE494, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63CA10);
  }
  return result;
}

unint64_t sub_1A1370500()
{
  unint64_t result;

  result = qword_1EE63CA18[0];
  if (!qword_1EE63CA18[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE4BC, &type metadata for FaceObservation.Landmarks2D.Region.PointsClassification.CodingKeys);
    atomic_store(result, qword_1EE63CA18);
  }
  return result;
}

unint64_t sub_1A1370548()
{
  unint64_t result;

  result = qword_1EE63CAA0;
  if (!qword_1EE63CAA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE2EC, &type metadata for FaceObservation.Landmarks2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63CAA0);
  }
  return result;
}

unint64_t sub_1A1370590()
{
  unint64_t result;

  result = qword_1EE63CAA8[0];
  if (!qword_1EE63CAA8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE314, &type metadata for FaceObservation.Landmarks2D.CodingKeys);
    atomic_store(result, qword_1EE63CAA8);
  }
  return result;
}

unint64_t sub_1A13705D8()
{
  unint64_t result;

  result = qword_1EE63CB30;
  if (!qword_1EE63CB30)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE234, &type metadata for FaceObservation.CaptureQuality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63CB30);
  }
  return result;
}

unint64_t sub_1A1370620()
{
  unint64_t result;

  result = qword_1EE63CB38[0];
  if (!qword_1EE63CB38[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE25C, &type metadata for FaceObservation.CaptureQuality.CodingKeys);
    atomic_store(result, qword_1EE63CB38);
  }
  return result;
}

uint64_t sub_1A1370664(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001CLL && a2 == 0x80000001A15FE8D0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A15FE8F0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001A15FE910 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001A15FE930)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1A13707FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61506465736F6C63 && a2 == 0xEA00000000006874;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6E6F63736964 && a2 == 0xEC00000064657463 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x687461506E65706FLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A1370974(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001A15FE950 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746E696F70 && a2 == 0xE600000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001A15FE910 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001A15FE8D0 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E756F4265636166 && a2 == 0xEF786F42676E6964)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1A1370B98(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E69646E756F62 && a2 == 0xEB00000000786F42 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6B72616D646E616CLL && a2 == 0xE900000000000073 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1819045746 && a2 == 0xE400000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6863746970 && a2 == 0xE500000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7823737 && a2 == 0xE300000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5165727574706163 && a2 == 0xEE007974696C6175 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A15FBE10)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t destroy for FaceObservation.Landmarks2D.Region.FaceMeshParts()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FaceObservation.Landmarks2D.Region.FaceMeshParts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v10 = a2[11];
  a1[10] = a2[10];
  a1[11] = v10;
  v11 = a2[13];
  a1[12] = a2[12];
  a1[13] = v11;
  v12 = a2[15];
  a1[14] = a2[14];
  a1[15] = v12;
  v13 = a2[17];
  a1[16] = a2[16];
  a1[17] = v13;
  v8 = a2[19];
  a1[18] = a2[18];
  a1[19] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FaceObservation.Landmarks2D.Region.FaceMeshParts(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for FaceObservation.Landmarks2D.Region.FaceMeshParts(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FaceObservation.Landmarks2D.Region.FaceMeshParts(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FaceObservation.Landmarks2D.Region.FaceMeshParts(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.Region.FaceMeshParts()
{
  return &type metadata for FaceObservation.Landmarks2D.Region.FaceMeshParts;
}

uint64_t getEnumTagSinglePayload for FaceObservation.Landmarks2D.Region.FaceMeshParts.FaceMeshRegion(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FaceObservation.Landmarks2D.Region.FaceMeshParts.FaceMeshRegion(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1A13715D8 + 4 * byte_1A15DDBC8[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1A137160C + 4 * byte_1A15DDBC3[v4]))();
}

uint64_t sub_1A137160C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1371614(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A137161CLL);
  return result;
}

uint64_t sub_1A1371628(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1371630);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1A1371634(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A137163C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FaceObservation.Landmarks2D.Region.FaceMeshParts.FaceMeshRegion()
{
  return &type metadata for FaceObservation.Landmarks2D.Region.FaceMeshParts.FaceMeshRegion;
}

unint64_t sub_1A137165C()
{
  unint64_t result;

  result = qword_1EE63CC40[0];
  if (!qword_1EE63CC40[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE964, &type metadata for FaceObservation.Landmarks2D.Region.FaceMeshParts.FaceMeshRegion);
    atomic_store(result, qword_1EE63CC40);
  }
  return result;
}

unint64_t sub_1A13716A4()
{
  unint64_t result;

  result = qword_1EE63CD50[0];
  if (!qword_1EE63CD50[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DE9CC, &type metadata for FaceObservation.Landmarks2D.Region.FaceMeshParts);
    atomic_store(result, qword_1EE63CD50);
  }
  return result;
}

BOOL static CoordinateOrigin.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CoordinateOrigin.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t CoordinateOrigin.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

void NormalizedPoint.init(x:y:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

Vision::NormalizedPoint __swiftcall NormalizedPoint.init(normalizedPoint:)(Vision::NormalizedPoint normalizedPoint)
{
  CGFloat *v1;

  *v1 = normalizedPoint.cgPoint.x;
  v1[1] = normalizedPoint.cgPoint.y;
  return normalizedPoint;
}

Vision::NormalizedPoint __swiftcall NormalizedPoint.init(imagePoint:in:)(Vision::NormalizedPoint imagePoint, CGSize in)
{
  CGPoint *v2;
  CGPoint *v3;
  CGPoint v4;

  v3 = v2;
  if (in.width <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (in.width >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((*(_QWORD *)&in.width & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&in.height & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_10;
  }
  if (in.height <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (in.height < 9.22337204e18)
  {
    v4 = VNNormalizedPointForImagePoint(imagePoint.cgPoint, (uint64_t)in.width, (uint64_t)in.height);
    imagePoint.cgPoint.y = v4.y;
    imagePoint.cgPoint.x = v4.x;
    *v3 = v4;
    return imagePoint;
  }
LABEL_12:
  __break(1u);
  return imagePoint;
}

Vision::NormalizedPoint __swiftcall NormalizedPoint.init(imagePoint:in:normalizedTo:)(Vision::NormalizedPoint imagePoint, CGSize in, Vision::NormalizedRect normalizedTo)
{
  CGFloat *v3;
  CGPoint *v4;
  CGPoint *v5;
  CGFloat v6;
  CGFloat v7;
  size_t width;
  size_t height;
  CGPoint v10;
  CGRect v11;

  v5 = v4;
  if (in.width <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (in.width >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((*(_QWORD *)&in.width & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&in.height & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_10;
  }
  if (in.height <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (in.height < 9.22337204e18)
  {
    v6 = *v3;
    v7 = v3[1];
    v11.size.width = v3[2];
    v11.size.height = v3[3];
    width = (uint64_t)in.width;
    height = (uint64_t)in.height;
    v11.origin.x = v6;
    v11.origin.y = v7;
    v10 = VNNormalizedPointForImagePointUsingRegionOfInterest(imagePoint.cgPoint, width, height, v11);
    imagePoint.cgPoint.y = v10.y;
    imagePoint.cgPoint.x = v10.x;
    *v5 = v10;
    return imagePoint;
  }
LABEL_12:
  __break(1u);
  return imagePoint;
}

void static NormalizedPoint.zero.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double NormalizedPoint.cgPoint.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double NormalizedPoint.x.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double NormalizedPoint.y.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

CGPoint __swiftcall NormalizedPoint.toImageCoordinates(from:imageSize:origin:)(Vision::NormalizedRect from, CGSize imageSize, Vision::CoordinateOrigin origin)
{
  _BYTE *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  size_t v10;
  size_t v11;
  double v12;
  double v13;
  uint64_t x;
  uint64_t y;
  double v16;
  CGPoint result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)origin;
  v6 = *(_QWORD *)(origin + 8);
  v7 = *(_QWORD *)(origin + 16);
  v8 = *(_QWORD *)(origin + 24);
  v9 = *v4;
  if ((*v3 & 1) == 0)
  {
    if (from.cgRect.origin.x > -9.22337204e18)
    {
      if (from.cgRect.origin.x < 9.22337204e18)
      {
        if ((*(_QWORD *)&from.cgRect.origin.x & 0x7FF0000000000000) != 0x7FF0000000000000
          && (*(_QWORD *)&from.cgRect.origin.y & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          if (from.cgRect.origin.y > -9.22337204e18)
          {
            if (from.cgRect.origin.y < 9.22337204e18)
            {
              x = (uint64_t)from.cgRect.origin.x;
              y = (uint64_t)from.cgRect.origin.y;
              v16 = 1.0 - v4[1];
              NormalizedRect.verticallyFlipped()();
              v5 = v18;
              v6 = v19;
              v7 = v20;
              v8 = v21;
              v12 = v9;
              v13 = v16;
              v10 = x;
              v11 = y;
              goto LABEL_16;
            }
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (from.cgRect.origin.x <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (from.cgRect.origin.x >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((*(_QWORD *)&from.cgRect.origin.x & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&from.cgRect.origin.y & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_19;
  }
  if (from.cgRect.origin.y <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (from.cgRect.origin.y >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v10 = (uint64_t)from.cgRect.origin.x;
  v11 = (uint64_t)from.cgRect.origin.y;
  v12 = *v4;
  v13 = v4[1];
LABEL_16:
  from.cgRect.origin = VNImagePointForNormalizedPointUsingRegionOfInterest(*(CGPoint *)&v12, v10, v11, *(CGRect *)&v5);
LABEL_27:
  result.y = from.cgRect.origin.y;
  result.x = from.cgRect.origin.x;
  return result;
}

Vision::NormalizedPoint __swiftcall NormalizedPoint.verticallyFlipped()()
{
  double *v0;
  double *v1;
  double v2;
  double v3;
  Vision::NormalizedPoint result;

  v2 = *v1;
  v3 = 1.0 - v1[1];
  *v0 = *v1;
  v0[1] = v3;
  result.cgPoint.y = v3;
  result.cgPoint.x = v2;
  return result;
}

CGPoint __swiftcall NormalizedPoint.toImageCoordinates(_:origin:)(CGPoint _, Vision::CoordinateOrigin origin)
{
  double *v2;
  double x;
  double v4;
  double v5;
  size_t y;
  double v7;
  CGPoint v8;

  x = _.x;
  v4 = *v2;
  v5 = v2[1];
  if ((*(_BYTE *)origin & 1) == 0)
  {
LABEL_9:
    if (x > -9.22337204e18)
    {
      if (x < 9.22337204e18)
      {
        if ((*(_QWORD *)&x & 0x7FF0000000000000) != 0x7FF0000000000000
          && (*(_QWORD *)&_.y & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          if (_.y > -9.22337204e18)
          {
            if (_.y < 9.22337204e18)
            {
              v5 = 1.0 - v5;
              goto LABEL_16;
            }
LABEL_25:
            __break(1u);
            goto _$s6Vision15NormalizedPointV18toImageCoordinates_6originSo7CGPointVSo6CGSizeV_AA16CoordinateOriginOtF;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (x <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (x >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((*(_QWORD *)&x & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&_.y & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_19;
  }
  if (_.y <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (_.y >= 9.22337204e18)
  {
    __break(1u);
    goto LABEL_9;
  }
LABEL_16:
  y = (uint64_t)_.y;
  v7 = v5;
  v8 = VNImagePointForNormalizedPoint(*(CGPoint *)&v4, (uint64_t)x, y);
  _.y = v8.y;
  v4 = v8.x;
_$s6Vision15NormalizedPointV18toImageCoordinates_6originSo7CGPointVSo6CGSizeV_AA16CoordinateOriginOtF:
  _.x = v4;
  return _;
}

uint64_t NormalizedPoint.hash(into:)()
{
  double *v0;

  return sub_1A12A3B04(*v0, v0[1]);
}

unint64_t NormalizedPoint.description.getter()
{
  sub_1A15A9090();
  swift_bridgeObjectRelease();
  sub_1A1296064();
  sub_1A15A8ACC();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  sub_1A15A8ACC();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0xD000000000000013;
}

BOOL static NormalizedPoint.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_1A1371CF4()
{
  return 0x746E696F506763;
}

uint64_t sub_1A1371D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746E696F506763 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A15A9354();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A1371DA0()
{
  sub_1A1371F08();
  return sub_1A15A9474();
}

uint64_t sub_1A1371DC8()
{
  sub_1A1371F08();
  return sub_1A15A9480();
}

uint64_t NormalizedPoint.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600CF8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1371F08();
  sub_1A15A9468();
  v10[0] = v7;
  v10[1] = v8;
  type metadata accessor for CGPoint(0);
  sub_1A1372178(&qword_1EE600D00, MEMORY[0x1E0C9BA20]);
  sub_1A15A92F4();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1A1371F08()
{
  unint64_t result;

  result = qword_1EE63CDE0[0];
  if (!qword_1EE63CDE0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DECAC, &type metadata for NormalizedPoint.CodingKeys);
    atomic_store(result, qword_1EE63CDE0);
  }
  return result;
}

uint64_t NormalizedPoint.hashValue.getter()
{
  double *v0;
  double v1;
  double v2;

  v1 = *v0;
  v2 = v0[1];
  sub_1A15A93E4();
  sub_1A12A3B04(v1, v2);
  return sub_1A15A9420();
}

uint64_t NormalizedPoint.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600D08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1371F08();
  sub_1A15A945C();
  if (!v2)
  {
    type metadata accessor for CGPoint(0);
    sub_1A1372178(&qword_1EE600D10, MEMORY[0x1E0C9BA30]);
    sub_1A15A9264();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1A13720D4()
{
  double *v0;
  double v1;
  double v2;

  v1 = *v0;
  v2 = v0[1];
  sub_1A15A93E4();
  sub_1A12A3B04(v1, v2);
  return sub_1A15A9420();
}

uint64_t sub_1A1372124()
{
  double *v0;

  return sub_1A12A3B04(*v0, v0[1]);
}

uint64_t sub_1A137212C()
{
  double *v0;
  double v1;
  double v2;

  v1 = *v0;
  v2 = v0[1];
  sub_1A15A93E4();
  sub_1A12A3B04(v1, v2);
  return sub_1A15A9420();
}

uint64_t sub_1A1372178(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGPoint(255);
    result = MEMORY[0x1A1B0B774](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A13721BC()
{
  unint64_t result;

  result = qword_1EE600D18;
  if (!qword_1EE600D18)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for CoordinateOrigin, &type metadata for CoordinateOrigin);
    atomic_store(result, (unint64_t *)&qword_1EE600D18);
  }
  return result;
}

BOOL sub_1A1372204(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_1A1372220@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return NormalizedPoint.init(from:)(a1, a2);
}

uint64_t sub_1A1372234(_QWORD *a1)
{
  return NormalizedPoint.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for CoordinateOrigin(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A1372298 + 4 * byte_1A15DEA45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A13722CC + 4 * byte_1A15DEA40[v4]))();
}

uint64_t sub_1A13722CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13722D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A13722DCLL);
  return result;
}

uint64_t sub_1A13722E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A13722F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A13722F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A13722FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoordinateOrigin()
{
  return &type metadata for CoordinateOrigin;
}

ValueMetadata *type metadata accessor for NormalizedPoint()
{
  return &type metadata for NormalizedPoint;
}

uint64_t storeEnumTagSinglePayload for NormalizedPoint.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1372368 + 4 * byte_1A15DEA4A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1372388 + 4 * byte_1A15DEA4F[v4]))();
}

_BYTE *sub_1A1372368(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1372388(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1372390(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1372398(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A13723A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A13723A8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NormalizedPoint.CodingKeys()
{
  return &type metadata for NormalizedPoint.CodingKeys;
}

unint64_t sub_1A13723C8()
{
  unint64_t result;

  result = qword_1EE63D270[0];
  if (!qword_1EE63D270[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DEC84, &type metadata for NormalizedPoint.CodingKeys);
    atomic_store(result, qword_1EE63D270);
  }
  return result;
}

unint64_t sub_1A1372410()
{
  unint64_t result;

  result = qword_1EE63D380;
  if (!qword_1EE63D380)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DEBF4, &type metadata for NormalizedPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63D380);
  }
  return result;
}

unint64_t sub_1A1372458()
{
  unint64_t result;

  result = qword_1EE63D388[0];
  if (!qword_1EE63D388[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DEC1C, &type metadata for NormalizedPoint.CodingKeys);
    atomic_store(result, qword_1EE63D388);
  }
  return result;
}

uint64_t static DetectHorizonRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static DetectHorizonRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t DetectHorizonRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A13724D0()
{
  sub_1A13726AC();
  return sub_1A15A9474();
}

uint64_t sub_1A13724F8()
{
  sub_1A13726AC();
  return sub_1A15A9480();
}

uint64_t sub_1A1372520()
{
  sub_1A13726F0();
  return sub_1A15A9474();
}

uint64_t sub_1A1372548()
{
  sub_1A13726F0();
  return sub_1A15A9480();
}

uint64_t DetectHorizonRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600D20);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600D28);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13726AC();
  sub_1A15A9468();
  sub_1A13726F0();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A13726AC()
{
  unint64_t result;

  result = qword_1EE63D428;
  if (!qword_1EE63D428)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF0CC, &type metadata for DetectHorizonRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63D428);
  }
  return result;
}

unint64_t sub_1A13726F0()
{
  unint64_t result;

  result = qword_1EE63D430[0];
  if (!qword_1EE63D430[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF07C, &type metadata for DetectHorizonRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE63D430);
  }
  return result;
}

uint64_t DetectHorizonRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectHorizonRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600D30);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600D38);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13726AC();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for DetectHorizonRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A13726F0();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A13729D0(_QWORD *a1)
{
  return DetectHorizonRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A13729E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600D20);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600D28);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A13726AC();
  sub_1A15A9468();
  sub_1A13726F0();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double DetectHorizonRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  __n128 v8;
  __n128 v9[3];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(v9);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A1372C44();
    sub_1A1377CDC((uint64_t)&type metadata for DetectHorizonRequest, v5, v6);
  }
  result = v9[0].n128_f64[0];
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  a2[2].n128_u64[0] = v4;
  return result;
}

__n128 DetectHorizonRequest.regionOfInterest.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 DetectHorizonRequest.regionOfInterest.setter(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*DetectHorizonRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A1372BC0()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A1372C44();
  result = sub_1A1378184((uint64_t)&type metadata for DetectHorizonRequest, v0);
  qword_1EE63D418 = result;
  return result;
}

uint64_t static DetectHorizonRequest.supportedRevisions.getter()
{
  if (qword_1EE63D410 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void DetectHorizonRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = 80;
}

unint64_t sub_1A1372C44()
{
  unint64_t result;

  result = qword_1EE600D40;
  if (!qword_1EE600D40)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DEED4, &type metadata for DetectHorizonRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600D40);
  }
  return result;
}

int *sub_1A1372C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600DA8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(1, 0, 0);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(1, 0, 0);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(1, 0, 0);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for DetectHorizonRequest.Revision, v0 + 32);
  qword_1EE6437F8 = v0;
  return result;
}

uint64_t DetectHorizonRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static DetectHorizonRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  CGSize v4;
  CGSize v5;
  CGRect v7;
  CGRect v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(CGSize *)(a1 + 16);
  v8.origin = *(CGPoint *)a1;
  v8.size = v4;
  v5 = *(CGSize *)(a2 + 16);
  v7.origin = *(CGPoint *)a2;
  v7.size = v5;
  if (static NormalizedRect.== infix(_:_:)(&v8, &v7))
    return sub_1A12903B0(v2, v3);
  else
    return 0;
}

uint64_t DetectHorizonRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *(_QWORD *)(v0 + 32);
  sub_1A15A93E4();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  swift_bridgeObjectRetain();
  sub_1A1290F94(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1A15A9420();
}

uint64_t sub_1A1372EB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1373424();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A1372EE0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A1372C44();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A1372F20(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A1372C44();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1372F60(_BYTE *a1@<X8>)
{
  *a1 = 80;
}

uint64_t sub_1A1372F6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1372C44();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1372F94()
{
  if (qword_1EE63D420 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A1372FD4()
{
  return sub_1A15A8BB0();
}

uint64_t sub_1A1372FF8(uint64_t a1, uint64_t a2)
{
  sub_1A12B3584();
  return sub_1A1377AB4(a1, a2);
}

unint64_t sub_1A1373034()
{
  unint64_t result;

  result = qword_1EE600D48;
  if (!qword_1EE600D48)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHorizonRequest.Revision, &type metadata for DetectHorizonRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600D48);
  }
  return result;
}

unint64_t sub_1A1373078(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B3584();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A137309C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B6FD4();
  result = sub_1A13730C8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A13730C8()
{
  unint64_t result;

  result = qword_1EE600D80;
  if (!qword_1EE600D80)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHorizonRequest, &type metadata for DetectHorizonRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600D80);
  }
  return result;
}

unint64_t sub_1A1373110()
{
  unint64_t result;

  result = qword_1EE600D88;
  if (!qword_1EE600D88)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHorizonRequest, &type metadata for DetectHorizonRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600D88);
  }
  return result;
}

unint64_t sub_1A1373158()
{
  unint64_t result;

  result = qword_1EE600D90;
  if (!qword_1EE600D90)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectHorizonRequest.Revision, &type metadata for DetectHorizonRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600D90);
  }
  return result;
}

uint64_t sub_1A137319C()
{
  return sub_1A12857D8(&qword_1EE600D98, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&unk_1A15DFA88);
}

unint64_t sub_1A13731C8(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1372C44();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for DetectHorizonRequest()
{
  return &type metadata for DetectHorizonRequest;
}

ValueMetadata *type metadata accessor for DetectHorizonRequest.Revision()
{
  return &type metadata for DetectHorizonRequest.Revision;
}

uint64_t _s6Vision20DetectHorizonRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A1373250 + 4 * byte_1A15DED00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A1373270 + 4 * byte_1A15DED05[v4]))();
}

_BYTE *sub_1A1373250(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A1373270(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1373278(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1373280(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1373288(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1373290(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DetectHorizonRequest.Revision.CodingKeys()
{
  return &type metadata for DetectHorizonRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectHorizonRequest.Revision.Revision1CodingKeys()
{
  return &type metadata for DetectHorizonRequest.Revision.Revision1CodingKeys;
}

unint64_t sub_1A13732C0()
{
  unint64_t result;

  result = qword_1EE63DC40[0];
  if (!qword_1EE63DC40[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF054, &type metadata for DetectHorizonRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE63DC40);
  }
  return result;
}

unint64_t sub_1A1373308()
{
  unint64_t result;

  result = qword_1EE63DD50;
  if (!qword_1EE63DD50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DEF74, &type metadata for DetectHorizonRequest.Revision.Revision1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63DD50);
  }
  return result;
}

unint64_t sub_1A1373350()
{
  unint64_t result;

  result = qword_1EE63DD58[0];
  if (!qword_1EE63DD58[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DEF9C, &type metadata for DetectHorizonRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE63DD58);
  }
  return result;
}

unint64_t sub_1A1373398()
{
  unint64_t result;

  result = qword_1EE63DDE0;
  if (!qword_1EE63DDE0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DEFC4, &type metadata for DetectHorizonRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63DDE0);
  }
  return result;
}

unint64_t sub_1A13733E0()
{
  unint64_t result;

  result = qword_1EE63DDE8[0];
  if (!qword_1EE63DDE8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DEFEC, &type metadata for DetectHorizonRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE63DDE8);
  }
  return result;
}

unint64_t sub_1A1373424()
{
  unint64_t result;

  result = qword_1EE600DA0;
  if (!qword_1EE600DA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DEEF0, &type metadata for DetectHorizonRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600DA0);
  }
  return result;
}

uint64_t CoreMLFeatureValueObservation.featureName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CoreMLFeatureValueObservation.featureValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CoreMLFeatureValueObservation() + 20);
  v4 = sub_1A15A8A9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CoreMLFeatureValueObservation()
{
  uint64_t result;

  result = qword_1EE63E470;
  if (!qword_1EE63E470)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CoreMLFeatureValueObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CoreMLFeatureValueObservation() + 24);
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

float CoreMLFeatureValueObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for CoreMLFeatureValueObservation() + 28));
}

__n128 CoreMLFeatureValueObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for CoreMLFeatureValueObservation() + 32);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t CoreMLFeatureValueObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CoreMLFeatureValueObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t CoreMLFeatureValueObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A15A9090();
  sub_1A15A8BEC();
  swift_bridgeObjectRetain();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v0 = type metadata accessor for CoreMLFeatureValueObservation();
  sub_1A15A8A9C();
  sub_1A15A9180();
  sub_1A15A8BEC();
  v1 = sub_1A12857D8(&qword_1EE5FD370, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
  sub_1A132D4B4(v0, (uint64_t)&off_1E4535FC8, v1);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0;
}

uint64_t sub_1A1373754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, char *a7@<X8>, float a8@<S0>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  void (*v26)(char *, char *, uint64_t);
  int *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;

  v33 = a5;
  v34 = a4;
  v31 = a1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600DB0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1A15A8A9C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *a6;
  v20 = a3;
  sub_1A15A8AA8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1A128DB78((uint64_t)v15, &qword_1EE600DB0);
    v36 = 0;
    v37 = 0xE000000000000000;
    sub_1A15A9090();
    sub_1A15A8BEC();
    v35 = objc_msgSend(v20, sel_type);
    type metadata accessor for MLFeatureType(0);
    sub_1A15A9180();
    sub_1A15A8BEC();
    v21 = v36;
    v22 = v37;
    sub_1A1288000();
    swift_allocError();
    *(_QWORD *)v23 = v21;
    *(_QWORD *)(v23 + 8) = v22;
    *(_BYTE *)(v23 + 16) = 5;
    swift_willThrow();

    v24 = sub_1A15A88C8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v34, v24);
  }
  else
  {

    v26 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v26(v19, v15, v16);
    *(_QWORD *)a7 = v31;
    *((_QWORD *)a7 + 1) = a2;
    v27 = (int *)type metadata accessor for CoreMLFeatureValueObservation();
    v26(&a7[v27[5]], v19, v16);
    v28 = &a7[v27[6]];
    v29 = sub_1A15A88C8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, v34, v29);
    *(float *)&a7[v27[7]] = a8;
    result = sub_1A128465C(v33, (uint64_t)&a7[v27[8]]);
    a7[v27[9]] = v32;
  }
  return result;
}

void type metadata accessor for MLFeatureType(uint64_t a1)
{
  sub_1A128636C(a1, &qword_1EE600E18);
}

uint64_t CoreMLFeatureValueObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for CoreMLFeatureValueObservation();
  sub_1A12857D8(&qword_1EE600DB8, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A1373A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE5FD370, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

uint64_t sub_1A1373AD8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x4E65727574616566;
  if (*v0 != 1)
    v1 = 0x5665727574616566;
  if (*v0)
    return v1;
  else
    return 0x746176726573626FLL;
}

uint64_t sub_1A1373B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A1374B5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A1373B70()
{
  sub_1A1374CF8();
  return sub_1A15A9474();
}

uint64_t sub_1A1373B98()
{
  sub_1A1374CF8();
  return sub_1A15A9480();
}

uint64_t CoreMLFeatureValueObservation.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  id v40[3];

  v40[2] = *(id *)MEMORY[0x1E0C80C00];
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v2 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A15A8A9C();
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600DC0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1374CF8();
  v12 = v38;
  sub_1A15A9468();
  LOBYTE(v40[0]) = 1;
  v13 = v37;
  sub_1A15A92C4();
  if (v13)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v32 = v11;
  v33 = v9;
  v30 = v4;
  v31 = v2;
  v37 = v8;
  v15 = (void *)objc_opt_self();
  sub_1A128DB40(0, (unint64_t *)&unk_1EE5FFAA0);
  v16 = type metadata accessor for CoreMLFeatureValueObservation();
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v7, v12 + *(int *)(v16 + 20), v36);
  v17 = (void *)sub_1A15A8F10();
  v40[0] = 0;
  v18 = objc_msgSend(v15, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v17, 1, v40);

  v19 = v40[0];
  if (v18)
  {
    v20 = (void *)sub_1A15A888C();
    v22 = v21;

    v40[0] = v20;
    v40[1] = v22;
    v39 = 2;
    sub_1A1289940();
    v23 = v37;
    v24 = v32;
    sub_1A15A92F4();
    v25 = v33;
    LOBYTE(v40[0]) = 0;
    sub_1A12855AC();
    v27 = (uint64_t)v30;
    sub_1A15A92AC();
    v28 = sub_1A12857D8(&qword_1EE5FD370, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
    sub_1A12E2C64(v27, v16, (uint64_t)&off_1E4535FC8, v28);
    sub_1A12884B4((uint64_t)v20, (unint64_t)v22);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v27, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v24, v23);
  }
  else
  {
    v26 = v19;
    sub_1A15A8844();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v32, v37);
  }
}

void *CoreMLFeatureValueObservation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE v51[60];
  char v52;

  v40 = a2;
  v46 = sub_1A15A88C8();
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v42 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v45 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600DB0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600DD0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CoreMLFeatureValueObservation();
  MEMORY[0x1E0C80A78](v12);
  v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = a1[3];
  v48 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_1A1374CF8();
  v16 = v47;
  sub_1A15A945C();
  if (v16)
    return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  v47 = (int *)v12;
  v17 = v46;
  LOBYTE(v49) = 1;
  *v14 = sub_1A15A9234();
  v14[1] = v18;
  v52 = 2;
  sub_1A12899C8();
  sub_1A15A9264();
  v38 = v14;
  v39 = v11;
  v20 = v49;
  v19 = v50;
  sub_1A128DB40(0, &qword_1EE5FD5A0);
  sub_1A128DB40(0, (unint64_t *)&unk_1EE5FFAA0);
  result = (void *)sub_1A15A8F40();
  v35 = v20;
  v36 = v19;
  v37 = v8;
  if (result)
  {
    v34 = result;
    sub_1A15A8AA8();
    v22 = sub_1A15A8A9C();
    v23 = *(_QWORD *)(v22 - 8);
    result = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v22);
    v24 = (uint64_t)v38;
    if ((_DWORD)result != 1)
    {
      v25 = (char *)v38 + v47[5];
      v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v33 = v22;
      v26(v25, v7, v22);
      LOBYTE(v49) = 0;
      sub_1A12855AC();
      sub_1A15A9204();
      LOBYTE(v49) = 0;
      sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
      v27 = v42;
      v28 = v17;
      sub_1A15A9264();
      v29 = v47;
      (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v24 + v47[6], v27, v28);
      LOBYTE(v49) = 1;
      sub_1A15A924C();
      *(_DWORD *)(v24 + v29[7]) = v30;
      v52 = 3;
      sub_1A1285654();
      sub_1A15A9228();
      v31 = v40;
      *(_BYTE *)(v24 + v29[9]) = v49;
      v32 = v45;
      sub_1A12E32A4((uint64_t)v51);
      sub_1A12884B4(v35, v36);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v43);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v39, v37);
      sub_1A128465C((uint64_t)v51, v24 + v29[8]);
      sub_1A1374D3C(v24, v31);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
      return (void *)sub_1A1374D80(v24);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1A13745E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CoreMLFeatureValueObservation.init(from:)(a1, a2);
}

uint64_t sub_1A13745F8(_QWORD *a1)
{
  return CoreMLFeatureValueObservation.encode(to:)(a1);
}

void sub_1A137460C(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  float v19;
  uint64_t v20;
  unsigned __int8 v21;

  v8 = sub_1A15A88C8();
  *(_QWORD *)&v9 = MEMORY[0x1E0C80A78](v8).n128_u64[0];
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a2;
  v13 = objc_msgSend(a1, sel_featureName, v9);
  v14 = sub_1A15A8BB0();
  v16 = v15;

  v17 = objc_msgSend(a1, sel_featureValue);
  v18 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v21 = v12;
  sub_1A1373754(v14, v16, v17, (uint64_t)v11, a3, &v21, a4, v19);

}

uint64_t CoreMLFeatureValueObservation.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[15];
  unsigned __int8 v24;
  __int128 v25;
  char v26;

  v4 = sub_1A15A88C8();
  MEMORY[0x1E0C80A78](v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600DD8);
  *(_QWORD *)&v8 = MEMORY[0x1E0C80A78](v7).n128_u64[0];
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = objc_msgSend(a1, sel_featureName, v8);
  v12 = sub_1A15A8BB0();
  v14 = v13;

  v15 = objc_msgSend(a1, sel_featureValue);
  v16 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v18 = v17;
  objc_msgSend(a1, sel_timeRange);
  v26 = 0;
  v24 = -4;
  sub_1A1373754(v12, v14, v15, (uint64_t)v6, (uint64_t)&v25, &v24, v10, v18);

  v19 = type metadata accessor for CoreMLFeatureValueObservation();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v10, 0, 1, v19);
  type metadata accessor for CoreMLFeatureValueObservation();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v19))
  {
    sub_1A128DB78((uint64_t)v10, &qword_1EE600DD8);
    v21 = 1;
  }
  else
  {
    sub_1A1374DBC((uint64_t)v10, a2);
    v21 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(a2, v21, 1, v19);
}

void sub_1A13749B0(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  unsigned __int8 v4;

  v4 = *a2;
  sub_1A137460C(a1, &v4, a3, a4);
}

uint64_t _s6Vision29CoreMLFeatureValueObservationV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  int *v7;
  uint64_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_1A15A9354(), result = 0, (v5 & 1) != 0))
  {
    v7 = (int *)type metadata accessor for CoreMLFeatureValueObservation();
    if ((sub_1A15A8A90() & 1) == 0
      || (sub_1A15A88A4() & 1) == 0
      || *(float *)((char *)a1 + v7[7]) != *(float *)((char *)a2 + v7[7]))
    {
      return 0;
    }
    v8 = v7[8];
    v9 = *((_BYTE *)a1 + v8 + 48);
    v10 = (char *)a2 + v8;
    if ((v9 & 1) != 0)
    {
      if (!v10[48])
        return 0;
    }
    else if ((v10[48] & 1) != 0 || (sub_1A15A8EC8() & 1) == 0)
    {
      return 0;
    }
    v11 = v7[9];
    v12 = *((unsigned __int8 *)a1 + v11);
    v13 = *((unsigned __int8 *)a2 + v11);
    if (v12 <= 0xFB)
    {
      if (v13 > 0xFB)
        return 0;
      sub_1A12862A0();
      if ((sub_1A15A8B80() & 1) == 0)
        return 0;
    }
    else if (v13 <= 0xFB)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_1A1374B5C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E65727574616566 && a2 == 0xEB00000000656D61 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5665727574616566 && a2 == 0xEC00000065756C61)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_1A1374CF8()
{
  unint64_t result;

  result = qword_1EE600DC8;
  if (!qword_1EE600DC8)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF250, &type metadata for CoreMLFeatureValueObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE600DC8);
  }
  return result;
}

uint64_t sub_1A1374D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoreMLFeatureValueObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A1374D80(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CoreMLFeatureValueObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A1374DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoreMLFeatureValueObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A1374E00(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE600DE0, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
  a1[2] = sub_1A12857D8(&qword_1EE600DE8, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
  a1[3] = sub_1A12857D8(&qword_1EE600DF0, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
  result = sub_1A12857D8(&qword_1EE600DB8, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A1374E94()
{
  return sub_1A12857D8(&qword_1EE600DF8, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
}

unint64_t sub_1A1374EC4()
{
  unint64_t result;

  result = qword_1EE600E00;
  if (!qword_1EE600E00)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF1E8, &type metadata for CoreMLFeatureValueObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE600E00);
  }
  return result;
}

unint64_t sub_1A1374F0C()
{
  unint64_t result;

  result = qword_1EE600E08;
  if (!qword_1EE600E08)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF2C8, &type metadata for CoreMLFeatureValueObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE600E08);
  }
  return result;
}

unint64_t sub_1A1374F54()
{
  unint64_t result;

  result = qword_1EE600E10;
  if (!qword_1EE600E10)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF2A0, &type metadata for CoreMLFeatureValueObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE600E10);
  }
  return result;
}

uint64_t sub_1A1374F98(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE5FD370, (uint64_t (*)(uint64_t))type metadata accessor for CoreMLFeatureValueObservation, (uint64_t)&protocol conformance descriptor for CoreMLFeatureValueObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CoreMLFeatureValueObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A15A8A9C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_1A15A88C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[8];
    *(_DWORD *)((char *)v4 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v20;
    *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
    v18[48] = v19[48];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return v4;
}

uint64_t destroy for CoreMLFeatureValueObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1A15A8A9C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for CoreMLFeatureValueObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A15A8A9C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  v17[48] = v18[48];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithCopy for CoreMLFeatureValueObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  __int128 v18;
  __int128 v19;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A15A8A9C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[48];
  v19 = *((_OWORD *)v16 + 1);
  v18 = *((_OWORD *)v16 + 2);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v19;
  *((_OWORD *)v15 + 2) = v18;
  v15[48] = v17;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_OWORD *initializeWithTake for CoreMLFeatureValueObservation(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A15A8A9C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  v15[48] = v16[48];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithTake for CoreMLFeatureValueObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A15A8A9C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  v16[48] = v17[48];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreMLFeatureValueObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A13754DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A15A8A9C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_1A15A88C8();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CoreMLFeatureValueObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A1375588(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_1A15A8A9C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_1A15A88C8();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1A1375624()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1A15A8A9C();
  if (v1 <= 0x3F)
  {
    result = sub_1A15A88C8();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CoreMLFeatureValueObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A1375720 + 4 * byte_1A15DF125[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A1375754 + 4 * byte_1A15DF120[v4]))();
}

uint64_t sub_1A1375754(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A137575C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A1375764);
  return result;
}

uint64_t sub_1A1375770(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A1375778);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A137577C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A1375784(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoreMLFeatureValueObservation.CodingKeys()
{
  return &type metadata for CoreMLFeatureValueObservation.CodingKeys;
}

unint64_t VisionError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 16);
  if (v2 == 11)
  {
    sub_1A15A9090();
    swift_bridgeObjectRelease();
    sub_1A15A9324();
    sub_1A15A8BEC();
    swift_bridgeObjectRelease();
    return 0xD000000000000026;
  }
  else
  {
    sub_1A1375868(v1, *(_QWORD *)(v0 + 8), v2);
  }
  return v1;
}

uint64_t sub_1A1375868(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0x12u && a3 != 11)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1A1375894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  sub_1A1288044(a1, (uint64_t)v7 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD100);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCDD8);
  if (swift_dynamicCast())
  {
    v4 = *((_QWORD *)&v9 + 1);
    v3 = v10;
    __swift_project_boxed_opaque_existential_1(&v8, *((uint64_t *)&v9 + 1));
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 8) + 56))(v7, v4);
    sub_1A1340FFC();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    sub_1A12CED8C((uint64_t)&v8);
  }
  *(_QWORD *)&v8 = 0;
  *((_QWORD *)&v8 + 1) = 0xE000000000000000;
  sub_1A15A9090();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  result = sub_1A15A8BEC();
  v6 = *((_QWORD *)&v8 + 1);
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 12;
  return result;
}

uint64_t sub_1A13759E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  sub_1A1288044(a1, (uint64_t)v7 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD100);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCDD8);
  if (swift_dynamicCast())
  {
    v4 = *((_QWORD *)&v9 + 1);
    v3 = v10;
    __swift_project_boxed_opaque_existential_1(&v8, *((uint64_t *)&v9 + 1));
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 8) + 56))(v7, v4);
    sub_1A1340FFC();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    sub_1A12CED8C((uint64_t)&v8);
  }
  *(_QWORD *)&v8 = 0;
  *((_QWORD *)&v8 + 1) = 0xE000000000000000;
  sub_1A15A9090();
  sub_1A15A8BEC();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  result = sub_1A15A8BEC();
  v6 = *((_QWORD *)&v8 + 1);
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 6;
  return result;
}

void sub_1A1375B4C(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;

  v4 = objc_msgSend(a1, sel_description);
  v5 = sub_1A15A8BB0();
  v7 = v6;

  v8 = objc_msgSend(a1, sel_code);
  if ((unint64_t)(v8 - 1) > 0x15)
    v9 = 1;
  else
    v9 = byte_1A15DF502[(_QWORD)(v8 - 1)];
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v9;
}

uint64_t destroy for VisionError(uint64_t a1)
{
  return sub_1A1375BFC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1A1375BFC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0x12u && a3 != 11)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s6Vision11VisionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A1375868(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VisionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A1375868(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A1375BFC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for VisionError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A1375BFC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VisionError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xEE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 238);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0x12)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VisionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xED)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 238;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xEE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xEE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A1375D84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1A1375D8C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VisionError()
{
  return &type metadata for VisionError;
}

uint64_t sub_1A1375DA4()
{
  return swift_bridgeObjectRelease();
}

void sub_1A1375DAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = sub_1A15A8868();
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for ImageSource();
  MEMORY[0x1E0C80A78](v3);
  sub_1A128A824(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (char *)&loc_1A1375E60 + dword_1A13761A4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

id sub_1A1375E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v4, v2);
  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = (void *)sub_1A15A885C();
  v8 = objc_msgSend(v6, sel_initWithURL_orientation_options_session_, v7, *(unsigned int *)(v0 + *(int *)(type metadata accessor for OrientedImageSource() + 20)), 0, *(_QWORD *)(v1 + 16));

  if (!v8)
  {
    __break(1u);
    JUMPOUT(0x1A1376198);
  }
  swift_release();
  sub_1A13761BC(v0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v2);
  return v8;
}

uint64_t sub_1A13761BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OrientedImageSource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static DetectContoursRequest.Revision.< infix(_:_:)()
{
  return 0;
}

uint64_t static DetectContoursRequest.Revision.== infix(_:_:)()
{
  return 1;
}

uint64_t DetectContoursRequest.Revision.hash(into:)()
{
  return sub_1A15A93F0();
}

uint64_t sub_1A137622C()
{
  sub_1A1376408();
  return sub_1A15A9474();
}

uint64_t sub_1A1376254()
{
  sub_1A1376408();
  return sub_1A15A9480();
}

uint64_t sub_1A137627C()
{
  sub_1A137644C();
  return sub_1A15A9474();
}

uint64_t sub_1A13762A4()
{
  sub_1A137644C();
  return sub_1A15A9480();
}

uint64_t DetectContoursRequest.Revision.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600E20);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600E28);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1376408();
  sub_1A15A9468();
  sub_1A137644C();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1A1376408()
{
  unint64_t result;

  result = qword_1EE63E598;
  if (!qword_1EE63E598)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF8FC, &type metadata for DetectContoursRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63E598);
  }
  return result;
}

unint64_t sub_1A137644C()
{
  unint64_t result;

  result = qword_1EE63E5A0[0];
  if (!qword_1EE63E5A0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF8AC, &type metadata for DetectContoursRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE63E5A0);
  }
  return result;
}

uint64_t DetectContoursRequest.Revision.hashValue.getter()
{
  sub_1A15A93E4();
  sub_1A15A93F0();
  return sub_1A15A9420();
}

uint64_t DetectContoursRequest.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600E30);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600E38);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1376408();
  v8 = v23;
  sub_1A15A945C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_1A15A9294() + 16) != 1)
  {
    v14 = sub_1A15A90F0();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600710);
    *v16 = &type metadata for DetectContoursRequest.Revision;
    sub_1A15A9210();
    sub_1A15A90E4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_1A137644C();
  v11 = v4;
  sub_1A15A9204();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_1A137672C(_QWORD *a1)
{
  return DetectContoursRequest.Revision.init(from:)(a1);
}

uint64_t sub_1A1376740(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600E20);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600E28);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A1376408();
  sub_1A15A9468();
  sub_1A137644C();
  sub_1A15A92AC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double DetectContoursRequest.init(_:)@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  __n128 v8;
  double v9[4];

  v3 = *a1;
  static NormalizedRect.fullImage.getter(&v8);
  v4 = sub_1A128BE38(MEMORY[0x1E0DEE9D8]);
  if (v3 == 1)
  {
    v5 = sub_1A1376A74();
    sub_1A1377CDC((uint64_t)&type metadata for DetectContoursRequest, v5, v6);
  }
  *(_QWORD *)a2 = 0x3F00000040000000;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = 512;
  *(__n128 *)(a2 + 24) = v8;
  result = v9[0];
  *(_OWORD *)(a2 + 40) = *(_OWORD *)v9;
  *(_WORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v4;
  return result;
}

float DetectContoursRequest.contrastAdjustment.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void DetectContoursRequest.contrastAdjustment.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*DetectContoursRequest.contrastAdjustment.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

unint64_t DetectContoursRequest.contrastPivot.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t DetectContoursRequest.contrastPivot.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t (*DetectContoursRequest.contrastPivot.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectContoursRequest.detectsDarkOnLight.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t DetectContoursRequest.detectsDarkOnLight.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*DetectContoursRequest.detectsDarkOnLight.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t DetectContoursRequest.maximumImageDimension.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t DetectContoursRequest.maximumImageDimension.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*DetectContoursRequest.maximumImageDimension.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

__n128 DetectContoursRequest.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 24);
  v3 = *(_OWORD *)(v1 + 40);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 DetectContoursRequest.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*DetectContoursRequest.regionOfInterest.modify())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A13769F0()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1A1376A74();
  result = sub_1A1378184((uint64_t)&type metadata for DetectContoursRequest, v0);
  qword_1EE63E588 = result;
  return result;
}

uint64_t static DetectContoursRequest.supportedRevisions.getter()
{
  if (qword_1EE63E580 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void DetectContoursRequest.descriptor.getter(_BYTE *a1@<X8>)
{
  *a1 = 40;
}

unint64_t sub_1A1376A74()
{
  unint64_t result;

  result = qword_1EE600E40;
  if (!qword_1EE600E40)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF6F4, &type metadata for DetectContoursRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600E40);
  }
  return result;
}

int *sub_1A1376AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600EB0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A15C3FE0;
  v1 = sub_1A12DA050(4, 0, 11);
  v2 = sub_1A12DA048(v1);
  v3 = sub_1A12DA050(4, 0, 11);
  v4 = sub_1A12DA048(v3);
  v5 = sub_1A12DA050(4, 0, 11);
  v6 = sub_1A12DA048(v5);
  result = sub_1A12D9958(v6, v2, v4, v6, (uint64_t)&type metadata for DetectContoursRequest.Revision, v0 + 32);
  qword_1EE643800 = v0;
  return result;
}

uint64_t DetectContoursRequest.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v3 = *(unsigned __int8 *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 64);
  sub_1A15A9408();
  sub_1A15A93FC();
  if (v3 != 1)
    sub_1A15A9408();
  sub_1A15A93FC();
  sub_1A15A93F0();
  sub_1A1290CE4();
  sub_1A15A8B44();
  sub_1A15A93F0();
  sub_1A15A93FC();
  sub_1A15A93FC();
  swift_bridgeObjectRetain();
  sub_1A1290F94(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t DetectContoursRequest.hashValue.getter()
{
  int *v0;
  int v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10[4];
  int v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  uint64_t v20;

  v1 = v0[1];
  v2 = *((_BYTE *)v0 + 8);
  v3 = *((_BYTE *)v0 + 9);
  v4 = *((_QWORD *)v0 + 2);
  v5 = *((_BYTE *)v0 + 56);
  v6 = *((_BYTE *)v0 + 57);
  v7 = *((_QWORD *)v0 + 8);
  v11 = *v0;
  v12 = v1;
  v13 = v2;
  v14 = v3;
  v15 = v4;
  v8 = *(_OWORD *)(v0 + 10);
  v16 = *(_OWORD *)(v0 + 6);
  v17 = v8;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  sub_1A15A93E4();
  DetectContoursRequest.hash(into:)(v10);
  return sub_1A15A9420();
}

__n128 sub_1A1376D24@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 24);
  v3 = *(_OWORD *)(v1 + 40);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_1A1376D34(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*sub_1A1376D44())(TtTrkRpnNode *__hidden this)
{
  return TtTrkRpnNode::config;
}

uint64_t sub_1A1376D54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1377A30();
  return sub_1A12F6878(a1, v2);
}

uint64_t sub_1A1376D7C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  v6 = sub_1A1376A74();
  return sub_1A1378480(a1, a2, v6, a3);
}

uint64_t sub_1A1376DBC(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A1376A74();
  return sub_1A1378548(a1, a2, a3, v6);
}

void sub_1A1376DFC(_BYTE *a1@<X8>)
{
  *a1 = 40;
}

uint64_t sub_1A1376E08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A1376A74();
  return sub_1A1378880(a1, v2);
}

uint64_t sub_1A1376E30()
{
  int *v0;
  int v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10[4];
  int v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  uint64_t v20;

  v1 = v0[1];
  v2 = *((_BYTE *)v0 + 8);
  v3 = *((_BYTE *)v0 + 9);
  v4 = *((_QWORD *)v0 + 2);
  v5 = *((_BYTE *)v0 + 56);
  v6 = *((_BYTE *)v0 + 57);
  v7 = *((_QWORD *)v0 + 8);
  v11 = *v0;
  v12 = v1;
  v13 = v2;
  v14 = v3;
  v15 = v4;
  v8 = *(_OWORD *)(v0 + 10);
  v16 = *(_OWORD *)(v0 + 6);
  v17 = v8;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  sub_1A15A93E4();
  DetectContoursRequest.hash(into:)(v10);
  return sub_1A15A9420();
}

uint64_t sub_1A1376EC0()
{
  int *v0;
  int v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10[4];
  int v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  uint64_t v20;

  v1 = v0[1];
  v2 = *((_BYTE *)v0 + 8);
  v3 = *((_BYTE *)v0 + 9);
  v4 = *((_QWORD *)v0 + 2);
  v5 = *((_BYTE *)v0 + 56);
  v6 = *((_BYTE *)v0 + 57);
  v7 = *((_QWORD *)v0 + 8);
  v11 = *v0;
  v12 = v1;
  v13 = v2;
  v14 = v3;
  v15 = v4;
  v8 = *(_OWORD *)(v0 + 10);
  v16 = *(_OWORD *)(v0 + 6);
  v17 = v8;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  sub_1A15A93E4();
  DetectContoursRequest.hash(into:)(v10);
  return sub_1A15A9420();
}

uint64_t sub_1A1376F4C()
{
  if (qword_1EE63E590 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A1376F8C()
{
  return sub_1A15A8BB0();
}

uint64_t sub_1A1376FB0(uint64_t a1, uint64_t a2)
{
  sub_1A12B36EC();
  return sub_1A1377AB4(a1, a2);
}

id sub_1A1376FE8(uint64_t a1)
{
  return sub_1A1377100(a1);
}

uint64_t _s6Vision21DetectContoursRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  CGSize v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  CGPoint v8;
  CGSize v9;
  int v10;
  int v11;
  uint64_t v12;
  CGRect v14;
  CGRect v15;

  if (*(float *)a1 != *(float *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 9);
  v3 = *(CGSize *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 56);
  v5 = *(unsigned __int8 *)(a1 + 57);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(unsigned __int8 *)(a2 + 9);
  v8 = *(CGPoint *)(a2 + 24);
  v9 = *(CGSize *)(a2 + 40);
  v10 = *(unsigned __int8 *)(a2 + 56);
  v11 = *(unsigned __int8 *)(a2 + 57);
  v12 = *(_QWORD *)(a2 + 64);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8) || v2 != v7)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) != 0 || *(float *)(a1 + 4) != *(float *)(a2 + 4) || v2 != v7)
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v15.origin = *(CGPoint *)(a1 + 24);
    v15.size = v3;
    v14.origin = v8;
    v14.size = v9;
    if (static NormalizedRect.== infix(_:_:)(&v15, &v14) && ((v4 ^ v10) & 1) == 0 && ((v5 ^ v11) & 1) == 0)
      return sub_1A12903B0(v6, v12);
  }
  return 0;
}

id sub_1A1377100(uint64_t a1)
{
  float *v1;
  uint64_t v2;
  float v4;
  float v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  void *ObjCClassFromMetadata;
  id result;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *);
  void (*v19)(_QWORD *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD *, _QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD *, _QWORD);
  char v47;
  char v48;
  char v49;
  float v50;
  _QWORD v51[4];
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v4 = *v1;
  v5 = v1[1];
  v6 = *((_BYTE *)v1 + 8);
  v7 = *((_BYTE *)v1 + 9);
  v8 = *((_QWORD *)v1 + 2);
  v9 = *((_BYTE *)v1 + 56);
  v10 = *((_BYTE *)v1 + 57);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1A1377A74();
  result = objc_msgSend(ObjCClassFromMetadata, sel_isSubclassOfClass_, swift_getObjCClassFromMetadata());
  if ((_DWORD)result)
  {
    v47 = v7;
    v48 = v9;
    v49 = v10;
    v50 = v5;
    v13 = -1.0;
    if ((v6 & 1) == 0)
    {
      *(float *)&v52 = v5;
      LODWORD(v51[0]) = 0;
      LODWORD(v54) = 1065353216;
      result = (id)sub_1A12A3988();
      if (v2)
        return result;
      v13 = v5;
    }
    v14 = MEMORY[0x1E0DEB188];
    v15 = sub_1A15A8BB0();
    v17 = v16;
    *((_QWORD *)&v53 + 1) = v14;
    *(float *)&v52 = v13;
    v18 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)a1 + 200);
    v19 = (void (*)(_QWORD *, _QWORD))v18(v51);
    sub_1A128D188((uint64_t)&v52, v15, v17);
    v19(v51, 0);
    *(_QWORD *)&v52 = v8;
    v51[0] = 64;
    v54 = 0x7FFFFFFFFFFFFFFFLL;
    v20 = MEMORY[0x1E0DEB418];
    result = (id)sub_1A12A3988();
    if (!v2)
    {
      v21 = sub_1A15A8BB0();
      v23 = v22;
      *((_QWORD *)&v53 + 1) = v20;
      *(_QWORD *)&v52 = v8;
      v24 = (void (*)(_QWORD *, _QWORD))v18(v51);
      sub_1A128D188((uint64_t)&v52, v21, v23);
      v24(v51, 0);
      v25 = sub_1A15A8BB0();
      v27 = v26;
      v28 = MEMORY[0x1E0DEB188];
      *((_QWORD *)&v53 + 1) = MEMORY[0x1E0DEB188];
      *(float *)&v52 = v4;
      v29 = (void (*)(_QWORD *, _QWORD))v18(v51);
      sub_1A128D188((uint64_t)&v52, v25, v27);
      v29(v51, 0);
      v30 = sub_1A15A8BB0();
      v32 = v31;
      if ((v6 & 1) != 0)
      {
        v52 = 0u;
        v53 = 0u;
      }
      else
      {
        *((_QWORD *)&v53 + 1) = v28;
        *(float *)&v52 = v50;
      }
      v33 = (void (*)(_QWORD *, _QWORD))v18(v51);
      sub_1A128D188((uint64_t)&v52, v30, v32);
      v33(v51, 0);
      v34 = sub_1A15A8BB0();
      v36 = v35;
      v37 = MEMORY[0x1E0DEAFA0];
      *((_QWORD *)&v53 + 1) = MEMORY[0x1E0DEAFA0];
      LOBYTE(v52) = v47;
      v38 = (void (*)(_QWORD *, _QWORD))v18(v51);
      sub_1A128D188((uint64_t)&v52, v34, v36);
      v38(v51, 0);
      v39 = sub_1A15A8BB0();
      v41 = v40;
      *((_QWORD *)&v53 + 1) = v37;
      LOBYTE(v52) = v48;
      v42 = (void (*)(_QWORD *, _QWORD))v18(v51);
      sub_1A128D188((uint64_t)&v52, v39, v41);
      v42(v51, 0);
      v43 = sub_1A15A8BB0();
      v45 = v44;
      *((_QWORD *)&v53 + 1) = v37;
      LOBYTE(v52) = v49;
      v46 = (uint64_t (*)(_QWORD *, _QWORD))v18(v51);
      sub_1A128D188((uint64_t)&v52, v43, v45);
      return (id)v46(v51, 0);
    }
  }
  return result;
}

unint64_t sub_1A13774DC()
{
  unint64_t result;

  result = qword_1EE600E48;
  if (!qword_1EE600E48)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectContoursRequest.Revision, &type metadata for DetectContoursRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600E48);
  }
  return result;
}

unint64_t sub_1A1377520(uint64_t a1)
{
  unint64_t result;

  result = sub_1A12B36EC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A1377544(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A12B70E4();
  result = sub_1A1377570();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A1377570()
{
  unint64_t result;

  result = qword_1EE600E80;
  if (!qword_1EE600E80)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectContoursRequest, &type metadata for DetectContoursRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600E80);
  }
  return result;
}

unint64_t sub_1A13775B8()
{
  unint64_t result;

  result = qword_1EE600E88;
  if (!qword_1EE600E88)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectContoursRequest, &type metadata for DetectContoursRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600E88);
  }
  return result;
}

unint64_t sub_1A1377600()
{
  unint64_t result;

  result = qword_1EE600E90;
  if (!qword_1EE600E90)
  {
    result = MEMORY[0x1A1B0B774](&protocol conformance descriptor for DetectContoursRequest.Revision, &type metadata for DetectContoursRequest.Revision);
    atomic_store(result, (unint64_t *)&qword_1EE600E90);
  }
  return result;
}

uint64_t sub_1A1377644()
{
  return sub_1A12857D8(&qword_1EE600E98, (uint64_t (*)(uint64_t))type metadata accessor for ContoursObservation, (uint64_t)&unk_1A15DA068);
}

unint64_t sub_1A1377670(uint64_t a1)
{
  unint64_t result;

  result = sub_1A1376A74();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeWithCopy for DetectContoursRequest(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectContoursRequest(uint64_t a1, uint64_t a2)
{
  int v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v3;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DetectContoursRequest(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DetectContoursRequest()
{
  return &type metadata for DetectContoursRequest;
}

ValueMetadata *type metadata accessor for DetectContoursRequest.Revision()
{
  return &type metadata for DetectContoursRequest.Revision;
}

uint64_t _s6Vision21DetectContoursRequestV8RevisionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A137785C + 4 * byte_1A15DF520[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A137787C + 4 * byte_1A15DF525[v4]))();
}

_BYTE *sub_1A137785C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A137787C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A1377884(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A137788C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A1377894(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A137789C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DetectContoursRequest.Revision.CodingKeys()
{
  return &type metadata for DetectContoursRequest.Revision.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectContoursRequest.Revision.Revision1CodingKeys()
{
  return &type metadata for DetectContoursRequest.Revision.Revision1CodingKeys;
}

unint64_t sub_1A13778CC()
{
  unint64_t result;

  result = qword_1EE63EDB0[0];
  if (!qword_1EE63EDB0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF884, &type metadata for DetectContoursRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE63EDB0);
  }
  return result;
}

unint64_t sub_1A1377914()
{
  unint64_t result;

  result = qword_1EE63EEC0;
  if (!qword_1EE63EEC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF7A4, &type metadata for DetectContoursRequest.Revision.Revision1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63EEC0);
  }
  return result;
}

unint64_t sub_1A137795C()
{
  unint64_t result;

  result = qword_1EE63EEC8[0];
  if (!qword_1EE63EEC8[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF7CC, &type metadata for DetectContoursRequest.Revision.Revision1CodingKeys);
    atomic_store(result, qword_1EE63EEC8);
  }
  return result;
}

unint64_t sub_1A13779A4()
{
  unint64_t result;

  result = qword_1EE63EF50;
  if (!qword_1EE63EF50)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF7F4, &type metadata for DetectContoursRequest.Revision.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63EF50);
  }
  return result;
}

unint64_t sub_1A13779EC()
{
  unint64_t result;

  result = qword_1EE63EF58[0];
  if (!qword_1EE63EF58[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF81C, &type metadata for DetectContoursRequest.Revision.CodingKeys);
    atomic_store(result, qword_1EE63EF58);
  }
  return result;
}

unint64_t sub_1A1377A30()
{
  unint64_t result;

  result = qword_1EE600EA0;
  if (!qword_1EE600EA0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DF710, &type metadata for DetectContoursRequest);
    atomic_store(result, (unint64_t *)&qword_1EE600EA0);
  }
  return result;
}

unint64_t sub_1A1377A74()
{
  unint64_t result;

  result = qword_1EE600EA8;
  if (!qword_1EE600EA8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE600EA8);
  }
  return result;
}

uint64_t sub_1A1377AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  char v14;
  _BYTE v17[40];

  v4 = sub_1A15A9024();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v17[-v7 - 8];
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v6);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1A1288044(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FD100);
  v12 = swift_dynamicCast();
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v12)
  {
    v13(v8, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, a2);
    v14 = sub_1A15A8B80();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a2);
  }
  else
  {
    v13(v8, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v14 = 0;
  }
  return v14 & 1;
}

double sub_1A1377C20@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1A1377C30@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(a1 + 64))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for RevisionAvailability(255, AssociatedTypeWitness, v5, v6);
  v7 = sub_1A15A8CD0();
  MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v7);
  v8 = sub_1A15A918C();
  a2[3] = v8;
  result = MEMORY[0x1A1B0B774](MEMORY[0x1E0DEC908], v8);
  a2[4] = result;
  *a2 = v3;
  a2[1] = 0;
  return result;
}

uint64_t sub_1A1377CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;

  v6 = objc_msgSend((id)objc_opt_self(), sel_linktimeVersion);
  return sub_1A1377D30(v6, a1, a2, a3);
}

uint64_t sub_1A1377D30@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45[4];
  uint64_t v46;

  v41 = a1;
  v36 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1A15A9024();
  v8 = MEMORY[0x1E0C80A78](v7);
  v35 = (char *)&v32 - v9;
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v8);
  v39 = (char *)&v32 - v10;
  v13 = type metadata accessor for RevisionAvailability(255, AssociatedTypeWitness, v11, v12);
  v14 = sub_1A15A9024();
  v33 = *(_QWORD *)(v14 - 8);
  v34 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v32 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v32 - v19;
  v46 = sub_1A15A8C70();
  v37 = a2;
  v38 = a3;
  sub_1A1377C30(a3, v45);
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v45, v45[3]);
    sub_1A15A9030();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, v13);
    v21 = sub_1A12D9948(v13);
    if ((v22 & 1) == 0)
    {
      if ((_DWORD)v21 == v41)
        goto LABEL_15;
      if ((int)v21 <= v41)
      {
        v23 = HIDWORD(v21);
        v24 = sub_1A12DA03C();
        if (*v24 == (_DWORD)v23 || (int)v23 >= v41)
        {
          v42 = v46;
          MEMORY[0x1E0C80A78](v24);
          v25 = v38;
          *(&v32 - 4) = v37;
          *(&v32 - 3) = v25;
          v30 = (uint64_t)v20;
          v26 = sub_1A15A8CD0();
          swift_bridgeObjectRetain();
          MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v26);
          sub_1A15A8E8C();
          swift_bridgeObjectRelease();
          if ((v44 & 1) != 0)
          {
            (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, v20, AssociatedTypeWitness);
            sub_1A15A8CAC();
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, v20, AssociatedTypeWitness);
            sub_1A15A8CB8();
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v13);
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v34);
  v27 = v46;
  v43 = v46;
  v28 = sub_1A15A8CD0();
  MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v28);
  if ((sub_1A15A8EA4() & 1) == 0)
  {
    v43 = v27;
    v20 = v35;
    sub_1A15A8E98();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v20, 1, AssociatedTypeWitness) == 1)
      __break(1u);
LABEL_15:
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v36, v20, AssociatedTypeWitness);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  }
  v43 = 0;
  v44 = 0xE000000000000000;
  sub_1A15A9090();
  sub_1A15A948C();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v31 = 0;
  v30 = 92;
  result = sub_1A15A91A4();
  __break(1u);
  return result;
}

uint64_t sub_1A1378184(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35[4];
  uint64_t v36;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v29 = (char *)&v25 - v5;
  v8 = type metadata accessor for RevisionAvailability(255, AssociatedTypeWitness, v6, v7);
  v9 = sub_1A15A9024();
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v25 - v11;
  v13 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v25 - v14;
  v16 = objc_msgSend((id)objc_opt_self(), sel_runtimeVersion);
  v36 = sub_1A15A8C70();
  v31 = a1;
  v32 = a2;
  sub_1A1377C30(a2, v35);
  v28 = v16;
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, v35[3]);
    sub_1A15A9030();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v8);
    v17 = sub_1A12D9948(v8);
    if ((v18 & 1) == 0 && v16 >= (int)v17)
    {
      v19 = HIDWORD(v17);
      v20 = sub_1A12DA03C();
      if (*v20 == (_DWORD)v19 || v16 <= (int)v19)
      {
        v33 = v36;
        MEMORY[0x1E0C80A78](v20);
        v21 = v32;
        *(&v25 - 4) = v31;
        *(&v25 - 3) = v21;
        *(&v25 - 2) = (uint64_t)v15;
        v22 = sub_1A15A8CD0();
        swift_bridgeObjectRetain();
        MEMORY[0x1A1B0B774](MEMORY[0x1E0DEAF50], v22);
        sub_1A15A8E8C();
        swift_bridgeObjectRelease();
        if ((v34 & 1) != 0)
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v29, v15, AssociatedTypeWitness);
          sub_1A15A8CAC();
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v29, v15, AssociatedTypeWitness);
          sub_1A15A8CB8();
        }
        v16 = v28;
      }
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v8);
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v27);
  v23 = v36;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v23;
}

uint64_t sub_1A1378480@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a1;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_1A128DBB4(v5), (v8 & 1) != 0))
  {
    v9 = v7;
    v10 = *(_QWORD *)(v6 + 56);
    v11 = sub_1A15A8A84();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(a4, v10 + *(_QWORD *)(v12 + 72) * v9, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a4, 0, 1, v11);
  }
  else
  {
    v13 = sub_1A15A8A84();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a4, 1, 1, v13);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A1378548(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  uint64_t (*v19)(_BYTE *, _QWORD);
  void (*v21)(_BYTE *, _QWORD);
  _BYTE v22[32];

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6001D0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v13 = &v22[-v12];
  v14 = sub_1A15A8A84();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = &v22[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = *a2;
  sub_1A134CF78(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1A128DB78((uint64_t)v13, (uint64_t *)&unk_1EE6001D0);
    v19 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 56))(v22, a3, a4);
    sub_1A1378AA8(v18, (uint64_t)v11);
    sub_1A128DB78((uint64_t)v11, (uint64_t *)&unk_1EE6001D0);
    return v19(v22, 0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v17, v13, v14);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 16))(v11, v17, v14);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
    v21 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 56))(v22, a3, a4);
    sub_1A137872C((uint64_t)v11, v18);
    v21(v22, 0);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_1A137872C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v5 = a2 & 1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE6001D0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A15A8A84();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_1A128DB78(a1, (uint64_t *)&unk_1EE6001D0);
    sub_1A1378AA8(v5, (uint64_t)v8);
    return sub_1A128DB78((uint64_t)v8, (uint64_t *)&unk_1EE6001D0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_1A1378DB0((uint64_t)v12, v5, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A1378880(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(a2 + 8) + 56))(&v3);
  sub_1A130C71C();
  return sub_1A15A9324();
}

double sub_1A13788C8(uint64_t a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[2];
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, __n128))(v3 + 16))((char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE5FE790);
  if (swift_dynamicCast())
  {
    sub_1A1288088(v8, (uint64_t)v10);
    v4 = v11;
    v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 16))(v8, v4, v5);
    v6 = *(_QWORD *)&v8[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_1A128DB78((uint64_t)v8, (uint64_t *)&unk_1EE5FE840);
    v6 = *sub_1A12D9FFC();
  }
  return *(double *)&v6;
}

uint64_t sub_1A13789EC()
{
  return sub_1A1378A04() & 1;
}

uint64_t sub_1A1378A04()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A15A8B5C() & 1;
}

uint64_t sub_1A1378AA8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char v5;
  unint64_t v6;
  char v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v5 = a1 & 1;
  swift_bridgeObjectRetain();
  v6 = sub_1A128DBB4(v5);
  v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    v16 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1A1338F70();
      v10 = v16;
    }
    v11 = *(_QWORD *)(v10 + 56);
    v12 = sub_1A15A8A84();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 32))(a2, v11 + *(_QWORD *)(v13 + 72) * v6, v12);
    sub_1A1378BC0(v6, v10);
    *v3 = v10;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
  else
  {
    v15 = sub_1A15A8A84();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
}

unint64_t sub_1A1378BC0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1A15A9078();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      sub_1A128E7E4();
      do
      {
        result = sub_1A15A8B38();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8 || v3 < (uint64_t)v9)
            goto LABEL_6;
        }
        else if (v9 < v8 && v3 < (uint64_t)v9)
        {
          goto LABEL_6;
        }
        v12 = *(_QWORD *)(a2 + 48);
        v13 = (_BYTE *)(v12 + v3);
        v14 = (_BYTE *)(v12 + v6);
        if (v3 != v6 || v13 >= v14 + 1)
          *v13 = *v14;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(sub_1A15A8A84() - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1A1378DB0(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  char v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v7 = a2 & 1;
  v8 = (_QWORD *)*v3;
  v10 = sub_1A128DBB4(a2 & 1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = sub_1A15A8A84();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return sub_1A1378ED4(v10, v7, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1A1338F70();
      goto LABEL_7;
    }
    sub_1A1338BE8(v13, a3 & 1);
    v20 = sub_1A128DBB4(v7);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1A1378ED4(v10, v7, a1, v16);
    }
  }
  result = sub_1A15A9390();
  __break(1u);
  return result;
}

uint64_t sub_1A1378ED4(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2 & 1;
  v7 = a4[7];
  v8 = sub_1A15A8A84();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

__n128 HorizonObservation.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t HorizonObservation.angle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HorizonObservation() + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for HorizonObservation()
{
  uint64_t result;

  result = qword_1EE63F370;
  if (!qword_1EE63F370)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t HorizonObservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HorizonObservation() + 24);
  v4 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

float HorizonObservation.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for HorizonObservation() + 28));
}

__n128 HorizonObservation.timeRange.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for HorizonObservation() + 32);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t HorizonObservation.originatingRequestDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HorizonObservation();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

unint64_t HorizonObservation.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A15A9090();
  swift_bridgeObjectRelease();
  v0 = type metadata accessor for HorizonObservation();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  sub_1A136E928(&qword_1EE600EB8, MEMORY[0x1E0CAE360]);
  sub_1A15A9324();
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  v1 = sub_1A12857D8(&qword_1EE600EC0, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
  sub_1A132D4B4(v0, (uint64_t)&off_1E452EFF8, v1);
  sub_1A15A8BEC();
  swift_bridgeObjectRelease();
  sub_1A15A8BEC();
  return 0xD00000000000001ALL;
}

void __swiftcall HorizonObservation.transform(for:)(CGAffineTransform *__return_ptr retstr, CGSize a2)
{
  double height;
  double width;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  CGFloat tx;
  CGFloat ty;
  id v11;
  double v12;
  CGFloat v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CGAffineTransform v18;
  CGAffineTransform v19;

  height = a2.height;
  width = a2.width;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19.a = 1.0;
  v19.b = 0.0;
  v19.c = 0.0;
  v19.d = 1.0;
  v19.tx = 0.0;
  v19.ty = 0.0;
  CGAffineTransformTranslate(&v18, &v19, width * 0.5, height * 0.5);
  v16 = *(_OWORD *)&v18.c;
  v17 = *(_OWORD *)&v18.a;
  tx = v18.tx;
  ty = v18.ty;
  type metadata accessor for HorizonObservation();
  v11 = objc_msgSend((id)objc_opt_self(), sel_radians);
  sub_1A15A87CC();

  sub_1A15A87C0();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_OWORD *)&v19.a = v17;
  *(_OWORD *)&v19.c = v16;
  v19.tx = tx;
  v19.ty = ty;
  CGAffineTransformRotate(&v18, &v19, v13);
  v19 = v18;
  CGAffineTransformTranslate(&v18, &v19, -(width * 0.5), -(height * 0.5));
  v14 = *(_OWORD *)&v18.c;
  v15 = *(_OWORD *)&v18.tx;
  *(_OWORD *)&retstr->a = *(_OWORD *)&v18.a;
  *(_OWORD *)&retstr->c = v14;
  *(_OWORD *)&retstr->tx = v15;
}

uint64_t HorizonObservation.hashValue.getter()
{
  sub_1A15A93E4();
  type metadata accessor for HorizonObservation();
  sub_1A12857D8(&qword_1EE600EC8, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
  sub_1A15A8B44();
  return sub_1A15A9420();
}

uint64_t sub_1A1379400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A12857D8(&qword_1EE600EC0, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
  return VisionObservation.hash(into:)(a1, a2, v4);
}

uint64_t sub_1A1379458()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C676E61;
  if (*v0 != 1)
    v1 = 0x746176726573626FLL;
  if (*v0)
    return v1;
  else
    return 0x726F66736E617274;
}

uint64_t sub_1A13794BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A137AD54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A13794E0()
{
  sub_1A137A27C();
  return sub_1A15A9474();
}

uint64_t sub_1A1379508()
{
  sub_1A137A27C();
  return sub_1A15A9480();
}

uint64_t HorizonObservation.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD40);
  v6 = *(_QWORD *)(v5 - 8);
  v20 = v5;
  v21 = v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600ED0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A137A27C();
  sub_1A15A9468();
  v13 = v3[1];
  v22 = *v3;
  v23 = v13;
  v24 = v3[2];
  v25 = 0;
  type metadata accessor for CGAffineTransform(0);
  sub_1A12857D8(&qword_1EE5FDFC0, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, MEMORY[0x1E0C9B9A0]);
  sub_1A15A92F4();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v19 = v10;
  v15 = v21;
  v16 = type metadata accessor for HorizonObservation();
  LOBYTE(v22) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  sub_1A136E928(&qword_1EE600C50, MEMORY[0x1E0CAE340]);
  sub_1A15A92F4();
  LOBYTE(v22) = 2;
  sub_1A12855AC();
  sub_1A15A92AC();
  v17 = sub_1A12857D8(&qword_1EE600EC0, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
  sub_1A12E2C64((uint64_t)v8, v16, (uint64_t)&off_1E452EFF8, v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v9);
}

uint64_t HorizonObservation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[60];
  char v49;

  v33 = a2;
  v40 = sub_1A15A88C8();
  v37 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v35 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCD60);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v38 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v42 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600ED8);
  v7 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HorizonObservation();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A137A27C();
  v43 = v9;
  v13 = (uint64_t)v44;
  sub_1A15A945C();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v32 = v7;
  v14 = v42;
  v44 = a1;
  v16 = v39;
  v15 = v40;
  type metadata accessor for CGAffineTransform(0);
  v49 = 0;
  sub_1A12857D8(&qword_1EE5FDFD0, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, MEMORY[0x1E0C9B9B0]);
  sub_1A15A9264();
  v17 = v46;
  *(_OWORD *)v12 = v45;
  *((_OWORD *)v12 + 1) = v17;
  *((_OWORD *)v12 + 2) = v47;
  LOBYTE(v45) = 1;
  sub_1A136E928(&qword_1EE600C88, MEMORY[0x1E0CAE358]);
  sub_1A15A9264();
  v31 = v10;
  v18 = *(int *)(v10 + 20);
  v19 = v12;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v12[v18], v6, v16);
  LOBYTE(v45) = 2;
  sub_1A12855AC();
  sub_1A15A9204();
  LOBYTE(v45) = 0;
  sub_1A12857D8((unint64_t *)&qword_1EE5FCD78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v20 = v35;
  v21 = v36;
  sub_1A15A9264();
  v22 = v21;
  v23 = (uint64_t)v19;
  v24 = v20;
  v25 = v22;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v19[*(int *)(v31 + 24)], v24, v15);
  LOBYTE(v45) = 1;
  sub_1A15A924C();
  v26 = v31;
  *(_DWORD *)(v23 + *(int *)(v31 + 28)) = v27;
  v49 = 3;
  sub_1A1285654();
  sub_1A15A9228();
  v28 = v33;
  *(_BYTE *)(v23 + *(int *)(v26 + 36)) = v45;
  v29 = v38;
  sub_1A12E32A4((uint64_t)v48);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v25);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v43, v41);
  sub_1A128465C((uint64_t)v48, v23 + *(int *)(v26 + 32));
  sub_1A137A2C0(v23, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return sub_1A137A304(v23);
}

uint64_t sub_1A1379DA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HorizonObservation.init(from:)(a1, a2);
}

uint64_t sub_1A1379DB4(_QWORD *a1)
{
  return HorizonObservation.encode(to:)(a1);
}

uint64_t sub_1A1379DC8@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v7;
  id v8;
  int *v9;
  id v10;
  int v11;
  int v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *a2;
  objc_msgSend(a1, sel_transform);
  objc_msgSend(a1, sel_angle);
  v8 = objc_msgSend((id)objc_opt_self(), sel_radians);
  v9 = (int *)type metadata accessor for HorizonObservation();
  sub_1A137A340();
  sub_1A15A87B4();
  v10 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v12 = v11;

  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v15;
  *(_QWORD *)(a4 + 32) = v16;
  *(_QWORD *)(a4 + 40) = v17;
  *(_DWORD *)(a4 + v9[7]) = v12;
  result = sub_1A128465C(a3, a4 + v9[8]);
  *(_BYTE *)(a4 + v9[9]) = v7;
  return result;
}

__n128 HorizonObservation.init(_:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  int *v5;
  id v6;
  int v7;
  int v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15[2];

  objc_msgSend(a1, sel_timeRange, static NormalizedRect.fullImage.getter(v15).n128_f64[0]);
  objc_msgSend(a1, sel_transform);
  objc_msgSend(a1, sel_angle);
  v4 = objc_msgSend((id)objc_opt_self(), sel_radians);
  v5 = (int *)type metadata accessor for HorizonObservation();
  sub_1A137A340();
  sub_1A15A87B4();
  v6 = objc_msgSend(a1, sel_uuid);
  sub_1A15A88B0();

  objc_msgSend(a1, sel_confidence);
  v8 = v7;

  *(_OWORD *)a2 = v11;
  *(__n128 *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v14;
  *(_DWORD *)(a2 + v5[7]) = v8;
  v9 = a2 + v5[8];
  result = v12;
  *(_OWORD *)v9 = v11;
  *(__n128 *)(v9 + 16) = v12;
  *(_QWORD *)(v9 + 32) = v13;
  *(_QWORD *)(v9 + 40) = v14;
  *(_BYTE *)(v9 + 48) = 0;
  *(_BYTE *)(a2 + v5[9]) = -4;
  return result;
}

uint64_t sub_1A137A0A8@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v5;

  v5 = *a2;
  return sub_1A1379DC8(a1, &v5, a3, a4);
}

uint64_t _s6Vision18HorizonObservationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  if ((sub_1A15A8F1C() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for HorizonObservation();
  sub_1A137A340();
  if ((sub_1A15A87A8() & 1) == 0 || (sub_1A15A88A4() & 1) == 0 || *(float *)(a1 + v4[7]) != *(float *)(a2 + v4[7]))
    return 0;
  v5 = v4[8];
  v6 = *(_BYTE *)(a1 + v5 + 48);
  v7 = a2 + v5;
  if ((v6 & 1) == 0)
  {
    if ((*(_BYTE *)(v7 + 48) & 1) != 0 || (sub_1A15A8EC8() & 1) == 0)
      return 0;
LABEL_10:
    v8 = v4[9];
    v9 = *(unsigned __int8 *)(a1 + v8);
    v10 = *(unsigned __int8 *)(a2 + v8);
    if (v9 <= 0xFB)
    {
      if (v10 > 0xFB)
        return 0;
      sub_1A12862A0();
      if ((sub_1A15A8B80() & 1) == 0)
        return 0;
    }
    else if (v10 <= 0xFB)
    {
      return 0;
    }
    return 1;
  }
  if (*(_BYTE *)(v7 + 48))
    goto LABEL_10;
  return 0;
}

unint64_t sub_1A137A27C()
{
  unint64_t result;

  result = qword_1EE63EFE0[0];
  if (!qword_1EE63EFE0[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DFC08, &type metadata for HorizonObservation.CodingKeys);
    atomic_store(result, qword_1EE63EFE0);
  }
  return result;
}

uint64_t sub_1A137A2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HorizonObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A137A304(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HorizonObservation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A137A340()
{
  unint64_t result;

  result = qword_1EE600B80;
  if (!qword_1EE600B80)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE600B80);
  }
  return result;
}

uint64_t sub_1A137A37C(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1A12857D8(&qword_1EE600EE0, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
  a1[2] = sub_1A12857D8(&qword_1EE600EE8, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
  a1[3] = sub_1A12857D8((unint64_t *)&unk_1EE600EF0, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
  result = sub_1A12857D8(&qword_1EE600EC8, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
  a1[4] = result;
  return result;
}

uint64_t sub_1A137A410()
{
  return sub_1A12857D8(&qword_1EE5FDCA0, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
}

uint64_t sub_1A137A43C(uint64_t a1)
{
  uint64_t result;

  result = sub_1A12857D8(&qword_1EE600EC0, (uint64_t (*)(uint64_t))type metadata accessor for HorizonObservation, (uint64_t)&protocol conformance descriptor for HorizonObservation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for HorizonObservation(_OWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v7;
    a1[2] = *((_OWORD *)a2 + 2);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = sub_1A15A88C8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[8];
    *(_DWORD *)((char *)v4 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v19;
    *((_OWORD *)v17 + 2) = *(_OWORD *)(v18 + 32);
    v17[48] = *(_BYTE *)(v18 + 48);
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return v4;
}

uint64_t destroy for HorizonObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = sub_1A15A88C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_OWORD *initializeWithCopy for HorizonObservation(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  v16[48] = v17[48];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithCopy for HorizonObservation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  __int128 v18;
  __int128 v19;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[48];
  v19 = *((_OWORD *)v16 + 1);
  v18 = *((_OWORD *)v16 + 2);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v19;
  *((_OWORD *)v15 + 2) = v18;
  v15[48] = v17;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_OWORD *initializeWithTake for HorizonObservation(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  v16[48] = v17[48];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_OWORD *assignWithTake for HorizonObservation(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_1A15A88C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  v16[48] = v17[48];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizonObservation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A137A990(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_1A15A88C8();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(unsigned __int8 *)(a1 + a3[9]);
  v13 = ((v12 >> 3) & 0xFFFFFFDF | (32 * ((v12 >> 2) & 1))) ^ 0x3F;
  if (v13 >= 0x21)
    return 0;
  else
    return v13;
}

uint64_t storeEnumTagSinglePayload for HorizonObservation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A137AA4C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDC08);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_1A15A88C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_BYTE *)(a1 + a4[9]) = ((~(_DWORD)a2 & 0x20u) >> 3) | (8 * ~(_BYTE)a2);
  return result;
}

void sub_1A137AB00()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A136F7D4();
  if (v0 <= 0x3F)
  {
    sub_1A15A88C8();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for HorizonObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A137ABFC + 4 * byte_1A15DF975[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A137AC30 + 4 * asc_1A15DF970[v4]))();
}

uint64_t sub_1A137AC30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A137AC38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A137AC40);
  return result;
}

uint64_t sub_1A137AC4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A137AC54);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A137AC58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A137AC60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HorizonObservation.CodingKeys()
{
  return &type metadata for HorizonObservation.CodingKeys;
}

unint64_t sub_1A137AC80()
{
  unint64_t result;

  result = qword_1EE63F480[0];
  if (!qword_1EE63F480[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DFBE0, &type metadata for HorizonObservation.CodingKeys);
    atomic_store(result, qword_1EE63F480);
  }
  return result;
}

unint64_t sub_1A137ACC8()
{
  unint64_t result;

  result = qword_1EE63F590;
  if (!qword_1EE63F590)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DFB50, &type metadata for HorizonObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE63F590);
  }
  return result;
}

unint64_t sub_1A137AD10()
{
  unint64_t result;

  result = qword_1EE63F598[0];
  if (!qword_1EE63F598[0])
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DFB78, &type metadata for HorizonObservation.CodingKeys);
    atomic_store(result, qword_1EE63F598);
  }
  return result;
}

uint64_t sub_1A137AD54(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F66736E617274 && a2 == 0xE90000000000006DLL;
  if (v2 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C676E61 && a2 == 0xE500000000000000 || (sub_1A15A9354() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746176726573626FLL && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A15A9354();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A137AEC4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch();
}

uint64_t sub_1A137AEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v1 = *(_QWORD *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCE68);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VisionResult(0) - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A15C3FE0;
  sub_1A1288044(v1 + 24, v0 + 16);
  v5 = *(void **)(v1 + 16);
  v6 = v5;
  sub_1A12AF89C(v0 + 16, 0, v5, v4 + v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1A137AF94(uint64_t a1, __int128 *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  sub_1A1288088(a2, v4 + 24);
  return v4;
}

uint64_t sub_1A137AFE4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t sub_1A137B010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 96) + *(_QWORD *)(*(_QWORD *)v1 + 96));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A129BC28;
  return v6(a1);
}

uint64_t type metadata accessor for ErrorReportingOperation()
{
  return objc_opt_self();
}

_QWORD *sub_1A137B094(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)swift_allocObject();
  v3 = MEMORY[0x1E0DEE9D8];
  result[3] = MEMORY[0x1E0DEE9D8];
  result[4] = v3;
  result[2] = a1;
  return result;
}

uint64_t sub_1A137B0D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1A137C528(a1);
  v4 = v3;
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, v1, ObjectType, v4);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = swift_unknownObjectRetain();
  sub_1A137CA28(v7, v1, v8, v6);
  return swift_unknownObjectRelease_n();
}

uint64_t sub_1A137B288(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;

  v3 = v2;
  v6 = sub_1A137C528(a2);
  v8 = v7;
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v8 + 48))(a2, v2, ObjectType, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 112))(a1);
  v10 = *(_QWORD *)(v8 + 8);
  swift_unknownObjectRetain();
  sub_1A137CB00(a1, v6, v3, v11, v10);
  return swift_unknownObjectRelease_n();
}

uint64_t sub_1A137B470@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F08);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FDAF8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v13 = &v16[-v12];
  v14 = *(_QWORD *)(v1 + 16);
  v17 = *(_QWORD *)(v1 + 32);
  v18 = v14;
  v19 = v1;
  type metadata accessor for VisionResult(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DF07B8], v3);
  swift_bridgeObjectRetain();
  sub_1A15A8D90();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v10, v13, v7);
  sub_1A12B44C4((uint64_t)v10, a1);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_1A137B5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v18;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F10);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFB40);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1A15A8D48();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = 0;
  *((_QWORD *)v16 + 4) = a2;
  *((_QWORD *)v16 + 5) = a3;
  *((_QWORD *)v16 + 6) = a4;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1A137C3DC((uint64_t)v13, (uint64_t)&unk_1EE600F20, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_1A137B74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch();
}

uint64_t sub_1A137B768()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F30);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  v2 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_1A137B804;
  return sub_1A15A90FC();
}

uint64_t sub_1A137B804()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A137B860()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F10);
  sub_1A15A8D60();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A137B89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[39] = a5;
  v6[40] = a6;
  v6[37] = a3;
  v6[38] = a4;
  v6[36] = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F48);
  v6[41] = v7;
  v6[42] = *(_QWORD *)(v7 - 8);
  v6[43] = swift_task_alloc();
  v6[44] = *(_QWORD *)(type metadata accessor for VisionResult(0) - 8);
  v6[45] = swift_task_alloc();
  v6[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FFB40);
  v6[47] = swift_task_alloc();
  v6[48] = swift_task_alloc();
  v6[49] = swift_task_alloc();
  v6[50] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F50);
  v6[51] = v8;
  v6[52] = *(_QWORD *)(v8 - 8);
  v6[53] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A137B9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t, uint64_t, uint64_t);
  __int128 v23;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (__int128 *)(v1 + 32);
    v4 = sub_1A15A8D48();
    v5 = *(_QWORD *)(v4 - 8);
    v22 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v5 + 56);
    swift_bridgeObjectRetain();
    v20 = v5;
    v21 = v4;
    while (1)
    {
      v6 = *(_QWORD *)(v0 + 304);
      v23 = *v3;
      v22(*(_QWORD *)(v0 + 400), 1, 1, v4);
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = 0;
      v8 = (_QWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 24) = 0;
      *(_OWORD *)(v7 + 32) = v23;
      *(_QWORD *)(v7 + 48) = v6;
      swift_unknownObjectRetain_n();
      swift_retain();
      if ((swift_taskGroup_addPending() & 1) != 0)
        break;
      swift_unknownObjectRelease();
      swift_release();
LABEL_4:
      sub_1A128DB78(*(_QWORD *)(v0 + 400), &qword_1EE5FFB40);
      ++v3;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    v9 = *(_QWORD *)(v0 + 392);
    sub_1A12C4CD0(*(_QWORD *)(v0 + 400), v9);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v9, 1, v4);
    v11 = *(_QWORD *)(v0 + 392);
    if (v10 == 1)
    {
      sub_1A128DB78(*(_QWORD *)(v0 + 392), &qword_1EE5FFB40);
      if (*v8)
      {
LABEL_8:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v12 = sub_1A15A8D00();
        v14 = v13;
        swift_unknownObjectRelease();
LABEL_11:
        v15 = **(_QWORD **)(v0 + 288);
        v16 = swift_allocObject();
        *(_QWORD *)(v16 + 16) = &unk_1EE600F60;
        *(_QWORD *)(v16 + 24) = v7;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F30);
        v17 = v14 | v12;
        if (v14 | v12)
        {
          v17 = v0 + 200;
          *(_QWORD *)(v0 + 200) = 0;
          *(_QWORD *)(v0 + 208) = 0;
          *(_QWORD *)(v0 + 216) = v12;
          *(_QWORD *)(v0 + 224) = v14;
        }
        *(_QWORD *)(v0 + 256) = 1;
        *(_QWORD *)(v0 + 264) = v17;
        *(_QWORD *)(v0 + 272) = v15;
        swift_task_create();
        swift_unknownObjectRelease();
        swift_release();
        v4 = v21;
        goto LABEL_4;
      }
    }
    else
    {
      sub_1A15A8D3C();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v11, v4);
      if (*v8)
        goto LABEL_8;
    }
    v12 = 0;
    v14 = 0;
    goto LABEL_11;
  }
LABEL_15:
  *(_QWORD *)(v0 + 432) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F30);
  sub_1A15A8D0C();
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 440) = v18;
  *v18 = v0;
  v18[1] = sub_1A137BCAC;
  return sub_1A15A8D18();
}

uint64_t sub_1A137BCAC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A137BD00()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _OWORD *v42;

  result = *(_QWORD *)(v0 + 280);
  if (!result)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 416) + 8))(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 408));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v40 = *(_QWORD *)(result + 16);
  if (!v40)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    v36 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 440) = v36;
    *v36 = v0;
    v36[1] = sub_1A137BCAC;
    return sub_1A15A8D18();
  }
  v2 = 0;
  v42 = (_OWORD *)(v0 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 352) + 80);
  v38 = result + ((v3 + 32) & ~v3);
  v39 = *(_QWORD *)(v0 + 280);
  while (v2 < *(_QWORD *)(result + 16))
  {
    v10 = *(_QWORD *)(v0 + 312);
    v41 = v2;
    sub_1A128F1CC(v38 + *(_QWORD *)(*(_QWORD *)(v0 + 352) + 72) * v2, *(_QWORD *)(v0 + 368));
    v11 = *(_QWORD *)(v10 + 24);
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = v11 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1A137D034(v13, v0 + 72);
        v14 = *(_QWORD *)(v0 + 96);
        v15 = *(_QWORD *)(v0 + 104);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 72), v14);
        sub_1A12B24F4();
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 88))(v0 + 128, v14, v15);
        __swift_destroy_boxed_opaque_existential_1(v0 + 128);
        if ((v16 & 1) != 0)
          break;
        sub_1A137D088(v0 + 72);
        v13 += 56;
        if (!--v12)
          goto LABEL_13;
      }
      v17 = *(_OWORD *)(v0 + 88);
      *v42 = *(_OWORD *)(v0 + 72);
      *(_OWORD *)(v0 + 32) = v17;
      *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 104);
      *(_QWORD *)(v0 + 64) = *(_QWORD *)(v0 + 120);
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_13:
      *(_QWORD *)(v0 + 64) = 0;
      *(_OWORD *)(v0 + 32) = 0u;
      *(_OWORD *)(v0 + 48) = 0u;
      *v42 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + 40))
    {
      v18 = *(_QWORD *)(v0 + 384);
      v19 = *(_QWORD *)(v0 + 368);
      v20 = *(_QWORD *)(v0 + 304);
      v22 = *(_QWORD *)(v0 + 56);
      v21 = *(_QWORD *)(v0 + 64);
      swift_unknownObjectRetain();
      sub_1A137D088((uint64_t)v42);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 24))(v19, ObjectType, v21);
      v24 = sub_1A15A8D48();
      v37 = *(_QWORD *)(v24 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v18, 1, 1, v24);
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = 0;
      v26 = v25 + 2;
      v25[3] = 0;
      v25[4] = v22;
      v25[5] = v21;
      v25[6] = v20;
      swift_retain();
      swift_unknownObjectRetain();
      if ((swift_taskGroup_addPending() & 1) != 0)
      {
        v27 = *(_QWORD *)(v0 + 376);
        sub_1A12C4CD0(*(_QWORD *)(v0 + 384), v27);
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v27, 1, v24);
        v29 = *(_QWORD *)(v0 + 376);
        if (v28 == 1)
        {
          sub_1A128DB78(*(_QWORD *)(v0 + 376), &qword_1EE5FFB40);
          if (*v26)
            goto LABEL_19;
LABEL_22:
          v30 = 0;
          v32 = 0;
        }
        else
        {
          sub_1A15A8D3C();
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v29, v24);
          if (!*v26)
            goto LABEL_22;
LABEL_19:
          swift_getObjectType();
          swift_unknownObjectRetain();
          v30 = sub_1A15A8D00();
          v32 = v31;
          swift_unknownObjectRelease();
        }
        v9 = v41;
        v33 = **(_QWORD **)(v0 + 288);
        v34 = swift_allocObject();
        *(_QWORD *)(v34 + 16) = &unk_1EE600F78;
        *(_QWORD *)(v34 + 24) = v25;
        v35 = v32 | v30;
        if (v32 | v30)
        {
          v35 = v0 + 168;
          *(_QWORD *)(v0 + 168) = 0;
          *(_QWORD *)(v0 + 176) = 0;
          *(_QWORD *)(v0 + 184) = v30;
          *(_QWORD *)(v0 + 192) = v32;
        }
        *(_QWORD *)(v0 + 232) = 1;
        *(_QWORD *)(v0 + 240) = v35;
        *(_QWORD *)(v0 + 248) = v33;
        swift_task_create();
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_release();
        v9 = v41;
      }
      sub_1A128DB78(*(_QWORD *)(v0 + 384), &qword_1EE5FFB40);
      goto LABEL_5;
    }
    v4 = *(_QWORD *)(v0 + 360);
    v5 = *(_QWORD *)(v0 + 368);
    v6 = *(_QWORD *)(v0 + 336);
    v7 = *(_QWORD *)(v0 + 344);
    v8 = *(_QWORD *)(v0 + 328);
    sub_1A128DB78((uint64_t)v42, &qword_1EE600F68);
    sub_1A128F1CC(v5, v4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F10);
    sub_1A15A8D54();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    v9 = v41;
LABEL_5:
    v2 = v9 + 1;
    sub_1A129DCD8(*(_QWORD *)(v0 + 368));
    result = v39;
    if (v2 == v40)
      goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A137C1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = a1;
  ObjectType = swift_getObjectType();
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v10;
  *v10 = v6;
  v10[1] = sub_1A137C284;
  return v12(a6, ObjectType, a5);
}

uint64_t sub_1A137C284(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A137C2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = a1;
  ObjectType = swift_getObjectType();
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v10;
  *v10 = v6;
  v10[1] = sub_1A137C36C;
  return v12(a6, ObjectType, a5);
}

uint64_t sub_1A137C36C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A137C3C8()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A137C3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A15A8D48();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A15A8D3C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A128DB78(a1, &qword_1EE5FFB40);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A15A8D00();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1A137C528(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[40];
  uint64_t v34;

  v3 = v2;
  v4 = v1;
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 72))(v6, v7);
  v10 = v9;
  v12 = v11;
  sub_1A12C312C(v8, v9, v11);
  v14 = v13;
  v34 = v15;
  sub_1A12C32BC(v8, v10, v12);
  v16 = *(_QWORD *)(v4 + 32);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v31 = v4;
    v32 = v2;
    swift_bridgeObjectRetain();
    v18 = 32;
    do
    {
      v19 = *(_QWORD *)(v16 + v18);
      swift_getObjectType();
      v20 = swift_conformsToProtocol2();
      if (v20)
        v21 = v19;
      else
        v21 = 0;
      if (v20)
        v22 = v20;
      else
        v22 = 0;
      if (v21)
      {
        ObjectType = swift_getObjectType();
        sub_1A1288044((uint64_t)a1, (uint64_t)v33);
        if (ObjectType == v14)
        {
          v24 = swift_getObjectType();
          v25 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v22 + 40);
          swift_unknownObjectRetain_n();
          LOBYTE(v25) = v25(v33, v24, v22);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
          swift_unknownObjectRelease();
          if ((v25 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return v21;
          }
        }
        else
        {
          swift_unknownObjectRetain_n();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
          swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
      }
      v18 += 16;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    v4 = v31;
    v3 = v32;
  }
  sub_1A1288044((uint64_t)a1, (uint64_t)v33);
  v26 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 80);
  v27 = v34;
  v28 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v34 + 72);
  swift_retain();
  v21 = v14;
  v29 = v28(v33, v26, v14, v27);
  if (!v3)
    return v29;
  return v21;
}

uint64_t sub_1A137C708(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10[5];

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = a2[3];
  v6 = a2[4];
  v7 = __swift_project_boxed_opaque_existential_1(a2, v5);
  v10[3] = v5;
  v10[4] = *(_QWORD *)(v6 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v7, v5);
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 88))(v10, v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v7 & 1;
}

uint64_t sub_1A137C7AC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1A137C7E0()
{
  return MEMORY[0x1E0DEE9D8];
}

_QWORD *sub_1A137C7EC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600FA0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE600FA8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A137C90C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F98);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A137CA28(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v6 = result;
  v7 = *(_QWORD **)(a2 + 32);
  v8 = v7[2];
  if (v8)
  {
    v9 = v7 + 4;
    while (*v9 != result)
    {
      v9 += 2;
      if (!--v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    swift_unknownObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a2 + 32) = v7;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1A137C7EC(0, v7[2] + 1, 1, v7);
      v7 = (_QWORD *)result;
      *(_QWORD *)(a2 + 32) = result;
    }
    v11 = v7[2];
    v10 = v7[3];
    if (v11 >= v10 >> 1)
    {
      result = (uint64_t)sub_1A137C7EC((_QWORD *)(v10 > 1), v11 + 1, 1, v7);
      v7 = (_QWORD *)result;
      *(_QWORD *)(a2 + 32) = result;
    }
    v7[2] = v11 + 1;
    v12 = &v7[2 * v11];
    v12[4] = v6;
    v12[5] = a4;
  }
  return result;
}

uint64_t sub_1A137CB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[3];
  uint64_t v18;
  _BYTE v19[40];
  uint64_t v20;
  uint64_t v21;

  sub_1A1288044(a1, (uint64_t)v19);
  v20 = a2;
  v21 = a5;
  sub_1A137D034((uint64_t)v19, (uint64_t)v17);
  v8 = *(char **)(a3 + 24);
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a3 + 24) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = sub_1A137C90C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    *(_QWORD *)(a3 + 24) = v8;
  }
  v11 = *((_QWORD *)v8 + 2);
  v10 = *((_QWORD *)v8 + 3);
  if (v11 >= v10 >> 1)
  {
    v8 = sub_1A137C90C((char *)(v10 > 1), v11 + 1, 1, v8);
    *(_QWORD *)(a3 + 24) = v8;
  }
  *((_QWORD *)v8 + 2) = v11 + 1;
  v12 = &v8[56 * v11];
  v13 = v17[0];
  v14 = v17[1];
  v15 = v17[2];
  *((_QWORD *)v12 + 10) = v18;
  *((_OWORD *)v12 + 3) = v14;
  *((_OWORD *)v12 + 4) = v15;
  *((_OWORD *)v12 + 2) = v13;
  return sub_1A137D088((uint64_t)v19);
}

uint64_t sub_1A137CBEC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1A137B5E0(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for ExecutionPlan()
{
  return objc_opt_self();
}

uint64_t destroy for ExecutionPlan.Dependency(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ExecutionPlan.Dependency(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ExecutionPlan.Dependency(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = a2[6];
  a1[5] = a2[5];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[6] = v4;
  return a1;
}

uint64_t assignWithTake for ExecutionPlan.Dependency(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutionPlan.Dependency(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecutionPlan.Dependency(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionPlan.Dependency()
{
  return &type metadata for ExecutionPlan.Dependency;
}

uint64_t sub_1A137CDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F10);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A137CE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE600F10) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = v0 + ((v2 + 56) & ~v2);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_1A128C750;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 16) = v6;
  return swift_task_switch();
}

uint64_t sub_1A137CEE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A128E870;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE5FE318 + dword_1EE5FE318))(a1, v4);
}

uint64_t sub_1A137CF50(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = v2[2];
  v6 = v2[3];
  v8 = v2[4];
  v7 = v2[5];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_1A128E870;
  return sub_1A137B89C((uint64_t)v9, a2, v5, v6, v8, v7);
}

uint64_t sub_1A137CFC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A128E870;
  return sub_1A137C1F8(a1, v8, v9, v4, v5, v6);
}

uint64_t sub_1A137D034(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  swift_unknownObjectRetain();
  return a2;
}

uint64_t sub_1A137D088(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t objectdestroy_11Tm()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A137D0EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A128E870;
  return sub_1A137C2E0(a1, v8, v9, v4, v5, v6);
}

uint64_t sub_1A137D158(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = sub_1A137D1C0;
  return v5(v2 + 16);
}

uint64_t sub_1A137D1C0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1A137D210()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A137D234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A128E870;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE600F80 + dword_1EE600F80))(a1, v4);
}

uint64_t sub_1A137D2A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A128C750;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE600F80 + dword_1EE600F80))(a1, v4);
}

uint64_t sub_1A137D3B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1A137D3EC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  return v1;
}

uint64_t sub_1A137D3EC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1A137D404()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1EE600FB8 + dword_1EE600FB8);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1A128C750;
  return v3();
}

uint64_t sub_1A137D578(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&dword_1EE600FB8 + dword_1EE600FB8);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1A137D5D8;
  return v4();
}

uint64_t sub_1A137D5D8()
{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  swift_task_dealloc();
  v3 = *(_QWORD *)(v2 + 16);
  if (v0)
  {
    v4 = (void *)sub_1A15A8838();

    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v3 + 16))(*(_QWORD *)(v2 + 16), 0);
  }
  _Block_release(*(const void **)(v2 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

id sub_1A137D670()
{
  return sub_1A137E54C();
}

id sub_1A137D6F4()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id sub_1A137D714()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModelCatalogWrapper();
  return objc_msgSendSuper2(&v2, sel_init);
}

id sub_1A137D780()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModelCatalogWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A137D7B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  int v13;
  _QWORD v15[8];

  if (MEMORY[0x1E0D502D8])
    v3 = MEMORY[0x1E0D502E0] == 0;
  else
    v3 = 1;
  if (v3 || MEMORY[0x1E0D502C0] == 0 || MEMORY[0x1E0D502D0] == 0 || MEMORY[0x1E0D502C8] == 0)
    return 0;
  v15[6] = v1;
  v15[7] = v2;
  v8 = sub_1A15A8A3C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, v8);
  if (MEMORY[0x1E0D502B0] && v13 == *MEMORY[0x1E0D502B0])
    return 0x6E776F6420746F6ELL;
  if (MEMORY[0x1E0D502A8] && v13 == *MEMORY[0x1E0D502A8])
    return 0xD000000000000011;
  if (MEMORY[0x1E0D502B8] && v13 == *MEMORY[0x1E0D502B8])
    return 0xD000000000000016;
  if (MEMORY[0x1E0D502A0] && v13 == *MEMORY[0x1E0D502A0])
    return 0xD000000000000017;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return 0x206E776F6E6B6E75;
}

uint64_t sub_1A137D990(uint64_t result)
{
  BOOL v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  _QWORD v34[2];
  uint64_t v35;
  _QWORD *v36;
  char *v37;

  if (MEMORY[0x1E0D501F0])
    v1 = MEMORY[0x1E0D50208] == 0;
  else
    v1 = 1;
  if (!v1 && MEMORY[0x1E0D50200] != 0)
  {
    v3 = (_QWORD *)result;
    v4 = sub_1A15A8A00();
    v34[1] = v34;
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(_QWORD *)(v5 + 64);
    MEMORY[0x1E0C80A78](v4);
    v37 = (char *)((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v7 = (char *)((char *)v34 - v37);
    v8 = v3[3];
    v35 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v8);
    v9 = sub_1A15A89DC();
    v36 = v34;
    v10 = *(_QWORD *)(v9 - 8);
    v11 = MEMORY[0x1E0C80A78](v9);
    v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x1A1B08D98](v8, *(_QWORD *)(v35 + 8), v11);
    sub_1A15A89D0();
    v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v15 = MEMORY[0x1E0C80A78](v14);
    v16 = (char *)((char *)v34 - v37);
    (*(void (**)(int64_t, char *, uint64_t, __n128))(v5 + 16))((char *)v34 - v37, v7, v4, v15);
    v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v16, v4);
    if (MEMORY[0x1E0D501D0] && v17 == *MEMORY[0x1E0D501D0])
    {
      (*(void (**)(char *, uint64_t))(v5 + 96))(v16, v4);
      v18 = sub_1A15A8A3C();
      v37 = (char *)v34;
      v36 = (_QWORD *)v5;
      v19 = *(_QWORD *)(v18 - 8);
      v20 = MEMORY[0x1E0C80A78](v18);
      v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t, __n128))(v19 + 32))(v22, v16, v18, v20);
      v23 = sub_1A137D7B0((uint64_t)v22);
      v25 = v24;
      sub_1A137E8D8();
      swift_allocError();
      *(_QWORD *)v26 = v23;
      *(_QWORD *)(v26 + 8) = v25;
      *(_BYTE *)(v26 + 16) = 1;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
      return ((uint64_t (*)(char *, uint64_t))v36[1])(v7, v4);
    }
    if (MEMORY[0x1E0D501D8] && v17 == *MEMORY[0x1E0D501D8])
    {
      sub_1A137E8D8();
      swift_allocError();
      *(_QWORD *)v27 = 0xD000000000000030;
      *(_QWORD *)(v27 + 8) = 0x80000001A15FED80;
      v28 = 3;
LABEL_28:
      *(_BYTE *)(v27 + 16) = v28;
      goto LABEL_29;
    }
    if (MEMORY[0x1E0D501E0] && v17 == *MEMORY[0x1E0D501E0])
    {
      sub_1A137E8D8();
      swift_allocError();
      *(_QWORD *)v29 = 0xD00000000000002ELL;
      *(_QWORD *)(v29 + 8) = 0x80000001A15FED50;
LABEL_20:
      *(_BYTE *)(v29 + 16) = 0;
LABEL_29:
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    if (MEMORY[0x1E0D501E8] && v17 == *MEMORY[0x1E0D501E8])
    {
      sub_1A137E8D8();
      swift_allocError();
      *(_QWORD *)v29 = 0xD000000000000013;
      *(_QWORD *)(v29 + 8) = 0x80000001A15FED30;
      goto LABEL_20;
    }
    if (MEMORY[0x1E0D501C8] && v17 == *MEMORY[0x1E0D501C8])
    {
      sub_1A137E8D8();
      swift_allocError();
      v30 = 0xD00000000000002ELL;
      v31 = "non network error occured when fetching model ";
LABEL_27:
      *(_QWORD *)v27 = v30;
      *(_QWORD *)(v27 + 8) = (unint64_t)(v31 - 32) | 0x8000000000000000;
      v28 = 1;
      goto LABEL_28;
    }
    if (MEMORY[0x1E0D501C0] && v17 == *MEMORY[0x1E0D501C0])
    {
      sub_1A137E8D8();
      swift_allocError();
      v30 = 0xD000000000000021;
      v31 = "network error when fetching model";
      goto LABEL_27;
    }
    sub_1A137E8D8();
    swift_allocError();
    *(_QWORD *)v32 = 0xD00000000000001BLL;
    *(_QWORD *)(v32 + 8) = 0x80000001A15FECB0;
    *(_BYTE *)(v32 + 16) = 3;
    swift_willThrow();
    v33 = *(void (**)(char *, uint64_t))(v5 + 8);
    v33(v7, v4);
    return ((uint64_t (*)(char *, uint64_t))v33)(v16, v4);
  }
  return result;
}

uint64_t sub_1A137DE70()
{
  return swift_task_switch();
}

uint64_t sub_1A137DE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  _QWORD *v25;

  if (MEMORY[0x1E0D4FF30])
  {
    sub_1A15A89A0();
    v1 = sub_1A15A89AC();
    *(_QWORD *)(v0 + 56) = v1;
    v2 = *(_QWORD *)(v1 - 8);
    *(_QWORD *)(v0 + 64) = v2;
    v3 = swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v3;
    v5 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v5);
    MEMORY[0x1A1B08D68](v5, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8));
    sub_1A15A8994();
    swift_bridgeObjectRelease();
    v6 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(v6, v3, v1);
    v7 = (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 88))(v6, v1);
    if (MEMORY[0x1E0D500A8] && v7 == *MEMORY[0x1E0D500A8])
    {
      (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v6, v1);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600FF8);
      *(_QWORD *)(v0 + 80) = v8;
      *(_QWORD *)(v0 + 88) = *(_QWORD *)(v8 - 8);
      *(_QWORD *)(v0 + 96) = swift_task_alloc();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE601000);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1A15C3FE0;
      v11 = *(_QWORD *)(v0 + 40);
      v10 = *(_QWORD *)(v0 + 48);
      v12 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v11);
      *(_QWORD *)(v9 + 56) = v11;
      *(_QWORD *)(v9 + 64) = *(_QWORD *)(v10 + 8);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 32));
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(boxed_opaque_existential_1, v12, v11);
      sub_1A15A8988();
      swift_bridgeObjectRelease();
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE601008);
      *(_QWORD *)(v0 + 104) = v24;
      *(_QWORD *)(v0 + 112) = *(_QWORD *)(v24 - 8);
      *(_QWORD *)(v0 + 120) = swift_task_alloc();
      sub_1A15A8D6C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE601010);
      *(_QWORD *)(v0 + 128) = swift_task_alloc();
      v25 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v25;
      *v25 = v0;
      v25[1] = sub_1A137E31C;
      return sub_1A15A8D78();
    }
    if (MEMORY[0x1E0D50098] && v7 == *MEMORY[0x1E0D50098] || MEMORY[0x1E0D50090] && v7 == *MEMORY[0x1E0D50090])
    {
      (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v6, v1);
      v15 = *v6;
      v16 = v6[1];
      sub_1A137E8D8();
      v17 = (void *)swift_allocError();
      *(_QWORD *)v18 = v15;
      *(_QWORD *)(v18 + 8) = v16;
      *(_BYTE *)(v18 + 16) = 0;
    }
    else
    {
      if (!MEMORY[0x1E0D500A0] || v7 != *MEMORY[0x1E0D500A0])
      {
        sub_1A137E8D8();
        v17 = (void *)swift_allocError();
        *(_QWORD *)v22 = 0xD000000000000034;
        *(_QWORD *)(v22 + 8) = 0x80000001A15FEC30;
        *(_BYTE *)(v22 + 16) = 0;
        swift_willThrow();
        v23 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
        v23(v3, v1);
        v23((uint64_t)v6, v1);
        goto LABEL_16;
      }
      (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v6, v1);
      v19 = *v6;
      v20 = v6[1];
      sub_1A137E8D8();
      v17 = (void *)swift_allocError();
      *(_QWORD *)v21 = v19;
      *(_QWORD *)(v21 + 8) = v20;
      *(_BYTE *)(v21 + 16) = 3;
    }
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1A137D990(v0 + 16);

    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  sub_1A137E8D8();
  swift_allocError();
  *(_QWORD *)v14 = 0xD000000000000035;
  *(_QWORD *)(v14 + 8) = 0x80000001A15FEE20;
  *(_BYTE *)(v14 + 16) = 0;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A137E31C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A137E370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = sub_1A15A8A30();
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11, v1, v2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE5FCE98);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1A15C3FE0;
    sub_1A15A8A24();
    *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEB070];
    *(_QWORD *)(v12 + 32) = v13;
    sub_1A15A93D8();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v11, v2);
    swift_task_dealloc();
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v14;
    *v14 = v0;
    v14[1] = sub_1A137E31C;
    return sub_1A15A8D78();
  }
}

id sub_1A137E54C()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  if (MEMORY[0x1E0D4FF30])
  {
    sub_1A15A89A0();
    v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE600FF0);
    v3 = *(_QWORD *)(v2 - 8);
    MEMORY[0x1E0C80A78](v2);
    v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    __swift_project_boxed_opaque_existential_1(v30, v31);
    sub_1A15A89E8();
    if (v1)
    {
      sub_1A137D990((uint64_t)v30);

LABEL_7:
      v28 = 0;
      v29 = 0xE000000000000000;
      sub_1A15A9090();
      swift_bridgeObjectRelease();
      v28 = 0xD000000000000019;
      v29 = 0x80000001A15FEC70;
      v18 = v31;
      v19 = v32;
      __swift_project_boxed_opaque_existential_1(v30, v31);
      MEMORY[0x1A1B08D68](v18, *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8));
      sub_1A15A8BEC();
      swift_bridgeObjectRelease();
      sub_1A15A8BEC();
      v0 = (id)v28;
      v20 = v29;
      sub_1A137E8D8();
      swift_allocError();
      *(_QWORD *)v21 = v0;
      *(_QWORD *)(v21 + 8) = v20;
      *(_BYTE *)(v21 + 16) = 0;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      return v0;
    }
    v7 = sub_1A15A8868();
    v33 = &v23;
    v25 = *(_QWORD *)(v7 - 8);
    v26 = v7;
    MEMORY[0x1E0C80A78](v7);
    v27 = &v23;
    v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = sub_1A15A8A18();
    v24 = v3;
    v11 = v10;
    v12 = *(_QWORD *)(v10 - 8);
    MEMORY[0x1E0C80A78](v10);
    v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = sub_1A15A89B8();
    MEMORY[0x1A1B08DB0](v15);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    sub_1A15A8850();
    v16 = objc_allocWithZone(MEMORY[0x1E0C99E98]);
    v17 = (void *)sub_1A15A8B8C();
    swift_bridgeObjectRelease();
    v0 = objc_msgSend(v16, sel_initWithString_, v17);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v2);
    if (!v0)
      goto LABEL_7;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  else
  {
    sub_1A137E8D8();
    swift_allocError();
    *(_QWORD *)v6 = 0xD000000000000034;
    *(_QWORD *)(v6 + 8) = 0x80000001A15FEC30;
    *(_BYTE *)(v6 + 16) = 0;
    swift_willThrow();
  }
  return v0;
}

uint64_t type metadata accessor for ModelCatalogWrapper()
{
  return objc_opt_self();
}

unint64_t sub_1A137E8D8()
{
  unint64_t result;

  result = qword_1EE600FC0;
  if (!qword_1EE600FC0)
  {
    result = MEMORY[0x1A1B0B774](&unk_1A15DFD88, &type metadata for ModelCatalogWrapper.ModelLoadingError);
    atomic_store(result, (unint64_t *)&qword_1EE600FC0);
  }
  return result;
}

uint64_t sub_1A137E91C()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1A137E928()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A128C750;
  return v5();
}

uint64_t sub_1A137E990()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t destroy for ModelCatalogWrapper.ModelLoadingError(uint64_t a1)
{
  return sub_1A137E9D0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1A137E9D0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s19ModelCatalogWrapper19ModelCatalogWrapperC17ModelLoadingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A137D3EC(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ModelCatalogWrapper.ModelLoadingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A137D3EC(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A137E9D0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ModelCatalogWrapper.ModelLoadingError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A137E9D0(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelCatalogWrapper.ModelLoadingError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelCatalogWrapper.ModelLoadingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelCatalogWrapper.ModelLoadingError()
{
  return &type metadata for ModelCatalogWrapper.ModelLoadingError;
}

uint64_t sub_1A137EB64()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1A137EB90()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A128C750;
  return ((uint64_t (*)(const void *))((char *)&dword_1EE600FD0 + dword_1EE600FD0))(v2);
}

uint64_t sub_1A137EBFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A128E870;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EE5FFB68 + dword_1EE5FFB68))(a1, v4, v5, v6);
}

void rtcv::LoggerDevNull::~LoggerDevNull(FILE **this)
{
  fclose(*this);
}

uint64_t rtcv::LoggerDevNull::devNull(rtcv::LoggerDevNull *this)
{
  return *(_QWORD *)this;
}

uint64_t *rtcv::LoggerDevNull::instance(rtcv::LoggerDevNull *this)
{
  unsigned __int8 v1;

  {
    rtcv::LoggerDevNull::instance(void)::theInstance = 0;
    rtcv::LoggerDevNull::instance(void)::theInstance = (uint64_t)fopen("/dev/null", "wt");
    __cxa_atexit((void (*)(void *))rtcv::LoggerDevNull::~LoggerDevNull, &rtcv::LoggerDevNull::instance(void)::theInstance, &dword_1A1254000);
  }
  return &rtcv::LoggerDevNull::instance(void)::theInstance;
}

rtcv::Logger *rtcv::Logger::Logger(rtcv::Logger *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count_vtbl *v5;

  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_BYTE *)this + 192) = 7;
  v2 = operator new();
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)v2 = &off_1E453A020;
  *(_QWORD *)(v2 + 8) = 850045863;
  v3 = *MEMORY[0x1E0C80C20];
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v3;
  v5 = (std::__shared_weak_count_vtbl *)v2;
  rtcv::Logger::clearTarget(this);
  rtcv::Logger::addTargetBetweenSeverities((uint64_t)this, &v5, 0, 7u);
  if (v5)
    (*((void (**)(std::__shared_weak_count_vtbl *))v5->~__shared_weak_count + 1))(v5);
  return this;
}

void rtcv::Logger::Target::log(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v12;

  v12 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a2, a3, &a9);
  std::mutex::unlock(v12);
}

uint64_t rtcv::ConsoleLogTarget::doLog(uint64_t a1, int a2, const char *a3, va_list a4)
{
  fprintf(*(FILE **)(a1 + 72), "< %-8s > ", rtcv::Logger::severityToString(rtcv::Logger::Severity)::stringArr[a2]);
  return vfprintf(*(FILE **)(a1 + 72), a3, a4);
}

void *rtcv::Logger::instance(rtcv::Logger *this)
{
  unsigned __int8 v1;

  {
    rtcv::Logger::Logger((rtcv::Logger *)&rtcv::Logger::instance(void)::instance);
    __cxa_atexit((void (*)(void *))rtcv::Logger::~Logger, &rtcv::Logger::instance(void)::instance, &dword_1A1254000);
  }
  return &rtcv::Logger::instance(void)::instance;
}

void rtcv::Logger::~Logger(rtcv::Logger *this)
{
  uint64_t i;
  void **v3;

  for (i = 168; i != -24; i -= 24)
  {
    v3 = (void **)((char *)this + i);
    std::vector<std::shared_ptr<rtcv::Logger::Target>>::__destroy_vector::operator()[abi:nn180100](&v3);
  }
}

uint64_t rtcv::Logger::clearTarget(rtcv::Logger *this)
{
  uint64_t i;
  char *v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  for (i = 0; i != 8; ++i)
  {
    v3 = (char *)this + 24 * i;
    v6 = *((_QWORD *)v3 + 1);
    v5 = v3 + 8;
    result = v6;
    v7 = *((_QWORD *)this + 3 * i);
    while (result != v7)
      result = std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](result - 16);
    *v5 = v7;
  }
  return result;
}

void rtcv::Logger::addTargetBetweenSeverities(uint64_t a1, std::__shared_weak_count_vtbl **a2, unsigned int a3, unsigned int a4)
{
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *p_shared_owners;
  char **v12;
  std::__shared_weak_count_vtbl **v13;
  char **v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  _QWORD *v38;

  v8 = *a2;
  if (*a2)
  {
    v9 = (std::__shared_weak_count *)operator new();
    v10 = *a2;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E453BDB8;
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v10;
  }
  else
  {
    v9 = 0;
  }
  *a2 = 0;
  if (a3 <= a4)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
    {
      v12 = (char **)(a1 + 24 * a3);
      v14 = v12 + 1;
      v13 = (std::__shared_weak_count_vtbl **)v12[1];
      v16 = (uint64_t *)(v12 + 2);
      v15 = (unint64_t)v12[2];
      if ((unint64_t)v13 >= v15)
      {
        v19 = ((char *)v13 - *v12) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          abort();
        v21 = v15 - (_QWORD)*v12;
        if (v21 >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        v38 = v12 + 2;
        v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<rtcv::Logger::Target>>>((uint64_t)v16, v22);
        v25 = &v23[16 * v19];
        *(_QWORD *)v25 = v8;
        *((_QWORD *)v25 + 1) = v9;
        if (v9)
        {
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
        }
        v27 = *v14;
        v28 = *v12;
        if (*v14 == *v12)
        {
          v31 = vdupq_n_s64((unint64_t)v27);
          v29 = &v23[16 * v19];
        }
        else
        {
          v29 = &v23[16 * v19];
          do
          {
            v30 = *((_OWORD *)v27 - 1);
            v27 -= 16;
            *((_OWORD *)v29 - 1) = v30;
            v29 -= 16;
            *(_QWORD *)v27 = 0;
            *((_QWORD *)v27 + 1) = 0;
          }
          while (v27 != v28);
          v31 = *(int64x2_t *)v12;
        }
        v18 = v25 + 16;
        *v12 = v29;
        *v14 = v25 + 16;
        v36 = v31;
        v32 = *v16;
        *v16 = (uint64_t)&v23[16 * v24];
        v37 = v32;
        v35 = v31.i64[0];
        std::__split_buffer<std::shared_ptr<rtcv::Logger::Target>>::~__split_buffer((uint64_t)&v35);
      }
      else
      {
        *v13 = v8;
        v13[1] = (std::__shared_weak_count_vtbl *)v9;
        if (v9)
        {
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        v18 = (char *)(v13 + 2);
      }
      *v14 = v18;
      LOBYTE(a3) = a3 + 1;
    }
    while (a4 >= a3);
  }
  if (v9)
  {
    v33 = (unint64_t *)&v9->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void rtcv::ConsoleLogTarget::~ConsoleLogTarget(rtcv::ConsoleLogTarget *this)
{
  *(_QWORD *)this = off_1E453A048;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  *(_QWORD *)this = off_1E453A048;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x1A1B0A898);
}

void std::vector<std::shared_ptr<rtcv::Logger::Target>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<rtcv::Logger::Target>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

uint64_t std::__split_buffer<std::shared_ptr<rtcv::Logger::Target>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::shared_ptr<rtcv::Logger::Target>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<rtcv::Logger::Target  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0A898);
}

uint64_t std::__shared_ptr_pointer<rtcv::Logger::Target  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

float bmClamp(float a1, float a2, float a3)
{
  if (a3 >= a1)
    a3 = a1;
  if (a1 >= a2)
    return a3;
  else
    return a2;
}

float bmSoftmax2(float a1, float a2)
{
  float v3;
  float v4;
  float v5;

  if (a1 >= a2)
    v3 = a1;
  else
    v3 = a2;
  v4 = expf(a1 - v3);
  v5 = expf(a2 - v3);
  return v5 / (float)(v4 + v5);
}

void rtcv::Logger::log<(rtcv::Logger::Severity)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned __int8 *)(a1 + 192) >= 3u)
  {
    v8 = *(uint64_t **)(a1 + 72);
    v9 = *(uint64_t **)(a1 + 80);
    while (v8 != v9)
    {
      v11 = *v8;
      v8 += 2;
      rtcv::Logger::Target::log(v11, 3, a2, a4, a5, a6, a7, a8, v12);
    }
  }
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void rtcv::Logger::log<(rtcv::Logger::Severity)3,rtcv::SimResizePixelFormat &>(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v12;

  if (*(unsigned __int8 *)(a1 + 192) >= 3u)
  {
    v8 = *(uint64_t **)(a1 + 72);
    v9 = *(uint64_t **)(a1 + 80);
    while (v8 != v9)
    {
      v12 = *v8;
      v8 += 2;
      rtcv::Logger::Target::log(v12, 3, a2, a4, a5, a6, a7, a8, *a3);
    }
  }
}

void rtcv::Logger::log<(rtcv::Logger::Severity)3,rtcv::SimResizePixelFormat &,rtcv::SimResizeModel &,rtcv::SimResizeStretch &>(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v12;

  if (*(unsigned __int8 *)(a1 + 192) >= 3u)
  {
    v8 = *(uint64_t **)(a1 + 72);
    v9 = *(uint64_t **)(a1 + 80);
    while (v8 != v9)
    {
      v12 = *v8;
      v8 += 2;
      rtcv::Logger::Target::log(v12, 3, a2, a4, a5, a6, a7, a8, *a3);
    }
  }
}

BOOL rtcv::simCropResizeExtendMean(rtcv::LoggerDevNull *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7, void *a8, float a9, float a10, float a11, unsigned int a12, unsigned int a13, unsigned int a14, uint64_t a15)
{
  uint64_t *v18;
  FILE *v19;
  rtcv::Logger *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  int v27;
  unsigned int v28;
  vImage_AffineTransform transform;
  uint8_t backColor;
  __int16 v31;
  char v32;
  vImage_Buffer dest;
  vImage_Buffer src;

  v27 = a6;
  v28 = a5;
  v26 = a7;
  if (a6 | a5 | a7)
  {
    v18 = rtcv::LoggerDevNull::instance(a1);
    v19 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v18);
    v20 = (rtcv::Logger *)fprintf(v19, "Pixel format (%d), model (%d), or stretch (%d) not supported!\n", a5, a6, a7);
    v21 = rtcv::Logger::instance(v20);
    rtcv::Logger::log<(rtcv::Logger::Severity)3,rtcv::SimResizePixelFormat &,rtcv::SimResizeModel &,rtcv::SimResizeStretch &>((uint64_t)v21, (uint64_t)"Pixel format (%d), model (%d), or stretch (%d) not supported!\n", &v28, (uint64_t)&v27, (uint64_t)&v26, v22, v23, v24);
    return 0;
  }
  else
  {
    src.data = a1;
    src.height = a3;
    src.width = a2;
    src.rowBytes = a4;
    dest.data = a8;
    dest.height = a13;
    dest.width = a12;
    dest.rowBytes = a14;
    backColor = *(_BYTE *)a15;
    v31 = *(_WORD *)(a15 + 1);
    v32 = -1;
    transform.a = a11;
    *(_QWORD *)&transform.b = 0;
    transform.d = a11;
    transform.tx = -(float)(a11 * a9);
    transform.ty = (float)a13 - (float)(a11 * (float)((float)a3 - a10));
    return vImageAffineWarp_ARGB8888(&src, &dest, 0, &transform, &backColor, 4u) == 0;
  }
}

uint64_t rtcv::simImageChMeanTempBytes(rtcv *this, int a2)
{
  int v3;
  int v5;

  v3 = (int)this;
  BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)&v5);
  return (v5 + 12 * v3 * a2 + 9);
}

float rtcv::simImageChMean(unsigned __int8 *a1, int a2, int a3, unsigned int a4, float *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t *v8;
  FILE *v9;
  rtcv::Logger *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float result;
  float *v23;
  int v24;
  uint64_t v25;
  float *v26;
  vDSP_Length v27;
  float v28;
  unsigned int v29;
  uint64_t __C;
  float v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v29 = a4;
  if (a4)
  {
    v8 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)a1);
    v9 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v8);
    v10 = (rtcv::Logger *)fprintf(v9, "Pixel format (%d) not supported!\n", a4);
    v11 = rtcv::Logger::instance(v10);
    rtcv::Logger::log<(rtcv::Logger::Severity)3,rtcv::SimResizePixelFormat &>((uint64_t)v11, (uint64_t)"Pixel format (%d) not supported!\n", &v29, v12, v13, v14, v15, v16);
  }
  else
  {
    BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)&__C);
    if (a5)
    {
      v23 = (float *)(((unint64_t)a5 + HIDWORD(__C) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v24 = 4 * a2 * a3 - (_DWORD)a5;
      v25 = (uint64_t)a5 + ((_DWORD)v23 + v24) + 3;
      v26 = (float *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      a5 = (float *)(((unint64_t)a5 + (v25 & 0xFFFFFFFC) + v24 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    }
    else
    {
      v23 = 0;
      v26 = 0;
    }
    v27 = (a3 * a2);
    v31 = 0.0;
    __C = 0;
    vDSP_vfltu8(a1, 4, a5, 1, v27);
    vDSP_vfltu8(a1 + 1, 4, v26, 1, v27);
    vDSP_vfltu8(a1 + 2, 4, v23, 1, v27);
    vDSP_meanv(a5, 1, (float *)&__C, v27);
    vDSP_meanv(v26, 1, (float *)&__C + 1, v27);
    vDSP_meanv(v23, 1, &v31, v27);
    v28 = *((float *)&__C + 1);
    *a7 = (int)(float)(*(float *)&__C + 0.5);
    a7[1] = (int)(float)(v28 + 0.5);
    result = v31 + 0.5;
    a7[2] = (int)(float)(v31 + 0.5);
  }
  return result;
}

uint64_t TtTrkRpnCreate(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t Params;
  _OWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  TtTrkRpnNode *v10;

  Params = 4294967292;
  if (a1 && a2 && a3)
  {
    v6 = (_OWORD *)operator new();
    *v6 = 0u;
    v6[1] = 0u;
    v6[2] = 0u;
    v6[3] = 0u;
    v6[4] = 0u;
    v6[5] = 0u;
    v6[6] = 0u;
    v6[7] = 0u;
    v6[8] = 0u;
    v6[9] = 0u;
    v6[10] = 0u;
    v6[11] = 0u;
    v6[12] = 0u;
    v6[13] = 0u;
    v6[14] = 0u;
    v6[15] = 0u;
    v6[16] = 0u;
    v6[17] = 0u;
    v6[18] = 0u;
    v6[19] = 0u;
    v6[20] = 0u;
    v6[21] = 0u;
    v6[22] = 0u;
    v7 = (char *)operator new();
    v8 = TtTrkRpnNode::TtTrkRpnNode(v7, a3);
    *(_QWORD *)v6 = v8;
    v9 = TtTrkRpnNode::init((uint64_t)v8, 0, a3);
    if ((_DWORD)v9)
    {
      Params = v9;
      v10 = (TtTrkRpnNode *)v7;
    }
    else
    {
      Params = TtTrkRpnNode::getParams((uint64_t)v7, a3, (uint64_t)v6 + 8);
      if (!(_DWORD)Params)
      {
        *a1 = v6;
        return Params;
      }
      v10 = *(TtTrkRpnNode **)v6;
      if (!*(_QWORD *)v6)
        goto LABEL_7;
    }
    TtTrkRpnNode::~TtTrkRpnNode(v10);
    MEMORY[0x1A1B0A898]();
LABEL_7:
    MEMORY[0x1A1B0A898](v6, 0x10A0C40FC37F48CLL);
  }
  return Params;
}

uint64_t TtTrkRpnDestroy(TtTrkRpnNode **a1)
{
  TtTrkRpnNode *v2;

  if (!a1)
    return 4294967292;
  v2 = *a1;
  if (!v2)
    return 4294967292;
  TtTrkRpnNode::~TtTrkRpnNode(v2);
  MEMORY[0x1A1B0A898]();
  MEMORY[0x1A1B0A898](a1, 0x10A0C40FC37F48CLL);
  return 0;
}

uint64_t TtTrkRpnStart(rtcv::LoggerDevNull **a1, unsigned int *a2)
{
  rtcv::LoggerDevNull *v2;

  if (a1 && a2 && (v2 = *a1) != 0)
    return TtTrkRpnNode::restart(v2, a2);
  else
    return 4294967292;
}

uint64_t TtTrkRpnStop(_QWORD *a1)
{
  uint64_t result;

  result = 4294967292;
  if (a1)
  {
    if (*a1)
      return 0;
    else
      return 4294967292;
  }
  return result;
}

uint64_t TtTrkRpnGetParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (!a1 || !*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      result = 0;
      v5 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)a3 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a3 + 16) = v5;
      v6 = *(_OWORD *)(a1 + 40);
      v7 = *(_OWORD *)(a1 + 56);
      v8 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a3 + 80) = v8;
      *(_OWORD *)(a3 + 32) = v6;
      *(_OWORD *)(a3 + 48) = v7;
      v9 = *(_OWORD *)(a1 + 104);
      v10 = *(_OWORD *)(a1 + 120);
      v11 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(a3 + 144) = v11;
      *(_OWORD *)(a3 + 96) = v9;
      *(_OWORD *)(a3 + 112) = v10;
      v12 = *(_OWORD *)(a1 + 168);
      v13 = *(_OWORD *)(a1 + 184);
      v14 = *(_OWORD *)(a1 + 200);
      *(_DWORD *)(a3 + 208) = *(_DWORD *)(a1 + 216);
      *(_OWORD *)(a3 + 176) = v13;
      *(_OWORD *)(a3 + 192) = v14;
      *(_OWORD *)(a3 + 160) = v12;
    }
  }
  return result;
}

uint64_t TtTrkRpnExemplarPreProcess(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (!a1 || !*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        if (a5)
        {
          if (a6)
          {
            if (a7)
            {
              result = TtTrkRpnNode::setUpNetBuffers(a5, (_DWORD *)(a1 + 8), a7);
              if (!(_DWORD)result)
              {
                if (!*(_BYTE *)(a2 + 8))
                  return TtTrkRpnNode::exemplarPreProcess(*(_QWORD *)a1, a2, (__int128 *)(a3 + 184), (int *)(a3 + 180), a4, a6);
                result = TtTrkRpnNode::restart(*(rtcv::LoggerDevNull **)a1, a4);
                if (!(_DWORD)result)
                  return TtTrkRpnNode::exemplarPreProcess(*(_QWORD *)a1, a2, (__int128 *)(a3 + 184), (int *)(a3 + 180), a4, a6);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TtTrkRpnInstancePreProcess(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (!a1 || !*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        if (a5)
        {
          if (a6)
          {
            if (a7)
            {
              result = TtTrkRpnNode::setUpNetBuffers(a5, (_DWORD *)(a1 + 8), a7);
              if (!(_DWORD)result)
              {
                if (*(_BYTE *)(a2 + 8))
                  return 4294967294;
                else
                  return TtTrkRpnNode::instancePreProcess(*(_QWORD *)a1, a2, a3 + 184, a3 + 180, a4, a6);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TtTrkRpnPreProcessCropResizeTempBytes(rtcv *a1, int a2, _DWORD *a3)
{
  *a3 = rtcv::simImageChMeanTempBytes(a1, a2);
  return 0;
}

uint64_t TtTrkRpnPreProcessCropResizeRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t *v12;
  FILE *v13;
  const char *v14;
  const char *v15;
  size_t v16;
  rtcv::Logger *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  FILE *v34;
  rtcv::Logger *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  FILE *v47;
  rtcv::Logger *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t *v56;
  FILE *v57;
  rtcv::Logger *v58;

  if (!a1)
    return 4294967292;
  result = 4294967292;
  if (a2 && *(_QWORD *)a1 && a4 && a6 && *(_QWORD *)a3)
  {
    if ((*(_BYTE *)(a3 + 12) & 3) != 0)
    {
      v12 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)0xFFFFFFFCLL);
      v13 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v12);
      v14 = "Invalid source image!\n";
      v15 = "Invalid source image!\n";
      v16 = 22;
LABEL_9:
      v17 = (rtcv::Logger *)fwrite(v15, v16, 1uLL, v13);
      v18 = rtcv::Logger::instance(v17);
      rtcv::Logger::log<(rtcv::Logger::Severity)3>((uint64_t)v18, (uint64_t)v14, v19, v20, v21, v22, v23, v24);
      return 4294967292;
    }
    v26 = (void **)(a1 + 220);
    result = TtTrkRpnNode::setUpNetBuffers(a7, (_DWORD *)(a1 + 8), a1 + 220);
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(a4 + 80))
      {
        *(_BYTE *)(a4 + 80) = 0;
        if (!*v26)
        {
          v44 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)result);
          v13 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v44);
          v14 = "Invalid instanceResult buffer!\n";
          goto LABEL_33;
        }
        v27 = *(_DWORD *)(a1 + 232);
        if (v27 != *(_DWORD *)(a1 + 28) * *(_DWORD *)(a1 + 20))
          goto LABEL_29;
        v28 = *(_DWORD *)(a1 + 228);
        if (v28 != *(_DWORD *)(a1 + 24))
          goto LABEL_29;
        v29 = *(_DWORD *)(a1 + 236);
        if (v29 < v27 || (v29 & 0x3F) != 0)
        {
          v46 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)result);
          v47 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v46);
          v48 = (rtcv::Logger *)fprintf(v47, "Invalid output buffer rowBytes (%d)!\n", *(_DWORD *)(a1 + 236));
          v49 = rtcv::Logger::instance(v48);
          v55 = (unsigned int *)(a1 + 236);
          goto LABEL_36;
        }
        result = rtcv::simCropResizeExtendMean(*(rtcv::LoggerDevNull **)a3, *(_DWORD *)(a3 + 12) >> 2, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), 0, 0, 0, *v26, *(float *)(a6 + 112), *(float *)(a6 + 116), (float)v28 / fmaxf(*(float *)(a6 + 124), 1.0), v27 >> 2, v28, v29, a6 + 1858);
        if ((result & 1) == 0)
          goto LABEL_28;
      }
      if (!*(_BYTE *)(a4 + 81))
        return 0;
      *(_BYTE *)(a4 + 81) = 0;
      if (*(_QWORD *)(a1 + 244))
      {
        v30 = *(_DWORD *)(a1 + 256);
        if (v30 == *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 252) == *(_DWORD *)(a1 + 40))
        {
          v31 = *(_DWORD *)(a1 + 260);
          if (v31 >= v30 && (v31 & 0x3F) == 0)
          {
            rtcv::simImageChMean(*(unsigned __int8 **)a3, *(_DWORD *)(a3 + 12) >> 2, *(_DWORD *)(a3 + 8), 0, *(float **)a5, *(unsigned int *)(a5 + 8), (_BYTE *)(a6 + 1858));
            v32 = rtcv::simCropResizeExtendMean(*(rtcv::LoggerDevNull **)a3, *(_DWORD *)(a3 + 12) >> 2, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), 0, 0, 0, *(void **)(a1 + 244), *(float *)(a6 + 96), *(float *)(a6 + 100), (float)*(unsigned int *)(a1 + 252) / fmaxf(*(float *)(a6 + 108), 1.0), *(_DWORD *)(a1 + 256) >> 2, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 260), a6 + 1858);
            result = 0;
            if (v32)
              return result;
LABEL_28:
            v33 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)result);
            v34 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v33);
            v35 = (rtcv::Logger *)fwrite("rtcv::simCropResize failed!\n", 0x1CuLL, 1uLL, v34);
            v36 = rtcv::Logger::instance(v35);
            rtcv::Logger::log<(rtcv::Logger::Severity)3>((uint64_t)v36, (uint64_t)"rtcv::simCropResize failed!\n", v37, v38, v39, v40, v41, v42);
            return 4294967288;
          }
          v56 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)result);
          v57 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v56);
          v58 = (rtcv::Logger *)fprintf(v57, "Invalid output buffer rowBytes (%d)!\n", *(_DWORD *)(a1 + 260));
          v49 = rtcv::Logger::instance(v58);
          v55 = (unsigned int *)(a1 + 260);
LABEL_36:
          rtcv::Logger::log<(rtcv::Logger::Severity)3,rtcv::SimResizePixelFormat &>((uint64_t)v49, (uint64_t)"Invalid output buffer rowBytes (%d)!\n", v55, v50, v51, v52, v53, v54);
          return 4294967292;
        }
LABEL_29:
        v43 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)result);
        v13 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v43);
        v14 = "Output buffer size incorrect!\n";
        v15 = "Output buffer size incorrect!\n";
        v16 = 30;
        goto LABEL_9;
      }
      v45 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)result);
      v13 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v45);
      v14 = "Invalid exemplarResult buffer!\n";
LABEL_33:
      v15 = v14;
      v16 = 31;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t TtTrkRpnExemplarPostProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned __int8 *a6)
{
  uint64_t result;
  uint64_t *v11;
  FILE *v12;
  rtcv::Logger *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  __int128 v22;

  if (!a1)
    return 4294967292;
  if (!*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        if (a6)
        {
          result = TtTrkRpnNode::setUpNetBuffers(a3, (_DWORD *)(a1 + 8), a1 + 220);
          if (!(_DWORD)result)
          {
            result = TtTrkRpnNode::exemplarPostProcess(*(_QWORD *)a1, a1 + 268, 2u, a2, a5);
            if (!(_DWORD)result)
            {
              if (*a6 < 3uLL)
              {
                v20 = &a6[20 * *a6];
                *(_OWORD *)(v20 + 21) = xmmword_1A15DFE24;
                *(_DWORD *)(v20 + 37) = 0;
                v21 = TtTrkRpnNode::config(*(TtTrkRpnNode **)a1);
                result = 0;
                v22 = *(_OWORD *)v21;
                *(_DWORD *)(v20 + 97) = *(_DWORD *)(v21 + 16);
                *(_OWORD *)(v20 + 81) = v22;
                ++*a6;
                return result;
              }
              v11 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)result);
              v12 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v11);
              v13 = (rtcv::Logger *)fprintf(v12, "TtResult modelInfo.numModels (%hhu) out of bounds!\n", *a6);
              v14 = rtcv::Logger::instance(v13);
              rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned char &>((uint64_t)v14, (uint64_t)"TtResult modelInfo.numModels (%hhu) out of bounds!\n", a6, v15, v16, v17, v18, v19);
              return 4294967292;
            }
          }
        }
      }
    }
  }
  return result;
}

void rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned char &>(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v12;

  if (*(unsigned __int8 *)(a1 + 192) >= 3u)
  {
    v8 = *(uint64_t **)(a1 + 72);
    v9 = *(uint64_t **)(a1 + 80);
    while (v8 != v9)
    {
      v12 = *v8;
      v8 += 2;
      rtcv::Logger::Target::log(v12, 3, a2, a4, a5, a6, a7, a8, *a3);
    }
  }
}

uint64_t TtTrkRpnInstancePostProcess(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned __int8 *a6)
{
  uint64_t result;
  unsigned int v11;
  uint64_t *v12;
  FILE *v13;
  rtcv::Logger *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    return 4294967292;
  if (!*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        if (a6)
        {
          result = TtTrkRpnNode::setUpNetBuffers(a3, (_DWORD *)(a1 + 8), a1 + 220);
          if (!(_DWORD)result)
          {
            result = TtTrkRpnNode::instancePostProcess(*(_QWORD *)a1, a1 + 316, 2u, a2, a5, (uint64_t)(a6 + 184), (_DWORD *)a6 + 45);
            if (!(_DWORD)result)
            {
              v11 = *a6;
              if (v11 < 3)
              {
                result = 0;
                *a6 = v11 + 1;
                return result;
              }
              v12 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)result);
              v13 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v12);
              v14 = (rtcv::Logger *)fprintf(v13, "TtResult modelInfo.numModels (%hhu) out of bounds!\n", *a6);
              v15 = rtcv::Logger::instance(v14);
              rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned char &>((uint64_t)v15, (uint64_t)"TtResult modelInfo.numModels (%hhu) out of bounds!\n", a6, v16, v17, v18, v19, v20);
              return 4294967292;
            }
          }
        }
      }
    }
  }
  return result;
}

char *TtTrkRpnNode::TtTrkRpnNode(char *a1, _QWORD *a2)
{
  _OWORD *v4;

  v4 = a1 + 536;
  bzero(a1, 0x218uLL);
  *a2 = 0x721CC00000001;
  *v4 = 0u;
  return a1;
}

uint64_t TtTrkRpnNode::releaseBuffers(TtTrkRpnNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *((_QWORD *)this + 55);
  if (v2)
    MEMORY[0x1A1B0A880](v2, 0x1000C80451B5BE8);
  v3 = *((_QWORD *)this + 56);
  if (v3)
    MEMORY[0x1A1B0A880](v3, 0x1000C80451B5BE8);
  v4 = *((_QWORD *)this + 57);
  if (v4)
    MEMORY[0x1A1B0A880](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 58);
  if (v5)
    MEMORY[0x1A1B0A880](v5, 0x1000C8052888210);
  v6 = *((_QWORD *)this + 59);
  if (v6)
    MEMORY[0x1A1B0A880](v6, 0x1000C8052888210);
  v7 = *((_QWORD *)this + 60);
  if (v7)
    MEMORY[0x1A1B0A880](v7, 0x1000C8052888210);
  v8 = *((_QWORD *)this + 67);
  if (v8)
    MEMORY[0x1A1B0A880](v8, 0x1000C8052888210);
  result = *((_QWORD *)this + 68);
  if (result)
    JUMPOUT(0x1A1B0A880);
  return result;
}

void TtTrkRpnNode::~TtTrkRpnNode(TtTrkRpnNode *this)
{
  TtTrkRpnNode::releaseBuffers(this);
}

uint64_t TtTrkRpnNode::init(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t *v13;
  FILE *v14;
  rtcv::Logger *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (*a3 == 1)
  {
    if (a3[1] - 467393 > 0xB || ((1 << (*((_BYTE *)a3 + 4) + 63)) & 0xB01) == 0)
    {
      return 4294967292;
    }
    else
    {
      TtTrkRpnNode::releaseBuffers((TtTrkRpnNode *)a1);
      *(_QWORD *)(a1 + 20) = 0x800000013;
      *(_QWORD *)(a1 + 28) = 0x4100000000000001;
      *(_DWORD *)(a1 + 52) = 5;
      *(_OWORD *)(a1 + 56) = xmmword_1A15DFE60;
      *(_OWORD *)(a1 + 132) = xmmword_1A15DFE70;
      *(_QWORD *)(a1 + 260) = 0x1400000013;
      *(_DWORD *)(a1 + 268) = 10;
      *(_OWORD *)(a1 + 148) = xmmword_1A15DFE80;
      *(_OWORD *)(a1 + 164) = xmmword_1A15DFE90;
      *(_DWORD *)(a1 + 336) = 6;
      *(_OWORD *)(a1 + 244) = xmmword_1A15DFEA0;
      *(_OWORD *)(a1 + 72) = xmmword_1A15DFEB0;
      *(_OWORD *)(a1 + 116) = xmmword_1A15DFEC0;
      *(_OWORD *)(a1 + 88) = xmmword_1A15DFED0;
      *(_QWORD *)(a1 + 104) = 0x3E4CCCCD3BB60B61;
      *(_DWORD *)(a1 + 112) = 1069547520;
      a3[1] = 467393;
      *((_WORD *)a3 + 928) = 0;
      *(_OWORD *)(a3 + 459) = 0u;
      *(_WORD *)((char *)a3 + 1861) = 0;
      *(_OWORD *)(a3 + 393) = 0u;
      *(_OWORD *)(a3 + 397) = 0u;
      *(_OWORD *)(a3 + 401) = 0u;
      *(_OWORD *)(a3 + 405) = 0u;
      *(_OWORD *)(a3 + 409) = 0u;
      *(_OWORD *)(a3 + 413) = 0u;
      *(_OWORD *)(a3 + 417) = 0u;
      *(_OWORD *)(a3 + 421) = 0u;
      *(_OWORD *)(a3 + 425) = 0u;
      *(_OWORD *)(a3 + 429) = 0u;
      *(_OWORD *)(a3 + 433) = 0u;
      *(_OWORD *)(a3 + 437) = 0u;
      *(_OWORD *)(a3 + 441) = 0u;
      *(_OWORD *)(a3 + 445) = 0u;
      *(_OWORD *)(a3 + 449) = 0u;
      v6 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 20);
      a3[455] = 1065353216;
      v7 = v6 * *(_DWORD *)(a1 + 28);
      a3[463] = 0;
      *(_DWORD *)(a1 + 436) = v7 * *(_DWORD *)(a1 + 52);
      *(_QWORD *)(a1 + 440) = operator new[]();
      *(_QWORD *)(a1 + 448) = operator new[]();
      *(_QWORD *)(a1 + 456) = operator new[]();
      *(_QWORD *)(a1 + 464) = operator new[]();
      *(_QWORD *)(a1 + 472) = operator new[]();
      *(_QWORD *)(a1 + 480) = operator new[]();
      TtTrkRpnNode::PopulateAnchorBoxes(a1);
      TtTrkRpnNode::PopulatePenaltyMatrix((TtTrkRpnNode *)a1);
      v8 = operator new[]();
      *(_QWORD *)(a1 + 536) = v8;
      v9 = *(_DWORD *)(a1 + 248);
      *(_DWORD *)(a1 + 500) = v9;
      *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 264) * *(_DWORD *)(a1 + 256);
      *(_DWORD *)(a1 + 504) = 4 * v9;
      *(_DWORD *)(a1 + 508) = 6;
      *(_QWORD *)(a1 + 488) = v8;
      v10 = operator new[]();
      result = 0;
      *(_QWORD *)(a1 + 544) = v10;
      v12 = *(_DWORD *)(a1 + 252);
      *(_DWORD *)(a1 + 524) = v12;
      *(_DWORD *)(a1 + 520) = *(_DWORD *)(a1 + 268) * *(_DWORD *)(a1 + 260);
      *(_DWORD *)(a1 + 528) = 4 * v12;
      *(_DWORD *)(a1 + 532) = 6;
      *(_QWORD *)(a1 + 512) = v10;
    }
  }
  else
  {
    v13 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)a1);
    v14 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v13);
    v15 = (rtcv::Logger *)fprintf(v14, "Incorrect trk node state version (%u vs %u)\n", *a3, 1);
    v16 = rtcv::Logger::instance(v15);
    v21 = 1;
    rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned int &,int>((uint64_t)v16, (uint64_t)"Incorrect trk node state version (%u vs %u)\n", a3, (uint64_t)&v21, v17, v18, v19, v20);
    return 4294967289;
  }
  return result;
}

void rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned int &,int>(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v12;

  if (*(unsigned __int8 *)(a1 + 192) >= 3u)
  {
    v8 = *(uint64_t **)(a1 + 72);
    v9 = *(uint64_t **)(a1 + 80);
    while (v8 != v9)
    {
      v12 = *v8;
      v8 += 2;
      rtcv::Logger::Target::log(v12, 3, a2, a4, a5, a6, a7, a8, *a3);
    }
  }
}

uint64_t TtTrkRpnNode::PopulateAnchorBoxes(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float32x2_t v10;
  int v11;
  uint64_t v12;
  float32x2_t v13;
  int v14;
  int v15;
  float32x2_t *v16;

  v1 = *(unsigned int *)(this + 52);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 0;
    v5 = *(_DWORD *)(this + 20);
    v4 = *(_DWORD *)(this + 24);
    v6 = v5 >> 1;
    v7 = *(unsigned int *)(this + 28);
    do
    {
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = *(float *)(this + 4 * v2 + 56);
        v10.f32[0] = (float)(int)sqrtf((float)(v4 * v4) / v9);
        v10.f32[1] = (float)(int)(float)(v9 * v10.f32[0]);
        do
        {
          if (v5)
          {
            v11 = 0;
            v12 = *(_QWORD *)(this + 440);
            v13 = vcvt_f32_s32(vcvt_s32_f32(vmul_n_f32(v10, *(float *)(this + 4 * v8 + 32))));
            do
            {
              v14 = 0;
              v15 = -(v4 * v6);
              do
              {
                v16 = (float32x2_t *)(v12 + 16 * (v3 + v14));
                v16->f32[0] = (float)v15;
                v16->f32[1] = (float)(int)((v11 - v6) * v4);
                v16[1] = v13;
                ++v14;
                v15 += v4;
              }
              while (v5 != v14);
              ++v11;
              v3 += v14;
            }
            while (v11 != v5);
          }
          ++v8;
        }
        while (v8 != v7);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return this;
}

void TtTrkRpnNode::PopulatePenaltyMatrix(TtTrkRpnNode *this)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  float *v5;
  int32x2_t v6;
  uint64_t v7;
  float32x2_t v8;
  uint64x2_t v9;
  float32x2_t v10;
  uint32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int v15;
  uint64_t i;
  float v17;
  uint64_t v18;
  float *v19;
  int v20;
  float v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  int64x2_t v25;
  uint64x2_t v26;
  float v27;
  float v28;
  int32x2_t v29;
  int64x2_t v30;

  v2 = *((unsigned int *)this + 5);
  v3 = operator new[]();
  v4 = 4 * (v2 * v2);
  v5 = (float *)operator new[]();
  if ((_DWORD)v2)
  {
    v7 = 0;
    *(float *)v6.i32 = (float)v2 + -1.0;
    v8 = (float32x2_t)vdup_n_s32(0x40C90FDBu);
    v25 = vdupq_n_s64(2uLL);
    v26 = (uint64x2_t)vdupq_n_s64(v2 - 1);
    v9 = (uint64x2_t)xmmword_1A15DD910;
    v10 = (float32x2_t)vdup_lane_s32(v6, 0);
    do
    {
      v29 = vmovn_s64((int64x2_t)vcgeq_u64(v26, v9));
      v30 = (int64x2_t)v9;
      v11.i32[0] = v7;
      v11.i32[1] = v7 + 1;
      v12 = vdiv_f32(vmul_f32(vcvt_f32_u32(v11), v8), v10);
      v27 = v12.f32[0];
      v28 = cosf(v12.f32[1]);
      v13.f32[0] = cosf(v27);
      v13.f32[1] = v28;
      v14 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0xBF000000BF000000, v13);
      if ((v29.i8[0] & 1) != 0)
        *(_DWORD *)(v3 + 4 * v7) = v14.i32[0];
      if ((v29.i8[4] & 1) != 0)
        *(_DWORD *)(v3 + 4 * v7 + 4) = v14.i32[1];
      v7 += 2;
      v9 = (uint64x2_t)vaddq_s64(v30, v25);
    }
    while (((v2 + 1) & 0x1FFFFFFFELL) != v7);
    v15 = 0;
    for (i = 0; i != v2; ++i)
    {
      v17 = *(float *)(v3 + 4 * i);
      v18 = v2;
      v19 = (float *)v3;
      v20 = v15;
      do
      {
        v21 = *v19++;
        v5[v20++] = v17 * v21;
        --v18;
      }
      while (v18);
      v15 += v2;
    }
  }
  if (*((_DWORD *)this + 13) * *((_DWORD *)this + 7))
  {
    v22 = 0;
    v23 = 0;
    v24 = v2 * v2;
    do
    {
      memcpy((void *)(*((_QWORD *)this + 60) + 4 * v22), v5, v4);
      ++v23;
      v22 += v24;
    }
    while (v23 < (*((_DWORD *)this + 13) * *((_DWORD *)this + 7)));
  }
  MEMORY[0x1A1B0A880](v3, 0x1000C8052888210);
  JUMPOUT(0x1A1B0A880);
}

uint64_t TtTrkRpnNode::restart(rtcv::LoggerDevNull *a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t *v5;
  FILE *v6;
  rtcv::Logger *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (*a2 == 1)
  {
    if (a2[1] - 467393 <= 9 && ((1 << (*((_BYTE *)a2 + 4) + 63)) & 0x301) != 0)
    {
      result = 0;
      a2[455] = 1065353216;
      *(_OWORD *)(a2 + 459) = 0u;
      *(_WORD *)((char *)a2 + 1861) = 0;
      *((_WORD *)a2 + 928) = 0;
      a2[463] = 0;
      *(_OWORD *)(a2 + 393) = 0u;
      *(_OWORD *)(a2 + 397) = 0u;
      *(_OWORD *)(a2 + 401) = 0u;
      *(_OWORD *)(a2 + 405) = 0u;
      *(_OWORD *)(a2 + 409) = 0u;
      *(_OWORD *)(a2 + 413) = 0u;
      *(_OWORD *)(a2 + 417) = 0u;
      *(_OWORD *)(a2 + 421) = 0u;
      *(_OWORD *)(a2 + 425) = 0u;
      *(_OWORD *)(a2 + 429) = 0u;
      *(_OWORD *)(a2 + 433) = 0u;
      *(_OWORD *)(a2 + 437) = 0u;
      *(_OWORD *)(a2 + 441) = 0u;
      *(_OWORD *)(a2 + 445) = 0u;
      *(_OWORD *)(a2 + 449) = 0u;
      return result;
    }
  }
  else
  {
    v5 = rtcv::LoggerDevNull::instance(a1);
    v6 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v5);
    v7 = (rtcv::Logger *)fprintf(v6, "Incorrect trk node state version (%u vs %u)\n", *a2, 1);
    v8 = rtcv::Logger::instance(v7);
    v13 = 1;
    rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned int &,int>((uint64_t)v8, (uint64_t)"Incorrect trk node state version (%u vs %u)\n", a2, (uint64_t)&v13, v9, v10, v11, v12);
  }
  return 4294967289;
}

uint64_t TtTrkRpnNode::exemplarPreProcess(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, _DWORD *a5, uint64_t a6)
{
  std::chrono::steady_clock::time_point v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float v17;
  uint64_t result;
  uint64_t *v19;
  FILE *v20;
  rtcv::Logger *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (*a5 != 1)
  {
    v19 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)v11.__d_.__rep_);
    v20 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v19);
    v21 = (rtcv::Logger *)fprintf(v20, "Incorrect trk node state version (%u vs %u)\n", *a5, 1);
    v22 = rtcv::Logger::instance(v21);
    v27 = 1;
    rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned int &,int>((uint64_t)v22, (uint64_t)"Incorrect trk node state version (%u vs %u)\n", a5, (uint64_t)&v27, v23, v24, v25, v26);
    return 4294967289;
  }
  if (a5[1] != 467393)
    return 4294967289;
  v12 = *a4;
  if (*a4)
  {
    v13 = *a3;
    *(_OWORD *)(a5 + 6) = a3[1];
    *(_OWORD *)(a5 + 2) = v13;
    v14 = a3[2];
    v15 = a3[3];
    v16 = a3[4];
    *((_QWORD *)a5 + 11) = *((_QWORD *)a3 + 10);
    *(_OWORD *)(a5 + 18) = v16;
    *(_OWORD *)(a5 + 14) = v15;
    *(_OWORD *)(a5 + 10) = v14;
    LOBYTE(v12) = 1;
    *(_BYTE *)(a6 + 81) = 1;
    *(_QWORD *)&v16 = *((_QWORD *)a5 + 3);
    v17 = vaddv_f32(*(float32x2_t *)&v16);
    *(float *)&v14 = roundf(sqrtf((float)(*(float *)&v16 + (float)(*(float *)(a1 + 88) * v17))* (float)(*((float *)&v16 + 1) + (float)(*(float *)(a1 + 88) * v17))));
    *((float32x2_t *)a5 + 12) = vmla_n_f32(vmla_f32(*(float32x2_t *)(a5 + 4), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)&v16), (float32x2_t)0xBF000000BF000000, *(float *)&v14);
    a5[26] = v14;
    a5[27] = v14;
  }
  result = 0;
  *((_BYTE *)a5 + 1856) = v12;
  a5[1] = 467402;
  return result;
}

uint64_t TtTrkRpnNode::instancePreProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5, uint64_t a6)
{
  std::chrono::steady_clock::time_point v9;
  char v10;
  unsigned int v11;
  float32x2_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t result;
  uint64_t *v18;
  FILE *v19;
  rtcv::Logger *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (a5->i32[0] != 1)
  {
    v18 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)v9.__d_.__rep_);
    v19 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v18);
    v20 = (rtcv::Logger *)fprintf(v19, "Incorrect trk node state version (%u vs %u)\n", a5->i32[0], 1);
    v21 = rtcv::Logger::instance(v20);
    v26 = 1;
    rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned int &,int>((uint64_t)v21, (uint64_t)"Incorrect trk node state version (%u vs %u)\n", (unsigned int *)a5, (uint64_t)&v26, v22, v23, v24, v25);
    return 4294967289;
  }
  if (a5->i32[1] != 467393)
    return 4294967289;
  v10 = a5[232].i8[0];
  if (v10)
  {
    v10 = 1;
    *(_BYTE *)(a6 + 80) = 1;
    v11 = *(_DWORD *)(a1 + 144);
    v12 = a5[3];
    v13 = vaddv_f32(v12);
    v14 = a5[227].f32[1]
        * sqrtf((float)(v12.f32[0] + (float)(*(float *)(a1 + 88) * v13))* (float)(v12.f32[1] + (float)(*(float *)(a1 + 88) * v13)));
    v15 = (float)v11 / v14;
    v16 = v14 + (float)((float)((float)((float)(*(_DWORD *)(a1 + 132) - v11) * 0.5) / v15) * 2.0);
    a5[14] = vmla_n_f32(vmla_f32(a5[2], (float32x2_t)0x3F0000003F000000, v12), (float32x2_t)0xBF000000BF000000, v16);
    a5[15].f32[0] = v16;
    a5[15].f32[1] = v16;
    a5[228].f32[0] = v15;
    a5[3] = vmul_n_f32(v12, v15);
  }
  result = 0;
  a5[232].i8[1] = v10;
  a5->i32[1] = 467401;
  return result;
}

uint64_t TtTrkRpnNode::exemplarPostProcess(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int *a5)
{
  std::chrono::steady_clock::time_point v7;
  uint64_t *v8;
  FILE *v9;
  rtcv::Logger *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  FILE *v19;
  rtcv::Logger *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;

  v27 = a3;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (*a5 != 1)
  {
    v18 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)v7.__d_.__rep_);
    v19 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v18);
    v20 = (rtcv::Logger *)fprintf(v19, "Incorrect trk node state version (%u vs %u)\n", *a5, 1);
    v21 = rtcv::Logger::instance(v20);
    v26 = 1;
    rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned int &,int>((uint64_t)v21, (uint64_t)"Incorrect trk node state version (%u vs %u)\n", a5, (uint64_t)&v26, v22, v23, v24, v25);
    return 4294967289;
  }
  if (a5[1] != 467402)
    return 4294967289;
  if (a3 < 3)
  {
    result = 0;
    a5[1] = 467393;
  }
  else
  {
    v8 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)v7.__d_.__rep_);
    v9 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v8);
    v10 = (rtcv::Logger *)fprintf(v9, "Numbers of net outputs (%d) more than limit!\n", a3);
    v11 = rtcv::Logger::instance(v10);
    rtcv::Logger::log<(rtcv::Logger::Severity)3,rtcv::SimResizePixelFormat &>((uint64_t)v11, (uint64_t)"Numbers of net outputs (%d) more than limit!\n", &v27, v12, v13, v14, v15, v16);
    return 4294967292;
  }
  return result;
}

uint64_t TtTrkRpnNode::instancePostProcess(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5, uint64_t a6, _DWORD *a7)
{
  std::chrono::steady_clock::time_point v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _DWORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  float v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  const float *v43;
  float32x4_t v44;
  int v45;
  uint64_t i;
  uint32x4_t v47;
  int64x2_t v48;
  int64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  float *v54;
  float v55;
  float *v56;
  float v57;
  int64x2_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unsigned int v66;
  float *v67;
  float *v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  uint64_t *v89;
  FILE *v90;
  rtcv::Logger *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  uint64_t *v98;
  FILE *v99;
  rtcv::Logger *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  float *v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  uint64_t v119;
  float v120;
  int v121;
  float v122;
  __int128 v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64x2_t v135;
  int32x4_t v136;
  unsigned int v138;
  uint64_t v139;
  int64x2_t v140;
  int64x2_t v141;
  uint64_t v142;
  uint64_t v143[4];
  int v144;
  uint64_t v145;
  __int128 v146;
  unsigned int v147;
  void *__src[2];
  uint64_t v149;
  unint64_t v150[2];
  _QWORD v151[3];
  int v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v147 = a3;
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (*a5 != 1)
  {
    v89 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)v13.__d_.__rep_);
    v90 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v89);
    v91 = (rtcv::Logger *)fprintf(v90, "Incorrect trk node state version (%u vs %u)\n", *a5, 1);
    v92 = rtcv::Logger::instance(v91);
    LODWORD(v150[0]) = 1;
    rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned int &,int>((uint64_t)v92, (uint64_t)"Incorrect trk node state version (%u vs %u)\n", a5, (uint64_t)v150, v93, v94, v95, v96);
    return 4294967289;
  }
  if (a5[1] != 467401)
    return 4294967289;
  if (a3 != 2)
  {
    v98 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)v13.__d_.__rep_);
    v99 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v98);
    v100 = (rtcv::Logger *)fprintf(v99, "Numbers of net outputs (%d) isn't correct!\n", a3);
    v101 = rtcv::Logger::instance(v100);
    rtcv::Logger::log<(rtcv::Logger::Severity)3,rtcv::SimResizePixelFormat &>((uint64_t)v101, (uint64_t)"Numbers of net outputs (%d) isn't correct!\n", &v147, v102, v103, v104, v105, v106);
    return 4294967292;
  }
  if (!*((_BYTE *)a5 + 1857))
    goto LABEL_77;
  v14 = 0;
  v15 = 1;
  do
  {
    v16 = v15;
    v17 = (uint64_t *)(a2 + 24 * v14);
    if (*((_DWORD *)v17 + 5) == 7)
    {
      v18 = a1 + 24 * v14;
      v19 = (uint64_t *)(v18 + 488);
      v20 = (_DWORD *)(a2 + 24 * v14);
      v21 = v20[2];
      if (v21)
      {
        v22 = 0;
        v23 = *v19;
        v24 = *v17;
        v25 = v20[3];
        v26 = v20[4];
        v27 = *(unsigned int *)(v18 + 504);
        while (!(_DWORD)v25)
        {
LABEL_26:
          v24 += v26;
          v23 += v27;
          if (++v22 == v21)
            goto LABEL_27;
        }
        v28 = 0;
        while (1)
        {
          v29 = *(__int16 *)(v24 + 2 * v28);
          v30 = v29 & 0x80000000;
          v31 = (v29 >> 10) & 0x1F;
          v32 = *(unsigned __int16 *)(v24 + 2 * v28) << 13;
          v33 = v32 & 0x7FE000;
          if (v31 == 31)
          {
            if (v33)
              v36 = 2143289344;
            else
              v36 = 2139095040;
            v35 = v30 | v32 | v36;
          }
          else
          {
            if (!v31)
            {
              if (!v33)
              {
                if (v30)
                  v37 = -0.0;
                else
                  v37 = 0.0;
                goto LABEL_21;
              }
              v34 = __clz(v33);
              v31 = 9 - v34;
              v33 = (v32 << (v34 - 8)) & 0x7FE000;
            }
            v35 = ((v33 | (v31 << 23)) + 939524096) | v30;
          }
          v37 = *(float *)&v35;
LABEL_21:
          *(float *)(v23 + 4 * v28++) = v37;
          if (v25 == v28)
            goto LABEL_26;
        }
      }
LABEL_27:
      v38 = &v150[3 * v14];
      *(_OWORD *)v38 = *(_OWORD *)v19;
      v39 = v19[2];
    }
    else
    {
      v38 = &v150[3 * v14];
      *(_OWORD *)v38 = *(_OWORD *)v17;
      v39 = v17[2];
    }
    v38[2] = v39;
    v15 = 0;
    v14 = 1;
  }
  while ((v16 & 1) != 0);
  v132 = a7;
  v133 = a6;
  v134 = (uint64_t)a5;
  if (!*(_DWORD *)(a1 + 436))
    goto LABEL_52;
  v40 = 0;
  v41 = *(_DWORD *)(a1 + 20);
  v42 = *(_DWORD *)(a1 + 52) * v41 * *(_DWORD *)(a1 + 28);
  v43 = (const float *)v151;
  v44 = vld1q_dup_f32(v43);
  v135 = (uint64x2_t)vdupq_n_s64(v150[0]);
  v136 = (int32x4_t)v44;
  v138 = *(_DWORD *)(a1 + 436);
  v139 = v41;
  do
  {
    v45 = v40 / v41;
    LODWORD(__src[0]) = v40 / v41;
    for (i = 4; i != 16; i += 4)
    {
      v45 += v42;
      *(_DWORD *)((char *)__src + i) = v45;
    }
    v47 = (uint32x4_t)vmulq_s32(v136, *(int32x4_t *)__src);
    v48 = (int64x2_t)vaddw_high_u32(v135, v47);
    v49 = (int64x2_t)vaddw_u32(v135, *(uint32x2_t *)v47.i8);
    v50 = *(_QWORD *)(a1 + 440);
    v51 = *(_QWORD *)(a1 + 448);
    v52 = v139;
    v53 = v40;
    do
    {
      v140 = v49;
      v141 = v48;
      v54 = (float *)(v50 + 16 * v53);
      v55 = v54[2];
      v56 = (float *)(v51 + 16 * v53);
      *v56 = *v54 + (float)(*(float *)v49.i64[0] * v55);
      v57 = v54[3];
      v56[1] = v54[1] + (float)(*(float *)v49.i64[1] * v57);
      v56[2] = v55 * expf(*(float *)v48.i64[0]);
      v56[3] = v57 * expf(*(float *)v141.i64[1]);
      v58 = vdupq_n_s64(4uLL);
      v49 = vaddq_s64(v140, v58);
      v48 = vaddq_s64(v141, v58);
      ++v53;
      --v52;
    }
    while (v52);
    v41 = v139;
    v40 += v139;
    v59 = v138;
  }
  while (v40 < v138);
  v60 = 0;
  v61 = v151[1];
  v62 = v152;
  LODWORD(v63) = *(_DWORD *)(a1 + 20);
  do
  {
    if ((_DWORD)v63)
    {
      v64 = 0;
      v65 = *(_DWORD *)(a1 + 52) * v63;
      v66 = v60 / v63;
      v67 = (float *)(v61 + v62 * (v66 + v65 * *(_DWORD *)(a1 + 28)));
      v68 = (float *)(v61 + v62 * v66);
      do
      {
        v69 = *v68++;
        v70 = v69;
        v71 = *v67++;
        *(float *)(*(_QWORD *)(a1 + 456) + 4 * (v60 + v64++)) = bmSoftmax2(v70, v71);
        v63 = *(unsigned int *)(a1 + 20);
      }
      while (v64 < v63);
      v59 = *(_DWORD *)(a1 + 436);
    }
    v60 += v63;
  }
  while (v60 < v59);
  if (v59)
  {
    v72 = 0;
    v73 = 0;
    v74 = *(_QWORD *)(a1 + 456);
    v75 = *(_QWORD *)(a1 + 464);
    v76 = *(_QWORD *)(a1 + 472);
    v77 = *(_QWORD *)(a1 + 480);
    v78 = v59;
    v142 = *(_QWORD *)(a1 + 448);
    v79 = (float *)(v142 + 12);
    v80 = -3.4028e38;
    do
    {
      v81 = *(v79 - 1);
      v82 = *(float *)(v134 + 24);
      v83 = *(float *)(v134 + 28);
      v84 = sqrtf((float)(v81 + (float)((float)(v81 + *v79) * 0.5)) * (float)(*v79 + (float)((float)(v81 + *v79) * 0.5)))
          / sqrtf((float)(v82 + (float)((float)(v82 + v83) * 0.5)) * (float)(v83 + (float)((float)(v82 + v83) * 0.5)));
      v85 = expf(-(float)((float)((float)(fmaxf((float)(v82 / v83) / (float)(v81 / *v79), 1.0 / (float)((float)(v82 / v83) / (float)(v81 / *v79)))* fmaxf(v84, 1.0 / v84))+ -1.0)* *(float *)(a1 + 76)));
      *(float *)(v76 + 4 * v72) = v85;
      v86 = *(float *)(v74 + 4 * v72) * v85;
      *(float *)(v75 + 4 * v72) = v86;
      v87 = (float)(*(float *)(a1 + 80) * *(float *)(v77 + 4 * v72)) + (float)(v86 * (float)(1.0 - *(float *)(a1 + 80)));
      *(float *)(v75 + 4 * v72) = v87;
      if (v87 > v80)
      {
        v73 = v72;
        v80 = v87;
      }
      ++v72;
      v79 += 4;
    }
    while (v78 != v72);
    v88 = v142;
  }
  else
  {
LABEL_52:
    v73 = 0;
    v76 = *(_QWORD *)(a1 + 472);
    v88 = *(_QWORD *)(a1 + 448);
    v74 = *(_QWORD *)(a1 + 456);
  }
  a5 = (unsigned int *)v134;
  v107 = *(float *)(v134 + 1824);
  v108 = *(float *)(v134 + 24) / v107;
  v109 = *(float *)(v134 + 28) / v107;
  v110 = (float *)(v88 + 16 * v73);
  v111 = (float)(*(float *)(v76 + 4 * v73) * *(float *)(v74 + 4 * v73)) * *(float *)(a1 + 84);
  v112 = (float)(*(float *)(v134 + 20) + (float)(v109 * 0.5)) + (float)(v110[1] / v107);
  v113 = (float)((float)(v110[2] / v107) * v111) + (float)(v108 * (float)(1.0 - v111));
  v114 = (float)((float)(v110[3] / v107) * v111) + (float)(v109 * (float)(1.0 - v111));
  v115 = bmClamp((float)(*(float *)(v134 + 16) + (float)(v108 * 0.5)) + (float)(*v110 / v107), 0.0, (float)*a4);
  v116 = bmClamp(v112, 0.0, (float)a4[1]);
  v117 = bmClamp(v113, 10.0, (float)*a4);
  v118 = bmClamp(v114, 10.0, (float)a4[1]);
  *(float *)(v134 + 16) = v115 - (float)(v117 * 0.5);
  *(float *)(v134 + 20) = v116 - (float)(v118 * 0.5);
  *(float *)(v134 + 24) = v117;
  *(float *)(v134 + 28) = v118;
  v146 = *(_OWORD *)(v133 + 8);
  *(_OWORD *)(v133 + 8) = *(_OWORD *)(v134 + 16);
  *v132 = 1;
  v119 = *(_QWORD *)(a1 + 456);
  v120 = *(float *)(v119 + 4 * v73);
  *(_DWORD *)(v133 + 24) = (float)(v120 * 1000.0);
  v121 = *(_DWORD *)(a1 + 20);
  __src[0] = (void *)(v119 + 4 * v73 / (v121 * v121) * v121 * v121);
  LODWORD(v149) = 4 * v121;
  HIDWORD(v149) = 6;
  LODWORD(__src[1]) = v121;
  HIDWORD(__src[1]) = v121;
  ttTrkScoreNormalize((uint64_t *)__src);
  v145 = 0;
  v144 = 0;
  ttTrkScoreFindMaxScore((uint64_t *)__src, (float *)&v145 + 1, &v145, &v144);
  if (!*(_BYTE *)(v134 + 1861))
  {
    *(_BYTE *)(v134 + 1861) = 1;
    memcpy((void *)(v134 + 128), __src[0], (LODWORD(__src[1]) * v149));
    *(_DWORD *)(v134 + 1828) = v145;
    *(_DWORD *)(v134 + 1832) = v144;
  }
  v143[1] = (uint64_t)__src[1];
  v143[2] = v149;
  v143[0] = v134 + 128;
  v122 = -1.0;
  if (*(float *)(a1 + 96) < 1.0 && *(float *)(a1 + 100) > 0.0)
    v122 = ttTrkComputeKL(v143, (uint64_t *)__src, *(_DWORD *)(v134 + 1828), *(_DWORD *)(v134 + 1832), v145, v144);
  if (*(_BYTE *)(v134 + 1862))
  {
    v123 = v146;
    *(_OWORD *)(v134 + 16) = v146;
    *(_OWORD *)(v133 + 8) = v123;
    v124 = *(_DWORD *)(v134 + 1852);
    if (v124 < *(_DWORD *)(a1 + 128))
    {
      v125 = v124 + 1;
      *(_DWORD *)(v134 + 1852) = v125;
      if (*(float *)(v134 + 1812) < v120)
        v126 = *(_DWORD *)(v134 + 1848) + 1;
      else
        v126 = 0;
      *(_DWORD *)(v134 + 1848) = v126;
      if (v126 >= *(_DWORD *)(a1 + 116))
      {
        *(_BYTE *)(v134 + 1862) = 0;
        *(_DWORD *)(v134 + 1852) = 0;
        *(_DWORD *)(v134 + 1820) = 1065353216;
        *(_QWORD *)(v134 + 1840) = 0;
        *(_DWORD *)(v134 + 1836) = 0;
        *(_OWORD *)(v134 + 1572) = 0u;
        *(_OWORD *)(v134 + 1588) = 0u;
        *(_OWORD *)(v134 + 1604) = 0u;
        *(_OWORD *)(v134 + 1620) = 0u;
        *(_OWORD *)(v134 + 1636) = 0u;
        *(_OWORD *)(v134 + 1652) = 0u;
        *(_OWORD *)(v134 + 1668) = 0u;
        *(_OWORD *)(v134 + 1684) = 0u;
        *(_OWORD *)(v134 + 1700) = 0u;
        *(_OWORD *)(v134 + 1716) = 0u;
        *(_OWORD *)(v134 + 1732) = 0u;
        *(_OWORD *)(v134 + 1748) = 0u;
        *(_OWORD *)(v134 + 1764) = 0u;
        *(_OWORD *)(v134 + 1780) = 0u;
        *(_OWORD *)(v134 + 1796) = 0u;
      }
      else
      {
        *(float *)(v134 + 1820) = (float)(*(float *)(a1 + 104) * (float)v125) + 1.0;
      }
      goto LABEL_73;
    }
    *(_WORD *)(v134 + 1856) = 0;
    *(_DWORD *)(v134 + 1820) = 1065353216;
    *(_OWORD *)(v134 + 1836) = 0u;
    *(_WORD *)(v134 + 1861) = 0;
    *(_DWORD *)(v134 + 1852) = 0;
    *(_OWORD *)(v134 + 1572) = 0u;
    *(_OWORD *)(v134 + 1588) = 0u;
    *(_OWORD *)(v134 + 1604) = 0u;
    *(_OWORD *)(v134 + 1620) = 0u;
    *(_OWORD *)(v134 + 1636) = 0u;
    *(_OWORD *)(v134 + 1652) = 0u;
    *(_OWORD *)(v134 + 1668) = 0u;
    *(_OWORD *)(v134 + 1684) = 0u;
    *(_OWORD *)(v134 + 1700) = 0u;
    *(_OWORD *)(v134 + 1716) = 0u;
    *(_OWORD *)(v134 + 1732) = 0u;
    *(_OWORD *)(v134 + 1748) = 0u;
    *(_OWORD *)(v134 + 1764) = 0u;
    *(_OWORD *)(v134 + 1780) = 0u;
    *(_OWORD *)(v134 + 1796) = 0u;
    *v132 = 0;
LABEL_75:
    v131 = 1;
  }
  else
  {
    if (TtTrkRpnNode::checkToTerminate(a1, v134, v120, v122))
    {
      *(_BYTE *)(v134 + 1862) = 1;
      TtTrkRpnNode::terminate(a1, v134, v127);
    }
    else
    {
      v128 = *(unsigned int *)(v134 + 1836);
      v129 = v134 + 4 * v128;
      *(float *)(v129 + 1572) = v120;
      *(float *)(v129 + 1692) = v122;
      if ((v128 + 1) < *(_DWORD *)(a1 + 124))
        v130 = v128 + 1;
      else
        v130 = 0;
      *(_DWORD *)(v134 + 1836) = v130;
    }
LABEL_73:
    if (!*(_BYTE *)(v134 + 1862))
      goto LABEL_75;
    v131 = 2;
  }
  *(_DWORD *)(v133 + 84) = v131;
LABEL_77:
  result = 0;
  a5[1] = 467393;
  return result;
}

BOOL TtTrkRpnNode::checkToTerminate(uint64_t a1, uint64_t a2, float a3, float a4)
{
  float v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(float *)(a1 + 96);
  if (*(float *)(a1 + 92) > a3)
    v5 = *(_DWORD *)(a2 + 1840) + 1;
  else
    v5 = 0;
  *(_DWORD *)(a2 + 1840) = v5;
  if (v4 >= a4 || *(float *)(a1 + 100) <= a3)
  {
    v6 = 0;
    *(_DWORD *)(a2 + 1844) = 0;
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 1844) + 1;
    *(_DWORD *)(a2 + 1844) = v6;
  }
  v7 = *(_DWORD *)(a1 + 120);
  return v5 >= v7 || v6 >= v7;
}

float TtTrkRpnNode::terminate(uint64_t a1, uint64_t a2, float result)
{
  uint64_t v3;
  unsigned int v4;
  float *v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  BOOL v10;
  unsigned int v11;
  float *v12;
  float v13;
  float v14;
  BOOL v15;

  *(_DWORD *)(a2 + 1848) = 0;
  v3 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (float *)(a2 + 1572);
    v6 = 0.0;
    v7 = *(unsigned int *)(a1 + 124);
    do
    {
      v8 = *v5++;
      v9 = v8;
      v10 = v8 <= 0.0;
      if (v8 <= 0.0)
        v9 = -0.0;
      v6 = v6 + v9;
      if (!v10)
        ++v4;
      --v7;
    }
    while (v7);
    if (v4)
      *(float *)(a2 + 1812) = v6 / (float)v4;
    v11 = 0;
    v12 = (float *)(a2 + 1692);
    result = 0.0;
    do
    {
      v13 = *v12++;
      v14 = v13;
      v15 = v13 <= 0.0;
      if (v13 <= 0.0)
        v14 = -0.0;
      result = result + v14;
      if (!v15)
        ++v11;
      --v3;
    }
    while (v3);
    if (v11)
    {
      result = result / (float)v11;
      *(float *)(a2 + 1816) = result;
    }
  }
  return result;
}

uint64_t TtTrkRpnNode::getParams(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  char v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  FILE *v27;
  rtcv::Logger *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;

  if (*a2 != 1)
  {
    v26 = rtcv::LoggerDevNull::instance((rtcv::LoggerDevNull *)a1);
    v27 = (FILE *)rtcv::LoggerDevNull::devNull((rtcv::LoggerDevNull *)v26);
    v28 = (rtcv::Logger *)fprintf(v27, "Incorrect trk node state version (%u vs %u)\n", *a2, 1);
    v29 = rtcv::Logger::instance(v28);
    v35 = 1;
    rtcv::Logger::log<(rtcv::Logger::Severity)3,unsigned int &,int>((uint64_t)v29, (uint64_t)"Incorrect trk node state version (%u vs %u)\n", a2, (uint64_t)&v35, v30, v31, v32, v33);
    return 4294967289;
  }
  v4 = a2[1];
  if (v4 != 467402 && v4 != 467393)
    return 4294967289;
  v6 = 0;
  v7 = (*(_DWORD *)(a1 + 152) * *(_DWORD *)(a1 + 144) + 63) & 0xFFFFFFC0;
  v8 = (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 132) + 63) & 0xFFFFFFC0;
  *(_OWORD *)(a3 + 196) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)a3 = 0x100000001;
  v9 = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a3 + 12) = v9;
  v10 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a3 + 16) = v10;
  v11 = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a3 + 24) = v10 * v8;
  *(_DWORD *)(a3 + 28) = v11;
  v12 = *(_QWORD *)(a1 + 148);
  *(_QWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 40) = v12 * v7;
  v13 = *(_DWORD *)(a1 + 336);
  v14 = 1;
  do
  {
    v15 = v14;
    v16 = (_DWORD *)(a1 + 4 * v6);
    v17 = (_DWORD *)(a3 + 4 * v6);
    v17[11] = v16[62];
    v17[13] = v16[64];
    v17[15] = v16[66];
    if (v13 > 7)
      v18 = 0;
    else
      v18 = dword_1A15DFEE0[v13];
    v14 = 0;
    v17[17] = v18 * v16[62] * v16[64] * v16[66];
    v6 = 1;
  }
  while ((v15 & 1) != 0);
  v19 = 0;
  *(_DWORD *)(a3 + 76) = v13;
  v20 = 1;
  do
  {
    v21 = v20;
    v22 = (_DWORD *)(a1 + 4 * v19);
    v23 = (_DWORD *)(a3 + 4 * v19);
    v23[20] = v22[39];
    v23[22] = v22[41];
    v23[24] = v22[43];
    if (v13 > 7)
      v24 = 0;
    else
      v24 = dword_1A15DFEE0[v13];
    v20 = 0;
    v23[26] = v24 * v22[39] * v22[41] * v22[43];
    v19 = 1;
  }
  while ((v21 & 1) != 0);
  v25 = 0;
  *(_DWORD *)(a3 + 112) = *(_DWORD *)(a1 + 244);
  return v25;
}

uint64_t TtTrkRpnNode::setUpNetBuffers(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int64x2_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;

  if (!*(_QWORD *)a1)
    return 4294967292;
  v3 = *(_QWORD *)(a1 + 12);
  v4.i64[0] = v3;
  v4.i64[1] = *(_QWORD *)(a1 + 32);
  v5 = 4294967292;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v4), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 48))))) & 1) == 0
    && *(_QWORD *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 8) < a2[6] || *(_DWORD *)(a1 + 20) < a2[10])
      return 4294967292;
    v7 = 0;
    *(_QWORD *)a3 = *(_QWORD *)a1;
    v8 = a2[5] * a2[3];
    *(_DWORD *)(a3 + 8) = a2[4];
    *(_DWORD *)(a3 + 12) = v8;
    v9 = 1;
    *(_DWORD *)(a3 + 16) = (v8 + 63) & 0xFFFFFFC0;
    *(_DWORD *)(a3 + 20) = 1;
    *(_QWORD *)(a3 + 24) = v3;
    v10 = a2[9] * a2[7];
    *(_DWORD *)(a3 + 32) = a2[8];
    *(_DWORD *)(a3 + 36) = v10;
    *(_DWORD *)(a3 + 40) = (v10 + 63) & 0xFFFFFFC0;
    *(_DWORD *)(a3 + 44) = 1;
    v11 = a2[28];
    do
    {
      v12 = v9;
      v13 = a3 + 24 * v7;
      *(_QWORD *)(v13 + 48) = *(_QWORD *)(a1 + 8 * v7 + 24);
      v14 = &a2[v7];
      v15 = v14[20];
      *(_DWORD *)(v13 + 60) = v15;
      *(_DWORD *)(v13 + 56) = v14[24] * v14[22];
      *(_DWORD *)(v13 + 68) = v11;
      if (v11 > 7)
        v16 = 0;
      else
        v16 = dword_1A15DFEE0[v11];
      v9 = 0;
      *(_DWORD *)(a3 + 24 * v7 + 64) = v16 * v15;
      v7 = 1;
    }
    while ((v12 & 1) != 0);
    v17 = 0;
    v18 = a2[19];
    v19 = 1;
    do
    {
      v20 = v19;
      v21 = a3 + 24 * v17;
      *(_QWORD *)(v21 + 96) = *(_QWORD *)(a1 + 8 * v17 + 48);
      v22 = &a2[v17];
      v23 = v22[11];
      *(_DWORD *)(v21 + 108) = v23;
      *(_DWORD *)(v21 + 104) = v22[15] * v22[13];
      *(_DWORD *)(v21 + 116) = v18;
      if (v18 > 7)
        v24 = 0;
      else
        v24 = dword_1A15DFEE0[v18];
      v19 = 0;
      *(_DWORD *)(a3 + 24 * v17 + 112) = v24 * v23;
      v17 = 1;
    }
    while ((v20 & 1) != 0);
    return 0;
  }
  return v5;
}

uint64_t *ttTrkScoreFindMaxScore(uint64_t *result, float *a2, _DWORD *a3, _DWORD *a4)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;

  v4 = *((_DWORD *)result + 2);
  v5 = *((unsigned int *)result + 3);
  *a2 = -3.4028e38;
  *a3 = 0;
  *a4 = 0;
  if (v4)
  {
    v6 = 0;
    v7 = *result;
    v8 = -3.4028e38;
    do
    {
      if ((_DWORD)v5)
      {
        v9 = 0;
        v10 = v7 + (*((_DWORD *)result + 4) * v6);
        do
        {
          v11 = *(float *)(v10 + 4 * v9);
          if (v11 > v8)
          {
            *a2 = v11;
            *a3 = v9;
            v8 = v11;
            *a4 = v6;
          }
          ++v9;
        }
        while (v5 != v9);
      }
      ++v6;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t *ttTrkScoreNormalize(uint64_t *result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float *v13;
  uint64_t v14;

  v1 = *((unsigned int *)result + 2);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0.0;
    v5 = *((unsigned int *)result + 3);
    do
    {
      if ((_DWORD)v5)
      {
        v6 = (float *)(*result + v2);
        v7 = *((unsigned int *)result + 3);
        do
        {
          v8 = *v6++;
          v4 = v4 + v8;
          --v7;
        }
        while (v7);
      }
      ++v3;
      v2 += *((_DWORD *)result + 4);
    }
    while (v3 != v1);
    if (v4 > 0.0000001)
    {
      v9 = 0;
      v10 = 0;
      v11 = *result;
      v12 = *((_DWORD *)result + 4);
      do
      {
        if ((_DWORD)v5)
        {
          v13 = (float *)(v11 + v9);
          v14 = v5;
          do
          {
            *v13 = *v13 / v4;
            ++v13;
            --v14;
          }
          while (v14);
        }
        ++v10;
        v9 += v12;
      }
      while (v10 != v1);
    }
  }
  return result;
}

float ttTrkComputeKL(uint64_t *a1, uint64_t *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v31;
  int v32;
  int v33;
  int v34;

  v6 = *((_DWORD *)a2 + 2);
  v7 = *((_DWORD *)a2 + 3);
  v8 = *((_DWORD *)a1 + 2);
  v9 = *((_DWORD *)a1 + 3);
  v10 = *((_DWORD *)a1 + 4);
  v27 = *a2;
  v28 = *a1;
  v11 = *((_DWORD *)a2 + 4);
  v25 = v11 * (a6 - 9);
  v26 = v10 * (a4 - 9);
  v12 = 0.0;
  v13 = -9;
  v32 = a4;
  v33 = a6;
  v31 = v8;
  do
  {
    v14 = v13 + a5;
    v34 = v13;
    v15 = v13 + a3;
    v16 = v28 + 4 * (v13 + a3);
    v17 = -9;
    v18 = v25;
    v19 = v26;
    v20 = v27 + 4 * v14;
    do
    {
      if ((v14 & 0x80000000) == 0
        && (int)v14 < v7
        && ((a6 + v17) & 0x80000000) == 0
        && a6 + v17 < v6
        && (v15 & 0x80000000) == 0
        && (int)v15 < v9
        && ((a4 + v17) & 0x80000000) == 0
        && a4 + v17 < v8)
      {
        v21 = *(float *)(v20 + v18);
        if (v21 >= 0.000001)
        {
          v22 = *(float *)(v16 + v19);
          if (v22 >= 0.000001)
          {
            v23 = logf(v22 / v21);
            v20 = v27 + 4 * v14;
            v16 = v28 + 4 * v15;
            v8 = v31;
            a4 = v32;
            a6 = v33;
            v12 = v12 + (float)(v22 * v23);
          }
        }
      }
      ++v17;
      v19 += v10;
      v18 += v11;
    }
    while (v17 != 10);
    v13 = v34 + 1;
  }
  while (v34 != 9);
  return fmaxf(v12, 0.0);
}

void **GeomTransformShared_constructor()
{
  void **v0;
  void **v1;
  void *v2;

  v0 = (void **)malloc_type_calloc(1uLL, 0x10uLL, 0x1010040FDD9F14CuLL);
  v1 = v0;
  if (!v0 || (v0[1] = (void *)2048, v2 = malloc_type_calloc(1uLL, 0x800uLL, 0x3E0556BCuLL), (*v1 = v2) == 0))
  {
    GeomTransformShared_destructor(v1);
    return 0;
  }
  return v1;
}

void GeomTransformShared_destructor(void **a1)
{
  void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      free(v2);
    *a1 = 0;
    a1[1] = 0;
    free(a1);
  }
}

void *GeomTransform_constructor(unsigned int a1, uint64_t a2)
{
  char *v4;
  void *v5;

  v4 = (char *)malloc_type_malloc(0x50uLL, 0x1080040FC92EF5CuLL);
  v5 = v4;
  if (v4)
  {
    *(_OWORD *)(v4 + 4) = xmmword_1A15DFF10;
    *(_OWORD *)(v4 + 20) = xmmword_1A15DFF10;
    *(_OWORD *)(v4 + 36) = xmmword_1A15DFF10;
    *(_OWORD *)(v4 + 52) = xmmword_1A15DFF10;
    *(_DWORD *)v4 = a1;
    if (a1 > 2)
    {
      syslog(3, "GeomTransform_constructor: unknown transform model (%d)", a1);
      free(v5);
      return 0;
    }
    else
    {
      *((_QWORD *)v4 + 9) = a2;
    }
  }
  return v5;
}

double GeomTransform_eye(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a1 + 4) = xmmword_1A15DFF10;
  *(_OWORD *)(a1 + 20) = xmmword_1A15DFF10;
  *(_OWORD *)(a1 + 36) = xmmword_1A15DFF10;
  *(_OWORD *)(a1 + 52) = xmmword_1A15DFF10;
  return result;
}

void GeomTransform_destructor(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t GeomTransform_minSupportPoints(_DWORD *a1)
{
  if (*a1 < 3u)
    return (*a1 + 2);
  syslog(3, "GeomTransform_minSupportPoints: unknown transform model (%d), reset to RIGID", *a1);
  return 2;
}

uint64_t GeomTransform_changeCoordinateSystem(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  float32x4_t v7;
  uint64_t v8;
  float32x4_t v9;
  _OWORD v11[2];
  int v12;
  _OWORD v13[2];
  int v14;
  _OWORD v15[2];
  int v16;
  _BYTE v17[32];
  float v18;
  __int128 v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a1 + 20);
  v15[0] = *(_OWORD *)(a1 + 4);
  v15[1] = v3;
  v16 = 1065353216;
  v4 = *(_OWORD *)(a2 + 20);
  v13[0] = *(_OWORD *)(a2 + 4);
  v13[1] = v4;
  v14 = 1065353216;
  v5 = *(_OWORD *)(a2 + 52);
  v11[0] = *(_OWORD *)(a2 + 36);
  v11[1] = v5;
  v12 = 1065353216;
  mul3x3Matrix((uint64_t)v17, (uint64_t)v15, (uint64_t)v11, 0);
  v7 = mul3x3Matrix((uint64_t)v17, (uint64_t)v13, (uint64_t)v17, 0);
  v6 = 0;
  v7.f32[0] = v18;
  if (fabsf(v18) < 1.0e-10)
  {
    syslog(3, "GeomTransform_changeCoordinateSystem failed");
    v6 = 0xFFFFFFFFLL;
    v7.f32[0] = v18;
  }
  v8 = 0;
  v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0);
  do
  {
    v19[v8] = (__int128)vdivq_f32(*(float32x4_t *)&v17[v8 * 16], v9);
    ++v8;
  }
  while (v8 != 2);
  GeomTransform_setParams(a1, v19);
  return v6;
}

double GeomTransform_setParams(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t i;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float v10;
  uint64_t v11;

  v3 = 0;
  v11 = *MEMORY[0x1E0C80C00];
  do
  {
    *(_DWORD *)(a1 + 4 + v3) = *(_DWORD *)((char *)a2 + v3);
    v3 += 4;
  }
  while (v3 != 32);
  v4 = a2[1];
  v8 = *a2;
  v9 = v4;
  v10 = 1.0;
  invMatrix((__CLPK_real *)&v8, 3);
  for (i = 0; i != 32; i += 4)
    *(float *)((char *)&v8 + i) = *(float *)((char *)&v8 + i) / v10;
  result = *(double *)&v8;
  v7 = v9;
  *(_OWORD *)(a1 + 36) = v8;
  *(_OWORD *)(a1 + 52) = v7;
  return result;
}

float GeomTransform_deepCopy(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  result = *(float *)(a2 + 64);
  *(float *)(a1 + 64) = result;
  return result;
}

void GeomTransform_setModel(uint64_t a1, int a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = xmmword_1A15DFF54;
  v3 = unk_1A15DFF64;
  switch(a2)
  {
    case 2:
      *(_DWORD *)a1 = 2;
      return;
    case 1:
      *(_DWORD *)a1 = 1;
      v2 = *(_OWORD *)(a1 + 4);
      *(_QWORD *)&v3 = *(_QWORD *)(a1 + 20);
      goto LABEL_7;
    case 0:
      *(_DWORD *)a1 = 0;
      LODWORD(v2) = *(_DWORD *)(a1 + 4);
      *(_QWORD *)((char *)&v2 + 4) = *(_QWORD *)(a1 + 8);
      *((float *)&v2 + 3) = -*((float *)&v2 + 1);
      LODWORD(v3) = v2;
      DWORD1(v3) = *(_DWORD *)(a1 + 24);
LABEL_7:
      GeomTransform_setParams(a1, &v2);
      return;
  }
  syslog(3, "GeomTransform_setModel: unknown new model (%d) use the old model (%d)", a2, *(_DWORD *)a1);
}

float *GeomTransform_dirs(float *result, float *a2, float *a3, float *a4, float *a5, unsigned int a6)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;

  if (a6)
  {
    v6 = a6;
    do
    {
      v7 = *a4++;
      v8 = v7;
      v9 = *a5++;
      v10 = (float)((float)(v9 * result[8]) + (float)(result[7] * v8)) + 1.0;
      *a2 = result[3] + (float)((float)(v9 * result[2]) + (float)(result[1] * v8));
      *a3 = result[6] + (float)((float)(v9 * result[5]) + (float)(result[4] * v8));
      *a2 = *a2 / v10;
      ++a2;
      *a3 = *a3 / v10;
      ++a3;
      --v6;
    }
    while (v6);
  }
  return result;
}

float *GeomTransform_invs(float *result, float *a2, float *a3, float *a4, float *a5, unsigned int a6)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;

  if (a6)
  {
    v6 = a6;
    do
    {
      v7 = *a4++;
      v8 = v7;
      v9 = *a5++;
      v10 = (float)((float)(v9 * result[16]) + (float)(result[15] * v8)) + 1.0;
      *a2 = result[11] + (float)((float)(v9 * result[10]) + (float)(result[9] * v8));
      *a3 = result[14] + (float)((float)(v9 * result[13]) + (float)(result[12] * v8));
      *a2 = *a2 / v10;
      ++a2;
      *a3 = *a3 / v10;
      ++a3;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t GeomTransform_estimate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6, int a7)
{
  int v14;
  __CLPK_real **v16;
  __CLPK_real *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  float v21;
  float v22;
  float v23;
  float v24;
  __int128 v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  unsigned __int16 *v51;
  float v52;
  float v53;
  float v54;
  float32x2_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unsigned int v63;
  float v64;
  float v65;
  float v66;
  float32_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  __int128 v72;
  __int128 v73;
  float v74;
  float v75;
  float v76;
  float32x2_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  __CLPK_integer v83;
  char v84;
  uint64_t i;
  float v86;
  float v87;
  float v88;
  float v89;
  __CLPK_integer v90;
  __CLPK_integer __lwork;
  __CLPK_integer __ldz;
  __CLPK_integer v93;
  __CLPK_real __abstol;
  __CLPK_integer v95;
  __CLPK_integer __il;
  __CLPK_real __vu;
  __CLPK_real __vl;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  char __uplo[3];
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  __int128 v107[2];
  __int128 v108;
  __int128 v109;
  float v110;
  __CLPK_integer __ifail[9];
  __CLPK_integer v112[45];
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  __CLPK_real __w[9];
  __CLPK_real __a;
  float v124;
  int v125;
  uint64_t v126;
  int v127;
  float v128;
  float v129;
  float v130;
  int v131;
  float v132;
  float v133;
  uint64_t v134;
  int v135;
  float v136;
  float v137;
  float v138;
  int v139;
  float v140;
  float v141;
  uint64_t v142;
  int v143;
  float v144;
  float v145;
  float v146;
  uint64_t v147;
  int v148;
  float v149;
  int v150;
  int v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  int v156;
  int v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  uint64_t v163;
  int v164;
  int v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float32x2_t v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  __int32 v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  __int32 v194;
  float v195;
  float v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v14 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 2)
  {
    v105 = 0.0;
    v106 = 1.0;
    v103 = 1.0;
    v104 = 0.0;
    v102 = 0;
    v16 = *(__CLPK_real ***)(a1 + 72);
    if (v16)
      v17 = *v16;
    else
      v17 = (__CLPK_real *)malloc_type_calloc(1uLL, 0x800uLL, 0x933688B6uLL);
    normalizePoints(&v106, &v105, &v104, a4, a5, a6, a7);
    normalizePoints(&v103, (float *)&v102 + 1, (float *)&v102, a2, a3, a6, a7);
    v19 = *a6;
    *(float *)&v20 = v105 + (float)(v106 * *(float *)(a4 + 4 * v19));
    v21 = v104 + (float)(v106 * *(float *)(a5 + 4 * v19));
    v22 = *((float *)&v102 + 1) + (float)(v103 * *(float *)(a2 + 4 * v19));
    v23 = *(float *)&v102 + (float)(v103 * *(float *)(a3 + 4 * v19));
    v24 = *(float *)&v20 * *(float *)&v20;
    *(float *)&v25 = *(float *)&v20 * v21;
    __a = *(float *)&v20 * *(float *)&v20;
    v124 = *(float *)&v20 * v21;
    v26 = v21 * v21;
    v132 = v21 * v21;
    v133 = v21;
    v27 = -(float)(*(float *)&v20 * *(float *)&v20);
    v28 = v27 * v22;
    v125 = v20;
    v128 = v27 * v22;
    v29 = (float)-(float)(v21 * *(float *)&v20) * v22;
    v30 = -(float)(*(float *)&v20 * v22);
    v31 = v27 * v23;
    v32 = -(float)(*(float *)&v20 * v21);
    v33 = v32 * v23;
    v34 = -(float)(*(float *)&v20 * v23);
    v35 = (float)(v23 * (float)((float)(*(float *)&v20 * *(float *)&v20) * v23))
        + (float)((float)((float)(*(float *)&v20 * *(float *)&v20) * v22) * v22);
    v36 = v32 * v22;
    v37 = -(float)(v21 * v21);
    v38 = v37 * v22;
    v136 = v29;
    v137 = v37 * v22;
    v39 = -(float)(v21 * v22);
    v152 = v31;
    v153 = v33;
    v40 = v37 * v23;
    v168 = v34;
    v169 = -(float)(v21 * v23);
    v41 = (float)(v22 * (float)((float)(v21 * v21) * v22)) + (float)((float)((float)(v21 * v21) * v23) * v23);
    v186 = v41;
    v129 = v36;
    v130 = v30;
    v144 = v30;
    v138 = v39;
    v42 = -v22;
    v145 = v39;
    v146 = -v22;
    v160 = v33;
    v154 = v34;
    v161 = v37 * v23;
    v162 = v169;
    v43 = *(float *)&v102;
    v44 = -v23;
    v177 = v35;
    v170 = -v23;
    v45.f32[0] = *(float *)&v20 * v21;
    v45.i32[1] = v20;
    v46 = vmla_n_f32(vmul_n_f32(vmul_n_f32(v45, v23), v23), vmul_n_f32(v45, v22), v22);
    v178 = v46;
    v47 = (float)(v23 * (float)(v21 * v23)) + (float)((float)(v21 * v22) * v22);
    v187 = v47;
    v48 = (float)(v23 * v23) + (float)(v22 * v22);
    v196 = v48;
    if (a7 < 2)
    {
      v58 = -(float)(v21 * v23);
      v82 = v34;
      v81 = v33;
      v57 = -(float)(v21 * v22);
      v56 = -(float)(*(float *)&v20 * v22);
    }
    else
    {
      v49 = *((float *)&v102 + 1);
      v50 = a7 - 1;
      v51 = a6 + 1;
      v89 = v37 * v23;
      v52 = v33;
      v53 = -(float)(*(float *)&v20 * v23);
      v54 = -(float)(*(float *)&v20 * v22);
      v55 = v46;
      v56 = v54;
      v57 = -(float)(v21 * v22);
      v58 = -(float)(v21 * v23);
      v59 = v53;
      v60 = v58;
      v61 = v41;
      do
      {
        v86 = v44;
        v62 = v43;
        v88 = v58;
        v63 = *v51++;
        v64 = v42;
        v65 = v39;
        v66 = v26;
        v67 = v105 + (float)(v106 * *(float *)(a4 + 4 * v63));
        v68 = v104 + (float)(v106 * *(float *)(a5 + 4 * v63));
        v69 = v49 + (float)(v103 * *(float *)(a2 + 4 * v63));
        v70 = v62 + (float)(v103 * *(float *)(a3 + 4 * v63));
        v87 = v24 + (float)(v67 * v67);
        *(float *)&v25 = *(float *)&v25 + (float)(v67 * v68);
        *(float *)&v20 = *(float *)&v20 + v67;
        v71 = -(float)(v67 * v67);
        v72 = v20;
        v73 = v25;
        v74 = v28 + (float)(v71 * v69);
        v54 = v54 - (float)(v67 * v69);
        v29 = v29 + (float)((float)-(float)(v68 * v67) * v69);
        v31 = v31 + (float)(v71 * v70);
        v75 = -(float)(v67 * v68);
        v52 = v52 + (float)(v75 * v70);
        v59 = v59 - (float)(v67 * v70);
        v35 = v35
            + (float)((float)(v70 * (float)((float)(v67 * v67) * v70)) + (float)((float)((float)(v67 * v67) * v69) * v69));
        v76 = -(float)(v68 * v68);
        v36 = v36 + (float)(v75 * v69);
        v38 = v38 + (float)(v76 * v69);
        v33 = v33 + (float)(v75 * v70);
        v89 = v89 + (float)(v76 * v70);
        v77.f32[0] = v67 * v68;
        v77.f32[1] = v67;
        v56 = v56 - (float)(v67 * v69);
        v53 = v53 - (float)(v67 * v70);
        v78 = v66;
        v79 = v65;
        v80 = v64;
        v26 = v78 + (float)(v68 * v68);
        v21 = v21 + v68;
        v39 = v79 - (float)(v68 * v69);
        v60 = v60 - (float)(v68 * v70);
        v57 = v57 - (float)(v68 * v69);
        v58 = v88 - (float)(v68 * v70);
        v61 = v61
            + (float)((float)(v69 * (float)((float)(v68 * v68) * v69)) + (float)((float)((float)(v68 * v68) * v70) * v70));
        v47 = v47 + (float)((float)(v70 * (float)(v68 * v70)) + (float)((float)(v68 * v69) * v69));
        v55 = vadd_f32(v55, vmla_n_f32(vmul_n_f32(vmul_n_f32(v77, v70), v70), vmul_n_f32(v77, v69), v69));
        v28 = v74;
        v25 = v73;
        v20 = v72;
        v49 = *((float *)&v102 + 1);
        v43 = *(float *)&v102;
        v42 = v80 - v69;
        v44 = v86 - v70;
        v48 = v48 + (float)((float)(v70 * v70) + (float)(v69 * v69));
        v24 = v87;
        --v50;
      }
      while (v50);
      __a = v87;
      v124 = *(float *)&v25;
      v132 = v26;
      v133 = v21;
      v125 = v20;
      v128 = v28;
      v136 = v29;
      v137 = v38;
      v152 = v31;
      v81 = v33;
      v153 = v33;
      v168 = v59;
      v169 = v60;
      v186 = v61;
      v129 = v36;
      v130 = v56;
      v30 = v54;
      v144 = v54;
      v138 = v57;
      v145 = v39;
      v146 = v42;
      v33 = v52;
      v160 = v52;
      v82 = v53;
      v154 = v53;
      v40 = v89;
      v161 = v89;
      v162 = v58;
      v177 = v35;
      v170 = v44;
      v178 = v55;
      v187 = v47;
      v196 = v48;
    }
    v131 = v25;
    v188 = v56;
    v139 = v20;
    v140 = v21;
    v147 = 0;
    v155 = 0;
    v163 = 0;
    v180 = v38;
    v189 = v57;
    v141 = (float)a7;
    v156 = 0;
    v164 = 0;
    v172 = v29;
    v173 = v30;
    v181 = v39;
    v190 = v42;
    v182 = v81;
    v191 = v82;
    v126 = 0;
    v134 = 0;
    v142 = 0;
    v149 = v24;
    v150 = v25;
    v157 = v25;
    v158 = v26;
    v165 = v20;
    v166 = v21;
    v174 = v31;
    v175 = v33;
    v183 = v40;
    v192 = v58;
    v127 = 0;
    v135 = 0;
    v148 = 0;
    v143 = 0;
    v151 = v20;
    v159 = v21;
    v171 = v28;
    v167 = (float)a7;
    v179 = v36;
    v176 = v168;
    v184 = v169;
    v193 = v170;
    v194 = v178.i32[1];
    v185 = v178.i32[0];
    v195 = v187;
    qmemcpy(__uplo, "LIV", sizeof(__uplo));
    __lda = 9;
    __n = 9;
    __vu = 1.0;
    __vl = 1.0;
    v95 = 1;
    __il = 1;
    v93 = 1;
    __abstol = 2.0e-10;
    __lwork = 512;
    __ldz = 9;
    v90 = 0;
    ssyevx_(&__uplo[2], &__uplo[1], __uplo, &__n, &__a, &__lda, &__vl, &__vu, &__il, &v95, &__abstol, &v93, __w, &v113, &__ldz, v17, &__lwork, v112, __ifail,
      &v90);
    v83 = v90;
    if (v90)
    {
      if (v90 < 1
        || (syslog(3, "HomographyTransform_estimate:The %ld-th eigenvector failed to converge", -(uint64_t)v90),
            printf("HomographyTransform_estimate:The %ld-th eigenvector failed to converge\n", -(uint64_t)v90),
            v83 = v90,
            v90 < 0))
      {
        syslog(3, "HomographyTransform_estimate: the %ld-th argument is wrong in ssyevx_ call", -v83);
        printf("HomographyTransform_estimate: the %ld-th argument is wrong in ssyevx_ call\n");
      }
    }
    else
    {
      *(float *)&v108 = (float)(v113 - (float)(v119 * *((float *)&v102 + 1))) * (float)(v106 / v103);
      *((float *)&v108 + 1) = (float)(v114 - (float)(v120 * *((float *)&v102 + 1))) * (float)(v106 / v103);
      *((float *)&v108 + 2) = (float)((float)(v115
                                            + (float)((float)((float)((float)(v119
                                                                            * (float)-(float)(v105
                                                                                            * *((float *)&v102 + 1)))
                                                                    + (float)(v105 * v113))
                                                            + (float)(v104 * v114))
                                                    + (float)((float)-(float)(v104 * *((float *)&v102 + 1)) * v120)))
                                    - (float)(*((float *)&v102 + 1) * v121))
                            / v103;
      *((float *)&v108 + 3) = (float)(v116 - (float)(v119 * *(float *)&v102)) * (float)(v106 / v103);
      *(float *)&v109 = (float)(v117 - (float)(v120 * *(float *)&v102)) * (float)(v106 / v103);
      *((float *)&v109 + 1) = (float)((float)(v118
                                            + (float)((float)((float)((float)(v119
                                                                            * (float)-(float)(v105 * *(float *)&v102))
                                                                    + (float)(v105 * v116))
                                                            + (float)(v104 * v117))
                                                    + (float)((float)-(float)(v104 * *(float *)&v102) * v120)))
                                    - (float)(*(float *)&v102 * v121))
                            / v103;
      *((float *)&v109 + 2) = v119 * v106;
      *((float *)&v109 + 3) = v120 * v106;
      v110 = v121 + (float)((float)(v120 * v104) + (float)(v105 * v119));
      if (fabs(v110) >= 1.0e-10)
      {
        for (i = 0; i != 32; i += 4)
          *(float *)((char *)&v108 + i) = *(float *)((char *)&v108 + i) / v110;
        v107[0] = v108;
        v107[1] = v109;
        GeomTransform_setParams(a1, v107);
        v84 = 1;
        if (v16)
        {
LABEL_22:
          if ((v84 & 1) != 0)
            return 0;
LABEL_23:
          AffineTransform_estimate(a1, a2, a3, a4, a5, a6, a7);
          return 0;
        }
LABEL_21:
        free(v17);
        goto LABEL_22;
      }
      syslog(3, "HomographyTransform_estimate: the 9-th parameter is too small pp[8]=%f \n", v110);
      printf("HomographyTransform_estimate: the 9-th parameter is too small pp[8]=%f \n");
    }
    v84 = 0;
    if (v16)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v14 == 1)
    goto LABEL_23;
  if (!v14)
    return RigidTransform_estimate(a1, a2, a3, a4, a5, a6, a7);
  v18 = RigidTransform_estimate(a1, a2, a3, a4, a5, a6, a7);
  syslog(3, "GeomTransform_estimate: unknown transform model (%d) use RIGID", *(_DWORD *)a1);
  return v18;
}

uint64_t RigidTransform_estimate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6, int a7)
{
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  __CLPK_integer v23;
  uint64_t v24;
  float v25;
  float v26;
  __CLPK_integer __info;
  __CLPK_integer __ldb;
  __CLPK_integer __lda;
  __CLPK_integer __nrhs;
  __CLPK_integer __n;
  __int128 v33;
  float v34;
  __CLPK_real v35;
  uint64_t v36;
  __CLPK_real __b[6];
  __CLPK_real __a[16];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *a6;
  v9 = *(float *)(a4 + 4 * v8);
  v10 = *(float *)(a5 + 4 * v8);
  v11 = *(float *)(a2 + 4 * v8);
  v12 = *(float *)(a3 + 4 * v8);
  v13 = (float)(v10 * v10) + (float)(v9 * v9);
  v14 = (float)(v10 * v12) + (float)(v11 * v9);
  v15 = (float)(v9 * v12) - (float)(v11 * v10);
  if (a7 >= 2)
  {
    v16 = a6 + 1;
    v17 = a7 - 1;
    do
    {
      v18 = *v16++;
      v19 = *(float *)(a4 + 4 * v18);
      v20 = *(float *)(a5 + 4 * v18);
      v21 = *(float *)(a2 + 4 * v18);
      v22 = *(float *)(a3 + 4 * v18);
      v13 = (float)((float)(v20 * v20) + (float)(v19 * v19)) + v13;
      v9 = v19 + v9;
      v10 = v20 + v10;
      v14 = (float)((float)(v20 * v22) + (float)(v21 * v19)) + v14;
      v15 = (float)((float)(v19 * v22) - (float)(v21 * v20)) + v15;
      v11 = v21 + v11;
      v12 = v22 + v12;
      --v17;
    }
    while (v17);
  }
  __a[0] = v13;
  __b[0] = v14;
  __b[1] = v15;
  __b[2] = v11;
  __b[3] = v12;
  __a[4] = 0.0;
  __a[1] = 0.0;
  __a[12] = v10;
  __a[13] = v9;
  __a[5] = v13;
  __a[6] = -v10;
  __a[9] = -v10;
  __a[10] = (float)a7;
  __a[14] = 0.0;
  __a[2] = v9;
  __a[3] = v10;
  __a[7] = v9;
  __a[8] = v9;
  __a[11] = 0.0;
  __a[15] = (float)a7;
  __nrhs = 1;
  __n = 4;
  __ldb = 4;
  __lda = 4;
  __info = 0;
  sposv_("L", &__n, &__nrhs, __a, &__lda, __b, &__ldb, &__info);
  v23 = __info;
  if (__info)
  {
    if (__info < 1
      || (syslog(6, "RigidTransform_estimate: not symmetric positive definite matrix"), v23 = __info, __info < 0))
    {
      syslog(6, "RigidTransform_estimate: the %ld-th argument is wrong in sposv_ call", -v23);
    }
    *(_OWORD *)__b = xmmword_1A15DFF10;
    v24 = 0xFFFFFFFFLL;
    v25 = 1.0;
  }
  else
  {
    v24 = 0;
    v25 = __b[0];
  }
  if (v25 >= 0.95)
  {
    v26 = __b[1];
  }
  else
  {
    *(_QWORD *)__b = 1065353216;
    v25 = 1.0;
    v26 = 0.0;
  }
  *(float *)&v33 = v25;
  *((float *)&v33 + 1) = -v26;
  *((_QWORD *)&v33 + 1) = __PAIR64__(LODWORD(v26), LODWORD(__b[2]));
  v34 = v25;
  v35 = __b[3];
  v36 = 0;
  GeomTransform_setParams(a1, &v33);
  return v24;
}

double AffineTransform_estimate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6, int a7)
{
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  __CLPK_integer v27;
  __CLPK_integer __info;
  __CLPK_integer __ldb;
  __CLPK_integer __lda;
  __CLPK_integer __nrhs;
  __CLPK_integer __n;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __CLPK_real __b[4];
  unint64_t v38;
  __CLPK_real __a[3];
  uint64_t v40;
  int v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  int v46;
  float v47;
  float v48;
  float v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  int v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  int v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v8 = *a6;
  v9 = *(float *)(a4 + 4 * v8);
  v10 = *(float *)(a5 + 4 * v8);
  v11 = *(float *)(a2 + 4 * v8);
  v12 = *(float *)(a3 + 4 * v8);
  v13 = v9 * v9;
  v14 = v9 * v10;
  v15 = v10 * v10;
  v16 = v9 * v11;
  v17 = v10 * v11;
  v18 = v9 * v12;
  v19 = v10 * v12;
  if (a7 >= 2)
  {
    v20 = a6 + 1;
    v21 = a7 - 1;
    do
    {
      v22 = *v20++;
      v23 = *(float *)(a4 + 4 * v22);
      v24 = *(float *)(a5 + 4 * v22);
      v25 = *(float *)(a2 + 4 * v22);
      v26 = *(float *)(a3 + 4 * v22);
      v13 = v13 + (float)(v23 * v23);
      v14 = v14 + (float)(v23 * v24);
      v15 = v15 + (float)(v24 * v24);
      v9 = v23 + v9;
      v10 = v24 + v10;
      v16 = v16 + (float)(v23 * v25);
      v17 = v17 + (float)(v24 * v25);
      v11 = v25 + v11;
      v18 = v18 + (float)(v23 * v26);
      v19 = v19 + (float)(v24 * v26);
      v12 = v26 + v12;
      --v21;
    }
    while (v21);
  }
  __a[0] = v13;
  __a[1] = v14;
  __a[2] = v9;
  v43 = v15;
  v44 = v10;
  __b[0] = v16;
  __b[1] = v17;
  __b[2] = v11;
  __b[3] = v18;
  v38 = __PAIR64__(LODWORD(v12), LODWORD(v19));
  v42 = v14;
  v47 = v9;
  v48 = v10;
  v57 = 0;
  v62 = 0;
  v49 = (float)a7;
  v53 = 0;
  v58 = 0;
  v63 = 0;
  v40 = 0;
  v45 = 0;
  v54 = v13;
  v55 = v14;
  v59 = v14;
  v60 = v15;
  v64 = v9;
  v65 = v10;
  v41 = 0;
  v46 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v56 = v9;
  v61 = v10;
  v66 = (float)a7;
  __nrhs = 1;
  __n = 6;
  __ldb = 6;
  __lda = 6;
  __info = 0;
  sposv_("L", &__n, &__nrhs, __a, &__lda, __b, &__ldb, &__info);
  v27 = __info;
  if (__info)
  {
    if (__info < 1
      || (syslog(3, "AffineTransform_estimate: not symmetric positive definite matrix"), v27 = __info, __info < 0))
    {
      syslog(3, "AffineTransform_estimate: the %ld-th argument is wrong in sposv_ call", -v27);
    }
  }
  v34 = *(_OWORD *)__b;
  v35 = v38;
  v36 = 0;
  return GeomTransform_setParams(a1, &v34);
}

float GeomTransform_adjustToUnitySize(float *a1, float *a2, unint64_t a3, unint64_t a4, int a5)
{
  uint64_t v5;
  float v6;
  float v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float result;

  v5 = 0;
  v6 = (float)a3;
  v7 = (float)a4;
  if (a3 <= a4)
    v8 = a4;
  else
    v8 = a3;
  v9 = v6 / (float)v8;
  v10 = v7 / (float)v8;
  v11 = v7 / v6;
  v12 = v6 / v7;
  *a1 = *a2 + (float)(v9 * a2[6]);
  v13 = (float)(v10 * a2[7]) + (float)((float)(v7 / v6) * a2[1]);
  v14 = -(float)v8;
  v15 = v14 / v6;
  v16 = 1;
  if (a5)
    v17 = 1;
  else
    v17 = 3;
  v18 = 2;
  if (a5)
    v19 = 2;
  else
    v19 = 6;
  if (a5)
    v16 = 3;
  a1[v17] = v13;
  a1[v19] = (float)((float)((float)((float)((float)(*a2 + (float)(v9 * a2[6])) + (float)(v11 * a2[1]))
                                  + (float)(v10 * a2[7]))
                          + (float)(v15 * a2[2]))
                  + -1.0)
          * -0.5;
  a1[v16] = (float)(v9 * a2[6]) + (float)(v12 * a2[3]);
  a1[4] = a2[4] + (float)(v10 * a2[7]);
  v20 = 5;
  if (a5)
    v21 = 5;
  else
    v21 = 7;
  if (a5)
    v18 = 6;
  a1[v21] = (float)((float)((float)((float)(a2[4] + (float)((float)(v9 * a2[6]) + (float)(v12 * a2[3])))
                                  + (float)(v10 * a2[7]))
                          + (float)((float)(v14 / v7) * a2[5]))
                  + -1.0)
          * -0.5;
  if (a5)
    v20 = 7;
  a1[v18] = (float)(v9 + v9) * a2[6];
  a1[v20] = (float)(v10 + v10) * a2[7];
  a1[8] = (float)((float)-(float)(v10 * a2[7]) - (float)(v9 * a2[6])) + 1.0;
  do
  {
    result = a1[v5] / a1[8];
    a1[v5++] = result;
  }
  while (v5 != 9);
  return result;
}

float GeomTransform_adjustfromUnitySize(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t i;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  float result;
  float v29;
  uint64_t v30;
  int v31;
  float v32;
  __int128 v33;
  float v34[9];
  _DWORD v35[9];
  _DWORD v36[8];
  float v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a3 <= a4)
    v6 = a4;
  else
    v6 = a3;
  v34[0] = (float)((float)a3 + (float)a3) / (float)v6;
  v34[1] = 0.0;
  v34[2] = (float)-(float)a3 / (float)v6;
  v34[3] = 0.0;
  v34[4] = (float)((float)a4 + (float)a4) / (float)v6;
  v34[5] = (float)-(float)a4 / (float)v6;
  v34[6] = 0.0;
  v34[7] = 0.0;
  v34[8] = 1.0;
  v29 = (float)v6 / (float)(2 * a3);
  v30 = 0x3F00000000000000;
  v31 = 0;
  v32 = (float)v6 / (float)(2 * a4);
  v33 = xmmword_1A15DFF20;
  if (a5)
    v7 = 1;
  else
    v7 = 3;
  v8 = a2[v7];
  if (a5)
    v9 = 2;
  else
    v9 = 6;
  if (a5)
    v10 = 3;
  else
    v10 = 1;
  v35[0] = *a2;
  v35[1] = v8;
  if (a5)
    v11 = 5;
  else
    v11 = 7;
  if (a5)
    v12 = 7;
  else
    v12 = 5;
  v13 = a2[v12];
  v14 = a2[8];
  if (a5)
    v15 = 6;
  else
    v15 = 2;
  v16 = a2[v15];
  v17 = a2[v11];
  v18 = a2[4];
  v19 = a2[v10];
  v35[2] = a2[v9];
  v35[3] = v19;
  v35[4] = v18;
  v35[5] = v17;
  v35[6] = v16;
  v35[7] = v13;
  v35[8] = v14;
  mul3x3Matrix((uint64_t)v36, (uint64_t)v35, (uint64_t)&v29, 0);
  mul3x3Matrix((uint64_t)v36, (uint64_t)v34, (uint64_t)v36, 0);
  if (fabsf(v37) < 1.0e-10)
    syslog(3, "GeomTransform_changeCoordinateSystem failed");
  for (i = 0; i != 9; ++i)
    *(float *)&v36[i] = *(float *)&v36[i] / v37;
  v21 = v36[v7];
  v22 = v36[v9];
  v23 = v36[v10];
  v24 = v36[v11];
  v25 = v36[4];
  v26 = v36[v15];
  v27 = v36[v12];
  *(_DWORD *)a1 = v36[0];
  *(_DWORD *)(a1 + 4) = v21;
  result = v37;
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 12) = v23;
  *(_DWORD *)(a1 + 16) = v25;
  *(_DWORD *)(a1 + 20) = v24;
  *(_DWORD *)(a1 + 24) = v26;
  *(_DWORD *)(a1 + 28) = v27;
  *(float *)(a1 + 32) = result;
  return result;
}

float GeomTransform_fromUnityToImageSize(_DWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float result;

  v5 = (float)a3;
  v6 = (float)a4;
  *a1 = *(_DWORD *)a2;
  v7 = 1;
  if (a5)
    v8 = 1;
  else
    v8 = 3;
  v9 = 2;
  if (a5)
    v10 = 2;
  else
    v10 = 6;
  if (a5)
    v7 = 3;
  v11 = 5;
  if (a5)
    v12 = 5;
  else
    v12 = 7;
  if (a5)
  {
    v9 = 6;
    v11 = 7;
  }
  *(float *)&a1[v8] = (float)((float)a3 / (float)a4) * *(float *)(a2 + 4);
  *(float *)&a1[v10] = *(float *)(a2 + 8) * v5;
  *(float *)&a1[v7] = (float)((float)a4 / (float)a3) * *(float *)(a2 + 12);
  a1[4] = *(_DWORD *)(a2 + 16);
  *(float *)&a1[v12] = *(float *)(a2 + 20) * v6;
  *(float *)&a1[v9] = *(float *)(a2 + 24) / v5;
  result = *(float *)(a2 + 28) / v6;
  *(float *)&a1[v11] = result;
  a1[8] = 1065353216;
  return result;
}

float GeomTransform_get3x3Matrix(uint64_t a1, float *a2, unint64_t a3, unint64_t a4, int a5)
{
  return GeomTransform_adjustToUnitySize(a2, (float *)(a1 + 4), a3, a4, a5);
}

uint64_t GeomTransform_numTestsToDo(_DWORD *a1, int a2, int a3)
{
  int v3;
  int v4;
  unsigned __int16 *v5;
  uint64_t v6;

  v3 = *a1;
  if (*a1 == 2)
  {
    v4 = ((a3 - a2) << 10) / a3;
    v5 = (unsigned __int16 *)&KNumSamplesToTest_Homography;
  }
  else if (v3 == 1)
  {
    v4 = ((a3 - a2) << 10) / a3;
    v5 = (unsigned __int16 *)&KNumSamplesToTest_Affine;
  }
  else
  {
    if (v3)
    {
      v6 = KKNumSamplesToTest_Rigid[((a3 - a2) << 10) / a3];
      syslog(3, "GeomTransform_numTestsToDo: unknown transform model (%d) use RIGID", *a1);
      return v6;
    }
    v4 = ((a3 - a2) << 10) / a3;
    v5 = KKNumSamplesToTest_Rigid;
  }
  return v5[v4];
}

float normalizePoints(float *a1, float *a2, float *a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6, int a7)
{
  uint64_t v7;
  float v8;
  uint64_t v9;
  unsigned __int16 *v10;
  float v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float result;

  if (a7 <= 0)
  {
    v13 = (float)a7;
    v15 = 0.0;
    v16 = 0.0 / (float)a7;
    v14 = v16;
  }
  else
  {
    v7 = a7;
    v8 = 0.0;
    v9 = a7;
    v10 = a6;
    v11 = 0.0;
    do
    {
      v12 = *v10++;
      v11 = v11 + *(float *)(a4 + 4 * v12);
      v8 = v8 + *(float *)(a5 + 4 * v12);
      --v9;
    }
    while (v9);
    v13 = (float)a7;
    v14 = v11 / (float)a7;
    v15 = 0.0;
    v16 = v8 / (float)a7;
    do
    {
      v17 = *a6++;
      v18 = *(float *)(a4 + 4 * v17) - v14;
      v19 = *(float *)(a5 + 4 * v17) - v16;
      v15 = v15 + sqrtf((float)(v19 * v19) + (float)(v18 * v18));
      --v7;
    }
    while (v7);
  }
  v20 = (float)(v13 * 1.4142) / v15;
  v21 = -(float)(v20 * v14);
  *a1 = v20;
  result = -(float)(v20 * v16);
  *a2 = v21;
  *a3 = result;
  return result;
}

_DWORD *IPDetector_constructor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  void *v13;
  void *v14;
  size_t v15;
  size_t v16;
  void *v17;
  void *v18;
  const char *v19;

  v6 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B0040E37476F1uLL);
  v7 = v6;
  if (!v6)
    goto LABEL_17;
  v6[10] = 3;
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  *((_QWORD *)v6 + 2) = a3;
  v8 = malloc_type_calloc(1uLL, a3 * a2, 0x100004077774924uLL);
  *((_QWORD *)v7 + 3) = v8;
  if (!v8)
  {
    syslog(3, "IPDetector_constructor: Cannot allocate mFltImage ");
LABEL_17:
    IPDetector_destructor(v7);
    return 0;
  }
  v10 = *((_QWORD *)v7 + 1);
  v9 = *((_QWORD *)v7 + 2);
  v11 = boxFilter_uint8_init(v9, *v7, v10, v7[10]);
  if ((v11 & 0x80000000) != 0)
  {
    syslog(3, "IPDetector_constructor: Cannot allocate box filter");
    goto LABEL_17;
  }
  if (2 * v9 * v10 <= (unint64_t)v11)
    v12 = v11;
  else
    v12 = 2 * v9 * v10;
  v13 = malloc_type_calloc(1uLL, v12, 0x1A6468A2uLL);
  *((_QWORD *)v7 + 4) = v13;
  if (!v13)
  {
    syslog(3, "IPDetector_constructor: Cannot allocate mTmpBuffer ");
    goto LABEL_17;
  }
  bzero(v13, v12);
  v14 = malloc_type_calloc(1uLL, 0x960uLL, 0x1000040274DC3F3uLL);
  *((_QWORD *)v7 + 6) = v14;
  if (!v14)
  {
    v19 = "IPDetector_constructor: Cannot allocate mCornerVec ";
LABEL_16:
    syslog(3, v19);
    goto LABEL_17;
  }
  bzero(v14, 0x960uLL);
  v15 = 2 * a1;
  *((_QWORD *)v7 + 7) = malloc_type_calloc(1uLL, v15, 0x1000040BDFB0063uLL);
  v16 = 2 * a2;
  v17 = malloc_type_calloc(1uLL, v16, 0x1000040BDFB0063uLL);
  *((_QWORD *)v7 + 8) = v17;
  v18 = (void *)*((_QWORD *)v7 + 7);
  v19 = "IPDetector_constructor: Cannot allocate mBX, mBY ";
  if (!v18 || !v17)
    goto LABEL_16;
  bzero(v18, v15);
  bzero(*((void **)v7 + 8), v16);
  return v7;
}

void IPDetector_destructor(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v2 = (void *)a1[8];
    if (v2)
    {
      free(v2);
      a1[8] = 0;
    }
    v3 = (void *)a1[7];
    if (v3)
    {
      free(v3);
      a1[7] = 0;
    }
    v4 = (void *)a1[6];
    if (v4)
    {
      free(v4);
      a1[6] = 0;
    }
    v5 = (void *)a1[4];
    if (v5)
    {
      free(v5);
      a1[4] = 0;
    }
    v6 = (void *)a1[3];
    if (v6)
      free(v6);
    free(a1);
  }
}

uint64_t IPDetector_execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, NSObject *a11)
{
  unsigned __int16 v11;
  float v18;
  uint64_t v19;
  _WORD *v20;
  __int16 v21;
  float v22;

  v11 = 0;
  if (a8 >= 0x18 && a9 >= 0x18)
  {
    if (IPDetector_response(a1, a6, a7, a8, a9, a10, a11) == -1)
      return 0;
    IPDetector_cornerDetect(a1, a8 - 23, a9 - 23, a10, 11, a11);
    if (!a5)
    {
      return 0;
    }
    else
    {
      v11 = 0;
      v19 = a5;
      v20 = (_WORD *)(*(_QWORD *)(a1 + 48) + 2);
      do
      {
        v21 = v20[1];
        if (v21)
        {
          LOWORD(v18) = *(v20 - 1);
          v22 = (float)LODWORD(v18);
          *(float *)(a2 + 4 * v11) = v22;
          LOWORD(v22) = *v20;
          v18 = (float)LODWORD(v22);
          *(float *)(a3 + 4 * v11) = v18;
          *(_WORD *)(a4 + 2 * v11++) = v21;
        }
        v20 += 3;
        --v19;
      }
      while (v19);
    }
  }
  return v11;
}

uint64_t IPDetector_response(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  uint64_t v12;
  void *v13;
  _QWORD v15[6];
  int v16;
  _QWORD block[5];
  int v18;
  _QWORD v19[7];
  int v20;
  int v21;
  int v22;
  _BYTE v23[12];
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;

  v12 = a3 + a3 * a6;
  v13 = (void *)(*(_QWORD *)(a1 + 24) + v12);
  if (boxFilter_uint8(v13, (void *)(a2 + v12), a6, a4, a5, *(_DWORD *)(a1 + 40), *(void **)(a1 + 32)) == -1)
  {
    syslog(3, "IPDetector_response: box filter failed");
    return 0xFFFFFFFFLL;
  }
  else
  {
    *(_QWORD *)&v23[4] = 0;
    v24 = &v23[4];
    v25 = 0x2000000000;
    v26 = *(_QWORD *)(a1 + 32);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = __IPDetector_response_block_invoke;
    v19[3] = &unk_1E4541BF8;
    v19[5] = v13;
    v19[6] = a6;
    v19[4] = &v23[4];
    v20 = 3 * a6;
    v21 = 2 * a6;
    v22 = a4 >> 3;
    *(_QWORD *)v23 = a4 & 7;
    if (a7)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __IPDetector_response_block_invoke_2;
      block[3] = &unk_1E4541C20;
      block[4] = v19;
      v18 = (int)a5 >> 1;
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = __IPDetector_response_block_invoke_3;
      v15[3] = &unk_1E4541C48;
      v16 = (int)a5 >> 1;
      v15[4] = v19;
      v15[5] = a5;
      dispatch_async(a7, v15);
      dispatch_async(a7, block);
      dispatch_barrier_sync(a7, &__block_literal_global);
    }
    else
    {
      __IPDetector_response_block_invoke((uint64_t)v19, 0, a5);
    }
    _Block_object_dispose(&v23[4], 8);
    return 0;
  }
}

void IPDetector_cornerDetect(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD block[6];
  int v19;
  _QWORD v20[5];
  int v21;
  _QWORD v22[8];

  bzero(*(void **)(a1 + 48), 0x960uLL);
  v12 = a3 / 0x14;
  v13 = 20 * (a3 / 0x14);
  if (a3 >= 0x14)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 64);
    do
    {
      *(_WORD *)(v15 + 2 * v14) = v14 / v12;
      ++v14;
    }
    while (v13 > (unsigned __int16)v14);
  }
  if (a2 >= 0x14)
  {
    v16 = 0;
    v17 = *(_QWORD *)(a1 + 56);
    do
    {
      *(_WORD *)(v17 + 2 * v16) = v16 / (a2 / 0x14);
      ++v16;
    }
    while (20 * (a2 / 0x14) > (unsigned __int16)v16);
  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 0x40000000;
  v22[2] = __IPDetector_cornerDetect_block_invoke;
  v22[3] = &__block_descriptor_tmp_11;
  v22[4] = a1;
  v22[5] = a5;
  v22[6] = a4;
  v22[7] = 20 * (a2 / 0x14);
  if (a6)
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 0x40000000;
    v20[2] = __IPDetector_cornerDetect_block_invoke_2;
    v20[3] = &unk_1E4541CB0;
    v20[4] = v22;
    v21 = 10 * v12;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __IPDetector_cornerDetect_block_invoke_3;
    block[3] = &unk_1E4541CD8;
    v19 = 10 * v12;
    block[4] = v22;
    block[5] = 20 * (a3 / 0x14);
    dispatch_async(a6, block);
    dispatch_async(a6, v20);
    dispatch_barrier_sync(a6, &__block_literal_global_15);
  }
  else
  {
    __IPDetector_cornerDetect_block_invoke((uint64_t)v22, 0, v13);
  }
}

uint64_t IPDetector_selectCorners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, unsigned __int16 *a6, unsigned __int16 *a7, unsigned int a8, unint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14)
{
  unint64_t v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  signed int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  unsigned int v37;
  _WORD *v38;
  uint64_t v39;
  unsigned __int16 v40;
  _WORD *v41;
  __int16 v42;
  float v43;

  if (a11 < 0x18 || a12 < 0x18)
    return 0;
  v21 = a11 - 23;
  bzero(*(void **)(a1 + 48), 0x960uLL);
  if (a11 - 23 < a13 || a12 - 23 < a14)
    return 0;
  if (a8)
  {
    v23 = (a12 - 23) / a14;
    v22 = (float)a11 / (float)a9;
    v24 = a8;
    do
    {
      v25 = *a5++;
      v26 = llroundf(v22 * (float)v25);
      v28 = *a6++;
      v27 = v28;
      v29 = v26 - 11;
      if (((v26 - 11) & 0x80000000) == 0 && v29 < (int)(v21 / a13 * a13))
      {
        v30 = llroundf((float)((float)a12 / (float)a10) * (float)v27);
        v31 = v30 - 11;
        if (((v30 - 11) & 0x80000000) == 0 && v31 < (int)v23 * (int)a14)
        {
          v32 = *a7;
          v33 = v29 / (int)(v21 / a13) + v31 / (int)v23 * a13;
          v34 = *(_QWORD *)(a1 + 48);
          v35 = v34 + 6 * v33;
          v37 = *(unsigned __int16 *)(v35 + 4);
          v36 = (_WORD *)(v35 + 4);
          if (v37 < v32)
          {
            *v36 = v32;
            v38 = (_WORD *)(v34 + 6 * v33);
            *v38 = v26;
            v38[1] = v30;
          }
        }
      }
      ++a7;
      --v24;
    }
    while (v24);
  }
  v39 = (unsigned __int16)(a14 * a13);
  if ((_WORD)a14 * (_WORD)a13)
  {
    v40 = 0;
    v41 = (_WORD *)(*(_QWORD *)(a1 + 48) + 2);
    do
    {
      v42 = v41[1];
      if (v42)
      {
        LOWORD(v22) = *(v41 - 1);
        v43 = (float)LODWORD(v22);
        *(float *)(a2 + 4 * v40) = v43;
        LOWORD(v43) = *v41;
        v22 = (float)LODWORD(v43);
        *(float *)(a3 + 4 * v40) = v22;
        *(_WORD *)(a4 + 2 * v40++) = v42;
      }
      v41 += 3;
      --v39;
    }
    while (v39);
  }
  else
  {
    return 0;
  }
  return v40;
}

uint64_t IPDetector_distributeCorners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, float *a6, unsigned __int16 *a7, unsigned int a8, unint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14)
{
  float v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  unsigned int v35;
  _WORD *v36;
  uint64_t v37;
  unsigned __int16 v38;
  _WORD *v39;
  __int16 v40;
  float v41;

  if (a11 < 0x18 || a12 < 0x18)
    return 0;
  bzero(*(void **)(a1 + 48), 0x960uLL);
  if (a8)
  {
    v22 = (float)a11 / (float)a9;
    v23 = (a12 - 23) / a14;
    v24 = (a11 - 23) / a13;
    v25 = a8;
    do
    {
      v26 = llroundf(v22 * *a5);
      v27 = v26 - 11;
      if (((v26 - 11) & 0x80000000) == 0 && v27 < (int)v24 * (int)a13)
      {
        v28 = llroundf((float)((float)a12 / (float)a10) * *a6);
        v29 = v28 - 11;
        if (((v28 - 11) & 0x80000000) == 0 && v29 < (int)v23 * (int)a14)
        {
          v30 = *a7;
          v31 = v27 / (int)v24 + v29 / (int)v23 * a13;
          v32 = *(_QWORD *)(a1 + 48);
          v33 = v32 + 6 * v31;
          v35 = *(unsigned __int16 *)(v33 + 4);
          v34 = (_WORD *)(v33 + 4);
          if (v35 < v30)
          {
            *v34 = v30;
            v36 = (_WORD *)(v32 + 6 * v31);
            *v36 = v26;
            v36[1] = v28;
          }
        }
      }
      ++a7;
      ++a6;
      ++a5;
      --v25;
    }
    while (v25);
  }
  v37 = (unsigned __int16)(a14 * a13);
  if ((_WORD)a14 * (_WORD)a13)
  {
    v38 = 0;
    v39 = (_WORD *)(*(_QWORD *)(a1 + 48) + 2);
    do
    {
      v40 = v39[1];
      if (v40)
      {
        LOWORD(v22) = *(v39 - 1);
        v41 = (float)LODWORD(v22);
        *(float *)(a2 + 4 * v38) = v41;
        LOWORD(v41) = *v39;
        v22 = (float)LODWORD(v41);
        *(float *)(a3 + 4 * v38) = v22;
        *(_WORD *)(a4 + 2 * v38++) = v40;
      }
      v39 += 3;
      --v37;
    }
    while (v37);
  }
  else
  {
    return 0;
  }
  return v38;
}

vImage_Error boxFilter_uint8_init(unsigned int a1, unsigned int a2, unsigned int a3, uint32_t kernel_height)
{
  vImage_Error result;
  vImage_Buffer dest;
  vImage_Buffer src;
  char v7;

  v7 = 0;
  src.data = &v7;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a1;
  dest.data = &v7;
  dest.height = a3;
  dest.width = a2;
  dest.rowBytes = a1;
  result = vImageBoxConvolve_Planar8(&src, &dest, 0, 0, 0, kernel_height, kernel_height, 0, 0x82u);
  if ((result & 0x80000000) != 0)
  {
    syslog(3, "boxFilter_uint8_init: box filter failed when request minimum size err=%d\n", result);
    return 0xFFFFFFFFLL;
  }
  return result;
}

vImage_Error boxFilter_uint8(void *a1, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, uint32_t kernel_width, void *tempBuffer)
{
  vImage_Error result;
  vImage_Buffer dest;
  vImage_Buffer src;

  src.data = a2;
  src.height = a5;
  src.width = a4;
  src.rowBytes = a3;
  dest.data = a1;
  dest.height = a5;
  dest.width = a4;
  dest.rowBytes = a3;
  result = vImageBoxConvolve_Planar8(&src, &dest, tempBuffer, 0, 0, kernel_width, kernel_width, 0, 2u);
  if (result)
  {
    syslog(3, "boxFilter_uint8: box filter failed err=%d\n", result);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t invMatrix(__CLPK_real *a1, __CLPK_integer a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  __CLPK_integer *v18;
  __CLPK_real *v19;
  uint64_t v20;
  __CLPK_integer __info;
  __CLPK_integer __lwork;
  __CLPK_integer __lda;

  if (a2 != 3)
  {
    __lda = a2;
    v18 = (__CLPK_integer *)malloc_type_malloc(4 * a2 + 4, 0x100004052888210uLL);
    __lwork = a2 * a2;
    v19 = (__CLPK_real *)malloc_type_malloc(4 * (a2 * a2), 0x100004052888210uLL);
    __info = 0;
    sgetrf_(&__lda, &__lda, a1, &__lda, v18, &__info);
    if (__info)
    {
      syslog(3, " invMatrix failed INFO1 = %ld\n");
    }
    else
    {
      sgetri_(&__lda, a1, &__lda, v18, v19, &__lwork, &__info);
      if (!__info)
      {
        v16 = 0;
        goto LABEL_12;
      }
      syslog(3, " invMatrix failed INFO2 = %ld\n");
    }
    v16 = 0xFFFFFFFFLL;
LABEL_12:
    free(v18);
    free(v19);
    return v16;
  }
  v3 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = (float)(v11 * v7) - (float)(v10 * v8);
  v13 = (float)(v11 * v4) - (float)(v10 * v6);
  v14 = (float)(v8 * v4) - (float)(v7 * v6);
  v15 = (float)((float)(*a1 * v12) - (float)(v5 * v13)) + (float)(v9 * v14);
  if (v15 == 0.0)
    return 0xFFFFFFFFLL;
  v20 = 0;
  *a1 = v12;
  a1[1] = -v13;
  a1[2] = v14;
  a1[3] = -(float)((float)(v11 * v5) - (float)(v9 * v8));
  a1[4] = (float)(v11 * v3) - (float)(v9 * v6);
  a1[5] = -(float)((float)(v6 * (float)-v5) + (float)(v8 * v3));
  a1[6] = (float)(v10 * v5) - (float)(v9 * v7);
  a1[7] = -(float)((float)(v10 * v3) - (float)(v9 * v4));
  a1[8] = (float)(v4 * (float)-v5) + (float)(v7 * v3);
  do
  {
    a1[v20] = a1[v20] / v15;
    ++v20;
  }
  while (v20 != 9);
  return 0;
}

float32x4_t mul3x3Matrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  unsigned int v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t result;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x2_t v14;
  uint64_t v15;
  int v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  int v21;
  _BYTE v22[36];
  _BYTE v23[32];

  v4 = *(float *)a3;
  v5 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)v22 = *(_DWORD *)a2;
  if (a4)
  {
    *(_QWORD *)&v22[4] = *(_QWORD *)(a2 + 4);
    *(_QWORD *)&v22[12] = *(_QWORD *)(a2 + 12);
    *(_OWORD *)&v22[20] = *(_OWORD *)(a2 + 20);
    v13 = *(float *)a3;
    v15 = *(_QWORD *)(a3 + 4);
    v17 = *(float32x2_t *)(a3 + 12);
    v19 = *(float32x4_t *)(a3 + 20);
    v6 = (float32x4_t)vextq_s8(*(int8x16_t *)&v22[20], *(int8x16_t *)&v22[20], 4uLL);
    v7 = vmulq_n_f32(*(float32x4_t *)v22, v4);
    v8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(*(float32x4_t *)v22, *(float32x4_t *)v17.f32, 3), *(float32x4_t *)&v22[12], v19, 2), v6, v19, 3);
    *(float32x4_t *)v23 = vmlaq_laneq_f32(vmlaq_lane_f32(v7, *(float32x4_t *)&v22[12], *(float32x2_t *)&v13, 1), v6, *(float32x4_t *)&v13, 2);
    *(float32x4_t *)&v23[12] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_laneq_f32(*(float32x4_t *)v22, *(float32x4_t *)&v13, 3), *(float32x4_t *)&v22[12], v17, 1), v6, *(float32x4_t *)v17.f32, 2);
    *(_QWORD *)&v23[24] = v8.i64[0];
    result = *(float32x4_t *)v23;
    *(_OWORD *)a1 = *(_OWORD *)v23;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&v23[16];
    *(_DWORD *)(a1 + 32) = v8.i32[2];
  }
  else
  {
    *(_DWORD *)&v22[4] = *(_DWORD *)(a2 + 12);
    *(_DWORD *)&v22[8] = *(_DWORD *)(a2 + 24);
    *(_DWORD *)&v22[12] = *(_DWORD *)(a2 + 4);
    *(_DWORD *)&v22[16] = *(_DWORD *)(a2 + 16);
    *(_DWORD *)&v22[20] = *(_DWORD *)(a2 + 28);
    *(_DWORD *)&v22[24] = *(_DWORD *)(a2 + 8);
    *(_DWORD *)&v22[28] = *(_DWORD *)(a2 + 20);
    *(_DWORD *)&v22[32] = *(_DWORD *)(a2 + 32);
    v14 = (float32x2_t)__PAIR64__(*(_DWORD *)(a3 + 12), LODWORD(v4));
    v16 = *(_DWORD *)(a3 + 24);
    v18.i64[0] = __PAIR64__(v5, *(_DWORD *)(a3 + 4));
    v18.i32[2] = *(_DWORD *)(a3 + 28);
    v18.i32[3] = *(_DWORD *)(a3 + 8);
    v20 = *(_DWORD *)(a3 + 20);
    v21 = *(_DWORD *)(a3 + 32);
    v10 = (float32x4_t)vextq_s8(*(int8x16_t *)&v22[20], *(int8x16_t *)&v22[20], 4uLL);
    v11 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v22, v14.f32[0]), *(float32x4_t *)&v22[12], v14, 1), v10, *(float32x4_t *)v14.f32, 2);
    v12 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_laneq_f32(*(float32x4_t *)v22, *(float32x4_t *)v14.f32, 3), *(float32x4_t *)&v22[12], (float32x2_t)__PAIR64__(v5, *(_DWORD *)(a3 + 4)), 1), v10, v18, 2);
    result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(*(float32x4_t *)v22, v18, 3), *(float32x4_t *)&v22[12], *(float32x4_t *)((char *)&v18 + 8), 2), v10, *(float32x4_t *)((char *)&v18 + 8), 3);
    *(_DWORD *)a1 = v11.i32[0];
    *(_DWORD *)(a1 + 4) = v12.i32[0];
    *(_DWORD *)(a1 + 8) = result.i32[0];
    *(_DWORD *)(a1 + 12) = v11.i32[1];
    *(_DWORD *)(a1 + 16) = v12.i32[1];
    *(_DWORD *)(a1 + 20) = result.i32[1];
    *(_DWORD *)(a1 + 24) = v11.i32[2];
    *(_DWORD *)(a1 + 28) = v12.i32[2];
    *(_DWORD *)(a1 + 32) = result.i32[2];
  }
  return result;
}

_QWORD *DigestShared_constructor(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  BOOL v7;

  v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040F32E1FD2uLL);
  v5 = v4;
  if (!v4
    || ((*v4 = a1,
         v4[1] = a2,
         v4[2] = malloc_type_calloc(1uLL, 8 * a1, 0x100004000313F17uLL),
         v6 = malloc_type_calloc(1uLL, 8 * v5[1], 0x100004000313F17uLL),
         v5[3] = v6,
         v5[2])
      ? (v7 = v6 == 0)
      : (v7 = 1),
        v7))
  {
    DigestShared_destructor(v5);
    return 0;
  }
  return v5;
}

void DigestShared_destructor(_QWORD *a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = (void *)a1[2];
    if (v2)
      free(v2);
    v3 = (void *)a1[3];
    if (v3)
      free(v3);
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    free(a1);
  }
}

_QWORD *Digest_constructor(size_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;

  if (a3 && (v6 = malloc_type_calloc(1uLL, 0x38uLL, 0x1090040653827A0uLL)) != 0)
  {
    v7 = v6;
    v6[6] = 0;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)v6 = 0u;
    if (!Digest_init(v6, a1, a2))
    {
      v7[6] = a3;
      return v7;
    }
    Digest_purgeResources((uint64_t)v7);
    free(v7);
  }
  else
  {
    Digest_purgeResources(0);
  }
  return 0;
}

uint64_t Digest_init(size_t *a1, size_t a2, unint64_t a3)
{
  void *v7;
  BOOL v8;
  int v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (*a1 == a2 && a1[1] == a3)
    return 0;
  Digest_purgeResources((uint64_t)a1);
  *a1 = a2;
  a1[1] = a3;
  a1[2] = (unint64_t)(float)((float)a2 * 0.25);
  a1[3] = (unint64_t)(float)((float)a3 * 0.25);
  a1[4] = (size_t)malloc_type_calloc(1uLL, a2, 0x100004077774924uLL);
  v7 = malloc_type_calloc(1uLL, a1[1], 0x100004077774924uLL);
  a1[5] = (size_t)v7;
  if (a1[4])
    v8 = v7 == 0;
  else
    v8 = 1;
  v9 = v8;
  return (v9 << 31 >> 31);
}

void Digest_destructor(void *a1)
{
  Digest_purgeResources((uint64_t)a1);
  if (a1)
    free(a1);
}

double Digest_purgeResources(uint64_t a1)
{
  void *v2;
  void *v3;
  double result;

  if (a1)
  {
    v2 = *(void **)(a1 + 32);
    if (v2)
      free(v2);
    v3 = *(void **)(a1 + 40);
    if (v3)
      free(v3);
    *(_QWORD *)(a1 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

float Norm_constructor(unint64_t a1, unint64_t a2)
{
  float *v4;
  float result;
  float v6;
  float v7;
  unint64_t v8;
  float v9;

  v4 = (float *)malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
  if (v4)
  {
    v6 = (float)a2;
    v7 = (float)a1;
    if (a1 <= a2)
      v8 = a2;
    else
      v8 = a1;
    v9 = 2.0 / (float)v8;
    *v4 = v9;
    v4[1] = v9;
    v4[2] = (float)-v7 / (float)v8;
    v4[3] = (float)-v6 / (float)v8;
    v4[4] = 1.0 / v9;
    v4[5] = 1.0 / v9;
    result = v6 * 0.5;
    v4[6] = v7 * 0.5;
    v4[7] = result;
  }
  return result;
}

float Norm_dir(float *a1, float *a2, float *a3, float a4, float a5)
{
  float result;

  *a2 = a1[2] + (float)(*a1 * a4);
  result = a1[3] + (float)(a1[1] * a5);
  *a3 = result;
  return result;
}

float Norm_dirs(float *a1, float *a2, float *a3, float *a4, float *a5, unsigned int a6)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float result;
  float v11;

  if (a6)
  {
    v6 = a6;
    do
    {
      v7 = *a4++;
      v8 = v7;
      v9 = *a5++;
      result = a1[2] + (float)(*a1 * v8);
      v11 = a1[3] + (float)(a1[1] * v9);
      *a2++ = result;
      *a3++ = v11;
      --v6;
    }
    while (v6);
  }
  return result;
}

float *Norm_invs(float *result, float *a2, float *a3, float *a4, float *a5, unsigned int a6)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;

  if (a6)
  {
    v6 = a6;
    do
    {
      v7 = *a4++;
      v8 = v7;
      v9 = *a5++;
      v10 = (float)(result[7] + (float)(result[5] * v9)) + 0.5;
      *a2++ = (float)(result[6] + (float)(result[4] * v8)) + 0.5;
      *a3++ = v10;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t *ImageRegistrationCreateContext()
{
  uint64_t *v0;
  const __CFAllocator *v1;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v3;
  _QWORD *v4;
  NSObject *v5;
  dispatch_queue_t v6;

  v0 = (uint64_t *)malloc_type_calloc(1uLL, 0x48uLL, 0x10A0040E880AA40uLL);
  if (!v0)
  {
    NSLog(CFSTR("%s : calloc failed\n"), "ImageRegistrationCreateContext");
    goto LABEL_11;
  }
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 14, 0, 0);
  v0[7] = (uint64_t)Mutable;
  if (!Mutable)
  {
    NSLog(CFSTR("%s : CFDictionaryCreateMutable failed\n"), "ImageRegistrationCreateContext");
    goto LABEL_11;
  }
  v3 = CFArrayCreateMutable(v1, 7, 0);
  v0[8] = (uint64_t)v3;
  if (!v3)
  {
    NSLog(CFSTR("%s : CFArrayCreateMutable failed\n"), "ImageRegistrationCreateContext");
    goto LABEL_11;
  }
  v4 = RegistrationEngine_constructor();
  *v0 = (uint64_t)v4;
  if (!v4)
  {
    NSLog(CFSTR("%s : RegistrationEngine_constructor failed\n"), "ImageRegistrationCreateContext");
    goto LABEL_11;
  }
  v5 = dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E0C80D50], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6 = dispatch_queue_create("imageRegQueue", v5);
  v0[1] = (uint64_t)v6;
  if (!v6)
  {
    NSLog(CFSTR("%s : dispatch_queue_create failed\n"), "ImageRegistrationCreateContext");
LABEL_11:
    ImageRegistrationDestroyContext(v0);
    return 0;
  }
  return v0;
}

void ImageRegistrationDestroyContext(uint64_t *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = a1[1];
    if (v2)
      dispatch_release(v2);
    v3 = (const void *)a1[7];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)a1[8];
    if (v4)
      CFRelease(v4);
    RegistrationEngine_destructor(*a1);
    free(a1);
  }
}

uint64_t ImageRegister(unsigned __int16 ***a1, __CVBuffer *a2, __CVBuffer **a3, unsigned int a4, uint64_t a5, int a6, _DWORD *a7, void **a8, _WORD *a9, unsigned __int16 *a10, unsigned __int16 *a11, unsigned __int16 *a12, unsigned __int16 a13, unint64_t a14, unint64_t a15, const void **a16, int a17)
{
  __int128 *v18;
  uint64_t v21;
  _DWORD *v22;
  uint64_t TemplateImage;
  const void **v28;
  uint64_t v29;
  const void *v30;
  __CVBuffer *v31;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  unint64_t v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  unsigned __int8 *BaseAddressOfPlane;
  size_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  float *v44;
  unsigned __int16 **v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __CVBuffer *v51;
  uint64_t InputImage;
  unsigned __int8 *v53;
  size_t v54;
  size_t v55;
  size_t v56;
  __CVBuffer **v57;
  size_t v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  CVPixelBufferRef pixelBuffer;
  CVPixelBufferRef v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v62 = 0;
  if (!a1 || !a3)
  {
    NSLog(CFSTR("%s : NULL input parameters\n"), "ImageRegister");
    return 0xFFFFFFFFLL;
  }
  v18 = (__int128 *)a7;
  if (*((_BYTE *)a1 + 16))
  {
    if (a4)
    {
      v21 = a4;
      v22 = a7 + 8;
      do
      {
        *((_OWORD *)v22 - 2) = xmmword_1A15DFF10;
        *((_OWORD *)v22 - 1) = xmmword_1A15DFF10;
        *v22 = 1065353216;
        v22 += 9;
        --v21;
      }
      while (v21);
    }
    return 0;
  }
  if (!a4)
  {
    NSLog(CFSTR("%s : Need at least one non-reference image\n"), "ImageRegister");
    return 0xFFFFFFFFLL;
  }
  v28 = a16;
  if (CFArrayGetCount((CFArrayRef)a1[8]))
  {
    NSLog(CFSTR("%s : CFArrayGetCount(imageRegCtx->availExtraBuffers) != 0\n"), "ImageRegister");
    CFArrayRemoveAllValues((CFMutableArrayRef)a1[8]);
  }
  if (a16)
  {
    v29 = a17;
    if (a17 >= 1)
    {
      do
      {
        v30 = *v28++;
        CFArrayAppendValue((CFMutableArrayRef)a1[8], v30);
        --v29;
      }
      while (v29);
    }
  }
  v31 = *a3;
  pixelBuffer = a2;
  v64 = v31;
  if (!a2 || !v31)
  {
    NSLog(CFSTR("%s : Could not locate scratch buffers\n"), "ImageRegister");
    return 0xFFFFFFFFLL;
  }
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a2, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  if (a1[3] == (unsigned __int16 **)WidthOfPlane
    && a1[4] == (unsigned __int16 **)HeightOfPlane
    && a1[5] == (unsigned __int16 **)BytesPerRowOfPlane)
  {
    goto LABEL_37;
  }
  a1[3] = (unsigned __int16 **)WidthOfPlane;
  a1[4] = (unsigned __int16 **)HeightOfPlane;
  *((float *)a1 + 12) = (float)HeightOfPlane / (float)WidthOfPlane;
  a1[5] = (unsigned __int16 **)BytesPerRowOfPlane;
  v35 = WidthOfPlane >= HeightOfPlane ? HeightOfPlane : WidthOfPlane;
  if (v35 < 0x7E)
  {
    v36 = 0;
  }
  else
  {
    v36 = 0;
    do
    {
      ++v36;
      v37 = v35 > 0xFB;
      v35 >>= 1;
    }
    while (v37);
  }
  v38 = v36 >= 7 ? 7 : v36;
  *((_BYTE *)a1 + 16) = v36 < 2;
  if (!RegistrationEngine_init((uint64_t)*a1, WidthOfPlane, HeightOfPlane, v38 != 0, v38, WidthOfPlane, HeightOfPlane, 0, 0))
  {
LABEL_37:
    TemplateImage = CVPixelBufferLockBaseAddress(a2, 0);
    if (!(_DWORD)TemplateImage)
    {
      BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      v40 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      TemplateImage = RegistrationEngine_loadTemplateImage((uint64_t)*a1, BaseAddressOfPlane, v40, a1[1]);
      if ((_DWORD)TemplateImage)
        goto LABEL_39;
      if (a13)
      {
        TemplateImage = RegistrationEngine_loadCorners((uint64_t)*a1, a10, a11, a12, a13, a14, a15);
        if ((_DWORD)TemplateImage)
          goto LABEL_39;
      }
      TemplateImage = RegistrationEngine_detectCorners((unint64_t *)*a1, a1[1]);
      if ((_DWORD)TemplateImage)
        goto LABEL_39;
      CVPixelBufferUnlockBaseAddress(a2, 0);
      LOBYTE(v62) = 0;
      v41 = (uint64_t)*a1;
      v42 = **a1;
      v43 = *((unsigned __int16 *)*a1 + *v42 + 20128);
      if (a8)
      {
        *a9 = v43;
        memcpy(*a8, (const void *)(v41 + 1600 * *v42 + 256), 4 * v43);
        v58 = 4 * v43;
        memcpy((char *)*a8 + 1600, &(*a1)[200 * ***a1 + 2032], 4 * v43);
        if ((_DWORD)v43)
        {
          v44 = (float *)((char *)*a8 + 3200);
          v45 = &(*a1)[100 * ***a1 + 4032];
          do
          {
            v46 = *(unsigned __int16 *)v45;
            v45 = (unsigned __int16 **)((char *)v45 + 2);
            *v44++ = (float)v46;
            --v43;
          }
          while (v43);
        }
      }
      else
      {
        v58 = 4 * v43;
      }
      v47 = 0;
      v48 = a4 <= 1 ? 1 : a4;
      v60 = v48;
      v61 = (int)(a4 - 1);
      v57 = a3 + 1;
      v59 = a8 + 1;
      while (1)
      {
        if (v47 < v61)
          *(&pixelBuffer + (v47 & 1)) = v57[v47];
        v49 = v47 + 1;
        v50 = (v47 + 1) & 1;
        v51 = *(&pixelBuffer + v50);
        InputImage = CVPixelBufferLockBaseAddress(v51, 0);
        if ((_DWORD)InputImage)
          break;
        *(_BYTE *)((unint64_t)&v62 | v50) = 1;
        v53 = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(v51, 0);
        v54 = CVPixelBufferGetBytesPerRowOfPlane(v51, 0);
        InputImage = RegistrationEngine_loadInputImage((uint64_t)*a1, v53, v54, a1[1]);
        if ((_DWORD)InputImage)
          break;
        if (a6)
        {
          v55 = CVPixelBufferGetWidthOfPlane(v51, 0);
          v56 = CVPixelBufferGetHeightOfPlane(v51, 0);
          GeomTransform_adjustfromUnitySize((uint64_t)v18, v18, v55, v56, 1);
        }
        InputImage = RegistrationEngine_execute(*a1, a6, v18);
        if ((_DWORD)InputImage)
          break;
        CVPixelBufferUnlockBaseAddress(v51, 0);
        *(_BYTE *)((unint64_t)&v62 | v50) = 0;
        GeomTransform_get3x3Matrix((uint64_t)(*a1)[3], (float *)v18, (unint64_t)a1[3], (unint64_t)a1[4], 1);
        if (a8)
        {
          memcpy(v59[v47], (char *)*a1 + 44276, v58);
          memcpy((char *)v59[v47] + 1600, (char *)*a1 + 45876, v58);
          memcpy((char *)v59[v47] + 3200, (char *)*a1 + 54676, v58);
        }
        v18 = (__int128 *)((char *)v18 + 36);
        ++v47;
        if (v60 == v49)
        {
          TemplateImage = 0;
          goto LABEL_68;
        }
      }
      TemplateImage = InputImage;
LABEL_68:
      if ((_BYTE)v62)
LABEL_39:
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    }
  }
  else
  {
    TemplateImage = 0xFFFFFFFFLL;
  }
  if (HIBYTE(v62))
    CVPixelBufferUnlockBaseAddress(v64, 0);
  CFDictionaryRemoveAllValues((CFMutableDictionaryRef)a1[7]);
  CFArrayRemoveAllValues((CFMutableArrayRef)a1[8]);
  return TemplateImage;
}

unint64_t *RansacEngine_constructor(unint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  size_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;

  v4 = (unint64_t *)malloc_type_calloc(0x68uLL, 1uLL, 0xDC30CF9BuLL);
  v5 = v4;
  if (!v4)
    goto LABEL_15;
  *v4 = a1;
  v4[1] = (unint64_t)malloc_type_calloc(8 * a1, 1uLL, 0x271E4151uLL);
  v5[2] = (unint64_t)malloc_type_calloc(8 * *v5, 1uLL, 0xBB73F235uLL);
  v5[4] = (unint64_t)malloc_type_calloc(4 * a1, 1uLL, 0xA2616716uLL);
  v5[5] = (unint64_t)malloc_type_calloc(4 * a1, 1uLL, 0xFFEB1C7uLL);
  v5[6] = (unint64_t)malloc_type_calloc(4 * a1, 1uLL, 0xF4676D45uLL);
  v6 = 2 * a1;
  v5[7] = (unint64_t)malloc_type_calloc(v6, 1uLL, 0x86CA49A9uLL);
  v7 = GeomTransform_constructor(0, a2);
  v5[9] = (unint64_t)v7;
  if (!v5[1])
    goto LABEL_15;
  if (v5[2]
    && v5[4]
    && v5[5]
    && v5[6]
    && v5[7]
    && v7
    && (v5[11] = (unint64_t)malloc_type_calloc(v6, 1uLL, 0xD8F0A2D5uLL),
        v8 = GeomTransform_constructor(2u, a2),
        v5[10] = (unint64_t)v8,
        v5[11])
    && v8)
  {
    *((_DWORD *)v5 + 6) = 0;
    if (*v5)
    {
      v9 = 0;
      v10 = v5[1];
      do
      {
        *(_QWORD *)(v10 + 8 * v9) = v9;
        ++v9;
      }
      while (v9 < *v5);
    }
  }
  else
  {
LABEL_15:
    RansacEngine_destructor(v5);
    return 0;
  }
  return v5;
}

void RansacEngine_destructor(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (a1)
  {
    v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0;
    }
    v3 = (void *)a1[2];
    if (v3)
    {
      free(v3);
      a1[2] = 0;
    }
    v4 = (void *)a1[4];
    if (v4)
    {
      free(v4);
      a1[4] = 0;
    }
    v5 = (void *)a1[5];
    if (v5)
    {
      free(v5);
      a1[5] = 0;
    }
    v6 = (void *)a1[6];
    if (v6)
    {
      free(v6);
      a1[6] = 0;
    }
    v7 = (void *)a1[7];
    if (v7)
    {
      free(v7);
      a1[7] = 0;
    }
    v8 = (void *)a1[9];
    if (v8)
    {
      GeomTransform_destructor(v8);
      a1[9] = 0;
    }
    v9 = (void *)a1[11];
    if (v9)
    {
      free(v9);
      a1[11] = 0;
    }
    v10 = (void *)a1[10];
    if (v10)
      GeomTransform_destructor(v10);
    free(a1);
  }
}

void RansacEngine_init(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = 0;
  bzero(*(void **)(a1 + 8), 8 * *(_QWORD *)a1);
  bzero(*(void **)(a1 + 16), 8 * *(_QWORD *)a1);
  bzero(*(void **)(a1 + 32), 4 * *(_QWORD *)a1);
  bzero(*(void **)(a1 + 40), 4 * *(_QWORD *)a1);
  bzero(*(void **)(a1 + 48), 4 * *(_QWORD *)a1);
  bzero(*(void **)(a1 + 56), 2 * *(_QWORD *)a1);
  bzero(*(void **)(a1 + 88), 2 * *(_QWORD *)a1);
}

void RansacEngine_findInliers(uint64_t a1, float *a2, uint64_t a3, unsigned __int16 *a4, float *a5, float *a6, const float *a7, const float *a8, float a9, int a10, int a11)
{
  unsigned __int16 v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  GeomTransform_dirs(a2, *(float **)(a1 + 32), *(float **)(a1 + 40), a5, a6, (unsigned __int16)a10);
  vDSP_vpythg(a7, 1, a8, 1, *(const float **)(a1 + 32), 1, *(const float **)(a1 + 40), 1, *(float **)(a1 + 48), 1, a10);
  if (a11 < 1)
  {
    v18 = 0;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a1 + 48);
    do
    {
      v21 = *(_QWORD *)(v19 + 8 * v17);
      if (*(float *)(v20 + 4 * v21) < a9)
        *(_WORD *)(a3 + 2 * v18++) = v21;
      ++v17;
    }
    while (a11 > v17);
  }
  *a4 = v18;
}

uint64_t RansacEngine_execute(uint64_t a1, uint64_t a2, void *a3, float *a4, float *a5, const float *a6, const float *a7, const float *__C, float a9, vDSP_Length __N)
{
  uint64_t v18;
  vDSP_Length *v19;
  vDSP_Length v20;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  unsigned int v25;
  int v26;
  vDSP_Length *v27;
  vDSP_Length v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  vDSP_Length *v32;
  _DWORD *v33;
  int v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v41;
  unsigned __int16 v42;
  int v43;
  int v44;
  uint64_t v46;
  int v47;
  float *v49;
  const float *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  int v54;
  unsigned __int16 v55[4];
  uint64_t v56;

  v18 = (unsigned __int16)__N;
  v56 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 24) = 0;
  v19 = *(vDSP_Length **)(a1 + 8);
  if (*(_QWORD *)a1)
  {
    v20 = 0;
    do
    {
      v19[v20] = v20;
      ++v20;
    }
    while (v20 < *(_QWORD *)a1);
  }
  vDSP_vsorti(__C, v19, 0, (unsigned __int16)__N, -1);
  if ((__int16)__N < 1)
    return 0;
  while (__C[*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v18 - 1))] <= 0.3)
  {
    if (v18-- <= 1)
      return 0;
  }
  if ((unsigned __int16)v18 < 5u)
    return 0;
  v46 = a2;
  v49 = a4;
  v50 = a7;
  GeomTransform_setModel(*(_QWORD *)(a1 + 72), 0);
  GeomTransform_setModel(*(_QWORD *)(a1 + 80), 2);
  v22 = 0;
  v23 = *(_QWORD *)(a1 + 16);
  do
  {
    *(_QWORD *)(v23 + 8 * v22) = v22;
    ++v22;
  }
  while (v18 != v22);
  v47 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v51 = (unsigned __int16 *)(a1 + 64);
  v53 = 1000;
  do
  {
    v27 = *(vDSP_Length **)(a1 + 16);
    if (v26 > (int)v18 - 4)
    {
      v28 = 0;
      do
      {
        v27[v28] = v28;
        ++v28;
      }
      while (v18 != v28);
      v29 = *(_DWORD *)(a1 + 24);
      if (v29 > 999 - (int)v18)
      {
        v29 = 0;
        *(_DWORD *)(a1 + 24) = 0;
      }
      vDSP_vsorti(&kRandNumbers[v29], v27, 0, v18, -1);
      v26 = 0;
      ++*(_DWORD *)(a1 + 24);
      v27 = *(vDSP_Length **)(a1 + 16);
    }
    v30 = 0;
    v31 = *(_QWORD *)(a1 + 8);
    v54 = v26;
    v32 = &v27[v26];
    do
    {
      v55[v30] = *(_QWORD *)(v31 + 8 * v32[v30]);
      ++v30;
    }
    while (v30 != 4);
    v33 = *(_DWORD **)(a1 + 72);
    v34 = GeomTransform_minSupportPoints(v33);
    GeomTransform_estimate((uint64_t)v33, (uint64_t)a6, (uint64_t)v50, (uint64_t)v49, (uint64_t)a5, v55, v34);
    RansacEngine_findInliers(a1, *(float **)(a1 + 72), *(_QWORD *)(a1 + 56), v51, v49, a5, a6, v50, a9, (unsigned __int16)__N, v18);
    v35 = *(_DWORD **)(a1 + 80);
    v52 = **(_DWORD **)(a1 + 72);
    v36 = GeomTransform_minSupportPoints(v35);
    GeomTransform_estimate((uint64_t)v35, (uint64_t)a6, (uint64_t)v50, (uint64_t)v49, (uint64_t)a5, v55, v36);
    RansacEngine_findInliers(a1, *(float **)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int16 *)(a1 + 96), v49, a5, a6, v50, a9, (unsigned __int16)__N, v18);
    v37 = *(unsigned __int16 *)(a1 + 96);
    v38 = *(unsigned __int16 *)(a1 + 64);
    if (v37 <= v38)
    {
      v39 = v52;
    }
    else
    {
      memcpy(*(void **)(a1 + 56), *(const void **)(a1 + 88), 2 * v37);
      v38 = *(unsigned __int16 *)(a1 + 96);
      *(_WORD *)(a1 + 64) = v38;
      v39 = **(_DWORD **)(a1 + 80);
    }
    if (v38 > v24)
    {
      memcpy(a3, *(const void **)(a1 + 56), 2 * v38);
      v53 = GeomTransform_numTestsToDo(*(_DWORD **)(a1 + 72), v38, (unsigned __int16)v18);
      v24 = v38;
      v47 = v39;
    }
    if ((int)(v25 + 1) >= v53)
      break;
    v26 = v54 + 1;
  }
  while (v25++ < 0x3E7);
  GeomTransform_setModel(*(_QWORD *)(a1 + 72), v47);
  GeomTransform_setModel(v46, v47);
  if (v24 < 4u)
    return 0;
  if (GeomTransform_estimate(*(_QWORD *)(a1 + 72), (uint64_t)a6, (uint64_t)v50, (uint64_t)v49, (uint64_t)a5, (unsigned __int16 *)a3, v24) == -1)
  {
LABEL_35:
    syslog(3, "GeomTransform_estimate failed");
    return 0;
  }
  GeomTransform_deepCopy(v46, *(_QWORD *)(a1 + 72));
  RansacEngine_findInliers(a1, *(float **)(a1 + 72), *(_QWORD *)(a1 + 56), v51, v49, a5, a6, v50, a9, (unsigned __int16)__N, v18);
  v41 = *(unsigned __int16 *)(a1 + 64);
  if (v41 > v24)
  {
    while (1)
    {
      v42 = v41;
      v43 = (unsigned __int16)v41;
      memcpy(a3, *(const void **)(a1 + 56), 2 * (unsigned __int16)v41);
      GeomTransform_deepCopy(v46, *(_QWORD *)(a1 + 72));
      v44 = v43;
      v24 = v42;
      if (GeomTransform_estimate(*(_QWORD *)(a1 + 72), (uint64_t)a6, (uint64_t)v50, (uint64_t)v49, (uint64_t)a5, (unsigned __int16 *)a3, v44) == -1)break;
      RansacEngine_findInliers(a1, *(float **)(a1 + 72), *(_QWORD *)(a1 + 56), v51, v49, a5, a6, v50, a9, (unsigned __int16)__N, v18);
      v41 = *(unsigned __int16 *)(a1 + 64);
      if (v41 <= v42)
        return v24;
    }
    goto LABEL_35;
  }
  return v24;
}

unsigned __int16 *Pyramid_constructor(unint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;

  v8 = (unsigned __int16 *)malloc_type_calloc(0x330uLL, 1uLL, 0x47324CA0uLL);
  v9 = v8;
  if (!v8)
  {
LABEL_26:
    Pyramid_destructor((char *)v9);
    return 0;
  }
  *v8 = a3;
  if (a4 >= 9)
    v10 = 9;
  else
    v10 = a4;
  v8[1] = v10;
  v8[2] = v10 - a3 + 1;
  v8[4] = 26;
  v8[3] = a3;
  *((_QWORD *)v8 + 42) = a1;
  *((_QWORD *)v8 + 52) = a2;
  if (v10)
  {
    v11 = (unint64_t *)(v8 + 212);
    v12 = a4;
    if (a4 >= 9uLL)
      v12 = 9;
    do
    {
      a1 >>= 1;
      *(v11 - 10) = a1;
      a2 >>= 1;
      *v11++ = a2;
      --v12;
    }
    while (v12);
  }
  v13 = 0;
  v14 = a4;
  if (a4 >= 9uLL)
    v14 = 9;
  v15 = 8 * v14 + 8;
  do
  {
    v16 = &v8[v13 / 2];
    *((_QWORD *)v16 + 32) = *(_QWORD *)&v8[v13 / 2 + 208] + 52;
    *((_QWORD *)v16 + 22) = *(_QWORD *)&v8[v13 / 2 + 168] + 52;
    v13 += 8;
  }
  while (v15 != v13);
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  if (v10 >= a3)
  {
    do
    {
      v17 = &v9[4 * (unsigned __int16)a3];
      v19 = *((_QWORD *)v17 + 22);
      v18 = v17 + 88;
      v20 = malloc_type_calloc(v18[10] * v19, 1uLL, 0x8B2076A2uLL);
      *(v18 - 20) = v20;
      bzero(v20, v18[10] * *v18);
      v21 = *(v18 - 20);
      if (!v21)
        goto LABEL_26;
      *(_QWORD *)&v9[4 * (unsigned __int16)a3 + 48] = v21 + v9[4] + *v18 * v9[4];
      LOWORD(a3) = a3 + 1;
      v10 = v9[1];
    }
    while (v10 >= (unsigned __int16)a3);
  }
  v22 = v10;
  v23 = &v9[4 * v10];
  v24 = *((_QWORD *)v23 + 52);
  v25 = v24 >> 1;
  *((_QWORD *)v23 + 62) = v24 >> 1;
  *((_QWORD *)v23 + 72) = v24 - (v24 >> 1);
  if (v10)
  {
    v26 = v10 + 1;
    v27 = &v9[4 * v22 + 204];
    do
    {
      v28 = *(_QWORD *)v27 - 2 * v25;
      v25 *= 2;
      *((_QWORD *)v27 + 10) = v25;
      *((_QWORD *)v27 + 20) = v28;
      --v26;
      v27 -= 4;
    }
    while (v26 > 1);
  }
  v29 = *v9;
  if (*v9)
  {
    v30 = v9 + 328;
    v31 = *v9;
    do
    {
      *v30 = 0;
      v30[10] = 0;
      ++v30;
      --v31;
    }
    while (v31);
  }
  if (v29 <= v22)
  {
    v32 = v22 - v29 + 1;
    v33 = &v9[4 * v29];
    do
    {
      *((_QWORD *)v33 + 82) = 0;
      *((_QWORD *)v33 + 92) = (*((_QWORD *)v33 + 62) + 26) * *((_QWORD *)v33 + 22);
      v33 += 4;
      --v32;
    }
    while (v32);
  }
  return v9;
}

void Pyramid_destructor(char *a1)
{
  uint64_t i;
  void *v3;

  if (a1)
  {
    for (i = 16; i != 96; i += 8)
    {
      v3 = *(void **)&a1[i];
      if (v3)
      {
        free(v3);
        *(_QWORD *)&a1[i] = 0;
      }
    }
    free(a1);
  }
}

uint64_t Pyramid_loadImage(unsigned __int16 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, NSObject *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  size_t v26;
  uint64_t v27;
  char *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD block[6];
  _QWORD v35[6];
  _QWORD v36[7];
  int v37;
  int v38;

  v8 = *((_QWORD *)a1 + 42);
  v9 = *((_QWORD *)a1 + 52);
  if (v8 == a4 && v9 == a5)
  {
    LODWORD(v17) = *a1;
    if (v17 >= 2)
    {
      v18 = 0;
      do
      {
        ++v18;
        v19 = &a1[4 * v18];
        filterSubsampling1channel(a2, *((_QWORD *)v19 + 42), *((_QWORD *)v19 + 52), a3, 0, 0, (uint64_t)a2, a3, a6, a7);
        if (v18 == a1[3])
        {
          v20 = *((_DWORD *)v19 + 104);
          if (v20 >= 1)
          {
            v21 = *((_QWORD *)v19 + 42);
            v22 = *((_QWORD *)v19 + 22);
            v23 = (char *)(*(_QWORD *)&a1[4 * v18 + 8] + a1[4] + a1[4] * v22);
            v24 = a2;
            do
            {
              memcpy(v23, v24, v21);
              v23 += v22;
              v24 += a3;
              --v20;
            }
            while (v20);
          }
        }
        a6 = 0;
        v17 = *a1;
        a7 = 0;
      }
      while (v18 < v17 - 1);
      a7 = 0;
    }
    if (!(_DWORD)v17 || !a1[3])
    {
      v25 = *((_DWORD *)a1 + 104);
      if (v25 >= 1)
      {
        v26 = *((_QWORD *)a1 + 42);
        v27 = *((_QWORD *)a1 + 22);
        v28 = (char *)(*((_QWORD *)a1 + 2) + a1[4] + a1[4] * v27);
        v29 = &a2[a7 * a3 + a6];
        do
        {
          memcpy(v28, v29, v26);
          v28 += v27;
          v29 += a3;
          --v25;
        }
        while (v25);
      }
    }
    v30 = MEMORY[0x1E0C809B0];
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 0x40000000;
    v36[2] = __Pyramid_loadImage_block_invoke;
    v36[3] = &__block_descriptor_tmp_0;
    v36[4] = a1;
    v36[5] = a2;
    v36[6] = a3;
    v37 = a6;
    v38 = a7;
    if (a8)
    {
      v31 = *a1;
      if (*a1)
      {
        v32 = a1 + 248;
        do
        {
          v32[30] = *v32 * a3;
          ++v32;
          --v31;
        }
        while (v31);
      }
      block[5] = a1;
      v35[0] = v30;
      v35[1] = 0x40000000;
      v35[2] = __Pyramid_loadImage_block_invoke_2;
      v35[3] = &unk_1E4541D60;
      v35[4] = v36;
      v35[5] = a1;
      block[0] = v30;
      block[1] = 0x40000000;
      block[2] = __Pyramid_loadImage_block_invoke_3;
      block[3] = &unk_1E4541D88;
      block[4] = v36;
      dispatch_async(a8, block);
      dispatch_async(a8, v35);
      dispatch_barrier_sync(a8, &__block_literal_global_0);
    }
    else
    {
      __Pyramid_loadImage_block_invoke((unsigned __int8 *)v36, (uint64_t)(a1 + 208), (uint64_t)(a1 + 328), a1[4], a1[4]);
    }
    return 0;
  }
  else
  {
    syslog(3, "Pyramid_loadImage: incompatible size in pyramid (%lu!=%lu) or (%lu!=%lu)", a4, v8, a5, v9);
    return 0xFFFFFFFFLL;
  }
}

unsigned __int8 *filterSubsampling1channel(unsigned __int8 *result, unint64_t a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint8x8_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint8x8_t *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  const char *v23;
  const char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int8x8x2_t v32;
  int8x8x2_t v33;

  if (a3 >= 1)
  {
    v10 = 0;
    v11 = 2 * a8;
    v12 = a2 >> 3;
    v13 = (uint8x8_t *)&result[a6 * a4 + a5];
    v14 = a10 * a8;
    v15 = (unsigned __int8 *)(a7 + v14 + a9);
    v16 = a7 + a8 + v14;
    v17 = (unsigned __int8 *)(a7 + v14);
    if (a2 >> 3 <= 1)
      v12 = 1;
    while (1)
    {
      result = v17;
      v18 = v16;
      v19 = v12;
      v20 = v13;
      if (a2 >= 8)
        break;
      v21 = &v15[a8];
      v20 = v13;
      v22 = v15;
      if ((a2 & 7) != 0)
        goto LABEL_9;
LABEL_11:
      v13 = (uint8x8_t *)((char *)v13 + a4);
      v15 += v11;
      ++v10;
      v16 += v11;
      v17 += v11;
      if (v10 == a3)
        return result;
    }
    do
    {
      v23 = (const char *)(v18 + a9);
      v24 = (const char *)&result[a9];
      v32 = vld2_s8(v24);
      v33 = vld2_s8(v23);
      *v20++ = vqmovn_u16(vrshrq_n_u16(vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v32.val[0], (uint8x8_t)v32.val[1]), (uint8x8_t)v33.val[1]), (uint8x8_t)v33.val[0]), 2uLL));
      v18 += 16;
      result += 16;
      --v19;
    }
    while (v19);
    v21 = (unsigned __int8 *)(v18 + a9);
    v22 = &result[a9];
    if ((a2 & 7) == 0)
      goto LABEL_11;
LABEL_9:
    result = v21 + 1;
    v25 = v22 + 1;
    v26 = a2 & 7;
    do
    {
      v27 = *(v25 - 1);
      v29 = *v25;
      v25 += 2;
      v28 = v29;
      v30 = *(result - 1);
      v31 = *result;
      result += 2;
      v20->i8[0] = (v27 + v28 + v30 + v31 + 2) >> 2;
      v20 = (uint8x8_t *)((char *)v20 + 1);
      --v26;
    }
    while (v26);
    goto LABEL_11;
  }
  return result;
}

_QWORD *RegistrationEngine_constructor()
{
  _QWORD *v0;
  void **v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t *v6;

  v0 = malloc_type_calloc(1uLL, 0xDF20uLL, 0x10A004046220CB8uLL);
  if (!v0)
    goto LABEL_9;
  v1 = GeomTransformShared_constructor();
  v0[2] = v1;
  v2 = GeomTransform_constructor(2u, (uint64_t)v1);
  v0[3] = v2;
  if (!v2)
    goto LABEL_9;
  v0[4] = GeomTransform_constructor(0, v0[2]);
  v3 = GeomTransform_constructor(0, v0[2]);
  v0[5] = v3;
  if (!v0[4])
    goto LABEL_9;
  if (v3
    && (v4 = GeomTransform_constructor(0, v0[2]), (v0[6] = v4) != 0)
    && (FeatureMatcher_constructor(), (v0[7136] = v5) != 0)
    && (v6 = RansacEngine_constructor(0x190uLL, v0[2]), (v0[7137] = v6) != 0))
  {
    *((_BYTE *)v0 + 57112) = 0;
  }
  else
  {
LABEL_9:
    RegistrationEngine_destructor((uint64_t)v0);
    return 0;
  }
  return v0;
}

void RegistrationEngine_destructor(uint64_t a1)
{
  RegistrationEngine_purgeResources(a1);
  if (a1)
  {
    *(_BYTE *)(a1 + 57112) = 0;
    RansacEngine_destructor(*(_QWORD **)(a1 + 57096));
    GeomTransform_destructor(*(void **)(a1 + 57088));
    GeomTransform_destructor(*(void **)(a1 + 40));
    GeomTransform_destructor(*(void **)(a1 + 24));
    GeomTransform_destructor(*(void **)(a1 + 32));
    GeomTransform_destructor(*(void **)(a1 + 48));
    GeomTransformShared_destructor(*(void ***)(a1 + 16));
    bzero((void *)a1, 0xDF20uLL);
    free((void *)a1);
  }
}

void RegistrationEngine_purgeResources(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v2 = (_QWORD *)(a1 + 57080);
    *(_BYTE *)(a1 + 57112) = 0;
    IPDetector_destructor(*(_QWORD **)(a1 + 57080));
    *v2 = 0;
    Pyramid_destructor(*(char **)a1);
    *(_QWORD *)a1 = 0;
    Pyramid_destructor(*(char **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
    Digest_destructor(*(void **)(a1 + 184));
    *(_QWORD *)(a1 + 184) = 0;
    Digest_destructor(*(void **)(a1 + 192));
    *(_QWORD *)(a1 + 192) = 0;
    DigestShared_destructor(*(_QWORD **)(a1 + 176));
    v3 = 0;
    *(_QWORD *)(a1 + 176) = 0;
    v4 = a1 + 56;
    do
    {
      GeomTransform_destructor(*(void **)(v4 + v3));
      *(_QWORD *)(v4 + v3) = 0;
      v3 += 8;
    }
    while (v3 != 80);
  }
}

uint64_t RegistrationEngine_init(uint64_t a1, unint64_t a2, unint64_t a3, int a4, int a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9)
{
  _QWORD *v16;
  uint64_t v17;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t i;
  float *v23;
  float *v24;
  float v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v16 = (_QWORD *)a1;
  *(_BYTE *)(a1 + 57112) = 0;
  if (*(_QWORD *)(a1 + 200) == a2
    && *(_QWORD *)(a1 + 208) == a3
    && *(_DWORD *)(a1 + 248) == a4
    && *(_DWORD *)(a1 + 252) == a5
    && *(_QWORD *)(a1 + 216) == a6
    && *(_QWORD *)(a1 + 224) == a7
    && *(_QWORD *)(a1 + 232) == a8
    && *(_QWORD *)(a1 + 240) == a9
    && *(_QWORD *)(a1 + 57080)
    && *(_QWORD *)a1
    && *(_QWORD *)(a1 + 8)
    && *(_QWORD *)(a1 + 176)
    && *(_QWORD *)(a1 + 184)
    && *(_QWORD *)(a1 + 192)
    && *(_QWORD *)(a1 + 56))
  {
    v17 = 0;
    while (v17 != 9)
    {
      if (!*(_QWORD *)(a1 + 64 + 8 * v17++))
      {
        if ((unint64_t)(v17 - 1) > 8)
          return 0;
        goto LABEL_21;
      }
    }
    return 0;
  }
LABEL_21:
  v36 = (_QWORD *)(a1 + 57080);
  RegistrationEngine_purgeResources(a1);
  v16[25] = a2;
  v16[26] = a3;
  v16[29] = a8;
  v16[30] = a9;
  v16[27] = a6;
  v16[28] = a7;
  v19 = Pyramid_constructor(a6, a7, (unsigned __int16)a4, (unsigned __int16)a5);
  *v16 = v19;
  if (v19)
  {
    v20 = Pyramid_constructor(v16[27], v16[28], (unsigned __int16)a4, (unsigned __int16)a5);
    v16[1] = v20;
    if (v20)
    {
      v35 = a8;
      v21 = 42;
      for (i = 136; i != 176; i += 4)
      {
        Norm_constructor(*(_QWORD *)(*v16 + v21 * 8), *(_QWORD *)(*v16 + v21 * 8 + 80));
        v16[v21 - 35] = v23;
        if (!v23)
        {
          v33 = 4294967293;
          goto LABEL_47;
        }
        v24 = v23;
        v37 = 0;
        v38 = 0;
        Norm_dir(v23, (float *)&v38 + 1, (float *)&v38, 0.0, 0.0);
        Norm_dir(v24, (float *)&v37 + 1, (float *)&v37, 1.0, 1.0);
        v25 = *((float *)&v37 + 1) - *((float *)&v38 + 1);
        if ((float)(*((float *)&v37 + 1) - *((float *)&v38 + 1)) <= (float)(*(float *)&v37 - *(float *)&v38))
          v25 = *(float *)&v37 - *(float *)&v38;
        *(float *)((char *)v16 + i) = v25;
        ++v21;
      }
      v26 = IPDetector_constructor(*(_QWORD *)(*v16 + 8 * a4 + 336), *(_QWORD *)(*v16 + 8 * a4 + 256), *(_QWORD *)(*v16 + 8 * a4 + 176));
      *v36 = v26;
      if (v26)
      {
        v27 = DigestShared_constructor(*(_QWORD *)(*v16 + 8 * a4 + 336), *(_QWORD *)(*v16 + 8 * a4 + 416));
        v16[22] = v27;
        if (v27)
        {
          v28 = a5 - 2;
          v29 = Digest_constructor(*(_QWORD *)(*v16 + 8 * v28 + 336), *(_QWORD *)(*v16 + 8 * v28 + 416), (uint64_t)v27);
          v16[23] = v29;
          if (v29)
          {
            v30 = Digest_constructor(*(_QWORD *)(*v16 + 8 * v28 + 336), *(_QWORD *)(*v16 + 8 * v28 + 416), v16[22]);
            v16[24] = v30;
            if (v30)
            {
              if (a6 <= a7)
                v31 = a7;
              else
                v31 = a6;
              if (a2 <= a3)
                v32 = a3;
              else
                v32 = a2;
              *(float *)&v39 = (float)v31 / (float)v32;
              DWORD1(v39) = 0x80000000;
              *((float *)&v39 + 2) = (float)((float)((float)a6 + (float)((float)v35 * 2.0)) - (float)a2) / (float)v32;
              HIDWORD(v39) = 0;
              v40 = *(float *)&v39;
              v41 = (float)((float)((float)a7 + (float)((float)a9 * 2.0)) - (float)a3) / (float)v32;
              v42 = 0;
              GeomTransform_setParams(v16[6], &v39);
              v16 = 0;
              v33 = 0;
            }
            else
            {
              v33 = 4294967289;
            }
          }
          else
          {
            v33 = 4294967290;
          }
        }
        else
        {
          v33 = 4294967291;
        }
      }
      else
      {
        v33 = 4294967292;
      }
    }
    else
    {
      v33 = 4294967294;
    }
  }
  else
  {
    v33 = 0xFFFFFFFFLL;
  }
LABEL_47:
  RegistrationEngine_purgeResources((uint64_t)v16);
  return v33;
}

uint64_t RegistrationEngine_loadCorners(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned int a5, unint64_t a6, unint64_t a7)
{
  char *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  uint64_t result;

  v7 = (char *)(a1 + 57112);
  v8 = a1 + 40256;
  v9 = IPDetector_selectCorners(*(_QWORD *)(a1 + 57080), a1 + 256, a1 + 16256, a1 + 32256, a2, a3, a4, a5, a6, a7, *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), 0x14uLL, 0x14uLL);
  v10 = v9;
  if (v9 > 5)
  {
    result = 0;
    *(_WORD *)v8 = v10;
    *(_QWORD *)(v8 + 16848) = v10;
    v11 = 1;
  }
  else
  {
    printf("WARNING: insufficient number of external corners provided (only %hu corners provided but minumum is %d)\n", v9, 6);
    v11 = 0;
    result = 0xFFFFFFFFLL;
  }
  *v7 = v11;
  return result;
}

uint64_t RegistrationEngine_loadTemplateImage(uint64_t a1, unsigned __int8 *a2, uint64_t a3, NSObject *a4)
{
  return Pyramid_loadImage(*(unsigned __int16 **)a1, a2, a3, *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), a4);
}

uint64_t RegistrationEngine_loadInputImage(uint64_t a1, unsigned __int8 *a2, uint64_t a3, NSObject *a4)
{
  return Pyramid_loadImage(*(unsigned __int16 **)(a1 + 8), a2, a3, *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), a4);
}

uint64_t RegistrationEngine_detectCorners(unint64_t *a1, NSObject *a2)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v14;
  unsigned __int16 *v15;
  float *v16;
  float *v17;

  v2 = *a1;
  v3 = *(unsigned __int16 *)(*a1 + 2);
  v4 = *(unsigned __int16 *)*a1;
  if (v3 >= v4)
  {
    v6 = a1 + 7135;
    v16 = (float *)(a1 + 2032);
    v17 = (float *)(a1 + 32);
    v15 = (unsigned __int16 *)(a1 + 4032);
    do
    {
      v7 = &a1[200 * v3];
      v8 = v2 + 8 * v3;
      v9 = &a1[100 * v3];
      if ((int)v3 <= 1 && *((_BYTE *)v6 + 32))
      {
        v10 = v3;
        v14 = vcvtas_u32_f32((float)(1.0 / powf(1.25, (float)(int)(v3 - v4))) * 20.0);
        v11 = IPDetector_distributeCorners(*v6, (uint64_t)(v7 + 32), (uint64_t)(v7 + 2032), (uint64_t)(v9 + 4032), v17, v16, v15, *((unsigned __int16 *)v6 + 12), a1[27], a1[28], *(_QWORD *)(v8 + 336), *(_QWORD *)(v8 + 416), v14, v14);
      }
      else
      {
        v10 = v3;
        v11 = IPDetector_execute(*v6, (uint64_t)(v7 + 32), (uint64_t)(v7 + 2032), (uint64_t)(v9 + 4032), 0x190u, *(_QWORD *)(v8 + 16), 26, *(_QWORD *)(v8 + 336), *(_QWORD *)(v8 + 416), *(_QWORD *)(v8 + 176), a2);
      }
      *((_WORD *)a1 + v10 + 20128) = v11;
      v2 = *a1;
      v4 = *(unsigned __int16 *)*a1;
    }
    while ((int)v3-- > v4);
  }
  return 0;
}

uint64_t RegistrationEngine_oneLevel(uint64_t a1, int a2)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  uint64_t result;
  uint64_t v19;
  vDSP_Length __N;
  float *v21;
  float *v22;

  v4 = (float *)(a1 + 40276);
  v5 = a1 + 1600 * a2;
  memcpy((void *)(a1 + 40276), (const void *)(v5 + 256), 0x640uLL);
  memcpy((void *)(a1 + 41876), (const void *)(v5 + 16256), 0x640uLL);
  memcpy((void *)(a1 + 43476), (const void *)(a1 + 800 * a2 + 32256), 0x320uLL);
  v6 = *(unsigned __int16 *)(a1 + 2 * a2 + 40256);
  v7 = kRegistrationMinNumInliers[a2];
  if (v6 < v7)
    return 0;
  v8 = a1 + 8 * a2;
  Norm_dirs(*(float **)(v8 + 56), (float *)(a1 + 48276), (float *)(a1 + 49876), v4, (float *)(a1 + 41876), v6);
  GeomTransform_invs(*(float **)(a1 + 32), (float *)(a1 + 51476), (float *)(a1 + 53076), (float *)(a1 + 48276), (float *)(a1 + 49876), v6);
  v21 = (float *)(a1 + 53076);
  Norm_invs(*(float **)(v8 + 56), (float *)(a1 + 44276), (float *)(a1 + 45876), (float *)(a1 + 51476), (float *)(a1 + 53076), v6);
  v22 = (float *)(a1 + 51476);
  if ((_DWORD)v6)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(float *)(a1 + 44276 + 4 * v9);
      if (v11 >= 10.0 && v11 < (float)(unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8 * a2 + 336) - 10))
      {
        v12 = *(float *)(a1 + 45876 + 4 * v9);
        if (v12 >= 10.0 && v12 < (float)(unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8 * a2 + 416) - 10))
        {
          v13 = a1 + 2 * v10++;
          *(_WORD *)(v13 + 47476) = v9;
        }
      }
      ++v9;
    }
    while (v6 != v9);
    if (v10 >= 1)
    {
      v14 = 0;
      v15 = v4;
      do
      {
        v16 = *(unsigned __int16 *)(a1 + 47476 + 2 * v14);
        if (v14 != v16)
        {
          v17 = (float *)(a1 + 4 * v16);
          v15[1000] = v17[11069];
          v15[2800] = v17[12869];
          v15[1400] = v17[11469];
          v15[3200] = v17[13269];
          *v15 = v17[10069];
          v15[2000] = v17[12069];
          v15[400] = v17[10469];
          v15[2400] = v17[12469];
        }
        ++v14;
        ++v15;
      }
      while (v10 != v14);
    }
  }
  else
  {
    LOWORD(v10) = 0;
  }
  if (v7 > (unsigned __int16)v10)
    return 0;
  v19 = *(_QWORD *)(a1 + 8) + 8 * a2;
  FeatureMatcher_execute(*(_QWORD *)(a1 + 57088), v4, (float *)(a1 + 41876), (float *)(a1 + 44276), (float *)(a1 + 45876), (float *)(a1 + 54676), (unsigned __int16)v10, *(_QWORD *)(*(_QWORD *)a1 + 8 * a2 + 96), *(_QWORD *)(*(_QWORD *)a1 + 8 * a2 + 176), *(_QWORD *)(v19 + 96), *(_QWORD *)(v19 + 176), 2u);
  Norm_dirs(*(float **)(v8 + 56), v22, v21, (float *)(a1 + 44276), (float *)(a1 + 45876), (unsigned __int16)v10);
  GeomTransform_deepCopy(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  LOWORD(__N) = v10;
  result = RansacEngine_execute(*(_QWORD *)(a1 + 57096), *(_QWORD *)(a1 + 32), (void *)(a1 + 56276), v22, v21, (const float *)(a1 + 48276), (const float *)(a1 + 49876), (const float *)(a1 + 54676), *(float *)(a1 + 4 * a2 + 136), __N);
  *(_WORD *)(a1 + 57076) = result;
  if (result <= v7)
  {
    GeomTransform_deepCopy(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    return *(unsigned __int16 *)(a1 + 57076);
  }
  return result;
}

uint64_t RegistrationEngine_execute(unsigned __int16 **a1, int a2, __int128 *a3)
{
  unsigned __int16 *v4;
  int v5;
  unsigned int v7;
  uint64_t v8;

  v4 = (unsigned __int16 *)a1 + 28538;
  *((_WORD *)a1 + 28538) = 0;
  if (a2)
  {
    GeomTransform_setParams((uint64_t)a1[3], a3);
    GeomTransform_setParams((uint64_t)a1[4], (__int128 *)(a1[3] + 18));
  }
  else
  {
    GeomTransform_eye((uint64_t)a1[4]);
    GeomTransform_eye((uint64_t)a1[3]);
  }
  RansacEngine_init(*(_QWORD *)(v4 + 10));
  v5 = (*a1)[1];
  if (v5 >= **a1)
  {
    do
      RegistrationEngine_oneLevel((uint64_t)a1, v5);
    while (v5-- > **a1);
  }
  v7 = *v4;
  if (v7 > 5)
  {
    v8 = GeomTransform_estimate((uint64_t)a1[3], (uint64_t)a1 + 51476, (uint64_t)a1 + 53076, (uint64_t)a1 + 48276, (uint64_t)a1 + 49876, (unsigned __int16 *)a1 + 28138, v7);
  }
  else
  {
    syslog(4, "Registration could not detect more that %d inlier corners at the highest resolution.\n", *v4);
    v8 = 0;
  }
  GeomTransform_changeCoordinateSystem((uint64_t)a1[4], (uint64_t)a1[6]);
  return v8;
}

int64x2_t FeatureMatcher_constructor()
{
  int64x2_t *v0;
  int64x2_t result;

  v0 = (int64x2_t *)malloc_type_calloc(0x2F0uLL, 1uLL, 0x80635CF7uLL);
  if (v0)
  {
    result = vdupq_n_s64(0xBuLL);
    *v0 = result;
    v0[1] = vdupq_n_s64(0x17uLL);
    v0[2].i64[0] = 529;
  }
  return result;
}

uint64_t FeatureMatcher_BestMatchByOptimizedNCC(uint64_t a1, float *a2, float *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, unsigned __int16 a11)
{
  float *v11;
  float *v12;
  uint32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8x8_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint16x8_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint8x8_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint8x8_t v36;
  uint16x8_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint8x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  BOOL v45;
  uint64_t v46;
  uint8x8_t v47;
  uint16x8_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint8x8_t v52;
  uint8x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  float v56;
  float v57;
  float v58;
  int v59;
  int v60;
  __int16 v61;
  __int16 v62;
  float v63;
  unsigned __int16 v64;
  unsigned __int16 v65;
  uint64_t v66;
  int v67;
  _OWORD *v68;
  _OWORD *v69;
  _OWORD *v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float *v89;
  float v90;
  _OWORD v94[25];
  _OWORD v95[25];
  _OWORD v96[25];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (a11 != 2)
    FeatureMatcher_BestMatchByOptimizedNCC_cold_2();
  v11 = a4;
  v12 = a2;
  v14 = 0uLL;
  memset(v96, 0, sizeof(v96));
  memset(v95, 0, sizeof(v95));
  memset(v94, 0, sizeof(v94));
  v15 = (int)*a3;
  v16 = (int)*a4;
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
  {
    v18 = 0;
    v19 = *(_QWORD *)(a1 + 8);
    v20 = v16 - v19;
    v21 = a7 + (v16 - v19) * a8 + v15 - *(_QWORD *)a1;
    v22 = (uint8x8_t *)(a5 + ((int)a10 - v19) * a6 - *(_QWORD *)a1 + (int)a9);
    v23 = *(_QWORD *)(a1 + 16) - 8;
    v24 = -a11;
    v25 = *(_QWORD *)(a1 + 16) & 7;
    v26 = (_QWORD *)(a7 + a8 * (v20 - 2) + v15 - *(_QWORD *)a1 - a11);
    v27 = v26 + 1;
    v28 = 0uLL;
    do
    {
      if (!v23)
        goto LABEL_49;
      v29 = 0;
      v30 = v27;
      v31 = v26;
      v32 = v22;
      v33 = v21;
      do
      {
        LODWORD(v34) = 0;
        v35 = v30;
        v36 = *v32;
        v28 = vaddw_u8(v28, *v32);
        v37 = vmull_u8(v36, v36);
        v14 = vaddw_high_u16(vaddw_u16(v14, *(uint16x4_t *)v37.i8), v37);
        v38 = v31;
        v39 = -2;
        do
        {
          v34 = (int)v34;
          v40 = (2 * a11) | 1;
          v41 = v38;
          do
          {
            v42 = *(uint8x8_t *)v41;
            v41 = (_QWORD *)((char *)v41 + 1);
            v96[v34] = vaddw_u8((uint16x8_t)v96[v34], v42);
            v43 = vmull_u8(v42, v42);
            v95[v34] = vaddw_high_u16(vaddw_u16((uint32x4_t)v95[v34], *(uint16x4_t *)v43.i8), v43);
            v44 = vmull_u8(v36, v42);
            v94[v34] = vaddw_high_u16(vaddw_u16((uint32x4_t)v94[v34], *(uint16x4_t *)v44.i8), v44);
            ++v34;
            --v40;
          }
          while (v40);
          v38 = (_QWORD *)((char *)v38 + a8);
          v45 = v39++ == 2;
        }
        while (!v45);
        v29 += 8;
        ++v32;
        v33 += 8;
        ++v31;
        v30 = v35 + 1;
      }
      while (v29 < v23);
      if (v25 != 7)
LABEL_49:
        FeatureMatcher_BestMatchByOptimizedNCC_cold_1();
      LODWORD(v46) = 0;
      v47 = *v32;
      v47.i8[7] = 0;
      v28 = vaddw_u8(v28, v47);
      v48 = vmull_u8(v47, v47);
      v14 = vaddw_high_u16(vaddw_u16(v14, *(uint16x4_t *)v48.i8), v48);
      v49 = -2;
      do
      {
        v46 = (int)v46;
        v50 = (2 * a11) | 1;
        v51 = v35;
        do
        {
          v52 = *(uint8x8_t *)v51;
          v51 = (_QWORD *)((char *)v51 + 1);
          v53 = v52;
          v53.i8[7] = 0;
          v96[v46] = vaddw_u8((uint16x8_t)v96[v46], v53);
          v54 = vmull_u8(v53, v53);
          v95[v46] = vaddw_high_u16(vaddw_u16((uint32x4_t)v95[v46], *(uint16x4_t *)v54.i8), v54);
          v55 = vmull_u8(v47, v53);
          v94[v46] = vaddw_high_u16(vaddw_u16((uint32x4_t)v94[v46], *(uint16x4_t *)v55.i8), v55);
          ++v46;
          --v50;
        }
        while (v50);
        v35 = (_QWORD *)((char *)v35 + a8);
        v45 = v49++ == 2;
      }
      while (!v45);
      ++v18;
      v22 = (uint8x8_t *)((char *)v22 + a6);
      v21 += a8;
      v26 = (_QWORD *)((char *)v26 + a8);
      v27 = (_QWORD *)((char *)v27 + a8);
    }
    while (v18 != v17);
    v12 = a2;
    v11 = a4;
  }
  else
  {
    v24 = -2;
    v28 = 0uLL;
  }
  v56 = (float)(unint64_t)vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(v28)));
  v57 = (float)*(unint64_t *)(a1 + 32);
  v58 = (float)(unint64_t)vaddvq_s64((int64x2_t)vpaddlq_u32(v14)) - (float)((float)(v56 * v56) / v57);
  memset_pattern16((void *)(a1 + 40), &unk_1A15E17B0, 0x2A4uLL);
  memset_pattern16((void *)(a1 + 716), &unk_1A15E17B0, 0x24uLL);
  v59 = 0;
  v60 = 3 - v24;
  v61 = v24;
  v62 = 14 * v24;
  v63 = -1.0;
  v64 = v16;
  v65 = v15;
  do
  {
    v66 = 0;
    v67 = v59;
    v68 = &v96[v59];
    v69 = &v95[v59];
    v70 = &v94[v59];
    do
    {
      v71 = (float)(unint64_t)vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16((uint16x8_t)v68[v66])));
      v72 = v58
          * (float)((float)(unint64_t)vaddvq_s64((int64x2_t)vpaddlq_u32((uint32x4_t)v69[v66]))
                  - (float)((float)(v71 * v71) / v57));
      v73 = 0.0;
      if (v72 > 0.0)
        v73 = (float)((float)(unint64_t)vaddvq_s64((int64x2_t)vpaddlq_u32((uint32x4_t)v70[v66]))
                    - (float)((float)(v56 * v71) / v57))
            / sqrtf(v72);
      if ((unsigned __int16)(v62 + v66 + 84) <= 0xA8u)
        *(float *)(a1 + 4 * (unsigned __int16)(v62 + v66 + 84) + 40) = v73;
      if (v73 > v63)
      {
        v63 = v73;
        v65 = v61 + v66 + v15;
        v64 = v24 + v16;
      }
      ++v66;
    }
    while (v60 != (_DWORD)v66);
    v59 = v67 + v66;
    v62 += 13;
    v45 = v24++ == 2;
  }
  while (!v45);
  v74 = 0;
  v75 = a1 + 716;
  while (2)
  {
    v76 = 0;
    v77 = v65 - v15 + 70 + 13 * (v64 - v16 + v74);
    do
    {
      if ((unsigned __int16)(v77 + v76) >= 0xA9u)
      {
        *(_DWORD *)(v75 + 4 * v76) = -1027080192;
LABEL_46:
        v85 = 0.0;
        v84 = 0.0;
        v89 = a3;
        goto LABEL_47;
      }
      v78 = *(float *)(a1 + 4 * (unsigned __int16)(v77 + v76) + 40);
      *(float *)(v75 + 4 * v76) = v78;
      if (v78 == -100.0)
        goto LABEL_46;
      ++v76;
    }
    while (v76 != 3);
    ++v74;
    v75 += 12;
    if (v74 != 3)
      continue;
    break;
  }
  v63 = *(float *)(a1 + 732);
  v79 = *(float *)(a1 + 728);
  v80 = *(float *)(a1 + 736);
  v81 = *(float *)(a1 + 720);
  v82 = *(float *)(a1 + 744);
  v83 = (float)((float)(v79 + v80) * 0.5) - v63;
  v84 = 0.0;
  v85 = 0.0;
  v86 = v63;
  if (v83 < 0.0)
  {
    v87 = (float)(v80 - v79) * 0.5;
    v85 = (float)-v87 / (float)(v83 + v83);
    v86 = v63 + (float)((float)(v87 * v87) / (float)(v83 * -4.0));
  }
  v88 = (float)((float)(v81 + v82) * 0.5) - v63;
  v89 = a3;
  if (v88 < 0.0)
  {
    v90 = (float)(v82 - v81) * 0.5;
    v84 = (float)-v90 / (float)(v88 + v88);
    v63 = v63 + (float)((float)(v90 * v90) / (float)(v88 * -4.0));
  }
  if (v86 > v63)
    v63 = v86;
LABEL_47:
  *v89 = v85 + (float)v65;
  *v11 = v84 + (float)v64;
  *v12 = v63;
  return 0;
}

uint64_t FeatureMatcher_execute(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int16 a12)
{
  uint64_t v19;
  float v20;
  float v21;
  float v22;

  if (a7)
  {
    v19 = a7;
    do
    {
      v20 = *a2++;
      v21 = v20;
      v22 = *a3++;
      FeatureMatcher_BestMatchByOptimizedNCC(a1, a6++, a4++, a5++, a8, a9, a10, a11, v21, v22, a12);
      --v19;
    }
    while (v19);
  }
  return 0;
}

void FeatureMatcher_BestMatchByOptimizedNCC_cold_1()
{
  __assert_rtn("FeatureMatcher_BestMatchByOptimizedNCC", "FeatureMatcher.c", 494, "aFeatureMatcher->mBlkWidth % 8 == 7");
}

void FeatureMatcher_BestMatchByOptimizedNCC_cold_2()
{
  __assert_rtn("FeatureMatcher_BestMatchByOptimizedNCC", "FeatureMatcher.c", 433, "aSearchRangeV2 == kRegistrationMinSearchRangeV2");
}

void sub_1A13888B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A1388AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v4;

  _Unwind_Resume(a1);
}

void sub_1A1388CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1388E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void vision::mod::ImageDescriptorBufferJoint::~ImageDescriptorBufferJoint(void **this)
{
  vision::mod::ImageDescriptorBufferJoint::~ImageDescriptorBufferJoint(this);
  JUMPOUT(0x1A1B0A898);
}

{
  void *v2;
  void *v3;

  *this = &off_1E453A7C0;
  free(this[14]);
  v2 = this[18];
  if (v2)
  {
    this[19] = v2;
    operator delete(v2);
  }
  v3 = this[15];
  if (v3)
    operator delete(v3);
  vision::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(this);
}

double vision::mod::ImageDescriptorBufferJoint::createEmptyCopy(vision::mod::ImageDescriptorBufferJoint *this)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 32) = v2 + 40;
  result = 0.0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_BYTE *)(v2 + 88) = 0;
  *(_QWORD *)v2 = &off_1E453A7C0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 96) = *((_QWORD *)this + 12);
  *(_DWORD *)(v2 + 104) = *((_DWORD *)this + 26);
  return result;
}

uint64_t vision::mod::ImageDescriptorBufferJoint::print@<X0>(vision::mod::ImageDescriptorBufferJoint *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  int64_t v9;
  std::locale::id *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;
  std::locale v23;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Descriptor count = ", 19);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Descriptor length = ", 20);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  (*(void (**)(vision::mod::ImageDescriptorBufferJoint *))(*(_QWORD *)this + 104))(this);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" bytes", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)this + 18) >= 1)
  {
    v9 = 0;
    v10 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" = [", 4);
      if (*((int *)this + 24) >= 2)
      {
        v12 = 0;
        do
        {
          vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, v9);
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
          ++v12;
        }
        while (v12 < *((_DWORD *)this + 24) - 1);
      }
      vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, v9);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
      v15 = std::locale::use_facet(&v23, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v23);
      std::ostream::put();
      std::ostream::flush();
      ++v9;
    }
    while (v9 < *((int *)this + 18));
  }
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v20);
  v18[0] = *MEMORY[0x1E0DE4F50];
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v19 = v16;
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1B0A808](&v22);
}

void sub_1A1389200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 96));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void vision::mod::ImageDescriptorBufferJoint::computeDistancesFrom(_QWORD *a1@<X8>)
{
  _QWORD *exception;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  exception = __cxa_allocate_exception(8uLL);
  *exception = 3711;
  __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
}

void vision::mod::ImageDescriptorBufferJoint::computeDistanceFrom(vision::mod::ImageDescriptorBufferJoint *this, const vision::mod::ImageDescriptorBufferAbstract *lpsrc)
{
  _QWORD *exception;
  const vision::mod::ImageDescriptorBufferJoint *v5;
  uint64_t v6;
  float v7;

  if (*((_QWORD *)this + 9) == 1 && *((_QWORD *)lpsrc + 9) == 1)
  {
    v6 = vision::mod::ImageDescriptorBufferJoint::computeDistanceBetweenDescriptors(this, this, v5, &v7);
    exception = __cxa_allocate_exception(8uLL);
    *exception = v6;
  }
  else
  {
    syslog(5, "ERROR: Invalid number of descriptors, should be 1");
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3708;
  }
  __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
}

uint64_t vision::mod::ImageDescriptorBufferJoint::computeSelfDistances@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  _QWORD *exception;

  v2 = *(_DWORD *)(this + 72);
  if (v2 > 1)
  {
    std::vector<float>::vector(a2, (uint64_t)((v2 - 1) * v2 + ((v2 - 1) * v2 < 0)) >> 1);
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3711;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return this;
}

void sub_1A138937C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vision::mod::ImageDescriptorBufferJoint::getDescriptorLengthInBytes(vision::mod::ImageDescriptorBufferJoint *this)
{
  return 4 * *((_QWORD *)this + 12);
}

void vision::mod::ImageDescriptorBufferJoint::setToReferenceToKthDescriptor(vision::mod::ImageDescriptorBufferJoint *this, vision::mod::ImageDescriptorBufferAbstract *a2, unint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char v21;
  char v22;

  vision::mod::ImageDescriptorBufferAbstract::setToReferenceToKthDescriptor(this, a2, a3);
  v6 = (a3 >> 2) & 0x1FFFFFFFFFFFFFF8;
  v22 = (*(_QWORD *)(*((_QWORD *)this + 15) + v6) >> (2 * (a3 & 0x1Fu))) & 1;
  std::vector<BOOL>::push_back((uint64_t *)a2 + 15, &v22);
  v21 = (*(_QWORD *)(*((_QWORD *)this + 15) + v6) >> ((2 * (a3 & 0x1F)) | 1)) & 1;
  std::vector<BOOL>::push_back((uint64_t *)a2 + 15, &v21);
  v7 = (_OWORD *)(*((_QWORD *)this + 18) + 16 * a3);
  v9 = (_OWORD *)*((_QWORD *)a2 + 19);
  v8 = *((_QWORD *)a2 + 20);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *((_QWORD *)a2 + 18);
    v12 = ((uint64_t)v9 - v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
    v14 = v8 - v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(v15);
    else
      v16 = 0;
    v17 = (_OWORD *)(v15 + 16 * v12);
    v18 = v15 + 16 * v16;
    *v17 = *v7;
    v10 = v17 + 1;
    v20 = (char *)*((_QWORD *)a2 + 18);
    v19 = (char *)*((_QWORD *)a2 + 19);
    if (v19 != v20)
    {
      do
      {
        *--v17 = *((_OWORD *)v19 - 1);
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)a2 + 18);
    }
    *((_QWORD *)a2 + 18) = v17;
    *((_QWORD *)a2 + 19) = v10;
    *((_QWORD *)a2 + 20) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = *v7;
    v10 = v9 + 1;
  }
  *((_QWORD *)a2 + 19) = v10;
}

void *vision::mod::ImageDescriptorBufferJoint::getRepresentative(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  void *v7;
  _QWORD *v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  vDSP_Length v17;
  vDSP_Length v18;
  const void *v19;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *exception;
  void *__p;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;

  v4 = *(_QWORD *)(a1 + 72);
  if (v4 != 1)
  {
    if (v4)
    {
      v7 = malloc_type_realloc(*(void **)(a1 + 112), 4 * v4, 0x100004052888210uLL);
      *(_QWORD *)(a1 + 112) = v7;
      if (v7)
      {
        v8 = operator new(8uLL);
        *v8 = a3;
        v27 = v8 + 1;
        v28 = v8 + 1;
        __p = v8;
        v26 = v8;
        v9 = 4 * *(_QWORD *)(a1 + 96);
        v10 = malloc_type_malloc(v9, 0xA7429496uLL);
        if (!v10)
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = 3707;
          __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
        }
        v11 = operator new();
        vision::mod::ImageDescriptorBufferJoint::ImageDescriptorBufferJoint(v11, &v26, v10, a1 + 120, (_QWORD *)(a1 + 144), v9, 1, 1);
        if (*(_QWORD *)(a1 + 96))
        {
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 72);
          v14 = v13 >> 1;
          v15 = (v13 - 1) >> 1;
          do
          {
            if (*(_QWORD *)(a1 + 72))
            {
              v16 = 0;
              v17 = 0;
              do
              {
                *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v17++) = *(_DWORD *)(vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((vision::mod::ImageDescriptorBufferAbstract *)a1, v16 >> 32)+ 4 * v12);
                v18 = *(_QWORD *)(a1 + 72);
                v16 += 0x100000000;
              }
              while (v17 < v18);
            }
            else
            {
              v18 = 0;
            }
            if (a2 == 1)
            {
              vDSP_vsort(*(float **)(a1 + 112), v18, -1);
              *((float *)v10 + v12) = (float)(*(float *)(*(_QWORD *)(a1 + 112) + 4 * v14)
                                            + *(float *)(*(_QWORD *)(a1 + 112) + 4 * v15))
                                    * 0.5;
            }
            else
            {
              if (a2 != 2)
              {
                syslog(5, "ERROR: Unknown representative mode", __p, v26, v27, v28);
                v21 = __cxa_allocate_exception(8uLL);
                *v21 = 3703;
                __cxa_throw(v21, MEMORY[0x1E0DE4F28], 0);
              }
              vDSP_meanv(*(const float **)(a1 + 112), 1, (float *)v10 + v12, v18);
            }
            ++v12;
          }
          while (v12 < *(_QWORD *)(a1 + 96));
        }
        operator delete(__p);
        return (void *)v11;
      }
      v22 = __cxa_allocate_exception(8uLL);
      v23 = 3707;
    }
    else
    {
      syslog(5, "ERROR: Cannot compute the representative of an empty buffer");
      v22 = __cxa_allocate_exception(8uLL);
      v23 = 3710;
    }
    *v22 = v23;
    __cxa_throw(v22, MEMORY[0x1E0DE4F28], 0);
  }
  v19 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v19)
  return 0;
}

void sub_1A13897C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  uint64_t v9;

  MEMORY[0x1A1B0A898](v9, 0x10B1C408C23EE85);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t vision::mod::ImageDescriptorBufferJoint::ImageDescriptorBufferJoint(uint64_t a1, _QWORD **a2, void *a3, uint64_t a4, _QWORD *a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void **v25;
  _BYTE *v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;

  v12 = vision::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(a1, a2, a3, a6, a7, a8);
  *(_QWORD *)v12 = &off_1E453A7C0;
  *(_DWORD *)(v12 + 104) = 3;
  *(_OWORD *)(v12 + 144) = 0u;
  v13 = (_QWORD *)(v12 + 144);
  v14 = (void **)(v12 + 120);
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 96) = a6 >> 2;
  if (v12 + 120 != a4)
  {
    v15 = *(_QWORD *)(a4 + 8);
    if (v15)
    {
      std::vector<BOOL>::__vallocate[abi:ne180100]((_QWORD *)(v12 + 120), v15);
      memmove(*v14, *(const void **)a4, (((unint64_t)(*(_QWORD *)(a4 + 8) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v16 = *(_QWORD *)(a4 + 8);
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)(a1 + 128) = v16;
  }
  if (v13 != a5)
  {
    v17 = (char *)*a5;
    v18 = (char *)a5[1];
    v19 = (int64_t)&v18[-*a5];
    v20 = v19 >> 4;
    v21 = *(_QWORD *)(a1 + 160);
    v22 = *(char **)(a1 + 144);
    if (v19 >> 4 <= (unint64_t)((v21 - (uint64_t)v22) >> 4))
    {
      v25 = (void **)(a1 + 152);
      v26 = *(_BYTE **)(a1 + 152);
      v27 = (v26 - v22) >> 4;
      if (v27 < v20)
      {
        v28 = &v17[16 * v27];
        if (v26 != v22)
        {
          memmove(*(void **)(a1 + 144), v17, v26 - v22);
          v22 = (char *)*v25;
        }
        v19 = v18 - v28;
        if (v18 == v28)
          goto LABEL_25;
        v29 = v22;
        v30 = v28;
        goto LABEL_24;
      }
    }
    else
    {
      if (v22)
      {
        *(_QWORD *)(a1 + 152) = v22;
        operator delete(v22);
        v21 = 0;
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
      }
      if (v19 < 0)
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      v23 = v21 >> 3;
      if (v21 >> 3 <= v20)
        v23 = v19 >> 4;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      std::vector<vision::mod::DescriptorItemSideInfo>::__vallocate[abi:ne180100](v13, v24);
      v25 = (void **)(a1 + 152);
      v22 = *(char **)(a1 + 152);
    }
    if (v18 == v17)
    {
LABEL_25:
      *v25 = &v22[v19];
      return a1;
    }
    v29 = v22;
    v30 = v17;
LABEL_24:
    memmove(v29, v30, v19);
    goto LABEL_25;
  }
  return a1;
}

void sub_1A13899C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 152) = v5;
    operator delete(v5);
  }
  if (*v2)
    operator delete(*v2);
  vision::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract((void **)v1);
  _Unwind_Resume(a1);
}

void std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

char *std::vector<vision::mod::DescriptorItemSideInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E452A5C8, MEMORY[0x1E0DE42D0]);
}

void sub_1A1389AE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

int64x2_t vision::mod::ImageDescriptorBufferAbstract::setToReferenceToKthDescriptor(vision::mod::ImageDescriptorBufferAbstract *this, vision::mod::ImageDescriptorBufferAbstract *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t DataForKthDescriptor;
  uint64_t v22;
  int64x2_t result;

  *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 1);
  v6 = (_QWORD *)((char *)a2 + 40);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(*((_QWORD **)a2 + 5));
  *((_QWORD *)a2 + 4) = v6;
  *v6 = 0;
  *((_QWORD *)a2 + 6) = 0;
  v7 = *((_QWORD *)this + 1);
  if (v7 != *((_QWORD *)this + 2))
  {
    v9 = (char *)*((_QWORD *)a2 + 2);
    v8 = *((_QWORD *)a2 + 3);
    if ((unint64_t)v9 >= v8)
    {
      v11 = (char *)*((_QWORD *)a2 + 1);
      v12 = (v9 - v11) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
      v16 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v15)
        v16 = v13;
      if (v16)
      {
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v16);
        v11 = (char *)*((_QWORD *)a2 + 1);
        v9 = (char *)*((_QWORD *)a2 + 2);
      }
      else
      {
        v17 = 0;
      }
      v18 = (_QWORD *)(v16 + 8 * v12);
      v19 = v16 + 8 * v17;
      *v18 = *(_QWORD *)(v7 + 8 * a3);
      v10 = v18 + 1;
      while (v9 != v11)
      {
        v20 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v18 = v20;
      }
      *((_QWORD *)a2 + 1) = v18;
      *((_QWORD *)a2 + 2) = v10;
      *((_QWORD *)a2 + 3) = v19;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)(v7 + 8 * a3);
      v10 = v9 + 8;
    }
    *((_QWORD *)a2 + 2) = v10;
    *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)a2 + 4, *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a3), (_QWORD *)(*((_QWORD *)this + 1) + 8 * a3))+ 10) = 0;
  }
  DataForKthDescriptor = vision::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, a3);
  *((_BYTE *)a2 + 88) = 0;
  v22 = *((_QWORD *)this + 8);
  *((_QWORD *)a2 + 7) = DataForKthDescriptor;
  *((_QWORD *)a2 + 8) = v22;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)((char *)a2 + 72) = result;
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1A1389EC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

uint64_t vision::mod::ImageDescriptorBufferJoint::computeDistanceBetweenDescriptors(vision::mod::ImageDescriptorBufferJoint *this, const vision::mod::ImageDescriptorBufferJoint *a2, const vision::mod::ImageDescriptorBufferJoint *a3, float *a4)
{
  uint64_t v4;
  const float *v8;
  const float *v9;
  int v10;
  vDSP_Length v11;
  float v12;
  _QWORD *exception;
  uint64_t __C;
  void *__p;
  void *v17;

  v4 = -3;
  if (a2 && a3)
  {
    *a4 = 0.0;
    v8 = (const float *)*((_QWORD *)a2 + 7);
    v9 = (const float *)*((_QWORD *)a3 + 7);
    std::vector<BOOL>::vector(&v17, (uint64_t)a2 + 120);
    std::vector<BOOL>::vector(&__p, (uint64_t)a3 + 120);
    v10 = *((_DWORD *)this + 26);
    if (v10 == 3)
    {
      v11 = (unint64_t)(*(uint64_t (**)(vision::mod::ImageDescriptorBufferJoint *))(*(_QWORD *)this + 104))(this) >> 3;
      __C = 0;
      vDSP_dotpr(v8, 1, v9, 1, (float *)&__C + 1, v11);
      vDSP_dotpr(&v8[v11], 1, &v9[v11], 1, (float *)&__C, v11);
      v12 = (float)(*((float *)&__C + 1) * -0.5) + 0.5;
      if ((*(_BYTE *)v17 & 2) != 0 && (*(_BYTE *)__p & 2) != 0)
        v12 = (float)((float)((float)(*(float *)&__C * -0.5) + 0.5) * 0.3) + (float)(v12 * 0.7);
      v4 = 0;
      *a4 = v12;
    }
    else
    {
      if (v10 == 4)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = 3711;
        __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
      }
      syslog(5, "ERROR: Unknown distance function");
      v4 = -10;
    }
    if (__p)
      operator delete(__p);
    if (v17)
      operator delete(v17);
  }
  return (v4 + 128) | 0xE00;
}

void sub_1A138A0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1A138A214(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1B0A808](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  std::locale *v17;
  uint64_t v18;
  _BYTE v20[16];
  std::locale __b;
  char v22;

  MEMORY[0x1A1B0A6F4](v20, a1);
  if (v20[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_23;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      std::string::basic_string[abi:ne180100](&__b, v16, (char)v9);
      v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v7 + 96))(v7, v17, v16);
      if (v22 < 0)
        operator delete(__b.__locale_);
      if (v18 != v16)
        goto LABEL_23;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1A1B0A700](v20);
  return a1;
}

void sub_1A138A400(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1A1B0A700](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1A138A3DCLL);
}

void sub_1A138A460(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 32);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1B0A808](a1 + 128);
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>,std::back_insert_iterator<std::vector<long long>>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v5 = a1;
    v6 = *(_QWORD **)(a3 + 8);
    do
    {
      v7 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v6 >= v7)
      {
        v9 = *(_QWORD **)a3;
        v10 = ((uint64_t)v6 - *(_QWORD *)a3) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13);
          v9 = *(_QWORD **)a3;
          v6 = *(_QWORD **)(a3 + 8);
        }
        else
        {
          v14 = 0;
        }
        v15 = (_QWORD *)(v13 + 8 * v10);
        *v15 = *v5;
        v8 = v15 + 1;
        while (v6 != v9)
        {
          v16 = *--v6;
          *--v15 = v16;
        }
        *(_QWORD *)a3 = v15;
        *(_QWORD *)(a3 + 8) = v8;
        *(_QWORD *)(a3 + 16) = v13 + 8 * v14;
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v6 = *v5;
        v8 = v6 + 1;
      }
      *(_QWORD *)(a3 + 8) = v8;
      ++v5;
      v6 = v8;
    }
    while (v5 != a2);
  }
}

uint64_t *std::map<long long,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,int>,std::__tree_node<std::__value_type<long long,int>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = v4 + 4;
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_9;
      v10 = (uint64_t *)v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v7;
      if (v9[4] < *v7)
      {
LABEL_9:
        if (v8)
          v14 = (uint64_t **)v9;
        else
          v14 = (uint64_t **)v6;
        if (v8)
          v15 = (uint64_t **)(v9 + 1);
        else
          v15 = (uint64_t **)v6;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v15 = (uint64_t **)v6;
        if (v8)
        {
          v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v8;
              v19 = v8[4];
              if (v13 >= v19)
                break;
              v8 = *v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v19 >= v13)
              break;
            v15 = v14 + 1;
            v8 = v14[1];
            if (!v8)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v16 + 2) = *(_OWORD *)v7;
        result = std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v14, v15, v16);
      }
      v17 = (_QWORD *)v4[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v4[2];
          v12 = *v18 == (_QWORD)v4;
          v4 = v18;
        }
        while (!v12);
      }
      v4 = v18;
    }
    while (v18 != a3);
  }
  return result;
}

void vision::mod::ImageDescriptorBufferJoint::resizeForDescriptorsCount(void **this, unint64_t a2, char a3)
{
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  vision::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount((vision::mod::ImageDescriptorBufferAbstract *)this, a2, a3);
  std::vector<BOOL>::resize((uint64_t)(this + 15), 2 * a2, 0);
  v5 = this[18];
  v6 = this[19];
  v7 = (v6 - v5) >> 4;
  if (a2 <= v7)
  {
    if (a2 >= v7)
      return;
    v20 = &v5[16 * a2];
    goto LABEL_17;
  }
  v8 = a2 - v7;
  v9 = this[20];
  if (a2 - v7 <= (v9 - v6) >> 4)
  {
    bzero(this[19], 16 * v8);
    v20 = &v6[16 * v8];
LABEL_17:
    this[19] = v20;
    return;
  }
  if (a2 >> 60)
    std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
  v10 = v9 - v5;
  v11 = v10 >> 3;
  if (v10 >> 3 <= a2)
    v11 = a2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v11;
  v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vision::mod::DescriptorItemSideInfo>>(v12);
  v14 = &v13[16 * v7];
  v16 = &v13[16 * v15];
  bzero(v14, 16 * v8);
  v17 = &v14[16 * v8];
  v19 = (char *)this[18];
  v18 = (char *)this[19];
  if (v18 != v19)
  {
    do
    {
      *((_OWORD *)v14 - 1) = *((_OWORD *)v18 - 1);
      v14 -= 16;
      v18 -= 16;
    }
    while (v18 != v19);
    v18 = (char *)this[18];
  }
  this[18] = v14;
  this[19] = v17;
  this[20] = v16;
  if (v18)
    operator delete(v18);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *__dst;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      __dst = 0;
      v20 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<vision::mod::DescriptorItemSideInfo>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve((uint64_t)&__dst, v12);
      v13 = *(void **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v20 = v14 + v6;
      v15 = (char *)__dst;
      if (v14 < 1)
      {
        LODWORD(v18) = 0;
        v17 = (char *)__dst;
      }
      else
      {
        v16 = v14 >> 6;
        if ((unint64_t)(v14 + 63) >= 0x7F)
          memmove(__dst, v13, 8 * v16);
        v18 = v14 - (v16 << 6);
        v17 = &v15[8 * v16];
        if (v18 < 1)
          LODWORD(v18) = 0;
        else
          *(_QWORD *)v17 = *(_QWORD *)v17 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v18) | *((_QWORD *)v13 + v16) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v18);
        v13 = *(void **)a1;
      }
      *(_QWORD *)a1 = v15;
      *(_OWORD *)(a1 + 8) = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        __dst = v17;
        LODWORD(v20) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&__dst, v6);
      }
      else
      {
        __dst = v17;
        LODWORD(v20) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&__dst, v6);
      }
    }
  }
}

void sub_1A138AC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

