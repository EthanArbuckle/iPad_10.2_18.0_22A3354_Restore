void sub_1D449BB50()
{
  sub_1D4498530();
}

uint64_t sub_1D449BB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D4498648(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1D449BBA8()
{
  sub_1D44A2994();
  return sub_1D451BA3C();
}

uint64_t sub_1D449BBD0()
{
  sub_1D44A2994();
  return sub_1D451BA48();
}

void sub_1D449BBF8(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_1D4498790();
  if (!v1)
    *a1 = v3;
}

void sub_1D449BC20()
{
  sub_1D44986D8();
}

void sub_1D449BC38()
{
  sub_1D449B1E0();
}

uint64_t sub_1D449BC58(uint64_t a1)
{
  uint64_t *v1;

  return sub_1D44985B8(a1, *v1);
}

void sub_1D449BC60()
{
  sub_1D449C5CC();
}

uint64_t sub_1D449BC6C(_QWORD *a1, _QWORD *a2)
{
  return sub_1D4498644(*a1, *a2);
}

uint64_t sub_1D449BC7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44988CC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1D449BCA4()
{
  sub_1D44A291C();
  return sub_1D451BA3C();
}

uint64_t sub_1D449BCCC()
{
  sub_1D44A291C();
  return sub_1D451BA48();
}

void sub_1D449BCF4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_1D4498A7C();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
  }
}

void sub_1D449BD1C()
{
  sub_1D4498978();
}

void sub_1D449BD34()
{
  sub_1D4498A34();
}

uint64_t sub_1D449BD3C()
{
  return sub_1D4498860();
}

uint64_t sub_1D449BD44()
{
  sub_1D451B958();
  swift_bridgeObjectRetain();
  sub_1D42D60DC();
  sub_1D451B964();
  swift_bridgeObjectRelease();
  return sub_1D451B994();
}

void sub_1D449BDA8(uint64_t *a1, uint64_t *a2)
{
  sub_1D449889C(*a1, a1[1], *a2);
}

uint64_t sub_1D449BDBC()
{
  sub_1D44A0C04();
  return sub_1D451BA3C();
}

uint64_t sub_1D449BDE4()
{
  sub_1D44A0C04();
  return sub_1D451BA48();
}

uint64_t sub_1D449BE0C()
{
  unsigned __int8 *v0;

  return sub_1D44996DC(*v0);
}

uint64_t sub_1D449BE14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D4499128(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D449BE38@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D44996D4();
  *a1 = result;
  return result;
}

uint64_t sub_1D449BE5C()
{
  sub_1D44A0970();
  return sub_1D451BA3C();
}

uint64_t sub_1D449BE84()
{
  sub_1D44A0970();
  return sub_1D451BA48();
}

uint64_t sub_1D449BEAC()
{
  sub_1D44A0CF4();
  return sub_1D451BA3C();
}

uint64_t sub_1D449BED4()
{
  sub_1D44A0CF4();
  return sub_1D451BA48();
}

uint64_t sub_1D449BEFC()
{
  sub_1D44A103C();
  return sub_1D451BA3C();
}

uint64_t sub_1D449BF24()
{
  sub_1D44A103C();
  return sub_1D451BA48();
}

uint64_t sub_1D449BF4C()
{
  sub_1D44A0B14();
  return sub_1D451BA3C();
}

uint64_t sub_1D449BF74()
{
  sub_1D44A0B14();
  return sub_1D451BA48();
}

uint64_t sub_1D449BF9C()
{
  sub_1D44A0E5C();
  return sub_1D451BA3C();
}

uint64_t sub_1D449BFC4()
{
  sub_1D44A0E5C();
  return sub_1D451BA48();
}

uint64_t sub_1D449BFEC()
{
  sub_1D44A0ED4();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C014()
{
  sub_1D44A0ED4();
  return sub_1D451BA48();
}

uint64_t sub_1D449C03C()
{
  sub_1D44A0FC4();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C064()
{
  sub_1D44A0FC4();
  return sub_1D451BA48();
}

uint64_t sub_1D449C08C()
{
  sub_1D44A0DE4();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C0B4()
{
  sub_1D44A0DE4();
  return sub_1D451BA48();
}

uint64_t sub_1D449C0DC()
{
  sub_1D44A0A24();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C104()
{
  sub_1D44A0A24();
  return sub_1D451BA48();
}

uint64_t sub_1D449C12C()
{
  sub_1D44A0F4C();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C154()
{
  sub_1D44A0F4C();
  return sub_1D451BA48();
}

void sub_1D449C17C(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_1D4499854(a1, a2);
  *a3 = v4 & 1;
}

uint64_t sub_1D449C1A4()
{
  sub_1D44A0D6C();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C1CC()
{
  sub_1D44A0D6C();
  return sub_1D451BA48();
}

uint64_t sub_1D449C1F4()
{
  sub_1D44A0A9C();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C21C()
{
  sub_1D44A0A9C();
  return sub_1D451BA48();
}

uint64_t sub_1D449C244()
{
  sub_1D44A0C7C();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C26C()
{
  sub_1D44A0C7C();
  return sub_1D451BA48();
}

uint64_t sub_1D449C294()
{
  sub_1D44A0B8C();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C2BC()
{
  sub_1D44A0B8C();
  return sub_1D451BA48();
}

uint64_t sub_1D449C2E4()
{
  sub_1D44A09AC();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C30C()
{
  sub_1D44A09AC();
  return sub_1D451BA48();
}

void sub_1D449C334(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t vars0;
  uint64_t vars8;

  sub_1D449A310(a1, a2, a3, a4, a5, a6, a7, a8, v11, v12, *((uint64_t *)&v12 + 1), v13, v14, v15, v16, v17, v18, v19, vars0,
    vars8);
  if (!v9)
    sub_1D449FF6C(&v12, a9);
}

void sub_1D449C378()
{
  __int128 *v0;
  _BYTE v1[56];

  sub_1D449FF6C(v0, (uint64_t)v1);
  sub_1D44998B4();
}

void sub_1D449C3C4()
{
  __int128 *v0;
  _BYTE v1[56];

  sub_1D449FF6C(v0, (uint64_t)v1);
  sub_1D449A2E8();
}

void sub_1D449C3F8(uint64_t a1)
{
  sub_1D44A3EC4(a1);
  sub_1D4498B44();
}

uint64_t sub_1D449C42C()
{
  __int128 *v0;
  _BYTE v2[56];

  sub_1D449FF6C(v0, (uint64_t)v2);
  sub_1D451B958();
  sub_1D4498B44();
  return sub_1D451B994();
}

uint64_t sub_1D449C47C(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[3];
  _BYTE v6[56];

  sub_1D449FF6C(a1, (uint64_t)v5);
  sub_1D449FF6C(a2, (uint64_t)v6);
  sub_1D4498D88(v5);
  return v3 & 1;
}

uint64_t sub_1D449C4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D449B098(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1D449C4F0()
{
  sub_1D44A0834();
  return sub_1D451BA3C();
}

uint64_t sub_1D449C518()
{
  sub_1D44A0834();
  return sub_1D451BA48();
}

void sub_1D449C540(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_1D449B214();
  if (!v1)
    *a1 = v3;
}

void sub_1D449C568()
{
  sub_1D449B128();
}

void sub_1D449C580()
{
  sub_1D449B1E0();
}

uint64_t sub_1D449C5A0()
{
  return sub_1D449B064();
}

void sub_1D449C5C0()
{
  sub_1D449C5CC();
}

void sub_1D449C5CC()
{
  uint64_t v0;

  sub_1D434955C();
  v0 = sub_1D42CB6CC();
  sub_1D44A3E90(v0);
  sub_1D42B7204();
  sub_1D42CB230();
  sub_1D42BE978();
}

uint64_t sub_1D449C600(_QWORD *a1, _QWORD *a2)
{
  return sub_1D449B094(*a1, *a2);
}

void sub_1D449C60C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    sub_1D42BE984();
    v4 = (_DWORD *)(a1 + 80);
    while (1)
    {
      v5 = *((_QWORD *)v4 - 5);
      v6 = *((_QWORD *)v4 - 4);
      v7 = *((_QWORD *)v4 - 3);
      v8 = *((_QWORD *)v4 - 2);
      v9 = *((_QWORD *)v4 - 1);
      v10 = *v4;
      *(_QWORD *)&v25 = *((_QWORD *)v4 - 6);
      *((_QWORD *)&v25 + 1) = v5;
      v26 = v6;
      v27 = v7;
      v28 = v8;
      v29 = v9;
      v30 = v10;
      v11 = sub_1D44A3AF0();
      sub_1D42D6EFC(v11, v12, v13, v14);
      sub_1D449C718(&v25, &v24);
      if (v23)
        break;
      v23 = 0;
      v4 += 14;
      v15 = sub_1D44A3AF0();
      sub_1D42D6E9C(v15, v16, v17, v18);
      swift_release();
      v31 = v24;
      if (!--v2)
      {
        sub_1D44A3E9C();
        goto LABEL_8;
      }
    }
    v19 = sub_1D44A3AF0();
    sub_1D42D6E9C(v19, v20, v21, v22);
    swift_release();
    sub_1D44A3E9C();
  }
  else
  {
    sub_1D42BE984();
  }
LABEL_8:
  sub_1D44A3C08();
}

void sub_1D449C718(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5[3];

  sub_1D449FF6C(a1, (uint64_t)v5);
  sub_1D449C7AC(v5);
  if (!v2)
    *a2 = v4;
}

void sub_1D449C7AC(__int128 *a1)
{
  _QWORD v1[3];

  sub_1D449FF6C(a1, (uint64_t)v1);
  __asm { BR              X11 }
}

void sub_1D449C810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;

  sub_1D44A3A24(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
  sub_1D449CEE4();
}

void sub_1D449C9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *(**v12)@<X0>(void *@<X8>);
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[4];

  sub_1D42CB740();
  v2 = sub_1D42B28FC(&qword_1EFE4CC40);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1D42B28FC(&qword_1EFE4CC48);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v7);
  sub_1D438E8B8();
  v15[0] = sub_1D42B28FC(&qword_1EFE4CC50);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v8);
  sub_1D43479B4();
  v9 = sub_1D42B28FC((uint64_t *)&unk_1EFE4CC58);
  v10 = *(_QWORD *)(v9 - 8);
  v15[1] = v9;
  v15[2] = v10;
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v11);
  sub_1D44A3954();
  sub_1D42CB9F8();
  sub_1D42B28FC(&qword_1EFE4CD10);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D451A3A4();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v1, v5, v2);
  v12 = (void *(**)@<X0>(void *@<X8>))(v1 + *(int *)(v6 + 52));
  *v12 = sub_1D43E16C0;
  v12[1] = 0;
  v13 = (_QWORD *)(v1 + *(int *)(v6 + 56));
  *v13 = sub_1D44A006C;
  v13[1] = 0;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v14 = sub_1D42B8DB4();
  *(_QWORD *)(v14 + 16) = sub_1D449E7B4;
  *(_QWORD *)(v14 + 24) = 0;
  sub_1D42CB9F8();
  sub_1D44A3D54((uint64_t)&unk_1EFE4CD18);
  sub_1D44A3A10((uint64_t)&qword_1EFE496B8);
  sub_1D451A3C8();
  swift_release();
  sub_1D44A3D4C(v1);
  sub_1D44A3D54((uint64_t)&unk_1EFE4CD20);
  sub_1D451A308();
  sub_1D44A3D4C(v0);
  sub_1D44A02F8((uint64_t)&unk_1EFE4CD28);
  sub_1D44A3B68();
  sub_1D44A3B28();
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449CC48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D42CB740();
  sub_1D42B28FC(&qword_1EFE4CB48);
  sub_1D42CB4F8();
  MEMORY[0x1E0C80A78](v1);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE4CC38);
  sub_1D44A3CC4();
  MEMORY[0x1E0C80A78](v2);
  sub_1D43408A0();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44A3C64();
  sub_1D42CB9F8();
  sub_1D42B28FC((uint64_t *)&unk_1EFE4A660);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D44A3B40();
  sub_1D44A3CE0();
  sub_1D43C2340(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_1D44A3B10();
  sub_1D44A3C30();
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC88);
  sub_1D44A39C0();
  sub_1D44A3BF8();
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449CD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D42CB740();
  sub_1D42B28FC(&qword_1EFE4CC28);
  sub_1D42CB4F8();
  MEMORY[0x1E0C80A78](v3);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE4CC30);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v4);
  sub_1D44A3B70();
  sub_1D42CB9F8();
  sub_1D42B28FC(&qword_1EFE4CC90);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D44A3B40();
  v5 = sub_1D42B8DB4();
  *(_QWORD *)(v5 + 16) = sub_1D449EE88;
  *(_QWORD *)(v5 + 24) = 0;
  sub_1D42CB9F8();
  sub_1D44A02F8((uint64_t)&unk_1EFE4CCF8);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CD00);
  sub_1D451A3C8();
  swift_release();
  sub_1D4340970(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1D44A3D54((uint64_t)&unk_1EFE4CD08);
  sub_1D44A3F68();
  sub_1D44A3D4C(v0);
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449CEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)@<X0>(uint64_t *@<X8>);
  void (**v20)(uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_1D42CB740();
  v4 = v3;
  v28 = (int *)sub_1D42B28FC(&qword_1EFE4CC08);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v5);
  sub_1D43479B4();
  v29 = sub_1D42B28FC(&qword_1EFE4CB48);
  v33 = *(_QWORD *)(v29 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v6);
  sub_1D42F1ED4();
  v30 = sub_1D42B28FC(&qword_1EFE4CC10);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v7);
  sub_1D42CB18C();
  sub_1D42B28FC(&qword_1EFE4CC18);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v8);
  sub_1D42BE768();
  v31 = v9;
  v10 = sub_1D42B28FC(&qword_1EFE4CC20);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v11);
  sub_1D42BE768();
  v32 = v12;
  sub_1D42CB9F8();
  v13 = sub_1D42B28FC((uint64_t *)&unk_1EFE4A660);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  v14 = v1;
  sub_1D44A3E44();
  sub_1D451A3A4();
  v15 = *(_DWORD *)(v4 + 32);
  v16 = *(_DWORD *)(v4 + 36);
  if (__CFADD__(v16, v15))
  {
    __break(1u);
  }
  else
  {
    v27 = v10;
    v17 = *(unsigned int *)(v4 + 28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v2, v14, v29);
    *(_QWORD *)(v2 + v28[15]) = (v16 + v15);
    *(_QWORD *)(v2 + v28[16]) = v17;
    *(_QWORD *)(v2 + v28[17]) = v13;
    v18 = sub_1D42B6F40();
    *(_OWORD *)(v18 + 16) = *(_OWORD *)v4;
    *(_OWORD *)(v18 + 28) = *(_OWORD *)(v4 + 12);
    *(_DWORD *)(v18 + 44) = v17;
    *(_DWORD *)(v18 + 48) = v15;
    *(_DWORD *)(v18 + 52) = v16;
    *(_QWORD *)(v18 + 56) = *(_QWORD *)(v4 + 40);
    *(_DWORD *)(v18 + 64) = *(_DWORD *)(v4 + 48);
    sub_1D42FC068(v2, v0, &qword_1EFE4CC08);
    v19 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v0 + *(int *)(v30 + 52));
    *v19 = sub_1D42BDF10;
    v19[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v18;
    v20 = (void (**)(uint64_t))(v0 + *(int *)(v30 + 56));
    *v20 = sub_1D44A0108;
    v20[1] = 0;
    sub_1D44A032C(v2, &qword_1EFE4CC08);
    v21 = sub_1D44A3DA8();
    v22(v21, v29);
    v23 = sub_1D42B8DB4();
    *(_QWORD *)(v23 + 16) = sub_1D449E7B4;
    *(_QWORD *)(v23 + 24) = 0;
    sub_1D42B28FC(&qword_1EFE496A8);
    sub_1D44A02F8((uint64_t)&unk_1EFE4CCD0);
    sub_1D44A02F8((uint64_t)&qword_1EFE496B8);
    sub_1D451A3C8();
    swift_release();
    v24 = sub_1D42CB9EC();
    sub_1D44A032C(v24, v25);
    sub_1D44A3D54((uint64_t)&unk_1EFE4CCE0);
    sub_1D451A308();
    sub_1D44A3D4C(v31);
    sub_1D44A02F8((uint64_t)&unk_1EFE4CCE8);
    sub_1D451A2E4();
    sub_1D44A3F1C();
    v26(v32, v27);
    sub_1D44A3F28();
    sub_1D42CB520();
  }
}

void sub_1D449D274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D42CB740();
  sub_1D42B28FC(&qword_1EFE4CC00);
  sub_1D437EDFC();
  MEMORY[0x1E0C80A78](v2);
  sub_1D43408A0();
  MEMORY[0x1E0C80A78](v3);
  sub_1D42B28FC(&qword_1EFE4CC38);
  sub_1D42CB4F8();
  MEMORY[0x1E0C80A78](v4);
  sub_1D44A3954();
  sub_1D42CB9F8();
  sub_1D42B28FC((uint64_t *)&unk_1EFE4CCC0);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D451A3A4();
  sub_1D451A110();
  sub_1D44A3E0C();
  sub_1D44A3D2C();
  sub_1D44A3F7C();
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC88);
  sub_1D44A3B68();
  sub_1D4340970(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1D44A3F28();
  sub_1D42CB520();
}

void sub_1D449D3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D42CB740();
  sub_1D42B28FC(&qword_1EFE4CC00);
  sub_1D42CB4F8();
  MEMORY[0x1E0C80A78](v1);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE4CC38);
  sub_1D44A3CC4();
  MEMORY[0x1E0C80A78](v2);
  sub_1D43408A0();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44A3C64();
  sub_1D42CB9F8();
  sub_1D42B28FC((uint64_t *)&unk_1EFE4CCC0);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D44A3B40();
  sub_1D44A3CE0();
  sub_1D43C2340(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_1D44A3B10();
  sub_1D44A3C30();
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC88);
  sub_1D44A39C0();
  sub_1D44A3BF8();
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449D4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  sub_1D42CB740();
  sub_1D42B28FC(&qword_1EFE4CB48);
  sub_1D44A3E1C();
  MEMORY[0x1E0C80A78](v1);
  sub_1D43479B4();
  sub_1D42B28FC(&qword_1EFE4CBF8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v2);
  sub_1D434799C();
  sub_1D42B28FC(&qword_1EFE4CC38);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44A3B70();
  sub_1D42CB9F8();
  sub_1D42B28FC((uint64_t *)&unk_1EFE4A660);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D44A3B9C();
  sub_1D42B28FC(&qword_1EFE4CC80);
  sub_1D44A3F40();
  sub_1D451A110();
  sub_1D44A3B8C();
  sub_1D44A3E44();
  sub_1D451A110();
  sub_1D44A3F1C();
  sub_1D4340970(v0, v4);
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC88);
  sub_1D44A3F68();
  v5 = sub_1D44A3DA8();
  sub_1D42F1FA0(v5, v6);
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449D660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D42CB740();
  sub_1D42B28FC(&qword_1EFE4CBF0);
  sub_1D437EDFC();
  MEMORY[0x1E0C80A78](v1);
  sub_1D43408A0();
  MEMORY[0x1E0C80A78](v2);
  v5 = *(_QWORD *)(sub_1D42B28FC(&qword_1EFE4CC38) - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44A3954();
  sub_1D42CB9F8();
  sub_1D42B28FC((uint64_t *)&unk_1EFE403D0);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D44A3B9C();
  v4 = sub_1D42B6F40();
  sub_1D44A3D98(v4);
  sub_1D451A104();
  sub_1D42B6F8C();
  sub_1D44A3E0C();
  sub_1D44A3D2C();
  sub_1D44A3F7C();
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC88);
  sub_1D44A3B68();
  sub_1D4340970(v0, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_1D44A3F28();
  sub_1D42CB520();
}

void sub_1D449D7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t AssociatedTypeWitness;
  uint64_t v49;
  char *v50;
  uint64_t AssociatedConformanceWitness;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  void (*v67)(uint64_t *@<X8>);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (**v74)(uint64_t *@<X8>);
  void (**v75)(uint64_t);
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[2];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  sub_1D42BE910();
  v99 = v24;
  v100 = v21;
  v26 = v25;
  v97 = v27;
  v80[1] = v28;
  v96 = v29;
  v31 = v30;
  v33 = v32;
  v98 = a21;
  v34 = sub_1D42B28FC(&qword_1EFE4CBF0);
  v81 = *(_QWORD *)(v34 - 8);
  v82 = v34;
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v35);
  sub_1D437EC98();
  v36 = sub_1D42B28FC(&qword_1EFE4CD30);
  v83 = *(_QWORD *)(v36 - 8);
  v84 = v36;
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v37);
  sub_1D438E8B8();
  v88 = sub_1D42B28FC(&qword_1EFE4CD38);
  v85 = *(_QWORD *)(v88 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v38);
  sub_1D42BE768();
  v95 = v39;
  v89 = sub_1D42B28FC(&qword_1EFE4CD40);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v40);
  sub_1D43C2368(v41, v80[0]);
  v42 = sub_1D42B28FC(&qword_1EFE4CD48);
  v90 = *(_QWORD *)(v42 - 8);
  v91 = v42;
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v43);
  sub_1D44A3D10(v44, v80[0]);
  v45 = sub_1D42B28FC(&qword_1EFE4CD50);
  v93 = *(_QWORD *)(v45 - 8);
  v94 = v45;
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v46);
  sub_1D441907C(v47, v80[0]);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v101 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v50 = (char *)v80 - v49;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(v33, v31, AssociatedTypeWitness, AssociatedConformanceWitness);
  v52 = v100;
  v53 = sub_1D436A7EC((uint64_t)v50, v99, 0, v26, v98);
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v101 + 8))(v50, AssociatedTypeWitness);
  }
  else
  {
    v55 = v53;
    v56 = v54;
    sub_1D42B28FC(&qword_1EFE4CB60);
    v100 = 0;
    v99 = sub_1D42B28FC((uint64_t *)&unk_1EFE403D0);
    sub_1D44A02F8((uint64_t)&unk_1EFE4CB70);
    sub_1D44A3F40();
    sub_1D451A3A4();
    sub_1D42B28FC((uint64_t *)&unk_1EFE4CD58);
    sub_1D451A104();
    sub_1D4307058(v23, *(uint64_t (**)(uint64_t, uint64_t))(v81 + 8));
    sub_1D42B28FC(&qword_1EFE4C7B0);
    sub_1D451A104();
    sub_1D4307058(v22, *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
    v57 = sub_1D42B6F40();
    *(_QWORD *)(v57 + 16) = v55;
    *(_QWORD *)(v57 + 24) = v56;
    v58 = sub_1D42B6F40();
    v59 = v56;
    v60 = v96;
    *(_QWORD *)(v58 + 16) = v96;
    v61 = v60;
    v62 = v55;
    v63 = sub_1D42B6F40();
    *(_QWORD *)(v63 + 16) = sub_1D435CBF8;
    *(_QWORD *)(v63 + 24) = v58;
    v64 = sub_1D42B6F40();
    *(_QWORD *)(v64 + 16) = sub_1D435CC10;
    *(_QWORD *)(v64 + 24) = v63;
    v65 = sub_1D42B6F40();
    *(_QWORD *)(v65 + 16) = sub_1D435CBE0;
    *(_QWORD *)(v65 + 24) = v57;
    v66 = (void (*)(uint64_t))sub_1D42B6F40();
    *((_QWORD *)v66 + 2) = sub_1D449FFBC;
    *((_QWORD *)v66 + 3) = 0;
    *((_QWORD *)v66 + 4) = sub_1D44A01D0;
    *((_QWORD *)v66 + 5) = v65;
    *((_QWORD *)v66 + 6) = sub_1D44A0198;
    *((_QWORD *)v66 + 7) = v64;
    v67 = (void (*)(uint64_t *@<X8>))sub_1D42B6F40();
    *((_QWORD *)v67 + 2) = v62;
    *((_QWORD *)v67 + 3) = v59;
    v80[0] = v62;
    *((_QWORD *)v67 + 4) = v61;
    v69 = v85;
    v68 = v86;
    v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16);
    v97 = v50;
    v98 = AssociatedTypeWitness;
    v71 = v95;
    v72 = v88;
    v70(v86, v95, v88);
    v73 = v89;
    v74 = (void (**)(uint64_t *@<X8>))(v68 + *(int *)(v89 + 52));
    *v74 = sub_1D435CCD0;
    v74[1] = v67;
    v75 = (void (**)(uint64_t))(v68 + *(int *)(v73 + 56));
    *v75 = sub_1D435CC84;
    v75[1] = v66;
    v76 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v76(v71, v72);
    sub_1D44A02F8((uint64_t)&unk_1EFE4CD68);
    v77 = v87;
    sub_1D451A308();
    sub_1D44A032C(v68, &qword_1EFE4CD40);
    v78 = v92;
    sub_1D44A3F40();
    sub_1D451A0C8();
    sub_1D4307058(v77, *(uint64_t (**)(uint64_t, uint64_t))(v90 + 8));
    sub_1D44A02F8((uint64_t)&unk_1EFE4CD70);
    v79 = v94;
    sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v78, v79);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v97, v98);
  }
  sub_1D42BE844();
}

void sub_1D449DD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1D42CB740();
  v3 = v2;
  v9 = v4;
  v5 = sub_1D42B28FC(&qword_1EFE4CBF0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE4CC38);
  sub_1D437EDFC();
  MEMORY[0x1E0C80A78](v7);
  sub_1D44A3954();
  sub_1D42CB9F8();
  sub_1D42B28FC((uint64_t *)&unk_1EFE403D0);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D44A3B9C();
  v8 = sub_1D42B8DB4();
  *(_QWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 24) = v3;
  sub_1D438C74C();
  sub_1D451A104();
  sub_1D42B6F8C();
  sub_1D4340970(v1, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC88);
  sub_1D44A39C0();
  sub_1D42BE98C(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449DEB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1D42CB740();
  v4 = v3;
  v6 = v5;
  sub_1D42B28FC(&qword_1EFE4CBE0);
  sub_1D437EDFC();
  MEMORY[0x1E0C80A78](v7);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE4CBE8);
  sub_1D42CB4F8();
  MEMORY[0x1E0C80A78](v8);
  sub_1D44A3954();
  v9 = sub_1D42B8DB4();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v4;
  sub_1D438C74C();
  sub_1D42CB9F8();
  sub_1D42B28FC((uint64_t *)&unk_1EFE403D0);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D451A308();
  sub_1D42B6F8C();
  sub_1D44A3EA8();
  sub_1D451A0C8();
  sub_1D4340970(v1, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_1D44A02F8((uint64_t)&unk_1EFE4CCB8);
  sub_1D44A39C0();
  sub_1D42BE98C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449DFF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1D42CB740();
  v11 = v3;
  v12 = v4;
  v5 = sub_1D42B28FC(&qword_1EFE4CBC8);
  sub_1D42CB4F8();
  MEMORY[0x1E0C80A78](v6);
  sub_1D42D7108();
  v7 = (int *)sub_1D42B28FC(&qword_1EFE4CBD0);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v8);
  sub_1D438E8B8();
  sub_1D42B28FC(&qword_1EFE4CBD8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v9);
  sub_1D44A3954();
  sub_1D42CB9F8();
  v10 = sub_1D42B28FC(&qword_1EFE4CC90);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D44A3E44();
  sub_1D451A308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0, v5);
  *(_QWORD *)(v1 + v7[15]) = v11;
  *(_QWORD *)(v1 + v7[16]) = v12;
  *(_QWORD *)(v1 + v7[17]) = v10;
  sub_1D44A3F34(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1D44A02F8((uint64_t)&unk_1EFE4CCA0);
  sub_1D451A308();
  sub_1D44A032C(v1, &qword_1EFE4CBD0);
  sub_1D44A02F8((uint64_t)&unk_1EFE4CCA8);
  sub_1D44A39C0();
  sub_1D44A3B28();
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449E1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_1D42CB740();
  v3 = sub_1D42B28FC(&qword_1EFE4CC28);
  v17 = *(_QWORD *)(v3 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v4);
  sub_1D43479B4();
  v5 = sub_1D42B28FC(&qword_1EFE4CBB8);
  v16 = *(_QWORD *)(v5 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1D42B28FC(&qword_1EFE4CBC0);
  v20 = *(_QWORD *)(v18 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v9);
  sub_1D437EC98();
  v19 = sub_1D42B28FC(&qword_1EFE4CB40);
  v22 = *(_QWORD *)(v19 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v10);
  sub_1D438E8B8();
  v21 = sub_1D42B28FC(&qword_1EFE4CC38);
  v23 = *(_QWORD *)(v21 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v11);
  sub_1D44A3B70();
  sub_1D42CB9F8();
  sub_1D42B28FC(&qword_1EFE4CC90);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D44A3E44();
  sub_1D451A3A4();
  sub_1D42B28FC(&qword_1EFE4CC98);
  sub_1D451A104();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v0, v3);
  sub_1D451A110();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v5);
  sub_1D42B28FC(&qword_1EFE4CB68);
  sub_1D451A110();
  sub_1D42F1FA0(v2, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  sub_1D451A110();
  sub_1D44A3F1C();
  sub_1D42F1FA0(v1, v12);
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC88);
  sub_1D44A3F68();
  v13 = sub_1D44A3DA8();
  sub_1D4340970(v13, v14);
  sub_1D44A3F28();
  sub_1D42CB520();
}

void sub_1D449E434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D42CB740();
  v4 = *(_QWORD *)(sub_1D42B28FC(&qword_1EFE4CBF8) - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE4CC38);
  sub_1D44A3CC4();
  MEMORY[0x1E0C80A78](v1);
  sub_1D43408A0();
  MEMORY[0x1E0C80A78](v2);
  sub_1D44A3C64();
  sub_1D42CB9F8();
  sub_1D42B28FC(&qword_1EFE4CC80);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D44A3B9C();
  v3 = sub_1D42B6F40();
  sub_1D44A3D98(v3);
  sub_1D451A104();
  sub_1D42B6F8C();
  sub_1D43C2340(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1D44A3B10();
  sub_1D44A3C30();
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC88);
  sub_1D44A39C0();
  sub_1D44A3BF8();
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449E58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  sub_1D42CB740();
  v1 = sub_1D42B28FC(&qword_1EFE4CBA0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  sub_1D42D7108();
  sub_1D42B28FC(&qword_1EFE4CBA8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v3);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE4CBB0);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v4);
  sub_1D44A3954();
  sub_1D42CB9F8();
  sub_1D42B28FC(&qword_1EFE4BE50);
  sub_1D44A3A10((uint64_t)&unk_1EFE4CB70);
  sub_1D451A3A4();
  sub_1D449F710();
  sub_1D44A3F34(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC70);
  sub_1D44A3EA8();
  sub_1D451A308();
  sub_1D44A3F1C();
  sub_1D4340970(v0, v5);
  sub_1D44A02F8((uint64_t)&unk_1EFE4CC78);
  sub_1D44A39C0();
  sub_1D44A3B28();
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D449E718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  sub_1D44A3E80(a1, a2, a3, a4, a5, a6, a7);
  sub_1D42B28FC(&qword_1EFE4CD10);
  if ((sub_1D42B6E2C() & 1) != 0)
  {
    v8 = v10;
    *(_OWORD *)v7 = v9;
    *(_OWORD *)(v7 + 16) = v8;
    *(_QWORD *)(v7 + 32) = v11;
  }
  else
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
    sub_1D44A032C((uint64_t)&v9, &qword_1EFE54EC8);
    sub_1D42FBCD0();
    sub_1D42B6D0C();
    sub_1D4312028();
  }
  sub_1D42EA500();
}

uint64_t sub_1D449E7B4(uint64_t a1)
{
  return sub_1D449E8B0(a1, &qword_1EFE557C0, (uint64_t)&unk_1EFE557D0, (uint64_t)&qword_1EFE496D8);
}

uint64_t sub_1D449E7D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D449F00C(a1, (uint64_t *)&unk_1EFE4A660, a2);
}

void sub_1D449E7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D449F68C(a1, (uint64_t *)&unk_1EFE4A660, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1D449E7F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D4495E9C(*a1, a2);
}

uint64_t sub_1D449E824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D42B294C(a1, a2);
}

void sub_1D449E82C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _BYTE v4[32];

  sub_1D42B294C(a1, (uint64_t)v4);
  sub_1D42B28FC((uint64_t *)&unk_1EFE4A660);
  if ((sub_1D42B6E2C() & 1) != 0)
  {
    *a2 = v3;
  }
  else
  {
    sub_1D42FBCD0();
    sub_1D42B6D0C();
    sub_1D4312028();
  }
  sub_1D4334190();
}

uint64_t sub_1D449E8B0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1D44A3EBC(a1, a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42F1ED4();
  sub_1D42CB9F8();
  sub_1D44A3A10(a4);
  sub_1D451A830();
  sub_1D42B28FC(&qword_1EFE49BB0);
  sub_1D451A140();
  return sub_1D43C2340(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
}

void sub_1D449E980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D449F68C(a1, (uint64_t *)&unk_1EFE403D0, a3, a4, a5, a6, a7, a8);
}

void sub_1D449E99C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_1D42B71E4(a1);
  v4 = sub_1D4494A88(v3, (void (*)(__int128 *, __int128 *, __int128 *))sub_1D44A0160);
  if (!v2)
  {
    sub_1D449558C(v4);
    v6 = v5;
    swift_bridgeObjectRelease();
    *v1 = v6;
  }
  sub_1D4334190();
}

_OWORD *sub_1D449EA08(uint64_t *a1, _OWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[32];
  _QWORD v16[2];
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];

  v6 = a3[1];
  v8 = (uint64_t)(a3 + 2);
  v18 = *a3;
  v7 = v18;
  v19 = v6;
  sub_1D42B294C((uint64_t)(a3 + 2), (uint64_t)v20);
  swift_bridgeObjectRetain();
  sub_1D43647D8(v18, v6, a4);
  v10 = v9;
  v12 = v11;
  swift_bridgeObjectRelease();
  v16[0] = v18;
  v16[1] = v6;
  sub_1D42B294C(v8, (uint64_t)v17);
  if (v12)
  {
    swift_bridgeObjectRetain();
    sub_1D44A032C((uint64_t)v16, &qword_1EFE51AB0);
  }
  else
  {
    sub_1D42B294C((uint64_t)v17, (uint64_t)v15);
    swift_bridgeObjectRetain_n();
    sub_1D44A032C((uint64_t)v16, &qword_1EFE51AB0);
    v10 = v7;
    v12 = v6;
    sub_1D42B5400((uint64_t)v15);
  }
  sub_1D42B5400((uint64_t)v20);
  sub_1D42B294C(v8, (uint64_t)v17);
  sub_1D42B293C(v17, v20);
  sub_1D42B293C(v20, v17);
  *a1 = v10;
  a1[1] = v12;
  return sub_1D42B293C(v17, a2);
}

uint64_t sub_1D449EB68@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D449F00C(a1, (uint64_t *)&unk_1EFE403D0, a2);
}

void sub_1D449EB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;

  sub_1D44A3E70(a1, a2, a3, a4, a5, a6, a7, a8, v11);
  v9 = sub_1D42B28FC((uint64_t *)&unk_1EFE4A660);
  if ((sub_1D42B6E2C() & 1) != 0)
  {
    v8[3] = v9;
    v8[4] = &off_1E97AD828;
    *v8 = v12;
  }
  else
  {
    sub_1D44A00C4();
    sub_1D42B6D0C();
    *v10 = 0;
    sub_1D4312028();
  }
  sub_1D4334190();
}

void sub_1D449EC08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D44A029C(a1, a2);
}

void sub_1D449EC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _BYTE *v8;
  __int128 v9[2];
  uint64_t v10;

  sub_1D44A3E80(a1, a2, a3, a4, a5, a6, a7);
  sub_1D42B28FC((uint64_t *)&unk_1EFE4CCC0);
  if ((sub_1D42B6E2C() & 1) != 0)
  {
    sub_1D42E33E0(v9, v7);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    sub_1D44A032C((uint64_t)v9, &qword_1EFE54EE8);
    sub_1D44A00C4();
    sub_1D42B6D0C();
    *v8 = 0;
    sub_1D4312028();
  }
  sub_1D42EA500();
}

void sub_1D449ECC0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = a1[3];
  v1 = a1[4];
  sub_1D42B5528(a1, v2);
  (*(void (**)(void (*)(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 + 8) + 8))(sub_1D449ED20, 0, MEMORY[0x1E0DEE9B8] + 8, v2);
  sub_1D42CB758();
}

void sub_1D449ED20(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  a3[3] = sub_1D42B28FC((uint64_t *)&unk_1EFE4A660);
  if (a1)
    sub_1D44AD12C(a1, (a2 - a1) / 4);
  else
    v6 = MEMORY[0x1E0DEE9D8];
  *a3 = v6;
}

void sub_1D449ED8C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  unint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1D42C7654();
    v5 = v9;
    v6 = (float *)(v3 + 32);
    v7 = *(_QWORD *)(v9 + 16);
    do
    {
      v8 = *v6;
      v10 = v5;
      if (v7 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_1D42C7654();
        v5 = v10;
      }
      *(_QWORD *)(v5 + 16) = v7 + 1;
      *(double *)(v5 + 8 * v7 + 32) = v8;
      ++v6;
      ++v7;
      --v4;
    }
    while (v4);
  }
  *a2 = v5;
}

uint64_t sub_1D449EE60@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D449F00C(a1, &qword_1EFE4CC80, a2);
}

void sub_1D449EE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D449F68C(a1, &qword_1EFE4CC90, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1D449EE88(uint64_t a1)
{
  return sub_1D449E8B0(a1, &qword_1EFE54ED8, (uint64_t)&qword_1EFE4CC90, (uint64_t)&unk_1EFE54EE0);
}

void sub_1D449EEA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1D42B71E4(a1);
  v4 = sub_1D449F85C(v3);
  if (!v2)
    *v1 = v4;
  sub_1D43AAC78();
}

void sub_1D449EEC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_1D42B71E4(a1);
  *v1 = sub_1D449FB18(v2);
  sub_1D43AAC78();
}

void sub_1D449EEE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_1D42B71E4(a1);
  *v1 = sub_1D449FD70(v2);
  sub_1D42CB758();
}

uint64_t sub_1D449EF14(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *a1;
  sub_1D44A3F9C();
  sub_1D4495A5C(v5, a2, a3);
  return sub_1D42BE8B4();
}

uint64_t sub_1D449EF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t inited;
  uint64_t result;

  sub_1D44A3C54();
  v4 = v3;
  sub_1D42B28FC((uint64_t *)&unk_1EFE498B0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D45261D0;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = v0;
  sub_1D42B294C(v2, inited + 48);
  sub_1D42CB7B8();
  result = sub_1D451A5E4();
  *v4 = result;
  return result;
}

uint64_t sub_1D449F000@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D449F00C(a1, &qword_1EFE4CC90, a2);
}

uint64_t sub_1D449F00C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = *a1;
  a3[3] = sub_1D44A3EBC((uint64_t)a1, a2);
  *a3 = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D449F03C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  __int128 v9[2];
  uint64_t v10;
  _BYTE v11[32];
  __int128 v12[2];
  _BYTE v13[32];
  __int128 v14[3];
  _QWORD *v15;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v8 = a2;
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v4 = &v15;
    sub_1D42C7B9C();
    v5 = v2 + 32;
    while (1)
    {
      sub_1D42B294C(v5, (uint64_t)v13);
      sub_1D42B294C((uint64_t)v13, (uint64_t)v11);
      sub_1D42B28FC(&qword_1EFE4CB68);
      if (!sub_1D42B6E2C())
        break;
      sub_1D42E33E0(v9, (uint64_t)v12);
      sub_1D42E33E0(v12, (uint64_t)v14);
      sub_1D42B5400((uint64_t)v13);
      if ((sub_1D44A3F70() & 1) == 0)
      {
        sub_1D44A3E2C();
        sub_1D42C7B9C();
        v4 = v15;
      }
      v6 = v4[2];
      if (v6 >= v4[3] >> 1)
      {
        sub_1D42C7B9C();
        v4 = v15;
      }
      v4[2] = v6 + 1;
      result = sub_1D42E33E0(v14, (uint64_t)&v4[5 * v6 + 4]);
      v5 += 32;
      if (!--v3)
      {
        a2 = v8;
        goto LABEL_11;
      }
    }
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    sub_1D44A032C((uint64_t)v9, &qword_1EFE50750);
    sub_1D44A00C4();
    sub_1D42B6D0C();
    *v7 = 0;
    sub_1D4312028();
    sub_1D42B5400((uint64_t)v13);
    return swift_release();
  }
  else
  {
LABEL_11:
    *a2 = v4;
  }
  return result;
}

uint64_t sub_1D449F1E8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[5];
  _QWORD v9[4];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = *a1;
  if (*(_QWORD *)(result + 16))
  {
    v3 = result + 32;
    swift_bridgeObjectRetain();
    sub_1D44A029C(v3, (uint64_t)v10);
    v4 = v11;
    v5 = v12;
    sub_1D42B5528(v10, v11);
    v6 = MEMORY[0x1E0CB0338];
    (*(void (**)(_QWORD *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD, _QWORD, uint64_t, uint64_t))(v5 + 8))(v9, sub_1D44A38A0, 0, MEMORY[0x1E0CB0338], v4, v5);
    v9[2] = 0;
    v9[3] = 0xC000000000000000;
    v8[3] = v6;
    v8[4] = MEMORY[0x1E0CB0318];
    v8[0] = v9[0];
    v8[1] = v9[1];
    v7 = (char *)&loc_1D449F2C4 + *((int *)qword_1D449F540 + (sub_1D42B5528(v8, v6)[1] >> 62));
    __asm { BR              X9 }
  }
  *a2 = 0;
  a2[1] = 0xC000000000000000;
  return result;
}

uint64_t sub_1D449F550@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  a2[3] = MEMORY[0x1E0CB0338];
  a2[4] = (uint64_t)&off_1E9797760;
  *a2 = v3;
  a2[1] = v2;
  return sub_1D42DD16C(v3, v2);
}

uint64_t sub_1D449F574@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;

  v3 = a1[3];
  v4 = sub_1D42B5528(a1, v3);
  a2[3] = v3;
  v5 = sub_1D430BBF0(a2);
  return (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v5, v4, v3);
}

void sub_1D449F5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D449F68C(a1, &qword_1EFE4CC80, a3, a4, a5, a6, a7, a8);
}

void sub_1D449F5E0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _BYTE *v7;

  v4 = *a1;
  if (*(_QWORD *)(*a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    sub_1D4326750();
    sub_1D42DCE84();
    v6 = sub_1D4459FCC(a2, v4);
    a3[3] = sub_1D42B28FC(&qword_1EFE4BE50);
    *a3 = v6;
  }
  else
  {
    sub_1D44A00C4();
    sub_1D42B6D0C();
    *v7 = 1;
    sub_1D4312028();
  }
  sub_1D42BE888();
}

void sub_1D449F670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D449F68C(a1, &qword_1EFE4BE50, a3, a4, a5, a6, a7, a8);
}

void sub_1D449F68C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;

  sub_1D44A3E70(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v11);
  sub_1D42B28FC(a2);
  if ((sub_1D42B6E2C() & 1) != 0)
  {
    *v8 = v12;
  }
  else
  {
    sub_1D44A00C4();
    sub_1D42B6D0C();
    *v10 = 0;
    sub_1D4312028();
  }
  sub_1D4334190();
}

void sub_1D449F710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (**v12)@<X0>(uint64_t *@<X0>, uint64_t *@<X1>, uint64_t *@<X8>);

  sub_1D42CB740();
  v3 = v2;
  v5 = v4;
  v6 = sub_1D42B28FC(&qword_1EFE4CB98);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v7);
  sub_1D42CB18C();
  v8 = sub_1D42B8DB4();
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v3;
  v9 = sub_1D42B8DB4();
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = v3;
  v10 = sub_1D42B28FC(&qword_1EFE4CBA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v1, v0, v10);
  v11 = (_QWORD *)(v1 + *(int *)(v6 + 52));
  *v11 = sub_1D435C9F0;
  v11[1] = v9;
  v12 = (uint64_t (**)@<X0>(uint64_t *@<X0>, uint64_t *@<X1>, uint64_t *@<X8>))(v1 + *(int *)(v6 + 56));
  *v12 = sub_1D435C9D8;
  v12[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X1>, uint64_t *@<X8>))v8;
  sub_1D44A3D54((uint64_t)&unk_1EFE4CC68);
  swift_bridgeObjectRetain_n();
  sub_1D44A3E44();
  sub_1D451A2F0();
  sub_1D44A3D4C(v1);
}

uint64_t sub_1D449F844@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  a2[3] = MEMORY[0x1E0DEA968];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D449F85C(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  __int128 v24[2];
  uint64_t v25;
  _BYTE v26[32];
  __int128 v27[2];
  _BYTE v28[40];
  int64_t v29;

  sub_1D42B28FC(&qword_1EFE54EF8);
  result = sub_1D451B5B0();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v29 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v15;
    v16 = v15[1];
    sub_1D42B294C(*(_QWORD *)(a1 + 56) + 32 * i, (uint64_t)v28);
    sub_1D42B294C((uint64_t)v28, (uint64_t)v26);
    swift_bridgeObjectRetain();
    sub_1D42B28FC((uint64_t *)&unk_1EFE4CCC0);
    if (!swift_dynamicCast())
    {
      v25 = 0;
      memset(v24, 0, sizeof(v24));
      sub_1D44A032C((uint64_t)v24, &qword_1EFE54EE8);
      sub_1D44A00C4();
      swift_allocError();
      *v22 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1D42B5400((uint64_t)v28);
      return (uint64_t)v3;
    }
    sub_1D42E33E0(v24, (uint64_t)v27);
    sub_1D42B5400((uint64_t)v28);
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v18 = (_QWORD *)(v3[6] + 16 * i);
    *v18 = v17;
    v18[1] = v16;
    result = sub_1D42E33E0(v27, v3[7] + 40 * i);
    v19 = v3[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v3[2] = v21;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_26;
    if (v12 >= v29)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v23 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v29)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v23 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v29)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v23 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v29)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v23 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v29)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v23 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1D449FB18(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  BOOL v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__int128 *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  int64_t v35;

  sub_1D42B28FC(&qword_1EFE52890);
  result = sub_1D451B5B0();
  v3 = 0;
  v29 = a1;
  v30 = (_QWORD *)result;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v26 = v5;
  v27 = (unint64_t)(v7 + 63) >> 6;
  v28 = result + 64;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v35 = v3;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v14)) + (v13 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v29 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    sub_1D44A029C(*(_QWORD *)(v29 + 56) + 40 * i, (uint64_t)v32);
    v19 = v33;
    v20 = v34;
    sub_1D42B5528(v32, v33);
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(void (**)(__int128 *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD, _QWORD, uint64_t, uint64_t))(v21 + 8);
    swift_bridgeObjectRetain();
    v22(&v31, sub_1D42DD140, 0, MEMORY[0x1E0CB0338], v19, v21);
    sub_1D42B5400((uint64_t)v32);
    *(_QWORD *)(v28 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = (uint64_t)v30;
    v23 = (_QWORD *)(v30[6] + 16 * i);
    *v23 = v17;
    v23[1] = v18;
    *(_OWORD *)(v30[7] + 16 * i) = v31;
    v24 = v30[2];
    v12 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    if (v12)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v30[2] = v25;
    v3 = v35;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v12 = __OFADD__(v3, 1);
    v13 = v3 + 1;
    if (v12)
      goto LABEL_25;
    if (v13 >= v27)
      return result;
    v14 = *(_QWORD *)(v26 + 8 * v13);
    if (!v14)
      break;
LABEL_15:
    v9 = (v14 - 1) & v14;
    v35 = v13;
  }
  v15 = v13 + 1;
  if (v13 + 1 >= v27)
    return result;
  v14 = *(_QWORD *)(v26 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v13 + 2;
  if (v13 + 2 >= v27)
    return result;
  v14 = *(_QWORD *)(v26 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v13 + 3;
  if (v13 + 3 >= v27)
    return result;
  v14 = *(_QWORD *)(v26 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v13 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v27)
      return result;
    v14 = *(_QWORD *)(v26 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1D449FD70(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  sub_1D42B28FC(&qword_1EFE4D458);
  result = sub_1D451B5B0();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v28 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * i);
    v21 = *v19;
    v20 = v19[1];
    v27 = MEMORY[0x1E0CB0338];
    *(_QWORD *)&v26 = v21;
    *((_QWORD *)&v26 + 1) = v20;
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v22 = (_QWORD *)(v3[6] + 16 * i);
    *v22 = v17;
    v22[1] = v18;
    result = (uint64_t)sub_1D42B293C(&v26, (_OWORD *)(v3[7] + 32 * i));
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v25;
    swift_bridgeObjectRetain();
    result = sub_1D42DD16C(v21, v20);
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v28 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v28 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v28 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v28 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1D449FF6C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a1 + 12);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

void sub_1D449FF8C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1D44967CC(*a1, a1[1], a2);
  if (!v3)
  {
    *a3 = v5;
    a3[1] = v6;
  }
  sub_1D43AAC78();
}

void sub_1D449FFBC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = sub_1D42B71E4(a1);
  v5 = sub_1D449663C(v3, *v4);
  if (!v2)
    *v1 = v5;
  sub_1D43AAC78();
}

void sub_1D449FFE4(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = a4(*a3);
  if (!v4)
  {
    *a2 = v8;
    *a1 = v7;
  }
  sub_1D42BE888();
}

uint64_t sub_1D44A001C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t result;

  v3 = sub_1D42B71E4(a1);
  result = v4(v3);
  if (!v2)
    *v1 = result;
  return result;
}

void sub_1D44A0048(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *(*v5)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v8;
  void (*v9)(_QWORD **, uint64_t *, uint64_t *);
  _QWORD *v10;

  v3 = sub_1D42B71E4(a1);
  v10 = sub_1D4496564(v3, v4, v5, v6, v7, v8, v9);
  if (!v2)
    *v1 = v10;
  sub_1D43AAC78();
}

void sub_1D44A006C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = sub_1D4495F00(a1, a2);
  if (!v3)
    *a3 = v5;
  sub_1D43AAC78();
}

uint64_t sub_1D44A0090()
{
  sub_1D42B8F98();
  sub_1D42EA3A0();
  return swift_deallocObject();
}

uint64_t sub_1D44A00A8(float32x4_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1D4496434(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD **)(v2 + 32));
}

unint64_t sub_1D44A00C4()
{
  unint64_t result;

  result = qword_1EFE54ED0;
  if (!qword_1EFE54ED0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D45498D0, &unk_1E97A44C0);
    atomic_store(result, (unint64_t *)&qword_1EFE54ED0);
  }
  return result;
}

void sub_1D44A0100()
{
  sub_1D44B1050();
}

void sub_1D44A0108(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = sub_1D42B71E4(a1);
  v5 = sub_1D42BDC24(v3, v4);
  if (!v2)
    *v1 = v5;
  sub_1D43AAC78();
}

uint64_t sub_1D44A012C()
{
  return swift_deallocObject();
}

uint64_t sub_1D44A013C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_OWORD *sub_1D44A0160(uint64_t *a1, _OWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_1D449EA08(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1D44A0178()
{
  swift_release();
  sub_1D42B8F98();
  sub_1D42EA3A0();
  return swift_deallocObject();
}

void sub_1D44A0198(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = (*(uint64_t (**)(_QWORD))(v3 + 16))(*a3);
  if (!v4)
  {
    *a2 = v8;
    *a1 = v7;
  }
  sub_1D42BE888();
}

uint64_t sub_1D44A01D0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_1D44A0200()
{
  sub_1D42B8F98();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44A0230()
{
  swift_release();
  sub_1D42B8F98();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1D44A0260()
{
  swift_bridgeObjectRelease();
  sub_1D42EA3A0();
  return swift_deallocObject();
}

void sub_1D44A027C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_1D435395C(a1);
  *a2 = v3;
  sub_1D42B6E24();
}

void sub_1D44A029C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_1D42B6E24();
}

uint64_t sub_1D44A02DC()
{
  swift_bridgeObjectRelease();
  sub_1D42EA3A0();
  return swift_deallocObject();
}

void sub_1D44A02F8(uint64_t a1)
{
  uint64_t *v1;

  if (!sub_1D42CBA5C(a1))
  {
    sub_1D42B8B10(v1);
    sub_1D43F8A34();
  }
  sub_1D42B6E24();
}

void sub_1D44A032C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1D44A3EBC(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_1D42B6E24();
}

unint64_t sub_1D44A0360()
{
  unint64_t result;

  result = qword_1EFE54F08;
  if (!qword_1EFE54F08)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DBB0, &type metadata for JSONUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_1EFE54F08);
  }
  return result;
}

unint64_t sub_1D44A039C()
{
  unint64_t result;

  result = qword_1EFE54F10;
  if (!qword_1EFE54F10)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549880, &unk_1E97A6460);
    atomic_store(result, (unint64_t *)&qword_1EFE54F10);
  }
  return result;
}

void type metadata accessor for SNPipelineModelRecipe()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44A03E4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D44A0430 + 4 * byte_1D4549644[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D44A0464 + 4 * byte_1D454963F[v4]))();
}

uint64_t sub_1D44A0464(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44A046C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44A0474);
  return result;
}

uint64_t sub_1D44A0480(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44A0488);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D44A048C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44A0494(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SNPipelineModelUtils.DomainError()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44A04AC(uint64_t *a1)
{
  return sub_1D42D6E9C(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1D44A04C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_DWORD *)(a2 + 48);
  sub_1D42D6EFC(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 48) = v9;
  return a1;
}

uint64_t sub_1D44A053C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_DWORD *)(a2 + 48);
  sub_1D42D6EFC(*(_QWORD *)a2, v4, v5, v6);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 48) = v9;
  sub_1D42D6E9C(v10, v11, v12, v13);
  return a1;
}

__n128 sub_1D44A05C8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1D44A05E4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = *(_DWORD *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = v3;
  sub_1D42D6E9C(v4, v6, v5, v7);
  return a1;
}

uint64_t sub_1D44A0638(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 > 0x7FFFFFF7 && *(_BYTE *)(a1 + 52))
    {
      v2 = *(_DWORD *)a1 + 2147483639;
    }
    else if ((((*(_DWORD *)(a1 + 24) >> 28) & 0x8000000F | (16 * ((*(_DWORD *)(a1 + 24) >> 1) & 0x7FFFFFF))) ^ 0x7FFFFFFF) >= 0x7FFFFFF7)
    {
      v2 = -1;
    }
    else
    {
      v2 = ((*(_DWORD *)(a1 + 24) >> 28) & 0x8000000F | (16 * ((*(_DWORD *)(a1 + 24) >> 1) & 0x7FFFFFF))) ^ 0x7FFFFFFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t sub_1D44A068C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFF7)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 2147483640;
    if (a3 > 0x7FFFFFF7)
      *(_BYTE *)(result + 52) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFF7)
      *(_BYTE *)(result + 52) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 2 * ((-a2 >> 4) & 0x7FFFFFF) - (a2 << 28);
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_DWORD *)(result + 48) = 0;
    }
  }
  return result;
}

uint64_t sub_1D44A0704(_DWORD *a1)
{
  int v1;

  v1 = a1[6];
  if (v1 >= 0)
    return v1 >> 28;
  else
    return (*a1 + 8);
}

uint64_t sub_1D44A0720(uint64_t result)
{
  *(_QWORD *)(result + 24) &= 0xFFFFFFFF0FFFFFFFLL;
  return result;
}

uint64_t sub_1D44A0730(uint64_t result, unsigned int a2)
{
  if (a2 < 8)
  {
    *(_QWORD *)(result + 24) = *(_QWORD *)(result + 24) & 0xFFFFFFFF00000001 | (a2 << 28);
  }
  else
  {
    *(_QWORD *)result = a2 - 8;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0x80000000;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_DWORD *)(result + 48) = 0;
  }
  return result;
}

void type metadata accessor for SNPipelineModelRecipe.Stage()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44A0778()
{
  unint64_t result;

  result = qword_1EFE54F18;
  if (!qword_1EFE54F18)
  {
    result = MEMORY[0x1D825E41C](&unk_1D45496F8, &unk_1E97A5AB0);
    atomic_store(result, (unint64_t *)&qword_1EFE54F18);
  }
  return result;
}

unint64_t sub_1D44A07B8()
{
  unint64_t result;

  result = qword_1EFE54F20;
  if (!qword_1EFE54F20)
  {
    result = MEMORY[0x1D825E41C](&unk_1D45497F0, &unk_1E97A44C0);
    atomic_store(result, (unint64_t *)&qword_1EFE54F20);
  }
  return result;
}

unint64_t sub_1D44A07F8()
{
  unint64_t result;

  result = qword_1EFE54F28;
  if (!qword_1EFE54F28)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549818, &unk_1E97A6460);
    atomic_store(result, (unint64_t *)&qword_1EFE54F28);
  }
  return result;
}

unint64_t sub_1D44A0834()
{
  unint64_t result;

  result = qword_1EFE54F38;
  if (!qword_1EFE54F38)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B7D4, &type metadata for SNPipelineModelRecipe.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE54F38);
  }
  return result;
}

unint64_t sub_1D44A0870()
{
  unint64_t result;

  result = qword_1EFE54F50;
  if (!qword_1EFE54F50)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549788, &unk_1E97A5AB0);
    atomic_store(result, (unint64_t *)&qword_1EFE54F50);
  }
  return result;
}

void sub_1D44A08AC(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  uint64_t v3;

  if (!sub_1D42CBA5C(a1))
  {
    sub_1D44A3ED0();
    sub_1D42B8B10(&qword_1EFE54F40);
    v2();
    v3 = sub_1D42CB9EC();
    atomic_store(MEMORY[0x1D825E41C](v3), v1);
  }
  sub_1D42CB758();
}

unint64_t sub_1D44A08FC()
{
  unint64_t result;

  result = qword_1EFE54F68;
  if (!qword_1EFE54F68)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549760, &unk_1E97A5AB0);
    atomic_store(result, (unint64_t *)&qword_1EFE54F68);
  }
  return result;
}

uint64_t *sub_1D44A0938(uint64_t *a1)
{
  sub_1D42D6E9C(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

unint64_t sub_1D44A0970()
{
  unint64_t result;

  result = qword_1EFE54FF0;
  if (!qword_1EFE54FF0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B784, &type metadata for SNPipelineModelRecipe.Stage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE54FF0);
  }
  return result;
}

unint64_t sub_1D44A09AC()
{
  unint64_t result;

  result = qword_1EFE54FF8;
  if (!qword_1EFE54FF8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B734, &type metadata for SNPipelineModelRecipe.Stage.SoundActionsPostProcessingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE54FF8);
  }
  return result;
}

unint64_t sub_1D44A09E8()
{
  unint64_t result;

  result = qword_1EFE55000;
  if (!qword_1EFE55000)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B70C, &unk_1E97A5C10);
    atomic_store(result, (unint64_t *)&qword_1EFE55000);
  }
  return result;
}

unint64_t sub_1D44A0A24()
{
  unint64_t result;

  result = qword_1EFE55008;
  if (!qword_1EFE55008)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B6BC, &type metadata for SNPipelineModelRecipe.Stage.LabelDoubleScoresCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55008);
  }
  return result;
}

unint64_t sub_1D44A0A60()
{
  unint64_t result;

  result = qword_1EFE55010;
  if (!qword_1EFE55010)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B694, &unk_1E97A5DE0);
    atomic_store(result, (unint64_t *)&qword_1EFE55010);
  }
  return result;
}

unint64_t sub_1D44A0A9C()
{
  unint64_t result;

  result = qword_1EFE55018;
  if (!qword_1EFE55018)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B644, &type metadata for SNPipelineModelRecipe.Stage.MergeBuffersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55018);
  }
  return result;
}

unint64_t sub_1D44A0AD8()
{
  unint64_t result;

  result = qword_1EFE55020;
  if (!qword_1EFE55020)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B61C, &unk_1E97A5CB0);
    atomic_store(result, (unint64_t *)&qword_1EFE55020);
  }
  return result;
}

unint64_t sub_1D44A0B14()
{
  unint64_t result;

  result = qword_1EFE55028;
  if (!qword_1EFE55028)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B5CC, &type metadata for SNPipelineModelRecipe.Stage.FlattenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55028);
  }
  return result;
}

unint64_t sub_1D44A0B50()
{
  unint64_t result;

  result = qword_1EFE55030;
  if (!qword_1EFE55030)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B5A4, &unk_1E97A6148);
    atomic_store(result, (unint64_t *)&qword_1EFE55030);
  }
  return result;
}

unint64_t sub_1D44A0B8C()
{
  unint64_t result;

  result = qword_1EFE55038;
  if (!qword_1EFE55038)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B554, &type metadata for SNPipelineModelRecipe.Stage.SliceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55038);
  }
  return result;
}

unint64_t sub_1D44A0BC8()
{
  unint64_t result;

  result = qword_1EFE55040;
  if (!qword_1EFE55040)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B52C, &unk_1E97A60A8);
    atomic_store(result, (unint64_t *)&qword_1EFE55040);
  }
  return result;
}

unint64_t sub_1D44A0C04()
{
  unint64_t result;

  result = qword_1EFE55048;
  if (!qword_1EFE55048)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B4DC, &type metadata for SNPipelineModelRecipe.Stage.AssignKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55048);
  }
  return result;
}

unint64_t sub_1D44A0C40()
{
  unint64_t result;

  result = qword_1EFE55050;
  if (!qword_1EFE55050)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B4B4, &unk_1E97A62B0);
    atomic_store(result, (unint64_t *)&qword_1EFE55050);
  }
  return result;
}

unint64_t sub_1D44A0C7C()
{
  unint64_t result;

  result = qword_1EFE55058;
  if (!qword_1EFE55058)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B464, &type metadata for SNPipelineModelRecipe.Stage.SelectKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55058);
  }
  return result;
}

unint64_t sub_1D44A0CB8()
{
  unint64_t result;

  result = qword_1EFE55060;
  if (!qword_1EFE55060)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B43C, &unk_1E97A63C0);
    atomic_store(result, (unint64_t *)&qword_1EFE55060);
  }
  return result;
}

unint64_t sub_1D44A0CF4()
{
  unint64_t result;

  result = qword_1EFE55068;
  if (!qword_1EFE55068)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B3EC, &type metadata for SNPipelineModelRecipe.Stage.E5rtModelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55068);
  }
  return result;
}

unint64_t sub_1D44A0D30()
{
  unint64_t result;

  result = qword_1EFE55070;
  if (!qword_1EFE55070)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B3C4, &unk_1E97A5F58);
    atomic_store(result, (unint64_t *)&qword_1EFE55070);
  }
  return result;
}

unint64_t sub_1D44A0D6C()
{
  unint64_t result;

  result = qword_1EFE55078;
  if (!qword_1EFE55078)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B374, &type metadata for SNPipelineModelRecipe.Stage.MapKeysCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55078);
  }
  return result;
}

unint64_t sub_1D44A0DA8()
{
  unint64_t result;

  result = qword_1EFE55080;
  if (!qword_1EFE55080)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B34C, &unk_1E97A61F8);
    atomic_store(result, (unint64_t *)&qword_1EFE55080);
  }
  return result;
}

unint64_t sub_1D44A0DE4()
{
  unint64_t result;

  result = qword_1EFE55088;
  if (!qword_1EFE55088)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B2FC, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDoubleArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55088);
  }
  return result;
}

unint64_t sub_1D44A0E20()
{
  unint64_t result;

  result = qword_1EFE55090;
  if (!qword_1EFE55090)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B2D4, &unk_1E97A5B60);
    atomic_store(result, (unint64_t *)&qword_1EFE55090);
  }
  return result;
}

unint64_t sub_1D44A0E5C()
{
  unint64_t result;

  result = qword_1EFE55098;
  if (!qword_1EFE55098)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B284, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayFromBytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55098);
  }
  return result;
}

unint64_t sub_1D44A0E98()
{
  unint64_t result;

  result = qword_1EFE550A0;
  if (!qword_1EFE550A0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B25C, &unk_1E97A5EA8);
    atomic_store(result, (unint64_t *)&qword_1EFE550A0);
  }
  return result;
}

unint64_t sub_1D44A0ED4()
{
  unint64_t result;

  result = qword_1EFE550A8;
  if (!qword_1EFE550A8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B20C, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToBytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE550A8);
  }
  return result;
}

unint64_t sub_1D44A0F10()
{
  unint64_t result;

  result = qword_1EFE550B0;
  if (!qword_1EFE550B0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B1E4, &unk_1E97A5D30);
    atomic_store(result, (unint64_t *)&qword_1EFE550B0);
  }
  return result;
}

unint64_t sub_1D44A0F4C()
{
  unint64_t result;

  result = qword_1EFE550B8;
  if (!qword_1EFE550B8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B194, &type metadata for SNPipelineModelRecipe.Stage.LogMelSpectrogramCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE550B8);
  }
  return result;
}

unint64_t sub_1D44A0F88()
{
  unint64_t result;

  result = qword_1EFE550C0;
  if (!qword_1EFE550C0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B16C, &unk_1E97A5E08);
    atomic_store(result, (unint64_t *)&qword_1EFE550C0);
  }
  return result;
}

unint64_t sub_1D44A0FC4()
{
  unint64_t result;

  result = qword_1EFE550C8;
  if (!qword_1EFE550C8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B11C, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE550C8);
  }
  return result;
}

unint64_t sub_1D44A1000()
{
  unint64_t result;

  result = qword_1EFE550D0;
  if (!qword_1EFE550D0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B0F4, &unk_1E97A5CF0);
    atomic_store(result, (unint64_t *)&qword_1EFE550D0);
  }
  return result;
}

unint64_t sub_1D44A103C()
{
  unint64_t result;

  result = qword_1EFE550D8;
  if (!qword_1EFE550D8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B0A4, &type metadata for SNPipelineModelRecipe.Stage.EbankCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE550D8);
  }
  return result;
}

unint64_t sub_1D44A1078()
{
  unint64_t result;

  result = qword_1EFE550E0;
  if (!qword_1EFE550E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B07C, &unk_1E97A5FF8);
    atomic_store(result, (unint64_t *)&qword_1EFE550E0);
  }
  return result;
}

unint64_t sub_1D44A10B4()
{
  unint64_t result;

  result = qword_1EFE55168;
  if (!qword_1EFE55168)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B054, &unk_1E97A5C10);
    atomic_store(result, (unint64_t *)&qword_1EFE55168);
  }
  return result;
}

unint64_t sub_1D44A10F0()
{
  unint64_t result;

  result = qword_1EFE55170;
  if (!qword_1EFE55170)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B02C, &unk_1E97A5DE0);
    atomic_store(result, (unint64_t *)&qword_1EFE55170);
  }
  return result;
}

unint64_t sub_1D44A112C()
{
  unint64_t result;

  result = qword_1EFE55178;
  if (!qword_1EFE55178)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B004, &unk_1E97A5CB0);
    atomic_store(result, (unint64_t *)&qword_1EFE55178);
  }
  return result;
}

unint64_t sub_1D44A1168()
{
  unint64_t result;

  result = qword_1EFE55180;
  if (!qword_1EFE55180)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AFDC, &unk_1E97A6148);
    atomic_store(result, (unint64_t *)&qword_1EFE55180);
  }
  return result;
}

unint64_t sub_1D44A11A4()
{
  unint64_t result;

  result = qword_1EFE55188;
  if (!qword_1EFE55188)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AFB4, &unk_1E97A60A8);
    atomic_store(result, (unint64_t *)&qword_1EFE55188);
  }
  return result;
}

unint64_t sub_1D44A11E0()
{
  unint64_t result;

  result = qword_1EFE55190;
  if (!qword_1EFE55190)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AF8C, &unk_1E97A62B0);
    atomic_store(result, (unint64_t *)&qword_1EFE55190);
  }
  return result;
}

unint64_t sub_1D44A121C()
{
  unint64_t result;

  result = qword_1EFE55198;
  if (!qword_1EFE55198)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AF64, &unk_1E97A63C0);
    atomic_store(result, (unint64_t *)&qword_1EFE55198);
  }
  return result;
}

unint64_t sub_1D44A1258()
{
  unint64_t result;

  result = qword_1EFE551A0;
  if (!qword_1EFE551A0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AF3C, &unk_1E97A5F58);
    atomic_store(result, (unint64_t *)&qword_1EFE551A0);
  }
  return result;
}

unint64_t sub_1D44A1294()
{
  unint64_t result;

  result = qword_1EFE551A8;
  if (!qword_1EFE551A8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AF14, &unk_1E97A61F8);
    atomic_store(result, (unint64_t *)&qword_1EFE551A8);
  }
  return result;
}

unint64_t sub_1D44A12D0()
{
  unint64_t result;

  result = qword_1EFE551B0;
  if (!qword_1EFE551B0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AEEC, &unk_1E97A5B60);
    atomic_store(result, (unint64_t *)&qword_1EFE551B0);
  }
  return result;
}

unint64_t sub_1D44A130C()
{
  unint64_t result;

  result = qword_1EFE551B8;
  if (!qword_1EFE551B8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AEC4, &unk_1E97A5EA8);
    atomic_store(result, (unint64_t *)&qword_1EFE551B8);
  }
  return result;
}

unint64_t sub_1D44A1348()
{
  unint64_t result;

  result = qword_1EFE551C0;
  if (!qword_1EFE551C0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AE9C, &unk_1E97A5D30);
    atomic_store(result, (unint64_t *)&qword_1EFE551C0);
  }
  return result;
}

unint64_t sub_1D44A1384()
{
  unint64_t result;

  result = qword_1EFE551C8;
  if (!qword_1EFE551C8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AE74, &unk_1E97A5E08);
    atomic_store(result, (unint64_t *)&qword_1EFE551C8);
  }
  return result;
}

unint64_t sub_1D44A13C0()
{
  unint64_t result;

  result = qword_1EFE551D0;
  if (!qword_1EFE551D0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AE4C, &unk_1E97A5CF0);
    atomic_store(result, (unint64_t *)&qword_1EFE551D0);
  }
  return result;
}

unint64_t sub_1D44A13FC()
{
  unint64_t result;

  result = qword_1EFE551D8;
  if (!qword_1EFE551D8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AE24, &unk_1E97A5FF8);
    atomic_store(result, (unint64_t *)&qword_1EFE551D8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SNPipelineModelRecipe.Stage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF2)
  {
    if (a2 + 14 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 14) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 15;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v5 = v6 - 15;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SNPipelineModelRecipe.Stage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1D44A150C + 4 * byte_1D454964E[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1D44A1540 + 4 * byte_1D4549649[v4]))();
}

uint64_t sub_1D44A1540(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44A1548(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44A1550);
  return result;
}

uint64_t sub_1D44A155C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44A1564);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1D44A1568(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44A1570(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.EbankCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.EbankCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.FloatArrayToDataCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDataCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.LogMelSpectrogramCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.LogMelSpectrogramCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.FloatArrayToBytesCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToBytesCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.FloatArrayFromBytesCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.FloatArrayFromBytesCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.FloatArrayToDoubleArrayCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDoubleArrayCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.MapKeysCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.MapKeysCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.E5rtModelCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.E5rtModelCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.SelectKeyCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.SelectKeyCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.AssignKeyCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.AssignKeyCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.SliceCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.SliceCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.FlattenCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.FlattenCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.MergeBuffersCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.MergeBuffersCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.LabelDoubleScoresCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.LabelDoubleScoresCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stage.SoundActionsPostProcessingCodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stage.SoundActionsPostProcessingCodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.CodingKeys;
}

void type metadata accessor for SNPipelineModelRecipe.Stages.MergeBuffers()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.Flatten()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.FloatArrayToDoubleArray()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.FloatArrayFromBytes()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.FloatArrayToBytes()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.FloatArrayToData()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.EBank()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.SoundActionsPostProcessing()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.LabelDoubleScores()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.Slice()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.AssignKey()
{
  sub_1D42CB35C();
}

void sub_1D44A1720(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_1D42B7204();
  sub_1D42B6E24();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.SelectKey()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44A1768()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1D44A1790(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_1D42CB6CC();
  sub_1D42B6E24();
}

_QWORD *sub_1D44A17C4(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D44A1828(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for SNPipelineModelRecipe.Stages.E5RT()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.MapKeys()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages()
{
  sub_1D42CB35C();
}

void type metadata accessor for SNPipelineModelRecipe.Stages.LogMelSpectrogram()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44A18A0()
{
  unint64_t result;

  result = qword_1EFE551E0;
  if (!qword_1EFE551E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549BD4, &unk_1E97A5E08);
    atomic_store(result, (unint64_t *)&qword_1EFE551E0);
  }
  return result;
}

unint64_t sub_1D44A18E0()
{
  unint64_t result;

  result = qword_1EFE551E8;
  if (!qword_1EFE551E8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549C3C, &unk_1E97A61F8);
    atomic_store(result, (unint64_t *)&qword_1EFE551E8);
  }
  return result;
}

unint64_t sub_1D44A1920()
{
  unint64_t result;

  result = qword_1EFE551F0;
  if (!qword_1EFE551F0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549CA4, &unk_1E97A5F58);
    atomic_store(result, (unint64_t *)&qword_1EFE551F0);
  }
  return result;
}

unint64_t sub_1D44A1960()
{
  unint64_t result;

  result = qword_1EFE551F8;
  if (!qword_1EFE551F8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549D0C, &unk_1E97A63C0);
    atomic_store(result, (unint64_t *)&qword_1EFE551F8);
  }
  return result;
}

unint64_t sub_1D44A19A0()
{
  unint64_t result;

  result = qword_1EFE55200;
  if (!qword_1EFE55200)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549D74, &unk_1E97A62B0);
    atomic_store(result, (unint64_t *)&qword_1EFE55200);
  }
  return result;
}

unint64_t sub_1D44A19E0()
{
  unint64_t result;

  result = qword_1EFE55208;
  if (!qword_1EFE55208)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549DDC, &unk_1E97A60A8);
    atomic_store(result, (unint64_t *)&qword_1EFE55208);
  }
  return result;
}

unint64_t sub_1D44A1A20()
{
  unint64_t result;

  result = qword_1EFE55210;
  if (!qword_1EFE55210)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549E44, &unk_1E97A5DE0);
    atomic_store(result, (unint64_t *)&qword_1EFE55210);
  }
  return result;
}

unint64_t sub_1D44A1A60()
{
  unint64_t result;

  result = qword_1EFE55218;
  if (!qword_1EFE55218)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549EAC, &unk_1E97A5C10);
    atomic_store(result, (unint64_t *)&qword_1EFE55218);
  }
  return result;
}

unint64_t sub_1D44A1AA0()
{
  unint64_t result;

  result = qword_1EFE55220;
  if (!qword_1EFE55220)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549F14, &unk_1E97A5FF8);
    atomic_store(result, (unint64_t *)&qword_1EFE55220);
  }
  return result;
}

unint64_t sub_1D44A1AE0()
{
  unint64_t result;

  result = qword_1EFE55228;
  if (!qword_1EFE55228)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549F7C, &unk_1E97A5CF0);
    atomic_store(result, (unint64_t *)&qword_1EFE55228);
  }
  return result;
}

unint64_t sub_1D44A1B20()
{
  unint64_t result;

  result = qword_1EFE55230;
  if (!qword_1EFE55230)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4549FE4, &unk_1E97A5D30);
    atomic_store(result, (unint64_t *)&qword_1EFE55230);
  }
  return result;
}

unint64_t sub_1D44A1B60()
{
  unint64_t result;

  result = qword_1EFE55238;
  if (!qword_1EFE55238)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A04C, &unk_1E97A5EA8);
    atomic_store(result, (unint64_t *)&qword_1EFE55238);
  }
  return result;
}

unint64_t sub_1D44A1BA0()
{
  unint64_t result;

  result = qword_1EFE55240;
  if (!qword_1EFE55240)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A0B4, &unk_1E97A5B60);
    atomic_store(result, (unint64_t *)&qword_1EFE55240);
  }
  return result;
}

unint64_t sub_1D44A1BE0()
{
  unint64_t result;

  result = qword_1EFE55248;
  if (!qword_1EFE55248)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A11C, &unk_1E97A6148);
    atomic_store(result, (unint64_t *)&qword_1EFE55248);
  }
  return result;
}

unint64_t sub_1D44A1C20()
{
  unint64_t result;

  result = qword_1EFE55250;
  if (!qword_1EFE55250)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A184, &unk_1E97A5CB0);
    atomic_store(result, (unint64_t *)&qword_1EFE55250);
  }
  return result;
}

unint64_t sub_1D44A1C60()
{
  unint64_t result;

  result = qword_1EFE55258;
  if (!qword_1EFE55258)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A27C, &type metadata for SNPipelineModelRecipe.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55258);
  }
  return result;
}

unint64_t sub_1D44A1CA0()
{
  unint64_t result;

  result = qword_1EFE55260;
  if (!qword_1EFE55260)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A334, &type metadata for SNPipelineModelRecipe.Stage.SoundActionsPostProcessingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55260);
  }
  return result;
}

unint64_t sub_1D44A1CE0()
{
  unint64_t result;

  result = qword_1EFE55268;
  if (!qword_1EFE55268)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A3EC, &type metadata for SNPipelineModelRecipe.Stage.LabelDoubleScoresCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55268);
  }
  return result;
}

unint64_t sub_1D44A1D20()
{
  unint64_t result;

  result = qword_1EFE55270;
  if (!qword_1EFE55270)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A4A4, &type metadata for SNPipelineModelRecipe.Stage.MergeBuffersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55270);
  }
  return result;
}

unint64_t sub_1D44A1D60()
{
  unint64_t result;

  result = qword_1EFE55278;
  if (!qword_1EFE55278)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A55C, &type metadata for SNPipelineModelRecipe.Stage.FlattenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55278);
  }
  return result;
}

unint64_t sub_1D44A1DA0()
{
  unint64_t result;

  result = qword_1EFE55280;
  if (!qword_1EFE55280)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A614, &type metadata for SNPipelineModelRecipe.Stage.SliceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55280);
  }
  return result;
}

unint64_t sub_1D44A1DE0()
{
  unint64_t result;

  result = qword_1EFE55288;
  if (!qword_1EFE55288)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A6CC, &type metadata for SNPipelineModelRecipe.Stage.AssignKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55288);
  }
  return result;
}

unint64_t sub_1D44A1E20()
{
  unint64_t result;

  result = qword_1EFE55290;
  if (!qword_1EFE55290)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A784, &type metadata for SNPipelineModelRecipe.Stage.SelectKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55290);
  }
  return result;
}

unint64_t sub_1D44A1E60()
{
  unint64_t result;

  result = qword_1EFE55298;
  if (!qword_1EFE55298)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A83C, &type metadata for SNPipelineModelRecipe.Stage.E5rtModelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55298);
  }
  return result;
}

unint64_t sub_1D44A1EA0()
{
  unint64_t result;

  result = qword_1EFE552A0;
  if (!qword_1EFE552A0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A8F4, &type metadata for SNPipelineModelRecipe.Stage.MapKeysCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552A0);
  }
  return result;
}

unint64_t sub_1D44A1EE0()
{
  unint64_t result;

  result = qword_1EFE552A8;
  if (!qword_1EFE552A8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A9AC, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDoubleArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552A8);
  }
  return result;
}

unint64_t sub_1D44A1F20()
{
  unint64_t result;

  result = qword_1EFE552B0;
  if (!qword_1EFE552B0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AA64, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayFromBytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552B0);
  }
  return result;
}

unint64_t sub_1D44A1F60()
{
  unint64_t result;

  result = qword_1EFE552B8;
  if (!qword_1EFE552B8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AB1C, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToBytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552B8);
  }
  return result;
}

unint64_t sub_1D44A1FA0()
{
  unint64_t result;

  result = qword_1EFE552C0;
  if (!qword_1EFE552C0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454ABD4, &type metadata for SNPipelineModelRecipe.Stage.LogMelSpectrogramCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552C0);
  }
  return result;
}

unint64_t sub_1D44A1FE0()
{
  unint64_t result;

  result = qword_1EFE552C8;
  if (!qword_1EFE552C8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AC8C, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552C8);
  }
  return result;
}

unint64_t sub_1D44A2020()
{
  unint64_t result;

  result = qword_1EFE552D0;
  if (!qword_1EFE552D0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AD44, &type metadata for SNPipelineModelRecipe.Stage.EbankCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552D0);
  }
  return result;
}

unint64_t sub_1D44A2060()
{
  unint64_t result;

  result = qword_1EFE552D8;
  if (!qword_1EFE552D8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454ADFC, &type metadata for SNPipelineModelRecipe.Stage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552D8);
  }
  return result;
}

unint64_t sub_1D44A20A0()
{
  unint64_t result;

  result = qword_1EFE552E0;
  if (!qword_1EFE552E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454ACB4, &type metadata for SNPipelineModelRecipe.Stage.EbankCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552E0);
  }
  return result;
}

unint64_t sub_1D44A20E0()
{
  unint64_t result;

  result = qword_1EFE552E8;
  if (!qword_1EFE552E8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454ACDC, &type metadata for SNPipelineModelRecipe.Stage.EbankCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552E8);
  }
  return result;
}

unint64_t sub_1D44A2120()
{
  unint64_t result;

  result = qword_1EFE552F0;
  if (!qword_1EFE552F0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454ABFC, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552F0);
  }
  return result;
}

unint64_t sub_1D44A2160()
{
  unint64_t result;

  result = qword_1EFE552F8;
  if (!qword_1EFE552F8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AC24, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE552F8);
  }
  return result;
}

unint64_t sub_1D44A21A0()
{
  unint64_t result;

  result = qword_1EFE55300;
  if (!qword_1EFE55300)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AB44, &type metadata for SNPipelineModelRecipe.Stage.LogMelSpectrogramCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55300);
  }
  return result;
}

unint64_t sub_1D44A21E0()
{
  unint64_t result;

  result = qword_1EFE55308;
  if (!qword_1EFE55308)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AB6C, &type metadata for SNPipelineModelRecipe.Stage.LogMelSpectrogramCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55308);
  }
  return result;
}

unint64_t sub_1D44A2220()
{
  unint64_t result;

  result = qword_1EFE55310;
  if (!qword_1EFE55310)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AA8C, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToBytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55310);
  }
  return result;
}

unint64_t sub_1D44A2260()
{
  unint64_t result;

  result = qword_1EFE55318;
  if (!qword_1EFE55318)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AAB4, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToBytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55318);
  }
  return result;
}

unint64_t sub_1D44A22A0()
{
  unint64_t result;

  result = qword_1EFE55320;
  if (!qword_1EFE55320)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A9D4, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayFromBytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55320);
  }
  return result;
}

unint64_t sub_1D44A22E0()
{
  unint64_t result;

  result = qword_1EFE55328;
  if (!qword_1EFE55328)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A9FC, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayFromBytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55328);
  }
  return result;
}

unint64_t sub_1D44A2320()
{
  unint64_t result;

  result = qword_1EFE55330;
  if (!qword_1EFE55330)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A91C, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDoubleArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55330);
  }
  return result;
}

unint64_t sub_1D44A2360()
{
  unint64_t result;

  result = qword_1EFE55338;
  if (!qword_1EFE55338)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A944, &type metadata for SNPipelineModelRecipe.Stage.FloatArrayToDoubleArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55338);
  }
  return result;
}

unint64_t sub_1D44A23A0()
{
  unint64_t result;

  result = qword_1EFE55340;
  if (!qword_1EFE55340)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A864, &type metadata for SNPipelineModelRecipe.Stage.MapKeysCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55340);
  }
  return result;
}

unint64_t sub_1D44A23E0()
{
  unint64_t result;

  result = qword_1EFE55348;
  if (!qword_1EFE55348)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A88C, &type metadata for SNPipelineModelRecipe.Stage.MapKeysCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55348);
  }
  return result;
}

unint64_t sub_1D44A2420()
{
  unint64_t result;

  result = qword_1EFE55350;
  if (!qword_1EFE55350)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A7AC, &type metadata for SNPipelineModelRecipe.Stage.E5rtModelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55350);
  }
  return result;
}

unint64_t sub_1D44A2460()
{
  unint64_t result;

  result = qword_1EFE55358;
  if (!qword_1EFE55358)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A7D4, &type metadata for SNPipelineModelRecipe.Stage.E5rtModelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55358);
  }
  return result;
}

unint64_t sub_1D44A24A0()
{
  unint64_t result;

  result = qword_1EFE55360;
  if (!qword_1EFE55360)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A6F4, &type metadata for SNPipelineModelRecipe.Stage.SelectKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55360);
  }
  return result;
}

unint64_t sub_1D44A24E0()
{
  unint64_t result;

  result = qword_1EFE55368;
  if (!qword_1EFE55368)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A71C, &type metadata for SNPipelineModelRecipe.Stage.SelectKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55368);
  }
  return result;
}

unint64_t sub_1D44A2520()
{
  unint64_t result;

  result = qword_1EFE55370;
  if (!qword_1EFE55370)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A63C, &type metadata for SNPipelineModelRecipe.Stage.AssignKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55370);
  }
  return result;
}

unint64_t sub_1D44A2560()
{
  unint64_t result;

  result = qword_1EFE55378;
  if (!qword_1EFE55378)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A664, &type metadata for SNPipelineModelRecipe.Stage.AssignKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55378);
  }
  return result;
}

unint64_t sub_1D44A25A0()
{
  unint64_t result;

  result = qword_1EFE55380;
  if (!qword_1EFE55380)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A584, &type metadata for SNPipelineModelRecipe.Stage.SliceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55380);
  }
  return result;
}

unint64_t sub_1D44A25E0()
{
  unint64_t result;

  result = qword_1EFE55388;
  if (!qword_1EFE55388)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A5AC, &type metadata for SNPipelineModelRecipe.Stage.SliceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55388);
  }
  return result;
}

unint64_t sub_1D44A2620()
{
  unint64_t result;

  result = qword_1EFE55390;
  if (!qword_1EFE55390)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A4CC, &type metadata for SNPipelineModelRecipe.Stage.FlattenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55390);
  }
  return result;
}

unint64_t sub_1D44A2660()
{
  unint64_t result;

  result = qword_1EFE55398;
  if (!qword_1EFE55398)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A4F4, &type metadata for SNPipelineModelRecipe.Stage.FlattenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55398);
  }
  return result;
}

unint64_t sub_1D44A26A0()
{
  unint64_t result;

  result = qword_1EFE553A0;
  if (!qword_1EFE553A0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A414, &type metadata for SNPipelineModelRecipe.Stage.MergeBuffersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553A0);
  }
  return result;
}

unint64_t sub_1D44A26E0()
{
  unint64_t result;

  result = qword_1EFE553A8;
  if (!qword_1EFE553A8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A43C, &type metadata for SNPipelineModelRecipe.Stage.MergeBuffersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553A8);
  }
  return result;
}

unint64_t sub_1D44A2720()
{
  unint64_t result;

  result = qword_1EFE553B0;
  if (!qword_1EFE553B0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A35C, &type metadata for SNPipelineModelRecipe.Stage.LabelDoubleScoresCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553B0);
  }
  return result;
}

unint64_t sub_1D44A2760()
{
  unint64_t result;

  result = qword_1EFE553B8;
  if (!qword_1EFE553B8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A384, &type metadata for SNPipelineModelRecipe.Stage.LabelDoubleScoresCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553B8);
  }
  return result;
}

unint64_t sub_1D44A27A0()
{
  unint64_t result;

  result = qword_1EFE553C0;
  if (!qword_1EFE553C0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A2A4, &type metadata for SNPipelineModelRecipe.Stage.SoundActionsPostProcessingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553C0);
  }
  return result;
}

unint64_t sub_1D44A27E0()
{
  unint64_t result;

  result = qword_1EFE553C8;
  if (!qword_1EFE553C8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A2CC, &type metadata for SNPipelineModelRecipe.Stage.SoundActionsPostProcessingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553C8);
  }
  return result;
}

unint64_t sub_1D44A2820()
{
  unint64_t result;

  result = qword_1EFE553D0;
  if (!qword_1EFE553D0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AD6C, &type metadata for SNPipelineModelRecipe.Stage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553D0);
  }
  return result;
}

unint64_t sub_1D44A2860()
{
  unint64_t result;

  result = qword_1EFE553D8;
  if (!qword_1EFE553D8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454AD94, &type metadata for SNPipelineModelRecipe.Stage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553D8);
  }
  return result;
}

unint64_t sub_1D44A28A0()
{
  unint64_t result;

  result = qword_1EFE553E0;
  if (!qword_1EFE553E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A1EC, &type metadata for SNPipelineModelRecipe.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553E0);
  }
  return result;
}

unint64_t sub_1D44A28E0()
{
  unint64_t result;

  result = qword_1EFE553E8;
  if (!qword_1EFE553E8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454A214, &type metadata for SNPipelineModelRecipe.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553E8);
  }
  return result;
}

unint64_t sub_1D44A291C()
{
  unint64_t result;

  result = qword_1EFE553F8;
  if (!qword_1EFE553F8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C36C, &type metadata for SNPipelineModelRecipe.Stages.SoundActionsPostProcessing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE553F8);
  }
  return result;
}

unint64_t sub_1D44A2958()
{
  unint64_t result;

  result = qword_1EFE55400;
  if (!qword_1EFE55400)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4539F7C, &unk_1E9799E30);
    atomic_store(result, (unint64_t *)&qword_1EFE55400);
  }
  return result;
}

unint64_t sub_1D44A2994()
{
  unint64_t result;

  result = qword_1EFE55410;
  if (!qword_1EFE55410)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C31C, &type metadata for SNPipelineModelRecipe.Stages.LabelDoubleScores.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55410);
  }
  return result;
}

unint64_t sub_1D44A29D0()
{
  unint64_t result;

  result = qword_1EFE55420;
  if (!qword_1EFE55420)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C2CC, &type metadata for SNPipelineModelRecipe.Stages.Slice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55420);
  }
  return result;
}

unint64_t sub_1D44A2A0C()
{
  unint64_t result;

  result = qword_1EFE55430;
  if (!qword_1EFE55430)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C27C, &type metadata for SNPipelineModelRecipe.Stages.AssignKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55430);
  }
  return result;
}

unint64_t sub_1D44A2A48()
{
  unint64_t result;

  result = qword_1EFE55440;
  if (!qword_1EFE55440)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C22C, &type metadata for SNPipelineModelRecipe.Stages.SelectKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55440);
  }
  return result;
}

unint64_t sub_1D44A2A84()
{
  unint64_t result;

  result = qword_1EFE55450;
  if (!qword_1EFE55450)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C1DC, &type metadata for SNPipelineModelRecipe.Stages.E5RT.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55450);
  }
  return result;
}

unint64_t sub_1D44A2AC0()
{
  unint64_t result;

  result = qword_1EFE55468;
  if (!qword_1EFE55468)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C18C, &type metadata for SNPipelineModelRecipe.Stages.MapKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55468);
  }
  return result;
}

unint64_t sub_1D44A2AFC()
{
  unint64_t result;

  result = qword_1EFE55478;
  if (!qword_1EFE55478)
  {
    result = MEMORY[0x1D825E41C](&unk_1D4539F54, &unk_1E9799E30);
    atomic_store(result, (unint64_t *)&qword_1EFE55478);
  }
  return result;
}

void sub_1D44A2B38(uint64_t a1)
{
  if (!sub_1D42CBA5C(a1))
  {
    sub_1D44A3ED0();
    sub_1D42B8B10((uint64_t *)&unk_1EFE51A80);
    sub_1D43F8A34();
  }
  sub_1D42CB758();
}

unint64_t sub_1D44A2B80()
{
  unint64_t result;

  result = qword_1EFE55490;
  if (!qword_1EFE55490)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C13C, &type metadata for SNPipelineModelRecipe.Stages.MergeBuffers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55490);
  }
  return result;
}

unint64_t sub_1D44A2BBC()
{
  unint64_t result;

  result = qword_1EFE554A0;
  if (!qword_1EFE554A0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C0EC, &type metadata for SNPipelineModelRecipe.Stages.Flatten.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE554A0);
  }
  return result;
}

void sub_1D44A2BF8(uint64_t a1)
{
  if (!sub_1D42CBA5C(a1))
  {
    sub_1D44A3ED0();
    sub_1D42B8B10((uint64_t *)&unk_1EFE472F0);
    sub_1D43F8A34();
  }
  sub_1D42CB758();
}

unint64_t sub_1D44A2C40()
{
  unint64_t result;

  result = qword_1EFE554E0;
  if (!qword_1EFE554E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C09C, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToDoubleArray.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE554E0);
  }
  return result;
}

unint64_t sub_1D44A2C7C()
{
  unint64_t result;

  result = qword_1EFE554F0;
  if (!qword_1EFE554F0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C04C, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayFromBytes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE554F0);
  }
  return result;
}

unint64_t sub_1D44A2CB8()
{
  unint64_t result;

  result = qword_1EFE55500;
  if (!qword_1EFE55500)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BFFC, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToBytes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55500);
  }
  return result;
}

unint64_t sub_1D44A2CF4()
{
  unint64_t result;

  result = qword_1EFE55510;
  if (!qword_1EFE55510)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BFAC, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55510);
  }
  return result;
}

unint64_t sub_1D44A2D30()
{
  unint64_t result;

  result = qword_1EFE55520;
  if (!qword_1EFE55520)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BF5C, &type metadata for SNPipelineModelRecipe.Stages.EBank.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55520);
  }
  return result;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.EBank.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.EBank.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.FloatArrayToData.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToData.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.FloatArrayToBytes.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToBytes.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.FloatArrayFromBytes.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.FloatArrayFromBytes.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.FloatArrayToDoubleArray.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToDoubleArray.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.Flatten.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.Flatten.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.MergeBuffers.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.MergeBuffers.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.MapKeys.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.MapKeys.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.E5RT.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.E5RT.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.SelectKey.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.SelectKey.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.AssignKey.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.AssignKey.CodingKeys;
}

uint64_t _s13SoundAnalysis21SNPipelineModelRecipeV6StagesV4E5RTV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D44A2E6C + 4 * byte_1D4549658[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D44A2EA0 + 4 * byte_1D4549653[v4]))();
}

uint64_t sub_1D44A2EA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44A2EA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44A2EB0);
  return result;
}

uint64_t sub_1D44A2EBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44A2EC4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D44A2EC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44A2ED0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.Slice.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.Slice.CodingKeys;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.LabelDoubleScores.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.LabelDoubleScores.CodingKeys;
}

uint64_t _s13SoundAnalysis21SNPipelineModelRecipeV5StageO15EbankCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D44A2F3C + 4 * byte_1D454965D[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D44A2F5C + 4 * byte_1D4549662[v4]))();
}

_BYTE *sub_1D44A2F3C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D44A2F5C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44A2F64(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44A2F6C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44A2F74(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44A2F7C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SNPipelineModelRecipe.Stages.SoundActionsPostProcessing.CodingKeys()
{
  return &type metadata for SNPipelineModelRecipe.Stages.SoundActionsPostProcessing.CodingKeys;
}

unint64_t sub_1D44A2F9C()
{
  unint64_t result;

  result = qword_1EFE55528;
  if (!qword_1EFE55528)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B8B4, &type metadata for SNPipelineModelRecipe.Stages.SoundActionsPostProcessing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55528);
  }
  return result;
}

unint64_t sub_1D44A2FDC()
{
  unint64_t result;

  result = qword_1EFE55530;
  if (!qword_1EFE55530)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B96C, &type metadata for SNPipelineModelRecipe.Stages.LabelDoubleScores.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55530);
  }
  return result;
}

unint64_t sub_1D44A301C()
{
  unint64_t result;

  result = qword_1EFE55538;
  if (!qword_1EFE55538)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BA24, &type metadata for SNPipelineModelRecipe.Stages.Slice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55538);
  }
  return result;
}

unint64_t sub_1D44A305C()
{
  unint64_t result;

  result = qword_1EFE55540;
  if (!qword_1EFE55540)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BADC, &type metadata for SNPipelineModelRecipe.Stages.AssignKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55540);
  }
  return result;
}

unint64_t sub_1D44A309C()
{
  unint64_t result;

  result = qword_1EFE55548;
  if (!qword_1EFE55548)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BB94, &type metadata for SNPipelineModelRecipe.Stages.SelectKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55548);
  }
  return result;
}

unint64_t sub_1D44A30DC()
{
  unint64_t result;

  result = qword_1EFE55550;
  if (!qword_1EFE55550)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BC4C, &type metadata for SNPipelineModelRecipe.Stages.E5RT.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55550);
  }
  return result;
}

unint64_t sub_1D44A311C()
{
  unint64_t result;

  result = qword_1EFE55558;
  if (!qword_1EFE55558)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BD04, &type metadata for SNPipelineModelRecipe.Stages.MapKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55558);
  }
  return result;
}

unint64_t sub_1D44A315C()
{
  unint64_t result;

  result = qword_1EFE55560;
  if (!qword_1EFE55560)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BF0C, &type metadata for SNPipelineModelRecipe.Stages.EBank.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55560);
  }
  return result;
}

unint64_t sub_1D44A319C()
{
  unint64_t result;

  result = qword_1EFE55568;
  if (!qword_1EFE55568)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BF34, &type metadata for SNPipelineModelRecipe.Stages.EBank.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55568);
  }
  return result;
}

unint64_t sub_1D44A31DC()
{
  unint64_t result;

  result = qword_1EFE55570;
  if (!qword_1EFE55570)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BEBC, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55570);
  }
  return result;
}

unint64_t sub_1D44A321C()
{
  unint64_t result;

  result = qword_1EFE55578;
  if (!qword_1EFE55578)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BEE4, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55578);
  }
  return result;
}

unint64_t sub_1D44A325C()
{
  unint64_t result;

  result = qword_1EFE55580;
  if (!qword_1EFE55580)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BE6C, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToBytes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55580);
  }
  return result;
}

unint64_t sub_1D44A329C()
{
  unint64_t result;

  result = qword_1EFE55588;
  if (!qword_1EFE55588)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BE94, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToBytes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55588);
  }
  return result;
}

unint64_t sub_1D44A32DC()
{
  unint64_t result;

  result = qword_1EFE55590;
  if (!qword_1EFE55590)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BE1C, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayFromBytes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55590);
  }
  return result;
}

unint64_t sub_1D44A331C()
{
  unint64_t result;

  result = qword_1EFE55598;
  if (!qword_1EFE55598)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BE44, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayFromBytes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55598);
  }
  return result;
}

unint64_t sub_1D44A335C()
{
  unint64_t result;

  result = qword_1EFE555A0;
  if (!qword_1EFE555A0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BDCC, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToDoubleArray.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555A0);
  }
  return result;
}

unint64_t sub_1D44A339C()
{
  unint64_t result;

  result = qword_1EFE555A8;
  if (!qword_1EFE555A8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BDF4, &type metadata for SNPipelineModelRecipe.Stages.FloatArrayToDoubleArray.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555A8);
  }
  return result;
}

unint64_t sub_1D44A33DC()
{
  unint64_t result;

  result = qword_1EFE555B0;
  if (!qword_1EFE555B0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BD7C, &type metadata for SNPipelineModelRecipe.Stages.Flatten.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555B0);
  }
  return result;
}

unint64_t sub_1D44A341C()
{
  unint64_t result;

  result = qword_1EFE555B8;
  if (!qword_1EFE555B8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BDA4, &type metadata for SNPipelineModelRecipe.Stages.Flatten.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555B8);
  }
  return result;
}

unint64_t sub_1D44A345C()
{
  unint64_t result;

  result = qword_1EFE555C0;
  if (!qword_1EFE555C0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BD2C, &type metadata for SNPipelineModelRecipe.Stages.MergeBuffers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555C0);
  }
  return result;
}

unint64_t sub_1D44A349C()
{
  unint64_t result;

  result = qword_1EFE555C8;
  if (!qword_1EFE555C8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BD54, &type metadata for SNPipelineModelRecipe.Stages.MergeBuffers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555C8);
  }
  return result;
}

unint64_t sub_1D44A34DC()
{
  unint64_t result;

  result = qword_1EFE555D0;
  if (!qword_1EFE555D0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BC74, &type metadata for SNPipelineModelRecipe.Stages.MapKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555D0);
  }
  return result;
}

unint64_t sub_1D44A351C()
{
  unint64_t result;

  result = qword_1EFE555D8;
  if (!qword_1EFE555D8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BC9C, &type metadata for SNPipelineModelRecipe.Stages.MapKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555D8);
  }
  return result;
}

unint64_t sub_1D44A355C()
{
  unint64_t result;

  result = qword_1EFE555E0;
  if (!qword_1EFE555E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BBBC, &type metadata for SNPipelineModelRecipe.Stages.E5RT.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555E0);
  }
  return result;
}

unint64_t sub_1D44A359C()
{
  unint64_t result;

  result = qword_1EFE555E8;
  if (!qword_1EFE555E8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BBE4, &type metadata for SNPipelineModelRecipe.Stages.E5RT.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555E8);
  }
  return result;
}

unint64_t sub_1D44A35DC()
{
  unint64_t result;

  result = qword_1EFE555F0;
  if (!qword_1EFE555F0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BB04, &type metadata for SNPipelineModelRecipe.Stages.SelectKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555F0);
  }
  return result;
}

unint64_t sub_1D44A361C()
{
  unint64_t result;

  result = qword_1EFE555F8;
  if (!qword_1EFE555F8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BB2C, &type metadata for SNPipelineModelRecipe.Stages.SelectKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE555F8);
  }
  return result;
}

unint64_t sub_1D44A365C()
{
  unint64_t result;

  result = qword_1EFE55600;
  if (!qword_1EFE55600)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BA4C, &type metadata for SNPipelineModelRecipe.Stages.AssignKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55600);
  }
  return result;
}

unint64_t sub_1D44A369C()
{
  unint64_t result;

  result = qword_1EFE55608;
  if (!qword_1EFE55608)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454BA74, &type metadata for SNPipelineModelRecipe.Stages.AssignKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55608);
  }
  return result;
}

unint64_t sub_1D44A36DC()
{
  unint64_t result;

  result = qword_1EFE55610;
  if (!qword_1EFE55610)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B994, &type metadata for SNPipelineModelRecipe.Stages.Slice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55610);
  }
  return result;
}

unint64_t sub_1D44A371C()
{
  unint64_t result;

  result = qword_1EFE55618;
  if (!qword_1EFE55618)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B9BC, &type metadata for SNPipelineModelRecipe.Stages.Slice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55618);
  }
  return result;
}

unint64_t sub_1D44A375C()
{
  unint64_t result;

  result = qword_1EFE55620;
  if (!qword_1EFE55620)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B8DC, &type metadata for SNPipelineModelRecipe.Stages.LabelDoubleScores.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55620);
  }
  return result;
}

unint64_t sub_1D44A379C()
{
  unint64_t result;

  result = qword_1EFE55628;
  if (!qword_1EFE55628)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B904, &type metadata for SNPipelineModelRecipe.Stages.LabelDoubleScores.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55628);
  }
  return result;
}

unint64_t sub_1D44A37DC()
{
  unint64_t result;

  result = qword_1EFE55630;
  if (!qword_1EFE55630)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B824, &type metadata for SNPipelineModelRecipe.Stages.SoundActionsPostProcessing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55630);
  }
  return result;
}

unint64_t sub_1D44A381C()
{
  unint64_t result;

  result = qword_1EFE55638;
  if (!qword_1EFE55638)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454B84C, &type metadata for SNPipelineModelRecipe.Stages.SoundActionsPostProcessing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55638);
  }
  return result;
}

uint64_t sub_1D44A38A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1D42DD140(a1, a2, a3);
}

uint64_t sub_1D44A38B4()
{
  return sub_1D451B610();
}

uint64_t sub_1D44A38D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 520));
}

uint64_t sub_1D44A38E4()
{
  return sub_1D451B610();
}

uint64_t sub_1D44A38F4@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 520));
}

uint64_t sub_1D44A3904@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_1D44A3918()
{
  return sub_1D451B688();
}

uint64_t sub_1D44A392C()
{
  __int128 *v0;
  uint64_t v1;

  return sub_1D449FF6C(v0, v1 - 112);
}

void sub_1D44A3954()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
}

double sub_1D44A3970()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  return result;
}

uint64_t sub_1D44A399C()
{
  return sub_1D451BA0C();
}

uint64_t sub_1D44A39B4()
{
  return sub_1D451B760();
}

uint64_t sub_1D44A39C0()
{
  return sub_1D451A2E4();
}

_QWORD *sub_1D44A39D0()
{
  _QWORD *v0;

  return sub_1D42B5528(v0, v0[3]);
}

uint64_t sub_1D44A39F0()
{
  __int128 *v0;
  uint64_t v1;

  return sub_1D449FF6C(v0, v1 - 112);
}

void sub_1D44A3A10(uint64_t a1)
{
  sub_1D44A02F8(a1);
}

__n128 sub_1D44A3A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10)
{
  return (__n128)a10;
}

uint64_t sub_1D44A3A60()
{
  return sub_1D451B688();
}

uint64_t sub_1D44A3A80()
{
  return sub_1D451B760();
}

double sub_1D44A3A88(__n128 a1)
{
  uint64_t v1;

  a1.n128_u64[0] = *(_QWORD *)(v1 - 136);
  *(__n128 *)(v1 - 160) = a1;
  return a1.n128_f64[0];
}

uint64_t sub_1D44A3AA4()
{
  return sub_1D451B688();
}

uint64_t sub_1D44A3AAC()
{
  return sub_1D451B760();
}

uint64_t sub_1D44A3AC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1D44734B4(0xD000000000000019, (a1 - 32) | 0x8000000000000000);
}

__n128 sub_1D44A3ADC@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 448) = a1 & 0xFFFFFFFF0FFFFFFFLL;
  return *(__n128 *)(v1 + 424);
}

uint64_t sub_1D44A3AF0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44A3B10()
{
  return sub_1D451A110();
}

uint64_t sub_1D44A3B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
}

uint64_t sub_1D44A3B40()
{
  return sub_1D451A3A4();
}

uint64_t sub_1D44A3B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1D44A3B68()
{
  return sub_1D451A2E4();
}

void sub_1D44A3B70()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
}

uint64_t sub_1D44A3B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1D44A3B9C()
{
  return sub_1D451A3A4();
}

uint64_t sub_1D44A3BAC(uint64_t a1)
{
  return sub_1D42B5400(a1);
}

uint64_t sub_1D44A3BC4()
{
  return sub_1D451BA24();
}

uint64_t sub_1D44A3BEC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44A3BF8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t sub_1D44A3C24()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1D42DD16C(v0, v1);
}

uint64_t sub_1D44A3C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1D44A3C40()
{
  uint64_t v0;

  return v0;
}

void sub_1D44A3C64()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
}

_QWORD *sub_1D44A3C78()
{
  _QWORD *v0;

  return sub_1D42B5528(v0, v0[3]);
}

void sub_1D44A3CAC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
  sub_1D42C71F0();
}

uint64_t sub_1D44A3CD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1D44A3CE0()
{
  return sub_1D451A110();
}

uint64_t sub_1D44A3CF8()
{
  return sub_1D4519C18();
}

void sub_1D44A3D10(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1D44A3D2C()
{
  return sub_1D451A110();
}

uint64_t sub_1D44A3D40()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1D42DD16C(v0, v1);
}

void sub_1D44A3D4C(uint64_t a1)
{
  uint64_t *v1;

  sub_1D44A032C(a1, v1);
}

void sub_1D44A3D54(uint64_t a1)
{
  sub_1D44A02F8(a1);
}

double sub_1D44A3D5C()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  return result;
}

uint64_t sub_1D44A3D78()
{
  return sub_1D451BA24();
}

unint64_t sub_1D44A3D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D4366B34(a2, a3);
}

uint64_t sub_1D44A3D98(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D44A3DA8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44A3DD0()
{
  return sub_1D451B67C();
}

uint64_t sub_1D44A3DE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1D42B294C(*(_QWORD *)(v1 + 56) + 32 * a1, v2);
}

uint64_t sub_1D44A3E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1D44A3E2C()
{
  return 0;
}

void sub_1D44A3E50()
{
  sub_1D42C71F0();
}

uint64_t sub_1D44A3E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1D42B294C(a1, (uint64_t)&a9);
}

uint64_t sub_1D44A3E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return sub_1D42B294C(a1, (uint64_t)va);
}

uint64_t sub_1D44A3E90(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, uint64_t);
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return v1(va, v2);
}

uint64_t sub_1D44A3E9C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1D44A3EBC(uint64_t a1, uint64_t *a2)
{
  return sub_1D42B28FC(a2);
}

uint64_t sub_1D44A3EC4(uint64_t a1, ...)
{
  __int128 *v1;
  va_list va;

  va_start(va, a1);
  return sub_1D449FF6C(v1, (uint64_t)va);
}

uint64_t sub_1D44A3F08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = a1 & 0xFFFFFFFF0FFFFFFFLL;
  return v1;
}

uint64_t sub_1D44A3F28()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44A3F34@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

unint64_t sub_1D44A3F4C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1D42B5528(v0, v1);
  return sub_1D44A0970();
}

uint64_t sub_1D44A3F68()
{
  return sub_1D451A2E4();
}

uint64_t sub_1D44A3F70()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1D44A3F7C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t sub_1D44A3F88()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44A3F9C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D44A3FA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_1D4380B94();
  v4 = v3;
  v5 = MGGetProductType();
  sub_1D44A3FEC(v5, v2, v4, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D44A3FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30[7];
  char v31[40];
  uint64_t v32;

  v8 = sub_1D42B28FC(qword_1EFE47450);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1D4519BC4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D4380880(a1, v30);
  sub_1D4381704((uint64_t)v30, (uint64_t)v31);
  if (v32)
  {
    v15 = v31[0];
    sub_1D42F11A4(v30);
  }
  else
  {
    v15 = 7;
  }
  v16 = sub_1D4380A38(v15, a2, a3);
  if (v17)
  {
    v22 = sub_1D4380CF4(v16, v17);
    v24 = v23;
    sub_1D42B7204();
    v28 = 0;
    v29 = 0xE000000000000000;
    sub_1D451B400();
    swift_bridgeObjectRelease();
    v28 = v22;
    v29 = v24;
    sub_1D451A794();
    sub_1D4519B10();
    sub_1D42B7204();
    v25 = 0;
  }
  else
  {
    if (qword_1EFE40338 != -1)
      swift_once();
    v18 = sub_1D451A014();
    sub_1D42CC880(v18, (uint64_t)qword_1EFEA7700);
    v19 = sub_1D4519FFC();
    v20 = sub_1D451AF5C();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)sub_1D43074C8();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1D42A7000, v19, v20, "No distance classifier model available on this product", v21, 2u);
      sub_1D42CC934();
    }

    v25 = 1;
  }
  _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(a4, v25, 1, v11);
  sub_1D4321670(a4, (uint64_t)v10);
  if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)v10, 1, v11) == 1)
    return sub_1D432AB6C((uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  sub_1D4519B58();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

id SNDistanceClassifier.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SNDistanceClassifier.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNDistanceClassifier();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for SNDistanceClassifier()
{
  return objc_opt_self();
}

id SNDistanceClassifier.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNDistanceClassifier();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D44A458C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(&qword_1EFE55740);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A462C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(qword_1EFE55730);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A46CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(&qword_1EFE557A8);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A476C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(qword_1EFE55810);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A480C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(&qword_1EFE55798);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A48AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(&qword_1EFE55950);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A494C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(&qword_1EFE55B68);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A49EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(&qword_1EFE55B58);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A4A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(&qword_1EFE55AF8);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A4B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(&qword_1EFE55AE8);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

uint64_t sub_1D44A4BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_bridgeObjectRetain_n();
  sub_1D42B28FC(&qword_1EFE55658);
  sub_1D42E33F8(&qword_1EFE556B8, &qword_1EFE55658);
  sub_1D451A2FC();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1D44A4CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44AF1AC();
  sub_1D44AF19C();
  v0 = sub_1D42B8DB4();
  sub_1D44AF2AC(v0);
  v1 = sub_1D42B8DB4();
  sub_1D44AF2A0(v1);
  v2 = sub_1D42B8DB4();
  sub_1D44AF138(v2);
  sub_1D4419868();
  sub_1D4419898(&qword_1EFE55A20);
  sub_1D44AF294();
  sub_1D44AF094();
  sub_1D42BE93C();
  sub_1D42FC448();
  return sub_1D44AF048();
}

_QWORD *sub_1D44A4D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  _QWORD *result;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  double v47;
  double v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v4 = sub_1D42B28FC(&qword_1EFE55648);
  v54 = *(_QWORD *)(v4 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v5);
  sub_1D42BE8F8();
  v6 = sub_1D42B28FC(&qword_1EFE55650);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1D42B28FC(&qword_1EFE55658);
  v56 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v11);
  sub_1D42BE768();
  v55 = v12;
  v13 = sub_1D42B28FC((uint64_t *)&unk_1EFE55660);
  v59 = *(_QWORD *)(v13 - 8);
  v60 = v13;
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v14);
  sub_1D42BE768();
  v58 = v15;
  v16 = sub_1D4519D20();
  v61 = *(_QWORD *)(v16 - 8);
  v62 = v16;
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v17);
  sub_1D42BE768();
  v19 = v18;
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_BYTE *)(a1 + 48);
  v23 = *(_BYTE *)(a1 + 49);
  v24 = *(_BYTE *)(a1 + 50);
  v25 = *(_BYTE *)(a1 + 51);
  v26 = *(_BYTE *)(a1 + 52);
  v27 = *(_BYTE *)(a1 + 53);
  v28 = *(_QWORD *)(a1 + 56);
  v29 = *(_BYTE *)(a1 + 64);
  v63 = *(_OWORD *)a1;
  v64 = v20;
  v65 = v21;
  v66 = *(_OWORD *)(a1 + 32);
  v67 = v22;
  v68 = v23;
  v69 = v24;
  v70 = v25;
  v71 = v26;
  v72 = v27;
  v73 = v28;
  v74 = v29;
  result = (_QWORD *)sub_1D44B1144(&v75, &v63);
  if (!v2)
  {
    v32 = result;
    v49[1] = 0;
    v50 = v7;
    v33 = v75;
    v51 = v19;
    v34 = v31;
    sub_1D4519D14();
    v35 = sub_1D42B6F40();
    *(_BYTE *)(v35 + 16) = v22 ^ 1;
    *(_QWORD *)(v35 + 24) = v32;
    v36 = (_QWORD *)sub_1D42B6F40();
    v36[2] = sub_1D44AAFB0;
    v36[3] = v35;
    v53 = v33;
    v36[4] = v33;
    v52 = v32;
    swift_retain();
    sub_1D42B28FC(&qword_1EFE50860);
    sub_1D42E33F8(qword_1EFE55670, &qword_1EFE50860);
    sub_1D451A2C0();
    sub_1D42B28FC((uint64_t *)&unk_1EFE47658);
    sub_1D42E33F8(qword_1EFE55680, &qword_1EFE55648);
    sub_1D451A3A4();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v1, v4);
    v37 = sub_1D42B6F40();
    *(_QWORD *)(v37 + 16) = sub_1D44AB04C;
    *(_QWORD *)(v37 + 24) = 0;
    sub_1D42B28FC(&qword_1EFE47668);
    sub_1D42E33F8(qword_1EFE55690, &qword_1EFE55650);
    v38 = v55;
    sub_1D451A3A4();
    swift_release();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v6);
    *(_QWORD *)&v63 = 0;
    *((_QWORD *)&v63 + 1) = 0xE000000000000000;
    sub_1D451B400();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v63 = 0xD000000000000021;
    *((_QWORD *)&v63 + 1) = 0x80000001D455AFD0;
    sub_1D43287AC(&qword_1EFE4CB00, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v39 = v51;
    v40 = v62;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    sub_1D451A794();
    v41 = v58;
    sub_1D44A4BCC(v63, *((uint64_t *)&v63 + 1));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v38, v57);
    sub_1D42E33F8(&qword_1EFE556A0, (uint64_t *)&unk_1EFE55660);
    v42 = v60;
    v43 = sub_1D451A374();
    sub_1D42B28FC(&qword_1EFE556A8);
    sub_1D42B6F40();
    v44 = sub_1D43AEFD8(v43);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v41, v42);
    *(_QWORD *)&v63 = v44;
    sub_1D42E33F8(&qword_1EFE556B0, &qword_1EFE556A8);
    v45 = sub_1D451A2E4();
    swift_release();
    v46 = objc_msgSend(v34, sel_channelCount);
    objc_msgSend(v34, sel_sampleRate);
    v48 = v47;

    swift_release();
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v39, v40);
    if ((~*(_QWORD *)&v48 & 0x7FF0000000000000) != 0)
    {
      if (v48 > -9.22337204e18)
      {
        if (v48 < 9.22337204e18)
        {
          type metadata accessor for SharedBuiltInMicrophone.Instance();
          result = (_QWORD *)sub_1D42B6F40();
          result[2] = v45;
          result[3] = v46;
          result[4] = (uint64_t)v48;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1D44A531C(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
    return sub_1D451B358();
  else
    return *(_QWORD *)(a1 + 16);
}

void sub_1D44A5340(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if ((unint64_t)(a2 - 0x2000000000000000) >> 62 != 3)
      __break(1u);
  }
  else
  {
    sub_1D42CB35C();
  }
}

void sub_1D44A5368(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if ((unint64_t)(a2 - 0x1000000000000000) >> 61 != 7)
      __break(1u);
  }
  else
  {
    sub_1D42CB35C();
  }
}

void sub_1D44A5390()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE557C0);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE557C8);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A53EC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A661C(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE496D8);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE557E0);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A548C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE55748);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55750);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A54E8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A690C(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE55760);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55768);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5588()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE557C0);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE557C8);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A55E4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A6BFC(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE496D8);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE557E0);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5684()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE557C0);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE557C8);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A56E0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A6EEC(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE496D8);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE557E0);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5780()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE4A248);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC((uint64_t *)&unk_1EFE55860);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A57DC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A71DC(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE55870);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55878);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A587C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE4CD98);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55820);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A58D8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A74CC(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(qword_1EFE51000);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55828);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5978()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE558E0);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE558E8);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A59D4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A77B8(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE558F8);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55900);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5A74()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE4CD98);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55820);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A5AD0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A7AA8(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(qword_1EFE51000);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55828);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5B70()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE55958);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55960);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A5BCC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A7D98(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE55970);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55978);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5C6C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE55958);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55960);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A5CC8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A8084(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE55970);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55978);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5D68()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE55B70);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55B78);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A5DC4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A8370(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE55B88);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55B90);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5E64()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE55B00);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55B08);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A5EC0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A8660(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE55B18);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55B20);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A5F60()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE55A98);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55AA0);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A5FBC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A8934(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE55AB0);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55AB8);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A605C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE55A50);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55A58);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A60B8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A8C24(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE55A68);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55A70);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

void sub_1D44A6158()
{
  uint64_t v0;
  uint64_t v1;

  sub_1D42CB740();
  sub_1D44AF170();
  sub_1D42B28FC(&qword_1EFE55A50);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v0);
  sub_1D42F1ED4();
  sub_1D42B28FC(&qword_1EFE55A58);
  sub_1D44AF124();
  MEMORY[0x1E0C80A78](v1);
  sub_1D44AF074();
}

void sub_1D44A61B4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (void (*)(void))sub_1D44AF0C4();
  sub_1D44A8F14(v2, v3, v4);
  sub_1D44AF164();
  if (v0)
  {
    *(_QWORD *)(v1 - 96) = MEMORY[0x1E0DEE9D8];
    sub_1D42CB9F8();
    sub_1D42E3F8C(&qword_1EFE55A68);
    sub_1D44AF0B0();
    v5 = sub_1D42B6F40();
    sub_1D44AF02C(v5);
    sub_1D44AF20C();
    sub_1D44AF14C(v6);
    sub_1D44AF114();
    sub_1D44AF204(&qword_1EFE55A70);
    sub_1D44AF104();
    sub_1D443FA1C();
    sub_1D44AF158();
  }
  sub_1D44A3BEC();
  sub_1D42CB520();
}

uint64_t sub_1D44A6254(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v6 = sub_1D42B28FC(&qword_1EFE556D8);
  MEMORY[0x1E0C80A78](v6);
  v7 = sub_1D42B28FC((uint64_t *)&unk_1EFE556E0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v9 = (void *)MEMORY[0x1D825DB34](v8);
  v10 = sub_1D44A9204(a1, a2, a3);
  objc_autoreleasePoolPop(v9);
  return v10;
}

uint64_t sub_1D44A6438(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v6 = sub_1D42B28FC(&qword_1EFE55748);
  MEMORY[0x1E0C80A78](v6);
  v7 = sub_1D42B28FC(&qword_1EFE55750);
  v8 = MEMORY[0x1E0C80A78](v7);
  v9 = (void *)MEMORY[0x1D825DB34](v8);
  v10 = sub_1D44A94F4(a1, a2, a3);
  objc_autoreleasePoolPop(v9);
  return v10;
}

uint64_t sub_1D44A661C(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE557E8);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE557F0);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE557F8, &qword_1EFE557F0);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(qword_1EFE55800, &qword_1EFE557E8);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A690C(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55770);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE55778);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55780, &qword_1EFE55778);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(&qword_1EFE55788, &qword_1EFE55770);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A6BFC(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE557E8);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE557F0);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE557F8, &qword_1EFE557F0);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(qword_1EFE55800, &qword_1EFE557E8);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A6EEC(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE557E8);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE557F0);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE557F8, &qword_1EFE557F0);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(qword_1EFE55800, &qword_1EFE557E8);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A71DC(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55880);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE55888);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55890, &qword_1EFE55888);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(&qword_1EFE55898, &qword_1EFE55880);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A74CC(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a3;
  v27 = sub_1D42B28FC(&qword_1EFE55830);
  MEMORY[0x1E0C80A78](v27);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1D42B28FC(&qword_1EFE55838);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v12 = swift_allocObject();
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  *(_QWORD *)(v12 + 16) = v13;
  v14 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = swift_allocObject();
    v25 = v9;
    *(_QWORD *)(v16 + 16) = sub_1D44AEA88;
    *(_QWORD *)(v16 + 24) = v15;
    v17 = swift_allocObject();
    v24 = v8;
    v18 = v17;
    *(_QWORD *)(v17 + 16) = sub_1D44AEA88;
    *(_QWORD *)(v17 + 24) = v15;
    v19 = sub_1D42B28FC(&qword_1EFE55840);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v7, v26, v19);
    v20 = &v7[*(int *)(v27 + 36)];
    *((_OWORD *)v20 + 2) = 0u;
    *((_OWORD *)v20 + 3) = 0u;
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    *((_QWORD *)v20 + 8) = sub_1D44AEAA8;
    *((_QWORD *)v20 + 9) = v16;
    *((_OWORD *)v20 + 5) = 0u;
    *((_OWORD *)v20 + 6) = 0u;
    *((_OWORD *)v20 + 7) = 0u;
    *((_QWORD *)v20 + 16) = sub_1D43EDF40;
    *((_QWORD *)v20 + 17) = v18;
    *((_QWORD *)v20 + 18) = 0;
    *((_QWORD *)v20 + 19) = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55848, &qword_1EFE55830);
    sub_1D451A3EC();
    sub_1D42D7018((uint64_t)v7, &qword_1EFE55830);
    sub_1D42E33F8(qword_1EFE55850, &qword_1EFE55838);
    v21 = v24;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v21);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A77B8(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55908);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE55910);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55918, &qword_1EFE55910);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(&qword_1EFE55920, &qword_1EFE55908);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A7AA8(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55928);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE7C;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE7C;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE55930);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55938, &qword_1EFE55930);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(qword_1EFE55940, &qword_1EFE55928);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A7D98(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a3;
  v27 = sub_1D42B28FC(&qword_1EFE55980);
  MEMORY[0x1E0C80A78](v27);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1D42B28FC(&qword_1EFE55988);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v12 = swift_allocObject();
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  *(_QWORD *)(v12 + 16) = v13;
  v14 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = swift_allocObject();
    v25 = v9;
    *(_QWORD *)(v16 + 16) = sub_1D44AEE7C;
    *(_QWORD *)(v16 + 24) = v15;
    v17 = swift_allocObject();
    v24 = v8;
    v18 = v17;
    *(_QWORD *)(v17 + 16) = sub_1D44AEE7C;
    *(_QWORD *)(v17 + 24) = v15;
    v19 = sub_1D42B28FC(&qword_1EFE55990);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v7, v26, v19);
    v20 = &v7[*(int *)(v27 + 36)];
    *((_OWORD *)v20 + 2) = 0u;
    *((_OWORD *)v20 + 3) = 0u;
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    *((_QWORD *)v20 + 8) = sub_1D44AF018;
    *((_QWORD *)v20 + 9) = v16;
    *((_OWORD *)v20 + 5) = 0u;
    *((_OWORD *)v20 + 6) = 0u;
    *((_OWORD *)v20 + 7) = 0u;
    *((_QWORD *)v20 + 16) = sub_1D43EDF40;
    *((_QWORD *)v20 + 17) = v18;
    *((_QWORD *)v20 + 18) = 0;
    *((_QWORD *)v20 + 19) = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55998, &qword_1EFE55980);
    sub_1D451A3EC();
    sub_1D42D7018((uint64_t)v7, &qword_1EFE55980);
    sub_1D42E33F8(&qword_1EFE559A0, &qword_1EFE55988);
    v21 = v24;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v21);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A8084(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a3;
  v27 = sub_1D42B28FC(&qword_1EFE559A8);
  MEMORY[0x1E0C80A78](v27);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1D42B28FC((uint64_t *)&unk_1EFE559B0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v12 = swift_allocObject();
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  *(_QWORD *)(v12 + 16) = v13;
  v14 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = swift_allocObject();
    v25 = v9;
    *(_QWORD *)(v16 + 16) = sub_1D44AEE7C;
    *(_QWORD *)(v16 + 24) = v15;
    v17 = swift_allocObject();
    v24 = v8;
    v18 = v17;
    *(_QWORD *)(v17 + 16) = sub_1D44AEE7C;
    *(_QWORD *)(v17 + 24) = v15;
    v19 = sub_1D42B28FC((uint64_t *)&unk_1EFE4CF00);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v7, v26, v19);
    v20 = &v7[*(int *)(v27 + 36)];
    *((_OWORD *)v20 + 2) = 0u;
    *((_OWORD *)v20 + 3) = 0u;
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    *((_QWORD *)v20 + 8) = sub_1D44AF018;
    *((_QWORD *)v20 + 9) = v16;
    *((_OWORD *)v20 + 5) = 0u;
    *((_OWORD *)v20 + 6) = 0u;
    *((_OWORD *)v20 + 7) = 0u;
    *((_QWORD *)v20 + 16) = sub_1D43EDF40;
    *((_QWORD *)v20 + 17) = v18;
    *((_QWORD *)v20 + 18) = 0;
    *((_QWORD *)v20 + 19) = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE559C0, &qword_1EFE559A8);
    sub_1D451A3EC();
    sub_1D42D7018((uint64_t)v7, &qword_1EFE559A8);
    sub_1D42E33F8(&qword_1EFE559C8, (uint64_t *)&unk_1EFE559B0);
    v21 = v24;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v21);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A8370(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55B98);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE55BA0);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55BA8, &qword_1EFE55BA0);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(&qword_1EFE55BB0, &qword_1EFE55B98);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A8660(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a3;
  v26 = sub_1D42B28FC(&qword_1EFE55B28);
  MEMORY[0x1E0C80A78](v26);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1D42B28FC((uint64_t *)&unk_1EFE55B30);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v12 = swift_allocObject();
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  *(_QWORD *)(v12 + 16) = v13;
  v14 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = swift_allocObject();
    v24 = v9;
    *(_QWORD *)(v16 + 16) = sub_1D44AEB70;
    *(_QWORD *)(v16 + 24) = v15;
    v17 = swift_allocObject();
    v23 = v8;
    v18 = v17;
    *(_QWORD *)(v17 + 16) = sub_1D44AEB70;
    *(_QWORD *)(v17 + 24) = v15;
    sub_1D44AEB90(v25, (uint64_t)v7);
    v19 = &v7[*(int *)(v26 + 36)];
    *((_OWORD *)v19 + 2) = 0u;
    *((_OWORD *)v19 + 3) = 0u;
    *(_OWORD *)v19 = 0u;
    *((_OWORD *)v19 + 1) = 0u;
    *((_QWORD *)v19 + 8) = sub_1D44AF018;
    *((_QWORD *)v19 + 9) = v16;
    *((_OWORD *)v19 + 5) = 0u;
    *((_OWORD *)v19 + 6) = 0u;
    *((_OWORD *)v19 + 7) = 0u;
    *((_QWORD *)v19 + 16) = sub_1D43EDF40;
    *((_QWORD *)v19 + 17) = v18;
    *((_QWORD *)v19 + 18) = 0;
    *((_QWORD *)v19 + 19) = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55B40, &qword_1EFE55B28);
    sub_1D451A3EC();
    sub_1D42D7018((uint64_t)v7, &qword_1EFE55B28);
    sub_1D42E33F8(&qword_1EFE55B48, (uint64_t *)&unk_1EFE55B30);
    v20 = v23;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v20);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A8934(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55AC0);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE55AC8);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55AD0, &qword_1EFE55AC8);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(&qword_1EFE55AD8, &qword_1EFE55AC0);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A8C24(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55A78);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE55A80);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55A88, &qword_1EFE55A80);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(&qword_1EFE55A90, &qword_1EFE55A78);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A8F14(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55A78);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE55A80);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55A88, &qword_1EFE55A80);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(&qword_1EFE55A90, &qword_1EFE55A78);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A9204(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55700);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AE9F4;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AE9F4;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDE44;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC((uint64_t *)&unk_1EFE55708);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55718, (uint64_t *)&unk_1EFE55708);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDE44;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(&qword_1EFE55720, &qword_1EFE55700);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

uint64_t sub_1D44A94F4(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)();
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v42)();
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a3;
  v22 = sub_1D42B28FC(&qword_1EFE55770);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SafeLock();
  v9 = swift_allocObject();
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  v11 = swift_allocObject();
  a1();
  if (v3)
  {
    swift_release();
    swift_deallocUninitializedObject();
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = swift_allocObject();
    v20 = v6;
    v14 = v13;
    *(_QWORD *)(v13 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v13 + 24) = v12;
    v15 = swift_allocObject();
    v21 = 0;
    v16 = v15;
    *(_QWORD *)(v15 + 16) = sub_1D44AEE78;
    *(_QWORD *)(v15 + 24) = v12;
    v23 = v51;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = sub_1D44AF018;
    v29 = v14;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = sub_1D43EDF40;
    v34 = v15;
    v35 = 0;
    v36 = 0;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    v19[1] = sub_1D42B28FC(&qword_1EFE55778);
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D42E33F8(&qword_1EFE55780, &qword_1EFE55778);
    sub_1D451A3EC();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = v51;
    v42 = sub_1D44AF018;
    v43 = v14;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = sub_1D43EDF40;
    v48 = v16;
    v49 = 0;
    v50 = 0;
    sub_1D44AEBE4(&v37, (void (*)(uint64_t, uint64_t))sub_1D44AEE80);
    sub_1D42E33F8(&qword_1EFE55788, &qword_1EFE55770);
    v17 = v22;
    a2 = sub_1D451A2E4();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
    swift_release();
  }
  return a2;
}

void sub_1D44A97E4(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(os_unfair_lock_s **)(a1 + 16);
  if (os_unfair_lock_trylock(v3))
  {
    v4 = (uint64_t *)(a2 + 16);
    swift_beginAccess();
    if (*v4 != 1)
    {
      swift_beginAccess();
      v5 = *v4;
      *v4 = 1;
      sub_1D44AE9FC(v5);
    }
    os_unfair_lock_unlock(v3);
  }
}

void sub_1D44A9870(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = *(os_unfair_lock_s **)(a1 + 16);
  if (os_unfair_lock_trylock(v5))
  {
    v6 = (uint64_t *)(a2 + 16);
    swift_beginAccess();
    if (*v6)
    {
      swift_beginAccess();
      v7 = *v6;
      *v6 = 0;
      a3(v7);
    }
    os_unfair_lock_unlock(v5);
  }
}

uint64_t sub_1D44A98F8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1D44A9918(void *a1)
{
  id v2;
  _QWORD *v3;

  v2 = a1;
  sub_1D42B28FC(&qword_1EFE49BB0);
  if (sub_1D451B7FC())
  {

  }
  else
  {
    swift_allocError();
    *v3 = a1;
  }
  sub_1D42CB758();
}

uint64_t sub_1D44A99A0(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v16;

  if (a1)
    v5 = 0x64656C696166;
  else
    v5 = 0x64656873696E6966;
  if (a1)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE800000000000000;
  v16 = (uint64_t)a1;
  v7 = a1;
  sub_1D42B28FC(&qword_1EFE556C0);
  v8 = sub_1D451A728();
  v10 = v9;
  if (qword_1EFE40338 != -1)
    swift_once();
  v11 = sub_1D451A014();
  sub_1D42CC880(v11, (uint64_t)qword_1EFEA7700);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = sub_1D4519FFC();
  v13 = sub_1D451AF74();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    *(_DWORD *)v14 = 136446722;
    swift_bridgeObjectRetain();
    sub_1D43D72EC(a2, a3, &v16);
    sub_1D451B1A8();
    sub_1D43E6270();
    *(_WORD *)(v14 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_1D43D72EC(v5, v6, &v16);
    sub_1D451B1A8();
    sub_1D43E6270();
    *(_WORD *)(v14 + 22) = 2080;
    swift_bridgeObjectRetain();
    sub_1D43D72EC(v8, v10, &v16);
    sub_1D451B1A8();
    sub_1D43E6270();
    _os_log_impl(&dword_1D42A7000, v12, v13, "%{public}sreceive completion %{public}s; %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    sub_1D42CC934();
  }

  sub_1D439E0C8();
  sub_1D439E0C8();
  return sub_1D439E0C8();
}

unint64_t sub_1D44A9C2C(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v5 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    goto LABEL_41;
  if (a4 < 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    result = sub_1D451B55C();
    __break(1u);
    return result;
  }
  if (a4)
  {
    if ((a5 & 0x8000000000000000) == 0)
    {
      v6 = 0;
      v7 = a5 * a4;
      while (1)
      {
        if (v6 == a4)
          goto LABEL_35;
        if ((unsigned __int128)((uint64_t)v6 * (__int128)a5) >> 64 != (uint64_t)(v6 * a5) >> 63)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if (a5)
        {
          v8 = v7 + v6;
          v9 = __OFADD__(v7, v6);
          if ((unsigned __int128)(a5 * (__int128)a4) >> 64 != (a5 * a4) >> 63)
            goto LABEL_37;
          if (v9)
            goto LABEL_38;
          if (v6 != v8)
            break;
        }
LABEL_15:
        if (++v6 == a4)
          goto LABEL_29;
      }
      v10 = *(_QWORD *)(a3 + 16);
      if (v6 < v10)
      {
        v11 = (_DWORD *)(v5 + 4 * v6 * a5);
        v12 = a5 - 1;
        result = v6;
        do
        {
          v13 = *(_DWORD *)(a3 + 32 + 4 * result);
          if (result % a4 == v6)
          {
            v14 = result / a4 + 1;
            v15 = v14 * a4;
            if ((unsigned __int128)(v14 * (__int128)a4) >> 64 != (v14 * a4) >> 63)
            {
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
            v16 = __OFADD__(v15, v6);
            result = v15 + v6;
            if (v16)
              goto LABEL_34;
          }
          else
          {
            ++result;
          }
          *v11 = v13;
          if (!v12 || result == v8)
            goto LABEL_15;
          ++v11;
          --v12;
        }
        while (result < v10);
      }
      __break(1u);
LABEL_29:
      if ((unsigned __int128)(a5 * (__int128)a4) >> 64 == (a5 * a4) >> 63)
        goto LABEL_32;
      __break(1u);
      goto LABEL_31;
    }
    goto LABEL_40;
  }
LABEL_31:
  v7 = a4 * a5;
LABEL_32:
  *a2 = v7;
  return result;
}

int64_t sub_1D44A9DA8(void *a1)
{
  void *v1;
  id v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  id v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int64_t result;
  id v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;

  v1 = a1;
  v2 = objc_msgSend(a1, sel_format);
  v3 = objc_msgSend(v2, sel_isInterleaved);

  if (v3)
  {
    type metadata accessor for SNError();
    v4 = 0xD000000000000015;
    v5 = "buffer is interleaved";
LABEL_20:
    sub_1D43EC59C(0xD000000000000017, 0x80000001D4551120, 1, 0, v4, (unint64_t)(v5 - 32) | 0x8000000000000000);
    return swift_willThrow();
  }
  v26 = objc_msgSend(v1, sel_frameLength);
  v6 = objc_msgSend(v1, sel_format);
  v7 = objc_msgSend(v6, sel_channelCount);

  v8 = (char *)objc_msgSend(v1, sel_audioBufferList);
  v9 = sub_1D44AD2CC(v8 + 8, *(unsigned int *)v8);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v27 = MEMORY[0x1E0DEE9D8];
    sub_1D42C7724();
    v11 = v27;
    if (*(_DWORD *)(v9 + 32) != 1)
    {
LABEL_13:
      type metadata accessor for SNError();
      sub_1D43EC59C(0xD000000000000017, 0x80000001D4551120, 1, 0, 0xD000000000000027, 0x80000001D455B070);
      swift_willThrow();
      swift_release();
      return swift_release();
    }
    v24 = v7;
    v25 = v1;
    v12 = 0;
    v13 = *(_QWORD *)(v27 + 16);
    v14 = 16 * v13;
    v15 = v10 - 1;
    while (1)
    {
      v16 = *(_QWORD *)(v9 + v12 + 40);
      v17 = v16 ? v16 + *(unsigned int *)(v9 + v12 + 36) : 0;
      v28 = v11;
      if (v13 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        v20 = v14;
        sub_1D42C7724();
        v14 = v20;
        v11 = v28;
      }
      *(_QWORD *)(v11 + 16) = v13 + 1;
      v18 = v11 + v14 + v12;
      *(_QWORD *)(v18 + 32) = v16;
      *(_QWORD *)(v18 + 40) = v17;
      if (!v15)
        break;
      v19 = *(_DWORD *)(v9 + v12 + 48);
      v12 += 16;
      --v15;
      ++v13;
      if (v19 != 1)
        goto LABEL_13;
    }
    swift_release();
    v1 = v25;
    v7 = v24;
  }
  else
  {
    swift_release();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  if (*(_QWORD *)(v11 + 16) != v7)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for SNError();
    v4 = 0xD000000000000021;
    v5 = "could not map buffers to channels";
    goto LABEL_20;
  }
  v22 = objc_msgSend(v1, sel_format);
  v23 = objc_msgSend(v22, sel_channelCount);

  result = v26 * (unint64_t)v23;
  if ((v23 * (unsigned __int128)v26) >> 64 == result >> 63)
    return (int64_t)sub_1D44AB0F0(result, v11, v26, v7);
  __break(1u);
  return result;
}

char *sub_1D44AA100(char *result, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_QWORD *)(a3 + 16);
  if (!v8)
  {
LABEL_21:
    v16 = a4 * a5;
    if ((a4 * (unsigned __int128)a5) >> 64 != v16 >> 63)
      goto LABEL_25;
    *a2 = v16;
    return result;
  }
  if ((unint64_t)(a4 - 0x2000000000000000) >> 62 != 3)
    goto LABEL_26;
  v9 = result;
  v10 = 0;
  v11 = 4 * a4;
  v12 = (_QWORD *)(a3 + 40);
  while (1)
  {
    v13 = (const void *)*(v12 - 1);
    if (v13)
    {
      if (*v12 - (_QWORD)v13 != v11)
        goto LABEL_23;
    }
    else if (v11)
    {
LABEL_23:
      type metadata accessor for SNError();
      sub_1D43EC59C(0xD000000000000017, 0x80000001D4551120, 1, 0, 0xD00000000000001BLL, 0x80000001D455B0F0);
      return (char *)swift_willThrow();
    }
    v14 = *(char **)v9;
    if (!*(_QWORD *)v9)
    {
      result = 0;
      goto LABEL_12;
    }
    if ((unsigned __int128)(a4 * (__int128)v10) >> 64 != (a4 * v10) >> 63)
      break;
    result = &v14[4 * a4 * v10];
    v14 = &result[v11];
LABEL_12:
    if (v13)
      v15 = *v12 - (_QWORD)v13;
    else
      v15 = 0;
    if (result)
    {
      if (v14 - result < v15)
        goto LABEL_27;
      if (v13)
        result = (char *)memmove(result, v13, *v12 - (_QWORD)v13);
    }
    else if (v15 > 0)
    {
      goto LABEL_27;
    }
    ++v10;
    v12 += 2;
    if (v8 == v10)
      goto LABEL_21;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  result = (char *)sub_1D451B5D4();
  __break(1u);
  return result;
}

void sub_1D44AA2D4(void *a1)
{
  id v2;
  unsigned int v3;

  v2 = objc_msgSend(a1, sel_format);
  v3 = objc_msgSend(v2, sel_isInterleaved);

  if (v3)
    sub_1D44AA34C(a1);
  else
    sub_1D44A9DA8(a1);
}

void sub_1D44AA34C(void *a1)
{
  uint64_t v1;
  id v3;
  unsigned int v4;
  unsigned int v5;
  id v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  int v10;
  id v11;
  unsigned int v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  const char *v18;

  v3 = objc_msgSend(a1, sel_format);
  v4 = objc_msgSend(v3, sel_isInterleaved);

  if (v4)
  {
    v5 = objc_msgSend(a1, sel_frameLength);
    v6 = objc_msgSend(a1, sel_format);
    v7 = objc_msgSend(v6, sel_channelCount);

    v8 = (char *)objc_msgSend(a1, sel_audioBufferList);
    v9 = sub_1D44AD2CC(v8 + 8, *(unsigned int *)v8);
    v10 = sub_1D4345AA0(v9);
    swift_release();
    if (v1)
      return;
    if (v7 == v10)
    {
      v11 = objc_msgSend(a1, sel_format);
      v12 = objc_msgSend(v11, sel_channelCount);

      v13 = v5 * (unint64_t)v12;
      if ((v12 * (unsigned __int128)v5) >> 64 == v13 >> 63)
      {
        sub_1D43E2A9C(v5 * (unint64_t)v12);
        if ((unint64_t)(v13 - 0x2000000000000000) >> 62 == 3)
        {
          v15 = v14;
          sub_1D451B1A8();
          v16 = v5 * (unint64_t)v7;
          if ((v5 * (unsigned __int128)v7) >> 64 == v16 >> 63)
          {
            if (v13 >= v16)
            {
              *(_QWORD *)(v15 + 16) = v16;
              return;
            }
            goto LABEL_16;
          }
LABEL_15:
          __break(1u);
LABEL_16:
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_15;
    }
    type metadata accessor for SNError();
    v17 = 0xD000000000000027;
    v18 = "unexpected number of channels in buffer";
  }
  else
  {
    type metadata accessor for SNError();
    v17 = 0xD000000000000019;
    v18 = "buffer is not interleaved";
  }
  sub_1D43EC59C(0xD000000000000017, 0x80000001D4551120, 1, 0, v17, (unint64_t)(v18 - 32) | 0x8000000000000000);
  swift_willThrow();
}

uint64_t sub_1D44AA594(uint64_t a1, void (*a2)(uint64_t *__return_ptr, _BYTE *))
{
  uint64_t v2;
  uint64_t result;
  _BYTE v6[32];
  uint64_t v7;
  _BYTE v8[32];

  sub_1D44AE918(a1, (uint64_t)v8);
  sub_1D44AE918((uint64_t)v8, (uint64_t)v6);
  sub_1D44AE960((uint64_t)v8);
  a2(&v7, v6);
  result = sub_1D44AE990(a1);
  if (!v2)
    return v7;
  return result;
}

uint64_t sub_1D44AA61C()
{
  return AudioConfiguration.hash(into:)();
}

uint64_t sub_1D44AA69C(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *((_BYTE *)a1 + 48);
  v5 = *((_BYTE *)a1 + 49);
  v6 = *((_BYTE *)a1 + 50);
  v7 = *((_BYTE *)a1 + 51);
  v8 = *((_BYTE *)a1 + 52);
  v9 = *((_BYTE *)a1 + 53);
  v10 = *((_QWORD *)a1 + 7);
  v11 = *((_BYTE *)a1 + 64);
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *((_QWORD *)a2 + 3);
  v15 = *((_BYTE *)a2 + 48);
  v16 = *((_BYTE *)a2 + 49);
  v17 = *((_BYTE *)a2 + 50);
  v18 = *((_BYTE *)a2 + 51);
  v19 = *((_BYTE *)a2 + 52);
  v20 = *((_BYTE *)a2 + 53);
  v21 = *((_QWORD *)a2 + 7);
  v22 = *((_BYTE *)a2 + 64);
  v36 = *a1;
  v37 = v2;
  v38 = v3;
  v39 = a1[2];
  v40 = v4;
  v41 = v5;
  v42 = v6;
  v43 = v7;
  v44 = v8;
  v45 = v9;
  v46 = v10;
  v47 = v11;
  v24 = v12;
  v25 = v13;
  v26 = v14;
  v27 = a2[2];
  v28 = v15;
  v29 = v16;
  v30 = v17;
  v31 = v18;
  v32 = v19;
  v33 = v20;
  v34 = v21;
  v35 = v22;
  return static AudioConfiguration.== infix(_:_:)((uint64_t)&v36, (uint64_t)&v24) & 1;
}

uint64_t sub_1D44AA784(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000012 && a2 == 0x80000001D4551AC0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1D451B820();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_1D44AA808()
{
  return 0xD000000000000012;
}

void sub_1D44AA824(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;

  v3 = sub_1D42B28FC(&qword_1EFE559F8);
  v23 = *(_QWORD *)(v3 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v21 = v1[1];
  v22 = v7;
  v9 = *((_QWORD *)v1 + 4);
  v8 = *((_QWORD *)v1 + 5);
  v10 = *((_BYTE *)v1 + 48);
  v11 = *((unsigned __int8 *)v1 + 49);
  v19 = *((unsigned __int8 *)v1 + 50);
  v20 = v11;
  v12 = *((unsigned __int8 *)v1 + 51);
  v17 = *((unsigned __int8 *)v1 + 52);
  v18 = v12;
  v16 = *((unsigned __int8 *)v1 + 53);
  v15 = *((_QWORD *)v1 + 7);
  v14 = *((unsigned __int8 *)v1 + 64);
  sub_1D42B5528(a1, a1[3]);
  sub_1D44AEB28();
  sub_1D451BA24();
  v24 = v22;
  v25 = v21;
  v26 = v9;
  v27 = v8;
  v28 = v10;
  v29 = v20;
  v30 = v19;
  v31 = v18;
  v32 = v17;
  v33 = v16;
  v34 = v15;
  v35 = v14;
  sub_1D42B5ACC();
  sub_1D451B760();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v3);
  sub_1D42BE844();
}

uint64_t sub_1D44AA99C()
{
  sub_1D451B958();
  AudioConfiguration.hash(into:)();
  return sub_1D451B994();
}

void sub_1D44AAA60(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;

  v5 = sub_1D42B28FC(&qword_1EFE559E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D42B5528(a1, a1[3]);
  sub_1D44AEB28();
  sub_1D451BA0C();
  if (!v2)
  {
    sub_1D42B5B80();
    sub_1D451B688();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v21;
    v10 = v22;
    v11 = v24;
    v12 = v25;
    v13 = v26;
    v14 = v27;
    v15 = v28;
    v16 = v29;
    v17 = v30;
    v18 = v31;
    v19 = v23;
    *(_OWORD *)a2 = *(_OWORD *)&v20[8];
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v10;
    *(_OWORD *)(a2 + 32) = v19;
    *(_BYTE *)(a2 + 48) = v11;
    *(_BYTE *)(a2 + 49) = v12;
    *(_BYTE *)(a2 + 50) = v13;
    *(_BYTE *)(a2 + 51) = v14;
    *(_BYTE *)(a2 + 52) = v15;
    *(_BYTE *)(a2 + 53) = v16;
    *(_QWORD *)(a2 + 56) = v17;
    *(_BYTE *)(a2 + 64) = v18;
  }
  sub_1D42B5400((uint64_t)a1);
  sub_1D42BE844();
}

uint64_t sub_1D44AABC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44AA784(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1D44AABE8()
{
  sub_1D44AEB28();
  return sub_1D451BA3C();
}

uint64_t sub_1D44AAC10()
{
  sub_1D44AEB28();
  return sub_1D451BA48();
}

void sub_1D44AAC38(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D44AAA60(a1, a2);
}

void sub_1D44AAC4C(_QWORD *a1)
{
  sub_1D44AA824(a1);
}

uint64_t sub_1D44AAC68()
{
  sub_1D451B958();
  AudioConfiguration.hash(into:)();
  return sub_1D451B994();
}

uint64_t sub_1D44AAD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = sub_1D42B28FC(qword_1EFE4EAA8);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  sub_1D42BE8F8();
  v3 = *(_QWORD *)(v0 + 16);
  v4 = (_QWORD *)sub_1D42B6F40();
  v4[2] = sub_1D42BE1BC;
  v4[3] = v0;
  v4[4] = v3;
  swift_retain();
  swift_retain();
  sub_1D42B28FC((uint64_t *)&unk_1EFE4ACD0);
  sub_1D42E33F8(&qword_1EFE496A0, (uint64_t *)&unk_1EFE4ACD0);
  sub_1D451A2C0();
  sub_1D42E33F8(qword_1EFE559D0, qword_1EFE4EAA8);
  v5 = sub_1D451A2E4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return v5;
}

uint64_t sub_1D44AAE50()
{
  sub_1D42EA528();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SharedBuiltInMicrophone.Instance()
{
  return objc_opt_self();
}

void type metadata accessor for SharedBuiltInMicrophone()
{
  sub_1D42CB35C();
}

void type metadata accessor for SharedBuiltInMicrophone.Configuration()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44AAEAC()
{
  unint64_t result;

  result = qword_1EFE55640;
  if (!qword_1EFE55640)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C4A8, &unk_1E97A7E10);
    atomic_store(result, (unint64_t *)&qword_1EFE55640);
  }
  return result;
}

uint64_t sub_1D44AAEE8()
{
  return sub_1D44AAD2C();
}

uint64_t sub_1D44AAF08()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 24);
}

uint64_t sub_1D44AAF14()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 32);
}

uint64_t sub_1D44AAF20@<X0>(char a1@<W0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) != 0)
  {
    type metadata accessor for SessionActivation();
    swift_allocObject();
    result = sub_1D447D748(a2, 0);
    if (v3)
      return result;
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t sub_1D44AAF94()
{
  uint64_t v0;

  sub_1D42EA3A0();
  return swift_deallocObject();
}

uint64_t sub_1D44AAFB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1D44AAF20(*(_BYTE *)(v1 + 16), *(void **)(v1 + 24), a1);
}

void sub_1D44AAFCC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;

  v4 = *(void **)(a1 + 8);
  sub_1D44AA2D4(*(void **)a1);
  if (!v2)
  {
    v9 = v5;
    v10 = v6;
    v11 = v7;
    v12 = v8;
    v13 = objc_msgSend(v4, sel_sampleTime);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v11;
    *(_BYTE *)(a2 + 24) = v12 & 1;
    *(_QWORD *)(a2 + 32) = v13;
  }
}

unint64_t sub_1D44AB04C@<X0>(unint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (*(_BYTE *)(result + 24) != 1)
  {
    result = swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  if ((unsigned __int128)(v3 * (__int128)v5) >> 64 == (v3 * v5) >> 63)
  {
    j__swift_bridgeObjectRetain(*(_QWORD *)result, v3, v5, 1);
    result = sub_1D44AB1B0(v3 * v5, v4, v3, v5);
    v4 = result;
LABEL_5:
    *a2 = v4;
    a2[1] = v3;
    a2[2] = v5;
    return result;
  }
  __break(1u);
  return result;
}

char *sub_1D44AB0F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  _QWORD v13[2];
  uint64_t v14;

  sub_1D43E2A9C(a1);
  v10 = v9;
  v13[1] = a1;
  v14 = 0;
  v13[0] = v11;
  result = sub_1D44AA100((char *)v13, &v14, a2, a3, a4);
  if (v4)
  {
    if (v14 <= a1)
    {
      *(_QWORD *)(v10 + 16) = v14;
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      return (char *)v10;
    }
    __break(1u);
  }
  else if (v14 <= a1)
  {
    *(_QWORD *)(v10 + 16) = v14;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

unint64_t sub_1D44AB1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  _QWORD v13[2];
  uint64_t v14;

  sub_1D43E2A9C(a1);
  v10 = v9;
  v13[1] = a1;
  v14 = 0;
  v13[0] = v11;
  result = sub_1D44A9C2C((unint64_t)v13, &v14, a2, a3, a4);
  if (v4)
  {
    if (v14 <= a1)
    {
      *(_QWORD *)(v10 + 16) = v14;
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      return v10;
    }
    __break(1u);
  }
  else if (v14 <= a1)
  {
    *(_QWORD *)(v10 + 16) = v14;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D44AB270()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF268();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

void *sub_1D44AB2F8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  void *v7;
  const void *v8;
  size_t v9;
  void *result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF398();
    if (!v5 & v4)
      v6 = v3 > v2;
    else
      v6 = 0;
    if (!v6)
    {
      v7 = (void *)sub_1D44AF224();
      return sub_1D44AF08C(v7, v8, v9);
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = (void *)sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AB37C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for KShotSegment(0) - 8) + 72) * a2;
    v6 = a3 + v5;
    v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3)
    {
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AB428(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    v3 = a1 + 56 * a2;
    if (a3 + 56 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE55A48);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

void *sub_1D44AB4D4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  void *v7;
  const void *v8;
  size_t v9;
  void *result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF35C();
    if (!v5 & v4)
      v6 = v3 > v2;
    else
      v6 = 0;
    if (!v6)
    {
      v7 = (void *)sub_1D44AF224();
      return sub_1D44AF08C(v7, v8, v9);
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = (void *)sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AB554()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF410();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

void *sub_1D44AB5E0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    v3 = a1 + 48 * a2;
    if (a3 + 48 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)sub_1D44AF224();
      return sub_1D44AF08C(v6, v7, v8);
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = (void *)sub_1D44341C0();
  __break(1u);
  return result;
}

void *sub_1D44AB674(char *a1, uint64_t a2, char *a3)
{
  void *result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    if (&a3[52 * a2] <= a1 || &a1[52 * a2] <= a3)
      return sub_1D44AF08C(a3, a1, 52 * a2);
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = (void *)sub_1D44341C0();
  __break(1u);
  return result;
}

void *sub_1D44AB70C(char *a1, uint64_t a2, char *a3)
{
  void *result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    if (&a3[28 * a2] <= a1 || &a1[28 * a2] <= a3)
      return sub_1D44AF08C(a3, a1, 28 * a2);
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = (void *)sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AB7A4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    v3 = a1 + 48 * a2;
    if (a3 + 48 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE52880);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AB84C(uint64_t a1, uint64_t a2)
{
  return sub_1D44ABA30(a1, a2);
}

uint64_t sub_1D44AB858(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF180();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE558B0);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AB8E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF33C();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE558C0);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AB978(uint64_t a1, uint64_t a2)
{
  return sub_1D44AB990(a1, a2);
}

uint64_t sub_1D44AB984(uint64_t a1, uint64_t a2)
{
  return sub_1D44AB990(a1, a2);
}

uint64_t sub_1D44AB990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF180();
    if (!v8 && v7)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_1D44AF378(v2, v3, v4, v5);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABA18(uint64_t a1, uint64_t a2)
{
  return sub_1D44ABA30(a1, a2);
}

uint64_t sub_1D44ABA24(uint64_t a1, uint64_t a2)
{
  return sub_1D44ABA30(a1, a2);
}

uint64_t sub_1D44ABA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF0DC();
    if (!v8 && v7)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_1D44AF378(v2, v3, v4, v5);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABAB8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF0DC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE40438);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABB48()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF410();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

void *sub_1D44ABBD0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  void *v7;
  const void *v8;
  size_t v9;
  void *result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF1C4();
    if (!v5 & v4)
      v6 = v3 > v2;
    else
      v6 = 0;
    if (!v6)
    {
      v7 = (void *)sub_1D44AF224();
      return sub_1D44AF08C(v7, v8, v9);
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = (void *)sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABC50(uint64_t a1, uint64_t a2)
{
  return sub_1D44AC520(a1, a2);
}

uint64_t sub_1D44ABC5C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF180();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE4A240);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABCEC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF268();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABD78(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF0DC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE55A00);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABE08()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF268();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABE90()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF250();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABF18(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF2D4();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC((uint64_t *)&unk_1EFE4A4F0);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ABFA8(uint64_t a1, uint64_t a2)
{
  return sub_1D44AC3F0(a1, a2);
}

uint64_t sub_1D44ABFBC(uint64_t a1, uint64_t a2)
{
  return sub_1D44AC350(a1, a2);
}

uint64_t sub_1D44ABFC8(uint64_t a1, uint64_t a2)
{
  return sub_1D44ABA30(a1, a2);
}

void *sub_1D44ABFD4(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if ((a2 & 0x8000000000000000) == 0 && (&__dst[16 * a2] <= __src || &__src[16 * a2] <= __dst))
    return memcpy(__dst, __src, 16 * a2);
  result = (void *)sub_1D451B5D4();
  __break(1u);
  return result;
}

void *sub_1D44AC09C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  void *v7;
  const void *v8;
  size_t v9;
  void *result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF2F0();
    if (!v5 & v4)
      v6 = v3 > v2;
    else
      v6 = 0;
    if (!v6)
    {
      v7 = (void *)sub_1D44AF224();
      return sub_1D44AF08C(v7, v8, v9);
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = (void *)sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC11C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF268();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC1A4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF250();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

void *sub_1D44AC22C()
{
  uint64_t v0;
  const void *v1;
  size_t v2;
  void *v3;
  void *v4;
  BOOL v5;
  BOOL v6;
  void *result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF424();
    if (!v6 && v5)
    {
      v5 = v4 >= v3;
      v6 = v4 == v3;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_1D44AF08C(v3, v1, v2);
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = (void *)sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC2AC()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  sub_1D44AF218();
  if (v3 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    if (v2 + 48 * v1 <= v0 || v0 + 48 * v1 <= v2)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC344(uint64_t a1, uint64_t a2)
{
  return sub_1D44AC350(a1, a2);
}

uint64_t sub_1D44AC350(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF2D4();
    if (!v8 && v7)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_1D44AF378(v2, v3, v4, v5);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC3DC(uint64_t a1, uint64_t a2)
{
  return sub_1D44AC3F0(a1, a2);
}

uint64_t sub_1D44AC3F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF2D4();
    if (!v6 && v5)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
    {
      sub_1D42E9D88(0, v3);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC484(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF0DC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE51990);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC514(uint64_t a1, uint64_t a2)
{
  return sub_1D44AC520(a1, a2);
}

uint64_t sub_1D44AC520(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF2B8();
    if (!v8 && v7)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_1D44AF378(v2, v3, v4, v5);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC5A8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF0DC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC((uint64_t *)&unk_1EFE519E0);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC638(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF0DC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE55A08);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC6C8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    v3 = a1 + 160 * a2;
    if (a3 + 160 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE4FCA0);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC770(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF2B8();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC((uint64_t *)&unk_1EFE557B0);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC800(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF180();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE558C8);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC890(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF0DC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE558D0);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC920(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF180();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE558D8);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44AC9B0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF250();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ACA38()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF268();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ACAC0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF2B8();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE54D50);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ACB50(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF33C();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE4CB68);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ACBE0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_1D44AF218();
  if (v0 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF250();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_1D44AF0FC();
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

uint64_t sub_1D44ACC68(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1D42DCED4();
    sub_1D44341F4();
  }
  else
  {
    sub_1D44AF0DC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1D42B28FC(&qword_1EFE55728);
      sub_1D44AF060();
      return sub_1D44AF01C();
    }
    sub_1D42DCED4();
    sub_1D44341E4();
  }
  result = sub_1D44341C0();
  __break(1u);
  return result;
}

void sub_1D44ACCF8(_DWORD *a1)
{
  unint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;

  v1 = *a1;
  if ((_DWORD)v1)
  {
    sub_1D42B28FC(&qword_1EFE556D0);
    v3 = (_QWORD *)sub_1D42B6F40();
    v4 = j__malloc_size(v3);
    v3[2] = v1;
    v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
    if (sub_1D44AD5B0(&v5, (uint64_t)(v3 + 4), v1, a1) != (_QWORD *)v1)
      __break(1u);
  }
  sub_1D42CB758();
}

void sub_1D44ACD80(unint64_t a1, unint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7[3];

  v4 = (unint64_t *)(a2 - a1);
  if (a2 < a1)
  {
    if ((uint64_t)(a1 - a2) < 0)
    {
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    v4 = (unint64_t *)(a2 - a1);
LABEL_5:
    if (!v4
      || ((uint64_t)v4 <= 0
        ? (v5 = (unint64_t *)MEMORY[0x1E0DEE9D8])
        : (unint64_t *)(sub_1D42B28FC(qword_1EFE51438),
                               v5 = (unint64_t *)sub_1D42B6F40(),
                               j__malloc_size(v5),
                               sub_1D44AF328(),
                               v5[2] = (unint64_t)v4,
                               v5[3] = v6),
          sub_1D44AD62C(v7, v5 + 4, (unint64_t)v4, a1, a2) == v4))
    {
      sub_1D42CB7D0();
      return;
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((uint64_t)(a2 - a1) >= 0)
    goto LABEL_5;
LABEL_14:
  __break(1u);
}

void sub_1D44ACE3C()
{
  sub_1D44AD254();
}

void sub_1D44ACE48()
{
  uint64_t v0;
  const void *v1;
  size_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_1D44932E4();
  if (*(_QWORD *)(v0 + 16))
  {
    sub_1D42B28FC((uint64_t *)&unk_1EFE403A0);
    v1 = (const void *)sub_1D42B6F40();
    v2 = j__malloc_size(v1);
    sub_1D44AF230(v2 - 32);
    sub_1D44ADCBC(v3, v4, v5, v6);
    sub_1D44AF27C();
    sub_1D44AF1DC();
    if (!v7)
      __break(1u);
  }
  sub_1D4493044();
}

void sub_1D44ACEBC()
{
  uint64_t v0;
  const void *v1;
  size_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_1D44932E4();
  if (*(_QWORD *)(v0 + 16))
  {
    sub_1D42B28FC(&qword_1EFE40520);
    v1 = (const void *)sub_1D42B6F40();
    v2 = j__malloc_size(v1);
    sub_1D44AF230(v2 - 32);
    sub_1D44ADE50(v3, v4, v5, v6);
    sub_1D44AF27C();
    sub_1D44AF1DC();
    if (!v7)
      __break(1u);
  }
  sub_1D4493044();
}

uint64_t sub_1D44ACF30(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = sub_1D451B358();
    if (v2)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v2 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_1D42B28FC(&qword_1EFE40410);
    v3 = (_QWORD *)sub_1D42B6F40();
    v4 = j__malloc_size(v3);
    v3[2] = v2;
    v3[3] = (2 * ((uint64_t)(v4 - 32) / 8)) | 1;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1D44AE04C(&v7, v3 + 4, v2, a1);
  result = sub_1D4367684();
  if (v5 == (_QWORD *)v2)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

void sub_1D44AD020(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char v8;
  const void *v9;
  size_t v10;

  v5 = a4 >> 1;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (a4 >> 1 == a3)
      goto LABEL_8;
    sub_1D44AF3D0();
    if (!(v7 ^ v8 | v6))
    {
      sub_1D42B28FC(&qword_1EFE51188);
      v9 = (const void *)sub_1D42B6F40();
      v10 = j__malloc_size(v9);
      sub_1D44AF3C0(v10 - 32);
    }
    if (v5 != v4)
    {
      sub_1D44ABB48();
LABEL_8:
      sub_1D42CB084();
      return;
    }
  }
  __break(1u);
}

void sub_1D44AD0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    sub_1D44AF3B0();
    if (!(v4 ^ v5 | v3))
    {
      sub_1D42B28FC((uint64_t *)&unk_1EFE403A0);
      v6 = (_QWORD *)sub_1D42B6F40();
      j__malloc_size(v6);
      sub_1D44AF328();
      v6[2] = v2;
      v6[3] = v7;
    }
    v8 = sub_1D44AF3E0();
    sub_1D44ABBD0(v8, v9);
  }
  sub_1D42CB15C();
}

void sub_1D44AD12C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    sub_1D44AF3B0();
    if (!(v4 ^ v5 | v3))
    {
      sub_1D42B28FC((uint64_t *)&unk_1EFE558A0);
      v6 = (_QWORD *)sub_1D42B6F40();
      v7 = j__malloc_size(v6);
      v6[2] = v2;
      v6[3] = 2 * ((uint64_t)(v7 - 32) / 4);
    }
    v8 = sub_1D44AF3E0();
    sub_1D44AB2F8(v8, v9);
  }
  sub_1D42CB15C();
}

void sub_1D44AD1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  char v33;

  sub_1D44932E4();
  a25 = v26;
  a26 = v28;
  v29 = *(_QWORD *)(v27 + 16);
  if (v29)
  {
    v30 = v27;
    sub_1D42B28FC(&qword_1EFE55A38);
    v31 = (_QWORD *)sub_1D42B6F40();
    v32 = j__malloc_size(v31);
    v31[2] = v29;
    v31[3] = 2 * ((uint64_t)(v32 - 32) / 24);
    sub_1D44AE348(&a10, v31 + 4, v29, v30);
    swift_bridgeObjectRetain();
    sub_1D44AF1DC();
    if (!v33)
      __break(1u);
  }
  sub_1D4493044();
}

void sub_1D44AD248()
{
  sub_1D44AD254();
}

void sub_1D44AD254()
{
  void (*v0)(void);
  uint64_t v1;
  void (*v2)(void);
  const void *v3;
  size_t v4;
  char v5;

  sub_1D44932E4();
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = v0;
    sub_1D42B28FC(&qword_1EFE40520);
    v3 = (const void *)sub_1D42B6F40();
    v4 = j__malloc_size(v3);
    sub_1D44AF230(v4 - 32);
    v2();
    sub_1D44AF27C();
    sub_1D44AF1DC();
    if (!v5)
      __break(1u);
  }
  sub_1D4493044();
}

uint64_t sub_1D44AD2CC(char *a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;

  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  if (a2 <= 0)
  {
    v4 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_1D42B28FC(&qword_1EFE556D0);
    v4 = swift_allocObject();
    v5 = j__malloc_size((const void *)v4);
    *(_QWORD *)(v4 + 16) = a2;
    *(_QWORD *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 16);
  }
  sub_1D44ABFD4(a1, a2, (char *)(v4 + 32));
  return v4;
}

void sub_1D44AD364(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  _QWORD *v10;
  size_t v11;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v6)
      goto LABEL_8;
    sub_1D44AF3D0();
    if (!(v8 ^ v9 | v7))
    {
      sub_1D42B28FC(&qword_1EFE498E0);
      v10 = (_QWORD *)sub_1D42B6F40();
      v11 = j__malloc_size(v10);
      v10[2] = v6;
      v10[3] = 2 * v11 - 64;
    }
    if (v5 != v4)
    {
      sub_1D44AC22C();
LABEL_8:
      sub_1D42CB084();
      return;
    }
  }
  __break(1u);
}

void sub_1D44AD3FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  size_t v6;
  _QWORD v7[3];

  v2 = (_QWORD *)(a2 - a1);
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    if ((uint64_t)v2 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      sub_1D42B28FC((uint64_t *)&unk_1EFE403A0);
      v5 = (_QWORD *)sub_1D42B6F40();
      v6 = j__malloc_size(v5);
      sub_1D44AF3C0(v6 - 32);
    }
    if (sub_1D44AE770(v7, v5 + 4, (uint64_t)v2, a1, a2) == v2)
    {
LABEL_8:
      sub_1D42CB7D0();
      return;
    }
  }
  __break(1u);
}

void sub_1D44AD4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  size_t v9;
  char *v10;

  if (a2)
  {
    sub_1D44AF3B0();
    if (!(v4 ^ v5 | v3))
    {
      sub_1D42B28FC(&qword_1EFE55A40);
      v6 = (_QWORD *)sub_1D42B6F40();
      v7 = j__malloc_size(v6);
      v6[2] = v2;
      v6[3] = 2 * v7 - 64;
    }
    v8 = (char *)sub_1D44AF3E0();
    sub_1D43D7964(v8, v9, v10);
  }
  sub_1D42CB15C();
}

void sub_1D44AD514(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  const void *v11;
  size_t v12;

  v6 = a4 >> 1;
  v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    sub_1D44AF3D0();
    if (!(v9 ^ v10 | v8))
    {
      sub_1D42B28FC((uint64_t *)&unk_1EFE403A0);
      v11 = (const void *)sub_1D42B6F40();
      v12 = j__malloc_size(v11);
      sub_1D44AF3C0(v12 - 32);
    }
    if (v6 != v4)
    {
      sub_1D44ABBD0(v5 + 8 * v4, v7);
LABEL_8:
      sub_1D42CB084();
      return;
    }
  }
  __break(1u);
}

_QWORD *sub_1D44AD5B0(_QWORD *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    *result = a4;
    result[1] = a3;
    return (_QWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*a4)
    {
      v4 = 0;
      v5 = 1;
      while (1)
      {
        v6 = (_QWORD *)(a2 + v4 * 4);
        v7 = *(_QWORD *)&a4[v4 + 4];
        *v6 = *(_QWORD *)&a4[v4 + 2];
        v6[1] = v7;
        if (a3 == v5)
          goto LABEL_12;
        v8 = *a4;
        if (v5 == v8)
        {
          a3 = v5;
          goto LABEL_12;
        }
        v4 += 4;
        if (v5++ >= v8)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t *sub_1D44AD62C(unint64_t *result, unint64_t *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (unint64_t *)a3;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_20;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_21;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a2 + 1;
    while (v6)
    {
      if (a5 == v5)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v5 >= a5)
        goto LABEL_19;
      v8 = v5 + 1;
      *v7++ = v5++;
      if (!--v6)
      {
        v5 = v8;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1D44AD6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v6 = a4 + 64;
  sub_1D44AF308();
  if (!v8)
  {
    v13 = 0;
LABEL_32:
    *v7 = a4;
    v7[1] = v6;
    v7[2] = ~v10;
    v7[3] = v13;
    v7[4] = v4;
    return;
  }
  v11 = v9;
  if (!v9)
  {
    v13 = 0;
    goto LABEL_32;
  }
  if (v9 < 0)
    goto LABEL_34;
  v12 = v8;
  v27 = v10;
  v28 = v7;
  v13 = 0;
  v14 = 0;
  v29 = (unint64_t)(63 - v10) >> 6;
  if (!v4)
    goto LABEL_6;
LABEL_5:
  sub_1D44AF3F0();
  v16 = v15 | (v13 << 6);
  while (1)
  {
    ++v14;
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    sub_1D42B294C(*(_QWORD *)(a4 + 56) + 32 * v16, (uint64_t)&v31);
    *(_QWORD *)&v30 = v22;
    *((_QWORD *)&v30 + 1) = v21;
    v24 = v31;
    v23 = v32;
    v34 = v31;
    v35 = v32;
    v33 = v30;
    *v12 = v30;
    v12[1] = v24;
    v12[2] = v23;
    if (v14 == v11)
    {
      swift_bridgeObjectRetain();
LABEL_31:
      v10 = v27;
      v7 = v28;
      goto LABEL_32;
    }
    v12 += 3;
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_5;
LABEL_6:
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v17 >= v29)
      goto LABEL_30;
    if (*(_QWORD *)(v6 + 8 * v17))
      goto LABEL_16;
    v18 = v13 + 2;
    ++v13;
    if (v17 + 1 >= v29)
      goto LABEL_30;
    if (*(_QWORD *)(v6 + 8 * v18))
      goto LABEL_16;
    v13 = v17 + 1;
    if (v17 + 2 >= v29)
      goto LABEL_30;
    if (*(_QWORD *)(v6 + 8 * (v17 + 2)))
      goto LABEL_16;
    v13 = v17 + 2;
    if (v17 + 3 >= v29)
      goto LABEL_30;
    if (*(_QWORD *)(v6 + 8 * (v17 + 3)))
      goto LABEL_16;
    v25 = v17 + 4;
    v13 = v17 + 3;
    if (v17 + 4 >= v29)
    {
LABEL_30:
      v4 = 0;
      goto LABEL_31;
    }
    if (!*(_QWORD *)(v6 + 8 * v25))
    {
      do
      {
        v26 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_35;
        if (v26 >= v29)
        {
          v13 = v29 - 1;
          goto LABEL_30;
        }
        ++v25;
      }
      while (!*(_QWORD *)(v6 + 8 * v26));
    }
LABEL_16:
    sub_1D44AF380();
    v13 = v19;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

void sub_1D44AD8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v6 = a4 + 64;
  sub_1D44AF308();
  if (!v8)
  {
    v13 = 0;
LABEL_34:
    *v7 = a4;
    v7[1] = v6;
    v7[2] = ~v10;
    v7[3] = v13;
    v7[4] = v4;
    return;
  }
  v11 = v9;
  if (!v9)
  {
    v13 = 0;
    goto LABEL_34;
  }
  if (v9 < 0)
    goto LABEL_36;
  v12 = v8;
  v28 = v10;
  v29 = v7;
  v13 = 0;
  v14 = 0;
  v15 = (unint64_t)(63 - v10) >> 6;
  if (!v4)
    goto LABEL_6;
LABEL_5:
  sub_1D44AF3F0();
  v17 = v16 | (v13 << 6);
  while (1)
  {
    ++v14;
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v17);
    v22 = *v20;
    v21 = v20[1];
    v23 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * v17);
    v25 = *v23;
    v24 = v23[1];
    *v12 = v22;
    v12[1] = v21;
    v12[2] = v25;
    v12[3] = v24;
    if (v14 == v11)
    {
      swift_bridgeObjectRetain();
      sub_1D44AF404();
LABEL_33:
      v10 = v28;
      v7 = v29;
      goto LABEL_34;
    }
    v12 += 4;
    swift_bridgeObjectRetain();
    sub_1D44AF404();
    if (v4)
      goto LABEL_5;
LABEL_6:
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v18 >= v15)
      goto LABEL_29;
    if (!*(_QWORD *)(v6 + 8 * v18))
    {
      v13 += 2;
      if (v18 + 1 >= v15)
      {
        v4 = 0;
        v13 = v18;
        goto LABEL_33;
      }
      if (!*(_QWORD *)(v6 + 8 * v13))
      {
        if (v18 + 2 >= v15)
          goto LABEL_29;
        if (!*(_QWORD *)(v6 + 8 * (v18 + 2)))
        {
          v13 = v18 + 3;
          if (v18 + 3 >= v15)
          {
            v4 = 0;
            v13 = v18 + 2;
            goto LABEL_33;
          }
          if (*(_QWORD *)(v6 + 8 * v13))
            goto LABEL_14;
          v26 = v18 + 4;
          if (v18 + 4 >= v15)
          {
LABEL_29:
            v4 = 0;
            goto LABEL_33;
          }
          if (!*(_QWORD *)(v6 + 8 * v26))
          {
            do
            {
              v27 = v26 + 1;
              if (__OFADD__(v26, 1))
                goto LABEL_37;
              if (v27 >= v15)
              {
                v4 = 0;
                v13 = v15 - 1;
                goto LABEL_33;
              }
              ++v26;
            }
            while (!*(_QWORD *)(v6 + 8 * v27));
          }
        }
      }
    }
LABEL_14:
    sub_1D44AF380();
    v13 = v19;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_1D44ADAC0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1D44ADCBC(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_36:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_36;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_18;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    v13 = v8;
LABEL_18:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_19;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v13 = v15;
    goto LABEL_18;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_14;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_17;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_35;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1D44ADE50(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1D44AE04C(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;

  v4 = a4;
  v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    sub_1D451B328();
    type metadata accessor for SNModelFeatureConnection();
    sub_1D43287AC(&qword_1EFE40320, (void (*)(uint64_t))type metadata accessor for SNModelFeatureConnection);
    result = (_QWORD *)sub_1D451AC2C();
    v4 = v26;
    v8 = v27;
    v9 = v28;
    v10 = v29;
    v11 = v30;
  }
  else
  {
    v10 = 0;
    v12 = -1 << *(_BYTE *)(a4 + 32);
    v8 = a4 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a4 + 56);
  }
  if (!a2)
  {
    v15 = 0;
LABEL_47:
    *v7 = v4;
    v7[1] = v8;
    v7[2] = v9;
    v7[3] = v10;
    v7[4] = v11;
    return (_QWORD *)v15;
  }
  if (!a3)
  {
    v15 = 0;
    goto LABEL_47;
  }
  if (a3 < 0)
    goto LABEL_49;
  v15 = 0;
  v24 = (unint64_t)(v9 + 64) >> 6;
  v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!sub_1D451B37C())
        goto LABEL_46;
      type metadata accessor for SNModelFeatureConnection();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v18 = v25;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v25)
        goto LABEL_46;
      goto LABEL_28;
    }
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v10 << 6);
      goto LABEL_27;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v19 >= v24)
    {
      v11 = 0;
      goto LABEL_46;
    }
    v20 = *(_QWORD *)(v8 + 8 * v19);
    if (v20)
      goto LABEL_26;
    v21 = v10 + 2;
    if (v10 + 2 >= v24)
    {
      v11 = 0;
      ++v10;
      goto LABEL_46;
    }
    v20 = *(_QWORD *)(v8 + 8 * v21);
    if (!v20)
    {
      if (v10 + 3 >= v24)
        goto LABEL_43;
      v20 = *(_QWORD *)(v8 + 8 * (v10 + 3));
      if (v20)
      {
        v19 = v10 + 3;
        goto LABEL_26;
      }
      v21 = v10 + 4;
      if (v10 + 4 >= v24)
      {
        v11 = 0;
        v10 += 3;
        goto LABEL_46;
      }
      v20 = *(_QWORD *)(v8 + 8 * v21);
      if (!v20)
      {
        v19 = v10 + 5;
        if (v10 + 5 >= v24)
        {
LABEL_43:
          v11 = 0;
          v10 = v21;
          goto LABEL_46;
        }
        v20 = *(_QWORD *)(v8 + 8 * v19);
        if (!v20)
        {
          v22 = v10 + 6;
          while (v22 < v24)
          {
            v20 = *(_QWORD *)(v8 + 8 * v22++);
            if (v20)
            {
              v19 = v22 - 1;
              goto LABEL_26;
            }
          }
          v11 = 0;
          v10 = v24 - 1;
          goto LABEL_46;
        }
        goto LABEL_26;
      }
    }
    v19 = v21;
LABEL_26:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v19 << 6);
    v10 = v19;
LABEL_27:
    result = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    v18 = result;
    if (!result)
      goto LABEL_46;
LABEL_28:
    ++v15;
    *a2++ = v18;
    if (v15 == a3)
    {
      v15 = a3;
LABEL_46:
      v9 = v23;
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

_QWORD *sub_1D44AE348(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v22 = -1 << *(_BYTE *)(a4 + 32);
  v23 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 24 * v15);
    v20 = v19[1];
    v21 = v19[2];
    *v10 = *v19;
    v10[1] = v20;
    v10[2] = v21;
    if (v12 == v9)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_38;
    }
    v10 += 3;
    swift_retain();
    swift_retain();
    result = (_QWORD *)swift_retain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v22;
      result = v23;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1D44AE574(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1D44AE770(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (_QWORD *)a3;
  }
  if (a3 < 0)
    goto LABEL_20;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_21;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a2 + 1;
    while (v6)
    {
      if (a5 == v5)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v5 >= a5)
        goto LABEL_19;
      v8 = v5 + 1;
      *v7++ = v5++;
      if (!--v6)
      {
        v5 = v8;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D44AE80C(uint64_t *a1, uint64_t (*a2)(void))
{
  return sub_1D44A98F8(*a1, a2);
}

void sub_1D44AE814(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_1D44A9918(*a1);
  *a2 = v3;
}

uint64_t sub_1D44AE83C(void **a1, uint64_t a2, unint64_t a3)
{
  return sub_1D44A99A0(*a1, a2, a3);
}

uint64_t sub_1D44AE854@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, _BYTE *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v5;
  v11 = *(_QWORD *)(a1 + 32);
  result = sub_1D44AA594((uint64_t)v10, a2);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v9;
  }
  return result;
}

uint64_t sub_1D44AE89C@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = sub_1D44A6254(a1, a2, *a3);
  *a4 = result;
  return result;
}

uint64_t sub_1D44AE8C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1D44AE89C(*(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)(v1 + 32), a1);
}

uint64_t sub_1D44AE8D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1D44AE854(a1, *(void (**)(uint64_t *__return_ptr, _BYTE *))(v2 + 16), a2);
}

void sub_1D44AE8EC()
{
  sub_1D43D6DCC();
}

uint64_t sub_1D44AE8F4()
{
  swift_bridgeObjectRelease();
  sub_1D42EA3A0();
  return swift_deallocObject();
}

void sub_1D44AE910()
{
  sub_1D43D6EB4();
}

uint64_t sub_1D44AE918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1D42B28FC(&qword_1EFE556C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D44AE960(uint64_t a1)
{
  j__swift_bridgeObjectRetain(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  return a1;
}

uint64_t sub_1D44AE990(uint64_t a1)
{
  j__swift_bridgeObjectRelease_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  return a1;
}

uint64_t sub_1D44AE9C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1D43986A8(*(id *)(v1 + 16), a1);
}

uint64_t sub_1D44AE9CC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16) != 1)
    swift_release();
  sub_1D42EA3B0();
  return swift_deallocObject();
}

void sub_1D44AE9F4()
{
  uint64_t v0;

  sub_1D44A97E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1D44AE9FC(uint64_t result)
{
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t sub_1D44AEA14()
{
  sub_1D42B8F98();
  sub_1D42EA3A0();
  return swift_deallocObject();
}

uint64_t sub_1D44AEA2C()
{
  uint64_t v0;

  sub_1D42EA3B0();
  return swift_deallocObject();
}

uint64_t sub_1D44AEA48()
{
  sub_1D42EA528();
  sub_1D42EA3B0();
  return swift_deallocObject();
}

uint64_t sub_1D44AEA68()
{
  swift_unknownObjectRelease();
  sub_1D42EA3B0();
  return swift_deallocObject();
}

void sub_1D44AEA88()
{
  uint64_t v0;

  sub_1D44A9870(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(uint64_t))MEMORY[0x1E0DEEEC0]);
}

uint64_t sub_1D44AEAA8(uint64_t *a1)
{
  uint64_t v1;

  return sub_1D44AE80C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1D44AEAC4@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = sub_1D44A6438(a1, a2, *a3);
  *a4 = result;
  return result;
}

uint64_t sub_1D44AEAF0()
{
  sub_1D42B8F98();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44AEB18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1D44AEAC4(*(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)(v1 + 32), a1);
}

unint64_t sub_1D44AEB28()
{
  unint64_t result;

  result = qword_1EFE559E8;
  if (!qword_1EFE559E8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C63C, &type metadata for SharedBuiltInMicrophone.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE559E8);
  }
  return result;
}

void sub_1D44AEB70()
{
  uint64_t v0;

  sub_1D44A9870(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(uint64_t))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1D44AEB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1D42B28FC(&qword_1EFE4A268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D44AEBD8(void **a1)
{
  uint64_t v1;

  return sub_1D44AE83C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_1D44AEBE4(_QWORD *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[1];
  v5 = a1[3];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v11 = a1[9];
  v12 = a1[11];
  v13 = a1[13];
  v14 = a1[15];
  v15 = a1[17];
  v16 = a1[19];
  swift_release();
  sub_1D42B7F68(v4);
  sub_1D42B7F68(v5);
  a2(v6, v7);
  a2(v8, v9);
  sub_1D42B7F68(v11);
  sub_1D42B7F68(v12);
  sub_1D42B7F68(v13);
  sub_1D42B7F68(v14);
  sub_1D42B7F68(v15);
  sub_1D42B7F68(v16);
  return a1;
}

uint64_t sub_1D44AECF4()
{
  sub_1D42EA528();
  sub_1D42B8F98();
  sub_1D42EA3A0();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for SharedBuiltInMicrophone.Configuration.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D44AED50 + 4 * byte_1D454C3F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D44AED70 + 4 * byte_1D454C3F5[v4]))();
}

_BYTE *sub_1D44AED50(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D44AED70(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44AED78(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44AED80(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44AED88(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44AED90(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SharedBuiltInMicrophone.Configuration.CodingKeys()
{
  return &type metadata for SharedBuiltInMicrophone.Configuration.CodingKeys;
}

unint64_t sub_1D44AEDB0()
{
  unint64_t result;

  result = qword_1EFE55BB8;
  if (!qword_1EFE55BB8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C614, &type metadata for SharedBuiltInMicrophone.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55BB8);
  }
  return result;
}

unint64_t sub_1D44AEDF0()
{
  unint64_t result;

  result = qword_1EFE55BC0;
  if (!qword_1EFE55BC0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C584, &type metadata for SharedBuiltInMicrophone.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55BC0);
  }
  return result;
}

unint64_t sub_1D44AEE30()
{
  unint64_t result;

  result = qword_1EFE55BC8;
  if (!qword_1EFE55BC8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C5AC, &type metadata for SharedBuiltInMicrophone.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55BC8);
  }
  return result;
}

uint64_t sub_1D44AF01C()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_1D44AF02C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v4, v1);
}

uint64_t sub_1D44AF048()
{
  return swift_release();
}

uint64_t sub_1D44AF060()
{
  uint64_t v0;

  return v0;
}

void sub_1D44AF074()
{
  JUMPOUT(0x1D825DB34);
}

void *sub_1D44AF08C(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t sub_1D44AF094()
{
  return sub_1D451A2FC();
}

uint64_t sub_1D44AF0B0()
{
  return sub_1D451A830();
}

uint64_t sub_1D44AF0C4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44AF0FC()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_1D44AF104()
{
  return sub_1D451A2E4();
}

uint64_t sub_1D44AF114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1D44AF138(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v1;
  return swift_bridgeObjectRetain_n();
}

id sub_1D44AF14C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  *a1 = v1;
  a1[1] = v2;
  return v3;
}

void sub_1D44AF158()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1D42D7018(v1, v0);
}

void sub_1D44AF164()
{
  void *v0;

  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1D44AF1DC()
{
  return sub_1D4367684();
}

void sub_1D44AF204(_QWORD *a1)
{
  uint64_t *v1;

  sub_1D42E33F8(a1, v1);
}

uint64_t sub_1D44AF224()
{
  uint64_t v0;

  return v0;
}

void sub_1D44AF230(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_1D44AF27C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D44AF2A0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v1;
  return result;
}

uint64_t sub_1D44AF2AC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v1;
  return result;
}

uint64_t sub_1D44AF378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_1D42B28FC(a4);
}

void sub_1D44AF3C0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_1D44AF3E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44AF404()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1D42DD16C(v1, v0);
}

uint64_t sub_1D44AF438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1D42C7BD0();
    v7 = v15;
    v8 = (uint64_t *)(a1 + 32);
    do
    {
      v10 = *v8++;
      v9 = v10;
      v11 = *(_QWORD *)(v15 + 16);
      v12 = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
      if (v11 >= v12 >> 1)
        sub_1D42C7BD0();
      *(_QWORD *)(v15 + 16) = v11 + 1;
      v13 = (_QWORD *)(v15 + 24 * v11);
      v13[4] = a2;
      v13[5] = a3;
      v13[6] = v9;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v7;
}

uint64_t sub_1D44AF544(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1D44AF55C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1D44AD020);
}

uint64_t sub_1D44AF550(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1D44AF55C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1D44AD364);
}

uint64_t sub_1D44AF55C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  sub_1D451B874();
  swift_unknownObjectRetain_n();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    sub_1D42E3CCC();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    v10 = a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    sub_1D42E3CCC();
    v10 = MEMORY[0x1E0DEE9D8];
  }
LABEL_9:
  sub_1D42E3CCC();
  return v10;
}

void sub_1D44AF640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;

  sub_1D42CB740();
  v0 = sub_1D42B28FC(&qword_1EFE55CB8);
  v14 = *(_QWORD *)(v0 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v1);
  sub_1D42CB210();
  v4 = v3 - v2;
  v5 = sub_1D42CB9F8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42CB210();
  v9 = v8 - v7;
  v10 = sub_1D44B5FF0();
  MEMORY[0x1E0C80A78](v10);
  sub_1D42CB210();
  static AudioDataSourceUtils.systemAudioEventPublisher()();
  sub_1D42E3F8C(&qword_1EFE55BF8);
  sub_1D451A3A4();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  sub_1D44B5FE8(&qword_1EFE55CC8);
  sub_1D451A38C();
  sub_1D451A1B8();
  v11 = sub_1D42B8DB4();
  *(_QWORD *)(v11 + 16) = sub_1D44B5820;
  *(_QWORD *)(v11 + 24) = 0;
  sub_1D42B28FC(&qword_1EFE55CD0);
  sub_1D42E33F8(&qword_1EFE55CD8, &qword_1EFE55CB8);
  sub_1D42E33F8(&qword_1EFE55CE0, &qword_1EFE55CD0);
  sub_1D451A3C8();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, v0);
  v12 = sub_1D44B6090();
  v13(v12);
  sub_1D42CB520();
}

uint64_t sub_1D44AF854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  sub_1D42CB740();
  v1 = sub_1D4419324();
  v15 = *(_QWORD *)(v1 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB210();
  v5 = v4 - v3;
  sub_1D42B28FC(&qword_1EFE55F40);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v6);
  sub_1D42CB210();
  v9 = v8 - v7;
  v10 = sub_1D42B28FC(&qword_1EFE55F48);
  v16 = *(_QWORD *)(v10 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v11);
  sub_1D42D7108();
  sub_1D42B28FC((uint64_t *)&unk_1EFE55C10);
  sub_1D42E33F8(&qword_1EFE55C38, (uint64_t *)&unk_1EFE55C10);
  sub_1D451A38C();
  sub_1D451A1B8();
  v12 = sub_1D42B8DB4();
  *(_QWORD *)(v12 + 16) = sub_1D44B5898;
  *(_QWORD *)(v12 + 24) = 0;
  sub_1D42B28FC(&qword_1EFE55F50);
  sub_1D441931C(&qword_1EFE55C48);
  sub_1D42E33F8(&qword_1EFE55F58, &qword_1EFE55F50);
  sub_1D451A3C8();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v1);
  sub_1D44B6088();
  sub_1D42E33F8(&qword_1EFE55F68, &qword_1EFE55F60);
  sub_1D42E33F8(&qword_1EFE55F70, &qword_1EFE55F40);
  sub_1D451A35C();
  sub_1D42D7018(v9, &qword_1EFE55F40);
  sub_1D42E33F8(&qword_1EFE55F78, &qword_1EFE55F48);
  v13 = sub_1D451A2E4();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v0, v10);
  return v13;
}

uint64_t sub_1D44AFADC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = sub_1D42B28FC(&qword_1EFE55C20);
  v11 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1D42B28FC(&qword_1EFE55C28);
  MEMORY[0x1E0C80A78](v12);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1D42B28FC(&qword_1EFE55C30);
  v13 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D42B28FC((uint64_t *)&unk_1EFE55C10);
  sub_1D42E33F8(&qword_1EFE55C38, (uint64_t *)&unk_1EFE55C10);
  sub_1D451A38C();
  sub_1D451A1B8();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1D44B591C;
  *(_QWORD *)(v8 + 24) = 0;
  sub_1D42B28FC(&qword_1EFE55C40);
  sub_1D42E33F8(&qword_1EFE55C48, &qword_1EFE55C20);
  sub_1D42E33F8(&qword_1EFE55C50, &qword_1EFE55C40);
  sub_1D451A3C8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v0);
  sub_1D42B28FC(&qword_1EFE55C08);
  sub_1D42E33F8(&qword_1EFE55C58, &qword_1EFE55C08);
  sub_1D42E33F8(&qword_1EFE55C60, &qword_1EFE55C28);
  sub_1D451A35C();
  sub_1D42D7018((uint64_t)v4, &qword_1EFE55C28);
  sub_1D42E33F8(&qword_1EFE55C68, &qword_1EFE55C30);
  v9 = sub_1D451A2E4();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v5);
  return v9;
}

uint64_t sub_1D44AFDAC(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    sub_1D42DCED4();
    result = sub_1D43E2C18();
    __break(1u);
  }
  else if (a1)
  {
    result = sub_1D451A9BC();
    v5 = 0;
    *(_QWORD *)(result + 16) = a1;
    do
    {
      v6 = result + 4 * v5++;
      *(float *)(v6 + 32) = a2;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

void sub_1D44AFE44(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a5 < 0)
  {
    sub_1D42DCED4();
    sub_1D43E2C18();
    __break(1u);
  }
  else
  {
    v5 = a5;
    if (a5)
    {
      sub_1D42B28FC(&qword_1EFE55D90);
      v10 = sub_1D44B6054();
      *(_QWORD *)(v10 + 16) = v5;
      v11 = 32;
      do
      {
        v12 = v10 + v11;
        *(_QWORD *)v12 = a1;
        *(_QWORD *)(v12 + 8) = a2;
        *(_QWORD *)(v12 + 16) = a3;
        *(_BYTE *)(v12 + 24) = a4 & 1;
        v11 += 28;
        --v5;
      }
      while (v5);
    }
    sub_1D43AAC44();
  }
}

void sub_1D44AFEF8(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;

  if (a1 < 0)
  {
    sub_1D42DCED4();
    sub_1D43E2C18();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      sub_1D42B28FC(&qword_1EFE55E10);
      v4 = sub_1D44B6054();
      v5 = 0;
      *(_QWORD *)(v4 + 16) = a1;
      do
      {
        v6 = (__n128 *)(v4 + 32 * v5++);
        v6[2] = a2;
        v6[3] = a3;
      }
      while (a1 != v5);
    }
    sub_1D43AAC44();
  }
}

uint64_t sub_1D44AFF90(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a2 < 0)
  {
    result = sub_1D451B550();
    __break(1u);
  }
  else if (a2)
  {
    result = sub_1D451A9BC();
    v5 = 0;
    *(_QWORD *)(result + 16) = a2;
    do
    {
      v6 = result + 8 * v5++;
      *(_QWORD *)(v6 + 32) = a1;
    }
    while (a2 != v5);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1D44B0040(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(result + 16);
  v4 = __OFSUB__(a2, v3);
  v5 = a2 - v3;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    if (v5 < 1)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v7 = sub_1D44AFF90(a3, v5);
      swift_bridgeObjectRetain();
      sub_1D44B5448(v7);
    }
    return v6;
  }
  return result;
}

uint64_t sub_1D44B00BC(uint64_t result, void (*a2)(uint64_t, uint64_t))
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (v2 >> 59)
  {
    __break(1u);
  }
  else
  {
    sub_1D44B2B0C(result + 32, result + 32 + 16 * v2, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1D44B0110()
{
  sub_1D44B012C(&qword_1EFE55E88, (uint64_t)&unk_1EFE55E90, qword_1EFE55E98);
}

void sub_1D44B012C(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1D42B28FC(a1);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42D7108();
  sub_1D42CB9F8();
  sub_1D42E3F8C(a3);
  sub_1D451A830();
  sub_1D42B28FC(&qword_1EFE49BB0);
  sub_1D451A140();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  sub_1D42CB0F8();
}

uint64_t sub_1D44B01F4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D44B020C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];
  unsigned __int8 v9;

  sub_1D430BBB0(a1, (uint64_t)v8, (uint64_t *)&unk_1EFE519A0);
  v4 = v9;
  v5 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v5;
  v6 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v6;
  *(_WORD *)(a2 + 64) = v4;
  return sub_1D43D6134(a1);
}

uint64_t sub_1D44B0268(char a1)
{
  return a1 & 1;
}

uint64_t sub_1D44B0274()
{
  return 0;
}

uint64_t sub_1D44B0280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = v2;
  *(_BYTE *)(a2 + 48) = 0;
  return sub_1D43AF400(a1);
}

void *sub_1D44B02A8(void *a1, void *a2)
{
  id v4;
  id v5;

  v4 = a1;
  v5 = a2;
  return a1;
}

uint64_t sub_1D44B02DC(uint64_t a1, char a2, void (*a3)(uint64_t, _QWORD))
{
  a3(a1, a2 & 1);
  return a1;
}

uint64_t sub_1D44B0314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_1D42B294C(a1, a2);
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

uint64_t sub_1D44B033C(void *a1)
{
  id v1;

  v1 = a1;
  sub_1D42B28FC(&qword_1EFE55DE0);
  return sub_1D451A284();
}

void sub_1D44B039C(void *a1)
{
  id v1;

  v1 = a1;
  sub_1D44B6088();
  sub_1D44B5FF8();
  sub_1D42CB964();
}

uint64_t sub_1D44B03D4(void *a1)
{
  id v1;

  v1 = a1;
  sub_1D42B28FC(&qword_1EFE55F18);
  return sub_1D451A284();
}

uint64_t sub_1D44B0430(void *a1)
{
  id v1;

  v1 = a1;
  sub_1D42B28FC(&qword_1EFE55C80);
  return sub_1D451A284();
}

void sub_1D44B0480(void *a1)
{
  id v1;

  v1 = a1;
  sub_1D44B6088();
  sub_1D44B5FF8();
  sub_1D42CB964();
}

uint64_t sub_1D44B04B8(void *a1)
{
  id v1;

  v1 = a1;
  sub_1D42B28FC(&qword_1EFE55E28);
  return sub_1D451A284();
}

void sub_1D44B0508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D42CB740();
  sub_1D44B5F68(v0);
  v1 = sub_1D4419324();
  v2 = sub_1D44B5E68(v1);
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB18C();
  sub_1D44B5FF0();
  sub_1D44B5EFC();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44B5DEC();
  sub_1D42B28FC(&qword_1EFE55DA8);
  sub_1D44B5FE8(&qword_1EFE55DB0);
  sub_1D44B5E28();
  sub_1D42CB9F8();
  sub_1D441931C(&qword_1EFE55DC0);
  sub_1D42E3F8C(&qword_1EFE55DC8);
  sub_1D44B5E10();
  sub_1D44B5ED8();
  sub_1D44B5EEC();
  sub_1D42CB520();
}

void sub_1D44B05FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D42CB740();
  sub_1D44B5F68(v0);
  v1 = sub_1D4419324();
  v2 = sub_1D44B5E68(v1);
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB18C();
  sub_1D44B5FF0();
  sub_1D44B5EFC();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44B5DEC();
  sub_1D42B28FC(&qword_1EFE55DE0);
  sub_1D44B5FE8(&qword_1EFE55DE8);
  sub_1D44B5E28();
  sub_1D42CB9F8();
  sub_1D441931C(&qword_1EFE55DF8);
  sub_1D42E3F8C(qword_1EFE55E00);
  sub_1D44B5E10();
  sub_1D44B5ED8();
  sub_1D44B5EEC();
  sub_1D42CB520();
}

void sub_1D44B06F0()
{
  void (*v0)(void);
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D42CB740();
  v1 = v0;
  v2 = sub_1D4419324();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB18C();
  sub_1D42B28FC(&qword_1EFE55E58);
  sub_1D44B5EFC();
  MEMORY[0x1E0C80A78](v4);
  sub_1D42F1ED4();
  v1();
  sub_1D42B28FC(&qword_1EFE55E60);
  sub_1D42E33F8(&qword_1EFE55E68, &qword_1EFE55E58);
  sub_1D44B5E28();
  sub_1D42CB9F8();
  sub_1D441931C(&qword_1EFE55E78);
  sub_1D42E3F8C(&qword_1EFE55E80);
  sub_1D44B5E10();
  sub_1D42BE98C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1D44B5EEC();
  sub_1D42CB520();
}

void sub_1D44B080C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D42CB740();
  sub_1D44B5F68(v0);
  v1 = sub_1D4419324();
  v2 = sub_1D44B5E68(v1);
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB18C();
  sub_1D44B5FF0();
  sub_1D44B5EFC();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44B5DEC();
  sub_1D42B28FC(&qword_1EFE55D58);
  sub_1D44B5FE8(&qword_1EFE55D60);
  sub_1D44B5E28();
  sub_1D42CB9F8();
  sub_1D441931C(&qword_1EFE55D70);
  sub_1D42E3F8C(qword_1EFE55D78);
  sub_1D44B5E10();
  sub_1D44B5ED8();
  sub_1D44B5EEC();
  sub_1D42CB520();
}

uint64_t sub_1D44B0900@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  v13[1] = a2;
  v3 = sub_1D42B28FC(&qword_1EFE55CE8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1D42B28FC(&qword_1EFE55CF0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v9);
  sub_1D42B28FC(&qword_1EFE55CF8);
  sub_1D42E33F8(&qword_1EFE55D00, &qword_1EFE55CF0);
  sub_1D451A308();
  sub_1D42B28FC(&qword_1EFE55D08);
  sub_1D42E33F8(&qword_1EFE55D10, &qword_1EFE55CE8);
  sub_1D42E33F8(&qword_1EFE55D18, &qword_1EFE55D08);
  sub_1D451A350();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1D44B0AB0@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  v13[1] = a2;
  v3 = sub_1D42B28FC(&qword_1EFE55F80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1D42B28FC(&qword_1EFE55F88);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v9);
  sub_1D42B28FC(&qword_1EFE55F90);
  sub_1D42E33F8(&qword_1EFE55F98, &qword_1EFE55F88);
  sub_1D451A308();
  sub_1D42B28FC(&qword_1EFE55FA0);
  sub_1D42E33F8(&qword_1EFE55FA8, &qword_1EFE55F80);
  sub_1D42E33F8(qword_1EFE55FB0, &qword_1EFE55FA0);
  sub_1D451A350();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void sub_1D44B0C60()
{
  void (*v0)(uint64_t *__return_ptr, uint64_t *);
  void (*v1)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1D42CB740();
  v1 = v0;
  v3 = v2;
  v4 = sub_1D42B28FC(&qword_1EFE55F08);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1D42CB18C();
  v7 = v3;
  v1(&v6, &v7);
  sub_1D42CB9F8();
  sub_1D42B28FC(&qword_1EFE55F18);
  sub_1D42E3F8C(&qword_1EFE55F20);
  sub_1D451A308();
  sub_1D42CB9F8();
  sub_1D42E33F8(&qword_1EFE55F30, &qword_1EFE55F08);
  sub_1D42E3F8C(&qword_1EFE55F38);
  sub_1D451A350();
  sub_1D42BE98C(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  swift_release();
  sub_1D42CB520();
}

uint64_t sub_1D44B0DAC@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  v13[1] = a2;
  v3 = sub_1D42B28FC(&qword_1EFE55C70);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1D42B28FC(&qword_1EFE55C78);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v9);
  sub_1D42B28FC(&qword_1EFE55C80);
  sub_1D42E33F8(&qword_1EFE55C88, &qword_1EFE55C78);
  sub_1D451A308();
  sub_1D42B28FC(&qword_1EFE55C90);
  sub_1D42E33F8(&qword_1EFE55C98, &qword_1EFE55C70);
  sub_1D42E33F8(qword_1EFE55CA0, &qword_1EFE55C90);
  sub_1D451A350();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void sub_1D44B0F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D42CB740();
  sub_1D44B5F68(v0);
  v1 = sub_1D4419324();
  v2 = sub_1D44B5E68(v1);
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB18C();
  sub_1D44B5FF0();
  sub_1D44B5EFC();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44B5DEC();
  sub_1D42B28FC(&qword_1EFE55EC0);
  sub_1D44B5FE8(&qword_1EFE55EC8);
  sub_1D44B5E28();
  sub_1D42CB9F8();
  sub_1D441931C(&qword_1EFE55ED8);
  sub_1D42E3F8C(&qword_1EFE55EE0);
  sub_1D44B5E10();
  sub_1D44B5ED8();
  sub_1D44B5EEC();
  sub_1D42CB520();
}

void sub_1D44B1050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D42CB740();
  sub_1D44B5F68(v0);
  v1 = sub_1D4419324();
  v2 = sub_1D44B5E68(v1);
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB18C();
  sub_1D44B5FF0();
  sub_1D44B5EFC();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44B5DEC();
  sub_1D42B28FC(&qword_1EFE55E28);
  sub_1D44B5FE8(&qword_1EFE55E30);
  sub_1D44B5E28();
  sub_1D42CB9F8();
  sub_1D441931C(&qword_1EFE55E40);
  sub_1D42E3F8C(&qword_1EFE55E48);
  sub_1D44B5E10();
  sub_1D44B5ED8();
  sub_1D44B5EEC();
  sub_1D42CB520();
}

uint64_t sub_1D44B1144(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  void *v24;
  double v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t result;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  __int128 v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;

  v31 = sub_1D42B28FC(&qword_1EFE55C08);
  v32 = *(_QWORD *)(v31 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v3);
  sub_1D42BE768();
  v38 = v4;
  sub_1D42B28FC((uint64_t *)&unk_1EFE55C10);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v5);
  sub_1D42BE768();
  v37 = v6;
  v35 = sub_1D451AFB0();
  v34 = *(_QWORD *)(v35 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v7);
  sub_1D42BE768();
  v36 = v8;
  sub_1D451AFA4();
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v9);
  sub_1D42BE768();
  sub_1D451A470();
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v10);
  sub_1D42BE768();
  v42 = a2[1];
  v44 = *a2;
  v11 = *((_QWORD *)a2 + 5);
  v40 = *((_QWORD *)a2 + 4);
  v12 = *((unsigned __int8 *)a2 + 48);
  v13 = *((_BYTE *)a2 + 49);
  v14 = *((_BYTE *)a2 + 50);
  v15 = (void *)*((unsigned __int8 *)a2 + 51);
  v16 = *((_BYTE *)a2 + 52);
  v17 = *((_BYTE *)a2 + 53);
  v18 = *((_QWORD *)a2 + 7);
  LOBYTE(a2) = *((_BYTE *)a2 + 64);
  v47[0] = v44;
  v47[1] = v42;
  v48 = v40;
  v49 = v11;
  v50 = v12;
  v51 = v13;
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFF1C8]), sel_initAuxiliarySession);
  v52 = v14;
  v53 = (char)v15;
  v54 = v16;
  v55 = v17;
  v56 = v18;
  v57 = (char)a2;
  sub_1D44B34B0(v19, (uint64_t)v47);
  if (v45)
    goto LABEL_2;
  v46 = v12;
  v20 = v38;
  if (v11)
  {
    v21 = *(_QWORD *)(v11 + 16);
  }
  else
  {
    v22 = objc_msgSend(v19, sel_inputNumberOfChannels);
    if ((unint64_t)v22 <= 1)
      v21 = 1;
    else
      v21 = (unint64_t)v22;
    if ((v21 & 0x8000000000000000) != 0)
      goto LABEL_17;
  }
  if (!HIDWORD(v21))
  {
    v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89A58]), sel_initWithLayoutTag_, v21 | 0x930000);
    if (v23)
    {
      v24 = v23;
      sub_1D447DA6C();
      v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89AA8]), sel_initWithCommonFormat_sampleRate_interleaved_channelLayout_, 1, 1, v24, v25);
      if (v46)
        v26 = 4096;
      else
        v26 = 0;
      v43 = v26;
      v39 = swift_allocObject();
      *(_BYTE *)(v39 + 16) = v46;
      *(_QWORD *)(v39 + 24) = v11;
      sub_1D42E9D88(0, (unint64_t *)&qword_1EFE47A20);
      sub_1D42CB8FC();
      sub_1D451A464();
      *(_QWORD *)&v47[0] = MEMORY[0x1E0DEE9D8];
      sub_1D43287AC(&qword_1EFE47A18, (void (*)(uint64_t))MEMORY[0x1E0DEF810]);
      sub_1D42B28FC(&qword_1EFE479F0);
      v15 = v19;
      sub_1D42E33F8(&qword_1EFE479F8, &qword_1EFE479F0);
      sub_1D451B2EC();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v36, *MEMORY[0x1E0DEF8D0], v35);
      v27 = (void *)sub_1D451AFD4();
      sub_1D44AF640();
      sub_1D43E7630(v41, v15, v43, (uint64_t)sub_1D44B4294, v39, v27);
      v28 = sub_1D44AFADC();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v20, v31);
      sub_1D42D7018(v37, (uint64_t *)&unk_1EFE55C10);
      swift_release();

      *a1 = v28;
      return (uint64_t)v15;
    }
    sub_1D42B7F2C();
    swift_allocError();
    *v30 = 0;
    swift_willThrow();
LABEL_2:

    return (uint64_t)v15;
  }
LABEL_17:
  sub_1D42DCED4();
  result = sub_1D451B550();
  __break(1u);
  return result;
}

uint64_t static AudioDataSourceUtils.hasBuiltInMicrophone()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void (*v3)(uint64_t *__return_ptr, uint64_t);
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[7];
  _QWORD v17[3];
  char v18[40];
  uint64_t v19;
  _BYTE v20[16];

  v1 = MGGetProductType();
  sub_1D4380880(v1, v16);
  sub_1D430BBB0((uint64_t)v16, (uint64_t)v18, &qword_1EFE506B0);
  if (v19)
  {
    v2 = v18[0];
    sub_1D42F11A4(v16);
    sub_1D4380388(v2);
    v3 = (void (*)(uint64_t *__return_ptr, uint64_t))v17[2];
    sub_1D430BBB0((uint64_t)v17, (uint64_t)v20, &qword_1EFE4A7A0);
    v4 = sub_1D42F1244((uint64_t)v20);
    v3(&v13, v4);
    swift_release();
    v5 = v14;
    v6 = v15;
  }
  else
  {
    if (qword_1EFE48EF0 != -1)
      swift_once();
    v5 = algn_1EFEA7998[0];
    v6 = qword_1EFEA79B0;
    swift_bridgeObjectRetain();
    sub_1D42DCE84();
    sub_1D42D71EC();
  }
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFF1C8]), sel_initAuxiliarySession);
  sub_1D42DCE84();
  v8 = (void *)sub_1D451A6C8();
  sub_1D42CB208();
  sub_1D42D71EC();
  sub_1D44B6090();
  v9 = (void *)sub_1D451A6C8();
  sub_1D42CB5C8();
  sub_1D44B2D80(v7, (uint64_t)v8, (uint64_t)v9, v6);
  sub_1D42CB5C8();
  sub_1D42CB208();
  if (v0)
  {

    sub_1D42B7204();
  }
  else
  {

    sub_1D42B7204();
    sub_1D44B1840(v7);
    v11 = v10;

    v5 = v11 != 0;
    if (v11)
      sub_1D42B7204();
  }
  return v5 & 1;
}

unint64_t sub_1D44B1840(void *a1)
{
  unint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  id v14;
  uint64_t v15;

  result = sub_1D44B5520(a1);
  if (!result)
    return result;
  v2 = result;
  if (result >> 62)
  {
    result = sub_1D451B5A4();
    v3 = result;
    if (result)
      goto LABEL_4;
LABEL_21:
    v15 = 0;
LABEL_22:
    sub_1D42BE8B4();
    return v15;
  }
  v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_21;
LABEL_4:
  if (v3 >= 1)
  {
    v4 = 0;
    v15 = 0;
    while (1)
    {
      v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1D825CD78](v4, v2) : *(id *)(v2 + 8 * v4 + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, sel_portType, v15);
      v8 = sub_1D451A6EC();
      v10 = v9;
      if (v8 == sub_1D451A6EC() && v10 == v11)
        break;
      v13 = sub_1D451B820();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        goto LABEL_16;

LABEL_17:
      if (v3 == ++v4)
        goto LABEL_22;
    }

    swift_bridgeObjectRelease_n();
LABEL_16:
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v6, sel_UID);
    v15 = sub_1D451A6EC();

    goto LABEL_17;
  }
  __break(1u);
  return result;
}

void sub_1D44B19F0(OpaqueAudioQueue *a1, void *a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
    sub_1D44B1A54(a1);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 16))
      sub_1D44B1CAC(a4, *(_QWORD *)(a4 + 32), a1, a2);
  }
}

void sub_1D44B1A54(OpaqueAudioQueue *a1)
{
  OSStatus v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD inData[3];

  inData[2] = *MEMORY[0x1E0C80C00];
  LODWORD(inData[0]) = 1;
  v1 = AudioQueueSetProperty(a1, 0x6C73746Eu, inData, 4u);
  sub_1D44C85E4(v1);
  if (qword_1EFE40338 != -1)
    swift_once();
  v2 = sub_1D430710C();
  sub_1D42CC880(v2, (uint64_t)qword_1EFEA7700);
  v3 = sub_1D43A1AB0();
  v4 = sub_1D451AF44();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_1D43074C8();
    *(_WORD *)v5 = 0;
    sub_1D4450654(&dword_1D42A7000, v3, v4, "Enable listen mode success", v5);
    sub_1D42CC934();
  }

}

void sub_1D44B1CAC(uint64_t a1, uint64_t a2, OpaqueAudioQueue *a3, void *a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OSStatus Property;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  NSObject *v18;
  UInt32 ioDataSize;
  __int128 outData;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = sub_1D44B1840(a4);
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    MEMORY[0x1E0C80A78](v7);
    v22 = 0;
    outData = 0u;
    v21 = 0u;
    ioDataSize = 40;
    Property = AudioQueueGetProperty(a3, 0x61716674u, &outData, &ioDataSize);
    sub_1D44C85E4(Property);
    sub_1D44B1F3C(a1, a2, HIDWORD(v21));
    v16 = v15;
    sub_1D42CB7B8();
    v17 = (unint64_t *)sub_1D44AF438(v16, v9, v10);
    sub_1D42D71EC();
    sub_1D44B26B4(v17, (void (*)(uint64_t, uint64_t))sub_1D44B59F4);
    sub_1D42BE8B4();
    swift_bridgeObjectRelease();
    sub_1D42B7204();
    sub_1D42CB0F8();
  }
  else
  {
    if (qword_1EFE40338 != -1)
      swift_once();
    v12 = sub_1D430710C();
    sub_1D42CC880(v12, (uint64_t)qword_1EFEA7700);
    v18 = sub_1D43A1AB0();
    v13 = sub_1D451AF5C();
    if (os_log_type_enabled(v18, v13))
    {
      v14 = (uint8_t *)sub_1D43074C8();
      *(_WORD *)v14 = 0;
      sub_1D4450654(&dword_1D42A7000, v18, v13, "Couldn't obtain the built-in mic UID. Skipping setting of the AQ channel assignments", v14);
      sub_1D42CC934();
    }

  }
}

void sub_1D44B1F3C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = sub_1D44B0040(a1, a3, a2);
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v4 + 16) >= a3)
  {
    v5 = sub_1D44AF55C(v4, v4 + 32, 0, (2 * a3) | 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1D44AD514);
    v6 = *(_QWORD *)(v5 + 16);
    if (!v6)
    {
LABEL_9:
      sub_1D42BE8B4();
      sub_1D43AAC44();
      return;
    }
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1D42C73B0();
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(v5 + 8 * v7 + 32);
      v9 = v8 + 1;
      if (__OFADD__(v8, 1))
        break;
      v10 = *(_QWORD *)(v11 + 16);
      if (v10 >= *(_QWORD *)(v11 + 24) >> 1)
        sub_1D42C73B0();
      ++v7;
      *(_QWORD *)(v11 + 16) = v10 + 1;
      *(_QWORD *)(v11 + 8 * v10 + 32) = v9;
      if (v6 == v7)
        goto LABEL_9;
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_1D44B2064()
{
  swift_bridgeObjectRetain();
  sub_1D4406CEC();
  sub_1D42B7204();
  return sub_1D451B964();
}

BOOL sub_1D44B20B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v9;
  _BOOL8 result;

  if (a1 == a4 && a2 == a5)
    return a3 == a6;
  v9 = sub_1D451B820();
  result = 0;
  if ((v9 & 1) != 0)
    return a3 == a6;
  return result;
}

uint64_t sub_1D44B2104(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x4955656369766564 && a2 == 0xE900000000000044;
  if (v2 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E6C656E6E616863 && a2 == 0xED00007265626D75)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1D451B820();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D44B2220(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4E6C656E6E616863;
  else
    return 0x4955656369766564;
}

uint64_t sub_1D44B2268(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1D42B28FC(&qword_1EFE55FE0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1D42D7108();
  sub_1D42B5528(a1, a1[3]);
  sub_1D44B5BF4();
  sub_1D451BA24();
  sub_1D451B724();
  if (!v1)
    sub_1D451B754();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
}

uint64_t sub_1D44B2380()
{
  sub_1D42BE9A8();
  swift_bridgeObjectRetain();
  sub_1D4406CEC();
  sub_1D42B7204();
  sub_1D42CB3DC();
  return sub_1D42CB230();
}

uint64_t sub_1D44B23D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1D42B28FC(&qword_1EFE55FD0);
  MEMORY[0x1E0C80A78](v3);
  sub_1D42F1ED4();
  v4 = a1[4];
  sub_1D42B5528(a1, a1[3]);
  sub_1D44B5BF4();
  sub_1D451BA0C();
  if (v1)
  {
    sub_1D42B5400((uint64_t)a1);
  }
  else
  {
    v4 = sub_1D451B64C();
    swift_bridgeObjectRetain();
    sub_1D451B67C();
    sub_1D42CFC04();
    sub_1D42B5400((uint64_t)a1);
    sub_1D42D3258();
  }
  return v4;
}

void sub_1D44B2524()
{
  sub_1D451B958();
  sub_1D42CB3DC();
  sub_1D42CB230();
  sub_1D42BE978();
}

uint64_t sub_1D44B2550()
{
  char *v0;

  return sub_1D44B2220(*v0);
}

uint64_t sub_1D44B2558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44B2104(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44B257C()
{
  sub_1D44B5BF4();
  return sub_1D451BA3C();
}

uint64_t sub_1D44B25A4()
{
  sub_1D44B5BF4();
  return sub_1D451BA48();
}

uint64_t sub_1D44B25CC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1D44B23D4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1D44B25F8(_QWORD *a1)
{
  return sub_1D44B2268(a1);
}

uint64_t sub_1D44B2614()
{
  return sub_1D44B2380();
}

uint64_t sub_1D44B2620()
{
  return sub_1D44B2064();
}

uint64_t sub_1D44B262C()
{
  sub_1D451B958();
  swift_bridgeObjectRetain();
  sub_1D451A74C();
  swift_bridgeObjectRelease();
  sub_1D451B964();
  return sub_1D451B994();
}

BOOL sub_1D44B2698(uint64_t *a1, uint64_t *a2)
{
  return sub_1D44B20B4(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t sub_1D44B26B4(unint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  void (*v2)(uint64_t, uint64_t);
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = a2;
  v3 = a1[2];
  if (!v3)
  {
    swift_bridgeObjectRetain();
    v5 = MEMORY[0x1E0DEE9D8];
LABEL_13:
    swift_bridgeObjectRetain();
    sub_1D44B29E4(v5, v2);
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  v4 = a1;
  v20 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  sub_1D42C7C04();
  v5 = v20;
  v6 = v4[6];
  swift_bridgeObjectRetain();
  v7 = sub_1D451A6C8();
  if ((v6 & 0x8000000000000000) == 0 && !HIDWORD(v6))
  {
    v8 = v7;
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(v20 + 16);
    v10 = (unint64_t *)(v9 + 1);
    if (v9 >= *(_QWORD *)(v20 + 24) >> 1)
      goto LABEL_23;
    while (1)
    {
      *(_QWORD *)(v5 + 16) = v10;
      v11 = v5 + 24 * v9;
      *(_QWORD *)(v11 + 32) = v8;
      *(_DWORD *)(v11 + 40) = v6;
      *(_QWORD *)(v11 + 48) = v8;
      if (v3 == 1)
        break;
      v12 = v4[9];
      swift_bridgeObjectRetain();
      v13 = sub_1D451A6C8();
      if ((v12 & 0x8000000000000000) != 0 || HIDWORD(v12))
        goto LABEL_24;
      v8 = v13;
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(v5 + 16);
      if (v9 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_1D42C7C04();
        v5 = v20;
      }
      *(_QWORD *)(v5 + 16) = v9 + 1;
      v14 = v5 + 24 * v9;
      *(_QWORD *)(v14 + 32) = v8;
      *(_DWORD *)(v14 + 40) = v12;
      *(_QWORD *)(v14 + 48) = v8;
      if (v3 == 2)
        break;
      v10 = v4 + 12;
      v6 = 2;
      while (v6 < v3)
      {
        v16 = *v10;
        swift_bridgeObjectRetain();
        v17 = sub_1D451A6C8();
        if ((v16 & 0x8000000000000000) != 0 || HIDWORD(v16))
          goto LABEL_24;
        v4 = (unint64_t *)v17;
        swift_bridgeObjectRelease();
        v20 = v5;
        v9 = *(_QWORD *)(v5 + 16);
        v8 = v9 + 1;
        if (v9 >= *(_QWORD *)(v5 + 24) >> 1)
          sub_1D42C7C04();
        *(_QWORD *)(v5 + 16) = v8;
        v18 = v5 + 24 * v9;
        *(_QWORD *)(v18 + 32) = v4;
        ++v6;
        *(_DWORD *)(v18 + 40) = v16;
        *(_QWORD *)(v18 + 48) = v4;
        v10 += 3;
        if (v3 == v6)
          goto LABEL_11;
      }
      __break(1u);
LABEL_23:
      sub_1D42C7C04();
      v5 = v20;
    }
LABEL_11:
    v2 = a2;
    goto LABEL_13;
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
  result = sub_1D451B550();
  __break(1u);
  return result;
}

uint64_t sub_1D44B29E4(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1D42C7C38();
    v4 = v14;
    v6 = *(_QWORD *)(v14 + 16);
    v7 = 16 * v6;
    v8 = (_DWORD *)(a1 + 40);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v10 = *v8;
      v11 = v6 + 1;
      if (v6 >= *(_QWORD *)(v14 + 24) >> 1)
        sub_1D42C7C38();
      *(_QWORD *)(v14 + 16) = v11;
      v12 = v14 + v7;
      *(_QWORD *)(v12 + 32) = v9;
      *(_DWORD *)(v12 + 40) = v10;
      v7 += 16;
      v8 += 6;
      v6 = v11;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRetain();
  sub_1D44B00BC(v4, a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1D44B2B0C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!a1)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 >= 0x100000000)
  {
LABEL_9:
    sub_1D451B550();
    __break(1u);
    return;
  }
  a3(1634820961, a1);
  if (qword_1EFE40338 != -1)
    swift_once();
  v3 = sub_1D451A014();
  sub_1D42CC880(v3, (uint64_t)qword_1EFEA7700);
  swift_bridgeObjectRetain_n();
  v4 = sub_1D4519FFC();
  v5 = sub_1D451AF44();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = swift_bridgeObjectRetain();
    v9 = MEMORY[0x1D825C280](v8, MEMORY[0x1E0DEB418]);
    v11 = v10;
    swift_bridgeObjectRelease();
    sub_1D43D72EC(v9, v11, &v12);
    sub_1D451B1A8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 1024;
    sub_1D451B1A8();
    _os_log_impl(&dword_1D42A7000, v4, v5, "Set audio queue channel map (one-indexed) %s with result %d", (uint8_t *)v6, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1D825E524](v7, -1, -1);
    MEMORY[0x1D825E524](v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_1D44B2D80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;
  id v6;
  id v7[3];

  v7[2] = *(id *)MEMORY[0x1E0C80C00];
  v7[0] = 0;
  if (objc_msgSend(a1, sel_setCategory_mode_options_error_, a2, a3, a4, v7))
  {
    v5 = v7[0];
  }
  else
  {
    v6 = v7[0];
    sub_1D42EA4A4();

    sub_1D42B7124();
    sub_1D42DCEE8();
    sub_1D44B5EC4();
    sub_1D451B400();
    sub_1D44B5EB0();
    sub_1D44B5E90();
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D44B5F5C();
    sub_1D44B5E80();
    sub_1D44B5DC8((uint64_t)v7[0], (uint64_t)"com.apple.SoundAnalysis");
    sub_1D44B5F50();
    sub_1D42B6F54();
    sub_1D4311F78();
  }
  sub_1D44B5EA0();
}

void sub_1D44B2E9C()
{
  int v0;
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;

  sub_1D44B5FA8();
  v2 = objc_msgSend(v1, sel_prefersNoMicrophoneUsageIndicator);
  if (v2 != v0)
  {
    if (sub_1D44B5F2C(v2, sel_setPrefersNoMicrophoneUsageIndicator_error_, v3, v4, v5, v6, v7, v8, v11, 0))
    {
      v9 = v12;
    }
    else
    {
      v10 = v12;
      sub_1D44B5F7C();
      sub_1D4457DE0();
      sub_1D42B7124();
      sub_1D42DCEE8();
      sub_1D44B5EC4();
      sub_1D451B400();
      sub_1D44B5EB0();
      sub_1D44B5E90();
      sub_1D42B28FC(&qword_1EFE49BB0);
      sub_1D44B5F5C();
      sub_1D44B5E80();
      sub_1D44B5DC8((uint64_t)v12, (uint64_t)"com.apple.SoundAnalysis");
      sub_1D44B5F50();
      sub_1D42B6F54();
      sub_1D4311F78();
    }
  }
  sub_1D44B5EA0();
}

void sub_1D44B2F9C()
{
  int v0;
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;

  sub_1D44B5FA8();
  v2 = objc_msgSend(v1, sel_allowHapticsAndSystemSoundsDuringRecording);
  if (v2 != v0)
  {
    if (sub_1D44B5F2C(v2, sel_setAllowHapticsAndSystemSoundsDuringRecording_error_, v3, v4, v5, v6, v7, v8, v11, 0))
    {
      v9 = v12;
    }
    else
    {
      v10 = v12;
      sub_1D44B5F7C();
      sub_1D4457DE0();
      sub_1D42B7124();
      sub_1D42DCEE8();
      sub_1D44B5EC4();
      sub_1D451B400();
      sub_1D44B5EB0();
      sub_1D44B5E90();
      sub_1D42B28FC(&qword_1EFE49BB0);
      sub_1D44B5F5C();
      sub_1D44B5E80();
      sub_1D44B5DC8((uint64_t)v12, (uint64_t)"com.apple.SoundAnalysis");
      sub_1D44B5F50();
      sub_1D42B6F54();
      sub_1D4311F78();
    }
  }
  sub_1D44B5EA0();
}

void sub_1D44B309C()
{
  int v0;
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;

  sub_1D44B5FA8();
  v2 = objc_msgSend(v1, sel_decoupledIO);
  if (v2 != v0)
  {
    if (sub_1D44B5F2C(v2, sel_preferDecoupledIO_error_, v3, v4, v5, v6, v7, v8, v11, 0))
    {
      v9 = v12;
    }
    else
    {
      v10 = v12;
      sub_1D44B5F7C();
      sub_1D4457DE0();
      sub_1D42B7124();
      sub_1D42DCEE8();
      sub_1D44B5EC4();
      sub_1D451B400();
      sub_1D44B5EB0();
      sub_1D44B5E90();
      sub_1D42B28FC(&qword_1EFE49BB0);
      sub_1D44B5F5C();
      sub_1D44B5E80();
      sub_1D44B5DC8((uint64_t)v12, (uint64_t)"com.apple.SoundAnalysis");
      sub_1D44B5F50();
      sub_1D42B6F54();
      sub_1D4311F78();
    }
  }
  sub_1D44B5EA0();
}

void sub_1D44B319C()
{
  int v0;
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;

  sub_1D44B5FA8();
  v2 = objc_msgSend(v1, sel_eligibleForBTSmartRoutingConsideration);
  if (v2 != v0)
  {
    if (sub_1D44B5F2C(v2, sel_setEligibleForBTSmartRoutingConsideration_error_, v3, v4, v5, v6, v7, v8, v11, 0))
    {
      v9 = v12;
    }
    else
    {
      v10 = v12;
      sub_1D44B5F7C();
      sub_1D4457DE0();
      sub_1D42B7124();
      sub_1D42DCEE8();
      sub_1D44B5EC4();
      sub_1D451B400();
      sub_1D44B5EB0();
      sub_1D44B5E90();
      sub_1D42B28FC(&qword_1EFE49BB0);
      sub_1D44B5F5C();
      sub_1D44B5E80();
      sub_1D44B5DC8((uint64_t)v12, (uint64_t)"com.apple.SoundAnalysis");
      sub_1D44B5F50();
      sub_1D42B6F54();
      sub_1D4311F78();
    }
  }
  sub_1D44B5EA0();
}

void sub_1D44B329C(void *a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v4;
  id v5[3];

  v5[2] = *(id *)MEMORY[0x1E0C80C00];
  v5[0] = 0;
  if (objc_msgSend(a1, sel_setAudioHardwareControlFlags_error_, a2, v5))
  {
    v3 = v5[0];
  }
  else
  {
    v4 = v5[0];
    sub_1D42EA4A4();

    sub_1D42B7124();
    sub_1D42DCEE8();
    sub_1D44B5EC4();
    sub_1D451B400();
    sub_1D44B5EB0();
    sub_1D44B5E90();
    sub_1D42B28FC(&qword_1EFE49BB0);
    sub_1D44B5F5C();
    sub_1D44B5E80();
    sub_1D44B5DC8((uint64_t)v5[0], (uint64_t)"com.apple.SoundAnalysis");
    sub_1D44B5F50();
    sub_1D42B6F54();
    sub_1D4311F78();
  }
  sub_1D44B5EA0();
}

void sub_1D44B33B0()
{
  int v0;
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;

  sub_1D44B5FA8();
  v2 = objc_msgSend(v1, sel_participatesInVolumePolicy);
  if (v2 != v0)
  {
    if (sub_1D44B5F2C(v2, sel_setParticipatesInVolumePolicy_error_, v3, v4, v5, v6, v7, v8, v11, 0))
    {
      v9 = v12;
    }
    else
    {
      v10 = v12;
      sub_1D44B5F7C();
      sub_1D4457DE0();
      sub_1D42B7124();
      sub_1D42DCEE8();
      sub_1D44B5EC4();
      sub_1D451B400();
      sub_1D44B5EB0();
      sub_1D44B5E90();
      sub_1D42B28FC(&qword_1EFE49BB0);
      sub_1D44B5F5C();
      sub_1D44B5E80();
      sub_1D44B5DC8((uint64_t)v12, (uint64_t)"com.apple.SoundAnalysis");
      sub_1D44B5F50();
      sub_1D42B6F54();
      sub_1D4311F78();
    }
  }
  sub_1D44B5EA0();
}

void sub_1D44B34B0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 56);
  v18 = *(_BYTE *)(a2 + 64);
  if (qword_1EFE40338 != -1)
    swift_once();
  v5 = sub_1D451A014();
  sub_1D42CC880(v5, (uint64_t)qword_1EFEA7700);
  sub_1D44B6060();
  sub_1D44B6060();
  sub_1D44B6060();
  v6 = sub_1D4519FFC();
  v7 = sub_1D451AF74();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)sub_1D42CC940();
    v19 = sub_1D42CC940();
    *(_DWORD *)v8 = 136315138;
    sub_1D42CB8FC();
    sub_1D42DCE84();
    sub_1D42CB7B8();
    v9 = sub_1D451A728();
    sub_1D43D72EC(v9, v10, &v19);
    sub_1D451B1A8();
    sub_1D439E0C8();
    sub_1D439E0C8();
    sub_1D439E0C8();
    sub_1D42CB5C8();
    _os_log_impl(&dword_1D42A7000, v6, v7, "configuring session: %s", v8, 0xCu);
    swift_arrayDestroy();
    sub_1D42CC934();
  }

  sub_1D439E0C8();
  sub_1D439E0C8();
  sub_1D439E0C8();
  v11 = v4;
  sub_1D42CB8FC();
  v12 = (void *)sub_1D451A6C8();
  swift_bridgeObjectRelease();
  sub_1D42DCE84();
  v13 = (void *)sub_1D451A6C8();
  sub_1D42CB208();
  sub_1D44B2D80(a1, (uint64_t)v12, (uint64_t)v13, v11);

  if (!v2)
  {
    sub_1D44B2E9C();
    sub_1D44B2F9C();
    sub_1D44B309C();
    sub_1D44B319C();
    if ((v18 & 1) == 0)
      sub_1D44B329C(a1, v17);
    v14 = sub_1D4519FFC();
    v15 = sub_1D451AF74();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)sub_1D42CC940();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1D42A7000, v14, v15, "ignoring config for prefers no interruptions", v16, 2u);
      sub_1D42CC934();
    }

    sub_1D44B33B0();
  }
}

void static AudioDataSourceUtils.configureAudioSession(session:configuration:fully:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _QWORD v19[6];
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;

  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if ((a3 & 1) != 0)
  {
    v8 = *(_BYTE *)(a2 + 64);
    v9 = *(_QWORD *)(a2 + 56);
    v10 = *(_BYTE *)(a2 + 53);
    v11 = *(_BYTE *)(a2 + 52);
    v12 = *(_BYTE *)(a2 + 51);
    v13 = *(_BYTE *)(a2 + 50);
    v14 = *(_BYTE *)(a2 + 49);
    v15 = *(_BYTE *)(a2 + 48);
    v16 = *(_QWORD *)(a2 + 40);
    v19[0] = *(_QWORD *)a2;
    v19[1] = v4;
    v19[2] = v6;
    v19[3] = v5;
    v19[4] = v7;
    v19[5] = v16;
    v20 = v15;
    v21 = v14;
    v22 = v13;
    v23 = v12;
    v24 = v11;
    v25 = v10;
    v26 = v9;
    v27 = v8;
    sub_1D44B34B0(a1, (uint64_t)v19);
  }
  else
  {
    swift_bridgeObjectRetain();
    v17 = (void *)sub_1D451A6C8();
    sub_1D42D3258();
    sub_1D42D71EC();
    v18 = (void *)sub_1D451A6C8();
    sub_1D42CB5C8();
    sub_1D44B2D80(a1, (uint64_t)v17, (uint64_t)v18, v7);

  }
}

void sub_1D44B39AC()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  id v3;
  id v4;

  v0 = sub_1D451B010();
  v1 = (void (*)(uint64_t))MEMORY[0x1E0CB1F30];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  sub_1D42CB18C();
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  sub_1D451B01C();

  sub_1D43287AC(&qword_1EFE55EF8, v1);
  sub_1D451A308();
  sub_1D42BE98C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));

  sub_1D42CB0F8();
}

BOOL static AudioDataSourceUtils.SystemAudioEvent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AudioDataSourceUtils.SystemAudioEvent.hash(into:)()
{
  sub_1D451B964();
  sub_1D42B6E24();
}

void AudioDataSourceUtils.SystemAudioEvent.hashValue.getter()
{
  sub_1D42BE9A8();
  sub_1D42CB3DC();
  sub_1D42CB230();
  sub_1D42BE978();
}

void static AudioDataSourceUtils.systemAudioEventPublisher()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[2];

  sub_1D42CB740();
  v15[1] = v0;
  v1 = sub_1D42B28FC(&qword_1EFE55BD0);
  MEMORY[0x1E0C80A78](v1);
  sub_1D42CB210();
  v2 = sub_1D42B28FC(&qword_1EFE55BD8);
  v3 = sub_1D44B5E68(v2);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)v15 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)v15 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v15 - v13;
  sub_1D44B6020();
  sub_1D42E33F8(&qword_1EFE55BE0, &qword_1EFE55BD0);
  sub_1D44B5F3C();
  sub_1D44B5FDC();
  sub_1D44B6020();
  sub_1D44B5F3C();
  sub_1D44B5FDC();
  sub_1D44B6020();
  sub_1D44B5F3C();
  sub_1D44B5FDC();
  sub_1D44B6020();
  sub_1D44B5F3C();
  sub_1D44B5FDC();
  sub_1D42E33F8(&qword_1EFE55BE8, &qword_1EFE55BD8);
  sub_1D44B6090();
  sub_1D451A368();
  sub_1D44B6028((uint64_t)v6);
  sub_1D44B6028((uint64_t)v9);
  sub_1D44B6028((uint64_t)v12);
  sub_1D44B6028((uint64_t)v14);
  sub_1D42CB520();
}

void sub_1D44B3D30(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_1D44B3D48(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void sub_1D44B3D54(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void sub_1D44B3D60(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D44B3D90()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  _BYTE *v4;

  if (qword_1EFE40338 != -1)
    swift_once();
  v0 = sub_1D451A014();
  sub_1D42CC880(v0, (uint64_t)qword_1EFEA7700);
  v1 = sub_1D4519FFC();
  v2 = sub_1D451AF74();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1D42A7000, v1, v2, "AVAudioSession interrupted", v3, 2u);
    MEMORY[0x1D825E524](v3, -1, -1);
  }

  sub_1D44B59B8();
  swift_allocError();
  *v4 = 1;
  return swift_willThrow();
}

unint64_t sub_1D44B406C()
{
  unint64_t result;

  result = qword_1EFE55BF0;
  if (!qword_1EFE55BF0)
  {
    result = MEMORY[0x1D825E41C](&protocol conformance descriptor for AudioDataSourceUtils.SystemAudioEvent, &type metadata for AudioDataSourceUtils.SystemAudioEvent);
    atomic_store(result, (unint64_t *)&qword_1EFE55BF0);
  }
  return result;
}

void type metadata accessor for AudioDataSourceUtils()
{
  sub_1D42CB35C();
}

uint64_t storeEnumTagSinglePayload for AudioDataSourceUtils.SystemAudioEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D44B4100 + 4 * byte_1D454C699[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D44B4134 + 4 * byte_1D454C694[v4]))();
}

uint64_t sub_1D44B4134(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44B413C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44B4144);
  return result;
}

uint64_t sub_1D44B4150(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44B4158);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D44B415C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44B4164(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AudioDataSourceUtils.SystemAudioEvent()
{
  sub_1D42CB35C();
}

void sub_1D44B417C()
{
  sub_1D42E33F8(&qword_1EFE55BF8, &qword_1EFE55C00);
}

uint64_t sub_1D44B41AC()
{
  return swift_release();
}

void sub_1D44B41B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  sub_1D42B6E24();
}

uint64_t sub_1D44B41E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1D44B4224(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

void type metadata accessor for SNAudioQueueConfiguration()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44B4270()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1D44B4294(OpaqueAudioQueue *a1, void *a2)
{
  uint64_t v2;

  sub_1D44B19F0(a1, a2, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_1D44B42A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  sub_1D44B5E54();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1D44B5F10() || (sub_1D44B5FD0(), !(v6 ^ v4 | v5)))
  {
    sub_1D44B5FB8();
    sub_1D442F5A8();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1D44B5E40();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = (char *)sub_1D44B5F1C();
  sub_1D44AB70C(v8, v9, v10);
  if (!v3)
  {
LABEL_11:
    sub_1D42BE8B4();
    *v1 = v2;
    sub_1D42CB084();
    return;
  }
  sub_1D44B5FC4();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1D44B4338()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  _OWORD v75[3];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[2];
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;

  sub_1D44B60B4();
  if (v14)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v15 = sub_1D44B607C();
  *v1 = (uint64_t)v0;
  if (!v15 || (v16 = v0[3] >> 1, v16 < v4))
  {
    sub_1D442F660();
    v0 = v17;
    *v1 = (uint64_t)v17;
    v16 = v17[3] >> 1;
  }
  v18 = v0[2];
  v19 = v16 - v18;
  sub_1D44AD6C8((uint64_t)v82, (uint64_t)&v0[6 * v18 + 4], v16 - v18, v2);
  if (v5 < v3)
    goto LABEL_12;
  if (v5)
  {
    v20 = v0[2];
    v14 = __OFADD__(v20, v5);
    v21 = v20 + v5;
    if (v14)
    {
      __break(1u);
LABEL_17:
      v28 = v2 + 1;
      if (__OFADD__(v2, 1))
      {
        __break(1u);
      }
      else
      {
        v24 = v83;
        v29 = (unint64_t)(v83 + 64) >> 6;
        v3 = v2;
        if (v28 >= v29)
          goto LABEL_38;
        v30 = *(_QWORD *)(v73 + 8 * v28);
        if (v30)
        {
LABEL_20:
          v22 = (v30 - 1) & v30;
          v23 = __clz(__rbit64(v30)) + (v28 << 6);
          v2 = v28;
          goto LABEL_15;
        }
        v31 = v2 + 2;
        v3 = v2 + 1;
        if (v2 + 2 >= v29)
          goto LABEL_38;
        v13 = v83;
        v30 = *(_QWORD *)(v73 + 8 * v31);
        if (v30)
        {
LABEL_23:
          v28 = v31;
LABEL_24:
          v24 = v83;
          goto LABEL_20;
        }
        v3 = v2 + 2;
        if (v2 + 3 >= v29)
          goto LABEL_38;
        v30 = *(_QWORD *)(v73 + 8 * (v2 + 3));
        if (v30)
        {
          v28 = v2 + 3;
          goto LABEL_24;
        }
        v31 = v2 + 4;
        v3 = v2 + 3;
        v24 = v83;
        if (v2 + 4 >= v29)
          goto LABEL_38;
        v30 = *(_QWORD *)(v73 + 8 * v31);
        if (v30)
          goto LABEL_23;
        v28 = v2 + 5;
        v3 = v2 + 4;
        v24 = v83;
        if (v2 + 5 >= v29)
        {
LABEL_38:
          v22 = 0;
          v80 = 0u;
          v81 = 0u;
          v79 = 0u;
          goto LABEL_39;
        }
        v30 = *(_QWORD *)(v73 + 8 * v28);
        if (v30)
          goto LABEL_20;
        v3 = v29 - 1;
        v32 = v2 + 6;
        while (v32 < v29)
        {
          v30 = *(_QWORD *)(v73 + 8 * v32++);
          if (v30)
          {
            v28 = v32 - 1;
            goto LABEL_24;
          }
        }
      }
      v24 = v13;
      goto LABEL_38;
    }
    v0[2] = v21;
  }
  if (v5 != v19)
  {
    sub_1D4367684();
    return;
  }
LABEL_13:
  v19 = v0[2];
  v0 = (_QWORD *)v82[0];
  v73 = v82[1];
  v2 = v84;
  if (!v85)
    goto LABEL_17;
  v22 = (v85 - 1) & v85;
  v23 = __clz(__rbit64(v85)) | (v84 << 6);
  v24 = v83;
LABEL_15:
  v25 = (uint64_t *)(v0[6] + 16 * v23);
  v27 = *v25;
  v26 = v25[1];
  sub_1D42B294C(v0[7] + 32 * v23, (uint64_t)&v80);
  *(_QWORD *)&v79 = v27;
  *((_QWORD *)&v79 + 1) = v26;
  v5 = sub_1D42D71EC();
  v3 = v2;
LABEL_39:
  sub_1D44B6048(v5, v6, v7, v8, v9, v10, v11, v12, v68, v71);
  v72 = v24;
  if (!*((_QWORD *)&v76 + 1))
  {
LABEL_78:
    sub_1D42D7018((uint64_t)&v79, (uint64_t *)&unk_1EFE40340);
    sub_1D4367684();
    sub_1D42D7018((uint64_t)&v76, (uint64_t *)&unk_1EFE40340);
    return;
  }
  v74 = (unint64_t)(v24 + 64) >> 6;
  v69 = v74 - 1;
  while (1)
  {
    sub_1D42D7018((uint64_t)&v76, (uint64_t *)&unk_1EFE40340);
    v36 = *v1;
    v37 = *(_QWORD *)(*v1 + 24) >> 1;
    v38 = v19 + 1;
    if (v37 < v19 + 1)
    {
      sub_1D442F660();
      v36 = v33;
      *v1 = v33;
      v37 = *(_QWORD *)(v33 + 24) >> 1;
    }
    sub_1D44B603C(v33, v38, v34, v35, v69);
    if (*((_QWORD *)&v75[0] + 1))
      break;
    v52 = v3;
LABEL_75:
    sub_1D42D7018((uint64_t)v75, (uint64_t *)&unk_1EFE40340);
    v3 = v52;
LABEL_77:
    *(_QWORD *)(*v1 + 16) = v19;
    sub_1D44B6048(v60, v61, v62, v63, v64, v65, v66, v67, v70, v72);
    if (!*((_QWORD *)&v76 + 1))
      goto LABEL_78;
  }
  v39 = v36 + 32;
  while (1)
  {
    v76 = v75[0];
    v77 = v75[1];
    v78 = v75[2];
    if (v19 >= v37)
    {
      sub_1D42D7018((uint64_t)&v76, &qword_1EFE51AB0);
      goto LABEL_77;
    }
    sub_1D42D7018((uint64_t)&v79, (uint64_t *)&unk_1EFE40340);
    v40 = (_OWORD *)(v39 + 48 * v19);
    v42 = v77;
    v41 = v78;
    *v40 = v76;
    v40[1] = v42;
    v40[2] = v41;
    if (!v22)
      break;
    v43 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    v44 = v43 | (v3 << 6);
LABEL_48:
    v45 = (uint64_t *)(v0[6] + 16 * v44);
    v46 = *v45;
    v47 = v45[1];
    sub_1D42B294C(v0[7] + 32 * v44, (uint64_t)&v80);
    *(_QWORD *)&v79 = v46;
    *((_QWORD *)&v79 + 1) = v47;
    v48 = swift_bridgeObjectRetain();
    v52 = v3;
LABEL_55:
    ++v19;
    sub_1D44B603C(v48, v49, v50, v51);
    if (!*((_QWORD *)&v75[0] + 1))
      goto LABEL_75;
  }
  if (!__OFADD__(v3, 1))
  {
    sub_1D44B609C();
    if (v54 == v14)
    {
      v52 = v3;
LABEL_54:
      v22 = 0;
      v80 = 0u;
      v81 = 0u;
      v3 = v52;
      v79 = 0u;
      goto LABEL_55;
    }
    v55 = *(_QWORD *)(v73 + 8 * v53);
    if (v55)
      goto LABEL_53;
    v52 = v53;
    sub_1D44B60A8();
    if (v54 == v14)
      goto LABEL_54;
    v55 = *(_QWORD *)(v73 + 8 * v57);
    if (!v55)
    {
      v52 = v57;
      if (v56 + 2 >= v74)
        goto LABEL_54;
      v55 = *(_QWORD *)(v73 + 8 * (v56 + 2));
      if (v55)
      {
        v53 = v56 + 2;
        goto LABEL_53;
      }
      v52 = v56 + 2;
      sub_1D44B60A8();
      if (v54 == v14)
        goto LABEL_54;
      v55 = *(_QWORD *)(v73 + 8 * v57);
      if (!v55)
      {
        v52 = v57;
        sub_1D44B609C();
        if (v54 == v14)
          goto LABEL_54;
        v55 = *(_QWORD *)(v73 + 8 * v53);
        if (!v55)
        {
          do
          {
            sub_1D44B609C();
            if (v54 == v14)
            {
              v52 = v70;
              goto LABEL_54;
            }
            v55 = *(_QWORD *)(v73 + 8 * v58);
            v59 = v58 + 1;
          }
          while (!v55);
          v53 = v59 - 1;
        }
        goto LABEL_53;
      }
    }
    v53 = v57;
LABEL_53:
    v22 = (v55 - 1) & v55;
    v44 = __clz(__rbit64(v55)) + (v53 << 6);
    v3 = v53;
    goto LABEL_48;
  }
  __break(1u);
}

void sub_1D44B4854()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_1D44B60B4();
  if (v8)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!sub_1D44B607C() || (v9 = *(_QWORD *)(v0 + 24) >> 1, v9 < v4))
  {
    sub_1D442F730();
    v0 = v10;
    v9 = *(_QWORD *)(v10 + 24) >> 1;
  }
  v11 = *(_QWORD *)(v0 + 16);
  v12 = v9 - v11;
  sub_1D44AD8E0((uint64_t)v36, v0 + 32 * v11 + 32, v9 - v11, v2);
  if (v13 < v3)
    goto LABEL_12;
  if (v13)
  {
    v15 = *(_QWORD *)(v0 + 16);
    v8 = __OFADD__(v15, v13);
    v16 = v15 + v13;
    if (v8)
    {
      __break(1u);
      goto LABEL_46;
    }
    *(_QWORD *)(v0 + 16) = v16;
  }
  if (v13 != v12)
    goto LABEL_10;
LABEL_13:
  v3 = *(_QWORD *)(v0 + 16);
  v12 = v37;
  v35 = v36[1];
  v14 = v38;
  v33 = v37;
  if (!v39)
  {
LABEL_46:
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      return;
    }
    v19 = (unint64_t)(v12 + 64) >> 6;
    if (v21 >= v19)
      goto LABEL_10;
    v30 = *(_QWORD *)(v35 + 8 * v21);
    if (!v30)
    {
      v31 = v14 + 2;
      if (v14 + 2 >= v19)
        goto LABEL_10;
      v30 = *(_QWORD *)(v35 + 8 * v31);
      if (v30)
      {
LABEL_55:
        v21 = v31;
      }
      else
      {
        if (v14 + 3 >= v19)
          goto LABEL_10;
        v30 = *(_QWORD *)(v35 + 8 * (v14 + 3));
        if (!v30)
          goto LABEL_60;
        v21 = v14 + 3;
      }
    }
LABEL_49:
    v17 = (v30 - 1) & v30;
    v18 = v21;
    v12 = v33;
    goto LABEL_15;
  }
  v17 = (v39 - 1) & v39;
  v18 = v38;
LABEL_15:
  sub_1D44B5F88();
  sub_1D44B6030();
  if (!v5)
    goto LABEL_10;
  v34 = (unint64_t)(v12 + 64) >> 6;
  v14 = v18;
  while (1)
  {
    v20 = *(_QWORD *)(v0 + 24) >> 1;
    if (v20 < v3 + 1)
    {
      v28 = v14;
      sub_1D442F730();
      v14 = v28;
      v0 = v29;
      v20 = *(_QWORD *)(v29 + 24) >> 1;
    }
    if (v3 < v20)
      break;
LABEL_44:
    *(_QWORD *)(v0 + 16) = v3;
  }
  while (1)
  {
    v21 = v0 + 32 + 32 * v3;
    *(_QWORD *)v21 = v2;
    *(_QWORD *)(v21 + 8) = v5;
    *(_QWORD *)(v21 + 16) = v6;
    *(_QWORD *)(v21 + 24) = v7;
    ++v3;
    if (!v17)
      break;
    v17 &= v17 - 1;
    v22 = v14;
LABEL_33:
    sub_1D44B5F88();
    sub_1D44B6030();
    v14 = v22;
    if (v3 >= v20)
      goto LABEL_44;
  }
  v22 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v22 >= v34)
      goto LABEL_51;
    v23 = *(_QWORD *)(v35 + 8 * v22);
    if (v23)
      goto LABEL_32;
    sub_1D44B60A8();
    if (v25 == v8)
      goto LABEL_51;
    v23 = *(_QWORD *)(v35 + 8 * v24);
    if (!v23)
    {
      if (v22 + 2 >= v34)
        goto LABEL_51;
      v23 = *(_QWORD *)(v35 + 8 * (v22 + 2));
      if (v23)
      {
        v22 += 2;
        goto LABEL_32;
      }
      sub_1D44B60A8();
      if (v25 == v8)
        goto LABEL_51;
      v23 = *(_QWORD *)(v35 + 8 * v24);
      if (!v23)
      {
        v22 += 4;
        if (v22 >= v34)
          goto LABEL_51;
        v23 = *(_QWORD *)(v35 + 8 * v22);
        if (!v23)
        {
          while (1)
          {
            sub_1D44B609C();
            if (v25 == v8)
              break;
            v23 = *(_QWORD *)(v35 + 8 * v26);
            v27 = v26 + 1;
            if (v23)
            {
              v22 = v27 - 1;
              goto LABEL_32;
            }
          }
LABEL_51:
          *(_QWORD *)(v0 + 16) = v3;
          goto LABEL_10;
        }
        goto LABEL_32;
      }
    }
    v22 = v24;
LABEL_32:
    v17 = (v23 - 1) & v23;
    goto LABEL_33;
  }
  __break(1u);
LABEL_60:
  v31 = v21 + 3;
  if (v21 + 3 < v19)
  {
    v30 = *(_QWORD *)(v35 + 8 * v31);
    if (v30)
      goto LABEL_55;
    v21 += 4;
    if (v21 >= v19)
      goto LABEL_10;
    v30 = *(_QWORD *)(v35 + 8 * v21);
    if (!v30)
    {
      v32 = v14 + 6;
      while (v32 < v19)
      {
        v30 = *(_QWORD *)(v35 + 8 * v32++);
        if (v30)
        {
          v21 = v32 - 1;
          goto LABEL_49;
        }
      }
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_10:
  sub_1D4367684();
  *v1 = v0;
}

void sub_1D44B4C60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_1D44B5E54();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1D44B5F10() || (sub_1D44B5FD0(), !(v6 ^ v4 | v5)))
  {
    sub_1D44B5FB8();
    sub_1D442F970();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1D44B5E40();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1D44B5F1C();
  sub_1D44ABB48();
  if (!v3)
  {
LABEL_11:
    sub_1D42BE8B4();
    *v1 = v2;
    sub_1D42CB084();
    return;
  }
  sub_1D44B5FC4();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1D44B4CF4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1D44B5E54();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1D44B5F10() || (sub_1D44B5FD0(), !(v6 ^ v4 | v5)))
  {
    sub_1D44B5FB8();
    sub_1D442FA64();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1D44B5E40();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = sub_1D44B5F1C();
  sub_1D44ABC50(v8, v9);
  if (!v3)
  {
LABEL_11:
    sub_1D42BE8B4();
    *v1 = v2;
    sub_1D42CB084();
    return;
  }
  sub_1D44B5FC4();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1D44B4D88()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1D44B5E54();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1D44B5F10() || (sub_1D44B5FD0(), !(v6 ^ v4 | v5)))
  {
    sub_1D44B5FB8();
    sub_1D442FA9C();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1D44B5E40();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = sub_1D44B5F1C();
  sub_1D44ABD78(v8, v9);
  if (!v3)
  {
LABEL_11:
    sub_1D42BE8B4();
    *v1 = v2;
    sub_1D42CB084();
    return;
  }
  sub_1D44B5FC4();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1D44B4E20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_1D44B5E54();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1D44B5F10() || (sub_1D44B5FD0(), !(v6 ^ v4 | v5)))
  {
    sub_1D44B5FB8();
    sub_1D442FAB8();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1D44B5E40();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1D44B5F1C();
  sub_1D44ABE90();
  if (!v3)
  {
LABEL_11:
    sub_1D42BE8B4();
    *v1 = v2;
    sub_1D42CB084();
    return;
  }
  sub_1D44B5FC4();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1D44B4EB8(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  if (a1 >> 62)
  {
    sub_1D42CB7B8();
    v3 = sub_1D451B5A4();
    sub_1D42BE8B4();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    sub_1D42DCE84();
    v5 = sub_1D451B5A4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    sub_1D42DCE84();
    v4 = MEMORY[0x1D825CD84](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    v10 = sub_1D44B6008(v8);
    sub_1D44B558C(v10, v11, a1, (void (*)(uint64_t, _QWORD, uint64_t))sub_1D44ABF18, (uint64_t)&unk_1EFE55D88, (uint64_t *)&unk_1EFE479E0, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1D42C86A8);
    if (v12 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    sub_1D42DCE84();
    v9 = sub_1D451B5A4();
    swift_bridgeObjectRelease();
  }
  if (v12 < 1)
    goto LABEL_20;
  sub_1D44B6068();
  if (!v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
LABEL_20:
    swift_bridgeObjectRelease();
    sub_1D451A950();
    return;
  }
  __break(1u);
}

void sub_1D44B505C(unint64_t a1)
{
  sub_1D44B50A4(a1, (void (*)(uint64_t, _QWORD, uint64_t))sub_1D44ABFA8, (uint64_t)&unk_1EFE55EF0, &qword_1EFE55EE8, (uint64_t *)sub_1D42C86D8);
}

void sub_1D44B5080(unint64_t a1)
{
  sub_1D44B50A4(a1, (void (*)(uint64_t, _QWORD, uint64_t))sub_1D44AC3DC, (uint64_t)&unk_1EFE55EA8, (uint64_t *)&unk_1EFE4AC90, (uint64_t *)sub_1D42C8674);
}

void sub_1D44B50A4(unint64_t a1, void (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  if (a1 >> 62)
  {
    sub_1D42CB8FC();
    v11 = sub_1D451B5A4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    sub_1D42CB9DC();
    v13 = sub_1D451B5A4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
  {
    __break(1u);
    goto LABEL_24;
  }
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v13 = 1;
  }
  v24 = v11;
  v11 = (uint64_t)a2;
  a2 = (void (*)(uint64_t, _QWORD, uint64_t))a3;
  a3 = (uint64_t)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    sub_1D42CB9DC();
    v12 = MEMORY[0x1D825CD84](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = (uint64_t)a2;
    a2 = (void (*)(uint64_t, _QWORD, uint64_t))v11;
    v11 = v24;
LABEL_16:
    v18 = sub_1D44B6008(v16);
    sub_1D44B558C(v18, v19, a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v20 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    sub_1D42CB9DC();
    v17 = sub_1D451B5A4();
    swift_bridgeObjectRelease();
  }
  if (v20 < 1)
    goto LABEL_20;
  sub_1D44B6068();
  if (!v23)
  {
    *(_QWORD *)(v21 + 16) = v22;
LABEL_20:
    swift_bridgeObjectRelease();
    sub_1D451A950();
    return;
  }
  __break(1u);
}

void sub_1D44B5284()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1D44B5E54();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1D44B5F10() || (sub_1D44B5FD0(), !(v6 ^ v4 | v5)))
  {
    sub_1D44B5FB8();
    sub_1D442FC60();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1D44B5E40();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = sub_1D44B5F1C();
  sub_1D44AC484(v8, v9);
  if (!v3)
  {
LABEL_11:
    sub_1D42BE8B4();
    *v1 = v2;
    sub_1D42CB084();
    return;
  }
  sub_1D44B5FC4();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1D44B531C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  sub_1D44B5E54();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1D44B5F10() || (sub_1D44B5FD0(), !(v6 ^ v4 | v5)))
  {
    sub_1D44B5FB8();
    sub_1D442FF10();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1D44B5E40();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = sub_1D44B5F1C();
  sub_1D44AC6C8(v8, v9, v10);
  if (!v3)
  {
LABEL_11:
    sub_1D42BE8B4();
    *v1 = v2;
    sub_1D42CB084();
    return;
  }
  sub_1D44B5FC4();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1D44B53B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1D44B5E54();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1D44B5F10() || (sub_1D44B5FD0(), !(v6 ^ v4 | v5)))
  {
    sub_1D44B5FB8();
    sub_1D442FFAC();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1D44B5E40();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = sub_1D44B5F1C();
  sub_1D44AC770(v8, v9);
  if (!v3)
  {
LABEL_11:
    sub_1D42BE8B4();
    *v1 = v2;
    sub_1D42CB084();
    return;
  }
  sub_1D44B5FC4();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1D44B5448(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(_QWORD *)(v3 + 24) >> 1)
  {
    sub_1D44300B4();
    v3 = v6;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_11;
    goto LABEL_13;
  }
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1D44AB5DC(a1 + 32, v2);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *v1 = v3;
    return;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_1D44B5520(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_availableInputs);
  if (!v1)
    return 0;
  v2 = v1;
  sub_1D42E9D88(0, &qword_1EFE55F00);
  v3 = sub_1D451A92C();

  return v3;
}

uint64_t sub_1D44B558C(uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, _QWORD, uint64_t), uint64_t a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  id *v23;
  id v24;
  _BYTE v25[32];

  v12 = result;
  v13 = a3 >> 62;
  if (a3 >> 62)
  {
    sub_1D42CB7B8();
    v14 = sub_1D451B5A4();
    result = sub_1D42BE8B4();
    if (!v14)
      return a3;
  }
  else
  {
    v14 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
      return a3;
  }
  if (v12)
  {
    if (v13)
    {
      sub_1D42CB7B8();
      v15 = sub_1D451B5A4();
      result = sub_1D42BE8B4();
      if (v15 <= a2)
      {
        if (v14 >= 1)
        {
          v16 = (_QWORD *)sub_1D44B6090();
          sub_1D42E33F8(v16, v17);
          v19 = v18;
          sub_1D42CB7B8();
          for (i = 0; i != v14; ++i)
          {
            v21 = sub_1D42B28FC(a6);
            v22 = (void (*)(_BYTE *, _QWORD))a7(v25, i, a3, v21, v19);
            v24 = *v23;
            v22(v25, 0);
            *(_QWORD *)(v12 + 8 * i) = v24;
          }
          sub_1D42BE8B4();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v12);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D44B570C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1D44B01F4();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

void sub_1D44B573C(void **a1)
{
  sub_1D44B039C(*a1);
}

void sub_1D44B575C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D44B5A14(a1, (void (*)(uint64_t, _QWORD))sub_1D43D5F9C, a2);
}

void sub_1D44B5768(void **a1)
{
  sub_1D44B0480(*a1);
}

uint64_t sub_1D44B5788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[72];

  sub_1D430BBB0(a1, (uint64_t)v4, (uint64_t *)&unk_1EFE519A0);
  return sub_1D44B020C((uint64_t)v4, a2);
}

uint64_t sub_1D44B57C8(void **a1)
{
  return sub_1D44B033C(*a1);
}

uint64_t sub_1D44B57D0@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_1D44B0268(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_1D44B5800(void **a1)
{
  sub_1D44B039C(*a1);
}

void sub_1D44B5820()
{
  sub_1D44B012C(&qword_1EFE55D20, (uint64_t)&unk_1EFE55D28, &qword_1EFE55D30);
}

uint64_t sub_1D44B584C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1D44B0274();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

void sub_1D44B5878(void **a1)
{
  sub_1D44B039C(*a1);
}

void sub_1D44B5898()
{
  sub_1D44B012C(&qword_1EFE55B00, (uint64_t)&unk_1EFE55B10, &qword_1EFE55B18);
}

void sub_1D44B58C4(void **a1)
{
  sub_1D44B039C(*a1);
}

uint64_t sub_1D44B58E4@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  v4[2] = a1[2];
  return sub_1D44B0280((uint64_t)v4, a2);
}

uint64_t sub_1D44B5914(void **a1)
{
  return sub_1D44B03D4(*a1);
}

void sub_1D44B591C()
{
  sub_1D44B012C(&qword_1EFE556D8, (uint64_t)&unk_1EFE55CB0, &qword_1EFE556F0);
}

uint64_t sub_1D44B5948()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44B596C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1D44B0DAC(*(void (**)(uint64_t))(v1 + 16), a1);
}

void *sub_1D44B5974@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void *result;
  uint64_t v4;
  char v5;

  result = sub_1D44B02A8(*a1, a1[1]);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  return result;
}

uint64_t sub_1D44B59A8(void **a1)
{
  return sub_1D44B0430(*a1);
}

uint64_t sub_1D44B59B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1D44B0900(*(void (**)(uint64_t))(v1 + 16), a1);
}

unint64_t sub_1D44B59B8()
{
  unint64_t result;

  result = qword_1EFE55D38;
  if (!qword_1EFE55D38)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C8D0, &unk_1E97A41D8);
    atomic_store(result, (unint64_t *)&qword_1EFE55D38);
  }
  return result;
}

uint64_t sub_1D44B59F4(AudioQueuePropertyID inID, void *inData, UInt32 inDataSize)
{
  uint64_t v3;

  return AudioQueueSetProperty(*(AudioQueueRef *)(v3 + 16), inID, inData, inDataSize);
}

void sub_1D44B5A08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D44B5A14(a1, (void (*)(uint64_t, _QWORD))sub_1D43D627C, a2);
}

void sub_1D44B5A14(uint64_t a1@<X0>, void (*a2)(uint64_t, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  char v4;
  char v5;

  *(_QWORD *)a3 = sub_1D44B02DC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), a2);
  *(_BYTE *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 9) = v5 & 1;
  sub_1D42B6E24();
}

void sub_1D44B5A50(void **a1)
{
  sub_1D44B0480(*a1);
}

uint64_t sub_1D44B5A70(void **a1)
{
  return sub_1D44B04B8(*a1);
}

uint64_t sub_1D44B5A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1D42B28FC((uint64_t *)&unk_1EFE40340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D44B5AC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1D44B0AB0(*(void (**)(uint64_t))(v1 + 16), a1);
}

_QWORD *sub_1D44B5AC8(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

_QWORD *sub_1D44B5B1C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void type metadata accessor for AudioDataSourceUtils.ChannelAssignment()
{
  sub_1D42CB35C();
}

void type metadata accessor for AudioDataSourceUtils.DomainError()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44B5B78()
{
  unint64_t result;

  result = qword_1EFE55FC0;
  if (!qword_1EFE55FC0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C7F0, &unk_1E97A41D8);
    atomic_store(result, (unint64_t *)&qword_1EFE55FC0);
  }
  return result;
}

unint64_t sub_1D44B5BB8()
{
  unint64_t result;

  result = qword_1EFE55FC8;
  if (!qword_1EFE55FC8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C818, &unk_1E97A42F8);
    atomic_store(result, (unint64_t *)&qword_1EFE55FC8);
  }
  return result;
}

unint64_t sub_1D44B5BF4()
{
  unint64_t result;

  result = qword_1EFE55FD8;
  if (!qword_1EFE55FD8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C9D4, &type metadata for AudioDataSourceUtils.ChannelAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55FD8);
  }
  return result;
}

uint64_t _s13SoundAnalysis20AudioDataSourceUtilsV17ChannelAssignmentV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D44B5C7C + 4 * byte_1D454C6A3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D44B5CB0 + 4 * byte_1D454C69E[v4]))();
}

uint64_t sub_1D44B5CB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44B5CB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44B5CC0);
  return result;
}

uint64_t sub_1D44B5CCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44B5CD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D44B5CD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44B5CE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioDataSourceUtils.ChannelAssignment.CodingKeys()
{
  return &type metadata for AudioDataSourceUtils.ChannelAssignment.CodingKeys;
}

unint64_t sub_1D44B5D00()
{
  unint64_t result;

  result = qword_1EFE55FE8;
  if (!qword_1EFE55FE8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C9AC, &type metadata for AudioDataSourceUtils.ChannelAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55FE8);
  }
  return result;
}

unint64_t sub_1D44B5D40()
{
  unint64_t result;

  result = qword_1EFE55FF0;
  if (!qword_1EFE55FF0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C91C, &type metadata for AudioDataSourceUtils.ChannelAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55FF0);
  }
  return result;
}

unint64_t sub_1D44B5D80()
{
  unint64_t result;

  result = qword_1EFE55FF8;
  if (!qword_1EFE55FF8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454C944, &type metadata for AudioDataSourceUtils.ChannelAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE55FF8);
  }
  return result;
}

id sub_1D44B5DC8@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  unint64_t v2;

  return sub_1D43EC59C(0xD000000000000017, (a2 - 32) | 0x8000000000000000, 1, 0, a1, v2);
}

uint64_t sub_1D44B5DEC()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = v1;
  return v0(v2 - 88);
}

uint64_t sub_1D44B5E10()
{
  return sub_1D451A350();
}

uint64_t sub_1D44B5E28()
{
  return sub_1D451A308();
}

uint64_t sub_1D44B5E68(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t sub_1D44B5E80()
{
  return sub_1D451A794();
}

uint64_t sub_1D44B5E90()
{
  return sub_1D451A794();
}

uint64_t sub_1D44B5ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
}

uint64_t sub_1D44B5EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1D44B5F10()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1D44B5F1C()
{
  uint64_t v0;

  return v0 + 32;
}

id sub_1D44B5F2C(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;
  uint64_t v11;

  return objc_msgSend(v10, a2, v11, &a10);
}

uint64_t sub_1D44B5F3C()
{
  return sub_1D451A308();
}

uint64_t sub_1D44B5F50()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D44B5F5C()
{
  return sub_1D451B514();
}

void sub_1D44B5F68(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
}

uint64_t sub_1D44B5F7C()
{
  return sub_1D4519AA4();
}

uint64_t sub_1D44B5F88()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D44B5FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void sub_1D44B5FE8(_QWORD *a1)
{
  uint64_t *v1;

  sub_1D42E33F8(a1, v1);
}

uint64_t sub_1D44B5FF0()
{
  uint64_t *v0;

  return sub_1D42B28FC(v0);
}

uint64_t sub_1D44B5FF8()
{
  return sub_1D451A284();
}

uint64_t sub_1D44B6008@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8 * *(_QWORD *)(a1 + 16) + 32;
}

void sub_1D44B6020()
{
  sub_1D44B39AC();
}

uint64_t sub_1D44B6028(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1D44B6030()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1D42DD16C(v0, v1);
}

uint64_t sub_1D44B603C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  return sub_1D44B5A78((uint64_t)va1, (uint64_t)va);
}

uint64_t sub_1D44B6048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  return sub_1D44B5A78((uint64_t)va1, (uint64_t)va);
}

uint64_t sub_1D44B6054()
{
  return sub_1D451A9BC();
}

uint64_t sub_1D44B6060()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1D44B607C()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1D44B6088()
{
  uint64_t *v0;

  return sub_1D42B28FC(v0);
}

uint64_t sub_1D44B6090()
{
  uint64_t v0;

  return v0;
}

void sub_1D44B60C8(uint64_t a1)
{
  sub_1D44B6280(a1);
  sub_1D4334190();
}

uint64_t sub_1D44B60E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(AssociatedTypeWitness, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

void sub_1D44B61B0(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D452B918, a1);
  _s14descr1E97B8181C21ServerEnvironmentImplVMa();
}

void sub_1D44B61F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = MEMORY[0x1D825E41C](&unk_1D452B6AC, a1);
  sub_1D44B6298(v1, v2, v3);
  sub_1D4334190();
}

void sub_1D44B6218(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D4545650, a1);
  type metadata accessor for AudioStreamAnalyzerEnvironmentImpl();
}

void sub_1D44B625C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = MEMORY[0x1D825E41C](&unk_1D454574C, a1);
  sub_1D44B6298(v1, v2, v3);
  sub_1D4334190();
}

uint64_t sub_1D44B6280(uint64_t a1)
{
  return nullsub_1(a1);
}

uint64_t sub_1D44B6298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return sub_1D44B60E8(v3, v4, a3, a1);
}

double SNSignalThresholdResult.timeRange.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = v1 + OBJC_IVAR___SNSignalThresholdResult_impl;
  *(_QWORD *)v3 = *(_QWORD *)a1;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a1 + 16);
  result = *(double *)(a1 + 32);
  *(double *)(v3 + 32) = result;
  *(_QWORD *)(v3 + 40) = v2;
  return result;
}

void sub_1D44B62E4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_1D42B28FC((uint64_t *)&unk_1EFE56028);
  v11 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  v8 = v2[2];
  v9 = v2[3];
  v10 = v2[5];
  sub_1D42B5528(a1, a1[3]);
  sub_1D44B6F90();
  sub_1D451BA24();
  v12 = v7;
  v13 = v2[1];
  v14 = v8;
  v15 = v9;
  v16 = v2[4];
  v17 = v10;
  sub_1D42CA408();
  sub_1D451B760();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v4);
  sub_1D42BE844();
}

void sub_1D44B6404(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_1D42B28FC(&qword_1EFE56010);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D42B5528(a1, a1[3]);
  sub_1D44B6F90();
  sub_1D451BA0C();
  if (!v2)
  {
    sub_1D42CA3CC();
    sub_1D451B688();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v16;
    v10 = v13[1];
    v11 = v15;
    v12 = v14;
    *(_QWORD *)a2 = v13[0];
    *(_QWORD *)(a2 + 8) = v10;
    *(_OWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 32) = v11;
    *(_QWORD *)(a2 + 40) = v9;
  }
  sub_1D42B5400((uint64_t)a1);
  sub_1D42BE844();
}

uint64_t sub_1D44B6530()
{
  sub_1D44B6F90();
  return sub_1D451BA3C();
}

uint64_t sub_1D44B6558()
{
  sub_1D44B6F90();
  return sub_1D451BA48();
}

void sub_1D44B6580(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D44B6404(a1, a2);
}

void sub_1D44B6594(_QWORD *a1)
{
  sub_1D44B62E4(a1);
}

double SNSignalThresholdResult.timeRange.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = v1 + OBJC_IVAR___SNSignalThresholdResult_impl;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 + 16);
  result = *(double *)(v2 + 32);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = v3;
  return result;
}

double (*SNSignalThresholdResult.timeRange.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  SNSignalThresholdResult.timeRange.getter((uint64_t)v3);
  return sub_1D44B66D8;
}

double sub_1D44B66D8(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  double result;

  v1 = *a1;
  v2 = v1[5];
  v3 = v1[6] + OBJC_IVAR___SNSignalThresholdResult_impl;
  v4 = v1[1];
  v5 = v1[4];
  v6 = *((_OWORD *)v1 + 1);
  *(_QWORD *)v3 = *v1;
  *(_QWORD *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 32) = v5;
  *(_QWORD *)(v3 + 40) = v2;
  free(v1);
  return result;
}

id sub_1D44B6714()
{
  char *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  objc_super v6;

  v1 = (objc_class *)sub_1D42B7104();
  v2 = MEMORY[0x1E0CA2E40];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
  v4 = &v0[OBJC_IVAR___SNSignalThresholdResult_impl];
  *(_QWORD *)v4 = *MEMORY[0x1E0CA2E40];
  *((_QWORD *)v4 + 1) = *(_QWORD *)(v2 + 8);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(v2 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(v2 + 32);
  *((_QWORD *)v4 + 5) = v3;
  v6.receiver = v0;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

id sub_1D44B67A0()
{
  uint64_t v0;
  objc_class *v1;
  char *v2;
  uint64_t v3;
  char *v4;
  objc_super v6;

  v2 = (char *)sub_1D42B7238();
  v3 = *(_QWORD *)(v0 + 40);
  v4 = &v2[OBJC_IVAR___SNSignalThresholdResult_impl];
  *(_QWORD *)v4 = *(_QWORD *)v0;
  *((_QWORD *)v4 + 1) = *(_QWORD *)(v0 + 8);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(v0 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(v0 + 32);
  *((_QWORD *)v4 + 5) = v3;
  v6.receiver = v2;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

id SNSignalThresholdResult.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  id result;

  v3 = sub_1D42B7104();
  sub_1D42D83C4(v1 + OBJC_IVAR___SNSignalThresholdResult_impl);
  result = sub_1D44B67A0();
  a1[3] = v3;
  *a1 = result;
  return result;
}

void SNSignalThresholdResult.hash.getter()
{
  sub_1D42BE9A8();
  sub_1D42CB950();
  sub_1D42D8408();
  sub_1D42CB47C();
  sub_1D42D83F4();
  sub_1D42CB904();
  sub_1D42CB8EC();
  sub_1D42D83EC();
  sub_1D42CB8E4();
  sub_1D451B994();
  sub_1D42CB414();
}

BOOL SNSignalThresholdResult.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  __int128 v29;
  uint64_t v30;

  sub_1D42B7104();
  sub_1D42B28B4(a1, (uint64_t)&v29);
  if (v30)
  {
    sub_1D42B293C(&v29, v28);
    sub_1D42B294C((uint64_t)v28, (uint64_t)v24);
    if (swift_dynamicCast())
    {
      v3 = v18;
      v4 = *(_QWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl + 40);
      v5 = (uint64_t)&v18[OBJC_IVAR___SNSignalThresholdResult_impl];
      v6 = *(_QWORD *)&v18[OBJC_IVAR___SNSignalThresholdResult_impl];
      v24[0] = *(_QWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl);
      v24[1] = *(_QWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl + 8);
      v25 = *(_OWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl + 16);
      v26 = *(_QWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl + 32);
      v27 = v4;
      v19 = v6;
      sub_1D42D83C4(v5);
      v16 = sub_1D42D83FC(v7, v8, v9, v10, v11, v12, v13, v14, v19, v20, v21, v22, v23, v15, v24[0]);

    }
    else
    {
      v16 = 0;
    }
    sub_1D42B5400((uint64_t)v28);
  }
  else
  {
    return 0;
  }
  return v16;
}

id SNSignalThresholdResult.__allocating_init(coder:)()
{
  void *v0;

  sub_1D42B7238();
  return SNSignalThresholdResult.init(coder:)(v0);
}

id SNSignalThresholdResult.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  id v4;

  v3 = v1;
  sub_1D42B2340(1819307369, 0xE400000000000000, a1);
  swift_getObjectType();

  v4 = sub_1D44B67A0();
  sub_1D42D83E0();
  return v4;
}

Swift::Void __swiftcall SNSignalThresholdResult.encode(with:)(NSCoder with)
{
  uint64_t v1;
  __int128 v2;
  _OWORD v3[3];

  v2 = *(_OWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl + 16);
  v3[0] = *(_OWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl);
  v3[1] = v2;
  v3[2] = *(_OWORD *)(v1 + OBJC_IVAR___SNSignalThresholdResult_impl + 32);
  sub_1D42B0B54((uint64_t)v3, 1819307369, 0xE400000000000000, (uint64_t)with.super.isa);
}

uint64_t static SNSignalThresholdResult.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t SNSignalThresholdResult.description.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v12[6];
  objc_super v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[6];

  v13.receiver = v0;
  v13.super_class = (Class)sub_1D42B7104();
  v3 = objc_msgSendSuper2(&v13, sel_description);
  sub_1D451A6EC();
  sub_1D42B722C();
  v14 = v1;
  v15 = v2;
  sub_1D451A794();
  SNSignalThresholdResult.timeRange.getter((uint64_t)v16);
  v4 = v16[0];
  v5 = v16[2];
  v6 = v16[3];
  v7 = v16[5];
  v8 = (void *)objc_opt_self();
  v12[0] = v4;
  v12[1] = v16[1];
  v12[2] = v5;
  v12[3] = v6;
  v12[4] = v16[4];
  v12[5] = v7;
  v9 = objc_msgSend(v8, sel_valueWithCMTimeRange_, v12);
  v10 = objc_msgSend(v9, sel_description);
  sub_1D451A6EC();
  sub_1D42B722C();
  sub_1D451A794();

  swift_bridgeObjectRelease();
  return v14;
}

id SNSignalThresholdResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_1D42B7104();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

double sub_1D44B6ED4@<D0>(uint64_t a1@<X8>)
{
  return SNSignalThresholdResult.timeRange.getter(a1);
}

double sub_1D44B6EF4(uint64_t a1)
{
  return SNSignalThresholdResult.timeRange.setter(a1);
}

uint64_t type metadata accessor for SNSignalThresholdResult()
{
  return objc_opt_self();
}

uint64_t method lookup function for SNSignalThresholdResult()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for SignalThresholdResult()
{
  return &type metadata for SignalThresholdResult;
}

unint64_t sub_1D44B6F54()
{
  unint64_t result;

  result = qword_1EFE56008;
  if (!qword_1EFE56008)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454CAC8, &type metadata for SignalThresholdResult);
    atomic_store(result, (unint64_t *)&qword_1EFE56008);
  }
  return result;
}

unint64_t sub_1D44B6F90()
{
  unint64_t result;

  result = qword_1EFE56018;
  if (!qword_1EFE56018)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454CC44, &type metadata for SignalThresholdResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56018);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SignalThresholdResult.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D44B700C + 4 * asc_1D454CA60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D44B702C + 4 * byte_1D454CA65[v4]))();
}

_BYTE *sub_1D44B700C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D44B702C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44B7034(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44B703C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44B7044(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44B704C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SignalThresholdResult.CodingKeys()
{
  return &type metadata for SignalThresholdResult.CodingKeys;
}

unint64_t sub_1D44B706C()
{
  unint64_t result;

  result = qword_1EFE56038;
  if (!qword_1EFE56038)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454CC1C, &type metadata for SignalThresholdResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56038);
  }
  return result;
}

unint64_t sub_1D44B70AC()
{
  unint64_t result;

  result = qword_1EFE56040;
  if (!qword_1EFE56040)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454CB8C, &type metadata for SignalThresholdResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56040);
  }
  return result;
}

unint64_t sub_1D44B70EC()
{
  unint64_t result;

  result = qword_1EFE56048;
  if (!qword_1EFE56048)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454CBB4, &type metadata for SignalThresholdResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56048);
  }
  return result;
}

uint64_t sub_1D44B7128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if ((sub_1D451A698() & 1) == 0)
    return 0;
  type metadata accessor for KVPair(0, a3, a4, v6);
  return sub_1D451A698() & 1;
}

uint64_t sub_1D44B71A8()
{
  sub_1D451A614();
  return sub_1D451A614();
}

uint64_t sub_1D44B71F4()
{
  sub_1D451B958();
  sub_1D44B71A8();
  return sub_1D451B994();
}

void sub_1D44B7250(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[6];
  char v17;
  char v18;

  v16[4] = a4;
  v16[2] = a6;
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v16[0] = a2;
  v16[1] = v8;
  v10 = type metadata accessor for KVPair.CodingKeys(255, v9, v8, a4);
  MEMORY[0x1D825E41C](&unk_1D454CFC0, v10);
  v11 = sub_1D451B7A8();
  sub_1D44B82D0();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v16 - v13;
  sub_1D42B5528(a1, a1[3]);
  sub_1D451BA24();
  v18 = 0;
  v15 = v16[5];
  sub_1D451B760();
  if (!v15)
  {
    v17 = 1;
    sub_1D451B760();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v11);
  sub_1D42BE844();
}

void sub_1D44B7384(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;

  v33 = a6;
  v34 = a5;
  v39 = a4;
  v32 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  sub_1D42BE768();
  v37 = v10;
  v36 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v12);
  sub_1D42BE768();
  v40 = v13;
  v17 = type metadata accessor for KVPair.CodingKeys(255, v14, v15, v16);
  MEMORY[0x1D825E41C](&unk_1D454CFC0, v17);
  v43 = sub_1D451B6E8();
  v35 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v19 = (char *)&v31 - v18;
  v41 = a2;
  v38 = a3;
  v21 = type metadata accessor for KVPair(0, a2, a3, v20);
  sub_1D44B82D0();
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v31 - v23;
  sub_1D42B5528(a1, a1[3]);
  v42 = v19;
  v25 = v44;
  sub_1D451BA0C();
  if (v25)
  {
    sub_1D441987C();
  }
  else
  {
    v26 = v36;
    v44 = v6;
    v27 = v24;
    v28 = v37;
    v29 = v38;
    v46 = 0;
    sub_1D451B688();
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v27, v40, v41);
    v45 = 1;
    sub_1D451B688();
    sub_1D44B82B8();
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(&v27[*(int *)(v21 + 36)], v28, v29);
    v30 = v44;
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v33, v27, v21);
    sub_1D441987C();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v21);
  }
  sub_1D42BE844();
}

BOOL sub_1D44B75E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1D42BA51C(*a1, *a2);
}

uint64_t sub_1D44B75F4()
{
  return sub_1D42BA644();
}

uint64_t sub_1D44B7604()
{
  return sub_1D42BA52C();
}

uint64_t sub_1D44B7614()
{
  sub_1D451B958();
  sub_1D42BA52C();
  return sub_1D451B994();
}

uint64_t sub_1D44B7658()
{
  char *v0;

  return sub_1D42FCE6C(*v0);
}

uint64_t sub_1D44B7668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D42FCD98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44B7694()
{
  return sub_1D42BA688();
}

uint64_t sub_1D44B76B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D42BA63C();
  *a1 = result;
  return result;
}

uint64_t sub_1D44B76E4(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D454CFC0, a1);
  return sub_1D451BA3C();
}

uint64_t sub_1D44B7718(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D454CFC0, a1);
  return sub_1D451BA48();
}

uint64_t sub_1D44B774C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D44B7128(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_1D44B775C()
{
  return sub_1D44B71F4();
}

uint64_t sub_1D44B7768()
{
  return sub_1D44B71A8();
}

uint64_t sub_1D44B7774()
{
  sub_1D451B958();
  sub_1D44B71A8();
  return sub_1D451B994();
}

void sub_1D44B77C8(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1D44B7384(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

void sub_1D44B77EC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1D44B7250(a1, a2, a3, *(_QWORD *)(a3 - 16), a5, *(_QWORD *)(a3 - 32));
}

uint64_t sub_1D44B7808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;

  sub_1D447DE84();
  v18 = *(_QWORD *)(a2 + 16);
  v9 = v18;
  v19 = a3;
  v10 = sub_1D430BBF0(v17);
  v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v10, v4, v9);
  sub_1D43C2470(v11);
  if (!v5)
  {
    sub_1D42B5400((uint64_t)v17);
    v12 = v4 + *(int *)(a2 + 36);
    v13 = *(_QWORD *)(a2 + 24);
    v18 = v13;
    v19 = a4;
    v14 = sub_1D430BBF0(v17);
    v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v14, v12, v13);
    sub_1D43C2470(v15);
  }
  swift_release();
  return sub_1D42B5400((uint64_t)v17);
}

uint64_t sub_1D44B78E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D44B7808(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t sub_1D44B78FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v8;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(_QWORD *)(a4 - 8);
  v6[9] = sub_1D42F9B80();
  v6[10] = *(_QWORD *)(a3 - 8);
  v6[11] = sub_1D42F9B80();
  v8 = (_QWORD *)swift_task_alloc();
  v6[12] = v8;
  *v8 = v6;
  v8[1] = sub_1D44B7978;
  return sub_1D4376978();
}

uint64_t sub_1D44B7978(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  _QWORD *v5;

  v3 = *v2;
  v3[13] = a1;
  v3[14] = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v5 = (_QWORD *)swift_task_alloc();
  v3[15] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = sub_1D44B7A28;
  return sub_1D4376B14(v3[11], v3[4], v3[4], v3[6]);
}

uint64_t sub_1D44B7A28()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1D42B8E20();
  *v2 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  swift_task_dealloc();
  return sub_1D42B8DA8();
}

uint64_t sub_1D44B7A7C()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 32))(v0[2], v0[11], v0[4]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[17] = v1;
  *v1 = v0;
  v1[1] = sub_1D44B7AEC;
  return sub_1D4376B14(v0[9], v0[5], v0[5], v0[7]);
}

uint64_t sub_1D44B7AEC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1D42B8E20();
  *v2 = *v1;
  *(_QWORD *)(v3 + 144) = v0;
  swift_task_dealloc();
  return sub_1D42B8DA8();
}

uint64_t sub_1D44B7B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 16);
  swift_release();
  sub_1D42B8F48();
  v7 = type metadata accessor for KVPair(0, v4, v3, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v5 + *(int *)(v7 + 36), v1, v3);
  sub_1D42E3E54();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D44B7BD4()
{
  uint64_t v0;

  swift_release();
  sub_1D44B82C4();
  sub_1D42E3E54();
  return sub_1D42B8ED4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1D44B7C0C()
{
  uint64_t v0;

  swift_release();
  sub_1D42B8F48();
  sub_1D44B82C4();
  sub_1D42E3E54();
  return sub_1D42B8ED4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1D44B7C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  swift_release();
  sub_1D42B8F48();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  sub_1D44B82C4();
  sub_1D42E3E54();
  return sub_1D42B8ED4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1D44B7CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  swift_retain();
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_1D44B7D48;
  return sub_1D44B78FC(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1D44B7D48()
{
  uint64_t *v0;
  uint64_t v2;

  sub_1D42B8E20();
  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1D44B7D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(a4 - 16);
  v8 = *(_QWORD *)(a4 - 8);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 24);
  *v10 = v4;
  v10[1] = sub_1D44B82B4;
  return sub_1D44B7CAC(a1, a2, v11, v12, v8, v9);
}

uint64_t sub_1D44B7E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  v5[0] = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  v5[1] = v3;
  return MEMORY[0x1D825E41C](&unk_1D454CE5C, a1, v5);
}

uint64_t type metadata accessor for KVPair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D42B8D20(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KVPair);
}

uint64_t type metadata accessor for KVPair.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D42B8D20(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KVPair.CodingKeys);
}

uint64_t sub_1D44B7E58(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D44B7EA4 + 4 * byte_1D454CC9D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D44B7ED8 + 4 * byte_1D454CC98[v4]))();
}

uint64_t sub_1D44B7ED8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44B7EE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44B7EE8);
  return result;
}

uint64_t sub_1D44B7EF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44B7EFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D44B7F00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44B7F08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44B7F14(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v6 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = v12 + v13;
  v15 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_23;
  v16 = (v14 & ~v13) + *(_QWORD *)(v9 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v19 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v8 >= v10)
        {
          v10 = v8;
        }
        else
        {
          a1 = (v14 + a1) & ~v13;
          v5 = v6;
        }
        return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(a1, v10, v5);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_23;
LABEL_14:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if (!(_DWORD)v16)
    return v11 + v20 + 1;
  if (v16 <= 3)
    v21 = v16;
  else
    v21 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1D44B7FF0 + 4 * byte_1D454CCA2[v21 - 1]))();
}

void sub_1D44B8064(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = 8 * v8;
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << v9)) >> v9) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v13 = v11 & ~(-1 << v9);
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_1D44B8258(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1D825E41C](&unk_1D454CED0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1D44B8284()
{
  JUMPOUT(0x1D825E41CLL);
}

void sub_1D44B8294()
{
  JUMPOUT(0x1D825E41CLL);
}

void sub_1D44B82A4()
{
  JUMPOUT(0x1D825E41CLL);
}

uint64_t sub_1D44B82B8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96));
}

uint64_t sub_1D44B82C4()
{
  return swift_task_dealloc();
}

uint64_t sub_1D44B82E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *a1;
  v11 = *a2;
  v18 = a2[1];
  v19 = v11;
  swift_bridgeObjectRetain();
  v12 = sub_1D4405A98(a3, a4, &v19, &v18, v10);
  if (v5)
    return swift_bridgeObjectRelease();
  v15 = v12;
  v16 = v13;
  result = swift_bridgeObjectRelease();
  v17 = v18;
  *a2 = v19;
  a2[1] = v17;
  *a5 = v15;
  a5[1] = v16;
  return result;
}

uint64_t sub_1D44B8384@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(result + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1D42C73B0();
    v6 = v8;
    v7 = *(_QWORD *)(v8 + 16);
    do
    {
      if (v7 >= *(_QWORD *)(v8 + 24) >> 1)
        sub_1D42C73B0();
      *(_QWORD *)(v8 + 16) = v7 + 1;
      *(_QWORD *)(v8 + 8 * v7++ + 32) = 0;
      --v5;
    }
    while (v5);
    result = swift_bridgeObjectRelease();
  }
  *a3 = v6;
  a3[1] = a2;
  return result;
}

void *sub_1D44B8460()
{
  uint64_t v0;
  void *v1;

  v0 = sub_1D451A734();
  v1 = dlopen((const char *)(v0 + 32), 1);
  swift_release();
  if (!v1)
  {
    type metadata accessor for SNError();
    sub_1D451B400();
    swift_bridgeObjectRelease();
    sub_1D451A794();
    sub_1D451A794();
    sub_1D43EC59C(0xD000000000000017, 0x80000001D4551120, 1, 0, 0xD000000000000020, 0x80000001D455B320);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v1;
}

uint64_t (*sub_1D44B8574(void *a1))()
{
  void *v1;

  v1 = dlsym(a1, "RegisterAudioUnits_InternalUnsearchable");
  if (!v1)
    return (uint64_t (*)())nullsub_1;
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return sub_1D44B8660;
}

uint64_t sub_1D44B85D4()
{
  void *v0;
  uint64_t (*v1)();
  uint64_t result;

  v0 = sub_1D44B8460();
  v1 = sub_1D44B8574(v0);
  v1();
  result = swift_release();
  byte_1EFE403B0 = 1;
  return result;
}

uint64_t sub_1D44B8650()
{
  return swift_deallocObject();
}

uint64_t sub_1D44B8660()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D44B8668()
{
  sub_1D44BB150();
  sub_1D42BE9A8();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B97C();
  return sub_1D42CB230();
}

uint64_t sub_1D44B8728(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_1D42B28FC(&qword_1EFE561E8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB210();
  v6 = v5 - v4;
  sub_1D42B5528(a1, a1[3]);
  sub_1D44BAB90();
  sub_1D451BA24();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
}

void sub_1D44B87E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_1D42BE910();
  v3 = v2;
  sub_1D42B28FC(&qword_1EFE56268);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v4);
  sub_1D42CB18C();
  sub_1D42B5528(v3, v3[3]);
  sub_1D44BAF00();
  sub_1D42CB10C();
  sub_1D42B5684();
  sub_1D42CB068();
  if (!v0)
  {
    sub_1D42B5ACC();
    sub_1D42CB068();
  }
  sub_1D42BE98C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1D42F1F94();
  sub_1D42BE844();
}

void sub_1D44B896C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;

  sub_1D42BE910();
  v2 = v1;
  v4 = v3;
  v5 = sub_1D42B28FC(&qword_1EFE56278);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42B5528(v2, v2[3]);
  sub_1D44BAF00();
  sub_1D42F8648();
  if (!v0)
  {
    LOBYTE(v6) = 0;
    sub_1D42B56C0();
    sub_1D44BB13C();
    sub_1D42B5B80();
    sub_1D44BB13C();
    sub_1D42F8674();
    *(_OWORD *)v4 = v6;
    *(_QWORD *)(v4 + 16) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    *(_OWORD *)(v4 + 32) = v9;
    *(_BYTE *)(v4 + 48) = v10;
    *(_BYTE *)(v4 + 49) = v11;
    *(_BYTE *)(v4 + 50) = v12;
    *(_BYTE *)(v4 + 51) = v13;
    *(_BYTE *)(v4 + 52) = v14;
    *(_BYTE *)(v4 + 53) = v15;
    *(_QWORD *)(v4 + 56) = v16;
    *(_BYTE *)(v4 + 64) = v17;
  }
  sub_1D42B5400((uint64_t)v2);
  sub_1D42F1F94();
  sub_1D42BE844();
}

uint64_t sub_1D44B8AD0()
{
  sub_1D44BB150();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  return sub_1D451B97C();
}

uint64_t sub_1D44B8B60(float *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)a1;
  v3 = *((_QWORD *)a1 + 5);
  v4 = a1[12];
  v5 = *(_QWORD *)a2;
  v6 = a2[12];
  v11 = *((_QWORD *)a2 + 5);
  v12[0] = v2;
  v12[1] = *((_QWORD *)a1 + 1);
  v13 = *((_OWORD *)a1 + 1);
  v14 = *((_QWORD *)a1 + 4);
  v15 = v3;
  v8[0] = v5;
  v8[1] = *((_QWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 1);
  v10 = *((_QWORD *)a2 + 4);
  return static TimeRange.== infix(_:_:)((uint64_t)v12, (uint64_t)v8) & (v4 == v6);
}

uint64_t sub_1D44B8BEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x676E6152656D6974 && a2 == 0xE900000000000065;
  if (v2 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4C6C656269636564 && a2 == 0xEC0000006C657665)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1D451B820();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D44B8CFC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4C6C656269636564;
  else
    return 0x676E6152656D6974;
}

void sub_1D44B8D40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(sub_1D42B28FC((uint64_t *)&unk_1EFE56210) - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB18C();
  sub_1D42B5528(a1, a1[3]);
  sub_1D44BABCC();
  sub_1D42CB10C();
  sub_1D42CA408();
  sub_1D451B760();
  if (!v3)
    sub_1D451B748();
  sub_1D42BE98C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1D42F1F94();
}

uint64_t sub_1D44B8E80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = sub_1D42B28FC(&qword_1EFE561F8);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42B5528(a1, a1[3]);
  sub_1D44BABCC();
  sub_1D42F8648();
  if (!v2)
  {
    sub_1D42CA3CC();
    sub_1D451B688();
    sub_1D451B670();
    v7 = v6;
    sub_1D42CB3CC();
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 40) = v14;
    *(_DWORD *)(a2 + 48) = v7;
  }
  return sub_1D42B5400((uint64_t)a1);
}

uint64_t sub_1D44B9004()
{
  sub_1D44BAB90();
  return sub_1D451BA3C();
}

uint64_t sub_1D44B902C()
{
  sub_1D44BAB90();
  return sub_1D451BA48();
}

uint64_t sub_1D44B9054(_QWORD *a1)
{
  return sub_1D44B8728(a1);
}

uint64_t sub_1D44B9068()
{
  sub_1D44BAF00();
  return sub_1D451BA3C();
}

uint64_t sub_1D44B9090()
{
  sub_1D44BAF00();
  return sub_1D451BA48();
}

void sub_1D44B90B8()
{
  sub_1D44B896C();
}

void sub_1D44B90CC()
{
  sub_1D44B87E4();
}

uint64_t sub_1D44B90E0()
{
  char *v0;

  return sub_1D44B8CFC(*v0);
}

uint64_t sub_1D44B90E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44B8BEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44B910C()
{
  sub_1D44BABCC();
  return sub_1D451BA3C();
}

uint64_t sub_1D44B9134()
{
  sub_1D44BABCC();
  return sub_1D451BA48();
}

uint64_t sub_1D44B9164()
{
  sub_1D451B958();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B97C();
  return sub_1D451B994();
}

uint64_t sub_1D44B923C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D44B8E80(a1, a2);
}

void sub_1D44B9250(_QWORD *a1)
{
  sub_1D44B8D40(a1);
}

uint64_t sub_1D44B9268(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1D44B92B4;
  return sub_1D43768A8();
}

uint64_t sub_1D44B92B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v6)(void);

  sub_1D42F1E44();
  v2[4] = v0;
  v2[5] = v1;
  swift_task_dealloc();
  if (v1)
    return sub_1D42F1DEC();
  v6 = (uint64_t (*)(void))((char *)&dword_1EFE4E278 + dword_1EFE4E278);
  v5 = (_QWORD *)swift_task_alloc();
  v2[6] = v5;
  *v5 = v3;
  v5[1] = sub_1D42EC5A0;
  return sub_1D42E3A2C(v6);
}

uint64_t sub_1D44B9334(uint64_t a1, uint64_t a2)
{
  _QWORD v4[5];

  sub_1D447DAC4();
  v4[3] = sub_1D42B28FC(&qword_1EFE4FD60);
  v4[4] = sub_1D44BAE9C();
  v4[0] = a2;
  swift_retain();
  sub_1D447DAE0(v4);
  swift_release();
  return sub_1D42B5400((uint64_t)v4);
}

uint64_t sub_1D44B93B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1D42EC778;
  return sub_1D44B9268(a1);
}

uint64_t sub_1D44B940C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1D44B9334(a1, *v1);
}

uint64_t sub_1D44B9424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_1D42EC834;
  return sub_1D44B93B8(a2);
}

id sub_1D44B9474@<X0>(_QWORD *a1@<X8>)
{
  id result;

  type metadata accessor for SNLKFSResult();
  result = sub_1D42ABA44();
  *a1 = result;
  return result;
}

void sub_1D44B9504()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  __int128 v14[3];
  _BYTE v15[80];

  sub_1D42BE910();
  v3 = v2;
  v5 = v4;
  sub_1D42B28FC(&qword_1EFE56178);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v6);
  sub_1D42CB18C();
  sub_1D44BB134(v15, v5);
  v7 = v3[3];
  v8 = v3[4];
  v9 = sub_1D42B5528(v3, v7);
  sub_1D44BB134(v14, v5);
  v10 = sub_1D44BB168();
  v13[2] = v15;
  sub_1D42B5B38((uint64_t)v15);
  sub_1D43CC6C0((uint64_t)v9, v14, v10, sub_1D44BA9D8, (uint64_t)v13, v7, v10, v8);
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    *(_QWORD *)&v14[0] = v12;
    sub_1D42B28FC(&qword_1EFE56180);
    sub_1D42BE210(&qword_1EFE56188, &qword_1EFE56180, MEMORY[0x1E0C95D90]);
    sub_1D451A308();
    swift_release();
    sub_1D42BE210((unint64_t *)&unk_1EFE56190, &qword_1EFE56178, MEMORY[0x1E0C95950]);
    sub_1D451A2E4();
    sub_1D42BE98C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  sub_1D42F1F94();
  sub_1D42BE844();
}

void sub_1D44B9690()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26[2];
  _BYTE v27[72];

  sub_1D42BE910();
  v1 = v0;
  v3 = v2;
  v4 = sub_1D42B28FC(&qword_1EFE568A0);
  v21 = *(_QWORD *)(v4 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v5);
  sub_1D42CB210();
  v8 = v7 - v6;
  v22 = sub_1D42B28FC(&qword_1EFE561A0);
  v24 = *(_QWORD *)(v22 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v9);
  sub_1D42CB210();
  v12 = v11 - v10;
  v23 = sub_1D42B28FC((uint64_t *)&unk_1EFE561A8);
  v25 = *(_QWORD *)(v23 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v13);
  sub_1D42CB210();
  v16 = v15 - v14;
  sub_1D44BB134(v27, v3);
  v17 = sub_1D42B6F40();
  sub_1D44BB134((void *)(v17 + 16), v3);
  sub_1D42E2D8C(v1, (uint64_t)v26);
  v18 = sub_1D42B6F40();
  sub_1D42E33E0(v26, v18 + 16);
  sub_1D44BB134((void *)(v18 + 56), v27);
  v19 = (_QWORD *)sub_1D42B6F40();
  v19[2] = sub_1D44BAA24;
  v19[3] = v17;
  v19[4] = sub_1D44BAA78;
  v19[5] = v18;
  v20 = sub_1D42B6F40();
  *(_QWORD *)(v20 + 16) = sub_1D42F0F18;
  *(_QWORD *)(v20 + 24) = v19;
  sub_1D42B5B38((uint64_t)v27);
  sub_1D42B5B38((uint64_t)v27);
  swift_retain();
  swift_retain();
  sub_1D42B28FC((uint64_t *)&unk_1EFE4A6A0);
  sub_1D42BE210(qword_1EFE568C0, (uint64_t *)&unk_1EFE4A6A0, (uint64_t)&unk_1D4532BA0);
  sub_1D451A2C0();
  sub_1D44BB168();
  sub_1D42BE210(&qword_1EFE4A6B0, &qword_1EFE568A0, MEMORY[0x1E0C96148]);
  sub_1D451A3A4();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v8, v4);
  swift_release();
  swift_release();
  sub_1D42BE210(&qword_1EFE561B8, &qword_1EFE561A0, MEMORY[0x1E0C95B48]);
  sub_1D451A308();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v12, v22);
  sub_1D42BE210(&qword_1EFE561C0, (uint64_t *)&unk_1EFE561A8, MEMORY[0x1E0C95950]);
  sub_1D451A2E4();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v16, v23);
  sub_1D42BE844();
}

uint64_t sub_1D44B9988()
{
  objc_class *v0;
  id v1;
  uint64_t v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for SNMeasureLKFSRequest();
  v4.receiver = objc_allocWithZone(v0);
  v4.super_class = v0;
  v1 = objc_msgSendSuper2(&v4, sel_init);
  v2 = sub_1D44B99FC();

  return v2;
}

uint64_t sub_1D44B99FC()
{
  uint64_t result;

  if (qword_1EFE403C0 != -1)
    swift_once();
  if ((byte_1EFE403B0 & 1) != 0)
  {
    type metadata accessor for SNAudioLevelMeasurer();
    result = sub_1D42B6F40();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  else
  {
    type metadata accessor for SNError();
    sub_1D43EC59C(0xD000000000000017, 0x80000001D4551120, 1, 0, 0xD00000000000001ALL, 0x80000001D4551C80);
    return sub_1D4312028();
  }
  return result;
}

id sub_1D44B9AC4()
{
  objc_class *v0;
  objc_super v2;

  v0 = (objc_class *)type metadata accessor for SNMeasureLKFSRequest();
  v2.receiver = objc_allocWithZone(v0);
  v2.super_class = v0;
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t sub_1D44B9B0C@<X0>(_QWORD *a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE __dst[72];

  v6 = a1[3];
  v7 = a1[4];
  sub_1D42B5528(a1, v6);
  memcpy(__dst, a2, 0x41uLL);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 8))(__dst, v6, v7);
  if (!v3)
    *a3 = result;
  return result;
}

float sub_1D44B9B8C@<S0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  float result;

  v2 = *a1 + OBJC_IVAR___SNLKFSResult_impl;
  v3 = *(_QWORD *)(v2 + 40);
  result = *(float *)(v2 + 48);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(a2 + 40) = v3;
  *(float *)(a2 + 48) = result;
  return result;
}

id SNMeasureLKFSRequest.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  objc_class *ObjectType;
  id result;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  v4.receiver = objc_allocWithZone(ObjectType);
  v4.super_class = ObjectType;
  result = objc_msgSendSuper2(&v4, sel_init);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

void SNMeasureLKFSRequest.hash.getter()
{
  sub_1D42BE9A8();
  sub_1D42CB230();
  sub_1D42BE978();
}

uint64_t SNMeasureLKFSRequest.isEqual(_:)(uint64_t a1)
{
  uint64_t v2;
  void *v4;
  _BYTE v5[32];
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1D42B7104();
  sub_1D42B28B4(a1, (uint64_t)&v7);
  if (!v8)
    return 0;
  sub_1D42B293C(&v7, v6);
  sub_1D42B294C((uint64_t)v6, (uint64_t)v5);
  v2 = swift_dynamicCast();
  if ((_DWORD)v2)

  sub_1D42B5400((uint64_t)v6);
  return v2;
}

id SNMeasureLKFSRequest.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SNMeasureLKFSRequest.init(coder:)(a1);
}

id SNMeasureLKFSRequest.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v2 = v1;
  v4 = (objc_class *)sub_1D42CFC30();
  v5 = v2;
  v6 = sub_1D42F3A74();
  sub_1D42B24A4(v6, v7, (uint64_t)a1);

  v10.receiver = objc_allocWithZone(v4);
  v10.super_class = v4;
  v8 = objc_msgSendSuper2(&v10, sel_init);

  sub_1D42CFC30();
  sub_1D42F3A54();
  return v8;
}

Swift::Void __swiftcall SNMeasureLKFSRequest.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1D42F3A74();
  sub_1D42B0BA8(v2, v3, v1);
}

uint64_t static SNMeasureLKFSRequest.supportsSecureCoding.getter()
{
  return 1;
}

id SNMeasureLKFSRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_1D42B7104();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D44B9FE0()
{
  return sub_1D44B99FC();
}

uint64_t type metadata accessor for SNMeasureLKFSRequest()
{
  return objc_opt_self();
}

uint64_t method lookup function for SNMeasureLKFSRequest()
{
  return swift_lookUpClassMethod();
}

id sub_1D44BA020(double a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  id v30;
  _BYTE *v31;
  id v32;
  id v33;
  id v34;
  id v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = objc_opt_self();
  *(_QWORD *)&v37 = 0;
  v4 = sub_1D45001AC(v3, (uint64_t)&v37);
  if (!v4)
  {
    v14 = (id)v37;
    sub_1D4519AA4();

    sub_1D42F1DA8();
    return v4;
  }
  v5 = (id)v37;
  v6 = (void *)sub_1D451A6C8();
  *(_QWORD *)&v37 = 0;
  v7 = sub_1D44FD014(v3, v4, v6, (uint64_t)&v37);

  if (!v7)
  {
    v15 = (id)v37;
    sub_1D4519AA4();

    sub_1D42F1DA8();
    goto LABEL_27;
  }
  v8 = (id)v37;
  v9 = (void *)sub_1D451A6C8();
  *(_QWORD *)&v37 = 0;
  v10 = sub_1D44FD534(v3, v4, v9, 1, (uint64_t)&v37);

  if (!v10)
  {
    v16 = (id)v37;
    sub_1D4519AA4();

    sub_1D42F1DA8();
    goto LABEL_27;
  }
  v11 = (id)v37;
  v12 = (void *)sub_1D44BB0F8();
  v13 = sub_1D444323C(0x6D6C7073uLL, 0xE400000000000000);
  if (v1)
  {

LABEL_6:
LABEL_27:

    return v4;
  }
  v36 = 0;
  LODWORD(v37) = 1635083896;
  DWORD1(v37) = v13;
  *((_QWORD *)&v37 + 1) = 1634758764;
  v38 = 0;
  v17 = sub_1D44FEB74(v3, v4, v12, 1, 1, &v37, (uint64_t)&v36);

  if (!v17)
  {
    v32 = v36;
    sub_1D4519AA4();

    sub_1D42F1DA8();
    goto LABEL_6;
  }
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (a1 <= -1.0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a1 >= 4294967300.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  sub_1D44BB11C((uint64_t)v36);
  v18 = sub_1D44BB0C8();
  if (!sub_1D42F1E90(v18, v19, v7, v17, v20, v21, v22, v23))
  {
    v33 = v36;
    sub_1D4519AA4();

LABEL_26:
    sub_1D42F1DA8();

    goto LABEL_27;
  }
  sub_1D44BB11C((uint64_t)v36);
  v24 = sub_1D44BB0C8();
  if (!sub_1D42F1E90(v24, v25, v17, v10, v26, v27, v28, v29))
  {
    v34 = v36;
    sub_1D4519AA4();

    goto LABEL_26;
  }
  if (a1 <= -9.22337204e18)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  if (a1 >= 9.22337204e18)
    goto LABEL_33;
  v30 = v36;
  sub_1D44F3DE8((uint64_t)v4);
  sub_1D44F44A0((uint64_t)v4);
  if (!sub_1D43072C8((uint64_t)v17)
    || (sub_1D43072C8((uint64_t)v17) & 1) == 0
    || (sub_1D43072C8((uint64_t)v17) & 1) == 0)
  {
    sub_1D42CF6E8();
    sub_1D42B6D0C();
    *v31 = 5;
    sub_1D4312028();

  }
  return v4;
}

int64_t sub_1D44BA3FC(void *a1, int64_t a2, void (*a3)(void), int64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  int64_t v12;
  int32_t v13;
  CMTimeValue value;
  uint64_t v15;
  CMTimeEpoch epoch;
  int32_t v17;
  CMTimeValue v18;
  CMTimeEpoch v19;
  objc_class *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  id v27;
  CMTimeValue v29;
  CMTimeRange v31;
  CMTime duration;
  CMTime start;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  CMTimeRange v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = objc_opt_self();
  v31.start.value = 0;
  v9 = sub_1D4500E1C(v8, a1, (uint64_t)&v31);
  if (!v9)
  {
    v27 = (id)v31.start.value;
    sub_1D4519AA4();

    swift_willThrow();
    return a2;
  }
  v10 = v9;
  v11 = (id)v31.start.value;
  v12 = sub_1D451B928();
  v13 = sub_1D44F2078((uint64_t)a1);
  if (v13 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
  }
  CMTimeMake(&v31.start, v12, v13);
  value = v31.start.value;
  v15 = *(_QWORD *)&v31.start.timescale;
  epoch = v31.start.epoch;
  v17 = sub_1D44F2078((uint64_t)a1);
  if (v17 < 0)
    goto LABEL_12;
  CMTimeMake(&v31.start, a2, v17);
  v18 = v31.start.value;
  v19 = v31.start.epoch;
  v20 = (objc_class *)sub_1D44BB168();
  v21 = *(_QWORD *)&v31.start.timescale;
  v22 = (char *)objc_msgSend(objc_allocWithZone(v20), sel_init);
  duration.epoch = v19;
  start.value = value;
  *(_QWORD *)&start.timescale = v15;
  start.epoch = epoch;
  duration.value = v18;
  *(_QWORD *)&duration.timescale = v21;
  CMTimeRangeMake(&v31, &start, &duration);
  a2 = a4;
  v39 = v31;
  a3();
  if (v4)
  {

  }
  else
  {
    v23 = sub_1D451AEE4();
    ((void (*)(uint64_t))a3)(v23);
    sub_1D451AEF0();
    v24 = v38;
    v25 = &v22[OBJC_IVAR___SNLKFSResult_impl];
    *(_QWORD *)v25 = v34;
    *((_QWORD *)v25 + 1) = v35;
    *((_OWORD *)v25 + 1) = v36;
    *((_QWORD *)v25 + 4) = v37;
    *((_QWORD *)v25 + 5) = v24;
    sub_1D44C88E8((uint64_t)a1, 7, 0, 0);
    *((_DWORD *)v25 + 12) = v26;
    sub_1D42B28FC(&qword_1EFE40410);
    v29 = sub_1D42B6F40();
    *(_OWORD *)(v29 + 16) = xmmword_1D4525300;
    *(_QWORD *)(v29 + 32) = v22;
    v31.start.value = v29;
    sub_1D451A950();
    a2 = v31.start.value;

  }
  return a2;
}

id sub_1D44BA6B0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if (v1)
    return v1;
  sub_1D44BAB10();
  sub_1D42B6D0C();
  return (id)sub_1D4312028();
}

void sub_1D44BA6FC(int a1, double a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *v2;
  v7 = sub_1D42B6F40();
  *(double *)(v7 + 16) = a2;
  *(_DWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = v2;
  *(_QWORD *)(v7 + 40) = v6;
  swift_retain();
  v8 = sub_1D42CEEA4();
  swift_release();
  if (!v3)
  {
    v9 = (void *)v2[2];
    v2[2] = v8;

  }
}

id sub_1D44BA794@<X0>(_QWORD *a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  id result;

  result = sub_1D44BA020(a2);
  if (!v2)
    *a1 = result;
  return result;
}

id sub_1D44BA7C0()
{
  uint64_t v0;
  id result;
  void *v2;
  void *v3;
  id v4;

  result = sub_1D44BA6B0();
  if (!v0)
  {
    v2 = result;
    v3 = (void *)sub_1D44BB0F8();
    v4 = sub_1D44F590C(v2, v3);

    return v4;
  }
  return result;
}

uint64_t type metadata accessor for SNAudioLevelMeasurer()
{
  return objc_opt_self();
}

void type metadata accessor for AudioLevel.AudioSourceAgnosticRequest()
{
  sub_1D42CB35C();
}

void type metadata accessor for AudioLevel()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44BA858(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 52))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D44BA878(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 52) = v3;
  return result;
}

void type metadata accessor for AudioLevel.Result()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44BA8C0(uint64_t a1)
{
  unint64_t result;

  result = sub_1D42B6670();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1D44BA8E4(uint64_t a1)
{
  unint64_t result;

  result = sub_1D42B6634();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1D44BA90C()
{
  unint64_t result;

  result = qword_1EFE56168;
  if (!qword_1EFE56168)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D160, &unk_1E979B538);
    atomic_store(result, (unint64_t *)&qword_1EFE56168);
  }
  return result;
}

unint64_t sub_1D44BA94C()
{
  unint64_t result;

  result = qword_1EFE56170;
  if (!qword_1EFE56170)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D250, &unk_1E979B3D8);
    atomic_store(result, (unint64_t *)&qword_1EFE56170);
  }
  return result;
}

int64_t sub_1D44BA988(void *a1, int64_t a2, void (*a3)(void), int64_t a4)
{
  return sub_1D44BA3FC(a1, a2, a3, a4);
}

id sub_1D44BA99C()
{
  return sub_1D44BA7C0();
}

void sub_1D44BA9B0(int a1, double a2)
{
  sub_1D44BA6FC(a1, a2);
}

id sub_1D44BA9C4()
{
  return sub_1D44BA6B0();
}

uint64_t sub_1D44BA9D8()
{
  return sub_1D44B9988();
}

uint64_t sub_1D44BA9F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_1D44BAA24()
{
  return sub_1D44B9AC4();
}

uint64_t sub_1D44BAA3C()
{
  uint64_t v0;

  sub_1D42B5400(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1D44BAA78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1D44B9B0C((_QWORD *)(v1 + 16), (const void *)(v1 + 56), a1);
}

uint64_t sub_1D44BAA94()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44BAAC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44BAAE4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1D43EF8BC(*a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1D44BAB10()
{
  unint64_t result;

  result = qword_1EFE561E0;
  if (!qword_1EFE561E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D628, &unk_1E97A4398);
    atomic_store(result, (unint64_t *)&qword_1EFE561E0);
  }
  return result;
}

uint64_t sub_1D44BAB4C()
{
  swift_release();
  return swift_deallocObject();
}

id sub_1D44BAB70@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1D44BA794(a1, *(double *)(v1 + 16));
}

unint64_t sub_1D44BAB90()
{
  unint64_t result;

  result = qword_1EFE561F0;
  if (!qword_1EFE561F0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D5D8, &type metadata for AudioLevel.AudioSourceAgnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE561F0);
  }
  return result;
}

unint64_t sub_1D44BABCC()
{
  unint64_t result;

  result = qword_1EFE56200;
  if (!qword_1EFE56200)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D588, &type metadata for AudioLevel.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56200);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioLevel.Result.CodingKeys()
{
  return &type metadata for AudioLevel.Result.CodingKeys;
}

ValueMetadata *type metadata accessor for AudioLevel.AudioSourceAgnosticRequest.CodingKeys()
{
  return &type metadata for AudioLevel.AudioSourceAgnosticRequest.CodingKeys;
}

uint64_t sub_1D44BAC2C(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D44BAC6C + 4 * byte_1D454D020[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D44BAC8C + 4 * byte_1D454D025[v4]))();
}

_BYTE *sub_1D44BAC6C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D44BAC8C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44BAC94(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44BAC9C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44BACA4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44BACAC(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for SNAudioLevelMeasurer.DomainError()
{
  sub_1D42CB35C();
}

void type metadata accessor for AudioLevel.Session()
{
  sub_1D42CB35C();
}

void type metadata accessor for AudioLevel.Request()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44BACE0()
{
  unint64_t result;

  result = qword_1EFE56220;
  if (!qword_1EFE56220)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D350, &unk_1E979B648);
    atomic_store(result, (unint64_t *)&qword_1EFE56220);
  }
  return result;
}

unint64_t sub_1D44BAD20()
{
  unint64_t result;

  result = qword_1EFE56228;
  if (!qword_1EFE56228)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D408, &unk_1E97A4398);
    atomic_store(result, (unint64_t *)&qword_1EFE56228);
  }
  return result;
}

unint64_t sub_1D44BAD60()
{
  unint64_t result;

  result = qword_1EFE56230;
  if (!qword_1EFE56230)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D510, &type metadata for AudioLevel.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56230);
  }
  return result;
}

unint64_t sub_1D44BADA0()
{
  unint64_t result;

  result = qword_1EFE56238;
  if (!qword_1EFE56238)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D480, &type metadata for AudioLevel.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56238);
  }
  return result;
}

unint64_t sub_1D44BADE0()
{
  unint64_t result;

  result = qword_1EFE56240;
  if (!qword_1EFE56240)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D4A8, &type metadata for AudioLevel.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56240);
  }
  return result;
}

unint64_t sub_1D44BAE20()
{
  unint64_t result;

  result = qword_1EFE56248;
  if (!qword_1EFE56248)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D430, &type metadata for AudioLevel.AudioSourceAgnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56248);
  }
  return result;
}

unint64_t sub_1D44BAE60()
{
  unint64_t result;

  result = qword_1EFE56250;
  if (!qword_1EFE56250)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D458, &type metadata for AudioLevel.AudioSourceAgnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56250);
  }
  return result;
}

unint64_t sub_1D44BAE9C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EFE56260;
  if (!qword_1EFE56260)
  {
    v1 = sub_1D42B8B10(&qword_1EFE4FD60);
    v2[0] = &off_1E979B478;
    v2[1] = &off_1E979B488;
    result = MEMORY[0x1D825E41C](&unk_1D45293A0, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EFE56260);
  }
  return result;
}

unint64_t sub_1D44BAF00()
{
  unint64_t result;

  result = qword_1EFE56270;
  if (!qword_1EFE56270)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D730, &type metadata for AudioLevel.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56270);
  }
  return result;
}

uint64_t _s13SoundAnalysis10AudioLevelV6ResultV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D44BAF88 + 4 * byte_1D454D02F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D44BAFBC + 4 * byte_1D454D02A[v4]))();
}

uint64_t sub_1D44BAFBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44BAFC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44BAFCCLL);
  return result;
}

uint64_t sub_1D44BAFD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44BAFE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D44BAFE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44BAFEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioLevel.Request.CodingKeys()
{
  return &type metadata for AudioLevel.Request.CodingKeys;
}

unint64_t sub_1D44BB00C()
{
  unint64_t result;

  result = qword_1EFE56290;
  if (!qword_1EFE56290)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D708, &type metadata for AudioLevel.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56290);
  }
  return result;
}

unint64_t sub_1D44BB04C()
{
  unint64_t result;

  result = qword_1EFE56298;
  if (!qword_1EFE56298)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D678, &type metadata for AudioLevel.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56298);
  }
  return result;
}

unint64_t sub_1D44BB08C()
{
  unint64_t result;

  result = qword_1EFE562A0;
  if (!qword_1EFE562A0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D6A0, &type metadata for AudioLevel.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE562A0);
  }
  return result;
}

uint64_t sub_1D44BB0C8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44BB0F8()
{
  return sub_1D451A6C8();
}

double sub_1D44BB11C(uint64_t a1, ...)
{
  unsigned int v1;
  va_list va;

  va_start(va, a1);
  return sub_1D450053C(v1, 9600, 1, (uint64_t)va);
}

void *sub_1D44BB134(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t sub_1D44BB13C()
{
  return sub_1D451B688();
}

uint64_t sub_1D44BB168()
{
  return type metadata accessor for SNLKFSResult();
}

uint64_t sub_1D44BB170(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  uint64_t v32;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = v1;
  if (v4)
  {
    v6 = (_QWORD *)(v3 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1D44BB6B8(v6, v26);
      v7 = (void *)v26[0];
      if ((a1 & 0x8000000000000000) != 0)
      {
        if ((v26[0] & 0x8000000000000000) == 0)
          goto LABEL_9;
        v7 = (void *)(v26[0] & 0x7FFFFFFFFFFFFFFFLL);
        sub_1D439402C();
        v8 = (id)(a1 & 0x7FFFFFFFFFFFFFFFLL);
      }
      else
      {
        if ((v26[0] & 0x8000000000000000) != 0)
          goto LABEL_9;
        sub_1D439402C();
        v8 = (id)a1;
      }
      v9 = v8;
      v10 = v7;
      v11 = sub_1D451B10C();

      if ((v11 & 1) != 0)
      {
        sub_1D44BB758(v26, &v27);
        goto LABEL_14;
      }
LABEL_9:
      sub_1D44BB6EC(v26);
      v6 += 3;
      if (!--v4)
        goto LABEL_12;
    }
  }
  swift_bridgeObjectRetain();
LABEL_12:
  v27 = 0;
  v28 = 0;
  v29 = 1;
LABEL_14:
  swift_bridgeObjectRelease();
  if (v28 || v29 != 1)
  {
    sub_1D44BB758(&v27, &v30);
    v3 = MEMORY[0x1D825E608](v31);
    sub_1D44BB6EC(&v30);
    if (v3)
      goto LABEL_20;
  }
  else
  {
    sub_1D44BB718((uint64_t)&v27);
  }
  v12 = v32;
  v13 = sub_1D43CCB04(a1);
  if (v12)
    return v3;
  v3 = (uint64_t)v13;
  v32 = 0;
  v30 = a1;
  v31[1] = v14;
  swift_unknownObjectWeakInit();
  sub_1D42B28FC((uint64_t *)&unk_1EFE40510);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1D45261D0;
  sub_1D44BB6B8(&v30, (_QWORD *)(v15 + 32));
  v27 = v15;
  v16 = (id)(a1 & 0x7FFFFFFFFFFFFFFFLL);
  swift_bridgeObjectRetain();
  sub_1D44B4E20();
  sub_1D44BB6EC(&v30);
  sub_1D44BB78C();
LABEL_20:
  v17 = *(_QWORD *)(v5 + 16);
  v26[0] = MEMORY[0x1E0DEE9D8];
  v18 = *(_QWORD *)(v17 + 16);
  result = swift_bridgeObjectRetain();
  if (!v18)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    sub_1D44BB78C();
    return v3;
  }
  v25 = v3;
  v20 = 0;
  v21 = (_QWORD *)(v17 + 32);
  while (v20 < *(_QWORD *)(v17 + 16))
  {
    sub_1D44BB6B8(v21, &v30);
    v22 = MEMORY[0x1D825E608](v31);
    swift_unknownObjectRelease();
    if (v22)
    {
      sub_1D44BB758(&v30, &v27);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_1D42C75B8();
      v23 = v26[0];
      v24 = *(_QWORD *)(v26[0] + 16);
      if (v24 >= *(_QWORD *)(v26[0] + 24) >> 1)
      {
        sub_1D42C75B8();
        v23 = v26[0];
      }
      *(_QWORD *)(v23 + 16) = v24 + 1;
      result = (uint64_t)sub_1D44BB758(&v27, (_QWORD *)(v23 + 24 * v24 + 32));
    }
    else
    {
      result = (uint64_t)sub_1D44BB6EC(&v30);
    }
    ++v20;
    v21 += 3;
    if (v18 == v20)
    {
      v3 = v25;
      goto LABEL_32;
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SNAudioProcessorCache()
{
  return objc_opt_self();
}

uint64_t destroy for SNAudioProcessorCache.Entry(_QWORD *a1)
{

  return swift_unknownObjectWeakDestroy();
}

_QWORD *initializeWithCopy for SNAudioProcessorCache.Entry(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  id v5;

  v4 = (void *)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
  *a1 = *a2;
  v5 = v4;
  swift_unknownObjectWeakCopyInit();
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for SNAudioProcessorCache.Entry(uint64_t *a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = (void *)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
  v5 = *a1;
  *a1 = *a2;
  v6 = (void *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
  v7 = v4;

  swift_unknownObjectWeakCopyAssign();
  a1[2] = a2[2];
  return a1;
}

_QWORD *initializeWithTake for SNAudioProcessorCache.Entry(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeInit();
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for SNAudioProcessorCache.Entry(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;

  swift_unknownObjectWeakTakeAssign();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for SNAudioProcessorCache.Entry(uint64_t a1, int a2)
{
  int v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else if ((*(_QWORD *)(a1 + 16) & 0xF000000000000007) != 0)
    {
      v2 = *(_DWORD *)(a1 + 8) & 0x7FFFFFFF;
    }
    else
    {
      v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SNAudioProcessorCache.Entry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      *(_QWORD *)(result + 16) = 1;
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SNAudioProcessorCache.Entry()
{
  return &type metadata for SNAudioProcessorCache.Entry;
}

_QWORD *sub_1D44BB6B8(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for SNAudioProcessorCache.Entry(a2, a1);
  return a2;
}

_QWORD *sub_1D44BB6EC(_QWORD *a1)
{
  destroy for SNAudioProcessorCache.Entry(a1);
  return a1;
}

uint64_t sub_1D44BB718(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1D42B28FC(&qword_1EFE40448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1D44BB758(_QWORD *a1, _QWORD *a2)
{
  initializeWithTake for SNAudioProcessorCache.Entry(a2, a1);
  return a2;
}

uint64_t sub_1D44BB78C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D44BB798()
{
  uint64_t v0;

  return *(unsigned int *)(v0
                         + OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_windowLengthFrames);
}

uint64_t sub_1D44BB7A8()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_stepSizeFrames);
}

void sub_1D44BB7B8(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;

  v2 = objc_msgSend(a1, sel_modelDescription);
  v3 = objc_msgSend(v2, sel_inputDescriptionsByName);

  sub_1D42F40FC();
  v4 = sub_1D451A5CC();

  if (*(_QWORD *)(v4 + 16) != 1)
  {
    sub_1D42CB8F4();
    goto LABEL_10;
  }
  sub_1D4396690(v4);
  v6 = v5;
  v8 = v7;
  sub_1D42CB8F4();
  if (!v6)
  {
LABEL_10:
    sub_1D42DCEE8();
    sub_1D430740C();
    sub_1D4342D78(v20, v21, (uint64_t)"SNSoundPrintFeatureExtractor models must have one input feature");
    sub_1D42DCEF0();
    return;
  }
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v8, sel_multiArrayConstraint);

  if (!v9)
  {
    sub_1D42DCEE8();
    sub_1D4311F68();
    sub_1D430740C();
    v24 = "SNSoundPrintFeatureExtractor model must have an MLMultiArray input feature";
LABEL_14:
    sub_1D4342D78(v22, v23, (uint64_t)v24);
    sub_1D42DCEF0();

    return;
  }
  v10 = objc_msgSend(a1, sel_modelDescription);
  v11 = objc_msgSend(v10, sel_outputDescriptionsByName);

  v12 = sub_1D451A5CC();
  if (*(_QWORD *)(v12 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_1D4396690(v12);
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease();
  if (!v14)
  {
LABEL_13:
    sub_1D42DCEE8();
    sub_1D4311F68();
    sub_1D430740C();
    v24 = "SNSoundPrintFeatureExtractor models must have one output feature";
    goto LABEL_14;
  }
  sub_1D42CB8F4();
  v17 = objc_msgSend(v16, sel_multiArrayConstraint);

  if (!v17)
  {
    sub_1D42DCEE8();
    sub_1D4311F68();
    sub_1D430740C();
    sub_1D4342D78(v18, v19, (uint64_t)"SNSoundPrintFeatureExtractor model must have an MLMultiArray output feature");
    sub_1D42DCEF0();
  }

}

id sub_1D44BBA14(void *a1, int a2, int a3)
{
  void *v3;
  void *v4;
  objc_class *ObjectType;
  char *v9;
  id v10;
  objc_super v12;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v9 = v4;
  sub_1D44BB7B8(a1);
  *(_QWORD *)&v9[OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_model] = a1;
  *(_DWORD *)&v9[OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_windowLengthFrames] = a2;
  *(_DWORD *)&v9[OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_stepSizeFrames] = a3;
  swift_unknownObjectRetain();

  v12.receiver = v9;
  v12.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v12, sel_init);
  swift_unknownObjectRelease();
  return v10;
}

uint64_t sub_1D44BBB2C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = (unint64_t)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_model), sel_hash);
  v2 = sub_1D451B9F4() ^ v1;
  return v2 ^ sub_1D451B9F4();
}

BOOL sub_1D44BBB88(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  char *v6;
  _BYTE v7[24];
  uint64_t v8;

  swift_getObjectType();
  sub_1D42B28B4(a1, (uint64_t)v7);
  if (v8)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_model) == *(_QWORD *)&v6[OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_model]
        && *(_DWORD *)(v1 + OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_windowLengthFrames) == *(_DWORD *)&v6[OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_windowLengthFrames])
      {
        v3 = *(_DWORD *)(v1 + OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_stepSizeFrames);
        v4 = *(_DWORD *)&v6[OBJC_IVAR____TtC13SoundAnalysis41SNSoundPrintFeatureExtractorConfiguration_stepSizeFrames];

        return v3 == v4;
      }

    }
  }
  else
  {
    sub_1D42B5464((uint64_t)v7);
  }
  return 0;
}

void sub_1D44BBCD4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for SNSoundPrintFeatureExtractorConfiguration()
{
  return objc_opt_self();
}

uint64_t sub_1D44BBD3C()
{
  return sub_1D44BB798();
}

uint64_t sub_1D44BBD5C()
{
  return sub_1D44BB7A8();
}

uint64_t sub_1D44BBD7C(_QWORD *a1, unsigned __int8 *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

void sub_1D44BBDB4(void *a1)
{
  sub_1D44BE340(a1, 0);
}

uint64_t sub_1D44BBDCC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >> 62)
  {
    while (2)
    {
      sub_1D449312C();
      v8 = sub_1D431204C();
      sub_1D42BE8B4();
      if (v8)
      {
        sub_1D42CB7B8();
        v9 = sub_1D431204C();
        if (!v9)
        {
LABEL_20:
          sub_1D42BE8B4();
          return 1;
        }
        v1 = v9;
        if (v9 >= 1)
        {
LABEL_4:
          v3 = 0;
          v4 = 1;
          do
          {
            if ((a1 & 0xC000000000000001) != 0)
              sub_1D44C15E4();
            v5 = sub_1D42CB2A4(a1 + 8 * v3);
            v6 = (uint64_t)objc_msgSend(v5, sel_integerValue);

            v7 = v4 * v6;
            if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
              goto LABEL_12;
            ++v3;
            v4 *= v6;
          }
          while (v1 != v3);
          sub_1D42BE8B4();
          if (v7 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v7 <= 0x7FFFFFFF)
              return v7;
            __break(1u);
LABEL_12:
            __break(1u);
            continue;
          }
          __break(1u);
          goto LABEL_20;
        }
        __break(1u);
      }
      break;
    }
  }
  else
  {
    sub_1D44C1680();
    if (v1)
    {
      sub_1D42CB7B8();
      goto LABEL_4;
    }
  }
  return 0;
}

void sub_1D44BBEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 40;
    v7 = MEMORY[0x1E0DEE9D8];
    v16 = a1 + 40;
    do
    {
      v8 = (uint64_t *)(v6 + 16 * v5);
      v9 = v5;
      while (1)
      {
        if (v9 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v11 = *(v8 - 1);
        v10 = *v8;
        v5 = v9 + 1;
        swift_bridgeObjectRetain();
        sub_1D43EF500(v11, v10, a2);
        if ((v12 & 1) == 0)
          break;
        swift_bridgeObjectRelease();
        v8 += 2;
        ++v9;
        if (v4 == v5)
          goto LABEL_13;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_1D42C71F0();
      v13 = *(_QWORD *)(v7 + 16);
      v14 = v13 + 1;
      if (v13 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        sub_1D42C71F0();
        v14 = v13 + 1;
      }
      *(_QWORD *)(v7 + 16) = v14;
      v15 = v7 + 16 * v13;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v10;
      v6 = v16;
    }
    while (v4 - 1 != v9);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_1D44BC040(void *a1, uint64_t a2)
{
  id v3;
  char *v4;
  id v5;
  unsigned int v6;
  id v7;
  _DWORD *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v30;

  v3 = objc_msgSend(a1, sel_frameLength);
  if ((_DWORD)a2 && v3 > a2)
  {
    v4 = (char *)sub_1D43B1BD0((uint64_t)v3, sel_audioBufferList);
    v5 = objc_msgSend(a1, sel_frameLength);
    v6 = v5;
    v7 = sub_1D43B1BD0((uint64_t)v5, sel_format);
    v8 = objc_msgSend(v7, sel_streamDescription);

    v28 = v8[6];
    v30 = MEMORY[0x1E0DEE9D8];
    if (v6)
    {
      v9 = 0;
      v27 = (uint64_t *)(v4 + 16);
      while (1)
      {
        v10 = objc_msgSend(a1, sel_format, v27);
        v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89AC0]), sel_initWithPCMFormat_frameCapacity_, v10, a2);

        if (!v11)
          break;
        v13 = (unsigned int *)sub_1D44C1608(v12, sel_mutableAudioBufferList);
        if (v6 >= a2)
          v14 = a2;
        else
          v14 = v6;
        v15 = v14 * (unint64_t)v28;
        if ((v15 & 0xFFFFFFFF00000000) != 0)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          break;
        }
        v16 = *v13;
        if ((_DWORD)v16)
        {
          v17 = (void **)(v13 + 4);
          v18 = v27;
          do
          {
            v20 = *v18;
            v18 += 2;
            v19 = v20;
            if (!v20)
              goto LABEL_27;
            if (!*v17)
              goto LABEL_28;
            memmove(*v17, (const void *)(v19 + v9), v15);
            *((_DWORD *)v17 - 1) = v15;
            v17 += 2;
          }
          while (--v16);
        }
        objc_msgSend(v11, sel_setFrameLength_, v14);
        v21 = __OFADD__(v9, v15);
        v9 += v15;
        if (v21)
          goto LABEL_25;
        v22 = v6 >= v14;
        v6 -= v14;
        if (!v22)
          goto LABEL_26;
        v23 = v11;
        MEMORY[0x1D825C238]();
        v24 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v24 >> 1)
        {
          sub_1D42DCE78(v24);
          sub_1D451A98C();
        }
        sub_1D451A9E0();
        sub_1D451A950();

        if (!v6)
          return;
      }
      __break(1u);
    }
  }
  else
  {
    sub_1D42B28FC(&qword_1EFE40410);
    v25 = sub_1D438C4E4();
    *(_OWORD *)(v25 + 16) = xmmword_1D4525300;
    *(_QWORD *)(v25 + 32) = a1;
    sub_1D451A950();
    v26 = a1;
  }
}

void sub_1D44BC2A0(uint64_t a1@<X8>)
{
  __SecTask *v2;
  __SecTask *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = SecTaskCreateFromSelf(0);
  if (v2)
  {
    v3 = v2;
    sub_1D44BE840(v2, a1);

  }
  else
  {
    type metadata accessor for SNError();
    sub_1D430740C();
    sub_1D43EC59C(v4, v5, 2, 0, 0xD000000000000016, 0x80000001D455B6E0);
    sub_1D4312028();
  }
}

uint64_t sub_1D44BC35C(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  sub_1D42EA3E0((uint64_t)objc_msgSend(a1, sel_outputDescriptionsByName), (unint64_t *)&qword_1EFE40360);
  sub_1D451A5CC();
  sub_1D43B1B90();
  v2 = (void *)sub_1D4396600(v1);
  sub_1D42B7204();
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v3 = objc_msgSend(v2, sel_multiArrayConstraint);
  sub_1D43B1B90();
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v5 = sub_1D44C1608(v4, sel_shape);
  sub_1D4457DE0();
  sub_1D42EA3E0(v6, (unint64_t *)&qword_1EFE404B0);
  sub_1D44C16B4();
  sub_1D43B1B90();
  return v1;
}

void sub_1D44BC438(unint64_t a1)
{
  uint64_t v1;
  BOOL v3;
  uint64_t v4;
  id v5;

  if (a1 >> 62)
  {
    sub_1D449312C();
    v1 = sub_1D431204C();
    sub_1D42BE8B4();
  }
  else
  {
    sub_1D44C1680();
  }
  if (v1 != 1)
  {
    v3 = v1 < 2;
    v4 = v1 - 2;
    if (!v3)
    {
      sub_1D42D2E5C(v4, (a1 & 0xC000000000000001) == 0, a1);
      if ((a1 & 0xC000000000000001) != 0)
        sub_1D44C15E4();
      v5 = sub_1D42CB2A4(a1 + 8 * v4);
      sub_1D44BD638(v5);

    }
  }
  sub_1D42CB15C();
}

void sub_1D44BC4D4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  id v8;

  v3 = (unint64_t)objc_msgSend(a1, sel_shapeConstraint);
  v4 = objc_msgSend((id)v3, sel_sizeRangeForDimension);
  sub_1D43B1B90();
  sub_1D42EA3E0(v5, (unint64_t *)&qword_1EFE47310);
  sub_1D42CB994();
  sub_1D4457DE0();
  if (!(v3 >> 62))
  {
    sub_1D44C1680();
    if (v1)
      goto LABEL_3;
LABEL_7:
    sub_1D42BE8B4();
    goto LABEL_8;
  }
  sub_1D449312C();
  v1 = sub_1D431204C();
  sub_1D42BE8B4();
  if (!v1)
    goto LABEL_7;
LABEL_3:
  v6 = __OFSUB__(v1, 1);
  v7 = v1 - 1;
  if (v6)
  {
    __break(1u);
LABEL_10:
    sub_1D44C15E4();
  }
  sub_1D44C1610();
  if (v2)
    goto LABEL_10;
  v8 = sub_1D42CB2A4(v3 + 8 * v7);
  sub_1D42BE8B4();
  objc_msgSend(v8, sel_rangeValue);

LABEL_8:
  sub_1D42CB15C();
}

id sub_1D44BC5B8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  id v8;
  id v9;

  v3 = (unint64_t)objc_msgSend(a1, sel_shapeConstraint);
  v4 = objc_msgSend((id)v3, sel_sizeRangeForDimension);
  sub_1D43B1B90();
  sub_1D42EA3E0(v5, (unint64_t *)&qword_1EFE47310);
  sub_1D42CB994();
  sub_1D4457DE0();
  if (!(v3 >> 62))
  {
    sub_1D44C1680();
    if (v1)
      goto LABEL_3;
LABEL_7:
    sub_1D42BE8B4();
    return 0;
  }
  sub_1D449312C();
  v1 = sub_1D431204C();
  sub_1D42BE8B4();
  if (!v1)
    goto LABEL_7;
LABEL_3:
  v6 = __OFSUB__(v1, 1);
  v7 = v1 - 1;
  if (v6)
  {
    __break(1u);
LABEL_10:
    sub_1D44C15E4();
  }
  sub_1D44C1610();
  if (v2)
    goto LABEL_10;
  v8 = sub_1D42CB2A4(v3 + 8 * v7);
  sub_1D42BE8B4();
  v9 = objc_msgSend(v8, sel_rangeValue);

  return v9;
}

uint64_t sub_1D44BC6AC(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  sub_1D42EA3E0((uint64_t)objc_msgSend(a1, sel_inputDescriptionsByName), (unint64_t *)&qword_1EFE40360);
  sub_1D451A5CC();
  sub_1D43B1B90();
  v2 = (void *)sub_1D4396600(v1);
  sub_1D42B7204();
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v3 = objc_msgSend(v2, sel_multiArrayConstraint);
  sub_1D43B1B90();
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v5 = sub_1D44C1608(v4, sel_shape);
  sub_1D4457DE0();
  sub_1D42EA3E0(v6, (unint64_t *)&qword_1EFE404B0);
  sub_1D44C16B4();
  sub_1D43B1B90();
  return v1;
}

uint64_t sub_1D44BC788(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v8 = MEMORY[0x1E0DEE9D8];
  if (!(a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = sub_1D42CB7B8();
    if (v3)
      goto LABEL_3;
LABEL_14:
    sub_1D42BE8B4();
    v7 = MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_19;
LABEL_15:
    if ((v7 & 0x4000000000000000) == 0)
    {
      v1 = *(_QWORD *)(v7 + 16);
      result = sub_1D42BE93C();
      goto LABEL_17;
    }
LABEL_19:
    sub_1D42CB7B8();
    sub_1D451B5A4();
    sub_1D44C1674();
    result = swift_release_n();
    if (v1 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_17:
    if (v1 <= 0x7FFFFFFF)
      return v1;
    goto LABEL_21;
  }
  sub_1D449312C();
  result = sub_1D431204C();
  v3 = result;
  if (!result)
    goto LABEL_14;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        sub_1D44C15E4();
      v6 = sub_1D42CB2A4(a1 + 8 * i);
      if ((uint64_t)objc_msgSend(v6, sel_integerValue) < 2)
      {

      }
      else
      {
        sub_1D451B484();
        sub_1D451B4A8();
        v1 = (uint64_t)&v8;
        sub_1D451B4B4();
        sub_1D42CB4F0();
      }
    }
    sub_1D42BE8B4();
    v7 = v8;
    if (v8 < 0)
      goto LABEL_19;
    goto LABEL_15;
  }
LABEL_22:
  __break(1u);
  return result;
}

void sub_1D44BC8E4(void *a1, int32_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  _BYTE *v16;

  v5 = sub_1D44BDF28(a1);
  if (!v2)
  {
    v7 = v5;
    v8 = v6;
    v9 = objc_msgSend(a1, sel_inputDescriptionsByName);
    sub_1D42EA3E0((uint64_t)v9, (unint64_t *)&qword_1EFE40360);
    v10 = sub_1D451A5CC();

    sub_1D4364898(v7, v8, v10);
    v12 = v11;
    sub_1D42CB5C8();
    swift_bridgeObjectRelease();
    if (v12
      && (v13 = objc_msgSend(v12, sel_multiArrayConstraint)) != 0
      && (v14 = v13,
          v15 = objc_msgSend(v13, sel_shapeConstraint),
          v14,
          v15))
    {
      sub_1D44BD0E4(v15, a2);

    }
    else
    {
      sub_1D42B7F2C();
      sub_1D42B6D0C();
      *v16 = 0;
      sub_1D4312028();

    }
  }
}

CMTimeValue sub_1D44BCA28(CMTimeValue a1, uint64_t a2, CMTimeEpoch a3, id a4)
{
  id v5;
  CMTimeValue value;
  id v7;
  unint64_t timescale;
  unint64_t v9;
  id v10;
  void *v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  CMTimeValue v22;
  unint64_t v23;
  CMTime v24;
  CMTime v25;
  CMTime time;
  CMTimeRange range;

  *(_QWORD *)&v24.timescale = a2;
  v24.epoch = a3;
  v24.value = a1;
  v5 = objc_msgSend(a4, sel_type);
  if (v5 == (id)1)
  {
    v7 = sub_1D44C169C();
    sub_1D42EA3E0((uint64_t)v7, (unint64_t *)&qword_1EFE47310);
    timescale = sub_1D451A92C();

    if (timescale >> 62)
      goto LABEL_19;
    if (*(_QWORD *)((timescale & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      do
      {
        v9 = timescale & 0xC000000000000001;
        sub_1D42D2E5C(0, (timescale & 0xC000000000000001) == 0, timescale);
        if ((timescale & 0xC000000000000001) != 0)
          v10 = (id)MEMORY[0x1D825CD78](0, timescale);
        else
          v10 = *(id *)(timescale + 32);
        v11 = v10;
        sub_1D42CB208();
        objc_msgSend(v11, sel_CMTimeValue);
        value = range.start.value;
        timescale = range.start.timescale;

        v12 = sub_1D44C169C();
        v13 = sub_1D451A92C();

        if (v13 >> 62)
        {
          sub_1D42CB7B8();
          v9 = sub_1D451B5A4();
          sub_1D42BE8B4();
          if (!v9)
          {
LABEL_25:
            sub_1D42BE8B4();
            return value;
          }
        }
        else
        {
          sub_1D44C1680();
          if (!v9)
            goto LABEL_25;
        }
        v23 = v13 & 0xC000000000000001;
        v14 = 4;
        while (1)
        {
          v22 = value;
          if (v23)
            sub_1D44C15E4();
          v15 = *(id *)(v13 + 8 * v14);
          v16 = v15;
          v17 = v14 - 3;
          if (__OFADD__(v14 - 4, 1))
            break;
          v18 = v13;
          objc_msgSend(v15, sel_CMTimeValue);
          timescale = range.start.timescale;
          v19 = sub_1D451B088();

          if ((v19 & 1) == 0)
          {
            sub_1D42CB5C8();
            return v22;
          }
          ++v14;
          value = range.start.value;
          v13 = v18;
          if (v17 == v9)
          {
            sub_1D42BE8B4();
            return range.start.value;
          }
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
        v20 = sub_1D451B5A4();
        sub_1D42CB208();
      }
      while (v20);
    }
    sub_1D42CB208();
    return *MEMORY[0x1E0CA2E18];
  }
  if (v5 != (id)2)
    return *MEMORY[0x1E0CA2E18];
  objc_msgSend(a4, sel_durationRange);
  time = v24;
  CMTimeClampToRange(&v25, &time, &range);
  return v25.value;
}

void sub_1D44BCD48(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_1D44C12B0(a1);
  if (!v2 || (v3 = sub_1D4474DD8(v2), sub_1D42B7204(), !v3))
  {
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x1E0DEE9D8];
  }
  type metadata accessor for SNModelMetadataUtils();
  sub_1D44C9714(a1);
  sub_1D44BBEDC(v3, v4);
  sub_1D42CB758();
}

id sub_1D44BCDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t inited;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v28;
  id v29;

  sub_1D44BD08C();
  v1 = v0;
  v2 = sub_1D44BD6F0();
  sub_1D42EA3E0(v2, &qword_1EFE53538);
  v3 = sub_1D44BE024(v1, 65568);
  v4 = sub_1D44BE024(v2, 65600);
  sub_1D42EA3E0((uint64_t)v4, (unint64_t *)&qword_1EFE40360);
  sub_1D42B28FC(&qword_1EFE40410);
  v5 = sub_1D438C4E4();
  *(_OWORD *)(v5 + 16) = xmmword_1D4525300;
  *(_QWORD *)(v5 + 32) = v3;
  sub_1D44C16C0(v5);
  v29 = v3;
  v6 = (void *)sub_1D44C1624(0x72724169746C754DLL, 0xEF7475706E497961);
  v7 = sub_1D438C4E4();
  *(_OWORD *)(v7 + 16) = xmmword_1D4525300;
  *(_QWORD *)(v7 + 32) = v4;
  sub_1D44C16C0(v7);
  v28 = v4;
  sub_1D430740C();
  v9 = (void *)sub_1D44C1624(0xD000000000000010, v8);
  sub_1D42B28FC(&qword_1EFE53540);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D45261D0;
  v11 = sub_1D43B1BD0(inited, sel_name);
  v12 = sub_1D451A6EC();
  v14 = v13;

  *(_QWORD *)(inited + 32) = v12;
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 48) = v6;
  v15 = v6;
  v16 = sub_1D44C164C();
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1D45261D0;
  v18 = sub_1D44C1608(v17, sel_name);
  v19 = sub_1D451A6EC();
  v21 = v20;

  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  *(_QWORD *)(v17 + 48) = v9;
  v22 = v9;
  v23 = sub_1D44C164C();
  v24 = objc_allocWithZone(MEMORY[0x1E0C9E968]);
  v25 = v23;
  v26 = v24;
  sub_1D44425EC(v16, v25, 0, 0xE000000000000000, 0, 0xE000000000000000, 0);
  sub_1D43B1B90();

  return v26;
}

void sub_1D44BD034()
{
  sub_1D44C168C();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 12288);
  sub_1D44C15D8();
  sub_1D44C15B4();
  sub_1D44C15C8();
  sub_1D42CB4F0();
  sub_1D42CB758();
}

void sub_1D44BD08C()
{
  sub_1D44C168C();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 15600);
  sub_1D44C15D8();
  sub_1D44C15B4();
  sub_1D44C15C8();
  sub_1D42CB4F0();
  sub_1D42CB758();
}

void sub_1D44BD0E4(void *a1, int32_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t p_start;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  CMTimeScale v14;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  id v17;
  id v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  int64_t v25;
  int64_t v26;
  CMTimeValue value;
  CMTimeEpoch epoch;
  uint64_t v29;
  CMTimeValue v30;
  CMTimeEpoch v31;
  CMTimeValue v32;
  CMTimeEpoch v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  CMTimeValue v37;
  unint64_t v38;
  CMTimeScale v39;
  CMTimeEpoch v40;
  CMTimeEpoch v41;
  unint64_t v42;
  uint64_t v43;
  CMTimeValue v44;
  CMTimeEpoch v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CMTimeValue v51;
  CMTimeEpoch v52;
  CMTimeValue v53;
  CMTimeEpoch v54;
  id v55;
  _BYTE *v56;
  CMTime duration;
  CMTime start;
  CMTimeRange v59;

  p_start = (unint64_t)a1;
  v7 = objc_msgSend(a1, sel_type);
  if (v7 == (id)3)
  {
    v18 = sub_1D44C1608(3, sel_sizeRangeForDimension);
    sub_1D42EA3E0((uint64_t)v18, (unint64_t *)&qword_1EFE47310);
    p_start = sub_1D451A92C();

    if (!(p_start >> 62))
    {
      v19 = *(_QWORD *)((p_start & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v19)
        goto LABEL_23;
      goto LABEL_40;
    }
LABEL_37:
    sub_1D42CB6CC();
    v48 = sub_1D42EA3D8();
    sub_1D42B7204();
    if (v48)
    {
      sub_1D42CB6CC();
      v19 = sub_1D42EA3D8();
      sub_1D42B7204();
      if (!v19)
      {
        sub_1D42B7204();
        sub_1D44C1308();
        sub_1D42B6D0C();
        v49 = swift_willThrow();
LABEL_44:
        sub_1D42EA3E0(v49, &qword_1EFE56358);
        sub_1D44BDEA4();

        return;
      }
LABEL_23:
      v20 = __OFSUB__(v19, 1);
      v21 = v19 - 1;
      if (v20)
      {
        __break(1u);
      }
      else
      {
        sub_1D42D2E5C(v21, (p_start & 0xC000000000000001) == 0, p_start);
        if ((p_start & 0xC000000000000001) == 0)
        {
          v22 = sub_1D42CB2A4(p_start + 8 * v21);
LABEL_26:
          v23 = v22;
          sub_1D42B7204();
          v24 = objc_msgSend(v23, sel_rangeValue);
          v26 = v25;

          if ((a2 & 0x80000000) == 0)
          {
            CMTimeMake(&v59.start, (int64_t)v24, a2);
            value = v59.start.value;
            epoch = v59.start.epoch;
            v29 = *(_QWORD *)&v59.start.timescale;
            CMTimeMake(&v59.start, v26, a2);
            duration = v59.start;
            start.value = value;
            *(_QWORD *)&start.timescale = v29;
            start.epoch = epoch;
            CMTimeRangeMake(&v59, &start, &duration);
            v30 = v59.start.value;
            v31 = v59.start.epoch;
            v32 = v59.duration.value;
            v33 = v59.duration.epoch;
            v34 = *(_QWORD *)&v59.start.timescale;
            v35 = *(_QWORD *)&v59.duration.timescale;
            v36 = objc_allocWithZone((Class)SNTimeDurationConstraint);
            v59.start.value = v30;
            *(_QWORD *)&v59.start.timescale = v34;
            v59.start.epoch = v31;
            v59.duration.value = v32;
            *(_QWORD *)&v59.duration.timescale = v35;
            v59.duration.epoch = v33;
            objc_msgSend(v36, sel_initWithDurationRange_, &v59);
            return;
          }
          __break(1u);
          goto LABEL_48;
        }
      }
      v22 = (id)MEMORY[0x1D825CD78](v21, p_start);
      goto LABEL_26;
    }
LABEL_40:
    sub_1D42B7204();
    v50 = MEMORY[0x1E0CA2E40];
    v51 = *MEMORY[0x1E0CA2E40];
    v52 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 16);
    v53 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 24);
    v54 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
    v55 = objc_allocWithZone((Class)SNTimeDurationConstraint);
    v59.start.value = v51;
    *(_QWORD *)&v59.start.timescale = *(_QWORD *)(v50 + 8);
    v59.start.epoch = v52;
    v59.duration.value = v53;
    *(_QWORD *)&v59.duration.timescale = *(_QWORD *)(v50 + 32);
    v59.duration.epoch = v54;
    objc_msgSend(v55, sel_initWithDurationRange_, &v59);
    return;
  }
  if (v7 != (id)2)
  {
    if ((a2 & 0x80000000) == 0)
    {
      v37 = sub_1D451B0A0();
      v39 = v38;
      v41 = v40;
      v42 = HIDWORD(v38);
      v43 = MEMORY[0x1E0CA2E30];
      v44 = *MEMORY[0x1E0CA2E30];
      v45 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
      v46 = objc_allocWithZone((Class)SNTimeDurationConstraint);
      v59.start.value = v37;
      v59.start.timescale = v39;
      v59.start.flags = v42;
      v59.start.epoch = v41;
      v59.duration.value = v44;
      *(_QWORD *)&v59.duration.timescale = *(_QWORD *)(v43 + 8);
      v59.duration.epoch = v45;
      objc_msgSend(v46, sel_initWithDurationRange_, &v59);
      return;
    }
    __break(1u);
    goto LABEL_42;
  }
  v8 = sub_1D44C1608(2, sel_enumeratedShapes);
  sub_1D42B28FC((uint64_t *)&unk_1EFE4AC90);
  v3 = sub_1D42CB994();

  v2 = *(_QWORD *)(v3 + 16);
  if (v2)
  {
    start.value = MEMORY[0x1E0DEE9D8];
    sub_1D451B49C();
    p_start = *(_QWORD *)(v3 + 32);
    if (!(p_start >> 62))
    {
      sub_1D44C1638();
      if (v4)
      {
LABEL_6:
        if (a2 < 0)
        {
LABEL_48:
          __break(1u);
          return;
        }
        v9 = (void *)objc_opt_self();
        v10 = 0;
        while (1)
        {
          v11 = v4 - 1;
          if (__OFSUB__(v4, 1))
            break;
          if ((p_start & 0xC000000000000001) != 0)
          {
            v12 = (id)MEMORY[0x1D825CD78](v11, p_start);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_34;
            if (v11 >= *(_QWORD *)((p_start & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_35;
            v12 = sub_1D42CB2A4(p_start + 8 * v11);
          }
          v13 = v12;
          sub_1D42B7204();
          objc_msgSend(v13, sel_integerValue);
          v59.start.value = sub_1D451B0A0();
          v59.start.timescale = v14;
          v59.start.flags = v15;
          v59.start.epoch = v16;
          v17 = objc_msgSend(v9, sel_valueWithCMTime_, &v59);
          sub_1D42B7204();

          sub_1D451B484();
          v4 = *(_QWORD *)(start.value + 16);
          sub_1D451B4A8();
          sub_1D451B4B4();
          p_start = (unint64_t)&start;
          sub_1D451B490();
          if (v2 - 1 == v10)
          {
            v47 = sub_1D42CB208();
            goto LABEL_32;
          }
          if (v10 + 1 >= v2)
            goto LABEL_36;
          p_start = *(_QWORD *)(v3 + 8 * v10 + 40);
          if (p_start >> 62)
          {
            sub_1D44C16CC();
            v4 = sub_1D451B5A4();
            sub_1D42B7204();
          }
          else
          {
            sub_1D44C1638();
          }
          ++v10;
          if (!v4)
            goto LABEL_43;
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_43:
      sub_1D42B7204();
      sub_1D42B7F2C();
      sub_1D42B6D0C();
      *v56 = 0;
      swift_willThrow();
      sub_1D42B7204();
      sub_1D42CB208();
      v49 = swift_release();
      goto LABEL_44;
    }
LABEL_42:
    sub_1D44C16CC();
    v4 = sub_1D451B5A4();
    sub_1D42B7204();
    if (v4)
      goto LABEL_6;
    goto LABEL_43;
  }
  v47 = sub_1D42CB208();
LABEL_32:
  sub_1D42EA3E0(v47, &qword_1EFE56358);
  sub_1D44C1674();
  sub_1D44BDEA4();
}

void sub_1D44BD638(void *a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  unint64_t v6;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedLongLong_, 0xFFFFFFFFLL);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedLongLong_, 0);
  v4 = objc_msgSend(a1, sel_compare_, v2);
  v5 = v2;
  if (v4 != (id)1)
  {
    if (objc_msgSend(a1, sel_compare_, v3) == (id)-1)
      v5 = v3;
    else
      v5 = a1;
  }
  v6 = (unint64_t)objc_msgSend(v5, sel_unsignedLongLongValue);

  if (HIDWORD(v6))
    __break(1u);
  else
    sub_1D42CB15C();
}

uint64_t sub_1D44BD6F0()
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  sub_1D451B49C();
  objc_msgSend(sub_1D44C16EC(), sel_initWithInteger_, 1);
  sub_1D44C15D8();
  sub_1D44C15B4();
  sub_1D44C15C8();
  sub_1D42CB4F0();
  objc_msgSend(sub_1D44C16EC(), sel_initWithInteger_, 96);
  sub_1D44C15D8();
  sub_1D44C15B4();
  sub_1D44C15C8();
  sub_1D42CB4F0();
  objc_msgSend(sub_1D44C16EC(), sel_initWithInteger_, 64);
  sub_1D44C15D8();
  sub_1D44C15B4();
  sub_1D44C15C8();
  sub_1D42CB4F0();
  return v1;
}

uint64_t sub_1D44BD7A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8;
  void *v9;
  id v10;

  v8 = sub_1D451A6C8();
  sub_1D42CB5C8();
  if (a5)
  {
    sub_1D42B28FC((uint64_t *)&unk_1EFE56340);
    v9 = (void *)sub_1D451A908();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_featureDescriptionWithName_type_optional_constraints_, v8, a3, a4 & 1, v9);
  sub_1D43B1B90();

  return a3;
}

uint64_t sub_1D44BD854(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = objc_msgSend(a1, sel_description);
  sub_1D451A6EC();

  sub_1D432E53C();
  v2 = sub_1D451B1F0();
  sub_1D42CB208();
  type metadata accessor for SNDetectSoundRequest();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
    sub_1D42B7204();
    sub_1D42ED118();
    v4 = v3;
    v2 = sub_1D451A6EC();

    swift_unknownObjectRelease();
  }
  return v2;
}

void sub_1D44BD958(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v35 = type metadata accessor for KShotSegment(0);
  MEMORY[0x1E0C80A78](v35);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_22;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    if (!v6)
      break;
    v43 = MEMORY[0x1E0DEE9D8];
    sub_1D44C16A8();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    v33 = a2;
    a2 = 0;
    v7 = v43;
    v34 = a1 & 0xC000000000000001;
    v8 = a1;
    while (v6 != a2)
    {
      if (v34)
        v9 = (id)MEMORY[0x1D825CD78](a2, a1);
      else
        v9 = sub_1D42CB2A4(a1 + 8 * a2);
      v10 = v9;
      v36 = 0;
      v37 = 0xE000000000000000;
      sub_1D451B400();
      swift_bridgeObjectRelease();
      v41 = 0x3D20656D614E207BLL;
      v42 = 0xE900000000000020;
      v11 = (uint64_t)v10 + OBJC_IVAR___SNKShotSegment_impl;
      swift_beginAccess();
      sub_1D42C13D8(v11, (uint64_t)v5);
      v12 = &v5[*(int *)(v35 + 20)];
      sub_1D4519B1C();
      v13 = sub_1D4519BC4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      sub_1D451A794();
      sub_1D42CB5C8();
      sub_1D451A794();
      v14 = *(_QWORD *)(v11 + 40);
      v15 = *(_QWORD *)(v11 + 8);
      v16 = *(_QWORD *)(v11 + 32);
      v17 = *(_OWORD *)(v11 + 16);
      v36 = *(_QWORD *)v11;
      v37 = v15;
      v38 = v17;
      v39 = v16;
      v40 = v14;
      sub_1D451A728();
      sub_1D451A794();
      swift_bridgeObjectRelease();
      sub_1D451A794();

      v18 = v41;
      v19 = v42;
      v43 = v7;
      v21 = *(_QWORD *)(v7 + 16);
      v20 = *(_QWORD *)(v7 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1D42DCE78(v20);
        sub_1D44C16E4();
        v7 = v43;
      }
      ++a2;
      *(_QWORD *)(v7 + 16) = v21 + 1;
      v22 = v7 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v18;
      *(_QWORD *)(v22 + 40) = v19;
      a1 = v8;
      if (v6 == a2)
      {
        a2 = v33;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
    v6 = sub_1D451B5A4();
    swift_bridgeObjectRelease();
  }
LABEL_14:
  if (qword_1EFE40338 != -1)
    swift_once();
  v23 = sub_1D451A014();
  sub_1D42CC880(v23, (uint64_t)qword_1EFEA7700);
  sub_1D42CB7B8();
  v24 = sub_1D4519FFC();
  v25 = sub_1D451AF74();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = sub_1D42CC940();
    *(_DWORD *)v26 = 134218240;
    v36 = *(_QWORD *)(v7 + 16);
    sub_1D44C16D8();
    sub_1D42BE8B4();
    *(_WORD *)(v26 + 12) = 2048;
    v36 = a2;
    sub_1D44C16D8();
    _os_log_impl(&dword_1D42A7000, v24, v25, "[Custom Sound Recognition Model Training] Completed segmentation successfully. Segment count: %ld. Exemplar index: %ld.", (uint8_t *)v26, 0x16u);
    sub_1D42CC934();
  }

  sub_1D42BE8B4();
  sub_1D42CB7B8();
  v27 = sub_1D4519FFC();
  v28 = sub_1D451AF74();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)sub_1D42CC940();
    v36 = sub_1D42CC940();
    *(_DWORD *)v29 = 136315138;
    v41 = v7;
    sub_1D42B28FC((uint64_t *)&unk_1EFE51A80);
    sub_1D432E578();
    v30 = sub_1D451A644();
    v41 = sub_1D43D72EC(v30, v31, &v36);
    sub_1D451B1A8();
    sub_1D437EEAC();
    sub_1D42B7204();
    _os_log_impl(&dword_1D42A7000, v27, v28, "[Custom Sound Recognition Model Training] Segments: %s).", v29, 0xCu);
    swift_arrayDestroy();
    sub_1D42CC934();
  }

  sub_1D437EEAC();
}

id sub_1D44BDEA4()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_1D42E9D88(0, (unint64_t *)&qword_1EFE47310);
  v1 = (void *)sub_1D451A908();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithEnumeratedDurations_, v1);

  return v2;
}

uint64_t sub_1D44BDF28(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1D44BE340(a1, 0);
  v2 = v1;
  if (*(_QWORD *)(v1 + 16) == 1)
  {
    v3 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain();
    sub_1D42CB208();
  }
  else
  {
    v4 = sub_1D42DCEE8();
    sub_1D451B400();
    sub_1D430740C();
    sub_1D451A794();
    MEMORY[0x1D825C280](v2, MEMORY[0x1E0DEA968]);
    sub_1D451A794();
    sub_1D42CB208();
    sub_1D42CB5C8();
    v5 = sub_1D446B6C4();
    v3 = v4;
    sub_1D43EC59C(v5, v6, 2, 0, v7, 0xE000000000000000);
    sub_1D42CB208();
    sub_1D42B7124();
  }
  return v3;
}

id sub_1D44BE024(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  sub_1D42E9D88(0, (unint64_t *)&qword_1EFE404B0);
  v3 = (void *)sub_1D451A908();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_constraintWithShape_dataType_, v3, a2);

  return v4;
}

uint64_t sub_1D44BE0AC(unint64_t a1, unsigned int a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  id v8;
  id v9;
  id v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  id v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 >> 62)
  {
    sub_1D42CB7B8();
    v4 = sub_1D42EA3D8();
    sub_1D42BE8B4();
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = v4 < 2;
  v6 = v4 - 2;
  if (v5 || a2 < 2)
  {
    if (a2 == 1)
    {
      v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInt_, sub_1D44BBDCC(a1));
LABEL_16:
      v16 = v8;
      sub_1D44BD638(v8);
      v18 = v17;

      return v18;
    }
    return 0;
  }
  sub_1D42D2E5C(v6, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0)
    sub_1D44C15E4();
  v9 = sub_1D42CB2A4(a1 + 8 * v6);
  v10 = objc_msgSend(v9, sel_integerValue);

  if (v10 != (id)a2)
    return 0;
  v11 = sub_1D44BBDCC(a1);
  if ((v11 & 0x80000000) == 0)
  {
    v12 = v11;
    v14 = sub_1D42CB2A4(a1 + 8 * v6);
    v15 = (unint64_t)objc_msgSend(v14, sel_unsignedIntegerValue);

    if (v15)
    {
      v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, v12 / v15);
      goto LABEL_16;
    }
    __break(1u);
  }
  result = sub_1D451B550();
  __break(1u);
  return result;
}

void sub_1D44BE340(void *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  void (*v38)(char *, _QWORD);
  char **v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  char v45[32];
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  type metadata accessor for SNModelMetadataUtils();
  v43 = a1;
  sub_1D44C976C(a1);
  v4 = v3;
  v5 = sub_1D44A531C(v3);
  if (!v5)
  {
    sub_1D42CB208();
    v10 = MEMORY[0x1E0DEE9D8];
LABEL_22:
    v39 = &selRef_inputDescriptionsByName;
    if ((a2 & 1) != 0)
      v39 = &selRef_outputDescriptionsByName;
    v40 = objc_msgSend(v43, *v39, v43);
    sub_1D42EA3E0((uint64_t)v40, (unint64_t *)&qword_1EFE40360);
    v41 = sub_1D451A5CC();

    v42 = sub_1D44C92C4(v41);
    sub_1D44C072C(v10, (uint64_t)v42);
    sub_1D42BE8B4();
    sub_1D44ACEBC();
    sub_1D42B7204();
    return;
  }
  v6 = v5;
  v49 = MEMORY[0x1E0DEE9D8];
  sub_1D44C16A8();
  if ((v4 & 0xC000000000000001) != 0)
  {
    v7 = sub_1D451B31C();
    v9 = 1;
  }
  else
  {
    v7 = sub_1D4397030(v4);
    v9 = v11 & 1;
  }
  v46 = v7;
  v47 = v8;
  v48 = v9;
  if ((v6 & 0x8000000000000000) == 0)
  {
    do
    {
      v13 = v46;
      v12 = v47;
      v14 = v48;
      v15 = sub_1D44C16F4();
      sub_1D4396DBC(v15, v16, v17, v18);
      v20 = v19;
      v21 = &v19[OBJC_IVAR___SNModelFeatureConnection_impl + 16];
      v22 = 8;
      if ((a2 & 1) != 0)
        v21 = &v19[OBJC_IVAR___SNModelFeatureConnection_impl];
      else
        v22 = 24;
      v23 = *(_QWORD *)&v19[OBJC_IVAR___SNModelFeatureConnection_impl + v22];
      v24 = *(_QWORD *)v21;
      sub_1D42CB7B8();

      v25 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1D44C16E4();
        v25 = v49;
      }
      v27 = *(_QWORD *)(v25 + 16);
      v26 = *(_QWORD *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_1D42DCE78(v26);
        sub_1D44C16E4();
        v25 = v49;
      }
      *(_QWORD *)(v25 + 16) = v27 + 1;
      v28 = v25 + 16 * v27;
      *(_QWORD *)(v28 + 32) = v24;
      *(_QWORD *)(v28 + 40) = v23;
      if ((v4 & 0xC000000000000001) != 0)
      {
        if ((v14 & 1) == 0)
          goto LABEL_26;
        if (sub_1D451B334())
          swift_isUniquelyReferenced_nonNull_native();
        sub_1D42B28FC((uint64_t *)&unk_1EFE567C0);
        v38 = (void (*)(char *, _QWORD))sub_1D451AC20();
        sub_1D451B388();
        v38(v45, 0);
      }
      else
      {
        v29 = sub_1D44C16F4();
        v33 = sub_1D44CE3D8(v29, v30, v31, v32);
        v35 = v34;
        v37 = v36;
        sub_1D430E804(v13, v12, v14);
        v46 = v33;
        v47 = v35;
        v48 = v37 & 1;
      }
      --v6;
    }
    while (v6);
    sub_1D430E804(v46, v47, v48);
    sub_1D42CB208();
    v10 = v49;
    goto LABEL_22;
  }
  __break(1u);
LABEL_26:
  __break(1u);
}

uint64_t sub_1D44BE698()
{
  uint64_t result;

  result = sub_1D44BE6B8();
  byte_1EFEA7A60 = result & 1;
  return result;
}

uint64_t sub_1D44BE6B8()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = objc_msgSend(v0, sel_processName);

  v2 = sub_1D451A6EC();
  v4 = v3;

  if (v2 == 0x616E61646E756F73 && v4 == 0xEE0064736973796CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D451B820();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

uint64_t sub_1D44BE7EC()
{
  uint64_t result;

  result = os_variant_allows_internal_security_policies();
  byte_1EFEA7718 = result;
  return result;
}

void sub_1D44BE840(__SecTask *a1@<X2>, uint64_t a2@<X8>)
{
  __CFString *v4;
  CFTypeRef v5;
  CFErrorRef v6;
  void *v7;
  CFErrorRef *v8;
  __CFError *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  CFErrorRef v13[2];

  v13[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v4 = (__CFString *)sub_1D451A6C8();
  v5 = SecTaskCopyValueForEntitlement(a1, v4, v13);

  v6 = v13[0];
  if (v13[0])
  {
    if (!v5)
    {
      sub_1D42DCEE8();
      type metadata accessor for CFError(0);
      sub_1D44C03F0();
      v7 = (void *)sub_1D42B6D0C();
      *v8 = v6;
      v9 = v6;
      v10 = (void *)sub_1D4519A98();
      sub_1D430740C();
      sub_1D43EC59C(0xD000000000000017, v11, 2, v10, v12, 0x80000001D455B700);

      sub_1D42B7124();
      return;
    }
    goto LABEL_6;
  }
  if (v5)
  {
    v6 = 0;
LABEL_6:
    *(_QWORD *)(a2 + 24) = swift_getObjectType();

    *(_QWORD *)a2 = v5;
    return;
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
}

void *sub_1D44BE9A4()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  sub_1D42B28FC(&qword_1EFE40410);
  v1 = sub_1D42B6F40();
  *(_OWORD *)(v1 + 16) = xmmword_1D45448C0;
  sub_1D42EA3E0(v1, (unint64_t *)&qword_1EFE404B0);
  *(_QWORD *)(v1 + 32) = sub_1D44C1708();
  *(_QWORD *)(v1 + 40) = sub_1D44C1708();
  *(_QWORD *)(v1 + 48) = sub_1D44C1708();
  sub_1D451A950();
  v2 = objc_allocWithZone(MEMORY[0x1E0C9E970]);
  v3 = sub_1D44C165C();
  v5 = sub_1D44C0430(v3, v4);
  v6 = v5;
  if (v0)
  {
    sub_1D42DCEE8();
    sub_1D4311F68();
    sub_1D430740C();
    sub_1D4311F20(v8, v9, (uint64_t)"Could not create MLMultiArray");
    sub_1D4312028();

  }
  else
  {
    MEMORY[0x1E0C80A78](v5);
    v7 = v6;
    sub_1D451AF20();

  }
  return v6;
}

id sub_1D44BEB30(_DWORD *a1, int a2, int a3, id a4)
{
  id result;
  int v6;
  _BYTE *v7;

  if (a1)
  {
    result = objc_msgSend(a4, sel_floatValue);
    *a1 = v6;
  }
  else
  {
    sub_1D42B7F2C();
    swift_allocError();
    *v7 = 0;
    return (id)swift_willThrow();
  }
  return result;
}

uint64_t sub_1D44BEBA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  sub_1D42EA3E0(a1, (unint64_t *)&qword_1EFE404B0);
  result = sub_1D451AF20();
  if (!v1)
    return v3;
  return result;
}

id sub_1D44BEC20@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  id v4;
  double v5;
  id result;
  _BYTE *v7;

  if (a1)
  {
    v3 = *a1;
    v4 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    LODWORD(v5) = v3;
    result = objc_msgSend(v4, sel_initWithFloat_, v5);
    *a2 = result;
  }
  else
  {
    sub_1D42B7F2C();
    swift_allocError();
    *v7 = 0;
    return (id)swift_willThrow();
  }
  return result;
}

id sub_1D44BECB0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void))
{
  id v6;
  void *v7;

  v6 = a3;
  v7 = (void *)a5();

  return v7;
}

void sub_1D44BED30(void *a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  void *v5;
  size_t v6;

  objc_msgSend(a1, sel_setFrameLength_, a2);
  v3 = objc_msgSend(a1, sel_mutableAudioBufferList);
  v4 = *(_DWORD *)v3;
  if (*(_DWORD *)v3)
  {
    v5 = (void *)v3[2];
    v6 = *((unsigned int *)v3 + 3);
    while (v5)
    {
      bzero(v5, v6);
      if (!--v4)
        return;
    }
    __break(1u);
  }
}

uint64_t sub_1D44BEE14(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  char v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = v3();
  swift_release();

  return v5 & 1;
}

id sub_1D44BEE80(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, int64_t, id *), int a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v8 = objc_msgSend(a1, sel_audioBufferList);
  v9 = v8[2];
  v12[0] = v8[1];
  v12[1] = v9;
  return sub_1D44BEF34((uint64_t)v12, a3, a4, a2, a1, &v11);
}

id sub_1D44BEF34(uint64_t a1, uint64_t (*a2)(uint64_t, int64_t, id *), int a3, uint64_t a4, id a5, _QWORD *a6)
{
  uint64_t v6;
  id v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  int64_t v14;
  char v15;
  id v16;
  id result;
  id v18;
  id v19;
  id v20[2];

  v20[1] = *(id *)MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16 * a4 + 8);
  if (!v6)
LABEL_8:
    __break(1u);
  v10 = objc_msgSend(a5, sel_format);
  v11 = (unsigned int *)objc_msgSend(v10, sel_streamDescription);

  v12 = v11[8];
  v13 = objc_msgSend(a5, sel_frameLength);
  v14 = v12 * (unint64_t)v13;
  if ((v12 * (unsigned __int128)v13) >> 64 != v14 >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  v20[0] = 0;
  v15 = a2(v6, v14 / 8, v20);
  v16 = v20[0];
  if ((v15 & 1) != 0)
    return v20[0];
  type metadata accessor for SNError();
  v18 = v16;
  v19 = sub_1D43EC59C(0xD000000000000017, 0x80000001D4551120, 1, 0, 0xD000000000000025, 0x80000001D4552020);
  result = (id)swift_willThrow();
  *a6 = v19;
  return result;
}

void sub_1D44BF0C0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t (*v10)(_QWORD *, void *, id *);
  id v11;
  id v12;
  id v13;
  _QWORD v14[6];
  id v15[2];

  v15[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a2;
  v8[4] = a1;
  v14[5] = v8;
  v15[0] = 0;
  v14[4] = sub_1D44C15B0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_1D44BF59C;
  v14[3] = &unk_1E97B3718;
  v9 = _Block_copy(v14);
  v10 = (uint64_t (*)(_QWORD *, void *, id *))a4[2];
  swift_retain();
  swift_retain();
  LOBYTE(a1) = v10(a4, v9, v15);
  _Block_release(v9);
  swift_release();
  v11 = v15[0];
  if ((a1 & 1) != 0)
  {
    v12 = v15[0];
  }
  else
  {
    type metadata accessor for SNError();
    v13 = v11;
    sub_1D43EC59C(0xD000000000000017, 0x80000001D4551120, 1, 0, 0xD000000000000025, 0x80000001D4552020);
    swift_willThrow();
  }
  swift_release();
  swift_release();
  _Block_release(a4);
}

uint64_t sub_1D44BF270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned int a7, char a8, uint64_t (*a9)(void *, id, id *), uint64_t a10, uint64_t (*a11)(void *, id, id *), uint64_t a12)
{
  uint64_t v15;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v25;

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a2;
  v16[4] = a1;
  swift_retain();
  v17 = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1D44BF600(v17, a6, a7, a8, a9, a10, a11, a12, (uint64_t)sub_1D44C1424, (uint64_t)v16);
  if (v25)
  {
    v18 = (id)sub_1D4519A98();

  }
  else
  {
    v18 = 0;
  }
  swift_release();

  swift_release();
  swift_release();
  if (v25)
  {
    type metadata accessor for SNError();
    v19 = v18;
    sub_1D43EC59C(0xD000000000000017, 0x80000001D4551120, 1, 0, 0xD000000000000025, 0x80000001D4552020);
    swift_willThrow();
  }
  else
  {
    v20 = v18;
  }
  swift_release();
  swift_release();

  swift_release();
  return swift_release();
}

uint64_t sub_1D44BF444(const void *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v11 = (_QWORD *)(a4 + 16);
  result = swift_beginAccess();
  v13 = *(_QWORD *)(a4 + 16);
  v14 = v13 + a2;
  if (__OFADD__(v13, a2))
  {
    __break(1u);
  }
  else
  {
    if (v14 > a5)
      return v14 <= a5;
    memcpy((void *)(a6 + v13), a1, a2);
    result = swift_beginAccess();
    if (!__OFADD__(*v11, a2))
    {
      *v11 += a2;
      return v14 <= a5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D44BF59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a4) = v7(a2, a3, a4);
  swift_release();
  return a4 & 1;
}

void sub_1D44BF600(void *a1, uint64_t a2, unsigned int a3, char a4, uint64_t (*a5)(void *, id, id *), uint64_t a6, uint64_t (*a7)(void *, id, id *), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v16;
  double v17;
  void *v18;
  void *v19;

  v16 = (_QWORD *)sub_1D42B6F40();
  v16[2] = v10;
  v16[3] = a9;
  v16[4] = a10;
  type metadata accessor for SNAudioFileUtils();
  v17 = (double)*(int *)(a2 + 32);
  swift_retain();
  sub_1D4469F28(a1, v17);
  if (v11)
  {
    swift_release();
  }
  else
  {
    v19 = v18;
    objc_msgSend(v18, sel_setFramePosition_, 0);
    sub_1D446A9AC(v19, a2, 0, a3, a4 & 1, a5, a6, a7, a8, (uint64_t (*)(void *, id *))sub_1D44C1454, (uint64_t)v16);
    swift_release();

  }
}

uint64_t sub_1D44BF724(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, int64_t, id *), int a5)
{
  id v7;

  v7 = a1;
  swift_retain();
  sub_1D44BEE80(v7, 0, a4, a5);
  swift_release();

  return 1;
}

unint64_t sub_1D44BF95C(void *a1, uint64_t a2, unsigned int a3, char a4, uint64_t (*a5)(void *, id, id *), uint64_t a6, uint64_t (*a7)(void *, id, id *), uint64_t a8, uint64_t a9)
{
  void *v9;
  id v10;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  unint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void *, id, id *);
  unsigned int v46;
  uint64_t v47;
  uint64_t v50;
  uint64_t v51;

  v10 = v9;
  v17 = objc_msgSend(a1, sel_processingFormat);
  v18 = objc_msgSend(v17, sel_commonFormat);

  if (v18 != (id)1)
  {
    sub_1D42DCEE8();
    sub_1D4311F68();
    sub_1D430740C();
    v26 = "unsupported audio file format; need float32";
LABEL_20:
    sub_1D4311F20(v24, v25, (uint64_t)v26);
    sub_1D4312028();
    return (unint64_t)v10;
  }
  if (!a9)
  {
    sub_1D42DCEE8();
    sub_1D4311F68();
    sub_1D430740C();
    v26 = "bad num dimensions; need >0";
    goto LABEL_20;
  }
  v19 = a9 - 1;
  if (__OFSUB__(a9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v19 < 0)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    sub_1D44300D0();
    v27 = v42;
    goto LABEL_13;
  }
  v45 = a5;
  v46 = a3;
  v47 = a8;
  v20 = MEMORY[0x1E0DEE9D8];
  if (a9 != 1)
  {
    v21 = a2;
    v51 = MEMORY[0x1E0DEE9D8];
    sub_1D42C7B34();
    v20 = v51;
    v22 = *(_QWORD *)(v51 + 16);
    do
    {
      v23 = *(_QWORD *)(v51 + 24);
      if (v22 >= v23 >> 1)
      {
        sub_1D42DCE78(v23);
        sub_1D42C7B34();
      }
      *(_QWORD *)(v51 + 16) = v22 + 1;
      *(_QWORD *)(v51 + 8 * v22++ + 32) = 1;
      --v19;
    }
    while (v19);
    a2 = v21;
  }
  sub_1D42CB6CC();
  v27 = v20;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_27;
LABEL_13:
  v29 = *(_QWORD *)(v27 + 16);
  v28 = *(_QWORD *)(v27 + 24);
  if (v29 >= v28 >> 1)
  {
    sub_1D42DCE78(v28);
    sub_1D44300D0();
    v27 = v43;
  }
  v44 = (uint64_t)v10;
  v30 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v27 + 16) = v29 + 1;
  *(_QWORD *)(v27 + 8 * v29 + 32) = v30;
  swift_bridgeObjectRelease();
  v31 = *(id *)(v27 + 16);
  if (v31)
  {
    sub_1D451B49C();
    v32 = 0;
    do
    {
      v10 = (char *)v32 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithLongLong_, *(_QWORD *)(v27 + 8 * (_QWORD)v32 + 32));
      sub_1D451B484();
      sub_1D451B4A8();
      sub_1D451B4B4();
      sub_1D451B490();
      v32 = v10;
    }
    while (v31 != v10);
  }
  swift_bridgeObjectRelease();
  v33 = objc_allocWithZone(MEMORY[0x1E0C9E970]);
  v34 = sub_1D44C165C();
  v36 = sub_1D44C0430(v34, v35);
  if (v50)
    return (unint64_t)v10;
  v37 = v36;
  v38 = a1;
  swift_retain_n();
  swift_retain_n();
  v39 = v38;
  v10 = objc_retainAutorelease(v37);
  v40 = objc_msgSend(v10, sel_dataPointer);
  result = (unint64_t)objc_msgSend(v10, sel_count);
  if ((result - 0x2000000000000000) >> 62 == 3)
  {
    sub_1D44BF270((uint64_t)v40, 4 * result, v44, v44, v39, a2, v46, a4 & 1, v45, a6, a7, v47);
    swift_release();
    swift_release();

    return (unint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D44BFEA0(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  dispatch_semaphore_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t result;
  double v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  _QWORD v27[4];
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v3 = sub_1D451A434();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (_QWORD *)((char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_1D451A494();
  v27[3] = *(_QWORD *)(v29 - 8);
  v7 = MEMORY[0x1E0C80A78](v29);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v28 = (char *)v27 - v10;
  v11 = dispatch_semaphore_create(0);
  v12 = sub_1D42B6F40();
  *(_QWORD *)(v12 + 16) = 0;
  v27[2] = v12 + 16;
  *(_BYTE *)(v12 + 24) = -1;
  sub_1D42EA3E0(v12, (unint64_t *)&qword_1EFE404A0);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9E958]), sel_init);
  v14 = sub_1D42B6F40();
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v11;
  swift_retain();
  v15 = v11;
  sub_1D451B0B8();

  swift_release();
  result = sub_1D451A47C();
  v17 = a2 * 1000.0;
  if ((~COERCE__INT64(a2 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v17 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *v6 = (uint64_t)v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF490], v3);
  v18 = (uint64_t)v28;
  sub_1D451A488();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  sub_1D44380F8((uint64_t)v9);
  sub_1D451B028();
  if ((sub_1D451A440() & 1) == 0)
  {
    sub_1D42DCEE8();
    sub_1D4311F68();
    sub_1D430740C();
    v23 = 0x80000001D455B740;
    v20 = 0xD000000000000017;
    goto LABEL_8;
  }
  swift_beginAccess();
  v19 = *(unsigned __int8 *)(v12 + 24);
  if (v19 == 255)
  {
    sub_1D42DCEE8();
    v20 = sub_1D446B6C4();
    v22 = 0x6C65646F6D206F6ELL;
    v23 = 0xEF646564616F6C20;
LABEL_8:
    sub_1D43EC59C(v20, v21, 1, 0, v22, v23);
LABEL_9:
    swift_willThrow();

    sub_1D44380F8(v18);
    return swift_release();
  }
  if ((v19 & 1) != 0)
  {
    sub_1D43D627C(*(id *)(v12 + 16));
    goto LABEL_9;
  }
  v24 = *(id *)(v12 + 16);
  v25 = v18;
  v26 = v24;
  sub_1D44380F8(v25);
  swift_release();

  return (uint64_t)v26;
}

uint64_t sub_1D44C0208(void *a1, char a2, uint64_t a3)
{
  void *v6;
  unsigned __int8 v7;

  swift_beginAccess();
  v6 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a1;
  v7 = *(_BYTE *)(a3 + 24);
  *(_BYTE *)(a3 + 24) = a2 & 1;
  sub_1D44C13B0(v6, v7);
  sub_1D43D627C(a1);
  return sub_1D451B034();
}

id sub_1D44C037C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for SNUtils()
{
  return objc_opt_self();
}

unint64_t sub_1D44C03F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFE562C8;
  if (!qword_1EFE562C8)
  {
    type metadata accessor for CFError(255);
    result = MEMORY[0x1D825E41C](MEMORY[0x1E0CB1C60], v1);
    atomic_store(result, (unint64_t *)&qword_1EFE562C8);
  }
  return result;
}

id sub_1D44C0430(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  sub_1D42EA3E0(a1, (unint64_t *)&qword_1EFE404B0);
  v4 = (void *)sub_1D451A908();
  sub_1D42CB5C8();
  v9[0] = 0;
  v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, v4, a2, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    sub_1D4519AA4();

    sub_1D42B7124();
  }
  return v5;
}

uint64_t sub_1D44C051C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 16))
  {
    v18 = a1;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v5 = 0;
      v6 = a2 + 56;
      v17 = -1 << *(_BYTE *)(a2 + 32);
      v7 = ~v17;
      while (1)
      {
        v8 = *(_QWORD *)(a1 + 32 + 8 * v5++);
        v9 = sub_1D451B94C();
        v10 = v9 & v7;
        if (((*(_QWORD *)(v6 + (((v9 & (unint64_t)v7) >> 3) & 0xFFFFFFFFFFFFF8)) >> (v9 & v7)) & 1) != 0)
          break;
LABEL_7:
        if (v5 == v4)
          return v2;
      }
      while (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10) != v8)
      {
        v10 = (v10 + 1) & v7;
        if (((*(_QWORD *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          goto LABEL_7;
      }
      v19 = v5;
      isStackAllocationSafe = swift_bridgeObjectRetain();
      if ((unint64_t)(63 - v17) >> 6 < 0x81
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
      {
        MEMORY[0x1E0C80A78](isStackAllocationSafe);
        sub_1D44C1710((char *)&v16 - v12);
        v13 = sub_1D44C15EC();
        sub_1D42BE93C();
        if (!v10)
        {
          swift_bridgeObjectRelease();
          return v13;
        }
        swift_willThrow();

        __break(1u);
      }
      else
      {
        v14 = (void *)sub_1D42CC940();
        sub_1D44C1710(v14);
        sub_1D44C15EC();
        sub_1D44C1674();
        swift_release();
        if (!v10)
        {
          swift_bridgeObjectRelease();
          sub_1D42CC934();
        }
      }
      sub_1D42D71D8();
      sub_1D42CC934();
    }
  }
  else
  {
    sub_1D42BE93C();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t sub_1D44C072C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t isStackAllocationSafe;
  char v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v26 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    while (1)
    {
      v6 = (uint64_t *)(v25[0] + 16 * v5);
      v8 = *v6;
      v7 = v6[1];
      ++v5;
      sub_1D451B958();
      swift_bridgeObjectRetain();
      sub_1D451A74C();
      v9 = sub_1D451B994();
      v10 = -1 << *(_BYTE *)(v2 + 32);
      v11 = v9 & ~v10;
      if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v12 = *(_QWORD *)(v2 + 48);
        v13 = (_QWORD *)(v12 + 16 * v11);
        v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (sub_1D451B820() & 1) != 0)
        {
          isStackAllocationSafe = swift_bridgeObjectRelease();
          v27 = v5;
LABEL_22:
          v19 = *(_BYTE *)(v2 + 32);
          v20 = (unint64_t)((1 << v19) + 63) >> 6;
          v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
          {
            MEMORY[0x1E0C80A78](isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v21);
            v22 = sub_1D44C0BC4((uint64_t)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            v22 = sub_1D44C0BC4((uint64_t)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            MEMORY[0x1D825E524](v23, -1, -1);
          }
          return v22;
        }
        v15 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v15;
          if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
            break;
          v16 = (_QWORD *)(v12 + 16 * v11);
          v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (sub_1D451B820() & 1) != 0)
          {
            v27 = v5;
            isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_22;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }
  return v2;
}

uint64_t sub_1D44C0A38(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v21;
  unint64_t v22;

  v6 = (unint64_t *)result;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v10 = *a5;
  v9 = a5[1];
  v11 = *(_QWORD *)(*a5 + 16);
  if (v9 == v11)
  {
LABEL_16:
    swift_retain();
    return sub_1D44C0DE8(v6, a2, v8, a3);
  }
  else
  {
    v13 = a3 + 56;
    v14 = ~(-1 << *(_BYTE *)(a3 + 32));
    while (v9 < v11)
    {
      if (__OFADD__(v9, 1))
        goto LABEL_19;
      v15 = *(_QWORD *)(v10 + 32 + 8 * v9);
      a5[1] = v9 + 1;
      result = sub_1D451B94C();
      v16 = result & v14;
      v17 = (result & (unint64_t)v14) >> 6;
      v18 = 1 << (result & v14);
      if ((v18 & *(_QWORD *)(v13 + 8 * v17)) != 0)
      {
        v19 = *(_QWORD *)(a3 + 48);
        if (*(_QWORD *)(v19 + 8 * v16) == v15)
        {
LABEL_12:
          v22 = v6[v17];
          v6[v17] = v22 & ~v18;
          if ((v18 & v22) != 0)
          {
            if (__OFSUB__(v8--, 1))
              goto LABEL_20;
            if (!v8)
              return MEMORY[0x1E0DEE9E8];
          }
        }
        else
        {
          for (i = v16 + 1; ; i = v21 + 1)
          {
            v21 = i & v14;
            if (((*(_QWORD *)(v13 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
              break;
            if (*(_QWORD *)(v19 + 8 * v21) == v15)
            {
              v17 = v21 >> 6;
              v18 = 1 << v21;
              goto LABEL_12;
            }
          }
        }
      }
      v9 = a5[1];
      v11 = *(_QWORD *)(v10 + 16);
      if (v9 == v11)
        goto LABEL_16;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D44C0BC4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v30 = (unint64_t *)result;
  v31 = v6 - 1;
  v8 = *a5;
  v7 = a5[1];
  v9 = *(_QWORD *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return sub_1D44C1024(v30, a2, v31, a3);
  }
  v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9)
      goto LABEL_30;
    v11 = v8 + 16 * v7;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_QWORD *)(v11 + 40);
    a5[1] = v7 + 1;
    sub_1D451B958();
    swift_bridgeObjectRetain();
    sub_1D451A74C();
    v14 = sub_1D451B994();
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    v18 = 1 << v16;
    if (((1 << v16) & *(_QWORD *)(v32 + 8 * (v16 >> 6))) == 0)
      goto LABEL_25;
    v19 = *(_QWORD *)(a3 + 48);
    v20 = (_QWORD *)(v19 + 16 * v16);
    v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (sub_1D451B820() & 1) == 0)
    {
      v24 = ~v15;
      for (i = v16 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v19 + 16 * v26);
        v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (sub_1D451B820() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v17 = v26 >> 6;
          v18 = 1 << v26;
          goto LABEL_13;
        }
      }
LABEL_25:
      result = swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    result = swift_bridgeObjectRelease();
LABEL_13:
    v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      v23 = v31 - 1;
      if (__OFSUB__(v31, 1))
        goto LABEL_31;
      --v31;
      if (!v23)
        return MEMORY[0x1E0DEE9E8];
    }
LABEL_26:
    v8 = *a5;
    v7 = a5[1];
    v9 = *(_QWORD *)(*a5 + 16);
    if (v7 == v9)
      goto LABEL_2;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1D44C0DE8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x1E0DEE9E8];
LABEL_35:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_1D42B28FC(&qword_1EFE567F0);
  result = sub_1D451B3E8();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_35;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_35;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_35;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = sub_1D451B94C();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) == 0)
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
        if (v26 != -1)
        {
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_35;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_35;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1D44C1024(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_35:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_1D42B28FC((uint64_t *)&unk_1EFE562D0);
  result = sub_1D451B3E8();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_1D451B958();
    swift_bridgeObjectRetain();
    sub_1D451A74C();
    result = sub_1D451B994();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1D44C12B0(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_classLabels);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1D451A92C();

  return v3;
}

unint64_t sub_1D44C1308()
{
  unint64_t result;

  result = qword_1EFE56350;
  if (!qword_1EFE56350)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D88C, &type metadata for SNUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_1EFE56350);
  }
  return result;
}

uint64_t sub_1D44C1344()
{
  uint64_t v0;

  if (*(unsigned __int8 *)(v0 + 24) != 255)
    sub_1D4486CE8(*(id *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1D44C1378()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1D44C13A4(void *a1, char a2)
{
  uint64_t v2;

  return sub_1D44C0208(a1, a2 & 1, *(_QWORD *)(v2 + 16));
}

void sub_1D44C13B0(id a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_1D4486CE8(a1);
}

uint64_t sub_1D44C13C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1D44C13F0()
{
  return swift_deallocObject();
}

uint64_t sub_1D44C1400()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44C1424(const void *a1, size_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1D44BF444(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_1D44C1430()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44C1454(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1D44BF724(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(uint64_t, int64_t, id *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1D44C1460()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1D44C1484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D44C1494()
{
  return swift_release();
}

id sub_1D44C149C(_DWORD *a1, int a2, int a3)
{
  uint64_t v3;

  return sub_1D44BEB30(a1, a2, a3, *(id *)(v3 + 16));
}

uint64_t storeEnumTagSinglePayload for SNUtils.DomainError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D44C14F4 + 4 * byte_1D454D7F8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D44C1514 + 4 * byte_1D454D7FD[v4]))();
}

_BYTE *sub_1D44C14F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D44C1514(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44C151C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44C1524(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44C152C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44C1534(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SNUtils.DomainError()
{
  return &type metadata for SNUtils.DomainError;
}

unint64_t sub_1D44C1554()
{
  unint64_t result;

  result = qword_1EFE56370;
  if (!qword_1EFE56370)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D864, &type metadata for SNUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_1EFE56370);
  }
  return result;
}

uint64_t sub_1D44C15B4()
{
  return sub_1D451B4A8();
}

uint64_t sub_1D44C15C8()
{
  return sub_1D451B4B4();
}

uint64_t sub_1D44C15D8()
{
  return sub_1D451B484();
}

void sub_1D44C15E4()
{
  JUMPOUT(0x1D825CD78);
}

uint64_t sub_1D44C15EC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_1D44C0A38(v2, v3, v0, v1, (_QWORD *)(v4 - 104));
}

id sub_1D44C1608(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1D44C1610()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1D42D2E5C(v1, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t sub_1D44C1624(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1D44BD7A4(a1, a2, 5, 0, v2);
}

uint64_t sub_1D44C1638()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1D44C164C()
{
  return sub_1D451A5E4();
}

uint64_t sub_1D44C165C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44C1674()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44C168C()
{
  return sub_1D451B49C();
}

id sub_1D44C169C()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, (SEL)(v0 + 3166));
}

void sub_1D44C16A8()
{
  sub_1D42C71F0();
}

uint64_t sub_1D44C16B4()
{
  return sub_1D451A92C();
}

uint64_t sub_1D44C16C0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return sub_1D451A950();
}

uint64_t sub_1D44C16CC()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1D44C16D8()
{
  return sub_1D451B1A8();
}

void sub_1D44C16E4()
{
  sub_1D42C71F0();
}

id sub_1D44C16EC()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 2024));
}

uint64_t sub_1D44C16F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44C1708()
{
  return sub_1D451B0F4();
}

void *sub_1D44C1710(void *a1)
{
  const void *v1;
  size_t v2;

  return memcpy(a1, v1, v2);
}

uint64_t sub_1D44C171C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 80) = result;
  return result;
}

void sub_1D44C1730(double a1)
{
  uint64_t v1;

  *(double *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 48) = a1;
}

double SNAudioCorrelationResult.timeRange.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = v1 + OBJC_IVAR___SNAudioCorrelationResult_impl;
  *(_QWORD *)v3 = *(_QWORD *)a1;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a1 + 16);
  result = *(double *)(a1 + 32);
  *(double *)(v3 + 32) = result;
  *(_QWORD *)(v3 + 40) = v2;
  return result;
}

uint64_t sub_1D44C177C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + OBJC_IVAR___SNAudioCorrelationResult_impl);
  v4[7] = result;
  v4[8] = a2;
  v4[9] = a3;
  return result;
}

uint64_t sub_1D44C179C()
{
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  return sub_1D451B964();
}

BOOL sub_1D44C1880(double *a1, double *a2)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL8 result;
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 5);
  v4 = a1[6];
  v5 = *((_QWORD *)a1 + 7);
  v6 = *((_DWORD *)a1 + 16);
  v7 = *((_DWORD *)a1 + 17);
  v9 = *((_QWORD *)a1 + 9);
  v8 = *((_QWORD *)a1 + 10);
  v10 = *a2;
  v11 = a2[6];
  v12 = *((_QWORD *)a2 + 7);
  v13 = *((_DWORD *)a2 + 16);
  v14 = *((_DWORD *)a2 + 17);
  v16 = *((_QWORD *)a2 + 9);
  v15 = *((_QWORD *)a2 + 10);
  v26 = *((_QWORD *)a2 + 5);
  *(double *)v27 = v2;
  *(double *)&v27[1] = a1[1];
  v28 = *((_OWORD *)a1 + 1);
  v29 = *((_QWORD *)a1 + 4);
  v30 = v3;
  *(double *)v23 = v10;
  *(double *)&v23[1] = a2[1];
  v24 = *((_OWORD *)a2 + 1);
  v25 = *((_QWORD *)a2 + 4);
  v17 = static TimeRange.== infix(_:_:)((uint64_t)v27, (uint64_t)v23);
  result = 0;
  if (v17 && v4 == v11 && v5 == v12 && v6 == v13 && v7 == v14 && v9 == v16)
    return v8 == v15;
  return result;
}

uint64_t sub_1D44C196C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x676E6152656D6974 && a2 == 0xE900000000000065;
  if (v2 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x756C61566B616570 && a2 == 0xE900000000000065;
    if (v6 || (sub_1D451B820() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x656D69546B616570 && a2 == 0xE800000000000000;
      if (v7 || (sub_1D451B820() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x496C656E6E616863 && a2 == 0xEC0000007865646ELL)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = sub_1D451B820();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_1D44C1B48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D44C1B80 + 4 * byte_1D454D8E0[a1]))(0x676E6152656D6974, 0xE900000000000065);
}

uint64_t sub_1D44C1B80()
{
  return 0x756C61566B616570;
}

uint64_t sub_1D44C1B94()
{
  return 0x656D69546B616570;
}

uint64_t sub_1D44C1BAC()
{
  return 0x496C656E6E616863;
}

uint64_t sub_1D44C1BCC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v2 = v1;
  v4 = sub_1D42B28FC(&qword_1EFE563A0);
  v20 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  v9 = v2[2];
  v8 = v2[3];
  v21 = v2[5];
  v10 = v2[7];
  v11 = v2[8];
  v18 = v2[9];
  v19 = v10;
  v17 = v2[10];
  sub_1D42B5528(a1, a1[3]);
  sub_1D44C2F88();
  sub_1D451BA24();
  v23 = v7;
  v24 = v2[1];
  v25 = v9;
  v26 = v8;
  v27 = v2[4];
  v28 = v21;
  v29 = 0;
  sub_1D42CA408();
  sub_1D44C31F0();
  v12 = v22;
  sub_1D451B760();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  v15 = v18;
  v14 = v19;
  v16 = v20;
  LOBYTE(v23) = 1;
  sub_1D451B73C();
  v23 = v14;
  v24 = v11;
  v25 = v15;
  v29 = 2;
  sub_1D42CA054();
  sub_1D44C31F0();
  sub_1D451B760();
  LOBYTE(v23) = 3;
  sub_1D451B754();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v6, v4);
}

uint64_t sub_1D44C1DBC()
{
  sub_1D451B958();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B964();
  return sub_1D451B994();
}

uint64_t sub_1D44C1EF0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = sub_1D42B28FC(&qword_1EFE56390);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42B5528(a1, a1[3]);
  sub_1D44C2F88();
  sub_1D451BA0C();
  if (!v2)
  {
    sub_1D42CA3CC();
    sub_1D44C31A0();
    sub_1D44C31BC(1);
    sub_1D451B664();
    v7 = v6;
    sub_1D42C9FC0();
    sub_1D44C31A0();
    sub_1D44C31BC(3);
    v9 = sub_1D451B67C();
    sub_1D42F8674();
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v12;
    a2[3] = v13;
    a2[4] = v14;
    a2[5] = v15;
    a2[6] = v7;
    a2[7] = v10;
    a2[8] = v11;
    a2[9] = v12;
    a2[10] = v9;
  }
  return sub_1D42B5400((uint64_t)a1);
}

uint64_t sub_1D44C20B4()
{
  unsigned __int8 *v0;

  return sub_1D44C1B48(*v0);
}

uint64_t sub_1D44C20BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44C196C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44C20E0()
{
  sub_1D44C2F88();
  return sub_1D451BA3C();
}

uint64_t sub_1D44C2108()
{
  sub_1D44C2F88();
  return sub_1D451BA48();
}

uint64_t sub_1D44C2138()
{
  sub_1D451B958();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B964();
  return sub_1D451B994();
}

uint64_t sub_1D44C2268@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D44C1EF0(a1, a2);
}

uint64_t sub_1D44C227C(_QWORD *a1)
{
  return sub_1D44C1BCC(a1);
}

double SNAudioCorrelationResult.timeRange.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = v1 + OBJC_IVAR___SNAudioCorrelationResult_impl;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 + 16);
  result = *(double *)(v2 + 32);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = v3;
  return result;
}

double (*SNAudioCorrelationResult.timeRange.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  SNAudioCorrelationResult.timeRange.getter((uint64_t)v3);
  return sub_1D44C23C4;
}

double sub_1D44C23C4(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  double result;

  v1 = *a1;
  v2 = v1[5];
  v3 = v1[6] + OBJC_IVAR___SNAudioCorrelationResult_impl;
  v4 = v1[1];
  v5 = v1[4];
  v6 = *((_OWORD *)v1 + 1);
  *(_QWORD *)v3 = *v1;
  *(_QWORD *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 32) = v5;
  *(_QWORD *)(v3 + 40) = v2;
  free(v1);
  return result;
}

double sub_1D44C2420()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR___SNAudioCorrelationResult_impl + 48);
}

uint64_t sub_1D44C2488()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SNAudioCorrelationResult_impl + 56);
}

uint64_t sub_1D44C24E8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SNAudioCorrelationResult_impl + 80);
}

id sub_1D44C2520()
{
  char *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_super v9;

  v1 = (objc_class *)sub_1D42B7104();
  v2 = MEMORY[0x1E0CA2E40];
  v3 = MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
  v5 = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v7 = &v0[OBJC_IVAR___SNAudioCorrelationResult_impl];
  *(_QWORD *)v7 = *MEMORY[0x1E0CA2E40];
  *((_QWORD *)v7 + 1) = *(_QWORD *)(v2 + 8);
  *((_OWORD *)v7 + 1) = *(_OWORD *)(v2 + 16);
  *((_QWORD *)v7 + 4) = *(_QWORD *)(v2 + 32);
  *((_QWORD *)v7 + 5) = v4;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = v5;
  *((_QWORD *)v7 + 8) = *(_QWORD *)(v3 + 8);
  *((_QWORD *)v7 + 9) = v6;
  *((_QWORD *)v7 + 10) = 0;
  v9.receiver = v0;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id sub_1D44C25CC()
{
  uint64_t v0;
  objc_class *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_super v8;

  v2 = (char *)sub_1D42B7238();
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = &v2[OBJC_IVAR___SNAudioCorrelationResult_impl];
  *(_QWORD *)v6 = *(_QWORD *)v0;
  *((_QWORD *)v6 + 1) = *(_QWORD *)(v0 + 8);
  *((_OWORD *)v6 + 1) = *(_OWORD *)(v0 + 16);
  *((_QWORD *)v6 + 4) = *(_QWORD *)(v0 + 32);
  *((_QWORD *)v6 + 5) = v3;
  *((_QWORD *)v6 + 6) = v4;
  *((_QWORD *)v6 + 7) = v5;
  *((_QWORD *)v6 + 8) = *(_QWORD *)(v0 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(v0 + 72);
  v8.receiver = v2;
  v8.super_class = v1;
  return objc_msgSendSuper2(&v8, sel_init);
}

void SNAudioCorrelationResult.copy(with:)(_QWORD *a1@<X8>)
{
  uint64_t v2;
  id v3;

  v2 = sub_1D42B7104();
  sub_1D44C3150(OBJC_IVAR___SNAudioCorrelationResult_impl);
  v3 = sub_1D44C31E4();
  a1[3] = v2;
  *a1 = v3;
  sub_1D44C31D4();
}

uint64_t SNAudioCorrelationResult.hash.getter()
{
  sub_1D44C3150(OBJC_IVAR___SNAudioCorrelationResult_impl);
  return sub_1D44C1DBC();
}

BOOL SNAudioCorrelationResult.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  double v13[2];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  double v21[2];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  uint64_t v31;

  sub_1D42B7104();
  sub_1D42B28B4(a1, (uint64_t)&v30);
  if (v31)
  {
    sub_1D42B293C(&v30, v29);
    sub_1D42B294C((uint64_t)v29, (uint64_t)v21);
    if (swift_dynamicCast())
    {
      v3 = v13[0];
      v4 = *(_QWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 40);
      v5 = *(_QWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 48);
      v6 = *(_QWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 56);
      v21[0] = *(double *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl);
      v21[1] = *(double *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 8);
      v22 = *(_OWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 16);
      v23 = *(_QWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 32);
      v24 = v4;
      v25 = v5;
      v26 = v6;
      v27 = *(_QWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 64);
      v28 = *(_OWORD *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl + 72);
      v7 = *(_QWORD *)&v13[0] + OBJC_IVAR___SNAudioCorrelationResult_impl;
      v8 = *(_QWORD *)(*(_QWORD *)&v13[0] + OBJC_IVAR___SNAudioCorrelationResult_impl + 40);
      v9 = *(_QWORD *)(*(_QWORD *)&v13[0] + OBJC_IVAR___SNAudioCorrelationResult_impl + 48);
      v10 = *(_QWORD *)(*(_QWORD *)&v13[0] + OBJC_IVAR___SNAudioCorrelationResult_impl + 56);
      v13[0] = *(double *)(*(_QWORD *)&v13[0] + OBJC_IVAR___SNAudioCorrelationResult_impl);
      v13[1] = *(double *)(v7 + 8);
      v14 = *(_OWORD *)(v7 + 16);
      v15 = *(_QWORD *)(v7 + 32);
      v16 = v8;
      v17 = v9;
      v18 = v10;
      v19 = *(_QWORD *)(v7 + 64);
      v20 = *(_OWORD *)(v7 + 72);
      v11 = sub_1D44C1880(v21, v13);

    }
    else
    {
      v11 = 0;
    }
    sub_1D42B5400((uint64_t)v29);
  }
  else
  {
    return 0;
  }
  return v11;
}

id SNAudioCorrelationResult.__allocating_init(coder:)()
{
  void *v0;

  sub_1D42B7238();
  return SNAudioCorrelationResult.init(coder:)(v0);
}

id SNAudioCorrelationResult.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  id v4;

  v3 = v1;
  sub_1D42B24C0();
  swift_getObjectType();

  v4 = sub_1D44C31E4();
  sub_1D44C3218();
  return v4;
}

Swift::Void __swiftcall SNAudioCorrelationResult.encode(with:)(NSCoder with)
{
  uint64_t v1;
  _BYTE __dst[88];

  memcpy(__dst, (const void *)(v1 + OBJC_IVAR___SNAudioCorrelationResult_impl), sizeof(__dst));
  sub_1D42B0BFC(__dst, 1819307369, 0xE400000000000000, with.super.isa);
  sub_1D44C31D4();
}

uint64_t static SNAudioCorrelationResult.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t SNAudioCorrelationResult.description.getter()
{
  char *v0;
  char *v1;
  objc_class *v2;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  objc_super v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = (objc_class *)sub_1D42B7104();
  v20 = 0;
  v21 = 0xE000000000000000;
  sub_1D451B400();
  v18 = 0;
  v19 = 0xE000000000000000;
  v17.receiver = v0;
  v17.super_class = v2;
  v3 = objc_msgSendSuper2(&v17, sel_description);
  sub_1D43B4B9C();
  sub_1D42B722C();
  sub_1D42B7190();
  swift_bridgeObjectRelease();
  sub_1D451A794();
  v20 = *(void **)&v0[OBJC_IVAR___SNAudioCorrelationResult_impl + 80];
  sub_1D451B7C0();
  sub_1D451A794();
  swift_bridgeObjectRelease();
  sub_1D44C3204();
  sub_1D451A794();
  v4 = *(void **)&v0[OBJC_IVAR___SNAudioCorrelationResult_impl + 56];
  v5 = *(_QWORD *)&v1[OBJC_IVAR___SNAudioCorrelationResult_impl + 64];
  v6 = *(_QWORD *)&v1[OBJC_IVAR___SNAudioCorrelationResult_impl + 72];
  v7 = (void *)objc_opt_self();
  v20 = v4;
  v21 = v5;
  *(_QWORD *)&v22 = v6;
  v8 = objc_msgSend(v7, sel_valueWithCMTime_, &v20);
  v9 = objc_msgSend(v8, sel_description);
  sub_1D43B4B9C();

  sub_1D451A794();
  swift_bridgeObjectRelease();
  sub_1D44C3204();
  sub_1D451A794();
  sub_1D451ABD8();
  sub_1D451A794();
  SNAudioCorrelationResult.timeRange.getter((uint64_t)&v20);
  v13[0] = v20;
  v13[1] = v21;
  v14 = v22;
  v15 = v23;
  v16 = v24;
  v10 = objc_msgSend(v7, sel_valueWithCMTimeRange_, v13);
  v11 = objc_msgSend(v10, sel_description);
  sub_1D43B4B9C();
  sub_1D42B722C();
  sub_1D42B7190();

  swift_bridgeObjectRelease();
  return v18;
}

id SNAudioCorrelationResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_1D42B7104();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

double sub_1D44C2E6C@<D0>(uint64_t a1@<X8>)
{
  return SNAudioCorrelationResult.timeRange.getter(a1);
}

double sub_1D44C2E8C(uint64_t a1)
{
  return SNAudioCorrelationResult.timeRange.setter(a1);
}

uint64_t type metadata accessor for SNAudioCorrelationResult()
{
  return objc_opt_self();
}

uint64_t method lookup function for SNAudioCorrelationResult()
{
  return swift_lookUpClassMethod();
}

uint64_t getEnumTagSinglePayload for AudioCorrelationResult(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AudioCorrelationResult(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 88) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AudioCorrelationResult()
{
  return &type metadata for AudioCorrelationResult;
}

unint64_t sub_1D44C2F4C()
{
  unint64_t result;

  result = qword_1EFE56388;
  if (!qword_1EFE56388)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454D958, &type metadata for AudioCorrelationResult);
    atomic_store(result, (unint64_t *)&qword_1EFE56388);
  }
  return result;
}

unint64_t sub_1D44C2F88()
{
  unint64_t result;

  result = qword_1EFE56398;
  if (!qword_1EFE56398)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DAD4, &type metadata for AudioCorrelationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56398);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AudioCorrelationResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D44C3010 + 4 * byte_1D454D8E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D44C3044 + 4 * byte_1D454D8E4[v4]))();
}

uint64_t sub_1D44C3044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C304C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44C3054);
  return result;
}

uint64_t sub_1D44C3060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44C3068);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D44C306C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C3074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioCorrelationResult.CodingKeys()
{
  return &type metadata for AudioCorrelationResult.CodingKeys;
}

unint64_t sub_1D44C3094()
{
  unint64_t result;

  result = qword_1EFE563A8;
  if (!qword_1EFE563A8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DAAC, &type metadata for AudioCorrelationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE563A8);
  }
  return result;
}

unint64_t sub_1D44C30D4()
{
  unint64_t result;

  result = qword_1EFE563B0;
  if (!qword_1EFE563B0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DA1C, &type metadata for AudioCorrelationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE563B0);
  }
  return result;
}

unint64_t sub_1D44C3114()
{
  unint64_t result;

  result = qword_1EFE563B8;
  if (!qword_1EFE563B8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DA44, &type metadata for AudioCorrelationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE563B8);
  }
  return result;
}

__n128 sub_1D44C3150@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(__n128 *)(v1 + a1 + 72);
}

uint64_t sub_1D44C31A0()
{
  return sub_1D451B688();
}

uint64_t sub_1D44C31BC@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 160) = a1;
  return v1 - 160;
}

id sub_1D44C31E4()
{
  return sub_1D44C25CC();
}

uint64_t sub_1D44C31F0()
{
  uint64_t v0;

  return v0 - 144;
}

uint64_t sub_1D44C3204()
{
  return 0x6B616550203BLL;
}

uint64_t sub_1D44C3218()
{
  return swift_deallocPartialClassInstance();
}

uint64_t sub_1D44C3224(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1D45199B4();
  MEMORY[0x1E0C80A78](v2);
  sub_1D45199E4();
  sub_1D42B6D94();
  sub_1D45199D8();
  sub_1D45199A8();
  sub_1D45199C0();
  sub_1D42B5528(a1, a1[3]);
  v3 = sub_1D45199CC();
  swift_release();
  return v3;
}

uint64_t sub_1D44C32F4()
{
  sub_1D451999C();
  sub_1D42B6D94();
  sub_1D4519990();
  sub_1D4519984();
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for JSONUtils.DomainError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D44C33D4 + 4 * byte_1D454DB29[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D44C3408 + 4 * byte_1D454DB24[v4]))();
}

uint64_t sub_1D44C3408(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C3410(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44C3418);
  return result;
}

uint64_t sub_1D44C3424(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44C342CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D44C3430(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C3438(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JSONUtils.DomainError()
{
  return &type metadata for JSONUtils.DomainError;
}

unint64_t sub_1D44C3458()
{
  unint64_t result;

  result = qword_1EFE563C0;
  if (!qword_1EFE563C0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DB88, &type metadata for JSONUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_1EFE563C0);
  }
  return result;
}

uint64_t SoundAnalysisBundleMarker.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SoundAnalysisBundleMarker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SoundAnalysisBundleMarker()
{
  return objc_opt_self();
}

uint64_t method lookup function for SoundAnalysisBundleMarker()
{
  return swift_lookUpClassMethod();
}

void sub_1D44C34D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = sub_1D4519A98();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_1D44C3524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_1D451AAC4();
  if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(a1, 1, v5) == 1)
  {
    sub_1D438E444(a1);
  }
  else
  {
    sub_1D451AAB8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D451AA70();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1D44C3644(uint64_t a1, void *a2)
{
  if (a2)
    return sub_1D44C3680(*(_QWORD *)(a1 + 32), (uint64_t)a2);
  else
    return j__swift_continuation_throwingResume();
}

uint64_t sub_1D44C3680(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  sub_1D42B28FC(&qword_1EFE49BB0);
  swift_allocError();
  *v3 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_1D44C36D4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  void (*v6)(uint64_t, uint64_t, void (*)(uint64_t, void *, uint64_t), uint64_t);
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v6 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, void *, uint64_t), uint64_t))(a1 + 32);
  v7 = sub_1D451A5CC();
  if (a3)
    a3 = sub_1D451A5CC();
  v8 = _Block_copy(a4);
  v9 = sub_1D42B6F40();
  *(_QWORD *)(v9 + 16) = v8;
  swift_retain();
  v6(v7, a3, sub_1D44C6184, v9);
  swift_release();
  sub_1D42BE8B4();
  swift_release();
  return sub_1D4429DE8();
}

void sub_1D44C37AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v6 = a2;
  if (a1)
  {
    v7 = (void *)sub_1D451A5A8();
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  if (a2)
LABEL_3:
    v6 = (void *)sub_1D451A5A8();
LABEL_4:
  if (a3)
    v8 = sub_1D4519A98();
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, void *, void *))(a4 + 16))(a4, v7, v6);

}

uint64_t sub_1D44C387C()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  _OWORD v4[4];

  v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v2 = v0[3];
  v4[2] = v0[2];
  v4[3] = v2;
  sub_1D4364330((uint64_t)v4);
  sub_1D446F290();
  sub_1D4364384((uint64_t)v4);
  sub_1D42CB6CC();
  sub_1D42F1F54();
  sub_1D42D6090();
  sub_1D42B7204();
  swift_bridgeObjectRetain();
  sub_1D42F1F54();
  sub_1D451A74C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D42F1F54();
  sub_1D451A74C();
  return sub_1D42CB0C4();
}

uint64_t sub_1D44C3928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  BOOL v15;
  char v16;
  BOOL v17;
  char v18;
  BOOL v19;
  char v20;
  char v21;
  BOOL v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 56);
  v28 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  v25 = *(_QWORD *)(a2 + 48);
  v26 = *(_QWORD *)(a2 + 56);
  if (v12 || (sub_1D42F1F04(), result = sub_1D43073F0(), (v14 & 1) != 0))
  {
    v15 = v4 == v8 && v5 == v9;
    if (v15 || (sub_1D42F1F04(), result = sub_1D43073F0(), (v16 & 1) != 0))
    {
      v17 = v6 == v10 && v7 == v11;
      if (v17 || (sub_1D42F1F04(), result = sub_1D43073F0(), (v18 & 1) != 0))
      {
        v19 = v28 == v25 && v27 == v26;
        if (v19 || (sub_1D42F1F04(), result = sub_1D43073F0(), (v20 & 1) != 0))
        {
          sub_1D42FE00C(*(_QWORD **)(a1 + 64), *(_QWORD **)(a2 + 64));
          if ((v21 & 1) != 0)
          {
            v22 = *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72) && *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80);
            if (v22 || (sub_1D42F1F04(), result = sub_1D43073F0(), (v23 & 1) != 0))
            {
              if (*(_QWORD *)(a1 + 88) == *(_QWORD *)(a2 + 88) && *(_QWORD *)(a1 + 96) == *(_QWORD *)(a2 + 96))
                return 1;
              else
                return sub_1D451B820();
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D44C3AA8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v8;

  v2 = a1 == 0x6E49726576726573 && a2 == 0xEA00000000006F66;
  if (v2 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6946726576726573 && a2 == 0xEF7368746150656CLL;
    if (v6 || (sub_1D451B820() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6142726576726573 && a2 == 0xEE00687461506573;
      if (v7 || (sub_1D451B820() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000014 && a2 == 0x80000001D455B9D0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = sub_1D451B820();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_1D44C3CA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D44C3CE0 + 4 * byte_1D454DC20[a1]))(0x6E49726576726573, 0xEA00000000006F66);
}

uint64_t sub_1D44C3CE0()
{
  return 0x6946726576726573;
}

uint64_t sub_1D44C3D04()
{
  return 0x6142726576726573;
}

unint64_t sub_1D44C3D28()
{
  return 0xD000000000000014;
}

uint64_t sub_1D44C3D44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1D42B28FC((uint64_t *)&unk_1EFE56400);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_1D42CB210();
  v7 = v6 - v5;
  sub_1D42B5528(a1, a1[3]);
  sub_1D44C5D7C();
  sub_1D451BA24();
  sub_1D43642F4();
  sub_1D4338480();
  if (!v1)
  {
    sub_1D42B28FC((uint64_t *)&unk_1EFE51A80);
    sub_1D4364294(qword_1EFE56410, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1D4338480();
    sub_1D44C6358(2);
    sub_1D44C6358(3);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1D44C3EC4()
{
  sub_1D451B958();
  sub_1D44C387C();
  return sub_1D451B994();
}

uint64_t sub_1D44C3F00@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = sub_1D42B28FC(&qword_1EFE563E8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42CB210();
  v9 = v8 - v7;
  sub_1D42B5528(a1, a1[3]);
  sub_1D44C5D7C();
  sub_1D451BA0C();
  if (v2)
    return sub_1D42BE944();
  sub_1D4364258();
  sub_1D44C63D8();
  sub_1D42B28FC((uint64_t *)&unk_1EFE51A80);
  v11 = sub_1D4364294(&qword_1EFE4D3D0, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D42F20E8();
  swift_bridgeObjectRetain();
  sub_1D44C63D8();
  if (v11)
  {
    sub_1D44C6338();
    sub_1D42D3258();
    sub_1D435EB80();
    sub_1D42CB8F4();
    sub_1D42CB338();
    sub_1D42BE944();
    sub_1D42CB5C8();
    sub_1D435EB80();
    sub_1D42CB8F4();
    return sub_1D42CB338();
  }
  else
  {
    swift_bridgeObjectRetain();
    v17 = sub_1D451B64C();
    v13 = v12;
    swift_bridgeObjectRetain();
    v14 = sub_1D451B64C();
    v16 = v15;
    v18 = v14;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D42F20E8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D42CB6CC();
    sub_1D42CB338();
    sub_1D435EB80();
    sub_1D42CB8F4();
    sub_1D42CB5C8();
    swift_bridgeObjectRelease();
    sub_1D42BE944();
    swift_bridgeObjectRelease();
    sub_1D42D3258();
    swift_bridgeObjectRelease();
    sub_1D42CB338();
    sub_1D435EB80();
    sub_1D42CB8F4();
    result = sub_1D42CB5C8();
    *a2 = v19;
    a2[1] = v20;
    a2[2] = v21;
    a2[3] = v22;
    a2[4] = v23;
    a2[5] = v24;
    a2[6] = v25;
    a2[7] = v26;
    a2[8] = v19;
    a2[9] = v17;
    a2[10] = v13;
    a2[11] = v18;
    a2[12] = v16;
  }
  return result;
}

uint64_t sub_1D44C428C()
{
  unsigned __int8 *v0;

  return sub_1D44C3CA8(*v0);
}

uint64_t sub_1D44C4294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44C3AA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44C42B8()
{
  sub_1D44C5D7C();
  return sub_1D451BA3C();
}

uint64_t sub_1D44C42E0()
{
  sub_1D44C5D7C();
  return sub_1D451BA48();
}

void *sub_1D44C4308@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _QWORD __src[13];

  result = (void *)sub_1D44C3F00(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x68uLL);
  return result;
}

uint64_t sub_1D44C4350(_QWORD *a1)
{
  return sub_1D44C3D44(a1);
}

uint64_t sub_1D44C436C()
{
  sub_1D451B958();
  sub_1D44C387C();
  return sub_1D451B994();
}

id sub_1D44C43A8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  char *v16;
  char *v17;
  id v18;
  objc_super v25;

  v7 = *(_QWORD *)&a1[OBJC_IVAR___SNFileServerInfo_impl];
  v8 = *(_QWORD *)&a1[OBJC_IVAR___SNFileServerInfo_impl + 8];
  v9 = *(_QWORD *)&a1[OBJC_IVAR___SNFileServerInfo_impl + 16];
  v10 = *(_QWORD *)&a1[OBJC_IVAR___SNFileServerInfo_impl + 24];
  v11 = *(_QWORD *)&a1[OBJC_IVAR___SNFileServerInfo_impl + 32];
  v12 = *(_QWORD *)&a1[OBJC_IVAR___SNFileServerInfo_impl + 40];
  v14 = *(_QWORD *)&a1[OBJC_IVAR___SNFileServerInfo_impl + 48];
  v13 = *(_QWORD *)&a1[OBJC_IVAR___SNFileServerInfo_impl + 56];
  v15 = (objc_class *)type metadata accessor for SNCopyFilesRequest();
  v16 = (char *)objc_allocWithZone(v15);
  v17 = &v16[OBJC_IVAR___SNCopyFilesRequest_impl];
  *(_QWORD *)v17 = v7;
  *((_QWORD *)v17 + 1) = v8;
  *((_QWORD *)v17 + 2) = v9;
  *((_QWORD *)v17 + 3) = v10;
  *((_QWORD *)v17 + 4) = v11;
  *((_QWORD *)v17 + 5) = v12;
  *((_QWORD *)v17 + 6) = v14;
  *((_QWORD *)v17 + 7) = v13;
  *((_QWORD *)v17 + 8) = a4;
  *((_QWORD *)v17 + 9) = a2;
  *((_QWORD *)v17 + 10) = a3;
  *((_QWORD *)v17 + 11) = a5;
  *((_QWORD *)v17 + 12) = a6;
  v25.receiver = v16;
  v25.super_class = v15;
  swift_bridgeObjectRetain();
  sub_1D42F20E8();
  swift_bridgeObjectRetain();
  sub_1D42CB6CC();
  v18 = objc_msgSendSuper2(&v25, sel_init);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v18;
}

uint64_t (*sub_1D44C4550(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v30;
  _QWORD aBlock[6];

  v10 = sub_1D42B28FC(&qword_1EFE4DC70);
  MEMORY[0x1E0C80A78](v10);
  sub_1D42CB210();
  v30 = v12 - v11;
  v13 = sub_1D44C6394(objc_allocWithZone(MEMORY[0x1E0D83900]));
  sub_1D44C6384(v13, sel_setDispatchQueue_);
  v14 = sub_1D44C6394(objc_allocWithZone(MEMORY[0x1E0D838E8]));
  sub_1D44C6384(v14, sel_setDispatchQueue_);
  v15 = sub_1D44C6394(objc_allocWithZone(MEMORY[0x1E0D83928]));
  v16 = sub_1D42B6F40();
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)sub_1D42B6F40();
  v17[2] = v16;
  v17[3] = a2;
  v17[4] = a3;
  v17[5] = v14;
  v17[6] = v5;
  v17[7] = v15;
  v17[8] = a1;
  v17[9] = a4;
  v17[10] = a5;
  aBlock[4] = sub_1D44C5F00;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D43E3FE8;
  aBlock[3] = &unk_1E97B3740;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v19 = v14;
  v20 = v5;
  v21 = v15;
  v22 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v13, sel_setLocalDeviceUpdatedHandler_, v18);
  _Block_release(v18);
  v23 = sub_1D451AAC4();
  _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v30, 1, 1, v23);
  v24 = (_QWORD *)sub_1D42B6F40();
  v24[2] = 0;
  v24[3] = 0;
  v24[4] = v13;
  v25 = v13;
  v26 = sub_1D44C3524(v30, (uint64_t)&unk_1EFE56428, (uint64_t)v24);
  v27 = (_QWORD *)sub_1D42B6F40();
  v27[2] = v25;
  v27[3] = v19;
  v27[4] = v21;
  v27[5] = v26;
  swift_release();
  return sub_1D44C600C;
}

uint64_t sub_1D44C479C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;

  v18 = sub_1D42B28FC(&qword_1EFE4DC70);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = MEMORY[0x1D825E608](a2 + 16);
  if (result)
  {
    v22 = result;
    v32 = a9;
    v23 = sub_1D451AAC4();
    _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)v20, 1, 1, v23);
    v24 = (_QWORD *)swift_allocObject();
    v25 = a3;
    v26 = (uint64_t)v24;
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v22;
    v24[5] = v25;
    v24[6] = a4;
    v24[7] = a1;
    v24[8] = a5;
    v24[9] = a6;
    v24[10] = a7;
    v24[11] = a8;
    v24[12] = v32;
    v24[13] = a10;
    swift_retain();
    v27 = a1;
    v28 = a5;
    v29 = a6;
    v30 = a7;
    v31 = a8;
    swift_retain();
    sub_1D44C3524((uint64_t)v20, (uint64_t)&unk_1EFE56440, v26);
    return swift_release();
  }
  return result;
}

uint64_t sub_1D44C48F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 576) = v13;
  *(_OWORD *)(v8 + 544) = v11;
  *(_OWORD *)(v8 + 560) = v12;
  *(_QWORD *)(v8 + 536) = a8;
  *(_QWORD *)(v8 + 528) = a7;
  *(_QWORD *)(v8 + 520) = a6;
  *(_QWORD *)(v8 + 504) = a4;
  *(_QWORD *)(v8 + 512) = a5;
  v9 = sub_1D4519BC4();
  *(_QWORD *)(v8 + 584) = v9;
  *(_QWORD *)(v8 + 592) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 600) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1D44C499C()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = (void *)v0[66];
  v2 = v0[65];
  v3 = (void *)v0[63];
  v4 = v0[64];
  v5 = (void *)sub_1D451A6C8();
  objc_msgSend(v3, sel_deregisterRequestID_, v5);

  v6 = (void *)sub_1D451A6C8();
  v7 = sub_1D42B6F40();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v2;
  v8 = sub_1D42B6F40();
  *(_QWORD *)(v8 + 16) = sub_1D44C6150;
  *(_QWORD *)(v8 + 24) = v7;
  v0[46] = (uint64_t)sub_1D43EDE44;
  v0[47] = v8;
  v0[42] = MEMORY[0x1E0C809B0];
  v0[43] = 1107296256;
  v0[44] = (uint64_t)sub_1D44C36D4;
  v0[45] = (uint64_t)&unk_1E97C3A10;
  v9 = _Block_copy(v0 + 42);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_registerRequestID_options_handler_, v6, 0, v9);
  _Block_release(v9);

  v10 = sub_1D44C5E30(v1, (SEL *)&selRef_idsDeviceIdentifier);
  v0[76] = v11;
  if (!v11)
    __break(1u);
  v12 = v10;
  v13 = v11;
  v0[77] = type metadata accessor for SNFileSharingUtils();
  v14 = (_QWORD *)swift_task_alloc();
  v0[78] = (uint64_t)v14;
  *v14 = v0;
  v14[1] = sub_1D44C4B88;
  return sub_1D4329590(v12, v13, v0[67]);
}

uint64_t sub_1D44C4B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44C63C4();
  *(_QWORD *)(v0 + 632) = v2;
  *(_QWORD *)(v0 + 640) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  sub_1D42B8EC8();
  return sub_1D44C6348();
}

uint64_t sub_1D44C4C30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[68];
  v2 = OBJC_IVAR___SNCopyFilesRequest_impl;
  v0[81] = OBJC_IVAR___SNCopyFilesRequest_impl;
  v3 = v1 + v2;
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v0[82] = v4;
  swift_bridgeObjectRetain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[83] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = sub_1D44C4CE0;
  return sub_1D4329590(v5, v4, v0[67]);
}

uint64_t sub_1D44C4CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1D44C63C4();
  *(_QWORD *)(v0 + 672) = v2;
  *(_QWORD *)(v0 + 680) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  sub_1D42B8EC8();
  return sub_1D44C6348();
}

uint64_t sub_1D44C4D88()
{
  _QWORD *v0;
  void *v1;
  uint64_t inited;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = (void *)v0[79];
  sub_1D42B28FC((uint64_t *)&unk_1EFE4A580);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D4533EC0;
  v0[54] = 0x7550746567726174;
  v0[55] = 0xEF79654B63696C62;
  sub_1D451B3B8();
  v3 = sub_1D44C5DD0(v1);
  if (v4 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(_QWORD *)(inited + 96) = MEMORY[0x1E0CB0338];
  *(_QWORD *)(inited + 72) = v3;
  *(_QWORD *)(inited + 80) = v4;
  v0[56] = 0x4449746567726174;
  v0[57] = 0xE800000000000000;
  v5 = MEMORY[0x1E0DEA968];
  v6 = sub_1D451B3B8();
  v7 = sub_1D44C639C(v6, (SEL *)&selRef_idsDeviceID);
  if (!v8)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  v9 = (_QWORD *)(v0[68] + v0[81]);
  *(_QWORD *)(inited + 168) = v5;
  *(_QWORD *)(inited + 144) = v7;
  *(_QWORD *)(inited + 152) = v8;
  v0[60] = 0x6874615065736162;
  v0[61] = 0xE800000000000000;
  sub_1D44C63B8();
  v11 = v9[9];
  v10 = v9[10];
  *(_QWORD *)(inited + 240) = v5;
  *(_QWORD *)(inited + 216) = v11;
  *(_QWORD *)(inited + 224) = v10;
  v0[58] = 0x68746150656C6966;
  v0[59] = 0xE900000000000073;
  swift_bridgeObjectRetain();
  sub_1D44C63B8();
  v12 = v9[8];
  *(_QWORD *)(inited + 312) = sub_1D42B28FC((uint64_t *)&unk_1EFE51A80);
  *(_QWORD *)(inited + 288) = v12;
  swift_bridgeObjectRetain();
  v13 = sub_1D451A5E4();
  v0[86] = v13;
  v14 = sub_1D44C639C(v13, (SEL *)&selRef_identifier);
  v0[87] = v15;
  if (!v15)
    goto LABEL_7;
  v16 = v14;
  v17 = v15;
  v18 = (_QWORD *)swift_task_alloc();
  v0[88] = v18;
  *v18 = v0;
  v18[1] = sub_1D44C5018;
  return sub_1D4329850(0xD000000000000013, 0x80000001D4555F20, v13, v16, v17, v0[63]);
}

uint64_t sub_1D44C5018()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 712) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    sub_1D42BE8B4();
    sub_1D42CB0C4();
    swift_bridgeObjectRelease();
    sub_1D42B7204();
  }
  sub_1D42B8EC8();
  return swift_task_switch();
}

uint64_t sub_1D44C50F0()
{
  _QWORD *v0;
  void *v1;
  unsigned int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v33;

  v1 = (void *)v0[69];
  objc_msgSend(v1, sel_setDispatchQueue_, v0[70]);
  objc_msgSend(v1, sel_setFlags_, objc_msgSend(v1, sel_flags) | 1);
  v0[62] = 0;
  v2 = objc_msgSend(v1, sel_prepareTemplateAndReturnError_, v0 + 62);
  v3 = (void *)v0[62];
  if (v2)
  {
    v33 = (void *)v0[84];
    v4 = v0[75];
    v5 = v0[74];
    v6 = v0[73];
    v7 = v0[72];
    v8 = v0[71];
    v9 = v3;
    sub_1D4519B04();
    v10 = (void *)sub_1D4519B28();
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    sub_1D44C6370(v11, sel_setTemporaryDirectoryURL_);

    v12 = sub_1D42B6F40();
    *(_QWORD *)(v12 + 16) = v8;
    *(_QWORD *)(v12 + 24) = v7;
    v13 = sub_1D42B6F40();
    *(_QWORD *)(v13 + 16) = sub_1D44C6158;
    *(_QWORD *)(v13 + 24) = v12;
    v0[52] = sub_1D43EDE44;
    v0[53] = v13;
    v0[48] = MEMORY[0x1E0C809B0];
    v0[49] = 1107296256;
    v0[50] = sub_1D44C5720;
    v0[51] = &unk_1E97B3990;
    v14 = _Block_copy(v0 + 48);
    swift_retain();
    v15 = swift_release();
    sub_1D44C6370(v15, sel_setReceivedItemHandler_);
    _Block_release(v14);
    v16 = sub_1D44C5DD0(v33);
    if (v17 >> 60 == 15)
    {
      v18 = 0;
    }
    else
    {
      v23 = v16;
      v24 = v17;
      v18 = (void *)sub_1D4519C3C();
      sub_1D42B8CDC(v23, v24);
    }
    objc_msgSend((id)v0[69], sel_setPeerPublicKey_, v18);

    v26 = sub_1D44C639C(v25, (SEL *)&selRef_idsDeviceID);
    if (v27)
    {
      v28 = (void *)sub_1D451A6C8();
      v26 = sub_1D42BE8B4();
    }
    else
    {
      v28 = 0;
    }
    v29 = (void *)v0[84];
    v30 = (void *)v0[79];
    v31 = (void *)v0[69];
    sub_1D44C6370(v26, sel_setTargetID_);

    objc_msgSend(v31, sel_activate);
    swift_task_dealloc();
    v22 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v19 = (void *)v0[84];
    v20 = (void *)v0[79];
    v21 = v3;
    sub_1D4519AA4();

    swift_willThrow();
    sub_1D44C637C();
    v22 = (uint64_t (*)(void))v0[1];
  }
  return v22();
}

uint64_t sub_1D44C53F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1D44C637C();
  return sub_1D42B8DC0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1D44C544C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 632);
  swift_bridgeObjectRelease();

  sub_1D44C637C();
  return sub_1D42B8DC0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1D44C54B0()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 672);
  v2 = *(void **)(v0 + 632);
  swift_bridgeObjectRelease();

  sub_1D42B7204();
  sub_1D44C637C();
  return sub_1D430C35C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1D44C552C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (qword_1EFE40338 != -1)
    swift_once();
  v6 = sub_1D451A014();
  sub_1D42CC880(v6, (uint64_t)qword_1EFEA7700);
  v7 = sub_1D4519FFC();
  v8 = sub_1D451AF74();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1D42A7000, v7, v8, "Transfer completed", v9, 2u);
    MEMORY[0x1D825E524](v9, -1, -1);
  }

  return a5(0);
}

void sub_1D44C5614(void *a1, void (*a2)(_QWORD), uint64_t a3, void (*a4)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD v14[5];

  v7 = type metadata accessor for FileCopyingResult(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (_QWORD *)((char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SNFileSharingUtils();
  sub_1D432A798(a1, v9);
  v10 = type metadata accessor for SNFileCopyingResult(0);
  v11 = sub_1D44D3920((uint64_t)v9);
  v14[3] = v10;
  v14[0] = v11;
  v12 = v11;
  a4(v14);
  sub_1D42B5400((uint64_t)v14);
  a2(0);

}

void sub_1D44C5720(uint64_t a1, void *a2, void *aBlock)
{
  void (*v4)(void);
  void *v5;
  id v6;

  v4 = *(void (**)(void))(a1 + 32);
  v5 = _Block_copy(aBlock);
  *(_QWORD *)(swift_allocObject() + 16) = v5;
  swift_retain();
  v6 = a2;
  v4();
  swift_release();
  swift_release();

}

uint64_t sub_1D44C57B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = a4;
  return swift_task_switch();
}

uint64_t sub_1D44C57CC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_1D44C5854;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_1D44C3644;
  v3[3] = &unk_1E97C3980;
  v3[4] = v2;
  sub_1D44C6384(v1, sel_activateWithCompletion_);
  return swift_continuation_await();
}

uint64_t sub_1D44C5854()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 128) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_1D42B8EC8();
  return swift_task_switch();
}

uint64_t sub_1D44C58B0()
{
  uint64_t v0;

  swift_willThrow();
  return sub_1D430C35C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1D44C58E4(void *a1, void *a2, void *a3)
{
  objc_msgSend(a1, sel_invalidate);
  objc_msgSend(a2, sel_invalidate);
  objc_msgSend(a3, sel_invalidate);
  sub_1D42B28FC(&qword_1EFE49BB0);
  return sub_1D451AB3C();
}

id SNCopyFilesRequest.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SNCopyFilesRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SNCopyFilesRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNCopyFilesRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SNCopyFilesRequest()
{
  return objc_opt_self();
}

uint64_t (*sub_1D44C5A6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  sub_1D44C4550(a1, a2, a3, a4, a5);
  return sub_1D44C600C;
}

uint64_t method lookup function for SNCopyFilesRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t destroy for CopyFilesRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CopyFilesRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CopyFilesRequest(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CopyFilesRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CopyFilesRequest()
{
  return &type metadata for CopyFilesRequest;
}

unint64_t sub_1D44C5D40()
{
  unint64_t result;

  result = qword_1EFE563E0;
  if (!qword_1EFE563E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DC84, &type metadata for CopyFilesRequest);
    atomic_store(result, (unint64_t *)&qword_1EFE563E0);
  }
  return result;
}

unint64_t sub_1D44C5D7C()
{
  unint64_t result;

  result = qword_1EFE563F0;
  if (!qword_1EFE563F0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DE00, &type metadata for CopyFilesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE563F0);
  }
  return result;
}

uint64_t sub_1D44C5DB8(void *a1)
{
  return sub_1D44C5E30(a1, (SEL *)&selRef_idsDeviceID);
}

uint64_t sub_1D44C5DC4(void *a1)
{
  return sub_1D44C5E30(a1, (SEL *)&selRef_idsDeviceIdentifier);
}

uint64_t sub_1D44C5DD0(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_edPKData);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1D4519C54();

  return v3;
}

uint64_t sub_1D44C5E30(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(a1, *a2);
  if (v2)
  {
    v3 = v2;
    sub_1D451A6EC();

  }
  return sub_1D42F1F54();
}

uint64_t sub_1D44C5E88()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1D44C5EAC()
{
  id *v0;

  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44C5F00(void *a1)
{
  uint64_t v1;

  return sub_1D44C479C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_1D44C5F34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D44C5F44()
{
  return swift_release();
}

uint64_t sub_1D44C5F4C()
{
  swift_unknownObjectRelease();
  sub_1D44C638C();
  return swift_deallocObject();
}

uint64_t sub_1D44C5F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1D4378D68;
  v4 = sub_1D44C63A4();
  return sub_1D44C57B4(v4, v5, v6, v2);
}

uint64_t sub_1D44C5FD4()
{
  uint64_t v0;

  sub_1D44C638C();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44C600C()
{
  void **v0;

  return sub_1D44C58E4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1D44C6018()
{
  id *v0;

  swift_unknownObjectRelease();
  sub_1D44C638C();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44C6078()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[7];
  v6 = v0[8];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1D4322434;
  v8 = sub_1D44C63A4();
  return sub_1D44C48F4(v8, v9, v10, v2, v3, v4, v5, v6);
}

uint64_t sub_1D44C612C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44C6150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1D44C552C(a1, a2, a3, a4, *(uint64_t (**)(_QWORD))(v4 + 16));
}

void sub_1D44C6158(void *a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  sub_1D44C5614(a1, a2, a3, *(void (**)(_QWORD *))(v3 + 16));
}

uint64_t sub_1D44C6160()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1D44C6184(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  sub_1D44C37AC(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t storeEnumTagSinglePayload for CopyFilesRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D44C61D8 + 4 * byte_1D454DC29[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D44C620C + 4 * byte_1D454DC24[v4]))();
}

uint64_t sub_1D44C620C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C6214(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44C621CLL);
  return result;
}

uint64_t sub_1D44C6228(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44C6230);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D44C6234(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C623C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CopyFilesRequest.CodingKeys()
{
  return &type metadata for CopyFilesRequest.CodingKeys;
}

unint64_t sub_1D44C625C()
{
  unint64_t result;

  result = qword_1EFE56450;
  if (!qword_1EFE56450)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DDD8, &type metadata for CopyFilesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56450);
  }
  return result;
}

unint64_t sub_1D44C629C()
{
  unint64_t result;

  result = qword_1EFE56458;
  if (!qword_1EFE56458)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DD48, &type metadata for CopyFilesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56458);
  }
  return result;
}

unint64_t sub_1D44C62DC()
{
  unint64_t result;

  result = qword_1EFE56460[0];
  if (!qword_1EFE56460[0])
  {
    result = MEMORY[0x1D825E41C](&unk_1D454DD70, &type metadata for CopyFilesRequest.CodingKeys);
    atomic_store(result, qword_1EFE56460);
  }
  return result;
}

uint64_t sub_1D44C6338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1D44C6348()
{
  return swift_task_switch();
}

uint64_t sub_1D44C6358@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 128) = a1;
  return sub_1D451B724();
}

id sub_1D44C6370(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1D44C637C()
{
  return swift_task_dealloc();
}

id sub_1D44C6384(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

void sub_1D44C638C()
{
  uint64_t v0;

}

id sub_1D44C6394(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 3528));
}

uint64_t sub_1D44C639C(uint64_t a1, SEL *a2)
{
  void *v2;

  return sub_1D44C5E30(v2, a2);
}

uint64_t sub_1D44C63A4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44C63B8()
{
  return sub_1D451B3B8();
}

void sub_1D44C63C4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1D44C63D8()
{
  return sub_1D451B688();
}

uint64_t sub_1D44C63E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x64656873696E6966 && a2 == 0xE800000000000000;
  if (v2 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572756C696166 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1D451B820();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D44C64D0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6572756C696166;
  else
    return 0x64656873696E6966;
}

uint64_t sub_1D44C6508()
{
  char *v0;

  return sub_1D44C64D0(*v0);
}

uint64_t sub_1D44C6518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44C63E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44C6544(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D454E288, a1);
  return sub_1D451BA3C();
}

uint64_t sub_1D44C6578(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D454E288, a1);
  return sub_1D451BA48();
}

uint64_t sub_1D44C65AC()
{
  return sub_1D42CFE6C();
}

uint64_t sub_1D44C65B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D42D3664(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1D44C65E8(uint64_t a1, uint64_t a2)
{
  return sub_1D44C66A4(a1, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1D42BA688);
}

uint64_t sub_1D44C65F4(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D454E328, a1);
  return sub_1D451BA3C();
}

uint64_t sub_1D44C6628(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D454E328, a1);
  return sub_1D451BA48();
}

uint64_t sub_1D44C665C()
{
  return sub_1D42F29F8();
}

uint64_t sub_1D44C6668@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D42F29DC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1D44C6698(uint64_t a1, uint64_t a2)
{
  return sub_1D44C66A4(a1, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1D44C7DF8);
}

uint64_t sub_1D44C66A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1D44C66C4(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D454E2D8, a1);
  return sub_1D451BA3C();
}

uint64_t sub_1D44C66F8(uint64_t a1)
{
  MEMORY[0x1D825E41C](&unk_1D454E2D8, a1);
  return sub_1D451BA48();
}

void PubSub.Completion<>.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_1D44C7E2C();
  type metadata accessor for PubSub.Completion.FailureCodingKeys(v0, v1, v2, v3);
  sub_1D44822D0();
}

void sub_1D44C677C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1D44C7E60();
  *(_QWORD *)(v11 - 192) = v12;
  *(_QWORD *)(v11 - 184) = v9;
  v13 = sub_1D451B7A8();
  *(_QWORD *)(v11 - 144) = v13;
  *(_QWORD *)(v11 - 160) = *(_QWORD *)(v13 - 8);
  sub_1D42BA1F0();
  v15 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v11 - 176) = (char *)&a9 - v16;
  *(_QWORD *)(v11 - 152) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v15);
  sub_1D42BE768();
  *(_QWORD *)(v11 - 168) = v17;
  v18 = sub_1D44C7E2C();
  type metadata accessor for PubSub.Completion.FinishedCodingKeys(v18, v19, v20, v21);
  sub_1D44822D0();
}

void sub_1D44C67F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_1D44C7E60();
  *(_QWORD *)(v13 - 208) = v14;
  *(_QWORD *)(v13 - 200) = v9;
  v15 = sub_1D451B7A8();
  *(_QWORD *)(v13 - 224) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v13 - 216) = v15;
  sub_1D42BA1F0();
  v17 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v13 - 232) = (char *)&a9 - v18;
  v19 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1D44C7E2C();
  v26 = type metadata accessor for PubSub.Completion.CodingKeys(v22, v23, v24, v25);
  MEMORY[0x1D825E41C](&unk_1D454E288, v26);
  v27 = sub_1D451B7A8();
  *(_QWORD *)(v13 - 104) = v27;
  *(_QWORD *)(v13 - 120) = *(_QWORD *)(v27 - 8);
  sub_1D42BA1F0();
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&a9 - v29;
  sub_1D42B5528(v10, v10[3]);
  *(_QWORD *)(v13 - 88) = v30;
  sub_1D451BA24();
  (*(void (**)(char *, _QWORD, _QWORD))(v19 + 16))(v21, *(_QWORD *)(v13 - 112), *(_QWORD *)(v13 - 128));
  v31 = v12;
  if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)v21, 1, v12) == 1)
  {
    *(_BYTE *)(v13 - 66) = 0;
    v32 = *(_QWORD *)(v13 - 232);
    v33 = *(_QWORD *)(v13 - 104);
    v34 = *(_QWORD *)(v13 - 88);
    sub_1D451B6F4();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v13 - 224) + 8))(v32, *(_QWORD *)(v13 - 216));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 120) + 8))(v34, v33);
  }
  else
  {
    v35 = *(_QWORD *)(v13 - 152);
    v36 = *(_QWORD *)(v13 - 168);
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v36, v21, v31);
    *(_BYTE *)(v13 - 65) = 1;
    v37 = *(_QWORD *)(v13 - 176);
    v38 = *(_QWORD *)(v13 - 104);
    sub_1D451B6F4();
    v39 = *(_QWORD *)(v13 - 144);
    sub_1D451B760();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 160) + 8))(v37, v39);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v31);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v13 - 120) + 8))(*(_QWORD *)(v13 - 88), v38);
  }
  sub_1D42BE844();
}

uint64_t type metadata accessor for PubSub.Completion.FailureCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D42B8D20(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PubSub.Completion.FailureCodingKeys);
}

uint64_t type metadata accessor for PubSub.Completion.FinishedCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D42B8D20(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PubSub.Completion.FinishedCodingKeys);
}

uint64_t type metadata accessor for PubSub.Completion.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D42B8D20(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PubSub.Completion.CodingKeys);
}

void sub_1D44C6A44()
{
  PubSub.Completion<>.encode(to:)();
}

void PubSub.Completion<>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PubSub.Completion.FailureCodingKeys(255, a2, a4, a4);
  sub_1D4482344();
}

void sub_1D44C6AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1D44C7E60();
  *(_QWORD *)(v10 - 208) = v11;
  *(_QWORD *)(v10 - 200) = v9;
  v12 = sub_1D451B6E8();
  *(_QWORD *)(v10 - 280) = v12;
  *(_QWORD *)(v10 - 264) = *(_QWORD *)(v12 - 8);
  sub_1D42BA1F0();
  MEMORY[0x1E0C80A78](v13);
  *(_QWORD *)(v10 - 192) = (char *)&a9 - v14;
  v15 = sub_1D44C7E44();
  type metadata accessor for PubSub.Completion.FinishedCodingKeys(v15, v16, v17, v18);
  sub_1D4482344();
}

void sub_1D44C6B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1D44C7E60();
  *(_QWORD *)(v10 - 224) = v11;
  *(_QWORD *)(v10 - 216) = v9;
  v12 = sub_1D451B6E8();
  *(_QWORD *)(v10 - 288) = v12;
  *(_QWORD *)(v10 - 296) = *(_QWORD *)(v12 - 8);
  sub_1D42BA1F0();
  MEMORY[0x1E0C80A78](v13);
  *(_QWORD *)(v10 - 232) = (char *)&a9 - v14;
  v15 = sub_1D44C7E44();
  type metadata accessor for PubSub.Completion.CodingKeys(v15, v16, v17, v18);
  sub_1D4482344();
}

void sub_1D44C6B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v13 = sub_1D451B6E8();
  *(_QWORD *)(v12 - 176) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v12 - 168) = v13;
  sub_1D42BA1F0();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&a9 - v15;
  *(_QWORD *)(v12 - 240) = v9;
  v18 = type metadata accessor for PubSub.Completion(0, v9, v10, v17);
  *(_QWORD *)(v12 - 184) = v18;
  *(_QWORD *)(v12 - 256) = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&a9 - v22;
  sub_1D42B5528(v11, v11[3]);
  v24 = *(_QWORD *)(v12 - 72);
  sub_1D451BA0C();
  if (!v24)
  {
    *(_QWORD *)(v12 - 320) = v21;
    *(_QWORD *)(v12 - 312) = v23;
    *(_QWORD *)(v12 - 304) = v11;
    *(_QWORD *)(v12 - 72) = v16;
    *(_QWORD *)(v12 - 160) = sub_1D451B6D0();
    sub_1D451AA1C();
    sub_1D44822D0();
  }
  sub_1D42B5400((uint64_t)v11);
  sub_1D42BE844();
}

uint64_t type metadata accessor for PubSub.Completion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D42B8D20(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PubSub.Completion);
}

void sub_1D44C6FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PubSub.Completion<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a2 + 24));
}

uint64_t static PubSub.Completion<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v27[2];
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v6 = *(_QWORD *)(a3 - 8);
  v27[1] = a4;
  v28 = v6;
  MEMORY[0x1E0C80A78](a1);
  sub_1D42BE768();
  v27[0] = v7;
  v11 = type metadata accessor for PubSub.Completion(0, v8, v10, v9);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v27 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v19 = (char *)v27 - v18;
  v20 = (char *)v27 + *(int *)(v17 + 48) - v18;
  sub_1D44C7E58((uint64_t)v27 - v18, a1);
  sub_1D44C7E58((uint64_t)v20, v29);
  sub_1D4328B50((uint64_t)v19);
  if (v22)
  {
    v21 = 1;
    sub_1D4328B50((uint64_t)v20);
    if (v22)
      goto LABEL_10;
    goto LABEL_9;
  }
  sub_1D44C7E58((uint64_t)v14, (uint64_t)v19);
  sub_1D4328B50((uint64_t)v20);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v14, a3);
LABEL_9:
    v21 = 0;
    v12 = v16;
    v11 = TupleTypeMetadata2;
    goto LABEL_10;
  }
  v23 = v28;
  v24 = v27[0];
  sub_1D43965D8(v27[0], (uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 32));
  v21 = sub_1D451A698();
  v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v25(v24, a3);
  v25((uint64_t)v14, a3);
LABEL_10:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  return v21 & 1;
}

uint64_t sub_1D44C7194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static PubSub.Completion<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void PubSub.Completion<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v8, v10);
  if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)v8, 1, v2) == 1)
  {
    sub_1D451B964();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    sub_1D451B964();
    sub_1D451A614();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  sub_1D42CB084();
}

uint64_t PubSub.Completion<>.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  sub_1D451B958();
  PubSub.Completion<>.hash(into:)((uint64_t)v3, a1);
  return sub_1D451B994();
}

uint64_t sub_1D44C72F8(uint64_t a1)
{
  return PubSub.Completion<>.hashValue.getter(a1);
}

void sub_1D44C7300(uint64_t a1, uint64_t a2)
{
  PubSub.Completion<>.hash(into:)(a1, a2);
}

uint64_t sub_1D44C7308(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_1D451B958();
  PubSub.Completion<>.hash(into:)((uint64_t)v4, a2);
  return sub_1D451B994();
}

void sub_1D44C7358(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D43965D8((uint64_t)v5, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  v8 = *(_QWORD *)(a1 + 16);
  v9 = 1;
  sub_1D4328B50((uint64_t)v5);
  if (!v10)
  {
    sub_1D43965D8(a2, (uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32));
    v9 = 0;
  }
  _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(a2, v9, 1, v8);
  sub_1D42CB15C();
}

void PubSub.Completion.toCombine()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D44C7358(a1, a2);
}

void static PubSub.Completion.fromCombine(_:)(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_1D451A188();
  sub_1D44C7358(v2, a1);
}

Swift::Void __swiftcall PubSub.AnyCancellable.cancel()()
{
  sub_1D451A1F4();
}

uint64_t PubSub.AnyPublisher.sink(receiveCompletion:receiveValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  swift_retain();
  v8 = (_QWORD *)swift_allocObject();
  v9 = a3[3];
  v8[2] = a3[2];
  v8[3] = v9;
  v8[4] = a3[4];
  v8[5] = a1;
  v8[6] = a2;
  v10 = sub_1D451A1D0();
  swift_retain();
  MEMORY[0x1D825E41C](MEMORY[0x1E0C95D90], v10);
  v11 = sub_1D451A344();
  swift_release();
  result = swift_release();
  *a4 = v11;
  return result;
}

uint64_t sub_1D44C7554(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for PubSub.Completion(0, a5, a6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  v11 = sub_1D451A188();
  sub_1D44C7358(v11, (uint64_t)v10);
  a2(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1D44C7610()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44C7634(uint64_t a1)
{
  uint64_t v1;

  return sub_1D44C7554(a1, *(void (**)(char *))(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void PubSub.AnySubject.send(_:)()
{
  swift_getObjectType();
  sub_1D451A2A8();
  sub_1D42CB15C();
}

uint64_t PubSub.AnySubject.send(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_1D44C7E1C();
  v0 = sub_1D451A188();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v10 - v2;
  swift_getObjectType();
  v4 = sub_1D44C7E1C();
  v8 = type metadata accessor for PubSub.Completion(v4, v5, v6, v7);
  sub_1D44C7358(v8, (uint64_t)v3);
  sub_1D451A290();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void static PubSub.AnySubject.createSharedPassthroughSubject()(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = sub_1D451A23C();
  sub_1D451A224();
  v3 = MEMORY[0x1D825E41C](MEMORY[0x1E0C95F40], v2);
  v6 = sub_1D431662C(v2, v3, v4, v5);
  swift_release();
  v7 = sub_1D44C7E1C();
  v11 = type metadata accessor for SharedSubject(v7, v8, v9, v10);
  v12 = MEMORY[0x1D825E41C](&unk_1D452A038, v11);
  *a1 = v6;
  a1[1] = v12;
  sub_1D42CB084();
}

uint64_t sub_1D44C77CC()
{
  return swift_unknownObjectRetain();
}

uint64_t PubSub.AnySubject.toCombine()()
{
  return sub_1D44C77CC();
}

uint64_t static PubSub.AnySubject.fromCombine(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_unknownObjectRetain();
}

uint64_t sub_1D44C7828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x1D825E41C](&protocol conformance descriptor for <> PubSub.Completion<A>, a1, &v4);
}

ValueMetadata *type metadata accessor for PubSub()
{
  return &type metadata for PubSub;
}

uint64_t sub_1D44C7870(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = v6 - 1;
  if (!(_DWORD)v6)
    v7 = 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (!(_DWORD)v6)
    ++v8;
  if (!a2)
    return 0;
  v9 = a2 - v7;
  if (a2 > v7)
  {
    v10 = 8 * v8;
    if (v8 > 3)
      goto LABEL_8;
    v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v8);
      if (v11)
        goto LABEL_15;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_22;
LABEL_8:
        v11 = *(unsigned __int8 *)(a1 + v8);
        if (!*(_BYTE *)(a1 + v8))
          goto LABEL_22;
LABEL_15:
        v13 = (v11 - 1) << v10;
        if (v8 > 3)
          v13 = 0;
        if ((_DWORD)v8)
        {
          if (v8 > 3)
            LODWORD(v8) = 4;
          __asm { BR              X12 }
        }
        return v7 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v8);
      if (*(_WORD *)(a1 + v8))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v6 < 2)
    return 0;
  v15 = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(a1, v6, v4);
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void sub_1D44C799C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  size_t v11;
  char v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (v8)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = 8 * v11;
  v13 = a3 >= v9;
  v14 = a3 - v9;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        v6 = 4u;
      }
      else if (v15 >= 0x100)
      {
        v6 = 2;
      }
      else
      {
        v6 = v15 > 1;
      }
    }
    else
    {
      v6 = 1u;
    }
  }
  if (v9 < a2)
  {
    v16 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v17 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v17;
          *((_BYTE *)a1 + 2) = BYTE2(v17);
        }
        else if ((_DWORD)v11 == 2)
        {
          *a1 = v17;
        }
        else
        {
          *(_BYTE *)a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

void sub_1D44C7B30()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1D44C7B38()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

ValueMetadata *type metadata accessor for PubSub.AnyCancellable()
{
  return &type metadata for PubSub.AnyCancellable;
}

uint64_t type metadata accessor for PubSub.AnyPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D42B8D20(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PubSub.AnyPublisher);
}

_OWORD *sub_1D44C7B78(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *sub_1D44C7BA8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

_OWORD *sub_1D44C7BEC(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  *a1 = *a2;
  return a1;
}

uint64_t type metadata accessor for PubSub.AnySubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D42B8D20(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PubSub.AnySubject);
}

uint64_t sub_1D44C7C2C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D44C7C78 + 4 * byte_1D454DE63[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D44C7CAC + 4 * byte_1D454DE5E[v4]))();
}

uint64_t sub_1D44C7CAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C7CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44C7CBCLL);
  return result;
}

uint64_t sub_1D44C7CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44C7CD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D44C7CD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C7CDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C7CE8(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D44C7D28 + 4 * byte_1D454DE68[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D44C7D48 + 4 * byte_1D454DE6D[v4]))();
}

_BYTE *sub_1D44C7D28(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D44C7D48(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44C7D50(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44C7D58(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44C7D60(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44C7D68(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1D44C7D74()
{
  JUMPOUT(0x1D825E41CLL);
}

void sub_1D44C7D84()
{
  JUMPOUT(0x1D825E41CLL);
}

void sub_1D44C7D94()
{
  JUMPOUT(0x1D825E41CLL);
}

void sub_1D44C7DA4()
{
  JUMPOUT(0x1D825E41CLL);
}

void sub_1D44C7DB4()
{
  JUMPOUT(0x1D825E41CLL);
}

void sub_1D44C7DC4()
{
  JUMPOUT(0x1D825E41CLL);
}

void sub_1D44C7DD4()
{
  JUMPOUT(0x1D825E41CLL);
}

void sub_1D44C7DE4()
{
  JUMPOUT(0x1D825E41CLL);
}

uint64_t _s13SoundAnalysis6PubSubV14AnyCancellableV11fromCombineyAE0H0ADCFZ_0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1D44C7E08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_1D44C7E1C()
{
  return 0;
}

uint64_t sub_1D44C7E2C()
{
  return 255;
}

uint64_t sub_1D44C7E3C()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_1D44C7E44()
{
  return 255;
}

uint64_t sub_1D44C7E58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1D44C7E60()
{
  return 0;
}

uint64_t sub_1D44C7E6C()
{
  _QWORD v1[4];
  uint64_t v2;
  uint64_t v3;

  v3 = MEMORY[0x1E0DEE9D8];
  v1[2] = &v3;
  v1[3] = &v2;
  v2 = 0;
  sub_1D44C7EE4((uint64_t)sub_1D44C8140, (uint64_t)v1);
  if (!v2)
    return v3;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D44C7EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t result;
  _QWORD v7[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v7[4] = sub_1D44C8194;
  v7[5] = v4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_1D44C7FCC;
  v7[3] = &unk_1E97B3768;
  v5 = _Block_copy(v7);
  swift_retain();
  swift_release();
  os_enumerate_boot_args_b();
  _Block_release(v5);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v5 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1D44C7FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4) & 1;
}

BOOL sub_1D44C7FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void **a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  if (a1)
  {
    if (a2)
    {
      v7 = sub_1D451A7A0();
      v9 = v8;
      v10 = sub_1D451A7A0();
      v12 = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D43A2450();
      v13 = *(_QWORD *)(*a4 + 16);
      sub_1D43A2548(v13);
      v14 = *a4;
      *(_QWORD *)(v14 + 16) = v13 + 1;
      v15 = (_QWORD *)(v14 + 32 * v13);
      v15[4] = v7;
      v15[5] = v9;
      v15[6] = v10;
      v15[7] = v12;
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = sub_1D451A7A0();
      v21 = v20;
      swift_bridgeObjectRetain();
      sub_1D43A2450();
      v22 = *(_QWORD *)(*a4 + 16);
      sub_1D43A2548(v22);
      v23 = *a4;
      *(_QWORD *)(v23 + 16) = v22 + 1;
      v24 = (_QWORD *)(v23 + 32 * v22);
      v24[4] = v19;
      v24[5] = v21;
      v24[6] = 0;
      v24[7] = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D44C8148();
    v17 = swift_allocError();
    swift_willThrow();
    v18 = *a5;
    *a5 = (void *)v17;

  }
  return a1 != 0;
}

BOOL sub_1D44C8140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1D44C7FFC(a1, a2, a3, *(uint64_t **)(v3 + 16), *(void ***)(v3 + 24));
}

unint64_t sub_1D44C8148()
{
  unint64_t result;

  result = qword_1EFE56770;
  if (!qword_1EFE56770)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E44C, &type metadata for BootArgsUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_1EFE56770);
  }
  return result;
}

uint64_t sub_1D44C8184()
{
  return swift_deallocObject();
}

uint64_t sub_1D44C8194()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1D44C81B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D44C81C8()
{
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for BootArgsUtils.DomainError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D44C8210 + 4 * byte_1D454E380[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D44C8230 + 4 * byte_1D454E385[v4]))();
}

_BYTE *sub_1D44C8210(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D44C8230(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44C8238(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44C8240(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44C8248(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44C8250(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BootArgsUtils.DomainError()
{
  return &type metadata for BootArgsUtils.DomainError;
}

ValueMetadata *type metadata accessor for SystemBootArgsReader()
{
  return &type metadata for SystemBootArgsReader;
}

unint64_t sub_1D44C8280()
{
  unint64_t result;

  result = qword_1EFE56778;
  if (!qword_1EFE56778)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E424, &type metadata for BootArgsUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_1EFE56778);
  }
  return result;
}

uint64_t sub_1D44C82BC()
{
  uint64_t v0;

  swift_beginAccess();
  nullsub_1(v0 + 16);
  swift_endAccess();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnsafeResultsFormatterNode()
{
  return objc_opt_self();
}

uint64_t sub_1D44C837C()
{
  return swift_bridgeObjectRetain();
}

id sub_1D44C838C(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR___SNFileListingResult_fileItems] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for SNFileListingResult();
  return objc_msgSendSuper2(&v3, sel_init);
}

id SNFileListingResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SNFileListingResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SNFileListingResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNFileListingResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SNFileListingResult()
{
  return objc_opt_self();
}

uint64_t method lookup function for SNFileListingResult()
{
  return swift_lookUpClassMethod();
}

void sub_1D44C84C4(mach_error_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    goto LABEL_4;
  if (mach_error_string(a1))
  {
    sub_1D451A7A0();
    type metadata accessor for SNError();
    sub_1D451B400();
    swift_bridgeObjectRelease();
    sub_1D44C87CC();
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    sub_1D451A794();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    sub_1D451A794();
    v1 = sub_1D44C87B4();
    sub_1D43EC59C(v1, v2, v3, 0, v4, 0xE000000000000000);
    swift_bridgeObjectRelease();
    swift_willThrow();
LABEL_4:
    sub_1D4443494();
    return;
  }
  __break(1u);
}

void sub_1D44C85E4(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (sub_1D451A08C() != a1)
  {
    type metadata accessor for SNError();
    v2 = sub_1D451A6EC();
    v4 = v3;
    v5 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v6 = sub_1D44C8708(v2, v4, a1, 0);
    sub_1D451B400();
    swift_bridgeObjectRelease();
    sub_1D44C87CC();
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    v7 = sub_1D44C87B4();
    sub_1D43EC59C(v7, v8, v9, v6, v10, 0xE000000000000000);

    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  sub_1D4443494();
}

id sub_1D44C8708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v7;
  void *v8;
  id v9;

  v7 = (void *)sub_1D451A6C8();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8 = (void *)sub_1D451A5A8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend(v4, sel_initWithDomain_code_userInfo_, v7, a3, v8);

  return v9;
}

unint64_t sub_1D44C87B4()
{
  return 0xD000000000000017;
}

id sub_1D44C87E0@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  id v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = objc_opt_self();
  v17 = 0;
  v7 = sub_1D4501004(v6, a1, a2, (uint64_t)&v18, (uint64_t)&v17);
  v8 = v17;
  if (v7)
  {
    v9 = *((_QWORD *)&v18 + 1);
    v10 = v19;
    v11 = v20;
    v12 = HIDWORD(v20);
    v13 = *(_QWORD *)((char *)&v20 + 4);
    v14 = v21;
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    *(_OWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 36) = v13;
    *(_DWORD *)(a3 + 44) = v12;
    *(_OWORD *)(a3 + 48) = v14;
    return v8;
  }
  else
  {
    v16 = v17;
    sub_1D4519AA4();

    return (id)swift_willThrow();
  }
}

uint64_t sub_1D44C88E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _BYTE *v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  result = sub_1D44EFE48(a1, (float *)&v6, a2, a3, a4);
  if ((result & 1) == 0)
  {
    sub_1D42CF6E8();
    sub_1D42B6D0C();
    return sub_1D4306EF8(v5, 4);
  }
  return result;
}

uint64_t sub_1D44C8980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  char v10;
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a5;
  if (!*(_QWORD *)a5)
  {
    v11 = 0;
    sub_1D42B7F2C();
    sub_1D42B6D0C();
    v10 = 0;
LABEL_7:
    *v9 = v10;
    return swift_willThrow();
  }
  if (*(_QWORD *)(a5 + 8) - v6 < 0x100000000)
  {
    v11 = *(_DWORD *)(a5 + 8) - v6;
    result = sub_1D44EF6DC(a1, v6, (int *)&v11, a2, a3, a4);
    if ((result & 1) != 0)
    {
      v8 = v6 + v11;
      *(_QWORD *)a5 = v6;
      *(_QWORD *)(a5 + 8) = v8;
      return result;
    }
    sub_1D42CF6E8();
    sub_1D42B6D0C();
    v10 = 2;
    goto LABEL_7;
  }
  result = sub_1D451B550();
  __break(1u);
  return result;
}

uint64_t sub_1D44C8AC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v10 = MEMORY[0x1D825B59C](a5);
  v11 = v7;
  sub_1D44C8BD4((uint64_t)&v10, a1);
  result = sub_1D42B5420(v10, v11);
  if (!v5)
    return v9;
  return result;
}

uint64_t sub_1D44C8B50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;

  v7 = sub_1D44C8AC0(a1, a2, a3, a4, a5);
  v9 = v8;
  if (!v5 && sub_1D4519C6C() != a5)
  {
    sub_1D42CF6E8();
    sub_1D42B6D0C();
    sub_1D4306EF8(v10, 3);
    sub_1D42B5420(v7, v9);
  }
  return v7;
}

void sub_1D44C8BD4(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 8) >> 62;
  v3 = a2;
  __asm { BR              X9 }
}

void sub_1D44C8C48()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;

  v10 = v5;
  LOWORD(v11) = v1;
  BYTE2(v11) = BYTE2(v1);
  HIBYTE(v11) = BYTE3(v1);
  v12 = BYTE4(v1);
  v13 = BYTE5(v1);
  v14 = BYTE6(v1);
  v7 = v0;
  sub_1D44C9038((uint64_t)&v10, BYTE6(v1), v7, v4, v6, v3, v9);

  v8 = v11 | ((unint64_t)v12 << 32) | ((unint64_t)v13 << 40) | ((unint64_t)v14 << 48);
  *v2 = v10;
  v2[1] = v8;

}

void sub_1D44C8F48(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v13 = sub_1D4519A14();
  if (!v13)
    goto LABEL_13;
  v14 = v13;
  v15 = sub_1D4519A38();
  v16 = a1 - v15;
  if (__OFSUB__(a1, v15))
  {
    __break(1u);
    goto LABEL_12;
  }
  v17 = __OFSUB__(a2, a1);
  v18 = a2 - a1;
  if (v17)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  v19 = sub_1D4519A2C();
  if (v19 >= v18)
    v20 = v18;
  else
    v20 = v19;
  v27 = v14 + v16;
  v28 = v14 + v16 + v20;
  v21 = v29;
  sub_1D44C8980((uint64_t)a3, a4, a5, a6, (uint64_t)&v27);
  if (v21)
  {

  }
  else
  {
    sub_1D43C3BD0(v27, v28);
    v23 = v22;
    v25 = v24;

    *a7 = v23;
    a7[1] = v25;
  }
}

void sub_1D44C9038(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a1 + a2;
  sub_1D44C8980((uint64_t)a3, a4, a5, a6, (uint64_t)&v14);
  if (v7)
  {

  }
  else
  {
    sub_1D43C3BD0(v14, v15);
    v11 = v10;
    v13 = v12;

    *a7 = v11;
    a7[1] = v13;
  }
}

uint64_t storeEnumTagSinglePayload for DSPGraphUtils.DomainError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1D44C910C + 4 * byte_1D454E50D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1D44C9140 + 4 * byte_1D454E508[v4]))();
}

uint64_t sub_1D44C9140(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C9148(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44C9150);
  return result;
}

uint64_t sub_1D44C915C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44C9164);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1D44C9168(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44C9170(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSPGraphUtils.DomainError()
{
  return &type metadata for DSPGraphUtils.DomainError;
}

unint64_t sub_1D44C9190()
{
  unint64_t result;

  result = qword_1EFE567A0;
  if (!qword_1EFE567A0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E570, &type metadata for DSPGraphUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_1EFE567A0);
  }
  return result;
}

void sub_1D44C91CC(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  unsigned __int8 v17;

  v2 = objc_msgSend(a1, sel_modelDescription);
  sub_1D44CC31C(v2);

  if (!v1)
    sub_1D44CEA88(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13, HIBYTE(v13), v14, v15, v16, v17, v11);
  sub_1D44CEC10();
}

uint64_t sub_1D44C9228(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_1D451AC14();
  v8 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 40;
    do
    {
      sub_1D42DCE84();
      sub_1D44CEC9C(&v7);
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    sub_1D42BE8B4();
    return v8;
  }
  else
  {
    v5 = v2;
    sub_1D42BE8B4();
  }
  return v5;
}

_QWORD *sub_1D44C92C4(uint64_t a1)
{
  return sub_1D44C935C(a1, sub_1D43F6E7C);
}

void sub_1D44C92D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4[1] = sub_1D451AC14();
  if (v2 == a2)
  {
LABEL_6:
    sub_1D42CB758();
    return;
  }
  if (a2 < v2)
    goto LABEL_8;
  if (v2 < a2)
  {
    do
      sub_1D44CC5A4(v4, v2++);
    while (a2 != v2);
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
}

_QWORD *sub_1D44C935C(uint64_t a1, _QWORD *(*a2)(_QWORD *__return_ptr, uint64_t))
{
  _QWORD *result;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t v16;

  v14 = sub_1D451AC14();
  result = a2(v15, a1);
  v5 = v15[1];
  v6 = v15[3];
  v7 = v16;
  v8 = (unint64_t)(v15[2] + 64) >> 6;
  if (!v16)
    goto LABEL_3;
LABEL_2:
  v7 &= v7 - 1;
  while (1)
  {
    sub_1D42DCE84();
    sub_1D44CEC9C(&v13);
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_2;
LABEL_3:
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v9 >= v8)
      goto LABEL_21;
    v10 = *(_QWORD *)(v5 + 8 * v9);
    v11 = v6 + 1;
    if (!v10)
    {
      v11 = v6 + 2;
      if (v6 + 2 >= v8)
        goto LABEL_21;
      v10 = *(_QWORD *)(v5 + 8 * v11);
      if (!v10)
      {
        v11 = v6 + 3;
        if (v6 + 3 >= v8)
          goto LABEL_21;
        v10 = *(_QWORD *)(v5 + 8 * v11);
        if (!v10)
        {
          v11 = v6 + 4;
          if (v6 + 4 >= v8)
            goto LABEL_21;
          v10 = *(_QWORD *)(v5 + 8 * v11);
          if (!v10)
          {
            v11 = v6 + 5;
            if (v6 + 5 >= v8)
              goto LABEL_21;
            v10 = *(_QWORD *)(v5 + 8 * v11);
            if (!v10)
            {
              v12 = v6 + 6;
              while (v12 < v8)
              {
                v10 = *(_QWORD *)(v5 + 8 * v12++);
                if (v10)
                {
                  v11 = v12 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (_QWORD *)v14;
            }
          }
        }
      }
    }
LABEL_18:
    v7 = (v10 - 1) & v10;
    v6 = v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D44C94D0(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1D451B5A4();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for SNModelFeatureConnection();
  sub_1D4456098(&qword_1EFE40320, v3, (uint64_t (*)(uint64_t))type metadata accessor for SNModelFeatureConnection, MEMORY[0x1E0DEFCF8]);
  result = sub_1D451AC14();
  v5 = result;
  v10 = result;
  if (!v2)
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_5;
LABEL_13:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1D451B5A4();
  result = swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_13;
LABEL_5:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x1D825CD78](i, a1);
      else
        v8 = *(id *)(a1 + 8 * i + 32);
      sub_1D44CC69C(&v9, v8);

    }
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D44C962C(void *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t result;

  LODWORD(v2) = a2;
  sub_1D44CBFCC(a1);
  sub_1D44CBCD0();
  v4 = v3;
  v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    v2 = v2;
  else
    v2 = v4;
  if ((v2 & 0x8000000000000000) == 0 && !HIDWORD(v2))
    return v2;
  sub_1D42DCED4();
  result = sub_1D451B550();
  __break(1u);
  return result;
}

void sub_1D44C9714(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1D44CBFCC(a1);
  sub_1D44CBBF0();
  v2 = v1;
  swift_bridgeObjectRelease();
  if (!v2)
    sub_1D42CB7B8();
  sub_1D42CB758();
}

void sub_1D44C976C(void *a1)
{
  if (!sub_1D44CC0E8(a1))
    sub_1D42CB7B8();
  sub_1D42CB758();
}

uint64_t sub_1D44C97B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SNModelFeatureConnection_impl + 16);
  sub_1D42CB6CC();
  return v1;
}

uint64_t sub_1D44C97E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SNModelFeatureConnection_impl);
  sub_1D42CB6CC();
  return v1;
}

uint64_t sub_1D44C9818()
{
  swift_bridgeObjectRetain();
  sub_1D44CEC64();
  sub_1D42CB0C4();
  sub_1D42CB7B8();
  sub_1D43F8974();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D44C987C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12;
  char v13;
  uint64_t result;

  v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = sub_1D42F1F04(), result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return sub_1D451B820();
  }
  return result;
}

uint64_t sub_1D44C9904(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001D455BA70 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001D455BA90)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1D451B820();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1D44C99EC(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000016;
  else
    return 0xD000000000000011;
}

void sub_1D44C9A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v9[2];

  sub_1D42BE910();
  v9[0] = v1;
  v9[1] = v2;
  v4 = v3;
  v5 = sub_1D42B28FC(&qword_1EFE567E8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D42B5528(v4, v4[3]);
  sub_1D44CE4BC();
  sub_1D451BA24();
  sub_1D44CEBD0();
  if (!v0)
    sub_1D44CEBD0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1D42BE844();
}

uint64_t sub_1D44C9B1C()
{
  sub_1D42BE9A8();
  swift_bridgeObjectRetain();
  sub_1D44CEC64();
  sub_1D42CB0C4();
  sub_1D42CB7B8();
  sub_1D43F8974();
  sub_1D42BE8B4();
  return sub_1D451B994();
}

uint64_t sub_1D44C9B88()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D42BE910();
  v2 = v1;
  v3 = sub_1D42B28FC(&qword_1EFE567D8);
  MEMORY[0x1E0C80A78](v3);
  sub_1D434799C();
  v4 = v2[4];
  sub_1D42B5528(v2, v2[3]);
  sub_1D44CE4BC();
  sub_1D451BA0C();
  if (v0)
  {
    sub_1D42CB9B4();
  }
  else
  {
    v4 = sub_1D44CEBE0();
    swift_bridgeObjectRetain();
    sub_1D44CEBE0();
    sub_1D42CB3CC();
    sub_1D42F20E8();
    sub_1D42CB9B4();
    sub_1D435EB80();
    sub_1D42CB8F4();
  }
  return v4;
}

unint64_t sub_1D44C9CC0()
{
  char *v0;

  return sub_1D44C99EC(*v0);
}

uint64_t sub_1D44C9CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44C9904(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44C9CEC()
{
  sub_1D44CE4BC();
  return sub_1D451BA3C();
}

uint64_t sub_1D44C9D14()
{
  sub_1D44CE4BC();
  return sub_1D451BA48();
}

uint64_t sub_1D44C9D3C()
{
  return sub_1D44C9B1C();
}

uint64_t sub_1D44C9D48()
{
  return sub_1D44C9818();
}

uint64_t sub_1D44C9D54()
{
  sub_1D451B958();
  swift_bridgeObjectRetain();
  sub_1D451A74C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D451A74C();
  swift_bridgeObjectRelease();
  return sub_1D451B994();
}

uint64_t sub_1D44C9DD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_1D44C9B88();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
  return result;
}

void sub_1D44C9E00()
{
  sub_1D44C9A28();
}

uint64_t sub_1D44C9E1C(uint64_t *a1, uint64_t *a2)
{
  return sub_1D44C987C(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1D44C9E38()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(v0 + 9);
  v2 = *(unsigned __int8 *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 56);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    sub_1D44CEB70();
  }
  else
  {
    sub_1D44CEB68();
    sub_1D451B964();
  }
  if (v1 == 2)
  {
    sub_1D44CEB70();
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    sub_1D44CEB68();
    sub_1D451A74C();
    swift_bridgeObjectRelease();
    if (!v2)
    {
LABEL_6:
      sub_1D44CEB68();
      sub_1D451B964();
      if (!v3)
        goto LABEL_7;
LABEL_11:
      sub_1D44CEB70();
      if (v4)
        goto LABEL_8;
      return sub_1D44CEB70();
    }
  }
  sub_1D44CEB70();
  if (v3)
    goto LABEL_11;
LABEL_7:
  sub_1D44CEB68();
  sub_1D451B964();
  if (v4)
  {
LABEL_8:
    sub_1D44CEB68();
    sub_1D42CB7B8();
    sub_1D43F8974();
    return swift_bridgeObjectRelease();
  }
  return sub_1D44CEB70();
}

BOOL sub_1D44C9F80(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  v2 = *(unsigned __int8 *)(a1 + 9);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a2 + 8);
  v10 = *(unsigned __int8 *)(a2 + 9);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(unsigned __int8 *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(unsigned __int8 *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  if (v2 == 2)
  {
    if (v10 != 2)
      return 0;
  }
  else
  {
    if (v10 == 2)
      return 0;
    v22 = *(_QWORD *)(a1 + 56);
    v23 = *(_QWORD *)(a1 + 48);
    sub_1D43342C0(v2 & 1, v10 & 1);
    v8 = v22;
    v7 = v23;
    if ((v17 & 1) == 0)
      return 0;
  }
  if ((v4 & 1) != 0)
  {
    if (!v12)
      return 0;
  }
  else
  {
    if (v3 == v11)
      v18 = v12;
    else
      v18 = 1;
    if ((v18 & 1) != 0)
      return 0;
  }
  if ((v6 & 1) != 0)
  {
    if (!v14)
      return 0;
  }
  else
  {
    if (v5 == v13)
      v19 = v14;
    else
      v19 = 1;
    if ((v19 & 1) != 0)
      return 0;
  }
  if (v8)
  {
    if (!v15)
      return 0;
    v20 = v7 == v16 && v8 == v15;
    return v20 || (sub_1D42F1F04() & 1) != 0;
  }
  return !v15;
}

uint64_t sub_1D44CA0B8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6152656C706D6173 && a2 == 0xEA00000000006574;
  if (v2 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001D455BC50 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001D455BC70 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D455BC90 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656449646E756F73 && a2 == 0xEF7265696669746ELL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v7 = sub_1D451B820();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1D44CA2E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D44CA320 + 4 * byte_1D454E5E0[a1]))(0x6152656C706D6173, 0xEA00000000006574);
}

unint64_t sub_1D44CA320()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_1D44CA35C()
{
  return 0xD000000000000010;
}

uint64_t sub_1D44CA378()
{
  return 0x656449646E756F73;
}

void sub_1D44CA39C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  sub_1D42BE910();
  v17 = v1;
  v3 = v2;
  v4 = sub_1D42B28FC(&qword_1EFE56830);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_BYTE *)(v0 + 9);
  v16 = *(_QWORD *)(v0 + 16);
  v15 = *(unsigned __int8 *)(v0 + 24);
  v14 = *(_QWORD *)(v0 + 32);
  v13 = *(unsigned __int8 *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 48);
  v12 = v8;
  sub_1D42B5528(v3, v3[3]);
  sub_1D44CE8C0();
  sub_1D451BA24();
  LOBYTE(v18) = 0;
  v9 = v17;
  sub_1D451B70C();
  if (!v9)
  {
    LOBYTE(v18) = v20;
    sub_1D4338160();
    sub_1D44CEC70();
    LOBYTE(v18) = 2;
    sub_1D44CEBC0();
    LOBYTE(v18) = 3;
    sub_1D44CEBC0();
    v18 = v11;
    v19 = v12;
    sub_1D42B28FC(&qword_1EFE4A720);
    sub_1D42F10E0(&qword_1EFE4A750, MEMORY[0x1E0DEA970], (uint64_t)&protocol conformance descriptor for <> RawRepresentableWrapper<A>);
    sub_1D44CEC70();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1D42BE844();
}

uint64_t sub_1D44CA598()
{
  sub_1D42BE9A8();
  sub_1D44C9E38();
  return sub_1D451B994();
}

void sub_1D44CA610()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1D42BE910();
  v2 = v1;
  v4 = v3;
  v5 = sub_1D42B28FC(&qword_1EFE56818);
  MEMORY[0x1E0C80A78](v5);
  sub_1D434799C();
  sub_1D42B5528(v2, v2[3]);
  sub_1D44CE8C0();
  sub_1D451BA0C();
  if (!v0)
  {
    v6 = sub_1D44CEB08();
    v8 = v7;
    sub_1D4338124();
    sub_1D44CEC7C();
    v9 = sub_1D44CEB08();
    v15 = v10;
    v16 = v9;
    LOBYTE(v17) = 3;
    v11 = sub_1D44CEB08();
    v13 = v12;
    v14 = v11;
    sub_1D42B28FC(&qword_1EFE4A720);
    sub_1D42F10E0(&qword_1EFE4A728, MEMORY[0x1E0DEA9A0], (uint64_t)&protocol conformance descriptor for <> RawRepresentableWrapper<A>);
    sub_1D44CEC7C();
    sub_1D42F8674();
    sub_1D42CB6CC();
    swift_bridgeObjectRelease();
    *(_QWORD *)v4 = v6;
    *(_BYTE *)(v4 + 8) = v8 & 1;
    *(_BYTE *)(v4 + 9) = 0;
    *(_QWORD *)(v4 + 16) = v16;
    *(_BYTE *)(v4 + 24) = v15 & 1;
    *(_QWORD *)(v4 + 32) = v14;
    *(_BYTE *)(v4 + 40) = v13 & 1;
    *(_QWORD *)(v4 + 48) = v17;
    *(_QWORD *)(v4 + 56) = v18;
  }
  sub_1D42B5400((uint64_t)v2);
  swift_bridgeObjectRelease();
  sub_1D42BE844();
}

uint64_t sub_1D44CA810()
{
  unsigned __int8 *v0;

  return sub_1D44CA2E8(*v0);
}

uint64_t sub_1D44CA818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44CA0B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44CA83C()
{
  sub_1D44CE8C0();
  return sub_1D451BA3C();
}

uint64_t sub_1D44CA864()
{
  sub_1D44CE8C0();
  return sub_1D451BA48();
}

uint64_t sub_1D44CA894()
{
  sub_1D451B958();
  sub_1D44C9E38();
  return sub_1D451B994();
}

void sub_1D44CA910()
{
  sub_1D44CA610();
}

void sub_1D44CA924()
{
  sub_1D44CA39C();
}

uint64_t sub_1D44CA954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR___SNModelFeatureConnection_impl);
  *v3 = a1;
  v3[1] = a2;
  return sub_1D447ACCC();
}

uint64_t sub_1D44CA984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + OBJC_IVAR___SNModelFeatureConnection_impl;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  return sub_1D447ACCC();
}

id sub_1D44CA99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_class *v9;
  char *v10;
  objc_super v12;

  v9 = (objc_class *)sub_1D42B7104();
  v10 = &v4[OBJC_IVAR___SNModelFeatureConnection_impl];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  *((_QWORD *)v10 + 2) = a3;
  *((_QWORD *)v10 + 3) = a4;
  v12.receiver = v4;
  v12.super_class = v9;
  return objc_msgSendSuper2(&v12, sel_init);
}

id sub_1D44CAA5C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  id result;
  objc_super v12;

  v3 = (objc_class *)sub_1D42B7104();
  v4 = v1 + OBJC_IVAR___SNModelFeatureConnection_impl;
  v6 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl + 8);
  v8 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v9 = (char *)objc_allocWithZone(v3);
  v10 = &v9[OBJC_IVAR___SNModelFeatureConnection_impl];
  *(_QWORD *)v10 = v6;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = v8;
  *((_QWORD *)v10 + 3) = v7;
  v12.receiver = v9;
  v12.super_class = v3;
  sub_1D42CB6CC();
  sub_1D42DCE84();
  result = objc_msgSendSuper2(&v12, sel_init);
  a1[3] = v3;
  *a1 = result;
  return result;
}

uint64_t sub_1D44CAB7C()
{
  uint64_t v0;

  sub_1D42CB6CC();
  sub_1D42DCE84();
  sub_1D44CEC88();
  v0 = sub_1D44C9B1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D44CABD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v11;
  char *v13;
  _BYTE v14[32];
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;

  sub_1D42B7104();
  sub_1D42B28B4(a1, (uint64_t)&v16);
  if (v17)
  {
    sub_1D42B293C(&v16, v15);
    sub_1D42B294C((uint64_t)v15, (uint64_t)v14);
    if (swift_dynamicCast())
    {
      v3 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl);
      v4 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl + 8);
      v5 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl + 16);
      v6 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl + 24);
      v7 = *(_QWORD *)&v13[OBJC_IVAR___SNModelFeatureConnection_impl + 16];
      v8 = *(_QWORD *)&v13[OBJC_IVAR___SNModelFeatureConnection_impl + 24];
      v9 = v3 == *(_QWORD *)&v13[OBJC_IVAR___SNModelFeatureConnection_impl]
        && v4 == *(_QWORD *)&v13[OBJC_IVAR___SNModelFeatureConnection_impl + 8];
      if (v9 || (sub_1D42F1F04() & 1) != 0)
      {
        if (v5 == v7 && v6 == v8)
        {

          v11 = 1;
        }
        else
        {
          sub_1D44CEC88();
          v11 = sub_1D42F1F04();

        }
        goto LABEL_17;
      }

    }
    v11 = 0;
LABEL_17:
    sub_1D42B5400((uint64_t)v15);
    return v11 & 1;
  }
  v11 = 0;
  return v11 & 1;
}

id sub_1D44CAD58(void *a1)
{
  void *v1;
  void *v2;
  objc_class *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = (objc_class *)sub_1D42CFC30();
  v5 = v2;
  v6 = sub_1D42B25B0();
  v8 = v7;
  v10 = v9;
  v12 = v11;

  v13 = (char *)objc_allocWithZone(v4);
  v14 = (uint64_t *)&v13[OBJC_IVAR___SNModelFeatureConnection_impl];
  *v14 = v6;
  v14[1] = v8;
  v14[2] = v10;
  v14[3] = v12;
  v17.receiver = v13;
  v17.super_class = v4;
  v15 = objc_msgSendSuper2(&v17, sel_init);

  sub_1D42CFC30();
  sub_1D4441204();
  return v15;
}

uint64_t sub_1D44CAE5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl + 8);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl + 16);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___SNModelFeatureConnection_impl + 24);
  sub_1D42CB7B8();
  sub_1D42CB6CC();
  sub_1D42B0D40(v4, v3, v6, v5, 1819307369, 0xE400000000000000, a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1D44CAF68()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for SNModelFeatureConnection()
{
  return objc_opt_self();
}

uint64_t sub_1D44CAFF4()
{
  uint64_t v0;

  sub_1D432E53C();
  v0 = sub_1D44CEB78();
  return sub_1D44C9228(v0);
}

id sub_1D44CB044()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  char *v9;
  objc_super v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = sub_1D432E42C();
  v15 = v0;
  v12 = 15917;
  v13 = 0xE200000000000000;
  sub_1D432E53C();
  v1 = sub_1D451B1E4();
  v2 = (_QWORD *)sub_1D432E30C(v1);
  sub_1D42CB8F4();
  swift_bridgeObjectRelease();
  if (v2[2] == 2)
  {
    v4 = v2[4];
    v3 = v2[5];
    v6 = v2[6];
    v5 = v2[7];
    sub_1D42DCE84();
    swift_bridgeObjectRetain();
    sub_1D42B7204();
    v7 = (objc_class *)type metadata accessor for SNModelFeatureConnection();
    v8 = (char *)objc_allocWithZone(v7);
    v9 = &v8[OBJC_IVAR___SNModelFeatureConnection_impl];
    *(_QWORD *)v9 = v4;
    *((_QWORD *)v9 + 1) = v3;
    *((_QWORD *)v9 + 2) = v6;
    *((_QWORD *)v9 + 3) = v5;
    v11.receiver = v8;
    v11.super_class = v7;
    return objc_msgSendSuper2(&v11, sel_init);
  }
  else
  {
    sub_1D42B7204();
    sub_1D42DCEE8();
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    sub_1D42DCD98(0, (uint64_t)"com.apple.SoundAnalysis");
    sub_1D42CB208();
    return (id)swift_willThrow();
  }
}

uint64_t sub_1D44CB1B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;

  sub_1D432E53C();
  v1 = sub_1D44CEB78();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v6 = MEMORY[0x1E0DEE9D8];
    sub_1D451B49C();
    v3 = v1 + 40;
    while (1)
    {
      sub_1D42CB6CC();
      sub_1D44CB044();
      sub_1D42B7204();
      if (v0)
        break;
      v3 += 16;
      sub_1D451B484();
      sub_1D451B4A8();
      sub_1D451B4B4();
      sub_1D451B490();
      if (!--v2)
      {
        v4 = v6;
        sub_1D42CB208();
        return sub_1D44C94D0(v4);
      }
    }
    sub_1D42CB208();
    return swift_release();
  }
  else
  {
    sub_1D42CB208();
    v4 = MEMORY[0x1E0DEE9D8];
    return sub_1D44C94D0(v4);
  }
}

void sub_1D44CB2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64_t v63;
  int64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  int64_t v115;
  int64_t v116;

  v98 = a3;
  v99 = a2;
  v4 = a1;
  v5 = sub_1D44A531C(a1);
  v6 = MEMORY[0x1E0DEE9D8];
  v104 = v4;
  if (v5)
  {
    v7 = v5;
    v115 = MEMORY[0x1E0DEE9D8];
    sub_1D44CEBAC();
    v102 = v4 & 0xC000000000000001;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v8 = sub_1D44CEC30();
      v10 = 1;
    }
    else
    {
      v8 = sub_1D4397030(v4);
      v10 = v11 & 1;
    }
    v109 = v8;
    v111 = v9;
    v113 = v10;
    if (v7 < 0)
    {
      __break(1u);
      goto LABEL_48;
    }
    v12 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v4 < 0)
      v12 = v4;
    v100 = v12;
    do
    {
      v13 = sub_1D44CEBF0();
      sub_1D4396DBC(v13, v14, v15, v4);
      v17 = v16;
      v19 = *(_QWORD *)&v16[OBJC_IVAR___SNModelFeatureConnection_impl];
      v18 = *(_QWORD *)&v16[OBJC_IVAR___SNModelFeatureConnection_impl + 8];
      swift_bridgeObjectRetain();

      if ((sub_1D44A3F70() & 1) == 0)
      {
        sub_1D4442C6C();
        v3 = v115;
      }
      v20 = *(_QWORD *)(v3 + 16);
      if (v20 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        sub_1D42C71F0();
        v3 = v115;
      }
      *(_QWORD *)(v3 + 16) = v20 + 1;
      v21 = v3 + 16 * v20;
      *(_QWORD *)(v21 + 32) = v19;
      *(_QWORD *)(v21 + 40) = v18;
      if (v102)
      {
        v4 = v104;
        if ((v113 & 1) == 0)
          goto LABEL_49;
        if (sub_1D451B334())
          swift_isUniquelyReferenced_nonNull_native();
        sub_1D42B28FC((uint64_t *)&unk_1EFE567C0);
        sub_1D44CEC20();
        v40 = sub_1D44CEB8C();
        v32 = sub_1D44CECB4(v40, v41, v42, v43, v44, v45, v46);
      }
      else
      {
        v22 = sub_1D44CEBF0();
        v4 = v104;
        v3 = sub_1D44CE3D8(v22, v23, v24, v104);
        v26 = v25;
        v28 = v27;
        v29 = sub_1D44CEBF0();
        v32 = sub_1D430E804(v29, v30, v31);
        v109 = v3;
        v111 = v26;
        v113 = v28 & 1;
      }
      --v7;
    }
    while (v7);
    sub_1D44CECA8(v32, v33, v34, v35, v36, v37, v38, v39, v95, v97, v98, v99, v100, v102, v104, v105, v106, v107, v108,
      v109,
      v111,
      v113);
    v6 = v115;
  }
  v96 = v6;
  v47 = sub_1D44A531C(v4);
  v48 = MEMORY[0x1E0DEE9D8];
  if (v47)
  {
    v49 = v47;
    v116 = MEMORY[0x1E0DEE9D8];
    sub_1D44CEBAC();
    v103 = v4 & 0xC000000000000001;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v50 = sub_1D44CEC30();
      v52 = 1;
    }
    else
    {
      v50 = sub_1D4397030(v4);
      v52 = v53 & 1;
    }
    v110 = v50;
    v112 = v51;
    v114 = v52;
    if ((v49 & 0x8000000000000000) == 0)
    {
      v54 = v4 & 0xFFFFFFFFFFFFFF8;
      if (v4 < 0)
        v54 = v4;
      v101 = v54;
      do
      {
        v55 = sub_1D44CEC00();
        sub_1D4396DBC(v55, v56, v57, v4);
        v59 = v58;
        v61 = *(_QWORD *)&v58[OBJC_IVAR___SNModelFeatureConnection_impl + 16];
        v60 = *(_QWORD *)&v58[OBJC_IVAR___SNModelFeatureConnection_impl + 24];
        swift_bridgeObjectRetain();

        if ((sub_1D44A3F70() & 1) == 0)
        {
          sub_1D4442C6C();
          v3 = v116;
        }
        v62 = *(_QWORD *)(v3 + 16);
        if (v62 >= *(_QWORD *)(v3 + 24) >> 1)
        {
          sub_1D42C71F0();
          v3 = v116;
        }
        *(_QWORD *)(v3 + 16) = v62 + 1;
        v63 = v3 + 16 * v62;
        *(_QWORD *)(v63 + 32) = v61;
        *(_QWORD *)(v63 + 40) = v60;
        if (v103)
        {
          v4 = v104;
          if ((v114 & 1) == 0)
            goto LABEL_50;
          if (sub_1D451B334())
            swift_isUniquelyReferenced_nonNull_native();
          sub_1D42B28FC((uint64_t *)&unk_1EFE567C0);
          sub_1D44CEC20();
          v82 = sub_1D44CEB8C();
          v74 = sub_1D44CECB4(v82, v83, v84, v85, v86, v87, v88);
        }
        else
        {
          v64 = sub_1D44CEC00();
          v4 = v104;
          v3 = sub_1D44CE3D8(v64, v65, v66, v104);
          v68 = v67;
          v70 = v69;
          v71 = sub_1D44CEC00();
          v74 = sub_1D430E804(v71, v72, v73);
          v110 = v3;
          v112 = v68;
          v114 = v70 & 1;
        }
        --v49;
      }
      while (v49);
      sub_1D44CECA8(v74, v75, v76, v77, v78, v79, v80, v81, v96, v97, v98, v99, v101, v103, v104, v105, v106, v107, v108,
        v110,
        v112,
        v114);
      v48 = v116;
      goto LABEL_41;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return;
  }
LABEL_41:
  v89 = sub_1D42F20E8();
  v90 = *(_QWORD *)(sub_1D44C9228(v89) + 16);
  swift_bridgeObjectRelease();
  if (v90 == *(_QWORD *)(v48 + 16))
  {
    v91 = swift_bridgeObjectRetain();
    v92 = sub_1D44C9228(v91);
    sub_1D44CB81C(v98, v92);
    sub_1D439E15C();
    if ((v3 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v93 = sub_1D42F20E8();
      v94 = sub_1D44C9228(v93);
      sub_1D44CB81C(v99, v94);
      sub_1D439E15C();
      sub_1D435EB80();
      return;
    }
    sub_1D435EB80();
    sub_1D42DCEE8();
    sub_1D44CEB54();
    sub_1D451B400();
    sub_1D44CEC50();
    sub_1D44CEB40();
    MEMORY[0x1D825C280](v96, MEMORY[0x1E0DEA968]);
    sub_1D44CEB40();
    swift_bridgeObjectRelease();
    sub_1D42CB5C8();
    sub_1D44CEAE0();
    sub_1D451AC08();
    sub_1D44CEB40();
    sub_1D42CB208();
    sub_1D451A794();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1D42DCEE8();
    sub_1D44CEB54();
    sub_1D451B400();
    swift_bridgeObjectRelease();
    v105 = 0xD000000000000030;
    MEMORY[0x1D825C280](v48, MEMORY[0x1E0DEA968]);
    sub_1D44CEB40();
    sub_1D435EB80();
    sub_1D42CB208();
  }
  sub_1D42DCD98(v105, (uint64_t)"com.apple.SoundAnalysis");
  sub_1D42CB208();
  swift_willThrow();
}

uint64_t sub_1D44CB81C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t i;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16))
    return 0;
  v3 = a2;
  v4 = a1;
  v31 = a2 + 56;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a2 + 56);
  v30 = (unint64_t)(63 - v5) >> 6;
  v32 = a1 + 56;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; i = v12)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (i << 6);
      v12 = i;
      goto LABEL_23;
    }
    v13 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v13 >= v30)
      goto LABEL_40;
    v14 = *(_QWORD *)(v31 + 8 * v13);
    v12 = i + 1;
    if (!v14)
    {
      v12 = i + 2;
      if (i + 2 >= v30)
        goto LABEL_40;
      v14 = *(_QWORD *)(v31 + 8 * v12);
      if (!v14)
      {
        v12 = i + 3;
        if (i + 3 >= v30)
          goto LABEL_40;
        v14 = *(_QWORD *)(v31 + 8 * v12);
        if (!v14)
          break;
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_23:
    if (!*(_QWORD *)(v4 + 16))
    {
      v2 = 0;
      goto LABEL_41;
    }
    v16 = v3;
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v19 = *v17;
    v18 = v17[1];
    sub_1D451B958();
    swift_bridgeObjectRetain();
    sub_1D451A74C();
    v20 = sub_1D451B994();
    v21 = v4;
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v20 & ~v22;
    if (((*(_QWORD *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      goto LABEL_38;
    v24 = *(_QWORD *)(v21 + 48);
    v25 = (_QWORD *)(v24 + 16 * v23);
    v26 = *v25 == v19 && v25[1] == v18;
    if (!v26 && (sub_1D451B820() & 1) == 0)
    {
      v27 = ~v22;
      while (1)
      {
        v23 = (v23 + 1) & v27;
        if (((*(_QWORD *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
          break;
        v28 = (_QWORD *)(v24 + 16 * v23);
        v29 = *v28 == v19 && v28[1] == v18;
        if (v29 || (sub_1D451B820() & 1) != 0)
          goto LABEL_37;
      }
LABEL_38:
      swift_bridgeObjectRelease();
      v2 = 0;
LABEL_41:
      sub_1D4367684();
      return v2;
    }
LABEL_37:
    result = swift_bridgeObjectRelease();
    v3 = v16;
    v4 = v21;
  }
  v15 = i + 4;
  if (i + 4 >= v30)
  {
LABEL_40:
    v2 = 1;
    goto LABEL_41;
  }
  v14 = *(_QWORD *)(v31 + 8 * v15);
  if (v14)
  {
    v12 = i + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v12 >= v30)
      goto LABEL_40;
    v14 = *(_QWORD *)(v31 + 8 * v12);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1D44CBB00(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = sub_1D435EBD4(a1, sel_inputDescriptionsByName);
  sub_1D42F40FC();
  v3 = sub_1D44CEC40();

  v4 = sub_1D44C935C(v3, sub_1D43F6E7C);
  v5 = sub_1D435EBD4((uint64_t)v4, sel_outputDescriptionsByName);
  v6 = sub_1D44CEC40();

  v7 = sub_1D44C935C(v6, sub_1D43F6E7C);
  sub_1D44CB2D8(a1, (uint64_t)v4, (uint64_t)v7);
  sub_1D435EB80();
  return sub_1D42CB208();
}

void sub_1D44CBBF0()
{
  uint64_t v0;
  char v1;

  sub_1D44CEB48();
  if (v0)
  {
    sub_1D4366B34(0x7473696C796E6564, 0xE800000000000000);
    if ((v1 & 1) != 0)
    {
      sub_1D44CEB1C();
      sub_1D44CAFF4();
      sub_1D42CB208();
    }
  }
  sub_1D4307180();
  sub_1D42BE888();
}

void sub_1D44CBC60()
{
  uint64_t v0;
  char v1;

  sub_1D44CEB48();
  if (v0)
  {
    sub_1D4366B34(0xD000000000000014, 0x80000001D455BBA0);
    if ((v1 & 1) != 0)
    {
      sub_1D44CEB1C();
      sub_1D44CB1B0();
      sub_1D42CB208();
    }
  }
  sub_1D4307180();
  sub_1D42BE888();
}

void sub_1D44CBCD0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  sub_1D44CEB48();
  if (v2)
  {
    sub_1D4366B34(0x6152656C706D6173, 0xEA00000000006574);
    if ((v3 & 1) != 0)
    {
      sub_1D44CEACC();
      sub_1D44CEB30();
      if (v0)
      {
        sub_1D42B7204();
      }
      else
      {
        sub_1D448567C();
        sub_1D44CEBA0();
        sub_1D435EBD4(v4, sel_integerValue);
        sub_1D42B7204();

      }
    }
  }
  sub_1D4377BF8();
}

void sub_1D44CBD80()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  sub_1D44CEB48();
  if (v2)
  {
    sub_1D4366B34(0x657A6953706F68, 0xE700000000000000);
    if ((v3 & 1) != 0)
    {
      sub_1D44CEACC();
      sub_1D44CEB30();
      if (v0)
      {
        sub_1D42B7204();
      }
      else
      {
        sub_1D448567C();
        sub_1D44CEBA0();
        sub_1D435EBD4(v4, sel_integerValue);
        sub_1D42B7204();

      }
    }
  }
  sub_1D4377BF8();
}

void sub_1D44CBE2C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  sub_1D44CEB48();
  if (v2)
  {
    sub_1D4366B34(0x6953776F646E6977, 0xEA0000000000657ALL);
    if ((v3 & 1) != 0)
    {
      sub_1D44CEACC();
      sub_1D44CEB30();
      if (v0)
      {
        sub_1D42B7204();
      }
      else
      {
        sub_1D448567C();
        sub_1D44CEBA0();
        sub_1D435EBD4(v4, sel_integerValue);
        sub_1D42B7204();

      }
    }
  }
  sub_1D4377BF8();
}

uint64_t sub_1D44CBEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  sub_1D44CEB48();
  if (!v2)
    return 2;
  v3 = v1;
  sub_1D4366B34(0x6165467475706E69, 0xEC00000065727574);
  if ((v4 & 1) == 0)
    return 2;
  sub_1D44CEACC();
  v5 = sub_1D439DC90(v0, v3);
  sub_1D42B7204();
  return v5 & 1;
}

void sub_1D44CBF5C()
{
  uint64_t v0;
  char v1;

  sub_1D44CEB48();
  if (v0)
  {
    sub_1D4366B34(0x656449646E756F73, 0xEF7265696669746ELL);
    if ((v1 & 1) != 0)
    {
      sub_1D44CEB1C();
      sub_1D451A6C8();
      sub_1D42CB208();
    }
  }
  sub_1D4307180();
  sub_1D42BE888();
}

uint64_t sub_1D44CBFCC(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v1 = objc_msgSend(a1, sel_metadata);
  type metadata accessor for MLModelMetadataKey(0);
  sub_1D4456098((unint64_t *)&unk_1EFE40480, 255, (uint64_t (*)(uint64_t))type metadata accessor for MLModelMetadataKey, (uint64_t)&unk_1D45235A8);
  v2 = sub_1D451A5CC();

  v3 = (id)*MEMORY[0x1E0C9E868];
  sub_1D436481C((uint64_t)v3, v2, &v6);

  sub_1D42CB0C4();
  if (v7)
  {
    sub_1D42B28FC((uint64_t *)&unk_1EFE472F0);
    if (swift_dynamicCast())
      return v5;
  }
  else
  {
    sub_1D42B5464((uint64_t)&v6);
  }
  return sub_1D451A5E4();
}

uint64_t sub_1D44CC0E8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D44CBFCC(a1);
  sub_1D44CBC60();
  v3 = v2;
  sub_1D42CB5C8();
  if (!v1 && v3)
  {
    v4 = sub_1D42CB6CC();
    sub_1D44CBB00(v4);
    sub_1D42B7204();
  }
  return sub_1D4307180();
}

void sub_1D44CC218(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  sub_1D44CBCD0();
  if (!v1)
  {
    v5 = v3;
    v6 = v4;
    sub_1D44CECC0();
    v7 = sub_1D44CBEDC();
    sub_1D44CECC0();
    sub_1D44CBE2C();
    v9 = v8;
    v11 = v10;
    sub_1D44CECC0();
    sub_1D44CBD80();
    v13 = v12;
    v23 = v14;
    sub_1D44CECC0();
    sub_1D44CBF5C();
    if (v15)
    {
      v16 = v15;
      v17 = sub_1D451A6EC();
      v21 = v18;
      v22 = v17;

      v20 = v21;
      v19 = v22;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = v6 & 1;
    *(_BYTE *)(a1 + 9) = v7;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v11 & 1;
    *(_QWORD *)(a1 + 32) = v13;
    *(_BYTE *)(a1 + 40) = v23 & 1;
    *(_QWORD *)(a1 + 48) = v19;
    *(_QWORD *)(a1 + 56) = v20;
  }
}

void sub_1D44CC31C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  unsigned __int8 v17;

  sub_1D44CBFCC(a1);
  sub_1D44CC218((uint64_t)&v11);
  v2 = sub_1D42CB208();
  if (!v1)
    sub_1D44CEA88(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12, v13, v14, v15, v16, v17, v10);
  sub_1D44CEC10();
}

uint64_t type metadata accessor for SNModelMetadataUtils()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for ModelFeatureConnection()
{
  return &type metadata for ModelFeatureConnection;
}

unint64_t sub_1D44CC3BC()
{
  unint64_t result;

  result = qword_1EFE567B8;
  if (!qword_1EFE567B8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E658, &type metadata for ModelFeatureConnection);
    atomic_store(result, (unint64_t *)&qword_1EFE567B8);
  }
  return result;
}

uint64_t sub_1D44CC3F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1D451B958();
  swift_bridgeObjectRetain();
  sub_1D451A74C();
  v8 = sub_1D451B994();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1D451B820() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1D451B820() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1D44CDFB0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1D44CC5A4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1D451B94C();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1D44CE148(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1D44CC69C(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  void *v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_1D451B364();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for SNModelFeatureConnection();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1D451B358();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_1D44CDD60(v7, result + 1);
    v27 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v25 = v8;
      sub_1D44CDAC8();
      v22 = v27;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    sub_1D44CDF30((uint64_t)v8, v22);
    *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    v10 = sub_1D451B100();
    v11 = -1 << *(_BYTE *)(v6 + 32);
    v12 = v10 & ~v11;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
    {
      type metadata accessor for SNModelFeatureConnection();
      v13 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v12);
      v14 = sub_1D451B10C();

      if ((v14 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v18 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v12);
        *a1 = v18;
        v19 = v18;
        return 0;
      }
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v12);
        v17 = sub_1D451B10C();

        if ((v17 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_1D44CE268((uint64_t)v8, v12, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

void *sub_1D44CC90C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_1D42B28FC((uint64_t *)&unk_1EFE562D0);
  v2 = *v0;
  v3 = sub_1D451B3C4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D44CCABC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1D42B28FC(&qword_1EFE567F0);
  v2 = *v0;
  v3 = sub_1D451B3C4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1D44CCC50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;

  v1 = v0;
  sub_1D42B28FC(&qword_1EFE567D0);
  v2 = *v0;
  v3 = sub_1D451B3C4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = v20;
    result = v20;
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D44CCDF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_1D42B28FC((uint64_t *)&unk_1EFE562D0);
  v3 = sub_1D451B3D0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    sub_1D451B958();
    swift_bridgeObjectRetain();
    sub_1D451A74C();
    result = sub_1D451B994();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D44CD0A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  sub_1D42B28FC(&qword_1EFE567F0);
  result = sub_1D451B3D0();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    result = sub_1D451B94C();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v21) = v17;
    ++*(_QWORD *)(v4 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v14 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    result = swift_release();
    v1 = v26;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D44CD2FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  sub_1D42B28FC(&qword_1EFE567D0);
  v3 = sub_1D451B3D0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    result = sub_1D451B100();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) == 0)
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v21);
        if (v26 != -1)
        {
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_36;
    if (v15 >= v9)
      goto LABEL_32;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v9)
        goto LABEL_32;
      v16 = *(_QWORD *)(v6 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v9)
          goto LABEL_32;
        v16 = *(_QWORD *)(v6 + 8 * v12);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v8 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v9)
      goto LABEL_32;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D44CD570()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_1D42B28FC((uint64_t *)&unk_1EFE562D0);
  v3 = sub_1D451B3D0();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      sub_1D451B958();
      sub_1D451A74C();
      result = sub_1D451B994();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                sub_1D4491EBC(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1D44CD848()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_1D42B28FC(&qword_1EFE567F0);
  result = sub_1D451B3D0();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v7 = (uint64_t *)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 56);
    v8 = 1 << *(_BYTE *)(v2 + 32);
    v27 = -1 << v8;
    v28 = v1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & v6;
    v29 = 1 << *(_BYTE *)(v2 + 32);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = result + 56;
    if ((v9 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      result = sub_1D451B94C();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) == 0)
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v21);
          if (v26 != -1)
          {
            v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v18;
      ++*(_QWORD *)(v4 + 16);
      if (v10)
        goto LABEL_6;
LABEL_7:
      v15 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_38;
      if (v15 >= v11)
        goto LABEL_32;
      v16 = v7[v15];
      ++v5;
      if (!v16)
      {
        v5 = v15 + 1;
        if (v15 + 1 >= v11)
          goto LABEL_32;
        v16 = v7[v5];
        if (!v16)
        {
          v5 = v15 + 2;
          if (v15 + 2 >= v11)
            goto LABEL_32;
          v16 = v7[v5];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v11)
            {
LABEL_32:
              if (v29 > 63)
                sub_1D4491EBC(0, v11, (_QWORD *)(v2 + 56));
              else
                *v7 = v27;
              v1 = v28;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v7[v17];
            if (!v16)
            {
              while (1)
              {
                v5 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_39;
                if (v5 >= v11)
                  goto LABEL_32;
                v16 = v7[v5];
                ++v17;
                if (v16)
                  goto LABEL_20;
              }
            }
            v5 = v17;
          }
        }
      }
LABEL_20:
      v10 = (v16 - 1) & v16;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1D44CDAC8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  sub_1D42B28FC(&qword_1EFE567D0);
  v3 = sub_1D451B3D0();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    if (!v8)
      goto LABEL_7;
LABEL_6:
    v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      result = sub_1D451B100();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v18;
      ++*(_QWORD *)(v4 + 16);
      if (v8)
        goto LABEL_6;
LABEL_7:
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_38;
      if (v15 >= v9)
        goto LABEL_32;
      v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        v12 = v15 + 1;
        if (v15 + 1 >= v9)
          goto LABEL_32;
        v16 = v6[v12];
        if (!v16)
        {
          v12 = v15 + 2;
          if (v15 + 2 >= v9)
            goto LABEL_32;
          v16 = v6[v12];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_32:
              swift_release();
              v1 = v28;
              v27 = 1 << *(_BYTE *)(v2 + 32);
              if (v27 > 63)
                sub_1D4491EBC(0, (unint64_t)(v27 + 63) >> 6, (_QWORD *)(v2 + 56));
              else
                *v6 = -1 << v27;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_39;
                if (v12 >= v9)
                  goto LABEL_32;
                v16 = v6[v12];
                ++v17;
                if (v16)
                  goto LABEL_20;
              }
            }
            v12 = v17;
          }
        }
      }
LABEL_20:
      v8 = (v16 - 1) & v16;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1D44CDD60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a2)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  sub_1D42B28FC(&qword_1EFE567D0);
  v2 = sub_1D451B3DC();
  v14 = v2;
  sub_1D451B328();
  if (!sub_1D451B37C())
  {
LABEL_16:
    swift_release();
    return v2;
  }
  type metadata accessor for SNModelFeatureConnection();
  while (1)
  {
    swift_dynamicCast();
    v2 = v14;
    if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
    {
      sub_1D44CDAC8();
      v2 = v14;
    }
    result = sub_1D451B100();
    v4 = v2 + 56;
    v5 = -1 << *(_BYTE *)(v2 + 32);
    v6 = result & ~v5;
    v7 = v6 >> 6;
    if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) == 0)
      break;
    v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
    ++*(_QWORD *)(v2 + 16);
    if (!sub_1D451B37C())
      goto LABEL_16;
  }
  v9 = 0;
  v10 = (unint64_t)(63 - v5) >> 6;
  while (++v7 != v10 || (v9 & 1) == 0)
  {
    v11 = v7 == v10;
    if (v7 == v10)
      v7 = 0;
    v9 |= v11;
    v12 = *(_QWORD *)(v4 + 8 * v7);
    if (v12 != -1)
    {
      v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1D44CDF30(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1D451B100();
  result = sub_1D451B310();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_1D44CDFB0(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1D44CD570();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1D44CC90C();
      goto LABEL_22;
    }
    sub_1D44CCDF8();
  }
  v11 = *v4;
  sub_1D451B958();
  sub_1D451A74C();
  result = sub_1D451B994();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1D451B820(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1D451B8B0();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1D451B820();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1D44CE148(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1D44CD848();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1D44CCABC();
      goto LABEL_14;
    }
    sub_1D44CD0A0();
  }
  v8 = *v3;
  result = sub_1D451B94C();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_1D451B8B0();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void sub_1D44CE268(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1D44CDAC8();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1D44CCC50();
      goto LABEL_14;
    }
    sub_1D44CD2FC();
  }
  v8 = *v3;
  v9 = sub_1D451B100();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for SNModelFeatureConnection();
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_1D451B10C();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_1D451B8B0();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_1D451B10C();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

int64_t sub_1D44CE3D8(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D44CE4BC()
{
  unint64_t result;

  result = qword_1EFE567E0;
  if (!qword_1EFE567E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E8AC, &type metadata for ModelFeatureConnection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE567E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ModelFeatureConnection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D44CE544 + 4 * byte_1D454E5EA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D44CE578 + 4 * byte_1D454E5E5[v4]))();
}

uint64_t sub_1D44CE578(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44CE580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44CE588);
  return result;
}

uint64_t sub_1D44CE594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44CE59CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D44CE5A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44CE5A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelFeatureConnection.CodingKeys()
{
  return &type metadata for ModelFeatureConnection.CodingKeys;
}

uint64_t initializeWithCopy for DetectorHeadModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectorHeadModelMetadata(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v4 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DetectorHeadModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectorHeadModelMetadata(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 56);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetectorHeadModelMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectorHeadModelMetadata()
{
  return &type metadata for DetectorHeadModelMetadata;
}

unint64_t sub_1D44CE7C4()
{
  unint64_t result;

  result = qword_1EFE567F8;
  if (!qword_1EFE567F8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E73C, &type metadata for DetectorHeadModelMetadata);
    atomic_store(result, (unint64_t *)&qword_1EFE567F8);
  }
  return result;
}

unint64_t sub_1D44CE804()
{
  unint64_t result;

  result = qword_1EFE56800;
  if (!qword_1EFE56800)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E884, &type metadata for ModelFeatureConnection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56800);
  }
  return result;
}

unint64_t sub_1D44CE844()
{
  unint64_t result;

  result = qword_1EFE56808;
  if (!qword_1EFE56808)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E7F4, &type metadata for ModelFeatureConnection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56808);
  }
  return result;
}

unint64_t sub_1D44CE884()
{
  unint64_t result;

  result = qword_1EFE56810;
  if (!qword_1EFE56810)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E81C, &type metadata for ModelFeatureConnection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56810);
  }
  return result;
}

unint64_t sub_1D44CE8C0()
{
  unint64_t result;

  result = qword_1EFE56820;
  if (!qword_1EFE56820)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E9B4, &type metadata for DetectorHeadModelMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56820);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DetectorHeadModelMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1D44CE948 + 4 * byte_1D454E5F4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1D44CE97C + 4 * byte_1D454E5EF[v4]))();
}

uint64_t sub_1D44CE97C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44CE984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44CE98CLL);
  return result;
}

uint64_t sub_1D44CE998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44CE9A0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1D44CE9A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44CE9AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DetectorHeadModelMetadata.CodingKeys()
{
  return &type metadata for DetectorHeadModelMetadata.CodingKeys;
}

unint64_t sub_1D44CE9CC()
{
  unint64_t result;

  result = qword_1EFE56838;
  if (!qword_1EFE56838)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E98C, &type metadata for DetectorHeadModelMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56838);
  }
  return result;
}

unint64_t sub_1D44CEA0C()
{
  unint64_t result;

  result = qword_1EFE56840;
  if (!qword_1EFE56840)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E8FC, &type metadata for DetectorHeadModelMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56840);
  }
  return result;
}

unint64_t sub_1D44CEA4C()
{
  unint64_t result;

  result = qword_1EFE56848;
  if (!qword_1EFE56848)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454E924, &type metadata for DetectorHeadModelMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56848);
  }
  return result;
}

__n128 sub_1D44CEA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unint64_t a12, unsigned __int8 a13, unint64_t a14, unsigned __int8 a15, __n128 a16)
{
  __n128 *v16;
  __n128 result;

  result = a16;
  v16->n128_u64[0] = a9;
  v16->n128_u8[8] = a10;
  v16->n128_u8[9] = a11;
  v16[1].n128_u64[0] = a12;
  v16[1].n128_u8[8] = a13;
  v16[2].n128_u64[0] = a14;
  v16[2].n128_u8[8] = a15;
  v16[3] = a16;
  return result;
}

uint64_t sub_1D44CEACC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D44CEAE0()
{
  return sub_1D451A794();
}

uint64_t sub_1D44CEB08()
{
  return sub_1D451B634();
}

uint64_t sub_1D44CEB1C()
{
  return swift_bridgeObjectRetain();
}

id sub_1D44CEB30()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1D432E1D0(v1, v0);
}

uint64_t sub_1D44CEB40()
{
  return sub_1D451A794();
}

uint64_t sub_1D44CEB68()
{
  return sub_1D451B970();
}

uint64_t sub_1D44CEB70()
{
  return sub_1D451B970();
}

uint64_t sub_1D44CEB78()
{
  return sub_1D451B1E4();
}

uint64_t sub_1D44CEB8C()
{
  return sub_1D451B388();
}

void sub_1D44CEBA0()
{
  sub_1D4442F08();
}

void sub_1D44CEBAC()
{
  sub_1D42C71F0();
}

uint64_t sub_1D44CEBC0()
{
  return sub_1D451B70C();
}

uint64_t sub_1D44CEBD0()
{
  return sub_1D451B724();
}

uint64_t sub_1D44CEBE0()
{
  return sub_1D451B64C();
}

uint64_t sub_1D44CEBF0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44CEC00()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44CEC20()
{
  return sub_1D451AC20();
}

uint64_t sub_1D44CEC30()
{
  return sub_1D451B31C();
}

uint64_t sub_1D44CEC40()
{
  return sub_1D451A5CC();
}

uint64_t sub_1D44CEC64()
{
  return sub_1D451A74C();
}

uint64_t sub_1D44CEC70()
{
  return sub_1D451B718();
}

uint64_t sub_1D44CEC7C()
{
  return sub_1D451B640();
}

uint64_t sub_1D44CEC88()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44CEC9C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1D44CC3F8(a1, v1, v2);
}

uint64_t sub_1D44CECA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  return sub_1D430E804(a20, a21, a22);
}

uint64_t sub_1D44CECB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t (*v7)(char *, _QWORD);
  va_list va;

  va_start(va, a7);
  return v7(va, 0);
}

uint64_t sub_1D44CECC0()
{
  uint64_t v0;

  return v0;
}

void sub_1D44CECCC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v0 = (void *)sub_1D451A6C8();
  v1 = (void *)sub_1D451A6C8();
  v2 = PPSCreateTelemetryIdentifier();

  v3 = v2;
  if (!v2)
  {
    sub_1D44CF23C();
    v3 = swift_allocError();
    swift_willThrow();
  }
  qword_1EFEA7A68 = v3;
  byte_1EFEA7A70 = v2 == 0;
}

uint64_t sub_1D44CED94()
{
  uint64_t (*v0)(_QWORD *);
  char v1;
  id v2;
  uint64_t result;
  uint64_t v4;

  if (qword_1EFE48F18 != -1)
    swift_once();
  v0 = (uint64_t (*)(_QWORD *))qword_1EFEA7A68;
  v1 = byte_1EFEA7A70;
  if ((byte_1EFEA7A70 & 1) != 0)
  {
    v2 = (id)qword_1EFEA7A68;
    sub_1D42B28FC(&qword_1EFE49BB0);
    swift_willThrowTypedImpl();
    result = 0;
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = sub_1D44CF234;
    *(_QWORD *)(result + 24) = v4;
    v0 = sub_1D4444A7C;
  }
  qword_1EFEA7A78 = (uint64_t)v0;
  unk_1EFEA7A80 = result;
  byte_1EFEA7A88 = v1;
  return result;
}

void sub_1D44CEE80()
{
  id v0;

  v0 = (id)sub_1D451A5A8();
  PPSSendTelemetry();

}

uint64_t (*sub_1D44CEED8())(uint64_t a1)
{
  uint64_t (*result)(uint64_t);
  uint64_t v1;

  result = sub_1D44CEEF8();
  qword_1EFEA7A90 = (uint64_t)result;
  *(_QWORD *)algn_1EFEA7A98 = v1;
  return result;
}

uint64_t (*sub_1D44CEEF8())(uint64_t a1)
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v8;

  if (qword_1EFE48F20 != -1)
    swift_once();
  v1 = (void *)qword_1EFEA7A78;
  v0 = unk_1EFEA7A80;
  if ((byte_1EFEA7A88 & 1) != 0)
  {
    v2 = (id)qword_1EFEA7A78;
    sub_1D42B28FC(&qword_1EFE49BB0);
    swift_willThrowTypedImpl();
    if (qword_1EFE40338 != -1)
      swift_once();
    v3 = sub_1D451A014();
    sub_1D42CC880(v3, (uint64_t)qword_1EFEA7700);
    v4 = sub_1D4519FFC();
    v5 = sub_1D451AF5C();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1D42A7000, v4, v5, "Could not create PowerLog telemetry writer; ignoring power logs.", v6, 2u);
      MEMORY[0x1D825E524](v6, -1, -1);
    }
    sub_1D44CF1C0(v1, v0, 1);

    return nullsub_1;
  }
  else
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(_QWORD *)(v8 + 24) = v0;
    swift_retain();
    return sub_1D44CF1F4;
  }
}

uint64_t sub_1D44CF08C(uint64_t a1, __int16 a2)
{
  uint64_t inited;
  uint64_t v5;

  sub_1D42B28FC((uint64_t *)&unk_1EFE4A580);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D4526260;
  sub_1D44CF358();
  *(_QWORD *)(inited + 96) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 72) = a1;
  sub_1D44CF358();
  v5 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(inited + 168) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 144) = a2 & 1;
  sub_1D44CF358();
  *(_QWORD *)(inited + 240) = v5;
  *(_BYTE *)(inited + 216) = HIBYTE(a2) & 1;
  return sub_1D451A5E4();
}

void sub_1D44CF1C0(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_release();
}

uint64_t sub_1D44CF1D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44CF1F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_1D44CF224()
{
  return swift_deallocObject();
}

void sub_1D44CF234()
{
  sub_1D44CEE80();
}

unint64_t sub_1D44CF23C()
{
  unint64_t result;

  result = qword_1EFE56850;
  if (!qword_1EFE56850)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454EAE0, &type metadata for PowerLogUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_1EFE56850);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PowerLogUtils.DomainError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D44CF2B8 + 4 * byte_1D454EA10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D44CF2D8 + 4 * byte_1D454EA15[v4]))();
}

_BYTE *sub_1D44CF2B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D44CF2D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44CF2E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44CF2E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44CF2F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44CF2F8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PowerLogUtils.DomainError()
{
  return &type metadata for PowerLogUtils.DomainError;
}

unint64_t sub_1D44CF318()
{
  unint64_t result;

  result = qword_1EFE56858;
  if (!qword_1EFE56858)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454EAB8, &type metadata for PowerLogUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_1EFE56858);
  }
  return result;
}

uint64_t sub_1D44CF358()
{
  return sub_1D451B3B8();
}

void sub_1D44CF368()
{
  sub_1D44D2744();
  sub_1D451B958();
  sub_1D44D2838();
  sub_1D451B994();
  sub_1D42BE928();
}

void sub_1D44CF398(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_1D42B28FC(&qword_1EFE56908);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB210();
  v6 = v5 - v4;
  sub_1D42B5528(a1, a1[3]);
  sub_1D44D213C();
  sub_1D451BA24();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  sub_1D44380AC();
}

void sub_1D44CF444()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1D42BE910();
  v2 = v1;
  sub_1D42B28FC(&qword_1EFE56988);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v3);
  sub_1D42CB18C();
  sub_1D42B5528(v2, v2[3]);
  sub_1D44D2564();
  sub_1D451BA24();
  sub_1D42B5588();
  sub_1D42CB068();
  if (!v0)
  {
    sub_1D42B5ACC();
    sub_1D42CB068();
  }
  sub_1D42CB294();
  sub_1D42BE844();
}

void sub_1D44CF5DC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;

  sub_1D42BE910();
  v2 = v1;
  v4 = v3;
  v5 = sub_1D42B28FC(&qword_1EFE56998);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42B5528(v2, v2[3]);
  sub_1D44D2564();
  sub_1D42F8648();
  if (!v0)
  {
    LOBYTE(v6) = 0;
    sub_1D42B55C4();
    sub_1D44BB13C();
    sub_1D42B5B80();
    sub_1D44BB13C();
    sub_1D42F8674();
    *(_OWORD *)v4 = v6;
    *(_QWORD *)(v4 + 16) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    *(_OWORD *)(v4 + 32) = v9;
    *(_BYTE *)(v4 + 48) = v10;
    *(_BYTE *)(v4 + 49) = v11;
    *(_BYTE *)(v4 + 50) = v12;
    *(_BYTE *)(v4 + 51) = v13;
    *(_BYTE *)(v4 + 52) = v14;
    *(_BYTE *)(v4 + 53) = v15;
    *(_QWORD *)(v4 + 56) = v16;
    *(_BYTE *)(v4 + 64) = v17;
  }
  sub_1D42B5400((uint64_t)v2);
  sub_1D42BE844();
}

uint64_t sub_1D44CF744()
{
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B97C();
  sub_1D451B97C();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D451B988();
  sub_1D42CFC6C();
  sub_1D42CFC6C();
  swift_bridgeObjectRetain();
  sub_1D451A74C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D44CF848(float64x2_t *a1, float64x2_t *a2)
{
  double v4;
  float64_t v5;
  double v6;
  float64_t v7;
  float64_t v8;
  double v9;
  double v10;
  float64_t v11;
  float64_t v12;
  BOOL v13;
  uint64_t result;
  _QWORD v17[2];
  float64x2_t v18;
  float64_t v19;
  float64_t v20;
  _QWORD v21[2];
  float64x2_t v22;
  float64_t v23;
  float64_t v24;

  v4 = a1->f64[0];
  v5 = a1[2].f64[1];
  v6 = a1[5].f64[0];
  v7 = a1[5].f64[1];
  v8 = a1[6].f64[0];
  v9 = a2->f64[0];
  v10 = a2[5].f64[0];
  v11 = a2[5].f64[1];
  v12 = a2[6].f64[0];
  v20 = a2[2].f64[1];
  *(double *)v21 = v4;
  v21[1] = *(_QWORD *)&a1->f64[1];
  v22 = a1[1];
  v23 = a1[2].f64[0];
  v24 = v5;
  *(double *)v17 = v9;
  v17[1] = *(_QWORD *)&a2->f64[1];
  v18 = a2[1];
  v19 = a2[2].f64[0];
  v13 = static TimeRange.== infix(_:_:)((uint64_t)v21, (uint64_t)v17);
  result = 0;
  if (v13
    && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(a1[3], a2[3]), (int32x4_t)vceqq_f64(a1[4], a2[4]))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0&& v6 == v10)
  {
    if (*(_QWORD *)&v7 == *(_QWORD *)&v11 && *(_QWORD *)&v8 == *(_QWORD *)&v12)
      return 1;
    else
      return sub_1D451B820();
  }
  return result;
}

uint64_t sub_1D44CF988(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char v12;

  v2 = a1 == 0x676E6152656D6974 && a2 == 0xE900000000000065;
  if (v2 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563;
    if (v6 || (sub_1D451B820() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 1685024621 && a2 == 0xE400000000000000;
      if (v7 || (sub_1D451B820() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x65636E656C6176 && a2 == 0xE700000000000000;
        if (v8 || (sub_1D451B820() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x6C6173756F7261 && a2 == 0xE700000000000000;
          if (v9 || (sub_1D451B820() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x636E616E696D6F64 && a2 == 0xE900000000000065;
            if (v10 || (sub_1D451B820() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0x6564496C65646F6DLL && a2 == 0xEF7265696669746ELL)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              v12 = sub_1D451B820();
              swift_bridgeObjectRelease();
              if ((v12 & 1) != 0)
                return 6;
              else
                return 7;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1D44CFC8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D44CFCC4 + 4 * byte_1D454EB30[a1]))(0x676E6152656D6974, 0xE900000000000065);
}

uint64_t sub_1D44CFCC4()
{
  return 0x6E656469666E6F63;
}

uint64_t sub_1D44CFCE0()
{
  return 1685024621;
}

uint64_t sub_1D44CFCF0()
{
  return 0x65636E656C6176;
}

uint64_t sub_1D44CFD08()
{
  return 0x6C6173756F7261;
}

uint64_t sub_1D44CFD20()
{
  return 0x636E616E696D6F64;
}

uint64_t sub_1D44CFD34()
{
  return 0x6564496C65646F6DLL;
}

uint64_t sub_1D44CFD58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1D42B28FC((uint64_t *)&unk_1EFE56930);
  v6 = *(_QWORD *)(v3 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v4);
  sub_1D42CB18C();
  sub_1D42B5528(a1, a1[3]);
  sub_1D44D2178();
  sub_1D451BA24();
  sub_1D42CA408();
  sub_1D451B760();
  if (!v7)
  {
    sub_1D44D27EC(1);
    sub_1D44D27E0();
    sub_1D44D27EC(2);
    sub_1D44D27E0();
    sub_1D44D27EC(3);
    sub_1D44D27E0();
    sub_1D44D27EC(4);
    sub_1D44D27E0();
    sub_1D44D27EC(5);
    sub_1D44D27E0();
    sub_1D451B724();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v1, v3);
}

uint64_t sub_1D44CFF60@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = sub_1D42B28FC(&qword_1EFE56918);
  MEMORY[0x1E0C80A78](v5);
  sub_1D42B5528(a1, a1[3]);
  sub_1D44D2178();
  sub_1D42F8648();
  if (!v2)
  {
    sub_1D42CA3CC();
    sub_1D451B688();
    v20 = a2;
    sub_1D44D272C(1);
    v7 = v6;
    sub_1D44D272C(2);
    v9 = v8;
    sub_1D44D272C(3);
    v11 = v10;
    sub_1D44D272C(4);
    v13 = v12;
    sub_1D44D272C(5);
    v15 = v14;
    v17 = sub_1D451B64C();
    v19 = v18;
    sub_1D42CB3CC();
    *v20 = v21;
    v20[1] = v22;
    v20[2] = v23;
    v20[3] = v24;
    v20[4] = v25;
    v20[5] = v26;
    v20[6] = v7;
    v20[7] = v9;
    v20[8] = v11;
    v20[9] = v13;
    v20[10] = v15;
    v20[11] = v17;
    v20[12] = v19;
  }
  return sub_1D42B5400((uint64_t)a1);
}

uint64_t sub_1D44D0178()
{
  sub_1D44D213C();
  return sub_1D451BA3C();
}

uint64_t sub_1D44D01A0()
{
  sub_1D44D213C();
  return sub_1D451BA48();
}

void sub_1D44D01C8(_QWORD *a1)
{
  sub_1D44CF398(a1);
}

uint64_t sub_1D44D01DC()
{
  sub_1D44D2564();
  return sub_1D451BA3C();
}

uint64_t sub_1D44D0204()
{
  sub_1D44D2564();
  return sub_1D451BA48();
}

void sub_1D44D022C()
{
  sub_1D44CF5DC();
}

void sub_1D44D0240()
{
  sub_1D44CF444();
}

uint64_t sub_1D44D0254()
{
  unsigned __int8 *v0;

  return sub_1D44CFC8C(*v0);
}

uint64_t sub_1D44D025C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44CF988(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44D0280()
{
  sub_1D44D2178();
  return sub_1D451BA3C();
}

uint64_t sub_1D44D02A8()
{
  sub_1D44D2178();
  return sub_1D451BA48();
}

void sub_1D44D02D8()
{
  sub_1D44D2744();
  sub_1D451B958();
  sub_1D44D2838();
  sub_1D451B994();
  sub_1D42BE928();
}

uint64_t sub_1D44D0304@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D44CFF60(a1, a2);
}

uint64_t sub_1D44D0318(_QWORD *a1)
{
  return sub_1D44CFD58(a1);
}

uint64_t sub_1D44D0330(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1D44D037C;
  return sub_1D43768A8();
}

uint64_t sub_1D44D037C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v6)(void);

  sub_1D42F1E44();
  v2[4] = v0;
  v2[5] = v1;
  swift_task_dealloc();
  if (v1)
    return sub_1D42F1DEC();
  v6 = (uint64_t (*)(void))((char *)&dword_1EFE4E240 + dword_1EFE4E240);
  v5 = (_QWORD *)swift_task_alloc();
  v2[6] = v5;
  *v5 = v3;
  v5[1] = sub_1D42EC5A0;
  return sub_1D42E3A2C(v6);
}

uint64_t sub_1D44D03FC(uint64_t a1, uint64_t a2)
{
  _QWORD v4[5];

  sub_1D447DAC4();
  v4[3] = sub_1D42B28FC(&qword_1EFE4FD78);
  v4[4] = sub_1D44D2500();
  v4[0] = a2;
  swift_retain();
  sub_1D447DAE0(v4);
  swift_release();
  return sub_1D42B5400((uint64_t)v4);
}

uint64_t sub_1D44D0480(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1D42EC778;
  return sub_1D44D0330(a1);
}

uint64_t sub_1D44D04D4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1D44D03FC(a1, *v1);
}

uint64_t sub_1D44D04EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_1D42EC834;
  return sub_1D44D0480(a2);
}

id sub_1D44D053C@<X0>(_QWORD *a1@<X8>)
{
  id result;

  type metadata accessor for SNSpeechEmotionResult();
  swift_bridgeObjectRetain();
  result = sub_1D441DD64();
  *a1 = result;
  return result;
}

void sub_1D44D0604()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  __int128 v13[4];
  _BYTE v14[80];

  sub_1D42BE910();
  v2 = v1;
  v4 = v3;
  sub_1D42B28FC(&qword_1EFE56880);
  sub_1D42CB1BC();
  MEMORY[0x1E0C80A78](v5);
  sub_1D42CB18C();
  sub_1D44BB134(v14, v4);
  v6 = v2[3];
  v7 = v2[4];
  v8 = sub_1D42B5528(v2, v6);
  sub_1D44BB134(v13, v4);
  v9 = sub_1D44D2844();
  v12[2] = v14;
  sub_1D42B5B38((uint64_t)v14);
  sub_1D43CC6C0((uint64_t)v8, v13, v9, sub_1D44D1F10, (uint64_t)v12, v6, v9, v7);
  v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    *(_QWORD *)&v13[0] = v11;
    sub_1D42B28FC(&qword_1EFE56888);
    sub_1D42BE210(&qword_1EFE56890, &qword_1EFE56888, MEMORY[0x1E0C95D90]);
    sub_1D451A308();
    sub_1D42EA1BC();
    sub_1D42BE210(&qword_1EFE56898, &qword_1EFE56880, MEMORY[0x1E0C95950]);
    sub_1D451A2E4();
    sub_1D42CB294();
  }
  sub_1D42BE844();
}

void sub_1D44D078C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24[2];
  _BYTE v25[72];

  sub_1D42BE910();
  v2 = v1;
  v4 = v3;
  v5 = sub_1D42B28FC(&qword_1EFE568A0);
  v19 = *(_QWORD *)(v5 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v6);
  sub_1D42CB210();
  v9 = v8 - v7;
  v20 = sub_1D42B28FC(&qword_1EFE568A8);
  v22 = *(_QWORD *)(v20 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v10);
  sub_1D42CB210();
  v13 = v12 - v11;
  v21 = sub_1D42B28FC((uint64_t *)&unk_1EFE568B0);
  v23 = *(_QWORD *)(v21 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v14);
  sub_1D42F1ED4();
  sub_1D44BB134(v25, v4);
  v15 = sub_1D42B6F40();
  sub_1D44BB134((void *)(v15 + 16), v4);
  sub_1D42E2D8C(v2, (uint64_t)v24);
  v16 = sub_1D42B6F40();
  sub_1D42E33E0(v24, v16 + 16);
  sub_1D44BB134((void *)(v16 + 56), v25);
  v17 = (_QWORD *)sub_1D42B6F40();
  v17[2] = sub_1D44D1F5C;
  v17[3] = v15;
  v17[4] = sub_1D44BAA78;
  v17[5] = v16;
  v18 = sub_1D42B6F40();
  *(_QWORD *)(v18 + 16) = sub_1D42F0F18;
  *(_QWORD *)(v18 + 24) = v17;
  sub_1D42B5B38((uint64_t)v25);
  sub_1D42B5B38((uint64_t)v25);
  swift_retain();
  swift_retain();
  sub_1D42B28FC((uint64_t *)&unk_1EFE4A6A0);
  sub_1D42BE210(qword_1EFE568C0, (uint64_t *)&unk_1EFE4A6A0, (uint64_t)&unk_1D4532BA0);
  sub_1D451A2C0();
  sub_1D44D2844();
  sub_1D42BE210(&qword_1EFE4A6B0, &qword_1EFE568A0, MEMORY[0x1E0C96148]);
  sub_1D451A3A4();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v9, v5);
  swift_release();
  sub_1D42BE93C();
  sub_1D42BE210(&qword_1EFE568D0, &qword_1EFE568A8, MEMORY[0x1E0C95B48]);
  sub_1D451A308();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v13, v20);
  sub_1D42BE210(&qword_1EFE568D8, (uint64_t *)&unk_1EFE568B0, MEMORY[0x1E0C95950]);
  sub_1D451A2E4();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v0, v21);
  sub_1D42BE844();
}

uint64_t sub_1D44D0A78()
{
  objc_class *v0;
  id v1;
  uint64_t v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for SNEstimateSpeechEmotionRequest();
  v4.receiver = objc_allocWithZone(v0);
  v4.super_class = v0;
  v1 = objc_msgSendSuper2(&v4, sel_init);
  type metadata accessor for SNSpeechEmotionEstimator();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;

  return v2;
}

uint64_t sub_1D44D0AF4()
{
  uint64_t result;

  type metadata accessor for SNSpeechEmotionEstimator();
  result = sub_1D42B6F40();
  *(_QWORD *)(result + 16) = 0;
  return result;
}

id sub_1D44D0B30()
{
  objc_class *v0;
  objc_super v2;

  v0 = (objc_class *)type metadata accessor for SNEstimateSpeechEmotionRequest();
  v2.receiver = objc_allocWithZone(v0);
  v2.super_class = v0;
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t sub_1D44D0B78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = *a1 + OBJC_IVAR___SNSpeechEmotionResult_impl;
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 80);
  v6 = *(_QWORD *)(v2 + 88);
  v5 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(a2 + 40) = v3;
  v7 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 80) = v4;
  *(_QWORD *)(a2 + 88) = v6;
  *(_QWORD *)(a2 + 96) = v5;
  return swift_bridgeObjectRetain();
}

id SNEstimateSpeechEmotionRequest.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  objc_class *ObjectType;
  id result;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  v4.receiver = objc_allocWithZone(ObjectType);
  v4.super_class = ObjectType;
  result = objc_msgSendSuper2(&v4, sel_init);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

void SNEstimateSpeechEmotionRequest.hash.getter()
{
  sub_1D42BE9A8();
  sub_1D42CB230();
  sub_1D42BE978();
}

uint64_t SNEstimateSpeechEmotionRequest.isEqual(_:)(uint64_t a1)
{
  uint64_t v2;
  void *v4;
  _BYTE v5[32];
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1D42B7104();
  sub_1D42B28B4(a1, (uint64_t)&v7);
  if (!v8)
    return 0;
  sub_1D42B293C(&v7, v6);
  sub_1D42B294C((uint64_t)v6, (uint64_t)v5);
  v2 = swift_dynamicCast();
  if ((_DWORD)v2)

  sub_1D42B5400((uint64_t)v6);
  return v2;
}

id SNEstimateSpeechEmotionRequest.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SNEstimateSpeechEmotionRequest.init(coder:)(a1);
}

id SNEstimateSpeechEmotionRequest.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v2 = v1;
  v4 = (objc_class *)sub_1D42CFC30();
  v5 = v2;
  v6 = sub_1D42F3A74();
  sub_1D42B26C8(v6, v7, (uint64_t)a1);

  v10.receiver = objc_allocWithZone(v4);
  v10.super_class = v4;
  v8 = objc_msgSendSuper2(&v10, sel_init);

  sub_1D42CFC30();
  sub_1D42F3A54();
  return v8;
}

Swift::Void __swiftcall SNEstimateSpeechEmotionRequest.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1D42F3A74();
  sub_1D42B0F1C(v2, v3, v1);
}

uint64_t static SNEstimateSpeechEmotionRequest.supportsSecureCoding.getter()
{
  return 1;
}

id SNEstimateSpeechEmotionRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_1D42B7104();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_UNKNOWN **sub_1D44D0FDC()
{
  uint64_t v0;
  _UNKNOWN **result;

  result = (_UNKNOWN **)sub_1D44D0AF4();
  if (v0)
    return &off_1E97A8B90;
  return result;
}

uint64_t type metadata accessor for SNEstimateSpeechEmotionRequest()
{
  return objc_opt_self();
}

uint64_t method lookup function for SNEstimateSpeechEmotionRequest()
{
  return swift_lookUpClassMethod();
}

id sub_1D44D1030(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  id v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v53;
  id v54[7];

  v54[6] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (void *)objc_opt_self();
  sub_1D42B28FC(&qword_1EFE40520);
  v5 = sub_1D42B6F40();
  *(_OWORD *)(v5 + 16) = xmmword_1D45295F0;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 48) = 0xD000000000000018;
  *(_QWORD *)(v5 + 56) = 0x80000001D455BD40;
  swift_bridgeObjectRetain();
  v6 = (void *)sub_1D451A908();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v4, sel_pathWithComponents_, v6);

  if (!v7)
  {
    sub_1D451A6EC();
    v7 = (id)sub_1D451A6C8();
    swift_bridgeObjectRelease();
  }
  v8 = (void *)objc_opt_self();
  v54[0] = 0;
  v9 = sub_1D45001AC((uint64_t)v8, (uint64_t)v54);
  if (!v9)
  {
    v46 = v54[0];

    sub_1D4519AA4();
    sub_1D42B7124();
    return v9;
  }
  v10 = v54[0];
  v11 = (void *)sub_1D451A6C8();
  v12 = sub_1D44D2818();
  v15 = sub_1D44FD014(v12, v13, v11, v14);

  if (!v15)
  {
    v47 = v54[0];

    sub_1D4519AA4();
    sub_1D42B7124();
LABEL_17:

    return v9;
  }
  v16 = v54[0];
  v17 = (void *)sub_1D44D27CC();
  v18 = sub_1D44D2818();
  v21 = sub_1D44FDDF4(v18, v19, v17, v20);

  if (!v21)
  {
    v48 = v54[0];

    sub_1D4519AA4();
    sub_1D42B7124();

    goto LABEL_17;
  }
  v22 = v54[0];
  v23 = (void *)sub_1D44D27CC();
  v54[0] = 0;
  v24 = sub_1D44FE0E0((uint64_t)v8, v9, v23, v7, (uint64_t)v54);

  if (!v24)
  {
    v49 = v54[0];
    sub_1D44D282C();

    sub_1D42B7124();
    goto LABEL_17;
  }
  v25 = v54[0];
  sub_1D44D27F8();
  sub_1D450053C(v26, v27, 1, v28);
  v29 = sub_1D44D279C();
  if (!sub_1D42F1E90(v29, v30, v15, v21, v31, v32, v33, v34))
  {
    v50 = v53;
    sub_1D44D282C();

LABEL_16:
    sub_1D42B7124();

    goto LABEL_17;
  }
  v35 = v53;
  sub_1D44D27F8();
  sub_1D45005C8(v36, v37, v38);
  v39 = sub_1D44D279C();
  if ((sub_1D42F1E90(v39, v40, v21, v24, v41, v42, v43, v44) & 1) == 0)
  {
    v51 = v53;
    sub_1D4519AA4();

    goto LABEL_16;
  }
  v45 = v53;
  sub_1D44F3DE8((uint64_t)v9);
  sub_1D44F44A0((uint64_t)v9);

  return v9;
}

uint64_t sub_1D44D13A0(void *a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;

  v2 = objc_opt_self();
  v3 = sub_1D44FEA8C(v2, a1);
  if (v3)
  {
    v4 = v3;
    v5 = sub_1D4519C54();
    v7 = v6;

    if (sub_1D44D280C() > 15)
      __asm { BR              X10 }
    if (qword_1EFE40338 != -1)
      swift_once();
    v8 = sub_1D451A014();
    sub_1D42CC880(v8, (uint64_t)qword_1EFEA7700);
    sub_1D42DD16C(v5, v7);
    v9 = sub_1D4519FFC();
    v10 = sub_1D451AF5C();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      *(_DWORD *)v11 = 134218240;
      sub_1D44D280C();
      sub_1D451B1A8();
      sub_1D44D2790();
      *(_WORD *)(v11 + 12) = 2048;
      sub_1D451B1A8();
      _os_log_impl(&dword_1D42A7000, v9, v10, "EAR framework returned %ld bytes instead of %ld float elements", (uint8_t *)v11, 0x16u);
      MEMORY[0x1D825E524](v11, -1, -1);
    }
    else
    {
      sub_1D44D2790();
    }

    sub_1D44D2790();
  }
  return MEMORY[0x1E0DEE9D8];
}

id sub_1D44D19D0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if (v1)
    return v1;
  sub_1D44D20C0();
  swift_allocError();
  return (id)swift_willThrow();
}

void sub_1D44D1A28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  v3 = v0;
  v4 = *v0;
  sub_1D42B28FC(qword_1EFE47450);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v5);
  sub_1D42F1ED4();
  type metadata accessor for SNFileUtils();
  sub_1D44D2CD0(v2);
  v6 = sub_1D4519BC4();
  if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(v2, 1, v6) == 1)
  {
    __break(1u);
  }
  else
  {
    v7 = sub_1D4519B94();
    v9 = v8;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
    v10 = (_QWORD *)sub_1D42B6F40();
    v10[2] = v7;
    v10[3] = v9;
    v10[4] = v4;
    v11 = sub_1D42CEEA4();
    sub_1D42EA1BC();
    if (!v1)
    {
      v12 = (void *)v3[2];
      v3[2] = v11;

    }
    sub_1D44380AC();
  }
}

id sub_1D44D1B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id result;

  result = sub_1D44D1030(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

id sub_1D44D1B58()
{
  uint64_t v0;
  id result;
  void *v2;
  void *v3;
  id v4;

  result = sub_1D44D19D0();
  if (!v0)
  {
    v2 = result;
    v3 = (void *)sub_1D44D27CC();
    v4 = sub_1D44F590C(v2, v3);

    return v4;
  }
  return result;
}

uint64_t type metadata accessor for SNSpeechEmotionEstimator()
{
  return objc_opt_self();
}

void type metadata accessor for SpeechEmotionEstimation.AudioSourceAgnosticRequest()
{
  sub_1D42CB35C();
}

void type metadata accessor for SpeechEmotionEstimation()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44D1BF8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D44D1C00(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D44D1C44(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D44D1CEC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D44D1D54(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 96);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D44D1D94(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 96) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SpeechEmotionEstimation.Result()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44D1DF8(uint64_t a1)
{
  unint64_t result;

  result = sub_1D43AA4D4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1D44D1E1C(uint64_t a1)
{
  unint64_t result;

  result = sub_1D43AA6A4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1D44D1E44()
{
  unint64_t result;

  result = qword_1EFE56870;
  if (!qword_1EFE56870)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454EC90, &unk_1E97A8138);
    atomic_store(result, (unint64_t *)&qword_1EFE56870);
  }
  return result;
}

unint64_t sub_1D44D1E84()
{
  unint64_t result;

  result = qword_1EFE56878;
  if (!qword_1EFE56878)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454ED80, &unk_1E97A7FD8);
    atomic_store(result, (unint64_t *)&qword_1EFE56878);
  }
  return result;
}

uint64_t sub_1D44D1EC0(void *a1)
{
  return sub_1D44D13A0(a1);
}

id sub_1D44D1ED4()
{
  return sub_1D44D1B58();
}

void sub_1D44D1EE8()
{
  sub_1D44D1A28();
}

id sub_1D44D1EFC()
{
  return sub_1D44D19D0();
}

uint64_t sub_1D44D1F10()
{
  return sub_1D44D0A78();
}

uint64_t sub_1D44D1F28()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_1D44D1F5C()
{
  return sub_1D44D0B30();
}

uint64_t sub_1D44D1F74()
{
  uint64_t v0;

  sub_1D42B5400(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1D44D1FB0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D44D1FDC()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1D44D2000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1D4519A14();
  if (v4)
  {
    v5 = sub_1D4519A38();
    if (__OFSUB__(a1, v5))
    {
LABEL_12:
      __break(1u);
      return;
    }
    v4 += a1 - v5;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_12;
  }
  v8 = sub_1D4519A2C();
  if (v4)
  {
    if (v8 >= v7)
      v9 = v7;
    else
      v9 = v8;
    sub_1D44AD12C(v4, v9 / 4);
  }
}

uint64_t sub_1D44D2094@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1D43EF8A0(*a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1D44D20C0()
{
  unint64_t result;

  result = qword_1EFE568F8;
  if (!qword_1EFE568F8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F158, &unk_1E97A8B10);
    atomic_store(result, (unint64_t *)&qword_1EFE568F8);
  }
  return result;
}

uint64_t sub_1D44D20FC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_1D44D2120@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1D44D1B30(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1D44D213C()
{
  unint64_t result;

  result = qword_1EFE56910;
  if (!qword_1EFE56910)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F108, &type metadata for SpeechEmotionEstimation.AudioSourceAgnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56910);
  }
  return result;
}

unint64_t sub_1D44D2178()
{
  unint64_t result;

  result = qword_1EFE56920;
  if (!qword_1EFE56920)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F0B8, &type metadata for SpeechEmotionEstimation.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56920);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SpeechEmotionEstimation.Result.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1D44D2200 + 4 * byte_1D454EB3C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1D44D2234 + 4 * byte_1D454EB37[v4]))();
}

uint64_t sub_1D44D2234(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D223C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44D2244);
  return result;
}

uint64_t sub_1D44D2250(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44D2258);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1D44D225C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D2264(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpeechEmotionEstimation.Result.CodingKeys()
{
  return &type metadata for SpeechEmotionEstimation.Result.CodingKeys;
}

ValueMetadata *type metadata accessor for SpeechEmotionEstimation.AudioSourceAgnosticRequest.CodingKeys()
{
  return &type metadata for SpeechEmotionEstimation.AudioSourceAgnosticRequest.CodingKeys;
}

uint64_t sub_1D44D2290(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D44D22D0 + 4 * byte_1D454EB41[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D44D22F0 + 4 * byte_1D454EB46[v4]))();
}

_BYTE *sub_1D44D22D0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D44D22F0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44D22F8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44D2300(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D44D2308(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D44D2310(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for SNSpeechEmotionEstimator.DomainError()
{
  sub_1D42CB35C();
}

void type metadata accessor for SpeechEmotionEstimation.Session()
{
  sub_1D42CB35C();
}

void type metadata accessor for SpeechEmotionEstimation.Request()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44D2344()
{
  unint64_t result;

  result = qword_1EFE56940;
  if (!qword_1EFE56940)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454EE80, &unk_1E97A8260);
    atomic_store(result, (unint64_t *)&qword_1EFE56940);
  }
  return result;
}

unint64_t sub_1D44D2384()
{
  unint64_t result;

  result = qword_1EFE56948;
  if (!qword_1EFE56948)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454EF38, &unk_1E97A8B10);
    atomic_store(result, (unint64_t *)&qword_1EFE56948);
  }
  return result;
}

unint64_t sub_1D44D23C4()
{
  unint64_t result;

  result = qword_1EFE56950;
  if (!qword_1EFE56950)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F040, &type metadata for SpeechEmotionEstimation.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56950);
  }
  return result;
}

unint64_t sub_1D44D2404()
{
  unint64_t result;

  result = qword_1EFE56958;
  if (!qword_1EFE56958)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454EFB0, &type metadata for SpeechEmotionEstimation.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56958);
  }
  return result;
}

unint64_t sub_1D44D2444()
{
  unint64_t result;

  result = qword_1EFE56960;
  if (!qword_1EFE56960)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454EFD8, &type metadata for SpeechEmotionEstimation.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56960);
  }
  return result;
}

unint64_t sub_1D44D2484()
{
  unint64_t result;

  result = qword_1EFE56968;
  if (!qword_1EFE56968)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454EF60, &type metadata for SpeechEmotionEstimation.AudioSourceAgnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56968);
  }
  return result;
}

unint64_t sub_1D44D24C4()
{
  unint64_t result;

  result = qword_1EFE56970;
  if (!qword_1EFE56970)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454EF88, &type metadata for SpeechEmotionEstimation.AudioSourceAgnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56970);
  }
  return result;
}

unint64_t sub_1D44D2500()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EFE56980;
  if (!qword_1EFE56980)
  {
    v1 = sub_1D42B8B10(&qword_1EFE4FD78);
    v2[0] = &off_1E97A8078;
    v2[1] = &off_1E97A8088;
    result = MEMORY[0x1D825E41C](&unk_1D45293A0, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EFE56980);
  }
  return result;
}

unint64_t sub_1D44D2564()
{
  unint64_t result;

  result = qword_1EFE56990;
  if (!qword_1EFE56990)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F260, &type metadata for SpeechEmotionEstimation.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56990);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SpeechEmotionEstimation.Request.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D44D25EC + 4 * byte_1D454EB50[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D44D2620 + 4 * byte_1D454EB4B[v4]))();
}

uint64_t sub_1D44D2620(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D2628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44D2630);
  return result;
}

uint64_t sub_1D44D263C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44D2644);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D44D2648(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D2650(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpeechEmotionEstimation.Request.CodingKeys()
{
  return &type metadata for SpeechEmotionEstimation.Request.CodingKeys;
}

unint64_t sub_1D44D2670()
{
  unint64_t result;

  result = qword_1EFE569B0;
  if (!qword_1EFE569B0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F238, &type metadata for SpeechEmotionEstimation.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE569B0);
  }
  return result;
}

unint64_t sub_1D44D26B0()
{
  unint64_t result;

  result = qword_1EFE569B8;
  if (!qword_1EFE569B8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F1A8, &type metadata for SpeechEmotionEstimation.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE569B8);
  }
  return result;
}

unint64_t sub_1D44D26F0()
{
  unint64_t result;

  result = qword_1EFE569C0;
  if (!qword_1EFE569C0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F1D0, &type metadata for SpeechEmotionEstimation.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE569C0);
  }
  return result;
}

uint64_t sub_1D44D272C@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 176) = a1;
  return sub_1D451B664();
}

double sub_1D44D2744()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

uint64_t sub_1D44D2790()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1D42B5420(v0, v1);
}

uint64_t sub_1D44D279C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44D27CC()
{
  return sub_1D451A6C8();
}

uint64_t sub_1D44D27E0()
{
  return sub_1D451B73C();
}

uint64_t sub_1D44D27EC@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 160) = a1;
  return v1 - 160;
}

uint64_t sub_1D44D27F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44D280C()
{
  return sub_1D4519C6C();
}

uint64_t sub_1D44D2818()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1D44D282C()
{
  return sub_1D4519AA4();
}

uint64_t sub_1D44D2838()
{
  return sub_1D44CF744();
}

uint64_t sub_1D44D2844()
{
  return type metadata accessor for SNSpeechEmotionResult();
}

ValueMetadata *_s14descr1E97C4109C25AccessibilitySoundActionsVMa()
{
  return &_s14descr1E97C4109C25AccessibilitySoundActionsVN;
}

uint64_t sub_1D44D285C()
{
  uint64_t result;

  result = sub_1D44D2878();
  qword_1EFEA7AA8 = result;
  return result;
}

uint64_t sub_1D44D2878()
{
  unsigned int v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = 0;
  v1 = MEMORY[0x1E0DEE9D8];
  do
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1D442FE30(0, *(_QWORD *)(v1 + 16) + 1, 1, v1);
      v1 = v5;
    }
    v3 = *(_QWORD *)(v1 + 16);
    v2 = *(_QWORD *)(v1 + 24);
    if (v3 >= v2 >> 1)
    {
      sub_1D442FE30(v2 > 1, v3 + 1, 1, v1);
      v1 = v6;
    }
    *(_QWORD *)(v1 + 16) = v3 + 1;
    *(_BYTE *)(v1 + v3 + 32) = v0;
  }
  while (v0++ < 0xD);
  return v1;
}

uint64_t sub_1D44D2924()
{
  uint64_t result;

  result = sub_1D44D2940();
  qword_1EFEA7AB0 = result;
  return result;
}

uint64_t sub_1D44D2940()
{
  uint64_t v0;

  if (qword_1EFE48F30 != -1)
    swift_once();
  v0 = qword_1EFEA7AA8;
  if (*(_QWORD *)(qword_1EFEA7AA8 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1D42C79C8();
    __asm { BR              X8 }
  }
  return sub_1D4459FF4(MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1D44D2B38()
{
  return sub_1D43495F8();
}

uint64_t sub_1D44D2B54()
{
  unsigned __int8 *v0;

  return sub_1D43486BC(*v0);
}

uint64_t sub_1D44D2B5C()
{
  return sub_1D44D2B38();
}

uint64_t sub_1D44D2B64(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1D43488A8(a1, *v1);
}

void sub_1D44D2B6C()
{
  sub_1D42BE9A8();
  sub_1D451B970();
  sub_1D451B994();
  sub_1D42BE978();
}

void sub_1D44D2BA0()
{
  sub_1D44D2B6C();
}

uint64_t sub_1D44D2BA8()
{
  sub_1D451B958();
  sub_1D451B970();
  return sub_1D451B994();
}

void sub_1D44D2BE8()
{
  sub_1D42BE9A8();
  sub_1D451B994();
  sub_1D42BE978();
}

unint64_t sub_1D44D2C14()
{
  unint64_t result;

  result = qword_1EFE569D0;
  if (!qword_1EFE569D0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F2DC, &unk_1E9798E80);
    atomic_store(result, (unint64_t *)&qword_1EFE569D0);
  }
  return result;
}

unint64_t sub_1D44D2C54()
{
  unint64_t result;

  result = qword_1EFE569D8;
  if (!qword_1EFE569D8)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F344, &unk_1E9799160);
    atomic_store(result, (unint64_t *)&qword_1EFE569D8);
  }
  return result;
}

unint64_t sub_1D44D2C94()
{
  unint64_t result;

  result = qword_1EFE569E0;
  if (!qword_1EFE569E0)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F858, &unk_1E97990D0);
    atomic_store(result, (unint64_t *)&qword_1EFE569E0);
  }
  return result;
}

uint64_t sub_1D44D2CD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t ObjCClassFromMetadata;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v3 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v4 = objc_msgSend(v3, sel_resourceURL);
  if (v4)
  {
    v5 = v4;
    sub_1D4519B7C();

    v6 = 0;
    v3 = v5;
  }
  else
  {
    v6 = 1;
  }

  v7 = sub_1D4519BC4();
  return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(a1, v6, 1, v7);
}

uint64_t sub_1D44D2D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  result = sub_1D44D320C();
  if (!v3)
  {
    v7 = sub_1D4519AEC();
    sub_1D44D32F0(v7, a2, a3);
    swift_bridgeObjectRelease();
    v8 = (void *)objc_opt_self();
    v9 = (void *)sub_1D451A908();
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v8, sel_pathWithComponents_, v9);

    sub_1D451A6EC();
    sub_1D4519B10();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D44D2E68(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v14;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x1E0C80C00];
  v15[0] = 0;
  v8 = objc_msgSend((id)objc_opt_self(), sel_dataWithJSONObject_options_error_, a2, a3, v15);
  v9 = v15[0];
  if (v8)
  {
    v10 = sub_1D4519C54();
    v12 = v11;

    sub_1D44D3420(a1, a4 & 1, a5 & 1, v10, v12);
    return sub_1D42B5420(v10, v12);
  }
  else
  {
    v14 = v9;
    sub_1D4519AA4();

    return swift_willThrow();
  }
}

uint64_t sub_1D44D2F84()
{
  uint64_t v0;
  uint64_t result;
  int v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  result = sub_1D44D320C();
  if (!v0)
  {
    sub_1D4519B94();
    sub_1D451A734();
    sub_1D42BE8B4();
    v2 = sub_1D451A074();
    swift_release();
    if (v2 < 0)
    {
      sub_1D451B400();
      swift_bridgeObjectRelease();
      sub_1D44D3910();
    }
    v3[0] = qword_1EFE56B80 | qword_1EFE56B78;
    if (ffsctl(v2, dword_1EFE56B88, v3, 0))
    {
      sub_1D451B400();
      swift_bridgeObjectRelease();
      sub_1D44D3910();
    }
    return close(v2);
  }
  return result;
}

uint64_t sub_1D44D320C()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  result = sub_1D4519ABC();
  if ((result & 1) == 0)
  {
    sub_1D42DCEE8();
    sub_1D451B400();
    swift_bridgeObjectRelease();
    sub_1D4519BC4();
    sub_1D443DFD8();
    sub_1D451B7C0();
    sub_1D451A794();
    sub_1D42CB208();
    v1 = sub_1D4394198();
    sub_1D43EC59C(v1, v2, v3, v4, v5, 0x80000001D455BDE0);
    sub_1D42CB208();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D44D32F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    sub_1D42DCEE8();
    v10 = sub_1D4394198();
    sub_1D43EC59C(v10, v11, v12, v13, v14, v15);
    swift_willThrow();
    return v4;
  }
  v4 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1D4383150();
    v4 = v17;
  }
  v8 = *(_QWORD *)(v4 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_10;
  }
  *(_QWORD *)(v4 + 16) = v8 - 1;
  sub_1D451A794();
  sub_1D42CB5C8();
  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(v4 + 16);
  v3 = v7 + 1;
  if (v7 >= *(_QWORD *)(v4 + 24) >> 1)
  {
LABEL_10:
    sub_1D442FC14();
    v4 = v18;
  }
  *(_QWORD *)(v4 + 16) = v3;
  v9 = v4 + 16 * v7;
  *(_QWORD *)(v9 + 32) = v5;
  *(_QWORD *)(v9 + 40) = v6;
  return v4;
}

uint64_t sub_1D44D3420(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  id v19;
  void *v20;
  unsigned int v21;
  void (*v22)(char *, uint64_t);
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  unsigned __int8 v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;

  v32 = a4;
  v35 = *MEMORY[0x1E0C80C00];
  v10 = sub_1D4519BC4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v30 - v15;
  result = sub_1D44D320C();
  if (!v5)
  {
    v31 = v10;
    v18 = a1;
    if ((a2 & 1) != 0)
    {
      v30 = a5;
      sub_1D4519B64();
      v19 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v20 = (void *)sub_1D4519B28();
      v33 = 0;
      v21 = objc_msgSend(v19, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v20, 1, 0, &v33);

      if (!v21)
      {
        v29 = v33;
        sub_1D4519AA4();

        swift_willThrow();
        return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v31);
      }
      v22 = *(void (**)(char *, uint64_t))(v11 + 8);
      v23 = v33;
      v22(v16, v31);
      a5 = v30;
    }
    v24 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v18, v31);
    if ((a3 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v24);
    }
    else
    {
      v25 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v30 = a5;
      v26 = v25;
      sub_1D4519B94();
      v27 = (void *)sub_1D451A6C8();
      swift_bridgeObjectRelease();
      v28 = objc_msgSend(v26, sel_fileExistsAtPath_, v27);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v31);
      if ((v28 & 1) != 0)
      {
        sub_1D42DCEE8();
        v33 = 0;
        v34 = 0xE000000000000000;
        sub_1D451B400();
        swift_bridgeObjectRelease();
        v33 = (id)0xD000000000000029;
        v34 = 0x80000001D455BE00;
        sub_1D443DFD8();
        sub_1D451B7C0();
        sub_1D451A794();
        sub_1D42BE8B4();
        sub_1D44D38CC((uint64_t)v33, (uint64_t)"com.apple.SoundAnalysis");
        sub_1D42BE8B4();
        return swift_willThrow();
      }
    }
    return sub_1D4519C78();
  }
  return result;
}

id sub_1D44D382C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNFileUtils();
  return objc_msgSendSuper2(&v2, sel_init);
}

id sub_1D44D387C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNFileUtils();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SNFileUtils()
{
  return objc_opt_self();
}

id sub_1D44D38CC@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  unint64_t v2;

  return sub_1D43EC59C(0xD000000000000017, (a2 - 32) | 0x8000000000000000, 1, 0, a1, v2);
}

uint64_t sub_1D44D38F0()
{
  return sub_1D451A794();
}

uint64_t sub_1D44D3900()
{
  return sub_1D451A794();
}

void sub_1D44D3910()
{
  JUMPOUT(0x1D825B9BCLL);
}

id sub_1D44D3920(uint64_t a1)
{
  objc_class *v1;
  id v3;
  id v4;
  objc_super v6;

  v3 = objc_allocWithZone(v1);
  sub_1D44D497C(a1, (uint64_t)v3 + OBJC_IVAR___SNFileCopyingResult_impl);
  v6.receiver = v3;
  v6.super_class = v1;
  v4 = objc_msgSendSuper2(&v6, sel_init);
  sub_1D44D49C0(a1);
  return v4;
}

uint64_t sub_1D44D3990()
{
  swift_bridgeObjectRetain();
  sub_1D451A74C();
  swift_bridgeObjectRelease();
  sub_1D451B988();
  type metadata accessor for FileCopyingResult(0);
  sub_1D42CB348();
  sub_1D430DBE8((unint64_t *)&qword_1EFE49A80, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  return sub_1D451A614();
}

uint64_t sub_1D44D3A34(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if ((v4 || (sub_1D451B820() & 1) != 0) && a1[2] == a2[2])
  {
    type metadata accessor for FileCopyingResult(0);
    JUMPOUT(0x1D825B4ACLL);
  }
  return 0;
}

uint64_t sub_1D44D3AAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x656D616E656C6966 && a2 == 0xE800000000000000;
  if (v2 || (sub_1D451B820() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000;
    if (v6 || (sub_1D451B820() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x4C52556D657469 && a2 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_1D451B820();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_1D44D3C00(char a1)
{
  if (!a1)
    return 0x656D616E656C6966;
  if (a1 == 1)
    return 0x657A6953656C6966;
  return 0x4C52556D657469;
}

uint64_t sub_1D44D3C58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1D42B28FC(&qword_1EFE56A20);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_1D42CB210();
  v7 = v6 - v5;
  sub_1D42B5528(a1, a1[3]);
  sub_1D44D4940();
  sub_1D451BA24();
  sub_1D451B724();
  if (!v1)
  {
    sub_1D451B778();
    type metadata accessor for FileCopyingResult(0);
    sub_1D4519BC4();
    sub_1D430DBE8(qword_1EFE49980, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    sub_1D451B760();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1D44D3DCC()
{
  sub_1D451B958();
  swift_bridgeObjectRetain();
  sub_1D451A74C();
  swift_bridgeObjectRelease();
  sub_1D451B988();
  type metadata accessor for FileCopyingResult(0);
  sub_1D42CB348();
  sub_1D430DBE8((unint64_t *)&qword_1EFE49A80, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1D451A614();
  return sub_1D451B994();
}

uint64_t sub_1D44D3E84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = sub_1D4519BC4();
  v16 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  sub_1D42CB210();
  v5 = v4 - v3;
  v19 = sub_1D42B28FC(&qword_1EFE56A08);
  v6 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  sub_1D42CB210();
  v9 = v8 - v7;
  v10 = type metadata accessor for FileCopyingResult(0);
  MEMORY[0x1E0C80A78](v10);
  sub_1D42CB210();
  v13 = (uint64_t *)(v12 - v11);
  sub_1D42B5528(a1, a1[3]);
  sub_1D44D4940();
  sub_1D451BA0C();
  if (v20)
    return sub_1D44D4B94();
  *v13 = sub_1D451B64C();
  v13[1] = v14;
  v13[2] = sub_1D451B6A0();
  sub_1D430DBE8(qword_1EFE49960, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
  sub_1D451B688();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))((char *)v13 + *(int *)(v10 + 24), v5, v18);
  sub_1D44D497C((uint64_t)v13, a2);
  sub_1D44D4B94();
  return sub_1D44D49C0((uint64_t)v13);
}

uint64_t sub_1D44D40C0()
{
  char *v0;

  return sub_1D44D3C00(*v0);
}

uint64_t sub_1D44D40C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D44D3AAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D44D40EC()
{
  sub_1D44D4940();
  return sub_1D451BA3C();
}

uint64_t sub_1D44D4114()
{
  sub_1D44D4940();
  return sub_1D451BA48();
}

uint64_t sub_1D44D413C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D44D3E84(a1, a2);
}

uint64_t sub_1D44D4150(_QWORD *a1)
{
  return sub_1D44D3C58(a1);
}

uint64_t sub_1D44D416C()
{
  sub_1D451B958();
  swift_bridgeObjectRetain();
  sub_1D451A74C();
  swift_bridgeObjectRelease();
  sub_1D451B988();
  sub_1D4519BC4();
  sub_1D430DBE8((unint64_t *)&qword_1EFE49A80, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1D451A614();
  return sub_1D451B994();
}

uint64_t sub_1D44D425C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SNFileCopyingResult_impl);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D44D42B4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SNFileCopyingResult_impl + 16);
}

uint64_t sub_1D44D4350@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1 + OBJC_IVAR___SNFileCopyingResult_impl;
  v4 = v3 + *(int *)(type metadata accessor for FileCopyingResult(0) + 24);
  v5 = sub_1D42CB348();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v4, v5);
}

id SNFileCopyingResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SNFileCopyingResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SNFileCopyingResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNFileCopyingResult(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SNFileCopyingResult(uint64_t a1)
{
  return sub_1D42BFA18(a1, (uint64_t *)&unk_1EFE48438);
}

uint64_t sub_1D44D4450()
{
  return type metadata accessor for SNFileCopyingResult(0);
}

uint64_t sub_1D44D4458()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FileCopyingResult(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SNFileCopyingResult()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for FileCopyingResult(uint64_t a1)
{
  return sub_1D42BFA18(a1, (uint64_t *)&unk_1EFE569F0);
}

uint64_t *sub_1D44D44E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_1D4519BC4();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1D44D4588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1D4519BC4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1D44D45D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1D4519BC4();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_1D44D4648(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1D4519BC4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_1D44D46CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1D4519BC4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1D44D4730(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1D4519BC4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1D44D47A4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D44D47B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1D42CB348();
    return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1D44D4820()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D44D482C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1D42CB348();
    return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1D44D4894()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D4519BC4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1D44D4914()
{
  return sub_1D430DBE8(&qword_1EFE56A00, type metadata accessor for FileCopyingResult, (uint64_t)&unk_1D454F470);
}

unint64_t sub_1D44D4940()
{
  unint64_t result;

  result = qword_1EFE56A10;
  if (!qword_1EFE56A10)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F5EC, &type metadata for FileCopyingResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56A10);
  }
  return result;
}

uint64_t sub_1D44D497C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FileCopyingResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D44D49C0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FileCopyingResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FileCopyingResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D44D4A48 + 4 * byte_1D454F405[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D44D4A7C + 4 * asc_1D454F400[v4]))();
}

uint64_t sub_1D44D4A7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D4A84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44D4A8CLL);
  return result;
}

uint64_t sub_1D44D4A98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44D4AA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D44D4AA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D4AAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FileCopyingResult.CodingKeys()
{
  return &type metadata for FileCopyingResult.CodingKeys;
}

unint64_t sub_1D44D4ACC()
{
  unint64_t result;

  result = qword_1EFE56A28;
  if (!qword_1EFE56A28)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F5C4, &type metadata for FileCopyingResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56A28);
  }
  return result;
}

unint64_t sub_1D44D4B0C()
{
  unint64_t result;

  result = qword_1EFE56A30;
  if (!qword_1EFE56A30)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F534, &type metadata for FileCopyingResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56A30);
  }
  return result;
}

unint64_t sub_1D44D4B4C()
{
  unint64_t result;

  result = qword_1EFE56A38;
  if (!qword_1EFE56A38)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454F55C, &type metadata for FileCopyingResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFE56A38);
  }
  return result;
}

uint64_t sub_1D44D4B88()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96));
}

uint64_t sub_1D44D4B94()
{
  uint64_t v0;

  return sub_1D42B5400(v0);
}

id sub_1D44D4B9C(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC13SoundAnalysis21AnyCancellableWrapper_wrapped] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t sub_1D44D4BE8()
{
  return swift_retain();
}

uint64_t sub_1D44D4BF8()
{
  swift_retain();
  sub_1D451A1F4();
  return swift_release();
}

void sub_1D44D4C60()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for AnyCancellableWrapper()
{
  return objc_opt_self();
}

uint64_t sub_1D44D4CC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1D44D4BE8();
  *a1 = result;
  return result;
}

id sub_1D44D4CF0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = sub_1D44D4B9C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1D44D4D18(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for SNError();
  sub_1D44946AC();
  sub_1D4342D78(0x80000001D4551120, v2, (uint64_t)"object cannot be decoded");
  swift_willThrow();
  return sub_1D42B5400(a1);
}

uint64_t sub_1D44D4D74()
{
  uint64_t v0;

  type metadata accessor for SNError();
  sub_1D44946AC();
  sub_1D4342D78(0x80000001D4551120, v0, (uint64_t)"object cannot be encoded");
  return swift_willThrow();
}

void sub_1D44D4DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v2)
    return;
  v7 = MEMORY[0x1E0DEE9D8];
  sub_1D42C778C();
  if (a2 < a1 || v2 < 0)
  {
LABEL_10:
    __break(1u);
    return;
  }
  do
  {
    v5 = sub_1D451A4B8();
    v6 = *(_QWORD *)(v7 + 16);
    if (v6 >= *(_QWORD *)(v7 + 24) >> 1)
      sub_1D42C778C();
    *(_QWORD *)(v7 + 16) = v6 + 1;
    *(_BYTE *)(v7 + v6 + 32) = v5;
    --v2;
  }
  while (v2);
}

void sub_1D44D4EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v2)
    return;
  v8 = MEMORY[0x1E0DEE9D8];
  sub_1D42C7688();
  if (a2 < a1 || v2 < 0)
  {
LABEL_10:
    __break(1u);
    return;
  }
  do
  {
    sub_1D451A4A0();
    v6 = v5;
    v7 = *(_QWORD *)(v8 + 16);
    if (v7 >= *(_QWORD *)(v8 + 24) >> 1)
      sub_1D42C7688();
    *(_QWORD *)(v8 + 16) = v7 + 1;
    *(_DWORD *)(v8 + 4 * v7 + 32) = v6;
    --v2;
  }
  while (v2);
}

uint64_t sub_1D44D4FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  v1 = sub_1D44D96C0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1D451A560();
  if (!v0)
  {
    sub_1D44D9748();
    sub_1D451A518();
    sub_1D451A524();
    sub_1D451A56C();
    swift_release();
    sub_1D42EA1BC();
    sub_1D42EA438();
    return sub_1D42F1FA0((uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  return result;
}

void sub_1D44D50B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD v9[2];

  sub_1D42BE910();
  v1 = sub_1D44D9764();
  MEMORY[0x1E0C80A78](v1);
  v2 = sub_1D44D9688();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D44D979C();
  if (!v0)
  {
    v9[1] = v1;
    sub_1D451A53C();
    sub_1D44D96C8();
    sub_1D451A524();
    sub_1D44D9804();
    sub_1D43070B8();
    swift_retain();
    sub_1D451A4DC();
    sub_1D44D5B4C();
    if ((v6 & 1) != 0)
    {
      sub_1D43778D4();
      v7 = sub_1D42B6D0C();
      sub_1D44D97DC(v7, v8);
    }
    sub_1D42B6F8C();
    sub_1D42EA438();
    sub_1D44D9728();
    sub_1D42F1FA0((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  sub_1D42BE844();
}

void sub_1D44D523C()
{
  uint64_t v0;
  const void *v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v10[128];
  _QWORD v11[16];
  _QWORD v12[17];

  sub_1D42BE910();
  v2 = v1;
  sub_1D44D9764();
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_1D44D9688();
  MEMORY[0x1E0C80A78](v4);
  sub_1D44D9618();
  sub_1D434936C(v2, v10);
  if (__OFADD__(sub_1D44D8018(v10), 8))
  {
    __break(1u);
  }
  else
  {
    sub_1D451A560();
    if (!v0)
    {
      sub_1D44D9748();
      sub_1D44D96C8();
      sub_1D434936C(v10, v12);
      v5 = sub_1D43493A8(v12);
      v6 = sub_1D43493B4(v12);
      if (v5 == 1)
      {
        memcpy(v11, v6, sizeof(v11));
        sub_1D44D96C8();
        sub_1D44D72DC(v11);
      }
      else
      {
        sub_1D44D96C8();
        sub_1D451A50C();
      }
      sub_1D451A524();
      sub_1D451A56C();
      swift_release();
      sub_1D44D97E8();
      sub_1D451A4DC();
      sub_1D44D5B4C();
      if ((v7 & 1) != 0)
      {
        sub_1D43778D4();
        v8 = sub_1D42B6D0C();
        sub_1D44D97DC(v8, v9);
      }
      sub_1D43070B8();
      sub_1D42B6F8C();
      sub_1D44D976C();
      sub_1D44D9678();
    }
    sub_1D42BE844();
  }
}

uint64_t sub_1D44D5450()
{
  return sub_1D44D5498();
}

uint64_t sub_1D44D5474()
{
  return sub_1D44D5498();
}

uint64_t sub_1D44D5498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;

  sub_1D42BE910();
  v2 = v1;
  v3 = sub_1D44D96C0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_1D42CB210();
  v7 = v6 - v5;
  sub_1D44D96E8();
  v8 = sub_1D44D5A24(v2);
  v9 = __OFADD__(v8, 8);
  result = v8 + 8;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    result = sub_1D44D979C();
    if (!v0)
    {
      sub_1D44D9748();
      sub_1D451A518();
      sub_1D44D5BF8(v2);
      sub_1D451A524();
      sub_1D44D9804();
      swift_release();
      sub_1D42EA438();
      sub_1D42EA1BC();
      return sub_1D42F1FA0(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    }
  }
  return result;
}

void sub_1D44D559C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D42BE910();
  sub_1D44D9750();
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v2);
  sub_1D44D96A4();
  sub_1D44D97F0();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44D9618();
  if (__OFADD__(sub_1D44D5A24(v1), 8))
  {
    __break(1u);
  }
  else
  {
    sub_1D44D96D0();
    if (!v0)
    {
      sub_1D44D9748();
      sub_1D44D96C8();
      sub_1D44D5BF8(v1);
      sub_1D451A524();
      sub_1D44D978C();
      sub_1D42B6F8C();
      sub_1D44D97E8();
      sub_1D451A4DC();
      if (sub_1D451A4B8() == 1)
        sub_1D44D5D18();
      sub_1D43070B8();
      sub_1D42EA438();
      sub_1D44D9714();
      sub_1D44D9644();
    }
    sub_1D42BE844();
  }
}

void sub_1D44D56B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D42BE910();
  sub_1D44D9750();
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v2);
  sub_1D44D96A4();
  sub_1D44D97F0();
  MEMORY[0x1E0C80A78](v3);
  sub_1D44D9618();
  if (__OFADD__(sub_1D44D5A24(v1), 8))
  {
    __break(1u);
  }
  else
  {
    sub_1D44D96D0();
    if (!v0)
    {
      sub_1D44D9748();
      sub_1D44D96C8();
      sub_1D44D5BF8(v1);
      sub_1D451A524();
      sub_1D44D978C();
      sub_1D42B6F8C();
      sub_1D44D97E8();
      sub_1D451A4DC();
      if (sub_1D451A4B8() == 1)
        sub_1D44D5E48();
      sub_1D43070B8();
      sub_1D42EA438();
      sub_1D44D9714();
      sub_1D44D9644();
    }
    sub_1D42BE844();
  }
}

uint64_t sub_1D44D57D4(char a1)
{
  return a1 & 1;
}

uint64_t sub_1D44D57DC(uint64_t result)
{
  if (result >= 0xEu)
    return 14;
  else
    return result;
}

uint64_t sub_1D44D57F0(uint64_t result)
{
  if (result >= 0x11u)
    return 17;
  else
    return result;
}

uint64_t sub_1D44D5804(char a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t sub_1D44D5820(uint64_t result)
{
  if ((result & 0xFC) != 0)
    return 4;
  else
    return result;
}

uint64_t sub_1D44D5834@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1D44D57F0(*a1);
  *a2 = result;
  return result;
}

void sub_1D44D585C(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1D44D5868@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1D44D5804(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1D44D5890@<X0>(_BYTE *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_1D44D57D4(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1D44D58B8@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1D44D57DC(*a1);
  *a2 = result;
  return result;
}

void sub_1D44D58E0()
{
  sub_1D43486C0();
}

void sub_1D44D58E8()
{
  sub_1D4348880();
}

uint64_t sub_1D44D58F0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1D44D5820(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1D44D5918()
{
  sub_1D44D9534();
  sub_1D44D9570();
  return sub_1D451B91C();
}

uint64_t sub_1D44D595C(uint64_t a1)
{
  int v1;
  unsigned int v2;

  if (a1 == 0xB6438CFD4F02BBE8)
    v1 = 2;
  else
    v1 = 7;
  if (a1 == 0x286E0B96332FA124)
    v2 = 1;
  else
    v2 = v1;
  if (a1 == 0xC3B126BD3C7C0BCLL)
    v2 = 0;
  if (a1 == 0xCB1950A52A9C8BD6)
    v2 = 3;
  if (a1 == 0x46BD4B3D40F57A48)
    v2 = 4;
  if (a1 == 0xA4C369110A5245FFLL)
    v2 = 5;
  if (a1 == 0x9F4F88E3E848C0D6)
    return 6;
  else
    return v2;
}

unint64_t sub_1D44D5A24(uint64_t a1)
{
  unint64_t result;
  uint64_t v2;

  result = *(_QWORD *)(a1 + 16);
  if (result >= 2)
  {
    v2 = 0;
    while (v2 != 14)
    {
      if (result - 1 == ++v2)
        return result;
    }
    return 16;
  }
  return result;
}

uint64_t sub_1D44D5A58(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1D44D5A94(a1);
  return v2;
}

uint64_t sub_1D44D5A94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v4 = sub_1D451A554();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1D42CB210();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7 - v6, a1, v4);
  sub_1D451A584();
  swift_allocObject();
  v8 = sub_1D451A578();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  *(_QWORD *)(v2 + 16) = v8;
  return v2;
}

void sub_1D44D5B4C()
{
  int v0;

  v0 = sub_1D451A4B8();
  if (v0 == 1)
  {
    sub_1D44D712C();
  }
  else if (v0)
  {
    sub_1D451B55C();
    __break(1u);
  }
  else
  {
    sub_1D44D4DC4(0, 16);
  }
}

uint64_t sub_1D44D5BF8(uint64_t a1)
{
  uint64_t i;
  uint64_t result;

  if (*(_QWORD *)(a1 + 16) == 16)
  {
    swift_bridgeObjectRetain();
    for (i = 32; i != 48; ++i)
      sub_1D451A50C();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    result = sub_1D451B55C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1D44D5D18()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1D451A4C4();
  switch(v0)
  {
    case 0xCAFC1CD77EB0E6EDLL:
      return sub_1D44D712C() | 0x40;
    case 0x385465D0567AF133:
      return 128;
    case 0xD4E65CB265808313:
      return sub_1D44D7200();
  }
  sub_1D451B400();
  swift_bridgeObjectRelease();
  sub_1D451B7C0();
  sub_1D451A794();
  swift_bridgeObjectRelease();
  result = sub_1D451B55C();
  __break(1u);
  return result;
}

uint64_t sub_1D44D5E48()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1D451A4C4();
  switch(v0)
  {
    case 0x8152E6694E214B33:
      return 128;
    case 0x40103A97BCFDBCBFLL:
      return sub_1D44D712C() | 0x40;
    case 0xF6D6BB4D00676FA8:
      return sub_1D44D7044() & 1;
  }
  sub_1D451B400();
  swift_bridgeObjectRelease();
  sub_1D451B7C0();
  sub_1D451A794();
  swift_bridgeObjectRelease();
  result = sub_1D451B55C();
  __break(1u);
  return result;
}

uint64_t sub_1D44D5F74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1D44D5A58(a1);
  *a2 = result;
  return result;
}

void sub_1D44D5F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD v29[84];
  uint64_t v30;

  sub_1D42BE910();
  v30 = v0;
  v1 = sub_1D44D96C0();
  v29[2] = *(_QWORD *)(v1 - 8);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v2);
  sub_1D42CB210();
  v29[1] = v4 - v3;
  sub_1D42B28FC(&qword_1EFE56A50);
  sub_1D42BE838();
  MEMORY[0x1E0C80A78](v5);
  v29[8] = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D432D374();
  MEMORY[0x1E0C80A78](v7);
  sub_1D432D3D4();
  v29[7] = v8;
  sub_1D432D374();
  MEMORY[0x1E0C80A78](v9);
  sub_1D432D3D4();
  v29[6] = v10;
  sub_1D432D374();
  MEMORY[0x1E0C80A78](v11);
  sub_1D432D3D4();
  v29[5] = v12;
  sub_1D432D374();
  MEMORY[0x1E0C80A78](v13);
  sub_1D432D3D4();
  v29[4] = v14;
  sub_1D432D374();
  MEMORY[0x1E0C80A78](v15);
  sub_1D432D3D4();
  v29[3] = v16;
  sub_1D432D374();
  v18 = MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v29 - v19;
  v21 = sub_1D44D9764();
  v22 = MEMORY[0x1E0C80A78](v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v23);
  v29[12] = v24;
  v25 = *(void (**)(char *, uint64_t))(v24 + 16);
  v29[11] = v27;
  v25((char *)v29 - v26, v30);
  v29[10] = v20;
  _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)v20, 1, 1, v1);
  v28 = (char *)&loc_1D44D6188 + *((int *)qword_1D44D6870 + sub_1D44D688C());
  __asm { BR              X10 }
}

void sub_1D44D6198()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_1D44D9668();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v1);
  v7 = *(_QWORD *)(v6 - 72);
  v8 = v0[9];
  sub_1D451A4D0();
  if (v8)
  {
    (*(void (**)(uint64_t, _QWORD))(v0[12] + 8))(v7, v0[11]);
    sub_1D44D8850(v0[10]);
  }
  else
  {
    _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v3, 0, 1, v5);
    sub_1D44D9708(v3);
    if (!sub_1D44D9634())
    {
      v11 = v0[1];
      v10 = v0[2];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v4, v5);
      sub_1D451A524();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v5);
    }
    sub_1D44D9654();
    sub_1D44D8850(v4);
  }
  sub_1D42BE844();
}

uint64_t sub_1D44D688C()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1D451A4C4();
  result = sub_1D44D595C(v0);
  if (result == 7)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    result = sub_1D451B55C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1D44D6968(unsigned __int8 a1)
{
  if (a1 >> 6 && a1 >> 6 != 1)
    return sub_1D451A518();
  sub_1D451A518();
  return sub_1D451A50C();
}

uint64_t sub_1D44D69E0(unsigned __int8 a1)
{
  if (a1 >> 6 && a1 >> 6 != 1)
    return sub_1D451A518();
  sub_1D451A518();
  return sub_1D451A50C();
}

uint64_t sub_1D44D6A58()
{
  uint64_t v0;

  swift_release();
  sub_1D42B5400(v0 + 24);
  return swift_deallocClassInstance();
}

void sub_1D44D6A84()
{
  sub_1D44D5F98();
}

uint64_t type metadata accessor for SoundAnalysisService()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SoundAnalysisService.Service()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SoundAnalysisService.Server()
{
  return objc_opt_self();
}

void type metadata accessor for TBAccessibilitySoundActionsSoundAction()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44D6B18(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D44D6B64 + 4 * byte_1D454F695[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D44D6B98 + 4 * asc_1D454F690[v4]))();
}

uint64_t sub_1D44D6B98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D6BA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44D6BA8);
  return result;
}

uint64_t sub_1D44D6BB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44D6BBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D44D6BC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D6BC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for TBAccessibilitySoundRecognitionDetection()
{
  sub_1D42CB35C();
}

void type metadata accessor for TBUUID()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44D6BF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFE56A48;
  if (!qword_1EFE56A48)
  {
    v1 = type metadata accessor for SoundAnalysisService.Server();
    result = MEMORY[0x1D825E41C](&unk_1D454F7E0, v1);
    atomic_store(result, (unint64_t *)&qword_1EFE56A48);
  }
  return result;
}

uint64_t sub_1D44D6C2C()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1D451A4B8();
  result = sub_1D44D57F0(v0);
  if (result == 17)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    result = sub_1D451B55C();
    __break(1u);
  }
  return result;
}

void *sub_1D44D6D08@<X0>(void *a1@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  void *result;
  _QWORD v6[16];
  _QWORD v7[16];

  v2 = sub_1D451A4C4();
  if (v2 == 0xA4E85B5116A9099DLL || v2 == 0x9B41A5BC2D5FE9D3)
  {
    if (v2 == 0xA4E85B5116A9099DLL)
    {
      LOBYTE(v6[0]) = sub_1D44D6C2C();
      sub_1D4417C60(v6);
    }
    else
    {
      sub_1D44D6E4C((uint64_t)v6);
      sub_1D4417C54((uint64_t)v6);
    }
    sub_1D434936C(v6, v7);
    return sub_1D434936C(v7, a1);
  }
  else
  {
    v4 = v2;
    sub_1D451B400();
    swift_bridgeObjectRelease();
    v7[0] = 0xD00000000000001ALL;
    v7[1] = 0x80000001D455C3F0;
    v6[0] = v4;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    result = (void *)sub_1D451B55C();
    __break(1u);
  }
  return result;
}

void sub_1D44D6E4C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v31 = sub_1D451A4AC();
  sub_1D44D4EB8(0, 512);
  v30 = v2;
  sub_1D44D4EB8(0, 10240);
  v29 = v3;
  sub_1D44D4EB8(0, 10);
  v28 = v4;
  sub_1D44D4EB8(0, 200);
  v27 = v5;
  sub_1D44D4EB8(0, 4);
  v26 = v6;
  sub_1D44D4EB8(0, 160);
  v25 = v7;
  sub_1D44D4EB8(0, 8);
  v24 = v8;
  sub_1D44D4EB8(0, 320);
  v10 = v9;
  sub_1D44D4EB8(0, 8);
  v12 = v11;
  sub_1D44D4EB8(0, 320);
  v14 = v13;
  sub_1D44D4EB8(0, 8);
  v16 = v15;
  sub_1D44D4EB8(0, 256);
  v18 = v17;
  sub_1D44D4EB8(0, 32);
  v20 = v19;
  sub_1D44D4EB8(0, 64);
  v22 = v21;
  sub_1D44D4EB8(0, 2);
  *(_DWORD *)a1 = v31;
  *(_QWORD *)(a1 + 8) = v30;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  *(_QWORD *)(a1 + 32) = v27;
  *(_QWORD *)(a1 + 40) = v26;
  *(_QWORD *)(a1 + 48) = v25;
  *(_QWORD *)(a1 + 56) = v24;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v18;
  *(_QWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 112) = v22;
  *(_QWORD *)(a1 + 120) = v23;
}

uint64_t sub_1D44D7044()
{
  char v0;
  uint64_t result;

  v0 = sub_1D451A4B8();
  if (!v0)
    return 0;
  if (v0 == 1)
    return 1;
  sub_1D451B400();
  sub_1D451A794();
  sub_1D451B7C0();
  sub_1D451A794();
  swift_bridgeObjectRelease();
  result = sub_1D451B55C();
  __break(1u);
  return result;
}

uint64_t sub_1D44D712C()
{
  uint64_t result;

  result = sub_1D451A4B8();
  if (result > 3u)
  {
    sub_1D451B400();
    swift_bridgeObjectRelease();
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    result = sub_1D451B55C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1D44D7200()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1D451A4B8();
  result = sub_1D44D57DC(v0);
  if (result == 14)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    result = sub_1D451B55C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1D44D72DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t m;
  uint64_t v9;
  uint64_t n;
  uint64_t ii;
  uint64_t v12;
  uint64_t jj;
  uint64_t kk;
  uint64_t v15;
  uint64_t mm;
  uint64_t nn;
  uint64_t v18;
  uint64_t i1;
  uint64_t v20;
  uint64_t i2;
  uint64_t v22;
  uint64_t i3;
  uint64_t v24;
  uint64_t i4;
  uint64_t i5;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_1D451A500();
  v46 = a1[1];
  v2 = *(_QWORD *)(v46 + 16);
  if (v2 != 512)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v45 = v2;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
LABEL_62:
    result = sub_1D451B55C();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  for (i = 0; i != 2048; i += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v46);
  v45 = a1[2];
  v4 = *(_QWORD *)(v45 + 16);
  if (v4 != 10240)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v44 = v4;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (j = 0; j != 40960; j += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v45);
  v44 = a1[3];
  v6 = *(_QWORD *)(v44 + 16);
  if (v6 != 10)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v43 = v6;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (k = 0; k != 40; k += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v44);
  v43 = a1[4];
  if (*(_QWORD *)(v43 + 16) != 200)
  {
    v28 = *(_QWORD *)(v43 + 16);
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v42 = v28;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (m = 32; m != 832; m += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v43);
  v42 = a1[5];
  v9 = *(_QWORD *)(v42 + 16);
  if (v9 != 4)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v41 = v9;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (n = 0; n != 16; n += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v42);
  v41 = a1[6];
  if (*(_QWORD *)(v41 + 16) != 160)
  {
    v29 = *(_QWORD *)(v41 + 16);
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v40 = v29;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (ii = 32; ii != 672; ii += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v41);
  v40 = a1[7];
  v12 = *(_QWORD *)(v40 + 16);
  if (v12 != 8)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v39 = v12;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (jj = 0; jj != 32; jj += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v40);
  v39 = a1[8];
  if (*(_QWORD *)(v39 + 16) != 320)
  {
    v30 = *(_QWORD *)(v39 + 16);
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v38 = v30;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (kk = 32; kk != 1312; kk += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v39);
  v38 = a1[9];
  v15 = *(_QWORD *)(v38 + 16);
  if (v15 != 8)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v37 = v15;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (mm = 0; mm != 32; mm += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v38);
  v37 = a1[10];
  if (*(_QWORD *)(v37 + 16) != 320)
  {
    v31 = *(_QWORD *)(v37 + 16);
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v36 = v31;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (nn = 32; nn != 1312; nn += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v37);
  v36 = a1[11];
  v18 = *(_QWORD *)(v36 + 16);
  if (v18 != 8)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v35 = v18;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (i1 = 0; i1 != 32; i1 += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v36);
  v35 = a1[12];
  v20 = *(_QWORD *)(v35 + 16);
  if (v20 != 256)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v34 = v20;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (i2 = 0; i2 != 1024; i2 += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v35);
  v34 = a1[13];
  v22 = *(_QWORD *)(v34 + 16);
  if (v22 != 32)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v33 = v22;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (i3 = 0; i3 != 128; i3 += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v34);
  v33 = a1[14];
  v24 = *(_QWORD *)(v33 + 16);
  if (v24 != 64)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    v32 = v24;
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (i4 = 0; i4 != 256; i4 += 4)
    sub_1D451A4F4();
  sub_1D4362718((uint64_t)&v33);
  v32 = a1[15];
  if (*(_QWORD *)(v32 + 16) != 2)
  {
    sub_1D451B400();
    sub_1D451A794();
    sub_1D451A794();
    sub_1D451B7C0();
    sub_1D451A794();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  for (i5 = 0; i5 != 8; i5 += 4)
    sub_1D451A4F4();
  return sub_1D4362718((uint64_t)&v32);
}

uint64_t sub_1D44D8018(const void *a1)
{
  int v1;
  _QWORD *v2;
  double v3;
  int64x2_t v4;
  int64x2_t v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t result;
  _QWORD v9[16];
  _QWORD __dst[16];

  sub_1D434936C(a1, v9);
  v1 = sub_1D43493A8(v9);
  v2 = sub_1D43493B4(v9);
  if (v1 != 1)
    return 9;
  memcpy(__dst, v2, sizeof(__dst));
  sub_1D451A548();
  v6 = sub_1D44D8098(__dst, v3, v4, v5);
  v7 = __OFADD__(v6, 8);
  result = (uint64_t)(v6 + 1);
  if (v7)
  {
    __break(1u);
    return 9;
  }
  return result;
}

_QWORD *sub_1D44D8098(_QWORD *result, double a2, int64x2_t a3, int64x2_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64x2_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64x2_t v15;
  int64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64x2_t v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64x2_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64x2_t v35;
  unint64_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int8x16_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int8x16_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int8x16_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int8x16_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int8x16_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int8x16_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int8x16_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int8x16_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v4 = *(_QWORD *)(result[1] + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      v4 = 4;
    }
    else
    {
      v5 = 0;
      v6 = v4 - 2;
      v7 = 510;
      if (v6 < 0x1FE)
        v7 = v6;
      v8 = (uint64x2_t)vdupq_n_s64(v7);
      a3 = (int64x2_t)xmmword_1D454FB70;
      v9 = vdupq_n_s64(4uLL);
      do
      {
        a4 = a3;
        a3 = vaddq_s64(a3, v9);
        v5 += 2;
      }
      while ((((_WORD)v7 + 2) & 0x3FE) != v5);
      v4 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v5 - 2), (int8x16_t)xmmword_1D4538030), v8), (int8x16_t)a4, (int8x16_t)a3));
    }
  }
  v10 = v4 + 4;
  if (__OFADD__(v4, 4))
  {
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
    return result;
  }
  v11 = *(_QWORD *)(result[2] + 16);
  if (v11)
  {
    if (v11 == 1)
    {
      v11 = 4;
    }
    else
    {
      v12 = 0;
      v13 = v11 - 2;
      v14 = 10238;
      if (v13 < 0x27FE)
        v14 = v13;
      v15 = (uint64x2_t)vdupq_n_s64(v14);
      a3 = (int64x2_t)xmmword_1D454FB70;
      v16 = vdupq_n_s64(4uLL);
      do
      {
        a4 = a3;
        a3 = vaddq_s64(a3, v16);
        v12 += 2;
      }
      while ((((_WORD)v14 + 2) & 0x7FFE) != v12);
      v11 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v12 - 2), (int8x16_t)xmmword_1D4538030), v15), (int8x16_t)a4, (int8x16_t)a3));
    }
  }
  v17 = __OFADD__(v10, v11);
  v18 = v10 + v11;
  if (v17)
    goto LABEL_133;
  v19 = *(_QWORD *)(result[3] + 16);
  if (v19)
  {
    if (v19 == 1)
    {
      v19 = 4;
    }
    else
    {
      v20 = 0;
      v21 = v19 - 2;
      v22 = 8;
      if (v21 < 8)
        v22 = v21;
      v23 = (uint64x2_t)vdupq_n_s64(v22);
      a3 = (int64x2_t)xmmword_1D454FB70;
      v24 = vdupq_n_s64(4uLL);
      do
      {
        a4 = a3;
        a3 = vaddq_s64(a3, v24);
        v20 += 2;
      }
      while ((((_BYTE)v22 + 2) & 0x1E) != v20);
      v19 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v20 - 2), (int8x16_t)xmmword_1D4538030), v23), (int8x16_t)a4, (int8x16_t)a3));
    }
  }
  v17 = __OFADD__(v18, v19);
  v25 = v18 + v19;
  if (v17)
    goto LABEL_134;
  v26 = *(_QWORD *)(result[4] + 16);
  if (v26)
  {
    if (v26 == 1)
    {
      v26 = 4;
    }
    else
    {
      v27 = 0;
      v28 = v26 - 2;
      v29 = 198;
      if (v28 < 0xC6)
        v29 = v28;
      v30 = (uint64x2_t)vdupq_n_s64(v29);
      a3 = (int64x2_t)xmmword_1D454FB70;
      v31 = vdupq_n_s64(4uLL);
      do
      {
        a4 = a3;
        a3 = vaddq_s64(a3, v31);
        v27 += 2;
      }
      while ((((_WORD)v29 + 2) & 0x1FE) != v27);
      v26 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v27 - 2), (int8x16_t)xmmword_1D4538030), v30), (int8x16_t)a4, (int8x16_t)a3));
    }
  }
  v17 = __OFADD__(v25, v26);
  v32 = v25 + v26;
  if (v17)
    goto LABEL_135;
  v33 = *(_QWORD *)(result[5] + 16);
  if (v33)
  {
    if (v33 == 1)
    {
      v33 = 4;
    }
    else
    {
      v34 = v33 - 2;
      if (v34 >= 2)
        v34 = 2;
      v35 = (uint64x2_t)vdupq_n_s64(v34);
      v36 = ((_BYTE)v34 + 2) & 6;
      a3.i64[0] = v36;
      a4.i64[0] = 2;
      v37 = (int8x16_t)vdupq_lane_s64(vceqq_s64(a3, a4).i64[0], 0);
      v33 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(2 * (unint64_t)(v36 != 2)), (int8x16_t)xmmword_1D4538030), v35), vbslq_s8(v37, (int8x16_t)xmmword_1D454FB70, (int8x16_t)xmmword_1D454FB80), vbslq_s8(v37, (int8x16_t)xmmword_1D454FB80, (int8x16_t)xmmword_1D454FB90)));
    }
  }
  v17 = __OFADD__(v32, v33);
  v38 = v32 + v33;
  if (v17)
    goto LABEL_136;
  v39 = *(_QWORD *)(result[6] + 16);
  if (v39)
  {
    if (v39 == 1)
    {
      v39 = 4;
    }
    else
    {
      v40 = 0;
      v41 = v39 - 2;
      v42 = 158;
      if (v41 < 0x9E)
        v42 = v41;
      v43 = (uint64x2_t)vdupq_n_s64(v42);
      v44 = (int64x2_t)xmmword_1D454FB70;
      v45 = vdupq_n_s64(4uLL);
      do
      {
        v46 = (int8x16_t)v44;
        v44 = vaddq_s64(v44, v45);
        v40 += 2;
      }
      while ((((_WORD)v42 + 2) & 0x1FE) != v40);
      v39 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v40 - 2), (int8x16_t)xmmword_1D4538030), v43), v46, (int8x16_t)v44));
    }
  }
  v17 = __OFADD__(v38, v39);
  v47 = v38 + v39;
  if (v17)
    goto LABEL_137;
  v48 = *(_QWORD *)(result[7] + 16);
  if (v48)
  {
    if (v48 == 1)
    {
      v48 = 4;
    }
    else
    {
      v49 = 0;
      v50 = v48 - 2;
      v51 = 6;
      if (v50 < 6)
        v51 = v50;
      v52 = (uint64x2_t)vdupq_n_s64(v51);
      v53 = (int64x2_t)xmmword_1D454FB70;
      v54 = vdupq_n_s64(4uLL);
      do
      {
        v55 = (int8x16_t)v53;
        v53 = vaddq_s64(v53, v54);
        v49 += 2;
      }
      while ((((_BYTE)v51 + 2) & 0xE) != v49);
      v48 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v49 - 2), (int8x16_t)xmmword_1D4538030), v52), v55, (int8x16_t)v53));
    }
  }
  v17 = __OFADD__(v47, v48);
  v56 = v47 + v48;
  if (v17)
    goto LABEL_138;
  v57 = *(_QWORD *)(result[8] + 16);
  if (v57)
  {
    if (v57 == 1)
    {
      v57 = 4;
    }
    else
    {
      v58 = 0;
      v59 = v57 - 2;
      v60 = 318;
      if (v59 < 0x13E)
        v60 = v59;
      v61 = (uint64x2_t)vdupq_n_s64(v60);
      v62 = (int64x2_t)xmmword_1D454FB70;
      v63 = vdupq_n_s64(4uLL);
      do
      {
        v64 = (int8x16_t)v62;
        v62 = vaddq_s64(v62, v63);
        v58 += 2;
      }
      while ((((_WORD)v60 + 2) & 0x3FE) != v58);
      v57 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v58 - 2), (int8x16_t)xmmword_1D4538030), v61), v64, (int8x16_t)v62));
    }
  }
  v17 = __OFADD__(v56, v57);
  v65 = v56 + v57;
  if (v17)
    goto LABEL_139;
  v66 = *(_QWORD *)(result[9] + 16);
  if (v66)
  {
    if (v66 == 1)
    {
      v66 = 4;
    }
    else
    {
      v67 = 0;
      v68 = v66 - 2;
      v69 = 6;
      if (v68 < 6)
        v69 = v68;
      v70 = (uint64x2_t)vdupq_n_s64(v69);
      v71 = (int64x2_t)xmmword_1D454FB70;
      v72 = vdupq_n_s64(4uLL);
      do
      {
        v73 = (int8x16_t)v71;
        v71 = vaddq_s64(v71, v72);
        v67 += 2;
      }
      while ((((_BYTE)v69 + 2) & 0xE) != v67);
      v66 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v67 - 2), (int8x16_t)xmmword_1D4538030), v70), v73, (int8x16_t)v71));
    }
  }
  v17 = __OFADD__(v65, v66);
  v74 = v65 + v66;
  if (v17)
    goto LABEL_140;
  v75 = *(_QWORD *)(result[10] + 16);
  if (v75)
  {
    if (v75 == 1)
    {
      v75 = 4;
    }
    else
    {
      v76 = 0;
      v77 = v75 - 2;
      v78 = 318;
      if (v77 < 0x13E)
        v78 = v77;
      v79 = (uint64x2_t)vdupq_n_s64(v78);
      v80 = (int64x2_t)xmmword_1D454FB70;
      v81 = vdupq_n_s64(4uLL);
      do
      {
        v82 = (int8x16_t)v80;
        v80 = vaddq_s64(v80, v81);
        v76 += 2;
      }
      while ((((_WORD)v78 + 2) & 0x3FE) != v76);
      v75 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v76 - 2), (int8x16_t)xmmword_1D4538030), v79), v82, (int8x16_t)v80));
    }
  }
  v17 = __OFADD__(v74, v75);
  v83 = v74 + v75;
  if (v17)
    goto LABEL_141;
  v84 = *(_QWORD *)(result[11] + 16);
  if (v84)
  {
    if (v84 == 1)
    {
      v84 = 4;
    }
    else
    {
      v85 = 0;
      v86 = v84 - 2;
      v87 = 6;
      if (v86 < 6)
        v87 = v86;
      v88 = (uint64x2_t)vdupq_n_s64(v87);
      v89 = (int64x2_t)xmmword_1D454FB70;
      v90 = vdupq_n_s64(4uLL);
      do
      {
        v91 = (int8x16_t)v89;
        v89 = vaddq_s64(v89, v90);
        v85 += 2;
      }
      while ((((_BYTE)v87 + 2) & 0xE) != v85);
      v84 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v85 - 2), (int8x16_t)xmmword_1D4538030), v88), v91, (int8x16_t)v89));
    }
  }
  v17 = __OFADD__(v83, v84);
  v92 = v83 + v84;
  if (v17)
    goto LABEL_142;
  v93 = *(_QWORD *)(result[12] + 16);
  if (v93)
  {
    if (v93 == 1)
    {
      v93 = 4;
    }
    else
    {
      v94 = 0;
      v95 = v93 - 2;
      v96 = 254;
      if (v95 < 0xFE)
        v96 = v95;
      v97 = (uint64x2_t)vdupq_n_s64(v96);
      v98 = (int64x2_t)xmmword_1D454FB70;
      v99 = vdupq_n_s64(4uLL);
      do
      {
        v100 = (int8x16_t)v98;
        v98 = vaddq_s64(v98, v99);
        v94 += 2;
      }
      while ((((_WORD)v96 + 2) & 0x1FE) != v94);
      v93 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v94 - 2), (int8x16_t)xmmword_1D4538030), v97), v100, (int8x16_t)v98));
    }
  }
  v17 = __OFADD__(v92, v93);
  v101 = v92 + v93;
  if (v17)
    goto LABEL_143;
  v102 = *(_QWORD *)(result[13] + 16);
  if (v102)
  {
    if (v102 == 1)
    {
      v102 = 4;
    }
    else
    {
      v103 = 0;
      v104 = v102 - 2;
      v105 = 30;
      if (v104 < 0x1E)
        v105 = v104;
      v106 = (uint64x2_t)vdupq_n_s64(v105);
      v107 = (int64x2_t)xmmword_1D454FB70;
      v108 = vdupq_n_s64(4uLL);
      do
      {
        v109 = (int8x16_t)v107;
        v107 = vaddq_s64(v107, v108);
        v103 += 2;
      }
      while ((((_BYTE)v105 + 2) & 0x3E) != v103);
      v102 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v103 - 2), (int8x16_t)xmmword_1D4538030), v106), v109, (int8x16_t)v107));
    }
  }
  v17 = __OFADD__(v101, v102);
  v110 = v101 + v102;
  if (v17)
    goto LABEL_144;
  v111 = *(_QWORD *)(result[14] + 16);
  if (v111)
  {
    if (v111 == 1)
    {
      v111 = 4;
    }
    else
    {
      v112 = 0;
      v113 = v111 - 2;
      v114 = 62;
      if (v113 < 0x3E)
        v114 = v113;
      v115 = (uint64x2_t)vdupq_n_s64(v114);
      v116 = (int64x2_t)xmmword_1D454FB70;
      v117 = vdupq_n_s64(4uLL);
      do
      {
        v118 = (int8x16_t)v116;
        v116 = vaddq_s64(v116, v117);
        v112 += 2;
      }
      while ((((_BYTE)v114 + 2) & 0x7E) != v112);
      v111 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v112 - 2), (int8x16_t)xmmword_1D4538030), v115), v118, (int8x16_t)v116));
    }
  }
  v119 = v110 + v111;
  if (__OFADD__(v110, v111))
    goto LABEL_145;
  v120 = *(_QWORD *)(result[15] + 16);
  v121 = 8;
  if (v120 == 1)
    v121 = 4;
  if (v120)
    v122 = v121;
  else
    v122 = 0;
  result = (_QWORD *)(v119 + v122);
  if (__OFADD__(v119, v122))
    goto LABEL_146;
  return result;
}

uint64_t sub_1D44D8850(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1D42B28FC(&qword_1EFE56A50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D44D8890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1D42B28FC(&qword_1EFE56A50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D44D88D8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D44D8924 + 4 * byte_1D454F69F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D44D8958 + 4 * byte_1D454F69A[v4]))();
}

uint64_t sub_1D44D8958(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D8960(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44D8968);
  return result;
}

uint64_t sub_1D44D8974(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44D897CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D44D8980(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D8988(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for TBSoundAnalysisError()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44D89A0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 16) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v5 = v6 - 17;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1D44D8A28(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1D44D8A74 + 4 * byte_1D454F6A9[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1D44D8AA8 + 4 * byte_1D454F6A4[v4]))();
}

uint64_t sub_1D44D8AA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D8AB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44D8AB8);
  return result;
}

uint64_t sub_1D44D8AC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44D8ACCLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1D44D8AD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D8AD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for TBAccessibilitySoundRecognitionBuiltInDetectorIdentifier()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44D8AF0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D44D8B80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D44D8C90(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1D44D8E2C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t sub_1D44D8E34(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D44D8F18(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 128))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D44D8F58(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for TBAccessibilityCustomModelTensors()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44D8FC4(uint64_t result)
{
  if (result < 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1D44D90D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2 << 31;
  return result;
}

void type metadata accessor for TBAccessibilitySoundRecognitionDetectorSpecification()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44D90F0(uint64_t *a1)
{
  return sub_1D434941C(*a1);
}

void sub_1D44D9138(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1D44D95B0(a1, a2);
  sub_1D44D9810();
  v2[8] = v3;
  v2[9] = v4;
  v2[10] = v5;
  v2[11] = v6;
  v2[12] = v7;
  v2[13] = v8;
  v2[14] = v9;
  v2[15] = v10;
  sub_1D4493190();
}

void sub_1D44D91A4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1D44D95B0(a1, a2);
  sub_1D44D9810();
  v2[8] = v3;
  v2[9] = v5;
  v2[10] = v6;
  v2[11] = v7;
  v2[12] = v8;
  v2[13] = v9;
  v2[14] = v10;
  v2[15] = v11;
  sub_1D434941C(v4);
  sub_1D4493190();
}

uint64_t sub_1D44D923C(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(_QWORD *)a1;
  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  v6 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v6;
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  sub_1D434941C(v3);
  return a1;
}

uint64_t sub_1D44D92B8(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 128))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      HIDWORD(v3) = *(_DWORD *)(a1 + 4);
      LODWORD(v3) = HIDWORD(v3);
      v2 = v3 >> 31;
      if (v2 > 0x80000000)
        v4 = ~v2;
      else
        v4 = -1;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

double sub_1D44D9300(uint64_t a1, int a2, int a3)
{
  double result;
  unint64_t v4;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 120) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      *(_QWORD *)a1 = (unint64_t)(v4 >> 1) << 32;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_QWORD *)(a1 + 120) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for TBAccessibilitySoundRecognitionRequest()
{
  sub_1D42CB35C();
}

void type metadata accessor for TBAccessibilitySoundActionsRequest()
{
  sub_1D42CB35C();
}

uint64_t sub_1D44D93A4(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 13) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v5 = v6 - 14;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1D44D942C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1D44D9478 + 4 * byte_1D454F6B3[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1D44D94AC + 4 * byte_1D454F6AE[v4]))();
}

uint64_t sub_1D44D94AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D94B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D44D94BCLL);
  return result;
}

uint64_t sub_1D44D94C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D44D94D0);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1D44D94D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D44D94DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for TBAccessibilitySoundActionsSoundActionIdentifier()
{
  sub_1D42CB35C();
}

unint64_t sub_1D44D94F8()
{
  unint64_t result;

  result = qword_1EFE56A58;
  if (!qword_1EFE56A58)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454FAFC, &unk_1E97996E8);
    atomic_store(result, (unint64_t *)&qword_1EFE56A58);
  }
  return result;
}

unint64_t sub_1D44D9534()
{
  unint64_t result;

  result = qword_1EFE56A60;
  if (!qword_1EFE56A60)
  {
    result = MEMORY[0x1D825E41C](&unk_1D454FA84, &unk_1E97996E8);
    atomic_store(result, (unint64_t *)&qword_1EFE56A60);
  }
  return result;
}

unint64_t sub_1D44D9570()
{
  unint64_t result;

  result = qword_1EFE56A68;
  if (!qword_1EFE56A68)
  {
    result = MEMORY[0x1D825E41C](MEMORY[0x1E0DEDEB0], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&qword_1EFE56A68);
  }
  return result;
}

uint64_t sub_1D44D95B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[15];
  *(_QWORD *)(v2 - 96) = a2[14];
  *(_QWORD *)(v2 - 88) = v4;
  return sub_1D44D8FC4(v3);
}

uint64_t sub_1D44D9618()
{
  return sub_1D451A548();
}

uint64_t sub_1D44D9634()
{
  uint64_t v0;
  uint64_t v1;

  return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(v0, 1, v1);
}

uint64_t sub_1D44D9644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1D44D9654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 8))(v2, v1);
}

_QWORD *sub_1D44D9668()
{
  uint64_t v0;

  return sub_1D42B5528((_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1D44D9678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 72));
}

uint64_t sub_1D44D9688()
{
  return sub_1D451A530();
}

uint64_t sub_1D44D96A4()
{
  return sub_1D451A530();
}

uint64_t sub_1D44D96C0()
{
  return sub_1D451A530();
}

uint64_t sub_1D44D96C8()
{
  return sub_1D451A518();
}

uint64_t sub_1D44D96D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
  return sub_1D451A560();
}

uint64_t sub_1D44D96E8()
{
  return sub_1D451A548();
}

void sub_1D44D96F0()
{
  sub_1D44D4DC4(0, 16);
}

uint64_t sub_1D44D9708(uint64_t a1)
{
  uint64_t v1;

  return sub_1D44D8890(a1, *(_QWORD *)(v1 + 80));
}

uint64_t sub_1D44D9714()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 72) + 8))(v0, *(_QWORD *)(v1 - 88));
}

uint64_t sub_1D44D9728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v0, v1);
}

uint64_t sub_1D44D973C()
{
  return sub_1D451A50C();
}

uint64_t sub_1D44D9748()
{
  return sub_1D451A53C();
}

uint64_t sub_1D44D9750()
{
  return sub_1D451A4E8();
}

uint64_t sub_1D44D9764()
{
  return sub_1D451A4E8();
}

uint64_t sub_1D44D976C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 8) + 8))(v1, *(_QWORD *)(v0 + 16));
}

uint64_t sub_1D44D977C()
{
  return sub_1D451A4D0();
}

uint64_t sub_1D44D978C()
{
  return sub_1D451A56C();
}

uint64_t sub_1D44D979C()
{
  return sub_1D451A560();
}

uint64_t sub_1D44D97AC()
{
  uint64_t v0;
  uint64_t v1;

  _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v0, 0, 1, v1);
  return v0;
}

uint64_t sub_1D44D97D0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_1D44D97DC(uint64_t a1, _BYTE *a2)
{
  char v2;

  *a2 = v2;
  return swift_willThrow();
}

uint64_t sub_1D44D97E8()
{
  return swift_retain();
}

uint64_t sub_1D44D9804()
{
  return sub_1D451A56C();
}

void sub_1D44D9810()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *v0 = v1;
  v0[1] = v2;
  v0[2] = v3;
  v0[3] = v4;
  v0[4] = v5;
  v0[5] = v6;
  v0[6] = v7;
  v0[7] = v8;
}

uint64_t sub_1D44D9824()
{
  return sub_1D44D99BC(1);
}

uint64_t sub_1D44D982C(uint64_t a1, int a2, int a3, int a4)
{
  BOOL v8;

  if (qword_1EFE56FA8 == -1)
  {
    if (qword_1EFE56FB0)
      return _availability_version_check();
  }
  else
  {
    dispatch_once_f(&qword_1EFE56FA8, 0, (dispatch_function_t)sub_1D44D99B4);
    if (qword_1EFE56FB0)
      return _availability_version_check();
  }
  if (qword_1EFE56FA0 == -1)
  {
    v8 = dword_1EFE56F90 < a2;
    if (dword_1EFE56F90 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_1EFE56FA0, 0, (dispatch_function_t)sub_1D44D9824);
    v8 = dword_1EFE56F90 < a2;
    if (dword_1EFE56F90 > a2)
      return 1;
  }
  if (v8)
    return 0;
  if (dword_1EFE56F94 > a3)
    return 1;
  return dword_1EFE56F94 >= a3 && dword_1EFE56F98 >= a4;
}

uint64_t sub_1D44D99B4()
{
  return sub_1D44D99BC(0);
}

uint64_t sub_1D44D99BC(uint64_t result)
{
  uint64_t (*v1)(void);
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t (*)(void))qword_1EFE56FB0;
  if (qword_1EFE56FB0)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (MEMORY[0x1E0C80CC0])
    {
      qword_1EFE56FB0 = (uint64_t)MEMORY[0x1E0C80CC0];
      v1 = MEMORY[0x1E0C80CC0];
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = MEMORY[0x1D825DD38](v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_1EFE56F90, &dword_1EFE56F94, &dword_1EFE56F98);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D44D9CEC(uint64_t a1, int a2, float a3)
{
  _DWORD v5[4];
  uint64_t v6;
  char v7;
  __int16 v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = 0;
  v9 = 0;
  *(float *)v5 = a3;
  v5[1] = dword_1EFE56A70;
  v5[2] = dword_1EFE56A78;
  v5[3] = dword_1EFE56A7C;
  v6 = 0x3C23D70A00000002;
  v7 = 0;
  v10 = 160;
  v11 = a2;
  v12 = 0;
  v13 = dword_1EFE56A74;
  v14 = 0;
  *(_QWORD *)a1 = sub_1D44F3BD0((uint64_t)v5);
  return a1;
}

uint64_t *sub_1D44D9D80(uint64_t *a1)
{
  void *v2;

  v2 = (void *)*a1;
  if (*a1)
  {
    sub_1D44F3AB4(*a1);
    free(v2);
  }
  return a1;
}

void sub_1D44D9DB8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_1D44D9DC8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  dispatch_queue_t v6;
  void *v7;

  v3 = a2;
  DSPGraph::Box::Box((DSPGraph::Box *)a1);
  *(_QWORD *)a1 = &off_1E97AFD38;
  *(_QWORD *)(a1 + 776) = v3;
  *(_OWORD *)(a1 + 784) = 0u;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = v3;
  v6 = dispatch_queue_create("com.apple.SoundAnalysis.EARAudioProcessor", v4);
  v7 = *(void **)(a1 + 792);
  *(_QWORD *)(a1 + 792) = v6;

  return a1;
}

void sub_1D44D9E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D44D9E70(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  _QWORD *v10;
  id v11;
  _QWORD v12[3];
  _QWORD v13[3];

  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v4 + 8) == v3)
  {
    sub_1D44DA4C4(v13, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v12, "in");
    v10 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v10 = (_QWORD *)*v10;
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    v7 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) != v7)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) + 56) + 80)+ 16), (*(_DWORD *)(*(_QWORD *)(v6 + 120) + 24) * a2));
      v11 = (id)objc_claimAutoreleasedReturnValue();
      v8 = (void *)MEMORY[0x1D825DE1C]();
      objc_msgSend(*(id *)(a1 + 784), "addAudio:", v11);
      objc_autoreleasePoolPop(v8);

      return;
    }
    sub_1D44DA4C4(v13, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v12, "in");
    v10 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v10 = (_QWORD *)*v10;
  }
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v9, v10, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
  DSPGraph::ThrowException();
  __break(1u);
}

void sub_1D44DA004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 17) < 0)
    operator delete(*(void **)(v25 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44DA06C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];

  v3 = a1 + 64;
  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v3 + 8) == v2)
  {
    sub_1D44DA4C4(v14, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v13, "in");
    v10 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v10 = (_QWORD *)*v10;
    goto LABEL_20;
  }
  if (**(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) != 16000.0)
    __assert_rtn("initialize", "DSPGraph_EARAudioProcessorBox.mm", 40, "in(0).format().mSampleRate == 16000");
  v4 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v4)
  {
    sub_1D44DA4C4(v14, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v13, "in");
    v10 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v10 = (_QWORD *)*v10;
    goto LABEL_20;
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120) + 28) != 1)
    __assert_rtn("initialize", "DSPGraph_EARAudioProcessorBox.mm", 41, "in(0).format().mChannelsPerFrame == 1");
  v5 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v5)
  {
    sub_1D44DA4C4(v14, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v13, "in");
    v10 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v10 = (_QWORD *)*v10;
LABEL_20:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v9, v10, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    v8 = DSPGraph::ThrowException();
LABEL_22:
    __break(1u);
    return MEMORY[0x1E0DE7D20](v8, sel_resetForNewRequest);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120) + 24) != 2)
    __assert_rtn("initialize", "DSPGraph_EARAudioProcessorBox.mm", 42, "in(0).format().mBytesPerFrame == 2");
  v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0D1F0E0]), "initWithConfigFile:configRoot:sampleRate:delegate:queue:", *(_QWORD *)(a1 + 776), CFSTR("config"), 16000, 0, *(_QWORD *)(a1 + 792));
  v7 = *(void **)(a1 + 784);
  *(_QWORD *)(a1 + 784) = v6;

  v8 = *(_QWORD *)(a1 + 784);
  if (!v8)
  {
    sub_1D44DA4C4(v14, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_EARAudioProcessorBox.mm");
    sub_1D44DA4C4(v13, "initialize");
    sub_1D44DA4C4(v12, "inputs must be 16kHz");
    v8 = DSPGraph::ThrowException();
    goto LABEL_22;
  }
  return MEMORY[0x1E0DE7D20](v8, sel_resetForNewRequest);
}

void sub_1D44DA358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1D44DA3CC(id *a1)
{
  sub_1D44DA5FC(a1);
  JUMPOUT(0x1D825DA8CLL);
}

const char *sub_1D44DA3F0()
{
  return "EARAudioProcessorBox";
}

uint64_t sub_1D44DA3FC()
{
  return 0;
}

uint64_t sub_1D44DA404()
{
  return 0;
}

uint64_t sub_1D44DA410()
{
  return 0;
}

uint64_t sub_1D44DA418()
{
  return 0;
}

uint64_t sub_1D44DA428()
{
  return 0;
}

double sub_1D44DA430@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 16) = 0;
  result = *(double *)"xfuapraexoba";
  *(_OWORD *)a1 = *(_OWORD *)"xfuapraexoba";
  return result;
}

uint64_t sub_1D44DA448()
{
  return 0;
}

uint64_t sub_1D44DA450()
{
  return 0;
}

uint64_t sub_1D44DA458()
{
  return 0;
}

uint64_t sub_1D44DA460()
{
  return 0;
}

uint64_t sub_1D44DA468()
{
  return 0;
}

uint64_t sub_1D44DA470()
{
  return 0;
}

uint64_t sub_1D44DA478()
{
  return 0;
}

uint64_t sub_1D44DA480()
{
  return 0;
}

uint64_t sub_1D44DA488()
{
  return 0;
}

uint64_t sub_1D44DA490()
{
  return 0;
}

uint64_t sub_1D44DA498()
{
  return 1;
}

void sub_1D44DA4A0(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1D44DA4AC()
{
  return 0;
}

uint64_t sub_1D44DA4B4()
{
  return 1;
}

_QWORD *sub_1D44DA4C4(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1D44DA574();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_1D44DA574()
{
  sub_1D44DA588("basic_string");
}

void sub_1D44DA588(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1D44DA5D8(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E97AF0D8, MEMORY[0x1E0DE42D0]);
}

void sub_1D44DA5C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1D44DA5D8(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void sub_1D44DA5FC(id *a1)
{

  DSPGraph::Box::~Box((DSPGraph::Box *)a1);
}

void sub_1D44DA828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  sub_1D44DAAE4(v12);

  _Unwind_Resume(a1);
}

__n128 sub_1D44DA86C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t sub_1D44DA87C(uint64_t a1)
{
  return sub_1D44DAAE4(a1 + 48);
}

uint64_t sub_1D44DA884(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = a1[4];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v7 = a1[5];
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v12 = operator new(0x38uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E97B1308;
  v24 = v3;
  v25 = v4;
  v23[0] = v9;
  v23[1] = v8;
  sub_1D44EE9C8(v12 + 3, &v24, v23);
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_QWORD *)(a1[6] + 8);
  v19 = *(std::__shared_weak_count **)(v18 + 56);
  *(_QWORD *)(v18 + 48) = v12 + 3;
  *(_QWORD *)(v18 + 56) = v12;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return 1;
}

void sub_1D44DAA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  sub_1D44DAAE4((uint64_t)&a13);
  sub_1D44DAAE4((uint64_t)&a15);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  sub_1D44DAAE4((uint64_t)&a9);
  sub_1D44DAAE4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44DAAE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1D44DAB3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E97B1308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D44DAB4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E97B1308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D825DA8CLL);
}

uint64_t sub_1D44DAB7C(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_1D44DAAE4(a1 + 40);
  return sub_1D44DAAE4(v1);
}

uint64_t sub_1D44DABA8(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const char *v9;
  int v10;

  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E97AF1F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 80) = a2[1];
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v4;
  v6 = *a3;
  v7 = a3[2];
  *(_OWORD *)(a1 + 128) = a3[1];
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 112) = v6;
  if (*((_DWORD *)a2 + 10) != 1)
  {
    v9 = "upstreamFormat.mBlockSize == 1";
    v10 = 18;
    goto LABEL_6;
  }
  if (*((_DWORD *)a3 + 10) != 1)
  {
    v9 = "downstreamFormat.mBlockSize == 1";
    v10 = 19;
LABEL_6:
    __assert_rtn("FormatMatchingNode", "SoundAnalysis_FormatMatchingNode.cpp", v10, v9);
  }
  sub_1D44DAC90(a1);
  return a1;
}

void sub_1D44DAC68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1D44DAAE4(v3);
  *v1 = &unk_1E97AF1C8;
  sub_1D44DB220(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44DAC90(uint64_t a1)
{
  DSPGraph::Graph **v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  DSPGraph::Graph *v6;
  char *v7;
  DSPGraph::Box *v8;
  void *v9;
  __int128 v10;
  _QWORD *v11;
  void *v13[2];
  char v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;

  sub_1D44DB280(__p);
  v2 = (DSPGraph::Graph **)(a1 + 48);
  sub_1D44DB0D0(a1 + 48, (__int128 *)__p);
  v3 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v4 = (unint64_t *)((char *)__p[1] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *v2;
  if (*((char *)*v2 + 431) < 0)
  {
    *((_QWORD *)v6 + 52) = 19;
    v7 = (char *)*((_QWORD *)v6 + 51);
  }
  else
  {
    v7 = (char *)v6 + 408;
    *((_BYTE *)v6 + 431) = 19;
  }
  strcpy(v7, "formatMatchingGraph");
  sub_1D44DA4C4(__p, "input");
  DSPGraph::Graph::addInput();
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  v8 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v8);
  *(_QWORD *)v8 = MEMORY[0x1E0CFFC48] + 16;
  *((_QWORD *)v8 + 97) = 0;
  sub_1D44DA4C4(__p, "channelMapper");
  DSPGraph::Graph::add();
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  DSPGraph::Graph::connect();
  v10 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 112);
  v9 = __p[0];
  v16 = v10;
  v17 = *(_OWORD *)(a1 + 144);
  __p[0] = *(void **)(a1 + 64);
  if (*(double *)__p != *(double *)&v9)
  {
    v11 = (_QWORD *)operator new();
    bzero(v11, 0x3B0uLL);
    DSPGraph::Box::Box((DSPGraph::Box *)v11);
    *v11 = MEMORY[0x1E0CFFC38] + 16;
    *(_QWORD *)((char *)v11 + 772) = 0;
    v11[98] = 0;
    v11[100] = 0;
    v11[99] = 0;
    DSPGraph::SimpleABL::SimpleABL((DSPGraph::SimpleABL *)(v11 + 101));
    *(_OWORD *)(v11 + 109) = 0u;
    *(_OWORD *)(v11 + 103) = 0u;
    *(_OWORD *)(v11 + 105) = 0u;
    *(_OWORD *)((char *)v11 + 849) = 0u;
    *v11 = MEMORY[0x1E0CFFC58] + 16;
    v11[111] = 0;
    v11[112] = 0x7F6E6F726DLL;
    *((_BYTE *)v11 + 904) = 0;
    DSPGraph::SimpleABL::SimpleABL((DSPGraph::SimpleABL *)(v11 + 114));
    *((_DWORD *)v11 + 232) = 0;
    sub_1D44DA4C4(v13, "SRC");
    DSPGraph::Graph::add();
    if (v14 < 0)
      operator delete(v13[0]);
    DSPGraph::Graph::connect();
  }
  sub_1D44DA4C4(v13, "output");
  DSPGraph::Graph::addOutput();
  if (v14 < 0)
    operator delete(v13[0]);
  DSPGraph::Graph::connect();
  DSPGraph::Graph::setSliceDuration();
  return DSPGraph::Graph::configure(*v2);
}

void sub_1D44DAFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44DB084(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;

  if (*((_DWORD *)a2 + 10) != 1)
    __assert_rtn("setUpstreamFormat", "SoundAnalysis_FormatMatchingNode.cpp", 24, "upstreamFormat.mBlockSize == 1");
  v2 = *a2;
  v3 = a2[1];
  *(_OWORD *)((char *)a1 + 92) = *(__int128 *)((char *)a2 + 28);
  a1[4] = v2;
  a1[5] = v3;
  return sub_1D44DAC90((uint64_t)a1);
}

uint64_t sub_1D44DB0D0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t sub_1D44DB134()
{
  return 1;
}

uint64_t sub_1D44DB13C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 56);
  *a2 = *(_QWORD *)(result + 48);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

__n128 sub_1D44DB160@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 96);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 sub_1D44DB174@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 144);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

_QWORD *sub_1D44DB188(_QWORD *a1)
{
  *a1 = off_1E97AF1F8;
  sub_1D44DAAE4((uint64_t)(a1 + 6));
  *a1 = &unk_1E97AF1C8;
  sub_1D44DB220(a1 + 2);
  return a1;
}

void sub_1D44DB1CC(_QWORD *a1)
{
  *a1 = off_1E97AF1F8;
  sub_1D44DAAE4((uint64_t)(a1 + 6));
  *a1 = &unk_1E97AF1C8;
  sub_1D44DB220(a1 + 2);
  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44DB220(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

_QWORD *sub_1D44DB280@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x460uLL);
  result = sub_1D44DB2C8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1D44DB2B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D44DB2C8(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E97B1340;
  MEMORY[0x1D825D8A0](a1 + 3);
  return a1;
}

void sub_1D44DB2FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D44DB310(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E97B1340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D44DB320(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E97B1340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D825DA8CLL);
}

uint64_t sub_1D44DB350(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D44DB4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  uint64_t v25;

  _Block_object_dispose(&a16, 8);
  v25 = a22;
  a22 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);

  _Unwind_Resume(a1);
}

uint64_t sub_1D44DB4E8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_1D44DB4F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1D44DB518(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    v14 = v4;
    v15 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v7 = operator new();
  MEMORY[0x1D825D660](v7, &v14);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = v7;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 1;
}

void sub_1D44DB5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x1D825DA8C](v9, 0xE1C40E9FAB1CALL);
  sub_1D44DAAE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1D44DB98C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 64;
  *(_QWORD *)(a1 + 72) = a1 + 64;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 88;
  *(_QWORD *)(a1 + 96) = a1 + 88;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 128;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 112) = off_1E97AF278;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 256) = 0x4000;
  return result;
}

__n128 sub_1D44DB9F4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t sub_1D44DBA08(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t i;
  __int128 v13;
  __int128 v14[3];
  _OWORD v15[3];

  v4 = *(_OWORD *)(a1 + 176);
  v15[0] = *(_OWORD *)(a1 + 160);
  v15[1] = v4;
  v15[2] = *(_OWORD *)(a1 + 192);
  result = sub_1D44DBAC8(a2, (uint64_t)v15);
  if ((result & 1) == 0)
  {
    v6 = *(_OWORD *)a2;
    v7 = *(_OWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 192) = v8;
    *(_OWORD *)(a1 + 160) = v6;
    *(_OWORD *)(a1 + 176) = v7;
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 240) = v11;
    *(_OWORD *)(a1 + 208) = v9;
    *(_OWORD *)(a1 + 224) = v10;
    for (i = *(_QWORD *)(a1 + 48); i != a1 + 40; i = *(_QWORD *)(i + 8))
    {
      v13 = *(_OWORD *)(a2 + 16);
      v14[0] = *(_OWORD *)a2;
      v14[1] = v13;
      v14[2] = *(_OWORD *)(a2 + 32);
      sub_1D44DB084((_OWORD *)(i + 16), v14);
    }
    return sub_1D44DBB88((DSPGraph::Graph **)a1);
  }
  return result;
}

uint64_t sub_1D44DBAC8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(double *)a1 == *(double *)a2
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32))
  {
    LODWORD(result) = sub_1D44DF59C(a1, a2, 0, 0);
  }
  else
  {
    LODWORD(result) = 0;
  }
  if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40))
    return result;
  else
    return 0;
}

__n128 sub_1D44DBB74@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t sub_1D44DBB88(DSPGraph::Graph **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  DSPGraph::Graph *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  DSPGraph::Graph *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  DSPGraph::Graph *v21;
  std::__shared_weak_count *v22;
  _QWORD v23[2];
  void *__p[2];
  char v25;

  sub_1D44DB280(__p);
  sub_1D44DB0D0((uint64_t)a1, (__int128 *)__p);
  v2 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v3 = (unint64_t *)((char *)__p[1] + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *a1;
  if (*((char *)*a1 + 431) < 0)
  {
    *((_QWORD *)v5 + 52) = 9;
    v6 = (char *)*((_QWORD *)v5 + 51);
  }
  else
  {
    v6 = (char *)v5 + 408;
    *((_BYTE *)v5 + 431) = 9;
  }
  strcpy(v6, "treeGraph");
  sub_1D44DA4C4(__p, "input");
  v7 = DSPGraph::Graph::addInput();
  if (v25 < 0)
    operator delete(__p[0]);
  a1[19] = (DSPGraph::Graph *)v7;
  v8 = (std::__shared_weak_count *)a1[1];
  v23[0] = *a1;
  v23[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_1D44DBE8C(v23, a1 + 14);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  DSPGraph::Graph::setSliceDuration();
  DSPGraph::Graph::configure(*a1);
  v13 = a1[36];
  if (v13)
  {
    v14 = (std::__shared_weak_count *)a1[1];
    v21 = *a1;
    v22 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v13 = a1[36];
      __p[0] = a1[4];
      if (!v13)
        sub_1D44E27E4();
    }
    else
    {
      __p[0] = a1[4];
    }
    (*(void (**)(DSPGraph::Graph *, DSPGraph::Graph **, void **))(*(_QWORD *)v13 + 48))(v13, &v21, __p);
    v17 = v22;
    if (v22)
    {
      v18 = (unint64_t *)&v22->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  return DSPGraph::Graph::initialize(*a1);
}

void sub_1D44DBD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44DBDCC(uint64_t a1, double *a2)
{
  int v4;
  uint64_t result;

  v4 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 296) = (uint64_t)a2[1];
  DSPGraph::Graph::preflight();
  if (*(_DWORD *)a2 != v4)
    __assert_rtn("processBuffer", "SoundAnalysis_ProcessingTree.cpp", 66, "inputBuffer.mNumFrames == expectedNumberOfFrames");
  result = DSPGraph::Graph::processMultiple();
  *(_QWORD *)(a1 + 296) += *(unsigned int *)a2;
  return result;
}

void sub_1D44DBE8C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  DSPGraph::Graph *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  DSPGraph::Box *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  DSPGraph::Box *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  DSPGraph::Graph *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  std::__shared_weak_count *v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  DSPGraph::Box *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  DSPGraph::Box *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  DSPGraph::Box *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unsigned int v74;
  DSPGraph::Box *v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  int v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  DSPGraph::Box *v96;
  _QWORD *v97;
  uint64_t v98;
  const char *v99;
  _QWORD *v100;
  uint64_t v101;
  const char *v102;
  _QWORD *v103;
  uint64_t v104;
  const char *v105;
  _QWORD *v106;
  uint64_t v107;
  const char *v108;
  const char *v109;
  _QWORD *v110;
  const char *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  _QWORD *v117;
  const char *v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  const char *v122;
  const char *v123;
  _QWORD *v124;
  const char *v125;
  _QWORD *v126;
  uint64_t v127;
  DSPGraph::Graph **v130;
  DSPGraph::Graph **v131;
  _QWORD v132[2];
  DSPGraph::Graph *v133;
  std::__shared_weak_count *v134;
  DSPGraph::Graph *v135;
  std::__shared_weak_count *v136;
  DSPGraph::Graph *v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  DSPGraph::Graph *v144;
  std::__shared_weak_count *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;

  if (!a2)
    __assert_rtn("buildTreeGraphRecursively", "SoundAnalysis_ProcessingTree.cpp", 89, "node");
  v2 = a2 + 2;
  v141 = &v141;
  v142 = &v141;
  v143 = 0;
  v3 = (_QWORD *)a2[3];
  if (v3 != a2 + 2)
  {
    v4 = 1;
    v5 = &v141;
    do
    {
      v6 = operator new(0x18uLL);
      v7 = v3[2];
      v6[1] = &v141;
      v6[2] = v7;
      *v6 = v5;
      v5[1] = v6;
      v141 = v6;
      v143 = v4;
      v3 = (_QWORD *)v3[1];
      ++v4;
      v5 = v6;
    }
    while (v3 != v2);
    v8 = v142;
    if (v142 != &v141)
    {
      v127 = MEMORY[0x1E0CFFC38] + 16;
      do
      {
        v9 = (_QWORD *)v8[2];
        if (!v9[1])
          __assert_rtn("buildTreeGraphRecursively", "SoundAnalysis_ProcessingTree.cpp", 91, "downstreamNode->upstreamNode()");
        (*(void (**)(__int128 *__return_ptr, _QWORD))(*v9 + 16))(&v146, v8[2]);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v9[1] + 24))(&v139);
        if ((sub_1D44DBAC8((uint64_t)&v146, (uint64_t)&v139) & 1) == 0)
          __assert_rtn("buildTreeGraphRecursively", "SoundAnalysis_ProcessingTree.cpp", 92, "formatsAreEquivalent(downstreamNode->upstreamFB(), downstreamNode->upstreamNode()->downstreamFB())");
        (*(void (**)(DSPGraph::Graph **__return_ptr, _QWORD *))(*v9 + 8))(&v137, v9);
        if (!DSPGraph::Graph::numOutputs(v137))
          goto LABEL_14;
        v10 = DSPGraph::Graph::in(v137);
        v11 = *(_QWORD *)(v10 + 88);
        if (*(_QWORD *)(v10 + 96) == v11)
        {
          sub_1D44DA4C4(&v146, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          sub_1D44DA4C4(&v139, "out");
          v110 = (_QWORD *)(v10 + 32);
          if (*(char *)(v10 + 55) < 0)
            v110 = (_QWORD *)*v110;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v109, v110, (uint64_t)(*(_QWORD *)(v10 + 96) - *(_QWORD *)(v10 + 88)) >> 5, 0);
          DSPGraph::ThrowException();
LABEL_177:
          __break(1u);
          return;
        }
        v12 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11) + 120);
        v13 = DSPGraph::Graph::out(v137);
        v14 = *(_QWORD *)(v13 + 64);
        if (*(_QWORD *)(v13 + 72) == v14)
        {
          sub_1D44DA4C4(&v146, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          sub_1D44DA4C4(&v139, "in");
          v112 = (_QWORD *)(v13 + 32);
          if (*(char *)(v13 + 55) < 0)
            v112 = (_QWORD *)*v112;
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v111, v112, (uint64_t)(*(_QWORD *)(v13 + 72) - *(_QWORD *)(v13 + 64)) >> 5, 0);
          DSPGraph::ThrowException();
          goto LABEL_177;
        }
        if (v12 == **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14)
                                                            + 120)
          && (v15 = sub_1D44DF780(v137), v15 == sub_1D44DF888(v137)))
        {
LABEL_14:
          v16 = operator new();
          (*(void (**)(DSPGraph::Graph **__return_ptr, _QWORD *))(*v9 + 8))(&v133, v9);
          DSPGraph::Graph::numInputs(v133);
          DSPGraph::Graph::numOutputs(v133);
          DSPGraph::Box::Box((DSPGraph::Box *)v16);
          *(_QWORD *)v16 = &off_1E97AFFC8;
          *(_QWORD *)(v16 + 776) = &unk_1E97B0278;
          v17 = v133;
          v18 = v134;
          *(_QWORD *)(v16 + 784) = v133;
          *(_QWORD *)(v16 + 792) = v18;
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          v130 = (DSPGraph::Graph **)(v16 + 784);
          v21 = DSPGraph::Graph::numInputs(v17);
          v149 = 0u;
          v150 = 0u;
          v147 = 0u;
          v148 = 0u;
          v146 = 0u;
          sub_1D44E0B14((_QWORD *)(v16 + 800), v21, &v146);
          v22 = DSPGraph::Graph::numOutputs(v133);
          v149 = 0u;
          v150 = 0u;
          v147 = 0u;
          v148 = 0u;
          v146 = 0u;
          sub_1D44E0B14((_QWORD *)(v16 + 824), v22, &v146);
          *(_QWORD *)(v16 + 896) = 0;
          *(_OWORD *)(v16 + 864) = 0u;
          *(_OWORD *)(v16 + 880) = 0u;
          *(_OWORD *)(v16 + 848) = 0u;
          *(_BYTE *)(v16 + 904) = 1;
          *(_DWORD *)(v16 + 908) = 0;
          v23 = (char *)v133;
          v24 = v134;
          v144 = v133;
          v145 = v134;
          if (v134)
          {
            v25 = (unint64_t *)&v134->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          if (!v23)
            __assert_rtn("GraphBoxCommon", "DSPGraph_GraphBox.h", 149, "inGraph");
          v27 = (unsigned __int8 *)*v130;
          v28 = *((unsigned __int8 *)*v130 + 761);
          if (!*((_BYTE *)*v130 + 760) || !*((_BYTE *)*v130 + 761))
          {
            v29 = v27[762];
            DSPGraph::Graph::uninitialize((DSPGraph::Graph *)v27);
            DSPGraph::Graph::unconfigure(*v130);
            v30 = (DSPGraph::Box *)DSPGraph::Graph::in(*v130);
            DSPGraph::Box::sampleRate(v30);
            DSPGraph::Graph::setSliceDuration();
            if (v28)
              DSPGraph::Graph::configure(*v130);
            if (v29)
              DSPGraph::Graph::initialize(*v130);
          }
          if (!DSPGraph::Graph::numInputs((DSPGraph::Graph *)v23))
          {
            sub_1D44DA4C4(&v146, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
            sub_1D44DA4C4(&v139, "GraphBoxCommon");
            v113 = v23 + 408;
            if (v23[431] < 0)
              v113 = (_QWORD *)*v113;
            v114 = (*(uint64_t (**)(char *))(*(_QWORD *)v23 + 16))(v23);
            DSPGraph::strprintf((DSPGraph *)"%s %s graph must have at least one input bus.", v115, v113, v114);
            DSPGraph::ThrowException();
            goto LABEL_177;
          }
          v31 = DSPGraph::Graph::in(*v130);
          v32 = *(_QWORD *)(v31 + 88);
          if (*(_QWORD *)(v31 + 96) == v32)
          {
            sub_1D44DA4C4(&v146, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
            sub_1D44DA4C4(&v139, "out");
            v117 = (_QWORD *)(v31 + 32);
            if (*(char *)(v31 + 55) < 0)
              v117 = (_QWORD *)*v117;
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v116, v117, (uint64_t)(*(_QWORD *)(v31 + 96) - *(_QWORD *)(v31 + 88)) >> 5, 0);
            DSPGraph::ThrowException();
            goto LABEL_177;
          }
          v33 = 0;
          v34 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32) + 120);
          while (v33 < DSPGraph::Graph::numInputs((DSPGraph::Graph *)v23))
          {
            v35 = (DSPGraph::Box *)DSPGraph::Graph::in((DSPGraph::Graph *)v23);
            ++v33;
            if (DSPGraph::Box::sampleRate(v35) != v34)
            {
              sub_1D44DA4C4(&v146, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
              sub_1D44DA4C4(&v139, "GraphBoxCommon");
              v97 = v23 + 408;
              if (v23[431] < 0)
                v97 = (_QWORD *)*v97;
              v98 = (*(uint64_t (**)(char *))(*(_QWORD *)v23 + 16))(v23);
              DSPGraph::strprintf((DSPGraph *)"%s %s graph must have the same sample rate for all input busses to be used in a GraphBox", v99, v97, v98);
              DSPGraph::ThrowException();
              goto LABEL_177;
            }
          }
          if (DSPGraph::Graph::numOutputs(*v130))
          {
            v36 = DSPGraph::Graph::out(*v130);
            v37 = *(_QWORD *)(v36 + 64);
            if (*(_QWORD *)(v36 + 72) == v37)
            {
              sub_1D44DA4C4(&v146, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
              sub_1D44DA4C4(&v139, "in");
              v124 = (_QWORD *)(v36 + 32);
              if (*(char *)(v36 + 55) < 0)
                v124 = (_QWORD *)*v124;
              DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v123, v124, (uint64_t)(*(_QWORD *)(v36 + 72) - *(_QWORD *)(v36 + 64)) >> 5, 0);
              DSPGraph::ThrowException();
              goto LABEL_177;
            }
            v38 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37) + 120);
          }
          else
          {
            v38 = 0;
          }
          v62 = 0;
          while (v62 < DSPGraph::Graph::numOutputs((DSPGraph::Graph *)v23))
          {
            v63 = (DSPGraph::Box *)DSPGraph::Graph::out((DSPGraph::Graph *)v23);
            ++v62;
            if (v38 != DSPGraph::Box::sampleRate(v63))
            {
              sub_1D44DA4C4(&v146, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
              sub_1D44DA4C4(&v139, "GraphBoxCommon");
              v100 = v23 + 408;
              if (v23[431] < 0)
                v100 = (_QWORD *)*v100;
              v101 = (*(uint64_t (**)(char *))(*(_QWORD *)v23 + 16))(v23);
              DSPGraph::strprintf((DSPGraph *)"%s %s graph must have the same sample rate for all output busses to be used in a GraphBox", v102, v100, v101);
              DSPGraph::ThrowException();
              goto LABEL_177;
            }
          }
          if (v24)
          {
            v64 = (unint64_t *)&v24->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v9 + 8))(&v139, v9);
          v66 = (char *)(v139 + 408);
          if (*(char *)(v139 + 431) < 0)
            v66 = *(char **)v66;
          sub_1D44DA4C4(&v146, v66);
          v67 = DSPGraph::Graph::add();
          if (SBYTE7(v147) < 0)
            operator delete((void *)v146);
          v68 = v140;
          if (v140)
          {
            v69 = (unint64_t *)&v140->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          v71 = v134;
          if (v134)
          {
            v72 = (unint64_t *)&v134->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            goto LABEL_103;
          }
        }
        else
        {
          v39 = operator new();
          (*(void (**)(DSPGraph::Graph **__return_ptr, _QWORD *))(*v9 + 8))(&v135, v9);
          DSPGraph::Box::Box((DSPGraph::Box *)v39);
          *(_QWORD *)v39 = v127;
          *(_QWORD *)(v39 + 772) = 0;
          *(_QWORD *)(v39 + 784) = 0;
          *(_QWORD *)(v39 + 800) = 0;
          *(_QWORD *)(v39 + 792) = 0;
          DSPGraph::SimpleABL::SimpleABL((DSPGraph::SimpleABL *)(v39 + 808));
          *(_OWORD *)(v39 + 872) = 0u;
          *(_OWORD *)(v39 + 824) = 0u;
          *(_OWORD *)(v39 + 840) = 0u;
          *(_OWORD *)(v39 + 849) = 0u;
          *(_QWORD *)v39 = &off_1E97B0290;
          *(_QWORD *)(v39 + 888) = &unk_1E97B0580;
          v40 = v135;
          v41 = v136;
          *(_QWORD *)(v39 + 896) = v135;
          *(_QWORD *)(v39 + 904) = v41;
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v131 = (DSPGraph::Graph **)(v39 + 896);
          v44 = DSPGraph::Graph::numInputs(v40);
          v149 = 0u;
          v150 = 0u;
          v147 = 0u;
          v148 = 0u;
          v146 = 0u;
          sub_1D44E0B14((_QWORD *)(v39 + 912), v44, &v146);
          v45 = DSPGraph::Graph::numOutputs(v135);
          v149 = 0u;
          v150 = 0u;
          v147 = 0u;
          v148 = 0u;
          v146 = 0u;
          sub_1D44E0B14((_QWORD *)(v39 + 936), v45, &v146);
          *(_QWORD *)(v39 + 1008) = 0;
          *(_OWORD *)(v39 + 976) = 0u;
          *(_OWORD *)(v39 + 992) = 0u;
          *(_OWORD *)(v39 + 960) = 0u;
          *(_BYTE *)(v39 + 1016) = 1;
          *(_DWORD *)(v39 + 1020) = 0;
          v47 = (char *)v135;
          v46 = v136;
          v144 = v135;
          v145 = v136;
          if (v136)
          {
            v48 = (unint64_t *)&v136->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          if (!v47)
            __assert_rtn("GraphBoxCommon", "DSPGraph_GraphBox.h", 149, "inGraph");
          v50 = (unsigned __int8 *)*v131;
          v51 = *((unsigned __int8 *)*v131 + 761);
          if (!*((_BYTE *)*v131 + 760) || !*((_BYTE *)*v131 + 761))
          {
            v52 = v50[762];
            DSPGraph::Graph::uninitialize((DSPGraph::Graph *)v50);
            DSPGraph::Graph::unconfigure(*v131);
            v53 = (DSPGraph::Box *)DSPGraph::Graph::in(*v131);
            DSPGraph::Box::sampleRate(v53);
            DSPGraph::Graph::setSliceDuration();
            if (v51)
              DSPGraph::Graph::configure(*v131);
            if (v52)
              DSPGraph::Graph::initialize(*v131);
          }
          if (!DSPGraph::Graph::numInputs((DSPGraph::Graph *)v47))
          {
            sub_1D44DA4C4(&v146, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
            sub_1D44DA4C4(&v139, "GraphBoxCommon");
            v120 = v47 + 408;
            if (v47[431] < 0)
              v120 = (_QWORD *)*v120;
            v121 = (*(uint64_t (**)(char *))(*(_QWORD *)v47 + 16))(v47);
            DSPGraph::strprintf((DSPGraph *)"%s %s graph must have at least one input bus.", v122, v120, v121);
            DSPGraph::ThrowException();
            goto LABEL_177;
          }
          v54 = DSPGraph::Graph::in(*v131);
          v55 = *(_QWORD *)(v54 + 88);
          if (*(_QWORD *)(v54 + 96) == v55)
          {
            sub_1D44DA4C4(&v146, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
            sub_1D44DA4C4(&v139, "out");
            v119 = (_QWORD *)(v54 + 32);
            if (*(char *)(v54 + 55) < 0)
              v119 = (_QWORD *)*v119;
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v118, v119, (uint64_t)(*(_QWORD *)(v54 + 96) - *(_QWORD *)(v54 + 88)) >> 5, 0);
            DSPGraph::ThrowException();
            goto LABEL_177;
          }
          v56 = 0;
          v57 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55) + 120);
          while (v56 < DSPGraph::Graph::numInputs((DSPGraph::Graph *)v47))
          {
            v58 = (DSPGraph::Box *)DSPGraph::Graph::in((DSPGraph::Graph *)v47);
            ++v56;
            if (DSPGraph::Box::sampleRate(v58) != v57)
            {
              sub_1D44DA4C4(&v146, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
              sub_1D44DA4C4(&v139, "GraphBoxCommon");
              v103 = v47 + 408;
              if (v47[431] < 0)
                v103 = (_QWORD *)*v103;
              v104 = (*(uint64_t (**)(char *))(*(_QWORD *)v47 + 16))(v47);
              DSPGraph::strprintf((DSPGraph *)"%s %s graph must have the same sample rate for all input busses to be used in a GraphBox", v105, v103, v104);
              DSPGraph::ThrowException();
              goto LABEL_177;
            }
          }
          if (DSPGraph::Graph::numOutputs(*v131))
          {
            v59 = DSPGraph::Graph::out(*v131);
            v60 = *(_QWORD *)(v59 + 64);
            if (*(_QWORD *)(v59 + 72) == v60)
            {
              sub_1D44DA4C4(&v146, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
              sub_1D44DA4C4(&v139, "in");
              v126 = (_QWORD *)(v59 + 32);
              if (*(char *)(v59 + 55) < 0)
                v126 = (_QWORD *)*v126;
              DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v125, v126, (uint64_t)(*(_QWORD *)(v59 + 72) - *(_QWORD *)(v59 + 64)) >> 5, 0);
              DSPGraph::ThrowException();
              goto LABEL_177;
            }
            v61 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60) + 120);
          }
          else
          {
            v61 = 0;
          }
          v74 = 0;
          while (v74 < DSPGraph::Graph::numOutputs((DSPGraph::Graph *)v47))
          {
            v75 = (DSPGraph::Box *)DSPGraph::Graph::out((DSPGraph::Graph *)v47);
            ++v74;
            if (v61 != DSPGraph::Box::sampleRate(v75))
            {
              sub_1D44DA4C4(&v146, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
              sub_1D44DA4C4(&v139, "GraphBoxCommon");
              v106 = v47 + 408;
              if (v47[431] < 0)
                v106 = (_QWORD *)*v106;
              v107 = (*(uint64_t (**)(char *))(*(_QWORD *)v47 + 16))(v47);
              DSPGraph::strprintf((DSPGraph *)"%s %s graph must have the same sample rate for all output busses to be used in a GraphBox", v108, v106, v107);
              DSPGraph::ThrowException();
              goto LABEL_177;
            }
          }
          if (v46)
          {
            v76 = (unint64_t *)&v46->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v9 + 8))(&v139, v9);
          v78 = (char *)(v139 + 408);
          if (*(char *)(v139 + 431) < 0)
            v78 = *(char **)v78;
          sub_1D44DA4C4(&v146, v78);
          v67 = DSPGraph::Graph::add();
          if (SBYTE7(v147) < 0)
            operator delete((void *)v146);
          v79 = v140;
          if (v140)
          {
            v80 = (unint64_t *)&v140->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v71 = v136;
          if (v136)
          {
            v82 = (unint64_t *)&v136->__shared_owners_;
            do
              v73 = __ldaxr(v82);
            while (__stlxr(v73 - 1, v82));
LABEL_103:
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
        }
        v83 = v138;
        if (v138)
        {
          v84 = (unint64_t *)&v138->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v9[5] = v67;
        if (!a2[5])
          __assert_rtn("processingBox", "SoundAnalysis_ProcessingNode.cpp", 48, "mProcessingBox");
        (*(void (**)(__int128 *__return_ptr))(*a2 + 24))(&v146);
        DSPGraph::Graph::connect();
        v86 = (std::__shared_weak_count *)a1[1];
        v132[0] = *a1;
        v132[1] = v86;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        sub_1D44DBE8C(v132, v9);
        if (v86)
        {
          v89 = (unint64_t *)&v86->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v8 = (_QWORD *)v8[1];
      }
      while (v8 != &v141);
    }
  }
  sub_1D44DB220(&v141);
  if (a2[4])
    return;
  if ((*(unsigned int (**)(_QWORD *))*a2)(a2))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a2 + 8))(&v146, a2);
    v91 = DSPGraph::Graph::numOutputs((DSPGraph::Graph *)v146);
    v92 = v91;
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
    if (!*((_QWORD *)&v146 + 1))
      goto LABEL_126;
    v94 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      if (!v92)
        return;
    }
    else
    {
LABEL_126:
      if (!v91)
        return;
    }
  }
  v96 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v96);
  *(_QWORD *)v96 = MEMORY[0x1E0CFFC28] + 16;
  sub_1D44DA4C4(&v146, "deadEnd");
  DSPGraph::Graph::add();
  if (SBYTE7(v147) < 0)
    operator delete((void *)v146);
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a2 + 24))(&v146, a2);
  if (!a2[5])
    __assert_rtn("processingBox", "SoundAnalysis_ProcessingNode.cpp", 48, "mProcessingBox");
  DSPGraph::Graph::connect();
}

void sub_1D44DD0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  sub_1D44DAAE4(v40 - 224);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44DD4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 == a1 + 64)
  {
    v3 = a1 + 64;
  }
  else
  {
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 16) + 8))(&v15, v3 + 16);
      v6 = *(_QWORD *)(a2 + 64);
      v5 = *(std::__shared_weak_count **)(a2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v9 = v15;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      else
      {
        v9 = v15;
      }
      v11 = v16;
      if (v16)
      {
        v12 = (unint64_t *)&v16->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v9 == v6)
        break;
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        return 0;
    }
  }
  if (v3 == v2)
    return 0;
  else
    return v3 + 16;
}

uint64_t sub_1D44DD608(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v6[6];
  _QWORD v7[6];

  v2 = a1 + 40;
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 == a1 + 40)
  {
    v3 = a1 + 40;
  }
  else
  {
    while (1)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 16) + 24))(v7, v3 + 16);
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v6, a2);
      if ((sub_1D44DBAC8((uint64_t)v7, (uint64_t)v6) & 1) != 0)
        break;
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        return 0;
    }
  }
  if (v3 == v2)
    return 0;
  else
    return v3 + 16;
}

_QWORD *sub_1D44DD6A0(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD v5[3];
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = a2;
  sub_1D44E2840(v5, (uint64_t)v6, 1);
  sub_1D44F814C(a1, (uint64_t)v5);
  result = sub_1D44DB220(v5);
  *(_QWORD *)(a2 + 8) = a1;
  return result;
}

void sub_1D44DD720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D44DB220((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D44DD73C(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *i;
  __int128 *v20;
  uint64_t v21;
  __int128 *v22;
  char v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *j;
  DSPGraph::Graph *v35;
  DSPGraph::Graph *v36;
  uint64_t *v37;
  _QWORD *v38;
  DSPGraph::Graph *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *k;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  _QWORD *v71;
  __int128 v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  BOOL v94;
  DSPGraph::Graph *v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109[2];
  uint64_t v110;
  _OWORD v111[3];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115[3];
  __int128 v116;
  __int128 v117;
  __int128 v118;

  if (!*(_DWORD *)(a1 + 248))
    __assert_rtn("setProcessingContexts", "SoundAnalysis_ProcessingTree.cpp", 256, "format().mBlockSize > 0");
  v109[0] = (uint64_t)v109;
  v109[1] = (uint64_t)v109;
  v110 = 0;
  v4 = (__int128 *)(a1 + 16);
  v5 = *(__int128 **)(a1 + 24);
  v6 = *(__int128 **)(a2 + 8);
  while (v5 != v4 && v6 != (__int128 *)a2)
  {
    if (*((_QWORD *)v6 + 2) == *((_QWORD *)v5 + 2))
    {
      if (v5 >= v6 || *((_QWORD *)v6 + 4) == *((_QWORD *)v5 + 4))
      {
        if (v6 < v5 && *((_QWORD *)v6 + 4) != *((_QWORD *)v5 + 4))
          goto LABEL_16;
LABEL_15:
        v8 = sub_1D44E28D0((uint64_t)v109, 0, 0, (_QWORD *)v5 + 2);
        v9 = v109[0];
        *v8 = v109[0];
        v8[1] = v109;
        *(_QWORD *)(v9 + 8) = v8;
        v109[0] = (uint64_t)v8;
        ++v110;
        v5 = (__int128 *)*((_QWORD *)v5 + 1);
        goto LABEL_16;
      }
LABEL_13:
      v5 = (__int128 *)*((_QWORD *)v5 + 1);
    }
    else
    {
      if (v5 < v6)
        goto LABEL_13;
      if (v6 >= v5)
        goto LABEL_15;
LABEL_16:
      v6 = (__int128 *)*((_QWORD *)v6 + 1);
    }
  }
  sub_1D44E2948(&v106, (uint64_t)v4);
  sub_1D44E2948(&v103, a2);
  v10 = v107;
  if (v107 != &v106)
  {
    while (1)
    {
      v11 = v10[2];
      v12 = (std::__shared_weak_count *)v10[3];
      v99 = v11;
      v100 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v15 = v10[4];
      v16 = (std::__shared_weak_count *)v10[5];
      v101 = v15;
      v102 = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      for (i = *(_QWORD **)(a1 + 96); ; i = (_QWORD *)i[1])
      {
        if (i == (_QWORD *)(a1 + 88))
          __assert_rtn("removeProcessingContext", "SoundAnalysis_ProcessingTree.cpp", 335, "requestProcessingNode");
        if (i[8] == v11 && i[10] == v15)
          break;
      }
      *(_QWORD *)&v116 = &v116;
      *((_QWORD *)&v116 + 1) = &v116;
      *(_QWORD *)&v117 = 0;
      v20 = *(__int128 **)(a1 + 24);
      if (v20 != v4)
        break;
LABEL_51:
      v29 = (uint64_t)(i + 2);
      sub_1D44DF520((uint64_t *)&v116);
      sub_1D44DE0A4((uint64_t *)a1, v29);
      if (v102)
      {
        v30 = &v102->__shared_owners_;
        do
          v31 = __ldaxr((unint64_t *)v30);
        while (__stlxr(v31 - 1, (unint64_t *)v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      if (v100)
      {
        v32 = &v100->__shared_owners_;
        do
          v33 = __ldaxr((unint64_t *)v32);
        while (__stlxr(v33 - 1, (unint64_t *)v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v10 = (uint64_t *)v10[1];
      if (v10 == &v106)
        goto LABEL_62;
    }
    v21 = 0;
    while (2)
    {
      if (*((_QWORD *)v20 + 2) != v11)
      {
        v22 = v20;
        goto LABEL_33;
      }
      v22 = (__int128 *)*((_QWORD *)v20 + 1);
      if (*((_QWORD *)v20 + 4) == v15)
      {
        while (v22 != v4)
        {
          if (*((_QWORD *)v22 + 2) != v11 || *((_QWORD *)v22 + 4) != v15)
          {
            v23 = 0;
            goto LABEL_42;
          }
          v22 = (__int128 *)*((_QWORD *)v22 + 1);
        }
        v23 = 1;
        v22 = v4;
LABEL_42:
        if (v20 != v22)
        {
          v24 = *(__int128 **)v22;
          if (&v116 != v4)
          {
            v25 = 1;
            if (v24 != v20)
            {
              v26 = v20;
              do
              {
                v26 = (__int128 *)*((_QWORD *)v26 + 1);
                ++v25;
              }
              while (v26 != v24);
            }
            *(_QWORD *)(a1 + 32) -= v25;
            v21 += v25;
            *(_QWORD *)&v117 = v21;
          }
          v27 = *(_QWORD *)v20;
          *(_QWORD *)(v27 + 8) = *((_QWORD *)v24 + 1);
          **((_QWORD **)v24 + 1) = v27;
          v28 = v116;
          *(_QWORD *)(v116 + 8) = v20;
          *(_QWORD *)v20 = v28;
          *(_QWORD *)&v116 = v24;
          *((_QWORD *)v24 + 1) = &v116;
        }
        if ((v23 & 1) == 0)
LABEL_33:
          v22 = (__int128 *)*((_QWORD *)v22 + 1);
      }
      v20 = v22;
      if (v22 == v4)
        goto LABEL_51;
      continue;
    }
  }
LABEL_62:
  sub_1D44DBB88((DSPGraph::Graph **)a1);
  for (j = *(_QWORD **)(a2 + 8); j != (_QWORD *)a2; j = (_QWORD *)j[1])
  {
    v35 = (DSPGraph::Graph *)j[2];
    if (v35)
      DSPGraph::Graph::reset(v35);
    v36 = (DSPGraph::Graph *)j[4];
    if (v36)
      DSPGraph::Graph::reset(v36);
  }
  v37 = v104;
  if (v104 != &v103)
  {
    v38 = (_QWORD *)(a1 + 88);
    do
    {
      v39 = (DSPGraph::Graph *)v37[2];
      v40 = (std::__shared_weak_count *)v37[3];
      v95 = v39;
      v96 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v44 = v37[4];
      v43 = (std::__shared_weak_count *)v37[5];
      v97 = v44;
      v98 = v43;
      if (v43)
      {
        v45 = (unint64_t *)&v43->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      for (k = *(_QWORD **)(a1 + 96); k != v38; k = (_QWORD *)k[1])
      {
        if (v39 == (DSPGraph::Graph *)k[8] && v44 == k[10])
          __assert_rtn("addProcessingContext", "SoundAnalysis_ProcessingTree.cpp", 183, "!findAnalyzerNodeForContext(processingContext)");
      }
      v48 = operator new(0x30uLL);
      *v48 = 0;
      v48[1] = 0;
      v48[2] = v39;
      v48[3] = v40;
      if (v40)
      {
        v49 = (unint64_t *)&v40->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v48[4] = v44;
      v48[5] = v43;
      if (v43)
      {
        v51 = (unint64_t *)&v43->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v53 = *(_QWORD *)(a1 + 16);
      *v48 = v53;
      v48[1] = v4;
      *(_QWORD *)(v53 + 8) = v48;
      *(_QWORD *)(a1 + 16) = v48;
      ++*(_QWORD *)(a1 + 32);
      v54 = operator new(0x60uLL);
      v55 = v54;
      *v54 = 0;
      v54[1] = 0;
      if (v40)
      {
        v56 = (unint64_t *)&v40->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      if (v43)
      {
        v58 = (unint64_t *)&v43->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v54[4] = v54 + 4;
      v54[5] = v54 + 4;
      v54[6] = 0;
      v54[7] = 0;
      v54[2] = off_1E97AF188;
      v54[3] = 0;
      v54[8] = v39;
      v54[9] = v40;
      if (v40)
      {
        v60 = (unint64_t *)&v40->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v54[10] = v44;
      v54[11] = v43;
      if (!v43)
        goto LABEL_102;
      v62 = (unint64_t *)&v43->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      do
        v64 = __ldaxr(v62);
      while (__stlxr(v64 - 1, v62));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
        if (v40)
        {
LABEL_103:
          v65 = (unint64_t *)&v40->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      else
      {
LABEL_102:
        if (v40)
          goto LABEL_103;
      }
      v67 = (uint64_t)(v55 + 2);
      v68 = *(_QWORD *)(a1 + 88);
      *v55 = v68;
      v55[1] = v38;
      *(_QWORD *)(v68 + 8) = v55;
      *(_QWORD *)(a1 + 88) = v55;
      ++*(_QWORD *)(a1 + 104);
      if (v55[10])
      {
        v69 = (_QWORD *)sub_1D44DD4F8(a1, (uint64_t)(v55 + 2));
        v70 = v69 == 0;
        if (!v69)
        {
          sub_1D44EEAE8(&v95, (uint64_t)&v116);
          v94 = DWORD2(v118) > 1;
          v81 = v55[10];
          v82 = (std::__shared_weak_count *)v55[11];
          *(_QWORD *)&v116 = v81;
          *((_QWORD *)&v116 + 1) = v82;
          if (v82)
          {
            v83 = (unint64_t *)&v82->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          v85 = operator new(0x58uLL);
          v86 = v85;
          v85[2] = off_1E97AF238;
          v69 = v85 + 2;
          *v85 = 0;
          v85[1] = 0;
          v116 = 0uLL;
          v85[3] = 0;
          v85[4] = v85 + 4;
          v85[5] = v85 + 4;
          v85[6] = 0;
          v85[7] = 0;
          v85[8] = v81;
          v85[9] = v82;
          if (v82)
          {
            v87 = (unint64_t *)&v82->__shared_owners_;
            v70 = 1;
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
            *((_BYTE *)v85 + 80) = v94;
            do
              v89 = __ldaxr(v87);
            while (__stlxr(v89 - 1, v87));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          else
          {
            v70 = 1;
            *((_BYTE *)v85 + 80) = v94;
          }
          v90 = *(_QWORD *)(a1 + 64);
          *v86 = v90;
          v86[1] = a1 + 64;
          *(_QWORD *)(v90 + 8) = v86;
          *(_QWORD *)(a1 + 64) = v86;
          ++*(_QWORD *)(a1 + 80);
          v91 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
          if (*((_QWORD *)&v116 + 1))
          {
            v92 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
        }
        sub_1D44DD6A0(v69, (uint64_t)(v55 + 2));
        v67 = (uint64_t)v69;
      }
      else
      {
        v70 = 0;
      }
      v71 = (_QWORD *)sub_1D44DD608(a1, v67);
      if (!v71)
      {
        v72 = *(_OWORD *)(a1 + 224);
        v112 = *(_OWORD *)(a1 + 208);
        v113 = v72;
        v114 = *(_OWORD *)(a1 + 240);
        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v67 + 16))(v111, v67);
        v73 = operator new(0xB0uLL);
        v71 = v73 + 2;
        *v73 = 0;
        v73[1] = 0;
        v117 = v113;
        v118 = v114;
        v115[0] = v111[0];
        v115[1] = v111[1];
        v115[2] = v111[2];
        v116 = v112;
        sub_1D44DABA8((uint64_t)(v73 + 2), &v116, v115);
        v74 = *(_QWORD *)(a1 + 40);
        *v73 = v74;
        v73[1] = a1 + 40;
        *(_QWORD *)(v74 + 8) = v73;
        *(_QWORD *)(a1 + 40) = v73;
        ++*(_QWORD *)(a1 + 56);
        sub_1D44DD6A0((_QWORD *)(a1 + 112), (uint64_t)(v73 + 2));
      }
      if (((v55[10] != 0) & ~v70) == 0)
        sub_1D44DD6A0(v71, v67);
      v75 = v98;
      if (v98)
      {
        v76 = (unint64_t *)&v98->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v96;
      if (v96)
      {
        v79 = (unint64_t *)&v96->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v37 = (uint64_t *)v37[1];
    }
    while (v37 != &v103);
  }
  if (v108 | v105)
    sub_1D44DBB88((DSPGraph::Graph **)a1);
  sub_1D44DF520(&v103);
  sub_1D44DF520(&v106);
  sub_1D44DF520(v109);
}

void sub_1D44DE014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_1D44DF520(&a27);
  sub_1D44DF520(&a30);
  _Unwind_Resume(a1);
}

void sub_1D44DE0A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a2)
    __assert_rtn("removeNodeRecursively", "SoundAnalysis_ProcessingTree.cpp", 296, "node");
  v4 = *(_QWORD *)(a2 + 8);
  v5 = (**(uint64_t (***)(uint64_t))a2)(a2);
  if (v5 == 1)
  {
    v16 = a1 + 5;
    v37 = (uint64_t)&v37;
    v38 = &v37;
    v39 = 0;
    v17 = (uint64_t *)a1[6];
    if (v17 != a1 + 5)
    {
      v18 = 0;
      do
      {
        v19 = (uint64_t *)v17[1];
        if (v17 + 2 == (uint64_t *)a2)
        {
          if (v19 != v16 && v17 == v19)
          {
            while (1)
              ;
          }
          if (v17 != v19)
          {
            v21 = *v19;
            if (&v37 != v16)
            {
              v22 = 1;
              if ((uint64_t *)v21 != v17)
              {
                v23 = v17;
                do
                {
                  v23 = (uint64_t *)v23[1];
                  ++v22;
                }
                while (v23 != (uint64_t *)v21);
              }
              a1[7] -= v22;
              v18 += v22;
              v39 = v18;
            }
            v24 = *v17;
            *(_QWORD *)(v24 + 8) = *(_QWORD *)(v21 + 8);
            **(_QWORD **)(v21 + 8) = v24;
            v25 = v37;
            *(_QWORD *)(v37 + 8) = v17;
            *v17 = v25;
            v37 = v21;
            *(_QWORD *)(v21 + 8) = &v37;
          }
          if (v19 == v16)
            break;
          v19 = (uint64_t *)v19[1];
        }
        v17 = v19;
      }
      while (v19 != v16);
    }
    sub_1D44DF4A8(&v37);
    goto LABEL_43;
  }
  if (v5 != 2)
  {
    if (v5 == 3)
    {
      v6 = a1 + 11;
      v37 = (uint64_t)&v37;
      v38 = &v37;
      v39 = 0;
      v7 = (uint64_t *)a1[12];
      if (v7 != a1 + 11)
      {
        v8 = 0;
        do
        {
          v9 = (uint64_t *)v7[1];
          if (v7 + 2 == (uint64_t *)a2)
          {
            if (v9 != v6 && v7 == v9)
            {
              while (1)
                ;
            }
            if (v7 != v9)
            {
              v11 = *v9;
              if (&v37 != v6)
              {
                v12 = 1;
                if ((uint64_t *)v11 != v7)
                {
                  v13 = v7;
                  do
                  {
                    v13 = (uint64_t *)v13[1];
                    ++v12;
                  }
                  while (v13 != (uint64_t *)v11);
                }
                a1[13] -= v12;
                v8 += v12;
                v39 = v8;
              }
              v14 = *v7;
              *(_QWORD *)(v14 + 8) = *(_QWORD *)(v11 + 8);
              **(_QWORD **)(v11 + 8) = v14;
              v15 = v37;
              *(_QWORD *)(v37 + 8) = v7;
              *v7 = v15;
              v37 = v11;
              *(_QWORD *)(v11 + 8) = &v37;
            }
            if (v9 == v6)
              break;
            v9 = (uint64_t *)v9[1];
          }
          v7 = v9;
        }
        while (v9 != v6);
      }
      sub_1D44DF4A8(&v37);
      if (!v4)
        return;
LABEL_44:
      v37 = a2;
      sub_1D44E2840(v36, (uint64_t)&v37, 1);
      sub_1D44F82CC(v4, (uint64_t)v36);
      sub_1D44DB220(v36);
      if (!*(_QWORD *)(v4 + 32))
        sub_1D44DE0A4(a1, v4);
      return;
    }
LABEL_43:
    if (!v4)
      return;
    goto LABEL_44;
  }
  v26 = a1 + 8;
  v37 = (uint64_t)&v37;
  v38 = &v37;
  v39 = 0;
  v27 = (uint64_t *)a1[9];
  if (v27 != a1 + 8)
  {
    v28 = 0;
    do
    {
      v29 = (uint64_t *)v27[1];
      if (v27 + 2 == (uint64_t *)a2)
      {
        if (v29 != v26 && v27 == v29)
        {
          while (1)
            ;
        }
        if (v27 != v29)
        {
          v31 = *v29;
          if (&v37 != v26)
          {
            v32 = 1;
            if ((uint64_t *)v31 != v27)
            {
              v33 = v27;
              do
              {
                v33 = (uint64_t *)v33[1];
                ++v32;
              }
              while (v33 != (uint64_t *)v31);
            }
            a1[10] -= v32;
            v28 += v32;
            v39 = v28;
          }
          v34 = *v27;
          *(_QWORD *)(v34 + 8) = *(_QWORD *)(v31 + 8);
          **(_QWORD **)(v31 + 8) = v34;
          v35 = v37;
          *(_QWORD *)(v37 + 8) = v27;
          *v27 = v35;
          v37 = v31;
          *(_QWORD *)(v31 + 8) = &v37;
        }
        if (v29 == v26)
          break;
        v29 = (uint64_t *)v29[1];
      }
      v27 = v29;
    }
    while (v29 != v26);
  }
  sub_1D44DF4A8(&v37);
  if (v4)
    goto LABEL_44;
}

void sub_1D44DE40C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D44DB220((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44DE428(_QWORD *a1, uint64_t a2, DSPGraph::Box *a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  char *v13;
  std::__shared_weak_count *v14;
  uint64_t *p_p;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v21;
  uint64_t (*v22)(void);
  char *v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BOOL4 v31;
  DSPGraph::Graph *v32;
  std::runtime_error *exception;
  DSPGraph::Graph **v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  DSPGraph::Graph *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *i;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  DSPGraph::Box *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  void *__p;
  std::__shared_weak_count *v71;
  unsigned __int8 v72;

  if (!a3)
    __assert_rtn("convertSampleTimeToRootSampleTime", "SoundAnalysis_ProcessingTree.cpp", 433, "box");
  v6 = *((_QWORD *)a3 + 2);
  v7 = sub_1D44DE938(*(_QWORD *)(v6 + 288));
  v8 = *(double *)(v6 + 256);
  v9 = sub_1D44DE938(*(_QWORD *)(v6 + 304));
  v10 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)a3 + 72))(a3);
  v11 = DSPGraph::Box::upstreamLatencyInTicks(a3);
  if (!*a1)
    __assert_rtn("findGraphBoxContainingBox", "SoundAnalysis_ProcessingTree.cpp", 389, "treeGraph");
  v65 = v11;
  v66 = v10;
  v67 = v9;
  v68 = v7;
  v69 = a1;
  v12 = *(uint64_t ***)(*a1 + 24);
  if (!v12)
    goto LABEL_47;
  while (1)
  {
    v13 = (char *)(*(uint64_t (**)(uint64_t *))(*v12[2] + 16))(v12[2]);
    sub_1D44DA4C4(&__p, v13);
    v14 = (std::__shared_weak_count *)v72;
    if ((v72 & 0x80u) != 0)
      v14 = v71;
    if (v14 == (std::__shared_weak_count *)17)
    {
      p_p = (uint64_t *)__p;
      if ((v72 & 0x80u) == 0)
        p_p = (uint64_t *)&__p;
      v16 = *p_p;
      v17 = p_p[1];
      v18 = *((unsigned __int8 *)p_p + 16);
      v21 = v16 == 0x74615269746C754DLL && v17 == 0x6F42687061724765 && v18 == 120;
      if (((char)v72 & 0x80000000) == 0)
      {
LABEL_21:
        if (v21)
          goto LABEL_22;
        goto LABEL_24;
      }
    }
    else
    {
      v21 = 0;
      if (((char)v72 & 0x80000000) == 0)
        goto LABEL_21;
    }
    operator delete(__p);
    if (v21)
    {
LABEL_22:
      v22 = *(uint64_t (**)(void))(*v12[2] + 728);
      goto LABEL_45;
    }
LABEL_24:
    v23 = (char *)(*(uint64_t (**)(uint64_t *))(*v12[2] + 16))(v12[2]);
    sub_1D44DA4C4(&__p, v23);
    v24 = (std::__shared_weak_count *)v72;
    if ((v72 & 0x80u) != 0)
      v24 = v71;
    if (v24 == (std::__shared_weak_count *)18)
      break;
    v31 = 0;
    if (((char)v72 & 0x80000000) == 0)
      goto LABEL_41;
LABEL_43:
    operator delete(__p);
    if (v31)
      goto LABEL_44;
LABEL_46:
    v12 = (uint64_t **)*v12;
    if (!v12)
      goto LABEL_47;
  }
  v25 = (uint64_t *)__p;
  if ((v72 & 0x80u) == 0)
    v25 = (uint64_t *)&__p;
  v26 = *v25;
  v27 = v25[1];
  v28 = *((unsigned __int16 *)v25 + 8);
  v31 = v26 == 0x6152656C676E6953 && v27 == 0x4268706172476574 && v28 == 30831;
  if ((char)v72 < 0)
    goto LABEL_43;
LABEL_41:
  if (!v31)
    goto LABEL_46;
LABEL_44:
  v22 = *(uint64_t (**)(void))(*v12[2] + 664);
LABEL_45:
  v32 = (DSPGraph::Graph *)v22();
  if (v32 != *((DSPGraph::Graph **)a3 + 1))
    goto LABEL_46;
  v34 = (DSPGraph::Graph **)v12[2];
  if (!v34)
  {
LABEL_47:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Couldn't find GraphBox containing graph");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF108, MEMORY[0x1E0DE4338]);
  }
  v35 = DSPGraph::Graph::in(v32);
  v36 = *(_QWORD *)(*(_QWORD *)(v35 + 8) + 704);
  if ((char *)(*((uint64_t (**)(DSPGraph::Graph **))*v34 + 2))(v34) == "MultiRateGraphBox")
  {
    v37 = (int *)v34 + 255;
  }
  else
  {
    if ((char *)(*((uint64_t (**)(DSPGraph::Graph **))*v34 + 2))(v34) != "SingleRateGraphBox")
      __assert_rtn("getCurrentInputSampleFromGraphBox", "SoundAnalysis_ProcessingTree.cpp", 428, "false");
    v37 = (int *)v34 + 227;
  }
  v38 = *v37;
  v39 = sub_1D44DE938(v36);
  v40 = sub_1D44DE938(*(_QWORD *)(*(_QWORD *)(v35 + 16) + 304));
  v41 = sub_1D44DE998(v68 + (a2 - (int)v8) * v67 - (v66 + v65), v39, v38, v40);
  v42 = v34[2];
  v43 = sub_1D44DE938(*((_QWORD *)v42 + 36));
  v44 = *((double *)v42 + 32);
  v45 = sub_1D44DE938(*((_QWORD *)v42 + 38));
  v46 = DSPGraph::Box::upstreamLatencyInTicks((DSPGraph::Box *)v34);
  v47 = (_QWORD *)v69[3];
  if (v47 != v69 + 2)
  {
    v48 = *((_QWORD *)a3 + 1);
    do
    {
      if (v47[2] == v48)
      {
        for (i = (_QWORD *)v69[12]; i != v69 + 11; i = (_QWORD *)i[1])
        {
          if (i[8] == v48)
          {
            v50 = v47[4];
            if (v50 == i[10])
            {
              v51 = (uint64_t)(i + 2);
              if (v50)
              {
                v52 = sub_1D44DD4F8((uint64_t)v69, (uint64_t)(i + 2));
                if (v52)
                  v51 = v52;
              }
              v53 = sub_1D44DD608((uint64_t)v69, v51);
              if (v53)
              {
                (*(void (**)(void **__return_ptr))(*(_QWORD *)v53 + 8))(&__p);
                v54 = (DSPGraph::Box *)DSPGraph::Graph::out((DSPGraph::Graph *)__p);
                v55 = DSPGraph::Box::upstreamLatencyInTicks(v54);
                v56 = v71;
                if (v71)
                {
                  p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                  do
                    v58 = __ldaxr(p_shared_owners);
                  while (__stlxr(v58 - 1, p_shared_owners));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                v46 -= v55;
              }
              goto LABEL_73;
            }
          }
        }
      }
      v47 = (_QWORD *)v47[1];
    }
    while (v47 != v69 + 2);
  }
LABEL_73:
  v59 = v43 + (v41 - (int)v44) * v45 - v46;
  v60 = DSPGraph::Graph::in(v34[1]);
  v61 = v69[37];
  v62 = sub_1D44DE938(*((_QWORD *)v34[1] + 88));
  v63 = sub_1D44DE938(*(_QWORD *)(*(_QWORD *)(v60 + 16) + 304));
  return sub_1D44DE998(v59, v62, v61, v63);
}

void sub_1D44DE914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1D44DAAE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44DE938(uint64_t result)
{
  std::runtime_error *exception;

  if (result < 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D44E273C(exception, "numerical cast overflow: could not retain value in conversion type");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF120, MEMORY[0x1E0DE4350]);
  }
  return result;
}

void sub_1D44DE984(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44DE998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::runtime_error *exception;

  if (a1 - a2 >= 0x80000000)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Tick delta too large");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF108, MEMORY[0x1E0DE4338]);
  }
  return (a1 - a2) / a4 + a3;
}

void sub_1D44DE9F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D44DEA0C(uint64_t *a1, const void **a2)
{
  uint64_t v2;
  const char *v5;
  size_t v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  const char *v13;
  void **v14;
  uint64_t *i;
  const char *v16;
  size_t v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  char *v21;
  std::string *v22;
  uint64_t *v23;
  __int128 v24;
  const char *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  DSPGraph::Graph *v34;
  const char *v35;
  std::string *v36;
  std::__shared_weak_count *size;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *j;
  const char *v44;
  size_t v45;
  size_t v46;
  std::string *v47;
  const void *v48;
  char *v49;
  std::string *v50;
  uint64_t *v51;
  __int128 v52;
  const char *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  DSPGraph::Graph *v62;
  const char *v63;
  std::string *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *k;
  const char *v72;
  size_t v73;
  size_t v74;
  std::string *v75;
  const void *v76;
  char *v77;
  std::string *v78;
  uint64_t *v79;
  __int128 v80;
  const char *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  DSPGraph::Graph *v90;
  const char *v91;
  std::string *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::logic_error *exception;
  void *__p[2];
  int64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;

  v2 = *a1;
  if (!*a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Processing tree graph is null");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF0C0, MEMORY[0x1E0DE42A0]);
  }
  v5 = (const char *)(v2 + 408);
  if (*(char *)(v2 + 431) < 0)
    v5 = *(const char **)v5;
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(v5);
  v8 = &v107;
  sub_1D44E2760((uint64_t)&v107, v6 + v7);
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v107.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    memmove(v8, v9, v6);
  }
  v10 = (char *)v8 + v6;
  if (v7)
    memmove(v10, v5, v7);
  v10[v7] = 0;
  v11 = std::string::append(&v107, ".dot", 4uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v101 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  v13 = (const char *)(*a1 + 408);
  if (*(char *)(*a1 + 431) < 0)
    v13 = *(const char **)v13;
  if (v101 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  DSPGraph::Graph::writeDotFile((DSPGraph::Graph *)*a1, v13, (const char *)v14);
  for (i = (uint64_t *)a1[6]; i != a1 + 5; i = (uint64_t *)i[1])
  {
    v16 = (const char *)(*a1 + 408);
    if (*(char *)(*a1 + 431) < 0)
      v16 = *(const char **)v16;
    if (*((char *)a2 + 23) >= 0)
      v17 = *((unsigned __int8 *)a2 + 23);
    else
      v17 = (size_t)a2[1];
    v18 = strlen(v16);
    sub_1D44E2760((uint64_t)&v104, v17 + v18);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v104;
    else
      v19 = (std::string *)v104.__r_.__value_.__r.__words[0];
    if (v17)
    {
      if (*((char *)a2 + 23) >= 0)
        v20 = a2;
      else
        v20 = *a2;
      memmove(v19, v20, v17);
    }
    v21 = (char *)v19 + v17;
    if (v18)
      memmove(v21, v16, v18);
    v21[v18] = 0;
    v22 = std::string::append(&v104, "_", 1uLL);
    v23 = i + 2;
    v24 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v24;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t *))(i[2] + 8))(&v102, i + 2);
    v25 = (const char *)(v102 + 408);
    if (*(char *)(v102 + 431) < 0)
      v25 = *(const char **)v25;
    v26 = strlen(v25);
    v27 = std::string::append(&v105, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v106, ".dot", 4uLL);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v107.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    v31 = v103;
    if (v103)
    {
      p_shared_owners = (unint64_t *)&v103->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    (*(void (**)(std::string *__return_ptr, uint64_t *))(*v23 + 8))(&v106, i + 2);
    v34 = (DSPGraph::Graph *)v106.__r_.__value_.__r.__words[0];
    (*(void (**)(std::string *__return_ptr, uint64_t *))(*v23 + 8))(&v105, i + 2);
    v35 = (const char *)(v105.__r_.__value_.__r.__words[0] + 408);
    if (*(char *)(v105.__r_.__value_.__r.__words[0] + 431) < 0)
      v35 = *(const char **)v35;
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v107;
    else
      v36 = (std::string *)v107.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::writeDotFile(v34, v35, (const char *)v36);
    size = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
    if (v105.__r_.__value_.__l.__size_)
    {
      v38 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v40 = (std::__shared_weak_count *)v106.__r_.__value_.__l.__size_;
    if (v106.__r_.__value_.__l.__size_)
    {
      v41 = (unint64_t *)(v106.__r_.__value_.__l.__size_ + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
  }
  for (j = (uint64_t *)a1[9]; j != a1 + 8; j = (uint64_t *)j[1])
  {
    v44 = (const char *)(*a1 + 408);
    if (*(char *)(*a1 + 431) < 0)
      v44 = *(const char **)v44;
    if (*((char *)a2 + 23) >= 0)
      v45 = *((unsigned __int8 *)a2 + 23);
    else
      v45 = (size_t)a2[1];
    v46 = strlen(v44);
    sub_1D44E2760((uint64_t)&v104, v45 + v46);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v104;
    else
      v47 = (std::string *)v104.__r_.__value_.__r.__words[0];
    if (v45)
    {
      if (*((char *)a2 + 23) >= 0)
        v48 = a2;
      else
        v48 = *a2;
      memmove(v47, v48, v45);
    }
    v49 = (char *)v47 + v45;
    if (v46)
      memmove(v49, v44, v46);
    v49[v46] = 0;
    v50 = std::string::append(&v104, "_", 1uLL);
    v51 = j + 2;
    v52 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v52;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t *))(j[2] + 8))(&v102, j + 2);
    v53 = (const char *)(v102 + 408);
    if (*(char *)(v102 + 431) < 0)
      v53 = *(const char **)v53;
    v54 = strlen(v53);
    v55 = std::string::append(&v105, v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v106, ".dot", 4uLL);
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v107.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    v59 = v103;
    if (v103)
    {
      v60 = (unint64_t *)&v103->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    (*(void (**)(std::string *__return_ptr, uint64_t *))(*v51 + 8))(&v106, j + 2);
    v62 = (DSPGraph::Graph *)v106.__r_.__value_.__r.__words[0];
    (*(void (**)(std::string *__return_ptr, uint64_t *))(*v51 + 8))(&v105, j + 2);
    v63 = (const char *)(v105.__r_.__value_.__r.__words[0] + 408);
    if (*(char *)(v105.__r_.__value_.__r.__words[0] + 431) < 0)
      v63 = *(const char **)v63;
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v107;
    else
      v64 = (std::string *)v107.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::writeDotFile(v62, v63, (const char *)v64);
    v65 = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
    if (v105.__r_.__value_.__l.__size_)
    {
      v66 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v68 = (std::__shared_weak_count *)v106.__r_.__value_.__l.__size_;
    if (v106.__r_.__value_.__l.__size_)
    {
      v69 = (unint64_t *)(v106.__r_.__value_.__l.__size_ + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
  }
  for (k = (uint64_t *)a1[12]; k != a1 + 11; k = (uint64_t *)k[1])
  {
    v72 = (const char *)(*a1 + 408);
    if (*(char *)(*a1 + 431) < 0)
      v72 = *(const char **)v72;
    if (*((char *)a2 + 23) >= 0)
      v73 = *((unsigned __int8 *)a2 + 23);
    else
      v73 = (size_t)a2[1];
    v74 = strlen(v72);
    sub_1D44E2760((uint64_t)&v104, v73 + v74);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = &v104;
    else
      v75 = (std::string *)v104.__r_.__value_.__r.__words[0];
    if (v73)
    {
      if (*((char *)a2 + 23) >= 0)
        v76 = a2;
      else
        v76 = *a2;
      memmove(v75, v76, v73);
    }
    v77 = (char *)v75 + v73;
    if (v74)
      memmove(v77, v72, v74);
    v77[v74] = 0;
    v78 = std::string::append(&v104, "_", 1uLL);
    v79 = k + 2;
    v80 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v80;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t *))(k[2] + 8))(&v102, k + 2);
    v81 = (const char *)(v102 + 408);
    if (*(char *)(v102 + 431) < 0)
      v81 = *(const char **)v81;
    v82 = strlen(v81);
    v83 = std::string::append(&v105, v81, v82);
    v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    v85 = std::string::append(&v106, ".dot", 4uLL);
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v107.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    v87 = v103;
    if (v103)
    {
      v88 = (unint64_t *)&v103->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    (*(void (**)(std::string *__return_ptr, uint64_t *))(*v79 + 8))(&v106, k + 2);
    v90 = (DSPGraph::Graph *)v106.__r_.__value_.__r.__words[0];
    (*(void (**)(std::string *__return_ptr, uint64_t *))(*v79 + 8))(&v105, k + 2);
    v91 = (const char *)(v105.__r_.__value_.__r.__words[0] + 408);
    if (*(char *)(v105.__r_.__value_.__r.__words[0] + 431) < 0)
      v91 = *(const char **)v91;
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v92 = &v107;
    else
      v92 = (std::string *)v107.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::writeDotFile(v90, v91, (const char *)v92);
    v93 = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
    if (v105.__r_.__value_.__l.__size_)
    {
      v94 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v96 = (std::__shared_weak_count *)v106.__r_.__value_.__l.__size_;
    if (v106.__r_.__value_.__l.__size_)
    {
      v97 = (unint64_t *)(v106.__r_.__value_.__l.__size_ + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101) < 0)
    operator delete(__p[0]);
}

void sub_1D44DF388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  __cxa_free_exception(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44DF498()
{
  return 0;
}

void sub_1D44DF4A0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_1D44DF4A8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        (*(void (**)(uint64_t *))(v3[2] + 32))(v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_1D44DF520(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_1D44DAAE4((uint64_t)(v3 + 4));
        sub_1D44DAAE4((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_1D44DF59C(uint64_t a1, uint64_t a2, int a3, char a4)
{
  int v4;
  int32x4_t v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  BOOL v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  BOOL v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  unsigned int v34;

  if ((a4 & 1) != 0)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(int32x4_t *)(a2 + 8);
    v5.i64[1] = *(_QWORD *)(a1 + 8);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) != 0)
      return 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 12);
  }
  if (*(_DWORD *)(a1 + 8) != 1819304813)
    return v4 == *(_DWORD *)(a2 + 12);
  v7 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) == 0)
    v7 = v4;
  if (a3)
    v8 = v7;
  else
    v8 = v7 & 0xFFFFFFBF;
  v9 = *(_DWORD *)(a1 + 24);
  if (v9)
  {
    v10 = *(_DWORD *)(a1 + 28);
    if ((v4 & 0x20) != 0)
      v11 = 1;
    else
      v11 = *(_DWORD *)(a1 + 28);
    if (v11)
    {
      v9 = 8 * (v9 / v11);
      v12 = *(_DWORD *)(a1 + 32);
      v13 = v8 | 8;
      v14 = v9 == v12;
      goto LABEL_21;
    }
    v9 = 0;
    v12 = *(_DWORD *)(a1 + 32);
    v13 = v8 | 8;
  }
  else
  {
    v13 = v8 | 8;
    v10 = *(_DWORD *)(a1 + 28);
    v12 = *(_DWORD *)(a1 + 32);
  }
  v14 = v12 == 0;
LABEL_21:
  if (v14)
    v8 = v13;
  v16 = (v12 & 7) == 0 && v9 == v12;
  v17 = v8 & 0xFFFFFFEF;
  if (!v16)
    v17 = v8;
  if ((v17 & 1) != 0)
    v17 &= ~4u;
  v18 = (v17 & 8) == 0 || v12 > 8;
  v19 = v17 & 2;
  if (v18)
    v19 = v17;
  if (v10 == 1)
    v20 = v19 & 0xFFFFFFDF;
  else
    v20 = v19;
  if (!v20)
    v20 = 0x80000000;
  v21 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) != 1819304813)
    return v20 == v21;
  v22 = v21 & 0x7FFFFFFF;
  if ((v21 & 0x7FFFFFFF) == 0)
    v22 = *(_DWORD *)(a2 + 12);
  if (a3)
    v23 = v22;
  else
    v23 = v22 & 0xFFFFFFBF;
  v24 = *(_DWORD *)(a2 + 24);
  if (!v24)
  {
    v28 = v23 | 8;
    v25 = *(_DWORD *)(a2 + 28);
    v27 = *(_DWORD *)(a2 + 32);
LABEL_54:
    v29 = v27 == 0;
    goto LABEL_55;
  }
  v25 = *(_DWORD *)(a2 + 28);
  if ((v21 & 0x20) != 0)
    v26 = 1;
  else
    v26 = *(_DWORD *)(a2 + 28);
  if (!v26)
  {
    v24 = 0;
    v27 = *(_DWORD *)(a2 + 32);
    v28 = v23 | 8;
    goto LABEL_54;
  }
  v24 = 8 * (v24 / v26);
  v27 = *(_DWORD *)(a2 + 32);
  v28 = v23 | 8;
  v29 = v24 == v27;
LABEL_55:
  if (v29)
    v23 = v28;
  v30 = (v27 & 7) == 0 && v24 == v27;
  v31 = v23 & 0xFFFFFFEF;
  if (!v30)
    v31 = v23;
  if ((v31 & 1) != 0)
    v31 &= ~4u;
  v32 = (v31 & 8) == 0 || v27 > 8;
  v33 = v31 & 2;
  if (v32)
    v33 = v31;
  if (v25 == 1)
    v34 = v33 & 0xFFFFFFDF;
  else
    v34 = v33;
  if (v34)
    v21 = v34;
  else
    v21 = 0x80000000;
  return v20 == v21;
}

void sub_1D44DF758()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, (struct type_info *)&unk_1E97AF138, MEMORY[0x1E0DE4390]);
}

uint64_t sub_1D44DF780(DSPGraph::Graph *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  const char *v4;
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD v7[3];

  v1 = DSPGraph::Graph::in(a1);
  v2 = *(_QWORD *)(v1 + 88);
  if (*(_QWORD *)(v1 + 96) != v2)
    return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 40);
  sub_1D44DA4C4(v7, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v6, "out");
  v5 = (_QWORD *)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    v5 = (_QWORD *)*v5;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v4, v5, (uint64_t)(*(_QWORD *)(v1 + 96) - *(_QWORD *)(v1 + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44DF83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44DF888(DSPGraph::Graph *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  const char *v4;
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD v7[3];

  v1 = DSPGraph::Graph::out(a1);
  v2 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v1 + 72) != v2)
    return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 40);
  sub_1D44DA4C4(v7, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v6, "in");
  v5 = (_QWORD *)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    v5 = (_QWORD *)*v5;
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v4, v5, (uint64_t)(*(_QWORD *)(v1 + 72) - *(_QWORD *)(v1 + 64)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44DF944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1D44DF994(uint64_t a1)
{
  sub_1D44E0C40(a1);
  JUMPOUT(0x1D825DA8CLL);
}

const char *sub_1D44DF9B8()
{
  return "MultiRateGraphBox";
}

uint64_t sub_1D44DF9C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;

  result = DSPGraph::Box::print();
  if ((int)a3 >= 2)
  {
    DSPGraph::printi();
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 896) + 24))(*(_QWORD *)(a1 + 896), a2, a3, (a4 + 4));
  }
  return result;
}

uint64_t sub_1D44DFA54(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 712))(a1);
}

unint64_t sub_1D44DFA60(uint64_t a1)
{
  unsigned int v2;
  unint64_t v3;
  DSPGraph::Box *v4;
  unint64_t v5;

  if (DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 896)))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = (DSPGraph::Box *)DSPGraph::Graph::out(*(DSPGraph::Graph **)(a1 + 896));
      v5 = DSPGraph::Box::totalLatencyInTicks(v4);
      if (v3 <= v5)
        v3 = v5;
      ++v2;
    }
    while (v2 < DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 896)));
  }
  else
  {
    v3 = 0;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 696) * v3 / *(_QWORD *)(*(_QWORD *)(a1 + 896) + 696);
}

uint64_t sub_1D44DFAE4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];

  if (!(a4 | a3))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 40))(*(_QWORD *)(a1 + 896));
  sub_1D44DA4C4(v7, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
  sub_1D44DA4C4(v6, "setParameter");
  sub_1D44DA4C4(v5, "DSPGraph parameters must have global scope and master element.");
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44DFB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44DFBB4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];

  if (!(a4 | a3))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 48))(*(_QWORD *)(a1 + 896));
  sub_1D44DA4C4(v7, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
  sub_1D44DA4C4(v6, "getParameter");
  sub_1D44DA4C4(v5, "DSPGraph parameters must have global scope and master element.");
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44DFC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44DFC84@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  if (!a2)
    return DSPGraph::Graph::getParameterList(*(DSPGraph::Graph **)(result + 896));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

double sub_1D44DFC9C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 104) = 1;
  return result;
}

uint64_t sub_1D44DFCBC(DSPGraph::Graph **a1, int a2)
{
  uint64_t result;
  int v4;
  DSPGraph::Box *v5;

  result = (uint64_t)a1[112];
  if (*(_DWORD *)(result + 688) != a2)
  {
    v4 = *(unsigned __int8 *)(result + 762);
    if (*(_BYTE *)(result + 762))
    {
      DSPGraph::Graph::uninitialize((DSPGraph::Graph *)result);
      result = (uint64_t)a1[112];
    }
    DSPGraph::Graph::unconfigure((DSPGraph::Graph *)result);
    v5 = (DSPGraph::Box *)DSPGraph::Graph::in(a1[112]);
    DSPGraph::Box::sampleRate(v5);
    (*((void (**)(DSPGraph::Graph **))*a1 + 16))(a1);
    DSPGraph::Graph::setSliceDuration();
    result = DSPGraph::Graph::configure(a1[112]);
    if (v4)
      return DSPGraph::Graph::initialize(a1[112]);
  }
  return result;
}

DSPGraph::Graph *sub_1D44DFD68(uint64_t a1, int a2)
{
  DSPGraph::Graph *result;
  int v4;
  DSPGraph::Box *v5;

  result = *(DSPGraph::Graph **)(a1 + 896);
  if ((((*((_BYTE *)result + 760) != 0) ^ a2) & 1) == 0)
  {
    v4 = *((unsigned __int8 *)result + 762);
    if (*((_BYTE *)result + 762))
    {
      DSPGraph::Graph::uninitialize(result);
      result = *(DSPGraph::Graph **)(a1 + 896);
    }
    DSPGraph::Graph::unconfigure(result);
    v5 = (DSPGraph::Box *)DSPGraph::Graph::in(*(DSPGraph::Graph **)(a1 + 896));
    DSPGraph::Box::sampleRate(v5);
    DSPGraph::Graph::setSliceDuration();
    result = (DSPGraph::Graph *)DSPGraph::Graph::configure(*(DSPGraph::Graph **)(a1 + 896));
    if (v4)
      return (DSPGraph::Graph *)DSPGraph::Graph::initialize(*(DSPGraph::Graph **)(a1 + 896));
  }
  return result;
}

BOOL sub_1D44DFE08(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 896) + 760) == 0;
}

double sub_1D44DFE1C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 16) = 0;
  result = *(double *)"xfuapraexoba";
  *(_OWORD *)a1 = *(_OWORD *)"xfuapraexoba";
  return result;
}

uint64_t sub_1D44DFE38(uint64_t a1)
{
  uint64_t v1;
  DSPGraph::Box *v2;
  int v3;
  DSPGraph::Box *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD v18[3];

  v1 = a1;
  if (!DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 896)))
    return 0;
  v2 = (DSPGraph::Box *)DSPGraph::Graph::in(*(DSPGraph::Graph **)(v1 + 896));
  v3 = DSPGraph::Box::sampleRate(v2);
  v4 = (DSPGraph::Box *)DSPGraph::Graph::out(*(DSPGraph::Graph **)(v1 + 896));
  if (v3 != DSPGraph::Box::sampleRate(v4))
    return v1;
  v5 = DSPGraph::Graph::in(*(DSPGraph::Graph **)(v1 + 896));
  v6 = *(_QWORD *)(v5 + 88);
  if (*(_QWORD *)(v5 + 96) == v6)
  {
    v11 = v5;
    sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v17, "out");
    v13 = (_QWORD *)(v11 + 32);
    if (*(char *)(v11 + 55) < 0)
      v13 = (_QWORD *)*v13;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v12, v13, (uint64_t)(*(_QWORD *)(v11 + 96) - *(_QWORD *)(v11 + 88)) >> 5, 0);
    result = DSPGraph::ThrowException();
  }
  else
  {
    v7 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) + 120) + 40);
    v8 = DSPGraph::Graph::out(*(DSPGraph::Graph **)(v1 + 896));
    v9 = *(_QWORD *)(v8 + 64);
    if (*(_QWORD *)(v8 + 72) != v9)
    {
      if (v7 == *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 40))
        return 0;
      return v1;
    }
    v14 = v8;
    sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v17, "in");
    v16 = (_QWORD *)(v14 + 32);
    if (*(char *)(v14 + 55) < 0)
      v16 = (_QWORD *)*v16;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v15, v16, (uint64_t)(*(_QWORD *)(v14 + 72) - *(_QWORD *)(v14 + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
  }
  __break(1u);
  return result;
}

void sub_1D44DFFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E0054(uint64_t a1)
{
  uint64_t v1;
  DSPGraph::Box *v2;
  int v3;
  DSPGraph::Box *v4;

  v1 = a1;
  if (!DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 896)))
    return 0;
  v2 = (DSPGraph::Box *)DSPGraph::Graph::in(*(DSPGraph::Graph **)(v1 + 896));
  v3 = DSPGraph::Box::sampleRate(v2);
  v4 = (DSPGraph::Box *)DSPGraph::Graph::out(*(DSPGraph::Graph **)(v1 + 896));
  if (v3 == DSPGraph::Box::sampleRate(v4))
    return 0;
  return v1;
}

uint64_t sub_1D44E00B0()
{
  return 0;
}

BOOL sub_1D44E00B8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 776) == 0;
}

uint64_t sub_1D44E00C8(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  DSPGraph::Buffer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  const char *v19;
  _QWORD *v20;
  const char *v21;
  _QWORD *v22;
  _BYTE v23[16];
  _QWORD v24[3];
  _QWORD v25[3];

  if (a2)
  {
    v3 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 64))(result))
    {
      v4 = *(_QWORD *)(v3 + 64);
      if (*(_QWORD *)(v3 + 72) == v4)
      {
        sub_1D44DA4C4(v25, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v24, "in");
        v20 = (_QWORD *)(v3 + 32);
        if (*(char *)(v3 + 55) < 0)
          v20 = (_QWORD *)*v20;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v19, v20, (uint64_t)(*(_QWORD *)(v3 + 72) - *(_QWORD *)(v3 + 64)) >> 5, 0);
        result = DSPGraph::ThrowException();
        goto LABEL_31;
      }
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      v6 = *(_QWORD *)(v3 + 88);
      if (*(_QWORD *)(v3 + 96) == v6)
      {
        sub_1D44DA4C4(v25, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v24, "out");
        v22 = (_QWORD *)(v3 + 32);
        if (*(char *)(v3 + 55) < 0)
          v22 = (_QWORD *)*v22;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v21, v22, (uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 5, 0);
        result = DSPGraph::ThrowException();
        goto LABEL_31;
      }
      v7 = *(DSPGraph::Buffer **)(v5 + 56);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      if (*(DSPGraph::Buffer **)(v8 + 56) != v7)
      {
        DSPGraph::Buffer::copyFrom(*(DSPGraph::Buffer **)(v8 + 56), v7);
        DSPGraph::Buffer::copyTimeFrom();
      }
      sub_1D44E0D04(v3, a2);
      v9 = *(_QWORD *)(v3 + 912);
      if (*(_QWORD *)(v3 + 920) == v9)
        goto LABEL_20;
      *(_DWORD *)(v3 + 1020) = (int)*(double *)(v9 + 8);
      if (*(_QWORD *)(v3 + 944) == *(_QWORD *)(v3 + 936))
        goto LABEL_20;
      result = DSPGraph::Graph::processInPlace();
    }
    else
    {
      sub_1D44E0D04(v3, a2);
      v10 = *(_QWORD *)(v3 + 912);
      if (*(_QWORD *)(v3 + 920) == v10)
        goto LABEL_20;
      *(_DWORD *)(v3 + 1020) = (int)*(double *)(v10 + 8);
      result = DSPGraph::Graph::processMultiple();
    }
    *(_DWORD *)(v3 + 1020) += a2;
    if (*(_QWORD *)(v3 + 944) == *(_QWORD *)(v3 + 936))
      return result;
    DSPGraph::SimpleABL::SimpleABL((DSPGraph::SimpleABL *)v23, (AudioBufferList *)(*(_QWORD *)(v3 + 960) + 24));
    v12 = *(_DWORD **)(v3 + 936);
    if (*(_DWORD **)(v3 + 944) == v12)
      sub_1D44E1450();
    v13 = *(_QWORD *)(v3 + 88);
    if (*(_QWORD *)(v3 + 96) != v13)
    {
      LODWORD(v11) = *v12;
      v14 = (double)v11;
      LODWORD(v15) = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13) + 120)
                               + 20);
      if (vabdd_f64(floor(v14 / (double)v15), v14 / (double)v15) >= 0.001)
        __assert_rtn("process", "DSPGraph_GraphBox.h", 348, "isIntegral(numPacketsToWrite)");
      DSPGraph::RingBuffer::write();
      DSPGraph::SimpleABL::~SimpleABL((DSPGraph::SimpleABL *)v23);
      v16 = *(_QWORD *)(v3 + 936);
      if (*(_QWORD *)(v3 + 944) != v16)
        return DSPGraph::Box::propagateFlagsAndTimeStamp((DSPGraph::Box *)v3, *(unsigned int *)(v16 + 4), (const AudioTimeStamp *)(v16 + 8));
LABEL_20:
      sub_1D44E1450();
    }
    sub_1D44DA4C4(v25, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v24, "out");
    v18 = (_QWORD *)(v3 + 32);
    if (*(char *)(v3 + 55) < 0)
      v18 = (_QWORD *)*v18;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v17, v18, (uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 5, 0);
    result = DSPGraph::ThrowException();
LABEL_31:
    __break(1u);
  }
  return result;
}

void sub_1D44E0430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  DSPGraph::SimpleABL::~SimpleABL((DSPGraph::SimpleABL *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44E04E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  const char *v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD v28[3];

  DSPGraph::RingBufferBox::initialize((DSPGraph::RingBufferBox *)a1);
  if (!DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 896)))
    return DSPGraph::Graph::initialize(*(DSPGraph::Graph **)(a1 + 896));
  v2 = DSPGraph::Graph::out(*(DSPGraph::Graph **)(a1 + 896));
  v3 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v2 + 72) == v3)
  {
    v21 = v2;
    sub_1D44DA4C4(&v24, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v28, "in");
    v23 = (_QWORD *)(v21 + 32);
    if (*(char *)(v21 + 55) < 0)
      v23 = (_QWORD *)*v23;
  }
  else
  {
    v4 = *(__int128 **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 120);
    v5 = *((_QWORD *)v4 + 4);
    v6 = v4[1];
    v24 = *v4;
    v25 = v6;
    v26 = v5;
    v7 = sub_1D44E14D8((uint64_t)"", (uint64_t)&v24);
    v28[0] = 0;
    v8 = *(_QWORD **)(a1 + 960);
    *(_QWORD *)(a1 + 960) = v7;
    if (v8)
    {
      sub_1D44E0BFC(a1 + 960, v8);
      v9 = (_QWORD *)v28[0];
      v28[0] = 0;
      if (v9)
        sub_1D44E0BFC((int)v28, v9);
    }
    v10 = DSPGraph::Graph::out(*(DSPGraph::Graph **)(a1 + 896));
    v11 = *(_QWORD *)(v10 + 64);
    if (*(_QWORD *)(v10 + 72) == v11)
    {
      v21 = v10;
      sub_1D44DA4C4(v28, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v27, "in");
      v23 = (_QWORD *)(v21 + 32);
      if (*(char *)(v21 + 55) < 0)
        v23 = (_QWORD *)*v23;
    }
    else
    {
      v12 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11) + 120);
      v13 = *(_DWORD *)(v12 + 8);
      v14 = v13 == 1718773105 || v13 == 1819304813;
      if (!v14 && *(_DWORD *)(v12 + 16))
      {
        v18 = v25;
        goto LABEL_16;
      }
      v15 = DSPGraph::Graph::out(*(DSPGraph::Graph **)(a1 + 896));
      v16 = *(_QWORD *)(v15 + 64);
      if (*(_QWORD *)(v15 + 72) != v16)
      {
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
        v18 = DWORD2(v25) * *(_DWORD *)(*(_QWORD *)(v17 + 120) + 40);
LABEL_16:
        v19 = DSPGraph::Graph::out(*(DSPGraph::Graph **)(a1 + 896));
        sub_1D44E4C7C(*(_QWORD *)(a1 + 960), *(_DWORD *)(*(_QWORD *)(v19 + 16) + 276) * v18);
        return DSPGraph::Graph::initialize(*(DSPGraph::Graph **)(a1 + 896));
      }
      v21 = v15;
      sub_1D44DA4C4(v28, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v27, "in");
      v23 = (_QWORD *)(v21 + 32);
      if (*(char *)(v21 + 55) < 0)
        v23 = (_QWORD *)*v23;
    }
  }
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v22, v23, (uint64_t)(*(_QWORD *)(v21 + 72) - *(_QWORD *)(v21 + 64)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44E07C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E085C(uint64_t a1)
{
  uint64_t result;

  result = DSPGraph::RingBufferBox::uninitialize((DSPGraph::RingBufferBox *)a1);
  if (!*(_BYTE *)(a1 + 1016))
    return DSPGraph::Graph::uninitialize(*(DSPGraph::Graph **)(a1 + 896));
  return result;
}

uint64_t sub_1D44E0894(DSPGraph::Graph **a1)
{
  DSPGraph::RingBufferBox::reset((DSPGraph::RingBufferBox *)a1);
  return DSPGraph::Graph::reset(a1[112]);
}

uint64_t sub_1D44E08B8()
{
  return 0;
}

uint64_t sub_1D44E08C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  const char *v5;
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD v8[3];

  v3 = a1 + 88;
  v2 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(v3 + 8) != v2)
    return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 28);
  sub_1D44DA4C4(v8, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v7, "out");
  v6 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v6 = (_QWORD *)*v6;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44E0978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E09C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  const char *v5;
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD v8[3];

  v3 = a1 + 88;
  v2 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(v3 + 8) != v2)
    return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 16);
  sub_1D44DA4C4(v8, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v7, "out");
  v6 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v6 = (_QWORD *)*v6;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44E0A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E0AD0(DSPGraph::RingBufferBox *this)
{
  return DSPGraph::RingBufferBox::configureRingBuffer(this);
}

uint64_t sub_1D44E0AD8()
{
  return 1;
}

uint64_t sub_1D44E0AE0()
{
  return 0;
}

uint64_t sub_1D44E0AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 896);
  result = v1 + 408;
  if (*(char *)(v1 + 431) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_1D44E0B04(uint64_t a1)
{
  return *(_QWORD *)(a1 + 896);
}

uint64_t sub_1D44E0B0C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_1D44E0B14(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = 5 * a2;
    v6 = 80 * a2;
    v7 = operator new(80 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[v5];
    a1[2] = v8;
    do
    {
      v9 = a3[3];
      v7[2] = a3[2];
      v7[3] = v9;
      v7[4] = a3[4];
      v10 = a3[1];
      *v7 = *a3;
      v7[1] = v10;
      v7 += 5;
      v6 -= 80;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_1D44E0B8C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        DSPGraph::SimpleABL::~SimpleABL((DSPGraph::SimpleABL *)(v4 - 16));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D44E0BFC(int a1, _QWORD *__p)
{
  uint64_t v3;

  if (__p)
  {
    v3 = __p[1];
    if (v3)
      MEMORY[0x1D825DA74](v3, 0x1000C8077774924);
    operator delete(__p);
  }
}

void sub_1D44E0C40(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)a1 = &off_1E97B0290;
  *(_QWORD *)(a1 + 888) = &unk_1E97B0580;
  if (!*(_BYTE *)(a1 + 1016))
    DSPGraph::Graph::uninitialize(*(DSPGraph::Graph **)(a1 + 896));
  v2 = *(void **)(a1 + 992);
  if (v2)
  {
    *(_QWORD *)(a1 + 1000) = v2;
    operator delete(v2);
  }
  v6 = (void **)(a1 + 968);
  sub_1D44E0B8C(&v6);
  v3 = *(_QWORD **)(a1 + 960);
  *(_QWORD *)(a1 + 960) = 0;
  if (v3)
    sub_1D44E0BFC(a1 + 960, v3);
  v4 = *(void **)(a1 + 936);
  if (v4)
  {
    *(_QWORD *)(a1 + 944) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 912);
  if (v5)
  {
    *(_QWORD *)(a1 + 920) = v5;
    operator delete(v5);
  }
  sub_1D44DAAE4(a1 + 896);
  *(_QWORD *)a1 = MEMORY[0x1E0CFFC38] + 16;
  DSPGraph::RingBuffer::~RingBuffer((DSPGraph::RingBuffer *)(a1 + 808));
  DSPGraph::Box::~Box((DSPGraph::Box *)a1);
}

uint64_t sub_1D44E0D04(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  DSPGraph::Box *v13;
  _DWORD *v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  const char *v41;
  _QWORD *v42;
  const char *v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[3];

  if (DSPGraph::Graph::numInputs(*(DSPGraph::Graph **)(a1 + 896)))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      if (v6 >= (*(_QWORD *)(a1 + 72) - v7) >> 5)
        break;
      v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + v5) + 40))(v7 + v5) + 56);
      v9 = *(_QWORD *)(v8 + 80);
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 256);
      v10 = *(_DWORD *)(v8 + 72);
      v45 = *(_OWORD *)(v8 + 8);
      v46 = *(_OWORD *)(v8 + 24);
      v47 = *(_OWORD *)(v8 + 40);
      v48 = *(_OWORD *)(v8 + 56);
      v11 = *(_QWORD *)(a1 + 912);
      if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 920) - v11) >> 4) <= v6)
        goto LABEL_37;
      v12 = v11 + v4;
      *(_DWORD *)v12 = a2;
      *(_DWORD *)(v12 + 4) = v10;
      *(_OWORD *)(v12 + 8) = v45;
      *(_OWORD *)(v12 + 24) = v46;
      *(_OWORD *)(v12 + 40) = v47;
      *(_OWORD *)(v12 + 56) = v48;
      *(_QWORD *)(v12 + 72) = v9;
      ++v6;
      v5 += 32;
      v4 += 80;
      if (v6 >= DSPGraph::Graph::numInputs(*(DSPGraph::Graph **)(a1 + 896)))
        goto LABEL_6;
    }
    sub_1D44DA4C4(&v45, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v49, "in");
    v44 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v44 = (_QWORD *)*v44;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v43, v44, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, v6);
    result = DSPGraph::ThrowException();
    goto LABEL_56;
  }
LABEL_6:
  v13 = (DSPGraph::Box *)DSPGraph::Graph::in(*(DSPGraph::Graph **)(a1 + 896));
  DSPGraph::Box::sampleRate(v13);
  DSPGraph::Graph::preflight();
  v14 = *(_DWORD **)(a1 + 912);
  if (*(_DWORD **)(a1 + 920) == v14)
LABEL_37:
    sub_1D44E1450();
  if (*v14 != a2)
    __assert_rtn("prepareGraphIOData", "DSPGraph_GraphBox.h", 279, "mGraphIODataIn.at(0).mNumFrames == inNumFrames");
  result = DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 896));
  if ((_DWORD)result)
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 88);
      if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v17) >> 5))
      {
        sub_1D44DA4C4(&v45, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v49, "out");
        v42 = (_QWORD *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0)
          v42 = (_QWORD *)*v42;
        goto LABEL_55;
      }
      v18 = *(_DWORD **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v17 + 32 * v16) + 40))(v17 + 32 * v16)
                                   + 56)
                       + 80);
      if (*v18)
        break;
LABEL_31:
      v40 = *(_QWORD *)(a1 + 936);
      if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 944) - v40) >> 4) <= v16)
        goto LABEL_37;
      *(_QWORD *)(v40 + 80 * v16++ + 72) = *(_QWORD *)(a1 + 960) + 24;
      result = DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 896));
      if (v16 >= result)
        return result;
    }
    v19 = 0;
    v20 = 36;
    while (1)
    {
      v21 = *(_QWORD *)(a1 + 88);
      if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v21) >> 5))
        break;
      v22 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v21 + 32 * v16) + 40))(v21 + 32 * v16)
                      + 120);
      v24 = *(_DWORD *)(v22 + 8);
      v25 = v24 == 1718773105 || v24 == 1819304813;
      if (v25 || !*(_DWORD *)(v22 + 16))
      {
        v26 = *(_QWORD *)(a1 + 88);
        if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v26) >> 5))
        {
          sub_1D44DA4C4(&v45, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          sub_1D44DA4C4(v49, "out");
          v42 = (_QWORD *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0)
            v42 = (_QWORD *)*v42;
          goto LABEL_55;
        }
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 + 32 * v16) + 40))(v26 + 32 * v16);
        v28 = *(_QWORD *)(a1 + 936);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 944) - v28) >> 4) <= v16)
          goto LABEL_37;
        v29 = *(_DWORD *)(v28 + 80 * v16) * *(_DWORD *)(*(_QWORD *)(v27 + 120) + 24);
        v30 = *(_QWORD *)(a1 + 960);
        if (v29 > *(_DWORD *)(v30 + 16))
          __assert_rtn("prepareGraphIOData", "DSPGraph_GraphBox.h", 305, "outNumBytes <= mOutBufferList->GetCapacityBytes()");
      }
      else
      {
        v31 = *(_DWORD **)(a1 + 936);
        if (*(_DWORD **)(a1 + 944) == v31)
          goto LABEL_37;
        v32 = *(_QWORD *)(a1 + 88);
        if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v32) >> 5))
        {
          sub_1D44DA4C4(&v45, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          sub_1D44DA4C4(v49, "out");
          v42 = (_QWORD *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0)
            v42 = (_QWORD *)*v42;
          goto LABEL_55;
        }
        LODWORD(v23) = *v31;
        v33 = (double)v23;
        LODWORD(v34) = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v32 + 32 * v16) + 40))(v32 + 32 * v16)
                                             + 120)
                                 + 20);
        v35 = v33 / (double)v34;
        if (vabdd_f64(floor(v35), v35) >= 0.001)
          __assert_rtn("prepareGraphIOData", "DSPGraph_GraphBox.h", 288, "isIntegral(numPacketsOut)");
        v36 = *(_QWORD *)(a1 + 88);
        if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v36) >> 5))
        {
          sub_1D44DA4C4(&v45, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          sub_1D44DA4C4(v49, "out");
          v42 = (_QWORD *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0)
            v42 = (_QWORD *)*v42;
          goto LABEL_55;
        }
        LODWORD(v37) = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 32 * v16) + 40))(v36 + 32 * v16)
                                             + 120)
                                 + 16);
        v38 = v35 * (double)v37;
        v30 = *(_QWORD *)(a1 + 960);
        LODWORD(v39) = *(_DWORD *)(v30 + 16);
        if (v38 > (double)v39)
          __assert_rtn("prepareGraphIOData", "DSPGraph_GraphBox.h", 294, "outNumBytes <= mOutBufferList->GetCapacityBytes()");
        v29 = v38;
      }
      *(_DWORD *)(v30 + v20) = v29;
      ++v19;
      v20 += 16;
      if (v19 >= *v18)
        goto LABEL_31;
    }
    sub_1D44DA4C4(&v45, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v49, "out");
    v42 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v42 = (_QWORD *)*v42;
LABEL_55:
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v41, v42, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, v16);
    result = DSPGraph::ThrowException();
LABEL_56:
    __break(1u);
  }
  return result;
}

void sub_1D44E13C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_1D44E1450()
{
  sub_1D44E1464("vector");
}

void sub_1D44E1464(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1D44E14B4(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E97AF0F0, MEMORY[0x1E0DE42E0]);
}

void sub_1D44E14A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1D44E14B4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

_QWORD *sub_1D44E14D8(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  int v5;
  _QWORD *result;
  char *v7;

  v3 = *(_DWORD *)(a2 + 12);
  if ((v3 & 0x20) != 0)
    v4 = *(_DWORD *)(a2 + 28);
  else
    v4 = 1;
  if ((v3 & 0x20) != 0)
    v5 = 1;
  else
    v5 = *(_DWORD *)(a2 + 28);
  result = operator new(16 * v4 + 32);
  *result = a1;
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 6) = v4;
  if (v4)
  {
    v7 = (char *)(result + 4);
    do
    {
      *(_DWORD *)v7 = v5;
      *((_DWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 1) = 0;
      v7 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_1D44E1548(uint64_t a1)
{
  sub_1D44E1FB0(a1);
  JUMPOUT(0x1D825DA8CLL);
}

const char *sub_1D44E156C()
{
  return "SingleRateGraphBox";
}

uint64_t sub_1D44E1578(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;

  result = DSPGraph::Box::print();
  if ((int)a3 >= 2)
  {
    DSPGraph::printi();
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 784) + 24))(*(_QWORD *)(a1 + 784), a2, a3, (a4 + 4));
  }
  return result;
}

unint64_t sub_1D44E1608(uint64_t a1)
{
  unsigned int v2;
  unint64_t v3;
  DSPGraph::Box *v4;
  unint64_t v5;

  if (DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 784)))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = (DSPGraph::Box *)DSPGraph::Graph::out(*(DSPGraph::Graph **)(a1 + 784));
      v5 = DSPGraph::Box::totalLatencyInTicks(v4);
      if (v3 <= v5)
        v3 = v5;
      ++v2;
    }
    while (v2 < DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 784)));
  }
  else
  {
    v3 = 0;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 696) * v3 / *(_QWORD *)(*(_QWORD *)(a1 + 784) + 696);
}

uint64_t sub_1D44E168C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];

  if (!(a4 | a3))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 784) + 40))(*(_QWORD *)(a1 + 784));
  sub_1D44DA4C4(v7, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
  sub_1D44DA4C4(v6, "setParameter");
  sub_1D44DA4C4(v5, "DSPGraph parameters must have global scope and master element.");
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44E1710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E175C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];

  if (!(a4 | a3))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 784) + 48))(*(_QWORD *)(a1 + 784));
  sub_1D44DA4C4(v7, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_GraphBox.h");
  sub_1D44DA4C4(v6, "getParameter");
  sub_1D44DA4C4(v5, "DSPGraph parameters must have global scope and master element.");
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44E17E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E182C@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  if (!a2)
    return DSPGraph::Graph::getParameterList(*(DSPGraph::Graph **)(result + 784));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

double sub_1D44E1844@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 104) = 1;
  return result;
}

uint64_t sub_1D44E1864(DSPGraph::Graph **a1, int a2)
{
  uint64_t result;
  int v4;
  DSPGraph::Box *v5;

  result = (uint64_t)a1[98];
  if (*(_DWORD *)(result + 688) != a2)
  {
    v4 = *(unsigned __int8 *)(result + 762);
    if (*(_BYTE *)(result + 762))
    {
      DSPGraph::Graph::uninitialize((DSPGraph::Graph *)result);
      result = (uint64_t)a1[98];
    }
    DSPGraph::Graph::unconfigure((DSPGraph::Graph *)result);
    v5 = (DSPGraph::Box *)DSPGraph::Graph::in(a1[98]);
    DSPGraph::Box::sampleRate(v5);
    (*((void (**)(DSPGraph::Graph **))*a1 + 16))(a1);
    DSPGraph::Graph::setSliceDuration();
    result = DSPGraph::Graph::configure(a1[98]);
    if (v4)
      return DSPGraph::Graph::initialize(a1[98]);
  }
  return result;
}

DSPGraph::Graph *sub_1D44E1910(uint64_t a1, int a2)
{
  DSPGraph::Graph *result;
  int v4;
  DSPGraph::Box *v5;

  result = *(DSPGraph::Graph **)(a1 + 784);
  if ((((*((_BYTE *)result + 760) != 0) ^ a2) & 1) == 0)
  {
    v4 = *((unsigned __int8 *)result + 762);
    if (*((_BYTE *)result + 762))
    {
      DSPGraph::Graph::uninitialize(result);
      result = *(DSPGraph::Graph **)(a1 + 784);
    }
    DSPGraph::Graph::unconfigure(result);
    v5 = (DSPGraph::Box *)DSPGraph::Graph::in(*(DSPGraph::Graph **)(a1 + 784));
    DSPGraph::Box::sampleRate(v5);
    DSPGraph::Graph::setSliceDuration();
    result = (DSPGraph::Graph *)DSPGraph::Graph::configure(*(DSPGraph::Graph **)(a1 + 784));
    if (v4)
      return (DSPGraph::Graph *)DSPGraph::Graph::initialize(*(DSPGraph::Graph **)(a1 + 784));
  }
  return result;
}

BOOL sub_1D44E19B0(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 784) + 760) == 0;
}

double sub_1D44E19C4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 16) = 0;
  result = *(double *)"xfuapraexoba";
  *(_OWORD *)a1 = *(_OWORD *)"xfuapraexoba";
  return result;
}

uint64_t sub_1D44E19DC(uint64_t a1)
{
  uint64_t v1;
  DSPGraph::Box *v2;
  int v3;
  DSPGraph::Box *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD v18[3];

  v1 = a1;
  if (!DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 784)))
    return 0;
  v2 = (DSPGraph::Box *)DSPGraph::Graph::in(*(DSPGraph::Graph **)(v1 + 784));
  v3 = DSPGraph::Box::sampleRate(v2);
  v4 = (DSPGraph::Box *)DSPGraph::Graph::out(*(DSPGraph::Graph **)(v1 + 784));
  if (v3 != DSPGraph::Box::sampleRate(v4))
    return v1;
  v5 = DSPGraph::Graph::in(*(DSPGraph::Graph **)(v1 + 784));
  v6 = *(_QWORD *)(v5 + 88);
  if (*(_QWORD *)(v5 + 96) == v6)
  {
    v11 = v5;
    sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v17, "out");
    v13 = (_QWORD *)(v11 + 32);
    if (*(char *)(v11 + 55) < 0)
      v13 = (_QWORD *)*v13;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v12, v13, (uint64_t)(*(_QWORD *)(v11 + 96) - *(_QWORD *)(v11 + 88)) >> 5, 0);
    result = DSPGraph::ThrowException();
  }
  else
  {
    v7 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) + 120) + 40);
    v8 = DSPGraph::Graph::out(*(DSPGraph::Graph **)(v1 + 784));
    v9 = *(_QWORD *)(v8 + 64);
    if (*(_QWORD *)(v8 + 72) != v9)
    {
      if (v7 == *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 40))
        return 0;
      return v1;
    }
    v14 = v8;
    sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v17, "in");
    v16 = (_QWORD *)(v14 + 32);
    if (*(char *)(v14 + 55) < 0)
      v16 = (_QWORD *)*v16;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v15, v16, (uint64_t)(*(_QWORD *)(v14 + 72) - *(_QWORD *)(v14 + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
  }
  __break(1u);
  return result;
}

void sub_1D44E1BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E1BF8(uint64_t a1)
{
  uint64_t v1;
  DSPGraph::Box *v2;
  int v3;
  DSPGraph::Box *v4;

  v1 = a1;
  if (!DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 784)))
    return 0;
  v2 = (DSPGraph::Box *)DSPGraph::Graph::in(*(DSPGraph::Graph **)(v1 + 784));
  v3 = DSPGraph::Box::sampleRate(v2);
  v4 = (DSPGraph::Box *)DSPGraph::Graph::out(*(DSPGraph::Graph **)(v1 + 784));
  if (v3 == DSPGraph::Box::sampleRate(v4))
    return 0;
  return v1;
}

uint64_t sub_1D44E1C54()
{
  return 0;
}

uint64_t sub_1D44E1C5C(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  DSPGraph::Buffer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  const char *v14;
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD v17[3];

  if (a2)
  {
    v3 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 64))(result))
    {
      v4 = *(_QWORD *)(v3 + 64);
      if (*(_QWORD *)(v3 + 72) == v4)
      {
        sub_1D44DA4C4(v17, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v16, "in");
        v13 = (_QWORD *)(v3 + 32);
        if (*(char *)(v3 + 55) < 0)
          v13 = (_QWORD *)*v13;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v12, v13, (uint64_t)(*(_QWORD *)(v3 + 72) - *(_QWORD *)(v3 + 64)) >> 5, 0);
        result = DSPGraph::ThrowException();
      }
      else
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        v6 = *(_QWORD *)(v3 + 88);
        if (*(_QWORD *)(v3 + 96) != v6)
        {
          v7 = *(DSPGraph::Buffer **)(v5 + 56);
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
          if (*(DSPGraph::Buffer **)(v8 + 56) != v7)
          {
            DSPGraph::Buffer::copyFrom(*(DSPGraph::Buffer **)(v8 + 56), v7);
            DSPGraph::Buffer::copyTimeFrom();
          }
          sub_1D44E205C(v3, a2);
          v9 = *(_QWORD *)(v3 + 800);
          if (*(_QWORD *)(v3 + 808) != v9)
          {
            *(_DWORD *)(v3 + 908) = (int)*(double *)(v9 + 8);
            if (*(_QWORD *)(v3 + 832) != *(_QWORD *)(v3 + 824))
            {
              result = DSPGraph::Graph::processInPlace();
              goto LABEL_12;
            }
          }
          goto LABEL_15;
        }
        sub_1D44DA4C4(v17, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v16, "out");
        v15 = (_QWORD *)(v3 + 32);
        if (*(char *)(v3 + 55) < 0)
          v15 = (_QWORD *)*v15;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v14, v15, (uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 5, 0);
        result = DSPGraph::ThrowException();
      }
      __break(1u);
      return result;
    }
    sub_1D44E205C(v3, a2);
    v10 = *(_QWORD *)(v3 + 800);
    if (*(_QWORD *)(v3 + 808) != v10)
    {
      *(_DWORD *)(v3 + 908) = (int)*(double *)(v10 + 8);
      result = DSPGraph::Graph::processMultiple();
LABEL_12:
      *(_DWORD *)(v3 + 908) += a2;
      v11 = *(_QWORD *)(v3 + 824);
      if (*(_QWORD *)(v3 + 832) != v11)
        return DSPGraph::Box::propagateFlagsAndTimeStamp((DSPGraph::Box *)v3, *(unsigned int *)(v11 + 4), (const AudioTimeStamp *)(v11 + 8));
      return result;
    }
LABEL_15:
    sub_1D44E1450();
  }
  return result;
}

void sub_1D44E1E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E1EF4(DSPGraph::Graph **a1)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  return DSPGraph::Graph::initialize(a1[98]);
}

uint64_t sub_1D44E1F1C(uint64_t a1)
{
  uint64_t result;

  result = DSPGraph::Box::uninitialize((DSPGraph::Box *)a1);
  if (!*(_BYTE *)(a1 + 904))
    return DSPGraph::Graph::uninitialize(*(DSPGraph::Graph **)(a1 + 784));
  return result;
}

uint64_t sub_1D44E1F54(DSPGraph::Graph **a1)
{
  DSPGraph::Box::reset((DSPGraph::Box *)a1);
  return DSPGraph::Graph::reset(a1[98]);
}

uint64_t sub_1D44E1F78()
{
  return 0;
}

uint64_t sub_1D44E1F84(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 784);
  result = v1 + 408;
  if (*(char *)(v1 + 431) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_1D44E1FA0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 784);
}

uint64_t sub_1D44E1FA8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_1D44E1FB0(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)a1 = &off_1E97AFFC8;
  *(_QWORD *)(a1 + 776) = &unk_1E97B0278;
  if (!*(_BYTE *)(a1 + 904))
    DSPGraph::Graph::uninitialize(*(DSPGraph::Graph **)(a1 + 784));
  v2 = *(void **)(a1 + 880);
  if (v2)
  {
    *(_QWORD *)(a1 + 888) = v2;
    operator delete(v2);
  }
  v6 = (void **)(a1 + 856);
  sub_1D44E0B8C(&v6);
  v3 = *(_QWORD **)(a1 + 848);
  *(_QWORD *)(a1 + 848) = 0;
  if (v3)
    sub_1D44E0BFC(a1 + 848, v3);
  v4 = *(void **)(a1 + 824);
  if (v4)
  {
    *(_QWORD *)(a1 + 832) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 800);
  if (v5)
  {
    *(_QWORD *)(a1 + 808) = v5;
    operator delete(v5);
  }
  sub_1D44DAAE4(a1 + 784);
  DSPGraph::Box::~Box((DSPGraph::Box *)a1);
}

uint64_t sub_1D44E205C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  DSPGraph::Box *v13;
  _DWORD *v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const char *v38;
  _QWORD *v39;
  const char *v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[3];

  if (DSPGraph::Graph::numInputs(*(DSPGraph::Graph **)(a1 + 784)))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      if (v6 >= (*(_QWORD *)(a1 + 72) - v7) >> 5)
        break;
      v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + v5) + 40))(v7 + v5) + 56);
      v9 = *(_QWORD *)(v8 + 80);
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 256);
      v10 = *(_DWORD *)(v8 + 72);
      v42 = *(_OWORD *)(v8 + 8);
      v43 = *(_OWORD *)(v8 + 24);
      v44 = *(_OWORD *)(v8 + 40);
      v45 = *(_OWORD *)(v8 + 56);
      v11 = *(_QWORD *)(a1 + 800);
      if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 808) - v11) >> 4) <= v6)
        goto LABEL_34;
      v12 = v11 + v4;
      *(_DWORD *)v12 = a2;
      *(_DWORD *)(v12 + 4) = v10;
      *(_OWORD *)(v12 + 8) = v42;
      *(_OWORD *)(v12 + 24) = v43;
      *(_OWORD *)(v12 + 40) = v44;
      *(_OWORD *)(v12 + 56) = v45;
      *(_QWORD *)(v12 + 72) = v9;
      ++v6;
      v5 += 32;
      v4 += 80;
      if (v6 >= DSPGraph::Graph::numInputs(*(DSPGraph::Graph **)(a1 + 784)))
        goto LABEL_6;
    }
    sub_1D44DA4C4(&v42, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v46, "in");
    v41 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v40, v41, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, v6);
    result = DSPGraph::ThrowException();
    goto LABEL_53;
  }
LABEL_6:
  v13 = (DSPGraph::Box *)DSPGraph::Graph::in(*(DSPGraph::Graph **)(a1 + 784));
  DSPGraph::Box::sampleRate(v13);
  DSPGraph::Graph::preflight();
  v14 = *(_DWORD **)(a1 + 800);
  if (*(_DWORD **)(a1 + 808) == v14)
LABEL_34:
    sub_1D44E1450();
  if (*v14 != a2)
    __assert_rtn("prepareGraphIOData", "DSPGraph_GraphBox.h", 279, "mGraphIODataIn.at(0).mNumFrames == inNumFrames");
  result = DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 784));
  if ((_DWORD)result)
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 88);
      if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v17) >> 5))
      {
        sub_1D44DA4C4(&v42, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v46, "out");
        v39 = (_QWORD *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0)
          v39 = (_QWORD *)*v39;
        goto LABEL_52;
      }
      v18 = *(_DWORD **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v17 + 32 * v16) + 40))(v17 + 32 * v16)
                                   + 56)
                       + 80);
      if (*v18)
        break;
LABEL_29:
      v37 = *(_QWORD *)(a1 + 824);
      if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 832) - v37) >> 4) <= v16)
        goto LABEL_34;
      *(_QWORD *)(v37 + 80 * v16++ + 72) = v18;
      result = DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 784));
      if (v16 >= result)
        return result;
    }
    v19 = 0;
    v20 = 3;
    while (1)
    {
      v21 = *(_QWORD *)(a1 + 88);
      if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v21) >> 5))
        break;
      v22 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v21 + 32 * v16) + 40))(v21 + 32 * v16)
                      + 120);
      v24 = *(_DWORD *)(v22 + 8);
      v25 = v24 == 1718773105 || v24 == 1819304813;
      if (v25 || !*(_DWORD *)(v22 + 16))
      {
        v26 = *(_QWORD *)(a1 + 88);
        if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v26) >> 5))
        {
          sub_1D44DA4C4(&v42, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          sub_1D44DA4C4(v46, "out");
          v39 = (_QWORD *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0)
            v39 = (_QWORD *)*v39;
          goto LABEL_52;
        }
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 + 32 * v16) + 40))(v26 + 32 * v16);
        v28 = *(_QWORD *)(a1 + 824);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 832) - v28) >> 4) <= v16)
          goto LABEL_34;
        v29 = *(_DWORD *)(v28 + 80 * v16) * *(_DWORD *)(*(_QWORD *)(v27 + 120) + 24);
      }
      else
      {
        v30 = *(_DWORD **)(a1 + 824);
        if (*(_DWORD **)(a1 + 832) == v30)
          goto LABEL_34;
        v31 = *(_QWORD *)(a1 + 88);
        if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v31) >> 5))
        {
          sub_1D44DA4C4(&v42, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          sub_1D44DA4C4(v46, "out");
          v39 = (_QWORD *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0)
            v39 = (_QWORD *)*v39;
          goto LABEL_52;
        }
        LODWORD(v23) = *v30;
        v32 = (double)v23;
        LODWORD(v33) = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v31 + 32 * v16) + 40))(v31 + 32 * v16)
                                             + 120)
                                 + 20);
        v34 = v32 / (double)v33;
        if (vabdd_f64(floor(v34), v34) >= 0.001)
          __assert_rtn("prepareGraphIOData", "DSPGraph_GraphBox.h", 288, "isIntegral(numPacketsOut)");
        v35 = *(_QWORD *)(a1 + 88);
        if (v16 >= (unint64_t)((*(_QWORD *)(a1 + 96) - v35) >> 5))
        {
          sub_1D44DA4C4(&v42, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          sub_1D44DA4C4(v46, "out");
          v39 = (_QWORD *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0)
            v39 = (_QWORD *)*v39;
          goto LABEL_52;
        }
        LODWORD(v36) = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v35 + 32 * v16) + 40))(v35 + 32 * v16)
                                             + 120)
                                 + 16);
        v29 = (v34 * (double)v36);
      }
      v18[v20] = v29;
      ++v19;
      v20 += 4;
      if (v19 >= *v18)
        goto LABEL_29;
    }
    sub_1D44DA4C4(&v42, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v46, "out");
    v39 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v39 = (_QWORD *)*v39;
LABEL_52:
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v38, v39, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, v16);
    result = DSPGraph::ThrowException();
LABEL_53:
    __break(1u);
  }
  return result;
}

void sub_1D44E26B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

std::runtime_error *sub_1D44E273C(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
  return result;
}

uint64_t sub_1D44E2760(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_1D44DA574();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1D44E27E4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_1E97B12A8;
  __cxa_throw(exception, (struct type_info *)&unk_1E97AF0A8, (void (*)(void *))std::exception::~exception);
}

void sub_1D44E281C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44E2840(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    v5 = 0;
    v6 = 8 * a3;
    v7 = a1;
    do
    {
      v8 = operator new(0x18uLL);
      v9 = *(_QWORD *)(a2 + 8 * v5);
      v8[1] = a1;
      v8[2] = v9;
      *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v5;
      v7 = v8;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1D44E28BC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D44DB220(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D44E28D0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  result = operator new(0x30uLL);
  *result = a2;
  result[1] = a3;
  v8 = a4[1];
  result[2] = *a4;
  result[3] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a4[3];
  result[4] = a4[2];
  result[5] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return result;
}

uint64_t *sub_1D44E2948(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = sub_1D44E28D0((uint64_t)a1, 0, 0, (_QWORD *)(i + 16));
    v6 = *a1;
    *v5 = *a1;
    v5[1] = a1;
    *(_QWORD *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_1D44E29C4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D44DF520(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1D44E29D8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = sub_1D44E2A18(*(DSPGraph::Graph **)(a1 + 48));
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v3 + 32);
  *(_DWORD *)(a2 + 40) = 1;
  return result;
}

uint64_t sub_1D44E2A18(DSPGraph::Graph *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  const char *v4;
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD v7[3];

  v1 = DSPGraph::Graph::in(a1);
  v2 = *(_QWORD *)(v1 + 88);
  if (*(_QWORD *)(v1 + 96) != v2)
    return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
  sub_1D44DA4C4(v7, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v6, "out");
  v5 = (_QWORD *)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    v5 = (_QWORD *)*v5;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v4, v5, (uint64_t)(*(_QWORD *)(v1 + 96) - *(_QWORD *)(v1 + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44E2AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

__n128 sub_1D44E2B1C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  if (*(_BYTE *)(a1 + 64))
    v4 = sub_1D44DF888(*(DSPGraph::Graph **)(a1 + 48));
  else
    v4 = 1;
  v5 = sub_1D44E2B84(*(DSPGraph::Graph **)(a1 + 48));
  result = *(__n128 *)v5;
  v7 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v5;
  *(_OWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a2 + 40) = v4;
  return result;
}

uint64_t sub_1D44E2B84(DSPGraph::Graph *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  const char *v4;
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD v7[3];

  v1 = DSPGraph::Graph::out(a1);
  v2 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v1 + 72) != v2)
    return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
  sub_1D44DA4C4(v7, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v6, "in");
  v5 = (_QWORD *)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    v5 = (_QWORD *)*v5;
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v4, v5, (uint64_t)(*(_QWORD *)(v1 + 72) - *(_QWORD *)(v1 + 64)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44E2C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E2C88()
{
  return 2;
}

uint64_t sub_1D44E2C90@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 56);
  *a2 = *(_QWORD *)(result + 48);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *sub_1D44E2CB4(_QWORD *a1)
{
  *a1 = off_1E97AF238;
  sub_1D44DAAE4((uint64_t)(a1 + 6));
  *a1 = &unk_1E97AF1C8;
  sub_1D44DB220(a1 + 2);
  return a1;
}

void sub_1D44E2CF8(_QWORD *a1)
{
  *a1 = off_1E97AF238;
  sub_1D44DAAE4((uint64_t)(a1 + 6));
  *a1 = &unk_1E97AF1C8;
  sub_1D44DB220(a1 + 2);
  JUMPOUT(0x1D825DA8CLL);
}

uint64_t sub_1D44E2D4C(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t v8;
  NSObject *v9;
  int v11;
  double v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = DSPGraph::Box::Box((DSPGraph::Box *)a1);
  *(_QWORD *)v8 = &off_1E97B0838;
  *(_OWORD *)(v8 + 776) = 0u;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  *(_QWORD *)(a1 + 792) = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  *(_QWORD *)(a1 + 800) = objc_claimAutoreleasedReturnValue();
  sub_1D4501768();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v11 = 134218496;
    v12 = a4;
    v13 = 1024;
    v14 = a2;
    v15 = 1024;
    v16 = a3;
    _os_log_impl(&dword_1D42A7000, v9, OS_LOG_TYPE_DEBUG, "Constructing ShazamBox(ringBufferDuration = %f, saveWavFile = %d, channelCount = %d)", (uint8_t *)&v11, 0x18u);
  }

  *(double *)(a1 + 808) = a4;
  *(_BYTE *)(a1 + 816) = a2;
  *(_DWORD *)(a1 + 832) = a3;
  return a1;
}

void sub_1D44E2E74(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E2EC0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  void *v23;
  uint64_t result;
  const char *v25;
  _QWORD *v26;
  uint8_t buf[8];
  __int128 v28;
  int v29;
  int v30;
  uint64_t v31;
  uint8_t v32[4];
  double v33;
  uint8_t v34[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  sub_1D4501768();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D42A7000, v2, OS_LOG_TYPE_DEBUG, "Initializing ShazamBox", buf, 2u);
  }

  v3 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v3)
  {
    sub_1D44DA4C4(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v34, "in");
    v26 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v26 = (_QWORD *)*v26;
    goto LABEL_57;
  }
  if (**(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 120) != 16000.0)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v4)
    {
      sub_1D44DA4C4(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v34, "in");
      v26 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v26 = (_QWORD *)*v26;
      goto LABEL_57;
    }
    if (**(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120) != 24000.0)
    {
      v5 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(a1 + 72) == v5)
      {
        sub_1D44DA4C4(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v34, "in");
        v26 = (_QWORD *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0)
          v26 = (_QWORD *)*v26;
        goto LABEL_57;
      }
      if (**(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120) != 32000.0)
      {
        v6 = *(_QWORD *)(a1 + 64);
        if (*(_QWORD *)(a1 + 72) == v6)
        {
          sub_1D44DA4C4(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          sub_1D44DA4C4(v34, "in");
          v26 = (_QWORD *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0)
            v26 = (_QWORD *)*v26;
          goto LABEL_57;
        }
        if (**(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) + 120) != 48000.0)
          __assert_rtn("initialize", "DSPGraph_ShazamBox.mm", 45, "in(0).format().mSampleRate == 16000 || in(0).format().mSampleRate == 24000 || in(0).format().mSampleRate == 32000 || in(0).format().mSampleRate == 48000");
      }
    }
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v7)
  {
    sub_1D44DA4C4(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v34, "in");
    v26 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v26 = (_QWORD *)*v26;
    goto LABEL_57;
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) + 120) + 28) != *(_DWORD *)(a1 + 832))
    __assert_rtn("initialize", "DSPGraph_ShazamBox.mm", 46, "in(0).format().mChannelsPerFrame == mChannelCount");
  v8 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v8)
  {
    sub_1D44DA4C4(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v34, "in");
    v26 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v26 = (_QWORD *)*v26;
LABEL_57:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v25, v26, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
    __break(1u);
    return result;
  }
  v9 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) + 120);
  v10 = *v9;
  LODWORD(v9) = *((_DWORD *)v9 + 7);
  *(_QWORD *)buf = v10;
  v28 = xmmword_1D454FD00;
  v29 = 4;
  v30 = (int)v9;
  v31 = 32;
  v11 = objc_msgSend(objc_alloc(MEMORY[0x1E0C89AA8]), "initWithStreamDescription:", buf);
  v12 = *(void **)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v11;

  sub_1D4501768();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(*(id *)(a1 + 776), "debugDescription");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v34 = 138412290;
    *(_QWORD *)&v34[4] = v14;
    _os_log_impl(&dword_1D42A7000, v13, OS_LOG_TYPE_DEBUG, "Shazam DSPGraph ABL AudioFormat: %@", v34, 0xCu);

  }
  memset(v34, 0, 20);
  +[SNGenerateShazamSignatureRequest shazamChannelsMixingInfo](SNGenerateShazamSignatureRequest, "shazamChannelsMixingInfo");
  sub_1D4501768();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_1D42A7000, v15, OS_LOG_TYPE_DEBUG, "ShazamChannelsMixingInfo: ", v32, 2u);
  }

  sub_1D4501768();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v32 = 67109120;
    LODWORD(v33) = *(unsigned __int16 *)v34;
    _os_log_impl(&dword_1D42A7000, v16, OS_LOG_TYPE_DEBUG, "  Playback Channel:   %d ", v32, 8u);
  }

  sub_1D4501768();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v32 = 67109120;
    LODWORD(v33) = *(unsigned __int16 *)&v34[8];
    _os_log_impl(&dword_1D42A7000, v17, OS_LOG_TYPE_DEBUG, "  Microphone Channel: %d ", v32, 8u);
  }

  sub_1D4501768();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v32 = 134217984;
    v33 = *(float *)&v34[4];
    _os_log_impl(&dword_1D42A7000, v18, OS_LOG_TYPE_DEBUG, "  Playback Scale:     %.2f ", v32, 0xCu);
  }

  sub_1D4501768();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v32 = 134217984;
    v33 = *(float *)&v34[12];
    _os_log_impl(&dword_1D42A7000, v19, OS_LOG_TYPE_DEBUG, "  Micrphone Scale:    %.2f ", v32, 0xCu);
  }

  sub_1D4501768();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v32 = 134217984;
    v33 = *(float *)&v34[16];
    _os_log_impl(&dword_1D42A7000, v20, OS_LOG_TYPE_DEBUG, "  Mixer Scale:        %.2f ", v32, 0xCu);
  }

  *(_DWORD *)(a1 + 820) = *(_DWORD *)&v34[4];
  *(_QWORD *)(a1 + 824) = *(_QWORD *)&v34[12];
  if (*(_DWORD *)(a1 + 832) >= 2u)
  {
    sub_1D4501768();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1D42A7000, v21, OS_LOG_TYPE_DEBUG, "Testing ShazamChannels Scaling Assertions", v32, 2u);
    }

    if (*(float *)(a1 + 820) == 0.0)
      __assert_rtn("initialize", "DSPGraph_ShazamBox.mm", 68, "playbackScale != 0.0");
    if (*(float *)(a1 + 824) == 0.0)
      __assert_rtn("initialize", "DSPGraph_ShazamBox.mm", 69, "micScale != 0.0");
    if (*(float *)(a1 + 828) == 0.0)
      __assert_rtn("initialize", "DSPGraph_ShazamBox.mm", 70, "mixerScale != 0.0");
  }
  v22 = objc_alloc_init(MEMORY[0x1E0CD7518]);
  v23 = *(void **)(a1 + 784);
  *(_QWORD *)(a1 + 784) = v22;

  objc_msgSend(*(id *)(a1 + 792), "removeAllObjects");
  return objc_msgSend(*(id *)(a1 + 800), "removeAllObjects");
}

void sub_1D44E3738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44E37D4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v6[16];

  sub_1D4501768();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1D42A7000, v2, OS_LOG_TYPE_DEBUG, "Uninitializing ShazamBox", v6, 2u);
  }

  v3 = *(void **)(a1 + 776);
  *(_QWORD *)(a1 + 776) = 0;

  v4 = *(void **)(a1 + 784);
  *(_QWORD *)(a1 + 784) = 0;

  objc_msgSend(*(id *)(a1 + 792), "removeAllObjects");
  return objc_msgSend(*(id *)(a1 + 800), "removeAllObjects");
}

void sub_1D44E3864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  const float *v17;
  id v18;
  const float *v19;
  id v20;
  id v21;
  const float *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  const char *v38;
  _QWORD *v39;
  id v40;
  id v41;
  id v42;
  _QWORD v43[3];
  _QWORD v44[3];

  v3 = a1 + 64;
  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v3 + 8) == v2)
  {
    sub_1D44DA4C4(v44, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v43, "in");
    v39 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v39 = (_QWORD *)*v39;
    goto LABEL_25;
  }
  v4 = (void *)MEMORY[0x1E0C89B10];
  v5 = (uint64_t)*(double *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 56) + 8);
  objc_msgSend(*(id *)(a1 + 776), "sampleRate");
  objc_msgSend(v4, "timeWithSampleTime:atRate:", v5);
  v42 = (id)objc_claimAutoreleasedReturnValue();
  if (*(_DWORD *)(a1 + 832) >= 2u)
  {
    v6 = objc_alloc(MEMORY[0x1E0C89AC0]);
    v7 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v7)
    {
      sub_1D44DA4C4(v44, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v43, "in");
      v39 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v39 = (_QWORD *)*v39;
    }
    else
    {
      v8 = (void *)objc_msgSend(v6, "initWithPCMFormat:bufferListNoCopy:deallocator:", *(_QWORD *)(a1 + 776), *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) + 56) + 80), 0);
      v9 = objc_msgSend(v8, "frameLength");
      v10 = 4 * v9;
      v41 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v10);
      v40 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v10);
      if (objc_msgSend(*(id *)(a1 + 776), "isInterleaved"))
      {
        vDSP_vsmul(*(const float **)(objc_msgSend(v8, "audioBufferList") + 16), *(unsigned int *)(a1 + 832), (const float *)(a1 + 820), (float *)objc_msgSend(objc_retainAutorelease(v40), "mutableBytes"), 1, v9);
        vDSP_vsmul((const float *)(*(_QWORD *)(objc_msgSend(v8, "audioBufferList") + 16) + 4), *(unsigned int *)(a1 + 832), (const float *)(a1 + 824), (float *)objc_msgSend(objc_retainAutorelease(v41), "mutableBytes"), 1, v9);
      }
      else
      {
        vDSP_vsmul(*(const float **)(objc_msgSend(v8, "audioBufferList") + 16), 1, (const float *)(a1 + 820), (float *)objc_msgSend(objc_retainAutorelease(v40), "mutableBytes"), 1, v9);
        vDSP_vsmul(*(const float **)(objc_msgSend(v8, "audioBufferList") + 32), 1, (const float *)(a1 + 824), (float *)objc_msgSend(objc_retainAutorelease(v41), "mutableBytes"), 1, v9);
      }
      v16 = objc_retainAutorelease(v41);
      v17 = (const float *)objc_msgSend(v16, "mutableBytes");
      v18 = objc_retainAutorelease(v40);
      v19 = (const float *)objc_msgSend(v18, "mutableBytes");
      v20 = objc_retainAutorelease(v16);
      vDSP_vadd(v17, 1, v19, 1, (float *)objc_msgSend(v20, "mutableBytes"), 1, v9);
      v21 = objc_retainAutorelease(v20);
      v22 = (const float *)objc_msgSend(v21, "mutableBytes");
      v23 = objc_retainAutorelease(v21);
      vDSP_vsmul(v22, 1, (const float *)(a1 + 828), (float *)objc_msgSend(v23, "mutableBytes"), 1, v9);
      v24 = objc_alloc(MEMORY[0x1E0C89AA8]);
      v25 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(a1 + 72) != v25)
      {
        v26 = (void *)objc_msgSend(v24, "initWithCommonFormat:sampleRate:channels:interleaved:", 1, 1, 0, **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25) + 120));
        v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C89AC0]), "initWithPCMFormat:frameCapacity:", v26, v9);
        objc_msgSend(v13, "setFrameLength:", v9);
        v27 = *(void **)(objc_msgSend(v13, "audioBufferList") + 16);
        v28 = objc_retainAutorelease(v23);
        memcpy(v27, (const void *)objc_msgSend(v28, "mutableBytes"), v10);

        v29 = *(void **)(a1 + 792);
        v30 = (void *)objc_msgSend(v13, "mutableCopy");
        objc_msgSend(v29, "insertObject:atIndex:", v30, objc_msgSend(*(id *)(a1 + 792), "count"));

        objc_msgSend(*(id *)(a1 + 800), "insertObject:atIndex:", v42, objc_msgSend(*(id *)(a1 + 800), "count"));
        goto LABEL_11;
      }
      sub_1D44DA4C4(v44, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v43, "in");
      v39 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v39 = (_QWORD *)*v39;
    }
LABEL_25:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v38, v39, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException();
    __break(1u);
    return;
  }
  v11 = objc_alloc(MEMORY[0x1E0C89AC0]);
  v12 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v12)
  {
    sub_1D44DA4C4(v44, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v43, "in");
    v39 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v39 = (_QWORD *)*v39;
    goto LABEL_25;
  }
  v13 = (void *)objc_msgSend(v11, "initWithPCMFormat:bufferListNoCopy:deallocator:", *(_QWORD *)(a1 + 776), *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 56) + 80), 0);
  v14 = *(void **)(a1 + 792);
  v15 = (void *)objc_msgSend(v13, "mutableCopy");
  objc_msgSend(v14, "insertObject:atIndex:", v15, objc_msgSend(*(id *)(a1 + 792), "count"));

  objc_msgSend(*(id *)(a1 + 800), "insertObject:atIndex:", v42, objc_msgSend(*(id *)(a1 + 800), "count"));
LABEL_11:

  objc_msgSend(*(id *)(a1 + 800), "lastObject");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = objc_msgSend(v31, "sampleTime");
  objc_msgSend(*(id *)(a1 + 800), "firstObject");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend(v33, "sampleTime");
  v35 = *(double *)(a1 + 808);
  objc_msgSend(*(id *)(a1 + 776), "sampleRate");
  v37 = v35 * v36;

  if (v37 <= (double)(v32 - v34))
  {
    objc_msgSend(*(id *)(a1 + 792), "removeObjectAtIndex:", 0);
    objc_msgSend(*(id *)(a1 + 800), "removeObjectAtIndex:", 0);
  }

}

void sub_1D44E3EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, id a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);

  _Unwind_Resume(a1);
}

id sub_1D44E4040(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  void *v36;
  char v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  id v45;
  NSObject *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  unint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  char v55;
  id v56;
  void *v58;
  id v60;
  void *v61;
  id v63[3];
  id v64[3];
  id v65;
  id v66;
  id v67;
  id v68;
  char v69;
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  void *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 816) || !objc_msgSend(*(id *)(a1 + 792), "count"))
    goto LABEL_46;
  v2 = (void *)MEMORY[0x1E0C99E98];
  NSHomeDirectory();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLWithString:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "URLByAppendingPathComponent:", CFSTR("/Library/Caches/com.apple.soundanalysisd/CoAudibility/"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = 0;
  objc_msgSend(v5, "absoluteString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "fileExistsAtPath:isDirectory:", v6, &v69);

  if (a2 == 1)
  {
    if (v69)
    {
      objc_msgSend(v5, "absoluteString");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v64[0] = 0;
      v8 = objc_msgSend(v58, "removeItemAtPath:error:", v7, v64);
      v60 = v64[0];

      if ((v8 & 1) != 0)
      {
        sub_1D4501768();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(v5, "absoluteString");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v71 = v10;
          _os_log_impl(&dword_1D42A7000, v9, OS_LOG_TYPE_DEBUG, "Deleted directory at: %@", buf, 0xCu);

        }
        v69 = 0;
        goto LABEL_17;
      }
      sub_1D4501768();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v5, "absoluteString");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v60, "localizedDescription");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v71 = v12;
        v72 = 2112;
        v73 = v13;
        _os_log_impl(&dword_1D42A7000, v11, OS_LOG_TYPE_ERROR, "Error in deleting directory at: %@, Error %@", buf, 0x16u);

      }
    }
    else
    {
      sub_1D4501768();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D42A7000, v11, OS_LOG_TYPE_DEBUG, "CoAudibility directory doesn't exist", buf, 2u);
      }
      v60 = 0;
    }

  }
  else
  {
    v60 = 0;
  }
  if (!v69)
  {
LABEL_17:
    objc_msgSend(v5, "absoluteString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v63[0] = v60;
    v15 = objc_msgSend(v58, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v14, 1, 0, v63);
    v16 = v63[0];

    if ((v15 & 1) != 0)
    {
      sub_1D4501768();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend(v5, "absoluteString");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v71 = v18;
        _os_log_impl(&dword_1D42A7000, v17, OS_LOG_TYPE_DEBUG, "Created directory at: %@", buf, 0xCu);

      }
    }
    else
    {
      sub_1D4501768();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v5, "absoluteString");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "localizedDescription");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v71 = v19;
        v72 = 2112;
        v73 = v20;
        _os_log_impl(&dword_1D42A7000, v17, OS_LOG_TYPE_ERROR, "Error in creating directory at: %@, Error %@", buf, 0x16u);

      }
    }

    v60 = v16;
  }
  v21 = 0;
  v22 = 0;
  v23 = v60;
  while (1)
  {
    v61 = v23;
    if (v21 >= objc_msgSend(*(id *)(a1 + 792), "count"))
      break;
    objc_msgSend(*(id *)(a1 + 792), "objectAtIndex:", v21);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21 || v22)
      goto LABEL_31;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CoADebuggingWav_%llu.wav"), a2);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "URLByAppendingPathComponent:", v25);
    v26 = objc_claimAutoreleasedReturnValue();

    v27 = objc_alloc(MEMORY[0x1E0C89A98]);
    objc_msgSend(v24, "format");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "settings");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "format");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "commonFormat");
    objc_msgSend(v24, "format");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "isInterleaved");
    v68 = v61;
    v22 = (void *)objc_msgSend(v27, "initForWriting:settings:commonFormat:interleaved:error:", v26, v29, v31, v33, &v68);
    v34 = v68;

    if (v34)
    {
      sub_1D4501768();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v34, "localizedDescription");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v71 = v36;
        _os_log_impl(&dword_1D42A7000, v35, OS_LOG_TYPE_ERROR, "Error in creating Audio File: %@", buf, 0xCu);

      }
      v5 = (void *)v26;
      v61 = v34;
LABEL_31:
      if (!v22)
        goto LABEL_37;
      goto LABEL_32;
    }
    v61 = 0;
    v5 = (void *)v26;
    if (!v22)
    {
LABEL_37:
      v23 = v61;
      goto LABEL_38;
    }
LABEL_32:
    v67 = v61;
    v37 = objc_msgSend(v22, "writeFromBuffer:error:", v24, &v67);
    v23 = v67;

    if ((v37 & 1) == 0)
    {
      sub_1D4501768();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v23, "localizedDescription");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v71 = v39;
        _os_log_impl(&dword_1D42A7000, v38, OS_LOG_TYPE_ERROR, "Error in writing PCMBuffer to wav file: %@", buf, 0xCu);

      }
    }
LABEL_38:

    ++v21;
  }

  sub_1D4501768();
  v40 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v5, "absoluteString");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v71 = v41;
    _os_log_impl(&dword_1D42A7000, v40, OS_LOG_TYPE_DEBUG, "Written WavFile at %@", buf, 0xCu);

  }
  v42 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(v5, "absoluteString");
  v43 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "fileURLWithPath:", v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  v66 = v61;
  LOBYTE(v43) = +[SNFileUtils addPurgeablePropertyToURL:error:](SNFileUtils, "addPurgeablePropertyToURL:error:", v44, &v66);
  v45 = v66;

  if ((v43 & 1) == 0)
  {
    sub_1D4501768();
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v5, "absoluteString");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "localizedDescription");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v71 = v47;
      v72 = 2112;
      v73 = v48;
      _os_log_impl(&dword_1D42A7000, v46, OS_LOG_TYPE_ERROR, "Error adding purgeable property to the file: %@, Error: %@", buf, 0x16u);

    }
  }

LABEL_46:
  sub_1D4501768();
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D42A7000, v49, OS_LOG_TYPE_DEBUG, "Generate Shazam Signature", buf, 2u);
  }

  if (objc_msgSend(*(id *)(a1 + 792), "count"))
  {
    v50 = 0;
    do
    {
      v51 = *(void **)(a1 + 784);
      objc_msgSend(*(id *)(a1 + 792), "objectAtIndexedSubscript:", v50);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = (void *)objc_msgSend(v52, "mutableCopy");
      objc_msgSend(*(id *)(a1 + 800), "objectAtIndexedSubscript:", v50);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = 0;
      v55 = objc_msgSend(v51, "appendBuffer:atTime:error:", v53, v54, &v65);
      v56 = v65;

      if ((v55 & 1) == 0)
      {
        sub_1D44DA4C4(buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_ShazamBox.mm");
        sub_1D44DA4C4(v64, "generateSignature");
        sub_1D44DA4C4(v63, "Error appending buffer to Shazam signature generator");
        DSPGraph::ThrowException();
        __break(1u);
      }

      ++v50;
    }
    while (v50 < objc_msgSend(*(id *)(a1 + 792), "count"));
  }
  objc_msgSend(*(id *)(a1 + 784), "signature");
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1D44E4924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1D44E4B70(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint8_t v5[16];

  sub_1D4501768();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1D42A7000, v2, OS_LOG_TYPE_DEBUG, "Reset Shazam Signature", v5, 2u);
  }

  v3 = objc_alloc_init(MEMORY[0x1E0CD7518]);
  v4 = *(void **)(a1 + 784);
  *(_QWORD *)(a1 + 784) = v3;

}

void sub_1D44E4BF4(id *a1)
{
  sub_1D44E4C3C(a1);
  JUMPOUT(0x1D825DA8CLL);
}

const char *sub_1D44E4C18()
{
  return "ShazamBox";
}

double sub_1D44E4C24@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 16) = 0;
  result = *(double *)"xfuamzhsxoba";
  *(_OWORD *)a1 = *(_OWORD *)"xfuamzhsxoba";
  return result;
}

void sub_1D44E4C3C(id *a1)
{

  DSPGraph::Box::~Box((DSPGraph::Box *)a1);
}

uint64_t sub_1D44E4C7C(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  size_t v5;
  char *v6;
  int v7;
  const void **v8;
  char *v9;
  size_t v10;

  if (*(_DWORD *)(result + 36) < a2)
  {
    v2 = result;
    v3 = *(_DWORD *)(result + 24);
    if (v3 <= 1)
      v4 = a2;
    else
      v4 = (a2 + 15) & 0xFFFFFFE0 | 0x10;
    v5 = v4 * v3;
    v6 = (char *)operator new[]();
    bzero(v6, v5);
    v7 = *(_DWORD *)(v2 + 24);
    if (v7)
    {
      v8 = (const void **)(v2 + 40);
      v9 = v6;
      do
      {
        if (*v8)
        {
          v10 = *((unsigned int *)v8 - 1);
          if ((_DWORD)v10)
            memcpy(v9, *v8, v10);
        }
        *((_DWORD *)v8 - 1) = v4;
        *v8 = v9;
        v8 += 2;
        v9 += v4;
        --v7;
      }
      while (v7);
    }
    result = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = v6;
    *(_DWORD *)(v2 + 16) = v4;
    if (result)
      JUMPOUT(0x1D825DA74);
  }
  return result;
}

uint64_t sub_1D44E4D64(int a1)
{
  return 16 * a1 + 28;
}

uint64_t sub_1D44E4D70(void *a1, size_t *a2, int a3)
{
  unint64_t v6;
  size_t v7;

  if ((a3 & 7) != 0)
    return 0;
  v6 = 16 * a3 + 28;
  v7 = *a2;
  if (v7 < v6)
    return 0;
  bzero(a1, v7);
  *a2 = v6;
  *(_DWORD *)((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF0) + 4 * ((4 * a3) | 2)) = -1;
  return 1;
}

BOOL sub_1D44E4DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, float a8)
{
  unint64_t v8;
  uint64_t v9;
  int v10;

  if ((a5 & 7) == 0)
  {
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = a4;
    *(float *)(a1 + 24) = a8;
    *(_DWORD *)(a1 + 28) = a5;
    *(_DWORD *)(a1 + 32) = a6;
    *(_QWORD *)(a1 + 36) = a7;
    v8 = (a7 + 15) & 0xFFFFFFFFFFFFFFF0;
    v9 = (4 * a5) | 2;
    v10 = *(_DWORD *)(v8 + 4 * v9);
    if (v10 < 0)
      v10 += a6 + a6 * (v10 / a6);
    *(_DWORD *)(v8 + 4 * v9) = v10 % a6;
  }
  return (a5 & 7) == 0;
}

uint64_t sub_1D44E4E48(uint64_t a1, int a2)
{
  return ((*(_DWORD *)(((*(_QWORD *)(a1 + 36) + 15) & 0xFFFFFFFFFFFFFFF0)
                                   + 16 * *(int *)(a1 + 28)
                                   + 8)
                       + a2)
                      / *(_DWORD *)(a1 + 32));
}

uint64_t sub_1D44E4E70(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float32x4_t *v19;
  int v20;
  int v21;
  int v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int v45;
  int v46;
  float32x4_t *v47;
  int v48;
  int v49;
  int v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  int v62;
  uint64_t result;
  float32x4_t *v64;
  int v65;
  int v66;
  int v67;
  float32x4_t *v68;
  float32x4_t *v69;
  float32x4_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t *v76;
  const float *v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float *v95;
  float32x4_t v96;
  uint64_t v97;
  float32x4_t *v98;
  int v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  uint64_t v141;
  float32x4_t *v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  int32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int32x4_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float *v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  int8x16_t v177;
  float32x4_t v178;
  unint64_t v179;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;

  v5 = (*(_QWORD *)(a1 + 36) + 15) & 0xFFFFFFFFFFFFFFF0;
  *a5 = (*(_DWORD *)(v5 + 16 * *(int *)(a1 + 28) + 8) + (int)a4) / *(_DWORD *)(a1 + 32);
  v6 = *(int *)(a1 + 28);
  if ((int)v6 >= 1)
  {
    v8 = 0;
    v179 = v5 + 8 * v6;
    v9 = v5 + 16 * v6;
    v10 = (int)((4 * v6) | 2);
    v11 = *(_DWORD *)(v5 + 4 * v10);
    v12 = *(_QWORD *)v9;
    v13 = a4 & 7;
    v167 = (float *)(a1 + 24);
    v165 = a4;
    v14 = v11 + 1;
    v177 = (int8x16_t)vdupq_n_s32(0x7F800000u);
    v178 = (float32x4_t)vdupq_n_s32(0x24E69595u);
    v175 = (float32x4_t)vdupq_n_s32(0x3EE4F4B8u);
    v176 = (float32x4_t)vdupq_n_s32(0xBD67B6D6);
    v173 = (float32x4_t)vdupq_n_s32(0x40348E95u);
    v174 = (float32x4_t)vdupq_n_s32(0xBFBC278B);
    v171 = (float32x4_t)vdupq_n_s32(0x3F317218u);
    v172 = (float32x4_t)vdupq_n_s32(0xBFDEF31A);
    v164 = a3 + 64;
    v170 = a4;
    v169 = a3;
    v168 = v13;
    v166 = *(_QWORD *)v9;
    do
    {
      v15 = v6 - v8;
      *(_DWORD *)(v5 + 4 * v10) = v11;
      *(_QWORD *)v9 = v12;
      v16 = *(_DWORD *)(a1 + 28);
      if (!v13 && v16 == 32 && v15 == 32)
      {
        v17 = *(_DWORD *)(a1 + 32);
        v18 = v11 + 1;
        if (v11 <= -2)
          v18 = v17 + v17 * (v14 / v17) + v14;
        v19 = (float32x4_t *)(a3 + 4 * v8);
        v20 = *a5;
        v21 = sub_1D42AA70C((v18 % v17), a2, v19, a4, (uint64_t *)v9, (float *)(v5 + 4 * v8), (float32x4_t *)(v179 + 4 * v8), v167, v17, (float32x4_t *)(*(_QWORD *)a1 + 32 * v8), (float32x4_t *)(*(_QWORD *)(a1 + 8) + 32 * v8), (float32x4_t *)(*(_QWORD *)(a1 + 16) + 32 * v8));
        v22 = v21 - 1;
        if (v21 <= 0)
          v22 += v17 + v17 * (v22 / v17);
        *(_DWORD *)(v5 + 4 * v10) = v22 % v17;
        a4 = v170;
        a3 = v169;
        v13 = v168;
        if (v20 >= 1)
        {
          do
          {
            v23 = vaddq_f32(*v19, v178);
            v24 = vaddq_f32(v19[1], v178);
            v25 = vdivq_f32(v23, (float32x4_t)vandq_s8((int8x16_t)v23, v177));
            v26 = vdivq_f32(v24, (float32x4_t)vandq_s8((int8x16_t)v24, v177));
            v27.i64[0] = 0x7E0000007ELL;
            v27.i64[1] = 0x7E0000007ELL;
            v28 = vsraq_n_s32(v27, (int32x4_t)v24, 0x17uLL);
            v24.i64[0] = 0x7E0000007ELL;
            v24.i64[1] = 0x7E0000007ELL;
            *v19 = vmlaq_f32(vmlaq_f32(v172, v25, vmlaq_f32(v173, v25, vmlaq_f32(v174, v25, vmlaq_f32(v175, v176, v25)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v24, (int32x4_t)v23, 0x17uLL)));
            v19[1] = vmlaq_f32(vmlaq_f32(v172, v26, vmlaq_f32(v173, v26, vmlaq_f32(v174, v26, vmlaq_f32(v175, v176, v26)))), v171, vcvtq_f32_s32(v28));
            v29 = vaddq_f32(v19[2], v178);
            v30 = vaddq_f32(v19[3], v178);
            v31 = vdivq_f32(v29, (float32x4_t)vandq_s8((int8x16_t)v29, v177));
            v32 = vdivq_f32(v30, (float32x4_t)vandq_s8((int8x16_t)v30, v177));
            v28.i64[0] = 0x7E0000007ELL;
            v28.i64[1] = 0x7E0000007ELL;
            v33 = vsraq_n_s32(v28, (int32x4_t)v30, 0x17uLL);
            v30.i64[0] = 0x7E0000007ELL;
            v30.i64[1] = 0x7E0000007ELL;
            v19[2] = vmlaq_f32(vmlaq_f32(v172, v31, vmlaq_f32(v173, v31, vmlaq_f32(v174, v31, vmlaq_f32(v175, v176, v31)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v30, (int32x4_t)v29, 0x17uLL)));
            v19[3] = vmlaq_f32(vmlaq_f32(v172, v32, vmlaq_f32(v173, v32, vmlaq_f32(v174, v32, vmlaq_f32(v175, v176, v32)))), v171, vcvtq_f32_s32(v33));
            v34 = vaddq_f32(v19[4], v178);
            v35 = vaddq_f32(v19[5], v178);
            v36 = vdivq_f32(v34, (float32x4_t)vandq_s8((int8x16_t)v34, v177));
            v37 = vdivq_f32(v35, (float32x4_t)vandq_s8((int8x16_t)v35, v177));
            v33.i64[0] = 0x7E0000007ELL;
            v33.i64[1] = 0x7E0000007ELL;
            v38 = vsraq_n_s32(v33, (int32x4_t)v35, 0x17uLL);
            v35.i64[0] = 0x7E0000007ELL;
            v35.i64[1] = 0x7E0000007ELL;
            v19[4] = vmlaq_f32(vmlaq_f32(v172, v36, vmlaq_f32(v173, v36, vmlaq_f32(v174, v36, vmlaq_f32(v175, v176, v36)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v35, (int32x4_t)v34, 0x17uLL)));
            v19[5] = vmlaq_f32(vmlaq_f32(v172, v37, vmlaq_f32(v173, v37, vmlaq_f32(v174, v37, vmlaq_f32(v175, v176, v37)))), v171, vcvtq_f32_s32(v38));
            v39 = vaddq_f32(v19[6], v178);
            v40 = vaddq_f32(v19[7], v178);
            v41 = vdivq_f32(v39, (float32x4_t)vandq_s8((int8x16_t)v39, v177));
            v42 = vdivq_f32(v40, (float32x4_t)vandq_s8((int8x16_t)v40, v177));
            v38.i64[0] = 0x7E0000007ELL;
            v38.i64[1] = 0x7E0000007ELL;
            v43 = vsraq_n_s32(v38, (int32x4_t)v40, 0x17uLL);
            v40.i64[0] = 0x7E0000007ELL;
            v40.i64[1] = 0x7E0000007ELL;
            v19[6] = vmlaq_f32(vmlaq_f32(v172, v41, vmlaq_f32(v173, v41, vmlaq_f32(v174, v41, vmlaq_f32(v175, v176, v41)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v40, (int32x4_t)v39, 0x17uLL)));
            v19[7] = vmlaq_f32(vmlaq_f32(v172, v42, vmlaq_f32(v173, v42, vmlaq_f32(v174, v42, vmlaq_f32(v175, v176, v42)))), v171, vcvtq_f32_s32(v43));
            v19 += 8;
            --v20;
          }
          while (v20);
        }
      }
      else
      {
        if (!v13 && v16 == 16 && v15 == 16)
        {
          v45 = *(_DWORD *)(a1 + 32);
          v46 = v11 + 1;
          if (v11 <= -2)
            v46 = v45 + v45 * (v14 / v45) + v14;
          v47 = (float32x4_t *)(a3 + 4 * v8);
          v48 = *a5;
          v49 = sub_1D42A9FF8((v46 % v45), a2, v47, a4, (uint64_t *)v9, (float *)(v5 + 4 * v8), (float32x4_t *)(v179 + 4 * v8), v167, v45, (float32x4_t *)(*(_QWORD *)a1 + 32 * v8), (float32x4_t *)(*(_QWORD *)(a1 + 8) + 32 * v8), (float32x4_t *)(*(_QWORD *)(a1 + 16) + 32 * v8));
          v50 = v49 - 1;
          if (v49 <= 0)
            v50 += v45 + v45 * (v50 / v45);
          *(_DWORD *)(v5 + 4 * v10) = v50 % v45;
          a4 = v170;
          a3 = v169;
          v13 = v168;
          if (v48 >= 1)
          {
            do
            {
              v51 = vaddq_f32(*v47, v178);
              v52 = vaddq_f32(v47[1], v178);
              v53 = vdivq_f32(v51, (float32x4_t)vandq_s8((int8x16_t)v51, v177));
              v54 = vdivq_f32(v52, (float32x4_t)vandq_s8((int8x16_t)v52, v177));
              v55.i64[0] = 0x7E0000007ELL;
              v55.i64[1] = 0x7E0000007ELL;
              v56 = vsraq_n_s32(v55, (int32x4_t)v52, 0x17uLL);
              v52.i64[0] = 0x7E0000007ELL;
              v52.i64[1] = 0x7E0000007ELL;
              *v47 = vmlaq_f32(vmlaq_f32(v172, v53, vmlaq_f32(v173, v53, vmlaq_f32(v174, v53, vmlaq_f32(v175, v176, v53)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v52, (int32x4_t)v51, 0x17uLL)));
              v47[1] = vmlaq_f32(vmlaq_f32(v172, v54, vmlaq_f32(v173, v54, vmlaq_f32(v174, v54, vmlaq_f32(v175, v176, v54)))), v171, vcvtq_f32_s32(v56));
              v57 = vaddq_f32(v47[2], v178);
              v58 = vaddq_f32(v47[3], v178);
              v59 = vdivq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v57, v177));
              v60 = vdivq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v58, v177));
              v56.i64[0] = 0x7E0000007ELL;
              v56.i64[1] = 0x7E0000007ELL;
              v61 = vsraq_n_s32(v56, (int32x4_t)v58, 0x17uLL);
              v58.i64[0] = 0x7E0000007ELL;
              v58.i64[1] = 0x7E0000007ELL;
              v47[2] = vmlaq_f32(vmlaq_f32(v172, v59, vmlaq_f32(v173, v59, vmlaq_f32(v174, v59, vmlaq_f32(v175, v176, v59)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v58, (int32x4_t)v57, 0x17uLL)));
              v47[3] = vmlaq_f32(vmlaq_f32(v172, v60, vmlaq_f32(v173, v60, vmlaq_f32(v174, v60, vmlaq_f32(v175, v176, v60)))), v171, vcvtq_f32_s32(v61));
              v47 += 4;
              --v48;
            }
            while (v48);
          }
          v62 = 16;
          goto LABEL_37;
        }
        result = 0;
        if (v15 < 32 || (v16 & 7) != 0)
          return result;
        v64 = (float32x4_t *)(a3 + 4 * v8);
        v65 = *a5;
        v66 = v16 / 8;
        v67 = v11;
        if ((int)a4 >= 1)
        {
          v68 = (float32x4_t *)(v5 + 4 * v8);
          v69 = (float32x4_t *)(*(_QWORD *)a1 + 32 * v8);
          v70 = v69[2];
          v183 = *v69;
          v184 = v69[1];
          v71 = (float32x4_t *)(v179 + 4 * v8);
          v72 = v69[4];
          v182 = v69[3];
          v73 = (float32x4_t *)(*(_QWORD *)(a1 + 8) + 32 * v8);
          v74 = v69[5];
          v75 = v69[6];
          v76 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + 32 * v8);
          v77 = (const float *)(a1 + 24);
          v78 = v69[7];
          v80 = *v73;
          v79 = v73[1];
          v82 = v73[2];
          v81 = v73[3];
          v84 = v73[4];
          v83 = v73[5];
          v86 = v73[6];
          v85 = v73[7];
          v88 = *v76;
          v87 = v76[1];
          v90 = v76[2];
          v89 = v76[3];
          v92 = v76[4];
          v91 = v76[5];
          v94 = v76[6];
          v93 = v76[7];
          v95 = (float *)a2;
          v96 = vld1q_dup_f32(v77);
          v97 = v165;
          v67 = v11;
          v98 = (float32x4_t *)(a3 + 4 * v8);
          v99 = *(_DWORD *)(a1 + 32);
          do
          {
            v100 = *v95 - *(float *)(v9 + 4);
            *(_DWORD *)(v9 + 4) = *(_DWORD *)v9;
            *(float *)v9 = *v95;
            v101 = vmlaq_n_f32(v68[1], v184, v100);
            v102 = vmlaq_n_f32(*v68, v183, v100);
            v103 = vmlaq_n_f32(v68[3], v182, v100);
            v104 = vmlaq_n_f32(v68[2], v70, v100);
            v105 = vmlaq_n_f32(v68[5], v74, v100);
            v106 = vmlaq_n_f32(v68[4], v72, v100);
            v107 = vmlaq_n_f32(v68[7], v78, v100);
            v108 = vmlaq_n_f32(v68[6], v75, v100);
            v109 = vmlaq_f32(v68[9], v101, v79);
            *v68 = vmlaq_f32(v68[8], v102, v80);
            v68[1] = v109;
            v110 = vmlaq_f32(v68[11], v103, v81);
            v68[2] = vmlaq_f32(v68[10], v104, v82);
            v68[3] = v110;
            v111 = vmlaq_f32(v68[13], v105, v83);
            v68[4] = vmlaq_f32(v68[12], v106, v84);
            v68[5] = v111;
            v112 = vmlaq_f32(v68[15], v107, v85);
            v68[6] = vmlaq_f32(v68[14], v108, v86);
            v68[7] = v112;
            v68[8] = vmulq_f32(v88, v102);
            v68[9] = vmulq_f32(v87, v101);
            v68[10] = vmulq_f32(v90, v104);
            v68[11] = vmulq_f32(v89, v103);
            v68[12] = vmulq_f32(v92, v106);
            v68[13] = vmulq_f32(v91, v105);
            v68[14] = vmulq_f32(v94, v108);
            v68[15] = vmulq_f32(v93, v107);
            v113 = vmulq_f32(v101, v101);
            v114 = vmulq_f32(v102, v102);
            v115 = vmulq_f32(v103, v103);
            v116 = vmulq_f32(v104, v104);
            v117 = vmulq_f32(v105, v105);
            v118 = vmulq_f32(v106, v106);
            v119 = vmulq_f32(v107, v107);
            v120 = vmulq_f32(v108, v108);
            v121 = vmlaq_f32(v113, v96, vsubq_f32(v71[1], v113));
            v122 = vmlaq_f32(v114, v96, vsubq_f32(*v71, v114));
            v123 = vmlaq_f32(v115, v96, vsubq_f32(v71[3], v115));
            v124 = vmlaq_f32(v116, v96, vsubq_f32(v71[2], v116));
            v125 = vmlaq_f32(v117, v96, vsubq_f32(v71[5], v117));
            v126 = vmlaq_f32(v118, v96, vsubq_f32(v71[4], v118));
            v127 = vsubq_f32(v71[6], v120);
            v128 = vsubq_f32(v71[7], v119);
            *v71 = v122;
            v71[1] = v121;
            v71[2] = v124;
            v71[3] = v123;
            v129 = vmlaq_f32(v119, v96, v128);
            v130 = vmlaq_f32(v120, v96, v127);
            v131 = vmlaq_f32(v121, v96, vsubq_f32(v71[9], v121));
            v132 = vmlaq_f32(v122, v96, vsubq_f32(v71[8], v122));
            v133 = vmlaq_f32(v123, v96, vsubq_f32(v71[11], v123));
            v134 = vmlaq_f32(v124, v96, vsubq_f32(v71[10], v124));
            v71[4] = v126;
            v71[5] = v125;
            v71[10] = v134;
            v71[11] = v133;
            v135 = vmlaq_f32(v125, v96, vsubq_f32(v71[13], v125));
            v136 = vmlaq_f32(v126, v96, vsubq_f32(v71[12], v126));
            v71[6] = v130;
            v71[7] = v129;
            v71[12] = v136;
            v71[13] = v135;
            v137 = vmlaq_f32(v129, v96, vsubq_f32(v71[15], v129));
            v71[14] = vmlaq_f32(v130, v96, vsubq_f32(v71[14], v130));
            v71[15] = v137;
            v71[8] = v132;
            v71[9] = v131;
            if (++v67 >= v99)
            {
              v67 = 0;
              *v98 = v132;
              v98[1] = v131;
              v138 = v71[11];
              v98[2] = v71[10];
              v98[3] = v138;
              v139 = v71[13];
              v98[4] = v71[12];
              v98[5] = v139;
              v140 = v71[15];
              v98[6] = v71[14];
              v98[7] = v140;
              v98 += 2 * v66;
            }
            ++v95;
            --v97;
          }
          while (v97);
        }
        *(_DWORD *)(v5 + 4 * v10) = v67;
        if (v65 < 1)
        {
          v62 = 32;
          v12 = v166;
          goto LABEL_37;
        }
        v141 = 32 * v66;
        v142 = (float32x4_t *)(v164 + 4 * v8);
        v12 = v166;
        do
        {
          v143 = vaddq_f32(v64[1], v178);
          v144 = vaddq_f32(*v64, v178);
          v145 = vdivq_f32(v143, (float32x4_t)vandq_s8((int8x16_t)v143, v177));
          v146 = vdivq_f32(v144, (float32x4_t)vandq_s8((int8x16_t)v144, v177));
          v147.i64[0] = 0x7E0000007ELL;
          v147.i64[1] = 0x7E0000007ELL;
          v148 = vsraq_n_s32(v147, (int32x4_t)v144, 0x17uLL);
          v144.i64[0] = 0x7E0000007ELL;
          v144.i64[1] = 0x7E0000007ELL;
          v142[-4] = vmlaq_f32(vmlaq_f32(v172, v146, vmlaq_f32(v173, v146, vmlaq_f32(v174, v146, vmlaq_f32(v175, v176, v146)))), v171, vcvtq_f32_s32(v148));
          v142[-3] = vmlaq_f32(vmlaq_f32(v172, v145, vmlaq_f32(v173, v145, vmlaq_f32(v174, v145, vmlaq_f32(v175, v176, v145)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v144, (int32x4_t)v143, 0x17uLL)));
          v149 = vaddq_f32(v64[3], v178);
          v150 = vaddq_f32(v64[2], v178);
          v151 = vdivq_f32(v149, (float32x4_t)vandq_s8((int8x16_t)v149, v177));
          v152 = vdivq_f32(v150, (float32x4_t)vandq_s8((int8x16_t)v150, v177));
          v148.i64[0] = 0x7E0000007ELL;
          v148.i64[1] = 0x7E0000007ELL;
          v153 = vsraq_n_s32(v148, (int32x4_t)v150, 0x17uLL);
          v150.i64[0] = 0x7E0000007ELL;
          v150.i64[1] = 0x7E0000007ELL;
          v142[-2] = vmlaq_f32(vmlaq_f32(v172, v152, vmlaq_f32(v173, v152, vmlaq_f32(v174, v152, vmlaq_f32(v175, v176, v152)))), v171, vcvtq_f32_s32(v153));
          v142[-1] = vmlaq_f32(vmlaq_f32(v172, v151, vmlaq_f32(v173, v151, vmlaq_f32(v174, v151, vmlaq_f32(v175, v176, v151)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v150, (int32x4_t)v149, 0x17uLL)));
          v154 = vaddq_f32(v64[5], v178);
          v155 = vaddq_f32(v64[4], v178);
          v156 = vdivq_f32(v154, (float32x4_t)vandq_s8((int8x16_t)v154, v177));
          v157 = vdivq_f32(v155, (float32x4_t)vandq_s8((int8x16_t)v155, v177));
          v153.i64[0] = 0x7E0000007ELL;
          v153.i64[1] = 0x7E0000007ELL;
          v158 = vsraq_n_s32(v153, (int32x4_t)v155, 0x17uLL);
          v155.i64[0] = 0x7E0000007ELL;
          v155.i64[1] = 0x7E0000007ELL;
          *v142 = vmlaq_f32(vmlaq_f32(v172, v157, vmlaq_f32(v173, v157, vmlaq_f32(v174, v157, vmlaq_f32(v175, v176, v157)))), v171, vcvtq_f32_s32(v158));
          v142[1] = vmlaq_f32(vmlaq_f32(v172, v156, vmlaq_f32(v173, v156, vmlaq_f32(v174, v156, vmlaq_f32(v175, v176, v156)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v155, (int32x4_t)v154, 0x17uLL)));
          v159 = vaddq_f32(v64[7], v178);
          v160 = vaddq_f32(v64[6], v178);
          v161 = vdivq_f32(v159, (float32x4_t)vandq_s8((int8x16_t)v159, v177));
          v162 = vdivq_f32(v160, (float32x4_t)vandq_s8((int8x16_t)v160, v177));
          v158.i64[0] = 0x7E0000007ELL;
          v158.i64[1] = 0x7E0000007ELL;
          v163 = vsraq_n_s32(v158, (int32x4_t)v160, 0x17uLL);
          v160.i64[0] = 0x7E0000007ELL;
          v160.i64[1] = 0x7E0000007ELL;
          v142[2] = vmlaq_f32(vmlaq_f32(v172, v162, vmlaq_f32(v173, v162, vmlaq_f32(v174, v162, vmlaq_f32(v175, v176, v162)))), v171, vcvtq_f32_s32(v163));
          v142[3] = vmlaq_f32(vmlaq_f32(v172, v161, vmlaq_f32(v173, v161, vmlaq_f32(v174, v161, vmlaq_f32(v175, v176, v161)))), v171, vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v160, (int32x4_t)v159, 0x17uLL)));
          v142 = (float32x4_t *)((char *)v142 + v141);
          v64 += 8;
          --v65;
        }
        while (v65);
      }
      v62 = 32;
LABEL_37:
      v8 += v62;
      LODWORD(v6) = *(_DWORD *)(a1 + 28);
    }
    while ((int)v8 < (int)v6);
  }
  return 1;
}

id sub_1D44E59C8(uint64_t a1, void *a2, int *a3, int a4, int *a5, int a6, uint64_t a7)
{
  id v11;
  id v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  void *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  int *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  int v53;
  uint64_t v54;
  int v55;
  float *v56;
  int *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  int v67;
  void *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  int v74;
  vDSP_Length v75;
  vDSP_Length v76;
  double v77;
  uint64_t v78;
  int *v79;
  float *v80;
  uint64_t v81;
  int v82;
  int *v83;
  float *v84;
  uint64_t v85;
  int v86;
  float *v87;
  float *v88;
  uint64_t v89;
  float v90;
  float v91;
  float *v92;
  float *v93;
  uint64_t v94;
  float v95;
  float v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  id v101;
  uint64_t v102;
  float *v103;
  const float *v104;
  float *v105;
  uint64_t v106;
  float v107;
  float v108;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  id v115;
  void *v116;
  float *__A;
  int v118;
  float *v119;
  uint64_t v120;
  float *__B;
  int v122;
  float *v123;
  float *__C;
  int v125;
  float *v126;
  float *v127;
  float *v128;
  uint64_t v129;
  uint64_t v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  void *v137;
  void *v138;
  _QWORD v139[2];
  void *v140;
  void *v141;
  _QWORD v142[3];

  v142[1] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = objc_alloc(MEMORY[0x1E0C9E970]);
  v13 = 0x1E0CB3000uLL;
  v129 = a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v142[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v142, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v12, "initWithShape:dataType:error:", v15, 65568, a7);

  if (v16)
  {
    v115 = objc_retainAutorelease(v16);
    __B = (float *)objc_msgSend(v115, "dataPointer");
    v17 = objc_alloc(MEMORY[0x1E0C9E970]);
    v136 = a6;
    v18 = (a6 + a4);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v141 = v19;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v141, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend(v17, "initWithShape:dataType:error:", v20, 65568, a7);

    if (v21)
    {
      v137 = v11;
      v116 = v21;
      __C = (float *)objc_msgSend(objc_retainAutorelease(v21), "dataPointer");
      v22 = objc_alloc(MEMORY[0x1E0C9E970]);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v140 = v23;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v140, 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = (void *)objc_msgSend(v22, "initWithShape:dataType:error:", v24, 65568, a7);

      if (v25)
      {
        v125 = a4;
        v123 = (float *)objc_msgSend(objc_retainAutorelease(v25), "dataPointer");
        v26 = objc_alloc(MEMORY[0x1E0C9E970]);
        v27 = v129;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v129);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v139[0] = v28;
        v118 = v18;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v139[1] = v29;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v139, 2);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = (void *)objc_msgSend(v26, "initWithShape:dataType:error:", v30, 65568, a7);

        if (v31)
        {
          v120 = a7;
          v114 = v16;
          v112 = v31;
          v32 = objc_retainAutorelease(v31);
          v33 = objc_msgSend(v32, "dataPointer");
          objc_msgSend(v32, "strides");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "objectAtIndexedSubscript:", 0);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = objc_msgSend(v35, "intValue");

          objc_msgSend(v32, "strides");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "objectAtIndexedSubscript:", 1);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = objc_msgSend(v38, "intValue");

          v113 = v25;
          __A = (float *)v33;
          if ((int)v129 <= 0)
          {
            v69 = v125;
            v71 = v125;
            v70 = v36;
            v134 = v136;
            v135 = v125;
            v132 = v129;
            v68 = v137;
          }
          else
          {
            v40 = 0;
            v110 = v39;
            v111 = v36;
            v132 = v129;
            v126 = (float *)(4 * v36);
            v41 = 4 * v39;
            v42 = (_DWORD *)v33;
            v43 = v125;
            v135 = v125;
            do
            {
              v44 = a3;
              v133 = v42;
              v45 = v125;
              if (v43 >= 1)
              {
                do
                {
                  v46 = (void *)MEMORY[0x1E0C99D20];
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 0);
                  v47 = (void *)objc_claimAutoreleasedReturnValue();
                  v48 = *v44++;
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v48);
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v40);
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v46, "arrayWithObjects:", v47, v49, v50, 0);
                  v51 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v137, "objectForKeyedSubscript:", v51);
                  v52 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v52, "floatValue");
                  *v42 = v53;

                  v13 = 0x1E0CB3000uLL;
                  v42 = (_DWORD *)((char *)v42 + v41);
                  --v45;
                }
                while (v45);
              }
              ++v40;
              v43 = v125;
              v42 = (_DWORD *)((char *)v126 + (_QWORD)v133);
            }
            while (v40 != v129);
            v54 = 0;
            v55 = v136;
            v134 = v136;
            v56 = &__A[(int)v110 * (uint64_t)v125];
            do
            {
              v57 = a5;
              v127 = v56;
              v58 = v136;
              if (v55 >= 1)
              {
                do
                {
                  v59 = (void *)MEMORY[0x1E0C99D20];
                  objc_msgSend(*(id *)(v13 + 2024), "numberWithInteger:", 0);
                  v60 = (void *)objc_claimAutoreleasedReturnValue();
                  v61 = *v57++;
                  objc_msgSend(*(id *)(v13 + 2024), "numberWithInteger:", v61);
                  v62 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(*(id *)(v13 + 2024), "numberWithInteger:", v54);
                  v63 = v54;
                  v64 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v59, "arrayWithObjects:", v60, v62, v64, 0);
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v137, "objectForKeyedSubscript:", v65);
                  v66 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v66, "floatValue");
                  *(_DWORD *)v56 = v67;

                  v13 = 0x1E0CB3000;
                  v54 = v63;

                  v56 += v110;
                  --v58;
                }
                while (v58);
              }
              ++v54;
              v56 = &v127[v111];
              v55 = v136;
            }
            while (v54 != v129);
            bzero(__B, 4 * v129);
            v68 = v137;
            v69 = v125;
            v27 = v129;
            v71 = v125;
            v70 = v111;
          }
          v73 = objc_msgSend(objc_retainAutorelease(v68), "dataPointer");
          v74 = 0;
          v75 = v27;
          v76 = v118;
          v77 = -0.03 / (double)v118;
          v128 = &__C[v71];
          v119 = &v123[v71];
          v78 = 4 * v70;
          while (1)
          {
            v122 = v74;
            v79 = a3;
            v80 = __C;
            v81 = v135;
            if (v69 >= 1)
            {
              do
              {
                v82 = *v79++;
                vDSP_dotpr((const float *)(v73 + 4 * v82 * (int)v129), 1, __B, 1, v80++, v75);
                --v81;
              }
              while (v81);
            }
            v83 = a5;
            v84 = v128;
            v85 = v134;
            if (v136 >= 1)
            {
              do
              {
                v86 = *v83++;
                vDSP_dotpr((const float *)(v73 + 4 * v86 * (int)v129), 1, __B, 1, v84++, v75);
                --v85;
              }
              while (v85);
            }
            v88 = v123;
            v87 = __C;
            v89 = v135;
            if (v69 >= 1)
            {
              do
              {
                v90 = *v87++;
                v91 = 1.0 / (exp((float)-v90) + 1.0) + -1.0;
                *v88++ = v91;
                --v89;
              }
              while (v89);
            }
            v92 = v128;
            v93 = v119;
            v94 = v134;
            if (v136 >= 1)
            {
              do
              {
                v95 = *v92++;
                v96 = 1.0 / (exp((float)-v95) + 1.0);
                *v93++ = v96;
                --v94;
              }
              while (v94);
            }
            v97 = objc_alloc(MEMORY[0x1E0C9E970]);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v129);
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            v138 = v98;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v138, 1);
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            v100 = (void *)objc_msgSend(v97, "initWithShape:dataType:error:", v99, 65568, v120);

            if (!v100)
              break;
            v101 = objc_retainAutorelease(v100);
            v102 = objc_msgSend(v101, "dataPointer");
            if ((int)v129 >= 1)
            {
              v103 = (float *)v102;
              v104 = __A;
              v105 = __B;
              v106 = v132;
              do
              {
                vDSP_dotpr(v104, 1, v123, 1, v103, v76);
                v107 = *v103++;
                v108 = *v105 + v77 * v107;
                *v105++ = v108;
                v104 = (const float *)((char *)v104 + v78);
                --v106;
              }
              while (v106);
            }

            v74 = v122 + 1;
            v69 = v125;
            if (v122 == 1499)
            {
              v72 = v115;
              goto LABEL_36;
            }
          }
          v72 = 0;
LABEL_36:
          v25 = v113;
          v16 = v114;
          v31 = v112;
        }
        else
        {
          v72 = 0;
        }

      }
      else
      {
        v72 = 0;
      }
      v21 = v116;

      v11 = v137;
    }
    else
    {
      v72 = 0;
    }

  }
  else
  {
    v72 = 0;
  }

  return v72;
}

uint64_t sub_1D44E6238(int a1, uint32_t __upper_bound)
{
  return arc4random_uniform(__upper_bound);
}

uint64_t sub_1D44E62C4(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1103515245
                                                              * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 24)
                                                              + 12345;
  return (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 26) & 0x7FFFu) % a2;
}

id sub_1D44E6300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  _DWORD *v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  id v22;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v6 = objc_alloc(MEMORY[0x1E0C9E970]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v6, "initWithShape:dataType:error:", v8, 65568, a3);

  if (v9)
  {
    v10 = objc_retainAutorelease(v9);
    v11 = objc_msgSend(v10, "dataPointer");
    v12 = objc_alloc(MEMORY[0x1E0C9E970]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v13;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v24, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)objc_msgSend(v12, "initWithShape:dataType:error:", v14, 65568, a3);

    if (v15)
    {
      v16 = (_DWORD *)objc_msgSend(objc_retainAutorelease(v15), "dataPointer");
      *v16 = 0;
      if ((int)a2 >= 2)
      {
        v17 = 0;
        v18 = (float *)(v16 + 1);
        do
        {
          v19 = v17 + 1;
          v20 = *(v18 - 1) + *(float *)(a1 + 4 + 4 * v17);
          *v18 = v20;
          v21 = 0.0;
          if ((unint64_t)(v17 + 1) >= 0x14)
            v21 = (float)(v20 - *(v18 - 20)) / 20.0;
          *(float *)(v11 + 4 * v17) = v21;
          ++v18;
          ++v17;
        }
        while (a2 - 1 != v19);
      }
      v22 = v10;
    }
    else
    {
      v22 = 0;
    }

  }
  else
  {
    v22 = 0;
  }

  return v22;
}

id sub_1D44E64F4(float *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _DWORD *v11;
  uint64_t v12;
  id v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v6 = objc_alloc(MEMORY[0x1E0C9E970]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v6, "initWithShape:dataType:error:", v8, 131104, a3);

  if (v9)
  {
    v10 = objc_retainAutorelease(v9);
    v11 = (_DWORD *)objc_msgSend(v10, "dataPointer");
    if ((int)a2 >= 1)
    {
      v12 = a2;
      do
      {
        *v11 = 0;
        if (*a1 > 0.8)
          *v11 = 1;
        ++a1;
        ++v11;
        --v12;
      }
      while (v12);
    }
    v13 = v10;
  }

  return v9;
}

id sub_1D44E6624(uint64_t a1, int a2, int a3, int a4, int32_t a5, void *a6, uint64_t a7, float a8)
{
  id v15;
  void *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  SNKShotSegment *v50;
  id v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int64_t v56;
  void *v58;
  id v59;
  CMTimeRange v60;
  CMTime end;
  CMTime start;
  CMTimeRange v63;
  void *v64;
  _QWORD v65[3];

  v65[1] = *MEMORY[0x1E0C80C00];
  v15 = a6;
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E970]), "initWithShape:dataType:error:", &unk_1E97DA5F0, 131104, a7);
  if (!v16)
  {
    v22 = 0;
    goto LABEL_46;
  }
  v59 = v16;
  v17 = objc_msgSend(objc_retainAutorelease(v16), "dataPointer");
  v18 = (int *)v17;
  if (a2 < 2)
  {
    v20 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    do
    {
      if (*(_DWORD *)(a1 + 4 * v19) != *(_DWORD *)(a1 + 4 * v19 + 4))
      {
        if ((int)v19 <= 20)
          v21 = 20;
        else
          v21 = v19;
        *(_DWORD *)(v17 + 4 * v20++) = v21 - 20;
      }
      ++v19;
    }
    while (a2 - 1 != v19);
  }
  v23 = objc_alloc(MEMORY[0x1E0C9E970]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (v20 + 1));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v65[0] = v24;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v65, 1);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = (void *)objc_msgSend(v23, "initWithShape:dataType:error:", v25, 131104, a7);

  if (!v26)
  {
    v22 = 0;
    goto LABEL_45;
  }
  v27 = objc_msgSend(objc_retainAutorelease(v26), "dataPointer");
  v28 = v27;
  v58 = v26;
  if (v20 < 1)
  {
    v30 = 0;
    goto LABEL_30;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 1;
  v33 = v20;
  do
  {
    v34 = *v18;
    if ((v32 & 1) == 0)
    {
      v29 = 1;
      v31 = *v18;
      goto LABEL_24;
    }
    if ((v29 & 1) == 0)
    {
      v36 = 1;
      v35 = v30;
      goto LABEL_22;
    }
    if (v34 - v31 > a3)
    {
      *(_DWORD *)(v27 + 4 * (int)v30) = v31;
      v35 = v30 + 1;
      v34 = *v18;
      v36 = 2;
LABEL_22:
      *(_DWORD *)(v27 + 4 * v35) = v34;
      v30 = (v36 + v30);
      goto LABEL_24;
    }
    v29 = 1;
LABEL_24:
    v32 ^= 1u;
    ++v18;
    --v33;
  }
  while (v33);
  if ((int)v30 > 0 && v31 != *(_DWORD *)(v27 + 4 * (v30 - 1)))
  {
    *(_DWORD *)(v27 + 4 * v30) = v31;
    v30 = (v30 + 1);
  }
LABEL_30:
  v37 = objc_alloc(MEMORY[0x1E0C9E970]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v30);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = v38;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v64, 1);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = (void *)objc_msgSend(v37, "initWithShape:dataType:error:", v39, 131104, a7);

  if (v40)
  {
    v41 = objc_msgSend(objc_retainAutorelease(v40), "dataPointer");
    v42 = v41;
    if ((int)v30 < 2)
    {
      v43 = 0;
    }
    else
    {
      v43 = 0;
      v44 = v30 >> 1;
      v45 = (_DWORD *)(v28 + 4);
      do
      {
        v46 = *(v45 - 1);
        if (*v45 - v46 + 1 > a4)
        {
          v47 = (_DWORD *)(v41 + 4 * v43);
          *v47 = v46;
          v47[1] = *v45 + 1;
          v43 += 2;
        }
        v45 += 2;
        --v44;
      }
      while (v44);
    }
    v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 20);
    if (v43 >= 2)
    {
      v48 = v43 >> 1;
      v49 = (_DWORD *)(v42 + 4);
      do
      {
        v50 = objc_alloc_init(SNKShotSegment);
        -[SNKShotSegment setUrl:](v50, "setUrl:", v15);
        v51 = v15;
        v52 = *v49 * a5 / 100 + (int)(float)((float)a5 * a8);
        v53 = v52 - 10 * a5;
        v54 = 1374389535 * *(v49 - 1) * a5;
        v55 = (v54 >> 63) + (SHIDWORD(v54) >> 5);
        if (v53 <= v55)
          v53 = v55;
        CMTimeMake(&start, v53, a5);
        v56 = v52;
        v15 = v51;
        CMTimeMake(&end, v56, a5);
        CMTimeRangeFromTimeToTime(&v63, &start, &end);
        v60 = v63;
        -[SNKShotSegment setTimeRange:](v50, "setTimeRange:", &v60);
        objc_msgSend(v22, "addObject:", v50);

        v49 += 2;
        --v48;
      }
      while (v48);
    }
  }
  else
  {
    v22 = 0;
  }

  v26 = v58;
LABEL_45:

  v16 = v59;
LABEL_46:

  return v22;
}

SNKShotSegment *sub_1D44E6A84(uint64_t a1, void *a2, _QWORD *a3)
{
  id v4;
  SNKShotSegment *v5;
  void *v6;
  id v7;
  void *v8;
  SNKShotSegment *v9;
  id v10;
  id v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[3];
  _OWORD v18[3];
  _BYTE v19[56];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = a2;
  objc_opt_self();
  v5 = objc_alloc_init(SNKShotSegment);
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  objc_msgSend(v4, "url");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0;
  +[SNAudioFileUtils getTimeRangeEncompassingEntireAudioFileAtURL:error:](SNAudioFileUtils, "getTimeRangeEncompassingEntireAudioFileAtURL:error:", v6, &v23);
  v7 = v23;

  objc_msgSend(v4, "url");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[SNKShotSegment setUrl:](v5, "setUrl:", v8);

  if (v4)
    objc_msgSend(v4, "timeRange");
  else
    memset(v19, 0, 48);
  v18[0] = v24;
  v18[1] = v25;
  v18[2] = v26;
  +[SNTimeUtils clipTimeRange:toBounds:](SNTimeUtils, "clipTimeRange:toBounds:", v19, v18);
  v17[0] = v20;
  v17[1] = v21;
  v17[2] = v22;
  -[SNKShotSegment setTimeRange:](v5, "setTimeRange:", v17);
  if (v5)
  {
    -[SNKShotSegment timeRange](v5, "timeRange");
    if ((BYTE12(v14) & 1) != 0)
    {
      -[SNKShotSegment timeRange](v5, "timeRange");
      if ((v13 & 1) != 0)
      {
        if (v7)
          goto LABEL_8;
LABEL_12:
        v9 = v5;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
  }
  v12 = v7;
  +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v12, 1, v7, CFSTR("Failed to clip segment to file."));
  v10 = v12;

  v7 = v10;
  if (!v10)
    goto LABEL_12;
LABEL_8:
  v9 = 0;
  if (a3)
    *a3 = objc_retainAutorelease(v7);
LABEL_13:

  return v9;
}

SNKShotSegment *sub_1D44E6C70(uint64_t a1, __int128 *a2, void *a3, SNKShotSegment **a4)
{
  id v6;
  SNKShotSegment *v7;
  SNKShotSegment *v8;
  SNKShotSegment *v9;
  SNKShotSegment *v10;
  void *v11;
  int32_t v12;
  SNKShotSegment *v13;
  SNKShotSegment *v15;
  id v16;
  __int128 v17;
  CMTimeEpoch v18;
  __int128 v19;
  _OWORD v20[2];
  CMTime time1;
  _BYTE v22[80];
  __int128 v23;
  CMTime duration;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CMTime start;
  CMTimeRange time2;

  v6 = a3;
  objc_opt_self();
  v7 = (SNKShotSegment *)v6;
  v8 = v7;
  if (v7)
  {
    -[SNKShotSegment timeRange](v7, "timeRange");
  }
  else
  {
    memset(v20, 0, sizeof(v20));
    v19 = 0u;
  }
  time1 = *(CMTime *)((char *)v20 + 8);
  *(_OWORD *)&time2.start.value = *a2;
  time2.start.epoch = *((_QWORD *)a2 + 2);
  v9 = v8;
  if (CMTimeCompare(&time1, &time2.start) != -1)
    goto LABEL_9;
  v17 = *a2;
  v18 = *((_QWORD *)a2 + 2);
  v10 = v8;
  objc_opt_self();
  v9 = objc_alloc_init(SNKShotSegment);
  -[SNKShotSegment url](v10, "url");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[SNKShotSegment setUrl:](v9, "setUrl:", v11);

  if (v8)
  {
    -[SNKShotSegment timeRange](v10, "timeRange");
    *(_OWORD *)&start.value = v25;
    start.epoch = v26;
    -[SNKShotSegment timeRange](v10, "timeRange");
    v12 = v23;
  }
  else
  {
    v12 = 0;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    memset(&start, 0, sizeof(start));
    memset(&v22[48], 0, 32);
    v23 = 0u;
  }
  *(_OWORD *)&time2.start.value = v17;
  time2.start.epoch = v18;
  CMTimeConvertScale(&duration, &time2.start, v12, kCMTimeRoundingMethod_RoundAwayFromZero);
  CMTimeRangeMake(&time2, &start, &duration);
  *(CMTimeRange *)v22 = time2;
  -[SNKShotSegment setTimeRange:](v9, "setTimeRange:", v22);

  if (v9)
    goto LABEL_9;
  v16 = 0;
  +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v16, 1, 0, CFSTR("Failed resize segment."));
  v15 = (SNKShotSegment *)v16;
  v9 = v15;
  if (v15)
  {
    if (a4)
    {
      v9 = objc_retainAutorelease(v15);
      v13 = 0;
      *a4 = v9;
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
LABEL_9:
    v13 = v9;
    v9 = 0;
  }

  return v13;
}

id sub_1D44E6E9C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, _QWORD *a6)
{
  id v10;
  id v11;
  SNCreateFeaturePrintRequest *v12;
  double v13;
  id v14;
  id v15;
  id v16;
  SNCreateFeaturePrintRequest *v17;
  id v18;
  SNResultsCollector *v19;
  SNAudioFileAnalyzer *v20;
  void *v21;
  SNAudioFileAnalyzer *v22;
  id v23;
  id v24;
  id v25;
  BOOL v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  void *v33;
  uint64_t v34;
  void *v35;
  id v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  id v41;
  _OWORD v42[3];
  id v43;
  id v44;
  id v45;
  id v46;
  id v47[2];

  v10 = a3;
  v11 = a4;
  objc_opt_self();
  v12 = -[SNCreateFeaturePrintRequest initWithFeaturePrintType:]([SNCreateFeaturePrintRequest alloc], "initWithFeaturePrintType:", a2);
  if (v12)
  {
    if (v11)
    {
      objc_msgSend(v11, "CMTimeValue");
      v37 = v39;
      v38 = v40;
      -[SNCreateFeaturePrintRequest setWindowDuration:](v12, "setWindowDuration:", &v37);
    }
    if (!a5)
    {
      objc_msgSend(0, "doubleValue");
      *(float *)&v13 = v13;
      -[SNCreateFeaturePrintRequest setOverlapFactor:](v12, "setOverlapFactor:", v13);
    }
  }
  else
  {
    v41 = 0;
    +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v41, 1, 0, CFSTR("Failed to allocate resources."));
    v14 = v41;
    if (v14)
    {
      v15 = v14;
      v16 = 0;
      goto LABEL_21;
    }
  }
  v17 = v12;
  v18 = v10;
  objc_opt_self();
  v19 = objc_alloc_init(SNResultsCollector);
  if (!v19)
  {
    v47[0] = 0;
    +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", v47, 1, 0, CFSTR("Failed to allocate resources."));
    v24 = v47[0];
    if (v24)
    {
      v23 = v24;
      v22 = 0;
      goto LABEL_18;
    }
  }
  v20 = [SNAudioFileAnalyzer alloc];
  objc_msgSend(v18, "url");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = 0;
  v22 = -[SNAudioFileAnalyzer initWithURL:error:](v20, "initWithURL:error:", v21, &v46);
  v23 = v46;

  if (v22)
  {
    if (v23)
    {
LABEL_18:
      v28 = objc_retainAutorelease(v23);
      v16 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v45 = v23;
    +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v45, 1, v23, CFSTR("Failed to initialize analyzer."));
    v25 = v45;

    v23 = v25;
    if (v25)
      goto LABEL_18;
  }
  v44 = 0;
  v26 = -[SNAudioFileAnalyzer addRequest:withObserver:error:](v22, "addRequest:withObserver:error:", v17, v19, &v44);
  v23 = v44;
  if (!v26)
  {
    v43 = v23;
    +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v43, 1, v23, CFSTR("Failed to register request."));
    v27 = v43;

    v23 = v27;
  }
  if (v23)
    goto LABEL_18;
  if (v18)
    objc_msgSend(v18, "timeRange");
  else
    memset(v42, 0, sizeof(v42));
  -[SNAudioFileAnalyzer analyzeInRange:](v22, "analyzeInRange:", v42);
  -[SNResultsCollector errors](v19, "errors");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend(v33, "count");

  if (v34)
  {
    -[SNResultsCollector errors](v19, "errors");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "objectAtIndexedSubscript:", 0);
    v23 = (id)objc_claimAutoreleasedReturnValue();

    if (v23)
      goto LABEL_18;
  }
  -[SNResultsCollector results](v19, "results");
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v28 = 0;
LABEL_19:

  v29 = v28;
  v15 = v29;
  if (v16)
  {
    if (v29)
      goto LABEL_21;
LABEL_24:
    v16 = v16;
    v30 = v16;
    goto LABEL_26;
  }
  v36 = v29;
  +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v36, 1, v29, CFSTR("Failed to perform request."));
  v31 = v36;

  v15 = v31;
  if (!v31)
    goto LABEL_24;
LABEL_21:
  if (a6)
  {
    v15 = objc_retainAutorelease(v15);
    v30 = 0;
    *a6 = v15;
  }
  else
  {
    v30 = 0;
  }
LABEL_26:

  return v30;
}

id sub_1D44E7250(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v15;
  id v16;
  id v17;

  v6 = a3;
  v7 = a2;
  v8 = objc_opt_self();
  v17 = 0;
  sub_1D44E6E9C(v8, 5, v7, v6, 0, &v17);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = v17;
  v11 = v10;
  if (v9)
  {
    if (v10)
      goto LABEL_7;
  }
  else
  {
    v16 = v10;
    +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v16, 1, v10, CFSTR("Failed to generate feature prints."));
    v12 = v16;

    v11 = v12;
    if (v12)
      goto LABEL_7;
  }
  if (objc_msgSend(v9, "count")
    || (v15 = 0,
        +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v15, 1, 0, CFSTR("No feature prints generated.")), (v11 = v15) == 0))
  {
    objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    goto LABEL_11;
  }
LABEL_7:
  if (a4)
  {
    v11 = objc_retainAutorelease(v11);
    v13 = 0;
    *a4 = v11;
  }
  else
  {
    v13 = 0;
  }
LABEL_11:

  return v13;
}

void sub_1D44E75C0(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  objc_msgSend(v13, "label");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "type");
  v5 = &unk_1E97DA340;
  if (!v4)
    v5 = &unk_1E97DA328;
  v6 = v5;

  v7 = objc_msgSend(v13, "datasetType");
  if (v7 == 1)
  {
    v11 = *(void **)(a1 + 48);
    objc_msgSend(v13, "data");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addObject:", v12);

    v10 = (id *)(a1 + 56);
    goto LABEL_7;
  }
  if (!v7)
  {
    v8 = *(void **)(a1 + 32);
    objc_msgSend(v13, "data");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObject:", v9);

    v10 = (id *)(a1 + 40);
LABEL_7:
    objc_msgSend(*v10, "addObject:", v6);
  }

}

void sub_1D44E76A4(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  SNKShotFeaturizationResult *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init(SNKShotFeaturizationResult);
  -[SNKShotFeaturizationResult setTrainingDataEmbeddings:](v7, "setTrainingDataEmbeddings:", a1[4]);
  -[SNKShotFeaturizationResult setTrainingDataLabels:](v7, "setTrainingDataLabels:", a1[5]);
  -[SNKShotFeaturizationResult setValidationDataEmbeddings:](v7, "setValidationDataEmbeddings:", a1[6]);
  -[SNKShotFeaturizationResult setValidationDataLabels:](v7, "setValidationDataLabels:", a1[7]);
  if (v5)
  {
    objc_msgSend(v5, "inferenceWindowSize");
  }
  else
  {
    v11 = 0uLL;
    v12 = 0;
  }
  v9 = v11;
  v10 = v12;
  -[SNKShotFeaturizationResult setInferenceWindowSize:](v7, "setInferenceWindowSize:", &v9);
  objc_msgSend(v5, "exemplar");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[SNKShotFeaturizationResult setExemplar:](v7, "setExemplar:", v8);

  (*(void (**)(void))(a1[8] + 16))();
}

void sub_1D44E78E8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;

  v2 = (void *)MEMORY[0x1D825DE1C]();
  v3 = (void *)a1[9];
  v4 = (void *)a1[4];
  objc_msgSend(v3, "defaultRandomNumberGenerator");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)a1[5];
  v7 = (void *)a1[6];
  v8 = (void *)a1[7];
  v11 = 0;
  sub_1D44E7998((uint64_t)v3, v4, v5, v6, v7, v8, &v11);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v11;

  objc_autoreleasePoolPop(v2);
  (*(void (**)(void))(a1[8] + 16))();

}

SNKShotFeaturizationStreamCompletion *sub_1D44E7998(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v11;
  id v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  int v23;
  SNKShotFeaturizationStreamCompletion *v24;
  void *v25;
  int v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t (**v31)(void);
  float v32;
  SNKShotSegment *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  NSObject *v42;
  SNKShotSegment *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  SNKShotSegmentationRequest *v52;
  CMTime v53;
  id v54;
  __int128 v55;
  _OWORD v56[2];
  __int128 v57;
  uint64_t v58;
  id v59;
  CMTimeRange v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  CMTime v64;
  CMTime start;
  CMTimeRange v66;
  CMTime lhs;
  __int128 v68;
  _OWORD v69[2];
  CMTime rhs;
  CMTime v71;
  CMTime v72;
  _QWORD v73[4];
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  __int128 *p_buf;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t);
  void (*v92)(uint64_t);
  id v93;
  _QWORD aBlock[4];
  id v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  id v99;
  __int128 buf;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  void (*v103)(uint64_t);
  id v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v48 = a3;
  v49 = a4;
  v12 = a5;
  v50 = a6;
  v13 = v12;
  v46 = objc_opt_self();
  sub_1D4501768();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = objc_msgSend(v11, "count");
    _os_log_impl(&dword_1D42A7000, v14, OS_LOG_TYPE_DEFAULT, "[Custom Sound Recognition Model Training] Beginning Featurization on file count: %llu", (uint8_t *)&buf, 0xCu);
  }

  v52 = objc_alloc_init(SNKShotSegmentationRequest);
  v15 = -[SNKShotSegmentationRequest setFileURLs:](v52, "setFileURLs:", v11);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v101 = 0x3032000000;
  v102 = sub_1D44EC41C;
  v103 = sub_1D44EC42C;
  v104 = 0;
  v16 = (void *)MEMORY[0x1D825DE1C](v15);
  v17 = *((_QWORD *)&buf + 1);
  v99 = *(id *)(*((_QWORD *)&buf + 1) + 40);
  +[SNKShotFeaturizerImpl performSegmentationRequest:error:](SNKShotFeaturizerImpl, "performSegmentationRequest:error:", v52, &v99);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v17 + 40), v99);
  objc_autoreleasePoolPop(v16);
  if (!v18)
  {
    objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "localizedDescription");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", a7, 1, 0, v21);
    v24 = 0;
    goto LABEL_39;
  }
  objc_msgSend(v18, "segments");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "exemplarIndex");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "objectAtIndexedSubscript:", (int)objc_msgSend(v20, "intValue"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    objc_msgSend(v21, "timeRange");
    v22 = a7;
    v23 = DWORD2(v96);
  }
  else
  {
    v23 = 0;
    v97 = 0u;
    v98 = 0u;
    v96 = 0u;
    v22 = a7;
  }
  if (!objc_msgSend(v13, "isCancelled"))
  {
    objc_msgSend(v18, "segments");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "count");

    if (v26 <= 2)
    {
      +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", a7, 1, 0, CFSTR("Not enough audio segments found to continue."));
      v24 = 0;
      goto LABEL_39;
    }
    v27 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1D44EC434;
    aBlock[3] = &unk_1E97C4498;
    v95 = v50;
    v28 = _Block_copy(aBlock);
    v88 = 0;
    v89 = &v88;
    v90 = 0x3032000000;
    v91 = sub_1D44EC41C;
    v92 = sub_1D44EC42C;
    v93 = 0;
    v73[0] = v27;
    v73[1] = 3221225472;
    v73[2] = sub_1D44EC508;
    v73[3] = &unk_1E97C4510;
    v74 = v49;
    p_buf = &buf;
    v82 = v46;
    v83 = v26;
    v84 = 80;
    v29 = v21;
    v85 = 1065353216;
    v86 = v23;
    v75 = v29;
    v81 = &v88;
    v45 = v28;
    v78 = v45;
    v76 = v18;
    v87 = 0x100000028;
    v79 = v48;
    v30 = v13;
    v77 = v30;
    v31 = (uint64_t (**)(void))_Block_copy(v73);
    if ((v31[2]() & 1) != 0)
    {
      if (!objc_msgSend(v30, "isCancelled"))
      {
        memset(&v72, 0, sizeof(v72));
        objc_msgSend((id)v89[5], "floatValue");
        CMTimeMake(&v72, (int)vcvts_n_s32_f32(v32 * 160.0, 5uLL), 16000);
        memset(&v71, 0, sizeof(v71));
        if (v21)
        {
          objc_msgSend(v29, "timeRange");
        }
        else
        {
          memset(v69, 0, sizeof(v69));
          v68 = 0u;
        }
        rhs = *(CMTime *)((char *)v69 + 8);
        lhs = v72;
        CMTimeSubtract(&v71, &lhs, &rhs);
        v71.value /= 2;
        v33 = objc_alloc_init(SNKShotSegment);
        objc_msgSend(v29, "url");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        -[SNKShotSegment setUrl:](v33, "setUrl:", v34);
        v44 = v33;

        if (v21)
        {
          objc_msgSend(v29, "timeRange");
        }
        else
        {
          v62 = 0u;
          v63 = 0u;
          v61 = 0u;
        }
        *(_OWORD *)&v64.value = v61;
        v64.epoch = v62;
        lhs = v71;
        CMTimeSubtract(&start, &v64, &lhs);
        lhs = v72;
        CMTimeRangeMake(&v66, &start, &lhs);
        v60 = v66;
        -[SNKShotSegment setTimeRange:](v33, "setTimeRange:", &v60);
        v59 = 0;
        sub_1D44E6A84(v46, v33, &v59);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = v59;
        if (v44)
        {
          v37 = (void *)MEMORY[0x1E0CB3B18];
          if (v35)
          {
            objc_msgSend(v35, "timeRange", a7);
          }
          else
          {
            memset(v56, 0, sizeof(v56));
            v55 = 0u;
          }
          v57 = *(_OWORD *)((char *)v56 + 8);
          v58 = *((_QWORD *)&v56[1] + 1);
          objc_msgSend(v37, "valueWithCMTime:", &v57, v44, v45);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = v36;
          sub_1D44E7250((uint64_t)SNKShotFeaturizerImpl, v35, v38, &v54);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = v54;

          v40 = v39;
          if (v39)
          {
            v24 = objc_alloc_init(SNKShotFeaturizationStreamCompletion);
            v53 = v72;
            -[SNKShotFeaturizationStreamCompletion setInferenceWindowSize:](v24, "setInferenceWindowSize:", &v53);
            objc_msgSend(v39, "featureVector");
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            -[SNKShotFeaturizationStreamCompletion setExemplar:](v24, "setExemplar:", v41);

            sub_1D4501768();
            v42 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(lhs.value) = 0;
              _os_log_impl(&dword_1D42A7000, v42, OS_LOG_TYPE_DEFAULT, "[Custom Sound Recognition Model Training] Successfully completed Featurization", (uint8_t *)&lhs, 2u);
            }

          }
          else
          {
            +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", a7, 1, v47, CFSTR("Error computing SoundPrint."));
            v24 = 0;
            v40 = 0;
          }

          v36 = v47;
        }
        else
        {
          +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", a7, 1, v36, CFSTR("Failed to fit segment to file."));
          v24 = 0;
        }

        goto LABEL_38;
      }
      if (a7)
      {
        v24 = 0;
        *a7 = 0;
LABEL_38:

        _Block_object_dispose(&v88, 8);
        v21 = v29;
        goto LABEL_39;
      }
    }
    else if (a7)
    {
      v24 = 0;
      *a7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&buf + 1) + 40));
      goto LABEL_38;
    }
    v24 = 0;
    goto LABEL_38;
  }
  v24 = 0;
  if (v22)
    *v22 = 0;
LABEL_39:

  _Block_object_dispose(&buf, 8);
  return v24;
}

void sub_1D44E818C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x288], 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1D44E9650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

id sub_1D44E9678(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  SNCreateFeaturePrintRequest *v6;
  double v7;
  SNResultsCollector *v8;
  SNAudioFileAnalyzer *v9;
  uint64_t v10;
  SNAudioFileAnalyzer *v11;
  id v12;
  BOOL v13;
  id v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  float v50;
  float v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  int v58;
  float v59;
  uint64_t v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  void *v69;
  uint64_t v70;
  uint64_t i;
  id v72;
  id v73;
  uint64_t v74;
  int *v75;
  float v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  int *v90;
  int v91;
  int v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  id v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  void *v104;
  uint64_t v105;
  uint64_t j;
  id v107;
  id v108;
  uint64_t v109;
  int *v110;
  float v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  void *v121;
  void *v122;
  uint64_t v123;
  int *v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const float *v130;
  id v131;
  void *v132;
  void *v133;
  void *v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  float *v140;
  uint64_t v141;
  float v142;
  void *v143;
  id v144;
  void *v145;
  id v146;
  uint64_t v147;
  int v148;
  int v149;
  void *v150;
  double v151;
  int32_t v152;
  void *v153;
  void *v154;
  uint64_t v155;
  int *v157;
  id v158;
  void *v159;
  void *v160;
  unsigned int v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  id v168;
  void *v169;
  void *v170;
  SNAudioFileAnalyzer *v171;
  SNCreateFeaturePrintRequest *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  SNResultsCollector *v177;
  uint64_t v178;
  id v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  _QWORD v197[3];
  _QWORD v198[3];
  _QWORD v199[3];

  v199[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C89A98]);
  v3 = *(_QWORD *)(a1 + 32);
  v192 = 0;
  v4 = (void *)objc_msgSend(v2, "initForReading:commonFormat:interleaved:error:", v3, 1, 0, &v192);
  v5 = v192;
  if (v4)
  {
    v6 = -[SNCreateFeaturePrintRequest initWithFeaturePrintType:]([SNCreateFeaturePrintRequest alloc], "initWithFeaturePrintType:", 2);
    LODWORD(v7) = 1014763457;
    -[SNCreateFeaturePrintRequest setOverlapFactor:](v6, "setOverlapFactor:", v7);
    v8 = objc_alloc_init(SNResultsCollector);
    v9 = [SNAudioFileAnalyzer alloc];
    v10 = *(_QWORD *)(a1 + 32);
    v191 = v5;
    v11 = -[SNAudioFileAnalyzer initWithURL:error:](v9, "initWithURL:error:", v10, &v191);
    v12 = v191;

    if (v11)
    {
      v190 = v12;
      v13 = -[SNAudioFileAnalyzer addRequest:withObserver:error:](v11, "addRequest:withObserver:error:", v6, v8, &v190);
      v14 = v190;

      if (v13)
      {
        v171 = v11;
        v172 = v6;
        v170 = v4;
        -[SNAudioFileAnalyzer analyze](v11, "analyze");
        v177 = v8;
        -[SNResultsCollector results](v8, "results");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "count");

        v176 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v16);
        v178 = a1;
        if (v16 < 1)
        {
LABEL_11:
          v29 = (void *)MEMORY[0x1E0C9E970];
          objc_msgSend(v176, "objectAtIndexedSubscript:", 0);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "multiArrayByConcatenatingMultiArrays:alongAxis:dataType:", v176, 1, objc_msgSend(v30, "dataType"));
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          LODWORD(v30) = *(_DWORD *)(a1 + 60);
          -[SNResultsCollector results](v177, "results");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = v30 * objc_msgSend(v32, "count");

          v34 = objc_alloc(MEMORY[0x1E0C9E970]);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v33);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v196 = v35;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v196, 1);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v188 = v14;
          v37 = (void *)objc_msgSend(v34, "initWithShape:dataType:error:", v36, 65568, &v188);
          v38 = v188;

          if (v37)
          {
            v166 = v37;
            v167 = v38;
            v39 = objc_msgSend(objc_retainAutorelease(v37), "dataPointer");
            v174 = v33;
            if ((int)v33 >= 1)
            {
              v40 = 0;
              LODWORD(v41) = *(_DWORD *)(a1 + 64);
              do
              {
                *(_DWORD *)(v39 + 4 * v40) = -998637568;
                if ((int)v41 >= 1)
                {
                  v42 = 0;
                  do
                  {
                    v43 = *(float *)(v39 + 4 * v40);
                    v44 = (void *)MEMORY[0x1E0C99D20];
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 0);
                    v45 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v40);
                    v46 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v42);
                    v47 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v44, "arrayWithObjects:", v45, v46, v47, 0);
                    v48 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v31, "objectForKeyedSubscript:", v48);
                    v49 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v49, "floatValue");
                    v51 = v50;

                    if (v43 < v51)
                    {
                      v52 = (void *)MEMORY[0x1E0C99D20];
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 0);
                      v53 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v40);
                      v54 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v42);
                      v55 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v52, "arrayWithObjects:", v53, v54, v55, 0);
                      v56 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v31, "objectForKeyedSubscript:", v56);
                      v57 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v57, "floatValue");
                      *(_DWORD *)(v39 + 4 * v40) = v58;

                    }
                    ++v42;
                    a1 = v178;
                    v41 = *(int *)(v178 + 64);
                  }
                  while (v42 < v41);
                  v33 = v174;
                }
                ++v40;
              }
              while (v40 != v33);
            }
            objc_msgSend(*(id *)(a1 + 40), "backgroundEnergyPercentile");
            v60 = (int)((float)(v59 * (float)(int)v33) / 100.0);
            v187 = v167;
            v61 = objc_alloc(MEMORY[0x1E0C9E970]);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v60);
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            v199[0] = v62;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v199, 1);
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            v64 = (void *)objc_msgSend(v61, "initWithShape:dataType:error:", v63, 131104, &v187);

            if (v64)
            {
              v65 = objc_retainAutorelease(v64);
              v66 = objc_msgSend(v65, "dataPointer");
              if ((int)v60 < 1)
              {
                v68 = 0;
              }
              else
              {
                v67 = 0;
                v68 = 0;
                do
                {
                  *(_DWORD *)(v66 + 4 * v67) = v67;
                  if (*(float *)(v39 + 4 * v67) >= *(float *)(v39 + 4 * v68))
                    v68 = v67;
                  ++v67;
                }
                while (v60 != v67);
              }
              if ((int)v174 > (int)v60)
              {
                v70 = (int)v60;
                do
                {
                  if (*(float *)(v39 + 4 * v70) <= *(float *)(v39 + 4 * *(int *)(v66 + 4 * v68)))
                  {
                    *(_DWORD *)(v66 + 4 * v68) = v70;
                    if ((int)v60 >= 1)
                    {
                      for (i = 0; i != v60; ++i)
                      {
                        if (*(float *)(v39 + 4 * *(int *)(v66 + 4 * i)) >= *(float *)(v39
                                                                                       + 4 * *(int *)(v66 + 4 * v68)))
                          v68 = i;
                      }
                    }
                  }
                  ++v70;
                }
                while (v70 != (int)v174);
              }
              v72 = v65;
            }

            v73 = v187;
            if (v64)
            {
              v74 = objc_msgSend(objc_retainAutorelease(v64), "dataPointer");
              v75 = (int *)v74;
              v165 = v64;
              if ((int)v60 <= 0)
              {
                v80 = 0;
                v81 = 0.0 / (float)(int)v60;
              }
              else
              {
                v76 = 0.0;
                v77 = (int *)v74;
                v78 = v60;
                do
                {
                  v79 = *v77++;
                  v76 = v76 + *(float *)(v39 + 4 * v79);
                  --v78;
                }
                while (v78);
                LODWORD(v80) = 0;
                v81 = v76 / (float)(int)v60;
                v82 = (int *)v74;
                v83 = v60;
                do
                {
                  v84 = *v82++;
                  if (*(float *)(v39 + 4 * v84) > v81)
                    v80 = v80;
                  else
                    v80 = (v80 + 1);
                  --v83;
                }
                while (v83);
              }
              v85 = objc_alloc(MEMORY[0x1E0C9E970]);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v80);
              v86 = (void *)objc_claimAutoreleasedReturnValue();
              v195 = v86;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v195, 1);
              v87 = (void *)objc_claimAutoreleasedReturnValue();
              v186 = v73;
              v88 = (void *)objc_msgSend(v85, "initWithShape:dataType:error:", v87, 131104, &v186);
              v168 = v186;

              if (v88)
              {
                v89 = objc_msgSend(objc_retainAutorelease(v88), "dataPointer");
                v90 = (int *)v89;
                if ((int)v60 >= 1)
                {
                  v91 = 0;
                  do
                  {
                    v93 = *v75++;
                    v92 = v93;
                    if (*(float *)(v39 + 4 * v93) <= v81)
                      *(_DWORD *)(v89 + 4 * v91++) = v92;
                    --v60;
                  }
                  while (v60);
                }
                v163 = v88;
                objc_msgSend(*(id *)(v178 + 40), "foregroundEnergyPercentile");
                v95 = (int)((100.0 - v94) * (double)(int)v174 / 100.0);
                v185 = v168;
                v96 = objc_alloc(MEMORY[0x1E0C9E970]);
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v95);
                v97 = (void *)objc_claimAutoreleasedReturnValue();
                v199[0] = v97;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v199, 1);
                v98 = (void *)objc_claimAutoreleasedReturnValue();
                v99 = (void *)objc_msgSend(v96, "initWithShape:dataType:error:", v98, 131104, &v185);

                if (v99)
                {
                  v100 = objc_retainAutorelease(v99);
                  v101 = objc_msgSend(v100, "dataPointer");
                  if ((int)v95 < 1)
                  {
                    v103 = 0;
                  }
                  else
                  {
                    v102 = 0;
                    v103 = 0;
                    do
                    {
                      *(_DWORD *)(v101 + 4 * v102) = v102;
                      if (*(float *)(v39 + 4 * v102) <= *(float *)(v39 + 4 * v103))
                        v103 = v102;
                      ++v102;
                    }
                    while (v95 != v102);
                  }
                  if ((int)v174 > (int)v95)
                  {
                    v105 = (int)v95;
                    do
                    {
                      if (*(float *)(v39 + 4 * v105) >= *(float *)(v39 + 4 * *(int *)(v101 + 4 * v103)))
                      {
                        *(_DWORD *)(v101 + 4 * v103) = v105;
                        if ((int)v95 >= 1)
                        {
                          for (j = 0; j != v95; ++j)
                          {
                            if (*(float *)(v39 + 4 * *(int *)(v101 + 4 * j)) <= *(float *)(v39
                                                                                            + 4
                                                                                            * *(int *)(v101 + 4 * v103)))
                              v103 = j;
                          }
                        }
                      }
                      ++v105;
                    }
                    while (v105 != (int)v174);
                  }
                  v107 = v100;
                }

                v108 = v185;
                if (v99)
                {
                  v160 = v108;
                  v109 = objc_msgSend(objc_retainAutorelease(v99), "dataPointer");
                  v110 = (int *)v109;
                  v162 = v99;
                  v157 = v90;
                  if ((int)v95 <= 0)
                  {
                    v115 = 0;
                    v116 = 0.0 / (float)(int)v95;
                  }
                  else
                  {
                    v111 = 0.0;
                    v112 = (int *)v109;
                    v113 = v95;
                    do
                    {
                      v114 = *v112++;
                      v111 = v111 + *(float *)(v39 + 4 * v114);
                      --v113;
                    }
                    while (v113);
                    LODWORD(v115) = 0;
                    v116 = v111 / (float)(int)v95;
                    v117 = (int *)v109;
                    v118 = v95;
                    do
                    {
                      v119 = *v117++;
                      if (*(float *)(v39 + 4 * v119) < v116)
                        v115 = v115;
                      else
                        v115 = (v115 + 1);
                      --v118;
                    }
                    while (v118);
                  }
                  v120 = objc_alloc(MEMORY[0x1E0C9E970]);
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v115);
                  v159 = (void *)objc_claimAutoreleasedReturnValue();
                  v194 = v159;
                  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v194, 1);
                  v121 = (void *)objc_claimAutoreleasedReturnValue();
                  v184 = v160;
                  v122 = (void *)objc_msgSend(v120, "initWithShape:dataType:error:", v121, 131104, &v184);
                  v158 = v184;

                  v169 = v122;
                  if (v122)
                  {
                    v123 = objc_msgSend(objc_retainAutorelease(v122), "dataPointer");
                    v124 = (int *)v123;
                    v104 = v163;
                    if ((int)v95 >= 1)
                    {
                      v125 = 0;
                      do
                      {
                        v127 = *v110++;
                        v126 = v127;
                        if (*(float *)(v39 + 4 * v127) >= v116)
                          *(_DWORD *)(v123 + 4 * v125++) = v126;
                        --v95;
                      }
                      while (v95);
                    }
                    v128 = *(unsigned int *)(v178 + 64);
                    v183 = v158;
                    sub_1D44E59C8(v128, v31, v124, v115, v157, v80, (uint64_t)&v183);
                    v129 = (void *)objc_claimAutoreleasedReturnValue();
                    v108 = v183;

                    if (v129)
                    {
                      v130 = (const float *)objc_msgSend(objc_retainAutorelease(v129), "dataPointer");
                      v131 = objc_alloc(MEMORY[0x1E0C9E970]);
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v174);
                      v132 = (void *)objc_claimAutoreleasedReturnValue();
                      v193 = v132;
                      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v193, 1);
                      v133 = (void *)objc_claimAutoreleasedReturnValue();
                      v182 = v108;
                      v134 = (void *)objc_msgSend(v131, "initWithShape:dataType:error:", v133, 65568, &v182);
                      v135 = v182;

                      v164 = v134;
                      if (v134)
                      {
                        v136 = objc_msgSend(objc_retainAutorelease(v134), "dataPointer");
                        v137 = objc_msgSend(objc_retainAutorelease(v31), "dataPointer");
                        v161 = v174 - 1;
                        if ((int)v174 >= 1)
                        {
                          v138 = v137;
                          v139 = 0;
                          v140 = (float *)v136;
                          v141 = v174;
                          do
                          {
                            vDSP_dotpr((const float *)(v138 + 4 * *(_DWORD *)(v178 + 64) * v139), 1, v130, 1, v140, *(int *)(v178 + 64));
                            v142 = 1.0 / (exp((float)-*v140) + 1.0);
                            *v140++ = v142;
                            ++v139;
                            --v141;
                          }
                          while (v141);
                        }
                        v181 = v135;
                        sub_1D44E6300(v136, v174, (uint64_t)&v181);
                        v143 = (void *)objc_claimAutoreleasedReturnValue();
                        v144 = v181;

                        if (v143)
                        {
                          v180 = v144;
                          sub_1D44E64F4((float *)objc_msgSend(objc_retainAutorelease(v143), "dataPointer"), v161, (uint64_t)&v180);
                          v145 = (void *)objc_claimAutoreleasedReturnValue();
                          v146 = v180;

                          v4 = v170;
                          v175 = v145;
                          if (v145)
                          {
                            v147 = objc_msgSend(objc_retainAutorelease(v145), "dataPointer");
                            v148 = *(_DWORD *)(v178 + 68);
                            v149 = *(_DWORD *)(v178 + 72);
                            objc_msgSend(v170, "fileFormat");
                            v150 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v150, "sampleRate");
                            v152 = (int)v151;
                            v153 = *(void **)(v178 + 32);
                            LODWORD(v151) = *(_DWORD *)(v178 + 76);
                            v179 = v146;
                            sub_1D44E6624(v147, v161, v148, v149, v152, v153, (uint64_t)&v179, *(float *)&v151);
                            v154 = (void *)objc_claimAutoreleasedReturnValue();
                            v144 = v179;

                            if (v154)
                            {
                              objc_msgSend(*(id *)(v178 + 48), "addObjectsFromArray:", v154);
                              v155 = 0;
                            }
                            else
                            {
                              +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v144, CFSTR("error getting segments"));
                              v155 = objc_claimAutoreleasedReturnValue();
                            }
                            v64 = v165;
                            v37 = v166;

                          }
                          else
                          {
                            +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v146, CFSTR("error rounding"));
                            v155 = objc_claimAutoreleasedReturnValue();
                            v144 = v146;
                            v64 = v165;
                            v37 = v166;
                          }

                        }
                        else
                        {
                          +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v144, CFSTR("error smoothing"));
                          v155 = objc_claimAutoreleasedReturnValue();
                          v4 = v170;
                          v64 = v165;
                          v37 = v166;
                        }
                        v104 = v163;

                        v135 = v144;
                        v69 = (void *)v155;
                      }
                      else
                      {
                        +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v135, CFSTR("error allocating"));
                        v69 = (void *)objc_claimAutoreleasedReturnValue();
                        v64 = v165;
                        v37 = v166;
                        v104 = v163;
                      }

                      v108 = v135;
                    }
                    else
                    {
                      +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v108, CFSTR("error in logistic regression"));
                      v69 = (void *)objc_claimAutoreleasedReturnValue();
                      v64 = v165;
                      v37 = v166;
                    }

                  }
                  else
                  {
                    v108 = v158;
                    +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v158, CFSTR("error allocating."));
                    v69 = (void *)objc_claimAutoreleasedReturnValue();
                    v64 = v165;
                    v37 = v166;
                    v104 = v163;
                  }
                  v99 = v162;

                }
                else
                {
                  +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v108, CFSTR("error getting top indices."));
                  v69 = (void *)objc_claimAutoreleasedReturnValue();
                  v64 = v165;
                  v37 = v166;
                  v104 = v163;
                }

                v73 = v108;
              }
              else
              {
                v104 = 0;
                v73 = v168;
                +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v168, CFSTR("error allocating."));
                v69 = (void *)objc_claimAutoreleasedReturnValue();
                v64 = v165;
                v37 = v166;
              }

            }
            else
            {
              +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v73, CFSTR("error getting bottom indices."));
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              v37 = v166;
            }

            v14 = v73;
          }
          else
          {
            +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v38, CFSTR("allocation error."));
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = v38;
          }

        }
        else
        {
          v17 = 0;
          v18 = v16;
          while (1)
          {
            v19 = v14;
            -[SNResultsCollector results](v177, "results");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "objectAtIndexedSubscript:", v17);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "featureVector");
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            v198[0] = &unk_1E97DA328;
            v198[1] = &unk_1E97DA328;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 56));
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v198[2] = v23;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v198, 3);
            v24 = (void *)objc_claimAutoreleasedReturnValue();

            v197[0] = &unk_1E97DA340;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 60));
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v197[1] = v25;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 64));
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v197[2] = v26;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v197, 3);
            v27 = (void *)objc_claimAutoreleasedReturnValue();

            v189 = v19;
            objc_msgSend(v22, "sliceAtOrigin:shape:squeeze:error:", v24, v27, 0, &v189);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = v189;

            if (v28)
            {
              objc_msgSend(v176, "addObject:", v28);
            }
            else
            {
              +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v14, CFSTR("error making slice."));
              v173 = objc_claimAutoreleasedReturnValue();
            }

            if (!v28)
              break;
            ++v17;
            a1 = v178;
            if (v18 == v17)
              goto LABEL_11;
          }
          v69 = (void *)v173;
        }

        v12 = v14;
        v11 = v171;
        v6 = v172;
        v8 = v177;
      }
      else
      {
        +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v14, CFSTR("Error adding SN LogMel request."));
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v14;
      }
    }
    else
    {
      +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v12, CFSTR("Error creating SN analyzer."));
      v69 = (void *)objc_claimAutoreleasedReturnValue();
    }

    v5 = v12;
  }
  else
  {
    +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v5, CFSTR("Error loading audio files."));
    v69 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v69;
}

id sub_1D44EA6CC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  id v19;

  v2 = a1[6];
  v3 = (void *)a1[4];
  v19 = 0;
  sub_1D44E6A84(v2, v3, &v19);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v19;
  if (v4)
  {
    v6 = (void *)MEMORY[0x1E0CB3B18];
    objc_msgSend(v4, "timeRange");
    v17 = v15;
    v18 = v16;
    objc_msgSend(v6, "valueWithCMTime:", &v17);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v5;
    sub_1D44E7250((uint64_t)SNKShotFeaturizerImpl, v4, v7, &v14);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v14;

    if (v8)
    {
      v10 = (void *)a1[5];
      objc_msgSend(v8, "featureVector");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "addObject:", v11);

      v12 = 0;
    }
    else
    {
      +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v9, CFSTR("Error computing SoundPrint."));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v5, CFSTR("Failed to fit segment to file."));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v5;
  }

  return v12;
}

BOOL sub_1D44EA830(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  _BOOL8 v8;
  _QWORD v10[4];
  CMTime time2;
  __int128 v12;
  _OWORD v13[2];
  CMTime time1;

  v4 = a2;
  v5 = a3;
  v6 = v4;
  v7 = v5;
  if (v6)
  {
    objc_msgSend(v6, "timeRange");
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    v12 = 0u;
  }
  time1 = *(CMTime *)((char *)v13 + 8);
  if (v7)
    objc_msgSend(v7, "timeRange");
  else
    memset(v10, 0, sizeof(v10));
  time2 = *(CMTime *)&v10[1];
  v8 = CMTimeCompare(&time1, &time2) > 0;

  return v8;
}

id sub_1D44EA904(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  SNKShotSegment *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  SNKShotSegment *v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  SNKShotSegment *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  int64_t v29;
  void *v30;
  double v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  double v40;
  void *v41;
  void *v42;
  void *v44;
  void *v45;
  uint64_t v46;
  int v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  SNKShotSegment *v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  SNKShotSegment *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  float v65;
  float v66;
  void *v67;
  CMTimeValue value;
  int v69;
  void *v70;
  id v71;
  void *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  double v78;
  id v79;
  void *v80;
  double v81;
  int64_t v82;
  void *v83;
  double v84;
  void *v85;
  void *v86;
  CMTimeValue v87;
  void *v88;
  double v89;
  int64_t v90;
  void *v91;
  double v92;
  void *v93;
  unint64_t v94;
  int64_t v95;
  CMTimeValue v96;
  void *v97;
  double v98;
  void *v99;
  _BYTE v100[4];
  int v101;
  void *v102;
  _BYTE *v103;
  uint64_t v104;
  id v105;
  id v106;
  uint64_t v107;
  void *v108;
  id v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  CMTimeRange v113;
  CMTime v114;
  CMTimeRange v115;
  CMTimeRange v116;
  CMTime v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  CMTime v121;
  CMTimeRange v122;
  CMTime v123;
  __int128 v124;
  _QWORD v125[4];
  CMTime v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _OWORD v130[3];
  __int128 v131;
  SNKShotSegment *v132;
  SNKShotSegment *v133;
  SNKShotSegment *v134;
  SNKShotSegment *v135;
  SNKShotSegment *v136;
  CMTime v137;
  CMTimeRange v138;
  CMTime v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  CMTime v143;
  CMTimeRange v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  CMTimeRange v151;
  CMTime v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  CMTime v156;
  CMTimeRange v157;
  CMTime v158;
  __int128 v159;
  _QWORD v160[4];
  CMTime time1;
  CMTime v162;
  id v163;
  void *v164;
  _QWORD v165[3];
  _QWORD v166[6];

  v166[3] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C89A98]);
  objc_msgSend(*(id *)(a1 + 32), "url");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v163 = 0;
  v4 = (id)objc_msgSend(v2, "initForReading:commonFormat:interleaved:error:", v3, 1, 0, &v163);
  v5 = (SNKShotSegment *)v163;

  if (v4)
  {
    if (*(_DWORD *)(a1 + 80) == *(_DWORD *)(a1 + 84))
    {
      objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
      v162 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v6 = *(void **)(a1 + 32);
      if (v6)
      {
        objc_msgSend(v6, "timeRange");
      }
      else
      {
        memset(v160, 0, sizeof(v160));
        v159 = 0u;
      }
      time1 = *(CMTime *)&v160[1];
      CMTimeMake(&v158, 10, 1);
      if (CMTimeCompare(&time1, &v158) >= 1)
      {
        v26 = *(void **)(a1 + 32);
        if (v26)
        {
          objc_msgSend(v26, "timeRange");
        }
        else
        {
          v155 = 0u;
          v154 = 0u;
          v153 = 0u;
        }
        *(_OWORD *)&v156.value = v153;
        v156.epoch = v154;
        objc_msgSend(v4, "fileFormat");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "sampleRate");
        v29 = (uint64_t)(v28 * 10.0);
        objc_msgSend(v4, "fileFormat");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "sampleRate");
        CMTimeMake(&v152, v29, (int)v31);
        CMTimeRangeMake(&v157, &v156, &v152);
        v32 = *(void **)(a1 + 32);
        v151 = v157;
        objc_msgSend(v32, "setTimeRange:", &v151);

      }
      v33 = *(void **)(a1 + 32);
      if (v33)
      {
        objc_msgSend(v33, "timeRange");
        v34 = v148;
      }
      else
      {
        v34 = 0;
        v149 = 0u;
        v150 = 0u;
        v148 = 0u;
      }
      v35 = *(_QWORD *)(a1 + 56) + v34;
      if (v35 <= objc_msgSend(v4, "length") - 1)
      {
        v37 = *(void **)(a1 + 32);
        if (v37)
        {
          objc_msgSend(v37, "timeRange");
          v38 = v145;
        }
        else
        {
          v38 = 0;
          v146 = 0u;
          v147 = 0u;
          v145 = 0u;
        }
        v36 = *(_QWORD *)(a1 + 56) + v38;
      }
      else
      {
        v36 = objc_msgSend(v4, "length") - 1;
      }
      objc_msgSend(v4, "fileFormat");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "sampleRate");
      CMTimeMake(&v162, v36, (int)v40);

      v41 = *(void **)(a1 + 32);
      if (v41)
      {
        objc_msgSend(v41, "timeRange");
      }
      else
      {
        v141 = 0u;
        v142 = 0u;
        v140 = 0u;
      }
      *(_OWORD *)&v143.value = v140;
      v143.epoch = v141;
      v139 = v162;
      CMTimeRangeFromTimeToTime(&v144, &v143, &v139);
      v42 = *(void **)(a1 + 32);
      v138 = v144;
      objc_msgSend(v42, "setTimeRange:", &v138);
LABEL_37:
      v7 = 0;
      goto LABEL_38;
    }
    v8 = *(_QWORD *)(a1 + 64);
    CMTimeMake(&v137, 1, 1);
    v9 = *(void **)(a1 + 32);
    v136 = v5;
    sub_1D44E6C70(v8, (__int128 *)&v137.value, v9, &v136);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v136;

    if (v10)
    {
      v12 = *(_QWORD *)(a1 + 64);
      v135 = v11;
      sub_1D44E6E9C(v12, 2, v10, 0, (uint64_t)&unk_1E97DAA58, &v135);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v135;

      if (v13)
      {
        v108 = v10;
        v109 = v4;
        v14 = objc_msgSend(v13, "count");
        v111 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v14);
        if (v14 >= 1)
        {
          v15 = 0;
          v112 = v14;
          while (1)
          {
            v16 = v5;
            v17 = v13;
            objc_msgSend(v13, "objectAtIndexedSubscript:", v15);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "featureVector");
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            v166[0] = &unk_1E97DA328;
            v166[1] = &unk_1E97DA328;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 88));
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v166[2] = v20;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v166, 3);
            v21 = (void *)objc_claimAutoreleasedReturnValue();

            v165[0] = &unk_1E97DA340;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 92));
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v165[1] = v22;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 96));
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v165[2] = v23;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v165, 3);
            v24 = (void *)objc_claimAutoreleasedReturnValue();

            v134 = v16;
            objc_msgSend(v19, "sliceAtOrigin:shape:squeeze:error:", v21, v24, 0, &v134);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v5 = v134;

            if (v25)
            {
              objc_msgSend(v111, "addObject:", v25);
            }
            else
            {
              +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v5, CFSTR("error getting slice"));
              v110 = objc_claimAutoreleasedReturnValue();
            }

            if (!v25)
              break;
            ++v15;
            v13 = v17;
            if (v112 == v15)
              goto LABEL_39;
          }
          v69 = 1;
          v70 = v108;
          v4 = v109;
          v13 = v17;
          v7 = (void *)v110;
LABEL_83:

          if (v69)
            goto LABEL_38;
          goto LABEL_37;
        }
LABEL_39:
        v44 = (void *)MEMORY[0x1E0C9E970];
        objc_msgSend(v111, "objectAtIndexedSubscript:", 0);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "multiArrayByConcatenatingMultiArrays:alongAxis:dataType:", v111, 1, objc_msgSend(v45, "dataType"));
        v46 = objc_claimAutoreleasedReturnValue();

        v105 = objc_retainAutorelease((id)v46);
        v107 = objc_msgSend(v105, "dataPointer");
        LODWORD(v46) = *(_DWORD *)(a1 + 92);
        v47 = v46 * objc_msgSend(v13, "count") - *(_DWORD *)(a1 + 100);
        v48 = objc_alloc(MEMORY[0x1E0C9E970]);
        v104 = (v47 + 1);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v104);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v164 = v49;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v164, 1);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v133 = v5;
        v51 = (void *)objc_msgSend(v48, "initWithShape:dataType:error:", v50, 65568, &v133);
        v52 = v133;

        v106 = v51;
        if (v51)
        {
          v112 = objc_msgSend(objc_retainAutorelease(v51), "dataPointer");
          v101 = v47;
          if (v47 < 0)
          {
LABEL_49:
            v67 = *(void **)(a1 + 32);
            if (v67)
            {
              objc_msgSend(v67, "timeRange");
              value = *(_QWORD *)&v130[0];
            }
            else
            {
              value = 0;
              memset(v130, 0, sizeof(v130));
            }
            v72 = v13;
            v131 = *(_OWORD *)((char *)v130 + 8);
            if (v101 < 1)
            {
              v73 = 0;
            }
            else
            {
              v73 = 0;
              v74 = (v101 + 1);
              v75 = 1;
              do
              {
                if (*(float *)(v112 + 4 * v75) > *(float *)(v112 + 4 * v73))
                {
                  v76 = *(void **)(a1 + 32);
                  if (v76)
                  {
                    objc_msgSend(v76, "timeRange");
                    v77 = v127;
                  }
                  else
                  {
                    v77 = 0;
                    v128 = 0u;
                    v129 = 0u;
                    v127 = 0u;
                  }
                  v78 = (double)v77;
                  v79 = v109;
                  objc_msgSend(v109, "fileFormat");
                  v80 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v80, "sampleRate");
                  v82 = (uint64_t)(v81 * (double)(int)v75 / 100.0 + v78);
                  objc_msgSend(v79, "fileFormat");
                  v83 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v83, "sampleRate");
                  CMTimeMake(&v162, v82, (int)v84);
                  value = v162.value;
                  v131 = *(_OWORD *)&v162.timescale;

                  v73 = v75;
                }
                ++v75;
              }
              while (v74 != v75);
            }
            v162 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
            v85 = *(void **)(a1 + 32);
            if (v85)
            {
              objc_msgSend(v85, "timeRange");
            }
            else
            {
              memset(v125, 0, sizeof(v125));
              v124 = 0u;
            }
            v4 = v109;
            v13 = v72;
            v126 = *(CMTime *)&v125[1];
            CMTimeMake(&v123, 10, 1);
            if (CMTimeCompare(&v126, &v123) >= 1)
            {
              v86 = *(void **)(a1 + 32);
              v87 = value;
              if (v86)
              {
                objc_msgSend(v86, "timeRange");
              }
              else
              {
                v119 = 0u;
                v120 = 0u;
                v118 = 0u;
              }
              *(_OWORD *)&v121.value = v118;
              v121.epoch = v119;
              objc_msgSend(v4, "fileFormat");
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v88, "sampleRate");
              v90 = (uint64_t)(v89 * 10.0);
              objc_msgSend(v4, "fileFormat");
              v91 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v91, "sampleRate");
              CMTimeMake(&v117, v90, (int)v92);
              CMTimeRangeMake(&v122, &v121, &v117);
              v93 = *(void **)(a1 + 32);
              v116 = v122;
              objc_msgSend(v93, "setTimeRange:", &v116);

              value = v87;
            }
            v94 = *(_QWORD *)(a1 + 56) + value;
            if (v94 <= objc_msgSend(v4, "length") - 1)
              v95 = *(_QWORD *)(a1 + 56) + value;
            else
              v95 = objc_msgSend(v4, "length") - 1;
            v71 = v105;
            v96 = value;
            objc_msgSend(v4, "fileFormat");
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v97, "sampleRate");
            CMTimeMake(&v162, v95, (int)v98);

            v139.value = v96;
            *(_OWORD *)&v139.timescale = v131;
            v114 = v162;
            CMTimeRangeFromTimeToTime(&v115, &v139, &v114);
            v99 = *(void **)(a1 + 32);
            v113 = v115;
            objc_msgSend(v99, "setTimeRange:", &v113);
            if (*(float *)(v112 + 4 * v73) <= 0.5)
            {
              v70 = v108;
              v7 = (void *)v110;
              if (*(_DWORD *)(a1 + 80) < *(_DWORD *)(a1 + 84))
                --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
            }
            else
            {
              objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
              v70 = v108;
              v7 = (void *)v110;
            }
            v69 = 0;
            goto LABEL_82;
          }
          v53 = 0;
          v102 = v13;
          while (1)
          {
            v54 = *(unsigned int *)(a1 + 100);
            v55 = (float *)&v100[-((4 * v54 * (unint64_t)*(unsigned int *)(a1 + 96) + 15) & 0xFFFFFFFFFFFFFFF0)];
            vDSP_mtrans((const float *)(v107 + 4 * *(_DWORD *)(a1 + 96) * (int)v53), 1, v55, 1, *(int *)(a1 + 96), *(int *)(a1 + 100));
            LODWORD(v56) = *(_DWORD *)(a1 + 96);
            if ((int)v56 >= 1)
              break;
            v60 = 0.0;
LABEL_48:
            v66 = v60 / (double)(int)v56;
            *(float *)(v112 + 4 * v53++) = v66;
            if (v53 == v104)
              goto LABEL_49;
          }
          v103 = v100;
          v57 = 0;
          v58 = 0;
          v59 = 4 * v54;
          v60 = 0.0;
          while (1)
          {
            v61 = v52;
            v62 = *(_QWORD *)(a1 + 72) + v57;
            v63 = *(int *)(a1 + 100);
            v132 = v52;
            +[SNFeaturePrint cosineSimilarityBetweenOneFloat32Array:andAnotherFloat32Array:length:error:](SNFeaturePrint, "cosineSimilarityBetweenOneFloat32Array:andAnotherFloat32Array:length:error:", v62, v55, v63, &v132);
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = v132;

            if (!v64)
              break;
            objc_msgSend(v64, "floatValue");
            v60 = v60 + v65;

            ++v58;
            v56 = *(int *)(a1 + 96);
            v55 = (float *)((char *)v55 + v59);
            v57 += 4;
            if (v58 >= v56)
            {
              v13 = v102;
              goto LABEL_48;
            }
          }
          v69 = 1;
          +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v52, CFSTR("error getting similarity"));
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = v102;
        }
        else
        {
          v52 = v52;
          v69 = 1;
          v7 = v52;
        }
        v70 = v108;
        v4 = v109;
        v71 = v105;
LABEL_82:

        v5 = v52;
        goto LABEL_83;
      }
      +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v5, CFSTR("Error collecting LogMel."));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v11, CFSTR("Error ensuring segment length."));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v11;
    }
  }
  else
  {
    +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 1, v5, CFSTR("Error loading audio files."));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_38:

  return v7;
}

uint64_t sub_1D44EB4E0(uint64_t a1, void *a2, int a3, int32_t a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  id v25;
  SNKShotSegment *v26;
  void *v27;
  CMTimeValue v28;
  void *value;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  char v35;
  char v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  id v41;
  __int128 *v42;
  id v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  unint64_t j;
  id v56;
  SNKShotSegment *v57;
  void *v58;
  id v59;
  id v60;
  unsigned int v61;
  int32_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  char v67;
  uint64_t v68;
  id v70;
  __int128 *v71;
  void *v72;
  id v73;
  void *v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  CMTimeValue v84;
  id v85;
  id v86;
  BOOL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  void *v92;
  id obj;
  id v94;
  CMTime v95;
  CMTime v96;
  CMTime end;
  CMTime start;
  CMTimeRange v99;
  _QWORD aBlock[4];
  id v101;
  CMTime v102;
  CMTime v103;
  __int128 v104;
  __int128 v105;
  CMTimeEpoch epoch;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _OWORD v114[3];
  _BYTE v115[48];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[32];
  __int128 v120;
  CMTimeRange duration;
  CMTime v122;
  __int128 lhs;
  __int128 lhs_16;
  __int128 v125;
  CMTimeRange v126;
  CMTime time;
  void *v128;
  id v129;
  __int128 *v130;
  id v131;
  id v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v15 = a8;
  v16 = a7;
  v17 = a6;
  v18 = a5;
  v19 = a2;
  objc_opt_self();
  CMTimeMake(&v95, a3, a4);
  v81 = v18;
  v76 = v17;
  v77 = v16;
  v90 = v15;
  v20 = v19;
  v92 = (void *)objc_opt_self();
  memset(&v102, 0, sizeof(v102));
  time = v95;
  CMTimeConvertScale(&v102, &time, 16000, kCMTimeRoundingMethod_RoundTowardZero);
  v21 = v20;
  objc_opt_self();
  v94 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v107 = 0u;
  obj = v21;
  v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, &time, 16);
  if (v22)
  {
    v23 = *(_QWORD *)v108;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v108 != v23)
          objc_enumerationMutation(obj);
        v25 = *(id *)(*((_QWORD *)&v107 + 1) + 8 * i);
        objc_opt_self();
        v26 = objc_alloc_init(SNKShotSegment);
        objc_msgSend(v25, "url");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[SNKShotSegment setUrl:](v26, "setUrl:", v27);

        if (v25)
        {
          objc_msgSend(v25, "timeRange");
        }
        else
        {
          lhs_16 = 0u;
          v125 = 0u;
          lhs = 0u;
        }
        +[SNTimeUtils convertScaleForTimeRange:toValue:preferShrinkingWhenRounding:](SNTimeUtils, "convertScaleForTimeRange:toValue:preferShrinkingWhenRounding:", &lhs, 16000, 1);
        duration = v126;
        -[SNKShotSegment setTimeRange:](v26, "setTimeRange:", &duration);

        objc_msgSend(v94, "addObject:", v26);
      }
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, &time, 16);
    }
    while (v22);
  }

  v28 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D44EE564;
  aBlock[3] = &unk_1E97C4678;
  v101 = v90;
  v73 = v90;
  v72 = _Block_copy(aBlock);
  objc_msgSend(v92, "readNumRepetitionsPerTimeShiftFromHallucinator:error:", v81);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v79
    || (objc_msgSend(v92, "readNumTimeShiftsPerSegmentFromHallucinator:error:", v81, a9),
        (v74 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    v74 = 0;
    goto LABEL_49;
  }
  value = (void *)v102.value;
  *(_OWORD *)&v126.start.value = *(_OWORD *)&v102.timescale;
  v30 = v94;
  v31 = (void *)objc_opt_self();
  *(_QWORD *)&v107 = 0;
  *((_QWORD *)&v107 + 1) = &v107;
  v108 = 0x2020000000uLL;
  time.value = v28;
  *(_QWORD *)&time.timescale = 3221225472;
  time.epoch = (CMTimeEpoch)sub_1D44ED768;
  v128 = &unk_1E97C45D8;
  v131 = v31;
  v132 = value;
  v133 = *(_OWORD *)&v126.start.value;
  LODWORD(v134) = 0x2000;
  v130 = &v107;
  v32 = v30;
  v129 = v32;
  v33 = _Block_copy(&time);
  v34 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v35 = 1;
  do
  {
    v36 = v35;
    objc_msgSend(v34, "addObject:", &unk_1E97DA340);
    v35 = 0;
  }
  while ((v36 & 1) != 0);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", value);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "addObject:", v37);

  v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E970]), "initWithShape:dataType:error:", v34, 65568, a9);
  if (v38)
  {
    v39 = objc_retainAutorelease(v38);
    if (+[SNUtils flushBytesFromStreamSource:toBuffer:ofSizeInBytes:error:](SNUtils, "flushBytesFromStreamSource:toBuffer:ofSizeInBytes:error:", v33, objc_msgSend(v39, "dataPointer"), 4 * objc_msgSend(v39, "count"), a9))
    {
      goto LABEL_19;
    }

  }
  v39 = 0;
LABEL_19:

  _Block_object_dispose(&v107, 8);
  if (!v39)
  {
LABEL_49:
    v71 = 0;
    goto LABEL_50;
  }
  v40 = objc_msgSend(v79, "integerValue");
  v41 = v81;
  v42 = (__int128 *)v39;
  v43 = v72;
  v44 = objc_opt_self();
  *(_QWORD *)&v107 = 0;
  *((_QWORD *)&v107 + 1) = &v107;
  *(_QWORD *)&v108 = 0x3032000000;
  *((_QWORD *)&v108 + 1) = sub_1D44EC41C;
  *(_QWORD *)&v109 = sub_1D44EC42C;
  *((_QWORD *)&v109 + 1) = 0;
  v126.start.value = v28;
  *(_QWORD *)&v126.start.timescale = 3221225472;
  v126.start.epoch = (CMTimeEpoch)sub_1D44EDCF4;
  v126.duration.value = (CMTimeValue)&unk_1E97C4600;
  *(_QWORD *)&v126.duration.timescale = &v107;
  v45 = _Block_copy(&v126);
  time.value = v28;
  *(_QWORD *)&time.timescale = 3221225472;
  time.epoch = (CMTimeEpoch)sub_1D44EDD04;
  v128 = &unk_1E97C4650;
  *(_QWORD *)&v133 = &v107;
  *((_QWORD *)&v133 + 1) = v44;
  v131 = v43;
  v132 = v45;
  v129 = v41;
  v130 = v42;
  v134 = v40;
  v71 = v42;
  v46 = v45;
  v47 = v41;
  v48 = v43;
  v49 = _Block_copy(&time);

  _Block_object_dispose(&v107, 8);
  if (!v49)
  {
LABEL_50:
    v68 = 0;
    goto LABEL_51;
  }
  CMTimeMake(&start, -16000, 16000);
  CMTimeMake(&end, 16000, 16000);
  CMTimeRangeFromTimeToTime(&v99, &start, &end);
  v83 = objc_msgSend(v74, "integerValue");
  v96 = v102;
  v50 = v32;
  v85 = v77;
  v78 = v76;
  v86 = v49;
  objc_opt_self();
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v107 = 0u;
  v70 = v50;
  v80 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v107, &time, 16);
  if (v80)
  {
    v75 = *(_QWORD *)v108;
    while (2)
    {
      v51 = 0;
      do
      {
        if (*(_QWORD *)v108 != v75)
        {
          v52 = v51;
          objc_enumerationMutation(v70);
          v51 = v52;
        }
        v82 = v51;
        v53 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * v51);
        v105 = *(_OWORD *)&v99.start.value;
        v84 = v99.duration.value;
        epoch = v99.start.epoch;
        v104 = *(_OWORD *)&v99.duration.timescale;
        v103 = v96;
        v54 = v53;
        v91 = v85;
        v88 = v78;
        v89 = v86;
        objc_opt_self();
        if (v83)
        {
          v87 = 0;
          for (j = 0; j != v83; v87 = j >= v83)
          {
            v56 = v54;
            objc_opt_self();
            v57 = objc_alloc_init(SNKShotSegment);
            objc_msgSend(v56, "url");
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            -[SNKShotSegment setUrl:](v57, "setUrl:", v58);

            if (v54)
            {
              objc_msgSend(v56, "timeRange");
            }
            else
            {
              lhs_16 = 0u;
              v125 = 0u;
              lhs = 0u;
            }
            *(_OWORD *)&v122.value = lhs;
            v122.epoch = lhs_16;
            duration.start = v103;
            CMTimeRangeMake(&v126, &v122, &duration.start);
            duration = v126;
            -[SNKShotSegment setTimeRange:](v57, "setTimeRange:", &duration);

            memset(&v122, 0, sizeof(v122));
            v59 = v91;
            objc_opt_self();
            v60 = v59;
            objc_opt_self();
            lhs = v105;
            *(_QWORD *)&lhs_16 = epoch;
            *((_QWORD *)&lhs_16 + 1) = v84;
            v125 = v104;
            +[SNTimeUtils standardizeTimeRange:directionShouldBePositive:negativeShouldResideInTimescale:](SNTimeUtils, "standardizeTimeRange:directionShouldBePositive:negativeShouldResideInTimescale:", &lhs, 1, 0);
            LODWORD(v59) = v126.duration.value;
            memset(&v126, 0, 24);
            v61 = (*((uint64_t (**)(id, _QWORD))v85 + 2))(v60, LODWORD(v126.duration.value));

            CMTimeMake(&v126.start, v61, (int32_t)v59);
            lhs = v105;
            *(_QWORD *)&lhs_16 = epoch;
            *(_OWORD *)&duration.start.value = *(_OWORD *)&v126.start.value;
            duration.start.epoch = v126.start.epoch;
            CMTimeAdd(&v122, (CMTime *)&lhs, &duration.start);
            memset(&v126, 0, 24);
            if (v54)
            {
              objc_msgSend(v56, "timeRange");
              v62 = v120;
            }
            else
            {
              v62 = 0;
              v120 = 0u;
              memset(v119, 0, sizeof(v119));
            }
            lhs = *(_OWORD *)&v122.value;
            *(_QWORD *)&lhs_16 = v122.epoch;
            CMTimeConvertScale(&v126.start, (CMTime *)&lhs, v62, kCMTimeRoundingMethod_RoundTowardZero);
            if (v57)
              -[SNKShotSegment timeRange](v57, "timeRange");
            else
              memset(v115, 0, sizeof(v115));
            lhs = *(_OWORD *)&v126.start.value;
            *(_QWORD *)&lhs_16 = v126.start.epoch;
            +[SNTimeUtils addOffset:toTimeRange:](SNTimeUtils, "addOffset:toTimeRange:", &lhs, v115);
            v114[0] = v116;
            v114[1] = v117;
            v114[2] = v118;
            -[SNKShotSegment setTimeRange:](v57, "setTimeRange:", v114);
            v63 = (void *)MEMORY[0x1E0CB37E8];
            if (v54)
            {
              objc_msgSend(v56, "timeRange");
              v64 = *((_QWORD *)&v112 + 1);
            }
            else
            {
              v64 = 0;
              v113 = 0u;
              v112 = 0u;
              v111 = 0u;
            }
            objc_msgSend(v63, "numberWithLongLong:", v64);
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v126.start.value);
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            v67 = (*((uint64_t (**)(id, SNKShotSegment *, void *, void *, id, uint64_t))v86 + 2))(v89, v57, v65, v66, v88, a9);

            if ((v67 & 1) == 0)
              break;
            ++j;
          }
        }
        else
        {
          v87 = 1;
        }

        if (!v87)
        {
          v68 = 0;
          goto LABEL_53;
        }
        v51 = v82 + 1;
      }
      while (v82 + 1 != v80);
      v80 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v107, &time, 16);
      if (v80)
        continue;
      break;
    }
  }
  v68 = 1;
LABEL_53:

LABEL_51:
  return v68;
}

void sub_1D44EC0F0(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

void sub_1D44EC338(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  objc_msgSend(v13, "label");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "type");
  v5 = &unk_1E97DA340;
  if (!v4)
    v5 = &unk_1E97DA328;
  v6 = v5;

  v7 = objc_msgSend(v13, "datasetType");
  if (v7 == 1)
  {
    v11 = *(void **)(a1 + 48);
    objc_msgSend(v13, "data");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addObject:", v12);

    v10 = (id *)(a1 + 56);
    goto LABEL_7;
  }
  if (!v7)
  {
    v8 = *(void **)(a1 + 32);
    objc_msgSend(v13, "data");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObject:", v9);

    v10 = (id *)(a1 + 40);
LABEL_7:
    objc_msgSend(*v10, "addObject:", v6);
  }

}

uint64_t sub_1D44EC41C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D44EC42C(uint64_t a1)
{

}

void sub_1D44EC434(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  SNKShotLabel *v9;
  uint64_t v10;
  void *v11;
  SNKShotFeaturizationStreamResult *v12;

  v7 = a3;
  v8 = a2;
  v12 = objc_alloc_init(SNKShotFeaturizationStreamResult);
  -[SNKShotFeaturizationStreamResult setDatasetType:](v12, "setDatasetType:", a4);
  -[SNKShotFeaturizationStreamResult setData:](v12, "setData:", v7);

  LODWORD(a4) = objc_msgSend(v8, "isEqual:", &unk_1E97DA328);
  v9 = [SNKShotLabel alloc];
  if ((_DWORD)a4)
    v10 = -[SNKShotLabel initAsNegativeLabel](v9, "initAsNegativeLabel");
  else
    v10 = -[SNKShotLabel initAsPositiveLabel](v9, "initAsPositiveLabel");
  v11 = (void *)v10;
  -[SNKShotFeaturizationStreamResult setLabel:](v12, "setLabel:", v10);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1D44EC508(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  int value;
  void *v14;
  int v15;
  int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int32_t v21;
  void *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  int32_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  void *v42;
  void *v43;
  id v44;
  id v45;
  _QWORD v46[4];
  id v47;
  id v48;
  id obj;
  _QWORD aBlock[4];
  id v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  CMTime v56;
  CMTimeRange range;
  id v58;
  id v59[3];

  v2 = (void *)MEMORY[0x1D825DE1C]();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v59[0] = *(id *)(v4 + 40);
  +[SNUtils loadModelAtURL:withTimeout:error:](SNUtils, "loadModelAtURL:withTimeout:error:", v3, v59, 5.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v4 + 40), v59[0]);
  if (!v5)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v6 = *(void **)(a1 + 96);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v58 = *(id *)(v7 + 40);
  v8 = objc_msgSend(v6, "recognizeHallucinatorModel:error:", v5, &v58);
  objc_storeStrong((id *)(v7 + 40), v58);
  if (!v8)
  {
LABEL_6:
    v12 = 1;
    goto LABEL_21;
  }
  v9 = 1374389535 * *(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 104);
  v10 = (int)((v9 >> 37) + ((unint64_t)v9 >> 63));
  v11 = *(void **)(a1 + 40);
  if (v11)
    objc_msgSend(v11, "timeRange");
  else
    memset(&range, 0, sizeof(range));
  CMTimeRangeGetEnd(&v56, &range);
  value = v56.value;
  v14 = *(void **)(a1 + 40);
  v42 = v2;
  if (v14)
  {
    objc_msgSend(v14, "timeRange");
    v15 = v53;
  }
  else
  {
    v15 = 0;
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
  }
  v16 = value - v15 + (int)(float)(*(float *)(a1 + 112) * (float)*(int *)(a1 + 116));
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D44EC934;
  aBlock[3] = &unk_1E97C44C0;
  v52 = *(_QWORD *)(a1 + 88);
  v51 = *(id *)(a1 + 64);
  v17 = _Block_copy(aBlock);
  objc_msgSend(*(id *)(a1 + 48), "segments");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "subarrayWithRange:", 0, v10);
  v19 = v10;
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = *(_DWORD *)(a1 + 116);
  v22 = *(void **)(a1 + 72);
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  obj = *(id *)(v23 + 40);
  v43 = v17;
  v24 = sub_1D44EB4E0((uint64_t)SNKShotFeaturizerImpl, v20, v16, v21, v5, &unk_1E97DA328, v22, v17, (uint64_t)&obj);
  objc_storeStrong((id *)(v23 + 40), obj);

  if ((v24 & 1) != 0)
  {
    v25 = v19;
    v26 = MEMORY[0x1E0C809B0];
    if (!objc_msgSend(*(id *)(a1 + 56), "isCancelled"))
    {
      v31 = *(int *)(a1 + 104) - v25;
      v46[0] = v26;
      v46[1] = 3221225472;
      v46[2] = sub_1D44EC9D4;
      v46[3] = &unk_1E97C44E8;
      v47 = *(id *)(a1 + 64);
      v32 = _Block_copy(v46);
      objc_msgSend(*(id *)(a1 + 48), "segments");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "subarrayWithRange:", v25, v31);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = *(_DWORD *)(a1 + 116);
      v36 = *(void **)(a1 + 72);
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v45 = *(id *)(v37 + 40);
      v38 = sub_1D44EB4E0((uint64_t)SNKShotFeaturizerImpl, v34, v16, v35, v5, &unk_1E97DA340, v36, v32, (uint64_t)&v45);
      objc_storeStrong((id *)(v37 + 40), v45);

      v30 = v43;
      if ((v38 & 1) != 0)
      {
        v12 = 0;
      }
      else
      {
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v44 = *(id *)(v39 + 40);
        objc_msgSend(v44, "localizedDescription");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v44, 1, v44, v40);
        objc_storeStrong((id *)(v39 + 40), v44);

        v12 = 1;
      }

      v8 = 0;
      v28 = v47;
      goto LABEL_20;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v28 = *(void **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = 0;
    v12 = 1;
    v8 = 1;
  }
  else
  {
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v48 = *(id *)(v29 + 40);
    objc_msgSend(v48, "localizedDescription");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 1;
    +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v48, 1, v48, v28);
    objc_storeStrong((id *)(v29 + 40), v48);
    v8 = 0;
  }
  v30 = v43;
LABEL_20:
  v2 = v42;

LABEL_21:
  objc_autoreleasePoolPop(v2);
  if (v12)
    return v8;
  else
    return 1;
}

void sub_1D44EC934(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = v5;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend(v5, "shape");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "lastObject");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_1D44EC9D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D44ED338(_QWORD *a1, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _OWORD *, _OWORD *, id *, uint64_t, uint64_t, uint64_t);
  __int128 v13;
  __int128 v14;
  char v15;
  _OWORD v16[3];
  _OWORD v17[3];
  id v18;

  v9 = a1[5];
  v10 = a1[4];
  v11 = *(_QWORD *)(a1[7] + 8);
  v18 = *(id *)(v11 + 40);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _OWORD *, id *, uint64_t, uint64_t, uint64_t))(v9 + 16);
  v13 = a2[1];
  v17[0] = *a2;
  v17[1] = v13;
  v17[2] = a2[2];
  v14 = a4[1];
  v16[0] = *a4;
  v16[1] = v14;
  v16[2] = a4[2];
  v15 = v12(v9, v10, v17, v16, &v18, a6, a7, a8);
  objc_storeStrong((id *)(v11 + 40), v18);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v15;
}

uint64_t sub_1D44ED3D0(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  id obj;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[4];
  id v27;
  id v28;
  uint64_t *v29;
  uint64_t *v30;
  _OWORD v31[3];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  id v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  objc_opt_self();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  obj = v6;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v54, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v23 != v9)
          objc_enumerationMutation(obj);
        v11 = *(id *)(*((_QWORD *)&v22 + 1) + 8 * i);
        v12 = v7;
        objc_opt_self();
        v52 = 0u;
        v53 = 0u;
        v51 = 0u;
        objc_msgSend(v11, "url");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        +[SNAudioFileUtils getTimeRangeEncompassingEntireAudioFileAtURL:error:](SNAudioFileUtils, "getTimeRangeEncompassingEntireAudioFileAtURL:error:", v13, a4);

        if ((BYTE12(v51) & 1) == 0 || (BYTE4(v53) & 1) == 0)
        {

LABEL_22:
          v19 = 0;
          goto LABEL_24;
        }
        v47 = 0;
        v48 = &v47;
        v49 = 0x2020000000;
        v50 = 1;
        v41 = 0;
        v42 = &v41;
        v43 = 0x3032000000;
        v44 = sub_1D44EC41C;
        v45 = sub_1D44EC42C;
        v46 = 0;
        v39 = 0u;
        v40 = 0u;
        v38 = 0u;
        if (v11)
        {
          objc_msgSend(v11, "timeRange");
          v14 = v37;
        }
        else
        {
          v14 = 0;
          v36 = 0uLL;
          v37 = 0uLL;
          v35 = 0uLL;
        }
        v32 = v51;
        v33 = v52;
        v34 = v53;
        +[SNTimeUtils convertScaleForTimeRange:toValue:preferShrinkingWhenRounding:](SNTimeUtils, "convertScaleForTimeRange:toValue:preferShrinkingWhenRounding:", &v32, v14, 1);
        if (v11)
          objc_msgSend(v11, "timeRange");
        else
          memset(v31, 0, sizeof(v31));
        v26[0] = MEMORY[0x1E0C809B0];
        v26[1] = 3221225472;
        v26[2] = sub_1D44ED338;
        v26[3] = &unk_1E97C4538;
        v29 = &v47;
        v15 = v12;
        v28 = v15;
        v16 = v11;
        v27 = v16;
        v30 = &v41;
        v32 = v38;
        v33 = v39;
        v34 = v40;
        +[SNTimeUtils clipTimeRange:toBounds:handler:](SNTimeUtils, "clipTimeRange:toBounds:handler:", &v32, v31, v26);
        v17 = *((unsigned __int8 *)v48 + 24);
        if (a4 && !*((_BYTE *)v48 + 24))
        {
          *a4 = objc_retainAutorelease((id)v42[5]);
          v17 = *((unsigned __int8 *)v48 + 24);
        }
        v18 = v17 == 0;

        _Block_object_dispose(&v41, 8);
        _Block_object_dispose(&v47, 8);

        if (v18)
          goto LABEL_22;
      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v54, 16);
      v19 = 1;
      if (v8)
        continue;
      break;
    }
  }
  else
  {
    v19 = 1;
  }
LABEL_24:

  return v19;
}

void sub_1D44ED73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44ED768(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  _QWORD aBlock[4];
  id v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v5 = a2;
  v6 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D44ED8E4;
  aBlock[3] = &unk_1E97C4560;
  v22 = *(_OWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 72);
  v21 = *(_QWORD *)(a1 + 40);
  v24 = *(_DWORD *)(a1 + 80);
  v7 = v5;
  v20 = v7;
  v17[0] = v6;
  v17[1] = 3221225472;
  v17[2] = sub_1D44EDA20;
  v17[3] = &unk_1E97C4588;
  v8 = _Block_copy(aBlock);
  v18 = v8;
  v9 = _Block_copy(v17);
  v14[0] = v6;
  v14[1] = 3221225472;
  v14[2] = sub_1D44EDB24;
  v14[3] = &unk_1E97C45B0;
  v16 = *(_QWORD *)(a1 + 48);
  v10 = v9;
  v15 = v10;
  v11 = _Block_copy(v14);
  if (sub_1D44ED3D0(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32), v11, a3))
    v12 = sub_1D44ED3D0(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32), v10, a3);
  else
    v12 = 0;

  return v12;
}

BOOL sub_1D44ED8E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  int64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _BOOL8 v13;
  CMTimeRange start;
  CMTime duration;
  CMTimeRange v17;

  v7 = a2;
  if (*(_QWORD *)(a3 + 24) >= *(_QWORD *)(a1 + 48) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    v8 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  else
    v8 = *(_QWORD *)(a3 + 24);
  memset(&v17, 0, sizeof(v17));
  CMTimeMake(&duration, v8, *(_DWORD *)(a3 + 32));
  *(_OWORD *)&start.start.value = *(_OWORD *)a3;
  start.start.epoch = *(_QWORD *)(a3 + 16);
  CMTimeRangeMake(&v17, &start.start, &duration);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v8;
  if (v8)
  {
    v9 = *(unsigned int *)(a1 + 72);
    +[SNUtils zeroBufferPopulator](SNUtils, "zeroBufferPopulator");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[SNUtils zeroBufferPopulator](SNUtils, "zeroBufferPopulator");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 32);
    start = v17;
    v13 = +[SNUtils flushBytesFromPreciseTimeRangeInAudioFile:timeRange:maxFramesPerBuffer:recycleBuffers:prefixBufferPopulator:suffixBufferPopulator:intoSink:error:](SNUtils, "flushBytesFromPreciseTimeRangeInAudioFile:timeRange:maxFramesPerBuffer:recycleBuffers:prefixBufferPopulator:suffixBufferPopulator:intoSink:error:", v7, &start, v9, 1, v10, v11, v12, a4);

  }
  else
  {
    v13 = 1;
  }

  return v13;
}

uint64_t sub_1D44EDA20(uint64_t a1, void *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  objc_class *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, void *, __int128 *, uint64_t, uint64_t, uint64_t);
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, void *, __int128 *, uint64_t, uint64_t, uint64_t);
  __int128 v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v9 = (objc_class *)MEMORY[0x1E0C89A98];
  v10 = a2;
  v11 = [v9 alloc];
  objc_msgSend(v10, "url");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = (void *)objc_msgSend(v11, "initForReading:commonFormat:interleaved:error:", v12, 1, 0, a5);
  if (v13
    && (v16 = *(_QWORD *)(a1 + 32),
        v17 = *(unsigned int (**)(uint64_t, void *, __int128 *, uint64_t, uint64_t, uint64_t))(v16 + 16),
        v18 = a3[1],
        v26 = *a3,
        v27 = v18,
        v28 = a3[2],
        v17(v16, v13, &v26, a5, v14, v15)))
  {
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(uint64_t (**)(uint64_t, void *, __int128 *, uint64_t, uint64_t, uint64_t))(v21 + 16);
    v23 = a4[1];
    v26 = *a4;
    v27 = v23;
    v28 = a4[2];
    v24 = v22(v21, v13, &v26, a5, v19, v20);
  }
  else
  {
    v24 = 0;
  }

  return v24;
}

uint64_t sub_1D44EDB24(uint64_t a1, void *a2, __int128 *a3, _OWORD *a4, uint64_t a5)
{
  void *v7;
  __int128 v8;
  uint64_t (**v9)(id, id, CMTimeRange *, CMTimeRange *, _QWORD);
  id v10;
  CMTimeEpoch v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CMTime end;
  CMTimeRange rhs;
  CMTime duration;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTimeRange range;
  CMTime v24;

  v7 = *(void **)(a1 + 32);
  v15 = *a3;
  v16 = a3[1];
  v8 = a4[1];
  *(_OWORD *)&range.start.value = *a4;
  *(_OWORD *)&range.start.epoch = v8;
  *(_OWORD *)&range.duration.timescale = a4[2];
  v9 = v7;
  v10 = a2;
  objc_opt_self();
  memset(&v24, 0, sizeof(v24));
  CMTimeRangeGetEnd(&v24, &range);
  memset(&v22, 0, sizeof(v22));
  CMTimeMake(&v22, 1, 1);
  memset(&v21, 0, sizeof(v21));
  range.start = v24;
  rhs.start = v22;
  CMTimeSubtract(&v21, &range.start, &rhs.start);
  memset(&v20, 0, sizeof(v20));
  range.start = v21;
  v14 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&rhs.start.value = *MEMORY[0x1E0CA2E68];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  rhs.start.epoch = v11;
  if (CMTimeCompare(&range.start, &rhs.start) == -1)
    CMTimeMake(&v20, 0, v21.timescale);
  else
    v20 = v21;
  *(_OWORD *)&rhs.start.value = v15;
  rhs.start.epoch = v16;
  *(_OWORD *)&duration.value = v14;
  duration.epoch = v11;
  CMTimeRangeMake(&range, &rhs.start, &duration);
  duration = v20;
  end = v24;
  CMTimeRangeFromTimeToTime(&rhs, &duration, &end);
  v12 = v9[2](v9, v10, &range, &rhs, a5);

  return v12;
}

id sub_1D44EDCF4(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

uint64_t sub_1D44EDD04(uint64_t a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  void *context;
  uint64_t v74;
  id v75;
  id v76;
  void (**v77)(void);
  id v78;
  id v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  _QWORD aBlock[4];
  id v87;
  uint64_t v88;
  _OWORD v89[3];
  _QWORD v90[6];
  _QWORD v91[8];

  v91[6] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D44EE4D0;
  aBlock[3] = &unk_1E97C4628;
  v88 = *(_QWORD *)(a1 + 64);
  v87 = *(id *)(a1 + 48);
  v14 = _Block_copy(aBlock);
  context = (void *)MEMORY[0x1D825DE1C]();
  v15 = *(void **)(a1 + 56);
  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 80);
  v85 = 0;
  v19 = v10;
  v78 = v16;
  v77 = v15;
  v76 = v17;
  v20 = v13;
  v21 = v12;
  v82 = v11;
  v84 = v14;
  objc_opt_self();
  v22 = objc_alloc(MEMORY[0x1E0C89A98]);
  objc_msgSend(v19, "url");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend(v22, "initForReading:commonFormat:interleaved:error:", v23, 1, 0, &v85);

  if (!v24)
  {
    v25 = 0;

    goto LABEL_43;
  }
  if (v19)
    objc_msgSend(v19, "timeRange");
  else
    memset(v89, 0, sizeof(v89));
  +[SNUtils zeroBufferPopulator](SNUtils, "zeroBufferPopulator");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[SNUtils zeroBufferPopulator](SNUtils, "zeroBufferPopulator");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  +[SNUtils createMultiArrayContainingPreciseTimeRangeOfAudioFile:timeRange:maxFramesPerBuffer:recycleBuffers:prefixBufferPopulator:suffixBufferPopulator:numDimensions:error:](SNUtils, "createMultiArrayContainingPreciseTimeRangeOfAudioFile:timeRange:maxFramesPerBuffer:recycleBuffers:prefixBufferPopulator:suffixBufferPopulator:numDimensions:error:", v24, v89, 0x2000, 1, v26, v27, 3, &v85);
  v25 = objc_claimAutoreleasedReturnValue();

  v71 = (void *)v25;
  if (!v25)
  {

    goto LABEL_43;
  }
  if (!v18)
  {
    v25 = 1;

    goto LABEL_43;
  }
  v28 = 0;
  v66 = v18 - 1;
  v69 = v21;
  v70 = v20;
  v67 = v24;
  v68 = v19;
  while (1)
  {
    v74 = v28;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v77[2]();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = v78;
    v75 = v84;
    v31 = v30;
    v32 = v82;
    v33 = v21;
    v34 = v20;
    v35 = v29;
    v36 = v76;
    v37 = v71;
    objc_opt_self();
    v83 = v37;
    v38 = v36;
    v39 = v34;
    v40 = v33;
    v41 = v32;
    v81 = v31;
    v42 = v35;
    objc_opt_self();
    +[SNUtils toMLMultiArrayConvertFromFloatScalar:error:](SNUtils, "toMLMultiArrayConvertFromFloatScalar:error:", v42, &v85);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = v42;

    if (!v43)
    {
      v50 = 0;
      v45 = 0;
      v44 = 0;
LABEL_20:
      v47 = 0;
LABEL_21:
      v51 = 0;
      goto LABEL_22;
    }
    +[SNUtils toMLMultiArrayConvertFromFloatScalar:error:](SNUtils, "toMLMultiArrayConvertFromFloatScalar:error:", v41, &v85);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v44)
    {
      v50 = 0;
      v45 = 0;
      goto LABEL_20;
    }
    +[SNUtils toMLMultiArrayConvertFromFloatScalar:error:](SNUtils, "toMLMultiArrayConvertFromFloatScalar:error:", v39, &v85);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v45)
    {
      v50 = 0;
      goto LABEL_20;
    }
    +[SNUtils toMLMultiArrayConvertFromFloatScalar:error:](SNUtils, "toMLMultiArrayConvertFromFloatScalar:error:", v40, &v85);
    v46 = objc_claimAutoreleasedReturnValue();
    v47 = (void *)v46;
    if (!v46)
    {
      v50 = 0;
      goto LABEL_21;
    }
    v48 = (void *)MEMORY[0x1E0C99E08];
    v90[0] = CFSTR("foreground");
    v90[1] = CFSTR("background");
    v91[0] = v83;
    v91[1] = v38;
    v90[2] = CFSTR("shiftIteration");
    v90[3] = CFSTR("set");
    v91[2] = v43;
    v91[3] = v45;
    v90[4] = CFSTR("shiftedSamples");
    v90[5] = CFSTR("segmentLength");
    v91[4] = v46;
    v91[5] = v44;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v91, v90, 6);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "dictionaryWithDictionary:", v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v50)
      goto LABEL_21;
    if (v81)
      objc_msgSend(v50, "setObject:forKey:", v81, CFSTR("stateIn"));
    v51 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E8F8]), "initWithDictionary:error:", v50, &v85);
LABEL_22:

    v52 = v81;
    v21 = v69;
    v20 = v70;
    if (!v51)
      goto LABEL_40;
    objc_msgSend(v79, "predictionFromFeatures:error:", v51, &v85);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v53)
      goto LABEL_40;
    v54 = v53;
    v55 = v75;
    objc_opt_self();
    objc_msgSend(v54, "featureValueForName:", CFSTR("embedding"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "multiArrayValue");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v57)
    {
      +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v85, 1, 0, CFSTR("Expected multiarray embedding output."));
      goto LABEL_39;
    }
    objc_msgSend(v54, "featureValueForName:", CFSTR("label"));
    v58 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v58, "multiArrayValue");
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v59)
    {
      +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v85, 1, 0, CFSTR("Expected multiarray label output."));
LABEL_36:
      v56 = v58;
      goto LABEL_38;
    }
    objc_msgSend(v58, "multiArrayValue");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    +[SNUtils toFloatScalarConvertFromMLMultiArray:error:](SNUtils, "toFloatScalarConvertFromMLMultiArray:error:", v60, &v85);
    v61 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v61)
      goto LABEL_36;
    objc_msgSend(v54, "featureValueForName:", CFSTR("stateOut"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v56, "multiArrayValue");
    v62 = objc_claimAutoreleasedReturnValue();
    if (!v62)
      break;
    v63 = (void *)v62;
    v25 = (*((uint64_t (**)(id, void *, void *, uint64_t, id *))v84 + 2))(v55, v57, v61, v62, &v85);

    if (!(_DWORD)v25)
      goto LABEL_41;
    v28 = v74 + 1;
    v24 = v67;
    v19 = v68;
    if (v66 == v74)
      goto LABEL_42;
  }
  +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", &v85, 1, 0, CFSTR("Expected multiarray state output."));

LABEL_38:
  v52 = v81;
LABEL_39:

LABEL_40:
  v25 = 0;
LABEL_41:
  v24 = v67;
  v19 = v68;
LABEL_42:

LABEL_43:
  v64 = v85;
  objc_autoreleasePoolPop(context);
  if (a6)
    *a6 = objc_retainAutorelease(v64);

  return v25;
}

uint64_t sub_1D44EE4D0(uint64_t a1, void *a2, void *a3, id obj)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
  v8 = obj;
  v9 = a3;
  v10 = a2;
  v11 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  return v11;
}

uint64_t sub_1D44EE564(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 1;
}

_QWORD *sub_1D44EE9C8(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  int v10;
  std::logic_error *exception;

  v3 = a2[1];
  *result = *a2;
  result[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a3[1];
  result[2] = *a3;
  result[3] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (!*a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "analyzerProcessingGraph should be non-null");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF0C0, MEMORY[0x1E0DE42A0]);
  }
  if (!*(_BYTE *)(*a2 + 761))
  {
    v9 = "requestProcessingGraph->configured()";
    v10 = 21;
    goto LABEL_14;
  }
  if (*a3 && !*(_BYTE *)(*a3 + 761))
  {
    v9 = "sharedProcessingGraph->configured()";
    v10 = 22;
LABEL_14:
    __assert_rtn("ProcessingContext", "SoundAnalysis_ProcessingContext.cpp", v10, v9);
  }
  return result;
}

void sub_1D44EEABC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  __cxa_free_exception(v3);
  sub_1D44DAAE4(v2);
  sub_1D44DAAE4(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1D44EEAE8@<Q0>(DSPGraph::Graph **a1@<X0>, uint64_t a2@<X8>)
{
  DSPGraph::Graph *v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;
  uint64_t v9;
  __int128 v10;

  v4 = a1[2];
  if (v4 && (v5 = sub_1D44DF888(v4), v5 == sub_1D44DF780(*a1)))
  {
    v6 = sub_1D44EEB7C(*a1);
    v7 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v6;
    *(_OWORD *)(a2 + 16) = v7;
    result = *(__n128 *)(v6 + 32);
    *(__n128 *)(a2 + 32) = result;
  }
  else
  {
    v9 = sub_1D44E2A18(*a1);
    result = *(__n128 *)v9;
    v10 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v9;
    *(_OWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 + 32);
    *(_DWORD *)(a2 + 40) = 1;
  }
  return result;
}

uint64_t sub_1D44EEB7C(DSPGraph::Graph *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  const char *v4;
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD v7[3];

  v1 = DSPGraph::Graph::in(a1);
  v2 = *(_QWORD *)(v1 + 88);
  if (*(_QWORD *)(v1 + 96) != v2)
    return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
  sub_1D44DA4C4(v7, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v6, "out");
  v5 = (_QWORD *)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    v5 = (_QWORD *)*v5;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v4, v5, (uint64_t)(*(_QWORD *)(v1 + 96) - *(_QWORD *)(v1 + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44EEC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44EEC80@<X0>(DSPGraph::Graph **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD v17[3];

  result = DSPGraph::Graph::numOutputs(*a1);
  if (!(_DWORD)result)
  {
    *(_OWORD *)(a2 + 28) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v5 = DSPGraph::Graph::out(*a1);
  v6 = *(_QWORD *)(v5 + 64);
  if (*(_QWORD *)(v5 + 72) != v6)
  {
    v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) + 120);
    v8 = *(_DWORD *)(v7 + 8);
    if (v8 == 1819304813 || v8 == 1718773105)
    {
      v10 = sub_1D44E2B84(*a1);
    }
    else
    {
      v11 = *(_DWORD *)(v7 + 16);
      v10 = sub_1D44E2B84(*a1);
      if (v11)
      {
        result = sub_1D44DF888(*a1);
        goto LABEL_13;
      }
    }
    result = 1;
LABEL_13:
    v12 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v10;
    *(_OWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v10 + 32);
    *(_DWORD *)(a2 + 40) = result;
    return result;
  }
  v13 = v5;
  sub_1D44DA4C4(v17, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v16, "in");
  v15 = (_QWORD *)(v13 + 32);
  if (*(char *)(v13 + 55) < 0)
    v15 = (_QWORD *)*v15;
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v14, v15, (uint64_t)(*(_QWORD *)(v13 + 72) - *(_QWORD *)(v13 + 64)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44EEDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

void sub_1D44EF350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D44EF3D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D44EF4E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44EF4FC(void *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  void *v7;
  void *v8;
  objc_super v9;

  if (!a1)
    return 0;
  v9.receiver = a1;
  v9.super_class = (Class)SNDSPGraphBox;
  v5 = objc_msgSendSuper2(&v9, sel_init);
  if (v5)
  {
    if (!a2)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", sel_initWithBox_fromGraph_, v5, CFSTR("SNDSPGraphBox.mm"), 35, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("box"));

    }
    if (!*a3)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", sel_initWithBox_fromGraph_, v5, CFSTR("SNDSPGraphBox.mm"), 36, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("graph"));

    }
    v5[1] = a2;
    sub_1D44EF64C(v5 + 2, a3);
  }
  return v5;
}

void sub_1D44EF628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44EF64C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t sub_1D44EF6C4(uint64_t result)
{
  if (result)
    return ((*(_QWORD *)(*(_QWORD *)(result + 8) + 96) - *(_QWORD *)(*(_QWORD *)(result + 8) + 88)) >> 5);
  return result;
}

BOOL sub_1D44EF6DC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  _BOOL8 v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v12;
  uint64_t (**v13)();
  char v14;
  uint64_t (***v15)();
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v13 = &off_1E97B1140;
  v14 = 0;
  v15 = &v13;
  v12 = *a3;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(_QWORD **)(a1 + 8) + 304))(*(_QWORD *)(a1 + 8), a4, a5, a6, &v12, a2);
  *a3 = v12;
  v8 = v7 == 0;
  v9 = v15;
  if (v15 == &v13)
  {
    v10 = 4;
    v9 = &v13;
    goto LABEL_6;
  }
  if (v15)
  {
    v10 = 5;
LABEL_6:
    (*v9)[v10]();
  }
  return v8;
}

void sub_1D44EF7D0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, int *a16, __int128 a17, int a18, int a19)
{
  char *v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  void *v26;
  uint64_t v27;
  int *v28;
  int v29;

  if (a2)
  {
    if (a2 == 4)
    {
      v20 = (char *)__cxa_begin_catch(a1);
      v21 = *((_DWORD *)v20 + 2);
      a10 = v21;
      sub_1D4501768();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = v20 + 72;
        if (v20[95] < 0)
          v23 = (_QWORD *)*v23;
        v24 = v20 + 16;
        if (v20[39] < 0)
          v24 = (_QWORD *)*v24;
        v25 = *((_DWORD *)v20 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v21;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a16 = &a10;
        LOWORD(a17) = 2080;
        *(_QWORD *)((char *)&a17 + 2) = v23;
        WORD5(a17) = 2080;
        *(_QWORD *)((char *)&a17 + 12) = v24;
        LOWORD(a19) = 1024;
        *(int *)((char *)&a19 + 2) = v25;
        _os_log_impl(&dword_1D42A7000, v22, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v26 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v27;
        _os_log_impl(&dword_1D42A7000, v22, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v28 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v29 = *v28;
        a10 = *v28;
        sub_1D4501768();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v29;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a16 = &a10;
          _os_log_impl(&dword_1D42A7000, v22, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v22, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 48))(a14);
      JUMPOUT(0x1D44EF764);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

BOOL sub_1D44EFA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = &off_1E97B1188;
  v11 = 0;
  v12 = &v10;
  v6 = (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8)
                                                                                           + 312))(*(_QWORD *)(a1 + 8), a4, a5, a6, a3, a2) == 0;
  v7 = v12;
  if (v12 == &v10)
  {
    v8 = 4;
    v7 = &v10;
    goto LABEL_6;
  }
  if (v12)
  {
    v8 = 5;
LABEL_6:
    (*v7)[v8]();
  }
  return v6;
}

void sub_1D44EFB7C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v21;
  int v22;
  NSObject *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  int *v29;
  int v30;

  if (a2)
  {
    if (a2 == 4)
    {
      v21 = (char *)__cxa_begin_catch(a1);
      v22 = *((_DWORD *)v21 + 2);
      a11 = v22;
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = v21 + 72;
        if (v21[95] < 0)
          v24 = (_QWORD *)*v24;
        v25 = v21 + 16;
        if (v21[39] < 0)
          v25 = (_QWORD *)*v25;
        v26 = *((_DWORD *)v21 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v22;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v24;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v25;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v26;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v27 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v28;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v29 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v30 = *v29;
        a11 = *v29;
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v30;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44EFB10);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D44EFE48(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t (**v9)();
  char v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v9 = &off_1E97B10F8;
  v10 = 0;
  v11 = &v9;
  *a2 = (*(float (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a3, a4, a5);
  v5 = 1;
  v6 = v11;
  if (v11 == &v9)
  {
    v7 = 4;
    v6 = &v9;
    goto LABEL_6;
  }
  if (v11)
  {
    v7 = 5;
LABEL_6:
    (*v6)[v7]();
  }
  return v5;
}

void sub_1D44EFF1C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v21;
  int v22;
  NSObject *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  int *v29;
  int v30;

  if (a2)
  {
    if (a2 == 4)
    {
      v21 = (char *)__cxa_begin_catch(a1);
      v22 = *((_DWORD *)v21 + 2);
      a11 = v22;
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = v21 + 72;
        if (v21[95] < 0)
          v24 = (_QWORD *)*v24;
        v25 = v21 + 16;
        if (v21[39] < 0)
          v25 = (_QWORD *)*v25;
        v26 = *((_DWORD *)v21 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v22;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v24;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v25;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v26;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v27 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v28;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v29 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v30 = *v29;
        a11 = *v29;
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v30;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44EFEB0);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F01E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  uint64_t v3;
  uint64_t (**v5)();
  char v6;
  uint64_t (***v7)();
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v5 = &off_1E97B11D0;
  v6 = 0;
  v7 = &v5;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v1 = 1;
  v2 = v7;
  if (v7 == &v5)
  {
    v3 = 4;
    v2 = &v5;
    goto LABEL_6;
  }
  if (v7)
  {
    v3 = 5;
LABEL_6:
    (*v2)[v3]();
  }
  return v1;
}

void sub_1D44F02A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v21;
  int v22;
  NSObject *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  int *v29;
  int v30;

  if (a2)
  {
    if (a2 == 4)
    {
      v21 = (char *)__cxa_begin_catch(a1);
      v22 = *((_DWORD *)v21 + 2);
      a11 = v22;
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = v21 + 72;
        if (v21[95] < 0)
          v24 = (_QWORD *)*v24;
        v25 = v21 + 16;
        if (v21[39] < 0)
          v25 = (_QWORD *)*v25;
        v26 = *((_DWORD *)v21 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v22;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v24;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v25;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v26;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v27 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v28;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v29 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v30 = *v29;
        a11 = *v29;
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v30;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44F023CLL);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F0570(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t result;
  const char *v9;
  _QWORD *v10;
  void *v11;
  uint64_t (**v12)();
  int v13;
  uint64_t (***v14)();
  uint8_t buf[8];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = &off_1E97B0EB8;
  v13 = 0;
  v14 = &v12;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (a2 < (unint64_t)((*(_QWORD *)(v3 + 72) - v4) >> 5))
  {
    v5 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32 * a2)
                                                                          + 40))(v4 + 32 * a2)
                                     + 120)
                         + 40);
    v6 = v14;
    if (v14 == &v12)
    {
      v7 = 4;
      v6 = &v12;
    }
    else
    {
      if (!v14)
        return v5;
      v7 = 5;
    }
    (*v6)[v7]();
    return v5;
  }
  sub_1D44DA4C4(&v11, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(buf, "in");
  v10 = (_QWORD *)(v3 + 32);
  if (*(char *)(v3 + 55) < 0)
    v10 = (_QWORD *)*v10;
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v9, v10, (uint64_t)(*(_QWORD *)(v3 + 72) - *(_QWORD *)(v3 + 64)) >> 5, a2);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44F096C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v23;
  uint64_t v24;

  __cxa_end_catch();
  v23 = a22;
  if (a22 == &a19)
  {
    v24 = 4;
    v23 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *sub_1D44F09F0(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  void *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint8_t buf[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v9[0] = &off_1E97B0F90;
    v9[1] = 0;
    v10 = v9;
    v3 = result[1];
    v4 = *(_QWORD *)(v3 + 64);
    if (a2 >= (unint64_t)((*(_QWORD *)(v3 + 72) - v4) >> 5))
    {
      sub_1D44DA4C4(&v8, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(buf, "in");
      v7 = (_QWORD *)(v3 + 32);
      if (*(char *)(v3 + 55) < 0)
        v7 = (_QWORD *)*v7;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v6, v7, (uint64_t)(*(_QWORD *)(v3 + 72) - *(_QWORD *)(v3 + 64)) >> 5, a2);
      result = (_QWORD *)DSPGraph::ThrowException();
      __break(1u);
    }
    else
    {
      (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32 * a2) + 40))(v4 + 32
                                                                                                 * a2);
      result = v10;
      if (v10 == v9)
      {
        v5 = 4;
        result = v9;
      }
      else
      {
        if (!v10)
          return result;
        v5 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    }
  }
  return result;
}

void sub_1D44F0DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v23;
  uint64_t v24;

  __cxa_end_catch();
  v23 = a22;
  if (a22 == &a19)
  {
    v24 = 4;
    v23 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F0E74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t result;
  const char *v9;
  _QWORD *v10;
  void *v11;
  uint64_t (**v12)();
  int v13;
  uint64_t (***v14)();
  uint8_t buf[8];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = &off_1E97B1020;
  v13 = 0;
  v14 = &v12;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (a2 < (unint64_t)((*(_QWORD *)(v3 + 72) - v4) >> 5))
  {
    v5 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32 * a2)
                                                                          + 40))(v4 + 32 * a2)
                                     + 120)
                         + 28);
    v6 = v14;
    if (v14 == &v12)
    {
      v7 = 4;
      v6 = &v12;
    }
    else
    {
      if (!v14)
        return v5;
      v7 = 5;
    }
    (*v6)[v7]();
    return v5;
  }
  sub_1D44DA4C4(&v11, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(buf, "in");
  v10 = (_QWORD *)(v3 + 32);
  if (*(char *)(v3 + 55) < 0)
    v10 = (_QWORD *)*v10;
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v9, v10, (uint64_t)(*(_QWORD *)(v3 + 72) - *(_QWORD *)(v3 + 64)) >> 5, a2);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44F1270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v23;
  uint64_t v24;

  __cxa_end_catch();
  v23 = a22;
  if (a22 == &a19)
  {
    v24 = 4;
    v23 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F12F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t result;
  const char *v9;
  _QWORD *v10;
  void *v11;
  uint64_t (**v12)();
  int v13;
  uint64_t (***v14)();
  uint8_t buf[8];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = &off_1E97B0F48;
  v13 = 0;
  v14 = &v12;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 88);
  if (a2 < (unint64_t)((*(_QWORD *)(v3 + 96) - v4) >> 5))
  {
    v5 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32 * a2)
                                                                          + 40))(v4 + 32 * a2)
                                     + 120)
                         + 40);
    v6 = v14;
    if (v14 == &v12)
    {
      v7 = 4;
      v6 = &v12;
    }
    else
    {
      if (!v14)
        return v5;
      v7 = 5;
    }
    (*v6)[v7]();
    return v5;
  }
  sub_1D44DA4C4(&v11, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(buf, "out");
  v10 = (_QWORD *)(v3 + 32);
  if (*(char *)(v3 + 55) < 0)
    v10 = (_QWORD *)*v10;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v9, v10, (uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 5, a2);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44F16F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v23;
  uint64_t v24;

  __cxa_end_catch();
  v23 = a22;
  if (a22 == &a19)
  {
    v24 = 4;
    v23 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *sub_1D44F1774(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  void *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint8_t buf[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v9[0] = &off_1E97B0FD8;
    v9[1] = 0;
    v10 = v9;
    v3 = result[1];
    v4 = *(_QWORD *)(v3 + 88);
    if (a2 >= (unint64_t)((*(_QWORD *)(v3 + 96) - v4) >> 5))
    {
      sub_1D44DA4C4(&v8, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(buf, "out");
      v7 = (_QWORD *)(v3 + 32);
      if (*(char *)(v3 + 55) < 0)
        v7 = (_QWORD *)*v7;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v6, v7, (uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 5, a2);
      result = (_QWORD *)DSPGraph::ThrowException();
      __break(1u);
    }
    else
    {
      (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32 * a2) + 40))(v4 + 32
                                                                                                 * a2);
      result = v10;
      if (v10 == v9)
      {
        v5 = 4;
        result = v9;
      }
      else
      {
        if (!v10)
          return result;
        v5 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    }
  }
  return result;
}

void sub_1D44F1B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v23;
  uint64_t v24;

  __cxa_end_catch();
  v23 = a22;
  if (a22 == &a19)
  {
    v24 = 4;
    v23 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F1BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t result;
  const char *v9;
  _QWORD *v10;
  void *v11;
  uint64_t (**v12)();
  int v13;
  uint64_t (***v14)();
  uint8_t buf[8];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = &off_1E97B1068;
  v13 = 0;
  v14 = &v12;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 88);
  if (a2 < (unint64_t)((*(_QWORD *)(v3 + 96) - v4) >> 5))
  {
    v5 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32 * a2)
                                                                          + 40))(v4 + 32 * a2)
                                     + 120)
                         + 28);
    v6 = v14;
    if (v14 == &v12)
    {
      v7 = 4;
      v6 = &v12;
    }
    else
    {
      if (!v14)
        return v5;
      v7 = 5;
    }
    (*v6)[v7]();
    return v5;
  }
  sub_1D44DA4C4(&v11, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(buf, "out");
  v10 = (_QWORD *)(v3 + 32);
  if (*(char *)(v3 + 55) < 0)
    v10 = (_QWORD *)*v10;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v9, v10, (uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 5, a2);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44F1FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v23;
  uint64_t v24;

  __cxa_end_catch();
  v23 = a22;
  if (a22 == &a19)
  {
    v24 = 4;
    v23 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F2078(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  uint64_t v3;
  uint64_t (**v5)();
  int v6;
  uint64_t (***v7)();
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v5 = &off_1E97B0D98;
  v6 = 0;
  v7 = &v5;
  v1 = DSPGraph::Box::sampleRate(*(DSPGraph::Box **)(a1 + 8));
  v2 = v7;
  if (v7 == &v5)
  {
    v3 = 4;
    v2 = &v5;
    goto LABEL_6;
  }
  if (v7)
  {
    v3 = 5;
LABEL_6:
    (*v2)[v3]();
  }
  return v1;
}

void sub_1D44F212C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v21;
  int v22;
  NSObject *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  int *v29;
  int v30;

  if (a2)
  {
    if (a2 == 4)
    {
      v21 = (char *)__cxa_begin_catch(a1);
      v22 = *((_DWORD *)v21 + 2);
      a11 = v22;
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = v21 + 72;
        if (v21[95] < 0)
          v24 = (_QWORD *)*v24;
        v25 = v21 + 16;
        if (v21[39] < 0)
          v25 = (_QWORD *)*v25;
        v26 = *((_DWORD *)v21 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v22;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v24;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v25;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v26;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v27 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v28;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v29 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v30 = *v29;
        a11 = *v29;
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v30;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44F20C0);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1D44F23F4(_QWORD *result, char a2)
{
  uint64_t v2;
  _QWORD v3[6];
  char v4;
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = result;
  v4 = a2;
  if (result)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3321888768;
    v3[2] = sub_1D44F250C;
    v3[3] = &unk_1E97B1460;
    v3[4] = &v5;
    v3[5] = &v4;
    v6[0] = &off_1E97B0AC8;
    v7 = v6;
    sub_1D44F2548(v3);
    result = v7;
    if (v7 == v6)
    {
      v2 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
        return result;
      v2 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
  }
  return result;
}

void sub_1D44F24D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 32);
  if (v3 == (_QWORD *)(v1 - 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44F250C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;

  v1 = *(unsigned __int8 **)(a1 + 40);
  v2 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 56))(v2, *v1);
}

__n128 sub_1D44F2528(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

void sub_1D44F2548(void *a1)
{
  void (**v1)(void);

  v1 = a1;
  v1[2]();

}

void sub_1D44F25BC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, __int128 buf, int *a13, __int128 a14, int a15, int a16)
{
  uint64_t v16;
  char *v18;
  int v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  void *v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;

  if (a2)
  {
    if (a2 == 4)
    {
      v18 = (char *)__cxa_begin_catch(a1);
      v19 = *((_DWORD *)v18 + 2);
      a11 = v19;
      sub_1D4501768();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = v18 + 72;
        if (v18[95] < 0)
          v21 = (_QWORD *)*v21;
        v22 = v18 + 16;
        if (v18[39] < 0)
          v22 = (_QWORD *)*v22;
        v23 = *((_DWORD *)v18 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v19;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a13 = &a11;
        LOWORD(a14) = 2080;
        *(_QWORD *)((char *)&a14 + 2) = v21;
        WORD5(a14) = 2080;
        *(_QWORD *)((char *)&a14 + 12) = v22;
        LOWORD(a16) = 1024;
        *(int *)((char *)&a16 + 2) = v23;
        _os_log_impl(&dword_1D42A7000, v20, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v24 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v24 + 16))(v24);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1D42A7000, v20, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v26 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v27 = *v26;
        a11 = *v26;
        sub_1D4501768();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v27;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a13 = &a11;
          _os_log_impl(&dword_1D42A7000, v20, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v20, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    v28 = *(_QWORD *)(v16 + 24);
    if (v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28);
      JUMPOUT(0x1D44F2584);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

void sub_1D44F286C()
{
  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44F2880()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E97B0AC8;
  return result;
}

void sub_1D44F28A4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E97B0AC8;
}

void sub_1D44F28C4()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F28D8(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B1140;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F2910(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B1140;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F2930(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F293C()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F2950(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B1188;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F2988(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B1188;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F29A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F29B4()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F29C8(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B10F8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F2A00(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B10F8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F2A20(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F2A2C()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F2A40(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B11D0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F2A78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B11D0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F2A98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F2AA4()
{
  JUMPOUT(0x1D825DA8CLL);
}

_DWORD *sub_1D44F2AB8(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0EB8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F2AF0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0EB8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1D44F2B10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1D44F2B1C()
{
  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44F2B30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E97B0F90;
  result[1] = v3;
  return result;
}

uint64_t sub_1D44F2B64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E97B0F90;
  a2[1] = v2;
  return result;
}

double sub_1D44F2B80(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

void sub_1D44F2B8C()
{
  JUMPOUT(0x1D825DA8CLL);
}

_DWORD *sub_1D44F2BA0(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B1020;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F2BD8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B1020;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1D44F2BF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1D44F2C04()
{
  JUMPOUT(0x1D825DA8CLL);
}

_DWORD *sub_1D44F2C18(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0F48;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F2C50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0F48;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1D44F2C70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1D44F2C7C()
{
  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44F2C90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E97B0FD8;
  result[1] = v3;
  return result;
}

uint64_t sub_1D44F2CC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E97B0FD8;
  a2[1] = v2;
  return result;
}

double sub_1D44F2CE0(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

void sub_1D44F2CEC()
{
  JUMPOUT(0x1D825DA8CLL);
}

_DWORD *sub_1D44F2D00(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B1068;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F2D38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B1068;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1D44F2D58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1D44F2D64()
{
  JUMPOUT(0x1D825DA8CLL);
}

_DWORD *sub_1D44F2D78(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0D98;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F2DB0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0D98;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1D44F2DD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

float sub_1D44F2DD8(float a1)
{
  double v1;

  v1 = a1;
  if (a1 <= 1000.0)
    return v1 / 66.6666667;
  else
    return log(v1 / 1000.0) / 0.0687517774 + 15.0;
}

float sub_1D44F2E38(float a1)
{
  return log10(a1 / 700.0 + 1.0) * 2595.0;
}

float sub_1D44F2E74(float a1)
{
  return log(a1 / 700.0 + 1.0) * 1127.0;
}

float sub_1D44F2EB0(float a1)
{
  double v1;

  v1 = a1;
  if (v1 <= 15.0)
    return v1 * 66.6666667 + 0.0;
  else
    return exp((v1 + -15.0) * 0.0687517774) * 1000.0;
}

float sub_1D44F2F14(float a1)
{
  return (__exp10(a1 / 2595.0) + -1.0) * 700.0;
}

float sub_1D44F2F50(float a1)
{
  return (exp(a1 / 1127.0) + -1.0) * 700.0;
}

void sub_1D44F2F8C(uint64_t a1, char *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;

  bzero(a2, 4 * a4);
  v8 = -*(_DWORD *)a1;
  v9 = v8 >= a3;
  v10 = v8 - a3;
  if (!v9)
    v10 = 0;
  v11 = a4 + a3 - v10;
  if (v11 >= *(_DWORD *)(a1 + 16))
    v11 = *(_DWORD *)(a1 + 16);
  memcpy(&a2[4 * v10], (const void *)(*(_QWORD *)(a1 + 8) + 4 * a3), 4 * (v11 - a3));
  vDSP_vmul((const float *)a2, 1, *(const float **)(a1 + 24), 1, (float *)a2, 1, *(unsigned int *)(a1 + 32));
}

uint64_t sub_1D44F3020(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, char *), uint64_t a2, uint64_t a3, unsigned int a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned int a9, char *a10, unsigned int a11)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  _QWORD v20[6];

  v20[0] = a9;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a8;
  v20[4] = a7;
  if (a11 < 4 * (unint64_t)a7)
    return 0;
  if (!a6)
    return 1;
  v16 = 0;
  v17 = 0;
  v18 = a6 - 1;
  do
  {
    sub_1D44F2F8C((uint64_t)v20, a10, v16, a7);
    result = a1(a2, v17, v16, a7, a10);
    if (!(_DWORD)result)
      break;
    v16 = (v16 + a5);
    v19 = v18 == (_DWORD)v17;
    v17 = (v17 + 1);
  }
  while (!v19);
  return result;
}

uint64_t sub_1D44F30FC(unsigned int a1, _DWORD *a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;

  v2 = a2[9] + a2[8];
  v3 = a1 >= v2;
  v4 = a1 - v2;
  if (v3)
    return v4 / a2[7] + 1;
  else
    return 0;
}

uint64_t sub_1D44F3124(unsigned int a1, _DWORD *a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;

  v2 = a2[2] + a2[3];
  v3 = a1 >= v2;
  v4 = a1 - v2;
  if (v3)
    return v4 / a2[1] + 1;
  else
    return 0;
}

uint64_t sub_1D44F314C(uint64_t a1, int a2, int a3, unsigned int a4, DSPComplex *__C)
{
  uint64_t v5;
  vDSP_Length v6;
  uint64_t v7;
  float *v8;
  const vDSP_DFT_SetupStruct *v9;
  float v10;
  float *v11;
  vDSP_Length v12;
  vDSP_Length v13;
  float *v14;
  float v15;
  float v16;
  unsigned int v17;
  float *v18;
  vDSP_Length v19;
  float __B;
  DSPSplitComplex __Z;
  vDSP_Length __N;

  if (*(unsigned int *)(a1 + 48) < 4 * (unint64_t)(2 * a4) || 4 * a4 < 4 * (unint64_t)a4)
    return 0;
  v6 = *(unsigned int *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (float *)(*(_QWORD *)a1 + 4 * (v6 * a2));
  v9 = *(const vDSP_DFT_SetupStruct **)(a1 + 24);
  v10 = *(float *)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  v12 = a4 >> 1;
  v13 = (v12 + 1);
  v14 = &v11[a4];
  __Z.realp = v14;
  __Z.imagp = &v14[v12];
  vDSP_ctoz(__C, 2, &__Z, 1, v12);
  vDSP_DFT_Execute(v9, __Z.realp, __Z.imagp, __Z.realp, __Z.imagp);
  v15 = *__Z.imagp;
  *__Z.imagp = 0.0;
  LODWORD(__N) = v12 + 1;
  v16 = v15 * v15;
  vDSP_zvmags(&__Z, 1, v11, 1, v12);
  v11[v12] = v16;
  vvsqrtf(v14, v11, (const int *)&__N);
  __B = 0.5;
  vDSP_vsmul(v14, 1, &__B, v11, 1, (int)__N);
  if ((_DWORD)v6)
  {
    v17 = 0;
    v18 = v8;
    v19 = v6;
    do
    {
      LODWORD(__Z.realp) = 0;
      vDSP_dotpr(v11, 1, (const float *)(v7 + 4 * v17), 1, (float *)&__Z, v13);
      *v18++ = *(float *)&__Z.realp;
      v17 += v13;
      --v19;
    }
    while (v19);
  }
  else
  {
    v6 = 0;
  }
  __B = v10;
  v5 = 1;
  vDSP_vsadd(v8, 1, &__B, v8, 1, v6);
  LODWORD(__Z.realp) = 1065353216;
  vDSP_vdbcon(v8, 1, (const float *)&__Z, v8, 1, v6, 1u);
  LODWORD(__N) = 1038862563;
  vDSP_vsmul(v8, 1, (const float *)&__N, v8, 1, v6);
  return v5;
}

uint64_t sub_1D44F3338(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, float a9, uint64_t a10, int a11, int a12, unsigned int a13, char *a14, unsigned int a15)
{
  int v16;
  _QWORD v18[7];

  if (a3 >= a12 + a11)
    v16 = (a3 - (a12 + a11)) / a13 + 1;
  else
    v16 = 0;
  v18[0] = a1;
  v18[1] = a4;
  v18[2] = a5;
  v18[3] = a8;
  v18[4] = LODWORD(a9);
  v18[5] = a14;
  v18[6] = a15;
  return sub_1D44F3020((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1D44F314C, (uint64_t)v18, a2, a3, a13, v16, a6, a10, a7, a14, a15);
}

uint64_t sub_1D44F33DC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  return sub_1D44F3338(a1, a2, a3, *(_QWORD *)(a4 + 32), *(_DWORD *)a4, *(unsigned int *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_QWORD *)(a4 + 24), *(float *)(a4 + 48), *(_QWORD *)(a4 + 40), *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 4), *(char **)(a4 + 56), *(_DWORD *)(a4 + 64));
}

void sub_1D44F3430(uint64_t a1, uint64_t a2, vDSP_Length __N, uint64_t a4, int a5)
{
  uint64_t v5;
  int v7;
  unsigned int v10;
  uint64_t v11;
  vDSP_Length v12;
  float __B;

  v5 = (a5 - 2);
  if (a5 != 2)
  {
    v7 = __N;
    v10 = 0;
    v11 = 0;
    v12 = __N;
    do
    {
      __B = 2.0 / (float)(*(float *)(a4 + 4 * (v11 + 2)) - *(float *)(a4 + 4 * v11));
      vDSP_vsmul((const float *)(a2 + 4 * v10), 1, &__B, (float *)(a1 + 4 * v10), 1, v12);
      ++v11;
      v10 += v7;
    }
    while (v5 != v11);
  }
}

void *sub_1D44F34DC(void *result, const void *a2, unsigned int a3, uint64_t a4, int a5)
{
  if (result != a2)
    return memcpy(result, a2, 4 * a3 * (unint64_t)(a5 - 2));
  return result;
}

uint64_t sub_1D44F34F8(uint64_t a1, uint64_t a2)
{
  int v4;
  vDSP_Length v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  float (*v13)(float);
  float (*v14)(float);
  void (*v15)(char *, char *, uint64_t, float *, uint64_t);
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  vDSP_DFT_Setup Setup;
  float *v21;
  void *v22;
  char *v23;
  int32x2_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  float v31;
  float v32;
  float *v33;
  uint64_t v34;
  uint64x2_t v35;
  float32x2_t v36;
  uint64_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int32x2_t v40;
  uint32x2_t v41;
  float32x2_t v42;
  int32x2_t v43;
  uint32x2_t v44;
  float32x2_t v45;
  float *v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  int32x2_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  char *v57;
  int64x2_t v58;
  int64x2_t v59;
  int32x2_t v60;
  uint32x2_t v61;
  float32x2_t v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  uint64x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  char *v69;
  int64x2_t v70;
  int64x2_t v71;
  int32x2_t v72;
  uint32x2_t v73;
  float32x2_t v74;
  int v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float *v84;
  uint64_t v85;
  float v86;
  float v87;
  char *v88;
  int v89;
  float *v90;
  float32x2x2_t v91;
  int v92;
  unint64_t v93;
  uint64_t v95;
  int v96;
  int32x2_t v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  vDSP_DFT_SetupStruct *v102;
  void *v103;
  unsigned int v104;
  void (*v105)(char *, char *, uint64_t, float *, uint64_t);

  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(unsigned int *)(a2 + 40);
  v6 = (v5 >> 1) + 1;
  v7 = v4 + v6;
  v8 = *(_DWORD *)(a2 + 32);
  v9 = 4 * v7 + 8;
  if (4 * v8 <= v9)
    v10 = v9;
  else
    v10 = (4 * v8);
  v11 = (8 * v5);
  v12 = *(int *)(a2 + 16);
  if (v12 > 2)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v13 = (float (*)(float))off_1E97C4698[v12];
    v14 = (float (*)(float))off_1E97C46B0[v12];
  }
  v15 = (void (*)(char *, char *, uint64_t, float *, uint64_t))sub_1D44F3430;
  v17 = *(_DWORD *)(a2 + 44);
  v16 = *(_DWORD *)(a2 + 48);
  if (v16 != 1)
    v15 = 0;
  if (!v16)
    v15 = (void (*)(char *, char *, uint64_t, float *, uint64_t))sub_1D44F34DC;
  v105 = v15;
  v18 = v8 - v17;
  if (-v17 < v5)
    v19 = -v17;
  else
    v19 = v5;
  if (v18 >= v5)
    v18 = v5;
  v104 = v18;
  Setup = vDSP_DFT_zrop_CreateSetup(0, v5, vDSP_DFT_FORWARD);
  v21 = (float *)malloc_type_malloc(v10, 0xB5B4EAB2uLL);
  if (!v21 || (v22 = malloc_type_malloc(v11, 0x6C4D9378uLL)) == 0)
  {
    v28 = 0;
    v29 = 0;
    v23 = 0;
    v30 = 0;
    goto LABEL_71;
  }
  v103 = v22;
  v23 = (char *)malloc_type_malloc(4 * v6 * (unint64_t)*(unsigned int *)(a2 + 4), 0x32ED6ECBuLL);
  if (v23)
  {
    v102 = Setup;
    v25 = *(unsigned int *)(a2 + 40);
    v26 = *(_DWORD *)(a2 + 4);
    v27 = (v25 >> 1) + 1;
    if (v10 < 4 * (unint64_t)(v26 + 2 + v27))
    {
      v28 = 0;
      v29 = 0;
LABEL_69:
      Setup = v102;
      goto LABEL_70;
    }
    v32 = *(float *)(a2 + 8);
    v31 = *(float *)(a2 + 12);
    v33 = &v21[v27];
    v95 = *(unsigned int *)(a2 + 40);
    v96 = v11;
    *(float *)v24.i32 = *(float *)a2 / (float)v25;
    v34 = ((v25 >> 1) + 2) & 0x1FFFFFFFELL;
    v35 = (uint64x2_t)vdupq_n_s64(v25 >> 1);
    v36 = (float32x2_t)vdup_lane_s32(v24, 0);
    v101 = v19;
    v100 = (v26 + 2);
    v98 = *(unsigned __int8 *)(a2 + 24);
    v99 = *(_DWORD *)(a2 + 4);
    v37 = 0;
    v38 = (int64x2_t)xmmword_1D4538030;
    v39 = vdupq_n_s64(2uLL);
    if (*(_BYTE *)(a2 + 24))
    {
      do
      {
        v40 = vmovn_s64((int64x2_t)vcgeq_u64(v35, (uint64x2_t)v38));
        v41.i32[0] = v37;
        v41.i32[1] = v37 + 1;
        v42 = vmla_f32(0, vcvt_f32_u32(v41), v36);
        if ((v40.i8[0] & 1) != 0)
          v21[v37] = v42.f32[0];
        if ((v40.i8[4] & 1) != 0)
          v21[v37 + 1] = v42.f32[1];
        v37 += 2;
        v38 = vaddq_s64(v38, v39);
      }
      while (v34 != v37);
    }
    else
    {
      do
      {
        v43 = vmovn_s64((int64x2_t)vcgeq_u64(v35, (uint64x2_t)v38));
        v44.i32[0] = v37;
        v44.i32[1] = v37 + 1;
        v45 = vmla_f32(0, vcvt_f32_u32(v44), v36);
        if ((v43.i8[0] & 1) != 0)
          v21[v37] = v45.f32[0];
        if ((v43.i8[4] & 1) != 0)
          v21[v37 + 1] = v45.f32[1];
        v37 += 2;
        v38 = vaddq_s64(v38, v39);
      }
      while (v34 != v37);
      v46 = v21;
      v47 = v27;
      do
      {
        *v46 = v13(*v46);
        ++v46;
        --v47;
      }
      while (v47);
    }
    v97 = COERCE_INT32X2_T(((double (*)(float))v13)(v32));
    v48 = v13(v31);
    v49 = (v99 + 1);
    *(float *)v50.i32 = (float)(v48 - *(float *)v97.i32) / (float)v49;
    if (v98)
    {
      v51 = v101;
      v52 = v100;
      if (!(_DWORD)v100)
        goto LABEL_56;
      v53 = 0;
      v54 = (uint64x2_t)vdupq_n_s64(v100 - 1);
      v55 = (float32x2_t)vdup_lane_s32(v50, 0);
      v56 = (float32x2_t)vdup_lane_s32(v97, 0);
      v57 = (char *)v21 + ((2 * v95) & 0x1FFFFFFFCLL);
      v58 = (int64x2_t)xmmword_1D4538030;
      v59 = vdupq_n_s64(2uLL);
      do
      {
        v60 = vmovn_s64((int64x2_t)vcgeq_u64(v54, (uint64x2_t)v58));
        v61.i32[0] = v53;
        v61.i32[1] = v53 + 1;
        v62 = vmla_f32(v56, vcvt_f32_u32(v61), v55);
        if ((v60.i8[0] & 1) != 0)
          *(_DWORD *)&v57[4 * v53 + 4] = v62.i32[0];
        if ((v60.i8[4] & 1) != 0)
          *(_DWORD *)&v57[4 * v53 + 8] = v62.i32[1];
        v53 += 2;
        v58 = vaddq_s64(v58, v59);
      }
      while (((v100 + 1) & 0x1FFFFFFFELL) != v53);
      v63 = &v21[v27];
      v64 = v100;
      do
      {
        *v63 = v14(*v63);
        ++v63;
        --v64;
      }
      while (v64);
    }
    else
    {
      v51 = v101;
      v52 = v100;
      if (!(_DWORD)v100)
        goto LABEL_56;
      v65 = 0;
      v66 = (uint64x2_t)vdupq_n_s64(v100 - 1);
      v67 = (float32x2_t)vdup_lane_s32(v50, 0);
      v68 = (float32x2_t)vdup_lane_s32(v97, 0);
      v69 = (char *)v21 + ((2 * v95) & 0x1FFFFFFFCLL);
      v70 = (int64x2_t)xmmword_1D4538030;
      v71 = vdupq_n_s64(2uLL);
      do
      {
        v72 = vmovn_s64((int64x2_t)vcgeq_u64(v66, (uint64x2_t)v70));
        v73.i32[0] = v65;
        v73.i32[1] = v65 + 1;
        v74 = vmla_f32(v68, vcvt_f32_u32(v73), v67);
        if ((v72.i8[0] & 1) != 0)
          *(_DWORD *)&v69[4 * v65 + 4] = v74.i32[0];
        if ((v72.i8[4] & 1) != 0)
          *(_DWORD *)&v69[4 * v65 + 8] = v74.i32[1];
        v65 += 2;
        v70 = vaddq_s64(v70, v71);
      }
      while (((v100 + 1) & 0x1FFFFFFFELL) != v65);
    }
    v51 = v101;
    v52 = v100;
    if (v49 < 2)
    {
LABEL_65:
      v105(v23, v23, v27, &v21[v27], v52);
      vDSP_hann_window(v21, *(unsigned int *)(a2 + 32), 0);
      v88 = (char *)malloc_type_malloc(4 * *(unsigned int *)(a2 + 40), 0x100004052888210uLL);
      v29 = v88;
      if (v88)
      {
        bzero(v88, 4 * *(unsigned int *)(a2 + 40));
        memcpy(&v29[4 * v51], v21, 4 * (v104 - v51));
        v28 = 1;
      }
      else
      {
        v28 = 0;
      }
      LODWORD(v11) = v96;
      goto LABEL_69;
    }
LABEL_56:
    v75 = 0;
    v76 = 1;
    do
    {
      v77 = (float *)&v23[4 * v75];
      v78 = &v33[v76];
      v79 = *(v78 - 1);
      v80 = *v78;
      v81 = v33[++v76];
      v82 = v81 - *v78;
      v83 = *v78 - v79;
      v84 = v21;
      v85 = v27;
      do
      {
        v86 = *v84;
        v87 = 0.0;
        if (*v84 > v79)
        {
          if (v86 >= v80)
          {
            if (v86 < v81)
              v87 = (float)(v81 - v86) / v82;
          }
          else
          {
            v87 = (float)(v86 - v79) / v83;
          }
        }
        *v77++ = v87;
        ++v84;
        --v85;
      }
      while (v85);
      v75 += v27;
    }
    while (v76 != v49);
    goto LABEL_65;
  }
  v28 = 0;
  v29 = 0;
LABEL_70:
  v30 = v103;
LABEL_71:
  v89 = *(_DWORD *)(a2 + 20);
  v90 = (float *)(a1 + 4);
  v91 = *(float32x2x2_t *)(a2 + 28);
  v92 = *(_DWORD *)(a2 + 44) + v91.val[1].i32[0];
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 4);
  v93 = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
  vst2_f32(v90, v91);
  *(_DWORD *)(a1 + 20) = v92;
  *(_QWORD *)(a1 + 24) = Setup;
  *(_QWORD *)(a1 + 32) = v23;
  *(_QWORD *)(a1 + 40) = v29;
  *(_DWORD *)(a1 + 48) = v89;
  *(_QWORD *)(a1 + 56) = v30;
  *(_DWORD *)(a1 + 64) = v11;
  if ((v28 & 1) == 0)
    sub_1D44F3AB4(a1);
  if (v21)
    free(v21);
  return v28;
}

void sub_1D44F3AB4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  vDSP_DFT_DestroySetup(*(vDSP_DFT_Setup *)(a1 + 24));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

uint64_t sub_1D44F3B08(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  _OWORD v10[3];
  int v11;
  __int128 v12;
  __int128 v13;
  int v14[4];
  void *v15[2];
  unsigned int v16[4];

  *(_QWORD *)v16 = 0;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(_OWORD *)(a4 + 16);
  v10[0] = *(_OWORD *)a4;
  v10[1] = v7;
  v10[2] = *(_OWORD *)(a4 + 32);
  v11 = *(_DWORD *)(a4 + 48);
  if (sub_1D44F34F8((uint64_t)&v12, (uint64_t)v10))
    v8 = sub_1D44F3338(a1, a2, a3, *(uint64_t *)v14, v12, v13, DWORD1(v13), *((uint64_t *)&v13 + 1), *(float *)v15, *(uint64_t *)&v14[2], SHIDWORD(v12), SDWORD2(v12), DWORD1(v12), (char *)v15[1], v16[0]);
  else
    v8 = 0;
  sub_1D44F3AB4((uint64_t)&v12);
  return v8;
}

void *sub_1D44F3BD0(uint64_t a1)
{
  void *v2;
  __int128 v3;
  _OWORD v5[3];
  int v6;

  v2 = malloc_type_malloc(0x48uLL, 0x10A0040C3289421uLL);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 48);
  if ((sub_1D44F34F8((uint64_t)v2, (uint64_t)v5) & 1) == 0)
  {
    free(v2);
    return 0;
  }
  return v2;
}

void sub_1D44F3C44(void *a1)
{
  sub_1D44F3AB4((uint64_t)a1);
  free(a1);
}

void sub_1D44F3CE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44F3D00(void *a1, uint64_t *a2)
{
  _QWORD *v3;
  void *v5;
  objc_super v6;

  if (!a1)
    return 0;
  v6.receiver = a1;
  v6.super_class = (Class)SNDSPGraph;
  v3 = objc_msgSendSuper2(&v6, sel_init);
  if (v3)
  {
    if (!*a2)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInMethod:object:file:lineNumber:description:", sel_initWithDSPGraph_, v3, CFSTR("SNDSPGraph.mm"), 38, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("graph"));

    }
    sub_1D44EF64C(v3 + 1, a2);
  }
  return v3;
}

void sub_1D44F3DC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D44F3DE8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t (**v12)();
  char v13;
  uint64_t (***v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = &off_1E97B1218;
  v13 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v14 = &v12;
  v15 = v2;
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  DSPGraph::Graph::setSliceDuration();
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = 1;
  v9 = v14;
  if (v14 == &v12)
  {
    v10 = 4;
    v9 = &v12;
    goto LABEL_14;
  }
  if (v14)
  {
    v10 = 5;
LABEL_14:
    (*v9)[v10]();
  }
  return v8;
}

void sub_1D44F3EF8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  void *v28;
  uint64_t v29;
  int *v30;
  int v31;

  if (a2)
  {
    sub_1D44DAAE4((uint64_t)&buf);
    if (a2 == 4)
    {
      v22 = (char *)__cxa_begin_catch(a1);
      v23 = *((_DWORD *)v22 + 2);
      a11 = v23;
      sub_1D4501768();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = v22 + 72;
        if (v22[95] < 0)
          v25 = (_QWORD *)*v25;
        v26 = v22 + 16;
        if (v22[39] < 0)
          v26 = (_QWORD *)*v26;
        v27 = *((_DWORD *)v22 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v23;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v25;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v26;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v27;
        _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v28 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v29;
        _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v30 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v31 = *v30;
        a11 = *v30;
        sub_1D4501768();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v31;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44F3E8CLL);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F41CC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v9[0] = &off_1E97B0F00;
    v9[1] = 0;
    v10 = v9;
    v1 = *(_QWORD *)(result + 8);
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
      v5 = *(_DWORD *)(v1 + 688);
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    else
    {
      v5 = *(_DWORD *)(v1 + 688);
    }
    v7 = v10;
    if (v10 == v9)
    {
      v8 = 4;
      v7 = v9;
    }
    else
    {
      if (!v10)
        return v5;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    return v5;
  }
  return result;
}

BOOL sub_1D44F42B8(_BOOL8 result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (**v9)();
  char v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v9 = &off_1E97B0C78;
    v10 = 0;
    v11 = &v9;
    v1 = *(_QWORD *)(result + 8);
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
      v5 = *(unsigned __int8 *)(v1 + 761);
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    else
    {
      v5 = *(unsigned __int8 *)(v1 + 761);
    }
    v7 = v11;
    if (v11 == &v9)
    {
      v8 = 4;
      v7 = &v9;
    }
    else
    {
      if (!v11)
        return v5 != 0;
      v8 = 5;
    }
    (*v7)[v8]();
    return v5 != 0;
  }
  return result;
}

BOOL sub_1D44F43AC(_BOOL8 result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (**v9)();
  char v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v9 = &off_1E97B0D08;
    v10 = 0;
    v11 = &v9;
    v1 = *(_QWORD *)(result + 8);
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
      v5 = *(unsigned __int8 *)(v1 + 762);
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    else
    {
      v5 = *(unsigned __int8 *)(v1 + 762);
    }
    v7 = v11;
    if (v11 == &v9)
    {
      v8 = 4;
      v7 = &v9;
    }
    else
    {
      if (!v11)
        return v5 != 0;
      v8 = 5;
    }
    (*v7)[v8]();
    return v5 != 0;
  }
  return result;
}

uint64_t sub_1D44F44A0(uint64_t a1)
{
  DSPGraph::Graph *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t (**v12)();
  char v13;
  uint64_t (***v14)();
  DSPGraph::Graph *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = &off_1E97B0C30;
  v13 = 0;
  v2 = *(DSPGraph::Graph **)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v14 = &v12;
  v15 = v2;
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  DSPGraph::Graph::configure(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = 1;
  v9 = v14;
  if (v14 == &v12)
  {
    v10 = 4;
    v9 = &v12;
    goto LABEL_14;
  }
  if (v14)
  {
    v10 = 5;
LABEL_14:
    (*v9)[v10]();
  }
  return v8;
}

void sub_1D44F45B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  void *v28;
  uint64_t v29;
  int *v30;
  int v31;

  if (a2)
  {
    sub_1D44DAAE4((uint64_t)&buf);
    if (a2 == 4)
    {
      v22 = (char *)__cxa_begin_catch(a1);
      v23 = *((_DWORD *)v22 + 2);
      a11 = v23;
      sub_1D4501768();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = v22 + 72;
        if (v22[95] < 0)
          v25 = (_QWORD *)*v25;
        v26 = v22 + 16;
        if (v22[39] < 0)
          v26 = (_QWORD *)*v26;
        v27 = *((_DWORD *)v22 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v23;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v25;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v26;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v27;
        _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v28 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v29;
        _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v30 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v31 = *v30;
        a11 = *v30;
        sub_1D4501768();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v31;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44F4544);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F4884(uint64_t a1)
{
  DSPGraph::Graph *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t (**v12)();
  char v13;
  uint64_t (***v14)();
  DSPGraph::Graph *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = &off_1E97B0CC0;
  v13 = 0;
  v2 = *(DSPGraph::Graph **)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v14 = &v12;
  v15 = v2;
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  DSPGraph::Graph::initialize(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = 1;
  v9 = v14;
  if (v14 == &v12)
  {
    v10 = 4;
    v9 = &v12;
    goto LABEL_14;
  }
  if (v14)
  {
    v10 = 5;
LABEL_14:
    (*v9)[v10]();
  }
  return v8;
}

void sub_1D44F4998(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  void *v28;
  uint64_t v29;
  int *v30;
  int v31;

  if (a2)
  {
    sub_1D44DAAE4((uint64_t)&buf);
    if (a2 == 4)
    {
      v22 = (char *)__cxa_begin_catch(a1);
      v23 = *((_DWORD *)v22 + 2);
      a11 = v23;
      sub_1D4501768();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = v22 + 72;
        if (v22[95] < 0)
          v25 = (_QWORD *)*v25;
        v26 = v22 + 16;
        if (v22[39] < 0)
          v26 = (_QWORD *)*v26;
        v27 = *((_DWORD *)v22 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v23;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v25;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v26;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v27;
        _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v28 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v29;
        _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v30 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v31 = *v30;
        a11 = *v30;
        sub_1D4501768();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v31;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44F492CLL);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F4C6C(uint64_t a1, void *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  DSPGraph::Graph *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  NSObject *v13;
  uint64_t (**v15)();
  char v16;
  uint64_t (***v17)();
  uint8_t buf[8];
  std::__shared_weak_count *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v15 = &off_1E97B0D50;
      v16 = 0;
      v5 = *(DSPGraph::Graph **)(a1 + 8);
      v6 = *(std::__shared_weak_count **)(a1 + 16);
      v17 = &v15;
      *(_QWORD *)buf = v5;
      v19 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      DSPGraph::Graph::setAUStrip(v5, v4);
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      a1 = 1;
      v11 = v17;
      if (v17 == &v15)
      {
        v12 = 4;
        v11 = &v15;
        goto LABEL_18;
      }
      if (v17)
      {
        v12 = 5;
LABEL_18:
        (*v11)[v12]();
      }
    }
    else
    {
      sub_1D4501768();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D42A7000, v13, OS_LOG_TYPE_ERROR, "AUStrip is nil", buf, 2u);
      }

      a1 = 0;
    }
  }

  return a1;
}

void sub_1D44F4DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D44F50B0(uint64_t a1, void *a2, void *a3)
{
  const __CFDictionary *v5;
  __CFString *v6;
  DSPGraph::Graph *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  NSObject *v15;
  uint64_t (**v17)();
  char v18;
  uint64_t (***v19)();
  uint8_t buf[8];
  std::__shared_weak_count *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    if (v5)
    {
      v17 = &off_1E97B10B0;
      v18 = 0;
      v7 = *(DSPGraph::Graph **)(a1 + 8);
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      v19 = &v17;
      *(_QWORD *)buf = v7;
      v21 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      DSPGraph::Graph::setPropertyStrip(v7, v5, v6);
      if (v8)
      {
        v11 = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      a1 = 1;
      v13 = v19;
      if (v19 == &v17)
      {
        v14 = 4;
        v13 = &v17;
        goto LABEL_18;
      }
      if (v19)
      {
        v14 = 5;
LABEL_18:
        (*v13)[v14]();
      }
    }
    else
    {
      sub_1D4501768();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D42A7000, v15, OS_LOG_TYPE_ERROR, "PropertyStrip is nil", buf, 2u);
      }

      a1 = 0;
    }
  }

  return a1;
}

void sub_1D44F5230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D44F5514(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t (**v14)();
  char v15;
  uint64_t (***v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v14 = &off_1E97B0E70;
  v15 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v16 = &v14;
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  *a2 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a3);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = 1;
  v11 = v16;
  if (v16 == &v14)
  {
    v12 = 4;
    v11 = &v14;
    goto LABEL_14;
  }
  if (v16)
  {
    v12 = 5;
LABEL_14:
    (*v11)[v12]();
  }
  return v10;
}

void sub_1D44F5638(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  void *v28;
  uint64_t v29;
  int *v30;
  int v31;

  if (a2)
  {
    sub_1D44DAAE4((uint64_t)&buf);
    if (a2 == 4)
    {
      v22 = (char *)__cxa_begin_catch(a1);
      v23 = *((_DWORD *)v22 + 2);
      a11 = v23;
      sub_1D4501768();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = v22 + 72;
        if (v22[95] < 0)
          v25 = (_QWORD *)*v25;
        v26 = v22 + 16;
        if (v22[39] < 0)
          v26 = (_QWORD *)*v26;
        v27 = *((_DWORD *)v22 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v23;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v25;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v26;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v27;
        _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v28 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v29;
        _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v30 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v31 = *v30;
        a11 = *v30;
        sub_1D4501768();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v31;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44F55CCLL);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

id sub_1D44F590C(void *a1, void *a2)
{
  void *v2;
  id v3;
  _QWORD v5[6];
  id v6;
  void *v7;

  v2 = a1;
  v7 = a1;
  v3 = a2;
  v6 = v3;
  if (v2)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3321888768;
    v5[2] = sub_1D44F59AC;
    v5[3] = &unk_1E97B1430;
    v5[4] = &v7;
    v5[5] = &v6;
    sub_1D44F73E0(v5, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v6;
  }

  return v2;
}

void sub_1D44F5998(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44F59AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  SNDSPGraphBox *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  std::__shared_weak_count *v16;
  char v17;

  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(**(id **)(a1 + 40)), "UTF8String"));
  v2 = DSPGraph::Graph::box();
  v3 = v2;
  if (v17 < 0)
  {
    operator delete(__p);
    if (v3)
      goto LABEL_3;
LABEL_12:
    v10 = 0;
    return v10;
  }
  if (!v2)
    goto LABEL_12;
LABEL_3:
  v4 = [SNDSPGraphBox alloc];
  v5 = **(_QWORD **)(a1 + 32);
  v7 = *(void **)(v5 + 8);
  v6 = *(std::__shared_weak_count **)(v5 + 16);
  __p = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = sub_1D44EF4FC(v4, v3, (uint64_t *)&__p);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_1D44F5AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1D44F5B08(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

id sub_1D44F5B18(void *a1)
{
  _QWORD v2[5];
  void *v3;

  v3 = a1;
  if (a1)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3321888768;
    v2[2] = sub_1D44F5B7C;
    v2[3] = &unk_1E97B13D0;
    v2[4] = &v3;
    sub_1D44F73E0(v2, 0);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

id sub_1D44F5B7C(uint64_t a1)
{
  void *v2;
  _QWORD *i;
  SNDSPGraphBox *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = *(_QWORD **)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 8) + 24); i; i = (_QWORD *)*i)
  {
    v4 = [SNDSPGraphBox alloc];
    v5 = i[2];
    v6 = **(_QWORD **)(a1 + 32);
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(std::__shared_weak_count **)(v6 + 16);
    v16 = v8;
    v17 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = sub_1D44EF4FC(v4, v5, &v16);
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    objc_msgSend(v2, "addObject:", v11, v16);

  }
  return v2;
}

void sub_1D44F5C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1D44F5CCC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

id sub_1D44F5CD8(void *a1)
{
  _QWORD v2[5];
  void *v3;

  v3 = a1;
  if (a1)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3321888768;
    v2[2] = sub_1D44F5D3C;
    v2[3] = &unk_1E97B13A0;
    v2[4] = &v3;
    sub_1D44F73E0(v2, 0);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

uint64_t sub_1D44F5D3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8);
  v2 = (_QWORD *)(v1 + 408);
  if (*(char *)(v1 + 431) < 0)
    v2 = (_QWORD *)*v2;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v2);
}

uint64_t sub_1D44F5D6C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1D44F5D78(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[6];
  id v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v3 = a2;
  v7 = v3;
  if (a1)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3321888768;
    v6[2] = sub_1D44F5EB0;
    v6[3] = &unk_1E97B1400;
    v6[4] = &v8;
    v6[5] = &v7;
    v9[0] = &off_1E97B0AC8;
    v10 = v9;
    sub_1D44F2548(v6);
    v4 = v10;
    if (v10 == v9)
    {
      v5 = 4;
      v4 = v9;
    }
    else
    {
      if (!v10)
      {
LABEL_7:
        v3 = v7;
        goto LABEL_8;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_7;
  }
LABEL_8:

}

void sub_1D44F5E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(v16 - 32);
  if (v18 == (_QWORD *)(v16 - 56))
  {
    v19 = 4;
    v18 = (_QWORD *)(v16 - 56);
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

std::string *sub_1D44F5EB0(uint64_t a1)
{
  return sub_1D44F79E8((std::string *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 8) + 408), (char *)objc_msgSend(objc_retainAutorelease(**(id **)(a1 + 40)), "UTF8String"));
}

__n128 sub_1D44F5EE8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t sub_1D44F5EF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v5[0] = &off_1E97B0DE0;
  v5[1] = 0;
  v6 = v5;
  v1 = DSPGraph::Graph::numInputs(*(DSPGraph::Graph **)(a1 + 8));
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_6;
  }
  if (v6)
  {
    v3 = 5;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_1D44F5FA8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v21;
  int v22;
  NSObject *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  int *v29;
  int v30;

  if (a2)
  {
    if (a2 == 4)
    {
      v21 = (char *)__cxa_begin_catch(a1);
      v22 = *((_DWORD *)v21 + 2);
      a11 = v22;
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = v21 + 72;
        if (v21[95] < 0)
          v24 = (_QWORD *)*v24;
        v25 = v21 + 16;
        if (v21[39] < 0)
          v25 = (_QWORD *)*v25;
        v26 = *((_DWORD *)v21 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v22;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v24;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v25;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v26;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v27 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v28;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v29 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v30 = *v29;
        a11 = *v29;
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v30;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44F5F3CLL);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F6274(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v5[0] = &off_1E97B0E28;
  v5[1] = 0;
  v6 = v5;
  v1 = DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(a1 + 8));
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_6;
  }
  if (v6)
  {
    v3 = 5;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_1D44F6328(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 buf, int *a17, __int128 a18, int a19, int a20)
{
  char *v21;
  int v22;
  NSObject *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  int *v29;
  int v30;

  if (a2)
  {
    if (a2 == 4)
    {
      v21 = (char *)__cxa_begin_catch(a1);
      v22 = *((_DWORD *)v21 + 2);
      a11 = v22;
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = v21 + 72;
        if (v21[95] < 0)
          v24 = (_QWORD *)*v24;
        v25 = v21 + 16;
        if (v21[39] < 0)
          v25 = (_QWORD *)*v25;
        v26 = *((_DWORD *)v21 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v22;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a17 = &a11;
        LOWORD(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 2) = v24;
        WORD5(a18) = 2080;
        *(_QWORD *)((char *)&a18 + 12) = v25;
        LOWORD(a20) = 1024;
        *(int *)((char *)&a20 + 2) = v26;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v27 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v28;
        _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v29 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v30 = *v29;
        a11 = *v29;
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v30;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a17 = &a11;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v23, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a15 + 48))(a15);
      JUMPOUT(0x1D44F62BCLL);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1D44F65F4(uint64_t a1)
{
  SNDSPGraphBox *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v16[0] = &off_1E97B0BA0;
  v16[1] = 0;
  v17 = v16;
  v2 = [SNDSPGraphBox alloc];
  v3 = DSPGraph::Graph::in(*(DSPGraph::Graph **)(a1 + 8));
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = sub_1D44EF4FC(v2, v3, &v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
    goto LABEL_14;
  }
  if (v17)
  {
    v12 = 5;
LABEL_14:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return v7;
}

void sub_1D44F672C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int128 buf, int *a19, __int128 a20,int a21,int a22)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  char *v27;
  int v28;
  NSObject *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  void *v33;
  uint64_t v34;
  int *v35;
  int v36;

  if (a2)
  {
    v24 = a13;
    if (a13)
    {
      p_shared_owners = (unint64_t *)&a13->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (a2 == 4)
    {
      v27 = (char *)__cxa_begin_catch(a1);
      v28 = *((_DWORD *)v27 + 2);
      a11 = v28;
      sub_1D4501768();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v30 = v27 + 72;
        if (v27[95] < 0)
          v30 = (_QWORD *)*v30;
        v31 = v27 + 16;
        if (v27[39] < 0)
          v31 = (_QWORD *)*v31;
        v32 = *((_DWORD *)v27 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v28;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a19 = &a11;
        LOWORD(a20) = 2080;
        *(_QWORD *)((char *)&a20 + 2) = v30;
        WORD5(a20) = 2080;
        *(_QWORD *)((char *)&a20 + 12) = v31;
        LOWORD(a22) = 1024;
        *(int *)((char *)&a22 + 2) = v32;
        _os_log_impl(&dword_1D42A7000, v29, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v33 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v34;
        _os_log_impl(&dword_1D42A7000, v29, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v35 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v36 = *v35;
        a11 = *v35;
        sub_1D4501768();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v36;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a19 = &a11;
          _os_log_impl(&dword_1D42A7000, v29, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v29, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 48))(a17);
      objc_claimAutoreleasedReturnValue();
      JUMPOUT(0x1D44F66C0);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1D44F6A44(uint64_t a1)
{
  SNDSPGraphBox *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v16[0] = &off_1E97B0BE8;
  v16[1] = 0;
  v17 = v16;
  v2 = [SNDSPGraphBox alloc];
  v3 = DSPGraph::Graph::out(*(DSPGraph::Graph **)(a1 + 8));
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = sub_1D44EF4FC(v2, v3, &v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
    goto LABEL_14;
  }
  if (v17)
  {
    v12 = 5;
LABEL_14:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return v7;
}

void sub_1D44F6B7C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int128 buf, int *a19, __int128 a20,int a21,int a22)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  char *v27;
  int v28;
  NSObject *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  void *v33;
  uint64_t v34;
  int *v35;
  int v36;

  if (a2)
  {
    v24 = a13;
    if (a13)
    {
      p_shared_owners = (unint64_t *)&a13->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (a2 == 4)
    {
      v27 = (char *)__cxa_begin_catch(a1);
      v28 = *((_DWORD *)v27 + 2);
      a11 = v28;
      sub_1D4501768();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v30 = v27 + 72;
        if (v27[95] < 0)
          v30 = (_QWORD *)*v30;
        v31 = v27 + 16;
        if (v27[39] < 0)
          v31 = (_QWORD *)*v31;
        v32 = *((_DWORD *)v27 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v28;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a19 = &a11;
        LOWORD(a20) = 2080;
        *(_QWORD *)((char *)&a20 + 2) = v30;
        WORD5(a20) = 2080;
        *(_QWORD *)((char *)&a20 + 12) = v31;
        LOWORD(a22) = 1024;
        *(int *)((char *)&a22 + 2) = v32;
        _os_log_impl(&dword_1D42A7000, v29, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v33 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v34;
        _os_log_impl(&dword_1D42A7000, v29, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v35 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v36 = *v35;
        a11 = *v35;
        sub_1D4501768();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v36;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a19 = &a11;
          _os_log_impl(&dword_1D42A7000, v29, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v29, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 48))(a17);
      objc_claimAutoreleasedReturnValue();
      JUMPOUT(0x1D44F6B10);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F6E94(uint64_t result)
{
  if (result)
    return MEMORY[0x1E0DE7D20](result, sel_preflight_outputFrameCount_error_);
  return result;
}

void sub_1D44F6FAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 buf)
{
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;

  __cxa_begin_catch(a1);
  sub_1D4501768();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    buf = 0;
    _os_log_impl(&dword_1D42A7000, v21, OS_LOG_TYPE_ERROR, "Failed to preflight DSPGraph", (uint8_t *)&buf, 2u);
  }

  if (v20)
  {
    +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 2, 0, CFSTR("Failed to preflight DSPGraph"));
    *v20 = (id)objc_claimAutoreleasedReturnValue();
  }
  *v19 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1D44F6F38);
}

void sub_1D44F7030(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void *sub_1D44F7048(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
    return (void *)objc_msgSend(result, "processInputBufferList:inputFrameCount:atSourcePosition:to:outputFrameCapacity:outputFrameCount:atDestinationPosition:error:", a2, a3, a4, a5, a6, a7, a8, 0);
  return result;
}

void sub_1D44F7230(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf)
{
  _QWORD *v19;
  _QWORD *v20;
  char *v22;
  char *v23;
  NSObject *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  NSObject *v28;

  if (a2)
  {
    v22 = (char *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v23 = v22;
      sub_1D4501768();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = v23 + 72;
        if (v23[95] < 0)
          v25 = (_QWORD *)*v25;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1D42A7000, v24, OS_LOG_TYPE_ERROR, "Caught DSPGraph Exception: %s", (uint8_t *)&buf, 0xCu);
      }

      if (v20)
      {
        v26 = v23 + 72;
        if (v23[95] < 0)
          v26 = (_QWORD *)*v26;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 2, 0, v27);
        *v20 = (id)objc_claimAutoreleasedReturnValue();

      }
      *v19 = 0;
      __cxa_end_catch();
    }
    else
    {
      sub_1D4501768();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1D42A7000, v28, OS_LOG_TYPE_ERROR, "Failed to process DSPGraph", (uint8_t *)&buf, 2u);
      }

      if (v20)
      {
        +[SNError errorWithCode:underlyingError:message:](SNError, "errorWithCode:underlyingError:message:", 2, 0, CFSTR("Failed to process DSPGraph"));
        *v20 = (id)objc_claimAutoreleasedReturnValue();
      }
      *v19 = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x1D44F7170);
  }
  _Unwind_Resume(a1);
}

id sub_1D44F73E0(void *a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v8[0] = &off_1E97B0B10;
  v8[1] = v3;
  v9 = v8;
  sub_1D44F74E4(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return v4;
}

void sub_1D44F74A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

id sub_1D44F74E4(void *a1)
{
  void (**v1)(void);
  void *v2;

  v1 = a1;
  v1[2]();
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1D44F7564(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, __int128 buf, int *a13, __int128 a14, int a15, int a16)
{
  uint64_t v16;
  char *v18;
  int v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  void *v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;

  if (a2)
  {
    if (a2 == 4)
    {
      v18 = (char *)__cxa_begin_catch(a1);
      v19 = *((_DWORD *)v18 + 2);
      a11 = v19;
      sub_1D4501768();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = v18 + 72;
        if (v18[95] < 0)
          v21 = (_QWORD *)*v21;
        v22 = v18 + 16;
        if (v18[39] < 0)
          v22 = (_QWORD *)*v22;
        v23 = *((_DWORD *)v18 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v19;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a13 = &a11;
        LOWORD(a14) = 2080;
        *(_QWORD *)((char *)&a14 + 2) = v21;
        WORD5(a14) = 2080;
        *(_QWORD *)((char *)&a14 + 12) = v22;
        LOWORD(a16) = 1024;
        *(int *)((char *)&a16 + 2) = v23;
        _os_log_impl(&dword_1D42A7000, v20, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v24 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v24 + 16))(v24);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1D42A7000, v20, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v26 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v27 = *v26;
        a11 = *v26;
        sub_1D4501768();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v27;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a13 = &a11;
          _os_log_impl(&dword_1D42A7000, v20, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v20, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    v28 = *(_QWORD *)(v16 + 24);
    if (v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28);
      objc_claimAutoreleasedReturnValue();
      JUMPOUT(0x1D44F7524);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F7814(uint64_t a1)
{

  return a1;
}

void sub_1D44F783C(uint64_t a1)
{

  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44F7874(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E97B0B10;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1D44F78B8(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E97B0B10;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1D44F78EC(uint64_t a1)
{

}

void sub_1D44F78F4(id *a1)
{

  operator delete(a1);
}

id sub_1D44F791C(uint64_t a1)
{
  return sub_1D44F7924((id *)(a1 + 8));
}

id sub_1D44F7924(id *a1)
{
  return *a1;
}

std::string *sub_1D44F792C(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_1D44F79E8(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_1D44F792C(a1, __s, v4);
}

void sub_1D44F7A20()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F7A34(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B1218;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F7A6C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B1218;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F7A8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F7A98()
{
  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44F7AAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E97B0F00;
  result[1] = v3;
  return result;
}

uint64_t sub_1D44F7AE0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E97B0F00;
  a2[1] = v2;
  return result;
}

uint64_t sub_1D44F7AFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_1D44F7B08()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F7B1C(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0C78;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F7B54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0C78;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F7B74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F7B80()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F7B94(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0D08;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F7BCC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0D08;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F7BEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F7BF8()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F7C0C(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0C30;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F7C44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0C30;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F7C64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F7C70()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F7C84(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0CC0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F7CBC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0CC0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F7CDC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F7CE8()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F7CFC(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0D50;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F7D34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0D50;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F7D54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F7D60()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F7D74(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B10B0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F7DAC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B10B0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F7DCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F7DD8()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D44F7DEC(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0E70;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D44F7E24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0E70;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D44F7E44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1D44F7E50()
{
  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44F7E64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E97B0DE0;
  result[1] = v3;
  return result;
}

uint64_t sub_1D44F7E98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E97B0DE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1D44F7EB4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_1D44F7EC0()
{
  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44F7ED4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E97B0E28;
  result[1] = v3;
  return result;
}

uint64_t sub_1D44F7F08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E97B0E28;
  a2[1] = v2;
  return result;
}

uint64_t sub_1D44F7F24(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1D44F7F2C(uint64_t a1)
{

  return a1;
}

void sub_1D44F7F54(uint64_t a1)
{

  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44F7F8C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E97B0BA0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1D44F7FD0(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E97B0BA0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1D44F8004(uint64_t a1)
{

}

void sub_1D44F800C(id *a1)
{

  operator delete(a1);
}

id sub_1D44F8034(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

uint64_t sub_1D44F803C(uint64_t a1)
{

  return a1;
}

void sub_1D44F8064(uint64_t a1)
{

  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D44F809C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E97B0BE8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1D44F80E0(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E97B0BE8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1D44F8114(uint64_t a1)
{

}

void sub_1D44F811C(id *a1)
{

  operator delete(a1);
}

id sub_1D44F8144(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

_QWORD *sub_1D44F814C(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v4 = result;
    v5 = result + 2;
    do
    {
      v6 = (_QWORD *)v4[3];
      v7 = *(_QWORD *)(v2 + 16);
      while (v6 != v5)
      {
        if (v6[2] == v7)
        {
          if (v6 != v5)
            __assert_rtn("addDownstreamNodes", "SoundAnalysis_ProcessingNode.cpp", 27, "!elementFoundInList(node, mDownstreamNodes)");
          break;
        }
        v6 = (_QWORD *)v6[1];
      }
      (*(void (**)(double *__return_ptr))(*(_QWORD *)v7 + 16))(&v16);
      (*(void (**)(double *__return_ptr, _QWORD *))(*v4 + 24))(&v10, v4);
      if (v16 != v10
        || v17 != v11
        || v18 != v12
        || v19 != v13
        || v20 != v14
        || v21 != v15
        || (sub_1D44DF59C((uint64_t)&v16, (uint64_t)&v10, 0, 0) & 1) == 0)
      {
        __assert_rtn("addDownstreamNodes", "SoundAnalysis_ProcessingNode.cpp", 31, "CA::StreamDescription::IsEquivalent(node->upstreamFB().mFormat, downstreamFB().mFormat)");
      }
      result = operator new(0x18uLL);
      v8 = *(_QWORD *)(v2 + 16);
      result[1] = v5;
      result[2] = v8;
      v9 = v4[2];
      *result = v9;
      *(_QWORD *)(v9 + 8) = result;
      v4[2] = result;
      ++v4[4];
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_1D44F82CC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v4 = result;
    v5 = result + 16;
    do
    {
      v6 = *(_QWORD *)(v4 + 24);
      if (v6 == v5)
        goto LABEL_10;
      while (*(_QWORD *)(v6 + 16) != *(_QWORD *)(v2 + 16))
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (v6 == v5)
          goto LABEL_10;
      }
      if (v6 == v5)
LABEL_10:
        __assert_rtn("removeDownstreamNodes", "SoundAnalysis_ProcessingNode.cpp", 38, "elementFoundInList(node, mDownstreamNodes)");
      result = sub_1D44F8370(v5, (_QWORD *)(v2 + 16));
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_1D44F8370(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11[2];
  uint64_t v12;

  v11[0] = (uint64_t)v11;
  v11[1] = (uint64_t)v11;
  v12 = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == (_QWORD *)a1)
  {
    v9 = 0;
  }
  else
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        sub_1D44F844C((uint64_t)v11, v11, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
    v9 = v12;
  }
  sub_1D44DB220(v11);
  return v9;
}

void sub_1D44F8438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D44DB220((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F844C(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

void sub_1D44F8560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D44F85C4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 8), a2);
}

uint64_t sub_1D44F861C(uint64_t a1)
{
  *(_QWORD *)DSPGraph::Box::Box((DSPGraph::Box *)a1) = &off_1E97B0598;
  *(_QWORD *)(a1 + 776) = objc_alloc_init(DSPGCoreMLInfo);
  *(_OWORD *)(a1 + 784) = 0u;
  *(_QWORD *)(a1 + 797) = 0;
  return a1;
}

void sub_1D44F8674(_Unwind_Exception *a1)
{
  DSPGraph::Box *v1;

  DSPGraph::Box::~Box(v1);
  _Unwind_Resume(a1);
}

void sub_1D44F8688(DSPGraph::Box *a1)
{
  id *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  DSPGraph::Box *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  _BOOL4 v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  int v40;
  BOOL v41;
  BOOL v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  DSPGMLInputProvider *v46;
  void *v47;
  NSObject *v48;
  uint64_t v49;
  Class isa;
  id v51;
  void *v52;
  void *v53;
  NSObject *v54;
  void *v55;
  const char *v56;
  NSObject *v57;
  uint32_t v58;
  uint64_t v59;
  uint64_t v60;
  Class v61;
  NSObject *v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  id *v67;
  id v68;
  void *v69;
  const char *v70;
  _QWORD *v71;
  const char *v72;
  _QWORD *v73;
  uint64_t v74;
  id v75;
  NSObject *v76;
  unint64_t v77;
  unsigned int v78;
  void *v79;
  NSObject *v80;
  id v81[3];
  objc_super v82;
  NSObject *v83;
  uint8_t buf[4];
  _BYTE v85[10];
  NSObject *v86;
  uint64_t v87;

  v6 = a1;
  v87 = *MEMORY[0x1E0C80C00];
  DSPGraph::Box::initialize(a1);
  v7 = *((_QWORD *)v6 + 8);
  v8 = *((_QWORD *)v6 + 9);
  if (((v8 - v7) & 0x1FFFFFFFE0) != 0x20 || ((*((_QWORD *)v6 + 12) - *((_QWORD *)v6 + 11)) & 0x1FFFFFFFE0) != 0x20)
  {
    sub_1D44DA4C4(buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
    sub_1D44DA4C4(&v82, "initialize");
    sub_1D44DA4C4(v81, "only supports 1 bus in 1 bus out");
    DSPGraph::ThrowException();
    goto LABEL_106;
  }
  if (v8 == v7)
  {
    sub_1D44DA4C4(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(&v82, "in");
    v71 = (_QWORD *)((char *)v6 + 32);
    if (*((char *)v6 + 55) < 0)
      v71 = (_QWORD *)*v71;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v70, v71, (uint64_t)(*((_QWORD *)v6 + 9) - *((_QWORD *)v6 + 8)) >> 5, 0);
    DSPGraph::ThrowException();
    goto LABEL_106;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v10 = *((_QWORD *)v6 + 11);
  if (*((_QWORD *)v6 + 12) == v10)
  {
    sub_1D44DA4C4(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(&v82, "out");
    v73 = (_QWORD *)((char *)v6 + 32);
    if (*((char *)v6 + 55) < 0)
      v73 = (_QWORD *)*v73;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v72, v73, (uint64_t)(*((_QWORD *)v6 + 12) - *((_QWORD *)v6 + 11)) >> 5, 0);
    DSPGraph::ThrowException();
    goto LABEL_106;
  }
  v5 = *(_QWORD *)(v9 + 120);
  v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 120);
  v78 = *(_DWORD *)(v5 + 28);
  if (v78 >= 2 && (*(_BYTE *)(v5 + 12) & 0x20) == 0)
  {
    sub_1D44DA4C4(buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
    sub_1D44DA4C4(&v82, "initialize");
    sub_1D44DA4C4(v81, "input format must be deinterleaved");
    DSPGraph::ThrowException();
    goto LABEL_106;
  }
  if (*(_DWORD *)(v11 + 28) != 1)
  {
    sub_1D44DA4C4(buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
    sub_1D44DA4C4(&v82, "initialize");
    sub_1D44DA4C4(v81, "output must be single channel");
    DSPGraph::ThrowException();
    goto LABEL_106;
  }
  v12 = *(double *)v5;
  if (*(double *)v5 != *(double *)v11)
  {
    sub_1D44DA4C4(buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
    sub_1D44DA4C4(&v82, "initialize");
    sub_1D44DA4C4(v81, "input and output sample rates must match");
    DSPGraph::ThrowException();
    goto LABEL_106;
  }
  if (*(_DWORD *)(v5 + 8) == 1819304813)
    v13 = *((_DWORD *)v6 + 200) * *(_DWORD *)(v5 + 24);
  else
    v13 = *(_DWORD *)(v5 + 16);
  *((_DWORD *)v6 + 198) = v13;
  if (*(_DWORD *)(v11 + 8) == 1819304813)
    v14 = *((_DWORD *)v6 + 200) * *(_DWORD *)(v11 + 24);
  else
    v14 = *(_DWORD *)(v11 + 16);
  *((_DWORD *)v6 + 199) = v14;
  v15 = *((_QWORD *)v6 + 98);
  if (v15)
  {
    v81[0] = 0;
    objc_msgSend(MEMORY[0x1E0C9E940], "compileModelAtURL:error:", v15, v81, v12);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v81[0];
    if (v16)
    {
      v83 = v3;
      objc_msgSend(MEMORY[0x1E0C9E940], "modelWithContentsOfURL:error:", v16, &v83);
      v2 = objc_claimAutoreleasedReturnValue();
      v80 = v83;

      if (v2)
      {
        sub_1D4501768();
        v3 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D42A7000, v3, OS_LOG_TYPE_DEFAULT, "MLModel successfully loaded!", buf, 2u);
        }

      }
      sub_1D44F85C4(*((_QWORD *)v6 + 97), v2);
    }
    else
    {
      sub_1D4501768();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v17 = *((_QWORD *)v6 + 98);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v85 = v17;
        *(_WORD *)&v85[8] = 2112;
        v86 = v3;
        _os_log_impl(&dword_1D42A7000, v2, OS_LOG_TYPE_ERROR, "Unable to compile model at %@ with error %@", buf, 0x16u);
      }
      v80 = v3;
    }

  }
  else
  {
    v80 = 0;
  }
  v18 = *((_QWORD *)v6 + 97);
  if (!v18 || (v19 = *(void **)(v18 + 8)) == 0)
  {
    sub_1D4501768();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v85 = v80;
      _os_log_impl(&dword_1D42A7000, v37, OS_LOG_TYPE_ERROR, "No CoreML model set: %@", buf, 0xCu);
    }

    goto LABEL_85;
  }
  v20 = v19;
  objc_msgSend(v20, "modelDescription");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "inputDescriptionsByName");
  v1 = (id *)objc_claimAutoreleasedReturnValue();

  v22 = *((_QWORD *)v6 + 97);
  if (v22)
    v23 = *(void **)(v22 + 8);
  else
    v23 = 0;
  objc_msgSend(v23, "modelDescription");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "outputDescriptionsByName");
  v2 = objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v1, "count") || !-[NSObject count](v2, "count"))
  {
    sub_1D4501768();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D42A7000, v3, OS_LOG_TYPE_ERROR, "MLModel must have at least one feature in and one feature out", buf, 2u);
    }

    goto LABEL_85;
  }
  v25 = (_QWORD *)*((_QWORD *)v6 + 97);
  if (v25)
    v25 = (_QWORD *)v25[1];
  v26 = v25;
  objc_msgSend(v26, "modelDescription");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  +[SNUtils userSuppliedInputFeatureNames:](SNUtils, "userSuppliedInputFeatureNames:", v27);
  v3 = objc_claimAutoreleasedReturnValue();

  if (-[NSObject count](v3, "count") != 1)
  {
    sub_1D4501768();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v85 = v3;
      _os_log_impl(&dword_1D42A7000, v4, OS_LOG_TYPE_ERROR, "MLModel must have only one user defined input. Has %@", buf, 0xCu);
    }
    goto LABEL_84;
  }
  -[NSObject firstObject](v3, "firstObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", v28);
  v4 = objc_claimAutoreleasedReturnValue();

  -[NSObject multiArrayConstraint](v4, "multiArrayConstraint");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = +[SNUtils multiArrayConstraintLastDimensionIsFlexible:](SNUtils, "multiArrayConstraintLastDimensionIsFlexible:", v29);

  v77 = v13 >> 2;
  if (!v30)
  {
    -[NSObject multiArrayConstraint](v4, "multiArrayConstraint");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "shape");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = +[SNUtils numberOfElements:](SNUtils, "numberOfElements:", v39);
    v41 = v40 < 0;
    v42 = v40 <= 0;
    v43 = v40 & 0xFFFFFF00 | (v40 & ~(v40 >> 31));
    if (v42)
      v44 = 0;
    else
      v44 = -1;
    if (v41)
      v45 = v44;
    else
      v45 = v43;

    if ((_DWORD)v77 * v78 != v45)
    {
      sub_1D4501768();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)v85 = v45;
        *(_WORD *)&v85[4] = 1024;
        *(_DWORD *)&v85[6] = v77;
        LOWORD(v86) = 1024;
        *(_DWORD *)((char *)&v86 + 2) = v78;
        v56 = "MLModel input requires %d total elements. CoreMLBox wire block size is %d, with %d channels";
        v57 = v35;
        v58 = 20;
LABEL_82:
        _os_log_impl(&dword_1D42A7000, v57, OS_LOG_TYPE_ERROR, v56, buf, v58);
      }
      goto LABEL_83;
    }
LABEL_56:
    v46 = [DSPGMLInputProvider alloc];
    objc_msgSend(v1, "allKeys");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = v4;
    v75 = v47;
    if (!v46)
      goto LABEL_107;
    v82.receiver = v46;
    v82.super_class = (Class)DSPGMLInputProvider;
    v48 = -[DSPGraph::Box init](&v82, sel_init);
    if (!v48)
      goto LABEL_75;
    if (-[NSObject type](v76, "type") == 5)
    {
      objc_storeStrong((id *)&v48[1].isa, v4);
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v49 = objc_claimAutoreleasedReturnValue();
      isa = v48[2].isa;
      v48[2].isa = (Class)v49;

      objc_storeStrong((id *)&v48[3].isa, v47);
      -[NSObject multiArrayConstraint](v76, "multiArrayConstraint");
      v51 = (id)objc_claimAutoreleasedReturnValue();
      objc_opt_self();
      if (+[SNUtils multiArrayConstraintLastDimensionIsFlexible:](SNUtils, "multiArrayConstraintLastDimensionIsFlexible:", v51))
      {
        objc_msgSend(v51, "shape");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = objc_msgSend(v52, "count");

        objc_msgSend(v51, "shape");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = objc_msgSend(v53, "mutableCopy");

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v77);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject setObject:atIndexedSubscript:](v54, "setObject:atIndexedSubscript:", v55, v74 - 1);

      }
      else
      {
        objc_msgSend(v51, "shape");
        v54 = objc_claimAutoreleasedReturnValue();
      }

      v59 = +[SNUtils modelBlockSize:channelCount:](SNUtils, "modelBlockSize:channelCount:", v54, v78);
      if ((_DWORD)v59 == (_DWORD)v77)
      {
        v60 = objc_msgSend(objc_alloc(MEMORY[0x1E0C9E970]), "initWithShape:dataType:error:", v54, 65568, 0);
        v61 = v48[4].isa;
        v48[4].isa = (Class)v60;

        if (v48[4].isa)
        {
LABEL_74:

          goto LABEL_75;
        }
        sub_1D4501768();
        v62 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D42A7000, v62, OS_LOG_TYPE_ERROR, "Error allocating MLMultiArray", buf, 2u);
        }
      }
      else
      {
        sub_1D4501768();
        v62 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v77);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v59);
          v63 = objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v85 = v79;
          *(_WORD *)&v85[8] = 2112;
          v86 = v63;
          _os_log_impl(&dword_1D42A7000, v62, OS_LOG_TYPE_ERROR, "CoreMLBox configured to receive %@ elements. CoreMLModel input expects %@ total elements", buf, 0x16u);

        }
      }

    }
    else
    {
      sub_1D4501768();
      v54 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D42A7000, v54, OS_LOG_TYPE_ERROR, "Model must have MLMultiArray features", buf, 2u);
      }
    }

    v54 = v48;
    v48 = 0;
    goto LABEL_74;
  }
  -[NSObject multiArrayConstraint](v4, "multiArrayConstraint");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = +[SNUtils lastDimensionSizeRange:](SNUtils, "lastDimensionSizeRange:", v31);
  v34 = v33;

  if (v77 >= v32 && v77 - v32 < v34)
    goto LABEL_56;
  sub_1D4501768();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v32, v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)v85 = v36;
    *(_WORD *)&v85[8] = 1024;
    LODWORD(v86) = v77;
    _os_log_impl(&dword_1D42A7000, v35, OS_LOG_TYPE_ERROR, "MLModel supports block sizes in range %@. CoreMLBox block size is %d.", buf, 0x12u);

  }
LABEL_83:

LABEL_84:
LABEL_85:
  sub_1D4501768();
  v66 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D42A7000, v66, OS_LOG_TYPE_ERROR, "No CoreML model prepared. Bypassing.", buf, 2u);
  }

  while (1)
  {
    v67 = (id *)*((_QWORD *)v6 + 97);
    if (v67)
    {
      v68 = v67[3];
      v69 = v68;
      v67 = v68 ? (id *)*((_QWORD *)v68 + 4) : 0;
    }
    else
    {
      v69 = 0;
    }
    v1 = v67;
    v6 = (DSPGraph::Box *)(*(_DWORD *)(v5 + 28) * *((_DWORD *)v6 + 198) == 4 * sub_1D44F9600(objc_msgSend(v1, "count")));

    if ((v6 & 1) != 0)
      break;
    sub_1D44DA4C4(buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
    sub_1D44DA4C4(&v82, "initialize");
    sub_1D44DA4C4(v81, "MLModel input doesn't match CoreMLBox upstream block size");
    DSPGraph::ThrowException();
LABEL_106:
    __break(1u);
LABEL_107:
    v48 = 0;
LABEL_75:

    v64 = *((_QWORD *)v6 + 97);
    if (v64)
      objc_storeStrong((id *)(v64 + 24), v48);

    v65 = *((_QWORD *)v6 + 97);
    if (!v65 || !*(_QWORD *)(v65 + 24))
    {
      sub_1D4501768();
      v35 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        goto LABEL_83;
      *(_WORD *)buf = 0;
      v56 = "Error creating input provider";
      v57 = v35;
      v58 = 2;
      goto LABEL_82;
    }

  }
}

void sub_1D44F9394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  _Unwind_Resume(a1);
}

uint64_t sub_1D44F9600(uint64_t result)
{
  std::runtime_error *exception;

  if (result < 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D44E273C(exception, "numerical cast overflow: could not retain value in conversion type");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF120, MEMORY[0x1E0DE4350]);
  }
  return result;
}

void sub_1D44F964C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44F9664(uint64_t result, char a2)
{
  *(_BYTE *)(result + 804) = a2;
  return result;
}

uint64_t sub_1D44F966C(uint64_t a1)
{
  std::string *i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id *v16;
  id v17;
  id *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  id *v24;
  id **v25;
  id **v26;
  id *v27;
  uint64_t v28;
  int v29;
  DSPGraph::Box *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  id *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t result;
  const void *v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  _QWORD *v79;
  const char *v80;
  _QWORD *v81;
  const char *v82;
  _QWORD *v83;
  id *v84;
  id v85;
  id *v86;
  std::string *v87;
  std::string::size_type size;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  void *context;
  uint64_t v100;
  id v101;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  id v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string __p;
  _BYTE v113[128];
  std::string buf;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 776);
  if (!v3 || !*(_QWORD *)(v3 + 8))
  {
    sub_1D4501768();
    v65 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1D42A7000, v65, OS_LOG_TYPE_DEFAULT, "No MLModel, bypassing this process call", (uint8_t *)&buf, 2u);
    }

    v4 = a1;
    v66 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v66)
    {
      sub_1D44DA4C4(&buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(&__p, "out");
      v83 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v83 = (_QWORD *)*v83;
    }
    else
    {
      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
      bzero(*(void **)(*(_QWORD *)(*(_QWORD *)(v67 + 56) + 80) + 16), *(unsigned int *)(a1 + 796));
      v68 = *(_QWORD *)(a1 + 88);
      if (*(_QWORD *)(a1 + 96) != v68)
      {
        v69 = *(_DWORD *)(a1 + 796);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 56) + 80) + 12) = v69;
        return result;
      }
      sub_1D44DA4C4(&buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(&__p, "out");
      v83 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v83 = (_QWORD *)*v83;
    }
LABEL_132:
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v82, v83, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException();
    goto LABEL_176;
  }
  v4 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v5)
  {
    sub_1D44DA4C4(&buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(&__p, "in");
    v81 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v81 = (_QWORD *)*v81;
    goto LABEL_91;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v7 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v7)
  {
    sub_1D44DA4C4(&buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(&__p, "out");
    v83 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v83 = (_QWORD *)*v83;
    goto LABEL_132;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (!v8)
    __assert_rtn("process", "DSPGraph_CoreMLBox.mm", 231, "inABL");
  v10 = *(_QWORD *)(v9 + 56);
  i = *(std::string **)(v10 + 80);
  if (!i)
    __assert_rtn("process", "DSPGraph_CoreMLBox.mm", 232, "outABL");
  v11 = *(_DWORD *)(v8 + 12);
  v4 = a1;
  if (v11 != *(_DWORD *)(a1 + 792))
    __assert_rtn("process", "DSPGraph_CoreMLBox.mm", 235, "inABL->mBuffers[0].mDataByteSize == mInputNumBytes");
  v12 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v12)
  {
    sub_1D44DA4C4(&buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(&__p, "in");
    v81 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v81 = (_QWORD *)*v81;
LABEL_91:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v80, v81, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException();
    goto LABEL_176;
  }
  v2 = *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 120) + 28);
  v13 = *(_QWORD *)(a1 + 776);
  if (v13)
  {
    v14 = *(id *)(v13 + 24);
    v4 = (uint64_t)v14;
    if (v14)
      v14 = (_QWORD *)v14[4];
  }
  else
  {
    v4 = 0;
    v14 = 0;
  }
  v15 = objc_msgSend(v14, "dataType");

  if (v15 != 65568)
  {
    sub_1D44DA4C4(&buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
    sub_1D44DA4C4(&__p, "process");
    sub_1D44DA4C4(&v111, "input data must be Float32");
    DSPGraph::ThrowException();
    goto LABEL_176;
  }
  v16 = *(id **)(a1 + 776);
  v100 = v10;
  if (v16)
  {
    v17 = v16[3];
    v4 = (uint64_t)v17;
    if (!v17)
      goto LABEL_177;
    v16 = (id *)*((_QWORD *)v17 + 4);
  }
  else
  {
    v4 = 0;
  }
  while (1)
  {
    v18 = v16;
    v19 = objc_msgSend(v18, "count");
    sub_1D44F9600(v19);
    v20 = (*(_DWORD *)(a1 + 792) * v2);

    if (v20 != 4 * v19)
    {
      v84 = *(id **)(a1 + 776);
      if (v84)
      {
        v85 = v84[3];
        v4 = (uint64_t)v85;
        if (v85)
          v84 = (id *)*((_QWORD *)v85 + 4);
        else
          v84 = 0;
      }
      else
      {
        v4 = 0;
      }
      v86 = v84;
      std::to_string(&v109, objc_msgSend(v86, "count"));
      sub_1D44FAC70(&v110, "Error: Model input size (", &v109);
      sub_1D44FAC14(&v111, &v110, " bytes) doesn't match audio input size (");
      i = &v108;
      std::to_string(&v108, *(_DWORD *)(a1 + 792));
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = &v108;
      else
        v87 = (std::string *)v108.__r_.__value_.__r.__words[0];
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
      else
        size = v108.__r_.__value_.__l.__size_;
      v89 = std::string::append(&v111, (const std::string::value_type *)v87, size);
      v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      sub_1D44FAC14(&buf, &__p, " bytes)");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);

      sub_1D44DA4C4(&__p, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
      sub_1D44DA4C4(&v111, "process");
      DSPGraph::ThrowException();
      goto LABEL_176;
    }
    HIDWORD(i->__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 796);
    if ((_DWORD)v2)
    {
      i = 0;
      v21 = 16;
      while (1)
      {
        v22 = *(_QWORD *)(a1 + 64);
        if (*(_QWORD *)(a1 + 72) == v22)
          break;
        v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22) + 56)
                                   + 80)
                       + v21);
        v23 = *(unsigned int *)(a1 + 792);
        v24 = *(id **)(a1 + 776);
        if (v24)
        {
          v25 = (id **)v24[3];
          v26 = v25;
          if (v25)
            v24 = v25[4];
          else
            v24 = 0;
        }
        else
        {
          v26 = 0;
        }
        v27 = objc_retainAutorelease(v24);
        v28 = objc_msgSend(v27, "dataPointer");
        v29 = *(_DWORD *)(a1 + 792);

        if ((_DWORD)v23)
          memmove((void *)(v28 + (v29 * (_DWORD)i)), (const void *)v4, v23);
        i = (std::string *)((char *)i + 1);
        v21 += 16;
        if ((std::string *)v2 == i)
          goto LABEL_29;
      }
      sub_1D44DA4C4(&buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(&__p, "in");
      v79 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v79 = (_QWORD *)*v79;
      goto LABEL_126;
    }
LABEL_29:
    v30 = (DSPGraph::Box *)a1;
    if (!*(_BYTE *)(a1 + 804))
    {
      context = (void *)MEMORY[0x1D825DE1C]();
      v31 = *(_QWORD **)(a1 + 776);
      if (v31)
        v31 = (_QWORD *)v31[1];
      v32 = v31;
      v33 = *(_QWORD **)(a1 + 776);
      if (v33)
        v33 = (_QWORD *)v33[3];
      v34 = v33;
      v35 = objc_alloc_init(MEMORY[0x1E0C9E9B0]);
      v107 = 0;
      objc_msgSend(v32, "predictionFromFeatures:options:error:", v34, v35, &v107);
      v4 = objc_claimAutoreleasedReturnValue();
      v101 = v107;
      v36 = *(_QWORD *)(a1 + 776);
      if (v36)
        objc_storeStrong((id *)(v36 + 32), (id)v4);

      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v37 = *(_QWORD **)(a1 + 776);
      if (v37)
        v37 = (_QWORD *)v37[2];
      v38 = v37;
      v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v103, v113, 16);
      if (v39)
      {
        v40 = *(_QWORD *)v104;
        do
        {
          for (i = 0; i != (std::string *)v39; i = (std::string *)((char *)i + 1))
          {
            if (*(_QWORD *)v104 != v40)
              objc_enumerationMutation(v38);
            v41 = *(_QWORD **)(a1 + 776);
            if (v41)
              v41 = (_QWORD *)v41[3];
            v42 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)i);
            v43 = v41;
            v44 = *(_QWORD **)(a1 + 776);
            if (v44)
              v44 = (_QWORD *)v44[4];
            v2 = v44;
            objc_msgSend(v42, "sourceFeatureName");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend((id)v2, "featureValueForName:", v45);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "destinationFeatureName");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v48 = v46;
            v4 = v47;
            if (v43)
              objc_msgSend(v43[2], "setObject:forKeyedSubscript:", v48, v4);

          }
          v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v103, v113, 16);
        }
        while (v39);
      }

      objc_autoreleasePoolPop(context);
      v49 = *(_QWORD **)(a1 + 776);
      if (v49)
        v49 = (_QWORD *)v49[4];
      v50 = v49;
      v51 = v50;
      if (!v50 || v101)
      {
        if (v101)
        {
          sub_1D4501768();
          v4 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v101;
            _os_log_impl(&dword_1D42A7000, (os_log_t)v4, OS_LOG_TYPE_ERROR, "CoreML prediction failed with %@", (uint8_t *)&buf, 0xCu);
          }

        }
        sub_1D44DA4C4(&buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
        sub_1D44DA4C4(&__p, "process");
        sub_1D44DA4C4(&v111, "prediction failed");
        DSPGraph::ThrowException();
        goto LABEL_176;
      }
      objc_msgSend(v50, "featureNames");
      v4 = objc_claimAutoreleasedReturnValue();
      i = (std::string *)(objc_msgSend((id)v4, "count") == 0);

      if ((_DWORD)i)
      {
        sub_1D44DA4C4(&buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
        sub_1D44DA4C4(&__p, "process");
        sub_1D44DA4C4(&v111, "MLModel output must have only one feature (MLMultiArray)");
        DSPGraph::ThrowException();
        goto LABEL_176;
      }
      v52 = *(_QWORD *)(a1 + 776);
      if (v52)
        v53 = *(void **)(v52 + 8);
      else
        v53 = 0;
      objc_msgSend(v53, "modelDescription");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "predictedProbabilitiesName");
      v55 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v51, "featureNames");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "allObjects");
      v4 = objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v4, "firstObject");
      v57 = (void *)objc_claimAutoreleasedReturnValue();

      LODWORD(v4) = 0;
      if (v55 && v57)
        LODWORD(v4) = objc_msgSend(v55, "isEqual:", v57);
      objc_msgSend(v51, "featureNames");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v58, "count") == 1)
        v4 = v4;
      else
        v4 = 1;

      if ((v4 & 1) == 0)
      {
        objc_msgSend(v51, "featureNames");
        v2 = objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v2, "allObjects");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "firstObject");
        v4 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "featureValueForName:", v4);
        v60 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v60, "type") != 5)
        {
          sub_1D44DA4C4(&buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
          sub_1D44DA4C4(&__p, "process");
          sub_1D44DA4C4(&v111, "MLModel output must be an MLMultiArray");
          DSPGraph::ThrowException();
          goto LABEL_176;
        }
        objc_msgSend(v60, "multiArrayValue");
        v2 = objc_claimAutoreleasedReturnValue();
        v61 = *(void **)(*(_QWORD *)(v100 + 80) + 16);
        v62 = objc_msgSend((id)v2, "dataType");
        if (v62 == 65568)
        {
          if (*(_DWORD *)(a1 + 796) != 4 * sub_1D44F9600(objc_msgSend((id)v2, "count")))
          {
            std::to_string(&v109, objc_msgSend((id)v2, "count"));
            sub_1D44FAC70(&v110, "Error: Model output size (", &v109);
            sub_1D44FAC14(&v111, &v110, " bytes) doesn't match audio input size (");
            v4 = (uint64_t)&v108;
            std::to_string(&v108, *(_DWORD *)(a1 + 796));
            if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v95 = &v108;
            else
              v95 = (std::string *)v108.__r_.__value_.__r.__words[0];
            if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v96 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
            else
              v96 = v108.__r_.__value_.__l.__size_;
            v97 = std::string::append(&v111, (const std::string::value_type *)v95, v96);
            v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v98;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v97->__r_.__value_.__r.__words[0] = 0;
            sub_1D44FAC14(&buf, &__p, " bytes)");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v109.__r_.__value_.__l.__data_);
            goto LABEL_175;
          }
          v71 = (const void *)objc_msgSend(objc_retainAutorelease((id)v2), "dataPointer");
          v72 = *(unsigned int *)(a1 + 796);
          if ((_DWORD)v72)
            memmove(v61, v71, v72);
        }
        else
        {
          if (v62 != 65600)
          {
            sub_1D44DA4C4(&buf, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
            sub_1D44DA4C4(&__p, "process");
            sub_1D44DA4C4(&v111, "unsupported CoreML data type");
            DSPGraph::ThrowException();
            goto LABEL_176;
          }
          if (*(_DWORD *)(a1 + 796) != 4 * sub_1D44F9600(objc_msgSend((id)v2, "count")))
          {
            std::to_string(&v109, objc_msgSend((id)v2, "count"));
            sub_1D44FAC70(&v110, "Error: Model output size (", &v109);
            sub_1D44FAC14(&v111, &v110, " bytes) doesn't match audio input size (");
            v4 = (uint64_t)&v108;
            std::to_string(&v108, *(_DWORD *)(a1 + 796));
            if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v91 = &v108;
            else
              v91 = (std::string *)v108.__r_.__value_.__r.__words[0];
            if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
            else
              v92 = v108.__r_.__value_.__l.__size_;
            v93 = std::string::append(&v111, (const std::string::value_type *)v91, v92);
            v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v94;
            v93->__r_.__value_.__l.__size_ = 0;
            v93->__r_.__value_.__r.__words[2] = 0;
            v93->__r_.__value_.__r.__words[0] = 0;
            sub_1D44FAC14(&buf, &__p, " bytes)");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v109.__r_.__value_.__l.__data_);
LABEL_175:
            sub_1D44DA4C4(&__p, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_CoreMLBox.mm");
            sub_1D44DA4C4(&v111, "process");
            DSPGraph::ThrowException();
            goto LABEL_176;
          }
          v63 = objc_retainAutorelease((id)v2);
          v4 = objc_msgSend(v63, "dataPointer");
          v64 = objc_msgSend(v63, "count");
          sub_1D44F9600(v64);
          vDSP_vdpsp((const double *)v4, 1, (float *)v61, 1, v64);
        }

      }
      v30 = (DSPGraph::Box *)a1;
    }
    v73 = *((_QWORD *)v30 + 8);
    if (*((_QWORD *)v30 + 9) == v73)
    {
      sub_1D44DA4C4(&buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(&__p, "in");
      v79 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v79 = (_QWORD *)*v79;
      goto LABEL_126;
    }
    v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
    v75 = *((_QWORD *)v30 + 8);
    if (*((_QWORD *)v30 + 9) != v75)
      break;
    sub_1D44DA4C4(&buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(&__p, "in");
    v79 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v79 = (_QWORD *)*v79;
LABEL_126:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v78, v79, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException();
LABEL_176:
    __break(1u);
LABEL_177:
    v16 = 0;
  }
  v76 = *(unsigned int *)(*(_QWORD *)(v74 + 56) + 72);
  v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
  return DSPGraph::Box::propagateFlagsAndTimeStamp(v30, v76, (const AudioTimeStamp *)(*(_QWORD *)(v77 + 56) + 8));
}

void sub_1D44FA7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;

  if (a50 < 0)
    operator delete(__p);
  if (a56 < 0)
    operator delete(a51);
  if (*(char *)(v61 - 105) < 0)
    operator delete(*(void **)(v61 - 128));

  _Unwind_Resume(a1);
}

__n128 sub_1D44FAC14(std::string *a1, std::string *a2, char *__s)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_1D44FAC70(std::string *a1, char *__s, std::string *a3)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1D44FACD0()
{
  return 0;
}

void sub_1D44FACD8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  sub_1D44F85C4(*(_QWORD *)(a1 + 776), v8);
  objc_msgSend(v8, "modelDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[SNModelMetadataUtils validatedFeedbackConnectionsFromModelDescription:orDefault:](SNModelMetadataUtils, "validatedFeedbackConnectionsFromModelDescription:orDefault:", v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(a1 + 776);
  if (v6)
    objc_storeStrong((id *)(v6 + 16), v5);

  v7 = *(void **)(a1 + 784);
  *(_QWORD *)(a1 + 784) = 0;

}

void sub_1D44FAD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1D44FADB8(uint64_t *a1, int a2, int a3, uint64_t a4, int a5, id *a6)
{
  NSObject *v9;
  id v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 != 10000)
    return 4294956417;
  if (a5 != 8)
    return 561211770;
  if (a3)
    return 4294956430;
  if (!a6)
    return 4294956445;
  if (DSPGraph::Box::initialized((DSPGraph::Box *)a1))
  {
    sub_1D4501768();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl(&dword_1D42A7000, v9, OS_LOG_TYPE_DEFAULT, "Audio is already running. Model will be loaded next time audio is restarted", (uint8_t *)&v15, 2u);
    }

  }
  v10 = *a6;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)a1[98];
  a1[98] = v11;

  if (a1[98])
  {
    sub_1D4501768();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 138412290;
      v16 = v10;
      _os_log_impl(&dword_1D42A7000, v13, OS_LOG_TYPE_DEFAULT, "Set CoreMLModel URL at path %@", (uint8_t *)&v15, 0xCu);
    }

    sub_1D44F85C4(a1[97], 0);
  }
  else
  {
    sub_1D4501768();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = 138412290;
      v16 = v10;
      _os_log_impl(&dword_1D42A7000, v14, OS_LOG_TYPE_ERROR, "Error creating URL from path: %@", (uint8_t *)&v15, 0xCu);
    }

  }
  return 0;
}

void sub_1D44FAF90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D44FAFB0(uint64_t a1)
{
  return *(id *)(a1 + 776);
}

void sub_1D44FAFBC(id *a1)
{
  sub_1D44FB014(a1);
  JUMPOUT(0x1D825DA8CLL);
}

const char *sub_1D44FAFE0()
{
  return "CoreMLBox";
}

uint64_t sub_1D44FAFEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 800) = a2;
  return result;
}

uint64_t sub_1D44FAFF4()
{
  return 1;
}

double sub_1D44FAFFC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 16) = 0;
  result = *(double *)"xfualmrcxoba";
  *(_OWORD *)a1 = *(_OWORD *)"xfualmrcxoba";
  return result;
}

void sub_1D44FB014(id *a1)
{

  DSPGraph::Box::~Box((DSPGraph::Box *)a1);
}

uint64_t sub_1D44FB044()
{
  return *MEMORY[0x1E0C83DA0];
}

unint64_t sub_1D44FB054(unint64_t *a1)
{
  return atomic_load(a1);
}

unint64_t *sub_1D44FB05C(unint64_t *result, unint64_t a2)
{
  atomic_store(a2, result);
  return result;
}

unint64_t sub_1D44FB064(unint64_t *a1, uint64_t a2)
{
  unint64_t result;

  do
    result = __ldaxr(a1);
  while (__stlxr(result + a2, a1));
  return result;
}

uint64_t sub_1D44FB07C(unint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v3 = *a2;
  while (1)
  {
    v4 = __ldxr(a1);
    if (v4 != v3)
      break;
    if (!__stxr(a3, a1))
    {
      result = 1;
      goto LABEL_6;
    }
  }
  result = 0;
  __clrex();
LABEL_6:
  *a2 = v4;
  return result;
}

uint64_t sub_1D44FB0AC(unsigned __int8 *a1)
{
  unsigned __int8 v1;

  v1 = atomic_load(a1);
  return v1 & 1;
}

unsigned __int8 *sub_1D44FB0B8(unsigned __int8 *result, unsigned __int8 a2)
{
  atomic_store(a2, result);
  return result;
}

uint64_t sub_1D44FB0C0(unsigned __int8 *a1, _BYTE *a2, unsigned __int8 a3)
{
  int v3;
  int v4;
  uint64_t result;

  v3 = *a2;
  while (1)
  {
    v4 = __ldxr(a1);
    if (v4 != v3)
      break;
    if (!__stxr(a3, a1))
    {
      result = 1;
      goto LABEL_6;
    }
  }
  result = 0;
  __clrex();
LABEL_6:
  *a2 = v4;
  return result;
}

_QWORD *sub_1D44FB0F4()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  return result;
}

_BYTE *sub_1D44FB120()
{
  _BYTE *result;

  result = (_BYTE *)operator new();
  *result = 0;
  return result;
}

uint64_t sub_1D44FB14C(uint64_t result)
{
  if (result)
    JUMPOUT(0x1D825DA8CLL);
  return result;
}

uint64_t sub_1D44FB168(uint64_t result)
{
  if (result)
    JUMPOUT(0x1D825DA8CLL);
  return result;
}

uint64_t sub_1D44FB184(uint64_t result)
{
  if (result)
    JUMPOUT(0x1D825DA8CLL);
  return result;
}

__CFString *sub_1D44FB1A0()
{
  return CFSTR("Shouting");
}

void sub_1D44FB250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D44FB3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D44FB610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t result;
  const char *v45;
  _QWORD *v46;
  const char *v47;
  _QWORD *v48;
  unsigned int v49;
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[3];

  DSPGraph::RingBufferBox::initialize((DSPGraph::RingBufferBox *)a1);
  MEMORY[0x1D825D6B4](a1 + 808);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) == 0)
  {
    sub_1D44DA4C4(v52, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_ContextBox.cpp");
    sub_1D44DA4C4(v51, "initialize");
    sub_1D44DA4C4(v50, "ContextBox has no inputs");
    result = DSPGraph::ThrowException();
LABEL_59:
    __break(1u);
    return result;
  }
  if (v3 == v2)
  {
    sub_1D44DA4C4(v52, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v51, "in");
    v46 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v46 = (_QWORD *)*v46;
    goto LABEL_54;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v5)
  {
    sub_1D44DA4C4(v52, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v51, "out");
    v48 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v48 = (_QWORD *)*v48;
    goto LABEL_57;
  }
  v6 = *(_QWORD *)(v4 + 120);
  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120);
  if (*(_DWORD *)(v6 + 40) == 1 && *(_DWORD *)(v7 + 40) == 1)
  {
    sub_1D44DA4C4(v52, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_ContextBox.cpp");
    sub_1D44DA4C4(v51, "validateFormats");
    sub_1D44DA4C4(v50, "Context box can't produce variable output frames.");
    result = DSPGraph::ThrowException();
    goto LABEL_59;
  }
  if (*(_DWORD *)(v6 + 28) != *(_DWORD *)(v7 + 28))
  {
    sub_1D44DA4C4(v52, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_ContextBox.cpp");
    sub_1D44DA4C4(v51, "validateFormats");
    sub_1D44DA4C4(v50, "input and output channel counts don't match");
    result = DSPGraph::ThrowException();
    goto LABEL_59;
  }
  if (*(_DWORD *)(a1 + 936) <= 1u)
    __assert_rtn("initialize", "DSPGraph_ContextBox.cpp", 65, "mMaxFrames > 1");
  v9 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v9)
  {
    sub_1D44DA4C4(v52, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v51, "in");
    v46 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v46 = (_QWORD *)*v46;
    goto LABEL_54;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v11 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v11)
  {
    sub_1D44DA4C4(v52, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v51, "out");
    v48 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v48 = (_QWORD *)*v48;
    goto LABEL_57;
  }
  v12 = *(_DWORD **)(v10 + 120);
  v14 = v12[3];
  v13 = v12[4];
  v15 = v12[6];
  v49 = v12[7];
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v17 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v17)
  {
    sub_1D44DA4C4(v52, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v51, "in");
    v46 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v46 = (_QWORD *)*v46;
LABEL_54:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v45, v46, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
    goto LABEL_59;
  }
  v18 = *(_DWORD **)(v16 + 120);
  v20 = v18[3];
  v19 = v18[4];
  v22 = v18[6];
  v21 = v18[7];
  v23 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)a1);
  v24 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) + 120);
  v25 = *(_DWORD *)(v24 + 8);
  v26 = v25 == 1718773105 || v25 == 1819304813;
  if (v26 || !*(_DWORD *)(v24 + 16))
  {
    v13 = v23 * v15;
    if ((v14 & 0x20) == 0)
      v13 /= v49;
  }
  v27 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v27)
  {
    sub_1D44DA4C4(v52, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v51, "out");
    v48 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v48 = (_QWORD *)*v48;
LABEL_57:
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v47, v48, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    result = DSPGraph::ThrowException();
    goto LABEL_59;
  }
  v28 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)a1);
  v29 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27) + 120);
  v30 = *(_DWORD *)(v29 + 8);
  if (v30 == 1718773105 || v30 == 1819304813 || !*(_DWORD *)(v29 + 16))
  {
    v19 = v28 * v22;
    if ((v20 & 0x20) == 0)
      v19 /= v21;
  }
  *(_DWORD *)(a1 + 968) = v13 >> 2;
  *(_DWORD *)(a1 + 972) = v19 >> 2;
  if (v19 >> 2 < v13 >> 2)
  {
    sub_1D44DA4C4(v52, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_ContextBox.cpp");
    sub_1D44DA4C4(v51, "initialize");
    sub_1D44DA4C4(v50, "number of context frames must be greater than block size");
    result = DSPGraph::ThrowException();
    goto LABEL_59;
  }
  v31 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)a1);
  LODWORD(v32) = *(_DWORD *)(a1 + 968);
  v33 = (double)v31 * (double)v32 / (double)DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)a1);
  *(double *)(a1 + 944) = v33;
  if (vabdd_f64(floor(v33), v33) >= 0.001)
    __assert_rtn("initialize", "DSPGraph_ContextBox.cpp", 94, "isIntegral(mOutputHopSize)");
  v34 = *(unsigned int *)(a1 + 968);
  *(_QWORD *)(a1 + 952) = v34;
  v35 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 960) = *(unsigned int *)(v35 + 268);
  v36 = *(unsigned int *)(a1 + 972);
  v37 = *(_QWORD *)(v35 + 296);
  if (v37)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 296);
    v39 = v37;
    do
    {
      v40 = v39;
      v39 = v38 % v39;
      v38 = v40;
    }
    while (v39);
  }
  else
  {
    v40 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 296);
  }
  v41 = (*(_QWORD *)(*(_QWORD *)(a1 + 856) + 296) - v40) * v34 / v37;
  v42 = *(_DWORD *)(a1 + 968) * DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)a1);
  v43 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)a1);
  *(_DWORD *)(a1 + 976) = (v41 + v36 - v42 / v43) & ~((uint64_t)(v41 + v36 - v42 / v43) >> 63);
  return DSPGraph::RingBuffer::alloc((DSPGraph::RingBuffer *)(a1 + 888));
}

void sub_1D44FBD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44FBDEC(DSPGraph::RingBufferBox *this, int a2, int a3)
{
  *((_DWORD *)this + 232) = a2;
  *((_DWORD *)this + 233) = a3;
  return DSPGraph::RingBufferBox::configureRingBuffer(this);
}

uint64_t sub_1D44FBE00(DSPGraph::RingBufferBox *a1)
{
  MEMORY[0x1D825D6B4]((char *)a1 + 888);
  return DSPGraph::RingBufferBox::uninitialize(a1);
}

uint64_t sub_1D44FBE28(uint64_t a1)
{
  return DSPGraph::RingBuffer::initialize((DSPGraph::RingBuffer *)(a1 + 888));
}

uint64_t sub_1D44FBE38(uint64_t a1, unsigned int a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[3];
  _QWORD v18[3];

  v4 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)a1);
  v5 = *(_DWORD *)(a1 + 936);
  if (v4 != 1)
  {
    if (v5 != a2)
      __assert_rtn("process", "DSPGraph_ContextBox.cpp", 156, "inNumFrames == mMaxFrames");
    v12 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v12)
    {
      sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v17, "in");
      v11 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v11 = (_QWORD *)*v11;
      goto LABEL_30;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    DSPGraph::RingBuffer::write();
    v13 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v13)
    {
      sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v17, "in");
      v11 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v11 = (_QWORD *)*v11;
      goto LABEL_30;
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    v9 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v9)
    {
      sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v17, "in");
      v11 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v11 = (_QWORD *)*v11;
      goto LABEL_30;
    }
    goto LABEL_13;
  }
  if (v5 < a2)
    __assert_rtn("process", "DSPGraph_ContextBox.cpp", 150, "inNumFrames <= mMaxFrames");
  v6 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v6)
  {
    sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v17, "in");
    v11 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v11 = (_QWORD *)*v11;
    goto LABEL_30;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  DSPGraph::RingBuffer::write();
  v7 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v7)
  {
    sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v17, "in");
    v11 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v11 = (_QWORD *)*v11;
    goto LABEL_30;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v9 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v9)
  {
LABEL_13:
    v14 = *(unsigned int *)(*(_QWORD *)(v8 + 56) + 72);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    return DSPGraph::Box::propagateFlagsAndTimeStamp((DSPGraph::Box *)a1, v14, (const AudioTimeStamp *)(*(_QWORD *)(v15 + 56) + 8));
  }
  sub_1D44DA4C4(v18, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v17, "in");
  v11 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v11 = (_QWORD *)*v11;
LABEL_30:
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v10, v11, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44FC260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44FC2E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD v13[3];

  v3 = a1 + 88;
  v2 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(v3 + 8) == v2)
  {
    sub_1D44DA4C4(v13, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v12, "out");
    v11 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v11 = (_QWORD *)*v11;
  }
  else
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    DSPGraph::Buffer::restoreSizeToCapacity(*(DSPGraph::Buffer **)(v4 + 56));
    v5 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v5)
    {
      sub_1D44DA4C4(v13, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v12, "out");
      v11 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v11 = (_QWORD *)*v11;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      DSPGraph::RingBuffer::read();
      v6 = *(_QWORD *)(a1 + 88);
      if (*(_QWORD *)(a1 + 96) != v6)
      {
        v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) + 56);
        *(_DWORD *)(v7 + 64) = 1;
        result = DSPGraph::FCBox::downstreamSampleTime((DSPGraph::FCBox *)a1);
        *(_QWORD *)(v7 + 8) = v9;
        return result;
      }
      sub_1D44DA4C4(v13, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v12, "out");
      v11 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v11 = (_QWORD *)*v11;
    }
  }
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v10, v11, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44FC500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D44FC564(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  const char *v7;
  _QWORD *v8;
  std::runtime_error *exception;
  _QWORD v10[3];
  _QWORD v11[3];

  if (*(_DWORD *)(a1 + 936) <= 1u)
    __assert_rtn("selfLatencyInTicks", "DSPGraph_ContextBox.cpp", 181, "mMaxFrames > 1");
  v2 = *(unsigned int *)(a1 + 976);
  v3 = *(_QWORD *)(a1 + 960);
  v4 = sub_1D44DE938(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 696));
  v5 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v5)
  {
    sub_1D44DA4C4(v11, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v10, "in");
    v8 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v8 = (_QWORD *)*v8;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v7, v8, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException();
    __break(1u);
LABEL_9:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D44E273C(exception, "numerical cast overflow: could not retain value in conversion type");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF120, MEMORY[0x1E0DE4350]);
  }
  result = v3
         * v2
         * v4
         / (*(_QWORD *)(a1 + 952)
          * **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120));
  if (result < 0)
    goto LABEL_9;
  return result;
}

void sub_1D44FC6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

void sub_1D44FC710(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E97AF2A8;
  DSPGraph::RingBuffer::~RingBuffer((DSPGraph::RingBuffer *)(a1 + 888));
  *(_QWORD *)a1 = MEMORY[0x1E0CFFC38] + 16;
  DSPGraph::RingBuffer::~RingBuffer((DSPGraph::RingBuffer *)(a1 + 808));
  DSPGraph::Box::~Box((DSPGraph::Box *)a1);
}

void sub_1D44FC75C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E97AF2A8;
  DSPGraph::RingBuffer::~RingBuffer((DSPGraph::RingBuffer *)(a1 + 888));
  *(_QWORD *)a1 = MEMORY[0x1E0CFFC38] + 16;
  DSPGraph::RingBuffer::~RingBuffer((DSPGraph::RingBuffer *)(a1 + 808));
  DSPGraph::Box::~Box((DSPGraph::Box *)a1);
  JUMPOUT(0x1D825DA8CLL);
}

const char *sub_1D44FC7BC()
{
  return "context";
}

uint64_t sub_1D44FC7C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 936) = a2;
  return result;
}

uint64_t sub_1D44FC7D0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 980) = a2;
  return result;
}

uint64_t sub_1D44FC7D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 980);
}

double sub_1D44FC7E0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 16) = 0;
  result = *(double *)"xfuaxtncxoba";
  *(_OWORD *)a1 = *(_OWORD *)"xfuaxtncxoba";
  return result;
}

uint64_t sub_1D44FC7FC()
{
  return 0;
}

uint64_t sub_1D44FC804()
{
  return 0;
}

uint64_t sub_1D44FC83C(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v17;
  id obj;
  uint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  _BYTE v47[128];
  _QWORD v48[10];

  v48[8] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  objc_opt_self();
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  sub_1D44F5B18(v17);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v47, 16);
  if (v3)
  {
    obj = v2;
    v20 = *(_QWORD *)v24;
    while (2)
    {
      v4 = 0;
      v19 = v3;
      do
      {
        if (*(_QWORD *)v24 != v20)
          objc_enumerationMutation(obj);
        v21 = (_QWORD **)*(id *)(*((_QWORD *)&v23 + 1) + 8 * v4);
        objc_opt_self();
        (*(void (**)(__int128 *__return_ptr))(*v21[1] + 208))(&v27);
        objc_opt_self();
        v29 = v27;
        v30 = v28;
        objc_opt_self();
        v22 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v29, "{AudioComponentDescription=IIIII}", v17);
        objc_opt_self();
        v46 = 0;
        v45 = *(_OWORD *)"xfualmrcxoba";
        objc_opt_self();
        v5 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v45, "{AudioComponentDescription=IIIII}");
        v48[0] = v5;
        v44 = 0;
        v43 = *(_OWORD *)"xfuaftmlxoba";
        objc_opt_self();
        v6 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v43, "{AudioComponentDescription=IIIII}");
        v48[1] = v6;
        v42 = 0;
        v41 = *(_OWORD *)"xfuaxtncxoba";
        objc_opt_self();
        v7 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v41, "{AudioComponentDescription=IIIII}");
        v48[2] = v7;
        v40 = 0;
        v39 = *(_OWORD *)"xfuapraexoba";
        objc_opt_self();
        v8 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v39, "{AudioComponentDescription=IIIII}");
        v48[3] = v8;
        v38 = 0;
        v37 = *(_OWORD *)"xfuadgisxoba";
        objc_opt_self();
        v9 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v37, "{AudioComponentDescription=IIIII}");
        v48[4] = v9;
        v36 = 0;
        v35 = *(_OWORD *)"xfuapcxexoba";
        objc_opt_self();
        v10 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v35, "{AudioComponentDescription=IIIII}");
        v48[5] = v10;
        v34 = 0;
        v33 = *(_OWORD *)"xfuapraexoba";
        objc_opt_self();
        v11 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v33, "{AudioComponentDescription=IIIII}");
        v48[6] = v11;
        v32 = 0;
        v31 = *(_OWORD *)"xfuamzhsxoba";
        objc_opt_self();
        v12 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v31, "{AudioComponentDescription=IIIII}");
        v48[7] = v12;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v48, 8);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        LOBYTE(v12) = objc_msgSend(v14, "containsObject:", v22);
        if ((v12 & 1) != 0)
        {
          v15 = 1;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v19 != v4);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v47, 16);
      if (v3)
        continue;
      break;
    }
    v15 = 0;
LABEL_11:
    v2 = obj;
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1D44FCC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

id sub_1D44FCD4C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a2;
  objc_opt_self();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D44FCE14;
  v8[3] = &unk_1E97C46D8;
  v5 = v4;
  v9 = v5;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v8, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1D44FCDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1D44FCE14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  const char *v5;
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD v8[3];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v2 + 72) != v3)
    return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 56) + 8));
  sub_1D44DA4C4(v8, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v7, "in");
  v6 = (_QWORD *)(v2 + 32);
  if (*(char *)(v2 + 55) < 0)
    v6 = (_QWORD *)*v6;
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D44FCEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

id sub_1D44FCF34(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  id (*v12)(uint64_t);
  void *v13;
  id v14;
  void *v15;

  v4 = a2;
  v5 = (void *)objc_opt_self();
  v10 = MEMORY[0x1E0C809B0];
  v11 = 3221225472;
  v12 = sub_1D4500C34;
  v13 = &unk_1E97C4950;
  v6 = v4;
  v14 = v6;
  v15 = v5;
  v7 = _Block_copy(&v10);
  objc_msgSend(v5, "actCatchingExceptions:error:", v7, a3, v10, v11, v12, v13);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1D44FCFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1D44FD014(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a2;
  v7 = a3;
  objc_opt_self();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1D44FD114;
  v12[3] = &unk_1E97C4700;
  v8 = v6;
  v13 = v8;
  v9 = v7;
  v14 = v9;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v12, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D44FD0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FD114(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    v24 = *(_QWORD *)(v2 + 8);
    v25 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
  }
  else
  {
    v3 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  v6 = DSPGraph::Graph::addInput();
  if (v23 < 0)
    operator delete(__p);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, v6, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FD26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FD2A4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a2;
  v7 = a3;
  objc_opt_self();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1D44FD3A4;
  v12[3] = &unk_1E97C4700;
  v8 = v6;
  v13 = v8;
  v9 = v7;
  v14 = v9;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v12, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D44FD378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FD3A4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    v24 = *(_QWORD *)(v2 + 8);
    v25 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
  }
  else
  {
    v3 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  v6 = DSPGraph::Graph::addOutput();
  if (v23 < 0)
    operator delete(__p);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, v6, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FD4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FD534(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  id v16;
  int v17;

  v8 = a2;
  v9 = a3;
  objc_opt_self();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1D44FD63C;
  v14[3] = &unk_1E97C4728;
  v17 = a4;
  v10 = v8;
  v15 = v10;
  v11 = v9;
  v16 = v11;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v14, a5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1D44FD610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FD63C(uint64_t a1)
{
  DSPGraph::Box *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v2);
  *(_QWORD *)v2 = MEMORY[0x1E0CFFC28] + 16;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 8);
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v23 < 0)
    operator delete(__p);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, (uint64_t)v2, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FD7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FD824(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;

  v8 = a2;
  v9 = a3;
  objc_opt_self();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1D44FD92C;
  v14[3] = &unk_1E97C4750;
  v17 = a4;
  v10 = v8;
  v15 = v10;
  v11 = v9;
  v16 = v11;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v14, a5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1D44FD900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FD92C(uint64_t a1)
{
  DSPGraph::Box *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  SNDSPGraphBox *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *__p;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v2 = (DSPGraph::Box *)operator new();
  v3 = *(_QWORD *)(a1 + 48);
  DSPGraph::Box::Box(v2);
  *(_QWORD *)v2 = &off_1E97AF588;
  *((_DWORD *)v2 + 193) = v3;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(v4 + 16);
    v25 = *(_QWORD *)(v4 + 8);
    v26 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v25 = 0;
    v26 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v24 < 0)
    operator delete(__p);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = [SNDSPGraphBox alloc];
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v12 = *(std::__shared_weak_count **)(v11 + 16);
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  v16 = sub_1D44EF4FC(v10, (uint64_t)v2, &v21);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_1D44FDAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FDB18(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  id v16;
  int v17;

  v8 = a2;
  v9 = a3;
  objc_opt_self();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1D44FDC20;
  v14[3] = &unk_1E97C4728;
  v17 = a4;
  v10 = v8;
  v15 = v10;
  v11 = v9;
  v16 = v11;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v14, a5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1D44FDBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FDC20(uint64_t a1)
{
  DSPGraph::Box *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = (DSPGraph::Box *)operator new();
  sub_1D4506554(v2, *(_DWORD *)(a1 + 48));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 8);
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v23 < 0)
    operator delete(__p);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, (uint64_t)v2, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FDD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FDDF4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a2;
  v7 = a3;
  objc_opt_self();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1D44FDEF4;
  v12[3] = &unk_1E97C4700;
  v8 = v6;
  v13 = v8;
  v9 = v7;
  v14 = v9;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v12, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D44FDEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FDEF4(uint64_t a1)
{
  DSPGraph::Box *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v2);
  *(_QWORD *)v2 = MEMORY[0x1E0CFFC48] + 16;
  *((_QWORD *)v2 + 97) = 0;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 8);
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v23 < 0)
    operator delete(__p);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, (uint64_t)v2, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FE088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FE0E0(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  objc_opt_self();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1D44FE218;
  v16[3] = &unk_1E97C4778;
  v11 = v10;
  v17 = v11;
  v12 = v8;
  v18 = v12;
  v13 = v9;
  v19 = v13;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v16, a5);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1D44FE1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FE218(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = operator new();
  sub_1D44D9DC8(v2, *(void **)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 8);
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v23 < 0)
    operator delete(__p);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, v2, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FE394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44FE3EC(float a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  float v12;

  v6 = a3;
  objc_opt_self();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D44FE4C0;
  v10[3] = &unk_1E97C47A0;
  v7 = v6;
  v11 = v7;
  v12 = a1;
  v8 = sub_1D44FE4D8((uint64_t)SNDSPGraphUtilities, v10, a4);

  return v8;
}

void sub_1D44FE4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1D44FE4C0(uint64_t a1)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 828) = *(_DWORD *)(a1 + 40);
  return 1;
}

uint64_t sub_1D44FE4D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;

  v4 = a2;
  v5 = objc_opt_self();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D4500DF0;
  v10[3] = &unk_1E97C4978;
  v6 = v4;
  v11 = v6;
  sub_1D44FCF34(v5, v10, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "BOOLValue");

  return v8;
}

void sub_1D44FE588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1D44FE5B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a2;
  objc_opt_self();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D44FE67C;
  v8[3] = &unk_1E97C47C8;
  v5 = v4;
  v9 = v5;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v8, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1D44FE65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1D44FE67C(uint64_t a1)
{
  uint64_t v1;
  unsigned int ***v2;
  void *v3;
  unsigned int **v4;
  unsigned int **v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  void *v9;
  unsigned int ***i;
  id v12;
  unsigned int ***v13;
  unsigned int ***v14;
  uint64_t v15;
  unsigned int ****v16;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_1D4508054(&v13, *(uint64_t ****)(v1 + 800), *(uint64_t ****)(v1 + 808), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 808) - *(_QWORD *)(v1 + 800)) >> 3));
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v2 = v13;
  for (i = v14; v2 != i; v2 += 3)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array", i);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObject:", v3);
    v4 = *v2;
    v5 = v2[1];
    while (v4 != v5)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v6);
      v7 = *v4;
      v8 = v4[1];
      while (v7 != v8)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObject:", v9);

        v7 += 2;
      }

      v4 += 3;
    }

  }
  v16 = &v13;
  sub_1D450154C((void ***)&v16);
  return v12;
}

void sub_1D44FE7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  sub_1D450154C(&a14);
  _Unwind_Resume(a1);
}

id sub_1D44FE820(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a2;
  objc_opt_self();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D44FE8E8;
  v8[3] = &unk_1E97C47C8;
  v5 = v4;
  v9 = v5;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v8, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1D44FE8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1D44FE8E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t i;
  id v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ***v16;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_1D4508054(&v13, *(uint64_t ****)(v1 + 800), *(uint64_t ****)(v1 + 808), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 808) - *(_QWORD *)(v1 + 800)) >> 3));
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v2 = v13;
  for (i = v14; v2 != (uint64_t **)i; v2 += 3)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array", i);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObject:", v3);
    v4 = *v2;
    v5 = v2[1];
    while (v4 != v5)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v6);
      v7 = *v4;
      v8 = v4[1];
      while (v7 != v8)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v7 + 4));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObject:", v9);

        v7 += 8;
      }

      v4 += 3;
    }

  }
  v16 = &v13;
  sub_1D450154C((void ***)&v16);
  return v12;
}

void sub_1D44FEA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  sub_1D450154C(&a14);
  _Unwind_Resume(a1);
}

id sub_1D44FEA8C(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  id v7;
  _QWORD v8[4];
  id v9;

  v2 = a2;
  objc_opt_self();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D44FEB64;
  v8[3] = &unk_1E97C47F0;
  v3 = v2;
  v9 = v3;
  v7 = 0;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v8, (uint64_t)&v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v7;

  return v4;
}

void sub_1D44FEB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1D44FEB64(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 784), sel_getLatestSuperVector);
}

id sub_1D44FEB74(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _QWORD v16[4];
  id v17;
  id v18;
  __int128 v19;
  int v20;

  v10 = a2;
  v11 = a3;
  objc_opt_self();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1D44FEC88;
  v16[3] = &unk_1E97C4818;
  v19 = *a6;
  v20 = *((_DWORD *)a6 + 4);
  v12 = v10;
  v17 = v12;
  v13 = v11;
  v18 = v13;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v16, a7);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1D44FEC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FEC88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v2);
  *(_QWORD *)v2 = MEMORY[0x1E0CFFC50] + 16;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_OWORD *)(v2 + 792) = 0u;
  *(_OWORD *)(v2 + 808) = 0u;
  *(_OWORD *)(v2 + 824) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 840) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)(v2 + 848) = 0;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 8);
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v23 < 0)
    operator delete(__p);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, v2, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FEE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FEE98(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a2;
  v7 = a3;
  objc_opt_self();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1D44FEF98;
  v12[3] = &unk_1E97C4700;
  v8 = v6;
  v13 = v8;
  v9 = v7;
  v14 = v9;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v12, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D44FEF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FEF98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  SNDSPGraphBox *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *__p;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v2 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v2);
  *(_QWORD *)v2 = MEMORY[0x1E0CFFC38] + 16;
  *(_QWORD *)(v2 + 772) = 0;
  *(_QWORD *)(v2 + 784) = 0;
  *(_QWORD *)(v2 + 800) = 0;
  *(_QWORD *)(v2 + 792) = 0;
  DSPGraph::SimpleABL::SimpleABL((DSPGraph::SimpleABL *)(v2 + 808));
  *(_OWORD *)(v2 + 872) = 0u;
  *(_OWORD *)(v2 + 824) = 0u;
  *(_OWORD *)(v2 + 840) = 0u;
  *(_OWORD *)(v2 + 849) = 0u;
  *(_QWORD *)v2 = &off_1E97AF2A8;
  v3 = DSPGraph::SimpleABL::SimpleABL((DSPGraph::SimpleABL *)(v2 + 888));
  *(_DWORD *)(v2 + 936) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v2 + 944) = 0u;
  *(_OWORD *)(v2 + 960) = 0u;
  *(_QWORD *)(v2 + 973) = 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(v4 + 16);
    v25 = *(_QWORD *)(v4 + 8);
    v26 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v25 = 0;
    v26 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v24 < 0)
    operator delete(__p);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = [SNDSPGraphBox alloc];
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v12 = *(std::__shared_weak_count **)(v11 + 16);
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  v16 = sub_1D44EF4FC(v10, v2, &v21);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_1D44FF188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FF208(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a2;
  v7 = a3;
  objc_opt_self();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1D44FF308;
  v12[3] = &unk_1E97C4700;
  v8 = v6;
  v13 = v8;
  v9 = v7;
  v14 = v9;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v12, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D44FF2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FF308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v2);
  *(_QWORD *)v2 = &off_1E97AFAA8;
  *(_DWORD *)(v2 + 824) = 0;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_OWORD *)(v2 + 792) = 0u;
  *(_OWORD *)(v2 + 808) = 0u;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 8);
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v23 < 0)
    operator delete(__p);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, v2, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FF4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FF500(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a2;
  v7 = a3;
  objc_opt_self();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1D44FF600;
  v12[3] = &unk_1E97C4700;
  v8 = v6;
  v13 = v8;
  v9 = v7;
  v14 = v9;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v12, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D44FF5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FF600(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = operator new();
  sub_1D44F861C(v2);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 8);
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v23 < 0)
    operator delete(__p);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, v2, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FF778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D44FF7D0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a2;
  v7 = a3;
  objc_opt_self();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1D44FF8CC;
  v12[3] = &unk_1E97C4840;
  v8 = v6;
  v13 = v8;
  v9 = v7;
  v14 = v9;
  v10 = sub_1D44FE4D8((uint64_t)SNDSPGraphUtilities, v12, a4);

  return v10;
}

void sub_1D44FF8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1D44FF8CC(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 640))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(a1 + 40));
  return 1;
}

uint64_t sub_1D44FF8F4(float a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  size_t v20;
  BOOL v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _OWORD v31[2];
  uint64_t v32;
  void *__p;
  int v34;
  int v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v8 = a3;
  v9 = a4;
  objc_opt_self();
  if (v8)
    v10 = v8[1];
  else
    v10 = 0;
  objc_msgSend(v9, "format");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "streamDescription");
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  v38 = *(_QWORD *)(v12 + 32);
  v36 = v13;
  v37 = v14;

  LODWORD(v11) = objc_msgSend(v9, "frameLength");
  v35 = (int)(float)((float)v11 - (float)(a1 * (float)objc_msgSend(v9, "frameLength")));
  v34 = objc_msgSend(v9, "frameLength");
  v15 = (_DWORD *)objc_msgSend(v9, "audioBufferList");
  v31[0] = v36;
  v31[1] = v37;
  v32 = v38;
  __p = sub_1D44E14D8((uint64_t)"", (uint64_t)v31);
  sub_1D44E4C7C((uint64_t)__p, 4 * objc_msgSend(v9, "frameLength"));
  if (*v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = __p;
    do
    {
      v19 = v18[4];
      v20 = v15[v16 + 3];
      if (v19)
        v21 = v20 > v19;
      else
        v21 = 0;
      if (v21)
        __assert_rtn("CopyDataFrom", "CABufferList.h", 87, "mBufferCapacity == 0 || other.mBuffers[i].mDataByteSize <= mBufferCapacity");
      v22 = *(void **)&v18[v16 + 10];
      v23 = *(const void **)&v15[v16 + 4];
      v18[v16 + 9] = v20;
      memcpy(v22, v23, v20);
      ++v17;
      v16 += 4;
    }
    while (v17 < *v15);
  }
  v24 = operator new();
  v25 = v38;
  v26 = v37;
  *(_OWORD *)v24 = v36;
  *(_OWORD *)(v24 + 16) = v26;
  v27 = (char *)__p + 24;
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 40) = v27;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 312))(v10, 64101, 0, 0, 8, v24)|| (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *))(*(_QWORD *)v10 + 312))(v10, 8, 1, 0, 40, &v36)|| (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *))(*(_QWORD *)v10 + 312))(v10, 8, 2, 0, 40,
         &v36)
    || (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)v10 + 312))(v10, 64102, 0, 0, 4, &v35)|| (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)v10 + 312))(v10, 64103, 0, 0, 4, &v34))
  {
    +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", a5, 1, 0, CFSTR("failed to configure audio correlator box"));
    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  MEMORY[0x1D825DA8C](v24, 0x1020C40148D8B47);
  v29 = __p;
  __p = 0;
  if (v29)
    sub_1D44E0BFC((int)&__p, v29);

  return v28;
}

void sub_1D44FFBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *__p)
{
  void *v15;
  void *v16;
  _QWORD *v18;

  v18 = __p;
  __p = 0;
  if (v18)
    sub_1D44E0BFC((int)&__p, v18);

  _Unwind_Resume(a1);
}

id sub_1D44FFC5C(double a1, uint64_t a2, void *a3, void *a4, char a5, int a6, uint64_t a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  _QWORD v18[4];
  id v19;
  id v20;
  double v21;
  int v22;
  char v23;

  v12 = a3;
  v13 = a4;
  objc_opt_self();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1D44FFD7C;
  v18[3] = &unk_1E97C4868;
  v21 = a1;
  v23 = a5;
  v22 = a6;
  v14 = v12;
  v19 = v14;
  v15 = v13;
  v20 = v15;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v18, a7);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_1D44FFD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D44FFD7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  SNDSPGraphBox *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = operator new();
  sub_1D44E2D4C(v2, *(unsigned __int8 *)(a1 + 60), *(_DWORD *)(a1 + 56), *(double *)(a1 + 48));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 8);
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v24 = 0;
    v25 = 0;
  }
  sub_1D44DA4C4(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  DSPGraph::Graph::add();
  if (v23 < 0)
    operator delete(__p);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = [SNDSPGraphBox alloc];
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    v20 = v12;
    v21 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v15 = sub_1D44EF4FC(v9, v2, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1D44FFF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_1D44DAAE4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_1D44FFF58(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v4 = a2;
  objc_opt_self();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D4500034;
  v10[3] = &unk_1E97C4890;
  v5 = v4;
  v11 = v5;
  v12 = a3;
  v9 = 0;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v10, (uint64_t)&v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v9;

  return v6;
}

void sub_1D4500014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1D4500034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  sub_1D44E4040(v2, *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D44E4B70(v2);
  return v3;
}

void sub_1D4500080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D4500090(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a2;
  objc_opt_self();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D4500158;
  v8[3] = &unk_1E97C48B8;
  v5 = v4;
  v9 = v5;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v8, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1D4500138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1D4500158(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 648))(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                                                                 + 8));
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)v1;
  if (v1)
    v3 = *(void **)(v1 + 32);
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

id sub_1D45001AC(uint64_t a1, uint64_t a2)
{
  objc_opt_self();
  return sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, &unk_1E97B14B0, a2);
}

_QWORD *sub_1D45001E0()
{
  SNDSPGraph *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_1D44DB280(&v13);
  v0 = [SNDSPGraph alloc];
  v11 = v13;
  v12 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v2 = __ldxr(p_shared_owners);
    while (__stxr(v2 + 1, p_shared_owners));
  }
  v3 = sub_1D44F3D00(v0, &v11);
  v4 = v12;
  if (v12)
  {
    v5 = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v3;
}

void sub_1D45002B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_1D44DAAE4((uint64_t)va);
  sub_1D44DAAE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D45002DC(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6, __int128 *a7, uint64_t a8)
{
  id v14;
  id v15;
  id v16;
  __int128 v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int v31;

  v14 = a2;
  v15 = a3;
  v16 = a4;
  objc_opt_self();
  v23[1] = 3221225472;
  v17 = a7[1];
  v27 = *a7;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[2] = sub_1D450043C;
  v23[3] = &unk_1E97C4900;
  v28 = v17;
  v29 = a7[2];
  v18 = v14;
  v24 = v18;
  v19 = v15;
  v25 = v19;
  v20 = v16;
  v26 = v20;
  v30 = a5;
  v31 = a6;
  v21 = sub_1D44FE4D8((uint64_t)SNDSPGraphUtilities, v23, a8);

  return v21;
}

void sub_1D4500404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1D450043C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
  }
  else
  {
    v2 = 0;
  }
  DSPGraph::Graph::connect();
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return 1;
}

void sub_1D4500528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D44DAAE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1D450053C@<D0>(unsigned int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  double result;

  objc_opt_self();
  if (!a1 || !a2)
    __assert_rtn("floatFormat", "SNDSPGraphUtils.mm", 44, "sampleRate > 0 && blockSize > 0");
  *(_QWORD *)(a4 + 40) = 0;
  *(double *)a4 = (double)a1;
  *(_OWORD *)(a4 + 8) = xmmword_1D454FD00;
  *(_DWORD *)(a4 + 24) = 4;
  *(_DWORD *)(a4 + 28) = a3;
  *(_QWORD *)&result = 32;
  *(_QWORD *)(a4 + 32) = 32;
  *(_DWORD *)(a4 + 40) = a2;
  return result;
}

double sub_1D45005C8@<D0>(unsigned int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  double result;

  objc_opt_self();
  *(_QWORD *)(a3 + 40) = 0;
  *(double *)a3 = (double)a1;
  *(_OWORD *)(a3 + 8) = xmmword_1D454FF70;
  *(_QWORD *)&result = 0x100000002;
  *(_OWORD *)(a3 + 24) = xmmword_1D454FF80;
  *(_DWORD *)(a3 + 40) = a2;
  return result;
}

double sub_1D4500620@<D0>(unsigned int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, uint64_t a5@<X8>)
{
  double result;

  objc_opt_self();
  if (!a4 || !a1 || !a2 || !a3)
    __assert_rtn("floatFormatWithContext", "SNDSPGraphUtils.mm", 29, "sampleRate > 0 && blockSize > 0 && contextSize > 0 && channelCount > 0");
  result = (double)a1;
  *(double *)a5 = (double)a1;
  *(_QWORD *)(a5 + 8) = 0x2170636D63;
  *(_DWORD *)(a5 + 16) = 4 * a3;
  *(_DWORD *)(a5 + 20) = a2;
  *(_DWORD *)(a5 + 24) = 0;
  *(_DWORD *)(a5 + 28) = a4;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_DWORD *)(a5 + 40) = a2;
  return result;
}

void sub_1D45006B4()
{
  DSPGraph *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v0 = (DSPGraph *)objc_opt_self();
  v1 = DSPGraph::ABIVersion(v0);
  if ((_DWORD)v1 != 4)
  {
    v2 = v1;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInMethod:object:file:lineNumber:description:", sel_assertDSPGraphABIVersionMatchesExpectation, v0, CFSTR("SNDSPGraphUtilities.mm"), 710, CFSTR("DSPGraph ABI runtime/compile-time mismatch (Got: %@, Expected: %@)"), v3, v4);

  }
}

void sub_1D4500780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1D45007AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v6 = a2;
  objc_opt_self();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D450087C;
  v10[3] = &unk_1E97C4928;
  v7 = v6;
  v11 = v7;
  v12 = a3;
  v8 = sub_1D44FE4D8((uint64_t)SNDSPGraphUtilities, v10, a4);

  return v8;
}

void sub_1D450085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1D450087C(uint64_t a1)
{
  uint64_t v2;
  DSPGraph::Graph *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::runtime_error *exception;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(DSPGraph::Graph **)(v2 + 8);
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 != (int)v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "numerical cast overflow: could not retain value in conversion type");
    exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF120, MEMORY[0x1E0DE4350]);
  }
  sub_1D450600C(v3, v7);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return 1;
}

void sub_1D4500964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_1D44DAAE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D45009D0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", v1, 2, 0, CFSTR("caught exception"));
  __cxa_end_catch();
  JUMPOUT(0x1D45009B8);
}

void sub_1D4500A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4500BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1D4500C34(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_1D4500DF0(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    return MEMORY[0x1E0C9AAB0];
  else
    return 0;
}

id sub_1D4500E1C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a2;
  objc_opt_self();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D4500EE4;
  v8[3] = &unk_1E97C46D8;
  v5 = v4;
  v9 = v5;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v8, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1D4500EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4500EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  const char *v5;
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD v8[3];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 88);
  if (*(_QWORD *)(v2 + 96) != v3)
    return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 56) + 8));
  sub_1D44DA4C4(v8, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v7, "out");
  v6 = (_QWORD *)(v2 + 32);
  if (*(char *)(v2 + 55) < 0)
    v6 = (_QWORD *)*v6;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*(_QWORD *)(v2 + 96) - *(_QWORD *)(v2 + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1D4500FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4501004(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  id v8;
  id v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  int v15;

  v8 = a2;
  objc_opt_self();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1D45010E0;
  v12[3] = &unk_1E97C49A0;
  v14 = a4;
  v9 = v8;
  v13 = v9;
  v15 = a3;
  v10 = sub_1D44FE4D8((uint64_t)SNDSPGraphUtilities, v12, a5);

  return v10;
}

void sub_1D45010C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1D45010E0(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  _QWORD *v11;
  const char *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[1];
  v3 = *(unsigned int *)(a1 + 48);
  v4 = v2[11];
  if (v3 >= (v2[12] - v4) >> 5)
  {
    v11 = v2;
    v14 = *(unsigned int *)(a1 + 48);
    sub_1D44DA4C4(v16, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v15, "out");
    v13 = v11 + 4;
    if (*((char *)v11 + 55) < 0)
      v13 = (_QWORD *)*v13;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v12, v13, (uint64_t)(v11[12] - v11[11]) >> 5, v14);
    result = DSPGraph::ThrowException();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v4 + 32 * v3) + 40))(v4 + 32 * v3) + 56);
    v6 = *(_OWORD **)(a1 + 40);
    v7 = *(_OWORD *)(v5 + 8);
    v8 = *(_OWORD *)(v5 + 24);
    v9 = *(_OWORD *)(v5 + 56);
    v6[2] = *(_OWORD *)(v5 + 40);
    v6[3] = v9;
    *v6 = v7;
    v6[1] = v8;
    return 1;
  }
  return result;
}

void sub_1D45011DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 17) < 0)
    operator delete(*(void **)(v25 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4501228(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a2;
  v7 = a3;
  objc_opt_self();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1D4501324;
  v12[3] = &unk_1E97C49C8;
  v8 = v6;
  v13 = v8;
  v9 = v7;
  v14 = v9;
  v10 = sub_1D44FE4D8((uint64_t)SNDSPGraphUtilities, v12, a4);

  return v10;
}

void sub_1D45012F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4501324(uint64_t a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = _Block_copy(*(const void **)(a1 + 40));
  v5[0] = &off_1E97B1260;
  v5[1] = _Block_copy(v1);
  v6 = v5;

  DSPGraph::Box::addRenderCallback();
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return 1;
}

void sub_1D45013F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1D450143C(DSPGraph::Box *a1)
{
  DSPGraph::Box::~Box(a1);
  JUMPOUT(0x1D825DA8CLL);
}

const char *sub_1D4501460()
{
  return "ExceptionBox";
}

double sub_1D450146C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 16) = 0;
  result = *(double *)"xfuapcxexoba";
  *(_OWORD *)a1 = *(_OWORD *)"xfuapcxexoba";
  return result;
}

uint64_t sub_1D4501484(uint64_t result)
{
  std::runtime_error *exception;

  if ((*(_BYTE *)(result + 772) & 2) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "ExceptionBox throws");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF108, MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D45014D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D45014E8(uint64_t result)
{
  std::runtime_error *exception;

  if ((*(_BYTE *)(result + 772) & 1) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "ExceptionBox Initialize");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF108, MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D4501538(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D450154C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1D45015BC(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D45015BC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D45015FC((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D45015FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_1D4501650(uint64_t a1)
{

  return a1;
}

void sub_1D4501678(uint64_t a1)
{

  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D45016B0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E97B1260;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *sub_1D45016F4(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E97B1260;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1D4501728(uint64_t a1)
{

}

void sub_1D4501730(id *a1)
{

  operator delete(a1);
}

uint64_t sub_1D4501758(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

id sub_1D4501768()
{
  if (qword_1EFE56FC0[0] != -1)
    dispatch_once(qword_1EFE56FC0, &unk_1E97B14D0);
  return (id)qword_1EFE56FB8;
}

void sub_1D45017A8()
{
  const char *v0;
  os_log_t v1;
  void *v2;

  if (+[SNUtils isRunningInDaemon](SNUtils, "isRunningInDaemon"))
    v0 = "soundanalysisd";
  else
    v0 = "";
  v1 = os_log_create("com.apple.SoundAnalysis", v0);
  v2 = (void *)qword_1EFE56FB8;
  qword_1EFE56FB8 = (uint64_t)v1;

}

id sub_1D45017F4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD aBlock[9];
  id v13;
  id v14;

  v4 = a2;
  v5 = a3;
  v6 = MEMORY[0x1E0C809B0];
  aBlock[5] = MEMORY[0x1E0C809B0];
  aBlock[6] = 3221225472;
  aBlock[7] = sub_1D45018D8;
  aBlock[8] = &unk_1E97C4A10;
  v13 = v4;
  v14 = v5;
  v7 = v5;
  v8 = v4;
  aBlock[0] = v6;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D4501BE0;
  aBlock[3] = &unk_1E97C4A30;
  aBlock[4] = os_state_add_handler();
  v9 = _Block_copy(aBlock);
  v10 = _Block_copy(v9);

  return v10;
}

char *sub_1D45018D8(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  char *v14;
  id v15;
  NSObject *v16;
  id v17;
  id v19[2];
  uint8_t buf[4];
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 16) == 3)
  {
    sub_1D4501768();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v21 = v4;
      _os_log_impl(&dword_1D42A7000, v3, OS_LOG_TYPE_DEBUG, "Collecting state information (title: %@)", buf, 0xCu);
    }

    v5 = *(_QWORD *)(a1 + 40);
    v19[1] = 0;
    (*(void (**)(void))(v5 + 16))();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 0;
    v8 = v7;
    if (v6)
    {
      v9 = *(void **)(a1 + 32);
      v19[0] = v7;
      v10 = v9;
      v11 = v6;
      objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v11, 200, 0, v19);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (v12)
      {
        v14 = (char *)malloc_type_calloc(1uLL, objc_msgSend(v12, "length", v19[0]) + 200, 0x8167000AuLL);
        if (v14)
        {
          strlcpy(v14 + 136, (const char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String"), 0x40uLL);
          *(_DWORD *)v14 = 1;
          *((_DWORD *)v14 + 1) = objc_msgSend(v13, "length");
          v15 = objc_retainAutorelease(v13);
          memcpy(v14 + 200, (const void *)objc_msgSend(v15, "bytes"), objc_msgSend(v15, "length"));
        }
        else
        {
          +[SNError populateClientError:withCode:underlyingError:message:](SNError, "populateClientError:withCode:underlyingError:message:", v19, 1, 0, CFSTR("could not allocate enough memory for serialized state"));
        }
      }
      else
      {
        v14 = 0;
      }

      v17 = v19[0];
      if (v14)
      {
        v8 = v17;
LABEL_19:

        return v14;
      }
      sub_1D4501768();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v21 = v17;
        _os_log_impl(&dword_1D42A7000, v16, OS_LOG_TYPE_ERROR, "Error preparing captured state! %@", buf, 0xCu);
      }
      v8 = v17;
    }
    else
    {
      sub_1D4501768();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v21 = v8;
        _os_log_impl(&dword_1D42A7000, v16, OS_LOG_TYPE_ERROR, "Error capturing state! %@", buf, 0xCu);
      }
    }

    v14 = 0;
    goto LABEL_19;
  }
  return 0;
}

void sub_1D4501BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4501BE0()
{
  return os_state_remove_handler();
}

uint64_t sub_1D4501BE8(AT::RingBuffer *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;

  AT::RingBuffer::GetTimeBounds(a1);
  result = v6;
  if (v8)
  {
    *a2 = v6;
    *a3 = v7;
    std::system_category();
    return 0;
  }
  return result;
}

id sub_1D4501C38(uint64_t *a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  __int128 v6;
  void *v7;
  id v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  LODWORD(v4) = a2;
  v14 = 0;
  v15 = 0;
  sub_1D4501BE8((AT::RingBuffer *)a1, &v15, &v14);
  if (v14 < v15)
    __assert_rtn("copyRecentFramesOfAudioRingBufferToAVAudioBuffer", "SNAudioRingBuffer.mm", 38, "sourceBufferStartTime <= sourceBufferEndTime");
  if ((int)v14 - (int)v15 >= v4)
    v4 = v4;
  else
    v4 = (v14 - v15);
  if ((_DWORD)v4)
  {
    *a3 = v14 - v4;
    v6 = *((_OWORD *)a1 + 1);
    v11 = *(_OWORD *)a1;
    v12 = v6;
    v13 = a1[4];
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C89AA8]), "initWithStreamDescription:", &v11);
    v8 = objc_alloc(MEMORY[0x1E0C89AC0]);
    v9 = (void *)objc_msgSend(v8, "initWithPCMFormat:frameCapacity:", v7, v4, v11, v12, v13);
    AT::RingBuffer::Fetch((AT::RingBuffer *)a1, (AudioBufferList *)objc_msgSend(v9, "mutableAudioBufferList"));
    objc_msgSend(v9, "setFrameLength:", v4);

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

void sub_1D4501D40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4501D5C(AT::RingBuffer *a1, AT::RingBuffer *a2)
{
  int v4;
  const AudioBufferList *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  sub_1D4501BE8(a1, &v9, &v8);
  if (v8 < v9)
    __assert_rtn("copyRecentFrames", "SNAudioRingBuffer.mm", 57, "sourceBufferStartTime <= sourceBufferEndTime");
  if (*((_DWORD *)a2 + 10) >= (v8 - v9))
    v4 = v8 - v9;
  else
    v4 = *((_DWORD *)a2 + 10);
  v7 = 0;
  sub_1D4501C38((uint64_t *)a1, v4, &v7);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v5 = (const AudioBufferList *)objc_msgSend(v6, "audioBufferList");
  objc_msgSend(v6, "frameLength");
  AT::RingBuffer::Store(a2, v5);

}

void sub_1D4501E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1D4501F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  AT::RingBuffer **v10;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  sub_1D4502904(v10, 0);

  _Unwind_Resume(a1);
}

uint64_t sub_1D4501FB0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

AT::RingBuffer *sub_1D4501FC0(uint64_t a1)
{
  return sub_1D4502904((AT::RingBuffer **)(a1 + 48), 0);
}

uint64_t sub_1D4501FCC(uint64_t a1)
{
  uint64_t v2;
  AT::RingBuffer *v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "streamDescription");
  v3 = (AT::RingBuffer *)operator new();
  MEMORY[0x1D825D684](v3, v2, *(unsigned int *)(a1 + 48));
  sub_1D4502904((AT::RingBuffer **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), v3);
  return 1;
}

void sub_1D450203C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D825DA8C](v1, 0x1020C4047CAF6D5);
  _Unwind_Resume(a1);
}

id sub_1D45020C4(uint64_t a1)
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C89AA8]), "initWithStreamDescription:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_1D4502198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1D45021B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  AT::RingBuffer *v6;
  AT::RingBuffer *v7;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 48);
  v3 = *(id *)(a1 + 40);
  v4 = v3;
  if (*(_DWORD *)(*(_QWORD *)(v1 + 8) + 40) != (_DWORD)v2)
  {
    v5 = objc_msgSend(v3, "streamDescription");
    v6 = (AT::RingBuffer *)operator new();
    MEMORY[0x1D825D684](v6, v5, v2);
    sub_1D4501D5C(*(AT::RingBuffer **)(v1 + 8), v6);
    v7 = *(AT::RingBuffer **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = v6;
    if (v7)
    {
      AT::RingBuffer::~RingBuffer(v7);
      MEMORY[0x1D825DA8C]();
    }
  }

  return 1;
}

void sub_1D4502264(_Unwind_Exception *a1)
{
  void *v1;
  AT::RingBuffer *v2;

  AT::RingBuffer::~RingBuffer(v2);
  MEMORY[0x1D825DA8C]();

  _Unwind_Resume(a1);
}

uint64_t sub_1D4502308(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1D45023C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1D45023E0(uint64_t a1)
{
  if (sub_1D4501BE8(*(AT::RingBuffer **)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD **)(a1 + 40), *(_QWORD **)(a1 + 48)))return MEMORY[0x1E0C9AAA0];
  else
    return MEMORY[0x1E0C9AAB0];
}

uint64_t sub_1D4502488(uint64_t a1)
{
  AT::RingBuffer::Store(*(AT::RingBuffer **)(*(_QWORD *)(a1 + 32) + 8), *(const AudioBufferList **)(a1 + 40));
  return 1;
}

uint64_t sub_1D4502520(uint64_t a1)
{
  AT::RingBuffer::Fetch(*(AT::RingBuffer **)(*(_QWORD *)(a1 + 32) + 8), *(AudioBufferList **)(a1 + 40));
  return 1;
}

void sub_1D45025E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

id sub_1D4502600(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v15 = 0;
  sub_1D4501BE8((AT::RingBuffer *)v2, v1, &v15);
  v3 = *v1;
  v4 = v15;
  if (v15 < *v1)
    __assert_rtn("copyAudioRingBufferToAVAudioBuffer", "SNAudioRingBuffer.mm", 25, "outSourceBufferStartTime <= sourceBufferEndTime");
  v5 = *(_OWORD *)v2;
  v6 = *((_OWORD *)v2 + 1);
  v14 = v2[4];
  v12 = v5;
  v13 = v6;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C89AA8]), "initWithStreamDescription:", &v12);
  v8 = objc_alloc(MEMORY[0x1E0C89AC0]);
  v9 = (v4 - v3);
  v10 = (void *)objc_msgSend(v8, "initWithPCMFormat:frameCapacity:", v7, v9, v12, v13, v14);
  AT::RingBuffer::Fetch((AT::RingBuffer *)v2, (AudioBufferList *)objc_msgSend(v10, "mutableAudioBufferList"));
  objc_msgSend(v10, "setFrameLength:", v9);

  return v10;
}

void sub_1D45026F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D45027BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1D45027D4(uint64_t a1)
{
  return sub_1D4501C38(*(uint64_t **)(*(_QWORD *)(a1 + 32) + 8), *(_DWORD *)(a1 + 40), *(_QWORD **)(a1 + 48));
}

void sub_1D45028A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1D45028CC(uint64_t a1)
{
  sub_1D4501D5C(*(AT::RingBuffer **)(*(_QWORD *)(a1 + 32) + 8), *(AT::RingBuffer **)(*(_QWORD *)(a1 + 40) + 8));
  return 1;
}

AT::RingBuffer *sub_1D4502904(AT::RingBuffer **a1, AT::RingBuffer *a2)
{
  AT::RingBuffer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AT::RingBuffer::~RingBuffer(result);
    JUMPOUT(0x1D825DA8CLL);
  }
  return result;
}

void sub_1D4502A7C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 buf,int *a23,__int128 a24,int a25,__int16 a26)
{
  uint64_t v26;
  char *v28;
  int v29;
  NSObject *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  void *v34;
  uint64_t v35;
  int *v36;
  int v37;

  if (a2)
  {
    if (a2 == 4)
    {
      v28 = (char *)__cxa_begin_catch(a1);
      v29 = *((_DWORD *)v28 + 2);
      a17 = v29;
      sub_1D4501768();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        v31 = v28 + 72;
        if (v28[95] < 0)
          v31 = (_QWORD *)*v31;
        v32 = v28 + 16;
        if (v28[39] < 0)
          v32 = (_QWORD *)*v32;
        v33 = *((_DWORD *)v28 + 10);
        LODWORD(buf) = 67110402;
        DWORD1(buf) = v29;
        WORD4(buf) = 1040;
        *(_DWORD *)((char *)&buf + 10) = 4;
        HIWORD(buf) = 2080;
        a23 = &a17;
        LOWORD(a24) = 2080;
        *(_QWORD *)((char *)&a24 + 2) = v31;
        WORD5(a24) = 2080;
        *(_QWORD *)(v26 + 36) = v32;
        a26 = 1024;
        *(_DWORD *)(v26 + 46) = v33;
        _os_log_impl(&dword_1D42A7000, v30, OS_LOG_TYPE_ERROR, "Caught graph exception %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x32u);
      }
    }
    else if (a2 == 3)
    {
      v34 = __cxa_begin_catch(a1);
      sub_1D4501768();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        v35 = (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v35;
        _os_log_impl(&dword_1D42A7000, v30, OS_LOG_TYPE_ERROR, "std::exception caught: %s.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v36 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v37 = *v36;
        a17 = *v36;
        sub_1D4501768();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v37;
          WORD4(buf) = 1040;
          *(_DWORD *)((char *)&buf + 10) = 4;
          HIWORD(buf) = 2080;
          a23 = &a17;
          _os_log_impl(&dword_1D42A7000, v30, OS_LOG_TYPE_ERROR, "Caught OSStatus exception %d %4.4s", (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        sub_1D4501768();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D42A7000, v30, OS_LOG_TYPE_ERROR, "Unknown exception caught!", (uint8_t *)&buf, 2u);
        }
      }
    }

    __cxa_end_catch();
    if (a21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a21 + 48))(a21);
      JUMPOUT(0x1D45029F0);
    }
    sub_1D44E27E4();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D4502D64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  MEMORY[0x1D825D750](&v6);
  v2 = operator new();
  MEMORY[0x1D825D714](v2, &v6);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = MEMORY[0x1E0CFFC40] + 16;
  v10 = (void **)&v9;
  sub_1D450424C(&v10);
  sub_1D45042C4((uint64_t)&v8);
  sub_1D4504348((uint64_t)&v7);
  return 1;
}

void sub_1D4502E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D825DA8C](v2, 0x10A1C4088BA2E40);
  sub_1D4502E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4502E3C(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = MEMORY[0x1E0CFFC40] + 16;
  v2 = a1 + 8;
  v4 = (void **)(a1 + 88);
  sub_1D450424C(&v4);
  sub_1D45042C4(a1 + 48);
  sub_1D4504348(v2);
  return a1;
}

id sub_1D4502E98(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  objc_opt_self();
  v9 = objc_alloc_init((Class)objc_opt_class());
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1D4503014;
  v18[3] = &unk_1E97C4D00;
  v19 = v9;
  v10 = v6;
  v20 = v10;
  v11 = v7;
  v21 = v11;
  v12 = v8;
  v22 = v12;
  v17 = 0;
  v13 = v9;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v18, (uint64_t)&v17);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v17;

  return v14;
}

void sub_1D4502FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

id sub_1D4503014(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 48);
  v3 = *(void **)(a1 + 56);
  v4 = *(id *)(a1 + 40);
  v5 = v2;
  v6 = v3;
  if (v1)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1D4503138;
    v9[3] = &unk_1E97C4D28;
    v9[4] = v1;
    v10 = v4;
    v11 = v5;
    v12 = v6;
    sub_1D44F73E0(v9, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1D4503108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D4503138(id *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  SNDSPGraph *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  id v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  int64x2_t *v24;
  uint8_t buf[4];
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend(objc_retainAutorelease(a1[5]), "UTF8String");
  sub_1D45033C0((uint64_t *)buf, (uint64_t)SNDSPGraphInterpreter, a1[6]);
  sub_1D4503A50(&v20, (uint64_t)SNDSPGraphInterpreter, a1[7]);
  DSPGraph::Interpreter::compileFile();
  v2 = v21;
  v22 = v21;
  if (v21)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v21;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E97B1378;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v21 = 0;
  v23 = v3;
  v24 = &v20;
  sub_1D45043DC((void ***)&v24);
  sub_1D4504540((uint64_t)buf);
  if (v2)
  {
    v5 = [SNDSPGraph alloc];
    v18 = v2;
    v19 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = sub_1D44F3D00(v5, &v18);
    v9 = v19;
    if (v19)
    {
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    sub_1D4501768();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = a1[5];
      *(_DWORD *)buf = 138412290;
      v26 = v13;
      _os_log_impl(&dword_1D42A7000, v12, OS_LOG_TYPE_ERROR, "Graph %@ couldn't be compiled", buf, 0xCu);
    }

    v8 = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v8;
}

void sub_1D4503348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1D44DAAE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D45033C0(uint64_t *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  int8x8_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint8x8_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[2];
  char v67;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_self();
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v63;
    v61 = a1 + 2;
    v59 = v5;
    v58 = *(_QWORD *)v63;
    do
    {
      v8 = 0;
      v60 = v6;
      do
      {
        if (*(_QWORD *)v63 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * v8);
        objc_msgSend(v5, "objectForKeyedSubscript:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_97;
        v11 = (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String");
        v12 = (char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String");
        v13 = operator new(0x40uLL);
        v66[0] = v13;
        v66[1] = a1 + 2;
        v67 = 0;
        v14 = (unsigned __int8 *)(v13 + 2);
        *v13 = 0;
        v13[1] = 0;
        sub_1D44DA4C4(v13 + 2, v11);
        sub_1D44DA4C4(v13 + 5, v12);
        v67 = 1;
        v13[1] = sub_1D4504624((uint64_t)(v13 + 2));
        v15 = sub_1D4504624((uint64_t)(v13 + 2));
        v13[1] = v15;
        v16 = a1[1];
        if (!v16)
          goto LABEL_39;
        v17 = v15;
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
        v18.i16[0] = vaddlv_u8(v18);
        v19 = v18.u32[0];
        if (v18.u32[0] > 1uLL)
        {
          v20 = v15;
          if (v16 <= v15)
            v20 = v15 % v16;
        }
        else
        {
          v20 = (v16 - 1) & v15;
        }
        v21 = *(uint64_t ***)(*a1 + 8 * v20);
        if (!v21 || (v22 = *v21) == 0)
        {
LABEL_39:
          v32 = (float)(unint64_t)(a1[3] + 1);
          v33 = *((float *)a1 + 8);
          if (v16 && (float)(v33 * (float)v16) >= v32)
            goto LABEL_82;
          v34 = (v16 & (v16 - 1)) != 0;
          if (v16 < 3)
            v34 = 1;
          v35 = v34 | (2 * v16);
          v36 = vcvtps_u32_f32(v32 / v33);
          if (v35 <= v36)
            prime = (int8x8_t)v36;
          else
            prime = (int8x8_t)v35;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            v16 = a1[1];
          }
          if (*(_QWORD *)&prime <= v16)
          {
            if (*(_QWORD *)&prime >= v16)
              goto LABEL_82;
            v44 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
            if (v16 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
            {
              v44 = std::__next_prime(v44);
            }
            else
            {
              v46 = 1 << -(char)__clz(v44 - 1);
              if (v44 >= 2)
                v44 = v46;
            }
            if (*(_QWORD *)&prime <= v44)
              prime = (int8x8_t)v44;
            if (*(_QWORD *)&prime >= v16)
            {
              v16 = a1[1];
              goto LABEL_82;
            }
            if (!*(_QWORD *)&prime)
            {
              v54 = (void *)*a1;
              *a1 = 0;
              if (v54)
                operator delete(v54);
              v16 = 0;
              a1[1] = 0;
              goto LABEL_82;
            }
          }
          if (*(_QWORD *)&prime >> 61)
            sub_1D44DF758();
          v38 = operator new(8 * *(_QWORD *)&prime);
          v39 = (void *)*a1;
          *a1 = (uint64_t)v38;
          if (v39)
            operator delete(v39);
          v40 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v40++) = 0;
          while (*(_QWORD *)&prime != v40);
          v41 = (_QWORD *)*v61;
          if (!*v61)
            goto LABEL_81;
          v42 = v41[1];
          v43 = (uint8x8_t)vcnt_s8(prime);
          v43.i16[0] = vaddlv_u8(v43);
          if (v43.u32[0] > 1uLL)
          {
            if (v42 >= *(_QWORD *)&prime)
              v42 %= *(_QWORD *)&prime;
          }
          else
          {
            v42 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*a1 + 8 * v42) = v61;
          v47 = (_QWORD *)*v41;
          if (!*v41)
          {
LABEL_81:
            v16 = (unint64_t)prime;
            goto LABEL_82;
          }
          while (2)
          {
            v48 = v47[1];
            if (v43.u32[0] > 1uLL)
            {
              if (v48 >= *(_QWORD *)&prime)
                v48 %= *(_QWORD *)&prime;
            }
            else
            {
              v48 &= *(_QWORD *)&prime - 1;
            }
            if (v48 == v42)
            {
LABEL_77:
              v48 = v42;
            }
            else
            {
              if (*(_QWORD *)(*a1 + 8 * v48))
              {
                *v41 = *v47;
                *v47 = **(_QWORD **)(*a1 + 8 * v48);
                **(_QWORD **)(*a1 + 8 * v48) = v47;
                v47 = v41;
                goto LABEL_77;
              }
              *(_QWORD *)(*a1 + 8 * v48) = v41;
            }
            v41 = v47;
            v47 = (_QWORD *)*v47;
            v42 = v48;
            if (!v47)
              goto LABEL_81;
            continue;
          }
        }
        v23 = v16 - 1;
        v24 = *((_BYTE *)v13 + 39);
        if (v24 >= 0)
          v25 = *((unsigned __int8 *)v13 + 39);
        else
          v25 = v13[3];
        if (v24 < 0)
          v14 = (unsigned __int8 *)v13[2];
        while (1)
        {
          v26 = v22[1];
          if (v26 == v17)
            break;
          if (v19 > 1)
          {
            if (v26 >= v16)
              v26 %= v16;
          }
          else
          {
            v26 &= v23;
          }
          if (v26 != v20)
            goto LABEL_39;
LABEL_35:
          v22 = (uint64_t *)*v22;
          if (!v22)
            goto LABEL_39;
        }
        v27 = *((unsigned __int8 *)v22 + 39);
        if ((v27 & 0x80u) == 0)
          v28 = *((unsigned __int8 *)v22 + 39);
        else
          v28 = v22[3];
        if (v28 != v25)
          goto LABEL_35;
        if ((v27 & 0x80) != 0)
        {
          v56 = v23;
          v57 = v10;
          v30 = v19;
          v31 = memcmp((const void *)v22[2], v14, v22[3]);
          v19 = v30;
          v23 = v56;
          v10 = v57;
          if (!v31)
            goto LABEL_96;
          goto LABEL_35;
        }
        if (*((_BYTE *)v22 + 39))
        {
          v29 = 0;
          do
          {
            if (*((unsigned __int8 *)v22 + v29 + 16) != v14[v29])
              goto LABEL_35;
            ++v29;
          }
          while (v27 != v29);
          if (!v22)
          {
LABEL_82:
            v49 = v13[1];
            v50 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
            v50.i16[0] = vaddlv_u8(v50);
            if (v50.u32[0] > 1uLL)
            {
              if (v49 >= v16)
                v49 %= v16;
            }
            else
            {
              v49 &= v16 - 1;
            }
            v51 = *a1;
            v52 = *(_QWORD **)(*a1 + 8 * v49);
            if (v52)
            {
              *v13 = *v52;
              goto LABEL_94;
            }
            *v13 = *v61;
            *v61 = v13;
            *(_QWORD *)(v51 + 8 * v49) = v61;
            if (*v13)
            {
              v53 = *(_QWORD *)(*v13 + 8);
              if (v50.u32[0] > 1uLL)
              {
                if (v53 >= v16)
                  v53 %= v16;
              }
              else
              {
                v53 &= v16 - 1;
              }
              v52 = (_QWORD *)(*a1 + 8 * v53);
LABEL_94:
              *v52 = v13;
            }
            ++a1[3];
            v66[0] = 0;
          }
        }
LABEL_96:
        sub_1D4504A74((uint64_t)v66);
        v5 = v59;
        v7 = v58;
        v6 = v60;
LABEL_97:

        ++v8;
      }
      while (v8 != v6);
      v55 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
      v6 = v55;
    }
    while (v55);
  }

}

void sub_1D45039CC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  sub_1D4504540(v2);
  _Unwind_Resume(a1);
}

void sub_1D4503A50(int64x2_t *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int64x2_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  int64x2_t v31;
  char *v32;
  int64x2_t *v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_self();
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v27 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v10 = (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String");
          v12 = a1->u64[1];
          v11 = a1[1].u64[0];
          if (v12 >= v11)
          {
            v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a1->i64[0]) >> 3);
            v15 = v14 + 1;
            if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_1D4504454();
            v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - a1->i64[0]) >> 3);
            if (2 * v16 > v15)
              v15 = 2 * v16;
            if (v16 >= 0x555555555555555)
              v17 = 0xAAAAAAAAAAAAAAALL;
            else
              v17 = v15;
            v33 = a1 + 1;
            if (v17)
            {
              if (v17 > 0xAAAAAAAAAAAAAAALL)
                sub_1D44DF758();
              v18 = (char *)operator new(24 * v17);
            }
            else
            {
              v18 = 0;
            }
            v30 = v18;
            v31.i64[0] = (uint64_t)&v18[24 * v14];
            v31.i64[1] = v31.i64[0];
            v32 = &v18[24 * v17];
            sub_1D44DA4C4(v31.i64[0], v10);
            v19 = a1->i64[0];
            v20 = a1->u64[1];
            v21 = v31.i64[1];
            v22 = v31.i64[0];
            if (v20 == a1->i64[0])
            {
              v24 = vdupq_n_s64(v20);
            }
            else
            {
              do
              {
                v23 = *(_OWORD *)(v20 - 24);
                *(_QWORD *)(v22 - 8) = *(_QWORD *)(v20 - 8);
                *(_OWORD *)(v22 - 24) = v23;
                v22 -= 24;
                *(_QWORD *)(v20 - 16) = 0;
                *(_QWORD *)(v20 - 8) = 0;
                *(_QWORD *)(v20 - 24) = 0;
                v20 -= 24;
              }
              while (v20 != v19);
              v24 = *a1;
            }
            v13 = v21 + 24;
            a1->i64[0] = v22;
            a1->i64[1] = v21 + 24;
            v31 = v24;
            v25 = (char *)a1[1].i64[0];
            a1[1].i64[0] = (uint64_t)v32;
            v32 = v25;
            v30 = (char *)v24.i64[0];
            sub_1D4504468((uint64_t)&v30);
          }
          else
          {
            sub_1D44DA4C4((_QWORD *)a1->i64[1], v10);
            v13 = v12 + 24;
            a1->i64[1] = v12 + 24;
          }
          a1->i64[1] = v13;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v6);
  }

}

void sub_1D4503CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  sub_1D45043DC((void ***)va);
  _Unwind_Resume(a1);
}

id sub_1D4503D40(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  objc_opt_self();
  v9 = objc_alloc_init((Class)objc_opt_class());
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1D4503EBC;
  v18[3] = &unk_1E97C4D00;
  v19 = v9;
  v10 = v6;
  v20 = v10;
  v11 = v7;
  v21 = v11;
  v12 = v8;
  v22 = v12;
  v17 = 0;
  v13 = v9;
  sub_1D44FCF34((uint64_t)SNDSPGraphUtilities, v18, (uint64_t)&v17);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v17;

  return v14;
}

void sub_1D4503E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

id sub_1D4503EBC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 48);
  v3 = *(void **)(a1 + 56);
  v4 = *(id *)(a1 + 40);
  v5 = v2;
  v6 = v3;
  if (v1)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1D4503FE0;
    v9[3] = &unk_1E97C4D28;
    v9[4] = v1;
    v10 = v4;
    v11 = v5;
    v12 = v6;
    sub_1D44F73E0(v9, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1D4503FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D4503FE0(id *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  SNDSPGraph *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int64x2_t v19;
  uint64_t buf[6];
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  int64x2_t *v24;

  objc_msgSend(objc_retainAutorelease(a1[5]), "UTF8String");
  sub_1D45033C0(buf, (uint64_t)SNDSPGraphInterpreter, a1[6]);
  sub_1D4503A50(&v19, (uint64_t)SNDSPGraphInterpreter, a1[7]);
  DSPGraph::Interpreter::compileText();
  v2 = v21;
  v22 = v21;
  if (v21)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v21;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E97B1378;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v21 = 0;
  v23 = v3;
  v24 = &v19;
  sub_1D45043DC((void ***)&v24);
  sub_1D4504540((uint64_t)buf);
  if (v2)
  {
    v5 = [SNDSPGraph alloc];
    v17 = v2;
    v18 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = sub_1D44F3D00(v5, &v17);
    v9 = v18;
    if (v18)
    {
      v10 = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    sub_1D4501768();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_1D42A7000, v12, OS_LOG_TYPE_ERROR, "Graph couldn't be compiled from text", (uint8_t *)buf, 2u);
    }

    v8 = 0;
  }
  v13 = v23;
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v8;
}

void sub_1D45041B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D44DAAE4(v1 - 56);
  _Unwind_Resume(a1);
}

void sub_1D450424C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1D45042C4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[8];
      if (v4 == v2 + 5)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_8;
    }
    v4 = v2 + 5;
    v5 = 4;
    goto LABEL_6;
  }
LABEL_8:
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

uint64_t sub_1D4504348(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = *(char **)v2;
      v4 = (char *)*((_QWORD *)v2 + 8);
      if (v4 == v2 + 40)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_6:
        (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_10;
    }
    v4 = v2 + 40;
    v5 = 4;
    goto LABEL_6;
  }
LABEL_10:
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

void sub_1D45043DC(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D4504454()
{
  sub_1D44DA588("vector");
}

uint64_t sub_1D4504468(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D45044CC()
{
  JUMPOUT(0x1D825DA8CLL);
}

_BYTE *sub_1D45044E0(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E97B0B58;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1D4504518(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E97B0B58;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1D4504538(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1D4504540(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1D450459C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_1D450459C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1D45045E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D825DA8CLL);
}

uint64_t sub_1D4504608(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t sub_1D4504624(uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v44 + v46 + v47 + v2;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v47 + v2 + v43 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v45 + v48 + v56;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v69 + v67 + v78 + v68;
        v60 = __ROR8__(v69 + v67 + v78, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * ((v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)) ^ v40);
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

void sub_1D4504A74(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1D450459C((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void sub_1D4505628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_1D44DAAE4(v8);

  _Unwind_Resume(a1);
}

__n128 sub_1D450564C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t sub_1D450565C(uint64_t a1)
{
  return sub_1D44DAAE4(a1 + 48);
}

uint64_t sub_1D4505664(uint64_t a1)
{
  _QWORD *v2;
  __n128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = operator new(0x148uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E97B12D0;
  v3.n128_f64[0] = sub_1D44DB98C((uint64_t)(v2 + 3));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(std::__shared_weak_count **)(v4 + 56);
  *(_QWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 56) = v2;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v3);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return 1;
}

void sub_1D45057AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1D45057C4(uint64_t a1)
{
  double v3[10];

  *(_QWORD *)&v3[9] = objc_msgSend(*(id *)(a1 + 32), "audioBufferList", objc_msgSend(*(id *)(a1 + 32), "frameLength"), (double)*(uint64_t *)(a1 + 48), 0, 0, 0, 0, 0, 0, 1);
  sub_1D44DBDCC(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v3);
  return 1;
}

uint64_t sub_1D450589C(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 256));
}

void sub_1D4505950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4505968(uint64_t a1)
{
  uint64_t *v1;
  void *__p[2];
  char v4;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  sub_1D44DA4C4(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  sub_1D44DEA0C(v1, (const void **)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_1D45059C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4505A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4505A90(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19[4];
  std::__shared_weak_count *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25[2];
  uint64_t v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v25[0] = (uint64_t)v25;
  v25[1] = (uint64_t)v25;
  v26 = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v22 != v4)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * i), "processingContext");
        v6 = (_QWORD *)v19[3];
        v7 = operator new(0x30uLL);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = *v6;
        v8 = v6[1];
        v7[3] = v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v7[4] = v6[2];
        v11 = v6[3];
        v7[5] = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v14 = v25[0];
        *v7 = v25[0];
        v7[1] = v25;
        *(_QWORD *)(v14 + 8) = v7;
        v25[0] = (uint64_t)v7;
        ++v26;
        if (v20)
        {
          p_shared_owners = &v20->__shared_owners_;
          do
            v16 = __ldaxr((unint64_t *)p_shared_owners);
          while (__stlxr(v16 - 1, (unint64_t *)p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    }
    while (v3);
  }

  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  sub_1D44E2948(v19, (uint64_t)v25);
  sub_1D44DD73C(v17, (uint64_t)v19);
  sub_1D44DF520(v19);
  sub_1D44DF520(v25);
  return 1;
}

void sub_1D4505C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_1D44DF520((uint64_t *)va);
  sub_1D44DF520((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4505D48(uint64_t a1)
{
  int v1;
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  int v7;

  v1 = *(_DWORD *)(a1 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(_OWORD *)(a1 + 56);
  v5[0] = *(_OWORD *)(a1 + 40);
  v5[1] = v3;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = v1;
  sub_1D44DBA08(v2, (uint64_t)v5);
  return 1;
}

void sub_1D4505E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4505E50(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  DSPGraph::Box *v4;

  v2 = a1[5];
  v3 = *(_QWORD **)(a1[4] + 8);
  if (v2)
    v4 = *(DSPGraph::Box **)(v2 + 8);
  else
    v4 = 0;
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", sub_1D44DE428(v3, a1[6], v4));
}

id sub_1D4505F00(uint64_t a1)
{
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 208));
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1D4505F40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E97B12D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D4505F50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E97B12D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D825DA8CLL);
}

uint64_t sub_1D4505F80(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = a1 + 36;
  v3 = (uint64_t *)a1[39];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  a1[17] = (uint64_t)&unk_1E97AF1C8;
  sub_1D44DB220(a1 + 19);
  sub_1D44DF4A8(a1 + 14);
  sub_1D44DF4A8(a1 + 11);
  sub_1D44DF4A8(a1 + 8);
  sub_1D44DF520(a1 + 5);
  return sub_1D44DAAE4((uint64_t)(a1 + 3));
}

void sub_1D450600C(DSPGraph::Graph *a1, int a2)
{
  int v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  const char *v22;
  _QWORD *v23;
  const char *v24;
  _QWORD *v25;
  void *__p;
  void *v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[3];
  _QWORD v43[3];

  if (a2 < 1)
    return;
  v2 = a2;
  while (1)
  {
    v4 = *((_DWORD *)a1 + 172);
    if (v4 >= v2)
      v5 = v2;
    else
      v5 = v4;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v37 = 1;
    v38 = 0;
    v27[1] = 0;
    v27[2] = 0;
    v31 = 1;
    v32 = 0;
    sub_1D45064F4(v5);
    v6 = DSPGraph::Graph::in(a1);
    v7 = *(_QWORD *)(v6 + 88);
    if (*(_QWORD *)(v6 + 96) == v7)
    {
      sub_1D44DA4C4(&v39, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v43, "out");
      v23 = (_QWORD *)(v6 + 32);
      if (*(char *)(v6 + 55) < 0)
        v23 = (_QWORD *)*v23;
      goto LABEL_26;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    DSPGraph::Graph::preflight();
    if (!DSPGraph::Graph::numInputs(a1))
    {
      v27[0] = 0;
      goto LABEL_12;
    }
    v6 = DSPGraph::Graph::in(a1);
    v8 = *(_QWORD *)(v6 + 88);
    if (*(_QWORD *)(v6 + 96) == v8)
    {
      sub_1D44DA4C4(v43, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v42, "out");
      v23 = (_QWORD *)(v6 + 32);
      if (*(char *)(v6 + 55) < 0)
        v23 = (_QWORD *)*v23;
LABEL_26:
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v22, v23, (uint64_t)(*(_QWORD *)(v6 + 96) - *(_QWORD *)(v6 + 88)) >> 5, 0);
      DSPGraph::ThrowException();
      goto LABEL_33;
    }
    v9 = *(__int128 **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) + 120);
    v10 = *((_QWORD *)v9 + 4);
    v11 = v9[1];
    v39 = *v9;
    v40 = v11;
    v41 = v10;
    v12 = sub_1D44E14D8((uint64_t)"", (uint64_t)&v39);
    v27[0] = v12;
    sub_1D45064F4(v5);
    sub_1D44E4C7C((uint64_t)v12, DWORD2(v40) * v5);
    if (v27[0])
      v38 = (char *)v27[0] + 24;
LABEL_12:
    if (DSPGraph::Graph::numOutputs(a1))
      break;
    __p = 0;
LABEL_17:
    DSPGraph::Graph::processMultiple();
    v19 = __p;
    __p = 0;
    if (v19)
      sub_1D44E0BFC((int)&__p, v19);
    v20 = v27[0];
    v27[0] = 0;
    if (v20)
      sub_1D44E0BFC((int)v27, v20);
    v21 = __OFSUB__(v2, (_DWORD)v5);
    v2 -= v5;
    if ((v2 < 0) ^ v21 | (v2 == 0))
      return;
  }
  v13 = DSPGraph::Graph::out(a1);
  v14 = *(_QWORD *)(v13 + 64);
  if (*(_QWORD *)(v13 + 72) != v14)
  {
    v15 = *(__int128 **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14) + 120);
    v16 = *((_QWORD *)v15 + 4);
    v17 = v15[1];
    v39 = *v15;
    v40 = v17;
    v41 = v16;
    v18 = sub_1D44E14D8((uint64_t)"", (uint64_t)&v39);
    __p = v18;
    sub_1D45064F4(v5);
    sub_1D44E4C7C((uint64_t)v18, DWORD2(v40) * v5);
    if (__p)
      v32 = (char *)__p + 24;
    goto LABEL_17;
  }
  sub_1D44DA4C4(v43, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v42, "in");
  v25 = (_QWORD *)(v13 + 32);
  if (*(char *)(v13 + 55) < 0)
    v25 = (_QWORD *)*v25;
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v24, v25, (uint64_t)(*(_QWORD *)(v13 + 72) - *(_QWORD *)(v13 + 64)) >> 5, 0);
  DSPGraph::ThrowException();
LABEL_33:
  __break(1u);
}

void sub_1D45063B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *__p)
{
  uint64_t v14;
  _QWORD *v16;

  if (*(char *)(v14 - 129) < 0)
    operator delete(*(void **)(v14 - 152));
  if (*(char *)(v14 - 105) < 0)
    operator delete(*(void **)(v14 - 128));
  if (*(char *)(v14 - 81) < 0)
    operator delete(*(void **)(v14 - 104));
  v16 = __p;
  __p = 0;
  if (v16)
    sub_1D44E0BFC((int)&__p, v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D45064F4(uint64_t result)
{
  std::runtime_error *exception;

  if ((result & 0x80000000) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D44E273C(exception, "numerical cast overflow: could not retain value in conversion type");
    __cxa_throw(exception, (struct type_info *)&unk_1E97AF120, MEMORY[0x1E0DE4350]);
  }
  return result;
}

void sub_1D4506540(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

DSPGraph::Box *sub_1D4506554(DSPGraph::Box *a1, unsigned int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)DSPGraph::Box::Box(a1);
  *v4 = &off_1E97AF818;
  sub_1D4507DD0(v4 + 97, a2);
  *((_OWORD *)a1 + 50) = 0u;
  *((_OWORD *)a1 + 51) = 0u;
  return a1;
}

void sub_1D45065A0(_Unwind_Exception *a1)
{
  DSPGraph::Box *v1;

  DSPGraph::Box::~Box(v1);
  _Unwind_Resume(a1);
}

void sub_1D45065B4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  char *v9;
  char **v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  size_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  char *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  char **v38;
  char *v39;
  char **v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  unint64_t v63;
  void *v64;
  void *v65;
  char *v66;
  char *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  void *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  const char *v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103[3];
  _QWORD v104[3];
  _QWORD v105[3];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64);
  sub_1D4506ED8((void ***)(a1 + 776), (v2 >> 5));
  v97 = (v2 >> 5);
  sub_1D45070A4((void ***)(v1 + 800), v97);
  if ((v2 & 0x1FFFFFFFE0) != 0)
  {
    v3 = 0;
    v98 = v1;
    do
    {
      v4 = *(_QWORD *)(v1 + 64);
      v100 = v3;
      if (v3 >= (*(_QWORD *)(v1 + 72) - v4) >> 5)
      {
        sub_1D44DA4C4(v105, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v104, "in");
        v96 = (_QWORD *)(v98 + 32);
        if (*(char *)(v98 + 55) < 0)
          v96 = (_QWORD *)*v96;
LABEL_117:
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v95, v96, (uint64_t)(*(_QWORD *)(v98 + 72) - *(_QWORD *)(v98 + 64)) >> 5, v3);
        DSPGraph::ThrowException();
LABEL_118:
        __break(1u);
LABEL_119:
        sub_1D44DF758();
      }
      if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v4 + 32 * v3) + 40))(v4 + 32 * v3)
                                 + 120)
                     + 8) != 1819304813)
      {
        sub_1D44DA4C4(v105, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_SignalDetectorBox.cpp");
        sub_1D44DA4C4(v104, "initialize");
        sub_1D44DA4C4(v103, "inputs must be LPCM");
        DSPGraph::ThrowException();
        goto LABEL_118;
      }
      v5 = *(_QWORD *)(v1 + 64);
      if (v3 >= (*(_QWORD *)(v1 + 72) - v5) >> 5)
      {
        sub_1D44DA4C4(v105, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v104, "in");
        v96 = (_QWORD *)(v98 + 32);
        if (*(char *)(v98 + 55) < 0)
          v96 = (_QWORD *)*v96;
        goto LABEL_117;
      }
      v6 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v5 + 32 * v3) + 40))(v5 + 32 * v3);
      v7 = *(_QWORD *)(v1 + 776);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v1 + 784) - v7) >> 3) <= v3)
LABEL_107:
        sub_1D450800C();
      v8 = (char **)(v7 + 24 * v3);
      v10 = v8 + 1;
      v9 = v8[1];
      v11 = *(unsigned int *)(*(_QWORD *)(v6 + 120) + 28);
      v12 = *v8;
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *v8) >> 3);
      v14 = v3;
      v15 = v11 - v13;
      if (v11 <= v13)
      {
        v33 = v14;
        if (v11 < v13)
        {
          v34 = &v12[24 * v11];
          while (v9 != v34)
          {
            v36 = (void *)*((_QWORD *)v9 - 3);
            v9 -= 24;
            v35 = v36;
            if (v36)
              operator delete(v35);
          }
          *v10 = v34;
        }
      }
      else
      {
        v16 = v7 + 24 * v14;
        v19 = *(_QWORD *)(v16 + 16);
        v18 = (char **)(v16 + 16);
        v17 = v19;
        if (0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)v9) >> 3) >= v15)
        {
          bzero(v9, 24 * ((24 * v15 - 24) / 0x18) + 24);
          *v10 = &v9[24 * ((24 * v15 - 24) / 0x18) + 24];
          v33 = v100;
        }
        else
        {
          v20 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v12) >> 3);
          v21 = 2 * v20;
          if (2 * v20 <= v11)
            v21 = *(unsigned int *)(*(_QWORD *)(v6 + 120) + 28);
          if (v20 >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          if (v22 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_119;
          v23 = 3 * v22;
          v24 = (char *)operator new(24 * v22);
          v25 = &v24[24 * v13];
          v26 = &v24[8 * v23];
          v27 = 24 * ((24 * v15 - 24) / 0x18) + 24;
          bzero(v25, v27);
          v28 = &v25[v27];
          if (v9 == v12)
          {
            *v8 = v25;
            *v10 = v28;
            *v18 = v26;
          }
          else
          {
            do
            {
              v29 = *((_QWORD *)v9 - 3);
              v9 -= 24;
              *((_QWORD *)v25 - 3) = v29;
              v25 -= 24;
              *((_QWORD *)v25 + 1) = *((_QWORD *)v9 + 1);
              *((_QWORD *)v25 + 2) = *((_QWORD *)v9 + 2);
              *(_QWORD *)v9 = 0;
              *((_QWORD *)v9 + 1) = 0;
              *((_QWORD *)v9 + 2) = 0;
            }
            while (v9 != v12);
            v9 = *v8;
            v30 = *v10;
            *v8 = v25;
            *v10 = v28;
            *v18 = v26;
            while (v30 != v9)
            {
              v32 = (void *)*((_QWORD *)v30 - 3);
              v30 -= 24;
              v31 = v32;
              if (v32)
                operator delete(v31);
            }
          }
          v33 = v100;
          if (v9)
            operator delete(v9);
        }
      }
      v1 = v98;
      v37 = *(_QWORD *)(v98 + 800);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v98 + 808) - v37) >> 3) <= v33)
LABEL_108:
        sub_1D450800C();
      v38 = (char **)(v37 + 24 * v33);
      v40 = v38 + 1;
      v39 = v38[1];
      v41 = *v38;
      v42 = v33;
      v43 = 0xAAAAAAAAAAAAAAABLL * ((v39 - *v38) >> 3);
      v44 = v11 >= v43;
      v45 = v11 - v43;
      if (v11 <= v43)
      {
        v63 = v42;
        if (!v44)
        {
          v66 = &v41[24 * v11];
          if (v39 != v66)
          {
            v67 = v39;
            do
            {
              v69 = (void *)*((_QWORD *)v67 - 3);
              v67 -= 24;
              v68 = v69;
              if (v69)
              {
                *((_QWORD *)v39 - 2) = v68;
                operator delete(v68);
              }
              v39 = v67;
            }
            while (v67 != v66);
          }
          *v40 = v66;
          v1 = v98;
        }
      }
      else
      {
        v46 = v37 + 24 * v42;
        v49 = *(_QWORD *)(v46 + 16);
        v48 = (char **)(v46 + 16);
        v47 = v49;
        if (0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v39) >> 3) >= v45)
        {
          bzero(v39, 24 * ((24 * v45 - 24) / 0x18) + 24);
          *v40 = &v39[24 * ((24 * v45 - 24) / 0x18) + 24];
          v1 = v98;
          v63 = v100;
          goto LABEL_60;
        }
        v50 = 0xAAAAAAAAAAAAAAABLL * ((v47 - (uint64_t)v41) >> 3);
        v51 = 2 * v50;
        if (2 * v50 <= v11)
          v51 = v11;
        if (v50 >= 0x555555555555555)
          v52 = 0xAAAAAAAAAAAAAAALL;
        else
          v52 = v51;
        v53 = (char *)sub_1D4507ED4((uint64_t)v48, v52);
        v54 = &v53[24 * v43];
        v56 = &v53[24 * v55];
        bzero(v54, 24 * ((24 * v45 - 24) / 0x18) + 24);
        v57 = &v54[24 * ((24 * v45 - 24) / 0x18) + 24];
        v58 = *v40;
        v59 = *v38;
        if (*v40 == *v38)
        {
          *v38 = v54;
          *v40 = v57;
          *v48 = v56;
LABEL_58:
          v1 = v98;
          v63 = v100;
          if (!v58)
            goto LABEL_60;
LABEL_59:
          operator delete(v58);
          goto LABEL_60;
        }
        do
        {
          *((_QWORD *)v54 - 3) = 0;
          *((_QWORD *)v54 - 2) = 0;
          v54 -= 24;
          *((_QWORD *)v54 + 2) = 0;
          v60 = *(_OWORD *)(v58 - 24);
          v58 -= 24;
          *(_OWORD *)v54 = v60;
          *((_QWORD *)v54 + 2) = *((_QWORD *)v58 + 2);
          *(_QWORD *)v58 = 0;
          *((_QWORD *)v58 + 1) = 0;
          *((_QWORD *)v58 + 2) = 0;
        }
        while (v58 != v59);
        v58 = *v38;
        v61 = *v40;
        *v38 = v54;
        *v40 = v57;
        *v48 = v56;
        if (v61 == v58)
          goto LABEL_58;
        v62 = v61;
        v1 = v98;
        v63 = v100;
        do
        {
          v65 = (void *)*((_QWORD *)v62 - 3);
          v62 -= 24;
          v64 = v65;
          if (v65)
          {
            *((_QWORD *)v61 - 2) = v64;
            operator delete(v64);
          }
          v61 = v62;
        }
        while (v62 != v58);
        if (v58)
          goto LABEL_59;
      }
LABEL_60:
      if ((_DWORD)v11)
      {
        v70 = 0;
        v71 = 0;
        v102 = 24 * v11;
        while (1)
        {
          v72 = *(_QWORD *)(v1 + 776);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v1 + 784) - v72) >> 3) <= v63)
            goto LABEL_107;
          v73 = (uint64_t *)(v72 + 24 * v63);
          v74 = *v73;
          if (0xAAAAAAAAAAAAAAABLL * ((v73[1] - *v73) >> 3) <= v71)
            sub_1D450800C();
          v75 = *(unsigned int *)(v1 + 824);
          v76 = v74 + v70;
          v77 = *(_QWORD *)(v74 + v70 + 8);
          v78 = v75 - v77;
          if (v75 <= v77)
          {
            *(_QWORD *)(v76 + 8) = v75;
            goto LABEL_98;
          }
          v79 = *(_QWORD *)(v76 + 16);
          if (v79 << 6 >= v78 && v77 <= (v79 << 6) - v78)
          {
            v82 = (unint64_t *)(*(_QWORD *)(v74 + v70) + 8 * (v77 >> 6));
            v83 = *(_QWORD *)(v74 + v70 + 8) & 0x3FLL;
            *(_QWORD *)(v76 + 8) = v75;
            goto LABEL_88;
          }
          if ((unint64_t)(v79 << 6) > 0x3FFFFFFFFFFFFFFELL)
            break;
          v81 = v79 << 7;
          if (v81 <= ((v75 + 63) & 0x1FFFFFFC0))
            v81 = (v75 + 63) & 0x1FFFFFFC0;
          if (v81)
          {
            if ((v81 & 0x8000000000000000) != 0)
              sub_1D4507EC0();
            goto LABEL_78;
          }
          v85 = 0;
          v84 = 0;
LABEL_79:
          v86 = *(void **)(v74 + v70);
          v82 = v85;
          if ((uint64_t)v77 < 1)
            goto LABEL_85;
          v99 = v84;
          v87 = v77 >> 6;
          if (v77 >= 0x40)
          {
            v88 = *(void **)(v74 + v70);
            memmove(v85, v86, 8 * v87);
            v86 = v88;
          }
          v82 = &v85[v87];
          v83 = v77 & 0x3F;
          if ((v77 & 0x3F) == 0)
          {
            v1 = v98;
            v84 = v99;
LABEL_85:
            *(_QWORD *)(v74 + v70) = v85;
            *(_QWORD *)(v76 + 8) = v75;
            *(_QWORD *)(v76 + 16) = v84;
            if (!v86)
            {
              v63 = v100;
              if (v75 != v77)
                goto LABEL_94;
              goto LABEL_98;
            }
            v101 = v82;
            v83 = 0;
            goto LABEL_87;
          }
          v101 = &v85[v87];
          *v101 = *v101 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v83) | *((_QWORD *)v86 + v87) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v83);
          *(_QWORD *)(v74 + v70) = v85;
          v1 = v98;
          *(_QWORD *)(v76 + 8) = v75;
          *(_QWORD *)(v76 + 16) = v99;
LABEL_87:
          v63 = v100;
          operator delete(v86);
          v82 = v101;
LABEL_88:
          if (v75 != v77)
          {
            if (v83)
            {
              if (64 - v83 >= v78)
                v89 = v75 - v77;
              else
                v89 = 64 - v83;
              *v82++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v83 - v89)) & (-1 << v83));
              v78 -= v89;
            }
LABEL_94:
            v90 = v78 >> 6;
            if (v78 >= 0x40)
            {
              v91 = v82;
              bzero(v82, 8 * v90);
              v82 = v91;
            }
            if ((v78 & 0x3F) != 0)
              v82[v90] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v78 & 0x3F));
          }
LABEL_98:
          v92 = *(_QWORD *)(v1 + 800);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v1 + 808) - v92) >> 3) <= v63)
            goto LABEL_108;
          v94 = (uint64_t *)(v92 + 24 * v63);
          v93 = *v94;
          if (0xAAAAAAAAAAAAAAABLL * ((v94[1] - *v94) >> 3) <= v71)
            sub_1D450800C();
          sub_1D4507270((char **)(v93 + v70), *(unsigned int *)(v1 + 824));
          ++v71;
          v70 += 24;
          if (v102 == v70)
            goto LABEL_105;
        }
        v81 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_78:
        v84 = ((v81 - 1) >> 6) + 1;
        v85 = (unint64_t *)operator new(8 * v84);
        *v85 = 0;
        goto LABEL_79;
      }
LABEL_105:
      v3 = v63 + 1;
    }
    while (v3 != v97);
  }
}

void sub_1D4506E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 81) < 0)
    operator delete(*(void **)(v29 - 104));
  _Unwind_Resume(exception_object);
}

void sub_1D4506ED8(void ***a1, unint64_t a2)
{
  void **v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void **v16;
  void **v17;
  void **v18;
  __int128 v19;
  void **v20;
  void **v21;
  void **v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v21 = &v3[3 * a2];
      while (v4 != v21)
      {
        v4 -= 3;
        v22 = v4;
        sub_1D4507F88(&v22);
      }
      a1[1] = v21;
    }
  }
  else
  {
    v7 = (uint64_t)(a1 + 2);
    v8 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * (v8 - v4) >= v6)
    {
      bzero(v4, 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v4[3 * ((24 * v6 - 24) / 0x18) + 3];
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        sub_1D4507EC0();
      v9 = 0xAAAAAAAAAAAAAAABLL * (v8 - v3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v10;
      v12 = (char *)sub_1D4507ED4(v7, v11);
      v13 = &v12[24 * v5];
      v15 = &v12[24 * v14];
      bzero(v13, 24 * ((24 * v6 - 24) / 0x18) + 24);
      v16 = (void **)&v13[24 * ((24 * v6 - 24) / 0x18) + 24];
      v17 = *a1;
      v18 = a1[1];
      if (v18 == *a1)
      {
        *a1 = (void **)v13;
        a1[1] = v16;
        a1[2] = (void **)v15;
      }
      else
      {
        do
        {
          *((_QWORD *)v13 - 3) = 0;
          *((_QWORD *)v13 - 2) = 0;
          v13 -= 24;
          *((_QWORD *)v13 + 2) = 0;
          v19 = *(_OWORD *)(v18 - 3);
          v18 -= 3;
          *(_OWORD *)v13 = v19;
          *((_QWORD *)v13 + 2) = v18[2];
          *v18 = 0;
          v18[1] = 0;
          v18[2] = 0;
        }
        while (v18 != v17);
        v18 = *a1;
        v20 = a1[1];
        *a1 = (void **)v13;
        a1[1] = v16;
        a1[2] = (void **)v15;
        while (v20 != v18)
        {
          v20 -= 3;
          v22 = v20;
          sub_1D4507F88(&v22);
        }
      }
      if (v18)
        operator delete(v18);
    }
  }
}

void sub_1D45070A4(void ***a1, unint64_t a2)
{
  void **v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void **v16;
  void **v17;
  void **v18;
  __int128 v19;
  void **v20;
  void **v21;
  void **v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v21 = &v3[3 * a2];
      while (v4 != v21)
      {
        v4 -= 3;
        v22 = v4;
        sub_1D45015BC(&v22);
      }
      a1[1] = v21;
    }
  }
  else
  {
    v7 = (uint64_t)(a1 + 2);
    v8 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * (v8 - v4) >= v6)
    {
      bzero(v4, 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v4[3 * ((24 * v6 - 24) / 0x18) + 3];
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        sub_1D4507EC0();
      v9 = 0xAAAAAAAAAAAAAAABLL * (v8 - v3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v10;
      v12 = (char *)sub_1D4507ED4(v7, v11);
      v13 = &v12[24 * v5];
      v15 = &v12[24 * v14];
      bzero(v13, 24 * ((24 * v6 - 24) / 0x18) + 24);
      v16 = (void **)&v13[24 * ((24 * v6 - 24) / 0x18) + 24];
      v17 = *a1;
      v18 = a1[1];
      if (v18 == *a1)
      {
        *a1 = (void **)v13;
        a1[1] = v16;
        a1[2] = (void **)v15;
      }
      else
      {
        do
        {
          *((_QWORD *)v13 - 3) = 0;
          *((_QWORD *)v13 - 2) = 0;
          v13 -= 24;
          *((_QWORD *)v13 + 2) = 0;
          v19 = *(_OWORD *)(v18 - 3);
          v18 -= 3;
          *(_OWORD *)v13 = v19;
          *((_QWORD *)v13 + 2) = v18[2];
          *v18 = 0;
          v18[1] = 0;
          v18[2] = 0;
        }
        while (v18 != v17);
        v18 = *a1;
        v20 = a1[1];
        *a1 = (void **)v13;
        a1[1] = v16;
        a1[2] = (void **)v15;
        while (v20 != v18)
        {
          v20 -= 3;
          v22 = v20;
          sub_1D45015BC(&v22);
        }
      }
      if (v18)
        operator delete(v18);
    }
  }
}

void sub_1D4507270(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    sub_1D4507EC0();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_1D4508020(v10);
  v13 = *a1;
  v12 = a1[1];
  v14 = &v11[8 * v5];
  v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  v17 = &v14[8 * v6];
  if (v12 != v13)
  {
    do
    {
      v18 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *((_QWORD *)v14 - 1) = v18;
      v14 -= 8;
    }
    while (v12 != v13);
    v12 = *a1;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

void sub_1D4507378(uint64_t a1)
{
  sub_1D4506ED8((void ***)(a1 + 776), ((*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5));
  sub_1D45070A4((void ***)(a1 + 800), ((*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5));
}

uint64_t sub_1D45073B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  _QWORD *v22;
  float v23;
  float v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  double v38;
  int **v39;
  int *v40;
  void **v41;
  unint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  int *v54;
  char *v55;
  int *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  double v64;
  int **v65;
  int *v66;
  void **v67;
  unint64_t v68;
  _QWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  int *v77;
  char *v78;
  int *v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t result;
  const char *v87;
  _QWORD *v88;
  const char *v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  int v97;
  _QWORD v98[3];
  _QWORD v99[4];

  v5 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(v5 + 8);
  if (((v4 - v3) & 0x1FFFFFFFE0) == 0)
  {
LABEL_68:
    if (v4 == v3)
    {
      sub_1D44DA4C4(v99, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v98, "in");
      v90 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v90 = (_QWORD *)*v90;
    }
    else
    {
      v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      v83 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(a1 + 72) != v83)
      {
        v84 = *(unsigned int *)(*(_QWORD *)(v82 + 56) + 72);
        v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
        return DSPGraph::Box::propagateFlagsAndTimeStamp((DSPGraph::Box *)a1, v84, (const AudioTimeStamp *)(*(_QWORD *)(v85 + 56) + 8));
      }
      sub_1D44DA4C4(v99, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v98, "in");
      v90 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v90 = (_QWORD *)*v90;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v89, v90, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
    goto LABEL_99;
  }
  v6 = a2;
  v7 = 0;
  v8 = (v4 - v3) >> 5;
  v93 = a2;
LABEL_3:
  if (v8 > v7)
  {
    v9 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v3 + 32 * v7) + 40))(v3 + 32 * v7);
    v10 = *(_QWORD *)(a1 + 64);
    if (v7 >= (*(_QWORD *)(a1 + 72) - v10) >> 5)
    {
      sub_1D44DA4C4(v99, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v98, "in");
      v88 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v88 = (_QWORD *)*v88;
      goto LABEL_92;
    }
    v92 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 80);
    v11 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v10 + 32 * v7) + 40))(v10 + 32 * v7)
                    + 120);
    v94 = *(unsigned int *)(v11 + 28);
    if (!(_DWORD)v94)
      goto LABEL_67;
    v12 = 0;
    v91 = *(_DWORD *)(v11 + 12);
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 800);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 808) - v13) >> 3) <= v7)
        goto LABEL_75;
      v15 = (uint64_t *)(v13 + 24 * v7);
      v14 = *v15;
      if (0xAAAAAAAAAAAAAAABLL * ((v15[1] - *v15) >> 3) <= v12)
        goto LABEL_76;
      sub_1D4507270((char **)(v14 + 24 * v12), 0);
      v16 = *(_QWORD *)(a1 + 800);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 808) - v16) >> 3) <= v7)
LABEL_75:
        sub_1D450800C();
      v18 = (uint64_t *)(v16 + 24 * v7);
      v17 = *v18;
      if (0xAAAAAAAAAAAAAAABLL * ((v18[1] - *v18) >> 3) <= v12)
        goto LABEL_76;
      if (v93 > (uint64_t)(*(_QWORD *)(v17 + 24 * v12 + 16) - *(_QWORD *)(v17 + 24 * v12)) >> 3)
        __assert_rtn("process", "DSPGraph_SignalDetectorBox.cpp", 56, "mInputSignalRanges.at(busIdx).at(channelIdx).capacity() >= inNumFrames");
      if (!(_DWORD)v6)
        goto LABEL_66;
      v19 = 0;
      v20 = 0;
      v21 = (v91 & 0x20) != 0 ? 1 : v12;
      v22 = (_QWORD *)((v91 & 0x20) != 0 ? v92 + 16 * v12 + 16 : v92 + 16);
      v96 = v21;
      v97 = 0;
      v95 = v22;
      while (1)
      {
        v23 = *(float *)(a1 + 828);
        v24 = fabsf(*(float *)(*v22 + 4 * v19 * v21));
        v25 = v24 > v23;
        v26 = *(_QWORD *)(a1 + 776);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 784) - v26) >> 3) <= v7)
          sub_1D450800C();
        v28 = (uint64_t *)(v26 + 24 * v7);
        v27 = *v28;
        if (0xAAAAAAAAAAAAAAABLL * ((v28[1] - *v28) >> 3) <= v12)
          sub_1D450800C();
        if (*(_QWORD *)(v27 + 24 * v12 + 8) <= (unint64_t)v19)
          sub_1D450800C();
        v29 = *(_QWORD *)(v27 + 24 * v12);
        v30 = (unint64_t)v19 >> 6;
        v31 = 1 << v19;
        if (v24 > v23)
          break;
        *(_QWORD *)(v29 + 8 * v30) &= ~v31;
        v32 = v19 + 1;
        if (v20)
        {
          v33 = *(_QWORD *)(a1 + 64);
          if (v7 >= (*(_QWORD *)(a1 + 72) - v33) >> 5)
          {
            sub_1D44DA4C4(v99, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
            sub_1D44DA4C4(v98, "in");
            v88 = (_QWORD *)(a1 + 32);
            if (*(char *)(a1 + 55) < 0)
              v88 = (_QWORD *)*v88;
            goto LABEL_92;
          }
          v34 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v33 + 32 * v7) + 40))(v33 + 32 * v7);
          v35 = *(_QWORD *)(a1 + 800);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 808) - v35) >> 3) <= v7)
            goto LABEL_75;
          v37 = (uint64_t *)(v35 + 24 * v7);
          v36 = *v37;
          if (0xAAAAAAAAAAAAAAABLL * ((v37[1] - *v37) >> 3) <= v12)
            goto LABEL_76;
          v38 = *(double *)(*(_QWORD *)(v34 + 56) + 8) + (double)v19;
          v39 = (int **)(v36 + 24 * v12);
          v41 = (void **)(v39 + 1);
          v40 = v39[1];
          v43 = v39 + 2;
          v42 = (unint64_t)v39[2];
          if ((unint64_t)v40 >= v42)
          {
            v47 = v6;
            v48 = ((char *)v40 - (char *)*v39) >> 3;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 61)
              goto LABEL_83;
            v50 = v42 - (_QWORD)*v39;
            if (v50 >> 2 > v49)
              v49 = v50 >> 2;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            v53 = (char *)sub_1D4508020(v51);
            v54 = (int *)&v53[8 * v48];
            *v54 = v97;
            v54[1] = (int)v38;
            v55 = (char *)*v41;
            v56 = *v39;
            v57 = v54;
            v6 = v47;
            if (*v41 != *v39)
            {
              do
              {
                v58 = *((_QWORD *)v55 - 1);
                v55 -= 8;
                *((_QWORD *)v57 - 1) = v58;
                v57 -= 2;
              }
              while (v55 != (char *)v56);
              v55 = (char *)*v39;
            }
            *v39 = v57;
            v44 = v54 + 2;
            *v41 = v54 + 2;
            *v43 = &v53[8 * v52];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v97;
            v40[1] = (int)v38;
            v44 = v40 + 2;
          }
          v21 = v96;
          v22 = v95;
          *v41 = v44;
        }
LABEL_47:
        v19 = v32;
        v20 = v25;
        if (v32 >= v6)
          goto LABEL_66;
      }
      *(_QWORD *)(v29 + 8 * v30) |= v31;
      v32 = v19 + 1;
      if (!v20)
        break;
      if (v32 != (_DWORD)v6)
        goto LABEL_47;
      v59 = *(_QWORD *)(a1 + 64);
      if (v7 >= (*(_QWORD *)(a1 + 72) - v59) >> 5)
      {
        sub_1D44DA4C4(v99, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v98, "in");
        v88 = (_QWORD *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0)
          v88 = (_QWORD *)*v88;
        goto LABEL_92;
      }
      v60 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v59 + 32 * v7) + 40))(v59 + 32 * v7);
      v61 = *(_QWORD *)(a1 + 800);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 808) - v61) >> 3) <= v7)
        goto LABEL_75;
      v63 = (uint64_t *)(v61 + 24 * v7);
      v62 = *v63;
      if (0xAAAAAAAAAAAAAAABLL * ((v63[1] - *v63) >> 3) <= v12)
LABEL_76:
        sub_1D450800C();
      v64 = *(double *)(*(_QWORD *)(v60 + 56) + 8) + (double)v19 + 1.0;
      v65 = (int **)(v62 + 24 * v12);
      v67 = (void **)(v65 + 1);
      v66 = v65[1];
      v69 = v65 + 2;
      v68 = (unint64_t)v65[2];
      if ((unint64_t)v66 >= v68)
      {
        v71 = ((char *)v66 - (char *)*v65) >> 3;
        v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 61)
LABEL_83:
          sub_1D4507EC0();
        v73 = v68 - (_QWORD)*v65;
        if (v73 >> 2 > v72)
          v72 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        v76 = (char *)sub_1D4508020(v74);
        v77 = (int *)&v76[8 * v71];
        *v77 = v97;
        v77[1] = (int)v64;
        v78 = (char *)*v67;
        v79 = *v65;
        v80 = v77;
        if (*v67 != *v65)
        {
          do
          {
            v81 = *((_QWORD *)v78 - 1);
            v78 -= 8;
            *((_QWORD *)v80 - 1) = v81;
            v80 -= 2;
          }
          while (v78 != (char *)v79);
          v78 = (char *)*v65;
        }
        *v65 = v80;
        v70 = v77 + 2;
        *v67 = v77 + 2;
        *v69 = &v76[8 * v75];
        if (v78)
          operator delete(v78);
      }
      else
      {
        *v66 = v97;
        v66[1] = (int)v64;
        v70 = v66 + 2;
      }
      *v67 = v70;
LABEL_66:
      if (++v12 == v94)
      {
LABEL_67:
        ++v7;
        v3 = *(_QWORD *)(a1 + 64);
        v4 = *(_QWORD *)(a1 + 72);
        v8 = (v4 - v3) >> 5;
        if (v7 >= v8)
          goto LABEL_68;
        goto LABEL_3;
      }
    }
    v45 = *(_QWORD *)(a1 + 64);
    if (v7 >= (*(_QWORD *)(a1 + 72) - v45) >> 5)
    {
      sub_1D44DA4C4(v99, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      sub_1D44DA4C4(v98, "in");
      v88 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v88 = (_QWORD *)*v88;
      goto LABEL_92;
    }
    v46 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v45 + 32 * v7) + 40))(v45 + 32 * v7);
    v22 = v95;
    v21 = v96;
    v97 = (int)(*(double *)(*(_QWORD *)(v46 + 56) + 8) + (double)v19);
    goto LABEL_47;
  }
  sub_1D44DA4C4(v99, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  sub_1D44DA4C4(v98, "in");
  v88 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v88 = (_QWORD *)*v88;
LABEL_92:
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v87, v88, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, v7);
  result = DSPGraph::ThrowException();
LABEL_99:
  __break(1u);
  return result;
}

void sub_1D4507CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void sub_1D4507D78(void **a1)
{
  sub_1D4508400(a1);
  JUMPOUT(0x1D825DA8CLL);
}

const char *sub_1D4507D9C()
{
  return "SignalDetectorBox";
}

uint64_t sub_1D4507DA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 824) = a2;
  return result;
}

double sub_1D4507DB0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 16) = 0;
  result = *(double *)"xfuadgisxoba";
  *(_OWORD *)a1 = *(_OWORD *)"xfuadgisxoba";
  return result;
}

uint64_t sub_1D4507DC8()
{
  return 0;
}

_QWORD *sub_1D4507DD0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4507E70(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D4507E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D4507F18(&a9);
  _Unwind_Resume(a1);
}

char *sub_1D4507E70(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1D4507EC0();
  result = (char *)sub_1D4507ED4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_1D4507EC0()
{
  sub_1D44DA588("vector");
}

void *sub_1D4507ED4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1D44DF758();
  return operator new(24 * a2);
}

void sub_1D4507F18(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1D4507F88(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D4507F88(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D4507FC8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D4507FC8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    v5 = *(void **)(i - 24);
    v4 = v5;
    if (v5)
      operator delete(v4);
  }
  a1[1] = v2;
}

void sub_1D450800C()
{
  sub_1D44E1464("vector");
}

void *sub_1D4508020(unint64_t a1)
{
  if (a1 >> 61)
    sub_1D44DF758();
  return operator new(8 * a1);
}

_QWORD *sub_1D4508054(_QWORD *result, uint64_t ***a2, uint64_t ***a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1D4507E70(result, a4);
    result = sub_1D45080D8((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D45080B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D450154C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D45080D8(uint64_t a1, uint64_t ***a2, uint64_t ***a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t ***v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1D4508194(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1D4508384((uint64_t)v8);
  return v4;
}

void sub_1D4508180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4508384((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4508194(_QWORD *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1D4507E70(result, a4);
    result = sub_1D4508218((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D45081F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D45015BC(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4508218(uint64_t a1, uint64_t **a2, uint64_t **a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  _QWORD *v18;
  _QWORD *v19;

  v4 = a4;
  v18 = a4;
  v19 = a4;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  v17 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v7 = *v6;
      v8 = v6[1];
      v9 = (char *)v8 - (char *)*v6;
      if (v8 != *v6)
      {
        if (v9 < 0)
          sub_1D4507EC0();
        v10 = sub_1D4508020(v9 >> 3);
        v11 = 0;
        *v4 = v10;
        v4[1] = v10;
        v4[2] = &v10[v12];
        v13 = v10;
        do
        {
          v14 = *v7++;
          *v13++ = v14;
          ++v11;
        }
        while (v7 != v8);
        v4[1] = &v10[v11];
        v4 = v19;
      }
      v6 += 3;
      v4 += 3;
      v19 = v4;
    }
    while (v6 != a3);
  }
  v17 = 1;
  sub_1D4508320((uint64_t)v16);
  return v4;
}

void sub_1D45082F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1D4508320((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4508320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

uint64_t sub_1D4508384(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D45083B8(a1);
  return a1;
}

void sub_1D45083B8(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    sub_1D45015BC(&v3);
  }
}

void sub_1D4508400(void **a1)
{
  void **v2;

  *a1 = &off_1E97AF818;
  v2 = a1 + 100;
  sub_1D450154C(&v2);
  v2 = a1 + 97;
  sub_1D4507F18(&v2);
  DSPGraph::Box::~Box((DSPGraph::Box *)a1);
}

void sub_1D4508458(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t *v17;
  float v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  char *v32;
  const char *v33;
  _QWORD *v34;
  const char *v35;
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD v39[3];

  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x20 || ((*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) & 0x1FFFFFFFE0) != 0x20)
  {
    sub_1D44DA4C4(v39, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_LogMelTransformBox.cpp");
    sub_1D44DA4C4(v38, "initialize");
    sub_1D44DA4C4(v37, "only supports 1 bus in 1 bus out");
    DSPGraph::ThrowException();
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v3 == v2)
  {
    sub_1D44DA4C4(v39, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v38, "in");
    v34 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v34 = (_QWORD *)*v34;
    goto LABEL_49;
  }
  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
  if (*(_DWORD *)(v4 + 28) != 1)
  {
    sub_1D44DA4C4(v39, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_LogMelTransformBox.cpp");
    sub_1D44DA4C4(v38, "initialize");
    sub_1D44DA4C4(v37, "input must be single channel");
    DSPGraph::ThrowException();
    goto LABEL_62;
  }
  v5 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v5)
  {
    sub_1D44DA4C4(v39, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v38, "out");
    v36 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v36 = (_QWORD *)*v36;
    goto LABEL_61;
  }
  v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120);
  if (*(_DWORD *)(v6 + 28) != 1)
  {
    sub_1D44DA4C4(v39, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_LogMelTransformBox.cpp");
    sub_1D44DA4C4(v38, "initialize");
    sub_1D44DA4C4(v37, "output must be single channel");
    DSPGraph::ThrowException();
    goto LABEL_62;
  }
  if (*(double *)v4 != *(double *)v6)
  {
    sub_1D44DA4C4(v39, "/Library/Caches/com.apple.xbs/Sources/Listen/Framework/Internal/Core/DSPGraph/Boxes/DSPGraph_LogMelTransformBox.cpp");
    sub_1D44DA4C4(v38, "initialize");
    sub_1D44DA4C4(v37, "input and output sample rates must match");
    DSPGraph::ThrowException();
    goto LABEL_62;
  }
  if (*(_DWORD *)(a1 + 808) <= 1u)
    __assert_rtn("initialize", "DSPGraph_LogMelTransformBox.cpp", 46, "mMaxFrames > 1");
  v7 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v7)
  {
    sub_1D44DA4C4(v39, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v38, "in");
    v34 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v34 = (_QWORD *)*v34;
LABEL_49:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v33, v34, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException();
    goto LABEL_62;
  }
  v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v7 + 40))(v7, *(double *)v4) + 120);
  v9 = *(_DWORD *)(v8 + 8);
  v10 = v9 == 1718773105 || v9 == 1819304813;
  if (v10 || !*(_DWORD *)(v8 + 16))
    v11 = *(_DWORD *)(v4 + 24) * *(_DWORD *)(a1 + 808);
  else
    v11 = *(_DWORD *)(v4 + 16);
  *(_DWORD *)(a1 + 812) = v11;
  v12 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v12)
  {
    sub_1D44DA4C4(v39, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v38, "out");
    v36 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v36 = (_QWORD *)*v36;
LABEL_61:
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v35, v36, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException();
    goto LABEL_62;
  }
  v13 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 120);
  v14 = *(_DWORD *)(v13 + 8);
  v15 = v14 == 1718773105 || v14 == 1819304813;
  if (v15 || !*(_DWORD *)(v13 + 16))
    v16 = *(_DWORD *)(v6 + 24) * *(_DWORD *)(a1 + 808);
  else
    v16 = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(a1 + 816) = v16;
  *(_DWORD *)(a1 + 820) = *(_DWORD *)(a1 + 812) >> 2;
  *(_DWORD *)(a1 + 824) = v16 >> 2;
  v17 = (uint64_t *)operator new();
  v18 = *(double *)v4;
  sub_1D44D9CEC((uint64_t)v17, *(_DWORD *)(a1 + 820), v18);
  sub_1D4508B1C((uint64_t **)(a1 + 776), v17);
  v19 = *(unsigned int *)(a1 + 820);
  v20 = *(_BYTE **)(a1 + 792);
  v21 = *(char **)(a1 + 784);
  v22 = (v20 - v21) >> 2;
  if (v19 <= v22)
  {
    if (v19 >= v22)
      return;
    v32 = &v21[4 * v19];
    goto LABEL_41;
  }
  v23 = v19 - v22;
  v24 = *(_QWORD *)(a1 + 800);
  if (v19 - v22 <= (v24 - (uint64_t)v20) >> 2)
  {
    bzero(*(void **)(a1 + 792), 4 * v23);
    v32 = &v20[4 * v23];
LABEL_41:
    *(_QWORD *)(a1 + 792) = v32;
    return;
  }
  v25 = v24 - (_QWORD)v21;
  if (v25 >> 1 > v19)
    v19 = v25 >> 1;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
    v26 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v26 = v19;
  if (v26 >> 62)
LABEL_63:
    sub_1D44DF758();
  v27 = (char *)operator new(4 * v26);
  v28 = &v27[4 * v22];
  v29 = &v27[4 * v26];
  bzero(v28, 4 * v23);
  v30 = &v28[4 * v23];
  while (v20 != v21)
  {
    v31 = *((_DWORD *)v20 - 1);
    v20 -= 4;
    *((_DWORD *)v28 - 1) = v31;
    v28 -= 4;
  }
  *(_QWORD *)(a1 + 784) = v28;
  *(_QWORD *)(a1 + 792) = v30;
  *(_QWORD *)(a1 + 800) = v29;
  if (v21)
    operator delete(v21);
}

void sub_1D4508A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1D4508AF4(uint64_t **a1)
{
  DSPGraph::Box::uninitialize((DSPGraph::Box *)a1);
  return sub_1D4508B1C(a1 + 97, 0);
}

uint64_t *sub_1D4508B1C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1D44D9D80(result);
    JUMPOUT(0x1D825DA8CLL);
  }
  return result;
}

uint64_t sub_1D4508B58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  const char *v21;
  _QWORD *v22;
  const char *v23;
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD v26[3];

  v3 = a1 + 64;
  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v3 + 8) == v2)
  {
    sub_1D44DA4C4(v26, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v25, "in");
    v22 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v22 = (_QWORD *)*v22;
LABEL_28:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v21, v22, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
    goto LABEL_29;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v5)
  {
    sub_1D44DA4C4(v26, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v25, "out");
    v24 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v24 = (_QWORD *)*v24;
  }
  else
  {
    v6 = *(const void **)(*(_QWORD *)(*(_QWORD *)(v4 + 56) + 80) + 16);
    v7 = *(void **)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 56) + 80)
                  + 16);
    v8 = *(unsigned int *)(a1 + 820);
    if ((_DWORD)v8)
      memmove(*(void **)(a1 + 784), v6, 4 * v8);
    sub_1D44F33DC(*(_QWORD *)(a1 + 784), *(_QWORD *)(a1 + 784), *(_DWORD *)(*(_QWORD *)(a1 + 776) + 8), **(_QWORD **)(a1 + 776));
    v9 = *(unsigned int *)(a1 + 824);
    if ((_DWORD)v9)
      memmove(v7, *(const void **)(a1 + 784), 4 * v9);
    v10 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) != v10)
    {
      v11 = *(unsigned int **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 56) + 80);
      v12 = *v11;
      if ((_DWORD)v12)
      {
        v13 = *(_DWORD *)(a1 + 816);
        v14 = v11 + 3;
        do
        {
          *v14 = v13;
          v14 += 4;
          --v12;
        }
        while (v12);
      }
      v15 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(a1 + 72) == v15)
      {
        sub_1D44DA4C4(v26, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v25, "in");
        v22 = (_QWORD *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0)
          v22 = (_QWORD *)*v22;
      }
      else
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
        v17 = *(_QWORD *)(a1 + 64);
        if (*(_QWORD *)(a1 + 72) != v17)
        {
          v18 = *(unsigned int *)(*(_QWORD *)(v16 + 56) + 72);
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
          return DSPGraph::Box::propagateFlagsAndTimeStamp((DSPGraph::Box *)a1, v18, (const AudioTimeStamp *)(*(_QWORD *)(v19 + 56) + 8));
        }
        sub_1D44DA4C4(v26, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        sub_1D44DA4C4(v25, "in");
        v22 = (_QWORD *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0)
          v22 = (_QWORD *)*v22;
      }
      goto LABEL_28;
    }
    sub_1D44DA4C4(v26, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    sub_1D44DA4C4(v25, "out");
    v24 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v24 = (_QWORD *)*v24;
  }
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v23, v24, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
LABEL_29:
  __break(1u);
  return result;
}

void sub_1D4508EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4508F60()
{
  return 0;
}

void sub_1D4508F6C(uint64_t a1)
{
  sub_1D4508FC4(a1);
  JUMPOUT(0x1D825DA8CLL);
}

const char *sub_1D4508F90()
{
  return "LogMelTransformBox";
}

uint64_t sub_1D4508F9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 808) = a2;
  return result;
}

uint64_t sub_1D4508FA4()
{
  return 1;
}

double sub_1D4508FAC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 16) = 0;
  result = *(double *)"xfuaftmlxoba";
  *(_OWORD *)a1 = *(_OWORD *)"xfuaftmlxoba";
  return result;
}

void sub_1D4508FC4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E97AFAA8;
  v2 = *(void **)(a1 + 784);
  if (v2)
  {
    *(_QWORD *)(a1 + 792) = v2;
    operator delete(v2);
  }
  sub_1D4508B1C((uint64_t **)(a1 + 776), 0);
  DSPGraph::Box::~Box((DSPGraph::Box *)a1);
}

uint64_t sub_1D450900C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 56);
  *a2 = *(_QWORD *)(result + 48);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1D4509030()
{
  return 3;
}

double sub_1D4509038@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1D44EEAE8((DSPGraph::Graph **)(a1 + 48), a2).n128_u64[0];
  return result;
}

uint64_t sub_1D4509040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D44EEC80((DSPGraph::Graph **)(a1 + 48), a2);
}

void sub_1D450904C(_QWORD *a1)
{
  sub_1D4509070(a1);
  JUMPOUT(0x1D825DA8CLL);
}

_QWORD *sub_1D4509070(_QWORD *a1)
{
  *a1 = off_1E97AF188;
  sub_1D44DAAE4((uint64_t)(a1 + 8));
  sub_1D44DAAE4((uint64_t)(a1 + 6));
  *a1 = &unk_1E97AF1C8;
  sub_1D44DB220(a1 + 2);
  return a1;
}

void sub_1D45096D8(uint64_t a1, void *a2)
{
  SNSoundPrint100kSmokeAlarmModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNSoundPrint100kSmokeAlarmModel initWithMLModel:]([SNSoundPrint100kSmokeAlarmModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D4509940(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNSoundPrint100kSmokeAlarmModelOutput *v6;
  void *v7;
  void *v8;
  SNSoundPrint100kSmokeAlarmModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNSoundPrint100kSmokeAlarmModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNSoundPrint100kSmokeAlarmModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("Sigmoid"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNSoundPrint100kSmokeAlarmModelOutput initWithSigmoid:](v6, "initWithSigmoid:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNSoundPrint100kSmokeAlarmModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D4509AE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNSoundPrint100kSmokeAlarmModelOutput *v6;
  void *v7;
  void *v8;
  SNSoundPrint100kSmokeAlarmModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNSoundPrint100kSmokeAlarmModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNSoundPrint100kSmokeAlarmModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("Sigmoid"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNSoundPrint100kSmokeAlarmModelOutput initWithSigmoid:](v6, "initWithSigmoid:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNSoundPrint100kSmokeAlarmModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450A3E8(uint64_t a1, void *a2)
{
  SNVGGishLaughterModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNVGGishLaughterModel initWithMLModel:]([SNVGGishLaughterModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D450A650(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishLaughterModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishLaughterModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishLaughterModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishLaughterModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishLaughterModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishLaughterModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450A7F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishLaughterModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishLaughterModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishLaughterModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishLaughterModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishLaughterModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishLaughterModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450B0F8(uint64_t a1, void *a2)
{
  SNVGGishApplauseModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNVGGishApplauseModel initWithMLModel:]([SNVGGishApplauseModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D450B360(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishApplauseModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishApplauseModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishApplauseModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishApplauseModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishApplauseModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishApplauseModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450B500(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishApplauseModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishApplauseModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishApplauseModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishApplauseModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishApplauseModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishApplauseModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450BE08(uint64_t a1, void *a2)
{
  SNVGGishEmbeddingModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNVGGishEmbeddingModel initWithMLModel:]([SNVGGishEmbeddingModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D450C070(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishEmbeddingModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishEmbeddingModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishEmbeddingModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishEmbeddingModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishEmbeddingModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishEmbeddingModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450C210(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishEmbeddingModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishEmbeddingModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishEmbeddingModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishEmbeddingModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishEmbeddingModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishEmbeddingModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450CB18(uint64_t a1, void *a2)
{
  SNSoundPrintAEmbeddingModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNSoundPrintAEmbeddingModel initWithMLModel:]([SNSoundPrintAEmbeddingModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D450CD80(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNSoundPrintAEmbeddingModelOutput *v6;
  void *v7;
  void *v8;
  SNSoundPrintAEmbeddingModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNSoundPrintAEmbeddingModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNSoundPrintAEmbeddingModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("637"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNSoundPrintAEmbeddingModelOutput initWith_637:](v6, "initWith_637:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNSoundPrintAEmbeddingModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450CF20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNSoundPrintAEmbeddingModelOutput *v6;
  void *v7;
  void *v8;
  SNSoundPrintAEmbeddingModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNSoundPrintAEmbeddingModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNSoundPrintAEmbeddingModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("637"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNSoundPrintAEmbeddingModelOutput initWith_637:](v6, "initWith_637:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNSoundPrintAEmbeddingModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450DBE4(uint64_t a1, void *a2)
{
  SNSoundPrintASmokeAlarmModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNSoundPrintASmokeAlarmModel initWithMLModel:]([SNSoundPrintASmokeAlarmModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D450DF38(uint64_t a1, void *a2, void *a3)
{
  SNSoundPrintASmokeAlarmModelOutput *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  SNSoundPrintASmokeAlarmModelOutput *v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, SNSoundPrintASmokeAlarmModelOutput *);
  uint64_t v18;
  void *v19;
  id v20;
  id v21;

  v21 = a2;
  if (v21)
  {
    v20 = a3;
    v5 = [SNSoundPrintASmokeAlarmModelOutput alloc];
    objc_msgSend(v21, "featureValueForName:", CFSTR("input_1"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "multiArrayValue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "featureValueForName:", CFSTR("Confidence"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "featureValueForName:", CFSTR("Detected"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "multiArrayValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "featureValueForName:", CFSTR("thresholdedHistoryOut"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "multiArrayValue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "featureValueForName:", CFSTR("detectedHistoryOut"));
    v18 = a1;
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "multiArrayValue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[SNSoundPrintASmokeAlarmModelOutput initWithInput_1:Confidence:Detected:thresholdedHistoryOut:detectedHistoryOut:](v5, "initWithInput_1:Confidence:Detected:thresholdedHistoryOut:detectedHistoryOut:", v6, v8, v10, v12, v14);

    (*(void (**)(void))(*(_QWORD *)(v18 + 32) + 16))();
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(void (**)(uint64_t, _QWORD, SNSoundPrintASmokeAlarmModelOutput *))(v16 + 16);
    v15 = a3;
    v17(v16, 0, v15);
  }

}

void sub_1D450E1B8(uint64_t a1, void *a2, void *a3)
{
  SNSoundPrintASmokeAlarmModelOutput *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  SNSoundPrintASmokeAlarmModelOutput *v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, SNSoundPrintASmokeAlarmModelOutput *);
  uint64_t v18;
  void *v19;
  id v20;
  id v21;

  v21 = a2;
  if (v21)
  {
    v20 = a3;
    v5 = [SNSoundPrintASmokeAlarmModelOutput alloc];
    objc_msgSend(v21, "featureValueForName:", CFSTR("input_1"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "multiArrayValue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "featureValueForName:", CFSTR("Confidence"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "featureValueForName:", CFSTR("Detected"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "multiArrayValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "featureValueForName:", CFSTR("thresholdedHistoryOut"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "multiArrayValue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "featureValueForName:", CFSTR("detectedHistoryOut"));
    v18 = a1;
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "multiArrayValue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[SNSoundPrintASmokeAlarmModelOutput initWithInput_1:Confidence:Detected:thresholdedHistoryOut:detectedHistoryOut:](v5, "initWithInput_1:Confidence:Detected:thresholdedHistoryOut:detectedHistoryOut:", v6, v8, v10, v12, v14);

    (*(void (**)(void))(*(_QWORD *)(v18 + 32) + 16))();
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(void (**)(uint64_t, _QWORD, SNSoundPrintASmokeAlarmModelOutput *))(v16 + 16);
    v15 = a3;
    v17(v16, 0, v15);
  }

}

void sub_1D450ECC8(uint64_t a1, void *a2)
{
  SNLanguageAlignedAudioEncoder *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNLanguageAlignedAudioEncoder initWithMLModel:]([SNLanguageAlignedAudioEncoder alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D450EF30(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNLanguageAlignedAudioEncoderOutput *v6;
  void *v7;
  void *v8;
  SNLanguageAlignedAudioEncoderOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNLanguageAlignedAudioEncoderOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNLanguageAlignedAudioEncoderOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("embedding"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNLanguageAlignedAudioEncoderOutput initWithEmbedding:](v6, "initWithEmbedding:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNLanguageAlignedAudioEncoderOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450F0D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNLanguageAlignedAudioEncoderOutput *v6;
  void *v7;
  void *v8;
  SNLanguageAlignedAudioEncoderOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNLanguageAlignedAudioEncoderOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNLanguageAlignedAudioEncoderOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("embedding"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNLanguageAlignedAudioEncoderOutput initWithEmbedding:](v6, "initWithEmbedding:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNLanguageAlignedAudioEncoderOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D450FA7C(uint64_t a1, void *a2)
{
  SNSoundClassifierVersion1Model *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNSoundClassifierVersion1Model initWithMLModel:]([SNSoundClassifierVersion1Model alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D450FD1C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNSoundClassifierVersion1ModelOutput *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SNSoundClassifierVersion1ModelOutput *v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, SNSoundClassifierVersion1ModelOutput *);
  id v14;

  v14 = a2;
  if (v14)
  {
    v5 = a3;
    v6 = [SNSoundClassifierVersion1ModelOutput alloc];
    objc_msgSend(v14, "featureValueForName:", CFSTR("9"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "dictionaryValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "featureValueForName:", CFSTR("classLabel"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[SNSoundClassifierVersion1ModelOutput initWith_9:classLabel:](v6, "initWith_9:classLabel:", v8, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void (**)(uint64_t, _QWORD, SNSoundClassifierVersion1ModelOutput *))(v12 + 16);
    v11 = a3;
    v13(v12, 0, v11);
  }

}

void sub_1D450FEF4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNSoundClassifierVersion1ModelOutput *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SNSoundClassifierVersion1ModelOutput *v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, SNSoundClassifierVersion1ModelOutput *);
  id v14;

  v14 = a2;
  if (v14)
  {
    v5 = a3;
    v6 = [SNSoundClassifierVersion1ModelOutput alloc];
    objc_msgSend(v14, "featureValueForName:", CFSTR("9"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "dictionaryValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "featureValueForName:", CFSTR("classLabel"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[SNSoundClassifierVersion1ModelOutput initWith_9:classLabel:](v6, "initWith_9:classLabel:", v8, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void (**)(uint64_t, _QWORD, SNSoundClassifierVersion1ModelOutput *))(v12 + 16);
    v11 = a3;
    v13(v12, 0, v11);
  }

}

void sub_1D451086C(uint64_t a1, void *a2)
{
  SNVGGishBabbleModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNVGGishBabbleModel initWithMLModel:]([SNVGGishBabbleModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D4510AD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishBabbleModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishBabbleModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishBabbleModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishBabbleModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishBabbleModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishBabbleModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D4510C74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishBabbleModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishBabbleModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishBabbleModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishBabbleModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishBabbleModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishBabbleModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D4511844(uint64_t a1, void *a2)
{
  SNSoundPrintAShoutingModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNSoundPrintAShoutingModel initWithMLModel:]([SNSoundPrintAShoutingModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D4511B54(uint64_t a1, void *a2, void *a3)
{
  SNSoundPrintAShoutingModelOutput *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  SNSoundPrintAShoutingModelOutput *v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, SNSoundPrintAShoutingModelOutput *);
  id v17;
  id v18;

  v18 = a2;
  if (v18)
  {
    v17 = a3;
    v5 = [SNSoundPrintAShoutingModelOutput alloc];
    objc_msgSend(v18, "featureValueForName:", CFSTR("input_1"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "multiArrayValue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Confidence"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "multiArrayValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Detected"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "multiArrayValue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("detectedHistoryOut"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "multiArrayValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[SNSoundPrintAShoutingModelOutput initWithInput_1:Confidence:Detected:detectedHistoryOut:](v5, "initWithInput_1:Confidence:Detected:detectedHistoryOut:", v7, v9, v11, v13);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void (**)(uint64_t, _QWORD, SNSoundPrintAShoutingModelOutput *))(v15 + 16);
    v14 = a3;
    v16(v15, 0, v14);
  }

}

void sub_1D4511D98(uint64_t a1, void *a2, void *a3)
{
  SNSoundPrintAShoutingModelOutput *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  SNSoundPrintAShoutingModelOutput *v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, SNSoundPrintAShoutingModelOutput *);
  id v17;
  id v18;

  v18 = a2;
  if (v18)
  {
    v17 = a3;
    v5 = [SNSoundPrintAShoutingModelOutput alloc];
    objc_msgSend(v18, "featureValueForName:", CFSTR("input_1"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "multiArrayValue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Confidence"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "multiArrayValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Detected"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "multiArrayValue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("detectedHistoryOut"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "multiArrayValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[SNSoundPrintAShoutingModelOutput initWithInput_1:Confidence:Detected:detectedHistoryOut:](v5, "initWithInput_1:Confidence:Detected:detectedHistoryOut:", v7, v9, v11, v13);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void (**)(uint64_t, _QWORD, SNSoundPrintAShoutingModelOutput *))(v15 + 16);
    v14 = a3;
    v16(v15, 0, v14);
  }

}

void sub_1D45128A0(uint64_t a1, void *a2)
{
  SNLanguageAlignedAVFuserModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNLanguageAlignedAVFuserModel initWithMLModel:]([SNLanguageAlignedAVFuserModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D4512B08(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNLanguageAlignedAVFuserModelOutput *v6;
  void *v7;
  void *v8;
  SNLanguageAlignedAVFuserModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNLanguageAlignedAVFuserModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNLanguageAlignedAVFuserModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("fused_embedding"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNLanguageAlignedAVFuserModelOutput initWithFused_embedding:](v6, "initWithFused_embedding:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNLanguageAlignedAVFuserModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D4512CA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNLanguageAlignedAVFuserModelOutput *v6;
  void *v7;
  void *v8;
  SNLanguageAlignedAVFuserModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNLanguageAlignedAVFuserModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNLanguageAlignedAVFuserModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("fused_embedding"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNLanguageAlignedAVFuserModelOutput initWithFused_embedding:](v6, "initWithFused_embedding:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNLanguageAlignedAVFuserModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D4513894(uint64_t a1, void *a2)
{
  SNSoundPrintASpeechModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNSoundPrintASpeechModel initWithMLModel:]([SNSoundPrintASpeechModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D4513BA4(uint64_t a1, void *a2, void *a3)
{
  SNSoundPrintASpeechModelOutput *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  SNSoundPrintASpeechModelOutput *v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, SNSoundPrintASpeechModelOutput *);
  id v17;
  id v18;

  v18 = a2;
  if (v18)
  {
    v17 = a3;
    v5 = [SNSoundPrintASpeechModelOutput alloc];
    objc_msgSend(v18, "featureValueForName:", CFSTR("input_1"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "multiArrayValue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Confidence"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "multiArrayValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Detected"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "multiArrayValue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("detectedHistoryOut"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "multiArrayValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[SNSoundPrintASpeechModelOutput initWithInput_1:Confidence:Detected:detectedHistoryOut:](v5, "initWithInput_1:Confidence:Detected:detectedHistoryOut:", v7, v9, v11, v13);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void (**)(uint64_t, _QWORD, SNSoundPrintASpeechModelOutput *))(v15 + 16);
    v14 = a3;
    v16(v15, 0, v14);
  }

}

void sub_1D4513DE8(uint64_t a1, void *a2, void *a3)
{
  SNSoundPrintASpeechModelOutput *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  SNSoundPrintASpeechModelOutput *v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, SNSoundPrintASpeechModelOutput *);
  id v17;
  id v18;

  v18 = a2;
  if (v18)
  {
    v17 = a3;
    v5 = [SNSoundPrintASpeechModelOutput alloc];
    objc_msgSend(v18, "featureValueForName:", CFSTR("input_1"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "multiArrayValue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Confidence"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "multiArrayValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Detected"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "multiArrayValue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("detectedHistoryOut"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "multiArrayValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[SNSoundPrintASpeechModelOutput initWithInput_1:Confidence:Detected:detectedHistoryOut:](v5, "initWithInput_1:Confidence:Detected:detectedHistoryOut:", v7, v9, v11, v13);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void (**)(uint64_t, _QWORD, SNSoundPrintASpeechModelOutput *))(v15 + 16);
    v14 = a3;
    v16(v15, 0, v14);
  }

}

void sub_1D4514864(uint64_t a1, void *a2)
{
  SNVGGishSpeechModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNVGGishSpeechModel initWithMLModel:]([SNVGGishSpeechModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D4514ACC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishSpeechModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishSpeechModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishSpeechModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishSpeechModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishSpeechModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishSpeechModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D4514C6C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishSpeechModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishSpeechModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishSpeechModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishSpeechModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishSpeechModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishSpeechModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D451583C(uint64_t a1, void *a2)
{
  SNSoundPrintALaughterModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNSoundPrintALaughterModel initWithMLModel:]([SNSoundPrintALaughterModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D4515B4C(uint64_t a1, void *a2, void *a3)
{
  SNSoundPrintALaughterModelOutput *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  SNSoundPrintALaughterModelOutput *v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, SNSoundPrintALaughterModelOutput *);
  id v17;
  id v18;

  v18 = a2;
  if (v18)
  {
    v17 = a3;
    v5 = [SNSoundPrintALaughterModelOutput alloc];
    objc_msgSend(v18, "featureValueForName:", CFSTR("input_1"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "multiArrayValue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Confidence"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "multiArrayValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Detected"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "multiArrayValue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("detectedHistoryOut"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "multiArrayValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[SNSoundPrintALaughterModelOutput initWithInput_1:Confidence:Detected:detectedHistoryOut:](v5, "initWithInput_1:Confidence:Detected:detectedHistoryOut:", v7, v9, v11, v13);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void (**)(uint64_t, _QWORD, SNSoundPrintALaughterModelOutput *))(v15 + 16);
    v14 = a3;
    v16(v15, 0, v14);
  }

}

void sub_1D4515D90(uint64_t a1, void *a2, void *a3)
{
  SNSoundPrintALaughterModelOutput *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  SNSoundPrintALaughterModelOutput *v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, SNSoundPrintALaughterModelOutput *);
  id v17;
  id v18;

  v18 = a2;
  if (v18)
  {
    v17 = a3;
    v5 = [SNSoundPrintALaughterModelOutput alloc];
    objc_msgSend(v18, "featureValueForName:", CFSTR("input_1"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "multiArrayValue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Confidence"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "multiArrayValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("Detected"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "multiArrayValue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "featureValueForName:", CFSTR("detectedHistoryOut"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "multiArrayValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[SNSoundPrintALaughterModelOutput initWithInput_1:Confidence:Detected:detectedHistoryOut:](v5, "initWithInput_1:Confidence:Detected:detectedHistoryOut:", v7, v9, v11, v13);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void (**)(uint64_t, _QWORD, SNSoundPrintALaughterModelOutput *))(v15 + 16);
    v14 = a3;
    v16(v15, 0, v14);
  }

}

void sub_1D4516898(uint64_t a1, void *a2)
{
  SNSoundPrintKEmbeddingModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNSoundPrintKEmbeddingModel initWithMLModel:]([SNSoundPrintKEmbeddingModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D4516B38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNSoundPrintKEmbeddingModelOutput *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SNSoundPrintKEmbeddingModelOutput *v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, SNSoundPrintKEmbeddingModelOutput *);
  id v14;

  v14 = a2;
  if (v14)
  {
    v5 = a3;
    v6 = [SNSoundPrintKEmbeddingModelOutput alloc];
    objc_msgSend(v14, "featureValueForName:", CFSTR("fixedLengthEmbedding"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "featureValueForName:", CFSTR("framewiseEmbedding"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "multiArrayValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[SNSoundPrintKEmbeddingModelOutput initWithFixedLengthEmbedding:framewiseEmbedding:](v6, "initWithFixedLengthEmbedding:framewiseEmbedding:", v8, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void (**)(uint64_t, _QWORD, SNSoundPrintKEmbeddingModelOutput *))(v12 + 16);
    v11 = a3;
    v13(v12, 0, v11);
  }

}

void sub_1D4516D10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNSoundPrintKEmbeddingModelOutput *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SNSoundPrintKEmbeddingModelOutput *v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, SNSoundPrintKEmbeddingModelOutput *);
  id v14;

  v14 = a2;
  if (v14)
  {
    v5 = a3;
    v6 = [SNSoundPrintKEmbeddingModelOutput alloc];
    objc_msgSend(v14, "featureValueForName:", CFSTR("fixedLengthEmbedding"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "featureValueForName:", CFSTR("framewiseEmbedding"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "multiArrayValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[SNSoundPrintKEmbeddingModelOutput initWithFixedLengthEmbedding:framewiseEmbedding:](v6, "initWithFixedLengthEmbedding:framewiseEmbedding:", v8, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void (**)(uint64_t, _QWORD, SNSoundPrintKEmbeddingModelOutput *))(v12 + 16);
    v11 = a3;
    v13(v12, 0, v11);
  }

}

void sub_1D4517688(uint64_t a1, void *a2)
{
  SNVGGishMusicModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNVGGishMusicModel initWithMLModel:]([SNVGGishMusicModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D45178F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishMusicModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishMusicModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishMusicModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishMusicModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishMusicModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishMusicModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D4517A90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishMusicModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishMusicModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishMusicModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishMusicModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishMusicModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishMusicModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D4518398(uint64_t a1, void *a2)
{
  SNVGGishCheeringModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNVGGishCheeringModel initWithMLModel:]([SNVGGishCheeringModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D4518600(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishCheeringModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishCheeringModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishCheeringModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishCheeringModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishCheeringModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishCheeringModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D45187A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNVGGishCheeringModelOutput *v6;
  void *v7;
  void *v8;
  SNVGGishCheeringModelOutput *v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, SNVGGishCheeringModelOutput *);
  id v12;

  v12 = a2;
  if (v12)
  {
    v5 = a3;
    v6 = [SNVGGishCheeringModelOutput alloc];
    objc_msgSend(v12, "featureValueForName:", CFSTR("output1"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "multiArrayValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[SNVGGishCheeringModelOutput initWithOutput1:](v6, "initWithOutput1:", v8);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void (**)(uint64_t, _QWORD, SNVGGishCheeringModelOutput *))(v10 + 16);
    v9 = a3;
    v11(v10, 0, v9);
  }

}

void sub_1D451914C(uint64_t a1, void *a2)
{
  SNAudioQualityModel *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[SNAudioQualityModel initWithMLModel:]([SNAudioQualityModel alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1D45193EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNAudioQualityModelOutput *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SNAudioQualityModelOutput *v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, SNAudioQualityModelOutput *);
  id v14;

  v14 = a2;
  if (v14)
  {
    v5 = a3;
    v6 = [SNAudioQualityModelOutput alloc];
    objc_msgSend(v14, "featureValueForName:", CFSTR("final_output"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "dictionaryValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "featureValueForName:", CFSTR("classLabel"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[SNAudioQualityModelOutput initWithFinal_output:classLabel:](v6, "initWithFinal_output:classLabel:", v8, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void (**)(uint64_t, _QWORD, SNAudioQualityModelOutput *))(v12 + 16);
    v11 = a3;
    v13(v12, 0, v11);
  }

}

void sub_1D45195C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SNAudioQualityModelOutput *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SNAudioQualityModelOutput *v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, SNAudioQualityModelOutput *);
  id v14;

  v14 = a2;
  if (v14)
  {
    v5 = a3;
    v6 = [SNAudioQualityModelOutput alloc];
    objc_msgSend(v14, "featureValueForName:", CFSTR("final_output"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "dictionaryValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "featureValueForName:", CFSTR("classLabel"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[SNAudioQualityModelOutput initWithFinal_output:classLabel:](v6, "initWithFinal_output:classLabel:", v8, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void (**)(uint64_t, _QWORD, SNAudioQualityModelOutput *))(v12 + 16);
    v11 = a3;
    v13(v12, 0, v11);
  }

}

uint64_t sub_1D4519924()
{
  return MEMORY[0x1E0DE9510]();
}

uint64_t sub_1D4519930()
{
  return MEMORY[0x1E0DE9518]();
}

uint64_t sub_1D451993C()
{
  return MEMORY[0x1E0CADEB0]();
}

uint64_t sub_1D4519948()
{
  return MEMORY[0x1E0CADED0]();
}

uint64_t sub_1D4519954()
{
  return MEMORY[0x1E0CADEE8]();
}

uint64_t sub_1D4519960()
{
  return MEMORY[0x1E0CADF10]();
}

uint64_t sub_1D451996C()
{
  return MEMORY[0x1E0CADF48]();
}

uint64_t sub_1D4519978()
{
  return MEMORY[0x1E0CADF50]();
}

uint64_t sub_1D4519984()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t sub_1D4519990()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t sub_1D451999C()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t sub_1D45199A8()
{
  return MEMORY[0x1E0CAE0D0]();
}

uint64_t sub_1D45199B4()
{
  return MEMORY[0x1E0CAE0E0]();
}

uint64_t sub_1D45199C0()
{
  return MEMORY[0x1E0CAE108]();
}

uint64_t sub_1D45199CC()
{
  return MEMORY[0x1E0CAE1A0]();
}

uint64_t sub_1D45199D8()
{
  return MEMORY[0x1E0CAE1D8]();
}

uint64_t sub_1D45199E4()
{
  return MEMORY[0x1E0CAE1E8]();
}

uint64_t sub_1D45199F0()
{
  return MEMORY[0x1E0CAE430]();
}

uint64_t sub_1D45199FC()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_1D4519A08()
{
  return MEMORY[0x1E0CAE8A8]();
}

uint64_t sub_1D4519A14()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1D4519A20()
{
  return MEMORY[0x1E0CAE8D8]();
}

uint64_t sub_1D4519A2C()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1D4519A38()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1D4519A44()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_1D4519A50()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t sub_1D4519A5C()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t sub_1D4519A68()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t sub_1D4519A74()
{
  return MEMORY[0x1E0CAF638]();
}

uint64_t sub_1D4519A80()
{
  return MEMORY[0x1E0CAF668]();
}

uint64_t sub_1D4519A8C()
{
  return MEMORY[0x1E0CAF670]();
}

uint64_t sub_1D4519A98()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1D4519AA4()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1D4519AB0()
{
  return MEMORY[0x1E0CAFB58]();
}

uint64_t sub_1D4519ABC()
{
  return MEMORY[0x1E0CAFD30]();
}

uint64_t sub_1D4519AC8()
{
  return MEMORY[0x1E0CAFD38]();
}

uint64_t sub_1D4519AD4()
{
  return MEMORY[0x1E0CAFD90]();
}

uint64_t sub_1D4519AE0()
{
  return MEMORY[0x1E0CAFD98]();
}

uint64_t sub_1D4519AEC()
{
  return MEMORY[0x1E0CAFDB0]();
}

uint64_t sub_1D4519AF8()
{
  return MEMORY[0x1E0CAFDC8]();
}

uint64_t sub_1D4519B04()
{
  return MEMORY[0x1E0CAFDD8]();
}

uint64_t sub_1D4519B10()
{
  return MEMORY[0x1E0CAFDE0]();
}

uint64_t sub_1D4519B1C()
{
  return MEMORY[0x1E0CAFE08]();
}

uint64_t sub_1D4519B28()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1D4519B34()
{
  return MEMORY[0x1E0CAFE68]();
}

uint64_t sub_1D4519B40()
{
  return MEMORY[0x1E0CAFE80]();
}

uint64_t sub_1D4519B4C()
{
  return MEMORY[0x1E0CAFE90]();
}

uint64_t sub_1D4519B58()
{
  return MEMORY[0x1E0CAFEA8]();
}

uint64_t sub_1D4519B64()
{
  return MEMORY[0x1E0CAFEB8]();
}

uint64_t sub_1D4519B70()
{
  return MEMORY[0x1E0CAFED8]();
}

uint64_t sub_1D4519B7C()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t sub_1D4519B88()
{
  return MEMORY[0x1E0CAFF30]();
}

uint64_t sub_1D4519B94()
{
  return MEMORY[0x1E0CAFF40]();
}

uint64_t sub_1D4519BA0()
{
  return MEMORY[0x1E0CAFF90]();
}

uint64_t sub_1D4519BAC()
{
  return MEMORY[0x1E0CAFFD0]();
}

uint64_t sub_1D4519BB8()
{
  return MEMORY[0x1E0CAFFE0]();
}

uint64_t sub_1D4519BC4()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1D4519BD0()
{
  return MEMORY[0x1E0CB0080]();
}

uint64_t sub_1D4519BDC()
{
  return MEMORY[0x1E0CB0088]();
}

uint64_t sub_1D4519BE8()
{
  return MEMORY[0x1E0CB0098]();
}

uint64_t sub_1D4519BF4()
{
  return MEMORY[0x1E0CB00A0]();
}

uint64_t sub_1D4519C00()
{
  return MEMORY[0x1E0CB00F8]();
}

uint64_t sub_1D4519C0C()
{
  return MEMORY[0x1E0CB0120]();
}

uint64_t sub_1D4519C18()
{
  return MEMORY[0x1E0CB0188]();
}

uint64_t sub_1D4519C24()
{
  return MEMORY[0x1E0CB01B0]();
}

uint64_t sub_1D4519C30()
{
  return MEMORY[0x1E0CB01D0]();
}

uint64_t sub_1D4519C3C()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1D4519C48()
{
  return MEMORY[0x1E0CB01F8]();
}

uint64_t sub_1D4519C54()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1D4519C60()
{
  return MEMORY[0x1E0CB0258]();
}

uint64_t sub_1D4519C6C()
{
  return MEMORY[0x1E0CB0260]();
}

uint64_t sub_1D4519C78()
{
  return MEMORY[0x1E0CB0270]();
}

uint64_t sub_1D4519C84()
{
  return MEMORY[0x1E0CB02C0]();
}

uint64_t sub_1D4519C90()
{
  return MEMORY[0x1E0CB06B8]();
}

uint64_t sub_1D4519C9C()
{
  return MEMORY[0x1E0CB0700]();
}

uint64_t sub_1D4519CA8()
{
  return MEMORY[0x1E0CB0708]();
}

uint64_t sub_1D4519CB4()
{
  return MEMORY[0x1E0CB07B0]();
}

uint64_t sub_1D4519CC0()
{
  return MEMORY[0x1E0CB07C8]();
}

uint64_t sub_1D4519CCC()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t sub_1D4519CD8()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_1D4519CE4()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1D4519CF0()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t sub_1D4519CFC()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t sub_1D4519D08()
{
  return MEMORY[0x1E0CB0978]();
}

uint64_t sub_1D4519D14()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1D4519D20()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1D4519D2C()
{
  return MEMORY[0x1E0CB0A80]();
}

uint64_t sub_1D4519D38()
{
  return MEMORY[0x1E0CB0BE0]();
}

uint64_t sub_1D4519D44()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1D4519D50()
{
  return MEMORY[0x1E0CB1400]();
}

uint64_t sub_1D4519D5C()
{
  return MEMORY[0x1E0CB1440]();
}

uint64_t sub_1D4519D68()
{
  return MEMORY[0x1E0CB1470]();
}

uint64_t sub_1D4519D74()
{
  return MEMORY[0x1E0DE94C0]();
}

uint64_t sub_1D4519D80()
{
  return MEMORY[0x1E0D20EF8]();
}

uint64_t sub_1D4519D8C()
{
  return MEMORY[0x1E0DF1EB8]();
}

uint64_t sub_1D4519D98()
{
  return MEMORY[0x1E0DF1F18]();
}

uint64_t sub_1D4519DA4()
{
  return MEMORY[0x1E0D462C0]();
}

uint64_t sub_1D4519DB0()
{
  return MEMORY[0x1E0D462C8]();
}

uint64_t sub_1D4519DBC()
{
  return MEMORY[0x1E0D462D8]();
}

uint64_t sub_1D4519DC8()
{
  return MEMORY[0x1E0D462E0]();
}

uint64_t sub_1D4519DD4()
{
  return MEMORY[0x1E0D462E8]();
}

uint64_t sub_1D4519DE0()
{
  return MEMORY[0x1E0D462F8]();
}

uint64_t sub_1D4519DEC()
{
  return MEMORY[0x1E0D46300]();
}

uint64_t sub_1D4519DF8()
{
  return MEMORY[0x1E0D46308]();
}

uint64_t sub_1D4519E04()
{
  return MEMORY[0x1E0D46310]();
}

uint64_t sub_1D4519E10()
{
  return MEMORY[0x1E0D46318]();
}

uint64_t sub_1D4519E1C()
{
  return MEMORY[0x1E0D46320]();
}

uint64_t sub_1D4519E28()
{
  return MEMORY[0x1E0D46328]();
}

uint64_t sub_1D4519E34()
{
  return MEMORY[0x1E0D46330]();
}

uint64_t sub_1D4519E40()
{
  return MEMORY[0x1E0D46338]();
}

uint64_t sub_1D4519E4C()
{
  return MEMORY[0x1E0D46340]();
}

uint64_t sub_1D4519E58()
{
  return MEMORY[0x1E0D46348]();
}

uint64_t sub_1D4519E64()
{
  return MEMORY[0x1E0D46350]();
}

uint64_t sub_1D4519E70()
{
  return MEMORY[0x1E0D46358]();
}

uint64_t sub_1D4519E7C()
{
  return MEMORY[0x1E0D46360]();
}

uint64_t sub_1D4519E88()
{
  return MEMORY[0x1E0D46368]();
}

uint64_t sub_1D4519E94()
{
  return MEMORY[0x1E0D46370]();
}

uint64_t sub_1D4519EA0()
{
  return MEMORY[0x1E0D46490]();
}

uint64_t sub_1D4519EAC()
{
  return MEMORY[0x1E0D464D0]();
}

uint64_t sub_1D4519EB8()
{
  return MEMORY[0x1E0D464E0]();
}

uint64_t sub_1D4519EC4()
{
  return MEMORY[0x1E0D464E8]();
}

uint64_t sub_1D4519ED0()
{
  return MEMORY[0x1E0D464F0]();
}

uint64_t sub_1D4519EDC()
{
  return MEMORY[0x1E0D46500]();
}

uint64_t sub_1D4519EE8()
{
  return MEMORY[0x1E0D46508]();
}

uint64_t sub_1D4519EF4()
{
  return MEMORY[0x1E0D46518]();
}

uint64_t sub_1D4519F00()
{
  return MEMORY[0x1E0D46520]();
}

uint64_t sub_1D4519F0C()
{
  return MEMORY[0x1E0D46528]();
}

uint64_t sub_1D4519F18()
{
  return MEMORY[0x1E0D46530]();
}

uint64_t sub_1D4519F24()
{
  return MEMORY[0x1E0D46538]();
}

uint64_t sub_1D4519F30()
{
  return MEMORY[0x1E0D46540]();
}

uint64_t sub_1D4519F3C()
{
  return MEMORY[0x1E0D46548]();
}

uint64_t sub_1D4519F48()
{
  return MEMORY[0x1E0D46550]();
}

uint64_t sub_1D4519F54()
{
  return MEMORY[0x1E0D46558]();
}

uint64_t sub_1D4519F60()
{
  return MEMORY[0x1E0D46560]();
}

uint64_t sub_1D4519F6C()
{
  return MEMORY[0x1E0D46578]();
}

uint64_t sub_1D4519F78()
{
  return MEMORY[0x1E0DF2108]();
}

uint64_t sub_1D4519F84()
{
  return MEMORY[0x1E0DF2110]();
}

uint64_t sub_1D4519F90()
{
  return MEMORY[0x1E0DF2118]();
}

uint64_t sub_1D4519F9C()
{
  return MEMORY[0x1E0DF2150]();
}

uint64_t sub_1D4519FA8()
{
  return MEMORY[0x1E0DF2158]();
}

uint64_t sub_1D4519FB4()
{
  return MEMORY[0x1E0DF2170]();
}

uint64_t sub_1D4519FC0()
{
  return MEMORY[0x1E0DF2198]();
}

uint64_t sub_1D4519FCC()
{
  return MEMORY[0x1E0DF2218]();
}

uint64_t sub_1D4519FD8()
{
  return MEMORY[0x1E0DF2220]();
}

uint64_t sub_1D4519FE4()
{
  return MEMORY[0x1E0DF2228]();
}

uint64_t sub_1D4519FF0()
{
  return MEMORY[0x1E0DF2238]();
}

uint64_t sub_1D4519FFC()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1D451A008()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1D451A014()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1D451A020()
{
  return MEMORY[0x1E0C9E688]();
}

uint64_t sub_1D451A02C()
{
  return MEMORY[0x1E0C9E690]();
}

uint64_t sub_1D451A038()
{
  return MEMORY[0x1E0C9E698]();
}

uint64_t sub_1D451A044()
{
  return MEMORY[0x1E0C9E6A0]();
}

uint64_t sub_1D451A050()
{
  return MEMORY[0x1E0C9E6A8]();
}

uint64_t sub_1D451A05C()
{
  return MEMORY[0x1E0C9E6C0]();
}

uint64_t sub_1D451A068()
{
  return MEMORY[0x1E0C9E748]();
}

uint64_t sub_1D451A074()
{
  return MEMORY[0x1E0DEF398]();
}

uint64_t sub_1D451A080()
{
  return MEMORY[0x1E0DF2040]();
}

uint64_t sub_1D451A08C()
{
  return MEMORY[0x1E0DEF3B8]();
}

uint64_t sub_1D451A098()
{
  return MEMORY[0x1E0C95640]();
}

uint64_t sub_1D451A0A4()
{
  return MEMORY[0x1E0C95840]();
}

uint64_t sub_1D451A0B0()
{
  return MEMORY[0x1E0C958C0]();
}

uint64_t sub_1D451A0BC()
{
  return MEMORY[0x1E0C95928]();
}

uint64_t sub_1D451A0C8()
{
  return MEMORY[0x1E0C95930]();
}

uint64_t sub_1D451A0D4()
{
  return MEMORY[0x1E0C95940]();
}

uint64_t sub_1D451A0E0()
{
  return MEMORY[0x1E0C959E8]();
}

uint64_t sub_1D451A0EC()
{
  return MEMORY[0x1E0C95A90]();
}

uint64_t sub_1D451A0F8()
{
  return MEMORY[0x1E0C95AC0]();
}

uint64_t sub_1D451A104()
{
  return MEMORY[0x1E0C95B28]();
}

uint64_t sub_1D451A110()
{
  return MEMORY[0x1E0C95B30]();
}

uint64_t sub_1D451A11C()
{
  return MEMORY[0x1E0C95B38]();
}

uint64_t sub_1D451A128()
{
  return MEMORY[0x1E0C95B68]();
}

uint64_t sub_1D451A134()
{
  return MEMORY[0x1E0C95BB8]();
}

uint64_t sub_1D451A140()
{
  return MEMORY[0x1E0C95BD0]();
}

uint64_t sub_1D451A14C()
{
  return MEMORY[0x1E0C95C00]();
}

uint64_t sub_1D451A158()
{
  return MEMORY[0x1E0C95CD8]();
}

uint64_t sub_1D451A164()
{
  return MEMORY[0x1E0C95CE0]();
}

uint64_t sub_1D451A170()
{
  return MEMORY[0x1E0C95CE8]();
}

uint64_t sub_1D451A17C()
{
  return MEMORY[0x1E0C95D08]();
}

uint64_t sub_1D451A188()
{
  return MEMORY[0x1E0C95D20]();
}

uint64_t sub_1D451A194()
{
  return MEMORY[0x1E0C95D38]();
}

uint64_t sub_1D451A1A0()
{
  return MEMORY[0x1E0C95D40]();
}

uint64_t sub_1D451A1AC()
{
  return MEMORY[0x1E0C95D48]();
}

uint64_t sub_1D451A1B8()
{
  return MEMORY[0x1E0C95D50]();
}

uint64_t sub_1D451A1C4()
{
  return MEMORY[0x1E0C95D70]();
}

uint64_t sub_1D451A1D0()
{
  return MEMORY[0x1E0C95D78]();
}

uint64_t sub_1D451A1DC()
{
  return MEMORY[0x1E0C95DB0]();
}

uint64_t sub_1D451A1E8()
{
  return MEMORY[0x1E0C95DD0]();
}

uint64_t sub_1D451A1F4()
{
  return MEMORY[0x1E0C95DE8]();
}

uint64_t sub_1D451A200()
{
  return MEMORY[0x1E0C95E00]();
}

uint64_t sub_1D451A20C()
{
  return MEMORY[0x1E0C95F00]();
}

uint64_t sub_1D451A218()
{
  return MEMORY[0x1E0C95F08]();
}

uint64_t sub_1D451A224()
{
  return MEMORY[0x1E0C95F18]();
}

uint64_t sub_1D451A230()
{
  return MEMORY[0x1E0C95F20]();
}

uint64_t sub_1D451A23C()
{
  return MEMORY[0x1E0C95F28]();
}

uint64_t sub_1D451A248()
{
  return MEMORY[0x1E0C95F50]();
}

uint64_t sub_1D451A254()
{
  return MEMORY[0x1E0C95F60]();
}

uint64_t sub_1D451A260()
{
  return MEMORY[0x1E0C95FA8]();
}

uint64_t sub_1D451A26C()
{
  return MEMORY[0x1E0C96078]();
}

uint64_t sub_1D451A278()
{
  return MEMORY[0x1E0C96098]();
}

uint64_t sub_1D451A284()
{
  return MEMORY[0x1E0C960A8]();
}

uint64_t sub_1D451A290()
{
  return MEMORY[0x1E0C96110]();
}

uint64_t sub_1D451A29C()
{
  return MEMORY[0x1E0C96118]();
}

uint64_t sub_1D451A2A8()
{
  return MEMORY[0x1E0C96120]();
}

uint64_t sub_1D451A2B4()
{
  return MEMORY[0x1E0C96128]();
}

uint64_t sub_1D451A2C0()
{
  return MEMORY[0x1E0C96130]();
}

uint64_t sub_1D451A2CC()
{
  return MEMORY[0x1E0C961B8]();
}

uint64_t sub_1D451A2D8()
{
  return MEMORY[0x1E0C961C8]();
}

uint64_t sub_1D451A2E4()
{
  return MEMORY[0x1E0C961D0]();
}

uint64_t sub_1D451A2F0()
{
  return MEMORY[0x1E0C961D8]();
}

uint64_t sub_1D451A2FC()
{
  return MEMORY[0x1E0C961E0]();
}

uint64_t sub_1D451A308()
{
  return MEMORY[0x1E0C96248]();
}

uint64_t sub_1D451A314()
{
  return MEMORY[0x1E0C96268]();
}

uint64_t sub_1D451A320()
{
  return MEMORY[0x1E0C96270]();
}

uint64_t sub_1D451A32C()
{
  return MEMORY[0x1E0C96278]();
}

uint64_t sub_1D451A338()
{
  return MEMORY[0x1E0C96280]();
}

uint64_t sub_1D451A344()
{
  return MEMORY[0x1E0C96290]();
}

uint64_t sub_1D451A350()
{
  return MEMORY[0x1E0C96298]();
}

uint64_t sub_1D451A35C()
{
  return MEMORY[0x1E0C962C0]();
}

uint64_t sub_1D451A368()
{
  return MEMORY[0x1E0C962D8]();
}

uint64_t sub_1D451A374()
{
  return MEMORY[0x1E0C962F0]();
}

uint64_t sub_1D451A380()
{
  return MEMORY[0x1E0C96300]();
}

uint64_t sub_1D451A38C()
{
  return MEMORY[0x1E0C96308]();
}

uint64_t sub_1D451A398()
{
  return MEMORY[0x1E0C96310]();
}

uint64_t sub_1D451A3A4()
{
  return MEMORY[0x1E0C96328]();
}

uint64_t sub_1D451A3B0()
{
  return MEMORY[0x1E0C96330]();
}

uint64_t sub_1D451A3BC()
{
  return MEMORY[0x1E0C96338]();
}

uint64_t sub_1D451A3C8()
{
  return MEMORY[0x1E0C96350]();
}

uint64_t sub_1D451A3D4()
{
  return MEMORY[0x1E0C96360]();
}

uint64_t sub_1D451A3E0()
{
  return MEMORY[0x1E0C96368]();
}

uint64_t sub_1D451A3EC()
{
  return MEMORY[0x1E0C96390]();
}

uint64_t sub_1D451A3F8()
{
  return MEMORY[0x1E0C963D8]();
}

uint64_t sub_1D451A404()
{
  return MEMORY[0x1E0C963E0]();
}

uint64_t sub_1D451A410()
{
  return MEMORY[0x1E0C963E8]();
}

uint64_t sub_1D451A41C()
{
  return MEMORY[0x1E0C96400]();
}

uint64_t sub_1D451A428()
{
  return MEMORY[0x1E0C96410]();
}

uint64_t sub_1D451A434()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t sub_1D451A440()
{
  return MEMORY[0x1E0DEF4B8]();
}

uint64_t sub_1D451A44C()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1D451A458()
{
  return MEMORY[0x1E0DEF560]();
}

uint64_t sub_1D451A464()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1D451A470()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1D451A47C()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_1D451A488()
{
  return MEMORY[0x1E0DEF6A0]();
}

uint64_t sub_1D451A494()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_1D451A4A0()
{
  return MEMORY[0x1E0DBF020]();
}

uint64_t sub_1D451A4AC()
{
  return MEMORY[0x1E0DBF028]();
}

uint64_t sub_1D451A4B8()
{
  return MEMORY[0x1E0DBF030]();
}

uint64_t sub_1D451A4C4()
{
  return MEMORY[0x1E0DBF038]();
}

uint64_t sub_1D451A4D0()
{
  return MEMORY[0x1E0DBF040]();
}

uint64_t sub_1D451A4DC()
{
  return MEMORY[0x1E0DBF048]();
}

uint64_t sub_1D451A4E8()
{
  return MEMORY[0x1E0DBF050]();
}

uint64_t sub_1D451A4F4()
{
  return MEMORY[0x1E0DBF058]();
}

uint64_t sub_1D451A500()
{
  return MEMORY[0x1E0DBF060]();
}

uint64_t sub_1D451A50C()
{
  return MEMORY[0x1E0DBF068]();
}

uint64_t sub_1D451A518()
{
  return MEMORY[0x1E0DBF070]();
}

uint64_t sub_1D451A524()
{
  return MEMORY[0x1E0DBF078]();
}

uint64_t sub_1D451A530()
{
  return MEMORY[0x1E0DBF080]();
}

uint64_t sub_1D451A53C()
{
  return MEMORY[0x1E0DBF090]();
}

uint64_t sub_1D451A548()
{
  return MEMORY[0x1E0DBF098]();
}

uint64_t sub_1D451A554()
{
  return MEMORY[0x1E0DBF0A0]();
}

uint64_t sub_1D451A560()
{
  return MEMORY[0x1E0DBF0A8]();
}

uint64_t sub_1D451A56C()
{
  return MEMORY[0x1E0DBF0B0]();
}

uint64_t sub_1D451A578()
{
  return MEMORY[0x1E0DBF0B8]();
}

uint64_t sub_1D451A584()
{
  return MEMORY[0x1E0DBF0C0]();
}

uint64_t sub_1D451A590()
{
  return MEMORY[0x1E0DBF0D8]();
}

uint64_t sub_1D451A59C()
{
  return MEMORY[0x1E0DE9D70]();
}

uint64_t sub_1D451A5A8()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1D451A5B4()
{
  return MEMORY[0x1E0CB17E8]();
}

uint64_t sub_1D451A5C0()
{
  return MEMORY[0x1E0CB17F8]();
}

uint64_t sub_1D451A5CC()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1D451A5D8()
{
  return MEMORY[0x1E0DE9E38]();
}

uint64_t sub_1D451A5E4()
{
  return MEMORY[0x1E0DE9E78]();
}

uint64_t sub_1D451A5F0()
{
  return MEMORY[0x1E0DEA0A0]();
}

uint64_t sub_1D451A5FC()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t sub_1D451A608()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1D451A614()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1D451A620()
{
  return MEMORY[0x1E0DEA1C8]();
}

uint64_t sub_1D451A62C()
{
  return MEMORY[0x1E0DEA240]();
}

uint64_t sub_1D451A638()
{
  return MEMORY[0x1E0DF1F80]();
}

uint64_t sub_1D451A644()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1D451A650()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1D451A65C()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t sub_1D451A668()
{
  return MEMORY[0x1E0DEA3E0]();
}

uint64_t sub_1D451A674()
{
  return MEMORY[0x1E0DEA3E8]();
}

uint64_t sub_1D451A680()
{
  return MEMORY[0x1E0DEA3F0]();
}

uint64_t sub_1D451A68C()
{
  return MEMORY[0x1E0DEA450]();
}

uint64_t sub_1D451A698()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1D451A6A4()
{
  return MEMORY[0x1E0DEA578]();
}

uint64_t sub_1D451A6B0()
{
  return MEMORY[0x1E0DEA5B8]();
}

uint64_t sub_1D451A6BC()
{
  return MEMORY[0x1E0CB1868]();
}

uint64_t sub_1D451A6C8()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1D451A6D4()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1D451A6E0()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1D451A6EC()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1D451A6F8()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t sub_1D451A704()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_1D451A710()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_1D451A71C()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1D451A728()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1D451A734()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_1D451A740()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t sub_1D451A74C()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1D451A758()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1D451A764()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t sub_1D451A770()
{
  return MEMORY[0x1E0DEA7C8]();
}

uint64_t sub_1D451A77C()
{
  return MEMORY[0x1E0DEA7D0]();
}

uint64_t sub_1D451A788()
{
  return MEMORY[0x1E0DEA7F0]();
}

uint64_t sub_1D451A794()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1D451A7A0()
{
  return MEMORY[0x1E0DEA828]();
}

uint64_t sub_1D451A7AC()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1D451A7B8()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_1D451A7C4()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1D451A7D0()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_1D451A7DC()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1D451A7E8()
{
  return MEMORY[0x1E0DEA940]();
}

uint64_t sub_1D451A7F4()
{
  return MEMORY[0x1E0DEA950]();
}

uint64_t sub_1D451A800()
{
  return MEMORY[0x1E0DEAA08]();
}

uint64_t sub_1D451A80C()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1D451A818()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_1D451A824()
{
  return MEMORY[0x1E0DEAA68]();
}

uint64_t sub_1D451A830()
{
  return MEMORY[0x1E0C96490]();
}

uint64_t sub_1D451A83C()
{
  return MEMORY[0x1E0DEAAB8]();
}

uint64_t sub_1D451A848()
{
  return MEMORY[0x1E0DEAAC8]();
}

uint64_t sub_1D451A854()
{
  return MEMORY[0x1E0DEAAD0]();
}

uint64_t sub_1D451A860()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t sub_1D451A86C()
{
  return MEMORY[0x1E0DEAB00]();
}

uint64_t sub_1D451A878()
{
  return MEMORY[0x1E0DEAB28]();
}

uint64_t sub_1D451A884()
{
  return MEMORY[0x1E0DEAB90]();
}

uint64_t sub_1D451A890()
{
  return MEMORY[0x1E0CB1AB0]();
}

uint64_t sub_1D451A89C()
{
  return MEMORY[0x1E0DEAC40]();
}

uint64_t sub_1D451A8A8()
{
  return MEMORY[0x1E0DEAC48]();
}

uint64_t sub_1D451A8B4()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t sub_1D451A8C0()
{
  return MEMORY[0x1E0DEAC90]();
}

uint64_t sub_1D451A8CC()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t sub_1D451A8D8()
{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t sub_1D451A8E4()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t sub_1D451A8F0()
{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t sub_1D451A8FC()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1D451A908()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1D451A914()
{
  return MEMORY[0x1E0CB1AD0]();
}

uint64_t sub_1D451A920()
{
  return MEMORY[0x1E0CB1AE0]();
}

uint64_t sub_1D451A92C()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1D451A938()
{
  return MEMORY[0x1E0DEADA8]();
}

uint64_t sub_1D451A944()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1D451A950()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1D451A95C()
{
  return MEMORY[0x1E0DEADC0]();
}

uint64_t sub_1D451A968()
{
  return MEMORY[0x1E0DEADC8]();
}

uint64_t sub_1D451A974()
{
  return MEMORY[0x1E0DEADD8]();
}

uint64_t sub_1D451A980()
{
  return MEMORY[0x1E0DEADE0]();
}

uint64_t sub_1D451A98C()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1D451A998()
{
  return MEMORY[0x1E0DEADF8]();
}

uint64_t sub_1D451A9A4()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t sub_1D451A9B0()
{
  return MEMORY[0x1E0DEAE20]();
}

uint64_t sub_1D451A9BC()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1D451A9C8()
{
  return MEMORY[0x1E0DEAE30]();
}

uint64_t sub_1D451A9D4()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t sub_1D451A9E0()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1D451A9EC()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t sub_1D451A9F8()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t sub_1D451AA04()
{
  return MEMORY[0x1E0DEAE98]();
}

uint64_t sub_1D451AA10()
{
  return MEMORY[0x1E0DEAEA8]();
}

uint64_t sub_1D451AA1C()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1D451AA28()
{
  return MEMORY[0x1E0DEAEE0]();
}

uint64_t sub_1D451AA34()
{
  return MEMORY[0x1E0DEAEF0]();
}

uint64_t sub_1D451AA40()
{
  return MEMORY[0x1E0DEAF00]();
}

uint64_t sub_1D451AA4C()
{
  return MEMORY[0x1E0DEAF08]();
}

uint64_t sub_1D451AA58()
{
  return MEMORY[0x1E0DEAF78]();
}

uint64_t sub_1D451AA64()
{
  return MEMORY[0x1E0CB1B28]();
}

uint64_t sub_1D451AA70()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1D451AA7C()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t sub_1D451AA88()
{
  return MEMORY[0x1E0DF0610]();
}

uint64_t sub_1D451AA94()
{
  return MEMORY[0x1E0DF0620]();
}

uint64_t sub_1D451AAA0()
{
  return MEMORY[0x1E0DF0688]();
}

uint64_t sub_1D451AAAC()
{
  return MEMORY[0x1E0DF06B8]();
}

uint64_t sub_1D451AAB8()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1D451AAC4()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1D451AAD0()
{
  return MEMORY[0x1E0DF0790]();
}

uint64_t sub_1D451AADC()
{
  return MEMORY[0x1E0DF07C0]();
}

uint64_t sub_1D451AAE8()
{
  return MEMORY[0x1E0DF07D8]();
}

uint64_t sub_1D451AAF4()
{
  return MEMORY[0x1E0DF07E0]();
}

uint64_t sub_1D451AB00()
{
  return MEMORY[0x1E0DF07E8]();
}

uint64_t sub_1D451AB0C()
{
  return MEMORY[0x1E0DF07F8]();
}

uint64_t sub_1D451AB18()
{
  return MEMORY[0x1E0DF0800]();
}

uint64_t sub_1D451AB24()
{
  return MEMORY[0x1E0DF0838]();
}

uint64_t sub_1D451AB30()
{
  return MEMORY[0x1E0DF0840]();
}

uint64_t sub_1D451AB3C()
{
  return MEMORY[0x1E0DF0870]();
}

uint64_t sub_1D451AB48()
{
  return MEMORY[0x1E0DF08A8]();
}

uint64_t sub_1D451AB54()
{
  return MEMORY[0x1E0DF08B8]();
}

uint64_t sub_1D451AB60()
{
  return MEMORY[0x1E0DF08E0]();
}

uint64_t sub_1D451AB6C()
{
  return MEMORY[0x1E0DF09D0]();
}

uint64_t sub_1D451AB78()
{
  return MEMORY[0x1E0DF09F0]();
}

uint64_t sub_1D451AB84()
{
  return MEMORY[0x1E0DF09F8]();
}

uint64_t sub_1D451AB90()
{
  return MEMORY[0x1E0DF0A40]();
}

uint64_t sub_1D451AB9C()
{
  return MEMORY[0x1E0DF0A68]();
}

uint64_t sub_1D451ABA8()
{
  return MEMORY[0x1E0DF0A70]();
}

uint64_t sub_1D451ABB4()
{
  return MEMORY[0x1E0DF0AD8]();
}

uint64_t sub_1D451ABC0()
{
  return MEMORY[0x1E0CB1B50]();
}

uint64_t sub_1D451ABCC()
{
  return MEMORY[0x1E0CB1B68]();
}

uint64_t sub_1D451ABD8()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t sub_1D451ABE4()
{
  return MEMORY[0x1E0DEB160]();
}

uint64_t sub_1D451ABF0()
{
  return MEMORY[0x1E0CB1BB0]();
}

uint64_t sub_1D451ABFC()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t sub_1D451AC08()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t sub_1D451AC14()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1D451AC20()
{
  return MEMORY[0x1E0DEB2A8]();
}

uint64_t sub_1D451AC2C()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_1D451AC38()
{
  return MEMORY[0x1E0CB1C00]();
}

uint64_t sub_1D451AC44()
{
  return MEMORY[0x1E0CB1C10]();
}

uint64_t sub_1D451AC50()
{
  return MEMORY[0x1E0DEB498]();
}

uint64_t sub_1D451AC5C()
{
  return MEMORY[0x1E0DEB4A0]();
}

uint64_t sub_1D451AC68()
{
  return MEMORY[0x1E0DEB4F8]();
}

uint64_t sub_1D451AC74()
{
  return MEMORY[0x1E0DEB510]();
}

uint64_t sub_1D451AC80()
{
  return MEMORY[0x1E0DEB518]();
}

uint64_t sub_1D451AC8C()
{
  return MEMORY[0x1E0DEB520]();
}

uint64_t sub_1D451AC98()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_1D451ACA4()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_1D451ACB0()
{
  return MEMORY[0x1E0DEB570]();
}

uint64_t sub_1D451ACBC()
{
  return MEMORY[0x1E0DEB580]();
}

uint64_t sub_1D451ACC8()
{
  return MEMORY[0x1E0DEB590]();
}

uint64_t sub_1D451ACD4()
{
  return MEMORY[0x1E0DEB5A0]();
}

uint64_t sub_1D451ACE0()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t sub_1D451ACEC()
{
  return MEMORY[0x1E0DEB5C8]();
}

uint64_t sub_1D451ACF8()
{
  return MEMORY[0x1E0DEB5E8]();
}

uint64_t sub_1D451AD04()
{
  return MEMORY[0x1E0DEB5F0]();
}

uint64_t sub_1D451AD10()
{
  return MEMORY[0x1E0DEB5F8]();
}

uint64_t sub_1D451AD1C()
{
  return MEMORY[0x1E0DEB600]();
}

uint64_t sub_1D451AD28()
{
  return MEMORY[0x1E0DEB608]();
}

uint64_t sub_1D451AD34()
{
  return MEMORY[0x1E0DEB618]();
}

uint64_t sub_1D451AD40()
{
  return MEMORY[0x1E0DEB620]();
}

uint64_t sub_1D451AD4C()
{
  return MEMORY[0x1E0DEB628]();
}

uint64_t sub_1D451AD58()
{
  return MEMORY[0x1E0DEB630]();
}

uint64_t sub_1D451AD64()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_1D451AD70()
{
  return MEMORY[0x1E0DEB698]();
}

uint64_t sub_1D451AD7C()
{
  return MEMORY[0x1E0DEB6A0]();
}

uint64_t sub_1D451AD88()
{
  return MEMORY[0x1E0DEB6C0]();
}

uint64_t sub_1D451AD94()
{
  return MEMORY[0x1E0DEB6C8]();
}

uint64_t sub_1D451ADA0()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_1D451ADAC()
{
  return MEMORY[0x1E0DEB6D8]();
}

uint64_t sub_1D451ADB8()
{
  return MEMORY[0x1E0DEB6E0]();
}

uint64_t sub_1D451ADC4()
{
  return MEMORY[0x1E0DEB6F8]();
}

uint64_t sub_1D451ADD0()
{
  return MEMORY[0x1E0DEB728]();
}

uint64_t sub_1D451ADDC()
{
  return MEMORY[0x1E0DEB730]();
}

uint64_t sub_1D451ADE8()
{
  return MEMORY[0x1E0DEB738]();
}

uint64_t sub_1D451ADF4()
{
  return MEMORY[0x1E0DEB740]();
}

uint64_t sub_1D451AE00()
{
  return MEMORY[0x1E0DEB748]();
}

uint64_t sub_1D451AE0C()
{
  return MEMORY[0x1E0DEB760]();
}

uint64_t sub_1D451AE18()
{
  return MEMORY[0x1E0DEB768]();
}

uint64_t sub_1D451AE24()
{
  return MEMORY[0x1E0DEB770]();
}

uint64_t sub_1D451AE30()
{
  return MEMORY[0x1E0DEB780]();
}

uint64_t sub_1D451AE3C()
{
  return MEMORY[0x1E0DEB790]();
}

uint64_t sub_1D451AE48()
{
  return MEMORY[0x1E0DEB798]();
}

uint64_t sub_1D451AE54()
{
  return MEMORY[0x1E0DEB7A0]();
}

uint64_t sub_1D451AE60()
{
  return MEMORY[0x1E0DEB7A8]();
}

uint64_t sub_1D451AE6C()
{
  return MEMORY[0x1E0DEB7B0]();
}

uint64_t sub_1D451AE78()
{
  return MEMORY[0x1E0DEB7C0]();
}

uint64_t sub_1D451AE84()
{
  return MEMORY[0x1E0DEB7C8]();
}

uint64_t sub_1D451AE90()
{
  return MEMORY[0x1E0DEB7D0]();
}

uint64_t sub_1D451AE9C()
{
  return MEMORY[0x1E0DEB7D8]();
}

uint64_t sub_1D451AEA8()
{
  return MEMORY[0x1E0DEB7E8]();
}

uint64_t sub_1D451AEB4()
{
  return MEMORY[0x1E0DEB7F0]();
}

uint64_t sub_1D451AEC0()
{
  return MEMORY[0x1E0DEB818]();
}

uint64_t sub_1D451AECC()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t sub_1D451AED8()
{
  return MEMORY[0x1E0DEF170]();
}

uint64_t sub_1D451AEE4()
{
  return MEMORY[0x1E0DEF190]();
}

uint64_t sub_1D451AEF0()
{
  return MEMORY[0x1E0DEF198]();
}

uint64_t sub_1D451AEFC()
{
  return MEMORY[0x1E0CB1C90]();
}

uint64_t sub_1D451AF08()
{
  return MEMORY[0x1E0C9E7B8]();
}

uint64_t sub_1D451AF14()
{
  return MEMORY[0x1E0C9E7C0]();
}

uint64_t sub_1D451AF20()
{
  return MEMORY[0x1E0C9E7C8]();
}

uint64_t sub_1D451AF2C()
{
  return MEMORY[0x1E0C9E7D8]();
}

uint64_t sub_1D451AF38()
{
  return MEMORY[0x1E0CB1D20]();
}

uint64_t sub_1D451AF44()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_1D451AF50()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1D451AF5C()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1D451AF68()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1D451AF74()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1D451AF80()
{
  return MEMORY[0x1E0C9E7E8]();
}

uint64_t sub_1D451AF8C()
{
  return MEMORY[0x1E0C9E7F0]();
}

uint64_t sub_1D451AF98()
{
  return MEMORY[0x1E0CB1E68]();
}

uint64_t sub_1D451AFA4()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_1D451AFB0()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_1D451AFBC()
{
  return MEMORY[0x1E0DEF8F8]();
}

uint64_t sub_1D451AFC8()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1D451AFD4()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_1D451AFE0()
{
  return MEMORY[0x1E0DEF920]();
}

uint64_t sub_1D451AFEC()
{
  return MEMORY[0x1E0DF2298]();
}

uint64_t sub_1D451AFF8()
{
  return MEMORY[0x1E0DF22A0]();
}

uint64_t sub_1D451B004()
{
  return MEMORY[0x1E0DF22A8]();
}

uint64_t sub_1D451B010()
{
  return MEMORY[0x1E0CB1F30]();
}

uint64_t sub_1D451B01C()
{
  return MEMORY[0x1E0CB1F50]();
}

uint64_t sub_1D451B028()
{
  return MEMORY[0x1E0DEFA60]();
}

uint64_t sub_1D451B034()
{
  return MEMORY[0x1E0DEFA70]();
}

uint64_t sub_1D451B040()
{
  return MEMORY[0x1E0DE94F0]();
}

uint64_t sub_1D451B04C()
{
  return MEMORY[0x1E0DEF2D8]();
}

uint64_t sub_1D451B058()
{
  return MEMORY[0x1E0DEF2E8]();
}

uint64_t sub_1D451B064()
{
  return MEMORY[0x1E0DEF2F0]();
}

uint64_t sub_1D451B070()
{
  return MEMORY[0x1E0DEF2F8]();
}

uint64_t sub_1D451B07C()
{
  return MEMORY[0x1E0DEF308]();
}

uint64_t sub_1D451B088()
{
  return MEMORY[0x1E0DEF310]();
}

uint64_t sub_1D451B094()
{
  return MEMORY[0x1E0DEF318]();
}

uint64_t sub_1D451B0A0()
{
  return MEMORY[0x1E0DEF328]();
}

uint64_t sub_1D451B0AC()
{
  return MEMORY[0x1E0DEF330]();
}

uint64_t sub_1D451B0B8()
{
  return MEMORY[0x1E0C9E810]();
}

uint64_t sub_1D451B0C4()
{
  return MEMORY[0x1E0CB1FE8]();
}

uint64_t sub_1D451B0D0()
{
  return MEMORY[0x1E0CB2020]();
}

uint64_t sub_1D451B0DC()
{
  return MEMORY[0x1E0CB2038]();
}

uint64_t sub_1D451B0E8()
{
  return MEMORY[0x1E0CB20D0]();
}

uint64_t sub_1D451B0F4()
{
  return MEMORY[0x1E0CB20E0]();
}

uint64_t sub_1D451B100()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1D451B10C()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1D451B118()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t sub_1D451B124()
{
  return MEMORY[0x1E0CB2160]();
}

uint64_t sub_1D451B130()
{
  return MEMORY[0x1E0CB2360]();
}

uint64_t sub_1D451B13C()
{
  return MEMORY[0x1E0CB23A0]();
}

uint64_t sub_1D451B148()
{
  return MEMORY[0x1E0DF22B0]();
}

uint64_t sub_1D451B154()
{
  return MEMORY[0x1E0DEB8C8]();
}

uint64_t sub_1D451B160()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1D451B16C()
{
  return MEMORY[0x1E0DEB960]();
}

uint64_t sub_1D451B178()
{
  return MEMORY[0x1E0DEB970]();
}

uint64_t sub_1D451B184()
{
  return MEMORY[0x1E0DEB980]();
}

uint64_t sub_1D451B190()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_1D451B19C()
{
  return MEMORY[0x1E0CB23F8]();
}

uint64_t sub_1D451B1A8()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1D451B1B4()
{
  return MEMORY[0x1E0DEBC50]();
}

uint64_t sub_1D451B1C0()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1D451B1CC()
{
  return MEMORY[0x1E0DEBCB0]();
}

uint64_t sub_1D451B1D8()
{
  return MEMORY[0x1E0CB2400]();
}

uint64_t sub_1D451B1E4()
{
  return MEMORY[0x1E0CB2410]();
}

uint64_t sub_1D451B1F0()
{
  return MEMORY[0x1E0CB24A8]();
}

uint64_t sub_1D451B1FC()
{
  return MEMORY[0x1E0CB2558]();
}

uint64_t sub_1D451B208()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1D451B214()
{
  return MEMORY[0x1E0DEBEA8]();
}

uint64_t sub_1D451B220()
{
  return MEMORY[0x1E0DEBEC0]();
}

uint64_t sub_1D451B22C()
{
  return MEMORY[0x1E0DEBED0]();
}

uint64_t sub_1D451B238()
{
  return MEMORY[0x1E0DEBED8]();
}

uint64_t sub_1D451B244()
{
  return MEMORY[0x1E0DEBEE8]();
}

uint64_t sub_1D451B250()
{
  return MEMORY[0x1E0DEBEF0]();
}

uint64_t sub_1D451B25C()
{
  return MEMORY[0x1E0DEBEF8]();
}

uint64_t sub_1D451B268()
{
  return MEMORY[0x1E0DEBF00]();
}

uint64_t sub_1D451B274()
{
  return MEMORY[0x1E0DEBF08]();
}

uint64_t sub_1D451B280()
{
  return MEMORY[0x1E0DEBF10]();
}

uint64_t sub_1D451B28C()
{
  return MEMORY[0x1E0DEBF28]();
}

uint64_t sub_1D451B298()
{
  return MEMORY[0x1E0DEBF30]();
}

uint64_t sub_1D451B2A4()
{
  return MEMORY[0x1E0DEBF40]();
}

uint64_t sub_1D451B2B0()
{
  return MEMORY[0x1E0DEBF48]();
}

uint64_t sub_1D451B2BC()
{
  return MEMORY[0x1E0DEBF50]();
}

uint64_t sub_1D451B2C8()
{
  return MEMORY[0x1E0DEBF58]();
}

uint64_t sub_1D451B2D4()
{
  return MEMORY[0x1E0DEBFB0]();
}

uint64_t sub_1D451B2E0()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1D451B2EC()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1D451B2F8()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1D451B304()
{
  return MEMORY[0x1E0DEC070]();
}

uint64_t sub_1D451B310()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t sub_1D451B31C()
{
  return MEMORY[0x1E0DEC0A8]();
}

uint64_t sub_1D451B328()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_1D451B334()
{
  return MEMORY[0x1E0DEC0B8]();
}

uint64_t sub_1D451B340()
{
  return MEMORY[0x1E0DEC0D0]();
}

uint64_t sub_1D451B34C()
{
  return MEMORY[0x1E0DEC0D8]();
}

uint64_t sub_1D451B358()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_1D451B364()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t sub_1D451B370()
{
  return MEMORY[0x1E0DEC100]();
}

uint64_t sub_1D451B37C()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_1D451B388()
{
  return MEMORY[0x1E0DEC128]();
}

uint64_t sub_1D451B394()
{
  return MEMORY[0x1E0DEC168]();
}

uint64_t sub_1D451B3A0()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t sub_1D451B3AC()
{
  return MEMORY[0x1E0DEC188]();
}

uint64_t sub_1D451B3B8()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t sub_1D451B3C4()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1D451B3D0()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1D451B3DC()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t sub_1D451B3E8()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_1D451B3F4()
{
  return MEMORY[0x1E0DEC280]();
}

uint64_t sub_1D451B400()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1D451B40C()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1D451B418()
{
  return MEMORY[0x1E0DEC300]();
}

uint64_t sub_1D451B424()
{
  return MEMORY[0x1E0DEC390]();
}

uint64_t sub_1D451B430()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t sub_1D451B43C()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1D451B448()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1D451B454()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t sub_1D451B460()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t sub_1D451B46C()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1D451B478()
{
  return MEMORY[0x1E0DF0B08]();
}

uint64_t sub_1D451B484()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1D451B490()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1D451B49C()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1D451B4A8()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1D451B4B4()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1D451B4C0()
{
  return MEMORY[0x1E0DF0B60]();
}

uint64_t sub_1D451B4CC()
{
  return MEMORY[0x1E0DF0B98]();
}

uint64_t sub_1D451B4D8()
{
  return MEMORY[0x1E0DF0BA0]();
}

uint64_t sub_1D451B4E4()
{
  return MEMORY[0x1E0DEC7D0]();
}

uint64_t sub_1D451B4F0()
{
  return MEMORY[0x1E0DEC888]();
}

uint64_t sub_1D451B4FC()
{
  return MEMORY[0x1E0DEC898]();
}

uint64_t sub_1D451B508()
{
  return MEMORY[0x1E0DEC8A8]();
}

uint64_t sub_1D451B514()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1D451B520()
{
  return MEMORY[0x1E0DF0C68]();
}

uint64_t sub_1D451B52C()
{
  return MEMORY[0x1E0DECAE0]();
}

uint64_t sub_1D451B538()
{
  return MEMORY[0x1E0DECAF8]();
}

uint64_t sub_1D451B544()
{
  return MEMORY[0x1E0DECB00]();
}

uint64_t sub_1D451B550()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1D451B55C()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1D451B568()
{
  return MEMORY[0x1E0DECBF8]();
}

uint64_t sub_1D451B574()
{
  return MEMORY[0x1E0DECC10]();
}

uint64_t sub_1D451B580()
{
  return MEMORY[0x1E0DECC18]();
}

uint64_t sub_1D451B58C()
{
  return MEMORY[0x1E0DECC20]();
}

uint64_t sub_1D451B598()
{
  return MEMORY[0x1E0DECC30]();
}

uint64_t sub_1D451B5A4()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1D451B5B0()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1D451B5BC()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1D451B5C8()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1D451B5D4()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1D451B5E0()
{
  return MEMORY[0x1E0DECD90]();
}

uint64_t sub_1D451B5EC()
{
  return MEMORY[0x1E0DECE18]();
}

uint64_t sub_1D451B5F8()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1D451B604()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1D451B610()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t sub_1D451B61C()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t sub_1D451B628()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t sub_1D451B634()
{
  return MEMORY[0x1E0DECF78]();
}

uint64_t sub_1D451B640()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t sub_1D451B64C()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_1D451B658()
{
  return MEMORY[0x1E0DECFC8]();
}

uint64_t sub_1D451B664()
{
  return MEMORY[0x1E0DECFD0]();
}

uint64_t sub_1D451B670()
{
  return MEMORY[0x1E0DECFD8]();
}

uint64_t sub_1D451B67C()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_1D451B688()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1D451B694()
{
  return MEMORY[0x1E0DED008]();
}

uint64_t sub_1D451B6A0()
{
  return MEMORY[0x1E0DED010]();
}

uint64_t sub_1D451B6AC()
{
  return MEMORY[0x1E0DED018]();
}

uint64_t sub_1D451B6B8()
{
  return MEMORY[0x1E0DED028]();
}

uint64_t sub_1D451B6C4()
{
  return MEMORY[0x1E0DED030]();
}

uint64_t sub_1D451B6D0()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t sub_1D451B6DC()
{
  return MEMORY[0x1E0DED040]();
}

uint64_t sub_1D451B6E8()
{
  return MEMORY[0x1E0DED048]();
}

uint64_t sub_1D451B6F4()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t sub_1D451B700()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t sub_1D451B70C()
{
  return MEMORY[0x1E0DED0B0]();
}

uint64_t sub_1D451B718()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t sub_1D451B724()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_1D451B730()
{
  return MEMORY[0x1E0DED0F8]();
}

uint64_t sub_1D451B73C()
{
  return MEMORY[0x1E0DED100]();
}

uint64_t sub_1D451B748()
{
  return MEMORY[0x1E0DED108]();
}

uint64_t sub_1D451B754()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_1D451B760()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1D451B76C()
{
  return MEMORY[0x1E0DED138]();
}

uint64_t sub_1D451B778()
{
  return MEMORY[0x1E0DED140]();
}

uint64_t sub_1D451B784()
{
  return MEMORY[0x1E0DED148]();
}

uint64_t sub_1D451B790()
{
  return MEMORY[0x1E0DED158]();
}

uint64_t sub_1D451B79C()
{
  return MEMORY[0x1E0DED160]();
}

uint64_t sub_1D451B7A8()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t sub_1D451B7B4()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_1D451B7C0()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1D451B7CC()
{
  return MEMORY[0x1E0DED1E8]();
}

uint64_t sub_1D451B7D8()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t sub_1D451B7E4()
{
  return MEMORY[0x1E0DF0E50]();
}

uint64_t sub_1D451B7F0()
{
  return MEMORY[0x1E0DF0E60]();
}

uint64_t sub_1D451B7FC()
{
  return MEMORY[0x1E0DED4A0]();
}

uint64_t sub_1D451B808()
{
  return MEMORY[0x1E0DED5C0]();
}

uint64_t sub_1D451B814()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_1D451B820()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1D451B82C()
{
  return MEMORY[0x1E0DF0E78]();
}

uint64_t sub_1D451B838()
{
  return MEMORY[0x1E0DED658]();
}

uint64_t sub_1D451B844()
{
  return MEMORY[0x1E0DED690]();
}

uint64_t sub_1D451B850()
{
  return MEMORY[0x1E0DED6F8]();
}

uint64_t sub_1D451B85C()
{
  return MEMORY[0x1E0DED740]();
}

uint64_t sub_1D451B868()
{
  return MEMORY[0x1E0DED768]();
}

uint64_t sub_1D451B874()
{
  return MEMORY[0x1E0DED770]();
}

uint64_t sub_1D451B880()
{
  return MEMORY[0x1E0DED9E8]();
}

uint64_t sub_1D451B88C()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t sub_1D451B898()
{
  return MEMORY[0x1E0DEDA30]();
}

uint64_t sub_1D451B8A4()
{
  return MEMORY[0x1E0DEDAD0]();
}

uint64_t sub_1D451B8B0()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1D451B8BC()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1D451B8C8()
{
  return MEMORY[0x1E0DF0EE8]();
}

uint64_t sub_1D451B8D4()
{
  return MEMORY[0x1E0DF0EF0]();
}

uint64_t sub_1D451B8E0()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_1D451B8EC()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1D451B8F8()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1D451B904()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1D451B910()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1D451B91C()
{
  return MEMORY[0x1E0DEDB30]();
}

uint64_t sub_1D451B928()
{
  return MEMORY[0x1E0CB2680]();
}

uint64_t sub_1D451B934()
{
  return MEMORY[0x1E0CB2688]();
}

uint64_t sub_1D451B940()
{
  return MEMORY[0x1E0DEDED8]();
}

uint64_t sub_1D451B94C()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t sub_1D451B958()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1D451B964()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1D451B970()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1D451B97C()
{
  return MEMORY[0x1E0DEDF28]();
}

uint64_t sub_1D451B988()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_1D451B994()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1D451B9A0()
{
  return MEMORY[0x1E0DEDF80]();
}

uint64_t sub_1D451B9AC()
{
  return MEMORY[0x1E0DEDFC8]();
}

uint64_t sub_1D451B9B8()
{
  return MEMORY[0x1E0DEDFF0]();
}

uint64_t sub_1D451B9C4()
{
  return MEMORY[0x1E0DEDFF8]();
}

uint64_t sub_1D451B9D0()
{
  return MEMORY[0x1E0DEE000]();
}

uint64_t sub_1D451B9DC()
{
  return MEMORY[0x1E0DEE020]();
}

uint64_t sub_1D451B9E8()
{
  return MEMORY[0x1E0DEE030]();
}

uint64_t sub_1D451B9F4()
{
  return MEMORY[0x1E0DEE0E8]();
}

uint64_t sub_1D451BA00()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t sub_1D451BA0C()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1D451BA18()
{
  return MEMORY[0x1E0DEE260]();
}

uint64_t sub_1D451BA24()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1D451BA30()
{
  return MEMORY[0x1E0DEE7C8]();
}

uint64_t sub_1D451BA3C()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1D451BA48()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_1D451BA54()
{
  return MEMORY[0x1E0DEE978]();
}

OSStatus AudioQueueAddPropertyListener(AudioQueueRef inAQ, AudioQueuePropertyID inID, AudioQueuePropertyListenerProc inProc, void *inUserData)
{
  return MEMORY[0x1E0C91FF0](inAQ, *(_QWORD *)&inID, inProc, inUserData);
}

OSStatus AudioQueueAllocateBuffer(AudioQueueRef inAQ, UInt32 inBufferByteSize, AudioQueueBufferRef *outBuffer)
{
  return MEMORY[0x1E0C91FF8](inAQ, *(_QWORD *)&inBufferByteSize, outBuffer);
}

OSStatus AudioQueueDispose(AudioQueueRef inAQ, Boolean inImmediate)
{
  return MEMORY[0x1E0C92030](inAQ, inImmediate);
}

OSStatus AudioQueueEnqueueBuffer(AudioQueueRef inAQ, AudioQueueBufferRef inBuffer, UInt32 inNumPacketDescs, const AudioStreamPacketDescription *inPacketDescs)
{
  return MEMORY[0x1E0C92038](inAQ, inBuffer, *(_QWORD *)&inNumPacketDescs, inPacketDescs);
}

OSStatus AudioQueueGetProperty(AudioQueueRef inAQ, AudioQueuePropertyID inID, void *outData, UInt32 *ioDataSize)
{
  return MEMORY[0x1E0C92070](inAQ, *(_QWORD *)&inID, outData, ioDataSize);
}

uint64_t AudioQueueNewInputWithAudioSession()
{
  return MEMORY[0x1E0C92088]();
}

OSStatus AudioQueueRemovePropertyListener(AudioQueueRef inAQ, AudioQueuePropertyID inID, AudioQueuePropertyListenerProc inProc, void *inUserData)
{
  return MEMORY[0x1E0C920E0](inAQ, *(_QWORD *)&inID, inProc, inUserData);
}

OSStatus AudioQueueSetProperty(AudioQueueRef inAQ, AudioQueuePropertyID inID, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x1E0C92100](inAQ, *(_QWORD *)&inID, inData, *(_QWORD *)&inDataSize);
}

OSStatus AudioQueueStart(AudioQueueRef inAQ, const AudioTimeStamp *inStartTime)
{
  return MEMORY[0x1E0C92108](inAQ, inStartTime);
}

OSStatus AudioQueueStop(AudioQueueRef inAQ, Boolean inImmediate)
{
  return MEMORY[0x1E0C92118](inAQ, inImmediate);
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
  MEMORY[0x1E0C801D8](*(_QWORD *)&algorithm, key, keyLength, data, dataLength, macOut);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F298](retstr, lhs, rhs);
}

CMTime *__cdecl CMTimeClampToRange(CMTime *__return_ptr retstr, CMTime *time, CMTimeRange *range)
{
  return (CMTime *)MEMORY[0x1E0C9F2A0](retstr, time, range);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CMTime *__cdecl CMTimeConvertScale(CMTime *__return_ptr retstr, CMTime *time, int32_t newTimescale, CMTimeRoundingMethod method)
{
  return (CMTime *)MEMORY[0x1E0C9F2E0](retstr, time, *(_QWORD *)&newTimescale, *(_QWORD *)&method);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1E0C9F330](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeMultiply(CMTime *__return_ptr retstr, CMTime *time, int32_t multiplier)
{
  return (CMTime *)MEMORY[0x1E0C9F380](retstr, time, *(_QWORD *)&multiplier);
}

CMTime *__cdecl CMTimeMultiplyByRatio(CMTime *__return_ptr retstr, CMTime *time, int32_t multiplier, int32_t divisor)
{
  return (CMTime *)MEMORY[0x1E0C9F390](retstr, time, *(_QWORD *)&multiplier, *(_QWORD *)&divisor);
}

Boolean CMTimeRangeContainsTime(CMTimeRange *range, CMTime *time)
{
  return MEMORY[0x1E0C9F3A0](range, time);
}

CFDictionaryRef CMTimeRangeCopyAsDictionary(CMTimeRange *range, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F3B0](range, allocator);
}

CMTimeRange *__cdecl CMTimeRangeFromTimeToTime(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *end)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3C8](retstr, start, end);
}

CMTime *__cdecl CMTimeRangeGetEnd(CMTime *__return_ptr retstr, CMTimeRange *range)
{
  return (CMTime *)MEMORY[0x1E0C9F3D0](retstr, range);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3E8](retstr, start, duration);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD80](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return MEMORY[0x1E0CBAE38](notifier);
}

BOOLean_t IOIteratorIsValid(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB658](*(_QWORD *)&iterator);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

void IOIteratorReset(io_iterator_t iterator)
{
  MEMORY[0x1E0CBB670](*(_QWORD *)&iterator);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
  MEMORY[0x1E0CBB6A0](notify);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1E0CBB9D0](*(_QWORD *)&connect);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1E0CBBA10](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1E0DE2B68]();
}

uint64_t MobileGestalt_copy_buildVersion_obj()
{
  return MEMORY[0x1E0DE2BB0]();
}

uint64_t MobileGestalt_get_current_device()
{
  return MEMORY[0x1E0DE2C00]();
}

uint64_t MobileGestalt_get_exclaveCapability()
{
  return MEMORY[0x1E0DE2C20]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t PPSCreateTelemetryIdentifier()
{
  return MEMORY[0x1E0D7FE50]();
}

uint64_t PPSSendTelemetry()
{
  return MEMORY[0x1E0D7FE68]();
}

uint64_t RegisterForIsolatedAudio()
{
  return MEMORY[0x1E0D3EFB8]();
}

uint64_t RequestIsolatedAudio()
{
  return MEMORY[0x1E0D3EFD0]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

uint64_t SetAudioLapseHandler()
{
  return MEMORY[0x1E0D3EFE0]();
}

uint64_t StartIsolatedAudio()
{
  return MEMORY[0x1E0D3EFF0]();
}

uint64_t StopIsolatedAudio()
{
  return MEMORY[0x1E0D3F000]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t AUProcessingBlock_DSPGraph::AUProcessingBlock_DSPGraph()
{
  return MEMORY[0x1E0CFF898]();
}

uint64_t AT::RingBuffer::Fetch(AT::RingBuffer *this, AudioBufferList *a2)
{
  return MEMORY[0x1E0CFF8F0](this, a2);
}

uint64_t AT::RingBuffer::Store(AT::RingBuffer *this, const AudioBufferList *a2)
{
  return MEMORY[0x1E0CFF8F8](this, a2);
}

uint64_t AT::RingBuffer::RingBuffer(AT::RingBuffer *this, const AudioStreamBasicDescription *a2)
{
  return MEMORY[0x1E0CFF900](this, a2);
}

void AT::RingBuffer::~RingBuffer(AT::RingBuffer *this)
{
  MEMORY[0x1E0CFF908](this);
}

uint64_t DSPGraph::ABIVersion(DSPGraph *this)
{
  return MEMORY[0x1E0CFF968](this);
}

uint64_t DSPGraph::RingBuffer::initialize(DSPGraph::RingBuffer *this)
{
  return MEMORY[0x1E0CFF970](this);
}

uint64_t DSPGraph::RingBuffer::free(DSPGraph::RingBuffer *this)
{
  return MEMORY[0x1E0CFF978](this);
}

uint64_t DSPGraph::RingBuffer::read()
{
  return MEMORY[0x1E0CFF980]();
}

uint64_t DSPGraph::RingBuffer::alloc(DSPGraph::RingBuffer *this)
{
  return MEMORY[0x1E0CFF988](this);
}

uint64_t DSPGraph::RingBuffer::write()
{
  return MEMORY[0x1E0CFF990]();
}

{
  return MEMORY[0x1E0CFF998]();
}

void DSPGraph::RingBuffer::~RingBuffer(DSPGraph::RingBuffer *this)
{
  MEMORY[0x1E0CFF9A0](this);
}

uint64_t DSPGraph::Interpreter::compileFile()
{
  return MEMORY[0x1E0CFF9A8]();
}

uint64_t DSPGraph::Interpreter::compileText()
{
  return MEMORY[0x1E0CFF9B0]();
}

uint64_t DSPGraph::Interpreter::Interpreter()
{
  return MEMORY[0x1E0CFF9B8]();
}

uint64_t DSPGraph::RingBufferBox::initialize(DSPGraph::RingBufferBox *this)
{
  return MEMORY[0x1E0CFF9C8](this);
}

uint64_t DSPGraph::RingBufferBox::uninitialize(DSPGraph::RingBufferBox *this)
{
  return MEMORY[0x1E0CFF9D0](this);
}

uint64_t DSPGraph::RingBufferBox::configureRingBuffer(DSPGraph::RingBufferBox *this)
{
  return MEMORY[0x1E0CFF9D8](this);
}

uint64_t DSPGraph::RingBufferBox::reset(DSPGraph::RingBufferBox *this)
{
  return MEMORY[0x1E0CFF9E0](this);
}

uint64_t DSPGraph::NewBoxRegistry::NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  return MEMORY[0x1E0CFF9F0](this);
}

uint64_t DSPGraph::ThrowException()
{
  return MEMORY[0x1E0CFF9F8]();
}

uint64_t DSPGraph::Box::initialize(DSPGraph::Box *this)
{
  return MEMORY[0x1E0CFFA08](this);
}

uint64_t DSPGraph::Box::uninitialize(DSPGraph::Box *this)
{
  return MEMORY[0x1E0CFFA10](this);
}

uint64_t DSPGraph::Box::addRenderCallback()
{
  return MEMORY[0x1E0CFFA18]();
}

uint64_t DSPGraph::Box::totalLatencyInTicks(DSPGraph::Box *this)
{
  return MEMORY[0x1E0CFFA20](this);
}

uint64_t DSPGraph::Box::upstreamLatencyInTicks(DSPGraph::Box *this)
{
  return MEMORY[0x1E0CFFA40](this);
}

uint64_t DSPGraph::Box::propagateFlagsAndTimeStamp(DSPGraph::Box *this, uint64_t a2, const AudioTimeStamp *a3)
{
  return MEMORY[0x1E0CFFA48](this, a2, a3);
}

uint64_t DSPGraph::Box::reset(DSPGraph::Box *this)
{
  return MEMORY[0x1E0CFFA50](this);
}

uint64_t DSPGraph::Box::Box(DSPGraph::Box *this)
{
  return MEMORY[0x1E0CFFA58](this);
}

void DSPGraph::Box::~Box(DSPGraph::Box *this)
{
  MEMORY[0x1E0CFFA60](this);
}

uint64_t DSPGraph::Graph::initialize(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFA68](this);
}

uint64_t DSPGraph::Graph::setAUStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  return MEMORY[0x1E0CFFA70](this, a2);
}

uint64_t DSPGraph::Graph::unconfigure(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFA78](this);
}

uint64_t DSPGraph::Graph::uninitialize(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFA80](this);
}

uint64_t DSPGraph::Graph::writeDotFile(DSPGraph::Graph *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0CFFA90](this, a2, a3);
}

uint64_t DSPGraph::Graph::processInPlace()
{
  return MEMORY[0x1E0CFFAA0]();
}

uint64_t DSPGraph::Graph::processMultiple()
{
  return MEMORY[0x1E0CFFAA8]();
}

uint64_t DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, const __CFDictionary *a2, const __CFString *a3)
{
  return MEMORY[0x1E0CFFAC0](this, a2, a3);
}

uint64_t DSPGraph::Graph::setSliceDuration()
{
  return MEMORY[0x1E0CFFAC8]();
}

uint64_t DSPGraph::Graph::add()
{
  return MEMORY[0x1E0CFFAE8]();
}

uint64_t DSPGraph::Graph::box()
{
  return MEMORY[0x1E0CFFAF8]();
}

uint64_t DSPGraph::Graph::reset(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFB00](this);
}

uint64_t DSPGraph::Graph::connect()
{
  return MEMORY[0x1E0CFFB08]();
}

uint64_t DSPGraph::Graph::addInput()
{
  return MEMORY[0x1E0CFFB18]();
}

uint64_t DSPGraph::Graph::addOutput()
{
  return MEMORY[0x1E0CFFB20]();
}

uint64_t DSPGraph::Graph::configure(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFB28](this);
}

uint64_t DSPGraph::Graph::preflight()
{
  return MEMORY[0x1E0CFFB38]();
}

uint64_t DSPGraph::Graph::Graph(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFB40](this);
}

uint64_t DSPGraph::Buffer::copyTimeFrom()
{
  return MEMORY[0x1E0CFFB48]();
}

uint64_t DSPGraph::Buffer::restoreSizeToCapacity(DSPGraph::Buffer *this)
{
  return MEMORY[0x1E0CFFB50](this);
}

uint64_t DSPGraph::Buffer::copyFrom(DSPGraph::Buffer *this, DSPGraph::Buffer *a2)
{
  return MEMORY[0x1E0CFFB58](this, a2);
}

uint64_t DSPGraph::printi()
{
  return MEMORY[0x1E0CFFB60]();
}

uint64_t DSPGraph::SimpleABL::SimpleABL(DSPGraph::SimpleABL *this, AudioBufferList *a2)
{
  return MEMORY[0x1E0CFFB68](this, a2);
}

uint64_t DSPGraph::SimpleABL::SimpleABL(DSPGraph::SimpleABL *this)
{
  return MEMORY[0x1E0CFFB70](this);
}

void DSPGraph::SimpleABL::~SimpleABL(DSPGraph::SimpleABL *this)
{
  MEMORY[0x1E0CFFB78](this);
}

uint64_t DSPGraph::strprintf(DSPGraph *this, const char *a2, ...)
{
  return MEMORY[0x1E0CFFB80](this, a2);
}

uint64_t AT::RingBuffer::GetTimeBounds(AT::RingBuffer *this)
{
  return MEMORY[0x1E0CFFB88](this);
}

uint64_t DSPGraph::Box::sampleRate(DSPGraph::Box *this)
{
  return MEMORY[0x1E0CFFB98](this);
}

uint64_t DSPGraph::Box::initialized(DSPGraph::Box *this)
{
  return MEMORY[0x1E0CFFBA0](this);
}

uint64_t DSPGraph::Box::print()
{
  return MEMORY[0x1E0CFFBA8]();
}

uint64_t DSPGraph::FCBox::upstreamBlockSize(DSPGraph::FCBox *this)
{
  return MEMORY[0x1E0CFFBB0](this);
}

uint64_t DSPGraph::FCBox::downstreamBlockSize(DSPGraph::FCBox *this)
{
  return MEMORY[0x1E0CFFBB8](this);
}

uint64_t DSPGraph::FCBox::downstreamSampleRate(DSPGraph::FCBox *this)
{
  return MEMORY[0x1E0CFFBC0](this);
}

uint64_t DSPGraph::FCBox::downstreamSampleTime(DSPGraph::FCBox *this)
{
  return MEMORY[0x1E0CFFBC8](this);
}

uint64_t DSPGraph::FCBox::downstreamFramesPerPacket(DSPGraph::FCBox *this)
{
  return MEMORY[0x1E0CFFBD0](this);
}

uint64_t DSPGraph::Graph::numOutputs(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFBD8](this);
}

uint64_t DSPGraph::Graph::getParameterList(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFBF8](this);
}

uint64_t DSPGraph::Graph::in(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFC00](this);
}

uint64_t DSPGraph::Graph::out(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFC08](this);
}

uint64_t DSPGraph::Graph::numInputs(DSPGraph::Graph *this)
{
  return MEMORY[0x1E0CFFC18](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4278](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4848]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D68](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E9796CB8();
}

void operator delete(void *__p)
{
  off_1E9796CC0(__p);
}

uint64_t operator delete()
{
  return off_1E9796CC8();
}

uint64_t operator new[]()
{
  return off_1E9796CD0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E9796CD8(__sz);
}

uint64_t operator new()
{
  return off_1E9796CE0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

uint64_t _availability_version_check()
{
  return MEMORY[0x1E0C80CC0]();
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x1E0DE7960]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x1E0DE7970]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1E0DEEA50]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t e5rt_buffer_object_get_data_ptr()
{
  return MEMORY[0x1E0D1F918]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x1E0D1FA80]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x1E0D1FAA0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation()
{
  return MEMORY[0x1E0D1FAE0]();
}

uint64_t e5rt_execution_stream_operation_reshape_operation()
{
  return MEMORY[0x1E0D1FB70]();
}

uint64_t e5rt_execution_stream_operation_retain_input_port()
{
  return MEMORY[0x1E0D1FB98]();
}

uint64_t e5rt_execution_stream_operation_retain_output_port()
{
  return MEMORY[0x1E0D1FBA8]();
}

uint64_t e5rt_io_port_retain_buffer_object()
{
  return MEMORY[0x1E0D1FC50]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x1E0D1FC68]();
}

uint64_t e5rt_operand_desc_retain_from_tensor_desc()
{
  return MEMORY[0x1E0D1FC88]();
}

uint64_t e5rt_tensor_desc_alloc_buffer_object()
{
  return MEMORY[0x1E0D1FDC8]();
}

uint64_t e5rt_tensor_desc_create()
{
  return MEMORY[0x1E0D1FDE0]();
}

uint64_t e5rt_tensor_desc_dtype_create()
{
  return MEMORY[0x1E0D1FDE8]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype()
{
  return MEMORY[0x1E0D1FDF8]();
}

uint64_t e5rt_tensor_desc_dtype_get_num_components()
{
  return MEMORY[0x1E0D1FE28]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x1E0D1FE50]();
}

uint64_t e5rt_tensor_desc_get_size()
{
  return MEMORY[0x1E0D1FE60]();
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83378](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1E0C83668]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

uint64_t mach_get_times()
{
  return MEMORY[0x1E0C83C88]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

uint64_t os_enumerate_boot_args_b()
{
  return MEMORY[0x1E0C84690]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1E0C84948]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1E0C849A8](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1E0C849B8]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1E0C849D0]();
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1E0C849D8]();
}

void rewind(FILE *a1)
{
  MEMORY[0x1E0C85120](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocEmptyBox()
{
  return MEMORY[0x1E0DEEAA0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocBox()
{
  return MEMORY[0x1E0DEEB48]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x1E0DEEB70]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1E0DEEB90]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1E0DEEB98]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1E0DEEBB8]();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return MEMORY[0x1E0DEEBC0]();
}

uint64_t swift_dynamicCastTypeToObjCProtocolConditional()
{
  return MEMORY[0x1E0DEEBC8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getFunctionTypeMetadata0()
{
  return MEMORY[0x1E0DEEC90]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return MEMORY[0x1E0DEED68]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1E0DEED90]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x1E0DEEDC0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_taskGroup_wait_next_throwing()
{
  return MEMORY[0x1E0DF0FF0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1E0DEEF28]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1E0DEEF30]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1E0DEEF50]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1E0DEEF58]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1E0DEEF80]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void vDSP_DFT_DestroySetup(vDSP_DFT_Setup __Setup)
{
  MEMORY[0x1E0C8BF50](__Setup);
}

void vDSP_DFT_Execute(const vDSP_DFT_SetupStruct *__Setup, const float *__Ir, const float *__Ii, float *__Or, float *__Oi)
{
  MEMORY[0x1E0C8BF60](__Setup, __Ir, __Ii, __Or, __Oi);
}

vDSP_DFT_Setup vDSP_DFT_zrop_CreateSetup(vDSP_DFT_Setup __Previous, vDSP_Length __Length, vDSP_DFT_Direction __Direction)
{
  return (vDSP_DFT_Setup)MEMORY[0x1E0C8BFB0](__Previous, __Length, *(_QWORD *)&__Direction);
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
  MEMORY[0x1E0C8C070](__C, __IC, __Z, __IZ, __N);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_hann_window(float *__C, vDSP_Length __N, int __Flag)
{
  MEMORY[0x1E0C8C160](__C, __N, *(_QWORD *)&__Flag);
}

void vDSP_mtrans(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N)
{
  MEMORY[0x1E0C8C260](__A, __IA, __C, __IC, __M, __N);
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C368](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vdbcon(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N, unsigned int __F)
{
  MEMORY[0x1E0C8C420](__A, __IA, __B, __C, __IC, __N, *(_QWORD *)&__F);
}

void vDSP_vdpsp(const double *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C458](__A, __IA, __C, __IC, __N);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C740](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C800](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C8E0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_zvmags(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CAB8](__A, __IA, __C, __IC, __N);
}

void vvsqrtf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x1E0C8DB80](a1, a2, a3);
}

